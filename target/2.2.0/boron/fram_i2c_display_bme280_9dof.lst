
z:/Personal/Electronics/particle/fram_i2c_display_bme280_9dof/target/2.2.0/boron/fram_i2c_display_bme280_9dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007e80  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dbea0  000dbea0  0000bea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dbea8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003e420  000dbeac  0001e420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000358  2003e498  2003e498  0002e498  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000dbf24  000dbf24  0002bf24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dbf4c  000dbf4c  0002bf4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001e39e4  00000000  00000000  0002bf50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001d02f  00000000  00000000  0020f934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00031449  00000000  00000000  0022c963  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002aa8  00000000  00000000  0025ddac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007538  00000000  00000000  00260854  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00043337  00000000  00000000  00267d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004be28  00000000  00000000  002ab0c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010c9bb  00000000  00000000  002f6eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007dc8  00000000  00000000  004038a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fdcb 	bl	dabcc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fdd3 	bl	dabe8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e420 	.word	0x2003e420
   d404c:	000dbeac 	.word	0x000dbeac
   d4050:	2003e498 	.word	0x2003e498
   d4054:	2003e498 	.word	0x2003e498
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 f811 	bl	d8088 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dbe70 	.word	0x000dbe70
   d4080:	000dbe94 	.word	0x000dbe94

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 be34 	b.w	d4cf0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fbf5 	bl	d4878 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bfb1 	b.w	d7ff8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 bcad 	b.w	d79f4 <malloc>

000d409a <_Znaj>:
   d409a:	f003 bcab 	b.w	d79f4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 bcb1 	b.w	d7a04 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fc0e 	bl	d78cc <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d75ed 	.word	0x000d75ed

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z12isr_rotationv>:
else
Serial.println("N");
} 

// This is the function that the interrupt calls to increment the rotation count
void isr_rotation () {
   d40c8:	b510      	push	{r4, lr}

if ((millis() - ContactBounceTime) > 15 ) { // debounce the switch contact.
   d40ca:	4c07      	ldr	r4, [pc, #28]	; (d40e8 <_Z12isr_rotationv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40cc:	f003 fa96 	bl	d75fc <HAL_Timer_Get_Milli_Seconds>
   d40d0:	6823      	ldr	r3, [r4, #0]
   d40d2:	1ac0      	subs	r0, r0, r3
   d40d4:	280f      	cmp	r0, #15
   d40d6:	d906      	bls.n	d40e6 <_Z12isr_rotationv+0x1e>
Rotations++;
   d40d8:	4a04      	ldr	r2, [pc, #16]	; (d40ec <_Z12isr_rotationv+0x24>)
   d40da:	6813      	ldr	r3, [r2, #0]
   d40dc:	3301      	adds	r3, #1
   d40de:	6013      	str	r3, [r2, #0]
   d40e0:	f003 fa8c 	bl	d75fc <HAL_Timer_Get_Milli_Seconds>
ContactBounceTime = millis();
   d40e4:	6020      	str	r0, [r4, #0]
}

}
   d40e6:	bd10      	pop	{r4, pc}
   d40e8:	2003e49c 	.word	0x2003e49c
   d40ec:	2003e4a8 	.word	0x2003e4a8

000d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d40f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d40f2:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d40f4:	4607      	mov	r7, r0
   d40f6:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d40f8:	da0c      	bge.n	d4114 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
   d40fa:	2a0a      	cmp	r2, #10
   d40fc:	d10a      	bne.n	d4114 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d40fe:	212d      	movs	r1, #45	; 0x2d
   d4100:	f003 fde6 	bl	d7cd0 <_ZN5Print5printEc>
            val = -n;
   d4104:	4261      	negs	r1, r4
            t = print('-');
   d4106:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4108:	b2f2      	uxtb	r2, r6
   d410a:	4638      	mov	r0, r7
   d410c:	f003 fdff 	bl	d7d0e <_ZN5Print11printNumberEmh>
    }
}
   d4110:	4428      	add	r0, r5
   d4112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d4114:	4621      	mov	r1, r4
        size_t t = 0;
   d4116:	2500      	movs	r5, #0
   d4118:	e7f6      	b.n	d4108 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x18>
	...

000d411c <_Z11printValuesv>:
void printValues() {
   d411c:	b538      	push	{r3, r4, r5, lr}
    Serial.print("\n\nTemperature = ");
   d411e:	f004 f8bb 	bl	d8298 <_Z16_fetch_usbserialv>
   d4122:	4936      	ldr	r1, [pc, #216]	; (d41fc <_Z11printValuesv+0xe0>)
    Serial.print(bme.readTemperature()*1.8F + 32.);
   d4124:	4c36      	ldr	r4, [pc, #216]	; (d4200 <_Z11printValuesv+0xe4>)
    Serial.print("\n\nTemperature = ");
   d4126:	f003 fdcf 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature()*1.8F + 32.);
   d412a:	f004 f8b5 	bl	d8298 <_Z16_fetch_usbserialv>
   d412e:	4605      	mov	r5, r0
   d4130:	4620      	mov	r0, r4
   d4132:	f001 f997 	bl	d5464 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4136:	eddf 7a33 	vldr	s15, [pc, #204]	; d4204 <_Z11printValuesv+0xe8>
   d413a:	ee60 7a27 	vmul.f32	s15, s0, s15
   d413e:	ee17 0a90 	vmov	r0, s15
   d4142:	f005 fedb 	bl	d9efc <__aeabi_f2d>
   d4146:	4b30      	ldr	r3, [pc, #192]	; (d4208 <_Z11printValuesv+0xec>)
   d4148:	2200      	movs	r2, #0
   d414a:	f005 fd79 	bl	d9c40 <__adddf3>
   d414e:	ec41 0b10 	vmov	d0, r0, r1
   d4152:	2102      	movs	r1, #2
   d4154:	4628      	mov	r0, r5
   d4156:	f003 fed0 	bl	d7efa <_ZN5Print5printEdi>
    Serial.println(" F");
   d415a:	f004 f89d 	bl	d8298 <_Z16_fetch_usbserialv>
   d415e:	492b      	ldr	r1, [pc, #172]	; (d420c <_Z11printValuesv+0xf0>)
   d4160:	f003 fdc9 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    Serial.print("Pressure = ");
   d4164:	f004 f898 	bl	d8298 <_Z16_fetch_usbserialv>
   d4168:	4929      	ldr	r1, [pc, #164]	; (d4210 <_Z11printValuesv+0xf4>)
   d416a:	f003 fdad 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(bme.readPressure() / 101325.0F * 760.0F);
   d416e:	f004 f893 	bl	d8298 <_Z16_fetch_usbserialv>
   d4172:	4605      	mov	r5, r0
   d4174:	4620      	mov	r0, r4
   d4176:	f001 f9a3 	bl	d54c0 <_ZN15Adafruit_BME28012readPressureEv>
   d417a:	eddf 7a26 	vldr	s15, [pc, #152]	; d4214 <_Z11printValuesv+0xf8>
   d417e:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d4182:	2102      	movs	r1, #2
   d4184:	4628      	mov	r0, r5
   d4186:	ed9f 0a24 	vldr	s0, [pc, #144]	; d4218 <_Z11printValuesv+0xfc>
   d418a:	ee27 0a00 	vmul.f32	s0, s14, s0
   d418e:	f003 fea5 	bl	d7edc <_ZN5Print5printEfi>
    Serial.println(" mmHg");
   d4192:	f004 f881 	bl	d8298 <_Z16_fetch_usbserialv>
   d4196:	4921      	ldr	r1, [pc, #132]	; (d421c <_Z11printValuesv+0x100>)
   d4198:	f003 fdad 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    Serial.print("Approx. Altitude = ");
   d419c:	f004 f87c 	bl	d8298 <_Z16_fetch_usbserialv>
   d41a0:	491f      	ldr	r1, [pc, #124]	; (d4220 <_Z11printValuesv+0x104>)
   d41a2:	f003 fd91 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d41a6:	f004 f877 	bl	d8298 <_Z16_fetch_usbserialv>
   d41aa:	ed9f 0a1e 	vldr	s0, [pc, #120]	; d4224 <_Z11printValuesv+0x108>
   d41ae:	4605      	mov	r5, r0
   d41b0:	4620      	mov	r0, r4
   d41b2:	f001 fa61 	bl	d5678 <_ZN15Adafruit_BME28012readAltitudeEf>
   d41b6:	2102      	movs	r1, #2
   d41b8:	4628      	mov	r0, r5
   d41ba:	f003 fe8f 	bl	d7edc <_ZN5Print5printEfi>
    Serial.println(" m");
   d41be:	f004 f86b 	bl	d8298 <_Z16_fetch_usbserialv>
   d41c2:	4919      	ldr	r1, [pc, #100]	; (d4228 <_Z11printValuesv+0x10c>)
   d41c4:	f003 fd97 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    Serial.print("Humidity = ");
   d41c8:	f004 f866 	bl	d8298 <_Z16_fetch_usbserialv>
   d41cc:	4917      	ldr	r1, [pc, #92]	; (d422c <_Z11printValuesv+0x110>)
   d41ce:	f003 fd7b 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d41d2:	f004 f861 	bl	d8298 <_Z16_fetch_usbserialv>
   d41d6:	4605      	mov	r5, r0
   d41d8:	4620      	mov	r0, r4
   d41da:	f001 faed 	bl	d57b8 <_ZN15Adafruit_BME28012readHumidityEv>
   d41de:	2102      	movs	r1, #2
   d41e0:	4628      	mov	r0, r5
   d41e2:	f003 fe7b 	bl	d7edc <_ZN5Print5printEfi>
    Serial.println(" %");
   d41e6:	f004 f857 	bl	d8298 <_Z16_fetch_usbserialv>
   d41ea:	4911      	ldr	r1, [pc, #68]	; (d4230 <_Z11printValuesv+0x114>)
   d41ec:	f003 fd83 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    Serial.println();
   d41f0:	f004 f852 	bl	d8298 <_Z16_fetch_usbserialv>
}
   d41f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println();
   d41f8:	f003 bd71 	b.w	d7cde <_ZN5Print7printlnEv>
   d41fc:	000dad58 	.word	0x000dad58
   d4200:	2003e4b4 	.word	0x2003e4b4
   d4204:	3fe66666 	.word	0x3fe66666
   d4208:	40400000 	.word	0x40400000
   d420c:	000dad69 	.word	0x000dad69
   d4210:	000dad6c 	.word	0x000dad6c
   d4214:	47c5e680 	.word	0x47c5e680
   d4218:	443e0000 	.word	0x443e0000
   d421c:	000dad78 	.word	0x000dad78
   d4220:	000dad7e 	.word	0x000dad7e
   d4224:	447d5000 	.word	0x447d5000
   d4228:	000dad92 	.word	0x000dad92
   d422c:	000dad95 	.word	0x000dad95
   d4230:	000dada1 	.word	0x000dada1

000d4234 <_Z20displaySensorDetailsv>:
{
   d4234:	b530      	push	{r4, r5, lr}
   d4236:	b08b      	sub	sp, #44	; 0x2c
  bno.getSensor(&sensor);
   d4238:	4669      	mov	r1, sp
   d423a:	4842      	ldr	r0, [pc, #264]	; (d4344 <_Z20displaySensorDetailsv+0x110>)
   d423c:	f001 feba 	bl	d5fb4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
  Serial.println("------------------------------------");
   d4240:	f004 f82a 	bl	d8298 <_Z16_fetch_usbserialv>
   d4244:	4940      	ldr	r1, [pc, #256]	; (d4348 <_Z20displaySensorDetailsv+0x114>)
   d4246:	f003 fd56 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
   d424a:	f004 f825 	bl	d8298 <_Z16_fetch_usbserialv>
   d424e:	493f      	ldr	r1, [pc, #252]	; (d434c <_Z20displaySensorDetailsv+0x118>)
   d4250:	f003 fd3a 	bl	d7cc8 <_ZN5Print5printEPKc>
   d4254:	f004 f820 	bl	d8298 <_Z16_fetch_usbserialv>
   d4258:	4669      	mov	r1, sp
   d425a:	f003 fd4c 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
   d425e:	f004 f81b 	bl	d8298 <_Z16_fetch_usbserialv>
   d4262:	493b      	ldr	r1, [pc, #236]	; (d4350 <_Z20displaySensorDetailsv+0x11c>)
   d4264:	f003 fd30 	bl	d7cc8 <_ZN5Print5printEPKc>
   d4268:	f004 f816 	bl	d8298 <_Z16_fetch_usbserialv>
   d426c:	9c03      	ldr	r4, [sp, #12]
        if (n < 0 && base == 10) {
   d426e:	2c00      	cmp	r4, #0
   d4270:	4605      	mov	r5, r0
   d4272:	da63      	bge.n	d433c <_Z20displaySensorDetailsv+0x108>
            t = print('-');
   d4274:	212d      	movs	r1, #45	; 0x2d
   d4276:	f003 fd2b 	bl	d7cd0 <_ZN5Print5printEc>
            val = -n;
   d427a:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d427c:	220a      	movs	r2, #10
   d427e:	4628      	mov	r0, r5
   d4280:	f003 fd45 	bl	d7d0e <_ZN5Print11printNumberEmh>
        n += println();
   d4284:	4628      	mov	r0, r5
   d4286:	f003 fd2a 	bl	d7cde <_ZN5Print7printlnEv>
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
   d428a:	f004 f805 	bl	d8298 <_Z16_fetch_usbserialv>
   d428e:	4931      	ldr	r1, [pc, #196]	; (d4354 <_Z20displaySensorDetailsv+0x120>)
   d4290:	f003 fd1a 	bl	d7cc8 <_ZN5Print5printEPKc>
   d4294:	f004 f800 	bl	d8298 <_Z16_fetch_usbserialv>
   d4298:	9c04      	ldr	r4, [sp, #16]
        if (n < 0 && base == 10) {
   d429a:	2c00      	cmp	r4, #0
   d429c:	4605      	mov	r5, r0
   d429e:	da4f      	bge.n	d4340 <_Z20displaySensorDetailsv+0x10c>
            t = print('-');
   d42a0:	212d      	movs	r1, #45	; 0x2d
   d42a2:	f003 fd15 	bl	d7cd0 <_ZN5Print5printEc>
            val = -n;
   d42a6:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d42a8:	220a      	movs	r2, #10
   d42aa:	4628      	mov	r0, r5
   d42ac:	f003 fd2f 	bl	d7d0e <_ZN5Print11printNumberEmh>
        n += println();
   d42b0:	4628      	mov	r0, r5
   d42b2:	f003 fd14 	bl	d7cde <_ZN5Print7printlnEv>
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" xxx");
   d42b6:	f003 ffef 	bl	d8298 <_Z16_fetch_usbserialv>
   d42ba:	4927      	ldr	r1, [pc, #156]	; (d4358 <_Z20displaySensorDetailsv+0x124>)
   d42bc:	f003 fd04 	bl	d7cc8 <_ZN5Print5printEPKc>
   d42c0:	f003 ffea 	bl	d8298 <_Z16_fetch_usbserialv>
   d42c4:	ed9d 0a06 	vldr	s0, [sp, #24]
   d42c8:	2102      	movs	r1, #2
   d42ca:	f003 fe07 	bl	d7edc <_ZN5Print5printEfi>
   d42ce:	f003 ffe3 	bl	d8298 <_Z16_fetch_usbserialv>
   d42d2:	4922      	ldr	r1, [pc, #136]	; (d435c <_Z20displaySensorDetailsv+0x128>)
   d42d4:	f003 fd0f 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" xxx");
   d42d8:	f003 ffde 	bl	d8298 <_Z16_fetch_usbserialv>
   d42dc:	4920      	ldr	r1, [pc, #128]	; (d4360 <_Z20displaySensorDetailsv+0x12c>)
   d42de:	f003 fcf3 	bl	d7cc8 <_ZN5Print5printEPKc>
   d42e2:	f003 ffd9 	bl	d8298 <_Z16_fetch_usbserialv>
   d42e6:	ed9d 0a07 	vldr	s0, [sp, #28]
   d42ea:	2102      	movs	r1, #2
   d42ec:	f003 fdf6 	bl	d7edc <_ZN5Print5printEfi>
   d42f0:	f003 ffd2 	bl	d8298 <_Z16_fetch_usbserialv>
   d42f4:	4919      	ldr	r1, [pc, #100]	; (d435c <_Z20displaySensorDetailsv+0x128>)
   d42f6:	f003 fcfe 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" xxx");
   d42fa:	f003 ffcd 	bl	d8298 <_Z16_fetch_usbserialv>
   d42fe:	4919      	ldr	r1, [pc, #100]	; (d4364 <_Z20displaySensorDetailsv+0x130>)
   d4300:	f003 fce2 	bl	d7cc8 <_ZN5Print5printEPKc>
   d4304:	f003 ffc8 	bl	d8298 <_Z16_fetch_usbserialv>
   d4308:	ed9d 0a08 	vldr	s0, [sp, #32]
   d430c:	2102      	movs	r1, #2
   d430e:	f003 fde5 	bl	d7edc <_ZN5Print5printEfi>
   d4312:	f003 ffc1 	bl	d8298 <_Z16_fetch_usbserialv>
   d4316:	4911      	ldr	r1, [pc, #68]	; (d435c <_Z20displaySensorDetailsv+0x128>)
   d4318:	f003 fced 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  Serial.println("------------------------------------");
   d431c:	f003 ffbc 	bl	d8298 <_Z16_fetch_usbserialv>
   d4320:	4909      	ldr	r1, [pc, #36]	; (d4348 <_Z20displaySensorDetailsv+0x114>)
   d4322:	f003 fce8 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  Serial.println("");
   d4326:	f003 ffb7 	bl	d8298 <_Z16_fetch_usbserialv>
   d432a:	490f      	ldr	r1, [pc, #60]	; (d4368 <_Z20displaySensorDetailsv+0x134>)
   d432c:	f003 fce3 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  delay(500);
   d4330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4334:	f003 fe34 	bl	d7fa0 <delay>
}
   d4338:	b00b      	add	sp, #44	; 0x2c
   d433a:	bd30      	pop	{r4, r5, pc}
            val = n;
   d433c:	4621      	mov	r1, r4
   d433e:	e79d      	b.n	d427c <_Z20displaySensorDetailsv+0x48>
   d4340:	4621      	mov	r1, r4
   d4342:	e7b1      	b.n	d42a8 <_Z20displaySensorDetailsv+0x74>
   d4344:	2003e4f8 	.word	0x2003e4f8
   d4348:	000dada4 	.word	0x000dada4
   d434c:	000dadc9 	.word	0x000dadc9
   d4350:	000dadd8 	.word	0x000dadd8
   d4354:	000dade7 	.word	0x000dade7
   d4358:	000dadf6 	.word	0x000dadf6
   d435c:	000dae05 	.word	0x000dae05
   d4360:	000dae0a 	.word	0x000dae0a
   d4364:	000dae19 	.word	0x000dae19
   d4368:	000daf11 	.word	0x000daf11

000d436c <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>:
{
   d436c:	b538      	push	{r3, r4, r5, lr}
   d436e:	4604      	mov	r4, r0
    Serial.println("\nCalibration offsets \n");
   d4370:	f003 ff92 	bl	d8298 <_Z16_fetch_usbserialv>
   d4374:	494c      	ldr	r1, [pc, #304]	; (d44a8 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x13c>)
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   d4376:	4d4d      	ldr	r5, [pc, #308]	; (d44ac <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x140>)
    Serial.println("\nCalibration offsets \n");
   d4378:	f003 fcbd 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    Serial.print("Accelerometer: ");
   d437c:	f003 ff8c 	bl	d8298 <_Z16_fetch_usbserialv>
   d4380:	494b      	ldr	r1, [pc, #300]	; (d44b0 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x144>)
   d4382:	f003 fca1 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   d4386:	f003 ff87 	bl	d8298 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d438a:	220a      	movs	r2, #10
   d438c:	f9b4 1000 	ldrsh.w	r1, [r4]
   d4390:	f7ff feae 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4394:	f003 ff80 	bl	d8298 <_Z16_fetch_usbserialv>
   d4398:	4629      	mov	r1, r5
   d439a:	f003 fc95 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_y); Serial.print(" ");
   d439e:	f003 ff7b 	bl	d8298 <_Z16_fetch_usbserialv>
   d43a2:	220a      	movs	r2, #10
   d43a4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   d43a8:	f7ff fea2 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43ac:	f003 ff74 	bl	d8298 <_Z16_fetch_usbserialv>
   d43b0:	4629      	mov	r1, r5
   d43b2:	f003 fc89 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_z); Serial.print(" ");
   d43b6:	f003 ff6f 	bl	d8298 <_Z16_fetch_usbserialv>
   d43ba:	220a      	movs	r2, #10
   d43bc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   d43c0:	f7ff fe96 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43c4:	f003 ff68 	bl	d8298 <_Z16_fetch_usbserialv>
   d43c8:	4629      	mov	r1, r5
   d43ca:	f003 fc7d 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print("\nGyro: ");
   d43ce:	f003 ff63 	bl	d8298 <_Z16_fetch_usbserialv>
   d43d2:	4938      	ldr	r1, [pc, #224]	; (d44b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x148>)
   d43d4:	f003 fc78 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_x); Serial.print(" ");
   d43d8:	f003 ff5e 	bl	d8298 <_Z16_fetch_usbserialv>
   d43dc:	220a      	movs	r2, #10
   d43de:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   d43e2:	f7ff fe85 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43e6:	f003 ff57 	bl	d8298 <_Z16_fetch_usbserialv>
   d43ea:	4629      	mov	r1, r5
   d43ec:	f003 fc6c 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_y); Serial.print(" ");
   d43f0:	f003 ff52 	bl	d8298 <_Z16_fetch_usbserialv>
   d43f4:	220a      	movs	r2, #10
   d43f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   d43fa:	f7ff fe79 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43fe:	f003 ff4b 	bl	d8298 <_Z16_fetch_usbserialv>
   d4402:	4629      	mov	r1, r5
   d4404:	f003 fc60 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_z); Serial.print(" ");
   d4408:	f003 ff46 	bl	d8298 <_Z16_fetch_usbserialv>
   d440c:	220a      	movs	r2, #10
   d440e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4412:	f7ff fe6d 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4416:	f003 ff3f 	bl	d8298 <_Z16_fetch_usbserialv>
   d441a:	4629      	mov	r1, r5
   d441c:	f003 fc54 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print("\nMag: ");
   d4420:	f003 ff3a 	bl	d8298 <_Z16_fetch_usbserialv>
   d4424:	4924      	ldr	r1, [pc, #144]	; (d44b8 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x14c>)
   d4426:	f003 fc4f 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_x); Serial.print(" ");
   d442a:	f003 ff35 	bl	d8298 <_Z16_fetch_usbserialv>
   d442e:	220a      	movs	r2, #10
   d4430:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   d4434:	f7ff fe5c 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4438:	f003 ff2e 	bl	d8298 <_Z16_fetch_usbserialv>
   d443c:	4629      	mov	r1, r5
   d443e:	f003 fc43 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_y); Serial.print(" ");
   d4442:	f003 ff29 	bl	d8298 <_Z16_fetch_usbserialv>
   d4446:	220a      	movs	r2, #10
   d4448:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d444c:	f7ff fe50 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4450:	f003 ff22 	bl	d8298 <_Z16_fetch_usbserialv>
   d4454:	4629      	mov	r1, r5
   d4456:	f003 fc37 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_z); Serial.print(" ");
   d445a:	f003 ff1d 	bl	d8298 <_Z16_fetch_usbserialv>
   d445e:	220a      	movs	r2, #10
   d4460:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d4464:	f7ff fe44 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4468:	f003 ff16 	bl	d8298 <_Z16_fetch_usbserialv>
   d446c:	4629      	mov	r1, r5
   d446e:	f003 fc2b 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print("\nAccel Radius: ");
   d4472:	f003 ff11 	bl	d8298 <_Z16_fetch_usbserialv>
   d4476:	4911      	ldr	r1, [pc, #68]	; (d44bc <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x150>)
   d4478:	f003 fc26 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_radius);
   d447c:	f003 ff0c 	bl	d8298 <_Z16_fetch_usbserialv>
   d4480:	220a      	movs	r2, #10
   d4482:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
   d4486:	f7ff fe33 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
    Serial.print("\nMag Radius: ");
   d448a:	f003 ff05 	bl	d8298 <_Z16_fetch_usbserialv>
   d448e:	490c      	ldr	r1, [pc, #48]	; (d44c0 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x154>)
   d4490:	f003 fc1a 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_radius);
   d4494:	f003 ff00 	bl	d8298 <_Z16_fetch_usbserialv>
   d4498:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
   d449c:	220a      	movs	r2, #10
}
   d449e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d44a2:	f7ff be25 	b.w	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d44a6:	bf00      	nop
   d44a8:	000dae28 	.word	0x000dae28
   d44ac:	000dadd6 	.word	0x000dadd6
   d44b0:	000dae3f 	.word	0x000dae3f
   d44b4:	000dae4f 	.word	0x000dae4f
   d44b8:	000dae57 	.word	0x000dae57
   d44bc:	000dae5e 	.word	0x000dae5e
   d44c0:	000dae6e 	.word	0x000dae6e

000d44c4 <_Z10getHeadingi>:
if(direction < 22)
   d44c4:	2815      	cmp	r0, #21
void getHeading(int direction) {
   d44c6:	b508      	push	{r3, lr}
if(direction < 22)
   d44c8:	dc06      	bgt.n	d44d8 <_Z10getHeadingi+0x14>
Serial.println("N");
   d44ca:	f003 fee5 	bl	d8298 <_Z16_fetch_usbserialv>
   d44ce:	4918      	ldr	r1, [pc, #96]	; (d4530 <_Z10getHeadingi+0x6c>)
} 
   d44d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Serial.println("NW");
   d44d4:	f003 bc0f 	b.w	d7cf6 <_ZN5Print7printlnEPKc>
else if (direction < 67)
   d44d8:	2842      	cmp	r0, #66	; 0x42
   d44da:	dc03      	bgt.n	d44e4 <_Z10getHeadingi+0x20>
Serial.println("NE");
   d44dc:	f003 fedc 	bl	d8298 <_Z16_fetch_usbserialv>
   d44e0:	4914      	ldr	r1, [pc, #80]	; (d4534 <_Z10getHeadingi+0x70>)
   d44e2:	e7f5      	b.n	d44d0 <_Z10getHeadingi+0xc>
else if (direction < 112)
   d44e4:	286f      	cmp	r0, #111	; 0x6f
   d44e6:	dc03      	bgt.n	d44f0 <_Z10getHeadingi+0x2c>
Serial.println("E");
   d44e8:	f003 fed6 	bl	d8298 <_Z16_fetch_usbserialv>
   d44ec:	4912      	ldr	r1, [pc, #72]	; (d4538 <_Z10getHeadingi+0x74>)
   d44ee:	e7ef      	b.n	d44d0 <_Z10getHeadingi+0xc>
else if (direction < 157)
   d44f0:	289c      	cmp	r0, #156	; 0x9c
   d44f2:	dc03      	bgt.n	d44fc <_Z10getHeadingi+0x38>
Serial.println("SE");
   d44f4:	f003 fed0 	bl	d8298 <_Z16_fetch_usbserialv>
   d44f8:	4910      	ldr	r1, [pc, #64]	; (d453c <_Z10getHeadingi+0x78>)
   d44fa:	e7e9      	b.n	d44d0 <_Z10getHeadingi+0xc>
else if (direction < 212)
   d44fc:	28d3      	cmp	r0, #211	; 0xd3
   d44fe:	dc03      	bgt.n	d4508 <_Z10getHeadingi+0x44>
Serial.println("S");
   d4500:	f003 feca 	bl	d8298 <_Z16_fetch_usbserialv>
   d4504:	490e      	ldr	r1, [pc, #56]	; (d4540 <_Z10getHeadingi+0x7c>)
   d4506:	e7e3      	b.n	d44d0 <_Z10getHeadingi+0xc>
else if (direction < 247)
   d4508:	28f6      	cmp	r0, #246	; 0xf6
   d450a:	dc03      	bgt.n	d4514 <_Z10getHeadingi+0x50>
Serial.println("SW");
   d450c:	f003 fec4 	bl	d8298 <_Z16_fetch_usbserialv>
   d4510:	490c      	ldr	r1, [pc, #48]	; (d4544 <_Z10getHeadingi+0x80>)
   d4512:	e7dd      	b.n	d44d0 <_Z10getHeadingi+0xc>
else if (direction < 292)
   d4514:	f5b0 7f92 	cmp.w	r0, #292	; 0x124
   d4518:	da03      	bge.n	d4522 <_Z10getHeadingi+0x5e>
Serial.println("W");
   d451a:	f003 febd 	bl	d8298 <_Z16_fetch_usbserialv>
   d451e:	490a      	ldr	r1, [pc, #40]	; (d4548 <_Z10getHeadingi+0x84>)
   d4520:	e7d6      	b.n	d44d0 <_Z10getHeadingi+0xc>
else if (direction < 337)
   d4522:	f5b0 7fa8 	cmp.w	r0, #336	; 0x150
   d4526:	dcd0      	bgt.n	d44ca <_Z10getHeadingi+0x6>
Serial.println("NW");
   d4528:	f003 feb6 	bl	d8298 <_Z16_fetch_usbserialv>
   d452c:	4907      	ldr	r1, [pc, #28]	; (d454c <_Z10getHeadingi+0x88>)
   d452e:	e7cf      	b.n	d44d0 <_Z10getHeadingi+0xc>
   d4530:	000dae7c 	.word	0x000dae7c
   d4534:	000dae7e 	.word	0x000dae7e
   d4538:	000dae7f 	.word	0x000dae7f
   d453c:	000dae81 	.word	0x000dae81
   d4540:	000dae84 	.word	0x000dae84
   d4544:	000dae86 	.word	0x000dae86
   d4548:	000dae8a 	.word	0x000dae8a
   d454c:	000dae89 	.word	0x000dae89

000d4550 <_ZN5Print5printIhLi0EEEjT_i>:
    if (base == 0) {
   d4550:	b912      	cbnz	r2, d4558 <_ZN5Print5printIhLi0EEEjT_i+0x8>
        return write(n);
   d4552:	6803      	ldr	r3, [r0, #0]
   d4554:	689b      	ldr	r3, [r3, #8]
   d4556:	4718      	bx	r3
        return printNumber(val, base) + t;
   d4558:	b2d2      	uxtb	r2, r2
   d455a:	f003 bbd8 	b.w	d7d0e <_ZN5Print11printNumberEmh>
	...

000d4560 <_Z16displayCalStatusv>:
{
   d4560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    system = gyro = accel = mag = 0;
   d4562:	2300      	movs	r3, #0
   d4564:	f88d 300f 	strb.w	r3, [sp, #15]
   d4568:	f88d 300e 	strb.w	r3, [sp, #14]
   d456c:	f88d 300d 	strb.w	r3, [sp, #13]
   d4570:	f88d 300c 	strb.w	r3, [sp, #12]
    bno.getCalibration(&system, &gyro, &accel, &mag);
   d4574:	f10d 030f 	add.w	r3, sp, #15
   d4578:	f10d 020d 	add.w	r2, sp, #13
   d457c:	a903      	add	r1, sp, #12
   d457e:	4823      	ldr	r0, [pc, #140]	; (d460c <_Z16displayCalStatusv+0xac>)
   d4580:	9300      	str	r3, [sp, #0]
   d4582:	f10d 030e 	add.w	r3, sp, #14
   d4586:	f001 fe94 	bl	d62b2 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
    Serial.print("\t");
   d458a:	f003 fe85 	bl	d8298 <_Z16_fetch_usbserialv>
   d458e:	4920      	ldr	r1, [pc, #128]	; (d4610 <_Z16displayCalStatusv+0xb0>)
   d4590:	f003 fb9a 	bl	d7cc8 <_ZN5Print5printEPKc>
    if (!system)
   d4594:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4598:	b923      	cbnz	r3, d45a4 <_Z16displayCalStatusv+0x44>
        Serial.print("! ");
   d459a:	f003 fe7d 	bl	d8298 <_Z16_fetch_usbserialv>
   d459e:	491d      	ldr	r1, [pc, #116]	; (d4614 <_Z16displayCalStatusv+0xb4>)
   d45a0:	f003 fb92 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print("Sys:");
   d45a4:	f003 fe78 	bl	d8298 <_Z16_fetch_usbserialv>
   d45a8:	491b      	ldr	r1, [pc, #108]	; (d4618 <_Z16displayCalStatusv+0xb8>)
   d45aa:	f003 fb8d 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(system, DEC);
   d45ae:	f003 fe73 	bl	d8298 <_Z16_fetch_usbserialv>
   d45b2:	220a      	movs	r2, #10
   d45b4:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d45b8:	f7ff ffca 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" G:");
   d45bc:	f003 fe6c 	bl	d8298 <_Z16_fetch_usbserialv>
   d45c0:	4916      	ldr	r1, [pc, #88]	; (d461c <_Z16displayCalStatusv+0xbc>)
   d45c2:	f003 fb81 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(gyro, DEC);
   d45c6:	f003 fe67 	bl	d8298 <_Z16_fetch_usbserialv>
   d45ca:	220a      	movs	r2, #10
   d45cc:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d45d0:	f7ff ffbe 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" A:");
   d45d4:	f003 fe60 	bl	d8298 <_Z16_fetch_usbserialv>
   d45d8:	4911      	ldr	r1, [pc, #68]	; (d4620 <_Z16displayCalStatusv+0xc0>)
   d45da:	f003 fb75 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(accel, DEC);
   d45de:	f003 fe5b 	bl	d8298 <_Z16_fetch_usbserialv>
   d45e2:	220a      	movs	r2, #10
   d45e4:	f89d 100e 	ldrb.w	r1, [sp, #14]
   d45e8:	f7ff ffb2 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" M:");
   d45ec:	f003 fe54 	bl	d8298 <_Z16_fetch_usbserialv>
   d45f0:	490c      	ldr	r1, [pc, #48]	; (d4624 <_Z16displayCalStatusv+0xc4>)
   d45f2:	f003 fb69 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.print(mag, DEC);
   d45f6:	f003 fe4f 	bl	d8298 <_Z16_fetch_usbserialv>
   d45fa:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d45fe:	220a      	movs	r2, #10
   d4600:	f7ff ffa6 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
}
   d4604:	b005      	add	sp, #20
   d4606:	f85d fb04 	ldr.w	pc, [sp], #4
   d460a:	bf00      	nop
   d460c:	2003e4f8 	.word	0x2003e4f8
   d4610:	000daf10 	.word	0x000daf10
   d4614:	000dae8c 	.word	0x000dae8c
   d4618:	000dae8f 	.word	0x000dae8f
   d461c:	000dae94 	.word	0x000dae94
   d4620:	000dae98 	.word	0x000dae98
   d4624:	000dae9c 	.word	0x000dae9c

000d4628 <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d4628:	b538      	push	{r3, r4, r5, lr}
   d462a:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d462c:	f7ff ff90 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
   d4630:	4604      	mov	r4, r0
        n += println();
   d4632:	4628      	mov	r0, r5
   d4634:	f003 fb53 	bl	d7cde <_ZN5Print7printlnEv>
    }
   d4638:	4420      	add	r0, r4
   d463a:	bd38      	pop	{r3, r4, r5, pc}

000d463c <_Z19displaySensorStatusv>:
{
   d463c:	b513      	push	{r0, r1, r4, lr}
    system_status = self_test_results = system_error = 0;
   d463e:	2300      	movs	r3, #0
    Serial.println("");
   d4640:	4c21      	ldr	r4, [pc, #132]	; (d46c8 <_Z19displaySensorStatusv+0x8c>)
    system_status = self_test_results = system_error = 0;
   d4642:	f88d 3007 	strb.w	r3, [sp, #7]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   d4646:	f10d 0206 	add.w	r2, sp, #6
   d464a:	f10d 0105 	add.w	r1, sp, #5
    system_status = self_test_results = system_error = 0;
   d464e:	f88d 3006 	strb.w	r3, [sp, #6]
   d4652:	f88d 3005 	strb.w	r3, [sp, #5]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   d4656:	481d      	ldr	r0, [pc, #116]	; (d46cc <_Z19displaySensorStatusv+0x90>)
   d4658:	f10d 0307 	add.w	r3, sp, #7
   d465c:	f001 fe09 	bl	d6272 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>
    Serial.println("");
   d4660:	f003 fe1a 	bl	d8298 <_Z16_fetch_usbserialv>
   d4664:	4621      	mov	r1, r4
   d4666:	f003 fb46 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    Serial.print("System Status: 0x");
   d466a:	f003 fe15 	bl	d8298 <_Z16_fetch_usbserialv>
   d466e:	4918      	ldr	r1, [pc, #96]	; (d46d0 <_Z19displaySensorStatusv+0x94>)
   d4670:	f003 fb2a 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.println(system_status, HEX);
   d4674:	f003 fe10 	bl	d8298 <_Z16_fetch_usbserialv>
   d4678:	2210      	movs	r2, #16
   d467a:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d467e:	f7ff ffd3 	bl	d4628 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("Self Test:     0x");
   d4682:	f003 fe09 	bl	d8298 <_Z16_fetch_usbserialv>
   d4686:	4913      	ldr	r1, [pc, #76]	; (d46d4 <_Z19displaySensorStatusv+0x98>)
   d4688:	f003 fb1e 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.println(self_test_results, HEX);
   d468c:	f003 fe04 	bl	d8298 <_Z16_fetch_usbserialv>
   d4690:	2210      	movs	r2, #16
   d4692:	f89d 1006 	ldrb.w	r1, [sp, #6]
   d4696:	f7ff ffc7 	bl	d4628 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("System Error:  0x");
   d469a:	f003 fdfd 	bl	d8298 <_Z16_fetch_usbserialv>
   d469e:	490e      	ldr	r1, [pc, #56]	; (d46d8 <_Z19displaySensorStatusv+0x9c>)
   d46a0:	f003 fb12 	bl	d7cc8 <_ZN5Print5printEPKc>
    Serial.println(system_error, HEX);
   d46a4:	f003 fdf8 	bl	d8298 <_Z16_fetch_usbserialv>
   d46a8:	2210      	movs	r2, #16
   d46aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d46ae:	f7ff ffbb 	bl	d4628 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.println("");
   d46b2:	f003 fdf1 	bl	d8298 <_Z16_fetch_usbserialv>
   d46b6:	4621      	mov	r1, r4
   d46b8:	f003 fb1d 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    delay(500);
   d46bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d46c0:	f003 fc6e 	bl	d7fa0 <delay>
}
   d46c4:	b002      	add	sp, #8
   d46c6:	bd10      	pop	{r4, pc}
   d46c8:	000daf11 	.word	0x000daf11
   d46cc:	2003e4f8 	.word	0x2003e4f8
   d46d0:	000daea0 	.word	0x000daea0
   d46d4:	000daeb2 	.word	0x000daeb2
   d46d8:	000daec4 	.word	0x000daec4

000d46dc <_GLOBAL__sub_I_i2ceeprom>:
}
   d46dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
Adafruit_EEPROM_I2C i2ceeprom;
   d46de:	4810      	ldr	r0, [pc, #64]	; (d4720 <_GLOBAL__sub_I_i2ceeprom+0x44>)
   d46e0:	f002 fedc 	bl	d749c <_ZN19Adafruit_EEPROM_I2CC1Ev>
Adafruit_BME280 bme; // I2C
   d46e4:	480f      	ldr	r0, [pc, #60]	; (d4724 <_GLOBAL__sub_I_i2ceeprom+0x48>)
   d46e6:	f000 fde9 	bl	d52bc <_ZN15Adafruit_BME280C1Ev>
Adafruit_SH1107 display = Adafruit_SH1107(64, 128, &Wire);
   d46ea:	f004 f8dd 	bl	d88a8 <_Z19__fetch_global_Wirev>
   d46ee:	4a0e      	ldr	r2, [pc, #56]	; (d4728 <_GLOBAL__sub_I_i2ceeprom+0x4c>)
   d46f0:	490e      	ldr	r1, [pc, #56]	; (d472c <_GLOBAL__sub_I_i2ceeprom+0x50>)
   d46f2:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d46f6:	f04f 32ff 	mov.w	r2, #4294967295
   d46fa:	4603      	mov	r3, r0
   d46fc:	9200      	str	r2, [sp, #0]
   d46fe:	2140      	movs	r1, #64	; 0x40
   d4700:	2280      	movs	r2, #128	; 0x80
   d4702:	480b      	ldr	r0, [pc, #44]	; (d4730 <_GLOBAL__sub_I_i2ceeprom+0x54>)
   d4704:	f002 fe44 	bl	d7390 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d4708:	f004 f8ce 	bl	d88a8 <_Z19__fetch_global_Wirev>
   d470c:	4603      	mov	r3, r0
   d470e:	4809      	ldr	r0, [pc, #36]	; (d4734 <_GLOBAL__sub_I_i2ceeprom+0x58>)
   d4710:	2228      	movs	r2, #40	; 0x28
   d4712:	2137      	movs	r1, #55	; 0x37
}
   d4714:	b005      	add	sp, #20
   d4716:	f85d eb04 	ldr.w	lr, [sp], #4
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d471a:	f001 bc73 	b.w	d6004 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
   d471e:	bf00      	nop
   d4720:	2003e56c 	.word	0x2003e56c
   d4724:	2003e4b4 	.word	0x2003e4b4
   d4728:	00061a80 	.word	0x00061a80
   d472c:	000186a0 	.word	0x000186a0
   d4730:	2003e514 	.word	0x2003e514
   d4734:	2003e4f8 	.word	0x2003e4f8

000d4738 <_Z13displayValuesv>:
void displayValues() {
   d4738:	b538      	push	{r3, r4, r5, lr}
    display.clearDisplay();
   d473a:	4c3d      	ldr	r4, [pc, #244]	; (d4830 <_Z13displayValuesv+0xf8>)
    display.print(bme.readTemperature()*1.8F + 32.);
   d473c:	4d3d      	ldr	r5, [pc, #244]	; (d4834 <_Z13displayValuesv+0xfc>)
    display.clearDisplay();
   d473e:	4620      	mov	r0, r4
   d4740:	f002 f8d0 	bl	d68e4 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d4744:	4620      	mov	r0, r4
   d4746:	f002 fd40 	bl	d71ca <_ZN15Adafruit_SH110X7displayEv>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
   d474a:	2300      	movs	r3, #0
    display.print("Temp. = ");
   d474c:	493a      	ldr	r1, [pc, #232]	; (d4838 <_Z13displayValuesv+0x100>)
   d474e:	6123      	str	r3, [r4, #16]
   d4750:	4620      	mov	r0, r4
   d4752:	f003 fab9 	bl	d7cc8 <_ZN5Print5printEPKc>
    display.print(bme.readTemperature()*1.8F + 32.);
   d4756:	4628      	mov	r0, r5
   d4758:	f000 fe84 	bl	d5464 <_ZN15Adafruit_BME28015readTemperatureEv>
   d475c:	eddf 7a37 	vldr	s15, [pc, #220]	; d483c <_Z13displayValuesv+0x104>
   d4760:	ee60 7a27 	vmul.f32	s15, s0, s15
   d4764:	ee17 0a90 	vmov	r0, s15
   d4768:	f005 fbc8 	bl	d9efc <__aeabi_f2d>
   d476c:	4b34      	ldr	r3, [pc, #208]	; (d4840 <_Z13displayValuesv+0x108>)
   d476e:	2200      	movs	r2, #0
   d4770:	f005 fa66 	bl	d9c40 <__adddf3>
   d4774:	ec41 0b10 	vmov	d0, r0, r1
   d4778:	2102      	movs	r1, #2
   d477a:	4620      	mov	r0, r4
   d477c:	f003 fbbd 	bl	d7efa <_ZN5Print5printEdi>
    display.println(" °F");
   d4780:	4930      	ldr	r1, [pc, #192]	; (d4844 <_Z13displayValuesv+0x10c>)
   d4782:	4620      	mov	r0, r4
   d4784:	f003 fab7 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    display.print("Press. = ");
   d4788:	492f      	ldr	r1, [pc, #188]	; (d4848 <_Z13displayValuesv+0x110>)
   d478a:	4620      	mov	r0, r4
   d478c:	f003 fa9c 	bl	d7cc8 <_ZN5Print5printEPKc>
    display.print(bme.readPressure() / 101325.0F * 760.0F);
   d4790:	4628      	mov	r0, r5
   d4792:	f000 fe95 	bl	d54c0 <_ZN15Adafruit_BME28012readPressureEv>
   d4796:	eddf 7a2d 	vldr	s15, [pc, #180]	; d484c <_Z13displayValuesv+0x114>
   d479a:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d479e:	2102      	movs	r1, #2
   d47a0:	4620      	mov	r0, r4
   d47a2:	ed9f 0a2b 	vldr	s0, [pc, #172]	; d4850 <_Z13displayValuesv+0x118>
   d47a6:	ee27 0a00 	vmul.f32	s0, s14, s0
   d47aa:	f003 fb97 	bl	d7edc <_ZN5Print5printEfi>
    display.println(" mmHg");
   d47ae:	4929      	ldr	r1, [pc, #164]	; (d4854 <_Z13displayValuesv+0x11c>)
   d47b0:	4620      	mov	r0, r4
   d47b2:	f003 faa0 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    display.print("Altitude = ");
   d47b6:	4928      	ldr	r1, [pc, #160]	; (d4858 <_Z13displayValuesv+0x120>)
   d47b8:	4620      	mov	r0, r4
   d47ba:	f003 fa85 	bl	d7cc8 <_ZN5Print5printEPKc>
    display.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d47be:	4628      	mov	r0, r5
   d47c0:	ed9f 0a26 	vldr	s0, [pc, #152]	; d485c <_Z13displayValuesv+0x124>
   d47c4:	f000 ff58 	bl	d5678 <_ZN15Adafruit_BME28012readAltitudeEf>
   d47c8:	2102      	movs	r1, #2
   d47ca:	4620      	mov	r0, r4
   d47cc:	f003 fb86 	bl	d7edc <_ZN5Print5printEfi>
    display.println(" m");
   d47d0:	4923      	ldr	r1, [pc, #140]	; (d4860 <_Z13displayValuesv+0x128>)
   d47d2:	4620      	mov	r0, r4
   d47d4:	f003 fa8f 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    display.print("Humidity = ");
   d47d8:	4922      	ldr	r1, [pc, #136]	; (d4864 <_Z13displayValuesv+0x12c>)
   d47da:	4620      	mov	r0, r4
   d47dc:	f003 fa74 	bl	d7cc8 <_ZN5Print5printEPKc>
    display.print(bme.readHumidity());
   d47e0:	4628      	mov	r0, r5
   d47e2:	f000 ffe9 	bl	d57b8 <_ZN15Adafruit_BME28012readHumidityEv>
   d47e6:	2102      	movs	r1, #2
   d47e8:	4620      	mov	r0, r4
   d47ea:	f003 fb77 	bl	d7edc <_ZN5Print5printEfi>
    display.println(" %");
   d47ee:	491e      	ldr	r1, [pc, #120]	; (d4868 <_Z13displayValuesv+0x130>)
   d47f0:	4620      	mov	r0, r4
   d47f2:	f003 fa80 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    Serial.println();
   d47f6:	f003 fd4f 	bl	d8298 <_Z16_fetch_usbserialv>
   d47fa:	f003 fa70 	bl	d7cde <_ZN5Print7printlnEv>
    display.println("Marrie is great!");
   d47fe:	491b      	ldr	r1, [pc, #108]	; (d486c <_Z13displayValuesv+0x134>)
   d4800:	4620      	mov	r0, r4
   d4802:	f003 fa78 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    Serial.println();
   d4806:	f003 fd47 	bl	d8298 <_Z16_fetch_usbserialv>
   d480a:	f003 fa68 	bl	d7cde <_ZN5Print7printlnEv>
    display.print("Compass heading");
   d480e:	4918      	ldr	r1, [pc, #96]	; (d4870 <_Z13displayValuesv+0x138>)
   d4810:	4620      	mov	r0, r4
   d4812:	f003 fa59 	bl	d7cc8 <_ZN5Print5printEPKc>
    display.print(compass_heading);
   d4816:	4b17      	ldr	r3, [pc, #92]	; (d4874 <_Z13displayValuesv+0x13c>)
   d4818:	4620      	mov	r0, r4
   d481a:	ed93 0a00 	vldr	s0, [r3]
   d481e:	2102      	movs	r1, #2
   d4820:	f003 fb5c 	bl	d7edc <_ZN5Print5printEfi>
  display.display(); // actually display all of the above
   d4824:	4620      	mov	r0, r4
  }
   d4826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.display(); // actually display all of the above
   d482a:	f002 bcce 	b.w	d71ca <_ZN15Adafruit_SH110X7displayEv>
   d482e:	bf00      	nop
   d4830:	2003e514 	.word	0x2003e514
   d4834:	2003e4b4 	.word	0x2003e4b4
   d4838:	000daed6 	.word	0x000daed6
   d483c:	3fe66666 	.word	0x3fe66666
   d4840:	40400000 	.word	0x40400000
   d4844:	000daedf 	.word	0x000daedf
   d4848:	000daee4 	.word	0x000daee4
   d484c:	47c5e680 	.word	0x47c5e680
   d4850:	443e0000 	.word	0x443e0000
   d4854:	000dad78 	.word	0x000dad78
   d4858:	000dad86 	.word	0x000dad86
   d485c:	447d5000 	.word	0x447d5000
   d4860:	000dad92 	.word	0x000dad92
   d4864:	000dad95 	.word	0x000dad95
   d4868:	000dada1 	.word	0x000dada1
   d486c:	000daeee 	.word	0x000daeee
   d4870:	000daeff 	.word	0x000daeff
   d4874:	2003e50c 	.word	0x2003e50c

000d4878 <loop>:
void loop(void) {
   d4878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d487c:	ed2d 8b02 	vpush	{d8}
digitalWrite(vane_switch, HIGH);
   d4880:	4bcf      	ldr	r3, [pc, #828]	; (d4bc0 <loop+0x348>)
VaneValue = analogRead(vane_pin);
   d4882:	4dd0      	ldr	r5, [pc, #832]	; (d4bc4 <loop+0x34c>)
digitalWrite(vane_switch, HIGH);
   d4884:	7818      	ldrb	r0, [r3, #0]
   d4886:	4cd0      	ldr	r4, [pc, #832]	; (d4bc8 <loop+0x350>)
if ((millis() - wind_speed_time) > wind_speed_time_interval) {
   d4888:	4ed0      	ldr	r6, [pc, #832]	; (d4bcc <loop+0x354>)
void loop(void) {
   d488a:	b09c      	sub	sp, #112	; 0x70
digitalWrite(vane_switch, HIGH);
   d488c:	2101      	movs	r1, #1
   d488e:	f003 ff98 	bl	d87c2 <digitalWrite>
VaneValue = analogRead(vane_pin);
   d4892:	4bcf      	ldr	r3, [pc, #828]	; (d4bd0 <loop+0x358>)
   d4894:	7818      	ldrb	r0, [r3, #0]
   d4896:	f003 ffc0 	bl	d881a <analogRead>
Direction = map(VaneValue, 0, 4095, 0, 360);
   d489a:	f44f 73b4 	mov.w	r3, #360	; 0x168
VaneValue = analogRead(vane_pin);
   d489e:	6028      	str	r0, [r5, #0]
Direction = map(VaneValue, 0, 4095, 0, 360);
   d48a0:	9300      	str	r3, [sp, #0]
   d48a2:	2300      	movs	r3, #0
   d48a4:	4619      	mov	r1, r3
   d48a6:	f640 72ff 	movw	r2, #4095	; 0xfff
   d48aa:	f003 fb6d 	bl	d7f88 <_Z3mapiiiii>
   d48ae:	4bc9      	ldr	r3, [pc, #804]	; (d4bd4 <loop+0x35c>)
if(CalDirection > 360)
   d48b0:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
Direction = map(VaneValue, 0, 4095, 0, 360);
   d48b4:	6018      	str	r0, [r3, #0]
CalDirection = CalDirection - 360;
   d48b6:	bfc8      	it	gt
   d48b8:	f5a0 70b4 	subgt.w	r0, r0, #360	; 0x168
   d48bc:	6020      	str	r0, [r4, #0]
if(CalDirection < 0)
   d48be:	6823      	ldr	r3, [r4, #0]
   d48c0:	2b00      	cmp	r3, #0
CalDirection = CalDirection + 360;
   d48c2:	bfbc      	itt	lt
   d48c4:	f503 73b4 	addlt.w	r3, r3, #360	; 0x168
   d48c8:	6023      	strlt	r3, [r4, #0]
   d48ca:	f002 fe97 	bl	d75fc <HAL_Timer_Get_Milli_Seconds>
if ((millis() - wind_speed_time) > wind_speed_time_interval) {
   d48ce:	6833      	ldr	r3, [r6, #0]
   d48d0:	1ac0      	subs	r0, r0, r3
   d48d2:	4bc1      	ldr	r3, [pc, #772]	; (d4bd8 <loop+0x360>)
   d48d4:	881b      	ldrh	r3, [r3, #0]
   d48d6:	4298      	cmp	r0, r3
   d48d8:	d963      	bls.n	d49a2 <loop+0x12a>
  if(abs(CalDirection - LastValue) > 5)
   d48da:	4fc0      	ldr	r7, [pc, #768]	; (d4bdc <loop+0x364>)
   d48dc:	6823      	ldr	r3, [r4, #0]
   d48de:	683a      	ldr	r2, [r7, #0]
   d48e0:	1a9b      	subs	r3, r3, r2
   d48e2:	2b00      	cmp	r3, #0
   d48e4:	bfb8      	it	lt
   d48e6:	425b      	neglt	r3, r3
   d48e8:	2b05      	cmp	r3, #5
   d48ea:	dd2c      	ble.n	d4946 <loop+0xce>
  Serial.print(VaneValue); Serial.print("\t\t");
   d48ec:	f003 fcd4 	bl	d8298 <_Z16_fetch_usbserialv>
   d48f0:	682d      	ldr	r5, [r5, #0]
        if (n < 0 && base == 10) {
   d48f2:	2d00      	cmp	r5, #0
   d48f4:	4680      	mov	r8, r0
   d48f6:	f280 81e9 	bge.w	d4ccc <loop+0x454>
            t = print('-');
   d48fa:	212d      	movs	r1, #45	; 0x2d
   d48fc:	f003 f9e8 	bl	d7cd0 <_ZN5Print5printEc>
            val = -n;
   d4900:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d4902:	220a      	movs	r2, #10
   d4904:	4640      	mov	r0, r8
   d4906:	f003 fa02 	bl	d7d0e <_ZN5Print11printNumberEmh>
   d490a:	f003 fcc5 	bl	d8298 <_Z16_fetch_usbserialv>
   d490e:	49b4      	ldr	r1, [pc, #720]	; (d4be0 <loop+0x368>)
   d4910:	f003 f9da 	bl	d7cc8 <_ZN5Print5printEPKc>
  Serial.print(CalDirection); Serial.print("\t\t");
   d4914:	f003 fcc0 	bl	d8298 <_Z16_fetch_usbserialv>
   d4918:	6825      	ldr	r5, [r4, #0]
        if (n < 0 && base == 10) {
   d491a:	2d00      	cmp	r5, #0
   d491c:	4680      	mov	r8, r0
   d491e:	f280 81d7 	bge.w	d4cd0 <loop+0x458>
            t = print('-');
   d4922:	212d      	movs	r1, #45	; 0x2d
   d4924:	f003 f9d4 	bl	d7cd0 <_ZN5Print5printEc>
            val = -n;
   d4928:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d492a:	220a      	movs	r2, #10
   d492c:	4640      	mov	r0, r8
   d492e:	f003 f9ee 	bl	d7d0e <_ZN5Print11printNumberEmh>
   d4932:	f003 fcb1 	bl	d8298 <_Z16_fetch_usbserialv>
   d4936:	49aa      	ldr	r1, [pc, #680]	; (d4be0 <loop+0x368>)
   d4938:	f003 f9c6 	bl	d7cc8 <_ZN5Print5printEPKc>
  getHeading(CalDirection);
   d493c:	6820      	ldr	r0, [r4, #0]
   d493e:	f7ff fdc1 	bl	d44c4 <_Z10getHeadingi>
  LastValue = CalDirection;
   d4942:	6823      	ldr	r3, [r4, #0]
   d4944:	603b      	str	r3, [r7, #0]
WindSpeed = Rotations * .45;
   d4946:	4ca7      	ldr	r4, [pc, #668]	; (d4be4 <loop+0x36c>)
   d4948:	4da7      	ldr	r5, [pc, #668]	; (d4be8 <loop+0x370>)
   d494a:	6820      	ldr	r0, [r4, #0]
   d494c:	f005 fab4 	bl	d9eb8 <__aeabi_ui2d>
   d4950:	a399      	add	r3, pc, #612	; (adr r3, d4bb8 <loop+0x340>)
   d4952:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4956:	f005 fb29 	bl	d9fac <__aeabi_dmul>
   d495a:	f005 fe1f 	bl	da59c <__aeabi_d2f>
   d495e:	6028      	str	r0, [r5, #0]
Serial.print(Rotations); Serial.print("\t\t");
   d4960:	f003 fc9a 	bl	d8298 <_Z16_fetch_usbserialv>
   d4964:	220a      	movs	r2, #10
   d4966:	6821      	ldr	r1, [r4, #0]
   d4968:	f003 f9d1 	bl	d7d0e <_ZN5Print11printNumberEmh>
   d496c:	f003 fc94 	bl	d8298 <_Z16_fetch_usbserialv>
   d4970:	499b      	ldr	r1, [pc, #620]	; (d4be0 <loop+0x368>)
   d4972:	f003 f9a9 	bl	d7cc8 <_ZN5Print5printEPKc>
Serial.print(WindSpeed); Serial.print("\t\t");  Serial.println(" mph");
   d4976:	f003 fc8f 	bl	d8298 <_Z16_fetch_usbserialv>
   d497a:	ed95 0a00 	vldr	s0, [r5]
   d497e:	2102      	movs	r1, #2
   d4980:	f003 faac 	bl	d7edc <_ZN5Print5printEfi>
   d4984:	f003 fc88 	bl	d8298 <_Z16_fetch_usbserialv>
   d4988:	4995      	ldr	r1, [pc, #596]	; (d4be0 <loop+0x368>)
   d498a:	f003 f99d 	bl	d7cc8 <_ZN5Print5printEPKc>
   d498e:	f003 fc83 	bl	d8298 <_Z16_fetch_usbserialv>
   d4992:	4996      	ldr	r1, [pc, #600]	; (d4bec <loop+0x374>)
   d4994:	f003 f9af 	bl	d7cf6 <_ZN5Print7printlnEPKc>
   d4998:	f002 fe30 	bl	d75fc <HAL_Timer_Get_Milli_Seconds>
Rotations = 0;  // Set Rotations count to 0 ready for calculations
   d499c:	2300      	movs	r3, #0
wind_speed_time = millis();
   d499e:	6030      	str	r0, [r6, #0]
Rotations = 0;  // Set Rotations count to 0 ready for calculations
   d49a0:	6023      	str	r3, [r4, #0]
  bno.getEvent(&event);
   d49a2:	a913      	add	r1, sp, #76	; 0x4c
   d49a4:	4892      	ldr	r0, [pc, #584]	; (d4bf0 <loop+0x378>)
   d49a6:	f001 fe4f 	bl	d6648 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
printValues();
   d49aa:	f7ff fbb7 	bl	d411c <_Z11printValuesv>
  displayValues();
   d49ae:	f7ff fec3 	bl	d4738 <_Z13displayValuesv>
  delay(delayTime);
   d49b2:	4b90      	ldr	r3, [pc, #576]	; (d4bf4 <loop+0x37c>)
   d49b4:	6818      	ldr	r0, [r3, #0]
   d49b6:	f003 faf3 	bl	d7fa0 <delay>
  if(!digitalRead(BUTTON_A)) display.print("A");
   d49ba:	2004      	movs	r0, #4
   d49bc:	f003 ff1a 	bl	d87f4 <digitalRead>
   d49c0:	b918      	cbnz	r0, d49ca <loop+0x152>
   d49c2:	498d      	ldr	r1, [pc, #564]	; (d4bf8 <loop+0x380>)
   d49c4:	488d      	ldr	r0, [pc, #564]	; (d4bfc <loop+0x384>)
   d49c6:	f003 f97f 	bl	d7cc8 <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_B)) display.print("B");
   d49ca:	2003      	movs	r0, #3
   d49cc:	f003 ff12 	bl	d87f4 <digitalRead>
   d49d0:	b918      	cbnz	r0, d49da <loop+0x162>
   d49d2:	498b      	ldr	r1, [pc, #556]	; (d4c00 <loop+0x388>)
   d49d4:	4889      	ldr	r0, [pc, #548]	; (d4bfc <loop+0x384>)
   d49d6:	f003 f977 	bl	d7cc8 <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_C)) display.print("C");
   d49da:	2002      	movs	r0, #2
   d49dc:	f003 ff0a 	bl	d87f4 <digitalRead>
   d49e0:	b918      	cbnz	r0, d49ea <loop+0x172>
   d49e2:	4988      	ldr	r1, [pc, #544]	; (d4c04 <loop+0x38c>)
   d49e4:	4885      	ldr	r0, [pc, #532]	; (d4bfc <loop+0x384>)
   d49e6:	f003 f96f 	bl	d7cc8 <_ZN5Print5printEPKc>
  delay(10);
   d49ea:	200a      	movs	r0, #10
   d49ec:	f003 fad8 	bl	d7fa0 <delay>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d49f0:	f002 fe24 	bl	d763c <os_thread_yield>
  display.display();
   d49f4:	4881      	ldr	r0, [pc, #516]	; (d4bfc <loop+0x384>)
  Serial.print(360 - (float)event.orientation.x);
   d49f6:	ed9f 8a84 	vldr	s16, [pc, #528]	; d4c08 <loop+0x390>
  display.display();
   d49fa:	f002 fbe6 	bl	d71ca <_ZN15Adafruit_SH110X7displayEv>
  Serial.print(F("Orientation: "));
   d49fe:	f003 fc4b 	bl	d8298 <_Z16_fetch_usbserialv>
   d4a02:	4982      	ldr	r1, [pc, #520]	; (d4c0c <loop+0x394>)
   d4a04:	f003 f967 	bl	d7cd6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(360 - (float)event.orientation.x);
   d4a08:	f003 fc46 	bl	d8298 <_Z16_fetch_usbserialv>
   d4a0c:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
   d4a10:	2102      	movs	r1, #2
   d4a12:	ee38 0a40 	vsub.f32	s0, s16, s0
   d4a16:	f003 fa61 	bl	d7edc <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d4a1a:	f003 fc3d 	bl	d8298 <_Z16_fetch_usbserialv>
   d4a1e:	497c      	ldr	r1, [pc, #496]	; (d4c10 <loop+0x398>)
   d4a20:	f003 f959 	bl	d7cd6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.y);
   d4a24:	f003 fc38 	bl	d8298 <_Z16_fetch_usbserialv>
   d4a28:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
   d4a2c:	2102      	movs	r1, #2
   d4a2e:	f003 fa55 	bl	d7edc <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d4a32:	f003 fc31 	bl	d8298 <_Z16_fetch_usbserialv>
   d4a36:	4976      	ldr	r1, [pc, #472]	; (d4c10 <loop+0x398>)
   d4a38:	f003 f94d 	bl	d7cd6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.z);
   d4a3c:	f003 fc2c 	bl	d8298 <_Z16_fetch_usbserialv>
   d4a40:	ed9d 0a1a 	vldr	s0, [sp, #104]	; 0x68
   d4a44:	2102      	movs	r1, #2
   d4a46:	f003 fa49 	bl	d7edc <_ZN5Print5printEfi>
  Serial.println(F(""));
   d4a4a:	f003 fc25 	bl	d8298 <_Z16_fetch_usbserialv>
   d4a4e:	4971      	ldr	r1, [pc, #452]	; (d4c14 <loop+0x39c>)
   d4a50:	f003 f95b 	bl	d7d0a <_ZN5Print7printlnEPK19__FlashStringHelper>
  imu::Quaternion quat = bno.getQuat();
   d4a54:	4866      	ldr	r0, [pc, #408]	; (d4bf0 <loop+0x378>)
   d4a56:	f001 fd2b 	bl	d64b0 <_ZN15Adafruit_BNO0557getQuatEv>
   d4a5a:	ed8d 0b0a 	vstr	d0, [sp, #40]	; 0x28
   d4a5e:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
   d4a62:	ed8d 2b0e 	vstr	d2, [sp, #56]	; 0x38
   d4a66:	ed8d 3b10 	vstr	d3, [sp, #64]	; 0x40
  Serial.print(F("Quaternion: "));
   d4a6a:	f003 fc15 	bl	d8298 <_Z16_fetch_usbserialv>
   d4a6e:	496a      	ldr	r1, [pc, #424]	; (d4c18 <loop+0x3a0>)
   d4a70:	f003 f931 	bl	d7cd6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.w());
   d4a74:	f003 fc10 	bl	d8298 <_Z16_fetch_usbserialv>
   d4a78:	4604      	mov	r4, r0
   d4a7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d4a7e:	f005 fd8d 	bl	da59c <__aeabi_d2f>
   d4a82:	2102      	movs	r1, #2
   d4a84:	ee00 0a10 	vmov	s0, r0
   d4a88:	4620      	mov	r0, r4
   d4a8a:	f003 fa27 	bl	d7edc <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d4a8e:	f003 fc03 	bl	d8298 <_Z16_fetch_usbserialv>
   d4a92:	495f      	ldr	r1, [pc, #380]	; (d4c10 <loop+0x398>)
   d4a94:	f003 f91f 	bl	d7cd6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.x());
   d4a98:	f003 fbfe 	bl	d8298 <_Z16_fetch_usbserialv>
   d4a9c:	4604      	mov	r4, r0
   d4a9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d4aa2:	f005 fd7b 	bl	da59c <__aeabi_d2f>
   d4aa6:	2102      	movs	r1, #2
   d4aa8:	ee00 0a10 	vmov	s0, r0
   d4aac:	4620      	mov	r0, r4
   d4aae:	f003 fa15 	bl	d7edc <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d4ab2:	f003 fbf1 	bl	d8298 <_Z16_fetch_usbserialv>
   d4ab6:	4956      	ldr	r1, [pc, #344]	; (d4c10 <loop+0x398>)
   d4ab8:	f003 f90d 	bl	d7cd6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.y());
   d4abc:	f003 fbec 	bl	d8298 <_Z16_fetch_usbserialv>
   d4ac0:	4604      	mov	r4, r0
   d4ac2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   d4ac6:	f005 fd69 	bl	da59c <__aeabi_d2f>
   d4aca:	2102      	movs	r1, #2
   d4acc:	ee00 0a10 	vmov	s0, r0
   d4ad0:	4620      	mov	r0, r4
   d4ad2:	f003 fa03 	bl	d7edc <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d4ad6:	f003 fbdf 	bl	d8298 <_Z16_fetch_usbserialv>
   d4ada:	494d      	ldr	r1, [pc, #308]	; (d4c10 <loop+0x398>)
   d4adc:	f003 f8fb 	bl	d7cd6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.z());
   d4ae0:	f003 fbda 	bl	d8298 <_Z16_fetch_usbserialv>
   d4ae4:	4604      	mov	r4, r0
   d4ae6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   d4aea:	f005 fd57 	bl	da59c <__aeabi_d2f>
   d4aee:	2102      	movs	r1, #2
   d4af0:	ee00 0a10 	vmov	s0, r0
   d4af4:	4620      	mov	r0, r4
   d4af6:	f003 f9f1 	bl	d7edc <_ZN5Print5printEfi>
  Serial.println(F(""));
   d4afa:	f003 fbcd 	bl	d8298 <_Z16_fetch_usbserialv>
   d4afe:	4945      	ldr	r1, [pc, #276]	; (d4c14 <loop+0x39c>)
   d4b00:	4c46      	ldr	r4, [pc, #280]	; (d4c1c <loop+0x3a4>)
   d4b02:	f003 f902 	bl	d7d0a <_ZN5Print7printlnEPK19__FlashStringHelper>
  uint8_t sys, gyro, accel, mag = 0;
   d4b06:	2300      	movs	r3, #0
   d4b08:	f88d 300f 	strb.w	r3, [sp, #15]
  bno.getCalibration(&sys, &gyro, &accel, &mag);
   d4b0c:	f10d 030f 	add.w	r3, sp, #15
   d4b10:	f10d 020d 	add.w	r2, sp, #13
   d4b14:	a903      	add	r1, sp, #12
   d4b16:	9300      	str	r3, [sp, #0]
   d4b18:	4835      	ldr	r0, [pc, #212]	; (d4bf0 <loop+0x378>)
   d4b1a:	f10d 030e 	add.w	r3, sp, #14
   d4b1e:	f001 fbc8 	bl	d62b2 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
  Serial.print(F("Calibration: "));
   d4b22:	f003 fbb9 	bl	d8298 <_Z16_fetch_usbserialv>
   d4b26:	493e      	ldr	r1, [pc, #248]	; (d4c20 <loop+0x3a8>)
   d4b28:	f003 f8d5 	bl	d7cd6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(sys, DEC);
   d4b2c:	f003 fbb4 	bl	d8298 <_Z16_fetch_usbserialv>
   d4b30:	220a      	movs	r2, #10
   d4b32:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d4b36:	f7ff fd0b 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
  Serial.print(F(", "));
   d4b3a:	f003 fbad 	bl	d8298 <_Z16_fetch_usbserialv>
   d4b3e:	4934      	ldr	r1, [pc, #208]	; (d4c10 <loop+0x398>)
   d4b40:	f003 f8c9 	bl	d7cd6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(gyro, DEC);
   d4b44:	f003 fba8 	bl	d8298 <_Z16_fetch_usbserialv>
   d4b48:	220a      	movs	r2, #10
   d4b4a:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d4b4e:	f7ff fcff 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
  Serial.print(F(", "));
   d4b52:	f003 fba1 	bl	d8298 <_Z16_fetch_usbserialv>
   d4b56:	492e      	ldr	r1, [pc, #184]	; (d4c10 <loop+0x398>)
   d4b58:	f003 f8bd 	bl	d7cd6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(accel, DEC);
   d4b5c:	f003 fb9c 	bl	d8298 <_Z16_fetch_usbserialv>
   d4b60:	220a      	movs	r2, #10
   d4b62:	f89d 100e 	ldrb.w	r1, [sp, #14]
   d4b66:	f7ff fcf3 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
  Serial.print(F(", "));
   d4b6a:	f003 fb95 	bl	d8298 <_Z16_fetch_usbserialv>
   d4b6e:	4928      	ldr	r1, [pc, #160]	; (d4c10 <loop+0x398>)
   d4b70:	f003 f8b1 	bl	d7cd6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(mag, DEC);
   d4b74:	f003 fb90 	bl	d8298 <_Z16_fetch_usbserialv>
   d4b78:	220a      	movs	r2, #10
   d4b7a:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d4b7e:	f7ff fce7 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
  Serial.println(F(""));
   d4b82:	f003 fb89 	bl	d8298 <_Z16_fetch_usbserialv>
   d4b86:	4923      	ldr	r1, [pc, #140]	; (d4c14 <loop+0x39c>)
   d4b88:	f003 f8bf 	bl	d7d0a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("\n\n");
   d4b8c:	f003 fb84 	bl	d8298 <_Z16_fetch_usbserialv>
   d4b90:	4924      	ldr	r1, [pc, #144]	; (d4c24 <loop+0x3ac>)
   d4b92:	f003 f8b0 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  bno.getEvent(&event);
   d4b96:	a913      	add	r1, sp, #76	; 0x4c
   d4b98:	4815      	ldr	r0, [pc, #84]	; (d4bf0 <loop+0x378>)
   d4b9a:	f001 fd55 	bl	d6648 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  Serial.print("X: ");
   d4b9e:	f003 fb7b 	bl	d8298 <_Z16_fetch_usbserialv>
   d4ba2:	4921      	ldr	r1, [pc, #132]	; (d4c28 <loop+0x3b0>)
   d4ba4:	f003 f890 	bl	d7cc8 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.x, 4);
   d4ba8:	f003 fb76 	bl	d8298 <_Z16_fetch_usbserialv>
   d4bac:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
   d4bb0:	e03c      	b.n	d4c2c <loop+0x3b4>
   d4bb2:	bf00      	nop
   d4bb4:	f3af 8000 	nop.w
   d4bb8:	cccccccd 	.word	0xcccccccd
   d4bbc:	3fdccccc 	.word	0x3fdccccc
   d4bc0:	2003e421 	.word	0x2003e421
   d4bc4:	2003e4ac 	.word	0x2003e4ac
   d4bc8:	2003e498 	.word	0x2003e498
   d4bcc:	2003e574 	.word	0x2003e574
   d4bd0:	2003e420 	.word	0x2003e420
   d4bd4:	2003e4a0 	.word	0x2003e4a0
   d4bd8:	2003e424 	.word	0x2003e424
   d4bdc:	2003e4a4 	.word	0x2003e4a4
   d4be0:	000daf0f 	.word	0x000daf0f
   d4be4:	2003e4a8 	.word	0x2003e4a8
   d4be8:	2003e4b0 	.word	0x2003e4b0
   d4bec:	000daf12 	.word	0x000daf12
   d4bf0:	2003e4f8 	.word	0x2003e4f8
   d4bf4:	2003e510 	.word	0x2003e510
   d4bf8:	000daf17 	.word	0x000daf17
   d4bfc:	2003e514 	.word	0x2003e514
   d4c00:	000db400 	.word	0x000db400
   d4c04:	000daf19 	.word	0x000daf19
   d4c08:	43b40000 	.word	0x43b40000
   d4c0c:	000daf1b 	.word	0x000daf1b
   d4c10:	000daf29 	.word	0x000daf29
   d4c14:	000daf11 	.word	0x000daf11
   d4c18:	000daf2c 	.word	0x000daf2c
   d4c1c:	2003e50c 	.word	0x2003e50c
   d4c20:	000daf39 	.word	0x000daf39
   d4c24:	000daf47 	.word	0x000daf47
   d4c28:	000daf4a 	.word	0x000daf4a
   d4c2c:	2104      	movs	r1, #4
   d4c2e:	f003 f955 	bl	d7edc <_ZN5Print5printEfi>
  Serial.print("\tY: ");
   d4c32:	f003 fb31 	bl	d8298 <_Z16_fetch_usbserialv>
   d4c36:	4927      	ldr	r1, [pc, #156]	; (d4cd4 <loop+0x45c>)
   d4c38:	f003 f846 	bl	d7cc8 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.y, 4);
   d4c3c:	f003 fb2c 	bl	d8298 <_Z16_fetch_usbserialv>
   d4c40:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
   d4c44:	2104      	movs	r1, #4
   d4c46:	f003 f949 	bl	d7edc <_ZN5Print5printEfi>
  Serial.print("\tZ: ");
   d4c4a:	f003 fb25 	bl	d8298 <_Z16_fetch_usbserialv>
   d4c4e:	4922      	ldr	r1, [pc, #136]	; (d4cd8 <loop+0x460>)
   d4c50:	f003 f83a 	bl	d7cc8 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.z, 4);
   d4c54:	f003 fb20 	bl	d8298 <_Z16_fetch_usbserialv>
   d4c58:	ed9d 0a1a 	vldr	s0, [sp, #104]	; 0x68
   d4c5c:	2104      	movs	r1, #4
   d4c5e:	f003 f93d 	bl	d7edc <_ZN5Print5printEfi>
  Serial.println("");
   d4c62:	f003 fb19 	bl	d8298 <_Z16_fetch_usbserialv>
   d4c66:	491d      	ldr	r1, [pc, #116]	; (d4cdc <loop+0x464>)
   d4c68:	f003 f845 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  Serial.println("\n\n");
   d4c6c:	f003 fb14 	bl	d8298 <_Z16_fetch_usbserialv>
   d4c70:	491b      	ldr	r1, [pc, #108]	; (d4ce0 <loop+0x468>)
   d4c72:	f003 f840 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  compass_heading = event.orientation.x +285;
   d4c76:	ed9f 7a1b 	vldr	s14, [pc, #108]	; d4ce4 <loop+0x46c>
   d4c7a:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
   d4c7e:	ee77 7a87 	vadd.f32	s15, s15, s14
  if(compass_heading > 360) {
   d4c82:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    compass_heading = compass_heading - 360;
   d4c8a:	bfc8      	it	gt
   d4c8c:	ee77 7ac8 	vsubgt.f32	s15, s15, s16
   d4c90:	edc4 7a00 	vstr	s15, [r4]
  Serial.print("compass heading:  ");
   d4c94:	f003 fb00 	bl	d8298 <_Z16_fetch_usbserialv>
   d4c98:	4913      	ldr	r1, [pc, #76]	; (d4ce8 <loop+0x470>)
   d4c9a:	f003 f815 	bl	d7cc8 <_ZN5Print5printEPKc>
  Serial.print(compass_heading, 4);
   d4c9e:	f003 fafb 	bl	d8298 <_Z16_fetch_usbserialv>
   d4ca2:	ed94 0a00 	vldr	s0, [r4]
   d4ca6:	2104      	movs	r1, #4
   d4ca8:	f003 f918 	bl	d7edc <_ZN5Print5printEfi>
    bno.getSensorOffsets(newCalib);
   d4cac:	a904      	add	r1, sp, #16
   d4cae:	480f      	ldr	r0, [pc, #60]	; (d4cec <loop+0x474>)
   d4cb0:	f001 fb50 	bl	d6354 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>
    displaySensorOffsets(newCalib);
   d4cb4:	a804      	add	r0, sp, #16
   d4cb6:	f7ff fb59 	bl	d436c <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
      delay(BNO055_SAMPLERATE_DELAY_MS);
   d4cba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4cbe:	f003 f96f 	bl	d7fa0 <delay>
}
   d4cc2:	b01c      	add	sp, #112	; 0x70
   d4cc4:	ecbd 8b02 	vpop	{d8}
   d4cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
   d4ccc:	4629      	mov	r1, r5
   d4cce:	e618      	b.n	d4902 <loop+0x8a>
   d4cd0:	4629      	mov	r1, r5
   d4cd2:	e62a      	b.n	d492a <loop+0xb2>
   d4cd4:	000daf4e 	.word	0x000daf4e
   d4cd8:	000daf53 	.word	0x000daf53
   d4cdc:	000daf11 	.word	0x000daf11
   d4ce0:	000daf47 	.word	0x000daf47
   d4ce4:	438e8000 	.word	0x438e8000
   d4ce8:	000daf58 	.word	0x000daf58
   d4cec:	2003e4f8 	.word	0x2003e4f8

000d4cf0 <setup>:
void setup(void) {
   d4cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
LastValue = 1;
   d4cf4:	4bcc      	ldr	r3, [pc, #816]	; (d5028 <setup+0x338>)
   d4cf6:	2401      	movs	r4, #1
   d4cf8:	601c      	str	r4, [r3, #0]
pinMode(vane_pin, INPUT);
   d4cfa:	4bcc      	ldr	r3, [pc, #816]	; (d502c <setup+0x33c>)
void setup(void) {
   d4cfc:	b0a3      	sub	sp, #140	; 0x8c
pinMode(vane_pin, INPUT);
   d4cfe:	7818      	ldrb	r0, [r3, #0]
   d4d00:	2100      	movs	r1, #0
   d4d02:	f003 fd4d 	bl	d87a0 <pinMode>
pinMode(vane_switch, OUTPUT);
   d4d06:	4bca      	ldr	r3, [pc, #808]	; (d5030 <setup+0x340>)
   d4d08:	4621      	mov	r1, r4
   d4d0a:	7818      	ldrb	r0, [r3, #0]
pinMode(wind_pin, INPUT);
   d4d0c:	4cc9      	ldr	r4, [pc, #804]	; (d5034 <setup+0x344>)
pinMode(vane_switch, OUTPUT);
   d4d0e:	f003 fd47 	bl	d87a0 <pinMode>
Serial.println("Vane Value\tDirection\tHeading");
   d4d12:	f003 fac1 	bl	d8298 <_Z16_fetch_usbserialv>
   d4d16:	49c8      	ldr	r1, [pc, #800]	; (d5038 <setup+0x348>)
   d4d18:	f002 ffed 	bl	d7cf6 <_ZN5Print7printlnEPKc>
pinMode(wind_pin, INPUT);
   d4d1c:	7820      	ldrb	r0, [r4, #0]
   d4d1e:	2100      	movs	r1, #0
   d4d20:	f003 fd3e 	bl	d87a0 <pinMode>
attachInterrupt(wind_pin, isr_rotation, FALLING);
   d4d24:	2300      	movs	r3, #0
   d4d26:	9300      	str	r3, [sp, #0]
   d4d28:	2202      	movs	r2, #2
   d4d2a:	f04f 33ff 	mov.w	r3, #4294967295
   d4d2e:	49c3      	ldr	r1, [pc, #780]	; (d503c <setup+0x34c>)
   d4d30:	7820      	ldrb	r0, [r4, #0]
   d4d32:	f003 fad9 	bl	d82e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
Serial.println("Davis Wind Speed Test");
   d4d36:	f003 faaf 	bl	d8298 <_Z16_fetch_usbserialv>
   d4d3a:	49c1      	ldr	r1, [pc, #772]	; (d5040 <setup+0x350>)
   d4d3c:	f002 ffdb 	bl	d7cf6 <_ZN5Print7printlnEPKc>
Serial.println("Rotations\tMPH");
   d4d40:	f003 faaa 	bl	d8298 <_Z16_fetch_usbserialv>
   d4d44:	49bf      	ldr	r1, [pc, #764]	; (d5044 <setup+0x354>)
   d4d46:	f002 ffd6 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  Serial.begin(115200);
   d4d4a:	f003 faa5 	bl	d8298 <_Z16_fetch_usbserialv>
   d4d4e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4d52:	f003 fa8f 	bl	d8274 <_ZN9USBSerial5beginEl>
    while(!Serial);    // time to get serial running
   d4d56:	f003 fa9f 	bl	d8298 <_Z16_fetch_usbserialv>
   d4d5a:	f003 fa92 	bl	d8282 <_ZN9USBSerialcvbEv>
   d4d5e:	2800      	cmp	r0, #0
   d4d60:	d0f9      	beq.n	d4d56 <setup+0x66>
  display.begin(0x3C, true); // Address 0x3C default
   d4d62:	4cb9      	ldr	r4, [pc, #740]	; (d5048 <setup+0x358>)
    Serial.println(F("BME280 test"));
   d4d64:	f003 fa98 	bl	d8298 <_Z16_fetch_usbserialv>
   d4d68:	49b8      	ldr	r1, [pc, #736]	; (d504c <setup+0x35c>)
   d4d6a:	f002 ffce 	bl	d7d0a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("128x64 OLED FeatherWing test");
   d4d6e:	f003 fa93 	bl	d8298 <_Z16_fetch_usbserialv>
   d4d72:	49b7      	ldr	r1, [pc, #732]	; (d5050 <setup+0x360>)
   d4d74:	f002 ffbf 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  display.begin(0x3C, true); // Address 0x3C default
   d4d78:	2201      	movs	r2, #1
   d4d7a:	213c      	movs	r1, #60	; 0x3c
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	f002 fb1b 	bl	d73b8 <_ZN15Adafruit_SH11075beginEhb>
  Serial.println("OLED begun");
   d4d82:	f003 fa89 	bl	d8298 <_Z16_fetch_usbserialv>
   d4d86:	49b3      	ldr	r1, [pc, #716]	; (d5054 <setup+0x364>)
   d4d88:	f002 ffb5 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  display.display();
   d4d8c:	4620      	mov	r0, r4
   d4d8e:	f002 fa1c 	bl	d71ca <_ZN15Adafruit_SH110X7displayEv>
  delay(1000);
   d4d92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4d96:	f003 f903 	bl	d7fa0 <delay>
  display.clearDisplay();
   d4d9a:	4620      	mov	r0, r4
   d4d9c:	f001 fda2 	bl	d68e4 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d4da0:	4620      	mov	r0, r4
   d4da2:	f002 fa12 	bl	d71ca <_ZN15Adafruit_SH110X7displayEv>
  display.setRotation(1);
   d4da6:	2101      	movs	r1, #1
   d4da8:	4620      	mov	r0, r4
   d4daa:	f001 ffa1 	bl	d6cf0 <_ZN12Adafruit_GFX11setRotationEh>
  Serial.println("Button test");
   d4dae:	f003 fa73 	bl	d8298 <_Z16_fetch_usbserialv>
   d4db2:	49a9      	ldr	r1, [pc, #676]	; (d5058 <setup+0x368>)
   d4db4:	f002 ff9f 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  pinMode(BUTTON_A, INPUT_PULLUP);
   d4db8:	2102      	movs	r1, #2
   d4dba:	2004      	movs	r0, #4
   d4dbc:	f003 fcf0 	bl	d87a0 <pinMode>
  pinMode(BUTTON_B, INPUT_PULLUP);
   d4dc0:	2102      	movs	r1, #2
   d4dc2:	2003      	movs	r0, #3
   d4dc4:	f003 fcec 	bl	d87a0 <pinMode>
  pinMode(BUTTON_C, INPUT_PULLUP);
   d4dc8:	2102      	movs	r1, #2
   d4dca:	4608      	mov	r0, r1
   d4dcc:	f003 fce8 	bl	d87a0 <pinMode>
  display.setTextSize(1);
   d4dd0:	2101      	movs	r1, #1
   d4dd2:	4620      	mov	r0, r4
   d4dd4:	f002 f9f3 	bl	d71be <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4dd8:	2200      	movs	r2, #0
   d4dda:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4dde:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.print("Connecting to SSID\n'adafruit':");
   d4de2:	499e      	ldr	r1, [pc, #632]	; (d505c <setup+0x36c>)
   d4de4:	4620      	mov	r0, r4
   d4de6:	f002 ff6f 	bl	d7cc8 <_ZN5Print5printEPKc>
  display.print("connected!");
   d4dea:	499d      	ldr	r1, [pc, #628]	; (d5060 <setup+0x370>)
   d4dec:	4620      	mov	r0, r4
   d4dee:	f002 ff6b 	bl	d7cc8 <_ZN5Print5printEPKc>
  display.println("IP: 10.0.1.23");
   d4df2:	499c      	ldr	r1, [pc, #624]	; (d5064 <setup+0x374>)
   d4df4:	4620      	mov	r0, r4
   d4df6:	f002 ff7e 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  display.println("Sending val #0");
   d4dfa:	499b      	ldr	r1, [pc, #620]	; (d5068 <setup+0x378>)
   d4dfc:	4620      	mov	r0, r4
   d4dfe:	f002 ff7a 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  display.display(); // actually display all of the above
   d4e02:	4620      	mov	r0, r4
   d4e04:	f002 f9e1 	bl	d71ca <_ZN15Adafruit_SH110X7displayEv>
    status = bme.begin();  
   d4e08:	4898      	ldr	r0, [pc, #608]	; (d506c <setup+0x37c>)
   d4e0a:	f000 feda 	bl	d5bc2 <_ZN15Adafruit_BME2805beginEv>
    if (!status) {
   d4e0e:	bb78      	cbnz	r0, d4e70 <setup+0x180>
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d4e10:	f003 fa42 	bl	d8298 <_Z16_fetch_usbserialv>
   d4e14:	4996      	ldr	r1, [pc, #600]	; (d5070 <setup+0x380>)
   d4e16:	f002 ff6e 	bl	d7cf6 <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),16);
   d4e1a:	f003 fa3d 	bl	d8298 <_Z16_fetch_usbserialv>
   d4e1e:	4995      	ldr	r1, [pc, #596]	; (d5074 <setup+0x384>)
   d4e20:	f002 ff52 	bl	d7cc8 <_ZN5Print5printEPKc>
   d4e24:	f003 fa38 	bl	d8298 <_Z16_fetch_usbserialv>
   d4e28:	4604      	mov	r4, r0
   d4e2a:	4890      	ldr	r0, [pc, #576]	; (d506c <setup+0x37c>)
   d4e2c:	f000 fa4a 	bl	d52c4 <_ZN15Adafruit_BME2808sensorIDEv>
        return printNumber(val, base) + t;
   d4e30:	2210      	movs	r2, #16
   d4e32:	4601      	mov	r1, r0
   d4e34:	4620      	mov	r0, r4
   d4e36:	f002 ff6a 	bl	d7d0e <_ZN5Print11printNumberEmh>
        n += println();
   d4e3a:	4620      	mov	r0, r4
   d4e3c:	f002 ff4f 	bl	d7cde <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d4e40:	f003 fa2a 	bl	d8298 <_Z16_fetch_usbserialv>
   d4e44:	498c      	ldr	r1, [pc, #560]	; (d5078 <setup+0x388>)
   d4e46:	f002 ff3f 	bl	d7cc8 <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d4e4a:	f003 fa25 	bl	d8298 <_Z16_fetch_usbserialv>
   d4e4e:	498b      	ldr	r1, [pc, #556]	; (d507c <setup+0x38c>)
   d4e50:	f002 ff3a 	bl	d7cc8 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d4e54:	f003 fa20 	bl	d8298 <_Z16_fetch_usbserialv>
   d4e58:	4989      	ldr	r1, [pc, #548]	; (d5080 <setup+0x390>)
   d4e5a:	f002 ff35 	bl	d7cc8 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d4e5e:	f003 fa1b 	bl	d8298 <_Z16_fetch_usbserialv>
   d4e62:	4988      	ldr	r1, [pc, #544]	; (d5084 <setup+0x394>)
   d4e64:	f002 ff30 	bl	d7cc8 <_ZN5Print5printEPKc>
        while (1) delay(10);
   d4e68:	200a      	movs	r0, #10
   d4e6a:	f003 f899 	bl	d7fa0 <delay>
   d4e6e:	e7fb      	b.n	d4e68 <setup+0x178>
  Serial.begin(9600);
   d4e70:	f003 fa12 	bl	d8298 <_Z16_fetch_usbserialv>
   d4e74:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4e78:	f003 f9fc 	bl	d8274 <_ZN9USBSerial5beginEl>
  Serial.println("WebSerial 3D Firmware"); Serial.println("");
   d4e7c:	f003 fa0c 	bl	d8298 <_Z16_fetch_usbserialv>
   d4e80:	4981      	ldr	r1, [pc, #516]	; (d5088 <setup+0x398>)
   d4e82:	f002 ff38 	bl	d7cf6 <_ZN5Print7printlnEPKc>
   d4e86:	f003 fa07 	bl	d8298 <_Z16_fetch_usbserialv>
   d4e8a:	4980      	ldr	r1, [pc, #512]	; (d508c <setup+0x39c>)
   d4e8c:	f002 ff33 	bl	d7cf6 <_ZN5Print7printlnEPKc>
if (i2ceeprom.begin(0x50)) {  // you can stick the new i2c addr in here, e.g. begin(0x51);
   d4e90:	f003 fd0a 	bl	d88a8 <_Z19__fetch_global_Wirev>
   d4e94:	2150      	movs	r1, #80	; 0x50
   d4e96:	4602      	mov	r2, r0
   d4e98:	487d      	ldr	r0, [pc, #500]	; (d5090 <setup+0x3a0>)
   d4e9a:	f002 fb03 	bl	d74a4 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>
   d4e9e:	2800      	cmp	r0, #0
   d4ea0:	d068      	beq.n	d4f74 <setup+0x284>
    Serial.println("Found I2C EEPROM");
   d4ea2:	f003 f9f9 	bl	d8298 <_Z16_fetch_usbserialv>
   d4ea6:	497b      	ldr	r1, [pc, #492]	; (d5094 <setup+0x3a4>)
    if (i2ceeprom.read(max_addr) != test)
   d4ea8:	4d79      	ldr	r5, [pc, #484]	; (d5090 <setup+0x3a0>)
        Serial.print("Failed to re-write address 0x");
   d4eaa:	f8df 8210 	ldr.w	r8, [pc, #528]	; d50bc <setup+0x3cc>
        Serial.print("Failed to write address 0x");
   d4eae:	f8df 9210 	ldr.w	r9, [pc, #528]	; d50c0 <setup+0x3d0>
    Serial.println("Found I2C EEPROM");
   d4eb2:	f002 ff20 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  Serial.println("Testing size!");
   d4eb6:	f003 f9ef 	bl	d8298 <_Z16_fetch_usbserialv>
   d4eba:	4977      	ldr	r1, [pc, #476]	; (d5098 <setup+0x3a8>)
   d4ebc:	f002 ff1b 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0xFFFF; max_addr++) {
   d4ec0:	2401      	movs	r4, #1
    if (i2ceeprom.read(max_addr) != test)
   d4ec2:	b2a7      	uxth	r7, r4
   d4ec4:	4639      	mov	r1, r7
   d4ec6:	4628      	mov	r0, r5
   d4ec8:	f002 fb24 	bl	d7514 <_ZN19Adafruit_EEPROM_I2C4readEt>
   d4ecc:	2837      	cmp	r0, #55	; 0x37
   d4ece:	d15a      	bne.n	d4f86 <setup+0x296>
    if (! i2ceeprom.write(max_addr, (byte)~test)) {
   d4ed0:	22c8      	movs	r2, #200	; 0xc8
   d4ed2:	4639      	mov	r1, r7
   d4ed4:	4628      	mov	r0, r5
   d4ed6:	f002 fafb 	bl	d74d0 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   d4eda:	b970      	cbnz	r0, d4efa <setup+0x20a>
        Serial.print("Failed to write address 0x");
   d4edc:	f003 f9dc 	bl	d8298 <_Z16_fetch_usbserialv>
   d4ee0:	4649      	mov	r1, r9
   d4ee2:	f002 fef1 	bl	d7cc8 <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   d4ee6:	f003 f9d7 	bl	d8298 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4eea:	2210      	movs	r2, #16
   d4eec:	4606      	mov	r6, r0
   d4eee:	4621      	mov	r1, r4
   d4ef0:	f002 ff0d 	bl	d7d0e <_ZN5Print11printNumberEmh>
        n += println();
   d4ef4:	4630      	mov	r0, r6
   d4ef6:	f002 fef2 	bl	d7cde <_ZN5Print7printlnEv>
    uint8_t val0 = i2ceeprom.read(0);
   d4efa:	2100      	movs	r1, #0
   d4efc:	4628      	mov	r0, r5
   d4efe:	f002 fb09 	bl	d7514 <_ZN19Adafruit_EEPROM_I2C4readEt>
    if (! i2ceeprom.write(max_addr, test)) {
   d4f02:	2237      	movs	r2, #55	; 0x37
    uint8_t val0 = i2ceeprom.read(0);
   d4f04:	4606      	mov	r6, r0
    if (! i2ceeprom.write(max_addr, test)) {
   d4f06:	4639      	mov	r1, r7
   d4f08:	4628      	mov	r0, r5
   d4f0a:	f002 fae1 	bl	d74d0 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   d4f0e:	b970      	cbnz	r0, d4f2e <setup+0x23e>
        Serial.print("Failed to re-write address 0x");
   d4f10:	f003 f9c2 	bl	d8298 <_Z16_fetch_usbserialv>
   d4f14:	4641      	mov	r1, r8
   d4f16:	f002 fed7 	bl	d7cc8 <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   d4f1a:	f003 f9bd 	bl	d8298 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4f1e:	2210      	movs	r2, #16
   d4f20:	4607      	mov	r7, r0
   d4f22:	4621      	mov	r1, r4
   d4f24:	f002 fef3 	bl	d7d0e <_ZN5Print11printNumberEmh>
        n += println();
   d4f28:	4638      	mov	r0, r7
   d4f2a:	f002 fed8 	bl	d7cde <_ZN5Print7printlnEv>
    if (val0 == (byte)~test) {
   d4f2e:	2ec8      	cmp	r6, #200	; 0xc8
   d4f30:	d129      	bne.n	d4f86 <setup+0x296>
      Serial.println("Found max address");
   d4f32:	f003 f9b1 	bl	d8298 <_Z16_fetch_usbserialv>
   d4f36:	4959      	ldr	r1, [pc, #356]	; (d509c <setup+0x3ac>)
   d4f38:	f002 fedd 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  Serial.print("This EEPROM can store ");
   d4f3c:	f003 f9ac 	bl	d8298 <_Z16_fetch_usbserialv>
   d4f40:	4957      	ldr	r1, [pc, #348]	; (d50a0 <setup+0x3b0>)
   d4f42:	f002 fec1 	bl	d7cc8 <_ZN5Print5printEPKc>
  Serial.print(max_addr);
   d4f46:	f003 f9a7 	bl	d8298 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4f4a:	220a      	movs	r2, #10
   d4f4c:	4621      	mov	r1, r4
   d4f4e:	f002 fede 	bl	d7d0e <_ZN5Print11printNumberEmh>
  Serial.println(" bytes");
   d4f52:	f003 f9a1 	bl	d8298 <_Z16_fetch_usbserialv>
   d4f56:	4953      	ldr	r1, [pc, #332]	; (d50a4 <setup+0x3b4>)
   d4f58:	f002 fecd 	bl	d7cf6 <_ZN5Print7printlnEPKc>
  if(!bno.begin())
   d4f5c:	4852      	ldr	r0, [pc, #328]	; (d50a8 <setup+0x3b8>)
   d4f5e:	210c      	movs	r1, #12
   d4f60:	f001 f936 	bl	d61d0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
   d4f64:	4604      	mov	r4, r0
   d4f66:	b9a0      	cbnz	r0, d4f92 <setup+0x2a2>
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
   d4f68:	f003 f996 	bl	d8298 <_Z16_fetch_usbserialv>
   d4f6c:	494f      	ldr	r1, [pc, #316]	; (d50ac <setup+0x3bc>)
   d4f6e:	f002 feab 	bl	d7cc8 <_ZN5Print5printEPKc>
    while(1);
   d4f72:	e7fe      	b.n	d4f72 <setup+0x282>
    Serial.println("I2C EEPROM not identified ... check your connections?\r\n");
   d4f74:	f003 f990 	bl	d8298 <_Z16_fetch_usbserialv>
   d4f78:	494d      	ldr	r1, [pc, #308]	; (d50b0 <setup+0x3c0>)
   d4f7a:	f002 febc 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    while (1) delay(10);
   d4f7e:	200a      	movs	r0, #10
   d4f80:	f003 f80e 	bl	d7fa0 <delay>
   d4f84:	e7fb      	b.n	d4f7e <setup+0x28e>
  for (max_addr = 1; max_addr < 0xFFFF; max_addr++) {
   d4f86:	3401      	adds	r4, #1
   d4f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4f8c:	429c      	cmp	r4, r3
   d4f8e:	d198      	bne.n	d4ec2 <setup+0x1d2>
   d4f90:	e7d4      	b.n	d4f3c <setup+0x24c>
  delay(1000);
   d4f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4f96:	f003 f803 	bl	d7fa0 <delay>
  bno.setExtCrystalUse(true);
   d4f9a:	2101      	movs	r1, #1
   d4f9c:	4842      	ldr	r0, [pc, #264]	; (d50a8 <setup+0x3b8>)
   d4f9e:	f001 f865 	bl	d606c <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
  displaySensorDetails();
   d4fa2:	f7ff f947 	bl	d4234 <_Z20displaySensorDetailsv>
    EEPROM.get(eeAddress, bnoID);
   d4fa6:	f003 fc4f 	bl	d8848 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4faa:	2204      	movs	r2, #4
   d4fac:	a902      	add	r1, sp, #8
   d4fae:	2000      	movs	r0, #0
   d4fb0:	f002 fb34 	bl	d761c <HAL_EEPROM_Get>
    bno.getSensor(&sensor);
   d4fb4:	483c      	ldr	r0, [pc, #240]	; (d50a8 <setup+0x3b8>)
   d4fb6:	a918      	add	r1, sp, #96	; 0x60
   d4fb8:	f000 fffc 	bl	d5fb4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    if (bnoID != sensor.sensor_id)
   d4fbc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   d4fbe:	9b02      	ldr	r3, [sp, #8]
   d4fc0:	429a      	cmp	r2, r3
   d4fc2:	d07f      	beq.n	d50c4 <setup+0x3d4>
        Serial.println("\nNo Calibration Data for this sensor exists in EEPROM");
   d4fc4:	f003 f968 	bl	d8298 <_Z16_fetch_usbserialv>
   d4fc8:	493a      	ldr	r1, [pc, #232]	; (d50b4 <setup+0x3c4>)
   d4fca:	f002 fe94 	bl	d7cf6 <_ZN5Print7printlnEPKc>
        delay(500);
   d4fce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4fd2:	f002 ffe5 	bl	d7fa0 <delay>
    bool foundCalib = false;
   d4fd6:	2400      	movs	r4, #0
    delay(1000);
   d4fd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4fdc:	f002 ffe0 	bl	d7fa0 <delay>
    displaySensorDetails();
   d4fe0:	f7ff f928 	bl	d4234 <_Z20displaySensorDetailsv>
    displaySensorStatus();
   d4fe4:	f7ff fb2a 	bl	d463c <_Z19displaySensorStatusv>
    bno.setExtCrystalUse(true);
   d4fe8:	482f      	ldr	r0, [pc, #188]	; (d50a8 <setup+0x3b8>)
   d4fea:	2101      	movs	r1, #1
   d4fec:	f001 f83e 	bl	d606c <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
    bno.getEvent(&event);
   d4ff0:	482d      	ldr	r0, [pc, #180]	; (d50a8 <setup+0x3b8>)
   d4ff2:	a90f      	add	r1, sp, #60	; 0x3c
   d4ff4:	f001 fb28 	bl	d6648 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
    if (foundCalib){
   d4ff8:	2c00      	cmp	r4, #0
   d4ffa:	f000 8081 	beq.w	d5100 <setup+0x410>
        Serial.println("Move sensor slightly to calibrate magnetometers");
   d4ffe:	f003 f94b 	bl	d8298 <_Z16_fetch_usbserialv>
   d5002:	492d      	ldr	r1, [pc, #180]	; (d50b8 <setup+0x3c8>)
        while (!bno.isFullyCalibrated())
   d5004:	4c28      	ldr	r4, [pc, #160]	; (d50a8 <setup+0x3b8>)
        Serial.println("Move sensor slightly to calibrate magnetometers");
   d5006:	f002 fe76 	bl	d7cf6 <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
   d500a:	4620      	mov	r0, r4
   d500c:	f001 f969 	bl	d62e2 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d5010:	2800      	cmp	r0, #0
   d5012:	f040 80b5 	bne.w	d5180 <setup+0x490>
            bno.getEvent(&event);
   d5016:	a90f      	add	r1, sp, #60	; 0x3c
   d5018:	4620      	mov	r0, r4
   d501a:	f001 fb15 	bl	d6648 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            delay(BNO055_SAMPLERATE_DELAY_MS);
   d501e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5022:	f002 ffbd 	bl	d7fa0 <delay>
        while (!bno.isFullyCalibrated())
   d5026:	e7f0      	b.n	d500a <setup+0x31a>
   d5028:	2003e4a4 	.word	0x2003e4a4
   d502c:	2003e420 	.word	0x2003e420
   d5030:	2003e421 	.word	0x2003e421
   d5034:	2003e422 	.word	0x2003e422
   d5038:	000daf6b 	.word	0x000daf6b
   d503c:	000d40c9 	.word	0x000d40c9
   d5040:	000daf88 	.word	0x000daf88
   d5044:	000daf9e 	.word	0x000daf9e
   d5048:	2003e514 	.word	0x2003e514
   d504c:	000dafac 	.word	0x000dafac
   d5050:	000dafb8 	.word	0x000dafb8
   d5054:	000dafd5 	.word	0x000dafd5
   d5058:	000dafe0 	.word	0x000dafe0
   d505c:	000dafec 	.word	0x000dafec
   d5060:	000db00b 	.word	0x000db00b
   d5064:	000db016 	.word	0x000db016
   d5068:	000db024 	.word	0x000db024
   d506c:	2003e4b4 	.word	0x2003e4b4
   d5070:	000db033 	.word	0x000db033
   d5074:	000db07b 	.word	0x000db07b
   d5078:	000db08c 	.word	0x000db08c
   d507c:	000db0d3 	.word	0x000db0d3
   d5080:	000db0fd 	.word	0x000db0fd
   d5084:	000db127 	.word	0x000db127
   d5088:	000db151 	.word	0x000db151
   d508c:	000daf11 	.word	0x000daf11
   d5090:	2003e56c 	.word	0x2003e56c
   d5094:	000db167 	.word	0x000db167
   d5098:	000db178 	.word	0x000db178
   d509c:	000db1f7 	.word	0x000db1f7
   d50a0:	000db209 	.word	0x000db209
   d50a4:	000db220 	.word	0x000db220
   d50a8:	2003e4f8 	.word	0x2003e4f8
   d50ac:	000db227 	.word	0x000db227
   d50b0:	000db186 	.word	0x000db186
   d50b4:	000db264 	.word	0x000db264
   d50b8:	000db31c 	.word	0x000db31c
   d50bc:	000db1d9 	.word	0x000db1d9
   d50c0:	000db1be 	.word	0x000db1be
        Serial.println("\nFound Calibration for this sensor in EEPROM.");
   d50c4:	f003 f8e8 	bl	d8298 <_Z16_fetch_usbserialv>
   d50c8:	494d      	ldr	r1, [pc, #308]	; (d5200 <setup+0x510>)
   d50ca:	f002 fe14 	bl	d7cf6 <_ZN5Print7printlnEPKc>
        EEPROM.get(eeAddress, calibrationData);
   d50ce:	f003 fbbb 	bl	d8848 <_Z21__fetch_global_EEPROMv>
   d50d2:	2216      	movs	r2, #22
   d50d4:	a903      	add	r1, sp, #12
   d50d6:	2004      	movs	r0, #4
   d50d8:	f002 faa0 	bl	d761c <HAL_EEPROM_Get>
        displaySensorOffsets(calibrationData);
   d50dc:	a803      	add	r0, sp, #12
   d50de:	f7ff f945 	bl	d436c <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
        Serial.println("\n\nRestoring Calibration data to the BNO055...");
   d50e2:	f003 f8d9 	bl	d8298 <_Z16_fetch_usbserialv>
   d50e6:	4947      	ldr	r1, [pc, #284]	; (d5204 <setup+0x514>)
   d50e8:	f002 fe05 	bl	d7cf6 <_ZN5Print7printlnEPKc>
        bno.setSensorOffsets(calibrationData);
   d50ec:	a903      	add	r1, sp, #12
   d50ee:	4846      	ldr	r0, [pc, #280]	; (d5208 <setup+0x518>)
   d50f0:	f000 ffdf 	bl	d60b2 <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>
        Serial.println("\n\nCalibration data loaded into BNO055");
   d50f4:	f003 f8d0 	bl	d8298 <_Z16_fetch_usbserialv>
   d50f8:	4944      	ldr	r1, [pc, #272]	; (d520c <setup+0x51c>)
   d50fa:	f002 fdfc 	bl	d7cf6 <_ZN5Print7printlnEPKc>
        foundCalib = true;
   d50fe:	e76b      	b.n	d4fd8 <setup+0x2e8>
        Serial.println("Please Calibrate Sensor: ");
   d5100:	f003 f8ca 	bl	d8298 <_Z16_fetch_usbserialv>
   d5104:	4942      	ldr	r1, [pc, #264]	; (d5210 <setup+0x520>)
        while (!bno.isFullyCalibrated())
   d5106:	4c40      	ldr	r4, [pc, #256]	; (d5208 <setup+0x518>)
            Serial.print("X: ");
   d5108:	4e42      	ldr	r6, [pc, #264]	; (d5214 <setup+0x524>)
            Serial.print("\tY: ");
   d510a:	4d43      	ldr	r5, [pc, #268]	; (d5218 <setup+0x528>)
        Serial.println("Please Calibrate Sensor: ");
   d510c:	f002 fdf3 	bl	d7cf6 <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
   d5110:	4620      	mov	r0, r4
   d5112:	f001 f8e6 	bl	d62e2 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d5116:	bb98      	cbnz	r0, d5180 <setup+0x490>
            bno.getEvent(&event);
   d5118:	a90f      	add	r1, sp, #60	; 0x3c
   d511a:	4620      	mov	r0, r4
   d511c:	f001 fa94 	bl	d6648 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            Serial.print("X: ");
   d5120:	f003 f8ba 	bl	d8298 <_Z16_fetch_usbserialv>
   d5124:	4631      	mov	r1, r6
   d5126:	f002 fdcf 	bl	d7cc8 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.x, 4);
   d512a:	f003 f8b5 	bl	d8298 <_Z16_fetch_usbserialv>
   d512e:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   d5132:	2104      	movs	r1, #4
   d5134:	f002 fed2 	bl	d7edc <_ZN5Print5printEfi>
            Serial.print("\tY: ");
   d5138:	f003 f8ae 	bl	d8298 <_Z16_fetch_usbserialv>
   d513c:	4629      	mov	r1, r5
   d513e:	f002 fdc3 	bl	d7cc8 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.y, 4);
   d5142:	f003 f8a9 	bl	d8298 <_Z16_fetch_usbserialv>
   d5146:	ed9d 0a15 	vldr	s0, [sp, #84]	; 0x54
   d514a:	2104      	movs	r1, #4
   d514c:	f002 fec6 	bl	d7edc <_ZN5Print5printEfi>
            Serial.print("\tZ: ");
   d5150:	f003 f8a2 	bl	d8298 <_Z16_fetch_usbserialv>
   d5154:	4931      	ldr	r1, [pc, #196]	; (d521c <setup+0x52c>)
   d5156:	f002 fdb7 	bl	d7cc8 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.z, 4);
   d515a:	f003 f89d 	bl	d8298 <_Z16_fetch_usbserialv>
   d515e:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   d5162:	2104      	movs	r1, #4
   d5164:	f002 feba 	bl	d7edc <_ZN5Print5printEfi>
            displayCalStatus();
   d5168:	f7ff f9fa 	bl	d4560 <_Z16displayCalStatusv>
            Serial.println("");
   d516c:	f003 f894 	bl	d8298 <_Z16_fetch_usbserialv>
   d5170:	492b      	ldr	r1, [pc, #172]	; (d5220 <setup+0x530>)
   d5172:	f002 fdc0 	bl	d7cf6 <_ZN5Print7printlnEPKc>
            delay(BNO055_SAMPLERATE_DELAY_MS);
   d5176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d517a:	f002 ff11 	bl	d7fa0 <delay>
        while (!bno.isFullyCalibrated())
   d517e:	e7c7      	b.n	d5110 <setup+0x420>
    Serial.println("\nFully calibrated!");
   d5180:	f003 f88a 	bl	d8298 <_Z16_fetch_usbserialv>
   d5184:	4927      	ldr	r1, [pc, #156]	; (d5224 <setup+0x534>)
   d5186:	f002 fdb6 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    Serial.println("--------------------------------");
   d518a:	f003 f885 	bl	d8298 <_Z16_fetch_usbserialv>
   d518e:	4926      	ldr	r1, [pc, #152]	; (d5228 <setup+0x538>)
   d5190:	f002 fdb1 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    Serial.println("Calibration Results: ");
   d5194:	f003 f880 	bl	d8298 <_Z16_fetch_usbserialv>
   d5198:	4924      	ldr	r1, [pc, #144]	; (d522c <setup+0x53c>)
   d519a:	f002 fdac 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    bno.getSensorOffsets(newCalib);
   d519e:	a909      	add	r1, sp, #36	; 0x24
   d51a0:	4819      	ldr	r0, [pc, #100]	; (d5208 <setup+0x518>)
   d51a2:	f001 f8d7 	bl	d6354 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>
    displaySensorOffsets(newCalib);
   d51a6:	a809      	add	r0, sp, #36	; 0x24
   d51a8:	f7ff f8e0 	bl	d436c <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
    Serial.println("\n\nStoring calibration data to EEPROM...");
   d51ac:	f003 f874 	bl	d8298 <_Z16_fetch_usbserialv>
   d51b0:	491f      	ldr	r1, [pc, #124]	; (d5230 <setup+0x540>)
   d51b2:	f002 fda0 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    bno.getSensor(&sensor);
   d51b6:	a918      	add	r1, sp, #96	; 0x60
   d51b8:	4813      	ldr	r0, [pc, #76]	; (d5208 <setup+0x518>)
   d51ba:	f000 fefb 	bl	d5fb4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    bnoID = sensor.sensor_id;
   d51be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d51c0:	9302      	str	r3, [sp, #8]
    EEPROM.put(eeAddress, bnoID);
   d51c2:	f003 fb41 	bl	d8848 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d51c6:	a902      	add	r1, sp, #8
   d51c8:	2204      	movs	r2, #4
   d51ca:	2000      	movs	r0, #0
   d51cc:	f002 fa2e 	bl	d762c <HAL_EEPROM_Put>
    EEPROM.put(eeAddress, newCalib);
   d51d0:	f003 fb3a 	bl	d8848 <_Z21__fetch_global_EEPROMv>
   d51d4:	2216      	movs	r2, #22
   d51d6:	a909      	add	r1, sp, #36	; 0x24
   d51d8:	2004      	movs	r0, #4
   d51da:	f002 fa27 	bl	d762c <HAL_EEPROM_Put>
    Serial.println("Data stored to EEPROM.");
   d51de:	f003 f85b 	bl	d8298 <_Z16_fetch_usbserialv>
   d51e2:	4914      	ldr	r1, [pc, #80]	; (d5234 <setup+0x544>)
   d51e4:	f002 fd87 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    Serial.println("\n--------------------------------\n");
   d51e8:	f003 f856 	bl	d8298 <_Z16_fetch_usbserialv>
   d51ec:	4912      	ldr	r1, [pc, #72]	; (d5238 <setup+0x548>)
   d51ee:	f002 fd82 	bl	d7cf6 <_ZN5Print7printlnEPKc>
    delay(500);
   d51f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d51f6:	f002 fed3 	bl	d7fa0 <delay>
}
   d51fa:	b023      	add	sp, #140	; 0x8c
   d51fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5200:	000db29a 	.word	0x000db29a
   d5204:	000db2c8 	.word	0x000db2c8
   d5208:	2003e4f8 	.word	0x2003e4f8
   d520c:	000db2f6 	.word	0x000db2f6
   d5210:	000db34c 	.word	0x000db34c
   d5214:	000daf4a 	.word	0x000daf4a
   d5218:	000daf4e 	.word	0x000daf4e
   d521c:	000daf53 	.word	0x000daf53
   d5220:	000daf11 	.word	0x000daf11
   d5224:	000db366 	.word	0x000db366
   d5228:	000dada8 	.word	0x000dada8
   d522c:	000db379 	.word	0x000db379
   d5230:	000db38f 	.word	0x000db38f
   d5234:	000db3b7 	.word	0x000db3b7
   d5238:	000db3ce 	.word	0x000db3ce

000d523c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d523c:	4770      	bx	lr

000d523e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d523e:	b510      	push	{r4, lr}
  }
   d5240:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d5242:	4604      	mov	r4, r0
  }
   d5244:	f003 fb54 	bl	d88f0 <_ZdlPvj>
   d5248:	4620      	mov	r0, r4
   d524a:	bd10      	pop	{r4, pc}

000d524c <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d524c:	b40e      	push	{r1, r2, r3}
   d524e:	b503      	push	{r0, r1, lr}
   d5250:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d5252:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5254:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d5258:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d525a:	f002 fe51 	bl	d7f00 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d525e:	b002      	add	sp, #8
   d5260:	f85d eb04 	ldr.w	lr, [sp], #4
   d5264:	b003      	add	sp, #12
   d5266:	4770      	bx	lr

000d5268 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5268:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d526a:	4604      	mov	r4, r0
   d526c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d526e:	7922      	ldrb	r2, [r4, #4]
   d5270:	68a3      	ldr	r3, [r4, #8]
   d5272:	b132      	cbz	r2, d5282 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d5274:	b9a3      	cbnz	r3, d52a0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d5276:	490b      	ldr	r1, [pc, #44]	; (d52a4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d5278:	b002      	add	sp, #8
   d527a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d527e:	f002 bd23 	b.w	d7cc8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5282:	4a09      	ldr	r2, [pc, #36]	; (d52a8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d5284:	7b26      	ldrb	r6, [r4, #12]
   d5286:	4d09      	ldr	r5, [pc, #36]	; (d52ac <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d5288:	4909      	ldr	r1, [pc, #36]	; (d52b0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d528a:	7b64      	ldrb	r4, [r4, #13]
   d528c:	2e01      	cmp	r6, #1
   d528e:	bf18      	it	ne
   d5290:	4629      	movne	r1, r5
   d5292:	e9cd 1400 	strd	r1, r4, [sp]
   d5296:	4907      	ldr	r1, [pc, #28]	; (d52b4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d5298:	f7ff ffd8 	bl	d524c <_ZN5Print6printfEPKcz>
  }
   d529c:	b002      	add	sp, #8
   d529e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d52a0:	4a05      	ldr	r2, [pc, #20]	; (d52b8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d52a2:	e7ef      	b.n	d5284 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d52a4:	000db402 	.word	0x000db402
   d52a8:	000daf11 	.word	0x000daf11
   d52ac:	000db3fe 	.word	0x000db3fe
   d52b0:	000db3fa 	.word	0x000db3fa
   d52b4:	000db418 	.word	0x000db418
   d52b8:	000db3f1 	.word	0x000db3f1

000d52bc <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d52bc:	f04f 33ff 	mov.w	r3, #4294967295
   d52c0:	6103      	str	r3, [r0, #16]
{ }
   d52c2:	4770      	bx	lr

000d52c4 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d52c4:	6880      	ldr	r0, [r0, #8]
   d52c6:	4770      	bx	lr

000d52c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d52c8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d52ca:	4c0b      	ldr	r4, [pc, #44]	; (d52f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d52cc:	7821      	ldrb	r1, [r4, #0]
   d52ce:	f3bf 8f5b 	dmb	ish
   d52d2:	f011 0101 	ands.w	r1, r1, #1
   d52d6:	d10b      	bne.n	d52f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d52d8:	4620      	mov	r0, r4
   d52da:	9101      	str	r1, [sp, #4]
   d52dc:	f7fe feec 	bl	d40b8 <__cxa_guard_acquire>
   d52e0:	9901      	ldr	r1, [sp, #4]
   d52e2:	b128      	cbz	r0, d52f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d52e4:	4805      	ldr	r0, [pc, #20]	; (d52fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d52e6:	f002 fbf1 	bl	d7acc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d52ea:	4620      	mov	r0, r4
   d52ec:	f7fe fee9 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d52f0:	4802      	ldr	r0, [pc, #8]	; (d52fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d52f2:	b002      	add	sp, #8
   d52f4:	bd10      	pop	{r4, pc}
   d52f6:	bf00      	nop
   d52f8:	2003e578 	.word	0x2003e578
   d52fc:	2003e57c 	.word	0x2003e57c

000d5300 <_ZN15Adafruit_BME2807spixferEh>:
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sck == -1)
   d5304:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5308:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d530a:	4605      	mov	r5, r0
   d530c:	460f      	mov	r7, r1
    if (_sck == -1)
   d530e:	d106      	bne.n	d531e <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5310:	f7ff ffda 	bl	d52c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5314:	4639      	mov	r1, r7
}
   d5316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d531a:	f002 bc79 	b.w	d7c10 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d531e:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d5320:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d5322:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d5326:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d532a:	2100      	movs	r1, #0
   d532c:	b280      	uxth	r0, r0
   d532e:	f003 fa48 	bl	d87c2 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d5332:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d5336:	fa08 f106 	lsl.w	r1, r8, r6
   d533a:	4039      	ands	r1, r7
   d533c:	b280      	uxth	r0, r0
   d533e:	f003 fa40 	bl	d87c2 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d5342:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d5346:	2101      	movs	r1, #1
   d5348:	b280      	uxth	r0, r0
   d534a:	f003 fa3a 	bl	d87c2 <digitalWrite>
        if (digitalRead(_miso))
   d534e:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d5352:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d5354:	b280      	uxth	r0, r0
        reply <<= 1;
   d5356:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d5358:	f003 fa4c 	bl	d87f4 <digitalRead>
   d535c:	b108      	cbz	r0, d5362 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d535e:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d5362:	3e01      	subs	r6, #1
   d5364:	d2df      	bcs.n	d5326 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d5366:	4620      	mov	r0, r4
   d5368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d536c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d536c:	b508      	push	{r3, lr}
        instance().endTransaction();
   d536e:	f7ff ffab 	bl	d52c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d5372:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d5376:	f002 bbc4 	b.w	d7b02 <_ZN8SPIClass14endTransactionEv>

000d537a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d537a:	b507      	push	{r0, r1, r2, lr}
   d537c:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d537e:	f7ff ffa3 	bl	d52c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5382:	9901      	ldr	r1, [sp, #4]
    }
   d5384:	b003      	add	sp, #12
   d5386:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d538a:	f002 bbd3 	b.w	d7b34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d5390 <_ZN15Adafruit_BME2806read24Eh>:
{
   d5390:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5392:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5396:	3301      	adds	r3, #1
{
   d5398:	b085      	sub	sp, #20
   d539a:	4604      	mov	r4, r0
   d539c:	460d      	mov	r5, r1
    if (_cs == -1) {
   d539e:	d123      	bne.n	d53e8 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d53a0:	7901      	ldrb	r1, [r0, #4]
   d53a2:	6800      	ldr	r0, [r0, #0]
   d53a4:	f003 f904 	bl	d85b0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d53a8:	6820      	ldr	r0, [r4, #0]
   d53aa:	6803      	ldr	r3, [r0, #0]
   d53ac:	4629      	mov	r1, r5
   d53ae:	689b      	ldr	r3, [r3, #8]
   d53b0:	4798      	blx	r3
        _wire -> endTransmission();
   d53b2:	6820      	ldr	r0, [r4, #0]
   d53b4:	f003 f904 	bl	d85c0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d53b8:	7921      	ldrb	r1, [r4, #4]
   d53ba:	6820      	ldr	r0, [r4, #0]
   d53bc:	2203      	movs	r2, #3
   d53be:	f003 f8f4 	bl	d85aa <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d53c2:	6820      	ldr	r0, [r4, #0]
   d53c4:	6803      	ldr	r3, [r0, #0]
   d53c6:	695b      	ldr	r3, [r3, #20]
   d53c8:	4798      	blx	r3
        value <<= 8;
   d53ca:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d53cc:	6820      	ldr	r0, [r4, #0]
   d53ce:	6803      	ldr	r3, [r0, #0]
   d53d0:	695b      	ldr	r3, [r3, #20]
   d53d2:	4798      	blx	r3
   d53d4:	4328      	orrs	r0, r5
        value <<= 8;
   d53d6:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d53d8:	6820      	ldr	r0, [r4, #0]
   d53da:	6803      	ldr	r3, [r0, #0]
   d53dc:	695b      	ldr	r3, [r3, #20]
   d53de:	4798      	blx	r3
   d53e0:	4305      	orrs	r5, r0
}
   d53e2:	4628      	mov	r0, r5
   d53e4:	b005      	add	sp, #20
   d53e6:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d53e8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d53ec:	3301      	adds	r3, #1
   d53ee:	d10c      	bne.n	d540a <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d53f0:	4b1a      	ldr	r3, [pc, #104]	; (d545c <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d53f2:	9300      	str	r3, [sp, #0]
   d53f4:	2300      	movs	r3, #0
   d53f6:	f88d 3004 	strb.w	r3, [sp, #4]
   d53fa:	4b19      	ldr	r3, [pc, #100]	; (d5460 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d53fc:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d53fe:	4668      	mov	r0, sp
   d5400:	2301      	movs	r3, #1
   d5402:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5406:	f7ff ffb8 	bl	d537a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d540a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d540e:	2100      	movs	r1, #0
   d5410:	b280      	uxth	r0, r0
   d5412:	f003 f9d6 	bl	d87c2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5416:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d541a:	4620      	mov	r0, r4
   d541c:	f7ff ff70 	bl	d5300 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5420:	2100      	movs	r1, #0
   d5422:	4620      	mov	r0, r4
   d5424:	f7ff ff6c 	bl	d5300 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d5428:	2100      	movs	r1, #0
        value <<= 8;
   d542a:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d542c:	4620      	mov	r0, r4
   d542e:	f7ff ff67 	bl	d5300 <_ZN15Adafruit_BME2807spixferEh>
   d5432:	4328      	orrs	r0, r5
        value <<= 8;
   d5434:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5436:	2100      	movs	r1, #0
   d5438:	4620      	mov	r0, r4
   d543a:	f7ff ff61 	bl	d5300 <_ZN15Adafruit_BME2807spixferEh>
   d543e:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d5440:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5444:	2101      	movs	r1, #1
   d5446:	b280      	uxth	r0, r0
   d5448:	f003 f9bb 	bl	d87c2 <digitalWrite>
        if (_sck == -1)
   d544c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5450:	3301      	adds	r3, #1
   d5452:	d1c6      	bne.n	d53e2 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d5454:	f7ff ff8a 	bl	d536c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d5458:	e7c3      	b.n	d53e2 <_ZN15Adafruit_BME2806read24Eh+0x52>
   d545a:	bf00      	nop
   d545c:	000db440 	.word	0x000db440
   d5460:	0007a120 	.word	0x0007a120

000d5464 <_ZN15Adafruit_BME28015readTemperatureEv>:
{
   d5464:	b510      	push	{r4, lr}
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5466:	21fa      	movs	r1, #250	; 0xfa
{
   d5468:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d546a:	f7ff ff91 	bl	d5390 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d546e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d5472:	d01e      	beq.n	d54b2 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5474:	8aa1      	ldrh	r1, [r4, #20]
    return T/100;
   d5476:	ed9f 7a10 	vldr	s14, [pc, #64]	; d54b8 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d547a:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d547c:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5480:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d5484:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5488:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d548a:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d548c:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d5490:	1312      	asrs	r2, r2, #12
   d5492:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5494:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d5496:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d549a:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d549c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d54a0:	3380      	adds	r3, #128	; 0x80
   d54a2:	121b      	asrs	r3, r3, #8
   d54a4:	ee07 3a90 	vmov	s15, r3
   d54a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d54ac:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d54b0:	bd10      	pop	{r4, pc}
        return NAN;
   d54b2:	ed9f 0a02 	vldr	s0, [pc, #8]	; d54bc <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d54b6:	e7fb      	b.n	d54b0 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d54b8:	42c80000 	.word	0x42c80000
   d54bc:	7fc00000 	.word	0x7fc00000

000d54c0 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   d54c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d54c4:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d54c6:	f7ff ffcd 	bl	d5464 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d54ca:	21f7      	movs	r1, #247	; 0xf7
   d54cc:	4620      	mov	r0, r4
   d54ce:	f7ff ff5f 	bl	d5390 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d54d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d54d6:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d54d8:	f000 80bf 	beq.w	d565a <_ZN15Adafruit_BME28012readPressureEv+0x19a>
    var1 = ((int64_t)t_fine) - 128000;
   d54dc:	68e0      	ldr	r0, [r4, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d54de:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
   d54e2:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d54e6:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d54ea:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d54ee:	fba3 8903 	umull	r8, r9, r3, r3
   d54f2:	fb03 f102 	mul.w	r1, r3, r2
   d54f6:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d54fa:	17f7      	asrs	r7, r6, #31
   d54fc:	fb06 f102 	mul.w	r1, r6, r2
   d5500:	fb03 1107 	mla	r1, r3, r7, r1
   d5504:	fba6 6703 	umull	r6, r7, r6, r3
   d5508:	440f      	add	r7, r1
   d550a:	0339      	lsls	r1, r7, #12
   d550c:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d5510:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5512:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
   d5516:	17f7      	asrs	r7, r6, #31
   d5518:	fb06 fc09 	mul.w	ip, r6, r9
   d551c:	fb08 cc07 	mla	ip, r8, r7, ip
   d5520:	fba6 6708 	umull	r6, r7, r6, r8
   d5524:	4467      	add	r7, ip
   d5526:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d552a:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d552e:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5530:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d5534:	eb1c 0000 	adds.w	r0, ip, r0
   d5538:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d553c:	3000      	adds	r0, #0
   d553e:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d5542:	fba0 0106 	umull	r0, r1, r0, r6
   d5546:	fb06 110e 	mla	r1, r6, lr, r1
   d554a:	104e      	asrs	r6, r1, #1
   d554c:	17cf      	asrs	r7, r1, #31
    if (var1 == 0) {
   d554e:	ea56 0107 	orrs.w	r1, r6, r7
   d5552:	f000 8085 	beq.w	d5660 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5556:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
   d555a:	fb00 fc09 	mul.w	ip, r0, r9
   d555e:	17c1      	asrs	r1, r0, #31
   d5560:	fb08 cc01 	mla	ip, r8, r1, ip
   d5564:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5568:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
   d556c:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d5570:	fb08 f202 	mul.w	r2, r8, r2
   d5574:	fb03 2209 	mla	r2, r3, r9, r2
   d5578:	fba8 8903 	umull	r8, r9, r8, r3
   d557c:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d557e:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5580:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d5584:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d5588:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d558a:	1812      	adds	r2, r2, r0
    p = 1048576 - adc_P;
   d558c:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5590:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5594:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5598:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d559c:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d559e:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d55a0:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d55a2:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d55a6:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d55aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d55ae:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d55b2:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d55b6:	1ac0      	subs	r0, r0, r3
   d55b8:	f640 4335 	movw	r3, #3125	; 0xc35
   d55bc:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d55c0:	fba0 0103 	umull	r0, r1, r0, r3
   d55c4:	fb03 110e 	mla	r1, r3, lr, r1
   d55c8:	4632      	mov	r2, r6
   d55ca:	463b      	mov	r3, r7
   d55cc:	f005 f944 	bl	da858 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d55d0:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d55d4:	134d      	asrs	r5, r1, #13
   d55d6:	0b46      	lsrs	r6, r0, #13
   d55d8:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d55dc:	fb02 f705 	mul.w	r7, r2, r5
   d55e0:	17d3      	asrs	r3, r2, #31
   d55e2:	fb06 7703 	mla	r7, r6, r3, r7
   d55e6:	fba2 2306 	umull	r2, r3, r2, r6
   d55ea:	443b      	add	r3, r7
   d55ec:	4355      	muls	r5, r2
   d55ee:	fb06 5503 	mla	r5, r6, r3, r5
   d55f2:	fba2 2306 	umull	r2, r3, r2, r6
   d55f6:	442b      	add	r3, r5
   d55f8:	0e55      	lsrs	r5, r2, #25
   d55fa:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d55fe:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5602:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   d5606:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5608:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d560c:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5610:	17d3      	asrs	r3, r2, #31
   d5612:	4351      	muls	r1, r2
   d5614:	fb00 1103 	mla	r1, r0, r3, r1
   d5618:	fba2 2300 	umull	r2, r3, r2, r0
   d561c:	440b      	add	r3, r1
   d561e:	0cd1      	lsrs	r1, r2, #19
   d5620:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5624:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5626:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d562a:	eb46 0300 	adc.w	r3, r6, r0
   d562e:	0a2a      	lsrs	r2, r5, #8
   d5630:	17e5      	asrs	r5, r4, #31
   d5632:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d5636:	1219      	asrs	r1, r3, #8
   d5638:	0120      	lsls	r0, r4, #4
   d563a:	012b      	lsls	r3, r5, #4
   d563c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d5640:	1880      	adds	r0, r0, r2
   d5642:	eb43 0101 	adc.w	r1, r3, r1
   d5646:	f005 f8c9 	bl	da7dc <__aeabi_l2f>
   d564a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5668 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d564e:	ee07 0a90 	vmov	s15, r0
   d5652:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d5656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d565a:	ed9f 0a04 	vldr	s0, [pc, #16]	; d566c <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d565e:	e7fa      	b.n	d5656 <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d5660:	ed9f 0a03 	vldr	s0, [pc, #12]	; d5670 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d5664:	e7f7      	b.n	d5656 <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d5666:	bf00      	nop
   d5668:	3b800000 	.word	0x3b800000
   d566c:	7fc00000 	.word	0x7fc00000
	...

000d5678 <_ZN15Adafruit_BME28012readAltitudeEf>:
{
   d5678:	b508      	push	{r3, lr}
   d567a:	ed2d 8b02 	vpush	{d8}
   d567e:	eeb0 8a40 	vmov.f32	s16, s0
    float atmospheric = readPressure() / 100.0F;
   d5682:	f7ff ff1d 	bl	d54c0 <_ZN15Adafruit_BME28012readPressureEv>
   d5686:	ed9f 7a16 	vldr	s14, [pc, #88]	; d56e0 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d568a:	eec0 7a07 	vdiv.f32	s15, s0, s14
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d568e:	eec7 7a88 	vdiv.f32	s15, s15, s16
   d5692:	ee17 0a90 	vmov	r0, s15
   d5696:	f004 fc31 	bl	d9efc <__aeabi_f2d>
   d569a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d56d0 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d569e:	ec41 0b10 	vmov	d0, r0, r1
   d56a2:	f003 f929 	bl	d88f8 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d56a6:	490f      	ldr	r1, [pc, #60]	; (d56e4 <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d56a8:	ec53 2b10 	vmov	r2, r3, d0
   d56ac:	2000      	movs	r0, #0
   d56ae:	f004 fac5 	bl	d9c3c <__aeabi_dsub>
   d56b2:	a309      	add	r3, pc, #36	; (adr r3, d56d8 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d56b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d56b8:	f004 fc78 	bl	d9fac <__aeabi_dmul>
   d56bc:	f004 ff6e 	bl	da59c <__aeabi_d2f>
}
   d56c0:	ecbd 8b02 	vpop	{d8}
   d56c4:	ee00 0a10 	vmov	s0, r0
   d56c8:	bd08      	pop	{r3, pc}
   d56ca:	bf00      	nop
   d56cc:	f3af 8000 	nop.w
   d56d0:	1a36e2eb 	.word	0x1a36e2eb
   d56d4:	3fc85bc0 	.word	0x3fc85bc0
   d56d8:	00000000 	.word	0x00000000
   d56dc:	40e5a540 	.word	0x40e5a540
   d56e0:	42c80000 	.word	0x42c80000
   d56e4:	3ff00000 	.word	0x3ff00000

000d56e8 <_ZN15Adafruit_BME2806read16Eh>:
{
   d56e8:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d56ea:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d56ee:	3301      	adds	r3, #1
{
   d56f0:	b085      	sub	sp, #20
   d56f2:	4604      	mov	r4, r0
   d56f4:	460d      	mov	r5, r1
    if (_cs == -1) {
   d56f6:	d11f      	bne.n	d5738 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d56f8:	7901      	ldrb	r1, [r0, #4]
   d56fa:	6800      	ldr	r0, [r0, #0]
   d56fc:	f002 ff58 	bl	d85b0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5700:	6820      	ldr	r0, [r4, #0]
   d5702:	6803      	ldr	r3, [r0, #0]
   d5704:	4629      	mov	r1, r5
   d5706:	689b      	ldr	r3, [r3, #8]
   d5708:	4798      	blx	r3
        _wire -> endTransmission();
   d570a:	6820      	ldr	r0, [r4, #0]
   d570c:	f002 ff58 	bl	d85c0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d5710:	7921      	ldrb	r1, [r4, #4]
   d5712:	6820      	ldr	r0, [r4, #0]
   d5714:	2202      	movs	r2, #2
   d5716:	f002 ff48 	bl	d85aa <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d571a:	6820      	ldr	r0, [r4, #0]
   d571c:	6803      	ldr	r3, [r0, #0]
   d571e:	695b      	ldr	r3, [r3, #20]
   d5720:	4798      	blx	r3
   d5722:	4605      	mov	r5, r0
   d5724:	6820      	ldr	r0, [r4, #0]
   d5726:	6803      	ldr	r3, [r0, #0]
   d5728:	695b      	ldr	r3, [r3, #20]
   d572a:	4798      	blx	r3
   d572c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5730:	b285      	uxth	r5, r0
}
   d5732:	4628      	mov	r0, r5
   d5734:	b005      	add	sp, #20
   d5736:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5738:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d573c:	3301      	adds	r3, #1
   d573e:	d10c      	bne.n	d575a <_ZN15Adafruit_BME2806read16Eh+0x72>
   d5740:	4b18      	ldr	r3, [pc, #96]	; (d57a4 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d5742:	9300      	str	r3, [sp, #0]
   d5744:	2300      	movs	r3, #0
   d5746:	f88d 3004 	strb.w	r3, [sp, #4]
   d574a:	4b17      	ldr	r3, [pc, #92]	; (d57a8 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d574c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d574e:	4668      	mov	r0, sp
   d5750:	2301      	movs	r3, #1
   d5752:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5756:	f7ff fe10 	bl	d537a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d575a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d575e:	2100      	movs	r1, #0
   d5760:	b280      	uxth	r0, r0
   d5762:	f003 f82e 	bl	d87c2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5766:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d576a:	4620      	mov	r0, r4
   d576c:	f7ff fdc8 	bl	d5300 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5770:	2100      	movs	r1, #0
   d5772:	4620      	mov	r0, r4
   d5774:	f7ff fdc4 	bl	d5300 <_ZN15Adafruit_BME2807spixferEh>
   d5778:	2100      	movs	r1, #0
   d577a:	4605      	mov	r5, r0
   d577c:	4620      	mov	r0, r4
   d577e:	f7ff fdbf 	bl	d5300 <_ZN15Adafruit_BME2807spixferEh>
   d5782:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5786:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d5788:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d578c:	2101      	movs	r1, #1
   d578e:	b280      	uxth	r0, r0
   d5790:	f003 f817 	bl	d87c2 <digitalWrite>
        if (_sck == -1)
   d5794:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5798:	3301      	adds	r3, #1
   d579a:	d1ca      	bne.n	d5732 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d579c:	f7ff fde6 	bl	d536c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d57a0:	e7c7      	b.n	d5732 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d57a2:	bf00      	nop
   d57a4:	000db440 	.word	0x000db440
   d57a8:	0007a120 	.word	0x0007a120

000d57ac <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d57ac:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d57ae:	f7ff ff9b 	bl	d56e8 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d57b2:	ba40      	rev16	r0, r0
}
   d57b4:	b280      	uxth	r0, r0
   d57b6:	bd08      	pop	{r3, pc}

000d57b8 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
   d57b8:	b538      	push	{r3, r4, r5, lr}
   d57ba:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d57bc:	f7ff fe52 	bl	d5464 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d57c0:	21fd      	movs	r1, #253	; 0xfd
   d57c2:	4620      	mov	r0, r4
   d57c4:	f7ff ff90 	bl	d56e8 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d57c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d57cc:	d038      	beq.n	d5840 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d57ce:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d57d2:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d57d4:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d57d8:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d57da:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d57de:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d57e2:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d57e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d57ea:	13d9      	asrs	r1, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d57ec:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d57f0:	4353      	muls	r3, r2
   d57f2:	12db      	asrs	r3, r3, #11
   d57f4:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d57f8:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d57fc:	4353      	muls	r3, r2
   d57fe:	129b      	asrs	r3, r3, #10
   d5800:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5802:	129b      	asrs	r3, r3, #10
   d5804:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d5808:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d580c:	4353      	muls	r3, r2
   d580e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d5812:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5814:	434b      	muls	r3, r1
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5816:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d5818:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d581c:	4352      	muls	r2, r2
   d581e:	11d2      	asrs	r2, r2, #7
   d5820:	434a      	muls	r2, r1
   d5822:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d5826:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d582a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d582e:	bfa8      	it	ge
   d5830:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d5834:	131b      	asrs	r3, r3, #12
   d5836:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d583a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d583e:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d5840:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5848 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d5844:	e7fb      	b.n	d583e <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d5846:	bf00      	nop
   d5848:	7fc00000 	.word	0x7fc00000

000d584c <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d584c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d584e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5852:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d5854:	b085      	sub	sp, #20
   d5856:	4604      	mov	r4, r0
   d5858:	460d      	mov	r5, r1
    if (_cs == -1) {
   d585a:	d118      	bne.n	d588e <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d585c:	7901      	ldrb	r1, [r0, #4]
   d585e:	6800      	ldr	r0, [r0, #0]
   d5860:	f002 fea6 	bl	d85b0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5864:	6820      	ldr	r0, [r4, #0]
   d5866:	6803      	ldr	r3, [r0, #0]
   d5868:	4629      	mov	r1, r5
   d586a:	689b      	ldr	r3, [r3, #8]
   d586c:	4798      	blx	r3
        _wire -> endTransmission();
   d586e:	6820      	ldr	r0, [r4, #0]
   d5870:	f002 fea6 	bl	d85c0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d5874:	7921      	ldrb	r1, [r4, #4]
   d5876:	6820      	ldr	r0, [r4, #0]
   d5878:	2201      	movs	r2, #1
   d587a:	f002 fe96 	bl	d85aa <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d587e:	6820      	ldr	r0, [r4, #0]
   d5880:	6803      	ldr	r3, [r0, #0]
   d5882:	695b      	ldr	r3, [r3, #20]
   d5884:	4798      	blx	r3
   d5886:	b2c5      	uxtb	r5, r0
}
   d5888:	4628      	mov	r0, r5
   d588a:	b005      	add	sp, #20
   d588c:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d588e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5892:	3301      	adds	r3, #1
   d5894:	d10c      	bne.n	d58b0 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d5896:	4b15      	ldr	r3, [pc, #84]	; (d58ec <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d5898:	9300      	str	r3, [sp, #0]
   d589a:	2300      	movs	r3, #0
   d589c:	f88d 3004 	strb.w	r3, [sp, #4]
   d58a0:	4b13      	ldr	r3, [pc, #76]	; (d58f0 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d58a2:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d58a4:	4668      	mov	r0, sp
   d58a6:	2301      	movs	r3, #1
   d58a8:	f8ad 300c 	strh.w	r3, [sp, #12]
   d58ac:	f7ff fd65 	bl	d537a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d58b0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d58b4:	2100      	movs	r1, #0
   d58b6:	b280      	uxth	r0, r0
   d58b8:	f002 ff83 	bl	d87c2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d58bc:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d58c0:	4620      	mov	r0, r4
   d58c2:	f7ff fd1d 	bl	d5300 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d58c6:	2100      	movs	r1, #0
   d58c8:	4620      	mov	r0, r4
   d58ca:	f7ff fd19 	bl	d5300 <_ZN15Adafruit_BME2807spixferEh>
   d58ce:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d58d0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d58d4:	2101      	movs	r1, #1
   d58d6:	b280      	uxth	r0, r0
   d58d8:	f002 ff73 	bl	d87c2 <digitalWrite>
        if (_sck == -1)
   d58dc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d58e0:	3301      	adds	r3, #1
   d58e2:	d1d1      	bne.n	d5888 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d58e4:	f7ff fd42 	bl	d536c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d58e8:	e7ce      	b.n	d5888 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d58ea:	bf00      	nop
   d58ec:	000db440 	.word	0x000db440
   d58f0:	0007a120 	.word	0x0007a120

000d58f4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d58f4:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d58f6:	21f3      	movs	r1, #243	; 0xf3
   d58f8:	f7ff ffa8 	bl	d584c <_ZN15Adafruit_BME2805read8Eh>
}
   d58fc:	f000 0001 	and.w	r0, r0, #1
   d5900:	bd08      	pop	{r3, pc}

000d5902 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d5902:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5904:	2188      	movs	r1, #136	; 0x88
{
   d5906:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5908:	f7ff ff50 	bl	d57ac <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d590c:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d590e:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d5910:	4620      	mov	r0, r4
   d5912:	f7ff ff4b 	bl	d57ac <_ZN15Adafruit_BME2809read16_LEEh>
   d5916:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d5918:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d591a:	4620      	mov	r0, r4
   d591c:	f7ff ff46 	bl	d57ac <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5920:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d5922:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5924:	4620      	mov	r0, r4
   d5926:	f7ff ff41 	bl	d57ac <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d592a:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d592c:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d592e:	4620      	mov	r0, r4
   d5930:	f7ff ff3c 	bl	d57ac <_ZN15Adafruit_BME2809read16_LEEh>
   d5934:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d5936:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d5938:	4620      	mov	r0, r4
   d593a:	f7ff ff37 	bl	d57ac <_ZN15Adafruit_BME2809read16_LEEh>
   d593e:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5940:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d5942:	4620      	mov	r0, r4
   d5944:	f7ff ff32 	bl	d57ac <_ZN15Adafruit_BME2809read16_LEEh>
   d5948:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d594a:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d594c:	4620      	mov	r0, r4
   d594e:	f7ff ff2d 	bl	d57ac <_ZN15Adafruit_BME2809read16_LEEh>
   d5952:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d5954:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d5956:	4620      	mov	r0, r4
   d5958:	f7ff ff28 	bl	d57ac <_ZN15Adafruit_BME2809read16_LEEh>
   d595c:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d595e:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d5960:	4620      	mov	r0, r4
   d5962:	f7ff ff23 	bl	d57ac <_ZN15Adafruit_BME2809read16_LEEh>
   d5966:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d5968:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d596a:	4620      	mov	r0, r4
   d596c:	f7ff ff1e 	bl	d57ac <_ZN15Adafruit_BME2809read16_LEEh>
   d5970:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d5972:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d5974:	4620      	mov	r0, r4
   d5976:	f7ff ff19 	bl	d57ac <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d597a:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d597c:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d597e:	4620      	mov	r0, r4
   d5980:	f7ff ff64 	bl	d584c <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d5984:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5986:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d598a:	4620      	mov	r0, r4
   d598c:	f7ff ff0e 	bl	d57ac <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5990:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d5992:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5994:	4620      	mov	r0, r4
   d5996:	f7ff ff59 	bl	d584c <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d599a:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d599c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d59a0:	4620      	mov	r0, r4
   d59a2:	f7ff ff53 	bl	d584c <_ZN15Adafruit_BME2805read8Eh>
   d59a6:	21e5      	movs	r1, #229	; 0xe5
   d59a8:	4605      	mov	r5, r0
   d59aa:	4620      	mov	r0, r4
   d59ac:	f7ff ff4e 	bl	d584c <_ZN15Adafruit_BME2805read8Eh>
   d59b0:	f000 030f 	and.w	r3, r0, #15
   d59b4:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d59b8:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d59ba:	21e6      	movs	r1, #230	; 0xe6
   d59bc:	4620      	mov	r0, r4
   d59be:	f7ff ff45 	bl	d584c <_ZN15Adafruit_BME2805read8Eh>
   d59c2:	21e5      	movs	r1, #229	; 0xe5
   d59c4:	4605      	mov	r5, r0
   d59c6:	4620      	mov	r0, r4
   d59c8:	f7ff ff40 	bl	d584c <_ZN15Adafruit_BME2805read8Eh>
   d59cc:	1103      	asrs	r3, r0, #4
   d59ce:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d59d2:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d59d4:	21e7      	movs	r1, #231	; 0xe7
   d59d6:	4620      	mov	r0, r4
   d59d8:	f7ff ff38 	bl	d584c <_ZN15Adafruit_BME2805read8Eh>
   d59dc:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d59e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d59e4 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d59e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d59e6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d59ea:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d59ec:	4604      	mov	r4, r0
   d59ee:	460e      	mov	r6, r1
   d59f0:	4615      	mov	r5, r2
    if (_cs == -1) {
   d59f2:	d112      	bne.n	d5a1a <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d59f4:	7901      	ldrb	r1, [r0, #4]
   d59f6:	6800      	ldr	r0, [r0, #0]
   d59f8:	f002 fdda 	bl	d85b0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d59fc:	6820      	ldr	r0, [r4, #0]
   d59fe:	6803      	ldr	r3, [r0, #0]
   d5a00:	4631      	mov	r1, r6
   d5a02:	689b      	ldr	r3, [r3, #8]
   d5a04:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d5a06:	6820      	ldr	r0, [r4, #0]
   d5a08:	6803      	ldr	r3, [r0, #0]
   d5a0a:	4629      	mov	r1, r5
   d5a0c:	689b      	ldr	r3, [r3, #8]
   d5a0e:	4798      	blx	r3
        _wire -> endTransmission();
   d5a10:	6820      	ldr	r0, [r4, #0]
   d5a12:	f002 fdd5 	bl	d85c0 <_ZN7TwoWire15endTransmissionEv>
}
   d5a16:	b004      	add	sp, #16
   d5a18:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d5a1a:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5a1e:	3301      	adds	r3, #1
   d5a20:	d10c      	bne.n	d5a3c <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d5a22:	4b14      	ldr	r3, [pc, #80]	; (d5a74 <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d5a24:	9300      	str	r3, [sp, #0]
   d5a26:	2300      	movs	r3, #0
   d5a28:	f88d 3004 	strb.w	r3, [sp, #4]
   d5a2c:	4b12      	ldr	r3, [pc, #72]	; (d5a78 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d5a2e:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5a30:	4668      	mov	r0, sp
   d5a32:	2301      	movs	r3, #1
   d5a34:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5a38:	f7ff fc9f 	bl	d537a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5a3c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5a40:	2100      	movs	r1, #0
   d5a42:	b280      	uxth	r0, r0
   d5a44:	f002 febd 	bl	d87c2 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d5a48:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d5a4c:	4620      	mov	r0, r4
   d5a4e:	f7ff fc57 	bl	d5300 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d5a52:	4629      	mov	r1, r5
   d5a54:	4620      	mov	r0, r4
   d5a56:	f7ff fc53 	bl	d5300 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d5a5a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5a5e:	2101      	movs	r1, #1
   d5a60:	b280      	uxth	r0, r0
   d5a62:	f002 feae 	bl	d87c2 <digitalWrite>
    if (_sck == -1)
   d5a66:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5a6a:	3301      	adds	r3, #1
   d5a6c:	d1d3      	bne.n	d5a16 <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d5a6e:	f7ff fc7d 	bl	d536c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d5a72:	e7d0      	b.n	d5a16 <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d5a74:	000db440 	.word	0x000db440
   d5a78:	0007a120 	.word	0x0007a120

000d5a7c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d5a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d5a7e:	00db      	lsls	r3, r3, #3
   d5a80:	f002 0207 	and.w	r2, r2, #7
   d5a84:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d5a88:	4313      	orrs	r3, r2
   d5a8a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d5a8e:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d5a92:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d5a96:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d5a9a:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d5a9e:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d5aa2:	f366 1347 	bfi	r3, r6, #5, #3
   d5aa6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d5aaa:	00ed      	lsls	r5, r5, #3
   d5aac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d5ab0:	f007 0707 	and.w	r7, r7, #7
   d5ab4:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d5ab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d5abc:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d5abe:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d5ac0:	431d      	orrs	r5, r3
   d5ac2:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d5ac6:	f006 0207 	and.w	r2, r6, #7
   d5aca:	21f2      	movs	r1, #242	; 0xf2
   d5acc:	f7ff ff8a 	bl	d59e4 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d5ad0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d5ad4:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d5ad8:	f002 0107 	and.w	r1, r2, #7
   d5adc:	009b      	lsls	r3, r3, #2
   d5ade:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d5ae2:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d5ae6:	4620      	mov	r0, r4
   d5ae8:	21f5      	movs	r1, #245	; 0xf5
   d5aea:	f7ff ff7b 	bl	d59e4 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d5aee:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d5af2:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d5af6:	f002 0107 	and.w	r1, r2, #7
   d5afa:	009b      	lsls	r3, r3, #2
   d5afc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5b00:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d5b04:	4620      	mov	r0, r4
   d5b06:	21f4      	movs	r1, #244	; 0xf4
}
   d5b08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5b0c:	f7ff bf6a 	b.w	d59e4 <_ZN15Adafruit_BME2806write8Ehh>

000d5b10 <_ZN15Adafruit_BME2804initEv>:
{
   d5b10:	b530      	push	{r4, r5, lr}
   d5b12:	4604      	mov	r4, r0
    if (_cs == -1) {
   d5b14:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d5b18:	1c42      	adds	r2, r0, #1
{
   d5b1a:	b085      	sub	sp, #20
    if (_cs == -1) {
   d5b1c:	d119      	bne.n	d5b52 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d5b1e:	6820      	ldr	r0, [r4, #0]
   d5b20:	f002 fd14 	bl	d854c <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5b24:	21d0      	movs	r1, #208	; 0xd0
   d5b26:	4620      	mov	r0, r4
   d5b28:	f7ff fe90 	bl	d584c <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d5b2c:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5b2e:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d5b30:	d145      	bne.n	d5bbe <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d5b32:	4620      	mov	r0, r4
   d5b34:	22b6      	movs	r2, #182	; 0xb6
   d5b36:	21e0      	movs	r1, #224	; 0xe0
   d5b38:	f7ff ff54 	bl	d59e4 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d5b3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5b40:	f002 fa2e 	bl	d7fa0 <delay>
    while (isReadingCalibration())
   d5b44:	4620      	mov	r0, r4
   d5b46:	f7ff fed5 	bl	d58f4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d5b4a:	4605      	mov	r5, r0
   d5b4c:	b328      	cbz	r0, d5b9a <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d5b4e:	2064      	movs	r0, #100	; 0x64
   d5b50:	e7f6      	b.n	d5b40 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d5b52:	2101      	movs	r1, #1
   d5b54:	b280      	uxth	r0, r0
   d5b56:	f002 fe34 	bl	d87c2 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d5b5a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5b5e:	2101      	movs	r1, #1
   d5b60:	b280      	uxth	r0, r0
   d5b62:	f002 fe1d 	bl	d87a0 <pinMode>
        if (_sck == -1) {
   d5b66:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d5b6a:	1c43      	adds	r3, r0, #1
   d5b6c:	d104      	bne.n	d5b78 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d5b6e:	f7ff fbab 	bl	d52c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5b72:	f001 ffb5 	bl	d7ae0 <_ZN8SPIClass5beginEv>
    }
   d5b76:	e7d5      	b.n	d5b24 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d5b78:	2101      	movs	r1, #1
   d5b7a:	b280      	uxth	r0, r0
   d5b7c:	f002 fe10 	bl	d87a0 <pinMode>
            pinMode(_mosi, OUTPUT);
   d5b80:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d5b84:	2101      	movs	r1, #1
   d5b86:	b280      	uxth	r0, r0
   d5b88:	f002 fe0a 	bl	d87a0 <pinMode>
            pinMode(_miso, INPUT);
   d5b8c:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d5b90:	2100      	movs	r1, #0
   d5b92:	b280      	uxth	r0, r0
   d5b94:	f002 fe04 	bl	d87a0 <pinMode>
   d5b98:	e7c4      	b.n	d5b24 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d5b9a:	4620      	mov	r0, r4
   d5b9c:	f7ff feb1 	bl	d5902 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d5ba0:	2305      	movs	r3, #5
   d5ba2:	9300      	str	r3, [sp, #0]
   d5ba4:	461a      	mov	r2, r3
   d5ba6:	2103      	movs	r1, #3
   d5ba8:	4620      	mov	r0, r4
   d5baa:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d5bae:	f7ff ff65 	bl	d5a7c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d5bb2:	2064      	movs	r0, #100	; 0x64
   d5bb4:	f002 f9f4 	bl	d7fa0 <delay>
   d5bb8:	2001      	movs	r0, #1
}
   d5bba:	b005      	add	sp, #20
   d5bbc:	bd30      	pop	{r4, r5, pc}
        return false;
   d5bbe:	2000      	movs	r0, #0
   d5bc0:	e7fb      	b.n	d5bba <_ZN15Adafruit_BME2804initEv+0xaa>

000d5bc2 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d5bc2:	2377      	movs	r3, #119	; 0x77
{
   d5bc4:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d5bc6:	7103      	strb	r3, [r0, #4]
{
   d5bc8:	4604      	mov	r4, r0
	_wire = &Wire;
   d5bca:	f002 fe6d 	bl	d88a8 <_Z19__fetch_global_Wirev>
   d5bce:	6020      	str	r0, [r4, #0]
	status = init();
   d5bd0:	4620      	mov	r0, r4
   d5bd2:	f7ff ff9d 	bl	d5b10 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d5bd6:	b930      	cbnz	r0, d5be6 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d5bd8:	2376      	movs	r3, #118	; 0x76
   d5bda:	7123      	strb	r3, [r4, #4]
 		status = init();
   d5bdc:	4620      	mov	r0, r4
}
   d5bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d5be2:	f7ff bf95 	b.w	d5b10 <_ZN15Adafruit_BME2804initEv>
}
   d5be6:	bd10      	pop	{r4, pc}

000d5be8 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   d5be8:	b510      	push	{r4, lr}
   d5bea:	4604      	mov	r4, r0
  if (_spiSetting) {
   d5bec:	6840      	ldr	r0, [r0, #4]
   d5bee:	b110      	cbz	r0, d5bf6 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   d5bf0:	6803      	ldr	r3, [r0, #0]
   d5bf2:	689b      	ldr	r3, [r3, #8]
   d5bf4:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   d5bf6:	4620      	mov	r0, r4
   d5bf8:	bd10      	pop	{r4, pc}

000d5bfa <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   d5bfa:	b538      	push	{r3, r4, r5, lr}
   d5bfc:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   d5bfe:	f990 000e 	ldrsb.w	r0, [r0, #14]
   d5c02:	2101      	movs	r1, #1
   d5c04:	b280      	uxth	r0, r0
   d5c06:	f002 fdcb 	bl	d87a0 <pinMode>
  digitalWrite(_cs, HIGH);
   d5c0a:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d5c0e:	2101      	movs	r1, #1
   d5c10:	b280      	uxth	r0, r0
   d5c12:	f002 fdd6 	bl	d87c2 <digitalWrite>

  if (_spi) { // hardware SPI
   d5c16:	6825      	ldr	r5, [r4, #0]
   d5c18:	b135      	cbz	r5, d5c28 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   d5c1a:	4628      	mov	r0, r5
   d5c1c:	f001 ff60 	bl	d7ae0 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   d5c20:	2001      	movs	r0, #1
   d5c22:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   d5c26:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   d5c28:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d5c2c:	2101      	movs	r1, #1
   d5c2e:	b280      	uxth	r0, r0
   d5c30:	f002 fdb6 	bl	d87a0 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   d5c34:	7b63      	ldrb	r3, [r4, #13]
   d5c36:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d5c3a:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   d5c3c:	bf94      	ite	ls
   d5c3e:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   d5c40:	2101      	movhi	r1, #1
   d5c42:	b280      	uxth	r0, r0
   d5c44:	f002 fdbd 	bl	d87c2 <digitalWrite>
    if (_mosi != -1) {
   d5c48:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5c4c:	1c42      	adds	r2, r0, #1
   d5c4e:	d009      	beq.n	d5c64 <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   d5c50:	2101      	movs	r1, #1
   d5c52:	b280      	uxth	r0, r0
   d5c54:	f002 fda4 	bl	d87a0 <pinMode>
      digitalWrite(_mosi, HIGH);
   d5c58:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5c5c:	2101      	movs	r1, #1
   d5c5e:	b280      	uxth	r0, r0
   d5c60:	f002 fdaf 	bl	d87c2 <digitalWrite>
    if (_miso != -1) {
   d5c64:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d5c68:	1c43      	adds	r3, r0, #1
   d5c6a:	d0d9      	beq.n	d5c20 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   d5c6c:	2100      	movs	r1, #0
   d5c6e:	b280      	uxth	r0, r0
   d5c70:	f002 fd96 	bl	d87a0 <pinMode>
   d5c74:	e7d4      	b.n	d5c20 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000d5c78 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d5c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c7c:	4604      	mov	r4, r0
  if (_spi) {
   d5c7e:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d5c80:	b085      	sub	sp, #20
   d5c82:	460d      	mov	r5, r1
  if (_spi) {
   d5c84:	b140      	cbz	r0, d5c98 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   d5c86:	2300      	movs	r3, #0
   d5c88:	9300      	str	r3, [sp, #0]
   d5c8a:	4613      	mov	r3, r2
   d5c8c:	460a      	mov	r2, r1
   d5c8e:	f001 ffc5 	bl	d7c1c <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   d5c92:	b005      	add	sp, #20
   d5c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   d5c98:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d5c9a:	68a0      	ldr	r0, [r4, #8]
   d5c9c:	4f48      	ldr	r7, [pc, #288]	; (d5dc0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   d5c9e:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   d5ca2:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d5ca4:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   d5ca6:	bf0c      	ite	eq
   d5ca8:	f04f 0b01 	moveq.w	fp, #1
   d5cac:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d5cb0:	ea1b 0f03 	tst.w	fp, r3
   d5cb4:	eb01 0302 	add.w	r3, r1, r2
   d5cb8:	bf0c      	ite	eq
   d5cba:	f04f 0901 	moveq.w	r9, #1
   d5cbe:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d5cc2:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   d5cc4:	9303      	str	r3, [sp, #12]
   d5cc6:	9b03      	ldr	r3, [sp, #12]
   d5cc8:	42ab      	cmp	r3, r5
   d5cca:	d0e2      	beq.n	d5c92 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   d5ccc:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   d5cd0:	465e      	mov	r6, fp
    uint8_t reply = 0;
   d5cd2:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   d5cd6:	b117      	cbz	r7, d5cde <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d5cd8:	4638      	mov	r0, r7
   d5cda:	f001 fc87 	bl	d75ec <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   d5cde:	7b63      	ldrb	r3, [r4, #13]
   d5ce0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d5ce4:	d141      	bne.n	d5d6a <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d5ce6:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d5cea:	1c5a      	adds	r2, r3, #1
   d5cec:	d00f      	beq.n	d5d0e <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   d5cee:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d5cf2:	bf14      	ite	ne
   d5cf4:	2301      	movne	r3, #1
   d5cf6:	2300      	moveq	r3, #0
   d5cf8:	454b      	cmp	r3, r9
   d5cfa:	d008      	beq.n	d5d0e <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
          if (towrite)
   d5cfc:	6963      	ldr	r3, [r4, #20]
   d5cfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d5d00:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   d5d02:	2900      	cmp	r1, #0
   d5d04:	d02c      	beq.n	d5d60 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   d5d06:	4302      	orrs	r2, r0
   d5d08:	601a      	str	r2, [r3, #0]
   d5d0a:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   d5d0e:	69a1      	ldr	r1, [r4, #24]
   d5d10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5d12:	680a      	ldr	r2, [r1, #0]
   d5d14:	4313      	orrs	r3, r2
   d5d16:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d5d18:	b117      	cbz	r7, d5d20 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   d5d1a:	4638      	mov	r0, r7
   d5d1c:	f001 fc66 	bl	d75ec <HAL_Delay_Microseconds>
        if (_miso != -1) {
   d5d20:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d5d24:	3301      	adds	r3, #1
   d5d26:	d006      	beq.n	d5d36 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   d5d28:	69e3      	ldr	r3, [r4, #28]
   d5d2a:	681a      	ldr	r2, [r3, #0]
   d5d2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5d2e:	421a      	tst	r2, r3
            reply |= b;
   d5d30:	bf18      	it	ne
   d5d32:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   d5d36:	69a1      	ldr	r1, [r4, #24]
   d5d38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5d3a:	680a      	ldr	r2, [r1, #0]
   d5d3c:	ea22 0303 	bic.w	r3, r2, r3
   d5d40:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   d5d42:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d5d46:	3301      	adds	r3, #1
        buffer[i] = reply;
   d5d48:	bf18      	it	ne
   d5d4a:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   d5d4e:	7b23      	ldrb	r3, [r4, #12]
   d5d50:	2b00      	cmp	r3, #0
   d5d52:	d132      	bne.n	d5dba <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   d5d54:	0076      	lsls	r6, r6, #1
   d5d56:	b2f6      	uxtb	r6, r6
   d5d58:	2e00      	cmp	r6, #0
   d5d5a:	d1bc      	bne.n	d5cd6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   d5d5c:	3501      	adds	r5, #1
   d5d5e:	e7b2      	b.n	d5cc6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   d5d60:	ea22 0200 	bic.w	r2, r2, r0
   d5d64:	601a      	str	r2, [r3, #0]
   d5d66:	4689      	mov	r9, r1
   d5d68:	e7d1      	b.n	d5d0e <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   d5d6a:	69a1      	ldr	r1, [r4, #24]
   d5d6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5d6e:	680a      	ldr	r2, [r1, #0]
   d5d70:	4313      	orrs	r3, r2
   d5d72:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d5d74:	b117      	cbz	r7, d5d7c <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   d5d76:	4638      	mov	r0, r7
   d5d78:	f001 fc38 	bl	d75ec <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   d5d7c:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d5d80:	3301      	adds	r3, #1
   d5d82:	d008      	beq.n	d5d96 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
          if (send & b)
   d5d84:	6963      	ldr	r3, [r4, #20]
   d5d86:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d5d88:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   d5d8a:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   d5d8e:	bf14      	ite	ne
   d5d90:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   d5d92:	438a      	biceq	r2, r1
   d5d94:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   d5d96:	69a1      	ldr	r1, [r4, #24]
   d5d98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5d9a:	680a      	ldr	r2, [r1, #0]
   d5d9c:	ea22 0303 	bic.w	r3, r2, r3
   d5da0:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   d5da2:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d5da6:	3301      	adds	r3, #1
   d5da8:	d0cb      	beq.n	d5d42 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   d5daa:	69e3      	ldr	r3, [r4, #28]
   d5dac:	681a      	ldr	r2, [r3, #0]
   d5dae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5db0:	421a      	tst	r2, r3
            reply |= b;
   d5db2:	bf18      	it	ne
   d5db4:	ea46 0808 	orrne.w	r8, r6, r8
   d5db8:	e7c3      	b.n	d5d42 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   d5dba:	0876      	lsrs	r6, r6, #1
   d5dbc:	e7cc      	b.n	d5d58 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   d5dbe:	bf00      	nop
   d5dc0:	0007a120 	.word	0x0007a120

000d5dc4 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   d5dc4:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   d5dc6:	2201      	movs	r2, #1
  uint8_t data = send;
   d5dc8:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   d5dcc:	f10d 0107 	add.w	r1, sp, #7
   d5dd0:	f7ff ff52 	bl	d5c78 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   d5dd4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5dd8:	b003      	add	sp, #12
   d5dda:	f85d fb04 	ldr.w	pc, [sp], #4

000d5dde <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d5dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5de2:	4604      	mov	r4, r0
  if (_spi) {
   d5de4:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d5de6:	460e      	mov	r6, r1
   d5de8:	4617      	mov	r7, r2
   d5dea:	461d      	mov	r5, r3
  if (_spi) {
   d5dec:	b110      	cbz	r0, d5df4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   d5dee:	6861      	ldr	r1, [r4, #4]
   d5df0:	f001 fea0 	bl	d7b34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d5df4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d5df8:	2100      	movs	r1, #0
   d5dfa:	b280      	uxth	r0, r0
   d5dfc:	f002 fce1 	bl	d87c2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   d5e00:	9b06      	ldr	r3, [sp, #24]
   d5e02:	eb05 0803 	add.w	r8, r5, r3
   d5e06:	4545      	cmp	r5, r8
   d5e08:	d108      	bne.n	d5e1c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   d5e0a:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   d5e0c:	42b7      	cmp	r7, r6
   d5e0e:	d00b      	beq.n	d5e28 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   d5e10:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5e14:	4620      	mov	r0, r4
   d5e16:	f7ff ffd5 	bl	d5dc4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   d5e1a:	e7f7      	b.n	d5e0c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   d5e1c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5e20:	4620      	mov	r0, r4
   d5e22:	f7ff ffcf 	bl	d5dc4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   d5e26:	e7ee      	b.n	d5e06 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   d5e28:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d5e2c:	2101      	movs	r1, #1
   d5e2e:	b280      	uxth	r0, r0
   d5e30:	f002 fcc7 	bl	d87c2 <digitalWrite>

  if (_spi) {
   d5e34:	6820      	ldr	r0, [r4, #0]
   d5e36:	b108      	cbz	r0, d5e3c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   d5e38:	f001 fe63 	bl	d7b02 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d5e3c:	2001      	movs	r0, #1
   d5e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5e42 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d5e42:	6042      	str	r2, [r0, #4]
  _begun = false;
   d5e44:	2200      	movs	r2, #0
   d5e46:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   d5e48:	2220      	movs	r2, #32
  _addr = addr;
   d5e4a:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   d5e4c:	60c2      	str	r2, [r0, #12]
#endif
}
   d5e4e:	4770      	bx	lr

000d5e50 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   d5e50:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d5e52:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d5e54:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d5e56:	b153      	cbz	r3, d5e6e <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d5e58:	7821      	ldrb	r1, [r4, #0]
   d5e5a:	6860      	ldr	r0, [r4, #4]
   d5e5c:	f002 fba8 	bl	d85b0 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   d5e60:	6860      	ldr	r0, [r4, #4]
   d5e62:	f002 fbad 	bl	d85c0 <_ZN7TwoWire15endTransmissionEv>
   d5e66:	fab0 f080 	clz	r0, r0
   d5e6a:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   d5e6c:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d5e6e:	2101      	movs	r1, #1
   d5e70:	f000 f803 	bl	d5e7a <_ZN18Adafruit_I2CDevice5beginEb>
   d5e74:	2800      	cmp	r0, #0
   d5e76:	d1ef      	bne.n	d5e58 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d5e78:	e7f8      	b.n	d5e6c <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d5e7a <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d5e7a:	b538      	push	{r3, r4, r5, lr}
   d5e7c:	4604      	mov	r4, r0
  _wire->begin();
   d5e7e:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d5e80:	460d      	mov	r5, r1
  _wire->begin();
   d5e82:	f002 fb63 	bl	d854c <_ZN7TwoWire5beginEv>
  _begun = true;
   d5e86:	2001      	movs	r0, #1
   d5e88:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   d5e8a:	b125      	cbz	r5, d5e96 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   d5e8c:	4620      	mov	r0, r4
}
   d5e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   d5e92:	f7ff bfdd 	b.w	d5e50 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   d5e96:	bd38      	pop	{r3, r4, r5, pc}

000d5e98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   d5e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5e9c:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d5ea0:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   d5ea2:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   d5ea4:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   d5ea6:	4432      	add	r2, r6
   d5ea8:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   d5eaa:	4604      	mov	r4, r0
   d5eac:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   d5eae:	d902      	bls.n	d5eb6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d5eb0:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   d5eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d5eb6:	7801      	ldrb	r1, [r0, #0]
   d5eb8:	6840      	ldr	r0, [r0, #4]
   d5eba:	f002 fb79 	bl	d85b0 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d5ebe:	b97e      	cbnz	r6, d5ee0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   d5ec0:	6860      	ldr	r0, [r4, #4]
   d5ec2:	6803      	ldr	r3, [r0, #0]
   d5ec4:	462a      	mov	r2, r5
   d5ec6:	68db      	ldr	r3, [r3, #12]
   d5ec8:	4641      	mov	r1, r8
   d5eca:	4798      	blx	r3
   d5ecc:	4285      	cmp	r5, r0
   d5ece:	d1ef      	bne.n	d5eb0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   d5ed0:	6860      	ldr	r0, [r4, #4]
   d5ed2:	4639      	mov	r1, r7
   d5ed4:	f002 fb70 	bl	d85b8 <_ZN7TwoWire15endTransmissionEh>
   d5ed8:	fab0 f080 	clz	r0, r0
   d5edc:	0940      	lsrs	r0, r0, #5
   d5ede:	e7e8      	b.n	d5eb2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d5ee0:	f1b9 0f00 	cmp.w	r9, #0
   d5ee4:	d0ec      	beq.n	d5ec0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
   d5ee6:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d5ee8:	6803      	ldr	r3, [r0, #0]
   d5eea:	4632      	mov	r2, r6
   d5eec:	68db      	ldr	r3, [r3, #12]
   d5eee:	4649      	mov	r1, r9
   d5ef0:	4798      	blx	r3
   d5ef2:	42b0      	cmp	r0, r6
   d5ef4:	d1dc      	bne.n	d5eb0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   d5ef6:	e7e3      	b.n	d5ec0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000d5ef8 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   d5ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5efc:	4615      	mov	r5, r2
   d5efe:	4604      	mov	r4, r0
   d5f00:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   d5f02:	b2d2      	uxtb	r2, r2
   d5f04:	7801      	ldrb	r1, [r0, #0]
   d5f06:	6840      	ldr	r0, [r0, #4]
   d5f08:	f002 fb3d 	bl	d8586 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   d5f0c:	4285      	cmp	r5, r0
   d5f0e:	d10d      	bne.n	d5f2c <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   d5f10:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   d5f12:	fa1f f887 	uxth.w	r8, r7
   d5f16:	45a8      	cmp	r8, r5
   d5f18:	f107 0701 	add.w	r7, r7, #1
   d5f1c:	d209      	bcs.n	d5f32 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   d5f1e:	6860      	ldr	r0, [r4, #4]
   d5f20:	6803      	ldr	r3, [r0, #0]
   d5f22:	695b      	ldr	r3, [r3, #20]
   d5f24:	4798      	blx	r3
   d5f26:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   d5f2a:	e7f2      	b.n	d5f12 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   d5f2c:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d5f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5f32:	2001      	movs	r0, #1
   d5f34:	e7fb      	b.n	d5f2e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000d5f36 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d5f36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5f3a:	4607      	mov	r7, r0
   d5f3c:	4688      	mov	r8, r1
   d5f3e:	4616      	mov	r6, r2
   d5f40:	4699      	mov	r9, r3
  size_t pos = 0;
   d5f42:	2500      	movs	r5, #0
  while (pos < len) {
   d5f44:	42b5      	cmp	r5, r6
   d5f46:	d212      	bcs.n	d5f6e <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   d5f48:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   d5f4a:	1b74      	subs	r4, r6, r5
   d5f4c:	4294      	cmp	r4, r2
   d5f4e:	bf28      	it	cs
   d5f50:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   d5f52:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   d5f54:	42ab      	cmp	r3, r5
   d5f56:	bf94      	ite	ls
   d5f58:	464b      	movls	r3, r9
   d5f5a:	2300      	movhi	r3, #0
   d5f5c:	4622      	mov	r2, r4
   d5f5e:	eb08 0105 	add.w	r1, r8, r5
   d5f62:	4638      	mov	r0, r7
   d5f64:	f7ff ffc8 	bl	d5ef8 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   d5f68:	b110      	cbz	r0, d5f70 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   d5f6a:	4425      	add	r5, r4
  while (pos < len) {
   d5f6c:	e7ea      	b.n	d5f44 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   d5f6e:	2001      	movs	r0, #1
}
   d5f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5f74 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   d5f74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5f76:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   d5f78:	2300      	movs	r3, #0
   d5f7a:	e9cd 3300 	strd	r3, r3, [sp]
   d5f7e:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   d5f82:	9e06      	ldr	r6, [sp, #24]
   d5f84:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   d5f86:	f7ff ff87 	bl	d5e98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d5f8a:	b140      	cbz	r0, d5f9e <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   d5f8c:	2301      	movs	r3, #1
   d5f8e:	4632      	mov	r2, r6
   d5f90:	4629      	mov	r1, r5
   d5f92:	4620      	mov	r0, r4
}
   d5f94:	b002      	add	sp, #8
   d5f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d5f9a:	f7ff bfcc 	b.w	d5f36 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d5f9e:	b002      	add	sp, #8
   d5fa0:	bd70      	pop	{r4, r5, r6, pc}

000d5fa2 <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   d5fa2:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d5fa4:	6840      	ldr	r0, [r0, #4]
   d5fa6:	f002 facd 	bl	d8544 <_ZN7TwoWire8setSpeedEm>
  return true;
#else
  (void)desiredclk;
  return false;
#endif
}
   d5faa:	2001      	movs	r0, #1
   d5fac:	bd08      	pop	{r3, pc}

000d5fae <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d5fae:	4770      	bx	lr

000d5fb0 <_ZN15Adafruit_BNO055D1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
   d5fb0:	4770      	bx	lr
	...

000d5fb4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 *          Sensor description
 */
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d5fb4:	460b      	mov	r3, r1
   d5fb6:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d5fb8:	2228      	movs	r2, #40	; 0x28
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d5fba:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d5fbc:	2100      	movs	r1, #0
   d5fbe:	4618      	mov	r0, r3
   d5fc0:	f004 fe12 	bl	dabe8 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
   d5fc4:	4909      	ldr	r1, [pc, #36]	; (d5fec <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x38>)
   d5fc6:	220b      	movs	r2, #11
   d5fc8:	f004 fe42 	bl	dac50 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d5fcc:	2200      	movs	r2, #0
  sensor->version = 1;
   d5fce:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d5fd0:	72c2      	strb	r2, [r0, #11]
  sensor->version = 1;
   d5fd2:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _sensorID;
   d5fd4:	68e1      	ldr	r1, [r4, #12]
  sensor->type = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay = 0;
   d5fd6:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->max_value = 0.0F;
   d5fd8:	2200      	movs	r2, #0
  sensor->sensor_id = _sensorID;
   d5fda:	6101      	str	r1, [r0, #16]
  sensor->max_value = 0.0F;
   d5fdc:	6182      	str	r2, [r0, #24]
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d5fde:	2103      	movs	r1, #3
  sensor->min_value = 0.0F;
   d5fe0:	61c2      	str	r2, [r0, #28]
  sensor->resolution = 0.01F;
   d5fe2:	4a03      	ldr	r2, [pc, #12]	; (d5ff0 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x3c>)
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d5fe4:	6141      	str	r1, [r0, #20]
  sensor->resolution = 0.01F;
   d5fe6:	6202      	str	r2, [r0, #32]
}
   d5fe8:	bd10      	pop	{r4, pc}
   d5fea:	bf00      	nop
   d5fec:	000db315 	.word	0x000db315
   d5ff0:	3c23d70a 	.word	0x3c23d70a

000d5ff4 <_ZN15Adafruit_BNO055D0Ev>:
   d5ff4:	b510      	push	{r4, lr}
   d5ff6:	2114      	movs	r1, #20
   d5ff8:	4604      	mov	r4, r0
   d5ffa:	f002 fc79 	bl	d88f0 <_ZdlPvj>
   d5ffe:	4620      	mov	r0, r4
   d6000:	bd10      	pop	{r4, pc}
	...

000d6004 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d6004:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6006:	9301      	str	r3, [sp, #4]
                                 TwoWire *theWire) {
   d6008:	4b09      	ldr	r3, [pc, #36]	; (d6030 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x2c>)
   d600a:	6003      	str	r3, [r0, #0]
   d600c:	2300      	movs	r3, #0
  _sensorID = sensorID;
   d600e:	e9c0 3102 	strd	r3, r1, [r0, #8]
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d6012:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d6014:	2010      	movs	r0, #16
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d6016:	4616      	mov	r6, r2
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d6018:	f7fe f83d 	bl	d4096 <_Znwj>
   d601c:	4605      	mov	r5, r0
   d601e:	b118      	cbz	r0, d6028 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x24>
   d6020:	9a01      	ldr	r2, [sp, #4]
   d6022:	4631      	mov	r1, r6
   d6024:	f7ff ff0d 	bl	d5e42 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
}
   d6028:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d602a:	60a5      	str	r5, [r4, #8]
}
   d602c:	b002      	add	sp, #8
   d602e:	bd70      	pop	{r4, r5, r6, pc}
   d6030:	000db454 	.word	0x000db454

000d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value) {
   d6034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
  return i2c_dev->write(buffer, 2);
   d6036:	2300      	movs	r3, #0
   d6038:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
   d603c:	f88d 100c 	strb.w	r1, [sp, #12]
   d6040:	f88d 200d 	strb.w	r2, [sp, #13]
  return i2c_dev->write(buffer, 2);
   d6044:	2301      	movs	r3, #1
   d6046:	2202      	movs	r2, #2
   d6048:	a903      	add	r1, sp, #12
   d604a:	6880      	ldr	r0, [r0, #8]
   d604c:	f7ff ff24 	bl	d5e98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d6050:	b005      	add	sp, #20
   d6052:	f85d fb04 	ldr.w	pc, [sp], #4

000d6056 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
   d6056:	b508      	push	{r3, lr}
   d6058:	460a      	mov	r2, r1
  _mode = mode;
   d605a:	7401      	strb	r1, [r0, #16]
  write8(BNO055_OPR_MODE_ADDR, _mode);
   d605c:	213d      	movs	r1, #61	; 0x3d
   d605e:	f7ff ffe9 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
}
   d6062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(30);
   d6066:	201e      	movs	r0, #30
   d6068:	f001 bf9a 	b.w	d7fa0 <delay>

000d606c <_ZN15Adafruit_BNO05516setExtCrystalUseEb>:
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d606c:	b570      	push	{r4, r5, r6, lr}
   d606e:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d6070:	2100      	movs	r1, #0
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d6072:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t modeback = _mode;
   d6074:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d6076:	f7ff ffee 	bl	d6056 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d607a:	2019      	movs	r0, #25
   d607c:	f001 ff90 	bl	d7fa0 <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6080:	2200      	movs	r2, #0
   d6082:	2107      	movs	r1, #7
   d6084:	4620      	mov	r0, r4
   d6086:	f7ff ffd5 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (usextal) {
   d608a:	b185      	cbz	r5, d60ae <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x42>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x80);
   d608c:	2280      	movs	r2, #128	; 0x80
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d608e:	213f      	movs	r1, #63	; 0x3f
   d6090:	4620      	mov	r0, r4
   d6092:	f7ff ffcf 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6096:	200a      	movs	r0, #10
   d6098:	f001 ff82 	bl	d7fa0 <delay>
  setMode(modeback);
   d609c:	4620      	mov	r0, r4
   d609e:	4631      	mov	r1, r6
   d60a0:	f7ff ffd9 	bl	d6056 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d60a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(20);
   d60a8:	2014      	movs	r0, #20
   d60aa:	f001 bf79 	b.w	d7fa0 <delay>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d60ae:	462a      	mov	r2, r5
   d60b0:	e7ed      	b.n	d608e <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x22>

000d60b2 <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>:
    const adafruit_bno055_offsets_t &offsets_type) {
   d60b2:	b570      	push	{r4, r5, r6, lr}
   d60b4:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d60b6:	2100      	movs	r1, #0
    const adafruit_bno055_offsets_t &offsets_type) {
   d60b8:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t lastMode = _mode;
   d60ba:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d60bc:	f7ff ffcb 	bl	d6056 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d60c0:	2019      	movs	r0, #25
   d60c2:	f001 ff6d 	bl	d7fa0 <delay>
  write8(ACCEL_OFFSET_X_LSB_ADDR, (offsets_type.accel_offset_x) & 0x0FF);
   d60c6:	782a      	ldrb	r2, [r5, #0]
   d60c8:	2155      	movs	r1, #85	; 0x55
   d60ca:	4620      	mov	r0, r4
   d60cc:	f7ff ffb2 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_X_MSB_ADDR, (offsets_type.accel_offset_x >> 8) & 0x0FF);
   d60d0:	786a      	ldrb	r2, [r5, #1]
   d60d2:	2156      	movs	r1, #86	; 0x56
   d60d4:	4620      	mov	r0, r4
   d60d6:	f7ff ffad 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_LSB_ADDR, (offsets_type.accel_offset_y) & 0x0FF);
   d60da:	78aa      	ldrb	r2, [r5, #2]
   d60dc:	2157      	movs	r1, #87	; 0x57
   d60de:	4620      	mov	r0, r4
   d60e0:	f7ff ffa8 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_MSB_ADDR, (offsets_type.accel_offset_y >> 8) & 0x0FF);
   d60e4:	78ea      	ldrb	r2, [r5, #3]
   d60e6:	2158      	movs	r1, #88	; 0x58
   d60e8:	4620      	mov	r0, r4
   d60ea:	f7ff ffa3 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_LSB_ADDR, (offsets_type.accel_offset_z) & 0x0FF);
   d60ee:	792a      	ldrb	r2, [r5, #4]
   d60f0:	2159      	movs	r1, #89	; 0x59
   d60f2:	4620      	mov	r0, r4
   d60f4:	f7ff ff9e 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_MSB_ADDR, (offsets_type.accel_offset_z >> 8) & 0x0FF);
   d60f8:	796a      	ldrb	r2, [r5, #5]
   d60fa:	215a      	movs	r1, #90	; 0x5a
   d60fc:	4620      	mov	r0, r4
   d60fe:	f7ff ff99 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_LSB_ADDR, (offsets_type.mag_offset_x) & 0x0FF);
   d6102:	79aa      	ldrb	r2, [r5, #6]
   d6104:	215b      	movs	r1, #91	; 0x5b
   d6106:	4620      	mov	r0, r4
   d6108:	f7ff ff94 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_MSB_ADDR, (offsets_type.mag_offset_x >> 8) & 0x0FF);
   d610c:	79ea      	ldrb	r2, [r5, #7]
   d610e:	215c      	movs	r1, #92	; 0x5c
   d6110:	4620      	mov	r0, r4
   d6112:	f7ff ff8f 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_LSB_ADDR, (offsets_type.mag_offset_y) & 0x0FF);
   d6116:	7a2a      	ldrb	r2, [r5, #8]
   d6118:	215d      	movs	r1, #93	; 0x5d
   d611a:	4620      	mov	r0, r4
   d611c:	f7ff ff8a 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_MSB_ADDR, (offsets_type.mag_offset_y >> 8) & 0x0FF);
   d6120:	7a6a      	ldrb	r2, [r5, #9]
   d6122:	215e      	movs	r1, #94	; 0x5e
   d6124:	4620      	mov	r0, r4
   d6126:	f7ff ff85 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_LSB_ADDR, (offsets_type.mag_offset_z) & 0x0FF);
   d612a:	7aaa      	ldrb	r2, [r5, #10]
   d612c:	215f      	movs	r1, #95	; 0x5f
   d612e:	4620      	mov	r0, r4
   d6130:	f7ff ff80 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_MSB_ADDR, (offsets_type.mag_offset_z >> 8) & 0x0FF);
   d6134:	7aea      	ldrb	r2, [r5, #11]
   d6136:	2160      	movs	r1, #96	; 0x60
   d6138:	4620      	mov	r0, r4
   d613a:	f7ff ff7b 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_LSB_ADDR, (offsets_type.gyro_offset_x) & 0x0FF);
   d613e:	7b2a      	ldrb	r2, [r5, #12]
   d6140:	2161      	movs	r1, #97	; 0x61
   d6142:	4620      	mov	r0, r4
   d6144:	f7ff ff76 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_MSB_ADDR, (offsets_type.gyro_offset_x >> 8) & 0x0FF);
   d6148:	7b6a      	ldrb	r2, [r5, #13]
   d614a:	2162      	movs	r1, #98	; 0x62
   d614c:	4620      	mov	r0, r4
   d614e:	f7ff ff71 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_LSB_ADDR, (offsets_type.gyro_offset_y) & 0x0FF);
   d6152:	7baa      	ldrb	r2, [r5, #14]
   d6154:	2163      	movs	r1, #99	; 0x63
   d6156:	4620      	mov	r0, r4
   d6158:	f7ff ff6c 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_MSB_ADDR, (offsets_type.gyro_offset_y >> 8) & 0x0FF);
   d615c:	7bea      	ldrb	r2, [r5, #15]
   d615e:	2164      	movs	r1, #100	; 0x64
   d6160:	4620      	mov	r0, r4
   d6162:	f7ff ff67 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_LSB_ADDR, (offsets_type.gyro_offset_z) & 0x0FF);
   d6166:	7c2a      	ldrb	r2, [r5, #16]
   d6168:	2165      	movs	r1, #101	; 0x65
   d616a:	4620      	mov	r0, r4
   d616c:	f7ff ff62 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_MSB_ADDR, (offsets_type.gyro_offset_z >> 8) & 0x0FF);
   d6170:	7c6a      	ldrb	r2, [r5, #17]
   d6172:	2166      	movs	r1, #102	; 0x66
   d6174:	4620      	mov	r0, r4
   d6176:	f7ff ff5d 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_LSB_ADDR, (offsets_type.accel_radius) & 0x0FF);
   d617a:	7caa      	ldrb	r2, [r5, #18]
   d617c:	2167      	movs	r1, #103	; 0x67
   d617e:	4620      	mov	r0, r4
   d6180:	f7ff ff58 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_MSB_ADDR, (offsets_type.accel_radius >> 8) & 0x0FF);
   d6184:	7cea      	ldrb	r2, [r5, #19]
   d6186:	2168      	movs	r1, #104	; 0x68
   d6188:	4620      	mov	r0, r4
   d618a:	f7ff ff53 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_LSB_ADDR, (offsets_type.mag_radius) & 0x0FF);
   d618e:	7d2a      	ldrb	r2, [r5, #20]
   d6190:	2169      	movs	r1, #105	; 0x69
   d6192:	4620      	mov	r0, r4
   d6194:	f7ff ff4e 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_MSB_ADDR, (offsets_type.mag_radius >> 8) & 0x0FF);
   d6198:	7d6a      	ldrb	r2, [r5, #21]
   d619a:	216a      	movs	r1, #106	; 0x6a
   d619c:	4620      	mov	r0, r4
   d619e:	f7ff ff49 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  setMode(lastMode);
   d61a2:	4631      	mov	r1, r6
   d61a4:	4620      	mov	r0, r4
}
   d61a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setMode(lastMode);
   d61aa:	f7ff bf54 	b.w	d6056 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

000d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
   d61ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[1] = {reg};
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d61b0:	2201      	movs	r2, #1
   d61b2:	2300      	movs	r3, #0
   d61b4:	e9cd 2300 	strd	r2, r3, [sp]
   d61b8:	ab03      	add	r3, sp, #12
  uint8_t buffer[1] = {reg};
   d61ba:	f88d 100c 	strb.w	r1, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d61be:	6880      	ldr	r0, [r0, #8]
   d61c0:	4619      	mov	r1, r3
   d61c2:	f7ff fed7 	bl	d5f74 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
  return (byte)buffer[0];
}
   d61c6:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d61ca:	b005      	add	sp, #20
   d61cc:	f85d fb04 	ldr.w	pc, [sp], #4

000d61d0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
   d61d0:	b570      	push	{r4, r5, r6, lr}
   d61d2:	4604      	mov	r4, r0
   d61d4:	460e      	mov	r6, r1
  if (!i2c_dev->begin()) {
   d61d6:	6880      	ldr	r0, [r0, #8]
   d61d8:	2101      	movs	r1, #1
   d61da:	f7ff fe4e 	bl	d5e7a <_ZN18Adafruit_I2CDevice5beginEb>
   d61de:	4605      	mov	r5, r0
   d61e0:	b910      	cbnz	r0, d61e8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x18>
    return false;
   d61e2:	2500      	movs	r5, #0
}
   d61e4:	4628      	mov	r0, r5
   d61e6:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
   d61e8:	2100      	movs	r1, #0
   d61ea:	4620      	mov	r0, r4
   d61ec:	f7ff ffdf 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (id != BNO055_ID) {
   d61f0:	28a0      	cmp	r0, #160	; 0xa0
   d61f2:	d113      	bne.n	d621c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4c>
  setMode(OPERATION_MODE_CONFIG);
   d61f4:	2100      	movs	r1, #0
   d61f6:	4620      	mov	r0, r4
   d61f8:	f7ff ff2d 	bl	d6056 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
   d61fc:	2220      	movs	r2, #32
   d61fe:	213f      	movs	r1, #63	; 0x3f
   d6200:	4620      	mov	r0, r4
   d6202:	f7ff ff17 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
   d6206:	201e      	movs	r0, #30
    delay(10);
   d6208:	f001 feca 	bl	d7fa0 <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
   d620c:	2100      	movs	r1, #0
   d620e:	4620      	mov	r0, r4
   d6210:	f7ff ffcd 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6214:	28a0      	cmp	r0, #160	; 0xa0
   d6216:	d00c      	beq.n	d6232 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x62>
    delay(10);
   d6218:	200a      	movs	r0, #10
   d621a:	e7f5      	b.n	d6208 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x38>
    delay(1000); // hold on for boot
   d621c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6220:	f001 febe 	bl	d7fa0 <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
   d6224:	2100      	movs	r1, #0
   d6226:	4620      	mov	r0, r4
   d6228:	f7ff ffc1 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if (id != BNO055_ID) {
   d622c:	28a0      	cmp	r0, #160	; 0xa0
   d622e:	d1d8      	bne.n	d61e2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x12>
   d6230:	e7e0      	b.n	d61f4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x24>
  delay(50);
   d6232:	2032      	movs	r0, #50	; 0x32
   d6234:	f001 feb4 	bl	d7fa0 <delay>
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
   d6238:	2200      	movs	r2, #0
   d623a:	213e      	movs	r1, #62	; 0x3e
   d623c:	4620      	mov	r0, r4
   d623e:	f7ff fef9 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6242:	200a      	movs	r0, #10
   d6244:	f001 feac 	bl	d7fa0 <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6248:	2200      	movs	r2, #0
   d624a:	2107      	movs	r1, #7
   d624c:	4620      	mov	r0, r4
   d624e:	f7ff fef1 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
   d6252:	2200      	movs	r2, #0
   d6254:	213f      	movs	r1, #63	; 0x3f
   d6256:	4620      	mov	r0, r4
   d6258:	f7ff feec 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d625c:	200a      	movs	r0, #10
   d625e:	f001 fe9f 	bl	d7fa0 <delay>
  setMode(mode);
   d6262:	4620      	mov	r0, r4
   d6264:	4631      	mov	r1, r6
   d6266:	f7ff fef6 	bl	d6056 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   d626a:	2014      	movs	r0, #20
   d626c:	f001 fe98 	bl	d7fa0 <delay>
  return true;
   d6270:	e7b8      	b.n	d61e4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x14>

000d6272 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>:
                                      uint8_t *system_error) {
   d6272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6274:	460f      	mov	r7, r1
   d6276:	4616      	mov	r6, r2
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6278:	2107      	movs	r1, #7
   d627a:	2200      	movs	r2, #0
                                      uint8_t *system_error) {
   d627c:	4604      	mov	r4, r0
   d627e:	461d      	mov	r5, r3
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6280:	f7ff fed8 	bl	d6034 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (system_status != 0)
   d6284:	b127      	cbz	r7, d6290 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x1e>
    *system_status = read8(BNO055_SYS_STAT_ADDR);
   d6286:	2139      	movs	r1, #57	; 0x39
   d6288:	4620      	mov	r0, r4
   d628a:	f7ff ff90 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d628e:	7038      	strb	r0, [r7, #0]
  if (self_test_result != 0)
   d6290:	b126      	cbz	r6, d629c <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x2a>
    *self_test_result = read8(BNO055_SELFTEST_RESULT_ADDR);
   d6292:	2136      	movs	r1, #54	; 0x36
   d6294:	4620      	mov	r0, r4
   d6296:	f7ff ff8a 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d629a:	7030      	strb	r0, [r6, #0]
  if (system_error != 0)
   d629c:	b125      	cbz	r5, d62a8 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x36>
    *system_error = read8(BNO055_SYS_ERR_ADDR);
   d629e:	213a      	movs	r1, #58	; 0x3a
   d62a0:	4620      	mov	r0, r4
   d62a2:	f7ff ff84 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d62a6:	7028      	strb	r0, [r5, #0]
}
   d62a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(200);
   d62ac:	20c8      	movs	r0, #200	; 0xc8
   d62ae:	f001 be77 	b.w	d7fa0 <delay>

000d62b2 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>:
                                     uint8_t *accel, uint8_t *mag) {
   d62b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d62b4:	460e      	mov	r6, r1
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d62b6:	2135      	movs	r1, #53	; 0x35
                                     uint8_t *accel, uint8_t *mag) {
   d62b8:	9f06      	ldr	r7, [sp, #24]
   d62ba:	4615      	mov	r5, r2
   d62bc:	461c      	mov	r4, r3
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d62be:	f7ff ff76 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (sys != NULL) {
   d62c2:	b10e      	cbz	r6, d62c8 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x16>
    *sys = (calData >> 6) & 0x03;
   d62c4:	0983      	lsrs	r3, r0, #6
   d62c6:	7033      	strb	r3, [r6, #0]
  if (gyro != NULL) {
   d62c8:	b115      	cbz	r5, d62d0 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x1e>
    *gyro = (calData >> 4) & 0x03;
   d62ca:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d62ce:	702b      	strb	r3, [r5, #0]
  if (accel != NULL) {
   d62d0:	b114      	cbz	r4, d62d8 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x26>
    *accel = (calData >> 2) & 0x03;
   d62d2:	f3c0 0381 	ubfx	r3, r0, #2, #2
   d62d6:	7023      	strb	r3, [r4, #0]
  if (mag != NULL) {
   d62d8:	b117      	cbz	r7, d62e0 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x2e>
    *mag = calData & 0x03;
   d62da:	f000 0003 	and.w	r0, r0, #3
   d62de:	7038      	strb	r0, [r7, #0]
}
   d62e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d62e2 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>:
bool Adafruit_BNO055::isFullyCalibrated() {
   d62e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d62e4:	4604      	mov	r4, r0
  getCalibration(&system, &gyro, &accel, &mag);
   d62e6:	f10d 030f 	add.w	r3, sp, #15
   d62ea:	9300      	str	r3, [sp, #0]
   d62ec:	f10d 020d 	add.w	r2, sp, #13
   d62f0:	f10d 030e 	add.w	r3, sp, #14
   d62f4:	a903      	add	r1, sp, #12
   d62f6:	f7ff ffdc 	bl	d62b2 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
  switch (_mode) {
   d62fa:	7c23      	ldrb	r3, [r4, #16]
   d62fc:	3b01      	subs	r3, #1
   d62fe:	2b09      	cmp	r3, #9
   d6300:	d817      	bhi.n	d6332 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x50>
   d6302:	e8df f003 	tbb	[pc, r3]
   d6306:	2205      	.short	0x2205
   d6308:	130c1e10 	.word	0x130c1e10
   d630c:	101e0c16 	.word	0x101e0c16
    return (accel == 3);
   d6310:	f89d 000e 	ldrb.w	r0, [sp, #14]
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   d6314:	1ec3      	subs	r3, r0, #3
   d6316:	4258      	negs	r0, r3
   d6318:	4158      	adcs	r0, r3
}
   d631a:	b004      	add	sp, #16
   d631c:	bd10      	pop	{r4, pc}
    return (accel == 3 && gyro == 3);
   d631e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    return (mag == 3 && gyro == 3);
   d6322:	2b03      	cmp	r3, #3
   d6324:	d114      	bne.n	d6350 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6326:	f89d 000d 	ldrb.w	r0, [sp, #13]
   d632a:	e7f3      	b.n	d6314 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
   d632c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d6330:	e7f7      	b.n	d6322 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x40>
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   d6332:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6336:	2b03      	cmp	r3, #3
   d6338:	d10a      	bne.n	d6350 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d633a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d633e:	2b03      	cmp	r3, #3
   d6340:	d106      	bne.n	d6350 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6342:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6346:	2b03      	cmp	r3, #3
   d6348:	d102      	bne.n	d6350 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d634a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   d634e:	e7e1      	b.n	d6314 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
    return (accel == 3 && mag == 3);
   d6350:	2000      	movs	r0, #0
   d6352:	e7e2      	b.n	d631a <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x38>

000d6354 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>:
    adafruit_bno055_offsets_t &offsets_type) {
   d6354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6358:	4604      	mov	r4, r0
   d635a:	460d      	mov	r5, r1
  if (isFullyCalibrated()) {
   d635c:	f7ff ffc1 	bl	d62e2 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d6360:	4606      	mov	r6, r0
   d6362:	2800      	cmp	r0, #0
   d6364:	f000 8091 	beq.w	d648a <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t+0x136>
    setMode(OPERATION_MODE_CONFIG);
   d6368:	2100      	movs	r1, #0
   d636a:	4620      	mov	r0, r4
    adafruit_bno055_opmode_t lastMode = _mode;
   d636c:	f894 8010 	ldrb.w	r8, [r4, #16]
    setMode(OPERATION_MODE_CONFIG);
   d6370:	f7ff fe71 	bl	d6056 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
    delay(25);
   d6374:	2019      	movs	r0, #25
   d6376:	f001 fe13 	bl	d7fa0 <delay>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d637a:	2156      	movs	r1, #86	; 0x56
   d637c:	4620      	mov	r0, r4
   d637e:	f7ff ff16 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   d6382:	2155      	movs	r1, #85	; 0x55
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6384:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   d6386:	4620      	mov	r0, r4
   d6388:	f7ff ff11 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d638c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6390:	8028      	strh	r0, [r5, #0]
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6392:	2158      	movs	r1, #88	; 0x58
   d6394:	4620      	mov	r0, r4
   d6396:	f7ff ff0a 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   d639a:	2157      	movs	r1, #87	; 0x57
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d639c:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   d639e:	4620      	mov	r0, r4
   d63a0:	f7ff ff05 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d63a4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d63a8:	8068      	strh	r0, [r5, #2]
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d63aa:	215a      	movs	r1, #90	; 0x5a
   d63ac:	4620      	mov	r0, r4
   d63ae:	f7ff fefe 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   d63b2:	2159      	movs	r1, #89	; 0x59
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d63b4:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   d63b6:	4620      	mov	r0, r4
   d63b8:	f7ff fef9 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d63bc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d63c0:	80a8      	strh	r0, [r5, #4]
        (read8(MAG_OFFSET_X_MSB_ADDR) << 8) | (read8(MAG_OFFSET_X_LSB_ADDR));
   d63c2:	215c      	movs	r1, #92	; 0x5c
   d63c4:	4620      	mov	r0, r4
   d63c6:	f7ff fef2 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d63ca:	215b      	movs	r1, #91	; 0x5b
   d63cc:	4607      	mov	r7, r0
   d63ce:	4620      	mov	r0, r4
   d63d0:	f7ff feed 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d63d4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_x =
   d63d8:	80e8      	strh	r0, [r5, #6]
        (read8(MAG_OFFSET_Y_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Y_LSB_ADDR));
   d63da:	215e      	movs	r1, #94	; 0x5e
   d63dc:	4620      	mov	r0, r4
   d63de:	f7ff fee6 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d63e2:	215d      	movs	r1, #93	; 0x5d
   d63e4:	4607      	mov	r7, r0
   d63e6:	4620      	mov	r0, r4
   d63e8:	f7ff fee1 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d63ec:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_y =
   d63f0:	8128      	strh	r0, [r5, #8]
        (read8(MAG_OFFSET_Z_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Z_LSB_ADDR));
   d63f2:	2160      	movs	r1, #96	; 0x60
   d63f4:	4620      	mov	r0, r4
   d63f6:	f7ff feda 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d63fa:	215f      	movs	r1, #95	; 0x5f
   d63fc:	4607      	mov	r7, r0
   d63fe:	4620      	mov	r0, r4
   d6400:	f7ff fed5 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6404:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_z =
   d6408:	8168      	strh	r0, [r5, #10]
        (read8(GYRO_OFFSET_X_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_X_LSB_ADDR));
   d640a:	2162      	movs	r1, #98	; 0x62
   d640c:	4620      	mov	r0, r4
   d640e:	f7ff fece 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6412:	2161      	movs	r1, #97	; 0x61
   d6414:	4607      	mov	r7, r0
   d6416:	4620      	mov	r0, r4
   d6418:	f7ff fec9 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d641c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_x =
   d6420:	81a8      	strh	r0, [r5, #12]
        (read8(GYRO_OFFSET_Y_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Y_LSB_ADDR));
   d6422:	2164      	movs	r1, #100	; 0x64
   d6424:	4620      	mov	r0, r4
   d6426:	f7ff fec2 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d642a:	2163      	movs	r1, #99	; 0x63
   d642c:	4607      	mov	r7, r0
   d642e:	4620      	mov	r0, r4
   d6430:	f7ff febd 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6434:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_y =
   d6438:	81e8      	strh	r0, [r5, #14]
        (read8(GYRO_OFFSET_Z_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Z_LSB_ADDR));
   d643a:	2166      	movs	r1, #102	; 0x66
   d643c:	4620      	mov	r0, r4
   d643e:	f7ff feb6 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6442:	2165      	movs	r1, #101	; 0x65
   d6444:	4607      	mov	r7, r0
   d6446:	4620      	mov	r0, r4
   d6448:	f7ff feb1 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d644c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_z =
   d6450:	8228      	strh	r0, [r5, #16]
        (read8(ACCEL_RADIUS_MSB_ADDR) << 8) | (read8(ACCEL_RADIUS_LSB_ADDR));
   d6452:	2168      	movs	r1, #104	; 0x68
   d6454:	4620      	mov	r0, r4
   d6456:	f7ff feaa 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d645a:	2167      	movs	r1, #103	; 0x67
   d645c:	4607      	mov	r7, r0
   d645e:	4620      	mov	r0, r4
   d6460:	f7ff fea5 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6464:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.accel_radius =
   d6468:	8268      	strh	r0, [r5, #18]
        (read8(MAG_RADIUS_MSB_ADDR) << 8) | (read8(MAG_RADIUS_LSB_ADDR));
   d646a:	216a      	movs	r1, #106	; 0x6a
   d646c:	4620      	mov	r0, r4
   d646e:	f7ff fe9e 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6472:	2169      	movs	r1, #105	; 0x69
   d6474:	4607      	mov	r7, r0
   d6476:	4620      	mov	r0, r4
   d6478:	f7ff fe99 	bl	d61ae <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d647c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_radius =
   d6480:	82a8      	strh	r0, [r5, #20]
    setMode(lastMode);
   d6482:	4641      	mov	r1, r8
   d6484:	4620      	mov	r0, r4
   d6486:	f7ff fde6 	bl	d6056 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d648a:	4630      	mov	r0, r6
   d648c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6490 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte *buffer,
                              uint8_t len) {
   d6490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t reg_buf[1] = {(uint8_t)reg};
   d6492:	f88d 100c 	strb.w	r1, [sp, #12]
  return i2c_dev->write_then_read(reg_buf, 1, buffer, len);
   d6496:	2100      	movs	r1, #0
   d6498:	e9cd 3100 	strd	r3, r1, [sp]
   d649c:	4613      	mov	r3, r2
   d649e:	a903      	add	r1, sp, #12
   d64a0:	2201      	movs	r2, #1
   d64a2:	6880      	ldr	r0, [r0, #8]
   d64a4:	f7ff fd66 	bl	d5f74 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
}
   d64a8:	b005      	add	sp, #20
   d64aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d64b0 <_ZN15Adafruit_BNO0557getQuatEv>:
imu::Quaternion Adafruit_BNO055::getQuat() {
   d64b0:	b500      	push	{lr}
   d64b2:	ed2d 8b06 	vpush	{d8-d10}
  memset(buffer, 0, 8);
   d64b6:	2300      	movs	r3, #0
imu::Quaternion Adafruit_BNO055::getQuat() {
   d64b8:	b093      	sub	sp, #76	; 0x4c
  readLen(BNO055_QUATERNION_DATA_W_LSB_ADDR, buffer, 8);
   d64ba:	aa08      	add	r2, sp, #32
  memset(buffer, 0, 8);
   d64bc:	e9cd 3308 	strd	r3, r3, [sp, #32]
  readLen(BNO055_QUATERNION_DATA_W_LSB_ADDR, buffer, 8);
   d64c0:	2120      	movs	r1, #32
   d64c2:	2308      	movs	r3, #8
   d64c4:	f7ff ffe4 	bl	d6490 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  x = (((uint16_t)buffer[3]) << 8) | ((uint16_t)buffer[2]);
   d64c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d64cc:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   d64d0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d64d4:	b200      	sxth	r0, r0
   d64d6:	f003 fcff 	bl	d9ed8 <__aeabi_i2d>
   d64da:	2200      	movs	r2, #0
   d64dc:	4b21      	ldr	r3, [pc, #132]	; (d6564 <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d64de:	f003 fd65 	bl	d9fac <__aeabi_dmul>
  y = (((uint16_t)buffer[5]) << 8) | ((uint16_t)buffer[4]);
   d64e2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d64e6:	ec41 0b1a 	vmov	d10, r0, r1
  y = (((uint16_t)buffer[5]) << 8) | ((uint16_t)buffer[4]);
   d64ea:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   d64ee:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d64f2:	b200      	sxth	r0, r0
   d64f4:	f003 fcf0 	bl	d9ed8 <__aeabi_i2d>
   d64f8:	2200      	movs	r2, #0
   d64fa:	4b1a      	ldr	r3, [pc, #104]	; (d6564 <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d64fc:	f003 fd56 	bl	d9fac <__aeabi_dmul>
  z = (((uint16_t)buffer[7]) << 8) | ((uint16_t)buffer[6]);
   d6500:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6504:	ec41 0b19 	vmov	d9, r0, r1
  z = (((uint16_t)buffer[7]) << 8) | ((uint16_t)buffer[6]);
   d6508:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   d650c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6510:	b200      	sxth	r0, r0
   d6512:	f003 fce1 	bl	d9ed8 <__aeabi_i2d>
   d6516:	2200      	movs	r2, #0
   d6518:	4b12      	ldr	r3, [pc, #72]	; (d6564 <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d651a:	f003 fd47 	bl	d9fac <__aeabi_dmul>
  w = (((uint16_t)buffer[1]) << 8) | ((uint16_t)buffer[0]);
   d651e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6522:	ec41 0b18 	vmov	d8, r0, r1
  w = (((uint16_t)buffer[1]) << 8) | ((uint16_t)buffer[0]);
   d6526:	f89d 0020 	ldrb.w	r0, [sp, #32]
   d652a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d652e:	b200      	sxth	r0, r0
   d6530:	f003 fcd2 	bl	d9ed8 <__aeabi_i2d>
   d6534:	4b0b      	ldr	r3, [pc, #44]	; (d6564 <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d6536:	2200      	movs	r2, #0
   d6538:	f003 fd38 	bl	d9fac <__aeabi_dmul>
}
   d653c:	eeb0 1a4a 	vmov.f32	s2, s20
   d6540:	eef0 1a6a 	vmov.f32	s3, s21
   d6544:	eeb0 2a49 	vmov.f32	s4, s18
   d6548:	eef0 2a69 	vmov.f32	s5, s19
   d654c:	ec41 0b10 	vmov	d0, r0, r1
   d6550:	eeb0 3a48 	vmov.f32	s6, s16
   d6554:	eef0 3a68 	vmov.f32	s7, s17
   d6558:	b013      	add	sp, #76	; 0x4c
   d655a:	ecbd 8b06 	vpop	{d8-d10}
   d655e:	f85d fb04 	ldr.w	pc, [sp], #4
   d6562:	bf00      	nop
   d6564:	3f100000 	.word	0x3f100000

000d6568 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
   d6568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d656a:	460d      	mov	r5, r1
   d656c:	4616      	mov	r6, r2

namespace imu {

template <uint8_t N> class Vector {
public:
  Vector() { memset(p_vec, 0, sizeof(double) * N); }
   d656e:	2100      	movs	r1, #0
   d6570:	2218      	movs	r2, #24
   d6572:	4604      	mov	r4, r0
   d6574:	f004 fb38 	bl	dabe8 <memset>
  memset(buffer, 0, 6);
   d6578:	2300      	movs	r3, #0
   d657a:	9300      	str	r3, [sp, #0]
   d657c:	f8ad 3004 	strh.w	r3, [sp, #4]
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
   d6580:	4628      	mov	r0, r5
   d6582:	2306      	movs	r3, #6
   d6584:	466a      	mov	r2, sp
   d6586:	4631      	mov	r1, r6
   d6588:	f7ff ff82 	bl	d6490 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d658c:	f89d 3001 	ldrb.w	r3, [sp, #1]
   d6590:	f89d 0000 	ldrb.w	r0, [sp]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6594:	f89d 7002 	ldrb.w	r7, [sp, #2]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6598:	f89d 5004 	ldrb.w	r5, [sp, #4]
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d659c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d65a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d65a4:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d65a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
  switch (vector_type) {
   d65ac:	2e1a      	cmp	r6, #26
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d65ae:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d65b2:	b200      	sxth	r0, r0
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d65b4:	b23f      	sxth	r7, r7
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d65b6:	b22d      	sxth	r5, r5
  switch (vector_type) {
   d65b8:	d00d      	beq.n	d65d6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d65ba:	d808      	bhi.n	d65ce <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x66>
   d65bc:	2e0e      	cmp	r6, #14
   d65be:	d00a      	beq.n	d65d6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d65c0:	2e14      	cmp	r6, #20
   d65c2:	d008      	beq.n	d65d6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d65c4:	2e08      	cmp	r6, #8
   d65c6:	d021      	beq.n	d660c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
}
   d65c8:	4620      	mov	r0, r4
   d65ca:	b003      	add	sp, #12
   d65cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (vector_type) {
   d65ce:	2e28      	cmp	r6, #40	; 0x28
   d65d0:	d01c      	beq.n	d660c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
   d65d2:	2e2e      	cmp	r6, #46	; 0x2e
   d65d4:	e7f7      	b.n	d65c6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5e>
    xyz[0] = ((double)x) / 16.0;
   d65d6:	f003 fc7f 	bl	d9ed8 <__aeabi_i2d>
   d65da:	4b19      	ldr	r3, [pc, #100]	; (d6640 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d65dc:	2200      	movs	r2, #0
   d65de:	f003 fce5 	bl	d9fac <__aeabi_dmul>
   d65e2:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 16.0;
   d65e6:	4638      	mov	r0, r7
   d65e8:	f003 fc76 	bl	d9ed8 <__aeabi_i2d>
   d65ec:	4b14      	ldr	r3, [pc, #80]	; (d6640 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d65ee:	2200      	movs	r2, #0
   d65f0:	f003 fcdc 	bl	d9fac <__aeabi_dmul>
   d65f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 16.0;
   d65f8:	4628      	mov	r0, r5
   d65fa:	f003 fc6d 	bl	d9ed8 <__aeabi_i2d>
   d65fe:	4b10      	ldr	r3, [pc, #64]	; (d6640 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6600:	2200      	movs	r2, #0
   d6602:	f003 fcd3 	bl	d9fac <__aeabi_dmul>
    xyz[2] = ((double)z) / 100.0;
   d6606:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return xyz;
   d660a:	e7dd      	b.n	d65c8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x60>
    xyz[0] = ((double)x) / 100.0;
   d660c:	f003 fc64 	bl	d9ed8 <__aeabi_i2d>
   d6610:	4b0c      	ldr	r3, [pc, #48]	; (d6644 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6612:	2200      	movs	r2, #0
   d6614:	f003 fdf4 	bl	da200 <__aeabi_ddiv>
   d6618:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 100.0;
   d661c:	4638      	mov	r0, r7
   d661e:	f003 fc5b 	bl	d9ed8 <__aeabi_i2d>
   d6622:	4b08      	ldr	r3, [pc, #32]	; (d6644 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6624:	2200      	movs	r2, #0
   d6626:	f003 fdeb 	bl	da200 <__aeabi_ddiv>
   d662a:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 100.0;
   d662e:	4628      	mov	r0, r5
   d6630:	f003 fc52 	bl	d9ed8 <__aeabi_i2d>
   d6634:	4b03      	ldr	r3, [pc, #12]	; (d6644 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6636:	2200      	movs	r2, #0
   d6638:	f003 fde2 	bl	da200 <__aeabi_ddiv>
   d663c:	e7e3      	b.n	d6606 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9e>
   d663e:	bf00      	nop
   d6640:	3fb00000 	.word	0x3fb00000
   d6644:	40590000 	.word	0x40590000

000d6648 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
   d6648:	b530      	push	{r4, r5, lr}
   d664a:	460c      	mov	r4, r1
   d664c:	b087      	sub	sp, #28
   d664e:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   d6650:	2220      	movs	r2, #32
   d6652:	2100      	movs	r1, #0
   d6654:	1d20      	adds	r0, r4, #4
   d6656:	f004 fac7 	bl	dabe8 <memset>
  event->version = sizeof(sensors_event_t);
   d665a:	2324      	movs	r3, #36	; 0x24
   d665c:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d665e:	68eb      	ldr	r3, [r5, #12]
   d6660:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_ORIENTATION;
   d6662:	2303      	movs	r3, #3
   d6664:	60a3      	str	r3, [r4, #8]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6666:	f000 ffc9 	bl	d75fc <HAL_Timer_Get_Milli_Seconds>
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d666a:	221a      	movs	r2, #26
  event->timestamp = millis();
   d666c:	6120      	str	r0, [r4, #16]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d666e:	4629      	mov	r1, r5
   d6670:	4668      	mov	r0, sp
   d6672:	f7ff ff79 	bl	d6568 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
   d6676:	e9dd 0100 	ldrd	r0, r1, [sp]
   d667a:	f003 ff8f 	bl	da59c <__aeabi_d2f>
   d667e:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
   d6680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6684:	f003 ff8a 	bl	da59c <__aeabi_d2f>
   d6688:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
   d668a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d668e:	f003 ff85 	bl	da59c <__aeabi_d2f>
   d6692:	61e0      	str	r0, [r4, #28]
}
   d6694:	2001      	movs	r0, #1
   d6696:	b007      	add	sp, #28
   d6698:	bd30      	pop	{r4, r5, pc}

000d669a <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d669a:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d669c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d669e:	db66      	blt.n	d676e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d66a0:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d66a4:	428c      	cmp	r4, r1
   d66a6:	dd62      	ble.n	d676e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d66a8:	2a00      	cmp	r2, #0
   d66aa:	db60      	blt.n	d676e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d66ac:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d66b0:	4294      	cmp	r4, r2
   d66b2:	dd5c      	ble.n	d676e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   d66b4:	7e84      	ldrb	r4, [r0, #26]
   d66b6:	2c02      	cmp	r4, #2
   d66b8:	d05a      	beq.n	d6770 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   d66ba:	2c03      	cmp	r4, #3
   d66bc:	d061      	beq.n	d6782 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   d66be:	2c01      	cmp	r4, #1
   d66c0:	d104      	bne.n	d66cc <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   d66c2:	8904      	ldrh	r4, [r0, #8]
   d66c4:	43d2      	mvns	r2, r2
   d66c6:	4414      	add	r4, r2
      break;
   d66c8:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d66ca:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   d66cc:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   d66d0:	428c      	cmp	r4, r1
   d66d2:	bfa8      	it	ge
   d66d4:	460c      	movge	r4, r1
   d66d6:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   d66d8:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   d66dc:	4294      	cmp	r4, r2
   d66de:	bfa8      	it	ge
   d66e0:	4614      	movge	r4, r2
   d66e2:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   d66e4:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   d66e8:	428c      	cmp	r4, r1
   d66ea:	bfb8      	it	lt
   d66ec:	460c      	movlt	r4, r1
   d66ee:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   d66f0:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   d66f4:	4294      	cmp	r4, r2
   d66f6:	bfb8      	it	lt
   d66f8:	4614      	movlt	r4, r2
   d66fa:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   d66fc:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d6700:	2c01      	cmp	r4, #1
   d6702:	d116      	bne.n	d6732 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   d6704:	2b01      	cmp	r3, #1
   d6706:	d042      	beq.n	d678e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   d6708:	2b02      	cmp	r3, #2
   d670a:	d051      	beq.n	d67b0 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   d670c:	b98b      	cbnz	r3, d6732 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   d670e:	2a00      	cmp	r2, #0
   d6710:	8905      	ldrh	r5, [r0, #8]
   d6712:	6b47      	ldr	r7, [r0, #52]	; 0x34
   d6714:	4614      	mov	r4, r2
   d6716:	bfb8      	it	lt
   d6718:	1dd4      	addlt	r4, r2, #7
   d671a:	10e4      	asrs	r4, r4, #3
   d671c:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6720:	f002 0607 	and.w	r6, r2, #7
   d6724:	2501      	movs	r5, #1
   d6726:	fa05 f606 	lsl.w	r6, r5, r6
   d672a:	5d3d      	ldrb	r5, [r7, r4]
   d672c:	ea25 0506 	bic.w	r5, r5, r6
   d6730:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   d6732:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d6736:	2c04      	cmp	r4, #4
   d6738:	d119      	bne.n	d676e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   d673a:	8904      	ldrh	r4, [r0, #8]
   d673c:	fb14 f202 	smulbb	r2, r4, r2
   d6740:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   d6744:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   d6748:	f342 024f 	sbfx	r2, r2, #1, #16
   d674c:	eb02 0264 	add.w	r2, r2, r4, asr #1
   d6750:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
   d6752:	5ca0      	ldrb	r0, [r4, r2]
   d6754:	07c9      	lsls	r1, r1, #31
        uint8_t t = pixelptr[0] & 0x0F;
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   d6756:	bf4b      	itete	mi
   d6758:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   d675c:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   d6760:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   d6764:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   d6768:	bf48      	it	mi
   d676a:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   d676c:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   d676e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   d6770:	8904      	ldrh	r4, [r0, #8]
   d6772:	43c9      	mvns	r1, r1
   d6774:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d6776:	8944      	ldrh	r4, [r0, #10]
   d6778:	43d2      	mvns	r2, r2
   d677a:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   d677c:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d677e:	b212      	sxth	r2, r2
      break;
   d6780:	e7a4      	b.n	d66cc <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d6782:	8944      	ldrh	r4, [r0, #10]
   d6784:	43c9      	mvns	r1, r1
   d6786:	440c      	add	r4, r1
      break;
   d6788:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d678a:	b222      	sxth	r2, r4
      break;
   d678c:	e79e      	b.n	d66cc <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   d678e:	2a00      	cmp	r2, #0
   d6790:	8905      	ldrh	r5, [r0, #8]
   d6792:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d6794:	4614      	mov	r4, r2
   d6796:	bfb8      	it	lt
   d6798:	1dd4      	addlt	r4, r2, #7
   d679a:	10e4      	asrs	r4, r4, #3
   d679c:	fb14 1405 	smlabb	r4, r4, r5, r1
   d67a0:	f002 0707 	and.w	r7, r2, #7
   d67a4:	2501      	movs	r5, #1
   d67a6:	40bd      	lsls	r5, r7
   d67a8:	5d37      	ldrb	r7, [r6, r4]
   d67aa:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d67ac:	5535      	strb	r5, [r6, r4]
        break;
   d67ae:	e7c0      	b.n	d6732 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d67b0:	2a00      	cmp	r2, #0
   d67b2:	8905      	ldrh	r5, [r0, #8]
   d67b4:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d67b6:	4614      	mov	r4, r2
   d67b8:	bfb8      	it	lt
   d67ba:	1dd4      	addlt	r4, r2, #7
   d67bc:	10e4      	asrs	r4, r4, #3
   d67be:	fb14 1405 	smlabb	r4, r4, r5, r1
   d67c2:	f002 0707 	and.w	r7, r2, #7
   d67c6:	2501      	movs	r5, #1
   d67c8:	40bd      	lsls	r5, r7
   d67ca:	5d37      	ldrb	r7, [r6, r4]
   d67cc:	407d      	eors	r5, r7
   d67ce:	e7ed      	b.n	d67ac <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

000d67d0 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   d67d0:	b538      	push	{r3, r4, r5, lr}
   d67d2:	460d      	mov	r5, r1
   d67d4:	4611      	mov	r1, r2
   d67d6:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d67d8:	b21a      	sxth	r2, r3
   d67da:	b209      	sxth	r1, r1
   d67dc:	f000 fa96 	bl	d6d0c <_ZN12Adafruit_GFXC1Ess>
   d67e0:	9a06      	ldr	r2, [sp, #24]
   d67e2:	4b0b      	ldr	r3, [pc, #44]	; (d6810 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   d67e4:	62e2      	str	r2, [r4, #44]	; 0x2c
   d67e6:	9a07      	ldr	r2, [sp, #28]
   d67e8:	6023      	str	r3, [r4, #0]
   d67ea:	2300      	movs	r3, #0
   d67ec:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   d67f0:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   d67f4:	f04f 33ff 	mov.w	r3, #4294967295
   d67f8:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   d67fc:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   d6800:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   d6802:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d6804:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   d6808:	6523      	str	r3, [r4, #80]	; 0x50
}
   d680a:	4620      	mov	r0, r4
   d680c:	bd38      	pop	{r3, r4, r5, pc}
   d680e:	bf00      	nop
   d6810:	000db470 	.word	0x000db470

000d6814 <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   d6814:	b538      	push	{r3, r4, r5, lr}
   d6816:	4b0c      	ldr	r3, [pc, #48]	; (d6848 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   d6818:	6003      	str	r3, [r0, #0]
   d681a:	4604      	mov	r4, r0
  if (buffer) {
   d681c:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d681e:	b118      	cbz	r0, d6828 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   d6820:	f001 f8f0 	bl	d7a04 <free>
    buffer = NULL;
   d6824:	2300      	movs	r3, #0
   d6826:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   d6828:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d682a:	b135      	cbz	r5, d683a <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   d682c:	4628      	mov	r0, r5
   d682e:	f7ff f9db 	bl	d5be8 <_ZN18Adafruit_SPIDeviceD1Ev>
   d6832:	2138      	movs	r1, #56	; 0x38
   d6834:	4628      	mov	r0, r5
   d6836:	f002 f85b 	bl	d88f0 <_ZdlPvj>
  if (i2c_dev)
   d683a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d683c:	b110      	cbz	r0, d6844 <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   d683e:	2110      	movs	r1, #16
   d6840:	f002 f856 	bl	d88f0 <_ZdlPvj>
}
   d6844:	4620      	mov	r0, r4
   d6846:	bd38      	pop	{r3, r4, r5, pc}
   d6848:	000db470 	.word	0x000db470

000d684c <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d684c:	b530      	push	{r4, r5, lr}
   d684e:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   d6850:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d6852:	f88d 100f 	strb.w	r1, [sp, #15]
   d6856:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   d6858:	b17d      	cbz	r5, d687a <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d685a:	2300      	movs	r3, #0
   d685c:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   d685e:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d6862:	f88d 3014 	strb.w	r3, [sp, #20]
   d6866:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   d686a:	2301      	movs	r3, #1
   d686c:	2202      	movs	r2, #2
   d686e:	a905      	add	r1, sp, #20
   d6870:	4628      	mov	r0, r5
   d6872:	f7ff fb11 	bl	d5e98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d6876:	b007      	add	sp, #28
   d6878:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   d687a:	4629      	mov	r1, r5
   d687c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d6880:	f001 ff9f 	bl	d87c2 <digitalWrite>
    spi_dev->write(&c, 1);
   d6884:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6886:	9500      	str	r5, [sp, #0]
   d6888:	462b      	mov	r3, r5
   d688a:	2201      	movs	r2, #1
   d688c:	f10d 010f 	add.w	r1, sp, #15
   d6890:	f7ff faa5 	bl	d5dde <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   d6894:	e7ef      	b.n	d6876 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000d6896 <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   d6896:	2900      	cmp	r1, #0
   d6898:	bf14      	ite	ne
   d689a:	21a7      	movne	r1, #167	; 0xa7
   d689c:	21a6      	moveq	r1, #166	; 0xa6
   d689e:	f7ff bfd5 	b.w	d684c <_ZN17Adafruit_GrayOLED12oled_commandEh>

000d68a2 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d68a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   d68a4:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d68a6:	b085      	sub	sp, #20
   d68a8:	4604      	mov	r4, r0
   d68aa:	460e      	mov	r6, r1
   d68ac:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   d68ae:	b165      	cbz	r5, d68ca <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d68b0:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d68b2:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d68b6:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d68ba:	2301      	movs	r3, #1
   d68bc:	9000      	str	r0, [sp, #0]
   d68be:	9301      	str	r3, [sp, #4]
   d68c0:	4628      	mov	r0, r5
   d68c2:	f7ff fae9 	bl	d5e98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d68c6:	b005      	add	sp, #20
   d68c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   d68ca:	4629      	mov	r1, r5
   d68cc:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d68d0:	f001 ff77 	bl	d87c2 <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   d68d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d68d6:	9500      	str	r5, [sp, #0]
   d68d8:	462b      	mov	r3, r5
   d68da:	463a      	mov	r2, r7
   d68dc:	4631      	mov	r1, r6
   d68de:	f7ff fa7e 	bl	d5dde <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d68e2:	e7f0      	b.n	d68c6 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000d68e4 <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   d68e4:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d68e6:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   d68ea:	8903      	ldrh	r3, [r0, #8]
   d68ec:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   d68f0:	fb12 f203 	smulbb	r2, r2, r3
   d68f4:	1dcb      	adds	r3, r1, #7
   d68f6:	bf48      	it	mi
   d68f8:	f101 030e 	addmi.w	r3, r1, #14
   d68fc:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   d68fe:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d6900:	435a      	muls	r2, r3
   d6902:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6904:	2100      	movs	r1, #0
   d6906:	f004 f96f 	bl	dabe8 <memset>
  window_x1 = 0;
   d690a:	2300      	movs	r3, #0
   d690c:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d690e:	8923      	ldrh	r3, [r4, #8]
   d6910:	3b01      	subs	r3, #1
   d6912:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d6914:	8963      	ldrh	r3, [r4, #10]
   d6916:	3b01      	subs	r3, #1
   d6918:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   d691a:	bd10      	pop	{r4, pc}

000d691c <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d691c:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   d691e:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d6920:	4604      	mov	r4, r0
   d6922:	460e      	mov	r6, r1
   d6924:	4615      	mov	r5, r2
  if ((!buffer) &&
   d6926:	b30b      	cbz	r3, d696c <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   d6928:	2d00      	cmp	r5, #0
   d692a:	d133      	bne.n	d6994 <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   d692c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d692e:	2b00      	cmp	r3, #0
   d6930:	d050      	beq.n	d69d4 <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   d6932:	2010      	movs	r0, #16
   d6934:	f7fd fbaf 	bl	d4096 <_Znwj>
   d6938:	4605      	mov	r5, r0
   d693a:	b118      	cbz	r0, d6944 <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   d693c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d693e:	4631      	mov	r1, r6
   d6940:	f7ff fa7f 	bl	d5e42 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d6944:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   d6946:	b31d      	cbz	r5, d6990 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d6948:	2101      	movs	r1, #1
   d694a:	4628      	mov	r0, r5
   d694c:	f7ff fa95 	bl	d5e7a <_ZN18Adafruit_I2CDevice5beginEb>
   d6950:	b1f0      	cbz	r0, d6990 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   d6952:	4620      	mov	r0, r4
   d6954:	f7ff ffc6 	bl	d68e4 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   d6958:	2300      	movs	r3, #0
   d695a:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d695c:	8923      	ldrh	r3, [r4, #8]
   d695e:	3b01      	subs	r3, #1
   d6960:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d6962:	8963      	ldrh	r3, [r4, #10]
   d6964:	3b01      	subs	r3, #1
   d6966:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   d6968:	2001      	movs	r0, #1
   d696a:	e012      	b.n	d6992 <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   d696c:	8923      	ldrh	r3, [r4, #8]
   d696e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   d6972:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   d6976:	fb10 f003 	smulbb	r0, r0, r3
   d697a:	1dd3      	adds	r3, r2, #7
   d697c:	bf48      	it	mi
   d697e:	f102 030e 	addmi.w	r3, r2, #14
   d6982:	10db      	asrs	r3, r3, #3
   d6984:	4358      	muls	r0, r3
   d6986:	f001 f835 	bl	d79f4 <malloc>
   d698a:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   d698c:	2800      	cmp	r0, #0
   d698e:	d1cb      	bne.n	d6928 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   d6990:	2000      	movs	r0, #0
}
   d6992:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   d6994:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d6996:	2800      	cmp	r0, #0
   d6998:	dbc8      	blt.n	d692c <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   d699a:	2101      	movs	r1, #1
   d699c:	b280      	uxth	r0, r0
   d699e:	f001 feff 	bl	d87a0 <pinMode>
    digitalWrite(rstPin, HIGH);
   d69a2:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d69a6:	2101      	movs	r1, #1
   d69a8:	f001 ff0b 	bl	d87c2 <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   d69ac:	200a      	movs	r0, #10
   d69ae:	f001 faf7 	bl	d7fa0 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d69b2:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d69b6:	2100      	movs	r1, #0
   d69b8:	f001 ff03 	bl	d87c2 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d69bc:	200a      	movs	r0, #10
   d69be:	f001 faef 	bl	d7fa0 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d69c2:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d69c6:	2101      	movs	r1, #1
   d69c8:	f001 fefb 	bl	d87c2 <digitalWrite>
    delay(10);
   d69cc:	200a      	movs	r0, #10
   d69ce:	f001 fae7 	bl	d7fa0 <delay>
   d69d2:	e7ab      	b.n	d692c <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   d69d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d69d6:	2800      	cmp	r0, #0
   d69d8:	d0da      	beq.n	d6990 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d69da:	f7ff f90e 	bl	d5bfa <_ZN18Adafruit_SPIDevice5beginEv>
   d69de:	2800      	cmp	r0, #0
   d69e0:	d0d6      	beq.n	d6990 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d69e2:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d69e6:	2101      	movs	r1, #1
   d69e8:	f001 feda 	bl	d87a0 <pinMode>
   d69ec:	e7b1      	b.n	d6952 <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000d69ee <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   d69ee:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d69f0:	2381      	movs	r3, #129	; 0x81
   d69f2:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   d69f6:	2202      	movs	r2, #2
   d69f8:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d69fa:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   d69fe:	f7ff ff50 	bl	d68a2 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   d6a02:	b003      	add	sp, #12
   d6a04:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a08 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
   d6a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6a0c:	b085      	sub	sp, #20
   d6a0e:	461f      	mov	r7, r3
   d6a10:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d6a14:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d6a18:	eba8 0902 	sub.w	r9, r8, r2
   d6a1c:	eba7 0a01 	sub.w	sl, r7, r1
   d6a20:	f1b9 0f00 	cmp.w	r9, #0
   d6a24:	bfb8      	it	lt
   d6a26:	f1c9 0900 	rsblt	r9, r9, #0
   d6a2a:	f1ba 0f00 	cmp.w	sl, #0
   d6a2e:	bfb8      	it	lt
   d6a30:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d6a34:	45d1      	cmp	r9, sl
                             uint16_t color) {
   d6a36:	4683      	mov	fp, r0
   d6a38:	460c      	mov	r4, r1
   d6a3a:	4615      	mov	r5, r2
  if (steep) {
   d6a3c:	dd04      	ble.n	d6a48 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d6a3e:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
   d6a40:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
   d6a42:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
   d6a44:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
   d6a46:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d6a48:	42bc      	cmp	r4, r7
   d6a4a:	dd05      	ble.n	d6a58 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d6a4c:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
   d6a4e:	4645      	mov	r5, r8
   d6a50:	4690      	mov	r8, r2
  if (x0 > x1) {
   d6a52:	4622      	mov	r2, r4
   d6a54:	463c      	mov	r4, r7
   d6a56:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d6a58:	1b3e      	subs	r6, r7, r4
   d6a5a:	b2b2      	uxth	r2, r6
   d6a5c:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d6a5e:	eba8 0205 	sub.w	r2, r8, r5
   d6a62:	2a00      	cmp	r2, #0
   d6a64:	bfb8      	it	lt
   d6a66:	4252      	neglt	r2, r2
   d6a68:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d6a6a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d6a6e:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d6a72:	4545      	cmp	r5, r8
   d6a74:	bfb4      	ite	lt
   d6a76:	2201      	movlt	r2, #1
   d6a78:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d6a7c:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d6a7e:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
   d6a80:	42bc      	cmp	r4, r7
   d6a82:	dc1c      	bgt.n	d6abe <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
    if (steep) {
   d6a84:	f8db 2000 	ldr.w	r2, [fp]
      writePixel(y0, x0, color);
   d6a88:	9303      	str	r3, [sp, #12]
    if (steep) {
   d6a8a:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
   d6a8c:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d6a90:	bfc7      	ittee	gt
   d6a92:	4629      	movgt	r1, r5
   d6a94:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
   d6a96:	462a      	movle	r2, r5
   d6a98:	4621      	movle	r1, r4
   d6a9a:	4658      	mov	r0, fp
   d6a9c:	47c0      	blx	r8
    }
    err -= dy;
   d6a9e:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
   d6aa0:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d6aa2:	1ab6      	subs	r6, r6, r2
   d6aa4:	b2b1      	uxth	r1, r6
   d6aa6:	b236      	sxth	r6, r6
    if (err < 0) {
   d6aa8:	2e00      	cmp	r6, #0
   d6aaa:	da05      	bge.n	d6ab8 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
      y0 += ystep;
   d6aac:	9a02      	ldr	r2, [sp, #8]
   d6aae:	4415      	add	r5, r2
      err += dx;
   d6ab0:	9a00      	ldr	r2, [sp, #0]
   d6ab2:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d6ab4:	b22d      	sxth	r5, r5
      err += dx;
   d6ab6:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
   d6ab8:	3401      	adds	r4, #1
   d6aba:	b224      	sxth	r4, r4
   d6abc:	e7e0      	b.n	d6a80 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
    }
  }
}
   d6abe:	b005      	add	sp, #20
   d6ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6ac4 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
   d6ac4:	4770      	bx	lr

000d6ac6 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
   d6ac6:	b410      	push	{r4}
  drawPixel(x, y, color);
   d6ac8:	6804      	ldr	r4, [r0, #0]
   d6aca:	6924      	ldr	r4, [r4, #16]
   d6acc:	46a4      	mov	ip, r4
}
   d6ace:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
   d6ad2:	4760      	bx	ip

000d6ad4 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
   d6ad4:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
   d6ad6:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d6ad8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
   d6adc:	9502      	str	r5, [sp, #8]
   d6ade:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d6ae0:	46a4      	mov	ip, r4
}
   d6ae2:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
   d6ae4:	4760      	bx	ip

000d6ae6 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
   d6ae6:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
   d6ae8:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d6aea:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
   d6aee:	9502      	str	r5, [sp, #8]
   d6af0:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d6af2:	46a4      	mov	ip, r4
}
   d6af4:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
   d6af6:	4760      	bx	ip

000d6af8 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
   d6af8:	b470      	push	{r4, r5, r6}
   d6afa:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d6afe:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
   d6b02:	6804      	ldr	r4, [r0, #0]
   d6b04:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d6b08:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d6b0a:	46a4      	mov	ip, r4
}
   d6b0c:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
   d6b0e:	4760      	bx	ip

000d6b10 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
   d6b10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6b14:	461c      	mov	r4, r3
  startWrite();
   d6b16:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d6b18:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d6b1c:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d6b1e:	4605      	mov	r5, r0
   d6b20:	4616      	mov	r6, r2
  writeLine(x, y, x, y + h - 1, color);
   d6b22:	3c01      	subs	r4, #1
   d6b24:	4434      	add	r4, r6
                                 uint16_t color) {
   d6b26:	460f      	mov	r7, r1
  writeLine(x, y, x, y + h - 1, color);
   d6b28:	b224      	sxth	r4, r4
  startWrite();
   d6b2a:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
   d6b2c:	682b      	ldr	r3, [r5, #0]
   d6b2e:	f8cd 8004 	str.w	r8, [sp, #4]
   d6b32:	9400      	str	r4, [sp, #0]
   d6b34:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d6b36:	4628      	mov	r0, r5
   d6b38:	463b      	mov	r3, r7
   d6b3a:	4632      	mov	r2, r6
   d6b3c:	4639      	mov	r1, r7
   d6b3e:	47a0      	blx	r4
  endWrite();
   d6b40:	682b      	ldr	r3, [r5, #0]
   d6b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6b44:	4628      	mov	r0, r5
}
   d6b46:	b002      	add	sp, #8
   d6b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d6b4c:	4718      	bx	r3

000d6b4e <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
   d6b4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6b52:	461d      	mov	r5, r3
  startWrite();
   d6b54:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d6b56:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d6b5a:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d6b5c:	4604      	mov	r4, r0
   d6b5e:	4617      	mov	r7, r2
   d6b60:	460e      	mov	r6, r1
  startWrite();
   d6b62:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
   d6b64:	e9cd 7800 	strd	r7, r8, [sp]
   d6b68:	6822      	ldr	r2, [r4, #0]
   d6b6a:	1e6b      	subs	r3, r5, #1
   d6b6c:	4433      	add	r3, r6
   d6b6e:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d6b70:	4620      	mov	r0, r4
   d6b72:	b21b      	sxth	r3, r3
   d6b74:	463a      	mov	r2, r7
   d6b76:	4631      	mov	r1, r6
   d6b78:	47a8      	blx	r5
  endWrite();
   d6b7a:	6823      	ldr	r3, [r4, #0]
   d6b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6b7e:	4620      	mov	r0, r4
}
   d6b80:	b002      	add	sp, #8
   d6b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d6b86:	4718      	bx	r3

000d6b88 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d6b88:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6b8c:	461e      	mov	r6, r3
  startWrite();
   d6b8e:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d6b90:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
   d6b94:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d6b96:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d6b9a:	460c      	mov	r4, r1
   d6b9c:	4605      	mov	r5, r0
   d6b9e:	4617      	mov	r7, r2
  startWrite();
   d6ba0:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
   d6ba2:	4426      	add	r6, r4
   d6ba4:	42b4      	cmp	r4, r6
   d6ba6:	682b      	ldr	r3, [r5, #0]
   d6ba8:	da0b      	bge.n	d6bc2 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
   d6baa:	f8cd 8000 	str.w	r8, [sp]
   d6bae:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d6bb2:	4621      	mov	r1, r4
   d6bb4:	464b      	mov	r3, r9
   d6bb6:	463a      	mov	r2, r7
   d6bb8:	4628      	mov	r0, r5
   d6bba:	3401      	adds	r4, #1
   d6bbc:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
   d6bbe:	b224      	sxth	r4, r4
   d6bc0:	e7f0      	b.n	d6ba4 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
   d6bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6bc4:	4628      	mov	r0, r5
}
   d6bc6:	b002      	add	sp, #8
   d6bc8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d6bcc:	4718      	bx	r3

000d6bce <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d6bce:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d6bd0:	6802      	ldr	r2, [r0, #0]
   d6bd2:	9101      	str	r1, [sp, #4]
   d6bd4:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d6bd8:	9100      	str	r1, [sp, #0]
   d6bda:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d6bdc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d6be0:	2200      	movs	r2, #0
   d6be2:	4611      	mov	r1, r2
   d6be4:	47a0      	blx	r4
}
   d6be6:	b002      	add	sp, #8
   d6be8:	bd10      	pop	{r4, pc}

000d6bea <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d6bea:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6bee:	461d      	mov	r5, r3
  startWrite();
   d6bf0:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d6bf2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
   d6bf6:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d6bf8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d6bfc:	4604      	mov	r4, r0
   d6bfe:	460f      	mov	r7, r1
   d6c00:	4616      	mov	r6, r2
  startWrite();
   d6c02:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
   d6c04:	6823      	ldr	r3, [r4, #0]
   d6c06:	f8cd 8000 	str.w	r8, [sp]
   d6c0a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d6c0e:	4632      	mov	r2, r6
   d6c10:	462b      	mov	r3, r5
   d6c12:	4639      	mov	r1, r7
   d6c14:	4620      	mov	r0, r4
   d6c16:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
   d6c18:	6823      	ldr	r3, [r4, #0]
   d6c1a:	f8cd 8000 	str.w	r8, [sp]
   d6c1e:	f109 32ff 	add.w	r2, r9, #4294967295
   d6c22:	4432      	add	r2, r6
   d6c24:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d6c28:	4639      	mov	r1, r7
   d6c2a:	462b      	mov	r3, r5
   d6c2c:	4620      	mov	r0, r4
   d6c2e:	b212      	sxth	r2, r2
   d6c30:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
   d6c32:	6823      	ldr	r3, [r4, #0]
   d6c34:	f8cd 8000 	str.w	r8, [sp]
   d6c38:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d6c3c:	4632      	mov	r2, r6
   d6c3e:	464b      	mov	r3, r9
   d6c40:	4639      	mov	r1, r7
   d6c42:	4620      	mov	r0, r4
   d6c44:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
   d6c46:	1e6b      	subs	r3, r5, #1
   d6c48:	19d9      	adds	r1, r3, r7
   d6c4a:	6823      	ldr	r3, [r4, #0]
   d6c4c:	f8cd 8000 	str.w	r8, [sp]
   d6c50:	6a1d      	ldr	r5, [r3, #32]
   d6c52:	4620      	mov	r0, r4
   d6c54:	464b      	mov	r3, r9
   d6c56:	4632      	mov	r2, r6
   d6c58:	b209      	sxth	r1, r1
   d6c5a:	47a8      	blx	r5
  endWrite();
   d6c5c:	6823      	ldr	r3, [r4, #0]
   d6c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c60:	4620      	mov	r0, r4
}
   d6c62:	b002      	add	sp, #8
   d6c64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d6c68:	4718      	bx	r3

000d6c6a <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
   d6c6a:	4770      	bx	lr

000d6c6c <_ZN12Adafruit_GFX8drawLineEsssst>:
                            uint16_t color) {
   d6c6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if (x0 == x1) {
   d6c70:	4299      	cmp	r1, r3
                            uint16_t color) {
   d6c72:	4616      	mov	r6, r2
   d6c74:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d6c78:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d6c7c:	6802      	ldr	r2, [r0, #0]
   d6c7e:	4680      	mov	r8, r0
   d6c80:	460d      	mov	r5, r1
   d6c82:	461c      	mov	r4, r3
  if (x0 == x1) {
   d6c84:	d113      	bne.n	d6cae <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
    if (y0 > y1)
   d6c86:	42be      	cmp	r6, r7
   d6c88:	bfc8      	it	gt
   d6c8a:	4633      	movgt	r3, r6
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d6c8c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    if (y0 > y1)
   d6c90:	bfc4      	itt	gt
   d6c92:	463e      	movgt	r6, r7
   d6c94:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d6c96:	1c7b      	adds	r3, r7, #1
   d6c98:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d6c9a:	1b9b      	subs	r3, r3, r6
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d6c9c:	b21b      	sxth	r3, r3
   d6c9e:	4632      	mov	r2, r6
   d6ca0:	4629      	mov	r1, r5
   d6ca2:	4640      	mov	r0, r8
   d6ca4:	46a4      	mov	ip, r4
}
   d6ca6:	b003      	add	sp, #12
   d6ca8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d6cac:	4760      	bx	ip
  } else if (y0 == y1) {
   d6cae:	42be      	cmp	r6, r7
   d6cb0:	d10a      	bne.n	d6cc8 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
    if (x0 > x1)
   d6cb2:	4299      	cmp	r1, r3
   d6cb4:	bfc2      	ittt	gt
   d6cb6:	460b      	movgt	r3, r1
   d6cb8:	4625      	movgt	r5, r4
   d6cba:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d6cbc:	1c63      	adds	r3, r4, #1
   d6cbe:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d6cc2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d6cc4:	1b5b      	subs	r3, r3, r5
   d6cc6:	e7e9      	b.n	d6c9c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
    startWrite();
   d6cc8:	6953      	ldr	r3, [r2, #20]
   d6cca:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
   d6ccc:	e9cd 7900 	strd	r7, r9, [sp]
   d6cd0:	f8d8 3000 	ldr.w	r3, [r8]
   d6cd4:	4640      	mov	r0, r8
   d6cd6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d6cd8:	4632      	mov	r2, r6
   d6cda:	4623      	mov	r3, r4
   d6cdc:	4629      	mov	r1, r5
   d6cde:	47b8      	blx	r7
    endWrite();
   d6ce0:	f8d8 3000 	ldr.w	r3, [r8]
   d6ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ce6:	4640      	mov	r0, r8
}
   d6ce8:	b003      	add	sp, #12
   d6cea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
   d6cee:	4718      	bx	r3

000d6cf0 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   d6cf0:	f001 0303 	and.w	r3, r1, #3
   d6cf4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d6cf8:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
   d6cfa:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
   d6cfc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d6d00:	bf59      	ittee	pl
   d6d02:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   d6d04:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
   d6d06:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   d6d08:	81c3      	strhmi	r3, [r0, #14]
}
   d6d0a:	4770      	bx	lr

000d6d0c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d6d0c:	b530      	push	{r4, r5, lr}
   d6d0e:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
   d6d10:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
   d6d12:	4a07      	ldr	r2, [pc, #28]	; (d6d30 <_ZN12Adafruit_GFXC1Ess+0x24>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d6d14:	4d07      	ldr	r5, [pc, #28]	; (d6d34 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d6d16:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d6d18:	2400      	movs	r4, #0
  _width = WIDTH;
   d6d1a:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
   d6d1c:	f04f 31ff 	mov.w	r1, #4294967295
   d6d20:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d6d24:	6044      	str	r4, [r0, #4]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d6d26:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
   d6d28:	6104      	str	r4, [r0, #16]
  _cp437 = false;
   d6d2a:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
   d6d2c:	6204      	str	r4, [r0, #32]
}
   d6d2e:	bd30      	pop	{r4, r5, pc}
   d6d30:	01000101 	.word	0x01000101
   d6d34:	000db9cc 	.word	0x000db9cc

000d6d38 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
   d6d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d3c:	b089      	sub	sp, #36	; 0x24
   d6d3e:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
   d6d42:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
   d6d44:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d6d48:	9304      	str	r3, [sp, #16]
   d6d4a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  startWrite();
   d6d4e:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
   d6d50:	9305      	str	r3, [sp, #20]
   d6d52:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d6d56:	4604      	mov	r4, r0
  startWrite();
   d6d58:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d6d5a:	f118 0207 	adds.w	r2, r8, #7
  startWrite();
   d6d5e:	f04f 0600 	mov.w	r6, #0
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d6d62:	bf48      	it	mi
   d6d64:	f108 020e 	addmi.w	r2, r8, #14
   d6d68:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
   d6d6c:	9601      	str	r6, [sp, #4]
  uint8_t byte = 0;
   d6d6e:	4635      	mov	r5, r6
   d6d70:	9b03      	ldr	r3, [sp, #12]
   d6d72:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
   d6d74:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d6d78:	189a      	adds	r2, r3, r2
   d6d7a:	9b05      	ldr	r3, [sp, #20]
   d6d7c:	428b      	cmp	r3, r1
   d6d7e:	b212      	sxth	r2, r2
   d6d80:	dd27      	ble.n	d6dd2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d6d82:	9b04      	ldr	r3, [sp, #16]
   d6d84:	4433      	add	r3, r6
  for (int16_t j = 0; j < h; j++, y++) {
   d6d86:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d6d8a:	9306      	str	r3, [sp, #24]
   d6d8c:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
   d6d90:	4580      	cmp	r8, r0
   d6d92:	fa1f f189 	uxth.w	r1, r9
   d6d96:	dd17      	ble.n	d6dc8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
      if (i & 7)
   d6d98:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d6d9a:	bf05      	ittet	eq
   d6d9c:	9b06      	ldreq	r3, [sp, #24]
   d6d9e:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
   d6da0:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d6da2:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
   d6da4:	bf18      	it	ne
   d6da6:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
   d6da8:	062b      	lsls	r3, r5, #24
   d6daa:	d50a      	bpl.n	d6dc2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
        writePixel(x + i, y, color);
   d6dac:	9b02      	ldr	r3, [sp, #8]
   d6dae:	6820      	ldr	r0, [r4, #0]
   d6db0:	9207      	str	r2, [sp, #28]
   d6db2:	4419      	add	r1, r3
   d6db4:	6983      	ldr	r3, [r0, #24]
   d6db6:	b209      	sxth	r1, r1
   d6db8:	461f      	mov	r7, r3
   d6dba:	4620      	mov	r0, r4
   d6dbc:	4653      	mov	r3, sl
   d6dbe:	47b8      	blx	r7
   d6dc0:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
   d6dc2:	f109 0901 	add.w	r9, r9, #1
   d6dc6:	e7e1      	b.n	d6d8c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
  for (int16_t j = 0; j < h; j++, y++) {
   d6dc8:	9b01      	ldr	r3, [sp, #4]
   d6dca:	3301      	adds	r3, #1
   d6dcc:	9301      	str	r3, [sp, #4]
   d6dce:	445e      	add	r6, fp
   d6dd0:	e7ce      	b.n	d6d70 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
  endWrite();
   d6dd2:	6823      	ldr	r3, [r4, #0]
   d6dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6dd6:	4620      	mov	r0, r4
}
   d6dd8:	b009      	add	sp, #36	; 0x24
   d6dda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
   d6dde:	4718      	bx	r3

000d6de0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
   d6de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6de4:	ed2d 8b02 	vpush	{d8}
   d6de8:	b091      	sub	sp, #68	; 0x44
   d6dea:	4616      	mov	r6, r2
  if (!gfxFont) { // 'Classic' built-in font
   d6dec:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
   d6dee:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d6df2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d6df6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d6dfa:	9103      	str	r1, [sp, #12]
   d6dfc:	461f      	mov	r7, r3
   d6dfe:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d6e02:	9304      	str	r3, [sp, #16]
   d6e04:	4683      	mov	fp, r0
  if (!gfxFont) { // 'Classic' built-in font
   d6e06:	2a00      	cmp	r2, #0
   d6e08:	f040 80c5 	bne.w	d6f96 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
   d6e0c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d6e10:	428b      	cmp	r3, r1
   d6e12:	f340 814c 	ble.w	d70ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d6e16:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d6e1a:	42b3      	cmp	r3, r6
   d6e1c:	f340 8147 	ble.w	d70ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d6e20:	2306      	movs	r3, #6
   d6e22:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
   d6e26:	2b00      	cmp	r3, #0
   d6e28:	f340 8141 	ble.w	d70ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
   d6e2c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d6e30:	2b00      	cmp	r3, #0
   d6e32:	f340 813c 	ble.w	d70ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
   d6e36:	7f03      	ldrb	r3, [r0, #28]
   d6e38:	b91b      	cbnz	r3, d6e42 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d6e3a:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
   d6e3c:	bf84      	itt	hi
   d6e3e:	3701      	addhi	r7, #1
   d6e40:	b2ff      	uxtbhi	r7, r7
    startWrite();
   d6e42:	f8db 3000 	ldr.w	r3, [fp]
   d6e46:	4658      	mov	r0, fp
   d6e48:	695b      	ldr	r3, [r3, #20]
   d6e4a:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d6e4c:	2205      	movs	r2, #5
   d6e4e:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d6e50:	2200      	movs	r2, #0
   d6e52:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d6e54:	4a98      	ldr	r2, [pc, #608]	; (d70b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d6e56:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d6e5a:	18d3      	adds	r3, r2, r3
   d6e5c:	930c      	str	r3, [sp, #48]	; 0x30
   d6e5e:	b2b3      	uxth	r3, r6
   d6e60:	9306      	str	r3, [sp, #24]
   d6e62:	9a05      	ldr	r2, [sp, #20]
   d6e64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d6e66:	5c9b      	ldrb	r3, [r3, r2]
   d6e68:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d6e6a:	b2ab      	uxth	r3, r5
   d6e6c:	930b      	str	r3, [sp, #44]	; 0x2c
   d6e6e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d6e72:	9308      	str	r3, [sp, #32]
   d6e74:	9b03      	ldr	r3, [sp, #12]
   d6e76:	fb02 f905 	mul.w	r9, r2, r5
   d6e7a:	fa19 f983 	uxtah	r9, r9, r3
   d6e7e:	fa0f f389 	sxth.w	r3, r9
   d6e82:	ee08 3a10 	vmov	s16, r3
   d6e86:	2308      	movs	r3, #8
   d6e88:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
   d6e8a:	9b03      	ldr	r3, [sp, #12]
   d6e8c:	eb02 0a03 	add.w	sl, r2, r3
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d6e90:	f04f 0900 	mov.w	r9, #0
            writePixel(x + i, y + j, bg);
   d6e94:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
   d6e98:	9a07      	ldr	r2, [sp, #28]
   d6e9a:	f8db 3000 	ldr.w	r3, [fp]
   d6e9e:	07d2      	lsls	r2, r2, #31
   d6ea0:	d552      	bpl.n	d6f48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
   d6ea2:	2d01      	cmp	r5, #1
   d6ea4:	fa1f f289 	uxth.w	r2, r9
   d6ea8:	d13e      	bne.n	d6f28 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d6eaa:	2c01      	cmp	r4, #1
   d6eac:	d13c      	bne.n	d6f28 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
   d6eae:	699b      	ldr	r3, [r3, #24]
   d6eb0:	9906      	ldr	r1, [sp, #24]
   d6eb2:	461f      	mov	r7, r3
   d6eb4:	9b04      	ldr	r3, [sp, #16]
   d6eb6:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
   d6eb8:	b212      	sxth	r2, r2
   d6eba:	4651      	mov	r1, sl
   d6ebc:	4658      	mov	r0, fp
   d6ebe:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d6ec0:	f109 0301 	add.w	r3, r9, #1
   d6ec4:	fa4f f983 	sxtb.w	r9, r3
   d6ec8:	9b07      	ldr	r3, [sp, #28]
   d6eca:	085b      	lsrs	r3, r3, #1
   d6ecc:	9307      	str	r3, [sp, #28]
   d6ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6ed0:	3b01      	subs	r3, #1
   d6ed2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d6ed6:	930a      	str	r3, [sp, #40]	; 0x28
   d6ed8:	d1de      	bne.n	d6e98 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d6eda:	9f05      	ldr	r7, [sp, #20]
   d6edc:	3701      	adds	r7, #1
   d6ede:	b27b      	sxtb	r3, r7
   d6ee0:	9305      	str	r3, [sp, #20]
   d6ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6ee4:	3b01      	subs	r3, #1
   d6ee6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d6eea:	9309      	str	r3, [sp, #36]	; 0x24
   d6eec:	d1b9      	bne.n	d6e62 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
   d6eee:	9b04      	ldr	r3, [sp, #16]
   d6ef0:	4543      	cmp	r3, r8
   d6ef2:	d00f      	beq.n	d6f14 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
   d6ef4:	2d01      	cmp	r5, #1
   d6ef6:	f8db 3000 	ldr.w	r3, [fp]
   d6efa:	d13b      	bne.n	d6f74 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d6efc:	2c01      	cmp	r4, #1
   d6efe:	d139      	bne.n	d6f74 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
   d6f00:	9908      	ldr	r1, [sp, #32]
   d6f02:	f8cd 8000 	str.w	r8, [sp]
   d6f06:	3105      	adds	r1, #5
   d6f08:	6a1c      	ldr	r4, [r3, #32]
   d6f0a:	4632      	mov	r2, r6
   d6f0c:	2308      	movs	r3, #8
   d6f0e:	b209      	sxth	r1, r1
   d6f10:	4658      	mov	r0, fp
   d6f12:	47a0      	blx	r4
    endWrite();
   d6f14:	f8db 3000 	ldr.w	r3, [fp]
   d6f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f1a:	4658      	mov	r0, fp
}
   d6f1c:	b011      	add	sp, #68	; 0x44
   d6f1e:	ecbd 8b02 	vpop	{d8}
   d6f22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d6f26:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
   d6f28:	9906      	ldr	r1, [sp, #24]
   d6f2a:	fb14 f202 	smulbb	r2, r4, r2
   d6f2e:	440a      	add	r2, r1
   d6f30:	9904      	ldr	r1, [sp, #16]
   d6f32:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d6f34:	9400      	str	r4, [sp, #0]
   d6f36:	69db      	ldr	r3, [r3, #28]
   d6f38:	ee18 1a10 	vmov	r1, s16
   d6f3c:	461f      	mov	r7, r3
   d6f3e:	b212      	sxth	r2, r2
   d6f40:	462b      	mov	r3, r5
   d6f42:	4658      	mov	r0, fp
   d6f44:	47b8      	blx	r7
   d6f46:	e7bb      	b.n	d6ec0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
   d6f48:	9a04      	ldr	r2, [sp, #16]
   d6f4a:	4542      	cmp	r2, r8
   d6f4c:	d0b8      	beq.n	d6ec0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
   d6f4e:	2d01      	cmp	r5, #1
   d6f50:	fa1f f289 	uxth.w	r2, r9
   d6f54:	d107      	bne.n	d6f66 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d6f56:	2c01      	cmp	r4, #1
   d6f58:	d105      	bne.n	d6f66 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
   d6f5a:	699b      	ldr	r3, [r3, #24]
   d6f5c:	9906      	ldr	r1, [sp, #24]
   d6f5e:	461f      	mov	r7, r3
   d6f60:	440a      	add	r2, r1
   d6f62:	4643      	mov	r3, r8
   d6f64:	e7a8      	b.n	d6eb8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d6f66:	9906      	ldr	r1, [sp, #24]
   d6f68:	f8cd 8004 	str.w	r8, [sp, #4]
   d6f6c:	fb14 f202 	smulbb	r2, r4, r2
   d6f70:	440a      	add	r2, r1
   d6f72:	e7df      	b.n	d6f34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
   d6f74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d6f76:	f8cd 8004 	str.w	r8, [sp, #4]
   d6f7a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d6f7e:	9a08      	ldr	r2, [sp, #32]
   d6f80:	00e4      	lsls	r4, r4, #3
   d6f82:	440a      	add	r2, r1
   d6f84:	4611      	mov	r1, r2
   d6f86:	9400      	str	r4, [sp, #0]
   d6f88:	69dc      	ldr	r4, [r3, #28]
   d6f8a:	4632      	mov	r2, r6
   d6f8c:	462b      	mov	r3, r5
   d6f8e:	b209      	sxth	r1, r1
   d6f90:	4658      	mov	r0, fp
   d6f92:	47a0      	blx	r4
    endWrite();
   d6f94:	e7be      	b.n	d6f14 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d6f96:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
   d6f98:	6851      	ldr	r1, [r2, #4]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d6f9a:	6812      	ldr	r2, [r2, #0]
   d6f9c:	920d      	str	r2, [sp, #52]	; 0x34
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d6f9e:	1aff      	subs	r7, r7, r3
  return gfxFont->glyph + c;
   d6fa0:	b2ff      	uxtb	r7, r7
   d6fa2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d6fa6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d6faa:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
   d6fac:	789a      	ldrb	r2, [r3, #2]
   d6fae:	9209      	str	r2, [sp, #36]	; 0x24
   d6fb0:	78da      	ldrb	r2, [r3, #3]
   d6fb2:	920b      	str	r2, [sp, #44]	; 0x2c
    if (size_x > 1 || size_y > 1) {
   d6fb4:	2d01      	cmp	r5, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d6fb6:	f993 2005 	ldrsb.w	r2, [r3, #5]
           yo = pgm_read_byte(&glyph->yOffset);
   d6fba:	f993 a006 	ldrsb.w	sl, [r3, #6]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d6fbe:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
   d6fc0:	d801      	bhi.n	d6fc6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d6fc2:	2c01      	cmp	r4, #1
   d6fc4:	d957      	bls.n	d7076 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
   d6fc6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d6fca:	9308      	str	r3, [sp, #32]
      yo16 = yo;
   d6fcc:	fa0f f38a 	sxth.w	r3, sl
   d6fd0:	9307      	str	r3, [sp, #28]
    startWrite();
   d6fd2:	f8db 3000 	ldr.w	r3, [fp]
   d6fd6:	4658      	mov	r0, fp
   d6fd8:	695b      	ldr	r3, [r3, #20]
   d6fda:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d6fdc:	b2b3      	uxth	r3, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d6fde:	f04f 0800 	mov.w	r8, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d6fe2:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
   d6fe4:	fa1a f386 	uxtah	r3, sl, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d6fe8:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
   d6fea:	4647      	mov	r7, r8
            writePixel(x + xo + xx, y + yo + yy, color);
   d6fec:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
   d6fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6ff0:	429f      	cmp	r7, r3
   d6ff2:	d28f      	bcs.n	d6f14 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d6ff4:	9b07      	ldr	r3, [sp, #28]
   d6ff6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d6ff8:	443b      	add	r3, r7
   d6ffa:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
   d6ffe:	2200      	movs	r2, #0
   d7000:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
   d7002:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7004:	b21b      	sxth	r3, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d7006:	eb02 0a07 	add.w	sl, r2, r7
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d700a:	ee08 3a10 	vmov	s16, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d700e:	fa0f fa8a 	sxth.w	sl, sl
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7012:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
   d7014:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d7016:	9905      	ldr	r1, [sp, #20]
   d7018:	4291      	cmp	r1, r2
   d701a:	d241      	bcs.n	d70a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
   d701c:	1c5a      	adds	r2, r3, #1
   d701e:	b2d2      	uxtb	r2, r2
   d7020:	075b      	lsls	r3, r3, #29
   d7022:	920c      	str	r2, [sp, #48]	; 0x30
   d7024:	d107      	bne.n	d7036 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
   d7026:	9b06      	ldr	r3, [sp, #24]
   d7028:	9906      	ldr	r1, [sp, #24]
   d702a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d702c:	3301      	adds	r3, #1
   d702e:	b29b      	uxth	r3, r3
   d7030:	f812 9001 	ldrb.w	r9, [r2, r1]
   d7034:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
   d7036:	f019 0f80 	tst.w	r9, #128	; 0x80
   d703a:	d012      	beq.n	d7062 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
   d703c:	2d01      	cmp	r5, #1
   d703e:	f8db 3000 	ldr.w	r3, [fp]
   d7042:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d7046:	d11a      	bne.n	d707e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d7048:	2c01      	cmp	r4, #1
   d704a:	d118      	bne.n	d707e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
   d704c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d704e:	699b      	ldr	r3, [r3, #24]
   d7050:	4411      	add	r1, r2
   d7052:	9a05      	ldr	r2, [sp, #20]
   d7054:	4411      	add	r1, r2
   d7056:	461e      	mov	r6, r3
   d7058:	4652      	mov	r2, sl
   d705a:	9b04      	ldr	r3, [sp, #16]
   d705c:	b209      	sxth	r1, r1
   d705e:	4658      	mov	r0, fp
   d7060:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
   d7062:	9e05      	ldr	r6, [sp, #20]
   d7064:	3601      	adds	r6, #1
   d7066:	b2f3      	uxtb	r3, r6
        bits <<= 1;
   d7068:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
   d706c:	9305      	str	r3, [sp, #20]
        bits <<= 1;
   d706e:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
   d7072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (xx = 0; xx < w; xx++) {
   d7074:	e7ce      	b.n	d7014 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
   d7076:	2300      	movs	r3, #0
   d7078:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d707c:	e7a9      	b.n	d6fd2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d707e:	9805      	ldr	r0, [sp, #20]
   d7080:	9a08      	ldr	r2, [sp, #32]
   d7082:	4402      	add	r2, r0
   d7084:	fb02 1105 	mla	r1, r2, r5, r1
   d7088:	9a04      	ldr	r2, [sp, #16]
   d708a:	e9cd 4200 	strd	r4, r2, [sp]
   d708e:	69db      	ldr	r3, [r3, #28]
   d7090:	ee18 2a10 	vmov	r2, s16
   d7094:	461e      	mov	r6, r3
   d7096:	b209      	sxth	r1, r1
   d7098:	462b      	mov	r3, r5
   d709a:	4658      	mov	r0, fp
   d709c:	47b0      	blx	r6
   d709e:	e7e0      	b.n	d7062 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d70a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
   d70a2:	3701      	adds	r7, #1
   d70a4:	4498      	add	r8, r3
   d70a6:	fa5f f888 	uxtb.w	r8, r8
   d70aa:	b2ff      	uxtb	r7, r7
   d70ac:	e79f      	b.n	d6fee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d70ae:	b011      	add	sp, #68	; 0x44
   d70b0:	ecbd 8b02 	vpop	{d8}
   d70b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d70b8:	000db4c4 	.word	0x000db4c4

000d70bc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d70bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
   d70be:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d70c0:	b085      	sub	sp, #20
   d70c2:	4604      	mov	r4, r0
   d70c4:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
   d70c6:	2a00      	cmp	r2, #0
   d70c8:	d134      	bne.n	d7134 <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
   d70ca:	290a      	cmp	r1, #10
   d70cc:	d108      	bne.n	d70e0 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
   d70ce:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
   d70d0:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
   d70d2:	7e42      	ldrb	r2, [r0, #25]
   d70d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
   d70d8:	8263      	strh	r3, [r4, #18]
}
   d70da:	2001      	movs	r0, #1
   d70dc:	b005      	add	sp, #20
   d70de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
   d70e0:	290d      	cmp	r1, #13
   d70e2:	d0fa      	beq.n	d70da <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d70e4:	7ee1      	ldrb	r1, [r4, #27]
   d70e6:	7e00      	ldrb	r0, [r0, #24]
   d70e8:	7e65      	ldrb	r5, [r4, #25]
   d70ea:	b171      	cbz	r1, d710a <_ZN12Adafruit_GFX5writeEh+0x4e>
   d70ec:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d70f0:	2106      	movs	r1, #6
   d70f2:	fb11 6100 	smlabb	r1, r1, r0, r6
   d70f6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d70fa:	42b1      	cmp	r1, r6
   d70fc:	bfc1      	itttt	gt
   d70fe:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
   d7102:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
   d7104:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d7108:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d710a:	8ae2      	ldrh	r2, [r4, #22]
   d710c:	9201      	str	r2, [sp, #4]
   d710e:	8aa2      	ldrh	r2, [r4, #20]
   d7110:	9200      	str	r2, [sp, #0]
   d7112:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d7116:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d711a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d711e:	4620      	mov	r0, r4
   d7120:	f7ff fe5e 	bl	d6de0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
   d7124:	7e23      	ldrb	r3, [r4, #24]
   d7126:	8a22      	ldrh	r2, [r4, #16]
   d7128:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d712c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
   d7130:	8223      	strh	r3, [r4, #16]
   d7132:	e7d2      	b.n	d70da <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
   d7134:	290a      	cmp	r1, #10
   d7136:	d107      	bne.n	d7148 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
   d7138:	2300      	movs	r3, #0
   d713a:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d713c:	7b13      	ldrb	r3, [r2, #12]
   d713e:	7e41      	ldrb	r1, [r0, #25]
      cursor_y +=
   d7140:	8a42      	ldrh	r2, [r0, #18]
   d7142:	fb01 2303 	mla	r3, r1, r3, r2
   d7146:	e7c7      	b.n	d70d8 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
   d7148:	290d      	cmp	r1, #13
   d714a:	d0c6      	beq.n	d70da <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
   d714c:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d714e:	42a9      	cmp	r1, r5
   d7150:	d3c3      	bcc.n	d70da <_ZN12Adafruit_GFX5writeEh+0x1e>
   d7152:	7a91      	ldrb	r1, [r2, #10]
   d7154:	4299      	cmp	r1, r3
   d7156:	d3c0      	bcc.n	d70da <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
   d7158:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
   d715a:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
   d715c:	b2ed      	uxtb	r5, r5
   d715e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
   d7162:	78af      	ldrb	r7, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d7164:	b32f      	cbz	r7, d71b2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d7166:	78e9      	ldrb	r1, [r5, #3]
   d7168:	b319      	cbz	r1, d71b2 <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d716a:	7ee1      	ldrb	r1, [r4, #27]
   d716c:	7e00      	ldrb	r0, [r0, #24]
   d716e:	7e66      	ldrb	r6, [r4, #25]
   d7170:	b191      	cbz	r1, d7198 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d7172:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d7176:	4439      	add	r1, r7
   d7178:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d717c:	fb00 7101 	mla	r1, r0, r1, r7
   d7180:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d7184:	42b9      	cmp	r1, r7
   d7186:	dd07      	ble.n	d7198 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
   d7188:	2700      	movs	r7, #0
   d718a:	8227      	strh	r7, [r4, #16]
   d718c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d7190:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
   d7192:	fb02 1206 	mla	r2, r2, r6, r1
   d7196:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d7198:	8ae2      	ldrh	r2, [r4, #22]
   d719a:	9201      	str	r2, [sp, #4]
   d719c:	8aa2      	ldrh	r2, [r4, #20]
   d719e:	9200      	str	r2, [sp, #0]
   d71a0:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d71a4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d71a8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d71ac:	4620      	mov	r0, r4
   d71ae:	f7ff fe17 	bl	d6de0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d71b2:	7929      	ldrb	r1, [r5, #4]
   d71b4:	7e23      	ldrb	r3, [r4, #24]
        cursor_x +=
   d71b6:	8a22      	ldrh	r2, [r4, #16]
   d71b8:	fb01 2303 	mla	r3, r1, r3, r2
   d71bc:	e7b8      	b.n	d7130 <_ZN12Adafruit_GFX5writeEh+0x74>

000d71be <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
   d71be:	2901      	cmp	r1, #1
   d71c0:	bf38      	it	cc
   d71c2:	2101      	movcc	r1, #1
   d71c4:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
   d71c6:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
   d71c8:	4770      	bx	lr

000d71ca <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   d71ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d71ce:	4604      	mov	r4, r0
   d71d0:	b08b      	sub	sp, #44	; 0x2c
   d71d2:	f000 fa33 	bl	d763c <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d71d6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   d71da:	f9b4 503a 	ldrsh.w	r5, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d71de:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d71e2:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d71e6:	1dda      	adds	r2, r3, #7
   d71e8:	bf48      	it	mi
   d71ea:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   d71ee:	2340      	movs	r3, #64	; 0x40
   d71f0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   d71f4:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   d71f8:	9303      	str	r3, [sp, #12]
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   d71fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d71fc:	68db      	ldr	r3, [r3, #12]
   d71fe:	3b01      	subs	r3, #1
   d7200:	b29b      	uxth	r3, r3
   d7202:	9304      	str	r3, [sp, #16]
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d7204:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
  uint8_t bytes_per_page = WIDTH;
   d7208:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   d720a:	2d00      	cmp	r5, #0
   d720c:	bfb8      	it	lt
   d720e:	3507      	addlt	r5, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d7210:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d7214:	45b9      	cmp	r9, r7
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7216:	f107 0201 	add.w	r2, r7, #1
  uint8_t first_page = window_y1 / 8;
   d721a:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d721e:	bf28      	it	cs
   d7220:	46b9      	movcs	r9, r7
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7222:	fa52 f383 	uxtab	r3, r2, r3
   d7226:	fb05 9a07 	mla	sl, r5, r7, r9
   d722a:	9306      	str	r3, [sp, #24]
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};

      digitalWrite(dcPin, LOW);
   d722c:	f04f 0b00 	mov.w	fp, #0
  for (uint8_t p = first_page; p < pages; p++) {
   d7230:	9b03      	ldr	r3, [sp, #12]
   d7232:	429d      	cmp	r5, r3
   d7234:	d26b      	bcs.n	d730e <_ZN15Adafruit_SH110X7displayEv+0x144>
    ptr += page_start;
   d7236:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7238:	7a26      	ldrb	r6, [r4, #8]
   d723a:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   d723e:	eb03 080a 	add.w	r8, r3, sl
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7242:	9b06      	ldr	r3, [sp, #24]
   d7244:	444a      	add	r2, r9
   d7246:	1b9e      	subs	r6, r3, r6
    if (i2c_dev) { // I2C
   d7248:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d724a:	1111      	asrs	r1, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   d724c:	eba6 0609 	sub.w	r6, r6, r9
   d7250:	f1a5 0050 	sub.w	r0, r5, #80	; 0x50
   d7254:	b2f6      	uxtb	r6, r6
    if (i2c_dev) { // I2C
   d7256:	b2c0      	uxtb	r0, r0
   d7258:	3110      	adds	r1, #16
   d725a:	f002 020f 	and.w	r2, r2, #15
   d725e:	2b00      	cmp	r3, #0
   d7260:	d035      	beq.n	d72ce <_ZN15Adafruit_SH110X7displayEv+0x104>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d7262:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   d7266:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
      i2c_dev->setSpeed(i2c_preclk);
   d726a:	4618      	mov	r0, r3
   d726c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d726e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      uint8_t cmd[] = {
   d7272:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   d7276:	f7fe fe94 	bl	d5fa2 <_ZN18Adafruit_I2CDevice8setSpeedEm>
      i2c_dev->write(cmd, 4);
   d727a:	2301      	movs	r3, #1
   d727c:	e9cd bb00 	strd	fp, fp, [sp]
   d7280:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d7282:	2204      	movs	r2, #4
   d7284:	a909      	add	r1, sp, #36	; 0x24
   d7286:	f7fe fe07 	bl	d5e98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d728a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d728e:	9305      	str	r3, [sp, #20]
      while (bytes_remaining) {
   d7290:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d7292:	b1ae      	cbz	r6, d72c0 <_ZN15Adafruit_SH110X7displayEv+0xf6>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d7294:	9b05      	ldr	r3, [sp, #20]
   d7296:	42b3      	cmp	r3, r6
   d7298:	bf28      	it	cs
   d729a:	4633      	movcs	r3, r6
   d729c:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   d729e:	2301      	movs	r3, #1
   d72a0:	9301      	str	r3, [sp, #4]
   d72a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   d72a6:	9300      	str	r3, [sp, #0]
   d72a8:	4641      	mov	r1, r8
   d72aa:	2301      	movs	r3, #1
   d72ac:	9207      	str	r2, [sp, #28]
   d72ae:	f7fe fdf3 	bl	d5e98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   d72b2:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   d72b4:	1ab6      	subs	r6, r6, r2
        ptr += to_write;
   d72b6:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   d72b8:	b2f6      	uxtb	r6, r6
   d72ba:	f000 f9bf 	bl	d763c <os_thread_yield>
#endif // PLATFORM_THREADING
}
   d72be:	e7e7      	b.n	d7290 <_ZN15Adafruit_SH110X7displayEv+0xc6>
      i2c_dev->setSpeed(i2c_postclk);
   d72c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   d72c2:	f7fe fe6e 	bl	d5fa2 <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   d72c6:	3501      	adds	r5, #1
   d72c8:	b2ed      	uxtb	r5, r5
   d72ca:	44ba      	add	sl, r7
   d72cc:	e7b0      	b.n	d7230 <_ZN15Adafruit_SH110X7displayEv+0x66>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d72ce:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   d72d2:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
      digitalWrite(dcPin, LOW);
   d72d6:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d72da:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   d72de:	4619      	mov	r1, r3
   d72e0:	9305      	str	r3, [sp, #20]
   d72e2:	f001 fa6e 	bl	d87c2 <digitalWrite>
      spi_dev->write(cmd, 3);
   d72e6:	9b05      	ldr	r3, [sp, #20]
   d72e8:	9300      	str	r3, [sp, #0]
   d72ea:	2203      	movs	r2, #3
   d72ec:	a909      	add	r1, sp, #36	; 0x24
   d72ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d72f0:	f7fe fd75 	bl	d5dde <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   d72f4:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d72f8:	2101      	movs	r1, #1
   d72fa:	f001 fa62 	bl	d87c2 <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   d72fe:	9b05      	ldr	r3, [sp, #20]
   d7300:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7302:	9300      	str	r3, [sp, #0]
   d7304:	4632      	mov	r2, r6
   d7306:	4641      	mov	r1, r8
   d7308:	f7fe fd69 	bl	d5dde <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d730c:	e7db      	b.n	d72c6 <_ZN15Adafruit_SH110X7displayEv+0xfc>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   d730e:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   d7312:	f04f 33ff 	mov.w	r3, #4294967295
   d7316:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   d731a:	b00b      	add	sp, #44	; 0x2c
   d731c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7320 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   d7320:	b530      	push	{r4, r5, lr}
   d7322:	b085      	sub	sp, #20
   d7324:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d7326:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7328:	9503      	str	r5, [sp, #12]
   d732a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d732c:	9502      	str	r5, [sp, #8]
   d732e:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d7332:	e9cd 3500 	strd	r3, r5, [sp]
   d7336:	4613      	mov	r3, r2
   d7338:	460a      	mov	r2, r1
   d733a:	2101      	movs	r1, #1
   d733c:	f7ff fa48 	bl	d67d0 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   d7340:	4b03      	ldr	r3, [pc, #12]	; (d7350 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   d7342:	6023      	str	r3, [r4, #0]
   d7344:	4620      	mov	r0, r4
   d7346:	2300      	movs	r3, #0
   d7348:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d734c:	b005      	add	sp, #20
   d734e:	bd30      	pop	{r4, r5, pc}
   d7350:	000dba24 	.word	0x000dba24

000d7354 <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   d7354:	b510      	push	{r4, lr}
   d7356:	4b03      	ldr	r3, [pc, #12]	; (d7364 <_ZN15Adafruit_SH110XD1Ev+0x10>)
   d7358:	6003      	str	r3, [r0, #0]
   d735a:	4604      	mov	r4, r0
   d735c:	f7ff fa5a 	bl	d6814 <_ZN17Adafruit_GrayOLEDD1Ev>
   d7360:	4620      	mov	r0, r4
   d7362:	bd10      	pop	{r4, pc}
   d7364:	000dba24 	.word	0x000dba24

000d7368 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   d7368:	b510      	push	{r4, lr}
   d736a:	4b03      	ldr	r3, [pc, #12]	; (d7378 <_ZN15Adafruit_SH1107D1Ev+0x10>)
   d736c:	6003      	str	r3, [r0, #0]
   d736e:	4604      	mov	r4, r0
   d7370:	f7ff fff0 	bl	d7354 <_ZN15Adafruit_SH110XD1Ev>
   d7374:	4620      	mov	r0, r4
   d7376:	bd10      	pop	{r4, pc}
   d7378:	000dbc60 	.word	0x000dbc60

000d737c <_ZN15Adafruit_SH1107D0Ev>:
   d737c:	b510      	push	{r4, lr}
   d737e:	4604      	mov	r4, r0
   d7380:	f7ff fff2 	bl	d7368 <_ZN15Adafruit_SH1107D1Ev>
   d7384:	4620      	mov	r0, r4
   d7386:	2158      	movs	r1, #88	; 0x58
   d7388:	f001 fab2 	bl	d88f0 <_ZdlPvj>
   d738c:	4620      	mov	r0, r4
   d738e:	bd10      	pop	{r4, pc}

000d7390 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   d7390:	b530      	push	{r4, r5, lr}
   d7392:	b085      	sub	sp, #20
   d7394:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d7396:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7398:	9502      	str	r5, [sp, #8]
   d739a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d739c:	9501      	str	r5, [sp, #4]
   d739e:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d73a2:	9500      	str	r5, [sp, #0]
   d73a4:	f7ff ffbc 	bl	d7320 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   d73a8:	4b02      	ldr	r3, [pc, #8]	; (d73b4 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   d73aa:	6023      	str	r3, [r4, #0]
   d73ac:	4620      	mov	r0, r4
   d73ae:	b005      	add	sp, #20
   d73b0:	bd30      	pop	{r4, r5, pc}
   d73b2:	bf00      	nop
   d73b4:	000dbc60 	.word	0x000dbc60

000d73b8 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   d73b8:	b530      	push	{r4, r5, lr}
   d73ba:	4604      	mov	r4, r0
   d73bc:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   d73be:	f7ff faad 	bl	d691c <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   d73c2:	212f      	movs	r1, #47	; 0x2f
   d73c4:	4620      	mov	r0, r4
   d73c6:	f7ff fb12 	bl	d69ee <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   d73ca:	68a2      	ldr	r2, [r4, #8]
   d73cc:	4b2f      	ldr	r3, [pc, #188]	; (d748c <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   d73ce:	429a      	cmp	r2, r3
   d73d0:	d121      	bne.n	d7416 <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   d73d2:	6823      	ldr	r3, [r4, #0]
   d73d4:	2101      	movs	r1, #1
   d73d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d73d8:	4620      	mov	r0, r4
   d73da:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d73dc:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d73e0:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d73e4:	2320      	movs	r3, #32
   d73e6:	3a20      	subs	r2, #32
   d73e8:	3973      	subs	r1, #115	; 0x73
   d73ea:	2501      	movs	r5, #1
   d73ec:	e9cd 3501 	strd	r3, r5, [sp, #4]
   d73f0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d73f4:	2373      	movs	r3, #115	; 0x73
   d73f6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d73fa:	9300      	str	r3, [sp, #0]
   d73fc:	f341 014f 	sbfx	r1, r1, #1, #16
   d7400:	4b23      	ldr	r3, [pc, #140]	; (d7490 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d7402:	4620      	mov	r0, r4
   d7404:	f342 024f 	sbfx	r2, r2, #1, #16
   d7408:	f7ff fc96 	bl	d6d38 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   d740c:	6823      	ldr	r3, [r4, #0]
   d740e:	2100      	movs	r1, #0
   d7410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7412:	4620      	mov	r0, r4
   d7414:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   d7416:	68a3      	ldr	r3, [r4, #8]
   d7418:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d741c:	d117      	bne.n	d744e <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d741e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d7422:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d7426:	2320      	movs	r3, #32
   d7428:	2001      	movs	r0, #1
   d742a:	3a20      	subs	r2, #32
   d742c:	3973      	subs	r1, #115	; 0x73
   d742e:	e9cd 3001 	strd	r3, r0, [sp, #4]
   d7432:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d7436:	2373      	movs	r3, #115	; 0x73
   d7438:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d743c:	9300      	str	r3, [sp, #0]
   d743e:	f342 024f 	sbfx	r2, r2, #1, #16
   d7442:	4b13      	ldr	r3, [pc, #76]	; (d7490 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d7444:	f341 014f 	sbfx	r1, r1, #1, #16
   d7448:	4620      	mov	r0, r4
   d744a:	f7ff fc75 	bl	d6d38 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   d744e:	4911      	ldr	r1, [pc, #68]	; (d7494 <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   d7450:	2216      	movs	r2, #22
   d7452:	4620      	mov	r0, r4
   d7454:	f7ff fa25 	bl	d68a2 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d7458:	4605      	mov	r5, r0
   d745a:	b918      	cbnz	r0, d7464 <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   d745c:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   d745e:	4628      	mov	r0, r5
   d7460:	b005      	add	sp, #20
   d7462:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   d7464:	68a3      	ldr	r3, [r4, #8]
   d7466:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d746a:	d007      	beq.n	d747c <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   d746c:	2064      	movs	r0, #100	; 0x64
   d746e:	f000 fd97 	bl	d7fa0 <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   d7472:	21af      	movs	r1, #175	; 0xaf
   d7474:	4620      	mov	r0, r4
   d7476:	f7ff f9e9 	bl	d684c <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   d747a:	e7f0      	b.n	d745e <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   d747c:	4906      	ldr	r1, [pc, #24]	; (d7498 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   d747e:	2204      	movs	r2, #4
   d7480:	4620      	mov	r0, r4
   d7482:	f7ff fa0e 	bl	d68a2 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d7486:	2800      	cmp	r0, #0
   d7488:	d1f0      	bne.n	d746c <_ZN15Adafruit_SH11075beginEhb+0xb4>
   d748a:	e7e7      	b.n	d745c <_ZN15Adafruit_SH11075beginEhb+0xa4>
   d748c:	00800040 	.word	0x00800040
   d7490:	000dba78 	.word	0x000dba78
   d7494:	000dbcb8 	.word	0x000dbcb8
   d7498:	000dbcb4 	.word	0x000dbcb4

000d749c <_ZN19Adafruit_EEPROM_I2CC1Ev>:
/**************************************************************************/
/*!
    Constructor
*/
/**************************************************************************/
Adafruit_EEPROM_I2C::Adafruit_EEPROM_I2C(void) {}
   d749c:	2200      	movs	r2, #0
   d749e:	6002      	str	r2, [r0, #0]
   d74a0:	7102      	strb	r2, [r0, #4]
   d74a2:	4770      	bx	lr

000d74a4 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>:
 *            The I2C address to be used.
 *    @param  theWire
 *            The Wire object to be used for I2C connections.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d74a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d74a6:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d74a8:	2010      	movs	r0, #16
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d74aa:	460e      	mov	r6, r1
   d74ac:	9201      	str	r2, [sp, #4]
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d74ae:	f7fc fdf2 	bl	d4096 <_Znwj>
   d74b2:	4604      	mov	r4, r0
   d74b4:	b118      	cbz	r0, d74be <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire+0x1a>
   d74b6:	9a01      	ldr	r2, [sp, #4]
   d74b8:	4631      	mov	r1, r6
   d74ba:	f7fe fcc2 	bl	d5e42 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  _addr = addr;

  return i2c_dev->begin();
   d74be:	2101      	movs	r1, #1
   d74c0:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d74c2:	602c      	str	r4, [r5, #0]
  _addr = addr;
   d74c4:	712e      	strb	r6, [r5, #4]
}
   d74c6:	b002      	add	sp, #8
   d74c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return i2c_dev->begin();
   d74cc:	f7fe bcd5 	b.w	d5e7a <_ZN18Adafruit_I2CDevice5beginEb>

000d74d0 <_ZN19Adafruit_EEPROM_I2C5writeEth>:
    @param[in] value
                The 8-bit value to write at addr
    @returns True on I2C command success, false on timeout or I2C failure
*/
/**************************************************************************/
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d74d0:	b530      	push	{r4, r5, lr}
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};

  if (!i2c_dev->write(buff, 3))
   d74d2:	2300      	movs	r3, #0
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d74d4:	b085      	sub	sp, #20
  if (!i2c_dev->write(buff, 3))
   d74d6:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   d74da:	ba49      	rev16	r1, r1
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d74dc:	4605      	mov	r5, r0
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   d74de:	f8ad 100c 	strh.w	r1, [sp, #12]
   d74e2:	f88d 200e 	strb.w	r2, [sp, #14]
  if (!i2c_dev->write(buff, 3))
   d74e6:	6800      	ldr	r0, [r0, #0]
   d74e8:	2301      	movs	r3, #1
   d74ea:	2203      	movs	r2, #3
   d74ec:	a903      	add	r1, sp, #12
   d74ee:	f7fe fcd3 	bl	d5e98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d74f2:	b160      	cbz	r0, d750e <_ZN19Adafruit_EEPROM_I2C5writeEth+0x3e>
   d74f4:	2465      	movs	r4, #101	; 0x65
    return false;

  // Wait until it acks!
  uint8_t timeout = 100;
  while (timeout--) {
   d74f6:	3c01      	subs	r4, #1
   d74f8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d74fc:	d007      	beq.n	d750e <_ZN19Adafruit_EEPROM_I2C5writeEth+0x3e>
    if (i2c_dev->detected())
   d74fe:	6828      	ldr	r0, [r5, #0]
   d7500:	f7fe fca6 	bl	d5e50 <_ZN18Adafruit_I2CDevice8detectedEv>
   d7504:	b920      	cbnz	r0, d7510 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x40>
      return true;
    delay(1);
   d7506:	2001      	movs	r0, #1
   d7508:	f000 fd4a 	bl	d7fa0 <delay>
  while (timeout--) {
   d750c:	e7f3      	b.n	d74f6 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x26>
    return false;
   d750e:	2000      	movs	r0, #0
  }

  // timed out :(
  return false;
}
   d7510:	b005      	add	sp, #20
   d7512:	bd30      	pop	{r4, r5, pc}

000d7514 <_ZN19Adafruit_EEPROM_I2C4readEt>:
    @param addr
                The 16-bit address to read from in EEPROM memory
    @returns    The 8-bit value retrieved at addr
*/
/**************************************************************************/
uint8_t Adafruit_EEPROM_I2C::read(uint16_t addr) {
   d7514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};

  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7516:	2301      	movs	r3, #1
   d7518:	2200      	movs	r2, #0
   d751a:	e9cd 3200 	strd	r3, r2, [sp]
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   d751e:	ba49      	rev16	r1, r1
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7520:	ab03      	add	r3, sp, #12
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   d7522:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7526:	6800      	ldr	r0, [r0, #0]
   d7528:	2202      	movs	r2, #2
   d752a:	4619      	mov	r1, r3
   d752c:	f7fe fd22 	bl	d5f74 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
   d7530:	b108      	cbz	r0, d7536 <_ZN19Adafruit_EEPROM_I2C4readEt+0x22>
    return 0x0;

  return buff[0];
   d7532:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d7536:	b005      	add	sp, #20
   d7538:	f85d fb04 	ldr.w	pc, [sp], #4

000d753c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d753c:	b508      	push	{r3, lr}
   d753e:	4b02      	ldr	r3, [pc, #8]	; (d7548 <netdb_freeaddrinfo+0xc>)
   d7540:	681b      	ldr	r3, [r3, #0]
   d7542:	689b      	ldr	r3, [r3, #8]
   d7544:	9301      	str	r3, [sp, #4]
   d7546:	bd08      	pop	{r3, pc}
   d7548:	00030268 	.word	0x00030268

000d754c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d754c:	b508      	push	{r3, lr}
   d754e:	4b02      	ldr	r3, [pc, #8]	; (d7558 <netdb_getaddrinfo+0xc>)
   d7550:	681b      	ldr	r3, [r3, #0]
   d7552:	68db      	ldr	r3, [r3, #12]
   d7554:	9301      	str	r3, [sp, #4]
   d7556:	bd08      	pop	{r3, pc}
   d7558:	00030268 	.word	0x00030268

000d755c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d755c:	b508      	push	{r3, lr}
   d755e:	4b02      	ldr	r3, [pc, #8]	; (d7568 <HAL_Validate_Pin_Function+0xc>)
   d7560:	681b      	ldr	r3, [r3, #0]
   d7562:	685b      	ldr	r3, [r3, #4]
   d7564:	9301      	str	r3, [sp, #4]
   d7566:	bd08      	pop	{r3, pc}
   d7568:	0003022c 	.word	0x0003022c

000d756c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d756c:	b508      	push	{r3, lr}
   d756e:	4b02      	ldr	r3, [pc, #8]	; (d7578 <HAL_Pin_Mode+0xc>)
   d7570:	681b      	ldr	r3, [r3, #0]
   d7572:	689b      	ldr	r3, [r3, #8]
   d7574:	9301      	str	r3, [sp, #4]
   d7576:	bd08      	pop	{r3, pc}
   d7578:	0003022c 	.word	0x0003022c

000d757c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d757c:	b508      	push	{r3, lr}
   d757e:	4b02      	ldr	r3, [pc, #8]	; (d7588 <HAL_Get_Pin_Mode+0xc>)
   d7580:	681b      	ldr	r3, [r3, #0]
   d7582:	68db      	ldr	r3, [r3, #12]
   d7584:	9301      	str	r3, [sp, #4]
   d7586:	bd08      	pop	{r3, pc}
   d7588:	0003022c 	.word	0x0003022c

000d758c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d758c:	b508      	push	{r3, lr}
   d758e:	4b02      	ldr	r3, [pc, #8]	; (d7598 <HAL_GPIO_Write+0xc>)
   d7590:	681b      	ldr	r3, [r3, #0]
   d7592:	691b      	ldr	r3, [r3, #16]
   d7594:	9301      	str	r3, [sp, #4]
   d7596:	bd08      	pop	{r3, pc}
   d7598:	0003022c 	.word	0x0003022c

000d759c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d759c:	b508      	push	{r3, lr}
   d759e:	4b02      	ldr	r3, [pc, #8]	; (d75a8 <HAL_GPIO_Read+0xc>)
   d75a0:	681b      	ldr	r3, [r3, #0]
   d75a2:	695b      	ldr	r3, [r3, #20]
   d75a4:	9301      	str	r3, [sp, #4]
   d75a6:	bd08      	pop	{r3, pc}
   d75a8:	0003022c 	.word	0x0003022c

000d75ac <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d75ac:	b508      	push	{r3, lr}
   d75ae:	4b02      	ldr	r3, [pc, #8]	; (d75b8 <HAL_Interrupts_Attach+0xc>)
   d75b0:	681b      	ldr	r3, [r3, #0]
   d75b2:	699b      	ldr	r3, [r3, #24]
   d75b4:	9301      	str	r3, [sp, #4]
   d75b6:	bd08      	pop	{r3, pc}
   d75b8:	0003022c 	.word	0x0003022c

000d75bc <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d75bc:	b508      	push	{r3, lr}
   d75be:	4b02      	ldr	r3, [pc, #8]	; (d75c8 <HAL_Interrupts_Detach+0xc>)
   d75c0:	681b      	ldr	r3, [r3, #0]
   d75c2:	69db      	ldr	r3, [r3, #28]
   d75c4:	9301      	str	r3, [sp, #4]
   d75c6:	bd08      	pop	{r3, pc}
   d75c8:	0003022c 	.word	0x0003022c

000d75cc <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d75cc:	b508      	push	{r3, lr}
   d75ce:	4b02      	ldr	r3, [pc, #8]	; (d75d8 <hal_adc_read+0xc>)
   d75d0:	681b      	ldr	r3, [r3, #0]
   d75d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d75d4:	9301      	str	r3, [sp, #4]
   d75d6:	bd08      	pop	{r3, pc}
   d75d8:	0003022c 	.word	0x0003022c

000d75dc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d75dc:	b508      	push	{r3, lr}
   d75de:	4b02      	ldr	r3, [pc, #8]	; (d75e8 <HAL_RNG_GetRandomNumber+0xc>)
   d75e0:	681b      	ldr	r3, [r3, #0]
   d75e2:	685b      	ldr	r3, [r3, #4]
   d75e4:	9301      	str	r3, [sp, #4]
   d75e6:	bd08      	pop	{r3, pc}
   d75e8:	00030218 	.word	0x00030218

000d75ec <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d75ec:	b508      	push	{r3, lr}
   d75ee:	4b02      	ldr	r3, [pc, #8]	; (d75f8 <HAL_Delay_Microseconds+0xc>)
   d75f0:	681b      	ldr	r3, [r3, #0]
   d75f2:	68db      	ldr	r3, [r3, #12]
   d75f4:	9301      	str	r3, [sp, #4]
   d75f6:	bd08      	pop	{r3, pc}
   d75f8:	00030218 	.word	0x00030218

000d75fc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d75fc:	b508      	push	{r3, lr}
   d75fe:	4b02      	ldr	r3, [pc, #8]	; (d7608 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7600:	681b      	ldr	r3, [r3, #0]
   d7602:	695b      	ldr	r3, [r3, #20]
   d7604:	9301      	str	r3, [sp, #4]
   d7606:	bd08      	pop	{r3, pc}
   d7608:	00030218 	.word	0x00030218

000d760c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d760c:	b508      	push	{r3, lr}
   d760e:	4b02      	ldr	r3, [pc, #8]	; (d7618 <HAL_EEPROM_Init+0xc>)
   d7610:	681b      	ldr	r3, [r3, #0]
   d7612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7614:	9301      	str	r3, [sp, #4]
   d7616:	bd08      	pop	{r3, pc}
   d7618:	00030218 	.word	0x00030218

000d761c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d761c:	b508      	push	{r3, lr}
   d761e:	4b02      	ldr	r3, [pc, #8]	; (d7628 <HAL_EEPROM_Get+0xc>)
   d7620:	681b      	ldr	r3, [r3, #0]
   d7622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7624:	9301      	str	r3, [sp, #4]
   d7626:	bd08      	pop	{r3, pc}
   d7628:	00030218 	.word	0x00030218

000d762c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d762c:	b508      	push	{r3, lr}
   d762e:	4b02      	ldr	r3, [pc, #8]	; (d7638 <HAL_EEPROM_Put+0xc>)
   d7630:	681b      	ldr	r3, [r3, #0]
   d7632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7634:	9301      	str	r3, [sp, #4]
   d7636:	bd08      	pop	{r3, pc}
   d7638:	00030218 	.word	0x00030218

000d763c <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d763c:	b508      	push	{r3, lr}
   d763e:	4b02      	ldr	r3, [pc, #8]	; (d7648 <os_thread_yield+0xc>)
   d7640:	681b      	ldr	r3, [r3, #0]
   d7642:	68db      	ldr	r3, [r3, #12]
   d7644:	9301      	str	r3, [sp, #4]
   d7646:	bd08      	pop	{r3, pc}
   d7648:	00030248 	.word	0x00030248

000d764c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d764c:	b508      	push	{r3, lr}
   d764e:	4b02      	ldr	r3, [pc, #8]	; (d7658 <os_mutex_recursive_create+0xc>)
   d7650:	681b      	ldr	r3, [r3, #0]
   d7652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7654:	9301      	str	r3, [sp, #4]
   d7656:	bd08      	pop	{r3, pc}
   d7658:	00030248 	.word	0x00030248

000d765c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d765c:	b508      	push	{r3, lr}
   d765e:	4b02      	ldr	r3, [pc, #8]	; (d7668 <inet_inet_ntop+0xc>)
   d7660:	681b      	ldr	r3, [r3, #0]
   d7662:	695b      	ldr	r3, [r3, #20]
   d7664:	9301      	str	r3, [sp, #4]
   d7666:	bd08      	pop	{r3, pc}
   d7668:	00030264 	.word	0x00030264

000d766c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d766c:	b508      	push	{r3, lr}
   d766e:	4b02      	ldr	r3, [pc, #8]	; (d7678 <hal_usart_init+0xc>)
   d7670:	681b      	ldr	r3, [r3, #0]
   d7672:	681b      	ldr	r3, [r3, #0]
   d7674:	9301      	str	r3, [sp, #4]
   d7676:	bd08      	pop	{r3, pc}
   d7678:	0003023c 	.word	0x0003023c

000d767c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d767c:	b508      	push	{r3, lr}
   d767e:	4b02      	ldr	r3, [pc, #8]	; (d7688 <hal_usart_write+0xc>)
   d7680:	681b      	ldr	r3, [r3, #0]
   d7682:	68db      	ldr	r3, [r3, #12]
   d7684:	9301      	str	r3, [sp, #4]
   d7686:	bd08      	pop	{r3, pc}
   d7688:	0003023c 	.word	0x0003023c

000d768c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d768c:	b508      	push	{r3, lr}
   d768e:	4b02      	ldr	r3, [pc, #8]	; (d7698 <hal_usart_available+0xc>)
   d7690:	681b      	ldr	r3, [r3, #0]
   d7692:	691b      	ldr	r3, [r3, #16]
   d7694:	9301      	str	r3, [sp, #4]
   d7696:	bd08      	pop	{r3, pc}
   d7698:	0003023c 	.word	0x0003023c

000d769c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d769c:	b508      	push	{r3, lr}
   d769e:	4b02      	ldr	r3, [pc, #8]	; (d76a8 <hal_usart_read+0xc>)
   d76a0:	681b      	ldr	r3, [r3, #0]
   d76a2:	695b      	ldr	r3, [r3, #20]
   d76a4:	9301      	str	r3, [sp, #4]
   d76a6:	bd08      	pop	{r3, pc}
   d76a8:	0003023c 	.word	0x0003023c

000d76ac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d76ac:	b508      	push	{r3, lr}
   d76ae:	4b02      	ldr	r3, [pc, #8]	; (d76b8 <hal_usart_peek+0xc>)
   d76b0:	681b      	ldr	r3, [r3, #0]
   d76b2:	699b      	ldr	r3, [r3, #24]
   d76b4:	9301      	str	r3, [sp, #4]
   d76b6:	bd08      	pop	{r3, pc}
   d76b8:	0003023c 	.word	0x0003023c

000d76bc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d76bc:	b508      	push	{r3, lr}
   d76be:	4b02      	ldr	r3, [pc, #8]	; (d76c8 <hal_usart_flush+0xc>)
   d76c0:	681b      	ldr	r3, [r3, #0]
   d76c2:	69db      	ldr	r3, [r3, #28]
   d76c4:	9301      	str	r3, [sp, #4]
   d76c6:	bd08      	pop	{r3, pc}
   d76c8:	0003023c 	.word	0x0003023c

000d76cc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d76cc:	b508      	push	{r3, lr}
   d76ce:	4b02      	ldr	r3, [pc, #8]	; (d76d8 <hal_usart_is_enabled+0xc>)
   d76d0:	681b      	ldr	r3, [r3, #0]
   d76d2:	6a1b      	ldr	r3, [r3, #32]
   d76d4:	9301      	str	r3, [sp, #4]
   d76d6:	bd08      	pop	{r3, pc}
   d76d8:	0003023c 	.word	0x0003023c

000d76dc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d76dc:	b508      	push	{r3, lr}
   d76de:	4b02      	ldr	r3, [pc, #8]	; (d76e8 <hal_usart_available_data_for_write+0xc>)
   d76e0:	681b      	ldr	r3, [r3, #0]
   d76e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d76e4:	9301      	str	r3, [sp, #4]
   d76e6:	bd08      	pop	{r3, pc}
   d76e8:	0003023c 	.word	0x0003023c

000d76ec <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d76ec:	b508      	push	{r3, lr}
   d76ee:	4b02      	ldr	r3, [pc, #8]	; (d76f8 <hal_i2c_set_speed+0xc>)
   d76f0:	681b      	ldr	r3, [r3, #0]
   d76f2:	681b      	ldr	r3, [r3, #0]
   d76f4:	9301      	str	r3, [sp, #4]
   d76f6:	bd08      	pop	{r3, pc}
   d76f8:	00030228 	.word	0x00030228

000d76fc <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d76fc:	b508      	push	{r3, lr}
   d76fe:	4b02      	ldr	r3, [pc, #8]	; (d7708 <hal_i2c_begin+0xc>)
   d7700:	681b      	ldr	r3, [r3, #0]
   d7702:	68db      	ldr	r3, [r3, #12]
   d7704:	9301      	str	r3, [sp, #4]
   d7706:	bd08      	pop	{r3, pc}
   d7708:	00030228 	.word	0x00030228

000d770c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d770c:	b508      	push	{r3, lr}
   d770e:	4b02      	ldr	r3, [pc, #8]	; (d7718 <hal_i2c_begin_transmission+0xc>)
   d7710:	681b      	ldr	r3, [r3, #0]
   d7712:	699b      	ldr	r3, [r3, #24]
   d7714:	9301      	str	r3, [sp, #4]
   d7716:	bd08      	pop	{r3, pc}
   d7718:	00030228 	.word	0x00030228

000d771c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d771c:	b508      	push	{r3, lr}
   d771e:	4b02      	ldr	r3, [pc, #8]	; (d7728 <hal_i2c_end_transmission+0xc>)
   d7720:	681b      	ldr	r3, [r3, #0]
   d7722:	69db      	ldr	r3, [r3, #28]
   d7724:	9301      	str	r3, [sp, #4]
   d7726:	bd08      	pop	{r3, pc}
   d7728:	00030228 	.word	0x00030228

000d772c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d772c:	b508      	push	{r3, lr}
   d772e:	4b02      	ldr	r3, [pc, #8]	; (d7738 <hal_i2c_write+0xc>)
   d7730:	681b      	ldr	r3, [r3, #0]
   d7732:	6a1b      	ldr	r3, [r3, #32]
   d7734:	9301      	str	r3, [sp, #4]
   d7736:	bd08      	pop	{r3, pc}
   d7738:	00030228 	.word	0x00030228

000d773c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d773c:	b508      	push	{r3, lr}
   d773e:	4b02      	ldr	r3, [pc, #8]	; (d7748 <hal_i2c_available+0xc>)
   d7740:	681b      	ldr	r3, [r3, #0]
   d7742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7744:	9301      	str	r3, [sp, #4]
   d7746:	bd08      	pop	{r3, pc}
   d7748:	00030228 	.word	0x00030228

000d774c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d774c:	b508      	push	{r3, lr}
   d774e:	4b02      	ldr	r3, [pc, #8]	; (d7758 <hal_i2c_read+0xc>)
   d7750:	681b      	ldr	r3, [r3, #0]
   d7752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7754:	9301      	str	r3, [sp, #4]
   d7756:	bd08      	pop	{r3, pc}
   d7758:	00030228 	.word	0x00030228

000d775c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d775c:	b508      	push	{r3, lr}
   d775e:	4b02      	ldr	r3, [pc, #8]	; (d7768 <hal_i2c_peek+0xc>)
   d7760:	681b      	ldr	r3, [r3, #0]
   d7762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7764:	9301      	str	r3, [sp, #4]
   d7766:	bd08      	pop	{r3, pc}
   d7768:	00030228 	.word	0x00030228

000d776c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d776c:	b508      	push	{r3, lr}
   d776e:	4b02      	ldr	r3, [pc, #8]	; (d7778 <hal_i2c_flush+0xc>)
   d7770:	681b      	ldr	r3, [r3, #0]
   d7772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7774:	9301      	str	r3, [sp, #4]
   d7776:	bd08      	pop	{r3, pc}
   d7778:	00030228 	.word	0x00030228

000d777c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d777c:	b508      	push	{r3, lr}
   d777e:	4b02      	ldr	r3, [pc, #8]	; (d7788 <hal_i2c_is_enabled+0xc>)
   d7780:	681b      	ldr	r3, [r3, #0]
   d7782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7784:	9301      	str	r3, [sp, #4]
   d7786:	bd08      	pop	{r3, pc}
   d7788:	00030228 	.word	0x00030228

000d778c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d778c:	b508      	push	{r3, lr}
   d778e:	4b02      	ldr	r3, [pc, #8]	; (d7798 <hal_i2c_init+0xc>)
   d7790:	681b      	ldr	r3, [r3, #0]
   d7792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7794:	9301      	str	r3, [sp, #4]
   d7796:	bd08      	pop	{r3, pc}
   d7798:	00030228 	.word	0x00030228

000d779c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d779c:	b508      	push	{r3, lr}
   d779e:	4b02      	ldr	r3, [pc, #8]	; (d77a8 <hal_i2c_request_ex+0xc>)
   d77a0:	681b      	ldr	r3, [r3, #0]
   d77a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d77a4:	9301      	str	r3, [sp, #4]
   d77a6:	bd08      	pop	{r3, pc}
   d77a8:	00030228 	.word	0x00030228

000d77ac <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d77ac:	b508      	push	{r3, lr}
   d77ae:	4b02      	ldr	r3, [pc, #8]	; (d77b8 <hal_spi_begin+0xc>)
   d77b0:	681b      	ldr	r3, [r3, #0]
   d77b2:	681b      	ldr	r3, [r3, #0]
   d77b4:	9301      	str	r3, [sp, #4]
   d77b6:	bd08      	pop	{r3, pc}
   d77b8:	00030230 	.word	0x00030230

000d77bc <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d77bc:	b508      	push	{r3, lr}
   d77be:	4b02      	ldr	r3, [pc, #8]	; (d77c8 <hal_spi_transfer+0xc>)
   d77c0:	681b      	ldr	r3, [r3, #0]
   d77c2:	695b      	ldr	r3, [r3, #20]
   d77c4:	9301      	str	r3, [sp, #4]
   d77c6:	bd08      	pop	{r3, pc}
   d77c8:	00030230 	.word	0x00030230

000d77cc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d77cc:	b508      	push	{r3, lr}
   d77ce:	4b02      	ldr	r3, [pc, #8]	; (d77d8 <hal_spi_init+0xc>)
   d77d0:	681b      	ldr	r3, [r3, #0]
   d77d2:	69db      	ldr	r3, [r3, #28]
   d77d4:	9301      	str	r3, [sp, #4]
   d77d6:	bd08      	pop	{r3, pc}
   d77d8:	00030230 	.word	0x00030230

000d77dc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d77dc:	b508      	push	{r3, lr}
   d77de:	4b02      	ldr	r3, [pc, #8]	; (d77e8 <hal_spi_is_enabled+0xc>)
   d77e0:	681b      	ldr	r3, [r3, #0]
   d77e2:	6a1b      	ldr	r3, [r3, #32]
   d77e4:	9301      	str	r3, [sp, #4]
   d77e6:	bd08      	pop	{r3, pc}
   d77e8:	00030230 	.word	0x00030230

000d77ec <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d77ec:	b508      	push	{r3, lr}
   d77ee:	4b02      	ldr	r3, [pc, #8]	; (d77f8 <hal_spi_info+0xc>)
   d77f0:	681b      	ldr	r3, [r3, #0]
   d77f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d77f4:	9301      	str	r3, [sp, #4]
   d77f6:	bd08      	pop	{r3, pc}
   d77f8:	00030230 	.word	0x00030230

000d77fc <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d77fc:	b508      	push	{r3, lr}
   d77fe:	4b02      	ldr	r3, [pc, #8]	; (d7808 <hal_spi_transfer_dma+0xc>)
   d7800:	681b      	ldr	r3, [r3, #0]
   d7802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7804:	9301      	str	r3, [sp, #4]
   d7806:	bd08      	pop	{r3, pc}
   d7808:	00030230 	.word	0x00030230

000d780c <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d780c:	b508      	push	{r3, lr}
   d780e:	4b02      	ldr	r3, [pc, #8]	; (d7818 <hal_spi_transfer_dma_status+0xc>)
   d7810:	681b      	ldr	r3, [r3, #0]
   d7812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7814:	9301      	str	r3, [sp, #4]
   d7816:	bd08      	pop	{r3, pc}
   d7818:	00030230 	.word	0x00030230

000d781c <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d781c:	b508      	push	{r3, lr}
   d781e:	4b02      	ldr	r3, [pc, #8]	; (d7828 <hal_spi_set_settings+0xc>)
   d7820:	681b      	ldr	r3, [r3, #0]
   d7822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7824:	9301      	str	r3, [sp, #4]
   d7826:	bd08      	pop	{r3, pc}
   d7828:	00030230 	.word	0x00030230

000d782c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d782c:	b508      	push	{r3, lr}
   d782e:	4b02      	ldr	r3, [pc, #8]	; (d7838 <hal_spi_acquire+0xc>)
   d7830:	681b      	ldr	r3, [r3, #0]
   d7832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7834:	9301      	str	r3, [sp, #4]
   d7836:	bd08      	pop	{r3, pc}
   d7838:	00030230 	.word	0x00030230

000d783c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d783c:	b508      	push	{r3, lr}
   d783e:	4b02      	ldr	r3, [pc, #8]	; (d7848 <hal_spi_release+0xc>)
   d7840:	681b      	ldr	r3, [r3, #0]
   d7842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7844:	9301      	str	r3, [sp, #4]
   d7846:	bd08      	pop	{r3, pc}
   d7848:	00030230 	.word	0x00030230

000d784c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d784c:	b508      	push	{r3, lr}
   d784e:	4b02      	ldr	r3, [pc, #8]	; (d7858 <HAL_USB_USART_Init+0xc>)
   d7850:	681b      	ldr	r3, [r3, #0]
   d7852:	681b      	ldr	r3, [r3, #0]
   d7854:	9301      	str	r3, [sp, #4]
   d7856:	bd08      	pop	{r3, pc}
   d7858:	0003024c 	.word	0x0003024c

000d785c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d785c:	b508      	push	{r3, lr}
   d785e:	4b02      	ldr	r3, [pc, #8]	; (d7868 <HAL_USB_USART_Begin+0xc>)
   d7860:	681b      	ldr	r3, [r3, #0]
   d7862:	685b      	ldr	r3, [r3, #4]
   d7864:	9301      	str	r3, [sp, #4]
   d7866:	bd08      	pop	{r3, pc}
   d7868:	0003024c 	.word	0x0003024c

000d786c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d786c:	b508      	push	{r3, lr}
   d786e:	4b02      	ldr	r3, [pc, #8]	; (d7878 <HAL_USB_USART_Available_Data+0xc>)
   d7870:	681b      	ldr	r3, [r3, #0]
   d7872:	691b      	ldr	r3, [r3, #16]
   d7874:	9301      	str	r3, [sp, #4]
   d7876:	bd08      	pop	{r3, pc}
   d7878:	0003024c 	.word	0x0003024c

000d787c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d787c:	b508      	push	{r3, lr}
   d787e:	4b02      	ldr	r3, [pc, #8]	; (d7888 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7880:	681b      	ldr	r3, [r3, #0]
   d7882:	695b      	ldr	r3, [r3, #20]
   d7884:	9301      	str	r3, [sp, #4]
   d7886:	bd08      	pop	{r3, pc}
   d7888:	0003024c 	.word	0x0003024c

000d788c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d788c:	b508      	push	{r3, lr}
   d788e:	4b02      	ldr	r3, [pc, #8]	; (d7898 <HAL_USB_USART_Receive_Data+0xc>)
   d7890:	681b      	ldr	r3, [r3, #0]
   d7892:	699b      	ldr	r3, [r3, #24]
   d7894:	9301      	str	r3, [sp, #4]
   d7896:	bd08      	pop	{r3, pc}
   d7898:	0003024c 	.word	0x0003024c

000d789c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d789c:	b508      	push	{r3, lr}
   d789e:	4b02      	ldr	r3, [pc, #8]	; (d78a8 <HAL_USB_USART_Send_Data+0xc>)
   d78a0:	681b      	ldr	r3, [r3, #0]
   d78a2:	69db      	ldr	r3, [r3, #28]
   d78a4:	9301      	str	r3, [sp, #4]
   d78a6:	bd08      	pop	{r3, pc}
   d78a8:	0003024c 	.word	0x0003024c

000d78ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d78ac:	b508      	push	{r3, lr}
   d78ae:	4b02      	ldr	r3, [pc, #8]	; (d78b8 <HAL_USB_USART_Flush_Data+0xc>)
   d78b0:	681b      	ldr	r3, [r3, #0]
   d78b2:	6a1b      	ldr	r3, [r3, #32]
   d78b4:	9301      	str	r3, [sp, #4]
   d78b6:	bd08      	pop	{r3, pc}
   d78b8:	0003024c 	.word	0x0003024c

000d78bc <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d78bc:	b508      	push	{r3, lr}
   d78be:	4b02      	ldr	r3, [pc, #8]	; (d78c8 <HAL_USB_USART_Is_Enabled+0xc>)
   d78c0:	681b      	ldr	r3, [r3, #0]
   d78c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d78c4:	9301      	str	r3, [sp, #4]
   d78c6:	bd08      	pop	{r3, pc}
   d78c8:	0003024c 	.word	0x0003024c

000d78cc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d78cc:	b508      	push	{r3, lr}
   d78ce:	4b02      	ldr	r3, [pc, #8]	; (d78d8 <panic_+0xc>)
   d78d0:	681b      	ldr	r3, [r3, #0]
   d78d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d78d4:	9301      	str	r3, [sp, #4]
   d78d6:	bd08      	pop	{r3, pc}
   d78d8:	00030260 	.word	0x00030260

000d78dc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d78dc:	b508      	push	{r3, lr}
   d78de:	4b02      	ldr	r3, [pc, #8]	; (d78e8 <set_system_mode+0xc>)
   d78e0:	681b      	ldr	r3, [r3, #0]
   d78e2:	685b      	ldr	r3, [r3, #4]
   d78e4:	9301      	str	r3, [sp, #4]
   d78e6:	bd08      	pop	{r3, pc}
   d78e8:	00030220 	.word	0x00030220

000d78ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d78ec:	b508      	push	{r3, lr}
   d78ee:	4b02      	ldr	r3, [pc, #8]	; (d78f8 <system_delay_ms+0xc>)
   d78f0:	681b      	ldr	r3, [r3, #0]
   d78f2:	695b      	ldr	r3, [r3, #20]
   d78f4:	9301      	str	r3, [sp, #4]
   d78f6:	bd08      	pop	{r3, pc}
   d78f8:	00030220 	.word	0x00030220

000d78fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d78fc:	b508      	push	{r3, lr}
   d78fe:	4b03      	ldr	r3, [pc, #12]	; (d790c <system_ctrl_set_app_request_handler+0x10>)
   d7900:	681b      	ldr	r3, [r3, #0]
   d7902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7906:	9301      	str	r3, [sp, #4]
   d7908:	bd08      	pop	{r3, pc}
   d790a:	0000      	.short	0x0000
   d790c:	00030220 	.word	0x00030220

000d7910 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7910:	b508      	push	{r3, lr}
   d7912:	4b03      	ldr	r3, [pc, #12]	; (d7920 <system_ctrl_set_result+0x10>)
   d7914:	681b      	ldr	r3, [r3, #0]
   d7916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d791a:	9301      	str	r3, [sp, #4]
   d791c:	bd08      	pop	{r3, pc}
   d791e:	0000      	.short	0x0000
   d7920:	00030220 	.word	0x00030220

000d7924 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7924:	b508      	push	{r3, lr}
   d7926:	4b02      	ldr	r3, [pc, #8]	; (d7930 <network_connect+0xc>)
   d7928:	681b      	ldr	r3, [r3, #0]
   d792a:	685b      	ldr	r3, [r3, #4]
   d792c:	9301      	str	r3, [sp, #4]
   d792e:	bd08      	pop	{r3, pc}
   d7930:	00030240 	.word	0x00030240

000d7934 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7934:	b508      	push	{r3, lr}
   d7936:	4b02      	ldr	r3, [pc, #8]	; (d7940 <network_connecting+0xc>)
   d7938:	681b      	ldr	r3, [r3, #0]
   d793a:	689b      	ldr	r3, [r3, #8]
   d793c:	9301      	str	r3, [sp, #4]
   d793e:	bd08      	pop	{r3, pc}
   d7940:	00030240 	.word	0x00030240

000d7944 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7944:	b508      	push	{r3, lr}
   d7946:	4b02      	ldr	r3, [pc, #8]	; (d7950 <network_disconnect+0xc>)
   d7948:	681b      	ldr	r3, [r3, #0]
   d794a:	68db      	ldr	r3, [r3, #12]
   d794c:	9301      	str	r3, [sp, #4]
   d794e:	bd08      	pop	{r3, pc}
   d7950:	00030240 	.word	0x00030240

000d7954 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7954:	b508      	push	{r3, lr}
   d7956:	4b02      	ldr	r3, [pc, #8]	; (d7960 <network_ready+0xc>)
   d7958:	681b      	ldr	r3, [r3, #0]
   d795a:	691b      	ldr	r3, [r3, #16]
   d795c:	9301      	str	r3, [sp, #4]
   d795e:	bd08      	pop	{r3, pc}
   d7960:	00030240 	.word	0x00030240

000d7964 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7964:	b508      	push	{r3, lr}
   d7966:	4b02      	ldr	r3, [pc, #8]	; (d7970 <network_on+0xc>)
   d7968:	681b      	ldr	r3, [r3, #0]
   d796a:	695b      	ldr	r3, [r3, #20]
   d796c:	9301      	str	r3, [sp, #4]
   d796e:	bd08      	pop	{r3, pc}
   d7970:	00030240 	.word	0x00030240

000d7974 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7974:	b508      	push	{r3, lr}
   d7976:	4b02      	ldr	r3, [pc, #8]	; (d7980 <network_off+0xc>)
   d7978:	681b      	ldr	r3, [r3, #0]
   d797a:	699b      	ldr	r3, [r3, #24]
   d797c:	9301      	str	r3, [sp, #4]
   d797e:	bd08      	pop	{r3, pc}
   d7980:	00030240 	.word	0x00030240

000d7984 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7984:	b508      	push	{r3, lr}
   d7986:	4b02      	ldr	r3, [pc, #8]	; (d7990 <network_listen+0xc>)
   d7988:	681b      	ldr	r3, [r3, #0]
   d798a:	69db      	ldr	r3, [r3, #28]
   d798c:	9301      	str	r3, [sp, #4]
   d798e:	bd08      	pop	{r3, pc}
   d7990:	00030240 	.word	0x00030240

000d7994 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7994:	b508      	push	{r3, lr}
   d7996:	4b02      	ldr	r3, [pc, #8]	; (d79a0 <network_listening+0xc>)
   d7998:	681b      	ldr	r3, [r3, #0]
   d799a:	6a1b      	ldr	r3, [r3, #32]
   d799c:	9301      	str	r3, [sp, #4]
   d799e:	bd08      	pop	{r3, pc}
   d79a0:	00030240 	.word	0x00030240

000d79a4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d79a4:	b508      	push	{r3, lr}
   d79a6:	4b02      	ldr	r3, [pc, #8]	; (d79b0 <network_set_listen_timeout+0xc>)
   d79a8:	681b      	ldr	r3, [r3, #0]
   d79aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d79ac:	9301      	str	r3, [sp, #4]
   d79ae:	bd08      	pop	{r3, pc}
   d79b0:	00030240 	.word	0x00030240

000d79b4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d79b4:	b508      	push	{r3, lr}
   d79b6:	4b02      	ldr	r3, [pc, #8]	; (d79c0 <network_get_listen_timeout+0xc>)
   d79b8:	681b      	ldr	r3, [r3, #0]
   d79ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d79bc:	9301      	str	r3, [sp, #4]
   d79be:	bd08      	pop	{r3, pc}
   d79c0:	00030240 	.word	0x00030240

000d79c4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d79c4:	b508      	push	{r3, lr}
   d79c6:	4b02      	ldr	r3, [pc, #8]	; (d79d0 <network_is_on+0xc>)
   d79c8:	681b      	ldr	r3, [r3, #0]
   d79ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d79cc:	9301      	str	r3, [sp, #4]
   d79ce:	bd08      	pop	{r3, pc}
   d79d0:	00030240 	.word	0x00030240

000d79d4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d79d4:	b508      	push	{r3, lr}
   d79d6:	4b02      	ldr	r3, [pc, #8]	; (d79e0 <network_is_off+0xc>)
   d79d8:	681b      	ldr	r3, [r3, #0]
   d79da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d79dc:	9301      	str	r3, [sp, #4]
   d79de:	bd08      	pop	{r3, pc}
   d79e0:	00030240 	.word	0x00030240

000d79e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d79e4:	b508      	push	{r3, lr}
   d79e6:	4b02      	ldr	r3, [pc, #8]	; (d79f0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d79e8:	681b      	ldr	r3, [r3, #0]
   d79ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d79ec:	9301      	str	r3, [sp, #4]
   d79ee:	bd08      	pop	{r3, pc}
   d79f0:	00030244 	.word	0x00030244

000d79f4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d79f4:	b508      	push	{r3, lr}
   d79f6:	4b02      	ldr	r3, [pc, #8]	; (d7a00 <malloc+0xc>)
   d79f8:	681b      	ldr	r3, [r3, #0]
   d79fa:	681b      	ldr	r3, [r3, #0]
   d79fc:	9301      	str	r3, [sp, #4]
   d79fe:	bd08      	pop	{r3, pc}
   d7a00:	0003021c 	.word	0x0003021c

000d7a04 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7a04:	b508      	push	{r3, lr}
   d7a06:	4b02      	ldr	r3, [pc, #8]	; (d7a10 <free+0xc>)
   d7a08:	681b      	ldr	r3, [r3, #0]
   d7a0a:	685b      	ldr	r3, [r3, #4]
   d7a0c:	9301      	str	r3, [sp, #4]
   d7a0e:	bd08      	pop	{r3, pc}
   d7a10:	0003021c 	.word	0x0003021c

000d7a14 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7a14:	b508      	push	{r3, lr}
   d7a16:	4b02      	ldr	r3, [pc, #8]	; (d7a20 <vsnprintf+0xc>)
   d7a18:	681b      	ldr	r3, [r3, #0]
   d7a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7a1c:	9301      	str	r3, [sp, #4]
   d7a1e:	bd08      	pop	{r3, pc}
   d7a20:	0003021c 	.word	0x0003021c

000d7a24 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7a24:	b508      	push	{r3, lr}
   d7a26:	4b02      	ldr	r3, [pc, #8]	; (d7a30 <__errno+0xc>)
   d7a28:	681b      	ldr	r3, [r3, #0]
   d7a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7a2c:	9301      	str	r3, [sp, #4]
   d7a2e:	bd08      	pop	{r3, pc}
   d7a30:	0003021c 	.word	0x0003021c

000d7a34 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7a34:	b508      	push	{r3, lr}
   d7a36:	4b02      	ldr	r3, [pc, #8]	; (d7a40 <newlib_impure_ptr_callback+0xc>)
   d7a38:	681b      	ldr	r3, [r3, #0]
   d7a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7a3c:	9301      	str	r3, [sp, #4]
   d7a3e:	bd08      	pop	{r3, pc}
   d7a40:	0003021c 	.word	0x0003021c

000d7a44 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7a44:	2200      	movs	r2, #0
   d7a46:	6840      	ldr	r0, [r0, #4]
   d7a48:	4611      	mov	r1, r2
   d7a4a:	f7ff bfa3 	b.w	d7994 <network_listening>

000d7a4e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7a4e:	2200      	movs	r2, #0
   d7a50:	6840      	ldr	r0, [r0, #4]
   d7a52:	4611      	mov	r1, r2
   d7a54:	f7ff bfae 	b.w	d79b4 <network_get_listen_timeout>

000d7a58 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7a58:	6840      	ldr	r0, [r0, #4]
   d7a5a:	2200      	movs	r2, #0
   d7a5c:	f7ff bfa2 	b.w	d79a4 <network_set_listen_timeout>

000d7a60 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7a60:	6840      	ldr	r0, [r0, #4]
   d7a62:	2200      	movs	r2, #0
   d7a64:	f081 0101 	eor.w	r1, r1, #1
   d7a68:	f7ff bf8c 	b.w	d7984 <network_listen>

000d7a6c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7a6c:	2300      	movs	r3, #0
   d7a6e:	6840      	ldr	r0, [r0, #4]
   d7a70:	461a      	mov	r2, r3
   d7a72:	4619      	mov	r1, r3
   d7a74:	f7ff bf7e 	b.w	d7974 <network_off>

000d7a78 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7a78:	2300      	movs	r3, #0
   d7a7a:	6840      	ldr	r0, [r0, #4]
   d7a7c:	461a      	mov	r2, r3
   d7a7e:	4619      	mov	r1, r3
   d7a80:	f7ff bf70 	b.w	d7964 <network_on>

000d7a84 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7a84:	2200      	movs	r2, #0
   d7a86:	6840      	ldr	r0, [r0, #4]
   d7a88:	4611      	mov	r1, r2
   d7a8a:	f7ff bf63 	b.w	d7954 <network_ready>

000d7a8e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7a8e:	2200      	movs	r2, #0
   d7a90:	6840      	ldr	r0, [r0, #4]
   d7a92:	4611      	mov	r1, r2
   d7a94:	f7ff bf4e 	b.w	d7934 <network_connecting>

000d7a98 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7a98:	6840      	ldr	r0, [r0, #4]
   d7a9a:	2200      	movs	r2, #0
   d7a9c:	2102      	movs	r1, #2
   d7a9e:	f7ff bf51 	b.w	d7944 <network_disconnect>

000d7aa2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7aa2:	2300      	movs	r3, #0
   d7aa4:	6840      	ldr	r0, [r0, #4]
   d7aa6:	461a      	mov	r2, r3
   d7aa8:	f7ff bf3c 	b.w	d7924 <network_connect>

000d7aac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7aac:	4b02      	ldr	r3, [pc, #8]	; (d7ab8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7aae:	2203      	movs	r2, #3
   d7ab0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7ab2:	4a02      	ldr	r2, [pc, #8]	; (d7abc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7ab4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7ab6:	4770      	bx	lr
   d7ab8:	2003e584 	.word	0x2003e584
   d7abc:	000dbcd8 	.word	0x000dbcd8

000d7ac0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d7ac0:	2100      	movs	r1, #0
   d7ac2:	f7ff beb3 	b.w	d782c <hal_spi_acquire>

000d7ac6 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d7ac6:	2100      	movs	r1, #0
   d7ac8:	f7ff beb8 	b.w	d783c <hal_spi_release>

000d7acc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7acc:	b510      	push	{r4, lr}
   d7ace:	4604      	mov	r4, r0
   d7ad0:	4608      	mov	r0, r1
{
    _spi = spi;
   d7ad2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7ad4:	f7ff fe7a 	bl	d77cc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7ad8:	2300      	movs	r3, #0
   d7ada:	6063      	str	r3, [r4, #4]
}
   d7adc:	4620      	mov	r0, r4
   d7ade:	bd10      	pop	{r4, pc}

000d7ae0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d7ae0:	b510      	push	{r4, lr}
   d7ae2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7ae4:	7800      	ldrb	r0, [r0, #0]
   d7ae6:	f7ff ffeb 	bl	d7ac0 <_ZN8SPIClass4lockEv.isra.0>
   d7aea:	b948      	cbnz	r0, d7b00 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d7aec:	7820      	ldrb	r0, [r4, #0]
   d7aee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7af2:	f7ff fe5b 	bl	d77ac <hal_spi_begin>
        unlock();
   d7af6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d7afc:	f7ff bfe3 	b.w	d7ac6 <_ZN8SPIClass6unlockEv.isra.0>
}
   d7b00:	bd10      	pop	{r4, pc}

000d7b02 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d7b02:	7800      	ldrb	r0, [r0, #0]
   d7b04:	f7ff bfdf 	b.w	d7ac6 <_ZN8SPIClass6unlockEv.isra.0>

000d7b08 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7b08:	0840      	lsrs	r0, r0, #1
{
   d7b0a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d7b0c:	6018      	str	r0, [r3, #0]
   d7b0e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d7b10:	6818      	ldr	r0, [r3, #0]
   d7b12:	4288      	cmp	r0, r1
   d7b14:	b2e5      	uxtb	r5, r4
   d7b16:	d906      	bls.n	d7b26 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7b18:	3401      	adds	r4, #1
   d7b1a:	2c08      	cmp	r4, #8
   d7b1c:	d002      	beq.n	d7b24 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d7b1e:	0840      	lsrs	r0, r0, #1
   d7b20:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d7b22:	e7f5      	b.n	d7b10 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7b24:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d7b26:	4b02      	ldr	r3, [pc, #8]	; (d7b30 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7b28:	5d5b      	ldrb	r3, [r3, r5]
   d7b2a:	7013      	strb	r3, [r2, #0]
}
   d7b2c:	bd30      	pop	{r4, r5, pc}
   d7b2e:	bf00      	nop
   d7b30:	000dbd0c 	.word	0x000dbd0c

000d7b34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d7b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7b38:	4606      	mov	r6, r0
   d7b3a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d7b3c:	7800      	ldrb	r0, [r0, #0]
{
   d7b3e:	460c      	mov	r4, r1
    CHECK(lock());
   d7b40:	f7ff ffbe 	bl	d7ac0 <_ZN8SPIClass4lockEv.isra.0>
   d7b44:	2800      	cmp	r0, #0
   d7b46:	db1b      	blt.n	d7b80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d7b48:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d7b4a:	2214      	movs	r2, #20
   d7b4c:	2100      	movs	r1, #0
   d7b4e:	a809      	add	r0, sp, #36	; 0x24
   d7b50:	f003 f84a 	bl	dabe8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7b54:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d7b56:	2200      	movs	r2, #0
   d7b58:	a909      	add	r1, sp, #36	; 0x24
   d7b5a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d7b5c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d7b60:	f7ff fe44 	bl	d77ec <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d7b64:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d7b68:	b113      	cbz	r3, d7b70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d7b6a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d7b6e:	b155      	cbz	r5, d7b86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d7b70:	2700      	movs	r7, #0
   d7b72:	46b9      	mov	r9, r7
   d7b74:	46b8      	mov	r8, r7
   d7b76:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d7b78:	7923      	ldrb	r3, [r4, #4]
   d7b7a:	b15d      	cbz	r5, d7b94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d7b7c:	b1c3      	cbz	r3, d7bb0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d7b7e:	2000      	movs	r0, #0
}
   d7b80:	b00f      	add	sp, #60	; 0x3c
   d7b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d7b86:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7b8a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7b8e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d7b92:	e7f1      	b.n	d7b78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d7b94:	2b00      	cmp	r3, #0
   d7b96:	d135      	bne.n	d7c04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d7b98:	68a3      	ldr	r3, [r4, #8]
   d7b9a:	4543      	cmp	r3, r8
   d7b9c:	d108      	bne.n	d7bb0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d7b9e:	f88d 9020 	strb.w	r9, [sp, #32]
   d7ba2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d7ba6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7baa:	89a3      	ldrh	r3, [r4, #12]
   d7bac:	429a      	cmp	r2, r3
   d7bae:	d0e6      	beq.n	d7b7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d7bb0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d7bb2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d7bb4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d7bb8:	980a      	ldr	r0, [sp, #40]	; 0x28
   d7bba:	ab04      	add	r3, sp, #16
   d7bbc:	f10d 020f 	add.w	r2, sp, #15
   d7bc0:	f7ff ffa2 	bl	d7b08 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d7bc4:	7921      	ldrb	r1, [r4, #4]
   d7bc6:	b985      	cbnz	r5, d7bea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d7bc8:	b989      	cbnz	r1, d7bee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d7bca:	68a3      	ldr	r3, [r4, #8]
   d7bcc:	4543      	cmp	r3, r8
   d7bce:	d30e      	bcc.n	d7bee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d7bd0:	f88d 9020 	strb.w	r9, [sp, #32]
   d7bd4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d7bd8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7bdc:	89a3      	ldrh	r3, [r4, #12]
   d7bde:	429a      	cmp	r2, r3
   d7be0:	d105      	bne.n	d7bee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d7be2:	9b04      	ldr	r3, [sp, #16]
   d7be4:	4543      	cmp	r3, r8
   d7be6:	d102      	bne.n	d7bee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d7be8:	e7c9      	b.n	d7b7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d7bea:	2900      	cmp	r1, #0
   d7bec:	d1f9      	bne.n	d7be2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d7bee:	2300      	movs	r3, #0
   d7bf0:	9301      	str	r3, [sp, #4]
   d7bf2:	7b63      	ldrb	r3, [r4, #13]
   d7bf4:	9300      	str	r3, [sp, #0]
   d7bf6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d7bfa:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d7bfc:	7830      	ldrb	r0, [r6, #0]
   d7bfe:	f7ff fe0d 	bl	d781c <hal_spi_set_settings>
   d7c02:	e7bc      	b.n	d7b7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d7c04:	e9cd 5500 	strd	r5, r5, [sp]
   d7c08:	462b      	mov	r3, r5
   d7c0a:	462a      	mov	r2, r5
   d7c0c:	2101      	movs	r1, #1
   d7c0e:	e7f5      	b.n	d7bfc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d7c10 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7c10:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d7c12:	7800      	ldrb	r0, [r0, #0]
   d7c14:	f7ff fdd2 	bl	d77bc <hal_spi_transfer>
}
   d7c18:	b2c0      	uxtb	r0, r0
   d7c1a:	bd08      	pop	{r3, pc}

000d7c1c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d7c1c:	b530      	push	{r4, r5, lr}
   d7c1e:	b087      	sub	sp, #28
   d7c20:	4604      	mov	r4, r0
   d7c22:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7c24:	9500      	str	r5, [sp, #0]
   d7c26:	7800      	ldrb	r0, [r0, #0]
   d7c28:	f7ff fde8 	bl	d77fc <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d7c2c:	b93d      	cbnz	r5, d7c3e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d7c2e:	7820      	ldrb	r0, [r4, #0]
   d7c30:	a902      	add	r1, sp, #8
   d7c32:	f7ff fdeb 	bl	d780c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d7c36:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7c3a:	07db      	lsls	r3, r3, #31
   d7c3c:	d4f7      	bmi.n	d7c2e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d7c3e:	b007      	add	sp, #28
   d7c40:	bd30      	pop	{r4, r5, pc}
	...

000d7c44 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7c44:	4b05      	ldr	r3, [pc, #20]	; (d7c5c <_GLOBAL__sub_I_System+0x18>)
   d7c46:	2202      	movs	r2, #2
   d7c48:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7c4a:	4b05      	ldr	r3, [pc, #20]	; (d7c60 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d7c4c:	4a05      	ldr	r2, [pc, #20]	; (d7c64 <_GLOBAL__sub_I_System+0x20>)
   d7c4e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d7c50:	2000      	movs	r0, #0
   d7c52:	6018      	str	r0, [r3, #0]
   d7c54:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d7c56:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7c58:	f7ff be40 	b.w	d78dc <set_system_mode>
   d7c5c:	2003e598 	.word	0x2003e598
   d7c60:	2003e58c 	.word	0x2003e58c
   d7c64:	ffff0000 	.word	0xffff0000

000d7c68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7c68:	4802      	ldr	r0, [pc, #8]	; (d7c74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d7c6a:	2300      	movs	r3, #0
   d7c6c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7c6e:	f7ff bced 	b.w	d764c <os_mutex_recursive_create>
   d7c72:	bf00      	nop
   d7c74:	2003e59c 	.word	0x2003e59c

000d7c78 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c7a:	4606      	mov	r6, r0
   d7c7c:	460d      	mov	r5, r1
  size_t n = 0;
   d7c7e:	188f      	adds	r7, r1, r2
   d7c80:	2400      	movs	r4, #0
  while (size--) {
   d7c82:	42bd      	cmp	r5, r7
   d7c84:	d00c      	beq.n	d7ca0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7c86:	6833      	ldr	r3, [r6, #0]
   d7c88:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7c8c:	689b      	ldr	r3, [r3, #8]
   d7c8e:	4630      	mov	r0, r6
   d7c90:	4798      	blx	r3
     if (chunk>=0)
   d7c92:	1e03      	subs	r3, r0, #0
   d7c94:	db01      	blt.n	d7c9a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7c96:	441c      	add	r4, r3
  while (size--) {
   d7c98:	e7f3      	b.n	d7c82 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7c9a:	2c00      	cmp	r4, #0
   d7c9c:	bf08      	it	eq
   d7c9e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7ca0:	4620      	mov	r0, r4
   d7ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ca4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7ca4:	b513      	push	{r0, r1, r4, lr}
   d7ca6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d7ca8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7caa:	b159      	cbz	r1, d7cc4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7cac:	9101      	str	r1, [sp, #4]
   d7cae:	f002 ffc7 	bl	dac40 <strlen>
   d7cb2:	6823      	ldr	r3, [r4, #0]
   d7cb4:	9901      	ldr	r1, [sp, #4]
   d7cb6:	68db      	ldr	r3, [r3, #12]
   d7cb8:	4602      	mov	r2, r0
   d7cba:	4620      	mov	r0, r4
    }
   d7cbc:	b002      	add	sp, #8
   d7cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7cc2:	4718      	bx	r3
    }
   d7cc4:	b002      	add	sp, #8
   d7cc6:	bd10      	pop	{r4, pc}

000d7cc8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7cc8:	b508      	push	{r3, lr}
  return write(str);
   d7cca:	f7ff ffeb 	bl	d7ca4 <_ZN5Print5writeEPKc>
}
   d7cce:	bd08      	pop	{r3, pc}

000d7cd0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7cd0:	6803      	ldr	r3, [r0, #0]
   d7cd2:	689b      	ldr	r3, [r3, #8]
   d7cd4:	4718      	bx	r3

000d7cd6 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d7cd6:	b508      	push	{r3, lr}
  return write(str);
   d7cd8:	f7ff ffe4 	bl	d7ca4 <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   d7cdc:	bd08      	pop	{r3, pc}

000d7cde <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d7cde:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7ce0:	210d      	movs	r1, #13
{
   d7ce2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7ce4:	f7ff fff4 	bl	d7cd0 <_ZN5Print5printEc>
  n += print('\n');
   d7ce8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7cea:	4604      	mov	r4, r0
  n += print('\n');
   d7cec:	4628      	mov	r0, r5
   d7cee:	f7ff ffef 	bl	d7cd0 <_ZN5Print5printEc>
  return n;
}
   d7cf2:	4420      	add	r0, r4
   d7cf4:	bd38      	pop	{r3, r4, r5, pc}

000d7cf6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7cf6:	b538      	push	{r3, r4, r5, lr}
   d7cf8:	4605      	mov	r5, r0
  return write(str);
   d7cfa:	f7ff ffd3 	bl	d7ca4 <_ZN5Print5writeEPKc>
   d7cfe:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7d00:	4628      	mov	r0, r5
   d7d02:	f7ff ffec 	bl	d7cde <_ZN5Print7printlnEv>
  return n;
}
   d7d06:	4420      	add	r0, r4
   d7d08:	bd38      	pop	{r3, r4, r5, pc}

000d7d0a <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d7d0a:	f7ff bff4 	b.w	d7cf6 <_ZN5Print7printlnEPKc>

000d7d0e <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7d0e:	b530      	push	{r4, r5, lr}
   d7d10:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7d12:	2300      	movs	r3, #0
   d7d14:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7d18:	2a01      	cmp	r2, #1
   d7d1a:	bf98      	it	ls
   d7d1c:	220a      	movls	r2, #10
   d7d1e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7d20:	460d      	mov	r5, r1
   d7d22:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7d26:	fb01 5312 	mls	r3, r1, r2, r5
   d7d2a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7d2e:	2b09      	cmp	r3, #9
   d7d30:	bf94      	ite	ls
   d7d32:	3330      	addls	r3, #48	; 0x30
   d7d34:	3337      	addhi	r3, #55	; 0x37
   d7d36:	b2db      	uxtb	r3, r3
  } while(n);
   d7d38:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7d3a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7d3e:	d9ef      	bls.n	d7d20 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7d40:	4621      	mov	r1, r4
   d7d42:	f7ff ffaf 	bl	d7ca4 <_ZN5Print5writeEPKc>
}
   d7d46:	b00b      	add	sp, #44	; 0x2c
   d7d48:	bd30      	pop	{r4, r5, pc}
	...

000d7d4c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d7d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d50:	ec55 4b10 	vmov	r4, r5, d0
   d7d54:	4606      	mov	r6, r0
   d7d56:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7d58:	ee10 2a10 	vmov	r2, s0
   d7d5c:	ee10 0a10 	vmov	r0, s0
   d7d60:	462b      	mov	r3, r5
   d7d62:	4629      	mov	r1, r5
   d7d64:	f002 fbbc 	bl	da4e0 <__aeabi_dcmpun>
   d7d68:	b140      	cbz	r0, d7d7c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d7d6a:	4953      	ldr	r1, [pc, #332]	; (d7eb8 <_ZN5Print10printFloatEdh+0x16c>)
   d7d6c:	4630      	mov	r0, r6
   d7d6e:	f7ff ff99 	bl	d7ca4 <_ZN5Print5writeEPKc>
   d7d72:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d7d74:	4650      	mov	r0, sl
   d7d76:	b003      	add	sp, #12
   d7d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d7d7c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d7d80:	4b4e      	ldr	r3, [pc, #312]	; (d7ebc <_ZN5Print10printFloatEdh+0x170>)
   d7d82:	f04f 32ff 	mov.w	r2, #4294967295
   d7d86:	4620      	mov	r0, r4
   d7d88:	4649      	mov	r1, r9
   d7d8a:	f002 fba9 	bl	da4e0 <__aeabi_dcmpun>
   d7d8e:	b948      	cbnz	r0, d7da4 <_ZN5Print10printFloatEdh+0x58>
   d7d90:	4b4a      	ldr	r3, [pc, #296]	; (d7ebc <_ZN5Print10printFloatEdh+0x170>)
   d7d92:	f04f 32ff 	mov.w	r2, #4294967295
   d7d96:	4620      	mov	r0, r4
   d7d98:	4649      	mov	r1, r9
   d7d9a:	f002 fb83 	bl	da4a4 <__aeabi_dcmple>
   d7d9e:	b908      	cbnz	r0, d7da4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d7da0:	4947      	ldr	r1, [pc, #284]	; (d7ec0 <_ZN5Print10printFloatEdh+0x174>)
   d7da2:	e7e3      	b.n	d7d6c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d7da4:	4b47      	ldr	r3, [pc, #284]	; (d7ec4 <_ZN5Print10printFloatEdh+0x178>)
   d7da6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7daa:	4620      	mov	r0, r4
   d7dac:	4629      	mov	r1, r5
   d7dae:	f002 fb8d 	bl	da4cc <__aeabi_dcmpgt>
   d7db2:	b108      	cbz	r0, d7db8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d7db4:	4944      	ldr	r1, [pc, #272]	; (d7ec8 <_ZN5Print10printFloatEdh+0x17c>)
   d7db6:	e7d9      	b.n	d7d6c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d7db8:	4b44      	ldr	r3, [pc, #272]	; (d7ecc <_ZN5Print10printFloatEdh+0x180>)
   d7dba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7dbe:	4620      	mov	r0, r4
   d7dc0:	4629      	mov	r1, r5
   d7dc2:	f002 fb65 	bl	da490 <__aeabi_dcmplt>
   d7dc6:	2800      	cmp	r0, #0
   d7dc8:	d1f4      	bne.n	d7db4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d7dca:	2200      	movs	r2, #0
   d7dcc:	2300      	movs	r3, #0
   d7dce:	4620      	mov	r0, r4
   d7dd0:	4629      	mov	r1, r5
   d7dd2:	f002 fb5d 	bl	da490 <__aeabi_dcmplt>
   d7dd6:	b1d0      	cbz	r0, d7e0e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d7dd8:	212d      	movs	r1, #45	; 0x2d
   d7dda:	4630      	mov	r0, r6
   d7ddc:	f7ff ff78 	bl	d7cd0 <_ZN5Print5printEc>
     number = -number;
   d7de0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d7de4:	4682      	mov	sl, r0
     number = -number;
   d7de6:	461d      	mov	r5, r3
  double rounding = 0.5;
   d7de8:	4939      	ldr	r1, [pc, #228]	; (d7ed0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d7dea:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d7ed8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d7dee:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d7df2:	2000      	movs	r0, #0
    rounding /= 10.0;
   d7df4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d7df8:	fa5f f38b 	uxtb.w	r3, fp
   d7dfc:	429f      	cmp	r7, r3
   d7dfe:	d908      	bls.n	d7e12 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d7e00:	4642      	mov	r2, r8
   d7e02:	464b      	mov	r3, r9
   d7e04:	f002 f9fc 	bl	da200 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d7e08:	f10b 0b01 	add.w	fp, fp, #1
   d7e0c:	e7f4      	b.n	d7df8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d7e0e:	4682      	mov	sl, r0
   d7e10:	e7ea      	b.n	d7de8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d7e12:	4622      	mov	r2, r4
   d7e14:	462b      	mov	r3, r5
   d7e16:	f001 ff13 	bl	d9c40 <__adddf3>
   d7e1a:	460d      	mov	r5, r1
   d7e1c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d7e1e:	f002 fb9d 	bl	da55c <__aeabi_d2uiz>
   d7e22:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d7e24:	f002 f848 	bl	d9eb8 <__aeabi_ui2d>
   d7e28:	4602      	mov	r2, r0
   d7e2a:	460b      	mov	r3, r1
   d7e2c:	4620      	mov	r0, r4
   d7e2e:	4629      	mov	r1, r5
   d7e30:	f001 ff04 	bl	d9c3c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7e34:	220a      	movs	r2, #10
   d7e36:	4604      	mov	r4, r0
   d7e38:	460d      	mov	r5, r1
   d7e3a:	4630      	mov	r0, r6
   d7e3c:	4641      	mov	r1, r8
   d7e3e:	f7ff ff66 	bl	d7d0e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d7e42:	4482      	add	sl, r0
  if (digits > 0) {
   d7e44:	b127      	cbz	r7, d7e50 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d7e46:	4923      	ldr	r1, [pc, #140]	; (d7ed4 <_ZN5Print10printFloatEdh+0x188>)
   d7e48:	4630      	mov	r0, r6
   d7e4a:	f7ff ff2b 	bl	d7ca4 <_ZN5Print5writeEPKc>
    n += print(".");
   d7e4e:	4482      	add	sl, r0
    remainder *= 10.0;
   d7e50:	f8df 9084 	ldr.w	r9, [pc, #132]	; d7ed8 <_ZN5Print10printFloatEdh+0x18c>
   d7e54:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d7e58:	3f01      	subs	r7, #1
   d7e5a:	b2ff      	uxtb	r7, r7
   d7e5c:	2fff      	cmp	r7, #255	; 0xff
   d7e5e:	d089      	beq.n	d7d74 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d7e60:	4642      	mov	r2, r8
   d7e62:	464b      	mov	r3, r9
   d7e64:	4620      	mov	r0, r4
   d7e66:	4629      	mov	r1, r5
   d7e68:	f002 f8a0 	bl	d9fac <__aeabi_dmul>
   d7e6c:	4604      	mov	r4, r0
   d7e6e:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d7e70:	f002 fb4c 	bl	da50c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d7e74:	f1b0 0b00 	subs.w	fp, r0, #0
   d7e78:	da1a      	bge.n	d7eb0 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d7e7a:	212d      	movs	r1, #45	; 0x2d
   d7e7c:	4630      	mov	r0, r6
   d7e7e:	f7ff ff27 	bl	d7cd0 <_ZN5Print5printEc>
            val = -n;
   d7e82:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d7e86:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d7e88:	220a      	movs	r2, #10
   d7e8a:	4630      	mov	r0, r6
   d7e8c:	9301      	str	r3, [sp, #4]
   d7e8e:	f7ff ff3e 	bl	d7d0e <_ZN5Print11printNumberEmh>
   d7e92:	9b01      	ldr	r3, [sp, #4]
   d7e94:	4418      	add	r0, r3
    n += print(toPrint);
   d7e96:	4482      	add	sl, r0
    remainder -= toPrint;
   d7e98:	4658      	mov	r0, fp
   d7e9a:	f002 f81d 	bl	d9ed8 <__aeabi_i2d>
   d7e9e:	4602      	mov	r2, r0
   d7ea0:	460b      	mov	r3, r1
   d7ea2:	4620      	mov	r0, r4
   d7ea4:	4629      	mov	r1, r5
   d7ea6:	f001 fec9 	bl	d9c3c <__aeabi_dsub>
   d7eaa:	4604      	mov	r4, r0
   d7eac:	460d      	mov	r5, r1
  while (digits-- > 0)
   d7eae:	e7d3      	b.n	d7e58 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d7eb0:	4659      	mov	r1, fp
        size_t t = 0;
   d7eb2:	2300      	movs	r3, #0
   d7eb4:	e7e8      	b.n	d7e88 <_ZN5Print10printFloatEdh+0x13c>
   d7eb6:	bf00      	nop
   d7eb8:	000dbd14 	.word	0x000dbd14
   d7ebc:	7fefffff 	.word	0x7fefffff
   d7ec0:	000dbd18 	.word	0x000dbd18
   d7ec4:	41efffff 	.word	0x41efffff
   d7ec8:	000dbd1c 	.word	0x000dbd1c
   d7ecc:	c1efffff 	.word	0xc1efffff
   d7ed0:	3fe00000 	.word	0x3fe00000
   d7ed4:	000db2f4 	.word	0x000db2f4
   d7ed8:	40240000 	.word	0x40240000

000d7edc <_ZN5Print5printEfi>:
{
   d7edc:	b538      	push	{r3, r4, r5, lr}
   d7ede:	4604      	mov	r4, r0
   d7ee0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d7ee4:	b2cd      	uxtb	r5, r1
   d7ee6:	f002 f809 	bl	d9efc <__aeabi_f2d>
   d7eea:	ec41 0b10 	vmov	d0, r0, r1
   d7eee:	4629      	mov	r1, r5
   d7ef0:	4620      	mov	r0, r4
}
   d7ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d7ef6:	f7ff bf29 	b.w	d7d4c <_ZN5Print10printFloatEdh>

000d7efa <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   d7efa:	b2c9      	uxtb	r1, r1
   d7efc:	f7ff bf26 	b.w	d7d4c <_ZN5Print10printFloatEdh>

000d7f00 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d7f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7f04:	b086      	sub	sp, #24
   d7f06:	af00      	add	r7, sp, #0
   d7f08:	4605      	mov	r5, r0
   d7f0a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d7f0c:	1d38      	adds	r0, r7, #4
   d7f0e:	2114      	movs	r1, #20
{
   d7f10:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7f12:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d7f14:	f7ff fd7e 	bl	d7a14 <vsnprintf>

    if (n<bufsize)
   d7f18:	2813      	cmp	r0, #19
   d7f1a:	d80e      	bhi.n	d7f3a <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d7f1c:	1d39      	adds	r1, r7, #4
   d7f1e:	4628      	mov	r0, r5
   d7f20:	f7ff fec0 	bl	d7ca4 <_ZN5Print5writeEPKc>
   d7f24:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7f26:	b11e      	cbz	r6, d7f30 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d7f28:	4628      	mov	r0, r5
   d7f2a:	f7ff fed8 	bl	d7cde <_ZN5Print7printlnEv>
   d7f2e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d7f30:	4620      	mov	r0, r4
   d7f32:	3718      	adds	r7, #24
   d7f34:	46bd      	mov	sp, r7
   d7f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7f3a:	f100 0308 	add.w	r3, r0, #8
   d7f3e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7f42:	46e8      	mov	r8, sp
        char bigger[n+1];
   d7f44:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d7f48:	4622      	mov	r2, r4
   d7f4a:	1c41      	adds	r1, r0, #1
   d7f4c:	683b      	ldr	r3, [r7, #0]
   d7f4e:	4668      	mov	r0, sp
   d7f50:	f7ff fd60 	bl	d7a14 <vsnprintf>
  return write(str);
   d7f54:	4669      	mov	r1, sp
   d7f56:	4628      	mov	r0, r5
   d7f58:	f7ff fea4 	bl	d7ca4 <_ZN5Print5writeEPKc>
   d7f5c:	4604      	mov	r4, r0
   d7f5e:	46c5      	mov	sp, r8
   d7f60:	e7e1      	b.n	d7f26 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000d7f64 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7f64:	4b01      	ldr	r3, [pc, #4]	; (d7f6c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7f66:	4a02      	ldr	r2, [pc, #8]	; (d7f70 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7f68:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7f6a:	4770      	bx	lr
   d7f6c:	2003e5a0 	.word	0x2003e5a0
   d7f70:	000dbd20 	.word	0x000dbd20

000d7f74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7f74:	4b02      	ldr	r3, [pc, #8]	; (d7f80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7f76:	681a      	ldr	r2, [r3, #0]
   d7f78:	4b02      	ldr	r3, [pc, #8]	; (d7f84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7f7a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7f7c:	4770      	bx	lr
   d7f7e:	bf00      	nop
   d7f80:	2003e428 	.word	0x2003e428
   d7f84:	2003e5a4 	.word	0x2003e5a4

000d7f88 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d7f88:	428a      	cmp	r2, r1
{
   d7f8a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d7f8c:	d007      	beq.n	d7f9e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d7f8e:	9c02      	ldr	r4, [sp, #8]
   d7f90:	1a40      	subs	r0, r0, r1
   d7f92:	1ae4      	subs	r4, r4, r3
   d7f94:	4360      	muls	r0, r4
   d7f96:	1a52      	subs	r2, r2, r1
   d7f98:	fb90 f0f2 	sdiv	r0, r0, r2
   d7f9c:	4418      	add	r0, r3
}
   d7f9e:	bd10      	pop	{r4, pc}

000d7fa0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7fa0:	2100      	movs	r1, #0
   d7fa2:	f7ff bca3 	b.w	d78ec <system_delay_ms>
	...

000d7fa8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d7fa8:	4b01      	ldr	r3, [pc, #4]	; (d7fb0 <_GLOBAL__sub_I_RGB+0x8>)
   d7faa:	2200      	movs	r2, #0
   d7fac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d7fae:	4770      	bx	lr
   d7fb0:	2003e5a8 	.word	0x2003e5a8

000d7fb4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7fb4:	4b01      	ldr	r3, [pc, #4]	; (d7fbc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7fb6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7fb8:	4770      	bx	lr
   d7fba:	bf00      	nop
   d7fbc:	2003e430 	.word	0x2003e430

000d7fc0 <serialEventRun>:
{
   d7fc0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7fc2:	4b0b      	ldr	r3, [pc, #44]	; (d7ff0 <serialEventRun+0x30>)
   d7fc4:	b143      	cbz	r3, d7fd8 <serialEventRun+0x18>
   d7fc6:	f000 f967 	bl	d8298 <_Z16_fetch_usbserialv>
   d7fca:	6803      	ldr	r3, [r0, #0]
   d7fcc:	691b      	ldr	r3, [r3, #16]
   d7fce:	4798      	blx	r3
   d7fd0:	2800      	cmp	r0, #0
   d7fd2:	dd01      	ble.n	d7fd8 <serialEventRun+0x18>
        serialEvent();
   d7fd4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7fd8:	4b06      	ldr	r3, [pc, #24]	; (d7ff4 <serialEventRun+0x34>)
   d7fda:	b143      	cbz	r3, d7fee <serialEventRun+0x2e>
   d7fdc:	f000 fa4e 	bl	d847c <_Z22__fetch_global_Serial1v>
   d7fe0:	6803      	ldr	r3, [r0, #0]
   d7fe2:	691b      	ldr	r3, [r3, #16]
   d7fe4:	4798      	blx	r3
   d7fe6:	2800      	cmp	r0, #0
   d7fe8:	dd01      	ble.n	d7fee <serialEventRun+0x2e>
        serialEvent1();
   d7fea:	f3af 8000 	nop.w
}
   d7fee:	bd08      	pop	{r3, pc}
	...

000d7ff8 <_post_loop>:
{
   d7ff8:	b508      	push	{r3, lr}
	serialEventRun();
   d7ffa:	f7ff ffe1 	bl	d7fc0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7ffe:	f7ff fafd 	bl	d75fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8002:	4b01      	ldr	r3, [pc, #4]	; (d8008 <_post_loop+0x10>)
   d8004:	6018      	str	r0, [r3, #0]
}
   d8006:	bd08      	pop	{r3, pc}
   d8008:	2003e730 	.word	0x2003e730

000d800c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d800c:	4805      	ldr	r0, [pc, #20]	; (d8024 <_Z33system_initialize_user_backup_ramv+0x18>)
   d800e:	4a06      	ldr	r2, [pc, #24]	; (d8028 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d8010:	4906      	ldr	r1, [pc, #24]	; (d802c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d8012:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8014:	1a12      	subs	r2, r2, r0
   d8016:	f002 fdd9 	bl	dabcc <memcpy>
    __backup_sram_signature = signature;
   d801a:	4b05      	ldr	r3, [pc, #20]	; (d8030 <_Z33system_initialize_user_backup_ramv+0x24>)
   d801c:	4a05      	ldr	r2, [pc, #20]	; (d8034 <_Z33system_initialize_user_backup_ramv+0x28>)
   d801e:	601a      	str	r2, [r3, #0]
}
   d8020:	bd08      	pop	{r3, pc}
   d8022:	bf00      	nop
   d8024:	2003f400 	.word	0x2003f400
   d8028:	2003f404 	.word	0x2003f404
   d802c:	000dbea8 	.word	0x000dbea8
   d8030:	2003f400 	.word	0x2003f400
   d8034:	9a271c1e 	.word	0x9a271c1e

000d8038 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8038:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d803a:	2300      	movs	r3, #0
   d803c:	9300      	str	r3, [sp, #0]
   d803e:	461a      	mov	r2, r3
   d8040:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8044:	f7ff fc64 	bl	d7910 <system_ctrl_set_result>
}
   d8048:	b003      	add	sp, #12
   d804a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8050 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8050:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8052:	8843      	ldrh	r3, [r0, #2]
   d8054:	2b0a      	cmp	r3, #10
   d8056:	d008      	beq.n	d806a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8058:	2b50      	cmp	r3, #80	; 0x50
   d805a:	d10b      	bne.n	d8074 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d805c:	4b09      	ldr	r3, [pc, #36]	; (d8084 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d805e:	681b      	ldr	r3, [r3, #0]
   d8060:	b14b      	cbz	r3, d8076 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d8062:	b003      	add	sp, #12
   d8064:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8068:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d806a:	f7ff ffe5 	bl	d8038 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d806e:	b003      	add	sp, #12
   d8070:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8074:	2300      	movs	r3, #0
   d8076:	9300      	str	r3, [sp, #0]
   d8078:	461a      	mov	r2, r3
   d807a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d807e:	f7ff fc47 	bl	d7910 <system_ctrl_set_result>
}
   d8082:	e7f4      	b.n	d806e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8084:	2003e5bc 	.word	0x2003e5bc

000d8088 <module_user_init_hook>:
{
   d8088:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d808a:	4812      	ldr	r0, [pc, #72]	; (d80d4 <module_user_init_hook+0x4c>)
   d808c:	2100      	movs	r1, #0
   d808e:	f7ff fcd1 	bl	d7a34 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d8092:	4b11      	ldr	r3, [pc, #68]	; (d80d8 <module_user_init_hook+0x50>)
   d8094:	681a      	ldr	r2, [r3, #0]
   d8096:	4b11      	ldr	r3, [pc, #68]	; (d80dc <module_user_init_hook+0x54>)
   d8098:	429a      	cmp	r2, r3
   d809a:	4b11      	ldr	r3, [pc, #68]	; (d80e0 <module_user_init_hook+0x58>)
   d809c:	bf0c      	ite	eq
   d809e:	2201      	moveq	r2, #1
   d80a0:	2200      	movne	r2, #0
   d80a2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d80a4:	d001      	beq.n	d80aa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d80a6:	f7ff ffb1 	bl	d800c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d80aa:	f7ff fa97 	bl	d75dc <HAL_RNG_GetRandomNumber>
   d80ae:	4604      	mov	r4, r0
    srand(seed);
   d80b0:	f002 fda2 	bl	dabf8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d80b4:	4b0b      	ldr	r3, [pc, #44]	; (d80e4 <module_user_init_hook+0x5c>)
   d80b6:	b113      	cbz	r3, d80be <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d80b8:	4620      	mov	r0, r4
   d80ba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d80be:	2100      	movs	r1, #0
   d80c0:	4808      	ldr	r0, [pc, #32]	; (d80e4 <module_user_init_hook+0x5c>)
   d80c2:	f7ff fc8f 	bl	d79e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d80c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d80ca:	4807      	ldr	r0, [pc, #28]	; (d80e8 <module_user_init_hook+0x60>)
   d80cc:	2100      	movs	r1, #0
   d80ce:	f7ff bc15 	b.w	d78fc <system_ctrl_set_app_request_handler>
   d80d2:	bf00      	nop
   d80d4:	000d7fb5 	.word	0x000d7fb5
   d80d8:	2003f400 	.word	0x2003f400
   d80dc:	9a271c1e 	.word	0x9a271c1e
   d80e0:	2003e5b8 	.word	0x2003e5b8
   d80e4:	00000000 	.word	0x00000000
   d80e8:	000d8051 	.word	0x000d8051

000d80ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d80ec:	4770      	bx	lr

000d80ee <_ZN9IPAddressD0Ev>:
   d80ee:	b510      	push	{r4, lr}
   d80f0:	2118      	movs	r1, #24
   d80f2:	4604      	mov	r4, r0
   d80f4:	f000 fbfc 	bl	d88f0 <_ZdlPvj>
   d80f8:	4620      	mov	r0, r4
   d80fa:	bd10      	pop	{r4, pc}

000d80fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d80fc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d80fe:	7d03      	ldrb	r3, [r0, #20]
   d8100:	2b06      	cmp	r3, #6
{
   d8102:	b08d      	sub	sp, #52	; 0x34
   d8104:	460e      	mov	r6, r1
   d8106:	f100 0704 	add.w	r7, r0, #4
   d810a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d810e:	d012      	beq.n	d8136 <_ZNK9IPAddress7printToER5Print+0x3a>
   d8110:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8114:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8118:	220a      	movs	r2, #10
   d811a:	4630      	mov	r0, r6
   d811c:	f7ff fdf7 	bl	d7d0e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8120:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8122:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8124:	d019      	beq.n	d815a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8126:	2c00      	cmp	r4, #0
   d8128:	d0f4      	beq.n	d8114 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d812a:	212e      	movs	r1, #46	; 0x2e
   d812c:	4630      	mov	r0, r6
   d812e:	f7ff fdcf 	bl	d7cd0 <_ZN5Print5printEc>
   d8132:	4404      	add	r4, r0
   d8134:	e7ee      	b.n	d8114 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8136:	232f      	movs	r3, #47	; 0x2f
   d8138:	466a      	mov	r2, sp
   d813a:	4639      	mov	r1, r7
   d813c:	200a      	movs	r0, #10
		buf[0] = 0;
   d813e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8142:	f7ff fa8b 	bl	d765c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8146:	4668      	mov	r0, sp
   d8148:	f002 fd7a 	bl	dac40 <strlen>
   d814c:	6833      	ldr	r3, [r6, #0]
   d814e:	4602      	mov	r2, r0
   d8150:	68db      	ldr	r3, [r3, #12]
   d8152:	4669      	mov	r1, sp
   d8154:	4630      	mov	r0, r6
   d8156:	4798      	blx	r3
   d8158:	4604      	mov	r4, r0
    }
    return n;
}
   d815a:	4620      	mov	r0, r4
   d815c:	b00d      	add	sp, #52	; 0x34
   d815e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8160 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8160:	b510      	push	{r4, lr}
   d8162:	4b05      	ldr	r3, [pc, #20]	; (d8178 <_ZN9IPAddressC1Ev+0x18>)
   d8164:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8166:	2211      	movs	r2, #17
   d8168:	f840 3b04 	str.w	r3, [r0], #4
   d816c:	2100      	movs	r1, #0
   d816e:	f002 fd3b 	bl	dabe8 <memset>
}
   d8172:	4620      	mov	r0, r4
   d8174:	bd10      	pop	{r4, pc}
   d8176:	bf00      	nop
   d8178:	000dbd48 	.word	0x000dbd48

000d817c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d817c:	4603      	mov	r3, r0
   d817e:	4a07      	ldr	r2, [pc, #28]	; (d819c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8180:	b510      	push	{r4, lr}
   d8182:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8186:	f101 0210 	add.w	r2, r1, #16
   d818a:	f851 4b04 	ldr.w	r4, [r1], #4
   d818e:	f843 4b04 	str.w	r4, [r3], #4
   d8192:	4291      	cmp	r1, r2
   d8194:	d1f9      	bne.n	d818a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8196:	780a      	ldrb	r2, [r1, #0]
   d8198:	701a      	strb	r2, [r3, #0]
}
   d819a:	bd10      	pop	{r4, pc}
   d819c:	000dbd48 	.word	0x000dbd48

000d81a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d81a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d81a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d81a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d81aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d81ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d81b2:	2304      	movs	r3, #4
   d81b4:	6041      	str	r1, [r0, #4]
   d81b6:	7503      	strb	r3, [r0, #20]
}
   d81b8:	bd10      	pop	{r4, pc}

000d81ba <_ZN9IPAddressaSEPKh>:
{
   d81ba:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d81bc:	78cb      	ldrb	r3, [r1, #3]
   d81be:	9300      	str	r3, [sp, #0]
   d81c0:	788b      	ldrb	r3, [r1, #2]
   d81c2:	784a      	ldrb	r2, [r1, #1]
   d81c4:	7809      	ldrb	r1, [r1, #0]
   d81c6:	f7ff ffeb 	bl	d81a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d81ca:	b002      	add	sp, #8
   d81cc:	bd10      	pop	{r4, pc}

000d81ce <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d81ce:	7441      	strb	r1, [r0, #17]
}
   d81d0:	4770      	bx	lr

000d81d2 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d81d2:	4770      	bx	lr

000d81d4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d81d4:	4770      	bx	lr

000d81d6 <_ZN9USBSerial4readEv>:
{
   d81d6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d81d8:	2100      	movs	r1, #0
   d81da:	7c00      	ldrb	r0, [r0, #16]
   d81dc:	f7ff fb56 	bl	d788c <HAL_USB_USART_Receive_Data>
}
   d81e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d81e4:	bd08      	pop	{r3, pc}

000d81e6 <_ZN9USBSerial4peekEv>:
{
   d81e6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d81e8:	2101      	movs	r1, #1
   d81ea:	7c00      	ldrb	r0, [r0, #16]
   d81ec:	f7ff fb4e 	bl	d788c <HAL_USB_USART_Receive_Data>
}
   d81f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d81f4:	bd08      	pop	{r3, pc}

000d81f6 <_ZN9USBSerial17availableForWriteEv>:
{
   d81f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d81f8:	7c00      	ldrb	r0, [r0, #16]
   d81fa:	f7ff fb3f 	bl	d787c <HAL_USB_USART_Available_Data_For_Write>
}
   d81fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8202:	bd08      	pop	{r3, pc}

000d8204 <_ZN9USBSerial9availableEv>:
{
   d8204:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8206:	7c00      	ldrb	r0, [r0, #16]
   d8208:	f7ff fb30 	bl	d786c <HAL_USB_USART_Available_Data>
}
   d820c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8210:	bd08      	pop	{r3, pc}

000d8212 <_ZN9USBSerial5writeEh>:
{
   d8212:	b513      	push	{r0, r1, r4, lr}
   d8214:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8216:	7c00      	ldrb	r0, [r0, #16]
{
   d8218:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d821a:	f7ff fb2f 	bl	d787c <HAL_USB_USART_Available_Data_For_Write>
   d821e:	2800      	cmp	r0, #0
   d8220:	9901      	ldr	r1, [sp, #4]
   d8222:	dc01      	bgt.n	d8228 <_ZN9USBSerial5writeEh+0x16>
   d8224:	7c60      	ldrb	r0, [r4, #17]
   d8226:	b120      	cbz	r0, d8232 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8228:	7c20      	ldrb	r0, [r4, #16]
   d822a:	f7ff fb37 	bl	d789c <HAL_USB_USART_Send_Data>
   d822e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d8232:	b002      	add	sp, #8
   d8234:	bd10      	pop	{r4, pc}

000d8236 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d8236:	7c00      	ldrb	r0, [r0, #16]
   d8238:	f7ff bb38 	b.w	d78ac <HAL_USB_USART_Flush_Data>

000d823c <_ZN9USBSerialD0Ev>:
   d823c:	b510      	push	{r4, lr}
   d823e:	2114      	movs	r1, #20
   d8240:	4604      	mov	r4, r0
   d8242:	f000 fb55 	bl	d88f0 <_ZdlPvj>
   d8246:	4620      	mov	r0, r4
   d8248:	bd10      	pop	{r4, pc}
	...

000d824c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d824c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d824e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8252:	4604      	mov	r4, r0
   d8254:	4608      	mov	r0, r1
   d8256:	2100      	movs	r1, #0
   d8258:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d825c:	4b04      	ldr	r3, [pc, #16]	; (d8270 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d825e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d8260:	2301      	movs	r3, #1
  _serial = serial;
   d8262:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8264:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d8266:	4611      	mov	r1, r2
   d8268:	f7ff faf0 	bl	d784c <HAL_USB_USART_Init>
}
   d826c:	4620      	mov	r0, r4
   d826e:	bd10      	pop	{r4, pc}
   d8270:	000dbd5c 	.word	0x000dbd5c

000d8274 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8274:	7c00      	ldrb	r0, [r0, #16]
   d8276:	2200      	movs	r2, #0
   d8278:	f7ff baf0 	b.w	d785c <HAL_USB_USART_Begin>

000d827c <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   d827c:	7c00      	ldrb	r0, [r0, #16]
   d827e:	f7ff bb1d 	b.w	d78bc <HAL_USB_USART_Is_Enabled>

000d8282 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   d8282:	f7ff bffb 	b.w	d827c <_ZN9USBSerial9isEnabledEv>

000d8286 <_Z19acquireSerialBufferv>:
{
   d8286:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8288:	2214      	movs	r2, #20
{
   d828a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d828c:	2100      	movs	r1, #0
   d828e:	f002 fcab 	bl	dabe8 <memset>
}
   d8292:	4620      	mov	r0, r4
   d8294:	bd10      	pop	{r4, pc}
	...

000d8298 <_Z16_fetch_usbserialv>:
{
   d8298:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d829a:	4c0f      	ldr	r4, [pc, #60]	; (d82d8 <_Z16_fetch_usbserialv+0x40>)
{
   d829c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d829e:	a803      	add	r0, sp, #12
   d82a0:	f7ff fff1 	bl	d8286 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d82a4:	7821      	ldrb	r1, [r4, #0]
   d82a6:	f3bf 8f5b 	dmb	ish
   d82aa:	f011 0101 	ands.w	r1, r1, #1
   d82ae:	d10f      	bne.n	d82d0 <_Z16_fetch_usbserialv+0x38>
   d82b0:	4620      	mov	r0, r4
   d82b2:	9101      	str	r1, [sp, #4]
   d82b4:	f7fb ff00 	bl	d40b8 <__cxa_guard_acquire>
   d82b8:	9901      	ldr	r1, [sp, #4]
   d82ba:	b148      	cbz	r0, d82d0 <_Z16_fetch_usbserialv+0x38>
   d82bc:	aa03      	add	r2, sp, #12
   d82be:	4807      	ldr	r0, [pc, #28]	; (d82dc <_Z16_fetch_usbserialv+0x44>)
   d82c0:	f7ff ffc4 	bl	d824c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d82c4:	4620      	mov	r0, r4
   d82c6:	f7fb fefc 	bl	d40c2 <__cxa_guard_release>
   d82ca:	4805      	ldr	r0, [pc, #20]	; (d82e0 <_Z16_fetch_usbserialv+0x48>)
   d82cc:	f002 fc78 	bl	dabc0 <atexit>
	return _usbserial;
}
   d82d0:	4802      	ldr	r0, [pc, #8]	; (d82dc <_Z16_fetch_usbserialv+0x44>)
   d82d2:	b008      	add	sp, #32
   d82d4:	bd10      	pop	{r4, pc}
   d82d6:	bf00      	nop
   d82d8:	2003e5c0 	.word	0x2003e5c0
   d82dc:	2003e5c4 	.word	0x2003e5c4
   d82e0:	000d81d3 	.word	0x000d81d3

000d82e4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d82e4:	4700      	bx	r0
	...

000d82e8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d82e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d82ec:	2400      	movs	r4, #0
{
   d82ee:	461d      	mov	r5, r3
   d82f0:	460f      	mov	r7, r1
   d82f2:	4690      	mov	r8, r2
   d82f4:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d82f6:	f7ff f961 	bl	d75bc <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d82fa:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d82fc:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d8300:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8304:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8308:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d830c:	bfa2      	ittt	ge
   d830e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8312:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d8316:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8318:	4907      	ldr	r1, [pc, #28]	; (d8338 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d831a:	9400      	str	r4, [sp, #0]
   d831c:	4643      	mov	r3, r8
   d831e:	463a      	mov	r2, r7
   d8320:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8322:	bfa8      	it	ge
   d8324:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8328:	f7ff f940 	bl	d75ac <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d832c:	fab0 f080 	clz	r0, r0
   d8330:	0940      	lsrs	r0, r0, #5
   d8332:	b004      	add	sp, #16
   d8334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8338:	000d82e5 	.word	0x000d82e5

000d833c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d833c:	2200      	movs	r2, #0
   d833e:	6840      	ldr	r0, [r0, #4]
   d8340:	4611      	mov	r1, r2
   d8342:	f7ff bb07 	b.w	d7954 <network_ready>

000d8346 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d8346:	2200      	movs	r2, #0
   d8348:	6840      	ldr	r0, [r0, #4]
   d834a:	4611      	mov	r1, r2
   d834c:	f7ff bb22 	b.w	d7994 <network_listening>

000d8350 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8350:	2200      	movs	r2, #0
   d8352:	6840      	ldr	r0, [r0, #4]
   d8354:	4611      	mov	r1, r2
   d8356:	f7ff bb2d 	b.w	d79b4 <network_get_listen_timeout>

000d835a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d835a:	6840      	ldr	r0, [r0, #4]
   d835c:	2200      	movs	r2, #0
   d835e:	f7ff bb21 	b.w	d79a4 <network_set_listen_timeout>

000d8362 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8362:	6840      	ldr	r0, [r0, #4]
   d8364:	2200      	movs	r2, #0
   d8366:	f081 0101 	eor.w	r1, r1, #1
   d836a:	f7ff bb0b 	b.w	d7984 <network_listen>

000d836e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d836e:	2300      	movs	r3, #0
   d8370:	6840      	ldr	r0, [r0, #4]
   d8372:	461a      	mov	r2, r3
   d8374:	4619      	mov	r1, r3
   d8376:	f7ff bafd 	b.w	d7974 <network_off>

000d837a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d837a:	2300      	movs	r3, #0
   d837c:	6840      	ldr	r0, [r0, #4]
   d837e:	461a      	mov	r2, r3
   d8380:	4619      	mov	r1, r3
   d8382:	f7ff baef 	b.w	d7964 <network_on>

000d8386 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8386:	2200      	movs	r2, #0
   d8388:	6840      	ldr	r0, [r0, #4]
   d838a:	4611      	mov	r1, r2
   d838c:	f7ff bad2 	b.w	d7934 <network_connecting>

000d8390 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8390:	6840      	ldr	r0, [r0, #4]
   d8392:	2200      	movs	r2, #0
   d8394:	2102      	movs	r1, #2
   d8396:	f7ff bad5 	b.w	d7944 <network_disconnect>

000d839a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d839a:	2300      	movs	r3, #0
   d839c:	6840      	ldr	r0, [r0, #4]
   d839e:	461a      	mov	r2, r3
   d83a0:	f7ff bac0 	b.w	d7924 <network_connect>

000d83a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d83a4:	4b08      	ldr	r3, [pc, #32]	; (d83c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d83a6:	b510      	push	{r4, lr}
   d83a8:	2428      	movs	r4, #40	; 0x28
   d83aa:	4622      	mov	r2, r4
   d83ac:	4618      	mov	r0, r3
   d83ae:	2100      	movs	r1, #0
   d83b0:	f002 fc1a 	bl	dabe8 <memset>
   d83b4:	4b05      	ldr	r3, [pc, #20]	; (d83cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d83b6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d83b8:	f04f 32ff 	mov.w	r2, #4294967295
   d83bc:	6042      	str	r2, [r0, #4]
   d83be:	2204      	movs	r2, #4
   d83c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d83c2:	4a03      	ldr	r2, [pc, #12]	; (d83d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d83c4:	601a      	str	r2, [r3, #0]
   d83c6:	bd10      	pop	{r4, pc}
   d83c8:	2003e5e0 	.word	0x2003e5e0
   d83cc:	2003e5d8 	.word	0x2003e5d8
   d83d0:	000dbd8c 	.word	0x000dbd8c

000d83d4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d83d4:	4770      	bx	lr

000d83d6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d83d6:	7441      	strb	r1, [r0, #17]
}
   d83d8:	4770      	bx	lr

000d83da <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d83da:	4770      	bx	lr

000d83dc <_ZN11USARTSerial17availableForWriteEv>:
{
   d83dc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d83de:	7c00      	ldrb	r0, [r0, #16]
   d83e0:	f7ff f97c 	bl	d76dc <hal_usart_available_data_for_write>
}
   d83e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d83e8:	bd08      	pop	{r3, pc}

000d83ea <_ZN11USARTSerial9availableEv>:
{
   d83ea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d83ec:	7c00      	ldrb	r0, [r0, #16]
   d83ee:	f7ff f94d 	bl	d768c <hal_usart_available>
}
   d83f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d83f6:	bd08      	pop	{r3, pc}

000d83f8 <_ZN11USARTSerial4peekEv>:
{
   d83f8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d83fa:	7c00      	ldrb	r0, [r0, #16]
   d83fc:	f7ff f956 	bl	d76ac <hal_usart_peek>
}
   d8400:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8404:	bd08      	pop	{r3, pc}

000d8406 <_ZN11USARTSerial4readEv>:
{
   d8406:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d8408:	7c00      	ldrb	r0, [r0, #16]
   d840a:	f7ff f947 	bl	d769c <hal_usart_read>
}
   d840e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8412:	bd08      	pop	{r3, pc}

000d8414 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d8414:	7c00      	ldrb	r0, [r0, #16]
   d8416:	f7ff b951 	b.w	d76bc <hal_usart_flush>

000d841a <_ZN11USARTSerial5writeEh>:
{
   d841a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d841c:	7c45      	ldrb	r5, [r0, #17]
{
   d841e:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8420:	b12d      	cbz	r5, d842e <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d8422:	7c20      	ldrb	r0, [r4, #16]
}
   d8424:	b003      	add	sp, #12
   d8426:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d842a:	f7ff b927 	b.w	d767c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d842e:	7c00      	ldrb	r0, [r0, #16]
   d8430:	9101      	str	r1, [sp, #4]
   d8432:	f7ff f953 	bl	d76dc <hal_usart_available_data_for_write>
   d8436:	2800      	cmp	r0, #0
   d8438:	9901      	ldr	r1, [sp, #4]
   d843a:	dcf2      	bgt.n	d8422 <_ZN11USARTSerial5writeEh+0x8>
}
   d843c:	4628      	mov	r0, r5
   d843e:	b003      	add	sp, #12
   d8440:	bd30      	pop	{r4, r5, pc}

000d8442 <_ZN11USARTSerialD0Ev>:
   d8442:	b510      	push	{r4, lr}
   d8444:	2114      	movs	r1, #20
   d8446:	4604      	mov	r4, r0
   d8448:	f000 fa52 	bl	d88f0 <_ZdlPvj>
   d844c:	4620      	mov	r0, r4
   d844e:	bd10      	pop	{r4, pc}

000d8450 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8450:	b510      	push	{r4, lr}
   d8452:	f04f 0c00 	mov.w	ip, #0
   d8456:	4604      	mov	r4, r0
   d8458:	4608      	mov	r0, r1
   d845a:	4611      	mov	r1, r2
   d845c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8460:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8464:	4a04      	ldr	r2, [pc, #16]	; (d8478 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d8466:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d8468:	2201      	movs	r2, #1
  _serial = serial;
   d846a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d846c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d846e:	461a      	mov	r2, r3
   d8470:	f7ff f8fc 	bl	d766c <hal_usart_init>
}
   d8474:	4620      	mov	r0, r4
   d8476:	bd10      	pop	{r4, pc}
   d8478:	000dbdc8 	.word	0x000dbdc8

000d847c <_Z22__fetch_global_Serial1v>:
{
   d847c:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d847e:	4c0d      	ldr	r4, [pc, #52]	; (d84b4 <_Z22__fetch_global_Serial1v+0x38>)
   d8480:	7821      	ldrb	r1, [r4, #0]
   d8482:	f3bf 8f5b 	dmb	ish
   d8486:	f011 0101 	ands.w	r1, r1, #1
   d848a:	d110      	bne.n	d84ae <_Z22__fetch_global_Serial1v+0x32>
   d848c:	4620      	mov	r0, r4
   d848e:	9101      	str	r1, [sp, #4]
   d8490:	f7fb fe12 	bl	d40b8 <__cxa_guard_acquire>
   d8494:	9901      	ldr	r1, [sp, #4]
   d8496:	b150      	cbz	r0, d84ae <_Z22__fetch_global_Serial1v+0x32>
   d8498:	4b07      	ldr	r3, [pc, #28]	; (d84b8 <_Z22__fetch_global_Serial1v+0x3c>)
   d849a:	4a08      	ldr	r2, [pc, #32]	; (d84bc <_Z22__fetch_global_Serial1v+0x40>)
   d849c:	4808      	ldr	r0, [pc, #32]	; (d84c0 <_Z22__fetch_global_Serial1v+0x44>)
   d849e:	f7ff ffd7 	bl	d8450 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d84a2:	4620      	mov	r0, r4
   d84a4:	f7fb fe0d 	bl	d40c2 <__cxa_guard_release>
   d84a8:	4806      	ldr	r0, [pc, #24]	; (d84c4 <_Z22__fetch_global_Serial1v+0x48>)
   d84aa:	f002 fb89 	bl	dabc0 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d84ae:	4804      	ldr	r0, [pc, #16]	; (d84c0 <_Z22__fetch_global_Serial1v+0x44>)
   d84b0:	b002      	add	sp, #8
   d84b2:	bd10      	pop	{r4, pc}
   d84b4:	2003e608 	.word	0x2003e608
   d84b8:	2003e690 	.word	0x2003e690
   d84bc:	2003e60c 	.word	0x2003e60c
   d84c0:	2003e714 	.word	0x2003e714
   d84c4:	000d83db 	.word	0x000d83db

000d84c8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d84c8:	4770      	bx	lr

000d84ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d84ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d84cc:	4606      	mov	r6, r0
   d84ce:	4615      	mov	r5, r2
   d84d0:	460c      	mov	r4, r1
   d84d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d84d4:	42bc      	cmp	r4, r7
   d84d6:	d006      	beq.n	d84e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d84d8:	6833      	ldr	r3, [r6, #0]
   d84da:	f814 1b01 	ldrb.w	r1, [r4], #1
   d84de:	689b      	ldr	r3, [r3, #8]
   d84e0:	4630      	mov	r0, r6
   d84e2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d84e4:	e7f6      	b.n	d84d4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d84e6:	4628      	mov	r0, r5
   d84e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d84ea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d84ea:	7c00      	ldrb	r0, [r0, #16]
   d84ec:	2200      	movs	r2, #0
   d84ee:	f7ff b91d 	b.w	d772c <hal_i2c_write>

000d84f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d84f2:	7c00      	ldrb	r0, [r0, #16]
   d84f4:	2100      	movs	r1, #0
   d84f6:	f7ff b921 	b.w	d773c <hal_i2c_available>

000d84fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d84fa:	7c00      	ldrb	r0, [r0, #16]
   d84fc:	2100      	movs	r1, #0
   d84fe:	f7ff b925 	b.w	d774c <hal_i2c_read>

000d8502 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8502:	7c00      	ldrb	r0, [r0, #16]
   d8504:	2100      	movs	r1, #0
   d8506:	f7ff b929 	b.w	d775c <hal_i2c_peek>

000d850a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d850a:	7c00      	ldrb	r0, [r0, #16]
   d850c:	2100      	movs	r1, #0
   d850e:	f7ff b92d 	b.w	d776c <hal_i2c_flush>

000d8512 <_ZN7TwoWireD0Ev>:
   d8512:	b510      	push	{r4, lr}
   d8514:	2114      	movs	r1, #20
   d8516:	4604      	mov	r4, r0
   d8518:	f000 f9ea 	bl	d88f0 <_ZdlPvj>
   d851c:	4620      	mov	r0, r4
   d851e:	bd10      	pop	{r4, pc}

000d8520 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8520:	b510      	push	{r4, lr}
   d8522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8526:	4604      	mov	r4, r0
   d8528:	4608      	mov	r0, r1
   d852a:	2100      	movs	r1, #0
   d852c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8530:	4b03      	ldr	r3, [pc, #12]	; (d8540 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8532:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8534:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8536:	4611      	mov	r1, r2
   d8538:	f7ff f928 	bl	d778c <hal_i2c_init>
}
   d853c:	4620      	mov	r0, r4
   d853e:	bd10      	pop	{r4, pc}
   d8540:	000dbdf8 	.word	0x000dbdf8

000d8544 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d8544:	7c00      	ldrb	r0, [r0, #16]
   d8546:	2200      	movs	r2, #0
   d8548:	f7ff b8d0 	b.w	d76ec <hal_i2c_set_speed>

000d854c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d854c:	2300      	movs	r3, #0
   d854e:	7c00      	ldrb	r0, [r0, #16]
   d8550:	461a      	mov	r2, r3
   d8552:	4619      	mov	r1, r3
   d8554:	f7ff b8d2 	b.w	d76fc <hal_i2c_begin>

000d8558 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8558:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d855a:	2200      	movs	r2, #0
   d855c:	2314      	movs	r3, #20
   d855e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8562:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8566:	780b      	ldrb	r3, [r1, #0]
   d8568:	f88d 3008 	strb.w	r3, [sp, #8]
   d856c:	684b      	ldr	r3, [r1, #4]
   d856e:	9303      	str	r3, [sp, #12]
   d8570:	68cb      	ldr	r3, [r1, #12]
   d8572:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8574:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8576:	7a0b      	ldrb	r3, [r1, #8]
   d8578:	9305      	str	r3, [sp, #20]
   d857a:	a901      	add	r1, sp, #4
   d857c:	f7ff f90e 	bl	d779c <hal_i2c_request_ex>
}
   d8580:	b007      	add	sp, #28
   d8582:	f85d fb04 	ldr.w	pc, [sp], #4

000d8586 <_ZN7TwoWire11requestFromEhjh>:
{
   d8586:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8588:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d858a:	f88d 1000 	strb.w	r1, [sp]
   d858e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8592:	9103      	str	r1, [sp, #12]
   d8594:	bf18      	it	ne
   d8596:	2301      	movne	r3, #1
   d8598:	4669      	mov	r1, sp
    size_ = size;
   d859a:	9201      	str	r2, [sp, #4]
   d859c:	f88d 3008 	strb.w	r3, [sp, #8]
   d85a0:	f7ff ffda 	bl	d8558 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d85a4:	b005      	add	sp, #20
   d85a6:	f85d fb04 	ldr.w	pc, [sp], #4

000d85aa <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d85aa:	2301      	movs	r3, #1
   d85ac:	f7ff bfeb 	b.w	d8586 <_ZN7TwoWire11requestFromEhjh>

000d85b0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d85b0:	7c00      	ldrb	r0, [r0, #16]
   d85b2:	2200      	movs	r2, #0
   d85b4:	f7ff b8aa 	b.w	d770c <hal_i2c_begin_transmission>

000d85b8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d85b8:	7c00      	ldrb	r0, [r0, #16]
   d85ba:	2200      	movs	r2, #0
   d85bc:	f7ff b8ae 	b.w	d771c <hal_i2c_end_transmission>

000d85c0 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d85c0:	2101      	movs	r1, #1
   d85c2:	f7ff bff9 	b.w	d85b8 <_ZN7TwoWire15endTransmissionEh>

000d85c6 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d85c6:	2300      	movs	r3, #0
   d85c8:	6840      	ldr	r0, [r0, #4]
   d85ca:	461a      	mov	r2, r3
   d85cc:	f7ff b9aa 	b.w	d7924 <network_connect>

000d85d0 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d85d0:	6840      	ldr	r0, [r0, #4]
   d85d2:	2200      	movs	r2, #0
   d85d4:	2102      	movs	r1, #2
   d85d6:	f7ff b9b5 	b.w	d7944 <network_disconnect>

000d85da <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d85da:	2200      	movs	r2, #0
   d85dc:	6840      	ldr	r0, [r0, #4]
   d85de:	4611      	mov	r1, r2
   d85e0:	f7ff b9a8 	b.w	d7934 <network_connecting>

000d85e4 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d85e4:	2200      	movs	r2, #0
   d85e6:	6840      	ldr	r0, [r0, #4]
   d85e8:	4611      	mov	r1, r2
   d85ea:	f7ff b9b3 	b.w	d7954 <network_ready>

000d85ee <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d85ee:	2300      	movs	r3, #0
   d85f0:	6840      	ldr	r0, [r0, #4]
   d85f2:	461a      	mov	r2, r3
   d85f4:	4619      	mov	r1, r3
   d85f6:	f7ff b9b5 	b.w	d7964 <network_on>

000d85fa <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d85fa:	2300      	movs	r3, #0
   d85fc:	6840      	ldr	r0, [r0, #4]
   d85fe:	461a      	mov	r2, r3
   d8600:	4619      	mov	r1, r3
   d8602:	f7ff b9b7 	b.w	d7974 <network_off>

000d8606 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8606:	6840      	ldr	r0, [r0, #4]
   d8608:	2100      	movs	r1, #0
   d860a:	f7ff b9db 	b.w	d79c4 <network_is_on>

000d860e <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d860e:	6840      	ldr	r0, [r0, #4]
   d8610:	2100      	movs	r1, #0
   d8612:	f7ff b9df 	b.w	d79d4 <network_is_off>

000d8616 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8616:	6840      	ldr	r0, [r0, #4]
   d8618:	2200      	movs	r2, #0
   d861a:	f081 0101 	eor.w	r1, r1, #1
   d861e:	f7ff b9b1 	b.w	d7984 <network_listen>

000d8622 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8622:	6840      	ldr	r0, [r0, #4]
   d8624:	2200      	movs	r2, #0
   d8626:	f7ff b9bd 	b.w	d79a4 <network_set_listen_timeout>

000d862a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d862a:	2200      	movs	r2, #0
   d862c:	6840      	ldr	r0, [r0, #4]
   d862e:	4611      	mov	r1, r2
   d8630:	f7ff b9c0 	b.w	d79b4 <network_get_listen_timeout>

000d8634 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8634:	2200      	movs	r2, #0
   d8636:	6840      	ldr	r0, [r0, #4]
   d8638:	4611      	mov	r1, r2
   d863a:	f7ff b9ab 	b.w	d7994 <network_listening>

000d863e <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d863e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8642:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8644:	b095      	sub	sp, #84	; 0x54
   d8646:	4616      	mov	r6, r2
   d8648:	460d      	mov	r5, r1
   d864a:	4607      	mov	r7, r0
    IPAddress addr;
   d864c:	f7ff fd88 	bl	d8160 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d8650:	4621      	mov	r1, r4
   d8652:	2218      	movs	r2, #24
   d8654:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8656:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8658:	f002 fac6 	bl	dabe8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d865c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d865e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8662:	4621      	mov	r1, r4
   d8664:	466b      	mov	r3, sp
   d8666:	aa0c      	add	r2, sp, #48	; 0x30
   d8668:	4630      	mov	r0, r6
   d866a:	f7fe ff6f 	bl	d754c <netdb_getaddrinfo>
    if (!r) {
   d866e:	4604      	mov	r4, r0
   d8670:	2800      	cmp	r0, #0
   d8672:	d146      	bne.n	d8702 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8674:	4602      	mov	r2, r0
   d8676:	2101      	movs	r1, #1
   d8678:	6868      	ldr	r0, [r5, #4]
   d867a:	f7ff f96b 	bl	d7954 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d867e:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8680:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8682:	4622      	mov	r2, r4
   d8684:	6868      	ldr	r0, [r5, #4]
   d8686:	f7ff f965 	bl	d7954 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d868a:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d868c:	4681      	mov	r9, r0
        bool ok = false;
   d868e:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8690:	2e00      	cmp	r6, #0
   d8692:	d036      	beq.n	d8702 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d8694:	2900      	cmp	r1, #0
   d8696:	d134      	bne.n	d8702 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8698:	6873      	ldr	r3, [r6, #4]
   d869a:	2b02      	cmp	r3, #2
   d869c:	d003      	beq.n	d86a6 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d869e:	2b0a      	cmp	r3, #10
   d86a0:	d00b      	beq.n	d86ba <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d86a2:	69f6      	ldr	r6, [r6, #28]
   d86a4:	e7f4      	b.n	d8690 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d86a6:	f1b8 0f00 	cmp.w	r8, #0
   d86aa:	d004      	beq.n	d86b6 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d86ac:	6971      	ldr	r1, [r6, #20]
   d86ae:	4638      	mov	r0, r7
   d86b0:	3104      	adds	r1, #4
   d86b2:	f7ff fd82 	bl	d81ba <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d86b6:	4641      	mov	r1, r8
   d86b8:	e7f3      	b.n	d86a2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d86ba:	f1b9 0f00 	cmp.w	r9, #0
   d86be:	d101      	bne.n	d86c4 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d86c0:	4649      	mov	r1, r9
   d86c2:	e7ee      	b.n	d86a2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d86c4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d86c6:	2210      	movs	r2, #16
   d86c8:	a801      	add	r0, sp, #4
   d86ca:	f002 fa8d 	bl	dabe8 <memset>
                    a.v = 6;
   d86ce:	2306      	movs	r3, #6
   d86d0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d86d4:	ad01      	add	r5, sp, #4
   d86d6:	f104 0308 	add.w	r3, r4, #8
   d86da:	3418      	adds	r4, #24
   d86dc:	6818      	ldr	r0, [r3, #0]
   d86de:	6859      	ldr	r1, [r3, #4]
   d86e0:	462a      	mov	r2, r5
   d86e2:	c203      	stmia	r2!, {r0, r1}
   d86e4:	3308      	adds	r3, #8
   d86e6:	42a3      	cmp	r3, r4
   d86e8:	4615      	mov	r5, r2
   d86ea:	d1f7      	bne.n	d86dc <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d86ec:	a901      	add	r1, sp, #4
   d86ee:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d86f0:	ad07      	add	r5, sp, #28
   d86f2:	f7ff fd43 	bl	d817c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d86f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d86f8:	1d3c      	adds	r4, r7, #4
   d86fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d86fc:	682b      	ldr	r3, [r5, #0]
   d86fe:	7023      	strb	r3, [r4, #0]
   d8700:	e7de      	b.n	d86c0 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8702:	9800      	ldr	r0, [sp, #0]
   d8704:	f7fe ff1a 	bl	d753c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8708:	4638      	mov	r0, r7
   d870a:	b015      	add	sp, #84	; 0x54
   d870c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8710 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8710:	4b02      	ldr	r3, [pc, #8]	; (d871c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8712:	4a03      	ldr	r2, [pc, #12]	; (d8720 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8714:	601a      	str	r2, [r3, #0]
   d8716:	2200      	movs	r2, #0
   d8718:	605a      	str	r2, [r3, #4]

} // spark
   d871a:	4770      	bx	lr
   d871c:	2003e728 	.word	0x2003e728
   d8720:	000dbe20 	.word	0x000dbe20

000d8724 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8724:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8726:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8728:	d902      	bls.n	d8730 <pinAvailable+0xc>
    return false;
   d872a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d872c:	b002      	add	sp, #8
   d872e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8730:	f1a0 030b 	sub.w	r3, r0, #11
   d8734:	2b02      	cmp	r3, #2
   d8736:	d81a      	bhi.n	d876e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8738:	4c17      	ldr	r4, [pc, #92]	; (d8798 <pinAvailable+0x74>)
   d873a:	7821      	ldrb	r1, [r4, #0]
   d873c:	f3bf 8f5b 	dmb	ish
   d8740:	f011 0101 	ands.w	r1, r1, #1
   d8744:	d10b      	bne.n	d875e <pinAvailable+0x3a>
   d8746:	4620      	mov	r0, r4
   d8748:	9101      	str	r1, [sp, #4]
   d874a:	f7fb fcb5 	bl	d40b8 <__cxa_guard_acquire>
   d874e:	9901      	ldr	r1, [sp, #4]
   d8750:	b128      	cbz	r0, d875e <pinAvailable+0x3a>
   d8752:	4812      	ldr	r0, [pc, #72]	; (d879c <pinAvailable+0x78>)
   d8754:	f7ff f9ba 	bl	d7acc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8758:	4620      	mov	r0, r4
   d875a:	f7fb fcb2 	bl	d40c2 <__cxa_guard_release>
   d875e:	4b0f      	ldr	r3, [pc, #60]	; (d879c <pinAvailable+0x78>)
   d8760:	7818      	ldrb	r0, [r3, #0]
   d8762:	f7ff f83b 	bl	d77dc <hal_spi_is_enabled>
   d8766:	2800      	cmp	r0, #0
   d8768:	d1df      	bne.n	d872a <pinAvailable+0x6>
  return true; // 'pin' is available
   d876a:	2001      	movs	r0, #1
   d876c:	e7de      	b.n	d872c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d876e:	2801      	cmp	r0, #1
   d8770:	d809      	bhi.n	d8786 <pinAvailable+0x62>
   d8772:	f000 f899 	bl	d88a8 <_Z19__fetch_global_Wirev>
   d8776:	2100      	movs	r1, #0
   d8778:	7c00      	ldrb	r0, [r0, #16]
   d877a:	f7fe ffff 	bl	d777c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d877e:	f080 0001 	eor.w	r0, r0, #1
   d8782:	b2c0      	uxtb	r0, r0
   d8784:	e7d2      	b.n	d872c <pinAvailable+0x8>
   d8786:	3809      	subs	r0, #9
   d8788:	2801      	cmp	r0, #1
   d878a:	d8ee      	bhi.n	d876a <pinAvailable+0x46>
   d878c:	f7ff fe76 	bl	d847c <_Z22__fetch_global_Serial1v>
   d8790:	7c00      	ldrb	r0, [r0, #16]
   d8792:	f7fe ff9b 	bl	d76cc <hal_usart_is_enabled>
   d8796:	e7f2      	b.n	d877e <pinAvailable+0x5a>
   d8798:	2003e578 	.word	0x2003e578
   d879c:	2003e57c 	.word	0x2003e57c

000d87a0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d87a0:	2823      	cmp	r0, #35	; 0x23
{
   d87a2:	b538      	push	{r3, r4, r5, lr}
   d87a4:	4604      	mov	r4, r0
   d87a6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d87a8:	d80a      	bhi.n	d87c0 <pinMode+0x20>
   d87aa:	29ff      	cmp	r1, #255	; 0xff
   d87ac:	d008      	beq.n	d87c0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d87ae:	f7ff ffb9 	bl	d8724 <pinAvailable>
   d87b2:	b128      	cbz	r0, d87c0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d87b4:	4629      	mov	r1, r5
   d87b6:	4620      	mov	r0, r4
}
   d87b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d87bc:	f7fe bed6 	b.w	d756c <HAL_Pin_Mode>
}
   d87c0:	bd38      	pop	{r3, r4, r5, pc}

000d87c2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d87c2:	b538      	push	{r3, r4, r5, lr}
   d87c4:	4604      	mov	r4, r0
   d87c6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d87c8:	f7fe fed8 	bl	d757c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d87cc:	28ff      	cmp	r0, #255	; 0xff
   d87ce:	d010      	beq.n	d87f2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d87d0:	2806      	cmp	r0, #6
   d87d2:	d804      	bhi.n	d87de <digitalWrite+0x1c>
   d87d4:	234d      	movs	r3, #77	; 0x4d
   d87d6:	fa23 f000 	lsr.w	r0, r3, r0
   d87da:	07c3      	lsls	r3, r0, #31
   d87dc:	d409      	bmi.n	d87f2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d87de:	4620      	mov	r0, r4
   d87e0:	f7ff ffa0 	bl	d8724 <pinAvailable>
   d87e4:	b128      	cbz	r0, d87f2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d87e6:	4629      	mov	r1, r5
   d87e8:	4620      	mov	r0, r4
}
   d87ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d87ee:	f7fe becd 	b.w	d758c <HAL_GPIO_Write>
}
   d87f2:	bd38      	pop	{r3, r4, r5, pc}

000d87f4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d87f4:	b510      	push	{r4, lr}
   d87f6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d87f8:	f7fe fec0 	bl	d757c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d87fc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d87fe:	b2db      	uxtb	r3, r3
   d8800:	2b01      	cmp	r3, #1
   d8802:	d908      	bls.n	d8816 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8804:	4620      	mov	r0, r4
   d8806:	f7ff ff8d 	bl	d8724 <pinAvailable>
   d880a:	b120      	cbz	r0, d8816 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d880c:	4620      	mov	r0, r4
}
   d880e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d8812:	f7fe bec3 	b.w	d759c <HAL_GPIO_Read>
}
   d8816:	2000      	movs	r0, #0
   d8818:	bd10      	pop	{r4, pc}

000d881a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d881a:	280d      	cmp	r0, #13
{
   d881c:	b510      	push	{r4, lr}
   d881e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8820:	bf9c      	itt	ls
   d8822:	340e      	addls	r4, #14
   d8824:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8826:	4620      	mov	r0, r4
   d8828:	f7ff ff7c 	bl	d8724 <pinAvailable>
   d882c:	b150      	cbz	r0, d8844 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d882e:	2103      	movs	r1, #3
   d8830:	4620      	mov	r0, r4
   d8832:	f7fe fe93 	bl	d755c <HAL_Validate_Pin_Function>
   d8836:	2803      	cmp	r0, #3
   d8838:	d104      	bne.n	d8844 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d883a:	4620      	mov	r0, r4
}
   d883c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d8840:	f7fe bec4 	b.w	d75cc <hal_adc_read>
}
   d8844:	2000      	movs	r0, #0
   d8846:	bd10      	pop	{r4, pc}

000d8848 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d8848:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d884a:	4c08      	ldr	r4, [pc, #32]	; (d886c <_Z21__fetch_global_EEPROMv+0x24>)
   d884c:	7823      	ldrb	r3, [r4, #0]
   d884e:	f3bf 8f5b 	dmb	ish
   d8852:	07db      	lsls	r3, r3, #31
   d8854:	d408      	bmi.n	d8868 <_Z21__fetch_global_EEPROMv+0x20>
   d8856:	4620      	mov	r0, r4
   d8858:	f7fb fc2e 	bl	d40b8 <__cxa_guard_acquire>
   d885c:	b120      	cbz	r0, d8868 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d885e:	f7fe fed5 	bl	d760c <HAL_EEPROM_Init>
   d8862:	4620      	mov	r0, r4
   d8864:	f7fb fc2d 	bl	d40c2 <__cxa_guard_release>
	return eeprom;
}
   d8868:	4801      	ldr	r0, [pc, #4]	; (d8870 <_Z21__fetch_global_EEPROMv+0x28>)
   d886a:	bd10      	pop	{r4, pc}
   d886c:	2003e734 	.word	0x2003e734
   d8870:	2003e738 	.word	0x2003e738

000d8874 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8874:	4770      	bx	lr
	...

000d8878 <_Z17acquireWireBufferv>:
{
   d8878:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d887a:	2300      	movs	r3, #0
   d887c:	2520      	movs	r5, #32
   d887e:	8043      	strh	r3, [r0, #2]
   d8880:	2314      	movs	r3, #20
{
   d8882:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8884:	8003      	strh	r3, [r0, #0]
   d8886:	6085      	str	r5, [r0, #8]
   d8888:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d888a:	4906      	ldr	r1, [pc, #24]	; (d88a4 <_Z17acquireWireBufferv+0x2c>)
   d888c:	4628      	mov	r0, r5
   d888e:	f000 f831 	bl	d88f4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8892:	4904      	ldr	r1, [pc, #16]	; (d88a4 <_Z17acquireWireBufferv+0x2c>)
	};
   d8894:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8896:	4628      	mov	r0, r5
   d8898:	f000 f82c 	bl	d88f4 <_ZnajRKSt9nothrow_t>
	};
   d889c:	60e0      	str	r0, [r4, #12]
}
   d889e:	4620      	mov	r0, r4
   d88a0:	bd38      	pop	{r3, r4, r5, pc}
   d88a2:	bf00      	nop
   d88a4:	000dbe54 	.word	0x000dbe54

000d88a8 <_Z19__fetch_global_Wirev>:
{
   d88a8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d88aa:	4d0e      	ldr	r5, [pc, #56]	; (d88e4 <_Z19__fetch_global_Wirev+0x3c>)
   d88ac:	7829      	ldrb	r1, [r5, #0]
   d88ae:	f3bf 8f5b 	dmb	ish
   d88b2:	f011 0401 	ands.w	r4, r1, #1
{
   d88b6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d88b8:	d111      	bne.n	d88de <_Z19__fetch_global_Wirev+0x36>
   d88ba:	4628      	mov	r0, r5
   d88bc:	f7fb fbfc 	bl	d40b8 <__cxa_guard_acquire>
   d88c0:	b168      	cbz	r0, d88de <_Z19__fetch_global_Wirev+0x36>
   d88c2:	a801      	add	r0, sp, #4
   d88c4:	f7ff ffd8 	bl	d8878 <_Z17acquireWireBufferv>
   d88c8:	aa01      	add	r2, sp, #4
   d88ca:	4621      	mov	r1, r4
   d88cc:	4806      	ldr	r0, [pc, #24]	; (d88e8 <_Z19__fetch_global_Wirev+0x40>)
   d88ce:	f7ff fe27 	bl	d8520 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d88d2:	4628      	mov	r0, r5
   d88d4:	f7fb fbf5 	bl	d40c2 <__cxa_guard_release>
   d88d8:	4804      	ldr	r0, [pc, #16]	; (d88ec <_Z19__fetch_global_Wirev+0x44>)
   d88da:	f002 f971 	bl	dabc0 <atexit>
	return wire;
}
   d88de:	4802      	ldr	r0, [pc, #8]	; (d88e8 <_Z19__fetch_global_Wirev+0x40>)
   d88e0:	b007      	add	sp, #28
   d88e2:	bd30      	pop	{r4, r5, pc}
   d88e4:	2003e73c 	.word	0x2003e73c
   d88e8:	2003e740 	.word	0x2003e740
   d88ec:	000d8875 	.word	0x000d8875

000d88f0 <_ZdlPvj>:
   d88f0:	f7fb bbd5 	b.w	d409e <_ZdlPv>

000d88f4 <_ZnajRKSt9nothrow_t>:
   d88f4:	f7fb bbd1 	b.w	d409a <_Znaj>

000d88f8 <pow>:
   d88f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d88fc:	ed2d 8b02 	vpush	{d8}
   d8900:	b08d      	sub	sp, #52	; 0x34
   d8902:	ec57 6b10 	vmov	r6, r7, d0
   d8906:	ec55 4b11 	vmov	r4, r5, d1
   d890a:	f000 f9ad 	bl	d8c68 <__ieee754_pow>
   d890e:	4bae      	ldr	r3, [pc, #696]	; (d8bc8 <pow+0x2d0>)
   d8910:	eeb0 8a40 	vmov.f32	s16, s0
   d8914:	eef0 8a60 	vmov.f32	s17, s1
   d8918:	f993 9000 	ldrsb.w	r9, [r3]
   d891c:	f1b9 3fff 	cmp.w	r9, #4294967295
   d8920:	d037      	beq.n	d8992 <pow+0x9a>
   d8922:	4622      	mov	r2, r4
   d8924:	462b      	mov	r3, r5
   d8926:	4620      	mov	r0, r4
   d8928:	4629      	mov	r1, r5
   d892a:	f001 fdd9 	bl	da4e0 <__aeabi_dcmpun>
   d892e:	4683      	mov	fp, r0
   d8930:	bb78      	cbnz	r0, d8992 <pow+0x9a>
   d8932:	4632      	mov	r2, r6
   d8934:	463b      	mov	r3, r7
   d8936:	4630      	mov	r0, r6
   d8938:	4639      	mov	r1, r7
   d893a:	f001 fdd1 	bl	da4e0 <__aeabi_dcmpun>
   d893e:	4680      	mov	r8, r0
   d8940:	2800      	cmp	r0, #0
   d8942:	f040 8093 	bne.w	d8a6c <pow+0x174>
   d8946:	f04f 0a00 	mov.w	sl, #0
   d894a:	f04f 0b00 	mov.w	fp, #0
   d894e:	4630      	mov	r0, r6
   d8950:	4639      	mov	r1, r7
   d8952:	4652      	mov	r2, sl
   d8954:	465b      	mov	r3, fp
   d8956:	f001 fd91 	bl	da47c <__aeabi_dcmpeq>
   d895a:	b318      	cbz	r0, d89a4 <pow+0xac>
   d895c:	4652      	mov	r2, sl
   d895e:	465b      	mov	r3, fp
   d8960:	4620      	mov	r0, r4
   d8962:	4629      	mov	r1, r5
   d8964:	f001 fd8a 	bl	da47c <__aeabi_dcmpeq>
   d8968:	9000      	str	r0, [sp, #0]
   d896a:	2800      	cmp	r0, #0
   d896c:	d057      	beq.n	d8a1e <pow+0x126>
   d896e:	4b97      	ldr	r3, [pc, #604]	; (d8bcc <pow+0x2d4>)
   d8970:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d8974:	2201      	movs	r2, #1
   d8976:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d897a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d897e:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d8982:	9202      	str	r2, [sp, #8]
   d8984:	9303      	str	r3, [sp, #12]
   d8986:	f1b9 0f00 	cmp.w	r9, #0
   d898a:	f000 8089 	beq.w	d8aa0 <pow+0x1a8>
   d898e:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d8bb8 <pow+0x2c0>
   d8992:	eeb0 0a48 	vmov.f32	s0, s16
   d8996:	eef0 0a68 	vmov.f32	s1, s17
   d899a:	b00d      	add	sp, #52	; 0x34
   d899c:	ecbd 8b02 	vpop	{d8}
   d89a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d89a4:	eeb0 0a48 	vmov.f32	s0, s16
   d89a8:	eef0 0a68 	vmov.f32	s1, s17
   d89ac:	f001 f804 	bl	d99b8 <finite>
   d89b0:	4680      	mov	r8, r0
   d89b2:	2800      	cmp	r0, #0
   d89b4:	f000 8082 	beq.w	d8abc <pow+0x1c4>
   d89b8:	f04f 0800 	mov.w	r8, #0
   d89bc:	f04f 0900 	mov.w	r9, #0
   d89c0:	ec51 0b18 	vmov	r0, r1, d8
   d89c4:	4642      	mov	r2, r8
   d89c6:	464b      	mov	r3, r9
   d89c8:	f001 fd58 	bl	da47c <__aeabi_dcmpeq>
   d89cc:	2800      	cmp	r0, #0
   d89ce:	d0e0      	beq.n	d8992 <pow+0x9a>
   d89d0:	ec47 6b10 	vmov	d0, r6, r7
   d89d4:	f000 fff0 	bl	d99b8 <finite>
   d89d8:	2800      	cmp	r0, #0
   d89da:	d0da      	beq.n	d8992 <pow+0x9a>
   d89dc:	ec45 4b10 	vmov	d0, r4, r5
   d89e0:	f000 ffea 	bl	d99b8 <finite>
   d89e4:	2800      	cmp	r0, #0
   d89e6:	d0d4      	beq.n	d8992 <pow+0x9a>
   d89e8:	4b77      	ldr	r3, [pc, #476]	; (d8bc8 <pow+0x2d0>)
   d89ea:	4a78      	ldr	r2, [pc, #480]	; (d8bcc <pow+0x2d4>)
   d89ec:	f993 3000 	ldrsb.w	r3, [r3]
   d89f0:	9203      	str	r2, [sp, #12]
   d89f2:	2104      	movs	r1, #4
   d89f4:	2200      	movs	r2, #0
   d89f6:	2b02      	cmp	r3, #2
   d89f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d89fc:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d8a00:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d8a04:	9102      	str	r1, [sp, #8]
   d8a06:	920a      	str	r2, [sp, #40]	; 0x28
   d8a08:	d004      	beq.n	d8a14 <pow+0x11c>
   d8a0a:	a802      	add	r0, sp, #8
   d8a0c:	f000 ffe0 	bl	d99d0 <matherr>
   d8a10:	2800      	cmp	r0, #0
   d8a12:	d14a      	bne.n	d8aaa <pow+0x1b2>
   d8a14:	f7ff f806 	bl	d7a24 <__errno>
   d8a18:	2322      	movs	r3, #34	; 0x22
   d8a1a:	6003      	str	r3, [r0, #0]
   d8a1c:	e045      	b.n	d8aaa <pow+0x1b2>
   d8a1e:	ec45 4b10 	vmov	d0, r4, r5
   d8a22:	f000 ffc9 	bl	d99b8 <finite>
   d8a26:	2800      	cmp	r0, #0
   d8a28:	d0b3      	beq.n	d8992 <pow+0x9a>
   d8a2a:	4652      	mov	r2, sl
   d8a2c:	465b      	mov	r3, fp
   d8a2e:	4620      	mov	r0, r4
   d8a30:	4629      	mov	r1, r5
   d8a32:	f001 fd2d 	bl	da490 <__aeabi_dcmplt>
   d8a36:	2800      	cmp	r0, #0
   d8a38:	d0ab      	beq.n	d8992 <pow+0x9a>
   d8a3a:	4b63      	ldr	r3, [pc, #396]	; (d8bc8 <pow+0x2d0>)
   d8a3c:	9900      	ldr	r1, [sp, #0]
   d8a3e:	4a63      	ldr	r2, [pc, #396]	; (d8bcc <pow+0x2d4>)
   d8a40:	f993 3000 	ldrsb.w	r3, [r3]
   d8a44:	910a      	str	r1, [sp, #40]	; 0x28
   d8a46:	2101      	movs	r1, #1
   d8a48:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d8a4c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d8a50:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d8a54:	2b00      	cmp	r3, #0
   d8a56:	d16f      	bne.n	d8b38 <pow+0x240>
   d8a58:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d8a5c:	a802      	add	r0, sp, #8
   d8a5e:	f000 ffb7 	bl	d99d0 <matherr>
   d8a62:	2800      	cmp	r0, #0
   d8a64:	d06e      	beq.n	d8b44 <pow+0x24c>
   d8a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8a68:	b32b      	cbz	r3, d8ab6 <pow+0x1be>
   d8a6a:	e020      	b.n	d8aae <pow+0x1b6>
   d8a6c:	2200      	movs	r2, #0
   d8a6e:	2300      	movs	r3, #0
   d8a70:	4620      	mov	r0, r4
   d8a72:	4629      	mov	r1, r5
   d8a74:	f001 fd02 	bl	da47c <__aeabi_dcmpeq>
   d8a78:	2800      	cmp	r0, #0
   d8a7a:	d08a      	beq.n	d8992 <pow+0x9a>
   d8a7c:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d8bb8 <pow+0x2c0>
   d8a80:	4b52      	ldr	r3, [pc, #328]	; (d8bcc <pow+0x2d4>)
   d8a82:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d8a86:	2201      	movs	r2, #1
   d8a88:	f1b9 0f02 	cmp.w	r9, #2
   d8a8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d8a90:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d8a94:	ed8d 8b08 	vstr	d8, [sp, #32]
   d8a98:	9202      	str	r2, [sp, #8]
   d8a9a:	9303      	str	r3, [sp, #12]
   d8a9c:	f43f af79 	beq.w	d8992 <pow+0x9a>
   d8aa0:	a802      	add	r0, sp, #8
   d8aa2:	f000 ff95 	bl	d99d0 <matherr>
   d8aa6:	2800      	cmp	r0, #0
   d8aa8:	d051      	beq.n	d8b4e <pow+0x256>
   d8aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8aac:	b11b      	cbz	r3, d8ab6 <pow+0x1be>
   d8aae:	f7fe ffb9 	bl	d7a24 <__errno>
   d8ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8ab4:	6003      	str	r3, [r0, #0]
   d8ab6:	ed9d 8b08 	vldr	d8, [sp, #32]
   d8aba:	e76a      	b.n	d8992 <pow+0x9a>
   d8abc:	ec47 6b10 	vmov	d0, r6, r7
   d8ac0:	f000 ff7a 	bl	d99b8 <finite>
   d8ac4:	2800      	cmp	r0, #0
   d8ac6:	f43f af77 	beq.w	d89b8 <pow+0xc0>
   d8aca:	ec45 4b10 	vmov	d0, r4, r5
   d8ace:	f000 ff73 	bl	d99b8 <finite>
   d8ad2:	2800      	cmp	r0, #0
   d8ad4:	f43f af70 	beq.w	d89b8 <pow+0xc0>
   d8ad8:	ec53 2b18 	vmov	r2, r3, d8
   d8adc:	ee18 0a10 	vmov	r0, s16
   d8ae0:	4619      	mov	r1, r3
   d8ae2:	f001 fcfd 	bl	da4e0 <__aeabi_dcmpun>
   d8ae6:	4b38      	ldr	r3, [pc, #224]	; (d8bc8 <pow+0x2d0>)
   d8ae8:	2800      	cmp	r0, #0
   d8aea:	f040 8096 	bne.w	d8c1a <pow+0x322>
   d8aee:	f993 8000 	ldrsb.w	r8, [r3]
   d8af2:	900a      	str	r0, [sp, #40]	; 0x28
   d8af4:	2303      	movs	r3, #3
   d8af6:	9302      	str	r3, [sp, #8]
   d8af8:	4b34      	ldr	r3, [pc, #208]	; (d8bcc <pow+0x2d4>)
   d8afa:	9303      	str	r3, [sp, #12]
   d8afc:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d8b00:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d8b04:	f1b8 0f00 	cmp.w	r8, #0
   d8b08:	d126      	bne.n	d8b58 <pow+0x260>
   d8b0a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d8bdc <pow+0x2e4>
   d8b0e:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d8b12:	4652      	mov	r2, sl
   d8b14:	465b      	mov	r3, fp
   d8b16:	4630      	mov	r0, r6
   d8b18:	4639      	mov	r1, r7
   d8b1a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d8b1e:	f001 fcb7 	bl	da490 <__aeabi_dcmplt>
   d8b22:	bb48      	cbnz	r0, d8b78 <pow+0x280>
   d8b24:	a802      	add	r0, sp, #8
   d8b26:	f000 ff53 	bl	d99d0 <matherr>
   d8b2a:	2800      	cmp	r0, #0
   d8b2c:	d19b      	bne.n	d8a66 <pow+0x16e>
   d8b2e:	f7fe ff79 	bl	d7a24 <__errno>
   d8b32:	2322      	movs	r3, #34	; 0x22
   d8b34:	6003      	str	r3, [r0, #0]
   d8b36:	e796      	b.n	d8a66 <pow+0x16e>
   d8b38:	4925      	ldr	r1, [pc, #148]	; (d8bd0 <pow+0x2d8>)
   d8b3a:	2000      	movs	r0, #0
   d8b3c:	2b02      	cmp	r3, #2
   d8b3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d8b42:	d18b      	bne.n	d8a5c <pow+0x164>
   d8b44:	f7fe ff6e 	bl	d7a24 <__errno>
   d8b48:	2321      	movs	r3, #33	; 0x21
   d8b4a:	6003      	str	r3, [r0, #0]
   d8b4c:	e78b      	b.n	d8a66 <pow+0x16e>
   d8b4e:	f7fe ff69 	bl	d7a24 <__errno>
   d8b52:	2321      	movs	r3, #33	; 0x21
   d8b54:	6003      	str	r3, [r0, #0]
   d8b56:	e7a8      	b.n	d8aaa <pow+0x1b2>
   d8b58:	ed9f 7b19 	vldr	d7, [pc, #100]	; d8bc0 <pow+0x2c8>
   d8b5c:	4652      	mov	r2, sl
   d8b5e:	465b      	mov	r3, fp
   d8b60:	4630      	mov	r0, r6
   d8b62:	4639      	mov	r1, r7
   d8b64:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8b68:	f001 fc92 	bl	da490 <__aeabi_dcmplt>
   d8b6c:	2800      	cmp	r0, #0
   d8b6e:	d137      	bne.n	d8be0 <pow+0x2e8>
   d8b70:	f1b8 0f02 	cmp.w	r8, #2
   d8b74:	d0db      	beq.n	d8b2e <pow+0x236>
   d8b76:	e7d5      	b.n	d8b24 <pow+0x22c>
   d8b78:	4b16      	ldr	r3, [pc, #88]	; (d8bd4 <pow+0x2dc>)
   d8b7a:	2200      	movs	r2, #0
   d8b7c:	4620      	mov	r0, r4
   d8b7e:	4629      	mov	r1, r5
   d8b80:	f001 fa14 	bl	d9fac <__aeabi_dmul>
   d8b84:	4602      	mov	r2, r0
   d8b86:	460b      	mov	r3, r1
   d8b88:	ec43 2b10 	vmov	d0, r2, r3
   d8b8c:	e9cd 2300 	strd	r2, r3, [sp]
   d8b90:	f000 ff2a 	bl	d99e8 <rint>
   d8b94:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8b98:	ec51 0b10 	vmov	r0, r1, d0
   d8b9c:	f001 fc6e 	bl	da47c <__aeabi_dcmpeq>
   d8ba0:	2800      	cmp	r0, #0
   d8ba2:	d136      	bne.n	d8c12 <pow+0x31a>
   d8ba4:	4b0c      	ldr	r3, [pc, #48]	; (d8bd8 <pow+0x2e0>)
   d8ba6:	4908      	ldr	r1, [pc, #32]	; (d8bc8 <pow+0x2d0>)
   d8ba8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8bac:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d8bb0:	f991 8000 	ldrsb.w	r8, [r1]
   d8bb4:	e7dc      	b.n	d8b70 <pow+0x278>
   d8bb6:	bf00      	nop
   d8bb8:	00000000 	.word	0x00000000
   d8bbc:	3ff00000 	.word	0x3ff00000
   d8bc0:	00000000 	.word	0x00000000
   d8bc4:	7ff00000 	.word	0x7ff00000
   d8bc8:	2003e42c 	.word	0x2003e42c
   d8bcc:	000dbe58 	.word	0x000dbe58
   d8bd0:	fff00000 	.word	0xfff00000
   d8bd4:	3fe00000 	.word	0x3fe00000
   d8bd8:	c7efffff 	.word	0xc7efffff
   d8bdc:	47efffff 	.word	0x47efffff
   d8be0:	4b1c      	ldr	r3, [pc, #112]	; (d8c54 <pow+0x35c>)
   d8be2:	2200      	movs	r2, #0
   d8be4:	4620      	mov	r0, r4
   d8be6:	4629      	mov	r1, r5
   d8be8:	f001 f9e0 	bl	d9fac <__aeabi_dmul>
   d8bec:	4602      	mov	r2, r0
   d8bee:	460b      	mov	r3, r1
   d8bf0:	ec43 2b10 	vmov	d0, r2, r3
   d8bf4:	e9cd 2300 	strd	r2, r3, [sp]
   d8bf8:	f000 fef6 	bl	d99e8 <rint>
   d8bfc:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8c00:	ec51 0b10 	vmov	r0, r1, d0
   d8c04:	f001 fc3a 	bl	da47c <__aeabi_dcmpeq>
   d8c08:	b918      	cbnz	r0, d8c12 <pow+0x31a>
   d8c0a:	4b13      	ldr	r3, [pc, #76]	; (d8c58 <pow+0x360>)
   d8c0c:	2200      	movs	r2, #0
   d8c0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d8c12:	4b12      	ldr	r3, [pc, #72]	; (d8c5c <pow+0x364>)
   d8c14:	f993 8000 	ldrsb.w	r8, [r3]
   d8c18:	e7aa      	b.n	d8b70 <pow+0x278>
   d8c1a:	f993 9000 	ldrsb.w	r9, [r3]
   d8c1e:	4b10      	ldr	r3, [pc, #64]	; (d8c60 <pow+0x368>)
   d8c20:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d8c24:	2201      	movs	r2, #1
   d8c26:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d8c2a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d8c2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d8c32:	f1b9 0f00 	cmp.w	r9, #0
   d8c36:	f43f af0f 	beq.w	d8a58 <pow+0x160>
   d8c3a:	4652      	mov	r2, sl
   d8c3c:	465b      	mov	r3, fp
   d8c3e:	4650      	mov	r0, sl
   d8c40:	4659      	mov	r1, fp
   d8c42:	f001 fadd 	bl	da200 <__aeabi_ddiv>
   d8c46:	f1b9 0f02 	cmp.w	r9, #2
   d8c4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d8c4e:	f43f af79 	beq.w	d8b44 <pow+0x24c>
   d8c52:	e703      	b.n	d8a5c <pow+0x164>
   d8c54:	3fe00000 	.word	0x3fe00000
   d8c58:	fff00000 	.word	0xfff00000
   d8c5c:	2003e42c 	.word	0x2003e42c
   d8c60:	000dbe58 	.word	0x000dbe58
   d8c64:	00000000 	.word	0x00000000

000d8c68 <__ieee754_pow>:
   d8c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8c6c:	ec57 6b11 	vmov	r6, r7, d1
   d8c70:	ed2d 8b0a 	vpush	{d8-d12}
   d8c74:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d8c78:	ea5a 0206 	orrs.w	r2, sl, r6
   d8c7c:	b089      	sub	sp, #36	; 0x24
   d8c7e:	d03d      	beq.n	d8cfc <__ieee754_pow+0x94>
   d8c80:	ec55 4b10 	vmov	r4, r5, d0
   d8c84:	4976      	ldr	r1, [pc, #472]	; (d8e60 <__ieee754_pow+0x1f8>)
   d8c86:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d8c8a:	4588      	cmp	r8, r1
   d8c8c:	ee10 2a10 	vmov	r2, s0
   d8c90:	46a9      	mov	r9, r5
   d8c92:	dc2c      	bgt.n	d8cee <__ieee754_pow+0x86>
   d8c94:	ee11 3a10 	vmov	r3, s2
   d8c98:	46bb      	mov	fp, r7
   d8c9a:	d03a      	beq.n	d8d12 <__ieee754_pow+0xaa>
   d8c9c:	458a      	cmp	sl, r1
   d8c9e:	dc26      	bgt.n	d8cee <__ieee754_pow+0x86>
   d8ca0:	496f      	ldr	r1, [pc, #444]	; (d8e60 <__ieee754_pow+0x1f8>)
   d8ca2:	458a      	cmp	sl, r1
   d8ca4:	d021      	beq.n	d8cea <__ieee754_pow+0x82>
   d8ca6:	f1b9 0f00 	cmp.w	r9, #0
   d8caa:	db3d      	blt.n	d8d28 <__ieee754_pow+0xc0>
   d8cac:	2100      	movs	r1, #0
   d8cae:	9103      	str	r1, [sp, #12]
   d8cb0:	2b00      	cmp	r3, #0
   d8cb2:	d155      	bne.n	d8d60 <__ieee754_pow+0xf8>
   d8cb4:	4b6a      	ldr	r3, [pc, #424]	; (d8e60 <__ieee754_pow+0x1f8>)
   d8cb6:	459a      	cmp	sl, r3
   d8cb8:	f000 80a8 	beq.w	d8e0c <__ieee754_pow+0x1a4>
   d8cbc:	4b69      	ldr	r3, [pc, #420]	; (d8e64 <__ieee754_pow+0x1fc>)
   d8cbe:	459a      	cmp	sl, r3
   d8cc0:	f000 80b6 	beq.w	d8e30 <__ieee754_pow+0x1c8>
   d8cc4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d8cc8:	f000 8501 	beq.w	d96ce <__ieee754_pow+0xa66>
   d8ccc:	4b66      	ldr	r3, [pc, #408]	; (d8e68 <__ieee754_pow+0x200>)
   d8cce:	459b      	cmp	fp, r3
   d8cd0:	d146      	bne.n	d8d60 <__ieee754_pow+0xf8>
   d8cd2:	f1b9 0f00 	cmp.w	r9, #0
   d8cd6:	db43      	blt.n	d8d60 <__ieee754_pow+0xf8>
   d8cd8:	ec45 4b10 	vmov	d0, r4, r5
   d8cdc:	b009      	add	sp, #36	; 0x24
   d8cde:	ecbd 8b0a 	vpop	{d8-d12}
   d8ce2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8ce6:	f000 bd99 	b.w	d981c <__ieee754_sqrt>
   d8cea:	2b00      	cmp	r3, #0
   d8cec:	d0db      	beq.n	d8ca6 <__ieee754_pow+0x3e>
   d8cee:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d8cf2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d8cf6:	ea58 0302 	orrs.w	r3, r8, r2
   d8cfa:	d10d      	bne.n	d8d18 <__ieee754_pow+0xb0>
   d8cfc:	ed9f 7b54 	vldr	d7, [pc, #336]	; d8e50 <__ieee754_pow+0x1e8>
   d8d00:	ed8d 7b00 	vstr	d7, [sp]
   d8d04:	ed9d 0b00 	vldr	d0, [sp]
   d8d08:	b009      	add	sp, #36	; 0x24
   d8d0a:	ecbd 8b0a 	vpop	{d8-d12}
   d8d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8d12:	b90c      	cbnz	r4, d8d18 <__ieee754_pow+0xb0>
   d8d14:	45c2      	cmp	sl, r8
   d8d16:	ddc3      	ble.n	d8ca0 <__ieee754_pow+0x38>
   d8d18:	4854      	ldr	r0, [pc, #336]	; (d8e6c <__ieee754_pow+0x204>)
   d8d1a:	b009      	add	sp, #36	; 0x24
   d8d1c:	ecbd 8b0a 	vpop	{d8-d12}
   d8d20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8d24:	f000 be58 	b.w	d99d8 <nan>
   d8d28:	4951      	ldr	r1, [pc, #324]	; (d8e70 <__ieee754_pow+0x208>)
   d8d2a:	458a      	cmp	sl, r1
   d8d2c:	f300 8087 	bgt.w	d8e3e <__ieee754_pow+0x1d6>
   d8d30:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d8d34:	458a      	cmp	sl, r1
   d8d36:	dd0f      	ble.n	d8d58 <__ieee754_pow+0xf0>
   d8d38:	ea4f 512a 	mov.w	r1, sl, asr #20
   d8d3c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d8d40:	2914      	cmp	r1, #20
   d8d42:	f340 84ce 	ble.w	d96e2 <__ieee754_pow+0xa7a>
   d8d46:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d8d4a:	fa23 f001 	lsr.w	r0, r3, r1
   d8d4e:	fa00 f101 	lsl.w	r1, r0, r1
   d8d52:	4299      	cmp	r1, r3
   d8d54:	f000 8520 	beq.w	d9798 <__ieee754_pow+0xb30>
   d8d58:	2100      	movs	r1, #0
   d8d5a:	9103      	str	r1, [sp, #12]
   d8d5c:	2b00      	cmp	r3, #0
   d8d5e:	d0ad      	beq.n	d8cbc <__ieee754_pow+0x54>
   d8d60:	ec45 4b10 	vmov	d0, r4, r5
   d8d64:	9206      	str	r2, [sp, #24]
   d8d66:	f000 fe1d 	bl	d99a4 <fabs>
   d8d6a:	9a06      	ldr	r2, [sp, #24]
   d8d6c:	ed8d 0b00 	vstr	d0, [sp]
   d8d70:	bb5a      	cbnz	r2, d8dca <__ieee754_pow+0x162>
   d8d72:	f1b8 0f00 	cmp.w	r8, #0
   d8d76:	d004      	beq.n	d8d82 <__ieee754_pow+0x11a>
   d8d78:	4b3a      	ldr	r3, [pc, #232]	; (d8e64 <__ieee754_pow+0x1fc>)
   d8d7a:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d8d7e:	429a      	cmp	r2, r3
   d8d80:	d123      	bne.n	d8dca <__ieee754_pow+0x162>
   d8d82:	f1bb 0f00 	cmp.w	fp, #0
   d8d86:	da07      	bge.n	d8d98 <__ieee754_pow+0x130>
   d8d88:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8d8c:	4935      	ldr	r1, [pc, #212]	; (d8e64 <__ieee754_pow+0x1fc>)
   d8d8e:	2000      	movs	r0, #0
   d8d90:	f001 fa36 	bl	da200 <__aeabi_ddiv>
   d8d94:	e9cd 0100 	strd	r0, r1, [sp]
   d8d98:	f1b9 0f00 	cmp.w	r9, #0
   d8d9c:	dab2      	bge.n	d8d04 <__ieee754_pow+0x9c>
   d8d9e:	9b03      	ldr	r3, [sp, #12]
   d8da0:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d8da4:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d8da8:	ea58 0303 	orrs.w	r3, r8, r3
   d8dac:	f040 84be 	bne.w	d972c <__ieee754_pow+0xac4>
   d8db0:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8db4:	4610      	mov	r0, r2
   d8db6:	4619      	mov	r1, r3
   d8db8:	f000 ff40 	bl	d9c3c <__aeabi_dsub>
   d8dbc:	4602      	mov	r2, r0
   d8dbe:	460b      	mov	r3, r1
   d8dc0:	f001 fa1e 	bl	da200 <__aeabi_ddiv>
   d8dc4:	e9cd 0100 	strd	r0, r1, [sp]
   d8dc8:	e79c      	b.n	d8d04 <__ieee754_pow+0x9c>
   d8dca:	9a03      	ldr	r2, [sp, #12]
   d8dcc:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d8dd0:	3b01      	subs	r3, #1
   d8dd2:	9306      	str	r3, [sp, #24]
   d8dd4:	4313      	orrs	r3, r2
   d8dd6:	d035      	beq.n	d8e44 <__ieee754_pow+0x1dc>
   d8dd8:	4b26      	ldr	r3, [pc, #152]	; (d8e74 <__ieee754_pow+0x20c>)
   d8dda:	459a      	cmp	sl, r3
   d8ddc:	dd4e      	ble.n	d8e7c <__ieee754_pow+0x214>
   d8dde:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d8de2:	459a      	cmp	sl, r3
   d8de4:	4b24      	ldr	r3, [pc, #144]	; (d8e78 <__ieee754_pow+0x210>)
   d8de6:	f340 83ed 	ble.w	d95c4 <__ieee754_pow+0x95c>
   d8dea:	4598      	cmp	r8, r3
   d8dec:	f340 836b 	ble.w	d94c6 <__ieee754_pow+0x85e>
   d8df0:	f1bb 0f00 	cmp.w	fp, #0
   d8df4:	f340 836b 	ble.w	d94ce <__ieee754_pow+0x866>
   d8df8:	a317      	add	r3, pc, #92	; (adr r3, d8e58 <__ieee754_pow+0x1f0>)
   d8dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8dfe:	4610      	mov	r0, r2
   d8e00:	4619      	mov	r1, r3
   d8e02:	f001 f8d3 	bl	d9fac <__aeabi_dmul>
   d8e06:	e9cd 0100 	strd	r0, r1, [sp]
   d8e0a:	e77b      	b.n	d8d04 <__ieee754_pow+0x9c>
   d8e0c:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d8e10:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d8e14:	4313      	orrs	r3, r2
   d8e16:	f43f af71 	beq.w	d8cfc <__ieee754_pow+0x94>
   d8e1a:	4b17      	ldr	r3, [pc, #92]	; (d8e78 <__ieee754_pow+0x210>)
   d8e1c:	4598      	cmp	r8, r3
   d8e1e:	f340 8388 	ble.w	d9532 <__ieee754_pow+0x8ca>
   d8e22:	f1bb 0f00 	cmp.w	fp, #0
   d8e26:	f2c0 8352 	blt.w	d94ce <__ieee754_pow+0x866>
   d8e2a:	e9cd 6700 	strd	r6, r7, [sp]
   d8e2e:	e769      	b.n	d8d04 <__ieee754_pow+0x9c>
   d8e30:	f1bb 0f00 	cmp.w	fp, #0
   d8e34:	f2c0 8441 	blt.w	d96ba <__ieee754_pow+0xa52>
   d8e38:	e9cd 4500 	strd	r4, r5, [sp]
   d8e3c:	e762      	b.n	d8d04 <__ieee754_pow+0x9c>
   d8e3e:	2102      	movs	r1, #2
   d8e40:	9103      	str	r1, [sp, #12]
   d8e42:	e735      	b.n	d8cb0 <__ieee754_pow+0x48>
   d8e44:	4622      	mov	r2, r4
   d8e46:	462b      	mov	r3, r5
   d8e48:	e7b4      	b.n	d8db4 <__ieee754_pow+0x14c>
   d8e4a:	bf00      	nop
   d8e4c:	f3af 8000 	nop.w
   d8e50:	00000000 	.word	0x00000000
   d8e54:	3ff00000 	.word	0x3ff00000
   d8e58:	8800759c 	.word	0x8800759c
   d8e5c:	7e37e43c 	.word	0x7e37e43c
   d8e60:	7ff00000 	.word	0x7ff00000
   d8e64:	3ff00000 	.word	0x3ff00000
   d8e68:	3fe00000 	.word	0x3fe00000
   d8e6c:	000dbe5c 	.word	0x000dbe5c
   d8e70:	433fffff 	.word	0x433fffff
   d8e74:	41e00000 	.word	0x41e00000
   d8e78:	3fefffff 	.word	0x3fefffff
   d8e7c:	4be4      	ldr	r3, [pc, #912]	; (d9210 <__ieee754_pow+0x5a8>)
   d8e7e:	ea09 0303 	and.w	r3, r9, r3
   d8e82:	2b00      	cmp	r3, #0
   d8e84:	f040 8416 	bne.w	d96b4 <__ieee754_pow+0xa4c>
   d8e88:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8e8c:	4be1      	ldr	r3, [pc, #900]	; (d9214 <__ieee754_pow+0x5ac>)
   d8e8e:	2200      	movs	r2, #0
   d8e90:	f001 f88c 	bl	d9fac <__aeabi_dmul>
   d8e94:	e9cd 0100 	strd	r0, r1, [sp]
   d8e98:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d8e9c:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d8ea0:	ea4f 5328 	mov.w	r3, r8, asr #20
   d8ea4:	49dc      	ldr	r1, [pc, #880]	; (d9218 <__ieee754_pow+0x5b0>)
   d8ea6:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d8eaa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d8eae:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d8eb2:	1818      	adds	r0, r3, r0
   d8eb4:	428a      	cmp	r2, r1
   d8eb6:	9007      	str	r0, [sp, #28]
   d8eb8:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d8ebc:	f340 83e9 	ble.w	d9692 <__ieee754_pow+0xa2a>
   d8ec0:	4bd6      	ldr	r3, [pc, #856]	; (d921c <__ieee754_pow+0x5b4>)
   d8ec2:	429a      	cmp	r2, r3
   d8ec4:	f340 843e 	ble.w	d9744 <__ieee754_pow+0xadc>
   d8ec8:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d91b8 <__ieee754_pow+0x550>
   d8ecc:	eeb0 ba47 	vmov.f32	s22, s14
   d8ed0:	eef0 ba67 	vmov.f32	s23, s15
   d8ed4:	eeb0 ca47 	vmov.f32	s24, s14
   d8ed8:	eef0 ca67 	vmov.f32	s25, s15
   d8edc:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d91c0 <__ieee754_pow+0x558>
   d8ee0:	3001      	adds	r0, #1
   d8ee2:	ec54 3b17 	vmov	r3, r4, d7
   d8ee6:	9007      	str	r0, [sp, #28]
   d8ee8:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d8eec:	f04f 0900 	mov.w	r9, #0
   d8ef0:	e9dd ab00 	ldrd	sl, fp, [sp]
   d8ef4:	ec44 3b18 	vmov	d8, r3, r4
   d8ef8:	461a      	mov	r2, r3
   d8efa:	4650      	mov	r0, sl
   d8efc:	4623      	mov	r3, r4
   d8efe:	4641      	mov	r1, r8
   d8f00:	f000 fe9c 	bl	d9c3c <__aeabi_dsub>
   d8f04:	ec53 2b18 	vmov	r2, r3, d8
   d8f08:	4604      	mov	r4, r0
   d8f0a:	460d      	mov	r5, r1
   d8f0c:	4650      	mov	r0, sl
   d8f0e:	4641      	mov	r1, r8
   d8f10:	f000 fe96 	bl	d9c40 <__adddf3>
   d8f14:	4602      	mov	r2, r0
   d8f16:	460b      	mov	r3, r1
   d8f18:	2000      	movs	r0, #0
   d8f1a:	49c1      	ldr	r1, [pc, #772]	; (d9220 <__ieee754_pow+0x5b8>)
   d8f1c:	f001 f970 	bl	da200 <__aeabi_ddiv>
   d8f20:	ec45 4b1a 	vmov	d10, r4, r5
   d8f24:	ec41 0b19 	vmov	d9, r0, r1
   d8f28:	ec51 0b1a 	vmov	r0, r1, d10
   d8f2c:	ec53 2b19 	vmov	r2, r3, d9
   d8f30:	f001 f83c 	bl	d9fac <__aeabi_dmul>
   d8f34:	46c3      	mov	fp, r8
   d8f36:	ea4f 0868 	mov.w	r8, r8, asr #1
   d8f3a:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d8f3e:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d8f42:	eb03 0509 	add.w	r5, r3, r9
   d8f46:	460a      	mov	r2, r1
   d8f48:	2300      	movs	r3, #0
   d8f4a:	4601      	mov	r1, r0
   d8f4c:	e9cd 1200 	strd	r1, r2, [sp]
   d8f50:	9300      	str	r3, [sp, #0]
   d8f52:	e9dd 8900 	ldrd	r8, r9, [sp]
   d8f56:	2400      	movs	r4, #0
   d8f58:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d8f5c:	462b      	mov	r3, r5
   d8f5e:	4622      	mov	r2, r4
   d8f60:	4640      	mov	r0, r8
   d8f62:	4649      	mov	r1, r9
   d8f64:	f001 f822 	bl	d9fac <__aeabi_dmul>
   d8f68:	4602      	mov	r2, r0
   d8f6a:	460b      	mov	r3, r1
   d8f6c:	ec51 0b1a 	vmov	r0, r1, d10
   d8f70:	f000 fe64 	bl	d9c3c <__aeabi_dsub>
   d8f74:	ec41 0b17 	vmov	d7, r0, r1
   d8f78:	ec53 2b18 	vmov	r2, r3, d8
   d8f7c:	4620      	mov	r0, r4
   d8f7e:	4629      	mov	r1, r5
   d8f80:	ec55 4b17 	vmov	r4, r5, d7
   d8f84:	f000 fe5a 	bl	d9c3c <__aeabi_dsub>
   d8f88:	4602      	mov	r2, r0
   d8f8a:	460b      	mov	r3, r1
   d8f8c:	4650      	mov	r0, sl
   d8f8e:	4659      	mov	r1, fp
   d8f90:	f000 fe54 	bl	d9c3c <__aeabi_dsub>
   d8f94:	4642      	mov	r2, r8
   d8f96:	464b      	mov	r3, r9
   d8f98:	f001 f808 	bl	d9fac <__aeabi_dmul>
   d8f9c:	4602      	mov	r2, r0
   d8f9e:	460b      	mov	r3, r1
   d8fa0:	4620      	mov	r0, r4
   d8fa2:	4629      	mov	r1, r5
   d8fa4:	f000 fe4a 	bl	d9c3c <__aeabi_dsub>
   d8fa8:	ec53 2b19 	vmov	r2, r3, d9
   d8fac:	f000 fffe 	bl	d9fac <__aeabi_dmul>
   d8fb0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d8fb4:	4604      	mov	r4, r0
   d8fb6:	460d      	mov	r5, r1
   d8fb8:	4652      	mov	r2, sl
   d8fba:	465b      	mov	r3, fp
   d8fbc:	4650      	mov	r0, sl
   d8fbe:	4659      	mov	r1, fp
   d8fc0:	f000 fff4 	bl	d9fac <__aeabi_dmul>
   d8fc4:	a380      	add	r3, pc, #512	; (adr r3, d91c8 <__ieee754_pow+0x560>)
   d8fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8fca:	ec45 4b1a 	vmov	d10, r4, r5
   d8fce:	4604      	mov	r4, r0
   d8fd0:	460d      	mov	r5, r1
   d8fd2:	f000 ffeb 	bl	d9fac <__aeabi_dmul>
   d8fd6:	a37e      	add	r3, pc, #504	; (adr r3, d91d0 <__ieee754_pow+0x568>)
   d8fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8fdc:	f000 fe30 	bl	d9c40 <__adddf3>
   d8fe0:	4622      	mov	r2, r4
   d8fe2:	462b      	mov	r3, r5
   d8fe4:	f000 ffe2 	bl	d9fac <__aeabi_dmul>
   d8fe8:	a37b      	add	r3, pc, #492	; (adr r3, d91d8 <__ieee754_pow+0x570>)
   d8fea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8fee:	f000 fe27 	bl	d9c40 <__adddf3>
   d8ff2:	4622      	mov	r2, r4
   d8ff4:	462b      	mov	r3, r5
   d8ff6:	f000 ffd9 	bl	d9fac <__aeabi_dmul>
   d8ffa:	a379      	add	r3, pc, #484	; (adr r3, d91e0 <__ieee754_pow+0x578>)
   d8ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9000:	f000 fe1e 	bl	d9c40 <__adddf3>
   d9004:	4622      	mov	r2, r4
   d9006:	462b      	mov	r3, r5
   d9008:	f000 ffd0 	bl	d9fac <__aeabi_dmul>
   d900c:	a376      	add	r3, pc, #472	; (adr r3, d91e8 <__ieee754_pow+0x580>)
   d900e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9012:	f000 fe15 	bl	d9c40 <__adddf3>
   d9016:	4622      	mov	r2, r4
   d9018:	462b      	mov	r3, r5
   d901a:	f000 ffc7 	bl	d9fac <__aeabi_dmul>
   d901e:	a374      	add	r3, pc, #464	; (adr r3, d91f0 <__ieee754_pow+0x588>)
   d9020:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9024:	f000 fe0c 	bl	d9c40 <__adddf3>
   d9028:	4622      	mov	r2, r4
   d902a:	462b      	mov	r3, r5
   d902c:	4604      	mov	r4, r0
   d902e:	460d      	mov	r5, r1
   d9030:	4610      	mov	r0, r2
   d9032:	4619      	mov	r1, r3
   d9034:	f000 ffba 	bl	d9fac <__aeabi_dmul>
   d9038:	4602      	mov	r2, r0
   d903a:	460b      	mov	r3, r1
   d903c:	4620      	mov	r0, r4
   d903e:	4629      	mov	r1, r5
   d9040:	f000 ffb4 	bl	d9fac <__aeabi_dmul>
   d9044:	4642      	mov	r2, r8
   d9046:	4604      	mov	r4, r0
   d9048:	460d      	mov	r5, r1
   d904a:	464b      	mov	r3, r9
   d904c:	4650      	mov	r0, sl
   d904e:	4659      	mov	r1, fp
   d9050:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d9054:	f000 fdf4 	bl	d9c40 <__adddf3>
   d9058:	ec53 2b1a 	vmov	r2, r3, d10
   d905c:	f000 ffa6 	bl	d9fac <__aeabi_dmul>
   d9060:	4622      	mov	r2, r4
   d9062:	462b      	mov	r3, r5
   d9064:	f000 fdec 	bl	d9c40 <__adddf3>
   d9068:	4642      	mov	r2, r8
   d906a:	4604      	mov	r4, r0
   d906c:	460d      	mov	r5, r1
   d906e:	464b      	mov	r3, r9
   d9070:	4640      	mov	r0, r8
   d9072:	4649      	mov	r1, r9
   d9074:	f000 ff9a 	bl	d9fac <__aeabi_dmul>
   d9078:	ec45 4b19 	vmov	d9, r4, r5
   d907c:	4b69      	ldr	r3, [pc, #420]	; (d9224 <__ieee754_pow+0x5bc>)
   d907e:	2200      	movs	r2, #0
   d9080:	4682      	mov	sl, r0
   d9082:	468b      	mov	fp, r1
   d9084:	f000 fddc 	bl	d9c40 <__adddf3>
   d9088:	ec53 2b19 	vmov	r2, r3, d9
   d908c:	f000 fdd8 	bl	d9c40 <__adddf3>
   d9090:	9c00      	ldr	r4, [sp, #0]
   d9092:	460d      	mov	r5, r1
   d9094:	4622      	mov	r2, r4
   d9096:	462b      	mov	r3, r5
   d9098:	4640      	mov	r0, r8
   d909a:	4649      	mov	r1, r9
   d909c:	f000 ff86 	bl	d9fac <__aeabi_dmul>
   d90a0:	4b60      	ldr	r3, [pc, #384]	; (d9224 <__ieee754_pow+0x5bc>)
   d90a2:	4680      	mov	r8, r0
   d90a4:	4689      	mov	r9, r1
   d90a6:	2200      	movs	r2, #0
   d90a8:	4620      	mov	r0, r4
   d90aa:	4629      	mov	r1, r5
   d90ac:	f000 fdc6 	bl	d9c3c <__aeabi_dsub>
   d90b0:	4652      	mov	r2, sl
   d90b2:	465b      	mov	r3, fp
   d90b4:	f000 fdc2 	bl	d9c3c <__aeabi_dsub>
   d90b8:	4602      	mov	r2, r0
   d90ba:	460b      	mov	r3, r1
   d90bc:	ec51 0b19 	vmov	r0, r1, d9
   d90c0:	f000 fdbc 	bl	d9c3c <__aeabi_dsub>
   d90c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d90c8:	f000 ff70 	bl	d9fac <__aeabi_dmul>
   d90cc:	ec49 8b18 	vmov	d8, r8, r9
   d90d0:	4622      	mov	r2, r4
   d90d2:	4680      	mov	r8, r0
   d90d4:	4689      	mov	r9, r1
   d90d6:	462b      	mov	r3, r5
   d90d8:	ec51 0b1a 	vmov	r0, r1, d10
   d90dc:	f000 ff66 	bl	d9fac <__aeabi_dmul>
   d90e0:	4602      	mov	r2, r0
   d90e2:	460b      	mov	r3, r1
   d90e4:	4640      	mov	r0, r8
   d90e6:	4649      	mov	r1, r9
   d90e8:	f000 fdaa 	bl	d9c40 <__adddf3>
   d90ec:	4682      	mov	sl, r0
   d90ee:	468b      	mov	fp, r1
   d90f0:	4652      	mov	r2, sl
   d90f2:	465b      	mov	r3, fp
   d90f4:	ec51 0b18 	vmov	r0, r1, d8
   d90f8:	f000 fda2 	bl	d9c40 <__adddf3>
   d90fc:	9c00      	ldr	r4, [sp, #0]
   d90fe:	a33e      	add	r3, pc, #248	; (adr r3, d91f8 <__ieee754_pow+0x590>)
   d9100:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9104:	4620      	mov	r0, r4
   d9106:	460d      	mov	r5, r1
   d9108:	f000 ff50 	bl	d9fac <__aeabi_dmul>
   d910c:	ec53 2b18 	vmov	r2, r3, d8
   d9110:	4680      	mov	r8, r0
   d9112:	4689      	mov	r9, r1
   d9114:	4620      	mov	r0, r4
   d9116:	4629      	mov	r1, r5
   d9118:	f000 fd90 	bl	d9c3c <__aeabi_dsub>
   d911c:	4602      	mov	r2, r0
   d911e:	460b      	mov	r3, r1
   d9120:	4650      	mov	r0, sl
   d9122:	4659      	mov	r1, fp
   d9124:	f000 fd8a 	bl	d9c3c <__aeabi_dsub>
   d9128:	a335      	add	r3, pc, #212	; (adr r3, d9200 <__ieee754_pow+0x598>)
   d912a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d912e:	f000 ff3d 	bl	d9fac <__aeabi_dmul>
   d9132:	ec49 8b19 	vmov	d9, r8, r9
   d9136:	a334      	add	r3, pc, #208	; (adr r3, d9208 <__ieee754_pow+0x5a0>)
   d9138:	e9d3 2300 	ldrd	r2, r3, [r3]
   d913c:	4680      	mov	r8, r0
   d913e:	4689      	mov	r9, r1
   d9140:	4620      	mov	r0, r4
   d9142:	4629      	mov	r1, r5
   d9144:	f000 ff32 	bl	d9fac <__aeabi_dmul>
   d9148:	4602      	mov	r2, r0
   d914a:	460b      	mov	r3, r1
   d914c:	4640      	mov	r0, r8
   d914e:	4649      	mov	r1, r9
   d9150:	f000 fd76 	bl	d9c40 <__adddf3>
   d9154:	ec53 2b1c 	vmov	r2, r3, d12
   d9158:	f000 fd72 	bl	d9c40 <__adddf3>
   d915c:	4682      	mov	sl, r0
   d915e:	9807      	ldr	r0, [sp, #28]
   d9160:	468b      	mov	fp, r1
   d9162:	f000 feb9 	bl	d9ed8 <__aeabi_i2d>
   d9166:	4652      	mov	r2, sl
   d9168:	4680      	mov	r8, r0
   d916a:	4689      	mov	r9, r1
   d916c:	465b      	mov	r3, fp
   d916e:	ec51 0b19 	vmov	r0, r1, d9
   d9172:	f000 fd65 	bl	d9c40 <__adddf3>
   d9176:	ec53 2b1b 	vmov	r2, r3, d11
   d917a:	f000 fd61 	bl	d9c40 <__adddf3>
   d917e:	4642      	mov	r2, r8
   d9180:	464b      	mov	r3, r9
   d9182:	f000 fd5d 	bl	d9c40 <__adddf3>
   d9186:	9c00      	ldr	r4, [sp, #0]
   d9188:	4642      	mov	r2, r8
   d918a:	464b      	mov	r3, r9
   d918c:	4620      	mov	r0, r4
   d918e:	460d      	mov	r5, r1
   d9190:	f000 fd54 	bl	d9c3c <__aeabi_dsub>
   d9194:	ec53 2b1b 	vmov	r2, r3, d11
   d9198:	f000 fd50 	bl	d9c3c <__aeabi_dsub>
   d919c:	ec53 2b19 	vmov	r2, r3, d9
   d91a0:	f000 fd4c 	bl	d9c3c <__aeabi_dsub>
   d91a4:	4602      	mov	r2, r0
   d91a6:	460b      	mov	r3, r1
   d91a8:	4650      	mov	r0, sl
   d91aa:	4659      	mov	r1, fp
   d91ac:	f000 fd46 	bl	d9c3c <__aeabi_dsub>
   d91b0:	4682      	mov	sl, r0
   d91b2:	468b      	mov	fp, r1
   d91b4:	e038      	b.n	d9228 <__ieee754_pow+0x5c0>
   d91b6:	bf00      	nop
	...
   d91c4:	3ff00000 	.word	0x3ff00000
   d91c8:	4a454eef 	.word	0x4a454eef
   d91cc:	3fca7e28 	.word	0x3fca7e28
   d91d0:	93c9db65 	.word	0x93c9db65
   d91d4:	3fcd864a 	.word	0x3fcd864a
   d91d8:	a91d4101 	.word	0xa91d4101
   d91dc:	3fd17460 	.word	0x3fd17460
   d91e0:	518f264d 	.word	0x518f264d
   d91e4:	3fd55555 	.word	0x3fd55555
   d91e8:	db6fabff 	.word	0xdb6fabff
   d91ec:	3fdb6db6 	.word	0x3fdb6db6
   d91f0:	33333303 	.word	0x33333303
   d91f4:	3fe33333 	.word	0x3fe33333
   d91f8:	e0000000 	.word	0xe0000000
   d91fc:	3feec709 	.word	0x3feec709
   d9200:	dc3a03fd 	.word	0xdc3a03fd
   d9204:	3feec709 	.word	0x3feec709
   d9208:	145b01f5 	.word	0x145b01f5
   d920c:	be3e2fe0 	.word	0xbe3e2fe0
   d9210:	7ff00000 	.word	0x7ff00000
   d9214:	43400000 	.word	0x43400000
   d9218:	0003988e 	.word	0x0003988e
   d921c:	000bb679 	.word	0x000bb679
   d9220:	3ff00000 	.word	0x3ff00000
   d9224:	40080000 	.word	0x40080000
   d9228:	9b03      	ldr	r3, [sp, #12]
   d922a:	9a06      	ldr	r2, [sp, #24]
   d922c:	3b01      	subs	r3, #1
   d922e:	4313      	orrs	r3, r2
   d9230:	f040 8178 	bne.w	d9524 <__ieee754_pow+0x8bc>
   d9234:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d9548 <__ieee754_pow+0x8e0>
   d9238:	eeb0 9a47 	vmov.f32	s18, s14
   d923c:	eef0 9a67 	vmov.f32	s19, s15
   d9240:	2300      	movs	r3, #0
   d9242:	e9cd 6700 	strd	r6, r7, [sp]
   d9246:	9300      	str	r3, [sp, #0]
   d9248:	e9dd 8900 	ldrd	r8, r9, [sp]
   d924c:	4630      	mov	r0, r6
   d924e:	4642      	mov	r2, r8
   d9250:	4639      	mov	r1, r7
   d9252:	464b      	mov	r3, r9
   d9254:	f000 fcf2 	bl	d9c3c <__aeabi_dsub>
   d9258:	4622      	mov	r2, r4
   d925a:	462b      	mov	r3, r5
   d925c:	f000 fea6 	bl	d9fac <__aeabi_dmul>
   d9260:	4632      	mov	r2, r6
   d9262:	463b      	mov	r3, r7
   d9264:	4606      	mov	r6, r0
   d9266:	460f      	mov	r7, r1
   d9268:	4650      	mov	r0, sl
   d926a:	4659      	mov	r1, fp
   d926c:	f000 fe9e 	bl	d9fac <__aeabi_dmul>
   d9270:	4602      	mov	r2, r0
   d9272:	460b      	mov	r3, r1
   d9274:	4630      	mov	r0, r6
   d9276:	4639      	mov	r1, r7
   d9278:	f000 fce2 	bl	d9c40 <__adddf3>
   d927c:	4642      	mov	r2, r8
   d927e:	4682      	mov	sl, r0
   d9280:	468b      	mov	fp, r1
   d9282:	464b      	mov	r3, r9
   d9284:	4620      	mov	r0, r4
   d9286:	4629      	mov	r1, r5
   d9288:	f000 fe90 	bl	d9fac <__aeabi_dmul>
   d928c:	4606      	mov	r6, r0
   d928e:	460f      	mov	r7, r1
   d9290:	463b      	mov	r3, r7
   d9292:	4650      	mov	r0, sl
   d9294:	4659      	mov	r1, fp
   d9296:	4632      	mov	r2, r6
   d9298:	f000 fcd2 	bl	d9c40 <__adddf3>
   d929c:	4bc4      	ldr	r3, [pc, #784]	; (d95b0 <__ieee754_pow+0x948>)
   d929e:	4299      	cmp	r1, r3
   d92a0:	4604      	mov	r4, r0
   d92a2:	460d      	mov	r5, r1
   d92a4:	4688      	mov	r8, r1
   d92a6:	f340 8117 	ble.w	d94d8 <__ieee754_pow+0x870>
   d92aa:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d92ae:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d92b2:	4303      	orrs	r3, r0
   d92b4:	f040 822a 	bne.w	d970c <__ieee754_pow+0xaa4>
   d92b8:	a3a5      	add	r3, pc, #660	; (adr r3, d9550 <__ieee754_pow+0x8e8>)
   d92ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d92be:	4650      	mov	r0, sl
   d92c0:	4659      	mov	r1, fp
   d92c2:	f000 fcbd 	bl	d9c40 <__adddf3>
   d92c6:	4632      	mov	r2, r6
   d92c8:	ec41 0b18 	vmov	d8, r0, r1
   d92cc:	463b      	mov	r3, r7
   d92ce:	4620      	mov	r0, r4
   d92d0:	4629      	mov	r1, r5
   d92d2:	f000 fcb3 	bl	d9c3c <__aeabi_dsub>
   d92d6:	4602      	mov	r2, r0
   d92d8:	460b      	mov	r3, r1
   d92da:	ec51 0b18 	vmov	r0, r1, d8
   d92de:	f001 f8f5 	bl	da4cc <__aeabi_dcmpgt>
   d92e2:	2800      	cmp	r0, #0
   d92e4:	f040 8212 	bne.w	d970c <__ieee754_pow+0xaa4>
   d92e8:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d92ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d92f0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d92f4:	fa42 f303 	asr.w	r3, r2, r3
   d92f8:	4443      	add	r3, r8
   d92fa:	49ae      	ldr	r1, [pc, #696]	; (d95b4 <__ieee754_pow+0x94c>)
   d92fc:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d9300:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d9304:	fa41 fc02 	asr.w	ip, r1, r2
   d9308:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d930c:	ea23 010c 	bic.w	r1, r3, ip
   d9310:	f1c2 0414 	rsb	r4, r2, #20
   d9314:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d9318:	f1b8 0f00 	cmp.w	r8, #0
   d931c:	460b      	mov	r3, r1
   d931e:	fa45 f104 	asr.w	r1, r5, r4
   d9322:	9103      	str	r1, [sp, #12]
   d9324:	f04f 0000 	mov.w	r0, #0
   d9328:	bfb8      	it	lt
   d932a:	4249      	neglt	r1, r1
   d932c:	4602      	mov	r2, r0
   d932e:	bfb8      	it	lt
   d9330:	9103      	strlt	r1, [sp, #12]
   d9332:	4630      	mov	r0, r6
   d9334:	4639      	mov	r1, r7
   d9336:	f000 fc81 	bl	d9c3c <__aeabi_dsub>
   d933a:	4606      	mov	r6, r0
   d933c:	460f      	mov	r7, r1
   d933e:	463b      	mov	r3, r7
   d9340:	4650      	mov	r0, sl
   d9342:	4659      	mov	r1, fp
   d9344:	4632      	mov	r2, r6
   d9346:	f000 fc7b 	bl	d9c40 <__adddf3>
   d934a:	9b03      	ldr	r3, [sp, #12]
   d934c:	051b      	lsls	r3, r3, #20
   d934e:	9300      	str	r3, [sp, #0]
   d9350:	460d      	mov	r5, r1
   d9352:	2400      	movs	r4, #0
   d9354:	a380      	add	r3, pc, #512	; (adr r3, d9558 <__ieee754_pow+0x8f0>)
   d9356:	e9d3 2300 	ldrd	r2, r3, [r3]
   d935a:	4620      	mov	r0, r4
   d935c:	4629      	mov	r1, r5
   d935e:	f000 fe25 	bl	d9fac <__aeabi_dmul>
   d9362:	4632      	mov	r2, r6
   d9364:	4680      	mov	r8, r0
   d9366:	4689      	mov	r9, r1
   d9368:	463b      	mov	r3, r7
   d936a:	4620      	mov	r0, r4
   d936c:	4629      	mov	r1, r5
   d936e:	f000 fc65 	bl	d9c3c <__aeabi_dsub>
   d9372:	4602      	mov	r2, r0
   d9374:	460b      	mov	r3, r1
   d9376:	4650      	mov	r0, sl
   d9378:	4659      	mov	r1, fp
   d937a:	f000 fc5f 	bl	d9c3c <__aeabi_dsub>
   d937e:	a378      	add	r3, pc, #480	; (adr r3, d9560 <__ieee754_pow+0x8f8>)
   d9380:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9384:	f000 fe12 	bl	d9fac <__aeabi_dmul>
   d9388:	a377      	add	r3, pc, #476	; (adr r3, d9568 <__ieee754_pow+0x900>)
   d938a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d938e:	4606      	mov	r6, r0
   d9390:	460f      	mov	r7, r1
   d9392:	4620      	mov	r0, r4
   d9394:	4629      	mov	r1, r5
   d9396:	f000 fe09 	bl	d9fac <__aeabi_dmul>
   d939a:	4602      	mov	r2, r0
   d939c:	460b      	mov	r3, r1
   d939e:	4630      	mov	r0, r6
   d93a0:	4639      	mov	r1, r7
   d93a2:	f000 fc4d 	bl	d9c40 <__adddf3>
   d93a6:	4606      	mov	r6, r0
   d93a8:	460f      	mov	r7, r1
   d93aa:	4632      	mov	r2, r6
   d93ac:	463b      	mov	r3, r7
   d93ae:	4640      	mov	r0, r8
   d93b0:	4649      	mov	r1, r9
   d93b2:	f000 fc45 	bl	d9c40 <__adddf3>
   d93b6:	4642      	mov	r2, r8
   d93b8:	464b      	mov	r3, r9
   d93ba:	4604      	mov	r4, r0
   d93bc:	460d      	mov	r5, r1
   d93be:	f000 fc3d 	bl	d9c3c <__aeabi_dsub>
   d93c2:	4602      	mov	r2, r0
   d93c4:	460b      	mov	r3, r1
   d93c6:	4630      	mov	r0, r6
   d93c8:	4639      	mov	r1, r7
   d93ca:	f000 fc37 	bl	d9c3c <__aeabi_dsub>
   d93ce:	4622      	mov	r2, r4
   d93d0:	4682      	mov	sl, r0
   d93d2:	468b      	mov	fp, r1
   d93d4:	462b      	mov	r3, r5
   d93d6:	4620      	mov	r0, r4
   d93d8:	4629      	mov	r1, r5
   d93da:	f000 fde7 	bl	d9fac <__aeabi_dmul>
   d93de:	a364      	add	r3, pc, #400	; (adr r3, d9570 <__ieee754_pow+0x908>)
   d93e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d93e4:	4606      	mov	r6, r0
   d93e6:	460f      	mov	r7, r1
   d93e8:	f000 fde0 	bl	d9fac <__aeabi_dmul>
   d93ec:	a362      	add	r3, pc, #392	; (adr r3, d9578 <__ieee754_pow+0x910>)
   d93ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d93f2:	f000 fc23 	bl	d9c3c <__aeabi_dsub>
   d93f6:	4632      	mov	r2, r6
   d93f8:	463b      	mov	r3, r7
   d93fa:	f000 fdd7 	bl	d9fac <__aeabi_dmul>
   d93fe:	a360      	add	r3, pc, #384	; (adr r3, d9580 <__ieee754_pow+0x918>)
   d9400:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9404:	f000 fc1c 	bl	d9c40 <__adddf3>
   d9408:	4632      	mov	r2, r6
   d940a:	463b      	mov	r3, r7
   d940c:	f000 fdce 	bl	d9fac <__aeabi_dmul>
   d9410:	a35d      	add	r3, pc, #372	; (adr r3, d9588 <__ieee754_pow+0x920>)
   d9412:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9416:	f000 fc11 	bl	d9c3c <__aeabi_dsub>
   d941a:	4632      	mov	r2, r6
   d941c:	463b      	mov	r3, r7
   d941e:	f000 fdc5 	bl	d9fac <__aeabi_dmul>
   d9422:	a35b      	add	r3, pc, #364	; (adr r3, d9590 <__ieee754_pow+0x928>)
   d9424:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9428:	f000 fc0a 	bl	d9c40 <__adddf3>
   d942c:	4632      	mov	r2, r6
   d942e:	463b      	mov	r3, r7
   d9430:	f000 fdbc 	bl	d9fac <__aeabi_dmul>
   d9434:	4602      	mov	r2, r0
   d9436:	460b      	mov	r3, r1
   d9438:	4620      	mov	r0, r4
   d943a:	4629      	mov	r1, r5
   d943c:	f000 fbfe 	bl	d9c3c <__aeabi_dsub>
   d9440:	4606      	mov	r6, r0
   d9442:	460f      	mov	r7, r1
   d9444:	4632      	mov	r2, r6
   d9446:	463b      	mov	r3, r7
   d9448:	4620      	mov	r0, r4
   d944a:	4629      	mov	r1, r5
   d944c:	f000 fdae 	bl	d9fac <__aeabi_dmul>
   d9450:	2200      	movs	r2, #0
   d9452:	4680      	mov	r8, r0
   d9454:	4689      	mov	r9, r1
   d9456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d945a:	4630      	mov	r0, r6
   d945c:	4639      	mov	r1, r7
   d945e:	f000 fbed 	bl	d9c3c <__aeabi_dsub>
   d9462:	4602      	mov	r2, r0
   d9464:	460b      	mov	r3, r1
   d9466:	4640      	mov	r0, r8
   d9468:	4649      	mov	r1, r9
   d946a:	f000 fec9 	bl	da200 <__aeabi_ddiv>
   d946e:	4652      	mov	r2, sl
   d9470:	4606      	mov	r6, r0
   d9472:	460f      	mov	r7, r1
   d9474:	465b      	mov	r3, fp
   d9476:	4620      	mov	r0, r4
   d9478:	4629      	mov	r1, r5
   d947a:	f000 fd97 	bl	d9fac <__aeabi_dmul>
   d947e:	4652      	mov	r2, sl
   d9480:	465b      	mov	r3, fp
   d9482:	f000 fbdd 	bl	d9c40 <__adddf3>
   d9486:	4602      	mov	r2, r0
   d9488:	460b      	mov	r3, r1
   d948a:	4630      	mov	r0, r6
   d948c:	4639      	mov	r1, r7
   d948e:	f000 fbd5 	bl	d9c3c <__aeabi_dsub>
   d9492:	4622      	mov	r2, r4
   d9494:	462b      	mov	r3, r5
   d9496:	f000 fbd1 	bl	d9c3c <__aeabi_dsub>
   d949a:	4602      	mov	r2, r0
   d949c:	460b      	mov	r3, r1
   d949e:	2000      	movs	r0, #0
   d94a0:	4945      	ldr	r1, [pc, #276]	; (d95b8 <__ieee754_pow+0x950>)
   d94a2:	f000 fbcb 	bl	d9c3c <__aeabi_dsub>
   d94a6:	460b      	mov	r3, r1
   d94a8:	9900      	ldr	r1, [sp, #0]
   d94aa:	4419      	add	r1, r3
   d94ac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d94b0:	4602      	mov	r2, r0
   d94b2:	f2c0 8169 	blt.w	d9788 <__ieee754_pow+0xb20>
   d94b6:	4610      	mov	r0, r2
   d94b8:	ec53 2b19 	vmov	r2, r3, d9
   d94bc:	f000 fd76 	bl	d9fac <__aeabi_dmul>
   d94c0:	e9cd 0100 	strd	r0, r1, [sp]
   d94c4:	e41e      	b.n	d8d04 <__ieee754_pow+0x9c>
   d94c6:	f1bb 0f00 	cmp.w	fp, #0
   d94ca:	f6ff ac95 	blt.w	d8df8 <__ieee754_pow+0x190>
   d94ce:	ed9f 7b32 	vldr	d7, [pc, #200]	; d9598 <__ieee754_pow+0x930>
   d94d2:	ed8d 7b00 	vstr	d7, [sp]
   d94d6:	e415      	b.n	d8d04 <__ieee754_pow+0x9c>
   d94d8:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d95c0 <__ieee754_pow+0x958>
   d94dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d94e0:	4563      	cmp	r3, ip
   d94e2:	f340 810b 	ble.w	d96fc <__ieee754_pow+0xa94>
   d94e6:	4b35      	ldr	r3, [pc, #212]	; (d95bc <__ieee754_pow+0x954>)
   d94e8:	440b      	add	r3, r1
   d94ea:	4303      	orrs	r3, r0
   d94ec:	d10a      	bne.n	d9504 <__ieee754_pow+0x89c>
   d94ee:	4632      	mov	r2, r6
   d94f0:	463b      	mov	r3, r7
   d94f2:	f000 fba3 	bl	d9c3c <__aeabi_dsub>
   d94f6:	4652      	mov	r2, sl
   d94f8:	465b      	mov	r3, fp
   d94fa:	f000 ffdd 	bl	da4b8 <__aeabi_dcmpge>
   d94fe:	2800      	cmp	r0, #0
   d9500:	f43f aef2 	beq.w	d92e8 <__ieee754_pow+0x680>
   d9504:	a326      	add	r3, pc, #152	; (adr r3, d95a0 <__ieee754_pow+0x938>)
   d9506:	e9d3 2300 	ldrd	r2, r3, [r3]
   d950a:	ec51 0b19 	vmov	r0, r1, d9
   d950e:	f000 fd4d 	bl	d9fac <__aeabi_dmul>
   d9512:	a323      	add	r3, pc, #140	; (adr r3, d95a0 <__ieee754_pow+0x938>)
   d9514:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9518:	f000 fd48 	bl	d9fac <__aeabi_dmul>
   d951c:	e9cd 0100 	strd	r0, r1, [sp]
   d9520:	f7ff bbf0 	b.w	d8d04 <__ieee754_pow+0x9c>
   d9524:	ed9f 7b20 	vldr	d7, [pc, #128]	; d95a8 <__ieee754_pow+0x940>
   d9528:	eeb0 9a47 	vmov.f32	s18, s14
   d952c:	eef0 9a67 	vmov.f32	s19, s15
   d9530:	e686      	b.n	d9240 <__ieee754_pow+0x5d8>
   d9532:	f1bb 0f00 	cmp.w	fp, #0
   d9536:	daca      	bge.n	d94ce <__ieee754_pow+0x866>
   d9538:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d953c:	9600      	str	r6, [sp, #0]
   d953e:	9301      	str	r3, [sp, #4]
   d9540:	f7ff bbe0 	b.w	d8d04 <__ieee754_pow+0x9c>
   d9544:	f3af 8000 	nop.w
   d9548:	00000000 	.word	0x00000000
   d954c:	bff00000 	.word	0xbff00000
   d9550:	652b82fe 	.word	0x652b82fe
   d9554:	3c971547 	.word	0x3c971547
   d9558:	00000000 	.word	0x00000000
   d955c:	3fe62e43 	.word	0x3fe62e43
   d9560:	fefa39ef 	.word	0xfefa39ef
   d9564:	3fe62e42 	.word	0x3fe62e42
   d9568:	0ca86c39 	.word	0x0ca86c39
   d956c:	be205c61 	.word	0xbe205c61
   d9570:	72bea4d0 	.word	0x72bea4d0
   d9574:	3e663769 	.word	0x3e663769
   d9578:	c5d26bf1 	.word	0xc5d26bf1
   d957c:	3ebbbd41 	.word	0x3ebbbd41
   d9580:	af25de2c 	.word	0xaf25de2c
   d9584:	3f11566a 	.word	0x3f11566a
   d9588:	16bebd93 	.word	0x16bebd93
   d958c:	3f66c16c 	.word	0x3f66c16c
   d9590:	5555553e 	.word	0x5555553e
   d9594:	3fc55555 	.word	0x3fc55555
	...
   d95a0:	c2f8f359 	.word	0xc2f8f359
   d95a4:	01a56e1f 	.word	0x01a56e1f
   d95a8:	00000000 	.word	0x00000000
   d95ac:	3ff00000 	.word	0x3ff00000
   d95b0:	408fffff 	.word	0x408fffff
   d95b4:	000fffff 	.word	0x000fffff
   d95b8:	3ff00000 	.word	0x3ff00000
   d95bc:	3f6f3400 	.word	0x3f6f3400
   d95c0:	4090cbff 	.word	0x4090cbff
   d95c4:	4598      	cmp	r8, r3
   d95c6:	f6ff af7e 	blt.w	d94c6 <__ieee754_pow+0x85e>
   d95ca:	4b91      	ldr	r3, [pc, #580]	; (d9810 <__ieee754_pow+0xba8>)
   d95cc:	4598      	cmp	r8, r3
   d95ce:	f73f ac0f 	bgt.w	d8df0 <__ieee754_pow+0x188>
   d95d2:	4b8f      	ldr	r3, [pc, #572]	; (d9810 <__ieee754_pow+0xba8>)
   d95d4:	2200      	movs	r2, #0
   d95d6:	e9dd 0100 	ldrd	r0, r1, [sp]
   d95da:	f000 fb2f 	bl	d9c3c <__aeabi_dsub>
   d95de:	a378      	add	r3, pc, #480	; (adr r3, d97c0 <__ieee754_pow+0xb58>)
   d95e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d95e4:	4604      	mov	r4, r0
   d95e6:	460d      	mov	r5, r1
   d95e8:	f000 fce0 	bl	d9fac <__aeabi_dmul>
   d95ec:	a376      	add	r3, pc, #472	; (adr r3, d97c8 <__ieee754_pow+0xb60>)
   d95ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d95f2:	4682      	mov	sl, r0
   d95f4:	468b      	mov	fp, r1
   d95f6:	4620      	mov	r0, r4
   d95f8:	4629      	mov	r1, r5
   d95fa:	f000 fcd7 	bl	d9fac <__aeabi_dmul>
   d95fe:	4b85      	ldr	r3, [pc, #532]	; (d9814 <__ieee754_pow+0xbac>)
   d9600:	4680      	mov	r8, r0
   d9602:	4689      	mov	r9, r1
   d9604:	2200      	movs	r2, #0
   d9606:	4620      	mov	r0, r4
   d9608:	4629      	mov	r1, r5
   d960a:	f000 fccf 	bl	d9fac <__aeabi_dmul>
   d960e:	4602      	mov	r2, r0
   d9610:	460b      	mov	r3, r1
   d9612:	a16f      	add	r1, pc, #444	; (adr r1, d97d0 <__ieee754_pow+0xb68>)
   d9614:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9618:	f000 fb10 	bl	d9c3c <__aeabi_dsub>
   d961c:	4622      	mov	r2, r4
   d961e:	462b      	mov	r3, r5
   d9620:	f000 fcc4 	bl	d9fac <__aeabi_dmul>
   d9624:	4602      	mov	r2, r0
   d9626:	460b      	mov	r3, r1
   d9628:	2000      	movs	r0, #0
   d962a:	497b      	ldr	r1, [pc, #492]	; (d9818 <__ieee754_pow+0xbb0>)
   d962c:	f000 fb06 	bl	d9c3c <__aeabi_dsub>
   d9630:	4622      	mov	r2, r4
   d9632:	462b      	mov	r3, r5
   d9634:	4604      	mov	r4, r0
   d9636:	460d      	mov	r5, r1
   d9638:	4610      	mov	r0, r2
   d963a:	4619      	mov	r1, r3
   d963c:	f000 fcb6 	bl	d9fac <__aeabi_dmul>
   d9640:	4602      	mov	r2, r0
   d9642:	460b      	mov	r3, r1
   d9644:	4620      	mov	r0, r4
   d9646:	4629      	mov	r1, r5
   d9648:	f000 fcb0 	bl	d9fac <__aeabi_dmul>
   d964c:	a362      	add	r3, pc, #392	; (adr r3, d97d8 <__ieee754_pow+0xb70>)
   d964e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9652:	f000 fcab 	bl	d9fac <__aeabi_dmul>
   d9656:	4602      	mov	r2, r0
   d9658:	460b      	mov	r3, r1
   d965a:	4640      	mov	r0, r8
   d965c:	4649      	mov	r1, r9
   d965e:	f000 faed 	bl	d9c3c <__aeabi_dsub>
   d9662:	4680      	mov	r8, r0
   d9664:	4689      	mov	r9, r1
   d9666:	4650      	mov	r0, sl
   d9668:	4659      	mov	r1, fp
   d966a:	4642      	mov	r2, r8
   d966c:	464b      	mov	r3, r9
   d966e:	f000 fae7 	bl	d9c40 <__adddf3>
   d9672:	2400      	movs	r4, #0
   d9674:	4652      	mov	r2, sl
   d9676:	465b      	mov	r3, fp
   d9678:	4620      	mov	r0, r4
   d967a:	460d      	mov	r5, r1
   d967c:	f000 fade 	bl	d9c3c <__aeabi_dsub>
   d9680:	4602      	mov	r2, r0
   d9682:	460b      	mov	r3, r1
   d9684:	4640      	mov	r0, r8
   d9686:	4649      	mov	r1, r9
   d9688:	f000 fad8 	bl	d9c3c <__aeabi_dsub>
   d968c:	4682      	mov	sl, r0
   d968e:	468b      	mov	fp, r1
   d9690:	e5ca      	b.n	d9228 <__ieee754_pow+0x5c0>
   d9692:	ed9f 7b53 	vldr	d7, [pc, #332]	; d97e0 <__ieee754_pow+0xb78>
   d9696:	eeb0 ba47 	vmov.f32	s22, s14
   d969a:	eef0 ba67 	vmov.f32	s23, s15
   d969e:	eeb0 ca47 	vmov.f32	s24, s14
   d96a2:	eef0 ca67 	vmov.f32	s25, s15
   d96a6:	ed9f 7b50 	vldr	d7, [pc, #320]	; d97e8 <__ieee754_pow+0xb80>
   d96aa:	f04f 0900 	mov.w	r9, #0
   d96ae:	ec54 3b17 	vmov	r3, r4, d7
   d96b2:	e41d      	b.n	d8ef0 <__ieee754_pow+0x288>
   d96b4:	2000      	movs	r0, #0
   d96b6:	f7ff bbf3 	b.w	d8ea0 <__ieee754_pow+0x238>
   d96ba:	4955      	ldr	r1, [pc, #340]	; (d9810 <__ieee754_pow+0xba8>)
   d96bc:	4622      	mov	r2, r4
   d96be:	462b      	mov	r3, r5
   d96c0:	2000      	movs	r0, #0
   d96c2:	f000 fd9d 	bl	da200 <__aeabi_ddiv>
   d96c6:	e9cd 0100 	strd	r0, r1, [sp]
   d96ca:	f7ff bb1b 	b.w	d8d04 <__ieee754_pow+0x9c>
   d96ce:	4622      	mov	r2, r4
   d96d0:	462b      	mov	r3, r5
   d96d2:	4620      	mov	r0, r4
   d96d4:	4629      	mov	r1, r5
   d96d6:	f000 fc69 	bl	d9fac <__aeabi_dmul>
   d96da:	e9cd 0100 	strd	r0, r1, [sp]
   d96de:	f7ff bb11 	b.w	d8d04 <__ieee754_pow+0x9c>
   d96e2:	2b00      	cmp	r3, #0
   d96e4:	d142      	bne.n	d976c <__ieee754_pow+0xb04>
   d96e6:	f1c1 0114 	rsb	r1, r1, #20
   d96ea:	fa4a f001 	asr.w	r0, sl, r1
   d96ee:	fa00 f101 	lsl.w	r1, r0, r1
   d96f2:	4551      	cmp	r1, sl
   d96f4:	d05a      	beq.n	d97ac <__ieee754_pow+0xb44>
   d96f6:	9303      	str	r3, [sp, #12]
   d96f8:	f7ff bae0 	b.w	d8cbc <__ieee754_pow+0x54>
   d96fc:	4a46      	ldr	r2, [pc, #280]	; (d9818 <__ieee754_pow+0xbb0>)
   d96fe:	4293      	cmp	r3, r2
   d9700:	dc5b      	bgt.n	d97ba <__ieee754_pow+0xb52>
   d9702:	e9dd 1200 	ldrd	r1, r2, [sp]
   d9706:	9100      	str	r1, [sp, #0]
   d9708:	9103      	str	r1, [sp, #12]
   d970a:	e622      	b.n	d9352 <__ieee754_pow+0x6ea>
   d970c:	a338      	add	r3, pc, #224	; (adr r3, d97f0 <__ieee754_pow+0xb88>)
   d970e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9712:	ec51 0b19 	vmov	r0, r1, d9
   d9716:	f000 fc49 	bl	d9fac <__aeabi_dmul>
   d971a:	a335      	add	r3, pc, #212	; (adr r3, d97f0 <__ieee754_pow+0xb88>)
   d971c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9720:	f000 fc44 	bl	d9fac <__aeabi_dmul>
   d9724:	e9cd 0100 	strd	r0, r1, [sp]
   d9728:	f7ff baec 	b.w	d8d04 <__ieee754_pow+0x9c>
   d972c:	9b03      	ldr	r3, [sp, #12]
   d972e:	2b01      	cmp	r3, #1
   d9730:	f47f aae8 	bne.w	d8d04 <__ieee754_pow+0x9c>
   d9734:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9738:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d973c:	e9cd 2300 	strd	r2, r3, [sp]
   d9740:	f7ff bae0 	b.w	d8d04 <__ieee754_pow+0x9c>
   d9744:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d97f8 <__ieee754_pow+0xb90>
   d9748:	eeb0 ba47 	vmov.f32	s22, s14
   d974c:	eef0 ba67 	vmov.f32	s23, s15
   d9750:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d9800 <__ieee754_pow+0xb98>
   d9754:	eeb0 ca47 	vmov.f32	s24, s14
   d9758:	eef0 ca67 	vmov.f32	s25, s15
   d975c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d9808 <__ieee754_pow+0xba0>
   d9760:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d9764:	ec54 3b17 	vmov	r3, r4, d7
   d9768:	f7ff bbc2 	b.w	d8ef0 <__ieee754_pow+0x288>
   d976c:	ec45 4b10 	vmov	d0, r4, r5
   d9770:	9203      	str	r2, [sp, #12]
   d9772:	f000 f917 	bl	d99a4 <fabs>
   d9776:	9a03      	ldr	r2, [sp, #12]
   d9778:	ed8d 0b00 	vstr	d0, [sp]
   d977c:	2a00      	cmp	r2, #0
   d977e:	f47f ab61 	bne.w	d8e44 <__ieee754_pow+0x1dc>
   d9782:	9203      	str	r2, [sp, #12]
   d9784:	f7ff baf5 	b.w	d8d72 <__ieee754_pow+0x10a>
   d9788:	9803      	ldr	r0, [sp, #12]
   d978a:	ec43 2b10 	vmov	d0, r2, r3
   d978e:	f000 f9bf 	bl	d9b10 <scalbn>
   d9792:	ec51 0b10 	vmov	r0, r1, d0
   d9796:	e68f      	b.n	d94b8 <__ieee754_pow+0x850>
   d9798:	f000 0001 	and.w	r0, r0, #1
   d979c:	f1c0 0102 	rsb	r1, r0, #2
   d97a0:	9103      	str	r1, [sp, #12]
   d97a2:	2b00      	cmp	r3, #0
   d97a4:	f43f aa8a 	beq.w	d8cbc <__ieee754_pow+0x54>
   d97a8:	f7ff bada 	b.w	d8d60 <__ieee754_pow+0xf8>
   d97ac:	f000 0001 	and.w	r0, r0, #1
   d97b0:	f1c0 0302 	rsb	r3, r0, #2
   d97b4:	9303      	str	r3, [sp, #12]
   d97b6:	f7ff ba81 	b.w	d8cbc <__ieee754_pow+0x54>
   d97ba:	151b      	asrs	r3, r3, #20
   d97bc:	e596      	b.n	d92ec <__ieee754_pow+0x684>
   d97be:	bf00      	nop
   d97c0:	60000000 	.word	0x60000000
   d97c4:	3ff71547 	.word	0x3ff71547
   d97c8:	f85ddf44 	.word	0xf85ddf44
   d97cc:	3e54ae0b 	.word	0x3e54ae0b
   d97d0:	55555555 	.word	0x55555555
   d97d4:	3fd55555 	.word	0x3fd55555
   d97d8:	652b82fe 	.word	0x652b82fe
   d97dc:	3ff71547 	.word	0x3ff71547
	...
   d97ec:	3ff00000 	.word	0x3ff00000
   d97f0:	8800759c 	.word	0x8800759c
   d97f4:	7e37e43c 	.word	0x7e37e43c
   d97f8:	40000000 	.word	0x40000000
   d97fc:	3fe2b803 	.word	0x3fe2b803
   d9800:	43cfd006 	.word	0x43cfd006
   d9804:	3e4cfdeb 	.word	0x3e4cfdeb
   d9808:	00000000 	.word	0x00000000
   d980c:	3ff80000 	.word	0x3ff80000
   d9810:	3ff00000 	.word	0x3ff00000
   d9814:	3fd00000 	.word	0x3fd00000
   d9818:	3fe00000 	.word	0x3fe00000

000d981c <__ieee754_sqrt>:
   d981c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9820:	4a5f      	ldr	r2, [pc, #380]	; (d99a0 <__ieee754_sqrt+0x184>)
   d9822:	ec57 6b10 	vmov	r6, r7, d0
   d9826:	43ba      	bics	r2, r7
   d9828:	f000 8098 	beq.w	d995c <__ieee754_sqrt+0x140>
   d982c:	2f00      	cmp	r7, #0
   d982e:	ee10 4a10 	vmov	r4, s0
   d9832:	463b      	mov	r3, r7
   d9834:	dd4e      	ble.n	d98d4 <__ieee754_sqrt+0xb8>
   d9836:	1539      	asrs	r1, r7, #20
   d9838:	d05b      	beq.n	d98f2 <__ieee754_sqrt+0xd6>
   d983a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d983e:	07ca      	lsls	r2, r1, #31
   d9840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9844:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d9848:	d403      	bmi.n	d9852 <__ieee754_sqrt+0x36>
   d984a:	005b      	lsls	r3, r3, #1
   d984c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d9850:	0064      	lsls	r4, r4, #1
   d9852:	0fe2      	lsrs	r2, r4, #31
   d9854:	f04f 0c00 	mov.w	ip, #0
   d9858:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d985c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d9860:	0064      	lsls	r4, r4, #1
   d9862:	4666      	mov	r6, ip
   d9864:	2516      	movs	r5, #22
   d9866:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d986a:	18b1      	adds	r1, r6, r2
   d986c:	4299      	cmp	r1, r3
   d986e:	dc02      	bgt.n	d9876 <__ieee754_sqrt+0x5a>
   d9870:	1a5b      	subs	r3, r3, r1
   d9872:	188e      	adds	r6, r1, r2
   d9874:	4494      	add	ip, r2
   d9876:	005b      	lsls	r3, r3, #1
   d9878:	3d01      	subs	r5, #1
   d987a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d987e:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d9882:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d9886:	d1f0      	bne.n	d986a <__ieee754_sqrt+0x4e>
   d9888:	462f      	mov	r7, r5
   d988a:	2020      	movs	r0, #32
   d988c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d9890:	e009      	b.n	d98a6 <__ieee754_sqrt+0x8a>
   d9892:	d03e      	beq.n	d9912 <__ieee754_sqrt+0xf6>
   d9894:	0fe1      	lsrs	r1, r4, #31
   d9896:	3801      	subs	r0, #1
   d9898:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d989c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d98a0:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d98a4:	d03e      	beq.n	d9924 <__ieee754_sqrt+0x108>
   d98a6:	42b3      	cmp	r3, r6
   d98a8:	eb02 0105 	add.w	r1, r2, r5
   d98ac:	ddf1      	ble.n	d9892 <__ieee754_sqrt+0x76>
   d98ae:	2900      	cmp	r1, #0
   d98b0:	eb01 0502 	add.w	r5, r1, r2
   d98b4:	db09      	blt.n	d98ca <__ieee754_sqrt+0xae>
   d98b6:	46b0      	mov	r8, r6
   d98b8:	1b9b      	subs	r3, r3, r6
   d98ba:	42a1      	cmp	r1, r4
   d98bc:	bf88      	it	hi
   d98be:	f103 33ff 	addhi.w	r3, r3, #4294967295
   d98c2:	1a64      	subs	r4, r4, r1
   d98c4:	4417      	add	r7, r2
   d98c6:	4646      	mov	r6, r8
   d98c8:	e7e4      	b.n	d9894 <__ieee754_sqrt+0x78>
   d98ca:	2d00      	cmp	r5, #0
   d98cc:	dbf3      	blt.n	d98b6 <__ieee754_sqrt+0x9a>
   d98ce:	f106 0801 	add.w	r8, r6, #1
   d98d2:	e7f1      	b.n	d98b8 <__ieee754_sqrt+0x9c>
   d98d4:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d98d8:	4332      	orrs	r2, r6
   d98da:	d036      	beq.n	d994a <__ieee754_sqrt+0x12e>
   d98dc:	2f00      	cmp	r7, #0
   d98de:	d14d      	bne.n	d997c <__ieee754_sqrt+0x160>
   d98e0:	4639      	mov	r1, r7
   d98e2:	0ae2      	lsrs	r2, r4, #11
   d98e4:	3915      	subs	r1, #21
   d98e6:	0564      	lsls	r4, r4, #21
   d98e8:	4613      	mov	r3, r2
   d98ea:	2a00      	cmp	r2, #0
   d98ec:	d0f9      	beq.n	d98e2 <__ieee754_sqrt+0xc6>
   d98ee:	02d7      	lsls	r7, r2, #11
   d98f0:	d451      	bmi.n	d9996 <__ieee754_sqrt+0x17a>
   d98f2:	2000      	movs	r0, #0
   d98f4:	005b      	lsls	r3, r3, #1
   d98f6:	02de      	lsls	r6, r3, #11
   d98f8:	4605      	mov	r5, r0
   d98fa:	f100 0001 	add.w	r0, r0, #1
   d98fe:	d5f9      	bpl.n	d98f4 <__ieee754_sqrt+0xd8>
   d9900:	461a      	mov	r2, r3
   d9902:	4623      	mov	r3, r4
   d9904:	4084      	lsls	r4, r0
   d9906:	f1c0 0020 	rsb	r0, r0, #32
   d990a:	40c3      	lsrs	r3, r0
   d990c:	4313      	orrs	r3, r2
   d990e:	1b49      	subs	r1, r1, r5
   d9910:	e793      	b.n	d983a <__ieee754_sqrt+0x1e>
   d9912:	42a1      	cmp	r1, r4
   d9914:	d8be      	bhi.n	d9894 <__ieee754_sqrt+0x78>
   d9916:	2900      	cmp	r1, #0
   d9918:	eb01 0502 	add.w	r5, r1, r2
   d991c:	dbd5      	blt.n	d98ca <__ieee754_sqrt+0xae>
   d991e:	4698      	mov	r8, r3
   d9920:	2300      	movs	r3, #0
   d9922:	e7ce      	b.n	d98c2 <__ieee754_sqrt+0xa6>
   d9924:	4323      	orrs	r3, r4
   d9926:	d112      	bne.n	d994e <__ieee754_sqrt+0x132>
   d9928:	0878      	lsrs	r0, r7, #1
   d992a:	ea4f 016c 	mov.w	r1, ip, asr #1
   d992e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d9932:	f01c 0f01 	tst.w	ip, #1
   d9936:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d993a:	bf18      	it	ne
   d993c:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d9940:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d9944:	4602      	mov	r2, r0
   d9946:	ec43 2b10 	vmov	d0, r2, r3
   d994a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d994e:	1c7b      	adds	r3, r7, #1
   d9950:	bf16      	itet	ne
   d9952:	1c78      	addne	r0, r7, #1
   d9954:	f10c 0c01 	addeq.w	ip, ip, #1
   d9958:	0840      	lsrne	r0, r0, #1
   d995a:	e7e6      	b.n	d992a <__ieee754_sqrt+0x10e>
   d995c:	ee10 2a10 	vmov	r2, s0
   d9960:	ee10 0a10 	vmov	r0, s0
   d9964:	463b      	mov	r3, r7
   d9966:	4639      	mov	r1, r7
   d9968:	f000 fb20 	bl	d9fac <__aeabi_dmul>
   d996c:	4632      	mov	r2, r6
   d996e:	463b      	mov	r3, r7
   d9970:	f000 f966 	bl	d9c40 <__adddf3>
   d9974:	ec41 0b10 	vmov	d0, r0, r1
   d9978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d997c:	ee10 2a10 	vmov	r2, s0
   d9980:	4630      	mov	r0, r6
   d9982:	4639      	mov	r1, r7
   d9984:	f000 f95a 	bl	d9c3c <__aeabi_dsub>
   d9988:	4602      	mov	r2, r0
   d998a:	460b      	mov	r3, r1
   d998c:	f000 fc38 	bl	da200 <__aeabi_ddiv>
   d9990:	ec41 0b10 	vmov	d0, r0, r1
   d9994:	e7d9      	b.n	d994a <__ieee754_sqrt+0x12e>
   d9996:	4623      	mov	r3, r4
   d9998:	2020      	movs	r0, #32
   d999a:	f04f 35ff 	mov.w	r5, #4294967295
   d999e:	e7b4      	b.n	d990a <__ieee754_sqrt+0xee>
   d99a0:	7ff00000 	.word	0x7ff00000

000d99a4 <fabs>:
   d99a4:	ec51 0b10 	vmov	r0, r1, d0
   d99a8:	ee10 2a10 	vmov	r2, s0
   d99ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d99b0:	ec43 2b10 	vmov	d0, r2, r3
   d99b4:	4770      	bx	lr
   d99b6:	bf00      	nop

000d99b8 <finite>:
   d99b8:	b082      	sub	sp, #8
   d99ba:	ed8d 0b00 	vstr	d0, [sp]
   d99be:	9801      	ldr	r0, [sp, #4]
   d99c0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d99c4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d99c8:	0fc0      	lsrs	r0, r0, #31
   d99ca:	b002      	add	sp, #8
   d99cc:	4770      	bx	lr
   d99ce:	bf00      	nop

000d99d0 <matherr>:
   d99d0:	2000      	movs	r0, #0
   d99d2:	4770      	bx	lr
   d99d4:	0000      	movs	r0, r0
	...

000d99d8 <nan>:
   d99d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d99e0 <nan+0x8>
   d99dc:	4770      	bx	lr
   d99de:	bf00      	nop
   d99e0:	00000000 	.word	0x00000000
   d99e4:	7ff80000 	.word	0x7ff80000

000d99e8 <rint>:
   d99e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d99ea:	ec53 2b10 	vmov	r2, r3, d0
   d99ee:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d99f2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d99f6:	2813      	cmp	r0, #19
   d99f8:	ee10 5a10 	vmov	r5, s0
   d99fc:	b083      	sub	sp, #12
   d99fe:	4619      	mov	r1, r3
   d9a00:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d9a04:	dc31      	bgt.n	d9a6a <rint+0x82>
   d9a06:	2800      	cmp	r0, #0
   d9a08:	db4c      	blt.n	d9aa4 <rint+0xbc>
   d9a0a:	4e3e      	ldr	r6, [pc, #248]	; (d9b04 <rint+0x11c>)
   d9a0c:	4106      	asrs	r6, r0
   d9a0e:	ea03 0706 	and.w	r7, r3, r6
   d9a12:	4317      	orrs	r7, r2
   d9a14:	d02e      	beq.n	d9a74 <rint+0x8c>
   d9a16:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d9a1a:	431d      	orrs	r5, r3
   d9a1c:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d9a20:	d00c      	beq.n	d9a3c <rint+0x54>
   d9a22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d9a26:	2813      	cmp	r0, #19
   d9a28:	ea21 0606 	bic.w	r6, r1, r6
   d9a2c:	fa43 f100 	asr.w	r1, r3, r0
   d9a30:	ea41 0106 	orr.w	r1, r1, r6
   d9a34:	bf0c      	ite	eq
   d9a36:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d9a3a:	2500      	movne	r5, #0
   d9a3c:	4832      	ldr	r0, [pc, #200]	; (d9b08 <rint+0x120>)
   d9a3e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d9a42:	462a      	mov	r2, r5
   d9a44:	e9d4 4500 	ldrd	r4, r5, [r4]
   d9a48:	460b      	mov	r3, r1
   d9a4a:	4620      	mov	r0, r4
   d9a4c:	4629      	mov	r1, r5
   d9a4e:	f000 f8f7 	bl	d9c40 <__adddf3>
   d9a52:	e9cd 0100 	strd	r0, r1, [sp]
   d9a56:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9a5a:	4622      	mov	r2, r4
   d9a5c:	462b      	mov	r3, r5
   d9a5e:	f000 f8ed 	bl	d9c3c <__aeabi_dsub>
   d9a62:	ec41 0b10 	vmov	d0, r0, r1
   d9a66:	b003      	add	sp, #12
   d9a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9a6a:	2833      	cmp	r0, #51	; 0x33
   d9a6c:	dd06      	ble.n	d9a7c <rint+0x94>
   d9a6e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d9a72:	d040      	beq.n	d9af6 <rint+0x10e>
   d9a74:	ec43 2b10 	vmov	d0, r2, r3
   d9a78:	b003      	add	sp, #12
   d9a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9a7c:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d9a80:	f04f 30ff 	mov.w	r0, #4294967295
   d9a84:	40f0      	lsrs	r0, r6
   d9a86:	4202      	tst	r2, r0
   d9a88:	d0f4      	beq.n	d9a74 <rint+0x8c>
   d9a8a:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d9a8e:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d9a92:	d0d3      	beq.n	d9a3c <rint+0x54>
   d9a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d9a98:	ea25 0503 	bic.w	r5, r5, r3
   d9a9c:	fa42 f606 	asr.w	r6, r2, r6
   d9aa0:	4335      	orrs	r5, r6
   d9aa2:	e7cb      	b.n	d9a3c <rint+0x54>
   d9aa4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d9aa8:	4310      	orrs	r0, r2
   d9aaa:	d0e3      	beq.n	d9a74 <rint+0x8c>
   d9aac:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d9ab0:	4310      	orrs	r0, r2
   d9ab2:	4245      	negs	r5, r0
   d9ab4:	4305      	orrs	r5, r0
   d9ab6:	4814      	ldr	r0, [pc, #80]	; (d9b08 <rint+0x120>)
   d9ab8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d9abc:	e9d0 6700 	ldrd	r6, r7, [r0]
   d9ac0:	0c59      	lsrs	r1, r3, #17
   d9ac2:	0b2d      	lsrs	r5, r5, #12
   d9ac4:	0449      	lsls	r1, r1, #17
   d9ac6:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d9aca:	ea45 0301 	orr.w	r3, r5, r1
   d9ace:	4630      	mov	r0, r6
   d9ad0:	4639      	mov	r1, r7
   d9ad2:	f000 f8b5 	bl	d9c40 <__adddf3>
   d9ad6:	e9cd 0100 	strd	r0, r1, [sp]
   d9ada:	463b      	mov	r3, r7
   d9adc:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9ae0:	4632      	mov	r2, r6
   d9ae2:	f000 f8ab 	bl	d9c3c <__aeabi_dsub>
   d9ae6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9aea:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d9aee:	ec41 0b10 	vmov	d0, r0, r1
   d9af2:	b003      	add	sp, #12
   d9af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9af6:	ee10 0a10 	vmov	r0, s0
   d9afa:	f000 f8a1 	bl	d9c40 <__adddf3>
   d9afe:	ec41 0b10 	vmov	d0, r0, r1
   d9b02:	e7b9      	b.n	d9a78 <rint+0x90>
   d9b04:	000fffff 	.word	0x000fffff
   d9b08:	000dbe60 	.word	0x000dbe60
   d9b0c:	00000000 	.word	0x00000000

000d9b10 <scalbn>:
   d9b10:	b538      	push	{r3, r4, r5, lr}
   d9b12:	ec53 2b10 	vmov	r2, r3, d0
   d9b16:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d9b1a:	461c      	mov	r4, r3
   d9b1c:	4605      	mov	r5, r0
   d9b1e:	bb81      	cbnz	r1, d9b82 <scalbn+0x72>
   d9b20:	ee10 1a10 	vmov	r1, s0
   d9b24:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d9b28:	4321      	orrs	r1, r4
   d9b2a:	d029      	beq.n	d9b80 <scalbn+0x70>
   d9b2c:	4619      	mov	r1, r3
   d9b2e:	2200      	movs	r2, #0
   d9b30:	4b3d      	ldr	r3, [pc, #244]	; (d9c28 <scalbn+0x118>)
   d9b32:	4c3e      	ldr	r4, [pc, #248]	; (d9c2c <scalbn+0x11c>)
   d9b34:	ee10 0a10 	vmov	r0, s0
   d9b38:	f000 fa38 	bl	d9fac <__aeabi_dmul>
   d9b3c:	42a5      	cmp	r5, r4
   d9b3e:	4602      	mov	r2, r0
   d9b40:	460b      	mov	r3, r1
   d9b42:	db16      	blt.n	d9b72 <scalbn+0x62>
   d9b44:	460c      	mov	r4, r1
   d9b46:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d9b4a:	3936      	subs	r1, #54	; 0x36
   d9b4c:	4429      	add	r1, r5
   d9b4e:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d9b52:	4281      	cmp	r1, r0
   d9b54:	dc21      	bgt.n	d9b9a <scalbn+0x8a>
   d9b56:	2900      	cmp	r1, #0
   d9b58:	dc47      	bgt.n	d9bea <scalbn+0xda>
   d9b5a:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d9b5e:	da34      	bge.n	d9bca <scalbn+0xba>
   d9b60:	f24c 3150 	movw	r1, #50000	; 0xc350
   d9b64:	428d      	cmp	r5, r1
   d9b66:	dc18      	bgt.n	d9b9a <scalbn+0x8a>
   d9b68:	2b00      	cmp	r3, #0
   d9b6a:	a127      	add	r1, pc, #156	; (adr r1, d9c08 <scalbn+0xf8>)
   d9b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9b70:	db44      	blt.n	d9bfc <scalbn+0xec>
   d9b72:	a325      	add	r3, pc, #148	; (adr r3, d9c08 <scalbn+0xf8>)
   d9b74:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b78:	f000 fa18 	bl	d9fac <__aeabi_dmul>
   d9b7c:	ec41 0b10 	vmov	d0, r0, r1
   d9b80:	bd38      	pop	{r3, r4, r5, pc}
   d9b82:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d9b86:	4281      	cmp	r1, r0
   d9b88:	d1e0      	bne.n	d9b4c <scalbn+0x3c>
   d9b8a:	ee10 0a10 	vmov	r0, s0
   d9b8e:	4619      	mov	r1, r3
   d9b90:	f000 f856 	bl	d9c40 <__adddf3>
   d9b94:	ec41 0b10 	vmov	d0, r0, r1
   d9b98:	bd38      	pop	{r3, r4, r5, pc}
   d9b9a:	2b00      	cmp	r3, #0
   d9b9c:	a11c      	add	r1, pc, #112	; (adr r1, d9c10 <scalbn+0x100>)
   d9b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9ba2:	db07      	blt.n	d9bb4 <scalbn+0xa4>
   d9ba4:	a31a      	add	r3, pc, #104	; (adr r3, d9c10 <scalbn+0x100>)
   d9ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9baa:	f000 f9ff 	bl	d9fac <__aeabi_dmul>
   d9bae:	ec41 0b10 	vmov	d0, r0, r1
   d9bb2:	bd38      	pop	{r3, r4, r5, pc}
   d9bb4:	a118      	add	r1, pc, #96	; (adr r1, d9c18 <scalbn+0x108>)
   d9bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9bba:	a315      	add	r3, pc, #84	; (adr r3, d9c10 <scalbn+0x100>)
   d9bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9bc0:	f000 f9f4 	bl	d9fac <__aeabi_dmul>
   d9bc4:	ec41 0b10 	vmov	d0, r0, r1
   d9bc8:	e7f3      	b.n	d9bb2 <scalbn+0xa2>
   d9bca:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d9bce:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d9bd2:	3136      	adds	r1, #54	; 0x36
   d9bd4:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d9bd8:	4610      	mov	r0, r2
   d9bda:	4619      	mov	r1, r3
   d9bdc:	2200      	movs	r2, #0
   d9bde:	4b14      	ldr	r3, [pc, #80]	; (d9c30 <scalbn+0x120>)
   d9be0:	f000 f9e4 	bl	d9fac <__aeabi_dmul>
   d9be4:	ec41 0b10 	vmov	d0, r0, r1
   d9be8:	bd38      	pop	{r3, r4, r5, pc}
   d9bea:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d9bee:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d9bf2:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d9bf6:	ec43 2b10 	vmov	d0, r2, r3
   d9bfa:	bd38      	pop	{r3, r4, r5, pc}
   d9bfc:	a108      	add	r1, pc, #32	; (adr r1, d9c20 <scalbn+0x110>)
   d9bfe:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9c02:	e7b6      	b.n	d9b72 <scalbn+0x62>
   d9c04:	f3af 8000 	nop.w
   d9c08:	c2f8f359 	.word	0xc2f8f359
   d9c0c:	01a56e1f 	.word	0x01a56e1f
   d9c10:	8800759c 	.word	0x8800759c
   d9c14:	7e37e43c 	.word	0x7e37e43c
   d9c18:	8800759c 	.word	0x8800759c
   d9c1c:	fe37e43c 	.word	0xfe37e43c
   d9c20:	c2f8f359 	.word	0xc2f8f359
   d9c24:	81a56e1f 	.word	0x81a56e1f
   d9c28:	43500000 	.word	0x43500000
   d9c2c:	ffff3cb0 	.word	0xffff3cb0
   d9c30:	3c900000 	.word	0x3c900000

000d9c34 <__aeabi_drsub>:
   d9c34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9c38:	e002      	b.n	d9c40 <__adddf3>
   d9c3a:	bf00      	nop

000d9c3c <__aeabi_dsub>:
   d9c3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9c40 <__adddf3>:
   d9c40:	b530      	push	{r4, r5, lr}
   d9c42:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9c46:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9c4a:	ea94 0f05 	teq	r4, r5
   d9c4e:	bf08      	it	eq
   d9c50:	ea90 0f02 	teqeq	r0, r2
   d9c54:	bf1f      	itttt	ne
   d9c56:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9c5a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9c5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9c62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9c66:	f000 80e2 	beq.w	d9e2e <__adddf3+0x1ee>
   d9c6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9c6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9c72:	bfb8      	it	lt
   d9c74:	426d      	neglt	r5, r5
   d9c76:	dd0c      	ble.n	d9c92 <__adddf3+0x52>
   d9c78:	442c      	add	r4, r5
   d9c7a:	ea80 0202 	eor.w	r2, r0, r2
   d9c7e:	ea81 0303 	eor.w	r3, r1, r3
   d9c82:	ea82 0000 	eor.w	r0, r2, r0
   d9c86:	ea83 0101 	eor.w	r1, r3, r1
   d9c8a:	ea80 0202 	eor.w	r2, r0, r2
   d9c8e:	ea81 0303 	eor.w	r3, r1, r3
   d9c92:	2d36      	cmp	r5, #54	; 0x36
   d9c94:	bf88      	it	hi
   d9c96:	bd30      	pophi	{r4, r5, pc}
   d9c98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9c9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9ca0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9ca4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9ca8:	d002      	beq.n	d9cb0 <__adddf3+0x70>
   d9caa:	4240      	negs	r0, r0
   d9cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9cb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9cb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9cb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9cbc:	d002      	beq.n	d9cc4 <__adddf3+0x84>
   d9cbe:	4252      	negs	r2, r2
   d9cc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9cc4:	ea94 0f05 	teq	r4, r5
   d9cc8:	f000 80a7 	beq.w	d9e1a <__adddf3+0x1da>
   d9ccc:	f1a4 0401 	sub.w	r4, r4, #1
   d9cd0:	f1d5 0e20 	rsbs	lr, r5, #32
   d9cd4:	db0d      	blt.n	d9cf2 <__adddf3+0xb2>
   d9cd6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9cda:	fa22 f205 	lsr.w	r2, r2, r5
   d9cde:	1880      	adds	r0, r0, r2
   d9ce0:	f141 0100 	adc.w	r1, r1, #0
   d9ce4:	fa03 f20e 	lsl.w	r2, r3, lr
   d9ce8:	1880      	adds	r0, r0, r2
   d9cea:	fa43 f305 	asr.w	r3, r3, r5
   d9cee:	4159      	adcs	r1, r3
   d9cf0:	e00e      	b.n	d9d10 <__adddf3+0xd0>
   d9cf2:	f1a5 0520 	sub.w	r5, r5, #32
   d9cf6:	f10e 0e20 	add.w	lr, lr, #32
   d9cfa:	2a01      	cmp	r2, #1
   d9cfc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9d00:	bf28      	it	cs
   d9d02:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9d06:	fa43 f305 	asr.w	r3, r3, r5
   d9d0a:	18c0      	adds	r0, r0, r3
   d9d0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9d10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9d14:	d507      	bpl.n	d9d26 <__adddf3+0xe6>
   d9d16:	f04f 0e00 	mov.w	lr, #0
   d9d1a:	f1dc 0c00 	rsbs	ip, ip, #0
   d9d1e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9d22:	eb6e 0101 	sbc.w	r1, lr, r1
   d9d26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9d2a:	d31b      	bcc.n	d9d64 <__adddf3+0x124>
   d9d2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9d30:	d30c      	bcc.n	d9d4c <__adddf3+0x10c>
   d9d32:	0849      	lsrs	r1, r1, #1
   d9d34:	ea5f 0030 	movs.w	r0, r0, rrx
   d9d38:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9d3c:	f104 0401 	add.w	r4, r4, #1
   d9d40:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9d44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9d48:	f080 809a 	bcs.w	d9e80 <__adddf3+0x240>
   d9d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9d50:	bf08      	it	eq
   d9d52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9d56:	f150 0000 	adcs.w	r0, r0, #0
   d9d5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9d5e:	ea41 0105 	orr.w	r1, r1, r5
   d9d62:	bd30      	pop	{r4, r5, pc}
   d9d64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9d68:	4140      	adcs	r0, r0
   d9d6a:	eb41 0101 	adc.w	r1, r1, r1
   d9d6e:	3c01      	subs	r4, #1
   d9d70:	bf28      	it	cs
   d9d72:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d9d76:	d2e9      	bcs.n	d9d4c <__adddf3+0x10c>
   d9d78:	f091 0f00 	teq	r1, #0
   d9d7c:	bf04      	itt	eq
   d9d7e:	4601      	moveq	r1, r0
   d9d80:	2000      	moveq	r0, #0
   d9d82:	fab1 f381 	clz	r3, r1
   d9d86:	bf08      	it	eq
   d9d88:	3320      	addeq	r3, #32
   d9d8a:	f1a3 030b 	sub.w	r3, r3, #11
   d9d8e:	f1b3 0220 	subs.w	r2, r3, #32
   d9d92:	da0c      	bge.n	d9dae <__adddf3+0x16e>
   d9d94:	320c      	adds	r2, #12
   d9d96:	dd08      	ble.n	d9daa <__adddf3+0x16a>
   d9d98:	f102 0c14 	add.w	ip, r2, #20
   d9d9c:	f1c2 020c 	rsb	r2, r2, #12
   d9da0:	fa01 f00c 	lsl.w	r0, r1, ip
   d9da4:	fa21 f102 	lsr.w	r1, r1, r2
   d9da8:	e00c      	b.n	d9dc4 <__adddf3+0x184>
   d9daa:	f102 0214 	add.w	r2, r2, #20
   d9dae:	bfd8      	it	le
   d9db0:	f1c2 0c20 	rsble	ip, r2, #32
   d9db4:	fa01 f102 	lsl.w	r1, r1, r2
   d9db8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9dbc:	bfdc      	itt	le
   d9dbe:	ea41 010c 	orrle.w	r1, r1, ip
   d9dc2:	4090      	lslle	r0, r2
   d9dc4:	1ae4      	subs	r4, r4, r3
   d9dc6:	bfa2      	ittt	ge
   d9dc8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9dcc:	4329      	orrge	r1, r5
   d9dce:	bd30      	popge	{r4, r5, pc}
   d9dd0:	ea6f 0404 	mvn.w	r4, r4
   d9dd4:	3c1f      	subs	r4, #31
   d9dd6:	da1c      	bge.n	d9e12 <__adddf3+0x1d2>
   d9dd8:	340c      	adds	r4, #12
   d9dda:	dc0e      	bgt.n	d9dfa <__adddf3+0x1ba>
   d9ddc:	f104 0414 	add.w	r4, r4, #20
   d9de0:	f1c4 0220 	rsb	r2, r4, #32
   d9de4:	fa20 f004 	lsr.w	r0, r0, r4
   d9de8:	fa01 f302 	lsl.w	r3, r1, r2
   d9dec:	ea40 0003 	orr.w	r0, r0, r3
   d9df0:	fa21 f304 	lsr.w	r3, r1, r4
   d9df4:	ea45 0103 	orr.w	r1, r5, r3
   d9df8:	bd30      	pop	{r4, r5, pc}
   d9dfa:	f1c4 040c 	rsb	r4, r4, #12
   d9dfe:	f1c4 0220 	rsb	r2, r4, #32
   d9e02:	fa20 f002 	lsr.w	r0, r0, r2
   d9e06:	fa01 f304 	lsl.w	r3, r1, r4
   d9e0a:	ea40 0003 	orr.w	r0, r0, r3
   d9e0e:	4629      	mov	r1, r5
   d9e10:	bd30      	pop	{r4, r5, pc}
   d9e12:	fa21 f004 	lsr.w	r0, r1, r4
   d9e16:	4629      	mov	r1, r5
   d9e18:	bd30      	pop	{r4, r5, pc}
   d9e1a:	f094 0f00 	teq	r4, #0
   d9e1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9e22:	bf06      	itte	eq
   d9e24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9e28:	3401      	addeq	r4, #1
   d9e2a:	3d01      	subne	r5, #1
   d9e2c:	e74e      	b.n	d9ccc <__adddf3+0x8c>
   d9e2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9e32:	bf18      	it	ne
   d9e34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9e38:	d029      	beq.n	d9e8e <__adddf3+0x24e>
   d9e3a:	ea94 0f05 	teq	r4, r5
   d9e3e:	bf08      	it	eq
   d9e40:	ea90 0f02 	teqeq	r0, r2
   d9e44:	d005      	beq.n	d9e52 <__adddf3+0x212>
   d9e46:	ea54 0c00 	orrs.w	ip, r4, r0
   d9e4a:	bf04      	itt	eq
   d9e4c:	4619      	moveq	r1, r3
   d9e4e:	4610      	moveq	r0, r2
   d9e50:	bd30      	pop	{r4, r5, pc}
   d9e52:	ea91 0f03 	teq	r1, r3
   d9e56:	bf1e      	ittt	ne
   d9e58:	2100      	movne	r1, #0
   d9e5a:	2000      	movne	r0, #0
   d9e5c:	bd30      	popne	{r4, r5, pc}
   d9e5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9e62:	d105      	bne.n	d9e70 <__adddf3+0x230>
   d9e64:	0040      	lsls	r0, r0, #1
   d9e66:	4149      	adcs	r1, r1
   d9e68:	bf28      	it	cs
   d9e6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9e6e:	bd30      	pop	{r4, r5, pc}
   d9e70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9e74:	bf3c      	itt	cc
   d9e76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9e7a:	bd30      	popcc	{r4, r5, pc}
   d9e7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9e80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9e84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9e88:	f04f 0000 	mov.w	r0, #0
   d9e8c:	bd30      	pop	{r4, r5, pc}
   d9e8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9e92:	bf1a      	itte	ne
   d9e94:	4619      	movne	r1, r3
   d9e96:	4610      	movne	r0, r2
   d9e98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9e9c:	bf1c      	itt	ne
   d9e9e:	460b      	movne	r3, r1
   d9ea0:	4602      	movne	r2, r0
   d9ea2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9ea6:	bf06      	itte	eq
   d9ea8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9eac:	ea91 0f03 	teqeq	r1, r3
   d9eb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9eb4:	bd30      	pop	{r4, r5, pc}
   d9eb6:	bf00      	nop

000d9eb8 <__aeabi_ui2d>:
   d9eb8:	f090 0f00 	teq	r0, #0
   d9ebc:	bf04      	itt	eq
   d9ebe:	2100      	moveq	r1, #0
   d9ec0:	4770      	bxeq	lr
   d9ec2:	b530      	push	{r4, r5, lr}
   d9ec4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9ec8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9ecc:	f04f 0500 	mov.w	r5, #0
   d9ed0:	f04f 0100 	mov.w	r1, #0
   d9ed4:	e750      	b.n	d9d78 <__adddf3+0x138>
   d9ed6:	bf00      	nop

000d9ed8 <__aeabi_i2d>:
   d9ed8:	f090 0f00 	teq	r0, #0
   d9edc:	bf04      	itt	eq
   d9ede:	2100      	moveq	r1, #0
   d9ee0:	4770      	bxeq	lr
   d9ee2:	b530      	push	{r4, r5, lr}
   d9ee4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9ee8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9eec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9ef0:	bf48      	it	mi
   d9ef2:	4240      	negmi	r0, r0
   d9ef4:	f04f 0100 	mov.w	r1, #0
   d9ef8:	e73e      	b.n	d9d78 <__adddf3+0x138>
   d9efa:	bf00      	nop

000d9efc <__aeabi_f2d>:
   d9efc:	0042      	lsls	r2, r0, #1
   d9efe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9f02:	ea4f 0131 	mov.w	r1, r1, rrx
   d9f06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9f0a:	bf1f      	itttt	ne
   d9f0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9f10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9f14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9f18:	4770      	bxne	lr
   d9f1a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d9f1e:	bf08      	it	eq
   d9f20:	4770      	bxeq	lr
   d9f22:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d9f26:	bf04      	itt	eq
   d9f28:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d9f2c:	4770      	bxeq	lr
   d9f2e:	b530      	push	{r4, r5, lr}
   d9f30:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9f34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9f38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9f3c:	e71c      	b.n	d9d78 <__adddf3+0x138>
   d9f3e:	bf00      	nop

000d9f40 <__aeabi_ul2d>:
   d9f40:	ea50 0201 	orrs.w	r2, r0, r1
   d9f44:	bf08      	it	eq
   d9f46:	4770      	bxeq	lr
   d9f48:	b530      	push	{r4, r5, lr}
   d9f4a:	f04f 0500 	mov.w	r5, #0
   d9f4e:	e00a      	b.n	d9f66 <__aeabi_l2d+0x16>

000d9f50 <__aeabi_l2d>:
   d9f50:	ea50 0201 	orrs.w	r2, r0, r1
   d9f54:	bf08      	it	eq
   d9f56:	4770      	bxeq	lr
   d9f58:	b530      	push	{r4, r5, lr}
   d9f5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9f5e:	d502      	bpl.n	d9f66 <__aeabi_l2d+0x16>
   d9f60:	4240      	negs	r0, r0
   d9f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9f66:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9f6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9f6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9f72:	f43f aed8 	beq.w	d9d26 <__adddf3+0xe6>
   d9f76:	f04f 0203 	mov.w	r2, #3
   d9f7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9f7e:	bf18      	it	ne
   d9f80:	3203      	addne	r2, #3
   d9f82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9f86:	bf18      	it	ne
   d9f88:	3203      	addne	r2, #3
   d9f8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9f8e:	f1c2 0320 	rsb	r3, r2, #32
   d9f92:	fa00 fc03 	lsl.w	ip, r0, r3
   d9f96:	fa20 f002 	lsr.w	r0, r0, r2
   d9f9a:	fa01 fe03 	lsl.w	lr, r1, r3
   d9f9e:	ea40 000e 	orr.w	r0, r0, lr
   d9fa2:	fa21 f102 	lsr.w	r1, r1, r2
   d9fa6:	4414      	add	r4, r2
   d9fa8:	e6bd      	b.n	d9d26 <__adddf3+0xe6>
   d9faa:	bf00      	nop

000d9fac <__aeabi_dmul>:
   d9fac:	b570      	push	{r4, r5, r6, lr}
   d9fae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9fb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9fb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9fba:	bf1d      	ittte	ne
   d9fbc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9fc0:	ea94 0f0c 	teqne	r4, ip
   d9fc4:	ea95 0f0c 	teqne	r5, ip
   d9fc8:	f000 f8de 	bleq	da188 <__aeabi_dmul+0x1dc>
   d9fcc:	442c      	add	r4, r5
   d9fce:	ea81 0603 	eor.w	r6, r1, r3
   d9fd2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9fd6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9fda:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9fde:	bf18      	it	ne
   d9fe0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9fe4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9fec:	d038      	beq.n	da060 <__aeabi_dmul+0xb4>
   d9fee:	fba0 ce02 	umull	ip, lr, r0, r2
   d9ff2:	f04f 0500 	mov.w	r5, #0
   d9ff6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9ffa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9ffe:	fbe0 e503 	umlal	lr, r5, r0, r3
   da002:	f04f 0600 	mov.w	r6, #0
   da006:	fbe1 5603 	umlal	r5, r6, r1, r3
   da00a:	f09c 0f00 	teq	ip, #0
   da00e:	bf18      	it	ne
   da010:	f04e 0e01 	orrne.w	lr, lr, #1
   da014:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da018:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da01c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da020:	d204      	bcs.n	da02c <__aeabi_dmul+0x80>
   da022:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da026:	416d      	adcs	r5, r5
   da028:	eb46 0606 	adc.w	r6, r6, r6
   da02c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da030:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da034:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da038:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da03c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da040:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da044:	bf88      	it	hi
   da046:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da04a:	d81e      	bhi.n	da08a <__aeabi_dmul+0xde>
   da04c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da050:	bf08      	it	eq
   da052:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da056:	f150 0000 	adcs.w	r0, r0, #0
   da05a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da05e:	bd70      	pop	{r4, r5, r6, pc}
   da060:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da064:	ea46 0101 	orr.w	r1, r6, r1
   da068:	ea40 0002 	orr.w	r0, r0, r2
   da06c:	ea81 0103 	eor.w	r1, r1, r3
   da070:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da074:	bfc2      	ittt	gt
   da076:	ebd4 050c 	rsbsgt	r5, r4, ip
   da07a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da07e:	bd70      	popgt	{r4, r5, r6, pc}
   da080:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da084:	f04f 0e00 	mov.w	lr, #0
   da088:	3c01      	subs	r4, #1
   da08a:	f300 80ab 	bgt.w	da1e4 <__aeabi_dmul+0x238>
   da08e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da092:	bfde      	ittt	le
   da094:	2000      	movle	r0, #0
   da096:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da09a:	bd70      	pople	{r4, r5, r6, pc}
   da09c:	f1c4 0400 	rsb	r4, r4, #0
   da0a0:	3c20      	subs	r4, #32
   da0a2:	da35      	bge.n	da110 <__aeabi_dmul+0x164>
   da0a4:	340c      	adds	r4, #12
   da0a6:	dc1b      	bgt.n	da0e0 <__aeabi_dmul+0x134>
   da0a8:	f104 0414 	add.w	r4, r4, #20
   da0ac:	f1c4 0520 	rsb	r5, r4, #32
   da0b0:	fa00 f305 	lsl.w	r3, r0, r5
   da0b4:	fa20 f004 	lsr.w	r0, r0, r4
   da0b8:	fa01 f205 	lsl.w	r2, r1, r5
   da0bc:	ea40 0002 	orr.w	r0, r0, r2
   da0c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da0c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da0c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da0cc:	fa21 f604 	lsr.w	r6, r1, r4
   da0d0:	eb42 0106 	adc.w	r1, r2, r6
   da0d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da0d8:	bf08      	it	eq
   da0da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da0de:	bd70      	pop	{r4, r5, r6, pc}
   da0e0:	f1c4 040c 	rsb	r4, r4, #12
   da0e4:	f1c4 0520 	rsb	r5, r4, #32
   da0e8:	fa00 f304 	lsl.w	r3, r0, r4
   da0ec:	fa20 f005 	lsr.w	r0, r0, r5
   da0f0:	fa01 f204 	lsl.w	r2, r1, r4
   da0f4:	ea40 0002 	orr.w	r0, r0, r2
   da0f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da0fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da100:	f141 0100 	adc.w	r1, r1, #0
   da104:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da108:	bf08      	it	eq
   da10a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da10e:	bd70      	pop	{r4, r5, r6, pc}
   da110:	f1c4 0520 	rsb	r5, r4, #32
   da114:	fa00 f205 	lsl.w	r2, r0, r5
   da118:	ea4e 0e02 	orr.w	lr, lr, r2
   da11c:	fa20 f304 	lsr.w	r3, r0, r4
   da120:	fa01 f205 	lsl.w	r2, r1, r5
   da124:	ea43 0302 	orr.w	r3, r3, r2
   da128:	fa21 f004 	lsr.w	r0, r1, r4
   da12c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da130:	fa21 f204 	lsr.w	r2, r1, r4
   da134:	ea20 0002 	bic.w	r0, r0, r2
   da138:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da13c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da140:	bf08      	it	eq
   da142:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da146:	bd70      	pop	{r4, r5, r6, pc}
   da148:	f094 0f00 	teq	r4, #0
   da14c:	d10f      	bne.n	da16e <__aeabi_dmul+0x1c2>
   da14e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da152:	0040      	lsls	r0, r0, #1
   da154:	eb41 0101 	adc.w	r1, r1, r1
   da158:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da15c:	bf08      	it	eq
   da15e:	3c01      	subeq	r4, #1
   da160:	d0f7      	beq.n	da152 <__aeabi_dmul+0x1a6>
   da162:	ea41 0106 	orr.w	r1, r1, r6
   da166:	f095 0f00 	teq	r5, #0
   da16a:	bf18      	it	ne
   da16c:	4770      	bxne	lr
   da16e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da172:	0052      	lsls	r2, r2, #1
   da174:	eb43 0303 	adc.w	r3, r3, r3
   da178:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da17c:	bf08      	it	eq
   da17e:	3d01      	subeq	r5, #1
   da180:	d0f7      	beq.n	da172 <__aeabi_dmul+0x1c6>
   da182:	ea43 0306 	orr.w	r3, r3, r6
   da186:	4770      	bx	lr
   da188:	ea94 0f0c 	teq	r4, ip
   da18c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da190:	bf18      	it	ne
   da192:	ea95 0f0c 	teqne	r5, ip
   da196:	d00c      	beq.n	da1b2 <__aeabi_dmul+0x206>
   da198:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da19c:	bf18      	it	ne
   da19e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da1a2:	d1d1      	bne.n	da148 <__aeabi_dmul+0x19c>
   da1a4:	ea81 0103 	eor.w	r1, r1, r3
   da1a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da1ac:	f04f 0000 	mov.w	r0, #0
   da1b0:	bd70      	pop	{r4, r5, r6, pc}
   da1b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da1b6:	bf06      	itte	eq
   da1b8:	4610      	moveq	r0, r2
   da1ba:	4619      	moveq	r1, r3
   da1bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da1c0:	d019      	beq.n	da1f6 <__aeabi_dmul+0x24a>
   da1c2:	ea94 0f0c 	teq	r4, ip
   da1c6:	d102      	bne.n	da1ce <__aeabi_dmul+0x222>
   da1c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   da1cc:	d113      	bne.n	da1f6 <__aeabi_dmul+0x24a>
   da1ce:	ea95 0f0c 	teq	r5, ip
   da1d2:	d105      	bne.n	da1e0 <__aeabi_dmul+0x234>
   da1d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   da1d8:	bf1c      	itt	ne
   da1da:	4610      	movne	r0, r2
   da1dc:	4619      	movne	r1, r3
   da1de:	d10a      	bne.n	da1f6 <__aeabi_dmul+0x24a>
   da1e0:	ea81 0103 	eor.w	r1, r1, r3
   da1e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da1e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da1ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da1f0:	f04f 0000 	mov.w	r0, #0
   da1f4:	bd70      	pop	{r4, r5, r6, pc}
   da1f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da1fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   da1fe:	bd70      	pop	{r4, r5, r6, pc}

000da200 <__aeabi_ddiv>:
   da200:	b570      	push	{r4, r5, r6, lr}
   da202:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da20a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da20e:	bf1d      	ittte	ne
   da210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da214:	ea94 0f0c 	teqne	r4, ip
   da218:	ea95 0f0c 	teqne	r5, ip
   da21c:	f000 f8a7 	bleq	da36e <__aeabi_ddiv+0x16e>
   da220:	eba4 0405 	sub.w	r4, r4, r5
   da224:	ea81 0e03 	eor.w	lr, r1, r3
   da228:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da22c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da230:	f000 8088 	beq.w	da344 <__aeabi_ddiv+0x144>
   da234:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da238:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   da23c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   da240:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da244:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da248:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da24c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da250:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da254:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da258:	429d      	cmp	r5, r3
   da25a:	bf08      	it	eq
   da25c:	4296      	cmpeq	r6, r2
   da25e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da262:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da266:	d202      	bcs.n	da26e <__aeabi_ddiv+0x6e>
   da268:	085b      	lsrs	r3, r3, #1
   da26a:	ea4f 0232 	mov.w	r2, r2, rrx
   da26e:	1ab6      	subs	r6, r6, r2
   da270:	eb65 0503 	sbc.w	r5, r5, r3
   da274:	085b      	lsrs	r3, r3, #1
   da276:	ea4f 0232 	mov.w	r2, r2, rrx
   da27a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da27e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da282:	ebb6 0e02 	subs.w	lr, r6, r2
   da286:	eb75 0e03 	sbcs.w	lr, r5, r3
   da28a:	bf22      	ittt	cs
   da28c:	1ab6      	subcs	r6, r6, r2
   da28e:	4675      	movcs	r5, lr
   da290:	ea40 000c 	orrcs.w	r0, r0, ip
   da294:	085b      	lsrs	r3, r3, #1
   da296:	ea4f 0232 	mov.w	r2, r2, rrx
   da29a:	ebb6 0e02 	subs.w	lr, r6, r2
   da29e:	eb75 0e03 	sbcs.w	lr, r5, r3
   da2a2:	bf22      	ittt	cs
   da2a4:	1ab6      	subcs	r6, r6, r2
   da2a6:	4675      	movcs	r5, lr
   da2a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da2ac:	085b      	lsrs	r3, r3, #1
   da2ae:	ea4f 0232 	mov.w	r2, r2, rrx
   da2b2:	ebb6 0e02 	subs.w	lr, r6, r2
   da2b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   da2ba:	bf22      	ittt	cs
   da2bc:	1ab6      	subcs	r6, r6, r2
   da2be:	4675      	movcs	r5, lr
   da2c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da2c4:	085b      	lsrs	r3, r3, #1
   da2c6:	ea4f 0232 	mov.w	r2, r2, rrx
   da2ca:	ebb6 0e02 	subs.w	lr, r6, r2
   da2ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   da2d2:	bf22      	ittt	cs
   da2d4:	1ab6      	subcs	r6, r6, r2
   da2d6:	4675      	movcs	r5, lr
   da2d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da2dc:	ea55 0e06 	orrs.w	lr, r5, r6
   da2e0:	d018      	beq.n	da314 <__aeabi_ddiv+0x114>
   da2e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da2e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da2ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da2ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da2f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da2f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da2fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da2fe:	d1c0      	bne.n	da282 <__aeabi_ddiv+0x82>
   da300:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da304:	d10b      	bne.n	da31e <__aeabi_ddiv+0x11e>
   da306:	ea41 0100 	orr.w	r1, r1, r0
   da30a:	f04f 0000 	mov.w	r0, #0
   da30e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da312:	e7b6      	b.n	da282 <__aeabi_ddiv+0x82>
   da314:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da318:	bf04      	itt	eq
   da31a:	4301      	orreq	r1, r0
   da31c:	2000      	moveq	r0, #0
   da31e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da322:	bf88      	it	hi
   da324:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da328:	f63f aeaf 	bhi.w	da08a <__aeabi_dmul+0xde>
   da32c:	ebb5 0c03 	subs.w	ip, r5, r3
   da330:	bf04      	itt	eq
   da332:	ebb6 0c02 	subseq.w	ip, r6, r2
   da336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da33a:	f150 0000 	adcs.w	r0, r0, #0
   da33e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da342:	bd70      	pop	{r4, r5, r6, pc}
   da344:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da348:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da34c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da350:	bfc2      	ittt	gt
   da352:	ebd4 050c 	rsbsgt	r5, r4, ip
   da356:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da35a:	bd70      	popgt	{r4, r5, r6, pc}
   da35c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da360:	f04f 0e00 	mov.w	lr, #0
   da364:	3c01      	subs	r4, #1
   da366:	e690      	b.n	da08a <__aeabi_dmul+0xde>
   da368:	ea45 0e06 	orr.w	lr, r5, r6
   da36c:	e68d      	b.n	da08a <__aeabi_dmul+0xde>
   da36e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da372:	ea94 0f0c 	teq	r4, ip
   da376:	bf08      	it	eq
   da378:	ea95 0f0c 	teqeq	r5, ip
   da37c:	f43f af3b 	beq.w	da1f6 <__aeabi_dmul+0x24a>
   da380:	ea94 0f0c 	teq	r4, ip
   da384:	d10a      	bne.n	da39c <__aeabi_ddiv+0x19c>
   da386:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da38a:	f47f af34 	bne.w	da1f6 <__aeabi_dmul+0x24a>
   da38e:	ea95 0f0c 	teq	r5, ip
   da392:	f47f af25 	bne.w	da1e0 <__aeabi_dmul+0x234>
   da396:	4610      	mov	r0, r2
   da398:	4619      	mov	r1, r3
   da39a:	e72c      	b.n	da1f6 <__aeabi_dmul+0x24a>
   da39c:	ea95 0f0c 	teq	r5, ip
   da3a0:	d106      	bne.n	da3b0 <__aeabi_ddiv+0x1b0>
   da3a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da3a6:	f43f aefd 	beq.w	da1a4 <__aeabi_dmul+0x1f8>
   da3aa:	4610      	mov	r0, r2
   da3ac:	4619      	mov	r1, r3
   da3ae:	e722      	b.n	da1f6 <__aeabi_dmul+0x24a>
   da3b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da3b4:	bf18      	it	ne
   da3b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da3ba:	f47f aec5 	bne.w	da148 <__aeabi_dmul+0x19c>
   da3be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da3c2:	f47f af0d 	bne.w	da1e0 <__aeabi_dmul+0x234>
   da3c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da3ca:	f47f aeeb 	bne.w	da1a4 <__aeabi_dmul+0x1f8>
   da3ce:	e712      	b.n	da1f6 <__aeabi_dmul+0x24a>

000da3d0 <__gedf2>:
   da3d0:	f04f 3cff 	mov.w	ip, #4294967295
   da3d4:	e006      	b.n	da3e4 <__cmpdf2+0x4>
   da3d6:	bf00      	nop

000da3d8 <__ledf2>:
   da3d8:	f04f 0c01 	mov.w	ip, #1
   da3dc:	e002      	b.n	da3e4 <__cmpdf2+0x4>
   da3de:	bf00      	nop

000da3e0 <__cmpdf2>:
   da3e0:	f04f 0c01 	mov.w	ip, #1
   da3e4:	f84d cd04 	str.w	ip, [sp, #-4]!
   da3e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da3ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da3f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da3f4:	bf18      	it	ne
   da3f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   da3fa:	d01b      	beq.n	da434 <__cmpdf2+0x54>
   da3fc:	b001      	add	sp, #4
   da3fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   da402:	bf0c      	ite	eq
   da404:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   da408:	ea91 0f03 	teqne	r1, r3
   da40c:	bf02      	ittt	eq
   da40e:	ea90 0f02 	teqeq	r0, r2
   da412:	2000      	moveq	r0, #0
   da414:	4770      	bxeq	lr
   da416:	f110 0f00 	cmn.w	r0, #0
   da41a:	ea91 0f03 	teq	r1, r3
   da41e:	bf58      	it	pl
   da420:	4299      	cmppl	r1, r3
   da422:	bf08      	it	eq
   da424:	4290      	cmpeq	r0, r2
   da426:	bf2c      	ite	cs
   da428:	17d8      	asrcs	r0, r3, #31
   da42a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   da42e:	f040 0001 	orr.w	r0, r0, #1
   da432:	4770      	bx	lr
   da434:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da438:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da43c:	d102      	bne.n	da444 <__cmpdf2+0x64>
   da43e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da442:	d107      	bne.n	da454 <__cmpdf2+0x74>
   da444:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da448:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da44c:	d1d6      	bne.n	da3fc <__cmpdf2+0x1c>
   da44e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da452:	d0d3      	beq.n	da3fc <__cmpdf2+0x1c>
   da454:	f85d 0b04 	ldr.w	r0, [sp], #4
   da458:	4770      	bx	lr
   da45a:	bf00      	nop

000da45c <__aeabi_cdrcmple>:
   da45c:	4684      	mov	ip, r0
   da45e:	4610      	mov	r0, r2
   da460:	4662      	mov	r2, ip
   da462:	468c      	mov	ip, r1
   da464:	4619      	mov	r1, r3
   da466:	4663      	mov	r3, ip
   da468:	e000      	b.n	da46c <__aeabi_cdcmpeq>
   da46a:	bf00      	nop

000da46c <__aeabi_cdcmpeq>:
   da46c:	b501      	push	{r0, lr}
   da46e:	f7ff ffb7 	bl	da3e0 <__cmpdf2>
   da472:	2800      	cmp	r0, #0
   da474:	bf48      	it	mi
   da476:	f110 0f00 	cmnmi.w	r0, #0
   da47a:	bd01      	pop	{r0, pc}

000da47c <__aeabi_dcmpeq>:
   da47c:	f84d ed08 	str.w	lr, [sp, #-8]!
   da480:	f7ff fff4 	bl	da46c <__aeabi_cdcmpeq>
   da484:	bf0c      	ite	eq
   da486:	2001      	moveq	r0, #1
   da488:	2000      	movne	r0, #0
   da48a:	f85d fb08 	ldr.w	pc, [sp], #8
   da48e:	bf00      	nop

000da490 <__aeabi_dcmplt>:
   da490:	f84d ed08 	str.w	lr, [sp, #-8]!
   da494:	f7ff ffea 	bl	da46c <__aeabi_cdcmpeq>
   da498:	bf34      	ite	cc
   da49a:	2001      	movcc	r0, #1
   da49c:	2000      	movcs	r0, #0
   da49e:	f85d fb08 	ldr.w	pc, [sp], #8
   da4a2:	bf00      	nop

000da4a4 <__aeabi_dcmple>:
   da4a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   da4a8:	f7ff ffe0 	bl	da46c <__aeabi_cdcmpeq>
   da4ac:	bf94      	ite	ls
   da4ae:	2001      	movls	r0, #1
   da4b0:	2000      	movhi	r0, #0
   da4b2:	f85d fb08 	ldr.w	pc, [sp], #8
   da4b6:	bf00      	nop

000da4b8 <__aeabi_dcmpge>:
   da4b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   da4bc:	f7ff ffce 	bl	da45c <__aeabi_cdrcmple>
   da4c0:	bf94      	ite	ls
   da4c2:	2001      	movls	r0, #1
   da4c4:	2000      	movhi	r0, #0
   da4c6:	f85d fb08 	ldr.w	pc, [sp], #8
   da4ca:	bf00      	nop

000da4cc <__aeabi_dcmpgt>:
   da4cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   da4d0:	f7ff ffc4 	bl	da45c <__aeabi_cdrcmple>
   da4d4:	bf34      	ite	cc
   da4d6:	2001      	movcc	r0, #1
   da4d8:	2000      	movcs	r0, #0
   da4da:	f85d fb08 	ldr.w	pc, [sp], #8
   da4de:	bf00      	nop

000da4e0 <__aeabi_dcmpun>:
   da4e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da4e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da4e8:	d102      	bne.n	da4f0 <__aeabi_dcmpun+0x10>
   da4ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da4ee:	d10a      	bne.n	da506 <__aeabi_dcmpun+0x26>
   da4f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da4f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da4f8:	d102      	bne.n	da500 <__aeabi_dcmpun+0x20>
   da4fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da4fe:	d102      	bne.n	da506 <__aeabi_dcmpun+0x26>
   da500:	f04f 0000 	mov.w	r0, #0
   da504:	4770      	bx	lr
   da506:	f04f 0001 	mov.w	r0, #1
   da50a:	4770      	bx	lr

000da50c <__aeabi_d2iz>:
   da50c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da510:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da514:	d215      	bcs.n	da542 <__aeabi_d2iz+0x36>
   da516:	d511      	bpl.n	da53c <__aeabi_d2iz+0x30>
   da518:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da51c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da520:	d912      	bls.n	da548 <__aeabi_d2iz+0x3c>
   da522:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da526:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da52a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da52e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da532:	fa23 f002 	lsr.w	r0, r3, r2
   da536:	bf18      	it	ne
   da538:	4240      	negne	r0, r0
   da53a:	4770      	bx	lr
   da53c:	f04f 0000 	mov.w	r0, #0
   da540:	4770      	bx	lr
   da542:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da546:	d105      	bne.n	da554 <__aeabi_d2iz+0x48>
   da548:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   da54c:	bf08      	it	eq
   da54e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da552:	4770      	bx	lr
   da554:	f04f 0000 	mov.w	r0, #0
   da558:	4770      	bx	lr
   da55a:	bf00      	nop

000da55c <__aeabi_d2uiz>:
   da55c:	004a      	lsls	r2, r1, #1
   da55e:	d211      	bcs.n	da584 <__aeabi_d2uiz+0x28>
   da560:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da564:	d211      	bcs.n	da58a <__aeabi_d2uiz+0x2e>
   da566:	d50d      	bpl.n	da584 <__aeabi_d2uiz+0x28>
   da568:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da56c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da570:	d40e      	bmi.n	da590 <__aeabi_d2uiz+0x34>
   da572:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da576:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da57a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da57e:	fa23 f002 	lsr.w	r0, r3, r2
   da582:	4770      	bx	lr
   da584:	f04f 0000 	mov.w	r0, #0
   da588:	4770      	bx	lr
   da58a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da58e:	d102      	bne.n	da596 <__aeabi_d2uiz+0x3a>
   da590:	f04f 30ff 	mov.w	r0, #4294967295
   da594:	4770      	bx	lr
   da596:	f04f 0000 	mov.w	r0, #0
   da59a:	4770      	bx	lr

000da59c <__aeabi_d2f>:
   da59c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da5a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da5a4:	bf24      	itt	cs
   da5a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da5aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da5ae:	d90d      	bls.n	da5cc <__aeabi_d2f+0x30>
   da5b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da5b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da5b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da5bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da5c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da5c4:	bf08      	it	eq
   da5c6:	f020 0001 	biceq.w	r0, r0, #1
   da5ca:	4770      	bx	lr
   da5cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da5d0:	d121      	bne.n	da616 <__aeabi_d2f+0x7a>
   da5d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da5d6:	bfbc      	itt	lt
   da5d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da5dc:	4770      	bxlt	lr
   da5de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da5e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da5e6:	f1c2 0218 	rsb	r2, r2, #24
   da5ea:	f1c2 0c20 	rsb	ip, r2, #32
   da5ee:	fa10 f30c 	lsls.w	r3, r0, ip
   da5f2:	fa20 f002 	lsr.w	r0, r0, r2
   da5f6:	bf18      	it	ne
   da5f8:	f040 0001 	orrne.w	r0, r0, #1
   da5fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da600:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da604:	fa03 fc0c 	lsl.w	ip, r3, ip
   da608:	ea40 000c 	orr.w	r0, r0, ip
   da60c:	fa23 f302 	lsr.w	r3, r3, r2
   da610:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da614:	e7cc      	b.n	da5b0 <__aeabi_d2f+0x14>
   da616:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da61a:	d107      	bne.n	da62c <__aeabi_d2f+0x90>
   da61c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da620:	bf1e      	ittt	ne
   da622:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da626:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da62a:	4770      	bxne	lr
   da62c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da630:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da634:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da638:	4770      	bx	lr
   da63a:	bf00      	nop

000da63c <__aeabi_frsub>:
   da63c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   da640:	e002      	b.n	da648 <__addsf3>
   da642:	bf00      	nop

000da644 <__aeabi_fsub>:
   da644:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000da648 <__addsf3>:
   da648:	0042      	lsls	r2, r0, #1
   da64a:	bf1f      	itttt	ne
   da64c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   da650:	ea92 0f03 	teqne	r2, r3
   da654:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   da658:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   da65c:	d06a      	beq.n	da734 <__addsf3+0xec>
   da65e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   da662:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   da666:	bfc1      	itttt	gt
   da668:	18d2      	addgt	r2, r2, r3
   da66a:	4041      	eorgt	r1, r0
   da66c:	4048      	eorgt	r0, r1
   da66e:	4041      	eorgt	r1, r0
   da670:	bfb8      	it	lt
   da672:	425b      	neglt	r3, r3
   da674:	2b19      	cmp	r3, #25
   da676:	bf88      	it	hi
   da678:	4770      	bxhi	lr
   da67a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   da67e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da682:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   da686:	bf18      	it	ne
   da688:	4240      	negne	r0, r0
   da68a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da68e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   da692:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   da696:	bf18      	it	ne
   da698:	4249      	negne	r1, r1
   da69a:	ea92 0f03 	teq	r2, r3
   da69e:	d03f      	beq.n	da720 <__addsf3+0xd8>
   da6a0:	f1a2 0201 	sub.w	r2, r2, #1
   da6a4:	fa41 fc03 	asr.w	ip, r1, r3
   da6a8:	eb10 000c 	adds.w	r0, r0, ip
   da6ac:	f1c3 0320 	rsb	r3, r3, #32
   da6b0:	fa01 f103 	lsl.w	r1, r1, r3
   da6b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   da6b8:	d502      	bpl.n	da6c0 <__addsf3+0x78>
   da6ba:	4249      	negs	r1, r1
   da6bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   da6c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   da6c4:	d313      	bcc.n	da6ee <__addsf3+0xa6>
   da6c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   da6ca:	d306      	bcc.n	da6da <__addsf3+0x92>
   da6cc:	0840      	lsrs	r0, r0, #1
   da6ce:	ea4f 0131 	mov.w	r1, r1, rrx
   da6d2:	f102 0201 	add.w	r2, r2, #1
   da6d6:	2afe      	cmp	r2, #254	; 0xfe
   da6d8:	d251      	bcs.n	da77e <__addsf3+0x136>
   da6da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   da6de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   da6e2:	bf08      	it	eq
   da6e4:	f020 0001 	biceq.w	r0, r0, #1
   da6e8:	ea40 0003 	orr.w	r0, r0, r3
   da6ec:	4770      	bx	lr
   da6ee:	0049      	lsls	r1, r1, #1
   da6f0:	eb40 0000 	adc.w	r0, r0, r0
   da6f4:	3a01      	subs	r2, #1
   da6f6:	bf28      	it	cs
   da6f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   da6fc:	d2ed      	bcs.n	da6da <__addsf3+0x92>
   da6fe:	fab0 fc80 	clz	ip, r0
   da702:	f1ac 0c08 	sub.w	ip, ip, #8
   da706:	ebb2 020c 	subs.w	r2, r2, ip
   da70a:	fa00 f00c 	lsl.w	r0, r0, ip
   da70e:	bfaa      	itet	ge
   da710:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   da714:	4252      	neglt	r2, r2
   da716:	4318      	orrge	r0, r3
   da718:	bfbc      	itt	lt
   da71a:	40d0      	lsrlt	r0, r2
   da71c:	4318      	orrlt	r0, r3
   da71e:	4770      	bx	lr
   da720:	f092 0f00 	teq	r2, #0
   da724:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   da728:	bf06      	itte	eq
   da72a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   da72e:	3201      	addeq	r2, #1
   da730:	3b01      	subne	r3, #1
   da732:	e7b5      	b.n	da6a0 <__addsf3+0x58>
   da734:	ea4f 0341 	mov.w	r3, r1, lsl #1
   da738:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   da73c:	bf18      	it	ne
   da73e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   da742:	d021      	beq.n	da788 <__addsf3+0x140>
   da744:	ea92 0f03 	teq	r2, r3
   da748:	d004      	beq.n	da754 <__addsf3+0x10c>
   da74a:	f092 0f00 	teq	r2, #0
   da74e:	bf08      	it	eq
   da750:	4608      	moveq	r0, r1
   da752:	4770      	bx	lr
   da754:	ea90 0f01 	teq	r0, r1
   da758:	bf1c      	itt	ne
   da75a:	2000      	movne	r0, #0
   da75c:	4770      	bxne	lr
   da75e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   da762:	d104      	bne.n	da76e <__addsf3+0x126>
   da764:	0040      	lsls	r0, r0, #1
   da766:	bf28      	it	cs
   da768:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   da76c:	4770      	bx	lr
   da76e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   da772:	bf3c      	itt	cc
   da774:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   da778:	4770      	bxcc	lr
   da77a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   da77e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   da782:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da786:	4770      	bx	lr
   da788:	ea7f 6222 	mvns.w	r2, r2, asr #24
   da78c:	bf16      	itet	ne
   da78e:	4608      	movne	r0, r1
   da790:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   da794:	4601      	movne	r1, r0
   da796:	0242      	lsls	r2, r0, #9
   da798:	bf06      	itte	eq
   da79a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   da79e:	ea90 0f01 	teqeq	r0, r1
   da7a2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   da7a6:	4770      	bx	lr

000da7a8 <__aeabi_ui2f>:
   da7a8:	f04f 0300 	mov.w	r3, #0
   da7ac:	e004      	b.n	da7b8 <__aeabi_i2f+0x8>
   da7ae:	bf00      	nop

000da7b0 <__aeabi_i2f>:
   da7b0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   da7b4:	bf48      	it	mi
   da7b6:	4240      	negmi	r0, r0
   da7b8:	ea5f 0c00 	movs.w	ip, r0
   da7bc:	bf08      	it	eq
   da7be:	4770      	bxeq	lr
   da7c0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   da7c4:	4601      	mov	r1, r0
   da7c6:	f04f 0000 	mov.w	r0, #0
   da7ca:	e01c      	b.n	da806 <__aeabi_l2f+0x2a>

000da7cc <__aeabi_ul2f>:
   da7cc:	ea50 0201 	orrs.w	r2, r0, r1
   da7d0:	bf08      	it	eq
   da7d2:	4770      	bxeq	lr
   da7d4:	f04f 0300 	mov.w	r3, #0
   da7d8:	e00a      	b.n	da7f0 <__aeabi_l2f+0x14>
   da7da:	bf00      	nop

000da7dc <__aeabi_l2f>:
   da7dc:	ea50 0201 	orrs.w	r2, r0, r1
   da7e0:	bf08      	it	eq
   da7e2:	4770      	bxeq	lr
   da7e4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   da7e8:	d502      	bpl.n	da7f0 <__aeabi_l2f+0x14>
   da7ea:	4240      	negs	r0, r0
   da7ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da7f0:	ea5f 0c01 	movs.w	ip, r1
   da7f4:	bf02      	ittt	eq
   da7f6:	4684      	moveq	ip, r0
   da7f8:	4601      	moveq	r1, r0
   da7fa:	2000      	moveq	r0, #0
   da7fc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   da800:	bf08      	it	eq
   da802:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   da806:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   da80a:	fabc f28c 	clz	r2, ip
   da80e:	3a08      	subs	r2, #8
   da810:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   da814:	db10      	blt.n	da838 <__aeabi_l2f+0x5c>
   da816:	fa01 fc02 	lsl.w	ip, r1, r2
   da81a:	4463      	add	r3, ip
   da81c:	fa00 fc02 	lsl.w	ip, r0, r2
   da820:	f1c2 0220 	rsb	r2, r2, #32
   da824:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da828:	fa20 f202 	lsr.w	r2, r0, r2
   da82c:	eb43 0002 	adc.w	r0, r3, r2
   da830:	bf08      	it	eq
   da832:	f020 0001 	biceq.w	r0, r0, #1
   da836:	4770      	bx	lr
   da838:	f102 0220 	add.w	r2, r2, #32
   da83c:	fa01 fc02 	lsl.w	ip, r1, r2
   da840:	f1c2 0220 	rsb	r2, r2, #32
   da844:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   da848:	fa21 f202 	lsr.w	r2, r1, r2
   da84c:	eb43 0002 	adc.w	r0, r3, r2
   da850:	bf08      	it	eq
   da852:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   da856:	4770      	bx	lr

000da858 <__aeabi_ldivmod>:
   da858:	b97b      	cbnz	r3, da87a <__aeabi_ldivmod+0x22>
   da85a:	b972      	cbnz	r2, da87a <__aeabi_ldivmod+0x22>
   da85c:	2900      	cmp	r1, #0
   da85e:	bfbe      	ittt	lt
   da860:	2000      	movlt	r0, #0
   da862:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   da866:	e006      	blt.n	da876 <__aeabi_ldivmod+0x1e>
   da868:	bf08      	it	eq
   da86a:	2800      	cmpeq	r0, #0
   da86c:	bf1c      	itt	ne
   da86e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   da872:	f04f 30ff 	movne.w	r0, #4294967295
   da876:	f000 b9a1 	b.w	dabbc <__aeabi_idiv0>
   da87a:	f1ad 0c08 	sub.w	ip, sp, #8
   da87e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da882:	2900      	cmp	r1, #0
   da884:	db09      	blt.n	da89a <__aeabi_ldivmod+0x42>
   da886:	2b00      	cmp	r3, #0
   da888:	db1a      	blt.n	da8c0 <__aeabi_ldivmod+0x68>
   da88a:	f000 f835 	bl	da8f8 <__udivmoddi4>
   da88e:	f8dd e004 	ldr.w	lr, [sp, #4]
   da892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da896:	b004      	add	sp, #16
   da898:	4770      	bx	lr
   da89a:	4240      	negs	r0, r0
   da89c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da8a0:	2b00      	cmp	r3, #0
   da8a2:	db1b      	blt.n	da8dc <__aeabi_ldivmod+0x84>
   da8a4:	f000 f828 	bl	da8f8 <__udivmoddi4>
   da8a8:	f8dd e004 	ldr.w	lr, [sp, #4]
   da8ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da8b0:	b004      	add	sp, #16
   da8b2:	4240      	negs	r0, r0
   da8b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da8b8:	4252      	negs	r2, r2
   da8ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da8be:	4770      	bx	lr
   da8c0:	4252      	negs	r2, r2
   da8c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da8c6:	f000 f817 	bl	da8f8 <__udivmoddi4>
   da8ca:	f8dd e004 	ldr.w	lr, [sp, #4]
   da8ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da8d2:	b004      	add	sp, #16
   da8d4:	4240      	negs	r0, r0
   da8d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da8da:	4770      	bx	lr
   da8dc:	4252      	negs	r2, r2
   da8de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da8e2:	f000 f809 	bl	da8f8 <__udivmoddi4>
   da8e6:	f8dd e004 	ldr.w	lr, [sp, #4]
   da8ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da8ee:	b004      	add	sp, #16
   da8f0:	4252      	negs	r2, r2
   da8f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da8f6:	4770      	bx	lr

000da8f8 <__udivmoddi4>:
   da8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da8fc:	9d08      	ldr	r5, [sp, #32]
   da8fe:	4604      	mov	r4, r0
   da900:	468c      	mov	ip, r1
   da902:	2b00      	cmp	r3, #0
   da904:	f040 8083 	bne.w	daa0e <__udivmoddi4+0x116>
   da908:	428a      	cmp	r2, r1
   da90a:	4617      	mov	r7, r2
   da90c:	d947      	bls.n	da99e <__udivmoddi4+0xa6>
   da90e:	fab2 f282 	clz	r2, r2
   da912:	b142      	cbz	r2, da926 <__udivmoddi4+0x2e>
   da914:	f1c2 0020 	rsb	r0, r2, #32
   da918:	fa24 f000 	lsr.w	r0, r4, r0
   da91c:	4091      	lsls	r1, r2
   da91e:	4097      	lsls	r7, r2
   da920:	ea40 0c01 	orr.w	ip, r0, r1
   da924:	4094      	lsls	r4, r2
   da926:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da92a:	0c23      	lsrs	r3, r4, #16
   da92c:	fbbc f6f8 	udiv	r6, ip, r8
   da930:	fa1f fe87 	uxth.w	lr, r7
   da934:	fb08 c116 	mls	r1, r8, r6, ip
   da938:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da93c:	fb06 f10e 	mul.w	r1, r6, lr
   da940:	4299      	cmp	r1, r3
   da942:	d909      	bls.n	da958 <__udivmoddi4+0x60>
   da944:	18fb      	adds	r3, r7, r3
   da946:	f106 30ff 	add.w	r0, r6, #4294967295
   da94a:	f080 8119 	bcs.w	dab80 <__udivmoddi4+0x288>
   da94e:	4299      	cmp	r1, r3
   da950:	f240 8116 	bls.w	dab80 <__udivmoddi4+0x288>
   da954:	3e02      	subs	r6, #2
   da956:	443b      	add	r3, r7
   da958:	1a5b      	subs	r3, r3, r1
   da95a:	b2a4      	uxth	r4, r4
   da95c:	fbb3 f0f8 	udiv	r0, r3, r8
   da960:	fb08 3310 	mls	r3, r8, r0, r3
   da964:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   da968:	fb00 fe0e 	mul.w	lr, r0, lr
   da96c:	45a6      	cmp	lr, r4
   da96e:	d909      	bls.n	da984 <__udivmoddi4+0x8c>
   da970:	193c      	adds	r4, r7, r4
   da972:	f100 33ff 	add.w	r3, r0, #4294967295
   da976:	f080 8105 	bcs.w	dab84 <__udivmoddi4+0x28c>
   da97a:	45a6      	cmp	lr, r4
   da97c:	f240 8102 	bls.w	dab84 <__udivmoddi4+0x28c>
   da980:	3802      	subs	r0, #2
   da982:	443c      	add	r4, r7
   da984:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   da988:	eba4 040e 	sub.w	r4, r4, lr
   da98c:	2600      	movs	r6, #0
   da98e:	b11d      	cbz	r5, da998 <__udivmoddi4+0xa0>
   da990:	40d4      	lsrs	r4, r2
   da992:	2300      	movs	r3, #0
   da994:	e9c5 4300 	strd	r4, r3, [r5]
   da998:	4631      	mov	r1, r6
   da99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da99e:	b902      	cbnz	r2, da9a2 <__udivmoddi4+0xaa>
   da9a0:	deff      	udf	#255	; 0xff
   da9a2:	fab2 f282 	clz	r2, r2
   da9a6:	2a00      	cmp	r2, #0
   da9a8:	d150      	bne.n	daa4c <__udivmoddi4+0x154>
   da9aa:	1bcb      	subs	r3, r1, r7
   da9ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da9b0:	fa1f f887 	uxth.w	r8, r7
   da9b4:	2601      	movs	r6, #1
   da9b6:	fbb3 fcfe 	udiv	ip, r3, lr
   da9ba:	0c21      	lsrs	r1, r4, #16
   da9bc:	fb0e 331c 	mls	r3, lr, ip, r3
   da9c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da9c4:	fb08 f30c 	mul.w	r3, r8, ip
   da9c8:	428b      	cmp	r3, r1
   da9ca:	d907      	bls.n	da9dc <__udivmoddi4+0xe4>
   da9cc:	1879      	adds	r1, r7, r1
   da9ce:	f10c 30ff 	add.w	r0, ip, #4294967295
   da9d2:	d202      	bcs.n	da9da <__udivmoddi4+0xe2>
   da9d4:	428b      	cmp	r3, r1
   da9d6:	f200 80e9 	bhi.w	dabac <__udivmoddi4+0x2b4>
   da9da:	4684      	mov	ip, r0
   da9dc:	1ac9      	subs	r1, r1, r3
   da9de:	b2a3      	uxth	r3, r4
   da9e0:	fbb1 f0fe 	udiv	r0, r1, lr
   da9e4:	fb0e 1110 	mls	r1, lr, r0, r1
   da9e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   da9ec:	fb08 f800 	mul.w	r8, r8, r0
   da9f0:	45a0      	cmp	r8, r4
   da9f2:	d907      	bls.n	daa04 <__udivmoddi4+0x10c>
   da9f4:	193c      	adds	r4, r7, r4
   da9f6:	f100 33ff 	add.w	r3, r0, #4294967295
   da9fa:	d202      	bcs.n	daa02 <__udivmoddi4+0x10a>
   da9fc:	45a0      	cmp	r8, r4
   da9fe:	f200 80d9 	bhi.w	dabb4 <__udivmoddi4+0x2bc>
   daa02:	4618      	mov	r0, r3
   daa04:	eba4 0408 	sub.w	r4, r4, r8
   daa08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   daa0c:	e7bf      	b.n	da98e <__udivmoddi4+0x96>
   daa0e:	428b      	cmp	r3, r1
   daa10:	d909      	bls.n	daa26 <__udivmoddi4+0x12e>
   daa12:	2d00      	cmp	r5, #0
   daa14:	f000 80b1 	beq.w	dab7a <__udivmoddi4+0x282>
   daa18:	2600      	movs	r6, #0
   daa1a:	e9c5 0100 	strd	r0, r1, [r5]
   daa1e:	4630      	mov	r0, r6
   daa20:	4631      	mov	r1, r6
   daa22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daa26:	fab3 f683 	clz	r6, r3
   daa2a:	2e00      	cmp	r6, #0
   daa2c:	d14a      	bne.n	daac4 <__udivmoddi4+0x1cc>
   daa2e:	428b      	cmp	r3, r1
   daa30:	d302      	bcc.n	daa38 <__udivmoddi4+0x140>
   daa32:	4282      	cmp	r2, r0
   daa34:	f200 80b8 	bhi.w	daba8 <__udivmoddi4+0x2b0>
   daa38:	1a84      	subs	r4, r0, r2
   daa3a:	eb61 0103 	sbc.w	r1, r1, r3
   daa3e:	2001      	movs	r0, #1
   daa40:	468c      	mov	ip, r1
   daa42:	2d00      	cmp	r5, #0
   daa44:	d0a8      	beq.n	da998 <__udivmoddi4+0xa0>
   daa46:	e9c5 4c00 	strd	r4, ip, [r5]
   daa4a:	e7a5      	b.n	da998 <__udivmoddi4+0xa0>
   daa4c:	f1c2 0320 	rsb	r3, r2, #32
   daa50:	fa20 f603 	lsr.w	r6, r0, r3
   daa54:	4097      	lsls	r7, r2
   daa56:	fa01 f002 	lsl.w	r0, r1, r2
   daa5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   daa5e:	40d9      	lsrs	r1, r3
   daa60:	4330      	orrs	r0, r6
   daa62:	0c03      	lsrs	r3, r0, #16
   daa64:	fbb1 f6fe 	udiv	r6, r1, lr
   daa68:	fa1f f887 	uxth.w	r8, r7
   daa6c:	fb0e 1116 	mls	r1, lr, r6, r1
   daa70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   daa74:	fb06 f108 	mul.w	r1, r6, r8
   daa78:	4299      	cmp	r1, r3
   daa7a:	fa04 f402 	lsl.w	r4, r4, r2
   daa7e:	d909      	bls.n	daa94 <__udivmoddi4+0x19c>
   daa80:	18fb      	adds	r3, r7, r3
   daa82:	f106 3cff 	add.w	ip, r6, #4294967295
   daa86:	f080 808d 	bcs.w	daba4 <__udivmoddi4+0x2ac>
   daa8a:	4299      	cmp	r1, r3
   daa8c:	f240 808a 	bls.w	daba4 <__udivmoddi4+0x2ac>
   daa90:	3e02      	subs	r6, #2
   daa92:	443b      	add	r3, r7
   daa94:	1a5b      	subs	r3, r3, r1
   daa96:	b281      	uxth	r1, r0
   daa98:	fbb3 f0fe 	udiv	r0, r3, lr
   daa9c:	fb0e 3310 	mls	r3, lr, r0, r3
   daaa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   daaa4:	fb00 f308 	mul.w	r3, r0, r8
   daaa8:	428b      	cmp	r3, r1
   daaaa:	d907      	bls.n	daabc <__udivmoddi4+0x1c4>
   daaac:	1879      	adds	r1, r7, r1
   daaae:	f100 3cff 	add.w	ip, r0, #4294967295
   daab2:	d273      	bcs.n	dab9c <__udivmoddi4+0x2a4>
   daab4:	428b      	cmp	r3, r1
   daab6:	d971      	bls.n	dab9c <__udivmoddi4+0x2a4>
   daab8:	3802      	subs	r0, #2
   daaba:	4439      	add	r1, r7
   daabc:	1acb      	subs	r3, r1, r3
   daabe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   daac2:	e778      	b.n	da9b6 <__udivmoddi4+0xbe>
   daac4:	f1c6 0c20 	rsb	ip, r6, #32
   daac8:	fa03 f406 	lsl.w	r4, r3, r6
   daacc:	fa22 f30c 	lsr.w	r3, r2, ip
   daad0:	431c      	orrs	r4, r3
   daad2:	fa20 f70c 	lsr.w	r7, r0, ip
   daad6:	fa01 f306 	lsl.w	r3, r1, r6
   daada:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   daade:	fa21 f10c 	lsr.w	r1, r1, ip
   daae2:	431f      	orrs	r7, r3
   daae4:	0c3b      	lsrs	r3, r7, #16
   daae6:	fbb1 f9fe 	udiv	r9, r1, lr
   daaea:	fa1f f884 	uxth.w	r8, r4
   daaee:	fb0e 1119 	mls	r1, lr, r9, r1
   daaf2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   daaf6:	fb09 fa08 	mul.w	sl, r9, r8
   daafa:	458a      	cmp	sl, r1
   daafc:	fa02 f206 	lsl.w	r2, r2, r6
   dab00:	fa00 f306 	lsl.w	r3, r0, r6
   dab04:	d908      	bls.n	dab18 <__udivmoddi4+0x220>
   dab06:	1861      	adds	r1, r4, r1
   dab08:	f109 30ff 	add.w	r0, r9, #4294967295
   dab0c:	d248      	bcs.n	daba0 <__udivmoddi4+0x2a8>
   dab0e:	458a      	cmp	sl, r1
   dab10:	d946      	bls.n	daba0 <__udivmoddi4+0x2a8>
   dab12:	f1a9 0902 	sub.w	r9, r9, #2
   dab16:	4421      	add	r1, r4
   dab18:	eba1 010a 	sub.w	r1, r1, sl
   dab1c:	b2bf      	uxth	r7, r7
   dab1e:	fbb1 f0fe 	udiv	r0, r1, lr
   dab22:	fb0e 1110 	mls	r1, lr, r0, r1
   dab26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dab2a:	fb00 f808 	mul.w	r8, r0, r8
   dab2e:	45b8      	cmp	r8, r7
   dab30:	d907      	bls.n	dab42 <__udivmoddi4+0x24a>
   dab32:	19e7      	adds	r7, r4, r7
   dab34:	f100 31ff 	add.w	r1, r0, #4294967295
   dab38:	d22e      	bcs.n	dab98 <__udivmoddi4+0x2a0>
   dab3a:	45b8      	cmp	r8, r7
   dab3c:	d92c      	bls.n	dab98 <__udivmoddi4+0x2a0>
   dab3e:	3802      	subs	r0, #2
   dab40:	4427      	add	r7, r4
   dab42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dab46:	eba7 0708 	sub.w	r7, r7, r8
   dab4a:	fba0 8902 	umull	r8, r9, r0, r2
   dab4e:	454f      	cmp	r7, r9
   dab50:	46c6      	mov	lr, r8
   dab52:	4649      	mov	r1, r9
   dab54:	d31a      	bcc.n	dab8c <__udivmoddi4+0x294>
   dab56:	d017      	beq.n	dab88 <__udivmoddi4+0x290>
   dab58:	b15d      	cbz	r5, dab72 <__udivmoddi4+0x27a>
   dab5a:	ebb3 020e 	subs.w	r2, r3, lr
   dab5e:	eb67 0701 	sbc.w	r7, r7, r1
   dab62:	fa07 fc0c 	lsl.w	ip, r7, ip
   dab66:	40f2      	lsrs	r2, r6
   dab68:	ea4c 0202 	orr.w	r2, ip, r2
   dab6c:	40f7      	lsrs	r7, r6
   dab6e:	e9c5 2700 	strd	r2, r7, [r5]
   dab72:	2600      	movs	r6, #0
   dab74:	4631      	mov	r1, r6
   dab76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dab7a:	462e      	mov	r6, r5
   dab7c:	4628      	mov	r0, r5
   dab7e:	e70b      	b.n	da998 <__udivmoddi4+0xa0>
   dab80:	4606      	mov	r6, r0
   dab82:	e6e9      	b.n	da958 <__udivmoddi4+0x60>
   dab84:	4618      	mov	r0, r3
   dab86:	e6fd      	b.n	da984 <__udivmoddi4+0x8c>
   dab88:	4543      	cmp	r3, r8
   dab8a:	d2e5      	bcs.n	dab58 <__udivmoddi4+0x260>
   dab8c:	ebb8 0e02 	subs.w	lr, r8, r2
   dab90:	eb69 0104 	sbc.w	r1, r9, r4
   dab94:	3801      	subs	r0, #1
   dab96:	e7df      	b.n	dab58 <__udivmoddi4+0x260>
   dab98:	4608      	mov	r0, r1
   dab9a:	e7d2      	b.n	dab42 <__udivmoddi4+0x24a>
   dab9c:	4660      	mov	r0, ip
   dab9e:	e78d      	b.n	daabc <__udivmoddi4+0x1c4>
   daba0:	4681      	mov	r9, r0
   daba2:	e7b9      	b.n	dab18 <__udivmoddi4+0x220>
   daba4:	4666      	mov	r6, ip
   daba6:	e775      	b.n	daa94 <__udivmoddi4+0x19c>
   daba8:	4630      	mov	r0, r6
   dabaa:	e74a      	b.n	daa42 <__udivmoddi4+0x14a>
   dabac:	f1ac 0c02 	sub.w	ip, ip, #2
   dabb0:	4439      	add	r1, r7
   dabb2:	e713      	b.n	da9dc <__udivmoddi4+0xe4>
   dabb4:	3802      	subs	r0, #2
   dabb6:	443c      	add	r4, r7
   dabb8:	e724      	b.n	daa04 <__udivmoddi4+0x10c>
   dabba:	bf00      	nop

000dabbc <__aeabi_idiv0>:
   dabbc:	4770      	bx	lr
   dabbe:	bf00      	nop

000dabc0 <atexit>:
   dabc0:	2300      	movs	r3, #0
   dabc2:	4601      	mov	r1, r0
   dabc4:	461a      	mov	r2, r3
   dabc6:	4618      	mov	r0, r3
   dabc8:	f000 b856 	b.w	dac78 <__register_exitproc>

000dabcc <memcpy>:
   dabcc:	440a      	add	r2, r1
   dabce:	4291      	cmp	r1, r2
   dabd0:	f100 33ff 	add.w	r3, r0, #4294967295
   dabd4:	d100      	bne.n	dabd8 <memcpy+0xc>
   dabd6:	4770      	bx	lr
   dabd8:	b510      	push	{r4, lr}
   dabda:	f811 4b01 	ldrb.w	r4, [r1], #1
   dabde:	f803 4f01 	strb.w	r4, [r3, #1]!
   dabe2:	4291      	cmp	r1, r2
   dabe4:	d1f9      	bne.n	dabda <memcpy+0xe>
   dabe6:	bd10      	pop	{r4, pc}

000dabe8 <memset>:
   dabe8:	4402      	add	r2, r0
   dabea:	4603      	mov	r3, r0
   dabec:	4293      	cmp	r3, r2
   dabee:	d100      	bne.n	dabf2 <memset+0xa>
   dabf0:	4770      	bx	lr
   dabf2:	f803 1b01 	strb.w	r1, [r3], #1
   dabf6:	e7f9      	b.n	dabec <memset+0x4>

000dabf8 <srand>:
   dabf8:	b538      	push	{r3, r4, r5, lr}
   dabfa:	4b0d      	ldr	r3, [pc, #52]	; (dac30 <srand+0x38>)
   dabfc:	681d      	ldr	r5, [r3, #0]
   dabfe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dac00:	4604      	mov	r4, r0
   dac02:	b97b      	cbnz	r3, dac24 <srand+0x2c>
   dac04:	2018      	movs	r0, #24
   dac06:	f7fc fef5 	bl	d79f4 <malloc>
   dac0a:	4a0a      	ldr	r2, [pc, #40]	; (dac34 <srand+0x3c>)
   dac0c:	4b0a      	ldr	r3, [pc, #40]	; (dac38 <srand+0x40>)
   dac0e:	63a8      	str	r0, [r5, #56]	; 0x38
   dac10:	e9c0 2300 	strd	r2, r3, [r0]
   dac14:	4b09      	ldr	r3, [pc, #36]	; (dac3c <srand+0x44>)
   dac16:	6083      	str	r3, [r0, #8]
   dac18:	230b      	movs	r3, #11
   dac1a:	8183      	strh	r3, [r0, #12]
   dac1c:	2201      	movs	r2, #1
   dac1e:	2300      	movs	r3, #0
   dac20:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dac24:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dac26:	2200      	movs	r2, #0
   dac28:	611c      	str	r4, [r3, #16]
   dac2a:	615a      	str	r2, [r3, #20]
   dac2c:	bd38      	pop	{r3, r4, r5, pc}
   dac2e:	bf00      	nop
   dac30:	2003e430 	.word	0x2003e430
   dac34:	abcd330e 	.word	0xabcd330e
   dac38:	e66d1234 	.word	0xe66d1234
   dac3c:	0005deec 	.word	0x0005deec

000dac40 <strlen>:
   dac40:	4603      	mov	r3, r0
   dac42:	f813 2b01 	ldrb.w	r2, [r3], #1
   dac46:	2a00      	cmp	r2, #0
   dac48:	d1fb      	bne.n	dac42 <strlen+0x2>
   dac4a:	1a18      	subs	r0, r3, r0
   dac4c:	3801      	subs	r0, #1
   dac4e:	4770      	bx	lr

000dac50 <strncpy>:
   dac50:	b510      	push	{r4, lr}
   dac52:	3901      	subs	r1, #1
   dac54:	4603      	mov	r3, r0
   dac56:	b132      	cbz	r2, dac66 <strncpy+0x16>
   dac58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dac5c:	f803 4b01 	strb.w	r4, [r3], #1
   dac60:	3a01      	subs	r2, #1
   dac62:	2c00      	cmp	r4, #0
   dac64:	d1f7      	bne.n	dac56 <strncpy+0x6>
   dac66:	441a      	add	r2, r3
   dac68:	2100      	movs	r1, #0
   dac6a:	4293      	cmp	r3, r2
   dac6c:	d100      	bne.n	dac70 <strncpy+0x20>
   dac6e:	bd10      	pop	{r4, pc}
   dac70:	f803 1b01 	strb.w	r1, [r3], #1
   dac74:	e7f9      	b.n	dac6a <strncpy+0x1a>
	...

000dac78 <__register_exitproc>:
   dac78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dac7c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dad38 <__register_exitproc+0xc0>
   dac80:	4606      	mov	r6, r0
   dac82:	f8d8 0000 	ldr.w	r0, [r8]
   dac86:	461f      	mov	r7, r3
   dac88:	460d      	mov	r5, r1
   dac8a:	4691      	mov	r9, r2
   dac8c:	f000 f856 	bl	dad3c <__retarget_lock_acquire_recursive>
   dac90:	4b25      	ldr	r3, [pc, #148]	; (dad28 <__register_exitproc+0xb0>)
   dac92:	681c      	ldr	r4, [r3, #0]
   dac94:	b934      	cbnz	r4, daca4 <__register_exitproc+0x2c>
   dac96:	4c25      	ldr	r4, [pc, #148]	; (dad2c <__register_exitproc+0xb4>)
   dac98:	601c      	str	r4, [r3, #0]
   dac9a:	4b25      	ldr	r3, [pc, #148]	; (dad30 <__register_exitproc+0xb8>)
   dac9c:	b113      	cbz	r3, daca4 <__register_exitproc+0x2c>
   dac9e:	681b      	ldr	r3, [r3, #0]
   daca0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   daca4:	6863      	ldr	r3, [r4, #4]
   daca6:	2b1f      	cmp	r3, #31
   daca8:	dd07      	ble.n	dacba <__register_exitproc+0x42>
   dacaa:	f8d8 0000 	ldr.w	r0, [r8]
   dacae:	f000 f847 	bl	dad40 <__retarget_lock_release_recursive>
   dacb2:	f04f 30ff 	mov.w	r0, #4294967295
   dacb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dacba:	b34e      	cbz	r6, dad10 <__register_exitproc+0x98>
   dacbc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dacc0:	b988      	cbnz	r0, dace6 <__register_exitproc+0x6e>
   dacc2:	4b1c      	ldr	r3, [pc, #112]	; (dad34 <__register_exitproc+0xbc>)
   dacc4:	b923      	cbnz	r3, dacd0 <__register_exitproc+0x58>
   dacc6:	f8d8 0000 	ldr.w	r0, [r8]
   dacca:	f000 f838 	bl	dad3e <__retarget_lock_release>
   dacce:	e7f0      	b.n	dacb2 <__register_exitproc+0x3a>
   dacd0:	f44f 7084 	mov.w	r0, #264	; 0x108
   dacd4:	f7fc fe8e 	bl	d79f4 <malloc>
   dacd8:	2800      	cmp	r0, #0
   dacda:	d0f4      	beq.n	dacc6 <__register_exitproc+0x4e>
   dacdc:	2300      	movs	r3, #0
   dacde:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dace2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dace6:	6863      	ldr	r3, [r4, #4]
   dace8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dacec:	2201      	movs	r2, #1
   dacee:	409a      	lsls	r2, r3
   dacf0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dacf4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dacf8:	4313      	orrs	r3, r2
   dacfa:	2e02      	cmp	r6, #2
   dacfc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dad00:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dad04:	bf02      	ittt	eq
   dad06:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dad0a:	431a      	orreq	r2, r3
   dad0c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dad10:	6863      	ldr	r3, [r4, #4]
   dad12:	f8d8 0000 	ldr.w	r0, [r8]
   dad16:	1c5a      	adds	r2, r3, #1
   dad18:	3302      	adds	r3, #2
   dad1a:	6062      	str	r2, [r4, #4]
   dad1c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dad20:	f000 f80e 	bl	dad40 <__retarget_lock_release_recursive>
   dad24:	2000      	movs	r0, #0
   dad26:	e7c6      	b.n	dacb6 <__register_exitproc+0x3e>
   dad28:	2003e7e0 	.word	0x2003e7e0
   dad2c:	2003e754 	.word	0x2003e754
   dad30:	00000000 	.word	0x00000000
   dad34:	000d79f5 	.word	0x000d79f5
   dad38:	2003e494 	.word	0x2003e494

000dad3c <__retarget_lock_acquire_recursive>:
   dad3c:	4770      	bx	lr

000dad3e <__retarget_lock_release>:
   dad3e:	4770      	bx	lr

000dad40 <__retarget_lock_release_recursive>:
   dad40:	4770      	bx	lr

000dad42 <link_code_end>:
	...

000dad44 <dynalib_user>:
   dad44:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dad54:	0000 0000 0a0a 6554 706d 7265 7461 7275     ......Temperatur
   dad64:	2065 203d 2000 0046 7250 7365 7573 6572     e = . F.Pressure
   dad74:	3d20 0020 6d20 486d 0067 7041 7270 786f      = . mmHg.Approx
   dad84:	202e 6c41 6974 7574 6564 3d20 0020 6d20     . Altitude = . m
   dad94:	4800 6d75 6469 7469 2079 203d 2000 0025     .Humidity = . %.
   dada4:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dadb4:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dadc4:	2d2d 2d2d 5300 6e65 6f73 3a72 2020 2020     ----.Sensor:    
   dadd4:	2020 0020 7244 7669 7265 5620 7265 203a        .Driver Ver: 
   dade4:	2020 5500 696e 7571 2065 4449 203a 2020       .Unique ID:   
   dadf4:	0020 614d 2078 6156 756c 3a65 2020 2020      .Max Value:    
   dae04:	2000 7878 0078 694d 206e 6156 756c 3a65     . xxx.Min Value:
   dae14:	2020 2020 5200 7365 6c6f 7475 6f69 3a6e         .Resolution:
   dae24:	2020 0020 430a 6c61 6269 6172 6974 6e6f        ..Calibration
   dae34:	6f20 6666 6573 7374 0a20 4100 6363 6c65      offsets ..Accel
   dae44:	7265 6d6f 7465 7265 203a 0a00 7947 6f72     erometer: ..Gyro
   dae54:	203a 0a00 614d 3a67 0020 410a 6363 6c65     : ..Mag: ..Accel
   dae64:	5220 6461 7569 3a73 0020 4d0a 6761 5220      Radius: ..Mag R
   dae74:	6461 7569 3a73 0020 004e 454e 5300 0045     adius: .N.NE.SE.
   dae84:	0053 5753 4e00 0057 2021 5300 7379 003a     S.SW.NW.! .Sys:.
   dae94:	4720 003a 4120 003a 4d20 003a 7953 7473      G:. A:. M:.Syst
   daea4:	6d65 5320 6174 7574 3a73 3020 0078 6553     em Status: 0x.Se
   daeb4:	666c 5420 7365 3a74 2020 2020 3020 0078     lf Test:     0x.
   daec4:	7953 7473 6d65 4520 7272 726f 203a 3020     System Error:  0
   daed4:	0078 6554 706d 202e 203d 2000 b0c2 0046     x.Temp. = . ..F.
   daee4:	7250 7365 2e73 3d20 0020 614d 7272 6569     Press. = .Marrie
   daef4:	6920 2073 7267 6165 2174 4300 6d6f 6170      is great!.Compa
   daf04:	7373 6820 6165 6964 676e 0900 0009 6d20     ss heading.... m
   daf14:	6870 4100 4300 4f00 6972 6e65 6174 6974     ph.A.C.Orientati
   daf24:	6e6f 203a 2c00 0020 7551 7461 7265 696e     on: ., .Quaterni
   daf34:	6e6f 203a 4300 6c61 6269 6172 6974 6e6f     on: .Calibration
   daf44:	203a 0a00 000a 3a58 0020 5909 203a 0900     : ....X: ..Y: ..
   daf54:	3a5a 0020 6f63 706d 7361 2073 6568 6461     Z: .compass head
   daf64:	6e69 3a67 2020 5600 6e61 2065 6156 756c     ing:  .Vane Valu
   daf74:	0965 6944 6572 7463 6f69 096e 6548 6461     e.Direction.Head
   daf84:	6e69 0067 6144 6976 2073 6957 646e 5320     ing.Davis Wind S
   daf94:	6570 6465 5420 7365 0074 6f52 6174 6974     peed Test.Rotati
   dafa4:	6e6f 0973 504d 0048 4d42 3245 3038 7420     ons.MPH.BME280 t
   dafb4:	7365 0074 3231 7838 3436 4f20 454c 2044     est.128x64 OLED 
   dafc4:	6546 7461 6568 5772 6e69 2067 6574 7473     FeatherWing test
   dafd4:	4f00 454c 2044 6562 7567 006e 7542 7474     .OLED begun.Butt
   dafe4:	6e6f 7420 7365 0074 6f43 6e6e 6365 6974     on test.Connecti
   daff4:	676e 7420 206f 5353 4449 270a 6461 6661     ng to SSID.'adaf
   db004:	7572 7469 3a27 6300 6e6f 656e 7463 6465     ruit':.connected
   db014:	0021 5049 203a 3031 302e 312e 322e 0033     !.IP: 10.0.1.23.
   db024:	6553 646e 6e69 2067 6176 206c 3023 4300     Sending val #0.C
   db034:	756f 646c 6e20 746f 6620 6e69 2064 2061     ould not find a 
   db044:	6176 696c 2064 4d42 3245 3038 7320 6e65     valid BME280 sen
   db054:	6f73 2c72 6320 6568 6b63 7720 7269 6e69     sor, check wirin
   db064:	2c67 6120 6464 6572 7373 202c 6573 736e     g, address, sens
   db074:	726f 4920 2144 5300 6e65 6f73 4972 2044     or ID!.SensorID 
   db084:	6177 3a73 3020 0078 2020 2020 2020 2020     was: 0x.        
   db094:	4449 6f20 2066 7830 4646 7020 6f72 6162     ID of 0xFF proba
   db0a4:	6c62 2079 656d 6e61 2073 2061 6162 2064     bly means a bad 
   db0b4:	6461 7264 7365 2c73 6120 4220 504d 3120     address, a BMP 1
   db0c4:	3038 6f20 2072 4d42 2050 3830 0a35 2000     80 or BMP 085.. 
   db0d4:	2020 4449 6f20 2066 7830 3635 302d 3578       ID of 0x56-0x5
   db0e4:	2038 6572 7270 7365 6e65 7374 6120 4220     8 represents a B
   db0f4:	504d 3220 3038 0a2c 2000 2020 2020 2020     MP 280,..       
   db104:	4920 2044 666f 3020 3678 2030 6572 7270      ID of 0x60 repr
   db114:	7365 6e65 7374 6120 4220 454d 3220 3038     esents a BME 280
   db124:	0a2e 2000 2020 2020 2020 4920 2044 666f     ...        ID of
   db134:	3020 3678 2031 6572 7270 7365 6e65 7374      0x61 represents
   db144:	6120 4220 454d 3620 3038 0a2e 5700 6265      a BME 680...Web
   db154:	6553 6972 6c61 3320 2044 6946 6d72 6177     Serial 3D Firmwa
   db164:	6572 4600 756f 646e 4920 4332 4520 5045     re.Found I2C EEP
   db174:	4f52 004d 6554 7473 6e69 2067 6973 657a     ROM.Testing size
   db184:	0021 3249 2043 4545 5250 4d4f 6e20 746f     !.I2C EEPROM not
   db194:	6920 6564 746e 6669 6569 2064 2e2e 202e      identified ... 
   db1a4:	6863 6365 206b 6f79 7275 6320 6e6f 656e     check your conne
   db1b4:	7463 6f69 736e 0d3f 000a 6146 6c69 6465     ctions?...Failed
   db1c4:	7420 206f 7277 7469 2065 6461 7264 7365      to write addres
   db1d4:	2073 7830 4600 6961 656c 2064 6f74 7220     s 0x.Failed to r
   db1e4:	2d65 7277 7469 2065 6461 7264 7365 2073     e-write address 
   db1f4:	7830 4600 756f 646e 6d20 7861 6120 6464     0x.Found max add
   db204:	6572 7373 5400 6968 2073 4545 5250 4d4f     ress.This EEPROM
   db214:	6320 6e61 7320 6f74 6572 0020 6220 7479      can store . byt
   db224:	7365 4f00 6f6f 7370 202c 6f6e 4220 4f4e     es.Ooops, no BNO
   db234:	3530 2035 6564 6574 7463 6465 2e20 2e2e     055 detected ...
   db244:	4320 6568 6b63 7920 756f 2072 6977 6972      Check your wiri
   db254:	676e 6f20 2072 3249 2043 4441 5244 0021     ng or I2C ADDR!.
   db264:	4e0a 206f 6143 696c 7262 7461 6f69 206e     .No Calibration 
   db274:	6144 6174 6620 726f 7420 6968 2073 6573     Data for this se
   db284:	736e 726f 6520 6978 7473 2073 6e69 4520     nsor exists in E
   db294:	5045 4f52 004d 460a 756f 646e 4320 6c61     EPROM..Found Cal
   db2a4:	6269 6172 6974 6e6f 6620 726f 7420 6968     ibration for thi
   db2b4:	2073 6573 736e 726f 6920 206e 4545 5250     s sensor in EEPR
   db2c4:	4d4f 002e 0a0a 6552 7473 726f 6e69 2067     OM....Restoring 
   db2d4:	6143 696c 7262 7461 6f69 206e 6164 6174     Calibration data
   db2e4:	7420 206f 6874 2065 4e42 304f 3535 2e2e      to the BNO055..
   db2f4:	002e 0a0a 6143 696c 7262 7461 6f69 206e     ....Calibration 
   db304:	6164 6174 6c20 616f 6564 2064 6e69 6f74     data loaded into
   db314:	4220 4f4e 3530 0035 6f4d 6576 7320 6e65      BNO055.Move sen
   db324:	6f73 2072 6c73 6769 7468 796c 7420 206f     sor slightly to 
   db334:	6163 696c 7262 7461 2065 616d 6e67 7465     calibrate magnet
   db344:	6d6f 7465 7265 0073 6c50 6165 6573 4320     ometers.Please C
   db354:	6c61 6269 6172 6574 5320 6e65 6f73 3a72     alibrate Sensor:
   db364:	0020 460a 6c75 796c 6320 6c61 6269 6172      ..Fully calibra
   db374:	6574 2164 4300 6c61 6269 6172 6974 6e6f     ted!.Calibration
   db384:	5220 7365 6c75 7374 203a 0a00 530a 6f74      Results: ...Sto
   db394:	6972 676e 6320 6c61 6269 6172 6974 6e6f     ring calibration
   db3a4:	6420 7461 2061 6f74 4520 5045 4f52 2e4d      data to EEPROM.
   db3b4:	2e2e 4400 7461 2061 7473 726f 6465 7420     ...Data stored t
   db3c4:	206f 4545 5250 4d4f 002e 2d0a 2d2d 2d2d     o EEPROM...-----
   db3d4:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   db3e4:	2d2d 2d2d 2d2d 2d2d 2d2d 0a2d 6400 6665     -----------..def
   db3f4:	7561 746c 0020 534d 0042 534c 0042 533c     ault .MSB.LSB.<S
   db404:	4950 6553 7474 6e69 7367 6420 6665 7561     PISettings defau
   db414:	746c 003e 533c 4950 6553 7474 6e69 7367     lt>.<SPISettings
   db424:	2520 2573 2075 7325 4d20 444f 2545 3e75      %s%u %s MODE%u>
   db434:	0000 0000                                   ....

000db438 <_ZTVN8particle11SPISettingsE>:
	...
   db440:	5269 000d 523d 000d 523f 000d               iR..=R..?R..

000db44c <_ZTV15Adafruit_BNO055>:
	...
   db454:	5fb1 000d 5ff5 000d 5faf 000d 6649 000d     ._..._..._..If..
   db464:	5fb5 000d                                   ._..

000db468 <_ZTV17Adafruit_GrayOLED>:
	...
   db478:	70bd 000d 7c79 000d 669b 000d 6ac5 000d     .p..y|...f...j..
   db488:	6ac7 000d 6af9 000d 6ad5 000d 6ae7 000d     .j...j...j...j..
   db498:	6a09 000d 6ac5 000d 6cf1 000d 6897 000d     .j...j...l...h..
   db4a8:	6b11 000d 6b4f 000d 6b89 000d 6bcf 000d     .k..Ok...k...k..
   db4b8:	6c6d 000d 6beb 000d 40a5 000d               ml...k...@..

000db4c4 <_ZL4font>:
   db4c4:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   db4d4:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   db4e4:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   db4f4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   db504:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   db514:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   db524:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   db534:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   db544:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   db554:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   db564:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   db574:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   db584:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   db594:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   db5a4:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   db5b4:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   db5c4:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   db5d4:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   db5e4:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   db5f4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   db604:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   db614:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   db624:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   db634:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   db644:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   db654:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   db664:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   db674:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   db684:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   db694:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   db6a4:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   db6b4:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   db6c4:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   db6d4:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   db6e4:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   db6f4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   db704:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   db714:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   db724:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   db734:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   db744:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   db754:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   db764:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   db774:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   db784:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   db794:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   db7a4:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   db7b4:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   db7c4:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   db7d4:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   db7e4:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   db7f4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   db804:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   db814:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   db824:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   db834:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   db844:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   db854:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   db864:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   db874:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   db884:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   db894:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   db8a4:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   db8b4:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   db8c4:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   db8d4:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   db8e4:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   db8f4:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   db904:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   db914:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   db924:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   db934:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   db944:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   db954:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   db964:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   db974:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   db984:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   db994:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   db9a4:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   db9b4:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000db9c4 <_ZTV12Adafruit_GFX>:
	...
   db9d4:	70bd 000d 7c79 000d 40a5 000d 6ac5 000d     .p..y|...@...j..
   db9e4:	6ac7 000d 6af9 000d 6ad5 000d 6ae7 000d     .j...j...j...j..
   db9f4:	6a09 000d 6ac5 000d 6cf1 000d 6c6b 000d     .j...j...l..kl..
   dba04:	6b11 000d 6b4f 000d 6b89 000d 6bcf 000d     .k..Ok...k...k..
   dba14:	6c6d 000d 6beb 000d                         ml...k..

000dba1c <_ZTV15Adafruit_SH110X>:
	...
   dba24:	40a5 000d 40a5 000d 70bd 000d 7c79 000d     .@...@...p..y|..
   dba34:	669b 000d 6ac5 000d 6ac7 000d 6af9 000d     .f...j...j...j..
   dba44:	6ad5 000d 6ae7 000d 6a09 000d 6ac5 000d     .j...j...j...j..
   dba54:	6cf1 000d 6897 000d 6b11 000d 6b4f 000d     .l...h...k..Ok..
   dba64:	6b89 000d 6bcf 000d 6c6d 000d 6beb 000d     .k...k..ml...k..
   dba74:	71cb 000d                                   .q..

000dba78 <_ZL12splash2_data>:
   dba78:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   dba88:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   dba98:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   dbab4:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   dbac4:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   dbad4:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   dbae4:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   dbaf4:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   dbb04:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   dbb14:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   dbb24:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   dbb34:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   dbb44:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   dbb54:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   dbb64:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   dbb74:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   dbb84:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   dbb94:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   dbba4:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   dbbb4:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   dbbc4:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   dbbd4:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   dbbe4:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   dbbf4:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   dbc0c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   dbc1c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   dbc2c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   dbc3c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   dbc4c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000dbc58 <_ZTV15Adafruit_SH1107>:
	...
   dbc60:	7369 000d 737d 000d 70bd 000d 7c79 000d     is..}s...p..y|..
   dbc70:	669b 000d 6ac5 000d 6ac7 000d 6af9 000d     .f...j...j...j..
   dbc80:	6ad5 000d 6ae7 000d 6a09 000d 6ac5 000d     .j...j...j...j..
   dbc90:	6cf1 000d 6897 000d 6b11 000d 6b4f 000d     .l...h...k..Ok..
   dbca0:	6b89 000d 6bcf 000d 6c6d 000d 6beb 000d     .k...k..ml...k..
   dbcb0:	71cb 000d                                   .q..

000dbcb4 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   dbcb4:	00d3 7fa8                                   ....

000dbcb8 <_ZZN15Adafruit_SH11075beginEhbE4init>:
   dbcb8:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
   dbcc8:	35db 3fa8 a6a4 0000                         .5.?....

000dbcd0 <_ZTVN5spark13EthernetClassE>:
	...
   dbcd8:	7aa3 000d 7a99 000d 7a8f 000d 7a85 000d     .z...z...z...z..
   dbce8:	7a79 000d 7a6d 000d 8607 000d 860f 000d     yz..mz..........
   dbcf8:	7a61 000d 7a59 000d 7a4f 000d 7a45 000d     az..Yz..Oz..Ez..
   dbd08:	863f 000d                                   ?...

000dbd0c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dbd0c:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   dbd1c:	766f 0066 7061 0070 5925 252d 2d6d 6425     ovf.app.%Y-%m-%d
   dbd2c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   dbd3c:	6d69 0065                                   ime.

000dbd40 <_ZTV9IPAddress>:
	...
   dbd48:	80fd 000d 80ed 000d 80ef 000d               ............

000dbd54 <_ZTV9USBSerial>:
	...
   dbd5c:	81d5 000d 823d 000d 8213 000d 7c79 000d     ....=.......y|..
   dbd6c:	8205 000d 81d7 000d 81e7 000d 8237 000d     ............7...
   dbd7c:	81f7 000d 81cf 000d                         ........

000dbd84 <_ZTVN5spark13CellularClassE>:
	...
   dbd8c:	839b 000d 8391 000d 8387 000d 833d 000d     ............=...
   dbd9c:	837b 000d 836f 000d 8607 000d 860f 000d     {...o...........
   dbdac:	8363 000d 835b 000d 8351 000d 8347 000d     c...[...Q...G...
   dbdbc:	863f 000d                                   ?...

000dbdc0 <_ZTV11USARTSerial>:
	...
   dbdc8:	83d5 000d 8443 000d 841b 000d 7c79 000d     ....C.......y|..
   dbdd8:	83eb 000d 8407 000d 83f9 000d 8415 000d     ................
   dbde8:	83d7 000d 83dd 000d                         ........

000dbdf0 <_ZTV7TwoWire>:
	...
   dbdf8:	84c9 000d 8513 000d 84eb 000d 84cb 000d     ................
   dbe08:	84f3 000d 84fb 000d 8503 000d 850b 000d     ................

000dbe18 <_ZTVN5spark12NetworkClassE>:
	...
   dbe20:	85c7 000d 85d1 000d 85db 000d 85e5 000d     ................
   dbe30:	85ef 000d 85fb 000d 8607 000d 860f 000d     ................
   dbe40:	8617 000d 8623 000d 862b 000d 8635 000d     ....#...+...5...
   dbe50:	863f 000d                                   ?...

000dbe54 <_ZSt7nothrow>:
   dbe54:	0000 0000 6f70 0077 0000 0000               ....pow.....

000dbe60 <TWO52>:
   dbe60:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000dbe70 <link_const_variable_data_end>:
   dbe70:	000d46dd 	.word	0x000d46dd
   dbe74:	000d7aad 	.word	0x000d7aad
   dbe78:	000d7c45 	.word	0x000d7c45
   dbe7c:	000d7c69 	.word	0x000d7c69
   dbe80:	000d7f65 	.word	0x000d7f65
   dbe84:	000d7f75 	.word	0x000d7f75
   dbe88:	000d7fa9 	.word	0x000d7fa9
   dbe8c:	000d83a5 	.word	0x000d83a5
   dbe90:	000d8711 	.word	0x000d8711

000dbe94 <link_constructors_end>:
	...
