
z:/Personal/Electronics/particle/fram_i2c_display_bme280_9dof/target/2.2.0/boron/fram_i2c_display_bme280_9dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009fb0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000ddfd0  000ddfd0  0000dfd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ddfd8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003e3d8  000ddfdc  0001e3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003a0  2003e450  2003e450  0002e450  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000de054  000de054  0002e054  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000de07c  000de07c  0002e07c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001e4466  00000000  00000000  0002e080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001d08e  00000000  00000000  002124e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00031582  00000000  00000000  0022f574  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002ab0  00000000  00000000  00260af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000075a8  00000000  00000000  002635a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00043337  00000000  00000000  0026ab4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004c2e2  00000000  00000000  002ade85  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010ca60  00000000  00000000  002fa167  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00008120  00000000  00000000  00406bc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f008 fc1b 	bl	dc86c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f008 fc23 	bl	dc888 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e3d8 	.word	0x2003e3d8
   d404c:	000ddfdc 	.word	0x000ddfdc
   d4050:	2003e450 	.word	0x2003e450
   d4054:	2003e450 	.word	0x2003e450
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fb8f 	bl	d8784 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000ddfa0 	.word	0x000ddfa0
   d4080:	000ddfc4 	.word	0x000ddfc4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b992 	b.w	d53ac <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 ff3d 	bl	d4f08 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 bb2f 	b.w	d86f4 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b811 	b.w	d80bc <malloc>

000d409a <_Znaj>:
   d409a:	f004 b80f 	b.w	d80bc <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b815 	b.w	d80cc <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 ff72 	bl	d7f94 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7cb5 	.word	0x000d7cb5

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z12isr_rotationv>:
else
Serial.println("N");
} 

// This is the function that the interrupt calls to increment the rotation count
void isr_rotation () {
   d40c8:	b510      	push	{r4, lr}

if ((millis() - ContactBounceTime) > 15 ) { // debounce the switch contact.
   d40ca:	4c07      	ldr	r4, [pc, #28]	; (d40e8 <_Z12isr_rotationv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40cc:	f003 fdfa 	bl	d7cc4 <HAL_Timer_Get_Milli_Seconds>
   d40d0:	6823      	ldr	r3, [r4, #0]
   d40d2:	1ac0      	subs	r0, r0, r3
   d40d4:	280f      	cmp	r0, #15
   d40d6:	d906      	bls.n	d40e6 <_Z12isr_rotationv+0x1e>
Rotations++;
   d40d8:	4a04      	ldr	r2, [pc, #16]	; (d40ec <_Z12isr_rotationv+0x24>)
   d40da:	6813      	ldr	r3, [r2, #0]
   d40dc:	3301      	adds	r3, #1
   d40de:	6013      	str	r3, [r2, #0]
   d40e0:	f003 fdf0 	bl	d7cc4 <HAL_Timer_Get_Milli_Seconds>
ContactBounceTime = millis();
   d40e4:	6020      	str	r0, [r4, #0]
}

}
   d40e6:	bd10      	pop	{r4, pc}
   d40e8:	2003e454 	.word	0x2003e454
   d40ec:	2003e460 	.word	0x2003e460

000d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d40f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d40f2:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d40f4:	4607      	mov	r7, r0
   d40f6:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d40f8:	da0c      	bge.n	d4114 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
   d40fa:	2a0a      	cmp	r2, #10
   d40fc:	d10a      	bne.n	d4114 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d40fe:	212d      	movs	r1, #45	; 0x2d
   d4100:	f004 f94a 	bl	d8398 <_ZN5Print5printEc>
            val = -n;
   d4104:	4261      	negs	r1, r4
            t = print('-');
   d4106:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4108:	b2f2      	uxtb	r2, r6
   d410a:	4638      	mov	r0, r7
   d410c:	f004 f963 	bl	d83d6 <_ZN5Print11printNumberEmh>
    }
}
   d4110:	4428      	add	r0, r5
   d4112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d4114:	4621      	mov	r1, r4
        size_t t = 0;
   d4116:	2500      	movs	r5, #0
   d4118:	e7f6      	b.n	d4108 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x18>
	...

000d411c <_Z11printValuesv>:
void printValues() {
   d411c:	b538      	push	{r3, r4, r5, lr}
    Serial.print("\n\nTemperature = ");
   d411e:	f004 fc39 	bl	d8994 <_Z16_fetch_usbserialv>
   d4122:	4936      	ldr	r1, [pc, #216]	; (d41fc <_Z11printValuesv+0xe0>)
    Serial.print(bme.readTemperature()*1.8F + 32.);
   d4124:	4c36      	ldr	r4, [pc, #216]	; (d4200 <_Z11printValuesv+0xe4>)
    Serial.print("\n\nTemperature = ");
   d4126:	f004 f933 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature()*1.8F + 32.);
   d412a:	f004 fc33 	bl	d8994 <_Z16_fetch_usbserialv>
   d412e:	4605      	mov	r5, r0
   d4130:	4620      	mov	r0, r4
   d4132:	f001 fcfd 	bl	d5b30 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4136:	eddf 7a33 	vldr	s15, [pc, #204]	; d4204 <_Z11printValuesv+0xe8>
   d413a:	ee60 7a27 	vmul.f32	s15, s0, s15
   d413e:	ee17 0a90 	vmov	r0, s15
   d4142:	f007 fd2b 	bl	dbb9c <__aeabi_f2d>
   d4146:	4b30      	ldr	r3, [pc, #192]	; (d4208 <_Z11printValuesv+0xec>)
   d4148:	2200      	movs	r2, #0
   d414a:	f007 fbc9 	bl	db8e0 <__adddf3>
   d414e:	ec41 0b10 	vmov	d0, r0, r1
   d4152:	2102      	movs	r1, #2
   d4154:	4628      	mov	r0, r5
   d4156:	f004 fa34 	bl	d85c2 <_ZN5Print5printEdi>
    Serial.println(" F");
   d415a:	f004 fc1b 	bl	d8994 <_Z16_fetch_usbserialv>
   d415e:	492b      	ldr	r1, [pc, #172]	; (d420c <_Z11printValuesv+0xf0>)
   d4160:	f004 f92d 	bl	d83be <_ZN5Print7printlnEPKc>
    Serial.print("Pressure = ");
   d4164:	f004 fc16 	bl	d8994 <_Z16_fetch_usbserialv>
   d4168:	4929      	ldr	r1, [pc, #164]	; (d4210 <_Z11printValuesv+0xf4>)
   d416a:	f004 f911 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(bme.readPressure() / 101325.0F * 760.0F);
   d416e:	f004 fc11 	bl	d8994 <_Z16_fetch_usbserialv>
   d4172:	4605      	mov	r5, r0
   d4174:	4620      	mov	r0, r4
   d4176:	f001 fd09 	bl	d5b8c <_ZN15Adafruit_BME28012readPressureEv>
   d417a:	eddf 7a26 	vldr	s15, [pc, #152]	; d4214 <_Z11printValuesv+0xf8>
   d417e:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d4182:	2102      	movs	r1, #2
   d4184:	4628      	mov	r0, r5
   d4186:	ed9f 0a24 	vldr	s0, [pc, #144]	; d4218 <_Z11printValuesv+0xfc>
   d418a:	ee27 0a00 	vmul.f32	s0, s14, s0
   d418e:	f004 fa09 	bl	d85a4 <_ZN5Print5printEfi>
    Serial.println(" mmHg");
   d4192:	f004 fbff 	bl	d8994 <_Z16_fetch_usbserialv>
   d4196:	4921      	ldr	r1, [pc, #132]	; (d421c <_Z11printValuesv+0x100>)
   d4198:	f004 f911 	bl	d83be <_ZN5Print7printlnEPKc>
    Serial.print("Approx. Altitude = ");
   d419c:	f004 fbfa 	bl	d8994 <_Z16_fetch_usbserialv>
   d41a0:	491f      	ldr	r1, [pc, #124]	; (d4220 <_Z11printValuesv+0x104>)
   d41a2:	f004 f8f5 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d41a6:	f004 fbf5 	bl	d8994 <_Z16_fetch_usbserialv>
   d41aa:	ed9f 0a1e 	vldr	s0, [pc, #120]	; d4224 <_Z11printValuesv+0x108>
   d41ae:	4605      	mov	r5, r0
   d41b0:	4620      	mov	r0, r4
   d41b2:	f001 fdc5 	bl	d5d40 <_ZN15Adafruit_BME28012readAltitudeEf>
   d41b6:	2102      	movs	r1, #2
   d41b8:	4628      	mov	r0, r5
   d41ba:	f004 f9f3 	bl	d85a4 <_ZN5Print5printEfi>
    Serial.println(" m");
   d41be:	f004 fbe9 	bl	d8994 <_Z16_fetch_usbserialv>
   d41c2:	4919      	ldr	r1, [pc, #100]	; (d4228 <_Z11printValuesv+0x10c>)
   d41c4:	f004 f8fb 	bl	d83be <_ZN5Print7printlnEPKc>
    Serial.print("Humidity = ");
   d41c8:	f004 fbe4 	bl	d8994 <_Z16_fetch_usbserialv>
   d41cc:	4917      	ldr	r1, [pc, #92]	; (d422c <_Z11printValuesv+0x110>)
   d41ce:	f004 f8df 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d41d2:	f004 fbdf 	bl	d8994 <_Z16_fetch_usbserialv>
   d41d6:	4605      	mov	r5, r0
   d41d8:	4620      	mov	r0, r4
   d41da:	f001 fe51 	bl	d5e80 <_ZN15Adafruit_BME28012readHumidityEv>
   d41de:	2102      	movs	r1, #2
   d41e0:	4628      	mov	r0, r5
   d41e2:	f004 f9df 	bl	d85a4 <_ZN5Print5printEfi>
    Serial.println(" %");
   d41e6:	f004 fbd5 	bl	d8994 <_Z16_fetch_usbserialv>
   d41ea:	4911      	ldr	r1, [pc, #68]	; (d4230 <_Z11printValuesv+0x114>)
   d41ec:	f004 f8e7 	bl	d83be <_ZN5Print7printlnEPKc>
    Serial.println();
   d41f0:	f004 fbd0 	bl	d8994 <_Z16_fetch_usbserialv>
}
   d41f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println();
   d41f8:	f004 b8d5 	b.w	d83a6 <_ZN5Print7printlnEv>
   d41fc:	000dc9f8 	.word	0x000dc9f8
   d4200:	2003e474 	.word	0x2003e474
   d4204:	3fe66666 	.word	0x3fe66666
   d4208:	40400000 	.word	0x40400000
   d420c:	000dca09 	.word	0x000dca09
   d4210:	000dca0c 	.word	0x000dca0c
   d4214:	47c5e680 	.word	0x47c5e680
   d4218:	443e0000 	.word	0x443e0000
   d421c:	000dca18 	.word	0x000dca18
   d4220:	000dca1e 	.word	0x000dca1e
   d4224:	447d5000 	.word	0x447d5000
   d4228:	000dca32 	.word	0x000dca32
   d422c:	000dca35 	.word	0x000dca35
   d4230:	000dca41 	.word	0x000dca41

000d4234 <_Z20displaySensorDetailsv>:
{
   d4234:	b530      	push	{r4, r5, lr}
   d4236:	b08b      	sub	sp, #44	; 0x2c
  bno.getSensor(&sensor);
   d4238:	4669      	mov	r1, sp
   d423a:	4842      	ldr	r0, [pc, #264]	; (d4344 <_Z20displaySensorDetailsv+0x110>)
   d423c:	f002 fa1e 	bl	d667c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
  Serial.println("------------------------------------");
   d4240:	f004 fba8 	bl	d8994 <_Z16_fetch_usbserialv>
   d4244:	4940      	ldr	r1, [pc, #256]	; (d4348 <_Z20displaySensorDetailsv+0x114>)
   d4246:	f004 f8ba 	bl	d83be <_ZN5Print7printlnEPKc>
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
   d424a:	f004 fba3 	bl	d8994 <_Z16_fetch_usbserialv>
   d424e:	493f      	ldr	r1, [pc, #252]	; (d434c <_Z20displaySensorDetailsv+0x118>)
   d4250:	f004 f89e 	bl	d8390 <_ZN5Print5printEPKc>
   d4254:	f004 fb9e 	bl	d8994 <_Z16_fetch_usbserialv>
   d4258:	4669      	mov	r1, sp
   d425a:	f004 f8b0 	bl	d83be <_ZN5Print7printlnEPKc>
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
   d425e:	f004 fb99 	bl	d8994 <_Z16_fetch_usbserialv>
   d4262:	493b      	ldr	r1, [pc, #236]	; (d4350 <_Z20displaySensorDetailsv+0x11c>)
   d4264:	f004 f894 	bl	d8390 <_ZN5Print5printEPKc>
   d4268:	f004 fb94 	bl	d8994 <_Z16_fetch_usbserialv>
   d426c:	9c03      	ldr	r4, [sp, #12]
        if (n < 0 && base == 10) {
   d426e:	2c00      	cmp	r4, #0
   d4270:	4605      	mov	r5, r0
   d4272:	da63      	bge.n	d433c <_Z20displaySensorDetailsv+0x108>
            t = print('-');
   d4274:	212d      	movs	r1, #45	; 0x2d
   d4276:	f004 f88f 	bl	d8398 <_ZN5Print5printEc>
            val = -n;
   d427a:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d427c:	220a      	movs	r2, #10
   d427e:	4628      	mov	r0, r5
   d4280:	f004 f8a9 	bl	d83d6 <_ZN5Print11printNumberEmh>
        n += println();
   d4284:	4628      	mov	r0, r5
   d4286:	f004 f88e 	bl	d83a6 <_ZN5Print7printlnEv>
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
   d428a:	f004 fb83 	bl	d8994 <_Z16_fetch_usbserialv>
   d428e:	4931      	ldr	r1, [pc, #196]	; (d4354 <_Z20displaySensorDetailsv+0x120>)
   d4290:	f004 f87e 	bl	d8390 <_ZN5Print5printEPKc>
   d4294:	f004 fb7e 	bl	d8994 <_Z16_fetch_usbserialv>
   d4298:	9c04      	ldr	r4, [sp, #16]
        if (n < 0 && base == 10) {
   d429a:	2c00      	cmp	r4, #0
   d429c:	4605      	mov	r5, r0
   d429e:	da4f      	bge.n	d4340 <_Z20displaySensorDetailsv+0x10c>
            t = print('-');
   d42a0:	212d      	movs	r1, #45	; 0x2d
   d42a2:	f004 f879 	bl	d8398 <_ZN5Print5printEc>
            val = -n;
   d42a6:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d42a8:	220a      	movs	r2, #10
   d42aa:	4628      	mov	r0, r5
   d42ac:	f004 f893 	bl	d83d6 <_ZN5Print11printNumberEmh>
        n += println();
   d42b0:	4628      	mov	r0, r5
   d42b2:	f004 f878 	bl	d83a6 <_ZN5Print7printlnEv>
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" xxx");
   d42b6:	f004 fb6d 	bl	d8994 <_Z16_fetch_usbserialv>
   d42ba:	4927      	ldr	r1, [pc, #156]	; (d4358 <_Z20displaySensorDetailsv+0x124>)
   d42bc:	f004 f868 	bl	d8390 <_ZN5Print5printEPKc>
   d42c0:	f004 fb68 	bl	d8994 <_Z16_fetch_usbserialv>
   d42c4:	ed9d 0a06 	vldr	s0, [sp, #24]
   d42c8:	2102      	movs	r1, #2
   d42ca:	f004 f96b 	bl	d85a4 <_ZN5Print5printEfi>
   d42ce:	f004 fb61 	bl	d8994 <_Z16_fetch_usbserialv>
   d42d2:	4922      	ldr	r1, [pc, #136]	; (d435c <_Z20displaySensorDetailsv+0x128>)
   d42d4:	f004 f873 	bl	d83be <_ZN5Print7printlnEPKc>
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" xxx");
   d42d8:	f004 fb5c 	bl	d8994 <_Z16_fetch_usbserialv>
   d42dc:	4920      	ldr	r1, [pc, #128]	; (d4360 <_Z20displaySensorDetailsv+0x12c>)
   d42de:	f004 f857 	bl	d8390 <_ZN5Print5printEPKc>
   d42e2:	f004 fb57 	bl	d8994 <_Z16_fetch_usbserialv>
   d42e6:	ed9d 0a07 	vldr	s0, [sp, #28]
   d42ea:	2102      	movs	r1, #2
   d42ec:	f004 f95a 	bl	d85a4 <_ZN5Print5printEfi>
   d42f0:	f004 fb50 	bl	d8994 <_Z16_fetch_usbserialv>
   d42f4:	4919      	ldr	r1, [pc, #100]	; (d435c <_Z20displaySensorDetailsv+0x128>)
   d42f6:	f004 f862 	bl	d83be <_ZN5Print7printlnEPKc>
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" xxx");
   d42fa:	f004 fb4b 	bl	d8994 <_Z16_fetch_usbserialv>
   d42fe:	4919      	ldr	r1, [pc, #100]	; (d4364 <_Z20displaySensorDetailsv+0x130>)
   d4300:	f004 f846 	bl	d8390 <_ZN5Print5printEPKc>
   d4304:	f004 fb46 	bl	d8994 <_Z16_fetch_usbserialv>
   d4308:	ed9d 0a08 	vldr	s0, [sp, #32]
   d430c:	2102      	movs	r1, #2
   d430e:	f004 f949 	bl	d85a4 <_ZN5Print5printEfi>
   d4312:	f004 fb3f 	bl	d8994 <_Z16_fetch_usbserialv>
   d4316:	4911      	ldr	r1, [pc, #68]	; (d435c <_Z20displaySensorDetailsv+0x128>)
   d4318:	f004 f851 	bl	d83be <_ZN5Print7printlnEPKc>
  Serial.println("------------------------------------");
   d431c:	f004 fb3a 	bl	d8994 <_Z16_fetch_usbserialv>
   d4320:	4909      	ldr	r1, [pc, #36]	; (d4348 <_Z20displaySensorDetailsv+0x114>)
   d4322:	f004 f84c 	bl	d83be <_ZN5Print7printlnEPKc>
  Serial.println("");
   d4326:	f004 fb35 	bl	d8994 <_Z16_fetch_usbserialv>
   d432a:	490f      	ldr	r1, [pc, #60]	; (d4368 <_Z20displaySensorDetailsv+0x134>)
   d432c:	f004 f847 	bl	d83be <_ZN5Print7printlnEPKc>
  delay(500);
   d4330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4334:	f004 f9b2 	bl	d869c <delay>
}
   d4338:	b00b      	add	sp, #44	; 0x2c
   d433a:	bd30      	pop	{r4, r5, pc}
            val = n;
   d433c:	4621      	mov	r1, r4
   d433e:	e79d      	b.n	d427c <_Z20displaySensorDetailsv+0x48>
   d4340:	4621      	mov	r1, r4
   d4342:	e7b1      	b.n	d42a8 <_Z20displaySensorDetailsv+0x74>
   d4344:	2003e4b8 	.word	0x2003e4b8
   d4348:	000dca44 	.word	0x000dca44
   d434c:	000dca69 	.word	0x000dca69
   d4350:	000dca78 	.word	0x000dca78
   d4354:	000dca87 	.word	0x000dca87
   d4358:	000dca96 	.word	0x000dca96
   d435c:	000dcaa5 	.word	0x000dcaa5
   d4360:	000dcaaa 	.word	0x000dcaaa
   d4364:	000dcab9 	.word	0x000dcab9
   d4368:	000dcbb3 	.word	0x000dcbb3

000d436c <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>:
{
   d436c:	b538      	push	{r3, r4, r5, lr}
   d436e:	4604      	mov	r4, r0
    Serial.println("\nCalibration offsets \n");
   d4370:	f004 fb10 	bl	d8994 <_Z16_fetch_usbserialv>
   d4374:	494c      	ldr	r1, [pc, #304]	; (d44a8 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x13c>)
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   d4376:	4d4d      	ldr	r5, [pc, #308]	; (d44ac <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x140>)
    Serial.println("\nCalibration offsets \n");
   d4378:	f004 f821 	bl	d83be <_ZN5Print7printlnEPKc>
    Serial.print("Accelerometer: ");
   d437c:	f004 fb0a 	bl	d8994 <_Z16_fetch_usbserialv>
   d4380:	494b      	ldr	r1, [pc, #300]	; (d44b0 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x144>)
   d4382:	f004 f805 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   d4386:	f004 fb05 	bl	d8994 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d438a:	220a      	movs	r2, #10
   d438c:	f9b4 1000 	ldrsh.w	r1, [r4]
   d4390:	f7ff feae 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4394:	f004 fafe 	bl	d8994 <_Z16_fetch_usbserialv>
   d4398:	4629      	mov	r1, r5
   d439a:	f003 fff9 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_y); Serial.print(" ");
   d439e:	f004 faf9 	bl	d8994 <_Z16_fetch_usbserialv>
   d43a2:	220a      	movs	r2, #10
   d43a4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   d43a8:	f7ff fea2 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43ac:	f004 faf2 	bl	d8994 <_Z16_fetch_usbserialv>
   d43b0:	4629      	mov	r1, r5
   d43b2:	f003 ffed 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_z); Serial.print(" ");
   d43b6:	f004 faed 	bl	d8994 <_Z16_fetch_usbserialv>
   d43ba:	220a      	movs	r2, #10
   d43bc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   d43c0:	f7ff fe96 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43c4:	f004 fae6 	bl	d8994 <_Z16_fetch_usbserialv>
   d43c8:	4629      	mov	r1, r5
   d43ca:	f003 ffe1 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print("\nGyro: ");
   d43ce:	f004 fae1 	bl	d8994 <_Z16_fetch_usbserialv>
   d43d2:	4938      	ldr	r1, [pc, #224]	; (d44b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x148>)
   d43d4:	f003 ffdc 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_x); Serial.print(" ");
   d43d8:	f004 fadc 	bl	d8994 <_Z16_fetch_usbserialv>
   d43dc:	220a      	movs	r2, #10
   d43de:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   d43e2:	f7ff fe85 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43e6:	f004 fad5 	bl	d8994 <_Z16_fetch_usbserialv>
   d43ea:	4629      	mov	r1, r5
   d43ec:	f003 ffd0 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_y); Serial.print(" ");
   d43f0:	f004 fad0 	bl	d8994 <_Z16_fetch_usbserialv>
   d43f4:	220a      	movs	r2, #10
   d43f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   d43fa:	f7ff fe79 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43fe:	f004 fac9 	bl	d8994 <_Z16_fetch_usbserialv>
   d4402:	4629      	mov	r1, r5
   d4404:	f003 ffc4 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_z); Serial.print(" ");
   d4408:	f004 fac4 	bl	d8994 <_Z16_fetch_usbserialv>
   d440c:	220a      	movs	r2, #10
   d440e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4412:	f7ff fe6d 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4416:	f004 fabd 	bl	d8994 <_Z16_fetch_usbserialv>
   d441a:	4629      	mov	r1, r5
   d441c:	f003 ffb8 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print("\nMag: ");
   d4420:	f004 fab8 	bl	d8994 <_Z16_fetch_usbserialv>
   d4424:	4924      	ldr	r1, [pc, #144]	; (d44b8 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x14c>)
   d4426:	f003 ffb3 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_x); Serial.print(" ");
   d442a:	f004 fab3 	bl	d8994 <_Z16_fetch_usbserialv>
   d442e:	220a      	movs	r2, #10
   d4430:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   d4434:	f7ff fe5c 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4438:	f004 faac 	bl	d8994 <_Z16_fetch_usbserialv>
   d443c:	4629      	mov	r1, r5
   d443e:	f003 ffa7 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_y); Serial.print(" ");
   d4442:	f004 faa7 	bl	d8994 <_Z16_fetch_usbserialv>
   d4446:	220a      	movs	r2, #10
   d4448:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d444c:	f7ff fe50 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4450:	f004 faa0 	bl	d8994 <_Z16_fetch_usbserialv>
   d4454:	4629      	mov	r1, r5
   d4456:	f003 ff9b 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_z); Serial.print(" ");
   d445a:	f004 fa9b 	bl	d8994 <_Z16_fetch_usbserialv>
   d445e:	220a      	movs	r2, #10
   d4460:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d4464:	f7ff fe44 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4468:	f004 fa94 	bl	d8994 <_Z16_fetch_usbserialv>
   d446c:	4629      	mov	r1, r5
   d446e:	f003 ff8f 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print("\nAccel Radius: ");
   d4472:	f004 fa8f 	bl	d8994 <_Z16_fetch_usbserialv>
   d4476:	4911      	ldr	r1, [pc, #68]	; (d44bc <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x150>)
   d4478:	f003 ff8a 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_radius);
   d447c:	f004 fa8a 	bl	d8994 <_Z16_fetch_usbserialv>
   d4480:	220a      	movs	r2, #10
   d4482:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
   d4486:	f7ff fe33 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
    Serial.print("\nMag Radius: ");
   d448a:	f004 fa83 	bl	d8994 <_Z16_fetch_usbserialv>
   d448e:	490c      	ldr	r1, [pc, #48]	; (d44c0 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x154>)
   d4490:	f003 ff7e 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_radius);
   d4494:	f004 fa7e 	bl	d8994 <_Z16_fetch_usbserialv>
   d4498:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
   d449c:	220a      	movs	r2, #10
}
   d449e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d44a2:	f7ff be25 	b.w	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d44a6:	bf00      	nop
   d44a8:	000dcac8 	.word	0x000dcac8
   d44ac:	000dca76 	.word	0x000dca76
   d44b0:	000dcadf 	.word	0x000dcadf
   d44b4:	000dcaef 	.word	0x000dcaef
   d44b8:	000dcaf7 	.word	0x000dcaf7
   d44bc:	000dcafe 	.word	0x000dcafe
   d44c0:	000dcb0e 	.word	0x000dcb0e

000d44c4 <_Z10getHeadingi>:
if(direction < 22)
   d44c4:	2815      	cmp	r0, #21
void getHeading(int direction) {
   d44c6:	b508      	push	{r3, lr}
if(direction < 22)
   d44c8:	dc06      	bgt.n	d44d8 <_Z10getHeadingi+0x14>
Serial.println("N");
   d44ca:	f004 fa63 	bl	d8994 <_Z16_fetch_usbserialv>
   d44ce:	4918      	ldr	r1, [pc, #96]	; (d4530 <_Z10getHeadingi+0x6c>)
} 
   d44d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Serial.println("NW");
   d44d4:	f003 bf73 	b.w	d83be <_ZN5Print7printlnEPKc>
else if (direction < 67)
   d44d8:	2842      	cmp	r0, #66	; 0x42
   d44da:	dc03      	bgt.n	d44e4 <_Z10getHeadingi+0x20>
Serial.println("NE");
   d44dc:	f004 fa5a 	bl	d8994 <_Z16_fetch_usbserialv>
   d44e0:	4914      	ldr	r1, [pc, #80]	; (d4534 <_Z10getHeadingi+0x70>)
   d44e2:	e7f5      	b.n	d44d0 <_Z10getHeadingi+0xc>
else if (direction < 112)
   d44e4:	286f      	cmp	r0, #111	; 0x6f
   d44e6:	dc03      	bgt.n	d44f0 <_Z10getHeadingi+0x2c>
Serial.println("E");
   d44e8:	f004 fa54 	bl	d8994 <_Z16_fetch_usbserialv>
   d44ec:	4912      	ldr	r1, [pc, #72]	; (d4538 <_Z10getHeadingi+0x74>)
   d44ee:	e7ef      	b.n	d44d0 <_Z10getHeadingi+0xc>
else if (direction < 157)
   d44f0:	289c      	cmp	r0, #156	; 0x9c
   d44f2:	dc03      	bgt.n	d44fc <_Z10getHeadingi+0x38>
Serial.println("SE");
   d44f4:	f004 fa4e 	bl	d8994 <_Z16_fetch_usbserialv>
   d44f8:	4910      	ldr	r1, [pc, #64]	; (d453c <_Z10getHeadingi+0x78>)
   d44fa:	e7e9      	b.n	d44d0 <_Z10getHeadingi+0xc>
else if (direction < 212)
   d44fc:	28d3      	cmp	r0, #211	; 0xd3
   d44fe:	dc03      	bgt.n	d4508 <_Z10getHeadingi+0x44>
Serial.println("S");
   d4500:	f004 fa48 	bl	d8994 <_Z16_fetch_usbserialv>
   d4504:	490e      	ldr	r1, [pc, #56]	; (d4540 <_Z10getHeadingi+0x7c>)
   d4506:	e7e3      	b.n	d44d0 <_Z10getHeadingi+0xc>
else if (direction < 247)
   d4508:	28f6      	cmp	r0, #246	; 0xf6
   d450a:	dc03      	bgt.n	d4514 <_Z10getHeadingi+0x50>
Serial.println("SW");
   d450c:	f004 fa42 	bl	d8994 <_Z16_fetch_usbserialv>
   d4510:	490c      	ldr	r1, [pc, #48]	; (d4544 <_Z10getHeadingi+0x80>)
   d4512:	e7dd      	b.n	d44d0 <_Z10getHeadingi+0xc>
else if (direction < 292)
   d4514:	f5b0 7f92 	cmp.w	r0, #292	; 0x124
   d4518:	da03      	bge.n	d4522 <_Z10getHeadingi+0x5e>
Serial.println("W");
   d451a:	f004 fa3b 	bl	d8994 <_Z16_fetch_usbserialv>
   d451e:	490a      	ldr	r1, [pc, #40]	; (d4548 <_Z10getHeadingi+0x84>)
   d4520:	e7d6      	b.n	d44d0 <_Z10getHeadingi+0xc>
else if (direction < 337)
   d4522:	f5b0 7fa8 	cmp.w	r0, #336	; 0x150
   d4526:	dcd0      	bgt.n	d44ca <_Z10getHeadingi+0x6>
Serial.println("NW");
   d4528:	f004 fa34 	bl	d8994 <_Z16_fetch_usbserialv>
   d452c:	4907      	ldr	r1, [pc, #28]	; (d454c <_Z10getHeadingi+0x88>)
   d452e:	e7cf      	b.n	d44d0 <_Z10getHeadingi+0xc>
   d4530:	000dcb1c 	.word	0x000dcb1c
   d4534:	000dcb1e 	.word	0x000dcb1e
   d4538:	000dcb1f 	.word	0x000dcb1f
   d453c:	000dcb21 	.word	0x000dcb21
   d4540:	000dcb24 	.word	0x000dcb24
   d4544:	000dcb26 	.word	0x000dcb26
   d4548:	000dcb2a 	.word	0x000dcb2a
   d454c:	000dcb29 	.word	0x000dcb29

000d4550 <_ZN5Print5printIhLi0EEEjT_i>:
    if (base == 0) {
   d4550:	b912      	cbnz	r2, d4558 <_ZN5Print5printIhLi0EEEjT_i+0x8>
        return write(n);
   d4552:	6803      	ldr	r3, [r0, #0]
   d4554:	689b      	ldr	r3, [r3, #8]
   d4556:	4718      	bx	r3
        return printNumber(val, base) + t;
   d4558:	b2d2      	uxtb	r2, r2
   d455a:	f003 bf3c 	b.w	d83d6 <_ZN5Print11printNumberEmh>
	...

000d4560 <_Z16displayCalStatusv>:
{
   d4560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    system = gyro = accel = mag = 0;
   d4562:	2300      	movs	r3, #0
   d4564:	f88d 300f 	strb.w	r3, [sp, #15]
   d4568:	f88d 300e 	strb.w	r3, [sp, #14]
   d456c:	f88d 300d 	strb.w	r3, [sp, #13]
   d4570:	f88d 300c 	strb.w	r3, [sp, #12]
    bno.getCalibration(&system, &gyro, &accel, &mag);
   d4574:	f10d 030f 	add.w	r3, sp, #15
   d4578:	f10d 020d 	add.w	r2, sp, #13
   d457c:	a903      	add	r1, sp, #12
   d457e:	4823      	ldr	r0, [pc, #140]	; (d460c <_Z16displayCalStatusv+0xac>)
   d4580:	9300      	str	r3, [sp, #0]
   d4582:	f10d 030e 	add.w	r3, sp, #14
   d4586:	f002 f9f8 	bl	d697a <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
    Serial.print("\t");
   d458a:	f004 fa03 	bl	d8994 <_Z16_fetch_usbserialv>
   d458e:	4920      	ldr	r1, [pc, #128]	; (d4610 <_Z16displayCalStatusv+0xb0>)
   d4590:	f003 fefe 	bl	d8390 <_ZN5Print5printEPKc>
    if (!system)
   d4594:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4598:	b923      	cbnz	r3, d45a4 <_Z16displayCalStatusv+0x44>
        Serial.print("! ");
   d459a:	f004 f9fb 	bl	d8994 <_Z16_fetch_usbserialv>
   d459e:	491d      	ldr	r1, [pc, #116]	; (d4614 <_Z16displayCalStatusv+0xb4>)
   d45a0:	f003 fef6 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print("Sys:");
   d45a4:	f004 f9f6 	bl	d8994 <_Z16_fetch_usbserialv>
   d45a8:	491b      	ldr	r1, [pc, #108]	; (d4618 <_Z16displayCalStatusv+0xb8>)
   d45aa:	f003 fef1 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(system, DEC);
   d45ae:	f004 f9f1 	bl	d8994 <_Z16_fetch_usbserialv>
   d45b2:	220a      	movs	r2, #10
   d45b4:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d45b8:	f7ff ffca 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" G:");
   d45bc:	f004 f9ea 	bl	d8994 <_Z16_fetch_usbserialv>
   d45c0:	4916      	ldr	r1, [pc, #88]	; (d461c <_Z16displayCalStatusv+0xbc>)
   d45c2:	f003 fee5 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(gyro, DEC);
   d45c6:	f004 f9e5 	bl	d8994 <_Z16_fetch_usbserialv>
   d45ca:	220a      	movs	r2, #10
   d45cc:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d45d0:	f7ff ffbe 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" A:");
   d45d4:	f004 f9de 	bl	d8994 <_Z16_fetch_usbserialv>
   d45d8:	4911      	ldr	r1, [pc, #68]	; (d4620 <_Z16displayCalStatusv+0xc0>)
   d45da:	f003 fed9 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(accel, DEC);
   d45de:	f004 f9d9 	bl	d8994 <_Z16_fetch_usbserialv>
   d45e2:	220a      	movs	r2, #10
   d45e4:	f89d 100e 	ldrb.w	r1, [sp, #14]
   d45e8:	f7ff ffb2 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" M:");
   d45ec:	f004 f9d2 	bl	d8994 <_Z16_fetch_usbserialv>
   d45f0:	490c      	ldr	r1, [pc, #48]	; (d4624 <_Z16displayCalStatusv+0xc4>)
   d45f2:	f003 fecd 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.print(mag, DEC);
   d45f6:	f004 f9cd 	bl	d8994 <_Z16_fetch_usbserialv>
   d45fa:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d45fe:	220a      	movs	r2, #10
   d4600:	f7ff ffa6 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
}
   d4604:	b005      	add	sp, #20
   d4606:	f85d fb04 	ldr.w	pc, [sp], #4
   d460a:	bf00      	nop
   d460c:	2003e4b8 	.word	0x2003e4b8
   d4610:	000dcbb2 	.word	0x000dcbb2
   d4614:	000dcb2c 	.word	0x000dcb2c
   d4618:	000dcb2f 	.word	0x000dcb2f
   d461c:	000dcb34 	.word	0x000dcb34
   d4620:	000dcb38 	.word	0x000dcb38
   d4624:	000dcb3c 	.word	0x000dcb3c

000d4628 <_Z19get_compass_headingv>:

float get_compass_heading() {
   d4628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d462c:	ed2d 8b08 	vpush	{d8-d11}
   d4630:	b097      	sub	sp, #92	; 0x5c
  // put your main code here, to run repeatedly:
uint8_t system, gyro, accel, mg = 0;
bno.getCalibration(&system, &gyro, &accel, &mg);
   d4632:	4cd7      	ldr	r4, [pc, #860]	; (d4990 <_Z19get_compass_headingv+0x368>)
imu::Vector<3> acc =bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
imu::Vector<3> gyr =bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
imu::Vector<3> mag =bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
//measured value of tilt in x
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4634:	4fd7      	ldr	r7, [pc, #860]	; (d4994 <_Z19get_compass_headingv+0x36c>)
//measured value of tilt in y
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
//filtered value for tilt in y
phiFnew=.95*phiFold+.05*phiM;
   d4636:	f8df b39c 	ldr.w	fp, [pc, #924]	; d49d4 <_Z19get_compass_headingv+0x3ac>
//filtered value for tilt in x
thetaFnew=.95*thetaFold+.05*thetaM;
   d463a:	f8df a39c 	ldr.w	sl, [pc, #924]	; d49d8 <_Z19get_compass_headingv+0x3b0>
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;

thetaG=thetaG+gyr.y()*dt;
phiG=phiG-gyr.x()*dt;
 
phiRad=phi/360*(2*3.14);
   d463e:	ed9f 9ad6 	vldr	s18, [pc, #856]	; d4998 <_Z19get_compass_headingv+0x370>
uint8_t system, gyro, accel, mg = 0;
   d4642:	2300      	movs	r3, #0
   d4644:	f88d 300f 	strb.w	r3, [sp, #15]
bno.getCalibration(&system, &gyro, &accel, &mg);
   d4648:	f10d 030f 	add.w	r3, sp, #15
   d464c:	9300      	str	r3, [sp, #0]
   d464e:	f10d 020d 	add.w	r2, sp, #13
   d4652:	f10d 030e 	add.w	r3, sp, #14
   d4656:	a903      	add	r1, sp, #12
   d4658:	4620      	mov	r0, r4
   d465a:	f002 f98e 	bl	d697a <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
imu::Vector<3> acc =bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
   d465e:	4621      	mov	r1, r4
   d4660:	a804      	add	r0, sp, #16
   d4662:	2208      	movs	r2, #8
   d4664:	f002 fae4 	bl	d6c30 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> gyr =bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
   d4668:	4621      	mov	r1, r4
   d466a:	a80a      	add	r0, sp, #40	; 0x28
   d466c:	2214      	movs	r2, #20
   d466e:	f002 fadf 	bl	d6c30 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> mag =bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
   d4672:	4621      	mov	r1, r4
   d4674:	a810      	add	r0, sp, #64	; 0x40
   d4676:	220e      	movs	r2, #14
   d4678:	f002 fada 	bl	d6c30 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d467c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d4680:	a3b9      	add	r3, pc, #740	; (adr r3, d4968 <_Z19get_compass_headingv+0x340>)
   d4682:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4686:	f007 fc0b 	bl	dbea0 <__aeabi_ddiv>
   d468a:	a3b7      	add	r3, pc, #732	; (adr r3, d4968 <_Z19get_compass_headingv+0x340>)
   d468c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4690:	ec41 0b18 	vmov	d8, r0, r1
   d4694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d4698:	f007 fc02 	bl	dbea0 <__aeabi_ddiv>
   d469c:	eeb0 1a48 	vmov.f32	s2, s16
   d46a0:	eef0 1a68 	vmov.f32	s3, s17
   d46a4:	ec41 0b10 	vmov	d0, r0, r1
   d46a8:	f004 fd36 	bl	d9118 <atan2>
   d46ac:	ec53 2b10 	vmov	r2, r3, d0
   d46b0:	ee10 0a10 	vmov	r0, s0
   d46b4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   d46b8:	2200      	movs	r2, #0
   d46ba:	4bb8      	ldr	r3, [pc, #736]	; (d499c <_Z19get_compass_headingv+0x374>)
   d46bc:	f007 fac6 	bl	dbc4c <__aeabi_dmul>
   d46c0:	a3ab      	add	r3, pc, #684	; (adr r3, d4970 <_Z19get_compass_headingv+0x348>)
   d46c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46c6:	f007 fbeb 	bl	dbea0 <__aeabi_ddiv>
   d46ca:	4bb5      	ldr	r3, [pc, #724]	; (d49a0 <_Z19get_compass_headingv+0x378>)
   d46cc:	2200      	movs	r2, #0
   d46ce:	f007 fabd 	bl	dbc4c <__aeabi_dmul>
   d46d2:	f007 fdb3 	bl	dc23c <__aeabi_d2f>
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d46d6:	a3a4      	add	r3, pc, #656	; (adr r3, d4968 <_Z19get_compass_headingv+0x340>)
   d46d8:	e9d3 2300 	ldrd	r2, r3, [r3]
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d46dc:	6038      	str	r0, [r7, #0]
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d46de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d46e2:	f007 fbdd 	bl	dbea0 <__aeabi_ddiv>
   d46e6:	a3a0      	add	r3, pc, #640	; (adr r3, d4968 <_Z19get_compass_headingv+0x340>)
   d46e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46ec:	ec41 0b18 	vmov	d8, r0, r1
   d46f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d46f4:	f007 fbd4 	bl	dbea0 <__aeabi_ddiv>
   d46f8:	eeb0 1a48 	vmov.f32	s2, s16
   d46fc:	eef0 1a68 	vmov.f32	s3, s17
   d4700:	ec41 0b10 	vmov	d0, r0, r1
   d4704:	f004 fd08 	bl	d9118 <atan2>
   d4708:	ec53 2b10 	vmov	r2, r3, d0
   d470c:	ee10 0a10 	vmov	r0, s0
   d4710:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   d4714:	2200      	movs	r2, #0
   d4716:	4ba1      	ldr	r3, [pc, #644]	; (d499c <_Z19get_compass_headingv+0x374>)
   d4718:	f007 fa98 	bl	dbc4c <__aeabi_dmul>
   d471c:	a394      	add	r3, pc, #592	; (adr r3, d4970 <_Z19get_compass_headingv+0x348>)
   d471e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4722:	f007 fbbd 	bl	dbea0 <__aeabi_ddiv>
   d4726:	2200      	movs	r2, #0
   d4728:	4b9d      	ldr	r3, [pc, #628]	; (d49a0 <_Z19get_compass_headingv+0x378>)
   d472a:	f007 fa8f 	bl	dbc4c <__aeabi_dmul>
   d472e:	f007 fd85 	bl	dc23c <__aeabi_d2f>
   d4732:	4b9c      	ldr	r3, [pc, #624]	; (d49a4 <_Z19get_compass_headingv+0x37c>)
phiFnew=.95*phiFold+.05*phiM;
   d4734:	499c      	ldr	r1, [pc, #624]	; (d49a8 <_Z19get_compass_headingv+0x380>)
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4736:	6018      	str	r0, [r3, #0]
   d4738:	4606      	mov	r6, r0
phiFnew=.95*phiFold+.05*phiM;
   d473a:	6808      	ldr	r0, [r1, #0]
   d473c:	f007 fa2e 	bl	dbb9c <__aeabi_f2d>
   d4740:	a38d      	add	r3, pc, #564	; (adr r3, d4978 <_Z19get_compass_headingv+0x350>)
   d4742:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4746:	f007 fa81 	bl	dbc4c <__aeabi_dmul>
   d474a:	4604      	mov	r4, r0
   d474c:	4630      	mov	r0, r6
   d474e:	460d      	mov	r5, r1
   d4750:	f007 fa24 	bl	dbb9c <__aeabi_f2d>
   d4754:	a38a      	add	r3, pc, #552	; (adr r3, d4980 <_Z19get_compass_headingv+0x358>)
   d4756:	e9d3 2300 	ldrd	r2, r3, [r3]
   d475a:	f007 fa77 	bl	dbc4c <__aeabi_dmul>
   d475e:	4602      	mov	r2, r0
   d4760:	460b      	mov	r3, r1
   d4762:	4620      	mov	r0, r4
   d4764:	4629      	mov	r1, r5
   d4766:	f007 f8bb 	bl	db8e0 <__adddf3>
   d476a:	f007 fd67 	bl	dc23c <__aeabi_d2f>
   d476e:	f8cb 0000 	str.w	r0, [fp]
thetaFnew=.95*thetaFold+.05*thetaM;
   d4772:	488e      	ldr	r0, [pc, #568]	; (d49ac <_Z19get_compass_headingv+0x384>)
   d4774:	6800      	ldr	r0, [r0, #0]
   d4776:	f007 fa11 	bl	dbb9c <__aeabi_f2d>
   d477a:	a37f      	add	r3, pc, #508	; (adr r3, d4978 <_Z19get_compass_headingv+0x350>)
   d477c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4780:	f007 fa64 	bl	dbc4c <__aeabi_dmul>
   d4784:	4604      	mov	r4, r0
   d4786:	6838      	ldr	r0, [r7, #0]
   d4788:	460d      	mov	r5, r1
   d478a:	f007 fa07 	bl	dbb9c <__aeabi_f2d>
   d478e:	a37c      	add	r3, pc, #496	; (adr r3, d4980 <_Z19get_compass_headingv+0x358>)
   d4790:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4794:	f007 fa5a 	bl	dbc4c <__aeabi_dmul>
   d4798:	4602      	mov	r2, r0
   d479a:	460b      	mov	r3, r1
   d479c:	4620      	mov	r0, r4
   d479e:	4629      	mov	r1, r5
   d47a0:	f007 f89e 	bl	db8e0 <__adddf3>
   d47a4:	f007 fd4a 	bl	dc23c <__aeabi_d2f>
dt=(millis()-millisOld)/1000.;
   d47a8:	4d81      	ldr	r5, [pc, #516]	; (d49b0 <_Z19get_compass_headingv+0x388>)
thetaFnew=.95*thetaFold+.05*thetaM;
   d47aa:	f8ca 0000 	str.w	r0, [sl]
   d47ae:	f003 fa89 	bl	d7cc4 <HAL_Timer_Get_Milli_Seconds>
dt=(millis()-millisOld)/1000.;
   d47b2:	682b      	ldr	r3, [r5, #0]
   d47b4:	4c7f      	ldr	r4, [pc, #508]	; (d49b4 <_Z19get_compass_headingv+0x38c>)
   d47b6:	1ac0      	subs	r0, r0, r3
   d47b8:	f007 f9ce 	bl	dbb58 <__aeabi_ui2d>
   d47bc:	4b7e      	ldr	r3, [pc, #504]	; (d49b8 <_Z19get_compass_headingv+0x390>)
   d47be:	2200      	movs	r2, #0
   d47c0:	f007 fb6e 	bl	dbea0 <__aeabi_ddiv>
   d47c4:	f007 fd3a 	bl	dc23c <__aeabi_d2f>
   d47c8:	6020      	str	r0, [r4, #0]
   d47ca:	f003 fa7b 	bl	d7cc4 <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
   d47ce:	6028      	str	r0, [r5, #0]
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   d47d0:	6820      	ldr	r0, [r4, #0]
   d47d2:	f007 f9e3 	bl	dbb9c <__aeabi_f2d>
   d47d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   d47da:	4604      	mov	r4, r0
   d47dc:	460d      	mov	r5, r1
   d47de:	f007 fa35 	bl	dbc4c <__aeabi_dmul>
   d47e2:	460f      	mov	r7, r1
   d47e4:	4975      	ldr	r1, [pc, #468]	; (d49bc <_Z19get_compass_headingv+0x394>)
   d47e6:	4606      	mov	r6, r0
   d47e8:	6808      	ldr	r0, [r1, #0]
   d47ea:	f007 f9d7 	bl	dbb9c <__aeabi_f2d>
   d47ee:	4632      	mov	r2, r6
   d47f0:	463b      	mov	r3, r7
   d47f2:	f007 f875 	bl	db8e0 <__adddf3>
   d47f6:	a360      	add	r3, pc, #384	; (adr r3, d4978 <_Z19get_compass_headingv+0x350>)
   d47f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47fc:	f007 fa26 	bl	dbc4c <__aeabi_dmul>
   d4800:	4b64      	ldr	r3, [pc, #400]	; (d4994 <_Z19get_compass_headingv+0x36c>)
   d4802:	4680      	mov	r8, r0
   d4804:	6818      	ldr	r0, [r3, #0]
   d4806:	4689      	mov	r9, r1
   d4808:	f007 f9c8 	bl	dbb9c <__aeabi_f2d>
   d480c:	a35c      	add	r3, pc, #368	; (adr r3, d4980 <_Z19get_compass_headingv+0x358>)
   d480e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4812:	f007 fa1b 	bl	dbc4c <__aeabi_dmul>
   d4816:	4602      	mov	r2, r0
   d4818:	460b      	mov	r3, r1
   d481a:	4640      	mov	r0, r8
   d481c:	4649      	mov	r1, r9
   d481e:	f007 f85f 	bl	db8e0 <__adddf3>
   d4822:	f007 fd0b 	bl	dc23c <__aeabi_d2f>
   d4826:	4965      	ldr	r1, [pc, #404]	; (d49bc <_Z19get_compass_headingv+0x394>)
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d4828:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   d482c:	ee08 0a90 	vmov	s17, r0
   d4830:	6008      	str	r0, [r1, #0]
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d4832:	4620      	mov	r0, r4
   d4834:	4629      	mov	r1, r5
   d4836:	f007 fa09 	bl	dbc4c <__aeabi_dmul>
   d483a:	4604      	mov	r4, r0
   d483c:	4860      	ldr	r0, [pc, #384]	; (d49c0 <_Z19get_compass_headingv+0x398>)
   d483e:	460d      	mov	r5, r1
   d4840:	6800      	ldr	r0, [r0, #0]
   d4842:	f007 f9ab 	bl	dbb9c <__aeabi_f2d>
   d4846:	4622      	mov	r2, r4
   d4848:	462b      	mov	r3, r5
   d484a:	f007 f847 	bl	db8dc <__aeabi_dsub>
   d484e:	a34a      	add	r3, pc, #296	; (adr r3, d4978 <_Z19get_compass_headingv+0x350>)
   d4850:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4854:	f007 f9fa 	bl	dbc4c <__aeabi_dmul>
   d4858:	4a52      	ldr	r2, [pc, #328]	; (d49a4 <_Z19get_compass_headingv+0x37c>)
   d485a:	4680      	mov	r8, r0
   d485c:	6810      	ldr	r0, [r2, #0]
   d485e:	4689      	mov	r9, r1
   d4860:	f007 f99c 	bl	dbb9c <__aeabi_f2d>
   d4864:	a346      	add	r3, pc, #280	; (adr r3, d4980 <_Z19get_compass_headingv+0x358>)
   d4866:	e9d3 2300 	ldrd	r2, r3, [r3]
   d486a:	f007 f9ef 	bl	dbc4c <__aeabi_dmul>
   d486e:	4602      	mov	r2, r0
   d4870:	460b      	mov	r3, r1
   d4872:	4640      	mov	r0, r8
   d4874:	4649      	mov	r1, r9
   d4876:	f007 f833 	bl	db8e0 <__adddf3>
   d487a:	f007 fcdf 	bl	dc23c <__aeabi_d2f>
thetaG=thetaG+gyr.y()*dt;
   d487e:	4951      	ldr	r1, [pc, #324]	; (d49c4 <_Z19get_compass_headingv+0x39c>)
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d4880:	ee08 0a10 	vmov	s16, r0
   d4884:	484e      	ldr	r0, [pc, #312]	; (d49c0 <_Z19get_compass_headingv+0x398>)
   d4886:	ed80 8a00 	vstr	s16, [r0]
thetaG=thetaG+gyr.y()*dt;
   d488a:	6808      	ldr	r0, [r1, #0]
   d488c:	f007 f986 	bl	dbb9c <__aeabi_f2d>
   d4890:	4632      	mov	r2, r6
   d4892:	463b      	mov	r3, r7
   d4894:	f007 f824 	bl	db8e0 <__adddf3>
   d4898:	f007 fcd0 	bl	dc23c <__aeabi_d2f>
phiG=phiG-gyr.x()*dt;
   d489c:	4f4a      	ldr	r7, [pc, #296]	; (d49c8 <_Z19get_compass_headingv+0x3a0>)
thetaG=thetaG+gyr.y()*dt;
   d489e:	4e49      	ldr	r6, [pc, #292]	; (d49c4 <_Z19get_compass_headingv+0x39c>)
   d48a0:	6030      	str	r0, [r6, #0]
phiG=phiG-gyr.x()*dt;
   d48a2:	6838      	ldr	r0, [r7, #0]
   d48a4:	f007 f97a 	bl	dbb9c <__aeabi_f2d>
   d48a8:	4622      	mov	r2, r4
   d48aa:	462b      	mov	r3, r5
   d48ac:	f007 f816 	bl	db8dc <__aeabi_dsub>
   d48b0:	f007 fcc4 	bl	dc23c <__aeabi_d2f>
phiRad=phi/360*(2*3.14);
   d48b4:	eec8 7a09 	vdiv.f32	s15, s16, s18
phiG=phiG-gyr.x()*dt;
   d48b8:	6038      	str	r0, [r7, #0]
phiRad=phi/360*(2*3.14);
   d48ba:	ee17 0a90 	vmov	r0, s15
   d48be:	f007 f96d 	bl	dbb9c <__aeabi_f2d>
   d48c2:	a331      	add	r3, pc, #196	; (adr r3, d4988 <_Z19get_compass_headingv+0x360>)
   d48c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d48c8:	f007 f9c0 	bl	dbc4c <__aeabi_dmul>
   d48cc:	f007 fcb6 	bl	dc23c <__aeabi_d2f>
thetaRad=theta/360*(2*3.14);
   d48d0:	eec8 7a89 	vdiv.f32	s15, s17, s18
phiRad=phi/360*(2*3.14);
   d48d4:	4b3d      	ldr	r3, [pc, #244]	; (d49cc <_Z19get_compass_headingv+0x3a4>)
   d48d6:	6018      	str	r0, [r3, #0]
   d48d8:	ee08 0a10 	vmov	s16, r0
thetaRad=theta/360*(2*3.14);
   d48dc:	ee17 0a90 	vmov	r0, s15
   d48e0:	f007 f95c 	bl	dbb9c <__aeabi_f2d>
   d48e4:	a328      	add	r3, pc, #160	; (adr r3, d4988 <_Z19get_compass_headingv+0x360>)
   d48e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d48ea:	f007 f9af 	bl	dbc4c <__aeabi_dmul>
   d48ee:	f007 fca5 	bl	dc23c <__aeabi_d2f>
   d48f2:	4b37      	ldr	r3, [pc, #220]	; (d49d0 <_Z19get_compass_headingv+0x3a8>)
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
   d48f4:	ee00 0a10 	vmov	s0, r0
   d48f8:	6018      	str	r0, [r3, #0]
   d48fa:	ee08 0a90 	vmov	s17, r0
   d48fe:	f004 fb79 	bl	d8ff4 <cosf>
 
 //tilt compensated x
Xm=mag.x()*cos(thetaRad)-mag.y()*sin(phiRad)*sin(thetaRad)+mag.z()*cos(phiRad)*sin(thetaRad);
   d4902:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   d4906:	ee10 8a10 	vmov	r8, s0
   d490a:	eeb0 9a47 	vmov.f32	s18, s14
   d490e:	eef0 9a67 	vmov.f32	s19, s15
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
   d4912:	eeb0 0a48 	vmov.f32	s0, s16
   d4916:	f004 fbb5 	bl	d9084 <sinf>
   d491a:	ee10 0a10 	vmov	r0, s0
   d491e:	f007 f93d 	bl	dbb9c <__aeabi_f2d>
   d4922:	eeb0 0a68 	vmov.f32	s0, s17
   d4926:	ec41 0b1a 	vmov	d10, r0, r1
   d492a:	f004 fbab 	bl	d9084 <sinf>
   d492e:	ee10 0a10 	vmov	r0, s0
   d4932:	f007 f933 	bl	dbb9c <__aeabi_f2d>
   d4936:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
  { return __builtin_cosf(__x); }
   d493a:	eeb0 0a48 	vmov.f32	s0, s16
   d493e:	eeb0 ba47 	vmov.f32	s22, s14
   d4942:	eef0 ba67 	vmov.f32	s23, s15
   d4946:	4606      	mov	r6, r0
   d4948:	460f      	mov	r7, r1
   d494a:	f004 fb53 	bl	d8ff4 <cosf>
   d494e:	ee10 0a10 	vmov	r0, s0
   d4952:	f007 f923 	bl	dbb9c <__aeabi_f2d>
   d4956:	4604      	mov	r4, r0
   d4958:	4640      	mov	r0, r8
   d495a:	460d      	mov	r5, r1
   d495c:	f007 f91e 	bl	dbb9c <__aeabi_f2d>
   d4960:	e03c      	b.n	d49dc <_Z19get_compass_headingv+0x3b4>
   d4962:	bf00      	nop
   d4964:	f3af 8000 	nop.w
   d4968:	9999999a 	.word	0x9999999a
   d496c:	40239999 	.word	0x40239999
   d4970:	54524550 	.word	0x54524550
   d4974:	400921fb 	.word	0x400921fb
   d4978:	66666666 	.word	0x66666666
   d497c:	3fee6666 	.word	0x3fee6666
   d4980:	9999999a 	.word	0x9999999a
   d4984:	3fa99999 	.word	0x3fa99999
   d4988:	51eb851f 	.word	0x51eb851f
   d498c:	40191eb8 	.word	0x40191eb8
   d4990:	2003e4b8 	.word	0x2003e4b8
   d4994:	2003e56c 	.word	0x2003e56c
   d4998:	43b40000 	.word	0x43b40000
   d499c:	3fe00000 	.word	0x3fe00000
   d49a0:	40768000 	.word	0x40768000
   d49a4:	2003e550 	.word	0x2003e550
   d49a8:	2003e548 	.word	0x2003e548
   d49ac:	2003e564 	.word	0x2003e564
   d49b0:	2003e53c 	.word	0x2003e53c
   d49b4:	2003e530 	.word	0x2003e530
   d49b8:	408f4000 	.word	0x408f4000
   d49bc:	2003e55c 	.word	0x2003e55c
   d49c0:	2003e540 	.word	0x2003e540
   d49c4:	2003e568 	.word	0x2003e568
   d49c8:	2003e54c 	.word	0x2003e54c
   d49cc:	2003e554 	.word	0x2003e554
   d49d0:	2003e570 	.word	0x2003e570
   d49d4:	2003e544 	.word	0x2003e544
   d49d8:	2003e560 	.word	0x2003e560
   d49dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d49e0:	f007 f934 	bl	dbc4c <__aeabi_dmul>
   d49e4:	ec53 2b1a 	vmov	r2, r3, d10
   d49e8:	4680      	mov	r8, r0
   d49ea:	4689      	mov	r9, r1
   d49ec:	ec51 0b19 	vmov	r0, r1, d9
   d49f0:	f007 f92c 	bl	dbc4c <__aeabi_dmul>
   d49f4:	4632      	mov	r2, r6
   d49f6:	463b      	mov	r3, r7
   d49f8:	f007 f928 	bl	dbc4c <__aeabi_dmul>
   d49fc:	4602      	mov	r2, r0
   d49fe:	460b      	mov	r3, r1
   d4a00:	4640      	mov	r0, r8
   d4a02:	4649      	mov	r1, r9
   d4a04:	f006 ff6a 	bl	db8dc <__aeabi_dsub>
   d4a08:	4622      	mov	r2, r4
   d4a0a:	4680      	mov	r8, r0
   d4a0c:	4689      	mov	r9, r1
   d4a0e:	462b      	mov	r3, r5
   d4a10:	ec51 0b1b 	vmov	r0, r1, d11
   d4a14:	f007 f91a 	bl	dbc4c <__aeabi_dmul>
   d4a18:	4632      	mov	r2, r6
   d4a1a:	463b      	mov	r3, r7
   d4a1c:	f007 f916 	bl	dbc4c <__aeabi_dmul>
   d4a20:	4602      	mov	r2, r0
   d4a22:	460b      	mov	r3, r1
   d4a24:	4640      	mov	r0, r8
   d4a26:	4649      	mov	r1, r9
   d4a28:	f006 ff5a 	bl	db8e0 <__adddf3>
   d4a2c:	f007 fc06 	bl	dc23c <__aeabi_d2f>
   d4a30:	4b93      	ldr	r3, [pc, #588]	; (d4c80 <_Z19get_compass_headingv+0x658>)
Serial.print(",");
Serial.print(phiFnew);
Serial.print(",");
Serial.print(thetaG);
Serial.print(",");
Serial.print(phiG);
   d4a32:	4f94      	ldr	r7, [pc, #592]	; (d4c84 <_Z19get_compass_headingv+0x65c>)
Xm=mag.x()*cos(thetaRad)-mag.y()*sin(phiRad)*sin(thetaRad)+mag.z()*cos(phiRad)*sin(thetaRad);
   d4a34:	6018      	str	r0, [r3, #0]
   d4a36:	ee08 0a10 	vmov	s16, r0
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
   d4a3a:	4622      	mov	r2, r4
   d4a3c:	462b      	mov	r3, r5
   d4a3e:	ec51 0b19 	vmov	r0, r1, d9
   d4a42:	f007 f903 	bl	dbc4c <__aeabi_dmul>
   d4a46:	ec53 2b1b 	vmov	r2, r3, d11
   d4a4a:	4604      	mov	r4, r0
   d4a4c:	460d      	mov	r5, r1
   d4a4e:	ec51 0b1a 	vmov	r0, r1, d10
   d4a52:	f007 f8fb 	bl	dbc4c <__aeabi_dmul>
   d4a56:	4602      	mov	r2, r0
   d4a58:	460b      	mov	r3, r1
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	4629      	mov	r1, r5
   d4a5e:	f006 ff3f 	bl	db8e0 <__adddf3>
   d4a62:	f007 fbeb 	bl	dc23c <__aeabi_d2f>
   d4a66:	4b88      	ldr	r3, [pc, #544]	; (d4c88 <_Z19get_compass_headingv+0x660>)
psi=atan2(Ym,Xm)/(2*3.14)*360;
   d4a68:	4d88      	ldr	r5, [pc, #544]	; (d4c8c <_Z19get_compass_headingv+0x664>)
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
   d4a6a:	6018      	str	r0, [r3, #0]
  { return __builtin_atan2f(__y, __x); }
   d4a6c:	eef0 0a48 	vmov.f32	s1, s16
   d4a70:	ee00 0a10 	vmov	s0, r0
   d4a74:	f004 fd0a 	bl	d948c <atan2f>
   d4a78:	ee10 0a10 	vmov	r0, s0
psi=atan2(Ym,Xm)/(2*3.14)*360;
   d4a7c:	f007 f88e 	bl	dbb9c <__aeabi_f2d>
   d4a80:	a37b      	add	r3, pc, #492	; (adr r3, d4c70 <_Z19get_compass_headingv+0x648>)
   d4a82:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a86:	f007 fa0b 	bl	dbea0 <__aeabi_ddiv>
   d4a8a:	4b81      	ldr	r3, [pc, #516]	; (d4c90 <_Z19get_compass_headingv+0x668>)
   d4a8c:	2200      	movs	r2, #0
   d4a8e:	f007 f8dd 	bl	dbc4c <__aeabi_dmul>
   d4a92:	f007 fbd3 	bl	dc23c <__aeabi_d2f>
   d4a96:	6028      	str	r0, [r5, #0]
Serial.print(acc.x()/9.8);
   d4a98:	f003 ff7c 	bl	d8994 <_Z16_fetch_usbserialv>
   d4a9c:	a376      	add	r3, pc, #472	; (adr r3, d4c78 <_Z19get_compass_headingv+0x650>)
   d4a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4aa2:	4604      	mov	r4, r0
   d4aa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d4aa8:	f007 f9fa 	bl	dbea0 <__aeabi_ddiv>
   d4aac:	ec41 0b10 	vmov	d0, r0, r1
   d4ab0:	4620      	mov	r0, r4
Serial.print(",");
   d4ab2:	4c78      	ldr	r4, [pc, #480]	; (d4c94 <_Z19get_compass_headingv+0x66c>)
Serial.print(acc.x()/9.8);
   d4ab4:	2102      	movs	r1, #2
   d4ab6:	f003 fd84 	bl	d85c2 <_ZN5Print5printEdi>
Serial.print(",");
   d4aba:	f003 ff6b 	bl	d8994 <_Z16_fetch_usbserialv>
   d4abe:	4621      	mov	r1, r4
   d4ac0:	f003 fc66 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(acc.y()/9.8);
   d4ac4:	f003 ff66 	bl	d8994 <_Z16_fetch_usbserialv>
   d4ac8:	a36b      	add	r3, pc, #428	; (adr r3, d4c78 <_Z19get_compass_headingv+0x650>)
   d4aca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ace:	4606      	mov	r6, r0
   d4ad0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d4ad4:	f007 f9e4 	bl	dbea0 <__aeabi_ddiv>
   d4ad8:	ec41 0b10 	vmov	d0, r0, r1
   d4adc:	2102      	movs	r1, #2
   d4ade:	4630      	mov	r0, r6
   d4ae0:	f003 fd6f 	bl	d85c2 <_ZN5Print5printEdi>
Serial.print(",");
   d4ae4:	f003 ff56 	bl	d8994 <_Z16_fetch_usbserialv>
   d4ae8:	4621      	mov	r1, r4
   d4aea:	f003 fc51 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(acc.z()/9.8);
   d4aee:	f003 ff51 	bl	d8994 <_Z16_fetch_usbserialv>
   d4af2:	a361      	add	r3, pc, #388	; (adr r3, d4c78 <_Z19get_compass_headingv+0x650>)
   d4af4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4af8:	4606      	mov	r6, r0
   d4afa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d4afe:	f007 f9cf 	bl	dbea0 <__aeabi_ddiv>
   d4b02:	ec41 0b10 	vmov	d0, r0, r1
   d4b06:	2102      	movs	r1, #2
   d4b08:	4630      	mov	r0, r6
   d4b0a:	f003 fd5a 	bl	d85c2 <_ZN5Print5printEdi>
Serial.print(",");
   d4b0e:	f003 ff41 	bl	d8994 <_Z16_fetch_usbserialv>
   d4b12:	4621      	mov	r1, r4
   d4b14:	f003 fc3c 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(accel);
   d4b18:	f003 ff3c 	bl	d8994 <_Z16_fetch_usbserialv>
   d4b1c:	220a      	movs	r2, #10
   d4b1e:	f89d 100e 	ldrb.w	r1, [sp, #14]
Serial.print(thetaG);
   d4b22:	4e5d      	ldr	r6, [pc, #372]	; (d4c98 <_Z19get_compass_headingv+0x670>)
Serial.print(accel);
   d4b24:	f7ff fd14 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d4b28:	f003 ff34 	bl	d8994 <_Z16_fetch_usbserialv>
   d4b2c:	4621      	mov	r1, r4
   d4b2e:	f003 fc2f 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(gyro);
   d4b32:	f003 ff2f 	bl	d8994 <_Z16_fetch_usbserialv>
   d4b36:	220a      	movs	r2, #10
   d4b38:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d4b3c:	f7ff fd08 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d4b40:	f003 ff28 	bl	d8994 <_Z16_fetch_usbserialv>
   d4b44:	4621      	mov	r1, r4
   d4b46:	f003 fc23 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(mg);
   d4b4a:	f003 ff23 	bl	d8994 <_Z16_fetch_usbserialv>
   d4b4e:	220a      	movs	r2, #10
   d4b50:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d4b54:	f7ff fcfc 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d4b58:	f003 ff1c 	bl	d8994 <_Z16_fetch_usbserialv>
   d4b5c:	4621      	mov	r1, r4
   d4b5e:	f003 fc17 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(system);
   d4b62:	f003 ff17 	bl	d8994 <_Z16_fetch_usbserialv>
   d4b66:	220a      	movs	r2, #10
   d4b68:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d4b6c:	f7ff fcf0 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d4b70:	f003 ff10 	bl	d8994 <_Z16_fetch_usbserialv>
   d4b74:	4621      	mov	r1, r4
   d4b76:	f003 fc0b 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(thetaM);
   d4b7a:	f003 ff0b 	bl	d8994 <_Z16_fetch_usbserialv>
   d4b7e:	4b47      	ldr	r3, [pc, #284]	; (d4c9c <_Z19get_compass_headingv+0x674>)
   d4b80:	2102      	movs	r1, #2
   d4b82:	ed93 0a00 	vldr	s0, [r3]
   d4b86:	f003 fd0d 	bl	d85a4 <_ZN5Print5printEfi>
Serial.print(",");
   d4b8a:	f003 ff03 	bl	d8994 <_Z16_fetch_usbserialv>
   d4b8e:	4621      	mov	r1, r4
   d4b90:	f003 fbfe 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(phiM);
   d4b94:	f003 fefe 	bl	d8994 <_Z16_fetch_usbserialv>
   d4b98:	4a41      	ldr	r2, [pc, #260]	; (d4ca0 <_Z19get_compass_headingv+0x678>)
   d4b9a:	2102      	movs	r1, #2
   d4b9c:	ed92 0a00 	vldr	s0, [r2]
   d4ba0:	f003 fd00 	bl	d85a4 <_ZN5Print5printEfi>
Serial.print(",");
   d4ba4:	f003 fef6 	bl	d8994 <_Z16_fetch_usbserialv>
   d4ba8:	4621      	mov	r1, r4
   d4baa:	f003 fbf1 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(thetaFnew);
   d4bae:	f003 fef1 	bl	d8994 <_Z16_fetch_usbserialv>
   d4bb2:	ed9a 0a00 	vldr	s0, [sl]
   d4bb6:	2102      	movs	r1, #2
   d4bb8:	f003 fcf4 	bl	d85a4 <_ZN5Print5printEfi>
Serial.print(",");
   d4bbc:	f003 feea 	bl	d8994 <_Z16_fetch_usbserialv>
   d4bc0:	4621      	mov	r1, r4
   d4bc2:	f003 fbe5 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(phiFnew);
   d4bc6:	f003 fee5 	bl	d8994 <_Z16_fetch_usbserialv>
   d4bca:	ed9b 0a00 	vldr	s0, [fp]
   d4bce:	2102      	movs	r1, #2
   d4bd0:	f003 fce8 	bl	d85a4 <_ZN5Print5printEfi>
Serial.print(",");
   d4bd4:	f003 fede 	bl	d8994 <_Z16_fetch_usbserialv>
   d4bd8:	4621      	mov	r1, r4
   d4bda:	f003 fbd9 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(thetaG);
   d4bde:	f003 fed9 	bl	d8994 <_Z16_fetch_usbserialv>
   d4be2:	ed96 0a00 	vldr	s0, [r6]
   d4be6:	2102      	movs	r1, #2
   d4be8:	f003 fcdc 	bl	d85a4 <_ZN5Print5printEfi>
Serial.print(",");
   d4bec:	f003 fed2 	bl	d8994 <_Z16_fetch_usbserialv>
   d4bf0:	4621      	mov	r1, r4
   d4bf2:	f003 fbcd 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(phiG);
   d4bf6:	f003 fecd 	bl	d8994 <_Z16_fetch_usbserialv>
   d4bfa:	ed97 0a00 	vldr	s0, [r7]
   d4bfe:	2102      	movs	r1, #2
   d4c00:	f003 fcd0 	bl	d85a4 <_ZN5Print5printEfi>
Serial.print(",");
   d4c04:	f003 fec6 	bl	d8994 <_Z16_fetch_usbserialv>
   d4c08:	4621      	mov	r1, r4
   d4c0a:	f003 fbc1 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(theta);
   d4c0e:	f003 fec1 	bl	d8994 <_Z16_fetch_usbserialv>
   d4c12:	4b24      	ldr	r3, [pc, #144]	; (d4ca4 <_Z19get_compass_headingv+0x67c>)
   d4c14:	2102      	movs	r1, #2
   d4c16:	ed93 0a00 	vldr	s0, [r3]
   d4c1a:	f003 fcc3 	bl	d85a4 <_ZN5Print5printEfi>
Serial.print(",");
   d4c1e:	f003 feb9 	bl	d8994 <_Z16_fetch_usbserialv>
   d4c22:	4621      	mov	r1, r4
   d4c24:	f003 fbb4 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(phi);
   d4c28:	f003 feb4 	bl	d8994 <_Z16_fetch_usbserialv>
   d4c2c:	4b1e      	ldr	r3, [pc, #120]	; (d4ca8 <_Z19get_compass_headingv+0x680>)
   d4c2e:	2102      	movs	r1, #2
   d4c30:	ed93 0a00 	vldr	s0, [r3]
   d4c34:	f003 fcb6 	bl	d85a4 <_ZN5Print5printEfi>
Serial.print(",");
   d4c38:	f003 feac 	bl	d8994 <_Z16_fetch_usbserialv>
   d4c3c:	4621      	mov	r1, r4
   d4c3e:	f003 fba7 	bl	d8390 <_ZN5Print5printEPKc>
Serial.println(psi);
   d4c42:	f003 fea7 	bl	d8994 <_Z16_fetch_usbserialv>
   d4c46:	ed95 0a00 	vldr	s0, [r5]
   d4c4a:	2102      	movs	r1, #2
   d4c4c:	f003 fcc7 	bl	d85de <_ZN5Print7printlnEfi>
 
phiFold=phiFnew;
   d4c50:	4916      	ldr	r1, [pc, #88]	; (d4cac <_Z19get_compass_headingv+0x684>)
   d4c52:	f8db 3000 	ldr.w	r3, [fp]
thetaFold=thetaFnew;
   d4c56:	4816      	ldr	r0, [pc, #88]	; (d4cb0 <_Z19get_compass_headingv+0x688>)
 
 return(psi);
//delay(BNO055_SAMPLERATE_DELAY_MS);
   d4c58:	ed95 0a00 	vldr	s0, [r5]
phiFold=phiFnew;
   d4c5c:	600b      	str	r3, [r1, #0]
thetaFold=thetaFnew;
   d4c5e:	f8da 3000 	ldr.w	r3, [sl]
   d4c62:	6003      	str	r3, [r0, #0]
   d4c64:	b017      	add	sp, #92	; 0x5c
   d4c66:	ecbd 8b08 	vpop	{d8-d11}
   d4c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4c6e:	bf00      	nop
   d4c70:	51eb851f 	.word	0x51eb851f
   d4c74:	40191eb8 	.word	0x40191eb8
   d4c78:	9999999a 	.word	0x9999999a
   d4c7c:	40239999 	.word	0x40239999
   d4c80:	2003e46c 	.word	0x2003e46c
   d4c84:	2003e54c 	.word	0x2003e54c
   d4c88:	2003e470 	.word	0x2003e470
   d4c8c:	2003e558 	.word	0x2003e558
   d4c90:	40768000 	.word	0x40768000
   d4c94:	000dcb40 	.word	0x000dcb40
   d4c98:	2003e568 	.word	0x2003e568
   d4c9c:	2003e56c 	.word	0x2003e56c
   d4ca0:	2003e550 	.word	0x2003e550
   d4ca4:	2003e55c 	.word	0x2003e55c
   d4ca8:	2003e540 	.word	0x2003e540
   d4cac:	2003e548 	.word	0x2003e548
   d4cb0:	2003e564 	.word	0x2003e564

000d4cb4 <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d4cb4:	b538      	push	{r3, r4, r5, lr}
   d4cb6:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d4cb8:	f7ff fc4a 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
   d4cbc:	4604      	mov	r4, r0
        n += println();
   d4cbe:	4628      	mov	r0, r5
   d4cc0:	f003 fb71 	bl	d83a6 <_ZN5Print7printlnEv>
    }
   d4cc4:	4420      	add	r0, r4
   d4cc6:	bd38      	pop	{r3, r4, r5, pc}

000d4cc8 <_Z19displaySensorStatusv>:
{
   d4cc8:	b513      	push	{r0, r1, r4, lr}
    system_status = self_test_results = system_error = 0;
   d4cca:	2300      	movs	r3, #0
    Serial.println("");
   d4ccc:	4c21      	ldr	r4, [pc, #132]	; (d4d54 <_Z19displaySensorStatusv+0x8c>)
    system_status = self_test_results = system_error = 0;
   d4cce:	f88d 3007 	strb.w	r3, [sp, #7]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   d4cd2:	f10d 0206 	add.w	r2, sp, #6
   d4cd6:	f10d 0105 	add.w	r1, sp, #5
    system_status = self_test_results = system_error = 0;
   d4cda:	f88d 3006 	strb.w	r3, [sp, #6]
   d4cde:	f88d 3005 	strb.w	r3, [sp, #5]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   d4ce2:	481d      	ldr	r0, [pc, #116]	; (d4d58 <_Z19displaySensorStatusv+0x90>)
   d4ce4:	f10d 0307 	add.w	r3, sp, #7
   d4ce8:	f001 fe27 	bl	d693a <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>
    Serial.println("");
   d4cec:	f003 fe52 	bl	d8994 <_Z16_fetch_usbserialv>
   d4cf0:	4621      	mov	r1, r4
   d4cf2:	f003 fb64 	bl	d83be <_ZN5Print7printlnEPKc>
    Serial.print("System Status: 0x");
   d4cf6:	f003 fe4d 	bl	d8994 <_Z16_fetch_usbserialv>
   d4cfa:	4918      	ldr	r1, [pc, #96]	; (d4d5c <_Z19displaySensorStatusv+0x94>)
   d4cfc:	f003 fb48 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.println(system_status, HEX);
   d4d00:	f003 fe48 	bl	d8994 <_Z16_fetch_usbserialv>
   d4d04:	2210      	movs	r2, #16
   d4d06:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d4d0a:	f7ff ffd3 	bl	d4cb4 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("Self Test:     0x");
   d4d0e:	f003 fe41 	bl	d8994 <_Z16_fetch_usbserialv>
   d4d12:	4913      	ldr	r1, [pc, #76]	; (d4d60 <_Z19displaySensorStatusv+0x98>)
   d4d14:	f003 fb3c 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.println(self_test_results, HEX);
   d4d18:	f003 fe3c 	bl	d8994 <_Z16_fetch_usbserialv>
   d4d1c:	2210      	movs	r2, #16
   d4d1e:	f89d 1006 	ldrb.w	r1, [sp, #6]
   d4d22:	f7ff ffc7 	bl	d4cb4 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("System Error:  0x");
   d4d26:	f003 fe35 	bl	d8994 <_Z16_fetch_usbserialv>
   d4d2a:	490e      	ldr	r1, [pc, #56]	; (d4d64 <_Z19displaySensorStatusv+0x9c>)
   d4d2c:	f003 fb30 	bl	d8390 <_ZN5Print5printEPKc>
    Serial.println(system_error, HEX);
   d4d30:	f003 fe30 	bl	d8994 <_Z16_fetch_usbserialv>
   d4d34:	2210      	movs	r2, #16
   d4d36:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d4d3a:	f7ff ffbb 	bl	d4cb4 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.println("");
   d4d3e:	f003 fe29 	bl	d8994 <_Z16_fetch_usbserialv>
   d4d42:	4621      	mov	r1, r4
   d4d44:	f003 fb3b 	bl	d83be <_ZN5Print7printlnEPKc>
    delay(500);
   d4d48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4d4c:	f003 fca6 	bl	d869c <delay>
}
   d4d50:	b002      	add	sp, #8
   d4d52:	bd10      	pop	{r4, pc}
   d4d54:	000dcbb3 	.word	0x000dcbb3
   d4d58:	2003e4b8 	.word	0x2003e4b8
   d4d5c:	000dcb42 	.word	0x000dcb42
   d4d60:	000dcb54 	.word	0x000dcb54
   d4d64:	000dcb66 	.word	0x000dcb66

000d4d68 <_GLOBAL__sub_I_i2ceeprom>:
   d4d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
Adafruit_EEPROM_I2C i2ceeprom;
   d4d6a:	4810      	ldr	r0, [pc, #64]	; (d4dac <_GLOBAL__sub_I_i2ceeprom+0x44>)
   d4d6c:	f002 fefa 	bl	d7b64 <_ZN19Adafruit_EEPROM_I2CC1Ev>
Adafruit_BME280 bme; // I2C
   d4d70:	480f      	ldr	r0, [pc, #60]	; (d4db0 <_GLOBAL__sub_I_i2ceeprom+0x48>)
   d4d72:	f000 fe09 	bl	d5988 <_ZN15Adafruit_BME280C1Ev>
Adafruit_SH1107 display = Adafruit_SH1107(64, 128, &Wire);
   d4d76:	f004 f915 	bl	d8fa4 <_Z19__fetch_global_Wirev>
   d4d7a:	4a0e      	ldr	r2, [pc, #56]	; (d4db4 <_GLOBAL__sub_I_i2ceeprom+0x4c>)
   d4d7c:	490e      	ldr	r1, [pc, #56]	; (d4db8 <_GLOBAL__sub_I_i2ceeprom+0x50>)
   d4d7e:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4d82:	f04f 32ff 	mov.w	r2, #4294967295
   d4d86:	4603      	mov	r3, r0
   d4d88:	9200      	str	r2, [sp, #0]
   d4d8a:	2140      	movs	r1, #64	; 0x40
   d4d8c:	2280      	movs	r2, #128	; 0x80
   d4d8e:	480b      	ldr	r0, [pc, #44]	; (d4dbc <_GLOBAL__sub_I_i2ceeprom+0x54>)
   d4d90:	f002 fe62 	bl	d7a58 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d4d94:	f004 f906 	bl	d8fa4 <_Z19__fetch_global_Wirev>
   d4d98:	4603      	mov	r3, r0
   d4d9a:	4809      	ldr	r0, [pc, #36]	; (d4dc0 <_GLOBAL__sub_I_i2ceeprom+0x58>)
   d4d9c:	2228      	movs	r2, #40	; 0x28
   d4d9e:	2137      	movs	r1, #55	; 0x37
   d4da0:	b005      	add	sp, #20
   d4da2:	f85d eb04 	ldr.w	lr, [sp], #4
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d4da6:	f001 bc91 	b.w	d66cc <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
   d4daa:	bf00      	nop
   d4dac:	2003e534 	.word	0x2003e534
   d4db0:	2003e474 	.word	0x2003e474
   d4db4:	00061a80 	.word	0x00061a80
   d4db8:	000186a0 	.word	0x000186a0
   d4dbc:	2003e4d8 	.word	0x2003e4d8
   d4dc0:	2003e4b8 	.word	0x2003e4b8

000d4dc4 <_Z13displayValuesv>:
void displayValues() {
   d4dc4:	b538      	push	{r3, r4, r5, lr}
    display.clearDisplay();
   d4dc6:	4c3d      	ldr	r4, [pc, #244]	; (d4ebc <_Z13displayValuesv+0xf8>)
    display.print(bme.readTemperature()*1.8F + 32.);
   d4dc8:	4d3d      	ldr	r5, [pc, #244]	; (d4ec0 <_Z13displayValuesv+0xfc>)
    display.clearDisplay();
   d4dca:	4620      	mov	r0, r4
   d4dcc:	f002 f8ee 	bl	d6fac <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d4dd0:	4620      	mov	r0, r4
   d4dd2:	f002 fd5e 	bl	d7892 <_ZN15Adafruit_SH110X7displayEv>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
   d4dd6:	2300      	movs	r3, #0
    display.print("Temp. = ");
   d4dd8:	493a      	ldr	r1, [pc, #232]	; (d4ec4 <_Z13displayValuesv+0x100>)
   d4dda:	6123      	str	r3, [r4, #16]
   d4ddc:	4620      	mov	r0, r4
   d4dde:	f003 fad7 	bl	d8390 <_ZN5Print5printEPKc>
    display.print(bme.readTemperature()*1.8F + 32.);
   d4de2:	4628      	mov	r0, r5
   d4de4:	f000 fea4 	bl	d5b30 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4de8:	eddf 7a37 	vldr	s15, [pc, #220]	; d4ec8 <_Z13displayValuesv+0x104>
   d4dec:	ee60 7a27 	vmul.f32	s15, s0, s15
   d4df0:	ee17 0a90 	vmov	r0, s15
   d4df4:	f006 fed2 	bl	dbb9c <__aeabi_f2d>
   d4df8:	4b34      	ldr	r3, [pc, #208]	; (d4ecc <_Z13displayValuesv+0x108>)
   d4dfa:	2200      	movs	r2, #0
   d4dfc:	f006 fd70 	bl	db8e0 <__adddf3>
   d4e00:	ec41 0b10 	vmov	d0, r0, r1
   d4e04:	2102      	movs	r1, #2
   d4e06:	4620      	mov	r0, r4
   d4e08:	f003 fbdb 	bl	d85c2 <_ZN5Print5printEdi>
    display.println(" °F");
   d4e0c:	4930      	ldr	r1, [pc, #192]	; (d4ed0 <_Z13displayValuesv+0x10c>)
   d4e0e:	4620      	mov	r0, r4
   d4e10:	f003 fad5 	bl	d83be <_ZN5Print7printlnEPKc>
    display.print("Press. = ");
   d4e14:	492f      	ldr	r1, [pc, #188]	; (d4ed4 <_Z13displayValuesv+0x110>)
   d4e16:	4620      	mov	r0, r4
   d4e18:	f003 faba 	bl	d8390 <_ZN5Print5printEPKc>
    display.print(bme.readPressure() / 101325.0F * 760.0F);
   d4e1c:	4628      	mov	r0, r5
   d4e1e:	f000 feb5 	bl	d5b8c <_ZN15Adafruit_BME28012readPressureEv>
   d4e22:	eddf 7a2d 	vldr	s15, [pc, #180]	; d4ed8 <_Z13displayValuesv+0x114>
   d4e26:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d4e2a:	2102      	movs	r1, #2
   d4e2c:	4620      	mov	r0, r4
   d4e2e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; d4edc <_Z13displayValuesv+0x118>
   d4e32:	ee27 0a00 	vmul.f32	s0, s14, s0
   d4e36:	f003 fbb5 	bl	d85a4 <_ZN5Print5printEfi>
    display.println(" mmHg");
   d4e3a:	4929      	ldr	r1, [pc, #164]	; (d4ee0 <_Z13displayValuesv+0x11c>)
   d4e3c:	4620      	mov	r0, r4
   d4e3e:	f003 fabe 	bl	d83be <_ZN5Print7printlnEPKc>
    display.print("Altitude = ");
   d4e42:	4928      	ldr	r1, [pc, #160]	; (d4ee4 <_Z13displayValuesv+0x120>)
   d4e44:	4620      	mov	r0, r4
   d4e46:	f003 faa3 	bl	d8390 <_ZN5Print5printEPKc>
    display.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d4e4a:	4628      	mov	r0, r5
   d4e4c:	ed9f 0a26 	vldr	s0, [pc, #152]	; d4ee8 <_Z13displayValuesv+0x124>
   d4e50:	f000 ff76 	bl	d5d40 <_ZN15Adafruit_BME28012readAltitudeEf>
   d4e54:	2102      	movs	r1, #2
   d4e56:	4620      	mov	r0, r4
   d4e58:	f003 fba4 	bl	d85a4 <_ZN5Print5printEfi>
    display.println(" m");
   d4e5c:	4923      	ldr	r1, [pc, #140]	; (d4eec <_Z13displayValuesv+0x128>)
   d4e5e:	4620      	mov	r0, r4
   d4e60:	f003 faad 	bl	d83be <_ZN5Print7printlnEPKc>
    display.print("Humidity = ");
   d4e64:	4922      	ldr	r1, [pc, #136]	; (d4ef0 <_Z13displayValuesv+0x12c>)
   d4e66:	4620      	mov	r0, r4
   d4e68:	f003 fa92 	bl	d8390 <_ZN5Print5printEPKc>
    display.print(bme.readHumidity());
   d4e6c:	4628      	mov	r0, r5
   d4e6e:	f001 f807 	bl	d5e80 <_ZN15Adafruit_BME28012readHumidityEv>
   d4e72:	2102      	movs	r1, #2
   d4e74:	4620      	mov	r0, r4
   d4e76:	f003 fb95 	bl	d85a4 <_ZN5Print5printEfi>
    display.println(" %");
   d4e7a:	491e      	ldr	r1, [pc, #120]	; (d4ef4 <_Z13displayValuesv+0x130>)
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	f003 fa9e 	bl	d83be <_ZN5Print7printlnEPKc>
    Serial.println();
   d4e82:	f003 fd87 	bl	d8994 <_Z16_fetch_usbserialv>
   d4e86:	f003 fa8e 	bl	d83a6 <_ZN5Print7printlnEv>
    display.println("Marrie is great!");
   d4e8a:	491b      	ldr	r1, [pc, #108]	; (d4ef8 <_Z13displayValuesv+0x134>)
   d4e8c:	4620      	mov	r0, r4
   d4e8e:	f003 fa96 	bl	d83be <_ZN5Print7printlnEPKc>
    Serial.println();
   d4e92:	f003 fd7f 	bl	d8994 <_Z16_fetch_usbserialv>
   d4e96:	f003 fa86 	bl	d83a6 <_ZN5Print7printlnEv>
    display.print("Compass heading");
   d4e9a:	4918      	ldr	r1, [pc, #96]	; (d4efc <_Z13displayValuesv+0x138>)
   d4e9c:	4620      	mov	r0, r4
   d4e9e:	f003 fa77 	bl	d8390 <_ZN5Print5printEPKc>
    display.print(compass_heading);
   d4ea2:	4b17      	ldr	r3, [pc, #92]	; (d4f00 <_Z13displayValuesv+0x13c>)
   d4ea4:	4620      	mov	r0, r4
   d4ea6:	ed93 0a00 	vldr	s0, [r3]
   d4eaa:	2102      	movs	r1, #2
   d4eac:	f003 fb7a 	bl	d85a4 <_ZN5Print5printEfi>
  display.display(); // actually display all of the above
   d4eb0:	4620      	mov	r0, r4
  }
   d4eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.display(); // actually display all of the above
   d4eb6:	f002 bcec 	b.w	d7892 <_ZN15Adafruit_SH110X7displayEv>
   d4eba:	bf00      	nop
   d4ebc:	2003e4d8 	.word	0x2003e4d8
   d4ec0:	2003e474 	.word	0x2003e474
   d4ec4:	000dcb78 	.word	0x000dcb78
   d4ec8:	3fe66666 	.word	0x3fe66666
   d4ecc:	40400000 	.word	0x40400000
   d4ed0:	000dcb81 	.word	0x000dcb81
   d4ed4:	000dcb86 	.word	0x000dcb86
   d4ed8:	47c5e680 	.word	0x47c5e680
   d4edc:	443e0000 	.word	0x443e0000
   d4ee0:	000dca18 	.word	0x000dca18
   d4ee4:	000dca26 	.word	0x000dca26
   d4ee8:	447d5000 	.word	0x447d5000
   d4eec:	000dca32 	.word	0x000dca32
   d4ef0:	000dca35 	.word	0x000dca35
   d4ef4:	000dca41 	.word	0x000dca41
   d4ef8:	000dcb90 	.word	0x000dcb90
   d4efc:	000dcba1 	.word	0x000dcba1
   d4f00:	2003e4d0 	.word	0x2003e4d0
   d4f04:	00000000 	.word	0x00000000

000d4f08 <loop>:
void loop(void) {
   d4f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4f0c:	ed2d 8b02 	vpush	{d8}
digitalWrite(vane_switch, HIGH);
   d4f10:	4bcf      	ldr	r3, [pc, #828]	; (d5250 <loop+0x348>)
VaneValue = analogRead(vane_pin);
   d4f12:	4dd0      	ldr	r5, [pc, #832]	; (d5254 <loop+0x34c>)
digitalWrite(vane_switch, HIGH);
   d4f14:	7818      	ldrb	r0, [r3, #0]
   d4f16:	4cd0      	ldr	r4, [pc, #832]	; (d5258 <loop+0x350>)
if ((millis() - wind_speed_time) > wind_speed_time_interval) {
   d4f18:	4ed0      	ldr	r6, [pc, #832]	; (d525c <loop+0x354>)
void loop(void) {
   d4f1a:	b09c      	sub	sp, #112	; 0x70
digitalWrite(vane_switch, HIGH);
   d4f1c:	2101      	movs	r1, #1
   d4f1e:	f003 ffce 	bl	d8ebe <digitalWrite>
VaneValue = analogRead(vane_pin);
   d4f22:	4bcf      	ldr	r3, [pc, #828]	; (d5260 <loop+0x358>)
   d4f24:	7818      	ldrb	r0, [r3, #0]
   d4f26:	f003 fff6 	bl	d8f16 <analogRead>
Direction = map(VaneValue, 0, 4095, 0, 360);
   d4f2a:	f44f 73b4 	mov.w	r3, #360	; 0x168
VaneValue = analogRead(vane_pin);
   d4f2e:	6028      	str	r0, [r5, #0]
Direction = map(VaneValue, 0, 4095, 0, 360);
   d4f30:	9300      	str	r3, [sp, #0]
   d4f32:	2300      	movs	r3, #0
   d4f34:	4619      	mov	r1, r3
   d4f36:	f640 72ff 	movw	r2, #4095	; 0xfff
   d4f3a:	f003 fba3 	bl	d8684 <_Z3mapiiiii>
   d4f3e:	4bc9      	ldr	r3, [pc, #804]	; (d5264 <loop+0x35c>)
if(CalDirection > 360)
   d4f40:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
Direction = map(VaneValue, 0, 4095, 0, 360);
   d4f44:	6018      	str	r0, [r3, #0]
CalDirection = CalDirection - 360;
   d4f46:	bfc8      	it	gt
   d4f48:	f5a0 70b4 	subgt.w	r0, r0, #360	; 0x168
   d4f4c:	6020      	str	r0, [r4, #0]
if(CalDirection < 0)
   d4f4e:	6823      	ldr	r3, [r4, #0]
   d4f50:	2b00      	cmp	r3, #0
CalDirection = CalDirection + 360;
   d4f52:	bfbc      	itt	lt
   d4f54:	f503 73b4 	addlt.w	r3, r3, #360	; 0x168
   d4f58:	6023      	strlt	r3, [r4, #0]
   d4f5a:	f002 feb3 	bl	d7cc4 <HAL_Timer_Get_Milli_Seconds>
if ((millis() - wind_speed_time) > wind_speed_time_interval) {
   d4f5e:	6833      	ldr	r3, [r6, #0]
   d4f60:	1ac0      	subs	r0, r0, r3
   d4f62:	4bc1      	ldr	r3, [pc, #772]	; (d5268 <loop+0x360>)
   d4f64:	881b      	ldrh	r3, [r3, #0]
   d4f66:	4298      	cmp	r0, r3
   d4f68:	d963      	bls.n	d5032 <loop+0x12a>
  if(abs(CalDirection - LastValue) > 5)
   d4f6a:	4fc0      	ldr	r7, [pc, #768]	; (d526c <loop+0x364>)
   d4f6c:	6823      	ldr	r3, [r4, #0]
   d4f6e:	683a      	ldr	r2, [r7, #0]
   d4f70:	1a9b      	subs	r3, r3, r2
   d4f72:	2b00      	cmp	r3, #0
   d4f74:	bfb8      	it	lt
   d4f76:	425b      	neglt	r3, r3
   d4f78:	2b05      	cmp	r3, #5
   d4f7a:	dd2c      	ble.n	d4fd6 <loop+0xce>
  Serial.print(VaneValue); Serial.print("\t\t");
   d4f7c:	f003 fd0a 	bl	d8994 <_Z16_fetch_usbserialv>
   d4f80:	682d      	ldr	r5, [r5, #0]
        if (n < 0 && base == 10) {
   d4f82:	2d00      	cmp	r5, #0
   d4f84:	4680      	mov	r8, r0
   d4f86:	f280 81fa 	bge.w	d537e <loop+0x476>
            t = print('-');
   d4f8a:	212d      	movs	r1, #45	; 0x2d
   d4f8c:	f003 fa04 	bl	d8398 <_ZN5Print5printEc>
            val = -n;
   d4f90:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d4f92:	220a      	movs	r2, #10
   d4f94:	4640      	mov	r0, r8
   d4f96:	f003 fa1e 	bl	d83d6 <_ZN5Print11printNumberEmh>
   d4f9a:	f003 fcfb 	bl	d8994 <_Z16_fetch_usbserialv>
   d4f9e:	49b4      	ldr	r1, [pc, #720]	; (d5270 <loop+0x368>)
   d4fa0:	f003 f9f6 	bl	d8390 <_ZN5Print5printEPKc>
  Serial.print(CalDirection); Serial.print("\t\t");
   d4fa4:	f003 fcf6 	bl	d8994 <_Z16_fetch_usbserialv>
   d4fa8:	6825      	ldr	r5, [r4, #0]
        if (n < 0 && base == 10) {
   d4faa:	2d00      	cmp	r5, #0
   d4fac:	4680      	mov	r8, r0
   d4fae:	f280 81e8 	bge.w	d5382 <loop+0x47a>
            t = print('-');
   d4fb2:	212d      	movs	r1, #45	; 0x2d
   d4fb4:	f003 f9f0 	bl	d8398 <_ZN5Print5printEc>
            val = -n;
   d4fb8:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d4fba:	220a      	movs	r2, #10
   d4fbc:	4640      	mov	r0, r8
   d4fbe:	f003 fa0a 	bl	d83d6 <_ZN5Print11printNumberEmh>
   d4fc2:	f003 fce7 	bl	d8994 <_Z16_fetch_usbserialv>
   d4fc6:	49aa      	ldr	r1, [pc, #680]	; (d5270 <loop+0x368>)
   d4fc8:	f003 f9e2 	bl	d8390 <_ZN5Print5printEPKc>
  getHeading(CalDirection);
   d4fcc:	6820      	ldr	r0, [r4, #0]
   d4fce:	f7ff fa79 	bl	d44c4 <_Z10getHeadingi>
  LastValue = CalDirection;
   d4fd2:	6823      	ldr	r3, [r4, #0]
   d4fd4:	603b      	str	r3, [r7, #0]
WindSpeed = Rotations * .45;
   d4fd6:	4ca7      	ldr	r4, [pc, #668]	; (d5274 <loop+0x36c>)
   d4fd8:	4da7      	ldr	r5, [pc, #668]	; (d5278 <loop+0x370>)
   d4fda:	6820      	ldr	r0, [r4, #0]
   d4fdc:	f006 fdbc 	bl	dbb58 <__aeabi_ui2d>
   d4fe0:	a399      	add	r3, pc, #612	; (adr r3, d5248 <loop+0x340>)
   d4fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fe6:	f006 fe31 	bl	dbc4c <__aeabi_dmul>
   d4fea:	f007 f927 	bl	dc23c <__aeabi_d2f>
   d4fee:	6028      	str	r0, [r5, #0]
Serial.print(Rotations); Serial.print("\t\t");
   d4ff0:	f003 fcd0 	bl	d8994 <_Z16_fetch_usbserialv>
   d4ff4:	220a      	movs	r2, #10
   d4ff6:	6821      	ldr	r1, [r4, #0]
   d4ff8:	f003 f9ed 	bl	d83d6 <_ZN5Print11printNumberEmh>
   d4ffc:	f003 fcca 	bl	d8994 <_Z16_fetch_usbserialv>
   d5000:	499b      	ldr	r1, [pc, #620]	; (d5270 <loop+0x368>)
   d5002:	f003 f9c5 	bl	d8390 <_ZN5Print5printEPKc>
Serial.print(WindSpeed); Serial.print("\t\t");  Serial.println(" mph");
   d5006:	f003 fcc5 	bl	d8994 <_Z16_fetch_usbserialv>
   d500a:	ed95 0a00 	vldr	s0, [r5]
   d500e:	2102      	movs	r1, #2
   d5010:	f003 fac8 	bl	d85a4 <_ZN5Print5printEfi>
   d5014:	f003 fcbe 	bl	d8994 <_Z16_fetch_usbserialv>
   d5018:	4995      	ldr	r1, [pc, #596]	; (d5270 <loop+0x368>)
   d501a:	f003 f9b9 	bl	d8390 <_ZN5Print5printEPKc>
   d501e:	f003 fcb9 	bl	d8994 <_Z16_fetch_usbserialv>
   d5022:	4996      	ldr	r1, [pc, #600]	; (d527c <loop+0x374>)
   d5024:	f003 f9cb 	bl	d83be <_ZN5Print7printlnEPKc>
   d5028:	f002 fe4c 	bl	d7cc4 <HAL_Timer_Get_Milli_Seconds>
Rotations = 0;  // Set Rotations count to 0 ready for calculations
   d502c:	2300      	movs	r3, #0
wind_speed_time = millis();
   d502e:	6030      	str	r0, [r6, #0]
Rotations = 0;  // Set Rotations count to 0 ready for calculations
   d5030:	6023      	str	r3, [r4, #0]
  bno.getEvent(&event);
   d5032:	a913      	add	r1, sp, #76	; 0x4c
   d5034:	4892      	ldr	r0, [pc, #584]	; (d5280 <loop+0x378>)
   d5036:	f001 fe6b 	bl	d6d10 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
printValues();
   d503a:	f7ff f86f 	bl	d411c <_Z11printValuesv>
  displayValues();
   d503e:	f7ff fec1 	bl	d4dc4 <_Z13displayValuesv>
  delay(delayTime);
   d5042:	4b90      	ldr	r3, [pc, #576]	; (d5284 <loop+0x37c>)
   d5044:	6818      	ldr	r0, [r3, #0]
   d5046:	f003 fb29 	bl	d869c <delay>
  if(!digitalRead(BUTTON_A)) display.print("A");
   d504a:	2004      	movs	r0, #4
   d504c:	f003 ff50 	bl	d8ef0 <digitalRead>
   d5050:	b918      	cbnz	r0, d505a <loop+0x152>
   d5052:	498d      	ldr	r1, [pc, #564]	; (d5288 <loop+0x380>)
   d5054:	488d      	ldr	r0, [pc, #564]	; (d528c <loop+0x384>)
   d5056:	f003 f99b 	bl	d8390 <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_B)) display.print("B");
   d505a:	2003      	movs	r0, #3
   d505c:	f003 ff48 	bl	d8ef0 <digitalRead>
   d5060:	b918      	cbnz	r0, d506a <loop+0x162>
   d5062:	498b      	ldr	r1, [pc, #556]	; (d5290 <loop+0x388>)
   d5064:	4889      	ldr	r0, [pc, #548]	; (d528c <loop+0x384>)
   d5066:	f003 f993 	bl	d8390 <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_C)) display.print("C");
   d506a:	2002      	movs	r0, #2
   d506c:	f003 ff40 	bl	d8ef0 <digitalRead>
   d5070:	b918      	cbnz	r0, d507a <loop+0x172>
   d5072:	4988      	ldr	r1, [pc, #544]	; (d5294 <loop+0x38c>)
   d5074:	4885      	ldr	r0, [pc, #532]	; (d528c <loop+0x384>)
   d5076:	f003 f98b 	bl	d8390 <_ZN5Print5printEPKc>
  delay(10);
   d507a:	200a      	movs	r0, #10
   d507c:	f003 fb0e 	bl	d869c <delay>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d5080:	f002 fe40 	bl	d7d04 <os_thread_yield>
  display.display();
   d5084:	4881      	ldr	r0, [pc, #516]	; (d528c <loop+0x384>)
  Serial.print(360 - (float)event.orientation.x);
   d5086:	ed9f 8a84 	vldr	s16, [pc, #528]	; d5298 <loop+0x390>
  display.display();
   d508a:	f002 fc02 	bl	d7892 <_ZN15Adafruit_SH110X7displayEv>
  Serial.print(F("Orientation: "));
   d508e:	f003 fc81 	bl	d8994 <_Z16_fetch_usbserialv>
   d5092:	4982      	ldr	r1, [pc, #520]	; (d529c <loop+0x394>)
   d5094:	f003 f983 	bl	d839e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(360 - (float)event.orientation.x);
   d5098:	f003 fc7c 	bl	d8994 <_Z16_fetch_usbserialv>
   d509c:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
   d50a0:	2102      	movs	r1, #2
   d50a2:	ee38 0a40 	vsub.f32	s0, s16, s0
   d50a6:	f003 fa7d 	bl	d85a4 <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d50aa:	f003 fc73 	bl	d8994 <_Z16_fetch_usbserialv>
   d50ae:	497c      	ldr	r1, [pc, #496]	; (d52a0 <loop+0x398>)
   d50b0:	f003 f975 	bl	d839e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.y);
   d50b4:	f003 fc6e 	bl	d8994 <_Z16_fetch_usbserialv>
   d50b8:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
   d50bc:	2102      	movs	r1, #2
   d50be:	f003 fa71 	bl	d85a4 <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d50c2:	f003 fc67 	bl	d8994 <_Z16_fetch_usbserialv>
   d50c6:	4976      	ldr	r1, [pc, #472]	; (d52a0 <loop+0x398>)
   d50c8:	f003 f969 	bl	d839e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.z);
   d50cc:	f003 fc62 	bl	d8994 <_Z16_fetch_usbserialv>
   d50d0:	ed9d 0a1a 	vldr	s0, [sp, #104]	; 0x68
   d50d4:	2102      	movs	r1, #2
   d50d6:	f003 fa65 	bl	d85a4 <_ZN5Print5printEfi>
  Serial.println(F(""));
   d50da:	f003 fc5b 	bl	d8994 <_Z16_fetch_usbserialv>
   d50de:	4971      	ldr	r1, [pc, #452]	; (d52a4 <loop+0x39c>)
   d50e0:	f003 f977 	bl	d83d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  imu::Quaternion quat = bno.getQuat();
   d50e4:	4866      	ldr	r0, [pc, #408]	; (d5280 <loop+0x378>)
   d50e6:	f001 fd47 	bl	d6b78 <_ZN15Adafruit_BNO0557getQuatEv>
   d50ea:	ed8d 0b0a 	vstr	d0, [sp, #40]	; 0x28
   d50ee:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
   d50f2:	ed8d 2b0e 	vstr	d2, [sp, #56]	; 0x38
   d50f6:	ed8d 3b10 	vstr	d3, [sp, #64]	; 0x40
  Serial.print(F("Quaternion: "));
   d50fa:	f003 fc4b 	bl	d8994 <_Z16_fetch_usbserialv>
   d50fe:	496a      	ldr	r1, [pc, #424]	; (d52a8 <loop+0x3a0>)
   d5100:	f003 f94d 	bl	d839e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.w());
   d5104:	f003 fc46 	bl	d8994 <_Z16_fetch_usbserialv>
   d5108:	4604      	mov	r4, r0
   d510a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d510e:	f007 f895 	bl	dc23c <__aeabi_d2f>
   d5112:	2102      	movs	r1, #2
   d5114:	ee00 0a10 	vmov	s0, r0
   d5118:	4620      	mov	r0, r4
   d511a:	f003 fa43 	bl	d85a4 <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d511e:	f003 fc39 	bl	d8994 <_Z16_fetch_usbserialv>
   d5122:	495f      	ldr	r1, [pc, #380]	; (d52a0 <loop+0x398>)
   d5124:	f003 f93b 	bl	d839e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.x());
   d5128:	f003 fc34 	bl	d8994 <_Z16_fetch_usbserialv>
   d512c:	4604      	mov	r4, r0
   d512e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d5132:	f007 f883 	bl	dc23c <__aeabi_d2f>
   d5136:	2102      	movs	r1, #2
   d5138:	ee00 0a10 	vmov	s0, r0
   d513c:	4620      	mov	r0, r4
   d513e:	f003 fa31 	bl	d85a4 <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d5142:	f003 fc27 	bl	d8994 <_Z16_fetch_usbserialv>
   d5146:	4956      	ldr	r1, [pc, #344]	; (d52a0 <loop+0x398>)
   d5148:	f003 f929 	bl	d839e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.y());
   d514c:	f003 fc22 	bl	d8994 <_Z16_fetch_usbserialv>
   d5150:	4604      	mov	r4, r0
   d5152:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   d5156:	f007 f871 	bl	dc23c <__aeabi_d2f>
   d515a:	2102      	movs	r1, #2
   d515c:	ee00 0a10 	vmov	s0, r0
   d5160:	4620      	mov	r0, r4
   d5162:	f003 fa1f 	bl	d85a4 <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d5166:	f003 fc15 	bl	d8994 <_Z16_fetch_usbserialv>
   d516a:	494d      	ldr	r1, [pc, #308]	; (d52a0 <loop+0x398>)
   d516c:	f003 f917 	bl	d839e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.z());
   d5170:	f003 fc10 	bl	d8994 <_Z16_fetch_usbserialv>
   d5174:	4604      	mov	r4, r0
   d5176:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   d517a:	f007 f85f 	bl	dc23c <__aeabi_d2f>
   d517e:	2102      	movs	r1, #2
   d5180:	ee00 0a10 	vmov	s0, r0
   d5184:	4620      	mov	r0, r4
   d5186:	f003 fa0d 	bl	d85a4 <_ZN5Print5printEfi>
  Serial.println(F(""));
   d518a:	f003 fc03 	bl	d8994 <_Z16_fetch_usbserialv>
   d518e:	4945      	ldr	r1, [pc, #276]	; (d52a4 <loop+0x39c>)
   d5190:	4c46      	ldr	r4, [pc, #280]	; (d52ac <loop+0x3a4>)
   d5192:	f003 f91e 	bl	d83d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  uint8_t sys, gyro, accel, mag = 0;
   d5196:	2300      	movs	r3, #0
   d5198:	f88d 300f 	strb.w	r3, [sp, #15]
  bno.getCalibration(&sys, &gyro, &accel, &mag);
   d519c:	f10d 030f 	add.w	r3, sp, #15
   d51a0:	f10d 020d 	add.w	r2, sp, #13
   d51a4:	a903      	add	r1, sp, #12
   d51a6:	9300      	str	r3, [sp, #0]
   d51a8:	4835      	ldr	r0, [pc, #212]	; (d5280 <loop+0x378>)
   d51aa:	f10d 030e 	add.w	r3, sp, #14
   d51ae:	f001 fbe4 	bl	d697a <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
  Serial.print(F("Calibration: "));
   d51b2:	f003 fbef 	bl	d8994 <_Z16_fetch_usbserialv>
   d51b6:	493e      	ldr	r1, [pc, #248]	; (d52b0 <loop+0x3a8>)
   d51b8:	f003 f8f1 	bl	d839e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(sys, DEC);
   d51bc:	f003 fbea 	bl	d8994 <_Z16_fetch_usbserialv>
   d51c0:	220a      	movs	r2, #10
   d51c2:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d51c6:	f7ff f9c3 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
  Serial.print(F(", "));
   d51ca:	f003 fbe3 	bl	d8994 <_Z16_fetch_usbserialv>
   d51ce:	4934      	ldr	r1, [pc, #208]	; (d52a0 <loop+0x398>)
   d51d0:	f003 f8e5 	bl	d839e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(gyro, DEC);
   d51d4:	f003 fbde 	bl	d8994 <_Z16_fetch_usbserialv>
   d51d8:	220a      	movs	r2, #10
   d51da:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d51de:	f7ff f9b7 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
  Serial.print(F(", "));
   d51e2:	f003 fbd7 	bl	d8994 <_Z16_fetch_usbserialv>
   d51e6:	492e      	ldr	r1, [pc, #184]	; (d52a0 <loop+0x398>)
   d51e8:	f003 f8d9 	bl	d839e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(accel, DEC);
   d51ec:	f003 fbd2 	bl	d8994 <_Z16_fetch_usbserialv>
   d51f0:	220a      	movs	r2, #10
   d51f2:	f89d 100e 	ldrb.w	r1, [sp, #14]
   d51f6:	f7ff f9ab 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
  Serial.print(F(", "));
   d51fa:	f003 fbcb 	bl	d8994 <_Z16_fetch_usbserialv>
   d51fe:	4928      	ldr	r1, [pc, #160]	; (d52a0 <loop+0x398>)
   d5200:	f003 f8cd 	bl	d839e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(mag, DEC);
   d5204:	f003 fbc6 	bl	d8994 <_Z16_fetch_usbserialv>
   d5208:	220a      	movs	r2, #10
   d520a:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d520e:	f7ff f99f 	bl	d4550 <_ZN5Print5printIhLi0EEEjT_i>
  Serial.println(F(""));
   d5212:	f003 fbbf 	bl	d8994 <_Z16_fetch_usbserialv>
   d5216:	4923      	ldr	r1, [pc, #140]	; (d52a4 <loop+0x39c>)
   d5218:	f003 f8db 	bl	d83d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("\n\n");
   d521c:	f003 fbba 	bl	d8994 <_Z16_fetch_usbserialv>
   d5220:	4924      	ldr	r1, [pc, #144]	; (d52b4 <loop+0x3ac>)
   d5222:	f003 f8cc 	bl	d83be <_ZN5Print7printlnEPKc>
  bno.getEvent(&event);
   d5226:	a913      	add	r1, sp, #76	; 0x4c
   d5228:	4815      	ldr	r0, [pc, #84]	; (d5280 <loop+0x378>)
   d522a:	f001 fd71 	bl	d6d10 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  Serial.print("X: ");
   d522e:	f003 fbb1 	bl	d8994 <_Z16_fetch_usbserialv>
   d5232:	4921      	ldr	r1, [pc, #132]	; (d52b8 <loop+0x3b0>)
   d5234:	f003 f8ac 	bl	d8390 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.x, 4);
   d5238:	f003 fbac 	bl	d8994 <_Z16_fetch_usbserialv>
   d523c:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
   d5240:	e03c      	b.n	d52bc <loop+0x3b4>
   d5242:	bf00      	nop
   d5244:	f3af 8000 	nop.w
   d5248:	cccccccd 	.word	0xcccccccd
   d524c:	3fdccccc 	.word	0x3fdccccc
   d5250:	2003e3d9 	.word	0x2003e3d9
   d5254:	2003e464 	.word	0x2003e464
   d5258:	2003e450 	.word	0x2003e450
   d525c:	2003e574 	.word	0x2003e574
   d5260:	2003e3d8 	.word	0x2003e3d8
   d5264:	2003e458 	.word	0x2003e458
   d5268:	2003e3dc 	.word	0x2003e3dc
   d526c:	2003e45c 	.word	0x2003e45c
   d5270:	000dcbb1 	.word	0x000dcbb1
   d5274:	2003e460 	.word	0x2003e460
   d5278:	2003e468 	.word	0x2003e468
   d527c:	000dcbb4 	.word	0x000dcbb4
   d5280:	2003e4b8 	.word	0x2003e4b8
   d5284:	2003e4d4 	.word	0x2003e4d4
   d5288:	000dcbb9 	.word	0x000dcbb9
   d528c:	2003e4d8 	.word	0x2003e4d8
   d5290:	000dd0b3 	.word	0x000dd0b3
   d5294:	000dcbbb 	.word	0x000dcbbb
   d5298:	43b40000 	.word	0x43b40000
   d529c:	000dcbbd 	.word	0x000dcbbd
   d52a0:	000dcbcb 	.word	0x000dcbcb
   d52a4:	000dcbb3 	.word	0x000dcbb3
   d52a8:	000dcbce 	.word	0x000dcbce
   d52ac:	2003e4d0 	.word	0x2003e4d0
   d52b0:	000dcbdb 	.word	0x000dcbdb
   d52b4:	000dcbe9 	.word	0x000dcbe9
   d52b8:	000dcbec 	.word	0x000dcbec
   d52bc:	2104      	movs	r1, #4
   d52be:	f003 f971 	bl	d85a4 <_ZN5Print5printEfi>
  Serial.print("\tY: ");
   d52c2:	f003 fb67 	bl	d8994 <_Z16_fetch_usbserialv>
   d52c6:	4930      	ldr	r1, [pc, #192]	; (d5388 <loop+0x480>)
   d52c8:	f003 f862 	bl	d8390 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.y, 4);
   d52cc:	f003 fb62 	bl	d8994 <_Z16_fetch_usbserialv>
   d52d0:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
   d52d4:	2104      	movs	r1, #4
   d52d6:	f003 f965 	bl	d85a4 <_ZN5Print5printEfi>
  Serial.print("\tZ: ");
   d52da:	f003 fb5b 	bl	d8994 <_Z16_fetch_usbserialv>
   d52de:	492b      	ldr	r1, [pc, #172]	; (d538c <loop+0x484>)
   d52e0:	f003 f856 	bl	d8390 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.z, 4);
   d52e4:	f003 fb56 	bl	d8994 <_Z16_fetch_usbserialv>
   d52e8:	ed9d 0a1a 	vldr	s0, [sp, #104]	; 0x68
   d52ec:	2104      	movs	r1, #4
   d52ee:	f003 f959 	bl	d85a4 <_ZN5Print5printEfi>
  Serial.println("");
   d52f2:	f003 fb4f 	bl	d8994 <_Z16_fetch_usbserialv>
   d52f6:	4926      	ldr	r1, [pc, #152]	; (d5390 <loop+0x488>)
   d52f8:	f003 f861 	bl	d83be <_ZN5Print7printlnEPKc>
  Serial.println("\n\n");
   d52fc:	f003 fb4a 	bl	d8994 <_Z16_fetch_usbserialv>
   d5300:	4924      	ldr	r1, [pc, #144]	; (d5394 <loop+0x48c>)
   d5302:	f003 f85c 	bl	d83be <_ZN5Print7printlnEPKc>
  compass_heading = event.orientation.x +285;
   d5306:	ed9f 7a24 	vldr	s14, [pc, #144]	; d5398 <loop+0x490>
   d530a:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
   d530e:	ee77 7a87 	vadd.f32	s15, s15, s14
  if(compass_heading > 360) {
   d5312:	eef4 7ac8 	vcmpe.f32	s15, s16
   d5316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    compass_heading = compass_heading - 360;
   d531a:	bfc8      	it	gt
   d531c:	ee77 7ac8 	vsubgt.f32	s15, s15, s16
   d5320:	edc4 7a00 	vstr	s15, [r4]
  Serial.print("compass heading:  ");
   d5324:	f003 fb36 	bl	d8994 <_Z16_fetch_usbserialv>
   d5328:	491c      	ldr	r1, [pc, #112]	; (d539c <loop+0x494>)
   d532a:	f003 f831 	bl	d8390 <_ZN5Print5printEPKc>
  Serial.print(compass_heading, 4);
   d532e:	f003 fb31 	bl	d8994 <_Z16_fetch_usbserialv>
   d5332:	2104      	movs	r1, #4
   d5334:	ed94 0a00 	vldr	s0, [r4]
  bno_compass_heading = get_compass_heading();
   d5338:	4c19      	ldr	r4, [pc, #100]	; (d53a0 <loop+0x498>)
  Serial.print(compass_heading, 4);
   d533a:	f003 f933 	bl	d85a4 <_ZN5Print5printEfi>
  bno_compass_heading = get_compass_heading();
   d533e:	f7ff f973 	bl	d4628 <_Z19get_compass_headingv>
   d5342:	ed84 0a00 	vstr	s0, [r4]
  Serial.print("psi from bno055\n");
   d5346:	f003 fb25 	bl	d8994 <_Z16_fetch_usbserialv>
   d534a:	4916      	ldr	r1, [pc, #88]	; (d53a4 <loop+0x49c>)
   d534c:	f003 f820 	bl	d8390 <_ZN5Print5printEPKc>
  Serial.print(bno_compass_heading);
   d5350:	f003 fb20 	bl	d8994 <_Z16_fetch_usbserialv>
   d5354:	ed94 0a00 	vldr	s0, [r4]
   d5358:	2102      	movs	r1, #2
   d535a:	f003 f923 	bl	d85a4 <_ZN5Print5printEfi>
    bno.getSensorOffsets(newCalib);
   d535e:	a904      	add	r1, sp, #16
   d5360:	4811      	ldr	r0, [pc, #68]	; (d53a8 <loop+0x4a0>)
   d5362:	f001 fb5b 	bl	d6a1c <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>
    displaySensorOffsets(newCalib);
   d5366:	a804      	add	r0, sp, #16
   d5368:	f7ff f800 	bl	d436c <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
      delay(BNO055_SAMPLERATE_DELAY_MS);
   d536c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5370:	f003 f994 	bl	d869c <delay>
}
   d5374:	b01c      	add	sp, #112	; 0x70
   d5376:	ecbd 8b02 	vpop	{d8}
   d537a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
   d537e:	4629      	mov	r1, r5
   d5380:	e607      	b.n	d4f92 <loop+0x8a>
   d5382:	4629      	mov	r1, r5
   d5384:	e619      	b.n	d4fba <loop+0xb2>
   d5386:	bf00      	nop
   d5388:	000dcbf0 	.word	0x000dcbf0
   d538c:	000dcbf5 	.word	0x000dcbf5
   d5390:	000dcbb3 	.word	0x000dcbb3
   d5394:	000dcbe9 	.word	0x000dcbe9
   d5398:	438e8000 	.word	0x438e8000
   d539c:	000dcbfa 	.word	0x000dcbfa
   d53a0:	2003e4cc 	.word	0x2003e4cc
   d53a4:	000dcc0d 	.word	0x000dcc0d
   d53a8:	2003e4b8 	.word	0x2003e4b8

000d53ac <setup>:
void setup(void) {
   d53ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
LastValue = 1;
   d53b0:	4bcf      	ldr	r3, [pc, #828]	; (d56f0 <setup+0x344>)
   d53b2:	2401      	movs	r4, #1
   d53b4:	601c      	str	r4, [r3, #0]
pinMode(vane_pin, INPUT);
   d53b6:	4bcf      	ldr	r3, [pc, #828]	; (d56f4 <setup+0x348>)
void setup(void) {
   d53b8:	b0a3      	sub	sp, #140	; 0x8c
pinMode(vane_pin, INPUT);
   d53ba:	7818      	ldrb	r0, [r3, #0]
   d53bc:	2100      	movs	r1, #0
   d53be:	f003 fd6d 	bl	d8e9c <pinMode>
pinMode(vane_switch, OUTPUT);
   d53c2:	4bcd      	ldr	r3, [pc, #820]	; (d56f8 <setup+0x34c>)
   d53c4:	4621      	mov	r1, r4
   d53c6:	7818      	ldrb	r0, [r3, #0]
pinMode(wind_pin, INPUT);
   d53c8:	4ccc      	ldr	r4, [pc, #816]	; (d56fc <setup+0x350>)
pinMode(vane_switch, OUTPUT);
   d53ca:	f003 fd67 	bl	d8e9c <pinMode>
Serial.println("Vane Value\tDirection\tHeading");
   d53ce:	f003 fae1 	bl	d8994 <_Z16_fetch_usbserialv>
   d53d2:	49cb      	ldr	r1, [pc, #812]	; (d5700 <setup+0x354>)
   d53d4:	f002 fff3 	bl	d83be <_ZN5Print7printlnEPKc>
pinMode(wind_pin, INPUT);
   d53d8:	7820      	ldrb	r0, [r4, #0]
   d53da:	2100      	movs	r1, #0
   d53dc:	f003 fd5e 	bl	d8e9c <pinMode>
attachInterrupt(wind_pin, isr_rotation, FALLING);
   d53e0:	2300      	movs	r3, #0
   d53e2:	9300      	str	r3, [sp, #0]
   d53e4:	2202      	movs	r2, #2
   d53e6:	f04f 33ff 	mov.w	r3, #4294967295
   d53ea:	49c6      	ldr	r1, [pc, #792]	; (d5704 <setup+0x358>)
   d53ec:	7820      	ldrb	r0, [r4, #0]
   d53ee:	f003 faf9 	bl	d89e4 <_Z15attachInterrupttPFvvE13InterruptModeah>
Serial.println("Davis Wind Speed Test");
   d53f2:	f003 facf 	bl	d8994 <_Z16_fetch_usbserialv>
   d53f6:	49c4      	ldr	r1, [pc, #784]	; (d5708 <setup+0x35c>)
   d53f8:	f002 ffe1 	bl	d83be <_ZN5Print7printlnEPKc>
Serial.println("Rotations\tMPH");
   d53fc:	f003 faca 	bl	d8994 <_Z16_fetch_usbserialv>
   d5400:	49c2      	ldr	r1, [pc, #776]	; (d570c <setup+0x360>)
   d5402:	f002 ffdc 	bl	d83be <_ZN5Print7printlnEPKc>
  Serial.begin(115200);
   d5406:	f003 fac5 	bl	d8994 <_Z16_fetch_usbserialv>
   d540a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d540e:	f003 faaf 	bl	d8970 <_ZN9USBSerial5beginEl>
    while(!Serial);    // time to get serial running
   d5412:	f003 fabf 	bl	d8994 <_Z16_fetch_usbserialv>
   d5416:	f003 fab2 	bl	d897e <_ZN9USBSerialcvbEv>
   d541a:	2800      	cmp	r0, #0
   d541c:	d0f9      	beq.n	d5412 <setup+0x66>
  display.begin(0x3C, true); // Address 0x3C default
   d541e:	4cbc      	ldr	r4, [pc, #752]	; (d5710 <setup+0x364>)
    Serial.println(F("BME280 test"));
   d5420:	f003 fab8 	bl	d8994 <_Z16_fetch_usbserialv>
   d5424:	49bb      	ldr	r1, [pc, #748]	; (d5714 <setup+0x368>)
   d5426:	f002 ffd4 	bl	d83d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("128x64 OLED FeatherWing test");
   d542a:	f003 fab3 	bl	d8994 <_Z16_fetch_usbserialv>
   d542e:	49ba      	ldr	r1, [pc, #744]	; (d5718 <setup+0x36c>)
   d5430:	f002 ffc5 	bl	d83be <_ZN5Print7printlnEPKc>
  display.begin(0x3C, true); // Address 0x3C default
   d5434:	2201      	movs	r2, #1
   d5436:	213c      	movs	r1, #60	; 0x3c
   d5438:	4620      	mov	r0, r4
   d543a:	f002 fb21 	bl	d7a80 <_ZN15Adafruit_SH11075beginEhb>
  Serial.println("OLED begun");
   d543e:	f003 faa9 	bl	d8994 <_Z16_fetch_usbserialv>
   d5442:	49b6      	ldr	r1, [pc, #728]	; (d571c <setup+0x370>)
   d5444:	f002 ffbb 	bl	d83be <_ZN5Print7printlnEPKc>
  display.display();
   d5448:	4620      	mov	r0, r4
   d544a:	f002 fa22 	bl	d7892 <_ZN15Adafruit_SH110X7displayEv>
  delay(1000);
   d544e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5452:	f003 f923 	bl	d869c <delay>
  display.clearDisplay();
   d5456:	4620      	mov	r0, r4
   d5458:	f001 fda8 	bl	d6fac <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d545c:	4620      	mov	r0, r4
   d545e:	f002 fa18 	bl	d7892 <_ZN15Adafruit_SH110X7displayEv>
  display.setRotation(1);
   d5462:	2101      	movs	r1, #1
   d5464:	4620      	mov	r0, r4
   d5466:	f001 ffa7 	bl	d73b8 <_ZN12Adafruit_GFX11setRotationEh>
  Serial.println("Button test");
   d546a:	f003 fa93 	bl	d8994 <_Z16_fetch_usbserialv>
   d546e:	49ac      	ldr	r1, [pc, #688]	; (d5720 <setup+0x374>)
   d5470:	f002 ffa5 	bl	d83be <_ZN5Print7printlnEPKc>
  pinMode(BUTTON_A, INPUT_PULLUP);
   d5474:	2102      	movs	r1, #2
   d5476:	2004      	movs	r0, #4
   d5478:	f003 fd10 	bl	d8e9c <pinMode>
  pinMode(BUTTON_B, INPUT_PULLUP);
   d547c:	2102      	movs	r1, #2
   d547e:	2003      	movs	r0, #3
   d5480:	f003 fd0c 	bl	d8e9c <pinMode>
  pinMode(BUTTON_C, INPUT_PULLUP);
   d5484:	2102      	movs	r1, #2
   d5486:	4608      	mov	r0, r1
   d5488:	f003 fd08 	bl	d8e9c <pinMode>
  display.setTextSize(1);
   d548c:	2101      	movs	r1, #1
   d548e:	4620      	mov	r0, r4
   d5490:	f002 f9f9 	bl	d7886 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d5494:	2200      	movs	r2, #0
   d5496:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d549a:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.print("Connecting to SSID\n'adafruit':");
   d549e:	49a1      	ldr	r1, [pc, #644]	; (d5724 <setup+0x378>)
   d54a0:	4620      	mov	r0, r4
   d54a2:	f002 ff75 	bl	d8390 <_ZN5Print5printEPKc>
  display.print("connected!");
   d54a6:	49a0      	ldr	r1, [pc, #640]	; (d5728 <setup+0x37c>)
   d54a8:	4620      	mov	r0, r4
   d54aa:	f002 ff71 	bl	d8390 <_ZN5Print5printEPKc>
  display.println("IP: 10.0.1.23");
   d54ae:	499f      	ldr	r1, [pc, #636]	; (d572c <setup+0x380>)
   d54b0:	4620      	mov	r0, r4
   d54b2:	f002 ff84 	bl	d83be <_ZN5Print7printlnEPKc>
  display.println("Sending val #0");
   d54b6:	499e      	ldr	r1, [pc, #632]	; (d5730 <setup+0x384>)
   d54b8:	4620      	mov	r0, r4
   d54ba:	f002 ff80 	bl	d83be <_ZN5Print7printlnEPKc>
  display.display(); // actually display all of the above
   d54be:	4620      	mov	r0, r4
   d54c0:	f002 f9e7 	bl	d7892 <_ZN15Adafruit_SH110X7displayEv>
    status = bme.begin();  
   d54c4:	489b      	ldr	r0, [pc, #620]	; (d5734 <setup+0x388>)
   d54c6:	f000 fee0 	bl	d628a <_ZN15Adafruit_BME2805beginEv>
    if (!status) {
   d54ca:	bb78      	cbnz	r0, d552c <setup+0x180>
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d54cc:	f003 fa62 	bl	d8994 <_Z16_fetch_usbserialv>
   d54d0:	4999      	ldr	r1, [pc, #612]	; (d5738 <setup+0x38c>)
   d54d2:	f002 ff74 	bl	d83be <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),16);
   d54d6:	f003 fa5d 	bl	d8994 <_Z16_fetch_usbserialv>
   d54da:	4998      	ldr	r1, [pc, #608]	; (d573c <setup+0x390>)
   d54dc:	f002 ff58 	bl	d8390 <_ZN5Print5printEPKc>
   d54e0:	f003 fa58 	bl	d8994 <_Z16_fetch_usbserialv>
   d54e4:	4604      	mov	r4, r0
   d54e6:	4893      	ldr	r0, [pc, #588]	; (d5734 <setup+0x388>)
   d54e8:	f000 fa52 	bl	d5990 <_ZN15Adafruit_BME2808sensorIDEv>
        return printNumber(val, base) + t;
   d54ec:	2210      	movs	r2, #16
   d54ee:	4601      	mov	r1, r0
   d54f0:	4620      	mov	r0, r4
   d54f2:	f002 ff70 	bl	d83d6 <_ZN5Print11printNumberEmh>
        n += println();
   d54f6:	4620      	mov	r0, r4
   d54f8:	f002 ff55 	bl	d83a6 <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d54fc:	f003 fa4a 	bl	d8994 <_Z16_fetch_usbserialv>
   d5500:	498f      	ldr	r1, [pc, #572]	; (d5740 <setup+0x394>)
   d5502:	f002 ff45 	bl	d8390 <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d5506:	f003 fa45 	bl	d8994 <_Z16_fetch_usbserialv>
   d550a:	498e      	ldr	r1, [pc, #568]	; (d5744 <setup+0x398>)
   d550c:	f002 ff40 	bl	d8390 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d5510:	f003 fa40 	bl	d8994 <_Z16_fetch_usbserialv>
   d5514:	498c      	ldr	r1, [pc, #560]	; (d5748 <setup+0x39c>)
   d5516:	f002 ff3b 	bl	d8390 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d551a:	f003 fa3b 	bl	d8994 <_Z16_fetch_usbserialv>
   d551e:	498b      	ldr	r1, [pc, #556]	; (d574c <setup+0x3a0>)
   d5520:	f002 ff36 	bl	d8390 <_ZN5Print5printEPKc>
        while (1) delay(10);
   d5524:	200a      	movs	r0, #10
   d5526:	f003 f8b9 	bl	d869c <delay>
   d552a:	e7fb      	b.n	d5524 <setup+0x178>
  Serial.begin(9600);
   d552c:	f003 fa32 	bl	d8994 <_Z16_fetch_usbserialv>
   d5530:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5534:	f003 fa1c 	bl	d8970 <_ZN9USBSerial5beginEl>
  Serial.println("WebSerial 3D Firmware"); Serial.println("");
   d5538:	f003 fa2c 	bl	d8994 <_Z16_fetch_usbserialv>
   d553c:	4984      	ldr	r1, [pc, #528]	; (d5750 <setup+0x3a4>)
   d553e:	f002 ff3e 	bl	d83be <_ZN5Print7printlnEPKc>
   d5542:	f003 fa27 	bl	d8994 <_Z16_fetch_usbserialv>
   d5546:	4983      	ldr	r1, [pc, #524]	; (d5754 <setup+0x3a8>)
   d5548:	f002 ff39 	bl	d83be <_ZN5Print7printlnEPKc>
if (i2ceeprom.begin(0x50)) {  // you can stick the new i2c addr in here, e.g. begin(0x51);
   d554c:	f003 fd2a 	bl	d8fa4 <_Z19__fetch_global_Wirev>
   d5550:	2150      	movs	r1, #80	; 0x50
   d5552:	4602      	mov	r2, r0
   d5554:	4880      	ldr	r0, [pc, #512]	; (d5758 <setup+0x3ac>)
   d5556:	f002 fb09 	bl	d7b6c <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>
   d555a:	2800      	cmp	r0, #0
   d555c:	d068      	beq.n	d5630 <setup+0x284>
    Serial.println("Found I2C EEPROM");
   d555e:	f003 fa19 	bl	d8994 <_Z16_fetch_usbserialv>
   d5562:	497e      	ldr	r1, [pc, #504]	; (d575c <setup+0x3b0>)
    if (i2ceeprom.read(max_addr) != test)
   d5564:	4d7c      	ldr	r5, [pc, #496]	; (d5758 <setup+0x3ac>)
        Serial.print("Failed to re-write address 0x");
   d5566:	f8df 8220 	ldr.w	r8, [pc, #544]	; d5788 <setup+0x3dc>
        Serial.print("Failed to write address 0x");
   d556a:	f8df 9220 	ldr.w	r9, [pc, #544]	; d578c <setup+0x3e0>
    Serial.println("Found I2C EEPROM");
   d556e:	f002 ff26 	bl	d83be <_ZN5Print7printlnEPKc>
  Serial.println("Testing size!");
   d5572:	f003 fa0f 	bl	d8994 <_Z16_fetch_usbserialv>
   d5576:	497a      	ldr	r1, [pc, #488]	; (d5760 <setup+0x3b4>)
   d5578:	f002 ff21 	bl	d83be <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0xFFFF; max_addr++) {
   d557c:	2401      	movs	r4, #1
    if (i2ceeprom.read(max_addr) != test)
   d557e:	b2a7      	uxth	r7, r4
   d5580:	4639      	mov	r1, r7
   d5582:	4628      	mov	r0, r5
   d5584:	f002 fb2a 	bl	d7bdc <_ZN19Adafruit_EEPROM_I2C4readEt>
   d5588:	2837      	cmp	r0, #55	; 0x37
   d558a:	d15a      	bne.n	d5642 <setup+0x296>
    if (! i2ceeprom.write(max_addr, (byte)~test)) {
   d558c:	22c8      	movs	r2, #200	; 0xc8
   d558e:	4639      	mov	r1, r7
   d5590:	4628      	mov	r0, r5
   d5592:	f002 fb01 	bl	d7b98 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   d5596:	b970      	cbnz	r0, d55b6 <setup+0x20a>
        Serial.print("Failed to write address 0x");
   d5598:	f003 f9fc 	bl	d8994 <_Z16_fetch_usbserialv>
   d559c:	4649      	mov	r1, r9
   d559e:	f002 fef7 	bl	d8390 <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   d55a2:	f003 f9f7 	bl	d8994 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d55a6:	2210      	movs	r2, #16
   d55a8:	4606      	mov	r6, r0
   d55aa:	4621      	mov	r1, r4
   d55ac:	f002 ff13 	bl	d83d6 <_ZN5Print11printNumberEmh>
        n += println();
   d55b0:	4630      	mov	r0, r6
   d55b2:	f002 fef8 	bl	d83a6 <_ZN5Print7printlnEv>
    uint8_t val0 = i2ceeprom.read(0);
   d55b6:	2100      	movs	r1, #0
   d55b8:	4628      	mov	r0, r5
   d55ba:	f002 fb0f 	bl	d7bdc <_ZN19Adafruit_EEPROM_I2C4readEt>
    if (! i2ceeprom.write(max_addr, test)) {
   d55be:	2237      	movs	r2, #55	; 0x37
    uint8_t val0 = i2ceeprom.read(0);
   d55c0:	4606      	mov	r6, r0
    if (! i2ceeprom.write(max_addr, test)) {
   d55c2:	4639      	mov	r1, r7
   d55c4:	4628      	mov	r0, r5
   d55c6:	f002 fae7 	bl	d7b98 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   d55ca:	b970      	cbnz	r0, d55ea <setup+0x23e>
        Serial.print("Failed to re-write address 0x");
   d55cc:	f003 f9e2 	bl	d8994 <_Z16_fetch_usbserialv>
   d55d0:	4641      	mov	r1, r8
   d55d2:	f002 fedd 	bl	d8390 <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   d55d6:	f003 f9dd 	bl	d8994 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d55da:	2210      	movs	r2, #16
   d55dc:	4607      	mov	r7, r0
   d55de:	4621      	mov	r1, r4
   d55e0:	f002 fef9 	bl	d83d6 <_ZN5Print11printNumberEmh>
        n += println();
   d55e4:	4638      	mov	r0, r7
   d55e6:	f002 fede 	bl	d83a6 <_ZN5Print7printlnEv>
    if (val0 == (byte)~test) {
   d55ea:	2ec8      	cmp	r6, #200	; 0xc8
   d55ec:	d129      	bne.n	d5642 <setup+0x296>
      Serial.println("Found max address");
   d55ee:	f003 f9d1 	bl	d8994 <_Z16_fetch_usbserialv>
   d55f2:	495c      	ldr	r1, [pc, #368]	; (d5764 <setup+0x3b8>)
   d55f4:	f002 fee3 	bl	d83be <_ZN5Print7printlnEPKc>
  Serial.print("This EEPROM can store ");
   d55f8:	f003 f9cc 	bl	d8994 <_Z16_fetch_usbserialv>
   d55fc:	495a      	ldr	r1, [pc, #360]	; (d5768 <setup+0x3bc>)
   d55fe:	f002 fec7 	bl	d8390 <_ZN5Print5printEPKc>
  Serial.print(max_addr);
   d5602:	f003 f9c7 	bl	d8994 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d5606:	220a      	movs	r2, #10
   d5608:	4621      	mov	r1, r4
   d560a:	f002 fee4 	bl	d83d6 <_ZN5Print11printNumberEmh>
  Serial.println(" bytes");
   d560e:	f003 f9c1 	bl	d8994 <_Z16_fetch_usbserialv>
   d5612:	4956      	ldr	r1, [pc, #344]	; (d576c <setup+0x3c0>)
   d5614:	f002 fed3 	bl	d83be <_ZN5Print7printlnEPKc>
  if(!bno.begin())
   d5618:	4855      	ldr	r0, [pc, #340]	; (d5770 <setup+0x3c4>)
   d561a:	210c      	movs	r1, #12
   d561c:	f001 f93c 	bl	d6898 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
   d5620:	4604      	mov	r4, r0
   d5622:	b9a0      	cbnz	r0, d564e <setup+0x2a2>
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
   d5624:	f003 f9b6 	bl	d8994 <_Z16_fetch_usbserialv>
   d5628:	4952      	ldr	r1, [pc, #328]	; (d5774 <setup+0x3c8>)
   d562a:	f002 feb1 	bl	d8390 <_ZN5Print5printEPKc>
    while(1);
   d562e:	e7fe      	b.n	d562e <setup+0x282>
    Serial.println("I2C EEPROM not identified ... check your connections?\r\n");
   d5630:	f003 f9b0 	bl	d8994 <_Z16_fetch_usbserialv>
   d5634:	4950      	ldr	r1, [pc, #320]	; (d5778 <setup+0x3cc>)
   d5636:	f002 fec2 	bl	d83be <_ZN5Print7printlnEPKc>
    while (1) delay(10);
   d563a:	200a      	movs	r0, #10
   d563c:	f003 f82e 	bl	d869c <delay>
   d5640:	e7fb      	b.n	d563a <setup+0x28e>
  for (max_addr = 1; max_addr < 0xFFFF; max_addr++) {
   d5642:	3401      	adds	r4, #1
   d5644:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5648:	429c      	cmp	r4, r3
   d564a:	d198      	bne.n	d557e <setup+0x1d2>
   d564c:	e7d4      	b.n	d55f8 <setup+0x24c>
  delay(1000);
   d564e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5652:	f003 f823 	bl	d869c <delay>
  bno.setExtCrystalUse(true);
   d5656:	2101      	movs	r1, #1
   d5658:	4845      	ldr	r0, [pc, #276]	; (d5770 <setup+0x3c4>)
   d565a:	f001 f86b 	bl	d6734 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
  displaySensorDetails();
   d565e:	f7fe fde9 	bl	d4234 <_Z20displaySensorDetailsv>
    EEPROM.get(eeAddress, bnoID);
   d5662:	f003 fc6f 	bl	d8f44 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d5666:	2204      	movs	r2, #4
   d5668:	a902      	add	r1, sp, #8
   d566a:	2000      	movs	r0, #0
   d566c:	f002 fb3a 	bl	d7ce4 <HAL_EEPROM_Get>
    bno.getSensor(&sensor);
   d5670:	483f      	ldr	r0, [pc, #252]	; (d5770 <setup+0x3c4>)
   d5672:	a918      	add	r1, sp, #96	; 0x60
   d5674:	f001 f802 	bl	d667c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    if (bnoID != sensor.sensor_id)
   d5678:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   d567a:	9b02      	ldr	r3, [sp, #8]
   d567c:	429a      	cmp	r2, r3
   d567e:	f000 8087 	beq.w	d5790 <setup+0x3e4>
        Serial.println("\nNo Calibration Data for this sensor exists in EEPROM");
   d5682:	f003 f987 	bl	d8994 <_Z16_fetch_usbserialv>
   d5686:	493d      	ldr	r1, [pc, #244]	; (d577c <setup+0x3d0>)
   d5688:	f002 fe99 	bl	d83be <_ZN5Print7printlnEPKc>
        delay(500);
   d568c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5690:	f003 f804 	bl	d869c <delay>
    bool foundCalib = false;
   d5694:	2400      	movs	r4, #0
    delay(1000);
   d5696:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d569a:	f002 ffff 	bl	d869c <delay>
    displaySensorDetails();
   d569e:	f7fe fdc9 	bl	d4234 <_Z20displaySensorDetailsv>
    displaySensorStatus();
   d56a2:	f7ff fb11 	bl	d4cc8 <_Z19displaySensorStatusv>
    bno.setExtCrystalUse(true);
   d56a6:	2101      	movs	r1, #1
   d56a8:	4831      	ldr	r0, [pc, #196]	; (d5770 <setup+0x3c4>)
   d56aa:	f001 f843 	bl	d6734 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
   d56ae:	f002 fb09 	bl	d7cc4 <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
   d56b2:	4b33      	ldr	r3, [pc, #204]	; (d5780 <setup+0x3d4>)
    bno.getEvent(&event);
   d56b4:	a90f      	add	r1, sp, #60	; 0x3c
millisOld=millis();
   d56b6:	6018      	str	r0, [r3, #0]
    bno.getEvent(&event);
   d56b8:	482d      	ldr	r0, [pc, #180]	; (d5770 <setup+0x3c4>)
   d56ba:	f001 fb29 	bl	d6d10 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
    if (foundCalib){
   d56be:	2c00      	cmp	r4, #0
   d56c0:	f000 8084 	beq.w	d57cc <setup+0x420>
        Serial.println("Move sensor slightly to calibrate magnetometers");
   d56c4:	f003 f966 	bl	d8994 <_Z16_fetch_usbserialv>
   d56c8:	492e      	ldr	r1, [pc, #184]	; (d5784 <setup+0x3d8>)
        while (!bno.isFullyCalibrated())
   d56ca:	4c29      	ldr	r4, [pc, #164]	; (d5770 <setup+0x3c4>)
        Serial.println("Move sensor slightly to calibrate magnetometers");
   d56cc:	f002 fe77 	bl	d83be <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
   d56d0:	4620      	mov	r0, r4
   d56d2:	f001 f96a 	bl	d69aa <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d56d6:	2800      	cmp	r0, #0
   d56d8:	f040 80b8 	bne.w	d584c <setup+0x4a0>
            bno.getEvent(&event);
   d56dc:	a90f      	add	r1, sp, #60	; 0x3c
   d56de:	4620      	mov	r0, r4
   d56e0:	f001 fb16 	bl	d6d10 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            delay(BNO055_SAMPLERATE_DELAY_MS);
   d56e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d56e8:	f002 ffd8 	bl	d869c <delay>
        while (!bno.isFullyCalibrated())
   d56ec:	e7f0      	b.n	d56d0 <setup+0x324>
   d56ee:	bf00      	nop
   d56f0:	2003e45c 	.word	0x2003e45c
   d56f4:	2003e3d8 	.word	0x2003e3d8
   d56f8:	2003e3d9 	.word	0x2003e3d9
   d56fc:	2003e3da 	.word	0x2003e3da
   d5700:	000dcc1e 	.word	0x000dcc1e
   d5704:	000d40c9 	.word	0x000d40c9
   d5708:	000dcc3b 	.word	0x000dcc3b
   d570c:	000dcc51 	.word	0x000dcc51
   d5710:	2003e4d8 	.word	0x2003e4d8
   d5714:	000dcc5f 	.word	0x000dcc5f
   d5718:	000dcc6b 	.word	0x000dcc6b
   d571c:	000dcc88 	.word	0x000dcc88
   d5720:	000dcc93 	.word	0x000dcc93
   d5724:	000dcc9f 	.word	0x000dcc9f
   d5728:	000dccbe 	.word	0x000dccbe
   d572c:	000dccc9 	.word	0x000dccc9
   d5730:	000dccd7 	.word	0x000dccd7
   d5734:	2003e474 	.word	0x2003e474
   d5738:	000dcce6 	.word	0x000dcce6
   d573c:	000dcd2e 	.word	0x000dcd2e
   d5740:	000dcd3f 	.word	0x000dcd3f
   d5744:	000dcd86 	.word	0x000dcd86
   d5748:	000dcdb0 	.word	0x000dcdb0
   d574c:	000dcdda 	.word	0x000dcdda
   d5750:	000dce04 	.word	0x000dce04
   d5754:	000dcbb3 	.word	0x000dcbb3
   d5758:	2003e534 	.word	0x2003e534
   d575c:	000dce1a 	.word	0x000dce1a
   d5760:	000dce2b 	.word	0x000dce2b
   d5764:	000dceaa 	.word	0x000dceaa
   d5768:	000dcebc 	.word	0x000dcebc
   d576c:	000dced3 	.word	0x000dced3
   d5770:	2003e4b8 	.word	0x2003e4b8
   d5774:	000dceda 	.word	0x000dceda
   d5778:	000dce39 	.word	0x000dce39
   d577c:	000dcf17 	.word	0x000dcf17
   d5780:	2003e53c 	.word	0x2003e53c
   d5784:	000dcfcf 	.word	0x000dcfcf
   d5788:	000dce8c 	.word	0x000dce8c
   d578c:	000dce71 	.word	0x000dce71
        Serial.println("\nFound Calibration for this sensor in EEPROM.");
   d5790:	f003 f900 	bl	d8994 <_Z16_fetch_usbserialv>
   d5794:	494d      	ldr	r1, [pc, #308]	; (d58cc <setup+0x520>)
   d5796:	f002 fe12 	bl	d83be <_ZN5Print7printlnEPKc>
        EEPROM.get(eeAddress, calibrationData);
   d579a:	f003 fbd3 	bl	d8f44 <_Z21__fetch_global_EEPROMv>
   d579e:	2216      	movs	r2, #22
   d57a0:	a903      	add	r1, sp, #12
   d57a2:	2004      	movs	r0, #4
   d57a4:	f002 fa9e 	bl	d7ce4 <HAL_EEPROM_Get>
        displaySensorOffsets(calibrationData);
   d57a8:	a803      	add	r0, sp, #12
   d57aa:	f7fe fddf 	bl	d436c <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
        Serial.println("\n\nRestoring Calibration data to the BNO055...");
   d57ae:	f003 f8f1 	bl	d8994 <_Z16_fetch_usbserialv>
   d57b2:	4947      	ldr	r1, [pc, #284]	; (d58d0 <setup+0x524>)
   d57b4:	f002 fe03 	bl	d83be <_ZN5Print7printlnEPKc>
        bno.setSensorOffsets(calibrationData);
   d57b8:	a903      	add	r1, sp, #12
   d57ba:	4846      	ldr	r0, [pc, #280]	; (d58d4 <setup+0x528>)
   d57bc:	f000 ffdd 	bl	d677a <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>
        Serial.println("\n\nCalibration data loaded into BNO055");
   d57c0:	f003 f8e8 	bl	d8994 <_Z16_fetch_usbserialv>
   d57c4:	4944      	ldr	r1, [pc, #272]	; (d58d8 <setup+0x52c>)
   d57c6:	f002 fdfa 	bl	d83be <_ZN5Print7printlnEPKc>
        foundCalib = true;
   d57ca:	e764      	b.n	d5696 <setup+0x2ea>
        Serial.println("Please Calibrate Sensor: ");
   d57cc:	f003 f8e2 	bl	d8994 <_Z16_fetch_usbserialv>
   d57d0:	4942      	ldr	r1, [pc, #264]	; (d58dc <setup+0x530>)
        while (!bno.isFullyCalibrated())
   d57d2:	4c40      	ldr	r4, [pc, #256]	; (d58d4 <setup+0x528>)
            Serial.print("X: ");
   d57d4:	4e42      	ldr	r6, [pc, #264]	; (d58e0 <setup+0x534>)
            Serial.print("\tY: ");
   d57d6:	4d43      	ldr	r5, [pc, #268]	; (d58e4 <setup+0x538>)
        Serial.println("Please Calibrate Sensor: ");
   d57d8:	f002 fdf1 	bl	d83be <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
   d57dc:	4620      	mov	r0, r4
   d57de:	f001 f8e4 	bl	d69aa <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d57e2:	bb98      	cbnz	r0, d584c <setup+0x4a0>
            bno.getEvent(&event);
   d57e4:	a90f      	add	r1, sp, #60	; 0x3c
   d57e6:	4620      	mov	r0, r4
   d57e8:	f001 fa92 	bl	d6d10 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            Serial.print("X: ");
   d57ec:	f003 f8d2 	bl	d8994 <_Z16_fetch_usbserialv>
   d57f0:	4631      	mov	r1, r6
   d57f2:	f002 fdcd 	bl	d8390 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.x, 4);
   d57f6:	f003 f8cd 	bl	d8994 <_Z16_fetch_usbserialv>
   d57fa:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   d57fe:	2104      	movs	r1, #4
   d5800:	f002 fed0 	bl	d85a4 <_ZN5Print5printEfi>
            Serial.print("\tY: ");
   d5804:	f003 f8c6 	bl	d8994 <_Z16_fetch_usbserialv>
   d5808:	4629      	mov	r1, r5
   d580a:	f002 fdc1 	bl	d8390 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.y, 4);
   d580e:	f003 f8c1 	bl	d8994 <_Z16_fetch_usbserialv>
   d5812:	ed9d 0a15 	vldr	s0, [sp, #84]	; 0x54
   d5816:	2104      	movs	r1, #4
   d5818:	f002 fec4 	bl	d85a4 <_ZN5Print5printEfi>
            Serial.print("\tZ: ");
   d581c:	f003 f8ba 	bl	d8994 <_Z16_fetch_usbserialv>
   d5820:	4931      	ldr	r1, [pc, #196]	; (d58e8 <setup+0x53c>)
   d5822:	f002 fdb5 	bl	d8390 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.z, 4);
   d5826:	f003 f8b5 	bl	d8994 <_Z16_fetch_usbserialv>
   d582a:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   d582e:	2104      	movs	r1, #4
   d5830:	f002 feb8 	bl	d85a4 <_ZN5Print5printEfi>
            displayCalStatus();
   d5834:	f7fe fe94 	bl	d4560 <_Z16displayCalStatusv>
            Serial.println("");
   d5838:	f003 f8ac 	bl	d8994 <_Z16_fetch_usbserialv>
   d583c:	492b      	ldr	r1, [pc, #172]	; (d58ec <setup+0x540>)
   d583e:	f002 fdbe 	bl	d83be <_ZN5Print7printlnEPKc>
            delay(BNO055_SAMPLERATE_DELAY_MS);
   d5842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5846:	f002 ff29 	bl	d869c <delay>
        while (!bno.isFullyCalibrated())
   d584a:	e7c7      	b.n	d57dc <setup+0x430>
    Serial.println("\nFully calibrated!");
   d584c:	f003 f8a2 	bl	d8994 <_Z16_fetch_usbserialv>
   d5850:	4927      	ldr	r1, [pc, #156]	; (d58f0 <setup+0x544>)
   d5852:	f002 fdb4 	bl	d83be <_ZN5Print7printlnEPKc>
    Serial.println("--------------------------------");
   d5856:	f003 f89d 	bl	d8994 <_Z16_fetch_usbserialv>
   d585a:	4926      	ldr	r1, [pc, #152]	; (d58f4 <setup+0x548>)
   d585c:	f002 fdaf 	bl	d83be <_ZN5Print7printlnEPKc>
    Serial.println("Calibration Results: ");
   d5860:	f003 f898 	bl	d8994 <_Z16_fetch_usbserialv>
   d5864:	4924      	ldr	r1, [pc, #144]	; (d58f8 <setup+0x54c>)
   d5866:	f002 fdaa 	bl	d83be <_ZN5Print7printlnEPKc>
    bno.getSensorOffsets(newCalib);
   d586a:	a909      	add	r1, sp, #36	; 0x24
   d586c:	4819      	ldr	r0, [pc, #100]	; (d58d4 <setup+0x528>)
   d586e:	f001 f8d5 	bl	d6a1c <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>
    displaySensorOffsets(newCalib);
   d5872:	a809      	add	r0, sp, #36	; 0x24
   d5874:	f7fe fd7a 	bl	d436c <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
    Serial.println("\n\nStoring calibration data to EEPROM...");
   d5878:	f003 f88c 	bl	d8994 <_Z16_fetch_usbserialv>
   d587c:	491f      	ldr	r1, [pc, #124]	; (d58fc <setup+0x550>)
   d587e:	f002 fd9e 	bl	d83be <_ZN5Print7printlnEPKc>
    bno.getSensor(&sensor);
   d5882:	a918      	add	r1, sp, #96	; 0x60
   d5884:	4813      	ldr	r0, [pc, #76]	; (d58d4 <setup+0x528>)
   d5886:	f000 fef9 	bl	d667c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    bnoID = sensor.sensor_id;
   d588a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d588c:	9302      	str	r3, [sp, #8]
    EEPROM.put(eeAddress, bnoID);
   d588e:	f003 fb59 	bl	d8f44 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5892:	a902      	add	r1, sp, #8
   d5894:	2204      	movs	r2, #4
   d5896:	2000      	movs	r0, #0
   d5898:	f002 fa2c 	bl	d7cf4 <HAL_EEPROM_Put>
    EEPROM.put(eeAddress, newCalib);
   d589c:	f003 fb52 	bl	d8f44 <_Z21__fetch_global_EEPROMv>
   d58a0:	2216      	movs	r2, #22
   d58a2:	a909      	add	r1, sp, #36	; 0x24
   d58a4:	2004      	movs	r0, #4
   d58a6:	f002 fa25 	bl	d7cf4 <HAL_EEPROM_Put>
    Serial.println("Data stored to EEPROM.");
   d58aa:	f003 f873 	bl	d8994 <_Z16_fetch_usbserialv>
   d58ae:	4914      	ldr	r1, [pc, #80]	; (d5900 <setup+0x554>)
   d58b0:	f002 fd85 	bl	d83be <_ZN5Print7printlnEPKc>
    Serial.println("\n--------------------------------\n");
   d58b4:	f003 f86e 	bl	d8994 <_Z16_fetch_usbserialv>
   d58b8:	4912      	ldr	r1, [pc, #72]	; (d5904 <setup+0x558>)
   d58ba:	f002 fd80 	bl	d83be <_ZN5Print7printlnEPKc>
    delay(500);
   d58be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d58c2:	f002 feeb 	bl	d869c <delay>
}
   d58c6:	b023      	add	sp, #140	; 0x8c
   d58c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d58cc:	000dcf4d 	.word	0x000dcf4d
   d58d0:	000dcf7b 	.word	0x000dcf7b
   d58d4:	2003e4b8 	.word	0x2003e4b8
   d58d8:	000dcfa9 	.word	0x000dcfa9
   d58dc:	000dcfff 	.word	0x000dcfff
   d58e0:	000dcbec 	.word	0x000dcbec
   d58e4:	000dcbf0 	.word	0x000dcbf0
   d58e8:	000dcbf5 	.word	0x000dcbf5
   d58ec:	000dcbb3 	.word	0x000dcbb3
   d58f0:	000dd019 	.word	0x000dd019
   d58f4:	000dca48 	.word	0x000dca48
   d58f8:	000dd02c 	.word	0x000dd02c
   d58fc:	000dd042 	.word	0x000dd042
   d5900:	000dd06a 	.word	0x000dd06a
   d5904:	000dd081 	.word	0x000dd081

000d5908 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d5908:	4770      	bx	lr

000d590a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d590a:	b510      	push	{r4, lr}
  }
   d590c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d590e:	4604      	mov	r4, r0
  }
   d5910:	f003 fb6c 	bl	d8fec <_ZdlPvj>
   d5914:	4620      	mov	r0, r4
   d5916:	bd10      	pop	{r4, pc}

000d5918 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5918:	b40e      	push	{r1, r2, r3}
   d591a:	b503      	push	{r0, r1, lr}
   d591c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d591e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5920:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d5924:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d5926:	f002 fe69 	bl	d85fc <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d592a:	b002      	add	sp, #8
   d592c:	f85d eb04 	ldr.w	lr, [sp], #4
   d5930:	b003      	add	sp, #12
   d5932:	4770      	bx	lr

000d5934 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5934:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5936:	4604      	mov	r4, r0
   d5938:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d593a:	7922      	ldrb	r2, [r4, #4]
   d593c:	68a3      	ldr	r3, [r4, #8]
   d593e:	b132      	cbz	r2, d594e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d5940:	b9a3      	cbnz	r3, d596c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d5942:	490b      	ldr	r1, [pc, #44]	; (d5970 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d5944:	b002      	add	sp, #8
   d5946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d594a:	f002 bd21 	b.w	d8390 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d594e:	4a09      	ldr	r2, [pc, #36]	; (d5974 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d5950:	7b26      	ldrb	r6, [r4, #12]
   d5952:	4d09      	ldr	r5, [pc, #36]	; (d5978 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d5954:	4909      	ldr	r1, [pc, #36]	; (d597c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d5956:	7b64      	ldrb	r4, [r4, #13]
   d5958:	2e01      	cmp	r6, #1
   d595a:	bf18      	it	ne
   d595c:	4629      	movne	r1, r5
   d595e:	e9cd 1400 	strd	r1, r4, [sp]
   d5962:	4907      	ldr	r1, [pc, #28]	; (d5980 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d5964:	f7ff ffd8 	bl	d5918 <_ZN5Print6printfEPKcz>
  }
   d5968:	b002      	add	sp, #8
   d596a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d596c:	4a05      	ldr	r2, [pc, #20]	; (d5984 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d596e:	e7ef      	b.n	d5950 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d5970:	000dd0b5 	.word	0x000dd0b5
   d5974:	000dcbb3 	.word	0x000dcbb3
   d5978:	000dd0b1 	.word	0x000dd0b1
   d597c:	000dd0ad 	.word	0x000dd0ad
   d5980:	000dd0cb 	.word	0x000dd0cb
   d5984:	000dd0a4 	.word	0x000dd0a4

000d5988 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d5988:	f04f 33ff 	mov.w	r3, #4294967295
   d598c:	6103      	str	r3, [r0, #16]
{ }
   d598e:	4770      	bx	lr

000d5990 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d5990:	6880      	ldr	r0, [r0, #8]
   d5992:	4770      	bx	lr

000d5994 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d5994:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d5996:	4c0b      	ldr	r4, [pc, #44]	; (d59c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d5998:	7821      	ldrb	r1, [r4, #0]
   d599a:	f3bf 8f5b 	dmb	ish
   d599e:	f011 0101 	ands.w	r1, r1, #1
   d59a2:	d10b      	bne.n	d59bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d59a4:	4620      	mov	r0, r4
   d59a6:	9101      	str	r1, [sp, #4]
   d59a8:	f7fe fb86 	bl	d40b8 <__cxa_guard_acquire>
   d59ac:	9901      	ldr	r1, [sp, #4]
   d59ae:	b128      	cbz	r0, d59bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d59b0:	4805      	ldr	r0, [pc, #20]	; (d59c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d59b2:	f002 fbef 	bl	d8194 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d59b6:	4620      	mov	r0, r4
   d59b8:	f7fe fb83 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d59bc:	4802      	ldr	r0, [pc, #8]	; (d59c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d59be:	b002      	add	sp, #8
   d59c0:	bd10      	pop	{r4, pc}
   d59c2:	bf00      	nop
   d59c4:	2003e578 	.word	0x2003e578
   d59c8:	2003e57c 	.word	0x2003e57c

000d59cc <_ZN15Adafruit_BME2807spixferEh>:
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d59cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sck == -1)
   d59d0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d59d4:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d59d6:	4605      	mov	r5, r0
   d59d8:	460f      	mov	r7, r1
    if (_sck == -1)
   d59da:	d106      	bne.n	d59ea <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d59dc:	f7ff ffda 	bl	d5994 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d59e0:	4639      	mov	r1, r7
}
   d59e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d59e6:	f002 bc77 	b.w	d82d8 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d59ea:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d59ec:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d59ee:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d59f2:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d59f6:	2100      	movs	r1, #0
   d59f8:	b280      	uxth	r0, r0
   d59fa:	f003 fa60 	bl	d8ebe <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d59fe:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d5a02:	fa08 f106 	lsl.w	r1, r8, r6
   d5a06:	4039      	ands	r1, r7
   d5a08:	b280      	uxth	r0, r0
   d5a0a:	f003 fa58 	bl	d8ebe <digitalWrite>
        digitalWrite(_sck, HIGH);
   d5a0e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d5a12:	2101      	movs	r1, #1
   d5a14:	b280      	uxth	r0, r0
   d5a16:	f003 fa52 	bl	d8ebe <digitalWrite>
        if (digitalRead(_miso))
   d5a1a:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d5a1e:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d5a20:	b280      	uxth	r0, r0
        reply <<= 1;
   d5a22:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d5a24:	f003 fa64 	bl	d8ef0 <digitalRead>
   d5a28:	b108      	cbz	r0, d5a2e <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d5a2a:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d5a2e:	3e01      	subs	r6, #1
   d5a30:	d2df      	bcs.n	d59f2 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d5a32:	4620      	mov	r0, r4
   d5a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5a38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d5a38:	b508      	push	{r3, lr}
        instance().endTransaction();
   d5a3a:	f7ff ffab 	bl	d5994 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d5a3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d5a42:	f002 bbc2 	b.w	d81ca <_ZN8SPIClass14endTransactionEv>

000d5a46 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d5a46:	b507      	push	{r0, r1, r2, lr}
   d5a48:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d5a4a:	f7ff ffa3 	bl	d5994 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5a4e:	9901      	ldr	r1, [sp, #4]
    }
   d5a50:	b003      	add	sp, #12
   d5a52:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d5a56:	f002 bbd1 	b.w	d81fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d5a5c <_ZN15Adafruit_BME2806read24Eh>:
{
   d5a5c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5a5e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5a62:	3301      	adds	r3, #1
{
   d5a64:	b085      	sub	sp, #20
   d5a66:	4604      	mov	r4, r0
   d5a68:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5a6a:	d123      	bne.n	d5ab4 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5a6c:	7901      	ldrb	r1, [r0, #4]
   d5a6e:	6800      	ldr	r0, [r0, #0]
   d5a70:	f003 f91c 	bl	d8cac <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5a74:	6820      	ldr	r0, [r4, #0]
   d5a76:	6803      	ldr	r3, [r0, #0]
   d5a78:	4629      	mov	r1, r5
   d5a7a:	689b      	ldr	r3, [r3, #8]
   d5a7c:	4798      	blx	r3
        _wire -> endTransmission();
   d5a7e:	6820      	ldr	r0, [r4, #0]
   d5a80:	f003 f91c 	bl	d8cbc <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d5a84:	7921      	ldrb	r1, [r4, #4]
   d5a86:	6820      	ldr	r0, [r4, #0]
   d5a88:	2203      	movs	r2, #3
   d5a8a:	f003 f90c 	bl	d8ca6 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d5a8e:	6820      	ldr	r0, [r4, #0]
   d5a90:	6803      	ldr	r3, [r0, #0]
   d5a92:	695b      	ldr	r3, [r3, #20]
   d5a94:	4798      	blx	r3
        value <<= 8;
   d5a96:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5a98:	6820      	ldr	r0, [r4, #0]
   d5a9a:	6803      	ldr	r3, [r0, #0]
   d5a9c:	695b      	ldr	r3, [r3, #20]
   d5a9e:	4798      	blx	r3
   d5aa0:	4328      	orrs	r0, r5
        value <<= 8;
   d5aa2:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5aa4:	6820      	ldr	r0, [r4, #0]
   d5aa6:	6803      	ldr	r3, [r0, #0]
   d5aa8:	695b      	ldr	r3, [r3, #20]
   d5aaa:	4798      	blx	r3
   d5aac:	4305      	orrs	r5, r0
}
   d5aae:	4628      	mov	r0, r5
   d5ab0:	b005      	add	sp, #20
   d5ab2:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5ab4:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5ab8:	3301      	adds	r3, #1
   d5aba:	d10c      	bne.n	d5ad6 <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d5abc:	4b1a      	ldr	r3, [pc, #104]	; (d5b28 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d5abe:	9300      	str	r3, [sp, #0]
   d5ac0:	2300      	movs	r3, #0
   d5ac2:	f88d 3004 	strb.w	r3, [sp, #4]
   d5ac6:	4b19      	ldr	r3, [pc, #100]	; (d5b2c <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d5ac8:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5aca:	4668      	mov	r0, sp
   d5acc:	2301      	movs	r3, #1
   d5ace:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5ad2:	f7ff ffb8 	bl	d5a46 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5ad6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5ada:	2100      	movs	r1, #0
   d5adc:	b280      	uxth	r0, r0
   d5ade:	f003 f9ee 	bl	d8ebe <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5ae2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5ae6:	4620      	mov	r0, r4
   d5ae8:	f7ff ff70 	bl	d59cc <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5aec:	2100      	movs	r1, #0
   d5aee:	4620      	mov	r0, r4
   d5af0:	f7ff ff6c 	bl	d59cc <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d5af4:	2100      	movs	r1, #0
        value <<= 8;
   d5af6:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5af8:	4620      	mov	r0, r4
   d5afa:	f7ff ff67 	bl	d59cc <_ZN15Adafruit_BME2807spixferEh>
   d5afe:	4328      	orrs	r0, r5
        value <<= 8;
   d5b00:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5b02:	2100      	movs	r1, #0
   d5b04:	4620      	mov	r0, r4
   d5b06:	f7ff ff61 	bl	d59cc <_ZN15Adafruit_BME2807spixferEh>
   d5b0a:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d5b0c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5b10:	2101      	movs	r1, #1
   d5b12:	b280      	uxth	r0, r0
   d5b14:	f003 f9d3 	bl	d8ebe <digitalWrite>
        if (_sck == -1)
   d5b18:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5b1c:	3301      	adds	r3, #1
   d5b1e:	d1c6      	bne.n	d5aae <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d5b20:	f7ff ff8a 	bl	d5a38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d5b24:	e7c3      	b.n	d5aae <_ZN15Adafruit_BME2806read24Eh+0x52>
   d5b26:	bf00      	nop
   d5b28:	000dd0f0 	.word	0x000dd0f0
   d5b2c:	0007a120 	.word	0x0007a120

000d5b30 <_ZN15Adafruit_BME28015readTemperatureEv>:
{
   d5b30:	b510      	push	{r4, lr}
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5b32:	21fa      	movs	r1, #250	; 0xfa
{
   d5b34:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5b36:	f7ff ff91 	bl	d5a5c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d5b3a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d5b3e:	d01e      	beq.n	d5b7e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5b40:	8aa1      	ldrh	r1, [r4, #20]
    return T/100;
   d5b42:	ed9f 7a10 	vldr	s14, [pc, #64]	; d5b84 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5b46:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5b48:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5b4c:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d5b50:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5b54:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5b56:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d5b58:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d5b5c:	1312      	asrs	r2, r2, #12
   d5b5e:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5b60:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d5b62:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d5b66:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d5b68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5b6c:	3380      	adds	r3, #128	; 0x80
   d5b6e:	121b      	asrs	r3, r3, #8
   d5b70:	ee07 3a90 	vmov	s15, r3
   d5b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d5b78:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d5b7c:	bd10      	pop	{r4, pc}
        return NAN;
   d5b7e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5b88 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d5b82:	e7fb      	b.n	d5b7c <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d5b84:	42c80000 	.word	0x42c80000
   d5b88:	7fc00000 	.word	0x7fc00000

000d5b8c <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   d5b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5b90:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5b92:	f7ff ffcd 	bl	d5b30 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5b96:	21f7      	movs	r1, #247	; 0xf7
   d5b98:	4620      	mov	r0, r4
   d5b9a:	f7ff ff5f 	bl	d5a5c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5b9e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5ba2:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5ba4:	f000 80bf 	beq.w	d5d26 <_ZN15Adafruit_BME28012readPressureEv+0x19a>
    var1 = ((int64_t)t_fine) - 128000;
   d5ba8:	68e0      	ldr	r0, [r4, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5baa:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
   d5bae:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d5bb2:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d5bb6:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5bba:	fba3 8903 	umull	r8, r9, r3, r3
   d5bbe:	fb03 f102 	mul.w	r1, r3, r2
   d5bc2:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5bc6:	17f7      	asrs	r7, r6, #31
   d5bc8:	fb06 f102 	mul.w	r1, r6, r2
   d5bcc:	fb03 1107 	mla	r1, r3, r7, r1
   d5bd0:	fba6 6703 	umull	r6, r7, r6, r3
   d5bd4:	440f      	add	r7, r1
   d5bd6:	0339      	lsls	r1, r7, #12
   d5bd8:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d5bdc:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5bde:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
   d5be2:	17f7      	asrs	r7, r6, #31
   d5be4:	fb06 fc09 	mul.w	ip, r6, r9
   d5be8:	fb08 cc07 	mla	ip, r8, r7, ip
   d5bec:	fba6 6708 	umull	r6, r7, r6, r8
   d5bf0:	4467      	add	r7, ip
   d5bf2:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d5bf6:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5bfa:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5bfc:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d5c00:	eb1c 0000 	adds.w	r0, ip, r0
   d5c04:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5c08:	3000      	adds	r0, #0
   d5c0a:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d5c0e:	fba0 0106 	umull	r0, r1, r0, r6
   d5c12:	fb06 110e 	mla	r1, r6, lr, r1
   d5c16:	104e      	asrs	r6, r1, #1
   d5c18:	17cf      	asrs	r7, r1, #31
    if (var1 == 0) {
   d5c1a:	ea56 0107 	orrs.w	r1, r6, r7
   d5c1e:	f000 8085 	beq.w	d5d2c <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5c22:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
   d5c26:	fb00 fc09 	mul.w	ip, r0, r9
   d5c2a:	17c1      	asrs	r1, r0, #31
   d5c2c:	fb08 cc01 	mla	ip, r8, r1, ip
   d5c30:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5c34:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
   d5c38:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d5c3c:	fb08 f202 	mul.w	r2, r8, r2
   d5c40:	fb03 2209 	mla	r2, r3, r9, r2
   d5c44:	fba8 8903 	umull	r8, r9, r8, r3
   d5c48:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5c4a:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5c4c:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d5c50:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d5c54:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5c56:	1812      	adds	r2, r2, r0
    p = 1048576 - adc_P;
   d5c58:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5c5c:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5c60:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5c64:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5c68:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d5c6a:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5c6c:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d5c6e:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d5c72:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5c76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d5c7a:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d5c7e:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d5c82:	1ac0      	subs	r0, r0, r3
   d5c84:	f640 4335 	movw	r3, #3125	; 0xc35
   d5c88:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d5c8c:	fba0 0103 	umull	r0, r1, r0, r3
   d5c90:	fb03 110e 	mla	r1, r3, lr, r1
   d5c94:	4632      	mov	r2, r6
   d5c96:	463b      	mov	r3, r7
   d5c98:	f006 fc2e 	bl	dc4f8 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5c9c:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d5ca0:	134d      	asrs	r5, r1, #13
   d5ca2:	0b46      	lsrs	r6, r0, #13
   d5ca4:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d5ca8:	fb02 f705 	mul.w	r7, r2, r5
   d5cac:	17d3      	asrs	r3, r2, #31
   d5cae:	fb06 7703 	mla	r7, r6, r3, r7
   d5cb2:	fba2 2306 	umull	r2, r3, r2, r6
   d5cb6:	443b      	add	r3, r7
   d5cb8:	4355      	muls	r5, r2
   d5cba:	fb06 5503 	mla	r5, r6, r3, r5
   d5cbe:	fba2 2306 	umull	r2, r3, r2, r6
   d5cc2:	442b      	add	r3, r5
   d5cc4:	0e55      	lsrs	r5, r2, #25
   d5cc6:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5cca:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5cce:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   d5cd2:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5cd4:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5cd8:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5cdc:	17d3      	asrs	r3, r2, #31
   d5cde:	4351      	muls	r1, r2
   d5ce0:	fb00 1103 	mla	r1, r0, r3, r1
   d5ce4:	fba2 2300 	umull	r2, r3, r2, r0
   d5ce8:	440b      	add	r3, r1
   d5cea:	0cd1      	lsrs	r1, r2, #19
   d5cec:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5cf0:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5cf2:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5cf6:	eb46 0300 	adc.w	r3, r6, r0
   d5cfa:	0a2a      	lsrs	r2, r5, #8
   d5cfc:	17e5      	asrs	r5, r4, #31
   d5cfe:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d5d02:	1219      	asrs	r1, r3, #8
   d5d04:	0120      	lsls	r0, r4, #4
   d5d06:	012b      	lsls	r3, r5, #4
   d5d08:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d5d0c:	1880      	adds	r0, r0, r2
   d5d0e:	eb43 0101 	adc.w	r1, r3, r1
   d5d12:	f006 fbb3 	bl	dc47c <__aeabi_l2f>
   d5d16:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5d34 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d5d1a:	ee07 0a90 	vmov	s15, r0
   d5d1e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d5d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d5d26:	ed9f 0a04 	vldr	s0, [pc, #16]	; d5d38 <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d5d2a:	e7fa      	b.n	d5d22 <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d5d2c:	ed9f 0a03 	vldr	s0, [pc, #12]	; d5d3c <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d5d30:	e7f7      	b.n	d5d22 <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d5d32:	bf00      	nop
   d5d34:	3b800000 	.word	0x3b800000
   d5d38:	7fc00000 	.word	0x7fc00000
   d5d3c:	00000000 	.word	0x00000000

000d5d40 <_ZN15Adafruit_BME28012readAltitudeEf>:
{
   d5d40:	b508      	push	{r3, lr}
   d5d42:	ed2d 8b02 	vpush	{d8}
   d5d46:	eeb0 8a40 	vmov.f32	s16, s0
    float atmospheric = readPressure() / 100.0F;
   d5d4a:	f7ff ff1f 	bl	d5b8c <_ZN15Adafruit_BME28012readPressureEv>
   d5d4e:	ed9f 7a16 	vldr	s14, [pc, #88]	; d5da8 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d5d52:	eec0 7a07 	vdiv.f32	s15, s0, s14
      return pow(__type(__x), __type(__y));
   d5d56:	eec7 7a88 	vdiv.f32	s15, s15, s16
   d5d5a:	ee17 0a90 	vmov	r0, s15
   d5d5e:	f005 ff1d 	bl	dbb9c <__aeabi_f2d>
   d5d62:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d5d98 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d5d66:	ec41 0b10 	vmov	d0, r0, r1
   d5d6a:	f003 f9d9 	bl	d9120 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d5d6e:	490f      	ldr	r1, [pc, #60]	; (d5dac <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d5d70:	ec53 2b10 	vmov	r2, r3, d0
   d5d74:	2000      	movs	r0, #0
   d5d76:	f005 fdb1 	bl	db8dc <__aeabi_dsub>
   d5d7a:	a309      	add	r3, pc, #36	; (adr r3, d5da0 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d5d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5d80:	f005 ff64 	bl	dbc4c <__aeabi_dmul>
   d5d84:	f006 fa5a 	bl	dc23c <__aeabi_d2f>
}
   d5d88:	ecbd 8b02 	vpop	{d8}
   d5d8c:	ee00 0a10 	vmov	s0, r0
   d5d90:	bd08      	pop	{r3, pc}
   d5d92:	bf00      	nop
   d5d94:	f3af 8000 	nop.w
   d5d98:	1a36e2eb 	.word	0x1a36e2eb
   d5d9c:	3fc85bc0 	.word	0x3fc85bc0
   d5da0:	00000000 	.word	0x00000000
   d5da4:	40e5a540 	.word	0x40e5a540
   d5da8:	42c80000 	.word	0x42c80000
   d5dac:	3ff00000 	.word	0x3ff00000

000d5db0 <_ZN15Adafruit_BME2806read16Eh>:
{
   d5db0:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5db2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5db6:	3301      	adds	r3, #1
{
   d5db8:	b085      	sub	sp, #20
   d5dba:	4604      	mov	r4, r0
   d5dbc:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5dbe:	d11f      	bne.n	d5e00 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5dc0:	7901      	ldrb	r1, [r0, #4]
   d5dc2:	6800      	ldr	r0, [r0, #0]
   d5dc4:	f002 ff72 	bl	d8cac <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5dc8:	6820      	ldr	r0, [r4, #0]
   d5dca:	6803      	ldr	r3, [r0, #0]
   d5dcc:	4629      	mov	r1, r5
   d5dce:	689b      	ldr	r3, [r3, #8]
   d5dd0:	4798      	blx	r3
        _wire -> endTransmission();
   d5dd2:	6820      	ldr	r0, [r4, #0]
   d5dd4:	f002 ff72 	bl	d8cbc <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d5dd8:	7921      	ldrb	r1, [r4, #4]
   d5dda:	6820      	ldr	r0, [r4, #0]
   d5ddc:	2202      	movs	r2, #2
   d5dde:	f002 ff62 	bl	d8ca6 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d5de2:	6820      	ldr	r0, [r4, #0]
   d5de4:	6803      	ldr	r3, [r0, #0]
   d5de6:	695b      	ldr	r3, [r3, #20]
   d5de8:	4798      	blx	r3
   d5dea:	4605      	mov	r5, r0
   d5dec:	6820      	ldr	r0, [r4, #0]
   d5dee:	6803      	ldr	r3, [r0, #0]
   d5df0:	695b      	ldr	r3, [r3, #20]
   d5df2:	4798      	blx	r3
   d5df4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5df8:	b285      	uxth	r5, r0
}
   d5dfa:	4628      	mov	r0, r5
   d5dfc:	b005      	add	sp, #20
   d5dfe:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5e00:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5e04:	3301      	adds	r3, #1
   d5e06:	d10c      	bne.n	d5e22 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d5e08:	4b18      	ldr	r3, [pc, #96]	; (d5e6c <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d5e0a:	9300      	str	r3, [sp, #0]
   d5e0c:	2300      	movs	r3, #0
   d5e0e:	f88d 3004 	strb.w	r3, [sp, #4]
   d5e12:	4b17      	ldr	r3, [pc, #92]	; (d5e70 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d5e14:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5e16:	4668      	mov	r0, sp
   d5e18:	2301      	movs	r3, #1
   d5e1a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5e1e:	f7ff fe12 	bl	d5a46 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5e22:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5e26:	2100      	movs	r1, #0
   d5e28:	b280      	uxth	r0, r0
   d5e2a:	f003 f848 	bl	d8ebe <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5e2e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5e32:	4620      	mov	r0, r4
   d5e34:	f7ff fdca 	bl	d59cc <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5e38:	2100      	movs	r1, #0
   d5e3a:	4620      	mov	r0, r4
   d5e3c:	f7ff fdc6 	bl	d59cc <_ZN15Adafruit_BME2807spixferEh>
   d5e40:	2100      	movs	r1, #0
   d5e42:	4605      	mov	r5, r0
   d5e44:	4620      	mov	r0, r4
   d5e46:	f7ff fdc1 	bl	d59cc <_ZN15Adafruit_BME2807spixferEh>
   d5e4a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5e4e:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d5e50:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5e54:	2101      	movs	r1, #1
   d5e56:	b280      	uxth	r0, r0
   d5e58:	f003 f831 	bl	d8ebe <digitalWrite>
        if (_sck == -1)
   d5e5c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5e60:	3301      	adds	r3, #1
   d5e62:	d1ca      	bne.n	d5dfa <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d5e64:	f7ff fde8 	bl	d5a38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5e68:	e7c7      	b.n	d5dfa <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d5e6a:	bf00      	nop
   d5e6c:	000dd0f0 	.word	0x000dd0f0
   d5e70:	0007a120 	.word	0x0007a120

000d5e74 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d5e74:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d5e76:	f7ff ff9b 	bl	d5db0 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d5e7a:	ba40      	rev16	r0, r0
}
   d5e7c:	b280      	uxth	r0, r0
   d5e7e:	bd08      	pop	{r3, pc}

000d5e80 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
   d5e80:	b538      	push	{r3, r4, r5, lr}
   d5e82:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5e84:	f7ff fe54 	bl	d5b30 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d5e88:	21fd      	movs	r1, #253	; 0xfd
   d5e8a:	4620      	mov	r0, r4
   d5e8c:	f7ff ff90 	bl	d5db0 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d5e90:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d5e94:	d038      	beq.n	d5f08 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5e96:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5e9a:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5e9c:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5ea0:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5ea2:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5ea6:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d5eaa:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5eae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d5eb2:	13d9      	asrs	r1, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5eb4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d5eb8:	4353      	muls	r3, r2
   d5eba:	12db      	asrs	r3, r3, #11
   d5ebc:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d5ec0:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d5ec4:	4353      	muls	r3, r2
   d5ec6:	129b      	asrs	r3, r3, #10
   d5ec8:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5eca:	129b      	asrs	r3, r3, #10
   d5ecc:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d5ed0:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d5ed4:	4353      	muls	r3, r2
   d5ed6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d5eda:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5edc:	434b      	muls	r3, r1
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5ede:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d5ee0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5ee4:	4352      	muls	r2, r2
   d5ee6:	11d2      	asrs	r2, r2, #7
   d5ee8:	434a      	muls	r2, r1
   d5eea:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d5eee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d5ef2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d5ef6:	bfa8      	it	ge
   d5ef8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d5efc:	131b      	asrs	r3, r3, #12
   d5efe:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d5f02:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d5f06:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d5f08:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5f10 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d5f0c:	e7fb      	b.n	d5f06 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d5f0e:	bf00      	nop
   d5f10:	7fc00000 	.word	0x7fc00000

000d5f14 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d5f14:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5f16:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5f1a:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d5f1c:	b085      	sub	sp, #20
   d5f1e:	4604      	mov	r4, r0
   d5f20:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5f22:	d118      	bne.n	d5f56 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5f24:	7901      	ldrb	r1, [r0, #4]
   d5f26:	6800      	ldr	r0, [r0, #0]
   d5f28:	f002 fec0 	bl	d8cac <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5f2c:	6820      	ldr	r0, [r4, #0]
   d5f2e:	6803      	ldr	r3, [r0, #0]
   d5f30:	4629      	mov	r1, r5
   d5f32:	689b      	ldr	r3, [r3, #8]
   d5f34:	4798      	blx	r3
        _wire -> endTransmission();
   d5f36:	6820      	ldr	r0, [r4, #0]
   d5f38:	f002 fec0 	bl	d8cbc <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d5f3c:	7921      	ldrb	r1, [r4, #4]
   d5f3e:	6820      	ldr	r0, [r4, #0]
   d5f40:	2201      	movs	r2, #1
   d5f42:	f002 feb0 	bl	d8ca6 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d5f46:	6820      	ldr	r0, [r4, #0]
   d5f48:	6803      	ldr	r3, [r0, #0]
   d5f4a:	695b      	ldr	r3, [r3, #20]
   d5f4c:	4798      	blx	r3
   d5f4e:	b2c5      	uxtb	r5, r0
}
   d5f50:	4628      	mov	r0, r5
   d5f52:	b005      	add	sp, #20
   d5f54:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5f56:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5f5a:	3301      	adds	r3, #1
   d5f5c:	d10c      	bne.n	d5f78 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d5f5e:	4b15      	ldr	r3, [pc, #84]	; (d5fb4 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d5f60:	9300      	str	r3, [sp, #0]
   d5f62:	2300      	movs	r3, #0
   d5f64:	f88d 3004 	strb.w	r3, [sp, #4]
   d5f68:	4b13      	ldr	r3, [pc, #76]	; (d5fb8 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d5f6a:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5f6c:	4668      	mov	r0, sp
   d5f6e:	2301      	movs	r3, #1
   d5f70:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5f74:	f7ff fd67 	bl	d5a46 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5f78:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5f7c:	2100      	movs	r1, #0
   d5f7e:	b280      	uxth	r0, r0
   d5f80:	f002 ff9d 	bl	d8ebe <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5f84:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5f88:	4620      	mov	r0, r4
   d5f8a:	f7ff fd1f 	bl	d59cc <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5f8e:	2100      	movs	r1, #0
   d5f90:	4620      	mov	r0, r4
   d5f92:	f7ff fd1b 	bl	d59cc <_ZN15Adafruit_BME2807spixferEh>
   d5f96:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d5f98:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5f9c:	2101      	movs	r1, #1
   d5f9e:	b280      	uxth	r0, r0
   d5fa0:	f002 ff8d 	bl	d8ebe <digitalWrite>
        if (_sck == -1)
   d5fa4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5fa8:	3301      	adds	r3, #1
   d5faa:	d1d1      	bne.n	d5f50 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d5fac:	f7ff fd44 	bl	d5a38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5fb0:	e7ce      	b.n	d5f50 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d5fb2:	bf00      	nop
   d5fb4:	000dd0f0 	.word	0x000dd0f0
   d5fb8:	0007a120 	.word	0x0007a120

000d5fbc <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d5fbc:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d5fbe:	21f3      	movs	r1, #243	; 0xf3
   d5fc0:	f7ff ffa8 	bl	d5f14 <_ZN15Adafruit_BME2805read8Eh>
}
   d5fc4:	f000 0001 	and.w	r0, r0, #1
   d5fc8:	bd08      	pop	{r3, pc}

000d5fca <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d5fca:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5fcc:	2188      	movs	r1, #136	; 0x88
{
   d5fce:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5fd0:	f7ff ff50 	bl	d5e74 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5fd4:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5fd6:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d5fd8:	4620      	mov	r0, r4
   d5fda:	f7ff ff4b 	bl	d5e74 <_ZN15Adafruit_BME2809read16_LEEh>
   d5fde:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d5fe0:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d5fe2:	4620      	mov	r0, r4
   d5fe4:	f7ff ff46 	bl	d5e74 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5fe8:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d5fea:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5fec:	4620      	mov	r0, r4
   d5fee:	f7ff ff41 	bl	d5e74 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5ff2:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5ff4:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d5ff6:	4620      	mov	r0, r4
   d5ff8:	f7ff ff3c 	bl	d5e74 <_ZN15Adafruit_BME2809read16_LEEh>
   d5ffc:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d5ffe:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d6000:	4620      	mov	r0, r4
   d6002:	f7ff ff37 	bl	d5e74 <_ZN15Adafruit_BME2809read16_LEEh>
   d6006:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d6008:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d600a:	4620      	mov	r0, r4
   d600c:	f7ff ff32 	bl	d5e74 <_ZN15Adafruit_BME2809read16_LEEh>
   d6010:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d6012:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d6014:	4620      	mov	r0, r4
   d6016:	f7ff ff2d 	bl	d5e74 <_ZN15Adafruit_BME2809read16_LEEh>
   d601a:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d601c:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d601e:	4620      	mov	r0, r4
   d6020:	f7ff ff28 	bl	d5e74 <_ZN15Adafruit_BME2809read16_LEEh>
   d6024:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d6026:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d6028:	4620      	mov	r0, r4
   d602a:	f7ff ff23 	bl	d5e74 <_ZN15Adafruit_BME2809read16_LEEh>
   d602e:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d6030:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d6032:	4620      	mov	r0, r4
   d6034:	f7ff ff1e 	bl	d5e74 <_ZN15Adafruit_BME2809read16_LEEh>
   d6038:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d603a:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d603c:	4620      	mov	r0, r4
   d603e:	f7ff ff19 	bl	d5e74 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d6042:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d6044:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d6046:	4620      	mov	r0, r4
   d6048:	f7ff ff64 	bl	d5f14 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d604c:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d604e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d6052:	4620      	mov	r0, r4
   d6054:	f7ff ff0e 	bl	d5e74 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d6058:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d605a:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d605c:	4620      	mov	r0, r4
   d605e:	f7ff ff59 	bl	d5f14 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d6062:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d6064:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d6068:	4620      	mov	r0, r4
   d606a:	f7ff ff53 	bl	d5f14 <_ZN15Adafruit_BME2805read8Eh>
   d606e:	21e5      	movs	r1, #229	; 0xe5
   d6070:	4605      	mov	r5, r0
   d6072:	4620      	mov	r0, r4
   d6074:	f7ff ff4e 	bl	d5f14 <_ZN15Adafruit_BME2805read8Eh>
   d6078:	f000 030f 	and.w	r3, r0, #15
   d607c:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d6080:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d6082:	21e6      	movs	r1, #230	; 0xe6
   d6084:	4620      	mov	r0, r4
   d6086:	f7ff ff45 	bl	d5f14 <_ZN15Adafruit_BME2805read8Eh>
   d608a:	21e5      	movs	r1, #229	; 0xe5
   d608c:	4605      	mov	r5, r0
   d608e:	4620      	mov	r0, r4
   d6090:	f7ff ff40 	bl	d5f14 <_ZN15Adafruit_BME2805read8Eh>
   d6094:	1103      	asrs	r3, r0, #4
   d6096:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d609a:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d609c:	21e7      	movs	r1, #231	; 0xe7
   d609e:	4620      	mov	r0, r4
   d60a0:	f7ff ff38 	bl	d5f14 <_ZN15Adafruit_BME2805read8Eh>
   d60a4:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d60a8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d60ac <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d60ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d60ae:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d60b2:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d60b4:	4604      	mov	r4, r0
   d60b6:	460e      	mov	r6, r1
   d60b8:	4615      	mov	r5, r2
    if (_cs == -1) {
   d60ba:	d112      	bne.n	d60e2 <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d60bc:	7901      	ldrb	r1, [r0, #4]
   d60be:	6800      	ldr	r0, [r0, #0]
   d60c0:	f002 fdf4 	bl	d8cac <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d60c4:	6820      	ldr	r0, [r4, #0]
   d60c6:	6803      	ldr	r3, [r0, #0]
   d60c8:	4631      	mov	r1, r6
   d60ca:	689b      	ldr	r3, [r3, #8]
   d60cc:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d60ce:	6820      	ldr	r0, [r4, #0]
   d60d0:	6803      	ldr	r3, [r0, #0]
   d60d2:	4629      	mov	r1, r5
   d60d4:	689b      	ldr	r3, [r3, #8]
   d60d6:	4798      	blx	r3
        _wire -> endTransmission();
   d60d8:	6820      	ldr	r0, [r4, #0]
   d60da:	f002 fdef 	bl	d8cbc <_ZN7TwoWire15endTransmissionEv>
}
   d60de:	b004      	add	sp, #16
   d60e0:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d60e2:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d60e6:	3301      	adds	r3, #1
   d60e8:	d10c      	bne.n	d6104 <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d60ea:	4b14      	ldr	r3, [pc, #80]	; (d613c <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d60ec:	9300      	str	r3, [sp, #0]
   d60ee:	2300      	movs	r3, #0
   d60f0:	f88d 3004 	strb.w	r3, [sp, #4]
   d60f4:	4b12      	ldr	r3, [pc, #72]	; (d6140 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d60f6:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d60f8:	4668      	mov	r0, sp
   d60fa:	2301      	movs	r3, #1
   d60fc:	f8ad 300c 	strh.w	r3, [sp, #12]
   d6100:	f7ff fca1 	bl	d5a46 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d6104:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6108:	2100      	movs	r1, #0
   d610a:	b280      	uxth	r0, r0
   d610c:	f002 fed7 	bl	d8ebe <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d6110:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d6114:	4620      	mov	r0, r4
   d6116:	f7ff fc59 	bl	d59cc <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d611a:	4629      	mov	r1, r5
   d611c:	4620      	mov	r0, r4
   d611e:	f7ff fc55 	bl	d59cc <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d6122:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6126:	2101      	movs	r1, #1
   d6128:	b280      	uxth	r0, r0
   d612a:	f002 fec8 	bl	d8ebe <digitalWrite>
    if (_sck == -1)
   d612e:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d6132:	3301      	adds	r3, #1
   d6134:	d1d3      	bne.n	d60de <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d6136:	f7ff fc7f 	bl	d5a38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d613a:	e7d0      	b.n	d60de <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d613c:	000dd0f0 	.word	0x000dd0f0
   d6140:	0007a120 	.word	0x0007a120

000d6144 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d6144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d6146:	00db      	lsls	r3, r3, #3
   d6148:	f002 0207 	and.w	r2, r2, #7
   d614c:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d6150:	4313      	orrs	r3, r2
   d6152:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d6156:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d615a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d615e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d6162:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d6166:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d616a:	f366 1347 	bfi	r3, r6, #5, #3
   d616e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d6172:	00ed      	lsls	r5, r5, #3
   d6174:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d6178:	f007 0707 	and.w	r7, r7, #7
   d617c:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d6180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d6184:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d6186:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d6188:	431d      	orrs	r5, r3
   d618a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d618e:	f006 0207 	and.w	r2, r6, #7
   d6192:	21f2      	movs	r1, #242	; 0xf2
   d6194:	f7ff ff8a 	bl	d60ac <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d6198:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d619c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d61a0:	f002 0107 	and.w	r1, r2, #7
   d61a4:	009b      	lsls	r3, r3, #2
   d61a6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d61aa:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d61ae:	4620      	mov	r0, r4
   d61b0:	21f5      	movs	r1, #245	; 0xf5
   d61b2:	f7ff ff7b 	bl	d60ac <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d61b6:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d61ba:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d61be:	f002 0107 	and.w	r1, r2, #7
   d61c2:	009b      	lsls	r3, r3, #2
   d61c4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d61c8:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d61cc:	4620      	mov	r0, r4
   d61ce:	21f4      	movs	r1, #244	; 0xf4
}
   d61d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d61d4:	f7ff bf6a 	b.w	d60ac <_ZN15Adafruit_BME2806write8Ehh>

000d61d8 <_ZN15Adafruit_BME2804initEv>:
{
   d61d8:	b530      	push	{r4, r5, lr}
   d61da:	4604      	mov	r4, r0
    if (_cs == -1) {
   d61dc:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d61e0:	1c42      	adds	r2, r0, #1
{
   d61e2:	b085      	sub	sp, #20
    if (_cs == -1) {
   d61e4:	d119      	bne.n	d621a <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d61e6:	6820      	ldr	r0, [r4, #0]
   d61e8:	f002 fd2e 	bl	d8c48 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d61ec:	21d0      	movs	r1, #208	; 0xd0
   d61ee:	4620      	mov	r0, r4
   d61f0:	f7ff fe90 	bl	d5f14 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d61f4:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d61f6:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d61f8:	d145      	bne.n	d6286 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d61fa:	4620      	mov	r0, r4
   d61fc:	22b6      	movs	r2, #182	; 0xb6
   d61fe:	21e0      	movs	r1, #224	; 0xe0
   d6200:	f7ff ff54 	bl	d60ac <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d6204:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d6208:	f002 fa48 	bl	d869c <delay>
    while (isReadingCalibration())
   d620c:	4620      	mov	r0, r4
   d620e:	f7ff fed5 	bl	d5fbc <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d6212:	4605      	mov	r5, r0
   d6214:	b328      	cbz	r0, d6262 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d6216:	2064      	movs	r0, #100	; 0x64
   d6218:	e7f6      	b.n	d6208 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d621a:	2101      	movs	r1, #1
   d621c:	b280      	uxth	r0, r0
   d621e:	f002 fe4e 	bl	d8ebe <digitalWrite>
        pinMode(_cs, OUTPUT);
   d6222:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6226:	2101      	movs	r1, #1
   d6228:	b280      	uxth	r0, r0
   d622a:	f002 fe37 	bl	d8e9c <pinMode>
        if (_sck == -1) {
   d622e:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d6232:	1c43      	adds	r3, r0, #1
   d6234:	d104      	bne.n	d6240 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d6236:	f7ff fbad 	bl	d5994 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d623a:	f001 ffb5 	bl	d81a8 <_ZN8SPIClass5beginEv>
    }
   d623e:	e7d5      	b.n	d61ec <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d6240:	2101      	movs	r1, #1
   d6242:	b280      	uxth	r0, r0
   d6244:	f002 fe2a 	bl	d8e9c <pinMode>
            pinMode(_mosi, OUTPUT);
   d6248:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d624c:	2101      	movs	r1, #1
   d624e:	b280      	uxth	r0, r0
   d6250:	f002 fe24 	bl	d8e9c <pinMode>
            pinMode(_miso, INPUT);
   d6254:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d6258:	2100      	movs	r1, #0
   d625a:	b280      	uxth	r0, r0
   d625c:	f002 fe1e 	bl	d8e9c <pinMode>
   d6260:	e7c4      	b.n	d61ec <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d6262:	4620      	mov	r0, r4
   d6264:	f7ff feb1 	bl	d5fca <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d6268:	2305      	movs	r3, #5
   d626a:	9300      	str	r3, [sp, #0]
   d626c:	461a      	mov	r2, r3
   d626e:	2103      	movs	r1, #3
   d6270:	4620      	mov	r0, r4
   d6272:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d6276:	f7ff ff65 	bl	d6144 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d627a:	2064      	movs	r0, #100	; 0x64
   d627c:	f002 fa0e 	bl	d869c <delay>
   d6280:	2001      	movs	r0, #1
}
   d6282:	b005      	add	sp, #20
   d6284:	bd30      	pop	{r4, r5, pc}
        return false;
   d6286:	2000      	movs	r0, #0
   d6288:	e7fb      	b.n	d6282 <_ZN15Adafruit_BME2804initEv+0xaa>

000d628a <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d628a:	2377      	movs	r3, #119	; 0x77
{
   d628c:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d628e:	7103      	strb	r3, [r0, #4]
{
   d6290:	4604      	mov	r4, r0
	_wire = &Wire;
   d6292:	f002 fe87 	bl	d8fa4 <_Z19__fetch_global_Wirev>
   d6296:	6020      	str	r0, [r4, #0]
	status = init();
   d6298:	4620      	mov	r0, r4
   d629a:	f7ff ff9d 	bl	d61d8 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d629e:	b930      	cbnz	r0, d62ae <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d62a0:	2376      	movs	r3, #118	; 0x76
   d62a2:	7123      	strb	r3, [r4, #4]
 		status = init();
   d62a4:	4620      	mov	r0, r4
}
   d62a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d62aa:	f7ff bf95 	b.w	d61d8 <_ZN15Adafruit_BME2804initEv>
}
   d62ae:	bd10      	pop	{r4, pc}

000d62b0 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   d62b0:	b510      	push	{r4, lr}
   d62b2:	4604      	mov	r4, r0
  if (_spiSetting) {
   d62b4:	6840      	ldr	r0, [r0, #4]
   d62b6:	b110      	cbz	r0, d62be <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   d62b8:	6803      	ldr	r3, [r0, #0]
   d62ba:	689b      	ldr	r3, [r3, #8]
   d62bc:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   d62be:	4620      	mov	r0, r4
   d62c0:	bd10      	pop	{r4, pc}

000d62c2 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   d62c2:	b538      	push	{r3, r4, r5, lr}
   d62c4:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   d62c6:	f990 000e 	ldrsb.w	r0, [r0, #14]
   d62ca:	2101      	movs	r1, #1
   d62cc:	b280      	uxth	r0, r0
   d62ce:	f002 fde5 	bl	d8e9c <pinMode>
  digitalWrite(_cs, HIGH);
   d62d2:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d62d6:	2101      	movs	r1, #1
   d62d8:	b280      	uxth	r0, r0
   d62da:	f002 fdf0 	bl	d8ebe <digitalWrite>

  if (_spi) { // hardware SPI
   d62de:	6825      	ldr	r5, [r4, #0]
   d62e0:	b135      	cbz	r5, d62f0 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   d62e2:	4628      	mov	r0, r5
   d62e4:	f001 ff60 	bl	d81a8 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   d62e8:	2001      	movs	r0, #1
   d62ea:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   d62ee:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   d62f0:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d62f4:	2101      	movs	r1, #1
   d62f6:	b280      	uxth	r0, r0
   d62f8:	f002 fdd0 	bl	d8e9c <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   d62fc:	7b63      	ldrb	r3, [r4, #13]
   d62fe:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d6302:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   d6304:	bf94      	ite	ls
   d6306:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   d6308:	2101      	movhi	r1, #1
   d630a:	b280      	uxth	r0, r0
   d630c:	f002 fdd7 	bl	d8ebe <digitalWrite>
    if (_mosi != -1) {
   d6310:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6314:	1c42      	adds	r2, r0, #1
   d6316:	d009      	beq.n	d632c <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   d6318:	2101      	movs	r1, #1
   d631a:	b280      	uxth	r0, r0
   d631c:	f002 fdbe 	bl	d8e9c <pinMode>
      digitalWrite(_mosi, HIGH);
   d6320:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6324:	2101      	movs	r1, #1
   d6326:	b280      	uxth	r0, r0
   d6328:	f002 fdc9 	bl	d8ebe <digitalWrite>
    if (_miso != -1) {
   d632c:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d6330:	1c43      	adds	r3, r0, #1
   d6332:	d0d9      	beq.n	d62e8 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   d6334:	2100      	movs	r1, #0
   d6336:	b280      	uxth	r0, r0
   d6338:	f002 fdb0 	bl	d8e9c <pinMode>
   d633c:	e7d4      	b.n	d62e8 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000d6340 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d6340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6344:	4604      	mov	r4, r0
  if (_spi) {
   d6346:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d6348:	b085      	sub	sp, #20
   d634a:	460d      	mov	r5, r1
  if (_spi) {
   d634c:	b140      	cbz	r0, d6360 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   d634e:	2300      	movs	r3, #0
   d6350:	9300      	str	r3, [sp, #0]
   d6352:	4613      	mov	r3, r2
   d6354:	460a      	mov	r2, r1
   d6356:	f001 ffc5 	bl	d82e4 <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   d635a:	b005      	add	sp, #20
   d635c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   d6360:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d6362:	68a0      	ldr	r0, [r4, #8]
   d6364:	4f48      	ldr	r7, [pc, #288]	; (d6488 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   d6366:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   d636a:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d636c:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   d636e:	bf0c      	ite	eq
   d6370:	f04f 0b01 	moveq.w	fp, #1
   d6374:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d6378:	ea1b 0f03 	tst.w	fp, r3
   d637c:	eb01 0302 	add.w	r3, r1, r2
   d6380:	bf0c      	ite	eq
   d6382:	f04f 0901 	moveq.w	r9, #1
   d6386:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d638a:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   d638c:	9303      	str	r3, [sp, #12]
   d638e:	9b03      	ldr	r3, [sp, #12]
   d6390:	42ab      	cmp	r3, r5
   d6392:	d0e2      	beq.n	d635a <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   d6394:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   d6398:	465e      	mov	r6, fp
    uint8_t reply = 0;
   d639a:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   d639e:	b117      	cbz	r7, d63a6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d63a0:	4638      	mov	r0, r7
   d63a2:	f001 fc87 	bl	d7cb4 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   d63a6:	7b63      	ldrb	r3, [r4, #13]
   d63a8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d63ac:	d141      	bne.n	d6432 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d63ae:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d63b2:	1c5a      	adds	r2, r3, #1
   d63b4:	d00f      	beq.n	d63d6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   d63b6:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d63ba:	bf14      	ite	ne
   d63bc:	2301      	movne	r3, #1
   d63be:	2300      	moveq	r3, #0
   d63c0:	454b      	cmp	r3, r9
   d63c2:	d008      	beq.n	d63d6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
          if (towrite)
   d63c4:	6963      	ldr	r3, [r4, #20]
   d63c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d63c8:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   d63ca:	2900      	cmp	r1, #0
   d63cc:	d02c      	beq.n	d6428 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   d63ce:	4302      	orrs	r2, r0
   d63d0:	601a      	str	r2, [r3, #0]
   d63d2:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   d63d6:	69a1      	ldr	r1, [r4, #24]
   d63d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d63da:	680a      	ldr	r2, [r1, #0]
   d63dc:	4313      	orrs	r3, r2
   d63de:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d63e0:	b117      	cbz	r7, d63e8 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   d63e2:	4638      	mov	r0, r7
   d63e4:	f001 fc66 	bl	d7cb4 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   d63e8:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d63ec:	3301      	adds	r3, #1
   d63ee:	d006      	beq.n	d63fe <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   d63f0:	69e3      	ldr	r3, [r4, #28]
   d63f2:	681a      	ldr	r2, [r3, #0]
   d63f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d63f6:	421a      	tst	r2, r3
            reply |= b;
   d63f8:	bf18      	it	ne
   d63fa:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   d63fe:	69a1      	ldr	r1, [r4, #24]
   d6400:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6402:	680a      	ldr	r2, [r1, #0]
   d6404:	ea22 0303 	bic.w	r3, r2, r3
   d6408:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   d640a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d640e:	3301      	adds	r3, #1
        buffer[i] = reply;
   d6410:	bf18      	it	ne
   d6412:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   d6416:	7b23      	ldrb	r3, [r4, #12]
   d6418:	2b00      	cmp	r3, #0
   d641a:	d132      	bne.n	d6482 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   d641c:	0076      	lsls	r6, r6, #1
   d641e:	b2f6      	uxtb	r6, r6
   d6420:	2e00      	cmp	r6, #0
   d6422:	d1bc      	bne.n	d639e <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   d6424:	3501      	adds	r5, #1
   d6426:	e7b2      	b.n	d638e <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   d6428:	ea22 0200 	bic.w	r2, r2, r0
   d642c:	601a      	str	r2, [r3, #0]
   d642e:	4689      	mov	r9, r1
   d6430:	e7d1      	b.n	d63d6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   d6432:	69a1      	ldr	r1, [r4, #24]
   d6434:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6436:	680a      	ldr	r2, [r1, #0]
   d6438:	4313      	orrs	r3, r2
   d643a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d643c:	b117      	cbz	r7, d6444 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   d643e:	4638      	mov	r0, r7
   d6440:	f001 fc38 	bl	d7cb4 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   d6444:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d6448:	3301      	adds	r3, #1
   d644a:	d008      	beq.n	d645e <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
          if (send & b)
   d644c:	6963      	ldr	r3, [r4, #20]
   d644e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d6450:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   d6452:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   d6456:	bf14      	ite	ne
   d6458:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   d645a:	438a      	biceq	r2, r1
   d645c:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   d645e:	69a1      	ldr	r1, [r4, #24]
   d6460:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6462:	680a      	ldr	r2, [r1, #0]
   d6464:	ea22 0303 	bic.w	r3, r2, r3
   d6468:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   d646a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d646e:	3301      	adds	r3, #1
   d6470:	d0cb      	beq.n	d640a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   d6472:	69e3      	ldr	r3, [r4, #28]
   d6474:	681a      	ldr	r2, [r3, #0]
   d6476:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6478:	421a      	tst	r2, r3
            reply |= b;
   d647a:	bf18      	it	ne
   d647c:	ea46 0808 	orrne.w	r8, r6, r8
   d6480:	e7c3      	b.n	d640a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   d6482:	0876      	lsrs	r6, r6, #1
   d6484:	e7cc      	b.n	d6420 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   d6486:	bf00      	nop
   d6488:	0007a120 	.word	0x0007a120

000d648c <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   d648c:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   d648e:	2201      	movs	r2, #1
  uint8_t data = send;
   d6490:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   d6494:	f10d 0107 	add.w	r1, sp, #7
   d6498:	f7ff ff52 	bl	d6340 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   d649c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d64a0:	b003      	add	sp, #12
   d64a2:	f85d fb04 	ldr.w	pc, [sp], #4

000d64a6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d64a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d64aa:	4604      	mov	r4, r0
  if (_spi) {
   d64ac:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d64ae:	460e      	mov	r6, r1
   d64b0:	4617      	mov	r7, r2
   d64b2:	461d      	mov	r5, r3
  if (_spi) {
   d64b4:	b110      	cbz	r0, d64bc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   d64b6:	6861      	ldr	r1, [r4, #4]
   d64b8:	f001 fea0 	bl	d81fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d64bc:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d64c0:	2100      	movs	r1, #0
   d64c2:	b280      	uxth	r0, r0
   d64c4:	f002 fcfb 	bl	d8ebe <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   d64c8:	9b06      	ldr	r3, [sp, #24]
   d64ca:	eb05 0803 	add.w	r8, r5, r3
   d64ce:	4545      	cmp	r5, r8
   d64d0:	d108      	bne.n	d64e4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   d64d2:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   d64d4:	42b7      	cmp	r7, r6
   d64d6:	d00b      	beq.n	d64f0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   d64d8:	f816 1b01 	ldrb.w	r1, [r6], #1
   d64dc:	4620      	mov	r0, r4
   d64de:	f7ff ffd5 	bl	d648c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   d64e2:	e7f7      	b.n	d64d4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   d64e4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d64e8:	4620      	mov	r0, r4
   d64ea:	f7ff ffcf 	bl	d648c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   d64ee:	e7ee      	b.n	d64ce <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   d64f0:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d64f4:	2101      	movs	r1, #1
   d64f6:	b280      	uxth	r0, r0
   d64f8:	f002 fce1 	bl	d8ebe <digitalWrite>

  if (_spi) {
   d64fc:	6820      	ldr	r0, [r4, #0]
   d64fe:	b108      	cbz	r0, d6504 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   d6500:	f001 fe63 	bl	d81ca <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d6504:	2001      	movs	r0, #1
   d6506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d650a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d650a:	6042      	str	r2, [r0, #4]
  _begun = false;
   d650c:	2200      	movs	r2, #0
   d650e:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   d6510:	2220      	movs	r2, #32
  _addr = addr;
   d6512:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   d6514:	60c2      	str	r2, [r0, #12]
#endif
}
   d6516:	4770      	bx	lr

000d6518 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   d6518:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d651a:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d651c:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d651e:	b153      	cbz	r3, d6536 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d6520:	7821      	ldrb	r1, [r4, #0]
   d6522:	6860      	ldr	r0, [r4, #4]
   d6524:	f002 fbc2 	bl	d8cac <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   d6528:	6860      	ldr	r0, [r4, #4]
   d652a:	f002 fbc7 	bl	d8cbc <_ZN7TwoWire15endTransmissionEv>
   d652e:	fab0 f080 	clz	r0, r0
   d6532:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   d6534:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d6536:	2101      	movs	r1, #1
   d6538:	f000 f803 	bl	d6542 <_ZN18Adafruit_I2CDevice5beginEb>
   d653c:	2800      	cmp	r0, #0
   d653e:	d1ef      	bne.n	d6520 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d6540:	e7f8      	b.n	d6534 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d6542 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d6542:	b538      	push	{r3, r4, r5, lr}
   d6544:	4604      	mov	r4, r0
  _wire->begin();
   d6546:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d6548:	460d      	mov	r5, r1
  _wire->begin();
   d654a:	f002 fb7d 	bl	d8c48 <_ZN7TwoWire5beginEv>
  _begun = true;
   d654e:	2001      	movs	r0, #1
   d6550:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   d6552:	b125      	cbz	r5, d655e <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   d6554:	4620      	mov	r0, r4
}
   d6556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   d655a:	f7ff bfdd 	b.w	d6518 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   d655e:	bd38      	pop	{r3, r4, r5, pc}

000d6560 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   d6560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6564:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d6568:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   d656a:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   d656c:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   d656e:	4432      	add	r2, r6
   d6570:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   d6572:	4604      	mov	r4, r0
   d6574:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   d6576:	d902      	bls.n	d657e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d6578:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   d657a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d657e:	7801      	ldrb	r1, [r0, #0]
   d6580:	6840      	ldr	r0, [r0, #4]
   d6582:	f002 fb93 	bl	d8cac <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d6586:	b97e      	cbnz	r6, d65a8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   d6588:	6860      	ldr	r0, [r4, #4]
   d658a:	6803      	ldr	r3, [r0, #0]
   d658c:	462a      	mov	r2, r5
   d658e:	68db      	ldr	r3, [r3, #12]
   d6590:	4641      	mov	r1, r8
   d6592:	4798      	blx	r3
   d6594:	4285      	cmp	r5, r0
   d6596:	d1ef      	bne.n	d6578 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   d6598:	6860      	ldr	r0, [r4, #4]
   d659a:	4639      	mov	r1, r7
   d659c:	f002 fb8a 	bl	d8cb4 <_ZN7TwoWire15endTransmissionEh>
   d65a0:	fab0 f080 	clz	r0, r0
   d65a4:	0940      	lsrs	r0, r0, #5
   d65a6:	e7e8      	b.n	d657a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d65a8:	f1b9 0f00 	cmp.w	r9, #0
   d65ac:	d0ec      	beq.n	d6588 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
   d65ae:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d65b0:	6803      	ldr	r3, [r0, #0]
   d65b2:	4632      	mov	r2, r6
   d65b4:	68db      	ldr	r3, [r3, #12]
   d65b6:	4649      	mov	r1, r9
   d65b8:	4798      	blx	r3
   d65ba:	42b0      	cmp	r0, r6
   d65bc:	d1dc      	bne.n	d6578 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   d65be:	e7e3      	b.n	d6588 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000d65c0 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   d65c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d65c4:	4615      	mov	r5, r2
   d65c6:	4604      	mov	r4, r0
   d65c8:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   d65ca:	b2d2      	uxtb	r2, r2
   d65cc:	7801      	ldrb	r1, [r0, #0]
   d65ce:	6840      	ldr	r0, [r0, #4]
   d65d0:	f002 fb57 	bl	d8c82 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   d65d4:	4285      	cmp	r5, r0
   d65d6:	d10d      	bne.n	d65f4 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   d65d8:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   d65da:	fa1f f887 	uxth.w	r8, r7
   d65de:	45a8      	cmp	r8, r5
   d65e0:	f107 0701 	add.w	r7, r7, #1
   d65e4:	d209      	bcs.n	d65fa <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   d65e6:	6860      	ldr	r0, [r4, #4]
   d65e8:	6803      	ldr	r3, [r0, #0]
   d65ea:	695b      	ldr	r3, [r3, #20]
   d65ec:	4798      	blx	r3
   d65ee:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   d65f2:	e7f2      	b.n	d65da <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   d65f4:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d65f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d65fa:	2001      	movs	r0, #1
   d65fc:	e7fb      	b.n	d65f6 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000d65fe <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d65fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6602:	4607      	mov	r7, r0
   d6604:	4688      	mov	r8, r1
   d6606:	4616      	mov	r6, r2
   d6608:	4699      	mov	r9, r3
  size_t pos = 0;
   d660a:	2500      	movs	r5, #0
  while (pos < len) {
   d660c:	42b5      	cmp	r5, r6
   d660e:	d212      	bcs.n	d6636 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   d6610:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   d6612:	1b74      	subs	r4, r6, r5
   d6614:	4294      	cmp	r4, r2
   d6616:	bf28      	it	cs
   d6618:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   d661a:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   d661c:	42ab      	cmp	r3, r5
   d661e:	bf94      	ite	ls
   d6620:	464b      	movls	r3, r9
   d6622:	2300      	movhi	r3, #0
   d6624:	4622      	mov	r2, r4
   d6626:	eb08 0105 	add.w	r1, r8, r5
   d662a:	4638      	mov	r0, r7
   d662c:	f7ff ffc8 	bl	d65c0 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   d6630:	b110      	cbz	r0, d6638 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   d6632:	4425      	add	r5, r4
  while (pos < len) {
   d6634:	e7ea      	b.n	d660c <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   d6636:	2001      	movs	r0, #1
}
   d6638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d663c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   d663c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d663e:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   d6640:	2300      	movs	r3, #0
   d6642:	e9cd 3300 	strd	r3, r3, [sp]
   d6646:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   d664a:	9e06      	ldr	r6, [sp, #24]
   d664c:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   d664e:	f7ff ff87 	bl	d6560 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d6652:	b140      	cbz	r0, d6666 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   d6654:	2301      	movs	r3, #1
   d6656:	4632      	mov	r2, r6
   d6658:	4629      	mov	r1, r5
   d665a:	4620      	mov	r0, r4
}
   d665c:	b002      	add	sp, #8
   d665e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d6662:	f7ff bfcc 	b.w	d65fe <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d6666:	b002      	add	sp, #8
   d6668:	bd70      	pop	{r4, r5, r6, pc}

000d666a <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   d666a:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d666c:	6840      	ldr	r0, [r0, #4]
   d666e:	f002 fae7 	bl	d8c40 <_ZN7TwoWire8setSpeedEm>
  return true;
#else
  (void)desiredclk;
  return false;
#endif
}
   d6672:	2001      	movs	r0, #1
   d6674:	bd08      	pop	{r3, pc}

000d6676 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d6676:	4770      	bx	lr

000d6678 <_ZN15Adafruit_BNO055D1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
   d6678:	4770      	bx	lr
	...

000d667c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 *          Sensor description
 */
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d667c:	460b      	mov	r3, r1
   d667e:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d6680:	2228      	movs	r2, #40	; 0x28
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d6682:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d6684:	2100      	movs	r1, #0
   d6686:	4618      	mov	r0, r3
   d6688:	f006 f8fe 	bl	dc888 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
   d668c:	4909      	ldr	r1, [pc, #36]	; (d66b4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x38>)
   d668e:	220b      	movs	r2, #11
   d6690:	f006 f92e 	bl	dc8f0 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d6694:	2200      	movs	r2, #0
  sensor->version = 1;
   d6696:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d6698:	72c2      	strb	r2, [r0, #11]
  sensor->version = 1;
   d669a:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _sensorID;
   d669c:	68e1      	ldr	r1, [r4, #12]
  sensor->type = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay = 0;
   d669e:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->max_value = 0.0F;
   d66a0:	2200      	movs	r2, #0
  sensor->sensor_id = _sensorID;
   d66a2:	6101      	str	r1, [r0, #16]
  sensor->max_value = 0.0F;
   d66a4:	6182      	str	r2, [r0, #24]
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d66a6:	2103      	movs	r1, #3
  sensor->min_value = 0.0F;
   d66a8:	61c2      	str	r2, [r0, #28]
  sensor->resolution = 0.01F;
   d66aa:	4a03      	ldr	r2, [pc, #12]	; (d66b8 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x3c>)
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d66ac:	6141      	str	r1, [r0, #20]
  sensor->resolution = 0.01F;
   d66ae:	6202      	str	r2, [r0, #32]
}
   d66b0:	bd10      	pop	{r4, pc}
   d66b2:	bf00      	nop
   d66b4:	000dcfc8 	.word	0x000dcfc8
   d66b8:	3c23d70a 	.word	0x3c23d70a

000d66bc <_ZN15Adafruit_BNO055D0Ev>:
   d66bc:	b510      	push	{r4, lr}
   d66be:	2114      	movs	r1, #20
   d66c0:	4604      	mov	r4, r0
   d66c2:	f002 fc93 	bl	d8fec <_ZdlPvj>
   d66c6:	4620      	mov	r0, r4
   d66c8:	bd10      	pop	{r4, pc}
	...

000d66cc <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d66cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d66ce:	9301      	str	r3, [sp, #4]
                                 TwoWire *theWire) {
   d66d0:	4b09      	ldr	r3, [pc, #36]	; (d66f8 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x2c>)
   d66d2:	6003      	str	r3, [r0, #0]
   d66d4:	2300      	movs	r3, #0
  _sensorID = sensorID;
   d66d6:	e9c0 3102 	strd	r3, r1, [r0, #8]
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d66da:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d66dc:	2010      	movs	r0, #16
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d66de:	4616      	mov	r6, r2
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d66e0:	f7fd fcd9 	bl	d4096 <_Znwj>
   d66e4:	4605      	mov	r5, r0
   d66e6:	b118      	cbz	r0, d66f0 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x24>
   d66e8:	9a01      	ldr	r2, [sp, #4]
   d66ea:	4631      	mov	r1, r6
   d66ec:	f7ff ff0d 	bl	d650a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
}
   d66f0:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d66f2:	60a5      	str	r5, [r4, #8]
}
   d66f4:	b002      	add	sp, #8
   d66f6:	bd70      	pop	{r4, r5, r6, pc}
   d66f8:	000dd104 	.word	0x000dd104

000d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value) {
   d66fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
  return i2c_dev->write(buffer, 2);
   d66fe:	2300      	movs	r3, #0
   d6700:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
   d6704:	f88d 100c 	strb.w	r1, [sp, #12]
   d6708:	f88d 200d 	strb.w	r2, [sp, #13]
  return i2c_dev->write(buffer, 2);
   d670c:	2301      	movs	r3, #1
   d670e:	2202      	movs	r2, #2
   d6710:	a903      	add	r1, sp, #12
   d6712:	6880      	ldr	r0, [r0, #8]
   d6714:	f7ff ff24 	bl	d6560 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d6718:	b005      	add	sp, #20
   d671a:	f85d fb04 	ldr.w	pc, [sp], #4

000d671e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
   d671e:	b508      	push	{r3, lr}
   d6720:	460a      	mov	r2, r1
  _mode = mode;
   d6722:	7401      	strb	r1, [r0, #16]
  write8(BNO055_OPR_MODE_ADDR, _mode);
   d6724:	213d      	movs	r1, #61	; 0x3d
   d6726:	f7ff ffe9 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
}
   d672a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(30);
   d672e:	201e      	movs	r0, #30
   d6730:	f001 bfb4 	b.w	d869c <delay>

000d6734 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>:
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d6734:	b570      	push	{r4, r5, r6, lr}
   d6736:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d6738:	2100      	movs	r1, #0
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d673a:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t modeback = _mode;
   d673c:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d673e:	f7ff ffee 	bl	d671e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d6742:	2019      	movs	r0, #25
   d6744:	f001 ffaa 	bl	d869c <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6748:	2200      	movs	r2, #0
   d674a:	2107      	movs	r1, #7
   d674c:	4620      	mov	r0, r4
   d674e:	f7ff ffd5 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (usextal) {
   d6752:	b185      	cbz	r5, d6776 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x42>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x80);
   d6754:	2280      	movs	r2, #128	; 0x80
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d6756:	213f      	movs	r1, #63	; 0x3f
   d6758:	4620      	mov	r0, r4
   d675a:	f7ff ffcf 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d675e:	200a      	movs	r0, #10
   d6760:	f001 ff9c 	bl	d869c <delay>
  setMode(modeback);
   d6764:	4620      	mov	r0, r4
   d6766:	4631      	mov	r1, r6
   d6768:	f7ff ffd9 	bl	d671e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d676c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(20);
   d6770:	2014      	movs	r0, #20
   d6772:	f001 bf93 	b.w	d869c <delay>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d6776:	462a      	mov	r2, r5
   d6778:	e7ed      	b.n	d6756 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x22>

000d677a <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>:
    const adafruit_bno055_offsets_t &offsets_type) {
   d677a:	b570      	push	{r4, r5, r6, lr}
   d677c:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d677e:	2100      	movs	r1, #0
    const adafruit_bno055_offsets_t &offsets_type) {
   d6780:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t lastMode = _mode;
   d6782:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d6784:	f7ff ffcb 	bl	d671e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d6788:	2019      	movs	r0, #25
   d678a:	f001 ff87 	bl	d869c <delay>
  write8(ACCEL_OFFSET_X_LSB_ADDR, (offsets_type.accel_offset_x) & 0x0FF);
   d678e:	782a      	ldrb	r2, [r5, #0]
   d6790:	2155      	movs	r1, #85	; 0x55
   d6792:	4620      	mov	r0, r4
   d6794:	f7ff ffb2 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_X_MSB_ADDR, (offsets_type.accel_offset_x >> 8) & 0x0FF);
   d6798:	786a      	ldrb	r2, [r5, #1]
   d679a:	2156      	movs	r1, #86	; 0x56
   d679c:	4620      	mov	r0, r4
   d679e:	f7ff ffad 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_LSB_ADDR, (offsets_type.accel_offset_y) & 0x0FF);
   d67a2:	78aa      	ldrb	r2, [r5, #2]
   d67a4:	2157      	movs	r1, #87	; 0x57
   d67a6:	4620      	mov	r0, r4
   d67a8:	f7ff ffa8 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_MSB_ADDR, (offsets_type.accel_offset_y >> 8) & 0x0FF);
   d67ac:	78ea      	ldrb	r2, [r5, #3]
   d67ae:	2158      	movs	r1, #88	; 0x58
   d67b0:	4620      	mov	r0, r4
   d67b2:	f7ff ffa3 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_LSB_ADDR, (offsets_type.accel_offset_z) & 0x0FF);
   d67b6:	792a      	ldrb	r2, [r5, #4]
   d67b8:	2159      	movs	r1, #89	; 0x59
   d67ba:	4620      	mov	r0, r4
   d67bc:	f7ff ff9e 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_MSB_ADDR, (offsets_type.accel_offset_z >> 8) & 0x0FF);
   d67c0:	796a      	ldrb	r2, [r5, #5]
   d67c2:	215a      	movs	r1, #90	; 0x5a
   d67c4:	4620      	mov	r0, r4
   d67c6:	f7ff ff99 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_LSB_ADDR, (offsets_type.mag_offset_x) & 0x0FF);
   d67ca:	79aa      	ldrb	r2, [r5, #6]
   d67cc:	215b      	movs	r1, #91	; 0x5b
   d67ce:	4620      	mov	r0, r4
   d67d0:	f7ff ff94 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_MSB_ADDR, (offsets_type.mag_offset_x >> 8) & 0x0FF);
   d67d4:	79ea      	ldrb	r2, [r5, #7]
   d67d6:	215c      	movs	r1, #92	; 0x5c
   d67d8:	4620      	mov	r0, r4
   d67da:	f7ff ff8f 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_LSB_ADDR, (offsets_type.mag_offset_y) & 0x0FF);
   d67de:	7a2a      	ldrb	r2, [r5, #8]
   d67e0:	215d      	movs	r1, #93	; 0x5d
   d67e2:	4620      	mov	r0, r4
   d67e4:	f7ff ff8a 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_MSB_ADDR, (offsets_type.mag_offset_y >> 8) & 0x0FF);
   d67e8:	7a6a      	ldrb	r2, [r5, #9]
   d67ea:	215e      	movs	r1, #94	; 0x5e
   d67ec:	4620      	mov	r0, r4
   d67ee:	f7ff ff85 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_LSB_ADDR, (offsets_type.mag_offset_z) & 0x0FF);
   d67f2:	7aaa      	ldrb	r2, [r5, #10]
   d67f4:	215f      	movs	r1, #95	; 0x5f
   d67f6:	4620      	mov	r0, r4
   d67f8:	f7ff ff80 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_MSB_ADDR, (offsets_type.mag_offset_z >> 8) & 0x0FF);
   d67fc:	7aea      	ldrb	r2, [r5, #11]
   d67fe:	2160      	movs	r1, #96	; 0x60
   d6800:	4620      	mov	r0, r4
   d6802:	f7ff ff7b 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_LSB_ADDR, (offsets_type.gyro_offset_x) & 0x0FF);
   d6806:	7b2a      	ldrb	r2, [r5, #12]
   d6808:	2161      	movs	r1, #97	; 0x61
   d680a:	4620      	mov	r0, r4
   d680c:	f7ff ff76 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_MSB_ADDR, (offsets_type.gyro_offset_x >> 8) & 0x0FF);
   d6810:	7b6a      	ldrb	r2, [r5, #13]
   d6812:	2162      	movs	r1, #98	; 0x62
   d6814:	4620      	mov	r0, r4
   d6816:	f7ff ff71 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_LSB_ADDR, (offsets_type.gyro_offset_y) & 0x0FF);
   d681a:	7baa      	ldrb	r2, [r5, #14]
   d681c:	2163      	movs	r1, #99	; 0x63
   d681e:	4620      	mov	r0, r4
   d6820:	f7ff ff6c 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_MSB_ADDR, (offsets_type.gyro_offset_y >> 8) & 0x0FF);
   d6824:	7bea      	ldrb	r2, [r5, #15]
   d6826:	2164      	movs	r1, #100	; 0x64
   d6828:	4620      	mov	r0, r4
   d682a:	f7ff ff67 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_LSB_ADDR, (offsets_type.gyro_offset_z) & 0x0FF);
   d682e:	7c2a      	ldrb	r2, [r5, #16]
   d6830:	2165      	movs	r1, #101	; 0x65
   d6832:	4620      	mov	r0, r4
   d6834:	f7ff ff62 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_MSB_ADDR, (offsets_type.gyro_offset_z >> 8) & 0x0FF);
   d6838:	7c6a      	ldrb	r2, [r5, #17]
   d683a:	2166      	movs	r1, #102	; 0x66
   d683c:	4620      	mov	r0, r4
   d683e:	f7ff ff5d 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_LSB_ADDR, (offsets_type.accel_radius) & 0x0FF);
   d6842:	7caa      	ldrb	r2, [r5, #18]
   d6844:	2167      	movs	r1, #103	; 0x67
   d6846:	4620      	mov	r0, r4
   d6848:	f7ff ff58 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_MSB_ADDR, (offsets_type.accel_radius >> 8) & 0x0FF);
   d684c:	7cea      	ldrb	r2, [r5, #19]
   d684e:	2168      	movs	r1, #104	; 0x68
   d6850:	4620      	mov	r0, r4
   d6852:	f7ff ff53 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_LSB_ADDR, (offsets_type.mag_radius) & 0x0FF);
   d6856:	7d2a      	ldrb	r2, [r5, #20]
   d6858:	2169      	movs	r1, #105	; 0x69
   d685a:	4620      	mov	r0, r4
   d685c:	f7ff ff4e 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_MSB_ADDR, (offsets_type.mag_radius >> 8) & 0x0FF);
   d6860:	7d6a      	ldrb	r2, [r5, #21]
   d6862:	216a      	movs	r1, #106	; 0x6a
   d6864:	4620      	mov	r0, r4
   d6866:	f7ff ff49 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  setMode(lastMode);
   d686a:	4631      	mov	r1, r6
   d686c:	4620      	mov	r0, r4
}
   d686e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setMode(lastMode);
   d6872:	f7ff bf54 	b.w	d671e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

000d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
   d6876:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[1] = {reg};
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d6878:	2201      	movs	r2, #1
   d687a:	2300      	movs	r3, #0
   d687c:	e9cd 2300 	strd	r2, r3, [sp]
   d6880:	ab03      	add	r3, sp, #12
  uint8_t buffer[1] = {reg};
   d6882:	f88d 100c 	strb.w	r1, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d6886:	6880      	ldr	r0, [r0, #8]
   d6888:	4619      	mov	r1, r3
   d688a:	f7ff fed7 	bl	d663c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
  return (byte)buffer[0];
}
   d688e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d6892:	b005      	add	sp, #20
   d6894:	f85d fb04 	ldr.w	pc, [sp], #4

000d6898 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
   d6898:	b570      	push	{r4, r5, r6, lr}
   d689a:	4604      	mov	r4, r0
   d689c:	460e      	mov	r6, r1
  if (!i2c_dev->begin()) {
   d689e:	6880      	ldr	r0, [r0, #8]
   d68a0:	2101      	movs	r1, #1
   d68a2:	f7ff fe4e 	bl	d6542 <_ZN18Adafruit_I2CDevice5beginEb>
   d68a6:	4605      	mov	r5, r0
   d68a8:	b910      	cbnz	r0, d68b0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x18>
    return false;
   d68aa:	2500      	movs	r5, #0
}
   d68ac:	4628      	mov	r0, r5
   d68ae:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
   d68b0:	2100      	movs	r1, #0
   d68b2:	4620      	mov	r0, r4
   d68b4:	f7ff ffdf 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (id != BNO055_ID) {
   d68b8:	28a0      	cmp	r0, #160	; 0xa0
   d68ba:	d113      	bne.n	d68e4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4c>
  setMode(OPERATION_MODE_CONFIG);
   d68bc:	2100      	movs	r1, #0
   d68be:	4620      	mov	r0, r4
   d68c0:	f7ff ff2d 	bl	d671e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
   d68c4:	2220      	movs	r2, #32
   d68c6:	213f      	movs	r1, #63	; 0x3f
   d68c8:	4620      	mov	r0, r4
   d68ca:	f7ff ff17 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
   d68ce:	201e      	movs	r0, #30
    delay(10);
   d68d0:	f001 fee4 	bl	d869c <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
   d68d4:	2100      	movs	r1, #0
   d68d6:	4620      	mov	r0, r4
   d68d8:	f7ff ffcd 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d68dc:	28a0      	cmp	r0, #160	; 0xa0
   d68de:	d00c      	beq.n	d68fa <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x62>
    delay(10);
   d68e0:	200a      	movs	r0, #10
   d68e2:	e7f5      	b.n	d68d0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x38>
    delay(1000); // hold on for boot
   d68e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d68e8:	f001 fed8 	bl	d869c <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
   d68ec:	2100      	movs	r1, #0
   d68ee:	4620      	mov	r0, r4
   d68f0:	f7ff ffc1 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if (id != BNO055_ID) {
   d68f4:	28a0      	cmp	r0, #160	; 0xa0
   d68f6:	d1d8      	bne.n	d68aa <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x12>
   d68f8:	e7e0      	b.n	d68bc <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x24>
  delay(50);
   d68fa:	2032      	movs	r0, #50	; 0x32
   d68fc:	f001 fece 	bl	d869c <delay>
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
   d6900:	2200      	movs	r2, #0
   d6902:	213e      	movs	r1, #62	; 0x3e
   d6904:	4620      	mov	r0, r4
   d6906:	f7ff fef9 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d690a:	200a      	movs	r0, #10
   d690c:	f001 fec6 	bl	d869c <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6910:	2200      	movs	r2, #0
   d6912:	2107      	movs	r1, #7
   d6914:	4620      	mov	r0, r4
   d6916:	f7ff fef1 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
   d691a:	2200      	movs	r2, #0
   d691c:	213f      	movs	r1, #63	; 0x3f
   d691e:	4620      	mov	r0, r4
   d6920:	f7ff feec 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6924:	200a      	movs	r0, #10
   d6926:	f001 feb9 	bl	d869c <delay>
  setMode(mode);
   d692a:	4620      	mov	r0, r4
   d692c:	4631      	mov	r1, r6
   d692e:	f7ff fef6 	bl	d671e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   d6932:	2014      	movs	r0, #20
   d6934:	f001 feb2 	bl	d869c <delay>
  return true;
   d6938:	e7b8      	b.n	d68ac <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x14>

000d693a <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>:
                                      uint8_t *system_error) {
   d693a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d693c:	460f      	mov	r7, r1
   d693e:	4616      	mov	r6, r2
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6940:	2107      	movs	r1, #7
   d6942:	2200      	movs	r2, #0
                                      uint8_t *system_error) {
   d6944:	4604      	mov	r4, r0
   d6946:	461d      	mov	r5, r3
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6948:	f7ff fed8 	bl	d66fc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (system_status != 0)
   d694c:	b127      	cbz	r7, d6958 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x1e>
    *system_status = read8(BNO055_SYS_STAT_ADDR);
   d694e:	2139      	movs	r1, #57	; 0x39
   d6950:	4620      	mov	r0, r4
   d6952:	f7ff ff90 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6956:	7038      	strb	r0, [r7, #0]
  if (self_test_result != 0)
   d6958:	b126      	cbz	r6, d6964 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x2a>
    *self_test_result = read8(BNO055_SELFTEST_RESULT_ADDR);
   d695a:	2136      	movs	r1, #54	; 0x36
   d695c:	4620      	mov	r0, r4
   d695e:	f7ff ff8a 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6962:	7030      	strb	r0, [r6, #0]
  if (system_error != 0)
   d6964:	b125      	cbz	r5, d6970 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x36>
    *system_error = read8(BNO055_SYS_ERR_ADDR);
   d6966:	213a      	movs	r1, #58	; 0x3a
   d6968:	4620      	mov	r0, r4
   d696a:	f7ff ff84 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d696e:	7028      	strb	r0, [r5, #0]
}
   d6970:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(200);
   d6974:	20c8      	movs	r0, #200	; 0xc8
   d6976:	f001 be91 	b.w	d869c <delay>

000d697a <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>:
                                     uint8_t *accel, uint8_t *mag) {
   d697a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d697c:	460e      	mov	r6, r1
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d697e:	2135      	movs	r1, #53	; 0x35
                                     uint8_t *accel, uint8_t *mag) {
   d6980:	9f06      	ldr	r7, [sp, #24]
   d6982:	4615      	mov	r5, r2
   d6984:	461c      	mov	r4, r3
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d6986:	f7ff ff76 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (sys != NULL) {
   d698a:	b10e      	cbz	r6, d6990 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x16>
    *sys = (calData >> 6) & 0x03;
   d698c:	0983      	lsrs	r3, r0, #6
   d698e:	7033      	strb	r3, [r6, #0]
  if (gyro != NULL) {
   d6990:	b115      	cbz	r5, d6998 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x1e>
    *gyro = (calData >> 4) & 0x03;
   d6992:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d6996:	702b      	strb	r3, [r5, #0]
  if (accel != NULL) {
   d6998:	b114      	cbz	r4, d69a0 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x26>
    *accel = (calData >> 2) & 0x03;
   d699a:	f3c0 0381 	ubfx	r3, r0, #2, #2
   d699e:	7023      	strb	r3, [r4, #0]
  if (mag != NULL) {
   d69a0:	b117      	cbz	r7, d69a8 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x2e>
    *mag = calData & 0x03;
   d69a2:	f000 0003 	and.w	r0, r0, #3
   d69a6:	7038      	strb	r0, [r7, #0]
}
   d69a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d69aa <_ZN15Adafruit_BNO05517isFullyCalibratedEv>:
bool Adafruit_BNO055::isFullyCalibrated() {
   d69aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d69ac:	4604      	mov	r4, r0
  getCalibration(&system, &gyro, &accel, &mag);
   d69ae:	f10d 030f 	add.w	r3, sp, #15
   d69b2:	9300      	str	r3, [sp, #0]
   d69b4:	f10d 020d 	add.w	r2, sp, #13
   d69b8:	f10d 030e 	add.w	r3, sp, #14
   d69bc:	a903      	add	r1, sp, #12
   d69be:	f7ff ffdc 	bl	d697a <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
  switch (_mode) {
   d69c2:	7c23      	ldrb	r3, [r4, #16]
   d69c4:	3b01      	subs	r3, #1
   d69c6:	2b09      	cmp	r3, #9
   d69c8:	d817      	bhi.n	d69fa <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x50>
   d69ca:	e8df f003 	tbb	[pc, r3]
   d69ce:	2205      	.short	0x2205
   d69d0:	130c1e10 	.word	0x130c1e10
   d69d4:	101e0c16 	.word	0x101e0c16
    return (accel == 3);
   d69d8:	f89d 000e 	ldrb.w	r0, [sp, #14]
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   d69dc:	1ec3      	subs	r3, r0, #3
   d69de:	4258      	negs	r0, r3
   d69e0:	4158      	adcs	r0, r3
}
   d69e2:	b004      	add	sp, #16
   d69e4:	bd10      	pop	{r4, pc}
    return (accel == 3 && gyro == 3);
   d69e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    return (mag == 3 && gyro == 3);
   d69ea:	2b03      	cmp	r3, #3
   d69ec:	d114      	bne.n	d6a18 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d69ee:	f89d 000d 	ldrb.w	r0, [sp, #13]
   d69f2:	e7f3      	b.n	d69dc <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
   d69f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d69f8:	e7f7      	b.n	d69ea <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x40>
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   d69fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d69fe:	2b03      	cmp	r3, #3
   d6a00:	d10a      	bne.n	d6a18 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6a02:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6a06:	2b03      	cmp	r3, #3
   d6a08:	d106      	bne.n	d6a18 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6a0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6a0e:	2b03      	cmp	r3, #3
   d6a10:	d102      	bne.n	d6a18 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6a12:	f89d 000f 	ldrb.w	r0, [sp, #15]
   d6a16:	e7e1      	b.n	d69dc <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
    return (accel == 3 && mag == 3);
   d6a18:	2000      	movs	r0, #0
   d6a1a:	e7e2      	b.n	d69e2 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x38>

000d6a1c <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>:
    adafruit_bno055_offsets_t &offsets_type) {
   d6a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6a20:	4604      	mov	r4, r0
   d6a22:	460d      	mov	r5, r1
  if (isFullyCalibrated()) {
   d6a24:	f7ff ffc1 	bl	d69aa <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d6a28:	4606      	mov	r6, r0
   d6a2a:	2800      	cmp	r0, #0
   d6a2c:	f000 8091 	beq.w	d6b52 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t+0x136>
    setMode(OPERATION_MODE_CONFIG);
   d6a30:	2100      	movs	r1, #0
   d6a32:	4620      	mov	r0, r4
    adafruit_bno055_opmode_t lastMode = _mode;
   d6a34:	f894 8010 	ldrb.w	r8, [r4, #16]
    setMode(OPERATION_MODE_CONFIG);
   d6a38:	f7ff fe71 	bl	d671e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
    delay(25);
   d6a3c:	2019      	movs	r0, #25
   d6a3e:	f001 fe2d 	bl	d869c <delay>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6a42:	2156      	movs	r1, #86	; 0x56
   d6a44:	4620      	mov	r0, r4
   d6a46:	f7ff ff16 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   d6a4a:	2155      	movs	r1, #85	; 0x55
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6a4c:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   d6a4e:	4620      	mov	r0, r4
   d6a50:	f7ff ff11 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6a54:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6a58:	8028      	strh	r0, [r5, #0]
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6a5a:	2158      	movs	r1, #88	; 0x58
   d6a5c:	4620      	mov	r0, r4
   d6a5e:	f7ff ff0a 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   d6a62:	2157      	movs	r1, #87	; 0x57
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6a64:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   d6a66:	4620      	mov	r0, r4
   d6a68:	f7ff ff05 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6a6c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6a70:	8068      	strh	r0, [r5, #2]
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6a72:	215a      	movs	r1, #90	; 0x5a
   d6a74:	4620      	mov	r0, r4
   d6a76:	f7ff fefe 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   d6a7a:	2159      	movs	r1, #89	; 0x59
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6a7c:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   d6a7e:	4620      	mov	r0, r4
   d6a80:	f7ff fef9 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6a84:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6a88:	80a8      	strh	r0, [r5, #4]
        (read8(MAG_OFFSET_X_MSB_ADDR) << 8) | (read8(MAG_OFFSET_X_LSB_ADDR));
   d6a8a:	215c      	movs	r1, #92	; 0x5c
   d6a8c:	4620      	mov	r0, r4
   d6a8e:	f7ff fef2 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6a92:	215b      	movs	r1, #91	; 0x5b
   d6a94:	4607      	mov	r7, r0
   d6a96:	4620      	mov	r0, r4
   d6a98:	f7ff feed 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6a9c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_x =
   d6aa0:	80e8      	strh	r0, [r5, #6]
        (read8(MAG_OFFSET_Y_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Y_LSB_ADDR));
   d6aa2:	215e      	movs	r1, #94	; 0x5e
   d6aa4:	4620      	mov	r0, r4
   d6aa6:	f7ff fee6 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6aaa:	215d      	movs	r1, #93	; 0x5d
   d6aac:	4607      	mov	r7, r0
   d6aae:	4620      	mov	r0, r4
   d6ab0:	f7ff fee1 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ab4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_y =
   d6ab8:	8128      	strh	r0, [r5, #8]
        (read8(MAG_OFFSET_Z_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Z_LSB_ADDR));
   d6aba:	2160      	movs	r1, #96	; 0x60
   d6abc:	4620      	mov	r0, r4
   d6abe:	f7ff feda 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ac2:	215f      	movs	r1, #95	; 0x5f
   d6ac4:	4607      	mov	r7, r0
   d6ac6:	4620      	mov	r0, r4
   d6ac8:	f7ff fed5 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6acc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_z =
   d6ad0:	8168      	strh	r0, [r5, #10]
        (read8(GYRO_OFFSET_X_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_X_LSB_ADDR));
   d6ad2:	2162      	movs	r1, #98	; 0x62
   d6ad4:	4620      	mov	r0, r4
   d6ad6:	f7ff fece 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ada:	2161      	movs	r1, #97	; 0x61
   d6adc:	4607      	mov	r7, r0
   d6ade:	4620      	mov	r0, r4
   d6ae0:	f7ff fec9 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ae4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_x =
   d6ae8:	81a8      	strh	r0, [r5, #12]
        (read8(GYRO_OFFSET_Y_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Y_LSB_ADDR));
   d6aea:	2164      	movs	r1, #100	; 0x64
   d6aec:	4620      	mov	r0, r4
   d6aee:	f7ff fec2 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6af2:	2163      	movs	r1, #99	; 0x63
   d6af4:	4607      	mov	r7, r0
   d6af6:	4620      	mov	r0, r4
   d6af8:	f7ff febd 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6afc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_y =
   d6b00:	81e8      	strh	r0, [r5, #14]
        (read8(GYRO_OFFSET_Z_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Z_LSB_ADDR));
   d6b02:	2166      	movs	r1, #102	; 0x66
   d6b04:	4620      	mov	r0, r4
   d6b06:	f7ff feb6 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b0a:	2165      	movs	r1, #101	; 0x65
   d6b0c:	4607      	mov	r7, r0
   d6b0e:	4620      	mov	r0, r4
   d6b10:	f7ff feb1 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b14:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_z =
   d6b18:	8228      	strh	r0, [r5, #16]
        (read8(ACCEL_RADIUS_MSB_ADDR) << 8) | (read8(ACCEL_RADIUS_LSB_ADDR));
   d6b1a:	2168      	movs	r1, #104	; 0x68
   d6b1c:	4620      	mov	r0, r4
   d6b1e:	f7ff feaa 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b22:	2167      	movs	r1, #103	; 0x67
   d6b24:	4607      	mov	r7, r0
   d6b26:	4620      	mov	r0, r4
   d6b28:	f7ff fea5 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b2c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.accel_radius =
   d6b30:	8268      	strh	r0, [r5, #18]
        (read8(MAG_RADIUS_MSB_ADDR) << 8) | (read8(MAG_RADIUS_LSB_ADDR));
   d6b32:	216a      	movs	r1, #106	; 0x6a
   d6b34:	4620      	mov	r0, r4
   d6b36:	f7ff fe9e 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b3a:	2169      	movs	r1, #105	; 0x69
   d6b3c:	4607      	mov	r7, r0
   d6b3e:	4620      	mov	r0, r4
   d6b40:	f7ff fe99 	bl	d6876 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b44:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_radius =
   d6b48:	82a8      	strh	r0, [r5, #20]
    setMode(lastMode);
   d6b4a:	4641      	mov	r1, r8
   d6b4c:	4620      	mov	r0, r4
   d6b4e:	f7ff fde6 	bl	d671e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d6b52:	4630      	mov	r0, r6
   d6b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6b58 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte *buffer,
                              uint8_t len) {
   d6b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t reg_buf[1] = {(uint8_t)reg};
   d6b5a:	f88d 100c 	strb.w	r1, [sp, #12]
  return i2c_dev->write_then_read(reg_buf, 1, buffer, len);
   d6b5e:	2100      	movs	r1, #0
   d6b60:	e9cd 3100 	strd	r3, r1, [sp]
   d6b64:	4613      	mov	r3, r2
   d6b66:	a903      	add	r1, sp, #12
   d6b68:	2201      	movs	r2, #1
   d6b6a:	6880      	ldr	r0, [r0, #8]
   d6b6c:	f7ff fd66 	bl	d663c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
}
   d6b70:	b005      	add	sp, #20
   d6b72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6b78 <_ZN15Adafruit_BNO0557getQuatEv>:
imu::Quaternion Adafruit_BNO055::getQuat() {
   d6b78:	b500      	push	{lr}
   d6b7a:	ed2d 8b06 	vpush	{d8-d10}
  memset(buffer, 0, 8);
   d6b7e:	2300      	movs	r3, #0
imu::Quaternion Adafruit_BNO055::getQuat() {
   d6b80:	b093      	sub	sp, #76	; 0x4c
  readLen(BNO055_QUATERNION_DATA_W_LSB_ADDR, buffer, 8);
   d6b82:	aa08      	add	r2, sp, #32
  memset(buffer, 0, 8);
   d6b84:	e9cd 3308 	strd	r3, r3, [sp, #32]
  readLen(BNO055_QUATERNION_DATA_W_LSB_ADDR, buffer, 8);
   d6b88:	2120      	movs	r1, #32
   d6b8a:	2308      	movs	r3, #8
   d6b8c:	f7ff ffe4 	bl	d6b58 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  x = (((uint16_t)buffer[3]) << 8) | ((uint16_t)buffer[2]);
   d6b90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d6b94:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   d6b98:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6b9c:	b200      	sxth	r0, r0
   d6b9e:	f004 ffeb 	bl	dbb78 <__aeabi_i2d>
   d6ba2:	2200      	movs	r2, #0
   d6ba4:	4b21      	ldr	r3, [pc, #132]	; (d6c2c <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d6ba6:	f005 f851 	bl	dbc4c <__aeabi_dmul>
  y = (((uint16_t)buffer[5]) << 8) | ((uint16_t)buffer[4]);
   d6baa:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6bae:	ec41 0b1a 	vmov	d10, r0, r1
  y = (((uint16_t)buffer[5]) << 8) | ((uint16_t)buffer[4]);
   d6bb2:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   d6bb6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6bba:	b200      	sxth	r0, r0
   d6bbc:	f004 ffdc 	bl	dbb78 <__aeabi_i2d>
   d6bc0:	2200      	movs	r2, #0
   d6bc2:	4b1a      	ldr	r3, [pc, #104]	; (d6c2c <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d6bc4:	f005 f842 	bl	dbc4c <__aeabi_dmul>
  z = (((uint16_t)buffer[7]) << 8) | ((uint16_t)buffer[6]);
   d6bc8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6bcc:	ec41 0b19 	vmov	d9, r0, r1
  z = (((uint16_t)buffer[7]) << 8) | ((uint16_t)buffer[6]);
   d6bd0:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   d6bd4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6bd8:	b200      	sxth	r0, r0
   d6bda:	f004 ffcd 	bl	dbb78 <__aeabi_i2d>
   d6bde:	2200      	movs	r2, #0
   d6be0:	4b12      	ldr	r3, [pc, #72]	; (d6c2c <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d6be2:	f005 f833 	bl	dbc4c <__aeabi_dmul>
  w = (((uint16_t)buffer[1]) << 8) | ((uint16_t)buffer[0]);
   d6be6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6bea:	ec41 0b18 	vmov	d8, r0, r1
  w = (((uint16_t)buffer[1]) << 8) | ((uint16_t)buffer[0]);
   d6bee:	f89d 0020 	ldrb.w	r0, [sp, #32]
   d6bf2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6bf6:	b200      	sxth	r0, r0
   d6bf8:	f004 ffbe 	bl	dbb78 <__aeabi_i2d>
   d6bfc:	4b0b      	ldr	r3, [pc, #44]	; (d6c2c <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d6bfe:	2200      	movs	r2, #0
   d6c00:	f005 f824 	bl	dbc4c <__aeabi_dmul>
}
   d6c04:	eeb0 1a4a 	vmov.f32	s2, s20
   d6c08:	eef0 1a6a 	vmov.f32	s3, s21
   d6c0c:	eeb0 2a49 	vmov.f32	s4, s18
   d6c10:	eef0 2a69 	vmov.f32	s5, s19
   d6c14:	ec41 0b10 	vmov	d0, r0, r1
   d6c18:	eeb0 3a48 	vmov.f32	s6, s16
   d6c1c:	eef0 3a68 	vmov.f32	s7, s17
   d6c20:	b013      	add	sp, #76	; 0x4c
   d6c22:	ecbd 8b06 	vpop	{d8-d10}
   d6c26:	f85d fb04 	ldr.w	pc, [sp], #4
   d6c2a:	bf00      	nop
   d6c2c:	3f100000 	.word	0x3f100000

000d6c30 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
   d6c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6c32:	460d      	mov	r5, r1
   d6c34:	4616      	mov	r6, r2

namespace imu {

template <uint8_t N> class Vector {
public:
  Vector() { memset(p_vec, 0, sizeof(double) * N); }
   d6c36:	2100      	movs	r1, #0
   d6c38:	2218      	movs	r2, #24
   d6c3a:	4604      	mov	r4, r0
   d6c3c:	f005 fe24 	bl	dc888 <memset>
  memset(buffer, 0, 6);
   d6c40:	2300      	movs	r3, #0
   d6c42:	9300      	str	r3, [sp, #0]
   d6c44:	f8ad 3004 	strh.w	r3, [sp, #4]
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
   d6c48:	4628      	mov	r0, r5
   d6c4a:	2306      	movs	r3, #6
   d6c4c:	466a      	mov	r2, sp
   d6c4e:	4631      	mov	r1, r6
   d6c50:	f7ff ff82 	bl	d6b58 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6c54:	f89d 3001 	ldrb.w	r3, [sp, #1]
   d6c58:	f89d 0000 	ldrb.w	r0, [sp]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6c5c:	f89d 7002 	ldrb.w	r7, [sp, #2]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6c60:	f89d 5004 	ldrb.w	r5, [sp, #4]
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6c64:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6c68:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d6c6c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6c70:	f89d 3005 	ldrb.w	r3, [sp, #5]
  switch (vector_type) {
   d6c74:	2e1a      	cmp	r6, #26
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6c76:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6c7a:	b200      	sxth	r0, r0
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6c7c:	b23f      	sxth	r7, r7
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6c7e:	b22d      	sxth	r5, r5
  switch (vector_type) {
   d6c80:	d00d      	beq.n	d6c9e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6c82:	d808      	bhi.n	d6c96 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x66>
   d6c84:	2e0e      	cmp	r6, #14
   d6c86:	d00a      	beq.n	d6c9e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6c88:	2e14      	cmp	r6, #20
   d6c8a:	d008      	beq.n	d6c9e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6c8c:	2e08      	cmp	r6, #8
   d6c8e:	d021      	beq.n	d6cd4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
}
   d6c90:	4620      	mov	r0, r4
   d6c92:	b003      	add	sp, #12
   d6c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (vector_type) {
   d6c96:	2e28      	cmp	r6, #40	; 0x28
   d6c98:	d01c      	beq.n	d6cd4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
   d6c9a:	2e2e      	cmp	r6, #46	; 0x2e
   d6c9c:	e7f7      	b.n	d6c8e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5e>
    xyz[0] = ((double)x) / 16.0;
   d6c9e:	f004 ff6b 	bl	dbb78 <__aeabi_i2d>
   d6ca2:	4b19      	ldr	r3, [pc, #100]	; (d6d08 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6ca4:	2200      	movs	r2, #0
   d6ca6:	f004 ffd1 	bl	dbc4c <__aeabi_dmul>
   d6caa:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 16.0;
   d6cae:	4638      	mov	r0, r7
   d6cb0:	f004 ff62 	bl	dbb78 <__aeabi_i2d>
   d6cb4:	4b14      	ldr	r3, [pc, #80]	; (d6d08 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6cb6:	2200      	movs	r2, #0
   d6cb8:	f004 ffc8 	bl	dbc4c <__aeabi_dmul>
   d6cbc:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 16.0;
   d6cc0:	4628      	mov	r0, r5
   d6cc2:	f004 ff59 	bl	dbb78 <__aeabi_i2d>
   d6cc6:	4b10      	ldr	r3, [pc, #64]	; (d6d08 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6cc8:	2200      	movs	r2, #0
   d6cca:	f004 ffbf 	bl	dbc4c <__aeabi_dmul>
    xyz[2] = ((double)z) / 100.0;
   d6cce:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return xyz;
   d6cd2:	e7dd      	b.n	d6c90 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x60>
    xyz[0] = ((double)x) / 100.0;
   d6cd4:	f004 ff50 	bl	dbb78 <__aeabi_i2d>
   d6cd8:	4b0c      	ldr	r3, [pc, #48]	; (d6d0c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6cda:	2200      	movs	r2, #0
   d6cdc:	f005 f8e0 	bl	dbea0 <__aeabi_ddiv>
   d6ce0:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 100.0;
   d6ce4:	4638      	mov	r0, r7
   d6ce6:	f004 ff47 	bl	dbb78 <__aeabi_i2d>
   d6cea:	4b08      	ldr	r3, [pc, #32]	; (d6d0c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6cec:	2200      	movs	r2, #0
   d6cee:	f005 f8d7 	bl	dbea0 <__aeabi_ddiv>
   d6cf2:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 100.0;
   d6cf6:	4628      	mov	r0, r5
   d6cf8:	f004 ff3e 	bl	dbb78 <__aeabi_i2d>
   d6cfc:	4b03      	ldr	r3, [pc, #12]	; (d6d0c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6cfe:	2200      	movs	r2, #0
   d6d00:	f005 f8ce 	bl	dbea0 <__aeabi_ddiv>
   d6d04:	e7e3      	b.n	d6cce <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9e>
   d6d06:	bf00      	nop
   d6d08:	3fb00000 	.word	0x3fb00000
   d6d0c:	40590000 	.word	0x40590000

000d6d10 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
   d6d10:	b530      	push	{r4, r5, lr}
   d6d12:	460c      	mov	r4, r1
   d6d14:	b087      	sub	sp, #28
   d6d16:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   d6d18:	2220      	movs	r2, #32
   d6d1a:	2100      	movs	r1, #0
   d6d1c:	1d20      	adds	r0, r4, #4
   d6d1e:	f005 fdb3 	bl	dc888 <memset>
  event->version = sizeof(sensors_event_t);
   d6d22:	2324      	movs	r3, #36	; 0x24
   d6d24:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d6d26:	68eb      	ldr	r3, [r5, #12]
   d6d28:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_ORIENTATION;
   d6d2a:	2303      	movs	r3, #3
   d6d2c:	60a3      	str	r3, [r4, #8]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6d2e:	f000 ffc9 	bl	d7cc4 <HAL_Timer_Get_Milli_Seconds>
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6d32:	221a      	movs	r2, #26
  event->timestamp = millis();
   d6d34:	6120      	str	r0, [r4, #16]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6d36:	4629      	mov	r1, r5
   d6d38:	4668      	mov	r0, sp
   d6d3a:	f7ff ff79 	bl	d6c30 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
   d6d3e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6d42:	f005 fa7b 	bl	dc23c <__aeabi_d2f>
   d6d46:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
   d6d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6d4c:	f005 fa76 	bl	dc23c <__aeabi_d2f>
   d6d50:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
   d6d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6d56:	f005 fa71 	bl	dc23c <__aeabi_d2f>
   d6d5a:	61e0      	str	r0, [r4, #28]
}
   d6d5c:	2001      	movs	r0, #1
   d6d5e:	b007      	add	sp, #28
   d6d60:	bd30      	pop	{r4, r5, pc}

000d6d62 <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d6d62:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d6d64:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d6d66:	db66      	blt.n	d6e36 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6d68:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d6d6c:	428c      	cmp	r4, r1
   d6d6e:	dd62      	ble.n	d6e36 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6d70:	2a00      	cmp	r2, #0
   d6d72:	db60      	blt.n	d6e36 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6d74:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d6d78:	4294      	cmp	r4, r2
   d6d7a:	dd5c      	ble.n	d6e36 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   d6d7c:	7e84      	ldrb	r4, [r0, #26]
   d6d7e:	2c02      	cmp	r4, #2
   d6d80:	d05a      	beq.n	d6e38 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   d6d82:	2c03      	cmp	r4, #3
   d6d84:	d061      	beq.n	d6e4a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   d6d86:	2c01      	cmp	r4, #1
   d6d88:	d104      	bne.n	d6d94 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   d6d8a:	8904      	ldrh	r4, [r0, #8]
   d6d8c:	43d2      	mvns	r2, r2
   d6d8e:	4414      	add	r4, r2
      break;
   d6d90:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d6d92:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   d6d94:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   d6d98:	428c      	cmp	r4, r1
   d6d9a:	bfa8      	it	ge
   d6d9c:	460c      	movge	r4, r1
   d6d9e:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   d6da0:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   d6da4:	4294      	cmp	r4, r2
   d6da6:	bfa8      	it	ge
   d6da8:	4614      	movge	r4, r2
   d6daa:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   d6dac:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   d6db0:	428c      	cmp	r4, r1
   d6db2:	bfb8      	it	lt
   d6db4:	460c      	movlt	r4, r1
   d6db6:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   d6db8:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   d6dbc:	4294      	cmp	r4, r2
   d6dbe:	bfb8      	it	lt
   d6dc0:	4614      	movlt	r4, r2
   d6dc2:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   d6dc4:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d6dc8:	2c01      	cmp	r4, #1
   d6dca:	d116      	bne.n	d6dfa <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   d6dcc:	2b01      	cmp	r3, #1
   d6dce:	d042      	beq.n	d6e56 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   d6dd0:	2b02      	cmp	r3, #2
   d6dd2:	d051      	beq.n	d6e78 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   d6dd4:	b98b      	cbnz	r3, d6dfa <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   d6dd6:	2a00      	cmp	r2, #0
   d6dd8:	8905      	ldrh	r5, [r0, #8]
   d6dda:	6b47      	ldr	r7, [r0, #52]	; 0x34
   d6ddc:	4614      	mov	r4, r2
   d6dde:	bfb8      	it	lt
   d6de0:	1dd4      	addlt	r4, r2, #7
   d6de2:	10e4      	asrs	r4, r4, #3
   d6de4:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6de8:	f002 0607 	and.w	r6, r2, #7
   d6dec:	2501      	movs	r5, #1
   d6dee:	fa05 f606 	lsl.w	r6, r5, r6
   d6df2:	5d3d      	ldrb	r5, [r7, r4]
   d6df4:	ea25 0506 	bic.w	r5, r5, r6
   d6df8:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   d6dfa:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d6dfe:	2c04      	cmp	r4, #4
   d6e00:	d119      	bne.n	d6e36 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   d6e02:	8904      	ldrh	r4, [r0, #8]
   d6e04:	fb14 f202 	smulbb	r2, r4, r2
   d6e08:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   d6e0c:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   d6e10:	f342 024f 	sbfx	r2, r2, #1, #16
   d6e14:	eb02 0264 	add.w	r2, r2, r4, asr #1
   d6e18:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
   d6e1a:	5ca0      	ldrb	r0, [r4, r2]
   d6e1c:	07c9      	lsls	r1, r1, #31
        uint8_t t = pixelptr[0] & 0x0F;
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   d6e1e:	bf4b      	itete	mi
   d6e20:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   d6e24:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   d6e28:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   d6e2c:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   d6e30:	bf48      	it	mi
   d6e32:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   d6e34:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   d6e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   d6e38:	8904      	ldrh	r4, [r0, #8]
   d6e3a:	43c9      	mvns	r1, r1
   d6e3c:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d6e3e:	8944      	ldrh	r4, [r0, #10]
   d6e40:	43d2      	mvns	r2, r2
   d6e42:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   d6e44:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d6e46:	b212      	sxth	r2, r2
      break;
   d6e48:	e7a4      	b.n	d6d94 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d6e4a:	8944      	ldrh	r4, [r0, #10]
   d6e4c:	43c9      	mvns	r1, r1
   d6e4e:	440c      	add	r4, r1
      break;
   d6e50:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d6e52:	b222      	sxth	r2, r4
      break;
   d6e54:	e79e      	b.n	d6d94 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   d6e56:	2a00      	cmp	r2, #0
   d6e58:	8905      	ldrh	r5, [r0, #8]
   d6e5a:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d6e5c:	4614      	mov	r4, r2
   d6e5e:	bfb8      	it	lt
   d6e60:	1dd4      	addlt	r4, r2, #7
   d6e62:	10e4      	asrs	r4, r4, #3
   d6e64:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6e68:	f002 0707 	and.w	r7, r2, #7
   d6e6c:	2501      	movs	r5, #1
   d6e6e:	40bd      	lsls	r5, r7
   d6e70:	5d37      	ldrb	r7, [r6, r4]
   d6e72:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d6e74:	5535      	strb	r5, [r6, r4]
        break;
   d6e76:	e7c0      	b.n	d6dfa <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d6e78:	2a00      	cmp	r2, #0
   d6e7a:	8905      	ldrh	r5, [r0, #8]
   d6e7c:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d6e7e:	4614      	mov	r4, r2
   d6e80:	bfb8      	it	lt
   d6e82:	1dd4      	addlt	r4, r2, #7
   d6e84:	10e4      	asrs	r4, r4, #3
   d6e86:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6e8a:	f002 0707 	and.w	r7, r2, #7
   d6e8e:	2501      	movs	r5, #1
   d6e90:	40bd      	lsls	r5, r7
   d6e92:	5d37      	ldrb	r7, [r6, r4]
   d6e94:	407d      	eors	r5, r7
   d6e96:	e7ed      	b.n	d6e74 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

000d6e98 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   d6e98:	b538      	push	{r3, r4, r5, lr}
   d6e9a:	460d      	mov	r5, r1
   d6e9c:	4611      	mov	r1, r2
   d6e9e:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d6ea0:	b21a      	sxth	r2, r3
   d6ea2:	b209      	sxth	r1, r1
   d6ea4:	f000 fa96 	bl	d73d4 <_ZN12Adafruit_GFXC1Ess>
   d6ea8:	9a06      	ldr	r2, [sp, #24]
   d6eaa:	4b0b      	ldr	r3, [pc, #44]	; (d6ed8 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   d6eac:	62e2      	str	r2, [r4, #44]	; 0x2c
   d6eae:	9a07      	ldr	r2, [sp, #28]
   d6eb0:	6023      	str	r3, [r4, #0]
   d6eb2:	2300      	movs	r3, #0
   d6eb4:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   d6eb8:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   d6ebc:	f04f 33ff 	mov.w	r3, #4294967295
   d6ec0:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   d6ec4:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   d6ec8:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   d6eca:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d6ecc:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   d6ed0:	6523      	str	r3, [r4, #80]	; 0x50
}
   d6ed2:	4620      	mov	r0, r4
   d6ed4:	bd38      	pop	{r3, r4, r5, pc}
   d6ed6:	bf00      	nop
   d6ed8:	000dd120 	.word	0x000dd120

000d6edc <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   d6edc:	b538      	push	{r3, r4, r5, lr}
   d6ede:	4b0c      	ldr	r3, [pc, #48]	; (d6f10 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   d6ee0:	6003      	str	r3, [r0, #0]
   d6ee2:	4604      	mov	r4, r0
  if (buffer) {
   d6ee4:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6ee6:	b118      	cbz	r0, d6ef0 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   d6ee8:	f001 f8f0 	bl	d80cc <free>
    buffer = NULL;
   d6eec:	2300      	movs	r3, #0
   d6eee:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   d6ef0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d6ef2:	b135      	cbz	r5, d6f02 <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   d6ef4:	4628      	mov	r0, r5
   d6ef6:	f7ff f9db 	bl	d62b0 <_ZN18Adafruit_SPIDeviceD1Ev>
   d6efa:	2138      	movs	r1, #56	; 0x38
   d6efc:	4628      	mov	r0, r5
   d6efe:	f002 f875 	bl	d8fec <_ZdlPvj>
  if (i2c_dev)
   d6f02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6f04:	b110      	cbz	r0, d6f0c <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   d6f06:	2110      	movs	r1, #16
   d6f08:	f002 f870 	bl	d8fec <_ZdlPvj>
}
   d6f0c:	4620      	mov	r0, r4
   d6f0e:	bd38      	pop	{r3, r4, r5, pc}
   d6f10:	000dd120 	.word	0x000dd120

000d6f14 <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d6f14:	b530      	push	{r4, r5, lr}
   d6f16:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   d6f18:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d6f1a:	f88d 100f 	strb.w	r1, [sp, #15]
   d6f1e:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   d6f20:	b17d      	cbz	r5, d6f42 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d6f22:	2300      	movs	r3, #0
   d6f24:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   d6f26:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d6f2a:	f88d 3014 	strb.w	r3, [sp, #20]
   d6f2e:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   d6f32:	2301      	movs	r3, #1
   d6f34:	2202      	movs	r2, #2
   d6f36:	a905      	add	r1, sp, #20
   d6f38:	4628      	mov	r0, r5
   d6f3a:	f7ff fb11 	bl	d6560 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d6f3e:	b007      	add	sp, #28
   d6f40:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   d6f42:	4629      	mov	r1, r5
   d6f44:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d6f48:	f001 ffb9 	bl	d8ebe <digitalWrite>
    spi_dev->write(&c, 1);
   d6f4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6f4e:	9500      	str	r5, [sp, #0]
   d6f50:	462b      	mov	r3, r5
   d6f52:	2201      	movs	r2, #1
   d6f54:	f10d 010f 	add.w	r1, sp, #15
   d6f58:	f7ff faa5 	bl	d64a6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   d6f5c:	e7ef      	b.n	d6f3e <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000d6f5e <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   d6f5e:	2900      	cmp	r1, #0
   d6f60:	bf14      	ite	ne
   d6f62:	21a7      	movne	r1, #167	; 0xa7
   d6f64:	21a6      	moveq	r1, #166	; 0xa6
   d6f66:	f7ff bfd5 	b.w	d6f14 <_ZN17Adafruit_GrayOLED12oled_commandEh>

000d6f6a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d6f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   d6f6c:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d6f6e:	b085      	sub	sp, #20
   d6f70:	4604      	mov	r4, r0
   d6f72:	460e      	mov	r6, r1
   d6f74:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   d6f76:	b165      	cbz	r5, d6f92 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d6f78:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d6f7a:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d6f7e:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d6f82:	2301      	movs	r3, #1
   d6f84:	9000      	str	r0, [sp, #0]
   d6f86:	9301      	str	r3, [sp, #4]
   d6f88:	4628      	mov	r0, r5
   d6f8a:	f7ff fae9 	bl	d6560 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d6f8e:	b005      	add	sp, #20
   d6f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   d6f92:	4629      	mov	r1, r5
   d6f94:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d6f98:	f001 ff91 	bl	d8ebe <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   d6f9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6f9e:	9500      	str	r5, [sp, #0]
   d6fa0:	462b      	mov	r3, r5
   d6fa2:	463a      	mov	r2, r7
   d6fa4:	4631      	mov	r1, r6
   d6fa6:	f7ff fa7e 	bl	d64a6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d6faa:	e7f0      	b.n	d6f8e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000d6fac <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   d6fac:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d6fae:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   d6fb2:	8903      	ldrh	r3, [r0, #8]
   d6fb4:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   d6fb8:	fb12 f203 	smulbb	r2, r2, r3
   d6fbc:	1dcb      	adds	r3, r1, #7
   d6fbe:	bf48      	it	mi
   d6fc0:	f101 030e 	addmi.w	r3, r1, #14
   d6fc4:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   d6fc6:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d6fc8:	435a      	muls	r2, r3
   d6fca:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6fcc:	2100      	movs	r1, #0
   d6fce:	f005 fc5b 	bl	dc888 <memset>
  window_x1 = 0;
   d6fd2:	2300      	movs	r3, #0
   d6fd4:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d6fd6:	8923      	ldrh	r3, [r4, #8]
   d6fd8:	3b01      	subs	r3, #1
   d6fda:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d6fdc:	8963      	ldrh	r3, [r4, #10]
   d6fde:	3b01      	subs	r3, #1
   d6fe0:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   d6fe2:	bd10      	pop	{r4, pc}

000d6fe4 <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d6fe4:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   d6fe6:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d6fe8:	4604      	mov	r4, r0
   d6fea:	460e      	mov	r6, r1
   d6fec:	4615      	mov	r5, r2
  if ((!buffer) &&
   d6fee:	b30b      	cbz	r3, d7034 <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   d6ff0:	2d00      	cmp	r5, #0
   d6ff2:	d133      	bne.n	d705c <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   d6ff4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d6ff6:	2b00      	cmp	r3, #0
   d6ff8:	d050      	beq.n	d709c <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   d6ffa:	2010      	movs	r0, #16
   d6ffc:	f7fd f84b 	bl	d4096 <_Znwj>
   d7000:	4605      	mov	r5, r0
   d7002:	b118      	cbz	r0, d700c <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   d7004:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d7006:	4631      	mov	r1, r6
   d7008:	f7ff fa7f 	bl	d650a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d700c:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   d700e:	b31d      	cbz	r5, d7058 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d7010:	2101      	movs	r1, #1
   d7012:	4628      	mov	r0, r5
   d7014:	f7ff fa95 	bl	d6542 <_ZN18Adafruit_I2CDevice5beginEb>
   d7018:	b1f0      	cbz	r0, d7058 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   d701a:	4620      	mov	r0, r4
   d701c:	f7ff ffc6 	bl	d6fac <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   d7020:	2300      	movs	r3, #0
   d7022:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d7024:	8923      	ldrh	r3, [r4, #8]
   d7026:	3b01      	subs	r3, #1
   d7028:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d702a:	8963      	ldrh	r3, [r4, #10]
   d702c:	3b01      	subs	r3, #1
   d702e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   d7030:	2001      	movs	r0, #1
   d7032:	e012      	b.n	d705a <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   d7034:	8923      	ldrh	r3, [r4, #8]
   d7036:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   d703a:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   d703e:	fb10 f003 	smulbb	r0, r0, r3
   d7042:	1dd3      	adds	r3, r2, #7
   d7044:	bf48      	it	mi
   d7046:	f102 030e 	addmi.w	r3, r2, #14
   d704a:	10db      	asrs	r3, r3, #3
   d704c:	4358      	muls	r0, r3
   d704e:	f001 f835 	bl	d80bc <malloc>
   d7052:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   d7054:	2800      	cmp	r0, #0
   d7056:	d1cb      	bne.n	d6ff0 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   d7058:	2000      	movs	r0, #0
}
   d705a:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   d705c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d705e:	2800      	cmp	r0, #0
   d7060:	dbc8      	blt.n	d6ff4 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   d7062:	2101      	movs	r1, #1
   d7064:	b280      	uxth	r0, r0
   d7066:	f001 ff19 	bl	d8e9c <pinMode>
    digitalWrite(rstPin, HIGH);
   d706a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d706e:	2101      	movs	r1, #1
   d7070:	f001 ff25 	bl	d8ebe <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   d7074:	200a      	movs	r0, #10
   d7076:	f001 fb11 	bl	d869c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d707a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d707e:	2100      	movs	r1, #0
   d7080:	f001 ff1d 	bl	d8ebe <digitalWrite>
    delay(10);                  // Wait 10 ms
   d7084:	200a      	movs	r0, #10
   d7086:	f001 fb09 	bl	d869c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d708a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d708e:	2101      	movs	r1, #1
   d7090:	f001 ff15 	bl	d8ebe <digitalWrite>
    delay(10);
   d7094:	200a      	movs	r0, #10
   d7096:	f001 fb01 	bl	d869c <delay>
   d709a:	e7ab      	b.n	d6ff4 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   d709c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d709e:	2800      	cmp	r0, #0
   d70a0:	d0da      	beq.n	d7058 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d70a2:	f7ff f90e 	bl	d62c2 <_ZN18Adafruit_SPIDevice5beginEv>
   d70a6:	2800      	cmp	r0, #0
   d70a8:	d0d6      	beq.n	d7058 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d70aa:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d70ae:	2101      	movs	r1, #1
   d70b0:	f001 fef4 	bl	d8e9c <pinMode>
   d70b4:	e7b1      	b.n	d701a <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000d70b6 <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   d70b6:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d70b8:	2381      	movs	r3, #129	; 0x81
   d70ba:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   d70be:	2202      	movs	r2, #2
   d70c0:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d70c2:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   d70c6:	f7ff ff50 	bl	d6f6a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   d70ca:	b003      	add	sp, #12
   d70cc:	f85d fb04 	ldr.w	pc, [sp], #4

000d70d0 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
   d70d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d70d4:	b085      	sub	sp, #20
   d70d6:	461f      	mov	r7, r3
   d70d8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d70dc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d70e0:	eba8 0902 	sub.w	r9, r8, r2
   d70e4:	eba7 0a01 	sub.w	sl, r7, r1
   d70e8:	f1b9 0f00 	cmp.w	r9, #0
   d70ec:	bfb8      	it	lt
   d70ee:	f1c9 0900 	rsblt	r9, r9, #0
   d70f2:	f1ba 0f00 	cmp.w	sl, #0
   d70f6:	bfb8      	it	lt
   d70f8:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d70fc:	45d1      	cmp	r9, sl
                             uint16_t color) {
   d70fe:	4683      	mov	fp, r0
   d7100:	460c      	mov	r4, r1
   d7102:	4615      	mov	r5, r2
  if (steep) {
   d7104:	dd04      	ble.n	d7110 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d7106:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
   d7108:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
   d710a:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
   d710c:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
   d710e:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d7110:	42bc      	cmp	r4, r7
   d7112:	dd05      	ble.n	d7120 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d7114:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
   d7116:	4645      	mov	r5, r8
   d7118:	4690      	mov	r8, r2
  if (x0 > x1) {
   d711a:	4622      	mov	r2, r4
   d711c:	463c      	mov	r4, r7
   d711e:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d7120:	1b3e      	subs	r6, r7, r4
   d7122:	b2b2      	uxth	r2, r6
   d7124:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d7126:	eba8 0205 	sub.w	r2, r8, r5
   d712a:	2a00      	cmp	r2, #0
   d712c:	bfb8      	it	lt
   d712e:	4252      	neglt	r2, r2
   d7130:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d7132:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d7136:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d713a:	4545      	cmp	r5, r8
   d713c:	bfb4      	ite	lt
   d713e:	2201      	movlt	r2, #1
   d7140:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d7144:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d7146:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
   d7148:	42bc      	cmp	r4, r7
   d714a:	dc1c      	bgt.n	d7186 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
    if (steep) {
   d714c:	f8db 2000 	ldr.w	r2, [fp]
      writePixel(y0, x0, color);
   d7150:	9303      	str	r3, [sp, #12]
    if (steep) {
   d7152:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
   d7154:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d7158:	bfc7      	ittee	gt
   d715a:	4629      	movgt	r1, r5
   d715c:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
   d715e:	462a      	movle	r2, r5
   d7160:	4621      	movle	r1, r4
   d7162:	4658      	mov	r0, fp
   d7164:	47c0      	blx	r8
    }
    err -= dy;
   d7166:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
   d7168:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d716a:	1ab6      	subs	r6, r6, r2
   d716c:	b2b1      	uxth	r1, r6
   d716e:	b236      	sxth	r6, r6
    if (err < 0) {
   d7170:	2e00      	cmp	r6, #0
   d7172:	da05      	bge.n	d7180 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
      y0 += ystep;
   d7174:	9a02      	ldr	r2, [sp, #8]
   d7176:	4415      	add	r5, r2
      err += dx;
   d7178:	9a00      	ldr	r2, [sp, #0]
   d717a:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d717c:	b22d      	sxth	r5, r5
      err += dx;
   d717e:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
   d7180:	3401      	adds	r4, #1
   d7182:	b224      	sxth	r4, r4
   d7184:	e7e0      	b.n	d7148 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
    }
  }
}
   d7186:	b005      	add	sp, #20
   d7188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d718c <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
   d718c:	4770      	bx	lr

000d718e <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
   d718e:	b410      	push	{r4}
  drawPixel(x, y, color);
   d7190:	6804      	ldr	r4, [r0, #0]
   d7192:	6924      	ldr	r4, [r4, #16]
   d7194:	46a4      	mov	ip, r4
}
   d7196:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
   d719a:	4760      	bx	ip

000d719c <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
   d719c:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
   d719e:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d71a0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
   d71a4:	9502      	str	r5, [sp, #8]
   d71a6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d71a8:	46a4      	mov	ip, r4
}
   d71aa:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
   d71ac:	4760      	bx	ip

000d71ae <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
   d71ae:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
   d71b0:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d71b2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
   d71b6:	9502      	str	r5, [sp, #8]
   d71b8:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d71ba:	46a4      	mov	ip, r4
}
   d71bc:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
   d71be:	4760      	bx	ip

000d71c0 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
   d71c0:	b470      	push	{r4, r5, r6}
   d71c2:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d71c6:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
   d71ca:	6804      	ldr	r4, [r0, #0]
   d71cc:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d71d0:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d71d2:	46a4      	mov	ip, r4
}
   d71d4:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
   d71d6:	4760      	bx	ip

000d71d8 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
   d71d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d71dc:	461c      	mov	r4, r3
  startWrite();
   d71de:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d71e0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d71e4:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d71e6:	4605      	mov	r5, r0
   d71e8:	4616      	mov	r6, r2
  writeLine(x, y, x, y + h - 1, color);
   d71ea:	3c01      	subs	r4, #1
   d71ec:	4434      	add	r4, r6
                                 uint16_t color) {
   d71ee:	460f      	mov	r7, r1
  writeLine(x, y, x, y + h - 1, color);
   d71f0:	b224      	sxth	r4, r4
  startWrite();
   d71f2:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
   d71f4:	682b      	ldr	r3, [r5, #0]
   d71f6:	f8cd 8004 	str.w	r8, [sp, #4]
   d71fa:	9400      	str	r4, [sp, #0]
   d71fc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d71fe:	4628      	mov	r0, r5
   d7200:	463b      	mov	r3, r7
   d7202:	4632      	mov	r2, r6
   d7204:	4639      	mov	r1, r7
   d7206:	47a0      	blx	r4
  endWrite();
   d7208:	682b      	ldr	r3, [r5, #0]
   d720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d720c:	4628      	mov	r0, r5
}
   d720e:	b002      	add	sp, #8
   d7210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d7214:	4718      	bx	r3

000d7216 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
   d7216:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d721a:	461d      	mov	r5, r3
  startWrite();
   d721c:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d721e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d7222:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d7224:	4604      	mov	r4, r0
   d7226:	4617      	mov	r7, r2
   d7228:	460e      	mov	r6, r1
  startWrite();
   d722a:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
   d722c:	e9cd 7800 	strd	r7, r8, [sp]
   d7230:	6822      	ldr	r2, [r4, #0]
   d7232:	1e6b      	subs	r3, r5, #1
   d7234:	4433      	add	r3, r6
   d7236:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d7238:	4620      	mov	r0, r4
   d723a:	b21b      	sxth	r3, r3
   d723c:	463a      	mov	r2, r7
   d723e:	4631      	mov	r1, r6
   d7240:	47a8      	blx	r5
  endWrite();
   d7242:	6823      	ldr	r3, [r4, #0]
   d7244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7246:	4620      	mov	r0, r4
}
   d7248:	b002      	add	sp, #8
   d724a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d724e:	4718      	bx	r3

000d7250 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d7250:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d7254:	461e      	mov	r6, r3
  startWrite();
   d7256:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d7258:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
   d725c:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d725e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d7262:	460c      	mov	r4, r1
   d7264:	4605      	mov	r5, r0
   d7266:	4617      	mov	r7, r2
  startWrite();
   d7268:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
   d726a:	4426      	add	r6, r4
   d726c:	42b4      	cmp	r4, r6
   d726e:	682b      	ldr	r3, [r5, #0]
   d7270:	da0b      	bge.n	d728a <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
   d7272:	f8cd 8000 	str.w	r8, [sp]
   d7276:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d727a:	4621      	mov	r1, r4
   d727c:	464b      	mov	r3, r9
   d727e:	463a      	mov	r2, r7
   d7280:	4628      	mov	r0, r5
   d7282:	3401      	adds	r4, #1
   d7284:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
   d7286:	b224      	sxth	r4, r4
   d7288:	e7f0      	b.n	d726c <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
   d728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d728c:	4628      	mov	r0, r5
}
   d728e:	b002      	add	sp, #8
   d7290:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d7294:	4718      	bx	r3

000d7296 <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d7296:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d7298:	6802      	ldr	r2, [r0, #0]
   d729a:	9101      	str	r1, [sp, #4]
   d729c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d72a0:	9100      	str	r1, [sp, #0]
   d72a2:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d72a4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d72a8:	2200      	movs	r2, #0
   d72aa:	4611      	mov	r1, r2
   d72ac:	47a0      	blx	r4
}
   d72ae:	b002      	add	sp, #8
   d72b0:	bd10      	pop	{r4, pc}

000d72b2 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d72b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d72b6:	461d      	mov	r5, r3
  startWrite();
   d72b8:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d72ba:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
   d72be:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d72c0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d72c4:	4604      	mov	r4, r0
   d72c6:	460f      	mov	r7, r1
   d72c8:	4616      	mov	r6, r2
  startWrite();
   d72ca:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
   d72cc:	6823      	ldr	r3, [r4, #0]
   d72ce:	f8cd 8000 	str.w	r8, [sp]
   d72d2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d72d6:	4632      	mov	r2, r6
   d72d8:	462b      	mov	r3, r5
   d72da:	4639      	mov	r1, r7
   d72dc:	4620      	mov	r0, r4
   d72de:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
   d72e0:	6823      	ldr	r3, [r4, #0]
   d72e2:	f8cd 8000 	str.w	r8, [sp]
   d72e6:	f109 32ff 	add.w	r2, r9, #4294967295
   d72ea:	4432      	add	r2, r6
   d72ec:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d72f0:	4639      	mov	r1, r7
   d72f2:	462b      	mov	r3, r5
   d72f4:	4620      	mov	r0, r4
   d72f6:	b212      	sxth	r2, r2
   d72f8:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
   d72fa:	6823      	ldr	r3, [r4, #0]
   d72fc:	f8cd 8000 	str.w	r8, [sp]
   d7300:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d7304:	4632      	mov	r2, r6
   d7306:	464b      	mov	r3, r9
   d7308:	4639      	mov	r1, r7
   d730a:	4620      	mov	r0, r4
   d730c:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
   d730e:	1e6b      	subs	r3, r5, #1
   d7310:	19d9      	adds	r1, r3, r7
   d7312:	6823      	ldr	r3, [r4, #0]
   d7314:	f8cd 8000 	str.w	r8, [sp]
   d7318:	6a1d      	ldr	r5, [r3, #32]
   d731a:	4620      	mov	r0, r4
   d731c:	464b      	mov	r3, r9
   d731e:	4632      	mov	r2, r6
   d7320:	b209      	sxth	r1, r1
   d7322:	47a8      	blx	r5
  endWrite();
   d7324:	6823      	ldr	r3, [r4, #0]
   d7326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7328:	4620      	mov	r0, r4
}
   d732a:	b002      	add	sp, #8
   d732c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d7330:	4718      	bx	r3

000d7332 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
   d7332:	4770      	bx	lr

000d7334 <_ZN12Adafruit_GFX8drawLineEsssst>:
                            uint16_t color) {
   d7334:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if (x0 == x1) {
   d7338:	4299      	cmp	r1, r3
                            uint16_t color) {
   d733a:	4616      	mov	r6, r2
   d733c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d7340:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d7344:	6802      	ldr	r2, [r0, #0]
   d7346:	4680      	mov	r8, r0
   d7348:	460d      	mov	r5, r1
   d734a:	461c      	mov	r4, r3
  if (x0 == x1) {
   d734c:	d113      	bne.n	d7376 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
    if (y0 > y1)
   d734e:	42be      	cmp	r6, r7
   d7350:	bfc8      	it	gt
   d7352:	4633      	movgt	r3, r6
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d7354:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    if (y0 > y1)
   d7358:	bfc4      	itt	gt
   d735a:	463e      	movgt	r6, r7
   d735c:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d735e:	1c7b      	adds	r3, r7, #1
   d7360:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d7362:	1b9b      	subs	r3, r3, r6
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d7364:	b21b      	sxth	r3, r3
   d7366:	4632      	mov	r2, r6
   d7368:	4629      	mov	r1, r5
   d736a:	4640      	mov	r0, r8
   d736c:	46a4      	mov	ip, r4
}
   d736e:	b003      	add	sp, #12
   d7370:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d7374:	4760      	bx	ip
  } else if (y0 == y1) {
   d7376:	42be      	cmp	r6, r7
   d7378:	d10a      	bne.n	d7390 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
    if (x0 > x1)
   d737a:	4299      	cmp	r1, r3
   d737c:	bfc2      	ittt	gt
   d737e:	460b      	movgt	r3, r1
   d7380:	4625      	movgt	r5, r4
   d7382:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d7384:	1c63      	adds	r3, r4, #1
   d7386:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d738a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d738c:	1b5b      	subs	r3, r3, r5
   d738e:	e7e9      	b.n	d7364 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
    startWrite();
   d7390:	6953      	ldr	r3, [r2, #20]
   d7392:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
   d7394:	e9cd 7900 	strd	r7, r9, [sp]
   d7398:	f8d8 3000 	ldr.w	r3, [r8]
   d739c:	4640      	mov	r0, r8
   d739e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d73a0:	4632      	mov	r2, r6
   d73a2:	4623      	mov	r3, r4
   d73a4:	4629      	mov	r1, r5
   d73a6:	47b8      	blx	r7
    endWrite();
   d73a8:	f8d8 3000 	ldr.w	r3, [r8]
   d73ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d73ae:	4640      	mov	r0, r8
}
   d73b0:	b003      	add	sp, #12
   d73b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
   d73b6:	4718      	bx	r3

000d73b8 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   d73b8:	f001 0303 	and.w	r3, r1, #3
   d73bc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d73c0:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
   d73c2:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
   d73c4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d73c8:	bf59      	ittee	pl
   d73ca:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   d73cc:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
   d73ce:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   d73d0:	81c3      	strhmi	r3, [r0, #14]
}
   d73d2:	4770      	bx	lr

000d73d4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d73d4:	b530      	push	{r4, r5, lr}
   d73d6:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
   d73d8:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
   d73da:	4a07      	ldr	r2, [pc, #28]	; (d73f8 <_ZN12Adafruit_GFXC1Ess+0x24>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d73dc:	4d07      	ldr	r5, [pc, #28]	; (d73fc <_ZN12Adafruit_GFXC1Ess+0x28>)
   d73de:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d73e0:	2400      	movs	r4, #0
  _width = WIDTH;
   d73e2:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
   d73e4:	f04f 31ff 	mov.w	r1, #4294967295
   d73e8:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d73ec:	6044      	str	r4, [r0, #4]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d73ee:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
   d73f0:	6104      	str	r4, [r0, #16]
  _cp437 = false;
   d73f2:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
   d73f4:	6204      	str	r4, [r0, #32]
}
   d73f6:	bd30      	pop	{r4, r5, pc}
   d73f8:	01000101 	.word	0x01000101
   d73fc:	000dd67c 	.word	0x000dd67c

000d7400 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
   d7400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7404:	b089      	sub	sp, #36	; 0x24
   d7406:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
   d740a:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
   d740c:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d7410:	9304      	str	r3, [sp, #16]
   d7412:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  startWrite();
   d7416:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
   d7418:	9305      	str	r3, [sp, #20]
   d741a:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d741e:	4604      	mov	r4, r0
  startWrite();
   d7420:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d7422:	f118 0207 	adds.w	r2, r8, #7
  startWrite();
   d7426:	f04f 0600 	mov.w	r6, #0
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d742a:	bf48      	it	mi
   d742c:	f108 020e 	addmi.w	r2, r8, #14
   d7430:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
   d7434:	9601      	str	r6, [sp, #4]
  uint8_t byte = 0;
   d7436:	4635      	mov	r5, r6
   d7438:	9b03      	ldr	r3, [sp, #12]
   d743a:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
   d743c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d7440:	189a      	adds	r2, r3, r2
   d7442:	9b05      	ldr	r3, [sp, #20]
   d7444:	428b      	cmp	r3, r1
   d7446:	b212      	sxth	r2, r2
   d7448:	dd27      	ble.n	d749a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d744a:	9b04      	ldr	r3, [sp, #16]
   d744c:	4433      	add	r3, r6
  for (int16_t j = 0; j < h; j++, y++) {
   d744e:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d7452:	9306      	str	r3, [sp, #24]
   d7454:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
   d7458:	4580      	cmp	r8, r0
   d745a:	fa1f f189 	uxth.w	r1, r9
   d745e:	dd17      	ble.n	d7490 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
      if (i & 7)
   d7460:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d7462:	bf05      	ittet	eq
   d7464:	9b06      	ldreq	r3, [sp, #24]
   d7466:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
   d7468:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d746a:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
   d746c:	bf18      	it	ne
   d746e:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
   d7470:	062b      	lsls	r3, r5, #24
   d7472:	d50a      	bpl.n	d748a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
        writePixel(x + i, y, color);
   d7474:	9b02      	ldr	r3, [sp, #8]
   d7476:	6820      	ldr	r0, [r4, #0]
   d7478:	9207      	str	r2, [sp, #28]
   d747a:	4419      	add	r1, r3
   d747c:	6983      	ldr	r3, [r0, #24]
   d747e:	b209      	sxth	r1, r1
   d7480:	461f      	mov	r7, r3
   d7482:	4620      	mov	r0, r4
   d7484:	4653      	mov	r3, sl
   d7486:	47b8      	blx	r7
   d7488:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
   d748a:	f109 0901 	add.w	r9, r9, #1
   d748e:	e7e1      	b.n	d7454 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
  for (int16_t j = 0; j < h; j++, y++) {
   d7490:	9b01      	ldr	r3, [sp, #4]
   d7492:	3301      	adds	r3, #1
   d7494:	9301      	str	r3, [sp, #4]
   d7496:	445e      	add	r6, fp
   d7498:	e7ce      	b.n	d7438 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
  endWrite();
   d749a:	6823      	ldr	r3, [r4, #0]
   d749c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d749e:	4620      	mov	r0, r4
}
   d74a0:	b009      	add	sp, #36	; 0x24
   d74a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
   d74a6:	4718      	bx	r3

000d74a8 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
   d74a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d74ac:	ed2d 8b02 	vpush	{d8}
   d74b0:	b091      	sub	sp, #68	; 0x44
   d74b2:	4616      	mov	r6, r2
  if (!gfxFont) { // 'Classic' built-in font
   d74b4:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
   d74b6:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d74ba:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d74be:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d74c2:	9103      	str	r1, [sp, #12]
   d74c4:	461f      	mov	r7, r3
   d74c6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d74ca:	9304      	str	r3, [sp, #16]
   d74cc:	4683      	mov	fp, r0
  if (!gfxFont) { // 'Classic' built-in font
   d74ce:	2a00      	cmp	r2, #0
   d74d0:	f040 80c5 	bne.w	d765e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
   d74d4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d74d8:	428b      	cmp	r3, r1
   d74da:	f340 814c 	ble.w	d7776 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d74de:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d74e2:	42b3      	cmp	r3, r6
   d74e4:	f340 8147 	ble.w	d7776 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d74e8:	2306      	movs	r3, #6
   d74ea:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
   d74ee:	2b00      	cmp	r3, #0
   d74f0:	f340 8141 	ble.w	d7776 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
   d74f4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d74f8:	2b00      	cmp	r3, #0
   d74fa:	f340 813c 	ble.w	d7776 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
   d74fe:	7f03      	ldrb	r3, [r0, #28]
   d7500:	b91b      	cbnz	r3, d750a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d7502:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
   d7504:	bf84      	itt	hi
   d7506:	3701      	addhi	r7, #1
   d7508:	b2ff      	uxtbhi	r7, r7
    startWrite();
   d750a:	f8db 3000 	ldr.w	r3, [fp]
   d750e:	4658      	mov	r0, fp
   d7510:	695b      	ldr	r3, [r3, #20]
   d7512:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d7514:	2205      	movs	r2, #5
   d7516:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d7518:	2200      	movs	r2, #0
   d751a:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d751c:	4a98      	ldr	r2, [pc, #608]	; (d7780 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d751e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d7522:	18d3      	adds	r3, r2, r3
   d7524:	930c      	str	r3, [sp, #48]	; 0x30
   d7526:	b2b3      	uxth	r3, r6
   d7528:	9306      	str	r3, [sp, #24]
   d752a:	9a05      	ldr	r2, [sp, #20]
   d752c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d752e:	5c9b      	ldrb	r3, [r3, r2]
   d7530:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d7532:	b2ab      	uxth	r3, r5
   d7534:	930b      	str	r3, [sp, #44]	; 0x2c
   d7536:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d753a:	9308      	str	r3, [sp, #32]
   d753c:	9b03      	ldr	r3, [sp, #12]
   d753e:	fb02 f905 	mul.w	r9, r2, r5
   d7542:	fa19 f983 	uxtah	r9, r9, r3
   d7546:	fa0f f389 	sxth.w	r3, r9
   d754a:	ee08 3a10 	vmov	s16, r3
   d754e:	2308      	movs	r3, #8
   d7550:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
   d7552:	9b03      	ldr	r3, [sp, #12]
   d7554:	eb02 0a03 	add.w	sl, r2, r3
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d7558:	f04f 0900 	mov.w	r9, #0
            writePixel(x + i, y + j, bg);
   d755c:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
   d7560:	9a07      	ldr	r2, [sp, #28]
   d7562:	f8db 3000 	ldr.w	r3, [fp]
   d7566:	07d2      	lsls	r2, r2, #31
   d7568:	d552      	bpl.n	d7610 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
   d756a:	2d01      	cmp	r5, #1
   d756c:	fa1f f289 	uxth.w	r2, r9
   d7570:	d13e      	bne.n	d75f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d7572:	2c01      	cmp	r4, #1
   d7574:	d13c      	bne.n	d75f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
   d7576:	699b      	ldr	r3, [r3, #24]
   d7578:	9906      	ldr	r1, [sp, #24]
   d757a:	461f      	mov	r7, r3
   d757c:	9b04      	ldr	r3, [sp, #16]
   d757e:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
   d7580:	b212      	sxth	r2, r2
   d7582:	4651      	mov	r1, sl
   d7584:	4658      	mov	r0, fp
   d7586:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d7588:	f109 0301 	add.w	r3, r9, #1
   d758c:	fa4f f983 	sxtb.w	r9, r3
   d7590:	9b07      	ldr	r3, [sp, #28]
   d7592:	085b      	lsrs	r3, r3, #1
   d7594:	9307      	str	r3, [sp, #28]
   d7596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7598:	3b01      	subs	r3, #1
   d759a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d759e:	930a      	str	r3, [sp, #40]	; 0x28
   d75a0:	d1de      	bne.n	d7560 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d75a2:	9f05      	ldr	r7, [sp, #20]
   d75a4:	3701      	adds	r7, #1
   d75a6:	b27b      	sxtb	r3, r7
   d75a8:	9305      	str	r3, [sp, #20]
   d75aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d75ac:	3b01      	subs	r3, #1
   d75ae:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d75b2:	9309      	str	r3, [sp, #36]	; 0x24
   d75b4:	d1b9      	bne.n	d752a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
   d75b6:	9b04      	ldr	r3, [sp, #16]
   d75b8:	4543      	cmp	r3, r8
   d75ba:	d00f      	beq.n	d75dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
   d75bc:	2d01      	cmp	r5, #1
   d75be:	f8db 3000 	ldr.w	r3, [fp]
   d75c2:	d13b      	bne.n	d763c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d75c4:	2c01      	cmp	r4, #1
   d75c6:	d139      	bne.n	d763c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
   d75c8:	9908      	ldr	r1, [sp, #32]
   d75ca:	f8cd 8000 	str.w	r8, [sp]
   d75ce:	3105      	adds	r1, #5
   d75d0:	6a1c      	ldr	r4, [r3, #32]
   d75d2:	4632      	mov	r2, r6
   d75d4:	2308      	movs	r3, #8
   d75d6:	b209      	sxth	r1, r1
   d75d8:	4658      	mov	r0, fp
   d75da:	47a0      	blx	r4
    endWrite();
   d75dc:	f8db 3000 	ldr.w	r3, [fp]
   d75e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d75e2:	4658      	mov	r0, fp
}
   d75e4:	b011      	add	sp, #68	; 0x44
   d75e6:	ecbd 8b02 	vpop	{d8}
   d75ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d75ee:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
   d75f0:	9906      	ldr	r1, [sp, #24]
   d75f2:	fb14 f202 	smulbb	r2, r4, r2
   d75f6:	440a      	add	r2, r1
   d75f8:	9904      	ldr	r1, [sp, #16]
   d75fa:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d75fc:	9400      	str	r4, [sp, #0]
   d75fe:	69db      	ldr	r3, [r3, #28]
   d7600:	ee18 1a10 	vmov	r1, s16
   d7604:	461f      	mov	r7, r3
   d7606:	b212      	sxth	r2, r2
   d7608:	462b      	mov	r3, r5
   d760a:	4658      	mov	r0, fp
   d760c:	47b8      	blx	r7
   d760e:	e7bb      	b.n	d7588 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
   d7610:	9a04      	ldr	r2, [sp, #16]
   d7612:	4542      	cmp	r2, r8
   d7614:	d0b8      	beq.n	d7588 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
   d7616:	2d01      	cmp	r5, #1
   d7618:	fa1f f289 	uxth.w	r2, r9
   d761c:	d107      	bne.n	d762e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d761e:	2c01      	cmp	r4, #1
   d7620:	d105      	bne.n	d762e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
   d7622:	699b      	ldr	r3, [r3, #24]
   d7624:	9906      	ldr	r1, [sp, #24]
   d7626:	461f      	mov	r7, r3
   d7628:	440a      	add	r2, r1
   d762a:	4643      	mov	r3, r8
   d762c:	e7a8      	b.n	d7580 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d762e:	9906      	ldr	r1, [sp, #24]
   d7630:	f8cd 8004 	str.w	r8, [sp, #4]
   d7634:	fb14 f202 	smulbb	r2, r4, r2
   d7638:	440a      	add	r2, r1
   d763a:	e7df      	b.n	d75fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
   d763c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d763e:	f8cd 8004 	str.w	r8, [sp, #4]
   d7642:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d7646:	9a08      	ldr	r2, [sp, #32]
   d7648:	00e4      	lsls	r4, r4, #3
   d764a:	440a      	add	r2, r1
   d764c:	4611      	mov	r1, r2
   d764e:	9400      	str	r4, [sp, #0]
   d7650:	69dc      	ldr	r4, [r3, #28]
   d7652:	4632      	mov	r2, r6
   d7654:	462b      	mov	r3, r5
   d7656:	b209      	sxth	r1, r1
   d7658:	4658      	mov	r0, fp
   d765a:	47a0      	blx	r4
    endWrite();
   d765c:	e7be      	b.n	d75dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d765e:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
   d7660:	6851      	ldr	r1, [r2, #4]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d7662:	6812      	ldr	r2, [r2, #0]
   d7664:	920d      	str	r2, [sp, #52]	; 0x34
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d7666:	1aff      	subs	r7, r7, r3
  return gfxFont->glyph + c;
   d7668:	b2ff      	uxtb	r7, r7
   d766a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d766e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d7672:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
   d7674:	789a      	ldrb	r2, [r3, #2]
   d7676:	9209      	str	r2, [sp, #36]	; 0x24
   d7678:	78da      	ldrb	r2, [r3, #3]
   d767a:	920b      	str	r2, [sp, #44]	; 0x2c
    if (size_x > 1 || size_y > 1) {
   d767c:	2d01      	cmp	r5, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d767e:	f993 2005 	ldrsb.w	r2, [r3, #5]
           yo = pgm_read_byte(&glyph->yOffset);
   d7682:	f993 a006 	ldrsb.w	sl, [r3, #6]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d7686:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
   d7688:	d801      	bhi.n	d768e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d768a:	2c01      	cmp	r4, #1
   d768c:	d957      	bls.n	d773e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
   d768e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d7692:	9308      	str	r3, [sp, #32]
      yo16 = yo;
   d7694:	fa0f f38a 	sxth.w	r3, sl
   d7698:	9307      	str	r3, [sp, #28]
    startWrite();
   d769a:	f8db 3000 	ldr.w	r3, [fp]
   d769e:	4658      	mov	r0, fp
   d76a0:	695b      	ldr	r3, [r3, #20]
   d76a2:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d76a4:	b2b3      	uxth	r3, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d76a6:	f04f 0800 	mov.w	r8, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d76aa:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
   d76ac:	fa1a f386 	uxtah	r3, sl, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d76b0:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
   d76b2:	4647      	mov	r7, r8
            writePixel(x + xo + xx, y + yo + yy, color);
   d76b4:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
   d76b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d76b8:	429f      	cmp	r7, r3
   d76ba:	d28f      	bcs.n	d75dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d76bc:	9b07      	ldr	r3, [sp, #28]
   d76be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d76c0:	443b      	add	r3, r7
   d76c2:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
   d76c6:	2200      	movs	r2, #0
   d76c8:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
   d76ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d76cc:	b21b      	sxth	r3, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d76ce:	eb02 0a07 	add.w	sl, r2, r7
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d76d2:	ee08 3a10 	vmov	s16, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d76d6:	fa0f fa8a 	sxth.w	sl, sl
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d76da:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
   d76dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d76de:	9905      	ldr	r1, [sp, #20]
   d76e0:	4291      	cmp	r1, r2
   d76e2:	d241      	bcs.n	d7768 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
   d76e4:	1c5a      	adds	r2, r3, #1
   d76e6:	b2d2      	uxtb	r2, r2
   d76e8:	075b      	lsls	r3, r3, #29
   d76ea:	920c      	str	r2, [sp, #48]	; 0x30
   d76ec:	d107      	bne.n	d76fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
   d76ee:	9b06      	ldr	r3, [sp, #24]
   d76f0:	9906      	ldr	r1, [sp, #24]
   d76f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d76f4:	3301      	adds	r3, #1
   d76f6:	b29b      	uxth	r3, r3
   d76f8:	f812 9001 	ldrb.w	r9, [r2, r1]
   d76fc:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
   d76fe:	f019 0f80 	tst.w	r9, #128	; 0x80
   d7702:	d012      	beq.n	d772a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
   d7704:	2d01      	cmp	r5, #1
   d7706:	f8db 3000 	ldr.w	r3, [fp]
   d770a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d770e:	d11a      	bne.n	d7746 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d7710:	2c01      	cmp	r4, #1
   d7712:	d118      	bne.n	d7746 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
   d7714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d7716:	699b      	ldr	r3, [r3, #24]
   d7718:	4411      	add	r1, r2
   d771a:	9a05      	ldr	r2, [sp, #20]
   d771c:	4411      	add	r1, r2
   d771e:	461e      	mov	r6, r3
   d7720:	4652      	mov	r2, sl
   d7722:	9b04      	ldr	r3, [sp, #16]
   d7724:	b209      	sxth	r1, r1
   d7726:	4658      	mov	r0, fp
   d7728:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
   d772a:	9e05      	ldr	r6, [sp, #20]
   d772c:	3601      	adds	r6, #1
   d772e:	b2f3      	uxtb	r3, r6
        bits <<= 1;
   d7730:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
   d7734:	9305      	str	r3, [sp, #20]
        bits <<= 1;
   d7736:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
   d773a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (xx = 0; xx < w; xx++) {
   d773c:	e7ce      	b.n	d76dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
   d773e:	2300      	movs	r3, #0
   d7740:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d7744:	e7a9      	b.n	d769a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7746:	9805      	ldr	r0, [sp, #20]
   d7748:	9a08      	ldr	r2, [sp, #32]
   d774a:	4402      	add	r2, r0
   d774c:	fb02 1105 	mla	r1, r2, r5, r1
   d7750:	9a04      	ldr	r2, [sp, #16]
   d7752:	e9cd 4200 	strd	r4, r2, [sp]
   d7756:	69db      	ldr	r3, [r3, #28]
   d7758:	ee18 2a10 	vmov	r2, s16
   d775c:	461e      	mov	r6, r3
   d775e:	b209      	sxth	r1, r1
   d7760:	462b      	mov	r3, r5
   d7762:	4658      	mov	r0, fp
   d7764:	47b0      	blx	r6
   d7766:	e7e0      	b.n	d772a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d7768:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
   d776a:	3701      	adds	r7, #1
   d776c:	4498      	add	r8, r3
   d776e:	fa5f f888 	uxtb.w	r8, r8
   d7772:	b2ff      	uxtb	r7, r7
   d7774:	e79f      	b.n	d76b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d7776:	b011      	add	sp, #68	; 0x44
   d7778:	ecbd 8b02 	vpop	{d8}
   d777c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7780:	000dd174 	.word	0x000dd174

000d7784 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d7784:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
   d7786:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d7788:	b085      	sub	sp, #20
   d778a:	4604      	mov	r4, r0
   d778c:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
   d778e:	2a00      	cmp	r2, #0
   d7790:	d134      	bne.n	d77fc <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
   d7792:	290a      	cmp	r1, #10
   d7794:	d108      	bne.n	d77a8 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
   d7796:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
   d7798:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
   d779a:	7e42      	ldrb	r2, [r0, #25]
   d779c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
   d77a0:	8263      	strh	r3, [r4, #18]
}
   d77a2:	2001      	movs	r0, #1
   d77a4:	b005      	add	sp, #20
   d77a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
   d77a8:	290d      	cmp	r1, #13
   d77aa:	d0fa      	beq.n	d77a2 <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d77ac:	7ee1      	ldrb	r1, [r4, #27]
   d77ae:	7e00      	ldrb	r0, [r0, #24]
   d77b0:	7e65      	ldrb	r5, [r4, #25]
   d77b2:	b171      	cbz	r1, d77d2 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d77b4:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d77b8:	2106      	movs	r1, #6
   d77ba:	fb11 6100 	smlabb	r1, r1, r0, r6
   d77be:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d77c2:	42b1      	cmp	r1, r6
   d77c4:	bfc1      	itttt	gt
   d77c6:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
   d77ca:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
   d77cc:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d77d0:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d77d2:	8ae2      	ldrh	r2, [r4, #22]
   d77d4:	9201      	str	r2, [sp, #4]
   d77d6:	8aa2      	ldrh	r2, [r4, #20]
   d77d8:	9200      	str	r2, [sp, #0]
   d77da:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d77de:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d77e2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d77e6:	4620      	mov	r0, r4
   d77e8:	f7ff fe5e 	bl	d74a8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
   d77ec:	7e23      	ldrb	r3, [r4, #24]
   d77ee:	8a22      	ldrh	r2, [r4, #16]
   d77f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d77f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
   d77f8:	8223      	strh	r3, [r4, #16]
   d77fa:	e7d2      	b.n	d77a2 <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
   d77fc:	290a      	cmp	r1, #10
   d77fe:	d107      	bne.n	d7810 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
   d7800:	2300      	movs	r3, #0
   d7802:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d7804:	7b13      	ldrb	r3, [r2, #12]
   d7806:	7e41      	ldrb	r1, [r0, #25]
      cursor_y +=
   d7808:	8a42      	ldrh	r2, [r0, #18]
   d780a:	fb01 2303 	mla	r3, r1, r3, r2
   d780e:	e7c7      	b.n	d77a0 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
   d7810:	290d      	cmp	r1, #13
   d7812:	d0c6      	beq.n	d77a2 <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
   d7814:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d7816:	42a9      	cmp	r1, r5
   d7818:	d3c3      	bcc.n	d77a2 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d781a:	7a91      	ldrb	r1, [r2, #10]
   d781c:	4299      	cmp	r1, r3
   d781e:	d3c0      	bcc.n	d77a2 <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
   d7820:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
   d7822:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
   d7824:	b2ed      	uxtb	r5, r5
   d7826:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
   d782a:	78af      	ldrb	r7, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d782c:	b32f      	cbz	r7, d787a <_ZN12Adafruit_GFX5writeEh+0xf6>
   d782e:	78e9      	ldrb	r1, [r5, #3]
   d7830:	b319      	cbz	r1, d787a <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d7832:	7ee1      	ldrb	r1, [r4, #27]
   d7834:	7e00      	ldrb	r0, [r0, #24]
   d7836:	7e66      	ldrb	r6, [r4, #25]
   d7838:	b191      	cbz	r1, d7860 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d783a:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d783e:	4439      	add	r1, r7
   d7840:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d7844:	fb00 7101 	mla	r1, r0, r1, r7
   d7848:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d784c:	42b9      	cmp	r1, r7
   d784e:	dd07      	ble.n	d7860 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
   d7850:	2700      	movs	r7, #0
   d7852:	8227      	strh	r7, [r4, #16]
   d7854:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d7858:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
   d785a:	fb02 1206 	mla	r2, r2, r6, r1
   d785e:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d7860:	8ae2      	ldrh	r2, [r4, #22]
   d7862:	9201      	str	r2, [sp, #4]
   d7864:	8aa2      	ldrh	r2, [r4, #20]
   d7866:	9200      	str	r2, [sp, #0]
   d7868:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d786c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d7870:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d7874:	4620      	mov	r0, r4
   d7876:	f7ff fe17 	bl	d74a8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d787a:	7929      	ldrb	r1, [r5, #4]
   d787c:	7e23      	ldrb	r3, [r4, #24]
        cursor_x +=
   d787e:	8a22      	ldrh	r2, [r4, #16]
   d7880:	fb01 2303 	mla	r3, r1, r3, r2
   d7884:	e7b8      	b.n	d77f8 <_ZN12Adafruit_GFX5writeEh+0x74>

000d7886 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
   d7886:	2901      	cmp	r1, #1
   d7888:	bf38      	it	cc
   d788a:	2101      	movcc	r1, #1
   d788c:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
   d788e:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
   d7890:	4770      	bx	lr

000d7892 <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   d7892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7896:	4604      	mov	r4, r0
   d7898:	b08b      	sub	sp, #44	; 0x2c
   d789a:	f000 fa33 	bl	d7d04 <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d789e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   d78a2:	f9b4 503a 	ldrsh.w	r5, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d78a6:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d78aa:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d78ae:	1dda      	adds	r2, r3, #7
   d78b0:	bf48      	it	mi
   d78b2:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   d78b6:	2340      	movs	r3, #64	; 0x40
   d78b8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   d78bc:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   d78c0:	9303      	str	r3, [sp, #12]
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   d78c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d78c4:	68db      	ldr	r3, [r3, #12]
   d78c6:	3b01      	subs	r3, #1
   d78c8:	b29b      	uxth	r3, r3
   d78ca:	9304      	str	r3, [sp, #16]
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d78cc:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
  uint8_t bytes_per_page = WIDTH;
   d78d0:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   d78d2:	2d00      	cmp	r5, #0
   d78d4:	bfb8      	it	lt
   d78d6:	3507      	addlt	r5, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d78d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d78dc:	45b9      	cmp	r9, r7
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   d78de:	f107 0201 	add.w	r2, r7, #1
  uint8_t first_page = window_y1 / 8;
   d78e2:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d78e6:	bf28      	it	cs
   d78e8:	46b9      	movcs	r9, r7
    bytes_remaining -= (WIDTH - 1) - page_end;
   d78ea:	fa52 f383 	uxtab	r3, r2, r3
   d78ee:	fb05 9a07 	mla	sl, r5, r7, r9
   d78f2:	9306      	str	r3, [sp, #24]
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};

      digitalWrite(dcPin, LOW);
   d78f4:	f04f 0b00 	mov.w	fp, #0
  for (uint8_t p = first_page; p < pages; p++) {
   d78f8:	9b03      	ldr	r3, [sp, #12]
   d78fa:	429d      	cmp	r5, r3
   d78fc:	d26b      	bcs.n	d79d6 <_ZN15Adafruit_SH110X7displayEv+0x144>
    ptr += page_start;
   d78fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7900:	7a26      	ldrb	r6, [r4, #8]
   d7902:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   d7906:	eb03 080a 	add.w	r8, r3, sl
    bytes_remaining -= (WIDTH - 1) - page_end;
   d790a:	9b06      	ldr	r3, [sp, #24]
   d790c:	444a      	add	r2, r9
   d790e:	1b9e      	subs	r6, r3, r6
    if (i2c_dev) { // I2C
   d7910:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d7912:	1111      	asrs	r1, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7914:	eba6 0609 	sub.w	r6, r6, r9
   d7918:	f1a5 0050 	sub.w	r0, r5, #80	; 0x50
   d791c:	b2f6      	uxtb	r6, r6
    if (i2c_dev) { // I2C
   d791e:	b2c0      	uxtb	r0, r0
   d7920:	3110      	adds	r1, #16
   d7922:	f002 020f 	and.w	r2, r2, #15
   d7926:	2b00      	cmp	r3, #0
   d7928:	d035      	beq.n	d7996 <_ZN15Adafruit_SH110X7displayEv+0x104>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d792a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   d792e:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
      i2c_dev->setSpeed(i2c_preclk);
   d7932:	4618      	mov	r0, r3
   d7934:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d7936:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      uint8_t cmd[] = {
   d793a:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   d793e:	f7fe fe94 	bl	d666a <_ZN18Adafruit_I2CDevice8setSpeedEm>
      i2c_dev->write(cmd, 4);
   d7942:	2301      	movs	r3, #1
   d7944:	e9cd bb00 	strd	fp, fp, [sp]
   d7948:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d794a:	2204      	movs	r2, #4
   d794c:	a909      	add	r1, sp, #36	; 0x24
   d794e:	f7fe fe07 	bl	d6560 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d7952:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d7956:	9305      	str	r3, [sp, #20]
      while (bytes_remaining) {
   d7958:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d795a:	b1ae      	cbz	r6, d7988 <_ZN15Adafruit_SH110X7displayEv+0xf6>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d795c:	9b05      	ldr	r3, [sp, #20]
   d795e:	42b3      	cmp	r3, r6
   d7960:	bf28      	it	cs
   d7962:	4633      	movcs	r3, r6
   d7964:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   d7966:	2301      	movs	r3, #1
   d7968:	9301      	str	r3, [sp, #4]
   d796a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   d796e:	9300      	str	r3, [sp, #0]
   d7970:	4641      	mov	r1, r8
   d7972:	2301      	movs	r3, #1
   d7974:	9207      	str	r2, [sp, #28]
   d7976:	f7fe fdf3 	bl	d6560 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   d797a:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   d797c:	1ab6      	subs	r6, r6, r2
        ptr += to_write;
   d797e:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   d7980:	b2f6      	uxtb	r6, r6
   d7982:	f000 f9bf 	bl	d7d04 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   d7986:	e7e7      	b.n	d7958 <_ZN15Adafruit_SH110X7displayEv+0xc6>
      i2c_dev->setSpeed(i2c_postclk);
   d7988:	6b21      	ldr	r1, [r4, #48]	; 0x30
   d798a:	f7fe fe6e 	bl	d666a <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   d798e:	3501      	adds	r5, #1
   d7990:	b2ed      	uxtb	r5, r5
   d7992:	44ba      	add	sl, r7
   d7994:	e7b0      	b.n	d78f8 <_ZN15Adafruit_SH110X7displayEv+0x66>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d7996:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   d799a:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
      digitalWrite(dcPin, LOW);
   d799e:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d79a2:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   d79a6:	4619      	mov	r1, r3
   d79a8:	9305      	str	r3, [sp, #20]
   d79aa:	f001 fa88 	bl	d8ebe <digitalWrite>
      spi_dev->write(cmd, 3);
   d79ae:	9b05      	ldr	r3, [sp, #20]
   d79b0:	9300      	str	r3, [sp, #0]
   d79b2:	2203      	movs	r2, #3
   d79b4:	a909      	add	r1, sp, #36	; 0x24
   d79b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d79b8:	f7fe fd75 	bl	d64a6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   d79bc:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d79c0:	2101      	movs	r1, #1
   d79c2:	f001 fa7c 	bl	d8ebe <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   d79c6:	9b05      	ldr	r3, [sp, #20]
   d79c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d79ca:	9300      	str	r3, [sp, #0]
   d79cc:	4632      	mov	r2, r6
   d79ce:	4641      	mov	r1, r8
   d79d0:	f7fe fd69 	bl	d64a6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d79d4:	e7db      	b.n	d798e <_ZN15Adafruit_SH110X7displayEv+0xfc>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   d79d6:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   d79da:	f04f 33ff 	mov.w	r3, #4294967295
   d79de:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   d79e2:	b00b      	add	sp, #44	; 0x2c
   d79e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d79e8 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   d79e8:	b530      	push	{r4, r5, lr}
   d79ea:	b085      	sub	sp, #20
   d79ec:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d79ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d79f0:	9503      	str	r5, [sp, #12]
   d79f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d79f4:	9502      	str	r5, [sp, #8]
   d79f6:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d79fa:	e9cd 3500 	strd	r3, r5, [sp]
   d79fe:	4613      	mov	r3, r2
   d7a00:	460a      	mov	r2, r1
   d7a02:	2101      	movs	r1, #1
   d7a04:	f7ff fa48 	bl	d6e98 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   d7a08:	4b03      	ldr	r3, [pc, #12]	; (d7a18 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   d7a0a:	6023      	str	r3, [r4, #0]
   d7a0c:	4620      	mov	r0, r4
   d7a0e:	2300      	movs	r3, #0
   d7a10:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d7a14:	b005      	add	sp, #20
   d7a16:	bd30      	pop	{r4, r5, pc}
   d7a18:	000dd6d4 	.word	0x000dd6d4

000d7a1c <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   d7a1c:	b510      	push	{r4, lr}
   d7a1e:	4b03      	ldr	r3, [pc, #12]	; (d7a2c <_ZN15Adafruit_SH110XD1Ev+0x10>)
   d7a20:	6003      	str	r3, [r0, #0]
   d7a22:	4604      	mov	r4, r0
   d7a24:	f7ff fa5a 	bl	d6edc <_ZN17Adafruit_GrayOLEDD1Ev>
   d7a28:	4620      	mov	r0, r4
   d7a2a:	bd10      	pop	{r4, pc}
   d7a2c:	000dd6d4 	.word	0x000dd6d4

000d7a30 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   d7a30:	b510      	push	{r4, lr}
   d7a32:	4b03      	ldr	r3, [pc, #12]	; (d7a40 <_ZN15Adafruit_SH1107D1Ev+0x10>)
   d7a34:	6003      	str	r3, [r0, #0]
   d7a36:	4604      	mov	r4, r0
   d7a38:	f7ff fff0 	bl	d7a1c <_ZN15Adafruit_SH110XD1Ev>
   d7a3c:	4620      	mov	r0, r4
   d7a3e:	bd10      	pop	{r4, pc}
   d7a40:	000dd910 	.word	0x000dd910

000d7a44 <_ZN15Adafruit_SH1107D0Ev>:
   d7a44:	b510      	push	{r4, lr}
   d7a46:	4604      	mov	r4, r0
   d7a48:	f7ff fff2 	bl	d7a30 <_ZN15Adafruit_SH1107D1Ev>
   d7a4c:	4620      	mov	r0, r4
   d7a4e:	2158      	movs	r1, #88	; 0x58
   d7a50:	f001 facc 	bl	d8fec <_ZdlPvj>
   d7a54:	4620      	mov	r0, r4
   d7a56:	bd10      	pop	{r4, pc}

000d7a58 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   d7a58:	b530      	push	{r4, r5, lr}
   d7a5a:	b085      	sub	sp, #20
   d7a5c:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d7a5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7a60:	9502      	str	r5, [sp, #8]
   d7a62:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d7a64:	9501      	str	r5, [sp, #4]
   d7a66:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d7a6a:	9500      	str	r5, [sp, #0]
   d7a6c:	f7ff ffbc 	bl	d79e8 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   d7a70:	4b02      	ldr	r3, [pc, #8]	; (d7a7c <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   d7a72:	6023      	str	r3, [r4, #0]
   d7a74:	4620      	mov	r0, r4
   d7a76:	b005      	add	sp, #20
   d7a78:	bd30      	pop	{r4, r5, pc}
   d7a7a:	bf00      	nop
   d7a7c:	000dd910 	.word	0x000dd910

000d7a80 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   d7a80:	b530      	push	{r4, r5, lr}
   d7a82:	4604      	mov	r4, r0
   d7a84:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   d7a86:	f7ff faad 	bl	d6fe4 <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   d7a8a:	212f      	movs	r1, #47	; 0x2f
   d7a8c:	4620      	mov	r0, r4
   d7a8e:	f7ff fb12 	bl	d70b6 <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   d7a92:	68a2      	ldr	r2, [r4, #8]
   d7a94:	4b2f      	ldr	r3, [pc, #188]	; (d7b54 <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   d7a96:	429a      	cmp	r2, r3
   d7a98:	d121      	bne.n	d7ade <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   d7a9a:	6823      	ldr	r3, [r4, #0]
   d7a9c:	2101      	movs	r1, #1
   d7a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7aa0:	4620      	mov	r0, r4
   d7aa2:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d7aa4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d7aa8:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d7aac:	2320      	movs	r3, #32
   d7aae:	3a20      	subs	r2, #32
   d7ab0:	3973      	subs	r1, #115	; 0x73
   d7ab2:	2501      	movs	r5, #1
   d7ab4:	e9cd 3501 	strd	r3, r5, [sp, #4]
   d7ab8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d7abc:	2373      	movs	r3, #115	; 0x73
   d7abe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d7ac2:	9300      	str	r3, [sp, #0]
   d7ac4:	f341 014f 	sbfx	r1, r1, #1, #16
   d7ac8:	4b23      	ldr	r3, [pc, #140]	; (d7b58 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d7aca:	4620      	mov	r0, r4
   d7acc:	f342 024f 	sbfx	r2, r2, #1, #16
   d7ad0:	f7ff fc96 	bl	d7400 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   d7ad4:	6823      	ldr	r3, [r4, #0]
   d7ad6:	2100      	movs	r1, #0
   d7ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7ada:	4620      	mov	r0, r4
   d7adc:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   d7ade:	68a3      	ldr	r3, [r4, #8]
   d7ae0:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d7ae4:	d117      	bne.n	d7b16 <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d7ae6:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d7aea:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d7aee:	2320      	movs	r3, #32
   d7af0:	2001      	movs	r0, #1
   d7af2:	3a20      	subs	r2, #32
   d7af4:	3973      	subs	r1, #115	; 0x73
   d7af6:	e9cd 3001 	strd	r3, r0, [sp, #4]
   d7afa:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d7afe:	2373      	movs	r3, #115	; 0x73
   d7b00:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d7b04:	9300      	str	r3, [sp, #0]
   d7b06:	f342 024f 	sbfx	r2, r2, #1, #16
   d7b0a:	4b13      	ldr	r3, [pc, #76]	; (d7b58 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d7b0c:	f341 014f 	sbfx	r1, r1, #1, #16
   d7b10:	4620      	mov	r0, r4
   d7b12:	f7ff fc75 	bl	d7400 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   d7b16:	4911      	ldr	r1, [pc, #68]	; (d7b5c <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   d7b18:	2216      	movs	r2, #22
   d7b1a:	4620      	mov	r0, r4
   d7b1c:	f7ff fa25 	bl	d6f6a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d7b20:	4605      	mov	r5, r0
   d7b22:	b918      	cbnz	r0, d7b2c <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   d7b24:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   d7b26:	4628      	mov	r0, r5
   d7b28:	b005      	add	sp, #20
   d7b2a:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   d7b2c:	68a3      	ldr	r3, [r4, #8]
   d7b2e:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d7b32:	d007      	beq.n	d7b44 <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   d7b34:	2064      	movs	r0, #100	; 0x64
   d7b36:	f000 fdb1 	bl	d869c <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   d7b3a:	21af      	movs	r1, #175	; 0xaf
   d7b3c:	4620      	mov	r0, r4
   d7b3e:	f7ff f9e9 	bl	d6f14 <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   d7b42:	e7f0      	b.n	d7b26 <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   d7b44:	4906      	ldr	r1, [pc, #24]	; (d7b60 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   d7b46:	2204      	movs	r2, #4
   d7b48:	4620      	mov	r0, r4
   d7b4a:	f7ff fa0e 	bl	d6f6a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d7b4e:	2800      	cmp	r0, #0
   d7b50:	d1f0      	bne.n	d7b34 <_ZN15Adafruit_SH11075beginEhb+0xb4>
   d7b52:	e7e7      	b.n	d7b24 <_ZN15Adafruit_SH11075beginEhb+0xa4>
   d7b54:	00800040 	.word	0x00800040
   d7b58:	000dd728 	.word	0x000dd728
   d7b5c:	000dd968 	.word	0x000dd968
   d7b60:	000dd964 	.word	0x000dd964

000d7b64 <_ZN19Adafruit_EEPROM_I2CC1Ev>:
/**************************************************************************/
/*!
    Constructor
*/
/**************************************************************************/
Adafruit_EEPROM_I2C::Adafruit_EEPROM_I2C(void) {}
   d7b64:	2200      	movs	r2, #0
   d7b66:	6002      	str	r2, [r0, #0]
   d7b68:	7102      	strb	r2, [r0, #4]
   d7b6a:	4770      	bx	lr

000d7b6c <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>:
 *            The I2C address to be used.
 *    @param  theWire
 *            The Wire object to be used for I2C connections.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d7b6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7b6e:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7b70:	2010      	movs	r0, #16
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d7b72:	460e      	mov	r6, r1
   d7b74:	9201      	str	r2, [sp, #4]
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7b76:	f7fc fa8e 	bl	d4096 <_Znwj>
   d7b7a:	4604      	mov	r4, r0
   d7b7c:	b118      	cbz	r0, d7b86 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire+0x1a>
   d7b7e:	9a01      	ldr	r2, [sp, #4]
   d7b80:	4631      	mov	r1, r6
   d7b82:	f7fe fcc2 	bl	d650a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  _addr = addr;

  return i2c_dev->begin();
   d7b86:	2101      	movs	r1, #1
   d7b88:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7b8a:	602c      	str	r4, [r5, #0]
  _addr = addr;
   d7b8c:	712e      	strb	r6, [r5, #4]
}
   d7b8e:	b002      	add	sp, #8
   d7b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return i2c_dev->begin();
   d7b94:	f7fe bcd5 	b.w	d6542 <_ZN18Adafruit_I2CDevice5beginEb>

000d7b98 <_ZN19Adafruit_EEPROM_I2C5writeEth>:
    @param[in] value
                The 8-bit value to write at addr
    @returns True on I2C command success, false on timeout or I2C failure
*/
/**************************************************************************/
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7b98:	b530      	push	{r4, r5, lr}
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};

  if (!i2c_dev->write(buff, 3))
   d7b9a:	2300      	movs	r3, #0
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7b9c:	b085      	sub	sp, #20
  if (!i2c_dev->write(buff, 3))
   d7b9e:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   d7ba2:	ba49      	rev16	r1, r1
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7ba4:	4605      	mov	r5, r0
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   d7ba6:	f8ad 100c 	strh.w	r1, [sp, #12]
   d7baa:	f88d 200e 	strb.w	r2, [sp, #14]
  if (!i2c_dev->write(buff, 3))
   d7bae:	6800      	ldr	r0, [r0, #0]
   d7bb0:	2301      	movs	r3, #1
   d7bb2:	2203      	movs	r2, #3
   d7bb4:	a903      	add	r1, sp, #12
   d7bb6:	f7fe fcd3 	bl	d6560 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d7bba:	b160      	cbz	r0, d7bd6 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x3e>
   d7bbc:	2465      	movs	r4, #101	; 0x65
    return false;

  // Wait until it acks!
  uint8_t timeout = 100;
  while (timeout--) {
   d7bbe:	3c01      	subs	r4, #1
   d7bc0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d7bc4:	d007      	beq.n	d7bd6 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x3e>
    if (i2c_dev->detected())
   d7bc6:	6828      	ldr	r0, [r5, #0]
   d7bc8:	f7fe fca6 	bl	d6518 <_ZN18Adafruit_I2CDevice8detectedEv>
   d7bcc:	b920      	cbnz	r0, d7bd8 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x40>
      return true;
    delay(1);
   d7bce:	2001      	movs	r0, #1
   d7bd0:	f000 fd64 	bl	d869c <delay>
  while (timeout--) {
   d7bd4:	e7f3      	b.n	d7bbe <_ZN19Adafruit_EEPROM_I2C5writeEth+0x26>
    return false;
   d7bd6:	2000      	movs	r0, #0
  }

  // timed out :(
  return false;
}
   d7bd8:	b005      	add	sp, #20
   d7bda:	bd30      	pop	{r4, r5, pc}

000d7bdc <_ZN19Adafruit_EEPROM_I2C4readEt>:
    @param addr
                The 16-bit address to read from in EEPROM memory
    @returns    The 8-bit value retrieved at addr
*/
/**************************************************************************/
uint8_t Adafruit_EEPROM_I2C::read(uint16_t addr) {
   d7bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};

  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7bde:	2301      	movs	r3, #1
   d7be0:	2200      	movs	r2, #0
   d7be2:	e9cd 3200 	strd	r3, r2, [sp]
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   d7be6:	ba49      	rev16	r1, r1
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7be8:	ab03      	add	r3, sp, #12
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   d7bea:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7bee:	6800      	ldr	r0, [r0, #0]
   d7bf0:	2202      	movs	r2, #2
   d7bf2:	4619      	mov	r1, r3
   d7bf4:	f7fe fd22 	bl	d663c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
   d7bf8:	b108      	cbz	r0, d7bfe <_ZN19Adafruit_EEPROM_I2C4readEt+0x22>
    return 0x0;

  return buff[0];
   d7bfa:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d7bfe:	b005      	add	sp, #20
   d7c00:	f85d fb04 	ldr.w	pc, [sp], #4

000d7c04 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7c04:	b508      	push	{r3, lr}
   d7c06:	4b02      	ldr	r3, [pc, #8]	; (d7c10 <netdb_freeaddrinfo+0xc>)
   d7c08:	681b      	ldr	r3, [r3, #0]
   d7c0a:	689b      	ldr	r3, [r3, #8]
   d7c0c:	9301      	str	r3, [sp, #4]
   d7c0e:	bd08      	pop	{r3, pc}
   d7c10:	00030268 	.word	0x00030268

000d7c14 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7c14:	b508      	push	{r3, lr}
   d7c16:	4b02      	ldr	r3, [pc, #8]	; (d7c20 <netdb_getaddrinfo+0xc>)
   d7c18:	681b      	ldr	r3, [r3, #0]
   d7c1a:	68db      	ldr	r3, [r3, #12]
   d7c1c:	9301      	str	r3, [sp, #4]
   d7c1e:	bd08      	pop	{r3, pc}
   d7c20:	00030268 	.word	0x00030268

000d7c24 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7c24:	b508      	push	{r3, lr}
   d7c26:	4b02      	ldr	r3, [pc, #8]	; (d7c30 <HAL_Validate_Pin_Function+0xc>)
   d7c28:	681b      	ldr	r3, [r3, #0]
   d7c2a:	685b      	ldr	r3, [r3, #4]
   d7c2c:	9301      	str	r3, [sp, #4]
   d7c2e:	bd08      	pop	{r3, pc}
   d7c30:	0003022c 	.word	0x0003022c

000d7c34 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7c34:	b508      	push	{r3, lr}
   d7c36:	4b02      	ldr	r3, [pc, #8]	; (d7c40 <HAL_Pin_Mode+0xc>)
   d7c38:	681b      	ldr	r3, [r3, #0]
   d7c3a:	689b      	ldr	r3, [r3, #8]
   d7c3c:	9301      	str	r3, [sp, #4]
   d7c3e:	bd08      	pop	{r3, pc}
   d7c40:	0003022c 	.word	0x0003022c

000d7c44 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7c44:	b508      	push	{r3, lr}
   d7c46:	4b02      	ldr	r3, [pc, #8]	; (d7c50 <HAL_Get_Pin_Mode+0xc>)
   d7c48:	681b      	ldr	r3, [r3, #0]
   d7c4a:	68db      	ldr	r3, [r3, #12]
   d7c4c:	9301      	str	r3, [sp, #4]
   d7c4e:	bd08      	pop	{r3, pc}
   d7c50:	0003022c 	.word	0x0003022c

000d7c54 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7c54:	b508      	push	{r3, lr}
   d7c56:	4b02      	ldr	r3, [pc, #8]	; (d7c60 <HAL_GPIO_Write+0xc>)
   d7c58:	681b      	ldr	r3, [r3, #0]
   d7c5a:	691b      	ldr	r3, [r3, #16]
   d7c5c:	9301      	str	r3, [sp, #4]
   d7c5e:	bd08      	pop	{r3, pc}
   d7c60:	0003022c 	.word	0x0003022c

000d7c64 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7c64:	b508      	push	{r3, lr}
   d7c66:	4b02      	ldr	r3, [pc, #8]	; (d7c70 <HAL_GPIO_Read+0xc>)
   d7c68:	681b      	ldr	r3, [r3, #0]
   d7c6a:	695b      	ldr	r3, [r3, #20]
   d7c6c:	9301      	str	r3, [sp, #4]
   d7c6e:	bd08      	pop	{r3, pc}
   d7c70:	0003022c 	.word	0x0003022c

000d7c74 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7c74:	b508      	push	{r3, lr}
   d7c76:	4b02      	ldr	r3, [pc, #8]	; (d7c80 <HAL_Interrupts_Attach+0xc>)
   d7c78:	681b      	ldr	r3, [r3, #0]
   d7c7a:	699b      	ldr	r3, [r3, #24]
   d7c7c:	9301      	str	r3, [sp, #4]
   d7c7e:	bd08      	pop	{r3, pc}
   d7c80:	0003022c 	.word	0x0003022c

000d7c84 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7c84:	b508      	push	{r3, lr}
   d7c86:	4b02      	ldr	r3, [pc, #8]	; (d7c90 <HAL_Interrupts_Detach+0xc>)
   d7c88:	681b      	ldr	r3, [r3, #0]
   d7c8a:	69db      	ldr	r3, [r3, #28]
   d7c8c:	9301      	str	r3, [sp, #4]
   d7c8e:	bd08      	pop	{r3, pc}
   d7c90:	0003022c 	.word	0x0003022c

000d7c94 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7c94:	b508      	push	{r3, lr}
   d7c96:	4b02      	ldr	r3, [pc, #8]	; (d7ca0 <hal_adc_read+0xc>)
   d7c98:	681b      	ldr	r3, [r3, #0]
   d7c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7c9c:	9301      	str	r3, [sp, #4]
   d7c9e:	bd08      	pop	{r3, pc}
   d7ca0:	0003022c 	.word	0x0003022c

000d7ca4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7ca4:	b508      	push	{r3, lr}
   d7ca6:	4b02      	ldr	r3, [pc, #8]	; (d7cb0 <HAL_RNG_GetRandomNumber+0xc>)
   d7ca8:	681b      	ldr	r3, [r3, #0]
   d7caa:	685b      	ldr	r3, [r3, #4]
   d7cac:	9301      	str	r3, [sp, #4]
   d7cae:	bd08      	pop	{r3, pc}
   d7cb0:	00030218 	.word	0x00030218

000d7cb4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7cb4:	b508      	push	{r3, lr}
   d7cb6:	4b02      	ldr	r3, [pc, #8]	; (d7cc0 <HAL_Delay_Microseconds+0xc>)
   d7cb8:	681b      	ldr	r3, [r3, #0]
   d7cba:	68db      	ldr	r3, [r3, #12]
   d7cbc:	9301      	str	r3, [sp, #4]
   d7cbe:	bd08      	pop	{r3, pc}
   d7cc0:	00030218 	.word	0x00030218

000d7cc4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7cc4:	b508      	push	{r3, lr}
   d7cc6:	4b02      	ldr	r3, [pc, #8]	; (d7cd0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7cc8:	681b      	ldr	r3, [r3, #0]
   d7cca:	695b      	ldr	r3, [r3, #20]
   d7ccc:	9301      	str	r3, [sp, #4]
   d7cce:	bd08      	pop	{r3, pc}
   d7cd0:	00030218 	.word	0x00030218

000d7cd4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d7cd4:	b508      	push	{r3, lr}
   d7cd6:	4b02      	ldr	r3, [pc, #8]	; (d7ce0 <HAL_EEPROM_Init+0xc>)
   d7cd8:	681b      	ldr	r3, [r3, #0]
   d7cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7cdc:	9301      	str	r3, [sp, #4]
   d7cde:	bd08      	pop	{r3, pc}
   d7ce0:	00030218 	.word	0x00030218

000d7ce4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d7ce4:	b508      	push	{r3, lr}
   d7ce6:	4b02      	ldr	r3, [pc, #8]	; (d7cf0 <HAL_EEPROM_Get+0xc>)
   d7ce8:	681b      	ldr	r3, [r3, #0]
   d7cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7cec:	9301      	str	r3, [sp, #4]
   d7cee:	bd08      	pop	{r3, pc}
   d7cf0:	00030218 	.word	0x00030218

000d7cf4 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d7cf4:	b508      	push	{r3, lr}
   d7cf6:	4b02      	ldr	r3, [pc, #8]	; (d7d00 <HAL_EEPROM_Put+0xc>)
   d7cf8:	681b      	ldr	r3, [r3, #0]
   d7cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7cfc:	9301      	str	r3, [sp, #4]
   d7cfe:	bd08      	pop	{r3, pc}
   d7d00:	00030218 	.word	0x00030218

000d7d04 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7d04:	b508      	push	{r3, lr}
   d7d06:	4b02      	ldr	r3, [pc, #8]	; (d7d10 <os_thread_yield+0xc>)
   d7d08:	681b      	ldr	r3, [r3, #0]
   d7d0a:	68db      	ldr	r3, [r3, #12]
   d7d0c:	9301      	str	r3, [sp, #4]
   d7d0e:	bd08      	pop	{r3, pc}
   d7d10:	00030248 	.word	0x00030248

000d7d14 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7d14:	b508      	push	{r3, lr}
   d7d16:	4b02      	ldr	r3, [pc, #8]	; (d7d20 <os_mutex_recursive_create+0xc>)
   d7d18:	681b      	ldr	r3, [r3, #0]
   d7d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7d1c:	9301      	str	r3, [sp, #4]
   d7d1e:	bd08      	pop	{r3, pc}
   d7d20:	00030248 	.word	0x00030248

000d7d24 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7d24:	b508      	push	{r3, lr}
   d7d26:	4b02      	ldr	r3, [pc, #8]	; (d7d30 <inet_inet_ntop+0xc>)
   d7d28:	681b      	ldr	r3, [r3, #0]
   d7d2a:	695b      	ldr	r3, [r3, #20]
   d7d2c:	9301      	str	r3, [sp, #4]
   d7d2e:	bd08      	pop	{r3, pc}
   d7d30:	00030264 	.word	0x00030264

000d7d34 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7d34:	b508      	push	{r3, lr}
   d7d36:	4b02      	ldr	r3, [pc, #8]	; (d7d40 <hal_usart_init+0xc>)
   d7d38:	681b      	ldr	r3, [r3, #0]
   d7d3a:	681b      	ldr	r3, [r3, #0]
   d7d3c:	9301      	str	r3, [sp, #4]
   d7d3e:	bd08      	pop	{r3, pc}
   d7d40:	0003023c 	.word	0x0003023c

000d7d44 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7d44:	b508      	push	{r3, lr}
   d7d46:	4b02      	ldr	r3, [pc, #8]	; (d7d50 <hal_usart_write+0xc>)
   d7d48:	681b      	ldr	r3, [r3, #0]
   d7d4a:	68db      	ldr	r3, [r3, #12]
   d7d4c:	9301      	str	r3, [sp, #4]
   d7d4e:	bd08      	pop	{r3, pc}
   d7d50:	0003023c 	.word	0x0003023c

000d7d54 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7d54:	b508      	push	{r3, lr}
   d7d56:	4b02      	ldr	r3, [pc, #8]	; (d7d60 <hal_usart_available+0xc>)
   d7d58:	681b      	ldr	r3, [r3, #0]
   d7d5a:	691b      	ldr	r3, [r3, #16]
   d7d5c:	9301      	str	r3, [sp, #4]
   d7d5e:	bd08      	pop	{r3, pc}
   d7d60:	0003023c 	.word	0x0003023c

000d7d64 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7d64:	b508      	push	{r3, lr}
   d7d66:	4b02      	ldr	r3, [pc, #8]	; (d7d70 <hal_usart_read+0xc>)
   d7d68:	681b      	ldr	r3, [r3, #0]
   d7d6a:	695b      	ldr	r3, [r3, #20]
   d7d6c:	9301      	str	r3, [sp, #4]
   d7d6e:	bd08      	pop	{r3, pc}
   d7d70:	0003023c 	.word	0x0003023c

000d7d74 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7d74:	b508      	push	{r3, lr}
   d7d76:	4b02      	ldr	r3, [pc, #8]	; (d7d80 <hal_usart_peek+0xc>)
   d7d78:	681b      	ldr	r3, [r3, #0]
   d7d7a:	699b      	ldr	r3, [r3, #24]
   d7d7c:	9301      	str	r3, [sp, #4]
   d7d7e:	bd08      	pop	{r3, pc}
   d7d80:	0003023c 	.word	0x0003023c

000d7d84 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7d84:	b508      	push	{r3, lr}
   d7d86:	4b02      	ldr	r3, [pc, #8]	; (d7d90 <hal_usart_flush+0xc>)
   d7d88:	681b      	ldr	r3, [r3, #0]
   d7d8a:	69db      	ldr	r3, [r3, #28]
   d7d8c:	9301      	str	r3, [sp, #4]
   d7d8e:	bd08      	pop	{r3, pc}
   d7d90:	0003023c 	.word	0x0003023c

000d7d94 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7d94:	b508      	push	{r3, lr}
   d7d96:	4b02      	ldr	r3, [pc, #8]	; (d7da0 <hal_usart_is_enabled+0xc>)
   d7d98:	681b      	ldr	r3, [r3, #0]
   d7d9a:	6a1b      	ldr	r3, [r3, #32]
   d7d9c:	9301      	str	r3, [sp, #4]
   d7d9e:	bd08      	pop	{r3, pc}
   d7da0:	0003023c 	.word	0x0003023c

000d7da4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7da4:	b508      	push	{r3, lr}
   d7da6:	4b02      	ldr	r3, [pc, #8]	; (d7db0 <hal_usart_available_data_for_write+0xc>)
   d7da8:	681b      	ldr	r3, [r3, #0]
   d7daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7dac:	9301      	str	r3, [sp, #4]
   d7dae:	bd08      	pop	{r3, pc}
   d7db0:	0003023c 	.word	0x0003023c

000d7db4 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d7db4:	b508      	push	{r3, lr}
   d7db6:	4b02      	ldr	r3, [pc, #8]	; (d7dc0 <hal_i2c_set_speed+0xc>)
   d7db8:	681b      	ldr	r3, [r3, #0]
   d7dba:	681b      	ldr	r3, [r3, #0]
   d7dbc:	9301      	str	r3, [sp, #4]
   d7dbe:	bd08      	pop	{r3, pc}
   d7dc0:	00030228 	.word	0x00030228

000d7dc4 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7dc4:	b508      	push	{r3, lr}
   d7dc6:	4b02      	ldr	r3, [pc, #8]	; (d7dd0 <hal_i2c_begin+0xc>)
   d7dc8:	681b      	ldr	r3, [r3, #0]
   d7dca:	68db      	ldr	r3, [r3, #12]
   d7dcc:	9301      	str	r3, [sp, #4]
   d7dce:	bd08      	pop	{r3, pc}
   d7dd0:	00030228 	.word	0x00030228

000d7dd4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7dd4:	b508      	push	{r3, lr}
   d7dd6:	4b02      	ldr	r3, [pc, #8]	; (d7de0 <hal_i2c_begin_transmission+0xc>)
   d7dd8:	681b      	ldr	r3, [r3, #0]
   d7dda:	699b      	ldr	r3, [r3, #24]
   d7ddc:	9301      	str	r3, [sp, #4]
   d7dde:	bd08      	pop	{r3, pc}
   d7de0:	00030228 	.word	0x00030228

000d7de4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7de4:	b508      	push	{r3, lr}
   d7de6:	4b02      	ldr	r3, [pc, #8]	; (d7df0 <hal_i2c_end_transmission+0xc>)
   d7de8:	681b      	ldr	r3, [r3, #0]
   d7dea:	69db      	ldr	r3, [r3, #28]
   d7dec:	9301      	str	r3, [sp, #4]
   d7dee:	bd08      	pop	{r3, pc}
   d7df0:	00030228 	.word	0x00030228

000d7df4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7df4:	b508      	push	{r3, lr}
   d7df6:	4b02      	ldr	r3, [pc, #8]	; (d7e00 <hal_i2c_write+0xc>)
   d7df8:	681b      	ldr	r3, [r3, #0]
   d7dfa:	6a1b      	ldr	r3, [r3, #32]
   d7dfc:	9301      	str	r3, [sp, #4]
   d7dfe:	bd08      	pop	{r3, pc}
   d7e00:	00030228 	.word	0x00030228

000d7e04 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7e04:	b508      	push	{r3, lr}
   d7e06:	4b02      	ldr	r3, [pc, #8]	; (d7e10 <hal_i2c_available+0xc>)
   d7e08:	681b      	ldr	r3, [r3, #0]
   d7e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e0c:	9301      	str	r3, [sp, #4]
   d7e0e:	bd08      	pop	{r3, pc}
   d7e10:	00030228 	.word	0x00030228

000d7e14 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7e14:	b508      	push	{r3, lr}
   d7e16:	4b02      	ldr	r3, [pc, #8]	; (d7e20 <hal_i2c_read+0xc>)
   d7e18:	681b      	ldr	r3, [r3, #0]
   d7e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7e1c:	9301      	str	r3, [sp, #4]
   d7e1e:	bd08      	pop	{r3, pc}
   d7e20:	00030228 	.word	0x00030228

000d7e24 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7e24:	b508      	push	{r3, lr}
   d7e26:	4b02      	ldr	r3, [pc, #8]	; (d7e30 <hal_i2c_peek+0xc>)
   d7e28:	681b      	ldr	r3, [r3, #0]
   d7e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7e2c:	9301      	str	r3, [sp, #4]
   d7e2e:	bd08      	pop	{r3, pc}
   d7e30:	00030228 	.word	0x00030228

000d7e34 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7e34:	b508      	push	{r3, lr}
   d7e36:	4b02      	ldr	r3, [pc, #8]	; (d7e40 <hal_i2c_flush+0xc>)
   d7e38:	681b      	ldr	r3, [r3, #0]
   d7e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e3c:	9301      	str	r3, [sp, #4]
   d7e3e:	bd08      	pop	{r3, pc}
   d7e40:	00030228 	.word	0x00030228

000d7e44 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7e44:	b508      	push	{r3, lr}
   d7e46:	4b02      	ldr	r3, [pc, #8]	; (d7e50 <hal_i2c_is_enabled+0xc>)
   d7e48:	681b      	ldr	r3, [r3, #0]
   d7e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7e4c:	9301      	str	r3, [sp, #4]
   d7e4e:	bd08      	pop	{r3, pc}
   d7e50:	00030228 	.word	0x00030228

000d7e54 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7e54:	b508      	push	{r3, lr}
   d7e56:	4b02      	ldr	r3, [pc, #8]	; (d7e60 <hal_i2c_init+0xc>)
   d7e58:	681b      	ldr	r3, [r3, #0]
   d7e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7e5c:	9301      	str	r3, [sp, #4]
   d7e5e:	bd08      	pop	{r3, pc}
   d7e60:	00030228 	.word	0x00030228

000d7e64 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7e64:	b508      	push	{r3, lr}
   d7e66:	4b02      	ldr	r3, [pc, #8]	; (d7e70 <hal_i2c_request_ex+0xc>)
   d7e68:	681b      	ldr	r3, [r3, #0]
   d7e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7e6c:	9301      	str	r3, [sp, #4]
   d7e6e:	bd08      	pop	{r3, pc}
   d7e70:	00030228 	.word	0x00030228

000d7e74 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d7e74:	b508      	push	{r3, lr}
   d7e76:	4b02      	ldr	r3, [pc, #8]	; (d7e80 <hal_spi_begin+0xc>)
   d7e78:	681b      	ldr	r3, [r3, #0]
   d7e7a:	681b      	ldr	r3, [r3, #0]
   d7e7c:	9301      	str	r3, [sp, #4]
   d7e7e:	bd08      	pop	{r3, pc}
   d7e80:	00030230 	.word	0x00030230

000d7e84 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d7e84:	b508      	push	{r3, lr}
   d7e86:	4b02      	ldr	r3, [pc, #8]	; (d7e90 <hal_spi_transfer+0xc>)
   d7e88:	681b      	ldr	r3, [r3, #0]
   d7e8a:	695b      	ldr	r3, [r3, #20]
   d7e8c:	9301      	str	r3, [sp, #4]
   d7e8e:	bd08      	pop	{r3, pc}
   d7e90:	00030230 	.word	0x00030230

000d7e94 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7e94:	b508      	push	{r3, lr}
   d7e96:	4b02      	ldr	r3, [pc, #8]	; (d7ea0 <hal_spi_init+0xc>)
   d7e98:	681b      	ldr	r3, [r3, #0]
   d7e9a:	69db      	ldr	r3, [r3, #28]
   d7e9c:	9301      	str	r3, [sp, #4]
   d7e9e:	bd08      	pop	{r3, pc}
   d7ea0:	00030230 	.word	0x00030230

000d7ea4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7ea4:	b508      	push	{r3, lr}
   d7ea6:	4b02      	ldr	r3, [pc, #8]	; (d7eb0 <hal_spi_is_enabled+0xc>)
   d7ea8:	681b      	ldr	r3, [r3, #0]
   d7eaa:	6a1b      	ldr	r3, [r3, #32]
   d7eac:	9301      	str	r3, [sp, #4]
   d7eae:	bd08      	pop	{r3, pc}
   d7eb0:	00030230 	.word	0x00030230

000d7eb4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d7eb4:	b508      	push	{r3, lr}
   d7eb6:	4b02      	ldr	r3, [pc, #8]	; (d7ec0 <hal_spi_info+0xc>)
   d7eb8:	681b      	ldr	r3, [r3, #0]
   d7eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7ebc:	9301      	str	r3, [sp, #4]
   d7ebe:	bd08      	pop	{r3, pc}
   d7ec0:	00030230 	.word	0x00030230

000d7ec4 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d7ec4:	b508      	push	{r3, lr}
   d7ec6:	4b02      	ldr	r3, [pc, #8]	; (d7ed0 <hal_spi_transfer_dma+0xc>)
   d7ec8:	681b      	ldr	r3, [r3, #0]
   d7eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7ecc:	9301      	str	r3, [sp, #4]
   d7ece:	bd08      	pop	{r3, pc}
   d7ed0:	00030230 	.word	0x00030230

000d7ed4 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d7ed4:	b508      	push	{r3, lr}
   d7ed6:	4b02      	ldr	r3, [pc, #8]	; (d7ee0 <hal_spi_transfer_dma_status+0xc>)
   d7ed8:	681b      	ldr	r3, [r3, #0]
   d7eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7edc:	9301      	str	r3, [sp, #4]
   d7ede:	bd08      	pop	{r3, pc}
   d7ee0:	00030230 	.word	0x00030230

000d7ee4 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7ee4:	b508      	push	{r3, lr}
   d7ee6:	4b02      	ldr	r3, [pc, #8]	; (d7ef0 <hal_spi_set_settings+0xc>)
   d7ee8:	681b      	ldr	r3, [r3, #0]
   d7eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7eec:	9301      	str	r3, [sp, #4]
   d7eee:	bd08      	pop	{r3, pc}
   d7ef0:	00030230 	.word	0x00030230

000d7ef4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d7ef4:	b508      	push	{r3, lr}
   d7ef6:	4b02      	ldr	r3, [pc, #8]	; (d7f00 <hal_spi_acquire+0xc>)
   d7ef8:	681b      	ldr	r3, [r3, #0]
   d7efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7efc:	9301      	str	r3, [sp, #4]
   d7efe:	bd08      	pop	{r3, pc}
   d7f00:	00030230 	.word	0x00030230

000d7f04 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d7f04:	b508      	push	{r3, lr}
   d7f06:	4b02      	ldr	r3, [pc, #8]	; (d7f10 <hal_spi_release+0xc>)
   d7f08:	681b      	ldr	r3, [r3, #0]
   d7f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7f0c:	9301      	str	r3, [sp, #4]
   d7f0e:	bd08      	pop	{r3, pc}
   d7f10:	00030230 	.word	0x00030230

000d7f14 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7f14:	b508      	push	{r3, lr}
   d7f16:	4b02      	ldr	r3, [pc, #8]	; (d7f20 <HAL_USB_USART_Init+0xc>)
   d7f18:	681b      	ldr	r3, [r3, #0]
   d7f1a:	681b      	ldr	r3, [r3, #0]
   d7f1c:	9301      	str	r3, [sp, #4]
   d7f1e:	bd08      	pop	{r3, pc}
   d7f20:	0003024c 	.word	0x0003024c

000d7f24 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7f24:	b508      	push	{r3, lr}
   d7f26:	4b02      	ldr	r3, [pc, #8]	; (d7f30 <HAL_USB_USART_Begin+0xc>)
   d7f28:	681b      	ldr	r3, [r3, #0]
   d7f2a:	685b      	ldr	r3, [r3, #4]
   d7f2c:	9301      	str	r3, [sp, #4]
   d7f2e:	bd08      	pop	{r3, pc}
   d7f30:	0003024c 	.word	0x0003024c

000d7f34 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7f34:	b508      	push	{r3, lr}
   d7f36:	4b02      	ldr	r3, [pc, #8]	; (d7f40 <HAL_USB_USART_Available_Data+0xc>)
   d7f38:	681b      	ldr	r3, [r3, #0]
   d7f3a:	691b      	ldr	r3, [r3, #16]
   d7f3c:	9301      	str	r3, [sp, #4]
   d7f3e:	bd08      	pop	{r3, pc}
   d7f40:	0003024c 	.word	0x0003024c

000d7f44 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7f44:	b508      	push	{r3, lr}
   d7f46:	4b02      	ldr	r3, [pc, #8]	; (d7f50 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7f48:	681b      	ldr	r3, [r3, #0]
   d7f4a:	695b      	ldr	r3, [r3, #20]
   d7f4c:	9301      	str	r3, [sp, #4]
   d7f4e:	bd08      	pop	{r3, pc}
   d7f50:	0003024c 	.word	0x0003024c

000d7f54 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7f54:	b508      	push	{r3, lr}
   d7f56:	4b02      	ldr	r3, [pc, #8]	; (d7f60 <HAL_USB_USART_Receive_Data+0xc>)
   d7f58:	681b      	ldr	r3, [r3, #0]
   d7f5a:	699b      	ldr	r3, [r3, #24]
   d7f5c:	9301      	str	r3, [sp, #4]
   d7f5e:	bd08      	pop	{r3, pc}
   d7f60:	0003024c 	.word	0x0003024c

000d7f64 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7f64:	b508      	push	{r3, lr}
   d7f66:	4b02      	ldr	r3, [pc, #8]	; (d7f70 <HAL_USB_USART_Send_Data+0xc>)
   d7f68:	681b      	ldr	r3, [r3, #0]
   d7f6a:	69db      	ldr	r3, [r3, #28]
   d7f6c:	9301      	str	r3, [sp, #4]
   d7f6e:	bd08      	pop	{r3, pc}
   d7f70:	0003024c 	.word	0x0003024c

000d7f74 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7f74:	b508      	push	{r3, lr}
   d7f76:	4b02      	ldr	r3, [pc, #8]	; (d7f80 <HAL_USB_USART_Flush_Data+0xc>)
   d7f78:	681b      	ldr	r3, [r3, #0]
   d7f7a:	6a1b      	ldr	r3, [r3, #32]
   d7f7c:	9301      	str	r3, [sp, #4]
   d7f7e:	bd08      	pop	{r3, pc}
   d7f80:	0003024c 	.word	0x0003024c

000d7f84 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d7f84:	b508      	push	{r3, lr}
   d7f86:	4b02      	ldr	r3, [pc, #8]	; (d7f90 <HAL_USB_USART_Is_Enabled+0xc>)
   d7f88:	681b      	ldr	r3, [r3, #0]
   d7f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f8c:	9301      	str	r3, [sp, #4]
   d7f8e:	bd08      	pop	{r3, pc}
   d7f90:	0003024c 	.word	0x0003024c

000d7f94 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7f94:	b508      	push	{r3, lr}
   d7f96:	4b02      	ldr	r3, [pc, #8]	; (d7fa0 <panic_+0xc>)
   d7f98:	681b      	ldr	r3, [r3, #0]
   d7f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7f9c:	9301      	str	r3, [sp, #4]
   d7f9e:	bd08      	pop	{r3, pc}
   d7fa0:	00030260 	.word	0x00030260

000d7fa4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7fa4:	b508      	push	{r3, lr}
   d7fa6:	4b02      	ldr	r3, [pc, #8]	; (d7fb0 <set_system_mode+0xc>)
   d7fa8:	681b      	ldr	r3, [r3, #0]
   d7faa:	685b      	ldr	r3, [r3, #4]
   d7fac:	9301      	str	r3, [sp, #4]
   d7fae:	bd08      	pop	{r3, pc}
   d7fb0:	00030220 	.word	0x00030220

000d7fb4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7fb4:	b508      	push	{r3, lr}
   d7fb6:	4b02      	ldr	r3, [pc, #8]	; (d7fc0 <system_delay_ms+0xc>)
   d7fb8:	681b      	ldr	r3, [r3, #0]
   d7fba:	695b      	ldr	r3, [r3, #20]
   d7fbc:	9301      	str	r3, [sp, #4]
   d7fbe:	bd08      	pop	{r3, pc}
   d7fc0:	00030220 	.word	0x00030220

000d7fc4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7fc4:	b508      	push	{r3, lr}
   d7fc6:	4b03      	ldr	r3, [pc, #12]	; (d7fd4 <system_ctrl_set_app_request_handler+0x10>)
   d7fc8:	681b      	ldr	r3, [r3, #0]
   d7fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7fce:	9301      	str	r3, [sp, #4]
   d7fd0:	bd08      	pop	{r3, pc}
   d7fd2:	0000      	.short	0x0000
   d7fd4:	00030220 	.word	0x00030220

000d7fd8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7fd8:	b508      	push	{r3, lr}
   d7fda:	4b03      	ldr	r3, [pc, #12]	; (d7fe8 <system_ctrl_set_result+0x10>)
   d7fdc:	681b      	ldr	r3, [r3, #0]
   d7fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7fe2:	9301      	str	r3, [sp, #4]
   d7fe4:	bd08      	pop	{r3, pc}
   d7fe6:	0000      	.short	0x0000
   d7fe8:	00030220 	.word	0x00030220

000d7fec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7fec:	b508      	push	{r3, lr}
   d7fee:	4b02      	ldr	r3, [pc, #8]	; (d7ff8 <network_connect+0xc>)
   d7ff0:	681b      	ldr	r3, [r3, #0]
   d7ff2:	685b      	ldr	r3, [r3, #4]
   d7ff4:	9301      	str	r3, [sp, #4]
   d7ff6:	bd08      	pop	{r3, pc}
   d7ff8:	00030240 	.word	0x00030240

000d7ffc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7ffc:	b508      	push	{r3, lr}
   d7ffe:	4b02      	ldr	r3, [pc, #8]	; (d8008 <network_connecting+0xc>)
   d8000:	681b      	ldr	r3, [r3, #0]
   d8002:	689b      	ldr	r3, [r3, #8]
   d8004:	9301      	str	r3, [sp, #4]
   d8006:	bd08      	pop	{r3, pc}
   d8008:	00030240 	.word	0x00030240

000d800c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d800c:	b508      	push	{r3, lr}
   d800e:	4b02      	ldr	r3, [pc, #8]	; (d8018 <network_disconnect+0xc>)
   d8010:	681b      	ldr	r3, [r3, #0]
   d8012:	68db      	ldr	r3, [r3, #12]
   d8014:	9301      	str	r3, [sp, #4]
   d8016:	bd08      	pop	{r3, pc}
   d8018:	00030240 	.word	0x00030240

000d801c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d801c:	b508      	push	{r3, lr}
   d801e:	4b02      	ldr	r3, [pc, #8]	; (d8028 <network_ready+0xc>)
   d8020:	681b      	ldr	r3, [r3, #0]
   d8022:	691b      	ldr	r3, [r3, #16]
   d8024:	9301      	str	r3, [sp, #4]
   d8026:	bd08      	pop	{r3, pc}
   d8028:	00030240 	.word	0x00030240

000d802c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d802c:	b508      	push	{r3, lr}
   d802e:	4b02      	ldr	r3, [pc, #8]	; (d8038 <network_on+0xc>)
   d8030:	681b      	ldr	r3, [r3, #0]
   d8032:	695b      	ldr	r3, [r3, #20]
   d8034:	9301      	str	r3, [sp, #4]
   d8036:	bd08      	pop	{r3, pc}
   d8038:	00030240 	.word	0x00030240

000d803c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d803c:	b508      	push	{r3, lr}
   d803e:	4b02      	ldr	r3, [pc, #8]	; (d8048 <network_off+0xc>)
   d8040:	681b      	ldr	r3, [r3, #0]
   d8042:	699b      	ldr	r3, [r3, #24]
   d8044:	9301      	str	r3, [sp, #4]
   d8046:	bd08      	pop	{r3, pc}
   d8048:	00030240 	.word	0x00030240

000d804c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d804c:	b508      	push	{r3, lr}
   d804e:	4b02      	ldr	r3, [pc, #8]	; (d8058 <network_listen+0xc>)
   d8050:	681b      	ldr	r3, [r3, #0]
   d8052:	69db      	ldr	r3, [r3, #28]
   d8054:	9301      	str	r3, [sp, #4]
   d8056:	bd08      	pop	{r3, pc}
   d8058:	00030240 	.word	0x00030240

000d805c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d805c:	b508      	push	{r3, lr}
   d805e:	4b02      	ldr	r3, [pc, #8]	; (d8068 <network_listening+0xc>)
   d8060:	681b      	ldr	r3, [r3, #0]
   d8062:	6a1b      	ldr	r3, [r3, #32]
   d8064:	9301      	str	r3, [sp, #4]
   d8066:	bd08      	pop	{r3, pc}
   d8068:	00030240 	.word	0x00030240

000d806c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d806c:	b508      	push	{r3, lr}
   d806e:	4b02      	ldr	r3, [pc, #8]	; (d8078 <network_set_listen_timeout+0xc>)
   d8070:	681b      	ldr	r3, [r3, #0]
   d8072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8074:	9301      	str	r3, [sp, #4]
   d8076:	bd08      	pop	{r3, pc}
   d8078:	00030240 	.word	0x00030240

000d807c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d807c:	b508      	push	{r3, lr}
   d807e:	4b02      	ldr	r3, [pc, #8]	; (d8088 <network_get_listen_timeout+0xc>)
   d8080:	681b      	ldr	r3, [r3, #0]
   d8082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8084:	9301      	str	r3, [sp, #4]
   d8086:	bd08      	pop	{r3, pc}
   d8088:	00030240 	.word	0x00030240

000d808c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d808c:	b508      	push	{r3, lr}
   d808e:	4b02      	ldr	r3, [pc, #8]	; (d8098 <network_is_on+0xc>)
   d8090:	681b      	ldr	r3, [r3, #0]
   d8092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8094:	9301      	str	r3, [sp, #4]
   d8096:	bd08      	pop	{r3, pc}
   d8098:	00030240 	.word	0x00030240

000d809c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d809c:	b508      	push	{r3, lr}
   d809e:	4b02      	ldr	r3, [pc, #8]	; (d80a8 <network_is_off+0xc>)
   d80a0:	681b      	ldr	r3, [r3, #0]
   d80a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d80a4:	9301      	str	r3, [sp, #4]
   d80a6:	bd08      	pop	{r3, pc}
   d80a8:	00030240 	.word	0x00030240

000d80ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d80ac:	b508      	push	{r3, lr}
   d80ae:	4b02      	ldr	r3, [pc, #8]	; (d80b8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d80b0:	681b      	ldr	r3, [r3, #0]
   d80b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d80b4:	9301      	str	r3, [sp, #4]
   d80b6:	bd08      	pop	{r3, pc}
   d80b8:	00030244 	.word	0x00030244

000d80bc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d80bc:	b508      	push	{r3, lr}
   d80be:	4b02      	ldr	r3, [pc, #8]	; (d80c8 <malloc+0xc>)
   d80c0:	681b      	ldr	r3, [r3, #0]
   d80c2:	681b      	ldr	r3, [r3, #0]
   d80c4:	9301      	str	r3, [sp, #4]
   d80c6:	bd08      	pop	{r3, pc}
   d80c8:	0003021c 	.word	0x0003021c

000d80cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d80cc:	b508      	push	{r3, lr}
   d80ce:	4b02      	ldr	r3, [pc, #8]	; (d80d8 <free+0xc>)
   d80d0:	681b      	ldr	r3, [r3, #0]
   d80d2:	685b      	ldr	r3, [r3, #4]
   d80d4:	9301      	str	r3, [sp, #4]
   d80d6:	bd08      	pop	{r3, pc}
   d80d8:	0003021c 	.word	0x0003021c

000d80dc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d80dc:	b508      	push	{r3, lr}
   d80de:	4b02      	ldr	r3, [pc, #8]	; (d80e8 <vsnprintf+0xc>)
   d80e0:	681b      	ldr	r3, [r3, #0]
   d80e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d80e4:	9301      	str	r3, [sp, #4]
   d80e6:	bd08      	pop	{r3, pc}
   d80e8:	0003021c 	.word	0x0003021c

000d80ec <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d80ec:	b508      	push	{r3, lr}
   d80ee:	4b02      	ldr	r3, [pc, #8]	; (d80f8 <__errno+0xc>)
   d80f0:	681b      	ldr	r3, [r3, #0]
   d80f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d80f4:	9301      	str	r3, [sp, #4]
   d80f6:	bd08      	pop	{r3, pc}
   d80f8:	0003021c 	.word	0x0003021c

000d80fc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d80fc:	b508      	push	{r3, lr}
   d80fe:	4b02      	ldr	r3, [pc, #8]	; (d8108 <newlib_impure_ptr_callback+0xc>)
   d8100:	681b      	ldr	r3, [r3, #0]
   d8102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8104:	9301      	str	r3, [sp, #4]
   d8106:	bd08      	pop	{r3, pc}
   d8108:	0003021c 	.word	0x0003021c

000d810c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d810c:	2200      	movs	r2, #0
   d810e:	6840      	ldr	r0, [r0, #4]
   d8110:	4611      	mov	r1, r2
   d8112:	f7ff bfa3 	b.w	d805c <network_listening>

000d8116 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8116:	2200      	movs	r2, #0
   d8118:	6840      	ldr	r0, [r0, #4]
   d811a:	4611      	mov	r1, r2
   d811c:	f7ff bfae 	b.w	d807c <network_get_listen_timeout>

000d8120 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8120:	6840      	ldr	r0, [r0, #4]
   d8122:	2200      	movs	r2, #0
   d8124:	f7ff bfa2 	b.w	d806c <network_set_listen_timeout>

000d8128 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8128:	6840      	ldr	r0, [r0, #4]
   d812a:	2200      	movs	r2, #0
   d812c:	f081 0101 	eor.w	r1, r1, #1
   d8130:	f7ff bf8c 	b.w	d804c <network_listen>

000d8134 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8134:	2300      	movs	r3, #0
   d8136:	6840      	ldr	r0, [r0, #4]
   d8138:	461a      	mov	r2, r3
   d813a:	4619      	mov	r1, r3
   d813c:	f7ff bf7e 	b.w	d803c <network_off>

000d8140 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8140:	2300      	movs	r3, #0
   d8142:	6840      	ldr	r0, [r0, #4]
   d8144:	461a      	mov	r2, r3
   d8146:	4619      	mov	r1, r3
   d8148:	f7ff bf70 	b.w	d802c <network_on>

000d814c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d814c:	2200      	movs	r2, #0
   d814e:	6840      	ldr	r0, [r0, #4]
   d8150:	4611      	mov	r1, r2
   d8152:	f7ff bf63 	b.w	d801c <network_ready>

000d8156 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8156:	2200      	movs	r2, #0
   d8158:	6840      	ldr	r0, [r0, #4]
   d815a:	4611      	mov	r1, r2
   d815c:	f7ff bf4e 	b.w	d7ffc <network_connecting>

000d8160 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8160:	6840      	ldr	r0, [r0, #4]
   d8162:	2200      	movs	r2, #0
   d8164:	2102      	movs	r1, #2
   d8166:	f7ff bf51 	b.w	d800c <network_disconnect>

000d816a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d816a:	2300      	movs	r3, #0
   d816c:	6840      	ldr	r0, [r0, #4]
   d816e:	461a      	mov	r2, r3
   d8170:	f7ff bf3c 	b.w	d7fec <network_connect>

000d8174 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8174:	4b02      	ldr	r3, [pc, #8]	; (d8180 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8176:	2203      	movs	r2, #3
   d8178:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d817a:	4a02      	ldr	r2, [pc, #8]	; (d8184 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d817c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d817e:	4770      	bx	lr
   d8180:	2003e584 	.word	0x2003e584
   d8184:	000dd988 	.word	0x000dd988

000d8188 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d8188:	2100      	movs	r1, #0
   d818a:	f7ff beb3 	b.w	d7ef4 <hal_spi_acquire>

000d818e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d818e:	2100      	movs	r1, #0
   d8190:	f7ff beb8 	b.w	d7f04 <hal_spi_release>

000d8194 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d8194:	b510      	push	{r4, lr}
   d8196:	4604      	mov	r4, r0
   d8198:	4608      	mov	r0, r1
{
    _spi = spi;
   d819a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d819c:	f7ff fe7a 	bl	d7e94 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d81a0:	2300      	movs	r3, #0
   d81a2:	6063      	str	r3, [r4, #4]
}
   d81a4:	4620      	mov	r0, r4
   d81a6:	bd10      	pop	{r4, pc}

000d81a8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d81a8:	b510      	push	{r4, lr}
   d81aa:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d81ac:	7800      	ldrb	r0, [r0, #0]
   d81ae:	f7ff ffeb 	bl	d8188 <_ZN8SPIClass4lockEv.isra.0>
   d81b2:	b948      	cbnz	r0, d81c8 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d81b4:	7820      	ldrb	r0, [r4, #0]
   d81b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d81ba:	f7ff fe5b 	bl	d7e74 <hal_spi_begin>
        unlock();
   d81be:	7820      	ldrb	r0, [r4, #0]
    }
}
   d81c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d81c4:	f7ff bfe3 	b.w	d818e <_ZN8SPIClass6unlockEv.isra.0>
}
   d81c8:	bd10      	pop	{r4, pc}

000d81ca <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d81ca:	7800      	ldrb	r0, [r0, #0]
   d81cc:	f7ff bfdf 	b.w	d818e <_ZN8SPIClass6unlockEv.isra.0>

000d81d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d81d0:	0840      	lsrs	r0, r0, #1
{
   d81d2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d81d4:	6018      	str	r0, [r3, #0]
   d81d6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d81d8:	6818      	ldr	r0, [r3, #0]
   d81da:	4288      	cmp	r0, r1
   d81dc:	b2e5      	uxtb	r5, r4
   d81de:	d906      	bls.n	d81ee <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d81e0:	3401      	adds	r4, #1
   d81e2:	2c08      	cmp	r4, #8
   d81e4:	d002      	beq.n	d81ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d81e6:	0840      	lsrs	r0, r0, #1
   d81e8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d81ea:	e7f5      	b.n	d81d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d81ec:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d81ee:	4b02      	ldr	r3, [pc, #8]	; (d81f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d81f0:	5d5b      	ldrb	r3, [r3, r5]
   d81f2:	7013      	strb	r3, [r2, #0]
}
   d81f4:	bd30      	pop	{r4, r5, pc}
   d81f6:	bf00      	nop
   d81f8:	000dd9bc 	.word	0x000dd9bc

000d81fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d81fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8200:	4606      	mov	r6, r0
   d8202:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d8204:	7800      	ldrb	r0, [r0, #0]
{
   d8206:	460c      	mov	r4, r1
    CHECK(lock());
   d8208:	f7ff ffbe 	bl	d8188 <_ZN8SPIClass4lockEv.isra.0>
   d820c:	2800      	cmp	r0, #0
   d820e:	db1b      	blt.n	d8248 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d8210:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d8212:	2214      	movs	r2, #20
   d8214:	2100      	movs	r1, #0
   d8216:	a809      	add	r0, sp, #36	; 0x24
   d8218:	f004 fb36 	bl	dc888 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d821c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d821e:	2200      	movs	r2, #0
   d8220:	a909      	add	r1, sp, #36	; 0x24
   d8222:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d8224:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d8228:	f7ff fe44 	bl	d7eb4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d822c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d8230:	b113      	cbz	r3, d8238 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d8232:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d8236:	b155      	cbz	r5, d824e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d8238:	2700      	movs	r7, #0
   d823a:	46b9      	mov	r9, r7
   d823c:	46b8      	mov	r8, r7
   d823e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d8240:	7923      	ldrb	r3, [r4, #4]
   d8242:	b15d      	cbz	r5, d825c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d8244:	b1c3      	cbz	r3, d8278 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d8246:	2000      	movs	r0, #0
}
   d8248:	b00f      	add	sp, #60	; 0x3c
   d824a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d824e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d8252:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d8256:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d825a:	e7f1      	b.n	d8240 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d825c:	2b00      	cmp	r3, #0
   d825e:	d135      	bne.n	d82cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d8260:	68a3      	ldr	r3, [r4, #8]
   d8262:	4543      	cmp	r3, r8
   d8264:	d108      	bne.n	d8278 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d8266:	f88d 9020 	strb.w	r9, [sp, #32]
   d826a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d826e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8272:	89a3      	ldrh	r3, [r4, #12]
   d8274:	429a      	cmp	r2, r3
   d8276:	d0e6      	beq.n	d8246 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d8278:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d827a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d827c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d8280:	980a      	ldr	r0, [sp, #40]	; 0x28
   d8282:	ab04      	add	r3, sp, #16
   d8284:	f10d 020f 	add.w	r2, sp, #15
   d8288:	f7ff ffa2 	bl	d81d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d828c:	7921      	ldrb	r1, [r4, #4]
   d828e:	b985      	cbnz	r5, d82b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d8290:	b989      	cbnz	r1, d82b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d8292:	68a3      	ldr	r3, [r4, #8]
   d8294:	4543      	cmp	r3, r8
   d8296:	d30e      	bcc.n	d82b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d8298:	f88d 9020 	strb.w	r9, [sp, #32]
   d829c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d82a0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d82a4:	89a3      	ldrh	r3, [r4, #12]
   d82a6:	429a      	cmp	r2, r3
   d82a8:	d105      	bne.n	d82b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d82aa:	9b04      	ldr	r3, [sp, #16]
   d82ac:	4543      	cmp	r3, r8
   d82ae:	d102      	bne.n	d82b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d82b0:	e7c9      	b.n	d8246 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d82b2:	2900      	cmp	r1, #0
   d82b4:	d1f9      	bne.n	d82aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d82b6:	2300      	movs	r3, #0
   d82b8:	9301      	str	r3, [sp, #4]
   d82ba:	7b63      	ldrb	r3, [r4, #13]
   d82bc:	9300      	str	r3, [sp, #0]
   d82be:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d82c2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d82c4:	7830      	ldrb	r0, [r6, #0]
   d82c6:	f7ff fe0d 	bl	d7ee4 <hal_spi_set_settings>
   d82ca:	e7bc      	b.n	d8246 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d82cc:	e9cd 5500 	strd	r5, r5, [sp]
   d82d0:	462b      	mov	r3, r5
   d82d2:	462a      	mov	r2, r5
   d82d4:	2101      	movs	r1, #1
   d82d6:	e7f5      	b.n	d82c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d82d8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d82d8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d82da:	7800      	ldrb	r0, [r0, #0]
   d82dc:	f7ff fdd2 	bl	d7e84 <hal_spi_transfer>
}
   d82e0:	b2c0      	uxtb	r0, r0
   d82e2:	bd08      	pop	{r3, pc}

000d82e4 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d82e4:	b530      	push	{r4, r5, lr}
   d82e6:	b087      	sub	sp, #28
   d82e8:	4604      	mov	r4, r0
   d82ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d82ec:	9500      	str	r5, [sp, #0]
   d82ee:	7800      	ldrb	r0, [r0, #0]
   d82f0:	f7ff fde8 	bl	d7ec4 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d82f4:	b93d      	cbnz	r5, d8306 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d82f6:	7820      	ldrb	r0, [r4, #0]
   d82f8:	a902      	add	r1, sp, #8
   d82fa:	f7ff fdeb 	bl	d7ed4 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d82fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d8302:	07db      	lsls	r3, r3, #31
   d8304:	d4f7      	bmi.n	d82f6 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d8306:	b007      	add	sp, #28
   d8308:	bd30      	pop	{r4, r5, pc}
	...

000d830c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d830c:	4b05      	ldr	r3, [pc, #20]	; (d8324 <_GLOBAL__sub_I_System+0x18>)
   d830e:	2202      	movs	r2, #2
   d8310:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8312:	4b05      	ldr	r3, [pc, #20]	; (d8328 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d8314:	4a05      	ldr	r2, [pc, #20]	; (d832c <_GLOBAL__sub_I_System+0x20>)
   d8316:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d8318:	2000      	movs	r0, #0
   d831a:	6018      	str	r0, [r3, #0]
   d831c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d831e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8320:	f7ff be40 	b.w	d7fa4 <set_system_mode>
   d8324:	2003e598 	.word	0x2003e598
   d8328:	2003e58c 	.word	0x2003e58c
   d832c:	ffff0000 	.word	0xffff0000

000d8330 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8330:	4802      	ldr	r0, [pc, #8]	; (d833c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d8332:	2300      	movs	r3, #0
   d8334:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d8336:	f7ff bced 	b.w	d7d14 <os_mutex_recursive_create>
   d833a:	bf00      	nop
   d833c:	2003e59c 	.word	0x2003e59c

000d8340 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8342:	4606      	mov	r6, r0
   d8344:	460d      	mov	r5, r1
  size_t n = 0;
   d8346:	188f      	adds	r7, r1, r2
   d8348:	2400      	movs	r4, #0
  while (size--) {
   d834a:	42bd      	cmp	r5, r7
   d834c:	d00c      	beq.n	d8368 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d834e:	6833      	ldr	r3, [r6, #0]
   d8350:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8354:	689b      	ldr	r3, [r3, #8]
   d8356:	4630      	mov	r0, r6
   d8358:	4798      	blx	r3
     if (chunk>=0)
   d835a:	1e03      	subs	r3, r0, #0
   d835c:	db01      	blt.n	d8362 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d835e:	441c      	add	r4, r3
  while (size--) {
   d8360:	e7f3      	b.n	d834a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8362:	2c00      	cmp	r4, #0
   d8364:	bf08      	it	eq
   d8366:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d8368:	4620      	mov	r0, r4
   d836a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d836c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d836c:	b513      	push	{r0, r1, r4, lr}
   d836e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d8370:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d8372:	b159      	cbz	r1, d838c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d8374:	9101      	str	r1, [sp, #4]
   d8376:	f004 fab3 	bl	dc8e0 <strlen>
   d837a:	6823      	ldr	r3, [r4, #0]
   d837c:	9901      	ldr	r1, [sp, #4]
   d837e:	68db      	ldr	r3, [r3, #12]
   d8380:	4602      	mov	r2, r0
   d8382:	4620      	mov	r0, r4
    }
   d8384:	b002      	add	sp, #8
   d8386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d838a:	4718      	bx	r3
    }
   d838c:	b002      	add	sp, #8
   d838e:	bd10      	pop	{r4, pc}

000d8390 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d8390:	b508      	push	{r3, lr}
  return write(str);
   d8392:	f7ff ffeb 	bl	d836c <_ZN5Print5writeEPKc>
}
   d8396:	bd08      	pop	{r3, pc}

000d8398 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d8398:	6803      	ldr	r3, [r0, #0]
   d839a:	689b      	ldr	r3, [r3, #8]
   d839c:	4718      	bx	r3

000d839e <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d839e:	b508      	push	{r3, lr}
  return write(str);
   d83a0:	f7ff ffe4 	bl	d836c <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   d83a4:	bd08      	pop	{r3, pc}

000d83a6 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d83a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d83a8:	210d      	movs	r1, #13
{
   d83aa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d83ac:	f7ff fff4 	bl	d8398 <_ZN5Print5printEc>
  n += print('\n');
   d83b0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d83b2:	4604      	mov	r4, r0
  n += print('\n');
   d83b4:	4628      	mov	r0, r5
   d83b6:	f7ff ffef 	bl	d8398 <_ZN5Print5printEc>
  return n;
}
   d83ba:	4420      	add	r0, r4
   d83bc:	bd38      	pop	{r3, r4, r5, pc}

000d83be <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d83be:	b538      	push	{r3, r4, r5, lr}
   d83c0:	4605      	mov	r5, r0
  return write(str);
   d83c2:	f7ff ffd3 	bl	d836c <_ZN5Print5writeEPKc>
   d83c6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d83c8:	4628      	mov	r0, r5
   d83ca:	f7ff ffec 	bl	d83a6 <_ZN5Print7printlnEv>
  return n;
}
   d83ce:	4420      	add	r0, r4
   d83d0:	bd38      	pop	{r3, r4, r5, pc}

000d83d2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d83d2:	f7ff bff4 	b.w	d83be <_ZN5Print7printlnEPKc>

000d83d6 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d83d6:	b530      	push	{r4, r5, lr}
   d83d8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d83da:	2300      	movs	r3, #0
   d83dc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d83e0:	2a01      	cmp	r2, #1
   d83e2:	bf98      	it	ls
   d83e4:	220a      	movls	r2, #10
   d83e6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d83e8:	460d      	mov	r5, r1
   d83ea:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d83ee:	fb01 5312 	mls	r3, r1, r2, r5
   d83f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d83f6:	2b09      	cmp	r3, #9
   d83f8:	bf94      	ite	ls
   d83fa:	3330      	addls	r3, #48	; 0x30
   d83fc:	3337      	addhi	r3, #55	; 0x37
   d83fe:	b2db      	uxtb	r3, r3
  } while(n);
   d8400:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8402:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d8406:	d9ef      	bls.n	d83e8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d8408:	4621      	mov	r1, r4
   d840a:	f7ff ffaf 	bl	d836c <_ZN5Print5writeEPKc>
}
   d840e:	b00b      	add	sp, #44	; 0x2c
   d8410:	bd30      	pop	{r4, r5, pc}
	...

000d8414 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d8414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8418:	ec55 4b10 	vmov	r4, r5, d0
   d841c:	4606      	mov	r6, r0
   d841e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d8420:	ee10 2a10 	vmov	r2, s0
   d8424:	ee10 0a10 	vmov	r0, s0
   d8428:	462b      	mov	r3, r5
   d842a:	4629      	mov	r1, r5
   d842c:	f003 fea8 	bl	dc180 <__aeabi_dcmpun>
   d8430:	b140      	cbz	r0, d8444 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d8432:	4953      	ldr	r1, [pc, #332]	; (d8580 <_ZN5Print10printFloatEdh+0x16c>)
   d8434:	4630      	mov	r0, r6
   d8436:	f7ff ff99 	bl	d836c <_ZN5Print5writeEPKc>
   d843a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d843c:	4650      	mov	r0, sl
   d843e:	b003      	add	sp, #12
   d8440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d8444:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d8448:	4b4e      	ldr	r3, [pc, #312]	; (d8584 <_ZN5Print10printFloatEdh+0x170>)
   d844a:	f04f 32ff 	mov.w	r2, #4294967295
   d844e:	4620      	mov	r0, r4
   d8450:	4649      	mov	r1, r9
   d8452:	f003 fe95 	bl	dc180 <__aeabi_dcmpun>
   d8456:	b948      	cbnz	r0, d846c <_ZN5Print10printFloatEdh+0x58>
   d8458:	4b4a      	ldr	r3, [pc, #296]	; (d8584 <_ZN5Print10printFloatEdh+0x170>)
   d845a:	f04f 32ff 	mov.w	r2, #4294967295
   d845e:	4620      	mov	r0, r4
   d8460:	4649      	mov	r1, r9
   d8462:	f003 fe6f 	bl	dc144 <__aeabi_dcmple>
   d8466:	b908      	cbnz	r0, d846c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d8468:	4947      	ldr	r1, [pc, #284]	; (d8588 <_ZN5Print10printFloatEdh+0x174>)
   d846a:	e7e3      	b.n	d8434 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d846c:	4b47      	ldr	r3, [pc, #284]	; (d858c <_ZN5Print10printFloatEdh+0x178>)
   d846e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8472:	4620      	mov	r0, r4
   d8474:	4629      	mov	r1, r5
   d8476:	f003 fe79 	bl	dc16c <__aeabi_dcmpgt>
   d847a:	b108      	cbz	r0, d8480 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d847c:	4944      	ldr	r1, [pc, #272]	; (d8590 <_ZN5Print10printFloatEdh+0x17c>)
   d847e:	e7d9      	b.n	d8434 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d8480:	4b44      	ldr	r3, [pc, #272]	; (d8594 <_ZN5Print10printFloatEdh+0x180>)
   d8482:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8486:	4620      	mov	r0, r4
   d8488:	4629      	mov	r1, r5
   d848a:	f003 fe51 	bl	dc130 <__aeabi_dcmplt>
   d848e:	2800      	cmp	r0, #0
   d8490:	d1f4      	bne.n	d847c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d8492:	2200      	movs	r2, #0
   d8494:	2300      	movs	r3, #0
   d8496:	4620      	mov	r0, r4
   d8498:	4629      	mov	r1, r5
   d849a:	f003 fe49 	bl	dc130 <__aeabi_dcmplt>
   d849e:	b1d0      	cbz	r0, d84d6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d84a0:	212d      	movs	r1, #45	; 0x2d
   d84a2:	4630      	mov	r0, r6
   d84a4:	f7ff ff78 	bl	d8398 <_ZN5Print5printEc>
     number = -number;
   d84a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d84ac:	4682      	mov	sl, r0
     number = -number;
   d84ae:	461d      	mov	r5, r3
  double rounding = 0.5;
   d84b0:	4939      	ldr	r1, [pc, #228]	; (d8598 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d84b2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d85a0 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d84b6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d84ba:	2000      	movs	r0, #0
    rounding /= 10.0;
   d84bc:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d84c0:	fa5f f38b 	uxtb.w	r3, fp
   d84c4:	429f      	cmp	r7, r3
   d84c6:	d908      	bls.n	d84da <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d84c8:	4642      	mov	r2, r8
   d84ca:	464b      	mov	r3, r9
   d84cc:	f003 fce8 	bl	dbea0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d84d0:	f10b 0b01 	add.w	fp, fp, #1
   d84d4:	e7f4      	b.n	d84c0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d84d6:	4682      	mov	sl, r0
   d84d8:	e7ea      	b.n	d84b0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d84da:	4622      	mov	r2, r4
   d84dc:	462b      	mov	r3, r5
   d84de:	f003 f9ff 	bl	db8e0 <__adddf3>
   d84e2:	460d      	mov	r5, r1
   d84e4:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d84e6:	f003 fe89 	bl	dc1fc <__aeabi_d2uiz>
   d84ea:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d84ec:	f003 fb34 	bl	dbb58 <__aeabi_ui2d>
   d84f0:	4602      	mov	r2, r0
   d84f2:	460b      	mov	r3, r1
   d84f4:	4620      	mov	r0, r4
   d84f6:	4629      	mov	r1, r5
   d84f8:	f003 f9f0 	bl	db8dc <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d84fc:	220a      	movs	r2, #10
   d84fe:	4604      	mov	r4, r0
   d8500:	460d      	mov	r5, r1
   d8502:	4630      	mov	r0, r6
   d8504:	4641      	mov	r1, r8
   d8506:	f7ff ff66 	bl	d83d6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d850a:	4482      	add	sl, r0
  if (digits > 0) {
   d850c:	b127      	cbz	r7, d8518 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d850e:	4923      	ldr	r1, [pc, #140]	; (d859c <_ZN5Print10printFloatEdh+0x188>)
   d8510:	4630      	mov	r0, r6
   d8512:	f7ff ff2b 	bl	d836c <_ZN5Print5writeEPKc>
    n += print(".");
   d8516:	4482      	add	sl, r0
    remainder *= 10.0;
   d8518:	f8df 9084 	ldr.w	r9, [pc, #132]	; d85a0 <_ZN5Print10printFloatEdh+0x18c>
   d851c:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d8520:	3f01      	subs	r7, #1
   d8522:	b2ff      	uxtb	r7, r7
   d8524:	2fff      	cmp	r7, #255	; 0xff
   d8526:	d089      	beq.n	d843c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d8528:	4642      	mov	r2, r8
   d852a:	464b      	mov	r3, r9
   d852c:	4620      	mov	r0, r4
   d852e:	4629      	mov	r1, r5
   d8530:	f003 fb8c 	bl	dbc4c <__aeabi_dmul>
   d8534:	4604      	mov	r4, r0
   d8536:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d8538:	f003 fe38 	bl	dc1ac <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d853c:	f1b0 0b00 	subs.w	fp, r0, #0
   d8540:	da1a      	bge.n	d8578 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d8542:	212d      	movs	r1, #45	; 0x2d
   d8544:	4630      	mov	r0, r6
   d8546:	f7ff ff27 	bl	d8398 <_ZN5Print5printEc>
            val = -n;
   d854a:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d854e:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d8550:	220a      	movs	r2, #10
   d8552:	4630      	mov	r0, r6
   d8554:	9301      	str	r3, [sp, #4]
   d8556:	f7ff ff3e 	bl	d83d6 <_ZN5Print11printNumberEmh>
   d855a:	9b01      	ldr	r3, [sp, #4]
   d855c:	4418      	add	r0, r3
    n += print(toPrint);
   d855e:	4482      	add	sl, r0
    remainder -= toPrint;
   d8560:	4658      	mov	r0, fp
   d8562:	f003 fb09 	bl	dbb78 <__aeabi_i2d>
   d8566:	4602      	mov	r2, r0
   d8568:	460b      	mov	r3, r1
   d856a:	4620      	mov	r0, r4
   d856c:	4629      	mov	r1, r5
   d856e:	f003 f9b5 	bl	db8dc <__aeabi_dsub>
   d8572:	4604      	mov	r4, r0
   d8574:	460d      	mov	r5, r1
  while (digits-- > 0)
   d8576:	e7d3      	b.n	d8520 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d8578:	4659      	mov	r1, fp
        size_t t = 0;
   d857a:	2300      	movs	r3, #0
   d857c:	e7e8      	b.n	d8550 <_ZN5Print10printFloatEdh+0x13c>
   d857e:	bf00      	nop
   d8580:	000dd9c4 	.word	0x000dd9c4
   d8584:	7fefffff 	.word	0x7fefffff
   d8588:	000dd9c8 	.word	0x000dd9c8
   d858c:	41efffff 	.word	0x41efffff
   d8590:	000dd9cc 	.word	0x000dd9cc
   d8594:	c1efffff 	.word	0xc1efffff
   d8598:	3fe00000 	.word	0x3fe00000
   d859c:	000dcfa7 	.word	0x000dcfa7
   d85a0:	40240000 	.word	0x40240000

000d85a4 <_ZN5Print5printEfi>:
{
   d85a4:	b538      	push	{r3, r4, r5, lr}
   d85a6:	4604      	mov	r4, r0
   d85a8:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d85ac:	b2cd      	uxtb	r5, r1
   d85ae:	f003 faf5 	bl	dbb9c <__aeabi_f2d>
   d85b2:	ec41 0b10 	vmov	d0, r0, r1
   d85b6:	4629      	mov	r1, r5
   d85b8:	4620      	mov	r0, r4
}
   d85ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d85be:	f7ff bf29 	b.w	d8414 <_ZN5Print10printFloatEdh>

000d85c2 <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   d85c2:	b2c9      	uxtb	r1, r1
   d85c4:	f7ff bf26 	b.w	d8414 <_ZN5Print10printFloatEdh>

000d85c8 <_ZN5Print7printlnEdi>:
{
   d85c8:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d85ca:	b2c9      	uxtb	r1, r1
{
   d85cc:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d85ce:	f7ff ff21 	bl	d8414 <_ZN5Print10printFloatEdh>
   d85d2:	4604      	mov	r4, r0
  n += println();
   d85d4:	4628      	mov	r0, r5
   d85d6:	f7ff fee6 	bl	d83a6 <_ZN5Print7printlnEv>
}
   d85da:	4420      	add	r0, r4
   d85dc:	bd38      	pop	{r3, r4, r5, pc}

000d85de <_ZN5Print7printlnEfi>:
{
   d85de:	b538      	push	{r3, r4, r5, lr}
   d85e0:	4604      	mov	r4, r0
   d85e2:	ee10 0a10 	vmov	r0, s0
   d85e6:	460d      	mov	r5, r1
    return println((double)num, digits);
   d85e8:	f003 fad8 	bl	dbb9c <__aeabi_f2d>
   d85ec:	ec41 0b10 	vmov	d0, r0, r1
   d85f0:	4629      	mov	r1, r5
   d85f2:	4620      	mov	r0, r4
}
   d85f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d85f8:	f7ff bfe6 	b.w	d85c8 <_ZN5Print7printlnEdi>

000d85fc <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d85fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8600:	b086      	sub	sp, #24
   d8602:	af00      	add	r7, sp, #0
   d8604:	4605      	mov	r5, r0
   d8606:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d8608:	1d38      	adds	r0, r7, #4
   d860a:	2114      	movs	r1, #20
{
   d860c:	4614      	mov	r4, r2
    va_copy(args2, args);
   d860e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d8610:	f7ff fd64 	bl	d80dc <vsnprintf>

    if (n<bufsize)
   d8614:	2813      	cmp	r0, #19
   d8616:	d80e      	bhi.n	d8636 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d8618:	1d39      	adds	r1, r7, #4
   d861a:	4628      	mov	r0, r5
   d861c:	f7ff fea6 	bl	d836c <_ZN5Print5writeEPKc>
   d8620:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d8622:	b11e      	cbz	r6, d862c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d8624:	4628      	mov	r0, r5
   d8626:	f7ff febe 	bl	d83a6 <_ZN5Print7printlnEv>
   d862a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d862c:	4620      	mov	r0, r4
   d862e:	3718      	adds	r7, #24
   d8630:	46bd      	mov	sp, r7
   d8632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d8636:	f100 0308 	add.w	r3, r0, #8
   d863a:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d863e:	46e8      	mov	r8, sp
        char bigger[n+1];
   d8640:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d8644:	4622      	mov	r2, r4
   d8646:	1c41      	adds	r1, r0, #1
   d8648:	683b      	ldr	r3, [r7, #0]
   d864a:	4668      	mov	r0, sp
   d864c:	f7ff fd46 	bl	d80dc <vsnprintf>
  return write(str);
   d8650:	4669      	mov	r1, sp
   d8652:	4628      	mov	r0, r5
   d8654:	f7ff fe8a 	bl	d836c <_ZN5Print5writeEPKc>
   d8658:	4604      	mov	r4, r0
   d865a:	46c5      	mov	sp, r8
   d865c:	e7e1      	b.n	d8622 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000d8660 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8660:	4b01      	ldr	r3, [pc, #4]	; (d8668 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8662:	4a02      	ldr	r2, [pc, #8]	; (d866c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8664:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8666:	4770      	bx	lr
   d8668:	2003e5a0 	.word	0x2003e5a0
   d866c:	000dd9d0 	.word	0x000dd9d0

000d8670 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8670:	4b02      	ldr	r3, [pc, #8]	; (d867c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8672:	681a      	ldr	r2, [r3, #0]
   d8674:	4b02      	ldr	r3, [pc, #8]	; (d8680 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8676:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d8678:	4770      	bx	lr
   d867a:	bf00      	nop
   d867c:	2003e3e0 	.word	0x2003e3e0
   d8680:	2003e5a4 	.word	0x2003e5a4

000d8684 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d8684:	428a      	cmp	r2, r1
{
   d8686:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d8688:	d007      	beq.n	d869a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d868a:	9c02      	ldr	r4, [sp, #8]
   d868c:	1a40      	subs	r0, r0, r1
   d868e:	1ae4      	subs	r4, r4, r3
   d8690:	4360      	muls	r0, r4
   d8692:	1a52      	subs	r2, r2, r1
   d8694:	fb90 f0f2 	sdiv	r0, r0, r2
   d8698:	4418      	add	r0, r3
}
   d869a:	bd10      	pop	{r4, pc}

000d869c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d869c:	2100      	movs	r1, #0
   d869e:	f7ff bc89 	b.w	d7fb4 <system_delay_ms>
	...

000d86a4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d86a4:	4b01      	ldr	r3, [pc, #4]	; (d86ac <_GLOBAL__sub_I_RGB+0x8>)
   d86a6:	2200      	movs	r2, #0
   d86a8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d86aa:	4770      	bx	lr
   d86ac:	2003e5a8 	.word	0x2003e5a8

000d86b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d86b0:	4b01      	ldr	r3, [pc, #4]	; (d86b8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d86b2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d86b4:	4770      	bx	lr
   d86b6:	bf00      	nop
   d86b8:	2003e3e8 	.word	0x2003e3e8

000d86bc <serialEventRun>:
{
   d86bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d86be:	4b0b      	ldr	r3, [pc, #44]	; (d86ec <serialEventRun+0x30>)
   d86c0:	b143      	cbz	r3, d86d4 <serialEventRun+0x18>
   d86c2:	f000 f967 	bl	d8994 <_Z16_fetch_usbserialv>
   d86c6:	6803      	ldr	r3, [r0, #0]
   d86c8:	691b      	ldr	r3, [r3, #16]
   d86ca:	4798      	blx	r3
   d86cc:	2800      	cmp	r0, #0
   d86ce:	dd01      	ble.n	d86d4 <serialEventRun+0x18>
        serialEvent();
   d86d0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d86d4:	4b06      	ldr	r3, [pc, #24]	; (d86f0 <serialEventRun+0x34>)
   d86d6:	b143      	cbz	r3, d86ea <serialEventRun+0x2e>
   d86d8:	f000 fa4e 	bl	d8b78 <_Z22__fetch_global_Serial1v>
   d86dc:	6803      	ldr	r3, [r0, #0]
   d86de:	691b      	ldr	r3, [r3, #16]
   d86e0:	4798      	blx	r3
   d86e2:	2800      	cmp	r0, #0
   d86e4:	dd01      	ble.n	d86ea <serialEventRun+0x2e>
        serialEvent1();
   d86e6:	f3af 8000 	nop.w
}
   d86ea:	bd08      	pop	{r3, pc}
	...

000d86f4 <_post_loop>:
{
   d86f4:	b508      	push	{r3, lr}
	serialEventRun();
   d86f6:	f7ff ffe1 	bl	d86bc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d86fa:	f7ff fae3 	bl	d7cc4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d86fe:	4b01      	ldr	r3, [pc, #4]	; (d8704 <_post_loop+0x10>)
   d8700:	6018      	str	r0, [r3, #0]
}
   d8702:	bd08      	pop	{r3, pc}
   d8704:	2003e730 	.word	0x2003e730

000d8708 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8708:	4805      	ldr	r0, [pc, #20]	; (d8720 <_Z33system_initialize_user_backup_ramv+0x18>)
   d870a:	4a06      	ldr	r2, [pc, #24]	; (d8724 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d870c:	4906      	ldr	r1, [pc, #24]	; (d8728 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d870e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8710:	1a12      	subs	r2, r2, r0
   d8712:	f004 f8ab 	bl	dc86c <memcpy>
    __backup_sram_signature = signature;
   d8716:	4b05      	ldr	r3, [pc, #20]	; (d872c <_Z33system_initialize_user_backup_ramv+0x24>)
   d8718:	4a05      	ldr	r2, [pc, #20]	; (d8730 <_Z33system_initialize_user_backup_ramv+0x28>)
   d871a:	601a      	str	r2, [r3, #0]
}
   d871c:	bd08      	pop	{r3, pc}
   d871e:	bf00      	nop
   d8720:	2003f400 	.word	0x2003f400
   d8724:	2003f404 	.word	0x2003f404
   d8728:	000ddfd8 	.word	0x000ddfd8
   d872c:	2003f400 	.word	0x2003f400
   d8730:	9a271c1e 	.word	0x9a271c1e

000d8734 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8734:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8736:	2300      	movs	r3, #0
   d8738:	9300      	str	r3, [sp, #0]
   d873a:	461a      	mov	r2, r3
   d873c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8740:	f7ff fc4a 	bl	d7fd8 <system_ctrl_set_result>
}
   d8744:	b003      	add	sp, #12
   d8746:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d874c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d874c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d874e:	8843      	ldrh	r3, [r0, #2]
   d8750:	2b0a      	cmp	r3, #10
   d8752:	d008      	beq.n	d8766 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8754:	2b50      	cmp	r3, #80	; 0x50
   d8756:	d10b      	bne.n	d8770 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8758:	4b09      	ldr	r3, [pc, #36]	; (d8780 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d875a:	681b      	ldr	r3, [r3, #0]
   d875c:	b14b      	cbz	r3, d8772 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d875e:	b003      	add	sp, #12
   d8760:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8764:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d8766:	f7ff ffe5 	bl	d8734 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d876a:	b003      	add	sp, #12
   d876c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8770:	2300      	movs	r3, #0
   d8772:	9300      	str	r3, [sp, #0]
   d8774:	461a      	mov	r2, r3
   d8776:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d877a:	f7ff fc2d 	bl	d7fd8 <system_ctrl_set_result>
}
   d877e:	e7f4      	b.n	d876a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8780:	2003e5bc 	.word	0x2003e5bc

000d8784 <module_user_init_hook>:
{
   d8784:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8786:	4812      	ldr	r0, [pc, #72]	; (d87d0 <module_user_init_hook+0x4c>)
   d8788:	2100      	movs	r1, #0
   d878a:	f7ff fcb7 	bl	d80fc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d878e:	4b11      	ldr	r3, [pc, #68]	; (d87d4 <module_user_init_hook+0x50>)
   d8790:	681a      	ldr	r2, [r3, #0]
   d8792:	4b11      	ldr	r3, [pc, #68]	; (d87d8 <module_user_init_hook+0x54>)
   d8794:	429a      	cmp	r2, r3
   d8796:	4b11      	ldr	r3, [pc, #68]	; (d87dc <module_user_init_hook+0x58>)
   d8798:	bf0c      	ite	eq
   d879a:	2201      	moveq	r2, #1
   d879c:	2200      	movne	r2, #0
   d879e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d87a0:	d001      	beq.n	d87a6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d87a2:	f7ff ffb1 	bl	d8708 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d87a6:	f7ff fa7d 	bl	d7ca4 <HAL_RNG_GetRandomNumber>
   d87aa:	4604      	mov	r4, r0
    srand(seed);
   d87ac:	f004 f874 	bl	dc898 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d87b0:	4b0b      	ldr	r3, [pc, #44]	; (d87e0 <module_user_init_hook+0x5c>)
   d87b2:	b113      	cbz	r3, d87ba <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d87b4:	4620      	mov	r0, r4
   d87b6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d87ba:	2100      	movs	r1, #0
   d87bc:	4808      	ldr	r0, [pc, #32]	; (d87e0 <module_user_init_hook+0x5c>)
   d87be:	f7ff fc75 	bl	d80ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d87c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d87c6:	4807      	ldr	r0, [pc, #28]	; (d87e4 <module_user_init_hook+0x60>)
   d87c8:	2100      	movs	r1, #0
   d87ca:	f7ff bbfb 	b.w	d7fc4 <system_ctrl_set_app_request_handler>
   d87ce:	bf00      	nop
   d87d0:	000d86b1 	.word	0x000d86b1
   d87d4:	2003f400 	.word	0x2003f400
   d87d8:	9a271c1e 	.word	0x9a271c1e
   d87dc:	2003e5b8 	.word	0x2003e5b8
   d87e0:	00000000 	.word	0x00000000
   d87e4:	000d874d 	.word	0x000d874d

000d87e8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d87e8:	4770      	bx	lr

000d87ea <_ZN9IPAddressD0Ev>:
   d87ea:	b510      	push	{r4, lr}
   d87ec:	2118      	movs	r1, #24
   d87ee:	4604      	mov	r4, r0
   d87f0:	f000 fbfc 	bl	d8fec <_ZdlPvj>
   d87f4:	4620      	mov	r0, r4
   d87f6:	bd10      	pop	{r4, pc}

000d87f8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d87f8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d87fa:	7d03      	ldrb	r3, [r0, #20]
   d87fc:	2b06      	cmp	r3, #6
{
   d87fe:	b08d      	sub	sp, #52	; 0x34
   d8800:	460e      	mov	r6, r1
   d8802:	f100 0704 	add.w	r7, r0, #4
   d8806:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d880a:	d012      	beq.n	d8832 <_ZNK9IPAddress7printToER5Print+0x3a>
   d880c:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8810:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8814:	220a      	movs	r2, #10
   d8816:	4630      	mov	r0, r6
   d8818:	f7ff fddd 	bl	d83d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d881c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d881e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8820:	d019      	beq.n	d8856 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8822:	2c00      	cmp	r4, #0
   d8824:	d0f4      	beq.n	d8810 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8826:	212e      	movs	r1, #46	; 0x2e
   d8828:	4630      	mov	r0, r6
   d882a:	f7ff fdb5 	bl	d8398 <_ZN5Print5printEc>
   d882e:	4404      	add	r4, r0
   d8830:	e7ee      	b.n	d8810 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8832:	232f      	movs	r3, #47	; 0x2f
   d8834:	466a      	mov	r2, sp
   d8836:	4639      	mov	r1, r7
   d8838:	200a      	movs	r0, #10
		buf[0] = 0;
   d883a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d883e:	f7ff fa71 	bl	d7d24 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8842:	4668      	mov	r0, sp
   d8844:	f004 f84c 	bl	dc8e0 <strlen>
   d8848:	6833      	ldr	r3, [r6, #0]
   d884a:	4602      	mov	r2, r0
   d884c:	68db      	ldr	r3, [r3, #12]
   d884e:	4669      	mov	r1, sp
   d8850:	4630      	mov	r0, r6
   d8852:	4798      	blx	r3
   d8854:	4604      	mov	r4, r0
    }
    return n;
}
   d8856:	4620      	mov	r0, r4
   d8858:	b00d      	add	sp, #52	; 0x34
   d885a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d885c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d885c:	b510      	push	{r4, lr}
   d885e:	4b05      	ldr	r3, [pc, #20]	; (d8874 <_ZN9IPAddressC1Ev+0x18>)
   d8860:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8862:	2211      	movs	r2, #17
   d8864:	f840 3b04 	str.w	r3, [r0], #4
   d8868:	2100      	movs	r1, #0
   d886a:	f004 f80d 	bl	dc888 <memset>
}
   d886e:	4620      	mov	r0, r4
   d8870:	bd10      	pop	{r4, pc}
   d8872:	bf00      	nop
   d8874:	000dd9f8 	.word	0x000dd9f8

000d8878 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8878:	4603      	mov	r3, r0
   d887a:	4a07      	ldr	r2, [pc, #28]	; (d8898 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d887c:	b510      	push	{r4, lr}
   d887e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8882:	f101 0210 	add.w	r2, r1, #16
   d8886:	f851 4b04 	ldr.w	r4, [r1], #4
   d888a:	f843 4b04 	str.w	r4, [r3], #4
   d888e:	4291      	cmp	r1, r2
   d8890:	d1f9      	bne.n	d8886 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8892:	780a      	ldrb	r2, [r1, #0]
   d8894:	701a      	strb	r2, [r3, #0]
}
   d8896:	bd10      	pop	{r4, pc}
   d8898:	000dd9f8 	.word	0x000dd9f8

000d889c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d889c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d889e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d88a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d88a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d88aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d88ae:	2304      	movs	r3, #4
   d88b0:	6041      	str	r1, [r0, #4]
   d88b2:	7503      	strb	r3, [r0, #20]
}
   d88b4:	bd10      	pop	{r4, pc}

000d88b6 <_ZN9IPAddressaSEPKh>:
{
   d88b6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d88b8:	78cb      	ldrb	r3, [r1, #3]
   d88ba:	9300      	str	r3, [sp, #0]
   d88bc:	788b      	ldrb	r3, [r1, #2]
   d88be:	784a      	ldrb	r2, [r1, #1]
   d88c0:	7809      	ldrb	r1, [r1, #0]
   d88c2:	f7ff ffeb 	bl	d889c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d88c6:	b002      	add	sp, #8
   d88c8:	bd10      	pop	{r4, pc}

000d88ca <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d88ca:	7441      	strb	r1, [r0, #17]
}
   d88cc:	4770      	bx	lr

000d88ce <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d88ce:	4770      	bx	lr

000d88d0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d88d0:	4770      	bx	lr

000d88d2 <_ZN9USBSerial4readEv>:
{
   d88d2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d88d4:	2100      	movs	r1, #0
   d88d6:	7c00      	ldrb	r0, [r0, #16]
   d88d8:	f7ff fb3c 	bl	d7f54 <HAL_USB_USART_Receive_Data>
}
   d88dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d88e0:	bd08      	pop	{r3, pc}

000d88e2 <_ZN9USBSerial4peekEv>:
{
   d88e2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d88e4:	2101      	movs	r1, #1
   d88e6:	7c00      	ldrb	r0, [r0, #16]
   d88e8:	f7ff fb34 	bl	d7f54 <HAL_USB_USART_Receive_Data>
}
   d88ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d88f0:	bd08      	pop	{r3, pc}

000d88f2 <_ZN9USBSerial17availableForWriteEv>:
{
   d88f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d88f4:	7c00      	ldrb	r0, [r0, #16]
   d88f6:	f7ff fb25 	bl	d7f44 <HAL_USB_USART_Available_Data_For_Write>
}
   d88fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d88fe:	bd08      	pop	{r3, pc}

000d8900 <_ZN9USBSerial9availableEv>:
{
   d8900:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8902:	7c00      	ldrb	r0, [r0, #16]
   d8904:	f7ff fb16 	bl	d7f34 <HAL_USB_USART_Available_Data>
}
   d8908:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d890c:	bd08      	pop	{r3, pc}

000d890e <_ZN9USBSerial5writeEh>:
{
   d890e:	b513      	push	{r0, r1, r4, lr}
   d8910:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8912:	7c00      	ldrb	r0, [r0, #16]
{
   d8914:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8916:	f7ff fb15 	bl	d7f44 <HAL_USB_USART_Available_Data_For_Write>
   d891a:	2800      	cmp	r0, #0
   d891c:	9901      	ldr	r1, [sp, #4]
   d891e:	dc01      	bgt.n	d8924 <_ZN9USBSerial5writeEh+0x16>
   d8920:	7c60      	ldrb	r0, [r4, #17]
   d8922:	b120      	cbz	r0, d892e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8924:	7c20      	ldrb	r0, [r4, #16]
   d8926:	f7ff fb1d 	bl	d7f64 <HAL_USB_USART_Send_Data>
   d892a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d892e:	b002      	add	sp, #8
   d8930:	bd10      	pop	{r4, pc}

000d8932 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d8932:	7c00      	ldrb	r0, [r0, #16]
   d8934:	f7ff bb1e 	b.w	d7f74 <HAL_USB_USART_Flush_Data>

000d8938 <_ZN9USBSerialD0Ev>:
   d8938:	b510      	push	{r4, lr}
   d893a:	2114      	movs	r1, #20
   d893c:	4604      	mov	r4, r0
   d893e:	f000 fb55 	bl	d8fec <_ZdlPvj>
   d8942:	4620      	mov	r0, r4
   d8944:	bd10      	pop	{r4, pc}
	...

000d8948 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8948:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d894a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d894e:	4604      	mov	r4, r0
   d8950:	4608      	mov	r0, r1
   d8952:	2100      	movs	r1, #0
   d8954:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8958:	4b04      	ldr	r3, [pc, #16]	; (d896c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d895a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d895c:	2301      	movs	r3, #1
  _serial = serial;
   d895e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8960:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d8962:	4611      	mov	r1, r2
   d8964:	f7ff fad6 	bl	d7f14 <HAL_USB_USART_Init>
}
   d8968:	4620      	mov	r0, r4
   d896a:	bd10      	pop	{r4, pc}
   d896c:	000dda0c 	.word	0x000dda0c

000d8970 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8970:	7c00      	ldrb	r0, [r0, #16]
   d8972:	2200      	movs	r2, #0
   d8974:	f7ff bad6 	b.w	d7f24 <HAL_USB_USART_Begin>

000d8978 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   d8978:	7c00      	ldrb	r0, [r0, #16]
   d897a:	f7ff bb03 	b.w	d7f84 <HAL_USB_USART_Is_Enabled>

000d897e <_ZN9USBSerialcvbEv>:
  return isEnabled();
   d897e:	f7ff bffb 	b.w	d8978 <_ZN9USBSerial9isEnabledEv>

000d8982 <_Z19acquireSerialBufferv>:
{
   d8982:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8984:	2214      	movs	r2, #20
{
   d8986:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8988:	2100      	movs	r1, #0
   d898a:	f003 ff7d 	bl	dc888 <memset>
}
   d898e:	4620      	mov	r0, r4
   d8990:	bd10      	pop	{r4, pc}
	...

000d8994 <_Z16_fetch_usbserialv>:
{
   d8994:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8996:	4c0f      	ldr	r4, [pc, #60]	; (d89d4 <_Z16_fetch_usbserialv+0x40>)
{
   d8998:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d899a:	a803      	add	r0, sp, #12
   d899c:	f7ff fff1 	bl	d8982 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d89a0:	7821      	ldrb	r1, [r4, #0]
   d89a2:	f3bf 8f5b 	dmb	ish
   d89a6:	f011 0101 	ands.w	r1, r1, #1
   d89aa:	d10f      	bne.n	d89cc <_Z16_fetch_usbserialv+0x38>
   d89ac:	4620      	mov	r0, r4
   d89ae:	9101      	str	r1, [sp, #4]
   d89b0:	f7fb fb82 	bl	d40b8 <__cxa_guard_acquire>
   d89b4:	9901      	ldr	r1, [sp, #4]
   d89b6:	b148      	cbz	r0, d89cc <_Z16_fetch_usbserialv+0x38>
   d89b8:	aa03      	add	r2, sp, #12
   d89ba:	4807      	ldr	r0, [pc, #28]	; (d89d8 <_Z16_fetch_usbserialv+0x44>)
   d89bc:	f7ff ffc4 	bl	d8948 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d89c0:	4620      	mov	r0, r4
   d89c2:	f7fb fb7e 	bl	d40c2 <__cxa_guard_release>
   d89c6:	4805      	ldr	r0, [pc, #20]	; (d89dc <_Z16_fetch_usbserialv+0x48>)
   d89c8:	f003 ff4a 	bl	dc860 <atexit>
	return _usbserial;
}
   d89cc:	4802      	ldr	r0, [pc, #8]	; (d89d8 <_Z16_fetch_usbserialv+0x44>)
   d89ce:	b008      	add	sp, #32
   d89d0:	bd10      	pop	{r4, pc}
   d89d2:	bf00      	nop
   d89d4:	2003e5c0 	.word	0x2003e5c0
   d89d8:	2003e5c4 	.word	0x2003e5c4
   d89dc:	000d88cf 	.word	0x000d88cf

000d89e0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d89e0:	4700      	bx	r0
	...

000d89e4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d89e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d89e8:	2400      	movs	r4, #0
{
   d89ea:	461d      	mov	r5, r3
   d89ec:	460f      	mov	r7, r1
   d89ee:	4690      	mov	r8, r2
   d89f0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d89f2:	f7ff f947 	bl	d7c84 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d89f6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d89f8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d89fc:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8a00:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8a04:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d8a08:	bfa2      	ittt	ge
   d8a0a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8a0e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d8a12:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8a14:	4907      	ldr	r1, [pc, #28]	; (d8a34 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d8a16:	9400      	str	r4, [sp, #0]
   d8a18:	4643      	mov	r3, r8
   d8a1a:	463a      	mov	r2, r7
   d8a1c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8a1e:	bfa8      	it	ge
   d8a20:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8a24:	f7ff f926 	bl	d7c74 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8a28:	fab0 f080 	clz	r0, r0
   d8a2c:	0940      	lsrs	r0, r0, #5
   d8a2e:	b004      	add	sp, #16
   d8a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8a34:	000d89e1 	.word	0x000d89e1

000d8a38 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8a38:	2200      	movs	r2, #0
   d8a3a:	6840      	ldr	r0, [r0, #4]
   d8a3c:	4611      	mov	r1, r2
   d8a3e:	f7ff baed 	b.w	d801c <network_ready>

000d8a42 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d8a42:	2200      	movs	r2, #0
   d8a44:	6840      	ldr	r0, [r0, #4]
   d8a46:	4611      	mov	r1, r2
   d8a48:	f7ff bb08 	b.w	d805c <network_listening>

000d8a4c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8a4c:	2200      	movs	r2, #0
   d8a4e:	6840      	ldr	r0, [r0, #4]
   d8a50:	4611      	mov	r1, r2
   d8a52:	f7ff bb13 	b.w	d807c <network_get_listen_timeout>

000d8a56 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8a56:	6840      	ldr	r0, [r0, #4]
   d8a58:	2200      	movs	r2, #0
   d8a5a:	f7ff bb07 	b.w	d806c <network_set_listen_timeout>

000d8a5e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8a5e:	6840      	ldr	r0, [r0, #4]
   d8a60:	2200      	movs	r2, #0
   d8a62:	f081 0101 	eor.w	r1, r1, #1
   d8a66:	f7ff baf1 	b.w	d804c <network_listen>

000d8a6a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8a6a:	2300      	movs	r3, #0
   d8a6c:	6840      	ldr	r0, [r0, #4]
   d8a6e:	461a      	mov	r2, r3
   d8a70:	4619      	mov	r1, r3
   d8a72:	f7ff bae3 	b.w	d803c <network_off>

000d8a76 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8a76:	2300      	movs	r3, #0
   d8a78:	6840      	ldr	r0, [r0, #4]
   d8a7a:	461a      	mov	r2, r3
   d8a7c:	4619      	mov	r1, r3
   d8a7e:	f7ff bad5 	b.w	d802c <network_on>

000d8a82 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8a82:	2200      	movs	r2, #0
   d8a84:	6840      	ldr	r0, [r0, #4]
   d8a86:	4611      	mov	r1, r2
   d8a88:	f7ff bab8 	b.w	d7ffc <network_connecting>

000d8a8c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8a8c:	6840      	ldr	r0, [r0, #4]
   d8a8e:	2200      	movs	r2, #0
   d8a90:	2102      	movs	r1, #2
   d8a92:	f7ff babb 	b.w	d800c <network_disconnect>

000d8a96 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8a96:	2300      	movs	r3, #0
   d8a98:	6840      	ldr	r0, [r0, #4]
   d8a9a:	461a      	mov	r2, r3
   d8a9c:	f7ff baa6 	b.w	d7fec <network_connect>

000d8aa0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8aa0:	4b08      	ldr	r3, [pc, #32]	; (d8ac4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8aa2:	b510      	push	{r4, lr}
   d8aa4:	2428      	movs	r4, #40	; 0x28
   d8aa6:	4622      	mov	r2, r4
   d8aa8:	4618      	mov	r0, r3
   d8aaa:	2100      	movs	r1, #0
   d8aac:	f003 feec 	bl	dc888 <memset>
   d8ab0:	4b05      	ldr	r3, [pc, #20]	; (d8ac8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d8ab2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d8ab4:	f04f 32ff 	mov.w	r2, #4294967295
   d8ab8:	6042      	str	r2, [r0, #4]
   d8aba:	2204      	movs	r2, #4
   d8abc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8abe:	4a03      	ldr	r2, [pc, #12]	; (d8acc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8ac0:	601a      	str	r2, [r3, #0]
   d8ac2:	bd10      	pop	{r4, pc}
   d8ac4:	2003e5e0 	.word	0x2003e5e0
   d8ac8:	2003e5d8 	.word	0x2003e5d8
   d8acc:	000dda3c 	.word	0x000dda3c

000d8ad0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d8ad0:	4770      	bx	lr

000d8ad2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8ad2:	7441      	strb	r1, [r0, #17]
}
   d8ad4:	4770      	bx	lr

000d8ad6 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8ad6:	4770      	bx	lr

000d8ad8 <_ZN11USARTSerial17availableForWriteEv>:
{
   d8ad8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8ada:	7c00      	ldrb	r0, [r0, #16]
   d8adc:	f7ff f962 	bl	d7da4 <hal_usart_available_data_for_write>
}
   d8ae0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8ae4:	bd08      	pop	{r3, pc}

000d8ae6 <_ZN11USARTSerial9availableEv>:
{
   d8ae6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d8ae8:	7c00      	ldrb	r0, [r0, #16]
   d8aea:	f7ff f933 	bl	d7d54 <hal_usart_available>
}
   d8aee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8af2:	bd08      	pop	{r3, pc}

000d8af4 <_ZN11USARTSerial4peekEv>:
{
   d8af4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d8af6:	7c00      	ldrb	r0, [r0, #16]
   d8af8:	f7ff f93c 	bl	d7d74 <hal_usart_peek>
}
   d8afc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8b00:	bd08      	pop	{r3, pc}

000d8b02 <_ZN11USARTSerial4readEv>:
{
   d8b02:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d8b04:	7c00      	ldrb	r0, [r0, #16]
   d8b06:	f7ff f92d 	bl	d7d64 <hal_usart_read>
}
   d8b0a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8b0e:	bd08      	pop	{r3, pc}

000d8b10 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d8b10:	7c00      	ldrb	r0, [r0, #16]
   d8b12:	f7ff b937 	b.w	d7d84 <hal_usart_flush>

000d8b16 <_ZN11USARTSerial5writeEh>:
{
   d8b16:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8b18:	7c45      	ldrb	r5, [r0, #17]
{
   d8b1a:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8b1c:	b12d      	cbz	r5, d8b2a <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d8b1e:	7c20      	ldrb	r0, [r4, #16]
}
   d8b20:	b003      	add	sp, #12
   d8b22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d8b26:	f7ff b90d 	b.w	d7d44 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8b2a:	7c00      	ldrb	r0, [r0, #16]
   d8b2c:	9101      	str	r1, [sp, #4]
   d8b2e:	f7ff f939 	bl	d7da4 <hal_usart_available_data_for_write>
   d8b32:	2800      	cmp	r0, #0
   d8b34:	9901      	ldr	r1, [sp, #4]
   d8b36:	dcf2      	bgt.n	d8b1e <_ZN11USARTSerial5writeEh+0x8>
}
   d8b38:	4628      	mov	r0, r5
   d8b3a:	b003      	add	sp, #12
   d8b3c:	bd30      	pop	{r4, r5, pc}

000d8b3e <_ZN11USARTSerialD0Ev>:
   d8b3e:	b510      	push	{r4, lr}
   d8b40:	2114      	movs	r1, #20
   d8b42:	4604      	mov	r4, r0
   d8b44:	f000 fa52 	bl	d8fec <_ZdlPvj>
   d8b48:	4620      	mov	r0, r4
   d8b4a:	bd10      	pop	{r4, pc}

000d8b4c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8b4c:	b510      	push	{r4, lr}
   d8b4e:	f04f 0c00 	mov.w	ip, #0
   d8b52:	4604      	mov	r4, r0
   d8b54:	4608      	mov	r0, r1
   d8b56:	4611      	mov	r1, r2
   d8b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8b5c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8b60:	4a04      	ldr	r2, [pc, #16]	; (d8b74 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d8b62:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d8b64:	2201      	movs	r2, #1
  _serial = serial;
   d8b66:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8b68:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d8b6a:	461a      	mov	r2, r3
   d8b6c:	f7ff f8e2 	bl	d7d34 <hal_usart_init>
}
   d8b70:	4620      	mov	r0, r4
   d8b72:	bd10      	pop	{r4, pc}
   d8b74:	000dda78 	.word	0x000dda78

000d8b78 <_Z22__fetch_global_Serial1v>:
{
   d8b78:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8b7a:	4c0d      	ldr	r4, [pc, #52]	; (d8bb0 <_Z22__fetch_global_Serial1v+0x38>)
   d8b7c:	7821      	ldrb	r1, [r4, #0]
   d8b7e:	f3bf 8f5b 	dmb	ish
   d8b82:	f011 0101 	ands.w	r1, r1, #1
   d8b86:	d110      	bne.n	d8baa <_Z22__fetch_global_Serial1v+0x32>
   d8b88:	4620      	mov	r0, r4
   d8b8a:	9101      	str	r1, [sp, #4]
   d8b8c:	f7fb fa94 	bl	d40b8 <__cxa_guard_acquire>
   d8b90:	9901      	ldr	r1, [sp, #4]
   d8b92:	b150      	cbz	r0, d8baa <_Z22__fetch_global_Serial1v+0x32>
   d8b94:	4b07      	ldr	r3, [pc, #28]	; (d8bb4 <_Z22__fetch_global_Serial1v+0x3c>)
   d8b96:	4a08      	ldr	r2, [pc, #32]	; (d8bb8 <_Z22__fetch_global_Serial1v+0x40>)
   d8b98:	4808      	ldr	r0, [pc, #32]	; (d8bbc <_Z22__fetch_global_Serial1v+0x44>)
   d8b9a:	f7ff ffd7 	bl	d8b4c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d8b9e:	4620      	mov	r0, r4
   d8ba0:	f7fb fa8f 	bl	d40c2 <__cxa_guard_release>
   d8ba4:	4806      	ldr	r0, [pc, #24]	; (d8bc0 <_Z22__fetch_global_Serial1v+0x48>)
   d8ba6:	f003 fe5b 	bl	dc860 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8baa:	4804      	ldr	r0, [pc, #16]	; (d8bbc <_Z22__fetch_global_Serial1v+0x44>)
   d8bac:	b002      	add	sp, #8
   d8bae:	bd10      	pop	{r4, pc}
   d8bb0:	2003e608 	.word	0x2003e608
   d8bb4:	2003e690 	.word	0x2003e690
   d8bb8:	2003e60c 	.word	0x2003e60c
   d8bbc:	2003e714 	.word	0x2003e714
   d8bc0:	000d8ad7 	.word	0x000d8ad7

000d8bc4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8bc4:	4770      	bx	lr

000d8bc6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8bc8:	4606      	mov	r6, r0
   d8bca:	4615      	mov	r5, r2
   d8bcc:	460c      	mov	r4, r1
   d8bce:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8bd0:	42bc      	cmp	r4, r7
   d8bd2:	d006      	beq.n	d8be2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8bd4:	6833      	ldr	r3, [r6, #0]
   d8bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8bda:	689b      	ldr	r3, [r3, #8]
   d8bdc:	4630      	mov	r0, r6
   d8bde:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8be0:	e7f6      	b.n	d8bd0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8be2:	4628      	mov	r0, r5
   d8be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8be6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8be6:	7c00      	ldrb	r0, [r0, #16]
   d8be8:	2200      	movs	r2, #0
   d8bea:	f7ff b903 	b.w	d7df4 <hal_i2c_write>

000d8bee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8bee:	7c00      	ldrb	r0, [r0, #16]
   d8bf0:	2100      	movs	r1, #0
   d8bf2:	f7ff b907 	b.w	d7e04 <hal_i2c_available>

000d8bf6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8bf6:	7c00      	ldrb	r0, [r0, #16]
   d8bf8:	2100      	movs	r1, #0
   d8bfa:	f7ff b90b 	b.w	d7e14 <hal_i2c_read>

000d8bfe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8bfe:	7c00      	ldrb	r0, [r0, #16]
   d8c00:	2100      	movs	r1, #0
   d8c02:	f7ff b90f 	b.w	d7e24 <hal_i2c_peek>

000d8c06 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8c06:	7c00      	ldrb	r0, [r0, #16]
   d8c08:	2100      	movs	r1, #0
   d8c0a:	f7ff b913 	b.w	d7e34 <hal_i2c_flush>

000d8c0e <_ZN7TwoWireD0Ev>:
   d8c0e:	b510      	push	{r4, lr}
   d8c10:	2114      	movs	r1, #20
   d8c12:	4604      	mov	r4, r0
   d8c14:	f000 f9ea 	bl	d8fec <_ZdlPvj>
   d8c18:	4620      	mov	r0, r4
   d8c1a:	bd10      	pop	{r4, pc}

000d8c1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8c1c:	b510      	push	{r4, lr}
   d8c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8c22:	4604      	mov	r4, r0
   d8c24:	4608      	mov	r0, r1
   d8c26:	2100      	movs	r1, #0
   d8c28:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8c2c:	4b03      	ldr	r3, [pc, #12]	; (d8c3c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8c2e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8c30:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8c32:	4611      	mov	r1, r2
   d8c34:	f7ff f90e 	bl	d7e54 <hal_i2c_init>
}
   d8c38:	4620      	mov	r0, r4
   d8c3a:	bd10      	pop	{r4, pc}
   d8c3c:	000ddaa8 	.word	0x000ddaa8

000d8c40 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d8c40:	7c00      	ldrb	r0, [r0, #16]
   d8c42:	2200      	movs	r2, #0
   d8c44:	f7ff b8b6 	b.w	d7db4 <hal_i2c_set_speed>

000d8c48 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8c48:	2300      	movs	r3, #0
   d8c4a:	7c00      	ldrb	r0, [r0, #16]
   d8c4c:	461a      	mov	r2, r3
   d8c4e:	4619      	mov	r1, r3
   d8c50:	f7ff b8b8 	b.w	d7dc4 <hal_i2c_begin>

000d8c54 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8c54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8c56:	2200      	movs	r2, #0
   d8c58:	2314      	movs	r3, #20
   d8c5a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8c5e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8c62:	780b      	ldrb	r3, [r1, #0]
   d8c64:	f88d 3008 	strb.w	r3, [sp, #8]
   d8c68:	684b      	ldr	r3, [r1, #4]
   d8c6a:	9303      	str	r3, [sp, #12]
   d8c6c:	68cb      	ldr	r3, [r1, #12]
   d8c6e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8c70:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8c72:	7a0b      	ldrb	r3, [r1, #8]
   d8c74:	9305      	str	r3, [sp, #20]
   d8c76:	a901      	add	r1, sp, #4
   d8c78:	f7ff f8f4 	bl	d7e64 <hal_i2c_request_ex>
}
   d8c7c:	b007      	add	sp, #28
   d8c7e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8c82 <_ZN7TwoWire11requestFromEhjh>:
{
   d8c82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8c84:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8c86:	f88d 1000 	strb.w	r1, [sp]
   d8c8a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8c8e:	9103      	str	r1, [sp, #12]
   d8c90:	bf18      	it	ne
   d8c92:	2301      	movne	r3, #1
   d8c94:	4669      	mov	r1, sp
    size_ = size;
   d8c96:	9201      	str	r2, [sp, #4]
   d8c98:	f88d 3008 	strb.w	r3, [sp, #8]
   d8c9c:	f7ff ffda 	bl	d8c54 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8ca0:	b005      	add	sp, #20
   d8ca2:	f85d fb04 	ldr.w	pc, [sp], #4

000d8ca6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d8ca6:	2301      	movs	r3, #1
   d8ca8:	f7ff bfeb 	b.w	d8c82 <_ZN7TwoWire11requestFromEhjh>

000d8cac <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8cac:	7c00      	ldrb	r0, [r0, #16]
   d8cae:	2200      	movs	r2, #0
   d8cb0:	f7ff b890 	b.w	d7dd4 <hal_i2c_begin_transmission>

000d8cb4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8cb4:	7c00      	ldrb	r0, [r0, #16]
   d8cb6:	2200      	movs	r2, #0
   d8cb8:	f7ff b894 	b.w	d7de4 <hal_i2c_end_transmission>

000d8cbc <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d8cbc:	2101      	movs	r1, #1
   d8cbe:	f7ff bff9 	b.w	d8cb4 <_ZN7TwoWire15endTransmissionEh>

000d8cc2 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8cc2:	2300      	movs	r3, #0
   d8cc4:	6840      	ldr	r0, [r0, #4]
   d8cc6:	461a      	mov	r2, r3
   d8cc8:	f7ff b990 	b.w	d7fec <network_connect>

000d8ccc <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8ccc:	6840      	ldr	r0, [r0, #4]
   d8cce:	2200      	movs	r2, #0
   d8cd0:	2102      	movs	r1, #2
   d8cd2:	f7ff b99b 	b.w	d800c <network_disconnect>

000d8cd6 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8cd6:	2200      	movs	r2, #0
   d8cd8:	6840      	ldr	r0, [r0, #4]
   d8cda:	4611      	mov	r1, r2
   d8cdc:	f7ff b98e 	b.w	d7ffc <network_connecting>

000d8ce0 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8ce0:	2200      	movs	r2, #0
   d8ce2:	6840      	ldr	r0, [r0, #4]
   d8ce4:	4611      	mov	r1, r2
   d8ce6:	f7ff b999 	b.w	d801c <network_ready>

000d8cea <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8cea:	2300      	movs	r3, #0
   d8cec:	6840      	ldr	r0, [r0, #4]
   d8cee:	461a      	mov	r2, r3
   d8cf0:	4619      	mov	r1, r3
   d8cf2:	f7ff b99b 	b.w	d802c <network_on>

000d8cf6 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8cf6:	2300      	movs	r3, #0
   d8cf8:	6840      	ldr	r0, [r0, #4]
   d8cfa:	461a      	mov	r2, r3
   d8cfc:	4619      	mov	r1, r3
   d8cfe:	f7ff b99d 	b.w	d803c <network_off>

000d8d02 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8d02:	6840      	ldr	r0, [r0, #4]
   d8d04:	2100      	movs	r1, #0
   d8d06:	f7ff b9c1 	b.w	d808c <network_is_on>

000d8d0a <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d8d0a:	6840      	ldr	r0, [r0, #4]
   d8d0c:	2100      	movs	r1, #0
   d8d0e:	f7ff b9c5 	b.w	d809c <network_is_off>

000d8d12 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8d12:	6840      	ldr	r0, [r0, #4]
   d8d14:	2200      	movs	r2, #0
   d8d16:	f081 0101 	eor.w	r1, r1, #1
   d8d1a:	f7ff b997 	b.w	d804c <network_listen>

000d8d1e <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8d1e:	6840      	ldr	r0, [r0, #4]
   d8d20:	2200      	movs	r2, #0
   d8d22:	f7ff b9a3 	b.w	d806c <network_set_listen_timeout>

000d8d26 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8d26:	2200      	movs	r2, #0
   d8d28:	6840      	ldr	r0, [r0, #4]
   d8d2a:	4611      	mov	r1, r2
   d8d2c:	f7ff b9a6 	b.w	d807c <network_get_listen_timeout>

000d8d30 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8d30:	2200      	movs	r2, #0
   d8d32:	6840      	ldr	r0, [r0, #4]
   d8d34:	4611      	mov	r1, r2
   d8d36:	f7ff b991 	b.w	d805c <network_listening>

000d8d3a <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8d3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8d3e:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8d40:	b095      	sub	sp, #84	; 0x54
   d8d42:	4616      	mov	r6, r2
   d8d44:	460d      	mov	r5, r1
   d8d46:	4607      	mov	r7, r0
    IPAddress addr;
   d8d48:	f7ff fd88 	bl	d885c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d8d4c:	4621      	mov	r1, r4
   d8d4e:	2218      	movs	r2, #24
   d8d50:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8d52:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8d54:	f003 fd98 	bl	dc888 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8d58:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8d5a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8d5e:	4621      	mov	r1, r4
   d8d60:	466b      	mov	r3, sp
   d8d62:	aa0c      	add	r2, sp, #48	; 0x30
   d8d64:	4630      	mov	r0, r6
   d8d66:	f7fe ff55 	bl	d7c14 <netdb_getaddrinfo>
    if (!r) {
   d8d6a:	4604      	mov	r4, r0
   d8d6c:	2800      	cmp	r0, #0
   d8d6e:	d146      	bne.n	d8dfe <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8d70:	4602      	mov	r2, r0
   d8d72:	2101      	movs	r1, #1
   d8d74:	6868      	ldr	r0, [r5, #4]
   d8d76:	f7ff f951 	bl	d801c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8d7a:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8d7c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8d7e:	4622      	mov	r2, r4
   d8d80:	6868      	ldr	r0, [r5, #4]
   d8d82:	f7ff f94b 	bl	d801c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8d86:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8d88:	4681      	mov	r9, r0
        bool ok = false;
   d8d8a:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8d8c:	2e00      	cmp	r6, #0
   d8d8e:	d036      	beq.n	d8dfe <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d8d90:	2900      	cmp	r1, #0
   d8d92:	d134      	bne.n	d8dfe <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8d94:	6873      	ldr	r3, [r6, #4]
   d8d96:	2b02      	cmp	r3, #2
   d8d98:	d003      	beq.n	d8da2 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8d9a:	2b0a      	cmp	r3, #10
   d8d9c:	d00b      	beq.n	d8db6 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8d9e:	69f6      	ldr	r6, [r6, #28]
   d8da0:	e7f4      	b.n	d8d8c <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8da2:	f1b8 0f00 	cmp.w	r8, #0
   d8da6:	d004      	beq.n	d8db2 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8da8:	6971      	ldr	r1, [r6, #20]
   d8daa:	4638      	mov	r0, r7
   d8dac:	3104      	adds	r1, #4
   d8dae:	f7ff fd82 	bl	d88b6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d8db2:	4641      	mov	r1, r8
   d8db4:	e7f3      	b.n	d8d9e <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8db6:	f1b9 0f00 	cmp.w	r9, #0
   d8dba:	d101      	bne.n	d8dc0 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d8dbc:	4649      	mov	r1, r9
   d8dbe:	e7ee      	b.n	d8d9e <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8dc0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8dc2:	2210      	movs	r2, #16
   d8dc4:	a801      	add	r0, sp, #4
   d8dc6:	f003 fd5f 	bl	dc888 <memset>
                    a.v = 6;
   d8dca:	2306      	movs	r3, #6
   d8dcc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8dd0:	ad01      	add	r5, sp, #4
   d8dd2:	f104 0308 	add.w	r3, r4, #8
   d8dd6:	3418      	adds	r4, #24
   d8dd8:	6818      	ldr	r0, [r3, #0]
   d8dda:	6859      	ldr	r1, [r3, #4]
   d8ddc:	462a      	mov	r2, r5
   d8dde:	c203      	stmia	r2!, {r0, r1}
   d8de0:	3308      	adds	r3, #8
   d8de2:	42a3      	cmp	r3, r4
   d8de4:	4615      	mov	r5, r2
   d8de6:	d1f7      	bne.n	d8dd8 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d8de8:	a901      	add	r1, sp, #4
   d8dea:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d8dec:	ad07      	add	r5, sp, #28
   d8dee:	f7ff fd43 	bl	d8878 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8df4:	1d3c      	adds	r4, r7, #4
   d8df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8df8:	682b      	ldr	r3, [r5, #0]
   d8dfa:	7023      	strb	r3, [r4, #0]
   d8dfc:	e7de      	b.n	d8dbc <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8dfe:	9800      	ldr	r0, [sp, #0]
   d8e00:	f7fe ff00 	bl	d7c04 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8e04:	4638      	mov	r0, r7
   d8e06:	b015      	add	sp, #84	; 0x54
   d8e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8e0c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8e0c:	4b02      	ldr	r3, [pc, #8]	; (d8e18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8e0e:	4a03      	ldr	r2, [pc, #12]	; (d8e1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8e10:	601a      	str	r2, [r3, #0]
   d8e12:	2200      	movs	r2, #0
   d8e14:	605a      	str	r2, [r3, #4]

} // spark
   d8e16:	4770      	bx	lr
   d8e18:	2003e728 	.word	0x2003e728
   d8e1c:	000ddad0 	.word	0x000ddad0

000d8e20 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8e20:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8e22:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8e24:	d902      	bls.n	d8e2c <pinAvailable+0xc>
    return false;
   d8e26:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8e28:	b002      	add	sp, #8
   d8e2a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8e2c:	f1a0 030b 	sub.w	r3, r0, #11
   d8e30:	2b02      	cmp	r3, #2
   d8e32:	d81a      	bhi.n	d8e6a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8e34:	4c17      	ldr	r4, [pc, #92]	; (d8e94 <pinAvailable+0x74>)
   d8e36:	7821      	ldrb	r1, [r4, #0]
   d8e38:	f3bf 8f5b 	dmb	ish
   d8e3c:	f011 0101 	ands.w	r1, r1, #1
   d8e40:	d10b      	bne.n	d8e5a <pinAvailable+0x3a>
   d8e42:	4620      	mov	r0, r4
   d8e44:	9101      	str	r1, [sp, #4]
   d8e46:	f7fb f937 	bl	d40b8 <__cxa_guard_acquire>
   d8e4a:	9901      	ldr	r1, [sp, #4]
   d8e4c:	b128      	cbz	r0, d8e5a <pinAvailable+0x3a>
   d8e4e:	4812      	ldr	r0, [pc, #72]	; (d8e98 <pinAvailable+0x78>)
   d8e50:	f7ff f9a0 	bl	d8194 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8e54:	4620      	mov	r0, r4
   d8e56:	f7fb f934 	bl	d40c2 <__cxa_guard_release>
   d8e5a:	4b0f      	ldr	r3, [pc, #60]	; (d8e98 <pinAvailable+0x78>)
   d8e5c:	7818      	ldrb	r0, [r3, #0]
   d8e5e:	f7ff f821 	bl	d7ea4 <hal_spi_is_enabled>
   d8e62:	2800      	cmp	r0, #0
   d8e64:	d1df      	bne.n	d8e26 <pinAvailable+0x6>
  return true; // 'pin' is available
   d8e66:	2001      	movs	r0, #1
   d8e68:	e7de      	b.n	d8e28 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d8e6a:	2801      	cmp	r0, #1
   d8e6c:	d809      	bhi.n	d8e82 <pinAvailable+0x62>
   d8e6e:	f000 f899 	bl	d8fa4 <_Z19__fetch_global_Wirev>
   d8e72:	2100      	movs	r1, #0
   d8e74:	7c00      	ldrb	r0, [r0, #16]
   d8e76:	f7fe ffe5 	bl	d7e44 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d8e7a:	f080 0001 	eor.w	r0, r0, #1
   d8e7e:	b2c0      	uxtb	r0, r0
   d8e80:	e7d2      	b.n	d8e28 <pinAvailable+0x8>
   d8e82:	3809      	subs	r0, #9
   d8e84:	2801      	cmp	r0, #1
   d8e86:	d8ee      	bhi.n	d8e66 <pinAvailable+0x46>
   d8e88:	f7ff fe76 	bl	d8b78 <_Z22__fetch_global_Serial1v>
   d8e8c:	7c00      	ldrb	r0, [r0, #16]
   d8e8e:	f7fe ff81 	bl	d7d94 <hal_usart_is_enabled>
   d8e92:	e7f2      	b.n	d8e7a <pinAvailable+0x5a>
   d8e94:	2003e578 	.word	0x2003e578
   d8e98:	2003e57c 	.word	0x2003e57c

000d8e9c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8e9c:	2823      	cmp	r0, #35	; 0x23
{
   d8e9e:	b538      	push	{r3, r4, r5, lr}
   d8ea0:	4604      	mov	r4, r0
   d8ea2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8ea4:	d80a      	bhi.n	d8ebc <pinMode+0x20>
   d8ea6:	29ff      	cmp	r1, #255	; 0xff
   d8ea8:	d008      	beq.n	d8ebc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d8eaa:	f7ff ffb9 	bl	d8e20 <pinAvailable>
   d8eae:	b128      	cbz	r0, d8ebc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8eb0:	4629      	mov	r1, r5
   d8eb2:	4620      	mov	r0, r4
}
   d8eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8eb8:	f7fe bebc 	b.w	d7c34 <HAL_Pin_Mode>
}
   d8ebc:	bd38      	pop	{r3, r4, r5, pc}

000d8ebe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8ebe:	b538      	push	{r3, r4, r5, lr}
   d8ec0:	4604      	mov	r4, r0
   d8ec2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8ec4:	f7fe febe 	bl	d7c44 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8ec8:	28ff      	cmp	r0, #255	; 0xff
   d8eca:	d010      	beq.n	d8eee <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8ecc:	2806      	cmp	r0, #6
   d8ece:	d804      	bhi.n	d8eda <digitalWrite+0x1c>
   d8ed0:	234d      	movs	r3, #77	; 0x4d
   d8ed2:	fa23 f000 	lsr.w	r0, r3, r0
   d8ed6:	07c3      	lsls	r3, r0, #31
   d8ed8:	d409      	bmi.n	d8eee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8eda:	4620      	mov	r0, r4
   d8edc:	f7ff ffa0 	bl	d8e20 <pinAvailable>
   d8ee0:	b128      	cbz	r0, d8eee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8ee2:	4629      	mov	r1, r5
   d8ee4:	4620      	mov	r0, r4
}
   d8ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d8eea:	f7fe beb3 	b.w	d7c54 <HAL_GPIO_Write>
}
   d8eee:	bd38      	pop	{r3, r4, r5, pc}

000d8ef0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8ef0:	b510      	push	{r4, lr}
   d8ef2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8ef4:	f7fe fea6 	bl	d7c44 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d8ef8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d8efa:	b2db      	uxtb	r3, r3
   d8efc:	2b01      	cmp	r3, #1
   d8efe:	d908      	bls.n	d8f12 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8f00:	4620      	mov	r0, r4
   d8f02:	f7ff ff8d 	bl	d8e20 <pinAvailable>
   d8f06:	b120      	cbz	r0, d8f12 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8f08:	4620      	mov	r0, r4
}
   d8f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d8f0e:	f7fe bea9 	b.w	d7c64 <HAL_GPIO_Read>
}
   d8f12:	2000      	movs	r0, #0
   d8f14:	bd10      	pop	{r4, pc}

000d8f16 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8f16:	280d      	cmp	r0, #13
{
   d8f18:	b510      	push	{r4, lr}
   d8f1a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8f1c:	bf9c      	itt	ls
   d8f1e:	340e      	addls	r4, #14
   d8f20:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8f22:	4620      	mov	r0, r4
   d8f24:	f7ff ff7c 	bl	d8e20 <pinAvailable>
   d8f28:	b150      	cbz	r0, d8f40 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8f2a:	2103      	movs	r1, #3
   d8f2c:	4620      	mov	r0, r4
   d8f2e:	f7fe fe79 	bl	d7c24 <HAL_Validate_Pin_Function>
   d8f32:	2803      	cmp	r0, #3
   d8f34:	d104      	bne.n	d8f40 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d8f36:	4620      	mov	r0, r4
}
   d8f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d8f3c:	f7fe beaa 	b.w	d7c94 <hal_adc_read>
}
   d8f40:	2000      	movs	r0, #0
   d8f42:	bd10      	pop	{r4, pc}

000d8f44 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d8f44:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d8f46:	4c08      	ldr	r4, [pc, #32]	; (d8f68 <_Z21__fetch_global_EEPROMv+0x24>)
   d8f48:	7823      	ldrb	r3, [r4, #0]
   d8f4a:	f3bf 8f5b 	dmb	ish
   d8f4e:	07db      	lsls	r3, r3, #31
   d8f50:	d408      	bmi.n	d8f64 <_Z21__fetch_global_EEPROMv+0x20>
   d8f52:	4620      	mov	r0, r4
   d8f54:	f7fb f8b0 	bl	d40b8 <__cxa_guard_acquire>
   d8f58:	b120      	cbz	r0, d8f64 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d8f5a:	f7fe febb 	bl	d7cd4 <HAL_EEPROM_Init>
   d8f5e:	4620      	mov	r0, r4
   d8f60:	f7fb f8af 	bl	d40c2 <__cxa_guard_release>
	return eeprom;
}
   d8f64:	4801      	ldr	r0, [pc, #4]	; (d8f6c <_Z21__fetch_global_EEPROMv+0x28>)
   d8f66:	bd10      	pop	{r4, pc}
   d8f68:	2003e734 	.word	0x2003e734
   d8f6c:	2003e738 	.word	0x2003e738

000d8f70 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8f70:	4770      	bx	lr
	...

000d8f74 <_Z17acquireWireBufferv>:
{
   d8f74:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8f76:	2300      	movs	r3, #0
   d8f78:	2520      	movs	r5, #32
   d8f7a:	8043      	strh	r3, [r0, #2]
   d8f7c:	2314      	movs	r3, #20
{
   d8f7e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8f80:	8003      	strh	r3, [r0, #0]
   d8f82:	6085      	str	r5, [r0, #8]
   d8f84:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8f86:	4906      	ldr	r1, [pc, #24]	; (d8fa0 <_Z17acquireWireBufferv+0x2c>)
   d8f88:	4628      	mov	r0, r5
   d8f8a:	f000 f831 	bl	d8ff0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8f8e:	4904      	ldr	r1, [pc, #16]	; (d8fa0 <_Z17acquireWireBufferv+0x2c>)
	};
   d8f90:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8f92:	4628      	mov	r0, r5
   d8f94:	f000 f82c 	bl	d8ff0 <_ZnajRKSt9nothrow_t>
	};
   d8f98:	60e0      	str	r0, [r4, #12]
}
   d8f9a:	4620      	mov	r0, r4
   d8f9c:	bd38      	pop	{r3, r4, r5, pc}
   d8f9e:	bf00      	nop
   d8fa0:	000ddb04 	.word	0x000ddb04

000d8fa4 <_Z19__fetch_global_Wirev>:
{
   d8fa4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8fa6:	4d0e      	ldr	r5, [pc, #56]	; (d8fe0 <_Z19__fetch_global_Wirev+0x3c>)
   d8fa8:	7829      	ldrb	r1, [r5, #0]
   d8faa:	f3bf 8f5b 	dmb	ish
   d8fae:	f011 0401 	ands.w	r4, r1, #1
{
   d8fb2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8fb4:	d111      	bne.n	d8fda <_Z19__fetch_global_Wirev+0x36>
   d8fb6:	4628      	mov	r0, r5
   d8fb8:	f7fb f87e 	bl	d40b8 <__cxa_guard_acquire>
   d8fbc:	b168      	cbz	r0, d8fda <_Z19__fetch_global_Wirev+0x36>
   d8fbe:	a801      	add	r0, sp, #4
   d8fc0:	f7ff ffd8 	bl	d8f74 <_Z17acquireWireBufferv>
   d8fc4:	aa01      	add	r2, sp, #4
   d8fc6:	4621      	mov	r1, r4
   d8fc8:	4806      	ldr	r0, [pc, #24]	; (d8fe4 <_Z19__fetch_global_Wirev+0x40>)
   d8fca:	f7ff fe27 	bl	d8c1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8fce:	4628      	mov	r0, r5
   d8fd0:	f7fb f877 	bl	d40c2 <__cxa_guard_release>
   d8fd4:	4804      	ldr	r0, [pc, #16]	; (d8fe8 <_Z19__fetch_global_Wirev+0x44>)
   d8fd6:	f003 fc43 	bl	dc860 <atexit>
	return wire;
}
   d8fda:	4802      	ldr	r0, [pc, #8]	; (d8fe4 <_Z19__fetch_global_Wirev+0x40>)
   d8fdc:	b007      	add	sp, #28
   d8fde:	bd30      	pop	{r4, r5, pc}
   d8fe0:	2003e73c 	.word	0x2003e73c
   d8fe4:	2003e740 	.word	0x2003e740
   d8fe8:	000d8f71 	.word	0x000d8f71

000d8fec <_ZdlPvj>:
   d8fec:	f7fb b857 	b.w	d409e <_ZdlPv>

000d8ff0 <_ZnajRKSt9nothrow_t>:
   d8ff0:	f7fb b853 	b.w	d409a <_Znaj>

000d8ff4 <cosf>:
   d8ff4:	b500      	push	{lr}
   d8ff6:	ee10 3a10 	vmov	r3, s0
   d8ffa:	4a20      	ldr	r2, [pc, #128]	; (d907c <cosf+0x88>)
   d8ffc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d9000:	4293      	cmp	r3, r2
   d9002:	b083      	sub	sp, #12
   d9004:	dd19      	ble.n	d903a <cosf+0x46>
   d9006:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d900a:	db04      	blt.n	d9016 <cosf+0x22>
   d900c:	ee30 0a40 	vsub.f32	s0, s0, s0
   d9010:	b003      	add	sp, #12
   d9012:	f85d fb04 	ldr.w	pc, [sp], #4
   d9016:	4668      	mov	r0, sp
   d9018:	f001 fa80 	bl	da51c <__ieee754_rem_pio2f>
   d901c:	f000 0003 	and.w	r0, r0, #3
   d9020:	2801      	cmp	r0, #1
   d9022:	d011      	beq.n	d9048 <cosf+0x54>
   d9024:	2802      	cmp	r0, #2
   d9026:	d01f      	beq.n	d9068 <cosf+0x74>
   d9028:	b1b8      	cbz	r0, d905a <cosf+0x66>
   d902a:	eddd 0a01 	vldr	s1, [sp, #4]
   d902e:	ed9d 0a00 	vldr	s0, [sp]
   d9032:	2001      	movs	r0, #1
   d9034:	f001 ff74 	bl	daf20 <__kernel_sinf>
   d9038:	e7ea      	b.n	d9010 <cosf+0x1c>
   d903a:	eddf 0a11 	vldr	s1, [pc, #68]	; d9080 <cosf+0x8c>
   d903e:	f001 fbb7 	bl	da7b0 <__kernel_cosf>
   d9042:	b003      	add	sp, #12
   d9044:	f85d fb04 	ldr.w	pc, [sp], #4
   d9048:	eddd 0a01 	vldr	s1, [sp, #4]
   d904c:	ed9d 0a00 	vldr	s0, [sp]
   d9050:	f001 ff66 	bl	daf20 <__kernel_sinf>
   d9054:	eeb1 0a40 	vneg.f32	s0, s0
   d9058:	e7da      	b.n	d9010 <cosf+0x1c>
   d905a:	eddd 0a01 	vldr	s1, [sp, #4]
   d905e:	ed9d 0a00 	vldr	s0, [sp]
   d9062:	f001 fba5 	bl	da7b0 <__kernel_cosf>
   d9066:	e7d3      	b.n	d9010 <cosf+0x1c>
   d9068:	eddd 0a01 	vldr	s1, [sp, #4]
   d906c:	ed9d 0a00 	vldr	s0, [sp]
   d9070:	f001 fb9e 	bl	da7b0 <__kernel_cosf>
   d9074:	eeb1 0a40 	vneg.f32	s0, s0
   d9078:	e7ca      	b.n	d9010 <cosf+0x1c>
   d907a:	bf00      	nop
   d907c:	3f490fd8 	.word	0x3f490fd8
   d9080:	00000000 	.word	0x00000000

000d9084 <sinf>:
   d9084:	b500      	push	{lr}
   d9086:	ee10 3a10 	vmov	r3, s0
   d908a:	4a21      	ldr	r2, [pc, #132]	; (d9110 <sinf+0x8c>)
   d908c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d9090:	4293      	cmp	r3, r2
   d9092:	b083      	sub	sp, #12
   d9094:	dd1a      	ble.n	d90cc <sinf+0x48>
   d9096:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d909a:	db04      	blt.n	d90a6 <sinf+0x22>
   d909c:	ee30 0a40 	vsub.f32	s0, s0, s0
   d90a0:	b003      	add	sp, #12
   d90a2:	f85d fb04 	ldr.w	pc, [sp], #4
   d90a6:	4668      	mov	r0, sp
   d90a8:	f001 fa38 	bl	da51c <__ieee754_rem_pio2f>
   d90ac:	f000 0003 	and.w	r0, r0, #3
   d90b0:	2801      	cmp	r0, #1
   d90b2:	d013      	beq.n	d90dc <sinf+0x58>
   d90b4:	2802      	cmp	r0, #2
   d90b6:	d020      	beq.n	d90fa <sinf+0x76>
   d90b8:	b1b8      	cbz	r0, d90ea <sinf+0x66>
   d90ba:	eddd 0a01 	vldr	s1, [sp, #4]
   d90be:	ed9d 0a00 	vldr	s0, [sp]
   d90c2:	f001 fb75 	bl	da7b0 <__kernel_cosf>
   d90c6:	eeb1 0a40 	vneg.f32	s0, s0
   d90ca:	e7e9      	b.n	d90a0 <sinf+0x1c>
   d90cc:	eddf 0a11 	vldr	s1, [pc, #68]	; d9114 <sinf+0x90>
   d90d0:	2000      	movs	r0, #0
   d90d2:	f001 ff25 	bl	daf20 <__kernel_sinf>
   d90d6:	b003      	add	sp, #12
   d90d8:	f85d fb04 	ldr.w	pc, [sp], #4
   d90dc:	eddd 0a01 	vldr	s1, [sp, #4]
   d90e0:	ed9d 0a00 	vldr	s0, [sp]
   d90e4:	f001 fb64 	bl	da7b0 <__kernel_cosf>
   d90e8:	e7da      	b.n	d90a0 <sinf+0x1c>
   d90ea:	eddd 0a01 	vldr	s1, [sp, #4]
   d90ee:	ed9d 0a00 	vldr	s0, [sp]
   d90f2:	2001      	movs	r0, #1
   d90f4:	f001 ff14 	bl	daf20 <__kernel_sinf>
   d90f8:	e7d2      	b.n	d90a0 <sinf+0x1c>
   d90fa:	eddd 0a01 	vldr	s1, [sp, #4]
   d90fe:	ed9d 0a00 	vldr	s0, [sp]
   d9102:	2001      	movs	r0, #1
   d9104:	f001 ff0c 	bl	daf20 <__kernel_sinf>
   d9108:	eeb1 0a40 	vneg.f32	s0, s0
   d910c:	e7c8      	b.n	d90a0 <sinf+0x1c>
   d910e:	bf00      	nop
   d9110:	3f490fd8 	.word	0x3f490fd8
   d9114:	00000000 	.word	0x00000000

000d9118 <atan2>:
   d9118:	f000 b9ba 	b.w	d9490 <__ieee754_atan2>
   d911c:	0000      	movs	r0, r0
	...

000d9120 <pow>:
   d9120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9124:	ed2d 8b02 	vpush	{d8}
   d9128:	b08d      	sub	sp, #52	; 0x34
   d912a:	ec57 6b10 	vmov	r6, r7, d0
   d912e:	ec55 4b11 	vmov	r4, r5, d1
   d9132:	f000 faad 	bl	d9690 <__ieee754_pow>
   d9136:	4bae      	ldr	r3, [pc, #696]	; (d93f0 <pow+0x2d0>)
   d9138:	eeb0 8a40 	vmov.f32	s16, s0
   d913c:	eef0 8a60 	vmov.f32	s17, s1
   d9140:	f993 9000 	ldrsb.w	r9, [r3]
   d9144:	f1b9 3fff 	cmp.w	r9, #4294967295
   d9148:	d037      	beq.n	d91ba <pow+0x9a>
   d914a:	4622      	mov	r2, r4
   d914c:	462b      	mov	r3, r5
   d914e:	4620      	mov	r0, r4
   d9150:	4629      	mov	r1, r5
   d9152:	f003 f815 	bl	dc180 <__aeabi_dcmpun>
   d9156:	4683      	mov	fp, r0
   d9158:	bb78      	cbnz	r0, d91ba <pow+0x9a>
   d915a:	4632      	mov	r2, r6
   d915c:	463b      	mov	r3, r7
   d915e:	4630      	mov	r0, r6
   d9160:	4639      	mov	r1, r7
   d9162:	f003 f80d 	bl	dc180 <__aeabi_dcmpun>
   d9166:	4680      	mov	r8, r0
   d9168:	2800      	cmp	r0, #0
   d916a:	f040 8093 	bne.w	d9294 <pow+0x174>
   d916e:	f04f 0a00 	mov.w	sl, #0
   d9172:	f04f 0b00 	mov.w	fp, #0
   d9176:	4630      	mov	r0, r6
   d9178:	4639      	mov	r1, r7
   d917a:	4652      	mov	r2, sl
   d917c:	465b      	mov	r3, fp
   d917e:	f002 ffcd 	bl	dc11c <__aeabi_dcmpeq>
   d9182:	b318      	cbz	r0, d91cc <pow+0xac>
   d9184:	4652      	mov	r2, sl
   d9186:	465b      	mov	r3, fp
   d9188:	4620      	mov	r0, r4
   d918a:	4629      	mov	r1, r5
   d918c:	f002 ffc6 	bl	dc11c <__aeabi_dcmpeq>
   d9190:	9000      	str	r0, [sp, #0]
   d9192:	2800      	cmp	r0, #0
   d9194:	d057      	beq.n	d9246 <pow+0x126>
   d9196:	4b97      	ldr	r3, [pc, #604]	; (d93f4 <pow+0x2d4>)
   d9198:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d919c:	2201      	movs	r2, #1
   d919e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d91a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d91a6:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d91aa:	9202      	str	r2, [sp, #8]
   d91ac:	9303      	str	r3, [sp, #12]
   d91ae:	f1b9 0f00 	cmp.w	r9, #0
   d91b2:	f000 8089 	beq.w	d92c8 <pow+0x1a8>
   d91b6:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d93e0 <pow+0x2c0>
   d91ba:	eeb0 0a48 	vmov.f32	s0, s16
   d91be:	eef0 0a68 	vmov.f32	s1, s17
   d91c2:	b00d      	add	sp, #52	; 0x34
   d91c4:	ecbd 8b02 	vpop	{d8}
   d91c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d91cc:	eeb0 0a48 	vmov.f32	s0, s16
   d91d0:	eef0 0a68 	vmov.f32	s1, s17
   d91d4:	f002 f8aa 	bl	db32c <finite>
   d91d8:	4680      	mov	r8, r0
   d91da:	2800      	cmp	r0, #0
   d91dc:	f000 8082 	beq.w	d92e4 <pow+0x1c4>
   d91e0:	f04f 0800 	mov.w	r8, #0
   d91e4:	f04f 0900 	mov.w	r9, #0
   d91e8:	ec51 0b18 	vmov	r0, r1, d8
   d91ec:	4642      	mov	r2, r8
   d91ee:	464b      	mov	r3, r9
   d91f0:	f002 ff94 	bl	dc11c <__aeabi_dcmpeq>
   d91f4:	2800      	cmp	r0, #0
   d91f6:	d0e0      	beq.n	d91ba <pow+0x9a>
   d91f8:	ec47 6b10 	vmov	d0, r6, r7
   d91fc:	f002 f896 	bl	db32c <finite>
   d9200:	2800      	cmp	r0, #0
   d9202:	d0da      	beq.n	d91ba <pow+0x9a>
   d9204:	ec45 4b10 	vmov	d0, r4, r5
   d9208:	f002 f890 	bl	db32c <finite>
   d920c:	2800      	cmp	r0, #0
   d920e:	d0d4      	beq.n	d91ba <pow+0x9a>
   d9210:	4b77      	ldr	r3, [pc, #476]	; (d93f0 <pow+0x2d0>)
   d9212:	4a78      	ldr	r2, [pc, #480]	; (d93f4 <pow+0x2d4>)
   d9214:	f993 3000 	ldrsb.w	r3, [r3]
   d9218:	9203      	str	r2, [sp, #12]
   d921a:	2104      	movs	r1, #4
   d921c:	2200      	movs	r2, #0
   d921e:	2b02      	cmp	r3, #2
   d9220:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9224:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9228:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d922c:	9102      	str	r1, [sp, #8]
   d922e:	920a      	str	r2, [sp, #40]	; 0x28
   d9230:	d004      	beq.n	d923c <pow+0x11c>
   d9232:	a802      	add	r0, sp, #8
   d9234:	f002 f886 	bl	db344 <matherr>
   d9238:	2800      	cmp	r0, #0
   d923a:	d14a      	bne.n	d92d2 <pow+0x1b2>
   d923c:	f7fe ff56 	bl	d80ec <__errno>
   d9240:	2322      	movs	r3, #34	; 0x22
   d9242:	6003      	str	r3, [r0, #0]
   d9244:	e045      	b.n	d92d2 <pow+0x1b2>
   d9246:	ec45 4b10 	vmov	d0, r4, r5
   d924a:	f002 f86f 	bl	db32c <finite>
   d924e:	2800      	cmp	r0, #0
   d9250:	d0b3      	beq.n	d91ba <pow+0x9a>
   d9252:	4652      	mov	r2, sl
   d9254:	465b      	mov	r3, fp
   d9256:	4620      	mov	r0, r4
   d9258:	4629      	mov	r1, r5
   d925a:	f002 ff69 	bl	dc130 <__aeabi_dcmplt>
   d925e:	2800      	cmp	r0, #0
   d9260:	d0ab      	beq.n	d91ba <pow+0x9a>
   d9262:	4b63      	ldr	r3, [pc, #396]	; (d93f0 <pow+0x2d0>)
   d9264:	9900      	ldr	r1, [sp, #0]
   d9266:	4a63      	ldr	r2, [pc, #396]	; (d93f4 <pow+0x2d4>)
   d9268:	f993 3000 	ldrsb.w	r3, [r3]
   d926c:	910a      	str	r1, [sp, #40]	; 0x28
   d926e:	2101      	movs	r1, #1
   d9270:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9274:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9278:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d927c:	2b00      	cmp	r3, #0
   d927e:	d16f      	bne.n	d9360 <pow+0x240>
   d9280:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d9284:	a802      	add	r0, sp, #8
   d9286:	f002 f85d 	bl	db344 <matherr>
   d928a:	2800      	cmp	r0, #0
   d928c:	d06e      	beq.n	d936c <pow+0x24c>
   d928e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9290:	b32b      	cbz	r3, d92de <pow+0x1be>
   d9292:	e020      	b.n	d92d6 <pow+0x1b6>
   d9294:	2200      	movs	r2, #0
   d9296:	2300      	movs	r3, #0
   d9298:	4620      	mov	r0, r4
   d929a:	4629      	mov	r1, r5
   d929c:	f002 ff3e 	bl	dc11c <__aeabi_dcmpeq>
   d92a0:	2800      	cmp	r0, #0
   d92a2:	d08a      	beq.n	d91ba <pow+0x9a>
   d92a4:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d93e0 <pow+0x2c0>
   d92a8:	4b52      	ldr	r3, [pc, #328]	; (d93f4 <pow+0x2d4>)
   d92aa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d92ae:	2201      	movs	r2, #1
   d92b0:	f1b9 0f02 	cmp.w	r9, #2
   d92b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d92b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d92bc:	ed8d 8b08 	vstr	d8, [sp, #32]
   d92c0:	9202      	str	r2, [sp, #8]
   d92c2:	9303      	str	r3, [sp, #12]
   d92c4:	f43f af79 	beq.w	d91ba <pow+0x9a>
   d92c8:	a802      	add	r0, sp, #8
   d92ca:	f002 f83b 	bl	db344 <matherr>
   d92ce:	2800      	cmp	r0, #0
   d92d0:	d051      	beq.n	d9376 <pow+0x256>
   d92d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d92d4:	b11b      	cbz	r3, d92de <pow+0x1be>
   d92d6:	f7fe ff09 	bl	d80ec <__errno>
   d92da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d92dc:	6003      	str	r3, [r0, #0]
   d92de:	ed9d 8b08 	vldr	d8, [sp, #32]
   d92e2:	e76a      	b.n	d91ba <pow+0x9a>
   d92e4:	ec47 6b10 	vmov	d0, r6, r7
   d92e8:	f002 f820 	bl	db32c <finite>
   d92ec:	2800      	cmp	r0, #0
   d92ee:	f43f af77 	beq.w	d91e0 <pow+0xc0>
   d92f2:	ec45 4b10 	vmov	d0, r4, r5
   d92f6:	f002 f819 	bl	db32c <finite>
   d92fa:	2800      	cmp	r0, #0
   d92fc:	f43f af70 	beq.w	d91e0 <pow+0xc0>
   d9300:	ec53 2b18 	vmov	r2, r3, d8
   d9304:	ee18 0a10 	vmov	r0, s16
   d9308:	4619      	mov	r1, r3
   d930a:	f002 ff39 	bl	dc180 <__aeabi_dcmpun>
   d930e:	4b38      	ldr	r3, [pc, #224]	; (d93f0 <pow+0x2d0>)
   d9310:	2800      	cmp	r0, #0
   d9312:	f040 8096 	bne.w	d9442 <pow+0x322>
   d9316:	f993 8000 	ldrsb.w	r8, [r3]
   d931a:	900a      	str	r0, [sp, #40]	; 0x28
   d931c:	2303      	movs	r3, #3
   d931e:	9302      	str	r3, [sp, #8]
   d9320:	4b34      	ldr	r3, [pc, #208]	; (d93f4 <pow+0x2d4>)
   d9322:	9303      	str	r3, [sp, #12]
   d9324:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9328:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d932c:	f1b8 0f00 	cmp.w	r8, #0
   d9330:	d126      	bne.n	d9380 <pow+0x260>
   d9332:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d9404 <pow+0x2e4>
   d9336:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d933a:	4652      	mov	r2, sl
   d933c:	465b      	mov	r3, fp
   d933e:	4630      	mov	r0, r6
   d9340:	4639      	mov	r1, r7
   d9342:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d9346:	f002 fef3 	bl	dc130 <__aeabi_dcmplt>
   d934a:	bb48      	cbnz	r0, d93a0 <pow+0x280>
   d934c:	a802      	add	r0, sp, #8
   d934e:	f001 fff9 	bl	db344 <matherr>
   d9352:	2800      	cmp	r0, #0
   d9354:	d19b      	bne.n	d928e <pow+0x16e>
   d9356:	f7fe fec9 	bl	d80ec <__errno>
   d935a:	2322      	movs	r3, #34	; 0x22
   d935c:	6003      	str	r3, [r0, #0]
   d935e:	e796      	b.n	d928e <pow+0x16e>
   d9360:	4925      	ldr	r1, [pc, #148]	; (d93f8 <pow+0x2d8>)
   d9362:	2000      	movs	r0, #0
   d9364:	2b02      	cmp	r3, #2
   d9366:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d936a:	d18b      	bne.n	d9284 <pow+0x164>
   d936c:	f7fe febe 	bl	d80ec <__errno>
   d9370:	2321      	movs	r3, #33	; 0x21
   d9372:	6003      	str	r3, [r0, #0]
   d9374:	e78b      	b.n	d928e <pow+0x16e>
   d9376:	f7fe feb9 	bl	d80ec <__errno>
   d937a:	2321      	movs	r3, #33	; 0x21
   d937c:	6003      	str	r3, [r0, #0]
   d937e:	e7a8      	b.n	d92d2 <pow+0x1b2>
   d9380:	ed9f 7b19 	vldr	d7, [pc, #100]	; d93e8 <pow+0x2c8>
   d9384:	4652      	mov	r2, sl
   d9386:	465b      	mov	r3, fp
   d9388:	4630      	mov	r0, r6
   d938a:	4639      	mov	r1, r7
   d938c:	ed8d 7b08 	vstr	d7, [sp, #32]
   d9390:	f002 fece 	bl	dc130 <__aeabi_dcmplt>
   d9394:	2800      	cmp	r0, #0
   d9396:	d137      	bne.n	d9408 <pow+0x2e8>
   d9398:	f1b8 0f02 	cmp.w	r8, #2
   d939c:	d0db      	beq.n	d9356 <pow+0x236>
   d939e:	e7d5      	b.n	d934c <pow+0x22c>
   d93a0:	4b16      	ldr	r3, [pc, #88]	; (d93fc <pow+0x2dc>)
   d93a2:	2200      	movs	r2, #0
   d93a4:	4620      	mov	r0, r4
   d93a6:	4629      	mov	r1, r5
   d93a8:	f002 fc50 	bl	dbc4c <__aeabi_dmul>
   d93ac:	4602      	mov	r2, r0
   d93ae:	460b      	mov	r3, r1
   d93b0:	ec43 2b10 	vmov	d0, r2, r3
   d93b4:	e9cd 2300 	strd	r2, r3, [sp]
   d93b8:	f001 ffce 	bl	db358 <rint>
   d93bc:	e9dd 2300 	ldrd	r2, r3, [sp]
   d93c0:	ec51 0b10 	vmov	r0, r1, d0
   d93c4:	f002 feaa 	bl	dc11c <__aeabi_dcmpeq>
   d93c8:	2800      	cmp	r0, #0
   d93ca:	d136      	bne.n	d943a <pow+0x31a>
   d93cc:	4b0c      	ldr	r3, [pc, #48]	; (d9400 <pow+0x2e0>)
   d93ce:	4908      	ldr	r1, [pc, #32]	; (d93f0 <pow+0x2d0>)
   d93d0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d93d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d93d8:	f991 8000 	ldrsb.w	r8, [r1]
   d93dc:	e7dc      	b.n	d9398 <pow+0x278>
   d93de:	bf00      	nop
   d93e0:	00000000 	.word	0x00000000
   d93e4:	3ff00000 	.word	0x3ff00000
   d93e8:	00000000 	.word	0x00000000
   d93ec:	7ff00000 	.word	0x7ff00000
   d93f0:	2003e3e4 	.word	0x2003e3e4
   d93f4:	000ddb08 	.word	0x000ddb08
   d93f8:	fff00000 	.word	0xfff00000
   d93fc:	3fe00000 	.word	0x3fe00000
   d9400:	c7efffff 	.word	0xc7efffff
   d9404:	47efffff 	.word	0x47efffff
   d9408:	4b1c      	ldr	r3, [pc, #112]	; (d947c <pow+0x35c>)
   d940a:	2200      	movs	r2, #0
   d940c:	4620      	mov	r0, r4
   d940e:	4629      	mov	r1, r5
   d9410:	f002 fc1c 	bl	dbc4c <__aeabi_dmul>
   d9414:	4602      	mov	r2, r0
   d9416:	460b      	mov	r3, r1
   d9418:	ec43 2b10 	vmov	d0, r2, r3
   d941c:	e9cd 2300 	strd	r2, r3, [sp]
   d9420:	f001 ff9a 	bl	db358 <rint>
   d9424:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9428:	ec51 0b10 	vmov	r0, r1, d0
   d942c:	f002 fe76 	bl	dc11c <__aeabi_dcmpeq>
   d9430:	b918      	cbnz	r0, d943a <pow+0x31a>
   d9432:	4b13      	ldr	r3, [pc, #76]	; (d9480 <pow+0x360>)
   d9434:	2200      	movs	r2, #0
   d9436:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d943a:	4b12      	ldr	r3, [pc, #72]	; (d9484 <pow+0x364>)
   d943c:	f993 8000 	ldrsb.w	r8, [r3]
   d9440:	e7aa      	b.n	d9398 <pow+0x278>
   d9442:	f993 9000 	ldrsb.w	r9, [r3]
   d9446:	4b10      	ldr	r3, [pc, #64]	; (d9488 <pow+0x368>)
   d9448:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d944c:	2201      	movs	r2, #1
   d944e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9452:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9456:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d945a:	f1b9 0f00 	cmp.w	r9, #0
   d945e:	f43f af0f 	beq.w	d9280 <pow+0x160>
   d9462:	4652      	mov	r2, sl
   d9464:	465b      	mov	r3, fp
   d9466:	4650      	mov	r0, sl
   d9468:	4659      	mov	r1, fp
   d946a:	f002 fd19 	bl	dbea0 <__aeabi_ddiv>
   d946e:	f1b9 0f02 	cmp.w	r9, #2
   d9472:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d9476:	f43f af79 	beq.w	d936c <pow+0x24c>
   d947a:	e703      	b.n	d9284 <pow+0x164>
   d947c:	3fe00000 	.word	0x3fe00000
   d9480:	fff00000 	.word	0xfff00000
   d9484:	2003e3e4 	.word	0x2003e3e4
   d9488:	000ddb08 	.word	0x000ddb08

000d948c <atan2f>:
   d948c:	f000 bf9e 	b.w	da3cc <__ieee754_atan2f>

000d9490 <__ieee754_atan2>:
   d9490:	ec51 0b11 	vmov	r0, r1, d1
   d9494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9498:	4243      	negs	r3, r0
   d949a:	4e79      	ldr	r6, [pc, #484]	; (d9680 <__ieee754_atan2+0x1f0>)
   d949c:	4303      	orrs	r3, r0
   d949e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   d94a2:	ea4c 73d3 	orr.w	r3, ip, r3, lsr #31
   d94a6:	42b3      	cmp	r3, r6
   d94a8:	ec55 4b10 	vmov	r4, r5, d0
   d94ac:	b082      	sub	sp, #8
   d94ae:	d847      	bhi.n	d9540 <__ieee754_atan2+0xb0>
   d94b0:	4263      	negs	r3, r4
   d94b2:	4323      	orrs	r3, r4
   d94b4:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   d94b8:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   d94bc:	42b3      	cmp	r3, r6
   d94be:	ee10 ea10 	vmov	lr, s0
   d94c2:	46a9      	mov	r9, r5
   d94c4:	d83c      	bhi.n	d9540 <__ieee754_atan2+0xb0>
   d94c6:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   d94ca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d94ce:	4303      	orrs	r3, r0
   d94d0:	d04c      	beq.n	d956c <__ieee754_atan2+0xdc>
   d94d2:	ea4f 78a1 	mov.w	r8, r1, asr #30
   d94d6:	f008 0802 	and.w	r8, r8, #2
   d94da:	ea5a 0304 	orrs.w	r3, sl, r4
   d94de:	ea48 78d5 	orr.w	r8, r8, r5, lsr #31
   d94e2:	d038      	beq.n	d9556 <__ieee754_atan2+0xc6>
   d94e4:	ea5c 0300 	orrs.w	r3, ip, r0
   d94e8:	d048      	beq.n	d957c <__ieee754_atan2+0xec>
   d94ea:	45b4      	cmp	ip, r6
   d94ec:	d05d      	beq.n	d95aa <__ieee754_atan2+0x11a>
   d94ee:	45b2      	cmp	sl, r6
   d94f0:	d044      	beq.n	d957c <__ieee754_atan2+0xec>
   d94f2:	ebaa 0c0c 	sub.w	ip, sl, ip
   d94f6:	f1bc 7f74 	cmp.w	ip, #63963136	; 0x3d00000
   d94fa:	ea4f 532c 	mov.w	r3, ip, asr #20
   d94fe:	da4f      	bge.n	d95a0 <__ieee754_atan2+0x110>
   d9500:	2900      	cmp	r1, #0
   d9502:	da61      	bge.n	d95c8 <__ieee754_atan2+0x138>
   d9504:	333c      	adds	r3, #60	; 0x3c
   d9506:	da5f      	bge.n	d95c8 <__ieee754_atan2+0x138>
   d9508:	ed9f 7b4f 	vldr	d7, [pc, #316]	; d9648 <__ieee754_atan2+0x1b8>
   d950c:	ed8d 7b00 	vstr	d7, [sp]
   d9510:	f1b8 0f01 	cmp.w	r8, #1
   d9514:	d078      	beq.n	d9608 <__ieee754_atan2+0x178>
   d9516:	f1b8 0f02 	cmp.w	r8, #2
   d951a:	d064      	beq.n	d95e6 <__ieee754_atan2+0x156>
   d951c:	f1b8 0f00 	cmp.w	r8, #0
   d9520:	d014      	beq.n	d954c <__ieee754_atan2+0xbc>
   d9522:	a34b      	add	r3, pc, #300	; (adr r3, d9650 <__ieee754_atan2+0x1c0>)
   d9524:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9528:	e9dd 0100 	ldrd	r0, r1, [sp]
   d952c:	f002 f9d6 	bl	db8dc <__aeabi_dsub>
   d9530:	a349      	add	r3, pc, #292	; (adr r3, d9658 <__ieee754_atan2+0x1c8>)
   d9532:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9536:	f002 f9d1 	bl	db8dc <__aeabi_dsub>
   d953a:	e9cd 0100 	strd	r0, r1, [sp]
   d953e:	e005      	b.n	d954c <__ieee754_atan2+0xbc>
   d9540:	4622      	mov	r2, r4
   d9542:	462b      	mov	r3, r5
   d9544:	f002 f9cc 	bl	db8e0 <__adddf3>
   d9548:	e9cd 0100 	strd	r0, r1, [sp]
   d954c:	ed9d 0b00 	vldr	d0, [sp]
   d9550:	b002      	add	sp, #8
   d9552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9556:	f1b8 0f02 	cmp.w	r8, #2
   d955a:	d017      	beq.n	d958c <__ieee754_atan2+0xfc>
   d955c:	f1b8 0f03 	cmp.w	r8, #3
   d9560:	d109      	bne.n	d9576 <__ieee754_atan2+0xe6>
   d9562:	ed9f 7b3f 	vldr	d7, [pc, #252]	; d9660 <__ieee754_atan2+0x1d0>
   d9566:	ed8d 7b00 	vstr	d7, [sp]
   d956a:	e7ef      	b.n	d954c <__ieee754_atan2+0xbc>
   d956c:	b002      	add	sp, #8
   d956e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9572:	f001 bd1d 	b.w	dafb0 <atan>
   d9576:	ed8d 0b00 	vstr	d0, [sp]
   d957a:	e7e7      	b.n	d954c <__ieee754_atan2+0xbc>
   d957c:	f1b9 0f00 	cmp.w	r9, #0
   d9580:	db09      	blt.n	d9596 <__ieee754_atan2+0x106>
   d9582:	ed9f 7b39 	vldr	d7, [pc, #228]	; d9668 <__ieee754_atan2+0x1d8>
   d9586:	ed8d 7b00 	vstr	d7, [sp]
   d958a:	e7df      	b.n	d954c <__ieee754_atan2+0xbc>
   d958c:	ed9f 7b32 	vldr	d7, [pc, #200]	; d9658 <__ieee754_atan2+0x1c8>
   d9590:	ed8d 7b00 	vstr	d7, [sp]
   d9594:	e7da      	b.n	d954c <__ieee754_atan2+0xbc>
   d9596:	ed9f 7b36 	vldr	d7, [pc, #216]	; d9670 <__ieee754_atan2+0x1e0>
   d959a:	ed8d 7b00 	vstr	d7, [sp]
   d959e:	e7d5      	b.n	d954c <__ieee754_atan2+0xbc>
   d95a0:	ed9f 7b31 	vldr	d7, [pc, #196]	; d9668 <__ieee754_atan2+0x1d8>
   d95a4:	ed8d 7b00 	vstr	d7, [sp]
   d95a8:	e7b2      	b.n	d9510 <__ieee754_atan2+0x80>
   d95aa:	45e2      	cmp	sl, ip
   d95ac:	f108 38ff 	add.w	r8, r8, #4294967295
   d95b0:	d032      	beq.n	d9618 <__ieee754_atan2+0x188>
   d95b2:	f1b8 0f02 	cmp.w	r8, #2
   d95b6:	d83a      	bhi.n	d962e <__ieee754_atan2+0x19e>
   d95b8:	4b32      	ldr	r3, [pc, #200]	; (d9684 <__ieee754_atan2+0x1f4>)
   d95ba:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   d95be:	ed98 7b00 	vldr	d7, [r8]
   d95c2:	ed8d 7b00 	vstr	d7, [sp]
   d95c6:	e7c1      	b.n	d954c <__ieee754_atan2+0xbc>
   d95c8:	4602      	mov	r2, r0
   d95ca:	460b      	mov	r3, r1
   d95cc:	4620      	mov	r0, r4
   d95ce:	4629      	mov	r1, r5
   d95d0:	f002 fc66 	bl	dbea0 <__aeabi_ddiv>
   d95d4:	ec41 0b10 	vmov	d0, r0, r1
   d95d8:	f001 fe9e 	bl	db318 <fabs>
   d95dc:	f001 fce8 	bl	dafb0 <atan>
   d95e0:	ed8d 0b00 	vstr	d0, [sp]
   d95e4:	e794      	b.n	d9510 <__ieee754_atan2+0x80>
   d95e6:	a31a      	add	r3, pc, #104	; (adr r3, d9650 <__ieee754_atan2+0x1c0>)
   d95e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d95ec:	e9dd 0100 	ldrd	r0, r1, [sp]
   d95f0:	f002 f974 	bl	db8dc <__aeabi_dsub>
   d95f4:	4602      	mov	r2, r0
   d95f6:	460b      	mov	r3, r1
   d95f8:	a117      	add	r1, pc, #92	; (adr r1, d9658 <__ieee754_atan2+0x1c8>)
   d95fa:	e9d1 0100 	ldrd	r0, r1, [r1]
   d95fe:	f002 f96d 	bl	db8dc <__aeabi_dsub>
   d9602:	e9cd 0100 	strd	r0, r1, [sp]
   d9606:	e7a1      	b.n	d954c <__ieee754_atan2+0xbc>
   d9608:	e9dd 2300 	ldrd	r2, r3, [sp]
   d960c:	9901      	ldr	r1, [sp, #4]
   d960e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9612:	e9cd 2300 	strd	r2, r3, [sp]
   d9616:	e799      	b.n	d954c <__ieee754_atan2+0xbc>
   d9618:	f1b8 0f02 	cmp.w	r8, #2
   d961c:	d80c      	bhi.n	d9638 <__ieee754_atan2+0x1a8>
   d961e:	4b1a      	ldr	r3, [pc, #104]	; (d9688 <__ieee754_atan2+0x1f8>)
   d9620:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   d9624:	ed98 7b00 	vldr	d7, [r8]
   d9628:	ed8d 7b00 	vstr	d7, [sp]
   d962c:	e78e      	b.n	d954c <__ieee754_atan2+0xbc>
   d962e:	ed9f 7b06 	vldr	d7, [pc, #24]	; d9648 <__ieee754_atan2+0x1b8>
   d9632:	ed8d 7b00 	vstr	d7, [sp]
   d9636:	e789      	b.n	d954c <__ieee754_atan2+0xbc>
   d9638:	ed9f 7b0f 	vldr	d7, [pc, #60]	; d9678 <__ieee754_atan2+0x1e8>
   d963c:	ed8d 7b00 	vstr	d7, [sp]
   d9640:	e784      	b.n	d954c <__ieee754_atan2+0xbc>
   d9642:	bf00      	nop
   d9644:	f3af 8000 	nop.w
	...
   d9650:	33145c07 	.word	0x33145c07
   d9654:	3ca1a626 	.word	0x3ca1a626
   d9658:	54442d18 	.word	0x54442d18
   d965c:	400921fb 	.word	0x400921fb
   d9660:	54442d18 	.word	0x54442d18
   d9664:	c00921fb 	.word	0xc00921fb
   d9668:	54442d18 	.word	0x54442d18
   d966c:	3ff921fb 	.word	0x3ff921fb
   d9670:	54442d18 	.word	0x54442d18
   d9674:	bff921fb 	.word	0xbff921fb
   d9678:	54442d18 	.word	0x54442d18
   d967c:	3fe921fb 	.word	0x3fe921fb
   d9680:	7ff00000 	.word	0x7ff00000
   d9684:	000ddb28 	.word	0x000ddb28
   d9688:	000ddb10 	.word	0x000ddb10
   d968c:	00000000 	.word	0x00000000

000d9690 <__ieee754_pow>:
   d9690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9694:	ec57 6b11 	vmov	r6, r7, d1
   d9698:	ed2d 8b0a 	vpush	{d8-d12}
   d969c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d96a0:	ea5a 0206 	orrs.w	r2, sl, r6
   d96a4:	b089      	sub	sp, #36	; 0x24
   d96a6:	d03d      	beq.n	d9724 <__ieee754_pow+0x94>
   d96a8:	ec55 4b10 	vmov	r4, r5, d0
   d96ac:	4976      	ldr	r1, [pc, #472]	; (d9888 <__ieee754_pow+0x1f8>)
   d96ae:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d96b2:	4588      	cmp	r8, r1
   d96b4:	ee10 2a10 	vmov	r2, s0
   d96b8:	46a9      	mov	r9, r5
   d96ba:	dc2c      	bgt.n	d9716 <__ieee754_pow+0x86>
   d96bc:	ee11 3a10 	vmov	r3, s2
   d96c0:	46bb      	mov	fp, r7
   d96c2:	d03a      	beq.n	d973a <__ieee754_pow+0xaa>
   d96c4:	458a      	cmp	sl, r1
   d96c6:	dc26      	bgt.n	d9716 <__ieee754_pow+0x86>
   d96c8:	496f      	ldr	r1, [pc, #444]	; (d9888 <__ieee754_pow+0x1f8>)
   d96ca:	458a      	cmp	sl, r1
   d96cc:	d021      	beq.n	d9712 <__ieee754_pow+0x82>
   d96ce:	f1b9 0f00 	cmp.w	r9, #0
   d96d2:	db3d      	blt.n	d9750 <__ieee754_pow+0xc0>
   d96d4:	2100      	movs	r1, #0
   d96d6:	9103      	str	r1, [sp, #12]
   d96d8:	2b00      	cmp	r3, #0
   d96da:	d155      	bne.n	d9788 <__ieee754_pow+0xf8>
   d96dc:	4b6a      	ldr	r3, [pc, #424]	; (d9888 <__ieee754_pow+0x1f8>)
   d96de:	459a      	cmp	sl, r3
   d96e0:	f000 80a8 	beq.w	d9834 <__ieee754_pow+0x1a4>
   d96e4:	4b69      	ldr	r3, [pc, #420]	; (d988c <__ieee754_pow+0x1fc>)
   d96e6:	459a      	cmp	sl, r3
   d96e8:	f000 80b6 	beq.w	d9858 <__ieee754_pow+0x1c8>
   d96ec:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d96f0:	f000 8501 	beq.w	da0f6 <__ieee754_pow+0xa66>
   d96f4:	4b66      	ldr	r3, [pc, #408]	; (d9890 <__ieee754_pow+0x200>)
   d96f6:	459b      	cmp	fp, r3
   d96f8:	d146      	bne.n	d9788 <__ieee754_pow+0xf8>
   d96fa:	f1b9 0f00 	cmp.w	r9, #0
   d96fe:	db43      	blt.n	d9788 <__ieee754_pow+0xf8>
   d9700:	ec45 4b10 	vmov	d0, r4, r5
   d9704:	b009      	add	sp, #36	; 0x24
   d9706:	ecbd 8b0a 	vpop	{d8-d12}
   d970a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d970e:	f000 bd99 	b.w	da244 <__ieee754_sqrt>
   d9712:	2b00      	cmp	r3, #0
   d9714:	d0db      	beq.n	d96ce <__ieee754_pow+0x3e>
   d9716:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d971a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d971e:	ea58 0302 	orrs.w	r3, r8, r2
   d9722:	d10d      	bne.n	d9740 <__ieee754_pow+0xb0>
   d9724:	ed9f 7b54 	vldr	d7, [pc, #336]	; d9878 <__ieee754_pow+0x1e8>
   d9728:	ed8d 7b00 	vstr	d7, [sp]
   d972c:	ed9d 0b00 	vldr	d0, [sp]
   d9730:	b009      	add	sp, #36	; 0x24
   d9732:	ecbd 8b0a 	vpop	{d8-d12}
   d9736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d973a:	b90c      	cbnz	r4, d9740 <__ieee754_pow+0xb0>
   d973c:	45c2      	cmp	sl, r8
   d973e:	ddc3      	ble.n	d96c8 <__ieee754_pow+0x38>
   d9740:	4854      	ldr	r0, [pc, #336]	; (d9894 <__ieee754_pow+0x204>)
   d9742:	b009      	add	sp, #36	; 0x24
   d9744:	ecbd 8b0a 	vpop	{d8-d12}
   d9748:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d974c:	f001 bdfc 	b.w	db348 <nan>
   d9750:	4951      	ldr	r1, [pc, #324]	; (d9898 <__ieee754_pow+0x208>)
   d9752:	458a      	cmp	sl, r1
   d9754:	f300 8087 	bgt.w	d9866 <__ieee754_pow+0x1d6>
   d9758:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d975c:	458a      	cmp	sl, r1
   d975e:	dd0f      	ble.n	d9780 <__ieee754_pow+0xf0>
   d9760:	ea4f 512a 	mov.w	r1, sl, asr #20
   d9764:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d9768:	2914      	cmp	r1, #20
   d976a:	f340 84ce 	ble.w	da10a <__ieee754_pow+0xa7a>
   d976e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d9772:	fa23 f001 	lsr.w	r0, r3, r1
   d9776:	fa00 f101 	lsl.w	r1, r0, r1
   d977a:	4299      	cmp	r1, r3
   d977c:	f000 8520 	beq.w	da1c0 <__ieee754_pow+0xb30>
   d9780:	2100      	movs	r1, #0
   d9782:	9103      	str	r1, [sp, #12]
   d9784:	2b00      	cmp	r3, #0
   d9786:	d0ad      	beq.n	d96e4 <__ieee754_pow+0x54>
   d9788:	ec45 4b10 	vmov	d0, r4, r5
   d978c:	9206      	str	r2, [sp, #24]
   d978e:	f001 fdc3 	bl	db318 <fabs>
   d9792:	9a06      	ldr	r2, [sp, #24]
   d9794:	ed8d 0b00 	vstr	d0, [sp]
   d9798:	bb5a      	cbnz	r2, d97f2 <__ieee754_pow+0x162>
   d979a:	f1b8 0f00 	cmp.w	r8, #0
   d979e:	d004      	beq.n	d97aa <__ieee754_pow+0x11a>
   d97a0:	4b3a      	ldr	r3, [pc, #232]	; (d988c <__ieee754_pow+0x1fc>)
   d97a2:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d97a6:	429a      	cmp	r2, r3
   d97a8:	d123      	bne.n	d97f2 <__ieee754_pow+0x162>
   d97aa:	f1bb 0f00 	cmp.w	fp, #0
   d97ae:	da07      	bge.n	d97c0 <__ieee754_pow+0x130>
   d97b0:	e9dd 2300 	ldrd	r2, r3, [sp]
   d97b4:	4935      	ldr	r1, [pc, #212]	; (d988c <__ieee754_pow+0x1fc>)
   d97b6:	2000      	movs	r0, #0
   d97b8:	f002 fb72 	bl	dbea0 <__aeabi_ddiv>
   d97bc:	e9cd 0100 	strd	r0, r1, [sp]
   d97c0:	f1b9 0f00 	cmp.w	r9, #0
   d97c4:	dab2      	bge.n	d972c <__ieee754_pow+0x9c>
   d97c6:	9b03      	ldr	r3, [sp, #12]
   d97c8:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d97cc:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d97d0:	ea58 0303 	orrs.w	r3, r8, r3
   d97d4:	f040 84be 	bne.w	da154 <__ieee754_pow+0xac4>
   d97d8:	e9dd 2300 	ldrd	r2, r3, [sp]
   d97dc:	4610      	mov	r0, r2
   d97de:	4619      	mov	r1, r3
   d97e0:	f002 f87c 	bl	db8dc <__aeabi_dsub>
   d97e4:	4602      	mov	r2, r0
   d97e6:	460b      	mov	r3, r1
   d97e8:	f002 fb5a 	bl	dbea0 <__aeabi_ddiv>
   d97ec:	e9cd 0100 	strd	r0, r1, [sp]
   d97f0:	e79c      	b.n	d972c <__ieee754_pow+0x9c>
   d97f2:	9a03      	ldr	r2, [sp, #12]
   d97f4:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d97f8:	3b01      	subs	r3, #1
   d97fa:	9306      	str	r3, [sp, #24]
   d97fc:	4313      	orrs	r3, r2
   d97fe:	d035      	beq.n	d986c <__ieee754_pow+0x1dc>
   d9800:	4b26      	ldr	r3, [pc, #152]	; (d989c <__ieee754_pow+0x20c>)
   d9802:	459a      	cmp	sl, r3
   d9804:	dd4e      	ble.n	d98a4 <__ieee754_pow+0x214>
   d9806:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d980a:	459a      	cmp	sl, r3
   d980c:	4b24      	ldr	r3, [pc, #144]	; (d98a0 <__ieee754_pow+0x210>)
   d980e:	f340 83ed 	ble.w	d9fec <__ieee754_pow+0x95c>
   d9812:	4598      	cmp	r8, r3
   d9814:	f340 836b 	ble.w	d9eee <__ieee754_pow+0x85e>
   d9818:	f1bb 0f00 	cmp.w	fp, #0
   d981c:	f340 836b 	ble.w	d9ef6 <__ieee754_pow+0x866>
   d9820:	a317      	add	r3, pc, #92	; (adr r3, d9880 <__ieee754_pow+0x1f0>)
   d9822:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9826:	4610      	mov	r0, r2
   d9828:	4619      	mov	r1, r3
   d982a:	f002 fa0f 	bl	dbc4c <__aeabi_dmul>
   d982e:	e9cd 0100 	strd	r0, r1, [sp]
   d9832:	e77b      	b.n	d972c <__ieee754_pow+0x9c>
   d9834:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d9838:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d983c:	4313      	orrs	r3, r2
   d983e:	f43f af71 	beq.w	d9724 <__ieee754_pow+0x94>
   d9842:	4b17      	ldr	r3, [pc, #92]	; (d98a0 <__ieee754_pow+0x210>)
   d9844:	4598      	cmp	r8, r3
   d9846:	f340 8388 	ble.w	d9f5a <__ieee754_pow+0x8ca>
   d984a:	f1bb 0f00 	cmp.w	fp, #0
   d984e:	f2c0 8352 	blt.w	d9ef6 <__ieee754_pow+0x866>
   d9852:	e9cd 6700 	strd	r6, r7, [sp]
   d9856:	e769      	b.n	d972c <__ieee754_pow+0x9c>
   d9858:	f1bb 0f00 	cmp.w	fp, #0
   d985c:	f2c0 8441 	blt.w	da0e2 <__ieee754_pow+0xa52>
   d9860:	e9cd 4500 	strd	r4, r5, [sp]
   d9864:	e762      	b.n	d972c <__ieee754_pow+0x9c>
   d9866:	2102      	movs	r1, #2
   d9868:	9103      	str	r1, [sp, #12]
   d986a:	e735      	b.n	d96d8 <__ieee754_pow+0x48>
   d986c:	4622      	mov	r2, r4
   d986e:	462b      	mov	r3, r5
   d9870:	e7b4      	b.n	d97dc <__ieee754_pow+0x14c>
   d9872:	bf00      	nop
   d9874:	f3af 8000 	nop.w
   d9878:	00000000 	.word	0x00000000
   d987c:	3ff00000 	.word	0x3ff00000
   d9880:	8800759c 	.word	0x8800759c
   d9884:	7e37e43c 	.word	0x7e37e43c
   d9888:	7ff00000 	.word	0x7ff00000
   d988c:	3ff00000 	.word	0x3ff00000
   d9890:	3fe00000 	.word	0x3fe00000
   d9894:	000ddb40 	.word	0x000ddb40
   d9898:	433fffff 	.word	0x433fffff
   d989c:	41e00000 	.word	0x41e00000
   d98a0:	3fefffff 	.word	0x3fefffff
   d98a4:	4be4      	ldr	r3, [pc, #912]	; (d9c38 <__ieee754_pow+0x5a8>)
   d98a6:	ea09 0303 	and.w	r3, r9, r3
   d98aa:	2b00      	cmp	r3, #0
   d98ac:	f040 8416 	bne.w	da0dc <__ieee754_pow+0xa4c>
   d98b0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d98b4:	4be1      	ldr	r3, [pc, #900]	; (d9c3c <__ieee754_pow+0x5ac>)
   d98b6:	2200      	movs	r2, #0
   d98b8:	f002 f9c8 	bl	dbc4c <__aeabi_dmul>
   d98bc:	e9cd 0100 	strd	r0, r1, [sp]
   d98c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d98c4:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d98c8:	ea4f 5328 	mov.w	r3, r8, asr #20
   d98cc:	49dc      	ldr	r1, [pc, #880]	; (d9c40 <__ieee754_pow+0x5b0>)
   d98ce:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d98d2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d98d6:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d98da:	1818      	adds	r0, r3, r0
   d98dc:	428a      	cmp	r2, r1
   d98de:	9007      	str	r0, [sp, #28]
   d98e0:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d98e4:	f340 83e9 	ble.w	da0ba <__ieee754_pow+0xa2a>
   d98e8:	4bd6      	ldr	r3, [pc, #856]	; (d9c44 <__ieee754_pow+0x5b4>)
   d98ea:	429a      	cmp	r2, r3
   d98ec:	f340 843e 	ble.w	da16c <__ieee754_pow+0xadc>
   d98f0:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d9be0 <__ieee754_pow+0x550>
   d98f4:	eeb0 ba47 	vmov.f32	s22, s14
   d98f8:	eef0 ba67 	vmov.f32	s23, s15
   d98fc:	eeb0 ca47 	vmov.f32	s24, s14
   d9900:	eef0 ca67 	vmov.f32	s25, s15
   d9904:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d9be8 <__ieee754_pow+0x558>
   d9908:	3001      	adds	r0, #1
   d990a:	ec54 3b17 	vmov	r3, r4, d7
   d990e:	9007      	str	r0, [sp, #28]
   d9910:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d9914:	f04f 0900 	mov.w	r9, #0
   d9918:	e9dd ab00 	ldrd	sl, fp, [sp]
   d991c:	ec44 3b18 	vmov	d8, r3, r4
   d9920:	461a      	mov	r2, r3
   d9922:	4650      	mov	r0, sl
   d9924:	4623      	mov	r3, r4
   d9926:	4641      	mov	r1, r8
   d9928:	f001 ffd8 	bl	db8dc <__aeabi_dsub>
   d992c:	ec53 2b18 	vmov	r2, r3, d8
   d9930:	4604      	mov	r4, r0
   d9932:	460d      	mov	r5, r1
   d9934:	4650      	mov	r0, sl
   d9936:	4641      	mov	r1, r8
   d9938:	f001 ffd2 	bl	db8e0 <__adddf3>
   d993c:	4602      	mov	r2, r0
   d993e:	460b      	mov	r3, r1
   d9940:	2000      	movs	r0, #0
   d9942:	49c1      	ldr	r1, [pc, #772]	; (d9c48 <__ieee754_pow+0x5b8>)
   d9944:	f002 faac 	bl	dbea0 <__aeabi_ddiv>
   d9948:	ec45 4b1a 	vmov	d10, r4, r5
   d994c:	ec41 0b19 	vmov	d9, r0, r1
   d9950:	ec51 0b1a 	vmov	r0, r1, d10
   d9954:	ec53 2b19 	vmov	r2, r3, d9
   d9958:	f002 f978 	bl	dbc4c <__aeabi_dmul>
   d995c:	46c3      	mov	fp, r8
   d995e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d9962:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d9966:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d996a:	eb03 0509 	add.w	r5, r3, r9
   d996e:	460a      	mov	r2, r1
   d9970:	2300      	movs	r3, #0
   d9972:	4601      	mov	r1, r0
   d9974:	e9cd 1200 	strd	r1, r2, [sp]
   d9978:	9300      	str	r3, [sp, #0]
   d997a:	e9dd 8900 	ldrd	r8, r9, [sp]
   d997e:	2400      	movs	r4, #0
   d9980:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d9984:	462b      	mov	r3, r5
   d9986:	4622      	mov	r2, r4
   d9988:	4640      	mov	r0, r8
   d998a:	4649      	mov	r1, r9
   d998c:	f002 f95e 	bl	dbc4c <__aeabi_dmul>
   d9990:	4602      	mov	r2, r0
   d9992:	460b      	mov	r3, r1
   d9994:	ec51 0b1a 	vmov	r0, r1, d10
   d9998:	f001 ffa0 	bl	db8dc <__aeabi_dsub>
   d999c:	ec41 0b17 	vmov	d7, r0, r1
   d99a0:	ec53 2b18 	vmov	r2, r3, d8
   d99a4:	4620      	mov	r0, r4
   d99a6:	4629      	mov	r1, r5
   d99a8:	ec55 4b17 	vmov	r4, r5, d7
   d99ac:	f001 ff96 	bl	db8dc <__aeabi_dsub>
   d99b0:	4602      	mov	r2, r0
   d99b2:	460b      	mov	r3, r1
   d99b4:	4650      	mov	r0, sl
   d99b6:	4659      	mov	r1, fp
   d99b8:	f001 ff90 	bl	db8dc <__aeabi_dsub>
   d99bc:	4642      	mov	r2, r8
   d99be:	464b      	mov	r3, r9
   d99c0:	f002 f944 	bl	dbc4c <__aeabi_dmul>
   d99c4:	4602      	mov	r2, r0
   d99c6:	460b      	mov	r3, r1
   d99c8:	4620      	mov	r0, r4
   d99ca:	4629      	mov	r1, r5
   d99cc:	f001 ff86 	bl	db8dc <__aeabi_dsub>
   d99d0:	ec53 2b19 	vmov	r2, r3, d9
   d99d4:	f002 f93a 	bl	dbc4c <__aeabi_dmul>
   d99d8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d99dc:	4604      	mov	r4, r0
   d99de:	460d      	mov	r5, r1
   d99e0:	4652      	mov	r2, sl
   d99e2:	465b      	mov	r3, fp
   d99e4:	4650      	mov	r0, sl
   d99e6:	4659      	mov	r1, fp
   d99e8:	f002 f930 	bl	dbc4c <__aeabi_dmul>
   d99ec:	a380      	add	r3, pc, #512	; (adr r3, d9bf0 <__ieee754_pow+0x560>)
   d99ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d99f2:	ec45 4b1a 	vmov	d10, r4, r5
   d99f6:	4604      	mov	r4, r0
   d99f8:	460d      	mov	r5, r1
   d99fa:	f002 f927 	bl	dbc4c <__aeabi_dmul>
   d99fe:	a37e      	add	r3, pc, #504	; (adr r3, d9bf8 <__ieee754_pow+0x568>)
   d9a00:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9a04:	f001 ff6c 	bl	db8e0 <__adddf3>
   d9a08:	4622      	mov	r2, r4
   d9a0a:	462b      	mov	r3, r5
   d9a0c:	f002 f91e 	bl	dbc4c <__aeabi_dmul>
   d9a10:	a37b      	add	r3, pc, #492	; (adr r3, d9c00 <__ieee754_pow+0x570>)
   d9a12:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9a16:	f001 ff63 	bl	db8e0 <__adddf3>
   d9a1a:	4622      	mov	r2, r4
   d9a1c:	462b      	mov	r3, r5
   d9a1e:	f002 f915 	bl	dbc4c <__aeabi_dmul>
   d9a22:	a379      	add	r3, pc, #484	; (adr r3, d9c08 <__ieee754_pow+0x578>)
   d9a24:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9a28:	f001 ff5a 	bl	db8e0 <__adddf3>
   d9a2c:	4622      	mov	r2, r4
   d9a2e:	462b      	mov	r3, r5
   d9a30:	f002 f90c 	bl	dbc4c <__aeabi_dmul>
   d9a34:	a376      	add	r3, pc, #472	; (adr r3, d9c10 <__ieee754_pow+0x580>)
   d9a36:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9a3a:	f001 ff51 	bl	db8e0 <__adddf3>
   d9a3e:	4622      	mov	r2, r4
   d9a40:	462b      	mov	r3, r5
   d9a42:	f002 f903 	bl	dbc4c <__aeabi_dmul>
   d9a46:	a374      	add	r3, pc, #464	; (adr r3, d9c18 <__ieee754_pow+0x588>)
   d9a48:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9a4c:	f001 ff48 	bl	db8e0 <__adddf3>
   d9a50:	4622      	mov	r2, r4
   d9a52:	462b      	mov	r3, r5
   d9a54:	4604      	mov	r4, r0
   d9a56:	460d      	mov	r5, r1
   d9a58:	4610      	mov	r0, r2
   d9a5a:	4619      	mov	r1, r3
   d9a5c:	f002 f8f6 	bl	dbc4c <__aeabi_dmul>
   d9a60:	4602      	mov	r2, r0
   d9a62:	460b      	mov	r3, r1
   d9a64:	4620      	mov	r0, r4
   d9a66:	4629      	mov	r1, r5
   d9a68:	f002 f8f0 	bl	dbc4c <__aeabi_dmul>
   d9a6c:	4642      	mov	r2, r8
   d9a6e:	4604      	mov	r4, r0
   d9a70:	460d      	mov	r5, r1
   d9a72:	464b      	mov	r3, r9
   d9a74:	4650      	mov	r0, sl
   d9a76:	4659      	mov	r1, fp
   d9a78:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d9a7c:	f001 ff30 	bl	db8e0 <__adddf3>
   d9a80:	ec53 2b1a 	vmov	r2, r3, d10
   d9a84:	f002 f8e2 	bl	dbc4c <__aeabi_dmul>
   d9a88:	4622      	mov	r2, r4
   d9a8a:	462b      	mov	r3, r5
   d9a8c:	f001 ff28 	bl	db8e0 <__adddf3>
   d9a90:	4642      	mov	r2, r8
   d9a92:	4604      	mov	r4, r0
   d9a94:	460d      	mov	r5, r1
   d9a96:	464b      	mov	r3, r9
   d9a98:	4640      	mov	r0, r8
   d9a9a:	4649      	mov	r1, r9
   d9a9c:	f002 f8d6 	bl	dbc4c <__aeabi_dmul>
   d9aa0:	ec45 4b19 	vmov	d9, r4, r5
   d9aa4:	4b69      	ldr	r3, [pc, #420]	; (d9c4c <__ieee754_pow+0x5bc>)
   d9aa6:	2200      	movs	r2, #0
   d9aa8:	4682      	mov	sl, r0
   d9aaa:	468b      	mov	fp, r1
   d9aac:	f001 ff18 	bl	db8e0 <__adddf3>
   d9ab0:	ec53 2b19 	vmov	r2, r3, d9
   d9ab4:	f001 ff14 	bl	db8e0 <__adddf3>
   d9ab8:	9c00      	ldr	r4, [sp, #0]
   d9aba:	460d      	mov	r5, r1
   d9abc:	4622      	mov	r2, r4
   d9abe:	462b      	mov	r3, r5
   d9ac0:	4640      	mov	r0, r8
   d9ac2:	4649      	mov	r1, r9
   d9ac4:	f002 f8c2 	bl	dbc4c <__aeabi_dmul>
   d9ac8:	4b60      	ldr	r3, [pc, #384]	; (d9c4c <__ieee754_pow+0x5bc>)
   d9aca:	4680      	mov	r8, r0
   d9acc:	4689      	mov	r9, r1
   d9ace:	2200      	movs	r2, #0
   d9ad0:	4620      	mov	r0, r4
   d9ad2:	4629      	mov	r1, r5
   d9ad4:	f001 ff02 	bl	db8dc <__aeabi_dsub>
   d9ad8:	4652      	mov	r2, sl
   d9ada:	465b      	mov	r3, fp
   d9adc:	f001 fefe 	bl	db8dc <__aeabi_dsub>
   d9ae0:	4602      	mov	r2, r0
   d9ae2:	460b      	mov	r3, r1
   d9ae4:	ec51 0b19 	vmov	r0, r1, d9
   d9ae8:	f001 fef8 	bl	db8dc <__aeabi_dsub>
   d9aec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d9af0:	f002 f8ac 	bl	dbc4c <__aeabi_dmul>
   d9af4:	ec49 8b18 	vmov	d8, r8, r9
   d9af8:	4622      	mov	r2, r4
   d9afa:	4680      	mov	r8, r0
   d9afc:	4689      	mov	r9, r1
   d9afe:	462b      	mov	r3, r5
   d9b00:	ec51 0b1a 	vmov	r0, r1, d10
   d9b04:	f002 f8a2 	bl	dbc4c <__aeabi_dmul>
   d9b08:	4602      	mov	r2, r0
   d9b0a:	460b      	mov	r3, r1
   d9b0c:	4640      	mov	r0, r8
   d9b0e:	4649      	mov	r1, r9
   d9b10:	f001 fee6 	bl	db8e0 <__adddf3>
   d9b14:	4682      	mov	sl, r0
   d9b16:	468b      	mov	fp, r1
   d9b18:	4652      	mov	r2, sl
   d9b1a:	465b      	mov	r3, fp
   d9b1c:	ec51 0b18 	vmov	r0, r1, d8
   d9b20:	f001 fede 	bl	db8e0 <__adddf3>
   d9b24:	9c00      	ldr	r4, [sp, #0]
   d9b26:	a33e      	add	r3, pc, #248	; (adr r3, d9c20 <__ieee754_pow+0x590>)
   d9b28:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b2c:	4620      	mov	r0, r4
   d9b2e:	460d      	mov	r5, r1
   d9b30:	f002 f88c 	bl	dbc4c <__aeabi_dmul>
   d9b34:	ec53 2b18 	vmov	r2, r3, d8
   d9b38:	4680      	mov	r8, r0
   d9b3a:	4689      	mov	r9, r1
   d9b3c:	4620      	mov	r0, r4
   d9b3e:	4629      	mov	r1, r5
   d9b40:	f001 fecc 	bl	db8dc <__aeabi_dsub>
   d9b44:	4602      	mov	r2, r0
   d9b46:	460b      	mov	r3, r1
   d9b48:	4650      	mov	r0, sl
   d9b4a:	4659      	mov	r1, fp
   d9b4c:	f001 fec6 	bl	db8dc <__aeabi_dsub>
   d9b50:	a335      	add	r3, pc, #212	; (adr r3, d9c28 <__ieee754_pow+0x598>)
   d9b52:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b56:	f002 f879 	bl	dbc4c <__aeabi_dmul>
   d9b5a:	ec49 8b19 	vmov	d9, r8, r9
   d9b5e:	a334      	add	r3, pc, #208	; (adr r3, d9c30 <__ieee754_pow+0x5a0>)
   d9b60:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b64:	4680      	mov	r8, r0
   d9b66:	4689      	mov	r9, r1
   d9b68:	4620      	mov	r0, r4
   d9b6a:	4629      	mov	r1, r5
   d9b6c:	f002 f86e 	bl	dbc4c <__aeabi_dmul>
   d9b70:	4602      	mov	r2, r0
   d9b72:	460b      	mov	r3, r1
   d9b74:	4640      	mov	r0, r8
   d9b76:	4649      	mov	r1, r9
   d9b78:	f001 feb2 	bl	db8e0 <__adddf3>
   d9b7c:	ec53 2b1c 	vmov	r2, r3, d12
   d9b80:	f001 feae 	bl	db8e0 <__adddf3>
   d9b84:	4682      	mov	sl, r0
   d9b86:	9807      	ldr	r0, [sp, #28]
   d9b88:	468b      	mov	fp, r1
   d9b8a:	f001 fff5 	bl	dbb78 <__aeabi_i2d>
   d9b8e:	4652      	mov	r2, sl
   d9b90:	4680      	mov	r8, r0
   d9b92:	4689      	mov	r9, r1
   d9b94:	465b      	mov	r3, fp
   d9b96:	ec51 0b19 	vmov	r0, r1, d9
   d9b9a:	f001 fea1 	bl	db8e0 <__adddf3>
   d9b9e:	ec53 2b1b 	vmov	r2, r3, d11
   d9ba2:	f001 fe9d 	bl	db8e0 <__adddf3>
   d9ba6:	4642      	mov	r2, r8
   d9ba8:	464b      	mov	r3, r9
   d9baa:	f001 fe99 	bl	db8e0 <__adddf3>
   d9bae:	9c00      	ldr	r4, [sp, #0]
   d9bb0:	4642      	mov	r2, r8
   d9bb2:	464b      	mov	r3, r9
   d9bb4:	4620      	mov	r0, r4
   d9bb6:	460d      	mov	r5, r1
   d9bb8:	f001 fe90 	bl	db8dc <__aeabi_dsub>
   d9bbc:	ec53 2b1b 	vmov	r2, r3, d11
   d9bc0:	f001 fe8c 	bl	db8dc <__aeabi_dsub>
   d9bc4:	ec53 2b19 	vmov	r2, r3, d9
   d9bc8:	f001 fe88 	bl	db8dc <__aeabi_dsub>
   d9bcc:	4602      	mov	r2, r0
   d9bce:	460b      	mov	r3, r1
   d9bd0:	4650      	mov	r0, sl
   d9bd2:	4659      	mov	r1, fp
   d9bd4:	f001 fe82 	bl	db8dc <__aeabi_dsub>
   d9bd8:	4682      	mov	sl, r0
   d9bda:	468b      	mov	fp, r1
   d9bdc:	e038      	b.n	d9c50 <__ieee754_pow+0x5c0>
   d9bde:	bf00      	nop
	...
   d9bec:	3ff00000 	.word	0x3ff00000
   d9bf0:	4a454eef 	.word	0x4a454eef
   d9bf4:	3fca7e28 	.word	0x3fca7e28
   d9bf8:	93c9db65 	.word	0x93c9db65
   d9bfc:	3fcd864a 	.word	0x3fcd864a
   d9c00:	a91d4101 	.word	0xa91d4101
   d9c04:	3fd17460 	.word	0x3fd17460
   d9c08:	518f264d 	.word	0x518f264d
   d9c0c:	3fd55555 	.word	0x3fd55555
   d9c10:	db6fabff 	.word	0xdb6fabff
   d9c14:	3fdb6db6 	.word	0x3fdb6db6
   d9c18:	33333303 	.word	0x33333303
   d9c1c:	3fe33333 	.word	0x3fe33333
   d9c20:	e0000000 	.word	0xe0000000
   d9c24:	3feec709 	.word	0x3feec709
   d9c28:	dc3a03fd 	.word	0xdc3a03fd
   d9c2c:	3feec709 	.word	0x3feec709
   d9c30:	145b01f5 	.word	0x145b01f5
   d9c34:	be3e2fe0 	.word	0xbe3e2fe0
   d9c38:	7ff00000 	.word	0x7ff00000
   d9c3c:	43400000 	.word	0x43400000
   d9c40:	0003988e 	.word	0x0003988e
   d9c44:	000bb679 	.word	0x000bb679
   d9c48:	3ff00000 	.word	0x3ff00000
   d9c4c:	40080000 	.word	0x40080000
   d9c50:	9b03      	ldr	r3, [sp, #12]
   d9c52:	9a06      	ldr	r2, [sp, #24]
   d9c54:	3b01      	subs	r3, #1
   d9c56:	4313      	orrs	r3, r2
   d9c58:	f040 8178 	bne.w	d9f4c <__ieee754_pow+0x8bc>
   d9c5c:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d9f70 <__ieee754_pow+0x8e0>
   d9c60:	eeb0 9a47 	vmov.f32	s18, s14
   d9c64:	eef0 9a67 	vmov.f32	s19, s15
   d9c68:	2300      	movs	r3, #0
   d9c6a:	e9cd 6700 	strd	r6, r7, [sp]
   d9c6e:	9300      	str	r3, [sp, #0]
   d9c70:	e9dd 8900 	ldrd	r8, r9, [sp]
   d9c74:	4630      	mov	r0, r6
   d9c76:	4642      	mov	r2, r8
   d9c78:	4639      	mov	r1, r7
   d9c7a:	464b      	mov	r3, r9
   d9c7c:	f001 fe2e 	bl	db8dc <__aeabi_dsub>
   d9c80:	4622      	mov	r2, r4
   d9c82:	462b      	mov	r3, r5
   d9c84:	f001 ffe2 	bl	dbc4c <__aeabi_dmul>
   d9c88:	4632      	mov	r2, r6
   d9c8a:	463b      	mov	r3, r7
   d9c8c:	4606      	mov	r6, r0
   d9c8e:	460f      	mov	r7, r1
   d9c90:	4650      	mov	r0, sl
   d9c92:	4659      	mov	r1, fp
   d9c94:	f001 ffda 	bl	dbc4c <__aeabi_dmul>
   d9c98:	4602      	mov	r2, r0
   d9c9a:	460b      	mov	r3, r1
   d9c9c:	4630      	mov	r0, r6
   d9c9e:	4639      	mov	r1, r7
   d9ca0:	f001 fe1e 	bl	db8e0 <__adddf3>
   d9ca4:	4642      	mov	r2, r8
   d9ca6:	4682      	mov	sl, r0
   d9ca8:	468b      	mov	fp, r1
   d9caa:	464b      	mov	r3, r9
   d9cac:	4620      	mov	r0, r4
   d9cae:	4629      	mov	r1, r5
   d9cb0:	f001 ffcc 	bl	dbc4c <__aeabi_dmul>
   d9cb4:	4606      	mov	r6, r0
   d9cb6:	460f      	mov	r7, r1
   d9cb8:	463b      	mov	r3, r7
   d9cba:	4650      	mov	r0, sl
   d9cbc:	4659      	mov	r1, fp
   d9cbe:	4632      	mov	r2, r6
   d9cc0:	f001 fe0e 	bl	db8e0 <__adddf3>
   d9cc4:	4bc4      	ldr	r3, [pc, #784]	; (d9fd8 <__ieee754_pow+0x948>)
   d9cc6:	4299      	cmp	r1, r3
   d9cc8:	4604      	mov	r4, r0
   d9cca:	460d      	mov	r5, r1
   d9ccc:	4688      	mov	r8, r1
   d9cce:	f340 8117 	ble.w	d9f00 <__ieee754_pow+0x870>
   d9cd2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d9cd6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d9cda:	4303      	orrs	r3, r0
   d9cdc:	f040 822a 	bne.w	da134 <__ieee754_pow+0xaa4>
   d9ce0:	a3a5      	add	r3, pc, #660	; (adr r3, d9f78 <__ieee754_pow+0x8e8>)
   d9ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9ce6:	4650      	mov	r0, sl
   d9ce8:	4659      	mov	r1, fp
   d9cea:	f001 fdf9 	bl	db8e0 <__adddf3>
   d9cee:	4632      	mov	r2, r6
   d9cf0:	ec41 0b18 	vmov	d8, r0, r1
   d9cf4:	463b      	mov	r3, r7
   d9cf6:	4620      	mov	r0, r4
   d9cf8:	4629      	mov	r1, r5
   d9cfa:	f001 fdef 	bl	db8dc <__aeabi_dsub>
   d9cfe:	4602      	mov	r2, r0
   d9d00:	460b      	mov	r3, r1
   d9d02:	ec51 0b18 	vmov	r0, r1, d8
   d9d06:	f002 fa31 	bl	dc16c <__aeabi_dcmpgt>
   d9d0a:	2800      	cmp	r0, #0
   d9d0c:	f040 8212 	bne.w	da134 <__ieee754_pow+0xaa4>
   d9d10:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d9d14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d9d18:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d9d1c:	fa42 f303 	asr.w	r3, r2, r3
   d9d20:	4443      	add	r3, r8
   d9d22:	49ae      	ldr	r1, [pc, #696]	; (d9fdc <__ieee754_pow+0x94c>)
   d9d24:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d9d28:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d9d2c:	fa41 fc02 	asr.w	ip, r1, r2
   d9d30:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d9d34:	ea23 010c 	bic.w	r1, r3, ip
   d9d38:	f1c2 0414 	rsb	r4, r2, #20
   d9d3c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d9d40:	f1b8 0f00 	cmp.w	r8, #0
   d9d44:	460b      	mov	r3, r1
   d9d46:	fa45 f104 	asr.w	r1, r5, r4
   d9d4a:	9103      	str	r1, [sp, #12]
   d9d4c:	f04f 0000 	mov.w	r0, #0
   d9d50:	bfb8      	it	lt
   d9d52:	4249      	neglt	r1, r1
   d9d54:	4602      	mov	r2, r0
   d9d56:	bfb8      	it	lt
   d9d58:	9103      	strlt	r1, [sp, #12]
   d9d5a:	4630      	mov	r0, r6
   d9d5c:	4639      	mov	r1, r7
   d9d5e:	f001 fdbd 	bl	db8dc <__aeabi_dsub>
   d9d62:	4606      	mov	r6, r0
   d9d64:	460f      	mov	r7, r1
   d9d66:	463b      	mov	r3, r7
   d9d68:	4650      	mov	r0, sl
   d9d6a:	4659      	mov	r1, fp
   d9d6c:	4632      	mov	r2, r6
   d9d6e:	f001 fdb7 	bl	db8e0 <__adddf3>
   d9d72:	9b03      	ldr	r3, [sp, #12]
   d9d74:	051b      	lsls	r3, r3, #20
   d9d76:	9300      	str	r3, [sp, #0]
   d9d78:	460d      	mov	r5, r1
   d9d7a:	2400      	movs	r4, #0
   d9d7c:	a380      	add	r3, pc, #512	; (adr r3, d9f80 <__ieee754_pow+0x8f0>)
   d9d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9d82:	4620      	mov	r0, r4
   d9d84:	4629      	mov	r1, r5
   d9d86:	f001 ff61 	bl	dbc4c <__aeabi_dmul>
   d9d8a:	4632      	mov	r2, r6
   d9d8c:	4680      	mov	r8, r0
   d9d8e:	4689      	mov	r9, r1
   d9d90:	463b      	mov	r3, r7
   d9d92:	4620      	mov	r0, r4
   d9d94:	4629      	mov	r1, r5
   d9d96:	f001 fda1 	bl	db8dc <__aeabi_dsub>
   d9d9a:	4602      	mov	r2, r0
   d9d9c:	460b      	mov	r3, r1
   d9d9e:	4650      	mov	r0, sl
   d9da0:	4659      	mov	r1, fp
   d9da2:	f001 fd9b 	bl	db8dc <__aeabi_dsub>
   d9da6:	a378      	add	r3, pc, #480	; (adr r3, d9f88 <__ieee754_pow+0x8f8>)
   d9da8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9dac:	f001 ff4e 	bl	dbc4c <__aeabi_dmul>
   d9db0:	a377      	add	r3, pc, #476	; (adr r3, d9f90 <__ieee754_pow+0x900>)
   d9db2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9db6:	4606      	mov	r6, r0
   d9db8:	460f      	mov	r7, r1
   d9dba:	4620      	mov	r0, r4
   d9dbc:	4629      	mov	r1, r5
   d9dbe:	f001 ff45 	bl	dbc4c <__aeabi_dmul>
   d9dc2:	4602      	mov	r2, r0
   d9dc4:	460b      	mov	r3, r1
   d9dc6:	4630      	mov	r0, r6
   d9dc8:	4639      	mov	r1, r7
   d9dca:	f001 fd89 	bl	db8e0 <__adddf3>
   d9dce:	4606      	mov	r6, r0
   d9dd0:	460f      	mov	r7, r1
   d9dd2:	4632      	mov	r2, r6
   d9dd4:	463b      	mov	r3, r7
   d9dd6:	4640      	mov	r0, r8
   d9dd8:	4649      	mov	r1, r9
   d9dda:	f001 fd81 	bl	db8e0 <__adddf3>
   d9dde:	4642      	mov	r2, r8
   d9de0:	464b      	mov	r3, r9
   d9de2:	4604      	mov	r4, r0
   d9de4:	460d      	mov	r5, r1
   d9de6:	f001 fd79 	bl	db8dc <__aeabi_dsub>
   d9dea:	4602      	mov	r2, r0
   d9dec:	460b      	mov	r3, r1
   d9dee:	4630      	mov	r0, r6
   d9df0:	4639      	mov	r1, r7
   d9df2:	f001 fd73 	bl	db8dc <__aeabi_dsub>
   d9df6:	4622      	mov	r2, r4
   d9df8:	4682      	mov	sl, r0
   d9dfa:	468b      	mov	fp, r1
   d9dfc:	462b      	mov	r3, r5
   d9dfe:	4620      	mov	r0, r4
   d9e00:	4629      	mov	r1, r5
   d9e02:	f001 ff23 	bl	dbc4c <__aeabi_dmul>
   d9e06:	a364      	add	r3, pc, #400	; (adr r3, d9f98 <__ieee754_pow+0x908>)
   d9e08:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e0c:	4606      	mov	r6, r0
   d9e0e:	460f      	mov	r7, r1
   d9e10:	f001 ff1c 	bl	dbc4c <__aeabi_dmul>
   d9e14:	a362      	add	r3, pc, #392	; (adr r3, d9fa0 <__ieee754_pow+0x910>)
   d9e16:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e1a:	f001 fd5f 	bl	db8dc <__aeabi_dsub>
   d9e1e:	4632      	mov	r2, r6
   d9e20:	463b      	mov	r3, r7
   d9e22:	f001 ff13 	bl	dbc4c <__aeabi_dmul>
   d9e26:	a360      	add	r3, pc, #384	; (adr r3, d9fa8 <__ieee754_pow+0x918>)
   d9e28:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e2c:	f001 fd58 	bl	db8e0 <__adddf3>
   d9e30:	4632      	mov	r2, r6
   d9e32:	463b      	mov	r3, r7
   d9e34:	f001 ff0a 	bl	dbc4c <__aeabi_dmul>
   d9e38:	a35d      	add	r3, pc, #372	; (adr r3, d9fb0 <__ieee754_pow+0x920>)
   d9e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e3e:	f001 fd4d 	bl	db8dc <__aeabi_dsub>
   d9e42:	4632      	mov	r2, r6
   d9e44:	463b      	mov	r3, r7
   d9e46:	f001 ff01 	bl	dbc4c <__aeabi_dmul>
   d9e4a:	a35b      	add	r3, pc, #364	; (adr r3, d9fb8 <__ieee754_pow+0x928>)
   d9e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e50:	f001 fd46 	bl	db8e0 <__adddf3>
   d9e54:	4632      	mov	r2, r6
   d9e56:	463b      	mov	r3, r7
   d9e58:	f001 fef8 	bl	dbc4c <__aeabi_dmul>
   d9e5c:	4602      	mov	r2, r0
   d9e5e:	460b      	mov	r3, r1
   d9e60:	4620      	mov	r0, r4
   d9e62:	4629      	mov	r1, r5
   d9e64:	f001 fd3a 	bl	db8dc <__aeabi_dsub>
   d9e68:	4606      	mov	r6, r0
   d9e6a:	460f      	mov	r7, r1
   d9e6c:	4632      	mov	r2, r6
   d9e6e:	463b      	mov	r3, r7
   d9e70:	4620      	mov	r0, r4
   d9e72:	4629      	mov	r1, r5
   d9e74:	f001 feea 	bl	dbc4c <__aeabi_dmul>
   d9e78:	2200      	movs	r2, #0
   d9e7a:	4680      	mov	r8, r0
   d9e7c:	4689      	mov	r9, r1
   d9e7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9e82:	4630      	mov	r0, r6
   d9e84:	4639      	mov	r1, r7
   d9e86:	f001 fd29 	bl	db8dc <__aeabi_dsub>
   d9e8a:	4602      	mov	r2, r0
   d9e8c:	460b      	mov	r3, r1
   d9e8e:	4640      	mov	r0, r8
   d9e90:	4649      	mov	r1, r9
   d9e92:	f002 f805 	bl	dbea0 <__aeabi_ddiv>
   d9e96:	4652      	mov	r2, sl
   d9e98:	4606      	mov	r6, r0
   d9e9a:	460f      	mov	r7, r1
   d9e9c:	465b      	mov	r3, fp
   d9e9e:	4620      	mov	r0, r4
   d9ea0:	4629      	mov	r1, r5
   d9ea2:	f001 fed3 	bl	dbc4c <__aeabi_dmul>
   d9ea6:	4652      	mov	r2, sl
   d9ea8:	465b      	mov	r3, fp
   d9eaa:	f001 fd19 	bl	db8e0 <__adddf3>
   d9eae:	4602      	mov	r2, r0
   d9eb0:	460b      	mov	r3, r1
   d9eb2:	4630      	mov	r0, r6
   d9eb4:	4639      	mov	r1, r7
   d9eb6:	f001 fd11 	bl	db8dc <__aeabi_dsub>
   d9eba:	4622      	mov	r2, r4
   d9ebc:	462b      	mov	r3, r5
   d9ebe:	f001 fd0d 	bl	db8dc <__aeabi_dsub>
   d9ec2:	4602      	mov	r2, r0
   d9ec4:	460b      	mov	r3, r1
   d9ec6:	2000      	movs	r0, #0
   d9ec8:	4945      	ldr	r1, [pc, #276]	; (d9fe0 <__ieee754_pow+0x950>)
   d9eca:	f001 fd07 	bl	db8dc <__aeabi_dsub>
   d9ece:	460b      	mov	r3, r1
   d9ed0:	9900      	ldr	r1, [sp, #0]
   d9ed2:	4419      	add	r1, r3
   d9ed4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9ed8:	4602      	mov	r2, r0
   d9eda:	f2c0 8169 	blt.w	da1b0 <__ieee754_pow+0xb20>
   d9ede:	4610      	mov	r0, r2
   d9ee0:	ec53 2b19 	vmov	r2, r3, d9
   d9ee4:	f001 feb2 	bl	dbc4c <__aeabi_dmul>
   d9ee8:	e9cd 0100 	strd	r0, r1, [sp]
   d9eec:	e41e      	b.n	d972c <__ieee754_pow+0x9c>
   d9eee:	f1bb 0f00 	cmp.w	fp, #0
   d9ef2:	f6ff ac95 	blt.w	d9820 <__ieee754_pow+0x190>
   d9ef6:	ed9f 7b32 	vldr	d7, [pc, #200]	; d9fc0 <__ieee754_pow+0x930>
   d9efa:	ed8d 7b00 	vstr	d7, [sp]
   d9efe:	e415      	b.n	d972c <__ieee754_pow+0x9c>
   d9f00:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d9fe8 <__ieee754_pow+0x958>
   d9f04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9f08:	4563      	cmp	r3, ip
   d9f0a:	f340 810b 	ble.w	da124 <__ieee754_pow+0xa94>
   d9f0e:	4b35      	ldr	r3, [pc, #212]	; (d9fe4 <__ieee754_pow+0x954>)
   d9f10:	440b      	add	r3, r1
   d9f12:	4303      	orrs	r3, r0
   d9f14:	d10a      	bne.n	d9f2c <__ieee754_pow+0x89c>
   d9f16:	4632      	mov	r2, r6
   d9f18:	463b      	mov	r3, r7
   d9f1a:	f001 fcdf 	bl	db8dc <__aeabi_dsub>
   d9f1e:	4652      	mov	r2, sl
   d9f20:	465b      	mov	r3, fp
   d9f22:	f002 f919 	bl	dc158 <__aeabi_dcmpge>
   d9f26:	2800      	cmp	r0, #0
   d9f28:	f43f aef2 	beq.w	d9d10 <__ieee754_pow+0x680>
   d9f2c:	a326      	add	r3, pc, #152	; (adr r3, d9fc8 <__ieee754_pow+0x938>)
   d9f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f32:	ec51 0b19 	vmov	r0, r1, d9
   d9f36:	f001 fe89 	bl	dbc4c <__aeabi_dmul>
   d9f3a:	a323      	add	r3, pc, #140	; (adr r3, d9fc8 <__ieee754_pow+0x938>)
   d9f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f40:	f001 fe84 	bl	dbc4c <__aeabi_dmul>
   d9f44:	e9cd 0100 	strd	r0, r1, [sp]
   d9f48:	f7ff bbf0 	b.w	d972c <__ieee754_pow+0x9c>
   d9f4c:	ed9f 7b20 	vldr	d7, [pc, #128]	; d9fd0 <__ieee754_pow+0x940>
   d9f50:	eeb0 9a47 	vmov.f32	s18, s14
   d9f54:	eef0 9a67 	vmov.f32	s19, s15
   d9f58:	e686      	b.n	d9c68 <__ieee754_pow+0x5d8>
   d9f5a:	f1bb 0f00 	cmp.w	fp, #0
   d9f5e:	daca      	bge.n	d9ef6 <__ieee754_pow+0x866>
   d9f60:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d9f64:	9600      	str	r6, [sp, #0]
   d9f66:	9301      	str	r3, [sp, #4]
   d9f68:	f7ff bbe0 	b.w	d972c <__ieee754_pow+0x9c>
   d9f6c:	f3af 8000 	nop.w
   d9f70:	00000000 	.word	0x00000000
   d9f74:	bff00000 	.word	0xbff00000
   d9f78:	652b82fe 	.word	0x652b82fe
   d9f7c:	3c971547 	.word	0x3c971547
   d9f80:	00000000 	.word	0x00000000
   d9f84:	3fe62e43 	.word	0x3fe62e43
   d9f88:	fefa39ef 	.word	0xfefa39ef
   d9f8c:	3fe62e42 	.word	0x3fe62e42
   d9f90:	0ca86c39 	.word	0x0ca86c39
   d9f94:	be205c61 	.word	0xbe205c61
   d9f98:	72bea4d0 	.word	0x72bea4d0
   d9f9c:	3e663769 	.word	0x3e663769
   d9fa0:	c5d26bf1 	.word	0xc5d26bf1
   d9fa4:	3ebbbd41 	.word	0x3ebbbd41
   d9fa8:	af25de2c 	.word	0xaf25de2c
   d9fac:	3f11566a 	.word	0x3f11566a
   d9fb0:	16bebd93 	.word	0x16bebd93
   d9fb4:	3f66c16c 	.word	0x3f66c16c
   d9fb8:	5555553e 	.word	0x5555553e
   d9fbc:	3fc55555 	.word	0x3fc55555
	...
   d9fc8:	c2f8f359 	.word	0xc2f8f359
   d9fcc:	01a56e1f 	.word	0x01a56e1f
   d9fd0:	00000000 	.word	0x00000000
   d9fd4:	3ff00000 	.word	0x3ff00000
   d9fd8:	408fffff 	.word	0x408fffff
   d9fdc:	000fffff 	.word	0x000fffff
   d9fe0:	3ff00000 	.word	0x3ff00000
   d9fe4:	3f6f3400 	.word	0x3f6f3400
   d9fe8:	4090cbff 	.word	0x4090cbff
   d9fec:	4598      	cmp	r8, r3
   d9fee:	f6ff af7e 	blt.w	d9eee <__ieee754_pow+0x85e>
   d9ff2:	4b91      	ldr	r3, [pc, #580]	; (da238 <__ieee754_pow+0xba8>)
   d9ff4:	4598      	cmp	r8, r3
   d9ff6:	f73f ac0f 	bgt.w	d9818 <__ieee754_pow+0x188>
   d9ffa:	4b8f      	ldr	r3, [pc, #572]	; (da238 <__ieee754_pow+0xba8>)
   d9ffc:	2200      	movs	r2, #0
   d9ffe:	e9dd 0100 	ldrd	r0, r1, [sp]
   da002:	f001 fc6b 	bl	db8dc <__aeabi_dsub>
   da006:	a378      	add	r3, pc, #480	; (adr r3, da1e8 <__ieee754_pow+0xb58>)
   da008:	e9d3 2300 	ldrd	r2, r3, [r3]
   da00c:	4604      	mov	r4, r0
   da00e:	460d      	mov	r5, r1
   da010:	f001 fe1c 	bl	dbc4c <__aeabi_dmul>
   da014:	a376      	add	r3, pc, #472	; (adr r3, da1f0 <__ieee754_pow+0xb60>)
   da016:	e9d3 2300 	ldrd	r2, r3, [r3]
   da01a:	4682      	mov	sl, r0
   da01c:	468b      	mov	fp, r1
   da01e:	4620      	mov	r0, r4
   da020:	4629      	mov	r1, r5
   da022:	f001 fe13 	bl	dbc4c <__aeabi_dmul>
   da026:	4b85      	ldr	r3, [pc, #532]	; (da23c <__ieee754_pow+0xbac>)
   da028:	4680      	mov	r8, r0
   da02a:	4689      	mov	r9, r1
   da02c:	2200      	movs	r2, #0
   da02e:	4620      	mov	r0, r4
   da030:	4629      	mov	r1, r5
   da032:	f001 fe0b 	bl	dbc4c <__aeabi_dmul>
   da036:	4602      	mov	r2, r0
   da038:	460b      	mov	r3, r1
   da03a:	a16f      	add	r1, pc, #444	; (adr r1, da1f8 <__ieee754_pow+0xb68>)
   da03c:	e9d1 0100 	ldrd	r0, r1, [r1]
   da040:	f001 fc4c 	bl	db8dc <__aeabi_dsub>
   da044:	4622      	mov	r2, r4
   da046:	462b      	mov	r3, r5
   da048:	f001 fe00 	bl	dbc4c <__aeabi_dmul>
   da04c:	4602      	mov	r2, r0
   da04e:	460b      	mov	r3, r1
   da050:	2000      	movs	r0, #0
   da052:	497b      	ldr	r1, [pc, #492]	; (da240 <__ieee754_pow+0xbb0>)
   da054:	f001 fc42 	bl	db8dc <__aeabi_dsub>
   da058:	4622      	mov	r2, r4
   da05a:	462b      	mov	r3, r5
   da05c:	4604      	mov	r4, r0
   da05e:	460d      	mov	r5, r1
   da060:	4610      	mov	r0, r2
   da062:	4619      	mov	r1, r3
   da064:	f001 fdf2 	bl	dbc4c <__aeabi_dmul>
   da068:	4602      	mov	r2, r0
   da06a:	460b      	mov	r3, r1
   da06c:	4620      	mov	r0, r4
   da06e:	4629      	mov	r1, r5
   da070:	f001 fdec 	bl	dbc4c <__aeabi_dmul>
   da074:	a362      	add	r3, pc, #392	; (adr r3, da200 <__ieee754_pow+0xb70>)
   da076:	e9d3 2300 	ldrd	r2, r3, [r3]
   da07a:	f001 fde7 	bl	dbc4c <__aeabi_dmul>
   da07e:	4602      	mov	r2, r0
   da080:	460b      	mov	r3, r1
   da082:	4640      	mov	r0, r8
   da084:	4649      	mov	r1, r9
   da086:	f001 fc29 	bl	db8dc <__aeabi_dsub>
   da08a:	4680      	mov	r8, r0
   da08c:	4689      	mov	r9, r1
   da08e:	4650      	mov	r0, sl
   da090:	4659      	mov	r1, fp
   da092:	4642      	mov	r2, r8
   da094:	464b      	mov	r3, r9
   da096:	f001 fc23 	bl	db8e0 <__adddf3>
   da09a:	2400      	movs	r4, #0
   da09c:	4652      	mov	r2, sl
   da09e:	465b      	mov	r3, fp
   da0a0:	4620      	mov	r0, r4
   da0a2:	460d      	mov	r5, r1
   da0a4:	f001 fc1a 	bl	db8dc <__aeabi_dsub>
   da0a8:	4602      	mov	r2, r0
   da0aa:	460b      	mov	r3, r1
   da0ac:	4640      	mov	r0, r8
   da0ae:	4649      	mov	r1, r9
   da0b0:	f001 fc14 	bl	db8dc <__aeabi_dsub>
   da0b4:	4682      	mov	sl, r0
   da0b6:	468b      	mov	fp, r1
   da0b8:	e5ca      	b.n	d9c50 <__ieee754_pow+0x5c0>
   da0ba:	ed9f 7b53 	vldr	d7, [pc, #332]	; da208 <__ieee754_pow+0xb78>
   da0be:	eeb0 ba47 	vmov.f32	s22, s14
   da0c2:	eef0 ba67 	vmov.f32	s23, s15
   da0c6:	eeb0 ca47 	vmov.f32	s24, s14
   da0ca:	eef0 ca67 	vmov.f32	s25, s15
   da0ce:	ed9f 7b50 	vldr	d7, [pc, #320]	; da210 <__ieee754_pow+0xb80>
   da0d2:	f04f 0900 	mov.w	r9, #0
   da0d6:	ec54 3b17 	vmov	r3, r4, d7
   da0da:	e41d      	b.n	d9918 <__ieee754_pow+0x288>
   da0dc:	2000      	movs	r0, #0
   da0de:	f7ff bbf3 	b.w	d98c8 <__ieee754_pow+0x238>
   da0e2:	4955      	ldr	r1, [pc, #340]	; (da238 <__ieee754_pow+0xba8>)
   da0e4:	4622      	mov	r2, r4
   da0e6:	462b      	mov	r3, r5
   da0e8:	2000      	movs	r0, #0
   da0ea:	f001 fed9 	bl	dbea0 <__aeabi_ddiv>
   da0ee:	e9cd 0100 	strd	r0, r1, [sp]
   da0f2:	f7ff bb1b 	b.w	d972c <__ieee754_pow+0x9c>
   da0f6:	4622      	mov	r2, r4
   da0f8:	462b      	mov	r3, r5
   da0fa:	4620      	mov	r0, r4
   da0fc:	4629      	mov	r1, r5
   da0fe:	f001 fda5 	bl	dbc4c <__aeabi_dmul>
   da102:	e9cd 0100 	strd	r0, r1, [sp]
   da106:	f7ff bb11 	b.w	d972c <__ieee754_pow+0x9c>
   da10a:	2b00      	cmp	r3, #0
   da10c:	d142      	bne.n	da194 <__ieee754_pow+0xb04>
   da10e:	f1c1 0114 	rsb	r1, r1, #20
   da112:	fa4a f001 	asr.w	r0, sl, r1
   da116:	fa00 f101 	lsl.w	r1, r0, r1
   da11a:	4551      	cmp	r1, sl
   da11c:	d05a      	beq.n	da1d4 <__ieee754_pow+0xb44>
   da11e:	9303      	str	r3, [sp, #12]
   da120:	f7ff bae0 	b.w	d96e4 <__ieee754_pow+0x54>
   da124:	4a46      	ldr	r2, [pc, #280]	; (da240 <__ieee754_pow+0xbb0>)
   da126:	4293      	cmp	r3, r2
   da128:	dc5b      	bgt.n	da1e2 <__ieee754_pow+0xb52>
   da12a:	e9dd 1200 	ldrd	r1, r2, [sp]
   da12e:	9100      	str	r1, [sp, #0]
   da130:	9103      	str	r1, [sp, #12]
   da132:	e622      	b.n	d9d7a <__ieee754_pow+0x6ea>
   da134:	a338      	add	r3, pc, #224	; (adr r3, da218 <__ieee754_pow+0xb88>)
   da136:	e9d3 2300 	ldrd	r2, r3, [r3]
   da13a:	ec51 0b19 	vmov	r0, r1, d9
   da13e:	f001 fd85 	bl	dbc4c <__aeabi_dmul>
   da142:	a335      	add	r3, pc, #212	; (adr r3, da218 <__ieee754_pow+0xb88>)
   da144:	e9d3 2300 	ldrd	r2, r3, [r3]
   da148:	f001 fd80 	bl	dbc4c <__aeabi_dmul>
   da14c:	e9cd 0100 	strd	r0, r1, [sp]
   da150:	f7ff baec 	b.w	d972c <__ieee754_pow+0x9c>
   da154:	9b03      	ldr	r3, [sp, #12]
   da156:	2b01      	cmp	r3, #1
   da158:	f47f aae8 	bne.w	d972c <__ieee754_pow+0x9c>
   da15c:	e9dd 2100 	ldrd	r2, r1, [sp]
   da160:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da164:	e9cd 2300 	strd	r2, r3, [sp]
   da168:	f7ff bae0 	b.w	d972c <__ieee754_pow+0x9c>
   da16c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; da220 <__ieee754_pow+0xb90>
   da170:	eeb0 ba47 	vmov.f32	s22, s14
   da174:	eef0 ba67 	vmov.f32	s23, s15
   da178:	ed9f 7b2b 	vldr	d7, [pc, #172]	; da228 <__ieee754_pow+0xb98>
   da17c:	eeb0 ca47 	vmov.f32	s24, s14
   da180:	eef0 ca67 	vmov.f32	s25, s15
   da184:	ed9f 7b2a 	vldr	d7, [pc, #168]	; da230 <__ieee754_pow+0xba0>
   da188:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   da18c:	ec54 3b17 	vmov	r3, r4, d7
   da190:	f7ff bbc2 	b.w	d9918 <__ieee754_pow+0x288>
   da194:	ec45 4b10 	vmov	d0, r4, r5
   da198:	9203      	str	r2, [sp, #12]
   da19a:	f001 f8bd 	bl	db318 <fabs>
   da19e:	9a03      	ldr	r2, [sp, #12]
   da1a0:	ed8d 0b00 	vstr	d0, [sp]
   da1a4:	2a00      	cmp	r2, #0
   da1a6:	f47f ab61 	bne.w	d986c <__ieee754_pow+0x1dc>
   da1aa:	9203      	str	r2, [sp, #12]
   da1ac:	f7ff baf5 	b.w	d979a <__ieee754_pow+0x10a>
   da1b0:	9803      	ldr	r0, [sp, #12]
   da1b2:	ec43 2b10 	vmov	d0, r2, r3
   da1b6:	f001 f963 	bl	db480 <scalbn>
   da1ba:	ec51 0b10 	vmov	r0, r1, d0
   da1be:	e68f      	b.n	d9ee0 <__ieee754_pow+0x850>
   da1c0:	f000 0001 	and.w	r0, r0, #1
   da1c4:	f1c0 0102 	rsb	r1, r0, #2
   da1c8:	9103      	str	r1, [sp, #12]
   da1ca:	2b00      	cmp	r3, #0
   da1cc:	f43f aa8a 	beq.w	d96e4 <__ieee754_pow+0x54>
   da1d0:	f7ff bada 	b.w	d9788 <__ieee754_pow+0xf8>
   da1d4:	f000 0001 	and.w	r0, r0, #1
   da1d8:	f1c0 0302 	rsb	r3, r0, #2
   da1dc:	9303      	str	r3, [sp, #12]
   da1de:	f7ff ba81 	b.w	d96e4 <__ieee754_pow+0x54>
   da1e2:	151b      	asrs	r3, r3, #20
   da1e4:	e596      	b.n	d9d14 <__ieee754_pow+0x684>
   da1e6:	bf00      	nop
   da1e8:	60000000 	.word	0x60000000
   da1ec:	3ff71547 	.word	0x3ff71547
   da1f0:	f85ddf44 	.word	0xf85ddf44
   da1f4:	3e54ae0b 	.word	0x3e54ae0b
   da1f8:	55555555 	.word	0x55555555
   da1fc:	3fd55555 	.word	0x3fd55555
   da200:	652b82fe 	.word	0x652b82fe
   da204:	3ff71547 	.word	0x3ff71547
	...
   da214:	3ff00000 	.word	0x3ff00000
   da218:	8800759c 	.word	0x8800759c
   da21c:	7e37e43c 	.word	0x7e37e43c
   da220:	40000000 	.word	0x40000000
   da224:	3fe2b803 	.word	0x3fe2b803
   da228:	43cfd006 	.word	0x43cfd006
   da22c:	3e4cfdeb 	.word	0x3e4cfdeb
   da230:	00000000 	.word	0x00000000
   da234:	3ff80000 	.word	0x3ff80000
   da238:	3ff00000 	.word	0x3ff00000
   da23c:	3fd00000 	.word	0x3fd00000
   da240:	3fe00000 	.word	0x3fe00000

000da244 <__ieee754_sqrt>:
   da244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da248:	4a5f      	ldr	r2, [pc, #380]	; (da3c8 <__ieee754_sqrt+0x184>)
   da24a:	ec57 6b10 	vmov	r6, r7, d0
   da24e:	43ba      	bics	r2, r7
   da250:	f000 8098 	beq.w	da384 <__ieee754_sqrt+0x140>
   da254:	2f00      	cmp	r7, #0
   da256:	ee10 4a10 	vmov	r4, s0
   da25a:	463b      	mov	r3, r7
   da25c:	dd4e      	ble.n	da2fc <__ieee754_sqrt+0xb8>
   da25e:	1539      	asrs	r1, r7, #20
   da260:	d05b      	beq.n	da31a <__ieee754_sqrt+0xd6>
   da262:	f3c3 0313 	ubfx	r3, r3, #0, #20
   da266:	07ca      	lsls	r2, r1, #31
   da268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da26c:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   da270:	d403      	bmi.n	da27a <__ieee754_sqrt+0x36>
   da272:	005b      	lsls	r3, r3, #1
   da274:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   da278:	0064      	lsls	r4, r4, #1
   da27a:	0fe2      	lsrs	r2, r4, #31
   da27c:	f04f 0c00 	mov.w	ip, #0
   da280:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   da284:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   da288:	0064      	lsls	r4, r4, #1
   da28a:	4666      	mov	r6, ip
   da28c:	2516      	movs	r5, #22
   da28e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   da292:	18b1      	adds	r1, r6, r2
   da294:	4299      	cmp	r1, r3
   da296:	dc02      	bgt.n	da29e <__ieee754_sqrt+0x5a>
   da298:	1a5b      	subs	r3, r3, r1
   da29a:	188e      	adds	r6, r1, r2
   da29c:	4494      	add	ip, r2
   da29e:	005b      	lsls	r3, r3, #1
   da2a0:	3d01      	subs	r5, #1
   da2a2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   da2a6:	ea4f 0252 	mov.w	r2, r2, lsr #1
   da2aa:	ea4f 0444 	mov.w	r4, r4, lsl #1
   da2ae:	d1f0      	bne.n	da292 <__ieee754_sqrt+0x4e>
   da2b0:	462f      	mov	r7, r5
   da2b2:	2020      	movs	r0, #32
   da2b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   da2b8:	e009      	b.n	da2ce <__ieee754_sqrt+0x8a>
   da2ba:	d03e      	beq.n	da33a <__ieee754_sqrt+0xf6>
   da2bc:	0fe1      	lsrs	r1, r4, #31
   da2be:	3801      	subs	r0, #1
   da2c0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   da2c4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   da2c8:	ea4f 0444 	mov.w	r4, r4, lsl #1
   da2cc:	d03e      	beq.n	da34c <__ieee754_sqrt+0x108>
   da2ce:	42b3      	cmp	r3, r6
   da2d0:	eb02 0105 	add.w	r1, r2, r5
   da2d4:	ddf1      	ble.n	da2ba <__ieee754_sqrt+0x76>
   da2d6:	2900      	cmp	r1, #0
   da2d8:	eb01 0502 	add.w	r5, r1, r2
   da2dc:	db09      	blt.n	da2f2 <__ieee754_sqrt+0xae>
   da2de:	46b0      	mov	r8, r6
   da2e0:	1b9b      	subs	r3, r3, r6
   da2e2:	42a1      	cmp	r1, r4
   da2e4:	bf88      	it	hi
   da2e6:	f103 33ff 	addhi.w	r3, r3, #4294967295
   da2ea:	1a64      	subs	r4, r4, r1
   da2ec:	4417      	add	r7, r2
   da2ee:	4646      	mov	r6, r8
   da2f0:	e7e4      	b.n	da2bc <__ieee754_sqrt+0x78>
   da2f2:	2d00      	cmp	r5, #0
   da2f4:	dbf3      	blt.n	da2de <__ieee754_sqrt+0x9a>
   da2f6:	f106 0801 	add.w	r8, r6, #1
   da2fa:	e7f1      	b.n	da2e0 <__ieee754_sqrt+0x9c>
   da2fc:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   da300:	4332      	orrs	r2, r6
   da302:	d036      	beq.n	da372 <__ieee754_sqrt+0x12e>
   da304:	2f00      	cmp	r7, #0
   da306:	d14d      	bne.n	da3a4 <__ieee754_sqrt+0x160>
   da308:	4639      	mov	r1, r7
   da30a:	0ae2      	lsrs	r2, r4, #11
   da30c:	3915      	subs	r1, #21
   da30e:	0564      	lsls	r4, r4, #21
   da310:	4613      	mov	r3, r2
   da312:	2a00      	cmp	r2, #0
   da314:	d0f9      	beq.n	da30a <__ieee754_sqrt+0xc6>
   da316:	02d7      	lsls	r7, r2, #11
   da318:	d451      	bmi.n	da3be <__ieee754_sqrt+0x17a>
   da31a:	2000      	movs	r0, #0
   da31c:	005b      	lsls	r3, r3, #1
   da31e:	02de      	lsls	r6, r3, #11
   da320:	4605      	mov	r5, r0
   da322:	f100 0001 	add.w	r0, r0, #1
   da326:	d5f9      	bpl.n	da31c <__ieee754_sqrt+0xd8>
   da328:	461a      	mov	r2, r3
   da32a:	4623      	mov	r3, r4
   da32c:	4084      	lsls	r4, r0
   da32e:	f1c0 0020 	rsb	r0, r0, #32
   da332:	40c3      	lsrs	r3, r0
   da334:	4313      	orrs	r3, r2
   da336:	1b49      	subs	r1, r1, r5
   da338:	e793      	b.n	da262 <__ieee754_sqrt+0x1e>
   da33a:	42a1      	cmp	r1, r4
   da33c:	d8be      	bhi.n	da2bc <__ieee754_sqrt+0x78>
   da33e:	2900      	cmp	r1, #0
   da340:	eb01 0502 	add.w	r5, r1, r2
   da344:	dbd5      	blt.n	da2f2 <__ieee754_sqrt+0xae>
   da346:	4698      	mov	r8, r3
   da348:	2300      	movs	r3, #0
   da34a:	e7ce      	b.n	da2ea <__ieee754_sqrt+0xa6>
   da34c:	4323      	orrs	r3, r4
   da34e:	d112      	bne.n	da376 <__ieee754_sqrt+0x132>
   da350:	0878      	lsrs	r0, r7, #1
   da352:	ea4f 016c 	mov.w	r1, ip, asr #1
   da356:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   da35a:	f01c 0f01 	tst.w	ip, #1
   da35e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   da362:	bf18      	it	ne
   da364:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   da368:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   da36c:	4602      	mov	r2, r0
   da36e:	ec43 2b10 	vmov	d0, r2, r3
   da372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da376:	1c7b      	adds	r3, r7, #1
   da378:	bf16      	itet	ne
   da37a:	1c78      	addne	r0, r7, #1
   da37c:	f10c 0c01 	addeq.w	ip, ip, #1
   da380:	0840      	lsrne	r0, r0, #1
   da382:	e7e6      	b.n	da352 <__ieee754_sqrt+0x10e>
   da384:	ee10 2a10 	vmov	r2, s0
   da388:	ee10 0a10 	vmov	r0, s0
   da38c:	463b      	mov	r3, r7
   da38e:	4639      	mov	r1, r7
   da390:	f001 fc5c 	bl	dbc4c <__aeabi_dmul>
   da394:	4632      	mov	r2, r6
   da396:	463b      	mov	r3, r7
   da398:	f001 faa2 	bl	db8e0 <__adddf3>
   da39c:	ec41 0b10 	vmov	d0, r0, r1
   da3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da3a4:	ee10 2a10 	vmov	r2, s0
   da3a8:	4630      	mov	r0, r6
   da3aa:	4639      	mov	r1, r7
   da3ac:	f001 fa96 	bl	db8dc <__aeabi_dsub>
   da3b0:	4602      	mov	r2, r0
   da3b2:	460b      	mov	r3, r1
   da3b4:	f001 fd74 	bl	dbea0 <__aeabi_ddiv>
   da3b8:	ec41 0b10 	vmov	d0, r0, r1
   da3bc:	e7d9      	b.n	da372 <__ieee754_sqrt+0x12e>
   da3be:	4623      	mov	r3, r4
   da3c0:	2020      	movs	r0, #32
   da3c2:	f04f 35ff 	mov.w	r5, #4294967295
   da3c6:	e7b4      	b.n	da332 <__ieee754_sqrt+0xee>
   da3c8:	7ff00000 	.word	0x7ff00000

000da3cc <__ieee754_atan2f>:
   da3cc:	b510      	push	{r4, lr}
   da3ce:	b082      	sub	sp, #8
   da3d0:	edcd 0a01 	vstr	s1, [sp, #4]
   da3d4:	9b01      	ldr	r3, [sp, #4]
   da3d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   da3da:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   da3de:	eef0 7a40 	vmov.f32	s15, s0
   da3e2:	dc30      	bgt.n	da446 <__ieee754_atan2f+0x7a>
   da3e4:	ee10 0a10 	vmov	r0, s0
   da3e8:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   da3ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   da3f0:	dc29      	bgt.n	da446 <__ieee754_atan2f+0x7a>
   da3f2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   da3f6:	d042      	beq.n	da47e <__ieee754_atan2f+0xb2>
   da3f8:	179c      	asrs	r4, r3, #30
   da3fa:	f004 0402 	and.w	r4, r4, #2
   da3fe:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   da402:	b331      	cbz	r1, da452 <__ieee754_atan2f+0x86>
   da404:	b37a      	cbz	r2, da466 <__ieee754_atan2f+0x9a>
   da406:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   da40a:	d040      	beq.n	da48e <__ieee754_atan2f+0xc2>
   da40c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   da410:	d029      	beq.n	da466 <__ieee754_atan2f+0x9a>
   da412:	1a8a      	subs	r2, r1, r2
   da414:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   da418:	ea4f 51e2 	mov.w	r1, r2, asr #23
   da41c:	da34      	bge.n	da488 <__ieee754_atan2f+0xbc>
   da41e:	2b00      	cmp	r3, #0
   da420:	da42      	bge.n	da4a8 <__ieee754_atan2f+0xdc>
   da422:	313c      	adds	r1, #60	; 0x3c
   da424:	da40      	bge.n	da4a8 <__ieee754_atan2f+0xdc>
   da426:	ed9f 0a34 	vldr	s0, [pc, #208]	; da4f8 <__ieee754_atan2f+0x12c>
   da42a:	2c01      	cmp	r4, #1
   da42c:	d04e      	beq.n	da4cc <__ieee754_atan2f+0x100>
   da42e:	2c02      	cmp	r4, #2
   da430:	d043      	beq.n	da4ba <__ieee754_atan2f+0xee>
   da432:	b164      	cbz	r4, da44e <__ieee754_atan2f+0x82>
   da434:	ed9f 7a31 	vldr	s14, [pc, #196]	; da4fc <__ieee754_atan2f+0x130>
   da438:	eddf 7a31 	vldr	s15, [pc, #196]	; da500 <__ieee754_atan2f+0x134>
   da43c:	ee30 0a07 	vadd.f32	s0, s0, s14
   da440:	ee30 0a67 	vsub.f32	s0, s0, s15
   da444:	e003      	b.n	da44e <__ieee754_atan2f+0x82>
   da446:	ed9d 7a01 	vldr	s14, [sp, #4]
   da44a:	ee37 0a27 	vadd.f32	s0, s14, s15
   da44e:	b002      	add	sp, #8
   da450:	bd10      	pop	{r4, pc}
   da452:	2c02      	cmp	r4, #2
   da454:	d010      	beq.n	da478 <__ieee754_atan2f+0xac>
   da456:	ed9f 0a2b 	vldr	s0, [pc, #172]	; da504 <__ieee754_atan2f+0x138>
   da45a:	2c03      	cmp	r4, #3
   da45c:	bf18      	it	ne
   da45e:	eeb0 0a67 	vmovne.f32	s0, s15
   da462:	b002      	add	sp, #8
   da464:	bd10      	pop	{r4, pc}
   da466:	ed9f 0a28 	vldr	s0, [pc, #160]	; da508 <__ieee754_atan2f+0x13c>
   da46a:	eddf 7a28 	vldr	s15, [pc, #160]	; da50c <__ieee754_atan2f+0x140>
   da46e:	2800      	cmp	r0, #0
   da470:	bfb8      	it	lt
   da472:	eeb0 0a67 	vmovlt.f32	s0, s15
   da476:	e7ea      	b.n	da44e <__ieee754_atan2f+0x82>
   da478:	ed9f 0a21 	vldr	s0, [pc, #132]	; da500 <__ieee754_atan2f+0x134>
   da47c:	e7e7      	b.n	da44e <__ieee754_atan2f+0x82>
   da47e:	b002      	add	sp, #8
   da480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   da484:	f001 b88e 	b.w	db5a4 <atanf>
   da488:	ed9f 0a1f 	vldr	s0, [pc, #124]	; da508 <__ieee754_atan2f+0x13c>
   da48c:	e7cd      	b.n	da42a <__ieee754_atan2f+0x5e>
   da48e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   da492:	f104 34ff 	add.w	r4, r4, #4294967295
   da496:	d020      	beq.n	da4da <__ieee754_atan2f+0x10e>
   da498:	2c02      	cmp	r4, #2
   da49a:	d826      	bhi.n	da4ea <__ieee754_atan2f+0x11e>
   da49c:	4b1c      	ldr	r3, [pc, #112]	; (da510 <__ieee754_atan2f+0x144>)
   da49e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da4a2:	ed94 0a00 	vldr	s0, [r4]
   da4a6:	e7d2      	b.n	da44e <__ieee754_atan2f+0x82>
   da4a8:	ed9d 7a01 	vldr	s14, [sp, #4]
   da4ac:	ee87 0a87 	vdiv.f32	s0, s15, s14
   da4b0:	f001 f950 	bl	db754 <fabsf>
   da4b4:	f001 f876 	bl	db5a4 <atanf>
   da4b8:	e7b7      	b.n	da42a <__ieee754_atan2f+0x5e>
   da4ba:	ed9f 7a10 	vldr	s14, [pc, #64]	; da4fc <__ieee754_atan2f+0x130>
   da4be:	eddf 7a10 	vldr	s15, [pc, #64]	; da500 <__ieee754_atan2f+0x134>
   da4c2:	ee30 0a07 	vadd.f32	s0, s0, s14
   da4c6:	ee37 0ac0 	vsub.f32	s0, s15, s0
   da4ca:	e7c0      	b.n	da44e <__ieee754_atan2f+0x82>
   da4cc:	ee10 3a10 	vmov	r3, s0
   da4d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   da4d4:	ee00 3a10 	vmov	s0, r3
   da4d8:	e7b9      	b.n	da44e <__ieee754_atan2f+0x82>
   da4da:	2c02      	cmp	r4, #2
   da4dc:	d808      	bhi.n	da4f0 <__ieee754_atan2f+0x124>
   da4de:	4b0d      	ldr	r3, [pc, #52]	; (da514 <__ieee754_atan2f+0x148>)
   da4e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da4e4:	ed94 0a00 	vldr	s0, [r4]
   da4e8:	e7b1      	b.n	da44e <__ieee754_atan2f+0x82>
   da4ea:	ed9f 0a03 	vldr	s0, [pc, #12]	; da4f8 <__ieee754_atan2f+0x12c>
   da4ee:	e7ae      	b.n	da44e <__ieee754_atan2f+0x82>
   da4f0:	ed9f 0a09 	vldr	s0, [pc, #36]	; da518 <__ieee754_atan2f+0x14c>
   da4f4:	e7ab      	b.n	da44e <__ieee754_atan2f+0x82>
   da4f6:	bf00      	nop
   da4f8:	00000000 	.word	0x00000000
   da4fc:	33bbbd2e 	.word	0x33bbbd2e
   da500:	40490fdb 	.word	0x40490fdb
   da504:	c0490fdb 	.word	0xc0490fdb
   da508:	3fc90fdb 	.word	0x3fc90fdb
   da50c:	bfc90fdb 	.word	0xbfc90fdb
   da510:	000ddb50 	.word	0x000ddb50
   da514:	000ddb44 	.word	0x000ddb44
   da518:	3f490fdb 	.word	0x3f490fdb

000da51c <__ieee754_rem_pio2f>:
   da51c:	b570      	push	{r4, r5, r6, lr}
   da51e:	ee10 3a10 	vmov	r3, s0
   da522:	4a95      	ldr	r2, [pc, #596]	; (da778 <__ieee754_rem_pio2f+0x25c>)
   da524:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   da528:	4294      	cmp	r4, r2
   da52a:	b086      	sub	sp, #24
   da52c:	4605      	mov	r5, r0
   da52e:	dd68      	ble.n	da602 <__ieee754_rem_pio2f+0xe6>
   da530:	4a92      	ldr	r2, [pc, #584]	; (da77c <__ieee754_rem_pio2f+0x260>)
   da532:	4294      	cmp	r4, r2
   da534:	ee10 6a10 	vmov	r6, s0
   da538:	dc1a      	bgt.n	da570 <__ieee754_rem_pio2f+0x54>
   da53a:	2b00      	cmp	r3, #0
   da53c:	eddf 7a90 	vldr	s15, [pc, #576]	; da780 <__ieee754_rem_pio2f+0x264>
   da540:	4a90      	ldr	r2, [pc, #576]	; (da784 <__ieee754_rem_pio2f+0x268>)
   da542:	f024 040f 	bic.w	r4, r4, #15
   da546:	f340 80f1 	ble.w	da72c <__ieee754_rem_pio2f+0x210>
   da54a:	4294      	cmp	r4, r2
   da54c:	ee70 7a67 	vsub.f32	s15, s0, s15
   da550:	d066      	beq.n	da620 <__ieee754_rem_pio2f+0x104>
   da552:	ed9f 7a8d 	vldr	s14, [pc, #564]	; da788 <__ieee754_rem_pio2f+0x26c>
   da556:	ee77 6ac7 	vsub.f32	s13, s15, s14
   da55a:	2001      	movs	r0, #1
   da55c:	ee77 7ae6 	vsub.f32	s15, s15, s13
   da560:	edc5 6a00 	vstr	s13, [r5]
   da564:	ee77 7ac7 	vsub.f32	s15, s15, s14
   da568:	edc5 7a01 	vstr	s15, [r5, #4]
   da56c:	b006      	add	sp, #24
   da56e:	bd70      	pop	{r4, r5, r6, pc}
   da570:	4a86      	ldr	r2, [pc, #536]	; (da78c <__ieee754_rem_pio2f+0x270>)
   da572:	4294      	cmp	r4, r2
   da574:	dd67      	ble.n	da646 <__ieee754_rem_pio2f+0x12a>
   da576:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   da57a:	da49      	bge.n	da610 <__ieee754_rem_pio2f+0xf4>
   da57c:	15e2      	asrs	r2, r4, #23
   da57e:	3a86      	subs	r2, #134	; 0x86
   da580:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   da584:	ee07 3a90 	vmov	s15, r3
   da588:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   da58c:	eddf 6a80 	vldr	s13, [pc, #512]	; da790 <__ieee754_rem_pio2f+0x274>
   da590:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   da594:	ee77 7ac7 	vsub.f32	s15, s15, s14
   da598:	ed8d 7a03 	vstr	s14, [sp, #12]
   da59c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   da5a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   da5a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   da5a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   da5ac:	ed8d 7a04 	vstr	s14, [sp, #16]
   da5b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
   da5b4:	eef5 7a40 	vcmp.f32	s15, #0.0
   da5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da5bc:	edcd 7a05 	vstr	s15, [sp, #20]
   da5c0:	f040 80a3 	bne.w	da70a <__ieee754_rem_pio2f+0x1ee>
   da5c4:	eeb5 7a40 	vcmp.f32	s14, #0.0
   da5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da5cc:	bf14      	ite	ne
   da5ce:	2302      	movne	r3, #2
   da5d0:	2301      	moveq	r3, #1
   da5d2:	4970      	ldr	r1, [pc, #448]	; (da794 <__ieee754_rem_pio2f+0x278>)
   da5d4:	9101      	str	r1, [sp, #4]
   da5d6:	2102      	movs	r1, #2
   da5d8:	9100      	str	r1, [sp, #0]
   da5da:	a803      	add	r0, sp, #12
   da5dc:	4629      	mov	r1, r5
   da5de:	f000 f969 	bl	da8b4 <__kernel_rem_pio2f>
   da5e2:	2e00      	cmp	r6, #0
   da5e4:	dac2      	bge.n	da56c <__ieee754_rem_pio2f+0x50>
   da5e6:	ed95 7a00 	vldr	s14, [r5]
   da5ea:	edd5 7a01 	vldr	s15, [r5, #4]
   da5ee:	eeb1 7a47 	vneg.f32	s14, s14
   da5f2:	eef1 7a67 	vneg.f32	s15, s15
   da5f6:	4240      	negs	r0, r0
   da5f8:	ed85 7a00 	vstr	s14, [r5]
   da5fc:	edc5 7a01 	vstr	s15, [r5, #4]
   da600:	e7b4      	b.n	da56c <__ieee754_rem_pio2f+0x50>
   da602:	2200      	movs	r2, #0
   da604:	ed85 0a00 	vstr	s0, [r5]
   da608:	6042      	str	r2, [r0, #4]
   da60a:	2000      	movs	r0, #0
   da60c:	b006      	add	sp, #24
   da60e:	bd70      	pop	{r4, r5, r6, pc}
   da610:	ee70 7a40 	vsub.f32	s15, s0, s0
   da614:	2000      	movs	r0, #0
   da616:	edc5 7a01 	vstr	s15, [r5, #4]
   da61a:	edc5 7a00 	vstr	s15, [r5]
   da61e:	e7a5      	b.n	da56c <__ieee754_rem_pio2f+0x50>
   da620:	eddf 6a5d 	vldr	s13, [pc, #372]	; da798 <__ieee754_rem_pio2f+0x27c>
   da624:	ed9f 7a5d 	vldr	s14, [pc, #372]	; da79c <__ieee754_rem_pio2f+0x280>
   da628:	ee77 7ae6 	vsub.f32	s15, s15, s13
   da62c:	2001      	movs	r0, #1
   da62e:	ee77 6ac7 	vsub.f32	s13, s15, s14
   da632:	ee77 7ae6 	vsub.f32	s15, s15, s13
   da636:	edc5 6a00 	vstr	s13, [r5]
   da63a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   da63e:	edc5 7a01 	vstr	s15, [r5, #4]
   da642:	b006      	add	sp, #24
   da644:	bd70      	pop	{r4, r5, r6, pc}
   da646:	f001 f885 	bl	db754 <fabsf>
   da64a:	eddf 6a55 	vldr	s13, [pc, #340]	; da7a0 <__ieee754_rem_pio2f+0x284>
   da64e:	ed9f 6a4c 	vldr	s12, [pc, #304]	; da780 <__ieee754_rem_pio2f+0x264>
   da652:	ed9f 7a4d 	vldr	s14, [pc, #308]	; da788 <__ieee754_rem_pio2f+0x26c>
   da656:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   da65a:	eee0 7a26 	vfma.f32	s15, s0, s13
   da65e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   da662:	ee17 0a90 	vmov	r0, s15
   da666:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   da66a:	281f      	cmp	r0, #31
   da66c:	eea6 0ac6 	vfms.f32	s0, s13, s12
   da670:	ee66 7a87 	vmul.f32	s15, s13, s14
   da674:	eeb1 6a66 	vneg.f32	s12, s13
   da678:	dc1e      	bgt.n	da6b8 <__ieee754_rem_pio2f+0x19c>
   da67a:	4a4a      	ldr	r2, [pc, #296]	; (da7a4 <__ieee754_rem_pio2f+0x288>)
   da67c:	1e41      	subs	r1, r0, #1
   da67e:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   da682:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   da686:	4293      	cmp	r3, r2
   da688:	d016      	beq.n	da6b8 <__ieee754_rem_pio2f+0x19c>
   da68a:	ee30 7a67 	vsub.f32	s14, s0, s15
   da68e:	ed85 7a00 	vstr	s14, [r5]
   da692:	ee30 0a47 	vsub.f32	s0, s0, s14
   da696:	2e00      	cmp	r6, #0
   da698:	ee30 0a67 	vsub.f32	s0, s0, s15
   da69c:	ed85 0a01 	vstr	s0, [r5, #4]
   da6a0:	f6bf af64 	bge.w	da56c <__ieee754_rem_pio2f+0x50>
   da6a4:	eeb1 7a47 	vneg.f32	s14, s14
   da6a8:	eeb1 0a40 	vneg.f32	s0, s0
   da6ac:	ed85 7a00 	vstr	s14, [r5]
   da6b0:	ed85 0a01 	vstr	s0, [r5, #4]
   da6b4:	4240      	negs	r0, r0
   da6b6:	e759      	b.n	da56c <__ieee754_rem_pio2f+0x50>
   da6b8:	ee30 7a67 	vsub.f32	s14, s0, s15
   da6bc:	15e2      	asrs	r2, r4, #23
   da6be:	ee17 3a10 	vmov	r3, s14
   da6c2:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   da6c6:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   da6ca:	2c08      	cmp	r4, #8
   da6cc:	dddf      	ble.n	da68e <__ieee754_rem_pio2f+0x172>
   da6ce:	eddf 7a32 	vldr	s15, [pc, #200]	; da798 <__ieee754_rem_pio2f+0x27c>
   da6d2:	ed9f 7a32 	vldr	s14, [pc, #200]	; da79c <__ieee754_rem_pio2f+0x280>
   da6d6:	eef0 5a40 	vmov.f32	s11, s0
   da6da:	eee6 5a27 	vfma.f32	s11, s12, s15
   da6de:	ee30 0a65 	vsub.f32	s0, s0, s11
   da6e2:	eea6 0a27 	vfma.f32	s0, s12, s15
   da6e6:	eef0 7a40 	vmov.f32	s15, s0
   da6ea:	eed6 7a87 	vfnms.f32	s15, s13, s14
   da6ee:	ee35 7ae7 	vsub.f32	s14, s11, s15
   da6f2:	ee17 3a10 	vmov	r3, s14
   da6f6:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   da6fa:	1ad2      	subs	r2, r2, r3
   da6fc:	2a19      	cmp	r2, #25
   da6fe:	dc06      	bgt.n	da70e <__ieee754_rem_pio2f+0x1f2>
   da700:	ed85 7a00 	vstr	s14, [r5]
   da704:	eeb0 0a65 	vmov.f32	s0, s11
   da708:	e7c3      	b.n	da692 <__ieee754_rem_pio2f+0x176>
   da70a:	2303      	movs	r3, #3
   da70c:	e761      	b.n	da5d2 <__ieee754_rem_pio2f+0xb6>
   da70e:	ed9f 7a26 	vldr	s14, [pc, #152]	; da7a8 <__ieee754_rem_pio2f+0x28c>
   da712:	ed9f 5a26 	vldr	s10, [pc, #152]	; da7ac <__ieee754_rem_pio2f+0x290>
   da716:	eeb0 0a65 	vmov.f32	s0, s11
   da71a:	eea6 0a07 	vfma.f32	s0, s12, s14
   da71e:	ee75 7ac0 	vsub.f32	s15, s11, s0
   da722:	eee6 7a07 	vfma.f32	s15, s12, s14
   da726:	eed6 7a85 	vfnms.f32	s15, s13, s10
   da72a:	e7ae      	b.n	da68a <__ieee754_rem_pio2f+0x16e>
   da72c:	4294      	cmp	r4, r2
   da72e:	ee70 7a27 	vadd.f32	s15, s0, s15
   da732:	d00e      	beq.n	da752 <__ieee754_rem_pio2f+0x236>
   da734:	ed9f 7a14 	vldr	s14, [pc, #80]	; da788 <__ieee754_rem_pio2f+0x26c>
   da738:	ee77 6a87 	vadd.f32	s13, s15, s14
   da73c:	f04f 30ff 	mov.w	r0, #4294967295
   da740:	ee77 7ae6 	vsub.f32	s15, s15, s13
   da744:	edc5 6a00 	vstr	s13, [r5]
   da748:	ee77 7a87 	vadd.f32	s15, s15, s14
   da74c:	edc5 7a01 	vstr	s15, [r5, #4]
   da750:	e70c      	b.n	da56c <__ieee754_rem_pio2f+0x50>
   da752:	eddf 6a11 	vldr	s13, [pc, #68]	; da798 <__ieee754_rem_pio2f+0x27c>
   da756:	ed9f 7a11 	vldr	s14, [pc, #68]	; da79c <__ieee754_rem_pio2f+0x280>
   da75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
   da75e:	f04f 30ff 	mov.w	r0, #4294967295
   da762:	ee77 6a87 	vadd.f32	s13, s15, s14
   da766:	ee77 7ae6 	vsub.f32	s15, s15, s13
   da76a:	edc5 6a00 	vstr	s13, [r5]
   da76e:	ee77 7a87 	vadd.f32	s15, s15, s14
   da772:	edc5 7a01 	vstr	s15, [r5, #4]
   da776:	e6f9      	b.n	da56c <__ieee754_rem_pio2f+0x50>
   da778:	3f490fd8 	.word	0x3f490fd8
   da77c:	4016cbe3 	.word	0x4016cbe3
   da780:	3fc90f80 	.word	0x3fc90f80
   da784:	3fc90fd0 	.word	0x3fc90fd0
   da788:	37354443 	.word	0x37354443
   da78c:	43490f80 	.word	0x43490f80
   da790:	43800000 	.word	0x43800000
   da794:	000ddbdc 	.word	0x000ddbdc
   da798:	37354400 	.word	0x37354400
   da79c:	2e85a308 	.word	0x2e85a308
   da7a0:	3f22f984 	.word	0x3f22f984
   da7a4:	000ddb5c 	.word	0x000ddb5c
   da7a8:	2e85a300 	.word	0x2e85a300
   da7ac:	248d3132 	.word	0x248d3132

000da7b0 <__kernel_cosf>:
   da7b0:	ee10 3a10 	vmov	r3, s0
   da7b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   da7b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   da7bc:	da2c      	bge.n	da818 <__kernel_cosf+0x68>
   da7be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   da7c2:	ee17 3a90 	vmov	r3, s15
   da7c6:	2b00      	cmp	r3, #0
   da7c8:	d060      	beq.n	da88c <__kernel_cosf+0xdc>
   da7ca:	ee20 7a00 	vmul.f32	s14, s0, s0
   da7ce:	eddf 4a31 	vldr	s9, [pc, #196]	; da894 <__kernel_cosf+0xe4>
   da7d2:	ed9f 5a31 	vldr	s10, [pc, #196]	; da898 <__kernel_cosf+0xe8>
   da7d6:	eddf 5a31 	vldr	s11, [pc, #196]	; da89c <__kernel_cosf+0xec>
   da7da:	ed9f 6a31 	vldr	s12, [pc, #196]	; da8a0 <__kernel_cosf+0xf0>
   da7de:	eddf 7a31 	vldr	s15, [pc, #196]	; da8a4 <__kernel_cosf+0xf4>
   da7e2:	eddf 6a31 	vldr	s13, [pc, #196]	; da8a8 <__kernel_cosf+0xf8>
   da7e6:	eea7 5a24 	vfma.f32	s10, s14, s9
   da7ea:	eee7 5a05 	vfma.f32	s11, s14, s10
   da7ee:	eea7 6a25 	vfma.f32	s12, s14, s11
   da7f2:	eee7 7a06 	vfma.f32	s15, s14, s12
   da7f6:	eee7 6a27 	vfma.f32	s13, s14, s15
   da7fa:	ee67 6a26 	vmul.f32	s13, s14, s13
   da7fe:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   da802:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   da806:	eee7 0a26 	vfma.f32	s1, s14, s13
   da80a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   da80e:	eed7 0a27 	vfnms.f32	s1, s14, s15
   da812:	ee30 0a60 	vsub.f32	s0, s0, s1
   da816:	4770      	bx	lr
   da818:	ee20 7a00 	vmul.f32	s14, s0, s0
   da81c:	eddf 4a1d 	vldr	s9, [pc, #116]	; da894 <__kernel_cosf+0xe4>
   da820:	ed9f 5a1d 	vldr	s10, [pc, #116]	; da898 <__kernel_cosf+0xe8>
   da824:	eddf 5a1d 	vldr	s11, [pc, #116]	; da89c <__kernel_cosf+0xec>
   da828:	ed9f 6a1d 	vldr	s12, [pc, #116]	; da8a0 <__kernel_cosf+0xf0>
   da82c:	eddf 7a1d 	vldr	s15, [pc, #116]	; da8a4 <__kernel_cosf+0xf4>
   da830:	eddf 6a1d 	vldr	s13, [pc, #116]	; da8a8 <__kernel_cosf+0xf8>
   da834:	4a1d      	ldr	r2, [pc, #116]	; (da8ac <__kernel_cosf+0xfc>)
   da836:	eea7 5a24 	vfma.f32	s10, s14, s9
   da83a:	4293      	cmp	r3, r2
   da83c:	eee5 5a07 	vfma.f32	s11, s10, s14
   da840:	eea5 6a87 	vfma.f32	s12, s11, s14
   da844:	eee6 7a07 	vfma.f32	s15, s12, s14
   da848:	eee7 6a87 	vfma.f32	s13, s15, s14
   da84c:	ee66 6a87 	vmul.f32	s13, s13, s14
   da850:	ddd5      	ble.n	da7fe <__kernel_cosf+0x4e>
   da852:	4a17      	ldr	r2, [pc, #92]	; (da8b0 <__kernel_cosf+0x100>)
   da854:	4293      	cmp	r3, r2
   da856:	dc14      	bgt.n	da882 <__kernel_cosf+0xd2>
   da858:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   da85c:	ee07 3a90 	vmov	s15, r3
   da860:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   da864:	ee36 6a67 	vsub.f32	s12, s12, s15
   da868:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   da86c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   da870:	eee7 0a26 	vfma.f32	s1, s14, s13
   da874:	eed7 7a25 	vfnms.f32	s15, s14, s11
   da878:	ee77 0ae0 	vsub.f32	s1, s15, s1
   da87c:	ee36 0a60 	vsub.f32	s0, s12, s1
   da880:	4770      	bx	lr
   da882:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   da886:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   da88a:	e7ed      	b.n	da868 <__kernel_cosf+0xb8>
   da88c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   da890:	4770      	bx	lr
   da892:	bf00      	nop
   da894:	ad47d74e 	.word	0xad47d74e
   da898:	310f74f6 	.word	0x310f74f6
   da89c:	b493f27c 	.word	0xb493f27c
   da8a0:	37d00d01 	.word	0x37d00d01
   da8a4:	bab60b61 	.word	0xbab60b61
   da8a8:	3d2aaaab 	.word	0x3d2aaaab
   da8ac:	3e999999 	.word	0x3e999999
   da8b0:	3f480000 	.word	0x3f480000

000da8b4 <__kernel_rem_pio2f>:
   da8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da8b8:	ed2d 8b04 	vpush	{d8-d9}
   da8bc:	b0db      	sub	sp, #364	; 0x16c
   da8be:	4cd7      	ldr	r4, [pc, #860]	; (dac1c <__kernel_rem_pio2f+0x368>)
   da8c0:	9d68      	ldr	r5, [sp, #416]	; 0x1a0
   da8c2:	9107      	str	r1, [sp, #28]
   da8c4:	1d11      	adds	r1, r2, #4
   da8c6:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   da8ca:	9304      	str	r3, [sp, #16]
   da8cc:	9209      	str	r2, [sp, #36]	; 0x24
   da8ce:	4683      	mov	fp, r0
   da8d0:	f103 39ff 	add.w	r9, r3, #4294967295
   da8d4:	f2c0 829d 	blt.w	dae12 <__kernel_rem_pio2f+0x55e>
   da8d8:	1ed3      	subs	r3, r2, #3
   da8da:	bf44      	itt	mi
   da8dc:	4613      	movmi	r3, r2
   da8de:	3304      	addmi	r3, #4
   da8e0:	10db      	asrs	r3, r3, #3
   da8e2:	9303      	str	r3, [sp, #12]
   da8e4:	3301      	adds	r3, #1
   da8e6:	00db      	lsls	r3, r3, #3
   da8e8:	9308      	str	r3, [sp, #32]
   da8ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   da8ee:	1a9b      	subs	r3, r3, r2
   da8f0:	9306      	str	r3, [sp, #24]
   da8f2:	9b03      	ldr	r3, [sp, #12]
   da8f4:	eb16 0109 	adds.w	r1, r6, r9
   da8f8:	eba3 0309 	sub.w	r3, r3, r9
   da8fc:	d416      	bmi.n	da92c <__kernel_rem_pio2f+0x78>
   da8fe:	3101      	adds	r1, #1
   da900:	ed9f 7ac7 	vldr	s14, [pc, #796]	; dac20 <__kernel_rem_pio2f+0x36c>
   da904:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   da906:	4419      	add	r1, r3
   da908:	aa1e      	add	r2, sp, #120	; 0x78
   da90a:	2b00      	cmp	r3, #0
   da90c:	bfa4      	itt	ge
   da90e:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   da912:	ee07 4a90 	vmovge	s15, r4
   da916:	f103 0301 	add.w	r3, r3, #1
   da91a:	bfac      	ite	ge
   da91c:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   da920:	eef0 7a47 	vmovlt.f32	s15, s14
   da924:	428b      	cmp	r3, r1
   da926:	ece2 7a01 	vstmia	r2!, {s15}
   da92a:	d1ee      	bne.n	da90a <__kernel_rem_pio2f+0x56>
   da92c:	2e00      	cmp	r6, #0
   da92e:	f2c0 82e0 	blt.w	daef2 <__kernel_rem_pio2f+0x63e>
   da932:	9b04      	ldr	r3, [sp, #16]
   da934:	a91e      	add	r1, sp, #120	; 0x78
   da936:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   da93a:	ad46      	add	r5, sp, #280	; 0x118
   da93c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   da940:	4648      	mov	r0, r9
   da942:	18f7      	adds	r7, r6, r3
   da944:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
   da948:	f1b9 0f00 	cmp.w	r9, #0
   da94c:	eddf 7ab4 	vldr	s15, [pc, #720]	; dac20 <__kernel_rem_pio2f+0x36c>
   da950:	db09      	blt.n	da966 <__kernel_rem_pio2f+0xb2>
   da952:	4622      	mov	r2, r4
   da954:	465b      	mov	r3, fp
   da956:	ecf3 6a01 	vldmia	r3!, {s13}
   da95a:	ed32 7a01 	vldmdb	r2!, {s14}
   da95e:	428b      	cmp	r3, r1
   da960:	eee6 7a87 	vfma.f32	s15, s13, s14
   da964:	d1f7      	bne.n	da956 <__kernel_rem_pio2f+0xa2>
   da966:	3001      	adds	r0, #1
   da968:	42b8      	cmp	r0, r7
   da96a:	ece5 7a01 	vstmia	r5!, {s15}
   da96e:	f104 0404 	add.w	r4, r4, #4
   da972:	d1e9      	bne.n	da948 <__kernel_rem_pio2f+0x94>
   da974:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   da978:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   da97c:	3b08      	subs	r3, #8
   da97e:	9305      	str	r3, [sp, #20]
   da980:	ed9f 9aa9 	vldr	s18, [pc, #676]	; dac28 <__kernel_rem_pio2f+0x374>
   da984:	eddf 8aa7 	vldr	s17, [pc, #668]	; dac24 <__kernel_rem_pio2f+0x370>
   da988:	9806      	ldr	r0, [sp, #24]
   da98a:	9600      	str	r6, [sp, #0]
   da98c:	ab09      	add	r3, sp, #36	; 0x24
   da98e:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
   da992:	eb0b 040c 	add.w	r4, fp, ip
   da996:	af46      	add	r7, sp, #280	; 0x118
   da998:	465b      	mov	r3, fp
   da99a:	aa5a      	add	r2, sp, #360	; 0x168
   da99c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
   da9a0:	2e00      	cmp	r6, #0
   da9a2:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
   da9a6:	ea4f 0b86 	mov.w	fp, r6, lsl #2
   da9aa:	dd16      	ble.n	da9da <__kernel_rem_pio2f+0x126>
   da9ac:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   da9b0:	4641      	mov	r1, r8
   da9b2:	ee60 7a09 	vmul.f32	s15, s0, s18
   da9b6:	eeb0 7a40 	vmov.f32	s14, s0
   da9ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   da9be:	ed72 6a01 	vldmdb	r2!, {s13}
   da9c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   da9c6:	42ba      	cmp	r2, r7
   da9c8:	eea7 7ae8 	vfms.f32	s14, s15, s17
   da9cc:	ee37 0aa6 	vadd.f32	s0, s15, s13
   da9d0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   da9d4:	eca1 7a01 	vstmia	r1!, {s14}
   da9d8:	d1eb      	bne.n	da9b2 <__kernel_rem_pio2f+0xfe>
   da9da:	e9cd 0301 	strd	r0, r3, [sp, #4]
   da9de:	f000 ff07 	bl	db7f0 <scalbnf>
   da9e2:	eeb0 8a40 	vmov.f32	s16, s0
   da9e6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   da9ea:	ee28 0a00 	vmul.f32	s0, s16, s0
   da9ee:	f000 feb9 	bl	db764 <floorf>
   da9f2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   da9f6:	eea0 8a67 	vfms.f32	s16, s0, s15
   da9fa:	9801      	ldr	r0, [sp, #4]
   da9fc:	9b02      	ldr	r3, [sp, #8]
   da9fe:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   daa02:	2800      	cmp	r0, #0
   daa04:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   daa08:	ee38 8a67 	vsub.f32	s16, s16, s15
   daa0c:	dd78      	ble.n	dab00 <__kernel_rem_pio2f+0x24c>
   daa0e:	f106 3cff 	add.w	ip, r6, #4294967295
   daa12:	f1c0 0208 	rsb	r2, r0, #8
   daa16:	f858 502c 	ldr.w	r5, [r8, ip, lsl #2]
   daa1a:	fa45 f102 	asr.w	r1, r5, r2
   daa1e:	fa01 f202 	lsl.w	r2, r1, r2
   daa22:	1aaa      	subs	r2, r5, r2
   daa24:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   daa28:	f1c0 0507 	rsb	r5, r0, #7
   daa2c:	ee19 ca90 	vmov	ip, s19
   daa30:	fa42 f505 	asr.w	r5, r2, r5
   daa34:	448c      	add	ip, r1
   daa36:	2d00      	cmp	r5, #0
   daa38:	ee09 ca90 	vmov	s19, ip
   daa3c:	dc68      	bgt.n	dab10 <__kernel_rem_pio2f+0x25c>
   daa3e:	eeb5 8a40 	vcmp.f32	s16, #0.0
   daa42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   daa46:	f040 80b6 	bne.w	dabb6 <__kernel_rem_pio2f+0x302>
   daa4a:	9a00      	ldr	r2, [sp, #0]
   daa4c:	f106 3eff 	add.w	lr, r6, #4294967295
   daa50:	4572      	cmp	r2, lr
   daa52:	dc10      	bgt.n	daa76 <__kernel_rem_pio2f+0x1c2>
   daa54:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
   daa58:	3a01      	subs	r2, #1
   daa5a:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   daa5e:	2100      	movs	r1, #0
   daa60:	469c      	mov	ip, r3
   daa62:	f852 3904 	ldr.w	r3, [r2], #-4
   daa66:	4552      	cmp	r2, sl
   daa68:	ea41 0103 	orr.w	r1, r1, r3
   daa6c:	d1f9      	bne.n	daa62 <__kernel_rem_pio2f+0x1ae>
   daa6e:	4663      	mov	r3, ip
   daa70:	2900      	cmp	r1, #0
   daa72:	f040 80f2 	bne.w	dac5a <__kernel_rem_pio2f+0x3a6>
   daa76:	9a00      	ldr	r2, [sp, #0]
   daa78:	3a01      	subs	r2, #1
   daa7a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
   daa7e:	2a00      	cmp	r2, #0
   daa80:	f040 80e6 	bne.w	dac50 <__kernel_rem_pio2f+0x39c>
   daa84:	9a05      	ldr	r2, [sp, #20]
   daa86:	f04f 0c01 	mov.w	ip, #1
   daa8a:	f852 1904 	ldr.w	r1, [r2], #-4
   daa8e:	f10c 0c01 	add.w	ip, ip, #1
   daa92:	2900      	cmp	r1, #0
   daa94:	d0f9      	beq.n	daa8a <__kernel_rem_pio2f+0x1d6>
   daa96:	f106 0b01 	add.w	fp, r6, #1
   daa9a:	44b4      	add	ip, r6
   daa9c:	46de      	mov	lr, fp
   daa9e:	9904      	ldr	r1, [sp, #16]
   daaa0:	9a03      	ldr	r2, [sp, #12]
   daaa2:	198d      	adds	r5, r1, r6
   daaa4:	445a      	add	r2, fp
   daaa6:	a91e      	add	r1, sp, #120	; 0x78
   daaa8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   daaac:	eb01 0585 	add.w	r5, r1, r5, lsl #2
   daab0:	9969      	ldr	r1, [sp, #420]	; 0x1a4
   daab2:	3a01      	subs	r2, #1
   daab4:	eb01 0682 	add.w	r6, r1, r2, lsl #2
   daab8:	eb07 0b8b 	add.w	fp, r7, fp, lsl #2
   daabc:	edd6 7a01 	vldr	s15, [r6, #4]
   daac0:	ed9f 7a57 	vldr	s14, [pc, #348]	; dac20 <__kernel_rem_pio2f+0x36c>
   daac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   daac8:	f1b9 0f00 	cmp.w	r9, #0
   daacc:	f106 0604 	add.w	r6, r6, #4
   daad0:	4629      	mov	r1, r5
   daad2:	edc5 7a00 	vstr	s15, [r5]
   daad6:	f105 0504 	add.w	r5, r5, #4
   daada:	db09      	blt.n	daaf0 <__kernel_rem_pio2f+0x23c>
   daadc:	461a      	mov	r2, r3
   daade:	e001      	b.n	daae4 <__kernel_rem_pio2f+0x230>
   daae0:	ed71 7a01 	vldmdb	r1!, {s15}
   daae4:	ecf2 6a01 	vldmia	r2!, {s13}
   daae8:	42a2      	cmp	r2, r4
   daaea:	eea6 7aa7 	vfma.f32	s14, s13, s15
   daaee:	d1f7      	bne.n	daae0 <__kernel_rem_pio2f+0x22c>
   daaf0:	f10e 0e01 	add.w	lr, lr, #1
   daaf4:	45e6      	cmp	lr, ip
   daaf6:	ecab 7a01 	vstmia	fp!, {s14}
   daafa:	dddf      	ble.n	daabc <__kernel_rem_pio2f+0x208>
   daafc:	4666      	mov	r6, ip
   daafe:	e74c      	b.n	da99a <__kernel_rem_pio2f+0xe6>
   dab00:	f040 809c 	bne.w	dac3c <__kernel_rem_pio2f+0x388>
   dab04:	1e72      	subs	r2, r6, #1
   dab06:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
   dab0a:	122d      	asrs	r5, r5, #8
   dab0c:	2d00      	cmp	r5, #0
   dab0e:	dd96      	ble.n	daa3e <__kernel_rem_pio2f+0x18a>
   dab10:	ee19 2a90 	vmov	r2, s19
   dab14:	2e00      	cmp	r6, #0
   dab16:	f102 0201 	add.w	r2, r2, #1
   dab1a:	ee09 2a90 	vmov	s19, r2
   dab1e:	f340 818e 	ble.w	dae3e <__kernel_rem_pio2f+0x58a>
   dab22:	f8d8 1000 	ldr.w	r1, [r8]
   dab26:	2900      	cmp	r1, #0
   dab28:	d174      	bne.n	dac14 <__kernel_rem_pio2f+0x360>
   dab2a:	2e01      	cmp	r6, #1
   dab2c:	d01c      	beq.n	dab68 <__kernel_rem_pio2f+0x2b4>
   dab2e:	4642      	mov	r2, r8
   dab30:	f04f 0c01 	mov.w	ip, #1
   dab34:	f852 1f04 	ldr.w	r1, [r2, #4]!
   dab38:	2900      	cmp	r1, #0
   dab3a:	d079      	beq.n	dac30 <__kernel_rem_pio2f+0x37c>
   dab3c:	f10c 0201 	add.w	r2, ip, #1
   dab40:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   dab44:	4296      	cmp	r6, r2
   dab46:	f848 102c 	str.w	r1, [r8, ip, lsl #2]
   dab4a:	dd0c      	ble.n	dab66 <__kernel_rem_pio2f+0x2b2>
   dab4c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
   dab50:	44c3      	add	fp, r8
   dab52:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   dab56:	e000      	b.n	dab5a <__kernel_rem_pio2f+0x2a6>
   dab58:	6811      	ldr	r1, [r2, #0]
   dab5a:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   dab5e:	f842 1b04 	str.w	r1, [r2], #4
   dab62:	455a      	cmp	r2, fp
   dab64:	d1f8      	bne.n	dab58 <__kernel_rem_pio2f+0x2a4>
   dab66:	2101      	movs	r1, #1
   dab68:	2800      	cmp	r0, #0
   dab6a:	dd0c      	ble.n	dab86 <__kernel_rem_pio2f+0x2d2>
   dab6c:	2801      	cmp	r0, #1
   dab6e:	f000 8147 	beq.w	dae00 <__kernel_rem_pio2f+0x54c>
   dab72:	2802      	cmp	r0, #2
   dab74:	d107      	bne.n	dab86 <__kernel_rem_pio2f+0x2d2>
   dab76:	f106 3cff 	add.w	ip, r6, #4294967295
   dab7a:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   dab7e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   dab82:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   dab86:	2d02      	cmp	r5, #2
   dab88:	f47f af59 	bne.w	daa3e <__kernel_rem_pio2f+0x18a>
   dab8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   dab90:	ee30 8a48 	vsub.f32	s16, s0, s16
   dab94:	2900      	cmp	r1, #0
   dab96:	f43f af52 	beq.w	daa3e <__kernel_rem_pio2f+0x18a>
   dab9a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   dab9e:	f000 fe27 	bl	db7f0 <scalbnf>
   daba2:	ee38 8a40 	vsub.f32	s16, s16, s0
   daba6:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
   dabaa:	eeb5 8a40 	vcmp.f32	s16, #0.0
   dabae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dabb2:	f43f af4a 	beq.w	daa4a <__kernel_rem_pio2f+0x196>
   dabb6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   dabba:	eeb0 0a48 	vmov.f32	s0, s16
   dabbe:	1a98      	subs	r0, r3, r2
   dabc0:	9602      	str	r6, [sp, #8]
   dabc2:	9501      	str	r5, [sp, #4]
   dabc4:	9e00      	ldr	r6, [sp, #0]
   dabc6:	f000 fe13 	bl	db7f0 <scalbnf>
   dabca:	ed9f 7a16 	vldr	s14, [pc, #88]	; dac24 <__kernel_rem_pio2f+0x370>
   dabce:	eeb4 0ac7 	vcmpe.f32	s0, s14
   dabd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dabd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   dabda:	f2c0 8157 	blt.w	dae8c <__kernel_rem_pio2f+0x5d8>
   dabde:	eddf 7a12 	vldr	s15, [pc, #72]	; dac28 <__kernel_rem_pio2f+0x374>
   dabe2:	9906      	ldr	r1, [sp, #24]
   dabe4:	ee60 7a27 	vmul.f32	s15, s0, s15
   dabe8:	3108      	adds	r1, #8
   dabea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   dabee:	9106      	str	r1, [sp, #24]
   dabf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dabf4:	1c5d      	adds	r5, r3, #1
   dabf6:	eea7 0ac7 	vfms.f32	s0, s15, s14
   dabfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   dabfe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   dac02:	ee10 1a10 	vmov	r1, s0
   dac06:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   dac0a:	ee17 3a90 	vmov	r3, s15
   dac0e:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
   dac12:	e039      	b.n	dac88 <__kernel_rem_pio2f+0x3d4>
   dac14:	2201      	movs	r2, #1
   dac16:	f04f 0c00 	mov.w	ip, #0
   dac1a:	e791      	b.n	dab40 <__kernel_rem_pio2f+0x28c>
   dac1c:	000ddf20 	.word	0x000ddf20
   dac20:	00000000 	.word	0x00000000
   dac24:	43800000 	.word	0x43800000
   dac28:	3b800000 	.word	0x3b800000
   dac2c:	3fc90000 	.word	0x3fc90000
   dac30:	f10c 0c01 	add.w	ip, ip, #1
   dac34:	45b4      	cmp	ip, r6
   dac36:	f47f af7d 	bne.w	dab34 <__kernel_rem_pio2f+0x280>
   dac3a:	e795      	b.n	dab68 <__kernel_rem_pio2f+0x2b4>
   dac3c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   dac40:	eeb4 8ae7 	vcmpe.f32	s16, s15
   dac44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dac48:	f280 80e8 	bge.w	dae1c <__kernel_rem_pio2f+0x568>
   dac4c:	2500      	movs	r5, #0
   dac4e:	e6f6      	b.n	daa3e <__kernel_rem_pio2f+0x18a>
   dac50:	f106 0b01 	add.w	fp, r6, #1
   dac54:	46de      	mov	lr, fp
   dac56:	46dc      	mov	ip, fp
   dac58:	e721      	b.n	daa9e <__kernel_rem_pio2f+0x1ea>
   dac5a:	9806      	ldr	r0, [sp, #24]
   dac5c:	f858 102e 	ldr.w	r1, [r8, lr, lsl #2]
   dac60:	3808      	subs	r0, #8
   dac62:	4633      	mov	r3, r6
   dac64:	462a      	mov	r2, r5
   dac66:	9e00      	ldr	r6, [sp, #0]
   dac68:	9006      	str	r0, [sp, #24]
   dac6a:	4675      	mov	r5, lr
   dac6c:	b961      	cbnz	r1, dac88 <__kernel_rem_pio2f+0x3d4>
   dac6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   dac72:	3b02      	subs	r3, #2
   dac74:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   dac78:	4601      	mov	r1, r0
   dac7a:	f853 0904 	ldr.w	r0, [r3], #-4
   dac7e:	3d01      	subs	r5, #1
   dac80:	3908      	subs	r1, #8
   dac82:	2800      	cmp	r0, #0
   dac84:	d0f9      	beq.n	dac7a <__kernel_rem_pio2f+0x3c6>
   dac86:	9106      	str	r1, [sp, #24]
   dac88:	9806      	ldr	r0, [sp, #24]
   dac8a:	9200      	str	r2, [sp, #0]
   dac8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   dac90:	f000 fdae 	bl	db7f0 <scalbnf>
   dac94:	2d00      	cmp	r5, #0
   dac96:	9a00      	ldr	r2, [sp, #0]
   dac98:	f2c0 811e 	blt.w	daed8 <__kernel_rem_pio2f+0x624>
   dac9c:	ea4f 0e85 	mov.w	lr, r5, lsl #2
   daca0:	ab46      	add	r3, sp, #280	; 0x118
   daca2:	eb03 070e 	add.w	r7, r3, lr
   daca6:	f10e 0c04 	add.w	ip, lr, #4
   dacaa:	ed1f 7a21 	vldr	s14, [pc, #-132]	; dac28 <__kernel_rem_pio2f+0x374>
   dacae:	eb08 030c 	add.w	r3, r8, ip
   dacb2:	1d39      	adds	r1, r7, #4
   dacb4:	ed73 7a01 	vldmdb	r3!, {s15}
   dacb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dacbc:	4543      	cmp	r3, r8
   dacbe:	ee67 7a80 	vmul.f32	s15, s15, s0
   dacc2:	ee20 0a07 	vmul.f32	s0, s0, s14
   dacc6:	ed61 7a01 	vstmdb	r1!, {s15}
   dacca:	d1f3      	bne.n	dacb4 <__kernel_rem_pio2f+0x400>
   daccc:	2e00      	cmp	r6, #0
   dacce:	ed1f 6a29 	vldr	s12, [pc, #-164]	; dac2c <__kernel_rem_pio2f+0x378>
   dacd2:	f04f 0400 	mov.w	r4, #0
   dacd6:	db20      	blt.n	dad1a <__kernel_rem_pio2f+0x466>
   dacd8:	488f      	ldr	r0, [pc, #572]	; (daf18 <__kernel_rem_pio2f+0x664>)
   dacda:	eddf 7a90 	vldr	s15, [pc, #576]	; daf1c <__kernel_rem_pio2f+0x668>
   dacde:	4639      	mov	r1, r7
   dace0:	eeb0 7a46 	vmov.f32	s14, s12
   dace4:	2300      	movs	r3, #0
   dace6:	e003      	b.n	dacf0 <__kernel_rem_pio2f+0x43c>
   dace8:	429c      	cmp	r4, r3
   dacea:	db08      	blt.n	dacfe <__kernel_rem_pio2f+0x44a>
   dacec:	ecb0 7a01 	vldmia	r0!, {s14}
   dacf0:	ecf1 6a01 	vldmia	r1!, {s13}
   dacf4:	3301      	adds	r3, #1
   dacf6:	429e      	cmp	r6, r3
   dacf8:	eee6 7a87 	vfma.f32	s15, s13, s14
   dacfc:	daf4      	bge.n	dace8 <__kernel_rem_pio2f+0x434>
   dacfe:	ab5a      	add	r3, sp, #360	; 0x168
   dad00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   dad04:	42a5      	cmp	r5, r4
   dad06:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   dad0a:	f1a7 0704 	sub.w	r7, r7, #4
   dad0e:	f104 0301 	add.w	r3, r4, #1
   dad12:	d005      	beq.n	dad20 <__kernel_rem_pio2f+0x46c>
   dad14:	2e00      	cmp	r6, #0
   dad16:	461c      	mov	r4, r3
   dad18:	dade      	bge.n	dacd8 <__kernel_rem_pio2f+0x424>
   dad1a:	eddf 7a80 	vldr	s15, [pc, #512]	; daf1c <__kernel_rem_pio2f+0x668>
   dad1e:	e7ee      	b.n	dacfe <__kernel_rem_pio2f+0x44a>
   dad20:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   dad22:	2902      	cmp	r1, #2
   dad24:	dc1c      	bgt.n	dad60 <__kernel_rem_pio2f+0x4ac>
   dad26:	2900      	cmp	r1, #0
   dad28:	f300 808b 	bgt.w	dae42 <__kernel_rem_pio2f+0x58e>
   dad2c:	d10f      	bne.n	dad4e <__kernel_rem_pio2f+0x49a>
   dad2e:	ab32      	add	r3, sp, #200	; 0xc8
   dad30:	eddf 7a7a 	vldr	s15, [pc, #488]	; daf1c <__kernel_rem_pio2f+0x668>
   dad34:	449c      	add	ip, r3
   dad36:	ed3c 7a01 	vldmdb	ip!, {s14}
   dad3a:	4563      	cmp	r3, ip
   dad3c:	ee77 7a87 	vadd.f32	s15, s15, s14
   dad40:	d1f9      	bne.n	dad36 <__kernel_rem_pio2f+0x482>
   dad42:	b10a      	cbz	r2, dad48 <__kernel_rem_pio2f+0x494>
   dad44:	eef1 7a67 	vneg.f32	s15, s15
   dad48:	9b07      	ldr	r3, [sp, #28]
   dad4a:	edc3 7a00 	vstr	s15, [r3]
   dad4e:	ee19 3a90 	vmov	r3, s19
   dad52:	f003 0007 	and.w	r0, r3, #7
   dad56:	b05b      	add	sp, #364	; 0x16c
   dad58:	ecbd 8b04 	vpop	{d8-d9}
   dad5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dad60:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   dad62:	2b03      	cmp	r3, #3
   dad64:	d1f3      	bne.n	dad4e <__kernel_rem_pio2f+0x49a>
   dad66:	2d00      	cmp	r5, #0
   dad68:	f000 80cb 	beq.w	daf02 <__kernel_rem_pio2f+0x64e>
   dad6c:	ab5a      	add	r3, sp, #360	; 0x168
   dad6e:	4473      	add	r3, lr
   dad70:	a932      	add	r1, sp, #200	; 0xc8
   dad72:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   dad76:	eb01 0385 	add.w	r3, r1, r5, lsl #2
   dad7a:	ed73 7a01 	vldmdb	r3!, {s15}
   dad7e:	eef0 6a47 	vmov.f32	s13, s14
   dad82:	ee37 7a27 	vadd.f32	s14, s14, s15
   dad86:	4299      	cmp	r1, r3
   dad88:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dad8c:	ed83 7a00 	vstr	s14, [r3]
   dad90:	ee77 7aa6 	vadd.f32	s15, s15, s13
   dad94:	edc3 7a01 	vstr	s15, [r3, #4]
   dad98:	d1ef      	bne.n	dad7a <__kernel_rem_pio2f+0x4c6>
   dad9a:	2d01      	cmp	r5, #1
   dad9c:	f340 80b1 	ble.w	daf02 <__kernel_rem_pio2f+0x64e>
   dada0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   dada4:	ab5a      	add	r3, sp, #360	; 0x168
   dada6:	3d01      	subs	r5, #1
   dada8:	449e      	add	lr, r3
   dadaa:	00ad      	lsls	r5, r5, #2
   dadac:	1d2b      	adds	r3, r5, #4
   dadae:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   dadb2:	440b      	add	r3, r1
   dadb4:	a833      	add	r0, sp, #204	; 0xcc
   dadb6:	ed73 7a01 	vldmdb	r3!, {s15}
   dadba:	eef0 6a47 	vmov.f32	s13, s14
   dadbe:	ee37 7a27 	vadd.f32	s14, s14, s15
   dadc2:	4298      	cmp	r0, r3
   dadc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dadc8:	ed83 7a00 	vstr	s14, [r3]
   dadcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
   dadd0:	edc3 7a01 	vstr	s15, [r3, #4]
   dadd4:	d1ef      	bne.n	dadb6 <__kernel_rem_pio2f+0x502>
   dadd6:	3508      	adds	r5, #8
   dadd8:	eddf 7a50 	vldr	s15, [pc, #320]	; daf1c <__kernel_rem_pio2f+0x668>
   daddc:	194b      	adds	r3, r1, r5
   dadde:	3108      	adds	r1, #8
   dade0:	ed33 7a01 	vldmdb	r3!, {s14}
   dade4:	4299      	cmp	r1, r3
   dade6:	ee77 7a87 	vadd.f32	s15, s15, s14
   dadea:	d1f9      	bne.n	dade0 <__kernel_rem_pio2f+0x52c>
   dadec:	2a00      	cmp	r2, #0
   dadee:	d155      	bne.n	dae9c <__kernel_rem_pio2f+0x5e8>
   dadf0:	9907      	ldr	r1, [sp, #28]
   dadf2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   dadf4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   dadf6:	edc1 7a02 	vstr	s15, [r1, #8]
   dadfa:	600a      	str	r2, [r1, #0]
   dadfc:	604b      	str	r3, [r1, #4]
   dadfe:	e7a6      	b.n	dad4e <__kernel_rem_pio2f+0x49a>
   dae00:	f106 3cff 	add.w	ip, r6, #4294967295
   dae04:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   dae08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   dae0c:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   dae10:	e6b9      	b.n	dab86 <__kernel_rem_pio2f+0x2d2>
   dae12:	2308      	movs	r3, #8
   dae14:	9308      	str	r3, [sp, #32]
   dae16:	2300      	movs	r3, #0
   dae18:	9303      	str	r3, [sp, #12]
   dae1a:	e566      	b.n	da8ea <__kernel_rem_pio2f+0x36>
   dae1c:	ee19 2a90 	vmov	r2, s19
   dae20:	2e00      	cmp	r6, #0
   dae22:	f102 0201 	add.w	r2, r2, #1
   dae26:	ee09 2a90 	vmov	s19, r2
   dae2a:	bfc8      	it	gt
   dae2c:	2502      	movgt	r5, #2
   dae2e:	f73f ae78 	bgt.w	dab22 <__kernel_rem_pio2f+0x26e>
   dae32:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   dae36:	ee37 8ac8 	vsub.f32	s16, s15, s16
   dae3a:	2502      	movs	r5, #2
   dae3c:	e5ff      	b.n	daa3e <__kernel_rem_pio2f+0x18a>
   dae3e:	2100      	movs	r1, #0
   dae40:	e692      	b.n	dab68 <__kernel_rem_pio2f+0x2b4>
   dae42:	a932      	add	r1, sp, #200	; 0xc8
   dae44:	eddf 7a35 	vldr	s15, [pc, #212]	; daf1c <__kernel_rem_pio2f+0x668>
   dae48:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   dae4c:	ed33 7a01 	vldmdb	r3!, {s14}
   dae50:	4299      	cmp	r1, r3
   dae52:	ee77 7a87 	vadd.f32	s15, s15, s14
   dae56:	d1f9      	bne.n	dae4c <__kernel_rem_pio2f+0x598>
   dae58:	bb92      	cbnz	r2, daec0 <__kernel_rem_pio2f+0x60c>
   dae5a:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   dae5e:	9b07      	ldr	r3, [sp, #28]
   dae60:	2d00      	cmp	r5, #0
   dae62:	edc3 7a00 	vstr	s15, [r3]
   dae66:	ee77 7a67 	vsub.f32	s15, s14, s15
   dae6a:	dd0b      	ble.n	dae84 <__kernel_rem_pio2f+0x5d0>
   dae6c:	a933      	add	r1, sp, #204	; 0xcc
   dae6e:	2301      	movs	r3, #1
   dae70:	ecb1 7a01 	vldmia	r1!, {s14}
   dae74:	3301      	adds	r3, #1
   dae76:	429d      	cmp	r5, r3
   dae78:	ee77 7a87 	vadd.f32	s15, s15, s14
   dae7c:	daf8      	bge.n	dae70 <__kernel_rem_pio2f+0x5bc>
   dae7e:	b10a      	cbz	r2, dae84 <__kernel_rem_pio2f+0x5d0>
   dae80:	eef1 7a67 	vneg.f32	s15, s15
   dae84:	9b07      	ldr	r3, [sp, #28]
   dae86:	edc3 7a01 	vstr	s15, [r3, #4]
   dae8a:	e760      	b.n	dad4e <__kernel_rem_pio2f+0x49a>
   dae8c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   dae90:	461d      	mov	r5, r3
   dae92:	ee10 1a10 	vmov	r1, s0
   dae96:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   dae9a:	e6f5      	b.n	dac88 <__kernel_rem_pio2f+0x3d4>
   dae9c:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   daea0:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   daea4:	9b07      	ldr	r3, [sp, #28]
   daea6:	eef1 7a67 	vneg.f32	s15, s15
   daeaa:	eef1 6a66 	vneg.f32	s13, s13
   daeae:	eeb1 7a47 	vneg.f32	s14, s14
   daeb2:	edc3 7a02 	vstr	s15, [r3, #8]
   daeb6:	edc3 6a00 	vstr	s13, [r3]
   daeba:	ed83 7a01 	vstr	s14, [r3, #4]
   daebe:	e746      	b.n	dad4e <__kernel_rem_pio2f+0x49a>
   daec0:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   daec4:	9b07      	ldr	r3, [sp, #28]
   daec6:	eeb1 7a67 	vneg.f32	s14, s15
   daeca:	2d00      	cmp	r5, #0
   daecc:	ee76 7ae7 	vsub.f32	s15, s13, s15
   daed0:	ed83 7a00 	vstr	s14, [r3]
   daed4:	dcca      	bgt.n	dae6c <__kernel_rem_pio2f+0x5b8>
   daed6:	e7d3      	b.n	dae80 <__kernel_rem_pio2f+0x5cc>
   daed8:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   daeda:	2b02      	cmp	r3, #2
   daedc:	dc0d      	bgt.n	daefa <__kernel_rem_pio2f+0x646>
   daede:	2b00      	cmp	r3, #0
   daee0:	dc14      	bgt.n	daf0c <__kernel_rem_pio2f+0x658>
   daee2:	f47f af34 	bne.w	dad4e <__kernel_rem_pio2f+0x49a>
   daee6:	eddf 7a0d 	vldr	s15, [pc, #52]	; daf1c <__kernel_rem_pio2f+0x668>
   daeea:	2a00      	cmp	r2, #0
   daeec:	f43f af2c 	beq.w	dad48 <__kernel_rem_pio2f+0x494>
   daef0:	e728      	b.n	dad44 <__kernel_rem_pio2f+0x490>
   daef2:	9b04      	ldr	r3, [sp, #16]
   daef4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   daef8:	e53c      	b.n	da974 <__kernel_rem_pio2f+0xc0>
   daefa:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   daefc:	2b03      	cmp	r3, #3
   daefe:	f47f af26 	bne.w	dad4e <__kernel_rem_pio2f+0x49a>
   daf02:	eddf 7a06 	vldr	s15, [pc, #24]	; daf1c <__kernel_rem_pio2f+0x668>
   daf06:	2a00      	cmp	r2, #0
   daf08:	d1c8      	bne.n	dae9c <__kernel_rem_pio2f+0x5e8>
   daf0a:	e771      	b.n	dadf0 <__kernel_rem_pio2f+0x53c>
   daf0c:	eddf 7a03 	vldr	s15, [pc, #12]	; daf1c <__kernel_rem_pio2f+0x668>
   daf10:	2a00      	cmp	r2, #0
   daf12:	d0a2      	beq.n	dae5a <__kernel_rem_pio2f+0x5a6>
   daf14:	e7d4      	b.n	daec0 <__kernel_rem_pio2f+0x60c>
   daf16:	bf00      	nop
   daf18:	000ddef8 	.word	0x000ddef8
   daf1c:	00000000 	.word	0x00000000

000daf20 <__kernel_sinf>:
   daf20:	ee10 3a10 	vmov	r3, s0
   daf24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   daf28:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   daf2c:	da04      	bge.n	daf38 <__kernel_sinf+0x18>
   daf2e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   daf32:	ee17 3a90 	vmov	r3, s15
   daf36:	b35b      	cbz	r3, daf90 <__kernel_sinf+0x70>
   daf38:	ee60 7a00 	vmul.f32	s15, s0, s0
   daf3c:	ed9f 5a15 	vldr	s10, [pc, #84]	; daf94 <__kernel_sinf+0x74>
   daf40:	eddf 5a15 	vldr	s11, [pc, #84]	; daf98 <__kernel_sinf+0x78>
   daf44:	ed9f 6a15 	vldr	s12, [pc, #84]	; daf9c <__kernel_sinf+0x7c>
   daf48:	eddf 6a15 	vldr	s13, [pc, #84]	; dafa0 <__kernel_sinf+0x80>
   daf4c:	ed9f 7a15 	vldr	s14, [pc, #84]	; dafa4 <__kernel_sinf+0x84>
   daf50:	eee7 5a85 	vfma.f32	s11, s15, s10
   daf54:	ee20 5a27 	vmul.f32	s10, s0, s15
   daf58:	eea5 6aa7 	vfma.f32	s12, s11, s15
   daf5c:	eee6 6a27 	vfma.f32	s13, s12, s15
   daf60:	eea6 7aa7 	vfma.f32	s14, s13, s15
   daf64:	b930      	cbnz	r0, daf74 <__kernel_sinf+0x54>
   daf66:	eddf 6a10 	vldr	s13, [pc, #64]	; dafa8 <__kernel_sinf+0x88>
   daf6a:	eee7 6a87 	vfma.f32	s13, s15, s14
   daf6e:	eea6 0a85 	vfma.f32	s0, s13, s10
   daf72:	4770      	bx	lr
   daf74:	ee27 7a45 	vnmul.f32	s14, s14, s10
   daf78:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   daf7c:	eea0 7aa6 	vfma.f32	s14, s1, s13
   daf80:	eddf 6a0a 	vldr	s13, [pc, #40]	; dafac <__kernel_sinf+0x8c>
   daf84:	eed7 0a27 	vfnms.f32	s1, s14, s15
   daf88:	eee5 0a26 	vfma.f32	s1, s10, s13
   daf8c:	ee30 0a60 	vsub.f32	s0, s0, s1
   daf90:	4770      	bx	lr
   daf92:	bf00      	nop
   daf94:	2f2ec9d3 	.word	0x2f2ec9d3
   daf98:	b2d72f34 	.word	0xb2d72f34
   daf9c:	3638ef1b 	.word	0x3638ef1b
   dafa0:	b9500d01 	.word	0xb9500d01
   dafa4:	3c088889 	.word	0x3c088889
   dafa8:	be2aaaab 	.word	0xbe2aaaab
   dafac:	3e2aaaab 	.word	0x3e2aaaab

000dafb0 <atan>:
   dafb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dafb4:	ec55 4b10 	vmov	r4, r5, d0
   dafb8:	4bcd      	ldr	r3, [pc, #820]	; (db2f0 <atan+0x340>)
   dafba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   dafbe:	429e      	cmp	r6, r3
   dafc0:	46aa      	mov	sl, r5
   dafc2:	dd0d      	ble.n	dafe0 <atan+0x30>
   dafc4:	4bcb      	ldr	r3, [pc, #812]	; (db2f4 <atan+0x344>)
   dafc6:	429e      	cmp	r6, r3
   dafc8:	f300 80b5 	bgt.w	db136 <atan+0x186>
   dafcc:	f000 80b0 	beq.w	db130 <atan+0x180>
   dafd0:	f1ba 0f00 	cmp.w	sl, #0
   dafd4:	f340 80f6 	ble.w	db1c4 <atan+0x214>
   dafd8:	ed9f 0ba9 	vldr	d0, [pc, #676]	; db280 <atan+0x2d0>
   dafdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dafe0:	4bc5      	ldr	r3, [pc, #788]	; (db2f8 <atan+0x348>)
   dafe2:	429e      	cmp	r6, r3
   dafe4:	f300 80c3 	bgt.w	db16e <atan+0x1be>
   dafe8:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   dafec:	429e      	cmp	r6, r3
   dafee:	f340 80ac 	ble.w	db14a <atan+0x19a>
   daff2:	f04f 3bff 	mov.w	fp, #4294967295
   daff6:	4622      	mov	r2, r4
   daff8:	462b      	mov	r3, r5
   daffa:	4620      	mov	r0, r4
   daffc:	4629      	mov	r1, r5
   daffe:	f000 fe25 	bl	dbc4c <__aeabi_dmul>
   db002:	4602      	mov	r2, r0
   db004:	460b      	mov	r3, r1
   db006:	4680      	mov	r8, r0
   db008:	4689      	mov	r9, r1
   db00a:	f000 fe1f 	bl	dbc4c <__aeabi_dmul>
   db00e:	a39e      	add	r3, pc, #632	; (adr r3, db288 <atan+0x2d8>)
   db010:	e9d3 2300 	ldrd	r2, r3, [r3]
   db014:	4606      	mov	r6, r0
   db016:	460f      	mov	r7, r1
   db018:	f000 fe18 	bl	dbc4c <__aeabi_dmul>
   db01c:	a39c      	add	r3, pc, #624	; (adr r3, db290 <atan+0x2e0>)
   db01e:	e9d3 2300 	ldrd	r2, r3, [r3]
   db022:	f000 fc5d 	bl	db8e0 <__adddf3>
   db026:	4632      	mov	r2, r6
   db028:	463b      	mov	r3, r7
   db02a:	f000 fe0f 	bl	dbc4c <__aeabi_dmul>
   db02e:	a39a      	add	r3, pc, #616	; (adr r3, db298 <atan+0x2e8>)
   db030:	e9d3 2300 	ldrd	r2, r3, [r3]
   db034:	f000 fc54 	bl	db8e0 <__adddf3>
   db038:	4632      	mov	r2, r6
   db03a:	463b      	mov	r3, r7
   db03c:	f000 fe06 	bl	dbc4c <__aeabi_dmul>
   db040:	a397      	add	r3, pc, #604	; (adr r3, db2a0 <atan+0x2f0>)
   db042:	e9d3 2300 	ldrd	r2, r3, [r3]
   db046:	f000 fc4b 	bl	db8e0 <__adddf3>
   db04a:	4632      	mov	r2, r6
   db04c:	463b      	mov	r3, r7
   db04e:	f000 fdfd 	bl	dbc4c <__aeabi_dmul>
   db052:	a395      	add	r3, pc, #596	; (adr r3, db2a8 <atan+0x2f8>)
   db054:	e9d3 2300 	ldrd	r2, r3, [r3]
   db058:	f000 fc42 	bl	db8e0 <__adddf3>
   db05c:	4632      	mov	r2, r6
   db05e:	463b      	mov	r3, r7
   db060:	f000 fdf4 	bl	dbc4c <__aeabi_dmul>
   db064:	a392      	add	r3, pc, #584	; (adr r3, db2b0 <atan+0x300>)
   db066:	e9d3 2300 	ldrd	r2, r3, [r3]
   db06a:	f000 fc39 	bl	db8e0 <__adddf3>
   db06e:	4642      	mov	r2, r8
   db070:	464b      	mov	r3, r9
   db072:	f000 fdeb 	bl	dbc4c <__aeabi_dmul>
   db076:	a390      	add	r3, pc, #576	; (adr r3, db2b8 <atan+0x308>)
   db078:	e9d3 2300 	ldrd	r2, r3, [r3]
   db07c:	4680      	mov	r8, r0
   db07e:	4689      	mov	r9, r1
   db080:	4630      	mov	r0, r6
   db082:	4639      	mov	r1, r7
   db084:	f000 fde2 	bl	dbc4c <__aeabi_dmul>
   db088:	a38d      	add	r3, pc, #564	; (adr r3, db2c0 <atan+0x310>)
   db08a:	e9d3 2300 	ldrd	r2, r3, [r3]
   db08e:	f000 fc25 	bl	db8dc <__aeabi_dsub>
   db092:	4632      	mov	r2, r6
   db094:	463b      	mov	r3, r7
   db096:	f000 fdd9 	bl	dbc4c <__aeabi_dmul>
   db09a:	a38b      	add	r3, pc, #556	; (adr r3, db2c8 <atan+0x318>)
   db09c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db0a0:	f000 fc1c 	bl	db8dc <__aeabi_dsub>
   db0a4:	4632      	mov	r2, r6
   db0a6:	463b      	mov	r3, r7
   db0a8:	f000 fdd0 	bl	dbc4c <__aeabi_dmul>
   db0ac:	a388      	add	r3, pc, #544	; (adr r3, db2d0 <atan+0x320>)
   db0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   db0b2:	f000 fc13 	bl	db8dc <__aeabi_dsub>
   db0b6:	4632      	mov	r2, r6
   db0b8:	463b      	mov	r3, r7
   db0ba:	f000 fdc7 	bl	dbc4c <__aeabi_dmul>
   db0be:	a386      	add	r3, pc, #536	; (adr r3, db2d8 <atan+0x328>)
   db0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   db0c4:	f000 fc0a 	bl	db8dc <__aeabi_dsub>
   db0c8:	4632      	mov	r2, r6
   db0ca:	463b      	mov	r3, r7
   db0cc:	f000 fdbe 	bl	dbc4c <__aeabi_dmul>
   db0d0:	f1bb 3fff 	cmp.w	fp, #4294967295
   db0d4:	4602      	mov	r2, r0
   db0d6:	460b      	mov	r3, r1
   db0d8:	d078      	beq.n	db1cc <atan+0x21c>
   db0da:	4640      	mov	r0, r8
   db0dc:	4649      	mov	r1, r9
   db0de:	f000 fbff 	bl	db8e0 <__adddf3>
   db0e2:	4e86      	ldr	r6, [pc, #536]	; (db2fc <atan+0x34c>)
   db0e4:	4622      	mov	r2, r4
   db0e6:	462b      	mov	r3, r5
   db0e8:	f000 fdb0 	bl	dbc4c <__aeabi_dmul>
   db0ec:	4b84      	ldr	r3, [pc, #528]	; (db300 <atan+0x350>)
   db0ee:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   db0f2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   db0f6:	449b      	add	fp, r3
   db0f8:	e9db 2300 	ldrd	r2, r3, [fp]
   db0fc:	f000 fbee 	bl	db8dc <__aeabi_dsub>
   db100:	4622      	mov	r2, r4
   db102:	462b      	mov	r3, r5
   db104:	f000 fbea 	bl	db8dc <__aeabi_dsub>
   db108:	4602      	mov	r2, r0
   db10a:	460b      	mov	r3, r1
   db10c:	e9d6 0100 	ldrd	r0, r1, [r6]
   db110:	f000 fbe4 	bl	db8dc <__aeabi_dsub>
   db114:	f1ba 0f00 	cmp.w	sl, #0
   db118:	ec41 0b10 	vmov	d0, r0, r1
   db11c:	da13      	bge.n	db146 <atan+0x196>
   db11e:	ee10 1a90 	vmov	r1, s1
   db122:	4602      	mov	r2, r0
   db124:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db128:	ec43 2b10 	vmov	d0, r2, r3
   db12c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db130:	2c00      	cmp	r4, #0
   db132:	f43f af4d 	beq.w	dafd0 <atan+0x20>
   db136:	4622      	mov	r2, r4
   db138:	462b      	mov	r3, r5
   db13a:	4620      	mov	r0, r4
   db13c:	4629      	mov	r1, r5
   db13e:	f000 fbcf 	bl	db8e0 <__adddf3>
   db142:	ec41 0b10 	vmov	d0, r0, r1
   db146:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db14a:	a365      	add	r3, pc, #404	; (adr r3, db2e0 <atan+0x330>)
   db14c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db150:	ee10 0a10 	vmov	r0, s0
   db154:	4629      	mov	r1, r5
   db156:	f000 fbc3 	bl	db8e0 <__adddf3>
   db15a:	4b6a      	ldr	r3, [pc, #424]	; (db304 <atan+0x354>)
   db15c:	2200      	movs	r2, #0
   db15e:	f001 f805 	bl	dc16c <__aeabi_dcmpgt>
   db162:	2800      	cmp	r0, #0
   db164:	f43f af45 	beq.w	daff2 <atan+0x42>
   db168:	ec45 4b10 	vmov	d0, r4, r5
   db16c:	e7eb      	b.n	db146 <atan+0x196>
   db16e:	f000 f8d3 	bl	db318 <fabs>
   db172:	4b65      	ldr	r3, [pc, #404]	; (db308 <atan+0x358>)
   db174:	429e      	cmp	r6, r3
   db176:	ec55 4b10 	vmov	r4, r5, d0
   db17a:	dc39      	bgt.n	db1f0 <atan+0x240>
   db17c:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   db180:	429e      	cmp	r6, r3
   db182:	dc62      	bgt.n	db24a <atan+0x29a>
   db184:	ee10 2a10 	vmov	r2, s0
   db188:	ee10 0a10 	vmov	r0, s0
   db18c:	462b      	mov	r3, r5
   db18e:	4629      	mov	r1, r5
   db190:	f000 fba6 	bl	db8e0 <__adddf3>
   db194:	4b5b      	ldr	r3, [pc, #364]	; (db304 <atan+0x354>)
   db196:	2200      	movs	r2, #0
   db198:	f000 fba0 	bl	db8dc <__aeabi_dsub>
   db19c:	2200      	movs	r2, #0
   db19e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   db1a2:	4606      	mov	r6, r0
   db1a4:	460f      	mov	r7, r1
   db1a6:	4620      	mov	r0, r4
   db1a8:	4629      	mov	r1, r5
   db1aa:	f000 fb99 	bl	db8e0 <__adddf3>
   db1ae:	4602      	mov	r2, r0
   db1b0:	460b      	mov	r3, r1
   db1b2:	4630      	mov	r0, r6
   db1b4:	4639      	mov	r1, r7
   db1b6:	f000 fe73 	bl	dbea0 <__aeabi_ddiv>
   db1ba:	f04f 0b00 	mov.w	fp, #0
   db1be:	4604      	mov	r4, r0
   db1c0:	460d      	mov	r5, r1
   db1c2:	e718      	b.n	daff6 <atan+0x46>
   db1c4:	ed9f 0b48 	vldr	d0, [pc, #288]	; db2e8 <atan+0x338>
   db1c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db1cc:	4640      	mov	r0, r8
   db1ce:	4649      	mov	r1, r9
   db1d0:	f000 fb86 	bl	db8e0 <__adddf3>
   db1d4:	4622      	mov	r2, r4
   db1d6:	462b      	mov	r3, r5
   db1d8:	f000 fd38 	bl	dbc4c <__aeabi_dmul>
   db1dc:	4602      	mov	r2, r0
   db1de:	460b      	mov	r3, r1
   db1e0:	4620      	mov	r0, r4
   db1e2:	4629      	mov	r1, r5
   db1e4:	f000 fb7a 	bl	db8dc <__aeabi_dsub>
   db1e8:	ec41 0b10 	vmov	d0, r0, r1
   db1ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db1f0:	4b46      	ldr	r3, [pc, #280]	; (db30c <atan+0x35c>)
   db1f2:	429e      	cmp	r6, r3
   db1f4:	da1d      	bge.n	db232 <atan+0x282>
   db1f6:	ee10 0a10 	vmov	r0, s0
   db1fa:	4b45      	ldr	r3, [pc, #276]	; (db310 <atan+0x360>)
   db1fc:	2200      	movs	r2, #0
   db1fe:	4629      	mov	r1, r5
   db200:	f000 fb6c 	bl	db8dc <__aeabi_dsub>
   db204:	4b42      	ldr	r3, [pc, #264]	; (db310 <atan+0x360>)
   db206:	4606      	mov	r6, r0
   db208:	460f      	mov	r7, r1
   db20a:	2200      	movs	r2, #0
   db20c:	4620      	mov	r0, r4
   db20e:	4629      	mov	r1, r5
   db210:	f000 fd1c 	bl	dbc4c <__aeabi_dmul>
   db214:	4b3b      	ldr	r3, [pc, #236]	; (db304 <atan+0x354>)
   db216:	2200      	movs	r2, #0
   db218:	f000 fb62 	bl	db8e0 <__adddf3>
   db21c:	4602      	mov	r2, r0
   db21e:	460b      	mov	r3, r1
   db220:	4630      	mov	r0, r6
   db222:	4639      	mov	r1, r7
   db224:	f000 fe3c 	bl	dbea0 <__aeabi_ddiv>
   db228:	f04f 0b02 	mov.w	fp, #2
   db22c:	4604      	mov	r4, r0
   db22e:	460d      	mov	r5, r1
   db230:	e6e1      	b.n	daff6 <atan+0x46>
   db232:	462b      	mov	r3, r5
   db234:	ee10 2a10 	vmov	r2, s0
   db238:	4936      	ldr	r1, [pc, #216]	; (db314 <atan+0x364>)
   db23a:	2000      	movs	r0, #0
   db23c:	f000 fe30 	bl	dbea0 <__aeabi_ddiv>
   db240:	f04f 0b03 	mov.w	fp, #3
   db244:	4604      	mov	r4, r0
   db246:	460d      	mov	r5, r1
   db248:	e6d5      	b.n	daff6 <atan+0x46>
   db24a:	ee10 0a10 	vmov	r0, s0
   db24e:	4b2d      	ldr	r3, [pc, #180]	; (db304 <atan+0x354>)
   db250:	2200      	movs	r2, #0
   db252:	4629      	mov	r1, r5
   db254:	f000 fb42 	bl	db8dc <__aeabi_dsub>
   db258:	4b2a      	ldr	r3, [pc, #168]	; (db304 <atan+0x354>)
   db25a:	2200      	movs	r2, #0
   db25c:	4606      	mov	r6, r0
   db25e:	460f      	mov	r7, r1
   db260:	4620      	mov	r0, r4
   db262:	4629      	mov	r1, r5
   db264:	f000 fb3c 	bl	db8e0 <__adddf3>
   db268:	4602      	mov	r2, r0
   db26a:	460b      	mov	r3, r1
   db26c:	4630      	mov	r0, r6
   db26e:	4639      	mov	r1, r7
   db270:	f000 fe16 	bl	dbea0 <__aeabi_ddiv>
   db274:	f04f 0b01 	mov.w	fp, #1
   db278:	4604      	mov	r4, r0
   db27a:	460d      	mov	r5, r1
   db27c:	e6bb      	b.n	daff6 <atan+0x46>
   db27e:	bf00      	nop
   db280:	54442d18 	.word	0x54442d18
   db284:	3ff921fb 	.word	0x3ff921fb
   db288:	e322da11 	.word	0xe322da11
   db28c:	3f90ad3a 	.word	0x3f90ad3a
   db290:	24760deb 	.word	0x24760deb
   db294:	3fa97b4b 	.word	0x3fa97b4b
   db298:	a0d03d51 	.word	0xa0d03d51
   db29c:	3fb10d66 	.word	0x3fb10d66
   db2a0:	c54c206e 	.word	0xc54c206e
   db2a4:	3fb745cd 	.word	0x3fb745cd
   db2a8:	920083ff 	.word	0x920083ff
   db2ac:	3fc24924 	.word	0x3fc24924
   db2b0:	5555550d 	.word	0x5555550d
   db2b4:	3fd55555 	.word	0x3fd55555
   db2b8:	2c6a6c2f 	.word	0x2c6a6c2f
   db2bc:	bfa2b444 	.word	0xbfa2b444
   db2c0:	52defd9a 	.word	0x52defd9a
   db2c4:	3fadde2d 	.word	0x3fadde2d
   db2c8:	af749a6d 	.word	0xaf749a6d
   db2cc:	3fb3b0f2 	.word	0x3fb3b0f2
   db2d0:	fe231671 	.word	0xfe231671
   db2d4:	3fbc71c6 	.word	0x3fbc71c6
   db2d8:	9998ebc4 	.word	0x9998ebc4
   db2dc:	3fc99999 	.word	0x3fc99999
   db2e0:	8800759c 	.word	0x8800759c
   db2e4:	7e37e43c 	.word	0x7e37e43c
   db2e8:	54442d18 	.word	0x54442d18
   db2ec:	bff921fb 	.word	0xbff921fb
   db2f0:	440fffff 	.word	0x440fffff
   db2f4:	7ff00000 	.word	0x7ff00000
   db2f8:	3fdbffff 	.word	0x3fdbffff
   db2fc:	000ddf30 	.word	0x000ddf30
   db300:	000ddf50 	.word	0x000ddf50
   db304:	3ff00000 	.word	0x3ff00000
   db308:	3ff2ffff 	.word	0x3ff2ffff
   db30c:	40038000 	.word	0x40038000
   db310:	3ff80000 	.word	0x3ff80000
   db314:	bff00000 	.word	0xbff00000

000db318 <fabs>:
   db318:	ec51 0b10 	vmov	r0, r1, d0
   db31c:	ee10 2a10 	vmov	r2, s0
   db320:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db324:	ec43 2b10 	vmov	d0, r2, r3
   db328:	4770      	bx	lr
   db32a:	bf00      	nop

000db32c <finite>:
   db32c:	b082      	sub	sp, #8
   db32e:	ed8d 0b00 	vstr	d0, [sp]
   db332:	9801      	ldr	r0, [sp, #4]
   db334:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   db338:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   db33c:	0fc0      	lsrs	r0, r0, #31
   db33e:	b002      	add	sp, #8
   db340:	4770      	bx	lr
   db342:	bf00      	nop

000db344 <matherr>:
   db344:	2000      	movs	r0, #0
   db346:	4770      	bx	lr

000db348 <nan>:
   db348:	ed9f 0b01 	vldr	d0, [pc, #4]	; db350 <nan+0x8>
   db34c:	4770      	bx	lr
   db34e:	bf00      	nop
   db350:	00000000 	.word	0x00000000
   db354:	7ff80000 	.word	0x7ff80000

000db358 <rint>:
   db358:	b5f0      	push	{r4, r5, r6, r7, lr}
   db35a:	ec53 2b10 	vmov	r2, r3, d0
   db35e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   db362:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   db366:	2813      	cmp	r0, #19
   db368:	ee10 5a10 	vmov	r5, s0
   db36c:	b083      	sub	sp, #12
   db36e:	4619      	mov	r1, r3
   db370:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   db374:	dc31      	bgt.n	db3da <rint+0x82>
   db376:	2800      	cmp	r0, #0
   db378:	db4c      	blt.n	db414 <rint+0xbc>
   db37a:	4e3e      	ldr	r6, [pc, #248]	; (db474 <rint+0x11c>)
   db37c:	4106      	asrs	r6, r0
   db37e:	ea03 0706 	and.w	r7, r3, r6
   db382:	4317      	orrs	r7, r2
   db384:	d02e      	beq.n	db3e4 <rint+0x8c>
   db386:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   db38a:	431d      	orrs	r5, r3
   db38c:	ea4f 0656 	mov.w	r6, r6, lsr #1
   db390:	d00c      	beq.n	db3ac <rint+0x54>
   db392:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   db396:	2813      	cmp	r0, #19
   db398:	ea21 0606 	bic.w	r6, r1, r6
   db39c:	fa43 f100 	asr.w	r1, r3, r0
   db3a0:	ea41 0106 	orr.w	r1, r1, r6
   db3a4:	bf0c      	ite	eq
   db3a6:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   db3aa:	2500      	movne	r5, #0
   db3ac:	4832      	ldr	r0, [pc, #200]	; (db478 <rint+0x120>)
   db3ae:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   db3b2:	462a      	mov	r2, r5
   db3b4:	e9d4 4500 	ldrd	r4, r5, [r4]
   db3b8:	460b      	mov	r3, r1
   db3ba:	4620      	mov	r0, r4
   db3bc:	4629      	mov	r1, r5
   db3be:	f000 fa8f 	bl	db8e0 <__adddf3>
   db3c2:	e9cd 0100 	strd	r0, r1, [sp]
   db3c6:	e9dd 0100 	ldrd	r0, r1, [sp]
   db3ca:	4622      	mov	r2, r4
   db3cc:	462b      	mov	r3, r5
   db3ce:	f000 fa85 	bl	db8dc <__aeabi_dsub>
   db3d2:	ec41 0b10 	vmov	d0, r0, r1
   db3d6:	b003      	add	sp, #12
   db3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db3da:	2833      	cmp	r0, #51	; 0x33
   db3dc:	dd06      	ble.n	db3ec <rint+0x94>
   db3de:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   db3e2:	d040      	beq.n	db466 <rint+0x10e>
   db3e4:	ec43 2b10 	vmov	d0, r2, r3
   db3e8:	b003      	add	sp, #12
   db3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db3ec:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   db3f0:	f04f 30ff 	mov.w	r0, #4294967295
   db3f4:	40f0      	lsrs	r0, r6
   db3f6:	4202      	tst	r2, r0
   db3f8:	d0f4      	beq.n	db3e4 <rint+0x8c>
   db3fa:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   db3fe:	ea4f 0350 	mov.w	r3, r0, lsr #1
   db402:	d0d3      	beq.n	db3ac <rint+0x54>
   db404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   db408:	ea25 0503 	bic.w	r5, r5, r3
   db40c:	fa42 f606 	asr.w	r6, r2, r6
   db410:	4335      	orrs	r5, r6
   db412:	e7cb      	b.n	db3ac <rint+0x54>
   db414:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   db418:	4310      	orrs	r0, r2
   db41a:	d0e3      	beq.n	db3e4 <rint+0x8c>
   db41c:	f3c3 0013 	ubfx	r0, r3, #0, #20
   db420:	4310      	orrs	r0, r2
   db422:	4245      	negs	r5, r0
   db424:	4305      	orrs	r5, r0
   db426:	4814      	ldr	r0, [pc, #80]	; (db478 <rint+0x120>)
   db428:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   db42c:	e9d0 6700 	ldrd	r6, r7, [r0]
   db430:	0c59      	lsrs	r1, r3, #17
   db432:	0b2d      	lsrs	r5, r5, #12
   db434:	0449      	lsls	r1, r1, #17
   db436:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   db43a:	ea45 0301 	orr.w	r3, r5, r1
   db43e:	4630      	mov	r0, r6
   db440:	4639      	mov	r1, r7
   db442:	f000 fa4d 	bl	db8e0 <__adddf3>
   db446:	e9cd 0100 	strd	r0, r1, [sp]
   db44a:	463b      	mov	r3, r7
   db44c:	e9dd 0100 	ldrd	r0, r1, [sp]
   db450:	4632      	mov	r2, r6
   db452:	f000 fa43 	bl	db8dc <__aeabi_dsub>
   db456:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db45a:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   db45e:	ec41 0b10 	vmov	d0, r0, r1
   db462:	b003      	add	sp, #12
   db464:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db466:	ee10 0a10 	vmov	r0, s0
   db46a:	f000 fa39 	bl	db8e0 <__adddf3>
   db46e:	ec41 0b10 	vmov	d0, r0, r1
   db472:	e7b9      	b.n	db3e8 <rint+0x90>
   db474:	000fffff 	.word	0x000fffff
   db478:	000ddf70 	.word	0x000ddf70
   db47c:	00000000 	.word	0x00000000

000db480 <scalbn>:
   db480:	b538      	push	{r3, r4, r5, lr}
   db482:	ec53 2b10 	vmov	r2, r3, d0
   db486:	f3c3 510a 	ubfx	r1, r3, #20, #11
   db48a:	461c      	mov	r4, r3
   db48c:	4605      	mov	r5, r0
   db48e:	bb81      	cbnz	r1, db4f2 <scalbn+0x72>
   db490:	ee10 1a10 	vmov	r1, s0
   db494:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   db498:	4321      	orrs	r1, r4
   db49a:	d029      	beq.n	db4f0 <scalbn+0x70>
   db49c:	4619      	mov	r1, r3
   db49e:	2200      	movs	r2, #0
   db4a0:	4b3d      	ldr	r3, [pc, #244]	; (db598 <scalbn+0x118>)
   db4a2:	4c3e      	ldr	r4, [pc, #248]	; (db59c <scalbn+0x11c>)
   db4a4:	ee10 0a10 	vmov	r0, s0
   db4a8:	f000 fbd0 	bl	dbc4c <__aeabi_dmul>
   db4ac:	42a5      	cmp	r5, r4
   db4ae:	4602      	mov	r2, r0
   db4b0:	460b      	mov	r3, r1
   db4b2:	db16      	blt.n	db4e2 <scalbn+0x62>
   db4b4:	460c      	mov	r4, r1
   db4b6:	f3c1 510a 	ubfx	r1, r1, #20, #11
   db4ba:	3936      	subs	r1, #54	; 0x36
   db4bc:	4429      	add	r1, r5
   db4be:	f240 70fe 	movw	r0, #2046	; 0x7fe
   db4c2:	4281      	cmp	r1, r0
   db4c4:	dc21      	bgt.n	db50a <scalbn+0x8a>
   db4c6:	2900      	cmp	r1, #0
   db4c8:	dc47      	bgt.n	db55a <scalbn+0xda>
   db4ca:	f111 0f35 	cmn.w	r1, #53	; 0x35
   db4ce:	da34      	bge.n	db53a <scalbn+0xba>
   db4d0:	f24c 3150 	movw	r1, #50000	; 0xc350
   db4d4:	428d      	cmp	r5, r1
   db4d6:	dc18      	bgt.n	db50a <scalbn+0x8a>
   db4d8:	2b00      	cmp	r3, #0
   db4da:	a127      	add	r1, pc, #156	; (adr r1, db578 <scalbn+0xf8>)
   db4dc:	e9d1 0100 	ldrd	r0, r1, [r1]
   db4e0:	db44      	blt.n	db56c <scalbn+0xec>
   db4e2:	a325      	add	r3, pc, #148	; (adr r3, db578 <scalbn+0xf8>)
   db4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   db4e8:	f000 fbb0 	bl	dbc4c <__aeabi_dmul>
   db4ec:	ec41 0b10 	vmov	d0, r0, r1
   db4f0:	bd38      	pop	{r3, r4, r5, pc}
   db4f2:	f240 70ff 	movw	r0, #2047	; 0x7ff
   db4f6:	4281      	cmp	r1, r0
   db4f8:	d1e0      	bne.n	db4bc <scalbn+0x3c>
   db4fa:	ee10 0a10 	vmov	r0, s0
   db4fe:	4619      	mov	r1, r3
   db500:	f000 f9ee 	bl	db8e0 <__adddf3>
   db504:	ec41 0b10 	vmov	d0, r0, r1
   db508:	bd38      	pop	{r3, r4, r5, pc}
   db50a:	2b00      	cmp	r3, #0
   db50c:	a11c      	add	r1, pc, #112	; (adr r1, db580 <scalbn+0x100>)
   db50e:	e9d1 0100 	ldrd	r0, r1, [r1]
   db512:	db07      	blt.n	db524 <scalbn+0xa4>
   db514:	a31a      	add	r3, pc, #104	; (adr r3, db580 <scalbn+0x100>)
   db516:	e9d3 2300 	ldrd	r2, r3, [r3]
   db51a:	f000 fb97 	bl	dbc4c <__aeabi_dmul>
   db51e:	ec41 0b10 	vmov	d0, r0, r1
   db522:	bd38      	pop	{r3, r4, r5, pc}
   db524:	a118      	add	r1, pc, #96	; (adr r1, db588 <scalbn+0x108>)
   db526:	e9d1 0100 	ldrd	r0, r1, [r1]
   db52a:	a315      	add	r3, pc, #84	; (adr r3, db580 <scalbn+0x100>)
   db52c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db530:	f000 fb8c 	bl	dbc4c <__aeabi_dmul>
   db534:	ec41 0b10 	vmov	d0, r0, r1
   db538:	e7f3      	b.n	db522 <scalbn+0xa2>
   db53a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   db53e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   db542:	3136      	adds	r1, #54	; 0x36
   db544:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   db548:	4610      	mov	r0, r2
   db54a:	4619      	mov	r1, r3
   db54c:	2200      	movs	r2, #0
   db54e:	4b14      	ldr	r3, [pc, #80]	; (db5a0 <scalbn+0x120>)
   db550:	f000 fb7c 	bl	dbc4c <__aeabi_dmul>
   db554:	ec41 0b10 	vmov	d0, r0, r1
   db558:	bd38      	pop	{r3, r4, r5, pc}
   db55a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   db55e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   db562:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   db566:	ec43 2b10 	vmov	d0, r2, r3
   db56a:	bd38      	pop	{r3, r4, r5, pc}
   db56c:	a108      	add	r1, pc, #32	; (adr r1, db590 <scalbn+0x110>)
   db56e:	e9d1 0100 	ldrd	r0, r1, [r1]
   db572:	e7b6      	b.n	db4e2 <scalbn+0x62>
   db574:	f3af 8000 	nop.w
   db578:	c2f8f359 	.word	0xc2f8f359
   db57c:	01a56e1f 	.word	0x01a56e1f
   db580:	8800759c 	.word	0x8800759c
   db584:	7e37e43c 	.word	0x7e37e43c
   db588:	8800759c 	.word	0x8800759c
   db58c:	fe37e43c 	.word	0xfe37e43c
   db590:	c2f8f359 	.word	0xc2f8f359
   db594:	81a56e1f 	.word	0x81a56e1f
   db598:	43500000 	.word	0x43500000
   db59c:	ffff3cb0 	.word	0xffff3cb0
   db5a0:	3c900000 	.word	0x3c900000

000db5a4 <atanf>:
   db5a4:	b538      	push	{r3, r4, r5, lr}
   db5a6:	ee10 5a10 	vmov	r5, s0
   db5aa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   db5ae:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   db5b2:	eef0 7a40 	vmov.f32	s15, s0
   db5b6:	db0b      	blt.n	db5d0 <atanf+0x2c>
   db5b8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   db5bc:	dc59      	bgt.n	db672 <atanf+0xce>
   db5be:	eddf 7a52 	vldr	s15, [pc, #328]	; db708 <atanf+0x164>
   db5c2:	ed9f 0a52 	vldr	s0, [pc, #328]	; db70c <atanf+0x168>
   db5c6:	2d00      	cmp	r5, #0
   db5c8:	bfc8      	it	gt
   db5ca:	eeb0 0a67 	vmovgt.f32	s0, s15
   db5ce:	bd38      	pop	{r3, r4, r5, pc}
   db5d0:	4b4f      	ldr	r3, [pc, #316]	; (db710 <atanf+0x16c>)
   db5d2:	429c      	cmp	r4, r3
   db5d4:	dc5c      	bgt.n	db690 <atanf+0xec>
   db5d6:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   db5da:	db4d      	blt.n	db678 <atanf+0xd4>
   db5dc:	f04f 33ff 	mov.w	r3, #4294967295
   db5e0:	ee27 6aa7 	vmul.f32	s12, s15, s15
   db5e4:	ed9f 1a4b 	vldr	s2, [pc, #300]	; db714 <atanf+0x170>
   db5e8:	ed9f 2a4b 	vldr	s4, [pc, #300]	; db718 <atanf+0x174>
   db5ec:	ed9f 3a4b 	vldr	s6, [pc, #300]	; db71c <atanf+0x178>
   db5f0:	eddf 1a4b 	vldr	s3, [pc, #300]	; db720 <atanf+0x17c>
   db5f4:	eddf 2a4b 	vldr	s5, [pc, #300]	; db724 <atanf+0x180>
   db5f8:	ed9f 4a4b 	vldr	s8, [pc, #300]	; db728 <atanf+0x184>
   db5fc:	eddf 3a4b 	vldr	s7, [pc, #300]	; db72c <atanf+0x188>
   db600:	ed9f 5a4b 	vldr	s10, [pc, #300]	; db730 <atanf+0x18c>
   db604:	eddf 4a4b 	vldr	s9, [pc, #300]	; db734 <atanf+0x190>
   db608:	eddf 6a4b 	vldr	s13, [pc, #300]	; db738 <atanf+0x194>
   db60c:	eddf 5a4b 	vldr	s11, [pc, #300]	; db73c <atanf+0x198>
   db610:	ee26 7a06 	vmul.f32	s14, s12, s12
   db614:	1c5a      	adds	r2, r3, #1
   db616:	eea7 2a01 	vfma.f32	s4, s14, s2
   db61a:	eee7 2a21 	vfma.f32	s5, s14, s3
   db61e:	eea2 3a07 	vfma.f32	s6, s4, s14
   db622:	eee2 3a87 	vfma.f32	s7, s5, s14
   db626:	eea3 4a07 	vfma.f32	s8, s6, s14
   db62a:	eee3 4a87 	vfma.f32	s9, s7, s14
   db62e:	eea4 5a07 	vfma.f32	s10, s8, s14
   db632:	eee4 5a87 	vfma.f32	s11, s9, s14
   db636:	eee5 6a07 	vfma.f32	s13, s10, s14
   db63a:	ee25 7a87 	vmul.f32	s14, s11, s14
   db63e:	ee66 6a86 	vmul.f32	s13, s13, s12
   db642:	d03a      	beq.n	db6ba <atanf+0x116>
   db644:	493e      	ldr	r1, [pc, #248]	; (db740 <atanf+0x19c>)
   db646:	4a3f      	ldr	r2, [pc, #252]	; (db744 <atanf+0x1a0>)
   db648:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   db64c:	ee76 6a87 	vadd.f32	s13, s13, s14
   db650:	ed91 0a00 	vldr	s0, [r1]
   db654:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   db658:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db65c:	2d00      	cmp	r5, #0
   db65e:	ed93 7a00 	vldr	s14, [r3]
   db662:	ee70 7a67 	vsub.f32	s15, s0, s15
   db666:	ee37 0a67 	vsub.f32	s0, s14, s15
   db66a:	dab0      	bge.n	db5ce <atanf+0x2a>
   db66c:	eeb1 0a40 	vneg.f32	s0, s0
   db670:	bd38      	pop	{r3, r4, r5, pc}
   db672:	ee30 0a00 	vadd.f32	s0, s0, s0
   db676:	bd38      	pop	{r3, r4, r5, pc}
   db678:	ed9f 7a33 	vldr	s14, [pc, #204]	; db748 <atanf+0x1a4>
   db67c:	ee30 7a07 	vadd.f32	s14, s0, s14
   db680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   db684:	eeb4 7ae6 	vcmpe.f32	s14, s13
   db688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db68c:	dda6      	ble.n	db5dc <atanf+0x38>
   db68e:	bd38      	pop	{r3, r4, r5, pc}
   db690:	f000 f860 	bl	db754 <fabsf>
   db694:	4b2d      	ldr	r3, [pc, #180]	; (db74c <atanf+0x1a8>)
   db696:	429c      	cmp	r4, r3
   db698:	dc16      	bgt.n	db6c8 <atanf+0x124>
   db69a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   db69e:	429c      	cmp	r4, r3
   db6a0:	dc27      	bgt.n	db6f2 <atanf+0x14e>
   db6a2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   db6a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   db6aa:	eea0 7a27 	vfma.f32	s14, s0, s15
   db6ae:	2300      	movs	r3, #0
   db6b0:	ee30 0a27 	vadd.f32	s0, s0, s15
   db6b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
   db6b8:	e792      	b.n	db5e0 <atanf+0x3c>
   db6ba:	ee76 6a87 	vadd.f32	s13, s13, s14
   db6be:	eee6 7ae7 	vfms.f32	s15, s13, s15
   db6c2:	eeb0 0a67 	vmov.f32	s0, s15
   db6c6:	bd38      	pop	{r3, r4, r5, pc}
   db6c8:	4b21      	ldr	r3, [pc, #132]	; (db750 <atanf+0x1ac>)
   db6ca:	429c      	cmp	r4, r3
   db6cc:	dc0b      	bgt.n	db6e6 <atanf+0x142>
   db6ce:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   db6d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   db6d6:	eea0 7a27 	vfma.f32	s14, s0, s15
   db6da:	2302      	movs	r3, #2
   db6dc:	ee30 0a67 	vsub.f32	s0, s0, s15
   db6e0:	eec0 7a07 	vdiv.f32	s15, s0, s14
   db6e4:	e77c      	b.n	db5e0 <atanf+0x3c>
   db6e6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   db6ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
   db6ee:	2303      	movs	r3, #3
   db6f0:	e776      	b.n	db5e0 <atanf+0x3c>
   db6f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   db6f6:	ee30 7a67 	vsub.f32	s14, s0, s15
   db6fa:	ee30 0a27 	vadd.f32	s0, s0, s15
   db6fe:	2301      	movs	r3, #1
   db700:	eec7 7a00 	vdiv.f32	s15, s14, s0
   db704:	e76c      	b.n	db5e0 <atanf+0x3c>
   db706:	bf00      	nop
   db708:	3fc90fdb 	.word	0x3fc90fdb
   db70c:	bfc90fdb 	.word	0xbfc90fdb
   db710:	3edfffff 	.word	0x3edfffff
   db714:	3c8569d7 	.word	0x3c8569d7
   db718:	3d4bda59 	.word	0x3d4bda59
   db71c:	3d886b35 	.word	0x3d886b35
   db720:	bd15a221 	.word	0xbd15a221
   db724:	bd6ef16b 	.word	0xbd6ef16b
   db728:	3dba2e6e 	.word	0x3dba2e6e
   db72c:	bd9d8795 	.word	0xbd9d8795
   db730:	3e124925 	.word	0x3e124925
   db734:	bde38e38 	.word	0xbde38e38
   db738:	3eaaaaab 	.word	0x3eaaaaab
   db73c:	be4ccccd 	.word	0xbe4ccccd
   db740:	000ddf90 	.word	0x000ddf90
   db744:	000ddf80 	.word	0x000ddf80
   db748:	7149f2ca 	.word	0x7149f2ca
   db74c:	3f97ffff 	.word	0x3f97ffff
   db750:	401bffff 	.word	0x401bffff

000db754 <fabsf>:
   db754:	ee10 3a10 	vmov	r3, s0
   db758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   db75c:	ee00 3a10 	vmov	s0, r3
   db760:	4770      	bx	lr
   db762:	bf00      	nop

000db764 <floorf>:
   db764:	ee10 2a10 	vmov	r2, s0
   db768:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   db76c:	3b7f      	subs	r3, #127	; 0x7f
   db76e:	2b16      	cmp	r3, #22
   db770:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   db774:	dc1a      	bgt.n	db7ac <floorf+0x48>
   db776:	2b00      	cmp	r3, #0
   db778:	db1e      	blt.n	db7b8 <floorf+0x54>
   db77a:	491a      	ldr	r1, [pc, #104]	; (db7e4 <floorf+0x80>)
   db77c:	4119      	asrs	r1, r3
   db77e:	420a      	tst	r2, r1
   db780:	d027      	beq.n	db7d2 <floorf+0x6e>
   db782:	eddf 7a19 	vldr	s15, [pc, #100]	; db7e8 <floorf+0x84>
   db786:	ee70 7a27 	vadd.f32	s15, s0, s15
   db78a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   db78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db792:	dd1e      	ble.n	db7d2 <floorf+0x6e>
   db794:	2a00      	cmp	r2, #0
   db796:	da04      	bge.n	db7a2 <floorf+0x3e>
   db798:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   db79c:	fa40 f303 	asr.w	r3, r0, r3
   db7a0:	441a      	add	r2, r3
   db7a2:	ea22 0301 	bic.w	r3, r2, r1
   db7a6:	ee00 3a10 	vmov	s0, r3
   db7aa:	4770      	bx	lr
   db7ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   db7b0:	d30f      	bcc.n	db7d2 <floorf+0x6e>
   db7b2:	ee30 0a00 	vadd.f32	s0, s0, s0
   db7b6:	4770      	bx	lr
   db7b8:	eddf 7a0b 	vldr	s15, [pc, #44]	; db7e8 <floorf+0x84>
   db7bc:	ee70 7a27 	vadd.f32	s15, s0, s15
   db7c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   db7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db7c8:	dd03      	ble.n	db7d2 <floorf+0x6e>
   db7ca:	2a00      	cmp	r2, #0
   db7cc:	db02      	blt.n	db7d4 <floorf+0x70>
   db7ce:	ed9f 0a07 	vldr	s0, [pc, #28]	; db7ec <floorf+0x88>
   db7d2:	4770      	bx	lr
   db7d4:	2900      	cmp	r1, #0
   db7d6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   db7da:	bf18      	it	ne
   db7dc:	eeb0 0a67 	vmovne.f32	s0, s15
   db7e0:	4770      	bx	lr
   db7e2:	bf00      	nop
   db7e4:	007fffff 	.word	0x007fffff
   db7e8:	7149f2ca 	.word	0x7149f2ca
   db7ec:	00000000 	.word	0x00000000

000db7f0 <scalbnf>:
   db7f0:	b082      	sub	sp, #8
   db7f2:	ed8d 0a01 	vstr	s0, [sp, #4]
   db7f6:	9b01      	ldr	r3, [sp, #4]
   db7f8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   db7fc:	d02a      	beq.n	db854 <scalbnf+0x64>
   db7fe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   db802:	d223      	bcs.n	db84c <scalbnf+0x5c>
   db804:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   db808:	d128      	bne.n	db85c <scalbnf+0x6c>
   db80a:	ed9d 7a01 	vldr	s14, [sp, #4]
   db80e:	eddf 7a2a 	vldr	s15, [pc, #168]	; db8b8 <scalbnf+0xc8>
   db812:	4b2a      	ldr	r3, [pc, #168]	; (db8bc <scalbnf+0xcc>)
   db814:	ee67 7a27 	vmul.f32	s15, s14, s15
   db818:	4298      	cmp	r0, r3
   db81a:	edcd 7a01 	vstr	s15, [sp, #4]
   db81e:	db37      	blt.n	db890 <scalbnf+0xa0>
   db820:	9b01      	ldr	r3, [sp, #4]
   db822:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   db826:	3a19      	subs	r2, #25
   db828:	4402      	add	r2, r0
   db82a:	2afe      	cmp	r2, #254	; 0xfe
   db82c:	dd1a      	ble.n	db864 <scalbnf+0x74>
   db82e:	ed9f 0a24 	vldr	s0, [pc, #144]	; db8c0 <scalbnf+0xd0>
   db832:	ed9f 7a24 	vldr	s14, [pc, #144]	; db8c4 <scalbnf+0xd4>
   db836:	9b01      	ldr	r3, [sp, #4]
   db838:	2b00      	cmp	r3, #0
   db83a:	eef0 7a40 	vmov.f32	s15, s0
   db83e:	bfb8      	it	lt
   db840:	eeb0 0a47 	vmovlt.f32	s0, s14
   db844:	ee20 0a27 	vmul.f32	s0, s0, s15
   db848:	b002      	add	sp, #8
   db84a:	4770      	bx	lr
   db84c:	ee30 0a00 	vadd.f32	s0, s0, s0
   db850:	b002      	add	sp, #8
   db852:	4770      	bx	lr
   db854:	ed9d 0a01 	vldr	s0, [sp, #4]
   db858:	b002      	add	sp, #8
   db85a:	4770      	bx	lr
   db85c:	0dd2      	lsrs	r2, r2, #23
   db85e:	4402      	add	r2, r0
   db860:	2afe      	cmp	r2, #254	; 0xfe
   db862:	dce4      	bgt.n	db82e <scalbnf+0x3e>
   db864:	2a00      	cmp	r2, #0
   db866:	dc0b      	bgt.n	db880 <scalbnf+0x90>
   db868:	f112 0f16 	cmn.w	r2, #22
   db86c:	da17      	bge.n	db89e <scalbnf+0xae>
   db86e:	f24c 3350 	movw	r3, #50000	; 0xc350
   db872:	4298      	cmp	r0, r3
   db874:	dcdb      	bgt.n	db82e <scalbnf+0x3e>
   db876:	ed9f 0a14 	vldr	s0, [pc, #80]	; db8c8 <scalbnf+0xd8>
   db87a:	ed9f 7a14 	vldr	s14, [pc, #80]	; db8cc <scalbnf+0xdc>
   db87e:	e7da      	b.n	db836 <scalbnf+0x46>
   db880:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   db884:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   db888:	ee00 3a10 	vmov	s0, r3
   db88c:	b002      	add	sp, #8
   db88e:	4770      	bx	lr
   db890:	ed9f 0a0d 	vldr	s0, [pc, #52]	; db8c8 <scalbnf+0xd8>
   db894:	eddd 7a01 	vldr	s15, [sp, #4]
   db898:	ee27 0a80 	vmul.f32	s0, s15, s0
   db89c:	e7d8      	b.n	db850 <scalbnf+0x60>
   db89e:	3219      	adds	r2, #25
   db8a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   db8a4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   db8a8:	eddf 7a09 	vldr	s15, [pc, #36]	; db8d0 <scalbnf+0xe0>
   db8ac:	ee07 3a10 	vmov	s14, r3
   db8b0:	ee27 0a27 	vmul.f32	s0, s14, s15
   db8b4:	e7cc      	b.n	db850 <scalbnf+0x60>
   db8b6:	bf00      	nop
   db8b8:	4c000000 	.word	0x4c000000
   db8bc:	ffff3cb0 	.word	0xffff3cb0
   db8c0:	7149f2ca 	.word	0x7149f2ca
   db8c4:	f149f2ca 	.word	0xf149f2ca
   db8c8:	0da24260 	.word	0x0da24260
   db8cc:	8da24260 	.word	0x8da24260
   db8d0:	33000000 	.word	0x33000000

000db8d4 <__aeabi_drsub>:
   db8d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   db8d8:	e002      	b.n	db8e0 <__adddf3>
   db8da:	bf00      	nop

000db8dc <__aeabi_dsub>:
   db8dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000db8e0 <__adddf3>:
   db8e0:	b530      	push	{r4, r5, lr}
   db8e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   db8e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   db8ea:	ea94 0f05 	teq	r4, r5
   db8ee:	bf08      	it	eq
   db8f0:	ea90 0f02 	teqeq	r0, r2
   db8f4:	bf1f      	itttt	ne
   db8f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   db8fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   db8fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db902:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db906:	f000 80e2 	beq.w	dbace <__adddf3+0x1ee>
   db90a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db90e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db912:	bfb8      	it	lt
   db914:	426d      	neglt	r5, r5
   db916:	dd0c      	ble.n	db932 <__adddf3+0x52>
   db918:	442c      	add	r4, r5
   db91a:	ea80 0202 	eor.w	r2, r0, r2
   db91e:	ea81 0303 	eor.w	r3, r1, r3
   db922:	ea82 0000 	eor.w	r0, r2, r0
   db926:	ea83 0101 	eor.w	r1, r3, r1
   db92a:	ea80 0202 	eor.w	r2, r0, r2
   db92e:	ea81 0303 	eor.w	r3, r1, r3
   db932:	2d36      	cmp	r5, #54	; 0x36
   db934:	bf88      	it	hi
   db936:	bd30      	pophi	{r4, r5, pc}
   db938:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db93c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db940:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db944:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db948:	d002      	beq.n	db950 <__adddf3+0x70>
   db94a:	4240      	negs	r0, r0
   db94c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db950:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db954:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db958:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db95c:	d002      	beq.n	db964 <__adddf3+0x84>
   db95e:	4252      	negs	r2, r2
   db960:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db964:	ea94 0f05 	teq	r4, r5
   db968:	f000 80a7 	beq.w	dbaba <__adddf3+0x1da>
   db96c:	f1a4 0401 	sub.w	r4, r4, #1
   db970:	f1d5 0e20 	rsbs	lr, r5, #32
   db974:	db0d      	blt.n	db992 <__adddf3+0xb2>
   db976:	fa02 fc0e 	lsl.w	ip, r2, lr
   db97a:	fa22 f205 	lsr.w	r2, r2, r5
   db97e:	1880      	adds	r0, r0, r2
   db980:	f141 0100 	adc.w	r1, r1, #0
   db984:	fa03 f20e 	lsl.w	r2, r3, lr
   db988:	1880      	adds	r0, r0, r2
   db98a:	fa43 f305 	asr.w	r3, r3, r5
   db98e:	4159      	adcs	r1, r3
   db990:	e00e      	b.n	db9b0 <__adddf3+0xd0>
   db992:	f1a5 0520 	sub.w	r5, r5, #32
   db996:	f10e 0e20 	add.w	lr, lr, #32
   db99a:	2a01      	cmp	r2, #1
   db99c:	fa03 fc0e 	lsl.w	ip, r3, lr
   db9a0:	bf28      	it	cs
   db9a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   db9a6:	fa43 f305 	asr.w	r3, r3, r5
   db9aa:	18c0      	adds	r0, r0, r3
   db9ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   db9b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db9b4:	d507      	bpl.n	db9c6 <__adddf3+0xe6>
   db9b6:	f04f 0e00 	mov.w	lr, #0
   db9ba:	f1dc 0c00 	rsbs	ip, ip, #0
   db9be:	eb7e 0000 	sbcs.w	r0, lr, r0
   db9c2:	eb6e 0101 	sbc.w	r1, lr, r1
   db9c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   db9ca:	d31b      	bcc.n	dba04 <__adddf3+0x124>
   db9cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   db9d0:	d30c      	bcc.n	db9ec <__adddf3+0x10c>
   db9d2:	0849      	lsrs	r1, r1, #1
   db9d4:	ea5f 0030 	movs.w	r0, r0, rrx
   db9d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   db9dc:	f104 0401 	add.w	r4, r4, #1
   db9e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   db9e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   db9e8:	f080 809a 	bcs.w	dbb20 <__adddf3+0x240>
   db9ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db9f0:	bf08      	it	eq
   db9f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db9f6:	f150 0000 	adcs.w	r0, r0, #0
   db9fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db9fe:	ea41 0105 	orr.w	r1, r1, r5
   dba02:	bd30      	pop	{r4, r5, pc}
   dba04:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dba08:	4140      	adcs	r0, r0
   dba0a:	eb41 0101 	adc.w	r1, r1, r1
   dba0e:	3c01      	subs	r4, #1
   dba10:	bf28      	it	cs
   dba12:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dba16:	d2e9      	bcs.n	db9ec <__adddf3+0x10c>
   dba18:	f091 0f00 	teq	r1, #0
   dba1c:	bf04      	itt	eq
   dba1e:	4601      	moveq	r1, r0
   dba20:	2000      	moveq	r0, #0
   dba22:	fab1 f381 	clz	r3, r1
   dba26:	bf08      	it	eq
   dba28:	3320      	addeq	r3, #32
   dba2a:	f1a3 030b 	sub.w	r3, r3, #11
   dba2e:	f1b3 0220 	subs.w	r2, r3, #32
   dba32:	da0c      	bge.n	dba4e <__adddf3+0x16e>
   dba34:	320c      	adds	r2, #12
   dba36:	dd08      	ble.n	dba4a <__adddf3+0x16a>
   dba38:	f102 0c14 	add.w	ip, r2, #20
   dba3c:	f1c2 020c 	rsb	r2, r2, #12
   dba40:	fa01 f00c 	lsl.w	r0, r1, ip
   dba44:	fa21 f102 	lsr.w	r1, r1, r2
   dba48:	e00c      	b.n	dba64 <__adddf3+0x184>
   dba4a:	f102 0214 	add.w	r2, r2, #20
   dba4e:	bfd8      	it	le
   dba50:	f1c2 0c20 	rsble	ip, r2, #32
   dba54:	fa01 f102 	lsl.w	r1, r1, r2
   dba58:	fa20 fc0c 	lsr.w	ip, r0, ip
   dba5c:	bfdc      	itt	le
   dba5e:	ea41 010c 	orrle.w	r1, r1, ip
   dba62:	4090      	lslle	r0, r2
   dba64:	1ae4      	subs	r4, r4, r3
   dba66:	bfa2      	ittt	ge
   dba68:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dba6c:	4329      	orrge	r1, r5
   dba6e:	bd30      	popge	{r4, r5, pc}
   dba70:	ea6f 0404 	mvn.w	r4, r4
   dba74:	3c1f      	subs	r4, #31
   dba76:	da1c      	bge.n	dbab2 <__adddf3+0x1d2>
   dba78:	340c      	adds	r4, #12
   dba7a:	dc0e      	bgt.n	dba9a <__adddf3+0x1ba>
   dba7c:	f104 0414 	add.w	r4, r4, #20
   dba80:	f1c4 0220 	rsb	r2, r4, #32
   dba84:	fa20 f004 	lsr.w	r0, r0, r4
   dba88:	fa01 f302 	lsl.w	r3, r1, r2
   dba8c:	ea40 0003 	orr.w	r0, r0, r3
   dba90:	fa21 f304 	lsr.w	r3, r1, r4
   dba94:	ea45 0103 	orr.w	r1, r5, r3
   dba98:	bd30      	pop	{r4, r5, pc}
   dba9a:	f1c4 040c 	rsb	r4, r4, #12
   dba9e:	f1c4 0220 	rsb	r2, r4, #32
   dbaa2:	fa20 f002 	lsr.w	r0, r0, r2
   dbaa6:	fa01 f304 	lsl.w	r3, r1, r4
   dbaaa:	ea40 0003 	orr.w	r0, r0, r3
   dbaae:	4629      	mov	r1, r5
   dbab0:	bd30      	pop	{r4, r5, pc}
   dbab2:	fa21 f004 	lsr.w	r0, r1, r4
   dbab6:	4629      	mov	r1, r5
   dbab8:	bd30      	pop	{r4, r5, pc}
   dbaba:	f094 0f00 	teq	r4, #0
   dbabe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dbac2:	bf06      	itte	eq
   dbac4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dbac8:	3401      	addeq	r4, #1
   dbaca:	3d01      	subne	r5, #1
   dbacc:	e74e      	b.n	db96c <__adddf3+0x8c>
   dbace:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbad2:	bf18      	it	ne
   dbad4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dbad8:	d029      	beq.n	dbb2e <__adddf3+0x24e>
   dbada:	ea94 0f05 	teq	r4, r5
   dbade:	bf08      	it	eq
   dbae0:	ea90 0f02 	teqeq	r0, r2
   dbae4:	d005      	beq.n	dbaf2 <__adddf3+0x212>
   dbae6:	ea54 0c00 	orrs.w	ip, r4, r0
   dbaea:	bf04      	itt	eq
   dbaec:	4619      	moveq	r1, r3
   dbaee:	4610      	moveq	r0, r2
   dbaf0:	bd30      	pop	{r4, r5, pc}
   dbaf2:	ea91 0f03 	teq	r1, r3
   dbaf6:	bf1e      	ittt	ne
   dbaf8:	2100      	movne	r1, #0
   dbafa:	2000      	movne	r0, #0
   dbafc:	bd30      	popne	{r4, r5, pc}
   dbafe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dbb02:	d105      	bne.n	dbb10 <__adddf3+0x230>
   dbb04:	0040      	lsls	r0, r0, #1
   dbb06:	4149      	adcs	r1, r1
   dbb08:	bf28      	it	cs
   dbb0a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dbb0e:	bd30      	pop	{r4, r5, pc}
   dbb10:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dbb14:	bf3c      	itt	cc
   dbb16:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dbb1a:	bd30      	popcc	{r4, r5, pc}
   dbb1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbb20:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dbb24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbb28:	f04f 0000 	mov.w	r0, #0
   dbb2c:	bd30      	pop	{r4, r5, pc}
   dbb2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbb32:	bf1a      	itte	ne
   dbb34:	4619      	movne	r1, r3
   dbb36:	4610      	movne	r0, r2
   dbb38:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dbb3c:	bf1c      	itt	ne
   dbb3e:	460b      	movne	r3, r1
   dbb40:	4602      	movne	r2, r0
   dbb42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbb46:	bf06      	itte	eq
   dbb48:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dbb4c:	ea91 0f03 	teqeq	r1, r3
   dbb50:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dbb54:	bd30      	pop	{r4, r5, pc}
   dbb56:	bf00      	nop

000dbb58 <__aeabi_ui2d>:
   dbb58:	f090 0f00 	teq	r0, #0
   dbb5c:	bf04      	itt	eq
   dbb5e:	2100      	moveq	r1, #0
   dbb60:	4770      	bxeq	lr
   dbb62:	b530      	push	{r4, r5, lr}
   dbb64:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbb68:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbb6c:	f04f 0500 	mov.w	r5, #0
   dbb70:	f04f 0100 	mov.w	r1, #0
   dbb74:	e750      	b.n	dba18 <__adddf3+0x138>
   dbb76:	bf00      	nop

000dbb78 <__aeabi_i2d>:
   dbb78:	f090 0f00 	teq	r0, #0
   dbb7c:	bf04      	itt	eq
   dbb7e:	2100      	moveq	r1, #0
   dbb80:	4770      	bxeq	lr
   dbb82:	b530      	push	{r4, r5, lr}
   dbb84:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbb88:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbb8c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dbb90:	bf48      	it	mi
   dbb92:	4240      	negmi	r0, r0
   dbb94:	f04f 0100 	mov.w	r1, #0
   dbb98:	e73e      	b.n	dba18 <__adddf3+0x138>
   dbb9a:	bf00      	nop

000dbb9c <__aeabi_f2d>:
   dbb9c:	0042      	lsls	r2, r0, #1
   dbb9e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dbba2:	ea4f 0131 	mov.w	r1, r1, rrx
   dbba6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dbbaa:	bf1f      	itttt	ne
   dbbac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dbbb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dbbb4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dbbb8:	4770      	bxne	lr
   dbbba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dbbbe:	bf08      	it	eq
   dbbc0:	4770      	bxeq	lr
   dbbc2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dbbc6:	bf04      	itt	eq
   dbbc8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dbbcc:	4770      	bxeq	lr
   dbbce:	b530      	push	{r4, r5, lr}
   dbbd0:	f44f 7460 	mov.w	r4, #896	; 0x380
   dbbd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbbd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbbdc:	e71c      	b.n	dba18 <__adddf3+0x138>
   dbbde:	bf00      	nop

000dbbe0 <__aeabi_ul2d>:
   dbbe0:	ea50 0201 	orrs.w	r2, r0, r1
   dbbe4:	bf08      	it	eq
   dbbe6:	4770      	bxeq	lr
   dbbe8:	b530      	push	{r4, r5, lr}
   dbbea:	f04f 0500 	mov.w	r5, #0
   dbbee:	e00a      	b.n	dbc06 <__aeabi_l2d+0x16>

000dbbf0 <__aeabi_l2d>:
   dbbf0:	ea50 0201 	orrs.w	r2, r0, r1
   dbbf4:	bf08      	it	eq
   dbbf6:	4770      	bxeq	lr
   dbbf8:	b530      	push	{r4, r5, lr}
   dbbfa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dbbfe:	d502      	bpl.n	dbc06 <__aeabi_l2d+0x16>
   dbc00:	4240      	negs	r0, r0
   dbc02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbc06:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbc0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbc0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dbc12:	f43f aed8 	beq.w	db9c6 <__adddf3+0xe6>
   dbc16:	f04f 0203 	mov.w	r2, #3
   dbc1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dbc1e:	bf18      	it	ne
   dbc20:	3203      	addne	r2, #3
   dbc22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dbc26:	bf18      	it	ne
   dbc28:	3203      	addne	r2, #3
   dbc2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dbc2e:	f1c2 0320 	rsb	r3, r2, #32
   dbc32:	fa00 fc03 	lsl.w	ip, r0, r3
   dbc36:	fa20 f002 	lsr.w	r0, r0, r2
   dbc3a:	fa01 fe03 	lsl.w	lr, r1, r3
   dbc3e:	ea40 000e 	orr.w	r0, r0, lr
   dbc42:	fa21 f102 	lsr.w	r1, r1, r2
   dbc46:	4414      	add	r4, r2
   dbc48:	e6bd      	b.n	db9c6 <__adddf3+0xe6>
   dbc4a:	bf00      	nop

000dbc4c <__aeabi_dmul>:
   dbc4c:	b570      	push	{r4, r5, r6, lr}
   dbc4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbc52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbc56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbc5a:	bf1d      	ittte	ne
   dbc5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbc60:	ea94 0f0c 	teqne	r4, ip
   dbc64:	ea95 0f0c 	teqne	r5, ip
   dbc68:	f000 f8de 	bleq	dbe28 <__aeabi_dmul+0x1dc>
   dbc6c:	442c      	add	r4, r5
   dbc6e:	ea81 0603 	eor.w	r6, r1, r3
   dbc72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dbc76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dbc7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dbc7e:	bf18      	it	ne
   dbc80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dbc84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbc88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dbc8c:	d038      	beq.n	dbd00 <__aeabi_dmul+0xb4>
   dbc8e:	fba0 ce02 	umull	ip, lr, r0, r2
   dbc92:	f04f 0500 	mov.w	r5, #0
   dbc96:	fbe1 e502 	umlal	lr, r5, r1, r2
   dbc9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dbc9e:	fbe0 e503 	umlal	lr, r5, r0, r3
   dbca2:	f04f 0600 	mov.w	r6, #0
   dbca6:	fbe1 5603 	umlal	r5, r6, r1, r3
   dbcaa:	f09c 0f00 	teq	ip, #0
   dbcae:	bf18      	it	ne
   dbcb0:	f04e 0e01 	orrne.w	lr, lr, #1
   dbcb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dbcb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dbcbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dbcc0:	d204      	bcs.n	dbccc <__aeabi_dmul+0x80>
   dbcc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dbcc6:	416d      	adcs	r5, r5
   dbcc8:	eb46 0606 	adc.w	r6, r6, r6
   dbccc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dbcd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dbcd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dbcd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dbcdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dbce0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbce4:	bf88      	it	hi
   dbce6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbcea:	d81e      	bhi.n	dbd2a <__aeabi_dmul+0xde>
   dbcec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dbcf0:	bf08      	it	eq
   dbcf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dbcf6:	f150 0000 	adcs.w	r0, r0, #0
   dbcfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbcfe:	bd70      	pop	{r4, r5, r6, pc}
   dbd00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dbd04:	ea46 0101 	orr.w	r1, r6, r1
   dbd08:	ea40 0002 	orr.w	r0, r0, r2
   dbd0c:	ea81 0103 	eor.w	r1, r1, r3
   dbd10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dbd14:	bfc2      	ittt	gt
   dbd16:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbd1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbd1e:	bd70      	popgt	{r4, r5, r6, pc}
   dbd20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbd24:	f04f 0e00 	mov.w	lr, #0
   dbd28:	3c01      	subs	r4, #1
   dbd2a:	f300 80ab 	bgt.w	dbe84 <__aeabi_dmul+0x238>
   dbd2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dbd32:	bfde      	ittt	le
   dbd34:	2000      	movle	r0, #0
   dbd36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dbd3a:	bd70      	pople	{r4, r5, r6, pc}
   dbd3c:	f1c4 0400 	rsb	r4, r4, #0
   dbd40:	3c20      	subs	r4, #32
   dbd42:	da35      	bge.n	dbdb0 <__aeabi_dmul+0x164>
   dbd44:	340c      	adds	r4, #12
   dbd46:	dc1b      	bgt.n	dbd80 <__aeabi_dmul+0x134>
   dbd48:	f104 0414 	add.w	r4, r4, #20
   dbd4c:	f1c4 0520 	rsb	r5, r4, #32
   dbd50:	fa00 f305 	lsl.w	r3, r0, r5
   dbd54:	fa20 f004 	lsr.w	r0, r0, r4
   dbd58:	fa01 f205 	lsl.w	r2, r1, r5
   dbd5c:	ea40 0002 	orr.w	r0, r0, r2
   dbd60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dbd64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbd68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbd6c:	fa21 f604 	lsr.w	r6, r1, r4
   dbd70:	eb42 0106 	adc.w	r1, r2, r6
   dbd74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbd78:	bf08      	it	eq
   dbd7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbd7e:	bd70      	pop	{r4, r5, r6, pc}
   dbd80:	f1c4 040c 	rsb	r4, r4, #12
   dbd84:	f1c4 0520 	rsb	r5, r4, #32
   dbd88:	fa00 f304 	lsl.w	r3, r0, r4
   dbd8c:	fa20 f005 	lsr.w	r0, r0, r5
   dbd90:	fa01 f204 	lsl.w	r2, r1, r4
   dbd94:	ea40 0002 	orr.w	r0, r0, r2
   dbd98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbd9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbda0:	f141 0100 	adc.w	r1, r1, #0
   dbda4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbda8:	bf08      	it	eq
   dbdaa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbdae:	bd70      	pop	{r4, r5, r6, pc}
   dbdb0:	f1c4 0520 	rsb	r5, r4, #32
   dbdb4:	fa00 f205 	lsl.w	r2, r0, r5
   dbdb8:	ea4e 0e02 	orr.w	lr, lr, r2
   dbdbc:	fa20 f304 	lsr.w	r3, r0, r4
   dbdc0:	fa01 f205 	lsl.w	r2, r1, r5
   dbdc4:	ea43 0302 	orr.w	r3, r3, r2
   dbdc8:	fa21 f004 	lsr.w	r0, r1, r4
   dbdcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbdd0:	fa21 f204 	lsr.w	r2, r1, r4
   dbdd4:	ea20 0002 	bic.w	r0, r0, r2
   dbdd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dbddc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbde0:	bf08      	it	eq
   dbde2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbde6:	bd70      	pop	{r4, r5, r6, pc}
   dbde8:	f094 0f00 	teq	r4, #0
   dbdec:	d10f      	bne.n	dbe0e <__aeabi_dmul+0x1c2>
   dbdee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dbdf2:	0040      	lsls	r0, r0, #1
   dbdf4:	eb41 0101 	adc.w	r1, r1, r1
   dbdf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbdfc:	bf08      	it	eq
   dbdfe:	3c01      	subeq	r4, #1
   dbe00:	d0f7      	beq.n	dbdf2 <__aeabi_dmul+0x1a6>
   dbe02:	ea41 0106 	orr.w	r1, r1, r6
   dbe06:	f095 0f00 	teq	r5, #0
   dbe0a:	bf18      	it	ne
   dbe0c:	4770      	bxne	lr
   dbe0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dbe12:	0052      	lsls	r2, r2, #1
   dbe14:	eb43 0303 	adc.w	r3, r3, r3
   dbe18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dbe1c:	bf08      	it	eq
   dbe1e:	3d01      	subeq	r5, #1
   dbe20:	d0f7      	beq.n	dbe12 <__aeabi_dmul+0x1c6>
   dbe22:	ea43 0306 	orr.w	r3, r3, r6
   dbe26:	4770      	bx	lr
   dbe28:	ea94 0f0c 	teq	r4, ip
   dbe2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbe30:	bf18      	it	ne
   dbe32:	ea95 0f0c 	teqne	r5, ip
   dbe36:	d00c      	beq.n	dbe52 <__aeabi_dmul+0x206>
   dbe38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbe3c:	bf18      	it	ne
   dbe3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbe42:	d1d1      	bne.n	dbde8 <__aeabi_dmul+0x19c>
   dbe44:	ea81 0103 	eor.w	r1, r1, r3
   dbe48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbe4c:	f04f 0000 	mov.w	r0, #0
   dbe50:	bd70      	pop	{r4, r5, r6, pc}
   dbe52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbe56:	bf06      	itte	eq
   dbe58:	4610      	moveq	r0, r2
   dbe5a:	4619      	moveq	r1, r3
   dbe5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbe60:	d019      	beq.n	dbe96 <__aeabi_dmul+0x24a>
   dbe62:	ea94 0f0c 	teq	r4, ip
   dbe66:	d102      	bne.n	dbe6e <__aeabi_dmul+0x222>
   dbe68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dbe6c:	d113      	bne.n	dbe96 <__aeabi_dmul+0x24a>
   dbe6e:	ea95 0f0c 	teq	r5, ip
   dbe72:	d105      	bne.n	dbe80 <__aeabi_dmul+0x234>
   dbe74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dbe78:	bf1c      	itt	ne
   dbe7a:	4610      	movne	r0, r2
   dbe7c:	4619      	movne	r1, r3
   dbe7e:	d10a      	bne.n	dbe96 <__aeabi_dmul+0x24a>
   dbe80:	ea81 0103 	eor.w	r1, r1, r3
   dbe84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbe88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbe8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbe90:	f04f 0000 	mov.w	r0, #0
   dbe94:	bd70      	pop	{r4, r5, r6, pc}
   dbe96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbe9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dbe9e:	bd70      	pop	{r4, r5, r6, pc}

000dbea0 <__aeabi_ddiv>:
   dbea0:	b570      	push	{r4, r5, r6, lr}
   dbea2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbea6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbeaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbeae:	bf1d      	ittte	ne
   dbeb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbeb4:	ea94 0f0c 	teqne	r4, ip
   dbeb8:	ea95 0f0c 	teqne	r5, ip
   dbebc:	f000 f8a7 	bleq	dc00e <__aeabi_ddiv+0x16e>
   dbec0:	eba4 0405 	sub.w	r4, r4, r5
   dbec4:	ea81 0e03 	eor.w	lr, r1, r3
   dbec8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbecc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dbed0:	f000 8088 	beq.w	dbfe4 <__aeabi_ddiv+0x144>
   dbed4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dbed8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dbedc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dbee0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dbee4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dbee8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dbeec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dbef0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dbef4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dbef8:	429d      	cmp	r5, r3
   dbefa:	bf08      	it	eq
   dbefc:	4296      	cmpeq	r6, r2
   dbefe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dbf02:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dbf06:	d202      	bcs.n	dbf0e <__aeabi_ddiv+0x6e>
   dbf08:	085b      	lsrs	r3, r3, #1
   dbf0a:	ea4f 0232 	mov.w	r2, r2, rrx
   dbf0e:	1ab6      	subs	r6, r6, r2
   dbf10:	eb65 0503 	sbc.w	r5, r5, r3
   dbf14:	085b      	lsrs	r3, r3, #1
   dbf16:	ea4f 0232 	mov.w	r2, r2, rrx
   dbf1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dbf1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dbf22:	ebb6 0e02 	subs.w	lr, r6, r2
   dbf26:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbf2a:	bf22      	ittt	cs
   dbf2c:	1ab6      	subcs	r6, r6, r2
   dbf2e:	4675      	movcs	r5, lr
   dbf30:	ea40 000c 	orrcs.w	r0, r0, ip
   dbf34:	085b      	lsrs	r3, r3, #1
   dbf36:	ea4f 0232 	mov.w	r2, r2, rrx
   dbf3a:	ebb6 0e02 	subs.w	lr, r6, r2
   dbf3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbf42:	bf22      	ittt	cs
   dbf44:	1ab6      	subcs	r6, r6, r2
   dbf46:	4675      	movcs	r5, lr
   dbf48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dbf4c:	085b      	lsrs	r3, r3, #1
   dbf4e:	ea4f 0232 	mov.w	r2, r2, rrx
   dbf52:	ebb6 0e02 	subs.w	lr, r6, r2
   dbf56:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbf5a:	bf22      	ittt	cs
   dbf5c:	1ab6      	subcs	r6, r6, r2
   dbf5e:	4675      	movcs	r5, lr
   dbf60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dbf64:	085b      	lsrs	r3, r3, #1
   dbf66:	ea4f 0232 	mov.w	r2, r2, rrx
   dbf6a:	ebb6 0e02 	subs.w	lr, r6, r2
   dbf6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbf72:	bf22      	ittt	cs
   dbf74:	1ab6      	subcs	r6, r6, r2
   dbf76:	4675      	movcs	r5, lr
   dbf78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dbf7c:	ea55 0e06 	orrs.w	lr, r5, r6
   dbf80:	d018      	beq.n	dbfb4 <__aeabi_ddiv+0x114>
   dbf82:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dbf86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dbf8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dbf8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dbf92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dbf96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dbf9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dbf9e:	d1c0      	bne.n	dbf22 <__aeabi_ddiv+0x82>
   dbfa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbfa4:	d10b      	bne.n	dbfbe <__aeabi_ddiv+0x11e>
   dbfa6:	ea41 0100 	orr.w	r1, r1, r0
   dbfaa:	f04f 0000 	mov.w	r0, #0
   dbfae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dbfb2:	e7b6      	b.n	dbf22 <__aeabi_ddiv+0x82>
   dbfb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbfb8:	bf04      	itt	eq
   dbfba:	4301      	orreq	r1, r0
   dbfbc:	2000      	moveq	r0, #0
   dbfbe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbfc2:	bf88      	it	hi
   dbfc4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbfc8:	f63f aeaf 	bhi.w	dbd2a <__aeabi_dmul+0xde>
   dbfcc:	ebb5 0c03 	subs.w	ip, r5, r3
   dbfd0:	bf04      	itt	eq
   dbfd2:	ebb6 0c02 	subseq.w	ip, r6, r2
   dbfd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dbfda:	f150 0000 	adcs.w	r0, r0, #0
   dbfde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbfe2:	bd70      	pop	{r4, r5, r6, pc}
   dbfe4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dbfe8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dbfec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dbff0:	bfc2      	ittt	gt
   dbff2:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbff6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbffa:	bd70      	popgt	{r4, r5, r6, pc}
   dbffc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc000:	f04f 0e00 	mov.w	lr, #0
   dc004:	3c01      	subs	r4, #1
   dc006:	e690      	b.n	dbd2a <__aeabi_dmul+0xde>
   dc008:	ea45 0e06 	orr.w	lr, r5, r6
   dc00c:	e68d      	b.n	dbd2a <__aeabi_dmul+0xde>
   dc00e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc012:	ea94 0f0c 	teq	r4, ip
   dc016:	bf08      	it	eq
   dc018:	ea95 0f0c 	teqeq	r5, ip
   dc01c:	f43f af3b 	beq.w	dbe96 <__aeabi_dmul+0x24a>
   dc020:	ea94 0f0c 	teq	r4, ip
   dc024:	d10a      	bne.n	dc03c <__aeabi_ddiv+0x19c>
   dc026:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc02a:	f47f af34 	bne.w	dbe96 <__aeabi_dmul+0x24a>
   dc02e:	ea95 0f0c 	teq	r5, ip
   dc032:	f47f af25 	bne.w	dbe80 <__aeabi_dmul+0x234>
   dc036:	4610      	mov	r0, r2
   dc038:	4619      	mov	r1, r3
   dc03a:	e72c      	b.n	dbe96 <__aeabi_dmul+0x24a>
   dc03c:	ea95 0f0c 	teq	r5, ip
   dc040:	d106      	bne.n	dc050 <__aeabi_ddiv+0x1b0>
   dc042:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc046:	f43f aefd 	beq.w	dbe44 <__aeabi_dmul+0x1f8>
   dc04a:	4610      	mov	r0, r2
   dc04c:	4619      	mov	r1, r3
   dc04e:	e722      	b.n	dbe96 <__aeabi_dmul+0x24a>
   dc050:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc054:	bf18      	it	ne
   dc056:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc05a:	f47f aec5 	bne.w	dbde8 <__aeabi_dmul+0x19c>
   dc05e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dc062:	f47f af0d 	bne.w	dbe80 <__aeabi_dmul+0x234>
   dc066:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dc06a:	f47f aeeb 	bne.w	dbe44 <__aeabi_dmul+0x1f8>
   dc06e:	e712      	b.n	dbe96 <__aeabi_dmul+0x24a>

000dc070 <__gedf2>:
   dc070:	f04f 3cff 	mov.w	ip, #4294967295
   dc074:	e006      	b.n	dc084 <__cmpdf2+0x4>
   dc076:	bf00      	nop

000dc078 <__ledf2>:
   dc078:	f04f 0c01 	mov.w	ip, #1
   dc07c:	e002      	b.n	dc084 <__cmpdf2+0x4>
   dc07e:	bf00      	nop

000dc080 <__cmpdf2>:
   dc080:	f04f 0c01 	mov.w	ip, #1
   dc084:	f84d cd04 	str.w	ip, [sp, #-4]!
   dc088:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc08c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc094:	bf18      	it	ne
   dc096:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dc09a:	d01b      	beq.n	dc0d4 <__cmpdf2+0x54>
   dc09c:	b001      	add	sp, #4
   dc09e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dc0a2:	bf0c      	ite	eq
   dc0a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dc0a8:	ea91 0f03 	teqne	r1, r3
   dc0ac:	bf02      	ittt	eq
   dc0ae:	ea90 0f02 	teqeq	r0, r2
   dc0b2:	2000      	moveq	r0, #0
   dc0b4:	4770      	bxeq	lr
   dc0b6:	f110 0f00 	cmn.w	r0, #0
   dc0ba:	ea91 0f03 	teq	r1, r3
   dc0be:	bf58      	it	pl
   dc0c0:	4299      	cmppl	r1, r3
   dc0c2:	bf08      	it	eq
   dc0c4:	4290      	cmpeq	r0, r2
   dc0c6:	bf2c      	ite	cs
   dc0c8:	17d8      	asrcs	r0, r3, #31
   dc0ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dc0ce:	f040 0001 	orr.w	r0, r0, #1
   dc0d2:	4770      	bx	lr
   dc0d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc0d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc0dc:	d102      	bne.n	dc0e4 <__cmpdf2+0x64>
   dc0de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dc0e2:	d107      	bne.n	dc0f4 <__cmpdf2+0x74>
   dc0e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc0e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc0ec:	d1d6      	bne.n	dc09c <__cmpdf2+0x1c>
   dc0ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dc0f2:	d0d3      	beq.n	dc09c <__cmpdf2+0x1c>
   dc0f4:	f85d 0b04 	ldr.w	r0, [sp], #4
   dc0f8:	4770      	bx	lr
   dc0fa:	bf00      	nop

000dc0fc <__aeabi_cdrcmple>:
   dc0fc:	4684      	mov	ip, r0
   dc0fe:	4610      	mov	r0, r2
   dc100:	4662      	mov	r2, ip
   dc102:	468c      	mov	ip, r1
   dc104:	4619      	mov	r1, r3
   dc106:	4663      	mov	r3, ip
   dc108:	e000      	b.n	dc10c <__aeabi_cdcmpeq>
   dc10a:	bf00      	nop

000dc10c <__aeabi_cdcmpeq>:
   dc10c:	b501      	push	{r0, lr}
   dc10e:	f7ff ffb7 	bl	dc080 <__cmpdf2>
   dc112:	2800      	cmp	r0, #0
   dc114:	bf48      	it	mi
   dc116:	f110 0f00 	cmnmi.w	r0, #0
   dc11a:	bd01      	pop	{r0, pc}

000dc11c <__aeabi_dcmpeq>:
   dc11c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc120:	f7ff fff4 	bl	dc10c <__aeabi_cdcmpeq>
   dc124:	bf0c      	ite	eq
   dc126:	2001      	moveq	r0, #1
   dc128:	2000      	movne	r0, #0
   dc12a:	f85d fb08 	ldr.w	pc, [sp], #8
   dc12e:	bf00      	nop

000dc130 <__aeabi_dcmplt>:
   dc130:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc134:	f7ff ffea 	bl	dc10c <__aeabi_cdcmpeq>
   dc138:	bf34      	ite	cc
   dc13a:	2001      	movcc	r0, #1
   dc13c:	2000      	movcs	r0, #0
   dc13e:	f85d fb08 	ldr.w	pc, [sp], #8
   dc142:	bf00      	nop

000dc144 <__aeabi_dcmple>:
   dc144:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc148:	f7ff ffe0 	bl	dc10c <__aeabi_cdcmpeq>
   dc14c:	bf94      	ite	ls
   dc14e:	2001      	movls	r0, #1
   dc150:	2000      	movhi	r0, #0
   dc152:	f85d fb08 	ldr.w	pc, [sp], #8
   dc156:	bf00      	nop

000dc158 <__aeabi_dcmpge>:
   dc158:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc15c:	f7ff ffce 	bl	dc0fc <__aeabi_cdrcmple>
   dc160:	bf94      	ite	ls
   dc162:	2001      	movls	r0, #1
   dc164:	2000      	movhi	r0, #0
   dc166:	f85d fb08 	ldr.w	pc, [sp], #8
   dc16a:	bf00      	nop

000dc16c <__aeabi_dcmpgt>:
   dc16c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc170:	f7ff ffc4 	bl	dc0fc <__aeabi_cdrcmple>
   dc174:	bf34      	ite	cc
   dc176:	2001      	movcc	r0, #1
   dc178:	2000      	movcs	r0, #0
   dc17a:	f85d fb08 	ldr.w	pc, [sp], #8
   dc17e:	bf00      	nop

000dc180 <__aeabi_dcmpun>:
   dc180:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc184:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc188:	d102      	bne.n	dc190 <__aeabi_dcmpun+0x10>
   dc18a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dc18e:	d10a      	bne.n	dc1a6 <__aeabi_dcmpun+0x26>
   dc190:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc194:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc198:	d102      	bne.n	dc1a0 <__aeabi_dcmpun+0x20>
   dc19a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dc19e:	d102      	bne.n	dc1a6 <__aeabi_dcmpun+0x26>
   dc1a0:	f04f 0000 	mov.w	r0, #0
   dc1a4:	4770      	bx	lr
   dc1a6:	f04f 0001 	mov.w	r0, #1
   dc1aa:	4770      	bx	lr

000dc1ac <__aeabi_d2iz>:
   dc1ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc1b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc1b4:	d215      	bcs.n	dc1e2 <__aeabi_d2iz+0x36>
   dc1b6:	d511      	bpl.n	dc1dc <__aeabi_d2iz+0x30>
   dc1b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc1bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc1c0:	d912      	bls.n	dc1e8 <__aeabi_d2iz+0x3c>
   dc1c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc1c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc1ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc1ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc1d2:	fa23 f002 	lsr.w	r0, r3, r2
   dc1d6:	bf18      	it	ne
   dc1d8:	4240      	negne	r0, r0
   dc1da:	4770      	bx	lr
   dc1dc:	f04f 0000 	mov.w	r0, #0
   dc1e0:	4770      	bx	lr
   dc1e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc1e6:	d105      	bne.n	dc1f4 <__aeabi_d2iz+0x48>
   dc1e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dc1ec:	bf08      	it	eq
   dc1ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dc1f2:	4770      	bx	lr
   dc1f4:	f04f 0000 	mov.w	r0, #0
   dc1f8:	4770      	bx	lr
   dc1fa:	bf00      	nop

000dc1fc <__aeabi_d2uiz>:
   dc1fc:	004a      	lsls	r2, r1, #1
   dc1fe:	d211      	bcs.n	dc224 <__aeabi_d2uiz+0x28>
   dc200:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc204:	d211      	bcs.n	dc22a <__aeabi_d2uiz+0x2e>
   dc206:	d50d      	bpl.n	dc224 <__aeabi_d2uiz+0x28>
   dc208:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc20c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc210:	d40e      	bmi.n	dc230 <__aeabi_d2uiz+0x34>
   dc212:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc216:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc21a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc21e:	fa23 f002 	lsr.w	r0, r3, r2
   dc222:	4770      	bx	lr
   dc224:	f04f 0000 	mov.w	r0, #0
   dc228:	4770      	bx	lr
   dc22a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc22e:	d102      	bne.n	dc236 <__aeabi_d2uiz+0x3a>
   dc230:	f04f 30ff 	mov.w	r0, #4294967295
   dc234:	4770      	bx	lr
   dc236:	f04f 0000 	mov.w	r0, #0
   dc23a:	4770      	bx	lr

000dc23c <__aeabi_d2f>:
   dc23c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc240:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dc244:	bf24      	itt	cs
   dc246:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dc24a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dc24e:	d90d      	bls.n	dc26c <__aeabi_d2f+0x30>
   dc250:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dc254:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dc258:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dc25c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dc260:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dc264:	bf08      	it	eq
   dc266:	f020 0001 	biceq.w	r0, r0, #1
   dc26a:	4770      	bx	lr
   dc26c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dc270:	d121      	bne.n	dc2b6 <__aeabi_d2f+0x7a>
   dc272:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dc276:	bfbc      	itt	lt
   dc278:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dc27c:	4770      	bxlt	lr
   dc27e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc282:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dc286:	f1c2 0218 	rsb	r2, r2, #24
   dc28a:	f1c2 0c20 	rsb	ip, r2, #32
   dc28e:	fa10 f30c 	lsls.w	r3, r0, ip
   dc292:	fa20 f002 	lsr.w	r0, r0, r2
   dc296:	bf18      	it	ne
   dc298:	f040 0001 	orrne.w	r0, r0, #1
   dc29c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc2a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dc2a4:	fa03 fc0c 	lsl.w	ip, r3, ip
   dc2a8:	ea40 000c 	orr.w	r0, r0, ip
   dc2ac:	fa23 f302 	lsr.w	r3, r3, r2
   dc2b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dc2b4:	e7cc      	b.n	dc250 <__aeabi_d2f+0x14>
   dc2b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dc2ba:	d107      	bne.n	dc2cc <__aeabi_d2f+0x90>
   dc2bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dc2c0:	bf1e      	ittt	ne
   dc2c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dc2c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dc2ca:	4770      	bxne	lr
   dc2cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dc2d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dc2d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dc2d8:	4770      	bx	lr
   dc2da:	bf00      	nop

000dc2dc <__aeabi_frsub>:
   dc2dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   dc2e0:	e002      	b.n	dc2e8 <__addsf3>
   dc2e2:	bf00      	nop

000dc2e4 <__aeabi_fsub>:
   dc2e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000dc2e8 <__addsf3>:
   dc2e8:	0042      	lsls	r2, r0, #1
   dc2ea:	bf1f      	itttt	ne
   dc2ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   dc2f0:	ea92 0f03 	teqne	r2, r3
   dc2f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   dc2f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dc2fc:	d06a      	beq.n	dc3d4 <__addsf3+0xec>
   dc2fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
   dc302:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   dc306:	bfc1      	itttt	gt
   dc308:	18d2      	addgt	r2, r2, r3
   dc30a:	4041      	eorgt	r1, r0
   dc30c:	4048      	eorgt	r0, r1
   dc30e:	4041      	eorgt	r1, r0
   dc310:	bfb8      	it	lt
   dc312:	425b      	neglt	r3, r3
   dc314:	2b19      	cmp	r3, #25
   dc316:	bf88      	it	hi
   dc318:	4770      	bxhi	lr
   dc31a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   dc31e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dc322:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   dc326:	bf18      	it	ne
   dc328:	4240      	negne	r0, r0
   dc32a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc32e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   dc332:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   dc336:	bf18      	it	ne
   dc338:	4249      	negne	r1, r1
   dc33a:	ea92 0f03 	teq	r2, r3
   dc33e:	d03f      	beq.n	dc3c0 <__addsf3+0xd8>
   dc340:	f1a2 0201 	sub.w	r2, r2, #1
   dc344:	fa41 fc03 	asr.w	ip, r1, r3
   dc348:	eb10 000c 	adds.w	r0, r0, ip
   dc34c:	f1c3 0320 	rsb	r3, r3, #32
   dc350:	fa01 f103 	lsl.w	r1, r1, r3
   dc354:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   dc358:	d502      	bpl.n	dc360 <__addsf3+0x78>
   dc35a:	4249      	negs	r1, r1
   dc35c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   dc360:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   dc364:	d313      	bcc.n	dc38e <__addsf3+0xa6>
   dc366:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   dc36a:	d306      	bcc.n	dc37a <__addsf3+0x92>
   dc36c:	0840      	lsrs	r0, r0, #1
   dc36e:	ea4f 0131 	mov.w	r1, r1, rrx
   dc372:	f102 0201 	add.w	r2, r2, #1
   dc376:	2afe      	cmp	r2, #254	; 0xfe
   dc378:	d251      	bcs.n	dc41e <__addsf3+0x136>
   dc37a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   dc37e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   dc382:	bf08      	it	eq
   dc384:	f020 0001 	biceq.w	r0, r0, #1
   dc388:	ea40 0003 	orr.w	r0, r0, r3
   dc38c:	4770      	bx	lr
   dc38e:	0049      	lsls	r1, r1, #1
   dc390:	eb40 0000 	adc.w	r0, r0, r0
   dc394:	3a01      	subs	r2, #1
   dc396:	bf28      	it	cs
   dc398:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   dc39c:	d2ed      	bcs.n	dc37a <__addsf3+0x92>
   dc39e:	fab0 fc80 	clz	ip, r0
   dc3a2:	f1ac 0c08 	sub.w	ip, ip, #8
   dc3a6:	ebb2 020c 	subs.w	r2, r2, ip
   dc3aa:	fa00 f00c 	lsl.w	r0, r0, ip
   dc3ae:	bfaa      	itet	ge
   dc3b0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   dc3b4:	4252      	neglt	r2, r2
   dc3b6:	4318      	orrge	r0, r3
   dc3b8:	bfbc      	itt	lt
   dc3ba:	40d0      	lsrlt	r0, r2
   dc3bc:	4318      	orrlt	r0, r3
   dc3be:	4770      	bx	lr
   dc3c0:	f092 0f00 	teq	r2, #0
   dc3c4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   dc3c8:	bf06      	itte	eq
   dc3ca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   dc3ce:	3201      	addeq	r2, #1
   dc3d0:	3b01      	subne	r3, #1
   dc3d2:	e7b5      	b.n	dc340 <__addsf3+0x58>
   dc3d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   dc3d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   dc3dc:	bf18      	it	ne
   dc3de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dc3e2:	d021      	beq.n	dc428 <__addsf3+0x140>
   dc3e4:	ea92 0f03 	teq	r2, r3
   dc3e8:	d004      	beq.n	dc3f4 <__addsf3+0x10c>
   dc3ea:	f092 0f00 	teq	r2, #0
   dc3ee:	bf08      	it	eq
   dc3f0:	4608      	moveq	r0, r1
   dc3f2:	4770      	bx	lr
   dc3f4:	ea90 0f01 	teq	r0, r1
   dc3f8:	bf1c      	itt	ne
   dc3fa:	2000      	movne	r0, #0
   dc3fc:	4770      	bxne	lr
   dc3fe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   dc402:	d104      	bne.n	dc40e <__addsf3+0x126>
   dc404:	0040      	lsls	r0, r0, #1
   dc406:	bf28      	it	cs
   dc408:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   dc40c:	4770      	bx	lr
   dc40e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   dc412:	bf3c      	itt	cc
   dc414:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   dc418:	4770      	bxcc	lr
   dc41a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   dc41e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   dc422:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dc426:	4770      	bx	lr
   dc428:	ea7f 6222 	mvns.w	r2, r2, asr #24
   dc42c:	bf16      	itet	ne
   dc42e:	4608      	movne	r0, r1
   dc430:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   dc434:	4601      	movne	r1, r0
   dc436:	0242      	lsls	r2, r0, #9
   dc438:	bf06      	itte	eq
   dc43a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   dc43e:	ea90 0f01 	teqeq	r0, r1
   dc442:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   dc446:	4770      	bx	lr

000dc448 <__aeabi_ui2f>:
   dc448:	f04f 0300 	mov.w	r3, #0
   dc44c:	e004      	b.n	dc458 <__aeabi_i2f+0x8>
   dc44e:	bf00      	nop

000dc450 <__aeabi_i2f>:
   dc450:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   dc454:	bf48      	it	mi
   dc456:	4240      	negmi	r0, r0
   dc458:	ea5f 0c00 	movs.w	ip, r0
   dc45c:	bf08      	it	eq
   dc45e:	4770      	bxeq	lr
   dc460:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   dc464:	4601      	mov	r1, r0
   dc466:	f04f 0000 	mov.w	r0, #0
   dc46a:	e01c      	b.n	dc4a6 <__aeabi_l2f+0x2a>

000dc46c <__aeabi_ul2f>:
   dc46c:	ea50 0201 	orrs.w	r2, r0, r1
   dc470:	bf08      	it	eq
   dc472:	4770      	bxeq	lr
   dc474:	f04f 0300 	mov.w	r3, #0
   dc478:	e00a      	b.n	dc490 <__aeabi_l2f+0x14>
   dc47a:	bf00      	nop

000dc47c <__aeabi_l2f>:
   dc47c:	ea50 0201 	orrs.w	r2, r0, r1
   dc480:	bf08      	it	eq
   dc482:	4770      	bxeq	lr
   dc484:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   dc488:	d502      	bpl.n	dc490 <__aeabi_l2f+0x14>
   dc48a:	4240      	negs	r0, r0
   dc48c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc490:	ea5f 0c01 	movs.w	ip, r1
   dc494:	bf02      	ittt	eq
   dc496:	4684      	moveq	ip, r0
   dc498:	4601      	moveq	r1, r0
   dc49a:	2000      	moveq	r0, #0
   dc49c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   dc4a0:	bf08      	it	eq
   dc4a2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   dc4a6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   dc4aa:	fabc f28c 	clz	r2, ip
   dc4ae:	3a08      	subs	r2, #8
   dc4b0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   dc4b4:	db10      	blt.n	dc4d8 <__aeabi_l2f+0x5c>
   dc4b6:	fa01 fc02 	lsl.w	ip, r1, r2
   dc4ba:	4463      	add	r3, ip
   dc4bc:	fa00 fc02 	lsl.w	ip, r0, r2
   dc4c0:	f1c2 0220 	rsb	r2, r2, #32
   dc4c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dc4c8:	fa20 f202 	lsr.w	r2, r0, r2
   dc4cc:	eb43 0002 	adc.w	r0, r3, r2
   dc4d0:	bf08      	it	eq
   dc4d2:	f020 0001 	biceq.w	r0, r0, #1
   dc4d6:	4770      	bx	lr
   dc4d8:	f102 0220 	add.w	r2, r2, #32
   dc4dc:	fa01 fc02 	lsl.w	ip, r1, r2
   dc4e0:	f1c2 0220 	rsb	r2, r2, #32
   dc4e4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   dc4e8:	fa21 f202 	lsr.w	r2, r1, r2
   dc4ec:	eb43 0002 	adc.w	r0, r3, r2
   dc4f0:	bf08      	it	eq
   dc4f2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   dc4f6:	4770      	bx	lr

000dc4f8 <__aeabi_ldivmod>:
   dc4f8:	b97b      	cbnz	r3, dc51a <__aeabi_ldivmod+0x22>
   dc4fa:	b972      	cbnz	r2, dc51a <__aeabi_ldivmod+0x22>
   dc4fc:	2900      	cmp	r1, #0
   dc4fe:	bfbe      	ittt	lt
   dc500:	2000      	movlt	r0, #0
   dc502:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   dc506:	e006      	blt.n	dc516 <__aeabi_ldivmod+0x1e>
   dc508:	bf08      	it	eq
   dc50a:	2800      	cmpeq	r0, #0
   dc50c:	bf1c      	itt	ne
   dc50e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   dc512:	f04f 30ff 	movne.w	r0, #4294967295
   dc516:	f000 b9a1 	b.w	dc85c <__aeabi_idiv0>
   dc51a:	f1ad 0c08 	sub.w	ip, sp, #8
   dc51e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dc522:	2900      	cmp	r1, #0
   dc524:	db09      	blt.n	dc53a <__aeabi_ldivmod+0x42>
   dc526:	2b00      	cmp	r3, #0
   dc528:	db1a      	blt.n	dc560 <__aeabi_ldivmod+0x68>
   dc52a:	f000 f835 	bl	dc598 <__udivmoddi4>
   dc52e:	f8dd e004 	ldr.w	lr, [sp, #4]
   dc532:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc536:	b004      	add	sp, #16
   dc538:	4770      	bx	lr
   dc53a:	4240      	negs	r0, r0
   dc53c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc540:	2b00      	cmp	r3, #0
   dc542:	db1b      	blt.n	dc57c <__aeabi_ldivmod+0x84>
   dc544:	f000 f828 	bl	dc598 <__udivmoddi4>
   dc548:	f8dd e004 	ldr.w	lr, [sp, #4]
   dc54c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc550:	b004      	add	sp, #16
   dc552:	4240      	negs	r0, r0
   dc554:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc558:	4252      	negs	r2, r2
   dc55a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc55e:	4770      	bx	lr
   dc560:	4252      	negs	r2, r2
   dc562:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc566:	f000 f817 	bl	dc598 <__udivmoddi4>
   dc56a:	f8dd e004 	ldr.w	lr, [sp, #4]
   dc56e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc572:	b004      	add	sp, #16
   dc574:	4240      	negs	r0, r0
   dc576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc57a:	4770      	bx	lr
   dc57c:	4252      	negs	r2, r2
   dc57e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc582:	f000 f809 	bl	dc598 <__udivmoddi4>
   dc586:	f8dd e004 	ldr.w	lr, [sp, #4]
   dc58a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc58e:	b004      	add	sp, #16
   dc590:	4252      	negs	r2, r2
   dc592:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc596:	4770      	bx	lr

000dc598 <__udivmoddi4>:
   dc598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc59c:	9d08      	ldr	r5, [sp, #32]
   dc59e:	4604      	mov	r4, r0
   dc5a0:	468c      	mov	ip, r1
   dc5a2:	2b00      	cmp	r3, #0
   dc5a4:	f040 8083 	bne.w	dc6ae <__udivmoddi4+0x116>
   dc5a8:	428a      	cmp	r2, r1
   dc5aa:	4617      	mov	r7, r2
   dc5ac:	d947      	bls.n	dc63e <__udivmoddi4+0xa6>
   dc5ae:	fab2 f282 	clz	r2, r2
   dc5b2:	b142      	cbz	r2, dc5c6 <__udivmoddi4+0x2e>
   dc5b4:	f1c2 0020 	rsb	r0, r2, #32
   dc5b8:	fa24 f000 	lsr.w	r0, r4, r0
   dc5bc:	4091      	lsls	r1, r2
   dc5be:	4097      	lsls	r7, r2
   dc5c0:	ea40 0c01 	orr.w	ip, r0, r1
   dc5c4:	4094      	lsls	r4, r2
   dc5c6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   dc5ca:	0c23      	lsrs	r3, r4, #16
   dc5cc:	fbbc f6f8 	udiv	r6, ip, r8
   dc5d0:	fa1f fe87 	uxth.w	lr, r7
   dc5d4:	fb08 c116 	mls	r1, r8, r6, ip
   dc5d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dc5dc:	fb06 f10e 	mul.w	r1, r6, lr
   dc5e0:	4299      	cmp	r1, r3
   dc5e2:	d909      	bls.n	dc5f8 <__udivmoddi4+0x60>
   dc5e4:	18fb      	adds	r3, r7, r3
   dc5e6:	f106 30ff 	add.w	r0, r6, #4294967295
   dc5ea:	f080 8119 	bcs.w	dc820 <__udivmoddi4+0x288>
   dc5ee:	4299      	cmp	r1, r3
   dc5f0:	f240 8116 	bls.w	dc820 <__udivmoddi4+0x288>
   dc5f4:	3e02      	subs	r6, #2
   dc5f6:	443b      	add	r3, r7
   dc5f8:	1a5b      	subs	r3, r3, r1
   dc5fa:	b2a4      	uxth	r4, r4
   dc5fc:	fbb3 f0f8 	udiv	r0, r3, r8
   dc600:	fb08 3310 	mls	r3, r8, r0, r3
   dc604:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   dc608:	fb00 fe0e 	mul.w	lr, r0, lr
   dc60c:	45a6      	cmp	lr, r4
   dc60e:	d909      	bls.n	dc624 <__udivmoddi4+0x8c>
   dc610:	193c      	adds	r4, r7, r4
   dc612:	f100 33ff 	add.w	r3, r0, #4294967295
   dc616:	f080 8105 	bcs.w	dc824 <__udivmoddi4+0x28c>
   dc61a:	45a6      	cmp	lr, r4
   dc61c:	f240 8102 	bls.w	dc824 <__udivmoddi4+0x28c>
   dc620:	3802      	subs	r0, #2
   dc622:	443c      	add	r4, r7
   dc624:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   dc628:	eba4 040e 	sub.w	r4, r4, lr
   dc62c:	2600      	movs	r6, #0
   dc62e:	b11d      	cbz	r5, dc638 <__udivmoddi4+0xa0>
   dc630:	40d4      	lsrs	r4, r2
   dc632:	2300      	movs	r3, #0
   dc634:	e9c5 4300 	strd	r4, r3, [r5]
   dc638:	4631      	mov	r1, r6
   dc63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc63e:	b902      	cbnz	r2, dc642 <__udivmoddi4+0xaa>
   dc640:	deff      	udf	#255	; 0xff
   dc642:	fab2 f282 	clz	r2, r2
   dc646:	2a00      	cmp	r2, #0
   dc648:	d150      	bne.n	dc6ec <__udivmoddi4+0x154>
   dc64a:	1bcb      	subs	r3, r1, r7
   dc64c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dc650:	fa1f f887 	uxth.w	r8, r7
   dc654:	2601      	movs	r6, #1
   dc656:	fbb3 fcfe 	udiv	ip, r3, lr
   dc65a:	0c21      	lsrs	r1, r4, #16
   dc65c:	fb0e 331c 	mls	r3, lr, ip, r3
   dc660:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dc664:	fb08 f30c 	mul.w	r3, r8, ip
   dc668:	428b      	cmp	r3, r1
   dc66a:	d907      	bls.n	dc67c <__udivmoddi4+0xe4>
   dc66c:	1879      	adds	r1, r7, r1
   dc66e:	f10c 30ff 	add.w	r0, ip, #4294967295
   dc672:	d202      	bcs.n	dc67a <__udivmoddi4+0xe2>
   dc674:	428b      	cmp	r3, r1
   dc676:	f200 80e9 	bhi.w	dc84c <__udivmoddi4+0x2b4>
   dc67a:	4684      	mov	ip, r0
   dc67c:	1ac9      	subs	r1, r1, r3
   dc67e:	b2a3      	uxth	r3, r4
   dc680:	fbb1 f0fe 	udiv	r0, r1, lr
   dc684:	fb0e 1110 	mls	r1, lr, r0, r1
   dc688:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dc68c:	fb08 f800 	mul.w	r8, r8, r0
   dc690:	45a0      	cmp	r8, r4
   dc692:	d907      	bls.n	dc6a4 <__udivmoddi4+0x10c>
   dc694:	193c      	adds	r4, r7, r4
   dc696:	f100 33ff 	add.w	r3, r0, #4294967295
   dc69a:	d202      	bcs.n	dc6a2 <__udivmoddi4+0x10a>
   dc69c:	45a0      	cmp	r8, r4
   dc69e:	f200 80d9 	bhi.w	dc854 <__udivmoddi4+0x2bc>
   dc6a2:	4618      	mov	r0, r3
   dc6a4:	eba4 0408 	sub.w	r4, r4, r8
   dc6a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dc6ac:	e7bf      	b.n	dc62e <__udivmoddi4+0x96>
   dc6ae:	428b      	cmp	r3, r1
   dc6b0:	d909      	bls.n	dc6c6 <__udivmoddi4+0x12e>
   dc6b2:	2d00      	cmp	r5, #0
   dc6b4:	f000 80b1 	beq.w	dc81a <__udivmoddi4+0x282>
   dc6b8:	2600      	movs	r6, #0
   dc6ba:	e9c5 0100 	strd	r0, r1, [r5]
   dc6be:	4630      	mov	r0, r6
   dc6c0:	4631      	mov	r1, r6
   dc6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc6c6:	fab3 f683 	clz	r6, r3
   dc6ca:	2e00      	cmp	r6, #0
   dc6cc:	d14a      	bne.n	dc764 <__udivmoddi4+0x1cc>
   dc6ce:	428b      	cmp	r3, r1
   dc6d0:	d302      	bcc.n	dc6d8 <__udivmoddi4+0x140>
   dc6d2:	4282      	cmp	r2, r0
   dc6d4:	f200 80b8 	bhi.w	dc848 <__udivmoddi4+0x2b0>
   dc6d8:	1a84      	subs	r4, r0, r2
   dc6da:	eb61 0103 	sbc.w	r1, r1, r3
   dc6de:	2001      	movs	r0, #1
   dc6e0:	468c      	mov	ip, r1
   dc6e2:	2d00      	cmp	r5, #0
   dc6e4:	d0a8      	beq.n	dc638 <__udivmoddi4+0xa0>
   dc6e6:	e9c5 4c00 	strd	r4, ip, [r5]
   dc6ea:	e7a5      	b.n	dc638 <__udivmoddi4+0xa0>
   dc6ec:	f1c2 0320 	rsb	r3, r2, #32
   dc6f0:	fa20 f603 	lsr.w	r6, r0, r3
   dc6f4:	4097      	lsls	r7, r2
   dc6f6:	fa01 f002 	lsl.w	r0, r1, r2
   dc6fa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dc6fe:	40d9      	lsrs	r1, r3
   dc700:	4330      	orrs	r0, r6
   dc702:	0c03      	lsrs	r3, r0, #16
   dc704:	fbb1 f6fe 	udiv	r6, r1, lr
   dc708:	fa1f f887 	uxth.w	r8, r7
   dc70c:	fb0e 1116 	mls	r1, lr, r6, r1
   dc710:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dc714:	fb06 f108 	mul.w	r1, r6, r8
   dc718:	4299      	cmp	r1, r3
   dc71a:	fa04 f402 	lsl.w	r4, r4, r2
   dc71e:	d909      	bls.n	dc734 <__udivmoddi4+0x19c>
   dc720:	18fb      	adds	r3, r7, r3
   dc722:	f106 3cff 	add.w	ip, r6, #4294967295
   dc726:	f080 808d 	bcs.w	dc844 <__udivmoddi4+0x2ac>
   dc72a:	4299      	cmp	r1, r3
   dc72c:	f240 808a 	bls.w	dc844 <__udivmoddi4+0x2ac>
   dc730:	3e02      	subs	r6, #2
   dc732:	443b      	add	r3, r7
   dc734:	1a5b      	subs	r3, r3, r1
   dc736:	b281      	uxth	r1, r0
   dc738:	fbb3 f0fe 	udiv	r0, r3, lr
   dc73c:	fb0e 3310 	mls	r3, lr, r0, r3
   dc740:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dc744:	fb00 f308 	mul.w	r3, r0, r8
   dc748:	428b      	cmp	r3, r1
   dc74a:	d907      	bls.n	dc75c <__udivmoddi4+0x1c4>
   dc74c:	1879      	adds	r1, r7, r1
   dc74e:	f100 3cff 	add.w	ip, r0, #4294967295
   dc752:	d273      	bcs.n	dc83c <__udivmoddi4+0x2a4>
   dc754:	428b      	cmp	r3, r1
   dc756:	d971      	bls.n	dc83c <__udivmoddi4+0x2a4>
   dc758:	3802      	subs	r0, #2
   dc75a:	4439      	add	r1, r7
   dc75c:	1acb      	subs	r3, r1, r3
   dc75e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dc762:	e778      	b.n	dc656 <__udivmoddi4+0xbe>
   dc764:	f1c6 0c20 	rsb	ip, r6, #32
   dc768:	fa03 f406 	lsl.w	r4, r3, r6
   dc76c:	fa22 f30c 	lsr.w	r3, r2, ip
   dc770:	431c      	orrs	r4, r3
   dc772:	fa20 f70c 	lsr.w	r7, r0, ip
   dc776:	fa01 f306 	lsl.w	r3, r1, r6
   dc77a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dc77e:	fa21 f10c 	lsr.w	r1, r1, ip
   dc782:	431f      	orrs	r7, r3
   dc784:	0c3b      	lsrs	r3, r7, #16
   dc786:	fbb1 f9fe 	udiv	r9, r1, lr
   dc78a:	fa1f f884 	uxth.w	r8, r4
   dc78e:	fb0e 1119 	mls	r1, lr, r9, r1
   dc792:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dc796:	fb09 fa08 	mul.w	sl, r9, r8
   dc79a:	458a      	cmp	sl, r1
   dc79c:	fa02 f206 	lsl.w	r2, r2, r6
   dc7a0:	fa00 f306 	lsl.w	r3, r0, r6
   dc7a4:	d908      	bls.n	dc7b8 <__udivmoddi4+0x220>
   dc7a6:	1861      	adds	r1, r4, r1
   dc7a8:	f109 30ff 	add.w	r0, r9, #4294967295
   dc7ac:	d248      	bcs.n	dc840 <__udivmoddi4+0x2a8>
   dc7ae:	458a      	cmp	sl, r1
   dc7b0:	d946      	bls.n	dc840 <__udivmoddi4+0x2a8>
   dc7b2:	f1a9 0902 	sub.w	r9, r9, #2
   dc7b6:	4421      	add	r1, r4
   dc7b8:	eba1 010a 	sub.w	r1, r1, sl
   dc7bc:	b2bf      	uxth	r7, r7
   dc7be:	fbb1 f0fe 	udiv	r0, r1, lr
   dc7c2:	fb0e 1110 	mls	r1, lr, r0, r1
   dc7c6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dc7ca:	fb00 f808 	mul.w	r8, r0, r8
   dc7ce:	45b8      	cmp	r8, r7
   dc7d0:	d907      	bls.n	dc7e2 <__udivmoddi4+0x24a>
   dc7d2:	19e7      	adds	r7, r4, r7
   dc7d4:	f100 31ff 	add.w	r1, r0, #4294967295
   dc7d8:	d22e      	bcs.n	dc838 <__udivmoddi4+0x2a0>
   dc7da:	45b8      	cmp	r8, r7
   dc7dc:	d92c      	bls.n	dc838 <__udivmoddi4+0x2a0>
   dc7de:	3802      	subs	r0, #2
   dc7e0:	4427      	add	r7, r4
   dc7e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dc7e6:	eba7 0708 	sub.w	r7, r7, r8
   dc7ea:	fba0 8902 	umull	r8, r9, r0, r2
   dc7ee:	454f      	cmp	r7, r9
   dc7f0:	46c6      	mov	lr, r8
   dc7f2:	4649      	mov	r1, r9
   dc7f4:	d31a      	bcc.n	dc82c <__udivmoddi4+0x294>
   dc7f6:	d017      	beq.n	dc828 <__udivmoddi4+0x290>
   dc7f8:	b15d      	cbz	r5, dc812 <__udivmoddi4+0x27a>
   dc7fa:	ebb3 020e 	subs.w	r2, r3, lr
   dc7fe:	eb67 0701 	sbc.w	r7, r7, r1
   dc802:	fa07 fc0c 	lsl.w	ip, r7, ip
   dc806:	40f2      	lsrs	r2, r6
   dc808:	ea4c 0202 	orr.w	r2, ip, r2
   dc80c:	40f7      	lsrs	r7, r6
   dc80e:	e9c5 2700 	strd	r2, r7, [r5]
   dc812:	2600      	movs	r6, #0
   dc814:	4631      	mov	r1, r6
   dc816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc81a:	462e      	mov	r6, r5
   dc81c:	4628      	mov	r0, r5
   dc81e:	e70b      	b.n	dc638 <__udivmoddi4+0xa0>
   dc820:	4606      	mov	r6, r0
   dc822:	e6e9      	b.n	dc5f8 <__udivmoddi4+0x60>
   dc824:	4618      	mov	r0, r3
   dc826:	e6fd      	b.n	dc624 <__udivmoddi4+0x8c>
   dc828:	4543      	cmp	r3, r8
   dc82a:	d2e5      	bcs.n	dc7f8 <__udivmoddi4+0x260>
   dc82c:	ebb8 0e02 	subs.w	lr, r8, r2
   dc830:	eb69 0104 	sbc.w	r1, r9, r4
   dc834:	3801      	subs	r0, #1
   dc836:	e7df      	b.n	dc7f8 <__udivmoddi4+0x260>
   dc838:	4608      	mov	r0, r1
   dc83a:	e7d2      	b.n	dc7e2 <__udivmoddi4+0x24a>
   dc83c:	4660      	mov	r0, ip
   dc83e:	e78d      	b.n	dc75c <__udivmoddi4+0x1c4>
   dc840:	4681      	mov	r9, r0
   dc842:	e7b9      	b.n	dc7b8 <__udivmoddi4+0x220>
   dc844:	4666      	mov	r6, ip
   dc846:	e775      	b.n	dc734 <__udivmoddi4+0x19c>
   dc848:	4630      	mov	r0, r6
   dc84a:	e74a      	b.n	dc6e2 <__udivmoddi4+0x14a>
   dc84c:	f1ac 0c02 	sub.w	ip, ip, #2
   dc850:	4439      	add	r1, r7
   dc852:	e713      	b.n	dc67c <__udivmoddi4+0xe4>
   dc854:	3802      	subs	r0, #2
   dc856:	443c      	add	r4, r7
   dc858:	e724      	b.n	dc6a4 <__udivmoddi4+0x10c>
   dc85a:	bf00      	nop

000dc85c <__aeabi_idiv0>:
   dc85c:	4770      	bx	lr
   dc85e:	bf00      	nop

000dc860 <atexit>:
   dc860:	2300      	movs	r3, #0
   dc862:	4601      	mov	r1, r0
   dc864:	461a      	mov	r2, r3
   dc866:	4618      	mov	r0, r3
   dc868:	f000 b856 	b.w	dc918 <__register_exitproc>

000dc86c <memcpy>:
   dc86c:	440a      	add	r2, r1
   dc86e:	4291      	cmp	r1, r2
   dc870:	f100 33ff 	add.w	r3, r0, #4294967295
   dc874:	d100      	bne.n	dc878 <memcpy+0xc>
   dc876:	4770      	bx	lr
   dc878:	b510      	push	{r4, lr}
   dc87a:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc87e:	f803 4f01 	strb.w	r4, [r3, #1]!
   dc882:	4291      	cmp	r1, r2
   dc884:	d1f9      	bne.n	dc87a <memcpy+0xe>
   dc886:	bd10      	pop	{r4, pc}

000dc888 <memset>:
   dc888:	4402      	add	r2, r0
   dc88a:	4603      	mov	r3, r0
   dc88c:	4293      	cmp	r3, r2
   dc88e:	d100      	bne.n	dc892 <memset+0xa>
   dc890:	4770      	bx	lr
   dc892:	f803 1b01 	strb.w	r1, [r3], #1
   dc896:	e7f9      	b.n	dc88c <memset+0x4>

000dc898 <srand>:
   dc898:	b538      	push	{r3, r4, r5, lr}
   dc89a:	4b0d      	ldr	r3, [pc, #52]	; (dc8d0 <srand+0x38>)
   dc89c:	681d      	ldr	r5, [r3, #0]
   dc89e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc8a0:	4604      	mov	r4, r0
   dc8a2:	b97b      	cbnz	r3, dc8c4 <srand+0x2c>
   dc8a4:	2018      	movs	r0, #24
   dc8a6:	f7fb fc09 	bl	d80bc <malloc>
   dc8aa:	4a0a      	ldr	r2, [pc, #40]	; (dc8d4 <srand+0x3c>)
   dc8ac:	4b0a      	ldr	r3, [pc, #40]	; (dc8d8 <srand+0x40>)
   dc8ae:	63a8      	str	r0, [r5, #56]	; 0x38
   dc8b0:	e9c0 2300 	strd	r2, r3, [r0]
   dc8b4:	4b09      	ldr	r3, [pc, #36]	; (dc8dc <srand+0x44>)
   dc8b6:	6083      	str	r3, [r0, #8]
   dc8b8:	230b      	movs	r3, #11
   dc8ba:	8183      	strh	r3, [r0, #12]
   dc8bc:	2201      	movs	r2, #1
   dc8be:	2300      	movs	r3, #0
   dc8c0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dc8c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc8c6:	2200      	movs	r2, #0
   dc8c8:	611c      	str	r4, [r3, #16]
   dc8ca:	615a      	str	r2, [r3, #20]
   dc8cc:	bd38      	pop	{r3, r4, r5, pc}
   dc8ce:	bf00      	nop
   dc8d0:	2003e3e8 	.word	0x2003e3e8
   dc8d4:	abcd330e 	.word	0xabcd330e
   dc8d8:	e66d1234 	.word	0xe66d1234
   dc8dc:	0005deec 	.word	0x0005deec

000dc8e0 <strlen>:
   dc8e0:	4603      	mov	r3, r0
   dc8e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc8e6:	2a00      	cmp	r2, #0
   dc8e8:	d1fb      	bne.n	dc8e2 <strlen+0x2>
   dc8ea:	1a18      	subs	r0, r3, r0
   dc8ec:	3801      	subs	r0, #1
   dc8ee:	4770      	bx	lr

000dc8f0 <strncpy>:
   dc8f0:	b510      	push	{r4, lr}
   dc8f2:	3901      	subs	r1, #1
   dc8f4:	4603      	mov	r3, r0
   dc8f6:	b132      	cbz	r2, dc906 <strncpy+0x16>
   dc8f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc8fc:	f803 4b01 	strb.w	r4, [r3], #1
   dc900:	3a01      	subs	r2, #1
   dc902:	2c00      	cmp	r4, #0
   dc904:	d1f7      	bne.n	dc8f6 <strncpy+0x6>
   dc906:	441a      	add	r2, r3
   dc908:	2100      	movs	r1, #0
   dc90a:	4293      	cmp	r3, r2
   dc90c:	d100      	bne.n	dc910 <strncpy+0x20>
   dc90e:	bd10      	pop	{r4, pc}
   dc910:	f803 1b01 	strb.w	r1, [r3], #1
   dc914:	e7f9      	b.n	dc90a <strncpy+0x1a>
	...

000dc918 <__register_exitproc>:
   dc918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc91c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dc9d8 <__register_exitproc+0xc0>
   dc920:	4606      	mov	r6, r0
   dc922:	f8d8 0000 	ldr.w	r0, [r8]
   dc926:	461f      	mov	r7, r3
   dc928:	460d      	mov	r5, r1
   dc92a:	4691      	mov	r9, r2
   dc92c:	f000 f856 	bl	dc9dc <__retarget_lock_acquire_recursive>
   dc930:	4b25      	ldr	r3, [pc, #148]	; (dc9c8 <__register_exitproc+0xb0>)
   dc932:	681c      	ldr	r4, [r3, #0]
   dc934:	b934      	cbnz	r4, dc944 <__register_exitproc+0x2c>
   dc936:	4c25      	ldr	r4, [pc, #148]	; (dc9cc <__register_exitproc+0xb4>)
   dc938:	601c      	str	r4, [r3, #0]
   dc93a:	4b25      	ldr	r3, [pc, #148]	; (dc9d0 <__register_exitproc+0xb8>)
   dc93c:	b113      	cbz	r3, dc944 <__register_exitproc+0x2c>
   dc93e:	681b      	ldr	r3, [r3, #0]
   dc940:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dc944:	6863      	ldr	r3, [r4, #4]
   dc946:	2b1f      	cmp	r3, #31
   dc948:	dd07      	ble.n	dc95a <__register_exitproc+0x42>
   dc94a:	f8d8 0000 	ldr.w	r0, [r8]
   dc94e:	f000 f847 	bl	dc9e0 <__retarget_lock_release_recursive>
   dc952:	f04f 30ff 	mov.w	r0, #4294967295
   dc956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc95a:	b34e      	cbz	r6, dc9b0 <__register_exitproc+0x98>
   dc95c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dc960:	b988      	cbnz	r0, dc986 <__register_exitproc+0x6e>
   dc962:	4b1c      	ldr	r3, [pc, #112]	; (dc9d4 <__register_exitproc+0xbc>)
   dc964:	b923      	cbnz	r3, dc970 <__register_exitproc+0x58>
   dc966:	f8d8 0000 	ldr.w	r0, [r8]
   dc96a:	f000 f838 	bl	dc9de <__retarget_lock_release>
   dc96e:	e7f0      	b.n	dc952 <__register_exitproc+0x3a>
   dc970:	f44f 7084 	mov.w	r0, #264	; 0x108
   dc974:	f7fb fba2 	bl	d80bc <malloc>
   dc978:	2800      	cmp	r0, #0
   dc97a:	d0f4      	beq.n	dc966 <__register_exitproc+0x4e>
   dc97c:	2300      	movs	r3, #0
   dc97e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dc982:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dc986:	6863      	ldr	r3, [r4, #4]
   dc988:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dc98c:	2201      	movs	r2, #1
   dc98e:	409a      	lsls	r2, r3
   dc990:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dc994:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dc998:	4313      	orrs	r3, r2
   dc99a:	2e02      	cmp	r6, #2
   dc99c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dc9a0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dc9a4:	bf02      	ittt	eq
   dc9a6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dc9aa:	431a      	orreq	r2, r3
   dc9ac:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dc9b0:	6863      	ldr	r3, [r4, #4]
   dc9b2:	f8d8 0000 	ldr.w	r0, [r8]
   dc9b6:	1c5a      	adds	r2, r3, #1
   dc9b8:	3302      	adds	r3, #2
   dc9ba:	6062      	str	r2, [r4, #4]
   dc9bc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dc9c0:	f000 f80e 	bl	dc9e0 <__retarget_lock_release_recursive>
   dc9c4:	2000      	movs	r0, #0
   dc9c6:	e7c6      	b.n	dc956 <__register_exitproc+0x3e>
   dc9c8:	2003e7e0 	.word	0x2003e7e0
   dc9cc:	2003e754 	.word	0x2003e754
   dc9d0:	00000000 	.word	0x00000000
   dc9d4:	000d80bd 	.word	0x000d80bd
   dc9d8:	2003e44c 	.word	0x2003e44c

000dc9dc <__retarget_lock_acquire_recursive>:
   dc9dc:	4770      	bx	lr

000dc9de <__retarget_lock_release>:
   dc9de:	4770      	bx	lr

000dc9e0 <__retarget_lock_release_recursive>:
   dc9e0:	4770      	bx	lr

000dc9e2 <link_code_end>:
	...

000dc9e4 <dynalib_user>:
   dc9e4:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dc9f4:	0000 0000 0a0a 6554 706d 7265 7461 7275     ......Temperatur
   dca04:	2065 203d 2000 0046 7250 7365 7573 6572     e = . F.Pressure
   dca14:	3d20 0020 6d20 486d 0067 7041 7270 786f      = . mmHg.Approx
   dca24:	202e 6c41 6974 7574 6564 3d20 0020 6d20     . Altitude = . m
   dca34:	4800 6d75 6469 7469 2079 203d 2000 0025     .Humidity = . %.
   dca44:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dca54:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dca64:	2d2d 2d2d 5300 6e65 6f73 3a72 2020 2020     ----.Sensor:    
   dca74:	2020 0020 7244 7669 7265 5620 7265 203a        .Driver Ver: 
   dca84:	2020 5500 696e 7571 2065 4449 203a 2020       .Unique ID:   
   dca94:	0020 614d 2078 6156 756c 3a65 2020 2020      .Max Value:    
   dcaa4:	2000 7878 0078 694d 206e 6156 756c 3a65     . xxx.Min Value:
   dcab4:	2020 2020 5200 7365 6c6f 7475 6f69 3a6e         .Resolution:
   dcac4:	2020 0020 430a 6c61 6269 6172 6974 6e6f        ..Calibration
   dcad4:	6f20 6666 6573 7374 0a20 4100 6363 6c65      offsets ..Accel
   dcae4:	7265 6d6f 7465 7265 203a 0a00 7947 6f72     erometer: ..Gyro
   dcaf4:	203a 0a00 614d 3a67 0020 410a 6363 6c65     : ..Mag: ..Accel
   dcb04:	5220 6461 7569 3a73 0020 4d0a 6761 5220      Radius: ..Mag R
   dcb14:	6461 7569 3a73 0020 004e 454e 5300 0045     adius: .N.NE.SE.
   dcb24:	0053 5753 4e00 0057 2021 5300 7379 003a     S.SW.NW.! .Sys:.
   dcb34:	4720 003a 4120 003a 4d20 003a 002c 7953      G:. A:. M:.,.Sy
   dcb44:	7473 6d65 5320 6174 7574 3a73 3020 0078     stem Status: 0x.
   dcb54:	6553 666c 5420 7365 3a74 2020 2020 3020     Self Test:     0
   dcb64:	0078 7953 7473 6d65 4520 7272 726f 203a     x.System Error: 
   dcb74:	3020 0078 6554 706d 202e 203d 2000 b0c2      0x.Temp. = . ..
   dcb84:	0046 7250 7365 2e73 3d20 0020 614d 7272     F.Press. = .Marr
   dcb94:	6569 6920 2073 7267 6165 2174 4300 6d6f     ie is great!.Com
   dcba4:	6170 7373 6820 6165 6964 676e 0900 0009     pass heading....
   dcbb4:	6d20 6870 4100 4300 4f00 6972 6e65 6174      mph.A.C.Orienta
   dcbc4:	6974 6e6f 203a 2c00 0020 7551 7461 7265     tion: ., .Quater
   dcbd4:	696e 6e6f 203a 4300 6c61 6269 6172 6974     nion: .Calibrati
   dcbe4:	6e6f 203a 0a00 000a 3a58 0020 5909 203a     on: ....X: ..Y: 
   dcbf4:	0900 3a5a 0020 6f63 706d 7361 2073 6568     ..Z: .compass he
   dcc04:	6461 6e69 3a67 2020 7000 6973 6620 6f72     ading:  .psi fro
   dcc14:	206d 6e62 306f 3535 000a 6156 656e 5620     m bno055..Vane V
   dcc24:	6c61 6575 4409 7269 6365 6974 6e6f 4809     alue.Direction.H
   dcc34:	6165 6964 676e 4400 7661 7369 5720 6e69     eading.Davis Win
   dcc44:	2064 7053 6565 2064 6554 7473 5200 746f     d Speed Test.Rot
   dcc54:	7461 6f69 736e 4d09 4850 4200 454d 3832     ations.MPH.BME28
   dcc64:	2030 6574 7473 3100 3832 3678 2034 4c4f     0 test.128x64 OL
   dcc74:	4445 4620 6165 6874 7265 6957 676e 7420     ED FeatherWing t
   dcc84:	7365 0074 4c4f 4445 6220 6765 6e75 4200     est.OLED begun.B
   dcc94:	7475 6f74 206e 6574 7473 4300 6e6f 656e     utton test.Conne
   dcca4:	7463 6e69 2067 6f74 5320 4953 0a44 6127     cting to SSID.'a
   dccb4:	6164 7266 6975 2774 003a 6f63 6e6e 6365     dafruit':.connec
   dccc4:	6574 2164 4900 3a50 3120 2e30 2e30 2e31     ted!.IP: 10.0.1.
   dccd4:	3332 5300 6e65 6964 676e 7620 6c61 2320     23.Sending val #
   dcce4:	0030 6f43 6c75 2064 6f6e 2074 6966 646e     0.Could not find
   dccf4:	6120 7620 6c61 6469 4220 454d 3832 2030      a valid BME280 
   dcd04:	6573 736e 726f 202c 6863 6365 206b 6977     sensor, check wi
   dcd14:	6972 676e 202c 6461 7264 7365 2c73 7320     ring, address, s
   dcd24:	6e65 6f73 2072 4449 0021 6553 736e 726f     ensor ID!.Sensor
   dcd34:	4449 7720 7361 203a 7830 2000 2020 2020     ID was: 0x.     
   dcd44:	2020 4920 2044 666f 3020 4678 2046 7270        ID of 0xFF pr
   dcd54:	626f 6261 796c 6d20 6165 736e 6120 6220     obably means a b
   dcd64:	6461 6120 6464 6572 7373 202c 2061 4d42     ad address, a BM
   dcd74:	2050 3831 2030 726f 4220 504d 3020 3538     P 180 or BMP 085
   dcd84:	000a 2020 4920 2044 666f 3020 3578 2d36     ..   ID of 0x56-
   dcd94:	7830 3835 7220 7065 6572 6573 746e 2073     0x58 represents 
   dcda4:	2061 4d42 2050 3832 2c30 000a 2020 2020     a BMP 280,..    
   dcdb4:	2020 2020 4449 6f20 2066 7830 3036 7220         ID of 0x60 r
   dcdc4:	7065 6572 6573 746e 2073 2061 4d42 2045     epresents a BME 
   dcdd4:	3832 2e30 000a 2020 2020 2020 2020 4449     280...        ID
   dcde4:	6f20 2066 7830 3136 7220 7065 6572 6573      of 0x61 represe
   dcdf4:	746e 2073 2061 4d42 2045 3836 2e30 000a     nts a BME 680...
   dce04:	6557 5362 7265 6169 206c 4433 4620 7269     WebSerial 3D Fir
   dce14:	776d 7261 0065 6f46 6e75 2064 3249 2043     mware.Found I2C 
   dce24:	4545 5250 4d4f 5400 7365 6974 676e 7320     EEPROM.Testing s
   dce34:	7a69 2165 4900 4332 4520 5045 4f52 204d     ize!.I2C EEPROM 
   dce44:	6f6e 2074 6469 6e65 6974 6966 6465 2e20     not identified .
   dce54:	2e2e 6320 6568 6b63 7920 756f 2072 6f63     .. check your co
   dce64:	6e6e 6365 6974 6e6f 3f73 0a0d 4600 6961     nnections?...Fai
   dce74:	656c 2064 6f74 7720 6972 6574 6120 6464     led to write add
   dce84:	6572 7373 3020 0078 6146 6c69 6465 7420     ress 0x.Failed t
   dce94:	206f 6572 772d 6972 6574 6120 6464 6572     o re-write addre
   dcea4:	7373 3020 0078 6f46 6e75 2064 616d 2078     ss 0x.Found max 
   dceb4:	6461 7264 7365 0073 6854 7369 4520 5045     address.This EEP
   dcec4:	4f52 204d 6163 206e 7473 726f 2065 2000     ROM can store . 
   dced4:	7962 6574 0073 6f4f 706f 2c73 6e20 206f     bytes.Ooops, no 
   dcee4:	4e42 304f 3535 6420 7465 6365 6574 2064     BNO055 detected 
   dcef4:	2e2e 202e 6843 6365 206b 6f79 7275 7720     ... Check your w
   dcf04:	7269 6e69 2067 726f 4920 4332 4120 4444     iring or I2C ADD
   dcf14:	2152 0a00 6f4e 4320 6c61 6269 6172 6974     R!..No Calibrati
   dcf24:	6e6f 4420 7461 2061 6f66 2072 6874 7369     on Data for this
   dcf34:	7320 6e65 6f73 2072 7865 7369 7374 6920      sensor exists i
   dcf44:	206e 4545 5250 4d4f 0a00 6f46 6e75 2064     n EEPROM..Found 
   dcf54:	6143 696c 7262 7461 6f69 206e 6f66 2072     Calibration for 
   dcf64:	6874 7369 7320 6e65 6f73 2072 6e69 4520     this sensor in E
   dcf74:	5045 4f52 2e4d 0a00 520a 7365 6f74 6972     EPROM....Restori
   dcf84:	676e 4320 6c61 6269 6172 6974 6e6f 6420     ng Calibration d
   dcf94:	7461 2061 6f74 7420 6568 4220 4f4e 3530     ata to the BNO05
   dcfa4:	2e35 2e2e 0a00 430a 6c61 6269 6172 6974     5......Calibrati
   dcfb4:	6e6f 6420 7461 2061 6f6c 6461 6465 6920     on data loaded i
   dcfc4:	746e 206f 4e42 304f 3535 4d00 766f 2065     nto BNO055.Move 
   dcfd4:	6573 736e 726f 7320 696c 6867 6c74 2079     sensor slightly 
   dcfe4:	6f74 6320 6c61 6269 6172 6574 6d20 6761     to calibrate mag
   dcff4:	656e 6f74 656d 6574 7372 5000 656c 7361     netometers.Pleas
   dd004:	2065 6143 696c 7262 7461 2065 6553 736e     e Calibrate Sens
   dd014:	726f 203a 0a00 7546 6c6c 2079 6163 696c     or: ..Fully cali
   dd024:	7262 7461 6465 0021 6143 696c 7262 7461     brated!.Calibrat
   dd034:	6f69 206e 6552 7573 746c 3a73 0020 0a0a     ion Results: ...
   dd044:	7453 726f 6e69 2067 6163 696c 7262 7461     Storing calibrat
   dd054:	6f69 206e 6164 6174 7420 206f 4545 5250     ion data to EEPR
   dd064:	4d4f 2e2e 002e 6144 6174 7320 6f74 6572     OM....Data store
   dd074:	2064 6f74 4520 5045 4f52 2e4d 0a00 2d2d     d to EEPROM...--
   dd084:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dd094:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 000a     --------------..
   dd0a4:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   dd0b4:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   dd0c4:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   dd0d4:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   dd0e4:	7525 003e                                   %u>.

000dd0e8 <_ZTVN8particle11SPISettingsE>:
	...
   dd0f0:	5935 000d 5909 000d 590b 000d               5Y...Y...Y..

000dd0fc <_ZTV15Adafruit_BNO055>:
	...
   dd104:	6679 000d 66bd 000d 6677 000d 6d11 000d     yf...f..wf...m..
   dd114:	667d 000d                                   }f..

000dd118 <_ZTV17Adafruit_GrayOLED>:
	...
   dd128:	7785 000d 8341 000d 6d63 000d 718d 000d     .w..A...cm...q..
   dd138:	718f 000d 71c1 000d 719d 000d 71af 000d     .q...q...q...q..
   dd148:	70d1 000d 718d 000d 73b9 000d 6f5f 000d     .p...q...s.._o..
   dd158:	71d9 000d 7217 000d 7251 000d 7297 000d     .q...r..Qr...r..
   dd168:	7335 000d 72b3 000d 40a5 000d               5s...r...@..

000dd174 <_ZL4font>:
   dd174:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   dd184:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   dd194:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   dd1a4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   dd1b4:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   dd1c4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   dd1d4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   dd1e4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   dd1f4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   dd204:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   dd214:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   dd224:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   dd234:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   dd244:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   dd254:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   dd264:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   dd274:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   dd284:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   dd294:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   dd2a4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   dd2b4:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   dd2c4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   dd2d4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   dd2e4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   dd2f4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   dd304:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   dd314:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   dd324:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   dd334:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   dd344:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   dd354:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   dd364:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   dd374:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   dd384:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   dd394:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   dd3a4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   dd3b4:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   dd3c4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   dd3d4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   dd3e4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   dd3f4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dd404:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   dd414:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dd424:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   dd434:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   dd444:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dd454:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   dd464:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   dd474:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   dd484:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dd494:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dd4a4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dd4b4:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dd4c4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dd4d4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dd4e4:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   dd4f4:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   dd504:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   dd514:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   dd524:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   dd534:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   dd544:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   dd554:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   dd564:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   dd574:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   dd584:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   dd594:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   dd5a4:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   dd5b4:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   dd5c4:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   dd5d4:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   dd5e4:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   dd5f4:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   dd604:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   dd614:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   dd624:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   dd634:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   dd644:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   dd654:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   dd664:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000dd674 <_ZTV12Adafruit_GFX>:
	...
   dd684:	7785 000d 8341 000d 40a5 000d 718d 000d     .w..A....@...q..
   dd694:	718f 000d 71c1 000d 719d 000d 71af 000d     .q...q...q...q..
   dd6a4:	70d1 000d 718d 000d 73b9 000d 7333 000d     .p...q...s..3s..
   dd6b4:	71d9 000d 7217 000d 7251 000d 7297 000d     .q...r..Qr...r..
   dd6c4:	7335 000d 72b3 000d                         5s...r..

000dd6cc <_ZTV15Adafruit_SH110X>:
	...
   dd6d4:	40a5 000d 40a5 000d 7785 000d 8341 000d     .@...@...w..A...
   dd6e4:	6d63 000d 718d 000d 718f 000d 71c1 000d     cm...q...q...q..
   dd6f4:	719d 000d 71af 000d 70d1 000d 718d 000d     .q...q...p...q..
   dd704:	73b9 000d 6f5f 000d 71d9 000d 7217 000d     .s.._o...q...r..
   dd714:	7251 000d 7297 000d 7335 000d 72b3 000d     Qr...r..5s...r..
   dd724:	7893 000d                                   .x..

000dd728 <_ZL12splash2_data>:
   dd728:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   dd738:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   dd748:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   dd764:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   dd774:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   dd784:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   dd794:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   dd7a4:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   dd7b4:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   dd7c4:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   dd7d4:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   dd7e4:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   dd7f4:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   dd804:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   dd814:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   dd824:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   dd834:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   dd844:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   dd854:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   dd864:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   dd874:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   dd884:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   dd894:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   dd8a4:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   dd8bc:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   dd8cc:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   dd8dc:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   dd8ec:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   dd8fc:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000dd908 <_ZTV15Adafruit_SH1107>:
	...
   dd910:	7a31 000d 7a45 000d 7785 000d 8341 000d     1z..Ez...w..A...
   dd920:	6d63 000d 718d 000d 718f 000d 71c1 000d     cm...q...q...q..
   dd930:	719d 000d 71af 000d 70d1 000d 718d 000d     .q...q...p...q..
   dd940:	73b9 000d 6f5f 000d 71d9 000d 7217 000d     .s.._o...q...r..
   dd950:	7251 000d 7297 000d 7335 000d 72b3 000d     Qr...r..5s...r..
   dd960:	7893 000d                                   .x..

000dd964 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   dd964:	00d3 7fa8                                   ....

000dd968 <_ZZN15Adafruit_SH11075beginEhbE4init>:
   dd968:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
   dd978:	35db 3fa8 a6a4 0000                         .5.?....

000dd980 <_ZTVN5spark13EthernetClassE>:
	...
   dd988:	816b 000d 8161 000d 8157 000d 814d 000d     k...a...W...M...
   dd998:	8141 000d 8135 000d 8d03 000d 8d0b 000d     A...5...........
   dd9a8:	8129 000d 8121 000d 8117 000d 810d 000d     )...!...........
   dd9b8:	8d3b 000d                                   ;...

000dd9bc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dd9bc:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   dd9cc:	766f 0066 7061 0070 5925 252d 2d6d 6425     ovf.app.%Y-%m-%d
   dd9dc:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   dd9ec:	6d69 0065                                   ime.

000dd9f0 <_ZTV9IPAddress>:
	...
   dd9f8:	87f9 000d 87e9 000d 87eb 000d               ............

000dda04 <_ZTV9USBSerial>:
	...
   dda0c:	88d1 000d 8939 000d 890f 000d 8341 000d     ....9.......A...
   dda1c:	8901 000d 88d3 000d 88e3 000d 8933 000d     ............3...
   dda2c:	88f3 000d 88cb 000d                         ........

000dda34 <_ZTVN5spark13CellularClassE>:
	...
   dda3c:	8a97 000d 8a8d 000d 8a83 000d 8a39 000d     ............9...
   dda4c:	8a77 000d 8a6b 000d 8d03 000d 8d0b 000d     w...k...........
   dda5c:	8a5f 000d 8a57 000d 8a4d 000d 8a43 000d     _...W...M...C...
   dda6c:	8d3b 000d                                   ;...

000dda70 <_ZTV11USARTSerial>:
	...
   dda78:	8ad1 000d 8b3f 000d 8b17 000d 8341 000d     ....?.......A...
   dda88:	8ae7 000d 8b03 000d 8af5 000d 8b11 000d     ................
   dda98:	8ad3 000d 8ad9 000d                         ........

000ddaa0 <_ZTV7TwoWire>:
	...
   ddaa8:	8bc5 000d 8c0f 000d 8be7 000d 8bc7 000d     ................
   ddab8:	8bef 000d 8bf7 000d 8bff 000d 8c07 000d     ................

000ddac8 <_ZTVN5spark12NetworkClassE>:
	...
   ddad0:	8cc3 000d 8ccd 000d 8cd7 000d 8ce1 000d     ................
   ddae0:	8ceb 000d 8cf7 000d 8d03 000d 8d0b 000d     ................
   ddaf0:	8d13 000d 8d1f 000d 8d27 000d 8d31 000d     ........'...1...
   ddb00:	8d3b 000d                                   ;...

000ddb04 <_ZSt7nothrow>:
   ddb04:	0000 0000 6f70 0077 0000 0000               ....pow.....

000ddb10 <CSWTCH.8>:
   ddb10:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   ddb20:	21d2 7f33 d97c c002                         .!3.|...

000ddb28 <CSWTCH.9>:
   ddb28:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   ddb38:	2d18 5444 21fb c009 0000 0000               .-DT.!......

000ddb44 <CSWTCH.8>:
   ddb44:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000ddb50 <CSWTCH.9>:
   ddb50:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000ddb5c <npio2_hw>:
   ddb5c:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   ddb6c:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   ddb7c:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   ddb8c:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   ddb9c:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   ddbac:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   ddbbc:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   ddbcc:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000ddbdc <two_over_pi>:
   ddbdc:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   ddbec:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   ddbfc:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   ddc0c:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   ddc1c:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   ddc2c:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   ddc3c:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   ddc4c:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   ddc5c:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   ddc6c:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   ddc7c:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   ddc8c:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   ddc9c:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   ddcac:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   ddcbc:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   ddccc:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   ddcdc:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   ddcec:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   ddcfc:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   ddd0c:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   ddd1c:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   ddd2c:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   ddd3c:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   ddd4c:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   ddd5c:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   ddd6c:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   ddd7c:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   ddd8c:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   ddd9c:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   dddac:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   dddbc:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   dddcc:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   ddddc:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   dddec:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   dddfc:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   dde0c:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   dde1c:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   dde2c:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   dde3c:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   dde4c:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   dde5c:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   dde6c:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   dde7c:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   dde8c:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   dde9c:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   ddeac:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   ddebc:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   ddecc:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   ddedc:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   ddeec:	008c 0000 006b 0000                         ....k...

000ddef4 <PIo2>:
   ddef4:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   ddf04:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   ddf14:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000ddf20 <init_jk>:
   ddf20:	0004 0000 0007 0000 0009 0000 0000 0000     ................

000ddf30 <atanhi>:
   ddf30:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   ddf40:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000ddf50 <atanlo>:
   ddf50:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   ddf60:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000ddf70 <TWO52>:
   ddf70:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000ddf80 <atanhi>:
   ddf80:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000ddf90 <atanlo>:
   ddf90:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3

000ddfa0 <link_const_variable_data_end>:
   ddfa0:	000d4d69 	.word	0x000d4d69
   ddfa4:	000d8175 	.word	0x000d8175
   ddfa8:	000d830d 	.word	0x000d830d
   ddfac:	000d8331 	.word	0x000d8331
   ddfb0:	000d8661 	.word	0x000d8661
   ddfb4:	000d8671 	.word	0x000d8671
   ddfb8:	000d86a5 	.word	0x000d86a5
   ddfbc:	000d8aa1 	.word	0x000d8aa1
   ddfc0:	000d8e0d 	.word	0x000d8e0d

000ddfc4 <link_constructors_end>:
	...
