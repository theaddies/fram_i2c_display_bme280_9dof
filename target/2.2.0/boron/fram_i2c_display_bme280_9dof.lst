
z:/Personal/Electronics/particle/fram_i2c_display_bme280_9dof/target/2.2.0/boron/fram_i2c_display_bme280_9dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ad80  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000deda0  000deda0  0000eda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000deda8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e3cc  000dedac  0001e3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003b0  2003e440  2003e440  0002e440  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000dee20  000dee20  0001ee20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dee48  000dee48  0001ee48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00239138  00000000  00000000  0001ee4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00022079  00000000  00000000  00257f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003ae1d  00000000  00000000  00279ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000030a8  00000000  00000000  002b4e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00008980  00000000  00000000  002b7ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000482d1  00000000  00000000  002c0842  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00058a10  00000000  00000000  00308b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00114d7c  00000000  00000000  00361523  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000094b8  00000000  00000000  004762a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f009 fa8d 	bl	dd550 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f009 fa95 	bl	dd56c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e3cc 	.word	0x2003e3cc
   d404c:	000dedac 	.word	0x000dedac
   d4050:	2003e440 	.word	0x2003e440
   d4054:	2003e440 	.word	0x2003e440
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 ff19 	bl	d8e98 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000ded78 	.word	0x000ded78
   d4080:	000ded9c 	.word	0x000ded9c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b996 	b.w	d53b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 f88d 	bl	d51a8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 beb9 	b.w	d8e08 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b9ef 	b.w	d8478 <malloc>

000d409a <_Znaj>:
   d409a:	f004 b9ed 	b.w	d8478 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b9f3 	b.w	d8488 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f004 f910 	bl	d82d0 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7fd1 	.word	0x000d7fd1

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z12isr_rotationv>:
else
Serial.println("N");
} 

// This is the function that the interrupt calls to increment the rotation count
void isr_rotation () {
   d40c8:	b510      	push	{r4, lr}
//a debounce time of 22 ms is equivalent to wind of 100 mph.
if ((millis() - ContactBounceTime) > 22 ) { // debounce the switch contact.
   d40ca:	4c07      	ldr	r4, [pc, #28]	; (d40e8 <_Z12isr_rotationv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40cc:	f003 ff88 	bl	d7fe0 <HAL_Timer_Get_Milli_Seconds>
   d40d0:	6823      	ldr	r3, [r4, #0]
   d40d2:	1ac0      	subs	r0, r0, r3
   d40d4:	2816      	cmp	r0, #22
   d40d6:	d906      	bls.n	d40e6 <_Z12isr_rotationv+0x1e>
Rotations++;
   d40d8:	4a04      	ldr	r2, [pc, #16]	; (d40ec <_Z12isr_rotationv+0x24>)
   d40da:	6813      	ldr	r3, [r2, #0]
   d40dc:	3301      	adds	r3, #1
   d40de:	6013      	str	r3, [r2, #0]
   d40e0:	f003 ff7e 	bl	d7fe0 <HAL_Timer_Get_Milli_Seconds>
ContactBounceTime = millis();
   d40e4:	6020      	str	r0, [r4, #0]
}

}
   d40e6:	bd10      	pop	{r4, pc}
   d40e8:	2003e440 	.word	0x2003e440
   d40ec:	2003e444 	.word	0x2003e444

000d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d40f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d40f4:	2a00      	cmp	r2, #0
size_t Print::print(T n, int base)
   d40f6:	461d      	mov	r5, r3
        if (n < 0 && base == 10) {
   d40f8:	f175 0300 	sbcs.w	r3, r5, #0
size_t Print::print(T n, int base)
   d40fc:	9f08      	ldr	r7, [sp, #32]
   d40fe:	4680      	mov	r8, r0
   d4100:	4614      	mov	r4, r2
        if (n < 0 && base == 10) {
   d4102:	da11      	bge.n	d4128 <_ZN5Print5printIxLi0EEEjT_i.part.0+0x38>
   d4104:	2f0a      	cmp	r7, #10
   d4106:	d10f      	bne.n	d4128 <_ZN5Print5printIxLi0EEEjT_i.part.0+0x38>
            t = print('-');
   d4108:	212d      	movs	r1, #45	; 0x2d
   d410a:	f004 fc69 	bl	d89e0 <_ZN5Print5printEc>
            val = -n;
   d410e:	4262      	negs	r2, r4
            t = print('-');
   d4110:	4606      	mov	r6, r0
            val = -n;
   d4112:	eb65 0345 	sbc.w	r3, r5, r5, lsl #1
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4116:	b2ff      	uxtb	r7, r7
   d4118:	9700      	str	r7, [sp, #0]
   d411a:	4640      	mov	r0, r8
   d411c:	f004 fc99 	bl	d8a52 <_ZN5Print11printNumberEyh>
    }
}
   d4120:	4430      	add	r0, r6
   d4122:	b002      	add	sp, #8
   d4124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
   d4128:	4622      	mov	r2, r4
   d412a:	462b      	mov	r3, r5
        size_t t = 0;
   d412c:	2600      	movs	r6, #0
   d412e:	e7f2      	b.n	d4116 <_ZN5Print5printIxLi0EEEjT_i.part.0+0x26>

000d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>:
size_t Print::print(T n, int base)
   d4130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n < 0 && base == 10) {
   d4132:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d4134:	4607      	mov	r7, r0
   d4136:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d4138:	da0c      	bge.n	d4154 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x24>
   d413a:	2a0a      	cmp	r2, #10
   d413c:	d10a      	bne.n	d4154 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d413e:	212d      	movs	r1, #45	; 0x2d
   d4140:	f004 fc4e 	bl	d89e0 <_ZN5Print5printEc>
            val = -n;
   d4144:	4261      	negs	r1, r4
            t = print('-');
   d4146:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
   d4148:	b2f2      	uxtb	r2, r6
   d414a:	4638      	mov	r0, r7
   d414c:	f004 fc63 	bl	d8a16 <_ZN5Print11printNumberEmh>
}
   d4150:	4428      	add	r0, r5
   d4152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d4154:	4621      	mov	r1, r4
        size_t t = 0;
   d4156:	2500      	movs	r5, #0
   d4158:	e7f6      	b.n	d4148 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x18>

000d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>:
size_t Print::print(T n, int base)
   d415a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n < 0 && base == 10) {
   d415c:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d415e:	4607      	mov	r7, r0
   d4160:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d4162:	da0c      	bge.n	d417e <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
   d4164:	2a0a      	cmp	r2, #10
   d4166:	d10a      	bne.n	d417e <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d4168:	212d      	movs	r1, #45	; 0x2d
   d416a:	f004 fc39 	bl	d89e0 <_ZN5Print5printEc>
            val = -n;
   d416e:	4261      	negs	r1, r4
            t = print('-');
   d4170:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
   d4172:	b2f2      	uxtb	r2, r6
   d4174:	4638      	mov	r0, r7
   d4176:	f004 fc4e 	bl	d8a16 <_ZN5Print11printNumberEmh>
}
   d417a:	4428      	add	r0, r5
   d417c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d417e:	4621      	mov	r1, r4
        size_t t = 0;
   d4180:	2500      	movs	r5, #0
   d4182:	e7f6      	b.n	d4172 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x18>

000d4184 <_Z19displaySensorStatusv>:
{
   d4184:	b537      	push	{r0, r1, r2, r4, r5, lr}
    system_status = self_test_results = system_error = 0;
   d4186:	2300      	movs	r3, #0
    Serial.println("");
   d4188:	4d27      	ldr	r5, [pc, #156]	; (d4228 <_Z19displaySensorStatusv+0xa4>)
    system_status = self_test_results = system_error = 0;
   d418a:	f88d 3007 	strb.w	r3, [sp, #7]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   d418e:	f10d 0206 	add.w	r2, sp, #6
   d4192:	f10d 0105 	add.w	r1, sp, #5
    system_status = self_test_results = system_error = 0;
   d4196:	f88d 3006 	strb.w	r3, [sp, #6]
   d419a:	f88d 3005 	strb.w	r3, [sp, #5]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   d419e:	4823      	ldr	r0, [pc, #140]	; (d422c <_Z19displaySensorStatusv+0xa8>)
   d41a0:	f10d 0307 	add.w	r3, sp, #7
   d41a4:	f002 fc85 	bl	d6ab2 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>
    Serial.println("");
   d41a8:	f005 fa1a 	bl	d95e0 <_Z16_fetch_usbserialv>
   d41ac:	4629      	mov	r1, r5
   d41ae:	f004 fc26 	bl	d89fe <_ZN5Print7printlnEPKc>
    Serial.print("System Status: 0x");
   d41b2:	f005 fa15 	bl	d95e0 <_Z16_fetch_usbserialv>
   d41b6:	491e      	ldr	r1, [pc, #120]	; (d4230 <_Z19displaySensorStatusv+0xac>)
   d41b8:	f004 fc0e 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.println(system_status, HEX);
   d41bc:	f005 fa10 	bl	d95e0 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d41c0:	2210      	movs	r2, #16
   d41c2:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d41c6:	4604      	mov	r4, r0
   d41c8:	f004 fc25 	bl	d8a16 <_ZN5Print11printNumberEmh>
        n += println();
   d41cc:	4620      	mov	r0, r4
   d41ce:	f004 fc0a 	bl	d89e6 <_ZN5Print7printlnEv>
    Serial.print("Self Test:     0x");
   d41d2:	f005 fa05 	bl	d95e0 <_Z16_fetch_usbserialv>
   d41d6:	4917      	ldr	r1, [pc, #92]	; (d4234 <_Z19displaySensorStatusv+0xb0>)
   d41d8:	f004 fbfe 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.println(self_test_results, HEX);
   d41dc:	f005 fa00 	bl	d95e0 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d41e0:	2210      	movs	r2, #16
   d41e2:	f89d 1006 	ldrb.w	r1, [sp, #6]
   d41e6:	4604      	mov	r4, r0
   d41e8:	f004 fc15 	bl	d8a16 <_ZN5Print11printNumberEmh>
        n += println();
   d41ec:	4620      	mov	r0, r4
   d41ee:	f004 fbfa 	bl	d89e6 <_ZN5Print7printlnEv>
    Serial.print("System Error:  0x");
   d41f2:	f005 f9f5 	bl	d95e0 <_Z16_fetch_usbserialv>
   d41f6:	4910      	ldr	r1, [pc, #64]	; (d4238 <_Z19displaySensorStatusv+0xb4>)
   d41f8:	f004 fbee 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.println(system_error, HEX);
   d41fc:	f005 f9f0 	bl	d95e0 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4200:	2210      	movs	r2, #16
   d4202:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d4206:	4604      	mov	r4, r0
   d4208:	f004 fc05 	bl	d8a16 <_ZN5Print11printNumberEmh>
        n += println();
   d420c:	4620      	mov	r0, r4
   d420e:	f004 fbea 	bl	d89e6 <_ZN5Print7printlnEv>
    Serial.println("");
   d4212:	f005 f9e5 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4216:	4629      	mov	r1, r5
   d4218:	f004 fbf1 	bl	d89fe <_ZN5Print7printlnEPKc>
    delay(500);
   d421c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4220:	f004 fdac 	bl	d8d7c <delay>
}
   d4224:	b003      	add	sp, #12
   d4226:	bd30      	pop	{r4, r5, pc}
   d4228:	000dd929 	.word	0x000dd929
   d422c:	2003e49c 	.word	0x2003e49c
   d4230:	000dd714 	.word	0x000dd714
   d4234:	000dd726 	.word	0x000dd726
   d4238:	000dd738 	.word	0x000dd738

000d423c <_Z16displayCalStatusv>:
{
   d423c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    system = gyro = accel = mag = 0;
   d423e:	2300      	movs	r3, #0
   d4240:	f88d 300f 	strb.w	r3, [sp, #15]
   d4244:	f88d 300e 	strb.w	r3, [sp, #14]
   d4248:	f88d 300d 	strb.w	r3, [sp, #13]
   d424c:	f88d 300c 	strb.w	r3, [sp, #12]
    bno.getCalibration(&system, &gyro, &accel, &mag);
   d4250:	f10d 030f 	add.w	r3, sp, #15
   d4254:	f10d 020d 	add.w	r2, sp, #13
   d4258:	a903      	add	r1, sp, #12
   d425a:	4823      	ldr	r0, [pc, #140]	; (d42e8 <_Z16displayCalStatusv+0xac>)
   d425c:	9300      	str	r3, [sp, #0]
   d425e:	f10d 030e 	add.w	r3, sp, #14
   d4262:	f002 fc46 	bl	d6af2 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
    Serial.print("\t");
   d4266:	f005 f9bb 	bl	d95e0 <_Z16_fetch_usbserialv>
   d426a:	4920      	ldr	r1, [pc, #128]	; (d42ec <_Z16displayCalStatusv+0xb0>)
   d426c:	f004 fbb4 	bl	d89d8 <_ZN5Print5printEPKc>
    if (!system)
   d4270:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4274:	b923      	cbnz	r3, d4280 <_Z16displayCalStatusv+0x44>
        Serial.print("! ");
   d4276:	f005 f9b3 	bl	d95e0 <_Z16_fetch_usbserialv>
   d427a:	491d      	ldr	r1, [pc, #116]	; (d42f0 <_Z16displayCalStatusv+0xb4>)
   d427c:	f004 fbac 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print("Sys:");
   d4280:	f005 f9ae 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4284:	491b      	ldr	r1, [pc, #108]	; (d42f4 <_Z16displayCalStatusv+0xb8>)
   d4286:	f004 fba7 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(system, DEC);
   d428a:	f005 f9a9 	bl	d95e0 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d428e:	220a      	movs	r2, #10
   d4290:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d4294:	f004 fbbf 	bl	d8a16 <_ZN5Print11printNumberEmh>
    Serial.print(" G:");
   d4298:	f005 f9a2 	bl	d95e0 <_Z16_fetch_usbserialv>
   d429c:	4916      	ldr	r1, [pc, #88]	; (d42f8 <_Z16displayCalStatusv+0xbc>)
   d429e:	f004 fb9b 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(gyro, DEC);
   d42a2:	f005 f99d 	bl	d95e0 <_Z16_fetch_usbserialv>
   d42a6:	220a      	movs	r2, #10
   d42a8:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d42ac:	f004 fbb3 	bl	d8a16 <_ZN5Print11printNumberEmh>
    Serial.print(" A:");
   d42b0:	f005 f996 	bl	d95e0 <_Z16_fetch_usbserialv>
   d42b4:	4911      	ldr	r1, [pc, #68]	; (d42fc <_Z16displayCalStatusv+0xc0>)
   d42b6:	f004 fb8f 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(accel, DEC);
   d42ba:	f005 f991 	bl	d95e0 <_Z16_fetch_usbserialv>
   d42be:	220a      	movs	r2, #10
   d42c0:	f89d 100e 	ldrb.w	r1, [sp, #14]
   d42c4:	f004 fba7 	bl	d8a16 <_ZN5Print11printNumberEmh>
    Serial.print(" M:");
   d42c8:	f005 f98a 	bl	d95e0 <_Z16_fetch_usbserialv>
   d42cc:	490c      	ldr	r1, [pc, #48]	; (d4300 <_Z16displayCalStatusv+0xc4>)
   d42ce:	f004 fb83 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(mag, DEC);
   d42d2:	f005 f985 	bl	d95e0 <_Z16_fetch_usbserialv>
   d42d6:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d42da:	220a      	movs	r2, #10
   d42dc:	f004 fb9b 	bl	d8a16 <_ZN5Print11printNumberEmh>
}
   d42e0:	b005      	add	sp, #20
   d42e2:	f85d fb04 	ldr.w	pc, [sp], #4
   d42e6:	bf00      	nop
   d42e8:	2003e49c 	.word	0x2003e49c
   d42ec:	000dd928 	.word	0x000dd928
   d42f0:	000dd74a 	.word	0x000dd74a
   d42f4:	000dd74d 	.word	0x000dd74d
   d42f8:	000dd752 	.word	0x000dd752
   d42fc:	000dd756 	.word	0x000dd756
   d4300:	000dd75a 	.word	0x000dd75a

000d4304 <_Z11printValuesv>:
void printValues() {
   d4304:	b538      	push	{r3, r4, r5, lr}
    Serial.print("\n\nTemperature = ");
   d4306:	f005 f96b 	bl	d95e0 <_Z16_fetch_usbserialv>
   d430a:	4936      	ldr	r1, [pc, #216]	; (d43e4 <_Z11printValuesv+0xe0>)
    Serial.print(bme.readTemperature()*1.8F + 32.);
   d430c:	4c36      	ldr	r4, [pc, #216]	; (d43e8 <_Z11printValuesv+0xe4>)
    Serial.print("\n\nTemperature = ");
   d430e:	f004 fb63 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature()*1.8F + 32.);
   d4312:	f005 f965 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4316:	4605      	mov	r5, r0
   d4318:	4620      	mov	r0, r4
   d431a:	f001 fbc5 	bl	d5aa8 <_ZN15Adafruit_BME28015readTemperatureEv>
   d431e:	eddf 7a33 	vldr	s15, [pc, #204]	; d43ec <_Z11printValuesv+0xe8>
   d4322:	ee60 7a27 	vmul.f32	s15, s0, s15
   d4326:	ee17 0a90 	vmov	r0, s15
   d432a:	f008 fa73 	bl	dc814 <__aeabi_f2d>
   d432e:	4b30      	ldr	r3, [pc, #192]	; (d43f0 <_Z11printValuesv+0xec>)
   d4330:	2200      	movs	r2, #0
   d4332:	f008 f911 	bl	dc558 <__adddf3>
   d4336:	ec41 0b10 	vmov	d0, r0, r1
   d433a:	2102      	movs	r1, #2
   d433c:	4628      	mov	r0, r5
   d433e:	f004 fc90 	bl	d8c62 <_ZN5Print5printEdi>
    Serial.println(" F");
   d4342:	f005 f94d 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4346:	492b      	ldr	r1, [pc, #172]	; (d43f4 <_Z11printValuesv+0xf0>)
   d4348:	f004 fb59 	bl	d89fe <_ZN5Print7printlnEPKc>
    Serial.print("Pressure = ");
   d434c:	f005 f948 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4350:	4929      	ldr	r1, [pc, #164]	; (d43f8 <_Z11printValuesv+0xf4>)
   d4352:	f004 fb41 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(bme.readPressure() / 101325.0F * 760.0F);
   d4356:	f005 f943 	bl	d95e0 <_Z16_fetch_usbserialv>
   d435a:	4605      	mov	r5, r0
   d435c:	4620      	mov	r0, r4
   d435e:	f001 fbd1 	bl	d5b04 <_ZN15Adafruit_BME28012readPressureEv>
   d4362:	eddf 7a26 	vldr	s15, [pc, #152]	; d43fc <_Z11printValuesv+0xf8>
   d4366:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d436a:	2102      	movs	r1, #2
   d436c:	4628      	mov	r0, r5
   d436e:	ed9f 0a24 	vldr	s0, [pc, #144]	; d4400 <_Z11printValuesv+0xfc>
   d4372:	ee27 0a00 	vmul.f32	s0, s14, s0
   d4376:	f004 fc65 	bl	d8c44 <_ZN5Print5printEfi>
    Serial.println(" mmHg");
   d437a:	f005 f931 	bl	d95e0 <_Z16_fetch_usbserialv>
   d437e:	4921      	ldr	r1, [pc, #132]	; (d4404 <_Z11printValuesv+0x100>)
   d4380:	f004 fb3d 	bl	d89fe <_ZN5Print7printlnEPKc>
    Serial.print("Approx. Altitude = ");
   d4384:	f005 f92c 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4388:	491f      	ldr	r1, [pc, #124]	; (d4408 <_Z11printValuesv+0x104>)
   d438a:	f004 fb25 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d438e:	f005 f927 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4392:	ed9f 0a1e 	vldr	s0, [pc, #120]	; d440c <_Z11printValuesv+0x108>
   d4396:	4605      	mov	r5, r0
   d4398:	4620      	mov	r0, r4
   d439a:	f001 fc8d 	bl	d5cb8 <_ZN15Adafruit_BME28012readAltitudeEf>
   d439e:	2102      	movs	r1, #2
   d43a0:	4628      	mov	r0, r5
   d43a2:	f004 fc4f 	bl	d8c44 <_ZN5Print5printEfi>
    Serial.println(" m");
   d43a6:	f005 f91b 	bl	d95e0 <_Z16_fetch_usbserialv>
   d43aa:	4919      	ldr	r1, [pc, #100]	; (d4410 <_Z11printValuesv+0x10c>)
   d43ac:	f004 fb27 	bl	d89fe <_ZN5Print7printlnEPKc>
    Serial.print("Humidity = ");
   d43b0:	f005 f916 	bl	d95e0 <_Z16_fetch_usbserialv>
   d43b4:	4917      	ldr	r1, [pc, #92]	; (d4414 <_Z11printValuesv+0x110>)
   d43b6:	f004 fb0f 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d43ba:	f005 f911 	bl	d95e0 <_Z16_fetch_usbserialv>
   d43be:	4605      	mov	r5, r0
   d43c0:	4620      	mov	r0, r4
   d43c2:	f001 fd19 	bl	d5df8 <_ZN15Adafruit_BME28012readHumidityEv>
   d43c6:	2102      	movs	r1, #2
   d43c8:	4628      	mov	r0, r5
   d43ca:	f004 fc3b 	bl	d8c44 <_ZN5Print5printEfi>
    Serial.println(" %");
   d43ce:	f005 f907 	bl	d95e0 <_Z16_fetch_usbserialv>
   d43d2:	4911      	ldr	r1, [pc, #68]	; (d4418 <_Z11printValuesv+0x114>)
   d43d4:	f004 fb13 	bl	d89fe <_ZN5Print7printlnEPKc>
    Serial.println();
   d43d8:	f005 f902 	bl	d95e0 <_Z16_fetch_usbserialv>
}
   d43dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println();
   d43e0:	f004 bb01 	b.w	d89e6 <_ZN5Print7printlnEv>
   d43e4:	000dd75e 	.word	0x000dd75e
   d43e8:	2003e458 	.word	0x2003e458
   d43ec:	3fe66666 	.word	0x3fe66666
   d43f0:	40400000 	.word	0x40400000
   d43f4:	000dd76f 	.word	0x000dd76f
   d43f8:	000dd772 	.word	0x000dd772
   d43fc:	47c5e680 	.word	0x47c5e680
   d4400:	443e0000 	.word	0x443e0000
   d4404:	000dd77e 	.word	0x000dd77e
   d4408:	000dd784 	.word	0x000dd784
   d440c:	447d5000 	.word	0x447d5000
   d4410:	000dd798 	.word	0x000dd798
   d4414:	000dd79b 	.word	0x000dd79b
   d4418:	000dd7a7 	.word	0x000dd7a7

000d441c <_Z20displaySensorDetailsv>:
{
   d441c:	b530      	push	{r4, r5, lr}
  Serial.println("------------------------------------");
   d441e:	4d3b      	ldr	r5, [pc, #236]	; (d450c <_Z20displaySensorDetailsv+0xf0>)
  bno.getSensor(&sensor);
   d4420:	483b      	ldr	r0, [pc, #236]	; (d4510 <_Z20displaySensorDetailsv+0xf4>)
{
   d4422:	b08b      	sub	sp, #44	; 0x2c
  bno.getSensor(&sensor);
   d4424:	4669      	mov	r1, sp
   d4426:	f002 f9e5 	bl	d67f4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
  Serial.println("------------------------------------");
   d442a:	f005 f8d9 	bl	d95e0 <_Z16_fetch_usbserialv>
   d442e:	4629      	mov	r1, r5
   d4430:	f004 fae5 	bl	d89fe <_ZN5Print7printlnEPKc>
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
   d4434:	f005 f8d4 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4438:	4936      	ldr	r1, [pc, #216]	; (d4514 <_Z20displaySensorDetailsv+0xf8>)
   d443a:	f004 facd 	bl	d89d8 <_ZN5Print5printEPKc>
   d443e:	f005 f8cf 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4442:	4669      	mov	r1, sp
   d4444:	f004 fadb 	bl	d89fe <_ZN5Print7printlnEPKc>
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
   d4448:	f005 f8ca 	bl	d95e0 <_Z16_fetch_usbserialv>
   d444c:	4932      	ldr	r1, [pc, #200]	; (d4518 <_Z20displaySensorDetailsv+0xfc>)
   d444e:	f004 fac3 	bl	d89d8 <_ZN5Print5printEPKc>
   d4452:	f005 f8c5 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4456:	220a      	movs	r2, #10
   d4458:	9903      	ldr	r1, [sp, #12]
   d445a:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   d445c:	f7ff fe68 	bl	d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>
        n += println();
   d4460:	4620      	mov	r0, r4
   d4462:	f004 fac0 	bl	d89e6 <_ZN5Print7printlnEv>
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
   d4466:	f005 f8bb 	bl	d95e0 <_Z16_fetch_usbserialv>
   d446a:	492c      	ldr	r1, [pc, #176]	; (d451c <_Z20displaySensorDetailsv+0x100>)
   d446c:	f004 fab4 	bl	d89d8 <_ZN5Print5printEPKc>
   d4470:	f005 f8b6 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4474:	220a      	movs	r2, #10
   d4476:	9904      	ldr	r1, [sp, #16]
   d4478:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   d447a:	f7ff fe59 	bl	d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>
        n += println();
   d447e:	4620      	mov	r0, r4
   d4480:	f004 fab1 	bl	d89e6 <_ZN5Print7printlnEv>
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" xxx");
   d4484:	4c26      	ldr	r4, [pc, #152]	; (d4520 <_Z20displaySensorDetailsv+0x104>)
   d4486:	f005 f8ab 	bl	d95e0 <_Z16_fetch_usbserialv>
   d448a:	4926      	ldr	r1, [pc, #152]	; (d4524 <_Z20displaySensorDetailsv+0x108>)
   d448c:	f004 faa4 	bl	d89d8 <_ZN5Print5printEPKc>
   d4490:	f005 f8a6 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4494:	ed9d 0a06 	vldr	s0, [sp, #24]
   d4498:	2102      	movs	r1, #2
   d449a:	f004 fbd3 	bl	d8c44 <_ZN5Print5printEfi>
   d449e:	f005 f89f 	bl	d95e0 <_Z16_fetch_usbserialv>
   d44a2:	4621      	mov	r1, r4
   d44a4:	f004 faab 	bl	d89fe <_ZN5Print7printlnEPKc>
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" xxx");
   d44a8:	f005 f89a 	bl	d95e0 <_Z16_fetch_usbserialv>
   d44ac:	491e      	ldr	r1, [pc, #120]	; (d4528 <_Z20displaySensorDetailsv+0x10c>)
   d44ae:	f004 fa93 	bl	d89d8 <_ZN5Print5printEPKc>
   d44b2:	f005 f895 	bl	d95e0 <_Z16_fetch_usbserialv>
   d44b6:	ed9d 0a07 	vldr	s0, [sp, #28]
   d44ba:	2102      	movs	r1, #2
   d44bc:	f004 fbc2 	bl	d8c44 <_ZN5Print5printEfi>
   d44c0:	f005 f88e 	bl	d95e0 <_Z16_fetch_usbserialv>
   d44c4:	4621      	mov	r1, r4
   d44c6:	f004 fa9a 	bl	d89fe <_ZN5Print7printlnEPKc>
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" xxx");
   d44ca:	f005 f889 	bl	d95e0 <_Z16_fetch_usbserialv>
   d44ce:	4917      	ldr	r1, [pc, #92]	; (d452c <_Z20displaySensorDetailsv+0x110>)
   d44d0:	f004 fa82 	bl	d89d8 <_ZN5Print5printEPKc>
   d44d4:	f005 f884 	bl	d95e0 <_Z16_fetch_usbserialv>
   d44d8:	ed9d 0a08 	vldr	s0, [sp, #32]
   d44dc:	2102      	movs	r1, #2
   d44de:	f004 fbb1 	bl	d8c44 <_ZN5Print5printEfi>
   d44e2:	f005 f87d 	bl	d95e0 <_Z16_fetch_usbserialv>
   d44e6:	4621      	mov	r1, r4
   d44e8:	f004 fa89 	bl	d89fe <_ZN5Print7printlnEPKc>
  Serial.println("------------------------------------");
   d44ec:	f005 f878 	bl	d95e0 <_Z16_fetch_usbserialv>
   d44f0:	4629      	mov	r1, r5
   d44f2:	f004 fa84 	bl	d89fe <_ZN5Print7printlnEPKc>
  Serial.println("");
   d44f6:	f005 f873 	bl	d95e0 <_Z16_fetch_usbserialv>
   d44fa:	490d      	ldr	r1, [pc, #52]	; (d4530 <_Z20displaySensorDetailsv+0x114>)
   d44fc:	f004 fa7f 	bl	d89fe <_ZN5Print7printlnEPKc>
  delay(500);
   d4500:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4504:	f004 fc3a 	bl	d8d7c <delay>
}
   d4508:	b00b      	add	sp, #44	; 0x2c
   d450a:	bd30      	pop	{r4, r5, pc}
   d450c:	000dd7aa 	.word	0x000dd7aa
   d4510:	2003e49c 	.word	0x2003e49c
   d4514:	000dd7cf 	.word	0x000dd7cf
   d4518:	000dd7de 	.word	0x000dd7de
   d451c:	000dd7ed 	.word	0x000dd7ed
   d4520:	000dd80b 	.word	0x000dd80b
   d4524:	000dd7fc 	.word	0x000dd7fc
   d4528:	000dd810 	.word	0x000dd810
   d452c:	000dd81f 	.word	0x000dd81f
   d4530:	000dd929 	.word	0x000dd929

000d4534 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>:
{
   d4534:	b538      	push	{r3, r4, r5, lr}
   d4536:	4604      	mov	r4, r0
    Serial.println("\nCalibration offsets \n");
   d4538:	f005 f852 	bl	d95e0 <_Z16_fetch_usbserialv>
   d453c:	494c      	ldr	r1, [pc, #304]	; (d4670 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x13c>)
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   d453e:	4d4d      	ldr	r5, [pc, #308]	; (d4674 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x140>)
    Serial.println("\nCalibration offsets \n");
   d4540:	f004 fa5d 	bl	d89fe <_ZN5Print7printlnEPKc>
    Serial.print("Accelerometer: ");
   d4544:	f005 f84c 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4548:	494b      	ldr	r1, [pc, #300]	; (d4678 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x144>)
   d454a:	f004 fa45 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   d454e:	f005 f847 	bl	d95e0 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d4552:	220a      	movs	r2, #10
   d4554:	f9b4 1000 	ldrsh.w	r1, [r4]
   d4558:	f7ff fdff 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d455c:	f005 f840 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4560:	4629      	mov	r1, r5
   d4562:	f004 fa39 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_y); Serial.print(" ");
   d4566:	f005 f83b 	bl	d95e0 <_Z16_fetch_usbserialv>
   d456a:	220a      	movs	r2, #10
   d456c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   d4570:	f7ff fdf3 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4574:	f005 f834 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4578:	4629      	mov	r1, r5
   d457a:	f004 fa2d 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_z); Serial.print(" ");
   d457e:	f005 f82f 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4582:	220a      	movs	r2, #10
   d4584:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   d4588:	f7ff fde7 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d458c:	f005 f828 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4590:	4629      	mov	r1, r5
   d4592:	f004 fa21 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print("\nGyro: ");
   d4596:	f005 f823 	bl	d95e0 <_Z16_fetch_usbserialv>
   d459a:	4938      	ldr	r1, [pc, #224]	; (d467c <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x148>)
   d459c:	f004 fa1c 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_x); Serial.print(" ");
   d45a0:	f005 f81e 	bl	d95e0 <_Z16_fetch_usbserialv>
   d45a4:	220a      	movs	r2, #10
   d45a6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   d45aa:	f7ff fdd6 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d45ae:	f005 f817 	bl	d95e0 <_Z16_fetch_usbserialv>
   d45b2:	4629      	mov	r1, r5
   d45b4:	f004 fa10 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_y); Serial.print(" ");
   d45b8:	f005 f812 	bl	d95e0 <_Z16_fetch_usbserialv>
   d45bc:	220a      	movs	r2, #10
   d45be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   d45c2:	f7ff fdca 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d45c6:	f005 f80b 	bl	d95e0 <_Z16_fetch_usbserialv>
   d45ca:	4629      	mov	r1, r5
   d45cc:	f004 fa04 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_z); Serial.print(" ");
   d45d0:	f005 f806 	bl	d95e0 <_Z16_fetch_usbserialv>
   d45d4:	220a      	movs	r2, #10
   d45d6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d45da:	f7ff fdbe 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d45de:	f004 ffff 	bl	d95e0 <_Z16_fetch_usbserialv>
   d45e2:	4629      	mov	r1, r5
   d45e4:	f004 f9f8 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print("\nMag: ");
   d45e8:	f004 fffa 	bl	d95e0 <_Z16_fetch_usbserialv>
   d45ec:	4924      	ldr	r1, [pc, #144]	; (d4680 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x14c>)
   d45ee:	f004 f9f3 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_x); Serial.print(" ");
   d45f2:	f004 fff5 	bl	d95e0 <_Z16_fetch_usbserialv>
   d45f6:	220a      	movs	r2, #10
   d45f8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   d45fc:	f7ff fdad 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4600:	f004 ffee 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4604:	4629      	mov	r1, r5
   d4606:	f004 f9e7 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_y); Serial.print(" ");
   d460a:	f004 ffe9 	bl	d95e0 <_Z16_fetch_usbserialv>
   d460e:	220a      	movs	r2, #10
   d4610:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d4614:	f7ff fda1 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4618:	f004 ffe2 	bl	d95e0 <_Z16_fetch_usbserialv>
   d461c:	4629      	mov	r1, r5
   d461e:	f004 f9db 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_z); Serial.print(" ");
   d4622:	f004 ffdd 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4626:	220a      	movs	r2, #10
   d4628:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d462c:	f7ff fd95 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4630:	f004 ffd6 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4634:	4629      	mov	r1, r5
   d4636:	f004 f9cf 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print("\nAccel Radius: ");
   d463a:	f004 ffd1 	bl	d95e0 <_Z16_fetch_usbserialv>
   d463e:	4911      	ldr	r1, [pc, #68]	; (d4684 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x150>)
   d4640:	f004 f9ca 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_radius);
   d4644:	f004 ffcc 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4648:	220a      	movs	r2, #10
   d464a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
   d464e:	f7ff fd84 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
    Serial.print("\nMag Radius: ");
   d4652:	f004 ffc5 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4656:	490c      	ldr	r1, [pc, #48]	; (d4688 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x154>)
   d4658:	f004 f9be 	bl	d89d8 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_radius);
   d465c:	f004 ffc0 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4660:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
   d4664:	220a      	movs	r2, #10
}
   d4666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d466a:	f7ff bd76 	b.w	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d466e:	bf00      	nop
   d4670:	000dd82e 	.word	0x000dd82e
   d4674:	000dd9a5 	.word	0x000dd9a5
   d4678:	000dd845 	.word	0x000dd845
   d467c:	000dd855 	.word	0x000dd855
   d4680:	000dd85d 	.word	0x000dd85d
   d4684:	000dd864 	.word	0x000dd864
   d4688:	000dd874 	.word	0x000dd874

000d468c <_Z10getHeadingi>:
if(direction < 22)
   d468c:	2815      	cmp	r0, #21
void getHeading(int direction) {
   d468e:	b508      	push	{r3, lr}
if(direction < 22)
   d4690:	dc06      	bgt.n	d46a0 <_Z10getHeadingi+0x14>
Serial.println("N");
   d4692:	f004 ffa5 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4696:	4918      	ldr	r1, [pc, #96]	; (d46f8 <_Z10getHeadingi+0x6c>)
} 
   d4698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Serial.println("NW");
   d469c:	f004 b9af 	b.w	d89fe <_ZN5Print7printlnEPKc>
else if (direction < 67)
   d46a0:	2842      	cmp	r0, #66	; 0x42
   d46a2:	dc03      	bgt.n	d46ac <_Z10getHeadingi+0x20>
Serial.println("NE");
   d46a4:	f004 ff9c 	bl	d95e0 <_Z16_fetch_usbserialv>
   d46a8:	4914      	ldr	r1, [pc, #80]	; (d46fc <_Z10getHeadingi+0x70>)
   d46aa:	e7f5      	b.n	d4698 <_Z10getHeadingi+0xc>
else if (direction < 112)
   d46ac:	286f      	cmp	r0, #111	; 0x6f
   d46ae:	dc03      	bgt.n	d46b8 <_Z10getHeadingi+0x2c>
Serial.println("E");
   d46b0:	f004 ff96 	bl	d95e0 <_Z16_fetch_usbserialv>
   d46b4:	4912      	ldr	r1, [pc, #72]	; (d4700 <_Z10getHeadingi+0x74>)
   d46b6:	e7ef      	b.n	d4698 <_Z10getHeadingi+0xc>
else if (direction < 157)
   d46b8:	289c      	cmp	r0, #156	; 0x9c
   d46ba:	dc03      	bgt.n	d46c4 <_Z10getHeadingi+0x38>
Serial.println("SE");
   d46bc:	f004 ff90 	bl	d95e0 <_Z16_fetch_usbserialv>
   d46c0:	4910      	ldr	r1, [pc, #64]	; (d4704 <_Z10getHeadingi+0x78>)
   d46c2:	e7e9      	b.n	d4698 <_Z10getHeadingi+0xc>
else if (direction < 212)
   d46c4:	28d3      	cmp	r0, #211	; 0xd3
   d46c6:	dc03      	bgt.n	d46d0 <_Z10getHeadingi+0x44>
Serial.println("S");
   d46c8:	f004 ff8a 	bl	d95e0 <_Z16_fetch_usbserialv>
   d46cc:	490e      	ldr	r1, [pc, #56]	; (d4708 <_Z10getHeadingi+0x7c>)
   d46ce:	e7e3      	b.n	d4698 <_Z10getHeadingi+0xc>
else if (direction < 247)
   d46d0:	28f6      	cmp	r0, #246	; 0xf6
   d46d2:	dc03      	bgt.n	d46dc <_Z10getHeadingi+0x50>
Serial.println("SW");
   d46d4:	f004 ff84 	bl	d95e0 <_Z16_fetch_usbserialv>
   d46d8:	490c      	ldr	r1, [pc, #48]	; (d470c <_Z10getHeadingi+0x80>)
   d46da:	e7dd      	b.n	d4698 <_Z10getHeadingi+0xc>
else if (direction < 292)
   d46dc:	f5b0 7f92 	cmp.w	r0, #292	; 0x124
   d46e0:	da03      	bge.n	d46ea <_Z10getHeadingi+0x5e>
Serial.println("W");
   d46e2:	f004 ff7d 	bl	d95e0 <_Z16_fetch_usbserialv>
   d46e6:	490a      	ldr	r1, [pc, #40]	; (d4710 <_Z10getHeadingi+0x84>)
   d46e8:	e7d6      	b.n	d4698 <_Z10getHeadingi+0xc>
else if (direction < 337)
   d46ea:	f5b0 7fa8 	cmp.w	r0, #336	; 0x150
   d46ee:	dcd0      	bgt.n	d4692 <_Z10getHeadingi+0x6>
Serial.println("NW");
   d46f0:	f004 ff76 	bl	d95e0 <_Z16_fetch_usbserialv>
   d46f4:	4907      	ldr	r1, [pc, #28]	; (d4714 <_Z10getHeadingi+0x88>)
   d46f6:	e7cf      	b.n	d4698 <_Z10getHeadingi+0xc>
   d46f8:	000dd882 	.word	0x000dd882
   d46fc:	000dd884 	.word	0x000dd884
   d4700:	000dd885 	.word	0x000dd885
   d4704:	000dd887 	.word	0x000dd887
   d4708:	000dd88a 	.word	0x000dd88a
   d470c:	000dd88c 	.word	0x000dd88c
   d4710:	000dd890 	.word	0x000dd890
   d4714:	000dd88f 	.word	0x000dd88f

000d4718 <_Z19get_compass_headingv>:

float get_compass_heading() {
   d4718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d471c:	ed2d 8b08 	vpush	{d8-d11}
   d4720:	b097      	sub	sp, #92	; 0x5c
  // put your main code here, to run repeatedly:
uint8_t system, gyro, accel, mg = 0;
   d4722:	2300      	movs	r3, #0
   d4724:	f88d 300f 	strb.w	r3, [sp, #15]
bno.getCalibration(&system, &gyro, &accel, &mg);
   d4728:	f10d 030f 	add.w	r3, sp, #15
   d472c:	9300      	str	r3, [sp, #0]
   d472e:	f10d 020d 	add.w	r2, sp, #13
   d4732:	f10d 030e 	add.w	r3, sp, #14
   d4736:	a903      	add	r1, sp, #12
   d4738:	48db      	ldr	r0, [pc, #876]	; (d4aa8 <_Z19get_compass_headingv+0x390>)
imu::Vector<3> acc =bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
imu::Vector<3> gyr =bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
imu::Vector<3> mag =bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
//measured value of tilt in x
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d473a:	f8df 83a4 	ldr.w	r8, [pc, #932]	; d4ae0 <_Z19get_compass_headingv+0x3c8>
//measured value of tilt in y
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d473e:	f8df a3a4 	ldr.w	sl, [pc, #932]	; d4ae4 <_Z19get_compass_headingv+0x3cc>
 //this is the time through one loop of program
dt=(millis()-millisOld)/1000.;
millisOld=millis();
//measures tilt in x with filter to remove vibration but still quick to respond.  lesson 9
//complimentary filter
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   d4742:	f8df 93a4 	ldr.w	r9, [pc, #932]	; d4ae8 <_Z19get_compass_headingv+0x3d0>
//measures tilt in y with filter to remove vibration but still quick to respond.  lesson 9
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d4746:	f8df b3a4 	ldr.w	fp, [pc, #932]	; d4aec <_Z19get_compass_headingv+0x3d4>

thetaG=thetaG+gyr.y()*dt;
phiG=phiG-gyr.x()*dt;
 
phiRad=phi/360*(2*3.14);
   d474a:	ed9f 9ad8 	vldr	s18, [pc, #864]	; d4aac <_Z19get_compass_headingv+0x394>
bno.getCalibration(&system, &gyro, &accel, &mg);
   d474e:	f002 f9d0 	bl	d6af2 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
imu::Vector<3> acc =bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
   d4752:	a804      	add	r0, sp, #16
   d4754:	49d4      	ldr	r1, [pc, #848]	; (d4aa8 <_Z19get_compass_headingv+0x390>)
   d4756:	2208      	movs	r2, #8
   d4758:	f002 faca 	bl	d6cf0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> gyr =bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
   d475c:	a80a      	add	r0, sp, #40	; 0x28
   d475e:	49d2      	ldr	r1, [pc, #840]	; (d4aa8 <_Z19get_compass_headingv+0x390>)
   d4760:	2214      	movs	r2, #20
   d4762:	f002 fac5 	bl	d6cf0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> mag =bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
   d4766:	a810      	add	r0, sp, #64	; 0x40
   d4768:	49cf      	ldr	r1, [pc, #828]	; (d4aa8 <_Z19get_compass_headingv+0x390>)
   d476a:	220e      	movs	r2, #14
   d476c:	f002 fac0 	bl	d6cf0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4770:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d4774:	a3c2      	add	r3, pc, #776	; (adr r3, d4a80 <_Z19get_compass_headingv+0x368>)
   d4776:	e9d3 2300 	ldrd	r2, r3, [r3]
   d477a:	f008 f9cd 	bl	dcb18 <__aeabi_ddiv>
   d477e:	a3c0      	add	r3, pc, #768	; (adr r3, d4a80 <_Z19get_compass_headingv+0x368>)
   d4780:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4784:	ec41 0b18 	vmov	d8, r0, r1
   d4788:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d478c:	f008 f9c4 	bl	dcb18 <__aeabi_ddiv>
   d4790:	eeb0 1a48 	vmov.f32	s2, s16
   d4794:	eef0 1a68 	vmov.f32	s3, s17
   d4798:	ec41 0b10 	vmov	d0, r0, r1
   d479c:	f005 fafa 	bl	d9d94 <atan2>
   d47a0:	ec53 2b10 	vmov	r2, r3, d0
   d47a4:	ee10 0a10 	vmov	r0, s0
   d47a8:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   d47ac:	2200      	movs	r2, #0
   d47ae:	4bc0      	ldr	r3, [pc, #768]	; (d4ab0 <_Z19get_compass_headingv+0x398>)
   d47b0:	f008 f888 	bl	dc8c4 <__aeabi_dmul>
   d47b4:	a3b4      	add	r3, pc, #720	; (adr r3, d4a88 <_Z19get_compass_headingv+0x370>)
   d47b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47ba:	f008 f9ad 	bl	dcb18 <__aeabi_ddiv>
   d47be:	4bbd      	ldr	r3, [pc, #756]	; (d4ab4 <_Z19get_compass_headingv+0x39c>)
   d47c0:	2200      	movs	r2, #0
   d47c2:	f008 f87f 	bl	dc8c4 <__aeabi_dmul>
   d47c6:	f008 fb75 	bl	dceb4 <__aeabi_d2f>
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d47ca:	a3ad      	add	r3, pc, #692	; (adr r3, d4a80 <_Z19get_compass_headingv+0x368>)
   d47cc:	e9d3 2300 	ldrd	r2, r3, [r3]
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d47d0:	f8c8 0000 	str.w	r0, [r8]
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d47d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d47d8:	f008 f99e 	bl	dcb18 <__aeabi_ddiv>
   d47dc:	a3a8      	add	r3, pc, #672	; (adr r3, d4a80 <_Z19get_compass_headingv+0x368>)
   d47de:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47e2:	ec41 0b18 	vmov	d8, r0, r1
   d47e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d47ea:	f008 f995 	bl	dcb18 <__aeabi_ddiv>
   d47ee:	eeb0 1a48 	vmov.f32	s2, s16
   d47f2:	eef0 1a68 	vmov.f32	s3, s17
   d47f6:	ec41 0b10 	vmov	d0, r0, r1
   d47fa:	f005 facb 	bl	d9d94 <atan2>
   d47fe:	ec53 2b10 	vmov	r2, r3, d0
   d4802:	ee10 0a10 	vmov	r0, s0
   d4806:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   d480a:	2200      	movs	r2, #0
   d480c:	4ba8      	ldr	r3, [pc, #672]	; (d4ab0 <_Z19get_compass_headingv+0x398>)
   d480e:	f008 f859 	bl	dc8c4 <__aeabi_dmul>
   d4812:	a39d      	add	r3, pc, #628	; (adr r3, d4a88 <_Z19get_compass_headingv+0x370>)
   d4814:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4818:	f008 f97e 	bl	dcb18 <__aeabi_ddiv>
   d481c:	2200      	movs	r2, #0
   d481e:	4ba5      	ldr	r3, [pc, #660]	; (d4ab4 <_Z19get_compass_headingv+0x39c>)
   d4820:	f008 f850 	bl	dc8c4 <__aeabi_dmul>
   d4824:	f008 fb46 	bl	dceb4 <__aeabi_d2f>
phiFnew=.95*phiFold+.05*phiM;
   d4828:	4ba3      	ldr	r3, [pc, #652]	; (d4ab8 <_Z19get_compass_headingv+0x3a0>)
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d482a:	f8ca 0000 	str.w	r0, [sl]
   d482e:	4606      	mov	r6, r0
phiFnew=.95*phiFold+.05*phiM;
   d4830:	6818      	ldr	r0, [r3, #0]
   d4832:	f007 ffef 	bl	dc814 <__aeabi_f2d>
   d4836:	a396      	add	r3, pc, #600	; (adr r3, d4a90 <_Z19get_compass_headingv+0x378>)
   d4838:	e9d3 2300 	ldrd	r2, r3, [r3]
   d483c:	f008 f842 	bl	dc8c4 <__aeabi_dmul>
   d4840:	4604      	mov	r4, r0
   d4842:	4630      	mov	r0, r6
   d4844:	460d      	mov	r5, r1
   d4846:	f007 ffe5 	bl	dc814 <__aeabi_f2d>
   d484a:	a393      	add	r3, pc, #588	; (adr r3, d4a98 <_Z19get_compass_headingv+0x380>)
   d484c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4850:	f008 f838 	bl	dc8c4 <__aeabi_dmul>
   d4854:	4602      	mov	r2, r0
   d4856:	460b      	mov	r3, r1
   d4858:	4620      	mov	r0, r4
   d485a:	4629      	mov	r1, r5
   d485c:	f007 fe7c 	bl	dc558 <__adddf3>
   d4860:	f008 fb28 	bl	dceb4 <__aeabi_d2f>
   d4864:	4995      	ldr	r1, [pc, #596]	; (d4abc <_Z19get_compass_headingv+0x3a4>)
   d4866:	6008      	str	r0, [r1, #0]
thetaFnew=.95*thetaFold+.05*thetaM;
   d4868:	4895      	ldr	r0, [pc, #596]	; (d4ac0 <_Z19get_compass_headingv+0x3a8>)
   d486a:	6800      	ldr	r0, [r0, #0]
   d486c:	f007 ffd2 	bl	dc814 <__aeabi_f2d>
   d4870:	a387      	add	r3, pc, #540	; (adr r3, d4a90 <_Z19get_compass_headingv+0x378>)
   d4872:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4876:	f008 f825 	bl	dc8c4 <__aeabi_dmul>
   d487a:	4604      	mov	r4, r0
   d487c:	f8d8 0000 	ldr.w	r0, [r8]
   d4880:	460d      	mov	r5, r1
   d4882:	f007 ffc7 	bl	dc814 <__aeabi_f2d>
   d4886:	a384      	add	r3, pc, #528	; (adr r3, d4a98 <_Z19get_compass_headingv+0x380>)
   d4888:	e9d3 2300 	ldrd	r2, r3, [r3]
   d488c:	f008 f81a 	bl	dc8c4 <__aeabi_dmul>
   d4890:	4602      	mov	r2, r0
   d4892:	460b      	mov	r3, r1
   d4894:	4620      	mov	r0, r4
   d4896:	4629      	mov	r1, r5
   d4898:	f007 fe5e 	bl	dc558 <__adddf3>
   d489c:	f008 fb0a 	bl	dceb4 <__aeabi_d2f>
   d48a0:	4c88      	ldr	r4, [pc, #544]	; (d4ac4 <_Z19get_compass_headingv+0x3ac>)
dt=(millis()-millisOld)/1000.;
   d48a2:	4d89      	ldr	r5, [pc, #548]	; (d4ac8 <_Z19get_compass_headingv+0x3b0>)
thetaFnew=.95*thetaFold+.05*thetaM;
   d48a4:	6020      	str	r0, [r4, #0]
   d48a6:	f003 fb9b 	bl	d7fe0 <HAL_Timer_Get_Milli_Seconds>
dt=(millis()-millisOld)/1000.;
   d48aa:	682b      	ldr	r3, [r5, #0]
   d48ac:	4c87      	ldr	r4, [pc, #540]	; (d4acc <_Z19get_compass_headingv+0x3b4>)
   d48ae:	1ac0      	subs	r0, r0, r3
   d48b0:	f007 ff8e 	bl	dc7d0 <__aeabi_ui2d>
   d48b4:	4b86      	ldr	r3, [pc, #536]	; (d4ad0 <_Z19get_compass_headingv+0x3b8>)
   d48b6:	2200      	movs	r2, #0
   d48b8:	f008 f92e 	bl	dcb18 <__aeabi_ddiv>
   d48bc:	f008 fafa 	bl	dceb4 <__aeabi_d2f>
   d48c0:	6020      	str	r0, [r4, #0]
   d48c2:	f003 fb8d 	bl	d7fe0 <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
   d48c6:	6028      	str	r0, [r5, #0]
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   d48c8:	6820      	ldr	r0, [r4, #0]
   d48ca:	f007 ffa3 	bl	dc814 <__aeabi_f2d>
   d48ce:	4602      	mov	r2, r0
   d48d0:	460b      	mov	r3, r1
   d48d2:	ec43 2b1a 	vmov	d10, r2, r3
   d48d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   d48da:	f007 fff3 	bl	dc8c4 <__aeabi_dmul>
   d48de:	4606      	mov	r6, r0
   d48e0:	460f      	mov	r7, r1
   d48e2:	f8d9 0000 	ldr.w	r0, [r9]
   d48e6:	f007 ff95 	bl	dc814 <__aeabi_f2d>
   d48ea:	4632      	mov	r2, r6
   d48ec:	463b      	mov	r3, r7
   d48ee:	f007 fe33 	bl	dc558 <__adddf3>
   d48f2:	a367      	add	r3, pc, #412	; (adr r3, d4a90 <_Z19get_compass_headingv+0x378>)
   d48f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d48f8:	f007 ffe4 	bl	dc8c4 <__aeabi_dmul>
   d48fc:	4604      	mov	r4, r0
   d48fe:	f8d8 0000 	ldr.w	r0, [r8]
   d4902:	460d      	mov	r5, r1
   d4904:	f007 ff86 	bl	dc814 <__aeabi_f2d>
   d4908:	a363      	add	r3, pc, #396	; (adr r3, d4a98 <_Z19get_compass_headingv+0x380>)
   d490a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d490e:	f007 ffd9 	bl	dc8c4 <__aeabi_dmul>
   d4912:	4602      	mov	r2, r0
   d4914:	460b      	mov	r3, r1
   d4916:	4620      	mov	r0, r4
   d4918:	4629      	mov	r1, r5
   d491a:	f007 fe1d 	bl	dc558 <__adddf3>
   d491e:	f008 fac9 	bl	dceb4 <__aeabi_d2f>
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d4922:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   d4926:	ee08 0a90 	vmov	s17, r0
   d492a:	f8c9 0000 	str.w	r0, [r9]
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d492e:	ec51 0b1a 	vmov	r0, r1, d10
   d4932:	f007 ffc7 	bl	dc8c4 <__aeabi_dmul>
   d4936:	4604      	mov	r4, r0
   d4938:	460d      	mov	r5, r1
   d493a:	f8db 0000 	ldr.w	r0, [fp]
   d493e:	f007 ff69 	bl	dc814 <__aeabi_f2d>
   d4942:	4622      	mov	r2, r4
   d4944:	462b      	mov	r3, r5
   d4946:	f007 fe05 	bl	dc554 <__aeabi_dsub>
   d494a:	a351      	add	r3, pc, #324	; (adr r3, d4a90 <_Z19get_compass_headingv+0x378>)
   d494c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4950:	f007 ffb8 	bl	dc8c4 <__aeabi_dmul>
   d4954:	4680      	mov	r8, r0
   d4956:	f8da 0000 	ldr.w	r0, [sl]
   d495a:	4689      	mov	r9, r1
   d495c:	f007 ff5a 	bl	dc814 <__aeabi_f2d>
   d4960:	a34d      	add	r3, pc, #308	; (adr r3, d4a98 <_Z19get_compass_headingv+0x380>)
   d4962:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4966:	f007 ffad 	bl	dc8c4 <__aeabi_dmul>
   d496a:	4602      	mov	r2, r0
   d496c:	460b      	mov	r3, r1
   d496e:	4640      	mov	r0, r8
   d4970:	4649      	mov	r1, r9
   d4972:	f007 fdf1 	bl	dc558 <__adddf3>
   d4976:	f008 fa9d 	bl	dceb4 <__aeabi_d2f>
thetaG=thetaG+gyr.y()*dt;
   d497a:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4af0 <_Z19get_compass_headingv+0x3d8>
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d497e:	f8cb 0000 	str.w	r0, [fp]
   d4982:	ee08 0a10 	vmov	s16, r0
thetaG=thetaG+gyr.y()*dt;
   d4986:	f8d8 0000 	ldr.w	r0, [r8]
   d498a:	f007 ff43 	bl	dc814 <__aeabi_f2d>
   d498e:	4632      	mov	r2, r6
   d4990:	463b      	mov	r3, r7
   d4992:	f007 fde1 	bl	dc558 <__adddf3>
   d4996:	f008 fa8d 	bl	dceb4 <__aeabi_d2f>
phiG=phiG-gyr.x()*dt;
   d499a:	4e4e      	ldr	r6, [pc, #312]	; (d4ad4 <_Z19get_compass_headingv+0x3bc>)
thetaG=thetaG+gyr.y()*dt;
   d499c:	f8c8 0000 	str.w	r0, [r8]
phiG=phiG-gyr.x()*dt;
   d49a0:	6830      	ldr	r0, [r6, #0]
   d49a2:	f007 ff37 	bl	dc814 <__aeabi_f2d>
   d49a6:	4622      	mov	r2, r4
   d49a8:	462b      	mov	r3, r5
   d49aa:	f007 fdd3 	bl	dc554 <__aeabi_dsub>
   d49ae:	f008 fa81 	bl	dceb4 <__aeabi_d2f>
phiRad=phi/360*(2*3.14);
   d49b2:	eec8 7a09 	vdiv.f32	s15, s16, s18
phiG=phiG-gyr.x()*dt;
   d49b6:	6030      	str	r0, [r6, #0]
phiRad=phi/360*(2*3.14);
   d49b8:	ee17 0a90 	vmov	r0, s15
   d49bc:	f007 ff2a 	bl	dc814 <__aeabi_f2d>
   d49c0:	a337      	add	r3, pc, #220	; (adr r3, d4aa0 <_Z19get_compass_headingv+0x388>)
   d49c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49c6:	f007 ff7d 	bl	dc8c4 <__aeabi_dmul>
   d49ca:	f008 fa73 	bl	dceb4 <__aeabi_d2f>
thetaRad=theta/360*(2*3.14);
   d49ce:	eec8 7a89 	vdiv.f32	s15, s17, s18
phiRad=phi/360*(2*3.14);
   d49d2:	4b41      	ldr	r3, [pc, #260]	; (d4ad8 <_Z19get_compass_headingv+0x3c0>)
   d49d4:	6018      	str	r0, [r3, #0]
   d49d6:	ee08 0a10 	vmov	s16, r0
thetaRad=theta/360*(2*3.14);
   d49da:	ee17 0a90 	vmov	r0, s15
   d49de:	f007 ff19 	bl	dc814 <__aeabi_f2d>
   d49e2:	a32f      	add	r3, pc, #188	; (adr r3, d4aa0 <_Z19get_compass_headingv+0x388>)
   d49e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49e8:	f007 ff6c 	bl	dc8c4 <__aeabi_dmul>
   d49ec:	f008 fa62 	bl	dceb4 <__aeabi_d2f>
   d49f0:	4b3a      	ldr	r3, [pc, #232]	; (d4adc <_Z19get_compass_headingv+0x3c4>)
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
   d49f2:	ee00 0a10 	vmov	s0, r0
   d49f6:	6018      	str	r0, [r3, #0]
   d49f8:	ee08 0a90 	vmov	s17, r0
   d49fc:	f005 f938 	bl	d9c70 <cosf>
   d4a00:	ee10 4a10 	vmov	r4, s0
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
   d4a04:	eeb0 0a48 	vmov.f32	s0, s16
   d4a08:	f005 f97a 	bl	d9d00 <sinf>
   d4a0c:	ee10 0a10 	vmov	r0, s0
 
 //tilt compensated x
Xm=mag.x()*cos(thetaRad)-mag.y()*sin(phiRad)*sin(thetaRad)+mag.z()*cos(phiRad)*sin(thetaRad);
   d4a10:	f007 ff00 	bl	dc814 <__aeabi_f2d>
   d4a14:	eeb0 0a68 	vmov.f32	s0, s17
   d4a18:	ec41 0b1a 	vmov	d10, r0, r1
   d4a1c:	f005 f970 	bl	d9d00 <sinf>
   d4a20:	ee10 0a10 	vmov	r0, s0
   d4a24:	f007 fef6 	bl	dc814 <__aeabi_f2d>
   d4a28:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
  { return __builtin_cosf(__x); }
   d4a2c:	eeb0 0a48 	vmov.f32	s0, s16
   d4a30:	eeb0 ba47 	vmov.f32	s22, s14
   d4a34:	eef0 ba67 	vmov.f32	s23, s15
   d4a38:	4606      	mov	r6, r0
   d4a3a:	460f      	mov	r7, r1
   d4a3c:	f005 f918 	bl	d9c70 <cosf>
   d4a40:	ee10 0a10 	vmov	r0, s0
   d4a44:	f007 fee6 	bl	dc814 <__aeabi_f2d>
   d4a48:	4680      	mov	r8, r0
   d4a4a:	4620      	mov	r0, r4
   d4a4c:	4689      	mov	r9, r1
   d4a4e:	f007 fee1 	bl	dc814 <__aeabi_f2d>
   d4a52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d4a56:	f007 ff35 	bl	dc8c4 <__aeabi_dmul>
   d4a5a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   d4a5e:	ec53 2b1a 	vmov	r2, r3, d10
   d4a62:	4604      	mov	r4, r0
   d4a64:	460d      	mov	r5, r1
   d4a66:	4650      	mov	r0, sl
   d4a68:	4659      	mov	r1, fp
   d4a6a:	f007 ff2b 	bl	dc8c4 <__aeabi_dmul>
   d4a6e:	4632      	mov	r2, r6
   d4a70:	463b      	mov	r3, r7
   d4a72:	f007 ff27 	bl	dc8c4 <__aeabi_dmul>
   d4a76:	4602      	mov	r2, r0
   d4a78:	460b      	mov	r3, r1
   d4a7a:	4620      	mov	r0, r4
   d4a7c:	e03a      	b.n	d4af4 <_Z19get_compass_headingv+0x3dc>
   d4a7e:	bf00      	nop
   d4a80:	9999999a 	.word	0x9999999a
   d4a84:	40239999 	.word	0x40239999
   d4a88:	54524550 	.word	0x54524550
   d4a8c:	400921fb 	.word	0x400921fb
   d4a90:	66666666 	.word	0x66666666
   d4a94:	3fee6666 	.word	0x3fee6666
   d4a98:	9999999a 	.word	0x9999999a
   d4a9c:	3fa99999 	.word	0x3fa99999
   d4aa0:	51eb851f 	.word	0x51eb851f
   d4aa4:	40191eb8 	.word	0x40191eb8
   d4aa8:	2003e49c 	.word	0x2003e49c
   d4aac:	43b40000 	.word	0x43b40000
   d4ab0:	3fe00000 	.word	0x3fe00000
   d4ab4:	40768000 	.word	0x40768000
   d4ab8:	2003e544 	.word	0x2003e544
   d4abc:	2003e540 	.word	0x2003e540
   d4ac0:	2003e560 	.word	0x2003e560
   d4ac4:	2003e55c 	.word	0x2003e55c
   d4ac8:	2003e538 	.word	0x2003e538
   d4acc:	2003e514 	.word	0x2003e514
   d4ad0:	408f4000 	.word	0x408f4000
   d4ad4:	2003e548 	.word	0x2003e548
   d4ad8:	2003e550 	.word	0x2003e550
   d4adc:	2003e56c 	.word	0x2003e56c
   d4ae0:	2003e568 	.word	0x2003e568
   d4ae4:	2003e54c 	.word	0x2003e54c
   d4ae8:	2003e558 	.word	0x2003e558
   d4aec:	2003e53c 	.word	0x2003e53c
   d4af0:	2003e564 	.word	0x2003e564
   d4af4:	4629      	mov	r1, r5
   d4af6:	f007 fd2d 	bl	dc554 <__aeabi_dsub>
   d4afa:	4642      	mov	r2, r8
   d4afc:	4604      	mov	r4, r0
   d4afe:	460d      	mov	r5, r1
   d4b00:	464b      	mov	r3, r9
   d4b02:	ec51 0b1b 	vmov	r0, r1, d11
   d4b06:	f007 fedd 	bl	dc8c4 <__aeabi_dmul>
   d4b0a:	4632      	mov	r2, r6
   d4b0c:	463b      	mov	r3, r7
   d4b0e:	f007 fed9 	bl	dc8c4 <__aeabi_dmul>
   d4b12:	4602      	mov	r2, r0
   d4b14:	460b      	mov	r3, r1
   d4b16:	4620      	mov	r0, r4
   d4b18:	4629      	mov	r1, r5
   d4b1a:	f007 fd1d 	bl	dc558 <__adddf3>
   d4b1e:	f008 f9c9 	bl	dceb4 <__aeabi_d2f>
   d4b22:	4b2b      	ldr	r3, [pc, #172]	; (d4bd0 <_Z19get_compass_headingv+0x4b8>)
   d4b24:	ee08 0a10 	vmov	s16, r0
   d4b28:	6018      	str	r0, [r3, #0]
//tilt compensated y
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
   d4b2a:	4642      	mov	r2, r8
   d4b2c:	464b      	mov	r3, r9
   d4b2e:	4650      	mov	r0, sl
   d4b30:	4659      	mov	r1, fp
   d4b32:	f007 fec7 	bl	dc8c4 <__aeabi_dmul>
   d4b36:	ec53 2b1b 	vmov	r2, r3, d11
   d4b3a:	4604      	mov	r4, r0
   d4b3c:	460d      	mov	r5, r1
   d4b3e:	ec51 0b1a 	vmov	r0, r1, d10
   d4b42:	f007 febf 	bl	dc8c4 <__aeabi_dmul>
   d4b46:	4602      	mov	r2, r0
   d4b48:	460b      	mov	r3, r1
   d4b4a:	4620      	mov	r0, r4
   d4b4c:	4629      	mov	r1, r5
   d4b4e:	f007 fd03 	bl	dc558 <__adddf3>
   d4b52:	f008 f9af 	bl	dceb4 <__aeabi_d2f>
   d4b56:	4b1f      	ldr	r3, [pc, #124]	; (d4bd4 <_Z19get_compass_headingv+0x4bc>)
// Serial.print(phi);
// Serial.print(",");
// Serial.println(psi);
 
phiFold=phiFnew;
thetaFold=thetaFnew;
   d4b58:	4c1f      	ldr	r4, [pc, #124]	; (d4bd8 <_Z19get_compass_headingv+0x4c0>)
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
   d4b5a:	6018      	str	r0, [r3, #0]
  { return __builtin_atan2f(__y, __x); }
   d4b5c:	eef0 0a48 	vmov.f32	s1, s16
   d4b60:	ee00 0a10 	vmov	s0, r0
   d4b64:	f005 face 	bl	da104 <atan2f>
phiFold=phiFnew;
   d4b68:	491c      	ldr	r1, [pc, #112]	; (d4bdc <_Z19get_compass_headingv+0x4c4>)
   d4b6a:	4a1d      	ldr	r2, [pc, #116]	; (d4be0 <_Z19get_compass_headingv+0x4c8>)
   d4b6c:	680b      	ldr	r3, [r1, #0]
   d4b6e:	6013      	str	r3, [r2, #0]
thetaFold=thetaFnew;
   d4b70:	4a1c      	ldr	r2, [pc, #112]	; (d4be4 <_Z19get_compass_headingv+0x4cc>)
   d4b72:	6823      	ldr	r3, [r4, #0]
   d4b74:	6013      	str	r3, [r2, #0]
   d4b76:	ee10 0a10 	vmov	r0, s0
psi=atan2(Ym,Xm)/(2*3.14)*360;
   d4b7a:	f007 fe4b 	bl	dc814 <__aeabi_f2d>
   d4b7e:	a312      	add	r3, pc, #72	; (adr r3, d4bc8 <_Z19get_compass_headingv+0x4b0>)
   d4b80:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b84:	f007 ffc8 	bl	dcb18 <__aeabi_ddiv>
   d4b88:	4b17      	ldr	r3, [pc, #92]	; (d4be8 <_Z19get_compass_headingv+0x4d0>)
   d4b8a:	2200      	movs	r2, #0
   d4b8c:	f007 fe9a 	bl	dc8c4 <__aeabi_dmul>
   d4b90:	f008 f990 	bl	dceb4 <__aeabi_d2f>
 psi += 180;
   d4b94:	eddf 7a15 	vldr	s15, [pc, #84]	; d4bec <_Z19get_compass_headingv+0x4d4>
   d4b98:	4b15      	ldr	r3, [pc, #84]	; (d4bf0 <_Z19get_compass_headingv+0x4d8>)
   d4b9a:	ee07 0a10 	vmov	s14, r0
   d4b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 if(psi >= 360) {
   d4ba2:	eef4 7ac9 	vcmpe.f32	s15, s18
   d4ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   psi = psi -360;
   d4baa:	bfa8      	it	ge
   d4bac:	ee77 7ac9 	vsubge.f32	s15, s15, s18
   d4bb0:	edc3 7a00 	vstr	s15, [r3]
 }
 return(psi);
//delay(BNO055_SAMPLERATE_DELAY_MS);
}
   d4bb4:	ed93 0a00 	vldr	s0, [r3]
   d4bb8:	b017      	add	sp, #92	; 0x5c
   d4bba:	ecbd 8b08 	vpop	{d8-d11}
   d4bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4bc2:	bf00      	nop
   d4bc4:	f3af 8000 	nop.w
   d4bc8:	51eb851f 	.word	0x51eb851f
   d4bcc:	40191eb8 	.word	0x40191eb8
   d4bd0:	2003e44c 	.word	0x2003e44c
   d4bd4:	2003e450 	.word	0x2003e450
   d4bd8:	2003e55c 	.word	0x2003e55c
   d4bdc:	2003e540 	.word	0x2003e540
   d4be0:	2003e544 	.word	0x2003e544
   d4be4:	2003e560 	.word	0x2003e560
   d4be8:	40768000 	.word	0x40768000
   d4bec:	43340000 	.word	0x43340000
   d4bf0:	2003e554 	.word	0x2003e554

000d4bf4 <_Z11eeprom_testv>:

void eeprom_test(){
   d4bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t max_addr;
  //variables for calibration read from memory
int test = 55;
      // Try to determine the size by writing a value and seeing if it changes the first byte
  Serial.println("Testing size!");
   d4bf8:	f004 fcf2 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4bfc:	492e      	ldr	r1, [pc, #184]	; (d4cb8 <_Z11eeprom_testv+0xc4>)
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
    if (i2ceeprom.read(max_addr) != test)
   d4bfe:	4d2f      	ldr	r5, [pc, #188]	; (d4cbc <_Z11eeprom_testv+0xc8>)
    // read address 0x0 again
    uint8_t val0 = i2ceeprom.read(0);

    // re-write the old value
    if (! i2ceeprom.write(max_addr, test)) {
        Serial.print("Failed to re-write address 0x");
   d4c00:	f8df 80c8 	ldr.w	r8, [pc, #200]	; d4ccc <_Z11eeprom_testv+0xd8>
        Serial.print("Failed to write address 0x");
   d4c04:	f8df 90c8 	ldr.w	r9, [pc, #200]	; d4cd0 <_Z11eeprom_testv+0xdc>
  Serial.println("Testing size!");
   d4c08:	f003 fef9 	bl	d89fe <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
   d4c0c:	2401      	movs	r4, #1
    if (i2ceeprom.read(max_addr) != test)
   d4c0e:	b2a7      	uxth	r7, r4
   d4c10:	482a      	ldr	r0, [pc, #168]	; (d4cbc <_Z11eeprom_testv+0xc8>)
   d4c12:	4639      	mov	r1, r7
   d4c14:	f003 f842 	bl	d7c9c <_ZN19Adafruit_EEPROM_I2C4readEt>
   d4c18:	2837      	cmp	r0, #55	; 0x37
   d4c1a:	d147      	bne.n	d4cac <_Z11eeprom_testv+0xb8>
    if (! i2ceeprom.write(max_addr, (byte)~test)) {
   d4c1c:	22c8      	movs	r2, #200	; 0xc8
   d4c1e:	4639      	mov	r1, r7
   d4c20:	4628      	mov	r0, r5
   d4c22:	f003 f819 	bl	d7c58 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   d4c26:	b970      	cbnz	r0, d4c46 <_Z11eeprom_testv+0x52>
        Serial.print("Failed to write address 0x");
   d4c28:	f004 fcda 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4c2c:	4649      	mov	r1, r9
   d4c2e:	f003 fed3 	bl	d89d8 <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   d4c32:	f004 fcd5 	bl	d95e0 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4c36:	2210      	movs	r2, #16
   d4c38:	4606      	mov	r6, r0
   d4c3a:	4621      	mov	r1, r4
   d4c3c:	f003 feeb 	bl	d8a16 <_ZN5Print11printNumberEmh>
        n += println();
   d4c40:	4630      	mov	r0, r6
   d4c42:	f003 fed0 	bl	d89e6 <_ZN5Print7printlnEv>
    uint8_t val0 = i2ceeprom.read(0);
   d4c46:	2100      	movs	r1, #0
   d4c48:	4628      	mov	r0, r5
   d4c4a:	f003 f827 	bl	d7c9c <_ZN19Adafruit_EEPROM_I2C4readEt>
    if (! i2ceeprom.write(max_addr, test)) {
   d4c4e:	2237      	movs	r2, #55	; 0x37
    uint8_t val0 = i2ceeprom.read(0);
   d4c50:	4606      	mov	r6, r0
    if (! i2ceeprom.write(max_addr, test)) {
   d4c52:	4639      	mov	r1, r7
   d4c54:	4628      	mov	r0, r5
   d4c56:	f002 ffff 	bl	d7c58 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   d4c5a:	b970      	cbnz	r0, d4c7a <_Z11eeprom_testv+0x86>
        Serial.print("Failed to re-write address 0x");
   d4c5c:	f004 fcc0 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4c60:	4641      	mov	r1, r8
   d4c62:	f003 feb9 	bl	d89d8 <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   d4c66:	f004 fcbb 	bl	d95e0 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4c6a:	2210      	movs	r2, #16
   d4c6c:	4607      	mov	r7, r0
   d4c6e:	4621      	mov	r1, r4
   d4c70:	f003 fed1 	bl	d8a16 <_ZN5Print11printNumberEmh>
        n += println();
   d4c74:	4638      	mov	r0, r7
   d4c76:	f003 feb6 	bl	d89e6 <_ZN5Print7printlnEv>
    }    

    // check if addr 0 was changed
    if (val0 == (byte)~test) {
   d4c7a:	2ec8      	cmp	r6, #200	; 0xc8
   d4c7c:	d116      	bne.n	d4cac <_Z11eeprom_testv+0xb8>
      Serial.println("Found max address");
   d4c7e:	f004 fcaf 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4c82:	490f      	ldr	r1, [pc, #60]	; (d4cc0 <_Z11eeprom_testv+0xcc>)
   d4c84:	f003 febb 	bl	d89fe <_ZN5Print7printlnEPKc>
      break;
    }
  }
  Serial.print("This EEPROM can store ");
   d4c88:	f004 fcaa 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4c8c:	490d      	ldr	r1, [pc, #52]	; (d4cc4 <_Z11eeprom_testv+0xd0>)
   d4c8e:	f003 fea3 	bl	d89d8 <_ZN5Print5printEPKc>
  Serial.print(max_addr);
   d4c92:	f004 fca5 	bl	d95e0 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4c96:	4621      	mov	r1, r4
   d4c98:	220a      	movs	r2, #10
   d4c9a:	f003 febc 	bl	d8a16 <_ZN5Print11printNumberEmh>
  Serial.println(" bytes");
   d4c9e:	f004 fc9f 	bl	d95e0 <_Z16_fetch_usbserialv>
}
   d4ca2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.println(" bytes");
   d4ca6:	4908      	ldr	r1, [pc, #32]	; (d4cc8 <_Z11eeprom_testv+0xd4>)
   d4ca8:	f003 bea9 	b.w	d89fe <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
   d4cac:	3401      	adds	r4, #1
   d4cae:	f647 73ff 	movw	r3, #32767	; 0x7fff
   d4cb2:	429c      	cmp	r4, r3
   d4cb4:	d1ab      	bne.n	d4c0e <_Z11eeprom_testv+0x1a>
   d4cb6:	e7e7      	b.n	d4c88 <_Z11eeprom_testv+0x94>
   d4cb8:	000dd892 	.word	0x000dd892
   d4cbc:	2003e51c 	.word	0x2003e51c
   d4cc0:	000dd8d9 	.word	0x000dd8d9
   d4cc4:	000dd8eb 	.word	0x000dd8eb
   d4cc8:	000dd902 	.word	0x000dd902
   d4ccc:	000dd8bb 	.word	0x000dd8bb
   d4cd0:	000dd8a0 	.word	0x000dd8a0
   d4cd4:	00000000 	.word	0x00000000

000d4cd8 <_Z22measure_wind_directionRf>:

float measure_wind_direction(float& WindSpeed){
   d4cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
int Direction;// translated 0 - 360 direction
int CalDirection;// converted value with offset applied
int LastValue = 0;
uint16_t wind_speed_time_interval= 5000; //value in ms
uint32_t wind_speed_time = 0;
VaneValue = analogRead(vane_pin);
   d4cda:	4b49      	ldr	r3, [pc, #292]	; (d4e00 <_Z22measure_wind_directionRf+0x128>)
float measure_wind_direction(float& WindSpeed){
   d4cdc:	4606      	mov	r6, r0
VaneValue = analogRead(vane_pin);
   d4cde:	7818      	ldrb	r0, [r3, #0]
   d4ce0:	f004 ff53 	bl	d9b8a <analogRead>
//digitalWrite(vane_switch, LOW);
//Serial.println("analog read value = ");
//Serial.print(VaneValue);
Direction = map(VaneValue, 0, 4095, 0, 360);
   d4ce4:	f44f 73b4 	mov.w	r3, #360	; 0x168
   d4ce8:	9300      	str	r3, [sp, #0]
   d4cea:	2300      	movs	r3, #0
   d4cec:	f640 72ff 	movw	r2, #4095	; 0xfff
   d4cf0:	4619      	mov	r1, r3
VaneValue = analogRead(vane_pin);
   d4cf2:	4605      	mov	r5, r0
Direction = map(VaneValue, 0, 4095, 0, 360);
   d4cf4:	f004 f836 	bl	d8d64 <_Z3mapiiiii>
CalDirection = Direction + Offset;

if(CalDirection > 360)
   d4cf8:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
Direction = map(VaneValue, 0, 4095, 0, 360);
   d4cfc:	4604      	mov	r4, r0
if(CalDirection > 360)
   d4cfe:	dd70      	ble.n	d4de2 <_Z22measure_wind_directionRf+0x10a>
CalDirection = CalDirection - 360;
   d4d00:	f5a0 74b4 	sub.w	r4, r0, #360	; 0x168
   d4d04:	f003 f96c 	bl	d7fe0 <HAL_Timer_Get_Milli_Seconds>
if(CalDirection < 0)
CalDirection = CalDirection + 360;


//delay(100);
if ((millis() - wind_speed_time) > wind_speed_time_interval) {
   d4d08:	f241 3388 	movw	r3, #5000	; 0x1388
   d4d0c:	4298      	cmp	r0, r3
   d4d0e:	d930      	bls.n	d4d72 <_Z22measure_wind_directionRf+0x9a>
// Only update the display if change greater than 2 degrees.
  wind_speed_time = millis();
  
  WindSpeed = Rotations * .45;
   d4d10:	4f3c      	ldr	r7, [pc, #240]	; (d4e04 <_Z22measure_wind_directionRf+0x12c>)
   d4d12:	f003 f965 	bl	d7fe0 <HAL_Timer_Get_Milli_Seconds>
   d4d16:	6838      	ldr	r0, [r7, #0]
   d4d18:	f007 fd5a 	bl	dc7d0 <__aeabi_ui2d>
   d4d1c:	a336      	add	r3, pc, #216	; (adr r3, d4df8 <_Z22measure_wind_directionRf+0x120>)
   d4d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d22:	f007 fdcf 	bl	dc8c4 <__aeabi_dmul>
   d4d26:	f008 f8c5 	bl	dceb4 <__aeabi_d2f>
   d4d2a:	6030      	str	r0, [r6, #0]
Serial.print("wind speed -----------------\n");
   d4d2c:	f004 fc58 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4d30:	4935      	ldr	r1, [pc, #212]	; (d4e08 <_Z22measure_wind_directionRf+0x130>)
   d4d32:	f003 fe51 	bl	d89d8 <_ZN5Print5printEPKc>
Serial.print(Rotations); Serial.print("\t\t");
   d4d36:	f004 fc53 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4d3a:	220a      	movs	r2, #10
   d4d3c:	6839      	ldr	r1, [r7, #0]
   d4d3e:	f003 fe6a 	bl	d8a16 <_ZN5Print11printNumberEmh>
   d4d42:	f004 fc4d 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4d46:	4931      	ldr	r1, [pc, #196]	; (d4e0c <_Z22measure_wind_directionRf+0x134>)
   d4d48:	f003 fe46 	bl	d89d8 <_ZN5Print5printEPKc>
Serial.print(WindSpeed); Serial.print("\t\t");  Serial.println(" mph");
   d4d4c:	f004 fc48 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4d50:	ed96 0a00 	vldr	s0, [r6]
   d4d54:	2102      	movs	r1, #2
   d4d56:	f003 ff75 	bl	d8c44 <_ZN5Print5printEfi>
   d4d5a:	f004 fc41 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4d5e:	492b      	ldr	r1, [pc, #172]	; (d4e0c <_Z22measure_wind_directionRf+0x134>)
   d4d60:	f003 fe3a 	bl	d89d8 <_ZN5Print5printEPKc>
   d4d64:	f004 fc3c 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4d68:	4929      	ldr	r1, [pc, #164]	; (d4e10 <_Z22measure_wind_directionRf+0x138>)
   d4d6a:	f003 fe48 	bl	d89fe <_ZN5Print7printlnEPKc>
// wind_speed_time = millis();
Rotations = 0;  // Set Rotations count to 0 ready for calculations
   d4d6e:	2300      	movs	r3, #0
   d4d70:	603b      	str	r3, [r7, #0]
// convert to mph using the formula V=P(2.25/T)
// V = P(2.25/3) = P * 0.75
}
  if(abs(CalDirection - LastValue) > 5)
   d4d72:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
   d4d76:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
   d4d7a:	2b05      	cmp	r3, #5
   d4d7c:	dd2b      	ble.n	d4dd6 <_Z22measure_wind_directionRf+0xfe>
  {
    Serial.print("Vanevalue -----------------\n");
   d4d7e:	f004 fc2f 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4d82:	4924      	ldr	r1, [pc, #144]	; (d4e14 <_Z22measure_wind_directionRf+0x13c>)
   d4d84:	f003 fe28 	bl	d89d8 <_ZN5Print5printEPKc>
  Serial.print(VaneValue); Serial.print("\t\t");
   d4d88:	f004 fc2a 	bl	d95e0 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   d4d8c:	2d00      	cmp	r5, #0
   d4d8e:	4606      	mov	r6, r0
   d4d90:	da2c      	bge.n	d4dec <_Z22measure_wind_directionRf+0x114>
            t = print('-');
   d4d92:	212d      	movs	r1, #45	; 0x2d
   d4d94:	f003 fe24 	bl	d89e0 <_ZN5Print5printEc>
            val = -n;
   d4d98:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d4d9a:	220a      	movs	r2, #10
   d4d9c:	4630      	mov	r0, r6
   d4d9e:	f003 fe3a 	bl	d8a16 <_ZN5Print11printNumberEmh>
   d4da2:	f004 fc1d 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4da6:	4919      	ldr	r1, [pc, #100]	; (d4e0c <_Z22measure_wind_directionRf+0x134>)
   d4da8:	f003 fe16 	bl	d89d8 <_ZN5Print5printEPKc>
  Serial.print(CalDirection); Serial.print("\t\t");
   d4dac:	f004 fc18 	bl	d95e0 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   d4db0:	2c00      	cmp	r4, #0
   d4db2:	4605      	mov	r5, r0
   d4db4:	da1c      	bge.n	d4df0 <_Z22measure_wind_directionRf+0x118>
            t = print('-');
   d4db6:	212d      	movs	r1, #45	; 0x2d
   d4db8:	f003 fe12 	bl	d89e0 <_ZN5Print5printEc>
            val = -n;
   d4dbc:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d4dbe:	220a      	movs	r2, #10
   d4dc0:	4628      	mov	r0, r5
   d4dc2:	f003 fe28 	bl	d8a16 <_ZN5Print11printNumberEmh>
   d4dc6:	f004 fc0b 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4dca:	4910      	ldr	r1, [pc, #64]	; (d4e0c <_Z22measure_wind_directionRf+0x134>)
   d4dcc:	f003 fe04 	bl	d89d8 <_ZN5Print5printEPKc>
  getHeading(CalDirection);
   d4dd0:	4620      	mov	r0, r4
   d4dd2:	f7ff fc5b 	bl	d468c <_Z10getHeadingi>
  LastValue = CalDirection;
  }

return CalDirection;
}
   d4dd6:	ee07 4a90 	vmov	s15, r4
   d4dda:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d4dde:	b003      	add	sp, #12
   d4de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
if(CalDirection < 0)
   d4de2:	2800      	cmp	r0, #0
CalDirection = CalDirection + 360;
   d4de4:	bfb8      	it	lt
   d4de6:	f500 74b4 	addlt.w	r4, r0, #360	; 0x168
   d4dea:	e78b      	b.n	d4d04 <_Z22measure_wind_directionRf+0x2c>
            val = n;
   d4dec:	4629      	mov	r1, r5
   d4dee:	e7d4      	b.n	d4d9a <_Z22measure_wind_directionRf+0xc2>
   d4df0:	4621      	mov	r1, r4
   d4df2:	e7e4      	b.n	d4dbe <_Z22measure_wind_directionRf+0xe6>
   d4df4:	f3af 8000 	nop.w
   d4df8:	cccccccd 	.word	0xcccccccd
   d4dfc:	3fdccccc 	.word	0x3fdccccc
   d4e00:	2003e3cc 	.word	0x2003e3cc
   d4e04:	2003e444 	.word	0x2003e444
   d4e08:	000dd909 	.word	0x000dd909
   d4e0c:	000dd927 	.word	0x000dd927
   d4e10:	000dd92a 	.word	0x000dd92a
   d4e14:	000dd92f 	.word	0x000dd92f

000d4e18 <_Z21current_power_voltagev>:
  Serial.print(F(", "));
  Serial.print((float)event.orientation.z);
  Serial.println(F(""));
}

void current_power_voltage(){
   d4e18:	b510      	push	{r4, lr}
  float busvoltage = 0;
  float current_mA = 0;
  float loadvoltage = 0;
  float power_mW = 0;

  shuntvoltage = ina219.getShuntVoltage_mV();
   d4e1a:	483d      	ldr	r0, [pc, #244]	; (d4f10 <_Z21current_power_voltagev+0xf8>)
  busvoltage = ina219.getBusVoltage_V();
  current_mA = ina219.getCurrent_mA();
  power_mW = ina219.getPower_mW();
  loadvoltage = busvoltage + (shuntvoltage / 1000);
  
  Serial.print("Bus Voltage:   "); Serial.print(busvoltage); Serial.println(" V");
   d4e1c:	4c3d      	ldr	r4, [pc, #244]	; (d4f14 <_Z21current_power_voltagev+0xfc>)
void current_power_voltage(){
   d4e1e:	ed2d 8b06 	vpush	{d8-d10}
  shuntvoltage = ina219.getShuntVoltage_mV();
   d4e22:	f002 ffc9 	bl	d7db8 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv>
  busvoltage = ina219.getBusVoltage_V();
   d4e26:	483a      	ldr	r0, [pc, #232]	; (d4f10 <_Z21current_power_voltagev+0xf8>)
  shuntvoltage = ina219.getShuntVoltage_mV();
   d4e28:	eeb0 8a40 	vmov.f32	s16, s0
  busvoltage = ina219.getBusVoltage_V();
   d4e2c:	f002 ffd8 	bl	d7de0 <_ZN15Adafruit_INA21915getBusVoltage_VEv>
  current_mA = ina219.getCurrent_mA();
   d4e30:	4837      	ldr	r0, [pc, #220]	; (d4f10 <_Z21current_power_voltagev+0xf8>)
  busvoltage = ina219.getBusVoltage_V();
   d4e32:	eef0 8a40 	vmov.f32	s17, s0
  current_mA = ina219.getCurrent_mA();
   d4e36:	f002 ffe7 	bl	d7e08 <_ZN15Adafruit_INA21913getCurrent_mAEv>
  power_mW = ina219.getPower_mW();
   d4e3a:	4835      	ldr	r0, [pc, #212]	; (d4f10 <_Z21current_power_voltagev+0xf8>)
  current_mA = ina219.getCurrent_mA();
   d4e3c:	eef0 9a40 	vmov.f32	s19, s0
  power_mW = ina219.getPower_mW();
   d4e40:	f002 fff1 	bl	d7e26 <_ZN15Adafruit_INA21911getPower_mWEv>
  loadvoltage = busvoltage + (shuntvoltage / 1000);
   d4e44:	eddf 7a34 	vldr	s15, [pc, #208]	; d4f18 <_Z21current_power_voltagev+0x100>
   d4e48:	ee88 aa27 	vdiv.f32	s20, s16, s15
  power_mW = ina219.getPower_mW();
   d4e4c:	eeb0 9a40 	vmov.f32	s18, s0
  Serial.print("Bus Voltage:   "); Serial.print(busvoltage); Serial.println(" V");
   d4e50:	f004 fbc6 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4e54:	4931      	ldr	r1, [pc, #196]	; (d4f1c <_Z21current_power_voltagev+0x104>)
   d4e56:	f003 fdbf 	bl	d89d8 <_ZN5Print5printEPKc>
   d4e5a:	f004 fbc1 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4e5e:	eeb0 0a68 	vmov.f32	s0, s17
   d4e62:	2102      	movs	r1, #2
   d4e64:	f003 feee 	bl	d8c44 <_ZN5Print5printEfi>
   d4e68:	f004 fbba 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4e6c:	4621      	mov	r1, r4
   d4e6e:	f003 fdc6 	bl	d89fe <_ZN5Print7printlnEPKc>
  Serial.print("Shunt Voltage: "); Serial.print(shuntvoltage); Serial.println(" mV");
   d4e72:	f004 fbb5 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4e76:	492a      	ldr	r1, [pc, #168]	; (d4f20 <_Z21current_power_voltagev+0x108>)
   d4e78:	f003 fdae 	bl	d89d8 <_ZN5Print5printEPKc>
   d4e7c:	f004 fbb0 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4e80:	eeb0 0a48 	vmov.f32	s0, s16
   d4e84:	2102      	movs	r1, #2
   d4e86:	f003 fedd 	bl	d8c44 <_ZN5Print5printEfi>
  loadvoltage = busvoltage + (shuntvoltage / 1000);
   d4e8a:	ee3a aa28 	vadd.f32	s20, s20, s17
  Serial.print("Shunt Voltage: "); Serial.print(shuntvoltage); Serial.println(" mV");
   d4e8e:	f004 fba7 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4e92:	4924      	ldr	r1, [pc, #144]	; (d4f24 <_Z21current_power_voltagev+0x10c>)
   d4e94:	f003 fdb3 	bl	d89fe <_ZN5Print7printlnEPKc>
  Serial.print("Load Voltage:  "); Serial.print(loadvoltage); Serial.println(" V");
   d4e98:	f004 fba2 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4e9c:	4922      	ldr	r1, [pc, #136]	; (d4f28 <_Z21current_power_voltagev+0x110>)
   d4e9e:	f003 fd9b 	bl	d89d8 <_ZN5Print5printEPKc>
   d4ea2:	f004 fb9d 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4ea6:	eeb0 0a4a 	vmov.f32	s0, s20
   d4eaa:	2102      	movs	r1, #2
   d4eac:	f003 feca 	bl	d8c44 <_ZN5Print5printEfi>
   d4eb0:	f004 fb96 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4eb4:	4621      	mov	r1, r4
   d4eb6:	f003 fda2 	bl	d89fe <_ZN5Print7printlnEPKc>
  Serial.print("Current:       "); Serial.print(current_mA); Serial.println(" mA");
   d4eba:	f004 fb91 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4ebe:	491b      	ldr	r1, [pc, #108]	; (d4f2c <_Z21current_power_voltagev+0x114>)
   d4ec0:	f003 fd8a 	bl	d89d8 <_ZN5Print5printEPKc>
   d4ec4:	f004 fb8c 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4ec8:	eeb0 0a69 	vmov.f32	s0, s19
   d4ecc:	2102      	movs	r1, #2
   d4ece:	f003 feb9 	bl	d8c44 <_ZN5Print5printEfi>
   d4ed2:	f004 fb85 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4ed6:	4916      	ldr	r1, [pc, #88]	; (d4f30 <_Z21current_power_voltagev+0x118>)
   d4ed8:	f003 fd91 	bl	d89fe <_ZN5Print7printlnEPKc>
  Serial.print("Power:         "); Serial.print(power_mW); Serial.println(" mW");
   d4edc:	f004 fb80 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4ee0:	4914      	ldr	r1, [pc, #80]	; (d4f34 <_Z21current_power_voltagev+0x11c>)
   d4ee2:	f003 fd79 	bl	d89d8 <_ZN5Print5printEPKc>
   d4ee6:	f004 fb7b 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4eea:	eeb0 0a49 	vmov.f32	s0, s18
   d4eee:	2102      	movs	r1, #2
   d4ef0:	f003 fea8 	bl	d8c44 <_ZN5Print5printEfi>
   d4ef4:	f004 fb74 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4ef8:	490f      	ldr	r1, [pc, #60]	; (d4f38 <_Z21current_power_voltagev+0x120>)
   d4efa:	f003 fd80 	bl	d89fe <_ZN5Print7printlnEPKc>
  Serial.println("");
   d4efe:	f004 fb6f 	bl	d95e0 <_Z16_fetch_usbserialv>
}
   d4f02:	ecbd 8b06 	vpop	{d8-d10}
  Serial.println("");
   d4f06:	490d      	ldr	r1, [pc, #52]	; (d4f3c <_Z21current_power_voltagev+0x124>)
}
   d4f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println("");
   d4f0c:	f003 bd77 	b.w	d89fe <_ZN5Print7printlnEPKc>
   d4f10:	2003e524 	.word	0x2003e524
   d4f14:	000dd95c 	.word	0x000dd95c
   d4f18:	447a0000 	.word	0x447a0000
   d4f1c:	000dd94c 	.word	0x000dd94c
   d4f20:	000dd95f 	.word	0x000dd95f
   d4f24:	000dd96f 	.word	0x000dd96f
   d4f28:	000dd973 	.word	0x000dd973
   d4f2c:	000dd983 	.word	0x000dd983
   d4f30:	000dd993 	.word	0x000dd993
   d4f34:	000dd997 	.word	0x000dd997
   d4f38:	000dd9a7 	.word	0x000dd9a7
   d4f3c:	000dd929 	.word	0x000dd929

000d4f40 <_Z25get_event_compass_headingv>:

float get_event_compass_heading(){
   d4f40:	b510      	push	{r4, lr}
   d4f42:	b08a      	sub	sp, #40	; 0x28
sensors_event_t event;
  bno.getEvent(&event);
   d4f44:	a901      	add	r1, sp, #4
   d4f46:	4829      	ldr	r0, [pc, #164]	; (d4fec <_Z25get_event_compass_headingv+0xac>)
   d4f48:	4c29      	ldr	r4, [pc, #164]	; (d4ff0 <_Z25get_event_compass_headingv+0xb0>)
   d4f4a:	f001 ff41 	bl	d6dd0 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  
  /* Display the floating point data */
  Serial.print("X: ");
   d4f4e:	f004 fb47 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4f52:	4928      	ldr	r1, [pc, #160]	; (d4ff4 <_Z25get_event_compass_headingv+0xb4>)
   d4f54:	f003 fd40 	bl	d89d8 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.x, 4);
   d4f58:	f004 fb42 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4f5c:	ed9d 0a06 	vldr	s0, [sp, #24]
   d4f60:	2104      	movs	r1, #4
   d4f62:	f003 fe6f 	bl	d8c44 <_ZN5Print5printEfi>
  Serial.print("\tY: ");
   d4f66:	f004 fb3b 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4f6a:	4923      	ldr	r1, [pc, #140]	; (d4ff8 <_Z25get_event_compass_headingv+0xb8>)
   d4f6c:	f003 fd34 	bl	d89d8 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.y, 4);
   d4f70:	f004 fb36 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4f74:	ed9d 0a07 	vldr	s0, [sp, #28]
   d4f78:	2104      	movs	r1, #4
   d4f7a:	f003 fe63 	bl	d8c44 <_ZN5Print5printEfi>
  Serial.print("\tZ: ");
   d4f7e:	f004 fb2f 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4f82:	491e      	ldr	r1, [pc, #120]	; (d4ffc <_Z25get_event_compass_headingv+0xbc>)
   d4f84:	f003 fd28 	bl	d89d8 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.z, 4);
   d4f88:	f004 fb2a 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4f8c:	ed9d 0a08 	vldr	s0, [sp, #32]
   d4f90:	2104      	movs	r1, #4
   d4f92:	f003 fe57 	bl	d8c44 <_ZN5Print5printEfi>
  Serial.println("");
   d4f96:	f004 fb23 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4f9a:	4919      	ldr	r1, [pc, #100]	; (d5000 <_Z25get_event_compass_headingv+0xc0>)
   d4f9c:	f003 fd2f 	bl	d89fe <_ZN5Print7printlnEPKc>

  Serial.println("\n\n");
   d4fa0:	f004 fb1e 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4fa4:	4917      	ldr	r1, [pc, #92]	; (d5004 <_Z25get_event_compass_headingv+0xc4>)
   d4fa6:	f003 fd2a 	bl	d89fe <_ZN5Print7printlnEPKc>

  compass_heading = event.orientation.x + 104;
   d4faa:	eddd 7a06 	vldr	s15, [sp, #24]
   d4fae:	ed9f 7a16 	vldr	s14, [pc, #88]	; d5008 <_Z25get_event_compass_headingv+0xc8>
   d4fb2:	ee77 7a87 	vadd.f32	s15, s15, s14

  if(compass_heading > 360) {
   d4fb6:	ed9f 7a15 	vldr	s14, [pc, #84]	; d500c <_Z25get_event_compass_headingv+0xcc>
   d4fba:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    compass_heading = compass_heading - 360;
   d4fc2:	bfc8      	it	gt
   d4fc4:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
   d4fc8:	edc4 7a00 	vstr	s15, [r4]
  }
  
  Serial.print("compass heading:  ");
   d4fcc:	f004 fb08 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4fd0:	490f      	ldr	r1, [pc, #60]	; (d5010 <_Z25get_event_compass_headingv+0xd0>)
   d4fd2:	f003 fd01 	bl	d89d8 <_ZN5Print5printEPKc>
  Serial.print(compass_heading, 4);
   d4fd6:	f004 fb03 	bl	d95e0 <_Z16_fetch_usbserialv>
   d4fda:	ed94 0a00 	vldr	s0, [r4]
   d4fde:	2104      	movs	r1, #4
   d4fe0:	f003 fe30 	bl	d8c44 <_ZN5Print5printEfi>
  return compass_heading;
}
   d4fe4:	ed94 0a00 	vldr	s0, [r4]
   d4fe8:	b00a      	add	sp, #40	; 0x28
   d4fea:	bd10      	pop	{r4, pc}
   d4fec:	2003e49c 	.word	0x2003e49c
   d4ff0:	2003e4b4 	.word	0x2003e4b4
   d4ff4:	000dd9ab 	.word	0x000dd9ab
   d4ff8:	000dd9af 	.word	0x000dd9af
   d4ffc:	000dd9b4 	.word	0x000dd9b4
   d5000:	000dd929 	.word	0x000dd929
   d5004:	000dd9b9 	.word	0x000dd9b9
   d5008:	42d00000 	.word	0x42d00000
   d500c:	43b40000 	.word	0x43b40000
   d5010:	000dd9bc 	.word	0x000dd9bc

000d5014 <_GLOBAL__sub_I_i2ceeprom>:
   d5014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5016:	4b13      	ldr	r3, [pc, #76]	; (d5064 <_GLOBAL__sub_I_i2ceeprom+0x50>)
Adafruit_EEPROM_I2C i2ceeprom;
   d5018:	4813      	ldr	r0, [pc, #76]	; (d5068 <_GLOBAL__sub_I_i2ceeprom+0x54>)
   d501a:	2200      	movs	r2, #0
   d501c:	701a      	strb	r2, [r3, #0]
   d501e:	f002 fe01 	bl	d7c24 <_ZN19Adafruit_EEPROM_I2CC1Ev>
Adafruit_INA219 ina219;
   d5022:	2140      	movs	r1, #64	; 0x40
   d5024:	4811      	ldr	r0, [pc, #68]	; (d506c <_GLOBAL__sub_I_i2ceeprom+0x58>)
   d5026:	f002 fe4d 	bl	d7cc4 <_ZN15Adafruit_INA219C1Eh>
Adafruit_BME280 bme; // I2C
   d502a:	4811      	ldr	r0, [pc, #68]	; (d5070 <_GLOBAL__sub_I_i2ceeprom+0x5c>)
   d502c:	f000 fc68 	bl	d5900 <_ZN15Adafruit_BME280C1Ev>
Adafruit_SH1107 display = Adafruit_SH1107(64, 128, &Wire);
   d5030:	f004 fdf2 	bl	d9c18 <_Z19__fetch_global_Wirev>
   d5034:	4a0f      	ldr	r2, [pc, #60]	; (d5074 <_GLOBAL__sub_I_i2ceeprom+0x60>)
   d5036:	4910      	ldr	r1, [pc, #64]	; (d5078 <_GLOBAL__sub_I_i2ceeprom+0x64>)
   d5038:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d503c:	f04f 32ff 	mov.w	r2, #4294967295
   d5040:	4603      	mov	r3, r0
   d5042:	9200      	str	r2, [sp, #0]
   d5044:	2140      	movs	r1, #64	; 0x40
   d5046:	2280      	movs	r2, #128	; 0x80
   d5048:	480c      	ldr	r0, [pc, #48]	; (d507c <_GLOBAL__sub_I_i2ceeprom+0x68>)
   d504a:	f002 fd65 	bl	d7b18 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d504e:	f004 fde3 	bl	d9c18 <_Z19__fetch_global_Wirev>
   d5052:	4603      	mov	r3, r0
   d5054:	480a      	ldr	r0, [pc, #40]	; (d5080 <_GLOBAL__sub_I_i2ceeprom+0x6c>)
   d5056:	2228      	movs	r2, #40	; 0x28
   d5058:	2137      	movs	r1, #55	; 0x37
}
   d505a:	b005      	add	sp, #20
   d505c:	f85d eb04 	ldr.w	lr, [sp], #4
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d5060:	f001 bbf0 	b.w	d6844 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
   d5064:	2003e454 	.word	0x2003e454
   d5068:	2003e51c 	.word	0x2003e51c
   d506c:	2003e524 	.word	0x2003e524
   d5070:	2003e458 	.word	0x2003e458
   d5074:	00061a80 	.word	0x00061a80
   d5078:	000186a0 	.word	0x000186a0
   d507c:	2003e4bc 	.word	0x2003e4bc
   d5080:	2003e49c 	.word	0x2003e49c

000d5084 <_Z13displayValuesv>:
void displayValues() {
   d5084:	b538      	push	{r3, r4, r5, lr}
    display.clearDisplay();
   d5086:	4c37      	ldr	r4, [pc, #220]	; (d5164 <_Z13displayValuesv+0xe0>)
    display.print(bme.readTemperature()*1.8F + 32.);
   d5088:	4d37      	ldr	r5, [pc, #220]	; (d5168 <_Z13displayValuesv+0xe4>)
    display.clearDisplay();
   d508a:	4620      	mov	r0, r4
   d508c:	f001 ffee 	bl	d706c <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d5090:	4620      	mov	r0, r4
   d5092:	f002 fc5e 	bl	d7952 <_ZN15Adafruit_SH110X7displayEv>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
   d5096:	2300      	movs	r3, #0
    display.print("Temp. = ");
   d5098:	4934      	ldr	r1, [pc, #208]	; (d516c <_Z13displayValuesv+0xe8>)
   d509a:	6123      	str	r3, [r4, #16]
   d509c:	4620      	mov	r0, r4
   d509e:	f003 fc9b 	bl	d89d8 <_ZN5Print5printEPKc>
    display.print(bme.readTemperature()*1.8F + 32.);
   d50a2:	4628      	mov	r0, r5
   d50a4:	f000 fd00 	bl	d5aa8 <_ZN15Adafruit_BME28015readTemperatureEv>
   d50a8:	eddf 7a31 	vldr	s15, [pc, #196]	; d5170 <_Z13displayValuesv+0xec>
   d50ac:	ee60 7a27 	vmul.f32	s15, s0, s15
   d50b0:	ee17 0a90 	vmov	r0, s15
   d50b4:	f007 fbae 	bl	dc814 <__aeabi_f2d>
   d50b8:	4b2e      	ldr	r3, [pc, #184]	; (d5174 <_Z13displayValuesv+0xf0>)
   d50ba:	2200      	movs	r2, #0
   d50bc:	f007 fa4c 	bl	dc558 <__adddf3>
   d50c0:	ec41 0b10 	vmov	d0, r0, r1
   d50c4:	2102      	movs	r1, #2
   d50c6:	4620      	mov	r0, r4
   d50c8:	f003 fdcb 	bl	d8c62 <_ZN5Print5printEdi>
    display.println(" °F");
   d50cc:	492a      	ldr	r1, [pc, #168]	; (d5178 <_Z13displayValuesv+0xf4>)
   d50ce:	4620      	mov	r0, r4
   d50d0:	f003 fc95 	bl	d89fe <_ZN5Print7printlnEPKc>
    display.print("Press. = ");
   d50d4:	4929      	ldr	r1, [pc, #164]	; (d517c <_Z13displayValuesv+0xf8>)
   d50d6:	4620      	mov	r0, r4
   d50d8:	f003 fc7e 	bl	d89d8 <_ZN5Print5printEPKc>
    display.print(bme.readPressure() / 101325.0F * 760.0F);
   d50dc:	4628      	mov	r0, r5
   d50de:	f000 fd11 	bl	d5b04 <_ZN15Adafruit_BME28012readPressureEv>
   d50e2:	eddf 7a27 	vldr	s15, [pc, #156]	; d5180 <_Z13displayValuesv+0xfc>
   d50e6:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d50ea:	2102      	movs	r1, #2
   d50ec:	4620      	mov	r0, r4
   d50ee:	ed9f 0a25 	vldr	s0, [pc, #148]	; d5184 <_Z13displayValuesv+0x100>
   d50f2:	ee27 0a00 	vmul.f32	s0, s14, s0
   d50f6:	f003 fda5 	bl	d8c44 <_ZN5Print5printEfi>
    display.println(" mmHg");
   d50fa:	4923      	ldr	r1, [pc, #140]	; (d5188 <_Z13displayValuesv+0x104>)
   d50fc:	4620      	mov	r0, r4
   d50fe:	f003 fc7e 	bl	d89fe <_ZN5Print7printlnEPKc>
    display.print("Altitude = ");
   d5102:	4922      	ldr	r1, [pc, #136]	; (d518c <_Z13displayValuesv+0x108>)
   d5104:	4620      	mov	r0, r4
   d5106:	f003 fc67 	bl	d89d8 <_ZN5Print5printEPKc>
    display.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d510a:	4628      	mov	r0, r5
   d510c:	ed9f 0a20 	vldr	s0, [pc, #128]	; d5190 <_Z13displayValuesv+0x10c>
   d5110:	f000 fdd2 	bl	d5cb8 <_ZN15Adafruit_BME28012readAltitudeEf>
   d5114:	2102      	movs	r1, #2
   d5116:	4620      	mov	r0, r4
   d5118:	f003 fd94 	bl	d8c44 <_ZN5Print5printEfi>
    display.println(" m");
   d511c:	491d      	ldr	r1, [pc, #116]	; (d5194 <_Z13displayValuesv+0x110>)
   d511e:	4620      	mov	r0, r4
   d5120:	f003 fc6d 	bl	d89fe <_ZN5Print7printlnEPKc>
    display.print("Humidity = ");
   d5124:	491c      	ldr	r1, [pc, #112]	; (d5198 <_Z13displayValuesv+0x114>)
   d5126:	4620      	mov	r0, r4
   d5128:	f003 fc56 	bl	d89d8 <_ZN5Print5printEPKc>
    display.print(bme.readHumidity());
   d512c:	4628      	mov	r0, r5
   d512e:	f000 fe63 	bl	d5df8 <_ZN15Adafruit_BME28012readHumidityEv>
   d5132:	2102      	movs	r1, #2
   d5134:	4620      	mov	r0, r4
   d5136:	f003 fd85 	bl	d8c44 <_ZN5Print5printEfi>
    display.println(" %");
   d513a:	4918      	ldr	r1, [pc, #96]	; (d519c <_Z13displayValuesv+0x118>)
   d513c:	4620      	mov	r0, r4
   d513e:	f003 fc5e 	bl	d89fe <_ZN5Print7printlnEPKc>
    display.print("Compass heading");
   d5142:	4917      	ldr	r1, [pc, #92]	; (d51a0 <_Z13displayValuesv+0x11c>)
   d5144:	4620      	mov	r0, r4
   d5146:	f003 fc47 	bl	d89d8 <_ZN5Print5printEPKc>
    display.print(compass_heading);
   d514a:	4b16      	ldr	r3, [pc, #88]	; (d51a4 <_Z13displayValuesv+0x120>)
   d514c:	4620      	mov	r0, r4
   d514e:	ed93 0a00 	vldr	s0, [r3]
   d5152:	2102      	movs	r1, #2
   d5154:	f003 fd76 	bl	d8c44 <_ZN5Print5printEfi>
  display.display(); // actually display all of the above
   d5158:	4620      	mov	r0, r4
  }
   d515a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.display(); // actually display all of the above
   d515e:	f002 bbf8 	b.w	d7952 <_ZN15Adafruit_SH110X7displayEv>
   d5162:	bf00      	nop
   d5164:	2003e4bc 	.word	0x2003e4bc
   d5168:	2003e458 	.word	0x2003e458
   d516c:	000dd9cf 	.word	0x000dd9cf
   d5170:	3fe66666 	.word	0x3fe66666
   d5174:	40400000 	.word	0x40400000
   d5178:	000dd9d8 	.word	0x000dd9d8
   d517c:	000dd9dd 	.word	0x000dd9dd
   d5180:	47c5e680 	.word	0x47c5e680
   d5184:	443e0000 	.word	0x443e0000
   d5188:	000dd77e 	.word	0x000dd77e
   d518c:	000dd78c 	.word	0x000dd78c
   d5190:	447d5000 	.word	0x447d5000
   d5194:	000dd798 	.word	0x000dd798
   d5198:	000dd79b 	.word	0x000dd79b
   d519c:	000dd7a7 	.word	0x000dd7a7
   d51a0:	000dd9e7 	.word	0x000dd9e7
   d51a4:	2003e4b4 	.word	0x2003e4b4

000d51a8 <loop>:
void loop(void) {
   d51a8:	b510      	push	{r4, lr}
digitalWrite(vane_switch, HIGH);
   d51aa:	4b6c      	ldr	r3, [pc, #432]	; (d535c <loop+0x1b4>)
float vane_wind_direction = measure_wind_direction(WindSpeed);
   d51ac:	4c6c      	ldr	r4, [pc, #432]	; (d5360 <loop+0x1b8>)
digitalWrite(vane_switch, HIGH);
   d51ae:	7818      	ldrb	r0, [r3, #0]
void loop(void) {
   d51b0:	b08a      	sub	sp, #40	; 0x28
digitalWrite(vane_switch, HIGH);
   d51b2:	2101      	movs	r1, #1
   d51b4:	f004 fcbd 	bl	d9b32 <digitalWrite>
float vane_wind_direction = measure_wind_direction(WindSpeed);
   d51b8:	4620      	mov	r0, r4
   d51ba:	f7ff fd8d 	bl	d4cd8 <_Z22measure_wind_directionRf>
   d51be:	ed8d 0a03 	vstr	s0, [sp, #12]
Serial.print("\n");
   d51c2:	f004 fa0d 	bl	d95e0 <_Z16_fetch_usbserialv>
   d51c6:	4967      	ldr	r1, [pc, #412]	; (d5364 <loop+0x1bc>)
   d51c8:	f003 fc06 	bl	d89d8 <_ZN5Print5printEPKc>
Serial.print("wind direction = ");
   d51cc:	f004 fa08 	bl	d95e0 <_Z16_fetch_usbserialv>
   d51d0:	4965      	ldr	r1, [pc, #404]	; (d5368 <loop+0x1c0>)
   d51d2:	f003 fc01 	bl	d89d8 <_ZN5Print5printEPKc>
Serial.print(vane_wind_direction);
   d51d6:	f004 fa03 	bl	d95e0 <_Z16_fetch_usbserialv>
   d51da:	ed9d 0a03 	vldr	s0, [sp, #12]
   d51de:	2102      	movs	r1, #2
   d51e0:	f003 fd30 	bl	d8c44 <_ZN5Print5printEfi>
Serial.print("\n");
   d51e4:	f004 f9fc 	bl	d95e0 <_Z16_fetch_usbserialv>
   d51e8:	495e      	ldr	r1, [pc, #376]	; (d5364 <loop+0x1bc>)
   d51ea:	f003 fbf5 	bl	d89d8 <_ZN5Print5printEPKc>
Serial.print("wind speed = ");
   d51ee:	f004 f9f7 	bl	d95e0 <_Z16_fetch_usbserialv>
   d51f2:	495e      	ldr	r1, [pc, #376]	; (d536c <loop+0x1c4>)
   d51f4:	f003 fbf0 	bl	d89d8 <_ZN5Print5printEPKc>
Serial.print(WindSpeed);
   d51f8:	f004 f9f2 	bl	d95e0 <_Z16_fetch_usbserialv>
   d51fc:	ed94 0a00 	vldr	s0, [r4]
   d5200:	2102      	movs	r1, #2
   d5202:	f003 fd1f 	bl	d8c44 <_ZN5Print5printEfi>
Serial.print("\n");
   d5206:	f004 f9eb 	bl	d95e0 <_Z16_fetch_usbserialv>
   d520a:	4956      	ldr	r1, [pc, #344]	; (d5364 <loop+0x1bc>)
   d520c:	f003 fbe4 	bl	d89d8 <_ZN5Print5printEPKc>
printValues();
   d5210:	f7ff f878 	bl	d4304 <_Z11printValuesv>
displayValues();
   d5214:	f7ff ff36 	bl	d5084 <_Z13displayValuesv>
  delay(delayTime);
   d5218:	4b55      	ldr	r3, [pc, #340]	; (d5370 <loop+0x1c8>)
   d521a:	6818      	ldr	r0, [r3, #0]
   d521c:	f003 fdae 	bl	d8d7c <delay>
  if(!digitalRead(BUTTON_A)) display.print("A");
   d5220:	2004      	movs	r0, #4
   d5222:	f004 fc9f 	bl	d9b64 <digitalRead>
   d5226:	b918      	cbnz	r0, d5230 <loop+0x88>
   d5228:	4952      	ldr	r1, [pc, #328]	; (d5374 <loop+0x1cc>)
   d522a:	4853      	ldr	r0, [pc, #332]	; (d5378 <loop+0x1d0>)
   d522c:	f003 fbd4 	bl	d89d8 <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_B)) display.print("B");
   d5230:	2003      	movs	r0, #3
   d5232:	f004 fc97 	bl	d9b64 <digitalRead>
   d5236:	b918      	cbnz	r0, d5240 <loop+0x98>
   d5238:	4950      	ldr	r1, [pc, #320]	; (d537c <loop+0x1d4>)
   d523a:	484f      	ldr	r0, [pc, #316]	; (d5378 <loop+0x1d0>)
   d523c:	f003 fbcc 	bl	d89d8 <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_C)) display.print("C");
   d5240:	2002      	movs	r0, #2
   d5242:	f004 fc8f 	bl	d9b64 <digitalRead>
   d5246:	b918      	cbnz	r0, d5250 <loop+0xa8>
   d5248:	494d      	ldr	r1, [pc, #308]	; (d5380 <loop+0x1d8>)
   d524a:	484b      	ldr	r0, [pc, #300]	; (d5378 <loop+0x1d0>)
   d524c:	f003 fbc4 	bl	d89d8 <_ZN5Print5printEPKc>
  delay(10);
   d5250:	200a      	movs	r0, #10
   d5252:	f003 fd93 	bl	d8d7c <delay>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d5256:	f002 fef3 	bl	d8040 <os_thread_yield>
  display.display();
   d525a:	4847      	ldr	r0, [pc, #284]	; (d5378 <loop+0x1d0>)
  bno_compass_heading = get_compass_heading();
   d525c:	4c49      	ldr	r4, [pc, #292]	; (d5384 <loop+0x1dc>)
  display.display();
   d525e:	f002 fb78 	bl	d7952 <_ZN15Adafruit_SH110X7displayEv>
  Serial.println("\n\n");
   d5262:	f004 f9bd 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5266:	4948      	ldr	r1, [pc, #288]	; (d5388 <loop+0x1e0>)
   d5268:	f003 fbc9 	bl	d89fe <_ZN5Print7printlnEPKc>
event_compass_heading = get_event_compass_heading();
   d526c:	f7ff fe68 	bl	d4f40 <_Z25get_event_compass_headingv>
   d5270:	4b46      	ldr	r3, [pc, #280]	; (d538c <loop+0x1e4>)
   d5272:	ed83 0a00 	vstr	s0, [r3]
  bno_compass_heading = get_compass_heading();
   d5276:	f7ff fa4f 	bl	d4718 <_Z19get_compass_headingv>
   d527a:	ed84 0a00 	vstr	s0, [r4]
  Serial.print("psi from bno055\n");
   d527e:	f004 f9af 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5282:	4943      	ldr	r1, [pc, #268]	; (d5390 <loop+0x1e8>)
   d5284:	f003 fba8 	bl	d89d8 <_ZN5Print5printEPKc>
  Serial.print(bno_compass_heading);
   d5288:	f004 f9aa 	bl	d95e0 <_Z16_fetch_usbserialv>
   d528c:	ed94 0a00 	vldr	s0, [r4]
   d5290:	2102      	movs	r1, #2
   d5292:	f003 fcd7 	bl	d8c44 <_ZN5Print5printEfi>
  Serial.print("\nunix time = ");
   d5296:	f004 f9a3 	bl	d95e0 <_Z16_fetch_usbserialv>
   d529a:	493e      	ldr	r1, [pc, #248]	; (d5394 <loop+0x1ec>)
   d529c:	f003 fb9c 	bl	d89d8 <_ZN5Print5printEPKc>
  Serial.print(Time.now());
   d52a0:	f004 f99e 	bl	d95e0 <_Z16_fetch_usbserialv>
   d52a4:	4604      	mov	r4, r0
   d52a6:	f003 fd43 	bl	d8d30 <_ZN9TimeClass3nowEv>
   d52aa:	220a      	movs	r2, #10
   d52ac:	4601      	mov	r1, r0
size_t Print::print(T n, int base)
   d52ae:	4620      	mov	r0, r4
   d52b0:	f7fe ff3e 	bl	d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>
Serial.print("time base value =");
   d52b4:	f004 f994 	bl	d95e0 <_Z16_fetch_usbserialv>
   d52b8:	4937      	ldr	r1, [pc, #220]	; (d5398 <loop+0x1f0>)
   d52ba:	f003 fb8d 	bl	d89d8 <_ZN5Print5printEPKc>
Serial.print(time_base);
   d52be:	f004 f98f 	bl	d95e0 <_Z16_fetch_usbserialv>
   d52c2:	230a      	movs	r3, #10
   d52c4:	9300      	str	r3, [sp, #0]
   d52c6:	4b35      	ldr	r3, [pc, #212]	; (d539c <loop+0x1f4>)
   d52c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d52cc:	f7fe ff10 	bl	d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>
Serial.print("\n");
   d52d0:	f004 f986 	bl	d95e0 <_Z16_fetch_usbserialv>
   d52d4:	4923      	ldr	r1, [pc, #140]	; (d5364 <loop+0x1bc>)
   d52d6:	f003 fb7f 	bl	d89d8 <_ZN5Print5printEPKc>
  Serial.print("\n");
   d52da:	f004 f981 	bl	d95e0 <_Z16_fetch_usbserialv>
   d52de:	4921      	ldr	r1, [pc, #132]	; (d5364 <loop+0x1bc>)
   d52e0:	f003 fb7a 	bl	d89d8 <_ZN5Print5printEPKc>
  Particle.publish("office temperature", String(bme.readTemperature()*1.8F + 32.));
   d52e4:	482e      	ldr	r0, [pc, #184]	; (d53a0 <loop+0x1f8>)
   d52e6:	f000 fbdf 	bl	d5aa8 <_ZN15Adafruit_BME28015readTemperatureEv>
   d52ea:	eddf 7a2e 	vldr	s15, [pc, #184]	; d53a4 <loop+0x1fc>
   d52ee:	ee60 7a27 	vmul.f32	s15, s0, s15
   d52f2:	ee17 0a90 	vmov	r0, s15
   d52f6:	f007 fa8d 	bl	dc814 <__aeabi_f2d>
   d52fa:	4b2b      	ldr	r3, [pc, #172]	; (d53a8 <loop+0x200>)
   d52fc:	2200      	movs	r2, #0
   d52fe:	f007 f92b 	bl	dc558 <__adddf3>
   d5302:	ec41 0b10 	vmov	d0, r0, r1
   d5306:	2106      	movs	r1, #6
   d5308:	a806      	add	r0, sp, #24
   d530a:	f003 fafe 	bl	d890a <_ZN6StringC1Edi>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d530e:	4b27      	ldr	r3, [pc, #156]	; (d53ac <loop+0x204>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5310:	9a06      	ldr	r2, [sp, #24]
   d5312:	781b      	ldrb	r3, [r3, #0]
   d5314:	f88d 3000 	strb.w	r3, [sp]
   d5318:	4925      	ldr	r1, [pc, #148]	; (d53b0 <loop+0x208>)
   d531a:	233c      	movs	r3, #60	; 0x3c
   d531c:	a804      	add	r0, sp, #16
   d531e:	f003 ff13 	bl	d9148 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5322:	9c05      	ldr	r4, [sp, #20]
   d5324:	b17c      	cbz	r4, d5346 <loop+0x19e>
      if (--_M_use_count == 0)
   d5326:	6863      	ldr	r3, [r4, #4]
   d5328:	3b01      	subs	r3, #1
   d532a:	6063      	str	r3, [r4, #4]
   d532c:	b95b      	cbnz	r3, d5346 <loop+0x19e>
          _M_dispose();
   d532e:	6823      	ldr	r3, [r4, #0]
   d5330:	4620      	mov	r0, r4
   d5332:	689b      	ldr	r3, [r3, #8]
   d5334:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5336:	68a3      	ldr	r3, [r4, #8]
   d5338:	3b01      	subs	r3, #1
   d533a:	60a3      	str	r3, [r4, #8]
   d533c:	b91b      	cbnz	r3, d5346 <loop+0x19e>
            _M_destroy();
   d533e:	6823      	ldr	r3, [r4, #0]
   d5340:	4620      	mov	r0, r4
   d5342:	68db      	ldr	r3, [r3, #12]
   d5344:	4798      	blx	r3
   d5346:	a806      	add	r0, sp, #24
   d5348:	f003 fa82 	bl	d8850 <_ZN6StringD1Ev>
  current_power_voltage();
   d534c:	f7ff fd64 	bl	d4e18 <_Z21current_power_voltagev>
      delay(BNO055_SAMPLERATE_DELAY_MS);
   d5350:	f242 7010 	movw	r0, #10000	; 0x2710
   d5354:	f003 fd12 	bl	d8d7c <delay>
}
   d5358:	b00a      	add	sp, #40	; 0x28
   d535a:	bd10      	pop	{r4, pc}
   d535c:	2003e3cd 	.word	0x2003e3cd
   d5360:	2003e448 	.word	0x2003e448
   d5364:	000dd9ba 	.word	0x000dd9ba
   d5368:	000dd9f7 	.word	0x000dd9f7
   d536c:	000dda09 	.word	0x000dda09
   d5370:	2003e4b8 	.word	0x2003e4b8
   d5374:	000dd995 	.word	0x000dd995
   d5378:	2003e4bc 	.word	0x2003e4bc
   d537c:	000dde6c 	.word	0x000dde6c
   d5380:	000dda17 	.word	0x000dda17
   d5384:	2003e4b0 	.word	0x2003e4b0
   d5388:	000dd9b9 	.word	0x000dd9b9
   d538c:	2003e518 	.word	0x2003e518
   d5390:	000dda19 	.word	0x000dda19
   d5394:	000dda2a 	.word	0x000dda2a
   d5398:	000dda38 	.word	0x000dda38
   d539c:	2003e570 	.word	0x2003e570
   d53a0:	2003e458 	.word	0x2003e458
   d53a4:	3fe66666 	.word	0x3fe66666
   d53a8:	40400000 	.word	0x40400000
   d53ac:	2003e454 	.word	0x2003e454
   d53b0:	000dda4a 	.word	0x000dda4a

000d53b4 <setup>:
void setup(void) {
   d53b4:	b570      	push	{r4, r5, r6, lr}
   d53b6:	b0a2      	sub	sp, #136	; 0x88
  Serial.println("Hello!");
   d53b8:	f004 f912 	bl	d95e0 <_Z16_fetch_usbserialv>
   d53bc:	49bf      	ldr	r1, [pc, #764]	; (d56bc <setup+0x308>)
   d53be:	f003 fb1e 	bl	d89fe <_ZN5Print7printlnEPKc>
  if (! ina219.begin()) {
   d53c2:	f004 fc29 	bl	d9c18 <_Z19__fetch_global_Wirev>
   d53c6:	4601      	mov	r1, r0
   d53c8:	48bd      	ldr	r0, [pc, #756]	; (d56c0 <setup+0x30c>)
   d53ca:	f002 fd63 	bl	d7e94 <_ZN15Adafruit_INA2195beginEP7TwoWire>
   d53ce:	b940      	cbnz	r0, d53e2 <setup+0x2e>
    Serial.println("Failed to find INA219 chip");
   d53d0:	f004 f906 	bl	d95e0 <_Z16_fetch_usbserialv>
   d53d4:	49bb      	ldr	r1, [pc, #748]	; (d56c4 <setup+0x310>)
   d53d6:	f003 fb12 	bl	d89fe <_ZN5Print7printlnEPKc>
    while (1) { delay(10); }
   d53da:	200a      	movs	r0, #10
   d53dc:	f003 fcce 	bl	d8d7c <delay>
   d53e0:	e7fb      	b.n	d53da <setup+0x26>
  ina219.setCalibration_16V_400mA();
   d53e2:	48b7      	ldr	r0, [pc, #732]	; (d56c0 <setup+0x30c>)
time_base = Time.now();
   d53e4:	4cb8      	ldr	r4, [pc, #736]	; (d56c8 <setup+0x314>)
pinMode(wind_pin, INPUT);
   d53e6:	4db9      	ldr	r5, [pc, #740]	; (d56cc <setup+0x318>)
  ina219.setCalibration_16V_400mA();
   d53e8:	f002 fd6f 	bl	d7eca <_ZN15Adafruit_INA21924setCalibration_16V_400mAEv>
time_base = Time.now();
   d53ec:	f003 fca0 	bl	d8d30 <_ZN9TimeClass3nowEv>
   d53f0:	17c1      	asrs	r1, r0, #31
   d53f2:	e9c4 0100 	strd	r0, r1, [r4]
Serial.print("time base value =");
   d53f6:	f004 f8f3 	bl	d95e0 <_Z16_fetch_usbserialv>
   d53fa:	49b5      	ldr	r1, [pc, #724]	; (d56d0 <setup+0x31c>)
   d53fc:	f003 faec 	bl	d89d8 <_ZN5Print5printEPKc>
Serial.print(time_base);
   d5400:	f004 f8ee 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5404:	230a      	movs	r3, #10
   d5406:	9300      	str	r3, [sp, #0]
   d5408:	e9d4 2300 	ldrd	r2, r3, [r4]
   d540c:	f7fe fe70 	bl	d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>
Serial.print("\n");
   d5410:	f004 f8e6 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5414:	49af      	ldr	r1, [pc, #700]	; (d56d4 <setup+0x320>)
   d5416:	f003 fadf 	bl	d89d8 <_ZN5Print5printEPKc>
pinMode(vane_pin, INPUT);
   d541a:	4baf      	ldr	r3, [pc, #700]	; (d56d8 <setup+0x324>)
   d541c:	2100      	movs	r1, #0
   d541e:	7818      	ldrb	r0, [r3, #0]
   d5420:	f004 fb76 	bl	d9b10 <pinMode>
pinMode(vane_switch, OUTPUT);
   d5424:	4bad      	ldr	r3, [pc, #692]	; (d56dc <setup+0x328>)
   d5426:	2101      	movs	r1, #1
   d5428:	7818      	ldrb	r0, [r3, #0]
   d542a:	f004 fb71 	bl	d9b10 <pinMode>
Serial.println("Vane Value\tDirection\tHeading");
   d542e:	f004 f8d7 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5432:	49ab      	ldr	r1, [pc, #684]	; (d56e0 <setup+0x32c>)
   d5434:	f003 fae3 	bl	d89fe <_ZN5Print7printlnEPKc>
pinMode(wind_pin, INPUT);
   d5438:	7828      	ldrb	r0, [r5, #0]
   d543a:	2100      	movs	r1, #0
   d543c:	f004 fb68 	bl	d9b10 <pinMode>
attachInterrupt(wind_pin, isr_rotation, FALLING);
   d5440:	2300      	movs	r3, #0
   d5442:	9300      	str	r3, [sp, #0]
   d5444:	2202      	movs	r2, #2
   d5446:	f04f 33ff 	mov.w	r3, #4294967295
   d544a:	49a6      	ldr	r1, [pc, #664]	; (d56e4 <setup+0x330>)
   d544c:	7828      	ldrb	r0, [r5, #0]
   d544e:	f004 f8ef 	bl	d9630 <_Z15attachInterrupttPFvvE13InterruptModeah>
Serial.println("Davis Wind Speed Test");
   d5452:	f004 f8c5 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5456:	49a4      	ldr	r1, [pc, #656]	; (d56e8 <setup+0x334>)
   d5458:	f003 fad1 	bl	d89fe <_ZN5Print7printlnEPKc>
Serial.println("Rotations\tMPH");
   d545c:	f004 f8c0 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5460:	49a2      	ldr	r1, [pc, #648]	; (d56ec <setup+0x338>)
   d5462:	f003 facc 	bl	d89fe <_ZN5Print7printlnEPKc>
  Serial.begin(115200);
   d5466:	f004 f8bb 	bl	d95e0 <_Z16_fetch_usbserialv>
   d546a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d546e:	f004 f8a5 	bl	d95bc <_ZN9USBSerial5beginEl>
   d5472:	4625      	mov	r5, r4
    while(!Serial);    // time to get serial running
   d5474:	f004 f8b4 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5478:	f004 f8a7 	bl	d95ca <_ZN9USBSerialcvbEv>
   d547c:	2800      	cmp	r0, #0
   d547e:	d0f9      	beq.n	d5474 <setup+0xc0>
  display.begin(0x3C, true); // Address 0x3C default
   d5480:	4c9b      	ldr	r4, [pc, #620]	; (d56f0 <setup+0x33c>)
    Serial.println(F("BME280 test"));
   d5482:	f004 f8ad 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5486:	499b      	ldr	r1, [pc, #620]	; (d56f4 <setup+0x340>)
   d5488:	f003 fac3 	bl	d8a12 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("128x64 OLED FeatherWing test");
   d548c:	f004 f8a8 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5490:	4999      	ldr	r1, [pc, #612]	; (d56f8 <setup+0x344>)
   d5492:	f003 fab4 	bl	d89fe <_ZN5Print7printlnEPKc>
  display.begin(0x3C, true); // Address 0x3C default
   d5496:	2201      	movs	r2, #1
   d5498:	213c      	movs	r1, #60	; 0x3c
   d549a:	4620      	mov	r0, r4
   d549c:	f002 fb50 	bl	d7b40 <_ZN15Adafruit_SH11075beginEhb>
  Serial.println("OLED begun");
   d54a0:	f004 f89e 	bl	d95e0 <_Z16_fetch_usbserialv>
   d54a4:	4995      	ldr	r1, [pc, #596]	; (d56fc <setup+0x348>)
   d54a6:	f003 faaa 	bl	d89fe <_ZN5Print7printlnEPKc>
  display.display();
   d54aa:	4620      	mov	r0, r4
   d54ac:	f002 fa51 	bl	d7952 <_ZN15Adafruit_SH110X7displayEv>
  delay(1000);
   d54b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d54b4:	f003 fc62 	bl	d8d7c <delay>
  display.clearDisplay();
   d54b8:	4620      	mov	r0, r4
   d54ba:	f001 fdd7 	bl	d706c <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d54be:	4620      	mov	r0, r4
   d54c0:	f002 fa47 	bl	d7952 <_ZN15Adafruit_SH110X7displayEv>
  display.setRotation(1);
   d54c4:	2101      	movs	r1, #1
   d54c6:	4620      	mov	r0, r4
   d54c8:	f001 ffd6 	bl	d7478 <_ZN12Adafruit_GFX11setRotationEh>
  Serial.println("Button test");
   d54cc:	f004 f888 	bl	d95e0 <_Z16_fetch_usbserialv>
   d54d0:	498b      	ldr	r1, [pc, #556]	; (d5700 <setup+0x34c>)
   d54d2:	f003 fa94 	bl	d89fe <_ZN5Print7printlnEPKc>
  pinMode(BUTTON_A, INPUT_PULLUP);
   d54d6:	2102      	movs	r1, #2
   d54d8:	2004      	movs	r0, #4
   d54da:	f004 fb19 	bl	d9b10 <pinMode>
  pinMode(BUTTON_B, INPUT_PULLUP);
   d54de:	2102      	movs	r1, #2
   d54e0:	2003      	movs	r0, #3
   d54e2:	f004 fb15 	bl	d9b10 <pinMode>
  pinMode(BUTTON_C, INPUT_PULLUP);
   d54e6:	2102      	movs	r1, #2
   d54e8:	4608      	mov	r0, r1
   d54ea:	f004 fb11 	bl	d9b10 <pinMode>
  display.setTextSize(1);
   d54ee:	2101      	movs	r1, #1
   d54f0:	4620      	mov	r0, r4
   d54f2:	f002 fa28 	bl	d7946 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d54f6:	2600      	movs	r6, #0
   d54f8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d54fc:	e9c4 6304 	strd	r6, r3, [r4, #16]
  display.print("BigdaddyAddie weather station!\n");
   d5500:	4980      	ldr	r1, [pc, #512]	; (d5704 <setup+0x350>)
   d5502:	4620      	mov	r0, r4
   d5504:	f003 fa68 	bl	d89d8 <_ZN5Print5printEPKc>
  display.print("connected!\n");
   d5508:	497f      	ldr	r1, [pc, #508]	; (d5708 <setup+0x354>)
   d550a:	4620      	mov	r0, r4
   d550c:	f003 fa64 	bl	d89d8 <_ZN5Print5printEPKc>
  display.display(); // actually display all of the above
   d5510:	4620      	mov	r0, r4
   d5512:	f002 fa1e 	bl	d7952 <_ZN15Adafruit_SH110X7displayEv>
    status = bme.begin();  
   d5516:	487d      	ldr	r0, [pc, #500]	; (d570c <setup+0x358>)
   d5518:	f000 fe73 	bl	d6202 <_ZN15Adafruit_BME2805beginEv>
    if (!status) {
   d551c:	bb78      	cbnz	r0, d557e <setup+0x1ca>
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d551e:	f004 f85f 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5522:	497b      	ldr	r1, [pc, #492]	; (d5710 <setup+0x35c>)
   d5524:	f003 fa6b 	bl	d89fe <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),16);
   d5528:	f004 f85a 	bl	d95e0 <_Z16_fetch_usbserialv>
   d552c:	4979      	ldr	r1, [pc, #484]	; (d5714 <setup+0x360>)
   d552e:	f003 fa53 	bl	d89d8 <_ZN5Print5printEPKc>
   d5532:	f004 f855 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5536:	4604      	mov	r4, r0
   d5538:	4874      	ldr	r0, [pc, #464]	; (d570c <setup+0x358>)
   d553a:	f000 f9e5 	bl	d5908 <_ZN15Adafruit_BME2808sensorIDEv>
        return printNumber(val, base) + t;
   d553e:	2210      	movs	r2, #16
   d5540:	4601      	mov	r1, r0
   d5542:	4620      	mov	r0, r4
   d5544:	f003 fa67 	bl	d8a16 <_ZN5Print11printNumberEmh>
        n += println();
   d5548:	4620      	mov	r0, r4
   d554a:	f003 fa4c 	bl	d89e6 <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d554e:	f004 f847 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5552:	4971      	ldr	r1, [pc, #452]	; (d5718 <setup+0x364>)
   d5554:	f003 fa40 	bl	d89d8 <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d5558:	f004 f842 	bl	d95e0 <_Z16_fetch_usbserialv>
   d555c:	496f      	ldr	r1, [pc, #444]	; (d571c <setup+0x368>)
   d555e:	f003 fa3b 	bl	d89d8 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d5562:	f004 f83d 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5566:	496e      	ldr	r1, [pc, #440]	; (d5720 <setup+0x36c>)
   d5568:	f003 fa36 	bl	d89d8 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d556c:	f004 f838 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5570:	496c      	ldr	r1, [pc, #432]	; (d5724 <setup+0x370>)
   d5572:	f003 fa31 	bl	d89d8 <_ZN5Print5printEPKc>
        while (1) delay(10);
   d5576:	200a      	movs	r0, #10
   d5578:	f003 fc00 	bl	d8d7c <delay>
   d557c:	e7fb      	b.n	d5576 <setup+0x1c2>
if (i2ceeprom.begin(0x50)) {  // you can stick the new i2c addr in here, e.g. begin(0x51);
   d557e:	f004 fb4b 	bl	d9c18 <_Z19__fetch_global_Wirev>
   d5582:	2150      	movs	r1, #80	; 0x50
   d5584:	4602      	mov	r2, r0
   d5586:	4868      	ldr	r0, [pc, #416]	; (d5728 <setup+0x374>)
   d5588:	f002 fb50 	bl	d7c2c <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>
   d558c:	b190      	cbz	r0, d55b4 <setup+0x200>
    Serial.println("Found I2C EEPROM");
   d558e:	f004 f827 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5592:	4966      	ldr	r1, [pc, #408]	; (d572c <setup+0x378>)
   d5594:	f003 fa33 	bl	d89fe <_ZN5Print7printlnEPKc>
eeprom_test();
   d5598:	f7ff fb2c 	bl	d4bf4 <_Z11eeprom_testv>
  if(!bno.begin())
   d559c:	4864      	ldr	r0, [pc, #400]	; (d5730 <setup+0x37c>)
   d559e:	210c      	movs	r1, #12
   d55a0:	f001 fa36 	bl	d6a10 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
   d55a4:	4604      	mov	r4, r0
   d55a6:	b970      	cbnz	r0, d55c6 <setup+0x212>
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
   d55a8:	f004 f81a 	bl	d95e0 <_Z16_fetch_usbserialv>
   d55ac:	4961      	ldr	r1, [pc, #388]	; (d5734 <setup+0x380>)
   d55ae:	f003 fa13 	bl	d89d8 <_ZN5Print5printEPKc>
    while(1);
   d55b2:	e7fe      	b.n	d55b2 <setup+0x1fe>
    Serial.println("I2C EEPROM not identified ... check your connections?\r\n");
   d55b4:	f004 f814 	bl	d95e0 <_Z16_fetch_usbserialv>
   d55b8:	495f      	ldr	r1, [pc, #380]	; (d5738 <setup+0x384>)
   d55ba:	f003 fa20 	bl	d89fe <_ZN5Print7printlnEPKc>
    while (1) delay(10);
   d55be:	200a      	movs	r0, #10
   d55c0:	f003 fbdc 	bl	d8d7c <delay>
   d55c4:	e7fb      	b.n	d55be <setup+0x20a>
   Serial.print("time base value =");
   d55c6:	f004 f80b 	bl	d95e0 <_Z16_fetch_usbserialv>
   d55ca:	4941      	ldr	r1, [pc, #260]	; (d56d0 <setup+0x31c>)
   d55cc:	f003 fa04 	bl	d89d8 <_ZN5Print5printEPKc>
Serial.print(time_base);
   d55d0:	f004 f806 	bl	d95e0 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d55d4:	230a      	movs	r3, #10
   d55d6:	9300      	str	r3, [sp, #0]
   d55d8:	e9d5 2300 	ldrd	r2, r3, [r5]
   d55dc:	f7fe fd88 	bl	d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>
Serial.print("\n");
   d55e0:	f003 fffe 	bl	d95e0 <_Z16_fetch_usbserialv>
   d55e4:	493b      	ldr	r1, [pc, #236]	; (d56d4 <setup+0x320>)
   d55e6:	f003 f9f7 	bl	d89d8 <_ZN5Print5printEPKc>
  delay(1000);
   d55ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d55ee:	f003 fbc5 	bl	d8d7c <delay>
  displaySensorDetails();
   d55f2:	f7fe ff13 	bl	d441c <_Z20displaySensorDetailsv>
    EEPROM.get(eeAddress, bnoID);
   d55f6:	f004 fadf 	bl	d9bb8 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d55fa:	2204      	movs	r2, #4
   d55fc:	a902      	add	r1, sp, #8
   d55fe:	4630      	mov	r0, r6
   d5600:	f002 fcfe 	bl	d8000 <HAL_EEPROM_Get>
    bno.getSensor(&sensor);
   d5604:	484a      	ldr	r0, [pc, #296]	; (d5730 <setup+0x37c>)
   d5606:	a918      	add	r1, sp, #96	; 0x60
   d5608:	f001 f8f4 	bl	d67f4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    if (bnoID != sensor.sensor_id)
   d560c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   d560e:	9b02      	ldr	r3, [sp, #8]
   d5610:	429a      	cmp	r2, r3
   d5612:	d035      	beq.n	d5680 <setup+0x2cc>
        Serial.println("\nNo Calibration Data for this sensor exists in EEPROM");
   d5614:	f003 ffe4 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5618:	4948      	ldr	r1, [pc, #288]	; (d573c <setup+0x388>)
   d561a:	f003 f9f0 	bl	d89fe <_ZN5Print7printlnEPKc>
        delay(500);
   d561e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5622:	f003 fbab 	bl	d8d7c <delay>
    bool foundCalib = false;
   d5626:	4634      	mov	r4, r6
    delay(1000);
   d5628:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d562c:	f003 fba6 	bl	d8d7c <delay>
    displaySensorDetails();
   d5630:	f7fe fef4 	bl	d441c <_Z20displaySensorDetailsv>
    displaySensorStatus();
   d5634:	f7fe fda6 	bl	d4184 <_Z19displaySensorStatusv>
    bno.setExtCrystalUse(true);
   d5638:	2101      	movs	r1, #1
   d563a:	483d      	ldr	r0, [pc, #244]	; (d5730 <setup+0x37c>)
   d563c:	f001 f936 	bl	d68ac <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
   d5640:	f002 fcce 	bl	d7fe0 <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
   d5644:	4b3e      	ldr	r3, [pc, #248]	; (d5740 <setup+0x38c>)
    bno.getEvent(&event);
   d5646:	a90f      	add	r1, sp, #60	; 0x3c
millisOld=millis();
   d5648:	6018      	str	r0, [r3, #0]
    bno.getEvent(&event);
   d564a:	4839      	ldr	r0, [pc, #228]	; (d5730 <setup+0x37c>)
   d564c:	f001 fbc0 	bl	d6dd0 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
    if (foundCalib){
   d5650:	2c00      	cmp	r4, #0
   d5652:	d07f      	beq.n	d5754 <setup+0x3a0>
        Serial.println("Move sensor slightly to calibrate magnetometers");
   d5654:	f003 ffc4 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5658:	493a      	ldr	r1, [pc, #232]	; (d5744 <setup+0x390>)
        while (!bno.isFullyCalibrated())
   d565a:	4c35      	ldr	r4, [pc, #212]	; (d5730 <setup+0x37c>)
        Serial.println("Move sensor slightly to calibrate magnetometers");
   d565c:	f003 f9cf 	bl	d89fe <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
   d5660:	4620      	mov	r0, r4
   d5662:	f001 fa5e 	bl	d6b22 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d5666:	2800      	cmp	r0, #0
   d5668:	f040 80b3 	bne.w	d57d2 <setup+0x41e>
            bno.getEvent(&event);
   d566c:	a90f      	add	r1, sp, #60	; 0x3c
   d566e:	4620      	mov	r0, r4
   d5670:	f001 fbae 	bl	d6dd0 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            displayCalStatus();
   d5674:	f7fe fde2 	bl	d423c <_Z16displayCalStatusv>
            delay(BNO055_STARTUP_SAMPLE_DELAY_MS);
   d5678:	2064      	movs	r0, #100	; 0x64
   d567a:	f003 fb7f 	bl	d8d7c <delay>
        while (!bno.isFullyCalibrated())
   d567e:	e7ef      	b.n	d5660 <setup+0x2ac>
        Serial.println("\nFound Calibration for this sensor in EEPROM.");
   d5680:	f003 ffae 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5684:	4930      	ldr	r1, [pc, #192]	; (d5748 <setup+0x394>)
   d5686:	f003 f9ba 	bl	d89fe <_ZN5Print7printlnEPKc>
        EEPROM.get(eeAddress, calibrationData);
   d568a:	f004 fa95 	bl	d9bb8 <_Z21__fetch_global_EEPROMv>
   d568e:	2216      	movs	r2, #22
   d5690:	a903      	add	r1, sp, #12
   d5692:	2004      	movs	r0, #4
   d5694:	f002 fcb4 	bl	d8000 <HAL_EEPROM_Get>
        displaySensorOffsets(calibrationData);
   d5698:	a803      	add	r0, sp, #12
   d569a:	f7fe ff4b 	bl	d4534 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
        Serial.println("\n\nRestoring Calibration data to the BNO055...");
   d569e:	f003 ff9f 	bl	d95e0 <_Z16_fetch_usbserialv>
   d56a2:	492a      	ldr	r1, [pc, #168]	; (d574c <setup+0x398>)
   d56a4:	f003 f9ab 	bl	d89fe <_ZN5Print7printlnEPKc>
        bno.setSensorOffsets(calibrationData);
   d56a8:	a903      	add	r1, sp, #12
   d56aa:	4821      	ldr	r0, [pc, #132]	; (d5730 <setup+0x37c>)
   d56ac:	f001 f921 	bl	d68f2 <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>
        Serial.println("\n\nCalibration data loaded into BNO055");
   d56b0:	f003 ff96 	bl	d95e0 <_Z16_fetch_usbserialv>
   d56b4:	4926      	ldr	r1, [pc, #152]	; (d5750 <setup+0x39c>)
   d56b6:	f003 f9a2 	bl	d89fe <_ZN5Print7printlnEPKc>
        foundCalib = true;
   d56ba:	e7b5      	b.n	d5628 <setup+0x274>
   d56bc:	000dda5d 	.word	0x000dda5d
   d56c0:	2003e524 	.word	0x2003e524
   d56c4:	000dda64 	.word	0x000dda64
   d56c8:	2003e570 	.word	0x2003e570
   d56cc:	2003e3ce 	.word	0x2003e3ce
   d56d0:	000dda38 	.word	0x000dda38
   d56d4:	000dd9ba 	.word	0x000dd9ba
   d56d8:	2003e3cc 	.word	0x2003e3cc
   d56dc:	2003e3cd 	.word	0x2003e3cd
   d56e0:	000dda7f 	.word	0x000dda7f
   d56e4:	000d40c9 	.word	0x000d40c9
   d56e8:	000dda9c 	.word	0x000dda9c
   d56ec:	000ddab2 	.word	0x000ddab2
   d56f0:	2003e4bc 	.word	0x2003e4bc
   d56f4:	000ddac0 	.word	0x000ddac0
   d56f8:	000ddacc 	.word	0x000ddacc
   d56fc:	000ddae9 	.word	0x000ddae9
   d5700:	000ddaf4 	.word	0x000ddaf4
   d5704:	000ddb00 	.word	0x000ddb00
   d5708:	000ddb20 	.word	0x000ddb20
   d570c:	2003e458 	.word	0x2003e458
   d5710:	000ddb2c 	.word	0x000ddb2c
   d5714:	000ddb74 	.word	0x000ddb74
   d5718:	000ddb85 	.word	0x000ddb85
   d571c:	000ddbcc 	.word	0x000ddbcc
   d5720:	000ddbf6 	.word	0x000ddbf6
   d5724:	000ddc20 	.word	0x000ddc20
   d5728:	2003e51c 	.word	0x2003e51c
   d572c:	000ddc4a 	.word	0x000ddc4a
   d5730:	2003e49c 	.word	0x2003e49c
   d5734:	000ddc93 	.word	0x000ddc93
   d5738:	000ddc5b 	.word	0x000ddc5b
   d573c:	000ddcd0 	.word	0x000ddcd0
   d5740:	2003e538 	.word	0x2003e538
   d5744:	000ddd88 	.word	0x000ddd88
   d5748:	000ddd06 	.word	0x000ddd06
   d574c:	000ddd34 	.word	0x000ddd34
   d5750:	000ddd62 	.word	0x000ddd62
        Serial.println("Please Calibrate Sensor: ");
   d5754:	f003 ff44 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5758:	493d      	ldr	r1, [pc, #244]	; (d5850 <setup+0x49c>)
        while (!bno.isFullyCalibrated())
   d575a:	4c3e      	ldr	r4, [pc, #248]	; (d5854 <setup+0x4a0>)
            Serial.print("X: ");
   d575c:	4e3e      	ldr	r6, [pc, #248]	; (d5858 <setup+0x4a4>)
            Serial.print("\tY: ");
   d575e:	4d3f      	ldr	r5, [pc, #252]	; (d585c <setup+0x4a8>)
        Serial.println("Please Calibrate Sensor: ");
   d5760:	f003 f94d 	bl	d89fe <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
   d5764:	4620      	mov	r0, r4
   d5766:	f001 f9dc 	bl	d6b22 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d576a:	bb90      	cbnz	r0, d57d2 <setup+0x41e>
            bno.getEvent(&event);
   d576c:	a90f      	add	r1, sp, #60	; 0x3c
   d576e:	4620      	mov	r0, r4
   d5770:	f001 fb2e 	bl	d6dd0 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            Serial.print("X: ");
   d5774:	f003 ff34 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5778:	4631      	mov	r1, r6
   d577a:	f003 f92d 	bl	d89d8 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.x, 4);
   d577e:	f003 ff2f 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5782:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   d5786:	2104      	movs	r1, #4
   d5788:	f003 fa5c 	bl	d8c44 <_ZN5Print5printEfi>
            Serial.print("\tY: ");
   d578c:	f003 ff28 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5790:	4629      	mov	r1, r5
   d5792:	f003 f921 	bl	d89d8 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.y, 4);
   d5796:	f003 ff23 	bl	d95e0 <_Z16_fetch_usbserialv>
   d579a:	ed9d 0a15 	vldr	s0, [sp, #84]	; 0x54
   d579e:	2104      	movs	r1, #4
   d57a0:	f003 fa50 	bl	d8c44 <_ZN5Print5printEfi>
            Serial.print("\tZ: ");
   d57a4:	f003 ff1c 	bl	d95e0 <_Z16_fetch_usbserialv>
   d57a8:	492d      	ldr	r1, [pc, #180]	; (d5860 <setup+0x4ac>)
   d57aa:	f003 f915 	bl	d89d8 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.z, 4);
   d57ae:	f003 ff17 	bl	d95e0 <_Z16_fetch_usbserialv>
   d57b2:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   d57b6:	2104      	movs	r1, #4
   d57b8:	f003 fa44 	bl	d8c44 <_ZN5Print5printEfi>
            displayCalStatus();
   d57bc:	f7fe fd3e 	bl	d423c <_Z16displayCalStatusv>
            Serial.println("");
   d57c0:	f003 ff0e 	bl	d95e0 <_Z16_fetch_usbserialv>
   d57c4:	4927      	ldr	r1, [pc, #156]	; (d5864 <setup+0x4b0>)
   d57c6:	f003 f91a 	bl	d89fe <_ZN5Print7printlnEPKc>
            delay(BNO055_STARTUP_SAMPLE_DELAY_MS);
   d57ca:	2064      	movs	r0, #100	; 0x64
   d57cc:	f003 fad6 	bl	d8d7c <delay>
        while (!bno.isFullyCalibrated())
   d57d0:	e7c8      	b.n	d5764 <setup+0x3b0>
    Serial.println("\nFully calibrated!");
   d57d2:	f003 ff05 	bl	d95e0 <_Z16_fetch_usbserialv>
   d57d6:	4924      	ldr	r1, [pc, #144]	; (d5868 <setup+0x4b4>)
   d57d8:	f003 f911 	bl	d89fe <_ZN5Print7printlnEPKc>
    Serial.println("--------------------------------");
   d57dc:	f003 ff00 	bl	d95e0 <_Z16_fetch_usbserialv>
   d57e0:	4922      	ldr	r1, [pc, #136]	; (d586c <setup+0x4b8>)
   d57e2:	f003 f90c 	bl	d89fe <_ZN5Print7printlnEPKc>
    Serial.println("Calibration Results: ");
   d57e6:	f003 fefb 	bl	d95e0 <_Z16_fetch_usbserialv>
   d57ea:	4921      	ldr	r1, [pc, #132]	; (d5870 <setup+0x4bc>)
   d57ec:	f003 f907 	bl	d89fe <_ZN5Print7printlnEPKc>
    bno.getSensorOffsets(newCalib);
   d57f0:	a909      	add	r1, sp, #36	; 0x24
   d57f2:	4818      	ldr	r0, [pc, #96]	; (d5854 <setup+0x4a0>)
   d57f4:	f001 f9ce 	bl	d6b94 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>
    displaySensorOffsets(newCalib);
   d57f8:	a809      	add	r0, sp, #36	; 0x24
   d57fa:	f7fe fe9b 	bl	d4534 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
    Serial.println("\n\nStoring calibration data to EEPROM...");
   d57fe:	f003 feef 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5802:	491c      	ldr	r1, [pc, #112]	; (d5874 <setup+0x4c0>)
   d5804:	f003 f8fb 	bl	d89fe <_ZN5Print7printlnEPKc>
    bno.getSensor(&sensor);
   d5808:	a918      	add	r1, sp, #96	; 0x60
   d580a:	4812      	ldr	r0, [pc, #72]	; (d5854 <setup+0x4a0>)
   d580c:	f000 fff2 	bl	d67f4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    bnoID = sensor.sensor_id;
   d5810:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d5812:	9302      	str	r3, [sp, #8]
    EEPROM.put(eeAddress, bnoID);
   d5814:	f004 f9d0 	bl	d9bb8 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5818:	a902      	add	r1, sp, #8
   d581a:	2204      	movs	r2, #4
   d581c:	2000      	movs	r0, #0
   d581e:	f002 fbf7 	bl	d8010 <HAL_EEPROM_Put>
    EEPROM.put(eeAddress, newCalib);
   d5822:	f004 f9c9 	bl	d9bb8 <_Z21__fetch_global_EEPROMv>
   d5826:	2216      	movs	r2, #22
   d5828:	a909      	add	r1, sp, #36	; 0x24
   d582a:	2004      	movs	r0, #4
   d582c:	f002 fbf0 	bl	d8010 <HAL_EEPROM_Put>
    Serial.println("Data stored to EEPROM.");
   d5830:	f003 fed6 	bl	d95e0 <_Z16_fetch_usbserialv>
   d5834:	4910      	ldr	r1, [pc, #64]	; (d5878 <setup+0x4c4>)
   d5836:	f003 f8e2 	bl	d89fe <_ZN5Print7printlnEPKc>
    Serial.println("\n--------------------------------\n");
   d583a:	f003 fed1 	bl	d95e0 <_Z16_fetch_usbserialv>
   d583e:	490f      	ldr	r1, [pc, #60]	; (d587c <setup+0x4c8>)
   d5840:	f003 f8dd 	bl	d89fe <_ZN5Print7printlnEPKc>
    delay(500);
   d5844:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5848:	f003 fa98 	bl	d8d7c <delay>
}
   d584c:	b022      	add	sp, #136	; 0x88
   d584e:	bd70      	pop	{r4, r5, r6, pc}
   d5850:	000dddb8 	.word	0x000dddb8
   d5854:	2003e49c 	.word	0x2003e49c
   d5858:	000dd9ab 	.word	0x000dd9ab
   d585c:	000dd9af 	.word	0x000dd9af
   d5860:	000dd9b4 	.word	0x000dd9b4
   d5864:	000dd929 	.word	0x000dd929
   d5868:	000dddd2 	.word	0x000dddd2
   d586c:	000dd7ae 	.word	0x000dd7ae
   d5870:	000ddde5 	.word	0x000ddde5
   d5874:	000dddfb 	.word	0x000dddfb
   d5878:	000dde23 	.word	0x000dde23
   d587c:	000dde3a 	.word	0x000dde3a

000d5880 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d5880:	4770      	bx	lr

000d5882 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d5882:	b510      	push	{r4, lr}
  }
   d5884:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d5886:	4604      	mov	r4, r0
  }
   d5888:	f004 f9ea 	bl	d9c60 <_ZdlPvj>
   d588c:	4620      	mov	r0, r4
   d588e:	bd10      	pop	{r4, pc}

000d5890 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5890:	b40e      	push	{r1, r2, r3}
   d5892:	b503      	push	{r0, r1, lr}
   d5894:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d5896:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5898:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d589c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d589e:	f003 f9e3 	bl	d8c68 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d58a2:	b002      	add	sp, #8
   d58a4:	f85d eb04 	ldr.w	lr, [sp], #4
   d58a8:	b003      	add	sp, #12
   d58aa:	4770      	bx	lr

000d58ac <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d58ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d58ae:	4604      	mov	r4, r0
   d58b0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d58b2:	7922      	ldrb	r2, [r4, #4]
   d58b4:	68a3      	ldr	r3, [r4, #8]
   d58b6:	b132      	cbz	r2, d58c6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d58b8:	b9a3      	cbnz	r3, d58e4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d58ba:	490b      	ldr	r1, [pc, #44]	; (d58e8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d58bc:	b002      	add	sp, #8
   d58be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d58c2:	f003 b889 	b.w	d89d8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d58c6:	4a09      	ldr	r2, [pc, #36]	; (d58ec <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d58c8:	7b26      	ldrb	r6, [r4, #12]
   d58ca:	4d09      	ldr	r5, [pc, #36]	; (d58f0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d58cc:	4909      	ldr	r1, [pc, #36]	; (d58f4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d58ce:	7b64      	ldrb	r4, [r4, #13]
   d58d0:	2e01      	cmp	r6, #1
   d58d2:	bf18      	it	ne
   d58d4:	4629      	movne	r1, r5
   d58d6:	e9cd 1400 	strd	r1, r4, [sp]
   d58da:	4907      	ldr	r1, [pc, #28]	; (d58f8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d58dc:	f7ff ffd8 	bl	d5890 <_ZN5Print6printfEPKcz>
  }
   d58e0:	b002      	add	sp, #8
   d58e2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d58e4:	4a05      	ldr	r2, [pc, #20]	; (d58fc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d58e6:	e7ef      	b.n	d58c8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d58e8:	000dde6e 	.word	0x000dde6e
   d58ec:	000dd929 	.word	0x000dd929
   d58f0:	000dde6a 	.word	0x000dde6a
   d58f4:	000dde66 	.word	0x000dde66
   d58f8:	000dde84 	.word	0x000dde84
   d58fc:	000dde5d 	.word	0x000dde5d

000d5900 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d5900:	f04f 33ff 	mov.w	r3, #4294967295
   d5904:	6103      	str	r3, [r0, #16]
{ }
   d5906:	4770      	bx	lr

000d5908 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d5908:	6880      	ldr	r0, [r0, #8]
   d590a:	4770      	bx	lr

000d590c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d590c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d590e:	4c0b      	ldr	r4, [pc, #44]	; (d593c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d5910:	7821      	ldrb	r1, [r4, #0]
   d5912:	f3bf 8f5b 	dmb	ish
   d5916:	f011 0101 	ands.w	r1, r1, #1
   d591a:	d10b      	bne.n	d5934 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d591c:	4620      	mov	r0, r4
   d591e:	9101      	str	r1, [sp, #4]
   d5920:	f7fe fbca 	bl	d40b8 <__cxa_guard_acquire>
   d5924:	9901      	ldr	r1, [sp, #4]
   d5926:	b128      	cbz	r0, d5934 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5928:	4805      	ldr	r0, [pc, #20]	; (d5940 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d592a:	f002 fe29 	bl	d8580 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d592e:	4620      	mov	r0, r4
   d5930:	f7fe fbc7 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d5934:	4802      	ldr	r0, [pc, #8]	; (d5940 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d5936:	b002      	add	sp, #8
   d5938:	bd10      	pop	{r4, pc}
   d593a:	bf00      	nop
   d593c:	2003e578 	.word	0x2003e578
   d5940:	2003e57c 	.word	0x2003e57c

000d5944 <_ZN15Adafruit_BME2807spixferEh>:
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sck == -1)
   d5948:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d594c:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d594e:	4605      	mov	r5, r0
   d5950:	460f      	mov	r7, r1
    if (_sck == -1)
   d5952:	d106      	bne.n	d5962 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5954:	f7ff ffda 	bl	d590c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5958:	4639      	mov	r1, r7
}
   d595a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d595e:	f002 beb1 	b.w	d86c4 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d5962:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d5964:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d5966:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d596a:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d596e:	2100      	movs	r1, #0
   d5970:	b280      	uxth	r0, r0
   d5972:	f004 f8de 	bl	d9b32 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d5976:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d597a:	fa08 f106 	lsl.w	r1, r8, r6
   d597e:	4039      	ands	r1, r7
   d5980:	b280      	uxth	r0, r0
   d5982:	f004 f8d6 	bl	d9b32 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d5986:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d598a:	2101      	movs	r1, #1
   d598c:	b280      	uxth	r0, r0
   d598e:	f004 f8d0 	bl	d9b32 <digitalWrite>
        if (digitalRead(_miso))
   d5992:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d5996:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d5998:	b280      	uxth	r0, r0
        reply <<= 1;
   d599a:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d599c:	f004 f8e2 	bl	d9b64 <digitalRead>
   d59a0:	b108      	cbz	r0, d59a6 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d59a2:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d59a6:	3e01      	subs	r6, #1
   d59a8:	d2df      	bcs.n	d596a <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d59aa:	4620      	mov	r0, r4
   d59ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d59b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d59b0:	b508      	push	{r3, lr}
        instance().endTransaction();
   d59b2:	f7ff ffab 	bl	d590c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d59b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d59ba:	f002 bdfc 	b.w	d85b6 <_ZN8SPIClass14endTransactionEv>

000d59be <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d59be:	b507      	push	{r0, r1, r2, lr}
   d59c0:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d59c2:	f7ff ffa3 	bl	d590c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d59c6:	9901      	ldr	r1, [sp, #4]
    }
   d59c8:	b003      	add	sp, #12
   d59ca:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d59ce:	f002 be0b 	b.w	d85e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d59d4 <_ZN15Adafruit_BME2806read24Eh>:
{
   d59d4:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d59d6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d59da:	3301      	adds	r3, #1
{
   d59dc:	b085      	sub	sp, #20
   d59de:	4604      	mov	r4, r0
   d59e0:	460d      	mov	r5, r1
    if (_cs == -1) {
   d59e2:	d123      	bne.n	d5a2c <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d59e4:	7901      	ldrb	r1, [r0, #4]
   d59e6:	6800      	ldr	r0, [r0, #0]
   d59e8:	f003 ff9a 	bl	d9920 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d59ec:	6820      	ldr	r0, [r4, #0]
   d59ee:	6803      	ldr	r3, [r0, #0]
   d59f0:	4629      	mov	r1, r5
   d59f2:	689b      	ldr	r3, [r3, #8]
   d59f4:	4798      	blx	r3
        _wire -> endTransmission();
   d59f6:	6820      	ldr	r0, [r4, #0]
   d59f8:	f003 ff9a 	bl	d9930 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d59fc:	7921      	ldrb	r1, [r4, #4]
   d59fe:	6820      	ldr	r0, [r4, #0]
   d5a00:	2203      	movs	r2, #3
   d5a02:	f003 ff8a 	bl	d991a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d5a06:	6820      	ldr	r0, [r4, #0]
   d5a08:	6803      	ldr	r3, [r0, #0]
   d5a0a:	695b      	ldr	r3, [r3, #20]
   d5a0c:	4798      	blx	r3
        value <<= 8;
   d5a0e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5a10:	6820      	ldr	r0, [r4, #0]
   d5a12:	6803      	ldr	r3, [r0, #0]
   d5a14:	695b      	ldr	r3, [r3, #20]
   d5a16:	4798      	blx	r3
   d5a18:	4328      	orrs	r0, r5
        value <<= 8;
   d5a1a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5a1c:	6820      	ldr	r0, [r4, #0]
   d5a1e:	6803      	ldr	r3, [r0, #0]
   d5a20:	695b      	ldr	r3, [r3, #20]
   d5a22:	4798      	blx	r3
   d5a24:	4305      	orrs	r5, r0
}
   d5a26:	4628      	mov	r0, r5
   d5a28:	b005      	add	sp, #20
   d5a2a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5a2c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5a30:	3301      	adds	r3, #1
   d5a32:	d10c      	bne.n	d5a4e <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d5a34:	4b1a      	ldr	r3, [pc, #104]	; (d5aa0 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d5a36:	9300      	str	r3, [sp, #0]
   d5a38:	2300      	movs	r3, #0
   d5a3a:	f88d 3004 	strb.w	r3, [sp, #4]
   d5a3e:	4b19      	ldr	r3, [pc, #100]	; (d5aa4 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d5a40:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5a42:	4668      	mov	r0, sp
   d5a44:	2301      	movs	r3, #1
   d5a46:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5a4a:	f7ff ffb8 	bl	d59be <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5a4e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5a52:	2100      	movs	r1, #0
   d5a54:	b280      	uxth	r0, r0
   d5a56:	f004 f86c 	bl	d9b32 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5a5a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5a5e:	4620      	mov	r0, r4
   d5a60:	f7ff ff70 	bl	d5944 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5a64:	2100      	movs	r1, #0
   d5a66:	4620      	mov	r0, r4
   d5a68:	f7ff ff6c 	bl	d5944 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d5a6c:	2100      	movs	r1, #0
        value <<= 8;
   d5a6e:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5a70:	4620      	mov	r0, r4
   d5a72:	f7ff ff67 	bl	d5944 <_ZN15Adafruit_BME2807spixferEh>
   d5a76:	4328      	orrs	r0, r5
        value <<= 8;
   d5a78:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5a7a:	2100      	movs	r1, #0
   d5a7c:	4620      	mov	r0, r4
   d5a7e:	f7ff ff61 	bl	d5944 <_ZN15Adafruit_BME2807spixferEh>
   d5a82:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d5a84:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5a88:	2101      	movs	r1, #1
   d5a8a:	b280      	uxth	r0, r0
   d5a8c:	f004 f851 	bl	d9b32 <digitalWrite>
        if (_sck == -1)
   d5a90:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5a94:	3301      	adds	r3, #1
   d5a96:	d1c6      	bne.n	d5a26 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d5a98:	f7ff ff8a 	bl	d59b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d5a9c:	e7c3      	b.n	d5a26 <_ZN15Adafruit_BME2806read24Eh+0x52>
   d5a9e:	bf00      	nop
   d5aa0:	000ddeac 	.word	0x000ddeac
   d5aa4:	0007a120 	.word	0x0007a120

000d5aa8 <_ZN15Adafruit_BME28015readTemperatureEv>:
{
   d5aa8:	b510      	push	{r4, lr}
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5aaa:	21fa      	movs	r1, #250	; 0xfa
{
   d5aac:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5aae:	f7ff ff91 	bl	d59d4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d5ab2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d5ab6:	d01e      	beq.n	d5af6 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5ab8:	8aa1      	ldrh	r1, [r4, #20]
    return T/100;
   d5aba:	ed9f 7a10 	vldr	s14, [pc, #64]	; d5afc <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5abe:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5ac0:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5ac4:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d5ac8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5acc:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5ace:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d5ad0:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d5ad4:	1312      	asrs	r2, r2, #12
   d5ad6:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5ad8:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d5ada:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d5ade:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d5ae0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5ae4:	3380      	adds	r3, #128	; 0x80
   d5ae6:	121b      	asrs	r3, r3, #8
   d5ae8:	ee07 3a90 	vmov	s15, r3
   d5aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d5af0:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d5af4:	bd10      	pop	{r4, pc}
        return NAN;
   d5af6:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5b00 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d5afa:	e7fb      	b.n	d5af4 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d5afc:	42c80000 	.word	0x42c80000
   d5b00:	7fc00000 	.word	0x7fc00000

000d5b04 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   d5b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5b08:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5b0a:	f7ff ffcd 	bl	d5aa8 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5b0e:	21f7      	movs	r1, #247	; 0xf7
   d5b10:	4620      	mov	r0, r4
   d5b12:	f7ff ff5f 	bl	d59d4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5b16:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5b1a:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5b1c:	f000 80bf 	beq.w	d5c9e <_ZN15Adafruit_BME28012readPressureEv+0x19a>
    var1 = ((int64_t)t_fine) - 128000;
   d5b20:	68e0      	ldr	r0, [r4, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5b22:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
   d5b26:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d5b2a:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d5b2e:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5b32:	fba3 8903 	umull	r8, r9, r3, r3
   d5b36:	fb03 f102 	mul.w	r1, r3, r2
   d5b3a:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5b3e:	17f7      	asrs	r7, r6, #31
   d5b40:	fb06 f102 	mul.w	r1, r6, r2
   d5b44:	fb03 1107 	mla	r1, r3, r7, r1
   d5b48:	fba6 6703 	umull	r6, r7, r6, r3
   d5b4c:	440f      	add	r7, r1
   d5b4e:	0339      	lsls	r1, r7, #12
   d5b50:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d5b54:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5b56:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
   d5b5a:	17f7      	asrs	r7, r6, #31
   d5b5c:	fb06 fc09 	mul.w	ip, r6, r9
   d5b60:	fb08 cc07 	mla	ip, r8, r7, ip
   d5b64:	fba6 6708 	umull	r6, r7, r6, r8
   d5b68:	4467      	add	r7, ip
   d5b6a:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d5b6e:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5b72:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5b74:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d5b78:	eb1c 0000 	adds.w	r0, ip, r0
   d5b7c:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5b80:	3000      	adds	r0, #0
   d5b82:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d5b86:	fba0 0106 	umull	r0, r1, r0, r6
   d5b8a:	fb06 110e 	mla	r1, r6, lr, r1
   d5b8e:	104e      	asrs	r6, r1, #1
   d5b90:	17cf      	asrs	r7, r1, #31
    if (var1 == 0) {
   d5b92:	ea56 0107 	orrs.w	r1, r6, r7
   d5b96:	f000 8085 	beq.w	d5ca4 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5b9a:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
   d5b9e:	fb00 fc09 	mul.w	ip, r0, r9
   d5ba2:	17c1      	asrs	r1, r0, #31
   d5ba4:	fb08 cc01 	mla	ip, r8, r1, ip
   d5ba8:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5bac:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
   d5bb0:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d5bb4:	fb08 f202 	mul.w	r2, r8, r2
   d5bb8:	fb03 2209 	mla	r2, r3, r9, r2
   d5bbc:	fba8 8903 	umull	r8, r9, r8, r3
   d5bc0:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5bc2:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5bc4:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d5bc8:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d5bcc:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5bce:	1812      	adds	r2, r2, r0
    p = 1048576 - adc_P;
   d5bd0:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5bd4:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5bd8:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5bdc:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5be0:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d5be2:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5be4:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d5be6:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d5bea:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5bee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d5bf2:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d5bf6:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d5bfa:	1ac0      	subs	r0, r0, r3
   d5bfc:	f640 4335 	movw	r3, #3125	; 0xc35
   d5c00:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d5c04:	fba0 0103 	umull	r0, r1, r0, r3
   d5c08:	fb03 110e 	mla	r1, r3, lr, r1
   d5c0c:	4632      	mov	r2, r6
   d5c0e:	463b      	mov	r3, r7
   d5c10:	f007 faae 	bl	dd170 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5c14:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d5c18:	134d      	asrs	r5, r1, #13
   d5c1a:	0b46      	lsrs	r6, r0, #13
   d5c1c:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d5c20:	fb02 f705 	mul.w	r7, r2, r5
   d5c24:	17d3      	asrs	r3, r2, #31
   d5c26:	fb06 7703 	mla	r7, r6, r3, r7
   d5c2a:	fba2 2306 	umull	r2, r3, r2, r6
   d5c2e:	443b      	add	r3, r7
   d5c30:	4355      	muls	r5, r2
   d5c32:	fb06 5503 	mla	r5, r6, r3, r5
   d5c36:	fba2 2306 	umull	r2, r3, r2, r6
   d5c3a:	442b      	add	r3, r5
   d5c3c:	0e55      	lsrs	r5, r2, #25
   d5c3e:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5c42:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5c46:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   d5c4a:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5c4c:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5c50:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5c54:	17d3      	asrs	r3, r2, #31
   d5c56:	4351      	muls	r1, r2
   d5c58:	fb00 1103 	mla	r1, r0, r3, r1
   d5c5c:	fba2 2300 	umull	r2, r3, r2, r0
   d5c60:	440b      	add	r3, r1
   d5c62:	0cd1      	lsrs	r1, r2, #19
   d5c64:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5c68:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5c6a:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5c6e:	eb46 0300 	adc.w	r3, r6, r0
   d5c72:	0a2a      	lsrs	r2, r5, #8
   d5c74:	17e5      	asrs	r5, r4, #31
   d5c76:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d5c7a:	1219      	asrs	r1, r3, #8
   d5c7c:	0120      	lsls	r0, r4, #4
   d5c7e:	012b      	lsls	r3, r5, #4
   d5c80:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d5c84:	1880      	adds	r0, r0, r2
   d5c86:	eb43 0101 	adc.w	r1, r3, r1
   d5c8a:	f007 fa33 	bl	dd0f4 <__aeabi_l2f>
   d5c8e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5cac <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d5c92:	ee07 0a90 	vmov	s15, r0
   d5c96:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d5c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d5c9e:	ed9f 0a04 	vldr	s0, [pc, #16]	; d5cb0 <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d5ca2:	e7fa      	b.n	d5c9a <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d5ca4:	ed9f 0a03 	vldr	s0, [pc, #12]	; d5cb4 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d5ca8:	e7f7      	b.n	d5c9a <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d5caa:	bf00      	nop
   d5cac:	3b800000 	.word	0x3b800000
   d5cb0:	7fc00000 	.word	0x7fc00000
   d5cb4:	00000000 	.word	0x00000000

000d5cb8 <_ZN15Adafruit_BME28012readAltitudeEf>:
{
   d5cb8:	b508      	push	{r3, lr}
   d5cba:	ed2d 8b02 	vpush	{d8}
   d5cbe:	eeb0 8a40 	vmov.f32	s16, s0
    float atmospheric = readPressure() / 100.0F;
   d5cc2:	f7ff ff1f 	bl	d5b04 <_ZN15Adafruit_BME28012readPressureEv>
   d5cc6:	ed9f 7a16 	vldr	s14, [pc, #88]	; d5d20 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d5cca:	eec0 7a07 	vdiv.f32	s15, s0, s14
      return pow(__type(__x), __type(__y));
   d5cce:	eec7 7a88 	vdiv.f32	s15, s15, s16
   d5cd2:	ee17 0a90 	vmov	r0, s15
   d5cd6:	f006 fd9d 	bl	dc814 <__aeabi_f2d>
   d5cda:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d5d10 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d5cde:	ec41 0b10 	vmov	d0, r0, r1
   d5ce2:	f004 f859 	bl	d9d98 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d5ce6:	490f      	ldr	r1, [pc, #60]	; (d5d24 <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d5ce8:	ec53 2b10 	vmov	r2, r3, d0
   d5cec:	2000      	movs	r0, #0
   d5cee:	f006 fc31 	bl	dc554 <__aeabi_dsub>
   d5cf2:	a309      	add	r3, pc, #36	; (adr r3, d5d18 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d5cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5cf8:	f006 fde4 	bl	dc8c4 <__aeabi_dmul>
   d5cfc:	f007 f8da 	bl	dceb4 <__aeabi_d2f>
}
   d5d00:	ecbd 8b02 	vpop	{d8}
   d5d04:	ee00 0a10 	vmov	s0, r0
   d5d08:	bd08      	pop	{r3, pc}
   d5d0a:	bf00      	nop
   d5d0c:	f3af 8000 	nop.w
   d5d10:	1a36e2eb 	.word	0x1a36e2eb
   d5d14:	3fc85bc0 	.word	0x3fc85bc0
   d5d18:	00000000 	.word	0x00000000
   d5d1c:	40e5a540 	.word	0x40e5a540
   d5d20:	42c80000 	.word	0x42c80000
   d5d24:	3ff00000 	.word	0x3ff00000

000d5d28 <_ZN15Adafruit_BME2806read16Eh>:
{
   d5d28:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5d2a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5d2e:	3301      	adds	r3, #1
{
   d5d30:	b085      	sub	sp, #20
   d5d32:	4604      	mov	r4, r0
   d5d34:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5d36:	d11f      	bne.n	d5d78 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5d38:	7901      	ldrb	r1, [r0, #4]
   d5d3a:	6800      	ldr	r0, [r0, #0]
   d5d3c:	f003 fdf0 	bl	d9920 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5d40:	6820      	ldr	r0, [r4, #0]
   d5d42:	6803      	ldr	r3, [r0, #0]
   d5d44:	4629      	mov	r1, r5
   d5d46:	689b      	ldr	r3, [r3, #8]
   d5d48:	4798      	blx	r3
        _wire -> endTransmission();
   d5d4a:	6820      	ldr	r0, [r4, #0]
   d5d4c:	f003 fdf0 	bl	d9930 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d5d50:	7921      	ldrb	r1, [r4, #4]
   d5d52:	6820      	ldr	r0, [r4, #0]
   d5d54:	2202      	movs	r2, #2
   d5d56:	f003 fde0 	bl	d991a <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d5d5a:	6820      	ldr	r0, [r4, #0]
   d5d5c:	6803      	ldr	r3, [r0, #0]
   d5d5e:	695b      	ldr	r3, [r3, #20]
   d5d60:	4798      	blx	r3
   d5d62:	4605      	mov	r5, r0
   d5d64:	6820      	ldr	r0, [r4, #0]
   d5d66:	6803      	ldr	r3, [r0, #0]
   d5d68:	695b      	ldr	r3, [r3, #20]
   d5d6a:	4798      	blx	r3
   d5d6c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5d70:	b285      	uxth	r5, r0
}
   d5d72:	4628      	mov	r0, r5
   d5d74:	b005      	add	sp, #20
   d5d76:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5d78:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5d7c:	3301      	adds	r3, #1
   d5d7e:	d10c      	bne.n	d5d9a <_ZN15Adafruit_BME2806read16Eh+0x72>
   d5d80:	4b18      	ldr	r3, [pc, #96]	; (d5de4 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d5d82:	9300      	str	r3, [sp, #0]
   d5d84:	2300      	movs	r3, #0
   d5d86:	f88d 3004 	strb.w	r3, [sp, #4]
   d5d8a:	4b17      	ldr	r3, [pc, #92]	; (d5de8 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d5d8c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5d8e:	4668      	mov	r0, sp
   d5d90:	2301      	movs	r3, #1
   d5d92:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5d96:	f7ff fe12 	bl	d59be <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5d9a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5d9e:	2100      	movs	r1, #0
   d5da0:	b280      	uxth	r0, r0
   d5da2:	f003 fec6 	bl	d9b32 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5da6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5daa:	4620      	mov	r0, r4
   d5dac:	f7ff fdca 	bl	d5944 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5db0:	2100      	movs	r1, #0
   d5db2:	4620      	mov	r0, r4
   d5db4:	f7ff fdc6 	bl	d5944 <_ZN15Adafruit_BME2807spixferEh>
   d5db8:	2100      	movs	r1, #0
   d5dba:	4605      	mov	r5, r0
   d5dbc:	4620      	mov	r0, r4
   d5dbe:	f7ff fdc1 	bl	d5944 <_ZN15Adafruit_BME2807spixferEh>
   d5dc2:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5dc6:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d5dc8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5dcc:	2101      	movs	r1, #1
   d5dce:	b280      	uxth	r0, r0
   d5dd0:	f003 feaf 	bl	d9b32 <digitalWrite>
        if (_sck == -1)
   d5dd4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5dd8:	3301      	adds	r3, #1
   d5dda:	d1ca      	bne.n	d5d72 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d5ddc:	f7ff fde8 	bl	d59b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5de0:	e7c7      	b.n	d5d72 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d5de2:	bf00      	nop
   d5de4:	000ddeac 	.word	0x000ddeac
   d5de8:	0007a120 	.word	0x0007a120

000d5dec <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d5dec:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d5dee:	f7ff ff9b 	bl	d5d28 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d5df2:	ba40      	rev16	r0, r0
}
   d5df4:	b280      	uxth	r0, r0
   d5df6:	bd08      	pop	{r3, pc}

000d5df8 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
   d5df8:	b538      	push	{r3, r4, r5, lr}
   d5dfa:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5dfc:	f7ff fe54 	bl	d5aa8 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d5e00:	21fd      	movs	r1, #253	; 0xfd
   d5e02:	4620      	mov	r0, r4
   d5e04:	f7ff ff90 	bl	d5d28 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d5e08:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d5e0c:	d038      	beq.n	d5e80 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5e0e:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5e12:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5e14:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5e18:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5e1a:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5e1e:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d5e22:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5e26:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d5e2a:	13d9      	asrs	r1, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5e2c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d5e30:	4353      	muls	r3, r2
   d5e32:	12db      	asrs	r3, r3, #11
   d5e34:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d5e38:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d5e3c:	4353      	muls	r3, r2
   d5e3e:	129b      	asrs	r3, r3, #10
   d5e40:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5e42:	129b      	asrs	r3, r3, #10
   d5e44:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d5e48:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d5e4c:	4353      	muls	r3, r2
   d5e4e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d5e52:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5e54:	434b      	muls	r3, r1
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5e56:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d5e58:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5e5c:	4352      	muls	r2, r2
   d5e5e:	11d2      	asrs	r2, r2, #7
   d5e60:	434a      	muls	r2, r1
   d5e62:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d5e66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d5e6a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d5e6e:	bfa8      	it	ge
   d5e70:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d5e74:	131b      	asrs	r3, r3, #12
   d5e76:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d5e7a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d5e7e:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d5e80:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5e88 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d5e84:	e7fb      	b.n	d5e7e <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d5e86:	bf00      	nop
   d5e88:	7fc00000 	.word	0x7fc00000

000d5e8c <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d5e8c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5e8e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5e92:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d5e94:	b085      	sub	sp, #20
   d5e96:	4604      	mov	r4, r0
   d5e98:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5e9a:	d118      	bne.n	d5ece <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5e9c:	7901      	ldrb	r1, [r0, #4]
   d5e9e:	6800      	ldr	r0, [r0, #0]
   d5ea0:	f003 fd3e 	bl	d9920 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5ea4:	6820      	ldr	r0, [r4, #0]
   d5ea6:	6803      	ldr	r3, [r0, #0]
   d5ea8:	4629      	mov	r1, r5
   d5eaa:	689b      	ldr	r3, [r3, #8]
   d5eac:	4798      	blx	r3
        _wire -> endTransmission();
   d5eae:	6820      	ldr	r0, [r4, #0]
   d5eb0:	f003 fd3e 	bl	d9930 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d5eb4:	7921      	ldrb	r1, [r4, #4]
   d5eb6:	6820      	ldr	r0, [r4, #0]
   d5eb8:	2201      	movs	r2, #1
   d5eba:	f003 fd2e 	bl	d991a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d5ebe:	6820      	ldr	r0, [r4, #0]
   d5ec0:	6803      	ldr	r3, [r0, #0]
   d5ec2:	695b      	ldr	r3, [r3, #20]
   d5ec4:	4798      	blx	r3
   d5ec6:	b2c5      	uxtb	r5, r0
}
   d5ec8:	4628      	mov	r0, r5
   d5eca:	b005      	add	sp, #20
   d5ecc:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5ece:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5ed2:	3301      	adds	r3, #1
   d5ed4:	d10c      	bne.n	d5ef0 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d5ed6:	4b15      	ldr	r3, [pc, #84]	; (d5f2c <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d5ed8:	9300      	str	r3, [sp, #0]
   d5eda:	2300      	movs	r3, #0
   d5edc:	f88d 3004 	strb.w	r3, [sp, #4]
   d5ee0:	4b13      	ldr	r3, [pc, #76]	; (d5f30 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d5ee2:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5ee4:	4668      	mov	r0, sp
   d5ee6:	2301      	movs	r3, #1
   d5ee8:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5eec:	f7ff fd67 	bl	d59be <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5ef0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5ef4:	2100      	movs	r1, #0
   d5ef6:	b280      	uxth	r0, r0
   d5ef8:	f003 fe1b 	bl	d9b32 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5efc:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5f00:	4620      	mov	r0, r4
   d5f02:	f7ff fd1f 	bl	d5944 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5f06:	2100      	movs	r1, #0
   d5f08:	4620      	mov	r0, r4
   d5f0a:	f7ff fd1b 	bl	d5944 <_ZN15Adafruit_BME2807spixferEh>
   d5f0e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d5f10:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5f14:	2101      	movs	r1, #1
   d5f16:	b280      	uxth	r0, r0
   d5f18:	f003 fe0b 	bl	d9b32 <digitalWrite>
        if (_sck == -1)
   d5f1c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5f20:	3301      	adds	r3, #1
   d5f22:	d1d1      	bne.n	d5ec8 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d5f24:	f7ff fd44 	bl	d59b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5f28:	e7ce      	b.n	d5ec8 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d5f2a:	bf00      	nop
   d5f2c:	000ddeac 	.word	0x000ddeac
   d5f30:	0007a120 	.word	0x0007a120

000d5f34 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d5f34:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d5f36:	21f3      	movs	r1, #243	; 0xf3
   d5f38:	f7ff ffa8 	bl	d5e8c <_ZN15Adafruit_BME2805read8Eh>
}
   d5f3c:	f000 0001 	and.w	r0, r0, #1
   d5f40:	bd08      	pop	{r3, pc}

000d5f42 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d5f42:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5f44:	2188      	movs	r1, #136	; 0x88
{
   d5f46:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5f48:	f7ff ff50 	bl	d5dec <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5f4c:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5f4e:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d5f50:	4620      	mov	r0, r4
   d5f52:	f7ff ff4b 	bl	d5dec <_ZN15Adafruit_BME2809read16_LEEh>
   d5f56:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d5f58:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d5f5a:	4620      	mov	r0, r4
   d5f5c:	f7ff ff46 	bl	d5dec <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5f60:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d5f62:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5f64:	4620      	mov	r0, r4
   d5f66:	f7ff ff41 	bl	d5dec <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5f6a:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5f6c:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d5f6e:	4620      	mov	r0, r4
   d5f70:	f7ff ff3c 	bl	d5dec <_ZN15Adafruit_BME2809read16_LEEh>
   d5f74:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d5f76:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d5f78:	4620      	mov	r0, r4
   d5f7a:	f7ff ff37 	bl	d5dec <_ZN15Adafruit_BME2809read16_LEEh>
   d5f7e:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5f80:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d5f82:	4620      	mov	r0, r4
   d5f84:	f7ff ff32 	bl	d5dec <_ZN15Adafruit_BME2809read16_LEEh>
   d5f88:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d5f8a:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d5f8c:	4620      	mov	r0, r4
   d5f8e:	f7ff ff2d 	bl	d5dec <_ZN15Adafruit_BME2809read16_LEEh>
   d5f92:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d5f94:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d5f96:	4620      	mov	r0, r4
   d5f98:	f7ff ff28 	bl	d5dec <_ZN15Adafruit_BME2809read16_LEEh>
   d5f9c:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d5f9e:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d5fa0:	4620      	mov	r0, r4
   d5fa2:	f7ff ff23 	bl	d5dec <_ZN15Adafruit_BME2809read16_LEEh>
   d5fa6:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d5fa8:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d5faa:	4620      	mov	r0, r4
   d5fac:	f7ff ff1e 	bl	d5dec <_ZN15Adafruit_BME2809read16_LEEh>
   d5fb0:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d5fb2:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d5fb4:	4620      	mov	r0, r4
   d5fb6:	f7ff ff19 	bl	d5dec <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5fba:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d5fbc:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5fbe:	4620      	mov	r0, r4
   d5fc0:	f7ff ff64 	bl	d5e8c <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d5fc4:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5fc6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d5fca:	4620      	mov	r0, r4
   d5fcc:	f7ff ff0e 	bl	d5dec <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5fd0:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d5fd2:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	f7ff ff59 	bl	d5e8c <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5fda:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5fdc:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5fe0:	4620      	mov	r0, r4
   d5fe2:	f7ff ff53 	bl	d5e8c <_ZN15Adafruit_BME2805read8Eh>
   d5fe6:	21e5      	movs	r1, #229	; 0xe5
   d5fe8:	4605      	mov	r5, r0
   d5fea:	4620      	mov	r0, r4
   d5fec:	f7ff ff4e 	bl	d5e8c <_ZN15Adafruit_BME2805read8Eh>
   d5ff0:	f000 030f 	and.w	r3, r0, #15
   d5ff4:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d5ff8:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d5ffa:	21e6      	movs	r1, #230	; 0xe6
   d5ffc:	4620      	mov	r0, r4
   d5ffe:	f7ff ff45 	bl	d5e8c <_ZN15Adafruit_BME2805read8Eh>
   d6002:	21e5      	movs	r1, #229	; 0xe5
   d6004:	4605      	mov	r5, r0
   d6006:	4620      	mov	r0, r4
   d6008:	f7ff ff40 	bl	d5e8c <_ZN15Adafruit_BME2805read8Eh>
   d600c:	1103      	asrs	r3, r0, #4
   d600e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d6012:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d6014:	21e7      	movs	r1, #231	; 0xe7
   d6016:	4620      	mov	r0, r4
   d6018:	f7ff ff38 	bl	d5e8c <_ZN15Adafruit_BME2805read8Eh>
   d601c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d6020:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6024 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d6024:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d6026:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d602a:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d602c:	4604      	mov	r4, r0
   d602e:	460e      	mov	r6, r1
   d6030:	4615      	mov	r5, r2
    if (_cs == -1) {
   d6032:	d112      	bne.n	d605a <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d6034:	7901      	ldrb	r1, [r0, #4]
   d6036:	6800      	ldr	r0, [r0, #0]
   d6038:	f003 fc72 	bl	d9920 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d603c:	6820      	ldr	r0, [r4, #0]
   d603e:	6803      	ldr	r3, [r0, #0]
   d6040:	4631      	mov	r1, r6
   d6042:	689b      	ldr	r3, [r3, #8]
   d6044:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d6046:	6820      	ldr	r0, [r4, #0]
   d6048:	6803      	ldr	r3, [r0, #0]
   d604a:	4629      	mov	r1, r5
   d604c:	689b      	ldr	r3, [r3, #8]
   d604e:	4798      	blx	r3
        _wire -> endTransmission();
   d6050:	6820      	ldr	r0, [r4, #0]
   d6052:	f003 fc6d 	bl	d9930 <_ZN7TwoWire15endTransmissionEv>
}
   d6056:	b004      	add	sp, #16
   d6058:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d605a:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d605e:	3301      	adds	r3, #1
   d6060:	d10c      	bne.n	d607c <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d6062:	4b14      	ldr	r3, [pc, #80]	; (d60b4 <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d6064:	9300      	str	r3, [sp, #0]
   d6066:	2300      	movs	r3, #0
   d6068:	f88d 3004 	strb.w	r3, [sp, #4]
   d606c:	4b12      	ldr	r3, [pc, #72]	; (d60b8 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d606e:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d6070:	4668      	mov	r0, sp
   d6072:	2301      	movs	r3, #1
   d6074:	f8ad 300c 	strh.w	r3, [sp, #12]
   d6078:	f7ff fca1 	bl	d59be <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d607c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6080:	2100      	movs	r1, #0
   d6082:	b280      	uxth	r0, r0
   d6084:	f003 fd55 	bl	d9b32 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d6088:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d608c:	4620      	mov	r0, r4
   d608e:	f7ff fc59 	bl	d5944 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d6092:	4629      	mov	r1, r5
   d6094:	4620      	mov	r0, r4
   d6096:	f7ff fc55 	bl	d5944 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d609a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d609e:	2101      	movs	r1, #1
   d60a0:	b280      	uxth	r0, r0
   d60a2:	f003 fd46 	bl	d9b32 <digitalWrite>
    if (_sck == -1)
   d60a6:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d60aa:	3301      	adds	r3, #1
   d60ac:	d1d3      	bne.n	d6056 <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d60ae:	f7ff fc7f 	bl	d59b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d60b2:	e7d0      	b.n	d6056 <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d60b4:	000ddeac 	.word	0x000ddeac
   d60b8:	0007a120 	.word	0x0007a120

000d60bc <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d60bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d60be:	00db      	lsls	r3, r3, #3
   d60c0:	f002 0207 	and.w	r2, r2, #7
   d60c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d60c8:	4313      	orrs	r3, r2
   d60ca:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d60ce:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d60d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d60d6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d60da:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d60de:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d60e2:	f366 1347 	bfi	r3, r6, #5, #3
   d60e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d60ea:	00ed      	lsls	r5, r5, #3
   d60ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d60f0:	f007 0707 	and.w	r7, r7, #7
   d60f4:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d60f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d60fc:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d60fe:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d6100:	431d      	orrs	r5, r3
   d6102:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d6106:	f006 0207 	and.w	r2, r6, #7
   d610a:	21f2      	movs	r1, #242	; 0xf2
   d610c:	f7ff ff8a 	bl	d6024 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d6110:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d6114:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d6118:	f002 0107 	and.w	r1, r2, #7
   d611c:	009b      	lsls	r3, r3, #2
   d611e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d6122:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d6126:	4620      	mov	r0, r4
   d6128:	21f5      	movs	r1, #245	; 0xf5
   d612a:	f7ff ff7b 	bl	d6024 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d612e:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d6132:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d6136:	f002 0107 	and.w	r1, r2, #7
   d613a:	009b      	lsls	r3, r3, #2
   d613c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d6140:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d6144:	4620      	mov	r0, r4
   d6146:	21f4      	movs	r1, #244	; 0xf4
}
   d6148:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d614c:	f7ff bf6a 	b.w	d6024 <_ZN15Adafruit_BME2806write8Ehh>

000d6150 <_ZN15Adafruit_BME2804initEv>:
{
   d6150:	b530      	push	{r4, r5, lr}
   d6152:	4604      	mov	r4, r0
    if (_cs == -1) {
   d6154:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d6158:	1c42      	adds	r2, r0, #1
{
   d615a:	b085      	sub	sp, #20
    if (_cs == -1) {
   d615c:	d119      	bne.n	d6192 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d615e:	6820      	ldr	r0, [r4, #0]
   d6160:	f003 fbac 	bl	d98bc <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d6164:	21d0      	movs	r1, #208	; 0xd0
   d6166:	4620      	mov	r0, r4
   d6168:	f7ff fe90 	bl	d5e8c <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d616c:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d616e:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d6170:	d145      	bne.n	d61fe <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d6172:	4620      	mov	r0, r4
   d6174:	22b6      	movs	r2, #182	; 0xb6
   d6176:	21e0      	movs	r1, #224	; 0xe0
   d6178:	f7ff ff54 	bl	d6024 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d617c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d6180:	f002 fdfc 	bl	d8d7c <delay>
    while (isReadingCalibration())
   d6184:	4620      	mov	r0, r4
   d6186:	f7ff fed5 	bl	d5f34 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d618a:	4605      	mov	r5, r0
   d618c:	b328      	cbz	r0, d61da <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d618e:	2064      	movs	r0, #100	; 0x64
   d6190:	e7f6      	b.n	d6180 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d6192:	2101      	movs	r1, #1
   d6194:	b280      	uxth	r0, r0
   d6196:	f003 fccc 	bl	d9b32 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d619a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d619e:	2101      	movs	r1, #1
   d61a0:	b280      	uxth	r0, r0
   d61a2:	f003 fcb5 	bl	d9b10 <pinMode>
        if (_sck == -1) {
   d61a6:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d61aa:	1c43      	adds	r3, r0, #1
   d61ac:	d104      	bne.n	d61b8 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d61ae:	f7ff fbad 	bl	d590c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d61b2:	f002 f9ef 	bl	d8594 <_ZN8SPIClass5beginEv>
    }
   d61b6:	e7d5      	b.n	d6164 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d61b8:	2101      	movs	r1, #1
   d61ba:	b280      	uxth	r0, r0
   d61bc:	f003 fca8 	bl	d9b10 <pinMode>
            pinMode(_mosi, OUTPUT);
   d61c0:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d61c4:	2101      	movs	r1, #1
   d61c6:	b280      	uxth	r0, r0
   d61c8:	f003 fca2 	bl	d9b10 <pinMode>
            pinMode(_miso, INPUT);
   d61cc:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d61d0:	2100      	movs	r1, #0
   d61d2:	b280      	uxth	r0, r0
   d61d4:	f003 fc9c 	bl	d9b10 <pinMode>
   d61d8:	e7c4      	b.n	d6164 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d61da:	4620      	mov	r0, r4
   d61dc:	f7ff feb1 	bl	d5f42 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d61e0:	2305      	movs	r3, #5
   d61e2:	9300      	str	r3, [sp, #0]
   d61e4:	461a      	mov	r2, r3
   d61e6:	2103      	movs	r1, #3
   d61e8:	4620      	mov	r0, r4
   d61ea:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d61ee:	f7ff ff65 	bl	d60bc <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d61f2:	2064      	movs	r0, #100	; 0x64
   d61f4:	f002 fdc2 	bl	d8d7c <delay>
   d61f8:	2001      	movs	r0, #1
}
   d61fa:	b005      	add	sp, #20
   d61fc:	bd30      	pop	{r4, r5, pc}
        return false;
   d61fe:	2000      	movs	r0, #0
   d6200:	e7fb      	b.n	d61fa <_ZN15Adafruit_BME2804initEv+0xaa>

000d6202 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d6202:	2377      	movs	r3, #119	; 0x77
{
   d6204:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d6206:	7103      	strb	r3, [r0, #4]
{
   d6208:	4604      	mov	r4, r0
	_wire = &Wire;
   d620a:	f003 fd05 	bl	d9c18 <_Z19__fetch_global_Wirev>
   d620e:	6020      	str	r0, [r4, #0]
	status = init();
   d6210:	4620      	mov	r0, r4
   d6212:	f7ff ff9d 	bl	d6150 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d6216:	b930      	cbnz	r0, d6226 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d6218:	2376      	movs	r3, #118	; 0x76
   d621a:	7123      	strb	r3, [r4, #4]
 		status = init();
   d621c:	4620      	mov	r0, r4
}
   d621e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d6222:	f7ff bf95 	b.w	d6150 <_ZN15Adafruit_BME2804initEv>
}
   d6226:	bd10      	pop	{r4, pc}

000d6228 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   d6228:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   d622a:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
   d622c:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   d6230:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   d6232:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   d6236:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   d623a:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   d623c:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   d623e:	7382      	strb	r2, [r0, #14]
  _width = width;
   d6240:	7303      	strb	r3, [r0, #12]
}
   d6242:	bd30      	pop	{r4, r5, pc}

000d6244 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   d6244:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6246:	4603      	mov	r3, r0
   d6248:	b085      	sub	sp, #20

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   d624a:	8940      	ldrh	r0, [r0, #10]
                           (uint8_t)(_address >> 8)};
   d624c:	f8ad 000c 	strh.w	r0, [sp, #12]
   d6250:	ea4f 2e10 	mov.w	lr, r0, lsr #8

  if (_i2cdevice) {
   d6254:	6818      	ldr	r0, [r3, #0]
                           (uint8_t)(_address >> 8)};
   d6256:	7a9c      	ldrb	r4, [r3, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   d6258:	460e      	mov	r6, r1
   d625a:	4617      	mov	r7, r2
  if (_i2cdevice) {
   d625c:	b140      	cbz	r0, d6270 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2c>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   d625e:	7b5b      	ldrb	r3, [r3, #13]
   d6260:	9301      	str	r3, [sp, #4]
   d6262:	ab03      	add	r3, sp, #12
   d6264:	9300      	str	r3, [sp, #0]
   d6266:	2301      	movs	r3, #1
   d6268:	f000 fa36 	bl	d66d8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   d626c:	b005      	add	sp, #20
   d626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   d6270:	6858      	ldr	r0, [r3, #4]
   d6272:	2800      	cmp	r0, #0
   d6274:	d0fa      	beq.n	d626c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   d6276:	f893 c008 	ldrb.w	ip, [r3, #8]
   d627a:	7b5d      	ldrb	r5, [r3, #13]
   d627c:	f1bc 0f03 	cmp.w	ip, #3
   d6280:	d10b      	bne.n	d629a <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   d6282:	f02e 0e01 	bic.w	lr, lr, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   d6286:	3501      	adds	r5, #1
      addrbuffer[0] =
   d6288:	f88d e00c 	strb.w	lr, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   d628c:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   d6290:	9500      	str	r5, [sp, #0]
   d6292:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   d6294:	f000 f98f 	bl	d65b6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d6298:	e7e8      	b.n	d626c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   d629a:	f1bc 0f00 	cmp.w	ip, #0
   d629e:	d108      	bne.n	d62b2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6e>
      addrbuffer[0] &= ~0x80;
   d62a0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   d62a4:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   d62a8:	9500      	str	r5, [sp, #0]
   d62aa:	ab03      	add	r3, sp, #12
   d62ac:	463a      	mov	r2, r7
   d62ae:	4631      	mov	r1, r6
   d62b0:	e7f0      	b.n	d6294 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x50>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   d62b2:	f1bc 0f02 	cmp.w	ip, #2
   d62b6:	d102      	bne.n	d62be <_ZN23Adafruit_BusIO_Register5writeEPhh+0x7a>
      addrbuffer[0] |= 0x80;
   d62b8:	f064 047f 	orn	r4, r4, #127	; 0x7f
   d62bc:	e7f2      	b.n	d62a4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x60>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   d62be:	f1bc 0f01 	cmp.w	ip, #1
      addrbuffer[0] &= ~0x80;
   d62c2:	bf01      	itttt	eq
   d62c4:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   d62c8:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   d62cc:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   d62d0:	f88d 300c 	strbeq.w	r3, [sp, #12]
   d62d4:	e7e8      	b.n	d62a8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x64>

000d62d6 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   d62d6:	b4f0      	push	{r4, r5, r6, r7}
   d62d8:	460b      	mov	r3, r1
  if (numbytes == 0) {
   d62da:	b902      	cbnz	r2, d62de <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   d62dc:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   d62de:	2a04      	cmp	r2, #4
   d62e0:	d814      	bhi.n	d630c <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   d62e2:	f100 050f 	add.w	r5, r0, #15
   d62e6:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   d62e8:	1884      	adds	r4, r0, r2
   d62ea:	4629      	mov	r1, r5
   d62ec:	4284      	cmp	r4, r0
   d62ee:	d009      	beq.n	d6304 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   d62f0:	7b87      	ldrb	r7, [r0, #14]
   d62f2:	b2de      	uxtb	r6, r3
   d62f4:	b927      	cbnz	r7, d6300 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   d62f6:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   d62f8:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   d62fa:	3501      	adds	r5, #1
   d62fc:	3c01      	subs	r4, #1
   d62fe:	e7f5      	b.n	d62ec <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   d6300:	73a6      	strb	r6, [r4, #14]
   d6302:	e7f9      	b.n	d62f8 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   d6304:	4620      	mov	r0, r4
}
   d6306:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   d6308:	f7ff bf9c 	b.w	d6244 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   d630c:	2000      	movs	r0, #0
   d630e:	bcf0      	pop	{r4, r5, r6, r7}
   d6310:	4770      	bx	lr

000d6312 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   d6312:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6314:	4604      	mov	r4, r0
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
                           (uint8_t)(_address >> 8)};
   d6316:	7a85      	ldrb	r5, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   d6318:	460b      	mov	r3, r1
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   d631a:	8941      	ldrh	r1, [r0, #10]

  if (_i2cdevice) {
   d631c:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   d631e:	f8ad 100c 	strh.w	r1, [sp, #12]
   d6322:	0a0e      	lsrs	r6, r1, #8
  if (_i2cdevice) {
   d6324:	b140      	cbz	r0, d6338 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d6326:	2100      	movs	r1, #0
   d6328:	e9cd 2100 	strd	r2, r1, [sp]
   d632c:	a903      	add	r1, sp, #12
   d632e:	7b62      	ldrb	r2, [r4, #13]
   d6330:	f000 fa40 	bl	d67b4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   d6334:	b004      	add	sp, #16
   d6336:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   d6338:	6860      	ldr	r0, [r4, #4]
   d633a:	2800      	cmp	r0, #0
   d633c:	d0fa      	beq.n	d6334 <_ZN23Adafruit_BusIO_Register4readEPhh+0x22>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   d633e:	7a21      	ldrb	r1, [r4, #8]
   d6340:	7b64      	ldrb	r4, [r4, #13]
   d6342:	2903      	cmp	r1, #3
   d6344:	d10d      	bne.n	d6362 <_ZN23Adafruit_BusIO_Register4readEPhh+0x50>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   d6346:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   d634a:	21ff      	movs	r1, #255	; 0xff
   d634c:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   d6350:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   d6354:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   d6358:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d635a:	a903      	add	r1, sp, #12
   d635c:	f000 f95d 	bl	d661a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   d6360:	e7e8      	b.n	d6334 <_ZN23Adafruit_BusIO_Register4readEPhh+0x22>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   d6362:	b941      	cbnz	r1, d6376 <_ZN23Adafruit_BusIO_Register4readEPhh+0x64>
      addrbuffer[0] |= 0x80;
   d6364:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   d6368:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d636c:	21ff      	movs	r1, #255	; 0xff
   d636e:	e9cd 2100 	strd	r2, r1, [sp]
   d6372:	4622      	mov	r2, r4
   d6374:	e7f1      	b.n	d635a <_ZN23Adafruit_BusIO_Register4readEPhh+0x48>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   d6376:	2902      	cmp	r1, #2
   d6378:	d102      	bne.n	d6380 <_ZN23Adafruit_BusIO_Register4readEPhh+0x6e>
      addrbuffer[0] &= ~0x80;
   d637a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   d637e:	e7f3      	b.n	d6368 <_ZN23Adafruit_BusIO_Register4readEPhh+0x56>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   d6380:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   d6382:	bf02      	ittt	eq
   d6384:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   d6388:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   d638c:	f88d 100c 	strbeq.w	r1, [sp, #12]
   d6390:	e7ec      	b.n	d636c <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>

000d6392 <_ZN23Adafruit_BusIO_Register4readEPt>:
 *    @brief  Read 2 bytes of data from the register location
 *    @param  value Pointer to uint16_t variable to read into
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint16_t *value) {
   d6392:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, 2)) {
   d6394:	2202      	movs	r2, #2
bool Adafruit_BusIO_Register::read(uint16_t *value) {
   d6396:	460d      	mov	r5, r1
  if (!read(_buffer, 2)) {
   d6398:	f100 010f 	add.w	r1, r0, #15
bool Adafruit_BusIO_Register::read(uint16_t *value) {
   d639c:	4604      	mov	r4, r0
  if (!read(_buffer, 2)) {
   d639e:	f7ff ffb8 	bl	d6312 <_ZN23Adafruit_BusIO_Register4readEPhh>
   d63a2:	b138      	cbz	r0, d63b4 <_ZN23Adafruit_BusIO_Register4readEPt+0x22>
    return false;
  }

  if (_byteorder == LSBFIRST) {
   d63a4:	7ba3      	ldrb	r3, [r4, #14]
   d63a6:	b933      	cbnz	r3, d63b6 <_ZN23Adafruit_BusIO_Register4readEPt+0x24>
    *value = _buffer[1];
   d63a8:	7c23      	ldrb	r3, [r4, #16]
    *value <<= 8;
   d63aa:	021b      	lsls	r3, r3, #8
   d63ac:	802b      	strh	r3, [r5, #0]
    *value |= _buffer[0];
   d63ae:	7be2      	ldrb	r2, [r4, #15]
  } else {
    *value = _buffer[0];
    *value <<= 8;
    *value |= _buffer[1];
   d63b0:	4313      	orrs	r3, r2
   d63b2:	802b      	strh	r3, [r5, #0]
  }
  return true;
}
   d63b4:	bd38      	pop	{r3, r4, r5, pc}
    *value = _buffer[0];
   d63b6:	7be3      	ldrb	r3, [r4, #15]
    *value <<= 8;
   d63b8:	021b      	lsls	r3, r3, #8
   d63ba:	802b      	strh	r3, [r5, #0]
    *value |= _buffer[1];
   d63bc:	7c22      	ldrb	r2, [r4, #16]
   d63be:	e7f7      	b.n	d63b0 <_ZN23Adafruit_BusIO_Register4readEPt+0x1e>

000d63c0 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   d63c0:	b510      	push	{r4, lr}
   d63c2:	4604      	mov	r4, r0
  if (_spiSetting) {
   d63c4:	6840      	ldr	r0, [r0, #4]
   d63c6:	b110      	cbz	r0, d63ce <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   d63c8:	6803      	ldr	r3, [r0, #0]
   d63ca:	689b      	ldr	r3, [r3, #8]
   d63cc:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   d63ce:	4620      	mov	r0, r4
   d63d0:	bd10      	pop	{r4, pc}

000d63d2 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   d63d2:	b538      	push	{r3, r4, r5, lr}
   d63d4:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   d63d6:	f990 000e 	ldrsb.w	r0, [r0, #14]
   d63da:	2101      	movs	r1, #1
   d63dc:	b280      	uxth	r0, r0
   d63de:	f003 fb97 	bl	d9b10 <pinMode>
  digitalWrite(_cs, HIGH);
   d63e2:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d63e6:	2101      	movs	r1, #1
   d63e8:	b280      	uxth	r0, r0
   d63ea:	f003 fba2 	bl	d9b32 <digitalWrite>

  if (_spi) { // hardware SPI
   d63ee:	6825      	ldr	r5, [r4, #0]
   d63f0:	b135      	cbz	r5, d6400 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   d63f2:	4628      	mov	r0, r5
   d63f4:	f002 f8ce 	bl	d8594 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   d63f8:	2001      	movs	r0, #1
   d63fa:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   d63fe:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   d6400:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d6404:	2101      	movs	r1, #1
   d6406:	b280      	uxth	r0, r0
   d6408:	f003 fb82 	bl	d9b10 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   d640c:	7b63      	ldrb	r3, [r4, #13]
   d640e:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d6412:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   d6414:	bf94      	ite	ls
   d6416:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   d6418:	2101      	movhi	r1, #1
   d641a:	b280      	uxth	r0, r0
   d641c:	f003 fb89 	bl	d9b32 <digitalWrite>
    if (_mosi != -1) {
   d6420:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6424:	1c42      	adds	r2, r0, #1
   d6426:	d009      	beq.n	d643c <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   d6428:	2101      	movs	r1, #1
   d642a:	b280      	uxth	r0, r0
   d642c:	f003 fb70 	bl	d9b10 <pinMode>
      digitalWrite(_mosi, HIGH);
   d6430:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6434:	2101      	movs	r1, #1
   d6436:	b280      	uxth	r0, r0
   d6438:	f003 fb7b 	bl	d9b32 <digitalWrite>
    if (_miso != -1) {
   d643c:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d6440:	1c43      	adds	r3, r0, #1
   d6442:	d0d9      	beq.n	d63f8 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   d6444:	2100      	movs	r1, #0
   d6446:	b280      	uxth	r0, r0
   d6448:	f003 fb62 	bl	d9b10 <pinMode>
   d644c:	e7d4      	b.n	d63f8 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000d6450 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d6450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6454:	4604      	mov	r4, r0
  if (_spi) {
   d6456:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d6458:	b085      	sub	sp, #20
   d645a:	460d      	mov	r5, r1
  if (_spi) {
   d645c:	b140      	cbz	r0, d6470 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   d645e:	2300      	movs	r3, #0
   d6460:	9300      	str	r3, [sp, #0]
   d6462:	4613      	mov	r3, r2
   d6464:	460a      	mov	r2, r1
   d6466:	f002 f933 	bl	d86d0 <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   d646a:	b005      	add	sp, #20
   d646c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   d6470:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d6472:	68a0      	ldr	r0, [r4, #8]
   d6474:	4f48      	ldr	r7, [pc, #288]	; (d6598 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   d6476:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   d647a:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d647c:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   d647e:	bf0c      	ite	eq
   d6480:	f04f 0b01 	moveq.w	fp, #1
   d6484:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d6488:	ea1b 0f03 	tst.w	fp, r3
   d648c:	eb01 0302 	add.w	r3, r1, r2
   d6490:	bf0c      	ite	eq
   d6492:	f04f 0901 	moveq.w	r9, #1
   d6496:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d649a:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   d649c:	9303      	str	r3, [sp, #12]
   d649e:	9b03      	ldr	r3, [sp, #12]
   d64a0:	42ab      	cmp	r3, r5
   d64a2:	d0e2      	beq.n	d646a <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   d64a4:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   d64a8:	465e      	mov	r6, fp
    uint8_t reply = 0;
   d64aa:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   d64ae:	b117      	cbz	r7, d64b6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d64b0:	4638      	mov	r0, r7
   d64b2:	f001 fd8d 	bl	d7fd0 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   d64b6:	7b63      	ldrb	r3, [r4, #13]
   d64b8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d64bc:	d141      	bne.n	d6542 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d64be:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d64c2:	1c5a      	adds	r2, r3, #1
   d64c4:	d00f      	beq.n	d64e6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   d64c6:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d64ca:	bf14      	ite	ne
   d64cc:	2301      	movne	r3, #1
   d64ce:	2300      	moveq	r3, #0
   d64d0:	454b      	cmp	r3, r9
   d64d2:	d008      	beq.n	d64e6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
          if (towrite)
   d64d4:	6963      	ldr	r3, [r4, #20]
   d64d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d64d8:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   d64da:	2900      	cmp	r1, #0
   d64dc:	d02c      	beq.n	d6538 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   d64de:	4302      	orrs	r2, r0
   d64e0:	601a      	str	r2, [r3, #0]
   d64e2:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   d64e6:	69a1      	ldr	r1, [r4, #24]
   d64e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d64ea:	680a      	ldr	r2, [r1, #0]
   d64ec:	4313      	orrs	r3, r2
   d64ee:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d64f0:	b117      	cbz	r7, d64f8 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   d64f2:	4638      	mov	r0, r7
   d64f4:	f001 fd6c 	bl	d7fd0 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   d64f8:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d64fc:	3301      	adds	r3, #1
   d64fe:	d006      	beq.n	d650e <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   d6500:	69e3      	ldr	r3, [r4, #28]
   d6502:	681a      	ldr	r2, [r3, #0]
   d6504:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6506:	421a      	tst	r2, r3
            reply |= b;
   d6508:	bf18      	it	ne
   d650a:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   d650e:	69a1      	ldr	r1, [r4, #24]
   d6510:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6512:	680a      	ldr	r2, [r1, #0]
   d6514:	ea22 0303 	bic.w	r3, r2, r3
   d6518:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   d651a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d651e:	3301      	adds	r3, #1
        buffer[i] = reply;
   d6520:	bf18      	it	ne
   d6522:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   d6526:	7b23      	ldrb	r3, [r4, #12]
   d6528:	2b00      	cmp	r3, #0
   d652a:	d132      	bne.n	d6592 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   d652c:	0076      	lsls	r6, r6, #1
   d652e:	b2f6      	uxtb	r6, r6
   d6530:	2e00      	cmp	r6, #0
   d6532:	d1bc      	bne.n	d64ae <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   d6534:	3501      	adds	r5, #1
   d6536:	e7b2      	b.n	d649e <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   d6538:	ea22 0200 	bic.w	r2, r2, r0
   d653c:	601a      	str	r2, [r3, #0]
   d653e:	4689      	mov	r9, r1
   d6540:	e7d1      	b.n	d64e6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   d6542:	69a1      	ldr	r1, [r4, #24]
   d6544:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6546:	680a      	ldr	r2, [r1, #0]
   d6548:	4313      	orrs	r3, r2
   d654a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d654c:	b117      	cbz	r7, d6554 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   d654e:	4638      	mov	r0, r7
   d6550:	f001 fd3e 	bl	d7fd0 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   d6554:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d6558:	3301      	adds	r3, #1
   d655a:	d008      	beq.n	d656e <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
          if (send & b)
   d655c:	6963      	ldr	r3, [r4, #20]
   d655e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d6560:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   d6562:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   d6566:	bf14      	ite	ne
   d6568:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   d656a:	438a      	biceq	r2, r1
   d656c:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   d656e:	69a1      	ldr	r1, [r4, #24]
   d6570:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6572:	680a      	ldr	r2, [r1, #0]
   d6574:	ea22 0303 	bic.w	r3, r2, r3
   d6578:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   d657a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d657e:	3301      	adds	r3, #1
   d6580:	d0cb      	beq.n	d651a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   d6582:	69e3      	ldr	r3, [r4, #28]
   d6584:	681a      	ldr	r2, [r3, #0]
   d6586:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6588:	421a      	tst	r2, r3
            reply |= b;
   d658a:	bf18      	it	ne
   d658c:	ea46 0808 	orrne.w	r8, r6, r8
   d6590:	e7c3      	b.n	d651a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   d6592:	0876      	lsrs	r6, r6, #1
   d6594:	e7cc      	b.n	d6530 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   d6596:	bf00      	nop
   d6598:	0007a120 	.word	0x0007a120

000d659c <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   d659c:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   d659e:	2201      	movs	r2, #1
  uint8_t data = send;
   d65a0:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   d65a4:	f10d 0107 	add.w	r1, sp, #7
   d65a8:	f7ff ff52 	bl	d6450 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   d65ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d65b0:	b003      	add	sp, #12
   d65b2:	f85d fb04 	ldr.w	pc, [sp], #4

000d65b6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d65b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d65ba:	4604      	mov	r4, r0
  if (_spi) {
   d65bc:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d65be:	460e      	mov	r6, r1
   d65c0:	4617      	mov	r7, r2
   d65c2:	461d      	mov	r5, r3
  if (_spi) {
   d65c4:	b110      	cbz	r0, d65cc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   d65c6:	6861      	ldr	r1, [r4, #4]
   d65c8:	f002 f80e 	bl	d85e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d65cc:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d65d0:	2100      	movs	r1, #0
   d65d2:	b280      	uxth	r0, r0
   d65d4:	f003 faad 	bl	d9b32 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   d65d8:	9b06      	ldr	r3, [sp, #24]
   d65da:	eb05 0803 	add.w	r8, r5, r3
   d65de:	4545      	cmp	r5, r8
   d65e0:	d108      	bne.n	d65f4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   d65e2:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   d65e4:	42b7      	cmp	r7, r6
   d65e6:	d00b      	beq.n	d6600 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   d65e8:	f816 1b01 	ldrb.w	r1, [r6], #1
   d65ec:	4620      	mov	r0, r4
   d65ee:	f7ff ffd5 	bl	d659c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   d65f2:	e7f7      	b.n	d65e4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   d65f4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d65f8:	4620      	mov	r0, r4
   d65fa:	f7ff ffcf 	bl	d659c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   d65fe:	e7ee      	b.n	d65de <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   d6600:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d6604:	2101      	movs	r1, #1
   d6606:	b280      	uxth	r0, r0
   d6608:	f003 fa93 	bl	d9b32 <digitalWrite>

  if (_spi) {
   d660c:	6820      	ldr	r0, [r4, #0]
   d660e:	b108      	cbz	r0, d6614 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   d6610:	f001 ffd1 	bl	d85b6 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d6614:	2001      	movs	r0, #1
   d6616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d661a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   d661a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d661e:	4604      	mov	r4, r0
  if (_spi) {
   d6620:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   d6622:	f89d 801c 	ldrb.w	r8, [sp, #28]
   d6626:	460e      	mov	r6, r1
   d6628:	4617      	mov	r7, r2
   d662a:	461d      	mov	r5, r3
  if (_spi) {
   d662c:	b110      	cbz	r0, d6634 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   d662e:	6861      	ldr	r1, [r4, #4]
   d6630:	f001 ffda 	bl	d85e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d6634:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d6638:	2100      	movs	r1, #0
   d663a:	b280      	uxth	r0, r0
   d663c:	f003 fa79 	bl	d9b32 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   d6640:	4437      	add	r7, r6
   d6642:	42be      	cmp	r6, r7
   d6644:	d10a      	bne.n	d665c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   d6646:	9b06      	ldr	r3, [sp, #24]
   d6648:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   d664a:	42ae      	cmp	r6, r5
   d664c:	d00c      	beq.n	d6668 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   d664e:	4641      	mov	r1, r8
   d6650:	4620      	mov	r0, r4
   d6652:	f7ff ffa3 	bl	d659c <_ZN18Adafruit_SPIDevice8transferEh>
   d6656:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   d665a:	e7f6      	b.n	d664a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   d665c:	f816 1b01 	ldrb.w	r1, [r6], #1
   d6660:	4620      	mov	r0, r4
   d6662:	f7ff ff9b 	bl	d659c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   d6666:	e7ec      	b.n	d6642 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   d6668:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d666c:	2101      	movs	r1, #1
   d666e:	b280      	uxth	r0, r0
   d6670:	f003 fa5f 	bl	d9b32 <digitalWrite>

  if (_spi) {
   d6674:	6820      	ldr	r0, [r4, #0]
   d6676:	b108      	cbz	r0, d667c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   d6678:	f001 ff9d 	bl	d85b6 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   d667c:	2001      	movs	r0, #1
   d667e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6682 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d6682:	6042      	str	r2, [r0, #4]
  _begun = false;
   d6684:	2200      	movs	r2, #0
   d6686:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   d6688:	2220      	movs	r2, #32
  _addr = addr;
   d668a:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   d668c:	60c2      	str	r2, [r0, #12]
#endif
}
   d668e:	4770      	bx	lr

000d6690 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   d6690:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d6692:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d6694:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d6696:	b153      	cbz	r3, d66ae <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d6698:	7821      	ldrb	r1, [r4, #0]
   d669a:	6860      	ldr	r0, [r4, #4]
   d669c:	f003 f940 	bl	d9920 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   d66a0:	6860      	ldr	r0, [r4, #4]
   d66a2:	f003 f945 	bl	d9930 <_ZN7TwoWire15endTransmissionEv>
   d66a6:	fab0 f080 	clz	r0, r0
   d66aa:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   d66ac:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d66ae:	2101      	movs	r1, #1
   d66b0:	f000 f803 	bl	d66ba <_ZN18Adafruit_I2CDevice5beginEb>
   d66b4:	2800      	cmp	r0, #0
   d66b6:	d1ef      	bne.n	d6698 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d66b8:	e7f8      	b.n	d66ac <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d66ba <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d66ba:	b538      	push	{r3, r4, r5, lr}
   d66bc:	4604      	mov	r4, r0
  _wire->begin();
   d66be:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d66c0:	460d      	mov	r5, r1
  _wire->begin();
   d66c2:	f003 f8fb 	bl	d98bc <_ZN7TwoWire5beginEv>
  _begun = true;
   d66c6:	2001      	movs	r0, #1
   d66c8:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   d66ca:	b125      	cbz	r5, d66d6 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   d66cc:	4620      	mov	r0, r4
}
   d66ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   d66d2:	f7ff bfdd 	b.w	d6690 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   d66d6:	bd38      	pop	{r3, r4, r5, pc}

000d66d8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   d66d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d66dc:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d66e0:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   d66e2:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   d66e4:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   d66e6:	4432      	add	r2, r6
   d66e8:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   d66ea:	4604      	mov	r4, r0
   d66ec:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   d66ee:	d902      	bls.n	d66f6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d66f0:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   d66f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d66f6:	7801      	ldrb	r1, [r0, #0]
   d66f8:	6840      	ldr	r0, [r0, #4]
   d66fa:	f003 f911 	bl	d9920 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d66fe:	b97e      	cbnz	r6, d6720 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   d6700:	6860      	ldr	r0, [r4, #4]
   d6702:	6803      	ldr	r3, [r0, #0]
   d6704:	462a      	mov	r2, r5
   d6706:	68db      	ldr	r3, [r3, #12]
   d6708:	4641      	mov	r1, r8
   d670a:	4798      	blx	r3
   d670c:	4285      	cmp	r5, r0
   d670e:	d1ef      	bne.n	d66f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   d6710:	6860      	ldr	r0, [r4, #4]
   d6712:	4639      	mov	r1, r7
   d6714:	f003 f908 	bl	d9928 <_ZN7TwoWire15endTransmissionEh>
   d6718:	fab0 f080 	clz	r0, r0
   d671c:	0940      	lsrs	r0, r0, #5
   d671e:	e7e8      	b.n	d66f2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d6720:	f1b9 0f00 	cmp.w	r9, #0
   d6724:	d0ec      	beq.n	d6700 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
   d6726:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d6728:	6803      	ldr	r3, [r0, #0]
   d672a:	4632      	mov	r2, r6
   d672c:	68db      	ldr	r3, [r3, #12]
   d672e:	4649      	mov	r1, r9
   d6730:	4798      	blx	r3
   d6732:	42b0      	cmp	r0, r6
   d6734:	d1dc      	bne.n	d66f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   d6736:	e7e3      	b.n	d6700 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000d6738 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   d6738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d673c:	4615      	mov	r5, r2
   d673e:	4604      	mov	r4, r0
   d6740:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   d6742:	b2d2      	uxtb	r2, r2
   d6744:	7801      	ldrb	r1, [r0, #0]
   d6746:	6840      	ldr	r0, [r0, #4]
   d6748:	f003 f8d5 	bl	d98f6 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   d674c:	4285      	cmp	r5, r0
   d674e:	d10d      	bne.n	d676c <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   d6750:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   d6752:	fa1f f887 	uxth.w	r8, r7
   d6756:	45a8      	cmp	r8, r5
   d6758:	f107 0701 	add.w	r7, r7, #1
   d675c:	d209      	bcs.n	d6772 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   d675e:	6860      	ldr	r0, [r4, #4]
   d6760:	6803      	ldr	r3, [r0, #0]
   d6762:	695b      	ldr	r3, [r3, #20]
   d6764:	4798      	blx	r3
   d6766:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   d676a:	e7f2      	b.n	d6752 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   d676c:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d676e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6772:	2001      	movs	r0, #1
   d6774:	e7fb      	b.n	d676e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000d6776 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d6776:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d677a:	4607      	mov	r7, r0
   d677c:	4688      	mov	r8, r1
   d677e:	4616      	mov	r6, r2
   d6780:	4699      	mov	r9, r3
  size_t pos = 0;
   d6782:	2500      	movs	r5, #0
  while (pos < len) {
   d6784:	42b5      	cmp	r5, r6
   d6786:	d212      	bcs.n	d67ae <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   d6788:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   d678a:	1b74      	subs	r4, r6, r5
   d678c:	4294      	cmp	r4, r2
   d678e:	bf28      	it	cs
   d6790:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   d6792:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   d6794:	42ab      	cmp	r3, r5
   d6796:	bf94      	ite	ls
   d6798:	464b      	movls	r3, r9
   d679a:	2300      	movhi	r3, #0
   d679c:	4622      	mov	r2, r4
   d679e:	eb08 0105 	add.w	r1, r8, r5
   d67a2:	4638      	mov	r0, r7
   d67a4:	f7ff ffc8 	bl	d6738 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   d67a8:	b110      	cbz	r0, d67b0 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   d67aa:	4425      	add	r5, r4
  while (pos < len) {
   d67ac:	e7ea      	b.n	d6784 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   d67ae:	2001      	movs	r0, #1
}
   d67b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d67b4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   d67b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d67b6:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   d67b8:	2300      	movs	r3, #0
   d67ba:	e9cd 3300 	strd	r3, r3, [sp]
   d67be:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   d67c2:	9e06      	ldr	r6, [sp, #24]
   d67c4:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   d67c6:	f7ff ff87 	bl	d66d8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d67ca:	b140      	cbz	r0, d67de <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   d67cc:	2301      	movs	r3, #1
   d67ce:	4632      	mov	r2, r6
   d67d0:	4629      	mov	r1, r5
   d67d2:	4620      	mov	r0, r4
}
   d67d4:	b002      	add	sp, #8
   d67d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d67da:	f7ff bfcc 	b.w	d6776 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d67de:	b002      	add	sp, #8
   d67e0:	bd70      	pop	{r4, r5, r6, pc}

000d67e2 <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   d67e2:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d67e4:	6840      	ldr	r0, [r0, #4]
   d67e6:	f003 f865 	bl	d98b4 <_ZN7TwoWire8setSpeedEm>
  return true;
#else
  (void)desiredclk;
  return false;
#endif
}
   d67ea:	2001      	movs	r0, #1
   d67ec:	bd08      	pop	{r3, pc}

000d67ee <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d67ee:	4770      	bx	lr

000d67f0 <_ZN15Adafruit_BNO055D1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
   d67f0:	4770      	bx	lr
	...

000d67f4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 *          Sensor description
 */
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d67f4:	460b      	mov	r3, r1
   d67f6:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d67f8:	2228      	movs	r2, #40	; 0x28
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d67fa:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d67fc:	2100      	movs	r1, #0
   d67fe:	4618      	mov	r0, r3
   d6800:	f006 feb4 	bl	dd56c <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
   d6804:	4909      	ldr	r1, [pc, #36]	; (d682c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x38>)
   d6806:	220b      	movs	r2, #11
   d6808:	f006 ff01 	bl	dd60e <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d680c:	2200      	movs	r2, #0
  sensor->version = 1;
   d680e:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d6810:	72c2      	strb	r2, [r0, #11]
  sensor->version = 1;
   d6812:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _sensorID;
   d6814:	68e1      	ldr	r1, [r4, #12]
  sensor->type = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay = 0;
   d6816:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->max_value = 0.0F;
   d6818:	2200      	movs	r2, #0
  sensor->sensor_id = _sensorID;
   d681a:	6101      	str	r1, [r0, #16]
  sensor->max_value = 0.0F;
   d681c:	6182      	str	r2, [r0, #24]
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d681e:	2103      	movs	r1, #3
  sensor->min_value = 0.0F;
   d6820:	61c2      	str	r2, [r0, #28]
  sensor->resolution = 0.01F;
   d6822:	4a03      	ldr	r2, [pc, #12]	; (d6830 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x3c>)
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d6824:	6141      	str	r1, [r0, #20]
  sensor->resolution = 0.01F;
   d6826:	6202      	str	r2, [r0, #32]
}
   d6828:	bd10      	pop	{r4, pc}
   d682a:	bf00      	nop
   d682c:	000ddd81 	.word	0x000ddd81
   d6830:	3c23d70a 	.word	0x3c23d70a

000d6834 <_ZN15Adafruit_BNO055D0Ev>:
   d6834:	b510      	push	{r4, lr}
   d6836:	2114      	movs	r1, #20
   d6838:	4604      	mov	r4, r0
   d683a:	f003 fa11 	bl	d9c60 <_ZdlPvj>
   d683e:	4620      	mov	r0, r4
   d6840:	bd10      	pop	{r4, pc}
	...

000d6844 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d6844:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6846:	9301      	str	r3, [sp, #4]
                                 TwoWire *theWire) {
   d6848:	4b09      	ldr	r3, [pc, #36]	; (d6870 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x2c>)
   d684a:	6003      	str	r3, [r0, #0]
   d684c:	2300      	movs	r3, #0
  _sensorID = sensorID;
   d684e:	e9c0 3102 	strd	r3, r1, [r0, #8]
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d6852:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d6854:	2010      	movs	r0, #16
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d6856:	4616      	mov	r6, r2
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d6858:	f7fd fc1d 	bl	d4096 <_Znwj>
   d685c:	4605      	mov	r5, r0
   d685e:	b118      	cbz	r0, d6868 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x24>
   d6860:	9a01      	ldr	r2, [sp, #4]
   d6862:	4631      	mov	r1, r6
   d6864:	f7ff ff0d 	bl	d6682 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
}
   d6868:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d686a:	60a5      	str	r5, [r4, #8]
}
   d686c:	b002      	add	sp, #8
   d686e:	bd70      	pop	{r4, r5, r6, pc}
   d6870:	000ddec0 	.word	0x000ddec0

000d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value) {
   d6874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
  return i2c_dev->write(buffer, 2);
   d6876:	2300      	movs	r3, #0
   d6878:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
   d687c:	f88d 100c 	strb.w	r1, [sp, #12]
   d6880:	f88d 200d 	strb.w	r2, [sp, #13]
  return i2c_dev->write(buffer, 2);
   d6884:	2301      	movs	r3, #1
   d6886:	2202      	movs	r2, #2
   d6888:	a903      	add	r1, sp, #12
   d688a:	6880      	ldr	r0, [r0, #8]
   d688c:	f7ff ff24 	bl	d66d8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d6890:	b005      	add	sp, #20
   d6892:	f85d fb04 	ldr.w	pc, [sp], #4

000d6896 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
   d6896:	b508      	push	{r3, lr}
   d6898:	460a      	mov	r2, r1
  _mode = mode;
   d689a:	7401      	strb	r1, [r0, #16]
  write8(BNO055_OPR_MODE_ADDR, _mode);
   d689c:	213d      	movs	r1, #61	; 0x3d
   d689e:	f7ff ffe9 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
}
   d68a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(30);
   d68a6:	201e      	movs	r0, #30
   d68a8:	f002 ba68 	b.w	d8d7c <delay>

000d68ac <_ZN15Adafruit_BNO05516setExtCrystalUseEb>:
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d68ac:	b570      	push	{r4, r5, r6, lr}
   d68ae:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d68b0:	2100      	movs	r1, #0
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d68b2:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t modeback = _mode;
   d68b4:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d68b6:	f7ff ffee 	bl	d6896 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d68ba:	2019      	movs	r0, #25
   d68bc:	f002 fa5e 	bl	d8d7c <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d68c0:	2200      	movs	r2, #0
   d68c2:	2107      	movs	r1, #7
   d68c4:	4620      	mov	r0, r4
   d68c6:	f7ff ffd5 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (usextal) {
   d68ca:	b185      	cbz	r5, d68ee <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x42>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x80);
   d68cc:	2280      	movs	r2, #128	; 0x80
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d68ce:	213f      	movs	r1, #63	; 0x3f
   d68d0:	4620      	mov	r0, r4
   d68d2:	f7ff ffcf 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d68d6:	200a      	movs	r0, #10
   d68d8:	f002 fa50 	bl	d8d7c <delay>
  setMode(modeback);
   d68dc:	4620      	mov	r0, r4
   d68de:	4631      	mov	r1, r6
   d68e0:	f7ff ffd9 	bl	d6896 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d68e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(20);
   d68e8:	2014      	movs	r0, #20
   d68ea:	f002 ba47 	b.w	d8d7c <delay>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d68ee:	462a      	mov	r2, r5
   d68f0:	e7ed      	b.n	d68ce <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x22>

000d68f2 <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>:
    const adafruit_bno055_offsets_t &offsets_type) {
   d68f2:	b570      	push	{r4, r5, r6, lr}
   d68f4:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d68f6:	2100      	movs	r1, #0
    const adafruit_bno055_offsets_t &offsets_type) {
   d68f8:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t lastMode = _mode;
   d68fa:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d68fc:	f7ff ffcb 	bl	d6896 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d6900:	2019      	movs	r0, #25
   d6902:	f002 fa3b 	bl	d8d7c <delay>
  write8(ACCEL_OFFSET_X_LSB_ADDR, (offsets_type.accel_offset_x) & 0x0FF);
   d6906:	782a      	ldrb	r2, [r5, #0]
   d6908:	2155      	movs	r1, #85	; 0x55
   d690a:	4620      	mov	r0, r4
   d690c:	f7ff ffb2 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_X_MSB_ADDR, (offsets_type.accel_offset_x >> 8) & 0x0FF);
   d6910:	786a      	ldrb	r2, [r5, #1]
   d6912:	2156      	movs	r1, #86	; 0x56
   d6914:	4620      	mov	r0, r4
   d6916:	f7ff ffad 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_LSB_ADDR, (offsets_type.accel_offset_y) & 0x0FF);
   d691a:	78aa      	ldrb	r2, [r5, #2]
   d691c:	2157      	movs	r1, #87	; 0x57
   d691e:	4620      	mov	r0, r4
   d6920:	f7ff ffa8 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_MSB_ADDR, (offsets_type.accel_offset_y >> 8) & 0x0FF);
   d6924:	78ea      	ldrb	r2, [r5, #3]
   d6926:	2158      	movs	r1, #88	; 0x58
   d6928:	4620      	mov	r0, r4
   d692a:	f7ff ffa3 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_LSB_ADDR, (offsets_type.accel_offset_z) & 0x0FF);
   d692e:	792a      	ldrb	r2, [r5, #4]
   d6930:	2159      	movs	r1, #89	; 0x59
   d6932:	4620      	mov	r0, r4
   d6934:	f7ff ff9e 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_MSB_ADDR, (offsets_type.accel_offset_z >> 8) & 0x0FF);
   d6938:	796a      	ldrb	r2, [r5, #5]
   d693a:	215a      	movs	r1, #90	; 0x5a
   d693c:	4620      	mov	r0, r4
   d693e:	f7ff ff99 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_LSB_ADDR, (offsets_type.mag_offset_x) & 0x0FF);
   d6942:	79aa      	ldrb	r2, [r5, #6]
   d6944:	215b      	movs	r1, #91	; 0x5b
   d6946:	4620      	mov	r0, r4
   d6948:	f7ff ff94 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_MSB_ADDR, (offsets_type.mag_offset_x >> 8) & 0x0FF);
   d694c:	79ea      	ldrb	r2, [r5, #7]
   d694e:	215c      	movs	r1, #92	; 0x5c
   d6950:	4620      	mov	r0, r4
   d6952:	f7ff ff8f 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_LSB_ADDR, (offsets_type.mag_offset_y) & 0x0FF);
   d6956:	7a2a      	ldrb	r2, [r5, #8]
   d6958:	215d      	movs	r1, #93	; 0x5d
   d695a:	4620      	mov	r0, r4
   d695c:	f7ff ff8a 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_MSB_ADDR, (offsets_type.mag_offset_y >> 8) & 0x0FF);
   d6960:	7a6a      	ldrb	r2, [r5, #9]
   d6962:	215e      	movs	r1, #94	; 0x5e
   d6964:	4620      	mov	r0, r4
   d6966:	f7ff ff85 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_LSB_ADDR, (offsets_type.mag_offset_z) & 0x0FF);
   d696a:	7aaa      	ldrb	r2, [r5, #10]
   d696c:	215f      	movs	r1, #95	; 0x5f
   d696e:	4620      	mov	r0, r4
   d6970:	f7ff ff80 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_MSB_ADDR, (offsets_type.mag_offset_z >> 8) & 0x0FF);
   d6974:	7aea      	ldrb	r2, [r5, #11]
   d6976:	2160      	movs	r1, #96	; 0x60
   d6978:	4620      	mov	r0, r4
   d697a:	f7ff ff7b 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_LSB_ADDR, (offsets_type.gyro_offset_x) & 0x0FF);
   d697e:	7b2a      	ldrb	r2, [r5, #12]
   d6980:	2161      	movs	r1, #97	; 0x61
   d6982:	4620      	mov	r0, r4
   d6984:	f7ff ff76 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_MSB_ADDR, (offsets_type.gyro_offset_x >> 8) & 0x0FF);
   d6988:	7b6a      	ldrb	r2, [r5, #13]
   d698a:	2162      	movs	r1, #98	; 0x62
   d698c:	4620      	mov	r0, r4
   d698e:	f7ff ff71 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_LSB_ADDR, (offsets_type.gyro_offset_y) & 0x0FF);
   d6992:	7baa      	ldrb	r2, [r5, #14]
   d6994:	2163      	movs	r1, #99	; 0x63
   d6996:	4620      	mov	r0, r4
   d6998:	f7ff ff6c 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_MSB_ADDR, (offsets_type.gyro_offset_y >> 8) & 0x0FF);
   d699c:	7bea      	ldrb	r2, [r5, #15]
   d699e:	2164      	movs	r1, #100	; 0x64
   d69a0:	4620      	mov	r0, r4
   d69a2:	f7ff ff67 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_LSB_ADDR, (offsets_type.gyro_offset_z) & 0x0FF);
   d69a6:	7c2a      	ldrb	r2, [r5, #16]
   d69a8:	2165      	movs	r1, #101	; 0x65
   d69aa:	4620      	mov	r0, r4
   d69ac:	f7ff ff62 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_MSB_ADDR, (offsets_type.gyro_offset_z >> 8) & 0x0FF);
   d69b0:	7c6a      	ldrb	r2, [r5, #17]
   d69b2:	2166      	movs	r1, #102	; 0x66
   d69b4:	4620      	mov	r0, r4
   d69b6:	f7ff ff5d 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_LSB_ADDR, (offsets_type.accel_radius) & 0x0FF);
   d69ba:	7caa      	ldrb	r2, [r5, #18]
   d69bc:	2167      	movs	r1, #103	; 0x67
   d69be:	4620      	mov	r0, r4
   d69c0:	f7ff ff58 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_MSB_ADDR, (offsets_type.accel_radius >> 8) & 0x0FF);
   d69c4:	7cea      	ldrb	r2, [r5, #19]
   d69c6:	2168      	movs	r1, #104	; 0x68
   d69c8:	4620      	mov	r0, r4
   d69ca:	f7ff ff53 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_LSB_ADDR, (offsets_type.mag_radius) & 0x0FF);
   d69ce:	7d2a      	ldrb	r2, [r5, #20]
   d69d0:	2169      	movs	r1, #105	; 0x69
   d69d2:	4620      	mov	r0, r4
   d69d4:	f7ff ff4e 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_MSB_ADDR, (offsets_type.mag_radius >> 8) & 0x0FF);
   d69d8:	7d6a      	ldrb	r2, [r5, #21]
   d69da:	216a      	movs	r1, #106	; 0x6a
   d69dc:	4620      	mov	r0, r4
   d69de:	f7ff ff49 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  setMode(lastMode);
   d69e2:	4631      	mov	r1, r6
   d69e4:	4620      	mov	r0, r4
}
   d69e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setMode(lastMode);
   d69ea:	f7ff bf54 	b.w	d6896 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

000d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
   d69ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[1] = {reg};
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d69f0:	2201      	movs	r2, #1
   d69f2:	2300      	movs	r3, #0
   d69f4:	e9cd 2300 	strd	r2, r3, [sp]
   d69f8:	ab03      	add	r3, sp, #12
  uint8_t buffer[1] = {reg};
   d69fa:	f88d 100c 	strb.w	r1, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d69fe:	6880      	ldr	r0, [r0, #8]
   d6a00:	4619      	mov	r1, r3
   d6a02:	f7ff fed7 	bl	d67b4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
  return (byte)buffer[0];
}
   d6a06:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d6a0a:	b005      	add	sp, #20
   d6a0c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a10 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
   d6a10:	b570      	push	{r4, r5, r6, lr}
   d6a12:	4604      	mov	r4, r0
   d6a14:	460e      	mov	r6, r1
  if (!i2c_dev->begin()) {
   d6a16:	6880      	ldr	r0, [r0, #8]
   d6a18:	2101      	movs	r1, #1
   d6a1a:	f7ff fe4e 	bl	d66ba <_ZN18Adafruit_I2CDevice5beginEb>
   d6a1e:	4605      	mov	r5, r0
   d6a20:	b910      	cbnz	r0, d6a28 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x18>
    return false;
   d6a22:	2500      	movs	r5, #0
}
   d6a24:	4628      	mov	r0, r5
   d6a26:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
   d6a28:	2100      	movs	r1, #0
   d6a2a:	4620      	mov	r0, r4
   d6a2c:	f7ff ffdf 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (id != BNO055_ID) {
   d6a30:	28a0      	cmp	r0, #160	; 0xa0
   d6a32:	d113      	bne.n	d6a5c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4c>
  setMode(OPERATION_MODE_CONFIG);
   d6a34:	2100      	movs	r1, #0
   d6a36:	4620      	mov	r0, r4
   d6a38:	f7ff ff2d 	bl	d6896 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
   d6a3c:	2220      	movs	r2, #32
   d6a3e:	213f      	movs	r1, #63	; 0x3f
   d6a40:	4620      	mov	r0, r4
   d6a42:	f7ff ff17 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
   d6a46:	201e      	movs	r0, #30
    delay(10);
   d6a48:	f002 f998 	bl	d8d7c <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
   d6a4c:	2100      	movs	r1, #0
   d6a4e:	4620      	mov	r0, r4
   d6a50:	f7ff ffcd 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6a54:	28a0      	cmp	r0, #160	; 0xa0
   d6a56:	d00c      	beq.n	d6a72 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x62>
    delay(10);
   d6a58:	200a      	movs	r0, #10
   d6a5a:	e7f5      	b.n	d6a48 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x38>
    delay(1000); // hold on for boot
   d6a5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6a60:	f002 f98c 	bl	d8d7c <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
   d6a64:	2100      	movs	r1, #0
   d6a66:	4620      	mov	r0, r4
   d6a68:	f7ff ffc1 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if (id != BNO055_ID) {
   d6a6c:	28a0      	cmp	r0, #160	; 0xa0
   d6a6e:	d1d8      	bne.n	d6a22 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x12>
   d6a70:	e7e0      	b.n	d6a34 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x24>
  delay(50);
   d6a72:	2032      	movs	r0, #50	; 0x32
   d6a74:	f002 f982 	bl	d8d7c <delay>
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
   d6a78:	2200      	movs	r2, #0
   d6a7a:	213e      	movs	r1, #62	; 0x3e
   d6a7c:	4620      	mov	r0, r4
   d6a7e:	f7ff fef9 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6a82:	200a      	movs	r0, #10
   d6a84:	f002 f97a 	bl	d8d7c <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6a88:	2200      	movs	r2, #0
   d6a8a:	2107      	movs	r1, #7
   d6a8c:	4620      	mov	r0, r4
   d6a8e:	f7ff fef1 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
   d6a92:	2200      	movs	r2, #0
   d6a94:	213f      	movs	r1, #63	; 0x3f
   d6a96:	4620      	mov	r0, r4
   d6a98:	f7ff feec 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6a9c:	200a      	movs	r0, #10
   d6a9e:	f002 f96d 	bl	d8d7c <delay>
  setMode(mode);
   d6aa2:	4620      	mov	r0, r4
   d6aa4:	4631      	mov	r1, r6
   d6aa6:	f7ff fef6 	bl	d6896 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   d6aaa:	2014      	movs	r0, #20
   d6aac:	f002 f966 	bl	d8d7c <delay>
  return true;
   d6ab0:	e7b8      	b.n	d6a24 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x14>

000d6ab2 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>:
                                      uint8_t *system_error) {
   d6ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ab4:	460f      	mov	r7, r1
   d6ab6:	4616      	mov	r6, r2
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6ab8:	2107      	movs	r1, #7
   d6aba:	2200      	movs	r2, #0
                                      uint8_t *system_error) {
   d6abc:	4604      	mov	r4, r0
   d6abe:	461d      	mov	r5, r3
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6ac0:	f7ff fed8 	bl	d6874 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (system_status != 0)
   d6ac4:	b127      	cbz	r7, d6ad0 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x1e>
    *system_status = read8(BNO055_SYS_STAT_ADDR);
   d6ac6:	2139      	movs	r1, #57	; 0x39
   d6ac8:	4620      	mov	r0, r4
   d6aca:	f7ff ff90 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ace:	7038      	strb	r0, [r7, #0]
  if (self_test_result != 0)
   d6ad0:	b126      	cbz	r6, d6adc <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x2a>
    *self_test_result = read8(BNO055_SELFTEST_RESULT_ADDR);
   d6ad2:	2136      	movs	r1, #54	; 0x36
   d6ad4:	4620      	mov	r0, r4
   d6ad6:	f7ff ff8a 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ada:	7030      	strb	r0, [r6, #0]
  if (system_error != 0)
   d6adc:	b125      	cbz	r5, d6ae8 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x36>
    *system_error = read8(BNO055_SYS_ERR_ADDR);
   d6ade:	213a      	movs	r1, #58	; 0x3a
   d6ae0:	4620      	mov	r0, r4
   d6ae2:	f7ff ff84 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ae6:	7028      	strb	r0, [r5, #0]
}
   d6ae8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(200);
   d6aec:	20c8      	movs	r0, #200	; 0xc8
   d6aee:	f002 b945 	b.w	d8d7c <delay>

000d6af2 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>:
                                     uint8_t *accel, uint8_t *mag) {
   d6af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6af4:	460e      	mov	r6, r1
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d6af6:	2135      	movs	r1, #53	; 0x35
                                     uint8_t *accel, uint8_t *mag) {
   d6af8:	9f06      	ldr	r7, [sp, #24]
   d6afa:	4615      	mov	r5, r2
   d6afc:	461c      	mov	r4, r3
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d6afe:	f7ff ff76 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (sys != NULL) {
   d6b02:	b10e      	cbz	r6, d6b08 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x16>
    *sys = (calData >> 6) & 0x03;
   d6b04:	0983      	lsrs	r3, r0, #6
   d6b06:	7033      	strb	r3, [r6, #0]
  if (gyro != NULL) {
   d6b08:	b115      	cbz	r5, d6b10 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x1e>
    *gyro = (calData >> 4) & 0x03;
   d6b0a:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d6b0e:	702b      	strb	r3, [r5, #0]
  if (accel != NULL) {
   d6b10:	b114      	cbz	r4, d6b18 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x26>
    *accel = (calData >> 2) & 0x03;
   d6b12:	f3c0 0381 	ubfx	r3, r0, #2, #2
   d6b16:	7023      	strb	r3, [r4, #0]
  if (mag != NULL) {
   d6b18:	b117      	cbz	r7, d6b20 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x2e>
    *mag = calData & 0x03;
   d6b1a:	f000 0003 	and.w	r0, r0, #3
   d6b1e:	7038      	strb	r0, [r7, #0]
}
   d6b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b22 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>:
bool Adafruit_BNO055::isFullyCalibrated() {
   d6b22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6b24:	4604      	mov	r4, r0
  getCalibration(&system, &gyro, &accel, &mag);
   d6b26:	f10d 030f 	add.w	r3, sp, #15
   d6b2a:	9300      	str	r3, [sp, #0]
   d6b2c:	f10d 020d 	add.w	r2, sp, #13
   d6b30:	f10d 030e 	add.w	r3, sp, #14
   d6b34:	a903      	add	r1, sp, #12
   d6b36:	f7ff ffdc 	bl	d6af2 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
  switch (_mode) {
   d6b3a:	7c23      	ldrb	r3, [r4, #16]
   d6b3c:	3b01      	subs	r3, #1
   d6b3e:	2b09      	cmp	r3, #9
   d6b40:	d817      	bhi.n	d6b72 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x50>
   d6b42:	e8df f003 	tbb	[pc, r3]
   d6b46:	2205      	.short	0x2205
   d6b48:	130c1e10 	.word	0x130c1e10
   d6b4c:	101e0c16 	.word	0x101e0c16
    return (accel == 3);
   d6b50:	f89d 000e 	ldrb.w	r0, [sp, #14]
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   d6b54:	1ec3      	subs	r3, r0, #3
   d6b56:	4258      	negs	r0, r3
   d6b58:	4158      	adcs	r0, r3
}
   d6b5a:	b004      	add	sp, #16
   d6b5c:	bd10      	pop	{r4, pc}
    return (accel == 3 && gyro == 3);
   d6b5e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    return (mag == 3 && gyro == 3);
   d6b62:	2b03      	cmp	r3, #3
   d6b64:	d114      	bne.n	d6b90 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6b66:	f89d 000d 	ldrb.w	r0, [sp, #13]
   d6b6a:	e7f3      	b.n	d6b54 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
   d6b6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d6b70:	e7f7      	b.n	d6b62 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x40>
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   d6b72:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6b76:	2b03      	cmp	r3, #3
   d6b78:	d10a      	bne.n	d6b90 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6b7a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6b7e:	2b03      	cmp	r3, #3
   d6b80:	d106      	bne.n	d6b90 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6b82:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6b86:	2b03      	cmp	r3, #3
   d6b88:	d102      	bne.n	d6b90 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6b8a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   d6b8e:	e7e1      	b.n	d6b54 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
    return (accel == 3 && mag == 3);
   d6b90:	2000      	movs	r0, #0
   d6b92:	e7e2      	b.n	d6b5a <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x38>

000d6b94 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>:
    adafruit_bno055_offsets_t &offsets_type) {
   d6b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b98:	4604      	mov	r4, r0
   d6b9a:	460d      	mov	r5, r1
  if (isFullyCalibrated()) {
   d6b9c:	f7ff ffc1 	bl	d6b22 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d6ba0:	4606      	mov	r6, r0
   d6ba2:	2800      	cmp	r0, #0
   d6ba4:	f000 8091 	beq.w	d6cca <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t+0x136>
    setMode(OPERATION_MODE_CONFIG);
   d6ba8:	2100      	movs	r1, #0
   d6baa:	4620      	mov	r0, r4
    adafruit_bno055_opmode_t lastMode = _mode;
   d6bac:	f894 8010 	ldrb.w	r8, [r4, #16]
    setMode(OPERATION_MODE_CONFIG);
   d6bb0:	f7ff fe71 	bl	d6896 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
    delay(25);
   d6bb4:	2019      	movs	r0, #25
   d6bb6:	f002 f8e1 	bl	d8d7c <delay>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6bba:	2156      	movs	r1, #86	; 0x56
   d6bbc:	4620      	mov	r0, r4
   d6bbe:	f7ff ff16 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   d6bc2:	2155      	movs	r1, #85	; 0x55
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6bc4:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   d6bc6:	4620      	mov	r0, r4
   d6bc8:	f7ff ff11 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6bcc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6bd0:	8028      	strh	r0, [r5, #0]
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6bd2:	2158      	movs	r1, #88	; 0x58
   d6bd4:	4620      	mov	r0, r4
   d6bd6:	f7ff ff0a 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   d6bda:	2157      	movs	r1, #87	; 0x57
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6bdc:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   d6bde:	4620      	mov	r0, r4
   d6be0:	f7ff ff05 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6be4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6be8:	8068      	strh	r0, [r5, #2]
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6bea:	215a      	movs	r1, #90	; 0x5a
   d6bec:	4620      	mov	r0, r4
   d6bee:	f7ff fefe 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   d6bf2:	2159      	movs	r1, #89	; 0x59
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6bf4:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   d6bf6:	4620      	mov	r0, r4
   d6bf8:	f7ff fef9 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6bfc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6c00:	80a8      	strh	r0, [r5, #4]
        (read8(MAG_OFFSET_X_MSB_ADDR) << 8) | (read8(MAG_OFFSET_X_LSB_ADDR));
   d6c02:	215c      	movs	r1, #92	; 0x5c
   d6c04:	4620      	mov	r0, r4
   d6c06:	f7ff fef2 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c0a:	215b      	movs	r1, #91	; 0x5b
   d6c0c:	4607      	mov	r7, r0
   d6c0e:	4620      	mov	r0, r4
   d6c10:	f7ff feed 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c14:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_x =
   d6c18:	80e8      	strh	r0, [r5, #6]
        (read8(MAG_OFFSET_Y_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Y_LSB_ADDR));
   d6c1a:	215e      	movs	r1, #94	; 0x5e
   d6c1c:	4620      	mov	r0, r4
   d6c1e:	f7ff fee6 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c22:	215d      	movs	r1, #93	; 0x5d
   d6c24:	4607      	mov	r7, r0
   d6c26:	4620      	mov	r0, r4
   d6c28:	f7ff fee1 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c2c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_y =
   d6c30:	8128      	strh	r0, [r5, #8]
        (read8(MAG_OFFSET_Z_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Z_LSB_ADDR));
   d6c32:	2160      	movs	r1, #96	; 0x60
   d6c34:	4620      	mov	r0, r4
   d6c36:	f7ff feda 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c3a:	215f      	movs	r1, #95	; 0x5f
   d6c3c:	4607      	mov	r7, r0
   d6c3e:	4620      	mov	r0, r4
   d6c40:	f7ff fed5 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c44:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_z =
   d6c48:	8168      	strh	r0, [r5, #10]
        (read8(GYRO_OFFSET_X_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_X_LSB_ADDR));
   d6c4a:	2162      	movs	r1, #98	; 0x62
   d6c4c:	4620      	mov	r0, r4
   d6c4e:	f7ff fece 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c52:	2161      	movs	r1, #97	; 0x61
   d6c54:	4607      	mov	r7, r0
   d6c56:	4620      	mov	r0, r4
   d6c58:	f7ff fec9 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c5c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_x =
   d6c60:	81a8      	strh	r0, [r5, #12]
        (read8(GYRO_OFFSET_Y_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Y_LSB_ADDR));
   d6c62:	2164      	movs	r1, #100	; 0x64
   d6c64:	4620      	mov	r0, r4
   d6c66:	f7ff fec2 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c6a:	2163      	movs	r1, #99	; 0x63
   d6c6c:	4607      	mov	r7, r0
   d6c6e:	4620      	mov	r0, r4
   d6c70:	f7ff febd 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c74:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_y =
   d6c78:	81e8      	strh	r0, [r5, #14]
        (read8(GYRO_OFFSET_Z_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Z_LSB_ADDR));
   d6c7a:	2166      	movs	r1, #102	; 0x66
   d6c7c:	4620      	mov	r0, r4
   d6c7e:	f7ff feb6 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c82:	2165      	movs	r1, #101	; 0x65
   d6c84:	4607      	mov	r7, r0
   d6c86:	4620      	mov	r0, r4
   d6c88:	f7ff feb1 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c8c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_z =
   d6c90:	8228      	strh	r0, [r5, #16]
        (read8(ACCEL_RADIUS_MSB_ADDR) << 8) | (read8(ACCEL_RADIUS_LSB_ADDR));
   d6c92:	2168      	movs	r1, #104	; 0x68
   d6c94:	4620      	mov	r0, r4
   d6c96:	f7ff feaa 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c9a:	2167      	movs	r1, #103	; 0x67
   d6c9c:	4607      	mov	r7, r0
   d6c9e:	4620      	mov	r0, r4
   d6ca0:	f7ff fea5 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ca4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.accel_radius =
   d6ca8:	8268      	strh	r0, [r5, #18]
        (read8(MAG_RADIUS_MSB_ADDR) << 8) | (read8(MAG_RADIUS_LSB_ADDR));
   d6caa:	216a      	movs	r1, #106	; 0x6a
   d6cac:	4620      	mov	r0, r4
   d6cae:	f7ff fe9e 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6cb2:	2169      	movs	r1, #105	; 0x69
   d6cb4:	4607      	mov	r7, r0
   d6cb6:	4620      	mov	r0, r4
   d6cb8:	f7ff fe99 	bl	d69ee <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6cbc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_radius =
   d6cc0:	82a8      	strh	r0, [r5, #20]
    setMode(lastMode);
   d6cc2:	4641      	mov	r1, r8
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	f7ff fde6 	bl	d6896 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d6cca:	4630      	mov	r0, r6
   d6ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6cd0 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte *buffer,
                              uint8_t len) {
   d6cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t reg_buf[1] = {(uint8_t)reg};
   d6cd2:	f88d 100c 	strb.w	r1, [sp, #12]
  return i2c_dev->write_then_read(reg_buf, 1, buffer, len);
   d6cd6:	2100      	movs	r1, #0
   d6cd8:	e9cd 3100 	strd	r3, r1, [sp]
   d6cdc:	4613      	mov	r3, r2
   d6cde:	a903      	add	r1, sp, #12
   d6ce0:	2201      	movs	r2, #1
   d6ce2:	6880      	ldr	r0, [r0, #8]
   d6ce4:	f7ff fd66 	bl	d67b4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
}
   d6ce8:	b005      	add	sp, #20
   d6cea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6cf0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
   d6cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6cf2:	460d      	mov	r5, r1
   d6cf4:	4616      	mov	r6, r2

namespace imu {

template <uint8_t N> class Vector {
public:
  Vector() { memset(p_vec, 0, sizeof(double) * N); }
   d6cf6:	2100      	movs	r1, #0
   d6cf8:	2218      	movs	r2, #24
   d6cfa:	4604      	mov	r4, r0
   d6cfc:	f006 fc36 	bl	dd56c <memset>
  memset(buffer, 0, 6);
   d6d00:	2300      	movs	r3, #0
   d6d02:	9300      	str	r3, [sp, #0]
   d6d04:	f8ad 3004 	strh.w	r3, [sp, #4]
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
   d6d08:	4628      	mov	r0, r5
   d6d0a:	2306      	movs	r3, #6
   d6d0c:	466a      	mov	r2, sp
   d6d0e:	4631      	mov	r1, r6
   d6d10:	f7ff ffde 	bl	d6cd0 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6d14:	f89d 3001 	ldrb.w	r3, [sp, #1]
   d6d18:	f89d 0000 	ldrb.w	r0, [sp]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6d1c:	f89d 7002 	ldrb.w	r7, [sp, #2]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6d20:	f89d 5004 	ldrb.w	r5, [sp, #4]
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6d24:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6d28:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d6d2c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6d30:	f89d 3005 	ldrb.w	r3, [sp, #5]
  switch (vector_type) {
   d6d34:	2e1a      	cmp	r6, #26
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6d36:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6d3a:	b200      	sxth	r0, r0
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6d3c:	b23f      	sxth	r7, r7
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6d3e:	b22d      	sxth	r5, r5
  switch (vector_type) {
   d6d40:	d00d      	beq.n	d6d5e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6d42:	d808      	bhi.n	d6d56 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x66>
   d6d44:	2e0e      	cmp	r6, #14
   d6d46:	d00a      	beq.n	d6d5e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6d48:	2e14      	cmp	r6, #20
   d6d4a:	d008      	beq.n	d6d5e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6d4c:	2e08      	cmp	r6, #8
   d6d4e:	d021      	beq.n	d6d94 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
}
   d6d50:	4620      	mov	r0, r4
   d6d52:	b003      	add	sp, #12
   d6d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (vector_type) {
   d6d56:	2e28      	cmp	r6, #40	; 0x28
   d6d58:	d01c      	beq.n	d6d94 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
   d6d5a:	2e2e      	cmp	r6, #46	; 0x2e
   d6d5c:	e7f7      	b.n	d6d4e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5e>
    xyz[0] = ((double)x) / 16.0;
   d6d5e:	f005 fd47 	bl	dc7f0 <__aeabi_i2d>
   d6d62:	4b19      	ldr	r3, [pc, #100]	; (d6dc8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6d64:	2200      	movs	r2, #0
   d6d66:	f005 fdad 	bl	dc8c4 <__aeabi_dmul>
   d6d6a:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 16.0;
   d6d6e:	4638      	mov	r0, r7
   d6d70:	f005 fd3e 	bl	dc7f0 <__aeabi_i2d>
   d6d74:	4b14      	ldr	r3, [pc, #80]	; (d6dc8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6d76:	2200      	movs	r2, #0
   d6d78:	f005 fda4 	bl	dc8c4 <__aeabi_dmul>
   d6d7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 16.0;
   d6d80:	4628      	mov	r0, r5
   d6d82:	f005 fd35 	bl	dc7f0 <__aeabi_i2d>
   d6d86:	4b10      	ldr	r3, [pc, #64]	; (d6dc8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6d88:	2200      	movs	r2, #0
   d6d8a:	f005 fd9b 	bl	dc8c4 <__aeabi_dmul>
    xyz[2] = ((double)z) / 100.0;
   d6d8e:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return xyz;
   d6d92:	e7dd      	b.n	d6d50 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x60>
    xyz[0] = ((double)x) / 100.0;
   d6d94:	f005 fd2c 	bl	dc7f0 <__aeabi_i2d>
   d6d98:	4b0c      	ldr	r3, [pc, #48]	; (d6dcc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6d9a:	2200      	movs	r2, #0
   d6d9c:	f005 febc 	bl	dcb18 <__aeabi_ddiv>
   d6da0:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 100.0;
   d6da4:	4638      	mov	r0, r7
   d6da6:	f005 fd23 	bl	dc7f0 <__aeabi_i2d>
   d6daa:	4b08      	ldr	r3, [pc, #32]	; (d6dcc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6dac:	2200      	movs	r2, #0
   d6dae:	f005 feb3 	bl	dcb18 <__aeabi_ddiv>
   d6db2:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 100.0;
   d6db6:	4628      	mov	r0, r5
   d6db8:	f005 fd1a 	bl	dc7f0 <__aeabi_i2d>
   d6dbc:	4b03      	ldr	r3, [pc, #12]	; (d6dcc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6dbe:	2200      	movs	r2, #0
   d6dc0:	f005 feaa 	bl	dcb18 <__aeabi_ddiv>
   d6dc4:	e7e3      	b.n	d6d8e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9e>
   d6dc6:	bf00      	nop
   d6dc8:	3fb00000 	.word	0x3fb00000
   d6dcc:	40590000 	.word	0x40590000

000d6dd0 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
   d6dd0:	b530      	push	{r4, r5, lr}
   d6dd2:	460c      	mov	r4, r1
   d6dd4:	b087      	sub	sp, #28
   d6dd6:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   d6dd8:	2220      	movs	r2, #32
   d6dda:	2100      	movs	r1, #0
   d6ddc:	1d20      	adds	r0, r4, #4
   d6dde:	f006 fbc5 	bl	dd56c <memset>
  event->version = sizeof(sensors_event_t);
   d6de2:	2324      	movs	r3, #36	; 0x24
   d6de4:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d6de6:	68eb      	ldr	r3, [r5, #12]
   d6de8:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_ORIENTATION;
   d6dea:	2303      	movs	r3, #3
   d6dec:	60a3      	str	r3, [r4, #8]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6dee:	f001 f8f7 	bl	d7fe0 <HAL_Timer_Get_Milli_Seconds>
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6df2:	221a      	movs	r2, #26
  event->timestamp = millis();
   d6df4:	6120      	str	r0, [r4, #16]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6df6:	4629      	mov	r1, r5
   d6df8:	4668      	mov	r0, sp
   d6dfa:	f7ff ff79 	bl	d6cf0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
   d6dfe:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6e02:	f006 f857 	bl	dceb4 <__aeabi_d2f>
   d6e06:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
   d6e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6e0c:	f006 f852 	bl	dceb4 <__aeabi_d2f>
   d6e10:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
   d6e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6e16:	f006 f84d 	bl	dceb4 <__aeabi_d2f>
   d6e1a:	61e0      	str	r0, [r4, #28]
}
   d6e1c:	2001      	movs	r0, #1
   d6e1e:	b007      	add	sp, #28
   d6e20:	bd30      	pop	{r4, r5, pc}

000d6e22 <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d6e22:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d6e24:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d6e26:	db66      	blt.n	d6ef6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6e28:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d6e2c:	428c      	cmp	r4, r1
   d6e2e:	dd62      	ble.n	d6ef6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6e30:	2a00      	cmp	r2, #0
   d6e32:	db60      	blt.n	d6ef6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6e34:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d6e38:	4294      	cmp	r4, r2
   d6e3a:	dd5c      	ble.n	d6ef6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   d6e3c:	7e84      	ldrb	r4, [r0, #26]
   d6e3e:	2c02      	cmp	r4, #2
   d6e40:	d05a      	beq.n	d6ef8 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   d6e42:	2c03      	cmp	r4, #3
   d6e44:	d061      	beq.n	d6f0a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   d6e46:	2c01      	cmp	r4, #1
   d6e48:	d104      	bne.n	d6e54 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   d6e4a:	8904      	ldrh	r4, [r0, #8]
   d6e4c:	43d2      	mvns	r2, r2
   d6e4e:	4414      	add	r4, r2
      break;
   d6e50:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d6e52:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   d6e54:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   d6e58:	428c      	cmp	r4, r1
   d6e5a:	bfa8      	it	ge
   d6e5c:	460c      	movge	r4, r1
   d6e5e:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   d6e60:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   d6e64:	4294      	cmp	r4, r2
   d6e66:	bfa8      	it	ge
   d6e68:	4614      	movge	r4, r2
   d6e6a:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   d6e6c:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   d6e70:	428c      	cmp	r4, r1
   d6e72:	bfb8      	it	lt
   d6e74:	460c      	movlt	r4, r1
   d6e76:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   d6e78:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   d6e7c:	4294      	cmp	r4, r2
   d6e7e:	bfb8      	it	lt
   d6e80:	4614      	movlt	r4, r2
   d6e82:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   d6e84:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d6e88:	2c01      	cmp	r4, #1
   d6e8a:	d116      	bne.n	d6eba <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   d6e8c:	2b01      	cmp	r3, #1
   d6e8e:	d042      	beq.n	d6f16 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   d6e90:	2b02      	cmp	r3, #2
   d6e92:	d051      	beq.n	d6f38 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   d6e94:	b98b      	cbnz	r3, d6eba <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   d6e96:	2a00      	cmp	r2, #0
   d6e98:	8905      	ldrh	r5, [r0, #8]
   d6e9a:	6b47      	ldr	r7, [r0, #52]	; 0x34
   d6e9c:	4614      	mov	r4, r2
   d6e9e:	bfb8      	it	lt
   d6ea0:	1dd4      	addlt	r4, r2, #7
   d6ea2:	10e4      	asrs	r4, r4, #3
   d6ea4:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6ea8:	f002 0607 	and.w	r6, r2, #7
   d6eac:	2501      	movs	r5, #1
   d6eae:	fa05 f606 	lsl.w	r6, r5, r6
   d6eb2:	5d3d      	ldrb	r5, [r7, r4]
   d6eb4:	ea25 0506 	bic.w	r5, r5, r6
   d6eb8:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   d6eba:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d6ebe:	2c04      	cmp	r4, #4
   d6ec0:	d119      	bne.n	d6ef6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   d6ec2:	8904      	ldrh	r4, [r0, #8]
   d6ec4:	fb14 f202 	smulbb	r2, r4, r2
   d6ec8:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   d6ecc:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   d6ed0:	f342 024f 	sbfx	r2, r2, #1, #16
   d6ed4:	eb02 0264 	add.w	r2, r2, r4, asr #1
   d6ed8:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
   d6eda:	5ca0      	ldrb	r0, [r4, r2]
   d6edc:	07c9      	lsls	r1, r1, #31
        uint8_t t = pixelptr[0] & 0x0F;
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   d6ede:	bf4b      	itete	mi
   d6ee0:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   d6ee4:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   d6ee8:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   d6eec:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   d6ef0:	bf48      	it	mi
   d6ef2:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   d6ef4:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   d6ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   d6ef8:	8904      	ldrh	r4, [r0, #8]
   d6efa:	43c9      	mvns	r1, r1
   d6efc:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d6efe:	8944      	ldrh	r4, [r0, #10]
   d6f00:	43d2      	mvns	r2, r2
   d6f02:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   d6f04:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d6f06:	b212      	sxth	r2, r2
      break;
   d6f08:	e7a4      	b.n	d6e54 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d6f0a:	8944      	ldrh	r4, [r0, #10]
   d6f0c:	43c9      	mvns	r1, r1
   d6f0e:	440c      	add	r4, r1
      break;
   d6f10:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d6f12:	b222      	sxth	r2, r4
      break;
   d6f14:	e79e      	b.n	d6e54 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   d6f16:	2a00      	cmp	r2, #0
   d6f18:	8905      	ldrh	r5, [r0, #8]
   d6f1a:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d6f1c:	4614      	mov	r4, r2
   d6f1e:	bfb8      	it	lt
   d6f20:	1dd4      	addlt	r4, r2, #7
   d6f22:	10e4      	asrs	r4, r4, #3
   d6f24:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6f28:	f002 0707 	and.w	r7, r2, #7
   d6f2c:	2501      	movs	r5, #1
   d6f2e:	40bd      	lsls	r5, r7
   d6f30:	5d37      	ldrb	r7, [r6, r4]
   d6f32:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d6f34:	5535      	strb	r5, [r6, r4]
        break;
   d6f36:	e7c0      	b.n	d6eba <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d6f38:	2a00      	cmp	r2, #0
   d6f3a:	8905      	ldrh	r5, [r0, #8]
   d6f3c:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d6f3e:	4614      	mov	r4, r2
   d6f40:	bfb8      	it	lt
   d6f42:	1dd4      	addlt	r4, r2, #7
   d6f44:	10e4      	asrs	r4, r4, #3
   d6f46:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6f4a:	f002 0707 	and.w	r7, r2, #7
   d6f4e:	2501      	movs	r5, #1
   d6f50:	40bd      	lsls	r5, r7
   d6f52:	5d37      	ldrb	r7, [r6, r4]
   d6f54:	407d      	eors	r5, r7
   d6f56:	e7ed      	b.n	d6f34 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

000d6f58 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   d6f58:	b538      	push	{r3, r4, r5, lr}
   d6f5a:	460d      	mov	r5, r1
   d6f5c:	4611      	mov	r1, r2
   d6f5e:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d6f60:	b21a      	sxth	r2, r3
   d6f62:	b209      	sxth	r1, r1
   d6f64:	f000 fa96 	bl	d7494 <_ZN12Adafruit_GFXC1Ess>
   d6f68:	9a06      	ldr	r2, [sp, #24]
   d6f6a:	4b0b      	ldr	r3, [pc, #44]	; (d6f98 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   d6f6c:	62e2      	str	r2, [r4, #44]	; 0x2c
   d6f6e:	9a07      	ldr	r2, [sp, #28]
   d6f70:	6023      	str	r3, [r4, #0]
   d6f72:	2300      	movs	r3, #0
   d6f74:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   d6f78:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   d6f7c:	f04f 33ff 	mov.w	r3, #4294967295
   d6f80:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   d6f84:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   d6f88:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   d6f8a:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d6f8c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   d6f90:	6523      	str	r3, [r4, #80]	; 0x50
}
   d6f92:	4620      	mov	r0, r4
   d6f94:	bd38      	pop	{r3, r4, r5, pc}
   d6f96:	bf00      	nop
   d6f98:	000ddedc 	.word	0x000ddedc

000d6f9c <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   d6f9c:	b538      	push	{r3, r4, r5, lr}
   d6f9e:	4b0c      	ldr	r3, [pc, #48]	; (d6fd0 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   d6fa0:	6003      	str	r3, [r0, #0]
   d6fa2:	4604      	mov	r4, r0
  if (buffer) {
   d6fa4:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6fa6:	b118      	cbz	r0, d6fb0 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   d6fa8:	f001 fa6e 	bl	d8488 <free>
    buffer = NULL;
   d6fac:	2300      	movs	r3, #0
   d6fae:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   d6fb0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d6fb2:	b135      	cbz	r5, d6fc2 <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   d6fb4:	4628      	mov	r0, r5
   d6fb6:	f7ff fa03 	bl	d63c0 <_ZN18Adafruit_SPIDeviceD1Ev>
   d6fba:	2138      	movs	r1, #56	; 0x38
   d6fbc:	4628      	mov	r0, r5
   d6fbe:	f002 fe4f 	bl	d9c60 <_ZdlPvj>
  if (i2c_dev)
   d6fc2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6fc4:	b110      	cbz	r0, d6fcc <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   d6fc6:	2110      	movs	r1, #16
   d6fc8:	f002 fe4a 	bl	d9c60 <_ZdlPvj>
}
   d6fcc:	4620      	mov	r0, r4
   d6fce:	bd38      	pop	{r3, r4, r5, pc}
   d6fd0:	000ddedc 	.word	0x000ddedc

000d6fd4 <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d6fd4:	b530      	push	{r4, r5, lr}
   d6fd6:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   d6fd8:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d6fda:	f88d 100f 	strb.w	r1, [sp, #15]
   d6fde:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   d6fe0:	b17d      	cbz	r5, d7002 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d6fe2:	2300      	movs	r3, #0
   d6fe4:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   d6fe6:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d6fea:	f88d 3014 	strb.w	r3, [sp, #20]
   d6fee:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   d6ff2:	2301      	movs	r3, #1
   d6ff4:	2202      	movs	r2, #2
   d6ff6:	a905      	add	r1, sp, #20
   d6ff8:	4628      	mov	r0, r5
   d6ffa:	f7ff fb6d 	bl	d66d8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d6ffe:	b007      	add	sp, #28
   d7000:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   d7002:	4629      	mov	r1, r5
   d7004:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d7008:	f002 fd93 	bl	d9b32 <digitalWrite>
    spi_dev->write(&c, 1);
   d700c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d700e:	9500      	str	r5, [sp, #0]
   d7010:	462b      	mov	r3, r5
   d7012:	2201      	movs	r2, #1
   d7014:	f10d 010f 	add.w	r1, sp, #15
   d7018:	f7ff facd 	bl	d65b6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   d701c:	e7ef      	b.n	d6ffe <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000d701e <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   d701e:	2900      	cmp	r1, #0
   d7020:	bf14      	ite	ne
   d7022:	21a7      	movne	r1, #167	; 0xa7
   d7024:	21a6      	moveq	r1, #166	; 0xa6
   d7026:	f7ff bfd5 	b.w	d6fd4 <_ZN17Adafruit_GrayOLED12oled_commandEh>

000d702a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d702a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   d702c:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d702e:	b085      	sub	sp, #20
   d7030:	4604      	mov	r4, r0
   d7032:	460e      	mov	r6, r1
   d7034:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   d7036:	b165      	cbz	r5, d7052 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d7038:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d703a:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d703e:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d7042:	2301      	movs	r3, #1
   d7044:	9000      	str	r0, [sp, #0]
   d7046:	9301      	str	r3, [sp, #4]
   d7048:	4628      	mov	r0, r5
   d704a:	f7ff fb45 	bl	d66d8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d704e:	b005      	add	sp, #20
   d7050:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   d7052:	4629      	mov	r1, r5
   d7054:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d7058:	f002 fd6b 	bl	d9b32 <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   d705c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d705e:	9500      	str	r5, [sp, #0]
   d7060:	462b      	mov	r3, r5
   d7062:	463a      	mov	r2, r7
   d7064:	4631      	mov	r1, r6
   d7066:	f7ff faa6 	bl	d65b6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d706a:	e7f0      	b.n	d704e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000d706c <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   d706c:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d706e:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   d7072:	8903      	ldrh	r3, [r0, #8]
   d7074:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   d7078:	fb12 f203 	smulbb	r2, r2, r3
   d707c:	1dcb      	adds	r3, r1, #7
   d707e:	bf48      	it	mi
   d7080:	f101 030e 	addmi.w	r3, r1, #14
   d7084:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   d7086:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d7088:	435a      	muls	r2, r3
   d708a:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d708c:	2100      	movs	r1, #0
   d708e:	f006 fa6d 	bl	dd56c <memset>
  window_x1 = 0;
   d7092:	2300      	movs	r3, #0
   d7094:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d7096:	8923      	ldrh	r3, [r4, #8]
   d7098:	3b01      	subs	r3, #1
   d709a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d709c:	8963      	ldrh	r3, [r4, #10]
   d709e:	3b01      	subs	r3, #1
   d70a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   d70a2:	bd10      	pop	{r4, pc}

000d70a4 <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d70a4:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   d70a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d70a8:	4604      	mov	r4, r0
   d70aa:	460e      	mov	r6, r1
   d70ac:	4615      	mov	r5, r2
  if ((!buffer) &&
   d70ae:	b30b      	cbz	r3, d70f4 <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   d70b0:	2d00      	cmp	r5, #0
   d70b2:	d133      	bne.n	d711c <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   d70b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d70b6:	2b00      	cmp	r3, #0
   d70b8:	d050      	beq.n	d715c <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   d70ba:	2010      	movs	r0, #16
   d70bc:	f7fc ffeb 	bl	d4096 <_Znwj>
   d70c0:	4605      	mov	r5, r0
   d70c2:	b118      	cbz	r0, d70cc <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   d70c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d70c6:	4631      	mov	r1, r6
   d70c8:	f7ff fadb 	bl	d6682 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d70cc:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   d70ce:	b31d      	cbz	r5, d7118 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d70d0:	2101      	movs	r1, #1
   d70d2:	4628      	mov	r0, r5
   d70d4:	f7ff faf1 	bl	d66ba <_ZN18Adafruit_I2CDevice5beginEb>
   d70d8:	b1f0      	cbz	r0, d7118 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   d70da:	4620      	mov	r0, r4
   d70dc:	f7ff ffc6 	bl	d706c <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   d70e0:	2300      	movs	r3, #0
   d70e2:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d70e4:	8923      	ldrh	r3, [r4, #8]
   d70e6:	3b01      	subs	r3, #1
   d70e8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d70ea:	8963      	ldrh	r3, [r4, #10]
   d70ec:	3b01      	subs	r3, #1
   d70ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   d70f0:	2001      	movs	r0, #1
   d70f2:	e012      	b.n	d711a <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   d70f4:	8923      	ldrh	r3, [r4, #8]
   d70f6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   d70fa:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   d70fe:	fb10 f003 	smulbb	r0, r0, r3
   d7102:	1dd3      	adds	r3, r2, #7
   d7104:	bf48      	it	mi
   d7106:	f102 030e 	addmi.w	r3, r2, #14
   d710a:	10db      	asrs	r3, r3, #3
   d710c:	4358      	muls	r0, r3
   d710e:	f001 f9b3 	bl	d8478 <malloc>
   d7112:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   d7114:	2800      	cmp	r0, #0
   d7116:	d1cb      	bne.n	d70b0 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   d7118:	2000      	movs	r0, #0
}
   d711a:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   d711c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d711e:	2800      	cmp	r0, #0
   d7120:	dbc8      	blt.n	d70b4 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   d7122:	2101      	movs	r1, #1
   d7124:	b280      	uxth	r0, r0
   d7126:	f002 fcf3 	bl	d9b10 <pinMode>
    digitalWrite(rstPin, HIGH);
   d712a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d712e:	2101      	movs	r1, #1
   d7130:	f002 fcff 	bl	d9b32 <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   d7134:	200a      	movs	r0, #10
   d7136:	f001 fe21 	bl	d8d7c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d713a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d713e:	2100      	movs	r1, #0
   d7140:	f002 fcf7 	bl	d9b32 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d7144:	200a      	movs	r0, #10
   d7146:	f001 fe19 	bl	d8d7c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d714a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d714e:	2101      	movs	r1, #1
   d7150:	f002 fcef 	bl	d9b32 <digitalWrite>
    delay(10);
   d7154:	200a      	movs	r0, #10
   d7156:	f001 fe11 	bl	d8d7c <delay>
   d715a:	e7ab      	b.n	d70b4 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   d715c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d715e:	2800      	cmp	r0, #0
   d7160:	d0da      	beq.n	d7118 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d7162:	f7ff f936 	bl	d63d2 <_ZN18Adafruit_SPIDevice5beginEv>
   d7166:	2800      	cmp	r0, #0
   d7168:	d0d6      	beq.n	d7118 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d716a:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d716e:	2101      	movs	r1, #1
   d7170:	f002 fcce 	bl	d9b10 <pinMode>
   d7174:	e7b1      	b.n	d70da <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000d7176 <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   d7176:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d7178:	2381      	movs	r3, #129	; 0x81
   d717a:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   d717e:	2202      	movs	r2, #2
   d7180:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d7182:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   d7186:	f7ff ff50 	bl	d702a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   d718a:	b003      	add	sp, #12
   d718c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7190 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
   d7190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7194:	b085      	sub	sp, #20
   d7196:	461f      	mov	r7, r3
   d7198:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d719c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d71a0:	eba8 0902 	sub.w	r9, r8, r2
   d71a4:	eba7 0a01 	sub.w	sl, r7, r1
   d71a8:	f1b9 0f00 	cmp.w	r9, #0
   d71ac:	bfb8      	it	lt
   d71ae:	f1c9 0900 	rsblt	r9, r9, #0
   d71b2:	f1ba 0f00 	cmp.w	sl, #0
   d71b6:	bfb8      	it	lt
   d71b8:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d71bc:	45d1      	cmp	r9, sl
                             uint16_t color) {
   d71be:	4683      	mov	fp, r0
   d71c0:	460c      	mov	r4, r1
   d71c2:	4615      	mov	r5, r2
  if (steep) {
   d71c4:	dd04      	ble.n	d71d0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d71c6:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
   d71c8:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
   d71ca:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
   d71cc:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
   d71ce:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d71d0:	42bc      	cmp	r4, r7
   d71d2:	dd05      	ble.n	d71e0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d71d4:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
   d71d6:	4645      	mov	r5, r8
   d71d8:	4690      	mov	r8, r2
  if (x0 > x1) {
   d71da:	4622      	mov	r2, r4
   d71dc:	463c      	mov	r4, r7
   d71de:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d71e0:	1b3e      	subs	r6, r7, r4
   d71e2:	b2b2      	uxth	r2, r6
   d71e4:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d71e6:	eba8 0205 	sub.w	r2, r8, r5
   d71ea:	2a00      	cmp	r2, #0
   d71ec:	bfb8      	it	lt
   d71ee:	4252      	neglt	r2, r2
   d71f0:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d71f2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d71f6:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d71fa:	4545      	cmp	r5, r8
   d71fc:	bfb4      	ite	lt
   d71fe:	2201      	movlt	r2, #1
   d7200:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d7204:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d7206:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
   d7208:	42bc      	cmp	r4, r7
   d720a:	dc1c      	bgt.n	d7246 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
    if (steep) {
   d720c:	f8db 2000 	ldr.w	r2, [fp]
      writePixel(y0, x0, color);
   d7210:	9303      	str	r3, [sp, #12]
    if (steep) {
   d7212:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
   d7214:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d7218:	bfc7      	ittee	gt
   d721a:	4629      	movgt	r1, r5
   d721c:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
   d721e:	462a      	movle	r2, r5
   d7220:	4621      	movle	r1, r4
   d7222:	4658      	mov	r0, fp
   d7224:	47c0      	blx	r8
    }
    err -= dy;
   d7226:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
   d7228:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d722a:	1ab6      	subs	r6, r6, r2
   d722c:	b2b1      	uxth	r1, r6
   d722e:	b236      	sxth	r6, r6
    if (err < 0) {
   d7230:	2e00      	cmp	r6, #0
   d7232:	da05      	bge.n	d7240 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
      y0 += ystep;
   d7234:	9a02      	ldr	r2, [sp, #8]
   d7236:	4415      	add	r5, r2
      err += dx;
   d7238:	9a00      	ldr	r2, [sp, #0]
   d723a:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d723c:	b22d      	sxth	r5, r5
      err += dx;
   d723e:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
   d7240:	3401      	adds	r4, #1
   d7242:	b224      	sxth	r4, r4
   d7244:	e7e0      	b.n	d7208 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
    }
  }
}
   d7246:	b005      	add	sp, #20
   d7248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d724c <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
   d724c:	4770      	bx	lr

000d724e <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
   d724e:	b410      	push	{r4}
  drawPixel(x, y, color);
   d7250:	6804      	ldr	r4, [r0, #0]
   d7252:	6924      	ldr	r4, [r4, #16]
   d7254:	46a4      	mov	ip, r4
}
   d7256:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
   d725a:	4760      	bx	ip

000d725c <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
   d725c:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
   d725e:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d7260:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
   d7264:	9502      	str	r5, [sp, #8]
   d7266:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d7268:	46a4      	mov	ip, r4
}
   d726a:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
   d726c:	4760      	bx	ip

000d726e <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
   d726e:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
   d7270:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d7272:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
   d7276:	9502      	str	r5, [sp, #8]
   d7278:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d727a:	46a4      	mov	ip, r4
}
   d727c:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
   d727e:	4760      	bx	ip

000d7280 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
   d7280:	b470      	push	{r4, r5, r6}
   d7282:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d7286:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
   d728a:	6804      	ldr	r4, [r0, #0]
   d728c:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d7290:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d7292:	46a4      	mov	ip, r4
}
   d7294:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
   d7296:	4760      	bx	ip

000d7298 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
   d7298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d729c:	461c      	mov	r4, r3
  startWrite();
   d729e:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d72a0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d72a4:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d72a6:	4605      	mov	r5, r0
   d72a8:	4616      	mov	r6, r2
  writeLine(x, y, x, y + h - 1, color);
   d72aa:	3c01      	subs	r4, #1
   d72ac:	4434      	add	r4, r6
                                 uint16_t color) {
   d72ae:	460f      	mov	r7, r1
  writeLine(x, y, x, y + h - 1, color);
   d72b0:	b224      	sxth	r4, r4
  startWrite();
   d72b2:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
   d72b4:	682b      	ldr	r3, [r5, #0]
   d72b6:	f8cd 8004 	str.w	r8, [sp, #4]
   d72ba:	9400      	str	r4, [sp, #0]
   d72bc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d72be:	4628      	mov	r0, r5
   d72c0:	463b      	mov	r3, r7
   d72c2:	4632      	mov	r2, r6
   d72c4:	4639      	mov	r1, r7
   d72c6:	47a0      	blx	r4
  endWrite();
   d72c8:	682b      	ldr	r3, [r5, #0]
   d72ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d72cc:	4628      	mov	r0, r5
}
   d72ce:	b002      	add	sp, #8
   d72d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d72d4:	4718      	bx	r3

000d72d6 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
   d72d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d72da:	461d      	mov	r5, r3
  startWrite();
   d72dc:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d72de:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d72e2:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d72e4:	4604      	mov	r4, r0
   d72e6:	4617      	mov	r7, r2
   d72e8:	460e      	mov	r6, r1
  startWrite();
   d72ea:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
   d72ec:	e9cd 7800 	strd	r7, r8, [sp]
   d72f0:	6822      	ldr	r2, [r4, #0]
   d72f2:	1e6b      	subs	r3, r5, #1
   d72f4:	4433      	add	r3, r6
   d72f6:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d72f8:	4620      	mov	r0, r4
   d72fa:	b21b      	sxth	r3, r3
   d72fc:	463a      	mov	r2, r7
   d72fe:	4631      	mov	r1, r6
   d7300:	47a8      	blx	r5
  endWrite();
   d7302:	6823      	ldr	r3, [r4, #0]
   d7304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7306:	4620      	mov	r0, r4
}
   d7308:	b002      	add	sp, #8
   d730a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d730e:	4718      	bx	r3

000d7310 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d7310:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d7314:	461e      	mov	r6, r3
  startWrite();
   d7316:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d7318:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
   d731c:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d731e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d7322:	460c      	mov	r4, r1
   d7324:	4605      	mov	r5, r0
   d7326:	4617      	mov	r7, r2
  startWrite();
   d7328:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
   d732a:	4426      	add	r6, r4
   d732c:	42b4      	cmp	r4, r6
   d732e:	682b      	ldr	r3, [r5, #0]
   d7330:	da0b      	bge.n	d734a <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
   d7332:	f8cd 8000 	str.w	r8, [sp]
   d7336:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d733a:	4621      	mov	r1, r4
   d733c:	464b      	mov	r3, r9
   d733e:	463a      	mov	r2, r7
   d7340:	4628      	mov	r0, r5
   d7342:	3401      	adds	r4, #1
   d7344:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
   d7346:	b224      	sxth	r4, r4
   d7348:	e7f0      	b.n	d732c <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
   d734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d734c:	4628      	mov	r0, r5
}
   d734e:	b002      	add	sp, #8
   d7350:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d7354:	4718      	bx	r3

000d7356 <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d7356:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d7358:	6802      	ldr	r2, [r0, #0]
   d735a:	9101      	str	r1, [sp, #4]
   d735c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d7360:	9100      	str	r1, [sp, #0]
   d7362:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d7364:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d7368:	2200      	movs	r2, #0
   d736a:	4611      	mov	r1, r2
   d736c:	47a0      	blx	r4
}
   d736e:	b002      	add	sp, #8
   d7370:	bd10      	pop	{r4, pc}

000d7372 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d7372:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d7376:	461d      	mov	r5, r3
  startWrite();
   d7378:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d737a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
   d737e:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d7380:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d7384:	4604      	mov	r4, r0
   d7386:	460f      	mov	r7, r1
   d7388:	4616      	mov	r6, r2
  startWrite();
   d738a:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
   d738c:	6823      	ldr	r3, [r4, #0]
   d738e:	f8cd 8000 	str.w	r8, [sp]
   d7392:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d7396:	4632      	mov	r2, r6
   d7398:	462b      	mov	r3, r5
   d739a:	4639      	mov	r1, r7
   d739c:	4620      	mov	r0, r4
   d739e:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
   d73a0:	6823      	ldr	r3, [r4, #0]
   d73a2:	f8cd 8000 	str.w	r8, [sp]
   d73a6:	f109 32ff 	add.w	r2, r9, #4294967295
   d73aa:	4432      	add	r2, r6
   d73ac:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d73b0:	4639      	mov	r1, r7
   d73b2:	462b      	mov	r3, r5
   d73b4:	4620      	mov	r0, r4
   d73b6:	b212      	sxth	r2, r2
   d73b8:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
   d73ba:	6823      	ldr	r3, [r4, #0]
   d73bc:	f8cd 8000 	str.w	r8, [sp]
   d73c0:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d73c4:	4632      	mov	r2, r6
   d73c6:	464b      	mov	r3, r9
   d73c8:	4639      	mov	r1, r7
   d73ca:	4620      	mov	r0, r4
   d73cc:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
   d73ce:	1e6b      	subs	r3, r5, #1
   d73d0:	19d9      	adds	r1, r3, r7
   d73d2:	6823      	ldr	r3, [r4, #0]
   d73d4:	f8cd 8000 	str.w	r8, [sp]
   d73d8:	6a1d      	ldr	r5, [r3, #32]
   d73da:	4620      	mov	r0, r4
   d73dc:	464b      	mov	r3, r9
   d73de:	4632      	mov	r2, r6
   d73e0:	b209      	sxth	r1, r1
   d73e2:	47a8      	blx	r5
  endWrite();
   d73e4:	6823      	ldr	r3, [r4, #0]
   d73e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d73e8:	4620      	mov	r0, r4
}
   d73ea:	b002      	add	sp, #8
   d73ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d73f0:	4718      	bx	r3

000d73f2 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
   d73f2:	4770      	bx	lr

000d73f4 <_ZN12Adafruit_GFX8drawLineEsssst>:
                            uint16_t color) {
   d73f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if (x0 == x1) {
   d73f8:	4299      	cmp	r1, r3
                            uint16_t color) {
   d73fa:	4616      	mov	r6, r2
   d73fc:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d7400:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d7404:	6802      	ldr	r2, [r0, #0]
   d7406:	4680      	mov	r8, r0
   d7408:	460d      	mov	r5, r1
   d740a:	461c      	mov	r4, r3
  if (x0 == x1) {
   d740c:	d113      	bne.n	d7436 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
    if (y0 > y1)
   d740e:	42be      	cmp	r6, r7
   d7410:	bfc8      	it	gt
   d7412:	4633      	movgt	r3, r6
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d7414:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    if (y0 > y1)
   d7418:	bfc4      	itt	gt
   d741a:	463e      	movgt	r6, r7
   d741c:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d741e:	1c7b      	adds	r3, r7, #1
   d7420:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d7422:	1b9b      	subs	r3, r3, r6
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d7424:	b21b      	sxth	r3, r3
   d7426:	4632      	mov	r2, r6
   d7428:	4629      	mov	r1, r5
   d742a:	4640      	mov	r0, r8
   d742c:	46a4      	mov	ip, r4
}
   d742e:	b003      	add	sp, #12
   d7430:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d7434:	4760      	bx	ip
  } else if (y0 == y1) {
   d7436:	42be      	cmp	r6, r7
   d7438:	d10a      	bne.n	d7450 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
    if (x0 > x1)
   d743a:	4299      	cmp	r1, r3
   d743c:	bfc2      	ittt	gt
   d743e:	460b      	movgt	r3, r1
   d7440:	4625      	movgt	r5, r4
   d7442:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d7444:	1c63      	adds	r3, r4, #1
   d7446:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d744a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d744c:	1b5b      	subs	r3, r3, r5
   d744e:	e7e9      	b.n	d7424 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
    startWrite();
   d7450:	6953      	ldr	r3, [r2, #20]
   d7452:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
   d7454:	e9cd 7900 	strd	r7, r9, [sp]
   d7458:	f8d8 3000 	ldr.w	r3, [r8]
   d745c:	4640      	mov	r0, r8
   d745e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d7460:	4632      	mov	r2, r6
   d7462:	4623      	mov	r3, r4
   d7464:	4629      	mov	r1, r5
   d7466:	47b8      	blx	r7
    endWrite();
   d7468:	f8d8 3000 	ldr.w	r3, [r8]
   d746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d746e:	4640      	mov	r0, r8
}
   d7470:	b003      	add	sp, #12
   d7472:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
   d7476:	4718      	bx	r3

000d7478 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   d7478:	f001 0303 	and.w	r3, r1, #3
   d747c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d7480:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
   d7482:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
   d7484:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d7488:	bf59      	ittee	pl
   d748a:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   d748c:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
   d748e:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   d7490:	81c3      	strhmi	r3, [r0, #14]
}
   d7492:	4770      	bx	lr

000d7494 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d7494:	b530      	push	{r4, r5, lr}
   d7496:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
   d7498:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
   d749a:	4a07      	ldr	r2, [pc, #28]	; (d74b8 <_ZN12Adafruit_GFXC1Ess+0x24>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d749c:	4d07      	ldr	r5, [pc, #28]	; (d74bc <_ZN12Adafruit_GFXC1Ess+0x28>)
   d749e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d74a0:	2400      	movs	r4, #0
  _width = WIDTH;
   d74a2:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
   d74a4:	f04f 31ff 	mov.w	r1, #4294967295
   d74a8:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d74ac:	6044      	str	r4, [r0, #4]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d74ae:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
   d74b0:	6104      	str	r4, [r0, #16]
  _cp437 = false;
   d74b2:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
   d74b4:	6204      	str	r4, [r0, #32]
}
   d74b6:	bd30      	pop	{r4, r5, pc}
   d74b8:	01000101 	.word	0x01000101
   d74bc:	000de438 	.word	0x000de438

000d74c0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
   d74c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d74c4:	b089      	sub	sp, #36	; 0x24
   d74c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
   d74ca:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
   d74cc:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d74d0:	9304      	str	r3, [sp, #16]
   d74d2:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  startWrite();
   d74d6:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
   d74d8:	9305      	str	r3, [sp, #20]
   d74da:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d74de:	4604      	mov	r4, r0
  startWrite();
   d74e0:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d74e2:	f118 0207 	adds.w	r2, r8, #7
  startWrite();
   d74e6:	f04f 0600 	mov.w	r6, #0
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d74ea:	bf48      	it	mi
   d74ec:	f108 020e 	addmi.w	r2, r8, #14
   d74f0:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
   d74f4:	9601      	str	r6, [sp, #4]
  uint8_t byte = 0;
   d74f6:	4635      	mov	r5, r6
   d74f8:	9b03      	ldr	r3, [sp, #12]
   d74fa:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
   d74fc:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d7500:	189a      	adds	r2, r3, r2
   d7502:	9b05      	ldr	r3, [sp, #20]
   d7504:	428b      	cmp	r3, r1
   d7506:	b212      	sxth	r2, r2
   d7508:	dd27      	ble.n	d755a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d750a:	9b04      	ldr	r3, [sp, #16]
   d750c:	4433      	add	r3, r6
  for (int16_t j = 0; j < h; j++, y++) {
   d750e:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d7512:	9306      	str	r3, [sp, #24]
   d7514:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
   d7518:	4580      	cmp	r8, r0
   d751a:	fa1f f189 	uxth.w	r1, r9
   d751e:	dd17      	ble.n	d7550 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
      if (i & 7)
   d7520:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d7522:	bf05      	ittet	eq
   d7524:	9b06      	ldreq	r3, [sp, #24]
   d7526:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
   d7528:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d752a:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
   d752c:	bf18      	it	ne
   d752e:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
   d7530:	062b      	lsls	r3, r5, #24
   d7532:	d50a      	bpl.n	d754a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
        writePixel(x + i, y, color);
   d7534:	9b02      	ldr	r3, [sp, #8]
   d7536:	6820      	ldr	r0, [r4, #0]
   d7538:	9207      	str	r2, [sp, #28]
   d753a:	4419      	add	r1, r3
   d753c:	6983      	ldr	r3, [r0, #24]
   d753e:	b209      	sxth	r1, r1
   d7540:	461f      	mov	r7, r3
   d7542:	4620      	mov	r0, r4
   d7544:	4653      	mov	r3, sl
   d7546:	47b8      	blx	r7
   d7548:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
   d754a:	f109 0901 	add.w	r9, r9, #1
   d754e:	e7e1      	b.n	d7514 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
  for (int16_t j = 0; j < h; j++, y++) {
   d7550:	9b01      	ldr	r3, [sp, #4]
   d7552:	3301      	adds	r3, #1
   d7554:	9301      	str	r3, [sp, #4]
   d7556:	445e      	add	r6, fp
   d7558:	e7ce      	b.n	d74f8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
  endWrite();
   d755a:	6823      	ldr	r3, [r4, #0]
   d755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d755e:	4620      	mov	r0, r4
}
   d7560:	b009      	add	sp, #36	; 0x24
   d7562:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
   d7566:	4718      	bx	r3

000d7568 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
   d7568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d756c:	ed2d 8b02 	vpush	{d8}
   d7570:	b091      	sub	sp, #68	; 0x44
   d7572:	4616      	mov	r6, r2
  if (!gfxFont) { // 'Classic' built-in font
   d7574:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
   d7576:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d757a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d757e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d7582:	9103      	str	r1, [sp, #12]
   d7584:	461f      	mov	r7, r3
   d7586:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d758a:	9304      	str	r3, [sp, #16]
   d758c:	4683      	mov	fp, r0
  if (!gfxFont) { // 'Classic' built-in font
   d758e:	2a00      	cmp	r2, #0
   d7590:	f040 80c5 	bne.w	d771e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
   d7594:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d7598:	428b      	cmp	r3, r1
   d759a:	f340 814c 	ble.w	d7836 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d759e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d75a2:	42b3      	cmp	r3, r6
   d75a4:	f340 8147 	ble.w	d7836 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d75a8:	2306      	movs	r3, #6
   d75aa:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
   d75ae:	2b00      	cmp	r3, #0
   d75b0:	f340 8141 	ble.w	d7836 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
   d75b4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d75b8:	2b00      	cmp	r3, #0
   d75ba:	f340 813c 	ble.w	d7836 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
   d75be:	7f03      	ldrb	r3, [r0, #28]
   d75c0:	b91b      	cbnz	r3, d75ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d75c2:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
   d75c4:	bf84      	itt	hi
   d75c6:	3701      	addhi	r7, #1
   d75c8:	b2ff      	uxtbhi	r7, r7
    startWrite();
   d75ca:	f8db 3000 	ldr.w	r3, [fp]
   d75ce:	4658      	mov	r0, fp
   d75d0:	695b      	ldr	r3, [r3, #20]
   d75d2:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d75d4:	2205      	movs	r2, #5
   d75d6:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d75d8:	2200      	movs	r2, #0
   d75da:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d75dc:	4a98      	ldr	r2, [pc, #608]	; (d7840 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d75de:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d75e2:	18d3      	adds	r3, r2, r3
   d75e4:	930c      	str	r3, [sp, #48]	; 0x30
   d75e6:	b2b3      	uxth	r3, r6
   d75e8:	9306      	str	r3, [sp, #24]
   d75ea:	9a05      	ldr	r2, [sp, #20]
   d75ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d75ee:	5c9b      	ldrb	r3, [r3, r2]
   d75f0:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d75f2:	b2ab      	uxth	r3, r5
   d75f4:	930b      	str	r3, [sp, #44]	; 0x2c
   d75f6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d75fa:	9308      	str	r3, [sp, #32]
   d75fc:	9b03      	ldr	r3, [sp, #12]
   d75fe:	fb02 f905 	mul.w	r9, r2, r5
   d7602:	fa19 f983 	uxtah	r9, r9, r3
   d7606:	fa0f f389 	sxth.w	r3, r9
   d760a:	ee08 3a10 	vmov	s16, r3
   d760e:	2308      	movs	r3, #8
   d7610:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
   d7612:	9b03      	ldr	r3, [sp, #12]
   d7614:	eb02 0a03 	add.w	sl, r2, r3
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d7618:	f04f 0900 	mov.w	r9, #0
            writePixel(x + i, y + j, bg);
   d761c:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
   d7620:	9a07      	ldr	r2, [sp, #28]
   d7622:	f8db 3000 	ldr.w	r3, [fp]
   d7626:	07d2      	lsls	r2, r2, #31
   d7628:	d552      	bpl.n	d76d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
   d762a:	2d01      	cmp	r5, #1
   d762c:	fa1f f289 	uxth.w	r2, r9
   d7630:	d13e      	bne.n	d76b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d7632:	2c01      	cmp	r4, #1
   d7634:	d13c      	bne.n	d76b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
   d7636:	699b      	ldr	r3, [r3, #24]
   d7638:	9906      	ldr	r1, [sp, #24]
   d763a:	461f      	mov	r7, r3
   d763c:	9b04      	ldr	r3, [sp, #16]
   d763e:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
   d7640:	b212      	sxth	r2, r2
   d7642:	4651      	mov	r1, sl
   d7644:	4658      	mov	r0, fp
   d7646:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d7648:	f109 0301 	add.w	r3, r9, #1
   d764c:	fa4f f983 	sxtb.w	r9, r3
   d7650:	9b07      	ldr	r3, [sp, #28]
   d7652:	085b      	lsrs	r3, r3, #1
   d7654:	9307      	str	r3, [sp, #28]
   d7656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7658:	3b01      	subs	r3, #1
   d765a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d765e:	930a      	str	r3, [sp, #40]	; 0x28
   d7660:	d1de      	bne.n	d7620 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d7662:	9f05      	ldr	r7, [sp, #20]
   d7664:	3701      	adds	r7, #1
   d7666:	b27b      	sxtb	r3, r7
   d7668:	9305      	str	r3, [sp, #20]
   d766a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d766c:	3b01      	subs	r3, #1
   d766e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d7672:	9309      	str	r3, [sp, #36]	; 0x24
   d7674:	d1b9      	bne.n	d75ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
   d7676:	9b04      	ldr	r3, [sp, #16]
   d7678:	4543      	cmp	r3, r8
   d767a:	d00f      	beq.n	d769c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
   d767c:	2d01      	cmp	r5, #1
   d767e:	f8db 3000 	ldr.w	r3, [fp]
   d7682:	d13b      	bne.n	d76fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d7684:	2c01      	cmp	r4, #1
   d7686:	d139      	bne.n	d76fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
   d7688:	9908      	ldr	r1, [sp, #32]
   d768a:	f8cd 8000 	str.w	r8, [sp]
   d768e:	3105      	adds	r1, #5
   d7690:	6a1c      	ldr	r4, [r3, #32]
   d7692:	4632      	mov	r2, r6
   d7694:	2308      	movs	r3, #8
   d7696:	b209      	sxth	r1, r1
   d7698:	4658      	mov	r0, fp
   d769a:	47a0      	blx	r4
    endWrite();
   d769c:	f8db 3000 	ldr.w	r3, [fp]
   d76a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d76a2:	4658      	mov	r0, fp
}
   d76a4:	b011      	add	sp, #68	; 0x44
   d76a6:	ecbd 8b02 	vpop	{d8}
   d76aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d76ae:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
   d76b0:	9906      	ldr	r1, [sp, #24]
   d76b2:	fb14 f202 	smulbb	r2, r4, r2
   d76b6:	440a      	add	r2, r1
   d76b8:	9904      	ldr	r1, [sp, #16]
   d76ba:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d76bc:	9400      	str	r4, [sp, #0]
   d76be:	69db      	ldr	r3, [r3, #28]
   d76c0:	ee18 1a10 	vmov	r1, s16
   d76c4:	461f      	mov	r7, r3
   d76c6:	b212      	sxth	r2, r2
   d76c8:	462b      	mov	r3, r5
   d76ca:	4658      	mov	r0, fp
   d76cc:	47b8      	blx	r7
   d76ce:	e7bb      	b.n	d7648 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
   d76d0:	9a04      	ldr	r2, [sp, #16]
   d76d2:	4542      	cmp	r2, r8
   d76d4:	d0b8      	beq.n	d7648 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
   d76d6:	2d01      	cmp	r5, #1
   d76d8:	fa1f f289 	uxth.w	r2, r9
   d76dc:	d107      	bne.n	d76ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d76de:	2c01      	cmp	r4, #1
   d76e0:	d105      	bne.n	d76ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
   d76e2:	699b      	ldr	r3, [r3, #24]
   d76e4:	9906      	ldr	r1, [sp, #24]
   d76e6:	461f      	mov	r7, r3
   d76e8:	440a      	add	r2, r1
   d76ea:	4643      	mov	r3, r8
   d76ec:	e7a8      	b.n	d7640 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d76ee:	9906      	ldr	r1, [sp, #24]
   d76f0:	f8cd 8004 	str.w	r8, [sp, #4]
   d76f4:	fb14 f202 	smulbb	r2, r4, r2
   d76f8:	440a      	add	r2, r1
   d76fa:	e7df      	b.n	d76bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
   d76fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d76fe:	f8cd 8004 	str.w	r8, [sp, #4]
   d7702:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d7706:	9a08      	ldr	r2, [sp, #32]
   d7708:	00e4      	lsls	r4, r4, #3
   d770a:	440a      	add	r2, r1
   d770c:	4611      	mov	r1, r2
   d770e:	9400      	str	r4, [sp, #0]
   d7710:	69dc      	ldr	r4, [r3, #28]
   d7712:	4632      	mov	r2, r6
   d7714:	462b      	mov	r3, r5
   d7716:	b209      	sxth	r1, r1
   d7718:	4658      	mov	r0, fp
   d771a:	47a0      	blx	r4
    endWrite();
   d771c:	e7be      	b.n	d769c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d771e:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
   d7720:	6851      	ldr	r1, [r2, #4]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d7722:	6812      	ldr	r2, [r2, #0]
   d7724:	920d      	str	r2, [sp, #52]	; 0x34
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d7726:	1aff      	subs	r7, r7, r3
  return gfxFont->glyph + c;
   d7728:	b2ff      	uxtb	r7, r7
   d772a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d772e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d7732:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
   d7734:	789a      	ldrb	r2, [r3, #2]
   d7736:	9209      	str	r2, [sp, #36]	; 0x24
   d7738:	78da      	ldrb	r2, [r3, #3]
   d773a:	920b      	str	r2, [sp, #44]	; 0x2c
    if (size_x > 1 || size_y > 1) {
   d773c:	2d01      	cmp	r5, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d773e:	f993 2005 	ldrsb.w	r2, [r3, #5]
           yo = pgm_read_byte(&glyph->yOffset);
   d7742:	f993 a006 	ldrsb.w	sl, [r3, #6]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d7746:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
   d7748:	d801      	bhi.n	d774e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d774a:	2c01      	cmp	r4, #1
   d774c:	d957      	bls.n	d77fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
   d774e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d7752:	9308      	str	r3, [sp, #32]
      yo16 = yo;
   d7754:	fa0f f38a 	sxth.w	r3, sl
   d7758:	9307      	str	r3, [sp, #28]
    startWrite();
   d775a:	f8db 3000 	ldr.w	r3, [fp]
   d775e:	4658      	mov	r0, fp
   d7760:	695b      	ldr	r3, [r3, #20]
   d7762:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7764:	b2b3      	uxth	r3, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d7766:	f04f 0800 	mov.w	r8, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d776a:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
   d776c:	fa1a f386 	uxtah	r3, sl, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d7770:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
   d7772:	4647      	mov	r7, r8
            writePixel(x + xo + xx, y + yo + yy, color);
   d7774:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
   d7776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7778:	429f      	cmp	r7, r3
   d777a:	d28f      	bcs.n	d769c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d777c:	9b07      	ldr	r3, [sp, #28]
   d777e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d7780:	443b      	add	r3, r7
   d7782:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
   d7786:	2200      	movs	r2, #0
   d7788:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
   d778a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d778c:	b21b      	sxth	r3, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d778e:	eb02 0a07 	add.w	sl, r2, r7
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7792:	ee08 3a10 	vmov	s16, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d7796:	fa0f fa8a 	sxth.w	sl, sl
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d779a:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
   d779c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d779e:	9905      	ldr	r1, [sp, #20]
   d77a0:	4291      	cmp	r1, r2
   d77a2:	d241      	bcs.n	d7828 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
   d77a4:	1c5a      	adds	r2, r3, #1
   d77a6:	b2d2      	uxtb	r2, r2
   d77a8:	075b      	lsls	r3, r3, #29
   d77aa:	920c      	str	r2, [sp, #48]	; 0x30
   d77ac:	d107      	bne.n	d77be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
   d77ae:	9b06      	ldr	r3, [sp, #24]
   d77b0:	9906      	ldr	r1, [sp, #24]
   d77b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d77b4:	3301      	adds	r3, #1
   d77b6:	b29b      	uxth	r3, r3
   d77b8:	f812 9001 	ldrb.w	r9, [r2, r1]
   d77bc:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
   d77be:	f019 0f80 	tst.w	r9, #128	; 0x80
   d77c2:	d012      	beq.n	d77ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
   d77c4:	2d01      	cmp	r5, #1
   d77c6:	f8db 3000 	ldr.w	r3, [fp]
   d77ca:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d77ce:	d11a      	bne.n	d7806 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d77d0:	2c01      	cmp	r4, #1
   d77d2:	d118      	bne.n	d7806 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
   d77d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d77d6:	699b      	ldr	r3, [r3, #24]
   d77d8:	4411      	add	r1, r2
   d77da:	9a05      	ldr	r2, [sp, #20]
   d77dc:	4411      	add	r1, r2
   d77de:	461e      	mov	r6, r3
   d77e0:	4652      	mov	r2, sl
   d77e2:	9b04      	ldr	r3, [sp, #16]
   d77e4:	b209      	sxth	r1, r1
   d77e6:	4658      	mov	r0, fp
   d77e8:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
   d77ea:	9e05      	ldr	r6, [sp, #20]
   d77ec:	3601      	adds	r6, #1
   d77ee:	b2f3      	uxtb	r3, r6
        bits <<= 1;
   d77f0:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
   d77f4:	9305      	str	r3, [sp, #20]
        bits <<= 1;
   d77f6:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
   d77fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (xx = 0; xx < w; xx++) {
   d77fc:	e7ce      	b.n	d779c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
   d77fe:	2300      	movs	r3, #0
   d7800:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d7804:	e7a9      	b.n	d775a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7806:	9805      	ldr	r0, [sp, #20]
   d7808:	9a08      	ldr	r2, [sp, #32]
   d780a:	4402      	add	r2, r0
   d780c:	fb02 1105 	mla	r1, r2, r5, r1
   d7810:	9a04      	ldr	r2, [sp, #16]
   d7812:	e9cd 4200 	strd	r4, r2, [sp]
   d7816:	69db      	ldr	r3, [r3, #28]
   d7818:	ee18 2a10 	vmov	r2, s16
   d781c:	461e      	mov	r6, r3
   d781e:	b209      	sxth	r1, r1
   d7820:	462b      	mov	r3, r5
   d7822:	4658      	mov	r0, fp
   d7824:	47b0      	blx	r6
   d7826:	e7e0      	b.n	d77ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d7828:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
   d782a:	3701      	adds	r7, #1
   d782c:	4498      	add	r8, r3
   d782e:	fa5f f888 	uxtb.w	r8, r8
   d7832:	b2ff      	uxtb	r7, r7
   d7834:	e79f      	b.n	d7776 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d7836:	b011      	add	sp, #68	; 0x44
   d7838:	ecbd 8b02 	vpop	{d8}
   d783c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7840:	000ddf30 	.word	0x000ddf30

000d7844 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d7844:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
   d7846:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d7848:	b085      	sub	sp, #20
   d784a:	4604      	mov	r4, r0
   d784c:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
   d784e:	2a00      	cmp	r2, #0
   d7850:	d134      	bne.n	d78bc <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
   d7852:	290a      	cmp	r1, #10
   d7854:	d108      	bne.n	d7868 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
   d7856:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
   d7858:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
   d785a:	7e42      	ldrb	r2, [r0, #25]
   d785c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
   d7860:	8263      	strh	r3, [r4, #18]
}
   d7862:	2001      	movs	r0, #1
   d7864:	b005      	add	sp, #20
   d7866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
   d7868:	290d      	cmp	r1, #13
   d786a:	d0fa      	beq.n	d7862 <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d786c:	7ee1      	ldrb	r1, [r4, #27]
   d786e:	7e00      	ldrb	r0, [r0, #24]
   d7870:	7e65      	ldrb	r5, [r4, #25]
   d7872:	b171      	cbz	r1, d7892 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d7874:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d7878:	2106      	movs	r1, #6
   d787a:	fb11 6100 	smlabb	r1, r1, r0, r6
   d787e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d7882:	42b1      	cmp	r1, r6
   d7884:	bfc1      	itttt	gt
   d7886:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
   d788a:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
   d788c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d7890:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d7892:	8ae2      	ldrh	r2, [r4, #22]
   d7894:	9201      	str	r2, [sp, #4]
   d7896:	8aa2      	ldrh	r2, [r4, #20]
   d7898:	9200      	str	r2, [sp, #0]
   d789a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d789e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d78a2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d78a6:	4620      	mov	r0, r4
   d78a8:	f7ff fe5e 	bl	d7568 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
   d78ac:	7e23      	ldrb	r3, [r4, #24]
   d78ae:	8a22      	ldrh	r2, [r4, #16]
   d78b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d78b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
   d78b8:	8223      	strh	r3, [r4, #16]
   d78ba:	e7d2      	b.n	d7862 <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
   d78bc:	290a      	cmp	r1, #10
   d78be:	d107      	bne.n	d78d0 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
   d78c0:	2300      	movs	r3, #0
   d78c2:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d78c4:	7b13      	ldrb	r3, [r2, #12]
   d78c6:	7e41      	ldrb	r1, [r0, #25]
      cursor_y +=
   d78c8:	8a42      	ldrh	r2, [r0, #18]
   d78ca:	fb01 2303 	mla	r3, r1, r3, r2
   d78ce:	e7c7      	b.n	d7860 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
   d78d0:	290d      	cmp	r1, #13
   d78d2:	d0c6      	beq.n	d7862 <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
   d78d4:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d78d6:	42a9      	cmp	r1, r5
   d78d8:	d3c3      	bcc.n	d7862 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d78da:	7a91      	ldrb	r1, [r2, #10]
   d78dc:	4299      	cmp	r1, r3
   d78de:	d3c0      	bcc.n	d7862 <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
   d78e0:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
   d78e2:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
   d78e4:	b2ed      	uxtb	r5, r5
   d78e6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
   d78ea:	78af      	ldrb	r7, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d78ec:	b32f      	cbz	r7, d793a <_ZN12Adafruit_GFX5writeEh+0xf6>
   d78ee:	78e9      	ldrb	r1, [r5, #3]
   d78f0:	b319      	cbz	r1, d793a <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d78f2:	7ee1      	ldrb	r1, [r4, #27]
   d78f4:	7e00      	ldrb	r0, [r0, #24]
   d78f6:	7e66      	ldrb	r6, [r4, #25]
   d78f8:	b191      	cbz	r1, d7920 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d78fa:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d78fe:	4439      	add	r1, r7
   d7900:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d7904:	fb00 7101 	mla	r1, r0, r1, r7
   d7908:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d790c:	42b9      	cmp	r1, r7
   d790e:	dd07      	ble.n	d7920 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
   d7910:	2700      	movs	r7, #0
   d7912:	8227      	strh	r7, [r4, #16]
   d7914:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d7918:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
   d791a:	fb02 1206 	mla	r2, r2, r6, r1
   d791e:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d7920:	8ae2      	ldrh	r2, [r4, #22]
   d7922:	9201      	str	r2, [sp, #4]
   d7924:	8aa2      	ldrh	r2, [r4, #20]
   d7926:	9200      	str	r2, [sp, #0]
   d7928:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d792c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d7930:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d7934:	4620      	mov	r0, r4
   d7936:	f7ff fe17 	bl	d7568 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d793a:	7929      	ldrb	r1, [r5, #4]
   d793c:	7e23      	ldrb	r3, [r4, #24]
        cursor_x +=
   d793e:	8a22      	ldrh	r2, [r4, #16]
   d7940:	fb01 2303 	mla	r3, r1, r3, r2
   d7944:	e7b8      	b.n	d78b8 <_ZN12Adafruit_GFX5writeEh+0x74>

000d7946 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
   d7946:	2901      	cmp	r1, #1
   d7948:	bf38      	it	cc
   d794a:	2101      	movcc	r1, #1
   d794c:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
   d794e:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
   d7950:	4770      	bx	lr

000d7952 <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   d7952:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7956:	4604      	mov	r4, r0
   d7958:	b08b      	sub	sp, #44	; 0x2c
   d795a:	f000 fb71 	bl	d8040 <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d795e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   d7962:	f9b4 503a 	ldrsh.w	r5, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d7966:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d796a:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d796e:	1dda      	adds	r2, r3, #7
   d7970:	bf48      	it	mi
   d7972:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   d7976:	2340      	movs	r3, #64	; 0x40
   d7978:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   d797c:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   d7980:	9303      	str	r3, [sp, #12]
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   d7982:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d7984:	68db      	ldr	r3, [r3, #12]
   d7986:	3b01      	subs	r3, #1
   d7988:	b29b      	uxth	r3, r3
   d798a:	9304      	str	r3, [sp, #16]
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d798c:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
  uint8_t bytes_per_page = WIDTH;
   d7990:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   d7992:	2d00      	cmp	r5, #0
   d7994:	bfb8      	it	lt
   d7996:	3507      	addlt	r5, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d7998:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d799c:	45b9      	cmp	r9, r7
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   d799e:	f107 0201 	add.w	r2, r7, #1
  uint8_t first_page = window_y1 / 8;
   d79a2:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d79a6:	bf28      	it	cs
   d79a8:	46b9      	movcs	r9, r7
    bytes_remaining -= (WIDTH - 1) - page_end;
   d79aa:	fa52 f383 	uxtab	r3, r2, r3
   d79ae:	fb05 9a07 	mla	sl, r5, r7, r9
   d79b2:	9306      	str	r3, [sp, #24]
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};

      digitalWrite(dcPin, LOW);
   d79b4:	f04f 0b00 	mov.w	fp, #0
  for (uint8_t p = first_page; p < pages; p++) {
   d79b8:	9b03      	ldr	r3, [sp, #12]
   d79ba:	429d      	cmp	r5, r3
   d79bc:	d26b      	bcs.n	d7a96 <_ZN15Adafruit_SH110X7displayEv+0x144>
    ptr += page_start;
   d79be:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   d79c0:	7a26      	ldrb	r6, [r4, #8]
   d79c2:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   d79c6:	eb03 080a 	add.w	r8, r3, sl
    bytes_remaining -= (WIDTH - 1) - page_end;
   d79ca:	9b06      	ldr	r3, [sp, #24]
   d79cc:	444a      	add	r2, r9
   d79ce:	1b9e      	subs	r6, r3, r6
    if (i2c_dev) { // I2C
   d79d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d79d2:	1111      	asrs	r1, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   d79d4:	eba6 0609 	sub.w	r6, r6, r9
   d79d8:	f1a5 0050 	sub.w	r0, r5, #80	; 0x50
   d79dc:	b2f6      	uxtb	r6, r6
    if (i2c_dev) { // I2C
   d79de:	b2c0      	uxtb	r0, r0
   d79e0:	3110      	adds	r1, #16
   d79e2:	f002 020f 	and.w	r2, r2, #15
   d79e6:	2b00      	cmp	r3, #0
   d79e8:	d035      	beq.n	d7a56 <_ZN15Adafruit_SH110X7displayEv+0x104>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d79ea:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   d79ee:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
      i2c_dev->setSpeed(i2c_preclk);
   d79f2:	4618      	mov	r0, r3
   d79f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d79f6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      uint8_t cmd[] = {
   d79fa:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   d79fe:	f7fe fef0 	bl	d67e2 <_ZN18Adafruit_I2CDevice8setSpeedEm>
      i2c_dev->write(cmd, 4);
   d7a02:	2301      	movs	r3, #1
   d7a04:	e9cd bb00 	strd	fp, fp, [sp]
   d7a08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d7a0a:	2204      	movs	r2, #4
   d7a0c:	a909      	add	r1, sp, #36	; 0x24
   d7a0e:	f7fe fe63 	bl	d66d8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d7a12:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d7a16:	9305      	str	r3, [sp, #20]
      while (bytes_remaining) {
   d7a18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d7a1a:	b1ae      	cbz	r6, d7a48 <_ZN15Adafruit_SH110X7displayEv+0xf6>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d7a1c:	9b05      	ldr	r3, [sp, #20]
   d7a1e:	42b3      	cmp	r3, r6
   d7a20:	bf28      	it	cs
   d7a22:	4633      	movcs	r3, r6
   d7a24:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   d7a26:	2301      	movs	r3, #1
   d7a28:	9301      	str	r3, [sp, #4]
   d7a2a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   d7a2e:	9300      	str	r3, [sp, #0]
   d7a30:	4641      	mov	r1, r8
   d7a32:	2301      	movs	r3, #1
   d7a34:	9207      	str	r2, [sp, #28]
   d7a36:	f7fe fe4f 	bl	d66d8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   d7a3a:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   d7a3c:	1ab6      	subs	r6, r6, r2
        ptr += to_write;
   d7a3e:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   d7a40:	b2f6      	uxtb	r6, r6
   d7a42:	f000 fafd 	bl	d8040 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   d7a46:	e7e7      	b.n	d7a18 <_ZN15Adafruit_SH110X7displayEv+0xc6>
      i2c_dev->setSpeed(i2c_postclk);
   d7a48:	6b21      	ldr	r1, [r4, #48]	; 0x30
   d7a4a:	f7fe feca 	bl	d67e2 <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   d7a4e:	3501      	adds	r5, #1
   d7a50:	b2ed      	uxtb	r5, r5
   d7a52:	44ba      	add	sl, r7
   d7a54:	e7b0      	b.n	d79b8 <_ZN15Adafruit_SH110X7displayEv+0x66>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d7a56:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   d7a5a:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
      digitalWrite(dcPin, LOW);
   d7a5e:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d7a62:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   d7a66:	4619      	mov	r1, r3
   d7a68:	9305      	str	r3, [sp, #20]
   d7a6a:	f002 f862 	bl	d9b32 <digitalWrite>
      spi_dev->write(cmd, 3);
   d7a6e:	9b05      	ldr	r3, [sp, #20]
   d7a70:	9300      	str	r3, [sp, #0]
   d7a72:	2203      	movs	r2, #3
   d7a74:	a909      	add	r1, sp, #36	; 0x24
   d7a76:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7a78:	f7fe fd9d 	bl	d65b6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   d7a7c:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d7a80:	2101      	movs	r1, #1
   d7a82:	f002 f856 	bl	d9b32 <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   d7a86:	9b05      	ldr	r3, [sp, #20]
   d7a88:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7a8a:	9300      	str	r3, [sp, #0]
   d7a8c:	4632      	mov	r2, r6
   d7a8e:	4641      	mov	r1, r8
   d7a90:	f7fe fd91 	bl	d65b6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d7a94:	e7db      	b.n	d7a4e <_ZN15Adafruit_SH110X7displayEv+0xfc>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   d7a96:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   d7a9a:	f04f 33ff 	mov.w	r3, #4294967295
   d7a9e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   d7aa2:	b00b      	add	sp, #44	; 0x2c
   d7aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7aa8 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   d7aa8:	b530      	push	{r4, r5, lr}
   d7aaa:	b085      	sub	sp, #20
   d7aac:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d7aae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7ab0:	9503      	str	r5, [sp, #12]
   d7ab2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d7ab4:	9502      	str	r5, [sp, #8]
   d7ab6:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d7aba:	e9cd 3500 	strd	r3, r5, [sp]
   d7abe:	4613      	mov	r3, r2
   d7ac0:	460a      	mov	r2, r1
   d7ac2:	2101      	movs	r1, #1
   d7ac4:	f7ff fa48 	bl	d6f58 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   d7ac8:	4b03      	ldr	r3, [pc, #12]	; (d7ad8 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   d7aca:	6023      	str	r3, [r4, #0]
   d7acc:	4620      	mov	r0, r4
   d7ace:	2300      	movs	r3, #0
   d7ad0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d7ad4:	b005      	add	sp, #20
   d7ad6:	bd30      	pop	{r4, r5, pc}
   d7ad8:	000de490 	.word	0x000de490

000d7adc <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   d7adc:	b510      	push	{r4, lr}
   d7ade:	4b03      	ldr	r3, [pc, #12]	; (d7aec <_ZN15Adafruit_SH110XD1Ev+0x10>)
   d7ae0:	6003      	str	r3, [r0, #0]
   d7ae2:	4604      	mov	r4, r0
   d7ae4:	f7ff fa5a 	bl	d6f9c <_ZN17Adafruit_GrayOLEDD1Ev>
   d7ae8:	4620      	mov	r0, r4
   d7aea:	bd10      	pop	{r4, pc}
   d7aec:	000de490 	.word	0x000de490

000d7af0 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   d7af0:	b510      	push	{r4, lr}
   d7af2:	4b03      	ldr	r3, [pc, #12]	; (d7b00 <_ZN15Adafruit_SH1107D1Ev+0x10>)
   d7af4:	6003      	str	r3, [r0, #0]
   d7af6:	4604      	mov	r4, r0
   d7af8:	f7ff fff0 	bl	d7adc <_ZN15Adafruit_SH110XD1Ev>
   d7afc:	4620      	mov	r0, r4
   d7afe:	bd10      	pop	{r4, pc}
   d7b00:	000de6cc 	.word	0x000de6cc

000d7b04 <_ZN15Adafruit_SH1107D0Ev>:
   d7b04:	b510      	push	{r4, lr}
   d7b06:	4604      	mov	r4, r0
   d7b08:	f7ff fff2 	bl	d7af0 <_ZN15Adafruit_SH1107D1Ev>
   d7b0c:	4620      	mov	r0, r4
   d7b0e:	2158      	movs	r1, #88	; 0x58
   d7b10:	f002 f8a6 	bl	d9c60 <_ZdlPvj>
   d7b14:	4620      	mov	r0, r4
   d7b16:	bd10      	pop	{r4, pc}

000d7b18 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   d7b18:	b530      	push	{r4, r5, lr}
   d7b1a:	b085      	sub	sp, #20
   d7b1c:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d7b1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7b20:	9502      	str	r5, [sp, #8]
   d7b22:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d7b24:	9501      	str	r5, [sp, #4]
   d7b26:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d7b2a:	9500      	str	r5, [sp, #0]
   d7b2c:	f7ff ffbc 	bl	d7aa8 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   d7b30:	4b02      	ldr	r3, [pc, #8]	; (d7b3c <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   d7b32:	6023      	str	r3, [r4, #0]
   d7b34:	4620      	mov	r0, r4
   d7b36:	b005      	add	sp, #20
   d7b38:	bd30      	pop	{r4, r5, pc}
   d7b3a:	bf00      	nop
   d7b3c:	000de6cc 	.word	0x000de6cc

000d7b40 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   d7b40:	b530      	push	{r4, r5, lr}
   d7b42:	4604      	mov	r4, r0
   d7b44:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   d7b46:	f7ff faad 	bl	d70a4 <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   d7b4a:	212f      	movs	r1, #47	; 0x2f
   d7b4c:	4620      	mov	r0, r4
   d7b4e:	f7ff fb12 	bl	d7176 <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   d7b52:	68a2      	ldr	r2, [r4, #8]
   d7b54:	4b2f      	ldr	r3, [pc, #188]	; (d7c14 <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   d7b56:	429a      	cmp	r2, r3
   d7b58:	d121      	bne.n	d7b9e <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   d7b5a:	6823      	ldr	r3, [r4, #0]
   d7b5c:	2101      	movs	r1, #1
   d7b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7b60:	4620      	mov	r0, r4
   d7b62:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d7b64:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d7b68:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d7b6c:	2320      	movs	r3, #32
   d7b6e:	3a20      	subs	r2, #32
   d7b70:	3973      	subs	r1, #115	; 0x73
   d7b72:	2501      	movs	r5, #1
   d7b74:	e9cd 3501 	strd	r3, r5, [sp, #4]
   d7b78:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d7b7c:	2373      	movs	r3, #115	; 0x73
   d7b7e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d7b82:	9300      	str	r3, [sp, #0]
   d7b84:	f341 014f 	sbfx	r1, r1, #1, #16
   d7b88:	4b23      	ldr	r3, [pc, #140]	; (d7c18 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d7b8a:	4620      	mov	r0, r4
   d7b8c:	f342 024f 	sbfx	r2, r2, #1, #16
   d7b90:	f7ff fc96 	bl	d74c0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   d7b94:	6823      	ldr	r3, [r4, #0]
   d7b96:	2100      	movs	r1, #0
   d7b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7b9a:	4620      	mov	r0, r4
   d7b9c:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   d7b9e:	68a3      	ldr	r3, [r4, #8]
   d7ba0:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d7ba4:	d117      	bne.n	d7bd6 <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d7ba6:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d7baa:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d7bae:	2320      	movs	r3, #32
   d7bb0:	2001      	movs	r0, #1
   d7bb2:	3a20      	subs	r2, #32
   d7bb4:	3973      	subs	r1, #115	; 0x73
   d7bb6:	e9cd 3001 	strd	r3, r0, [sp, #4]
   d7bba:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d7bbe:	2373      	movs	r3, #115	; 0x73
   d7bc0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d7bc4:	9300      	str	r3, [sp, #0]
   d7bc6:	f342 024f 	sbfx	r2, r2, #1, #16
   d7bca:	4b13      	ldr	r3, [pc, #76]	; (d7c18 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d7bcc:	f341 014f 	sbfx	r1, r1, #1, #16
   d7bd0:	4620      	mov	r0, r4
   d7bd2:	f7ff fc75 	bl	d74c0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   d7bd6:	4911      	ldr	r1, [pc, #68]	; (d7c1c <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   d7bd8:	2216      	movs	r2, #22
   d7bda:	4620      	mov	r0, r4
   d7bdc:	f7ff fa25 	bl	d702a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d7be0:	4605      	mov	r5, r0
   d7be2:	b918      	cbnz	r0, d7bec <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   d7be4:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   d7be6:	4628      	mov	r0, r5
   d7be8:	b005      	add	sp, #20
   d7bea:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   d7bec:	68a3      	ldr	r3, [r4, #8]
   d7bee:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d7bf2:	d007      	beq.n	d7c04 <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   d7bf4:	2064      	movs	r0, #100	; 0x64
   d7bf6:	f001 f8c1 	bl	d8d7c <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   d7bfa:	21af      	movs	r1, #175	; 0xaf
   d7bfc:	4620      	mov	r0, r4
   d7bfe:	f7ff f9e9 	bl	d6fd4 <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   d7c02:	e7f0      	b.n	d7be6 <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   d7c04:	4906      	ldr	r1, [pc, #24]	; (d7c20 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   d7c06:	2204      	movs	r2, #4
   d7c08:	4620      	mov	r0, r4
   d7c0a:	f7ff fa0e 	bl	d702a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d7c0e:	2800      	cmp	r0, #0
   d7c10:	d1f0      	bne.n	d7bf4 <_ZN15Adafruit_SH11075beginEhb+0xb4>
   d7c12:	e7e7      	b.n	d7be4 <_ZN15Adafruit_SH11075beginEhb+0xa4>
   d7c14:	00800040 	.word	0x00800040
   d7c18:	000de4e4 	.word	0x000de4e4
   d7c1c:	000de724 	.word	0x000de724
   d7c20:	000de720 	.word	0x000de720

000d7c24 <_ZN19Adafruit_EEPROM_I2CC1Ev>:
/**************************************************************************/
/*!
    Constructor
*/
/**************************************************************************/
Adafruit_EEPROM_I2C::Adafruit_EEPROM_I2C(void) {}
   d7c24:	2200      	movs	r2, #0
   d7c26:	6002      	str	r2, [r0, #0]
   d7c28:	7102      	strb	r2, [r0, #4]
   d7c2a:	4770      	bx	lr

000d7c2c <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>:
 *            The I2C address to be used.
 *    @param  theWire
 *            The Wire object to be used for I2C connections.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d7c2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7c2e:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7c30:	2010      	movs	r0, #16
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d7c32:	460e      	mov	r6, r1
   d7c34:	9201      	str	r2, [sp, #4]
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7c36:	f7fc fa2e 	bl	d4096 <_Znwj>
   d7c3a:	4604      	mov	r4, r0
   d7c3c:	b118      	cbz	r0, d7c46 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire+0x1a>
   d7c3e:	9a01      	ldr	r2, [sp, #4]
   d7c40:	4631      	mov	r1, r6
   d7c42:	f7fe fd1e 	bl	d6682 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  _addr = addr;

  return i2c_dev->begin();
   d7c46:	2101      	movs	r1, #1
   d7c48:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7c4a:	602c      	str	r4, [r5, #0]
  _addr = addr;
   d7c4c:	712e      	strb	r6, [r5, #4]
}
   d7c4e:	b002      	add	sp, #8
   d7c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return i2c_dev->begin();
   d7c54:	f7fe bd31 	b.w	d66ba <_ZN18Adafruit_I2CDevice5beginEb>

000d7c58 <_ZN19Adafruit_EEPROM_I2C5writeEth>:
    @param[in] value
                The 8-bit value to write at addr
    @returns True on I2C command success, false on timeout or I2C failure
*/
/**************************************************************************/
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7c58:	b530      	push	{r4, r5, lr}
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};

  if (!i2c_dev->write(buff, 3))
   d7c5a:	2300      	movs	r3, #0
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7c5c:	b085      	sub	sp, #20
  if (!i2c_dev->write(buff, 3))
   d7c5e:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   d7c62:	ba49      	rev16	r1, r1
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7c64:	4605      	mov	r5, r0
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   d7c66:	f8ad 100c 	strh.w	r1, [sp, #12]
   d7c6a:	f88d 200e 	strb.w	r2, [sp, #14]
  if (!i2c_dev->write(buff, 3))
   d7c6e:	6800      	ldr	r0, [r0, #0]
   d7c70:	2301      	movs	r3, #1
   d7c72:	2203      	movs	r2, #3
   d7c74:	a903      	add	r1, sp, #12
   d7c76:	f7fe fd2f 	bl	d66d8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d7c7a:	b160      	cbz	r0, d7c96 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x3e>
   d7c7c:	2465      	movs	r4, #101	; 0x65
    return false;

  // Wait until it acks!
  uint8_t timeout = 100;
  while (timeout--) {
   d7c7e:	3c01      	subs	r4, #1
   d7c80:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d7c84:	d007      	beq.n	d7c96 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x3e>
    if (i2c_dev->detected())
   d7c86:	6828      	ldr	r0, [r5, #0]
   d7c88:	f7fe fd02 	bl	d6690 <_ZN18Adafruit_I2CDevice8detectedEv>
   d7c8c:	b920      	cbnz	r0, d7c98 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x40>
      return true;
    delay(1);
   d7c8e:	2001      	movs	r0, #1
   d7c90:	f001 f874 	bl	d8d7c <delay>
  while (timeout--) {
   d7c94:	e7f3      	b.n	d7c7e <_ZN19Adafruit_EEPROM_I2C5writeEth+0x26>
    return false;
   d7c96:	2000      	movs	r0, #0
  }

  // timed out :(
  return false;
}
   d7c98:	b005      	add	sp, #20
   d7c9a:	bd30      	pop	{r4, r5, pc}

000d7c9c <_ZN19Adafruit_EEPROM_I2C4readEt>:
    @param addr
                The 16-bit address to read from in EEPROM memory
    @returns    The 8-bit value retrieved at addr
*/
/**************************************************************************/
uint8_t Adafruit_EEPROM_I2C::read(uint16_t addr) {
   d7c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};

  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7c9e:	2301      	movs	r3, #1
   d7ca0:	2200      	movs	r2, #0
   d7ca2:	e9cd 3200 	strd	r3, r2, [sp]
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   d7ca6:	ba49      	rev16	r1, r1
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7ca8:	ab03      	add	r3, sp, #12
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   d7caa:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7cae:	6800      	ldr	r0, [r0, #0]
   d7cb0:	2202      	movs	r2, #2
   d7cb2:	4619      	mov	r1, r3
   d7cb4:	f7fe fd7e 	bl	d67b4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
   d7cb8:	b108      	cbz	r0, d7cbe <_ZN19Adafruit_EEPROM_I2C4readEt+0x22>
    return 0x0;

  return buff[0];
   d7cba:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d7cbe:	b005      	add	sp, #20
   d7cc0:	f85d fb04 	ldr.w	pc, [sp], #4

000d7cc4 <_ZN15Adafruit_INA219C1Eh>:

/*!
 *  @brief  Instantiates a new INA219 class
 *  @param addr the I2C address the device can be found on. Default is 0x40
 */
Adafruit_INA219::Adafruit_INA219(uint8_t addr) {
   d7cc4:	2200      	movs	r2, #0
   d7cc6:	6002      	str	r2, [r0, #0]
  ina219_i2caddr = addr;
  ina219_currentDivider_mA = 0;
   d7cc8:	60c2      	str	r2, [r0, #12]
  ina219_powerMultiplier_mW = 0.0f;
   d7cca:	2200      	movs	r2, #0
  ina219_i2caddr = addr;
   d7ccc:	7141      	strb	r1, [r0, #5]
  ina219_powerMultiplier_mW = 0.0f;
   d7cce:	6102      	str	r2, [r0, #16]
}
   d7cd0:	4770      	bx	lr

000d7cd2 <_ZN15Adafruit_INA21917getBusVoltage_rawEv>:

/*!
 *  @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
 *  @return the raw bus voltage reading
 */
int16_t Adafruit_INA219::getBusVoltage_raw() {
   d7cd2:	b510      	push	{r4, lr}
  uint16_t value;

  Adafruit_BusIO_Register bus_voltage_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
   d7cd4:	2301      	movs	r3, #1
int16_t Adafruit_INA219::getBusVoltage_raw() {
   d7cd6:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
   d7cd8:	e9cd 3300 	strd	r3, r3, [sp]
   d7cdc:	2302      	movs	r3, #2
   d7cde:	6801      	ldr	r1, [r0, #0]
int16_t Adafruit_INA219::getBusVoltage_raw() {
   d7ce0:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
   d7ce2:	461a      	mov	r2, r3
   d7ce4:	a804      	add	r0, sp, #16
   d7ce6:	f7fe fa9f 	bl	d6228 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = bus_voltage_reg.read(&value);
   d7cea:	f10d 010e 	add.w	r1, sp, #14
   d7cee:	a804      	add	r0, sp, #16
   d7cf0:	f7fe fb4f 	bl	d6392 <_ZN23Adafruit_BusIO_Register4readEPt>
   d7cf4:	7120      	strb	r0, [r4, #4]

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
   d7cf6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   d7cfa:	10c0      	asrs	r0, r0, #3
}
   d7cfc:	0080      	lsls	r0, r0, #2
   d7cfe:	b00a      	add	sp, #40	; 0x28
   d7d00:	bd10      	pop	{r4, pc}

000d7d02 <_ZN15Adafruit_INA21919getShuntVoltage_rawEv>:

/*!
 *  @brief  Gets the raw shunt voltage (16-bit signed integer, so +-32767)
 *  @return the raw shunt voltage reading
 */
int16_t Adafruit_INA219::getShuntVoltage_raw() {
   d7d02:	b510      	push	{r4, lr}
  uint16_t value;
  Adafruit_BusIO_Register shunt_voltage_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
   d7d04:	2201      	movs	r2, #1
int16_t Adafruit_INA219::getShuntVoltage_raw() {
   d7d06:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
   d7d08:	e9cd 2200 	strd	r2, r2, [sp]
int16_t Adafruit_INA219::getShuntVoltage_raw() {
   d7d0c:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
   d7d0e:	6801      	ldr	r1, [r0, #0]
   d7d10:	2302      	movs	r3, #2
   d7d12:	a804      	add	r0, sp, #16
   d7d14:	f7fe fa88 	bl	d6228 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = shunt_voltage_reg.read(&value);
   d7d18:	f10d 010e 	add.w	r1, sp, #14
   d7d1c:	a804      	add	r0, sp, #16
   d7d1e:	f7fe fb38 	bl	d6392 <_ZN23Adafruit_BusIO_Register4readEPt>
   d7d22:	7120      	strb	r0, [r4, #4]
  return value;
}
   d7d24:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
   d7d28:	b00a      	add	sp, #40	; 0x28
   d7d2a:	bd10      	pop	{r4, pc}

000d7d2c <_ZN15Adafruit_INA21914getCurrent_rawEv>:

/*!
 *  @brief  Gets the raw current value (16-bit signed integer, so +-32767)
 *  @return the raw current reading
 */
int16_t Adafruit_INA219::getCurrent_raw() {
   d7d2c:	b530      	push	{r4, r5, lr}
  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7d2e:	2501      	movs	r5, #1
int16_t Adafruit_INA219::getCurrent_raw() {
   d7d30:	b091      	sub	sp, #68	; 0x44
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7d32:	e9cd 5500 	strd	r5, r5, [sp]
int16_t Adafruit_INA219::getCurrent_raw() {
   d7d36:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7d38:	6801      	ldr	r1, [r0, #0]
   d7d3a:	2302      	movs	r3, #2
   d7d3c:	2205      	movs	r2, #5
   d7d3e:	a804      	add	r0, sp, #16
   d7d40:	f7fe fa72 	bl	d6228 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   d7d44:	68a1      	ldr	r1, [r4, #8]
   d7d46:	2202      	movs	r2, #2
   d7d48:	a804      	add	r0, sp, #16
   d7d4a:	f7fe fac4 	bl	d62d6 <_ZN23Adafruit_BusIO_Register5writeEmh>

  // Now we can safely read the CURRENT register!
  Adafruit_BusIO_Register current_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CURRENT, 2, MSBFIRST);
   d7d4e:	6821      	ldr	r1, [r4, #0]
   d7d50:	2302      	movs	r3, #2
   d7d52:	2204      	movs	r2, #4
   d7d54:	e9cd 5500 	strd	r5, r5, [sp]
   d7d58:	a80a      	add	r0, sp, #40	; 0x28
   d7d5a:	f7fe fa65 	bl	d6228 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = current_reg.read(&value);
   d7d5e:	f10d 010e 	add.w	r1, sp, #14
   d7d62:	a80a      	add	r0, sp, #40	; 0x28
   d7d64:	f7fe fb15 	bl	d6392 <_ZN23Adafruit_BusIO_Register4readEPt>
   d7d68:	7120      	strb	r0, [r4, #4]
  return value;
}
   d7d6a:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
   d7d6e:	b011      	add	sp, #68	; 0x44
   d7d70:	bd30      	pop	{r4, r5, pc}

000d7d72 <_ZN15Adafruit_INA21912getPower_rawEv>:

/*!
 *  @brief  Gets the raw power value (16-bit signed integer, so +-32767)
 *  @return raw power reading
 */
int16_t Adafruit_INA219::getPower_raw() {
   d7d72:	b530      	push	{r4, r5, lr}
  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7d74:	2501      	movs	r5, #1
int16_t Adafruit_INA219::getPower_raw() {
   d7d76:	b091      	sub	sp, #68	; 0x44
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7d78:	e9cd 5500 	strd	r5, r5, [sp]
int16_t Adafruit_INA219::getPower_raw() {
   d7d7c:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7d7e:	6801      	ldr	r1, [r0, #0]
   d7d80:	2302      	movs	r3, #2
   d7d82:	2205      	movs	r2, #5
   d7d84:	a804      	add	r0, sp, #16
   d7d86:	f7fe fa4f 	bl	d6228 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   d7d8a:	68a1      	ldr	r1, [r4, #8]
   d7d8c:	2202      	movs	r2, #2
   d7d8e:	a804      	add	r0, sp, #16
   d7d90:	f7fe faa1 	bl	d62d6 <_ZN23Adafruit_BusIO_Register5writeEmh>

  // Now we can safely read the POWER register!
  Adafruit_BusIO_Register power_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_POWER, 2, MSBFIRST);
   d7d94:	6821      	ldr	r1, [r4, #0]
   d7d96:	2302      	movs	r3, #2
   d7d98:	2203      	movs	r2, #3
   d7d9a:	e9cd 5500 	strd	r5, r5, [sp]
   d7d9e:	a80a      	add	r0, sp, #40	; 0x28
   d7da0:	f7fe fa42 	bl	d6228 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = power_reg.read(&value);
   d7da4:	f10d 010e 	add.w	r1, sp, #14
   d7da8:	a80a      	add	r0, sp, #40	; 0x28
   d7daa:	f7fe faf2 	bl	d6392 <_ZN23Adafruit_BusIO_Register4readEPt>
   d7dae:	7120      	strb	r0, [r4, #4]
  return value;
}
   d7db0:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
   d7db4:	b011      	add	sp, #68	; 0x44
   d7db6:	bd30      	pop	{r4, r5, pc}

000d7db8 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv>:

/*!
 *  @brief  Gets the shunt voltage in mV (so +-327mV)
 *  @return the shunt voltage converted to millivolts
 */
float Adafruit_INA219::getShuntVoltage_mV() {
   d7db8:	b508      	push	{r3, lr}
  int16_t value;
  value = getShuntVoltage_raw();
   d7dba:	f7ff ffa2 	bl	d7d02 <_ZN15Adafruit_INA21919getShuntVoltage_rawEv>
  return value * 0.01;
   d7dbe:	f004 fd17 	bl	dc7f0 <__aeabi_i2d>
   d7dc2:	a305      	add	r3, pc, #20	; (adr r3, d7dd8 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv+0x20>)
   d7dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7dc8:	f004 fd7c 	bl	dc8c4 <__aeabi_dmul>
   d7dcc:	f005 f872 	bl	dceb4 <__aeabi_d2f>
}
   d7dd0:	ee00 0a10 	vmov	s0, r0
   d7dd4:	bd08      	pop	{r3, pc}
   d7dd6:	bf00      	nop
   d7dd8:	47ae147b 	.word	0x47ae147b
   d7ddc:	3f847ae1 	.word	0x3f847ae1

000d7de0 <_ZN15Adafruit_INA21915getBusVoltage_VEv>:

/*!
 *  @brief  Gets the bus voltage in volts
 *  @return the bus voltage converted to volts
 */
float Adafruit_INA219::getBusVoltage_V() {
   d7de0:	b508      	push	{r3, lr}
  int16_t value = getBusVoltage_raw();
   d7de2:	f7ff ff76 	bl	d7cd2 <_ZN15Adafruit_INA21917getBusVoltage_rawEv>
  return value * 0.001;
   d7de6:	f004 fd03 	bl	dc7f0 <__aeabi_i2d>
   d7dea:	a305      	add	r3, pc, #20	; (adr r3, d7e00 <_ZN15Adafruit_INA21915getBusVoltage_VEv+0x20>)
   d7dec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7df0:	f004 fd68 	bl	dc8c4 <__aeabi_dmul>
   d7df4:	f005 f85e 	bl	dceb4 <__aeabi_d2f>
}
   d7df8:	ee00 0a10 	vmov	s0, r0
   d7dfc:	bd08      	pop	{r3, pc}
   d7dfe:	bf00      	nop
   d7e00:	d2f1a9fc 	.word	0xd2f1a9fc
   d7e04:	3f50624d 	.word	0x3f50624d

000d7e08 <_ZN15Adafruit_INA21913getCurrent_mAEv>:
/*!
 *  @brief  Gets the current value in mA, taking into account the
 *          config settings and current LSB
 *  @return the current reading convereted to milliamps
 */
float Adafruit_INA219::getCurrent_mA() {
   d7e08:	b510      	push	{r4, lr}
   d7e0a:	4604      	mov	r4, r0
  float valueDec = getCurrent_raw();
   d7e0c:	f7ff ff8e 	bl	d7d2c <_ZN15Adafruit_INA21914getCurrent_rawEv>
   d7e10:	ee07 0a90 	vmov	s15, r0
   d7e14:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  valueDec /= ina219_currentDivider_mA;
   d7e18:	edd4 7a03 	vldr	s15, [r4, #12]
   d7e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
  return valueDec;
}
   d7e20:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d7e24:	bd10      	pop	{r4, pc}

000d7e26 <_ZN15Adafruit_INA21911getPower_mWEv>:
/*!
 *  @brief  Gets the power value in mW, taking into account the
 *          config settings and current LSB
 *  @return power reading converted to milliwatts
 */
float Adafruit_INA219::getPower_mW() {
   d7e26:	b510      	push	{r4, lr}
   d7e28:	4604      	mov	r4, r0
  float valueDec = getPower_raw();
   d7e2a:	f7ff ffa2 	bl	d7d72 <_ZN15Adafruit_INA21912getPower_rawEv>
   d7e2e:	ee07 0a90 	vmov	s15, r0
   d7e32:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  valueDec *= ina219_powerMultiplier_mW;
   d7e36:	edd4 7a04 	vldr	s15, [r4, #16]
  return valueDec;
}
   d7e3a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7e3e:	bd10      	pop	{r4, pc}

000d7e40 <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>:
 *          of current.  Each unit of current corresponds to 100uA, and
 *          each unit of power corresponds to 2mW. Counter overflow
 *          occurs at 3.2A.
 *  @note   These calculations assume a 0.1 ohm resistor is present
 */
void Adafruit_INA219::setCalibration_32V_2A() {
   d7e40:	b530      	push	{r4, r5, lr}
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 3.2 * 32V
  // MaximumPower = 102.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
   d7e42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   d7e46:	230a      	movs	r3, #10
void Adafruit_INA219::setCalibration_32V_2A() {
   d7e48:	b08f      	sub	sp, #60	; 0x3c
  ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
   d7e4a:	e9c0 2302 	strd	r2, r3, [r0, #8]
  ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)

  // Set Calibration register to 'Cal' calculated above
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7e4e:	2501      	movs	r5, #1
  ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
   d7e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7e54:	6103      	str	r3, [r0, #16]
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7e56:	e9cd 5500 	strd	r5, r5, [sp]
void Adafruit_INA219::setCalibration_32V_2A() {
   d7e5a:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7e5c:	6801      	ldr	r1, [r0, #0]
   d7e5e:	2302      	movs	r3, #2
   d7e60:	2205      	movs	r2, #5
   d7e62:	a802      	add	r0, sp, #8
   d7e64:	f7fe f9e0 	bl	d6228 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   d7e68:	68a1      	ldr	r1, [r4, #8]
   d7e6a:	2202      	movs	r2, #2
   d7e6c:	a802      	add	r0, sp, #8
   d7e6e:	f7fe fa32 	bl	d62d6 <_ZN23Adafruit_BusIO_Register5writeEmh>
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
                    INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  Adafruit_BusIO_Register config_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CONFIG, 2, MSBFIRST);
   d7e72:	6821      	ldr	r1, [r4, #0]
   d7e74:	2302      	movs	r3, #2
   d7e76:	e9cd 5500 	strd	r5, r5, [sp]
   d7e7a:	2200      	movs	r2, #0
   d7e7c:	a808      	add	r0, sp, #32
   d7e7e:	f7fe f9d3 	bl	d6228 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = config_reg.write(config, 2);
   d7e82:	2202      	movs	r2, #2
   d7e84:	f643 119f 	movw	r1, #14751	; 0x399f
   d7e88:	a808      	add	r0, sp, #32
   d7e8a:	f7fe fa24 	bl	d62d6 <_ZN23Adafruit_BusIO_Register5writeEmh>
   d7e8e:	7120      	strb	r0, [r4, #4]
}
   d7e90:	b00f      	add	sp, #60	; 0x3c
   d7e92:	bd30      	pop	{r4, r5, pc}

000d7e94 <_ZN15Adafruit_INA2195beginEP7TwoWire>:
bool Adafruit_INA219::begin(TwoWire *theWire) {
   d7e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   d7e96:	6803      	ldr	r3, [r0, #0]
bool Adafruit_INA219::begin(TwoWire *theWire) {
   d7e98:	4604      	mov	r4, r0
  if (!i2c_dev) {
   d7e9a:	b953      	cbnz	r3, d7eb2 <_ZN15Adafruit_INA2195beginEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(ina219_i2caddr, theWire);
   d7e9c:	2010      	movs	r0, #16
   d7e9e:	9101      	str	r1, [sp, #4]
   d7ea0:	f7fc f8f9 	bl	d4096 <_Znwj>
   d7ea4:	4605      	mov	r5, r0
   d7ea6:	b118      	cbz	r0, d7eb0 <_ZN15Adafruit_INA2195beginEP7TwoWire+0x1c>
   d7ea8:	9a01      	ldr	r2, [sp, #4]
   d7eaa:	7961      	ldrb	r1, [r4, #5]
   d7eac:	f7fe fbe9 	bl	d6682 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d7eb0:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
   d7eb2:	6820      	ldr	r0, [r4, #0]
   d7eb4:	2101      	movs	r1, #1
   d7eb6:	f7fe fc00 	bl	d66ba <_ZN18Adafruit_I2CDevice5beginEb>
   d7eba:	4605      	mov	r5, r0
   d7ebc:	b110      	cbz	r0, d7ec4 <_ZN15Adafruit_INA2195beginEP7TwoWire+0x30>
  setCalibration_32V_2A();
   d7ebe:	4620      	mov	r0, r4
   d7ec0:	f7ff ffbe 	bl	d7e40 <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>
}
   d7ec4:	4628      	mov	r0, r5
   d7ec6:	b003      	add	sp, #12
   d7ec8:	bd30      	pop	{r4, r5, pc}

000d7eca <_ZN15Adafruit_INA21924setCalibration_16V_400mAEv>:
/*!
 *  @brief set device to alibration which uses the highest precision for
 *     current measurement (0.1mA), at the expense of
 *     only supporting 16V at 400mA max.
 */
void Adafruit_INA219::setCalibration_16V_400mA() {
   d7eca:	b530      	push	{r4, r5, lr}
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 0.4 * 16V
  // MaximumPower = 6.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
   d7ecc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d7ed0:	2314      	movs	r3, #20
void Adafruit_INA219::setCalibration_16V_400mA() {
   d7ed2:	b08f      	sub	sp, #60	; 0x3c
  ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
   d7ed4:	e9c0 2302 	strd	r2, r3, [r0, #8]
  ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit

  // Set Calibration register to 'Cal' calculated above
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7ed8:	2501      	movs	r5, #1
  ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit
   d7eda:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d7ede:	6103      	str	r3, [r0, #16]
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7ee0:	e9cd 5500 	strd	r5, r5, [sp]
void Adafruit_INA219::setCalibration_16V_400mA() {
   d7ee4:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7ee6:	6801      	ldr	r1, [r0, #0]
   d7ee8:	2302      	movs	r3, #2
   d7eea:	2205      	movs	r2, #5
   d7eec:	a802      	add	r0, sp, #8
   d7eee:	f7fe f99b 	bl	d6228 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   d7ef2:	68a1      	ldr	r1, [r4, #8]
   d7ef4:	2202      	movs	r2, #2
   d7ef6:	a802      	add	r0, sp, #8
   d7ef8:	f7fe f9ed 	bl	d62d6 <_ZN23Adafruit_BusIO_Register5writeEmh>
                    INA219_CONFIG_GAIN_1_40MV | INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

  Adafruit_BusIO_Register config_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CONFIG, 2, MSBFIRST);
   d7efc:	6821      	ldr	r1, [r4, #0]
   d7efe:	2302      	movs	r3, #2
   d7f00:	e9cd 5500 	strd	r5, r5, [sp]
   d7f04:	2200      	movs	r2, #0
   d7f06:	a808      	add	r0, sp, #32
   d7f08:	f7fe f98e 	bl	d6228 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = config_reg.write(config, 2);
   d7f0c:	2202      	movs	r2, #2
   d7f0e:	f240 119f 	movw	r1, #415	; 0x19f
   d7f12:	a808      	add	r0, sp, #32
   d7f14:	f7fe f9df 	bl	d62d6 <_ZN23Adafruit_BusIO_Register5writeEmh>
   d7f18:	7120      	strb	r0, [r4, #4]
}
   d7f1a:	b00f      	add	sp, #60	; 0x3c
   d7f1c:	bd30      	pop	{r4, r5, pc}
	...

000d7f20 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7f20:	b508      	push	{r3, lr}
   d7f22:	4b02      	ldr	r3, [pc, #8]	; (d7f2c <netdb_freeaddrinfo+0xc>)
   d7f24:	681b      	ldr	r3, [r3, #0]
   d7f26:	689b      	ldr	r3, [r3, #8]
   d7f28:	9301      	str	r3, [sp, #4]
   d7f2a:	bd08      	pop	{r3, pc}
   d7f2c:	00030268 	.word	0x00030268

000d7f30 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7f30:	b508      	push	{r3, lr}
   d7f32:	4b02      	ldr	r3, [pc, #8]	; (d7f3c <netdb_getaddrinfo+0xc>)
   d7f34:	681b      	ldr	r3, [r3, #0]
   d7f36:	68db      	ldr	r3, [r3, #12]
   d7f38:	9301      	str	r3, [sp, #4]
   d7f3a:	bd08      	pop	{r3, pc}
   d7f3c:	00030268 	.word	0x00030268

000d7f40 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7f40:	b508      	push	{r3, lr}
   d7f42:	4b02      	ldr	r3, [pc, #8]	; (d7f4c <HAL_Validate_Pin_Function+0xc>)
   d7f44:	681b      	ldr	r3, [r3, #0]
   d7f46:	685b      	ldr	r3, [r3, #4]
   d7f48:	9301      	str	r3, [sp, #4]
   d7f4a:	bd08      	pop	{r3, pc}
   d7f4c:	0003022c 	.word	0x0003022c

000d7f50 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7f50:	b508      	push	{r3, lr}
   d7f52:	4b02      	ldr	r3, [pc, #8]	; (d7f5c <HAL_Pin_Mode+0xc>)
   d7f54:	681b      	ldr	r3, [r3, #0]
   d7f56:	689b      	ldr	r3, [r3, #8]
   d7f58:	9301      	str	r3, [sp, #4]
   d7f5a:	bd08      	pop	{r3, pc}
   d7f5c:	0003022c 	.word	0x0003022c

000d7f60 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7f60:	b508      	push	{r3, lr}
   d7f62:	4b02      	ldr	r3, [pc, #8]	; (d7f6c <HAL_Get_Pin_Mode+0xc>)
   d7f64:	681b      	ldr	r3, [r3, #0]
   d7f66:	68db      	ldr	r3, [r3, #12]
   d7f68:	9301      	str	r3, [sp, #4]
   d7f6a:	bd08      	pop	{r3, pc}
   d7f6c:	0003022c 	.word	0x0003022c

000d7f70 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7f70:	b508      	push	{r3, lr}
   d7f72:	4b02      	ldr	r3, [pc, #8]	; (d7f7c <HAL_GPIO_Write+0xc>)
   d7f74:	681b      	ldr	r3, [r3, #0]
   d7f76:	691b      	ldr	r3, [r3, #16]
   d7f78:	9301      	str	r3, [sp, #4]
   d7f7a:	bd08      	pop	{r3, pc}
   d7f7c:	0003022c 	.word	0x0003022c

000d7f80 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7f80:	b508      	push	{r3, lr}
   d7f82:	4b02      	ldr	r3, [pc, #8]	; (d7f8c <HAL_GPIO_Read+0xc>)
   d7f84:	681b      	ldr	r3, [r3, #0]
   d7f86:	695b      	ldr	r3, [r3, #20]
   d7f88:	9301      	str	r3, [sp, #4]
   d7f8a:	bd08      	pop	{r3, pc}
   d7f8c:	0003022c 	.word	0x0003022c

000d7f90 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7f90:	b508      	push	{r3, lr}
   d7f92:	4b02      	ldr	r3, [pc, #8]	; (d7f9c <HAL_Interrupts_Attach+0xc>)
   d7f94:	681b      	ldr	r3, [r3, #0]
   d7f96:	699b      	ldr	r3, [r3, #24]
   d7f98:	9301      	str	r3, [sp, #4]
   d7f9a:	bd08      	pop	{r3, pc}
   d7f9c:	0003022c 	.word	0x0003022c

000d7fa0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7fa0:	b508      	push	{r3, lr}
   d7fa2:	4b02      	ldr	r3, [pc, #8]	; (d7fac <HAL_Interrupts_Detach+0xc>)
   d7fa4:	681b      	ldr	r3, [r3, #0]
   d7fa6:	69db      	ldr	r3, [r3, #28]
   d7fa8:	9301      	str	r3, [sp, #4]
   d7faa:	bd08      	pop	{r3, pc}
   d7fac:	0003022c 	.word	0x0003022c

000d7fb0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7fb0:	b508      	push	{r3, lr}
   d7fb2:	4b02      	ldr	r3, [pc, #8]	; (d7fbc <hal_adc_read+0xc>)
   d7fb4:	681b      	ldr	r3, [r3, #0]
   d7fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7fb8:	9301      	str	r3, [sp, #4]
   d7fba:	bd08      	pop	{r3, pc}
   d7fbc:	0003022c 	.word	0x0003022c

000d7fc0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7fc0:	b508      	push	{r3, lr}
   d7fc2:	4b02      	ldr	r3, [pc, #8]	; (d7fcc <HAL_RNG_GetRandomNumber+0xc>)
   d7fc4:	681b      	ldr	r3, [r3, #0]
   d7fc6:	685b      	ldr	r3, [r3, #4]
   d7fc8:	9301      	str	r3, [sp, #4]
   d7fca:	bd08      	pop	{r3, pc}
   d7fcc:	00030218 	.word	0x00030218

000d7fd0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7fd0:	b508      	push	{r3, lr}
   d7fd2:	4b02      	ldr	r3, [pc, #8]	; (d7fdc <HAL_Delay_Microseconds+0xc>)
   d7fd4:	681b      	ldr	r3, [r3, #0]
   d7fd6:	68db      	ldr	r3, [r3, #12]
   d7fd8:	9301      	str	r3, [sp, #4]
   d7fda:	bd08      	pop	{r3, pc}
   d7fdc:	00030218 	.word	0x00030218

000d7fe0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7fe0:	b508      	push	{r3, lr}
   d7fe2:	4b02      	ldr	r3, [pc, #8]	; (d7fec <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7fe4:	681b      	ldr	r3, [r3, #0]
   d7fe6:	695b      	ldr	r3, [r3, #20]
   d7fe8:	9301      	str	r3, [sp, #4]
   d7fea:	bd08      	pop	{r3, pc}
   d7fec:	00030218 	.word	0x00030218

000d7ff0 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d7ff0:	b508      	push	{r3, lr}
   d7ff2:	4b02      	ldr	r3, [pc, #8]	; (d7ffc <HAL_EEPROM_Init+0xc>)
   d7ff4:	681b      	ldr	r3, [r3, #0]
   d7ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7ff8:	9301      	str	r3, [sp, #4]
   d7ffa:	bd08      	pop	{r3, pc}
   d7ffc:	00030218 	.word	0x00030218

000d8000 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d8000:	b508      	push	{r3, lr}
   d8002:	4b02      	ldr	r3, [pc, #8]	; (d800c <HAL_EEPROM_Get+0xc>)
   d8004:	681b      	ldr	r3, [r3, #0]
   d8006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8008:	9301      	str	r3, [sp, #4]
   d800a:	bd08      	pop	{r3, pc}
   d800c:	00030218 	.word	0x00030218

000d8010 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d8010:	b508      	push	{r3, lr}
   d8012:	4b02      	ldr	r3, [pc, #8]	; (d801c <HAL_EEPROM_Put+0xc>)
   d8014:	681b      	ldr	r3, [r3, #0]
   d8016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8018:	9301      	str	r3, [sp, #4]
   d801a:	bd08      	pop	{r3, pc}
   d801c:	00030218 	.word	0x00030218

000d8020 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d8020:	b508      	push	{r3, lr}
   d8022:	4b02      	ldr	r3, [pc, #8]	; (d802c <hal_rtc_time_is_valid+0xc>)
   d8024:	681b      	ldr	r3, [r3, #0]
   d8026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8028:	9301      	str	r3, [sp, #4]
   d802a:	bd08      	pop	{r3, pc}
   d802c:	00030218 	.word	0x00030218

000d8030 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d8030:	b508      	push	{r3, lr}
   d8032:	4b02      	ldr	r3, [pc, #8]	; (d803c <hal_rtc_get_time+0xc>)
   d8034:	681b      	ldr	r3, [r3, #0]
   d8036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d8038:	9301      	str	r3, [sp, #4]
   d803a:	bd08      	pop	{r3, pc}
   d803c:	00030218 	.word	0x00030218

000d8040 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d8040:	b508      	push	{r3, lr}
   d8042:	4b02      	ldr	r3, [pc, #8]	; (d804c <os_thread_yield+0xc>)
   d8044:	681b      	ldr	r3, [r3, #0]
   d8046:	68db      	ldr	r3, [r3, #12]
   d8048:	9301      	str	r3, [sp, #4]
   d804a:	bd08      	pop	{r3, pc}
   d804c:	00030248 	.word	0x00030248

000d8050 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d8050:	b508      	push	{r3, lr}
   d8052:	4b02      	ldr	r3, [pc, #8]	; (d805c <os_mutex_recursive_create+0xc>)
   d8054:	681b      	ldr	r3, [r3, #0]
   d8056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8058:	9301      	str	r3, [sp, #4]
   d805a:	bd08      	pop	{r3, pc}
   d805c:	00030248 	.word	0x00030248

000d8060 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d8060:	b508      	push	{r3, lr}
   d8062:	4b02      	ldr	r3, [pc, #8]	; (d806c <inet_inet_ntop+0xc>)
   d8064:	681b      	ldr	r3, [r3, #0]
   d8066:	695b      	ldr	r3, [r3, #20]
   d8068:	9301      	str	r3, [sp, #4]
   d806a:	bd08      	pop	{r3, pc}
   d806c:	00030264 	.word	0x00030264

000d8070 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d8070:	b508      	push	{r3, lr}
   d8072:	4b02      	ldr	r3, [pc, #8]	; (d807c <hal_usart_init+0xc>)
   d8074:	681b      	ldr	r3, [r3, #0]
   d8076:	681b      	ldr	r3, [r3, #0]
   d8078:	9301      	str	r3, [sp, #4]
   d807a:	bd08      	pop	{r3, pc}
   d807c:	0003023c 	.word	0x0003023c

000d8080 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d8080:	b508      	push	{r3, lr}
   d8082:	4b02      	ldr	r3, [pc, #8]	; (d808c <hal_usart_write+0xc>)
   d8084:	681b      	ldr	r3, [r3, #0]
   d8086:	68db      	ldr	r3, [r3, #12]
   d8088:	9301      	str	r3, [sp, #4]
   d808a:	bd08      	pop	{r3, pc}
   d808c:	0003023c 	.word	0x0003023c

000d8090 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d8090:	b508      	push	{r3, lr}
   d8092:	4b02      	ldr	r3, [pc, #8]	; (d809c <hal_usart_available+0xc>)
   d8094:	681b      	ldr	r3, [r3, #0]
   d8096:	691b      	ldr	r3, [r3, #16]
   d8098:	9301      	str	r3, [sp, #4]
   d809a:	bd08      	pop	{r3, pc}
   d809c:	0003023c 	.word	0x0003023c

000d80a0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d80a0:	b508      	push	{r3, lr}
   d80a2:	4b02      	ldr	r3, [pc, #8]	; (d80ac <hal_usart_read+0xc>)
   d80a4:	681b      	ldr	r3, [r3, #0]
   d80a6:	695b      	ldr	r3, [r3, #20]
   d80a8:	9301      	str	r3, [sp, #4]
   d80aa:	bd08      	pop	{r3, pc}
   d80ac:	0003023c 	.word	0x0003023c

000d80b0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d80b0:	b508      	push	{r3, lr}
   d80b2:	4b02      	ldr	r3, [pc, #8]	; (d80bc <hal_usart_peek+0xc>)
   d80b4:	681b      	ldr	r3, [r3, #0]
   d80b6:	699b      	ldr	r3, [r3, #24]
   d80b8:	9301      	str	r3, [sp, #4]
   d80ba:	bd08      	pop	{r3, pc}
   d80bc:	0003023c 	.word	0x0003023c

000d80c0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d80c0:	b508      	push	{r3, lr}
   d80c2:	4b02      	ldr	r3, [pc, #8]	; (d80cc <hal_usart_flush+0xc>)
   d80c4:	681b      	ldr	r3, [r3, #0]
   d80c6:	69db      	ldr	r3, [r3, #28]
   d80c8:	9301      	str	r3, [sp, #4]
   d80ca:	bd08      	pop	{r3, pc}
   d80cc:	0003023c 	.word	0x0003023c

000d80d0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d80d0:	b508      	push	{r3, lr}
   d80d2:	4b02      	ldr	r3, [pc, #8]	; (d80dc <hal_usart_is_enabled+0xc>)
   d80d4:	681b      	ldr	r3, [r3, #0]
   d80d6:	6a1b      	ldr	r3, [r3, #32]
   d80d8:	9301      	str	r3, [sp, #4]
   d80da:	bd08      	pop	{r3, pc}
   d80dc:	0003023c 	.word	0x0003023c

000d80e0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d80e0:	b508      	push	{r3, lr}
   d80e2:	4b02      	ldr	r3, [pc, #8]	; (d80ec <hal_usart_available_data_for_write+0xc>)
   d80e4:	681b      	ldr	r3, [r3, #0]
   d80e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d80e8:	9301      	str	r3, [sp, #4]
   d80ea:	bd08      	pop	{r3, pc}
   d80ec:	0003023c 	.word	0x0003023c

000d80f0 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d80f0:	b508      	push	{r3, lr}
   d80f2:	4b02      	ldr	r3, [pc, #8]	; (d80fc <hal_i2c_set_speed+0xc>)
   d80f4:	681b      	ldr	r3, [r3, #0]
   d80f6:	681b      	ldr	r3, [r3, #0]
   d80f8:	9301      	str	r3, [sp, #4]
   d80fa:	bd08      	pop	{r3, pc}
   d80fc:	00030228 	.word	0x00030228

000d8100 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d8100:	b508      	push	{r3, lr}
   d8102:	4b02      	ldr	r3, [pc, #8]	; (d810c <hal_i2c_begin+0xc>)
   d8104:	681b      	ldr	r3, [r3, #0]
   d8106:	68db      	ldr	r3, [r3, #12]
   d8108:	9301      	str	r3, [sp, #4]
   d810a:	bd08      	pop	{r3, pc}
   d810c:	00030228 	.word	0x00030228

000d8110 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d8110:	b508      	push	{r3, lr}
   d8112:	4b02      	ldr	r3, [pc, #8]	; (d811c <hal_i2c_begin_transmission+0xc>)
   d8114:	681b      	ldr	r3, [r3, #0]
   d8116:	699b      	ldr	r3, [r3, #24]
   d8118:	9301      	str	r3, [sp, #4]
   d811a:	bd08      	pop	{r3, pc}
   d811c:	00030228 	.word	0x00030228

000d8120 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d8120:	b508      	push	{r3, lr}
   d8122:	4b02      	ldr	r3, [pc, #8]	; (d812c <hal_i2c_end_transmission+0xc>)
   d8124:	681b      	ldr	r3, [r3, #0]
   d8126:	69db      	ldr	r3, [r3, #28]
   d8128:	9301      	str	r3, [sp, #4]
   d812a:	bd08      	pop	{r3, pc}
   d812c:	00030228 	.word	0x00030228

000d8130 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d8130:	b508      	push	{r3, lr}
   d8132:	4b02      	ldr	r3, [pc, #8]	; (d813c <hal_i2c_write+0xc>)
   d8134:	681b      	ldr	r3, [r3, #0]
   d8136:	6a1b      	ldr	r3, [r3, #32]
   d8138:	9301      	str	r3, [sp, #4]
   d813a:	bd08      	pop	{r3, pc}
   d813c:	00030228 	.word	0x00030228

000d8140 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d8140:	b508      	push	{r3, lr}
   d8142:	4b02      	ldr	r3, [pc, #8]	; (d814c <hal_i2c_available+0xc>)
   d8144:	681b      	ldr	r3, [r3, #0]
   d8146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8148:	9301      	str	r3, [sp, #4]
   d814a:	bd08      	pop	{r3, pc}
   d814c:	00030228 	.word	0x00030228

000d8150 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d8150:	b508      	push	{r3, lr}
   d8152:	4b02      	ldr	r3, [pc, #8]	; (d815c <hal_i2c_read+0xc>)
   d8154:	681b      	ldr	r3, [r3, #0]
   d8156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8158:	9301      	str	r3, [sp, #4]
   d815a:	bd08      	pop	{r3, pc}
   d815c:	00030228 	.word	0x00030228

000d8160 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d8160:	b508      	push	{r3, lr}
   d8162:	4b02      	ldr	r3, [pc, #8]	; (d816c <hal_i2c_peek+0xc>)
   d8164:	681b      	ldr	r3, [r3, #0]
   d8166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8168:	9301      	str	r3, [sp, #4]
   d816a:	bd08      	pop	{r3, pc}
   d816c:	00030228 	.word	0x00030228

000d8170 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d8170:	b508      	push	{r3, lr}
   d8172:	4b02      	ldr	r3, [pc, #8]	; (d817c <hal_i2c_flush+0xc>)
   d8174:	681b      	ldr	r3, [r3, #0]
   d8176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8178:	9301      	str	r3, [sp, #4]
   d817a:	bd08      	pop	{r3, pc}
   d817c:	00030228 	.word	0x00030228

000d8180 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d8180:	b508      	push	{r3, lr}
   d8182:	4b02      	ldr	r3, [pc, #8]	; (d818c <hal_i2c_is_enabled+0xc>)
   d8184:	681b      	ldr	r3, [r3, #0]
   d8186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8188:	9301      	str	r3, [sp, #4]
   d818a:	bd08      	pop	{r3, pc}
   d818c:	00030228 	.word	0x00030228

000d8190 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d8190:	b508      	push	{r3, lr}
   d8192:	4b02      	ldr	r3, [pc, #8]	; (d819c <hal_i2c_init+0xc>)
   d8194:	681b      	ldr	r3, [r3, #0]
   d8196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8198:	9301      	str	r3, [sp, #4]
   d819a:	bd08      	pop	{r3, pc}
   d819c:	00030228 	.word	0x00030228

000d81a0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d81a0:	b508      	push	{r3, lr}
   d81a2:	4b02      	ldr	r3, [pc, #8]	; (d81ac <hal_i2c_request_ex+0xc>)
   d81a4:	681b      	ldr	r3, [r3, #0]
   d81a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d81a8:	9301      	str	r3, [sp, #4]
   d81aa:	bd08      	pop	{r3, pc}
   d81ac:	00030228 	.word	0x00030228

000d81b0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d81b0:	b508      	push	{r3, lr}
   d81b2:	4b02      	ldr	r3, [pc, #8]	; (d81bc <hal_spi_begin+0xc>)
   d81b4:	681b      	ldr	r3, [r3, #0]
   d81b6:	681b      	ldr	r3, [r3, #0]
   d81b8:	9301      	str	r3, [sp, #4]
   d81ba:	bd08      	pop	{r3, pc}
   d81bc:	00030230 	.word	0x00030230

000d81c0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d81c0:	b508      	push	{r3, lr}
   d81c2:	4b02      	ldr	r3, [pc, #8]	; (d81cc <hal_spi_transfer+0xc>)
   d81c4:	681b      	ldr	r3, [r3, #0]
   d81c6:	695b      	ldr	r3, [r3, #20]
   d81c8:	9301      	str	r3, [sp, #4]
   d81ca:	bd08      	pop	{r3, pc}
   d81cc:	00030230 	.word	0x00030230

000d81d0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d81d0:	b508      	push	{r3, lr}
   d81d2:	4b02      	ldr	r3, [pc, #8]	; (d81dc <hal_spi_init+0xc>)
   d81d4:	681b      	ldr	r3, [r3, #0]
   d81d6:	69db      	ldr	r3, [r3, #28]
   d81d8:	9301      	str	r3, [sp, #4]
   d81da:	bd08      	pop	{r3, pc}
   d81dc:	00030230 	.word	0x00030230

000d81e0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d81e0:	b508      	push	{r3, lr}
   d81e2:	4b02      	ldr	r3, [pc, #8]	; (d81ec <hal_spi_is_enabled+0xc>)
   d81e4:	681b      	ldr	r3, [r3, #0]
   d81e6:	6a1b      	ldr	r3, [r3, #32]
   d81e8:	9301      	str	r3, [sp, #4]
   d81ea:	bd08      	pop	{r3, pc}
   d81ec:	00030230 	.word	0x00030230

000d81f0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d81f0:	b508      	push	{r3, lr}
   d81f2:	4b02      	ldr	r3, [pc, #8]	; (d81fc <hal_spi_info+0xc>)
   d81f4:	681b      	ldr	r3, [r3, #0]
   d81f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d81f8:	9301      	str	r3, [sp, #4]
   d81fa:	bd08      	pop	{r3, pc}
   d81fc:	00030230 	.word	0x00030230

000d8200 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d8200:	b508      	push	{r3, lr}
   d8202:	4b02      	ldr	r3, [pc, #8]	; (d820c <hal_spi_transfer_dma+0xc>)
   d8204:	681b      	ldr	r3, [r3, #0]
   d8206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8208:	9301      	str	r3, [sp, #4]
   d820a:	bd08      	pop	{r3, pc}
   d820c:	00030230 	.word	0x00030230

000d8210 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d8210:	b508      	push	{r3, lr}
   d8212:	4b02      	ldr	r3, [pc, #8]	; (d821c <hal_spi_transfer_dma_status+0xc>)
   d8214:	681b      	ldr	r3, [r3, #0]
   d8216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8218:	9301      	str	r3, [sp, #4]
   d821a:	bd08      	pop	{r3, pc}
   d821c:	00030230 	.word	0x00030230

000d8220 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d8220:	b508      	push	{r3, lr}
   d8222:	4b02      	ldr	r3, [pc, #8]	; (d822c <hal_spi_set_settings+0xc>)
   d8224:	681b      	ldr	r3, [r3, #0]
   d8226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8228:	9301      	str	r3, [sp, #4]
   d822a:	bd08      	pop	{r3, pc}
   d822c:	00030230 	.word	0x00030230

000d8230 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d8230:	b508      	push	{r3, lr}
   d8232:	4b02      	ldr	r3, [pc, #8]	; (d823c <hal_spi_acquire+0xc>)
   d8234:	681b      	ldr	r3, [r3, #0]
   d8236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8238:	9301      	str	r3, [sp, #4]
   d823a:	bd08      	pop	{r3, pc}
   d823c:	00030230 	.word	0x00030230

000d8240 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d8240:	b508      	push	{r3, lr}
   d8242:	4b02      	ldr	r3, [pc, #8]	; (d824c <hal_spi_release+0xc>)
   d8244:	681b      	ldr	r3, [r3, #0]
   d8246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8248:	9301      	str	r3, [sp, #4]
   d824a:	bd08      	pop	{r3, pc}
   d824c:	00030230 	.word	0x00030230

000d8250 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8250:	b508      	push	{r3, lr}
   d8252:	4b02      	ldr	r3, [pc, #8]	; (d825c <HAL_USB_USART_Init+0xc>)
   d8254:	681b      	ldr	r3, [r3, #0]
   d8256:	681b      	ldr	r3, [r3, #0]
   d8258:	9301      	str	r3, [sp, #4]
   d825a:	bd08      	pop	{r3, pc}
   d825c:	0003024c 	.word	0x0003024c

000d8260 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8260:	b508      	push	{r3, lr}
   d8262:	4b02      	ldr	r3, [pc, #8]	; (d826c <HAL_USB_USART_Begin+0xc>)
   d8264:	681b      	ldr	r3, [r3, #0]
   d8266:	685b      	ldr	r3, [r3, #4]
   d8268:	9301      	str	r3, [sp, #4]
   d826a:	bd08      	pop	{r3, pc}
   d826c:	0003024c 	.word	0x0003024c

000d8270 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8270:	b508      	push	{r3, lr}
   d8272:	4b02      	ldr	r3, [pc, #8]	; (d827c <HAL_USB_USART_Available_Data+0xc>)
   d8274:	681b      	ldr	r3, [r3, #0]
   d8276:	691b      	ldr	r3, [r3, #16]
   d8278:	9301      	str	r3, [sp, #4]
   d827a:	bd08      	pop	{r3, pc}
   d827c:	0003024c 	.word	0x0003024c

000d8280 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8280:	b508      	push	{r3, lr}
   d8282:	4b02      	ldr	r3, [pc, #8]	; (d828c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8284:	681b      	ldr	r3, [r3, #0]
   d8286:	695b      	ldr	r3, [r3, #20]
   d8288:	9301      	str	r3, [sp, #4]
   d828a:	bd08      	pop	{r3, pc}
   d828c:	0003024c 	.word	0x0003024c

000d8290 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8290:	b508      	push	{r3, lr}
   d8292:	4b02      	ldr	r3, [pc, #8]	; (d829c <HAL_USB_USART_Receive_Data+0xc>)
   d8294:	681b      	ldr	r3, [r3, #0]
   d8296:	699b      	ldr	r3, [r3, #24]
   d8298:	9301      	str	r3, [sp, #4]
   d829a:	bd08      	pop	{r3, pc}
   d829c:	0003024c 	.word	0x0003024c

000d82a0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d82a0:	b508      	push	{r3, lr}
   d82a2:	4b02      	ldr	r3, [pc, #8]	; (d82ac <HAL_USB_USART_Send_Data+0xc>)
   d82a4:	681b      	ldr	r3, [r3, #0]
   d82a6:	69db      	ldr	r3, [r3, #28]
   d82a8:	9301      	str	r3, [sp, #4]
   d82aa:	bd08      	pop	{r3, pc}
   d82ac:	0003024c 	.word	0x0003024c

000d82b0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d82b0:	b508      	push	{r3, lr}
   d82b2:	4b02      	ldr	r3, [pc, #8]	; (d82bc <HAL_USB_USART_Flush_Data+0xc>)
   d82b4:	681b      	ldr	r3, [r3, #0]
   d82b6:	6a1b      	ldr	r3, [r3, #32]
   d82b8:	9301      	str	r3, [sp, #4]
   d82ba:	bd08      	pop	{r3, pc}
   d82bc:	0003024c 	.word	0x0003024c

000d82c0 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d82c0:	b508      	push	{r3, lr}
   d82c2:	4b02      	ldr	r3, [pc, #8]	; (d82cc <HAL_USB_USART_Is_Enabled+0xc>)
   d82c4:	681b      	ldr	r3, [r3, #0]
   d82c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d82c8:	9301      	str	r3, [sp, #4]
   d82ca:	bd08      	pop	{r3, pc}
   d82cc:	0003024c 	.word	0x0003024c

000d82d0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d82d0:	b508      	push	{r3, lr}
   d82d2:	4b02      	ldr	r3, [pc, #8]	; (d82dc <panic_+0xc>)
   d82d4:	681b      	ldr	r3, [r3, #0]
   d82d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d82d8:	9301      	str	r3, [sp, #4]
   d82da:	bd08      	pop	{r3, pc}
   d82dc:	00030260 	.word	0x00030260

000d82e0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d82e0:	b508      	push	{r3, lr}
   d82e2:	4b02      	ldr	r3, [pc, #8]	; (d82ec <system_mode+0xc>)
   d82e4:	681b      	ldr	r3, [r3, #0]
   d82e6:	681b      	ldr	r3, [r3, #0]
   d82e8:	9301      	str	r3, [sp, #4]
   d82ea:	bd08      	pop	{r3, pc}
   d82ec:	00030220 	.word	0x00030220

000d82f0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d82f0:	b508      	push	{r3, lr}
   d82f2:	4b02      	ldr	r3, [pc, #8]	; (d82fc <set_system_mode+0xc>)
   d82f4:	681b      	ldr	r3, [r3, #0]
   d82f6:	685b      	ldr	r3, [r3, #4]
   d82f8:	9301      	str	r3, [sp, #4]
   d82fa:	bd08      	pop	{r3, pc}
   d82fc:	00030220 	.word	0x00030220

000d8300 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8300:	b508      	push	{r3, lr}
   d8302:	4b02      	ldr	r3, [pc, #8]	; (d830c <system_delay_ms+0xc>)
   d8304:	681b      	ldr	r3, [r3, #0]
   d8306:	695b      	ldr	r3, [r3, #20]
   d8308:	9301      	str	r3, [sp, #4]
   d830a:	bd08      	pop	{r3, pc}
   d830c:	00030220 	.word	0x00030220

000d8310 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d8310:	b508      	push	{r3, lr}
   d8312:	4b02      	ldr	r3, [pc, #8]	; (d831c <application_thread_current+0xc>)
   d8314:	681b      	ldr	r3, [r3, #0]
   d8316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8318:	9301      	str	r3, [sp, #4]
   d831a:	bd08      	pop	{r3, pc}
   d831c:	00030220 	.word	0x00030220

000d8320 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d8320:	b508      	push	{r3, lr}
   d8322:	4b02      	ldr	r3, [pc, #8]	; (d832c <application_thread_invoke+0xc>)
   d8324:	681b      	ldr	r3, [r3, #0]
   d8326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8328:	9301      	str	r3, [sp, #4]
   d832a:	bd08      	pop	{r3, pc}
   d832c:	00030220 	.word	0x00030220

000d8330 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8330:	b508      	push	{r3, lr}
   d8332:	4b02      	ldr	r3, [pc, #8]	; (d833c <system_thread_get_state+0xc>)
   d8334:	681b      	ldr	r3, [r3, #0]
   d8336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8338:	9301      	str	r3, [sp, #4]
   d833a:	bd08      	pop	{r3, pc}
   d833c:	00030220 	.word	0x00030220

000d8340 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8340:	b508      	push	{r3, lr}
   d8342:	4b03      	ldr	r3, [pc, #12]	; (d8350 <system_ctrl_set_app_request_handler+0x10>)
   d8344:	681b      	ldr	r3, [r3, #0]
   d8346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d834a:	9301      	str	r3, [sp, #4]
   d834c:	bd08      	pop	{r3, pc}
   d834e:	0000      	.short	0x0000
   d8350:	00030220 	.word	0x00030220

000d8354 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8354:	b508      	push	{r3, lr}
   d8356:	4b03      	ldr	r3, [pc, #12]	; (d8364 <system_ctrl_set_result+0x10>)
   d8358:	681b      	ldr	r3, [r3, #0]
   d835a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d835e:	9301      	str	r3, [sp, #4]
   d8360:	bd08      	pop	{r3, pc}
   d8362:	0000      	.short	0x0000
   d8364:	00030220 	.word	0x00030220

000d8368 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8368:	b508      	push	{r3, lr}
   d836a:	4b02      	ldr	r3, [pc, #8]	; (d8374 <network_connect+0xc>)
   d836c:	681b      	ldr	r3, [r3, #0]
   d836e:	685b      	ldr	r3, [r3, #4]
   d8370:	9301      	str	r3, [sp, #4]
   d8372:	bd08      	pop	{r3, pc}
   d8374:	00030240 	.word	0x00030240

000d8378 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8378:	b508      	push	{r3, lr}
   d837a:	4b02      	ldr	r3, [pc, #8]	; (d8384 <network_connecting+0xc>)
   d837c:	681b      	ldr	r3, [r3, #0]
   d837e:	689b      	ldr	r3, [r3, #8]
   d8380:	9301      	str	r3, [sp, #4]
   d8382:	bd08      	pop	{r3, pc}
   d8384:	00030240 	.word	0x00030240

000d8388 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8388:	b508      	push	{r3, lr}
   d838a:	4b02      	ldr	r3, [pc, #8]	; (d8394 <network_disconnect+0xc>)
   d838c:	681b      	ldr	r3, [r3, #0]
   d838e:	68db      	ldr	r3, [r3, #12]
   d8390:	9301      	str	r3, [sp, #4]
   d8392:	bd08      	pop	{r3, pc}
   d8394:	00030240 	.word	0x00030240

000d8398 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8398:	b508      	push	{r3, lr}
   d839a:	4b02      	ldr	r3, [pc, #8]	; (d83a4 <network_ready+0xc>)
   d839c:	681b      	ldr	r3, [r3, #0]
   d839e:	691b      	ldr	r3, [r3, #16]
   d83a0:	9301      	str	r3, [sp, #4]
   d83a2:	bd08      	pop	{r3, pc}
   d83a4:	00030240 	.word	0x00030240

000d83a8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d83a8:	b508      	push	{r3, lr}
   d83aa:	4b02      	ldr	r3, [pc, #8]	; (d83b4 <network_on+0xc>)
   d83ac:	681b      	ldr	r3, [r3, #0]
   d83ae:	695b      	ldr	r3, [r3, #20]
   d83b0:	9301      	str	r3, [sp, #4]
   d83b2:	bd08      	pop	{r3, pc}
   d83b4:	00030240 	.word	0x00030240

000d83b8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d83b8:	b508      	push	{r3, lr}
   d83ba:	4b02      	ldr	r3, [pc, #8]	; (d83c4 <network_off+0xc>)
   d83bc:	681b      	ldr	r3, [r3, #0]
   d83be:	699b      	ldr	r3, [r3, #24]
   d83c0:	9301      	str	r3, [sp, #4]
   d83c2:	bd08      	pop	{r3, pc}
   d83c4:	00030240 	.word	0x00030240

000d83c8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d83c8:	b508      	push	{r3, lr}
   d83ca:	4b02      	ldr	r3, [pc, #8]	; (d83d4 <network_listen+0xc>)
   d83cc:	681b      	ldr	r3, [r3, #0]
   d83ce:	69db      	ldr	r3, [r3, #28]
   d83d0:	9301      	str	r3, [sp, #4]
   d83d2:	bd08      	pop	{r3, pc}
   d83d4:	00030240 	.word	0x00030240

000d83d8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d83d8:	b508      	push	{r3, lr}
   d83da:	4b02      	ldr	r3, [pc, #8]	; (d83e4 <network_listening+0xc>)
   d83dc:	681b      	ldr	r3, [r3, #0]
   d83de:	6a1b      	ldr	r3, [r3, #32]
   d83e0:	9301      	str	r3, [sp, #4]
   d83e2:	bd08      	pop	{r3, pc}
   d83e4:	00030240 	.word	0x00030240

000d83e8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d83e8:	b508      	push	{r3, lr}
   d83ea:	4b02      	ldr	r3, [pc, #8]	; (d83f4 <network_set_listen_timeout+0xc>)
   d83ec:	681b      	ldr	r3, [r3, #0]
   d83ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d83f0:	9301      	str	r3, [sp, #4]
   d83f2:	bd08      	pop	{r3, pc}
   d83f4:	00030240 	.word	0x00030240

000d83f8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d83f8:	b508      	push	{r3, lr}
   d83fa:	4b02      	ldr	r3, [pc, #8]	; (d8404 <network_get_listen_timeout+0xc>)
   d83fc:	681b      	ldr	r3, [r3, #0]
   d83fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8400:	9301      	str	r3, [sp, #4]
   d8402:	bd08      	pop	{r3, pc}
   d8404:	00030240 	.word	0x00030240

000d8408 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d8408:	b508      	push	{r3, lr}
   d840a:	4b02      	ldr	r3, [pc, #8]	; (d8414 <network_is_on+0xc>)
   d840c:	681b      	ldr	r3, [r3, #0]
   d840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8410:	9301      	str	r3, [sp, #4]
   d8412:	bd08      	pop	{r3, pc}
   d8414:	00030240 	.word	0x00030240

000d8418 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d8418:	b508      	push	{r3, lr}
   d841a:	4b02      	ldr	r3, [pc, #8]	; (d8424 <network_is_off+0xc>)
   d841c:	681b      	ldr	r3, [r3, #0]
   d841e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8420:	9301      	str	r3, [sp, #4]
   d8422:	bd08      	pop	{r3, pc}
   d8424:	00030240 	.word	0x00030240

000d8428 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8428:	b508      	push	{r3, lr}
   d842a:	4b02      	ldr	r3, [pc, #8]	; (d8434 <spark_process+0xc>)
   d842c:	681b      	ldr	r3, [r3, #0]
   d842e:	689b      	ldr	r3, [r3, #8]
   d8430:	9301      	str	r3, [sp, #4]
   d8432:	bd08      	pop	{r3, pc}
   d8434:	00030244 	.word	0x00030244

000d8438 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8438:	b508      	push	{r3, lr}
   d843a:	4b02      	ldr	r3, [pc, #8]	; (d8444 <spark_cloud_flag_connected+0xc>)
   d843c:	681b      	ldr	r3, [r3, #0]
   d843e:	695b      	ldr	r3, [r3, #20]
   d8440:	9301      	str	r3, [sp, #4]
   d8442:	bd08      	pop	{r3, pc}
   d8444:	00030244 	.word	0x00030244

000d8448 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d8448:	b508      	push	{r3, lr}
   d844a:	4b02      	ldr	r3, [pc, #8]	; (d8454 <spark_send_event+0xc>)
   d844c:	681b      	ldr	r3, [r3, #0]
   d844e:	6a1b      	ldr	r3, [r3, #32]
   d8450:	9301      	str	r3, [sp, #4]
   d8452:	bd08      	pop	{r3, pc}
   d8454:	00030244 	.word	0x00030244

000d8458 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8458:	b508      	push	{r3, lr}
   d845a:	4b02      	ldr	r3, [pc, #8]	; (d8464 <spark_sync_time_pending+0xc>)
   d845c:	681b      	ldr	r3, [r3, #0]
   d845e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8460:	9301      	str	r3, [sp, #4]
   d8462:	bd08      	pop	{r3, pc}
   d8464:	00030244 	.word	0x00030244

000d8468 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8468:	b508      	push	{r3, lr}
   d846a:	4b02      	ldr	r3, [pc, #8]	; (d8474 <spark_set_random_seed_from_cloud_handler+0xc>)
   d846c:	681b      	ldr	r3, [r3, #0]
   d846e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8470:	9301      	str	r3, [sp, #4]
   d8472:	bd08      	pop	{r3, pc}
   d8474:	00030244 	.word	0x00030244

000d8478 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8478:	b508      	push	{r3, lr}
   d847a:	4b02      	ldr	r3, [pc, #8]	; (d8484 <malloc+0xc>)
   d847c:	681b      	ldr	r3, [r3, #0]
   d847e:	681b      	ldr	r3, [r3, #0]
   d8480:	9301      	str	r3, [sp, #4]
   d8482:	bd08      	pop	{r3, pc}
   d8484:	0003021c 	.word	0x0003021c

000d8488 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8488:	b508      	push	{r3, lr}
   d848a:	4b02      	ldr	r3, [pc, #8]	; (d8494 <free+0xc>)
   d848c:	681b      	ldr	r3, [r3, #0]
   d848e:	685b      	ldr	r3, [r3, #4]
   d8490:	9301      	str	r3, [sp, #4]
   d8492:	bd08      	pop	{r3, pc}
   d8494:	0003021c 	.word	0x0003021c

000d8498 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8498:	b508      	push	{r3, lr}
   d849a:	4b02      	ldr	r3, [pc, #8]	; (d84a4 <realloc+0xc>)
   d849c:	681b      	ldr	r3, [r3, #0]
   d849e:	689b      	ldr	r3, [r3, #8]
   d84a0:	9301      	str	r3, [sp, #4]
   d84a2:	bd08      	pop	{r3, pc}
   d84a4:	0003021c 	.word	0x0003021c

000d84a8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d84a8:	b508      	push	{r3, lr}
   d84aa:	4b02      	ldr	r3, [pc, #8]	; (d84b4 <vsnprintf+0xc>)
   d84ac:	681b      	ldr	r3, [r3, #0]
   d84ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d84b0:	9301      	str	r3, [sp, #4]
   d84b2:	bd08      	pop	{r3, pc}
   d84b4:	0003021c 	.word	0x0003021c

000d84b8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d84b8:	b508      	push	{r3, lr}
   d84ba:	4b02      	ldr	r3, [pc, #8]	; (d84c4 <abort+0xc>)
   d84bc:	681b      	ldr	r3, [r3, #0]
   d84be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d84c0:	9301      	str	r3, [sp, #4]
   d84c2:	bd08      	pop	{r3, pc}
   d84c4:	0003021c 	.word	0x0003021c

000d84c8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d84c8:	b508      	push	{r3, lr}
   d84ca:	4b02      	ldr	r3, [pc, #8]	; (d84d4 <_malloc_r+0xc>)
   d84cc:	681b      	ldr	r3, [r3, #0]
   d84ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d84d0:	9301      	str	r3, [sp, #4]
   d84d2:	bd08      	pop	{r3, pc}
   d84d4:	0003021c 	.word	0x0003021c

000d84d8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d84d8:	b508      	push	{r3, lr}
   d84da:	4b02      	ldr	r3, [pc, #8]	; (d84e4 <__errno+0xc>)
   d84dc:	681b      	ldr	r3, [r3, #0]
   d84de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d84e0:	9301      	str	r3, [sp, #4]
   d84e2:	bd08      	pop	{r3, pc}
   d84e4:	0003021c 	.word	0x0003021c

000d84e8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d84e8:	b508      	push	{r3, lr}
   d84ea:	4b02      	ldr	r3, [pc, #8]	; (d84f4 <newlib_impure_ptr_callback+0xc>)
   d84ec:	681b      	ldr	r3, [r3, #0]
   d84ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d84f0:	9301      	str	r3, [sp, #4]
   d84f2:	bd08      	pop	{r3, pc}
   d84f4:	0003021c 	.word	0x0003021c

000d84f8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d84f8:	2200      	movs	r2, #0
   d84fa:	6840      	ldr	r0, [r0, #4]
   d84fc:	4611      	mov	r1, r2
   d84fe:	f7ff bf6b 	b.w	d83d8 <network_listening>

000d8502 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8502:	2200      	movs	r2, #0
   d8504:	6840      	ldr	r0, [r0, #4]
   d8506:	4611      	mov	r1, r2
   d8508:	f7ff bf76 	b.w	d83f8 <network_get_listen_timeout>

000d850c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d850c:	6840      	ldr	r0, [r0, #4]
   d850e:	2200      	movs	r2, #0
   d8510:	f7ff bf6a 	b.w	d83e8 <network_set_listen_timeout>

000d8514 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8514:	6840      	ldr	r0, [r0, #4]
   d8516:	2200      	movs	r2, #0
   d8518:	f081 0101 	eor.w	r1, r1, #1
   d851c:	f7ff bf54 	b.w	d83c8 <network_listen>

000d8520 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8520:	2300      	movs	r3, #0
   d8522:	6840      	ldr	r0, [r0, #4]
   d8524:	461a      	mov	r2, r3
   d8526:	4619      	mov	r1, r3
   d8528:	f7ff bf46 	b.w	d83b8 <network_off>

000d852c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d852c:	2300      	movs	r3, #0
   d852e:	6840      	ldr	r0, [r0, #4]
   d8530:	461a      	mov	r2, r3
   d8532:	4619      	mov	r1, r3
   d8534:	f7ff bf38 	b.w	d83a8 <network_on>

000d8538 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8538:	2200      	movs	r2, #0
   d853a:	6840      	ldr	r0, [r0, #4]
   d853c:	4611      	mov	r1, r2
   d853e:	f7ff bf2b 	b.w	d8398 <network_ready>

000d8542 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8542:	2200      	movs	r2, #0
   d8544:	6840      	ldr	r0, [r0, #4]
   d8546:	4611      	mov	r1, r2
   d8548:	f7ff bf16 	b.w	d8378 <network_connecting>

000d854c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d854c:	6840      	ldr	r0, [r0, #4]
   d854e:	2200      	movs	r2, #0
   d8550:	2102      	movs	r1, #2
   d8552:	f7ff bf19 	b.w	d8388 <network_disconnect>

000d8556 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8556:	2300      	movs	r3, #0
   d8558:	6840      	ldr	r0, [r0, #4]
   d855a:	461a      	mov	r2, r3
   d855c:	f7ff bf04 	b.w	d8368 <network_connect>

000d8560 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8560:	4b02      	ldr	r3, [pc, #8]	; (d856c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8562:	2203      	movs	r2, #3
   d8564:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8566:	4a02      	ldr	r2, [pc, #8]	; (d8570 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8568:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d856a:	4770      	bx	lr
   d856c:	2003e584 	.word	0x2003e584
   d8570:	000de744 	.word	0x000de744

000d8574 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d8574:	2100      	movs	r1, #0
   d8576:	f7ff be5b 	b.w	d8230 <hal_spi_acquire>

000d857a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d857a:	2100      	movs	r1, #0
   d857c:	f7ff be60 	b.w	d8240 <hal_spi_release>

000d8580 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d8580:	b510      	push	{r4, lr}
   d8582:	4604      	mov	r4, r0
   d8584:	4608      	mov	r0, r1
{
    _spi = spi;
   d8586:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d8588:	f7ff fe22 	bl	d81d0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d858c:	2300      	movs	r3, #0
   d858e:	6063      	str	r3, [r4, #4]
}
   d8590:	4620      	mov	r0, r4
   d8592:	bd10      	pop	{r4, pc}

000d8594 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d8594:	b510      	push	{r4, lr}
   d8596:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d8598:	7800      	ldrb	r0, [r0, #0]
   d859a:	f7ff ffeb 	bl	d8574 <_ZN8SPIClass4lockEv.isra.0>
   d859e:	b948      	cbnz	r0, d85b4 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d85a0:	7820      	ldrb	r0, [r4, #0]
   d85a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d85a6:	f7ff fe03 	bl	d81b0 <hal_spi_begin>
        unlock();
   d85aa:	7820      	ldrb	r0, [r4, #0]
    }
}
   d85ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d85b0:	f7ff bfe3 	b.w	d857a <_ZN8SPIClass6unlockEv.isra.0>
}
   d85b4:	bd10      	pop	{r4, pc}

000d85b6 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d85b6:	7800      	ldrb	r0, [r0, #0]
   d85b8:	f7ff bfdf 	b.w	d857a <_ZN8SPIClass6unlockEv.isra.0>

000d85bc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d85bc:	0840      	lsrs	r0, r0, #1
{
   d85be:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d85c0:	6018      	str	r0, [r3, #0]
   d85c2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d85c4:	6818      	ldr	r0, [r3, #0]
   d85c6:	4288      	cmp	r0, r1
   d85c8:	b2e5      	uxtb	r5, r4
   d85ca:	d906      	bls.n	d85da <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d85cc:	3401      	adds	r4, #1
   d85ce:	2c08      	cmp	r4, #8
   d85d0:	d002      	beq.n	d85d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d85d2:	0840      	lsrs	r0, r0, #1
   d85d4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d85d6:	e7f5      	b.n	d85c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d85d8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d85da:	4b02      	ldr	r3, [pc, #8]	; (d85e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d85dc:	5d5b      	ldrb	r3, [r3, r5]
   d85de:	7013      	strb	r3, [r2, #0]
}
   d85e0:	bd30      	pop	{r4, r5, pc}
   d85e2:	bf00      	nop
   d85e4:	000de778 	.word	0x000de778

000d85e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d85e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d85ec:	4606      	mov	r6, r0
   d85ee:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d85f0:	7800      	ldrb	r0, [r0, #0]
{
   d85f2:	460c      	mov	r4, r1
    CHECK(lock());
   d85f4:	f7ff ffbe 	bl	d8574 <_ZN8SPIClass4lockEv.isra.0>
   d85f8:	2800      	cmp	r0, #0
   d85fa:	db1b      	blt.n	d8634 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d85fc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d85fe:	2214      	movs	r2, #20
   d8600:	2100      	movs	r1, #0
   d8602:	a809      	add	r0, sp, #36	; 0x24
   d8604:	f004 ffb2 	bl	dd56c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8608:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d860a:	2200      	movs	r2, #0
   d860c:	a909      	add	r1, sp, #36	; 0x24
   d860e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d8610:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d8614:	f7ff fdec 	bl	d81f0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d8618:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d861c:	b113      	cbz	r3, d8624 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d861e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d8622:	b155      	cbz	r5, d863a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d8624:	2700      	movs	r7, #0
   d8626:	46b9      	mov	r9, r7
   d8628:	46b8      	mov	r8, r7
   d862a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d862c:	7923      	ldrb	r3, [r4, #4]
   d862e:	b15d      	cbz	r5, d8648 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d8630:	b1c3      	cbz	r3, d8664 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d8632:	2000      	movs	r0, #0
}
   d8634:	b00f      	add	sp, #60	; 0x3c
   d8636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d863a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d863e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d8642:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d8646:	e7f1      	b.n	d862c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d8648:	2b00      	cmp	r3, #0
   d864a:	d135      	bne.n	d86b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d864c:	68a3      	ldr	r3, [r4, #8]
   d864e:	4543      	cmp	r3, r8
   d8650:	d108      	bne.n	d8664 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d8652:	f88d 9020 	strb.w	r9, [sp, #32]
   d8656:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d865a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d865e:	89a3      	ldrh	r3, [r4, #12]
   d8660:	429a      	cmp	r2, r3
   d8662:	d0e6      	beq.n	d8632 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d8664:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d8666:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d8668:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d866c:	980a      	ldr	r0, [sp, #40]	; 0x28
   d866e:	ab04      	add	r3, sp, #16
   d8670:	f10d 020f 	add.w	r2, sp, #15
   d8674:	f7ff ffa2 	bl	d85bc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d8678:	7921      	ldrb	r1, [r4, #4]
   d867a:	b985      	cbnz	r5, d869e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d867c:	b989      	cbnz	r1, d86a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d867e:	68a3      	ldr	r3, [r4, #8]
   d8680:	4543      	cmp	r3, r8
   d8682:	d30e      	bcc.n	d86a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d8684:	f88d 9020 	strb.w	r9, [sp, #32]
   d8688:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d868c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8690:	89a3      	ldrh	r3, [r4, #12]
   d8692:	429a      	cmp	r2, r3
   d8694:	d105      	bne.n	d86a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d8696:	9b04      	ldr	r3, [sp, #16]
   d8698:	4543      	cmp	r3, r8
   d869a:	d102      	bne.n	d86a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d869c:	e7c9      	b.n	d8632 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d869e:	2900      	cmp	r1, #0
   d86a0:	d1f9      	bne.n	d8696 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d86a2:	2300      	movs	r3, #0
   d86a4:	9301      	str	r3, [sp, #4]
   d86a6:	7b63      	ldrb	r3, [r4, #13]
   d86a8:	9300      	str	r3, [sp, #0]
   d86aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d86ae:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d86b0:	7830      	ldrb	r0, [r6, #0]
   d86b2:	f7ff fdb5 	bl	d8220 <hal_spi_set_settings>
   d86b6:	e7bc      	b.n	d8632 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d86b8:	e9cd 5500 	strd	r5, r5, [sp]
   d86bc:	462b      	mov	r3, r5
   d86be:	462a      	mov	r2, r5
   d86c0:	2101      	movs	r1, #1
   d86c2:	e7f5      	b.n	d86b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d86c4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d86c4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d86c6:	7800      	ldrb	r0, [r0, #0]
   d86c8:	f7ff fd7a 	bl	d81c0 <hal_spi_transfer>
}
   d86cc:	b2c0      	uxtb	r0, r0
   d86ce:	bd08      	pop	{r3, pc}

000d86d0 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d86d0:	b530      	push	{r4, r5, lr}
   d86d2:	b087      	sub	sp, #28
   d86d4:	4604      	mov	r4, r0
   d86d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d86d8:	9500      	str	r5, [sp, #0]
   d86da:	7800      	ldrb	r0, [r0, #0]
   d86dc:	f7ff fd90 	bl	d8200 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d86e0:	b93d      	cbnz	r5, d86f2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d86e2:	7820      	ldrb	r0, [r4, #0]
   d86e4:	a902      	add	r1, sp, #8
   d86e6:	f7ff fd93 	bl	d8210 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d86ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d86ee:	07db      	lsls	r3, r3, #31
   d86f0:	d4f7      	bmi.n	d86e2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d86f2:	b007      	add	sp, #28
   d86f4:	bd30      	pop	{r4, r5, pc}
	...

000d86f8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d86f8:	4b05      	ldr	r3, [pc, #20]	; (d8710 <_GLOBAL__sub_I_System+0x18>)
   d86fa:	2202      	movs	r2, #2
   d86fc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d86fe:	4b05      	ldr	r3, [pc, #20]	; (d8714 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d8700:	4a05      	ldr	r2, [pc, #20]	; (d8718 <_GLOBAL__sub_I_System+0x20>)
   d8702:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d8704:	2000      	movs	r0, #0
   d8706:	6018      	str	r0, [r3, #0]
   d8708:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d870a:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d870c:	f7ff bdf0 	b.w	d82f0 <set_system_mode>
   d8710:	2003e598 	.word	0x2003e598
   d8714:	2003e58c 	.word	0x2003e58c
   d8718:	ffff0000 	.word	0xffff0000

000d871c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d871c:	b510      	push	{r4, lr}
   d871e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d8720:	f004 ff6d 	bl	dd5fe <strlen>
   d8724:	3801      	subs	r0, #1
   d8726:	1823      	adds	r3, r4, r0
   d8728:	4620      	mov	r0, r4
	while(i<j){
   d872a:	4283      	cmp	r3, r0
   d872c:	d906      	bls.n	d873c <_Z11str_reversePc+0x20>
		c = *i;
   d872e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d8730:	7819      	ldrb	r1, [r3, #0]
   d8732:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d8736:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d873a:	e7f6      	b.n	d872a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d873c:	bd10      	pop	{r4, pc}

000d873e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d873e:	b570      	push	{r4, r5, r6, lr}
   d8740:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d8742:	1e91      	subs	r1, r2, #2
   d8744:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d8746:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d8748:	d822      	bhi.n	d8790 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d874a:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d874c:	b16d      	cbz	r5, d876a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d874e:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d8752:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d8756:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d8758:	2d09      	cmp	r5, #9
                *ptr += '0';
   d875a:	bf94      	ite	ls
   d875c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d875e:	3157      	addhi	r1, #87	; 0x57
   d8760:	b2c9      	uxtb	r1, r1
   d8762:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d8766:	4635      	mov	r5, r6
	while(a){
   d8768:	e7f0      	b.n	d874c <ultoa+0xe>
   d876a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d876c:	4423      	add	r3, r4
            *ptr++ = '0';
   d876e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d8770:	4293      	cmp	r3, r2
   d8772:	d902      	bls.n	d877a <ultoa+0x3c>
            *ptr++ = '0';
   d8774:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d8778:	e7fa      	b.n	d8770 <ultoa+0x32>
   d877a:	1a1a      	subs	r2, r3, r0
   d877c:	4283      	cmp	r3, r0
   d877e:	bf38      	it	cc
   d8780:	2200      	movcc	r2, #0

	*ptr = '\0';
   d8782:	2300      	movs	r3, #0
   d8784:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d8786:	4620      	mov	r0, r4
   d8788:	f7ff ffc8 	bl	d871c <_Z11str_reversePc>
	return buffer;
   d878c:	4620      	mov	r0, r4
}
   d878e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d8790:	2000      	movs	r0, #0
   d8792:	e7fc      	b.n	d878e <ultoa+0x50>

000d8794 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d8794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8798:	ec57 6b10 	vmov	r6, r7, d0
   d879c:	4680      	mov	r8, r0
   d879e:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d87a0:	ee10 0a10 	vmov	r0, s0
   d87a4:	2200      	movs	r2, #0
   d87a6:	2300      	movs	r3, #0
   d87a8:	4639      	mov	r1, r7
   d87aa:	f004 fafd 	bl	dcda8 <__aeabi_dcmplt>
   d87ae:	b128      	cbz	r0, d87bc <_Z4dtoadhPc+0x28>
        val = -val;
   d87b0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d87b4:	461f      	mov	r7, r3
        *sout++ = '-';
   d87b6:	232d      	movs	r3, #45	; 0x2d
   d87b8:	f804 3b01 	strb.w	r3, [r4], #1
   d87bc:	2300      	movs	r3, #0
    }
    long scale = 1;
   d87be:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d87c2:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d87c4:	b2d9      	uxtb	r1, r3
   d87c6:	4588      	cmp	r8, r1
   d87c8:	d903      	bls.n	d87d2 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d87ca:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d87ce:	3301      	adds	r3, #1
   d87d0:	e7f8      	b.n	d87c4 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d87d2:	4648      	mov	r0, r9
   d87d4:	f004 f80c 	bl	dc7f0 <__aeabi_i2d>
   d87d8:	4632      	mov	r2, r6
   d87da:	463b      	mov	r3, r7
   d87dc:	f004 f872 	bl	dc8c4 <__aeabi_dmul>
   d87e0:	4606      	mov	r6, r0
   d87e2:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d87e4:	f004 fd2c 	bl	dd240 <__aeabi_d2ulz>
   d87e8:	4605      	mov	r5, r0
   d87ea:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d87ec:	f004 f834 	bl	dc858 <__aeabi_ul2d>
   d87f0:	4602      	mov	r2, r0
   d87f2:	460b      	mov	r3, r1
   d87f4:	4630      	mov	r0, r6
   d87f6:	4639      	mov	r1, r7
   d87f8:	f003 feac 	bl	dc554 <__aeabi_dsub>
   d87fc:	4b13      	ldr	r3, [pc, #76]	; (d884c <_Z4dtoadhPc+0xb8>)
   d87fe:	2200      	movs	r2, #0
   d8800:	f004 fae6 	bl	dcdd0 <__aeabi_dcmpge>
   d8804:	b110      	cbz	r0, d880c <_Z4dtoadhPc+0x78>
        fixed++;
   d8806:	3501      	adds	r5, #1
   d8808:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d880c:	464a      	mov	r2, r9
   d880e:	4628      	mov	r0, r5
   d8810:	17d3      	asrs	r3, r2, #31
   d8812:	4651      	mov	r1, sl
   d8814:	f004 fcfc 	bl	dd210 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d8818:	2301      	movs	r3, #1
   d881a:	4615      	mov	r5, r2
   d881c:	4621      	mov	r1, r4
   d881e:	220a      	movs	r2, #10
   d8820:	f7ff ff8d 	bl	d873e <ultoa>
    if (prec) {
   d8824:	f1b8 0f00 	cmp.w	r8, #0
   d8828:	d00d      	beq.n	d8846 <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d882a:	4620      	mov	r0, r4
   d882c:	f004 fee7 	bl	dd5fe <strlen>
        *sout++ = '.';
   d8830:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d8832:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d8834:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d8836:	220a      	movs	r2, #10
   d8838:	4643      	mov	r3, r8
   d883a:	4628      	mov	r0, r5
   d883c:	3101      	adds	r1, #1
    }
}
   d883e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d8842:	f7ff bf7c 	b.w	d873e <ultoa>
}
   d8846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d884a:	bf00      	nop
   d884c:	3fe00000 	.word	0x3fe00000

000d8850 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8850:	b510      	push	{r4, lr}
   d8852:	4604      	mov	r4, r0
{
	free(buffer);
   d8854:	6800      	ldr	r0, [r0, #0]
   d8856:	f7ff fe17 	bl	d8488 <free>
}
   d885a:	4620      	mov	r0, r4
   d885c:	bd10      	pop	{r4, pc}

000d885e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d885e:	b510      	push	{r4, lr}
   d8860:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8862:	6800      	ldr	r0, [r0, #0]
   d8864:	b108      	cbz	r0, d886a <_ZN6String10invalidateEv+0xc>
   d8866:	f7ff fe0f 	bl	d8488 <free>
	buffer = NULL;
   d886a:	2300      	movs	r3, #0
	capacity = len = 0;
   d886c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d8870:	6023      	str	r3, [r4, #0]
}
   d8872:	bd10      	pop	{r4, pc}

000d8874 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8874:	b538      	push	{r3, r4, r5, lr}
   d8876:	4604      	mov	r4, r0
   d8878:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d887a:	6800      	ldr	r0, [r0, #0]
   d887c:	3101      	adds	r1, #1
   d887e:	f7ff fe0b 	bl	d8498 <realloc>
	if (newbuffer) {
   d8882:	b110      	cbz	r0, d888a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8884:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d8888:	2001      	movs	r0, #1
	}
	return 0;
}
   d888a:	bd38      	pop	{r3, r4, r5, pc}

000d888c <_ZN6String7reserveEj>:
{
   d888c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d888e:	6803      	ldr	r3, [r0, #0]
{
   d8890:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8892:	b123      	cbz	r3, d889e <_ZN6String7reserveEj+0x12>
   d8894:	6843      	ldr	r3, [r0, #4]
   d8896:	428b      	cmp	r3, r1
   d8898:	d301      	bcc.n	d889e <_ZN6String7reserveEj+0x12>
   d889a:	2001      	movs	r0, #1
}
   d889c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d889e:	4620      	mov	r0, r4
   d88a0:	f7ff ffe8 	bl	d8874 <_ZN6String12changeBufferEj>
   d88a4:	2800      	cmp	r0, #0
   d88a6:	d0f9      	beq.n	d889c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d88a8:	68a3      	ldr	r3, [r4, #8]
   d88aa:	2b00      	cmp	r3, #0
   d88ac:	d1f5      	bne.n	d889a <_ZN6String7reserveEj+0xe>
   d88ae:	6822      	ldr	r2, [r4, #0]
   d88b0:	7013      	strb	r3, [r2, #0]
   d88b2:	e7f2      	b.n	d889a <_ZN6String7reserveEj+0xe>

000d88b4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d88b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d88b6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d88b8:	4611      	mov	r1, r2
   d88ba:	9201      	str	r2, [sp, #4]
{
   d88bc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d88be:	f7ff ffe5 	bl	d888c <_ZN6String7reserveEj>
   d88c2:	9a01      	ldr	r2, [sp, #4]
   d88c4:	b928      	cbnz	r0, d88d2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d88c6:	4620      	mov	r0, r4
   d88c8:	f7ff ffc9 	bl	d885e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d88cc:	4620      	mov	r0, r4
   d88ce:	b003      	add	sp, #12
   d88d0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d88d2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d88d4:	4629      	mov	r1, r5
   d88d6:	6820      	ldr	r0, [r4, #0]
   d88d8:	f004 fe3a 	bl	dd550 <memcpy>
	buffer[len] = 0;
   d88dc:	6822      	ldr	r2, [r4, #0]
   d88de:	68a3      	ldr	r3, [r4, #8]
   d88e0:	2100      	movs	r1, #0
   d88e2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d88e4:	e7f2      	b.n	d88cc <_ZN6String4copyEPKcj+0x18>

000d88e6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d88e6:	b513      	push	{r0, r1, r4, lr}
   d88e8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d88ea:	b159      	cbz	r1, d8904 <_ZN6StringaSEPKc+0x1e>
   d88ec:	4608      	mov	r0, r1
   d88ee:	9101      	str	r1, [sp, #4]
   d88f0:	f004 fe85 	bl	dd5fe <strlen>
   d88f4:	9901      	ldr	r1, [sp, #4]
   d88f6:	4602      	mov	r2, r0
   d88f8:	4620      	mov	r0, r4
   d88fa:	f7ff ffdb 	bl	d88b4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d88fe:	4620      	mov	r0, r4
   d8900:	b002      	add	sp, #8
   d8902:	bd10      	pop	{r4, pc}
	else invalidate();
   d8904:	f7ff ffab 	bl	d885e <_ZN6String10invalidateEv>
   d8908:	e7f9      	b.n	d88fe <_ZN6StringaSEPKc+0x18>

000d890a <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d890a:	b510      	push	{r4, lr}
   d890c:	4604      	mov	r4, r0
   d890e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d8910:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d8912:	4608      	mov	r0, r1
	capacity = 0;
   d8914:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d8918:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d891a:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d891c:	a901      	add	r1, sp, #4
   d891e:	b2c0      	uxtb	r0, r0
   d8920:	f7ff ff38 	bl	d8794 <_Z4dtoadhPc>
        *this = buf;
   d8924:	a901      	add	r1, sp, #4
   d8926:	4620      	mov	r0, r4
   d8928:	f7ff ffdd 	bl	d88e6 <_ZN6StringaSEPKc>
}
   d892c:	4620      	mov	r0, r4
   d892e:	b00a      	add	sp, #40	; 0x28
   d8930:	bd10      	pop	{r4, pc}

000d8932 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8932:	b510      	push	{r4, lr}
          _M_dispose();
   d8934:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8936:	4604      	mov	r4, r0
          _M_dispose();
   d8938:	689b      	ldr	r3, [r3, #8]
   d893a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d893c:	68a3      	ldr	r3, [r4, #8]
   d893e:	3b01      	subs	r3, #1
   d8940:	60a3      	str	r3, [r4, #8]
   d8942:	b92b      	cbnz	r3, d8950 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d8944:	6823      	ldr	r3, [r4, #0]
   d8946:	4620      	mov	r0, r4
   d8948:	68db      	ldr	r3, [r3, #12]
    }
   d894a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d894e:	4718      	bx	r3
    }
   d8950:	bd10      	pop	{r4, pc}

000d8952 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d8952:	680b      	ldr	r3, [r1, #0]
   d8954:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d8956:	b113      	cbz	r3, d895e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d8958:	685a      	ldr	r2, [r3, #4]
   d895a:	3201      	adds	r2, #1
   d895c:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d895e:	4770      	bx	lr

000d8960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d8960:	b510      	push	{r4, lr}
   d8962:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d8964:	6800      	ldr	r0, [r0, #0]
   d8966:	b128      	cbz	r0, d8974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d8968:	6843      	ldr	r3, [r0, #4]
   d896a:	3b01      	subs	r3, #1
   d896c:	6043      	str	r3, [r0, #4]
   d896e:	b90b      	cbnz	r3, d8974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d8970:	f7ff ffdf 	bl	d8932 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d8974:	4620      	mov	r0, r4
   d8976:	bd10      	pop	{r4, pc}

000d8978 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8978:	4802      	ldr	r0, [pc, #8]	; (d8984 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d897a:	2300      	movs	r3, #0
   d897c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d897e:	f7ff bb67 	b.w	d8050 <os_mutex_recursive_create>
   d8982:	bf00      	nop
   d8984:	2003e59c 	.word	0x2003e59c

000d8988 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d898a:	4606      	mov	r6, r0
   d898c:	460d      	mov	r5, r1
  size_t n = 0;
   d898e:	188f      	adds	r7, r1, r2
   d8990:	2400      	movs	r4, #0
  while (size--) {
   d8992:	42bd      	cmp	r5, r7
   d8994:	d00c      	beq.n	d89b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8996:	6833      	ldr	r3, [r6, #0]
   d8998:	f815 1b01 	ldrb.w	r1, [r5], #1
   d899c:	689b      	ldr	r3, [r3, #8]
   d899e:	4630      	mov	r0, r6
   d89a0:	4798      	blx	r3
     if (chunk>=0)
   d89a2:	1e03      	subs	r3, r0, #0
   d89a4:	db01      	blt.n	d89aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d89a6:	441c      	add	r4, r3
  while (size--) {
   d89a8:	e7f3      	b.n	d8992 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d89aa:	2c00      	cmp	r4, #0
   d89ac:	bf08      	it	eq
   d89ae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d89b0:	4620      	mov	r0, r4
   d89b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d89b4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d89b4:	b513      	push	{r0, r1, r4, lr}
   d89b6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d89b8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d89ba:	b159      	cbz	r1, d89d4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d89bc:	9101      	str	r1, [sp, #4]
   d89be:	f004 fe1e 	bl	dd5fe <strlen>
   d89c2:	6823      	ldr	r3, [r4, #0]
   d89c4:	9901      	ldr	r1, [sp, #4]
   d89c6:	68db      	ldr	r3, [r3, #12]
   d89c8:	4602      	mov	r2, r0
   d89ca:	4620      	mov	r0, r4
    }
   d89cc:	b002      	add	sp, #8
   d89ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d89d2:	4718      	bx	r3
    }
   d89d4:	b002      	add	sp, #8
   d89d6:	bd10      	pop	{r4, pc}

000d89d8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d89d8:	b508      	push	{r3, lr}
  return write(str);
   d89da:	f7ff ffeb 	bl	d89b4 <_ZN5Print5writeEPKc>
}
   d89de:	bd08      	pop	{r3, pc}

000d89e0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d89e0:	6803      	ldr	r3, [r0, #0]
   d89e2:	689b      	ldr	r3, [r3, #8]
   d89e4:	4718      	bx	r3

000d89e6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d89e6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d89e8:	210d      	movs	r1, #13
{
   d89ea:	4605      	mov	r5, r0
  size_t n = print('\r');
   d89ec:	f7ff fff8 	bl	d89e0 <_ZN5Print5printEc>
  n += print('\n');
   d89f0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d89f2:	4604      	mov	r4, r0
  n += print('\n');
   d89f4:	4628      	mov	r0, r5
   d89f6:	f7ff fff3 	bl	d89e0 <_ZN5Print5printEc>
  return n;
}
   d89fa:	4420      	add	r0, r4
   d89fc:	bd38      	pop	{r3, r4, r5, pc}

000d89fe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d89fe:	b538      	push	{r3, r4, r5, lr}
   d8a00:	4605      	mov	r5, r0
  return write(str);
   d8a02:	f7ff ffd7 	bl	d89b4 <_ZN5Print5writeEPKc>
   d8a06:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d8a08:	4628      	mov	r0, r5
   d8a0a:	f7ff ffec 	bl	d89e6 <_ZN5Print7printlnEv>
  return n;
}
   d8a0e:	4420      	add	r0, r4
   d8a10:	bd38      	pop	{r3, r4, r5, pc}

000d8a12 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d8a12:	f7ff bff4 	b.w	d89fe <_ZN5Print7printlnEPKc>

000d8a16 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8a16:	b530      	push	{r4, r5, lr}
   d8a18:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8a1a:	2300      	movs	r3, #0
   d8a1c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8a20:	2a01      	cmp	r2, #1
   d8a22:	bf98      	it	ls
   d8a24:	220a      	movls	r2, #10
   d8a26:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d8a28:	460d      	mov	r5, r1
   d8a2a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d8a2e:	fb01 5312 	mls	r3, r1, r2, r5
   d8a32:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8a36:	2b09      	cmp	r3, #9
   d8a38:	bf94      	ite	ls
   d8a3a:	3330      	addls	r3, #48	; 0x30
   d8a3c:	3337      	addhi	r3, #55	; 0x37
   d8a3e:	b2db      	uxtb	r3, r3
  } while(n);
   d8a40:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8a42:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d8a46:	d9ef      	bls.n	d8a28 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d8a48:	4621      	mov	r1, r4
   d8a4a:	f7ff ffb3 	bl	d89b4 <_ZN5Print5writeEPKc>
}
   d8a4e:	b00b      	add	sp, #44	; 0x2c
   d8a50:	bd30      	pop	{r4, r5, pc}

000d8a52 <_ZN5Print11printNumberEyh>:
 
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d8a52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8a56:	b093      	sub	sp, #76	; 0x4c
   d8a58:	4619      	mov	r1, r3
   d8a5a:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8a5e:	2d01      	cmp	r5, #1
  *str = '\0';
   d8a60:	f04f 0300 	mov.w	r3, #0
  if (base < 2) base = 10;
   d8a64:	bf98      	it	ls
   d8a66:	250a      	movls	r5, #10
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d8a68:	4682      	mov	sl, r0
  *str = '\0';
   d8a6a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d8a6e:	4610      	mov	r0, r2
  if (base < 2) base = 10;
   d8a70:	f10d 0b44 	add.w	fp, sp, #68	; 0x44

  do {
    decltype(n) m = n;
    n /= base;
   d8a74:	fa5f f885 	uxtb.w	r8, r5
   d8a78:	f04f 0900 	mov.w	r9, #0
   d8a7c:	4642      	mov	r2, r8
   d8a7e:	464b      	mov	r3, r9
   d8a80:	4606      	mov	r6, r0
   d8a82:	460f      	mov	r7, r1
   d8a84:	f004 fbc4 	bl	dd210 <__aeabi_uldivmod>
    char c = m - base * n;
   d8a88:	fb05 6410 	mls	r4, r5, r0, r6
   d8a8c:	f004 04ff 	and.w	r4, r4, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8a90:	2c09      	cmp	r4, #9
   d8a92:	bf94      	ite	ls
   d8a94:	3430      	addls	r4, #48	; 0x30
   d8a96:	3437      	addhi	r4, #55	; 0x37
  } while(n);
   d8a98:	454f      	cmp	r7, r9
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8a9a:	b2e4      	uxtb	r4, r4
  } while(n);
   d8a9c:	bf08      	it	eq
   d8a9e:	4546      	cmpeq	r6, r8
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8aa0:	f80b 4d01 	strb.w	r4, [fp, #-1]!
  } while(n);
   d8aa4:	d2ea      	bcs.n	d8a7c <_ZN5Print11printNumberEyh+0x2a>

  return write(str);
   d8aa6:	4659      	mov	r1, fp
   d8aa8:	4650      	mov	r0, sl
   d8aaa:	f7ff ff83 	bl	d89b4 <_ZN5Print5writeEPKc>
}
   d8aae:	b013      	add	sp, #76	; 0x4c
   d8ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8ab4 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
   d8ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8ab8:	ec55 4b10 	vmov	r4, r5, d0
   d8abc:	4606      	mov	r6, r0
   d8abe:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d8ac0:	ee10 2a10 	vmov	r2, s0
   d8ac4:	ee10 0a10 	vmov	r0, s0
   d8ac8:	462b      	mov	r3, r5
   d8aca:	4629      	mov	r1, r5
   d8acc:	f004 f994 	bl	dcdf8 <__aeabi_dcmpun>
   d8ad0:	b140      	cbz	r0, d8ae4 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d8ad2:	4953      	ldr	r1, [pc, #332]	; (d8c20 <_ZN5Print10printFloatEdh+0x16c>)
   d8ad4:	4630      	mov	r0, r6
   d8ad6:	f7ff ff6d 	bl	d89b4 <_ZN5Print5writeEPKc>
   d8ada:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d8adc:	4650      	mov	r0, sl
   d8ade:	b003      	add	sp, #12
   d8ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d8ae4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d8ae8:	4b4e      	ldr	r3, [pc, #312]	; (d8c24 <_ZN5Print10printFloatEdh+0x170>)
   d8aea:	f04f 32ff 	mov.w	r2, #4294967295
   d8aee:	4620      	mov	r0, r4
   d8af0:	4649      	mov	r1, r9
   d8af2:	f004 f981 	bl	dcdf8 <__aeabi_dcmpun>
   d8af6:	b948      	cbnz	r0, d8b0c <_ZN5Print10printFloatEdh+0x58>
   d8af8:	4b4a      	ldr	r3, [pc, #296]	; (d8c24 <_ZN5Print10printFloatEdh+0x170>)
   d8afa:	f04f 32ff 	mov.w	r2, #4294967295
   d8afe:	4620      	mov	r0, r4
   d8b00:	4649      	mov	r1, r9
   d8b02:	f004 f95b 	bl	dcdbc <__aeabi_dcmple>
   d8b06:	b908      	cbnz	r0, d8b0c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d8b08:	4947      	ldr	r1, [pc, #284]	; (d8c28 <_ZN5Print10printFloatEdh+0x174>)
   d8b0a:	e7e3      	b.n	d8ad4 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d8b0c:	4b47      	ldr	r3, [pc, #284]	; (d8c2c <_ZN5Print10printFloatEdh+0x178>)
   d8b0e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8b12:	4620      	mov	r0, r4
   d8b14:	4629      	mov	r1, r5
   d8b16:	f004 f965 	bl	dcde4 <__aeabi_dcmpgt>
   d8b1a:	b108      	cbz	r0, d8b20 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d8b1c:	4944      	ldr	r1, [pc, #272]	; (d8c30 <_ZN5Print10printFloatEdh+0x17c>)
   d8b1e:	e7d9      	b.n	d8ad4 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d8b20:	4b44      	ldr	r3, [pc, #272]	; (d8c34 <_ZN5Print10printFloatEdh+0x180>)
   d8b22:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8b26:	4620      	mov	r0, r4
   d8b28:	4629      	mov	r1, r5
   d8b2a:	f004 f93d 	bl	dcda8 <__aeabi_dcmplt>
   d8b2e:	2800      	cmp	r0, #0
   d8b30:	d1f4      	bne.n	d8b1c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d8b32:	2200      	movs	r2, #0
   d8b34:	2300      	movs	r3, #0
   d8b36:	4620      	mov	r0, r4
   d8b38:	4629      	mov	r1, r5
   d8b3a:	f004 f935 	bl	dcda8 <__aeabi_dcmplt>
   d8b3e:	b1d0      	cbz	r0, d8b76 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d8b40:	212d      	movs	r1, #45	; 0x2d
   d8b42:	4630      	mov	r0, r6
   d8b44:	f7ff ff4c 	bl	d89e0 <_ZN5Print5printEc>
     number = -number;
   d8b48:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d8b4c:	4682      	mov	sl, r0
     number = -number;
   d8b4e:	461d      	mov	r5, r3
  double rounding = 0.5;
   d8b50:	4939      	ldr	r1, [pc, #228]	; (d8c38 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d8b52:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d8c40 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d8b56:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d8b5a:	2000      	movs	r0, #0
    rounding /= 10.0;
   d8b5c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d8b60:	fa5f f38b 	uxtb.w	r3, fp
   d8b64:	429f      	cmp	r7, r3
   d8b66:	d908      	bls.n	d8b7a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d8b68:	4642      	mov	r2, r8
   d8b6a:	464b      	mov	r3, r9
   d8b6c:	f003 ffd4 	bl	dcb18 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d8b70:	f10b 0b01 	add.w	fp, fp, #1
   d8b74:	e7f4      	b.n	d8b60 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d8b76:	4682      	mov	sl, r0
   d8b78:	e7ea      	b.n	d8b50 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d8b7a:	4622      	mov	r2, r4
   d8b7c:	462b      	mov	r3, r5
   d8b7e:	f003 fceb 	bl	dc558 <__adddf3>
   d8b82:	460d      	mov	r5, r1
   d8b84:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d8b86:	f004 f975 	bl	dce74 <__aeabi_d2uiz>
   d8b8a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d8b8c:	f003 fe20 	bl	dc7d0 <__aeabi_ui2d>
   d8b90:	4602      	mov	r2, r0
   d8b92:	460b      	mov	r3, r1
   d8b94:	4620      	mov	r0, r4
   d8b96:	4629      	mov	r1, r5
   d8b98:	f003 fcdc 	bl	dc554 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8b9c:	220a      	movs	r2, #10
   d8b9e:	4604      	mov	r4, r0
   d8ba0:	460d      	mov	r5, r1
   d8ba2:	4630      	mov	r0, r6
   d8ba4:	4641      	mov	r1, r8
   d8ba6:	f7ff ff36 	bl	d8a16 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d8baa:	4482      	add	sl, r0
  if (digits > 0) {
   d8bac:	b127      	cbz	r7, d8bb8 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d8bae:	4923      	ldr	r1, [pc, #140]	; (d8c3c <_ZN5Print10printFloatEdh+0x188>)
   d8bb0:	4630      	mov	r0, r6
   d8bb2:	f7ff feff 	bl	d89b4 <_ZN5Print5writeEPKc>
    n += print(".");
   d8bb6:	4482      	add	sl, r0
    remainder *= 10.0;
   d8bb8:	f8df 9084 	ldr.w	r9, [pc, #132]	; d8c40 <_ZN5Print10printFloatEdh+0x18c>
   d8bbc:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d8bc0:	3f01      	subs	r7, #1
   d8bc2:	b2ff      	uxtb	r7, r7
   d8bc4:	2fff      	cmp	r7, #255	; 0xff
   d8bc6:	d089      	beq.n	d8adc <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d8bc8:	4642      	mov	r2, r8
   d8bca:	464b      	mov	r3, r9
   d8bcc:	4620      	mov	r0, r4
   d8bce:	4629      	mov	r1, r5
   d8bd0:	f003 fe78 	bl	dc8c4 <__aeabi_dmul>
   d8bd4:	4604      	mov	r4, r0
   d8bd6:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d8bd8:	f004 f924 	bl	dce24 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d8bdc:	f1b0 0b00 	subs.w	fp, r0, #0
   d8be0:	da1a      	bge.n	d8c18 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d8be2:	212d      	movs	r1, #45	; 0x2d
   d8be4:	4630      	mov	r0, r6
   d8be6:	f7ff fefb 	bl	d89e0 <_ZN5Print5printEc>
            val = -n;
   d8bea:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d8bee:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d8bf0:	220a      	movs	r2, #10
   d8bf2:	4630      	mov	r0, r6
   d8bf4:	9301      	str	r3, [sp, #4]
   d8bf6:	f7ff ff0e 	bl	d8a16 <_ZN5Print11printNumberEmh>
   d8bfa:	9b01      	ldr	r3, [sp, #4]
   d8bfc:	4418      	add	r0, r3
    n += print(toPrint);
   d8bfe:	4482      	add	sl, r0
    remainder -= toPrint;
   d8c00:	4658      	mov	r0, fp
   d8c02:	f003 fdf5 	bl	dc7f0 <__aeabi_i2d>
   d8c06:	4602      	mov	r2, r0
   d8c08:	460b      	mov	r3, r1
   d8c0a:	4620      	mov	r0, r4
   d8c0c:	4629      	mov	r1, r5
   d8c0e:	f003 fca1 	bl	dc554 <__aeabi_dsub>
   d8c12:	4604      	mov	r4, r0
   d8c14:	460d      	mov	r5, r1
  while (digits-- > 0)
   d8c16:	e7d3      	b.n	d8bc0 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d8c18:	4659      	mov	r1, fp
        size_t t = 0;
   d8c1a:	2300      	movs	r3, #0
   d8c1c:	e7e8      	b.n	d8bf0 <_ZN5Print10printFloatEdh+0x13c>
   d8c1e:	bf00      	nop
   d8c20:	000de780 	.word	0x000de780
   d8c24:	7fefffff 	.word	0x7fefffff
   d8c28:	000de784 	.word	0x000de784
   d8c2c:	41efffff 	.word	0x41efffff
   d8c30:	000de788 	.word	0x000de788
   d8c34:	c1efffff 	.word	0xc1efffff
   d8c38:	3fe00000 	.word	0x3fe00000
   d8c3c:	000ddd60 	.word	0x000ddd60
   d8c40:	40240000 	.word	0x40240000

000d8c44 <_ZN5Print5printEfi>:
{
   d8c44:	b538      	push	{r3, r4, r5, lr}
   d8c46:	4604      	mov	r4, r0
   d8c48:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d8c4c:	b2cd      	uxtb	r5, r1
   d8c4e:	f003 fde1 	bl	dc814 <__aeabi_f2d>
   d8c52:	ec41 0b10 	vmov	d0, r0, r1
   d8c56:	4629      	mov	r1, r5
   d8c58:	4620      	mov	r0, r4
}
   d8c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d8c5e:	f7ff bf29 	b.w	d8ab4 <_ZN5Print10printFloatEdh>

000d8c62 <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   d8c62:	b2c9      	uxtb	r1, r1
   d8c64:	f7ff bf26 	b.w	d8ab4 <_ZN5Print10printFloatEdh>

000d8c68 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d8c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c6c:	b086      	sub	sp, #24
   d8c6e:	af00      	add	r7, sp, #0
   d8c70:	4605      	mov	r5, r0
   d8c72:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d8c74:	1d38      	adds	r0, r7, #4
   d8c76:	2114      	movs	r1, #20
{
   d8c78:	4614      	mov	r4, r2
    va_copy(args2, args);
   d8c7a:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d8c7c:	f7ff fc14 	bl	d84a8 <vsnprintf>

    if (n<bufsize)
   d8c80:	2813      	cmp	r0, #19
   d8c82:	d80e      	bhi.n	d8ca2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d8c84:	1d39      	adds	r1, r7, #4
   d8c86:	4628      	mov	r0, r5
   d8c88:	f7ff fe94 	bl	d89b4 <_ZN5Print5writeEPKc>
   d8c8c:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d8c8e:	b11e      	cbz	r6, d8c98 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d8c90:	4628      	mov	r0, r5
   d8c92:	f7ff fea8 	bl	d89e6 <_ZN5Print7printlnEv>
   d8c96:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d8c98:	4620      	mov	r0, r4
   d8c9a:	3718      	adds	r7, #24
   d8c9c:	46bd      	mov	sp, r7
   d8c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d8ca2:	f100 0308 	add.w	r3, r0, #8
   d8ca6:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d8caa:	46e8      	mov	r8, sp
        char bigger[n+1];
   d8cac:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d8cb0:	4622      	mov	r2, r4
   d8cb2:	1c41      	adds	r1, r0, #1
   d8cb4:	683b      	ldr	r3, [r7, #0]
   d8cb6:	4668      	mov	r0, sp
   d8cb8:	f7ff fbf6 	bl	d84a8 <vsnprintf>
  return write(str);
   d8cbc:	4669      	mov	r1, sp
   d8cbe:	4628      	mov	r0, r5
   d8cc0:	f7ff fe78 	bl	d89b4 <_ZN5Print5writeEPKc>
   d8cc4:	4604      	mov	r4, r0
   d8cc6:	46c5      	mov	sp, r8
   d8cc8:	e7e1      	b.n	d8c8e <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000d8ccc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8ccc:	4b01      	ldr	r3, [pc, #4]	; (d8cd4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8cce:	4a02      	ldr	r2, [pc, #8]	; (d8cd8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8cd0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8cd2:	4770      	bx	lr
   d8cd4:	2003e5a0 	.word	0x2003e5a0
   d8cd8:	000de78c 	.word	0x000de78c

000d8cdc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d8cdc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8cde:	2000      	movs	r0, #0
   d8ce0:	f7ff fbba 	bl	d8458 <spark_sync_time_pending>
   d8ce4:	b128      	cbz	r0, d8cf2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8ce6:	f7ff fba7 	bl	d8438 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8cea:	f080 0001 	eor.w	r0, r0, #1
   d8cee:	b2c0      	uxtb	r0, r0
    }
   d8cf0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8cf2:	2001      	movs	r0, #1
   d8cf4:	e7fc      	b.n	d8cf0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d8cf6 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8cf6:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d8cf8:	2000      	movs	r0, #0
   d8cfa:	f7ff f991 	bl	d8020 <hal_rtc_time_is_valid>
    if (rtcstate)
   d8cfe:	4604      	mov	r4, r0
   d8d00:	b9a0      	cbnz	r0, d8d2c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8d02:	f7ff faed 	bl	d82e0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8d06:	2801      	cmp	r0, #1
   d8d08:	d110      	bne.n	d8d2c <_ZN9TimeClass7isValidEv+0x36>
   d8d0a:	4620      	mov	r0, r4
   d8d0c:	f7ff fb10 	bl	d8330 <system_thread_get_state>
   d8d10:	b960      	cbnz	r0, d8d2c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8d12:	f7ff ffe3 	bl	d8cdc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8d16:	b910      	cbnz	r0, d8d1e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d8d18:	f7ff fb86 	bl	d8428 <spark_process>
        while (_while() && !_condition()) {
   d8d1c:	e7f9      	b.n	d8d12 <_ZN9TimeClass7isValidEv+0x1c>
   d8d1e:	f7ff ffdd 	bl	d8cdc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d8d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d8d26:	2000      	movs	r0, #0
   d8d28:	f7ff b97a 	b.w	d8020 <hal_rtc_time_is_valid>
}
   d8d2c:	4620      	mov	r0, r4
   d8d2e:	bd10      	pop	{r4, pc}

000d8d30 <_ZN9TimeClass3nowEv>:
{
   d8d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d8d32:	f7ff ffe0 	bl	d8cf6 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d8d36:	2210      	movs	r2, #16
   d8d38:	2100      	movs	r1, #0
   d8d3a:	4668      	mov	r0, sp
   d8d3c:	f004 fc16 	bl	dd56c <memset>
    hal_rtc_get_time(&tv, nullptr);
   d8d40:	2100      	movs	r1, #0
   d8d42:	4668      	mov	r0, sp
   d8d44:	f7ff f974 	bl	d8030 <hal_rtc_get_time>
}
   d8d48:	9800      	ldr	r0, [sp, #0]
   d8d4a:	b005      	add	sp, #20
   d8d4c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8d50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8d50:	4b02      	ldr	r3, [pc, #8]	; (d8d5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8d52:	681a      	ldr	r2, [r3, #0]
   d8d54:	4b02      	ldr	r3, [pc, #8]	; (d8d60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8d56:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d8d58:	4770      	bx	lr
   d8d5a:	bf00      	nop
   d8d5c:	2003e3d0 	.word	0x2003e3d0
   d8d60:	2003e5a4 	.word	0x2003e5a4

000d8d64 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d8d64:	428a      	cmp	r2, r1
{
   d8d66:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d8d68:	d007      	beq.n	d8d7a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d8d6a:	9c02      	ldr	r4, [sp, #8]
   d8d6c:	1a40      	subs	r0, r0, r1
   d8d6e:	1ae4      	subs	r4, r4, r3
   d8d70:	4360      	muls	r0, r4
   d8d72:	1a52      	subs	r2, r2, r1
   d8d74:	fb90 f0f2 	sdiv	r0, r0, r2
   d8d78:	4418      	add	r0, r3
}
   d8d7a:	bd10      	pop	{r4, pc}

000d8d7c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8d7c:	2100      	movs	r1, #0
   d8d7e:	f7ff babf 	b.w	d8300 <system_delay_ms>

000d8d82 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d8d82:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d8d84:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d8d86:	4604      	mov	r4, r0
      if (_M_manager)
   d8d88:	b113      	cbz	r3, d8d90 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8d8a:	2203      	movs	r2, #3
   d8d8c:	4601      	mov	r1, r0
   d8d8e:	4798      	blx	r3
    }
   d8d90:	4620      	mov	r0, r4
   d8d92:	bd10      	pop	{r4, pc}

000d8d94 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d8d94:	b513      	push	{r0, r1, r4, lr}
   d8d96:	460b      	mov	r3, r1
   d8d98:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8d9a:	e9d0 0100 	ldrd	r0, r1, [r0]
   d8d9e:	466c      	mov	r4, sp
   d8da0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8da4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d8da8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8dac:	e894 0003 	ldmia.w	r4, {r0, r1}
   d8db0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d8db4:	b002      	add	sp, #8
   d8db6:	bd10      	pop	{r4, pc}

000d8db8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d8db8:	4b01      	ldr	r3, [pc, #4]	; (d8dc0 <_GLOBAL__sub_I_RGB+0x8>)
   d8dba:	2200      	movs	r2, #0
   d8dbc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d8dbe:	4770      	bx	lr
   d8dc0:	2003e5a8 	.word	0x2003e5a8

000d8dc4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8dc4:	4b01      	ldr	r3, [pc, #4]	; (d8dcc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d8dc6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8dc8:	4770      	bx	lr
   d8dca:	bf00      	nop
   d8dcc:	2003e3d8 	.word	0x2003e3d8

000d8dd0 <serialEventRun>:
{
   d8dd0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8dd2:	4b0b      	ldr	r3, [pc, #44]	; (d8e00 <serialEventRun+0x30>)
   d8dd4:	b143      	cbz	r3, d8de8 <serialEventRun+0x18>
   d8dd6:	f000 fc03 	bl	d95e0 <_Z16_fetch_usbserialv>
   d8dda:	6803      	ldr	r3, [r0, #0]
   d8ddc:	691b      	ldr	r3, [r3, #16]
   d8dde:	4798      	blx	r3
   d8de0:	2800      	cmp	r0, #0
   d8de2:	dd01      	ble.n	d8de8 <serialEventRun+0x18>
        serialEvent();
   d8de4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8de8:	4b06      	ldr	r3, [pc, #24]	; (d8e04 <serialEventRun+0x34>)
   d8dea:	b143      	cbz	r3, d8dfe <serialEventRun+0x2e>
   d8dec:	f000 fcea 	bl	d97c4 <_Z22__fetch_global_Serial1v>
   d8df0:	6803      	ldr	r3, [r0, #0]
   d8df2:	691b      	ldr	r3, [r3, #16]
   d8df4:	4798      	blx	r3
   d8df6:	2800      	cmp	r0, #0
   d8df8:	dd01      	ble.n	d8dfe <serialEventRun+0x2e>
        serialEvent1();
   d8dfa:	f3af 8000 	nop.w
}
   d8dfe:	bd08      	pop	{r3, pc}
	...

000d8e08 <_post_loop>:
{
   d8e08:	b508      	push	{r3, lr}
	serialEventRun();
   d8e0a:	f7ff ffe1 	bl	d8dd0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8e0e:	f7ff f8e7 	bl	d7fe0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8e12:	4b01      	ldr	r3, [pc, #4]	; (d8e18 <_post_loop+0x10>)
   d8e14:	6018      	str	r0, [r3, #0]
}
   d8e16:	bd08      	pop	{r3, pc}
   d8e18:	2003e730 	.word	0x2003e730

000d8e1c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8e1c:	4805      	ldr	r0, [pc, #20]	; (d8e34 <_Z33system_initialize_user_backup_ramv+0x18>)
   d8e1e:	4a06      	ldr	r2, [pc, #24]	; (d8e38 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d8e20:	4906      	ldr	r1, [pc, #24]	; (d8e3c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d8e22:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8e24:	1a12      	subs	r2, r2, r0
   d8e26:	f004 fb93 	bl	dd550 <memcpy>
    __backup_sram_signature = signature;
   d8e2a:	4b05      	ldr	r3, [pc, #20]	; (d8e40 <_Z33system_initialize_user_backup_ramv+0x24>)
   d8e2c:	4a05      	ldr	r2, [pc, #20]	; (d8e44 <_Z33system_initialize_user_backup_ramv+0x28>)
   d8e2e:	601a      	str	r2, [r3, #0]
}
   d8e30:	bd08      	pop	{r3, pc}
   d8e32:	bf00      	nop
   d8e34:	2003f400 	.word	0x2003f400
   d8e38:	2003f404 	.word	0x2003f404
   d8e3c:	000deda8 	.word	0x000deda8
   d8e40:	2003f400 	.word	0x2003f400
   d8e44:	9a271c1e 	.word	0x9a271c1e

000d8e48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8e48:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8e4a:	2300      	movs	r3, #0
   d8e4c:	9300      	str	r3, [sp, #0]
   d8e4e:	461a      	mov	r2, r3
   d8e50:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8e54:	f7ff fa7e 	bl	d8354 <system_ctrl_set_result>
}
   d8e58:	b003      	add	sp, #12
   d8e5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8e60 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8e60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8e62:	8843      	ldrh	r3, [r0, #2]
   d8e64:	2b0a      	cmp	r3, #10
   d8e66:	d008      	beq.n	d8e7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8e68:	2b50      	cmp	r3, #80	; 0x50
   d8e6a:	d10b      	bne.n	d8e84 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8e6c:	4b09      	ldr	r3, [pc, #36]	; (d8e94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8e6e:	681b      	ldr	r3, [r3, #0]
   d8e70:	b14b      	cbz	r3, d8e86 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d8e72:	b003      	add	sp, #12
   d8e74:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8e78:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d8e7a:	f7ff ffe5 	bl	d8e48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d8e7e:	b003      	add	sp, #12
   d8e80:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8e84:	2300      	movs	r3, #0
   d8e86:	9300      	str	r3, [sp, #0]
   d8e88:	461a      	mov	r2, r3
   d8e8a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8e8e:	f7ff fa61 	bl	d8354 <system_ctrl_set_result>
}
   d8e92:	e7f4      	b.n	d8e7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8e94:	2003e5bc 	.word	0x2003e5bc

000d8e98 <module_user_init_hook>:
{
   d8e98:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8e9a:	4812      	ldr	r0, [pc, #72]	; (d8ee4 <module_user_init_hook+0x4c>)
   d8e9c:	2100      	movs	r1, #0
   d8e9e:	f7ff fb23 	bl	d84e8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d8ea2:	4b11      	ldr	r3, [pc, #68]	; (d8ee8 <module_user_init_hook+0x50>)
   d8ea4:	681a      	ldr	r2, [r3, #0]
   d8ea6:	4b11      	ldr	r3, [pc, #68]	; (d8eec <module_user_init_hook+0x54>)
   d8ea8:	429a      	cmp	r2, r3
   d8eaa:	4b11      	ldr	r3, [pc, #68]	; (d8ef0 <module_user_init_hook+0x58>)
   d8eac:	bf0c      	ite	eq
   d8eae:	2201      	moveq	r2, #1
   d8eb0:	2200      	movne	r2, #0
   d8eb2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8eb4:	d001      	beq.n	d8eba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d8eb6:	f7ff ffb1 	bl	d8e1c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8eba:	f7ff f881 	bl	d7fc0 <HAL_RNG_GetRandomNumber>
   d8ebe:	4604      	mov	r4, r0
    srand(seed);
   d8ec0:	f004 fb5c 	bl	dd57c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8ec4:	4b0b      	ldr	r3, [pc, #44]	; (d8ef4 <module_user_init_hook+0x5c>)
   d8ec6:	b113      	cbz	r3, d8ece <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d8ec8:	4620      	mov	r0, r4
   d8eca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8ece:	2100      	movs	r1, #0
   d8ed0:	4808      	ldr	r0, [pc, #32]	; (d8ef4 <module_user_init_hook+0x5c>)
   d8ed2:	f7ff fac9 	bl	d8468 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8eda:	4807      	ldr	r0, [pc, #28]	; (d8ef8 <module_user_init_hook+0x60>)
   d8edc:	2100      	movs	r1, #0
   d8ede:	f7ff ba2f 	b.w	d8340 <system_ctrl_set_app_request_handler>
   d8ee2:	bf00      	nop
   d8ee4:	000d8dc5 	.word	0x000d8dc5
   d8ee8:	2003f400 	.word	0x2003f400
   d8eec:	9a271c1e 	.word	0x9a271c1e
   d8ef0:	2003e5b8 	.word	0x2003e5b8
   d8ef4:	00000000 	.word	0x00000000
   d8ef8:	000d8e61 	.word	0x000d8e61

000d8efc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8efc:	4770      	bx	lr

000d8efe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8efe:	2000      	movs	r0, #0
   d8f00:	4770      	bx	lr

000d8f02 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8f02:	b510      	push	{r4, lr}
   d8f04:	2110      	movs	r1, #16
   d8f06:	4604      	mov	r4, r0
   d8f08:	f000 feaa 	bl	d9c60 <_ZdlPvj>
   d8f0c:	4620      	mov	r0, r4
   d8f0e:	bd10      	pop	{r4, pc}

000d8f10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8f10:	b508      	push	{r3, lr}
      { delete this; }
   d8f12:	f7ff fff6 	bl	d8f02 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8f16:	bd08      	pop	{r3, pc}

000d8f18 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8f18:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8f1a:	2200      	movs	r2, #0
   d8f1c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8f20:	6002      	str	r2, [r0, #0]
   d8f22:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8f24:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8f26:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8f28:	680c      	ldr	r4, [r1, #0]
   d8f2a:	8085      	strh	r5, [r0, #4]
   d8f2c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8f2e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8f30:	bd30      	pop	{r4, r5, pc}

000d8f32 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8f32:	b510      	push	{r4, lr}
   d8f34:	4604      	mov	r4, r0
    free((void*)msg_);
   d8f36:	6800      	ldr	r0, [r0, #0]
   d8f38:	f7ff faa6 	bl	d8488 <free>
}
   d8f3c:	4620      	mov	r0, r4
   d8f3e:	bd10      	pop	{r4, pc}

000d8f40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8f40:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8f42:	68c4      	ldr	r4, [r0, #12]
   d8f44:	b1f4      	cbz	r4, d8f84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d8f46:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8f48:	2b02      	cmp	r3, #2
   d8f4a:	d103      	bne.n	d8f54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8f4c:	f104 000c 	add.w	r0, r4, #12
   d8f50:	f7ff ffef 	bl	d8f32 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8f54:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8f56:	b135      	cbz	r5, d8f66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8f58:	4628      	mov	r0, r5
   d8f5a:	f7ff ff12 	bl	d8d82 <_ZNSt14_Function_baseD1Ev>
   d8f5e:	2110      	movs	r1, #16
   d8f60:	4628      	mov	r0, r5
   d8f62:	f000 fe7d 	bl	d9c60 <_ZdlPvj>
   d8f66:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8f68:	b135      	cbz	r5, d8f78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8f6a:	4628      	mov	r0, r5
   d8f6c:	f7ff ff09 	bl	d8d82 <_ZNSt14_Function_baseD1Ev>
   d8f70:	2110      	movs	r1, #16
   d8f72:	4628      	mov	r0, r5
   d8f74:	f000 fe74 	bl	d9c60 <_ZdlPvj>
   d8f78:	4620      	mov	r0, r4
   d8f7a:	2114      	movs	r1, #20
   d8f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8f80:	f000 be6e 	b.w	d9c60 <_ZdlPvj>
   d8f84:	bd38      	pop	{r3, r4, r5, pc}

000d8f86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8f88:	460e      	mov	r6, r1
   d8f8a:	4604      	mov	r4, r0
   d8f8c:	f856 3b04 	ldr.w	r3, [r6], #4
   d8f90:	9300      	str	r3, [sp, #0]
   d8f92:	460d      	mov	r5, r1
   d8f94:	a801      	add	r0, sp, #4
   d8f96:	4631      	mov	r1, r6
   d8f98:	f7ff fcdb 	bl	d8952 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8f9c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8f9e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8fa0:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8fa2:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8fa4:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8fa6:	2300      	movs	r3, #0
   d8fa8:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8faa:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8fac:	f7ff fcd8 	bl	d8960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8fb0:	4630      	mov	r0, r6
   d8fb2:	f7ff fcd5 	bl	d8960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8fb6:	4628      	mov	r0, r5
   d8fb8:	2108      	movs	r1, #8
   d8fba:	f000 fe51 	bl	d9c60 <_ZdlPvj>
        return p;
    }
   d8fbe:	4620      	mov	r0, r4
   d8fc0:	b002      	add	sp, #8
   d8fc2:	bd70      	pop	{r4, r5, r6, pc}

000d8fc4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8fc4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8fc6:	b510      	push	{r4, lr}
      if (_M_empty())
   d8fc8:	b90a      	cbnz	r2, d8fce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8fca:	f000 fe4d 	bl	d9c68 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d8fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8fd2:	68c3      	ldr	r3, [r0, #12]
   d8fd4:	4718      	bx	r3

000d8fd6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8fd6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8fd8:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8fda:	f100 0110 	add.w	r1, r0, #16
   d8fde:	f7ff fff1 	bl	d8fc4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8fe2:	bd08      	pop	{r3, pc}

000d8fe4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8fe4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8fe6:	b510      	push	{r4, lr}
      if (_M_empty())
   d8fe8:	b90a      	cbnz	r2, d8fee <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8fea:	f000 fe3d 	bl	d9c68 <_ZSt25__throw_bad_function_callv>
    }
   d8fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8ff2:	68c3      	ldr	r3, [r0, #12]
   d8ff4:	4718      	bx	r3

000d8ff6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8ff6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8ff8:	6800      	ldr	r0, [r0, #0]
   d8ffa:	f100 0110 	add.w	r1, r0, #16
   d8ffe:	f7ff fff1 	bl	d8fe4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d9002:	bd08      	pop	{r3, pc}

000d9004 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d9004:	b538      	push	{r3, r4, r5, lr}
   d9006:	2300      	movs	r3, #0
   d9008:	4604      	mov	r4, r0
   d900a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d900c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d900e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9010:	f7fb f841 	bl	d4096 <_Znwj>
   d9014:	b128      	cbz	r0, d9022 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d9016:	2301      	movs	r3, #1
   d9018:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d901c:	4b02      	ldr	r3, [pc, #8]	; (d9028 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d901e:	6003      	str	r3, [r0, #0]
   d9020:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9022:	6020      	str	r0, [r4, #0]
	}
   d9024:	4620      	mov	r0, r4
   d9026:	bd38      	pop	{r3, r4, r5, pc}
   d9028:	000de7b4 	.word	0x000de7b4

000d902c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d902c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d902e:	2300      	movs	r3, #0
   d9030:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d9032:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d9034:	4604      	mov	r4, r0
   d9036:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d9038:	b12b      	cbz	r3, d9046 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d903a:	2202      	movs	r2, #2
   d903c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d903e:	68eb      	ldr	r3, [r5, #12]
   d9040:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d9042:	68ab      	ldr	r3, [r5, #8]
   d9044:	60a3      	str	r3, [r4, #8]
    }
   d9046:	4620      	mov	r0, r4
   d9048:	bd38      	pop	{r3, r4, r5, pc}
	...

000d904c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d904c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d904e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d9050:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d9052:	4668      	mov	r0, sp
   d9054:	f7ff ff60 	bl	d8f18 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d9058:	f04f 0302 	mov.w	r3, #2
   d905c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d9060:	2a00      	cmp	r2, #0
   d9062:	d103      	bne.n	d906c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d9064:	e8c4 3f41 	strexb	r1, r3, [r4]
   d9068:	2900      	cmp	r1, #0
   d906a:	d1f7      	bne.n	d905c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d906c:	d125      	bne.n	d90ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d906e:	f104 050c 	add.w	r5, r4, #12
   d9072:	4669      	mov	r1, sp
   d9074:	4628      	mov	r0, r5
   d9076:	f7ff ff4f 	bl	d8f18 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d907a:	f3bf 8f5b 	dmb	ish
   d907e:	2301      	movs	r3, #1
   d9080:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d9082:	2000      	movs	r0, #0
   d9084:	f104 0308 	add.w	r3, r4, #8
   d9088:	f3bf 8f5b 	dmb	ish
   d908c:	e853 6f00 	ldrex	r6, [r3]
   d9090:	e843 0200 	strex	r2, r0, [r3]
   d9094:	2a00      	cmp	r2, #0
   d9096:	d1f9      	bne.n	d908c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d9098:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d909c:	b16e      	cbz	r6, d90ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d909e:	f7ff f937 	bl	d8310 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d90a2:	b178      	cbz	r0, d90c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d90a4:	4629      	mov	r1, r5
   d90a6:	4630      	mov	r0, r6
   d90a8:	f7ff ff8c 	bl	d8fc4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d90ac:	4630      	mov	r0, r6
   d90ae:	f7ff fe68 	bl	d8d82 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d90b2:	2110      	movs	r1, #16
   d90b4:	4630      	mov	r0, r6
   d90b6:	f000 fdd3 	bl	d9c60 <_ZdlPvj>
        p_->setError(std::move(error));
   d90ba:	4668      	mov	r0, sp
   d90bc:	f7ff ff39 	bl	d8f32 <_ZN8particle5ErrorD1Ev>
    }
   d90c0:	b009      	add	sp, #36	; 0x24
   d90c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d90c4:	4631      	mov	r1, r6
   d90c6:	a802      	add	r0, sp, #8
   d90c8:	f7ff ffb0 	bl	d902c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d90cc:	68e0      	ldr	r0, [r4, #12]
   d90ce:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d90d2:	b108      	cbz	r0, d90d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d90d4:	f004 fa76 	bl	dd5c4 <strdup>
        type_(type) {
   d90d8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d90da:	2010      	movs	r0, #16
   d90dc:	f8ad 501c 	strh.w	r5, [sp, #28]
   d90e0:	f7fa ffd9 	bl	d4096 <_Znwj>
   d90e4:	4605      	mov	r5, r0
   d90e6:	b1e8      	cbz	r0, d9124 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d90e8:	2700      	movs	r7, #0
   d90ea:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d90ec:	2018      	movs	r0, #24
   d90ee:	f7fa ffd2 	bl	d4096 <_Znwj>
   d90f2:	4604      	mov	r4, r0
   d90f4:	b188      	cbz	r0, d911a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d90f6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d90f8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d90fa:	a802      	add	r0, sp, #8
   d90fc:	f7ff fe4a 	bl	d8d94 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9100:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9102:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9104:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9106:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d9108:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d910a:	a906      	add	r1, sp, #24
   d910c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d910e:	60e3      	str	r3, [r4, #12]
   d9110:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d9114:	9205      	str	r2, [sp, #20]
   d9116:	f7ff feff 	bl	d8f18 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d911a:	4b08      	ldr	r3, [pc, #32]	; (d913c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d911c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d911e:	4b08      	ldr	r3, [pc, #32]	; (d9140 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9120:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d9122:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d9124:	a806      	add	r0, sp, #24
   d9126:	f7ff ff04 	bl	d8f32 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d912a:	a802      	add	r0, sp, #8
   d912c:	f7ff fe29 	bl	d8d82 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d9130:	2200      	movs	r2, #0
   d9132:	4629      	mov	r1, r5
   d9134:	4803      	ldr	r0, [pc, #12]	; (d9144 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d9136:	f7ff f8f3 	bl	d8320 <application_thread_invoke>
   d913a:	e7b7      	b.n	d90ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d913c:	000d8fd7 	.word	0x000d8fd7
   d9140:	000d926d 	.word	0x000d926d
   d9144:	000d9811 	.word	0x000d9811

000d9148 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d9148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d914c:	b08a      	sub	sp, #40	; 0x28
   d914e:	4605      	mov	r5, r0
   d9150:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d9154:	460c      	mov	r4, r1
   d9156:	4617      	mov	r7, r2
   d9158:	4698      	mov	r8, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d915a:	f7ff f96d 	bl	d8438 <spark_cloud_flag_connected>
   d915e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d9160:	4682      	mov	sl, r0
   d9162:	bb38      	cbnz	r0, d91b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d9164:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d9168:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d916a:	a905      	add	r1, sp, #20
   d916c:	4630      	mov	r0, r6
   d916e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d9172:	f7ff fed1 	bl	d8f18 <_ZN8particle5ErrorC1EOS0_>
   d9176:	2014      	movs	r0, #20
   d9178:	f7fa ff8d 	bl	d4096 <_Znwj>
   d917c:	4604      	mov	r4, r0
   d917e:	b148      	cbz	r0, d9194 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d9180:	2302      	movs	r3, #2
   d9182:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9184:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d9186:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d918a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d918c:	4631      	mov	r1, r6
   d918e:	300c      	adds	r0, #12
   d9190:	f7ff fec2 	bl	d8f18 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d9194:	4628      	mov	r0, r5
	: __shared_count(__p)
   d9196:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d9198:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d919c:	f7ff ff32 	bl	d9004 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d91a0:	4630      	mov	r0, r6
   d91a2:	f7ff fec6 	bl	d8f32 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d91a6:	a805      	add	r0, sp, #20
   d91a8:	f7ff fec3 	bl	d8f32 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d91ac:	4628      	mov	r0, r5
   d91ae:	b00a      	add	sp, #40	; 0x28
   d91b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d91b4:	230c      	movs	r3, #12
   d91b6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d91ba:	2014      	movs	r0, #20
   d91bc:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d91c0:	9307      	str	r3, [sp, #28]
   d91c2:	f7fa ff68 	bl	d4096 <_Znwj>
   d91c6:	4601      	mov	r1, r0
   d91c8:	b128      	cbz	r0, d91d6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d91ca:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d91ce:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d91d2:	f880 a001 	strb.w	sl, [r0, #1]
   d91d6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d91d8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d91da:	f7ff ff13 	bl	d9004 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d91de:	4b22      	ldr	r3, [pc, #136]	; (d9268 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d91e0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d91e2:	2008      	movs	r0, #8
   d91e4:	f7fa ff57 	bl	d4096 <_Znwj>
   d91e8:	4682      	mov	sl, r0
   d91ea:	b128      	cbz	r0, d91f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d91ec:	9b03      	ldr	r3, [sp, #12]
   d91ee:	f840 3b04 	str.w	r3, [r0], #4
   d91f2:	a904      	add	r1, sp, #16
   d91f4:	f7ff fbad 	bl	d8952 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d91f8:	9600      	str	r6, [sp, #0]
   d91fa:	fa5f f389 	uxtb.w	r3, r9
   d91fe:	4642      	mov	r2, r8
   d9200:	4639      	mov	r1, r7
   d9202:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d9204:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d9208:	f7ff f91e 	bl	d8448 <spark_send_event>
   d920c:	b9b8      	cbnz	r0, d923e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d920e:	9b03      	ldr	r3, [sp, #12]
   d9210:	785b      	ldrb	r3, [r3, #1]
   d9212:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d9216:	b993      	cbnz	r3, d923e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d9218:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d921c:	a905      	add	r1, sp, #20
   d921e:	a803      	add	r0, sp, #12
   d9220:	9205      	str	r2, [sp, #20]
   d9222:	f8ad 3018 	strh.w	r3, [sp, #24]
   d9226:	f7ff ff11 	bl	d904c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d922a:	a805      	add	r0, sp, #20
   d922c:	f7ff fe81 	bl	d8f32 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d9230:	a805      	add	r0, sp, #20
   d9232:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9234:	f7ff fea7 	bl	d8f86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d9238:	a806      	add	r0, sp, #24
   d923a:	f7ff fb91 	bl	d8960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d923e:	9b03      	ldr	r3, [sp, #12]
   d9240:	9305      	str	r3, [sp, #20]
   d9242:	a904      	add	r1, sp, #16
   d9244:	a806      	add	r0, sp, #24
   d9246:	f7ff fb84 	bl	d8952 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d924a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d924c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d924e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d9250:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d9252:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d9254:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d9256:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d9258:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d925a:	f7ff fb81 	bl	d8960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d925e:	a804      	add	r0, sp, #16
   d9260:	f7ff fb7e 	bl	d8960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d9264:	e7a2      	b.n	d91ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d9266:	bf00      	nop
   d9268:	000d9331 	.word	0x000d9331

000d926c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d926c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d926e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9270:	4605      	mov	r5, r0
	  switch (__op)
   d9272:	d007      	beq.n	d9284 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d9274:	2a03      	cmp	r2, #3
   d9276:	d018      	beq.n	d92aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d9278:	2a01      	cmp	r2, #1
   d927a:	d101      	bne.n	d9280 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d927c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d927e:	6003      	str	r3, [r0, #0]
	}
   d9280:	2000      	movs	r0, #0
   d9282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d9284:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d9286:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d9288:	f7fa ff05 	bl	d4096 <_Znwj>
   d928c:	4604      	mov	r4, r0
   d928e:	b150      	cbz	r0, d92a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9290:	4631      	mov	r1, r6
   d9292:	f7ff fecb 	bl	d902c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d9296:	6930      	ldr	r0, [r6, #16]
   d9298:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d929c:	b108      	cbz	r0, d92a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d929e:	f004 f991 	bl	dd5c4 <strdup>
        type_(type) {
   d92a2:	6120      	str	r0, [r4, #16]
   d92a4:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d92a6:	602c      	str	r4, [r5, #0]
	}
   d92a8:	e7ea      	b.n	d9280 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d92aa:	6804      	ldr	r4, [r0, #0]
   d92ac:	2c00      	cmp	r4, #0
   d92ae:	d0e7      	beq.n	d9280 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d92b0:	f104 0010 	add.w	r0, r4, #16
   d92b4:	f7ff fe3d 	bl	d8f32 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d92b8:	4620      	mov	r0, r4
   d92ba:	f7ff fd62 	bl	d8d82 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d92be:	2118      	movs	r1, #24
   d92c0:	4620      	mov	r0, r4
   d92c2:	f000 fccd 	bl	d9c60 <_ZdlPvj>
   d92c6:	e7db      	b.n	d9280 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d92c8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d92c8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d92ca:	2300      	movs	r3, #0
   d92cc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d92ce:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d92d0:	4604      	mov	r4, r0
   d92d2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d92d4:	b12b      	cbz	r3, d92e2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d92d6:	2202      	movs	r2, #2
   d92d8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d92da:	68eb      	ldr	r3, [r5, #12]
   d92dc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d92de:	68ab      	ldr	r3, [r5, #8]
   d92e0:	60a3      	str	r3, [r4, #8]
    }
   d92e2:	4620      	mov	r0, r4
   d92e4:	bd38      	pop	{r3, r4, r5, pc}

000d92e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d92e6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d92e8:	b570      	push	{r4, r5, r6, lr}
   d92ea:	4604      	mov	r4, r0
	  switch (__op)
   d92ec:	d007      	beq.n	d92fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d92ee:	2a03      	cmp	r2, #3
   d92f0:	d012      	beq.n	d9318 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d92f2:	2a01      	cmp	r2, #1
   d92f4:	d101      	bne.n	d92fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d92f6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d92f8:	6003      	str	r3, [r0, #0]
	}
   d92fa:	2000      	movs	r0, #0
   d92fc:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d92fe:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d9300:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d9302:	f7fa fec8 	bl	d4096 <_Znwj>
   d9306:	4605      	mov	r5, r0
   d9308:	b120      	cbz	r0, d9314 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d930a:	4631      	mov	r1, r6
   d930c:	f7ff ffdc 	bl	d92c8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d9310:	7c33      	ldrb	r3, [r6, #16]
   d9312:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d9314:	6025      	str	r5, [r4, #0]
	}
   d9316:	e7f0      	b.n	d92fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d9318:	6804      	ldr	r4, [r0, #0]
   d931a:	2c00      	cmp	r4, #0
   d931c:	d0ed      	beq.n	d92fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d931e:	4620      	mov	r0, r4
   d9320:	f7ff fd2f 	bl	d8d82 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d9324:	2114      	movs	r1, #20
   d9326:	4620      	mov	r0, r4
   d9328:	f000 fc9a 	bl	d9c60 <_ZdlPvj>
   d932c:	e7e5      	b.n	d92fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d9330 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d9330:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9332:	b089      	sub	sp, #36	; 0x24
   d9334:	4604      	mov	r4, r0
   d9336:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d9338:	a801      	add	r0, sp, #4
   d933a:	4611      	mov	r1, r2
   d933c:	f7ff fe23 	bl	d8f86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d9340:	b1a4      	cbz	r4, d936c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d9342:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d9344:	b11d      	cbz	r5, d934e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d9346:	4628      	mov	r0, r5
   d9348:	f004 f93c 	bl	dd5c4 <strdup>
   d934c:	4605      	mov	r5, r0
   d934e:	a801      	add	r0, sp, #4
   d9350:	a903      	add	r1, sp, #12
        type_(type) {
   d9352:	9503      	str	r5, [sp, #12]
   d9354:	f8ad 4010 	strh.w	r4, [sp, #16]
   d9358:	f7ff fe78 	bl	d904c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d935c:	a803      	add	r0, sp, #12
   d935e:	f7ff fde8 	bl	d8f32 <_ZN8particle5ErrorD1Ev>
   d9362:	a802      	add	r0, sp, #8
   d9364:	f7ff fafc 	bl	d8960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9368:	b009      	add	sp, #36	; 0x24
   d936a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d936c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d936e:	2301      	movs	r3, #1
   d9370:	e8d5 2f4f 	ldrexb	r2, [r5]
   d9374:	2a00      	cmp	r2, #0
   d9376:	d103      	bne.n	d9380 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d9378:	e8c5 3f41 	strexb	r1, r3, [r5]
   d937c:	2900      	cmp	r1, #0
   d937e:	d1f7      	bne.n	d9370 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d9380:	d1ef      	bne.n	d9362 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d9382:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d9384:	f3bf 8f5b 	dmb	ish
   d9388:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d938a:	1d2b      	adds	r3, r5, #4
   d938c:	f3bf 8f5b 	dmb	ish
   d9390:	e853 6f00 	ldrex	r6, [r3]
   d9394:	e843 4200 	strex	r2, r4, [r3]
   d9398:	2a00      	cmp	r2, #0
   d939a:	d1f9      	bne.n	d9390 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d939c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d93a0:	2e00      	cmp	r6, #0
   d93a2:	d0de      	beq.n	d9362 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d93a4:	4620      	mov	r0, r4
   d93a6:	f7fe ffb3 	bl	d8310 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d93aa:	4607      	mov	r7, r0
   d93ac:	b160      	cbz	r0, d93c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d93ae:	f105 010c 	add.w	r1, r5, #12
   d93b2:	4630      	mov	r0, r6
   d93b4:	f7ff fe16 	bl	d8fe4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d93b8:	4630      	mov	r0, r6
   d93ba:	f7ff fce2 	bl	d8d82 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d93be:	2110      	movs	r1, #16
   d93c0:	4630      	mov	r0, r6
   d93c2:	f000 fc4d 	bl	d9c60 <_ZdlPvj>
   d93c6:	e7cc      	b.n	d9362 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d93c8:	4631      	mov	r1, r6
   d93ca:	a803      	add	r0, sp, #12
   d93cc:	f7ff ff7c 	bl	d92c8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d93d0:	7b2b      	ldrb	r3, [r5, #12]
   d93d2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d93d6:	2010      	movs	r0, #16
   d93d8:	f7fa fe5d 	bl	d4096 <_Znwj>
   d93dc:	4605      	mov	r5, r0
   d93de:	b1d0      	cbz	r0, d9416 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d93e0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d93e2:	2014      	movs	r0, #20
   d93e4:	f7fa fe57 	bl	d4096 <_Znwj>
   d93e8:	4604      	mov	r4, r0
   d93ea:	b178      	cbz	r0, d940c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d93ec:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d93ee:	4601      	mov	r1, r0
   d93f0:	a803      	add	r0, sp, #12
   d93f2:	f7ff fccf 	bl	d8d94 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d93f6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d93f8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d93fa:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d93fc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d93fe:	9205      	str	r2, [sp, #20]
   d9400:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9402:	60e3      	str	r3, [r4, #12]
   d9404:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d9408:	9206      	str	r2, [sp, #24]
   d940a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d940c:	4b06      	ldr	r3, [pc, #24]	; (d9428 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d940e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9410:	4b06      	ldr	r3, [pc, #24]	; (d942c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9412:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d9414:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d9416:	a803      	add	r0, sp, #12
   d9418:	f7ff fcb3 	bl	d8d82 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d941c:	2200      	movs	r2, #0
   d941e:	4629      	mov	r1, r5
   d9420:	4803      	ldr	r0, [pc, #12]	; (d9430 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d9422:	f7fe ff7d 	bl	d8320 <application_thread_invoke>
   d9426:	e7c7      	b.n	d93b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d9428:	000d8ff7 	.word	0x000d8ff7
   d942c:	000d92e7 	.word	0x000d92e7
   d9430:	000d9811 	.word	0x000d9811

000d9434 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9434:	4770      	bx	lr

000d9436 <_ZN9IPAddressD0Ev>:
   d9436:	b510      	push	{r4, lr}
   d9438:	2118      	movs	r1, #24
   d943a:	4604      	mov	r4, r0
   d943c:	f000 fc10 	bl	d9c60 <_ZdlPvj>
   d9440:	4620      	mov	r0, r4
   d9442:	bd10      	pop	{r4, pc}

000d9444 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9444:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9446:	7d03      	ldrb	r3, [r0, #20]
   d9448:	2b06      	cmp	r3, #6
{
   d944a:	b08d      	sub	sp, #52	; 0x34
   d944c:	460e      	mov	r6, r1
   d944e:	f100 0704 	add.w	r7, r0, #4
   d9452:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d9456:	d012      	beq.n	d947e <_ZNK9IPAddress7printToER5Print+0x3a>
   d9458:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d945c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9460:	220a      	movs	r2, #10
   d9462:	4630      	mov	r0, r6
   d9464:	f7ff fad7 	bl	d8a16 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9468:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d946a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d946c:	d019      	beq.n	d94a2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d946e:	2c00      	cmp	r4, #0
   d9470:	d0f4      	beq.n	d945c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d9472:	212e      	movs	r1, #46	; 0x2e
   d9474:	4630      	mov	r0, r6
   d9476:	f7ff fab3 	bl	d89e0 <_ZN5Print5printEc>
   d947a:	4404      	add	r4, r0
   d947c:	e7ee      	b.n	d945c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d947e:	232f      	movs	r3, #47	; 0x2f
   d9480:	466a      	mov	r2, sp
   d9482:	4639      	mov	r1, r7
   d9484:	200a      	movs	r0, #10
		buf[0] = 0;
   d9486:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d948a:	f7fe fde9 	bl	d8060 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d948e:	4668      	mov	r0, sp
   d9490:	f004 f8b5 	bl	dd5fe <strlen>
   d9494:	6833      	ldr	r3, [r6, #0]
   d9496:	4602      	mov	r2, r0
   d9498:	68db      	ldr	r3, [r3, #12]
   d949a:	4669      	mov	r1, sp
   d949c:	4630      	mov	r0, r6
   d949e:	4798      	blx	r3
   d94a0:	4604      	mov	r4, r0
    }
    return n;
}
   d94a2:	4620      	mov	r0, r4
   d94a4:	b00d      	add	sp, #52	; 0x34
   d94a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d94a8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d94a8:	b510      	push	{r4, lr}
   d94aa:	4b05      	ldr	r3, [pc, #20]	; (d94c0 <_ZN9IPAddressC1Ev+0x18>)
   d94ac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d94ae:	2211      	movs	r2, #17
   d94b0:	f840 3b04 	str.w	r3, [r0], #4
   d94b4:	2100      	movs	r1, #0
   d94b6:	f004 f859 	bl	dd56c <memset>
}
   d94ba:	4620      	mov	r0, r4
   d94bc:	bd10      	pop	{r4, pc}
   d94be:	bf00      	nop
   d94c0:	000de7d0 	.word	0x000de7d0

000d94c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d94c4:	4603      	mov	r3, r0
   d94c6:	4a07      	ldr	r2, [pc, #28]	; (d94e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d94c8:	b510      	push	{r4, lr}
   d94ca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d94ce:	f101 0210 	add.w	r2, r1, #16
   d94d2:	f851 4b04 	ldr.w	r4, [r1], #4
   d94d6:	f843 4b04 	str.w	r4, [r3], #4
   d94da:	4291      	cmp	r1, r2
   d94dc:	d1f9      	bne.n	d94d2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d94de:	780a      	ldrb	r2, [r1, #0]
   d94e0:	701a      	strb	r2, [r3, #0]
}
   d94e2:	bd10      	pop	{r4, pc}
   d94e4:	000de7d0 	.word	0x000de7d0

000d94e8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d94e8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d94ea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d94ee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d94f2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d94f6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d94fa:	2304      	movs	r3, #4
   d94fc:	6041      	str	r1, [r0, #4]
   d94fe:	7503      	strb	r3, [r0, #20]
}
   d9500:	bd10      	pop	{r4, pc}

000d9502 <_ZN9IPAddressaSEPKh>:
{
   d9502:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9504:	78cb      	ldrb	r3, [r1, #3]
   d9506:	9300      	str	r3, [sp, #0]
   d9508:	788b      	ldrb	r3, [r1, #2]
   d950a:	784a      	ldrb	r2, [r1, #1]
   d950c:	7809      	ldrb	r1, [r1, #0]
   d950e:	f7ff ffeb 	bl	d94e8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d9512:	b002      	add	sp, #8
   d9514:	bd10      	pop	{r4, pc}

000d9516 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9516:	7441      	strb	r1, [r0, #17]
}
   d9518:	4770      	bx	lr

000d951a <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d951a:	4770      	bx	lr

000d951c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d951c:	4770      	bx	lr

000d951e <_ZN9USBSerial4readEv>:
{
   d951e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9520:	2100      	movs	r1, #0
   d9522:	7c00      	ldrb	r0, [r0, #16]
   d9524:	f7fe feb4 	bl	d8290 <HAL_USB_USART_Receive_Data>
}
   d9528:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d952c:	bd08      	pop	{r3, pc}

000d952e <_ZN9USBSerial4peekEv>:
{
   d952e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9530:	2101      	movs	r1, #1
   d9532:	7c00      	ldrb	r0, [r0, #16]
   d9534:	f7fe feac 	bl	d8290 <HAL_USB_USART_Receive_Data>
}
   d9538:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d953c:	bd08      	pop	{r3, pc}

000d953e <_ZN9USBSerial17availableForWriteEv>:
{
   d953e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9540:	7c00      	ldrb	r0, [r0, #16]
   d9542:	f7fe fe9d 	bl	d8280 <HAL_USB_USART_Available_Data_For_Write>
}
   d9546:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d954a:	bd08      	pop	{r3, pc}

000d954c <_ZN9USBSerial9availableEv>:
{
   d954c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d954e:	7c00      	ldrb	r0, [r0, #16]
   d9550:	f7fe fe8e 	bl	d8270 <HAL_USB_USART_Available_Data>
}
   d9554:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9558:	bd08      	pop	{r3, pc}

000d955a <_ZN9USBSerial5writeEh>:
{
   d955a:	b513      	push	{r0, r1, r4, lr}
   d955c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d955e:	7c00      	ldrb	r0, [r0, #16]
{
   d9560:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9562:	f7fe fe8d 	bl	d8280 <HAL_USB_USART_Available_Data_For_Write>
   d9566:	2800      	cmp	r0, #0
   d9568:	9901      	ldr	r1, [sp, #4]
   d956a:	dc01      	bgt.n	d9570 <_ZN9USBSerial5writeEh+0x16>
   d956c:	7c60      	ldrb	r0, [r4, #17]
   d956e:	b120      	cbz	r0, d957a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9570:	7c20      	ldrb	r0, [r4, #16]
   d9572:	f7fe fe95 	bl	d82a0 <HAL_USB_USART_Send_Data>
   d9576:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d957a:	b002      	add	sp, #8
   d957c:	bd10      	pop	{r4, pc}

000d957e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d957e:	7c00      	ldrb	r0, [r0, #16]
   d9580:	f7fe be96 	b.w	d82b0 <HAL_USB_USART_Flush_Data>

000d9584 <_ZN9USBSerialD0Ev>:
   d9584:	b510      	push	{r4, lr}
   d9586:	2114      	movs	r1, #20
   d9588:	4604      	mov	r4, r0
   d958a:	f000 fb69 	bl	d9c60 <_ZdlPvj>
   d958e:	4620      	mov	r0, r4
   d9590:	bd10      	pop	{r4, pc}
	...

000d9594 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9594:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d959a:	4604      	mov	r4, r0
   d959c:	4608      	mov	r0, r1
   d959e:	2100      	movs	r1, #0
   d95a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d95a4:	4b04      	ldr	r3, [pc, #16]	; (d95b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d95a6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d95a8:	2301      	movs	r3, #1
  _serial = serial;
   d95aa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d95ac:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d95ae:	4611      	mov	r1, r2
   d95b0:	f7fe fe4e 	bl	d8250 <HAL_USB_USART_Init>
}
   d95b4:	4620      	mov	r0, r4
   d95b6:	bd10      	pop	{r4, pc}
   d95b8:	000de7e4 	.word	0x000de7e4

000d95bc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d95bc:	7c00      	ldrb	r0, [r0, #16]
   d95be:	2200      	movs	r2, #0
   d95c0:	f7fe be4e 	b.w	d8260 <HAL_USB_USART_Begin>

000d95c4 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   d95c4:	7c00      	ldrb	r0, [r0, #16]
   d95c6:	f7fe be7b 	b.w	d82c0 <HAL_USB_USART_Is_Enabled>

000d95ca <_ZN9USBSerialcvbEv>:
  return isEnabled();
   d95ca:	f7ff bffb 	b.w	d95c4 <_ZN9USBSerial9isEnabledEv>

000d95ce <_Z19acquireSerialBufferv>:
{
   d95ce:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d95d0:	2214      	movs	r2, #20
{
   d95d2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d95d4:	2100      	movs	r1, #0
   d95d6:	f003 ffc9 	bl	dd56c <memset>
}
   d95da:	4620      	mov	r0, r4
   d95dc:	bd10      	pop	{r4, pc}
	...

000d95e0 <_Z16_fetch_usbserialv>:
{
   d95e0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d95e2:	4c0f      	ldr	r4, [pc, #60]	; (d9620 <_Z16_fetch_usbserialv+0x40>)
{
   d95e4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d95e6:	a803      	add	r0, sp, #12
   d95e8:	f7ff fff1 	bl	d95ce <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d95ec:	7821      	ldrb	r1, [r4, #0]
   d95ee:	f3bf 8f5b 	dmb	ish
   d95f2:	f011 0101 	ands.w	r1, r1, #1
   d95f6:	d10f      	bne.n	d9618 <_Z16_fetch_usbserialv+0x38>
   d95f8:	4620      	mov	r0, r4
   d95fa:	9101      	str	r1, [sp, #4]
   d95fc:	f7fa fd5c 	bl	d40b8 <__cxa_guard_acquire>
   d9600:	9901      	ldr	r1, [sp, #4]
   d9602:	b148      	cbz	r0, d9618 <_Z16_fetch_usbserialv+0x38>
   d9604:	aa03      	add	r2, sp, #12
   d9606:	4807      	ldr	r0, [pc, #28]	; (d9624 <_Z16_fetch_usbserialv+0x44>)
   d9608:	f7ff ffc4 	bl	d9594 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d960c:	4620      	mov	r0, r4
   d960e:	f7fa fd58 	bl	d40c2 <__cxa_guard_release>
   d9612:	4805      	ldr	r0, [pc, #20]	; (d9628 <_Z16_fetch_usbserialv+0x48>)
   d9614:	f003 ff96 	bl	dd544 <atexit>
	return _usbserial;
}
   d9618:	4802      	ldr	r0, [pc, #8]	; (d9624 <_Z16_fetch_usbserialv+0x44>)
   d961a:	b008      	add	sp, #32
   d961c:	bd10      	pop	{r4, pc}
   d961e:	bf00      	nop
   d9620:	2003e5c0 	.word	0x2003e5c0
   d9624:	2003e5c4 	.word	0x2003e5c4
   d9628:	000d951b 	.word	0x000d951b

000d962c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d962c:	4700      	bx	r0
	...

000d9630 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d9630:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d9634:	2400      	movs	r4, #0
{
   d9636:	461d      	mov	r5, r3
   d9638:	460f      	mov	r7, r1
   d963a:	4690      	mov	r8, r2
   d963c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d963e:	f7fe fcaf 	bl	d7fa0 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d9642:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9644:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d9648:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d964c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d9650:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d9654:	bfa2      	ittt	ge
   d9656:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d965a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d965e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9660:	4907      	ldr	r1, [pc, #28]	; (d9680 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d9662:	9400      	str	r4, [sp, #0]
   d9664:	4643      	mov	r3, r8
   d9666:	463a      	mov	r2, r7
   d9668:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d966a:	bfa8      	it	ge
   d966c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9670:	f7fe fc8e 	bl	d7f90 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d9674:	fab0 f080 	clz	r0, r0
   d9678:	0940      	lsrs	r0, r0, #5
   d967a:	b004      	add	sp, #16
   d967c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9680:	000d962d 	.word	0x000d962d

000d9684 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9684:	2200      	movs	r2, #0
   d9686:	6840      	ldr	r0, [r0, #4]
   d9688:	4611      	mov	r1, r2
   d968a:	f7fe be85 	b.w	d8398 <network_ready>

000d968e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d968e:	2200      	movs	r2, #0
   d9690:	6840      	ldr	r0, [r0, #4]
   d9692:	4611      	mov	r1, r2
   d9694:	f7fe bea0 	b.w	d83d8 <network_listening>

000d9698 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d9698:	2200      	movs	r2, #0
   d969a:	6840      	ldr	r0, [r0, #4]
   d969c:	4611      	mov	r1, r2
   d969e:	f7fe beab 	b.w	d83f8 <network_get_listen_timeout>

000d96a2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d96a2:	6840      	ldr	r0, [r0, #4]
   d96a4:	2200      	movs	r2, #0
   d96a6:	f7fe be9f 	b.w	d83e8 <network_set_listen_timeout>

000d96aa <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d96aa:	6840      	ldr	r0, [r0, #4]
   d96ac:	2200      	movs	r2, #0
   d96ae:	f081 0101 	eor.w	r1, r1, #1
   d96b2:	f7fe be89 	b.w	d83c8 <network_listen>

000d96b6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d96b6:	2300      	movs	r3, #0
   d96b8:	6840      	ldr	r0, [r0, #4]
   d96ba:	461a      	mov	r2, r3
   d96bc:	4619      	mov	r1, r3
   d96be:	f7fe be7b 	b.w	d83b8 <network_off>

000d96c2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d96c2:	2300      	movs	r3, #0
   d96c4:	6840      	ldr	r0, [r0, #4]
   d96c6:	461a      	mov	r2, r3
   d96c8:	4619      	mov	r1, r3
   d96ca:	f7fe be6d 	b.w	d83a8 <network_on>

000d96ce <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d96ce:	2200      	movs	r2, #0
   d96d0:	6840      	ldr	r0, [r0, #4]
   d96d2:	4611      	mov	r1, r2
   d96d4:	f7fe be50 	b.w	d8378 <network_connecting>

000d96d8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d96d8:	6840      	ldr	r0, [r0, #4]
   d96da:	2200      	movs	r2, #0
   d96dc:	2102      	movs	r1, #2
   d96de:	f7fe be53 	b.w	d8388 <network_disconnect>

000d96e2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d96e2:	2300      	movs	r3, #0
   d96e4:	6840      	ldr	r0, [r0, #4]
   d96e6:	461a      	mov	r2, r3
   d96e8:	f7fe be3e 	b.w	d8368 <network_connect>

000d96ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d96ec:	4b08      	ldr	r3, [pc, #32]	; (d9710 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d96ee:	b510      	push	{r4, lr}
   d96f0:	2428      	movs	r4, #40	; 0x28
   d96f2:	4622      	mov	r2, r4
   d96f4:	4618      	mov	r0, r3
   d96f6:	2100      	movs	r1, #0
   d96f8:	f003 ff38 	bl	dd56c <memset>
   d96fc:	4b05      	ldr	r3, [pc, #20]	; (d9714 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d96fe:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d9700:	f04f 32ff 	mov.w	r2, #4294967295
   d9704:	6042      	str	r2, [r0, #4]
   d9706:	2204      	movs	r2, #4
   d9708:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d970a:	4a03      	ldr	r2, [pc, #12]	; (d9718 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d970c:	601a      	str	r2, [r3, #0]
   d970e:	bd10      	pop	{r4, pc}
   d9710:	2003e5e0 	.word	0x2003e5e0
   d9714:	2003e5d8 	.word	0x2003e5d8
   d9718:	000de814 	.word	0x000de814

000d971c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d971c:	4770      	bx	lr

000d971e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d971e:	7441      	strb	r1, [r0, #17]
}
   d9720:	4770      	bx	lr

000d9722 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9722:	4770      	bx	lr

000d9724 <_ZN11USARTSerial17availableForWriteEv>:
{
   d9724:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d9726:	7c00      	ldrb	r0, [r0, #16]
   d9728:	f7fe fcda 	bl	d80e0 <hal_usart_available_data_for_write>
}
   d972c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9730:	bd08      	pop	{r3, pc}

000d9732 <_ZN11USARTSerial9availableEv>:
{
   d9732:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d9734:	7c00      	ldrb	r0, [r0, #16]
   d9736:	f7fe fcab 	bl	d8090 <hal_usart_available>
}
   d973a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d973e:	bd08      	pop	{r3, pc}

000d9740 <_ZN11USARTSerial4peekEv>:
{
   d9740:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d9742:	7c00      	ldrb	r0, [r0, #16]
   d9744:	f7fe fcb4 	bl	d80b0 <hal_usart_peek>
}
   d9748:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d974c:	bd08      	pop	{r3, pc}

000d974e <_ZN11USARTSerial4readEv>:
{
   d974e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d9750:	7c00      	ldrb	r0, [r0, #16]
   d9752:	f7fe fca5 	bl	d80a0 <hal_usart_read>
}
   d9756:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d975a:	bd08      	pop	{r3, pc}

000d975c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d975c:	7c00      	ldrb	r0, [r0, #16]
   d975e:	f7fe bcaf 	b.w	d80c0 <hal_usart_flush>

000d9762 <_ZN11USARTSerial5writeEh>:
{
   d9762:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9764:	7c45      	ldrb	r5, [r0, #17]
{
   d9766:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9768:	b12d      	cbz	r5, d9776 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d976a:	7c20      	ldrb	r0, [r4, #16]
}
   d976c:	b003      	add	sp, #12
   d976e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9772:	f7fe bc85 	b.w	d8080 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9776:	7c00      	ldrb	r0, [r0, #16]
   d9778:	9101      	str	r1, [sp, #4]
   d977a:	f7fe fcb1 	bl	d80e0 <hal_usart_available_data_for_write>
   d977e:	2800      	cmp	r0, #0
   d9780:	9901      	ldr	r1, [sp, #4]
   d9782:	dcf2      	bgt.n	d976a <_ZN11USARTSerial5writeEh+0x8>
}
   d9784:	4628      	mov	r0, r5
   d9786:	b003      	add	sp, #12
   d9788:	bd30      	pop	{r4, r5, pc}

000d978a <_ZN11USARTSerialD0Ev>:
   d978a:	b510      	push	{r4, lr}
   d978c:	2114      	movs	r1, #20
   d978e:	4604      	mov	r4, r0
   d9790:	f000 fa66 	bl	d9c60 <_ZdlPvj>
   d9794:	4620      	mov	r0, r4
   d9796:	bd10      	pop	{r4, pc}

000d9798 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9798:	b510      	push	{r4, lr}
   d979a:	f04f 0c00 	mov.w	ip, #0
   d979e:	4604      	mov	r4, r0
   d97a0:	4608      	mov	r0, r1
   d97a2:	4611      	mov	r1, r2
   d97a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d97a8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d97ac:	4a04      	ldr	r2, [pc, #16]	; (d97c0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d97ae:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d97b0:	2201      	movs	r2, #1
  _serial = serial;
   d97b2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d97b4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d97b6:	461a      	mov	r2, r3
   d97b8:	f7fe fc5a 	bl	d8070 <hal_usart_init>
}
   d97bc:	4620      	mov	r0, r4
   d97be:	bd10      	pop	{r4, pc}
   d97c0:	000de850 	.word	0x000de850

000d97c4 <_Z22__fetch_global_Serial1v>:
{
   d97c4:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d97c6:	4c0d      	ldr	r4, [pc, #52]	; (d97fc <_Z22__fetch_global_Serial1v+0x38>)
   d97c8:	7821      	ldrb	r1, [r4, #0]
   d97ca:	f3bf 8f5b 	dmb	ish
   d97ce:	f011 0101 	ands.w	r1, r1, #1
   d97d2:	d110      	bne.n	d97f6 <_Z22__fetch_global_Serial1v+0x32>
   d97d4:	4620      	mov	r0, r4
   d97d6:	9101      	str	r1, [sp, #4]
   d97d8:	f7fa fc6e 	bl	d40b8 <__cxa_guard_acquire>
   d97dc:	9901      	ldr	r1, [sp, #4]
   d97de:	b150      	cbz	r0, d97f6 <_Z22__fetch_global_Serial1v+0x32>
   d97e0:	4b07      	ldr	r3, [pc, #28]	; (d9800 <_Z22__fetch_global_Serial1v+0x3c>)
   d97e2:	4a08      	ldr	r2, [pc, #32]	; (d9804 <_Z22__fetch_global_Serial1v+0x40>)
   d97e4:	4808      	ldr	r0, [pc, #32]	; (d9808 <_Z22__fetch_global_Serial1v+0x44>)
   d97e6:	f7ff ffd7 	bl	d9798 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d97ea:	4620      	mov	r0, r4
   d97ec:	f7fa fc69 	bl	d40c2 <__cxa_guard_release>
   d97f0:	4806      	ldr	r0, [pc, #24]	; (d980c <_Z22__fetch_global_Serial1v+0x48>)
   d97f2:	f003 fea7 	bl	dd544 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d97f6:	4804      	ldr	r0, [pc, #16]	; (d9808 <_Z22__fetch_global_Serial1v+0x44>)
   d97f8:	b002      	add	sp, #8
   d97fa:	bd10      	pop	{r4, pc}
   d97fc:	2003e608 	.word	0x2003e608
   d9800:	2003e690 	.word	0x2003e690
   d9804:	2003e60c 	.word	0x2003e60c
   d9808:	2003e714 	.word	0x2003e714
   d980c:	000d9723 	.word	0x000d9723

000d9810 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d9810:	b510      	push	{r4, lr}
      if (_M_empty())
   d9812:	6883      	ldr	r3, [r0, #8]
   d9814:	4604      	mov	r4, r0
   d9816:	b90b      	cbnz	r3, d981c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d9818:	f000 fa26 	bl	d9c68 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d981c:	68c3      	ldr	r3, [r0, #12]
   d981e:	4798      	blx	r3
      if (_M_manager)
   d9820:	68a3      	ldr	r3, [r4, #8]
   d9822:	b11b      	cbz	r3, d982c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d9824:	2203      	movs	r2, #3
   d9826:	4621      	mov	r1, r4
   d9828:	4620      	mov	r0, r4
   d982a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d982c:	4620      	mov	r0, r4
   d982e:	2110      	movs	r1, #16
}
   d9830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d9834:	f000 ba14 	b.w	d9c60 <_ZdlPvj>

000d9838 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d9838:	4770      	bx	lr

000d983a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d983a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d983c:	4606      	mov	r6, r0
   d983e:	4615      	mov	r5, r2
   d9840:	460c      	mov	r4, r1
   d9842:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9844:	42bc      	cmp	r4, r7
   d9846:	d006      	beq.n	d9856 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9848:	6833      	ldr	r3, [r6, #0]
   d984a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d984e:	689b      	ldr	r3, [r3, #8]
   d9850:	4630      	mov	r0, r6
   d9852:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d9854:	e7f6      	b.n	d9844 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d9856:	4628      	mov	r0, r5
   d9858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d985a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d985a:	7c00      	ldrb	r0, [r0, #16]
   d985c:	2200      	movs	r2, #0
   d985e:	f7fe bc67 	b.w	d8130 <hal_i2c_write>

000d9862 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d9862:	7c00      	ldrb	r0, [r0, #16]
   d9864:	2100      	movs	r1, #0
   d9866:	f7fe bc6b 	b.w	d8140 <hal_i2c_available>

000d986a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d986a:	7c00      	ldrb	r0, [r0, #16]
   d986c:	2100      	movs	r1, #0
   d986e:	f7fe bc6f 	b.w	d8150 <hal_i2c_read>

000d9872 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d9872:	7c00      	ldrb	r0, [r0, #16]
   d9874:	2100      	movs	r1, #0
   d9876:	f7fe bc73 	b.w	d8160 <hal_i2c_peek>

000d987a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d987a:	7c00      	ldrb	r0, [r0, #16]
   d987c:	2100      	movs	r1, #0
   d987e:	f7fe bc77 	b.w	d8170 <hal_i2c_flush>

000d9882 <_ZN7TwoWireD0Ev>:
   d9882:	b510      	push	{r4, lr}
   d9884:	2114      	movs	r1, #20
   d9886:	4604      	mov	r4, r0
   d9888:	f000 f9ea 	bl	d9c60 <_ZdlPvj>
   d988c:	4620      	mov	r0, r4
   d988e:	bd10      	pop	{r4, pc}

000d9890 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d9890:	b510      	push	{r4, lr}
   d9892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9896:	4604      	mov	r4, r0
   d9898:	4608      	mov	r0, r1
   d989a:	2100      	movs	r1, #0
   d989c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d98a0:	4b03      	ldr	r3, [pc, #12]	; (d98b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d98a2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d98a4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d98a6:	4611      	mov	r1, r2
   d98a8:	f7fe fc72 	bl	d8190 <hal_i2c_init>
}
   d98ac:	4620      	mov	r0, r4
   d98ae:	bd10      	pop	{r4, pc}
   d98b0:	000de880 	.word	0x000de880

000d98b4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d98b4:	7c00      	ldrb	r0, [r0, #16]
   d98b6:	2200      	movs	r2, #0
   d98b8:	f7fe bc1a 	b.w	d80f0 <hal_i2c_set_speed>

000d98bc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d98bc:	2300      	movs	r3, #0
   d98be:	7c00      	ldrb	r0, [r0, #16]
   d98c0:	461a      	mov	r2, r3
   d98c2:	4619      	mov	r1, r3
   d98c4:	f7fe bc1c 	b.w	d8100 <hal_i2c_begin>

000d98c8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d98c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d98ca:	2200      	movs	r2, #0
   d98cc:	2314      	movs	r3, #20
   d98ce:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d98d2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d98d6:	780b      	ldrb	r3, [r1, #0]
   d98d8:	f88d 3008 	strb.w	r3, [sp, #8]
   d98dc:	684b      	ldr	r3, [r1, #4]
   d98de:	9303      	str	r3, [sp, #12]
   d98e0:	68cb      	ldr	r3, [r1, #12]
   d98e2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d98e4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d98e6:	7a0b      	ldrb	r3, [r1, #8]
   d98e8:	9305      	str	r3, [sp, #20]
   d98ea:	a901      	add	r1, sp, #4
   d98ec:	f7fe fc58 	bl	d81a0 <hal_i2c_request_ex>
}
   d98f0:	b007      	add	sp, #28
   d98f2:	f85d fb04 	ldr.w	pc, [sp], #4

000d98f6 <_ZN7TwoWire11requestFromEhjh>:
{
   d98f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d98f8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d98fa:	f88d 1000 	strb.w	r1, [sp]
   d98fe:	f04f 0164 	mov.w	r1, #100	; 0x64
   d9902:	9103      	str	r1, [sp, #12]
   d9904:	bf18      	it	ne
   d9906:	2301      	movne	r3, #1
   d9908:	4669      	mov	r1, sp
    size_ = size;
   d990a:	9201      	str	r2, [sp, #4]
   d990c:	f88d 3008 	strb.w	r3, [sp, #8]
   d9910:	f7ff ffda 	bl	d98c8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d9914:	b005      	add	sp, #20
   d9916:	f85d fb04 	ldr.w	pc, [sp], #4

000d991a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d991a:	2301      	movs	r3, #1
   d991c:	f7ff bfeb 	b.w	d98f6 <_ZN7TwoWire11requestFromEhjh>

000d9920 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d9920:	7c00      	ldrb	r0, [r0, #16]
   d9922:	2200      	movs	r2, #0
   d9924:	f7fe bbf4 	b.w	d8110 <hal_i2c_begin_transmission>

000d9928 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d9928:	7c00      	ldrb	r0, [r0, #16]
   d992a:	2200      	movs	r2, #0
   d992c:	f7fe bbf8 	b.w	d8120 <hal_i2c_end_transmission>

000d9930 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d9930:	2101      	movs	r1, #1
   d9932:	f7ff bff9 	b.w	d9928 <_ZN7TwoWire15endTransmissionEh>

000d9936 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9936:	2300      	movs	r3, #0
   d9938:	6840      	ldr	r0, [r0, #4]
   d993a:	461a      	mov	r2, r3
   d993c:	f7fe bd14 	b.w	d8368 <network_connect>

000d9940 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9940:	6840      	ldr	r0, [r0, #4]
   d9942:	2200      	movs	r2, #0
   d9944:	2102      	movs	r1, #2
   d9946:	f7fe bd1f 	b.w	d8388 <network_disconnect>

000d994a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d994a:	2200      	movs	r2, #0
   d994c:	6840      	ldr	r0, [r0, #4]
   d994e:	4611      	mov	r1, r2
   d9950:	f7fe bd12 	b.w	d8378 <network_connecting>

000d9954 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9954:	2200      	movs	r2, #0
   d9956:	6840      	ldr	r0, [r0, #4]
   d9958:	4611      	mov	r1, r2
   d995a:	f7fe bd1d 	b.w	d8398 <network_ready>

000d995e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d995e:	2300      	movs	r3, #0
   d9960:	6840      	ldr	r0, [r0, #4]
   d9962:	461a      	mov	r2, r3
   d9964:	4619      	mov	r1, r3
   d9966:	f7fe bd1f 	b.w	d83a8 <network_on>

000d996a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d996a:	2300      	movs	r3, #0
   d996c:	6840      	ldr	r0, [r0, #4]
   d996e:	461a      	mov	r2, r3
   d9970:	4619      	mov	r1, r3
   d9972:	f7fe bd21 	b.w	d83b8 <network_off>

000d9976 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9976:	6840      	ldr	r0, [r0, #4]
   d9978:	2100      	movs	r1, #0
   d997a:	f7fe bd45 	b.w	d8408 <network_is_on>

000d997e <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d997e:	6840      	ldr	r0, [r0, #4]
   d9980:	2100      	movs	r1, #0
   d9982:	f7fe bd49 	b.w	d8418 <network_is_off>

000d9986 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9986:	6840      	ldr	r0, [r0, #4]
   d9988:	2200      	movs	r2, #0
   d998a:	f081 0101 	eor.w	r1, r1, #1
   d998e:	f7fe bd1b 	b.w	d83c8 <network_listen>

000d9992 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9992:	6840      	ldr	r0, [r0, #4]
   d9994:	2200      	movs	r2, #0
   d9996:	f7fe bd27 	b.w	d83e8 <network_set_listen_timeout>

000d999a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d999a:	2200      	movs	r2, #0
   d999c:	6840      	ldr	r0, [r0, #4]
   d999e:	4611      	mov	r1, r2
   d99a0:	f7fe bd2a 	b.w	d83f8 <network_get_listen_timeout>

000d99a4 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d99a4:	2200      	movs	r2, #0
   d99a6:	6840      	ldr	r0, [r0, #4]
   d99a8:	4611      	mov	r1, r2
   d99aa:	f7fe bd15 	b.w	d83d8 <network_listening>

000d99ae <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d99ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d99b2:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d99b4:	b095      	sub	sp, #84	; 0x54
   d99b6:	4616      	mov	r6, r2
   d99b8:	460d      	mov	r5, r1
   d99ba:	4607      	mov	r7, r0
    IPAddress addr;
   d99bc:	f7ff fd74 	bl	d94a8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d99c0:	4621      	mov	r1, r4
   d99c2:	2218      	movs	r2, #24
   d99c4:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d99c6:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d99c8:	f003 fdd0 	bl	dd56c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d99cc:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d99ce:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d99d2:	4621      	mov	r1, r4
   d99d4:	466b      	mov	r3, sp
   d99d6:	aa0c      	add	r2, sp, #48	; 0x30
   d99d8:	4630      	mov	r0, r6
   d99da:	f7fe faa9 	bl	d7f30 <netdb_getaddrinfo>
    if (!r) {
   d99de:	4604      	mov	r4, r0
   d99e0:	2800      	cmp	r0, #0
   d99e2:	d146      	bne.n	d9a72 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d99e4:	4602      	mov	r2, r0
   d99e6:	2101      	movs	r1, #1
   d99e8:	6868      	ldr	r0, [r5, #4]
   d99ea:	f7fe fcd5 	bl	d8398 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d99ee:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d99f0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d99f2:	4622      	mov	r2, r4
   d99f4:	6868      	ldr	r0, [r5, #4]
   d99f6:	f7fe fccf 	bl	d8398 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d99fa:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d99fc:	4681      	mov	r9, r0
        bool ok = false;
   d99fe:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9a00:	2e00      	cmp	r6, #0
   d9a02:	d036      	beq.n	d9a72 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d9a04:	2900      	cmp	r1, #0
   d9a06:	d134      	bne.n	d9a72 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9a08:	6873      	ldr	r3, [r6, #4]
   d9a0a:	2b02      	cmp	r3, #2
   d9a0c:	d003      	beq.n	d9a16 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9a0e:	2b0a      	cmp	r3, #10
   d9a10:	d00b      	beq.n	d9a2a <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9a12:	69f6      	ldr	r6, [r6, #28]
   d9a14:	e7f4      	b.n	d9a00 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9a16:	f1b8 0f00 	cmp.w	r8, #0
   d9a1a:	d004      	beq.n	d9a26 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9a1c:	6971      	ldr	r1, [r6, #20]
   d9a1e:	4638      	mov	r0, r7
   d9a20:	3104      	adds	r1, #4
   d9a22:	f7ff fd6e 	bl	d9502 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d9a26:	4641      	mov	r1, r8
   d9a28:	e7f3      	b.n	d9a12 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9a2a:	f1b9 0f00 	cmp.w	r9, #0
   d9a2e:	d101      	bne.n	d9a34 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9a30:	4649      	mov	r1, r9
   d9a32:	e7ee      	b.n	d9a12 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9a34:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9a36:	2210      	movs	r2, #16
   d9a38:	a801      	add	r0, sp, #4
   d9a3a:	f003 fd97 	bl	dd56c <memset>
                    a.v = 6;
   d9a3e:	2306      	movs	r3, #6
   d9a40:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9a44:	ad01      	add	r5, sp, #4
   d9a46:	f104 0308 	add.w	r3, r4, #8
   d9a4a:	3418      	adds	r4, #24
   d9a4c:	6818      	ldr	r0, [r3, #0]
   d9a4e:	6859      	ldr	r1, [r3, #4]
   d9a50:	462a      	mov	r2, r5
   d9a52:	c203      	stmia	r2!, {r0, r1}
   d9a54:	3308      	adds	r3, #8
   d9a56:	42a3      	cmp	r3, r4
   d9a58:	4615      	mov	r5, r2
   d9a5a:	d1f7      	bne.n	d9a4c <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d9a5c:	a901      	add	r1, sp, #4
   d9a5e:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9a60:	ad07      	add	r5, sp, #28
   d9a62:	f7ff fd2f 	bl	d94c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9a68:	1d3c      	adds	r4, r7, #4
   d9a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9a6c:	682b      	ldr	r3, [r5, #0]
   d9a6e:	7023      	strb	r3, [r4, #0]
   d9a70:	e7de      	b.n	d9a30 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9a72:	9800      	ldr	r0, [sp, #0]
   d9a74:	f7fe fa54 	bl	d7f20 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9a78:	4638      	mov	r0, r7
   d9a7a:	b015      	add	sp, #84	; 0x54
   d9a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9a80 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9a80:	4b02      	ldr	r3, [pc, #8]	; (d9a8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9a82:	4a03      	ldr	r2, [pc, #12]	; (d9a90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9a84:	601a      	str	r2, [r3, #0]
   d9a86:	2200      	movs	r2, #0
   d9a88:	605a      	str	r2, [r3, #4]

} // spark
   d9a8a:	4770      	bx	lr
   d9a8c:	2003e728 	.word	0x2003e728
   d9a90:	000de8a8 	.word	0x000de8a8

000d9a94 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9a94:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9a96:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9a98:	d902      	bls.n	d9aa0 <pinAvailable+0xc>
    return false;
   d9a9a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9a9c:	b002      	add	sp, #8
   d9a9e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9aa0:	f1a0 030b 	sub.w	r3, r0, #11
   d9aa4:	2b02      	cmp	r3, #2
   d9aa6:	d81a      	bhi.n	d9ade <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9aa8:	4c17      	ldr	r4, [pc, #92]	; (d9b08 <pinAvailable+0x74>)
   d9aaa:	7821      	ldrb	r1, [r4, #0]
   d9aac:	f3bf 8f5b 	dmb	ish
   d9ab0:	f011 0101 	ands.w	r1, r1, #1
   d9ab4:	d10b      	bne.n	d9ace <pinAvailable+0x3a>
   d9ab6:	4620      	mov	r0, r4
   d9ab8:	9101      	str	r1, [sp, #4]
   d9aba:	f7fa fafd 	bl	d40b8 <__cxa_guard_acquire>
   d9abe:	9901      	ldr	r1, [sp, #4]
   d9ac0:	b128      	cbz	r0, d9ace <pinAvailable+0x3a>
   d9ac2:	4812      	ldr	r0, [pc, #72]	; (d9b0c <pinAvailable+0x78>)
   d9ac4:	f7fe fd5c 	bl	d8580 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9ac8:	4620      	mov	r0, r4
   d9aca:	f7fa fafa 	bl	d40c2 <__cxa_guard_release>
   d9ace:	4b0f      	ldr	r3, [pc, #60]	; (d9b0c <pinAvailable+0x78>)
   d9ad0:	7818      	ldrb	r0, [r3, #0]
   d9ad2:	f7fe fb85 	bl	d81e0 <hal_spi_is_enabled>
   d9ad6:	2800      	cmp	r0, #0
   d9ad8:	d1df      	bne.n	d9a9a <pinAvailable+0x6>
  return true; // 'pin' is available
   d9ada:	2001      	movs	r0, #1
   d9adc:	e7de      	b.n	d9a9c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d9ade:	2801      	cmp	r0, #1
   d9ae0:	d809      	bhi.n	d9af6 <pinAvailable+0x62>
   d9ae2:	f000 f899 	bl	d9c18 <_Z19__fetch_global_Wirev>
   d9ae6:	2100      	movs	r1, #0
   d9ae8:	7c00      	ldrb	r0, [r0, #16]
   d9aea:	f7fe fb49 	bl	d8180 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d9aee:	f080 0001 	eor.w	r0, r0, #1
   d9af2:	b2c0      	uxtb	r0, r0
   d9af4:	e7d2      	b.n	d9a9c <pinAvailable+0x8>
   d9af6:	3809      	subs	r0, #9
   d9af8:	2801      	cmp	r0, #1
   d9afa:	d8ee      	bhi.n	d9ada <pinAvailable+0x46>
   d9afc:	f7ff fe62 	bl	d97c4 <_Z22__fetch_global_Serial1v>
   d9b00:	7c00      	ldrb	r0, [r0, #16]
   d9b02:	f7fe fae5 	bl	d80d0 <hal_usart_is_enabled>
   d9b06:	e7f2      	b.n	d9aee <pinAvailable+0x5a>
   d9b08:	2003e578 	.word	0x2003e578
   d9b0c:	2003e57c 	.word	0x2003e57c

000d9b10 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9b10:	2823      	cmp	r0, #35	; 0x23
{
   d9b12:	b538      	push	{r3, r4, r5, lr}
   d9b14:	4604      	mov	r4, r0
   d9b16:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9b18:	d80a      	bhi.n	d9b30 <pinMode+0x20>
   d9b1a:	29ff      	cmp	r1, #255	; 0xff
   d9b1c:	d008      	beq.n	d9b30 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d9b1e:	f7ff ffb9 	bl	d9a94 <pinAvailable>
   d9b22:	b128      	cbz	r0, d9b30 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d9b24:	4629      	mov	r1, r5
   d9b26:	4620      	mov	r0, r4
}
   d9b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d9b2c:	f7fe ba10 	b.w	d7f50 <HAL_Pin_Mode>
}
   d9b30:	bd38      	pop	{r3, r4, r5, pc}

000d9b32 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9b32:	b538      	push	{r3, r4, r5, lr}
   d9b34:	4604      	mov	r4, r0
   d9b36:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9b38:	f7fe fa12 	bl	d7f60 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9b3c:	28ff      	cmp	r0, #255	; 0xff
   d9b3e:	d010      	beq.n	d9b62 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d9b40:	2806      	cmp	r0, #6
   d9b42:	d804      	bhi.n	d9b4e <digitalWrite+0x1c>
   d9b44:	234d      	movs	r3, #77	; 0x4d
   d9b46:	fa23 f000 	lsr.w	r0, r3, r0
   d9b4a:	07c3      	lsls	r3, r0, #31
   d9b4c:	d409      	bmi.n	d9b62 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9b4e:	4620      	mov	r0, r4
   d9b50:	f7ff ffa0 	bl	d9a94 <pinAvailable>
   d9b54:	b128      	cbz	r0, d9b62 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9b56:	4629      	mov	r1, r5
   d9b58:	4620      	mov	r0, r4
}
   d9b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d9b5e:	f7fe ba07 	b.w	d7f70 <HAL_GPIO_Write>
}
   d9b62:	bd38      	pop	{r3, r4, r5, pc}

000d9b64 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9b64:	b510      	push	{r4, lr}
   d9b66:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9b68:	f7fe f9fa 	bl	d7f60 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d9b6c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d9b6e:	b2db      	uxtb	r3, r3
   d9b70:	2b01      	cmp	r3, #1
   d9b72:	d908      	bls.n	d9b86 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9b74:	4620      	mov	r0, r4
   d9b76:	f7ff ff8d 	bl	d9a94 <pinAvailable>
   d9b7a:	b120      	cbz	r0, d9b86 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9b7c:	4620      	mov	r0, r4
}
   d9b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d9b82:	f7fe b9fd 	b.w	d7f80 <HAL_GPIO_Read>
}
   d9b86:	2000      	movs	r0, #0
   d9b88:	bd10      	pop	{r4, pc}

000d9b8a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d9b8a:	280d      	cmp	r0, #13
{
   d9b8c:	b510      	push	{r4, lr}
   d9b8e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d9b90:	bf9c      	itt	ls
   d9b92:	340e      	addls	r4, #14
   d9b94:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9b96:	4620      	mov	r0, r4
   d9b98:	f7ff ff7c 	bl	d9a94 <pinAvailable>
   d9b9c:	b150      	cbz	r0, d9bb4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d9b9e:	2103      	movs	r1, #3
   d9ba0:	4620      	mov	r0, r4
   d9ba2:	f7fe f9cd 	bl	d7f40 <HAL_Validate_Pin_Function>
   d9ba6:	2803      	cmp	r0, #3
   d9ba8:	d104      	bne.n	d9bb4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d9baa:	4620      	mov	r0, r4
}
   d9bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d9bb0:	f7fe b9fe 	b.w	d7fb0 <hal_adc_read>
}
   d9bb4:	2000      	movs	r0, #0
   d9bb6:	bd10      	pop	{r4, pc}

000d9bb8 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d9bb8:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d9bba:	4c08      	ldr	r4, [pc, #32]	; (d9bdc <_Z21__fetch_global_EEPROMv+0x24>)
   d9bbc:	7823      	ldrb	r3, [r4, #0]
   d9bbe:	f3bf 8f5b 	dmb	ish
   d9bc2:	07db      	lsls	r3, r3, #31
   d9bc4:	d408      	bmi.n	d9bd8 <_Z21__fetch_global_EEPROMv+0x20>
   d9bc6:	4620      	mov	r0, r4
   d9bc8:	f7fa fa76 	bl	d40b8 <__cxa_guard_acquire>
   d9bcc:	b120      	cbz	r0, d9bd8 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d9bce:	f7fe fa0f 	bl	d7ff0 <HAL_EEPROM_Init>
   d9bd2:	4620      	mov	r0, r4
   d9bd4:	f7fa fa75 	bl	d40c2 <__cxa_guard_release>
	return eeprom;
}
   d9bd8:	4801      	ldr	r0, [pc, #4]	; (d9be0 <_Z21__fetch_global_EEPROMv+0x28>)
   d9bda:	bd10      	pop	{r4, pc}
   d9bdc:	2003e734 	.word	0x2003e734
   d9be0:	2003e738 	.word	0x2003e738

000d9be4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9be4:	4770      	bx	lr
	...

000d9be8 <_Z17acquireWireBufferv>:
{
   d9be8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d9bea:	2300      	movs	r3, #0
   d9bec:	2520      	movs	r5, #32
   d9bee:	8043      	strh	r3, [r0, #2]
   d9bf0:	2314      	movs	r3, #20
{
   d9bf2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9bf4:	8003      	strh	r3, [r0, #0]
   d9bf6:	6085      	str	r5, [r0, #8]
   d9bf8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9bfa:	4906      	ldr	r1, [pc, #24]	; (d9c14 <_Z17acquireWireBufferv+0x2c>)
   d9bfc:	4628      	mov	r0, r5
   d9bfe:	f000 f831 	bl	d9c64 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9c02:	4904      	ldr	r1, [pc, #16]	; (d9c14 <_Z17acquireWireBufferv+0x2c>)
	};
   d9c04:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9c06:	4628      	mov	r0, r5
   d9c08:	f000 f82c 	bl	d9c64 <_ZnajRKSt9nothrow_t>
	};
   d9c0c:	60e0      	str	r0, [r4, #12]
}
   d9c0e:	4620      	mov	r0, r4
   d9c10:	bd38      	pop	{r3, r4, r5, pc}
   d9c12:	bf00      	nop
   d9c14:	000de8dc 	.word	0x000de8dc

000d9c18 <_Z19__fetch_global_Wirev>:
{
   d9c18:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9c1a:	4d0e      	ldr	r5, [pc, #56]	; (d9c54 <_Z19__fetch_global_Wirev+0x3c>)
   d9c1c:	7829      	ldrb	r1, [r5, #0]
   d9c1e:	f3bf 8f5b 	dmb	ish
   d9c22:	f011 0401 	ands.w	r4, r1, #1
{
   d9c26:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9c28:	d111      	bne.n	d9c4e <_Z19__fetch_global_Wirev+0x36>
   d9c2a:	4628      	mov	r0, r5
   d9c2c:	f7fa fa44 	bl	d40b8 <__cxa_guard_acquire>
   d9c30:	b168      	cbz	r0, d9c4e <_Z19__fetch_global_Wirev+0x36>
   d9c32:	a801      	add	r0, sp, #4
   d9c34:	f7ff ffd8 	bl	d9be8 <_Z17acquireWireBufferv>
   d9c38:	aa01      	add	r2, sp, #4
   d9c3a:	4621      	mov	r1, r4
   d9c3c:	4806      	ldr	r0, [pc, #24]	; (d9c58 <_Z19__fetch_global_Wirev+0x40>)
   d9c3e:	f7ff fe27 	bl	d9890 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d9c42:	4628      	mov	r0, r5
   d9c44:	f7fa fa3d 	bl	d40c2 <__cxa_guard_release>
   d9c48:	4804      	ldr	r0, [pc, #16]	; (d9c5c <_Z19__fetch_global_Wirev+0x44>)
   d9c4a:	f003 fc7b 	bl	dd544 <atexit>
	return wire;
}
   d9c4e:	4802      	ldr	r0, [pc, #8]	; (d9c58 <_Z19__fetch_global_Wirev+0x40>)
   d9c50:	b007      	add	sp, #28
   d9c52:	bd30      	pop	{r4, r5, pc}
   d9c54:	2003e73c 	.word	0x2003e73c
   d9c58:	2003e740 	.word	0x2003e740
   d9c5c:	000d9be5 	.word	0x000d9be5

000d9c60 <_ZdlPvj>:
   d9c60:	f7fa ba1d 	b.w	d409e <_ZdlPv>

000d9c64 <_ZnajRKSt9nothrow_t>:
   d9c64:	f7fa ba19 	b.w	d409a <_Znaj>

000d9c68 <_ZSt25__throw_bad_function_callv>:
   d9c68:	b508      	push	{r3, lr}
   d9c6a:	f7fe fc25 	bl	d84b8 <abort>
	...

000d9c70 <cosf>:
   d9c70:	b500      	push	{lr}
   d9c72:	ee10 3a10 	vmov	r3, s0
   d9c76:	4a20      	ldr	r2, [pc, #128]	; (d9cf8 <cosf+0x88>)
   d9c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d9c7c:	4293      	cmp	r3, r2
   d9c7e:	b083      	sub	sp, #12
   d9c80:	dd19      	ble.n	d9cb6 <cosf+0x46>
   d9c82:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d9c86:	db04      	blt.n	d9c92 <cosf+0x22>
   d9c88:	ee30 0a40 	vsub.f32	s0, s0, s0
   d9c8c:	b003      	add	sp, #12
   d9c8e:	f85d fb04 	ldr.w	pc, [sp], #4
   d9c92:	4668      	mov	r0, sp
   d9c94:	f001 fa7e 	bl	db194 <__ieee754_rem_pio2f>
   d9c98:	f000 0003 	and.w	r0, r0, #3
   d9c9c:	2801      	cmp	r0, #1
   d9c9e:	d011      	beq.n	d9cc4 <cosf+0x54>
   d9ca0:	2802      	cmp	r0, #2
   d9ca2:	d01f      	beq.n	d9ce4 <cosf+0x74>
   d9ca4:	b1b8      	cbz	r0, d9cd6 <cosf+0x66>
   d9ca6:	eddd 0a01 	vldr	s1, [sp, #4]
   d9caa:	ed9d 0a00 	vldr	s0, [sp]
   d9cae:	2001      	movs	r0, #1
   d9cb0:	f001 ff72 	bl	dbb98 <__kernel_sinf>
   d9cb4:	e7ea      	b.n	d9c8c <cosf+0x1c>
   d9cb6:	eddf 0a11 	vldr	s1, [pc, #68]	; d9cfc <cosf+0x8c>
   d9cba:	f001 fbb5 	bl	db428 <__kernel_cosf>
   d9cbe:	b003      	add	sp, #12
   d9cc0:	f85d fb04 	ldr.w	pc, [sp], #4
   d9cc4:	eddd 0a01 	vldr	s1, [sp, #4]
   d9cc8:	ed9d 0a00 	vldr	s0, [sp]
   d9ccc:	f001 ff64 	bl	dbb98 <__kernel_sinf>
   d9cd0:	eeb1 0a40 	vneg.f32	s0, s0
   d9cd4:	e7da      	b.n	d9c8c <cosf+0x1c>
   d9cd6:	eddd 0a01 	vldr	s1, [sp, #4]
   d9cda:	ed9d 0a00 	vldr	s0, [sp]
   d9cde:	f001 fba3 	bl	db428 <__kernel_cosf>
   d9ce2:	e7d3      	b.n	d9c8c <cosf+0x1c>
   d9ce4:	eddd 0a01 	vldr	s1, [sp, #4]
   d9ce8:	ed9d 0a00 	vldr	s0, [sp]
   d9cec:	f001 fb9c 	bl	db428 <__kernel_cosf>
   d9cf0:	eeb1 0a40 	vneg.f32	s0, s0
   d9cf4:	e7ca      	b.n	d9c8c <cosf+0x1c>
   d9cf6:	bf00      	nop
   d9cf8:	3f490fd8 	.word	0x3f490fd8
   d9cfc:	00000000 	.word	0x00000000

000d9d00 <sinf>:
   d9d00:	b500      	push	{lr}
   d9d02:	ee10 3a10 	vmov	r3, s0
   d9d06:	4a21      	ldr	r2, [pc, #132]	; (d9d8c <sinf+0x8c>)
   d9d08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d9d0c:	4293      	cmp	r3, r2
   d9d0e:	b083      	sub	sp, #12
   d9d10:	dd1a      	ble.n	d9d48 <sinf+0x48>
   d9d12:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d9d16:	db04      	blt.n	d9d22 <sinf+0x22>
   d9d18:	ee30 0a40 	vsub.f32	s0, s0, s0
   d9d1c:	b003      	add	sp, #12
   d9d1e:	f85d fb04 	ldr.w	pc, [sp], #4
   d9d22:	4668      	mov	r0, sp
   d9d24:	f001 fa36 	bl	db194 <__ieee754_rem_pio2f>
   d9d28:	f000 0003 	and.w	r0, r0, #3
   d9d2c:	2801      	cmp	r0, #1
   d9d2e:	d013      	beq.n	d9d58 <sinf+0x58>
   d9d30:	2802      	cmp	r0, #2
   d9d32:	d020      	beq.n	d9d76 <sinf+0x76>
   d9d34:	b1b8      	cbz	r0, d9d66 <sinf+0x66>
   d9d36:	eddd 0a01 	vldr	s1, [sp, #4]
   d9d3a:	ed9d 0a00 	vldr	s0, [sp]
   d9d3e:	f001 fb73 	bl	db428 <__kernel_cosf>
   d9d42:	eeb1 0a40 	vneg.f32	s0, s0
   d9d46:	e7e9      	b.n	d9d1c <sinf+0x1c>
   d9d48:	eddf 0a11 	vldr	s1, [pc, #68]	; d9d90 <sinf+0x90>
   d9d4c:	2000      	movs	r0, #0
   d9d4e:	f001 ff23 	bl	dbb98 <__kernel_sinf>
   d9d52:	b003      	add	sp, #12
   d9d54:	f85d fb04 	ldr.w	pc, [sp], #4
   d9d58:	eddd 0a01 	vldr	s1, [sp, #4]
   d9d5c:	ed9d 0a00 	vldr	s0, [sp]
   d9d60:	f001 fb62 	bl	db428 <__kernel_cosf>
   d9d64:	e7da      	b.n	d9d1c <sinf+0x1c>
   d9d66:	eddd 0a01 	vldr	s1, [sp, #4]
   d9d6a:	ed9d 0a00 	vldr	s0, [sp]
   d9d6e:	2001      	movs	r0, #1
   d9d70:	f001 ff12 	bl	dbb98 <__kernel_sinf>
   d9d74:	e7d2      	b.n	d9d1c <sinf+0x1c>
   d9d76:	eddd 0a01 	vldr	s1, [sp, #4]
   d9d7a:	ed9d 0a00 	vldr	s0, [sp]
   d9d7e:	2001      	movs	r0, #1
   d9d80:	f001 ff0a 	bl	dbb98 <__kernel_sinf>
   d9d84:	eeb1 0a40 	vneg.f32	s0, s0
   d9d88:	e7c8      	b.n	d9d1c <sinf+0x1c>
   d9d8a:	bf00      	nop
   d9d8c:	3f490fd8 	.word	0x3f490fd8
   d9d90:	00000000 	.word	0x00000000

000d9d94 <atan2>:
   d9d94:	f000 b9b8 	b.w	da108 <__ieee754_atan2>

000d9d98 <pow>:
   d9d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9d9c:	ed2d 8b02 	vpush	{d8}
   d9da0:	b08d      	sub	sp, #52	; 0x34
   d9da2:	ec57 6b10 	vmov	r6, r7, d0
   d9da6:	ec55 4b11 	vmov	r4, r5, d1
   d9daa:	f000 faad 	bl	da308 <__ieee754_pow>
   d9dae:	4bae      	ldr	r3, [pc, #696]	; (da068 <pow+0x2d0>)
   d9db0:	eeb0 8a40 	vmov.f32	s16, s0
   d9db4:	eef0 8a60 	vmov.f32	s17, s1
   d9db8:	f993 9000 	ldrsb.w	r9, [r3]
   d9dbc:	f1b9 3fff 	cmp.w	r9, #4294967295
   d9dc0:	d037      	beq.n	d9e32 <pow+0x9a>
   d9dc2:	4622      	mov	r2, r4
   d9dc4:	462b      	mov	r3, r5
   d9dc6:	4620      	mov	r0, r4
   d9dc8:	4629      	mov	r1, r5
   d9dca:	f003 f815 	bl	dcdf8 <__aeabi_dcmpun>
   d9dce:	4683      	mov	fp, r0
   d9dd0:	bb78      	cbnz	r0, d9e32 <pow+0x9a>
   d9dd2:	4632      	mov	r2, r6
   d9dd4:	463b      	mov	r3, r7
   d9dd6:	4630      	mov	r0, r6
   d9dd8:	4639      	mov	r1, r7
   d9dda:	f003 f80d 	bl	dcdf8 <__aeabi_dcmpun>
   d9dde:	4680      	mov	r8, r0
   d9de0:	2800      	cmp	r0, #0
   d9de2:	f040 8093 	bne.w	d9f0c <pow+0x174>
   d9de6:	f04f 0a00 	mov.w	sl, #0
   d9dea:	f04f 0b00 	mov.w	fp, #0
   d9dee:	4630      	mov	r0, r6
   d9df0:	4639      	mov	r1, r7
   d9df2:	4652      	mov	r2, sl
   d9df4:	465b      	mov	r3, fp
   d9df6:	f002 ffcd 	bl	dcd94 <__aeabi_dcmpeq>
   d9dfa:	b318      	cbz	r0, d9e44 <pow+0xac>
   d9dfc:	4652      	mov	r2, sl
   d9dfe:	465b      	mov	r3, fp
   d9e00:	4620      	mov	r0, r4
   d9e02:	4629      	mov	r1, r5
   d9e04:	f002 ffc6 	bl	dcd94 <__aeabi_dcmpeq>
   d9e08:	9000      	str	r0, [sp, #0]
   d9e0a:	2800      	cmp	r0, #0
   d9e0c:	d057      	beq.n	d9ebe <pow+0x126>
   d9e0e:	4b97      	ldr	r3, [pc, #604]	; (da06c <pow+0x2d4>)
   d9e10:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d9e14:	2201      	movs	r2, #1
   d9e16:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9e1a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9e1e:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d9e22:	9202      	str	r2, [sp, #8]
   d9e24:	9303      	str	r3, [sp, #12]
   d9e26:	f1b9 0f00 	cmp.w	r9, #0
   d9e2a:	f000 8089 	beq.w	d9f40 <pow+0x1a8>
   d9e2e:	ed9f 8b8a 	vldr	d8, [pc, #552]	; da058 <pow+0x2c0>
   d9e32:	eeb0 0a48 	vmov.f32	s0, s16
   d9e36:	eef0 0a68 	vmov.f32	s1, s17
   d9e3a:	b00d      	add	sp, #52	; 0x34
   d9e3c:	ecbd 8b02 	vpop	{d8}
   d9e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9e44:	eeb0 0a48 	vmov.f32	s0, s16
   d9e48:	eef0 0a68 	vmov.f32	s1, s17
   d9e4c:	f002 f8aa 	bl	dbfa4 <finite>
   d9e50:	4680      	mov	r8, r0
   d9e52:	2800      	cmp	r0, #0
   d9e54:	f000 8082 	beq.w	d9f5c <pow+0x1c4>
   d9e58:	f04f 0800 	mov.w	r8, #0
   d9e5c:	f04f 0900 	mov.w	r9, #0
   d9e60:	ec51 0b18 	vmov	r0, r1, d8
   d9e64:	4642      	mov	r2, r8
   d9e66:	464b      	mov	r3, r9
   d9e68:	f002 ff94 	bl	dcd94 <__aeabi_dcmpeq>
   d9e6c:	2800      	cmp	r0, #0
   d9e6e:	d0e0      	beq.n	d9e32 <pow+0x9a>
   d9e70:	ec47 6b10 	vmov	d0, r6, r7
   d9e74:	f002 f896 	bl	dbfa4 <finite>
   d9e78:	2800      	cmp	r0, #0
   d9e7a:	d0da      	beq.n	d9e32 <pow+0x9a>
   d9e7c:	ec45 4b10 	vmov	d0, r4, r5
   d9e80:	f002 f890 	bl	dbfa4 <finite>
   d9e84:	2800      	cmp	r0, #0
   d9e86:	d0d4      	beq.n	d9e32 <pow+0x9a>
   d9e88:	4b77      	ldr	r3, [pc, #476]	; (da068 <pow+0x2d0>)
   d9e8a:	4a78      	ldr	r2, [pc, #480]	; (da06c <pow+0x2d4>)
   d9e8c:	f993 3000 	ldrsb.w	r3, [r3]
   d9e90:	9203      	str	r2, [sp, #12]
   d9e92:	2104      	movs	r1, #4
   d9e94:	2200      	movs	r2, #0
   d9e96:	2b02      	cmp	r3, #2
   d9e98:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9e9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9ea0:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d9ea4:	9102      	str	r1, [sp, #8]
   d9ea6:	920a      	str	r2, [sp, #40]	; 0x28
   d9ea8:	d004      	beq.n	d9eb4 <pow+0x11c>
   d9eaa:	a802      	add	r0, sp, #8
   d9eac:	f002 f886 	bl	dbfbc <matherr>
   d9eb0:	2800      	cmp	r0, #0
   d9eb2:	d14a      	bne.n	d9f4a <pow+0x1b2>
   d9eb4:	f7fe fb10 	bl	d84d8 <__errno>
   d9eb8:	2322      	movs	r3, #34	; 0x22
   d9eba:	6003      	str	r3, [r0, #0]
   d9ebc:	e045      	b.n	d9f4a <pow+0x1b2>
   d9ebe:	ec45 4b10 	vmov	d0, r4, r5
   d9ec2:	f002 f86f 	bl	dbfa4 <finite>
   d9ec6:	2800      	cmp	r0, #0
   d9ec8:	d0b3      	beq.n	d9e32 <pow+0x9a>
   d9eca:	4652      	mov	r2, sl
   d9ecc:	465b      	mov	r3, fp
   d9ece:	4620      	mov	r0, r4
   d9ed0:	4629      	mov	r1, r5
   d9ed2:	f002 ff69 	bl	dcda8 <__aeabi_dcmplt>
   d9ed6:	2800      	cmp	r0, #0
   d9ed8:	d0ab      	beq.n	d9e32 <pow+0x9a>
   d9eda:	4b63      	ldr	r3, [pc, #396]	; (da068 <pow+0x2d0>)
   d9edc:	9900      	ldr	r1, [sp, #0]
   d9ede:	4a63      	ldr	r2, [pc, #396]	; (da06c <pow+0x2d4>)
   d9ee0:	f993 3000 	ldrsb.w	r3, [r3]
   d9ee4:	910a      	str	r1, [sp, #40]	; 0x28
   d9ee6:	2101      	movs	r1, #1
   d9ee8:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9eec:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9ef0:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d9ef4:	2b00      	cmp	r3, #0
   d9ef6:	d16f      	bne.n	d9fd8 <pow+0x240>
   d9ef8:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d9efc:	a802      	add	r0, sp, #8
   d9efe:	f002 f85d 	bl	dbfbc <matherr>
   d9f02:	2800      	cmp	r0, #0
   d9f04:	d06e      	beq.n	d9fe4 <pow+0x24c>
   d9f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9f08:	b32b      	cbz	r3, d9f56 <pow+0x1be>
   d9f0a:	e020      	b.n	d9f4e <pow+0x1b6>
   d9f0c:	2200      	movs	r2, #0
   d9f0e:	2300      	movs	r3, #0
   d9f10:	4620      	mov	r0, r4
   d9f12:	4629      	mov	r1, r5
   d9f14:	f002 ff3e 	bl	dcd94 <__aeabi_dcmpeq>
   d9f18:	2800      	cmp	r0, #0
   d9f1a:	d08a      	beq.n	d9e32 <pow+0x9a>
   d9f1c:	ed9f 8b4e 	vldr	d8, [pc, #312]	; da058 <pow+0x2c0>
   d9f20:	4b52      	ldr	r3, [pc, #328]	; (da06c <pow+0x2d4>)
   d9f22:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d9f26:	2201      	movs	r2, #1
   d9f28:	f1b9 0f02 	cmp.w	r9, #2
   d9f2c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9f30:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9f34:	ed8d 8b08 	vstr	d8, [sp, #32]
   d9f38:	9202      	str	r2, [sp, #8]
   d9f3a:	9303      	str	r3, [sp, #12]
   d9f3c:	f43f af79 	beq.w	d9e32 <pow+0x9a>
   d9f40:	a802      	add	r0, sp, #8
   d9f42:	f002 f83b 	bl	dbfbc <matherr>
   d9f46:	2800      	cmp	r0, #0
   d9f48:	d051      	beq.n	d9fee <pow+0x256>
   d9f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9f4c:	b11b      	cbz	r3, d9f56 <pow+0x1be>
   d9f4e:	f7fe fac3 	bl	d84d8 <__errno>
   d9f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9f54:	6003      	str	r3, [r0, #0]
   d9f56:	ed9d 8b08 	vldr	d8, [sp, #32]
   d9f5a:	e76a      	b.n	d9e32 <pow+0x9a>
   d9f5c:	ec47 6b10 	vmov	d0, r6, r7
   d9f60:	f002 f820 	bl	dbfa4 <finite>
   d9f64:	2800      	cmp	r0, #0
   d9f66:	f43f af77 	beq.w	d9e58 <pow+0xc0>
   d9f6a:	ec45 4b10 	vmov	d0, r4, r5
   d9f6e:	f002 f819 	bl	dbfa4 <finite>
   d9f72:	2800      	cmp	r0, #0
   d9f74:	f43f af70 	beq.w	d9e58 <pow+0xc0>
   d9f78:	ec53 2b18 	vmov	r2, r3, d8
   d9f7c:	ee18 0a10 	vmov	r0, s16
   d9f80:	4619      	mov	r1, r3
   d9f82:	f002 ff39 	bl	dcdf8 <__aeabi_dcmpun>
   d9f86:	4b38      	ldr	r3, [pc, #224]	; (da068 <pow+0x2d0>)
   d9f88:	2800      	cmp	r0, #0
   d9f8a:	f040 8096 	bne.w	da0ba <pow+0x322>
   d9f8e:	f993 8000 	ldrsb.w	r8, [r3]
   d9f92:	900a      	str	r0, [sp, #40]	; 0x28
   d9f94:	2303      	movs	r3, #3
   d9f96:	9302      	str	r3, [sp, #8]
   d9f98:	4b34      	ldr	r3, [pc, #208]	; (da06c <pow+0x2d4>)
   d9f9a:	9303      	str	r3, [sp, #12]
   d9f9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9fa0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9fa4:	f1b8 0f00 	cmp.w	r8, #0
   d9fa8:	d126      	bne.n	d9ff8 <pow+0x260>
   d9faa:	f8df 90d0 	ldr.w	r9, [pc, #208]	; da07c <pow+0x2e4>
   d9fae:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d9fb2:	4652      	mov	r2, sl
   d9fb4:	465b      	mov	r3, fp
   d9fb6:	4630      	mov	r0, r6
   d9fb8:	4639      	mov	r1, r7
   d9fba:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d9fbe:	f002 fef3 	bl	dcda8 <__aeabi_dcmplt>
   d9fc2:	bb48      	cbnz	r0, da018 <pow+0x280>
   d9fc4:	a802      	add	r0, sp, #8
   d9fc6:	f001 fff9 	bl	dbfbc <matherr>
   d9fca:	2800      	cmp	r0, #0
   d9fcc:	d19b      	bne.n	d9f06 <pow+0x16e>
   d9fce:	f7fe fa83 	bl	d84d8 <__errno>
   d9fd2:	2322      	movs	r3, #34	; 0x22
   d9fd4:	6003      	str	r3, [r0, #0]
   d9fd6:	e796      	b.n	d9f06 <pow+0x16e>
   d9fd8:	4925      	ldr	r1, [pc, #148]	; (da070 <pow+0x2d8>)
   d9fda:	2000      	movs	r0, #0
   d9fdc:	2b02      	cmp	r3, #2
   d9fde:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d9fe2:	d18b      	bne.n	d9efc <pow+0x164>
   d9fe4:	f7fe fa78 	bl	d84d8 <__errno>
   d9fe8:	2321      	movs	r3, #33	; 0x21
   d9fea:	6003      	str	r3, [r0, #0]
   d9fec:	e78b      	b.n	d9f06 <pow+0x16e>
   d9fee:	f7fe fa73 	bl	d84d8 <__errno>
   d9ff2:	2321      	movs	r3, #33	; 0x21
   d9ff4:	6003      	str	r3, [r0, #0]
   d9ff6:	e7a8      	b.n	d9f4a <pow+0x1b2>
   d9ff8:	ed9f 7b19 	vldr	d7, [pc, #100]	; da060 <pow+0x2c8>
   d9ffc:	4652      	mov	r2, sl
   d9ffe:	465b      	mov	r3, fp
   da000:	4630      	mov	r0, r6
   da002:	4639      	mov	r1, r7
   da004:	ed8d 7b08 	vstr	d7, [sp, #32]
   da008:	f002 fece 	bl	dcda8 <__aeabi_dcmplt>
   da00c:	2800      	cmp	r0, #0
   da00e:	d137      	bne.n	da080 <pow+0x2e8>
   da010:	f1b8 0f02 	cmp.w	r8, #2
   da014:	d0db      	beq.n	d9fce <pow+0x236>
   da016:	e7d5      	b.n	d9fc4 <pow+0x22c>
   da018:	4b16      	ldr	r3, [pc, #88]	; (da074 <pow+0x2dc>)
   da01a:	2200      	movs	r2, #0
   da01c:	4620      	mov	r0, r4
   da01e:	4629      	mov	r1, r5
   da020:	f002 fc50 	bl	dc8c4 <__aeabi_dmul>
   da024:	4602      	mov	r2, r0
   da026:	460b      	mov	r3, r1
   da028:	ec43 2b10 	vmov	d0, r2, r3
   da02c:	e9cd 2300 	strd	r2, r3, [sp]
   da030:	f001 ffce 	bl	dbfd0 <rint>
   da034:	e9dd 2300 	ldrd	r2, r3, [sp]
   da038:	ec51 0b10 	vmov	r0, r1, d0
   da03c:	f002 feaa 	bl	dcd94 <__aeabi_dcmpeq>
   da040:	2800      	cmp	r0, #0
   da042:	d136      	bne.n	da0b2 <pow+0x31a>
   da044:	4b0c      	ldr	r3, [pc, #48]	; (da078 <pow+0x2e0>)
   da046:	4908      	ldr	r1, [pc, #32]	; (da068 <pow+0x2d0>)
   da048:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   da04c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   da050:	f991 8000 	ldrsb.w	r8, [r1]
   da054:	e7dc      	b.n	da010 <pow+0x278>
   da056:	bf00      	nop
   da058:	00000000 	.word	0x00000000
   da05c:	3ff00000 	.word	0x3ff00000
   da060:	00000000 	.word	0x00000000
   da064:	7ff00000 	.word	0x7ff00000
   da068:	2003e3d4 	.word	0x2003e3d4
   da06c:	000de8e0 	.word	0x000de8e0
   da070:	fff00000 	.word	0xfff00000
   da074:	3fe00000 	.word	0x3fe00000
   da078:	c7efffff 	.word	0xc7efffff
   da07c:	47efffff 	.word	0x47efffff
   da080:	4b1c      	ldr	r3, [pc, #112]	; (da0f4 <pow+0x35c>)
   da082:	2200      	movs	r2, #0
   da084:	4620      	mov	r0, r4
   da086:	4629      	mov	r1, r5
   da088:	f002 fc1c 	bl	dc8c4 <__aeabi_dmul>
   da08c:	4602      	mov	r2, r0
   da08e:	460b      	mov	r3, r1
   da090:	ec43 2b10 	vmov	d0, r2, r3
   da094:	e9cd 2300 	strd	r2, r3, [sp]
   da098:	f001 ff9a 	bl	dbfd0 <rint>
   da09c:	e9dd 2300 	ldrd	r2, r3, [sp]
   da0a0:	ec51 0b10 	vmov	r0, r1, d0
   da0a4:	f002 fe76 	bl	dcd94 <__aeabi_dcmpeq>
   da0a8:	b918      	cbnz	r0, da0b2 <pow+0x31a>
   da0aa:	4b13      	ldr	r3, [pc, #76]	; (da0f8 <pow+0x360>)
   da0ac:	2200      	movs	r2, #0
   da0ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
   da0b2:	4b12      	ldr	r3, [pc, #72]	; (da0fc <pow+0x364>)
   da0b4:	f993 8000 	ldrsb.w	r8, [r3]
   da0b8:	e7aa      	b.n	da010 <pow+0x278>
   da0ba:	f993 9000 	ldrsb.w	r9, [r3]
   da0be:	4b10      	ldr	r3, [pc, #64]	; (da100 <pow+0x368>)
   da0c0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   da0c4:	2201      	movs	r2, #1
   da0c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da0ca:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da0ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
   da0d2:	f1b9 0f00 	cmp.w	r9, #0
   da0d6:	f43f af0f 	beq.w	d9ef8 <pow+0x160>
   da0da:	4652      	mov	r2, sl
   da0dc:	465b      	mov	r3, fp
   da0de:	4650      	mov	r0, sl
   da0e0:	4659      	mov	r1, fp
   da0e2:	f002 fd19 	bl	dcb18 <__aeabi_ddiv>
   da0e6:	f1b9 0f02 	cmp.w	r9, #2
   da0ea:	e9cd 0108 	strd	r0, r1, [sp, #32]
   da0ee:	f43f af79 	beq.w	d9fe4 <pow+0x24c>
   da0f2:	e703      	b.n	d9efc <pow+0x164>
   da0f4:	3fe00000 	.word	0x3fe00000
   da0f8:	fff00000 	.word	0xfff00000
   da0fc:	2003e3d4 	.word	0x2003e3d4
   da100:	000de8e0 	.word	0x000de8e0

000da104 <atan2f>:
   da104:	f000 bf9e 	b.w	db044 <__ieee754_atan2f>

000da108 <__ieee754_atan2>:
   da108:	ec51 0b11 	vmov	r0, r1, d1
   da10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da110:	4243      	negs	r3, r0
   da112:	4e79      	ldr	r6, [pc, #484]	; (da2f8 <__ieee754_atan2+0x1f0>)
   da114:	4303      	orrs	r3, r0
   da116:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   da11a:	ea4c 73d3 	orr.w	r3, ip, r3, lsr #31
   da11e:	42b3      	cmp	r3, r6
   da120:	ec55 4b10 	vmov	r4, r5, d0
   da124:	b082      	sub	sp, #8
   da126:	d847      	bhi.n	da1b8 <__ieee754_atan2+0xb0>
   da128:	4263      	negs	r3, r4
   da12a:	4323      	orrs	r3, r4
   da12c:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   da130:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   da134:	42b3      	cmp	r3, r6
   da136:	ee10 ea10 	vmov	lr, s0
   da13a:	46a9      	mov	r9, r5
   da13c:	d83c      	bhi.n	da1b8 <__ieee754_atan2+0xb0>
   da13e:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   da142:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   da146:	4303      	orrs	r3, r0
   da148:	d04c      	beq.n	da1e4 <__ieee754_atan2+0xdc>
   da14a:	ea4f 78a1 	mov.w	r8, r1, asr #30
   da14e:	f008 0802 	and.w	r8, r8, #2
   da152:	ea5a 0304 	orrs.w	r3, sl, r4
   da156:	ea48 78d5 	orr.w	r8, r8, r5, lsr #31
   da15a:	d038      	beq.n	da1ce <__ieee754_atan2+0xc6>
   da15c:	ea5c 0300 	orrs.w	r3, ip, r0
   da160:	d048      	beq.n	da1f4 <__ieee754_atan2+0xec>
   da162:	45b4      	cmp	ip, r6
   da164:	d05d      	beq.n	da222 <__ieee754_atan2+0x11a>
   da166:	45b2      	cmp	sl, r6
   da168:	d044      	beq.n	da1f4 <__ieee754_atan2+0xec>
   da16a:	ebaa 0c0c 	sub.w	ip, sl, ip
   da16e:	f1bc 7f74 	cmp.w	ip, #63963136	; 0x3d00000
   da172:	ea4f 532c 	mov.w	r3, ip, asr #20
   da176:	da4f      	bge.n	da218 <__ieee754_atan2+0x110>
   da178:	2900      	cmp	r1, #0
   da17a:	da61      	bge.n	da240 <__ieee754_atan2+0x138>
   da17c:	333c      	adds	r3, #60	; 0x3c
   da17e:	da5f      	bge.n	da240 <__ieee754_atan2+0x138>
   da180:	ed9f 7b4f 	vldr	d7, [pc, #316]	; da2c0 <__ieee754_atan2+0x1b8>
   da184:	ed8d 7b00 	vstr	d7, [sp]
   da188:	f1b8 0f01 	cmp.w	r8, #1
   da18c:	d078      	beq.n	da280 <__ieee754_atan2+0x178>
   da18e:	f1b8 0f02 	cmp.w	r8, #2
   da192:	d064      	beq.n	da25e <__ieee754_atan2+0x156>
   da194:	f1b8 0f00 	cmp.w	r8, #0
   da198:	d014      	beq.n	da1c4 <__ieee754_atan2+0xbc>
   da19a:	a34b      	add	r3, pc, #300	; (adr r3, da2c8 <__ieee754_atan2+0x1c0>)
   da19c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da1a0:	e9dd 0100 	ldrd	r0, r1, [sp]
   da1a4:	f002 f9d6 	bl	dc554 <__aeabi_dsub>
   da1a8:	a349      	add	r3, pc, #292	; (adr r3, da2d0 <__ieee754_atan2+0x1c8>)
   da1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   da1ae:	f002 f9d1 	bl	dc554 <__aeabi_dsub>
   da1b2:	e9cd 0100 	strd	r0, r1, [sp]
   da1b6:	e005      	b.n	da1c4 <__ieee754_atan2+0xbc>
   da1b8:	4622      	mov	r2, r4
   da1ba:	462b      	mov	r3, r5
   da1bc:	f002 f9cc 	bl	dc558 <__adddf3>
   da1c0:	e9cd 0100 	strd	r0, r1, [sp]
   da1c4:	ed9d 0b00 	vldr	d0, [sp]
   da1c8:	b002      	add	sp, #8
   da1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da1ce:	f1b8 0f02 	cmp.w	r8, #2
   da1d2:	d017      	beq.n	da204 <__ieee754_atan2+0xfc>
   da1d4:	f1b8 0f03 	cmp.w	r8, #3
   da1d8:	d109      	bne.n	da1ee <__ieee754_atan2+0xe6>
   da1da:	ed9f 7b3f 	vldr	d7, [pc, #252]	; da2d8 <__ieee754_atan2+0x1d0>
   da1de:	ed8d 7b00 	vstr	d7, [sp]
   da1e2:	e7ef      	b.n	da1c4 <__ieee754_atan2+0xbc>
   da1e4:	b002      	add	sp, #8
   da1e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da1ea:	f001 bd1d 	b.w	dbc28 <atan>
   da1ee:	ed8d 0b00 	vstr	d0, [sp]
   da1f2:	e7e7      	b.n	da1c4 <__ieee754_atan2+0xbc>
   da1f4:	f1b9 0f00 	cmp.w	r9, #0
   da1f8:	db09      	blt.n	da20e <__ieee754_atan2+0x106>
   da1fa:	ed9f 7b39 	vldr	d7, [pc, #228]	; da2e0 <__ieee754_atan2+0x1d8>
   da1fe:	ed8d 7b00 	vstr	d7, [sp]
   da202:	e7df      	b.n	da1c4 <__ieee754_atan2+0xbc>
   da204:	ed9f 7b32 	vldr	d7, [pc, #200]	; da2d0 <__ieee754_atan2+0x1c8>
   da208:	ed8d 7b00 	vstr	d7, [sp]
   da20c:	e7da      	b.n	da1c4 <__ieee754_atan2+0xbc>
   da20e:	ed9f 7b36 	vldr	d7, [pc, #216]	; da2e8 <__ieee754_atan2+0x1e0>
   da212:	ed8d 7b00 	vstr	d7, [sp]
   da216:	e7d5      	b.n	da1c4 <__ieee754_atan2+0xbc>
   da218:	ed9f 7b31 	vldr	d7, [pc, #196]	; da2e0 <__ieee754_atan2+0x1d8>
   da21c:	ed8d 7b00 	vstr	d7, [sp]
   da220:	e7b2      	b.n	da188 <__ieee754_atan2+0x80>
   da222:	45e2      	cmp	sl, ip
   da224:	f108 38ff 	add.w	r8, r8, #4294967295
   da228:	d032      	beq.n	da290 <__ieee754_atan2+0x188>
   da22a:	f1b8 0f02 	cmp.w	r8, #2
   da22e:	d83a      	bhi.n	da2a6 <__ieee754_atan2+0x19e>
   da230:	4b32      	ldr	r3, [pc, #200]	; (da2fc <__ieee754_atan2+0x1f4>)
   da232:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   da236:	ed98 7b00 	vldr	d7, [r8]
   da23a:	ed8d 7b00 	vstr	d7, [sp]
   da23e:	e7c1      	b.n	da1c4 <__ieee754_atan2+0xbc>
   da240:	4602      	mov	r2, r0
   da242:	460b      	mov	r3, r1
   da244:	4620      	mov	r0, r4
   da246:	4629      	mov	r1, r5
   da248:	f002 fc66 	bl	dcb18 <__aeabi_ddiv>
   da24c:	ec41 0b10 	vmov	d0, r0, r1
   da250:	f001 fe9e 	bl	dbf90 <fabs>
   da254:	f001 fce8 	bl	dbc28 <atan>
   da258:	ed8d 0b00 	vstr	d0, [sp]
   da25c:	e794      	b.n	da188 <__ieee754_atan2+0x80>
   da25e:	a31a      	add	r3, pc, #104	; (adr r3, da2c8 <__ieee754_atan2+0x1c0>)
   da260:	e9d3 2300 	ldrd	r2, r3, [r3]
   da264:	e9dd 0100 	ldrd	r0, r1, [sp]
   da268:	f002 f974 	bl	dc554 <__aeabi_dsub>
   da26c:	4602      	mov	r2, r0
   da26e:	460b      	mov	r3, r1
   da270:	a117      	add	r1, pc, #92	; (adr r1, da2d0 <__ieee754_atan2+0x1c8>)
   da272:	e9d1 0100 	ldrd	r0, r1, [r1]
   da276:	f002 f96d 	bl	dc554 <__aeabi_dsub>
   da27a:	e9cd 0100 	strd	r0, r1, [sp]
   da27e:	e7a1      	b.n	da1c4 <__ieee754_atan2+0xbc>
   da280:	e9dd 2300 	ldrd	r2, r3, [sp]
   da284:	9901      	ldr	r1, [sp, #4]
   da286:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da28a:	e9cd 2300 	strd	r2, r3, [sp]
   da28e:	e799      	b.n	da1c4 <__ieee754_atan2+0xbc>
   da290:	f1b8 0f02 	cmp.w	r8, #2
   da294:	d80c      	bhi.n	da2b0 <__ieee754_atan2+0x1a8>
   da296:	4b1a      	ldr	r3, [pc, #104]	; (da300 <__ieee754_atan2+0x1f8>)
   da298:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   da29c:	ed98 7b00 	vldr	d7, [r8]
   da2a0:	ed8d 7b00 	vstr	d7, [sp]
   da2a4:	e78e      	b.n	da1c4 <__ieee754_atan2+0xbc>
   da2a6:	ed9f 7b06 	vldr	d7, [pc, #24]	; da2c0 <__ieee754_atan2+0x1b8>
   da2aa:	ed8d 7b00 	vstr	d7, [sp]
   da2ae:	e789      	b.n	da1c4 <__ieee754_atan2+0xbc>
   da2b0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; da2f0 <__ieee754_atan2+0x1e8>
   da2b4:	ed8d 7b00 	vstr	d7, [sp]
   da2b8:	e784      	b.n	da1c4 <__ieee754_atan2+0xbc>
   da2ba:	bf00      	nop
   da2bc:	f3af 8000 	nop.w
	...
   da2c8:	33145c07 	.word	0x33145c07
   da2cc:	3ca1a626 	.word	0x3ca1a626
   da2d0:	54442d18 	.word	0x54442d18
   da2d4:	400921fb 	.word	0x400921fb
   da2d8:	54442d18 	.word	0x54442d18
   da2dc:	c00921fb 	.word	0xc00921fb
   da2e0:	54442d18 	.word	0x54442d18
   da2e4:	3ff921fb 	.word	0x3ff921fb
   da2e8:	54442d18 	.word	0x54442d18
   da2ec:	bff921fb 	.word	0xbff921fb
   da2f0:	54442d18 	.word	0x54442d18
   da2f4:	3fe921fb 	.word	0x3fe921fb
   da2f8:	7ff00000 	.word	0x7ff00000
   da2fc:	000de900 	.word	0x000de900
   da300:	000de8e8 	.word	0x000de8e8
   da304:	00000000 	.word	0x00000000

000da308 <__ieee754_pow>:
   da308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da30c:	ec57 6b11 	vmov	r6, r7, d1
   da310:	ed2d 8b0a 	vpush	{d8-d12}
   da314:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   da318:	ea5a 0206 	orrs.w	r2, sl, r6
   da31c:	b089      	sub	sp, #36	; 0x24
   da31e:	d03d      	beq.n	da39c <__ieee754_pow+0x94>
   da320:	ec55 4b10 	vmov	r4, r5, d0
   da324:	4976      	ldr	r1, [pc, #472]	; (da500 <__ieee754_pow+0x1f8>)
   da326:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   da32a:	4588      	cmp	r8, r1
   da32c:	ee10 2a10 	vmov	r2, s0
   da330:	46a9      	mov	r9, r5
   da332:	dc2c      	bgt.n	da38e <__ieee754_pow+0x86>
   da334:	ee11 3a10 	vmov	r3, s2
   da338:	46bb      	mov	fp, r7
   da33a:	d03a      	beq.n	da3b2 <__ieee754_pow+0xaa>
   da33c:	458a      	cmp	sl, r1
   da33e:	dc26      	bgt.n	da38e <__ieee754_pow+0x86>
   da340:	496f      	ldr	r1, [pc, #444]	; (da500 <__ieee754_pow+0x1f8>)
   da342:	458a      	cmp	sl, r1
   da344:	d021      	beq.n	da38a <__ieee754_pow+0x82>
   da346:	f1b9 0f00 	cmp.w	r9, #0
   da34a:	db3d      	blt.n	da3c8 <__ieee754_pow+0xc0>
   da34c:	2100      	movs	r1, #0
   da34e:	9103      	str	r1, [sp, #12]
   da350:	2b00      	cmp	r3, #0
   da352:	d155      	bne.n	da400 <__ieee754_pow+0xf8>
   da354:	4b6a      	ldr	r3, [pc, #424]	; (da500 <__ieee754_pow+0x1f8>)
   da356:	459a      	cmp	sl, r3
   da358:	f000 80a8 	beq.w	da4ac <__ieee754_pow+0x1a4>
   da35c:	4b69      	ldr	r3, [pc, #420]	; (da504 <__ieee754_pow+0x1fc>)
   da35e:	459a      	cmp	sl, r3
   da360:	f000 80b6 	beq.w	da4d0 <__ieee754_pow+0x1c8>
   da364:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   da368:	f000 8501 	beq.w	dad6e <__ieee754_pow+0xa66>
   da36c:	4b66      	ldr	r3, [pc, #408]	; (da508 <__ieee754_pow+0x200>)
   da36e:	459b      	cmp	fp, r3
   da370:	d146      	bne.n	da400 <__ieee754_pow+0xf8>
   da372:	f1b9 0f00 	cmp.w	r9, #0
   da376:	db43      	blt.n	da400 <__ieee754_pow+0xf8>
   da378:	ec45 4b10 	vmov	d0, r4, r5
   da37c:	b009      	add	sp, #36	; 0x24
   da37e:	ecbd 8b0a 	vpop	{d8-d12}
   da382:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da386:	f000 bd99 	b.w	daebc <__ieee754_sqrt>
   da38a:	2b00      	cmp	r3, #0
   da38c:	d0db      	beq.n	da346 <__ieee754_pow+0x3e>
   da38e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   da392:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   da396:	ea58 0302 	orrs.w	r3, r8, r2
   da39a:	d10d      	bne.n	da3b8 <__ieee754_pow+0xb0>
   da39c:	ed9f 7b54 	vldr	d7, [pc, #336]	; da4f0 <__ieee754_pow+0x1e8>
   da3a0:	ed8d 7b00 	vstr	d7, [sp]
   da3a4:	ed9d 0b00 	vldr	d0, [sp]
   da3a8:	b009      	add	sp, #36	; 0x24
   da3aa:	ecbd 8b0a 	vpop	{d8-d12}
   da3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da3b2:	b90c      	cbnz	r4, da3b8 <__ieee754_pow+0xb0>
   da3b4:	45c2      	cmp	sl, r8
   da3b6:	ddc3      	ble.n	da340 <__ieee754_pow+0x38>
   da3b8:	4854      	ldr	r0, [pc, #336]	; (da50c <__ieee754_pow+0x204>)
   da3ba:	b009      	add	sp, #36	; 0x24
   da3bc:	ecbd 8b0a 	vpop	{d8-d12}
   da3c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da3c4:	f001 bdfc 	b.w	dbfc0 <nan>
   da3c8:	4951      	ldr	r1, [pc, #324]	; (da510 <__ieee754_pow+0x208>)
   da3ca:	458a      	cmp	sl, r1
   da3cc:	f300 8087 	bgt.w	da4de <__ieee754_pow+0x1d6>
   da3d0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   da3d4:	458a      	cmp	sl, r1
   da3d6:	dd0f      	ble.n	da3f8 <__ieee754_pow+0xf0>
   da3d8:	ea4f 512a 	mov.w	r1, sl, asr #20
   da3dc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   da3e0:	2914      	cmp	r1, #20
   da3e2:	f340 84ce 	ble.w	dad82 <__ieee754_pow+0xa7a>
   da3e6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   da3ea:	fa23 f001 	lsr.w	r0, r3, r1
   da3ee:	fa00 f101 	lsl.w	r1, r0, r1
   da3f2:	4299      	cmp	r1, r3
   da3f4:	f000 8520 	beq.w	dae38 <__ieee754_pow+0xb30>
   da3f8:	2100      	movs	r1, #0
   da3fa:	9103      	str	r1, [sp, #12]
   da3fc:	2b00      	cmp	r3, #0
   da3fe:	d0ad      	beq.n	da35c <__ieee754_pow+0x54>
   da400:	ec45 4b10 	vmov	d0, r4, r5
   da404:	9206      	str	r2, [sp, #24]
   da406:	f001 fdc3 	bl	dbf90 <fabs>
   da40a:	9a06      	ldr	r2, [sp, #24]
   da40c:	ed8d 0b00 	vstr	d0, [sp]
   da410:	bb5a      	cbnz	r2, da46a <__ieee754_pow+0x162>
   da412:	f1b8 0f00 	cmp.w	r8, #0
   da416:	d004      	beq.n	da422 <__ieee754_pow+0x11a>
   da418:	4b3a      	ldr	r3, [pc, #232]	; (da504 <__ieee754_pow+0x1fc>)
   da41a:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   da41e:	429a      	cmp	r2, r3
   da420:	d123      	bne.n	da46a <__ieee754_pow+0x162>
   da422:	f1bb 0f00 	cmp.w	fp, #0
   da426:	da07      	bge.n	da438 <__ieee754_pow+0x130>
   da428:	e9dd 2300 	ldrd	r2, r3, [sp]
   da42c:	4935      	ldr	r1, [pc, #212]	; (da504 <__ieee754_pow+0x1fc>)
   da42e:	2000      	movs	r0, #0
   da430:	f002 fb72 	bl	dcb18 <__aeabi_ddiv>
   da434:	e9cd 0100 	strd	r0, r1, [sp]
   da438:	f1b9 0f00 	cmp.w	r9, #0
   da43c:	dab2      	bge.n	da3a4 <__ieee754_pow+0x9c>
   da43e:	9b03      	ldr	r3, [sp, #12]
   da440:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   da444:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   da448:	ea58 0303 	orrs.w	r3, r8, r3
   da44c:	f040 84be 	bne.w	dadcc <__ieee754_pow+0xac4>
   da450:	e9dd 2300 	ldrd	r2, r3, [sp]
   da454:	4610      	mov	r0, r2
   da456:	4619      	mov	r1, r3
   da458:	f002 f87c 	bl	dc554 <__aeabi_dsub>
   da45c:	4602      	mov	r2, r0
   da45e:	460b      	mov	r3, r1
   da460:	f002 fb5a 	bl	dcb18 <__aeabi_ddiv>
   da464:	e9cd 0100 	strd	r0, r1, [sp]
   da468:	e79c      	b.n	da3a4 <__ieee754_pow+0x9c>
   da46a:	9a03      	ldr	r2, [sp, #12]
   da46c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   da470:	3b01      	subs	r3, #1
   da472:	9306      	str	r3, [sp, #24]
   da474:	4313      	orrs	r3, r2
   da476:	d035      	beq.n	da4e4 <__ieee754_pow+0x1dc>
   da478:	4b26      	ldr	r3, [pc, #152]	; (da514 <__ieee754_pow+0x20c>)
   da47a:	459a      	cmp	sl, r3
   da47c:	dd4e      	ble.n	da51c <__ieee754_pow+0x214>
   da47e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   da482:	459a      	cmp	sl, r3
   da484:	4b24      	ldr	r3, [pc, #144]	; (da518 <__ieee754_pow+0x210>)
   da486:	f340 83ed 	ble.w	dac64 <__ieee754_pow+0x95c>
   da48a:	4598      	cmp	r8, r3
   da48c:	f340 836b 	ble.w	dab66 <__ieee754_pow+0x85e>
   da490:	f1bb 0f00 	cmp.w	fp, #0
   da494:	f340 836b 	ble.w	dab6e <__ieee754_pow+0x866>
   da498:	a317      	add	r3, pc, #92	; (adr r3, da4f8 <__ieee754_pow+0x1f0>)
   da49a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da49e:	4610      	mov	r0, r2
   da4a0:	4619      	mov	r1, r3
   da4a2:	f002 fa0f 	bl	dc8c4 <__aeabi_dmul>
   da4a6:	e9cd 0100 	strd	r0, r1, [sp]
   da4aa:	e77b      	b.n	da3a4 <__ieee754_pow+0x9c>
   da4ac:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   da4b0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   da4b4:	4313      	orrs	r3, r2
   da4b6:	f43f af71 	beq.w	da39c <__ieee754_pow+0x94>
   da4ba:	4b17      	ldr	r3, [pc, #92]	; (da518 <__ieee754_pow+0x210>)
   da4bc:	4598      	cmp	r8, r3
   da4be:	f340 8388 	ble.w	dabd2 <__ieee754_pow+0x8ca>
   da4c2:	f1bb 0f00 	cmp.w	fp, #0
   da4c6:	f2c0 8352 	blt.w	dab6e <__ieee754_pow+0x866>
   da4ca:	e9cd 6700 	strd	r6, r7, [sp]
   da4ce:	e769      	b.n	da3a4 <__ieee754_pow+0x9c>
   da4d0:	f1bb 0f00 	cmp.w	fp, #0
   da4d4:	f2c0 8441 	blt.w	dad5a <__ieee754_pow+0xa52>
   da4d8:	e9cd 4500 	strd	r4, r5, [sp]
   da4dc:	e762      	b.n	da3a4 <__ieee754_pow+0x9c>
   da4de:	2102      	movs	r1, #2
   da4e0:	9103      	str	r1, [sp, #12]
   da4e2:	e735      	b.n	da350 <__ieee754_pow+0x48>
   da4e4:	4622      	mov	r2, r4
   da4e6:	462b      	mov	r3, r5
   da4e8:	e7b4      	b.n	da454 <__ieee754_pow+0x14c>
   da4ea:	bf00      	nop
   da4ec:	f3af 8000 	nop.w
   da4f0:	00000000 	.word	0x00000000
   da4f4:	3ff00000 	.word	0x3ff00000
   da4f8:	8800759c 	.word	0x8800759c
   da4fc:	7e37e43c 	.word	0x7e37e43c
   da500:	7ff00000 	.word	0x7ff00000
   da504:	3ff00000 	.word	0x3ff00000
   da508:	3fe00000 	.word	0x3fe00000
   da50c:	000de918 	.word	0x000de918
   da510:	433fffff 	.word	0x433fffff
   da514:	41e00000 	.word	0x41e00000
   da518:	3fefffff 	.word	0x3fefffff
   da51c:	4be4      	ldr	r3, [pc, #912]	; (da8b0 <__ieee754_pow+0x5a8>)
   da51e:	ea09 0303 	and.w	r3, r9, r3
   da522:	2b00      	cmp	r3, #0
   da524:	f040 8416 	bne.w	dad54 <__ieee754_pow+0xa4c>
   da528:	e9dd 0100 	ldrd	r0, r1, [sp]
   da52c:	4be1      	ldr	r3, [pc, #900]	; (da8b4 <__ieee754_pow+0x5ac>)
   da52e:	2200      	movs	r2, #0
   da530:	f002 f9c8 	bl	dc8c4 <__aeabi_dmul>
   da534:	e9cd 0100 	strd	r0, r1, [sp]
   da538:	f8dd 8004 	ldr.w	r8, [sp, #4]
   da53c:	f06f 0034 	mvn.w	r0, #52	; 0x34
   da540:	ea4f 5328 	mov.w	r3, r8, asr #20
   da544:	49dc      	ldr	r1, [pc, #880]	; (da8b8 <__ieee754_pow+0x5b0>)
   da546:	f3c8 0213 	ubfx	r2, r8, #0, #20
   da54a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   da54e:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   da552:	1818      	adds	r0, r3, r0
   da554:	428a      	cmp	r2, r1
   da556:	9007      	str	r0, [sp, #28]
   da558:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   da55c:	f340 83e9 	ble.w	dad32 <__ieee754_pow+0xa2a>
   da560:	4bd6      	ldr	r3, [pc, #856]	; (da8bc <__ieee754_pow+0x5b4>)
   da562:	429a      	cmp	r2, r3
   da564:	f340 843e 	ble.w	dade4 <__ieee754_pow+0xadc>
   da568:	ed9f 7bbb 	vldr	d7, [pc, #748]	; da858 <__ieee754_pow+0x550>
   da56c:	eeb0 ba47 	vmov.f32	s22, s14
   da570:	eef0 ba67 	vmov.f32	s23, s15
   da574:	eeb0 ca47 	vmov.f32	s24, s14
   da578:	eef0 ca67 	vmov.f32	s25, s15
   da57c:	ed9f 7bb8 	vldr	d7, [pc, #736]	; da860 <__ieee754_pow+0x558>
   da580:	3001      	adds	r0, #1
   da582:	ec54 3b17 	vmov	r3, r4, d7
   da586:	9007      	str	r0, [sp, #28]
   da588:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   da58c:	f04f 0900 	mov.w	r9, #0
   da590:	e9dd ab00 	ldrd	sl, fp, [sp]
   da594:	ec44 3b18 	vmov	d8, r3, r4
   da598:	461a      	mov	r2, r3
   da59a:	4650      	mov	r0, sl
   da59c:	4623      	mov	r3, r4
   da59e:	4641      	mov	r1, r8
   da5a0:	f001 ffd8 	bl	dc554 <__aeabi_dsub>
   da5a4:	ec53 2b18 	vmov	r2, r3, d8
   da5a8:	4604      	mov	r4, r0
   da5aa:	460d      	mov	r5, r1
   da5ac:	4650      	mov	r0, sl
   da5ae:	4641      	mov	r1, r8
   da5b0:	f001 ffd2 	bl	dc558 <__adddf3>
   da5b4:	4602      	mov	r2, r0
   da5b6:	460b      	mov	r3, r1
   da5b8:	2000      	movs	r0, #0
   da5ba:	49c1      	ldr	r1, [pc, #772]	; (da8c0 <__ieee754_pow+0x5b8>)
   da5bc:	f002 faac 	bl	dcb18 <__aeabi_ddiv>
   da5c0:	ec45 4b1a 	vmov	d10, r4, r5
   da5c4:	ec41 0b19 	vmov	d9, r0, r1
   da5c8:	ec51 0b1a 	vmov	r0, r1, d10
   da5cc:	ec53 2b19 	vmov	r2, r3, d9
   da5d0:	f002 f978 	bl	dc8c4 <__aeabi_dmul>
   da5d4:	46c3      	mov	fp, r8
   da5d6:	ea4f 0868 	mov.w	r8, r8, asr #1
   da5da:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   da5de:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   da5e2:	eb03 0509 	add.w	r5, r3, r9
   da5e6:	460a      	mov	r2, r1
   da5e8:	2300      	movs	r3, #0
   da5ea:	4601      	mov	r1, r0
   da5ec:	e9cd 1200 	strd	r1, r2, [sp]
   da5f0:	9300      	str	r3, [sp, #0]
   da5f2:	e9dd 8900 	ldrd	r8, r9, [sp]
   da5f6:	2400      	movs	r4, #0
   da5f8:	e9cd 1204 	strd	r1, r2, [sp, #16]
   da5fc:	462b      	mov	r3, r5
   da5fe:	4622      	mov	r2, r4
   da600:	4640      	mov	r0, r8
   da602:	4649      	mov	r1, r9
   da604:	f002 f95e 	bl	dc8c4 <__aeabi_dmul>
   da608:	4602      	mov	r2, r0
   da60a:	460b      	mov	r3, r1
   da60c:	ec51 0b1a 	vmov	r0, r1, d10
   da610:	f001 ffa0 	bl	dc554 <__aeabi_dsub>
   da614:	ec41 0b17 	vmov	d7, r0, r1
   da618:	ec53 2b18 	vmov	r2, r3, d8
   da61c:	4620      	mov	r0, r4
   da61e:	4629      	mov	r1, r5
   da620:	ec55 4b17 	vmov	r4, r5, d7
   da624:	f001 ff96 	bl	dc554 <__aeabi_dsub>
   da628:	4602      	mov	r2, r0
   da62a:	460b      	mov	r3, r1
   da62c:	4650      	mov	r0, sl
   da62e:	4659      	mov	r1, fp
   da630:	f001 ff90 	bl	dc554 <__aeabi_dsub>
   da634:	4642      	mov	r2, r8
   da636:	464b      	mov	r3, r9
   da638:	f002 f944 	bl	dc8c4 <__aeabi_dmul>
   da63c:	4602      	mov	r2, r0
   da63e:	460b      	mov	r3, r1
   da640:	4620      	mov	r0, r4
   da642:	4629      	mov	r1, r5
   da644:	f001 ff86 	bl	dc554 <__aeabi_dsub>
   da648:	ec53 2b19 	vmov	r2, r3, d9
   da64c:	f002 f93a 	bl	dc8c4 <__aeabi_dmul>
   da650:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   da654:	4604      	mov	r4, r0
   da656:	460d      	mov	r5, r1
   da658:	4652      	mov	r2, sl
   da65a:	465b      	mov	r3, fp
   da65c:	4650      	mov	r0, sl
   da65e:	4659      	mov	r1, fp
   da660:	f002 f930 	bl	dc8c4 <__aeabi_dmul>
   da664:	a380      	add	r3, pc, #512	; (adr r3, da868 <__ieee754_pow+0x560>)
   da666:	e9d3 2300 	ldrd	r2, r3, [r3]
   da66a:	ec45 4b1a 	vmov	d10, r4, r5
   da66e:	4604      	mov	r4, r0
   da670:	460d      	mov	r5, r1
   da672:	f002 f927 	bl	dc8c4 <__aeabi_dmul>
   da676:	a37e      	add	r3, pc, #504	; (adr r3, da870 <__ieee754_pow+0x568>)
   da678:	e9d3 2300 	ldrd	r2, r3, [r3]
   da67c:	f001 ff6c 	bl	dc558 <__adddf3>
   da680:	4622      	mov	r2, r4
   da682:	462b      	mov	r3, r5
   da684:	f002 f91e 	bl	dc8c4 <__aeabi_dmul>
   da688:	a37b      	add	r3, pc, #492	; (adr r3, da878 <__ieee754_pow+0x570>)
   da68a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da68e:	f001 ff63 	bl	dc558 <__adddf3>
   da692:	4622      	mov	r2, r4
   da694:	462b      	mov	r3, r5
   da696:	f002 f915 	bl	dc8c4 <__aeabi_dmul>
   da69a:	a379      	add	r3, pc, #484	; (adr r3, da880 <__ieee754_pow+0x578>)
   da69c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da6a0:	f001 ff5a 	bl	dc558 <__adddf3>
   da6a4:	4622      	mov	r2, r4
   da6a6:	462b      	mov	r3, r5
   da6a8:	f002 f90c 	bl	dc8c4 <__aeabi_dmul>
   da6ac:	a376      	add	r3, pc, #472	; (adr r3, da888 <__ieee754_pow+0x580>)
   da6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   da6b2:	f001 ff51 	bl	dc558 <__adddf3>
   da6b6:	4622      	mov	r2, r4
   da6b8:	462b      	mov	r3, r5
   da6ba:	f002 f903 	bl	dc8c4 <__aeabi_dmul>
   da6be:	a374      	add	r3, pc, #464	; (adr r3, da890 <__ieee754_pow+0x588>)
   da6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   da6c4:	f001 ff48 	bl	dc558 <__adddf3>
   da6c8:	4622      	mov	r2, r4
   da6ca:	462b      	mov	r3, r5
   da6cc:	4604      	mov	r4, r0
   da6ce:	460d      	mov	r5, r1
   da6d0:	4610      	mov	r0, r2
   da6d2:	4619      	mov	r1, r3
   da6d4:	f002 f8f6 	bl	dc8c4 <__aeabi_dmul>
   da6d8:	4602      	mov	r2, r0
   da6da:	460b      	mov	r3, r1
   da6dc:	4620      	mov	r0, r4
   da6de:	4629      	mov	r1, r5
   da6e0:	f002 f8f0 	bl	dc8c4 <__aeabi_dmul>
   da6e4:	4642      	mov	r2, r8
   da6e6:	4604      	mov	r4, r0
   da6e8:	460d      	mov	r5, r1
   da6ea:	464b      	mov	r3, r9
   da6ec:	4650      	mov	r0, sl
   da6ee:	4659      	mov	r1, fp
   da6f0:	e9cd ab04 	strd	sl, fp, [sp, #16]
   da6f4:	f001 ff30 	bl	dc558 <__adddf3>
   da6f8:	ec53 2b1a 	vmov	r2, r3, d10
   da6fc:	f002 f8e2 	bl	dc8c4 <__aeabi_dmul>
   da700:	4622      	mov	r2, r4
   da702:	462b      	mov	r3, r5
   da704:	f001 ff28 	bl	dc558 <__adddf3>
   da708:	4642      	mov	r2, r8
   da70a:	4604      	mov	r4, r0
   da70c:	460d      	mov	r5, r1
   da70e:	464b      	mov	r3, r9
   da710:	4640      	mov	r0, r8
   da712:	4649      	mov	r1, r9
   da714:	f002 f8d6 	bl	dc8c4 <__aeabi_dmul>
   da718:	ec45 4b19 	vmov	d9, r4, r5
   da71c:	4b69      	ldr	r3, [pc, #420]	; (da8c4 <__ieee754_pow+0x5bc>)
   da71e:	2200      	movs	r2, #0
   da720:	4682      	mov	sl, r0
   da722:	468b      	mov	fp, r1
   da724:	f001 ff18 	bl	dc558 <__adddf3>
   da728:	ec53 2b19 	vmov	r2, r3, d9
   da72c:	f001 ff14 	bl	dc558 <__adddf3>
   da730:	9c00      	ldr	r4, [sp, #0]
   da732:	460d      	mov	r5, r1
   da734:	4622      	mov	r2, r4
   da736:	462b      	mov	r3, r5
   da738:	4640      	mov	r0, r8
   da73a:	4649      	mov	r1, r9
   da73c:	f002 f8c2 	bl	dc8c4 <__aeabi_dmul>
   da740:	4b60      	ldr	r3, [pc, #384]	; (da8c4 <__ieee754_pow+0x5bc>)
   da742:	4680      	mov	r8, r0
   da744:	4689      	mov	r9, r1
   da746:	2200      	movs	r2, #0
   da748:	4620      	mov	r0, r4
   da74a:	4629      	mov	r1, r5
   da74c:	f001 ff02 	bl	dc554 <__aeabi_dsub>
   da750:	4652      	mov	r2, sl
   da752:	465b      	mov	r3, fp
   da754:	f001 fefe 	bl	dc554 <__aeabi_dsub>
   da758:	4602      	mov	r2, r0
   da75a:	460b      	mov	r3, r1
   da75c:	ec51 0b19 	vmov	r0, r1, d9
   da760:	f001 fef8 	bl	dc554 <__aeabi_dsub>
   da764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   da768:	f002 f8ac 	bl	dc8c4 <__aeabi_dmul>
   da76c:	ec49 8b18 	vmov	d8, r8, r9
   da770:	4622      	mov	r2, r4
   da772:	4680      	mov	r8, r0
   da774:	4689      	mov	r9, r1
   da776:	462b      	mov	r3, r5
   da778:	ec51 0b1a 	vmov	r0, r1, d10
   da77c:	f002 f8a2 	bl	dc8c4 <__aeabi_dmul>
   da780:	4602      	mov	r2, r0
   da782:	460b      	mov	r3, r1
   da784:	4640      	mov	r0, r8
   da786:	4649      	mov	r1, r9
   da788:	f001 fee6 	bl	dc558 <__adddf3>
   da78c:	4682      	mov	sl, r0
   da78e:	468b      	mov	fp, r1
   da790:	4652      	mov	r2, sl
   da792:	465b      	mov	r3, fp
   da794:	ec51 0b18 	vmov	r0, r1, d8
   da798:	f001 fede 	bl	dc558 <__adddf3>
   da79c:	9c00      	ldr	r4, [sp, #0]
   da79e:	a33e      	add	r3, pc, #248	; (adr r3, da898 <__ieee754_pow+0x590>)
   da7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   da7a4:	4620      	mov	r0, r4
   da7a6:	460d      	mov	r5, r1
   da7a8:	f002 f88c 	bl	dc8c4 <__aeabi_dmul>
   da7ac:	ec53 2b18 	vmov	r2, r3, d8
   da7b0:	4680      	mov	r8, r0
   da7b2:	4689      	mov	r9, r1
   da7b4:	4620      	mov	r0, r4
   da7b6:	4629      	mov	r1, r5
   da7b8:	f001 fecc 	bl	dc554 <__aeabi_dsub>
   da7bc:	4602      	mov	r2, r0
   da7be:	460b      	mov	r3, r1
   da7c0:	4650      	mov	r0, sl
   da7c2:	4659      	mov	r1, fp
   da7c4:	f001 fec6 	bl	dc554 <__aeabi_dsub>
   da7c8:	a335      	add	r3, pc, #212	; (adr r3, da8a0 <__ieee754_pow+0x598>)
   da7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   da7ce:	f002 f879 	bl	dc8c4 <__aeabi_dmul>
   da7d2:	ec49 8b19 	vmov	d9, r8, r9
   da7d6:	a334      	add	r3, pc, #208	; (adr r3, da8a8 <__ieee754_pow+0x5a0>)
   da7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   da7dc:	4680      	mov	r8, r0
   da7de:	4689      	mov	r9, r1
   da7e0:	4620      	mov	r0, r4
   da7e2:	4629      	mov	r1, r5
   da7e4:	f002 f86e 	bl	dc8c4 <__aeabi_dmul>
   da7e8:	4602      	mov	r2, r0
   da7ea:	460b      	mov	r3, r1
   da7ec:	4640      	mov	r0, r8
   da7ee:	4649      	mov	r1, r9
   da7f0:	f001 feb2 	bl	dc558 <__adddf3>
   da7f4:	ec53 2b1c 	vmov	r2, r3, d12
   da7f8:	f001 feae 	bl	dc558 <__adddf3>
   da7fc:	4682      	mov	sl, r0
   da7fe:	9807      	ldr	r0, [sp, #28]
   da800:	468b      	mov	fp, r1
   da802:	f001 fff5 	bl	dc7f0 <__aeabi_i2d>
   da806:	4652      	mov	r2, sl
   da808:	4680      	mov	r8, r0
   da80a:	4689      	mov	r9, r1
   da80c:	465b      	mov	r3, fp
   da80e:	ec51 0b19 	vmov	r0, r1, d9
   da812:	f001 fea1 	bl	dc558 <__adddf3>
   da816:	ec53 2b1b 	vmov	r2, r3, d11
   da81a:	f001 fe9d 	bl	dc558 <__adddf3>
   da81e:	4642      	mov	r2, r8
   da820:	464b      	mov	r3, r9
   da822:	f001 fe99 	bl	dc558 <__adddf3>
   da826:	9c00      	ldr	r4, [sp, #0]
   da828:	4642      	mov	r2, r8
   da82a:	464b      	mov	r3, r9
   da82c:	4620      	mov	r0, r4
   da82e:	460d      	mov	r5, r1
   da830:	f001 fe90 	bl	dc554 <__aeabi_dsub>
   da834:	ec53 2b1b 	vmov	r2, r3, d11
   da838:	f001 fe8c 	bl	dc554 <__aeabi_dsub>
   da83c:	ec53 2b19 	vmov	r2, r3, d9
   da840:	f001 fe88 	bl	dc554 <__aeabi_dsub>
   da844:	4602      	mov	r2, r0
   da846:	460b      	mov	r3, r1
   da848:	4650      	mov	r0, sl
   da84a:	4659      	mov	r1, fp
   da84c:	f001 fe82 	bl	dc554 <__aeabi_dsub>
   da850:	4682      	mov	sl, r0
   da852:	468b      	mov	fp, r1
   da854:	e038      	b.n	da8c8 <__ieee754_pow+0x5c0>
   da856:	bf00      	nop
	...
   da864:	3ff00000 	.word	0x3ff00000
   da868:	4a454eef 	.word	0x4a454eef
   da86c:	3fca7e28 	.word	0x3fca7e28
   da870:	93c9db65 	.word	0x93c9db65
   da874:	3fcd864a 	.word	0x3fcd864a
   da878:	a91d4101 	.word	0xa91d4101
   da87c:	3fd17460 	.word	0x3fd17460
   da880:	518f264d 	.word	0x518f264d
   da884:	3fd55555 	.word	0x3fd55555
   da888:	db6fabff 	.word	0xdb6fabff
   da88c:	3fdb6db6 	.word	0x3fdb6db6
   da890:	33333303 	.word	0x33333303
   da894:	3fe33333 	.word	0x3fe33333
   da898:	e0000000 	.word	0xe0000000
   da89c:	3feec709 	.word	0x3feec709
   da8a0:	dc3a03fd 	.word	0xdc3a03fd
   da8a4:	3feec709 	.word	0x3feec709
   da8a8:	145b01f5 	.word	0x145b01f5
   da8ac:	be3e2fe0 	.word	0xbe3e2fe0
   da8b0:	7ff00000 	.word	0x7ff00000
   da8b4:	43400000 	.word	0x43400000
   da8b8:	0003988e 	.word	0x0003988e
   da8bc:	000bb679 	.word	0x000bb679
   da8c0:	3ff00000 	.word	0x3ff00000
   da8c4:	40080000 	.word	0x40080000
   da8c8:	9b03      	ldr	r3, [sp, #12]
   da8ca:	9a06      	ldr	r2, [sp, #24]
   da8cc:	3b01      	subs	r3, #1
   da8ce:	4313      	orrs	r3, r2
   da8d0:	f040 8178 	bne.w	dabc4 <__ieee754_pow+0x8bc>
   da8d4:	ed9f 7bc4 	vldr	d7, [pc, #784]	; dabe8 <__ieee754_pow+0x8e0>
   da8d8:	eeb0 9a47 	vmov.f32	s18, s14
   da8dc:	eef0 9a67 	vmov.f32	s19, s15
   da8e0:	2300      	movs	r3, #0
   da8e2:	e9cd 6700 	strd	r6, r7, [sp]
   da8e6:	9300      	str	r3, [sp, #0]
   da8e8:	e9dd 8900 	ldrd	r8, r9, [sp]
   da8ec:	4630      	mov	r0, r6
   da8ee:	4642      	mov	r2, r8
   da8f0:	4639      	mov	r1, r7
   da8f2:	464b      	mov	r3, r9
   da8f4:	f001 fe2e 	bl	dc554 <__aeabi_dsub>
   da8f8:	4622      	mov	r2, r4
   da8fa:	462b      	mov	r3, r5
   da8fc:	f001 ffe2 	bl	dc8c4 <__aeabi_dmul>
   da900:	4632      	mov	r2, r6
   da902:	463b      	mov	r3, r7
   da904:	4606      	mov	r6, r0
   da906:	460f      	mov	r7, r1
   da908:	4650      	mov	r0, sl
   da90a:	4659      	mov	r1, fp
   da90c:	f001 ffda 	bl	dc8c4 <__aeabi_dmul>
   da910:	4602      	mov	r2, r0
   da912:	460b      	mov	r3, r1
   da914:	4630      	mov	r0, r6
   da916:	4639      	mov	r1, r7
   da918:	f001 fe1e 	bl	dc558 <__adddf3>
   da91c:	4642      	mov	r2, r8
   da91e:	4682      	mov	sl, r0
   da920:	468b      	mov	fp, r1
   da922:	464b      	mov	r3, r9
   da924:	4620      	mov	r0, r4
   da926:	4629      	mov	r1, r5
   da928:	f001 ffcc 	bl	dc8c4 <__aeabi_dmul>
   da92c:	4606      	mov	r6, r0
   da92e:	460f      	mov	r7, r1
   da930:	463b      	mov	r3, r7
   da932:	4650      	mov	r0, sl
   da934:	4659      	mov	r1, fp
   da936:	4632      	mov	r2, r6
   da938:	f001 fe0e 	bl	dc558 <__adddf3>
   da93c:	4bc4      	ldr	r3, [pc, #784]	; (dac50 <__ieee754_pow+0x948>)
   da93e:	4299      	cmp	r1, r3
   da940:	4604      	mov	r4, r0
   da942:	460d      	mov	r5, r1
   da944:	4688      	mov	r8, r1
   da946:	f340 8117 	ble.w	dab78 <__ieee754_pow+0x870>
   da94a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   da94e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   da952:	4303      	orrs	r3, r0
   da954:	f040 822a 	bne.w	dadac <__ieee754_pow+0xaa4>
   da958:	a3a5      	add	r3, pc, #660	; (adr r3, dabf0 <__ieee754_pow+0x8e8>)
   da95a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da95e:	4650      	mov	r0, sl
   da960:	4659      	mov	r1, fp
   da962:	f001 fdf9 	bl	dc558 <__adddf3>
   da966:	4632      	mov	r2, r6
   da968:	ec41 0b18 	vmov	d8, r0, r1
   da96c:	463b      	mov	r3, r7
   da96e:	4620      	mov	r0, r4
   da970:	4629      	mov	r1, r5
   da972:	f001 fdef 	bl	dc554 <__aeabi_dsub>
   da976:	4602      	mov	r2, r0
   da978:	460b      	mov	r3, r1
   da97a:	ec51 0b18 	vmov	r0, r1, d8
   da97e:	f002 fa31 	bl	dcde4 <__aeabi_dcmpgt>
   da982:	2800      	cmp	r0, #0
   da984:	f040 8212 	bne.w	dadac <__ieee754_pow+0xaa4>
   da988:	f3c8 530a 	ubfx	r3, r8, #20, #11
   da98c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   da990:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   da994:	fa42 f303 	asr.w	r3, r2, r3
   da998:	4443      	add	r3, r8
   da99a:	49ae      	ldr	r1, [pc, #696]	; (dac54 <__ieee754_pow+0x94c>)
   da99c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   da9a0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   da9a4:	fa41 fc02 	asr.w	ip, r1, r2
   da9a8:	f3c3 0513 	ubfx	r5, r3, #0, #20
   da9ac:	ea23 010c 	bic.w	r1, r3, ip
   da9b0:	f1c2 0414 	rsb	r4, r2, #20
   da9b4:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   da9b8:	f1b8 0f00 	cmp.w	r8, #0
   da9bc:	460b      	mov	r3, r1
   da9be:	fa45 f104 	asr.w	r1, r5, r4
   da9c2:	9103      	str	r1, [sp, #12]
   da9c4:	f04f 0000 	mov.w	r0, #0
   da9c8:	bfb8      	it	lt
   da9ca:	4249      	neglt	r1, r1
   da9cc:	4602      	mov	r2, r0
   da9ce:	bfb8      	it	lt
   da9d0:	9103      	strlt	r1, [sp, #12]
   da9d2:	4630      	mov	r0, r6
   da9d4:	4639      	mov	r1, r7
   da9d6:	f001 fdbd 	bl	dc554 <__aeabi_dsub>
   da9da:	4606      	mov	r6, r0
   da9dc:	460f      	mov	r7, r1
   da9de:	463b      	mov	r3, r7
   da9e0:	4650      	mov	r0, sl
   da9e2:	4659      	mov	r1, fp
   da9e4:	4632      	mov	r2, r6
   da9e6:	f001 fdb7 	bl	dc558 <__adddf3>
   da9ea:	9b03      	ldr	r3, [sp, #12]
   da9ec:	051b      	lsls	r3, r3, #20
   da9ee:	9300      	str	r3, [sp, #0]
   da9f0:	460d      	mov	r5, r1
   da9f2:	2400      	movs	r4, #0
   da9f4:	a380      	add	r3, pc, #512	; (adr r3, dabf8 <__ieee754_pow+0x8f0>)
   da9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   da9fa:	4620      	mov	r0, r4
   da9fc:	4629      	mov	r1, r5
   da9fe:	f001 ff61 	bl	dc8c4 <__aeabi_dmul>
   daa02:	4632      	mov	r2, r6
   daa04:	4680      	mov	r8, r0
   daa06:	4689      	mov	r9, r1
   daa08:	463b      	mov	r3, r7
   daa0a:	4620      	mov	r0, r4
   daa0c:	4629      	mov	r1, r5
   daa0e:	f001 fda1 	bl	dc554 <__aeabi_dsub>
   daa12:	4602      	mov	r2, r0
   daa14:	460b      	mov	r3, r1
   daa16:	4650      	mov	r0, sl
   daa18:	4659      	mov	r1, fp
   daa1a:	f001 fd9b 	bl	dc554 <__aeabi_dsub>
   daa1e:	a378      	add	r3, pc, #480	; (adr r3, dac00 <__ieee754_pow+0x8f8>)
   daa20:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa24:	f001 ff4e 	bl	dc8c4 <__aeabi_dmul>
   daa28:	a377      	add	r3, pc, #476	; (adr r3, dac08 <__ieee754_pow+0x900>)
   daa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa2e:	4606      	mov	r6, r0
   daa30:	460f      	mov	r7, r1
   daa32:	4620      	mov	r0, r4
   daa34:	4629      	mov	r1, r5
   daa36:	f001 ff45 	bl	dc8c4 <__aeabi_dmul>
   daa3a:	4602      	mov	r2, r0
   daa3c:	460b      	mov	r3, r1
   daa3e:	4630      	mov	r0, r6
   daa40:	4639      	mov	r1, r7
   daa42:	f001 fd89 	bl	dc558 <__adddf3>
   daa46:	4606      	mov	r6, r0
   daa48:	460f      	mov	r7, r1
   daa4a:	4632      	mov	r2, r6
   daa4c:	463b      	mov	r3, r7
   daa4e:	4640      	mov	r0, r8
   daa50:	4649      	mov	r1, r9
   daa52:	f001 fd81 	bl	dc558 <__adddf3>
   daa56:	4642      	mov	r2, r8
   daa58:	464b      	mov	r3, r9
   daa5a:	4604      	mov	r4, r0
   daa5c:	460d      	mov	r5, r1
   daa5e:	f001 fd79 	bl	dc554 <__aeabi_dsub>
   daa62:	4602      	mov	r2, r0
   daa64:	460b      	mov	r3, r1
   daa66:	4630      	mov	r0, r6
   daa68:	4639      	mov	r1, r7
   daa6a:	f001 fd73 	bl	dc554 <__aeabi_dsub>
   daa6e:	4622      	mov	r2, r4
   daa70:	4682      	mov	sl, r0
   daa72:	468b      	mov	fp, r1
   daa74:	462b      	mov	r3, r5
   daa76:	4620      	mov	r0, r4
   daa78:	4629      	mov	r1, r5
   daa7a:	f001 ff23 	bl	dc8c4 <__aeabi_dmul>
   daa7e:	a364      	add	r3, pc, #400	; (adr r3, dac10 <__ieee754_pow+0x908>)
   daa80:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa84:	4606      	mov	r6, r0
   daa86:	460f      	mov	r7, r1
   daa88:	f001 ff1c 	bl	dc8c4 <__aeabi_dmul>
   daa8c:	a362      	add	r3, pc, #392	; (adr r3, dac18 <__ieee754_pow+0x910>)
   daa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa92:	f001 fd5f 	bl	dc554 <__aeabi_dsub>
   daa96:	4632      	mov	r2, r6
   daa98:	463b      	mov	r3, r7
   daa9a:	f001 ff13 	bl	dc8c4 <__aeabi_dmul>
   daa9e:	a360      	add	r3, pc, #384	; (adr r3, dac20 <__ieee754_pow+0x918>)
   daaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
   daaa4:	f001 fd58 	bl	dc558 <__adddf3>
   daaa8:	4632      	mov	r2, r6
   daaaa:	463b      	mov	r3, r7
   daaac:	f001 ff0a 	bl	dc8c4 <__aeabi_dmul>
   daab0:	a35d      	add	r3, pc, #372	; (adr r3, dac28 <__ieee754_pow+0x920>)
   daab2:	e9d3 2300 	ldrd	r2, r3, [r3]
   daab6:	f001 fd4d 	bl	dc554 <__aeabi_dsub>
   daaba:	4632      	mov	r2, r6
   daabc:	463b      	mov	r3, r7
   daabe:	f001 ff01 	bl	dc8c4 <__aeabi_dmul>
   daac2:	a35b      	add	r3, pc, #364	; (adr r3, dac30 <__ieee754_pow+0x928>)
   daac4:	e9d3 2300 	ldrd	r2, r3, [r3]
   daac8:	f001 fd46 	bl	dc558 <__adddf3>
   daacc:	4632      	mov	r2, r6
   daace:	463b      	mov	r3, r7
   daad0:	f001 fef8 	bl	dc8c4 <__aeabi_dmul>
   daad4:	4602      	mov	r2, r0
   daad6:	460b      	mov	r3, r1
   daad8:	4620      	mov	r0, r4
   daada:	4629      	mov	r1, r5
   daadc:	f001 fd3a 	bl	dc554 <__aeabi_dsub>
   daae0:	4606      	mov	r6, r0
   daae2:	460f      	mov	r7, r1
   daae4:	4632      	mov	r2, r6
   daae6:	463b      	mov	r3, r7
   daae8:	4620      	mov	r0, r4
   daaea:	4629      	mov	r1, r5
   daaec:	f001 feea 	bl	dc8c4 <__aeabi_dmul>
   daaf0:	2200      	movs	r2, #0
   daaf2:	4680      	mov	r8, r0
   daaf4:	4689      	mov	r9, r1
   daaf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   daafa:	4630      	mov	r0, r6
   daafc:	4639      	mov	r1, r7
   daafe:	f001 fd29 	bl	dc554 <__aeabi_dsub>
   dab02:	4602      	mov	r2, r0
   dab04:	460b      	mov	r3, r1
   dab06:	4640      	mov	r0, r8
   dab08:	4649      	mov	r1, r9
   dab0a:	f002 f805 	bl	dcb18 <__aeabi_ddiv>
   dab0e:	4652      	mov	r2, sl
   dab10:	4606      	mov	r6, r0
   dab12:	460f      	mov	r7, r1
   dab14:	465b      	mov	r3, fp
   dab16:	4620      	mov	r0, r4
   dab18:	4629      	mov	r1, r5
   dab1a:	f001 fed3 	bl	dc8c4 <__aeabi_dmul>
   dab1e:	4652      	mov	r2, sl
   dab20:	465b      	mov	r3, fp
   dab22:	f001 fd19 	bl	dc558 <__adddf3>
   dab26:	4602      	mov	r2, r0
   dab28:	460b      	mov	r3, r1
   dab2a:	4630      	mov	r0, r6
   dab2c:	4639      	mov	r1, r7
   dab2e:	f001 fd11 	bl	dc554 <__aeabi_dsub>
   dab32:	4622      	mov	r2, r4
   dab34:	462b      	mov	r3, r5
   dab36:	f001 fd0d 	bl	dc554 <__aeabi_dsub>
   dab3a:	4602      	mov	r2, r0
   dab3c:	460b      	mov	r3, r1
   dab3e:	2000      	movs	r0, #0
   dab40:	4945      	ldr	r1, [pc, #276]	; (dac58 <__ieee754_pow+0x950>)
   dab42:	f001 fd07 	bl	dc554 <__aeabi_dsub>
   dab46:	460b      	mov	r3, r1
   dab48:	9900      	ldr	r1, [sp, #0]
   dab4a:	4419      	add	r1, r3
   dab4c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dab50:	4602      	mov	r2, r0
   dab52:	f2c0 8169 	blt.w	dae28 <__ieee754_pow+0xb20>
   dab56:	4610      	mov	r0, r2
   dab58:	ec53 2b19 	vmov	r2, r3, d9
   dab5c:	f001 feb2 	bl	dc8c4 <__aeabi_dmul>
   dab60:	e9cd 0100 	strd	r0, r1, [sp]
   dab64:	e41e      	b.n	da3a4 <__ieee754_pow+0x9c>
   dab66:	f1bb 0f00 	cmp.w	fp, #0
   dab6a:	f6ff ac95 	blt.w	da498 <__ieee754_pow+0x190>
   dab6e:	ed9f 7b32 	vldr	d7, [pc, #200]	; dac38 <__ieee754_pow+0x930>
   dab72:	ed8d 7b00 	vstr	d7, [sp]
   dab76:	e415      	b.n	da3a4 <__ieee754_pow+0x9c>
   dab78:	f8df c0e4 	ldr.w	ip, [pc, #228]	; dac60 <__ieee754_pow+0x958>
   dab7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dab80:	4563      	cmp	r3, ip
   dab82:	f340 810b 	ble.w	dad9c <__ieee754_pow+0xa94>
   dab86:	4b35      	ldr	r3, [pc, #212]	; (dac5c <__ieee754_pow+0x954>)
   dab88:	440b      	add	r3, r1
   dab8a:	4303      	orrs	r3, r0
   dab8c:	d10a      	bne.n	daba4 <__ieee754_pow+0x89c>
   dab8e:	4632      	mov	r2, r6
   dab90:	463b      	mov	r3, r7
   dab92:	f001 fcdf 	bl	dc554 <__aeabi_dsub>
   dab96:	4652      	mov	r2, sl
   dab98:	465b      	mov	r3, fp
   dab9a:	f002 f919 	bl	dcdd0 <__aeabi_dcmpge>
   dab9e:	2800      	cmp	r0, #0
   daba0:	f43f aef2 	beq.w	da988 <__ieee754_pow+0x680>
   daba4:	a326      	add	r3, pc, #152	; (adr r3, dac40 <__ieee754_pow+0x938>)
   daba6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dabaa:	ec51 0b19 	vmov	r0, r1, d9
   dabae:	f001 fe89 	bl	dc8c4 <__aeabi_dmul>
   dabb2:	a323      	add	r3, pc, #140	; (adr r3, dac40 <__ieee754_pow+0x938>)
   dabb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dabb8:	f001 fe84 	bl	dc8c4 <__aeabi_dmul>
   dabbc:	e9cd 0100 	strd	r0, r1, [sp]
   dabc0:	f7ff bbf0 	b.w	da3a4 <__ieee754_pow+0x9c>
   dabc4:	ed9f 7b20 	vldr	d7, [pc, #128]	; dac48 <__ieee754_pow+0x940>
   dabc8:	eeb0 9a47 	vmov.f32	s18, s14
   dabcc:	eef0 9a67 	vmov.f32	s19, s15
   dabd0:	e686      	b.n	da8e0 <__ieee754_pow+0x5d8>
   dabd2:	f1bb 0f00 	cmp.w	fp, #0
   dabd6:	daca      	bge.n	dab6e <__ieee754_pow+0x866>
   dabd8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   dabdc:	9600      	str	r6, [sp, #0]
   dabde:	9301      	str	r3, [sp, #4]
   dabe0:	f7ff bbe0 	b.w	da3a4 <__ieee754_pow+0x9c>
   dabe4:	f3af 8000 	nop.w
   dabe8:	00000000 	.word	0x00000000
   dabec:	bff00000 	.word	0xbff00000
   dabf0:	652b82fe 	.word	0x652b82fe
   dabf4:	3c971547 	.word	0x3c971547
   dabf8:	00000000 	.word	0x00000000
   dabfc:	3fe62e43 	.word	0x3fe62e43
   dac00:	fefa39ef 	.word	0xfefa39ef
   dac04:	3fe62e42 	.word	0x3fe62e42
   dac08:	0ca86c39 	.word	0x0ca86c39
   dac0c:	be205c61 	.word	0xbe205c61
   dac10:	72bea4d0 	.word	0x72bea4d0
   dac14:	3e663769 	.word	0x3e663769
   dac18:	c5d26bf1 	.word	0xc5d26bf1
   dac1c:	3ebbbd41 	.word	0x3ebbbd41
   dac20:	af25de2c 	.word	0xaf25de2c
   dac24:	3f11566a 	.word	0x3f11566a
   dac28:	16bebd93 	.word	0x16bebd93
   dac2c:	3f66c16c 	.word	0x3f66c16c
   dac30:	5555553e 	.word	0x5555553e
   dac34:	3fc55555 	.word	0x3fc55555
	...
   dac40:	c2f8f359 	.word	0xc2f8f359
   dac44:	01a56e1f 	.word	0x01a56e1f
   dac48:	00000000 	.word	0x00000000
   dac4c:	3ff00000 	.word	0x3ff00000
   dac50:	408fffff 	.word	0x408fffff
   dac54:	000fffff 	.word	0x000fffff
   dac58:	3ff00000 	.word	0x3ff00000
   dac5c:	3f6f3400 	.word	0x3f6f3400
   dac60:	4090cbff 	.word	0x4090cbff
   dac64:	4598      	cmp	r8, r3
   dac66:	f6ff af7e 	blt.w	dab66 <__ieee754_pow+0x85e>
   dac6a:	4b91      	ldr	r3, [pc, #580]	; (daeb0 <__ieee754_pow+0xba8>)
   dac6c:	4598      	cmp	r8, r3
   dac6e:	f73f ac0f 	bgt.w	da490 <__ieee754_pow+0x188>
   dac72:	4b8f      	ldr	r3, [pc, #572]	; (daeb0 <__ieee754_pow+0xba8>)
   dac74:	2200      	movs	r2, #0
   dac76:	e9dd 0100 	ldrd	r0, r1, [sp]
   dac7a:	f001 fc6b 	bl	dc554 <__aeabi_dsub>
   dac7e:	a378      	add	r3, pc, #480	; (adr r3, dae60 <__ieee754_pow+0xb58>)
   dac80:	e9d3 2300 	ldrd	r2, r3, [r3]
   dac84:	4604      	mov	r4, r0
   dac86:	460d      	mov	r5, r1
   dac88:	f001 fe1c 	bl	dc8c4 <__aeabi_dmul>
   dac8c:	a376      	add	r3, pc, #472	; (adr r3, dae68 <__ieee754_pow+0xb60>)
   dac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dac92:	4682      	mov	sl, r0
   dac94:	468b      	mov	fp, r1
   dac96:	4620      	mov	r0, r4
   dac98:	4629      	mov	r1, r5
   dac9a:	f001 fe13 	bl	dc8c4 <__aeabi_dmul>
   dac9e:	4b85      	ldr	r3, [pc, #532]	; (daeb4 <__ieee754_pow+0xbac>)
   daca0:	4680      	mov	r8, r0
   daca2:	4689      	mov	r9, r1
   daca4:	2200      	movs	r2, #0
   daca6:	4620      	mov	r0, r4
   daca8:	4629      	mov	r1, r5
   dacaa:	f001 fe0b 	bl	dc8c4 <__aeabi_dmul>
   dacae:	4602      	mov	r2, r0
   dacb0:	460b      	mov	r3, r1
   dacb2:	a16f      	add	r1, pc, #444	; (adr r1, dae70 <__ieee754_pow+0xb68>)
   dacb4:	e9d1 0100 	ldrd	r0, r1, [r1]
   dacb8:	f001 fc4c 	bl	dc554 <__aeabi_dsub>
   dacbc:	4622      	mov	r2, r4
   dacbe:	462b      	mov	r3, r5
   dacc0:	f001 fe00 	bl	dc8c4 <__aeabi_dmul>
   dacc4:	4602      	mov	r2, r0
   dacc6:	460b      	mov	r3, r1
   dacc8:	2000      	movs	r0, #0
   dacca:	497b      	ldr	r1, [pc, #492]	; (daeb8 <__ieee754_pow+0xbb0>)
   daccc:	f001 fc42 	bl	dc554 <__aeabi_dsub>
   dacd0:	4622      	mov	r2, r4
   dacd2:	462b      	mov	r3, r5
   dacd4:	4604      	mov	r4, r0
   dacd6:	460d      	mov	r5, r1
   dacd8:	4610      	mov	r0, r2
   dacda:	4619      	mov	r1, r3
   dacdc:	f001 fdf2 	bl	dc8c4 <__aeabi_dmul>
   dace0:	4602      	mov	r2, r0
   dace2:	460b      	mov	r3, r1
   dace4:	4620      	mov	r0, r4
   dace6:	4629      	mov	r1, r5
   dace8:	f001 fdec 	bl	dc8c4 <__aeabi_dmul>
   dacec:	a362      	add	r3, pc, #392	; (adr r3, dae78 <__ieee754_pow+0xb70>)
   dacee:	e9d3 2300 	ldrd	r2, r3, [r3]
   dacf2:	f001 fde7 	bl	dc8c4 <__aeabi_dmul>
   dacf6:	4602      	mov	r2, r0
   dacf8:	460b      	mov	r3, r1
   dacfa:	4640      	mov	r0, r8
   dacfc:	4649      	mov	r1, r9
   dacfe:	f001 fc29 	bl	dc554 <__aeabi_dsub>
   dad02:	4680      	mov	r8, r0
   dad04:	4689      	mov	r9, r1
   dad06:	4650      	mov	r0, sl
   dad08:	4659      	mov	r1, fp
   dad0a:	4642      	mov	r2, r8
   dad0c:	464b      	mov	r3, r9
   dad0e:	f001 fc23 	bl	dc558 <__adddf3>
   dad12:	2400      	movs	r4, #0
   dad14:	4652      	mov	r2, sl
   dad16:	465b      	mov	r3, fp
   dad18:	4620      	mov	r0, r4
   dad1a:	460d      	mov	r5, r1
   dad1c:	f001 fc1a 	bl	dc554 <__aeabi_dsub>
   dad20:	4602      	mov	r2, r0
   dad22:	460b      	mov	r3, r1
   dad24:	4640      	mov	r0, r8
   dad26:	4649      	mov	r1, r9
   dad28:	f001 fc14 	bl	dc554 <__aeabi_dsub>
   dad2c:	4682      	mov	sl, r0
   dad2e:	468b      	mov	fp, r1
   dad30:	e5ca      	b.n	da8c8 <__ieee754_pow+0x5c0>
   dad32:	ed9f 7b53 	vldr	d7, [pc, #332]	; dae80 <__ieee754_pow+0xb78>
   dad36:	eeb0 ba47 	vmov.f32	s22, s14
   dad3a:	eef0 ba67 	vmov.f32	s23, s15
   dad3e:	eeb0 ca47 	vmov.f32	s24, s14
   dad42:	eef0 ca67 	vmov.f32	s25, s15
   dad46:	ed9f 7b50 	vldr	d7, [pc, #320]	; dae88 <__ieee754_pow+0xb80>
   dad4a:	f04f 0900 	mov.w	r9, #0
   dad4e:	ec54 3b17 	vmov	r3, r4, d7
   dad52:	e41d      	b.n	da590 <__ieee754_pow+0x288>
   dad54:	2000      	movs	r0, #0
   dad56:	f7ff bbf3 	b.w	da540 <__ieee754_pow+0x238>
   dad5a:	4955      	ldr	r1, [pc, #340]	; (daeb0 <__ieee754_pow+0xba8>)
   dad5c:	4622      	mov	r2, r4
   dad5e:	462b      	mov	r3, r5
   dad60:	2000      	movs	r0, #0
   dad62:	f001 fed9 	bl	dcb18 <__aeabi_ddiv>
   dad66:	e9cd 0100 	strd	r0, r1, [sp]
   dad6a:	f7ff bb1b 	b.w	da3a4 <__ieee754_pow+0x9c>
   dad6e:	4622      	mov	r2, r4
   dad70:	462b      	mov	r3, r5
   dad72:	4620      	mov	r0, r4
   dad74:	4629      	mov	r1, r5
   dad76:	f001 fda5 	bl	dc8c4 <__aeabi_dmul>
   dad7a:	e9cd 0100 	strd	r0, r1, [sp]
   dad7e:	f7ff bb11 	b.w	da3a4 <__ieee754_pow+0x9c>
   dad82:	2b00      	cmp	r3, #0
   dad84:	d142      	bne.n	dae0c <__ieee754_pow+0xb04>
   dad86:	f1c1 0114 	rsb	r1, r1, #20
   dad8a:	fa4a f001 	asr.w	r0, sl, r1
   dad8e:	fa00 f101 	lsl.w	r1, r0, r1
   dad92:	4551      	cmp	r1, sl
   dad94:	d05a      	beq.n	dae4c <__ieee754_pow+0xb44>
   dad96:	9303      	str	r3, [sp, #12]
   dad98:	f7ff bae0 	b.w	da35c <__ieee754_pow+0x54>
   dad9c:	4a46      	ldr	r2, [pc, #280]	; (daeb8 <__ieee754_pow+0xbb0>)
   dad9e:	4293      	cmp	r3, r2
   dada0:	dc5b      	bgt.n	dae5a <__ieee754_pow+0xb52>
   dada2:	e9dd 1200 	ldrd	r1, r2, [sp]
   dada6:	9100      	str	r1, [sp, #0]
   dada8:	9103      	str	r1, [sp, #12]
   dadaa:	e622      	b.n	da9f2 <__ieee754_pow+0x6ea>
   dadac:	a338      	add	r3, pc, #224	; (adr r3, dae90 <__ieee754_pow+0xb88>)
   dadae:	e9d3 2300 	ldrd	r2, r3, [r3]
   dadb2:	ec51 0b19 	vmov	r0, r1, d9
   dadb6:	f001 fd85 	bl	dc8c4 <__aeabi_dmul>
   dadba:	a335      	add	r3, pc, #212	; (adr r3, dae90 <__ieee754_pow+0xb88>)
   dadbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dadc0:	f001 fd80 	bl	dc8c4 <__aeabi_dmul>
   dadc4:	e9cd 0100 	strd	r0, r1, [sp]
   dadc8:	f7ff baec 	b.w	da3a4 <__ieee754_pow+0x9c>
   dadcc:	9b03      	ldr	r3, [sp, #12]
   dadce:	2b01      	cmp	r3, #1
   dadd0:	f47f aae8 	bne.w	da3a4 <__ieee754_pow+0x9c>
   dadd4:	e9dd 2100 	ldrd	r2, r1, [sp]
   dadd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   daddc:	e9cd 2300 	strd	r2, r3, [sp]
   dade0:	f7ff bae0 	b.w	da3a4 <__ieee754_pow+0x9c>
   dade4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; dae98 <__ieee754_pow+0xb90>
   dade8:	eeb0 ba47 	vmov.f32	s22, s14
   dadec:	eef0 ba67 	vmov.f32	s23, s15
   dadf0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; daea0 <__ieee754_pow+0xb98>
   dadf4:	eeb0 ca47 	vmov.f32	s24, s14
   dadf8:	eef0 ca67 	vmov.f32	s25, s15
   dadfc:	ed9f 7b2a 	vldr	d7, [pc, #168]	; daea8 <__ieee754_pow+0xba0>
   dae00:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   dae04:	ec54 3b17 	vmov	r3, r4, d7
   dae08:	f7ff bbc2 	b.w	da590 <__ieee754_pow+0x288>
   dae0c:	ec45 4b10 	vmov	d0, r4, r5
   dae10:	9203      	str	r2, [sp, #12]
   dae12:	f001 f8bd 	bl	dbf90 <fabs>
   dae16:	9a03      	ldr	r2, [sp, #12]
   dae18:	ed8d 0b00 	vstr	d0, [sp]
   dae1c:	2a00      	cmp	r2, #0
   dae1e:	f47f ab61 	bne.w	da4e4 <__ieee754_pow+0x1dc>
   dae22:	9203      	str	r2, [sp, #12]
   dae24:	f7ff baf5 	b.w	da412 <__ieee754_pow+0x10a>
   dae28:	9803      	ldr	r0, [sp, #12]
   dae2a:	ec43 2b10 	vmov	d0, r2, r3
   dae2e:	f001 f963 	bl	dc0f8 <scalbn>
   dae32:	ec51 0b10 	vmov	r0, r1, d0
   dae36:	e68f      	b.n	dab58 <__ieee754_pow+0x850>
   dae38:	f000 0001 	and.w	r0, r0, #1
   dae3c:	f1c0 0102 	rsb	r1, r0, #2
   dae40:	9103      	str	r1, [sp, #12]
   dae42:	2b00      	cmp	r3, #0
   dae44:	f43f aa8a 	beq.w	da35c <__ieee754_pow+0x54>
   dae48:	f7ff bada 	b.w	da400 <__ieee754_pow+0xf8>
   dae4c:	f000 0001 	and.w	r0, r0, #1
   dae50:	f1c0 0302 	rsb	r3, r0, #2
   dae54:	9303      	str	r3, [sp, #12]
   dae56:	f7ff ba81 	b.w	da35c <__ieee754_pow+0x54>
   dae5a:	151b      	asrs	r3, r3, #20
   dae5c:	e596      	b.n	da98c <__ieee754_pow+0x684>
   dae5e:	bf00      	nop
   dae60:	60000000 	.word	0x60000000
   dae64:	3ff71547 	.word	0x3ff71547
   dae68:	f85ddf44 	.word	0xf85ddf44
   dae6c:	3e54ae0b 	.word	0x3e54ae0b
   dae70:	55555555 	.word	0x55555555
   dae74:	3fd55555 	.word	0x3fd55555
   dae78:	652b82fe 	.word	0x652b82fe
   dae7c:	3ff71547 	.word	0x3ff71547
	...
   dae8c:	3ff00000 	.word	0x3ff00000
   dae90:	8800759c 	.word	0x8800759c
   dae94:	7e37e43c 	.word	0x7e37e43c
   dae98:	40000000 	.word	0x40000000
   dae9c:	3fe2b803 	.word	0x3fe2b803
   daea0:	43cfd006 	.word	0x43cfd006
   daea4:	3e4cfdeb 	.word	0x3e4cfdeb
   daea8:	00000000 	.word	0x00000000
   daeac:	3ff80000 	.word	0x3ff80000
   daeb0:	3ff00000 	.word	0x3ff00000
   daeb4:	3fd00000 	.word	0x3fd00000
   daeb8:	3fe00000 	.word	0x3fe00000

000daebc <__ieee754_sqrt>:
   daebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daec0:	4a5f      	ldr	r2, [pc, #380]	; (db040 <__ieee754_sqrt+0x184>)
   daec2:	ec57 6b10 	vmov	r6, r7, d0
   daec6:	43ba      	bics	r2, r7
   daec8:	f000 8098 	beq.w	daffc <__ieee754_sqrt+0x140>
   daecc:	2f00      	cmp	r7, #0
   daece:	ee10 4a10 	vmov	r4, s0
   daed2:	463b      	mov	r3, r7
   daed4:	dd4e      	ble.n	daf74 <__ieee754_sqrt+0xb8>
   daed6:	1539      	asrs	r1, r7, #20
   daed8:	d05b      	beq.n	daf92 <__ieee754_sqrt+0xd6>
   daeda:	f3c3 0313 	ubfx	r3, r3, #0, #20
   daede:	07ca      	lsls	r2, r1, #31
   daee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   daee4:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   daee8:	d403      	bmi.n	daef2 <__ieee754_sqrt+0x36>
   daeea:	005b      	lsls	r3, r3, #1
   daeec:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   daef0:	0064      	lsls	r4, r4, #1
   daef2:	0fe2      	lsrs	r2, r4, #31
   daef4:	f04f 0c00 	mov.w	ip, #0
   daef8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   daefc:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   daf00:	0064      	lsls	r4, r4, #1
   daf02:	4666      	mov	r6, ip
   daf04:	2516      	movs	r5, #22
   daf06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   daf0a:	18b1      	adds	r1, r6, r2
   daf0c:	4299      	cmp	r1, r3
   daf0e:	dc02      	bgt.n	daf16 <__ieee754_sqrt+0x5a>
   daf10:	1a5b      	subs	r3, r3, r1
   daf12:	188e      	adds	r6, r1, r2
   daf14:	4494      	add	ip, r2
   daf16:	005b      	lsls	r3, r3, #1
   daf18:	3d01      	subs	r5, #1
   daf1a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   daf1e:	ea4f 0252 	mov.w	r2, r2, lsr #1
   daf22:	ea4f 0444 	mov.w	r4, r4, lsl #1
   daf26:	d1f0      	bne.n	daf0a <__ieee754_sqrt+0x4e>
   daf28:	462f      	mov	r7, r5
   daf2a:	2020      	movs	r0, #32
   daf2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   daf30:	e009      	b.n	daf46 <__ieee754_sqrt+0x8a>
   daf32:	d03e      	beq.n	dafb2 <__ieee754_sqrt+0xf6>
   daf34:	0fe1      	lsrs	r1, r4, #31
   daf36:	3801      	subs	r0, #1
   daf38:	ea4f 0252 	mov.w	r2, r2, lsr #1
   daf3c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   daf40:	ea4f 0444 	mov.w	r4, r4, lsl #1
   daf44:	d03e      	beq.n	dafc4 <__ieee754_sqrt+0x108>
   daf46:	42b3      	cmp	r3, r6
   daf48:	eb02 0105 	add.w	r1, r2, r5
   daf4c:	ddf1      	ble.n	daf32 <__ieee754_sqrt+0x76>
   daf4e:	2900      	cmp	r1, #0
   daf50:	eb01 0502 	add.w	r5, r1, r2
   daf54:	db09      	blt.n	daf6a <__ieee754_sqrt+0xae>
   daf56:	46b0      	mov	r8, r6
   daf58:	1b9b      	subs	r3, r3, r6
   daf5a:	42a1      	cmp	r1, r4
   daf5c:	bf88      	it	hi
   daf5e:	f103 33ff 	addhi.w	r3, r3, #4294967295
   daf62:	1a64      	subs	r4, r4, r1
   daf64:	4417      	add	r7, r2
   daf66:	4646      	mov	r6, r8
   daf68:	e7e4      	b.n	daf34 <__ieee754_sqrt+0x78>
   daf6a:	2d00      	cmp	r5, #0
   daf6c:	dbf3      	blt.n	daf56 <__ieee754_sqrt+0x9a>
   daf6e:	f106 0801 	add.w	r8, r6, #1
   daf72:	e7f1      	b.n	daf58 <__ieee754_sqrt+0x9c>
   daf74:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   daf78:	4332      	orrs	r2, r6
   daf7a:	d036      	beq.n	dafea <__ieee754_sqrt+0x12e>
   daf7c:	2f00      	cmp	r7, #0
   daf7e:	d14d      	bne.n	db01c <__ieee754_sqrt+0x160>
   daf80:	4639      	mov	r1, r7
   daf82:	0ae2      	lsrs	r2, r4, #11
   daf84:	3915      	subs	r1, #21
   daf86:	0564      	lsls	r4, r4, #21
   daf88:	4613      	mov	r3, r2
   daf8a:	2a00      	cmp	r2, #0
   daf8c:	d0f9      	beq.n	daf82 <__ieee754_sqrt+0xc6>
   daf8e:	02d7      	lsls	r7, r2, #11
   daf90:	d451      	bmi.n	db036 <__ieee754_sqrt+0x17a>
   daf92:	2000      	movs	r0, #0
   daf94:	005b      	lsls	r3, r3, #1
   daf96:	02de      	lsls	r6, r3, #11
   daf98:	4605      	mov	r5, r0
   daf9a:	f100 0001 	add.w	r0, r0, #1
   daf9e:	d5f9      	bpl.n	daf94 <__ieee754_sqrt+0xd8>
   dafa0:	461a      	mov	r2, r3
   dafa2:	4623      	mov	r3, r4
   dafa4:	4084      	lsls	r4, r0
   dafa6:	f1c0 0020 	rsb	r0, r0, #32
   dafaa:	40c3      	lsrs	r3, r0
   dafac:	4313      	orrs	r3, r2
   dafae:	1b49      	subs	r1, r1, r5
   dafb0:	e793      	b.n	daeda <__ieee754_sqrt+0x1e>
   dafb2:	42a1      	cmp	r1, r4
   dafb4:	d8be      	bhi.n	daf34 <__ieee754_sqrt+0x78>
   dafb6:	2900      	cmp	r1, #0
   dafb8:	eb01 0502 	add.w	r5, r1, r2
   dafbc:	dbd5      	blt.n	daf6a <__ieee754_sqrt+0xae>
   dafbe:	4698      	mov	r8, r3
   dafc0:	2300      	movs	r3, #0
   dafc2:	e7ce      	b.n	daf62 <__ieee754_sqrt+0xa6>
   dafc4:	4323      	orrs	r3, r4
   dafc6:	d112      	bne.n	dafee <__ieee754_sqrt+0x132>
   dafc8:	0878      	lsrs	r0, r7, #1
   dafca:	ea4f 016c 	mov.w	r1, ip, asr #1
   dafce:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   dafd2:	f01c 0f01 	tst.w	ip, #1
   dafd6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   dafda:	bf18      	it	ne
   dafdc:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   dafe0:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   dafe4:	4602      	mov	r2, r0
   dafe6:	ec43 2b10 	vmov	d0, r2, r3
   dafea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dafee:	1c7b      	adds	r3, r7, #1
   daff0:	bf16      	itet	ne
   daff2:	1c78      	addne	r0, r7, #1
   daff4:	f10c 0c01 	addeq.w	ip, ip, #1
   daff8:	0840      	lsrne	r0, r0, #1
   daffa:	e7e6      	b.n	dafca <__ieee754_sqrt+0x10e>
   daffc:	ee10 2a10 	vmov	r2, s0
   db000:	ee10 0a10 	vmov	r0, s0
   db004:	463b      	mov	r3, r7
   db006:	4639      	mov	r1, r7
   db008:	f001 fc5c 	bl	dc8c4 <__aeabi_dmul>
   db00c:	4632      	mov	r2, r6
   db00e:	463b      	mov	r3, r7
   db010:	f001 faa2 	bl	dc558 <__adddf3>
   db014:	ec41 0b10 	vmov	d0, r0, r1
   db018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db01c:	ee10 2a10 	vmov	r2, s0
   db020:	4630      	mov	r0, r6
   db022:	4639      	mov	r1, r7
   db024:	f001 fa96 	bl	dc554 <__aeabi_dsub>
   db028:	4602      	mov	r2, r0
   db02a:	460b      	mov	r3, r1
   db02c:	f001 fd74 	bl	dcb18 <__aeabi_ddiv>
   db030:	ec41 0b10 	vmov	d0, r0, r1
   db034:	e7d9      	b.n	dafea <__ieee754_sqrt+0x12e>
   db036:	4623      	mov	r3, r4
   db038:	2020      	movs	r0, #32
   db03a:	f04f 35ff 	mov.w	r5, #4294967295
   db03e:	e7b4      	b.n	dafaa <__ieee754_sqrt+0xee>
   db040:	7ff00000 	.word	0x7ff00000

000db044 <__ieee754_atan2f>:
   db044:	b510      	push	{r4, lr}
   db046:	b082      	sub	sp, #8
   db048:	edcd 0a01 	vstr	s1, [sp, #4]
   db04c:	9b01      	ldr	r3, [sp, #4]
   db04e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   db052:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   db056:	eef0 7a40 	vmov.f32	s15, s0
   db05a:	dc30      	bgt.n	db0be <__ieee754_atan2f+0x7a>
   db05c:	ee10 0a10 	vmov	r0, s0
   db060:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   db064:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   db068:	dc29      	bgt.n	db0be <__ieee754_atan2f+0x7a>
   db06a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   db06e:	d042      	beq.n	db0f6 <__ieee754_atan2f+0xb2>
   db070:	179c      	asrs	r4, r3, #30
   db072:	f004 0402 	and.w	r4, r4, #2
   db076:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   db07a:	b331      	cbz	r1, db0ca <__ieee754_atan2f+0x86>
   db07c:	b37a      	cbz	r2, db0de <__ieee754_atan2f+0x9a>
   db07e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   db082:	d040      	beq.n	db106 <__ieee754_atan2f+0xc2>
   db084:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   db088:	d029      	beq.n	db0de <__ieee754_atan2f+0x9a>
   db08a:	1a8a      	subs	r2, r1, r2
   db08c:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   db090:	ea4f 51e2 	mov.w	r1, r2, asr #23
   db094:	da34      	bge.n	db100 <__ieee754_atan2f+0xbc>
   db096:	2b00      	cmp	r3, #0
   db098:	da42      	bge.n	db120 <__ieee754_atan2f+0xdc>
   db09a:	313c      	adds	r1, #60	; 0x3c
   db09c:	da40      	bge.n	db120 <__ieee754_atan2f+0xdc>
   db09e:	ed9f 0a34 	vldr	s0, [pc, #208]	; db170 <__ieee754_atan2f+0x12c>
   db0a2:	2c01      	cmp	r4, #1
   db0a4:	d04e      	beq.n	db144 <__ieee754_atan2f+0x100>
   db0a6:	2c02      	cmp	r4, #2
   db0a8:	d043      	beq.n	db132 <__ieee754_atan2f+0xee>
   db0aa:	b164      	cbz	r4, db0c6 <__ieee754_atan2f+0x82>
   db0ac:	ed9f 7a31 	vldr	s14, [pc, #196]	; db174 <__ieee754_atan2f+0x130>
   db0b0:	eddf 7a31 	vldr	s15, [pc, #196]	; db178 <__ieee754_atan2f+0x134>
   db0b4:	ee30 0a07 	vadd.f32	s0, s0, s14
   db0b8:	ee30 0a67 	vsub.f32	s0, s0, s15
   db0bc:	e003      	b.n	db0c6 <__ieee754_atan2f+0x82>
   db0be:	ed9d 7a01 	vldr	s14, [sp, #4]
   db0c2:	ee37 0a27 	vadd.f32	s0, s14, s15
   db0c6:	b002      	add	sp, #8
   db0c8:	bd10      	pop	{r4, pc}
   db0ca:	2c02      	cmp	r4, #2
   db0cc:	d010      	beq.n	db0f0 <__ieee754_atan2f+0xac>
   db0ce:	ed9f 0a2b 	vldr	s0, [pc, #172]	; db17c <__ieee754_atan2f+0x138>
   db0d2:	2c03      	cmp	r4, #3
   db0d4:	bf18      	it	ne
   db0d6:	eeb0 0a67 	vmovne.f32	s0, s15
   db0da:	b002      	add	sp, #8
   db0dc:	bd10      	pop	{r4, pc}
   db0de:	ed9f 0a28 	vldr	s0, [pc, #160]	; db180 <__ieee754_atan2f+0x13c>
   db0e2:	eddf 7a28 	vldr	s15, [pc, #160]	; db184 <__ieee754_atan2f+0x140>
   db0e6:	2800      	cmp	r0, #0
   db0e8:	bfb8      	it	lt
   db0ea:	eeb0 0a67 	vmovlt.f32	s0, s15
   db0ee:	e7ea      	b.n	db0c6 <__ieee754_atan2f+0x82>
   db0f0:	ed9f 0a21 	vldr	s0, [pc, #132]	; db178 <__ieee754_atan2f+0x134>
   db0f4:	e7e7      	b.n	db0c6 <__ieee754_atan2f+0x82>
   db0f6:	b002      	add	sp, #8
   db0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   db0fc:	f001 b88e 	b.w	dc21c <atanf>
   db100:	ed9f 0a1f 	vldr	s0, [pc, #124]	; db180 <__ieee754_atan2f+0x13c>
   db104:	e7cd      	b.n	db0a2 <__ieee754_atan2f+0x5e>
   db106:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   db10a:	f104 34ff 	add.w	r4, r4, #4294967295
   db10e:	d020      	beq.n	db152 <__ieee754_atan2f+0x10e>
   db110:	2c02      	cmp	r4, #2
   db112:	d826      	bhi.n	db162 <__ieee754_atan2f+0x11e>
   db114:	4b1c      	ldr	r3, [pc, #112]	; (db188 <__ieee754_atan2f+0x144>)
   db116:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db11a:	ed94 0a00 	vldr	s0, [r4]
   db11e:	e7d2      	b.n	db0c6 <__ieee754_atan2f+0x82>
   db120:	ed9d 7a01 	vldr	s14, [sp, #4]
   db124:	ee87 0a87 	vdiv.f32	s0, s15, s14
   db128:	f001 f950 	bl	dc3cc <fabsf>
   db12c:	f001 f876 	bl	dc21c <atanf>
   db130:	e7b7      	b.n	db0a2 <__ieee754_atan2f+0x5e>
   db132:	ed9f 7a10 	vldr	s14, [pc, #64]	; db174 <__ieee754_atan2f+0x130>
   db136:	eddf 7a10 	vldr	s15, [pc, #64]	; db178 <__ieee754_atan2f+0x134>
   db13a:	ee30 0a07 	vadd.f32	s0, s0, s14
   db13e:	ee37 0ac0 	vsub.f32	s0, s15, s0
   db142:	e7c0      	b.n	db0c6 <__ieee754_atan2f+0x82>
   db144:	ee10 3a10 	vmov	r3, s0
   db148:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   db14c:	ee00 3a10 	vmov	s0, r3
   db150:	e7b9      	b.n	db0c6 <__ieee754_atan2f+0x82>
   db152:	2c02      	cmp	r4, #2
   db154:	d808      	bhi.n	db168 <__ieee754_atan2f+0x124>
   db156:	4b0d      	ldr	r3, [pc, #52]	; (db18c <__ieee754_atan2f+0x148>)
   db158:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db15c:	ed94 0a00 	vldr	s0, [r4]
   db160:	e7b1      	b.n	db0c6 <__ieee754_atan2f+0x82>
   db162:	ed9f 0a03 	vldr	s0, [pc, #12]	; db170 <__ieee754_atan2f+0x12c>
   db166:	e7ae      	b.n	db0c6 <__ieee754_atan2f+0x82>
   db168:	ed9f 0a09 	vldr	s0, [pc, #36]	; db190 <__ieee754_atan2f+0x14c>
   db16c:	e7ab      	b.n	db0c6 <__ieee754_atan2f+0x82>
   db16e:	bf00      	nop
   db170:	00000000 	.word	0x00000000
   db174:	33bbbd2e 	.word	0x33bbbd2e
   db178:	40490fdb 	.word	0x40490fdb
   db17c:	c0490fdb 	.word	0xc0490fdb
   db180:	3fc90fdb 	.word	0x3fc90fdb
   db184:	bfc90fdb 	.word	0xbfc90fdb
   db188:	000de928 	.word	0x000de928
   db18c:	000de91c 	.word	0x000de91c
   db190:	3f490fdb 	.word	0x3f490fdb

000db194 <__ieee754_rem_pio2f>:
   db194:	b570      	push	{r4, r5, r6, lr}
   db196:	ee10 3a10 	vmov	r3, s0
   db19a:	4a95      	ldr	r2, [pc, #596]	; (db3f0 <__ieee754_rem_pio2f+0x25c>)
   db19c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   db1a0:	4294      	cmp	r4, r2
   db1a2:	b086      	sub	sp, #24
   db1a4:	4605      	mov	r5, r0
   db1a6:	dd68      	ble.n	db27a <__ieee754_rem_pio2f+0xe6>
   db1a8:	4a92      	ldr	r2, [pc, #584]	; (db3f4 <__ieee754_rem_pio2f+0x260>)
   db1aa:	4294      	cmp	r4, r2
   db1ac:	ee10 6a10 	vmov	r6, s0
   db1b0:	dc1a      	bgt.n	db1e8 <__ieee754_rem_pio2f+0x54>
   db1b2:	2b00      	cmp	r3, #0
   db1b4:	eddf 7a90 	vldr	s15, [pc, #576]	; db3f8 <__ieee754_rem_pio2f+0x264>
   db1b8:	4a90      	ldr	r2, [pc, #576]	; (db3fc <__ieee754_rem_pio2f+0x268>)
   db1ba:	f024 040f 	bic.w	r4, r4, #15
   db1be:	f340 80f1 	ble.w	db3a4 <__ieee754_rem_pio2f+0x210>
   db1c2:	4294      	cmp	r4, r2
   db1c4:	ee70 7a67 	vsub.f32	s15, s0, s15
   db1c8:	d066      	beq.n	db298 <__ieee754_rem_pio2f+0x104>
   db1ca:	ed9f 7a8d 	vldr	s14, [pc, #564]	; db400 <__ieee754_rem_pio2f+0x26c>
   db1ce:	ee77 6ac7 	vsub.f32	s13, s15, s14
   db1d2:	2001      	movs	r0, #1
   db1d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db1d8:	edc5 6a00 	vstr	s13, [r5]
   db1dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db1e0:	edc5 7a01 	vstr	s15, [r5, #4]
   db1e4:	b006      	add	sp, #24
   db1e6:	bd70      	pop	{r4, r5, r6, pc}
   db1e8:	4a86      	ldr	r2, [pc, #536]	; (db404 <__ieee754_rem_pio2f+0x270>)
   db1ea:	4294      	cmp	r4, r2
   db1ec:	dd67      	ble.n	db2be <__ieee754_rem_pio2f+0x12a>
   db1ee:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   db1f2:	da49      	bge.n	db288 <__ieee754_rem_pio2f+0xf4>
   db1f4:	15e2      	asrs	r2, r4, #23
   db1f6:	3a86      	subs	r2, #134	; 0x86
   db1f8:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   db1fc:	ee07 3a90 	vmov	s15, r3
   db200:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   db204:	eddf 6a80 	vldr	s13, [pc, #512]	; db408 <__ieee754_rem_pio2f+0x274>
   db208:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   db20c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db210:	ed8d 7a03 	vstr	s14, [sp, #12]
   db214:	ee67 7aa6 	vmul.f32	s15, s15, s13
   db218:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   db21c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   db220:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db224:	ed8d 7a04 	vstr	s14, [sp, #16]
   db228:	ee67 7aa6 	vmul.f32	s15, s15, s13
   db22c:	eef5 7a40 	vcmp.f32	s15, #0.0
   db230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db234:	edcd 7a05 	vstr	s15, [sp, #20]
   db238:	f040 80a3 	bne.w	db382 <__ieee754_rem_pio2f+0x1ee>
   db23c:	eeb5 7a40 	vcmp.f32	s14, #0.0
   db240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db244:	bf14      	ite	ne
   db246:	2302      	movne	r3, #2
   db248:	2301      	moveq	r3, #1
   db24a:	4970      	ldr	r1, [pc, #448]	; (db40c <__ieee754_rem_pio2f+0x278>)
   db24c:	9101      	str	r1, [sp, #4]
   db24e:	2102      	movs	r1, #2
   db250:	9100      	str	r1, [sp, #0]
   db252:	a803      	add	r0, sp, #12
   db254:	4629      	mov	r1, r5
   db256:	f000 f969 	bl	db52c <__kernel_rem_pio2f>
   db25a:	2e00      	cmp	r6, #0
   db25c:	dac2      	bge.n	db1e4 <__ieee754_rem_pio2f+0x50>
   db25e:	ed95 7a00 	vldr	s14, [r5]
   db262:	edd5 7a01 	vldr	s15, [r5, #4]
   db266:	eeb1 7a47 	vneg.f32	s14, s14
   db26a:	eef1 7a67 	vneg.f32	s15, s15
   db26e:	4240      	negs	r0, r0
   db270:	ed85 7a00 	vstr	s14, [r5]
   db274:	edc5 7a01 	vstr	s15, [r5, #4]
   db278:	e7b4      	b.n	db1e4 <__ieee754_rem_pio2f+0x50>
   db27a:	2200      	movs	r2, #0
   db27c:	ed85 0a00 	vstr	s0, [r5]
   db280:	6042      	str	r2, [r0, #4]
   db282:	2000      	movs	r0, #0
   db284:	b006      	add	sp, #24
   db286:	bd70      	pop	{r4, r5, r6, pc}
   db288:	ee70 7a40 	vsub.f32	s15, s0, s0
   db28c:	2000      	movs	r0, #0
   db28e:	edc5 7a01 	vstr	s15, [r5, #4]
   db292:	edc5 7a00 	vstr	s15, [r5]
   db296:	e7a5      	b.n	db1e4 <__ieee754_rem_pio2f+0x50>
   db298:	eddf 6a5d 	vldr	s13, [pc, #372]	; db410 <__ieee754_rem_pio2f+0x27c>
   db29c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; db414 <__ieee754_rem_pio2f+0x280>
   db2a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db2a4:	2001      	movs	r0, #1
   db2a6:	ee77 6ac7 	vsub.f32	s13, s15, s14
   db2aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db2ae:	edc5 6a00 	vstr	s13, [r5]
   db2b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db2b6:	edc5 7a01 	vstr	s15, [r5, #4]
   db2ba:	b006      	add	sp, #24
   db2bc:	bd70      	pop	{r4, r5, r6, pc}
   db2be:	f001 f885 	bl	dc3cc <fabsf>
   db2c2:	eddf 6a55 	vldr	s13, [pc, #340]	; db418 <__ieee754_rem_pio2f+0x284>
   db2c6:	ed9f 6a4c 	vldr	s12, [pc, #304]	; db3f8 <__ieee754_rem_pio2f+0x264>
   db2ca:	ed9f 7a4d 	vldr	s14, [pc, #308]	; db400 <__ieee754_rem_pio2f+0x26c>
   db2ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   db2d2:	eee0 7a26 	vfma.f32	s15, s0, s13
   db2d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db2da:	ee17 0a90 	vmov	r0, s15
   db2de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   db2e2:	281f      	cmp	r0, #31
   db2e4:	eea6 0ac6 	vfms.f32	s0, s13, s12
   db2e8:	ee66 7a87 	vmul.f32	s15, s13, s14
   db2ec:	eeb1 6a66 	vneg.f32	s12, s13
   db2f0:	dc1e      	bgt.n	db330 <__ieee754_rem_pio2f+0x19c>
   db2f2:	4a4a      	ldr	r2, [pc, #296]	; (db41c <__ieee754_rem_pio2f+0x288>)
   db2f4:	1e41      	subs	r1, r0, #1
   db2f6:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   db2fa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   db2fe:	4293      	cmp	r3, r2
   db300:	d016      	beq.n	db330 <__ieee754_rem_pio2f+0x19c>
   db302:	ee30 7a67 	vsub.f32	s14, s0, s15
   db306:	ed85 7a00 	vstr	s14, [r5]
   db30a:	ee30 0a47 	vsub.f32	s0, s0, s14
   db30e:	2e00      	cmp	r6, #0
   db310:	ee30 0a67 	vsub.f32	s0, s0, s15
   db314:	ed85 0a01 	vstr	s0, [r5, #4]
   db318:	f6bf af64 	bge.w	db1e4 <__ieee754_rem_pio2f+0x50>
   db31c:	eeb1 7a47 	vneg.f32	s14, s14
   db320:	eeb1 0a40 	vneg.f32	s0, s0
   db324:	ed85 7a00 	vstr	s14, [r5]
   db328:	ed85 0a01 	vstr	s0, [r5, #4]
   db32c:	4240      	negs	r0, r0
   db32e:	e759      	b.n	db1e4 <__ieee754_rem_pio2f+0x50>
   db330:	ee30 7a67 	vsub.f32	s14, s0, s15
   db334:	15e2      	asrs	r2, r4, #23
   db336:	ee17 3a10 	vmov	r3, s14
   db33a:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   db33e:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   db342:	2c08      	cmp	r4, #8
   db344:	dddf      	ble.n	db306 <__ieee754_rem_pio2f+0x172>
   db346:	eddf 7a32 	vldr	s15, [pc, #200]	; db410 <__ieee754_rem_pio2f+0x27c>
   db34a:	ed9f 7a32 	vldr	s14, [pc, #200]	; db414 <__ieee754_rem_pio2f+0x280>
   db34e:	eef0 5a40 	vmov.f32	s11, s0
   db352:	eee6 5a27 	vfma.f32	s11, s12, s15
   db356:	ee30 0a65 	vsub.f32	s0, s0, s11
   db35a:	eea6 0a27 	vfma.f32	s0, s12, s15
   db35e:	eef0 7a40 	vmov.f32	s15, s0
   db362:	eed6 7a87 	vfnms.f32	s15, s13, s14
   db366:	ee35 7ae7 	vsub.f32	s14, s11, s15
   db36a:	ee17 3a10 	vmov	r3, s14
   db36e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   db372:	1ad2      	subs	r2, r2, r3
   db374:	2a19      	cmp	r2, #25
   db376:	dc06      	bgt.n	db386 <__ieee754_rem_pio2f+0x1f2>
   db378:	ed85 7a00 	vstr	s14, [r5]
   db37c:	eeb0 0a65 	vmov.f32	s0, s11
   db380:	e7c3      	b.n	db30a <__ieee754_rem_pio2f+0x176>
   db382:	2303      	movs	r3, #3
   db384:	e761      	b.n	db24a <__ieee754_rem_pio2f+0xb6>
   db386:	ed9f 7a26 	vldr	s14, [pc, #152]	; db420 <__ieee754_rem_pio2f+0x28c>
   db38a:	ed9f 5a26 	vldr	s10, [pc, #152]	; db424 <__ieee754_rem_pio2f+0x290>
   db38e:	eeb0 0a65 	vmov.f32	s0, s11
   db392:	eea6 0a07 	vfma.f32	s0, s12, s14
   db396:	ee75 7ac0 	vsub.f32	s15, s11, s0
   db39a:	eee6 7a07 	vfma.f32	s15, s12, s14
   db39e:	eed6 7a85 	vfnms.f32	s15, s13, s10
   db3a2:	e7ae      	b.n	db302 <__ieee754_rem_pio2f+0x16e>
   db3a4:	4294      	cmp	r4, r2
   db3a6:	ee70 7a27 	vadd.f32	s15, s0, s15
   db3aa:	d00e      	beq.n	db3ca <__ieee754_rem_pio2f+0x236>
   db3ac:	ed9f 7a14 	vldr	s14, [pc, #80]	; db400 <__ieee754_rem_pio2f+0x26c>
   db3b0:	ee77 6a87 	vadd.f32	s13, s15, s14
   db3b4:	f04f 30ff 	mov.w	r0, #4294967295
   db3b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db3bc:	edc5 6a00 	vstr	s13, [r5]
   db3c0:	ee77 7a87 	vadd.f32	s15, s15, s14
   db3c4:	edc5 7a01 	vstr	s15, [r5, #4]
   db3c8:	e70c      	b.n	db1e4 <__ieee754_rem_pio2f+0x50>
   db3ca:	eddf 6a11 	vldr	s13, [pc, #68]	; db410 <__ieee754_rem_pio2f+0x27c>
   db3ce:	ed9f 7a11 	vldr	s14, [pc, #68]	; db414 <__ieee754_rem_pio2f+0x280>
   db3d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
   db3d6:	f04f 30ff 	mov.w	r0, #4294967295
   db3da:	ee77 6a87 	vadd.f32	s13, s15, s14
   db3de:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db3e2:	edc5 6a00 	vstr	s13, [r5]
   db3e6:	ee77 7a87 	vadd.f32	s15, s15, s14
   db3ea:	edc5 7a01 	vstr	s15, [r5, #4]
   db3ee:	e6f9      	b.n	db1e4 <__ieee754_rem_pio2f+0x50>
   db3f0:	3f490fd8 	.word	0x3f490fd8
   db3f4:	4016cbe3 	.word	0x4016cbe3
   db3f8:	3fc90f80 	.word	0x3fc90f80
   db3fc:	3fc90fd0 	.word	0x3fc90fd0
   db400:	37354443 	.word	0x37354443
   db404:	43490f80 	.word	0x43490f80
   db408:	43800000 	.word	0x43800000
   db40c:	000de9b4 	.word	0x000de9b4
   db410:	37354400 	.word	0x37354400
   db414:	2e85a308 	.word	0x2e85a308
   db418:	3f22f984 	.word	0x3f22f984
   db41c:	000de934 	.word	0x000de934
   db420:	2e85a300 	.word	0x2e85a300
   db424:	248d3132 	.word	0x248d3132

000db428 <__kernel_cosf>:
   db428:	ee10 3a10 	vmov	r3, s0
   db42c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   db430:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   db434:	da2c      	bge.n	db490 <__kernel_cosf+0x68>
   db436:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   db43a:	ee17 3a90 	vmov	r3, s15
   db43e:	2b00      	cmp	r3, #0
   db440:	d060      	beq.n	db504 <__kernel_cosf+0xdc>
   db442:	ee20 7a00 	vmul.f32	s14, s0, s0
   db446:	eddf 4a31 	vldr	s9, [pc, #196]	; db50c <__kernel_cosf+0xe4>
   db44a:	ed9f 5a31 	vldr	s10, [pc, #196]	; db510 <__kernel_cosf+0xe8>
   db44e:	eddf 5a31 	vldr	s11, [pc, #196]	; db514 <__kernel_cosf+0xec>
   db452:	ed9f 6a31 	vldr	s12, [pc, #196]	; db518 <__kernel_cosf+0xf0>
   db456:	eddf 7a31 	vldr	s15, [pc, #196]	; db51c <__kernel_cosf+0xf4>
   db45a:	eddf 6a31 	vldr	s13, [pc, #196]	; db520 <__kernel_cosf+0xf8>
   db45e:	eea7 5a24 	vfma.f32	s10, s14, s9
   db462:	eee7 5a05 	vfma.f32	s11, s14, s10
   db466:	eea7 6a25 	vfma.f32	s12, s14, s11
   db46a:	eee7 7a06 	vfma.f32	s15, s14, s12
   db46e:	eee7 6a27 	vfma.f32	s13, s14, s15
   db472:	ee67 6a26 	vmul.f32	s13, s14, s13
   db476:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   db47a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   db47e:	eee7 0a26 	vfma.f32	s1, s14, s13
   db482:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db486:	eed7 0a27 	vfnms.f32	s1, s14, s15
   db48a:	ee30 0a60 	vsub.f32	s0, s0, s1
   db48e:	4770      	bx	lr
   db490:	ee20 7a00 	vmul.f32	s14, s0, s0
   db494:	eddf 4a1d 	vldr	s9, [pc, #116]	; db50c <__kernel_cosf+0xe4>
   db498:	ed9f 5a1d 	vldr	s10, [pc, #116]	; db510 <__kernel_cosf+0xe8>
   db49c:	eddf 5a1d 	vldr	s11, [pc, #116]	; db514 <__kernel_cosf+0xec>
   db4a0:	ed9f 6a1d 	vldr	s12, [pc, #116]	; db518 <__kernel_cosf+0xf0>
   db4a4:	eddf 7a1d 	vldr	s15, [pc, #116]	; db51c <__kernel_cosf+0xf4>
   db4a8:	eddf 6a1d 	vldr	s13, [pc, #116]	; db520 <__kernel_cosf+0xf8>
   db4ac:	4a1d      	ldr	r2, [pc, #116]	; (db524 <__kernel_cosf+0xfc>)
   db4ae:	eea7 5a24 	vfma.f32	s10, s14, s9
   db4b2:	4293      	cmp	r3, r2
   db4b4:	eee5 5a07 	vfma.f32	s11, s10, s14
   db4b8:	eea5 6a87 	vfma.f32	s12, s11, s14
   db4bc:	eee6 7a07 	vfma.f32	s15, s12, s14
   db4c0:	eee7 6a87 	vfma.f32	s13, s15, s14
   db4c4:	ee66 6a87 	vmul.f32	s13, s13, s14
   db4c8:	ddd5      	ble.n	db476 <__kernel_cosf+0x4e>
   db4ca:	4a17      	ldr	r2, [pc, #92]	; (db528 <__kernel_cosf+0x100>)
   db4cc:	4293      	cmp	r3, r2
   db4ce:	dc14      	bgt.n	db4fa <__kernel_cosf+0xd2>
   db4d0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   db4d4:	ee07 3a90 	vmov	s15, r3
   db4d8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   db4dc:	ee36 6a67 	vsub.f32	s12, s12, s15
   db4e0:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   db4e4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   db4e8:	eee7 0a26 	vfma.f32	s1, s14, s13
   db4ec:	eed7 7a25 	vfnms.f32	s15, s14, s11
   db4f0:	ee77 0ae0 	vsub.f32	s1, s15, s1
   db4f4:	ee36 0a60 	vsub.f32	s0, s12, s1
   db4f8:	4770      	bx	lr
   db4fa:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   db4fe:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   db502:	e7ed      	b.n	db4e0 <__kernel_cosf+0xb8>
   db504:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db508:	4770      	bx	lr
   db50a:	bf00      	nop
   db50c:	ad47d74e 	.word	0xad47d74e
   db510:	310f74f6 	.word	0x310f74f6
   db514:	b493f27c 	.word	0xb493f27c
   db518:	37d00d01 	.word	0x37d00d01
   db51c:	bab60b61 	.word	0xbab60b61
   db520:	3d2aaaab 	.word	0x3d2aaaab
   db524:	3e999999 	.word	0x3e999999
   db528:	3f480000 	.word	0x3f480000

000db52c <__kernel_rem_pio2f>:
   db52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db530:	ed2d 8b04 	vpush	{d8-d9}
   db534:	b0db      	sub	sp, #364	; 0x16c
   db536:	4cd7      	ldr	r4, [pc, #860]	; (db894 <__kernel_rem_pio2f+0x368>)
   db538:	9d68      	ldr	r5, [sp, #416]	; 0x1a0
   db53a:	9107      	str	r1, [sp, #28]
   db53c:	1d11      	adds	r1, r2, #4
   db53e:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   db542:	9304      	str	r3, [sp, #16]
   db544:	9209      	str	r2, [sp, #36]	; 0x24
   db546:	4683      	mov	fp, r0
   db548:	f103 39ff 	add.w	r9, r3, #4294967295
   db54c:	f2c0 829d 	blt.w	dba8a <__kernel_rem_pio2f+0x55e>
   db550:	1ed3      	subs	r3, r2, #3
   db552:	bf44      	itt	mi
   db554:	4613      	movmi	r3, r2
   db556:	3304      	addmi	r3, #4
   db558:	10db      	asrs	r3, r3, #3
   db55a:	9303      	str	r3, [sp, #12]
   db55c:	3301      	adds	r3, #1
   db55e:	00db      	lsls	r3, r3, #3
   db560:	9308      	str	r3, [sp, #32]
   db562:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db566:	1a9b      	subs	r3, r3, r2
   db568:	9306      	str	r3, [sp, #24]
   db56a:	9b03      	ldr	r3, [sp, #12]
   db56c:	eb16 0109 	adds.w	r1, r6, r9
   db570:	eba3 0309 	sub.w	r3, r3, r9
   db574:	d416      	bmi.n	db5a4 <__kernel_rem_pio2f+0x78>
   db576:	3101      	adds	r1, #1
   db578:	ed9f 7ac7 	vldr	s14, [pc, #796]	; db898 <__kernel_rem_pio2f+0x36c>
   db57c:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   db57e:	4419      	add	r1, r3
   db580:	aa1e      	add	r2, sp, #120	; 0x78
   db582:	2b00      	cmp	r3, #0
   db584:	bfa4      	itt	ge
   db586:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   db58a:	ee07 4a90 	vmovge	s15, r4
   db58e:	f103 0301 	add.w	r3, r3, #1
   db592:	bfac      	ite	ge
   db594:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   db598:	eef0 7a47 	vmovlt.f32	s15, s14
   db59c:	428b      	cmp	r3, r1
   db59e:	ece2 7a01 	vstmia	r2!, {s15}
   db5a2:	d1ee      	bne.n	db582 <__kernel_rem_pio2f+0x56>
   db5a4:	2e00      	cmp	r6, #0
   db5a6:	f2c0 82e0 	blt.w	dbb6a <__kernel_rem_pio2f+0x63e>
   db5aa:	9b04      	ldr	r3, [sp, #16]
   db5ac:	a91e      	add	r1, sp, #120	; 0x78
   db5ae:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   db5b2:	ad46      	add	r5, sp, #280	; 0x118
   db5b4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   db5b8:	4648      	mov	r0, r9
   db5ba:	18f7      	adds	r7, r6, r3
   db5bc:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
   db5c0:	f1b9 0f00 	cmp.w	r9, #0
   db5c4:	eddf 7ab4 	vldr	s15, [pc, #720]	; db898 <__kernel_rem_pio2f+0x36c>
   db5c8:	db09      	blt.n	db5de <__kernel_rem_pio2f+0xb2>
   db5ca:	4622      	mov	r2, r4
   db5cc:	465b      	mov	r3, fp
   db5ce:	ecf3 6a01 	vldmia	r3!, {s13}
   db5d2:	ed32 7a01 	vldmdb	r2!, {s14}
   db5d6:	428b      	cmp	r3, r1
   db5d8:	eee6 7a87 	vfma.f32	s15, s13, s14
   db5dc:	d1f7      	bne.n	db5ce <__kernel_rem_pio2f+0xa2>
   db5de:	3001      	adds	r0, #1
   db5e0:	42b8      	cmp	r0, r7
   db5e2:	ece5 7a01 	vstmia	r5!, {s15}
   db5e6:	f104 0404 	add.w	r4, r4, #4
   db5ea:	d1e9      	bne.n	db5c0 <__kernel_rem_pio2f+0x94>
   db5ec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   db5f0:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   db5f4:	3b08      	subs	r3, #8
   db5f6:	9305      	str	r3, [sp, #20]
   db5f8:	ed9f 9aa9 	vldr	s18, [pc, #676]	; db8a0 <__kernel_rem_pio2f+0x374>
   db5fc:	eddf 8aa7 	vldr	s17, [pc, #668]	; db89c <__kernel_rem_pio2f+0x370>
   db600:	9806      	ldr	r0, [sp, #24]
   db602:	9600      	str	r6, [sp, #0]
   db604:	ab09      	add	r3, sp, #36	; 0x24
   db606:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
   db60a:	eb0b 040c 	add.w	r4, fp, ip
   db60e:	af46      	add	r7, sp, #280	; 0x118
   db610:	465b      	mov	r3, fp
   db612:	aa5a      	add	r2, sp, #360	; 0x168
   db614:	eb02 0286 	add.w	r2, r2, r6, lsl #2
   db618:	2e00      	cmp	r6, #0
   db61a:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
   db61e:	ea4f 0b86 	mov.w	fp, r6, lsl #2
   db622:	dd16      	ble.n	db652 <__kernel_rem_pio2f+0x126>
   db624:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   db628:	4641      	mov	r1, r8
   db62a:	ee60 7a09 	vmul.f32	s15, s0, s18
   db62e:	eeb0 7a40 	vmov.f32	s14, s0
   db632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db636:	ed72 6a01 	vldmdb	r2!, {s13}
   db63a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db63e:	42ba      	cmp	r2, r7
   db640:	eea7 7ae8 	vfms.f32	s14, s15, s17
   db644:	ee37 0aa6 	vadd.f32	s0, s15, s13
   db648:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   db64c:	eca1 7a01 	vstmia	r1!, {s14}
   db650:	d1eb      	bne.n	db62a <__kernel_rem_pio2f+0xfe>
   db652:	e9cd 0301 	strd	r0, r3, [sp, #4]
   db656:	f000 ff07 	bl	dc468 <scalbnf>
   db65a:	eeb0 8a40 	vmov.f32	s16, s0
   db65e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   db662:	ee28 0a00 	vmul.f32	s0, s16, s0
   db666:	f000 feb9 	bl	dc3dc <floorf>
   db66a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   db66e:	eea0 8a67 	vfms.f32	s16, s0, s15
   db672:	9801      	ldr	r0, [sp, #4]
   db674:	9b02      	ldr	r3, [sp, #8]
   db676:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   db67a:	2800      	cmp	r0, #0
   db67c:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   db680:	ee38 8a67 	vsub.f32	s16, s16, s15
   db684:	dd78      	ble.n	db778 <__kernel_rem_pio2f+0x24c>
   db686:	f106 3cff 	add.w	ip, r6, #4294967295
   db68a:	f1c0 0208 	rsb	r2, r0, #8
   db68e:	f858 502c 	ldr.w	r5, [r8, ip, lsl #2]
   db692:	fa45 f102 	asr.w	r1, r5, r2
   db696:	fa01 f202 	lsl.w	r2, r1, r2
   db69a:	1aaa      	subs	r2, r5, r2
   db69c:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   db6a0:	f1c0 0507 	rsb	r5, r0, #7
   db6a4:	ee19 ca90 	vmov	ip, s19
   db6a8:	fa42 f505 	asr.w	r5, r2, r5
   db6ac:	448c      	add	ip, r1
   db6ae:	2d00      	cmp	r5, #0
   db6b0:	ee09 ca90 	vmov	s19, ip
   db6b4:	dc68      	bgt.n	db788 <__kernel_rem_pio2f+0x25c>
   db6b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
   db6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db6be:	f040 80b6 	bne.w	db82e <__kernel_rem_pio2f+0x302>
   db6c2:	9a00      	ldr	r2, [sp, #0]
   db6c4:	f106 3eff 	add.w	lr, r6, #4294967295
   db6c8:	4572      	cmp	r2, lr
   db6ca:	dc10      	bgt.n	db6ee <__kernel_rem_pio2f+0x1c2>
   db6cc:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
   db6d0:	3a01      	subs	r2, #1
   db6d2:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   db6d6:	2100      	movs	r1, #0
   db6d8:	469c      	mov	ip, r3
   db6da:	f852 3904 	ldr.w	r3, [r2], #-4
   db6de:	4552      	cmp	r2, sl
   db6e0:	ea41 0103 	orr.w	r1, r1, r3
   db6e4:	d1f9      	bne.n	db6da <__kernel_rem_pio2f+0x1ae>
   db6e6:	4663      	mov	r3, ip
   db6e8:	2900      	cmp	r1, #0
   db6ea:	f040 80f2 	bne.w	db8d2 <__kernel_rem_pio2f+0x3a6>
   db6ee:	9a00      	ldr	r2, [sp, #0]
   db6f0:	3a01      	subs	r2, #1
   db6f2:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
   db6f6:	2a00      	cmp	r2, #0
   db6f8:	f040 80e6 	bne.w	db8c8 <__kernel_rem_pio2f+0x39c>
   db6fc:	9a05      	ldr	r2, [sp, #20]
   db6fe:	f04f 0c01 	mov.w	ip, #1
   db702:	f852 1904 	ldr.w	r1, [r2], #-4
   db706:	f10c 0c01 	add.w	ip, ip, #1
   db70a:	2900      	cmp	r1, #0
   db70c:	d0f9      	beq.n	db702 <__kernel_rem_pio2f+0x1d6>
   db70e:	f106 0b01 	add.w	fp, r6, #1
   db712:	44b4      	add	ip, r6
   db714:	46de      	mov	lr, fp
   db716:	9904      	ldr	r1, [sp, #16]
   db718:	9a03      	ldr	r2, [sp, #12]
   db71a:	198d      	adds	r5, r1, r6
   db71c:	445a      	add	r2, fp
   db71e:	a91e      	add	r1, sp, #120	; 0x78
   db720:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   db724:	eb01 0585 	add.w	r5, r1, r5, lsl #2
   db728:	9969      	ldr	r1, [sp, #420]	; 0x1a4
   db72a:	3a01      	subs	r2, #1
   db72c:	eb01 0682 	add.w	r6, r1, r2, lsl #2
   db730:	eb07 0b8b 	add.w	fp, r7, fp, lsl #2
   db734:	edd6 7a01 	vldr	s15, [r6, #4]
   db738:	ed9f 7a57 	vldr	s14, [pc, #348]	; db898 <__kernel_rem_pio2f+0x36c>
   db73c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db740:	f1b9 0f00 	cmp.w	r9, #0
   db744:	f106 0604 	add.w	r6, r6, #4
   db748:	4629      	mov	r1, r5
   db74a:	edc5 7a00 	vstr	s15, [r5]
   db74e:	f105 0504 	add.w	r5, r5, #4
   db752:	db09      	blt.n	db768 <__kernel_rem_pio2f+0x23c>
   db754:	461a      	mov	r2, r3
   db756:	e001      	b.n	db75c <__kernel_rem_pio2f+0x230>
   db758:	ed71 7a01 	vldmdb	r1!, {s15}
   db75c:	ecf2 6a01 	vldmia	r2!, {s13}
   db760:	42a2      	cmp	r2, r4
   db762:	eea6 7aa7 	vfma.f32	s14, s13, s15
   db766:	d1f7      	bne.n	db758 <__kernel_rem_pio2f+0x22c>
   db768:	f10e 0e01 	add.w	lr, lr, #1
   db76c:	45e6      	cmp	lr, ip
   db76e:	ecab 7a01 	vstmia	fp!, {s14}
   db772:	dddf      	ble.n	db734 <__kernel_rem_pio2f+0x208>
   db774:	4666      	mov	r6, ip
   db776:	e74c      	b.n	db612 <__kernel_rem_pio2f+0xe6>
   db778:	f040 809c 	bne.w	db8b4 <__kernel_rem_pio2f+0x388>
   db77c:	1e72      	subs	r2, r6, #1
   db77e:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
   db782:	122d      	asrs	r5, r5, #8
   db784:	2d00      	cmp	r5, #0
   db786:	dd96      	ble.n	db6b6 <__kernel_rem_pio2f+0x18a>
   db788:	ee19 2a90 	vmov	r2, s19
   db78c:	2e00      	cmp	r6, #0
   db78e:	f102 0201 	add.w	r2, r2, #1
   db792:	ee09 2a90 	vmov	s19, r2
   db796:	f340 818e 	ble.w	dbab6 <__kernel_rem_pio2f+0x58a>
   db79a:	f8d8 1000 	ldr.w	r1, [r8]
   db79e:	2900      	cmp	r1, #0
   db7a0:	d174      	bne.n	db88c <__kernel_rem_pio2f+0x360>
   db7a2:	2e01      	cmp	r6, #1
   db7a4:	d01c      	beq.n	db7e0 <__kernel_rem_pio2f+0x2b4>
   db7a6:	4642      	mov	r2, r8
   db7a8:	f04f 0c01 	mov.w	ip, #1
   db7ac:	f852 1f04 	ldr.w	r1, [r2, #4]!
   db7b0:	2900      	cmp	r1, #0
   db7b2:	d079      	beq.n	db8a8 <__kernel_rem_pio2f+0x37c>
   db7b4:	f10c 0201 	add.w	r2, ip, #1
   db7b8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   db7bc:	4296      	cmp	r6, r2
   db7be:	f848 102c 	str.w	r1, [r8, ip, lsl #2]
   db7c2:	dd0c      	ble.n	db7de <__kernel_rem_pio2f+0x2b2>
   db7c4:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
   db7c8:	44c3      	add	fp, r8
   db7ca:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   db7ce:	e000      	b.n	db7d2 <__kernel_rem_pio2f+0x2a6>
   db7d0:	6811      	ldr	r1, [r2, #0]
   db7d2:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   db7d6:	f842 1b04 	str.w	r1, [r2], #4
   db7da:	455a      	cmp	r2, fp
   db7dc:	d1f8      	bne.n	db7d0 <__kernel_rem_pio2f+0x2a4>
   db7de:	2101      	movs	r1, #1
   db7e0:	2800      	cmp	r0, #0
   db7e2:	dd0c      	ble.n	db7fe <__kernel_rem_pio2f+0x2d2>
   db7e4:	2801      	cmp	r0, #1
   db7e6:	f000 8147 	beq.w	dba78 <__kernel_rem_pio2f+0x54c>
   db7ea:	2802      	cmp	r0, #2
   db7ec:	d107      	bne.n	db7fe <__kernel_rem_pio2f+0x2d2>
   db7ee:	f106 3cff 	add.w	ip, r6, #4294967295
   db7f2:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   db7f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   db7fa:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   db7fe:	2d02      	cmp	r5, #2
   db800:	f47f af59 	bne.w	db6b6 <__kernel_rem_pio2f+0x18a>
   db804:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db808:	ee30 8a48 	vsub.f32	s16, s0, s16
   db80c:	2900      	cmp	r1, #0
   db80e:	f43f af52 	beq.w	db6b6 <__kernel_rem_pio2f+0x18a>
   db812:	e9cd 0301 	strd	r0, r3, [sp, #4]
   db816:	f000 fe27 	bl	dc468 <scalbnf>
   db81a:	ee38 8a40 	vsub.f32	s16, s16, s0
   db81e:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
   db822:	eeb5 8a40 	vcmp.f32	s16, #0.0
   db826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db82a:	f43f af4a 	beq.w	db6c2 <__kernel_rem_pio2f+0x196>
   db82e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   db832:	eeb0 0a48 	vmov.f32	s0, s16
   db836:	1a98      	subs	r0, r3, r2
   db838:	9602      	str	r6, [sp, #8]
   db83a:	9501      	str	r5, [sp, #4]
   db83c:	9e00      	ldr	r6, [sp, #0]
   db83e:	f000 fe13 	bl	dc468 <scalbnf>
   db842:	ed9f 7a16 	vldr	s14, [pc, #88]	; db89c <__kernel_rem_pio2f+0x370>
   db846:	eeb4 0ac7 	vcmpe.f32	s0, s14
   db84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db84e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   db852:	f2c0 8157 	blt.w	dbb04 <__kernel_rem_pio2f+0x5d8>
   db856:	eddf 7a12 	vldr	s15, [pc, #72]	; db8a0 <__kernel_rem_pio2f+0x374>
   db85a:	9906      	ldr	r1, [sp, #24]
   db85c:	ee60 7a27 	vmul.f32	s15, s0, s15
   db860:	3108      	adds	r1, #8
   db862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db866:	9106      	str	r1, [sp, #24]
   db868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db86c:	1c5d      	adds	r5, r3, #1
   db86e:	eea7 0ac7 	vfms.f32	s0, s15, s14
   db872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db876:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   db87a:	ee10 1a10 	vmov	r1, s0
   db87e:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   db882:	ee17 3a90 	vmov	r3, s15
   db886:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
   db88a:	e039      	b.n	db900 <__kernel_rem_pio2f+0x3d4>
   db88c:	2201      	movs	r2, #1
   db88e:	f04f 0c00 	mov.w	ip, #0
   db892:	e791      	b.n	db7b8 <__kernel_rem_pio2f+0x28c>
   db894:	000decf8 	.word	0x000decf8
   db898:	00000000 	.word	0x00000000
   db89c:	43800000 	.word	0x43800000
   db8a0:	3b800000 	.word	0x3b800000
   db8a4:	3fc90000 	.word	0x3fc90000
   db8a8:	f10c 0c01 	add.w	ip, ip, #1
   db8ac:	45b4      	cmp	ip, r6
   db8ae:	f47f af7d 	bne.w	db7ac <__kernel_rem_pio2f+0x280>
   db8b2:	e795      	b.n	db7e0 <__kernel_rem_pio2f+0x2b4>
   db8b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   db8b8:	eeb4 8ae7 	vcmpe.f32	s16, s15
   db8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db8c0:	f280 80e8 	bge.w	dba94 <__kernel_rem_pio2f+0x568>
   db8c4:	2500      	movs	r5, #0
   db8c6:	e6f6      	b.n	db6b6 <__kernel_rem_pio2f+0x18a>
   db8c8:	f106 0b01 	add.w	fp, r6, #1
   db8cc:	46de      	mov	lr, fp
   db8ce:	46dc      	mov	ip, fp
   db8d0:	e721      	b.n	db716 <__kernel_rem_pio2f+0x1ea>
   db8d2:	9806      	ldr	r0, [sp, #24]
   db8d4:	f858 102e 	ldr.w	r1, [r8, lr, lsl #2]
   db8d8:	3808      	subs	r0, #8
   db8da:	4633      	mov	r3, r6
   db8dc:	462a      	mov	r2, r5
   db8de:	9e00      	ldr	r6, [sp, #0]
   db8e0:	9006      	str	r0, [sp, #24]
   db8e2:	4675      	mov	r5, lr
   db8e4:	b961      	cbnz	r1, db900 <__kernel_rem_pio2f+0x3d4>
   db8e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   db8ea:	3b02      	subs	r3, #2
   db8ec:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   db8f0:	4601      	mov	r1, r0
   db8f2:	f853 0904 	ldr.w	r0, [r3], #-4
   db8f6:	3d01      	subs	r5, #1
   db8f8:	3908      	subs	r1, #8
   db8fa:	2800      	cmp	r0, #0
   db8fc:	d0f9      	beq.n	db8f2 <__kernel_rem_pio2f+0x3c6>
   db8fe:	9106      	str	r1, [sp, #24]
   db900:	9806      	ldr	r0, [sp, #24]
   db902:	9200      	str	r2, [sp, #0]
   db904:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db908:	f000 fdae 	bl	dc468 <scalbnf>
   db90c:	2d00      	cmp	r5, #0
   db90e:	9a00      	ldr	r2, [sp, #0]
   db910:	f2c0 811e 	blt.w	dbb50 <__kernel_rem_pio2f+0x624>
   db914:	ea4f 0e85 	mov.w	lr, r5, lsl #2
   db918:	ab46      	add	r3, sp, #280	; 0x118
   db91a:	eb03 070e 	add.w	r7, r3, lr
   db91e:	f10e 0c04 	add.w	ip, lr, #4
   db922:	ed1f 7a21 	vldr	s14, [pc, #-132]	; db8a0 <__kernel_rem_pio2f+0x374>
   db926:	eb08 030c 	add.w	r3, r8, ip
   db92a:	1d39      	adds	r1, r7, #4
   db92c:	ed73 7a01 	vldmdb	r3!, {s15}
   db930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db934:	4543      	cmp	r3, r8
   db936:	ee67 7a80 	vmul.f32	s15, s15, s0
   db93a:	ee20 0a07 	vmul.f32	s0, s0, s14
   db93e:	ed61 7a01 	vstmdb	r1!, {s15}
   db942:	d1f3      	bne.n	db92c <__kernel_rem_pio2f+0x400>
   db944:	2e00      	cmp	r6, #0
   db946:	ed1f 6a29 	vldr	s12, [pc, #-164]	; db8a4 <__kernel_rem_pio2f+0x378>
   db94a:	f04f 0400 	mov.w	r4, #0
   db94e:	db20      	blt.n	db992 <__kernel_rem_pio2f+0x466>
   db950:	488f      	ldr	r0, [pc, #572]	; (dbb90 <__kernel_rem_pio2f+0x664>)
   db952:	eddf 7a90 	vldr	s15, [pc, #576]	; dbb94 <__kernel_rem_pio2f+0x668>
   db956:	4639      	mov	r1, r7
   db958:	eeb0 7a46 	vmov.f32	s14, s12
   db95c:	2300      	movs	r3, #0
   db95e:	e003      	b.n	db968 <__kernel_rem_pio2f+0x43c>
   db960:	429c      	cmp	r4, r3
   db962:	db08      	blt.n	db976 <__kernel_rem_pio2f+0x44a>
   db964:	ecb0 7a01 	vldmia	r0!, {s14}
   db968:	ecf1 6a01 	vldmia	r1!, {s13}
   db96c:	3301      	adds	r3, #1
   db96e:	429e      	cmp	r6, r3
   db970:	eee6 7a87 	vfma.f32	s15, s13, s14
   db974:	daf4      	bge.n	db960 <__kernel_rem_pio2f+0x434>
   db976:	ab5a      	add	r3, sp, #360	; 0x168
   db978:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   db97c:	42a5      	cmp	r5, r4
   db97e:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   db982:	f1a7 0704 	sub.w	r7, r7, #4
   db986:	f104 0301 	add.w	r3, r4, #1
   db98a:	d005      	beq.n	db998 <__kernel_rem_pio2f+0x46c>
   db98c:	2e00      	cmp	r6, #0
   db98e:	461c      	mov	r4, r3
   db990:	dade      	bge.n	db950 <__kernel_rem_pio2f+0x424>
   db992:	eddf 7a80 	vldr	s15, [pc, #512]	; dbb94 <__kernel_rem_pio2f+0x668>
   db996:	e7ee      	b.n	db976 <__kernel_rem_pio2f+0x44a>
   db998:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   db99a:	2902      	cmp	r1, #2
   db99c:	dc1c      	bgt.n	db9d8 <__kernel_rem_pio2f+0x4ac>
   db99e:	2900      	cmp	r1, #0
   db9a0:	f300 808b 	bgt.w	dbaba <__kernel_rem_pio2f+0x58e>
   db9a4:	d10f      	bne.n	db9c6 <__kernel_rem_pio2f+0x49a>
   db9a6:	ab32      	add	r3, sp, #200	; 0xc8
   db9a8:	eddf 7a7a 	vldr	s15, [pc, #488]	; dbb94 <__kernel_rem_pio2f+0x668>
   db9ac:	449c      	add	ip, r3
   db9ae:	ed3c 7a01 	vldmdb	ip!, {s14}
   db9b2:	4563      	cmp	r3, ip
   db9b4:	ee77 7a87 	vadd.f32	s15, s15, s14
   db9b8:	d1f9      	bne.n	db9ae <__kernel_rem_pio2f+0x482>
   db9ba:	b10a      	cbz	r2, db9c0 <__kernel_rem_pio2f+0x494>
   db9bc:	eef1 7a67 	vneg.f32	s15, s15
   db9c0:	9b07      	ldr	r3, [sp, #28]
   db9c2:	edc3 7a00 	vstr	s15, [r3]
   db9c6:	ee19 3a90 	vmov	r3, s19
   db9ca:	f003 0007 	and.w	r0, r3, #7
   db9ce:	b05b      	add	sp, #364	; 0x16c
   db9d0:	ecbd 8b04 	vpop	{d8-d9}
   db9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db9d8:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   db9da:	2b03      	cmp	r3, #3
   db9dc:	d1f3      	bne.n	db9c6 <__kernel_rem_pio2f+0x49a>
   db9de:	2d00      	cmp	r5, #0
   db9e0:	f000 80cb 	beq.w	dbb7a <__kernel_rem_pio2f+0x64e>
   db9e4:	ab5a      	add	r3, sp, #360	; 0x168
   db9e6:	4473      	add	r3, lr
   db9e8:	a932      	add	r1, sp, #200	; 0xc8
   db9ea:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   db9ee:	eb01 0385 	add.w	r3, r1, r5, lsl #2
   db9f2:	ed73 7a01 	vldmdb	r3!, {s15}
   db9f6:	eef0 6a47 	vmov.f32	s13, s14
   db9fa:	ee37 7a27 	vadd.f32	s14, s14, s15
   db9fe:	4299      	cmp	r1, r3
   dba00:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dba04:	ed83 7a00 	vstr	s14, [r3]
   dba08:	ee77 7aa6 	vadd.f32	s15, s15, s13
   dba0c:	edc3 7a01 	vstr	s15, [r3, #4]
   dba10:	d1ef      	bne.n	db9f2 <__kernel_rem_pio2f+0x4c6>
   dba12:	2d01      	cmp	r5, #1
   dba14:	f340 80b1 	ble.w	dbb7a <__kernel_rem_pio2f+0x64e>
   dba18:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   dba1c:	ab5a      	add	r3, sp, #360	; 0x168
   dba1e:	3d01      	subs	r5, #1
   dba20:	449e      	add	lr, r3
   dba22:	00ad      	lsls	r5, r5, #2
   dba24:	1d2b      	adds	r3, r5, #4
   dba26:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   dba2a:	440b      	add	r3, r1
   dba2c:	a833      	add	r0, sp, #204	; 0xcc
   dba2e:	ed73 7a01 	vldmdb	r3!, {s15}
   dba32:	eef0 6a47 	vmov.f32	s13, s14
   dba36:	ee37 7a27 	vadd.f32	s14, s14, s15
   dba3a:	4298      	cmp	r0, r3
   dba3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dba40:	ed83 7a00 	vstr	s14, [r3]
   dba44:	ee77 7aa6 	vadd.f32	s15, s15, s13
   dba48:	edc3 7a01 	vstr	s15, [r3, #4]
   dba4c:	d1ef      	bne.n	dba2e <__kernel_rem_pio2f+0x502>
   dba4e:	3508      	adds	r5, #8
   dba50:	eddf 7a50 	vldr	s15, [pc, #320]	; dbb94 <__kernel_rem_pio2f+0x668>
   dba54:	194b      	adds	r3, r1, r5
   dba56:	3108      	adds	r1, #8
   dba58:	ed33 7a01 	vldmdb	r3!, {s14}
   dba5c:	4299      	cmp	r1, r3
   dba5e:	ee77 7a87 	vadd.f32	s15, s15, s14
   dba62:	d1f9      	bne.n	dba58 <__kernel_rem_pio2f+0x52c>
   dba64:	2a00      	cmp	r2, #0
   dba66:	d155      	bne.n	dbb14 <__kernel_rem_pio2f+0x5e8>
   dba68:	9907      	ldr	r1, [sp, #28]
   dba6a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   dba6c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   dba6e:	edc1 7a02 	vstr	s15, [r1, #8]
   dba72:	600a      	str	r2, [r1, #0]
   dba74:	604b      	str	r3, [r1, #4]
   dba76:	e7a6      	b.n	db9c6 <__kernel_rem_pio2f+0x49a>
   dba78:	f106 3cff 	add.w	ip, r6, #4294967295
   dba7c:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   dba80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   dba84:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   dba88:	e6b9      	b.n	db7fe <__kernel_rem_pio2f+0x2d2>
   dba8a:	2308      	movs	r3, #8
   dba8c:	9308      	str	r3, [sp, #32]
   dba8e:	2300      	movs	r3, #0
   dba90:	9303      	str	r3, [sp, #12]
   dba92:	e566      	b.n	db562 <__kernel_rem_pio2f+0x36>
   dba94:	ee19 2a90 	vmov	r2, s19
   dba98:	2e00      	cmp	r6, #0
   dba9a:	f102 0201 	add.w	r2, r2, #1
   dba9e:	ee09 2a90 	vmov	s19, r2
   dbaa2:	bfc8      	it	gt
   dbaa4:	2502      	movgt	r5, #2
   dbaa6:	f73f ae78 	bgt.w	db79a <__kernel_rem_pio2f+0x26e>
   dbaaa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   dbaae:	ee37 8ac8 	vsub.f32	s16, s15, s16
   dbab2:	2502      	movs	r5, #2
   dbab4:	e5ff      	b.n	db6b6 <__kernel_rem_pio2f+0x18a>
   dbab6:	2100      	movs	r1, #0
   dbab8:	e692      	b.n	db7e0 <__kernel_rem_pio2f+0x2b4>
   dbaba:	a932      	add	r1, sp, #200	; 0xc8
   dbabc:	eddf 7a35 	vldr	s15, [pc, #212]	; dbb94 <__kernel_rem_pio2f+0x668>
   dbac0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   dbac4:	ed33 7a01 	vldmdb	r3!, {s14}
   dbac8:	4299      	cmp	r1, r3
   dbaca:	ee77 7a87 	vadd.f32	s15, s15, s14
   dbace:	d1f9      	bne.n	dbac4 <__kernel_rem_pio2f+0x598>
   dbad0:	bb92      	cbnz	r2, dbb38 <__kernel_rem_pio2f+0x60c>
   dbad2:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   dbad6:	9b07      	ldr	r3, [sp, #28]
   dbad8:	2d00      	cmp	r5, #0
   dbada:	edc3 7a00 	vstr	s15, [r3]
   dbade:	ee77 7a67 	vsub.f32	s15, s14, s15
   dbae2:	dd0b      	ble.n	dbafc <__kernel_rem_pio2f+0x5d0>
   dbae4:	a933      	add	r1, sp, #204	; 0xcc
   dbae6:	2301      	movs	r3, #1
   dbae8:	ecb1 7a01 	vldmia	r1!, {s14}
   dbaec:	3301      	adds	r3, #1
   dbaee:	429d      	cmp	r5, r3
   dbaf0:	ee77 7a87 	vadd.f32	s15, s15, s14
   dbaf4:	daf8      	bge.n	dbae8 <__kernel_rem_pio2f+0x5bc>
   dbaf6:	b10a      	cbz	r2, dbafc <__kernel_rem_pio2f+0x5d0>
   dbaf8:	eef1 7a67 	vneg.f32	s15, s15
   dbafc:	9b07      	ldr	r3, [sp, #28]
   dbafe:	edc3 7a01 	vstr	s15, [r3, #4]
   dbb02:	e760      	b.n	db9c6 <__kernel_rem_pio2f+0x49a>
   dbb04:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   dbb08:	461d      	mov	r5, r3
   dbb0a:	ee10 1a10 	vmov	r1, s0
   dbb0e:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   dbb12:	e6f5      	b.n	db900 <__kernel_rem_pio2f+0x3d4>
   dbb14:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   dbb18:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   dbb1c:	9b07      	ldr	r3, [sp, #28]
   dbb1e:	eef1 7a67 	vneg.f32	s15, s15
   dbb22:	eef1 6a66 	vneg.f32	s13, s13
   dbb26:	eeb1 7a47 	vneg.f32	s14, s14
   dbb2a:	edc3 7a02 	vstr	s15, [r3, #8]
   dbb2e:	edc3 6a00 	vstr	s13, [r3]
   dbb32:	ed83 7a01 	vstr	s14, [r3, #4]
   dbb36:	e746      	b.n	db9c6 <__kernel_rem_pio2f+0x49a>
   dbb38:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   dbb3c:	9b07      	ldr	r3, [sp, #28]
   dbb3e:	eeb1 7a67 	vneg.f32	s14, s15
   dbb42:	2d00      	cmp	r5, #0
   dbb44:	ee76 7ae7 	vsub.f32	s15, s13, s15
   dbb48:	ed83 7a00 	vstr	s14, [r3]
   dbb4c:	dcca      	bgt.n	dbae4 <__kernel_rem_pio2f+0x5b8>
   dbb4e:	e7d3      	b.n	dbaf8 <__kernel_rem_pio2f+0x5cc>
   dbb50:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   dbb52:	2b02      	cmp	r3, #2
   dbb54:	dc0d      	bgt.n	dbb72 <__kernel_rem_pio2f+0x646>
   dbb56:	2b00      	cmp	r3, #0
   dbb58:	dc14      	bgt.n	dbb84 <__kernel_rem_pio2f+0x658>
   dbb5a:	f47f af34 	bne.w	db9c6 <__kernel_rem_pio2f+0x49a>
   dbb5e:	eddf 7a0d 	vldr	s15, [pc, #52]	; dbb94 <__kernel_rem_pio2f+0x668>
   dbb62:	2a00      	cmp	r2, #0
   dbb64:	f43f af2c 	beq.w	db9c0 <__kernel_rem_pio2f+0x494>
   dbb68:	e728      	b.n	db9bc <__kernel_rem_pio2f+0x490>
   dbb6a:	9b04      	ldr	r3, [sp, #16]
   dbb6c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   dbb70:	e53c      	b.n	db5ec <__kernel_rem_pio2f+0xc0>
   dbb72:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   dbb74:	2b03      	cmp	r3, #3
   dbb76:	f47f af26 	bne.w	db9c6 <__kernel_rem_pio2f+0x49a>
   dbb7a:	eddf 7a06 	vldr	s15, [pc, #24]	; dbb94 <__kernel_rem_pio2f+0x668>
   dbb7e:	2a00      	cmp	r2, #0
   dbb80:	d1c8      	bne.n	dbb14 <__kernel_rem_pio2f+0x5e8>
   dbb82:	e771      	b.n	dba68 <__kernel_rem_pio2f+0x53c>
   dbb84:	eddf 7a03 	vldr	s15, [pc, #12]	; dbb94 <__kernel_rem_pio2f+0x668>
   dbb88:	2a00      	cmp	r2, #0
   dbb8a:	d0a2      	beq.n	dbad2 <__kernel_rem_pio2f+0x5a6>
   dbb8c:	e7d4      	b.n	dbb38 <__kernel_rem_pio2f+0x60c>
   dbb8e:	bf00      	nop
   dbb90:	000decd0 	.word	0x000decd0
   dbb94:	00000000 	.word	0x00000000

000dbb98 <__kernel_sinf>:
   dbb98:	ee10 3a10 	vmov	r3, s0
   dbb9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dbba0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   dbba4:	da04      	bge.n	dbbb0 <__kernel_sinf+0x18>
   dbba6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   dbbaa:	ee17 3a90 	vmov	r3, s15
   dbbae:	b35b      	cbz	r3, dbc08 <__kernel_sinf+0x70>
   dbbb0:	ee60 7a00 	vmul.f32	s15, s0, s0
   dbbb4:	ed9f 5a15 	vldr	s10, [pc, #84]	; dbc0c <__kernel_sinf+0x74>
   dbbb8:	eddf 5a15 	vldr	s11, [pc, #84]	; dbc10 <__kernel_sinf+0x78>
   dbbbc:	ed9f 6a15 	vldr	s12, [pc, #84]	; dbc14 <__kernel_sinf+0x7c>
   dbbc0:	eddf 6a15 	vldr	s13, [pc, #84]	; dbc18 <__kernel_sinf+0x80>
   dbbc4:	ed9f 7a15 	vldr	s14, [pc, #84]	; dbc1c <__kernel_sinf+0x84>
   dbbc8:	eee7 5a85 	vfma.f32	s11, s15, s10
   dbbcc:	ee20 5a27 	vmul.f32	s10, s0, s15
   dbbd0:	eea5 6aa7 	vfma.f32	s12, s11, s15
   dbbd4:	eee6 6a27 	vfma.f32	s13, s12, s15
   dbbd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
   dbbdc:	b930      	cbnz	r0, dbbec <__kernel_sinf+0x54>
   dbbde:	eddf 6a10 	vldr	s13, [pc, #64]	; dbc20 <__kernel_sinf+0x88>
   dbbe2:	eee7 6a87 	vfma.f32	s13, s15, s14
   dbbe6:	eea6 0a85 	vfma.f32	s0, s13, s10
   dbbea:	4770      	bx	lr
   dbbec:	ee27 7a45 	vnmul.f32	s14, s14, s10
   dbbf0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   dbbf4:	eea0 7aa6 	vfma.f32	s14, s1, s13
   dbbf8:	eddf 6a0a 	vldr	s13, [pc, #40]	; dbc24 <__kernel_sinf+0x8c>
   dbbfc:	eed7 0a27 	vfnms.f32	s1, s14, s15
   dbc00:	eee5 0a26 	vfma.f32	s1, s10, s13
   dbc04:	ee30 0a60 	vsub.f32	s0, s0, s1
   dbc08:	4770      	bx	lr
   dbc0a:	bf00      	nop
   dbc0c:	2f2ec9d3 	.word	0x2f2ec9d3
   dbc10:	b2d72f34 	.word	0xb2d72f34
   dbc14:	3638ef1b 	.word	0x3638ef1b
   dbc18:	b9500d01 	.word	0xb9500d01
   dbc1c:	3c088889 	.word	0x3c088889
   dbc20:	be2aaaab 	.word	0xbe2aaaab
   dbc24:	3e2aaaab 	.word	0x3e2aaaab

000dbc28 <atan>:
   dbc28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbc2c:	ec55 4b10 	vmov	r4, r5, d0
   dbc30:	4bcd      	ldr	r3, [pc, #820]	; (dbf68 <atan+0x340>)
   dbc32:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   dbc36:	429e      	cmp	r6, r3
   dbc38:	46aa      	mov	sl, r5
   dbc3a:	dd0d      	ble.n	dbc58 <atan+0x30>
   dbc3c:	4bcb      	ldr	r3, [pc, #812]	; (dbf6c <atan+0x344>)
   dbc3e:	429e      	cmp	r6, r3
   dbc40:	f300 80b5 	bgt.w	dbdae <atan+0x186>
   dbc44:	f000 80b0 	beq.w	dbda8 <atan+0x180>
   dbc48:	f1ba 0f00 	cmp.w	sl, #0
   dbc4c:	f340 80f6 	ble.w	dbe3c <atan+0x214>
   dbc50:	ed9f 0ba9 	vldr	d0, [pc, #676]	; dbef8 <atan+0x2d0>
   dbc54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbc58:	4bc5      	ldr	r3, [pc, #788]	; (dbf70 <atan+0x348>)
   dbc5a:	429e      	cmp	r6, r3
   dbc5c:	f300 80c3 	bgt.w	dbde6 <atan+0x1be>
   dbc60:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   dbc64:	429e      	cmp	r6, r3
   dbc66:	f340 80ac 	ble.w	dbdc2 <atan+0x19a>
   dbc6a:	f04f 3bff 	mov.w	fp, #4294967295
   dbc6e:	4622      	mov	r2, r4
   dbc70:	462b      	mov	r3, r5
   dbc72:	4620      	mov	r0, r4
   dbc74:	4629      	mov	r1, r5
   dbc76:	f000 fe25 	bl	dc8c4 <__aeabi_dmul>
   dbc7a:	4602      	mov	r2, r0
   dbc7c:	460b      	mov	r3, r1
   dbc7e:	4680      	mov	r8, r0
   dbc80:	4689      	mov	r9, r1
   dbc82:	f000 fe1f 	bl	dc8c4 <__aeabi_dmul>
   dbc86:	a39e      	add	r3, pc, #632	; (adr r3, dbf00 <atan+0x2d8>)
   dbc88:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc8c:	4606      	mov	r6, r0
   dbc8e:	460f      	mov	r7, r1
   dbc90:	f000 fe18 	bl	dc8c4 <__aeabi_dmul>
   dbc94:	a39c      	add	r3, pc, #624	; (adr r3, dbf08 <atan+0x2e0>)
   dbc96:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc9a:	f000 fc5d 	bl	dc558 <__adddf3>
   dbc9e:	4632      	mov	r2, r6
   dbca0:	463b      	mov	r3, r7
   dbca2:	f000 fe0f 	bl	dc8c4 <__aeabi_dmul>
   dbca6:	a39a      	add	r3, pc, #616	; (adr r3, dbf10 <atan+0x2e8>)
   dbca8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbcac:	f000 fc54 	bl	dc558 <__adddf3>
   dbcb0:	4632      	mov	r2, r6
   dbcb2:	463b      	mov	r3, r7
   dbcb4:	f000 fe06 	bl	dc8c4 <__aeabi_dmul>
   dbcb8:	a397      	add	r3, pc, #604	; (adr r3, dbf18 <atan+0x2f0>)
   dbcba:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbcbe:	f000 fc4b 	bl	dc558 <__adddf3>
   dbcc2:	4632      	mov	r2, r6
   dbcc4:	463b      	mov	r3, r7
   dbcc6:	f000 fdfd 	bl	dc8c4 <__aeabi_dmul>
   dbcca:	a395      	add	r3, pc, #596	; (adr r3, dbf20 <atan+0x2f8>)
   dbccc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbcd0:	f000 fc42 	bl	dc558 <__adddf3>
   dbcd4:	4632      	mov	r2, r6
   dbcd6:	463b      	mov	r3, r7
   dbcd8:	f000 fdf4 	bl	dc8c4 <__aeabi_dmul>
   dbcdc:	a392      	add	r3, pc, #584	; (adr r3, dbf28 <atan+0x300>)
   dbcde:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbce2:	f000 fc39 	bl	dc558 <__adddf3>
   dbce6:	4642      	mov	r2, r8
   dbce8:	464b      	mov	r3, r9
   dbcea:	f000 fdeb 	bl	dc8c4 <__aeabi_dmul>
   dbcee:	a390      	add	r3, pc, #576	; (adr r3, dbf30 <atan+0x308>)
   dbcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbcf4:	4680      	mov	r8, r0
   dbcf6:	4689      	mov	r9, r1
   dbcf8:	4630      	mov	r0, r6
   dbcfa:	4639      	mov	r1, r7
   dbcfc:	f000 fde2 	bl	dc8c4 <__aeabi_dmul>
   dbd00:	a38d      	add	r3, pc, #564	; (adr r3, dbf38 <atan+0x310>)
   dbd02:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbd06:	f000 fc25 	bl	dc554 <__aeabi_dsub>
   dbd0a:	4632      	mov	r2, r6
   dbd0c:	463b      	mov	r3, r7
   dbd0e:	f000 fdd9 	bl	dc8c4 <__aeabi_dmul>
   dbd12:	a38b      	add	r3, pc, #556	; (adr r3, dbf40 <atan+0x318>)
   dbd14:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbd18:	f000 fc1c 	bl	dc554 <__aeabi_dsub>
   dbd1c:	4632      	mov	r2, r6
   dbd1e:	463b      	mov	r3, r7
   dbd20:	f000 fdd0 	bl	dc8c4 <__aeabi_dmul>
   dbd24:	a388      	add	r3, pc, #544	; (adr r3, dbf48 <atan+0x320>)
   dbd26:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbd2a:	f000 fc13 	bl	dc554 <__aeabi_dsub>
   dbd2e:	4632      	mov	r2, r6
   dbd30:	463b      	mov	r3, r7
   dbd32:	f000 fdc7 	bl	dc8c4 <__aeabi_dmul>
   dbd36:	a386      	add	r3, pc, #536	; (adr r3, dbf50 <atan+0x328>)
   dbd38:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbd3c:	f000 fc0a 	bl	dc554 <__aeabi_dsub>
   dbd40:	4632      	mov	r2, r6
   dbd42:	463b      	mov	r3, r7
   dbd44:	f000 fdbe 	bl	dc8c4 <__aeabi_dmul>
   dbd48:	f1bb 3fff 	cmp.w	fp, #4294967295
   dbd4c:	4602      	mov	r2, r0
   dbd4e:	460b      	mov	r3, r1
   dbd50:	d078      	beq.n	dbe44 <atan+0x21c>
   dbd52:	4640      	mov	r0, r8
   dbd54:	4649      	mov	r1, r9
   dbd56:	f000 fbff 	bl	dc558 <__adddf3>
   dbd5a:	4e86      	ldr	r6, [pc, #536]	; (dbf74 <atan+0x34c>)
   dbd5c:	4622      	mov	r2, r4
   dbd5e:	462b      	mov	r3, r5
   dbd60:	f000 fdb0 	bl	dc8c4 <__aeabi_dmul>
   dbd64:	4b84      	ldr	r3, [pc, #528]	; (dbf78 <atan+0x350>)
   dbd66:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   dbd6a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   dbd6e:	449b      	add	fp, r3
   dbd70:	e9db 2300 	ldrd	r2, r3, [fp]
   dbd74:	f000 fbee 	bl	dc554 <__aeabi_dsub>
   dbd78:	4622      	mov	r2, r4
   dbd7a:	462b      	mov	r3, r5
   dbd7c:	f000 fbea 	bl	dc554 <__aeabi_dsub>
   dbd80:	4602      	mov	r2, r0
   dbd82:	460b      	mov	r3, r1
   dbd84:	e9d6 0100 	ldrd	r0, r1, [r6]
   dbd88:	f000 fbe4 	bl	dc554 <__aeabi_dsub>
   dbd8c:	f1ba 0f00 	cmp.w	sl, #0
   dbd90:	ec41 0b10 	vmov	d0, r0, r1
   dbd94:	da13      	bge.n	dbdbe <atan+0x196>
   dbd96:	ee10 1a90 	vmov	r1, s1
   dbd9a:	4602      	mov	r2, r0
   dbd9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dbda0:	ec43 2b10 	vmov	d0, r2, r3
   dbda4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbda8:	2c00      	cmp	r4, #0
   dbdaa:	f43f af4d 	beq.w	dbc48 <atan+0x20>
   dbdae:	4622      	mov	r2, r4
   dbdb0:	462b      	mov	r3, r5
   dbdb2:	4620      	mov	r0, r4
   dbdb4:	4629      	mov	r1, r5
   dbdb6:	f000 fbcf 	bl	dc558 <__adddf3>
   dbdba:	ec41 0b10 	vmov	d0, r0, r1
   dbdbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbdc2:	a365      	add	r3, pc, #404	; (adr r3, dbf58 <atan+0x330>)
   dbdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbdc8:	ee10 0a10 	vmov	r0, s0
   dbdcc:	4629      	mov	r1, r5
   dbdce:	f000 fbc3 	bl	dc558 <__adddf3>
   dbdd2:	4b6a      	ldr	r3, [pc, #424]	; (dbf7c <atan+0x354>)
   dbdd4:	2200      	movs	r2, #0
   dbdd6:	f001 f805 	bl	dcde4 <__aeabi_dcmpgt>
   dbdda:	2800      	cmp	r0, #0
   dbddc:	f43f af45 	beq.w	dbc6a <atan+0x42>
   dbde0:	ec45 4b10 	vmov	d0, r4, r5
   dbde4:	e7eb      	b.n	dbdbe <atan+0x196>
   dbde6:	f000 f8d3 	bl	dbf90 <fabs>
   dbdea:	4b65      	ldr	r3, [pc, #404]	; (dbf80 <atan+0x358>)
   dbdec:	429e      	cmp	r6, r3
   dbdee:	ec55 4b10 	vmov	r4, r5, d0
   dbdf2:	dc39      	bgt.n	dbe68 <atan+0x240>
   dbdf4:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   dbdf8:	429e      	cmp	r6, r3
   dbdfa:	dc62      	bgt.n	dbec2 <atan+0x29a>
   dbdfc:	ee10 2a10 	vmov	r2, s0
   dbe00:	ee10 0a10 	vmov	r0, s0
   dbe04:	462b      	mov	r3, r5
   dbe06:	4629      	mov	r1, r5
   dbe08:	f000 fba6 	bl	dc558 <__adddf3>
   dbe0c:	4b5b      	ldr	r3, [pc, #364]	; (dbf7c <atan+0x354>)
   dbe0e:	2200      	movs	r2, #0
   dbe10:	f000 fba0 	bl	dc554 <__aeabi_dsub>
   dbe14:	2200      	movs	r2, #0
   dbe16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dbe1a:	4606      	mov	r6, r0
   dbe1c:	460f      	mov	r7, r1
   dbe1e:	4620      	mov	r0, r4
   dbe20:	4629      	mov	r1, r5
   dbe22:	f000 fb99 	bl	dc558 <__adddf3>
   dbe26:	4602      	mov	r2, r0
   dbe28:	460b      	mov	r3, r1
   dbe2a:	4630      	mov	r0, r6
   dbe2c:	4639      	mov	r1, r7
   dbe2e:	f000 fe73 	bl	dcb18 <__aeabi_ddiv>
   dbe32:	f04f 0b00 	mov.w	fp, #0
   dbe36:	4604      	mov	r4, r0
   dbe38:	460d      	mov	r5, r1
   dbe3a:	e718      	b.n	dbc6e <atan+0x46>
   dbe3c:	ed9f 0b48 	vldr	d0, [pc, #288]	; dbf60 <atan+0x338>
   dbe40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbe44:	4640      	mov	r0, r8
   dbe46:	4649      	mov	r1, r9
   dbe48:	f000 fb86 	bl	dc558 <__adddf3>
   dbe4c:	4622      	mov	r2, r4
   dbe4e:	462b      	mov	r3, r5
   dbe50:	f000 fd38 	bl	dc8c4 <__aeabi_dmul>
   dbe54:	4602      	mov	r2, r0
   dbe56:	460b      	mov	r3, r1
   dbe58:	4620      	mov	r0, r4
   dbe5a:	4629      	mov	r1, r5
   dbe5c:	f000 fb7a 	bl	dc554 <__aeabi_dsub>
   dbe60:	ec41 0b10 	vmov	d0, r0, r1
   dbe64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbe68:	4b46      	ldr	r3, [pc, #280]	; (dbf84 <atan+0x35c>)
   dbe6a:	429e      	cmp	r6, r3
   dbe6c:	da1d      	bge.n	dbeaa <atan+0x282>
   dbe6e:	ee10 0a10 	vmov	r0, s0
   dbe72:	4b45      	ldr	r3, [pc, #276]	; (dbf88 <atan+0x360>)
   dbe74:	2200      	movs	r2, #0
   dbe76:	4629      	mov	r1, r5
   dbe78:	f000 fb6c 	bl	dc554 <__aeabi_dsub>
   dbe7c:	4b42      	ldr	r3, [pc, #264]	; (dbf88 <atan+0x360>)
   dbe7e:	4606      	mov	r6, r0
   dbe80:	460f      	mov	r7, r1
   dbe82:	2200      	movs	r2, #0
   dbe84:	4620      	mov	r0, r4
   dbe86:	4629      	mov	r1, r5
   dbe88:	f000 fd1c 	bl	dc8c4 <__aeabi_dmul>
   dbe8c:	4b3b      	ldr	r3, [pc, #236]	; (dbf7c <atan+0x354>)
   dbe8e:	2200      	movs	r2, #0
   dbe90:	f000 fb62 	bl	dc558 <__adddf3>
   dbe94:	4602      	mov	r2, r0
   dbe96:	460b      	mov	r3, r1
   dbe98:	4630      	mov	r0, r6
   dbe9a:	4639      	mov	r1, r7
   dbe9c:	f000 fe3c 	bl	dcb18 <__aeabi_ddiv>
   dbea0:	f04f 0b02 	mov.w	fp, #2
   dbea4:	4604      	mov	r4, r0
   dbea6:	460d      	mov	r5, r1
   dbea8:	e6e1      	b.n	dbc6e <atan+0x46>
   dbeaa:	462b      	mov	r3, r5
   dbeac:	ee10 2a10 	vmov	r2, s0
   dbeb0:	4936      	ldr	r1, [pc, #216]	; (dbf8c <atan+0x364>)
   dbeb2:	2000      	movs	r0, #0
   dbeb4:	f000 fe30 	bl	dcb18 <__aeabi_ddiv>
   dbeb8:	f04f 0b03 	mov.w	fp, #3
   dbebc:	4604      	mov	r4, r0
   dbebe:	460d      	mov	r5, r1
   dbec0:	e6d5      	b.n	dbc6e <atan+0x46>
   dbec2:	ee10 0a10 	vmov	r0, s0
   dbec6:	4b2d      	ldr	r3, [pc, #180]	; (dbf7c <atan+0x354>)
   dbec8:	2200      	movs	r2, #0
   dbeca:	4629      	mov	r1, r5
   dbecc:	f000 fb42 	bl	dc554 <__aeabi_dsub>
   dbed0:	4b2a      	ldr	r3, [pc, #168]	; (dbf7c <atan+0x354>)
   dbed2:	2200      	movs	r2, #0
   dbed4:	4606      	mov	r6, r0
   dbed6:	460f      	mov	r7, r1
   dbed8:	4620      	mov	r0, r4
   dbeda:	4629      	mov	r1, r5
   dbedc:	f000 fb3c 	bl	dc558 <__adddf3>
   dbee0:	4602      	mov	r2, r0
   dbee2:	460b      	mov	r3, r1
   dbee4:	4630      	mov	r0, r6
   dbee6:	4639      	mov	r1, r7
   dbee8:	f000 fe16 	bl	dcb18 <__aeabi_ddiv>
   dbeec:	f04f 0b01 	mov.w	fp, #1
   dbef0:	4604      	mov	r4, r0
   dbef2:	460d      	mov	r5, r1
   dbef4:	e6bb      	b.n	dbc6e <atan+0x46>
   dbef6:	bf00      	nop
   dbef8:	54442d18 	.word	0x54442d18
   dbefc:	3ff921fb 	.word	0x3ff921fb
   dbf00:	e322da11 	.word	0xe322da11
   dbf04:	3f90ad3a 	.word	0x3f90ad3a
   dbf08:	24760deb 	.word	0x24760deb
   dbf0c:	3fa97b4b 	.word	0x3fa97b4b
   dbf10:	a0d03d51 	.word	0xa0d03d51
   dbf14:	3fb10d66 	.word	0x3fb10d66
   dbf18:	c54c206e 	.word	0xc54c206e
   dbf1c:	3fb745cd 	.word	0x3fb745cd
   dbf20:	920083ff 	.word	0x920083ff
   dbf24:	3fc24924 	.word	0x3fc24924
   dbf28:	5555550d 	.word	0x5555550d
   dbf2c:	3fd55555 	.word	0x3fd55555
   dbf30:	2c6a6c2f 	.word	0x2c6a6c2f
   dbf34:	bfa2b444 	.word	0xbfa2b444
   dbf38:	52defd9a 	.word	0x52defd9a
   dbf3c:	3fadde2d 	.word	0x3fadde2d
   dbf40:	af749a6d 	.word	0xaf749a6d
   dbf44:	3fb3b0f2 	.word	0x3fb3b0f2
   dbf48:	fe231671 	.word	0xfe231671
   dbf4c:	3fbc71c6 	.word	0x3fbc71c6
   dbf50:	9998ebc4 	.word	0x9998ebc4
   dbf54:	3fc99999 	.word	0x3fc99999
   dbf58:	8800759c 	.word	0x8800759c
   dbf5c:	7e37e43c 	.word	0x7e37e43c
   dbf60:	54442d18 	.word	0x54442d18
   dbf64:	bff921fb 	.word	0xbff921fb
   dbf68:	440fffff 	.word	0x440fffff
   dbf6c:	7ff00000 	.word	0x7ff00000
   dbf70:	3fdbffff 	.word	0x3fdbffff
   dbf74:	000ded08 	.word	0x000ded08
   dbf78:	000ded28 	.word	0x000ded28
   dbf7c:	3ff00000 	.word	0x3ff00000
   dbf80:	3ff2ffff 	.word	0x3ff2ffff
   dbf84:	40038000 	.word	0x40038000
   dbf88:	3ff80000 	.word	0x3ff80000
   dbf8c:	bff00000 	.word	0xbff00000

000dbf90 <fabs>:
   dbf90:	ec51 0b10 	vmov	r0, r1, d0
   dbf94:	ee10 2a10 	vmov	r2, s0
   dbf98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dbf9c:	ec43 2b10 	vmov	d0, r2, r3
   dbfa0:	4770      	bx	lr
   dbfa2:	bf00      	nop

000dbfa4 <finite>:
   dbfa4:	b082      	sub	sp, #8
   dbfa6:	ed8d 0b00 	vstr	d0, [sp]
   dbfaa:	9801      	ldr	r0, [sp, #4]
   dbfac:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   dbfb0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   dbfb4:	0fc0      	lsrs	r0, r0, #31
   dbfb6:	b002      	add	sp, #8
   dbfb8:	4770      	bx	lr
   dbfba:	bf00      	nop

000dbfbc <matherr>:
   dbfbc:	2000      	movs	r0, #0
   dbfbe:	4770      	bx	lr

000dbfc0 <nan>:
   dbfc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; dbfc8 <nan+0x8>
   dbfc4:	4770      	bx	lr
   dbfc6:	bf00      	nop
   dbfc8:	00000000 	.word	0x00000000
   dbfcc:	7ff80000 	.word	0x7ff80000

000dbfd0 <rint>:
   dbfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbfd2:	ec53 2b10 	vmov	r2, r3, d0
   dbfd6:	f3c3 560a 	ubfx	r6, r3, #20, #11
   dbfda:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   dbfde:	2813      	cmp	r0, #19
   dbfe0:	ee10 5a10 	vmov	r5, s0
   dbfe4:	b083      	sub	sp, #12
   dbfe6:	4619      	mov	r1, r3
   dbfe8:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   dbfec:	dc31      	bgt.n	dc052 <rint+0x82>
   dbfee:	2800      	cmp	r0, #0
   dbff0:	db4c      	blt.n	dc08c <rint+0xbc>
   dbff2:	4e3e      	ldr	r6, [pc, #248]	; (dc0ec <rint+0x11c>)
   dbff4:	4106      	asrs	r6, r0
   dbff6:	ea03 0706 	and.w	r7, r3, r6
   dbffa:	4317      	orrs	r7, r2
   dbffc:	d02e      	beq.n	dc05c <rint+0x8c>
   dbffe:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   dc002:	431d      	orrs	r5, r3
   dc004:	ea4f 0656 	mov.w	r6, r6, lsr #1
   dc008:	d00c      	beq.n	dc024 <rint+0x54>
   dc00a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   dc00e:	2813      	cmp	r0, #19
   dc010:	ea21 0606 	bic.w	r6, r1, r6
   dc014:	fa43 f100 	asr.w	r1, r3, r0
   dc018:	ea41 0106 	orr.w	r1, r1, r6
   dc01c:	bf0c      	ite	eq
   dc01e:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   dc022:	2500      	movne	r5, #0
   dc024:	4832      	ldr	r0, [pc, #200]	; (dc0f0 <rint+0x120>)
   dc026:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   dc02a:	462a      	mov	r2, r5
   dc02c:	e9d4 4500 	ldrd	r4, r5, [r4]
   dc030:	460b      	mov	r3, r1
   dc032:	4620      	mov	r0, r4
   dc034:	4629      	mov	r1, r5
   dc036:	f000 fa8f 	bl	dc558 <__adddf3>
   dc03a:	e9cd 0100 	strd	r0, r1, [sp]
   dc03e:	e9dd 0100 	ldrd	r0, r1, [sp]
   dc042:	4622      	mov	r2, r4
   dc044:	462b      	mov	r3, r5
   dc046:	f000 fa85 	bl	dc554 <__aeabi_dsub>
   dc04a:	ec41 0b10 	vmov	d0, r0, r1
   dc04e:	b003      	add	sp, #12
   dc050:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc052:	2833      	cmp	r0, #51	; 0x33
   dc054:	dd06      	ble.n	dc064 <rint+0x94>
   dc056:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   dc05a:	d040      	beq.n	dc0de <rint+0x10e>
   dc05c:	ec43 2b10 	vmov	d0, r2, r3
   dc060:	b003      	add	sp, #12
   dc062:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc064:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   dc068:	f04f 30ff 	mov.w	r0, #4294967295
   dc06c:	40f0      	lsrs	r0, r6
   dc06e:	4202      	tst	r2, r0
   dc070:	d0f4      	beq.n	dc05c <rint+0x8c>
   dc072:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   dc076:	ea4f 0350 	mov.w	r3, r0, lsr #1
   dc07a:	d0d3      	beq.n	dc024 <rint+0x54>
   dc07c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   dc080:	ea25 0503 	bic.w	r5, r5, r3
   dc084:	fa42 f606 	asr.w	r6, r2, r6
   dc088:	4335      	orrs	r5, r6
   dc08a:	e7cb      	b.n	dc024 <rint+0x54>
   dc08c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   dc090:	4310      	orrs	r0, r2
   dc092:	d0e3      	beq.n	dc05c <rint+0x8c>
   dc094:	f3c3 0013 	ubfx	r0, r3, #0, #20
   dc098:	4310      	orrs	r0, r2
   dc09a:	4245      	negs	r5, r0
   dc09c:	4305      	orrs	r5, r0
   dc09e:	4814      	ldr	r0, [pc, #80]	; (dc0f0 <rint+0x120>)
   dc0a0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   dc0a4:	e9d0 6700 	ldrd	r6, r7, [r0]
   dc0a8:	0c59      	lsrs	r1, r3, #17
   dc0aa:	0b2d      	lsrs	r5, r5, #12
   dc0ac:	0449      	lsls	r1, r1, #17
   dc0ae:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   dc0b2:	ea45 0301 	orr.w	r3, r5, r1
   dc0b6:	4630      	mov	r0, r6
   dc0b8:	4639      	mov	r1, r7
   dc0ba:	f000 fa4d 	bl	dc558 <__adddf3>
   dc0be:	e9cd 0100 	strd	r0, r1, [sp]
   dc0c2:	463b      	mov	r3, r7
   dc0c4:	e9dd 0100 	ldrd	r0, r1, [sp]
   dc0c8:	4632      	mov	r2, r6
   dc0ca:	f000 fa43 	bl	dc554 <__aeabi_dsub>
   dc0ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dc0d2:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   dc0d6:	ec41 0b10 	vmov	d0, r0, r1
   dc0da:	b003      	add	sp, #12
   dc0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc0de:	ee10 0a10 	vmov	r0, s0
   dc0e2:	f000 fa39 	bl	dc558 <__adddf3>
   dc0e6:	ec41 0b10 	vmov	d0, r0, r1
   dc0ea:	e7b9      	b.n	dc060 <rint+0x90>
   dc0ec:	000fffff 	.word	0x000fffff
   dc0f0:	000ded48 	.word	0x000ded48
   dc0f4:	00000000 	.word	0x00000000

000dc0f8 <scalbn>:
   dc0f8:	b538      	push	{r3, r4, r5, lr}
   dc0fa:	ec53 2b10 	vmov	r2, r3, d0
   dc0fe:	f3c3 510a 	ubfx	r1, r3, #20, #11
   dc102:	461c      	mov	r4, r3
   dc104:	4605      	mov	r5, r0
   dc106:	bb81      	cbnz	r1, dc16a <scalbn+0x72>
   dc108:	ee10 1a10 	vmov	r1, s0
   dc10c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   dc110:	4321      	orrs	r1, r4
   dc112:	d029      	beq.n	dc168 <scalbn+0x70>
   dc114:	4619      	mov	r1, r3
   dc116:	2200      	movs	r2, #0
   dc118:	4b3d      	ldr	r3, [pc, #244]	; (dc210 <scalbn+0x118>)
   dc11a:	4c3e      	ldr	r4, [pc, #248]	; (dc214 <scalbn+0x11c>)
   dc11c:	ee10 0a10 	vmov	r0, s0
   dc120:	f000 fbd0 	bl	dc8c4 <__aeabi_dmul>
   dc124:	42a5      	cmp	r5, r4
   dc126:	4602      	mov	r2, r0
   dc128:	460b      	mov	r3, r1
   dc12a:	db16      	blt.n	dc15a <scalbn+0x62>
   dc12c:	460c      	mov	r4, r1
   dc12e:	f3c1 510a 	ubfx	r1, r1, #20, #11
   dc132:	3936      	subs	r1, #54	; 0x36
   dc134:	4429      	add	r1, r5
   dc136:	f240 70fe 	movw	r0, #2046	; 0x7fe
   dc13a:	4281      	cmp	r1, r0
   dc13c:	dc21      	bgt.n	dc182 <scalbn+0x8a>
   dc13e:	2900      	cmp	r1, #0
   dc140:	dc47      	bgt.n	dc1d2 <scalbn+0xda>
   dc142:	f111 0f35 	cmn.w	r1, #53	; 0x35
   dc146:	da34      	bge.n	dc1b2 <scalbn+0xba>
   dc148:	f24c 3150 	movw	r1, #50000	; 0xc350
   dc14c:	428d      	cmp	r5, r1
   dc14e:	dc18      	bgt.n	dc182 <scalbn+0x8a>
   dc150:	2b00      	cmp	r3, #0
   dc152:	a127      	add	r1, pc, #156	; (adr r1, dc1f0 <scalbn+0xf8>)
   dc154:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc158:	db44      	blt.n	dc1e4 <scalbn+0xec>
   dc15a:	a325      	add	r3, pc, #148	; (adr r3, dc1f0 <scalbn+0xf8>)
   dc15c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc160:	f000 fbb0 	bl	dc8c4 <__aeabi_dmul>
   dc164:	ec41 0b10 	vmov	d0, r0, r1
   dc168:	bd38      	pop	{r3, r4, r5, pc}
   dc16a:	f240 70ff 	movw	r0, #2047	; 0x7ff
   dc16e:	4281      	cmp	r1, r0
   dc170:	d1e0      	bne.n	dc134 <scalbn+0x3c>
   dc172:	ee10 0a10 	vmov	r0, s0
   dc176:	4619      	mov	r1, r3
   dc178:	f000 f9ee 	bl	dc558 <__adddf3>
   dc17c:	ec41 0b10 	vmov	d0, r0, r1
   dc180:	bd38      	pop	{r3, r4, r5, pc}
   dc182:	2b00      	cmp	r3, #0
   dc184:	a11c      	add	r1, pc, #112	; (adr r1, dc1f8 <scalbn+0x100>)
   dc186:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc18a:	db07      	blt.n	dc19c <scalbn+0xa4>
   dc18c:	a31a      	add	r3, pc, #104	; (adr r3, dc1f8 <scalbn+0x100>)
   dc18e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc192:	f000 fb97 	bl	dc8c4 <__aeabi_dmul>
   dc196:	ec41 0b10 	vmov	d0, r0, r1
   dc19a:	bd38      	pop	{r3, r4, r5, pc}
   dc19c:	a118      	add	r1, pc, #96	; (adr r1, dc200 <scalbn+0x108>)
   dc19e:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc1a2:	a315      	add	r3, pc, #84	; (adr r3, dc1f8 <scalbn+0x100>)
   dc1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc1a8:	f000 fb8c 	bl	dc8c4 <__aeabi_dmul>
   dc1ac:	ec41 0b10 	vmov	d0, r0, r1
   dc1b0:	e7f3      	b.n	dc19a <scalbn+0xa2>
   dc1b2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   dc1b6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   dc1ba:	3136      	adds	r1, #54	; 0x36
   dc1bc:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   dc1c0:	4610      	mov	r0, r2
   dc1c2:	4619      	mov	r1, r3
   dc1c4:	2200      	movs	r2, #0
   dc1c6:	4b14      	ldr	r3, [pc, #80]	; (dc218 <scalbn+0x120>)
   dc1c8:	f000 fb7c 	bl	dc8c4 <__aeabi_dmul>
   dc1cc:	ec41 0b10 	vmov	d0, r0, r1
   dc1d0:	bd38      	pop	{r3, r4, r5, pc}
   dc1d2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   dc1d6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   dc1da:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   dc1de:	ec43 2b10 	vmov	d0, r2, r3
   dc1e2:	bd38      	pop	{r3, r4, r5, pc}
   dc1e4:	a108      	add	r1, pc, #32	; (adr r1, dc208 <scalbn+0x110>)
   dc1e6:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc1ea:	e7b6      	b.n	dc15a <scalbn+0x62>
   dc1ec:	f3af 8000 	nop.w
   dc1f0:	c2f8f359 	.word	0xc2f8f359
   dc1f4:	01a56e1f 	.word	0x01a56e1f
   dc1f8:	8800759c 	.word	0x8800759c
   dc1fc:	7e37e43c 	.word	0x7e37e43c
   dc200:	8800759c 	.word	0x8800759c
   dc204:	fe37e43c 	.word	0xfe37e43c
   dc208:	c2f8f359 	.word	0xc2f8f359
   dc20c:	81a56e1f 	.word	0x81a56e1f
   dc210:	43500000 	.word	0x43500000
   dc214:	ffff3cb0 	.word	0xffff3cb0
   dc218:	3c900000 	.word	0x3c900000

000dc21c <atanf>:
   dc21c:	b538      	push	{r3, r4, r5, lr}
   dc21e:	ee10 5a10 	vmov	r5, s0
   dc222:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   dc226:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   dc22a:	eef0 7a40 	vmov.f32	s15, s0
   dc22e:	db0b      	blt.n	dc248 <atanf+0x2c>
   dc230:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   dc234:	dc59      	bgt.n	dc2ea <atanf+0xce>
   dc236:	eddf 7a52 	vldr	s15, [pc, #328]	; dc380 <atanf+0x164>
   dc23a:	ed9f 0a52 	vldr	s0, [pc, #328]	; dc384 <atanf+0x168>
   dc23e:	2d00      	cmp	r5, #0
   dc240:	bfc8      	it	gt
   dc242:	eeb0 0a67 	vmovgt.f32	s0, s15
   dc246:	bd38      	pop	{r3, r4, r5, pc}
   dc248:	4b4f      	ldr	r3, [pc, #316]	; (dc388 <atanf+0x16c>)
   dc24a:	429c      	cmp	r4, r3
   dc24c:	dc5c      	bgt.n	dc308 <atanf+0xec>
   dc24e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   dc252:	db4d      	blt.n	dc2f0 <atanf+0xd4>
   dc254:	f04f 33ff 	mov.w	r3, #4294967295
   dc258:	ee27 6aa7 	vmul.f32	s12, s15, s15
   dc25c:	ed9f 1a4b 	vldr	s2, [pc, #300]	; dc38c <atanf+0x170>
   dc260:	ed9f 2a4b 	vldr	s4, [pc, #300]	; dc390 <atanf+0x174>
   dc264:	ed9f 3a4b 	vldr	s6, [pc, #300]	; dc394 <atanf+0x178>
   dc268:	eddf 1a4b 	vldr	s3, [pc, #300]	; dc398 <atanf+0x17c>
   dc26c:	eddf 2a4b 	vldr	s5, [pc, #300]	; dc39c <atanf+0x180>
   dc270:	ed9f 4a4b 	vldr	s8, [pc, #300]	; dc3a0 <atanf+0x184>
   dc274:	eddf 3a4b 	vldr	s7, [pc, #300]	; dc3a4 <atanf+0x188>
   dc278:	ed9f 5a4b 	vldr	s10, [pc, #300]	; dc3a8 <atanf+0x18c>
   dc27c:	eddf 4a4b 	vldr	s9, [pc, #300]	; dc3ac <atanf+0x190>
   dc280:	eddf 6a4b 	vldr	s13, [pc, #300]	; dc3b0 <atanf+0x194>
   dc284:	eddf 5a4b 	vldr	s11, [pc, #300]	; dc3b4 <atanf+0x198>
   dc288:	ee26 7a06 	vmul.f32	s14, s12, s12
   dc28c:	1c5a      	adds	r2, r3, #1
   dc28e:	eea7 2a01 	vfma.f32	s4, s14, s2
   dc292:	eee7 2a21 	vfma.f32	s5, s14, s3
   dc296:	eea2 3a07 	vfma.f32	s6, s4, s14
   dc29a:	eee2 3a87 	vfma.f32	s7, s5, s14
   dc29e:	eea3 4a07 	vfma.f32	s8, s6, s14
   dc2a2:	eee3 4a87 	vfma.f32	s9, s7, s14
   dc2a6:	eea4 5a07 	vfma.f32	s10, s8, s14
   dc2aa:	eee4 5a87 	vfma.f32	s11, s9, s14
   dc2ae:	eee5 6a07 	vfma.f32	s13, s10, s14
   dc2b2:	ee25 7a87 	vmul.f32	s14, s11, s14
   dc2b6:	ee66 6a86 	vmul.f32	s13, s13, s12
   dc2ba:	d03a      	beq.n	dc332 <atanf+0x116>
   dc2bc:	493e      	ldr	r1, [pc, #248]	; (dc3b8 <atanf+0x19c>)
   dc2be:	4a3f      	ldr	r2, [pc, #252]	; (dc3bc <atanf+0x1a0>)
   dc2c0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   dc2c4:	ee76 6a87 	vadd.f32	s13, s13, s14
   dc2c8:	ed91 0a00 	vldr	s0, [r1]
   dc2cc:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   dc2d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dc2d4:	2d00      	cmp	r5, #0
   dc2d6:	ed93 7a00 	vldr	s14, [r3]
   dc2da:	ee70 7a67 	vsub.f32	s15, s0, s15
   dc2de:	ee37 0a67 	vsub.f32	s0, s14, s15
   dc2e2:	dab0      	bge.n	dc246 <atanf+0x2a>
   dc2e4:	eeb1 0a40 	vneg.f32	s0, s0
   dc2e8:	bd38      	pop	{r3, r4, r5, pc}
   dc2ea:	ee30 0a00 	vadd.f32	s0, s0, s0
   dc2ee:	bd38      	pop	{r3, r4, r5, pc}
   dc2f0:	ed9f 7a33 	vldr	s14, [pc, #204]	; dc3c0 <atanf+0x1a4>
   dc2f4:	ee30 7a07 	vadd.f32	s14, s0, s14
   dc2f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   dc2fc:	eeb4 7ae6 	vcmpe.f32	s14, s13
   dc300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc304:	dda6      	ble.n	dc254 <atanf+0x38>
   dc306:	bd38      	pop	{r3, r4, r5, pc}
   dc308:	f000 f860 	bl	dc3cc <fabsf>
   dc30c:	4b2d      	ldr	r3, [pc, #180]	; (dc3c4 <atanf+0x1a8>)
   dc30e:	429c      	cmp	r4, r3
   dc310:	dc16      	bgt.n	dc340 <atanf+0x124>
   dc312:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   dc316:	429c      	cmp	r4, r3
   dc318:	dc27      	bgt.n	dc36a <atanf+0x14e>
   dc31a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   dc31e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   dc322:	eea0 7a27 	vfma.f32	s14, s0, s15
   dc326:	2300      	movs	r3, #0
   dc328:	ee30 0a27 	vadd.f32	s0, s0, s15
   dc32c:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dc330:	e792      	b.n	dc258 <atanf+0x3c>
   dc332:	ee76 6a87 	vadd.f32	s13, s13, s14
   dc336:	eee6 7ae7 	vfms.f32	s15, s13, s15
   dc33a:	eeb0 0a67 	vmov.f32	s0, s15
   dc33e:	bd38      	pop	{r3, r4, r5, pc}
   dc340:	4b21      	ldr	r3, [pc, #132]	; (dc3c8 <atanf+0x1ac>)
   dc342:	429c      	cmp	r4, r3
   dc344:	dc0b      	bgt.n	dc35e <atanf+0x142>
   dc346:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   dc34a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   dc34e:	eea0 7a27 	vfma.f32	s14, s0, s15
   dc352:	2302      	movs	r3, #2
   dc354:	ee30 0a67 	vsub.f32	s0, s0, s15
   dc358:	eec0 7a07 	vdiv.f32	s15, s0, s14
   dc35c:	e77c      	b.n	dc258 <atanf+0x3c>
   dc35e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   dc362:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dc366:	2303      	movs	r3, #3
   dc368:	e776      	b.n	dc258 <atanf+0x3c>
   dc36a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   dc36e:	ee30 7a67 	vsub.f32	s14, s0, s15
   dc372:	ee30 0a27 	vadd.f32	s0, s0, s15
   dc376:	2301      	movs	r3, #1
   dc378:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dc37c:	e76c      	b.n	dc258 <atanf+0x3c>
   dc37e:	bf00      	nop
   dc380:	3fc90fdb 	.word	0x3fc90fdb
   dc384:	bfc90fdb 	.word	0xbfc90fdb
   dc388:	3edfffff 	.word	0x3edfffff
   dc38c:	3c8569d7 	.word	0x3c8569d7
   dc390:	3d4bda59 	.word	0x3d4bda59
   dc394:	3d886b35 	.word	0x3d886b35
   dc398:	bd15a221 	.word	0xbd15a221
   dc39c:	bd6ef16b 	.word	0xbd6ef16b
   dc3a0:	3dba2e6e 	.word	0x3dba2e6e
   dc3a4:	bd9d8795 	.word	0xbd9d8795
   dc3a8:	3e124925 	.word	0x3e124925
   dc3ac:	bde38e38 	.word	0xbde38e38
   dc3b0:	3eaaaaab 	.word	0x3eaaaaab
   dc3b4:	be4ccccd 	.word	0xbe4ccccd
   dc3b8:	000ded68 	.word	0x000ded68
   dc3bc:	000ded58 	.word	0x000ded58
   dc3c0:	7149f2ca 	.word	0x7149f2ca
   dc3c4:	3f97ffff 	.word	0x3f97ffff
   dc3c8:	401bffff 	.word	0x401bffff

000dc3cc <fabsf>:
   dc3cc:	ee10 3a10 	vmov	r3, s0
   dc3d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dc3d4:	ee00 3a10 	vmov	s0, r3
   dc3d8:	4770      	bx	lr
   dc3da:	bf00      	nop

000dc3dc <floorf>:
   dc3dc:	ee10 2a10 	vmov	r2, s0
   dc3e0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   dc3e4:	3b7f      	subs	r3, #127	; 0x7f
   dc3e6:	2b16      	cmp	r3, #22
   dc3e8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   dc3ec:	dc1a      	bgt.n	dc424 <floorf+0x48>
   dc3ee:	2b00      	cmp	r3, #0
   dc3f0:	db1e      	blt.n	dc430 <floorf+0x54>
   dc3f2:	491a      	ldr	r1, [pc, #104]	; (dc45c <floorf+0x80>)
   dc3f4:	4119      	asrs	r1, r3
   dc3f6:	420a      	tst	r2, r1
   dc3f8:	d027      	beq.n	dc44a <floorf+0x6e>
   dc3fa:	eddf 7a19 	vldr	s15, [pc, #100]	; dc460 <floorf+0x84>
   dc3fe:	ee70 7a27 	vadd.f32	s15, s0, s15
   dc402:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dc406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc40a:	dd1e      	ble.n	dc44a <floorf+0x6e>
   dc40c:	2a00      	cmp	r2, #0
   dc40e:	da04      	bge.n	dc41a <floorf+0x3e>
   dc410:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   dc414:	fa40 f303 	asr.w	r3, r0, r3
   dc418:	441a      	add	r2, r3
   dc41a:	ea22 0301 	bic.w	r3, r2, r1
   dc41e:	ee00 3a10 	vmov	s0, r3
   dc422:	4770      	bx	lr
   dc424:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   dc428:	d30f      	bcc.n	dc44a <floorf+0x6e>
   dc42a:	ee30 0a00 	vadd.f32	s0, s0, s0
   dc42e:	4770      	bx	lr
   dc430:	eddf 7a0b 	vldr	s15, [pc, #44]	; dc460 <floorf+0x84>
   dc434:	ee70 7a27 	vadd.f32	s15, s0, s15
   dc438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dc43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc440:	dd03      	ble.n	dc44a <floorf+0x6e>
   dc442:	2a00      	cmp	r2, #0
   dc444:	db02      	blt.n	dc44c <floorf+0x70>
   dc446:	ed9f 0a07 	vldr	s0, [pc, #28]	; dc464 <floorf+0x88>
   dc44a:	4770      	bx	lr
   dc44c:	2900      	cmp	r1, #0
   dc44e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   dc452:	bf18      	it	ne
   dc454:	eeb0 0a67 	vmovne.f32	s0, s15
   dc458:	4770      	bx	lr
   dc45a:	bf00      	nop
   dc45c:	007fffff 	.word	0x007fffff
   dc460:	7149f2ca 	.word	0x7149f2ca
   dc464:	00000000 	.word	0x00000000

000dc468 <scalbnf>:
   dc468:	b082      	sub	sp, #8
   dc46a:	ed8d 0a01 	vstr	s0, [sp, #4]
   dc46e:	9b01      	ldr	r3, [sp, #4]
   dc470:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   dc474:	d02a      	beq.n	dc4cc <scalbnf+0x64>
   dc476:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   dc47a:	d223      	bcs.n	dc4c4 <scalbnf+0x5c>
   dc47c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   dc480:	d128      	bne.n	dc4d4 <scalbnf+0x6c>
   dc482:	ed9d 7a01 	vldr	s14, [sp, #4]
   dc486:	eddf 7a2a 	vldr	s15, [pc, #168]	; dc530 <scalbnf+0xc8>
   dc48a:	4b2a      	ldr	r3, [pc, #168]	; (dc534 <scalbnf+0xcc>)
   dc48c:	ee67 7a27 	vmul.f32	s15, s14, s15
   dc490:	4298      	cmp	r0, r3
   dc492:	edcd 7a01 	vstr	s15, [sp, #4]
   dc496:	db37      	blt.n	dc508 <scalbnf+0xa0>
   dc498:	9b01      	ldr	r3, [sp, #4]
   dc49a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   dc49e:	3a19      	subs	r2, #25
   dc4a0:	4402      	add	r2, r0
   dc4a2:	2afe      	cmp	r2, #254	; 0xfe
   dc4a4:	dd1a      	ble.n	dc4dc <scalbnf+0x74>
   dc4a6:	ed9f 0a24 	vldr	s0, [pc, #144]	; dc538 <scalbnf+0xd0>
   dc4aa:	ed9f 7a24 	vldr	s14, [pc, #144]	; dc53c <scalbnf+0xd4>
   dc4ae:	9b01      	ldr	r3, [sp, #4]
   dc4b0:	2b00      	cmp	r3, #0
   dc4b2:	eef0 7a40 	vmov.f32	s15, s0
   dc4b6:	bfb8      	it	lt
   dc4b8:	eeb0 0a47 	vmovlt.f32	s0, s14
   dc4bc:	ee20 0a27 	vmul.f32	s0, s0, s15
   dc4c0:	b002      	add	sp, #8
   dc4c2:	4770      	bx	lr
   dc4c4:	ee30 0a00 	vadd.f32	s0, s0, s0
   dc4c8:	b002      	add	sp, #8
   dc4ca:	4770      	bx	lr
   dc4cc:	ed9d 0a01 	vldr	s0, [sp, #4]
   dc4d0:	b002      	add	sp, #8
   dc4d2:	4770      	bx	lr
   dc4d4:	0dd2      	lsrs	r2, r2, #23
   dc4d6:	4402      	add	r2, r0
   dc4d8:	2afe      	cmp	r2, #254	; 0xfe
   dc4da:	dce4      	bgt.n	dc4a6 <scalbnf+0x3e>
   dc4dc:	2a00      	cmp	r2, #0
   dc4de:	dc0b      	bgt.n	dc4f8 <scalbnf+0x90>
   dc4e0:	f112 0f16 	cmn.w	r2, #22
   dc4e4:	da17      	bge.n	dc516 <scalbnf+0xae>
   dc4e6:	f24c 3350 	movw	r3, #50000	; 0xc350
   dc4ea:	4298      	cmp	r0, r3
   dc4ec:	dcdb      	bgt.n	dc4a6 <scalbnf+0x3e>
   dc4ee:	ed9f 0a14 	vldr	s0, [pc, #80]	; dc540 <scalbnf+0xd8>
   dc4f2:	ed9f 7a14 	vldr	s14, [pc, #80]	; dc544 <scalbnf+0xdc>
   dc4f6:	e7da      	b.n	dc4ae <scalbnf+0x46>
   dc4f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   dc4fc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   dc500:	ee00 3a10 	vmov	s0, r3
   dc504:	b002      	add	sp, #8
   dc506:	4770      	bx	lr
   dc508:	ed9f 0a0d 	vldr	s0, [pc, #52]	; dc540 <scalbnf+0xd8>
   dc50c:	eddd 7a01 	vldr	s15, [sp, #4]
   dc510:	ee27 0a80 	vmul.f32	s0, s15, s0
   dc514:	e7d8      	b.n	dc4c8 <scalbnf+0x60>
   dc516:	3219      	adds	r2, #25
   dc518:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   dc51c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   dc520:	eddf 7a09 	vldr	s15, [pc, #36]	; dc548 <scalbnf+0xe0>
   dc524:	ee07 3a10 	vmov	s14, r3
   dc528:	ee27 0a27 	vmul.f32	s0, s14, s15
   dc52c:	e7cc      	b.n	dc4c8 <scalbnf+0x60>
   dc52e:	bf00      	nop
   dc530:	4c000000 	.word	0x4c000000
   dc534:	ffff3cb0 	.word	0xffff3cb0
   dc538:	7149f2ca 	.word	0x7149f2ca
   dc53c:	f149f2ca 	.word	0xf149f2ca
   dc540:	0da24260 	.word	0x0da24260
   dc544:	8da24260 	.word	0x8da24260
   dc548:	33000000 	.word	0x33000000

000dc54c <__aeabi_drsub>:
   dc54c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dc550:	e002      	b.n	dc558 <__adddf3>
   dc552:	bf00      	nop

000dc554 <__aeabi_dsub>:
   dc554:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dc558 <__adddf3>:
   dc558:	b530      	push	{r4, r5, lr}
   dc55a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dc55e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dc562:	ea94 0f05 	teq	r4, r5
   dc566:	bf08      	it	eq
   dc568:	ea90 0f02 	teqeq	r0, r2
   dc56c:	bf1f      	itttt	ne
   dc56e:	ea54 0c00 	orrsne.w	ip, r4, r0
   dc572:	ea55 0c02 	orrsne.w	ip, r5, r2
   dc576:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dc57a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc57e:	f000 80e2 	beq.w	dc746 <__adddf3+0x1ee>
   dc582:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dc586:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dc58a:	bfb8      	it	lt
   dc58c:	426d      	neglt	r5, r5
   dc58e:	dd0c      	ble.n	dc5aa <__adddf3+0x52>
   dc590:	442c      	add	r4, r5
   dc592:	ea80 0202 	eor.w	r2, r0, r2
   dc596:	ea81 0303 	eor.w	r3, r1, r3
   dc59a:	ea82 0000 	eor.w	r0, r2, r0
   dc59e:	ea83 0101 	eor.w	r1, r3, r1
   dc5a2:	ea80 0202 	eor.w	r2, r0, r2
   dc5a6:	ea81 0303 	eor.w	r3, r1, r3
   dc5aa:	2d36      	cmp	r5, #54	; 0x36
   dc5ac:	bf88      	it	hi
   dc5ae:	bd30      	pophi	{r4, r5, pc}
   dc5b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc5b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc5b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dc5bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dc5c0:	d002      	beq.n	dc5c8 <__adddf3+0x70>
   dc5c2:	4240      	negs	r0, r0
   dc5c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc5c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dc5cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc5d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dc5d4:	d002      	beq.n	dc5dc <__adddf3+0x84>
   dc5d6:	4252      	negs	r2, r2
   dc5d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc5dc:	ea94 0f05 	teq	r4, r5
   dc5e0:	f000 80a7 	beq.w	dc732 <__adddf3+0x1da>
   dc5e4:	f1a4 0401 	sub.w	r4, r4, #1
   dc5e8:	f1d5 0e20 	rsbs	lr, r5, #32
   dc5ec:	db0d      	blt.n	dc60a <__adddf3+0xb2>
   dc5ee:	fa02 fc0e 	lsl.w	ip, r2, lr
   dc5f2:	fa22 f205 	lsr.w	r2, r2, r5
   dc5f6:	1880      	adds	r0, r0, r2
   dc5f8:	f141 0100 	adc.w	r1, r1, #0
   dc5fc:	fa03 f20e 	lsl.w	r2, r3, lr
   dc600:	1880      	adds	r0, r0, r2
   dc602:	fa43 f305 	asr.w	r3, r3, r5
   dc606:	4159      	adcs	r1, r3
   dc608:	e00e      	b.n	dc628 <__adddf3+0xd0>
   dc60a:	f1a5 0520 	sub.w	r5, r5, #32
   dc60e:	f10e 0e20 	add.w	lr, lr, #32
   dc612:	2a01      	cmp	r2, #1
   dc614:	fa03 fc0e 	lsl.w	ip, r3, lr
   dc618:	bf28      	it	cs
   dc61a:	f04c 0c02 	orrcs.w	ip, ip, #2
   dc61e:	fa43 f305 	asr.w	r3, r3, r5
   dc622:	18c0      	adds	r0, r0, r3
   dc624:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dc628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc62c:	d507      	bpl.n	dc63e <__adddf3+0xe6>
   dc62e:	f04f 0e00 	mov.w	lr, #0
   dc632:	f1dc 0c00 	rsbs	ip, ip, #0
   dc636:	eb7e 0000 	sbcs.w	r0, lr, r0
   dc63a:	eb6e 0101 	sbc.w	r1, lr, r1
   dc63e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dc642:	d31b      	bcc.n	dc67c <__adddf3+0x124>
   dc644:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dc648:	d30c      	bcc.n	dc664 <__adddf3+0x10c>
   dc64a:	0849      	lsrs	r1, r1, #1
   dc64c:	ea5f 0030 	movs.w	r0, r0, rrx
   dc650:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dc654:	f104 0401 	add.w	r4, r4, #1
   dc658:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dc65c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dc660:	f080 809a 	bcs.w	dc798 <__adddf3+0x240>
   dc664:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dc668:	bf08      	it	eq
   dc66a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc66e:	f150 0000 	adcs.w	r0, r0, #0
   dc672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc676:	ea41 0105 	orr.w	r1, r1, r5
   dc67a:	bd30      	pop	{r4, r5, pc}
   dc67c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dc680:	4140      	adcs	r0, r0
   dc682:	eb41 0101 	adc.w	r1, r1, r1
   dc686:	3c01      	subs	r4, #1
   dc688:	bf28      	it	cs
   dc68a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dc68e:	d2e9      	bcs.n	dc664 <__adddf3+0x10c>
   dc690:	f091 0f00 	teq	r1, #0
   dc694:	bf04      	itt	eq
   dc696:	4601      	moveq	r1, r0
   dc698:	2000      	moveq	r0, #0
   dc69a:	fab1 f381 	clz	r3, r1
   dc69e:	bf08      	it	eq
   dc6a0:	3320      	addeq	r3, #32
   dc6a2:	f1a3 030b 	sub.w	r3, r3, #11
   dc6a6:	f1b3 0220 	subs.w	r2, r3, #32
   dc6aa:	da0c      	bge.n	dc6c6 <__adddf3+0x16e>
   dc6ac:	320c      	adds	r2, #12
   dc6ae:	dd08      	ble.n	dc6c2 <__adddf3+0x16a>
   dc6b0:	f102 0c14 	add.w	ip, r2, #20
   dc6b4:	f1c2 020c 	rsb	r2, r2, #12
   dc6b8:	fa01 f00c 	lsl.w	r0, r1, ip
   dc6bc:	fa21 f102 	lsr.w	r1, r1, r2
   dc6c0:	e00c      	b.n	dc6dc <__adddf3+0x184>
   dc6c2:	f102 0214 	add.w	r2, r2, #20
   dc6c6:	bfd8      	it	le
   dc6c8:	f1c2 0c20 	rsble	ip, r2, #32
   dc6cc:	fa01 f102 	lsl.w	r1, r1, r2
   dc6d0:	fa20 fc0c 	lsr.w	ip, r0, ip
   dc6d4:	bfdc      	itt	le
   dc6d6:	ea41 010c 	orrle.w	r1, r1, ip
   dc6da:	4090      	lslle	r0, r2
   dc6dc:	1ae4      	subs	r4, r4, r3
   dc6de:	bfa2      	ittt	ge
   dc6e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dc6e4:	4329      	orrge	r1, r5
   dc6e6:	bd30      	popge	{r4, r5, pc}
   dc6e8:	ea6f 0404 	mvn.w	r4, r4
   dc6ec:	3c1f      	subs	r4, #31
   dc6ee:	da1c      	bge.n	dc72a <__adddf3+0x1d2>
   dc6f0:	340c      	adds	r4, #12
   dc6f2:	dc0e      	bgt.n	dc712 <__adddf3+0x1ba>
   dc6f4:	f104 0414 	add.w	r4, r4, #20
   dc6f8:	f1c4 0220 	rsb	r2, r4, #32
   dc6fc:	fa20 f004 	lsr.w	r0, r0, r4
   dc700:	fa01 f302 	lsl.w	r3, r1, r2
   dc704:	ea40 0003 	orr.w	r0, r0, r3
   dc708:	fa21 f304 	lsr.w	r3, r1, r4
   dc70c:	ea45 0103 	orr.w	r1, r5, r3
   dc710:	bd30      	pop	{r4, r5, pc}
   dc712:	f1c4 040c 	rsb	r4, r4, #12
   dc716:	f1c4 0220 	rsb	r2, r4, #32
   dc71a:	fa20 f002 	lsr.w	r0, r0, r2
   dc71e:	fa01 f304 	lsl.w	r3, r1, r4
   dc722:	ea40 0003 	orr.w	r0, r0, r3
   dc726:	4629      	mov	r1, r5
   dc728:	bd30      	pop	{r4, r5, pc}
   dc72a:	fa21 f004 	lsr.w	r0, r1, r4
   dc72e:	4629      	mov	r1, r5
   dc730:	bd30      	pop	{r4, r5, pc}
   dc732:	f094 0f00 	teq	r4, #0
   dc736:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dc73a:	bf06      	itte	eq
   dc73c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dc740:	3401      	addeq	r4, #1
   dc742:	3d01      	subne	r5, #1
   dc744:	e74e      	b.n	dc5e4 <__adddf3+0x8c>
   dc746:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc74a:	bf18      	it	ne
   dc74c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc750:	d029      	beq.n	dc7a6 <__adddf3+0x24e>
   dc752:	ea94 0f05 	teq	r4, r5
   dc756:	bf08      	it	eq
   dc758:	ea90 0f02 	teqeq	r0, r2
   dc75c:	d005      	beq.n	dc76a <__adddf3+0x212>
   dc75e:	ea54 0c00 	orrs.w	ip, r4, r0
   dc762:	bf04      	itt	eq
   dc764:	4619      	moveq	r1, r3
   dc766:	4610      	moveq	r0, r2
   dc768:	bd30      	pop	{r4, r5, pc}
   dc76a:	ea91 0f03 	teq	r1, r3
   dc76e:	bf1e      	ittt	ne
   dc770:	2100      	movne	r1, #0
   dc772:	2000      	movne	r0, #0
   dc774:	bd30      	popne	{r4, r5, pc}
   dc776:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dc77a:	d105      	bne.n	dc788 <__adddf3+0x230>
   dc77c:	0040      	lsls	r0, r0, #1
   dc77e:	4149      	adcs	r1, r1
   dc780:	bf28      	it	cs
   dc782:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dc786:	bd30      	pop	{r4, r5, pc}
   dc788:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dc78c:	bf3c      	itt	cc
   dc78e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dc792:	bd30      	popcc	{r4, r5, pc}
   dc794:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc798:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dc79c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc7a0:	f04f 0000 	mov.w	r0, #0
   dc7a4:	bd30      	pop	{r4, r5, pc}
   dc7a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc7aa:	bf1a      	itte	ne
   dc7ac:	4619      	movne	r1, r3
   dc7ae:	4610      	movne	r0, r2
   dc7b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dc7b4:	bf1c      	itt	ne
   dc7b6:	460b      	movne	r3, r1
   dc7b8:	4602      	movne	r2, r0
   dc7ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc7be:	bf06      	itte	eq
   dc7c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dc7c4:	ea91 0f03 	teqeq	r1, r3
   dc7c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dc7cc:	bd30      	pop	{r4, r5, pc}
   dc7ce:	bf00      	nop

000dc7d0 <__aeabi_ui2d>:
   dc7d0:	f090 0f00 	teq	r0, #0
   dc7d4:	bf04      	itt	eq
   dc7d6:	2100      	moveq	r1, #0
   dc7d8:	4770      	bxeq	lr
   dc7da:	b530      	push	{r4, r5, lr}
   dc7dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc7e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc7e4:	f04f 0500 	mov.w	r5, #0
   dc7e8:	f04f 0100 	mov.w	r1, #0
   dc7ec:	e750      	b.n	dc690 <__adddf3+0x138>
   dc7ee:	bf00      	nop

000dc7f0 <__aeabi_i2d>:
   dc7f0:	f090 0f00 	teq	r0, #0
   dc7f4:	bf04      	itt	eq
   dc7f6:	2100      	moveq	r1, #0
   dc7f8:	4770      	bxeq	lr
   dc7fa:	b530      	push	{r4, r5, lr}
   dc7fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc800:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc804:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dc808:	bf48      	it	mi
   dc80a:	4240      	negmi	r0, r0
   dc80c:	f04f 0100 	mov.w	r1, #0
   dc810:	e73e      	b.n	dc690 <__adddf3+0x138>
   dc812:	bf00      	nop

000dc814 <__aeabi_f2d>:
   dc814:	0042      	lsls	r2, r0, #1
   dc816:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dc81a:	ea4f 0131 	mov.w	r1, r1, rrx
   dc81e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dc822:	bf1f      	itttt	ne
   dc824:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dc828:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dc82c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dc830:	4770      	bxne	lr
   dc832:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dc836:	bf08      	it	eq
   dc838:	4770      	bxeq	lr
   dc83a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dc83e:	bf04      	itt	eq
   dc840:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dc844:	4770      	bxeq	lr
   dc846:	b530      	push	{r4, r5, lr}
   dc848:	f44f 7460 	mov.w	r4, #896	; 0x380
   dc84c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc850:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc854:	e71c      	b.n	dc690 <__adddf3+0x138>
   dc856:	bf00      	nop

000dc858 <__aeabi_ul2d>:
   dc858:	ea50 0201 	orrs.w	r2, r0, r1
   dc85c:	bf08      	it	eq
   dc85e:	4770      	bxeq	lr
   dc860:	b530      	push	{r4, r5, lr}
   dc862:	f04f 0500 	mov.w	r5, #0
   dc866:	e00a      	b.n	dc87e <__aeabi_l2d+0x16>

000dc868 <__aeabi_l2d>:
   dc868:	ea50 0201 	orrs.w	r2, r0, r1
   dc86c:	bf08      	it	eq
   dc86e:	4770      	bxeq	lr
   dc870:	b530      	push	{r4, r5, lr}
   dc872:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dc876:	d502      	bpl.n	dc87e <__aeabi_l2d+0x16>
   dc878:	4240      	negs	r0, r0
   dc87a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc87e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc882:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc886:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dc88a:	f43f aed8 	beq.w	dc63e <__adddf3+0xe6>
   dc88e:	f04f 0203 	mov.w	r2, #3
   dc892:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc896:	bf18      	it	ne
   dc898:	3203      	addne	r2, #3
   dc89a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc89e:	bf18      	it	ne
   dc8a0:	3203      	addne	r2, #3
   dc8a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dc8a6:	f1c2 0320 	rsb	r3, r2, #32
   dc8aa:	fa00 fc03 	lsl.w	ip, r0, r3
   dc8ae:	fa20 f002 	lsr.w	r0, r0, r2
   dc8b2:	fa01 fe03 	lsl.w	lr, r1, r3
   dc8b6:	ea40 000e 	orr.w	r0, r0, lr
   dc8ba:	fa21 f102 	lsr.w	r1, r1, r2
   dc8be:	4414      	add	r4, r2
   dc8c0:	e6bd      	b.n	dc63e <__adddf3+0xe6>
   dc8c2:	bf00      	nop

000dc8c4 <__aeabi_dmul>:
   dc8c4:	b570      	push	{r4, r5, r6, lr}
   dc8c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc8ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc8ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc8d2:	bf1d      	ittte	ne
   dc8d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc8d8:	ea94 0f0c 	teqne	r4, ip
   dc8dc:	ea95 0f0c 	teqne	r5, ip
   dc8e0:	f000 f8de 	bleq	dcaa0 <__aeabi_dmul+0x1dc>
   dc8e4:	442c      	add	r4, r5
   dc8e6:	ea81 0603 	eor.w	r6, r1, r3
   dc8ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dc8ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dc8f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dc8f6:	bf18      	it	ne
   dc8f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dc8fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc904:	d038      	beq.n	dc978 <__aeabi_dmul+0xb4>
   dc906:	fba0 ce02 	umull	ip, lr, r0, r2
   dc90a:	f04f 0500 	mov.w	r5, #0
   dc90e:	fbe1 e502 	umlal	lr, r5, r1, r2
   dc912:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dc916:	fbe0 e503 	umlal	lr, r5, r0, r3
   dc91a:	f04f 0600 	mov.w	r6, #0
   dc91e:	fbe1 5603 	umlal	r5, r6, r1, r3
   dc922:	f09c 0f00 	teq	ip, #0
   dc926:	bf18      	it	ne
   dc928:	f04e 0e01 	orrne.w	lr, lr, #1
   dc92c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dc930:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dc934:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dc938:	d204      	bcs.n	dc944 <__aeabi_dmul+0x80>
   dc93a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dc93e:	416d      	adcs	r5, r5
   dc940:	eb46 0606 	adc.w	r6, r6, r6
   dc944:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dc948:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dc94c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dc950:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dc954:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dc958:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc95c:	bf88      	it	hi
   dc95e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc962:	d81e      	bhi.n	dc9a2 <__aeabi_dmul+0xde>
   dc964:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dc968:	bf08      	it	eq
   dc96a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dc96e:	f150 0000 	adcs.w	r0, r0, #0
   dc972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc976:	bd70      	pop	{r4, r5, r6, pc}
   dc978:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dc97c:	ea46 0101 	orr.w	r1, r6, r1
   dc980:	ea40 0002 	orr.w	r0, r0, r2
   dc984:	ea81 0103 	eor.w	r1, r1, r3
   dc988:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dc98c:	bfc2      	ittt	gt
   dc98e:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc996:	bd70      	popgt	{r4, r5, r6, pc}
   dc998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc99c:	f04f 0e00 	mov.w	lr, #0
   dc9a0:	3c01      	subs	r4, #1
   dc9a2:	f300 80ab 	bgt.w	dcafc <__aeabi_dmul+0x238>
   dc9a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dc9aa:	bfde      	ittt	le
   dc9ac:	2000      	movle	r0, #0
   dc9ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dc9b2:	bd70      	pople	{r4, r5, r6, pc}
   dc9b4:	f1c4 0400 	rsb	r4, r4, #0
   dc9b8:	3c20      	subs	r4, #32
   dc9ba:	da35      	bge.n	dca28 <__aeabi_dmul+0x164>
   dc9bc:	340c      	adds	r4, #12
   dc9be:	dc1b      	bgt.n	dc9f8 <__aeabi_dmul+0x134>
   dc9c0:	f104 0414 	add.w	r4, r4, #20
   dc9c4:	f1c4 0520 	rsb	r5, r4, #32
   dc9c8:	fa00 f305 	lsl.w	r3, r0, r5
   dc9cc:	fa20 f004 	lsr.w	r0, r0, r4
   dc9d0:	fa01 f205 	lsl.w	r2, r1, r5
   dc9d4:	ea40 0002 	orr.w	r0, r0, r2
   dc9d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dc9dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc9e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc9e4:	fa21 f604 	lsr.w	r6, r1, r4
   dc9e8:	eb42 0106 	adc.w	r1, r2, r6
   dc9ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc9f0:	bf08      	it	eq
   dc9f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc9f6:	bd70      	pop	{r4, r5, r6, pc}
   dc9f8:	f1c4 040c 	rsb	r4, r4, #12
   dc9fc:	f1c4 0520 	rsb	r5, r4, #32
   dca00:	fa00 f304 	lsl.w	r3, r0, r4
   dca04:	fa20 f005 	lsr.w	r0, r0, r5
   dca08:	fa01 f204 	lsl.w	r2, r1, r4
   dca0c:	ea40 0002 	orr.w	r0, r0, r2
   dca10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dca14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dca18:	f141 0100 	adc.w	r1, r1, #0
   dca1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dca20:	bf08      	it	eq
   dca22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dca26:	bd70      	pop	{r4, r5, r6, pc}
   dca28:	f1c4 0520 	rsb	r5, r4, #32
   dca2c:	fa00 f205 	lsl.w	r2, r0, r5
   dca30:	ea4e 0e02 	orr.w	lr, lr, r2
   dca34:	fa20 f304 	lsr.w	r3, r0, r4
   dca38:	fa01 f205 	lsl.w	r2, r1, r5
   dca3c:	ea43 0302 	orr.w	r3, r3, r2
   dca40:	fa21 f004 	lsr.w	r0, r1, r4
   dca44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dca48:	fa21 f204 	lsr.w	r2, r1, r4
   dca4c:	ea20 0002 	bic.w	r0, r0, r2
   dca50:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dca54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dca58:	bf08      	it	eq
   dca5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dca5e:	bd70      	pop	{r4, r5, r6, pc}
   dca60:	f094 0f00 	teq	r4, #0
   dca64:	d10f      	bne.n	dca86 <__aeabi_dmul+0x1c2>
   dca66:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dca6a:	0040      	lsls	r0, r0, #1
   dca6c:	eb41 0101 	adc.w	r1, r1, r1
   dca70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dca74:	bf08      	it	eq
   dca76:	3c01      	subeq	r4, #1
   dca78:	d0f7      	beq.n	dca6a <__aeabi_dmul+0x1a6>
   dca7a:	ea41 0106 	orr.w	r1, r1, r6
   dca7e:	f095 0f00 	teq	r5, #0
   dca82:	bf18      	it	ne
   dca84:	4770      	bxne	lr
   dca86:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dca8a:	0052      	lsls	r2, r2, #1
   dca8c:	eb43 0303 	adc.w	r3, r3, r3
   dca90:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dca94:	bf08      	it	eq
   dca96:	3d01      	subeq	r5, #1
   dca98:	d0f7      	beq.n	dca8a <__aeabi_dmul+0x1c6>
   dca9a:	ea43 0306 	orr.w	r3, r3, r6
   dca9e:	4770      	bx	lr
   dcaa0:	ea94 0f0c 	teq	r4, ip
   dcaa4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dcaa8:	bf18      	it	ne
   dcaaa:	ea95 0f0c 	teqne	r5, ip
   dcaae:	d00c      	beq.n	dcaca <__aeabi_dmul+0x206>
   dcab0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dcab4:	bf18      	it	ne
   dcab6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dcaba:	d1d1      	bne.n	dca60 <__aeabi_dmul+0x19c>
   dcabc:	ea81 0103 	eor.w	r1, r1, r3
   dcac0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dcac4:	f04f 0000 	mov.w	r0, #0
   dcac8:	bd70      	pop	{r4, r5, r6, pc}
   dcaca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dcace:	bf06      	itte	eq
   dcad0:	4610      	moveq	r0, r2
   dcad2:	4619      	moveq	r1, r3
   dcad4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dcad8:	d019      	beq.n	dcb0e <__aeabi_dmul+0x24a>
   dcada:	ea94 0f0c 	teq	r4, ip
   dcade:	d102      	bne.n	dcae6 <__aeabi_dmul+0x222>
   dcae0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dcae4:	d113      	bne.n	dcb0e <__aeabi_dmul+0x24a>
   dcae6:	ea95 0f0c 	teq	r5, ip
   dcaea:	d105      	bne.n	dcaf8 <__aeabi_dmul+0x234>
   dcaec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dcaf0:	bf1c      	itt	ne
   dcaf2:	4610      	movne	r0, r2
   dcaf4:	4619      	movne	r1, r3
   dcaf6:	d10a      	bne.n	dcb0e <__aeabi_dmul+0x24a>
   dcaf8:	ea81 0103 	eor.w	r1, r1, r3
   dcafc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dcb00:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dcb04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dcb08:	f04f 0000 	mov.w	r0, #0
   dcb0c:	bd70      	pop	{r4, r5, r6, pc}
   dcb0e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dcb12:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dcb16:	bd70      	pop	{r4, r5, r6, pc}

000dcb18 <__aeabi_ddiv>:
   dcb18:	b570      	push	{r4, r5, r6, lr}
   dcb1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dcb1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dcb22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dcb26:	bf1d      	ittte	ne
   dcb28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dcb2c:	ea94 0f0c 	teqne	r4, ip
   dcb30:	ea95 0f0c 	teqne	r5, ip
   dcb34:	f000 f8a7 	bleq	dcc86 <__aeabi_ddiv+0x16e>
   dcb38:	eba4 0405 	sub.w	r4, r4, r5
   dcb3c:	ea81 0e03 	eor.w	lr, r1, r3
   dcb40:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dcb44:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dcb48:	f000 8088 	beq.w	dcc5c <__aeabi_ddiv+0x144>
   dcb4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dcb50:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dcb54:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dcb58:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dcb5c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dcb60:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dcb64:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dcb68:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dcb6c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dcb70:	429d      	cmp	r5, r3
   dcb72:	bf08      	it	eq
   dcb74:	4296      	cmpeq	r6, r2
   dcb76:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dcb7a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dcb7e:	d202      	bcs.n	dcb86 <__aeabi_ddiv+0x6e>
   dcb80:	085b      	lsrs	r3, r3, #1
   dcb82:	ea4f 0232 	mov.w	r2, r2, rrx
   dcb86:	1ab6      	subs	r6, r6, r2
   dcb88:	eb65 0503 	sbc.w	r5, r5, r3
   dcb8c:	085b      	lsrs	r3, r3, #1
   dcb8e:	ea4f 0232 	mov.w	r2, r2, rrx
   dcb92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dcb96:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dcb9a:	ebb6 0e02 	subs.w	lr, r6, r2
   dcb9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dcba2:	bf22      	ittt	cs
   dcba4:	1ab6      	subcs	r6, r6, r2
   dcba6:	4675      	movcs	r5, lr
   dcba8:	ea40 000c 	orrcs.w	r0, r0, ip
   dcbac:	085b      	lsrs	r3, r3, #1
   dcbae:	ea4f 0232 	mov.w	r2, r2, rrx
   dcbb2:	ebb6 0e02 	subs.w	lr, r6, r2
   dcbb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dcbba:	bf22      	ittt	cs
   dcbbc:	1ab6      	subcs	r6, r6, r2
   dcbbe:	4675      	movcs	r5, lr
   dcbc0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dcbc4:	085b      	lsrs	r3, r3, #1
   dcbc6:	ea4f 0232 	mov.w	r2, r2, rrx
   dcbca:	ebb6 0e02 	subs.w	lr, r6, r2
   dcbce:	eb75 0e03 	sbcs.w	lr, r5, r3
   dcbd2:	bf22      	ittt	cs
   dcbd4:	1ab6      	subcs	r6, r6, r2
   dcbd6:	4675      	movcs	r5, lr
   dcbd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dcbdc:	085b      	lsrs	r3, r3, #1
   dcbde:	ea4f 0232 	mov.w	r2, r2, rrx
   dcbe2:	ebb6 0e02 	subs.w	lr, r6, r2
   dcbe6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dcbea:	bf22      	ittt	cs
   dcbec:	1ab6      	subcs	r6, r6, r2
   dcbee:	4675      	movcs	r5, lr
   dcbf0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dcbf4:	ea55 0e06 	orrs.w	lr, r5, r6
   dcbf8:	d018      	beq.n	dcc2c <__aeabi_ddiv+0x114>
   dcbfa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dcbfe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dcc02:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dcc06:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dcc0a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dcc0e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dcc12:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dcc16:	d1c0      	bne.n	dcb9a <__aeabi_ddiv+0x82>
   dcc18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dcc1c:	d10b      	bne.n	dcc36 <__aeabi_ddiv+0x11e>
   dcc1e:	ea41 0100 	orr.w	r1, r1, r0
   dcc22:	f04f 0000 	mov.w	r0, #0
   dcc26:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dcc2a:	e7b6      	b.n	dcb9a <__aeabi_ddiv+0x82>
   dcc2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dcc30:	bf04      	itt	eq
   dcc32:	4301      	orreq	r1, r0
   dcc34:	2000      	moveq	r0, #0
   dcc36:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dcc3a:	bf88      	it	hi
   dcc3c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dcc40:	f63f aeaf 	bhi.w	dc9a2 <__aeabi_dmul+0xde>
   dcc44:	ebb5 0c03 	subs.w	ip, r5, r3
   dcc48:	bf04      	itt	eq
   dcc4a:	ebb6 0c02 	subseq.w	ip, r6, r2
   dcc4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dcc52:	f150 0000 	adcs.w	r0, r0, #0
   dcc56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dcc5a:	bd70      	pop	{r4, r5, r6, pc}
   dcc5c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dcc60:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dcc64:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dcc68:	bfc2      	ittt	gt
   dcc6a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dcc6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dcc72:	bd70      	popgt	{r4, r5, r6, pc}
   dcc74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dcc78:	f04f 0e00 	mov.w	lr, #0
   dcc7c:	3c01      	subs	r4, #1
   dcc7e:	e690      	b.n	dc9a2 <__aeabi_dmul+0xde>
   dcc80:	ea45 0e06 	orr.w	lr, r5, r6
   dcc84:	e68d      	b.n	dc9a2 <__aeabi_dmul+0xde>
   dcc86:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dcc8a:	ea94 0f0c 	teq	r4, ip
   dcc8e:	bf08      	it	eq
   dcc90:	ea95 0f0c 	teqeq	r5, ip
   dcc94:	f43f af3b 	beq.w	dcb0e <__aeabi_dmul+0x24a>
   dcc98:	ea94 0f0c 	teq	r4, ip
   dcc9c:	d10a      	bne.n	dccb4 <__aeabi_ddiv+0x19c>
   dcc9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dcca2:	f47f af34 	bne.w	dcb0e <__aeabi_dmul+0x24a>
   dcca6:	ea95 0f0c 	teq	r5, ip
   dccaa:	f47f af25 	bne.w	dcaf8 <__aeabi_dmul+0x234>
   dccae:	4610      	mov	r0, r2
   dccb0:	4619      	mov	r1, r3
   dccb2:	e72c      	b.n	dcb0e <__aeabi_dmul+0x24a>
   dccb4:	ea95 0f0c 	teq	r5, ip
   dccb8:	d106      	bne.n	dccc8 <__aeabi_ddiv+0x1b0>
   dccba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dccbe:	f43f aefd 	beq.w	dcabc <__aeabi_dmul+0x1f8>
   dccc2:	4610      	mov	r0, r2
   dccc4:	4619      	mov	r1, r3
   dccc6:	e722      	b.n	dcb0e <__aeabi_dmul+0x24a>
   dccc8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dcccc:	bf18      	it	ne
   dccce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dccd2:	f47f aec5 	bne.w	dca60 <__aeabi_dmul+0x19c>
   dccd6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dccda:	f47f af0d 	bne.w	dcaf8 <__aeabi_dmul+0x234>
   dccde:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dcce2:	f47f aeeb 	bne.w	dcabc <__aeabi_dmul+0x1f8>
   dcce6:	e712      	b.n	dcb0e <__aeabi_dmul+0x24a>

000dcce8 <__gedf2>:
   dcce8:	f04f 3cff 	mov.w	ip, #4294967295
   dccec:	e006      	b.n	dccfc <__cmpdf2+0x4>
   dccee:	bf00      	nop

000dccf0 <__ledf2>:
   dccf0:	f04f 0c01 	mov.w	ip, #1
   dccf4:	e002      	b.n	dccfc <__cmpdf2+0x4>
   dccf6:	bf00      	nop

000dccf8 <__cmpdf2>:
   dccf8:	f04f 0c01 	mov.w	ip, #1
   dccfc:	f84d cd04 	str.w	ip, [sp, #-4]!
   dcd00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dcd04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcd08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dcd0c:	bf18      	it	ne
   dcd0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dcd12:	d01b      	beq.n	dcd4c <__cmpdf2+0x54>
   dcd14:	b001      	add	sp, #4
   dcd16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dcd1a:	bf0c      	ite	eq
   dcd1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dcd20:	ea91 0f03 	teqne	r1, r3
   dcd24:	bf02      	ittt	eq
   dcd26:	ea90 0f02 	teqeq	r0, r2
   dcd2a:	2000      	moveq	r0, #0
   dcd2c:	4770      	bxeq	lr
   dcd2e:	f110 0f00 	cmn.w	r0, #0
   dcd32:	ea91 0f03 	teq	r1, r3
   dcd36:	bf58      	it	pl
   dcd38:	4299      	cmppl	r1, r3
   dcd3a:	bf08      	it	eq
   dcd3c:	4290      	cmpeq	r0, r2
   dcd3e:	bf2c      	ite	cs
   dcd40:	17d8      	asrcs	r0, r3, #31
   dcd42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dcd46:	f040 0001 	orr.w	r0, r0, #1
   dcd4a:	4770      	bx	lr
   dcd4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dcd50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcd54:	d102      	bne.n	dcd5c <__cmpdf2+0x64>
   dcd56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dcd5a:	d107      	bne.n	dcd6c <__cmpdf2+0x74>
   dcd5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dcd60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcd64:	d1d6      	bne.n	dcd14 <__cmpdf2+0x1c>
   dcd66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dcd6a:	d0d3      	beq.n	dcd14 <__cmpdf2+0x1c>
   dcd6c:	f85d 0b04 	ldr.w	r0, [sp], #4
   dcd70:	4770      	bx	lr
   dcd72:	bf00      	nop

000dcd74 <__aeabi_cdrcmple>:
   dcd74:	4684      	mov	ip, r0
   dcd76:	4610      	mov	r0, r2
   dcd78:	4662      	mov	r2, ip
   dcd7a:	468c      	mov	ip, r1
   dcd7c:	4619      	mov	r1, r3
   dcd7e:	4663      	mov	r3, ip
   dcd80:	e000      	b.n	dcd84 <__aeabi_cdcmpeq>
   dcd82:	bf00      	nop

000dcd84 <__aeabi_cdcmpeq>:
   dcd84:	b501      	push	{r0, lr}
   dcd86:	f7ff ffb7 	bl	dccf8 <__cmpdf2>
   dcd8a:	2800      	cmp	r0, #0
   dcd8c:	bf48      	it	mi
   dcd8e:	f110 0f00 	cmnmi.w	r0, #0
   dcd92:	bd01      	pop	{r0, pc}

000dcd94 <__aeabi_dcmpeq>:
   dcd94:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcd98:	f7ff fff4 	bl	dcd84 <__aeabi_cdcmpeq>
   dcd9c:	bf0c      	ite	eq
   dcd9e:	2001      	moveq	r0, #1
   dcda0:	2000      	movne	r0, #0
   dcda2:	f85d fb08 	ldr.w	pc, [sp], #8
   dcda6:	bf00      	nop

000dcda8 <__aeabi_dcmplt>:
   dcda8:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcdac:	f7ff ffea 	bl	dcd84 <__aeabi_cdcmpeq>
   dcdb0:	bf34      	ite	cc
   dcdb2:	2001      	movcc	r0, #1
   dcdb4:	2000      	movcs	r0, #0
   dcdb6:	f85d fb08 	ldr.w	pc, [sp], #8
   dcdba:	bf00      	nop

000dcdbc <__aeabi_dcmple>:
   dcdbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcdc0:	f7ff ffe0 	bl	dcd84 <__aeabi_cdcmpeq>
   dcdc4:	bf94      	ite	ls
   dcdc6:	2001      	movls	r0, #1
   dcdc8:	2000      	movhi	r0, #0
   dcdca:	f85d fb08 	ldr.w	pc, [sp], #8
   dcdce:	bf00      	nop

000dcdd0 <__aeabi_dcmpge>:
   dcdd0:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcdd4:	f7ff ffce 	bl	dcd74 <__aeabi_cdrcmple>
   dcdd8:	bf94      	ite	ls
   dcdda:	2001      	movls	r0, #1
   dcddc:	2000      	movhi	r0, #0
   dcdde:	f85d fb08 	ldr.w	pc, [sp], #8
   dcde2:	bf00      	nop

000dcde4 <__aeabi_dcmpgt>:
   dcde4:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcde8:	f7ff ffc4 	bl	dcd74 <__aeabi_cdrcmple>
   dcdec:	bf34      	ite	cc
   dcdee:	2001      	movcc	r0, #1
   dcdf0:	2000      	movcs	r0, #0
   dcdf2:	f85d fb08 	ldr.w	pc, [sp], #8
   dcdf6:	bf00      	nop

000dcdf8 <__aeabi_dcmpun>:
   dcdf8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dcdfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dce00:	d102      	bne.n	dce08 <__aeabi_dcmpun+0x10>
   dce02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dce06:	d10a      	bne.n	dce1e <__aeabi_dcmpun+0x26>
   dce08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dce0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dce10:	d102      	bne.n	dce18 <__aeabi_dcmpun+0x20>
   dce12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dce16:	d102      	bne.n	dce1e <__aeabi_dcmpun+0x26>
   dce18:	f04f 0000 	mov.w	r0, #0
   dce1c:	4770      	bx	lr
   dce1e:	f04f 0001 	mov.w	r0, #1
   dce22:	4770      	bx	lr

000dce24 <__aeabi_d2iz>:
   dce24:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dce28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dce2c:	d215      	bcs.n	dce5a <__aeabi_d2iz+0x36>
   dce2e:	d511      	bpl.n	dce54 <__aeabi_d2iz+0x30>
   dce30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dce34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dce38:	d912      	bls.n	dce60 <__aeabi_d2iz+0x3c>
   dce3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dce3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dce42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dce46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dce4a:	fa23 f002 	lsr.w	r0, r3, r2
   dce4e:	bf18      	it	ne
   dce50:	4240      	negne	r0, r0
   dce52:	4770      	bx	lr
   dce54:	f04f 0000 	mov.w	r0, #0
   dce58:	4770      	bx	lr
   dce5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dce5e:	d105      	bne.n	dce6c <__aeabi_d2iz+0x48>
   dce60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dce64:	bf08      	it	eq
   dce66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dce6a:	4770      	bx	lr
   dce6c:	f04f 0000 	mov.w	r0, #0
   dce70:	4770      	bx	lr
   dce72:	bf00      	nop

000dce74 <__aeabi_d2uiz>:
   dce74:	004a      	lsls	r2, r1, #1
   dce76:	d211      	bcs.n	dce9c <__aeabi_d2uiz+0x28>
   dce78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dce7c:	d211      	bcs.n	dcea2 <__aeabi_d2uiz+0x2e>
   dce7e:	d50d      	bpl.n	dce9c <__aeabi_d2uiz+0x28>
   dce80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dce84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dce88:	d40e      	bmi.n	dcea8 <__aeabi_d2uiz+0x34>
   dce8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dce8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dce92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dce96:	fa23 f002 	lsr.w	r0, r3, r2
   dce9a:	4770      	bx	lr
   dce9c:	f04f 0000 	mov.w	r0, #0
   dcea0:	4770      	bx	lr
   dcea2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dcea6:	d102      	bne.n	dceae <__aeabi_d2uiz+0x3a>
   dcea8:	f04f 30ff 	mov.w	r0, #4294967295
   dceac:	4770      	bx	lr
   dceae:	f04f 0000 	mov.w	r0, #0
   dceb2:	4770      	bx	lr

000dceb4 <__aeabi_d2f>:
   dceb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dceb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dcebc:	bf24      	itt	cs
   dcebe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dcec2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dcec6:	d90d      	bls.n	dcee4 <__aeabi_d2f+0x30>
   dcec8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dcecc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dced0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dced4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dced8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dcedc:	bf08      	it	eq
   dcede:	f020 0001 	biceq.w	r0, r0, #1
   dcee2:	4770      	bx	lr
   dcee4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dcee8:	d121      	bne.n	dcf2e <__aeabi_d2f+0x7a>
   dceea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dceee:	bfbc      	itt	lt
   dcef0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dcef4:	4770      	bxlt	lr
   dcef6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dcefa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dcefe:	f1c2 0218 	rsb	r2, r2, #24
   dcf02:	f1c2 0c20 	rsb	ip, r2, #32
   dcf06:	fa10 f30c 	lsls.w	r3, r0, ip
   dcf0a:	fa20 f002 	lsr.w	r0, r0, r2
   dcf0e:	bf18      	it	ne
   dcf10:	f040 0001 	orrne.w	r0, r0, #1
   dcf14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dcf18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dcf1c:	fa03 fc0c 	lsl.w	ip, r3, ip
   dcf20:	ea40 000c 	orr.w	r0, r0, ip
   dcf24:	fa23 f302 	lsr.w	r3, r3, r2
   dcf28:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dcf2c:	e7cc      	b.n	dcec8 <__aeabi_d2f+0x14>
   dcf2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dcf32:	d107      	bne.n	dcf44 <__aeabi_d2f+0x90>
   dcf34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dcf38:	bf1e      	ittt	ne
   dcf3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dcf3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dcf42:	4770      	bxne	lr
   dcf44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dcf48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dcf4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dcf50:	4770      	bx	lr
   dcf52:	bf00      	nop

000dcf54 <__aeabi_frsub>:
   dcf54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   dcf58:	e002      	b.n	dcf60 <__addsf3>
   dcf5a:	bf00      	nop

000dcf5c <__aeabi_fsub>:
   dcf5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000dcf60 <__addsf3>:
   dcf60:	0042      	lsls	r2, r0, #1
   dcf62:	bf1f      	itttt	ne
   dcf64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   dcf68:	ea92 0f03 	teqne	r2, r3
   dcf6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   dcf70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dcf74:	d06a      	beq.n	dd04c <__addsf3+0xec>
   dcf76:	ea4f 6212 	mov.w	r2, r2, lsr #24
   dcf7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   dcf7e:	bfc1      	itttt	gt
   dcf80:	18d2      	addgt	r2, r2, r3
   dcf82:	4041      	eorgt	r1, r0
   dcf84:	4048      	eorgt	r0, r1
   dcf86:	4041      	eorgt	r1, r0
   dcf88:	bfb8      	it	lt
   dcf8a:	425b      	neglt	r3, r3
   dcf8c:	2b19      	cmp	r3, #25
   dcf8e:	bf88      	it	hi
   dcf90:	4770      	bxhi	lr
   dcf92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   dcf96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dcf9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   dcf9e:	bf18      	it	ne
   dcfa0:	4240      	negne	r0, r0
   dcfa2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dcfa6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   dcfaa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   dcfae:	bf18      	it	ne
   dcfb0:	4249      	negne	r1, r1
   dcfb2:	ea92 0f03 	teq	r2, r3
   dcfb6:	d03f      	beq.n	dd038 <__addsf3+0xd8>
   dcfb8:	f1a2 0201 	sub.w	r2, r2, #1
   dcfbc:	fa41 fc03 	asr.w	ip, r1, r3
   dcfc0:	eb10 000c 	adds.w	r0, r0, ip
   dcfc4:	f1c3 0320 	rsb	r3, r3, #32
   dcfc8:	fa01 f103 	lsl.w	r1, r1, r3
   dcfcc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   dcfd0:	d502      	bpl.n	dcfd8 <__addsf3+0x78>
   dcfd2:	4249      	negs	r1, r1
   dcfd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   dcfd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   dcfdc:	d313      	bcc.n	dd006 <__addsf3+0xa6>
   dcfde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   dcfe2:	d306      	bcc.n	dcff2 <__addsf3+0x92>
   dcfe4:	0840      	lsrs	r0, r0, #1
   dcfe6:	ea4f 0131 	mov.w	r1, r1, rrx
   dcfea:	f102 0201 	add.w	r2, r2, #1
   dcfee:	2afe      	cmp	r2, #254	; 0xfe
   dcff0:	d251      	bcs.n	dd096 <__addsf3+0x136>
   dcff2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   dcff6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   dcffa:	bf08      	it	eq
   dcffc:	f020 0001 	biceq.w	r0, r0, #1
   dd000:	ea40 0003 	orr.w	r0, r0, r3
   dd004:	4770      	bx	lr
   dd006:	0049      	lsls	r1, r1, #1
   dd008:	eb40 0000 	adc.w	r0, r0, r0
   dd00c:	3a01      	subs	r2, #1
   dd00e:	bf28      	it	cs
   dd010:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   dd014:	d2ed      	bcs.n	dcff2 <__addsf3+0x92>
   dd016:	fab0 fc80 	clz	ip, r0
   dd01a:	f1ac 0c08 	sub.w	ip, ip, #8
   dd01e:	ebb2 020c 	subs.w	r2, r2, ip
   dd022:	fa00 f00c 	lsl.w	r0, r0, ip
   dd026:	bfaa      	itet	ge
   dd028:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   dd02c:	4252      	neglt	r2, r2
   dd02e:	4318      	orrge	r0, r3
   dd030:	bfbc      	itt	lt
   dd032:	40d0      	lsrlt	r0, r2
   dd034:	4318      	orrlt	r0, r3
   dd036:	4770      	bx	lr
   dd038:	f092 0f00 	teq	r2, #0
   dd03c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   dd040:	bf06      	itte	eq
   dd042:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   dd046:	3201      	addeq	r2, #1
   dd048:	3b01      	subne	r3, #1
   dd04a:	e7b5      	b.n	dcfb8 <__addsf3+0x58>
   dd04c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   dd050:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   dd054:	bf18      	it	ne
   dd056:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dd05a:	d021      	beq.n	dd0a0 <__addsf3+0x140>
   dd05c:	ea92 0f03 	teq	r2, r3
   dd060:	d004      	beq.n	dd06c <__addsf3+0x10c>
   dd062:	f092 0f00 	teq	r2, #0
   dd066:	bf08      	it	eq
   dd068:	4608      	moveq	r0, r1
   dd06a:	4770      	bx	lr
   dd06c:	ea90 0f01 	teq	r0, r1
   dd070:	bf1c      	itt	ne
   dd072:	2000      	movne	r0, #0
   dd074:	4770      	bxne	lr
   dd076:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   dd07a:	d104      	bne.n	dd086 <__addsf3+0x126>
   dd07c:	0040      	lsls	r0, r0, #1
   dd07e:	bf28      	it	cs
   dd080:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   dd084:	4770      	bx	lr
   dd086:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   dd08a:	bf3c      	itt	cc
   dd08c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   dd090:	4770      	bxcc	lr
   dd092:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   dd096:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   dd09a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dd09e:	4770      	bx	lr
   dd0a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   dd0a4:	bf16      	itet	ne
   dd0a6:	4608      	movne	r0, r1
   dd0a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   dd0ac:	4601      	movne	r1, r0
   dd0ae:	0242      	lsls	r2, r0, #9
   dd0b0:	bf06      	itte	eq
   dd0b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   dd0b6:	ea90 0f01 	teqeq	r0, r1
   dd0ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   dd0be:	4770      	bx	lr

000dd0c0 <__aeabi_ui2f>:
   dd0c0:	f04f 0300 	mov.w	r3, #0
   dd0c4:	e004      	b.n	dd0d0 <__aeabi_i2f+0x8>
   dd0c6:	bf00      	nop

000dd0c8 <__aeabi_i2f>:
   dd0c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   dd0cc:	bf48      	it	mi
   dd0ce:	4240      	negmi	r0, r0
   dd0d0:	ea5f 0c00 	movs.w	ip, r0
   dd0d4:	bf08      	it	eq
   dd0d6:	4770      	bxeq	lr
   dd0d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   dd0dc:	4601      	mov	r1, r0
   dd0de:	f04f 0000 	mov.w	r0, #0
   dd0e2:	e01c      	b.n	dd11e <__aeabi_l2f+0x2a>

000dd0e4 <__aeabi_ul2f>:
   dd0e4:	ea50 0201 	orrs.w	r2, r0, r1
   dd0e8:	bf08      	it	eq
   dd0ea:	4770      	bxeq	lr
   dd0ec:	f04f 0300 	mov.w	r3, #0
   dd0f0:	e00a      	b.n	dd108 <__aeabi_l2f+0x14>
   dd0f2:	bf00      	nop

000dd0f4 <__aeabi_l2f>:
   dd0f4:	ea50 0201 	orrs.w	r2, r0, r1
   dd0f8:	bf08      	it	eq
   dd0fa:	4770      	bxeq	lr
   dd0fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   dd100:	d502      	bpl.n	dd108 <__aeabi_l2f+0x14>
   dd102:	4240      	negs	r0, r0
   dd104:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd108:	ea5f 0c01 	movs.w	ip, r1
   dd10c:	bf02      	ittt	eq
   dd10e:	4684      	moveq	ip, r0
   dd110:	4601      	moveq	r1, r0
   dd112:	2000      	moveq	r0, #0
   dd114:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   dd118:	bf08      	it	eq
   dd11a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   dd11e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   dd122:	fabc f28c 	clz	r2, ip
   dd126:	3a08      	subs	r2, #8
   dd128:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   dd12c:	db10      	blt.n	dd150 <__aeabi_l2f+0x5c>
   dd12e:	fa01 fc02 	lsl.w	ip, r1, r2
   dd132:	4463      	add	r3, ip
   dd134:	fa00 fc02 	lsl.w	ip, r0, r2
   dd138:	f1c2 0220 	rsb	r2, r2, #32
   dd13c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dd140:	fa20 f202 	lsr.w	r2, r0, r2
   dd144:	eb43 0002 	adc.w	r0, r3, r2
   dd148:	bf08      	it	eq
   dd14a:	f020 0001 	biceq.w	r0, r0, #1
   dd14e:	4770      	bx	lr
   dd150:	f102 0220 	add.w	r2, r2, #32
   dd154:	fa01 fc02 	lsl.w	ip, r1, r2
   dd158:	f1c2 0220 	rsb	r2, r2, #32
   dd15c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   dd160:	fa21 f202 	lsr.w	r2, r1, r2
   dd164:	eb43 0002 	adc.w	r0, r3, r2
   dd168:	bf08      	it	eq
   dd16a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   dd16e:	4770      	bx	lr

000dd170 <__aeabi_ldivmod>:
   dd170:	b97b      	cbnz	r3, dd192 <__aeabi_ldivmod+0x22>
   dd172:	b972      	cbnz	r2, dd192 <__aeabi_ldivmod+0x22>
   dd174:	2900      	cmp	r1, #0
   dd176:	bfbe      	ittt	lt
   dd178:	2000      	movlt	r0, #0
   dd17a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   dd17e:	e006      	blt.n	dd18e <__aeabi_ldivmod+0x1e>
   dd180:	bf08      	it	eq
   dd182:	2800      	cmpeq	r0, #0
   dd184:	bf1c      	itt	ne
   dd186:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   dd18a:	f04f 30ff 	movne.w	r0, #4294967295
   dd18e:	f000 b9d7 	b.w	dd540 <__aeabi_idiv0>
   dd192:	f1ad 0c08 	sub.w	ip, sp, #8
   dd196:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dd19a:	2900      	cmp	r1, #0
   dd19c:	db09      	blt.n	dd1b2 <__aeabi_ldivmod+0x42>
   dd19e:	2b00      	cmp	r3, #0
   dd1a0:	db1a      	blt.n	dd1d8 <__aeabi_ldivmod+0x68>
   dd1a2:	f000 f86b 	bl	dd27c <__udivmoddi4>
   dd1a6:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd1aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd1ae:	b004      	add	sp, #16
   dd1b0:	4770      	bx	lr
   dd1b2:	4240      	negs	r0, r0
   dd1b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd1b8:	2b00      	cmp	r3, #0
   dd1ba:	db1b      	blt.n	dd1f4 <__aeabi_ldivmod+0x84>
   dd1bc:	f000 f85e 	bl	dd27c <__udivmoddi4>
   dd1c0:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd1c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd1c8:	b004      	add	sp, #16
   dd1ca:	4240      	negs	r0, r0
   dd1cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd1d0:	4252      	negs	r2, r2
   dd1d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd1d6:	4770      	bx	lr
   dd1d8:	4252      	negs	r2, r2
   dd1da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd1de:	f000 f84d 	bl	dd27c <__udivmoddi4>
   dd1e2:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd1e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd1ea:	b004      	add	sp, #16
   dd1ec:	4240      	negs	r0, r0
   dd1ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd1f2:	4770      	bx	lr
   dd1f4:	4252      	negs	r2, r2
   dd1f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd1fa:	f000 f83f 	bl	dd27c <__udivmoddi4>
   dd1fe:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd206:	b004      	add	sp, #16
   dd208:	4252      	negs	r2, r2
   dd20a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd20e:	4770      	bx	lr

000dd210 <__aeabi_uldivmod>:
   dd210:	b953      	cbnz	r3, dd228 <__aeabi_uldivmod+0x18>
   dd212:	b94a      	cbnz	r2, dd228 <__aeabi_uldivmod+0x18>
   dd214:	2900      	cmp	r1, #0
   dd216:	bf08      	it	eq
   dd218:	2800      	cmpeq	r0, #0
   dd21a:	bf1c      	itt	ne
   dd21c:	f04f 31ff 	movne.w	r1, #4294967295
   dd220:	f04f 30ff 	movne.w	r0, #4294967295
   dd224:	f000 b98c 	b.w	dd540 <__aeabi_idiv0>
   dd228:	f1ad 0c08 	sub.w	ip, sp, #8
   dd22c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dd230:	f000 f824 	bl	dd27c <__udivmoddi4>
   dd234:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd23c:	b004      	add	sp, #16
   dd23e:	4770      	bx	lr

000dd240 <__aeabi_d2ulz>:
   dd240:	b5d0      	push	{r4, r6, r7, lr}
   dd242:	4b0c      	ldr	r3, [pc, #48]	; (dd274 <__aeabi_d2ulz+0x34>)
   dd244:	2200      	movs	r2, #0
   dd246:	4606      	mov	r6, r0
   dd248:	460f      	mov	r7, r1
   dd24a:	f7ff fb3b 	bl	dc8c4 <__aeabi_dmul>
   dd24e:	f7ff fe11 	bl	dce74 <__aeabi_d2uiz>
   dd252:	4604      	mov	r4, r0
   dd254:	f7ff fabc 	bl	dc7d0 <__aeabi_ui2d>
   dd258:	4b07      	ldr	r3, [pc, #28]	; (dd278 <__aeabi_d2ulz+0x38>)
   dd25a:	2200      	movs	r2, #0
   dd25c:	f7ff fb32 	bl	dc8c4 <__aeabi_dmul>
   dd260:	4602      	mov	r2, r0
   dd262:	460b      	mov	r3, r1
   dd264:	4630      	mov	r0, r6
   dd266:	4639      	mov	r1, r7
   dd268:	f7ff f974 	bl	dc554 <__aeabi_dsub>
   dd26c:	f7ff fe02 	bl	dce74 <__aeabi_d2uiz>
   dd270:	4621      	mov	r1, r4
   dd272:	bdd0      	pop	{r4, r6, r7, pc}
   dd274:	3df00000 	.word	0x3df00000
   dd278:	41f00000 	.word	0x41f00000

000dd27c <__udivmoddi4>:
   dd27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd280:	9d08      	ldr	r5, [sp, #32]
   dd282:	4604      	mov	r4, r0
   dd284:	468c      	mov	ip, r1
   dd286:	2b00      	cmp	r3, #0
   dd288:	f040 8083 	bne.w	dd392 <__udivmoddi4+0x116>
   dd28c:	428a      	cmp	r2, r1
   dd28e:	4617      	mov	r7, r2
   dd290:	d947      	bls.n	dd322 <__udivmoddi4+0xa6>
   dd292:	fab2 f282 	clz	r2, r2
   dd296:	b142      	cbz	r2, dd2aa <__udivmoddi4+0x2e>
   dd298:	f1c2 0020 	rsb	r0, r2, #32
   dd29c:	fa24 f000 	lsr.w	r0, r4, r0
   dd2a0:	4091      	lsls	r1, r2
   dd2a2:	4097      	lsls	r7, r2
   dd2a4:	ea40 0c01 	orr.w	ip, r0, r1
   dd2a8:	4094      	lsls	r4, r2
   dd2aa:	ea4f 4817 	mov.w	r8, r7, lsr #16
   dd2ae:	0c23      	lsrs	r3, r4, #16
   dd2b0:	fbbc f6f8 	udiv	r6, ip, r8
   dd2b4:	fa1f fe87 	uxth.w	lr, r7
   dd2b8:	fb08 c116 	mls	r1, r8, r6, ip
   dd2bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dd2c0:	fb06 f10e 	mul.w	r1, r6, lr
   dd2c4:	4299      	cmp	r1, r3
   dd2c6:	d909      	bls.n	dd2dc <__udivmoddi4+0x60>
   dd2c8:	18fb      	adds	r3, r7, r3
   dd2ca:	f106 30ff 	add.w	r0, r6, #4294967295
   dd2ce:	f080 8119 	bcs.w	dd504 <__udivmoddi4+0x288>
   dd2d2:	4299      	cmp	r1, r3
   dd2d4:	f240 8116 	bls.w	dd504 <__udivmoddi4+0x288>
   dd2d8:	3e02      	subs	r6, #2
   dd2da:	443b      	add	r3, r7
   dd2dc:	1a5b      	subs	r3, r3, r1
   dd2de:	b2a4      	uxth	r4, r4
   dd2e0:	fbb3 f0f8 	udiv	r0, r3, r8
   dd2e4:	fb08 3310 	mls	r3, r8, r0, r3
   dd2e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   dd2ec:	fb00 fe0e 	mul.w	lr, r0, lr
   dd2f0:	45a6      	cmp	lr, r4
   dd2f2:	d909      	bls.n	dd308 <__udivmoddi4+0x8c>
   dd2f4:	193c      	adds	r4, r7, r4
   dd2f6:	f100 33ff 	add.w	r3, r0, #4294967295
   dd2fa:	f080 8105 	bcs.w	dd508 <__udivmoddi4+0x28c>
   dd2fe:	45a6      	cmp	lr, r4
   dd300:	f240 8102 	bls.w	dd508 <__udivmoddi4+0x28c>
   dd304:	3802      	subs	r0, #2
   dd306:	443c      	add	r4, r7
   dd308:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   dd30c:	eba4 040e 	sub.w	r4, r4, lr
   dd310:	2600      	movs	r6, #0
   dd312:	b11d      	cbz	r5, dd31c <__udivmoddi4+0xa0>
   dd314:	40d4      	lsrs	r4, r2
   dd316:	2300      	movs	r3, #0
   dd318:	e9c5 4300 	strd	r4, r3, [r5]
   dd31c:	4631      	mov	r1, r6
   dd31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd322:	b902      	cbnz	r2, dd326 <__udivmoddi4+0xaa>
   dd324:	deff      	udf	#255	; 0xff
   dd326:	fab2 f282 	clz	r2, r2
   dd32a:	2a00      	cmp	r2, #0
   dd32c:	d150      	bne.n	dd3d0 <__udivmoddi4+0x154>
   dd32e:	1bcb      	subs	r3, r1, r7
   dd330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dd334:	fa1f f887 	uxth.w	r8, r7
   dd338:	2601      	movs	r6, #1
   dd33a:	fbb3 fcfe 	udiv	ip, r3, lr
   dd33e:	0c21      	lsrs	r1, r4, #16
   dd340:	fb0e 331c 	mls	r3, lr, ip, r3
   dd344:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dd348:	fb08 f30c 	mul.w	r3, r8, ip
   dd34c:	428b      	cmp	r3, r1
   dd34e:	d907      	bls.n	dd360 <__udivmoddi4+0xe4>
   dd350:	1879      	adds	r1, r7, r1
   dd352:	f10c 30ff 	add.w	r0, ip, #4294967295
   dd356:	d202      	bcs.n	dd35e <__udivmoddi4+0xe2>
   dd358:	428b      	cmp	r3, r1
   dd35a:	f200 80e9 	bhi.w	dd530 <__udivmoddi4+0x2b4>
   dd35e:	4684      	mov	ip, r0
   dd360:	1ac9      	subs	r1, r1, r3
   dd362:	b2a3      	uxth	r3, r4
   dd364:	fbb1 f0fe 	udiv	r0, r1, lr
   dd368:	fb0e 1110 	mls	r1, lr, r0, r1
   dd36c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dd370:	fb08 f800 	mul.w	r8, r8, r0
   dd374:	45a0      	cmp	r8, r4
   dd376:	d907      	bls.n	dd388 <__udivmoddi4+0x10c>
   dd378:	193c      	adds	r4, r7, r4
   dd37a:	f100 33ff 	add.w	r3, r0, #4294967295
   dd37e:	d202      	bcs.n	dd386 <__udivmoddi4+0x10a>
   dd380:	45a0      	cmp	r8, r4
   dd382:	f200 80d9 	bhi.w	dd538 <__udivmoddi4+0x2bc>
   dd386:	4618      	mov	r0, r3
   dd388:	eba4 0408 	sub.w	r4, r4, r8
   dd38c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dd390:	e7bf      	b.n	dd312 <__udivmoddi4+0x96>
   dd392:	428b      	cmp	r3, r1
   dd394:	d909      	bls.n	dd3aa <__udivmoddi4+0x12e>
   dd396:	2d00      	cmp	r5, #0
   dd398:	f000 80b1 	beq.w	dd4fe <__udivmoddi4+0x282>
   dd39c:	2600      	movs	r6, #0
   dd39e:	e9c5 0100 	strd	r0, r1, [r5]
   dd3a2:	4630      	mov	r0, r6
   dd3a4:	4631      	mov	r1, r6
   dd3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd3aa:	fab3 f683 	clz	r6, r3
   dd3ae:	2e00      	cmp	r6, #0
   dd3b0:	d14a      	bne.n	dd448 <__udivmoddi4+0x1cc>
   dd3b2:	428b      	cmp	r3, r1
   dd3b4:	d302      	bcc.n	dd3bc <__udivmoddi4+0x140>
   dd3b6:	4282      	cmp	r2, r0
   dd3b8:	f200 80b8 	bhi.w	dd52c <__udivmoddi4+0x2b0>
   dd3bc:	1a84      	subs	r4, r0, r2
   dd3be:	eb61 0103 	sbc.w	r1, r1, r3
   dd3c2:	2001      	movs	r0, #1
   dd3c4:	468c      	mov	ip, r1
   dd3c6:	2d00      	cmp	r5, #0
   dd3c8:	d0a8      	beq.n	dd31c <__udivmoddi4+0xa0>
   dd3ca:	e9c5 4c00 	strd	r4, ip, [r5]
   dd3ce:	e7a5      	b.n	dd31c <__udivmoddi4+0xa0>
   dd3d0:	f1c2 0320 	rsb	r3, r2, #32
   dd3d4:	fa20 f603 	lsr.w	r6, r0, r3
   dd3d8:	4097      	lsls	r7, r2
   dd3da:	fa01 f002 	lsl.w	r0, r1, r2
   dd3de:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dd3e2:	40d9      	lsrs	r1, r3
   dd3e4:	4330      	orrs	r0, r6
   dd3e6:	0c03      	lsrs	r3, r0, #16
   dd3e8:	fbb1 f6fe 	udiv	r6, r1, lr
   dd3ec:	fa1f f887 	uxth.w	r8, r7
   dd3f0:	fb0e 1116 	mls	r1, lr, r6, r1
   dd3f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dd3f8:	fb06 f108 	mul.w	r1, r6, r8
   dd3fc:	4299      	cmp	r1, r3
   dd3fe:	fa04 f402 	lsl.w	r4, r4, r2
   dd402:	d909      	bls.n	dd418 <__udivmoddi4+0x19c>
   dd404:	18fb      	adds	r3, r7, r3
   dd406:	f106 3cff 	add.w	ip, r6, #4294967295
   dd40a:	f080 808d 	bcs.w	dd528 <__udivmoddi4+0x2ac>
   dd40e:	4299      	cmp	r1, r3
   dd410:	f240 808a 	bls.w	dd528 <__udivmoddi4+0x2ac>
   dd414:	3e02      	subs	r6, #2
   dd416:	443b      	add	r3, r7
   dd418:	1a5b      	subs	r3, r3, r1
   dd41a:	b281      	uxth	r1, r0
   dd41c:	fbb3 f0fe 	udiv	r0, r3, lr
   dd420:	fb0e 3310 	mls	r3, lr, r0, r3
   dd424:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dd428:	fb00 f308 	mul.w	r3, r0, r8
   dd42c:	428b      	cmp	r3, r1
   dd42e:	d907      	bls.n	dd440 <__udivmoddi4+0x1c4>
   dd430:	1879      	adds	r1, r7, r1
   dd432:	f100 3cff 	add.w	ip, r0, #4294967295
   dd436:	d273      	bcs.n	dd520 <__udivmoddi4+0x2a4>
   dd438:	428b      	cmp	r3, r1
   dd43a:	d971      	bls.n	dd520 <__udivmoddi4+0x2a4>
   dd43c:	3802      	subs	r0, #2
   dd43e:	4439      	add	r1, r7
   dd440:	1acb      	subs	r3, r1, r3
   dd442:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dd446:	e778      	b.n	dd33a <__udivmoddi4+0xbe>
   dd448:	f1c6 0c20 	rsb	ip, r6, #32
   dd44c:	fa03 f406 	lsl.w	r4, r3, r6
   dd450:	fa22 f30c 	lsr.w	r3, r2, ip
   dd454:	431c      	orrs	r4, r3
   dd456:	fa20 f70c 	lsr.w	r7, r0, ip
   dd45a:	fa01 f306 	lsl.w	r3, r1, r6
   dd45e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dd462:	fa21 f10c 	lsr.w	r1, r1, ip
   dd466:	431f      	orrs	r7, r3
   dd468:	0c3b      	lsrs	r3, r7, #16
   dd46a:	fbb1 f9fe 	udiv	r9, r1, lr
   dd46e:	fa1f f884 	uxth.w	r8, r4
   dd472:	fb0e 1119 	mls	r1, lr, r9, r1
   dd476:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dd47a:	fb09 fa08 	mul.w	sl, r9, r8
   dd47e:	458a      	cmp	sl, r1
   dd480:	fa02 f206 	lsl.w	r2, r2, r6
   dd484:	fa00 f306 	lsl.w	r3, r0, r6
   dd488:	d908      	bls.n	dd49c <__udivmoddi4+0x220>
   dd48a:	1861      	adds	r1, r4, r1
   dd48c:	f109 30ff 	add.w	r0, r9, #4294967295
   dd490:	d248      	bcs.n	dd524 <__udivmoddi4+0x2a8>
   dd492:	458a      	cmp	sl, r1
   dd494:	d946      	bls.n	dd524 <__udivmoddi4+0x2a8>
   dd496:	f1a9 0902 	sub.w	r9, r9, #2
   dd49a:	4421      	add	r1, r4
   dd49c:	eba1 010a 	sub.w	r1, r1, sl
   dd4a0:	b2bf      	uxth	r7, r7
   dd4a2:	fbb1 f0fe 	udiv	r0, r1, lr
   dd4a6:	fb0e 1110 	mls	r1, lr, r0, r1
   dd4aa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dd4ae:	fb00 f808 	mul.w	r8, r0, r8
   dd4b2:	45b8      	cmp	r8, r7
   dd4b4:	d907      	bls.n	dd4c6 <__udivmoddi4+0x24a>
   dd4b6:	19e7      	adds	r7, r4, r7
   dd4b8:	f100 31ff 	add.w	r1, r0, #4294967295
   dd4bc:	d22e      	bcs.n	dd51c <__udivmoddi4+0x2a0>
   dd4be:	45b8      	cmp	r8, r7
   dd4c0:	d92c      	bls.n	dd51c <__udivmoddi4+0x2a0>
   dd4c2:	3802      	subs	r0, #2
   dd4c4:	4427      	add	r7, r4
   dd4c6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dd4ca:	eba7 0708 	sub.w	r7, r7, r8
   dd4ce:	fba0 8902 	umull	r8, r9, r0, r2
   dd4d2:	454f      	cmp	r7, r9
   dd4d4:	46c6      	mov	lr, r8
   dd4d6:	4649      	mov	r1, r9
   dd4d8:	d31a      	bcc.n	dd510 <__udivmoddi4+0x294>
   dd4da:	d017      	beq.n	dd50c <__udivmoddi4+0x290>
   dd4dc:	b15d      	cbz	r5, dd4f6 <__udivmoddi4+0x27a>
   dd4de:	ebb3 020e 	subs.w	r2, r3, lr
   dd4e2:	eb67 0701 	sbc.w	r7, r7, r1
   dd4e6:	fa07 fc0c 	lsl.w	ip, r7, ip
   dd4ea:	40f2      	lsrs	r2, r6
   dd4ec:	ea4c 0202 	orr.w	r2, ip, r2
   dd4f0:	40f7      	lsrs	r7, r6
   dd4f2:	e9c5 2700 	strd	r2, r7, [r5]
   dd4f6:	2600      	movs	r6, #0
   dd4f8:	4631      	mov	r1, r6
   dd4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd4fe:	462e      	mov	r6, r5
   dd500:	4628      	mov	r0, r5
   dd502:	e70b      	b.n	dd31c <__udivmoddi4+0xa0>
   dd504:	4606      	mov	r6, r0
   dd506:	e6e9      	b.n	dd2dc <__udivmoddi4+0x60>
   dd508:	4618      	mov	r0, r3
   dd50a:	e6fd      	b.n	dd308 <__udivmoddi4+0x8c>
   dd50c:	4543      	cmp	r3, r8
   dd50e:	d2e5      	bcs.n	dd4dc <__udivmoddi4+0x260>
   dd510:	ebb8 0e02 	subs.w	lr, r8, r2
   dd514:	eb69 0104 	sbc.w	r1, r9, r4
   dd518:	3801      	subs	r0, #1
   dd51a:	e7df      	b.n	dd4dc <__udivmoddi4+0x260>
   dd51c:	4608      	mov	r0, r1
   dd51e:	e7d2      	b.n	dd4c6 <__udivmoddi4+0x24a>
   dd520:	4660      	mov	r0, ip
   dd522:	e78d      	b.n	dd440 <__udivmoddi4+0x1c4>
   dd524:	4681      	mov	r9, r0
   dd526:	e7b9      	b.n	dd49c <__udivmoddi4+0x220>
   dd528:	4666      	mov	r6, ip
   dd52a:	e775      	b.n	dd418 <__udivmoddi4+0x19c>
   dd52c:	4630      	mov	r0, r6
   dd52e:	e74a      	b.n	dd3c6 <__udivmoddi4+0x14a>
   dd530:	f1ac 0c02 	sub.w	ip, ip, #2
   dd534:	4439      	add	r1, r7
   dd536:	e713      	b.n	dd360 <__udivmoddi4+0xe4>
   dd538:	3802      	subs	r0, #2
   dd53a:	443c      	add	r4, r7
   dd53c:	e724      	b.n	dd388 <__udivmoddi4+0x10c>
   dd53e:	bf00      	nop

000dd540 <__aeabi_idiv0>:
   dd540:	4770      	bx	lr
   dd542:	bf00      	nop

000dd544 <atexit>:
   dd544:	2300      	movs	r3, #0
   dd546:	4601      	mov	r1, r0
   dd548:	461a      	mov	r2, r3
   dd54a:	4618      	mov	r0, r3
   dd54c:	f000 b872 	b.w	dd634 <__register_exitproc>

000dd550 <memcpy>:
   dd550:	440a      	add	r2, r1
   dd552:	4291      	cmp	r1, r2
   dd554:	f100 33ff 	add.w	r3, r0, #4294967295
   dd558:	d100      	bne.n	dd55c <memcpy+0xc>
   dd55a:	4770      	bx	lr
   dd55c:	b510      	push	{r4, lr}
   dd55e:	f811 4b01 	ldrb.w	r4, [r1], #1
   dd562:	f803 4f01 	strb.w	r4, [r3, #1]!
   dd566:	4291      	cmp	r1, r2
   dd568:	d1f9      	bne.n	dd55e <memcpy+0xe>
   dd56a:	bd10      	pop	{r4, pc}

000dd56c <memset>:
   dd56c:	4402      	add	r2, r0
   dd56e:	4603      	mov	r3, r0
   dd570:	4293      	cmp	r3, r2
   dd572:	d100      	bne.n	dd576 <memset+0xa>
   dd574:	4770      	bx	lr
   dd576:	f803 1b01 	strb.w	r1, [r3], #1
   dd57a:	e7f9      	b.n	dd570 <memset+0x4>

000dd57c <srand>:
   dd57c:	b538      	push	{r3, r4, r5, lr}
   dd57e:	4b0d      	ldr	r3, [pc, #52]	; (dd5b4 <srand+0x38>)
   dd580:	681d      	ldr	r5, [r3, #0]
   dd582:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dd584:	4604      	mov	r4, r0
   dd586:	b97b      	cbnz	r3, dd5a8 <srand+0x2c>
   dd588:	2018      	movs	r0, #24
   dd58a:	f7fa ff75 	bl	d8478 <malloc>
   dd58e:	4a0a      	ldr	r2, [pc, #40]	; (dd5b8 <srand+0x3c>)
   dd590:	4b0a      	ldr	r3, [pc, #40]	; (dd5bc <srand+0x40>)
   dd592:	63a8      	str	r0, [r5, #56]	; 0x38
   dd594:	e9c0 2300 	strd	r2, r3, [r0]
   dd598:	4b09      	ldr	r3, [pc, #36]	; (dd5c0 <srand+0x44>)
   dd59a:	6083      	str	r3, [r0, #8]
   dd59c:	230b      	movs	r3, #11
   dd59e:	8183      	strh	r3, [r0, #12]
   dd5a0:	2201      	movs	r2, #1
   dd5a2:	2300      	movs	r3, #0
   dd5a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dd5a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dd5aa:	2200      	movs	r2, #0
   dd5ac:	611c      	str	r4, [r3, #16]
   dd5ae:	615a      	str	r2, [r3, #20]
   dd5b0:	bd38      	pop	{r3, r4, r5, pc}
   dd5b2:	bf00      	nop
   dd5b4:	2003e3d8 	.word	0x2003e3d8
   dd5b8:	abcd330e 	.word	0xabcd330e
   dd5bc:	e66d1234 	.word	0xe66d1234
   dd5c0:	0005deec 	.word	0x0005deec

000dd5c4 <strdup>:
   dd5c4:	4b02      	ldr	r3, [pc, #8]	; (dd5d0 <strdup+0xc>)
   dd5c6:	4601      	mov	r1, r0
   dd5c8:	6818      	ldr	r0, [r3, #0]
   dd5ca:	f000 b803 	b.w	dd5d4 <_strdup_r>
   dd5ce:	bf00      	nop
   dd5d0:	2003e3d8 	.word	0x2003e3d8

000dd5d4 <_strdup_r>:
   dd5d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dd5d6:	4604      	mov	r4, r0
   dd5d8:	4608      	mov	r0, r1
   dd5da:	460d      	mov	r5, r1
   dd5dc:	f000 f80f 	bl	dd5fe <strlen>
   dd5e0:	1c42      	adds	r2, r0, #1
   dd5e2:	4611      	mov	r1, r2
   dd5e4:	4620      	mov	r0, r4
   dd5e6:	9201      	str	r2, [sp, #4]
   dd5e8:	f7fa ff6e 	bl	d84c8 <_malloc_r>
   dd5ec:	4604      	mov	r4, r0
   dd5ee:	b118      	cbz	r0, dd5f8 <_strdup_r+0x24>
   dd5f0:	9a01      	ldr	r2, [sp, #4]
   dd5f2:	4629      	mov	r1, r5
   dd5f4:	f7ff ffac 	bl	dd550 <memcpy>
   dd5f8:	4620      	mov	r0, r4
   dd5fa:	b003      	add	sp, #12
   dd5fc:	bd30      	pop	{r4, r5, pc}

000dd5fe <strlen>:
   dd5fe:	4603      	mov	r3, r0
   dd600:	f813 2b01 	ldrb.w	r2, [r3], #1
   dd604:	2a00      	cmp	r2, #0
   dd606:	d1fb      	bne.n	dd600 <strlen+0x2>
   dd608:	1a18      	subs	r0, r3, r0
   dd60a:	3801      	subs	r0, #1
   dd60c:	4770      	bx	lr

000dd60e <strncpy>:
   dd60e:	b510      	push	{r4, lr}
   dd610:	3901      	subs	r1, #1
   dd612:	4603      	mov	r3, r0
   dd614:	b132      	cbz	r2, dd624 <strncpy+0x16>
   dd616:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dd61a:	f803 4b01 	strb.w	r4, [r3], #1
   dd61e:	3a01      	subs	r2, #1
   dd620:	2c00      	cmp	r4, #0
   dd622:	d1f7      	bne.n	dd614 <strncpy+0x6>
   dd624:	441a      	add	r2, r3
   dd626:	2100      	movs	r1, #0
   dd628:	4293      	cmp	r3, r2
   dd62a:	d100      	bne.n	dd62e <strncpy+0x20>
   dd62c:	bd10      	pop	{r4, pc}
   dd62e:	f803 1b01 	strb.w	r1, [r3], #1
   dd632:	e7f9      	b.n	dd628 <strncpy+0x1a>

000dd634 <__register_exitproc>:
   dd634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd638:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dd6f4 <__register_exitproc+0xc0>
   dd63c:	4606      	mov	r6, r0
   dd63e:	f8d8 0000 	ldr.w	r0, [r8]
   dd642:	461f      	mov	r7, r3
   dd644:	460d      	mov	r5, r1
   dd646:	4691      	mov	r9, r2
   dd648:	f000 f856 	bl	dd6f8 <__retarget_lock_acquire_recursive>
   dd64c:	4b25      	ldr	r3, [pc, #148]	; (dd6e4 <__register_exitproc+0xb0>)
   dd64e:	681c      	ldr	r4, [r3, #0]
   dd650:	b934      	cbnz	r4, dd660 <__register_exitproc+0x2c>
   dd652:	4c25      	ldr	r4, [pc, #148]	; (dd6e8 <__register_exitproc+0xb4>)
   dd654:	601c      	str	r4, [r3, #0]
   dd656:	4b25      	ldr	r3, [pc, #148]	; (dd6ec <__register_exitproc+0xb8>)
   dd658:	b113      	cbz	r3, dd660 <__register_exitproc+0x2c>
   dd65a:	681b      	ldr	r3, [r3, #0]
   dd65c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dd660:	6863      	ldr	r3, [r4, #4]
   dd662:	2b1f      	cmp	r3, #31
   dd664:	dd07      	ble.n	dd676 <__register_exitproc+0x42>
   dd666:	f8d8 0000 	ldr.w	r0, [r8]
   dd66a:	f000 f847 	bl	dd6fc <__retarget_lock_release_recursive>
   dd66e:	f04f 30ff 	mov.w	r0, #4294967295
   dd672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd676:	b34e      	cbz	r6, dd6cc <__register_exitproc+0x98>
   dd678:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dd67c:	b988      	cbnz	r0, dd6a2 <__register_exitproc+0x6e>
   dd67e:	4b1c      	ldr	r3, [pc, #112]	; (dd6f0 <__register_exitproc+0xbc>)
   dd680:	b923      	cbnz	r3, dd68c <__register_exitproc+0x58>
   dd682:	f8d8 0000 	ldr.w	r0, [r8]
   dd686:	f000 f838 	bl	dd6fa <__retarget_lock_release>
   dd68a:	e7f0      	b.n	dd66e <__register_exitproc+0x3a>
   dd68c:	f44f 7084 	mov.w	r0, #264	; 0x108
   dd690:	f7fa fef2 	bl	d8478 <malloc>
   dd694:	2800      	cmp	r0, #0
   dd696:	d0f4      	beq.n	dd682 <__register_exitproc+0x4e>
   dd698:	2300      	movs	r3, #0
   dd69a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dd69e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dd6a2:	6863      	ldr	r3, [r4, #4]
   dd6a4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dd6a8:	2201      	movs	r2, #1
   dd6aa:	409a      	lsls	r2, r3
   dd6ac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dd6b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dd6b4:	4313      	orrs	r3, r2
   dd6b6:	2e02      	cmp	r6, #2
   dd6b8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dd6bc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dd6c0:	bf02      	ittt	eq
   dd6c2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dd6c6:	431a      	orreq	r2, r3
   dd6c8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dd6cc:	6863      	ldr	r3, [r4, #4]
   dd6ce:	f8d8 0000 	ldr.w	r0, [r8]
   dd6d2:	1c5a      	adds	r2, r3, #1
   dd6d4:	3302      	adds	r3, #2
   dd6d6:	6062      	str	r2, [r4, #4]
   dd6d8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dd6dc:	f000 f80e 	bl	dd6fc <__retarget_lock_release_recursive>
   dd6e0:	2000      	movs	r0, #0
   dd6e2:	e7c6      	b.n	dd672 <__register_exitproc+0x3e>
   dd6e4:	2003e7e0 	.word	0x2003e7e0
   dd6e8:	2003e754 	.word	0x2003e754
   dd6ec:	00000000 	.word	0x00000000
   dd6f0:	000d8479 	.word	0x000d8479
   dd6f4:	2003e43c 	.word	0x2003e43c

000dd6f8 <__retarget_lock_acquire_recursive>:
   dd6f8:	4770      	bx	lr

000dd6fa <__retarget_lock_release>:
   dd6fa:	4770      	bx	lr

000dd6fc <__retarget_lock_release_recursive>:
   dd6fc:	4770      	bx	lr

000dd6fe <link_code_end>:
	...

000dd700 <dynalib_user>:
   dd700:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dd710:	0000 0000 7953 7473 6d65 5320 6174 7574     ....System Statu
   dd720:	3a73 3020 0078 6553 666c 5420 7365 3a74     s: 0x.Self Test:
   dd730:	2020 2020 3020 0078 7953 7473 6d65 4520          0x.System E
   dd740:	7272 726f 203a 3020 0078 2021 5300 7379     rror:  0x.! .Sys
   dd750:	003a 4720 003a 4120 003a 4d20 003a 0a0a     :. G:. A:. M:...
   dd760:	6554 706d 7265 7461 7275 2065 203d 2000     Temperature = . 
   dd770:	0046 7250 7365 7573 6572 3d20 0020 6d20     F.Pressure = . m
   dd780:	486d 0067 7041 7270 786f 202e 6c41 6974     mHg.Approx. Alti
   dd790:	7574 6564 3d20 0020 6d20 4800 6d75 6469     tude = . m.Humid
   dd7a0:	7469 2079 203d 2000 0025 2d2d 2d2d 2d2d     ity = . %.------
   dd7b0:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dd7c0:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 5300     --------------.S
   dd7d0:	6e65 6f73 3a72 2020 2020 2020 0020 7244     ensor:       .Dr
   dd7e0:	7669 7265 5620 7265 203a 2020 5500 696e     iver Ver:   .Uni
   dd7f0:	7571 2065 4449 203a 2020 0020 614d 2078     que ID:    .Max 
   dd800:	6156 756c 3a65 2020 2020 2000 7878 0078     Value:    . xxx.
   dd810:	694d 206e 6156 756c 3a65 2020 2020 5200     Min Value:    .R
   dd820:	7365 6c6f 7475 6f69 3a6e 2020 0020 430a     esolution:   ..C
   dd830:	6c61 6269 6172 6974 6e6f 6f20 6666 6573     alibration offse
   dd840:	7374 0a20 4100 6363 6c65 7265 6d6f 7465     ts ..Acceleromet
   dd850:	7265 203a 0a00 7947 6f72 203a 0a00 614d     er: ..Gyro: ..Ma
   dd860:	3a67 0020 410a 6363 6c65 5220 6461 7569     g: ..Accel Radiu
   dd870:	3a73 0020 4d0a 6761 5220 6461 7569 3a73     s: ..Mag Radius:
   dd880:	0020 004e 454e 5300 0045 0053 5753 4e00      .N.NE.SE.S.SW.N
   dd890:	0057 6554 7473 6e69 2067 6973 657a 0021     W.Testing size!.
   dd8a0:	6146 6c69 6465 7420 206f 7277 7469 2065     Failed to write 
   dd8b0:	6461 7264 7365 2073 7830 4600 6961 656c     address 0x.Faile
   dd8c0:	2064 6f74 7220 2d65 7277 7469 2065 6461     d to re-write ad
   dd8d0:	7264 7365 2073 7830 4600 756f 646e 6d20     dress 0x.Found m
   dd8e0:	7861 6120 6464 6572 7373 5400 6968 2073     ax address.This 
   dd8f0:	4545 5250 4d4f 6320 6e61 7320 6f74 6572     EEPROM can store
   dd900:	0020 6220 7479 7365 7700 6e69 2064 7073      . bytes.wind sp
   dd910:	6565 2064 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     eed ------------
   dd920:	2d2d 2d2d 0a2d 0900 0009 6d20 6870 5600     -----..... mph.V
   dd930:	6e61 7665 6c61 6575 2d20 2d2d 2d2d 2d2d     anevalue -------
   dd940:	2d2d 2d2d 2d2d 2d2d 2d2d 000a 7542 2073     ----------..Bus 
   dd950:	6f56 746c 6761 3a65 2020 0020 5620 5300     Voltage:   . V.S
   dd960:	7568 746e 5620 6c6f 6174 6567 203a 2000     hunt Voltage: . 
   dd970:	566d 4c00 616f 2064 6f56 746c 6761 3a65     mV.Load Voltage:
   dd980:	2020 4300 7275 6572 746e 203a 2020 2020       .Current:     
   dd990:	2020 2000 416d 5000 776f 7265 203a 2020       . mA.Power:   
   dd9a0:	2020 2020 2020 2000 576d 5800 203a 0900           . mW.X: ..
   dd9b0:	3a59 0020 5a09 203a 0a00 000a 6f63 706d     Y: ..Z: ....comp
   dd9c0:	7361 2073 6568 6461 6e69 3a67 2020 5400     ass heading:  .T
   dd9d0:	6d65 2e70 3d20 0020 c220 46b0 5000 6572     emp. = . ..F.Pre
   dd9e0:	7373 202e 203d 4300 6d6f 6170 7373 6820     ss. = .Compass h
   dd9f0:	6165 6964 676e 7700 6e69 2064 6964 6572     eading.wind dire
   dda00:	7463 6f69 206e 203d 7700 6e69 2064 7073     ction = .wind sp
   dda10:	6565 2064 203d 4300 7000 6973 6620 6f72     eed = .C.psi fro
   dda20:	206d 6e62 306f 3535 000a 750a 696e 2078     m bno055...unix 
   dda30:	6974 656d 3d20 0020 6974 656d 6220 7361     time = .time bas
   dda40:	2065 6176 756c 2065 003d 666f 6966 6563     e value =.office
   dda50:	7420 6d65 6570 6172 7574 6572 4800 6c65      temperature.Hel
   dda60:	6f6c 0021 6146 6c69 6465 7420 206f 6966     lo!.Failed to fi
   dda70:	646e 4920 414e 3132 2039 6863 7069 5600     nd INA219 chip.V
   dda80:	6e61 2065 6156 756c 0965 6944 6572 7463     ane Value.Direct
   dda90:	6f69 096e 6548 6461 6e69 0067 6144 6976     ion.Heading.Davi
   ddaa0:	2073 6957 646e 5320 6570 6465 5420 7365     s Wind Speed Tes
   ddab0:	0074 6f52 6174 6974 6e6f 0973 504d 0048     t.Rotations.MPH.
   ddac0:	4d42 3245 3038 7420 7365 0074 3231 7838     BME280 test.128x
   ddad0:	3436 4f20 454c 2044 6546 7461 6568 5772     64 OLED FeatherW
   ddae0:	6e69 2067 6574 7473 4f00 454c 2044 6562     ing test.OLED be
   ddaf0:	7567 006e 7542 7474 6e6f 7420 7365 0074     gun.Button test.
   ddb00:	6942 6467 6461 7964 6441 6964 2065 6577     BigdaddyAddie we
   ddb10:	7461 6568 2072 7473 7461 6f69 216e 000a     ather station!..
   ddb20:	6f63 6e6e 6365 6574 2164 000a 6f43 6c75     connected!..Coul
   ddb30:	2064 6f6e 2074 6966 646e 6120 7620 6c61     d not find a val
   ddb40:	6469 4220 454d 3832 2030 6573 736e 726f     id BME280 sensor
   ddb50:	202c 6863 6365 206b 6977 6972 676e 202c     , check wiring, 
   ddb60:	6461 7264 7365 2c73 7320 6e65 6f73 2072     address, sensor 
   ddb70:	4449 0021 6553 736e 726f 4449 7720 7361     ID!.SensorID was
   ddb80:	203a 7830 2000 2020 2020 2020 4920 2044     : 0x.        ID 
   ddb90:	666f 3020 4678 2046 7270 626f 6261 796c     of 0xFF probably
   ddba0:	6d20 6165 736e 6120 6220 6461 6120 6464      means a bad add
   ddbb0:	6572 7373 202c 2061 4d42 2050 3831 2030     ress, a BMP 180 
   ddbc0:	726f 4220 504d 3020 3538 000a 2020 4920     or BMP 085..   I
   ddbd0:	2044 666f 3020 3578 2d36 7830 3835 7220     D of 0x56-0x58 r
   ddbe0:	7065 6572 6573 746e 2073 2061 4d42 2050     epresents a BMP 
   ddbf0:	3832 2c30 000a 2020 2020 2020 2020 4449     280,..        ID
   ddc00:	6f20 2066 7830 3036 7220 7065 6572 6573      of 0x60 represe
   ddc10:	746e 2073 2061 4d42 2045 3832 2e30 000a     nts a BME 280...
   ddc20:	2020 2020 2020 2020 4449 6f20 2066 7830             ID of 0x
   ddc30:	3136 7220 7065 6572 6573 746e 2073 2061     61 represents a 
   ddc40:	4d42 2045 3836 2e30 000a 6f46 6e75 2064     BME 680...Found 
   ddc50:	3249 2043 4545 5250 4d4f 4900 4332 4520     I2C EEPROM.I2C E
   ddc60:	5045 4f52 204d 6f6e 2074 6469 6e65 6974     EPROM not identi
   ddc70:	6966 6465 2e20 2e2e 6320 6568 6b63 7920     fied ... check y
   ddc80:	756f 2072 6f63 6e6e 6365 6974 6e6f 3f73     our connections?
   ddc90:	0a0d 4f00 6f6f 7370 202c 6f6e 4220 4f4e     ...Ooops, no BNO
   ddca0:	3530 2035 6564 6574 7463 6465 2e20 2e2e     055 detected ...
   ddcb0:	4320 6568 6b63 7920 756f 2072 6977 6972      Check your wiri
   ddcc0:	676e 6f20 2072 3249 2043 4441 5244 0021     ng or I2C ADDR!.
   ddcd0:	4e0a 206f 6143 696c 7262 7461 6f69 206e     .No Calibration 
   ddce0:	6144 6174 6620 726f 7420 6968 2073 6573     Data for this se
   ddcf0:	736e 726f 6520 6978 7473 2073 6e69 4520     nsor exists in E
   ddd00:	5045 4f52 004d 460a 756f 646e 4320 6c61     EPROM..Found Cal
   ddd10:	6269 6172 6974 6e6f 6620 726f 7420 6968     ibration for thi
   ddd20:	2073 6573 736e 726f 6920 206e 4545 5250     s sensor in EEPR
   ddd30:	4d4f 002e 0a0a 6552 7473 726f 6e69 2067     OM....Restoring 
   ddd40:	6143 696c 7262 7461 6f69 206e 6164 6174     Calibration data
   ddd50:	7420 206f 6874 2065 4e42 304f 3535 2e2e      to the BNO055..
   ddd60:	002e 0a0a 6143 696c 7262 7461 6f69 206e     ....Calibration 
   ddd70:	6164 6174 6c20 616f 6564 2064 6e69 6f74     data loaded into
   ddd80:	4220 4f4e 3530 0035 6f4d 6576 7320 6e65      BNO055.Move sen
   ddd90:	6f73 2072 6c73 6769 7468 796c 7420 206f     sor slightly to 
   ddda0:	6163 696c 7262 7461 2065 616d 6e67 7465     calibrate magnet
   dddb0:	6d6f 7465 7265 0073 6c50 6165 6573 4320     ometers.Please C
   dddc0:	6c61 6269 6172 6574 5320 6e65 6f73 3a72     alibrate Sensor:
   dddd0:	0020 460a 6c75 796c 6320 6c61 6269 6172      ..Fully calibra
   ddde0:	6574 2164 4300 6c61 6269 6172 6974 6e6f     ted!.Calibration
   dddf0:	5220 7365 6c75 7374 203a 0a00 530a 6f74      Results: ...Sto
   dde00:	6972 676e 6320 6c61 6269 6172 6974 6e6f     ring calibration
   dde10:	6420 7461 2061 6f74 4520 5045 4f52 2e4d      data to EEPROM.
   dde20:	2e2e 4400 7461 2061 7473 726f 6465 7420     ...Data stored t
   dde30:	206f 4545 5250 4d4f 002e 2d0a 2d2d 2d2d     o EEPROM...-----
   dde40:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dde50:	2d2d 2d2d 2d2d 2d2d 2d2d 0a2d 6400 6665     -----------..def
   dde60:	7561 746c 0020 534d 0042 534c 0042 533c     ault .MSB.LSB.<S
   dde70:	4950 6553 7474 6e69 7367 6420 6665 7561     PISettings defau
   dde80:	746c 003e 533c 4950 6553 7474 6e69 7367     lt>.<SPISettings
   dde90:	2520 2573 2075 7325 4d20 444f 2545 3e75      %s%u %s MODE%u>
   ddea0:	0000 0000                                   ....

000ddea4 <_ZTVN8particle11SPISettingsE>:
	...
   ddeac:	58ad 000d 5881 000d 5883 000d               .X...X...X..

000ddeb8 <_ZTV15Adafruit_BNO055>:
	...
   ddec0:	67f1 000d 6835 000d 67ef 000d 6dd1 000d     .g..5h...g...m..
   dded0:	67f5 000d                                   .g..

000dded4 <_ZTV17Adafruit_GrayOLED>:
	...
   ddee4:	7845 000d 8989 000d 6e23 000d 724d 000d     Ex......#n..Mr..
   ddef4:	724f 000d 7281 000d 725d 000d 726f 000d     Or...r..]r..or..
   ddf04:	7191 000d 724d 000d 7479 000d 701f 000d     .q..Mr..yt...p..
   ddf14:	7299 000d 72d7 000d 7311 000d 7357 000d     .r...r...s..Ws..
   ddf24:	73f5 000d 7373 000d 40a5 000d               .s..ss...@..

000ddf30 <_ZL4font>:
   ddf30:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   ddf40:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   ddf50:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   ddf60:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   ddf70:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   ddf80:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   ddf90:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   ddfa0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   ddfb0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   ddfc0:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   ddfd0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   ddfe0:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   ddff0:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   de000:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   de010:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   de020:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   de030:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   de040:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   de050:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   de060:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   de070:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   de080:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   de090:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   de0a0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   de0b0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   de0c0:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   de0d0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   de0e0:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   de0f0:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   de100:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   de110:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   de120:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   de130:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   de140:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   de150:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   de160:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   de170:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   de180:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   de190:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   de1a0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   de1b0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   de1c0:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   de1d0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   de1e0:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   de1f0:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   de200:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   de210:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   de220:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   de230:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   de240:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   de250:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   de260:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   de270:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   de280:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   de290:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   de2a0:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   de2b0:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   de2c0:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   de2d0:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   de2e0:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   de2f0:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   de300:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   de310:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   de320:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   de330:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   de340:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   de350:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   de360:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   de370:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   de380:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   de390:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   de3a0:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   de3b0:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   de3c0:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   de3d0:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   de3e0:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   de3f0:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   de400:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   de410:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   de420:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000de430 <_ZTV12Adafruit_GFX>:
	...
   de440:	7845 000d 8989 000d 40a5 000d 724d 000d     Ex.......@..Mr..
   de450:	724f 000d 7281 000d 725d 000d 726f 000d     Or...r..]r..or..
   de460:	7191 000d 724d 000d 7479 000d 73f3 000d     .q..Mr..yt...s..
   de470:	7299 000d 72d7 000d 7311 000d 7357 000d     .r...r...s..Ws..
   de480:	73f5 000d 7373 000d                         .s..ss..

000de488 <_ZTV15Adafruit_SH110X>:
	...
   de490:	40a5 000d 40a5 000d 7845 000d 8989 000d     .@...@..Ex......
   de4a0:	6e23 000d 724d 000d 724f 000d 7281 000d     #n..Mr..Or...r..
   de4b0:	725d 000d 726f 000d 7191 000d 724d 000d     ]r..or...q..Mr..
   de4c0:	7479 000d 701f 000d 7299 000d 72d7 000d     yt...p...r...r..
   de4d0:	7311 000d 7357 000d 73f5 000d 7373 000d     .s..Ws...s..ss..
   de4e0:	7953 000d                                   Sy..

000de4e4 <_ZL12splash2_data>:
   de4e4:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   de4f4:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   de504:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   de520:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   de530:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   de540:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   de550:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   de560:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   de570:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   de580:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   de590:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   de5a0:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   de5b0:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   de5c0:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   de5d0:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   de5e0:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   de5f0:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   de600:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   de610:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   de620:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   de630:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   de640:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   de650:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   de660:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   de678:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   de688:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   de698:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   de6a8:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   de6b8:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000de6c4 <_ZTV15Adafruit_SH1107>:
	...
   de6cc:	7af1 000d 7b05 000d 7845 000d 8989 000d     .z...{..Ex......
   de6dc:	6e23 000d 724d 000d 724f 000d 7281 000d     #n..Mr..Or...r..
   de6ec:	725d 000d 726f 000d 7191 000d 724d 000d     ]r..or...q..Mr..
   de6fc:	7479 000d 701f 000d 7299 000d 72d7 000d     yt...p...r...r..
   de70c:	7311 000d 7357 000d 73f5 000d 7373 000d     .s..Ws...s..ss..
   de71c:	7953 000d                                   Sy..

000de720 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   de720:	00d3 7fa8                                   ....

000de724 <_ZZN15Adafruit_SH11075beginEhbE4init>:
   de724:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
   de734:	35db 3fa8 a6a4 0000                         .5.?....

000de73c <_ZTVN5spark13EthernetClassE>:
	...
   de744:	8557 000d 854d 000d 8543 000d 8539 000d     W...M...C...9...
   de754:	852d 000d 8521 000d 9977 000d 997f 000d     -...!...w.......
   de764:	8515 000d 850d 000d 8503 000d 84f9 000d     ................
   de774:	99af 000d                                   ....

000de778 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   de778:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   de788:	766f 0066 7061 0070 5925 252d 2d6d 6425     ovf.app.%Y-%m-%d
   de798:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   de7a8:	6d69 0065                                   ime.

000de7ac <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de7b4:	8efd 000d 8f03 000d 8f41 000d 8f11 000d     ........A.......
   de7c4:	8eff 000d                                   ....

000de7c8 <_ZTV9IPAddress>:
	...
   de7d0:	9445 000d 9435 000d 9437 000d               E...5...7...

000de7dc <_ZTV9USBSerial>:
	...
   de7e4:	951d 000d 9585 000d 955b 000d 8989 000d     ........[.......
   de7f4:	954d 000d 951f 000d 952f 000d 957f 000d     M......./.......
   de804:	953f 000d 9517 000d                         ?.......

000de80c <_ZTVN5spark13CellularClassE>:
	...
   de814:	96e3 000d 96d9 000d 96cf 000d 9685 000d     ................
   de824:	96c3 000d 96b7 000d 9977 000d 997f 000d     ........w.......
   de834:	96ab 000d 96a3 000d 9699 000d 968f 000d     ................
   de844:	99af 000d                                   ....

000de848 <_ZTV11USARTSerial>:
	...
   de850:	971d 000d 978b 000d 9763 000d 8989 000d     ........c.......
   de860:	9733 000d 974f 000d 9741 000d 975d 000d     3...O...A...]...
   de870:	971f 000d 9725 000d                         ....%...

000de878 <_ZTV7TwoWire>:
	...
   de880:	9839 000d 9883 000d 985b 000d 983b 000d     9.......[...;...
   de890:	9863 000d 986b 000d 9873 000d 987b 000d     c...k...s...{...

000de8a0 <_ZTVN5spark12NetworkClassE>:
	...
   de8a8:	9937 000d 9941 000d 994b 000d 9955 000d     7...A...K...U...
   de8b8:	995f 000d 996b 000d 9977 000d 997f 000d     _...k...w.......
   de8c8:	9987 000d 9993 000d 999b 000d 99a5 000d     ................
   de8d8:	99af 000d                                   ....

000de8dc <_ZSt7nothrow>:
   de8dc:	0000 0000 6f70 0077 0000 0000               ....pow.....

000de8e8 <CSWTCH.8>:
   de8e8:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   de8f8:	21d2 7f33 d97c c002                         .!3.|...

000de900 <CSWTCH.9>:
   de900:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   de910:	2d18 5444 21fb c009 0000 0000               .-DT.!......

000de91c <CSWTCH.8>:
   de91c:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000de928 <CSWTCH.9>:
   de928:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000de934 <npio2_hw>:
   de934:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   de944:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   de954:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   de964:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   de974:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   de984:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   de994:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   de9a4:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000de9b4 <two_over_pi>:
   de9b4:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   de9c4:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   de9d4:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   de9e4:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   de9f4:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   dea04:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   dea14:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   dea24:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   dea34:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   dea44:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   dea54:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   dea64:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   dea74:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   dea84:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   dea94:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   deaa4:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   deab4:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   deac4:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   dead4:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   deae4:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   deaf4:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   deb04:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   deb14:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   deb24:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   deb34:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   deb44:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   deb54:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   deb64:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   deb74:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   deb84:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   deb94:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   deba4:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   debb4:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   debc4:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   debd4:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   debe4:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   debf4:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   dec04:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   dec14:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   dec24:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   dec34:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   dec44:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   dec54:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   dec64:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   dec74:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   dec84:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   dec94:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   deca4:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   decb4:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   decc4:	008c 0000 006b 0000                         ....k...

000deccc <PIo2>:
   deccc:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   decdc:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   decec:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000decf8 <init_jk>:
   decf8:	0004 0000 0007 0000 0009 0000 0000 0000     ................

000ded08 <atanhi>:
   ded08:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   ded18:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000ded28 <atanlo>:
   ded28:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   ded38:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000ded48 <TWO52>:
   ded48:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000ded58 <atanhi>:
   ded58:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000ded68 <atanlo>:
   ded68:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3

000ded78 <link_const_variable_data_end>:
   ded78:	000d5015 	.word	0x000d5015
   ded7c:	000d8561 	.word	0x000d8561
   ded80:	000d86f9 	.word	0x000d86f9
   ded84:	000d8979 	.word	0x000d8979
   ded88:	000d8ccd 	.word	0x000d8ccd
   ded8c:	000d8d51 	.word	0x000d8d51
   ded90:	000d8db9 	.word	0x000d8db9
   ded94:	000d96ed 	.word	0x000d96ed
   ded98:	000d9a81 	.word	0x000d9a81

000ded9c <link_constructors_end>:
   ded9c:	00000000 	.word	0x00000000
