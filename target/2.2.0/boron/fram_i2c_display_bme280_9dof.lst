
z:/Personal/Electronics/particle/fram_i2c_display_bme280_9dof/target/2.2.0/boron/fram_i2c_display_bme280_9dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000abd0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000debf0  000debf0  0000ebf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000debf8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003e3cc  000debfc  0001e3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003ac  2003e448  2003e448  0002e448  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000dec74  000dec74  0001ec74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dec9c  000dec9c  0001ec9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0020c3af  00000000  00000000  0001eca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001fc14  00000000  00000000  0022b04f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00039581  00000000  00000000  0024ac63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002f30  00000000  00000000  002841e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00008720  00000000  00000000  00287114  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00045440  00000000  00000000  0028f834  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00052fa8  00000000  00000000  002d4c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0011390c  00000000  00000000  00327c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00009010  00000000  00000000  0043b528  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f009 f9e5 	bl	dd400 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f009 f9ed 	bl	dd41c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e3cc 	.word	0x2003e3cc
   d404c:	000debfc 	.word	0x000debfc
   d4050:	2003e444 	.word	0x2003e444
   d4054:	2003e448 	.word	0x2003e448
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fe71 	bl	d8d48 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000debc0 	.word	0x000debc0
   d4080:	000debe4 	.word	0x000debe4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 ba26 	b.w	d54d4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 ff65 	bl	d4f58 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 be11 	b.w	d8cb8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b929 	b.w	d82ec <malloc>

000d409a <_Znaj>:
   d409a:	f004 b927 	b.w	d82ec <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b92d 	b.w	d82fc <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f004 f84a 	bl	d8144 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7e45 	.word	0x000d7e45

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z12isr_rotationv>:
else
Serial.println("N");
} 

// This is the function that the interrupt calls to increment the rotation count
void isr_rotation () {
   d40c8:	b510      	push	{r4, lr}

if ((millis() - ContactBounceTime) > 15 ) { // debounce the switch contact.
   d40ca:	4c07      	ldr	r4, [pc, #28]	; (d40e8 <_Z12isr_rotationv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40cc:	f003 fec2 	bl	d7e54 <HAL_Timer_Get_Milli_Seconds>
   d40d0:	6823      	ldr	r3, [r4, #0]
   d40d2:	1ac0      	subs	r0, r0, r3
   d40d4:	280f      	cmp	r0, #15
   d40d6:	d906      	bls.n	d40e6 <_Z12isr_rotationv+0x1e>
Rotations++;
   d40d8:	4a04      	ldr	r2, [pc, #16]	; (d40ec <_Z12isr_rotationv+0x24>)
   d40da:	6813      	ldr	r3, [r2, #0]
   d40dc:	3301      	adds	r3, #1
   d40de:	6013      	str	r3, [r2, #0]
   d40e0:	f003 feb8 	bl	d7e54 <HAL_Timer_Get_Milli_Seconds>
ContactBounceTime = millis();
   d40e4:	6020      	str	r0, [r4, #0]
}

}
   d40e6:	bd10      	pop	{r4, pc}
   d40e8:	2003e44c 	.word	0x2003e44c
   d40ec:	2003e458 	.word	0x2003e458

000d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d40f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d40f4:	2a00      	cmp	r2, #0
size_t Print::print(T n, int base)
   d40f6:	461d      	mov	r5, r3
        if (n < 0 && base == 10) {
   d40f8:	f175 0300 	sbcs.w	r3, r5, #0
size_t Print::print(T n, int base)
   d40fc:	9f08      	ldr	r7, [sp, #32]
   d40fe:	4680      	mov	r8, r0
   d4100:	4614      	mov	r4, r2
        if (n < 0 && base == 10) {
   d4102:	da11      	bge.n	d4128 <_ZN5Print5printIxLi0EEEjT_i.part.0+0x38>
   d4104:	2f0a      	cmp	r7, #10
   d4106:	d10f      	bne.n	d4128 <_ZN5Print5printIxLi0EEEjT_i.part.0+0x38>
            t = print('-');
   d4108:	212d      	movs	r1, #45	; 0x2d
   d410a:	f004 fba3 	bl	d8854 <_ZN5Print5printEc>
            val = -n;
   d410e:	4262      	negs	r2, r4
            t = print('-');
   d4110:	4606      	mov	r6, r0
            val = -n;
   d4112:	eb65 0345 	sbc.w	r3, r5, r5, lsl #1
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4116:	b2ff      	uxtb	r7, r7
   d4118:	9700      	str	r7, [sp, #0]
   d411a:	4640      	mov	r0, r8
   d411c:	f004 fbd7 	bl	d88ce <_ZN5Print11printNumberEyh>
    }
}
   d4120:	4430      	add	r0, r6
   d4122:	b002      	add	sp, #8
   d4124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
   d4128:	4622      	mov	r2, r4
   d412a:	462b      	mov	r3, r5
        size_t t = 0;
   d412c:	2600      	movs	r6, #0
   d412e:	e7f2      	b.n	d4116 <_ZN5Print5printIxLi0EEEjT_i.part.0+0x26>

000d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>:
size_t Print::print(T n, int base)
   d4130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n < 0 && base == 10) {
   d4132:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d4134:	4607      	mov	r7, r0
   d4136:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d4138:	da0c      	bge.n	d4154 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x24>
   d413a:	2a0a      	cmp	r2, #10
   d413c:	d10a      	bne.n	d4154 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d413e:	212d      	movs	r1, #45	; 0x2d
   d4140:	f004 fb88 	bl	d8854 <_ZN5Print5printEc>
            val = -n;
   d4144:	4261      	negs	r1, r4
            t = print('-');
   d4146:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
   d4148:	b2f2      	uxtb	r2, r6
   d414a:	4638      	mov	r0, r7
   d414c:	f004 fba1 	bl	d8892 <_ZN5Print11printNumberEmh>
}
   d4150:	4428      	add	r0, r5
   d4152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d4154:	4621      	mov	r1, r4
        size_t t = 0;
   d4156:	2500      	movs	r5, #0
   d4158:	e7f6      	b.n	d4148 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x18>

000d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>:
size_t Print::print(T n, int base)
   d415a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n < 0 && base == 10) {
   d415c:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d415e:	4607      	mov	r7, r0
   d4160:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d4162:	da0c      	bge.n	d417e <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
   d4164:	2a0a      	cmp	r2, #10
   d4166:	d10a      	bne.n	d417e <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d4168:	212d      	movs	r1, #45	; 0x2d
   d416a:	f004 fb73 	bl	d8854 <_ZN5Print5printEc>
            val = -n;
   d416e:	4261      	negs	r1, r4
            t = print('-');
   d4170:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
   d4172:	b2f2      	uxtb	r2, r6
   d4174:	4638      	mov	r0, r7
   d4176:	f004 fb8c 	bl	d8892 <_ZN5Print11printNumberEmh>
}
   d417a:	4428      	add	r0, r5
   d417c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d417e:	4621      	mov	r1, r4
        size_t t = 0;
   d4180:	2500      	movs	r5, #0
   d4182:	e7f6      	b.n	d4172 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x18>

000d4184 <_Z11printValuesv>:
void printValues() {
   d4184:	b538      	push	{r3, r4, r5, lr}
    Serial.print("\n\nTemperature = ");
   d4186:	f005 f983 	bl	d9490 <_Z16_fetch_usbserialv>
   d418a:	4936      	ldr	r1, [pc, #216]	; (d4264 <_Z11printValuesv+0xe0>)
    Serial.print(bme.readTemperature()*1.8F + 32.);
   d418c:	4c36      	ldr	r4, [pc, #216]	; (d4268 <_Z11printValuesv+0xe4>)
    Serial.print("\n\nTemperature = ");
   d418e:	f004 fb5d 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature()*1.8F + 32.);
   d4192:	f005 f97d 	bl	d9490 <_Z16_fetch_usbserialv>
   d4196:	4605      	mov	r5, r0
   d4198:	4620      	mov	r0, r4
   d419a:	f001 fd91 	bl	d5cc0 <_ZN15Adafruit_BME28015readTemperatureEv>
   d419e:	eddf 7a33 	vldr	s15, [pc, #204]	; d426c <_Z11printValuesv+0xe8>
   d41a2:	ee60 7a27 	vmul.f32	s15, s0, s15
   d41a6:	ee17 0a90 	vmov	r0, s15
   d41aa:	f008 fa8b 	bl	dc6c4 <__aeabi_f2d>
   d41ae:	4b30      	ldr	r3, [pc, #192]	; (d4270 <_Z11printValuesv+0xec>)
   d41b0:	2200      	movs	r2, #0
   d41b2:	f008 f929 	bl	dc408 <__adddf3>
   d41b6:	ec41 0b10 	vmov	d0, r0, r1
   d41ba:	2102      	movs	r1, #2
   d41bc:	4628      	mov	r0, r5
   d41be:	f004 fc8e 	bl	d8ade <_ZN5Print5printEdi>
    Serial.println(" F");
   d41c2:	f005 f965 	bl	d9490 <_Z16_fetch_usbserialv>
   d41c6:	492b      	ldr	r1, [pc, #172]	; (d4274 <_Z11printValuesv+0xf0>)
   d41c8:	f004 fb57 	bl	d887a <_ZN5Print7printlnEPKc>
    Serial.print("Pressure = ");
   d41cc:	f005 f960 	bl	d9490 <_Z16_fetch_usbserialv>
   d41d0:	4929      	ldr	r1, [pc, #164]	; (d4278 <_Z11printValuesv+0xf4>)
   d41d2:	f004 fb3b 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(bme.readPressure() / 101325.0F * 760.0F);
   d41d6:	f005 f95b 	bl	d9490 <_Z16_fetch_usbserialv>
   d41da:	4605      	mov	r5, r0
   d41dc:	4620      	mov	r0, r4
   d41de:	f001 fd9d 	bl	d5d1c <_ZN15Adafruit_BME28012readPressureEv>
   d41e2:	eddf 7a26 	vldr	s15, [pc, #152]	; d427c <_Z11printValuesv+0xf8>
   d41e6:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d41ea:	2102      	movs	r1, #2
   d41ec:	4628      	mov	r0, r5
   d41ee:	ed9f 0a24 	vldr	s0, [pc, #144]	; d4280 <_Z11printValuesv+0xfc>
   d41f2:	ee27 0a00 	vmul.f32	s0, s14, s0
   d41f6:	f004 fc63 	bl	d8ac0 <_ZN5Print5printEfi>
    Serial.println(" mmHg");
   d41fa:	f005 f949 	bl	d9490 <_Z16_fetch_usbserialv>
   d41fe:	4921      	ldr	r1, [pc, #132]	; (d4284 <_Z11printValuesv+0x100>)
   d4200:	f004 fb3b 	bl	d887a <_ZN5Print7printlnEPKc>
    Serial.print("Approx. Altitude = ");
   d4204:	f005 f944 	bl	d9490 <_Z16_fetch_usbserialv>
   d4208:	491f      	ldr	r1, [pc, #124]	; (d4288 <_Z11printValuesv+0x104>)
   d420a:	f004 fb1f 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d420e:	f005 f93f 	bl	d9490 <_Z16_fetch_usbserialv>
   d4212:	ed9f 0a1e 	vldr	s0, [pc, #120]	; d428c <_Z11printValuesv+0x108>
   d4216:	4605      	mov	r5, r0
   d4218:	4620      	mov	r0, r4
   d421a:	f001 fe59 	bl	d5ed0 <_ZN15Adafruit_BME28012readAltitudeEf>
   d421e:	2102      	movs	r1, #2
   d4220:	4628      	mov	r0, r5
   d4222:	f004 fc4d 	bl	d8ac0 <_ZN5Print5printEfi>
    Serial.println(" m");
   d4226:	f005 f933 	bl	d9490 <_Z16_fetch_usbserialv>
   d422a:	4919      	ldr	r1, [pc, #100]	; (d4290 <_Z11printValuesv+0x10c>)
   d422c:	f004 fb25 	bl	d887a <_ZN5Print7printlnEPKc>
    Serial.print("Humidity = ");
   d4230:	f005 f92e 	bl	d9490 <_Z16_fetch_usbserialv>
   d4234:	4917      	ldr	r1, [pc, #92]	; (d4294 <_Z11printValuesv+0x110>)
   d4236:	f004 fb09 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d423a:	f005 f929 	bl	d9490 <_Z16_fetch_usbserialv>
   d423e:	4605      	mov	r5, r0
   d4240:	4620      	mov	r0, r4
   d4242:	f001 fee5 	bl	d6010 <_ZN15Adafruit_BME28012readHumidityEv>
   d4246:	2102      	movs	r1, #2
   d4248:	4628      	mov	r0, r5
   d424a:	f004 fc39 	bl	d8ac0 <_ZN5Print5printEfi>
    Serial.println(" %");
   d424e:	f005 f91f 	bl	d9490 <_Z16_fetch_usbserialv>
   d4252:	4911      	ldr	r1, [pc, #68]	; (d4298 <_Z11printValuesv+0x114>)
   d4254:	f004 fb11 	bl	d887a <_ZN5Print7printlnEPKc>
    Serial.println();
   d4258:	f005 f91a 	bl	d9490 <_Z16_fetch_usbserialv>
}
   d425c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println();
   d4260:	f004 baff 	b.w	d8862 <_ZN5Print7printlnEv>
   d4264:	000dd5c4 	.word	0x000dd5c4
   d4268:	2003e470 	.word	0x2003e470
   d426c:	3fe66666 	.word	0x3fe66666
   d4270:	40400000 	.word	0x40400000
   d4274:	000dd5d5 	.word	0x000dd5d5
   d4278:	000dd5d8 	.word	0x000dd5d8
   d427c:	47c5e680 	.word	0x47c5e680
   d4280:	443e0000 	.word	0x443e0000
   d4284:	000dd5e4 	.word	0x000dd5e4
   d4288:	000dd5ea 	.word	0x000dd5ea
   d428c:	447d5000 	.word	0x447d5000
   d4290:	000dd5fe 	.word	0x000dd5fe
   d4294:	000dd601 	.word	0x000dd601
   d4298:	000dd60d 	.word	0x000dd60d

000d429c <_Z20displaySensorDetailsv>:
{
   d429c:	b530      	push	{r4, r5, lr}
  Serial.println("------------------------------------");
   d429e:	4d3b      	ldr	r5, [pc, #236]	; (d438c <_Z20displaySensorDetailsv+0xf0>)
  bno.getSensor(&sensor);
   d42a0:	483b      	ldr	r0, [pc, #236]	; (d4390 <_Z20displaySensorDetailsv+0xf4>)
{
   d42a2:	b08b      	sub	sp, #44	; 0x2c
  bno.getSensor(&sensor);
   d42a4:	4669      	mov	r1, sp
   d42a6:	f002 fab1 	bl	d680c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
  Serial.println("------------------------------------");
   d42aa:	f005 f8f1 	bl	d9490 <_Z16_fetch_usbserialv>
   d42ae:	4629      	mov	r1, r5
   d42b0:	f004 fae3 	bl	d887a <_ZN5Print7printlnEPKc>
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
   d42b4:	f005 f8ec 	bl	d9490 <_Z16_fetch_usbserialv>
   d42b8:	4936      	ldr	r1, [pc, #216]	; (d4394 <_Z20displaySensorDetailsv+0xf8>)
   d42ba:	f004 fac7 	bl	d884c <_ZN5Print5printEPKc>
   d42be:	f005 f8e7 	bl	d9490 <_Z16_fetch_usbserialv>
   d42c2:	4669      	mov	r1, sp
   d42c4:	f004 fad9 	bl	d887a <_ZN5Print7printlnEPKc>
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
   d42c8:	f005 f8e2 	bl	d9490 <_Z16_fetch_usbserialv>
   d42cc:	4932      	ldr	r1, [pc, #200]	; (d4398 <_Z20displaySensorDetailsv+0xfc>)
   d42ce:	f004 fabd 	bl	d884c <_ZN5Print5printEPKc>
   d42d2:	f005 f8dd 	bl	d9490 <_Z16_fetch_usbserialv>
   d42d6:	220a      	movs	r2, #10
   d42d8:	9903      	ldr	r1, [sp, #12]
   d42da:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   d42dc:	f7ff ff28 	bl	d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>
        n += println();
   d42e0:	4620      	mov	r0, r4
   d42e2:	f004 fabe 	bl	d8862 <_ZN5Print7printlnEv>
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
   d42e6:	f005 f8d3 	bl	d9490 <_Z16_fetch_usbserialv>
   d42ea:	492c      	ldr	r1, [pc, #176]	; (d439c <_Z20displaySensorDetailsv+0x100>)
   d42ec:	f004 faae 	bl	d884c <_ZN5Print5printEPKc>
   d42f0:	f005 f8ce 	bl	d9490 <_Z16_fetch_usbserialv>
   d42f4:	220a      	movs	r2, #10
   d42f6:	9904      	ldr	r1, [sp, #16]
   d42f8:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   d42fa:	f7ff ff19 	bl	d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>
        n += println();
   d42fe:	4620      	mov	r0, r4
   d4300:	f004 faaf 	bl	d8862 <_ZN5Print7printlnEv>
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" xxx");
   d4304:	4c26      	ldr	r4, [pc, #152]	; (d43a0 <_Z20displaySensorDetailsv+0x104>)
   d4306:	f005 f8c3 	bl	d9490 <_Z16_fetch_usbserialv>
   d430a:	4926      	ldr	r1, [pc, #152]	; (d43a4 <_Z20displaySensorDetailsv+0x108>)
   d430c:	f004 fa9e 	bl	d884c <_ZN5Print5printEPKc>
   d4310:	f005 f8be 	bl	d9490 <_Z16_fetch_usbserialv>
   d4314:	ed9d 0a06 	vldr	s0, [sp, #24]
   d4318:	2102      	movs	r1, #2
   d431a:	f004 fbd1 	bl	d8ac0 <_ZN5Print5printEfi>
   d431e:	f005 f8b7 	bl	d9490 <_Z16_fetch_usbserialv>
   d4322:	4621      	mov	r1, r4
   d4324:	f004 faa9 	bl	d887a <_ZN5Print7printlnEPKc>
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" xxx");
   d4328:	f005 f8b2 	bl	d9490 <_Z16_fetch_usbserialv>
   d432c:	491e      	ldr	r1, [pc, #120]	; (d43a8 <_Z20displaySensorDetailsv+0x10c>)
   d432e:	f004 fa8d 	bl	d884c <_ZN5Print5printEPKc>
   d4332:	f005 f8ad 	bl	d9490 <_Z16_fetch_usbserialv>
   d4336:	ed9d 0a07 	vldr	s0, [sp, #28]
   d433a:	2102      	movs	r1, #2
   d433c:	f004 fbc0 	bl	d8ac0 <_ZN5Print5printEfi>
   d4340:	f005 f8a6 	bl	d9490 <_Z16_fetch_usbserialv>
   d4344:	4621      	mov	r1, r4
   d4346:	f004 fa98 	bl	d887a <_ZN5Print7printlnEPKc>
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" xxx");
   d434a:	f005 f8a1 	bl	d9490 <_Z16_fetch_usbserialv>
   d434e:	4917      	ldr	r1, [pc, #92]	; (d43ac <_Z20displaySensorDetailsv+0x110>)
   d4350:	f004 fa7c 	bl	d884c <_ZN5Print5printEPKc>
   d4354:	f005 f89c 	bl	d9490 <_Z16_fetch_usbserialv>
   d4358:	ed9d 0a08 	vldr	s0, [sp, #32]
   d435c:	2102      	movs	r1, #2
   d435e:	f004 fbaf 	bl	d8ac0 <_ZN5Print5printEfi>
   d4362:	f005 f895 	bl	d9490 <_Z16_fetch_usbserialv>
   d4366:	4621      	mov	r1, r4
   d4368:	f004 fa87 	bl	d887a <_ZN5Print7printlnEPKc>
  Serial.println("------------------------------------");
   d436c:	f005 f890 	bl	d9490 <_Z16_fetch_usbserialv>
   d4370:	4629      	mov	r1, r5
   d4372:	f004 fa82 	bl	d887a <_ZN5Print7printlnEPKc>
  Serial.println("");
   d4376:	f005 f88b 	bl	d9490 <_Z16_fetch_usbserialv>
   d437a:	490d      	ldr	r1, [pc, #52]	; (d43b0 <_Z20displaySensorDetailsv+0x114>)
   d437c:	f004 fa7d 	bl	d887a <_ZN5Print7printlnEPKc>
  delay(500);
   d4380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4384:	f004 fc52 	bl	d8c2c <delay>
}
   d4388:	b00b      	add	sp, #44	; 0x2c
   d438a:	bd30      	pop	{r4, r5, pc}
   d438c:	000dd610 	.word	0x000dd610
   d4390:	2003e4b4 	.word	0x2003e4b4
   d4394:	000dd635 	.word	0x000dd635
   d4398:	000dd644 	.word	0x000dd644
   d439c:	000dd653 	.word	0x000dd653
   d43a0:	000dd671 	.word	0x000dd671
   d43a4:	000dd662 	.word	0x000dd662
   d43a8:	000dd676 	.word	0x000dd676
   d43ac:	000dd685 	.word	0x000dd685
   d43b0:	000dd77f 	.word	0x000dd77f

000d43b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>:
{
   d43b4:	b538      	push	{r3, r4, r5, lr}
   d43b6:	4604      	mov	r4, r0
    Serial.println("\nCalibration offsets \n");
   d43b8:	f005 f86a 	bl	d9490 <_Z16_fetch_usbserialv>
   d43bc:	494c      	ldr	r1, [pc, #304]	; (d44f0 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x13c>)
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   d43be:	4d4d      	ldr	r5, [pc, #308]	; (d44f4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x140>)
    Serial.println("\nCalibration offsets \n");
   d43c0:	f004 fa5b 	bl	d887a <_ZN5Print7printlnEPKc>
    Serial.print("Accelerometer: ");
   d43c4:	f005 f864 	bl	d9490 <_Z16_fetch_usbserialv>
   d43c8:	494b      	ldr	r1, [pc, #300]	; (d44f8 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x144>)
   d43ca:	f004 fa3f 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   d43ce:	f005 f85f 	bl	d9490 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d43d2:	220a      	movs	r2, #10
   d43d4:	f9b4 1000 	ldrsh.w	r1, [r4]
   d43d8:	f7ff febf 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43dc:	f005 f858 	bl	d9490 <_Z16_fetch_usbserialv>
   d43e0:	4629      	mov	r1, r5
   d43e2:	f004 fa33 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_y); Serial.print(" ");
   d43e6:	f005 f853 	bl	d9490 <_Z16_fetch_usbserialv>
   d43ea:	220a      	movs	r2, #10
   d43ec:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   d43f0:	f7ff feb3 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43f4:	f005 f84c 	bl	d9490 <_Z16_fetch_usbserialv>
   d43f8:	4629      	mov	r1, r5
   d43fa:	f004 fa27 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_z); Serial.print(" ");
   d43fe:	f005 f847 	bl	d9490 <_Z16_fetch_usbserialv>
   d4402:	220a      	movs	r2, #10
   d4404:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   d4408:	f7ff fea7 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d440c:	f005 f840 	bl	d9490 <_Z16_fetch_usbserialv>
   d4410:	4629      	mov	r1, r5
   d4412:	f004 fa1b 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print("\nGyro: ");
   d4416:	f005 f83b 	bl	d9490 <_Z16_fetch_usbserialv>
   d441a:	4938      	ldr	r1, [pc, #224]	; (d44fc <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x148>)
   d441c:	f004 fa16 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_x); Serial.print(" ");
   d4420:	f005 f836 	bl	d9490 <_Z16_fetch_usbserialv>
   d4424:	220a      	movs	r2, #10
   d4426:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   d442a:	f7ff fe96 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d442e:	f005 f82f 	bl	d9490 <_Z16_fetch_usbserialv>
   d4432:	4629      	mov	r1, r5
   d4434:	f004 fa0a 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_y); Serial.print(" ");
   d4438:	f005 f82a 	bl	d9490 <_Z16_fetch_usbserialv>
   d443c:	220a      	movs	r2, #10
   d443e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   d4442:	f7ff fe8a 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4446:	f005 f823 	bl	d9490 <_Z16_fetch_usbserialv>
   d444a:	4629      	mov	r1, r5
   d444c:	f004 f9fe 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_z); Serial.print(" ");
   d4450:	f005 f81e 	bl	d9490 <_Z16_fetch_usbserialv>
   d4454:	220a      	movs	r2, #10
   d4456:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d445a:	f7ff fe7e 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d445e:	f005 f817 	bl	d9490 <_Z16_fetch_usbserialv>
   d4462:	4629      	mov	r1, r5
   d4464:	f004 f9f2 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print("\nMag: ");
   d4468:	f005 f812 	bl	d9490 <_Z16_fetch_usbserialv>
   d446c:	4924      	ldr	r1, [pc, #144]	; (d4500 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x14c>)
   d446e:	f004 f9ed 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_x); Serial.print(" ");
   d4472:	f005 f80d 	bl	d9490 <_Z16_fetch_usbserialv>
   d4476:	220a      	movs	r2, #10
   d4478:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   d447c:	f7ff fe6d 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4480:	f005 f806 	bl	d9490 <_Z16_fetch_usbserialv>
   d4484:	4629      	mov	r1, r5
   d4486:	f004 f9e1 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_y); Serial.print(" ");
   d448a:	f005 f801 	bl	d9490 <_Z16_fetch_usbserialv>
   d448e:	220a      	movs	r2, #10
   d4490:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d4494:	f7ff fe61 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4498:	f004 fffa 	bl	d9490 <_Z16_fetch_usbserialv>
   d449c:	4629      	mov	r1, r5
   d449e:	f004 f9d5 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_z); Serial.print(" ");
   d44a2:	f004 fff5 	bl	d9490 <_Z16_fetch_usbserialv>
   d44a6:	220a      	movs	r2, #10
   d44a8:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d44ac:	f7ff fe55 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d44b0:	f004 ffee 	bl	d9490 <_Z16_fetch_usbserialv>
   d44b4:	4629      	mov	r1, r5
   d44b6:	f004 f9c9 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print("\nAccel Radius: ");
   d44ba:	f004 ffe9 	bl	d9490 <_Z16_fetch_usbserialv>
   d44be:	4911      	ldr	r1, [pc, #68]	; (d4504 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x150>)
   d44c0:	f004 f9c4 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_radius);
   d44c4:	f004 ffe4 	bl	d9490 <_Z16_fetch_usbserialv>
   d44c8:	220a      	movs	r2, #10
   d44ca:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
   d44ce:	f7ff fe44 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
    Serial.print("\nMag Radius: ");
   d44d2:	f004 ffdd 	bl	d9490 <_Z16_fetch_usbserialv>
   d44d6:	490c      	ldr	r1, [pc, #48]	; (d4508 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x154>)
   d44d8:	f004 f9b8 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_radius);
   d44dc:	f004 ffd8 	bl	d9490 <_Z16_fetch_usbserialv>
   d44e0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
   d44e4:	220a      	movs	r2, #10
}
   d44e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d44ea:	f7ff be36 	b.w	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d44ee:	bf00      	nop
   d44f0:	000dd694 	.word	0x000dd694
   d44f4:	000dd642 	.word	0x000dd642
   d44f8:	000dd6ab 	.word	0x000dd6ab
   d44fc:	000dd6bb 	.word	0x000dd6bb
   d4500:	000dd6c3 	.word	0x000dd6c3
   d4504:	000dd6ca 	.word	0x000dd6ca
   d4508:	000dd6da 	.word	0x000dd6da

000d450c <_Z10getHeadingi>:
if(direction < 22)
   d450c:	2815      	cmp	r0, #21
void getHeading(int direction) {
   d450e:	b508      	push	{r3, lr}
if(direction < 22)
   d4510:	dc06      	bgt.n	d4520 <_Z10getHeadingi+0x14>
Serial.println("N");
   d4512:	f004 ffbd 	bl	d9490 <_Z16_fetch_usbserialv>
   d4516:	4918      	ldr	r1, [pc, #96]	; (d4578 <_Z10getHeadingi+0x6c>)
} 
   d4518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Serial.println("NW");
   d451c:	f004 b9ad 	b.w	d887a <_ZN5Print7printlnEPKc>
else if (direction < 67)
   d4520:	2842      	cmp	r0, #66	; 0x42
   d4522:	dc03      	bgt.n	d452c <_Z10getHeadingi+0x20>
Serial.println("NE");
   d4524:	f004 ffb4 	bl	d9490 <_Z16_fetch_usbserialv>
   d4528:	4914      	ldr	r1, [pc, #80]	; (d457c <_Z10getHeadingi+0x70>)
   d452a:	e7f5      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 112)
   d452c:	286f      	cmp	r0, #111	; 0x6f
   d452e:	dc03      	bgt.n	d4538 <_Z10getHeadingi+0x2c>
Serial.println("E");
   d4530:	f004 ffae 	bl	d9490 <_Z16_fetch_usbserialv>
   d4534:	4912      	ldr	r1, [pc, #72]	; (d4580 <_Z10getHeadingi+0x74>)
   d4536:	e7ef      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 157)
   d4538:	289c      	cmp	r0, #156	; 0x9c
   d453a:	dc03      	bgt.n	d4544 <_Z10getHeadingi+0x38>
Serial.println("SE");
   d453c:	f004 ffa8 	bl	d9490 <_Z16_fetch_usbserialv>
   d4540:	4910      	ldr	r1, [pc, #64]	; (d4584 <_Z10getHeadingi+0x78>)
   d4542:	e7e9      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 212)
   d4544:	28d3      	cmp	r0, #211	; 0xd3
   d4546:	dc03      	bgt.n	d4550 <_Z10getHeadingi+0x44>
Serial.println("S");
   d4548:	f004 ffa2 	bl	d9490 <_Z16_fetch_usbserialv>
   d454c:	490e      	ldr	r1, [pc, #56]	; (d4588 <_Z10getHeadingi+0x7c>)
   d454e:	e7e3      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 247)
   d4550:	28f6      	cmp	r0, #246	; 0xf6
   d4552:	dc03      	bgt.n	d455c <_Z10getHeadingi+0x50>
Serial.println("SW");
   d4554:	f004 ff9c 	bl	d9490 <_Z16_fetch_usbserialv>
   d4558:	490c      	ldr	r1, [pc, #48]	; (d458c <_Z10getHeadingi+0x80>)
   d455a:	e7dd      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 292)
   d455c:	f5b0 7f92 	cmp.w	r0, #292	; 0x124
   d4560:	da03      	bge.n	d456a <_Z10getHeadingi+0x5e>
Serial.println("W");
   d4562:	f004 ff95 	bl	d9490 <_Z16_fetch_usbserialv>
   d4566:	490a      	ldr	r1, [pc, #40]	; (d4590 <_Z10getHeadingi+0x84>)
   d4568:	e7d6      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 337)
   d456a:	f5b0 7fa8 	cmp.w	r0, #336	; 0x150
   d456e:	dcd0      	bgt.n	d4512 <_Z10getHeadingi+0x6>
Serial.println("NW");
   d4570:	f004 ff8e 	bl	d9490 <_Z16_fetch_usbserialv>
   d4574:	4907      	ldr	r1, [pc, #28]	; (d4594 <_Z10getHeadingi+0x88>)
   d4576:	e7cf      	b.n	d4518 <_Z10getHeadingi+0xc>
   d4578:	000dd6e8 	.word	0x000dd6e8
   d457c:	000dd6ea 	.word	0x000dd6ea
   d4580:	000dd6eb 	.word	0x000dd6eb
   d4584:	000dd6ed 	.word	0x000dd6ed
   d4588:	000dd6f0 	.word	0x000dd6f0
   d458c:	000dd6f2 	.word	0x000dd6f2
   d4590:	000dd6f6 	.word	0x000dd6f6
   d4594:	000dd6f5 	.word	0x000dd6f5

000d4598 <_ZN5Print5printIhLi0EEEjT_i>:
    if (base == 0) {
   d4598:	b912      	cbnz	r2, d45a0 <_ZN5Print5printIhLi0EEEjT_i+0x8>
        return write(n);
   d459a:	6803      	ldr	r3, [r0, #0]
   d459c:	689b      	ldr	r3, [r3, #8]
   d459e:	4718      	bx	r3
        return printNumber(val, base) + t;
   d45a0:	b2d2      	uxtb	r2, r2
   d45a2:	f004 b976 	b.w	d8892 <_ZN5Print11printNumberEmh>
	...

000d45a8 <_Z16displayCalStatusv>:
{
   d45a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    system = gyro = accel = mag = 0;
   d45aa:	2300      	movs	r3, #0
   d45ac:	f88d 300f 	strb.w	r3, [sp, #15]
   d45b0:	f88d 300e 	strb.w	r3, [sp, #14]
   d45b4:	f88d 300d 	strb.w	r3, [sp, #13]
   d45b8:	f88d 300c 	strb.w	r3, [sp, #12]
    bno.getCalibration(&system, &gyro, &accel, &mag);
   d45bc:	f10d 030f 	add.w	r3, sp, #15
   d45c0:	f10d 020d 	add.w	r2, sp, #13
   d45c4:	a903      	add	r1, sp, #12
   d45c6:	4823      	ldr	r0, [pc, #140]	; (d4654 <_Z16displayCalStatusv+0xac>)
   d45c8:	9300      	str	r3, [sp, #0]
   d45ca:	f10d 030e 	add.w	r3, sp, #14
   d45ce:	f002 fa9c 	bl	d6b0a <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
    Serial.print("\t");
   d45d2:	f004 ff5d 	bl	d9490 <_Z16_fetch_usbserialv>
   d45d6:	4920      	ldr	r1, [pc, #128]	; (d4658 <_Z16displayCalStatusv+0xb0>)
   d45d8:	f004 f938 	bl	d884c <_ZN5Print5printEPKc>
    if (!system)
   d45dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d45e0:	b923      	cbnz	r3, d45ec <_Z16displayCalStatusv+0x44>
        Serial.print("! ");
   d45e2:	f004 ff55 	bl	d9490 <_Z16_fetch_usbserialv>
   d45e6:	491d      	ldr	r1, [pc, #116]	; (d465c <_Z16displayCalStatusv+0xb4>)
   d45e8:	f004 f930 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print("Sys:");
   d45ec:	f004 ff50 	bl	d9490 <_Z16_fetch_usbserialv>
   d45f0:	491b      	ldr	r1, [pc, #108]	; (d4660 <_Z16displayCalStatusv+0xb8>)
   d45f2:	f004 f92b 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(system, DEC);
   d45f6:	f004 ff4b 	bl	d9490 <_Z16_fetch_usbserialv>
   d45fa:	220a      	movs	r2, #10
   d45fc:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d4600:	f7ff ffca 	bl	d4598 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" G:");
   d4604:	f004 ff44 	bl	d9490 <_Z16_fetch_usbserialv>
   d4608:	4916      	ldr	r1, [pc, #88]	; (d4664 <_Z16displayCalStatusv+0xbc>)
   d460a:	f004 f91f 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(gyro, DEC);
   d460e:	f004 ff3f 	bl	d9490 <_Z16_fetch_usbserialv>
   d4612:	220a      	movs	r2, #10
   d4614:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d4618:	f7ff ffbe 	bl	d4598 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" A:");
   d461c:	f004 ff38 	bl	d9490 <_Z16_fetch_usbserialv>
   d4620:	4911      	ldr	r1, [pc, #68]	; (d4668 <_Z16displayCalStatusv+0xc0>)
   d4622:	f004 f913 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(accel, DEC);
   d4626:	f004 ff33 	bl	d9490 <_Z16_fetch_usbserialv>
   d462a:	220a      	movs	r2, #10
   d462c:	f89d 100e 	ldrb.w	r1, [sp, #14]
   d4630:	f7ff ffb2 	bl	d4598 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" M:");
   d4634:	f004 ff2c 	bl	d9490 <_Z16_fetch_usbserialv>
   d4638:	490c      	ldr	r1, [pc, #48]	; (d466c <_Z16displayCalStatusv+0xc4>)
   d463a:	f004 f907 	bl	d884c <_ZN5Print5printEPKc>
    Serial.print(mag, DEC);
   d463e:	f004 ff27 	bl	d9490 <_Z16_fetch_usbserialv>
   d4642:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d4646:	220a      	movs	r2, #10
   d4648:	f7ff ffa6 	bl	d4598 <_ZN5Print5printIhLi0EEEjT_i>
}
   d464c:	b005      	add	sp, #20
   d464e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4652:	bf00      	nop
   d4654:	2003e4b4 	.word	0x2003e4b4
   d4658:	000dd77e 	.word	0x000dd77e
   d465c:	000dd6f8 	.word	0x000dd6f8
   d4660:	000dd6fb 	.word	0x000dd6fb
   d4664:	000dd700 	.word	0x000dd700
   d4668:	000dd704 	.word	0x000dd704
   d466c:	000dd708 	.word	0x000dd708

000d4670 <_Z19get_compass_headingv>:

float get_compass_heading() {
   d4670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4674:	ed2d 8b08 	vpush	{d8-d11}
   d4678:	b097      	sub	sp, #92	; 0x5c
  // put your main code here, to run repeatedly:
uint8_t system, gyro, accel, mg = 0;
bno.getCalibration(&system, &gyro, &accel, &mg);
   d467a:	4cd7      	ldr	r4, [pc, #860]	; (d49d8 <_Z19get_compass_headingv+0x368>)
imu::Vector<3> acc =bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
imu::Vector<3> gyr =bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
imu::Vector<3> mag =bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
//measured value of tilt in x
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d467c:	4fd7      	ldr	r7, [pc, #860]	; (d49dc <_Z19get_compass_headingv+0x36c>)
//measured value of tilt in y
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
//filtered value for tilt in y
phiFnew=.95*phiFold+.05*phiM;
   d467e:	f8df b39c 	ldr.w	fp, [pc, #924]	; d4a1c <_Z19get_compass_headingv+0x3ac>
//filtered value for tilt in x
thetaFnew=.95*thetaFold+.05*thetaM;
   d4682:	f8df a39c 	ldr.w	sl, [pc, #924]	; d4a20 <_Z19get_compass_headingv+0x3b0>
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;

thetaG=thetaG+gyr.y()*dt;
phiG=phiG-gyr.x()*dt;
 
phiRad=phi/360*(2*3.14);
   d4686:	ed9f 9ad6 	vldr	s18, [pc, #856]	; d49e0 <_Z19get_compass_headingv+0x370>
uint8_t system, gyro, accel, mg = 0;
   d468a:	2300      	movs	r3, #0
   d468c:	f88d 300f 	strb.w	r3, [sp, #15]
bno.getCalibration(&system, &gyro, &accel, &mg);
   d4690:	f10d 030f 	add.w	r3, sp, #15
   d4694:	9300      	str	r3, [sp, #0]
   d4696:	f10d 020d 	add.w	r2, sp, #13
   d469a:	f10d 030e 	add.w	r3, sp, #14
   d469e:	a903      	add	r1, sp, #12
   d46a0:	4620      	mov	r0, r4
   d46a2:	f002 fa32 	bl	d6b0a <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
imu::Vector<3> acc =bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
   d46a6:	4621      	mov	r1, r4
   d46a8:	a804      	add	r0, sp, #16
   d46aa:	2208      	movs	r2, #8
   d46ac:	f002 fb88 	bl	d6dc0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> gyr =bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
   d46b0:	4621      	mov	r1, r4
   d46b2:	a80a      	add	r0, sp, #40	; 0x28
   d46b4:	2214      	movs	r2, #20
   d46b6:	f002 fb83 	bl	d6dc0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> mag =bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
   d46ba:	4621      	mov	r1, r4
   d46bc:	a810      	add	r0, sp, #64	; 0x40
   d46be:	220e      	movs	r2, #14
   d46c0:	f002 fb7e 	bl	d6dc0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d46c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d46c8:	a3b9      	add	r3, pc, #740	; (adr r3, d49b0 <_Z19get_compass_headingv+0x340>)
   d46ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46ce:	f008 f97b 	bl	dc9c8 <__aeabi_ddiv>
   d46d2:	a3b7      	add	r3, pc, #732	; (adr r3, d49b0 <_Z19get_compass_headingv+0x340>)
   d46d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46d8:	ec41 0b18 	vmov	d8, r0, r1
   d46dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d46e0:	f008 f972 	bl	dc9c8 <__aeabi_ddiv>
   d46e4:	eeb0 1a48 	vmov.f32	s2, s16
   d46e8:	eef0 1a68 	vmov.f32	s3, s17
   d46ec:	ec41 0b10 	vmov	d0, r0, r1
   d46f0:	f005 faa8 	bl	d9c44 <atan2>
   d46f4:	ec53 2b10 	vmov	r2, r3, d0
   d46f8:	ee10 0a10 	vmov	r0, s0
   d46fc:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   d4700:	2200      	movs	r2, #0
   d4702:	4bb8      	ldr	r3, [pc, #736]	; (d49e4 <_Z19get_compass_headingv+0x374>)
   d4704:	f008 f836 	bl	dc774 <__aeabi_dmul>
   d4708:	a3ab      	add	r3, pc, #684	; (adr r3, d49b8 <_Z19get_compass_headingv+0x348>)
   d470a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d470e:	f008 f95b 	bl	dc9c8 <__aeabi_ddiv>
   d4712:	4bb5      	ldr	r3, [pc, #724]	; (d49e8 <_Z19get_compass_headingv+0x378>)
   d4714:	2200      	movs	r2, #0
   d4716:	f008 f82d 	bl	dc774 <__aeabi_dmul>
   d471a:	f008 fb23 	bl	dcd64 <__aeabi_d2f>
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d471e:	a3a4      	add	r3, pc, #656	; (adr r3, d49b0 <_Z19get_compass_headingv+0x340>)
   d4720:	e9d3 2300 	ldrd	r2, r3, [r3]
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4724:	6038      	str	r0, [r7, #0]
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4726:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d472a:	f008 f94d 	bl	dc9c8 <__aeabi_ddiv>
   d472e:	a3a0      	add	r3, pc, #640	; (adr r3, d49b0 <_Z19get_compass_headingv+0x340>)
   d4730:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4734:	ec41 0b18 	vmov	d8, r0, r1
   d4738:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d473c:	f008 f944 	bl	dc9c8 <__aeabi_ddiv>
   d4740:	eeb0 1a48 	vmov.f32	s2, s16
   d4744:	eef0 1a68 	vmov.f32	s3, s17
   d4748:	ec41 0b10 	vmov	d0, r0, r1
   d474c:	f005 fa7a 	bl	d9c44 <atan2>
   d4750:	ec53 2b10 	vmov	r2, r3, d0
   d4754:	ee10 0a10 	vmov	r0, s0
   d4758:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   d475c:	2200      	movs	r2, #0
   d475e:	4ba1      	ldr	r3, [pc, #644]	; (d49e4 <_Z19get_compass_headingv+0x374>)
   d4760:	f008 f808 	bl	dc774 <__aeabi_dmul>
   d4764:	a394      	add	r3, pc, #592	; (adr r3, d49b8 <_Z19get_compass_headingv+0x348>)
   d4766:	e9d3 2300 	ldrd	r2, r3, [r3]
   d476a:	f008 f92d 	bl	dc9c8 <__aeabi_ddiv>
   d476e:	2200      	movs	r2, #0
   d4770:	4b9d      	ldr	r3, [pc, #628]	; (d49e8 <_Z19get_compass_headingv+0x378>)
   d4772:	f007 ffff 	bl	dc774 <__aeabi_dmul>
   d4776:	f008 faf5 	bl	dcd64 <__aeabi_d2f>
   d477a:	4b9c      	ldr	r3, [pc, #624]	; (d49ec <_Z19get_compass_headingv+0x37c>)
phiFnew=.95*phiFold+.05*phiM;
   d477c:	499c      	ldr	r1, [pc, #624]	; (d49f0 <_Z19get_compass_headingv+0x380>)
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d477e:	6018      	str	r0, [r3, #0]
   d4780:	4606      	mov	r6, r0
phiFnew=.95*phiFold+.05*phiM;
   d4782:	6808      	ldr	r0, [r1, #0]
   d4784:	f007 ff9e 	bl	dc6c4 <__aeabi_f2d>
   d4788:	a38d      	add	r3, pc, #564	; (adr r3, d49c0 <_Z19get_compass_headingv+0x350>)
   d478a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d478e:	f007 fff1 	bl	dc774 <__aeabi_dmul>
   d4792:	4604      	mov	r4, r0
   d4794:	4630      	mov	r0, r6
   d4796:	460d      	mov	r5, r1
   d4798:	f007 ff94 	bl	dc6c4 <__aeabi_f2d>
   d479c:	a38a      	add	r3, pc, #552	; (adr r3, d49c8 <_Z19get_compass_headingv+0x358>)
   d479e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47a2:	f007 ffe7 	bl	dc774 <__aeabi_dmul>
   d47a6:	4602      	mov	r2, r0
   d47a8:	460b      	mov	r3, r1
   d47aa:	4620      	mov	r0, r4
   d47ac:	4629      	mov	r1, r5
   d47ae:	f007 fe2b 	bl	dc408 <__adddf3>
   d47b2:	f008 fad7 	bl	dcd64 <__aeabi_d2f>
   d47b6:	f8cb 0000 	str.w	r0, [fp]
thetaFnew=.95*thetaFold+.05*thetaM;
   d47ba:	488e      	ldr	r0, [pc, #568]	; (d49f4 <_Z19get_compass_headingv+0x384>)
   d47bc:	6800      	ldr	r0, [r0, #0]
   d47be:	f007 ff81 	bl	dc6c4 <__aeabi_f2d>
   d47c2:	a37f      	add	r3, pc, #508	; (adr r3, d49c0 <_Z19get_compass_headingv+0x350>)
   d47c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47c8:	f007 ffd4 	bl	dc774 <__aeabi_dmul>
   d47cc:	4604      	mov	r4, r0
   d47ce:	6838      	ldr	r0, [r7, #0]
   d47d0:	460d      	mov	r5, r1
   d47d2:	f007 ff77 	bl	dc6c4 <__aeabi_f2d>
   d47d6:	a37c      	add	r3, pc, #496	; (adr r3, d49c8 <_Z19get_compass_headingv+0x358>)
   d47d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47dc:	f007 ffca 	bl	dc774 <__aeabi_dmul>
   d47e0:	4602      	mov	r2, r0
   d47e2:	460b      	mov	r3, r1
   d47e4:	4620      	mov	r0, r4
   d47e6:	4629      	mov	r1, r5
   d47e8:	f007 fe0e 	bl	dc408 <__adddf3>
   d47ec:	f008 faba 	bl	dcd64 <__aeabi_d2f>
dt=(millis()-millisOld)/1000.;
   d47f0:	4d81      	ldr	r5, [pc, #516]	; (d49f8 <_Z19get_compass_headingv+0x388>)
thetaFnew=.95*thetaFold+.05*thetaM;
   d47f2:	f8ca 0000 	str.w	r0, [sl]
   d47f6:	f003 fb2d 	bl	d7e54 <HAL_Timer_Get_Milli_Seconds>
dt=(millis()-millisOld)/1000.;
   d47fa:	682b      	ldr	r3, [r5, #0]
   d47fc:	4c7f      	ldr	r4, [pc, #508]	; (d49fc <_Z19get_compass_headingv+0x38c>)
   d47fe:	1ac0      	subs	r0, r0, r3
   d4800:	f007 ff3e 	bl	dc680 <__aeabi_ui2d>
   d4804:	4b7e      	ldr	r3, [pc, #504]	; (d4a00 <_Z19get_compass_headingv+0x390>)
   d4806:	2200      	movs	r2, #0
   d4808:	f008 f8de 	bl	dc9c8 <__aeabi_ddiv>
   d480c:	f008 faaa 	bl	dcd64 <__aeabi_d2f>
   d4810:	6020      	str	r0, [r4, #0]
   d4812:	f003 fb1f 	bl	d7e54 <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
   d4816:	6028      	str	r0, [r5, #0]
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   d4818:	6820      	ldr	r0, [r4, #0]
   d481a:	f007 ff53 	bl	dc6c4 <__aeabi_f2d>
   d481e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   d4822:	4604      	mov	r4, r0
   d4824:	460d      	mov	r5, r1
   d4826:	f007 ffa5 	bl	dc774 <__aeabi_dmul>
   d482a:	460f      	mov	r7, r1
   d482c:	4975      	ldr	r1, [pc, #468]	; (d4a04 <_Z19get_compass_headingv+0x394>)
   d482e:	4606      	mov	r6, r0
   d4830:	6808      	ldr	r0, [r1, #0]
   d4832:	f007 ff47 	bl	dc6c4 <__aeabi_f2d>
   d4836:	4632      	mov	r2, r6
   d4838:	463b      	mov	r3, r7
   d483a:	f007 fde5 	bl	dc408 <__adddf3>
   d483e:	a360      	add	r3, pc, #384	; (adr r3, d49c0 <_Z19get_compass_headingv+0x350>)
   d4840:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4844:	f007 ff96 	bl	dc774 <__aeabi_dmul>
   d4848:	4b64      	ldr	r3, [pc, #400]	; (d49dc <_Z19get_compass_headingv+0x36c>)
   d484a:	4680      	mov	r8, r0
   d484c:	6818      	ldr	r0, [r3, #0]
   d484e:	4689      	mov	r9, r1
   d4850:	f007 ff38 	bl	dc6c4 <__aeabi_f2d>
   d4854:	a35c      	add	r3, pc, #368	; (adr r3, d49c8 <_Z19get_compass_headingv+0x358>)
   d4856:	e9d3 2300 	ldrd	r2, r3, [r3]
   d485a:	f007 ff8b 	bl	dc774 <__aeabi_dmul>
   d485e:	4602      	mov	r2, r0
   d4860:	460b      	mov	r3, r1
   d4862:	4640      	mov	r0, r8
   d4864:	4649      	mov	r1, r9
   d4866:	f007 fdcf 	bl	dc408 <__adddf3>
   d486a:	f008 fa7b 	bl	dcd64 <__aeabi_d2f>
   d486e:	4965      	ldr	r1, [pc, #404]	; (d4a04 <_Z19get_compass_headingv+0x394>)
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d4870:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   d4874:	ee08 0a90 	vmov	s17, r0
   d4878:	6008      	str	r0, [r1, #0]
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d487a:	4620      	mov	r0, r4
   d487c:	4629      	mov	r1, r5
   d487e:	f007 ff79 	bl	dc774 <__aeabi_dmul>
   d4882:	4604      	mov	r4, r0
   d4884:	4860      	ldr	r0, [pc, #384]	; (d4a08 <_Z19get_compass_headingv+0x398>)
   d4886:	460d      	mov	r5, r1
   d4888:	6800      	ldr	r0, [r0, #0]
   d488a:	f007 ff1b 	bl	dc6c4 <__aeabi_f2d>
   d488e:	4622      	mov	r2, r4
   d4890:	462b      	mov	r3, r5
   d4892:	f007 fdb7 	bl	dc404 <__aeabi_dsub>
   d4896:	a34a      	add	r3, pc, #296	; (adr r3, d49c0 <_Z19get_compass_headingv+0x350>)
   d4898:	e9d3 2300 	ldrd	r2, r3, [r3]
   d489c:	f007 ff6a 	bl	dc774 <__aeabi_dmul>
   d48a0:	4a52      	ldr	r2, [pc, #328]	; (d49ec <_Z19get_compass_headingv+0x37c>)
   d48a2:	4680      	mov	r8, r0
   d48a4:	6810      	ldr	r0, [r2, #0]
   d48a6:	4689      	mov	r9, r1
   d48a8:	f007 ff0c 	bl	dc6c4 <__aeabi_f2d>
   d48ac:	a346      	add	r3, pc, #280	; (adr r3, d49c8 <_Z19get_compass_headingv+0x358>)
   d48ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d48b2:	f007 ff5f 	bl	dc774 <__aeabi_dmul>
   d48b6:	4602      	mov	r2, r0
   d48b8:	460b      	mov	r3, r1
   d48ba:	4640      	mov	r0, r8
   d48bc:	4649      	mov	r1, r9
   d48be:	f007 fda3 	bl	dc408 <__adddf3>
   d48c2:	f008 fa4f 	bl	dcd64 <__aeabi_d2f>
thetaG=thetaG+gyr.y()*dt;
   d48c6:	4951      	ldr	r1, [pc, #324]	; (d4a0c <_Z19get_compass_headingv+0x39c>)
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d48c8:	ee08 0a10 	vmov	s16, r0
   d48cc:	484e      	ldr	r0, [pc, #312]	; (d4a08 <_Z19get_compass_headingv+0x398>)
   d48ce:	ed80 8a00 	vstr	s16, [r0]
thetaG=thetaG+gyr.y()*dt;
   d48d2:	6808      	ldr	r0, [r1, #0]
   d48d4:	f007 fef6 	bl	dc6c4 <__aeabi_f2d>
   d48d8:	4632      	mov	r2, r6
   d48da:	463b      	mov	r3, r7
   d48dc:	f007 fd94 	bl	dc408 <__adddf3>
   d48e0:	f008 fa40 	bl	dcd64 <__aeabi_d2f>
phiG=phiG-gyr.x()*dt;
   d48e4:	4f4a      	ldr	r7, [pc, #296]	; (d4a10 <_Z19get_compass_headingv+0x3a0>)
thetaG=thetaG+gyr.y()*dt;
   d48e6:	4e49      	ldr	r6, [pc, #292]	; (d4a0c <_Z19get_compass_headingv+0x39c>)
   d48e8:	6030      	str	r0, [r6, #0]
phiG=phiG-gyr.x()*dt;
   d48ea:	6838      	ldr	r0, [r7, #0]
   d48ec:	f007 feea 	bl	dc6c4 <__aeabi_f2d>
   d48f0:	4622      	mov	r2, r4
   d48f2:	462b      	mov	r3, r5
   d48f4:	f007 fd86 	bl	dc404 <__aeabi_dsub>
   d48f8:	f008 fa34 	bl	dcd64 <__aeabi_d2f>
phiRad=phi/360*(2*3.14);
   d48fc:	eec8 7a09 	vdiv.f32	s15, s16, s18
phiG=phiG-gyr.x()*dt;
   d4900:	6038      	str	r0, [r7, #0]
phiRad=phi/360*(2*3.14);
   d4902:	ee17 0a90 	vmov	r0, s15
   d4906:	f007 fedd 	bl	dc6c4 <__aeabi_f2d>
   d490a:	a331      	add	r3, pc, #196	; (adr r3, d49d0 <_Z19get_compass_headingv+0x360>)
   d490c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4910:	f007 ff30 	bl	dc774 <__aeabi_dmul>
   d4914:	f008 fa26 	bl	dcd64 <__aeabi_d2f>
thetaRad=theta/360*(2*3.14);
   d4918:	eec8 7a89 	vdiv.f32	s15, s17, s18
phiRad=phi/360*(2*3.14);
   d491c:	4b3d      	ldr	r3, [pc, #244]	; (d4a14 <_Z19get_compass_headingv+0x3a4>)
   d491e:	6018      	str	r0, [r3, #0]
   d4920:	ee08 0a10 	vmov	s16, r0
thetaRad=theta/360*(2*3.14);
   d4924:	ee17 0a90 	vmov	r0, s15
   d4928:	f007 fecc 	bl	dc6c4 <__aeabi_f2d>
   d492c:	a328      	add	r3, pc, #160	; (adr r3, d49d0 <_Z19get_compass_headingv+0x360>)
   d492e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4932:	f007 ff1f 	bl	dc774 <__aeabi_dmul>
   d4936:	f008 fa15 	bl	dcd64 <__aeabi_d2f>
   d493a:	4b37      	ldr	r3, [pc, #220]	; (d4a18 <_Z19get_compass_headingv+0x3a8>)
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
   d493c:	ee00 0a10 	vmov	s0, r0
   d4940:	6018      	str	r0, [r3, #0]
   d4942:	ee08 0a90 	vmov	s17, r0
   d4946:	f005 f8eb 	bl	d9b20 <cosf>
 
 //tilt compensated x
Xm=mag.x()*cos(thetaRad)-mag.y()*sin(phiRad)*sin(thetaRad)+mag.z()*cos(phiRad)*sin(thetaRad);
   d494a:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   d494e:	ee10 8a10 	vmov	r8, s0
   d4952:	eeb0 9a47 	vmov.f32	s18, s14
   d4956:	eef0 9a67 	vmov.f32	s19, s15
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
   d495a:	eeb0 0a48 	vmov.f32	s0, s16
   d495e:	f005 f927 	bl	d9bb0 <sinf>
   d4962:	ee10 0a10 	vmov	r0, s0
   d4966:	f007 fead 	bl	dc6c4 <__aeabi_f2d>
   d496a:	eeb0 0a68 	vmov.f32	s0, s17
   d496e:	ec41 0b1a 	vmov	d10, r0, r1
   d4972:	f005 f91d 	bl	d9bb0 <sinf>
   d4976:	ee10 0a10 	vmov	r0, s0
   d497a:	f007 fea3 	bl	dc6c4 <__aeabi_f2d>
   d497e:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
  { return __builtin_cosf(__x); }
   d4982:	eeb0 0a48 	vmov.f32	s0, s16
   d4986:	eeb0 ba47 	vmov.f32	s22, s14
   d498a:	eef0 ba67 	vmov.f32	s23, s15
   d498e:	4606      	mov	r6, r0
   d4990:	460f      	mov	r7, r1
   d4992:	f005 f8c5 	bl	d9b20 <cosf>
   d4996:	ee10 0a10 	vmov	r0, s0
   d499a:	f007 fe93 	bl	dc6c4 <__aeabi_f2d>
   d499e:	4604      	mov	r4, r0
   d49a0:	4640      	mov	r0, r8
   d49a2:	460d      	mov	r5, r1
   d49a4:	f007 fe8e 	bl	dc6c4 <__aeabi_f2d>
   d49a8:	e03c      	b.n	d4a24 <_Z19get_compass_headingv+0x3b4>
   d49aa:	bf00      	nop
   d49ac:	f3af 8000 	nop.w
   d49b0:	9999999a 	.word	0x9999999a
   d49b4:	40239999 	.word	0x40239999
   d49b8:	54524550 	.word	0x54524550
   d49bc:	400921fb 	.word	0x400921fb
   d49c0:	66666666 	.word	0x66666666
   d49c4:	3fee6666 	.word	0x3fee6666
   d49c8:	9999999a 	.word	0x9999999a
   d49cc:	3fa99999 	.word	0x3fa99999
   d49d0:	51eb851f 	.word	0x51eb851f
   d49d4:	40191eb8 	.word	0x40191eb8
   d49d8:	2003e4b4 	.word	0x2003e4b4
   d49dc:	2003e568 	.word	0x2003e568
   d49e0:	43b40000 	.word	0x43b40000
   d49e4:	3fe00000 	.word	0x3fe00000
   d49e8:	40768000 	.word	0x40768000
   d49ec:	2003e54c 	.word	0x2003e54c
   d49f0:	2003e544 	.word	0x2003e544
   d49f4:	2003e560 	.word	0x2003e560
   d49f8:	2003e538 	.word	0x2003e538
   d49fc:	2003e52c 	.word	0x2003e52c
   d4a00:	408f4000 	.word	0x408f4000
   d4a04:	2003e558 	.word	0x2003e558
   d4a08:	2003e53c 	.word	0x2003e53c
   d4a0c:	2003e564 	.word	0x2003e564
   d4a10:	2003e548 	.word	0x2003e548
   d4a14:	2003e550 	.word	0x2003e550
   d4a18:	2003e56c 	.word	0x2003e56c
   d4a1c:	2003e540 	.word	0x2003e540
   d4a20:	2003e55c 	.word	0x2003e55c
   d4a24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d4a28:	f007 fea4 	bl	dc774 <__aeabi_dmul>
   d4a2c:	ec53 2b1a 	vmov	r2, r3, d10
   d4a30:	4680      	mov	r8, r0
   d4a32:	4689      	mov	r9, r1
   d4a34:	ec51 0b19 	vmov	r0, r1, d9
   d4a38:	f007 fe9c 	bl	dc774 <__aeabi_dmul>
   d4a3c:	4632      	mov	r2, r6
   d4a3e:	463b      	mov	r3, r7
   d4a40:	f007 fe98 	bl	dc774 <__aeabi_dmul>
   d4a44:	4602      	mov	r2, r0
   d4a46:	460b      	mov	r3, r1
   d4a48:	4640      	mov	r0, r8
   d4a4a:	4649      	mov	r1, r9
   d4a4c:	f007 fcda 	bl	dc404 <__aeabi_dsub>
   d4a50:	4622      	mov	r2, r4
   d4a52:	4680      	mov	r8, r0
   d4a54:	4689      	mov	r9, r1
   d4a56:	462b      	mov	r3, r5
   d4a58:	ec51 0b1b 	vmov	r0, r1, d11
   d4a5c:	f007 fe8a 	bl	dc774 <__aeabi_dmul>
   d4a60:	4632      	mov	r2, r6
   d4a62:	463b      	mov	r3, r7
   d4a64:	f007 fe86 	bl	dc774 <__aeabi_dmul>
   d4a68:	4602      	mov	r2, r0
   d4a6a:	460b      	mov	r3, r1
   d4a6c:	4640      	mov	r0, r8
   d4a6e:	4649      	mov	r1, r9
   d4a70:	f007 fcca 	bl	dc408 <__adddf3>
   d4a74:	f008 f976 	bl	dcd64 <__aeabi_d2f>
   d4a78:	4b93      	ldr	r3, [pc, #588]	; (d4cc8 <_Z19get_compass_headingv+0x658>)
Serial.print(",");
Serial.print(phiFnew);
Serial.print(",");
Serial.print(thetaG);
Serial.print(",");
Serial.print(phiG);
   d4a7a:	4f94      	ldr	r7, [pc, #592]	; (d4ccc <_Z19get_compass_headingv+0x65c>)
Xm=mag.x()*cos(thetaRad)-mag.y()*sin(phiRad)*sin(thetaRad)+mag.z()*cos(phiRad)*sin(thetaRad);
   d4a7c:	6018      	str	r0, [r3, #0]
   d4a7e:	ee08 0a10 	vmov	s16, r0
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
   d4a82:	4622      	mov	r2, r4
   d4a84:	462b      	mov	r3, r5
   d4a86:	ec51 0b19 	vmov	r0, r1, d9
   d4a8a:	f007 fe73 	bl	dc774 <__aeabi_dmul>
   d4a8e:	ec53 2b1b 	vmov	r2, r3, d11
   d4a92:	4604      	mov	r4, r0
   d4a94:	460d      	mov	r5, r1
   d4a96:	ec51 0b1a 	vmov	r0, r1, d10
   d4a9a:	f007 fe6b 	bl	dc774 <__aeabi_dmul>
   d4a9e:	4602      	mov	r2, r0
   d4aa0:	460b      	mov	r3, r1
   d4aa2:	4620      	mov	r0, r4
   d4aa4:	4629      	mov	r1, r5
   d4aa6:	f007 fcaf 	bl	dc408 <__adddf3>
   d4aaa:	f008 f95b 	bl	dcd64 <__aeabi_d2f>
   d4aae:	4b88      	ldr	r3, [pc, #544]	; (d4cd0 <_Z19get_compass_headingv+0x660>)
psi=atan2(Ym,Xm)/(2*3.14)*360;
   d4ab0:	4d88      	ldr	r5, [pc, #544]	; (d4cd4 <_Z19get_compass_headingv+0x664>)
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
   d4ab2:	6018      	str	r0, [r3, #0]
  { return __builtin_atan2f(__y, __x); }
   d4ab4:	eef0 0a48 	vmov.f32	s1, s16
   d4ab8:	ee00 0a10 	vmov	s0, r0
   d4abc:	f005 fa7a 	bl	d9fb4 <atan2f>
   d4ac0:	ee10 0a10 	vmov	r0, s0
psi=atan2(Ym,Xm)/(2*3.14)*360;
   d4ac4:	f007 fdfe 	bl	dc6c4 <__aeabi_f2d>
   d4ac8:	a37b      	add	r3, pc, #492	; (adr r3, d4cb8 <_Z19get_compass_headingv+0x648>)
   d4aca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ace:	f007 ff7b 	bl	dc9c8 <__aeabi_ddiv>
   d4ad2:	4b81      	ldr	r3, [pc, #516]	; (d4cd8 <_Z19get_compass_headingv+0x668>)
   d4ad4:	2200      	movs	r2, #0
   d4ad6:	f007 fe4d 	bl	dc774 <__aeabi_dmul>
   d4ada:	f008 f943 	bl	dcd64 <__aeabi_d2f>
   d4ade:	6028      	str	r0, [r5, #0]
Serial.print(acc.x()/9.8);
   d4ae0:	f004 fcd6 	bl	d9490 <_Z16_fetch_usbserialv>
   d4ae4:	a376      	add	r3, pc, #472	; (adr r3, d4cc0 <_Z19get_compass_headingv+0x650>)
   d4ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4aea:	4604      	mov	r4, r0
   d4aec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d4af0:	f007 ff6a 	bl	dc9c8 <__aeabi_ddiv>
   d4af4:	ec41 0b10 	vmov	d0, r0, r1
   d4af8:	4620      	mov	r0, r4
Serial.print(",");
   d4afa:	4c78      	ldr	r4, [pc, #480]	; (d4cdc <_Z19get_compass_headingv+0x66c>)
Serial.print(acc.x()/9.8);
   d4afc:	2102      	movs	r1, #2
   d4afe:	f003 ffee 	bl	d8ade <_ZN5Print5printEdi>
Serial.print(",");
   d4b02:	f004 fcc5 	bl	d9490 <_Z16_fetch_usbserialv>
   d4b06:	4621      	mov	r1, r4
   d4b08:	f003 fea0 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(acc.y()/9.8);
   d4b0c:	f004 fcc0 	bl	d9490 <_Z16_fetch_usbserialv>
   d4b10:	a36b      	add	r3, pc, #428	; (adr r3, d4cc0 <_Z19get_compass_headingv+0x650>)
   d4b12:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b16:	4606      	mov	r6, r0
   d4b18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d4b1c:	f007 ff54 	bl	dc9c8 <__aeabi_ddiv>
   d4b20:	ec41 0b10 	vmov	d0, r0, r1
   d4b24:	2102      	movs	r1, #2
   d4b26:	4630      	mov	r0, r6
   d4b28:	f003 ffd9 	bl	d8ade <_ZN5Print5printEdi>
Serial.print(",");
   d4b2c:	f004 fcb0 	bl	d9490 <_Z16_fetch_usbserialv>
   d4b30:	4621      	mov	r1, r4
   d4b32:	f003 fe8b 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(acc.z()/9.8);
   d4b36:	f004 fcab 	bl	d9490 <_Z16_fetch_usbserialv>
   d4b3a:	a361      	add	r3, pc, #388	; (adr r3, d4cc0 <_Z19get_compass_headingv+0x650>)
   d4b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b40:	4606      	mov	r6, r0
   d4b42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d4b46:	f007 ff3f 	bl	dc9c8 <__aeabi_ddiv>
   d4b4a:	ec41 0b10 	vmov	d0, r0, r1
   d4b4e:	2102      	movs	r1, #2
   d4b50:	4630      	mov	r0, r6
   d4b52:	f003 ffc4 	bl	d8ade <_ZN5Print5printEdi>
Serial.print(",");
   d4b56:	f004 fc9b 	bl	d9490 <_Z16_fetch_usbserialv>
   d4b5a:	4621      	mov	r1, r4
   d4b5c:	f003 fe76 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(accel);
   d4b60:	f004 fc96 	bl	d9490 <_Z16_fetch_usbserialv>
   d4b64:	220a      	movs	r2, #10
   d4b66:	f89d 100e 	ldrb.w	r1, [sp, #14]
Serial.print(thetaG);
   d4b6a:	4e5d      	ldr	r6, [pc, #372]	; (d4ce0 <_Z19get_compass_headingv+0x670>)
Serial.print(accel);
   d4b6c:	f7ff fd14 	bl	d4598 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d4b70:	f004 fc8e 	bl	d9490 <_Z16_fetch_usbserialv>
   d4b74:	4621      	mov	r1, r4
   d4b76:	f003 fe69 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(gyro);
   d4b7a:	f004 fc89 	bl	d9490 <_Z16_fetch_usbserialv>
   d4b7e:	220a      	movs	r2, #10
   d4b80:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d4b84:	f7ff fd08 	bl	d4598 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d4b88:	f004 fc82 	bl	d9490 <_Z16_fetch_usbserialv>
   d4b8c:	4621      	mov	r1, r4
   d4b8e:	f003 fe5d 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(mg);
   d4b92:	f004 fc7d 	bl	d9490 <_Z16_fetch_usbserialv>
   d4b96:	220a      	movs	r2, #10
   d4b98:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d4b9c:	f7ff fcfc 	bl	d4598 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d4ba0:	f004 fc76 	bl	d9490 <_Z16_fetch_usbserialv>
   d4ba4:	4621      	mov	r1, r4
   d4ba6:	f003 fe51 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(system);
   d4baa:	f004 fc71 	bl	d9490 <_Z16_fetch_usbserialv>
   d4bae:	220a      	movs	r2, #10
   d4bb0:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d4bb4:	f7ff fcf0 	bl	d4598 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d4bb8:	f004 fc6a 	bl	d9490 <_Z16_fetch_usbserialv>
   d4bbc:	4621      	mov	r1, r4
   d4bbe:	f003 fe45 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(thetaM);
   d4bc2:	f004 fc65 	bl	d9490 <_Z16_fetch_usbserialv>
   d4bc6:	4b47      	ldr	r3, [pc, #284]	; (d4ce4 <_Z19get_compass_headingv+0x674>)
   d4bc8:	2102      	movs	r1, #2
   d4bca:	ed93 0a00 	vldr	s0, [r3]
   d4bce:	f003 ff77 	bl	d8ac0 <_ZN5Print5printEfi>
Serial.print(",");
   d4bd2:	f004 fc5d 	bl	d9490 <_Z16_fetch_usbserialv>
   d4bd6:	4621      	mov	r1, r4
   d4bd8:	f003 fe38 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(phiM);
   d4bdc:	f004 fc58 	bl	d9490 <_Z16_fetch_usbserialv>
   d4be0:	4a41      	ldr	r2, [pc, #260]	; (d4ce8 <_Z19get_compass_headingv+0x678>)
   d4be2:	2102      	movs	r1, #2
   d4be4:	ed92 0a00 	vldr	s0, [r2]
   d4be8:	f003 ff6a 	bl	d8ac0 <_ZN5Print5printEfi>
Serial.print(",");
   d4bec:	f004 fc50 	bl	d9490 <_Z16_fetch_usbserialv>
   d4bf0:	4621      	mov	r1, r4
   d4bf2:	f003 fe2b 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(thetaFnew);
   d4bf6:	f004 fc4b 	bl	d9490 <_Z16_fetch_usbserialv>
   d4bfa:	ed9a 0a00 	vldr	s0, [sl]
   d4bfe:	2102      	movs	r1, #2
   d4c00:	f003 ff5e 	bl	d8ac0 <_ZN5Print5printEfi>
Serial.print(",");
   d4c04:	f004 fc44 	bl	d9490 <_Z16_fetch_usbserialv>
   d4c08:	4621      	mov	r1, r4
   d4c0a:	f003 fe1f 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(phiFnew);
   d4c0e:	f004 fc3f 	bl	d9490 <_Z16_fetch_usbserialv>
   d4c12:	ed9b 0a00 	vldr	s0, [fp]
   d4c16:	2102      	movs	r1, #2
   d4c18:	f003 ff52 	bl	d8ac0 <_ZN5Print5printEfi>
Serial.print(",");
   d4c1c:	f004 fc38 	bl	d9490 <_Z16_fetch_usbserialv>
   d4c20:	4621      	mov	r1, r4
   d4c22:	f003 fe13 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(thetaG);
   d4c26:	f004 fc33 	bl	d9490 <_Z16_fetch_usbserialv>
   d4c2a:	ed96 0a00 	vldr	s0, [r6]
   d4c2e:	2102      	movs	r1, #2
   d4c30:	f003 ff46 	bl	d8ac0 <_ZN5Print5printEfi>
Serial.print(",");
   d4c34:	f004 fc2c 	bl	d9490 <_Z16_fetch_usbserialv>
   d4c38:	4621      	mov	r1, r4
   d4c3a:	f003 fe07 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(phiG);
   d4c3e:	f004 fc27 	bl	d9490 <_Z16_fetch_usbserialv>
   d4c42:	ed97 0a00 	vldr	s0, [r7]
   d4c46:	2102      	movs	r1, #2
   d4c48:	f003 ff3a 	bl	d8ac0 <_ZN5Print5printEfi>
Serial.print(",");
   d4c4c:	f004 fc20 	bl	d9490 <_Z16_fetch_usbserialv>
   d4c50:	4621      	mov	r1, r4
   d4c52:	f003 fdfb 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(theta);
   d4c56:	f004 fc1b 	bl	d9490 <_Z16_fetch_usbserialv>
   d4c5a:	4b24      	ldr	r3, [pc, #144]	; (d4cec <_Z19get_compass_headingv+0x67c>)
   d4c5c:	2102      	movs	r1, #2
   d4c5e:	ed93 0a00 	vldr	s0, [r3]
   d4c62:	f003 ff2d 	bl	d8ac0 <_ZN5Print5printEfi>
Serial.print(",");
   d4c66:	f004 fc13 	bl	d9490 <_Z16_fetch_usbserialv>
   d4c6a:	4621      	mov	r1, r4
   d4c6c:	f003 fdee 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(phi);
   d4c70:	f004 fc0e 	bl	d9490 <_Z16_fetch_usbserialv>
   d4c74:	4b1e      	ldr	r3, [pc, #120]	; (d4cf0 <_Z19get_compass_headingv+0x680>)
   d4c76:	2102      	movs	r1, #2
   d4c78:	ed93 0a00 	vldr	s0, [r3]
   d4c7c:	f003 ff20 	bl	d8ac0 <_ZN5Print5printEfi>
Serial.print(",");
   d4c80:	f004 fc06 	bl	d9490 <_Z16_fetch_usbserialv>
   d4c84:	4621      	mov	r1, r4
   d4c86:	f003 fde1 	bl	d884c <_ZN5Print5printEPKc>
Serial.println(psi);
   d4c8a:	f004 fc01 	bl	d9490 <_Z16_fetch_usbserialv>
   d4c8e:	ed95 0a00 	vldr	s0, [r5]
   d4c92:	2102      	movs	r1, #2
   d4c94:	f003 ff31 	bl	d8afa <_ZN5Print7printlnEfi>
 
phiFold=phiFnew;
   d4c98:	4916      	ldr	r1, [pc, #88]	; (d4cf4 <_Z19get_compass_headingv+0x684>)
   d4c9a:	f8db 3000 	ldr.w	r3, [fp]
thetaFold=thetaFnew;
   d4c9e:	4816      	ldr	r0, [pc, #88]	; (d4cf8 <_Z19get_compass_headingv+0x688>)
 
 return(psi);
//delay(BNO055_SAMPLERATE_DELAY_MS);
   d4ca0:	ed95 0a00 	vldr	s0, [r5]
phiFold=phiFnew;
   d4ca4:	600b      	str	r3, [r1, #0]
thetaFold=thetaFnew;
   d4ca6:	f8da 3000 	ldr.w	r3, [sl]
   d4caa:	6003      	str	r3, [r0, #0]
   d4cac:	b017      	add	sp, #92	; 0x5c
   d4cae:	ecbd 8b08 	vpop	{d8-d11}
   d4cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4cb6:	bf00      	nop
   d4cb8:	51eb851f 	.word	0x51eb851f
   d4cbc:	40191eb8 	.word	0x40191eb8
   d4cc0:	9999999a 	.word	0x9999999a
   d4cc4:	40239999 	.word	0x40239999
   d4cc8:	2003e464 	.word	0x2003e464
   d4ccc:	2003e548 	.word	0x2003e548
   d4cd0:	2003e468 	.word	0x2003e468
   d4cd4:	2003e554 	.word	0x2003e554
   d4cd8:	40768000 	.word	0x40768000
   d4cdc:	000dd70c 	.word	0x000dd70c
   d4ce0:	2003e564 	.word	0x2003e564
   d4ce4:	2003e568 	.word	0x2003e568
   d4ce8:	2003e54c 	.word	0x2003e54c
   d4cec:	2003e558 	.word	0x2003e558
   d4cf0:	2003e53c 	.word	0x2003e53c
   d4cf4:	2003e544 	.word	0x2003e544
   d4cf8:	2003e560 	.word	0x2003e560

000d4cfc <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d4cfc:	b538      	push	{r3, r4, r5, lr}
   d4cfe:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d4d00:	f7ff fc4a 	bl	d4598 <_ZN5Print5printIhLi0EEEjT_i>
   d4d04:	4604      	mov	r4, r0
        n += println();
   d4d06:	4628      	mov	r0, r5
   d4d08:	f003 fdab 	bl	d8862 <_ZN5Print7printlnEv>
    }
   d4d0c:	4420      	add	r0, r4
   d4d0e:	bd38      	pop	{r3, r4, r5, pc}

000d4d10 <_Z19displaySensorStatusv>:
{
   d4d10:	b513      	push	{r0, r1, r4, lr}
    system_status = self_test_results = system_error = 0;
   d4d12:	2300      	movs	r3, #0
    Serial.println("");
   d4d14:	4c21      	ldr	r4, [pc, #132]	; (d4d9c <_Z19displaySensorStatusv+0x8c>)
    system_status = self_test_results = system_error = 0;
   d4d16:	f88d 3007 	strb.w	r3, [sp, #7]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   d4d1a:	f10d 0206 	add.w	r2, sp, #6
   d4d1e:	f10d 0105 	add.w	r1, sp, #5
    system_status = self_test_results = system_error = 0;
   d4d22:	f88d 3006 	strb.w	r3, [sp, #6]
   d4d26:	f88d 3005 	strb.w	r3, [sp, #5]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   d4d2a:	481d      	ldr	r0, [pc, #116]	; (d4da0 <_Z19displaySensorStatusv+0x90>)
   d4d2c:	f10d 0307 	add.w	r3, sp, #7
   d4d30:	f001 fecb 	bl	d6aca <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>
    Serial.println("");
   d4d34:	f004 fbac 	bl	d9490 <_Z16_fetch_usbserialv>
   d4d38:	4621      	mov	r1, r4
   d4d3a:	f003 fd9e 	bl	d887a <_ZN5Print7printlnEPKc>
    Serial.print("System Status: 0x");
   d4d3e:	f004 fba7 	bl	d9490 <_Z16_fetch_usbserialv>
   d4d42:	4918      	ldr	r1, [pc, #96]	; (d4da4 <_Z19displaySensorStatusv+0x94>)
   d4d44:	f003 fd82 	bl	d884c <_ZN5Print5printEPKc>
    Serial.println(system_status, HEX);
   d4d48:	f004 fba2 	bl	d9490 <_Z16_fetch_usbserialv>
   d4d4c:	2210      	movs	r2, #16
   d4d4e:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d4d52:	f7ff ffd3 	bl	d4cfc <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("Self Test:     0x");
   d4d56:	f004 fb9b 	bl	d9490 <_Z16_fetch_usbserialv>
   d4d5a:	4913      	ldr	r1, [pc, #76]	; (d4da8 <_Z19displaySensorStatusv+0x98>)
   d4d5c:	f003 fd76 	bl	d884c <_ZN5Print5printEPKc>
    Serial.println(self_test_results, HEX);
   d4d60:	f004 fb96 	bl	d9490 <_Z16_fetch_usbserialv>
   d4d64:	2210      	movs	r2, #16
   d4d66:	f89d 1006 	ldrb.w	r1, [sp, #6]
   d4d6a:	f7ff ffc7 	bl	d4cfc <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("System Error:  0x");
   d4d6e:	f004 fb8f 	bl	d9490 <_Z16_fetch_usbserialv>
   d4d72:	490e      	ldr	r1, [pc, #56]	; (d4dac <_Z19displaySensorStatusv+0x9c>)
   d4d74:	f003 fd6a 	bl	d884c <_ZN5Print5printEPKc>
    Serial.println(system_error, HEX);
   d4d78:	f004 fb8a 	bl	d9490 <_Z16_fetch_usbserialv>
   d4d7c:	2210      	movs	r2, #16
   d4d7e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d4d82:	f7ff ffbb 	bl	d4cfc <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.println("");
   d4d86:	f004 fb83 	bl	d9490 <_Z16_fetch_usbserialv>
   d4d8a:	4621      	mov	r1, r4
   d4d8c:	f003 fd75 	bl	d887a <_ZN5Print7printlnEPKc>
    delay(500);
   d4d90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4d94:	f003 ff4a 	bl	d8c2c <delay>
}
   d4d98:	b002      	add	sp, #8
   d4d9a:	bd10      	pop	{r4, pc}
   d4d9c:	000dd77f 	.word	0x000dd77f
   d4da0:	2003e4b4 	.word	0x2003e4b4
   d4da4:	000dd70e 	.word	0x000dd70e
   d4da8:	000dd720 	.word	0x000dd720
   d4dac:	000dd732 	.word	0x000dd732

000d4db0 <_GLOBAL__sub_I_i2ceeprom>:
   d4db0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4db2:	4b11      	ldr	r3, [pc, #68]	; (d4df8 <_GLOBAL__sub_I_i2ceeprom+0x48>)
Adafruit_EEPROM_I2C i2ceeprom;
   d4db4:	4811      	ldr	r0, [pc, #68]	; (d4dfc <_GLOBAL__sub_I_i2ceeprom+0x4c>)
   d4db6:	2200      	movs	r2, #0
   d4db8:	701a      	strb	r2, [r3, #0]
   d4dba:	f002 ff9b 	bl	d7cf4 <_ZN19Adafruit_EEPROM_I2CC1Ev>
Adafruit_BME280 bme; // I2C
   d4dbe:	4810      	ldr	r0, [pc, #64]	; (d4e00 <_GLOBAL__sub_I_i2ceeprom+0x50>)
   d4dc0:	f000 feaa 	bl	d5b18 <_ZN15Adafruit_BME280C1Ev>
Adafruit_SH1107 display = Adafruit_SH1107(64, 128, &Wire);
   d4dc4:	f004 fe80 	bl	d9ac8 <_Z19__fetch_global_Wirev>
   d4dc8:	4a0e      	ldr	r2, [pc, #56]	; (d4e04 <_GLOBAL__sub_I_i2ceeprom+0x54>)
   d4dca:	490f      	ldr	r1, [pc, #60]	; (d4e08 <_GLOBAL__sub_I_i2ceeprom+0x58>)
   d4dcc:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4dd0:	f04f 32ff 	mov.w	r2, #4294967295
   d4dd4:	4603      	mov	r3, r0
   d4dd6:	9200      	str	r2, [sp, #0]
   d4dd8:	2140      	movs	r1, #64	; 0x40
   d4dda:	2280      	movs	r2, #128	; 0x80
   d4ddc:	480b      	ldr	r0, [pc, #44]	; (d4e0c <_GLOBAL__sub_I_i2ceeprom+0x5c>)
   d4dde:	f002 ff03 	bl	d7be8 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d4de2:	f004 fe71 	bl	d9ac8 <_Z19__fetch_global_Wirev>
   d4de6:	4603      	mov	r3, r0
   d4de8:	4809      	ldr	r0, [pc, #36]	; (d4e10 <_GLOBAL__sub_I_i2ceeprom+0x60>)
   d4dea:	2228      	movs	r2, #40	; 0x28
   d4dec:	2137      	movs	r1, #55	; 0x37
   d4dee:	b005      	add	sp, #20
   d4df0:	f85d eb04 	ldr.w	lr, [sp], #4
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d4df4:	f001 bd32 	b.w	d685c <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
   d4df8:	2003e46c 	.word	0x2003e46c
   d4dfc:	2003e530 	.word	0x2003e530
   d4e00:	2003e470 	.word	0x2003e470
   d4e04:	00061a80 	.word	0x00061a80
   d4e08:	000186a0 	.word	0x000186a0
   d4e0c:	2003e4d4 	.word	0x2003e4d4
   d4e10:	2003e4b4 	.word	0x2003e4b4

000d4e14 <_Z13displayValuesv>:
void displayValues() {
   d4e14:	b538      	push	{r3, r4, r5, lr}
    display.clearDisplay();
   d4e16:	4c3d      	ldr	r4, [pc, #244]	; (d4f0c <_Z13displayValuesv+0xf8>)
    display.print(bme.readTemperature()*1.8F + 32.);
   d4e18:	4d3d      	ldr	r5, [pc, #244]	; (d4f10 <_Z13displayValuesv+0xfc>)
    display.clearDisplay();
   d4e1a:	4620      	mov	r0, r4
   d4e1c:	f002 f98e 	bl	d713c <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d4e20:	4620      	mov	r0, r4
   d4e22:	f002 fdfe 	bl	d7a22 <_ZN15Adafruit_SH110X7displayEv>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
   d4e26:	2300      	movs	r3, #0
    display.print("Temp. = ");
   d4e28:	493a      	ldr	r1, [pc, #232]	; (d4f14 <_Z13displayValuesv+0x100>)
   d4e2a:	6123      	str	r3, [r4, #16]
   d4e2c:	4620      	mov	r0, r4
   d4e2e:	f003 fd0d 	bl	d884c <_ZN5Print5printEPKc>
    display.print(bme.readTemperature()*1.8F + 32.);
   d4e32:	4628      	mov	r0, r5
   d4e34:	f000 ff44 	bl	d5cc0 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4e38:	eddf 7a37 	vldr	s15, [pc, #220]	; d4f18 <_Z13displayValuesv+0x104>
   d4e3c:	ee60 7a27 	vmul.f32	s15, s0, s15
   d4e40:	ee17 0a90 	vmov	r0, s15
   d4e44:	f007 fc3e 	bl	dc6c4 <__aeabi_f2d>
   d4e48:	4b34      	ldr	r3, [pc, #208]	; (d4f1c <_Z13displayValuesv+0x108>)
   d4e4a:	2200      	movs	r2, #0
   d4e4c:	f007 fadc 	bl	dc408 <__adddf3>
   d4e50:	ec41 0b10 	vmov	d0, r0, r1
   d4e54:	2102      	movs	r1, #2
   d4e56:	4620      	mov	r0, r4
   d4e58:	f003 fe41 	bl	d8ade <_ZN5Print5printEdi>
    display.println(" °F");
   d4e5c:	4930      	ldr	r1, [pc, #192]	; (d4f20 <_Z13displayValuesv+0x10c>)
   d4e5e:	4620      	mov	r0, r4
   d4e60:	f003 fd0b 	bl	d887a <_ZN5Print7printlnEPKc>
    display.print("Press. = ");
   d4e64:	492f      	ldr	r1, [pc, #188]	; (d4f24 <_Z13displayValuesv+0x110>)
   d4e66:	4620      	mov	r0, r4
   d4e68:	f003 fcf0 	bl	d884c <_ZN5Print5printEPKc>
    display.print(bme.readPressure() / 101325.0F * 760.0F);
   d4e6c:	4628      	mov	r0, r5
   d4e6e:	f000 ff55 	bl	d5d1c <_ZN15Adafruit_BME28012readPressureEv>
   d4e72:	eddf 7a2d 	vldr	s15, [pc, #180]	; d4f28 <_Z13displayValuesv+0x114>
   d4e76:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d4e7a:	2102      	movs	r1, #2
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; d4f2c <_Z13displayValuesv+0x118>
   d4e82:	ee27 0a00 	vmul.f32	s0, s14, s0
   d4e86:	f003 fe1b 	bl	d8ac0 <_ZN5Print5printEfi>
    display.println(" mmHg");
   d4e8a:	4929      	ldr	r1, [pc, #164]	; (d4f30 <_Z13displayValuesv+0x11c>)
   d4e8c:	4620      	mov	r0, r4
   d4e8e:	f003 fcf4 	bl	d887a <_ZN5Print7printlnEPKc>
    display.print("Altitude = ");
   d4e92:	4928      	ldr	r1, [pc, #160]	; (d4f34 <_Z13displayValuesv+0x120>)
   d4e94:	4620      	mov	r0, r4
   d4e96:	f003 fcd9 	bl	d884c <_ZN5Print5printEPKc>
    display.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d4e9a:	4628      	mov	r0, r5
   d4e9c:	ed9f 0a26 	vldr	s0, [pc, #152]	; d4f38 <_Z13displayValuesv+0x124>
   d4ea0:	f001 f816 	bl	d5ed0 <_ZN15Adafruit_BME28012readAltitudeEf>
   d4ea4:	2102      	movs	r1, #2
   d4ea6:	4620      	mov	r0, r4
   d4ea8:	f003 fe0a 	bl	d8ac0 <_ZN5Print5printEfi>
    display.println(" m");
   d4eac:	4923      	ldr	r1, [pc, #140]	; (d4f3c <_Z13displayValuesv+0x128>)
   d4eae:	4620      	mov	r0, r4
   d4eb0:	f003 fce3 	bl	d887a <_ZN5Print7printlnEPKc>
    display.print("Humidity = ");
   d4eb4:	4922      	ldr	r1, [pc, #136]	; (d4f40 <_Z13displayValuesv+0x12c>)
   d4eb6:	4620      	mov	r0, r4
   d4eb8:	f003 fcc8 	bl	d884c <_ZN5Print5printEPKc>
    display.print(bme.readHumidity());
   d4ebc:	4628      	mov	r0, r5
   d4ebe:	f001 f8a7 	bl	d6010 <_ZN15Adafruit_BME28012readHumidityEv>
   d4ec2:	2102      	movs	r1, #2
   d4ec4:	4620      	mov	r0, r4
   d4ec6:	f003 fdfb 	bl	d8ac0 <_ZN5Print5printEfi>
    display.println(" %");
   d4eca:	491e      	ldr	r1, [pc, #120]	; (d4f44 <_Z13displayValuesv+0x130>)
   d4ecc:	4620      	mov	r0, r4
   d4ece:	f003 fcd4 	bl	d887a <_ZN5Print7printlnEPKc>
    Serial.println();
   d4ed2:	f004 fadd 	bl	d9490 <_Z16_fetch_usbserialv>
   d4ed6:	f003 fcc4 	bl	d8862 <_ZN5Print7printlnEv>
    display.println("Marrie is great!");
   d4eda:	491b      	ldr	r1, [pc, #108]	; (d4f48 <_Z13displayValuesv+0x134>)
   d4edc:	4620      	mov	r0, r4
   d4ede:	f003 fccc 	bl	d887a <_ZN5Print7printlnEPKc>
    Serial.println();
   d4ee2:	f004 fad5 	bl	d9490 <_Z16_fetch_usbserialv>
   d4ee6:	f003 fcbc 	bl	d8862 <_ZN5Print7printlnEv>
    display.print("Compass heading");
   d4eea:	4918      	ldr	r1, [pc, #96]	; (d4f4c <_Z13displayValuesv+0x138>)
   d4eec:	4620      	mov	r0, r4
   d4eee:	f003 fcad 	bl	d884c <_ZN5Print5printEPKc>
    display.print(compass_heading);
   d4ef2:	4b17      	ldr	r3, [pc, #92]	; (d4f50 <_Z13displayValuesv+0x13c>)
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	ed93 0a00 	vldr	s0, [r3]
   d4efa:	2102      	movs	r1, #2
   d4efc:	f003 fde0 	bl	d8ac0 <_ZN5Print5printEfi>
  display.display(); // actually display all of the above
   d4f00:	4620      	mov	r0, r4
  }
   d4f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.display(); // actually display all of the above
   d4f06:	f002 bd8c 	b.w	d7a22 <_ZN15Adafruit_SH110X7displayEv>
   d4f0a:	bf00      	nop
   d4f0c:	2003e4d4 	.word	0x2003e4d4
   d4f10:	2003e470 	.word	0x2003e470
   d4f14:	000dd744 	.word	0x000dd744
   d4f18:	3fe66666 	.word	0x3fe66666
   d4f1c:	40400000 	.word	0x40400000
   d4f20:	000dd74d 	.word	0x000dd74d
   d4f24:	000dd752 	.word	0x000dd752
   d4f28:	47c5e680 	.word	0x47c5e680
   d4f2c:	443e0000 	.word	0x443e0000
   d4f30:	000dd5e4 	.word	0x000dd5e4
   d4f34:	000dd5f2 	.word	0x000dd5f2
   d4f38:	447d5000 	.word	0x447d5000
   d4f3c:	000dd5fe 	.word	0x000dd5fe
   d4f40:	000dd601 	.word	0x000dd601
   d4f44:	000dd60d 	.word	0x000dd60d
   d4f48:	000dd75c 	.word	0x000dd75c
   d4f4c:	000dd76d 	.word	0x000dd76d
   d4f50:	2003e4cc 	.word	0x2003e4cc
   d4f54:	00000000 	.word	0x00000000

000d4f58 <loop>:
void loop(void) {
   d4f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4f5c:	ed2d 8b02 	vpush	{d8}
digitalWrite(vane_switch, HIGH);
   d4f60:	4bcf      	ldr	r3, [pc, #828]	; (d52a0 <loop+0x348>)
VaneValue = analogRead(vane_pin);
   d4f62:	4dd0      	ldr	r5, [pc, #832]	; (d52a4 <loop+0x34c>)
digitalWrite(vane_switch, HIGH);
   d4f64:	7818      	ldrb	r0, [r3, #0]
   d4f66:	4cd0      	ldr	r4, [pc, #832]	; (d52a8 <loop+0x350>)
if ((millis() - wind_speed_time) > wind_speed_time_interval) {
   d4f68:	4ed0      	ldr	r6, [pc, #832]	; (d52ac <loop+0x354>)
void loop(void) {
   d4f6a:	b09e      	sub	sp, #120	; 0x78
digitalWrite(vane_switch, HIGH);
   d4f6c:	2101      	movs	r1, #1
   d4f6e:	f004 fd38 	bl	d99e2 <digitalWrite>
VaneValue = analogRead(vane_pin);
   d4f72:	4bcf      	ldr	r3, [pc, #828]	; (d52b0 <loop+0x358>)
   d4f74:	7818      	ldrb	r0, [r3, #0]
   d4f76:	f004 fd60 	bl	d9a3a <analogRead>
Direction = map(VaneValue, 0, 4095, 0, 360);
   d4f7a:	f44f 73b4 	mov.w	r3, #360	; 0x168
VaneValue = analogRead(vane_pin);
   d4f7e:	6028      	str	r0, [r5, #0]
Direction = map(VaneValue, 0, 4095, 0, 360);
   d4f80:	9300      	str	r3, [sp, #0]
   d4f82:	2300      	movs	r3, #0
   d4f84:	4619      	mov	r1, r3
   d4f86:	f640 72ff 	movw	r2, #4095	; 0xfff
   d4f8a:	f003 fe43 	bl	d8c14 <_Z3mapiiiii>
   d4f8e:	4bc9      	ldr	r3, [pc, #804]	; (d52b4 <loop+0x35c>)
if(CalDirection > 360)
   d4f90:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
Direction = map(VaneValue, 0, 4095, 0, 360);
   d4f94:	6018      	str	r0, [r3, #0]
CalDirection = CalDirection - 360;
   d4f96:	bfc8      	it	gt
   d4f98:	f5a0 70b4 	subgt.w	r0, r0, #360	; 0x168
   d4f9c:	6020      	str	r0, [r4, #0]
if(CalDirection < 0)
   d4f9e:	6823      	ldr	r3, [r4, #0]
   d4fa0:	2b00      	cmp	r3, #0
CalDirection = CalDirection + 360;
   d4fa2:	bfbc      	itt	lt
   d4fa4:	f503 73b4 	addlt.w	r3, r3, #360	; 0x168
   d4fa8:	6023      	strlt	r3, [r4, #0]
   d4faa:	f002 ff53 	bl	d7e54 <HAL_Timer_Get_Milli_Seconds>
if ((millis() - wind_speed_time) > wind_speed_time_interval) {
   d4fae:	6833      	ldr	r3, [r6, #0]
   d4fb0:	1ac0      	subs	r0, r0, r3
   d4fb2:	4bc1      	ldr	r3, [pc, #772]	; (d52b8 <loop+0x360>)
   d4fb4:	881b      	ldrh	r3, [r3, #0]
   d4fb6:	4298      	cmp	r0, r3
   d4fb8:	d963      	bls.n	d5082 <loop+0x12a>
  if(abs(CalDirection - LastValue) > 5)
   d4fba:	4fc0      	ldr	r7, [pc, #768]	; (d52bc <loop+0x364>)
   d4fbc:	6823      	ldr	r3, [r4, #0]
   d4fbe:	683a      	ldr	r2, [r7, #0]
   d4fc0:	1a9b      	subs	r3, r3, r2
   d4fc2:	2b00      	cmp	r3, #0
   d4fc4:	bfb8      	it	lt
   d4fc6:	425b      	neglt	r3, r3
   d4fc8:	2b05      	cmp	r3, #5
   d4fca:	dd2c      	ble.n	d5026 <loop+0xce>
  Serial.print(VaneValue); Serial.print("\t\t");
   d4fcc:	f004 fa60 	bl	d9490 <_Z16_fetch_usbserialv>
   d4fd0:	682d      	ldr	r5, [r5, #0]
        if (n < 0 && base == 10) {
   d4fd2:	2d00      	cmp	r5, #0
   d4fd4:	4680      	mov	r8, r0
   d4fd6:	f280 8255 	bge.w	d5484 <loop+0x52c>
            t = print('-');
   d4fda:	212d      	movs	r1, #45	; 0x2d
   d4fdc:	f003 fc3a 	bl	d8854 <_ZN5Print5printEc>
            val = -n;
   d4fe0:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d4fe2:	220a      	movs	r2, #10
   d4fe4:	4640      	mov	r0, r8
   d4fe6:	f003 fc54 	bl	d8892 <_ZN5Print11printNumberEmh>
   d4fea:	f004 fa51 	bl	d9490 <_Z16_fetch_usbserialv>
   d4fee:	49b4      	ldr	r1, [pc, #720]	; (d52c0 <loop+0x368>)
   d4ff0:	f003 fc2c 	bl	d884c <_ZN5Print5printEPKc>
  Serial.print(CalDirection); Serial.print("\t\t");
   d4ff4:	f004 fa4c 	bl	d9490 <_Z16_fetch_usbserialv>
   d4ff8:	6825      	ldr	r5, [r4, #0]
        if (n < 0 && base == 10) {
   d4ffa:	2d00      	cmp	r5, #0
   d4ffc:	4680      	mov	r8, r0
   d4ffe:	f280 8243 	bge.w	d5488 <loop+0x530>
            t = print('-');
   d5002:	212d      	movs	r1, #45	; 0x2d
   d5004:	f003 fc26 	bl	d8854 <_ZN5Print5printEc>
            val = -n;
   d5008:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d500a:	220a      	movs	r2, #10
   d500c:	4640      	mov	r0, r8
   d500e:	f003 fc40 	bl	d8892 <_ZN5Print11printNumberEmh>
   d5012:	f004 fa3d 	bl	d9490 <_Z16_fetch_usbserialv>
   d5016:	49aa      	ldr	r1, [pc, #680]	; (d52c0 <loop+0x368>)
   d5018:	f003 fc18 	bl	d884c <_ZN5Print5printEPKc>
  getHeading(CalDirection);
   d501c:	6820      	ldr	r0, [r4, #0]
   d501e:	f7ff fa75 	bl	d450c <_Z10getHeadingi>
  LastValue = CalDirection;
   d5022:	6823      	ldr	r3, [r4, #0]
   d5024:	603b      	str	r3, [r7, #0]
WindSpeed = Rotations * .45;
   d5026:	4ca7      	ldr	r4, [pc, #668]	; (d52c4 <loop+0x36c>)
   d5028:	4da7      	ldr	r5, [pc, #668]	; (d52c8 <loop+0x370>)
   d502a:	6820      	ldr	r0, [r4, #0]
   d502c:	f007 fb28 	bl	dc680 <__aeabi_ui2d>
   d5030:	a399      	add	r3, pc, #612	; (adr r3, d5298 <loop+0x340>)
   d5032:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5036:	f007 fb9d 	bl	dc774 <__aeabi_dmul>
   d503a:	f007 fe93 	bl	dcd64 <__aeabi_d2f>
   d503e:	6028      	str	r0, [r5, #0]
Serial.print(Rotations); Serial.print("\t\t");
   d5040:	f004 fa26 	bl	d9490 <_Z16_fetch_usbserialv>
   d5044:	220a      	movs	r2, #10
   d5046:	6821      	ldr	r1, [r4, #0]
   d5048:	f003 fc23 	bl	d8892 <_ZN5Print11printNumberEmh>
   d504c:	f004 fa20 	bl	d9490 <_Z16_fetch_usbserialv>
   d5050:	499b      	ldr	r1, [pc, #620]	; (d52c0 <loop+0x368>)
   d5052:	f003 fbfb 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(WindSpeed); Serial.print("\t\t");  Serial.println(" mph");
   d5056:	f004 fa1b 	bl	d9490 <_Z16_fetch_usbserialv>
   d505a:	ed95 0a00 	vldr	s0, [r5]
   d505e:	2102      	movs	r1, #2
   d5060:	f003 fd2e 	bl	d8ac0 <_ZN5Print5printEfi>
   d5064:	f004 fa14 	bl	d9490 <_Z16_fetch_usbserialv>
   d5068:	4995      	ldr	r1, [pc, #596]	; (d52c0 <loop+0x368>)
   d506a:	f003 fbef 	bl	d884c <_ZN5Print5printEPKc>
   d506e:	f004 fa0f 	bl	d9490 <_Z16_fetch_usbserialv>
   d5072:	4996      	ldr	r1, [pc, #600]	; (d52cc <loop+0x374>)
   d5074:	f003 fc01 	bl	d887a <_ZN5Print7printlnEPKc>
   d5078:	f002 feec 	bl	d7e54 <HAL_Timer_Get_Milli_Seconds>
Rotations = 0;  // Set Rotations count to 0 ready for calculations
   d507c:	2300      	movs	r3, #0
wind_speed_time = millis();
   d507e:	6030      	str	r0, [r6, #0]
Rotations = 0;  // Set Rotations count to 0 ready for calculations
   d5080:	6023      	str	r3, [r4, #0]
  bno.getEvent(&event);
   d5082:	a915      	add	r1, sp, #84	; 0x54
   d5084:	4892      	ldr	r0, [pc, #584]	; (d52d0 <loop+0x378>)
   d5086:	f001 ff0b 	bl	d6ea0 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
printValues();
   d508a:	f7ff f87b 	bl	d4184 <_Z11printValuesv>
  displayValues();
   d508e:	f7ff fec1 	bl	d4e14 <_Z13displayValuesv>
  delay(delayTime);
   d5092:	4b90      	ldr	r3, [pc, #576]	; (d52d4 <loop+0x37c>)
   d5094:	6818      	ldr	r0, [r3, #0]
   d5096:	f003 fdc9 	bl	d8c2c <delay>
  if(!digitalRead(BUTTON_A)) display.print("A");
   d509a:	2004      	movs	r0, #4
   d509c:	f004 fcba 	bl	d9a14 <digitalRead>
   d50a0:	b918      	cbnz	r0, d50aa <loop+0x152>
   d50a2:	498d      	ldr	r1, [pc, #564]	; (d52d8 <loop+0x380>)
   d50a4:	488d      	ldr	r0, [pc, #564]	; (d52dc <loop+0x384>)
   d50a6:	f003 fbd1 	bl	d884c <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_B)) display.print("B");
   d50aa:	2003      	movs	r0, #3
   d50ac:	f004 fcb2 	bl	d9a14 <digitalRead>
   d50b0:	b918      	cbnz	r0, d50ba <loop+0x162>
   d50b2:	498b      	ldr	r1, [pc, #556]	; (d52e0 <loop+0x388>)
   d50b4:	4889      	ldr	r0, [pc, #548]	; (d52dc <loop+0x384>)
   d50b6:	f003 fbc9 	bl	d884c <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_C)) display.print("C");
   d50ba:	2002      	movs	r0, #2
   d50bc:	f004 fcaa 	bl	d9a14 <digitalRead>
   d50c0:	b918      	cbnz	r0, d50ca <loop+0x172>
   d50c2:	4988      	ldr	r1, [pc, #544]	; (d52e4 <loop+0x38c>)
   d50c4:	4885      	ldr	r0, [pc, #532]	; (d52dc <loop+0x384>)
   d50c6:	f003 fbc1 	bl	d884c <_ZN5Print5printEPKc>
  delay(10);
   d50ca:	200a      	movs	r0, #10
   d50cc:	f003 fdae 	bl	d8c2c <delay>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d50d0:	f002 fef0 	bl	d7eb4 <os_thread_yield>
  display.display();
   d50d4:	4881      	ldr	r0, [pc, #516]	; (d52dc <loop+0x384>)
  Serial.print(360 - (float)event.orientation.x);
   d50d6:	ed9f 8a84 	vldr	s16, [pc, #528]	; d52e8 <loop+0x390>
  display.display();
   d50da:	f002 fca2 	bl	d7a22 <_ZN15Adafruit_SH110X7displayEv>
  Serial.print(F("Orientation: "));
   d50de:	f004 f9d7 	bl	d9490 <_Z16_fetch_usbserialv>
   d50e2:	4982      	ldr	r1, [pc, #520]	; (d52ec <loop+0x394>)
   d50e4:	f003 fbb9 	bl	d885a <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(360 - (float)event.orientation.x);
   d50e8:	f004 f9d2 	bl	d9490 <_Z16_fetch_usbserialv>
   d50ec:	ed9d 0a1a 	vldr	s0, [sp, #104]	; 0x68
   d50f0:	2102      	movs	r1, #2
   d50f2:	ee38 0a40 	vsub.f32	s0, s16, s0
   d50f6:	f003 fce3 	bl	d8ac0 <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d50fa:	f004 f9c9 	bl	d9490 <_Z16_fetch_usbserialv>
   d50fe:	497c      	ldr	r1, [pc, #496]	; (d52f0 <loop+0x398>)
   d5100:	f003 fbab 	bl	d885a <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.y);
   d5104:	f004 f9c4 	bl	d9490 <_Z16_fetch_usbserialv>
   d5108:	ed9d 0a1b 	vldr	s0, [sp, #108]	; 0x6c
   d510c:	2102      	movs	r1, #2
   d510e:	f003 fcd7 	bl	d8ac0 <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d5112:	f004 f9bd 	bl	d9490 <_Z16_fetch_usbserialv>
   d5116:	4976      	ldr	r1, [pc, #472]	; (d52f0 <loop+0x398>)
   d5118:	f003 fb9f 	bl	d885a <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.z);
   d511c:	f004 f9b8 	bl	d9490 <_Z16_fetch_usbserialv>
   d5120:	ed9d 0a1c 	vldr	s0, [sp, #112]	; 0x70
   d5124:	2102      	movs	r1, #2
   d5126:	f003 fccb 	bl	d8ac0 <_ZN5Print5printEfi>
  Serial.println(F(""));
   d512a:	f004 f9b1 	bl	d9490 <_Z16_fetch_usbserialv>
   d512e:	4971      	ldr	r1, [pc, #452]	; (d52f4 <loop+0x39c>)
   d5130:	f003 fbad 	bl	d888e <_ZN5Print7printlnEPK19__FlashStringHelper>
  imu::Quaternion quat = bno.getQuat();
   d5134:	4866      	ldr	r0, [pc, #408]	; (d52d0 <loop+0x378>)
   d5136:	f001 fde7 	bl	d6d08 <_ZN15Adafruit_BNO0557getQuatEv>
   d513a:	ed8d 0b0c 	vstr	d0, [sp, #48]	; 0x30
   d513e:	ed8d 1b0e 	vstr	d1, [sp, #56]	; 0x38
   d5142:	ed8d 2b10 	vstr	d2, [sp, #64]	; 0x40
   d5146:	ed8d 3b12 	vstr	d3, [sp, #72]	; 0x48
  Serial.print(F("Quaternion: "));
   d514a:	f004 f9a1 	bl	d9490 <_Z16_fetch_usbserialv>
   d514e:	496a      	ldr	r1, [pc, #424]	; (d52f8 <loop+0x3a0>)
   d5150:	f003 fb83 	bl	d885a <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.w());
   d5154:	f004 f99c 	bl	d9490 <_Z16_fetch_usbserialv>
   d5158:	4604      	mov	r4, r0
   d515a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d515e:	f007 fe01 	bl	dcd64 <__aeabi_d2f>
   d5162:	2102      	movs	r1, #2
   d5164:	ee00 0a10 	vmov	s0, r0
   d5168:	4620      	mov	r0, r4
   d516a:	f003 fca9 	bl	d8ac0 <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d516e:	f004 f98f 	bl	d9490 <_Z16_fetch_usbserialv>
   d5172:	495f      	ldr	r1, [pc, #380]	; (d52f0 <loop+0x398>)
   d5174:	f003 fb71 	bl	d885a <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.x());
   d5178:	f004 f98a 	bl	d9490 <_Z16_fetch_usbserialv>
   d517c:	4604      	mov	r4, r0
   d517e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   d5182:	f007 fdef 	bl	dcd64 <__aeabi_d2f>
   d5186:	2102      	movs	r1, #2
   d5188:	ee00 0a10 	vmov	s0, r0
   d518c:	4620      	mov	r0, r4
   d518e:	f003 fc97 	bl	d8ac0 <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d5192:	f004 f97d 	bl	d9490 <_Z16_fetch_usbserialv>
   d5196:	4956      	ldr	r1, [pc, #344]	; (d52f0 <loop+0x398>)
   d5198:	f003 fb5f 	bl	d885a <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.y());
   d519c:	f004 f978 	bl	d9490 <_Z16_fetch_usbserialv>
   d51a0:	4604      	mov	r4, r0
   d51a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   d51a6:	f007 fddd 	bl	dcd64 <__aeabi_d2f>
   d51aa:	2102      	movs	r1, #2
   d51ac:	ee00 0a10 	vmov	s0, r0
   d51b0:	4620      	mov	r0, r4
   d51b2:	f003 fc85 	bl	d8ac0 <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d51b6:	f004 f96b 	bl	d9490 <_Z16_fetch_usbserialv>
   d51ba:	494d      	ldr	r1, [pc, #308]	; (d52f0 <loop+0x398>)
   d51bc:	f003 fb4d 	bl	d885a <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.z());
   d51c0:	f004 f966 	bl	d9490 <_Z16_fetch_usbserialv>
   d51c4:	4604      	mov	r4, r0
   d51c6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   d51ca:	f007 fdcb 	bl	dcd64 <__aeabi_d2f>
   d51ce:	2102      	movs	r1, #2
   d51d0:	ee00 0a10 	vmov	s0, r0
   d51d4:	4620      	mov	r0, r4
   d51d6:	f003 fc73 	bl	d8ac0 <_ZN5Print5printEfi>
  Serial.println(F(""));
   d51da:	f004 f959 	bl	d9490 <_Z16_fetch_usbserialv>
   d51de:	4945      	ldr	r1, [pc, #276]	; (d52f4 <loop+0x39c>)
   d51e0:	4c46      	ldr	r4, [pc, #280]	; (d52fc <loop+0x3a4>)
   d51e2:	f003 fb54 	bl	d888e <_ZN5Print7printlnEPK19__FlashStringHelper>
  uint8_t sys, gyro, accel, mag = 0;
   d51e6:	2300      	movs	r3, #0
   d51e8:	f88d 300f 	strb.w	r3, [sp, #15]
  bno.getCalibration(&sys, &gyro, &accel, &mag);
   d51ec:	f10d 030f 	add.w	r3, sp, #15
   d51f0:	f10d 020d 	add.w	r2, sp, #13
   d51f4:	a903      	add	r1, sp, #12
   d51f6:	4836      	ldr	r0, [pc, #216]	; (d52d0 <loop+0x378>)
   d51f8:	9300      	str	r3, [sp, #0]
   d51fa:	f10d 030e 	add.w	r3, sp, #14
   d51fe:	f001 fc84 	bl	d6b0a <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
  Serial.print(F("Calibration: "));
   d5202:	f004 f945 	bl	d9490 <_Z16_fetch_usbserialv>
   d5206:	493e      	ldr	r1, [pc, #248]	; (d5300 <loop+0x3a8>)
   d5208:	f003 fb27 	bl	d885a <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(sys, DEC);
   d520c:	f004 f940 	bl	d9490 <_Z16_fetch_usbserialv>
   d5210:	220a      	movs	r2, #10
   d5212:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d5216:	f7ff f9bf 	bl	d4598 <_ZN5Print5printIhLi0EEEjT_i>
  Serial.print(F(", "));
   d521a:	f004 f939 	bl	d9490 <_Z16_fetch_usbserialv>
   d521e:	4934      	ldr	r1, [pc, #208]	; (d52f0 <loop+0x398>)
   d5220:	f003 fb1b 	bl	d885a <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(gyro, DEC);
   d5224:	f004 f934 	bl	d9490 <_Z16_fetch_usbserialv>
   d5228:	220a      	movs	r2, #10
   d522a:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d522e:	f7ff f9b3 	bl	d4598 <_ZN5Print5printIhLi0EEEjT_i>
  Serial.print(F(", "));
   d5232:	f004 f92d 	bl	d9490 <_Z16_fetch_usbserialv>
   d5236:	492e      	ldr	r1, [pc, #184]	; (d52f0 <loop+0x398>)
   d5238:	f003 fb0f 	bl	d885a <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(accel, DEC);
   d523c:	f004 f928 	bl	d9490 <_Z16_fetch_usbserialv>
   d5240:	220a      	movs	r2, #10
   d5242:	f89d 100e 	ldrb.w	r1, [sp, #14]
   d5246:	f7ff f9a7 	bl	d4598 <_ZN5Print5printIhLi0EEEjT_i>
  Serial.print(F(", "));
   d524a:	f004 f921 	bl	d9490 <_Z16_fetch_usbserialv>
   d524e:	4928      	ldr	r1, [pc, #160]	; (d52f0 <loop+0x398>)
   d5250:	f003 fb03 	bl	d885a <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(mag, DEC);
   d5254:	f004 f91c 	bl	d9490 <_Z16_fetch_usbserialv>
   d5258:	220a      	movs	r2, #10
   d525a:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d525e:	f7ff f99b 	bl	d4598 <_ZN5Print5printIhLi0EEEjT_i>
  Serial.println(F(""));
   d5262:	f004 f915 	bl	d9490 <_Z16_fetch_usbserialv>
   d5266:	4923      	ldr	r1, [pc, #140]	; (d52f4 <loop+0x39c>)
   d5268:	f003 fb11 	bl	d888e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("\n\n");
   d526c:	f004 f910 	bl	d9490 <_Z16_fetch_usbserialv>
   d5270:	4924      	ldr	r1, [pc, #144]	; (d5304 <loop+0x3ac>)
   d5272:	f003 fb02 	bl	d887a <_ZN5Print7printlnEPKc>
  bno.getEvent(&event);
   d5276:	a915      	add	r1, sp, #84	; 0x54
   d5278:	4815      	ldr	r0, [pc, #84]	; (d52d0 <loop+0x378>)
   d527a:	f001 fe11 	bl	d6ea0 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  Serial.print("X: ");
   d527e:	f004 f907 	bl	d9490 <_Z16_fetch_usbserialv>
   d5282:	4921      	ldr	r1, [pc, #132]	; (d5308 <loop+0x3b0>)
   d5284:	f003 fae2 	bl	d884c <_ZN5Print5printEPKc>
  Serial.print(event.orientation.x, 4);
   d5288:	f004 f902 	bl	d9490 <_Z16_fetch_usbserialv>
   d528c:	ed9d 0a1a 	vldr	s0, [sp, #104]	; 0x68
   d5290:	e03c      	b.n	d530c <loop+0x3b4>
   d5292:	bf00      	nop
   d5294:	f3af 8000 	nop.w
   d5298:	cccccccd 	.word	0xcccccccd
   d529c:	3fdccccc 	.word	0x3fdccccc
   d52a0:	2003e3cd 	.word	0x2003e3cd
   d52a4:	2003e45c 	.word	0x2003e45c
   d52a8:	2003e448 	.word	0x2003e448
   d52ac:	2003e578 	.word	0x2003e578
   d52b0:	2003e3cc 	.word	0x2003e3cc
   d52b4:	2003e450 	.word	0x2003e450
   d52b8:	2003e3d0 	.word	0x2003e3d0
   d52bc:	2003e454 	.word	0x2003e454
   d52c0:	000dd77d 	.word	0x000dd77d
   d52c4:	2003e458 	.word	0x2003e458
   d52c8:	2003e460 	.word	0x2003e460
   d52cc:	000dd780 	.word	0x000dd780
   d52d0:	2003e4b4 	.word	0x2003e4b4
   d52d4:	2003e4d0 	.word	0x2003e4d0
   d52d8:	000dd785 	.word	0x000dd785
   d52dc:	2003e4d4 	.word	0x2003e4d4
   d52e0:	000ddcb4 	.word	0x000ddcb4
   d52e4:	000dd787 	.word	0x000dd787
   d52e8:	43b40000 	.word	0x43b40000
   d52ec:	000dd789 	.word	0x000dd789
   d52f0:	000dd797 	.word	0x000dd797
   d52f4:	000dd77f 	.word	0x000dd77f
   d52f8:	000dd79a 	.word	0x000dd79a
   d52fc:	2003e4cc 	.word	0x2003e4cc
   d5300:	000dd7a7 	.word	0x000dd7a7
   d5304:	000dd7b5 	.word	0x000dd7b5
   d5308:	000dd7b8 	.word	0x000dd7b8
   d530c:	2104      	movs	r1, #4
   d530e:	f003 fbd7 	bl	d8ac0 <_ZN5Print5printEfi>
  Serial.print("\tY: ");
   d5312:	f004 f8bd 	bl	d9490 <_Z16_fetch_usbserialv>
   d5316:	495d      	ldr	r1, [pc, #372]	; (d548c <loop+0x534>)
   d5318:	f003 fa98 	bl	d884c <_ZN5Print5printEPKc>
  Serial.print(event.orientation.y, 4);
   d531c:	f004 f8b8 	bl	d9490 <_Z16_fetch_usbserialv>
   d5320:	ed9d 0a1b 	vldr	s0, [sp, #108]	; 0x6c
   d5324:	2104      	movs	r1, #4
   d5326:	f003 fbcb 	bl	d8ac0 <_ZN5Print5printEfi>
  Serial.print("\tZ: ");
   d532a:	f004 f8b1 	bl	d9490 <_Z16_fetch_usbserialv>
   d532e:	4958      	ldr	r1, [pc, #352]	; (d5490 <loop+0x538>)
   d5330:	f003 fa8c 	bl	d884c <_ZN5Print5printEPKc>
  Serial.print(event.orientation.z, 4);
   d5334:	f004 f8ac 	bl	d9490 <_Z16_fetch_usbserialv>
   d5338:	ed9d 0a1c 	vldr	s0, [sp, #112]	; 0x70
   d533c:	2104      	movs	r1, #4
   d533e:	f003 fbbf 	bl	d8ac0 <_ZN5Print5printEfi>
  Serial.println("");
   d5342:	f004 f8a5 	bl	d9490 <_Z16_fetch_usbserialv>
   d5346:	4953      	ldr	r1, [pc, #332]	; (d5494 <loop+0x53c>)
   d5348:	f003 fa97 	bl	d887a <_ZN5Print7printlnEPKc>
  Serial.println("\n\n");
   d534c:	f004 f8a0 	bl	d9490 <_Z16_fetch_usbserialv>
   d5350:	4951      	ldr	r1, [pc, #324]	; (d5498 <loop+0x540>)
   d5352:	f003 fa92 	bl	d887a <_ZN5Print7printlnEPKc>
  compass_heading = event.orientation.x +285;
   d5356:	ed9f 7a51 	vldr	s14, [pc, #324]	; d549c <loop+0x544>
   d535a:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
   d535e:	ee77 7a87 	vadd.f32	s15, s15, s14
  if(compass_heading > 360) {
   d5362:	eef4 7ac8 	vcmpe.f32	s15, s16
   d5366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    compass_heading = compass_heading - 360;
   d536a:	bfc8      	it	gt
   d536c:	ee77 7ac8 	vsubgt.f32	s15, s15, s16
   d5370:	edc4 7a00 	vstr	s15, [r4]
  Serial.print("compass heading:  ");
   d5374:	f004 f88c 	bl	d9490 <_Z16_fetch_usbserialv>
   d5378:	4949      	ldr	r1, [pc, #292]	; (d54a0 <loop+0x548>)
   d537a:	f003 fa67 	bl	d884c <_ZN5Print5printEPKc>
  Serial.print(compass_heading, 4);
   d537e:	f004 f887 	bl	d9490 <_Z16_fetch_usbserialv>
   d5382:	2104      	movs	r1, #4
   d5384:	ed94 0a00 	vldr	s0, [r4]
  bno_compass_heading = get_compass_heading();
   d5388:	4c46      	ldr	r4, [pc, #280]	; (d54a4 <loop+0x54c>)
  Serial.print(compass_heading, 4);
   d538a:	f003 fb99 	bl	d8ac0 <_ZN5Print5printEfi>
  bno_compass_heading = get_compass_heading();
   d538e:	f7ff f96f 	bl	d4670 <_Z19get_compass_headingv>
   d5392:	ed84 0a00 	vstr	s0, [r4]
  Serial.print("psi from bno055\n");
   d5396:	f004 f87b 	bl	d9490 <_Z16_fetch_usbserialv>
   d539a:	4943      	ldr	r1, [pc, #268]	; (d54a8 <loop+0x550>)
   d539c:	f003 fa56 	bl	d884c <_ZN5Print5printEPKc>
  Serial.print(bno_compass_heading);
   d53a0:	f004 f876 	bl	d9490 <_Z16_fetch_usbserialv>
   d53a4:	ed94 0a00 	vldr	s0, [r4]
   d53a8:	2102      	movs	r1, #2
   d53aa:	f003 fb89 	bl	d8ac0 <_ZN5Print5printEfi>
  Serial.print("\nunix time = ");
   d53ae:	f004 f86f 	bl	d9490 <_Z16_fetch_usbserialv>
   d53b2:	493e      	ldr	r1, [pc, #248]	; (d54ac <loop+0x554>)
   d53b4:	f003 fa4a 	bl	d884c <_ZN5Print5printEPKc>
  Serial.print(Time.now());
   d53b8:	f004 f86a 	bl	d9490 <_Z16_fetch_usbserialv>
   d53bc:	4604      	mov	r4, r0
   d53be:	f003 fc0f 	bl	d8be0 <_ZN9TimeClass3nowEv>
   d53c2:	220a      	movs	r2, #10
   d53c4:	4601      	mov	r1, r0
size_t Print::print(T n, int base)
   d53c6:	4620      	mov	r0, r4
   d53c8:	f7fe feb2 	bl	d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>
Serial.print("time base value =");
   d53cc:	f004 f860 	bl	d9490 <_Z16_fetch_usbserialv>
   d53d0:	4937      	ldr	r1, [pc, #220]	; (d54b0 <loop+0x558>)
   d53d2:	f003 fa3b 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(time_base);
   d53d6:	f004 f85b 	bl	d9490 <_Z16_fetch_usbserialv>
   d53da:	230a      	movs	r3, #10
   d53dc:	9300      	str	r3, [sp, #0]
   d53de:	4b35      	ldr	r3, [pc, #212]	; (d54b4 <loop+0x55c>)
   d53e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53e4:	f7fe fe84 	bl	d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>
Serial.print("\n");
   d53e8:	f004 f852 	bl	d9490 <_Z16_fetch_usbserialv>
   d53ec:	4932      	ldr	r1, [pc, #200]	; (d54b8 <loop+0x560>)
   d53ee:	f003 fa2d 	bl	d884c <_ZN5Print5printEPKc>
  Serial.print("\n");
   d53f2:	f004 f84d 	bl	d9490 <_Z16_fetch_usbserialv>
   d53f6:	4930      	ldr	r1, [pc, #192]	; (d54b8 <loop+0x560>)
   d53f8:	f003 fa28 	bl	d884c <_ZN5Print5printEPKc>
  Particle.publish("office temperature", String(bme.readTemperature()*1.8F + 32.));
   d53fc:	482f      	ldr	r0, [pc, #188]	; (d54bc <loop+0x564>)
   d53fe:	f000 fc5f 	bl	d5cc0 <_ZN15Adafruit_BME28015readTemperatureEv>
   d5402:	eddf 7a2f 	vldr	s15, [pc, #188]	; d54c0 <loop+0x568>
   d5406:	ee60 7a27 	vmul.f32	s15, s0, s15
   d540a:	ee17 0a90 	vmov	r0, s15
   d540e:	f007 f959 	bl	dc6c4 <__aeabi_f2d>
   d5412:	4b2c      	ldr	r3, [pc, #176]	; (d54c4 <loop+0x56c>)
   d5414:	2200      	movs	r2, #0
   d5416:	f006 fff7 	bl	dc408 <__adddf3>
   d541a:	ec41 0b10 	vmov	d0, r0, r1
   d541e:	2106      	movs	r1, #6
   d5420:	a806      	add	r0, sp, #24
   d5422:	f003 f9ac 	bl	d877e <_ZN6StringC1Edi>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d5426:	4b28      	ldr	r3, [pc, #160]	; (d54c8 <loop+0x570>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5428:	9a06      	ldr	r2, [sp, #24]
   d542a:	781b      	ldrb	r3, [r3, #0]
   d542c:	f88d 3000 	strb.w	r3, [sp]
   d5430:	4926      	ldr	r1, [pc, #152]	; (d54cc <loop+0x574>)
   d5432:	233c      	movs	r3, #60	; 0x3c
   d5434:	a804      	add	r0, sp, #16
   d5436:	f003 fddf 	bl	d8ff8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d543a:	9c05      	ldr	r4, [sp, #20]
   d543c:	b17c      	cbz	r4, d545e <loop+0x506>
      if (--_M_use_count == 0)
   d543e:	6863      	ldr	r3, [r4, #4]
   d5440:	3b01      	subs	r3, #1
   d5442:	6063      	str	r3, [r4, #4]
   d5444:	b95b      	cbnz	r3, d545e <loop+0x506>
          _M_dispose();
   d5446:	6823      	ldr	r3, [r4, #0]
   d5448:	4620      	mov	r0, r4
   d544a:	689b      	ldr	r3, [r3, #8]
   d544c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d544e:	68a3      	ldr	r3, [r4, #8]
   d5450:	3b01      	subs	r3, #1
   d5452:	60a3      	str	r3, [r4, #8]
   d5454:	b91b      	cbnz	r3, d545e <loop+0x506>
            _M_destroy();
   d5456:	6823      	ldr	r3, [r4, #0]
   d5458:	4620      	mov	r0, r4
   d545a:	68db      	ldr	r3, [r3, #12]
   d545c:	4798      	blx	r3
   d545e:	a806      	add	r0, sp, #24
   d5460:	f003 f930 	bl	d86c4 <_ZN6StringD1Ev>
    bno.getSensorOffsets(newCalib);
   d5464:	a906      	add	r1, sp, #24
   d5466:	481a      	ldr	r0, [pc, #104]	; (d54d0 <loop+0x578>)
   d5468:	f001 fba0 	bl	d6bac <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>
    displaySensorOffsets(newCalib);
   d546c:	a806      	add	r0, sp, #24
   d546e:	f7fe ffa1 	bl	d43b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
      delay(BNO055_SAMPLERATE_DELAY_MS);
   d5472:	f242 7010 	movw	r0, #10000	; 0x2710
   d5476:	f003 fbd9 	bl	d8c2c <delay>
}
   d547a:	b01e      	add	sp, #120	; 0x78
   d547c:	ecbd 8b02 	vpop	{d8}
   d5480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
   d5484:	4629      	mov	r1, r5
   d5486:	e5ac      	b.n	d4fe2 <loop+0x8a>
   d5488:	4629      	mov	r1, r5
   d548a:	e5be      	b.n	d500a <loop+0xb2>
   d548c:	000dd7bc 	.word	0x000dd7bc
   d5490:	000dd7c1 	.word	0x000dd7c1
   d5494:	000dd77f 	.word	0x000dd77f
   d5498:	000dd7b5 	.word	0x000dd7b5
   d549c:	438e8000 	.word	0x438e8000
   d54a0:	000dd7c6 	.word	0x000dd7c6
   d54a4:	2003e4c8 	.word	0x2003e4c8
   d54a8:	000dd7d9 	.word	0x000dd7d9
   d54ac:	000dd7ea 	.word	0x000dd7ea
   d54b0:	000dd7f8 	.word	0x000dd7f8
   d54b4:	2003e570 	.word	0x2003e570
   d54b8:	000dd7b6 	.word	0x000dd7b6
   d54bc:	2003e470 	.word	0x2003e470
   d54c0:	3fe66666 	.word	0x3fe66666
   d54c4:	40400000 	.word	0x40400000
   d54c8:	2003e46c 	.word	0x2003e46c
   d54cc:	000dd80a 	.word	0x000dd80a
   d54d0:	2003e4b4 	.word	0x2003e4b4

000d54d4 <setup>:
void setup(void) {
   d54d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d54d8:	b0a2      	sub	sp, #136	; 0x88
time_base = Time.now();
   d54da:	f003 fb81 	bl	d8be0 <_ZN9TimeClass3nowEv>
   d54de:	4db3      	ldr	r5, [pc, #716]	; (d57ac <setup+0x2d8>)
   d54e0:	17c1      	asrs	r1, r0, #31
   d54e2:	e9c5 0100 	strd	r0, r1, [r5]
Serial.print("time base value =");
   d54e6:	f003 ffd3 	bl	d9490 <_Z16_fetch_usbserialv>
   d54ea:	49b1      	ldr	r1, [pc, #708]	; (d57b0 <setup+0x2dc>)
   d54ec:	f003 f9ae 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(time_base);
   d54f0:	f003 ffce 	bl	d9490 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d54f4:	230a      	movs	r3, #10
   d54f6:	9300      	str	r3, [sp, #0]
   d54f8:	e9d5 2300 	ldrd	r2, r3, [r5]
   d54fc:	f7fe fdf8 	bl	d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>
Serial.print("\n");
   d5500:	f003 ffc6 	bl	d9490 <_Z16_fetch_usbserialv>
   d5504:	49ab      	ldr	r1, [pc, #684]	; (d57b4 <setup+0x2e0>)
   d5506:	f003 f9a1 	bl	d884c <_ZN5Print5printEPKc>
LastValue = 1;
   d550a:	4bab      	ldr	r3, [pc, #684]	; (d57b8 <setup+0x2e4>)
   d550c:	2401      	movs	r4, #1
   d550e:	601c      	str	r4, [r3, #0]
pinMode(vane_pin, INPUT);
   d5510:	4baa      	ldr	r3, [pc, #680]	; (d57bc <setup+0x2e8>)
   d5512:	2100      	movs	r1, #0
   d5514:	7818      	ldrb	r0, [r3, #0]
   d5516:	f004 fa53 	bl	d99c0 <pinMode>
pinMode(vane_switch, OUTPUT);
   d551a:	4ba9      	ldr	r3, [pc, #676]	; (d57c0 <setup+0x2ec>)
   d551c:	4621      	mov	r1, r4
   d551e:	7818      	ldrb	r0, [r3, #0]
pinMode(wind_pin, INPUT);
   d5520:	4ca8      	ldr	r4, [pc, #672]	; (d57c4 <setup+0x2f0>)
pinMode(vane_switch, OUTPUT);
   d5522:	f004 fa4d 	bl	d99c0 <pinMode>
Serial.println("Vane Value\tDirection\tHeading");
   d5526:	f003 ffb3 	bl	d9490 <_Z16_fetch_usbserialv>
   d552a:	49a7      	ldr	r1, [pc, #668]	; (d57c8 <setup+0x2f4>)
   d552c:	f003 f9a5 	bl	d887a <_ZN5Print7printlnEPKc>
pinMode(wind_pin, INPUT);
   d5530:	7820      	ldrb	r0, [r4, #0]
   d5532:	2100      	movs	r1, #0
   d5534:	f004 fa44 	bl	d99c0 <pinMode>
attachInterrupt(wind_pin, isr_rotation, FALLING);
   d5538:	2300      	movs	r3, #0
   d553a:	9300      	str	r3, [sp, #0]
   d553c:	2202      	movs	r2, #2
   d553e:	f04f 33ff 	mov.w	r3, #4294967295
   d5542:	49a2      	ldr	r1, [pc, #648]	; (d57cc <setup+0x2f8>)
   d5544:	7820      	ldrb	r0, [r4, #0]
   d5546:	f003 ffcb 	bl	d94e0 <_Z15attachInterrupttPFvvE13InterruptModeah>
Serial.println("Davis Wind Speed Test");
   d554a:	f003 ffa1 	bl	d9490 <_Z16_fetch_usbserialv>
   d554e:	49a0      	ldr	r1, [pc, #640]	; (d57d0 <setup+0x2fc>)
   d5550:	f003 f993 	bl	d887a <_ZN5Print7printlnEPKc>
Serial.println("Rotations\tMPH");
   d5554:	f003 ff9c 	bl	d9490 <_Z16_fetch_usbserialv>
   d5558:	499e      	ldr	r1, [pc, #632]	; (d57d4 <setup+0x300>)
   d555a:	f003 f98e 	bl	d887a <_ZN5Print7printlnEPKc>
  Serial.begin(115200);
   d555e:	f003 ff97 	bl	d9490 <_Z16_fetch_usbserialv>
   d5562:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d5566:	f003 ff81 	bl	d946c <_ZN9USBSerial5beginEl>
    while(!Serial);    // time to get serial running
   d556a:	f003 ff91 	bl	d9490 <_Z16_fetch_usbserialv>
   d556e:	f003 ff84 	bl	d947a <_ZN9USBSerialcvbEv>
   d5572:	2800      	cmp	r0, #0
   d5574:	d0f9      	beq.n	d556a <setup+0x96>
  display.begin(0x3C, true); // Address 0x3C default
   d5576:	4c98      	ldr	r4, [pc, #608]	; (d57d8 <setup+0x304>)
    Serial.println(F("BME280 test"));
   d5578:	f003 ff8a 	bl	d9490 <_Z16_fetch_usbserialv>
   d557c:	4997      	ldr	r1, [pc, #604]	; (d57dc <setup+0x308>)
   d557e:	f003 f986 	bl	d888e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("128x64 OLED FeatherWing test");
   d5582:	f003 ff85 	bl	d9490 <_Z16_fetch_usbserialv>
   d5586:	4996      	ldr	r1, [pc, #600]	; (d57e0 <setup+0x30c>)
   d5588:	f003 f977 	bl	d887a <_ZN5Print7printlnEPKc>
  display.begin(0x3C, true); // Address 0x3C default
   d558c:	2201      	movs	r2, #1
   d558e:	213c      	movs	r1, #60	; 0x3c
   d5590:	4620      	mov	r0, r4
   d5592:	f002 fb3d 	bl	d7c10 <_ZN15Adafruit_SH11075beginEhb>
  Serial.println("OLED begun");
   d5596:	f003 ff7b 	bl	d9490 <_Z16_fetch_usbserialv>
   d559a:	4992      	ldr	r1, [pc, #584]	; (d57e4 <setup+0x310>)
   d559c:	f003 f96d 	bl	d887a <_ZN5Print7printlnEPKc>
  display.display();
   d55a0:	4620      	mov	r0, r4
   d55a2:	f002 fa3e 	bl	d7a22 <_ZN15Adafruit_SH110X7displayEv>
  delay(1000);
   d55a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d55aa:	f003 fb3f 	bl	d8c2c <delay>
  display.clearDisplay();
   d55ae:	4620      	mov	r0, r4
   d55b0:	f001 fdc4 	bl	d713c <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d55b4:	4620      	mov	r0, r4
   d55b6:	f002 fa34 	bl	d7a22 <_ZN15Adafruit_SH110X7displayEv>
  display.setRotation(1);
   d55ba:	2101      	movs	r1, #1
   d55bc:	4620      	mov	r0, r4
   d55be:	f001 ffc3 	bl	d7548 <_ZN12Adafruit_GFX11setRotationEh>
  Serial.println("Button test");
   d55c2:	f003 ff65 	bl	d9490 <_Z16_fetch_usbserialv>
   d55c6:	4988      	ldr	r1, [pc, #544]	; (d57e8 <setup+0x314>)
   d55c8:	f003 f957 	bl	d887a <_ZN5Print7printlnEPKc>
  pinMode(BUTTON_A, INPUT_PULLUP);
   d55cc:	2102      	movs	r1, #2
   d55ce:	2004      	movs	r0, #4
   d55d0:	f004 f9f6 	bl	d99c0 <pinMode>
  pinMode(BUTTON_B, INPUT_PULLUP);
   d55d4:	2102      	movs	r1, #2
   d55d6:	2003      	movs	r0, #3
   d55d8:	f004 f9f2 	bl	d99c0 <pinMode>
  pinMode(BUTTON_C, INPUT_PULLUP);
   d55dc:	2102      	movs	r1, #2
   d55de:	4608      	mov	r0, r1
   d55e0:	f004 f9ee 	bl	d99c0 <pinMode>
  display.setTextSize(2);
   d55e4:	2102      	movs	r1, #2
   d55e6:	4620      	mov	r0, r4
   d55e8:	f002 fa15 	bl	d7a16 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d55ec:	2200      	movs	r2, #0
   d55ee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d55f2:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.print("BigdaddyAddie weather station!\n");
   d55f6:	497d      	ldr	r1, [pc, #500]	; (d57ec <setup+0x318>)
   d55f8:	4620      	mov	r0, r4
   d55fa:	f003 f927 	bl	d884c <_ZN5Print5printEPKc>
  display.print("connected!\n");
   d55fe:	497c      	ldr	r1, [pc, #496]	; (d57f0 <setup+0x31c>)
   d5600:	4620      	mov	r0, r4
   d5602:	f003 f923 	bl	d884c <_ZN5Print5printEPKc>
  display.println("IP: 10.0.1.23");
   d5606:	497b      	ldr	r1, [pc, #492]	; (d57f4 <setup+0x320>)
   d5608:	4620      	mov	r0, r4
   d560a:	f003 f936 	bl	d887a <_ZN5Print7printlnEPKc>
  display.println("Sending val #0");
   d560e:	497a      	ldr	r1, [pc, #488]	; (d57f8 <setup+0x324>)
   d5610:	4620      	mov	r0, r4
   d5612:	f003 f932 	bl	d887a <_ZN5Print7printlnEPKc>
  display.display(); // actually display all of the above
   d5616:	4620      	mov	r0, r4
   d5618:	f002 fa03 	bl	d7a22 <_ZN15Adafruit_SH110X7displayEv>
    status = bme.begin();  
   d561c:	4877      	ldr	r0, [pc, #476]	; (d57fc <setup+0x328>)
   d561e:	f000 fefc 	bl	d641a <_ZN15Adafruit_BME2805beginEv>
    if (!status) {
   d5622:	bb78      	cbnz	r0, d5684 <setup+0x1b0>
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d5624:	f003 ff34 	bl	d9490 <_Z16_fetch_usbserialv>
   d5628:	4975      	ldr	r1, [pc, #468]	; (d5800 <setup+0x32c>)
   d562a:	f003 f926 	bl	d887a <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),16);
   d562e:	f003 ff2f 	bl	d9490 <_Z16_fetch_usbserialv>
   d5632:	4974      	ldr	r1, [pc, #464]	; (d5804 <setup+0x330>)
   d5634:	f003 f90a 	bl	d884c <_ZN5Print5printEPKc>
   d5638:	f003 ff2a 	bl	d9490 <_Z16_fetch_usbserialv>
   d563c:	4604      	mov	r4, r0
   d563e:	486f      	ldr	r0, [pc, #444]	; (d57fc <setup+0x328>)
   d5640:	f000 fa6e 	bl	d5b20 <_ZN15Adafruit_BME2808sensorIDEv>
        return printNumber(val, base) + t;
   d5644:	2210      	movs	r2, #16
   d5646:	4601      	mov	r1, r0
   d5648:	4620      	mov	r0, r4
   d564a:	f003 f922 	bl	d8892 <_ZN5Print11printNumberEmh>
        n += println();
   d564e:	4620      	mov	r0, r4
   d5650:	f003 f907 	bl	d8862 <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d5654:	f003 ff1c 	bl	d9490 <_Z16_fetch_usbserialv>
   d5658:	496b      	ldr	r1, [pc, #428]	; (d5808 <setup+0x334>)
   d565a:	f003 f8f7 	bl	d884c <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d565e:	f003 ff17 	bl	d9490 <_Z16_fetch_usbserialv>
   d5662:	496a      	ldr	r1, [pc, #424]	; (d580c <setup+0x338>)
   d5664:	f003 f8f2 	bl	d884c <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d5668:	f003 ff12 	bl	d9490 <_Z16_fetch_usbserialv>
   d566c:	4968      	ldr	r1, [pc, #416]	; (d5810 <setup+0x33c>)
   d566e:	f003 f8ed 	bl	d884c <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d5672:	f003 ff0d 	bl	d9490 <_Z16_fetch_usbserialv>
   d5676:	4967      	ldr	r1, [pc, #412]	; (d5814 <setup+0x340>)
   d5678:	f003 f8e8 	bl	d884c <_ZN5Print5printEPKc>
        while (1) delay(10);
   d567c:	200a      	movs	r0, #10
   d567e:	f003 fad5 	bl	d8c2c <delay>
   d5682:	e7fb      	b.n	d567c <setup+0x1a8>
  Serial.begin(9600);
   d5684:	f003 ff04 	bl	d9490 <_Z16_fetch_usbserialv>
   d5688:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d568c:	f003 feee 	bl	d946c <_ZN9USBSerial5beginEl>
  Serial.println("WebSerial 3D Firmware"); Serial.println("");
   d5690:	f003 fefe 	bl	d9490 <_Z16_fetch_usbserialv>
   d5694:	4960      	ldr	r1, [pc, #384]	; (d5818 <setup+0x344>)
   d5696:	f003 f8f0 	bl	d887a <_ZN5Print7printlnEPKc>
   d569a:	f003 fef9 	bl	d9490 <_Z16_fetch_usbserialv>
   d569e:	495f      	ldr	r1, [pc, #380]	; (d581c <setup+0x348>)
   d56a0:	f003 f8eb 	bl	d887a <_ZN5Print7printlnEPKc>
if (i2ceeprom.begin(0x50)) {  // you can stick the new i2c addr in here, e.g. begin(0x51);
   d56a4:	f004 fa10 	bl	d9ac8 <_Z19__fetch_global_Wirev>
   d56a8:	2150      	movs	r1, #80	; 0x50
   d56aa:	4602      	mov	r2, r0
   d56ac:	485c      	ldr	r0, [pc, #368]	; (d5820 <setup+0x34c>)
   d56ae:	f002 fb25 	bl	d7cfc <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>
   d56b2:	2800      	cmp	r0, #0
   d56b4:	d06a      	beq.n	d578c <setup+0x2b8>
    Serial.println("Found I2C EEPROM");
   d56b6:	f003 feeb 	bl	d9490 <_Z16_fetch_usbserialv>
   d56ba:	495a      	ldr	r1, [pc, #360]	; (d5824 <setup+0x350>)
    if (i2ceeprom.read(max_addr) != test)
   d56bc:	4e58      	ldr	r6, [pc, #352]	; (d5820 <setup+0x34c>)
        Serial.print("Failed to re-write address 0x");
   d56be:	f8df 9184 	ldr.w	r9, [pc, #388]	; d5844 <setup+0x370>
        Serial.print("Failed to write address 0x");
   d56c2:	f8df a184 	ldr.w	sl, [pc, #388]	; d5848 <setup+0x374>
    Serial.println("Found I2C EEPROM");
   d56c6:	f003 f8d8 	bl	d887a <_ZN5Print7printlnEPKc>
  Serial.println("Testing size!");
   d56ca:	f003 fee1 	bl	d9490 <_Z16_fetch_usbserialv>
   d56ce:	4956      	ldr	r1, [pc, #344]	; (d5828 <setup+0x354>)
   d56d0:	f003 f8d3 	bl	d887a <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0xFFFF; max_addr++) {
   d56d4:	2401      	movs	r4, #1
    if (i2ceeprom.read(max_addr) != test)
   d56d6:	fa1f f884 	uxth.w	r8, r4
   d56da:	4641      	mov	r1, r8
   d56dc:	4630      	mov	r0, r6
   d56de:	f002 fb45 	bl	d7d6c <_ZN19Adafruit_EEPROM_I2C4readEt>
   d56e2:	2837      	cmp	r0, #55	; 0x37
   d56e4:	d15b      	bne.n	d579e <setup+0x2ca>
    if (! i2ceeprom.write(max_addr, (byte)~test)) {
   d56e6:	22c8      	movs	r2, #200	; 0xc8
   d56e8:	4641      	mov	r1, r8
   d56ea:	4630      	mov	r0, r6
   d56ec:	f002 fb1c 	bl	d7d28 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   d56f0:	b970      	cbnz	r0, d5710 <setup+0x23c>
        Serial.print("Failed to write address 0x");
   d56f2:	f003 fecd 	bl	d9490 <_Z16_fetch_usbserialv>
   d56f6:	4651      	mov	r1, sl
   d56f8:	f003 f8a8 	bl	d884c <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   d56fc:	f003 fec8 	bl	d9490 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d5700:	2210      	movs	r2, #16
   d5702:	4607      	mov	r7, r0
   d5704:	4621      	mov	r1, r4
   d5706:	f003 f8c4 	bl	d8892 <_ZN5Print11printNumberEmh>
        n += println();
   d570a:	4638      	mov	r0, r7
   d570c:	f003 f8a9 	bl	d8862 <_ZN5Print7printlnEv>
    uint8_t val0 = i2ceeprom.read(0);
   d5710:	2100      	movs	r1, #0
   d5712:	4630      	mov	r0, r6
   d5714:	f002 fb2a 	bl	d7d6c <_ZN19Adafruit_EEPROM_I2C4readEt>
    if (! i2ceeprom.write(max_addr, test)) {
   d5718:	2237      	movs	r2, #55	; 0x37
    uint8_t val0 = i2ceeprom.read(0);
   d571a:	4607      	mov	r7, r0
    if (! i2ceeprom.write(max_addr, test)) {
   d571c:	4641      	mov	r1, r8
   d571e:	4630      	mov	r0, r6
   d5720:	f002 fb02 	bl	d7d28 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   d5724:	b970      	cbnz	r0, d5744 <setup+0x270>
        Serial.print("Failed to re-write address 0x");
   d5726:	f003 feb3 	bl	d9490 <_Z16_fetch_usbserialv>
   d572a:	4649      	mov	r1, r9
   d572c:	f003 f88e 	bl	d884c <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   d5730:	f003 feae 	bl	d9490 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d5734:	2210      	movs	r2, #16
   d5736:	4680      	mov	r8, r0
   d5738:	4621      	mov	r1, r4
   d573a:	f003 f8aa 	bl	d8892 <_ZN5Print11printNumberEmh>
        n += println();
   d573e:	4640      	mov	r0, r8
   d5740:	f003 f88f 	bl	d8862 <_ZN5Print7printlnEv>
    if (val0 == (byte)~test) {
   d5744:	2fc8      	cmp	r7, #200	; 0xc8
   d5746:	d12a      	bne.n	d579e <setup+0x2ca>
      Serial.println("Found max address");
   d5748:	f003 fea2 	bl	d9490 <_Z16_fetch_usbserialv>
   d574c:	4937      	ldr	r1, [pc, #220]	; (d582c <setup+0x358>)
   d574e:	f003 f894 	bl	d887a <_ZN5Print7printlnEPKc>
  Serial.print("This EEPROM can store ");
   d5752:	f003 fe9d 	bl	d9490 <_Z16_fetch_usbserialv>
   d5756:	4936      	ldr	r1, [pc, #216]	; (d5830 <setup+0x35c>)
   d5758:	f003 f878 	bl	d884c <_ZN5Print5printEPKc>
  Serial.print(max_addr);
   d575c:	f003 fe98 	bl	d9490 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d5760:	220a      	movs	r2, #10
   d5762:	4621      	mov	r1, r4
   d5764:	f003 f895 	bl	d8892 <_ZN5Print11printNumberEmh>
  Serial.println(" bytes");
   d5768:	f003 fe92 	bl	d9490 <_Z16_fetch_usbserialv>
   d576c:	4931      	ldr	r1, [pc, #196]	; (d5834 <setup+0x360>)
   d576e:	f003 f884 	bl	d887a <_ZN5Print7printlnEPKc>
  if(!bno.begin())
   d5772:	4831      	ldr	r0, [pc, #196]	; (d5838 <setup+0x364>)
   d5774:	210c      	movs	r1, #12
   d5776:	f001 f957 	bl	d6a28 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
   d577a:	4604      	mov	r4, r0
   d577c:	2800      	cmp	r0, #0
   d577e:	d165      	bne.n	d584c <setup+0x378>
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
   d5780:	f003 fe86 	bl	d9490 <_Z16_fetch_usbserialv>
   d5784:	492d      	ldr	r1, [pc, #180]	; (d583c <setup+0x368>)
   d5786:	f003 f861 	bl	d884c <_ZN5Print5printEPKc>
    while(1);
   d578a:	e7fe      	b.n	d578a <setup+0x2b6>
    Serial.println("I2C EEPROM not identified ... check your connections?\r\n");
   d578c:	f003 fe80 	bl	d9490 <_Z16_fetch_usbserialv>
   d5790:	492b      	ldr	r1, [pc, #172]	; (d5840 <setup+0x36c>)
   d5792:	f003 f872 	bl	d887a <_ZN5Print7printlnEPKc>
    while (1) delay(10);
   d5796:	200a      	movs	r0, #10
   d5798:	f003 fa48 	bl	d8c2c <delay>
   d579c:	e7fb      	b.n	d5796 <setup+0x2c2>
  for (max_addr = 1; max_addr < 0xFFFF; max_addr++) {
   d579e:	3401      	adds	r4, #1
   d57a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d57a4:	429c      	cmp	r4, r3
   d57a6:	d196      	bne.n	d56d6 <setup+0x202>
   d57a8:	e7d3      	b.n	d5752 <setup+0x27e>
   d57aa:	bf00      	nop
   d57ac:	2003e570 	.word	0x2003e570
   d57b0:	000dd7f8 	.word	0x000dd7f8
   d57b4:	000dd7b6 	.word	0x000dd7b6
   d57b8:	2003e454 	.word	0x2003e454
   d57bc:	2003e3cc 	.word	0x2003e3cc
   d57c0:	2003e3cd 	.word	0x2003e3cd
   d57c4:	2003e3ce 	.word	0x2003e3ce
   d57c8:	000dd81d 	.word	0x000dd81d
   d57cc:	000d40c9 	.word	0x000d40c9
   d57d0:	000dd83a 	.word	0x000dd83a
   d57d4:	000dd850 	.word	0x000dd850
   d57d8:	2003e4d4 	.word	0x2003e4d4
   d57dc:	000dd85e 	.word	0x000dd85e
   d57e0:	000dd86a 	.word	0x000dd86a
   d57e4:	000dd887 	.word	0x000dd887
   d57e8:	000dd892 	.word	0x000dd892
   d57ec:	000dd89e 	.word	0x000dd89e
   d57f0:	000dd8be 	.word	0x000dd8be
   d57f4:	000dd8ca 	.word	0x000dd8ca
   d57f8:	000dd8d8 	.word	0x000dd8d8
   d57fc:	2003e470 	.word	0x2003e470
   d5800:	000dd8e7 	.word	0x000dd8e7
   d5804:	000dd92f 	.word	0x000dd92f
   d5808:	000dd940 	.word	0x000dd940
   d580c:	000dd987 	.word	0x000dd987
   d5810:	000dd9b1 	.word	0x000dd9b1
   d5814:	000dd9db 	.word	0x000dd9db
   d5818:	000dda05 	.word	0x000dda05
   d581c:	000dd77f 	.word	0x000dd77f
   d5820:	2003e530 	.word	0x2003e530
   d5824:	000dda1b 	.word	0x000dda1b
   d5828:	000dda2c 	.word	0x000dda2c
   d582c:	000ddaab 	.word	0x000ddaab
   d5830:	000ddabd 	.word	0x000ddabd
   d5834:	000ddad4 	.word	0x000ddad4
   d5838:	2003e4b4 	.word	0x2003e4b4
   d583c:	000ddadb 	.word	0x000ddadb
   d5840:	000dda3a 	.word	0x000dda3a
   d5844:	000dda8d 	.word	0x000dda8d
   d5848:	000dda72 	.word	0x000dda72
   Serial.print("time base value =");
   d584c:	f003 fe20 	bl	d9490 <_Z16_fetch_usbserialv>
   d5850:	497d      	ldr	r1, [pc, #500]	; (d5a48 <setup+0x574>)
   d5852:	f002 fffb 	bl	d884c <_ZN5Print5printEPKc>
Serial.print(time_base);
   d5856:	f003 fe1b 	bl	d9490 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d585a:	230a      	movs	r3, #10
   d585c:	9300      	str	r3, [sp, #0]
   d585e:	e9d5 2300 	ldrd	r2, r3, [r5]
   d5862:	f7fe fc45 	bl	d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>
Serial.print("\n");
   d5866:	f003 fe13 	bl	d9490 <_Z16_fetch_usbserialv>
   d586a:	4978      	ldr	r1, [pc, #480]	; (d5a4c <setup+0x578>)
   d586c:	f002 ffee 	bl	d884c <_ZN5Print5printEPKc>
  delay(1000);
   d5870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5874:	f003 f9da 	bl	d8c2c <delay>
  bno.setExtCrystalUse(true);
   d5878:	2101      	movs	r1, #1
   d587a:	4875      	ldr	r0, [pc, #468]	; (d5a50 <setup+0x57c>)
   d587c:	f001 f822 	bl	d68c4 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
  displaySensorDetails();
   d5880:	f7fe fd0c 	bl	d429c <_Z20displaySensorDetailsv>
    EEPROM.get(eeAddress, bnoID);
   d5884:	f004 f8f0 	bl	d9a68 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d5888:	2204      	movs	r2, #4
   d588a:	a902      	add	r1, sp, #8
   d588c:	2000      	movs	r0, #0
   d588e:	f002 faf1 	bl	d7e74 <HAL_EEPROM_Get>
    bno.getSensor(&sensor);
   d5892:	486f      	ldr	r0, [pc, #444]	; (d5a50 <setup+0x57c>)
   d5894:	a918      	add	r1, sp, #96	; 0x60
   d5896:	f000 ffb9 	bl	d680c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    if (bnoID != sensor.sensor_id)
   d589a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   d589c:	9b02      	ldr	r3, [sp, #8]
   d589e:	429a      	cmp	r2, r3
   d58a0:	d034      	beq.n	d590c <setup+0x438>
        Serial.println("\nNo Calibration Data for this sensor exists in EEPROM");
   d58a2:	f003 fdf5 	bl	d9490 <_Z16_fetch_usbserialv>
   d58a6:	496b      	ldr	r1, [pc, #428]	; (d5a54 <setup+0x580>)
   d58a8:	f002 ffe7 	bl	d887a <_ZN5Print7printlnEPKc>
        delay(500);
   d58ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d58b0:	f003 f9bc 	bl	d8c2c <delay>
    bool foundCalib = false;
   d58b4:	2400      	movs	r4, #0
    delay(1000);
   d58b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d58ba:	f003 f9b7 	bl	d8c2c <delay>
    displaySensorDetails();
   d58be:	f7fe fced 	bl	d429c <_Z20displaySensorDetailsv>
    displaySensorStatus();
   d58c2:	f7ff fa25 	bl	d4d10 <_Z19displaySensorStatusv>
    bno.setExtCrystalUse(true);
   d58c6:	2101      	movs	r1, #1
   d58c8:	4861      	ldr	r0, [pc, #388]	; (d5a50 <setup+0x57c>)
   d58ca:	f000 fffb 	bl	d68c4 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
   d58ce:	f002 fac1 	bl	d7e54 <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
   d58d2:	4b61      	ldr	r3, [pc, #388]	; (d5a58 <setup+0x584>)
    bno.getEvent(&event);
   d58d4:	a90f      	add	r1, sp, #60	; 0x3c
millisOld=millis();
   d58d6:	6018      	str	r0, [r3, #0]
    bno.getEvent(&event);
   d58d8:	485d      	ldr	r0, [pc, #372]	; (d5a50 <setup+0x57c>)
   d58da:	f001 fae1 	bl	d6ea0 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
    if (foundCalib){
   d58de:	b39c      	cbz	r4, d5948 <setup+0x474>
        Serial.println("Move sensor slightly to calibrate magnetometers");
   d58e0:	f003 fdd6 	bl	d9490 <_Z16_fetch_usbserialv>
   d58e4:	495d      	ldr	r1, [pc, #372]	; (d5a5c <setup+0x588>)
        while (!bno.isFullyCalibrated())
   d58e6:	4c5a      	ldr	r4, [pc, #360]	; (d5a50 <setup+0x57c>)
        Serial.println("Move sensor slightly to calibrate magnetometers");
   d58e8:	f002 ffc7 	bl	d887a <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
   d58ec:	4620      	mov	r0, r4
   d58ee:	f001 f924 	bl	d6b3a <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d58f2:	2800      	cmp	r0, #0
   d58f4:	d168      	bne.n	d59c8 <setup+0x4f4>
            bno.getEvent(&event);
   d58f6:	a90f      	add	r1, sp, #60	; 0x3c
   d58f8:	4620      	mov	r0, r4
   d58fa:	f001 fad1 	bl	d6ea0 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            displayCalStatus();
   d58fe:	f7fe fe53 	bl	d45a8 <_Z16displayCalStatusv>
            delay(BNO055_SAMPLERATE_DELAY_MS);
   d5902:	f242 7010 	movw	r0, #10000	; 0x2710
   d5906:	f003 f991 	bl	d8c2c <delay>
        while (!bno.isFullyCalibrated())
   d590a:	e7ef      	b.n	d58ec <setup+0x418>
        Serial.println("\nFound Calibration for this sensor in EEPROM.");
   d590c:	f003 fdc0 	bl	d9490 <_Z16_fetch_usbserialv>
   d5910:	4953      	ldr	r1, [pc, #332]	; (d5a60 <setup+0x58c>)
   d5912:	f002 ffb2 	bl	d887a <_ZN5Print7printlnEPKc>
        EEPROM.get(eeAddress, calibrationData);
   d5916:	f004 f8a7 	bl	d9a68 <_Z21__fetch_global_EEPROMv>
   d591a:	2216      	movs	r2, #22
   d591c:	a903      	add	r1, sp, #12
   d591e:	2004      	movs	r0, #4
   d5920:	f002 faa8 	bl	d7e74 <HAL_EEPROM_Get>
        displaySensorOffsets(calibrationData);
   d5924:	a803      	add	r0, sp, #12
   d5926:	f7fe fd45 	bl	d43b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
        Serial.println("\n\nRestoring Calibration data to the BNO055...");
   d592a:	f003 fdb1 	bl	d9490 <_Z16_fetch_usbserialv>
   d592e:	494d      	ldr	r1, [pc, #308]	; (d5a64 <setup+0x590>)
   d5930:	f002 ffa3 	bl	d887a <_ZN5Print7printlnEPKc>
        bno.setSensorOffsets(calibrationData);
   d5934:	a903      	add	r1, sp, #12
   d5936:	4846      	ldr	r0, [pc, #280]	; (d5a50 <setup+0x57c>)
   d5938:	f000 ffe7 	bl	d690a <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>
        Serial.println("\n\nCalibration data loaded into BNO055");
   d593c:	f003 fda8 	bl	d9490 <_Z16_fetch_usbserialv>
   d5940:	4949      	ldr	r1, [pc, #292]	; (d5a68 <setup+0x594>)
   d5942:	f002 ff9a 	bl	d887a <_ZN5Print7printlnEPKc>
        foundCalib = true;
   d5946:	e7b6      	b.n	d58b6 <setup+0x3e2>
        Serial.println("Please Calibrate Sensor: ");
   d5948:	f003 fda2 	bl	d9490 <_Z16_fetch_usbserialv>
   d594c:	4947      	ldr	r1, [pc, #284]	; (d5a6c <setup+0x598>)
        while (!bno.isFullyCalibrated())
   d594e:	4c40      	ldr	r4, [pc, #256]	; (d5a50 <setup+0x57c>)
            Serial.print("X: ");
   d5950:	4e47      	ldr	r6, [pc, #284]	; (d5a70 <setup+0x59c>)
            Serial.print("\tY: ");
   d5952:	4d48      	ldr	r5, [pc, #288]	; (d5a74 <setup+0x5a0>)
        Serial.println("Please Calibrate Sensor: ");
   d5954:	f002 ff91 	bl	d887a <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
   d5958:	4620      	mov	r0, r4
   d595a:	f001 f8ee 	bl	d6b3a <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d595e:	bb98      	cbnz	r0, d59c8 <setup+0x4f4>
            bno.getEvent(&event);
   d5960:	a90f      	add	r1, sp, #60	; 0x3c
   d5962:	4620      	mov	r0, r4
   d5964:	f001 fa9c 	bl	d6ea0 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            Serial.print("X: ");
   d5968:	f003 fd92 	bl	d9490 <_Z16_fetch_usbserialv>
   d596c:	4631      	mov	r1, r6
   d596e:	f002 ff6d 	bl	d884c <_ZN5Print5printEPKc>
            Serial.print(event.orientation.x, 4);
   d5972:	f003 fd8d 	bl	d9490 <_Z16_fetch_usbserialv>
   d5976:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   d597a:	2104      	movs	r1, #4
   d597c:	f003 f8a0 	bl	d8ac0 <_ZN5Print5printEfi>
            Serial.print("\tY: ");
   d5980:	f003 fd86 	bl	d9490 <_Z16_fetch_usbserialv>
   d5984:	4629      	mov	r1, r5
   d5986:	f002 ff61 	bl	d884c <_ZN5Print5printEPKc>
            Serial.print(event.orientation.y, 4);
   d598a:	f003 fd81 	bl	d9490 <_Z16_fetch_usbserialv>
   d598e:	ed9d 0a15 	vldr	s0, [sp, #84]	; 0x54
   d5992:	2104      	movs	r1, #4
   d5994:	f003 f894 	bl	d8ac0 <_ZN5Print5printEfi>
            Serial.print("\tZ: ");
   d5998:	f003 fd7a 	bl	d9490 <_Z16_fetch_usbserialv>
   d599c:	4936      	ldr	r1, [pc, #216]	; (d5a78 <setup+0x5a4>)
   d599e:	f002 ff55 	bl	d884c <_ZN5Print5printEPKc>
            Serial.print(event.orientation.z, 4);
   d59a2:	f003 fd75 	bl	d9490 <_Z16_fetch_usbserialv>
   d59a6:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   d59aa:	2104      	movs	r1, #4
   d59ac:	f003 f888 	bl	d8ac0 <_ZN5Print5printEfi>
            displayCalStatus();
   d59b0:	f7fe fdfa 	bl	d45a8 <_Z16displayCalStatusv>
            Serial.println("");
   d59b4:	f003 fd6c 	bl	d9490 <_Z16_fetch_usbserialv>
   d59b8:	4930      	ldr	r1, [pc, #192]	; (d5a7c <setup+0x5a8>)
   d59ba:	f002 ff5e 	bl	d887a <_ZN5Print7printlnEPKc>
            delay(BNO055_SAMPLERATE_DELAY_MS);
   d59be:	f242 7010 	movw	r0, #10000	; 0x2710
   d59c2:	f003 f933 	bl	d8c2c <delay>
        while (!bno.isFullyCalibrated())
   d59c6:	e7c7      	b.n	d5958 <setup+0x484>
    Serial.println("\nFully calibrated!");
   d59c8:	f003 fd62 	bl	d9490 <_Z16_fetch_usbserialv>
   d59cc:	492c      	ldr	r1, [pc, #176]	; (d5a80 <setup+0x5ac>)
   d59ce:	f002 ff54 	bl	d887a <_ZN5Print7printlnEPKc>
    Serial.println("--------------------------------");
   d59d2:	f003 fd5d 	bl	d9490 <_Z16_fetch_usbserialv>
   d59d6:	492b      	ldr	r1, [pc, #172]	; (d5a84 <setup+0x5b0>)
   d59d8:	f002 ff4f 	bl	d887a <_ZN5Print7printlnEPKc>
    Serial.println("Calibration Results: ");
   d59dc:	f003 fd58 	bl	d9490 <_Z16_fetch_usbserialv>
   d59e0:	4929      	ldr	r1, [pc, #164]	; (d5a88 <setup+0x5b4>)
   d59e2:	f002 ff4a 	bl	d887a <_ZN5Print7printlnEPKc>
    bno.getSensorOffsets(newCalib);
   d59e6:	a909      	add	r1, sp, #36	; 0x24
   d59e8:	4819      	ldr	r0, [pc, #100]	; (d5a50 <setup+0x57c>)
   d59ea:	f001 f8df 	bl	d6bac <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>
    displaySensorOffsets(newCalib);
   d59ee:	a809      	add	r0, sp, #36	; 0x24
   d59f0:	f7fe fce0 	bl	d43b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
    Serial.println("\n\nStoring calibration data to EEPROM...");
   d59f4:	f003 fd4c 	bl	d9490 <_Z16_fetch_usbserialv>
   d59f8:	4924      	ldr	r1, [pc, #144]	; (d5a8c <setup+0x5b8>)
   d59fa:	f002 ff3e 	bl	d887a <_ZN5Print7printlnEPKc>
    bno.getSensor(&sensor);
   d59fe:	a918      	add	r1, sp, #96	; 0x60
   d5a00:	4813      	ldr	r0, [pc, #76]	; (d5a50 <setup+0x57c>)
   d5a02:	f000 ff03 	bl	d680c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    bnoID = sensor.sensor_id;
   d5a06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d5a08:	9302      	str	r3, [sp, #8]
    EEPROM.put(eeAddress, bnoID);
   d5a0a:	f004 f82d 	bl	d9a68 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5a0e:	a902      	add	r1, sp, #8
   d5a10:	2204      	movs	r2, #4
   d5a12:	2000      	movs	r0, #0
   d5a14:	f002 fa36 	bl	d7e84 <HAL_EEPROM_Put>
    EEPROM.put(eeAddress, newCalib);
   d5a18:	f004 f826 	bl	d9a68 <_Z21__fetch_global_EEPROMv>
   d5a1c:	2216      	movs	r2, #22
   d5a1e:	a909      	add	r1, sp, #36	; 0x24
   d5a20:	2004      	movs	r0, #4
   d5a22:	f002 fa2f 	bl	d7e84 <HAL_EEPROM_Put>
    Serial.println("Data stored to EEPROM.");
   d5a26:	f003 fd33 	bl	d9490 <_Z16_fetch_usbserialv>
   d5a2a:	4919      	ldr	r1, [pc, #100]	; (d5a90 <setup+0x5bc>)
   d5a2c:	f002 ff25 	bl	d887a <_ZN5Print7printlnEPKc>
    Serial.println("\n--------------------------------\n");
   d5a30:	f003 fd2e 	bl	d9490 <_Z16_fetch_usbserialv>
   d5a34:	4917      	ldr	r1, [pc, #92]	; (d5a94 <setup+0x5c0>)
   d5a36:	f002 ff20 	bl	d887a <_ZN5Print7printlnEPKc>
    delay(500);
   d5a3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5a3e:	f003 f8f5 	bl	d8c2c <delay>
}
   d5a42:	b022      	add	sp, #136	; 0x88
   d5a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5a48:	000dd7f8 	.word	0x000dd7f8
   d5a4c:	000dd7b6 	.word	0x000dd7b6
   d5a50:	2003e4b4 	.word	0x2003e4b4
   d5a54:	000ddb18 	.word	0x000ddb18
   d5a58:	2003e538 	.word	0x2003e538
   d5a5c:	000ddbd0 	.word	0x000ddbd0
   d5a60:	000ddb4e 	.word	0x000ddb4e
   d5a64:	000ddb7c 	.word	0x000ddb7c
   d5a68:	000ddbaa 	.word	0x000ddbaa
   d5a6c:	000ddc00 	.word	0x000ddc00
   d5a70:	000dd7b8 	.word	0x000dd7b8
   d5a74:	000dd7bc 	.word	0x000dd7bc
   d5a78:	000dd7c1 	.word	0x000dd7c1
   d5a7c:	000dd77f 	.word	0x000dd77f
   d5a80:	000ddc1a 	.word	0x000ddc1a
   d5a84:	000dd614 	.word	0x000dd614
   d5a88:	000ddc2d 	.word	0x000ddc2d
   d5a8c:	000ddc43 	.word	0x000ddc43
   d5a90:	000ddc6b 	.word	0x000ddc6b
   d5a94:	000ddc82 	.word	0x000ddc82

000d5a98 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d5a98:	4770      	bx	lr

000d5a9a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d5a9a:	b510      	push	{r4, lr}
  }
   d5a9c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d5a9e:	4604      	mov	r4, r0
  }
   d5aa0:	f004 f836 	bl	d9b10 <_ZdlPvj>
   d5aa4:	4620      	mov	r0, r4
   d5aa6:	bd10      	pop	{r4, pc}

000d5aa8 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5aa8:	b40e      	push	{r1, r2, r3}
   d5aaa:	b503      	push	{r0, r1, lr}
   d5aac:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d5aae:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5ab0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d5ab4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d5ab6:	f003 f82f 	bl	d8b18 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d5aba:	b002      	add	sp, #8
   d5abc:	f85d eb04 	ldr.w	lr, [sp], #4
   d5ac0:	b003      	add	sp, #12
   d5ac2:	4770      	bx	lr

000d5ac4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5ac4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5ac6:	4604      	mov	r4, r0
   d5ac8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d5aca:	7922      	ldrb	r2, [r4, #4]
   d5acc:	68a3      	ldr	r3, [r4, #8]
   d5ace:	b132      	cbz	r2, d5ade <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d5ad0:	b9a3      	cbnz	r3, d5afc <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d5ad2:	490b      	ldr	r1, [pc, #44]	; (d5b00 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d5ad4:	b002      	add	sp, #8
   d5ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d5ada:	f002 beb7 	b.w	d884c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5ade:	4a09      	ldr	r2, [pc, #36]	; (d5b04 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d5ae0:	7b26      	ldrb	r6, [r4, #12]
   d5ae2:	4d09      	ldr	r5, [pc, #36]	; (d5b08 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d5ae4:	4909      	ldr	r1, [pc, #36]	; (d5b0c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d5ae6:	7b64      	ldrb	r4, [r4, #13]
   d5ae8:	2e01      	cmp	r6, #1
   d5aea:	bf18      	it	ne
   d5aec:	4629      	movne	r1, r5
   d5aee:	e9cd 1400 	strd	r1, r4, [sp]
   d5af2:	4907      	ldr	r1, [pc, #28]	; (d5b10 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d5af4:	f7ff ffd8 	bl	d5aa8 <_ZN5Print6printfEPKcz>
  }
   d5af8:	b002      	add	sp, #8
   d5afa:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5afc:	4a05      	ldr	r2, [pc, #20]	; (d5b14 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d5afe:	e7ef      	b.n	d5ae0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d5b00:	000ddcb6 	.word	0x000ddcb6
   d5b04:	000dd77f 	.word	0x000dd77f
   d5b08:	000ddcb2 	.word	0x000ddcb2
   d5b0c:	000ddcae 	.word	0x000ddcae
   d5b10:	000ddccc 	.word	0x000ddccc
   d5b14:	000ddca5 	.word	0x000ddca5

000d5b18 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d5b18:	f04f 33ff 	mov.w	r3, #4294967295
   d5b1c:	6103      	str	r3, [r0, #16]
{ }
   d5b1e:	4770      	bx	lr

000d5b20 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d5b20:	6880      	ldr	r0, [r0, #8]
   d5b22:	4770      	bx	lr

000d5b24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d5b24:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d5b26:	4c0b      	ldr	r4, [pc, #44]	; (d5b54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d5b28:	7821      	ldrb	r1, [r4, #0]
   d5b2a:	f3bf 8f5b 	dmb	ish
   d5b2e:	f011 0101 	ands.w	r1, r1, #1
   d5b32:	d10b      	bne.n	d5b4c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5b34:	4620      	mov	r0, r4
   d5b36:	9101      	str	r1, [sp, #4]
   d5b38:	f7fe fabe 	bl	d40b8 <__cxa_guard_acquire>
   d5b3c:	9901      	ldr	r1, [sp, #4]
   d5b3e:	b128      	cbz	r0, d5b4c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5b40:	4805      	ldr	r0, [pc, #20]	; (d5b58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d5b42:	f002 fc57 	bl	d83f4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5b46:	4620      	mov	r0, r4
   d5b48:	f7fe fabb 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d5b4c:	4802      	ldr	r0, [pc, #8]	; (d5b58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d5b4e:	b002      	add	sp, #8
   d5b50:	bd10      	pop	{r4, pc}
   d5b52:	bf00      	nop
   d5b54:	2003e57c 	.word	0x2003e57c
   d5b58:	2003e580 	.word	0x2003e580

000d5b5c <_ZN15Adafruit_BME2807spixferEh>:
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sck == -1)
   d5b60:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5b64:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5b66:	4605      	mov	r5, r0
   d5b68:	460f      	mov	r7, r1
    if (_sck == -1)
   d5b6a:	d106      	bne.n	d5b7a <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5b6c:	f7ff ffda 	bl	d5b24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5b70:	4639      	mov	r1, r7
}
   d5b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d5b76:	f002 bcdf 	b.w	d8538 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d5b7a:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d5b7c:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d5b7e:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d5b82:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d5b86:	2100      	movs	r1, #0
   d5b88:	b280      	uxth	r0, r0
   d5b8a:	f003 ff2a 	bl	d99e2 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d5b8e:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d5b92:	fa08 f106 	lsl.w	r1, r8, r6
   d5b96:	4039      	ands	r1, r7
   d5b98:	b280      	uxth	r0, r0
   d5b9a:	f003 ff22 	bl	d99e2 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d5b9e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d5ba2:	2101      	movs	r1, #1
   d5ba4:	b280      	uxth	r0, r0
   d5ba6:	f003 ff1c 	bl	d99e2 <digitalWrite>
        if (digitalRead(_miso))
   d5baa:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d5bae:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d5bb0:	b280      	uxth	r0, r0
        reply <<= 1;
   d5bb2:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d5bb4:	f003 ff2e 	bl	d9a14 <digitalRead>
   d5bb8:	b108      	cbz	r0, d5bbe <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d5bba:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d5bbe:	3e01      	subs	r6, #1
   d5bc0:	d2df      	bcs.n	d5b82 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d5bc2:	4620      	mov	r0, r4
   d5bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5bc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d5bc8:	b508      	push	{r3, lr}
        instance().endTransaction();
   d5bca:	f7ff ffab 	bl	d5b24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d5bce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d5bd2:	f002 bc2a 	b.w	d842a <_ZN8SPIClass14endTransactionEv>

000d5bd6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d5bd6:	b507      	push	{r0, r1, r2, lr}
   d5bd8:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d5bda:	f7ff ffa3 	bl	d5b24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5bde:	9901      	ldr	r1, [sp, #4]
    }
   d5be0:	b003      	add	sp, #12
   d5be2:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d5be6:	f002 bc39 	b.w	d845c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d5bec <_ZN15Adafruit_BME2806read24Eh>:
{
   d5bec:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5bee:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5bf2:	3301      	adds	r3, #1
{
   d5bf4:	b085      	sub	sp, #20
   d5bf6:	4604      	mov	r4, r0
   d5bf8:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5bfa:	d123      	bne.n	d5c44 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5bfc:	7901      	ldrb	r1, [r0, #4]
   d5bfe:	6800      	ldr	r0, [r0, #0]
   d5c00:	f003 fde6 	bl	d97d0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5c04:	6820      	ldr	r0, [r4, #0]
   d5c06:	6803      	ldr	r3, [r0, #0]
   d5c08:	4629      	mov	r1, r5
   d5c0a:	689b      	ldr	r3, [r3, #8]
   d5c0c:	4798      	blx	r3
        _wire -> endTransmission();
   d5c0e:	6820      	ldr	r0, [r4, #0]
   d5c10:	f003 fde6 	bl	d97e0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d5c14:	7921      	ldrb	r1, [r4, #4]
   d5c16:	6820      	ldr	r0, [r4, #0]
   d5c18:	2203      	movs	r2, #3
   d5c1a:	f003 fdd6 	bl	d97ca <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d5c1e:	6820      	ldr	r0, [r4, #0]
   d5c20:	6803      	ldr	r3, [r0, #0]
   d5c22:	695b      	ldr	r3, [r3, #20]
   d5c24:	4798      	blx	r3
        value <<= 8;
   d5c26:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5c28:	6820      	ldr	r0, [r4, #0]
   d5c2a:	6803      	ldr	r3, [r0, #0]
   d5c2c:	695b      	ldr	r3, [r3, #20]
   d5c2e:	4798      	blx	r3
   d5c30:	4328      	orrs	r0, r5
        value <<= 8;
   d5c32:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5c34:	6820      	ldr	r0, [r4, #0]
   d5c36:	6803      	ldr	r3, [r0, #0]
   d5c38:	695b      	ldr	r3, [r3, #20]
   d5c3a:	4798      	blx	r3
   d5c3c:	4305      	orrs	r5, r0
}
   d5c3e:	4628      	mov	r0, r5
   d5c40:	b005      	add	sp, #20
   d5c42:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5c44:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5c48:	3301      	adds	r3, #1
   d5c4a:	d10c      	bne.n	d5c66 <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d5c4c:	4b1a      	ldr	r3, [pc, #104]	; (d5cb8 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d5c4e:	9300      	str	r3, [sp, #0]
   d5c50:	2300      	movs	r3, #0
   d5c52:	f88d 3004 	strb.w	r3, [sp, #4]
   d5c56:	4b19      	ldr	r3, [pc, #100]	; (d5cbc <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d5c58:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5c5a:	4668      	mov	r0, sp
   d5c5c:	2301      	movs	r3, #1
   d5c5e:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5c62:	f7ff ffb8 	bl	d5bd6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5c66:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5c6a:	2100      	movs	r1, #0
   d5c6c:	b280      	uxth	r0, r0
   d5c6e:	f003 feb8 	bl	d99e2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5c72:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5c76:	4620      	mov	r0, r4
   d5c78:	f7ff ff70 	bl	d5b5c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5c7c:	2100      	movs	r1, #0
   d5c7e:	4620      	mov	r0, r4
   d5c80:	f7ff ff6c 	bl	d5b5c <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d5c84:	2100      	movs	r1, #0
        value <<= 8;
   d5c86:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5c88:	4620      	mov	r0, r4
   d5c8a:	f7ff ff67 	bl	d5b5c <_ZN15Adafruit_BME2807spixferEh>
   d5c8e:	4328      	orrs	r0, r5
        value <<= 8;
   d5c90:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5c92:	2100      	movs	r1, #0
   d5c94:	4620      	mov	r0, r4
   d5c96:	f7ff ff61 	bl	d5b5c <_ZN15Adafruit_BME2807spixferEh>
   d5c9a:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d5c9c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5ca0:	2101      	movs	r1, #1
   d5ca2:	b280      	uxth	r0, r0
   d5ca4:	f003 fe9d 	bl	d99e2 <digitalWrite>
        if (_sck == -1)
   d5ca8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5cac:	3301      	adds	r3, #1
   d5cae:	d1c6      	bne.n	d5c3e <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d5cb0:	f7ff ff8a 	bl	d5bc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d5cb4:	e7c3      	b.n	d5c3e <_ZN15Adafruit_BME2806read24Eh+0x52>
   d5cb6:	bf00      	nop
   d5cb8:	000ddcf4 	.word	0x000ddcf4
   d5cbc:	0007a120 	.word	0x0007a120

000d5cc0 <_ZN15Adafruit_BME28015readTemperatureEv>:
{
   d5cc0:	b510      	push	{r4, lr}
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5cc2:	21fa      	movs	r1, #250	; 0xfa
{
   d5cc4:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5cc6:	f7ff ff91 	bl	d5bec <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d5cca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d5cce:	d01e      	beq.n	d5d0e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5cd0:	8aa1      	ldrh	r1, [r4, #20]
    return T/100;
   d5cd2:	ed9f 7a10 	vldr	s14, [pc, #64]	; d5d14 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5cd6:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5cd8:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5cdc:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d5ce0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5ce4:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5ce6:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d5ce8:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d5cec:	1312      	asrs	r2, r2, #12
   d5cee:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5cf0:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d5cf2:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d5cf6:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d5cf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5cfc:	3380      	adds	r3, #128	; 0x80
   d5cfe:	121b      	asrs	r3, r3, #8
   d5d00:	ee07 3a90 	vmov	s15, r3
   d5d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d5d08:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d5d0c:	bd10      	pop	{r4, pc}
        return NAN;
   d5d0e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5d18 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d5d12:	e7fb      	b.n	d5d0c <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d5d14:	42c80000 	.word	0x42c80000
   d5d18:	7fc00000 	.word	0x7fc00000

000d5d1c <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   d5d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5d20:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5d22:	f7ff ffcd 	bl	d5cc0 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5d26:	21f7      	movs	r1, #247	; 0xf7
   d5d28:	4620      	mov	r0, r4
   d5d2a:	f7ff ff5f 	bl	d5bec <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5d2e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5d32:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5d34:	f000 80bf 	beq.w	d5eb6 <_ZN15Adafruit_BME28012readPressureEv+0x19a>
    var1 = ((int64_t)t_fine) - 128000;
   d5d38:	68e0      	ldr	r0, [r4, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5d3a:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
   d5d3e:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d5d42:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d5d46:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5d4a:	fba3 8903 	umull	r8, r9, r3, r3
   d5d4e:	fb03 f102 	mul.w	r1, r3, r2
   d5d52:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5d56:	17f7      	asrs	r7, r6, #31
   d5d58:	fb06 f102 	mul.w	r1, r6, r2
   d5d5c:	fb03 1107 	mla	r1, r3, r7, r1
   d5d60:	fba6 6703 	umull	r6, r7, r6, r3
   d5d64:	440f      	add	r7, r1
   d5d66:	0339      	lsls	r1, r7, #12
   d5d68:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d5d6c:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5d6e:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
   d5d72:	17f7      	asrs	r7, r6, #31
   d5d74:	fb06 fc09 	mul.w	ip, r6, r9
   d5d78:	fb08 cc07 	mla	ip, r8, r7, ip
   d5d7c:	fba6 6708 	umull	r6, r7, r6, r8
   d5d80:	4467      	add	r7, ip
   d5d82:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d5d86:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5d8a:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5d8c:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d5d90:	eb1c 0000 	adds.w	r0, ip, r0
   d5d94:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5d98:	3000      	adds	r0, #0
   d5d9a:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d5d9e:	fba0 0106 	umull	r0, r1, r0, r6
   d5da2:	fb06 110e 	mla	r1, r6, lr, r1
   d5da6:	104e      	asrs	r6, r1, #1
   d5da8:	17cf      	asrs	r7, r1, #31
    if (var1 == 0) {
   d5daa:	ea56 0107 	orrs.w	r1, r6, r7
   d5dae:	f000 8085 	beq.w	d5ebc <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5db2:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
   d5db6:	fb00 fc09 	mul.w	ip, r0, r9
   d5dba:	17c1      	asrs	r1, r0, #31
   d5dbc:	fb08 cc01 	mla	ip, r8, r1, ip
   d5dc0:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5dc4:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
   d5dc8:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d5dcc:	fb08 f202 	mul.w	r2, r8, r2
   d5dd0:	fb03 2209 	mla	r2, r3, r9, r2
   d5dd4:	fba8 8903 	umull	r8, r9, r8, r3
   d5dd8:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5dda:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5ddc:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d5de0:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d5de4:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5de6:	1812      	adds	r2, r2, r0
    p = 1048576 - adc_P;
   d5de8:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5dec:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5df0:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5df4:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5df8:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d5dfa:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5dfc:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d5dfe:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d5e02:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5e06:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d5e0a:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d5e0e:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d5e12:	1ac0      	subs	r0, r0, r3
   d5e14:	f640 4335 	movw	r3, #3125	; 0xc35
   d5e18:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d5e1c:	fba0 0103 	umull	r0, r1, r0, r3
   d5e20:	fb03 110e 	mla	r1, r3, lr, r1
   d5e24:	4632      	mov	r2, r6
   d5e26:	463b      	mov	r3, r7
   d5e28:	f007 f8fa 	bl	dd020 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5e2c:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d5e30:	134d      	asrs	r5, r1, #13
   d5e32:	0b46      	lsrs	r6, r0, #13
   d5e34:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d5e38:	fb02 f705 	mul.w	r7, r2, r5
   d5e3c:	17d3      	asrs	r3, r2, #31
   d5e3e:	fb06 7703 	mla	r7, r6, r3, r7
   d5e42:	fba2 2306 	umull	r2, r3, r2, r6
   d5e46:	443b      	add	r3, r7
   d5e48:	4355      	muls	r5, r2
   d5e4a:	fb06 5503 	mla	r5, r6, r3, r5
   d5e4e:	fba2 2306 	umull	r2, r3, r2, r6
   d5e52:	442b      	add	r3, r5
   d5e54:	0e55      	lsrs	r5, r2, #25
   d5e56:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5e5a:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5e5e:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   d5e62:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5e64:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5e68:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5e6c:	17d3      	asrs	r3, r2, #31
   d5e6e:	4351      	muls	r1, r2
   d5e70:	fb00 1103 	mla	r1, r0, r3, r1
   d5e74:	fba2 2300 	umull	r2, r3, r2, r0
   d5e78:	440b      	add	r3, r1
   d5e7a:	0cd1      	lsrs	r1, r2, #19
   d5e7c:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5e80:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5e82:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5e86:	eb46 0300 	adc.w	r3, r6, r0
   d5e8a:	0a2a      	lsrs	r2, r5, #8
   d5e8c:	17e5      	asrs	r5, r4, #31
   d5e8e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d5e92:	1219      	asrs	r1, r3, #8
   d5e94:	0120      	lsls	r0, r4, #4
   d5e96:	012b      	lsls	r3, r5, #4
   d5e98:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d5e9c:	1880      	adds	r0, r0, r2
   d5e9e:	eb43 0101 	adc.w	r1, r3, r1
   d5ea2:	f007 f87f 	bl	dcfa4 <__aeabi_l2f>
   d5ea6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5ec4 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d5eaa:	ee07 0a90 	vmov	s15, r0
   d5eae:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d5eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d5eb6:	ed9f 0a04 	vldr	s0, [pc, #16]	; d5ec8 <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d5eba:	e7fa      	b.n	d5eb2 <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d5ebc:	ed9f 0a03 	vldr	s0, [pc, #12]	; d5ecc <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d5ec0:	e7f7      	b.n	d5eb2 <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d5ec2:	bf00      	nop
   d5ec4:	3b800000 	.word	0x3b800000
   d5ec8:	7fc00000 	.word	0x7fc00000
   d5ecc:	00000000 	.word	0x00000000

000d5ed0 <_ZN15Adafruit_BME28012readAltitudeEf>:
{
   d5ed0:	b508      	push	{r3, lr}
   d5ed2:	ed2d 8b02 	vpush	{d8}
   d5ed6:	eeb0 8a40 	vmov.f32	s16, s0
    float atmospheric = readPressure() / 100.0F;
   d5eda:	f7ff ff1f 	bl	d5d1c <_ZN15Adafruit_BME28012readPressureEv>
   d5ede:	ed9f 7a16 	vldr	s14, [pc, #88]	; d5f38 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d5ee2:	eec0 7a07 	vdiv.f32	s15, s0, s14
      return pow(__type(__x), __type(__y));
   d5ee6:	eec7 7a88 	vdiv.f32	s15, s15, s16
   d5eea:	ee17 0a90 	vmov	r0, s15
   d5eee:	f006 fbe9 	bl	dc6c4 <__aeabi_f2d>
   d5ef2:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d5f28 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d5ef6:	ec41 0b10 	vmov	d0, r0, r1
   d5efa:	f003 fea5 	bl	d9c48 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d5efe:	490f      	ldr	r1, [pc, #60]	; (d5f3c <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d5f00:	ec53 2b10 	vmov	r2, r3, d0
   d5f04:	2000      	movs	r0, #0
   d5f06:	f006 fa7d 	bl	dc404 <__aeabi_dsub>
   d5f0a:	a309      	add	r3, pc, #36	; (adr r3, d5f30 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d5f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f10:	f006 fc30 	bl	dc774 <__aeabi_dmul>
   d5f14:	f006 ff26 	bl	dcd64 <__aeabi_d2f>
}
   d5f18:	ecbd 8b02 	vpop	{d8}
   d5f1c:	ee00 0a10 	vmov	s0, r0
   d5f20:	bd08      	pop	{r3, pc}
   d5f22:	bf00      	nop
   d5f24:	f3af 8000 	nop.w
   d5f28:	1a36e2eb 	.word	0x1a36e2eb
   d5f2c:	3fc85bc0 	.word	0x3fc85bc0
   d5f30:	00000000 	.word	0x00000000
   d5f34:	40e5a540 	.word	0x40e5a540
   d5f38:	42c80000 	.word	0x42c80000
   d5f3c:	3ff00000 	.word	0x3ff00000

000d5f40 <_ZN15Adafruit_BME2806read16Eh>:
{
   d5f40:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5f42:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5f46:	3301      	adds	r3, #1
{
   d5f48:	b085      	sub	sp, #20
   d5f4a:	4604      	mov	r4, r0
   d5f4c:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5f4e:	d11f      	bne.n	d5f90 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5f50:	7901      	ldrb	r1, [r0, #4]
   d5f52:	6800      	ldr	r0, [r0, #0]
   d5f54:	f003 fc3c 	bl	d97d0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5f58:	6820      	ldr	r0, [r4, #0]
   d5f5a:	6803      	ldr	r3, [r0, #0]
   d5f5c:	4629      	mov	r1, r5
   d5f5e:	689b      	ldr	r3, [r3, #8]
   d5f60:	4798      	blx	r3
        _wire -> endTransmission();
   d5f62:	6820      	ldr	r0, [r4, #0]
   d5f64:	f003 fc3c 	bl	d97e0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d5f68:	7921      	ldrb	r1, [r4, #4]
   d5f6a:	6820      	ldr	r0, [r4, #0]
   d5f6c:	2202      	movs	r2, #2
   d5f6e:	f003 fc2c 	bl	d97ca <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d5f72:	6820      	ldr	r0, [r4, #0]
   d5f74:	6803      	ldr	r3, [r0, #0]
   d5f76:	695b      	ldr	r3, [r3, #20]
   d5f78:	4798      	blx	r3
   d5f7a:	4605      	mov	r5, r0
   d5f7c:	6820      	ldr	r0, [r4, #0]
   d5f7e:	6803      	ldr	r3, [r0, #0]
   d5f80:	695b      	ldr	r3, [r3, #20]
   d5f82:	4798      	blx	r3
   d5f84:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5f88:	b285      	uxth	r5, r0
}
   d5f8a:	4628      	mov	r0, r5
   d5f8c:	b005      	add	sp, #20
   d5f8e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5f90:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5f94:	3301      	adds	r3, #1
   d5f96:	d10c      	bne.n	d5fb2 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d5f98:	4b18      	ldr	r3, [pc, #96]	; (d5ffc <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d5f9a:	9300      	str	r3, [sp, #0]
   d5f9c:	2300      	movs	r3, #0
   d5f9e:	f88d 3004 	strb.w	r3, [sp, #4]
   d5fa2:	4b17      	ldr	r3, [pc, #92]	; (d6000 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d5fa4:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5fa6:	4668      	mov	r0, sp
   d5fa8:	2301      	movs	r3, #1
   d5faa:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5fae:	f7ff fe12 	bl	d5bd6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5fb2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5fb6:	2100      	movs	r1, #0
   d5fb8:	b280      	uxth	r0, r0
   d5fba:	f003 fd12 	bl	d99e2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5fbe:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5fc2:	4620      	mov	r0, r4
   d5fc4:	f7ff fdca 	bl	d5b5c <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5fc8:	2100      	movs	r1, #0
   d5fca:	4620      	mov	r0, r4
   d5fcc:	f7ff fdc6 	bl	d5b5c <_ZN15Adafruit_BME2807spixferEh>
   d5fd0:	2100      	movs	r1, #0
   d5fd2:	4605      	mov	r5, r0
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	f7ff fdc1 	bl	d5b5c <_ZN15Adafruit_BME2807spixferEh>
   d5fda:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5fde:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d5fe0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5fe4:	2101      	movs	r1, #1
   d5fe6:	b280      	uxth	r0, r0
   d5fe8:	f003 fcfb 	bl	d99e2 <digitalWrite>
        if (_sck == -1)
   d5fec:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5ff0:	3301      	adds	r3, #1
   d5ff2:	d1ca      	bne.n	d5f8a <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d5ff4:	f7ff fde8 	bl	d5bc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5ff8:	e7c7      	b.n	d5f8a <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d5ffa:	bf00      	nop
   d5ffc:	000ddcf4 	.word	0x000ddcf4
   d6000:	0007a120 	.word	0x0007a120

000d6004 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d6004:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d6006:	f7ff ff9b 	bl	d5f40 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d600a:	ba40      	rev16	r0, r0
}
   d600c:	b280      	uxth	r0, r0
   d600e:	bd08      	pop	{r3, pc}

000d6010 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
   d6010:	b538      	push	{r3, r4, r5, lr}
   d6012:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d6014:	f7ff fe54 	bl	d5cc0 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d6018:	21fd      	movs	r1, #253	; 0xfd
   d601a:	4620      	mov	r0, r4
   d601c:	f7ff ff90 	bl	d5f40 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d6020:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d6024:	d038      	beq.n	d6098 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d6026:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d602a:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d602c:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d6030:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d6032:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d6036:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d603a:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d603e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d6042:	13d9      	asrs	r1, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d6044:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d6048:	4353      	muls	r3, r2
   d604a:	12db      	asrs	r3, r3, #11
   d604c:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d6050:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d6054:	4353      	muls	r3, r2
   d6056:	129b      	asrs	r3, r3, #10
   d6058:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d605a:	129b      	asrs	r3, r3, #10
   d605c:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d6060:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d6064:	4353      	muls	r3, r2
   d6066:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d606a:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d606c:	434b      	muls	r3, r1
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d606e:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d6070:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d6074:	4352      	muls	r2, r2
   d6076:	11d2      	asrs	r2, r2, #7
   d6078:	434a      	muls	r2, r1
   d607a:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d607e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d6082:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d6086:	bfa8      	it	ge
   d6088:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d608c:	131b      	asrs	r3, r3, #12
   d608e:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d6092:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d6096:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d6098:	ed9f 0a01 	vldr	s0, [pc, #4]	; d60a0 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d609c:	e7fb      	b.n	d6096 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d609e:	bf00      	nop
   d60a0:	7fc00000 	.word	0x7fc00000

000d60a4 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d60a4:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d60a6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d60aa:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d60ac:	b085      	sub	sp, #20
   d60ae:	4604      	mov	r4, r0
   d60b0:	460d      	mov	r5, r1
    if (_cs == -1) {
   d60b2:	d118      	bne.n	d60e6 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d60b4:	7901      	ldrb	r1, [r0, #4]
   d60b6:	6800      	ldr	r0, [r0, #0]
   d60b8:	f003 fb8a 	bl	d97d0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d60bc:	6820      	ldr	r0, [r4, #0]
   d60be:	6803      	ldr	r3, [r0, #0]
   d60c0:	4629      	mov	r1, r5
   d60c2:	689b      	ldr	r3, [r3, #8]
   d60c4:	4798      	blx	r3
        _wire -> endTransmission();
   d60c6:	6820      	ldr	r0, [r4, #0]
   d60c8:	f003 fb8a 	bl	d97e0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d60cc:	7921      	ldrb	r1, [r4, #4]
   d60ce:	6820      	ldr	r0, [r4, #0]
   d60d0:	2201      	movs	r2, #1
   d60d2:	f003 fb7a 	bl	d97ca <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d60d6:	6820      	ldr	r0, [r4, #0]
   d60d8:	6803      	ldr	r3, [r0, #0]
   d60da:	695b      	ldr	r3, [r3, #20]
   d60dc:	4798      	blx	r3
   d60de:	b2c5      	uxtb	r5, r0
}
   d60e0:	4628      	mov	r0, r5
   d60e2:	b005      	add	sp, #20
   d60e4:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d60e6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d60ea:	3301      	adds	r3, #1
   d60ec:	d10c      	bne.n	d6108 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d60ee:	4b15      	ldr	r3, [pc, #84]	; (d6144 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d60f0:	9300      	str	r3, [sp, #0]
   d60f2:	2300      	movs	r3, #0
   d60f4:	f88d 3004 	strb.w	r3, [sp, #4]
   d60f8:	4b13      	ldr	r3, [pc, #76]	; (d6148 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d60fa:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d60fc:	4668      	mov	r0, sp
   d60fe:	2301      	movs	r3, #1
   d6100:	f8ad 300c 	strh.w	r3, [sp, #12]
   d6104:	f7ff fd67 	bl	d5bd6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d6108:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d610c:	2100      	movs	r1, #0
   d610e:	b280      	uxth	r0, r0
   d6110:	f003 fc67 	bl	d99e2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d6114:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d6118:	4620      	mov	r0, r4
   d611a:	f7ff fd1f 	bl	d5b5c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d611e:	2100      	movs	r1, #0
   d6120:	4620      	mov	r0, r4
   d6122:	f7ff fd1b 	bl	d5b5c <_ZN15Adafruit_BME2807spixferEh>
   d6126:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d6128:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d612c:	2101      	movs	r1, #1
   d612e:	b280      	uxth	r0, r0
   d6130:	f003 fc57 	bl	d99e2 <digitalWrite>
        if (_sck == -1)
   d6134:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d6138:	3301      	adds	r3, #1
   d613a:	d1d1      	bne.n	d60e0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d613c:	f7ff fd44 	bl	d5bc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d6140:	e7ce      	b.n	d60e0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d6142:	bf00      	nop
   d6144:	000ddcf4 	.word	0x000ddcf4
   d6148:	0007a120 	.word	0x0007a120

000d614c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d614c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d614e:	21f3      	movs	r1, #243	; 0xf3
   d6150:	f7ff ffa8 	bl	d60a4 <_ZN15Adafruit_BME2805read8Eh>
}
   d6154:	f000 0001 	and.w	r0, r0, #1
   d6158:	bd08      	pop	{r3, pc}

000d615a <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d615a:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d615c:	2188      	movs	r1, #136	; 0x88
{
   d615e:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d6160:	f7ff ff50 	bl	d6004 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d6164:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d6166:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d6168:	4620      	mov	r0, r4
   d616a:	f7ff ff4b 	bl	d6004 <_ZN15Adafruit_BME2809read16_LEEh>
   d616e:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d6170:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d6172:	4620      	mov	r0, r4
   d6174:	f7ff ff46 	bl	d6004 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d6178:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d617a:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d617c:	4620      	mov	r0, r4
   d617e:	f7ff ff41 	bl	d6004 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d6182:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d6184:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d6186:	4620      	mov	r0, r4
   d6188:	f7ff ff3c 	bl	d6004 <_ZN15Adafruit_BME2809read16_LEEh>
   d618c:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d618e:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d6190:	4620      	mov	r0, r4
   d6192:	f7ff ff37 	bl	d6004 <_ZN15Adafruit_BME2809read16_LEEh>
   d6196:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d6198:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d619a:	4620      	mov	r0, r4
   d619c:	f7ff ff32 	bl	d6004 <_ZN15Adafruit_BME2809read16_LEEh>
   d61a0:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d61a2:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d61a4:	4620      	mov	r0, r4
   d61a6:	f7ff ff2d 	bl	d6004 <_ZN15Adafruit_BME2809read16_LEEh>
   d61aa:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d61ac:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d61ae:	4620      	mov	r0, r4
   d61b0:	f7ff ff28 	bl	d6004 <_ZN15Adafruit_BME2809read16_LEEh>
   d61b4:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d61b6:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d61b8:	4620      	mov	r0, r4
   d61ba:	f7ff ff23 	bl	d6004 <_ZN15Adafruit_BME2809read16_LEEh>
   d61be:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d61c0:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d61c2:	4620      	mov	r0, r4
   d61c4:	f7ff ff1e 	bl	d6004 <_ZN15Adafruit_BME2809read16_LEEh>
   d61c8:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d61ca:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d61cc:	4620      	mov	r0, r4
   d61ce:	f7ff ff19 	bl	d6004 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d61d2:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d61d4:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d61d6:	4620      	mov	r0, r4
   d61d8:	f7ff ff64 	bl	d60a4 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d61dc:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d61de:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d61e2:	4620      	mov	r0, r4
   d61e4:	f7ff ff0e 	bl	d6004 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d61e8:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d61ea:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d61ec:	4620      	mov	r0, r4
   d61ee:	f7ff ff59 	bl	d60a4 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d61f2:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d61f4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d61f8:	4620      	mov	r0, r4
   d61fa:	f7ff ff53 	bl	d60a4 <_ZN15Adafruit_BME2805read8Eh>
   d61fe:	21e5      	movs	r1, #229	; 0xe5
   d6200:	4605      	mov	r5, r0
   d6202:	4620      	mov	r0, r4
   d6204:	f7ff ff4e 	bl	d60a4 <_ZN15Adafruit_BME2805read8Eh>
   d6208:	f000 030f 	and.w	r3, r0, #15
   d620c:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d6210:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d6212:	21e6      	movs	r1, #230	; 0xe6
   d6214:	4620      	mov	r0, r4
   d6216:	f7ff ff45 	bl	d60a4 <_ZN15Adafruit_BME2805read8Eh>
   d621a:	21e5      	movs	r1, #229	; 0xe5
   d621c:	4605      	mov	r5, r0
   d621e:	4620      	mov	r0, r4
   d6220:	f7ff ff40 	bl	d60a4 <_ZN15Adafruit_BME2805read8Eh>
   d6224:	1103      	asrs	r3, r0, #4
   d6226:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d622a:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d622c:	21e7      	movs	r1, #231	; 0xe7
   d622e:	4620      	mov	r0, r4
   d6230:	f7ff ff38 	bl	d60a4 <_ZN15Adafruit_BME2805read8Eh>
   d6234:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d6238:	bd38      	pop	{r3, r4, r5, pc}
	...

000d623c <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d623c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d623e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d6242:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d6244:	4604      	mov	r4, r0
   d6246:	460e      	mov	r6, r1
   d6248:	4615      	mov	r5, r2
    if (_cs == -1) {
   d624a:	d112      	bne.n	d6272 <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d624c:	7901      	ldrb	r1, [r0, #4]
   d624e:	6800      	ldr	r0, [r0, #0]
   d6250:	f003 fabe 	bl	d97d0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d6254:	6820      	ldr	r0, [r4, #0]
   d6256:	6803      	ldr	r3, [r0, #0]
   d6258:	4631      	mov	r1, r6
   d625a:	689b      	ldr	r3, [r3, #8]
   d625c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d625e:	6820      	ldr	r0, [r4, #0]
   d6260:	6803      	ldr	r3, [r0, #0]
   d6262:	4629      	mov	r1, r5
   d6264:	689b      	ldr	r3, [r3, #8]
   d6266:	4798      	blx	r3
        _wire -> endTransmission();
   d6268:	6820      	ldr	r0, [r4, #0]
   d626a:	f003 fab9 	bl	d97e0 <_ZN7TwoWire15endTransmissionEv>
}
   d626e:	b004      	add	sp, #16
   d6270:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d6272:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d6276:	3301      	adds	r3, #1
   d6278:	d10c      	bne.n	d6294 <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d627a:	4b14      	ldr	r3, [pc, #80]	; (d62cc <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d627c:	9300      	str	r3, [sp, #0]
   d627e:	2300      	movs	r3, #0
   d6280:	f88d 3004 	strb.w	r3, [sp, #4]
   d6284:	4b12      	ldr	r3, [pc, #72]	; (d62d0 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d6286:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d6288:	4668      	mov	r0, sp
   d628a:	2301      	movs	r3, #1
   d628c:	f8ad 300c 	strh.w	r3, [sp, #12]
   d6290:	f7ff fca1 	bl	d5bd6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d6294:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6298:	2100      	movs	r1, #0
   d629a:	b280      	uxth	r0, r0
   d629c:	f003 fba1 	bl	d99e2 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d62a0:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d62a4:	4620      	mov	r0, r4
   d62a6:	f7ff fc59 	bl	d5b5c <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d62aa:	4629      	mov	r1, r5
   d62ac:	4620      	mov	r0, r4
   d62ae:	f7ff fc55 	bl	d5b5c <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d62b2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d62b6:	2101      	movs	r1, #1
   d62b8:	b280      	uxth	r0, r0
   d62ba:	f003 fb92 	bl	d99e2 <digitalWrite>
    if (_sck == -1)
   d62be:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d62c2:	3301      	adds	r3, #1
   d62c4:	d1d3      	bne.n	d626e <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d62c6:	f7ff fc7f 	bl	d5bc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d62ca:	e7d0      	b.n	d626e <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d62cc:	000ddcf4 	.word	0x000ddcf4
   d62d0:	0007a120 	.word	0x0007a120

000d62d4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d62d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d62d6:	00db      	lsls	r3, r3, #3
   d62d8:	f002 0207 	and.w	r2, r2, #7
   d62dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d62e0:	4313      	orrs	r3, r2
   d62e2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d62e6:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d62ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d62ee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d62f2:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d62f6:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d62fa:	f366 1347 	bfi	r3, r6, #5, #3
   d62fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d6302:	00ed      	lsls	r5, r5, #3
   d6304:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d6308:	f007 0707 	and.w	r7, r7, #7
   d630c:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d6310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d6314:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d6316:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d6318:	431d      	orrs	r5, r3
   d631a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d631e:	f006 0207 	and.w	r2, r6, #7
   d6322:	21f2      	movs	r1, #242	; 0xf2
   d6324:	f7ff ff8a 	bl	d623c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d6328:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d632c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d6330:	f002 0107 	and.w	r1, r2, #7
   d6334:	009b      	lsls	r3, r3, #2
   d6336:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d633a:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d633e:	4620      	mov	r0, r4
   d6340:	21f5      	movs	r1, #245	; 0xf5
   d6342:	f7ff ff7b 	bl	d623c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d6346:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d634a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d634e:	f002 0107 	and.w	r1, r2, #7
   d6352:	009b      	lsls	r3, r3, #2
   d6354:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d6358:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d635c:	4620      	mov	r0, r4
   d635e:	21f4      	movs	r1, #244	; 0xf4
}
   d6360:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d6364:	f7ff bf6a 	b.w	d623c <_ZN15Adafruit_BME2806write8Ehh>

000d6368 <_ZN15Adafruit_BME2804initEv>:
{
   d6368:	b530      	push	{r4, r5, lr}
   d636a:	4604      	mov	r4, r0
    if (_cs == -1) {
   d636c:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d6370:	1c42      	adds	r2, r0, #1
{
   d6372:	b085      	sub	sp, #20
    if (_cs == -1) {
   d6374:	d119      	bne.n	d63aa <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d6376:	6820      	ldr	r0, [r4, #0]
   d6378:	f003 f9f8 	bl	d976c <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d637c:	21d0      	movs	r1, #208	; 0xd0
   d637e:	4620      	mov	r0, r4
   d6380:	f7ff fe90 	bl	d60a4 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d6384:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d6386:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d6388:	d145      	bne.n	d6416 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d638a:	4620      	mov	r0, r4
   d638c:	22b6      	movs	r2, #182	; 0xb6
   d638e:	21e0      	movs	r1, #224	; 0xe0
   d6390:	f7ff ff54 	bl	d623c <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d6394:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d6398:	f002 fc48 	bl	d8c2c <delay>
    while (isReadingCalibration())
   d639c:	4620      	mov	r0, r4
   d639e:	f7ff fed5 	bl	d614c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d63a2:	4605      	mov	r5, r0
   d63a4:	b328      	cbz	r0, d63f2 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d63a6:	2064      	movs	r0, #100	; 0x64
   d63a8:	e7f6      	b.n	d6398 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d63aa:	2101      	movs	r1, #1
   d63ac:	b280      	uxth	r0, r0
   d63ae:	f003 fb18 	bl	d99e2 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d63b2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d63b6:	2101      	movs	r1, #1
   d63b8:	b280      	uxth	r0, r0
   d63ba:	f003 fb01 	bl	d99c0 <pinMode>
        if (_sck == -1) {
   d63be:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d63c2:	1c43      	adds	r3, r0, #1
   d63c4:	d104      	bne.n	d63d0 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d63c6:	f7ff fbad 	bl	d5b24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d63ca:	f002 f81d 	bl	d8408 <_ZN8SPIClass5beginEv>
    }
   d63ce:	e7d5      	b.n	d637c <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d63d0:	2101      	movs	r1, #1
   d63d2:	b280      	uxth	r0, r0
   d63d4:	f003 faf4 	bl	d99c0 <pinMode>
            pinMode(_mosi, OUTPUT);
   d63d8:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d63dc:	2101      	movs	r1, #1
   d63de:	b280      	uxth	r0, r0
   d63e0:	f003 faee 	bl	d99c0 <pinMode>
            pinMode(_miso, INPUT);
   d63e4:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d63e8:	2100      	movs	r1, #0
   d63ea:	b280      	uxth	r0, r0
   d63ec:	f003 fae8 	bl	d99c0 <pinMode>
   d63f0:	e7c4      	b.n	d637c <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d63f2:	4620      	mov	r0, r4
   d63f4:	f7ff feb1 	bl	d615a <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d63f8:	2305      	movs	r3, #5
   d63fa:	9300      	str	r3, [sp, #0]
   d63fc:	461a      	mov	r2, r3
   d63fe:	2103      	movs	r1, #3
   d6400:	4620      	mov	r0, r4
   d6402:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d6406:	f7ff ff65 	bl	d62d4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d640a:	2064      	movs	r0, #100	; 0x64
   d640c:	f002 fc0e 	bl	d8c2c <delay>
   d6410:	2001      	movs	r0, #1
}
   d6412:	b005      	add	sp, #20
   d6414:	bd30      	pop	{r4, r5, pc}
        return false;
   d6416:	2000      	movs	r0, #0
   d6418:	e7fb      	b.n	d6412 <_ZN15Adafruit_BME2804initEv+0xaa>

000d641a <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d641a:	2377      	movs	r3, #119	; 0x77
{
   d641c:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d641e:	7103      	strb	r3, [r0, #4]
{
   d6420:	4604      	mov	r4, r0
	_wire = &Wire;
   d6422:	f003 fb51 	bl	d9ac8 <_Z19__fetch_global_Wirev>
   d6426:	6020      	str	r0, [r4, #0]
	status = init();
   d6428:	4620      	mov	r0, r4
   d642a:	f7ff ff9d 	bl	d6368 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d642e:	b930      	cbnz	r0, d643e <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d6430:	2376      	movs	r3, #118	; 0x76
   d6432:	7123      	strb	r3, [r4, #4]
 		status = init();
   d6434:	4620      	mov	r0, r4
}
   d6436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d643a:	f7ff bf95 	b.w	d6368 <_ZN15Adafruit_BME2804initEv>
}
   d643e:	bd10      	pop	{r4, pc}

000d6440 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   d6440:	b510      	push	{r4, lr}
   d6442:	4604      	mov	r4, r0
  if (_spiSetting) {
   d6444:	6840      	ldr	r0, [r0, #4]
   d6446:	b110      	cbz	r0, d644e <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   d6448:	6803      	ldr	r3, [r0, #0]
   d644a:	689b      	ldr	r3, [r3, #8]
   d644c:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   d644e:	4620      	mov	r0, r4
   d6450:	bd10      	pop	{r4, pc}

000d6452 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   d6452:	b538      	push	{r3, r4, r5, lr}
   d6454:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   d6456:	f990 000e 	ldrsb.w	r0, [r0, #14]
   d645a:	2101      	movs	r1, #1
   d645c:	b280      	uxth	r0, r0
   d645e:	f003 faaf 	bl	d99c0 <pinMode>
  digitalWrite(_cs, HIGH);
   d6462:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d6466:	2101      	movs	r1, #1
   d6468:	b280      	uxth	r0, r0
   d646a:	f003 faba 	bl	d99e2 <digitalWrite>

  if (_spi) { // hardware SPI
   d646e:	6825      	ldr	r5, [r4, #0]
   d6470:	b135      	cbz	r5, d6480 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   d6472:	4628      	mov	r0, r5
   d6474:	f001 ffc8 	bl	d8408 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   d6478:	2001      	movs	r0, #1
   d647a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   d647e:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   d6480:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d6484:	2101      	movs	r1, #1
   d6486:	b280      	uxth	r0, r0
   d6488:	f003 fa9a 	bl	d99c0 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   d648c:	7b63      	ldrb	r3, [r4, #13]
   d648e:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d6492:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   d6494:	bf94      	ite	ls
   d6496:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   d6498:	2101      	movhi	r1, #1
   d649a:	b280      	uxth	r0, r0
   d649c:	f003 faa1 	bl	d99e2 <digitalWrite>
    if (_mosi != -1) {
   d64a0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d64a4:	1c42      	adds	r2, r0, #1
   d64a6:	d009      	beq.n	d64bc <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   d64a8:	2101      	movs	r1, #1
   d64aa:	b280      	uxth	r0, r0
   d64ac:	f003 fa88 	bl	d99c0 <pinMode>
      digitalWrite(_mosi, HIGH);
   d64b0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d64b4:	2101      	movs	r1, #1
   d64b6:	b280      	uxth	r0, r0
   d64b8:	f003 fa93 	bl	d99e2 <digitalWrite>
    if (_miso != -1) {
   d64bc:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d64c0:	1c43      	adds	r3, r0, #1
   d64c2:	d0d9      	beq.n	d6478 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   d64c4:	2100      	movs	r1, #0
   d64c6:	b280      	uxth	r0, r0
   d64c8:	f003 fa7a 	bl	d99c0 <pinMode>
   d64cc:	e7d4      	b.n	d6478 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000d64d0 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d64d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d64d4:	4604      	mov	r4, r0
  if (_spi) {
   d64d6:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d64d8:	b085      	sub	sp, #20
   d64da:	460d      	mov	r5, r1
  if (_spi) {
   d64dc:	b140      	cbz	r0, d64f0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   d64de:	2300      	movs	r3, #0
   d64e0:	9300      	str	r3, [sp, #0]
   d64e2:	4613      	mov	r3, r2
   d64e4:	460a      	mov	r2, r1
   d64e6:	f002 f82d 	bl	d8544 <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   d64ea:	b005      	add	sp, #20
   d64ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   d64f0:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d64f2:	68a0      	ldr	r0, [r4, #8]
   d64f4:	4f48      	ldr	r7, [pc, #288]	; (d6618 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   d64f6:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   d64fa:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d64fc:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   d64fe:	bf0c      	ite	eq
   d6500:	f04f 0b01 	moveq.w	fp, #1
   d6504:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d6508:	ea1b 0f03 	tst.w	fp, r3
   d650c:	eb01 0302 	add.w	r3, r1, r2
   d6510:	bf0c      	ite	eq
   d6512:	f04f 0901 	moveq.w	r9, #1
   d6516:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d651a:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   d651c:	9303      	str	r3, [sp, #12]
   d651e:	9b03      	ldr	r3, [sp, #12]
   d6520:	42ab      	cmp	r3, r5
   d6522:	d0e2      	beq.n	d64ea <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   d6524:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   d6528:	465e      	mov	r6, fp
    uint8_t reply = 0;
   d652a:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   d652e:	b117      	cbz	r7, d6536 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d6530:	4638      	mov	r0, r7
   d6532:	f001 fc87 	bl	d7e44 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   d6536:	7b63      	ldrb	r3, [r4, #13]
   d6538:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d653c:	d141      	bne.n	d65c2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d653e:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d6542:	1c5a      	adds	r2, r3, #1
   d6544:	d00f      	beq.n	d6566 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   d6546:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d654a:	bf14      	ite	ne
   d654c:	2301      	movne	r3, #1
   d654e:	2300      	moveq	r3, #0
   d6550:	454b      	cmp	r3, r9
   d6552:	d008      	beq.n	d6566 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
          if (towrite)
   d6554:	6963      	ldr	r3, [r4, #20]
   d6556:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d6558:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   d655a:	2900      	cmp	r1, #0
   d655c:	d02c      	beq.n	d65b8 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   d655e:	4302      	orrs	r2, r0
   d6560:	601a      	str	r2, [r3, #0]
   d6562:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   d6566:	69a1      	ldr	r1, [r4, #24]
   d6568:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d656a:	680a      	ldr	r2, [r1, #0]
   d656c:	4313      	orrs	r3, r2
   d656e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d6570:	b117      	cbz	r7, d6578 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   d6572:	4638      	mov	r0, r7
   d6574:	f001 fc66 	bl	d7e44 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   d6578:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d657c:	3301      	adds	r3, #1
   d657e:	d006      	beq.n	d658e <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   d6580:	69e3      	ldr	r3, [r4, #28]
   d6582:	681a      	ldr	r2, [r3, #0]
   d6584:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6586:	421a      	tst	r2, r3
            reply |= b;
   d6588:	bf18      	it	ne
   d658a:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   d658e:	69a1      	ldr	r1, [r4, #24]
   d6590:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6592:	680a      	ldr	r2, [r1, #0]
   d6594:	ea22 0303 	bic.w	r3, r2, r3
   d6598:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   d659a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d659e:	3301      	adds	r3, #1
        buffer[i] = reply;
   d65a0:	bf18      	it	ne
   d65a2:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   d65a6:	7b23      	ldrb	r3, [r4, #12]
   d65a8:	2b00      	cmp	r3, #0
   d65aa:	d132      	bne.n	d6612 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   d65ac:	0076      	lsls	r6, r6, #1
   d65ae:	b2f6      	uxtb	r6, r6
   d65b0:	2e00      	cmp	r6, #0
   d65b2:	d1bc      	bne.n	d652e <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   d65b4:	3501      	adds	r5, #1
   d65b6:	e7b2      	b.n	d651e <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   d65b8:	ea22 0200 	bic.w	r2, r2, r0
   d65bc:	601a      	str	r2, [r3, #0]
   d65be:	4689      	mov	r9, r1
   d65c0:	e7d1      	b.n	d6566 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   d65c2:	69a1      	ldr	r1, [r4, #24]
   d65c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d65c6:	680a      	ldr	r2, [r1, #0]
   d65c8:	4313      	orrs	r3, r2
   d65ca:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d65cc:	b117      	cbz	r7, d65d4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   d65ce:	4638      	mov	r0, r7
   d65d0:	f001 fc38 	bl	d7e44 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   d65d4:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d65d8:	3301      	adds	r3, #1
   d65da:	d008      	beq.n	d65ee <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
          if (send & b)
   d65dc:	6963      	ldr	r3, [r4, #20]
   d65de:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d65e0:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   d65e2:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   d65e6:	bf14      	ite	ne
   d65e8:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   d65ea:	438a      	biceq	r2, r1
   d65ec:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   d65ee:	69a1      	ldr	r1, [r4, #24]
   d65f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d65f2:	680a      	ldr	r2, [r1, #0]
   d65f4:	ea22 0303 	bic.w	r3, r2, r3
   d65f8:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   d65fa:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d65fe:	3301      	adds	r3, #1
   d6600:	d0cb      	beq.n	d659a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   d6602:	69e3      	ldr	r3, [r4, #28]
   d6604:	681a      	ldr	r2, [r3, #0]
   d6606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6608:	421a      	tst	r2, r3
            reply |= b;
   d660a:	bf18      	it	ne
   d660c:	ea46 0808 	orrne.w	r8, r6, r8
   d6610:	e7c3      	b.n	d659a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   d6612:	0876      	lsrs	r6, r6, #1
   d6614:	e7cc      	b.n	d65b0 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   d6616:	bf00      	nop
   d6618:	0007a120 	.word	0x0007a120

000d661c <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   d661c:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   d661e:	2201      	movs	r2, #1
  uint8_t data = send;
   d6620:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   d6624:	f10d 0107 	add.w	r1, sp, #7
   d6628:	f7ff ff52 	bl	d64d0 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   d662c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6630:	b003      	add	sp, #12
   d6632:	f85d fb04 	ldr.w	pc, [sp], #4

000d6636 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d6636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d663a:	4604      	mov	r4, r0
  if (_spi) {
   d663c:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d663e:	460e      	mov	r6, r1
   d6640:	4617      	mov	r7, r2
   d6642:	461d      	mov	r5, r3
  if (_spi) {
   d6644:	b110      	cbz	r0, d664c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   d6646:	6861      	ldr	r1, [r4, #4]
   d6648:	f001 ff08 	bl	d845c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d664c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d6650:	2100      	movs	r1, #0
   d6652:	b280      	uxth	r0, r0
   d6654:	f003 f9c5 	bl	d99e2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   d6658:	9b06      	ldr	r3, [sp, #24]
   d665a:	eb05 0803 	add.w	r8, r5, r3
   d665e:	4545      	cmp	r5, r8
   d6660:	d108      	bne.n	d6674 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   d6662:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   d6664:	42b7      	cmp	r7, r6
   d6666:	d00b      	beq.n	d6680 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   d6668:	f816 1b01 	ldrb.w	r1, [r6], #1
   d666c:	4620      	mov	r0, r4
   d666e:	f7ff ffd5 	bl	d661c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   d6672:	e7f7      	b.n	d6664 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   d6674:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6678:	4620      	mov	r0, r4
   d667a:	f7ff ffcf 	bl	d661c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   d667e:	e7ee      	b.n	d665e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   d6680:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d6684:	2101      	movs	r1, #1
   d6686:	b280      	uxth	r0, r0
   d6688:	f003 f9ab 	bl	d99e2 <digitalWrite>

  if (_spi) {
   d668c:	6820      	ldr	r0, [r4, #0]
   d668e:	b108      	cbz	r0, d6694 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   d6690:	f001 fecb 	bl	d842a <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d6694:	2001      	movs	r0, #1
   d6696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d669a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d669a:	6042      	str	r2, [r0, #4]
  _begun = false;
   d669c:	2200      	movs	r2, #0
   d669e:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   d66a0:	2220      	movs	r2, #32
  _addr = addr;
   d66a2:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   d66a4:	60c2      	str	r2, [r0, #12]
#endif
}
   d66a6:	4770      	bx	lr

000d66a8 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   d66a8:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d66aa:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d66ac:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d66ae:	b153      	cbz	r3, d66c6 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d66b0:	7821      	ldrb	r1, [r4, #0]
   d66b2:	6860      	ldr	r0, [r4, #4]
   d66b4:	f003 f88c 	bl	d97d0 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   d66b8:	6860      	ldr	r0, [r4, #4]
   d66ba:	f003 f891 	bl	d97e0 <_ZN7TwoWire15endTransmissionEv>
   d66be:	fab0 f080 	clz	r0, r0
   d66c2:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   d66c4:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d66c6:	2101      	movs	r1, #1
   d66c8:	f000 f803 	bl	d66d2 <_ZN18Adafruit_I2CDevice5beginEb>
   d66cc:	2800      	cmp	r0, #0
   d66ce:	d1ef      	bne.n	d66b0 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d66d0:	e7f8      	b.n	d66c4 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d66d2 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d66d2:	b538      	push	{r3, r4, r5, lr}
   d66d4:	4604      	mov	r4, r0
  _wire->begin();
   d66d6:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d66d8:	460d      	mov	r5, r1
  _wire->begin();
   d66da:	f003 f847 	bl	d976c <_ZN7TwoWire5beginEv>
  _begun = true;
   d66de:	2001      	movs	r0, #1
   d66e0:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   d66e2:	b125      	cbz	r5, d66ee <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   d66e4:	4620      	mov	r0, r4
}
   d66e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   d66ea:	f7ff bfdd 	b.w	d66a8 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   d66ee:	bd38      	pop	{r3, r4, r5, pc}

000d66f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   d66f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d66f4:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d66f8:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   d66fa:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   d66fc:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   d66fe:	4432      	add	r2, r6
   d6700:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   d6702:	4604      	mov	r4, r0
   d6704:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   d6706:	d902      	bls.n	d670e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d6708:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   d670a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d670e:	7801      	ldrb	r1, [r0, #0]
   d6710:	6840      	ldr	r0, [r0, #4]
   d6712:	f003 f85d 	bl	d97d0 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d6716:	b97e      	cbnz	r6, d6738 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   d6718:	6860      	ldr	r0, [r4, #4]
   d671a:	6803      	ldr	r3, [r0, #0]
   d671c:	462a      	mov	r2, r5
   d671e:	68db      	ldr	r3, [r3, #12]
   d6720:	4641      	mov	r1, r8
   d6722:	4798      	blx	r3
   d6724:	4285      	cmp	r5, r0
   d6726:	d1ef      	bne.n	d6708 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   d6728:	6860      	ldr	r0, [r4, #4]
   d672a:	4639      	mov	r1, r7
   d672c:	f003 f854 	bl	d97d8 <_ZN7TwoWire15endTransmissionEh>
   d6730:	fab0 f080 	clz	r0, r0
   d6734:	0940      	lsrs	r0, r0, #5
   d6736:	e7e8      	b.n	d670a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d6738:	f1b9 0f00 	cmp.w	r9, #0
   d673c:	d0ec      	beq.n	d6718 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
   d673e:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d6740:	6803      	ldr	r3, [r0, #0]
   d6742:	4632      	mov	r2, r6
   d6744:	68db      	ldr	r3, [r3, #12]
   d6746:	4649      	mov	r1, r9
   d6748:	4798      	blx	r3
   d674a:	42b0      	cmp	r0, r6
   d674c:	d1dc      	bne.n	d6708 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   d674e:	e7e3      	b.n	d6718 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000d6750 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   d6750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6754:	4615      	mov	r5, r2
   d6756:	4604      	mov	r4, r0
   d6758:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   d675a:	b2d2      	uxtb	r2, r2
   d675c:	7801      	ldrb	r1, [r0, #0]
   d675e:	6840      	ldr	r0, [r0, #4]
   d6760:	f003 f821 	bl	d97a6 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   d6764:	4285      	cmp	r5, r0
   d6766:	d10d      	bne.n	d6784 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   d6768:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   d676a:	fa1f f887 	uxth.w	r8, r7
   d676e:	45a8      	cmp	r8, r5
   d6770:	f107 0701 	add.w	r7, r7, #1
   d6774:	d209      	bcs.n	d678a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   d6776:	6860      	ldr	r0, [r4, #4]
   d6778:	6803      	ldr	r3, [r0, #0]
   d677a:	695b      	ldr	r3, [r3, #20]
   d677c:	4798      	blx	r3
   d677e:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   d6782:	e7f2      	b.n	d676a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   d6784:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d6786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d678a:	2001      	movs	r0, #1
   d678c:	e7fb      	b.n	d6786 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000d678e <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d678e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6792:	4607      	mov	r7, r0
   d6794:	4688      	mov	r8, r1
   d6796:	4616      	mov	r6, r2
   d6798:	4699      	mov	r9, r3
  size_t pos = 0;
   d679a:	2500      	movs	r5, #0
  while (pos < len) {
   d679c:	42b5      	cmp	r5, r6
   d679e:	d212      	bcs.n	d67c6 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   d67a0:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   d67a2:	1b74      	subs	r4, r6, r5
   d67a4:	4294      	cmp	r4, r2
   d67a6:	bf28      	it	cs
   d67a8:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   d67aa:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   d67ac:	42ab      	cmp	r3, r5
   d67ae:	bf94      	ite	ls
   d67b0:	464b      	movls	r3, r9
   d67b2:	2300      	movhi	r3, #0
   d67b4:	4622      	mov	r2, r4
   d67b6:	eb08 0105 	add.w	r1, r8, r5
   d67ba:	4638      	mov	r0, r7
   d67bc:	f7ff ffc8 	bl	d6750 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   d67c0:	b110      	cbz	r0, d67c8 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   d67c2:	4425      	add	r5, r4
  while (pos < len) {
   d67c4:	e7ea      	b.n	d679c <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   d67c6:	2001      	movs	r0, #1
}
   d67c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d67cc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   d67cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d67ce:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   d67d0:	2300      	movs	r3, #0
   d67d2:	e9cd 3300 	strd	r3, r3, [sp]
   d67d6:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   d67da:	9e06      	ldr	r6, [sp, #24]
   d67dc:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   d67de:	f7ff ff87 	bl	d66f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d67e2:	b140      	cbz	r0, d67f6 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   d67e4:	2301      	movs	r3, #1
   d67e6:	4632      	mov	r2, r6
   d67e8:	4629      	mov	r1, r5
   d67ea:	4620      	mov	r0, r4
}
   d67ec:	b002      	add	sp, #8
   d67ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d67f2:	f7ff bfcc 	b.w	d678e <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d67f6:	b002      	add	sp, #8
   d67f8:	bd70      	pop	{r4, r5, r6, pc}

000d67fa <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   d67fa:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d67fc:	6840      	ldr	r0, [r0, #4]
   d67fe:	f002 ffb1 	bl	d9764 <_ZN7TwoWire8setSpeedEm>
  return true;
#else
  (void)desiredclk;
  return false;
#endif
}
   d6802:	2001      	movs	r0, #1
   d6804:	bd08      	pop	{r3, pc}

000d6806 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d6806:	4770      	bx	lr

000d6808 <_ZN15Adafruit_BNO055D1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
   d6808:	4770      	bx	lr
	...

000d680c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 *          Sensor description
 */
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d680c:	460b      	mov	r3, r1
   d680e:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d6810:	2228      	movs	r2, #40	; 0x28
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d6812:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d6814:	2100      	movs	r1, #0
   d6816:	4618      	mov	r0, r3
   d6818:	f006 fe00 	bl	dd41c <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
   d681c:	4909      	ldr	r1, [pc, #36]	; (d6844 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x38>)
   d681e:	220b      	movs	r2, #11
   d6820:	f006 fe4d 	bl	dd4be <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d6824:	2200      	movs	r2, #0
  sensor->version = 1;
   d6826:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d6828:	72c2      	strb	r2, [r0, #11]
  sensor->version = 1;
   d682a:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _sensorID;
   d682c:	68e1      	ldr	r1, [r4, #12]
  sensor->type = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay = 0;
   d682e:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->max_value = 0.0F;
   d6830:	2200      	movs	r2, #0
  sensor->sensor_id = _sensorID;
   d6832:	6101      	str	r1, [r0, #16]
  sensor->max_value = 0.0F;
   d6834:	6182      	str	r2, [r0, #24]
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d6836:	2103      	movs	r1, #3
  sensor->min_value = 0.0F;
   d6838:	61c2      	str	r2, [r0, #28]
  sensor->resolution = 0.01F;
   d683a:	4a03      	ldr	r2, [pc, #12]	; (d6848 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x3c>)
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d683c:	6141      	str	r1, [r0, #20]
  sensor->resolution = 0.01F;
   d683e:	6202      	str	r2, [r0, #32]
}
   d6840:	bd10      	pop	{r4, pc}
   d6842:	bf00      	nop
   d6844:	000ddbc9 	.word	0x000ddbc9
   d6848:	3c23d70a 	.word	0x3c23d70a

000d684c <_ZN15Adafruit_BNO055D0Ev>:
   d684c:	b510      	push	{r4, lr}
   d684e:	2114      	movs	r1, #20
   d6850:	4604      	mov	r4, r0
   d6852:	f003 f95d 	bl	d9b10 <_ZdlPvj>
   d6856:	4620      	mov	r0, r4
   d6858:	bd10      	pop	{r4, pc}
	...

000d685c <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d685c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d685e:	9301      	str	r3, [sp, #4]
                                 TwoWire *theWire) {
   d6860:	4b09      	ldr	r3, [pc, #36]	; (d6888 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x2c>)
   d6862:	6003      	str	r3, [r0, #0]
   d6864:	2300      	movs	r3, #0
  _sensorID = sensorID;
   d6866:	e9c0 3102 	strd	r3, r1, [r0, #8]
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d686a:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d686c:	2010      	movs	r0, #16
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d686e:	4616      	mov	r6, r2
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d6870:	f7fd fc11 	bl	d4096 <_Znwj>
   d6874:	4605      	mov	r5, r0
   d6876:	b118      	cbz	r0, d6880 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x24>
   d6878:	9a01      	ldr	r2, [sp, #4]
   d687a:	4631      	mov	r1, r6
   d687c:	f7ff ff0d 	bl	d669a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
}
   d6880:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d6882:	60a5      	str	r5, [r4, #8]
}
   d6884:	b002      	add	sp, #8
   d6886:	bd70      	pop	{r4, r5, r6, pc}
   d6888:	000ddd08 	.word	0x000ddd08

000d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value) {
   d688c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
  return i2c_dev->write(buffer, 2);
   d688e:	2300      	movs	r3, #0
   d6890:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
   d6894:	f88d 100c 	strb.w	r1, [sp, #12]
   d6898:	f88d 200d 	strb.w	r2, [sp, #13]
  return i2c_dev->write(buffer, 2);
   d689c:	2301      	movs	r3, #1
   d689e:	2202      	movs	r2, #2
   d68a0:	a903      	add	r1, sp, #12
   d68a2:	6880      	ldr	r0, [r0, #8]
   d68a4:	f7ff ff24 	bl	d66f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d68a8:	b005      	add	sp, #20
   d68aa:	f85d fb04 	ldr.w	pc, [sp], #4

000d68ae <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
   d68ae:	b508      	push	{r3, lr}
   d68b0:	460a      	mov	r2, r1
  _mode = mode;
   d68b2:	7401      	strb	r1, [r0, #16]
  write8(BNO055_OPR_MODE_ADDR, _mode);
   d68b4:	213d      	movs	r1, #61	; 0x3d
   d68b6:	f7ff ffe9 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
}
   d68ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(30);
   d68be:	201e      	movs	r0, #30
   d68c0:	f002 b9b4 	b.w	d8c2c <delay>

000d68c4 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>:
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d68c4:	b570      	push	{r4, r5, r6, lr}
   d68c6:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d68c8:	2100      	movs	r1, #0
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d68ca:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t modeback = _mode;
   d68cc:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d68ce:	f7ff ffee 	bl	d68ae <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d68d2:	2019      	movs	r0, #25
   d68d4:	f002 f9aa 	bl	d8c2c <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d68d8:	2200      	movs	r2, #0
   d68da:	2107      	movs	r1, #7
   d68dc:	4620      	mov	r0, r4
   d68de:	f7ff ffd5 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (usextal) {
   d68e2:	b185      	cbz	r5, d6906 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x42>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x80);
   d68e4:	2280      	movs	r2, #128	; 0x80
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d68e6:	213f      	movs	r1, #63	; 0x3f
   d68e8:	4620      	mov	r0, r4
   d68ea:	f7ff ffcf 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d68ee:	200a      	movs	r0, #10
   d68f0:	f002 f99c 	bl	d8c2c <delay>
  setMode(modeback);
   d68f4:	4620      	mov	r0, r4
   d68f6:	4631      	mov	r1, r6
   d68f8:	f7ff ffd9 	bl	d68ae <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d68fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(20);
   d6900:	2014      	movs	r0, #20
   d6902:	f002 b993 	b.w	d8c2c <delay>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d6906:	462a      	mov	r2, r5
   d6908:	e7ed      	b.n	d68e6 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x22>

000d690a <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>:
    const adafruit_bno055_offsets_t &offsets_type) {
   d690a:	b570      	push	{r4, r5, r6, lr}
   d690c:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d690e:	2100      	movs	r1, #0
    const adafruit_bno055_offsets_t &offsets_type) {
   d6910:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t lastMode = _mode;
   d6912:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d6914:	f7ff ffcb 	bl	d68ae <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d6918:	2019      	movs	r0, #25
   d691a:	f002 f987 	bl	d8c2c <delay>
  write8(ACCEL_OFFSET_X_LSB_ADDR, (offsets_type.accel_offset_x) & 0x0FF);
   d691e:	782a      	ldrb	r2, [r5, #0]
   d6920:	2155      	movs	r1, #85	; 0x55
   d6922:	4620      	mov	r0, r4
   d6924:	f7ff ffb2 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_X_MSB_ADDR, (offsets_type.accel_offset_x >> 8) & 0x0FF);
   d6928:	786a      	ldrb	r2, [r5, #1]
   d692a:	2156      	movs	r1, #86	; 0x56
   d692c:	4620      	mov	r0, r4
   d692e:	f7ff ffad 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_LSB_ADDR, (offsets_type.accel_offset_y) & 0x0FF);
   d6932:	78aa      	ldrb	r2, [r5, #2]
   d6934:	2157      	movs	r1, #87	; 0x57
   d6936:	4620      	mov	r0, r4
   d6938:	f7ff ffa8 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_MSB_ADDR, (offsets_type.accel_offset_y >> 8) & 0x0FF);
   d693c:	78ea      	ldrb	r2, [r5, #3]
   d693e:	2158      	movs	r1, #88	; 0x58
   d6940:	4620      	mov	r0, r4
   d6942:	f7ff ffa3 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_LSB_ADDR, (offsets_type.accel_offset_z) & 0x0FF);
   d6946:	792a      	ldrb	r2, [r5, #4]
   d6948:	2159      	movs	r1, #89	; 0x59
   d694a:	4620      	mov	r0, r4
   d694c:	f7ff ff9e 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_MSB_ADDR, (offsets_type.accel_offset_z >> 8) & 0x0FF);
   d6950:	796a      	ldrb	r2, [r5, #5]
   d6952:	215a      	movs	r1, #90	; 0x5a
   d6954:	4620      	mov	r0, r4
   d6956:	f7ff ff99 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_LSB_ADDR, (offsets_type.mag_offset_x) & 0x0FF);
   d695a:	79aa      	ldrb	r2, [r5, #6]
   d695c:	215b      	movs	r1, #91	; 0x5b
   d695e:	4620      	mov	r0, r4
   d6960:	f7ff ff94 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_MSB_ADDR, (offsets_type.mag_offset_x >> 8) & 0x0FF);
   d6964:	79ea      	ldrb	r2, [r5, #7]
   d6966:	215c      	movs	r1, #92	; 0x5c
   d6968:	4620      	mov	r0, r4
   d696a:	f7ff ff8f 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_LSB_ADDR, (offsets_type.mag_offset_y) & 0x0FF);
   d696e:	7a2a      	ldrb	r2, [r5, #8]
   d6970:	215d      	movs	r1, #93	; 0x5d
   d6972:	4620      	mov	r0, r4
   d6974:	f7ff ff8a 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_MSB_ADDR, (offsets_type.mag_offset_y >> 8) & 0x0FF);
   d6978:	7a6a      	ldrb	r2, [r5, #9]
   d697a:	215e      	movs	r1, #94	; 0x5e
   d697c:	4620      	mov	r0, r4
   d697e:	f7ff ff85 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_LSB_ADDR, (offsets_type.mag_offset_z) & 0x0FF);
   d6982:	7aaa      	ldrb	r2, [r5, #10]
   d6984:	215f      	movs	r1, #95	; 0x5f
   d6986:	4620      	mov	r0, r4
   d6988:	f7ff ff80 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_MSB_ADDR, (offsets_type.mag_offset_z >> 8) & 0x0FF);
   d698c:	7aea      	ldrb	r2, [r5, #11]
   d698e:	2160      	movs	r1, #96	; 0x60
   d6990:	4620      	mov	r0, r4
   d6992:	f7ff ff7b 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_LSB_ADDR, (offsets_type.gyro_offset_x) & 0x0FF);
   d6996:	7b2a      	ldrb	r2, [r5, #12]
   d6998:	2161      	movs	r1, #97	; 0x61
   d699a:	4620      	mov	r0, r4
   d699c:	f7ff ff76 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_MSB_ADDR, (offsets_type.gyro_offset_x >> 8) & 0x0FF);
   d69a0:	7b6a      	ldrb	r2, [r5, #13]
   d69a2:	2162      	movs	r1, #98	; 0x62
   d69a4:	4620      	mov	r0, r4
   d69a6:	f7ff ff71 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_LSB_ADDR, (offsets_type.gyro_offset_y) & 0x0FF);
   d69aa:	7baa      	ldrb	r2, [r5, #14]
   d69ac:	2163      	movs	r1, #99	; 0x63
   d69ae:	4620      	mov	r0, r4
   d69b0:	f7ff ff6c 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_MSB_ADDR, (offsets_type.gyro_offset_y >> 8) & 0x0FF);
   d69b4:	7bea      	ldrb	r2, [r5, #15]
   d69b6:	2164      	movs	r1, #100	; 0x64
   d69b8:	4620      	mov	r0, r4
   d69ba:	f7ff ff67 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_LSB_ADDR, (offsets_type.gyro_offset_z) & 0x0FF);
   d69be:	7c2a      	ldrb	r2, [r5, #16]
   d69c0:	2165      	movs	r1, #101	; 0x65
   d69c2:	4620      	mov	r0, r4
   d69c4:	f7ff ff62 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_MSB_ADDR, (offsets_type.gyro_offset_z >> 8) & 0x0FF);
   d69c8:	7c6a      	ldrb	r2, [r5, #17]
   d69ca:	2166      	movs	r1, #102	; 0x66
   d69cc:	4620      	mov	r0, r4
   d69ce:	f7ff ff5d 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_LSB_ADDR, (offsets_type.accel_radius) & 0x0FF);
   d69d2:	7caa      	ldrb	r2, [r5, #18]
   d69d4:	2167      	movs	r1, #103	; 0x67
   d69d6:	4620      	mov	r0, r4
   d69d8:	f7ff ff58 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_MSB_ADDR, (offsets_type.accel_radius >> 8) & 0x0FF);
   d69dc:	7cea      	ldrb	r2, [r5, #19]
   d69de:	2168      	movs	r1, #104	; 0x68
   d69e0:	4620      	mov	r0, r4
   d69e2:	f7ff ff53 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_LSB_ADDR, (offsets_type.mag_radius) & 0x0FF);
   d69e6:	7d2a      	ldrb	r2, [r5, #20]
   d69e8:	2169      	movs	r1, #105	; 0x69
   d69ea:	4620      	mov	r0, r4
   d69ec:	f7ff ff4e 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_MSB_ADDR, (offsets_type.mag_radius >> 8) & 0x0FF);
   d69f0:	7d6a      	ldrb	r2, [r5, #21]
   d69f2:	216a      	movs	r1, #106	; 0x6a
   d69f4:	4620      	mov	r0, r4
   d69f6:	f7ff ff49 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  setMode(lastMode);
   d69fa:	4631      	mov	r1, r6
   d69fc:	4620      	mov	r0, r4
}
   d69fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setMode(lastMode);
   d6a02:	f7ff bf54 	b.w	d68ae <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

000d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
   d6a06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[1] = {reg};
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d6a08:	2201      	movs	r2, #1
   d6a0a:	2300      	movs	r3, #0
   d6a0c:	e9cd 2300 	strd	r2, r3, [sp]
   d6a10:	ab03      	add	r3, sp, #12
  uint8_t buffer[1] = {reg};
   d6a12:	f88d 100c 	strb.w	r1, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d6a16:	6880      	ldr	r0, [r0, #8]
   d6a18:	4619      	mov	r1, r3
   d6a1a:	f7ff fed7 	bl	d67cc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
  return (byte)buffer[0];
}
   d6a1e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d6a22:	b005      	add	sp, #20
   d6a24:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a28 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
   d6a28:	b570      	push	{r4, r5, r6, lr}
   d6a2a:	4604      	mov	r4, r0
   d6a2c:	460e      	mov	r6, r1
  if (!i2c_dev->begin()) {
   d6a2e:	6880      	ldr	r0, [r0, #8]
   d6a30:	2101      	movs	r1, #1
   d6a32:	f7ff fe4e 	bl	d66d2 <_ZN18Adafruit_I2CDevice5beginEb>
   d6a36:	4605      	mov	r5, r0
   d6a38:	b910      	cbnz	r0, d6a40 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x18>
    return false;
   d6a3a:	2500      	movs	r5, #0
}
   d6a3c:	4628      	mov	r0, r5
   d6a3e:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
   d6a40:	2100      	movs	r1, #0
   d6a42:	4620      	mov	r0, r4
   d6a44:	f7ff ffdf 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (id != BNO055_ID) {
   d6a48:	28a0      	cmp	r0, #160	; 0xa0
   d6a4a:	d113      	bne.n	d6a74 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4c>
  setMode(OPERATION_MODE_CONFIG);
   d6a4c:	2100      	movs	r1, #0
   d6a4e:	4620      	mov	r0, r4
   d6a50:	f7ff ff2d 	bl	d68ae <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
   d6a54:	2220      	movs	r2, #32
   d6a56:	213f      	movs	r1, #63	; 0x3f
   d6a58:	4620      	mov	r0, r4
   d6a5a:	f7ff ff17 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
   d6a5e:	201e      	movs	r0, #30
    delay(10);
   d6a60:	f002 f8e4 	bl	d8c2c <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
   d6a64:	2100      	movs	r1, #0
   d6a66:	4620      	mov	r0, r4
   d6a68:	f7ff ffcd 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6a6c:	28a0      	cmp	r0, #160	; 0xa0
   d6a6e:	d00c      	beq.n	d6a8a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x62>
    delay(10);
   d6a70:	200a      	movs	r0, #10
   d6a72:	e7f5      	b.n	d6a60 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x38>
    delay(1000); // hold on for boot
   d6a74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6a78:	f002 f8d8 	bl	d8c2c <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
   d6a7c:	2100      	movs	r1, #0
   d6a7e:	4620      	mov	r0, r4
   d6a80:	f7ff ffc1 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if (id != BNO055_ID) {
   d6a84:	28a0      	cmp	r0, #160	; 0xa0
   d6a86:	d1d8      	bne.n	d6a3a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x12>
   d6a88:	e7e0      	b.n	d6a4c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x24>
  delay(50);
   d6a8a:	2032      	movs	r0, #50	; 0x32
   d6a8c:	f002 f8ce 	bl	d8c2c <delay>
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
   d6a90:	2200      	movs	r2, #0
   d6a92:	213e      	movs	r1, #62	; 0x3e
   d6a94:	4620      	mov	r0, r4
   d6a96:	f7ff fef9 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6a9a:	200a      	movs	r0, #10
   d6a9c:	f002 f8c6 	bl	d8c2c <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6aa0:	2200      	movs	r2, #0
   d6aa2:	2107      	movs	r1, #7
   d6aa4:	4620      	mov	r0, r4
   d6aa6:	f7ff fef1 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
   d6aaa:	2200      	movs	r2, #0
   d6aac:	213f      	movs	r1, #63	; 0x3f
   d6aae:	4620      	mov	r0, r4
   d6ab0:	f7ff feec 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6ab4:	200a      	movs	r0, #10
   d6ab6:	f002 f8b9 	bl	d8c2c <delay>
  setMode(mode);
   d6aba:	4620      	mov	r0, r4
   d6abc:	4631      	mov	r1, r6
   d6abe:	f7ff fef6 	bl	d68ae <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   d6ac2:	2014      	movs	r0, #20
   d6ac4:	f002 f8b2 	bl	d8c2c <delay>
  return true;
   d6ac8:	e7b8      	b.n	d6a3c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x14>

000d6aca <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>:
                                      uint8_t *system_error) {
   d6aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6acc:	460f      	mov	r7, r1
   d6ace:	4616      	mov	r6, r2
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6ad0:	2107      	movs	r1, #7
   d6ad2:	2200      	movs	r2, #0
                                      uint8_t *system_error) {
   d6ad4:	4604      	mov	r4, r0
   d6ad6:	461d      	mov	r5, r3
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6ad8:	f7ff fed8 	bl	d688c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (system_status != 0)
   d6adc:	b127      	cbz	r7, d6ae8 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x1e>
    *system_status = read8(BNO055_SYS_STAT_ADDR);
   d6ade:	2139      	movs	r1, #57	; 0x39
   d6ae0:	4620      	mov	r0, r4
   d6ae2:	f7ff ff90 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ae6:	7038      	strb	r0, [r7, #0]
  if (self_test_result != 0)
   d6ae8:	b126      	cbz	r6, d6af4 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x2a>
    *self_test_result = read8(BNO055_SELFTEST_RESULT_ADDR);
   d6aea:	2136      	movs	r1, #54	; 0x36
   d6aec:	4620      	mov	r0, r4
   d6aee:	f7ff ff8a 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6af2:	7030      	strb	r0, [r6, #0]
  if (system_error != 0)
   d6af4:	b125      	cbz	r5, d6b00 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x36>
    *system_error = read8(BNO055_SYS_ERR_ADDR);
   d6af6:	213a      	movs	r1, #58	; 0x3a
   d6af8:	4620      	mov	r0, r4
   d6afa:	f7ff ff84 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6afe:	7028      	strb	r0, [r5, #0]
}
   d6b00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(200);
   d6b04:	20c8      	movs	r0, #200	; 0xc8
   d6b06:	f002 b891 	b.w	d8c2c <delay>

000d6b0a <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>:
                                     uint8_t *accel, uint8_t *mag) {
   d6b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b0c:	460e      	mov	r6, r1
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d6b0e:	2135      	movs	r1, #53	; 0x35
                                     uint8_t *accel, uint8_t *mag) {
   d6b10:	9f06      	ldr	r7, [sp, #24]
   d6b12:	4615      	mov	r5, r2
   d6b14:	461c      	mov	r4, r3
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d6b16:	f7ff ff76 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (sys != NULL) {
   d6b1a:	b10e      	cbz	r6, d6b20 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x16>
    *sys = (calData >> 6) & 0x03;
   d6b1c:	0983      	lsrs	r3, r0, #6
   d6b1e:	7033      	strb	r3, [r6, #0]
  if (gyro != NULL) {
   d6b20:	b115      	cbz	r5, d6b28 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x1e>
    *gyro = (calData >> 4) & 0x03;
   d6b22:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d6b26:	702b      	strb	r3, [r5, #0]
  if (accel != NULL) {
   d6b28:	b114      	cbz	r4, d6b30 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x26>
    *accel = (calData >> 2) & 0x03;
   d6b2a:	f3c0 0381 	ubfx	r3, r0, #2, #2
   d6b2e:	7023      	strb	r3, [r4, #0]
  if (mag != NULL) {
   d6b30:	b117      	cbz	r7, d6b38 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x2e>
    *mag = calData & 0x03;
   d6b32:	f000 0003 	and.w	r0, r0, #3
   d6b36:	7038      	strb	r0, [r7, #0]
}
   d6b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b3a <_ZN15Adafruit_BNO05517isFullyCalibratedEv>:
bool Adafruit_BNO055::isFullyCalibrated() {
   d6b3a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6b3c:	4604      	mov	r4, r0
  getCalibration(&system, &gyro, &accel, &mag);
   d6b3e:	f10d 030f 	add.w	r3, sp, #15
   d6b42:	9300      	str	r3, [sp, #0]
   d6b44:	f10d 020d 	add.w	r2, sp, #13
   d6b48:	f10d 030e 	add.w	r3, sp, #14
   d6b4c:	a903      	add	r1, sp, #12
   d6b4e:	f7ff ffdc 	bl	d6b0a <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
  switch (_mode) {
   d6b52:	7c23      	ldrb	r3, [r4, #16]
   d6b54:	3b01      	subs	r3, #1
   d6b56:	2b09      	cmp	r3, #9
   d6b58:	d817      	bhi.n	d6b8a <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x50>
   d6b5a:	e8df f003 	tbb	[pc, r3]
   d6b5e:	2205      	.short	0x2205
   d6b60:	130c1e10 	.word	0x130c1e10
   d6b64:	101e0c16 	.word	0x101e0c16
    return (accel == 3);
   d6b68:	f89d 000e 	ldrb.w	r0, [sp, #14]
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   d6b6c:	1ec3      	subs	r3, r0, #3
   d6b6e:	4258      	negs	r0, r3
   d6b70:	4158      	adcs	r0, r3
}
   d6b72:	b004      	add	sp, #16
   d6b74:	bd10      	pop	{r4, pc}
    return (accel == 3 && gyro == 3);
   d6b76:	f89d 300e 	ldrb.w	r3, [sp, #14]
    return (mag == 3 && gyro == 3);
   d6b7a:	2b03      	cmp	r3, #3
   d6b7c:	d114      	bne.n	d6ba8 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6b7e:	f89d 000d 	ldrb.w	r0, [sp, #13]
   d6b82:	e7f3      	b.n	d6b6c <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
   d6b84:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d6b88:	e7f7      	b.n	d6b7a <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x40>
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   d6b8a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6b8e:	2b03      	cmp	r3, #3
   d6b90:	d10a      	bne.n	d6ba8 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6b92:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6b96:	2b03      	cmp	r3, #3
   d6b98:	d106      	bne.n	d6ba8 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6b9a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6b9e:	2b03      	cmp	r3, #3
   d6ba0:	d102      	bne.n	d6ba8 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6ba2:	f89d 000f 	ldrb.w	r0, [sp, #15]
   d6ba6:	e7e1      	b.n	d6b6c <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
    return (accel == 3 && mag == 3);
   d6ba8:	2000      	movs	r0, #0
   d6baa:	e7e2      	b.n	d6b72 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x38>

000d6bac <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>:
    adafruit_bno055_offsets_t &offsets_type) {
   d6bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6bb0:	4604      	mov	r4, r0
   d6bb2:	460d      	mov	r5, r1
  if (isFullyCalibrated()) {
   d6bb4:	f7ff ffc1 	bl	d6b3a <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d6bb8:	4606      	mov	r6, r0
   d6bba:	2800      	cmp	r0, #0
   d6bbc:	f000 8091 	beq.w	d6ce2 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t+0x136>
    setMode(OPERATION_MODE_CONFIG);
   d6bc0:	2100      	movs	r1, #0
   d6bc2:	4620      	mov	r0, r4
    adafruit_bno055_opmode_t lastMode = _mode;
   d6bc4:	f894 8010 	ldrb.w	r8, [r4, #16]
    setMode(OPERATION_MODE_CONFIG);
   d6bc8:	f7ff fe71 	bl	d68ae <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
    delay(25);
   d6bcc:	2019      	movs	r0, #25
   d6bce:	f002 f82d 	bl	d8c2c <delay>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6bd2:	2156      	movs	r1, #86	; 0x56
   d6bd4:	4620      	mov	r0, r4
   d6bd6:	f7ff ff16 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   d6bda:	2155      	movs	r1, #85	; 0x55
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6bdc:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   d6bde:	4620      	mov	r0, r4
   d6be0:	f7ff ff11 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6be4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6be8:	8028      	strh	r0, [r5, #0]
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6bea:	2158      	movs	r1, #88	; 0x58
   d6bec:	4620      	mov	r0, r4
   d6bee:	f7ff ff0a 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   d6bf2:	2157      	movs	r1, #87	; 0x57
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6bf4:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   d6bf6:	4620      	mov	r0, r4
   d6bf8:	f7ff ff05 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6bfc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6c00:	8068      	strh	r0, [r5, #2]
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6c02:	215a      	movs	r1, #90	; 0x5a
   d6c04:	4620      	mov	r0, r4
   d6c06:	f7ff fefe 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   d6c0a:	2159      	movs	r1, #89	; 0x59
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6c0c:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   d6c0e:	4620      	mov	r0, r4
   d6c10:	f7ff fef9 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6c14:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6c18:	80a8      	strh	r0, [r5, #4]
        (read8(MAG_OFFSET_X_MSB_ADDR) << 8) | (read8(MAG_OFFSET_X_LSB_ADDR));
   d6c1a:	215c      	movs	r1, #92	; 0x5c
   d6c1c:	4620      	mov	r0, r4
   d6c1e:	f7ff fef2 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c22:	215b      	movs	r1, #91	; 0x5b
   d6c24:	4607      	mov	r7, r0
   d6c26:	4620      	mov	r0, r4
   d6c28:	f7ff feed 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c2c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_x =
   d6c30:	80e8      	strh	r0, [r5, #6]
        (read8(MAG_OFFSET_Y_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Y_LSB_ADDR));
   d6c32:	215e      	movs	r1, #94	; 0x5e
   d6c34:	4620      	mov	r0, r4
   d6c36:	f7ff fee6 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c3a:	215d      	movs	r1, #93	; 0x5d
   d6c3c:	4607      	mov	r7, r0
   d6c3e:	4620      	mov	r0, r4
   d6c40:	f7ff fee1 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c44:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_y =
   d6c48:	8128      	strh	r0, [r5, #8]
        (read8(MAG_OFFSET_Z_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Z_LSB_ADDR));
   d6c4a:	2160      	movs	r1, #96	; 0x60
   d6c4c:	4620      	mov	r0, r4
   d6c4e:	f7ff feda 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c52:	215f      	movs	r1, #95	; 0x5f
   d6c54:	4607      	mov	r7, r0
   d6c56:	4620      	mov	r0, r4
   d6c58:	f7ff fed5 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c5c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_z =
   d6c60:	8168      	strh	r0, [r5, #10]
        (read8(GYRO_OFFSET_X_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_X_LSB_ADDR));
   d6c62:	2162      	movs	r1, #98	; 0x62
   d6c64:	4620      	mov	r0, r4
   d6c66:	f7ff fece 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c6a:	2161      	movs	r1, #97	; 0x61
   d6c6c:	4607      	mov	r7, r0
   d6c6e:	4620      	mov	r0, r4
   d6c70:	f7ff fec9 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c74:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_x =
   d6c78:	81a8      	strh	r0, [r5, #12]
        (read8(GYRO_OFFSET_Y_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Y_LSB_ADDR));
   d6c7a:	2164      	movs	r1, #100	; 0x64
   d6c7c:	4620      	mov	r0, r4
   d6c7e:	f7ff fec2 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c82:	2163      	movs	r1, #99	; 0x63
   d6c84:	4607      	mov	r7, r0
   d6c86:	4620      	mov	r0, r4
   d6c88:	f7ff febd 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c8c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_y =
   d6c90:	81e8      	strh	r0, [r5, #14]
        (read8(GYRO_OFFSET_Z_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Z_LSB_ADDR));
   d6c92:	2166      	movs	r1, #102	; 0x66
   d6c94:	4620      	mov	r0, r4
   d6c96:	f7ff feb6 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c9a:	2165      	movs	r1, #101	; 0x65
   d6c9c:	4607      	mov	r7, r0
   d6c9e:	4620      	mov	r0, r4
   d6ca0:	f7ff feb1 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ca4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_z =
   d6ca8:	8228      	strh	r0, [r5, #16]
        (read8(ACCEL_RADIUS_MSB_ADDR) << 8) | (read8(ACCEL_RADIUS_LSB_ADDR));
   d6caa:	2168      	movs	r1, #104	; 0x68
   d6cac:	4620      	mov	r0, r4
   d6cae:	f7ff feaa 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6cb2:	2167      	movs	r1, #103	; 0x67
   d6cb4:	4607      	mov	r7, r0
   d6cb6:	4620      	mov	r0, r4
   d6cb8:	f7ff fea5 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6cbc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.accel_radius =
   d6cc0:	8268      	strh	r0, [r5, #18]
        (read8(MAG_RADIUS_MSB_ADDR) << 8) | (read8(MAG_RADIUS_LSB_ADDR));
   d6cc2:	216a      	movs	r1, #106	; 0x6a
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	f7ff fe9e 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6cca:	2169      	movs	r1, #105	; 0x69
   d6ccc:	4607      	mov	r7, r0
   d6cce:	4620      	mov	r0, r4
   d6cd0:	f7ff fe99 	bl	d6a06 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6cd4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_radius =
   d6cd8:	82a8      	strh	r0, [r5, #20]
    setMode(lastMode);
   d6cda:	4641      	mov	r1, r8
   d6cdc:	4620      	mov	r0, r4
   d6cde:	f7ff fde6 	bl	d68ae <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d6ce2:	4630      	mov	r0, r6
   d6ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6ce8 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte *buffer,
                              uint8_t len) {
   d6ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t reg_buf[1] = {(uint8_t)reg};
   d6cea:	f88d 100c 	strb.w	r1, [sp, #12]
  return i2c_dev->write_then_read(reg_buf, 1, buffer, len);
   d6cee:	2100      	movs	r1, #0
   d6cf0:	e9cd 3100 	strd	r3, r1, [sp]
   d6cf4:	4613      	mov	r3, r2
   d6cf6:	a903      	add	r1, sp, #12
   d6cf8:	2201      	movs	r2, #1
   d6cfa:	6880      	ldr	r0, [r0, #8]
   d6cfc:	f7ff fd66 	bl	d67cc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
}
   d6d00:	b005      	add	sp, #20
   d6d02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6d08 <_ZN15Adafruit_BNO0557getQuatEv>:
imu::Quaternion Adafruit_BNO055::getQuat() {
   d6d08:	b500      	push	{lr}
   d6d0a:	ed2d 8b06 	vpush	{d8-d10}
  memset(buffer, 0, 8);
   d6d0e:	2300      	movs	r3, #0
imu::Quaternion Adafruit_BNO055::getQuat() {
   d6d10:	b093      	sub	sp, #76	; 0x4c
  readLen(BNO055_QUATERNION_DATA_W_LSB_ADDR, buffer, 8);
   d6d12:	aa08      	add	r2, sp, #32
  memset(buffer, 0, 8);
   d6d14:	e9cd 3308 	strd	r3, r3, [sp, #32]
  readLen(BNO055_QUATERNION_DATA_W_LSB_ADDR, buffer, 8);
   d6d18:	2120      	movs	r1, #32
   d6d1a:	2308      	movs	r3, #8
   d6d1c:	f7ff ffe4 	bl	d6ce8 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  x = (((uint16_t)buffer[3]) << 8) | ((uint16_t)buffer[2]);
   d6d20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d6d24:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   d6d28:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6d2c:	b200      	sxth	r0, r0
   d6d2e:	f005 fcb7 	bl	dc6a0 <__aeabi_i2d>
   d6d32:	2200      	movs	r2, #0
   d6d34:	4b21      	ldr	r3, [pc, #132]	; (d6dbc <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d6d36:	f005 fd1d 	bl	dc774 <__aeabi_dmul>
  y = (((uint16_t)buffer[5]) << 8) | ((uint16_t)buffer[4]);
   d6d3a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6d3e:	ec41 0b1a 	vmov	d10, r0, r1
  y = (((uint16_t)buffer[5]) << 8) | ((uint16_t)buffer[4]);
   d6d42:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   d6d46:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6d4a:	b200      	sxth	r0, r0
   d6d4c:	f005 fca8 	bl	dc6a0 <__aeabi_i2d>
   d6d50:	2200      	movs	r2, #0
   d6d52:	4b1a      	ldr	r3, [pc, #104]	; (d6dbc <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d6d54:	f005 fd0e 	bl	dc774 <__aeabi_dmul>
  z = (((uint16_t)buffer[7]) << 8) | ((uint16_t)buffer[6]);
   d6d58:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6d5c:	ec41 0b19 	vmov	d9, r0, r1
  z = (((uint16_t)buffer[7]) << 8) | ((uint16_t)buffer[6]);
   d6d60:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   d6d64:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6d68:	b200      	sxth	r0, r0
   d6d6a:	f005 fc99 	bl	dc6a0 <__aeabi_i2d>
   d6d6e:	2200      	movs	r2, #0
   d6d70:	4b12      	ldr	r3, [pc, #72]	; (d6dbc <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d6d72:	f005 fcff 	bl	dc774 <__aeabi_dmul>
  w = (((uint16_t)buffer[1]) << 8) | ((uint16_t)buffer[0]);
   d6d76:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6d7a:	ec41 0b18 	vmov	d8, r0, r1
  w = (((uint16_t)buffer[1]) << 8) | ((uint16_t)buffer[0]);
   d6d7e:	f89d 0020 	ldrb.w	r0, [sp, #32]
   d6d82:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d6d86:	b200      	sxth	r0, r0
   d6d88:	f005 fc8a 	bl	dc6a0 <__aeabi_i2d>
   d6d8c:	4b0b      	ldr	r3, [pc, #44]	; (d6dbc <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d6d8e:	2200      	movs	r2, #0
   d6d90:	f005 fcf0 	bl	dc774 <__aeabi_dmul>
}
   d6d94:	eeb0 1a4a 	vmov.f32	s2, s20
   d6d98:	eef0 1a6a 	vmov.f32	s3, s21
   d6d9c:	eeb0 2a49 	vmov.f32	s4, s18
   d6da0:	eef0 2a69 	vmov.f32	s5, s19
   d6da4:	ec41 0b10 	vmov	d0, r0, r1
   d6da8:	eeb0 3a48 	vmov.f32	s6, s16
   d6dac:	eef0 3a68 	vmov.f32	s7, s17
   d6db0:	b013      	add	sp, #76	; 0x4c
   d6db2:	ecbd 8b06 	vpop	{d8-d10}
   d6db6:	f85d fb04 	ldr.w	pc, [sp], #4
   d6dba:	bf00      	nop
   d6dbc:	3f100000 	.word	0x3f100000

000d6dc0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
   d6dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6dc2:	460d      	mov	r5, r1
   d6dc4:	4616      	mov	r6, r2

namespace imu {

template <uint8_t N> class Vector {
public:
  Vector() { memset(p_vec, 0, sizeof(double) * N); }
   d6dc6:	2100      	movs	r1, #0
   d6dc8:	2218      	movs	r2, #24
   d6dca:	4604      	mov	r4, r0
   d6dcc:	f006 fb26 	bl	dd41c <memset>
  memset(buffer, 0, 6);
   d6dd0:	2300      	movs	r3, #0
   d6dd2:	9300      	str	r3, [sp, #0]
   d6dd4:	f8ad 3004 	strh.w	r3, [sp, #4]
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
   d6dd8:	4628      	mov	r0, r5
   d6dda:	2306      	movs	r3, #6
   d6ddc:	466a      	mov	r2, sp
   d6dde:	4631      	mov	r1, r6
   d6de0:	f7ff ff82 	bl	d6ce8 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6de4:	f89d 3001 	ldrb.w	r3, [sp, #1]
   d6de8:	f89d 0000 	ldrb.w	r0, [sp]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6dec:	f89d 7002 	ldrb.w	r7, [sp, #2]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6df0:	f89d 5004 	ldrb.w	r5, [sp, #4]
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6df4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6df8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d6dfc:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6e00:	f89d 3005 	ldrb.w	r3, [sp, #5]
  switch (vector_type) {
   d6e04:	2e1a      	cmp	r6, #26
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6e06:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6e0a:	b200      	sxth	r0, r0
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6e0c:	b23f      	sxth	r7, r7
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6e0e:	b22d      	sxth	r5, r5
  switch (vector_type) {
   d6e10:	d00d      	beq.n	d6e2e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6e12:	d808      	bhi.n	d6e26 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x66>
   d6e14:	2e0e      	cmp	r6, #14
   d6e16:	d00a      	beq.n	d6e2e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6e18:	2e14      	cmp	r6, #20
   d6e1a:	d008      	beq.n	d6e2e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6e1c:	2e08      	cmp	r6, #8
   d6e1e:	d021      	beq.n	d6e64 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
}
   d6e20:	4620      	mov	r0, r4
   d6e22:	b003      	add	sp, #12
   d6e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (vector_type) {
   d6e26:	2e28      	cmp	r6, #40	; 0x28
   d6e28:	d01c      	beq.n	d6e64 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
   d6e2a:	2e2e      	cmp	r6, #46	; 0x2e
   d6e2c:	e7f7      	b.n	d6e1e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5e>
    xyz[0] = ((double)x) / 16.0;
   d6e2e:	f005 fc37 	bl	dc6a0 <__aeabi_i2d>
   d6e32:	4b19      	ldr	r3, [pc, #100]	; (d6e98 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6e34:	2200      	movs	r2, #0
   d6e36:	f005 fc9d 	bl	dc774 <__aeabi_dmul>
   d6e3a:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 16.0;
   d6e3e:	4638      	mov	r0, r7
   d6e40:	f005 fc2e 	bl	dc6a0 <__aeabi_i2d>
   d6e44:	4b14      	ldr	r3, [pc, #80]	; (d6e98 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6e46:	2200      	movs	r2, #0
   d6e48:	f005 fc94 	bl	dc774 <__aeabi_dmul>
   d6e4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 16.0;
   d6e50:	4628      	mov	r0, r5
   d6e52:	f005 fc25 	bl	dc6a0 <__aeabi_i2d>
   d6e56:	4b10      	ldr	r3, [pc, #64]	; (d6e98 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6e58:	2200      	movs	r2, #0
   d6e5a:	f005 fc8b 	bl	dc774 <__aeabi_dmul>
    xyz[2] = ((double)z) / 100.0;
   d6e5e:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return xyz;
   d6e62:	e7dd      	b.n	d6e20 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x60>
    xyz[0] = ((double)x) / 100.0;
   d6e64:	f005 fc1c 	bl	dc6a0 <__aeabi_i2d>
   d6e68:	4b0c      	ldr	r3, [pc, #48]	; (d6e9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6e6a:	2200      	movs	r2, #0
   d6e6c:	f005 fdac 	bl	dc9c8 <__aeabi_ddiv>
   d6e70:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 100.0;
   d6e74:	4638      	mov	r0, r7
   d6e76:	f005 fc13 	bl	dc6a0 <__aeabi_i2d>
   d6e7a:	4b08      	ldr	r3, [pc, #32]	; (d6e9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6e7c:	2200      	movs	r2, #0
   d6e7e:	f005 fda3 	bl	dc9c8 <__aeabi_ddiv>
   d6e82:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 100.0;
   d6e86:	4628      	mov	r0, r5
   d6e88:	f005 fc0a 	bl	dc6a0 <__aeabi_i2d>
   d6e8c:	4b03      	ldr	r3, [pc, #12]	; (d6e9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6e8e:	2200      	movs	r2, #0
   d6e90:	f005 fd9a 	bl	dc9c8 <__aeabi_ddiv>
   d6e94:	e7e3      	b.n	d6e5e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9e>
   d6e96:	bf00      	nop
   d6e98:	3fb00000 	.word	0x3fb00000
   d6e9c:	40590000 	.word	0x40590000

000d6ea0 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
   d6ea0:	b530      	push	{r4, r5, lr}
   d6ea2:	460c      	mov	r4, r1
   d6ea4:	b087      	sub	sp, #28
   d6ea6:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   d6ea8:	2220      	movs	r2, #32
   d6eaa:	2100      	movs	r1, #0
   d6eac:	1d20      	adds	r0, r4, #4
   d6eae:	f006 fab5 	bl	dd41c <memset>
  event->version = sizeof(sensors_event_t);
   d6eb2:	2324      	movs	r3, #36	; 0x24
   d6eb4:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d6eb6:	68eb      	ldr	r3, [r5, #12]
   d6eb8:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_ORIENTATION;
   d6eba:	2303      	movs	r3, #3
   d6ebc:	60a3      	str	r3, [r4, #8]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6ebe:	f000 ffc9 	bl	d7e54 <HAL_Timer_Get_Milli_Seconds>
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6ec2:	221a      	movs	r2, #26
  event->timestamp = millis();
   d6ec4:	6120      	str	r0, [r4, #16]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6ec6:	4629      	mov	r1, r5
   d6ec8:	4668      	mov	r0, sp
   d6eca:	f7ff ff79 	bl	d6dc0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
   d6ece:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6ed2:	f005 ff47 	bl	dcd64 <__aeabi_d2f>
   d6ed6:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
   d6ed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6edc:	f005 ff42 	bl	dcd64 <__aeabi_d2f>
   d6ee0:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
   d6ee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6ee6:	f005 ff3d 	bl	dcd64 <__aeabi_d2f>
   d6eea:	61e0      	str	r0, [r4, #28]
}
   d6eec:	2001      	movs	r0, #1
   d6eee:	b007      	add	sp, #28
   d6ef0:	bd30      	pop	{r4, r5, pc}

000d6ef2 <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d6ef2:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d6ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d6ef6:	db66      	blt.n	d6fc6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6ef8:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d6efc:	428c      	cmp	r4, r1
   d6efe:	dd62      	ble.n	d6fc6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6f00:	2a00      	cmp	r2, #0
   d6f02:	db60      	blt.n	d6fc6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6f04:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d6f08:	4294      	cmp	r4, r2
   d6f0a:	dd5c      	ble.n	d6fc6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   d6f0c:	7e84      	ldrb	r4, [r0, #26]
   d6f0e:	2c02      	cmp	r4, #2
   d6f10:	d05a      	beq.n	d6fc8 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   d6f12:	2c03      	cmp	r4, #3
   d6f14:	d061      	beq.n	d6fda <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   d6f16:	2c01      	cmp	r4, #1
   d6f18:	d104      	bne.n	d6f24 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   d6f1a:	8904      	ldrh	r4, [r0, #8]
   d6f1c:	43d2      	mvns	r2, r2
   d6f1e:	4414      	add	r4, r2
      break;
   d6f20:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d6f22:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   d6f24:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   d6f28:	428c      	cmp	r4, r1
   d6f2a:	bfa8      	it	ge
   d6f2c:	460c      	movge	r4, r1
   d6f2e:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   d6f30:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   d6f34:	4294      	cmp	r4, r2
   d6f36:	bfa8      	it	ge
   d6f38:	4614      	movge	r4, r2
   d6f3a:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   d6f3c:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   d6f40:	428c      	cmp	r4, r1
   d6f42:	bfb8      	it	lt
   d6f44:	460c      	movlt	r4, r1
   d6f46:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   d6f48:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   d6f4c:	4294      	cmp	r4, r2
   d6f4e:	bfb8      	it	lt
   d6f50:	4614      	movlt	r4, r2
   d6f52:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   d6f54:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d6f58:	2c01      	cmp	r4, #1
   d6f5a:	d116      	bne.n	d6f8a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   d6f5c:	2b01      	cmp	r3, #1
   d6f5e:	d042      	beq.n	d6fe6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   d6f60:	2b02      	cmp	r3, #2
   d6f62:	d051      	beq.n	d7008 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   d6f64:	b98b      	cbnz	r3, d6f8a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   d6f66:	2a00      	cmp	r2, #0
   d6f68:	8905      	ldrh	r5, [r0, #8]
   d6f6a:	6b47      	ldr	r7, [r0, #52]	; 0x34
   d6f6c:	4614      	mov	r4, r2
   d6f6e:	bfb8      	it	lt
   d6f70:	1dd4      	addlt	r4, r2, #7
   d6f72:	10e4      	asrs	r4, r4, #3
   d6f74:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6f78:	f002 0607 	and.w	r6, r2, #7
   d6f7c:	2501      	movs	r5, #1
   d6f7e:	fa05 f606 	lsl.w	r6, r5, r6
   d6f82:	5d3d      	ldrb	r5, [r7, r4]
   d6f84:	ea25 0506 	bic.w	r5, r5, r6
   d6f88:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   d6f8a:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d6f8e:	2c04      	cmp	r4, #4
   d6f90:	d119      	bne.n	d6fc6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   d6f92:	8904      	ldrh	r4, [r0, #8]
   d6f94:	fb14 f202 	smulbb	r2, r4, r2
   d6f98:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   d6f9c:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   d6fa0:	f342 024f 	sbfx	r2, r2, #1, #16
   d6fa4:	eb02 0264 	add.w	r2, r2, r4, asr #1
   d6fa8:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
   d6faa:	5ca0      	ldrb	r0, [r4, r2]
   d6fac:	07c9      	lsls	r1, r1, #31
        uint8_t t = pixelptr[0] & 0x0F;
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   d6fae:	bf4b      	itete	mi
   d6fb0:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   d6fb4:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   d6fb8:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   d6fbc:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   d6fc0:	bf48      	it	mi
   d6fc2:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   d6fc4:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   d6fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   d6fc8:	8904      	ldrh	r4, [r0, #8]
   d6fca:	43c9      	mvns	r1, r1
   d6fcc:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d6fce:	8944      	ldrh	r4, [r0, #10]
   d6fd0:	43d2      	mvns	r2, r2
   d6fd2:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   d6fd4:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d6fd6:	b212      	sxth	r2, r2
      break;
   d6fd8:	e7a4      	b.n	d6f24 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d6fda:	8944      	ldrh	r4, [r0, #10]
   d6fdc:	43c9      	mvns	r1, r1
   d6fde:	440c      	add	r4, r1
      break;
   d6fe0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d6fe2:	b222      	sxth	r2, r4
      break;
   d6fe4:	e79e      	b.n	d6f24 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   d6fe6:	2a00      	cmp	r2, #0
   d6fe8:	8905      	ldrh	r5, [r0, #8]
   d6fea:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d6fec:	4614      	mov	r4, r2
   d6fee:	bfb8      	it	lt
   d6ff0:	1dd4      	addlt	r4, r2, #7
   d6ff2:	10e4      	asrs	r4, r4, #3
   d6ff4:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6ff8:	f002 0707 	and.w	r7, r2, #7
   d6ffc:	2501      	movs	r5, #1
   d6ffe:	40bd      	lsls	r5, r7
   d7000:	5d37      	ldrb	r7, [r6, r4]
   d7002:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d7004:	5535      	strb	r5, [r6, r4]
        break;
   d7006:	e7c0      	b.n	d6f8a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d7008:	2a00      	cmp	r2, #0
   d700a:	8905      	ldrh	r5, [r0, #8]
   d700c:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d700e:	4614      	mov	r4, r2
   d7010:	bfb8      	it	lt
   d7012:	1dd4      	addlt	r4, r2, #7
   d7014:	10e4      	asrs	r4, r4, #3
   d7016:	fb14 1405 	smlabb	r4, r4, r5, r1
   d701a:	f002 0707 	and.w	r7, r2, #7
   d701e:	2501      	movs	r5, #1
   d7020:	40bd      	lsls	r5, r7
   d7022:	5d37      	ldrb	r7, [r6, r4]
   d7024:	407d      	eors	r5, r7
   d7026:	e7ed      	b.n	d7004 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

000d7028 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   d7028:	b538      	push	{r3, r4, r5, lr}
   d702a:	460d      	mov	r5, r1
   d702c:	4611      	mov	r1, r2
   d702e:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d7030:	b21a      	sxth	r2, r3
   d7032:	b209      	sxth	r1, r1
   d7034:	f000 fa96 	bl	d7564 <_ZN12Adafruit_GFXC1Ess>
   d7038:	9a06      	ldr	r2, [sp, #24]
   d703a:	4b0b      	ldr	r3, [pc, #44]	; (d7068 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   d703c:	62e2      	str	r2, [r4, #44]	; 0x2c
   d703e:	9a07      	ldr	r2, [sp, #28]
   d7040:	6023      	str	r3, [r4, #0]
   d7042:	2300      	movs	r3, #0
   d7044:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   d7048:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   d704c:	f04f 33ff 	mov.w	r3, #4294967295
   d7050:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   d7054:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   d7058:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   d705a:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d705c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   d7060:	6523      	str	r3, [r4, #80]	; 0x50
}
   d7062:	4620      	mov	r0, r4
   d7064:	bd38      	pop	{r3, r4, r5, pc}
   d7066:	bf00      	nop
   d7068:	000ddd24 	.word	0x000ddd24

000d706c <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   d706c:	b538      	push	{r3, r4, r5, lr}
   d706e:	4b0c      	ldr	r3, [pc, #48]	; (d70a0 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   d7070:	6003      	str	r3, [r0, #0]
   d7072:	4604      	mov	r4, r0
  if (buffer) {
   d7074:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d7076:	b118      	cbz	r0, d7080 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   d7078:	f001 f940 	bl	d82fc <free>
    buffer = NULL;
   d707c:	2300      	movs	r3, #0
   d707e:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   d7080:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d7082:	b135      	cbz	r5, d7092 <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   d7084:	4628      	mov	r0, r5
   d7086:	f7ff f9db 	bl	d6440 <_ZN18Adafruit_SPIDeviceD1Ev>
   d708a:	2138      	movs	r1, #56	; 0x38
   d708c:	4628      	mov	r0, r5
   d708e:	f002 fd3f 	bl	d9b10 <_ZdlPvj>
  if (i2c_dev)
   d7092:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d7094:	b110      	cbz	r0, d709c <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   d7096:	2110      	movs	r1, #16
   d7098:	f002 fd3a 	bl	d9b10 <_ZdlPvj>
}
   d709c:	4620      	mov	r0, r4
   d709e:	bd38      	pop	{r3, r4, r5, pc}
   d70a0:	000ddd24 	.word	0x000ddd24

000d70a4 <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d70a4:	b530      	push	{r4, r5, lr}
   d70a6:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   d70a8:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d70aa:	f88d 100f 	strb.w	r1, [sp, #15]
   d70ae:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   d70b0:	b17d      	cbz	r5, d70d2 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d70b2:	2300      	movs	r3, #0
   d70b4:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   d70b6:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d70ba:	f88d 3014 	strb.w	r3, [sp, #20]
   d70be:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   d70c2:	2301      	movs	r3, #1
   d70c4:	2202      	movs	r2, #2
   d70c6:	a905      	add	r1, sp, #20
   d70c8:	4628      	mov	r0, r5
   d70ca:	f7ff fb11 	bl	d66f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d70ce:	b007      	add	sp, #28
   d70d0:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   d70d2:	4629      	mov	r1, r5
   d70d4:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d70d8:	f002 fc83 	bl	d99e2 <digitalWrite>
    spi_dev->write(&c, 1);
   d70dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d70de:	9500      	str	r5, [sp, #0]
   d70e0:	462b      	mov	r3, r5
   d70e2:	2201      	movs	r2, #1
   d70e4:	f10d 010f 	add.w	r1, sp, #15
   d70e8:	f7ff faa5 	bl	d6636 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   d70ec:	e7ef      	b.n	d70ce <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000d70ee <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   d70ee:	2900      	cmp	r1, #0
   d70f0:	bf14      	ite	ne
   d70f2:	21a7      	movne	r1, #167	; 0xa7
   d70f4:	21a6      	moveq	r1, #166	; 0xa6
   d70f6:	f7ff bfd5 	b.w	d70a4 <_ZN17Adafruit_GrayOLED12oled_commandEh>

000d70fa <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d70fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   d70fc:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d70fe:	b085      	sub	sp, #20
   d7100:	4604      	mov	r4, r0
   d7102:	460e      	mov	r6, r1
   d7104:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   d7106:	b165      	cbz	r5, d7122 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d7108:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d710a:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d710e:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d7112:	2301      	movs	r3, #1
   d7114:	9000      	str	r0, [sp, #0]
   d7116:	9301      	str	r3, [sp, #4]
   d7118:	4628      	mov	r0, r5
   d711a:	f7ff fae9 	bl	d66f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d711e:	b005      	add	sp, #20
   d7120:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   d7122:	4629      	mov	r1, r5
   d7124:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d7128:	f002 fc5b 	bl	d99e2 <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   d712c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d712e:	9500      	str	r5, [sp, #0]
   d7130:	462b      	mov	r3, r5
   d7132:	463a      	mov	r2, r7
   d7134:	4631      	mov	r1, r6
   d7136:	f7ff fa7e 	bl	d6636 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d713a:	e7f0      	b.n	d711e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000d713c <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   d713c:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d713e:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   d7142:	8903      	ldrh	r3, [r0, #8]
   d7144:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   d7148:	fb12 f203 	smulbb	r2, r2, r3
   d714c:	1dcb      	adds	r3, r1, #7
   d714e:	bf48      	it	mi
   d7150:	f101 030e 	addmi.w	r3, r1, #14
   d7154:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   d7156:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d7158:	435a      	muls	r2, r3
   d715a:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d715c:	2100      	movs	r1, #0
   d715e:	f006 f95d 	bl	dd41c <memset>
  window_x1 = 0;
   d7162:	2300      	movs	r3, #0
   d7164:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d7166:	8923      	ldrh	r3, [r4, #8]
   d7168:	3b01      	subs	r3, #1
   d716a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d716c:	8963      	ldrh	r3, [r4, #10]
   d716e:	3b01      	subs	r3, #1
   d7170:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   d7172:	bd10      	pop	{r4, pc}

000d7174 <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d7174:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   d7176:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d7178:	4604      	mov	r4, r0
   d717a:	460e      	mov	r6, r1
   d717c:	4615      	mov	r5, r2
  if ((!buffer) &&
   d717e:	b30b      	cbz	r3, d71c4 <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   d7180:	2d00      	cmp	r5, #0
   d7182:	d133      	bne.n	d71ec <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   d7184:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d7186:	2b00      	cmp	r3, #0
   d7188:	d050      	beq.n	d722c <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   d718a:	2010      	movs	r0, #16
   d718c:	f7fc ff83 	bl	d4096 <_Znwj>
   d7190:	4605      	mov	r5, r0
   d7192:	b118      	cbz	r0, d719c <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   d7194:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d7196:	4631      	mov	r1, r6
   d7198:	f7ff fa7f 	bl	d669a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d719c:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   d719e:	b31d      	cbz	r5, d71e8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d71a0:	2101      	movs	r1, #1
   d71a2:	4628      	mov	r0, r5
   d71a4:	f7ff fa95 	bl	d66d2 <_ZN18Adafruit_I2CDevice5beginEb>
   d71a8:	b1f0      	cbz	r0, d71e8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   d71aa:	4620      	mov	r0, r4
   d71ac:	f7ff ffc6 	bl	d713c <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   d71b0:	2300      	movs	r3, #0
   d71b2:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d71b4:	8923      	ldrh	r3, [r4, #8]
   d71b6:	3b01      	subs	r3, #1
   d71b8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d71ba:	8963      	ldrh	r3, [r4, #10]
   d71bc:	3b01      	subs	r3, #1
   d71be:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   d71c0:	2001      	movs	r0, #1
   d71c2:	e012      	b.n	d71ea <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   d71c4:	8923      	ldrh	r3, [r4, #8]
   d71c6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   d71ca:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   d71ce:	fb10 f003 	smulbb	r0, r0, r3
   d71d2:	1dd3      	adds	r3, r2, #7
   d71d4:	bf48      	it	mi
   d71d6:	f102 030e 	addmi.w	r3, r2, #14
   d71da:	10db      	asrs	r3, r3, #3
   d71dc:	4358      	muls	r0, r3
   d71de:	f001 f885 	bl	d82ec <malloc>
   d71e2:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   d71e4:	2800      	cmp	r0, #0
   d71e6:	d1cb      	bne.n	d7180 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   d71e8:	2000      	movs	r0, #0
}
   d71ea:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   d71ec:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d71ee:	2800      	cmp	r0, #0
   d71f0:	dbc8      	blt.n	d7184 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   d71f2:	2101      	movs	r1, #1
   d71f4:	b280      	uxth	r0, r0
   d71f6:	f002 fbe3 	bl	d99c0 <pinMode>
    digitalWrite(rstPin, HIGH);
   d71fa:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d71fe:	2101      	movs	r1, #1
   d7200:	f002 fbef 	bl	d99e2 <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   d7204:	200a      	movs	r0, #10
   d7206:	f001 fd11 	bl	d8c2c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d720a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d720e:	2100      	movs	r1, #0
   d7210:	f002 fbe7 	bl	d99e2 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d7214:	200a      	movs	r0, #10
   d7216:	f001 fd09 	bl	d8c2c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d721a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d721e:	2101      	movs	r1, #1
   d7220:	f002 fbdf 	bl	d99e2 <digitalWrite>
    delay(10);
   d7224:	200a      	movs	r0, #10
   d7226:	f001 fd01 	bl	d8c2c <delay>
   d722a:	e7ab      	b.n	d7184 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   d722c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d722e:	2800      	cmp	r0, #0
   d7230:	d0da      	beq.n	d71e8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d7232:	f7ff f90e 	bl	d6452 <_ZN18Adafruit_SPIDevice5beginEv>
   d7236:	2800      	cmp	r0, #0
   d7238:	d0d6      	beq.n	d71e8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d723a:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d723e:	2101      	movs	r1, #1
   d7240:	f002 fbbe 	bl	d99c0 <pinMode>
   d7244:	e7b1      	b.n	d71aa <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000d7246 <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   d7246:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d7248:	2381      	movs	r3, #129	; 0x81
   d724a:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   d724e:	2202      	movs	r2, #2
   d7250:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d7252:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   d7256:	f7ff ff50 	bl	d70fa <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   d725a:	b003      	add	sp, #12
   d725c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7260 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
   d7260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7264:	b085      	sub	sp, #20
   d7266:	461f      	mov	r7, r3
   d7268:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d726c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d7270:	eba8 0902 	sub.w	r9, r8, r2
   d7274:	eba7 0a01 	sub.w	sl, r7, r1
   d7278:	f1b9 0f00 	cmp.w	r9, #0
   d727c:	bfb8      	it	lt
   d727e:	f1c9 0900 	rsblt	r9, r9, #0
   d7282:	f1ba 0f00 	cmp.w	sl, #0
   d7286:	bfb8      	it	lt
   d7288:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d728c:	45d1      	cmp	r9, sl
                             uint16_t color) {
   d728e:	4683      	mov	fp, r0
   d7290:	460c      	mov	r4, r1
   d7292:	4615      	mov	r5, r2
  if (steep) {
   d7294:	dd04      	ble.n	d72a0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d7296:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
   d7298:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
   d729a:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
   d729c:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
   d729e:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d72a0:	42bc      	cmp	r4, r7
   d72a2:	dd05      	ble.n	d72b0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d72a4:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
   d72a6:	4645      	mov	r5, r8
   d72a8:	4690      	mov	r8, r2
  if (x0 > x1) {
   d72aa:	4622      	mov	r2, r4
   d72ac:	463c      	mov	r4, r7
   d72ae:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d72b0:	1b3e      	subs	r6, r7, r4
   d72b2:	b2b2      	uxth	r2, r6
   d72b4:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d72b6:	eba8 0205 	sub.w	r2, r8, r5
   d72ba:	2a00      	cmp	r2, #0
   d72bc:	bfb8      	it	lt
   d72be:	4252      	neglt	r2, r2
   d72c0:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d72c2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d72c6:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d72ca:	4545      	cmp	r5, r8
   d72cc:	bfb4      	ite	lt
   d72ce:	2201      	movlt	r2, #1
   d72d0:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d72d4:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d72d6:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
   d72d8:	42bc      	cmp	r4, r7
   d72da:	dc1c      	bgt.n	d7316 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
    if (steep) {
   d72dc:	f8db 2000 	ldr.w	r2, [fp]
      writePixel(y0, x0, color);
   d72e0:	9303      	str	r3, [sp, #12]
    if (steep) {
   d72e2:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
   d72e4:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d72e8:	bfc7      	ittee	gt
   d72ea:	4629      	movgt	r1, r5
   d72ec:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
   d72ee:	462a      	movle	r2, r5
   d72f0:	4621      	movle	r1, r4
   d72f2:	4658      	mov	r0, fp
   d72f4:	47c0      	blx	r8
    }
    err -= dy;
   d72f6:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
   d72f8:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d72fa:	1ab6      	subs	r6, r6, r2
   d72fc:	b2b1      	uxth	r1, r6
   d72fe:	b236      	sxth	r6, r6
    if (err < 0) {
   d7300:	2e00      	cmp	r6, #0
   d7302:	da05      	bge.n	d7310 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
      y0 += ystep;
   d7304:	9a02      	ldr	r2, [sp, #8]
   d7306:	4415      	add	r5, r2
      err += dx;
   d7308:	9a00      	ldr	r2, [sp, #0]
   d730a:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d730c:	b22d      	sxth	r5, r5
      err += dx;
   d730e:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
   d7310:	3401      	adds	r4, #1
   d7312:	b224      	sxth	r4, r4
   d7314:	e7e0      	b.n	d72d8 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
    }
  }
}
   d7316:	b005      	add	sp, #20
   d7318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d731c <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
   d731c:	4770      	bx	lr

000d731e <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
   d731e:	b410      	push	{r4}
  drawPixel(x, y, color);
   d7320:	6804      	ldr	r4, [r0, #0]
   d7322:	6924      	ldr	r4, [r4, #16]
   d7324:	46a4      	mov	ip, r4
}
   d7326:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
   d732a:	4760      	bx	ip

000d732c <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
   d732c:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
   d732e:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d7330:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
   d7334:	9502      	str	r5, [sp, #8]
   d7336:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d7338:	46a4      	mov	ip, r4
}
   d733a:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
   d733c:	4760      	bx	ip

000d733e <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
   d733e:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
   d7340:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d7342:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
   d7346:	9502      	str	r5, [sp, #8]
   d7348:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d734a:	46a4      	mov	ip, r4
}
   d734c:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
   d734e:	4760      	bx	ip

000d7350 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
   d7350:	b470      	push	{r4, r5, r6}
   d7352:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d7356:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
   d735a:	6804      	ldr	r4, [r0, #0]
   d735c:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d7360:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d7362:	46a4      	mov	ip, r4
}
   d7364:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
   d7366:	4760      	bx	ip

000d7368 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
   d7368:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d736c:	461c      	mov	r4, r3
  startWrite();
   d736e:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d7370:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d7374:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d7376:	4605      	mov	r5, r0
   d7378:	4616      	mov	r6, r2
  writeLine(x, y, x, y + h - 1, color);
   d737a:	3c01      	subs	r4, #1
   d737c:	4434      	add	r4, r6
                                 uint16_t color) {
   d737e:	460f      	mov	r7, r1
  writeLine(x, y, x, y + h - 1, color);
   d7380:	b224      	sxth	r4, r4
  startWrite();
   d7382:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
   d7384:	682b      	ldr	r3, [r5, #0]
   d7386:	f8cd 8004 	str.w	r8, [sp, #4]
   d738a:	9400      	str	r4, [sp, #0]
   d738c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d738e:	4628      	mov	r0, r5
   d7390:	463b      	mov	r3, r7
   d7392:	4632      	mov	r2, r6
   d7394:	4639      	mov	r1, r7
   d7396:	47a0      	blx	r4
  endWrite();
   d7398:	682b      	ldr	r3, [r5, #0]
   d739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d739c:	4628      	mov	r0, r5
}
   d739e:	b002      	add	sp, #8
   d73a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d73a4:	4718      	bx	r3

000d73a6 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
   d73a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d73aa:	461d      	mov	r5, r3
  startWrite();
   d73ac:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d73ae:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d73b2:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d73b4:	4604      	mov	r4, r0
   d73b6:	4617      	mov	r7, r2
   d73b8:	460e      	mov	r6, r1
  startWrite();
   d73ba:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
   d73bc:	e9cd 7800 	strd	r7, r8, [sp]
   d73c0:	6822      	ldr	r2, [r4, #0]
   d73c2:	1e6b      	subs	r3, r5, #1
   d73c4:	4433      	add	r3, r6
   d73c6:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d73c8:	4620      	mov	r0, r4
   d73ca:	b21b      	sxth	r3, r3
   d73cc:	463a      	mov	r2, r7
   d73ce:	4631      	mov	r1, r6
   d73d0:	47a8      	blx	r5
  endWrite();
   d73d2:	6823      	ldr	r3, [r4, #0]
   d73d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d73d6:	4620      	mov	r0, r4
}
   d73d8:	b002      	add	sp, #8
   d73da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d73de:	4718      	bx	r3

000d73e0 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d73e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d73e4:	461e      	mov	r6, r3
  startWrite();
   d73e6:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d73e8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
   d73ec:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d73ee:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d73f2:	460c      	mov	r4, r1
   d73f4:	4605      	mov	r5, r0
   d73f6:	4617      	mov	r7, r2
  startWrite();
   d73f8:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
   d73fa:	4426      	add	r6, r4
   d73fc:	42b4      	cmp	r4, r6
   d73fe:	682b      	ldr	r3, [r5, #0]
   d7400:	da0b      	bge.n	d741a <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
   d7402:	f8cd 8000 	str.w	r8, [sp]
   d7406:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d740a:	4621      	mov	r1, r4
   d740c:	464b      	mov	r3, r9
   d740e:	463a      	mov	r2, r7
   d7410:	4628      	mov	r0, r5
   d7412:	3401      	adds	r4, #1
   d7414:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
   d7416:	b224      	sxth	r4, r4
   d7418:	e7f0      	b.n	d73fc <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
   d741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d741c:	4628      	mov	r0, r5
}
   d741e:	b002      	add	sp, #8
   d7420:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d7424:	4718      	bx	r3

000d7426 <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d7426:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d7428:	6802      	ldr	r2, [r0, #0]
   d742a:	9101      	str	r1, [sp, #4]
   d742c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d7430:	9100      	str	r1, [sp, #0]
   d7432:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d7434:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d7438:	2200      	movs	r2, #0
   d743a:	4611      	mov	r1, r2
   d743c:	47a0      	blx	r4
}
   d743e:	b002      	add	sp, #8
   d7440:	bd10      	pop	{r4, pc}

000d7442 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d7442:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d7446:	461d      	mov	r5, r3
  startWrite();
   d7448:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d744a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
   d744e:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d7450:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d7454:	4604      	mov	r4, r0
   d7456:	460f      	mov	r7, r1
   d7458:	4616      	mov	r6, r2
  startWrite();
   d745a:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
   d745c:	6823      	ldr	r3, [r4, #0]
   d745e:	f8cd 8000 	str.w	r8, [sp]
   d7462:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d7466:	4632      	mov	r2, r6
   d7468:	462b      	mov	r3, r5
   d746a:	4639      	mov	r1, r7
   d746c:	4620      	mov	r0, r4
   d746e:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
   d7470:	6823      	ldr	r3, [r4, #0]
   d7472:	f8cd 8000 	str.w	r8, [sp]
   d7476:	f109 32ff 	add.w	r2, r9, #4294967295
   d747a:	4432      	add	r2, r6
   d747c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d7480:	4639      	mov	r1, r7
   d7482:	462b      	mov	r3, r5
   d7484:	4620      	mov	r0, r4
   d7486:	b212      	sxth	r2, r2
   d7488:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
   d748a:	6823      	ldr	r3, [r4, #0]
   d748c:	f8cd 8000 	str.w	r8, [sp]
   d7490:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d7494:	4632      	mov	r2, r6
   d7496:	464b      	mov	r3, r9
   d7498:	4639      	mov	r1, r7
   d749a:	4620      	mov	r0, r4
   d749c:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
   d749e:	1e6b      	subs	r3, r5, #1
   d74a0:	19d9      	adds	r1, r3, r7
   d74a2:	6823      	ldr	r3, [r4, #0]
   d74a4:	f8cd 8000 	str.w	r8, [sp]
   d74a8:	6a1d      	ldr	r5, [r3, #32]
   d74aa:	4620      	mov	r0, r4
   d74ac:	464b      	mov	r3, r9
   d74ae:	4632      	mov	r2, r6
   d74b0:	b209      	sxth	r1, r1
   d74b2:	47a8      	blx	r5
  endWrite();
   d74b4:	6823      	ldr	r3, [r4, #0]
   d74b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d74b8:	4620      	mov	r0, r4
}
   d74ba:	b002      	add	sp, #8
   d74bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d74c0:	4718      	bx	r3

000d74c2 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
   d74c2:	4770      	bx	lr

000d74c4 <_ZN12Adafruit_GFX8drawLineEsssst>:
                            uint16_t color) {
   d74c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if (x0 == x1) {
   d74c8:	4299      	cmp	r1, r3
                            uint16_t color) {
   d74ca:	4616      	mov	r6, r2
   d74cc:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d74d0:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d74d4:	6802      	ldr	r2, [r0, #0]
   d74d6:	4680      	mov	r8, r0
   d74d8:	460d      	mov	r5, r1
   d74da:	461c      	mov	r4, r3
  if (x0 == x1) {
   d74dc:	d113      	bne.n	d7506 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
    if (y0 > y1)
   d74de:	42be      	cmp	r6, r7
   d74e0:	bfc8      	it	gt
   d74e2:	4633      	movgt	r3, r6
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d74e4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    if (y0 > y1)
   d74e8:	bfc4      	itt	gt
   d74ea:	463e      	movgt	r6, r7
   d74ec:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d74ee:	1c7b      	adds	r3, r7, #1
   d74f0:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d74f2:	1b9b      	subs	r3, r3, r6
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d74f4:	b21b      	sxth	r3, r3
   d74f6:	4632      	mov	r2, r6
   d74f8:	4629      	mov	r1, r5
   d74fa:	4640      	mov	r0, r8
   d74fc:	46a4      	mov	ip, r4
}
   d74fe:	b003      	add	sp, #12
   d7500:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d7504:	4760      	bx	ip
  } else if (y0 == y1) {
   d7506:	42be      	cmp	r6, r7
   d7508:	d10a      	bne.n	d7520 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
    if (x0 > x1)
   d750a:	4299      	cmp	r1, r3
   d750c:	bfc2      	ittt	gt
   d750e:	460b      	movgt	r3, r1
   d7510:	4625      	movgt	r5, r4
   d7512:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d7514:	1c63      	adds	r3, r4, #1
   d7516:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d751a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d751c:	1b5b      	subs	r3, r3, r5
   d751e:	e7e9      	b.n	d74f4 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
    startWrite();
   d7520:	6953      	ldr	r3, [r2, #20]
   d7522:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
   d7524:	e9cd 7900 	strd	r7, r9, [sp]
   d7528:	f8d8 3000 	ldr.w	r3, [r8]
   d752c:	4640      	mov	r0, r8
   d752e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d7530:	4632      	mov	r2, r6
   d7532:	4623      	mov	r3, r4
   d7534:	4629      	mov	r1, r5
   d7536:	47b8      	blx	r7
    endWrite();
   d7538:	f8d8 3000 	ldr.w	r3, [r8]
   d753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d753e:	4640      	mov	r0, r8
}
   d7540:	b003      	add	sp, #12
   d7542:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
   d7546:	4718      	bx	r3

000d7548 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   d7548:	f001 0303 	and.w	r3, r1, #3
   d754c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d7550:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
   d7552:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
   d7554:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d7558:	bf59      	ittee	pl
   d755a:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   d755c:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
   d755e:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   d7560:	81c3      	strhmi	r3, [r0, #14]
}
   d7562:	4770      	bx	lr

000d7564 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d7564:	b530      	push	{r4, r5, lr}
   d7566:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
   d7568:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
   d756a:	4a07      	ldr	r2, [pc, #28]	; (d7588 <_ZN12Adafruit_GFXC1Ess+0x24>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d756c:	4d07      	ldr	r5, [pc, #28]	; (d758c <_ZN12Adafruit_GFXC1Ess+0x28>)
   d756e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d7570:	2400      	movs	r4, #0
  _width = WIDTH;
   d7572:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
   d7574:	f04f 31ff 	mov.w	r1, #4294967295
   d7578:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d757c:	6044      	str	r4, [r0, #4]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d757e:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
   d7580:	6104      	str	r4, [r0, #16]
  _cp437 = false;
   d7582:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
   d7584:	6204      	str	r4, [r0, #32]
}
   d7586:	bd30      	pop	{r4, r5, pc}
   d7588:	01000101 	.word	0x01000101
   d758c:	000de280 	.word	0x000de280

000d7590 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
   d7590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7594:	b089      	sub	sp, #36	; 0x24
   d7596:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
   d759a:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
   d759c:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d75a0:	9304      	str	r3, [sp, #16]
   d75a2:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  startWrite();
   d75a6:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
   d75a8:	9305      	str	r3, [sp, #20]
   d75aa:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d75ae:	4604      	mov	r4, r0
  startWrite();
   d75b0:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d75b2:	f118 0207 	adds.w	r2, r8, #7
  startWrite();
   d75b6:	f04f 0600 	mov.w	r6, #0
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d75ba:	bf48      	it	mi
   d75bc:	f108 020e 	addmi.w	r2, r8, #14
   d75c0:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
   d75c4:	9601      	str	r6, [sp, #4]
  uint8_t byte = 0;
   d75c6:	4635      	mov	r5, r6
   d75c8:	9b03      	ldr	r3, [sp, #12]
   d75ca:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
   d75cc:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d75d0:	189a      	adds	r2, r3, r2
   d75d2:	9b05      	ldr	r3, [sp, #20]
   d75d4:	428b      	cmp	r3, r1
   d75d6:	b212      	sxth	r2, r2
   d75d8:	dd27      	ble.n	d762a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d75da:	9b04      	ldr	r3, [sp, #16]
   d75dc:	4433      	add	r3, r6
  for (int16_t j = 0; j < h; j++, y++) {
   d75de:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d75e2:	9306      	str	r3, [sp, #24]
   d75e4:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
   d75e8:	4580      	cmp	r8, r0
   d75ea:	fa1f f189 	uxth.w	r1, r9
   d75ee:	dd17      	ble.n	d7620 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
      if (i & 7)
   d75f0:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d75f2:	bf05      	ittet	eq
   d75f4:	9b06      	ldreq	r3, [sp, #24]
   d75f6:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
   d75f8:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d75fa:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
   d75fc:	bf18      	it	ne
   d75fe:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
   d7600:	062b      	lsls	r3, r5, #24
   d7602:	d50a      	bpl.n	d761a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
        writePixel(x + i, y, color);
   d7604:	9b02      	ldr	r3, [sp, #8]
   d7606:	6820      	ldr	r0, [r4, #0]
   d7608:	9207      	str	r2, [sp, #28]
   d760a:	4419      	add	r1, r3
   d760c:	6983      	ldr	r3, [r0, #24]
   d760e:	b209      	sxth	r1, r1
   d7610:	461f      	mov	r7, r3
   d7612:	4620      	mov	r0, r4
   d7614:	4653      	mov	r3, sl
   d7616:	47b8      	blx	r7
   d7618:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
   d761a:	f109 0901 	add.w	r9, r9, #1
   d761e:	e7e1      	b.n	d75e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
  for (int16_t j = 0; j < h; j++, y++) {
   d7620:	9b01      	ldr	r3, [sp, #4]
   d7622:	3301      	adds	r3, #1
   d7624:	9301      	str	r3, [sp, #4]
   d7626:	445e      	add	r6, fp
   d7628:	e7ce      	b.n	d75c8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
  endWrite();
   d762a:	6823      	ldr	r3, [r4, #0]
   d762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d762e:	4620      	mov	r0, r4
}
   d7630:	b009      	add	sp, #36	; 0x24
   d7632:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
   d7636:	4718      	bx	r3

000d7638 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
   d7638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d763c:	ed2d 8b02 	vpush	{d8}
   d7640:	b091      	sub	sp, #68	; 0x44
   d7642:	4616      	mov	r6, r2
  if (!gfxFont) { // 'Classic' built-in font
   d7644:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
   d7646:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d764a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d764e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d7652:	9103      	str	r1, [sp, #12]
   d7654:	461f      	mov	r7, r3
   d7656:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d765a:	9304      	str	r3, [sp, #16]
   d765c:	4683      	mov	fp, r0
  if (!gfxFont) { // 'Classic' built-in font
   d765e:	2a00      	cmp	r2, #0
   d7660:	f040 80c5 	bne.w	d77ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
   d7664:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d7668:	428b      	cmp	r3, r1
   d766a:	f340 814c 	ble.w	d7906 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d766e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d7672:	42b3      	cmp	r3, r6
   d7674:	f340 8147 	ble.w	d7906 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d7678:	2306      	movs	r3, #6
   d767a:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
   d767e:	2b00      	cmp	r3, #0
   d7680:	f340 8141 	ble.w	d7906 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
   d7684:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d7688:	2b00      	cmp	r3, #0
   d768a:	f340 813c 	ble.w	d7906 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
   d768e:	7f03      	ldrb	r3, [r0, #28]
   d7690:	b91b      	cbnz	r3, d769a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d7692:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
   d7694:	bf84      	itt	hi
   d7696:	3701      	addhi	r7, #1
   d7698:	b2ff      	uxtbhi	r7, r7
    startWrite();
   d769a:	f8db 3000 	ldr.w	r3, [fp]
   d769e:	4658      	mov	r0, fp
   d76a0:	695b      	ldr	r3, [r3, #20]
   d76a2:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d76a4:	2205      	movs	r2, #5
   d76a6:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d76a8:	2200      	movs	r2, #0
   d76aa:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d76ac:	4a98      	ldr	r2, [pc, #608]	; (d7910 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d76ae:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d76b2:	18d3      	adds	r3, r2, r3
   d76b4:	930c      	str	r3, [sp, #48]	; 0x30
   d76b6:	b2b3      	uxth	r3, r6
   d76b8:	9306      	str	r3, [sp, #24]
   d76ba:	9a05      	ldr	r2, [sp, #20]
   d76bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d76be:	5c9b      	ldrb	r3, [r3, r2]
   d76c0:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d76c2:	b2ab      	uxth	r3, r5
   d76c4:	930b      	str	r3, [sp, #44]	; 0x2c
   d76c6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d76ca:	9308      	str	r3, [sp, #32]
   d76cc:	9b03      	ldr	r3, [sp, #12]
   d76ce:	fb02 f905 	mul.w	r9, r2, r5
   d76d2:	fa19 f983 	uxtah	r9, r9, r3
   d76d6:	fa0f f389 	sxth.w	r3, r9
   d76da:	ee08 3a10 	vmov	s16, r3
   d76de:	2308      	movs	r3, #8
   d76e0:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
   d76e2:	9b03      	ldr	r3, [sp, #12]
   d76e4:	eb02 0a03 	add.w	sl, r2, r3
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d76e8:	f04f 0900 	mov.w	r9, #0
            writePixel(x + i, y + j, bg);
   d76ec:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
   d76f0:	9a07      	ldr	r2, [sp, #28]
   d76f2:	f8db 3000 	ldr.w	r3, [fp]
   d76f6:	07d2      	lsls	r2, r2, #31
   d76f8:	d552      	bpl.n	d77a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
   d76fa:	2d01      	cmp	r5, #1
   d76fc:	fa1f f289 	uxth.w	r2, r9
   d7700:	d13e      	bne.n	d7780 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d7702:	2c01      	cmp	r4, #1
   d7704:	d13c      	bne.n	d7780 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
   d7706:	699b      	ldr	r3, [r3, #24]
   d7708:	9906      	ldr	r1, [sp, #24]
   d770a:	461f      	mov	r7, r3
   d770c:	9b04      	ldr	r3, [sp, #16]
   d770e:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
   d7710:	b212      	sxth	r2, r2
   d7712:	4651      	mov	r1, sl
   d7714:	4658      	mov	r0, fp
   d7716:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d7718:	f109 0301 	add.w	r3, r9, #1
   d771c:	fa4f f983 	sxtb.w	r9, r3
   d7720:	9b07      	ldr	r3, [sp, #28]
   d7722:	085b      	lsrs	r3, r3, #1
   d7724:	9307      	str	r3, [sp, #28]
   d7726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7728:	3b01      	subs	r3, #1
   d772a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d772e:	930a      	str	r3, [sp, #40]	; 0x28
   d7730:	d1de      	bne.n	d76f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d7732:	9f05      	ldr	r7, [sp, #20]
   d7734:	3701      	adds	r7, #1
   d7736:	b27b      	sxtb	r3, r7
   d7738:	9305      	str	r3, [sp, #20]
   d773a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d773c:	3b01      	subs	r3, #1
   d773e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d7742:	9309      	str	r3, [sp, #36]	; 0x24
   d7744:	d1b9      	bne.n	d76ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
   d7746:	9b04      	ldr	r3, [sp, #16]
   d7748:	4543      	cmp	r3, r8
   d774a:	d00f      	beq.n	d776c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
   d774c:	2d01      	cmp	r5, #1
   d774e:	f8db 3000 	ldr.w	r3, [fp]
   d7752:	d13b      	bne.n	d77cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d7754:	2c01      	cmp	r4, #1
   d7756:	d139      	bne.n	d77cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
   d7758:	9908      	ldr	r1, [sp, #32]
   d775a:	f8cd 8000 	str.w	r8, [sp]
   d775e:	3105      	adds	r1, #5
   d7760:	6a1c      	ldr	r4, [r3, #32]
   d7762:	4632      	mov	r2, r6
   d7764:	2308      	movs	r3, #8
   d7766:	b209      	sxth	r1, r1
   d7768:	4658      	mov	r0, fp
   d776a:	47a0      	blx	r4
    endWrite();
   d776c:	f8db 3000 	ldr.w	r3, [fp]
   d7770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7772:	4658      	mov	r0, fp
}
   d7774:	b011      	add	sp, #68	; 0x44
   d7776:	ecbd 8b02 	vpop	{d8}
   d777a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d777e:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
   d7780:	9906      	ldr	r1, [sp, #24]
   d7782:	fb14 f202 	smulbb	r2, r4, r2
   d7786:	440a      	add	r2, r1
   d7788:	9904      	ldr	r1, [sp, #16]
   d778a:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d778c:	9400      	str	r4, [sp, #0]
   d778e:	69db      	ldr	r3, [r3, #28]
   d7790:	ee18 1a10 	vmov	r1, s16
   d7794:	461f      	mov	r7, r3
   d7796:	b212      	sxth	r2, r2
   d7798:	462b      	mov	r3, r5
   d779a:	4658      	mov	r0, fp
   d779c:	47b8      	blx	r7
   d779e:	e7bb      	b.n	d7718 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
   d77a0:	9a04      	ldr	r2, [sp, #16]
   d77a2:	4542      	cmp	r2, r8
   d77a4:	d0b8      	beq.n	d7718 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
   d77a6:	2d01      	cmp	r5, #1
   d77a8:	fa1f f289 	uxth.w	r2, r9
   d77ac:	d107      	bne.n	d77be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d77ae:	2c01      	cmp	r4, #1
   d77b0:	d105      	bne.n	d77be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
   d77b2:	699b      	ldr	r3, [r3, #24]
   d77b4:	9906      	ldr	r1, [sp, #24]
   d77b6:	461f      	mov	r7, r3
   d77b8:	440a      	add	r2, r1
   d77ba:	4643      	mov	r3, r8
   d77bc:	e7a8      	b.n	d7710 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d77be:	9906      	ldr	r1, [sp, #24]
   d77c0:	f8cd 8004 	str.w	r8, [sp, #4]
   d77c4:	fb14 f202 	smulbb	r2, r4, r2
   d77c8:	440a      	add	r2, r1
   d77ca:	e7df      	b.n	d778c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
   d77cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d77ce:	f8cd 8004 	str.w	r8, [sp, #4]
   d77d2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d77d6:	9a08      	ldr	r2, [sp, #32]
   d77d8:	00e4      	lsls	r4, r4, #3
   d77da:	440a      	add	r2, r1
   d77dc:	4611      	mov	r1, r2
   d77de:	9400      	str	r4, [sp, #0]
   d77e0:	69dc      	ldr	r4, [r3, #28]
   d77e2:	4632      	mov	r2, r6
   d77e4:	462b      	mov	r3, r5
   d77e6:	b209      	sxth	r1, r1
   d77e8:	4658      	mov	r0, fp
   d77ea:	47a0      	blx	r4
    endWrite();
   d77ec:	e7be      	b.n	d776c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d77ee:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
   d77f0:	6851      	ldr	r1, [r2, #4]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d77f2:	6812      	ldr	r2, [r2, #0]
   d77f4:	920d      	str	r2, [sp, #52]	; 0x34
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d77f6:	1aff      	subs	r7, r7, r3
  return gfxFont->glyph + c;
   d77f8:	b2ff      	uxtb	r7, r7
   d77fa:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d77fe:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d7802:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
   d7804:	789a      	ldrb	r2, [r3, #2]
   d7806:	9209      	str	r2, [sp, #36]	; 0x24
   d7808:	78da      	ldrb	r2, [r3, #3]
   d780a:	920b      	str	r2, [sp, #44]	; 0x2c
    if (size_x > 1 || size_y > 1) {
   d780c:	2d01      	cmp	r5, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d780e:	f993 2005 	ldrsb.w	r2, [r3, #5]
           yo = pgm_read_byte(&glyph->yOffset);
   d7812:	f993 a006 	ldrsb.w	sl, [r3, #6]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d7816:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
   d7818:	d801      	bhi.n	d781e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d781a:	2c01      	cmp	r4, #1
   d781c:	d957      	bls.n	d78ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
   d781e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d7822:	9308      	str	r3, [sp, #32]
      yo16 = yo;
   d7824:	fa0f f38a 	sxth.w	r3, sl
   d7828:	9307      	str	r3, [sp, #28]
    startWrite();
   d782a:	f8db 3000 	ldr.w	r3, [fp]
   d782e:	4658      	mov	r0, fp
   d7830:	695b      	ldr	r3, [r3, #20]
   d7832:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7834:	b2b3      	uxth	r3, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d7836:	f04f 0800 	mov.w	r8, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d783a:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
   d783c:	fa1a f386 	uxtah	r3, sl, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d7840:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
   d7842:	4647      	mov	r7, r8
            writePixel(x + xo + xx, y + yo + yy, color);
   d7844:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
   d7846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7848:	429f      	cmp	r7, r3
   d784a:	d28f      	bcs.n	d776c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d784c:	9b07      	ldr	r3, [sp, #28]
   d784e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d7850:	443b      	add	r3, r7
   d7852:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
   d7856:	2200      	movs	r2, #0
   d7858:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
   d785a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d785c:	b21b      	sxth	r3, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d785e:	eb02 0a07 	add.w	sl, r2, r7
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7862:	ee08 3a10 	vmov	s16, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d7866:	fa0f fa8a 	sxth.w	sl, sl
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d786a:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
   d786c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d786e:	9905      	ldr	r1, [sp, #20]
   d7870:	4291      	cmp	r1, r2
   d7872:	d241      	bcs.n	d78f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
   d7874:	1c5a      	adds	r2, r3, #1
   d7876:	b2d2      	uxtb	r2, r2
   d7878:	075b      	lsls	r3, r3, #29
   d787a:	920c      	str	r2, [sp, #48]	; 0x30
   d787c:	d107      	bne.n	d788e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
   d787e:	9b06      	ldr	r3, [sp, #24]
   d7880:	9906      	ldr	r1, [sp, #24]
   d7882:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d7884:	3301      	adds	r3, #1
   d7886:	b29b      	uxth	r3, r3
   d7888:	f812 9001 	ldrb.w	r9, [r2, r1]
   d788c:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
   d788e:	f019 0f80 	tst.w	r9, #128	; 0x80
   d7892:	d012      	beq.n	d78ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
   d7894:	2d01      	cmp	r5, #1
   d7896:	f8db 3000 	ldr.w	r3, [fp]
   d789a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d789e:	d11a      	bne.n	d78d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d78a0:	2c01      	cmp	r4, #1
   d78a2:	d118      	bne.n	d78d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
   d78a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d78a6:	699b      	ldr	r3, [r3, #24]
   d78a8:	4411      	add	r1, r2
   d78aa:	9a05      	ldr	r2, [sp, #20]
   d78ac:	4411      	add	r1, r2
   d78ae:	461e      	mov	r6, r3
   d78b0:	4652      	mov	r2, sl
   d78b2:	9b04      	ldr	r3, [sp, #16]
   d78b4:	b209      	sxth	r1, r1
   d78b6:	4658      	mov	r0, fp
   d78b8:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
   d78ba:	9e05      	ldr	r6, [sp, #20]
   d78bc:	3601      	adds	r6, #1
   d78be:	b2f3      	uxtb	r3, r6
        bits <<= 1;
   d78c0:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
   d78c4:	9305      	str	r3, [sp, #20]
        bits <<= 1;
   d78c6:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
   d78ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (xx = 0; xx < w; xx++) {
   d78cc:	e7ce      	b.n	d786c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
   d78ce:	2300      	movs	r3, #0
   d78d0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d78d4:	e7a9      	b.n	d782a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d78d6:	9805      	ldr	r0, [sp, #20]
   d78d8:	9a08      	ldr	r2, [sp, #32]
   d78da:	4402      	add	r2, r0
   d78dc:	fb02 1105 	mla	r1, r2, r5, r1
   d78e0:	9a04      	ldr	r2, [sp, #16]
   d78e2:	e9cd 4200 	strd	r4, r2, [sp]
   d78e6:	69db      	ldr	r3, [r3, #28]
   d78e8:	ee18 2a10 	vmov	r2, s16
   d78ec:	461e      	mov	r6, r3
   d78ee:	b209      	sxth	r1, r1
   d78f0:	462b      	mov	r3, r5
   d78f2:	4658      	mov	r0, fp
   d78f4:	47b0      	blx	r6
   d78f6:	e7e0      	b.n	d78ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d78f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
   d78fa:	3701      	adds	r7, #1
   d78fc:	4498      	add	r8, r3
   d78fe:	fa5f f888 	uxtb.w	r8, r8
   d7902:	b2ff      	uxtb	r7, r7
   d7904:	e79f      	b.n	d7846 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d7906:	b011      	add	sp, #68	; 0x44
   d7908:	ecbd 8b02 	vpop	{d8}
   d790c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7910:	000ddd78 	.word	0x000ddd78

000d7914 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d7914:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
   d7916:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d7918:	b085      	sub	sp, #20
   d791a:	4604      	mov	r4, r0
   d791c:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
   d791e:	2a00      	cmp	r2, #0
   d7920:	d134      	bne.n	d798c <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
   d7922:	290a      	cmp	r1, #10
   d7924:	d108      	bne.n	d7938 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
   d7926:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
   d7928:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
   d792a:	7e42      	ldrb	r2, [r0, #25]
   d792c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
   d7930:	8263      	strh	r3, [r4, #18]
}
   d7932:	2001      	movs	r0, #1
   d7934:	b005      	add	sp, #20
   d7936:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
   d7938:	290d      	cmp	r1, #13
   d793a:	d0fa      	beq.n	d7932 <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d793c:	7ee1      	ldrb	r1, [r4, #27]
   d793e:	7e00      	ldrb	r0, [r0, #24]
   d7940:	7e65      	ldrb	r5, [r4, #25]
   d7942:	b171      	cbz	r1, d7962 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d7944:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d7948:	2106      	movs	r1, #6
   d794a:	fb11 6100 	smlabb	r1, r1, r0, r6
   d794e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d7952:	42b1      	cmp	r1, r6
   d7954:	bfc1      	itttt	gt
   d7956:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
   d795a:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
   d795c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d7960:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d7962:	8ae2      	ldrh	r2, [r4, #22]
   d7964:	9201      	str	r2, [sp, #4]
   d7966:	8aa2      	ldrh	r2, [r4, #20]
   d7968:	9200      	str	r2, [sp, #0]
   d796a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d796e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d7972:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d7976:	4620      	mov	r0, r4
   d7978:	f7ff fe5e 	bl	d7638 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
   d797c:	7e23      	ldrb	r3, [r4, #24]
   d797e:	8a22      	ldrh	r2, [r4, #16]
   d7980:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d7984:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
   d7988:	8223      	strh	r3, [r4, #16]
   d798a:	e7d2      	b.n	d7932 <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
   d798c:	290a      	cmp	r1, #10
   d798e:	d107      	bne.n	d79a0 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
   d7990:	2300      	movs	r3, #0
   d7992:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d7994:	7b13      	ldrb	r3, [r2, #12]
   d7996:	7e41      	ldrb	r1, [r0, #25]
      cursor_y +=
   d7998:	8a42      	ldrh	r2, [r0, #18]
   d799a:	fb01 2303 	mla	r3, r1, r3, r2
   d799e:	e7c7      	b.n	d7930 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
   d79a0:	290d      	cmp	r1, #13
   d79a2:	d0c6      	beq.n	d7932 <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
   d79a4:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d79a6:	42a9      	cmp	r1, r5
   d79a8:	d3c3      	bcc.n	d7932 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d79aa:	7a91      	ldrb	r1, [r2, #10]
   d79ac:	4299      	cmp	r1, r3
   d79ae:	d3c0      	bcc.n	d7932 <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
   d79b0:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
   d79b2:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
   d79b4:	b2ed      	uxtb	r5, r5
   d79b6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
   d79ba:	78af      	ldrb	r7, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d79bc:	b32f      	cbz	r7, d7a0a <_ZN12Adafruit_GFX5writeEh+0xf6>
   d79be:	78e9      	ldrb	r1, [r5, #3]
   d79c0:	b319      	cbz	r1, d7a0a <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d79c2:	7ee1      	ldrb	r1, [r4, #27]
   d79c4:	7e00      	ldrb	r0, [r0, #24]
   d79c6:	7e66      	ldrb	r6, [r4, #25]
   d79c8:	b191      	cbz	r1, d79f0 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d79ca:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d79ce:	4439      	add	r1, r7
   d79d0:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d79d4:	fb00 7101 	mla	r1, r0, r1, r7
   d79d8:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d79dc:	42b9      	cmp	r1, r7
   d79de:	dd07      	ble.n	d79f0 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
   d79e0:	2700      	movs	r7, #0
   d79e2:	8227      	strh	r7, [r4, #16]
   d79e4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d79e8:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
   d79ea:	fb02 1206 	mla	r2, r2, r6, r1
   d79ee:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d79f0:	8ae2      	ldrh	r2, [r4, #22]
   d79f2:	9201      	str	r2, [sp, #4]
   d79f4:	8aa2      	ldrh	r2, [r4, #20]
   d79f6:	9200      	str	r2, [sp, #0]
   d79f8:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d79fc:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d7a00:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d7a04:	4620      	mov	r0, r4
   d7a06:	f7ff fe17 	bl	d7638 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d7a0a:	7929      	ldrb	r1, [r5, #4]
   d7a0c:	7e23      	ldrb	r3, [r4, #24]
        cursor_x +=
   d7a0e:	8a22      	ldrh	r2, [r4, #16]
   d7a10:	fb01 2303 	mla	r3, r1, r3, r2
   d7a14:	e7b8      	b.n	d7988 <_ZN12Adafruit_GFX5writeEh+0x74>

000d7a16 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
   d7a16:	2901      	cmp	r1, #1
   d7a18:	bf38      	it	cc
   d7a1a:	2101      	movcc	r1, #1
   d7a1c:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
   d7a1e:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
   d7a20:	4770      	bx	lr

000d7a22 <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   d7a22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a26:	4604      	mov	r4, r0
   d7a28:	b08b      	sub	sp, #44	; 0x2c
   d7a2a:	f000 fa43 	bl	d7eb4 <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d7a2e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   d7a32:	f9b4 503a 	ldrsh.w	r5, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d7a36:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d7a3a:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d7a3e:	1dda      	adds	r2, r3, #7
   d7a40:	bf48      	it	mi
   d7a42:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   d7a46:	2340      	movs	r3, #64	; 0x40
   d7a48:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   d7a4c:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   d7a50:	9303      	str	r3, [sp, #12]
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   d7a52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d7a54:	68db      	ldr	r3, [r3, #12]
   d7a56:	3b01      	subs	r3, #1
   d7a58:	b29b      	uxth	r3, r3
   d7a5a:	9304      	str	r3, [sp, #16]
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d7a5c:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
  uint8_t bytes_per_page = WIDTH;
   d7a60:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   d7a62:	2d00      	cmp	r5, #0
   d7a64:	bfb8      	it	lt
   d7a66:	3507      	addlt	r5, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d7a68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d7a6c:	45b9      	cmp	r9, r7
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7a6e:	f107 0201 	add.w	r2, r7, #1
  uint8_t first_page = window_y1 / 8;
   d7a72:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d7a76:	bf28      	it	cs
   d7a78:	46b9      	movcs	r9, r7
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7a7a:	fa52 f383 	uxtab	r3, r2, r3
   d7a7e:	fb05 9a07 	mla	sl, r5, r7, r9
   d7a82:	9306      	str	r3, [sp, #24]
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};

      digitalWrite(dcPin, LOW);
   d7a84:	f04f 0b00 	mov.w	fp, #0
  for (uint8_t p = first_page; p < pages; p++) {
   d7a88:	9b03      	ldr	r3, [sp, #12]
   d7a8a:	429d      	cmp	r5, r3
   d7a8c:	d26b      	bcs.n	d7b66 <_ZN15Adafruit_SH110X7displayEv+0x144>
    ptr += page_start;
   d7a8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7a90:	7a26      	ldrb	r6, [r4, #8]
   d7a92:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   d7a96:	eb03 080a 	add.w	r8, r3, sl
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7a9a:	9b06      	ldr	r3, [sp, #24]
   d7a9c:	444a      	add	r2, r9
   d7a9e:	1b9e      	subs	r6, r3, r6
    if (i2c_dev) { // I2C
   d7aa0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d7aa2:	1111      	asrs	r1, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7aa4:	eba6 0609 	sub.w	r6, r6, r9
   d7aa8:	f1a5 0050 	sub.w	r0, r5, #80	; 0x50
   d7aac:	b2f6      	uxtb	r6, r6
    if (i2c_dev) { // I2C
   d7aae:	b2c0      	uxtb	r0, r0
   d7ab0:	3110      	adds	r1, #16
   d7ab2:	f002 020f 	and.w	r2, r2, #15
   d7ab6:	2b00      	cmp	r3, #0
   d7ab8:	d035      	beq.n	d7b26 <_ZN15Adafruit_SH110X7displayEv+0x104>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d7aba:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   d7abe:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
      i2c_dev->setSpeed(i2c_preclk);
   d7ac2:	4618      	mov	r0, r3
   d7ac4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d7ac6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      uint8_t cmd[] = {
   d7aca:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   d7ace:	f7fe fe94 	bl	d67fa <_ZN18Adafruit_I2CDevice8setSpeedEm>
      i2c_dev->write(cmd, 4);
   d7ad2:	2301      	movs	r3, #1
   d7ad4:	e9cd bb00 	strd	fp, fp, [sp]
   d7ad8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d7ada:	2204      	movs	r2, #4
   d7adc:	a909      	add	r1, sp, #36	; 0x24
   d7ade:	f7fe fe07 	bl	d66f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d7ae2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d7ae6:	9305      	str	r3, [sp, #20]
      while (bytes_remaining) {
   d7ae8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d7aea:	b1ae      	cbz	r6, d7b18 <_ZN15Adafruit_SH110X7displayEv+0xf6>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d7aec:	9b05      	ldr	r3, [sp, #20]
   d7aee:	42b3      	cmp	r3, r6
   d7af0:	bf28      	it	cs
   d7af2:	4633      	movcs	r3, r6
   d7af4:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   d7af6:	2301      	movs	r3, #1
   d7af8:	9301      	str	r3, [sp, #4]
   d7afa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   d7afe:	9300      	str	r3, [sp, #0]
   d7b00:	4641      	mov	r1, r8
   d7b02:	2301      	movs	r3, #1
   d7b04:	9207      	str	r2, [sp, #28]
   d7b06:	f7fe fdf3 	bl	d66f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   d7b0a:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   d7b0c:	1ab6      	subs	r6, r6, r2
        ptr += to_write;
   d7b0e:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   d7b10:	b2f6      	uxtb	r6, r6
   d7b12:	f000 f9cf 	bl	d7eb4 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   d7b16:	e7e7      	b.n	d7ae8 <_ZN15Adafruit_SH110X7displayEv+0xc6>
      i2c_dev->setSpeed(i2c_postclk);
   d7b18:	6b21      	ldr	r1, [r4, #48]	; 0x30
   d7b1a:	f7fe fe6e 	bl	d67fa <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   d7b1e:	3501      	adds	r5, #1
   d7b20:	b2ed      	uxtb	r5, r5
   d7b22:	44ba      	add	sl, r7
   d7b24:	e7b0      	b.n	d7a88 <_ZN15Adafruit_SH110X7displayEv+0x66>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d7b26:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   d7b2a:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
      digitalWrite(dcPin, LOW);
   d7b2e:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d7b32:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   d7b36:	4619      	mov	r1, r3
   d7b38:	9305      	str	r3, [sp, #20]
   d7b3a:	f001 ff52 	bl	d99e2 <digitalWrite>
      spi_dev->write(cmd, 3);
   d7b3e:	9b05      	ldr	r3, [sp, #20]
   d7b40:	9300      	str	r3, [sp, #0]
   d7b42:	2203      	movs	r2, #3
   d7b44:	a909      	add	r1, sp, #36	; 0x24
   d7b46:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7b48:	f7fe fd75 	bl	d6636 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   d7b4c:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d7b50:	2101      	movs	r1, #1
   d7b52:	f001 ff46 	bl	d99e2 <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   d7b56:	9b05      	ldr	r3, [sp, #20]
   d7b58:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7b5a:	9300      	str	r3, [sp, #0]
   d7b5c:	4632      	mov	r2, r6
   d7b5e:	4641      	mov	r1, r8
   d7b60:	f7fe fd69 	bl	d6636 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d7b64:	e7db      	b.n	d7b1e <_ZN15Adafruit_SH110X7displayEv+0xfc>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   d7b66:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   d7b6a:	f04f 33ff 	mov.w	r3, #4294967295
   d7b6e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   d7b72:	b00b      	add	sp, #44	; 0x2c
   d7b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7b78 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   d7b78:	b530      	push	{r4, r5, lr}
   d7b7a:	b085      	sub	sp, #20
   d7b7c:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d7b7e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7b80:	9503      	str	r5, [sp, #12]
   d7b82:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d7b84:	9502      	str	r5, [sp, #8]
   d7b86:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d7b8a:	e9cd 3500 	strd	r3, r5, [sp]
   d7b8e:	4613      	mov	r3, r2
   d7b90:	460a      	mov	r2, r1
   d7b92:	2101      	movs	r1, #1
   d7b94:	f7ff fa48 	bl	d7028 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   d7b98:	4b03      	ldr	r3, [pc, #12]	; (d7ba8 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   d7b9a:	6023      	str	r3, [r4, #0]
   d7b9c:	4620      	mov	r0, r4
   d7b9e:	2300      	movs	r3, #0
   d7ba0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d7ba4:	b005      	add	sp, #20
   d7ba6:	bd30      	pop	{r4, r5, pc}
   d7ba8:	000de2d8 	.word	0x000de2d8

000d7bac <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   d7bac:	b510      	push	{r4, lr}
   d7bae:	4b03      	ldr	r3, [pc, #12]	; (d7bbc <_ZN15Adafruit_SH110XD1Ev+0x10>)
   d7bb0:	6003      	str	r3, [r0, #0]
   d7bb2:	4604      	mov	r4, r0
   d7bb4:	f7ff fa5a 	bl	d706c <_ZN17Adafruit_GrayOLEDD1Ev>
   d7bb8:	4620      	mov	r0, r4
   d7bba:	bd10      	pop	{r4, pc}
   d7bbc:	000de2d8 	.word	0x000de2d8

000d7bc0 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   d7bc0:	b510      	push	{r4, lr}
   d7bc2:	4b03      	ldr	r3, [pc, #12]	; (d7bd0 <_ZN15Adafruit_SH1107D1Ev+0x10>)
   d7bc4:	6003      	str	r3, [r0, #0]
   d7bc6:	4604      	mov	r4, r0
   d7bc8:	f7ff fff0 	bl	d7bac <_ZN15Adafruit_SH110XD1Ev>
   d7bcc:	4620      	mov	r0, r4
   d7bce:	bd10      	pop	{r4, pc}
   d7bd0:	000de514 	.word	0x000de514

000d7bd4 <_ZN15Adafruit_SH1107D0Ev>:
   d7bd4:	b510      	push	{r4, lr}
   d7bd6:	4604      	mov	r4, r0
   d7bd8:	f7ff fff2 	bl	d7bc0 <_ZN15Adafruit_SH1107D1Ev>
   d7bdc:	4620      	mov	r0, r4
   d7bde:	2158      	movs	r1, #88	; 0x58
   d7be0:	f001 ff96 	bl	d9b10 <_ZdlPvj>
   d7be4:	4620      	mov	r0, r4
   d7be6:	bd10      	pop	{r4, pc}

000d7be8 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   d7be8:	b530      	push	{r4, r5, lr}
   d7bea:	b085      	sub	sp, #20
   d7bec:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d7bee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7bf0:	9502      	str	r5, [sp, #8]
   d7bf2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d7bf4:	9501      	str	r5, [sp, #4]
   d7bf6:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d7bfa:	9500      	str	r5, [sp, #0]
   d7bfc:	f7ff ffbc 	bl	d7b78 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   d7c00:	4b02      	ldr	r3, [pc, #8]	; (d7c0c <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   d7c02:	6023      	str	r3, [r4, #0]
   d7c04:	4620      	mov	r0, r4
   d7c06:	b005      	add	sp, #20
   d7c08:	bd30      	pop	{r4, r5, pc}
   d7c0a:	bf00      	nop
   d7c0c:	000de514 	.word	0x000de514

000d7c10 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   d7c10:	b530      	push	{r4, r5, lr}
   d7c12:	4604      	mov	r4, r0
   d7c14:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   d7c16:	f7ff faad 	bl	d7174 <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   d7c1a:	212f      	movs	r1, #47	; 0x2f
   d7c1c:	4620      	mov	r0, r4
   d7c1e:	f7ff fb12 	bl	d7246 <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   d7c22:	68a2      	ldr	r2, [r4, #8]
   d7c24:	4b2f      	ldr	r3, [pc, #188]	; (d7ce4 <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   d7c26:	429a      	cmp	r2, r3
   d7c28:	d121      	bne.n	d7c6e <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   d7c2a:	6823      	ldr	r3, [r4, #0]
   d7c2c:	2101      	movs	r1, #1
   d7c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7c30:	4620      	mov	r0, r4
   d7c32:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d7c34:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d7c38:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d7c3c:	2320      	movs	r3, #32
   d7c3e:	3a20      	subs	r2, #32
   d7c40:	3973      	subs	r1, #115	; 0x73
   d7c42:	2501      	movs	r5, #1
   d7c44:	e9cd 3501 	strd	r3, r5, [sp, #4]
   d7c48:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d7c4c:	2373      	movs	r3, #115	; 0x73
   d7c4e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d7c52:	9300      	str	r3, [sp, #0]
   d7c54:	f341 014f 	sbfx	r1, r1, #1, #16
   d7c58:	4b23      	ldr	r3, [pc, #140]	; (d7ce8 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d7c5a:	4620      	mov	r0, r4
   d7c5c:	f342 024f 	sbfx	r2, r2, #1, #16
   d7c60:	f7ff fc96 	bl	d7590 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   d7c64:	6823      	ldr	r3, [r4, #0]
   d7c66:	2100      	movs	r1, #0
   d7c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7c6a:	4620      	mov	r0, r4
   d7c6c:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   d7c6e:	68a3      	ldr	r3, [r4, #8]
   d7c70:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d7c74:	d117      	bne.n	d7ca6 <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d7c76:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d7c7a:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d7c7e:	2320      	movs	r3, #32
   d7c80:	2001      	movs	r0, #1
   d7c82:	3a20      	subs	r2, #32
   d7c84:	3973      	subs	r1, #115	; 0x73
   d7c86:	e9cd 3001 	strd	r3, r0, [sp, #4]
   d7c8a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d7c8e:	2373      	movs	r3, #115	; 0x73
   d7c90:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d7c94:	9300      	str	r3, [sp, #0]
   d7c96:	f342 024f 	sbfx	r2, r2, #1, #16
   d7c9a:	4b13      	ldr	r3, [pc, #76]	; (d7ce8 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d7c9c:	f341 014f 	sbfx	r1, r1, #1, #16
   d7ca0:	4620      	mov	r0, r4
   d7ca2:	f7ff fc75 	bl	d7590 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   d7ca6:	4911      	ldr	r1, [pc, #68]	; (d7cec <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   d7ca8:	2216      	movs	r2, #22
   d7caa:	4620      	mov	r0, r4
   d7cac:	f7ff fa25 	bl	d70fa <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d7cb0:	4605      	mov	r5, r0
   d7cb2:	b918      	cbnz	r0, d7cbc <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   d7cb4:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   d7cb6:	4628      	mov	r0, r5
   d7cb8:	b005      	add	sp, #20
   d7cba:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   d7cbc:	68a3      	ldr	r3, [r4, #8]
   d7cbe:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d7cc2:	d007      	beq.n	d7cd4 <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   d7cc4:	2064      	movs	r0, #100	; 0x64
   d7cc6:	f000 ffb1 	bl	d8c2c <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   d7cca:	21af      	movs	r1, #175	; 0xaf
   d7ccc:	4620      	mov	r0, r4
   d7cce:	f7ff f9e9 	bl	d70a4 <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   d7cd2:	e7f0      	b.n	d7cb6 <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   d7cd4:	4906      	ldr	r1, [pc, #24]	; (d7cf0 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   d7cd6:	2204      	movs	r2, #4
   d7cd8:	4620      	mov	r0, r4
   d7cda:	f7ff fa0e 	bl	d70fa <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d7cde:	2800      	cmp	r0, #0
   d7ce0:	d1f0      	bne.n	d7cc4 <_ZN15Adafruit_SH11075beginEhb+0xb4>
   d7ce2:	e7e7      	b.n	d7cb4 <_ZN15Adafruit_SH11075beginEhb+0xa4>
   d7ce4:	00800040 	.word	0x00800040
   d7ce8:	000de32c 	.word	0x000de32c
   d7cec:	000de56c 	.word	0x000de56c
   d7cf0:	000de568 	.word	0x000de568

000d7cf4 <_ZN19Adafruit_EEPROM_I2CC1Ev>:
/**************************************************************************/
/*!
    Constructor
*/
/**************************************************************************/
Adafruit_EEPROM_I2C::Adafruit_EEPROM_I2C(void) {}
   d7cf4:	2200      	movs	r2, #0
   d7cf6:	6002      	str	r2, [r0, #0]
   d7cf8:	7102      	strb	r2, [r0, #4]
   d7cfa:	4770      	bx	lr

000d7cfc <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>:
 *            The I2C address to be used.
 *    @param  theWire
 *            The Wire object to be used for I2C connections.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d7cfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7cfe:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7d00:	2010      	movs	r0, #16
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d7d02:	460e      	mov	r6, r1
   d7d04:	9201      	str	r2, [sp, #4]
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7d06:	f7fc f9c6 	bl	d4096 <_Znwj>
   d7d0a:	4604      	mov	r4, r0
   d7d0c:	b118      	cbz	r0, d7d16 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire+0x1a>
   d7d0e:	9a01      	ldr	r2, [sp, #4]
   d7d10:	4631      	mov	r1, r6
   d7d12:	f7fe fcc2 	bl	d669a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  _addr = addr;

  return i2c_dev->begin();
   d7d16:	2101      	movs	r1, #1
   d7d18:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7d1a:	602c      	str	r4, [r5, #0]
  _addr = addr;
   d7d1c:	712e      	strb	r6, [r5, #4]
}
   d7d1e:	b002      	add	sp, #8
   d7d20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return i2c_dev->begin();
   d7d24:	f7fe bcd5 	b.w	d66d2 <_ZN18Adafruit_I2CDevice5beginEb>

000d7d28 <_ZN19Adafruit_EEPROM_I2C5writeEth>:
    @param[in] value
                The 8-bit value to write at addr
    @returns True on I2C command success, false on timeout or I2C failure
*/
/**************************************************************************/
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7d28:	b530      	push	{r4, r5, lr}
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};

  if (!i2c_dev->write(buff, 3))
   d7d2a:	2300      	movs	r3, #0
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7d2c:	b085      	sub	sp, #20
  if (!i2c_dev->write(buff, 3))
   d7d2e:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   d7d32:	ba49      	rev16	r1, r1
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7d34:	4605      	mov	r5, r0
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   d7d36:	f8ad 100c 	strh.w	r1, [sp, #12]
   d7d3a:	f88d 200e 	strb.w	r2, [sp, #14]
  if (!i2c_dev->write(buff, 3))
   d7d3e:	6800      	ldr	r0, [r0, #0]
   d7d40:	2301      	movs	r3, #1
   d7d42:	2203      	movs	r2, #3
   d7d44:	a903      	add	r1, sp, #12
   d7d46:	f7fe fcd3 	bl	d66f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d7d4a:	b160      	cbz	r0, d7d66 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x3e>
   d7d4c:	2465      	movs	r4, #101	; 0x65
    return false;

  // Wait until it acks!
  uint8_t timeout = 100;
  while (timeout--) {
   d7d4e:	3c01      	subs	r4, #1
   d7d50:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d7d54:	d007      	beq.n	d7d66 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x3e>
    if (i2c_dev->detected())
   d7d56:	6828      	ldr	r0, [r5, #0]
   d7d58:	f7fe fca6 	bl	d66a8 <_ZN18Adafruit_I2CDevice8detectedEv>
   d7d5c:	b920      	cbnz	r0, d7d68 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x40>
      return true;
    delay(1);
   d7d5e:	2001      	movs	r0, #1
   d7d60:	f000 ff64 	bl	d8c2c <delay>
  while (timeout--) {
   d7d64:	e7f3      	b.n	d7d4e <_ZN19Adafruit_EEPROM_I2C5writeEth+0x26>
    return false;
   d7d66:	2000      	movs	r0, #0
  }

  // timed out :(
  return false;
}
   d7d68:	b005      	add	sp, #20
   d7d6a:	bd30      	pop	{r4, r5, pc}

000d7d6c <_ZN19Adafruit_EEPROM_I2C4readEt>:
    @param addr
                The 16-bit address to read from in EEPROM memory
    @returns    The 8-bit value retrieved at addr
*/
/**************************************************************************/
uint8_t Adafruit_EEPROM_I2C::read(uint16_t addr) {
   d7d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};

  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7d6e:	2301      	movs	r3, #1
   d7d70:	2200      	movs	r2, #0
   d7d72:	e9cd 3200 	strd	r3, r2, [sp]
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   d7d76:	ba49      	rev16	r1, r1
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7d78:	ab03      	add	r3, sp, #12
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   d7d7a:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7d7e:	6800      	ldr	r0, [r0, #0]
   d7d80:	2202      	movs	r2, #2
   d7d82:	4619      	mov	r1, r3
   d7d84:	f7fe fd22 	bl	d67cc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
   d7d88:	b108      	cbz	r0, d7d8e <_ZN19Adafruit_EEPROM_I2C4readEt+0x22>
    return 0x0;

  return buff[0];
   d7d8a:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d7d8e:	b005      	add	sp, #20
   d7d90:	f85d fb04 	ldr.w	pc, [sp], #4

000d7d94 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7d94:	b508      	push	{r3, lr}
   d7d96:	4b02      	ldr	r3, [pc, #8]	; (d7da0 <netdb_freeaddrinfo+0xc>)
   d7d98:	681b      	ldr	r3, [r3, #0]
   d7d9a:	689b      	ldr	r3, [r3, #8]
   d7d9c:	9301      	str	r3, [sp, #4]
   d7d9e:	bd08      	pop	{r3, pc}
   d7da0:	00030268 	.word	0x00030268

000d7da4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7da4:	b508      	push	{r3, lr}
   d7da6:	4b02      	ldr	r3, [pc, #8]	; (d7db0 <netdb_getaddrinfo+0xc>)
   d7da8:	681b      	ldr	r3, [r3, #0]
   d7daa:	68db      	ldr	r3, [r3, #12]
   d7dac:	9301      	str	r3, [sp, #4]
   d7dae:	bd08      	pop	{r3, pc}
   d7db0:	00030268 	.word	0x00030268

000d7db4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7db4:	b508      	push	{r3, lr}
   d7db6:	4b02      	ldr	r3, [pc, #8]	; (d7dc0 <HAL_Validate_Pin_Function+0xc>)
   d7db8:	681b      	ldr	r3, [r3, #0]
   d7dba:	685b      	ldr	r3, [r3, #4]
   d7dbc:	9301      	str	r3, [sp, #4]
   d7dbe:	bd08      	pop	{r3, pc}
   d7dc0:	0003022c 	.word	0x0003022c

000d7dc4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7dc4:	b508      	push	{r3, lr}
   d7dc6:	4b02      	ldr	r3, [pc, #8]	; (d7dd0 <HAL_Pin_Mode+0xc>)
   d7dc8:	681b      	ldr	r3, [r3, #0]
   d7dca:	689b      	ldr	r3, [r3, #8]
   d7dcc:	9301      	str	r3, [sp, #4]
   d7dce:	bd08      	pop	{r3, pc}
   d7dd0:	0003022c 	.word	0x0003022c

000d7dd4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7dd4:	b508      	push	{r3, lr}
   d7dd6:	4b02      	ldr	r3, [pc, #8]	; (d7de0 <HAL_Get_Pin_Mode+0xc>)
   d7dd8:	681b      	ldr	r3, [r3, #0]
   d7dda:	68db      	ldr	r3, [r3, #12]
   d7ddc:	9301      	str	r3, [sp, #4]
   d7dde:	bd08      	pop	{r3, pc}
   d7de0:	0003022c 	.word	0x0003022c

000d7de4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7de4:	b508      	push	{r3, lr}
   d7de6:	4b02      	ldr	r3, [pc, #8]	; (d7df0 <HAL_GPIO_Write+0xc>)
   d7de8:	681b      	ldr	r3, [r3, #0]
   d7dea:	691b      	ldr	r3, [r3, #16]
   d7dec:	9301      	str	r3, [sp, #4]
   d7dee:	bd08      	pop	{r3, pc}
   d7df0:	0003022c 	.word	0x0003022c

000d7df4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7df4:	b508      	push	{r3, lr}
   d7df6:	4b02      	ldr	r3, [pc, #8]	; (d7e00 <HAL_GPIO_Read+0xc>)
   d7df8:	681b      	ldr	r3, [r3, #0]
   d7dfa:	695b      	ldr	r3, [r3, #20]
   d7dfc:	9301      	str	r3, [sp, #4]
   d7dfe:	bd08      	pop	{r3, pc}
   d7e00:	0003022c 	.word	0x0003022c

000d7e04 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7e04:	b508      	push	{r3, lr}
   d7e06:	4b02      	ldr	r3, [pc, #8]	; (d7e10 <HAL_Interrupts_Attach+0xc>)
   d7e08:	681b      	ldr	r3, [r3, #0]
   d7e0a:	699b      	ldr	r3, [r3, #24]
   d7e0c:	9301      	str	r3, [sp, #4]
   d7e0e:	bd08      	pop	{r3, pc}
   d7e10:	0003022c 	.word	0x0003022c

000d7e14 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7e14:	b508      	push	{r3, lr}
   d7e16:	4b02      	ldr	r3, [pc, #8]	; (d7e20 <HAL_Interrupts_Detach+0xc>)
   d7e18:	681b      	ldr	r3, [r3, #0]
   d7e1a:	69db      	ldr	r3, [r3, #28]
   d7e1c:	9301      	str	r3, [sp, #4]
   d7e1e:	bd08      	pop	{r3, pc}
   d7e20:	0003022c 	.word	0x0003022c

000d7e24 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7e24:	b508      	push	{r3, lr}
   d7e26:	4b02      	ldr	r3, [pc, #8]	; (d7e30 <hal_adc_read+0xc>)
   d7e28:	681b      	ldr	r3, [r3, #0]
   d7e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e2c:	9301      	str	r3, [sp, #4]
   d7e2e:	bd08      	pop	{r3, pc}
   d7e30:	0003022c 	.word	0x0003022c

000d7e34 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7e34:	b508      	push	{r3, lr}
   d7e36:	4b02      	ldr	r3, [pc, #8]	; (d7e40 <HAL_RNG_GetRandomNumber+0xc>)
   d7e38:	681b      	ldr	r3, [r3, #0]
   d7e3a:	685b      	ldr	r3, [r3, #4]
   d7e3c:	9301      	str	r3, [sp, #4]
   d7e3e:	bd08      	pop	{r3, pc}
   d7e40:	00030218 	.word	0x00030218

000d7e44 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7e44:	b508      	push	{r3, lr}
   d7e46:	4b02      	ldr	r3, [pc, #8]	; (d7e50 <HAL_Delay_Microseconds+0xc>)
   d7e48:	681b      	ldr	r3, [r3, #0]
   d7e4a:	68db      	ldr	r3, [r3, #12]
   d7e4c:	9301      	str	r3, [sp, #4]
   d7e4e:	bd08      	pop	{r3, pc}
   d7e50:	00030218 	.word	0x00030218

000d7e54 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7e54:	b508      	push	{r3, lr}
   d7e56:	4b02      	ldr	r3, [pc, #8]	; (d7e60 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7e58:	681b      	ldr	r3, [r3, #0]
   d7e5a:	695b      	ldr	r3, [r3, #20]
   d7e5c:	9301      	str	r3, [sp, #4]
   d7e5e:	bd08      	pop	{r3, pc}
   d7e60:	00030218 	.word	0x00030218

000d7e64 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d7e64:	b508      	push	{r3, lr}
   d7e66:	4b02      	ldr	r3, [pc, #8]	; (d7e70 <HAL_EEPROM_Init+0xc>)
   d7e68:	681b      	ldr	r3, [r3, #0]
   d7e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7e6c:	9301      	str	r3, [sp, #4]
   d7e6e:	bd08      	pop	{r3, pc}
   d7e70:	00030218 	.word	0x00030218

000d7e74 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d7e74:	b508      	push	{r3, lr}
   d7e76:	4b02      	ldr	r3, [pc, #8]	; (d7e80 <HAL_EEPROM_Get+0xc>)
   d7e78:	681b      	ldr	r3, [r3, #0]
   d7e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7e7c:	9301      	str	r3, [sp, #4]
   d7e7e:	bd08      	pop	{r3, pc}
   d7e80:	00030218 	.word	0x00030218

000d7e84 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d7e84:	b508      	push	{r3, lr}
   d7e86:	4b02      	ldr	r3, [pc, #8]	; (d7e90 <HAL_EEPROM_Put+0xc>)
   d7e88:	681b      	ldr	r3, [r3, #0]
   d7e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7e8c:	9301      	str	r3, [sp, #4]
   d7e8e:	bd08      	pop	{r3, pc}
   d7e90:	00030218 	.word	0x00030218

000d7e94 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7e94:	b508      	push	{r3, lr}
   d7e96:	4b02      	ldr	r3, [pc, #8]	; (d7ea0 <hal_rtc_time_is_valid+0xc>)
   d7e98:	681b      	ldr	r3, [r3, #0]
   d7e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7e9c:	9301      	str	r3, [sp, #4]
   d7e9e:	bd08      	pop	{r3, pc}
   d7ea0:	00030218 	.word	0x00030218

000d7ea4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7ea4:	b508      	push	{r3, lr}
   d7ea6:	4b02      	ldr	r3, [pc, #8]	; (d7eb0 <hal_rtc_get_time+0xc>)
   d7ea8:	681b      	ldr	r3, [r3, #0]
   d7eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7eac:	9301      	str	r3, [sp, #4]
   d7eae:	bd08      	pop	{r3, pc}
   d7eb0:	00030218 	.word	0x00030218

000d7eb4 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7eb4:	b508      	push	{r3, lr}
   d7eb6:	4b02      	ldr	r3, [pc, #8]	; (d7ec0 <os_thread_yield+0xc>)
   d7eb8:	681b      	ldr	r3, [r3, #0]
   d7eba:	68db      	ldr	r3, [r3, #12]
   d7ebc:	9301      	str	r3, [sp, #4]
   d7ebe:	bd08      	pop	{r3, pc}
   d7ec0:	00030248 	.word	0x00030248

000d7ec4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7ec4:	b508      	push	{r3, lr}
   d7ec6:	4b02      	ldr	r3, [pc, #8]	; (d7ed0 <os_mutex_recursive_create+0xc>)
   d7ec8:	681b      	ldr	r3, [r3, #0]
   d7eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7ecc:	9301      	str	r3, [sp, #4]
   d7ece:	bd08      	pop	{r3, pc}
   d7ed0:	00030248 	.word	0x00030248

000d7ed4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7ed4:	b508      	push	{r3, lr}
   d7ed6:	4b02      	ldr	r3, [pc, #8]	; (d7ee0 <inet_inet_ntop+0xc>)
   d7ed8:	681b      	ldr	r3, [r3, #0]
   d7eda:	695b      	ldr	r3, [r3, #20]
   d7edc:	9301      	str	r3, [sp, #4]
   d7ede:	bd08      	pop	{r3, pc}
   d7ee0:	00030264 	.word	0x00030264

000d7ee4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7ee4:	b508      	push	{r3, lr}
   d7ee6:	4b02      	ldr	r3, [pc, #8]	; (d7ef0 <hal_usart_init+0xc>)
   d7ee8:	681b      	ldr	r3, [r3, #0]
   d7eea:	681b      	ldr	r3, [r3, #0]
   d7eec:	9301      	str	r3, [sp, #4]
   d7eee:	bd08      	pop	{r3, pc}
   d7ef0:	0003023c 	.word	0x0003023c

000d7ef4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7ef4:	b508      	push	{r3, lr}
   d7ef6:	4b02      	ldr	r3, [pc, #8]	; (d7f00 <hal_usart_write+0xc>)
   d7ef8:	681b      	ldr	r3, [r3, #0]
   d7efa:	68db      	ldr	r3, [r3, #12]
   d7efc:	9301      	str	r3, [sp, #4]
   d7efe:	bd08      	pop	{r3, pc}
   d7f00:	0003023c 	.word	0x0003023c

000d7f04 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7f04:	b508      	push	{r3, lr}
   d7f06:	4b02      	ldr	r3, [pc, #8]	; (d7f10 <hal_usart_available+0xc>)
   d7f08:	681b      	ldr	r3, [r3, #0]
   d7f0a:	691b      	ldr	r3, [r3, #16]
   d7f0c:	9301      	str	r3, [sp, #4]
   d7f0e:	bd08      	pop	{r3, pc}
   d7f10:	0003023c 	.word	0x0003023c

000d7f14 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7f14:	b508      	push	{r3, lr}
   d7f16:	4b02      	ldr	r3, [pc, #8]	; (d7f20 <hal_usart_read+0xc>)
   d7f18:	681b      	ldr	r3, [r3, #0]
   d7f1a:	695b      	ldr	r3, [r3, #20]
   d7f1c:	9301      	str	r3, [sp, #4]
   d7f1e:	bd08      	pop	{r3, pc}
   d7f20:	0003023c 	.word	0x0003023c

000d7f24 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7f24:	b508      	push	{r3, lr}
   d7f26:	4b02      	ldr	r3, [pc, #8]	; (d7f30 <hal_usart_peek+0xc>)
   d7f28:	681b      	ldr	r3, [r3, #0]
   d7f2a:	699b      	ldr	r3, [r3, #24]
   d7f2c:	9301      	str	r3, [sp, #4]
   d7f2e:	bd08      	pop	{r3, pc}
   d7f30:	0003023c 	.word	0x0003023c

000d7f34 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7f34:	b508      	push	{r3, lr}
   d7f36:	4b02      	ldr	r3, [pc, #8]	; (d7f40 <hal_usart_flush+0xc>)
   d7f38:	681b      	ldr	r3, [r3, #0]
   d7f3a:	69db      	ldr	r3, [r3, #28]
   d7f3c:	9301      	str	r3, [sp, #4]
   d7f3e:	bd08      	pop	{r3, pc}
   d7f40:	0003023c 	.word	0x0003023c

000d7f44 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7f44:	b508      	push	{r3, lr}
   d7f46:	4b02      	ldr	r3, [pc, #8]	; (d7f50 <hal_usart_is_enabled+0xc>)
   d7f48:	681b      	ldr	r3, [r3, #0]
   d7f4a:	6a1b      	ldr	r3, [r3, #32]
   d7f4c:	9301      	str	r3, [sp, #4]
   d7f4e:	bd08      	pop	{r3, pc}
   d7f50:	0003023c 	.word	0x0003023c

000d7f54 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7f54:	b508      	push	{r3, lr}
   d7f56:	4b02      	ldr	r3, [pc, #8]	; (d7f60 <hal_usart_available_data_for_write+0xc>)
   d7f58:	681b      	ldr	r3, [r3, #0]
   d7f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7f5c:	9301      	str	r3, [sp, #4]
   d7f5e:	bd08      	pop	{r3, pc}
   d7f60:	0003023c 	.word	0x0003023c

000d7f64 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d7f64:	b508      	push	{r3, lr}
   d7f66:	4b02      	ldr	r3, [pc, #8]	; (d7f70 <hal_i2c_set_speed+0xc>)
   d7f68:	681b      	ldr	r3, [r3, #0]
   d7f6a:	681b      	ldr	r3, [r3, #0]
   d7f6c:	9301      	str	r3, [sp, #4]
   d7f6e:	bd08      	pop	{r3, pc}
   d7f70:	00030228 	.word	0x00030228

000d7f74 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7f74:	b508      	push	{r3, lr}
   d7f76:	4b02      	ldr	r3, [pc, #8]	; (d7f80 <hal_i2c_begin+0xc>)
   d7f78:	681b      	ldr	r3, [r3, #0]
   d7f7a:	68db      	ldr	r3, [r3, #12]
   d7f7c:	9301      	str	r3, [sp, #4]
   d7f7e:	bd08      	pop	{r3, pc}
   d7f80:	00030228 	.word	0x00030228

000d7f84 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7f84:	b508      	push	{r3, lr}
   d7f86:	4b02      	ldr	r3, [pc, #8]	; (d7f90 <hal_i2c_begin_transmission+0xc>)
   d7f88:	681b      	ldr	r3, [r3, #0]
   d7f8a:	699b      	ldr	r3, [r3, #24]
   d7f8c:	9301      	str	r3, [sp, #4]
   d7f8e:	bd08      	pop	{r3, pc}
   d7f90:	00030228 	.word	0x00030228

000d7f94 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7f94:	b508      	push	{r3, lr}
   d7f96:	4b02      	ldr	r3, [pc, #8]	; (d7fa0 <hal_i2c_end_transmission+0xc>)
   d7f98:	681b      	ldr	r3, [r3, #0]
   d7f9a:	69db      	ldr	r3, [r3, #28]
   d7f9c:	9301      	str	r3, [sp, #4]
   d7f9e:	bd08      	pop	{r3, pc}
   d7fa0:	00030228 	.word	0x00030228

000d7fa4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7fa4:	b508      	push	{r3, lr}
   d7fa6:	4b02      	ldr	r3, [pc, #8]	; (d7fb0 <hal_i2c_write+0xc>)
   d7fa8:	681b      	ldr	r3, [r3, #0]
   d7faa:	6a1b      	ldr	r3, [r3, #32]
   d7fac:	9301      	str	r3, [sp, #4]
   d7fae:	bd08      	pop	{r3, pc}
   d7fb0:	00030228 	.word	0x00030228

000d7fb4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7fb4:	b508      	push	{r3, lr}
   d7fb6:	4b02      	ldr	r3, [pc, #8]	; (d7fc0 <hal_i2c_available+0xc>)
   d7fb8:	681b      	ldr	r3, [r3, #0]
   d7fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7fbc:	9301      	str	r3, [sp, #4]
   d7fbe:	bd08      	pop	{r3, pc}
   d7fc0:	00030228 	.word	0x00030228

000d7fc4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7fc4:	b508      	push	{r3, lr}
   d7fc6:	4b02      	ldr	r3, [pc, #8]	; (d7fd0 <hal_i2c_read+0xc>)
   d7fc8:	681b      	ldr	r3, [r3, #0]
   d7fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7fcc:	9301      	str	r3, [sp, #4]
   d7fce:	bd08      	pop	{r3, pc}
   d7fd0:	00030228 	.word	0x00030228

000d7fd4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7fd4:	b508      	push	{r3, lr}
   d7fd6:	4b02      	ldr	r3, [pc, #8]	; (d7fe0 <hal_i2c_peek+0xc>)
   d7fd8:	681b      	ldr	r3, [r3, #0]
   d7fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7fdc:	9301      	str	r3, [sp, #4]
   d7fde:	bd08      	pop	{r3, pc}
   d7fe0:	00030228 	.word	0x00030228

000d7fe4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7fe4:	b508      	push	{r3, lr}
   d7fe6:	4b02      	ldr	r3, [pc, #8]	; (d7ff0 <hal_i2c_flush+0xc>)
   d7fe8:	681b      	ldr	r3, [r3, #0]
   d7fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7fec:	9301      	str	r3, [sp, #4]
   d7fee:	bd08      	pop	{r3, pc}
   d7ff0:	00030228 	.word	0x00030228

000d7ff4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7ff4:	b508      	push	{r3, lr}
   d7ff6:	4b02      	ldr	r3, [pc, #8]	; (d8000 <hal_i2c_is_enabled+0xc>)
   d7ff8:	681b      	ldr	r3, [r3, #0]
   d7ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7ffc:	9301      	str	r3, [sp, #4]
   d7ffe:	bd08      	pop	{r3, pc}
   d8000:	00030228 	.word	0x00030228

000d8004 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d8004:	b508      	push	{r3, lr}
   d8006:	4b02      	ldr	r3, [pc, #8]	; (d8010 <hal_i2c_init+0xc>)
   d8008:	681b      	ldr	r3, [r3, #0]
   d800a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d800c:	9301      	str	r3, [sp, #4]
   d800e:	bd08      	pop	{r3, pc}
   d8010:	00030228 	.word	0x00030228

000d8014 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d8014:	b508      	push	{r3, lr}
   d8016:	4b02      	ldr	r3, [pc, #8]	; (d8020 <hal_i2c_request_ex+0xc>)
   d8018:	681b      	ldr	r3, [r3, #0]
   d801a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d801c:	9301      	str	r3, [sp, #4]
   d801e:	bd08      	pop	{r3, pc}
   d8020:	00030228 	.word	0x00030228

000d8024 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d8024:	b508      	push	{r3, lr}
   d8026:	4b02      	ldr	r3, [pc, #8]	; (d8030 <hal_spi_begin+0xc>)
   d8028:	681b      	ldr	r3, [r3, #0]
   d802a:	681b      	ldr	r3, [r3, #0]
   d802c:	9301      	str	r3, [sp, #4]
   d802e:	bd08      	pop	{r3, pc}
   d8030:	00030230 	.word	0x00030230

000d8034 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d8034:	b508      	push	{r3, lr}
   d8036:	4b02      	ldr	r3, [pc, #8]	; (d8040 <hal_spi_transfer+0xc>)
   d8038:	681b      	ldr	r3, [r3, #0]
   d803a:	695b      	ldr	r3, [r3, #20]
   d803c:	9301      	str	r3, [sp, #4]
   d803e:	bd08      	pop	{r3, pc}
   d8040:	00030230 	.word	0x00030230

000d8044 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d8044:	b508      	push	{r3, lr}
   d8046:	4b02      	ldr	r3, [pc, #8]	; (d8050 <hal_spi_init+0xc>)
   d8048:	681b      	ldr	r3, [r3, #0]
   d804a:	69db      	ldr	r3, [r3, #28]
   d804c:	9301      	str	r3, [sp, #4]
   d804e:	bd08      	pop	{r3, pc}
   d8050:	00030230 	.word	0x00030230

000d8054 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d8054:	b508      	push	{r3, lr}
   d8056:	4b02      	ldr	r3, [pc, #8]	; (d8060 <hal_spi_is_enabled+0xc>)
   d8058:	681b      	ldr	r3, [r3, #0]
   d805a:	6a1b      	ldr	r3, [r3, #32]
   d805c:	9301      	str	r3, [sp, #4]
   d805e:	bd08      	pop	{r3, pc}
   d8060:	00030230 	.word	0x00030230

000d8064 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d8064:	b508      	push	{r3, lr}
   d8066:	4b02      	ldr	r3, [pc, #8]	; (d8070 <hal_spi_info+0xc>)
   d8068:	681b      	ldr	r3, [r3, #0]
   d806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d806c:	9301      	str	r3, [sp, #4]
   d806e:	bd08      	pop	{r3, pc}
   d8070:	00030230 	.word	0x00030230

000d8074 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d8074:	b508      	push	{r3, lr}
   d8076:	4b02      	ldr	r3, [pc, #8]	; (d8080 <hal_spi_transfer_dma+0xc>)
   d8078:	681b      	ldr	r3, [r3, #0]
   d807a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d807c:	9301      	str	r3, [sp, #4]
   d807e:	bd08      	pop	{r3, pc}
   d8080:	00030230 	.word	0x00030230

000d8084 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d8084:	b508      	push	{r3, lr}
   d8086:	4b02      	ldr	r3, [pc, #8]	; (d8090 <hal_spi_transfer_dma_status+0xc>)
   d8088:	681b      	ldr	r3, [r3, #0]
   d808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d808c:	9301      	str	r3, [sp, #4]
   d808e:	bd08      	pop	{r3, pc}
   d8090:	00030230 	.word	0x00030230

000d8094 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d8094:	b508      	push	{r3, lr}
   d8096:	4b02      	ldr	r3, [pc, #8]	; (d80a0 <hal_spi_set_settings+0xc>)
   d8098:	681b      	ldr	r3, [r3, #0]
   d809a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d809c:	9301      	str	r3, [sp, #4]
   d809e:	bd08      	pop	{r3, pc}
   d80a0:	00030230 	.word	0x00030230

000d80a4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d80a4:	b508      	push	{r3, lr}
   d80a6:	4b02      	ldr	r3, [pc, #8]	; (d80b0 <hal_spi_acquire+0xc>)
   d80a8:	681b      	ldr	r3, [r3, #0]
   d80aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d80ac:	9301      	str	r3, [sp, #4]
   d80ae:	bd08      	pop	{r3, pc}
   d80b0:	00030230 	.word	0x00030230

000d80b4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d80b4:	b508      	push	{r3, lr}
   d80b6:	4b02      	ldr	r3, [pc, #8]	; (d80c0 <hal_spi_release+0xc>)
   d80b8:	681b      	ldr	r3, [r3, #0]
   d80ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d80bc:	9301      	str	r3, [sp, #4]
   d80be:	bd08      	pop	{r3, pc}
   d80c0:	00030230 	.word	0x00030230

000d80c4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d80c4:	b508      	push	{r3, lr}
   d80c6:	4b02      	ldr	r3, [pc, #8]	; (d80d0 <HAL_USB_USART_Init+0xc>)
   d80c8:	681b      	ldr	r3, [r3, #0]
   d80ca:	681b      	ldr	r3, [r3, #0]
   d80cc:	9301      	str	r3, [sp, #4]
   d80ce:	bd08      	pop	{r3, pc}
   d80d0:	0003024c 	.word	0x0003024c

000d80d4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d80d4:	b508      	push	{r3, lr}
   d80d6:	4b02      	ldr	r3, [pc, #8]	; (d80e0 <HAL_USB_USART_Begin+0xc>)
   d80d8:	681b      	ldr	r3, [r3, #0]
   d80da:	685b      	ldr	r3, [r3, #4]
   d80dc:	9301      	str	r3, [sp, #4]
   d80de:	bd08      	pop	{r3, pc}
   d80e0:	0003024c 	.word	0x0003024c

000d80e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d80e4:	b508      	push	{r3, lr}
   d80e6:	4b02      	ldr	r3, [pc, #8]	; (d80f0 <HAL_USB_USART_Available_Data+0xc>)
   d80e8:	681b      	ldr	r3, [r3, #0]
   d80ea:	691b      	ldr	r3, [r3, #16]
   d80ec:	9301      	str	r3, [sp, #4]
   d80ee:	bd08      	pop	{r3, pc}
   d80f0:	0003024c 	.word	0x0003024c

000d80f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d80f4:	b508      	push	{r3, lr}
   d80f6:	4b02      	ldr	r3, [pc, #8]	; (d8100 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d80f8:	681b      	ldr	r3, [r3, #0]
   d80fa:	695b      	ldr	r3, [r3, #20]
   d80fc:	9301      	str	r3, [sp, #4]
   d80fe:	bd08      	pop	{r3, pc}
   d8100:	0003024c 	.word	0x0003024c

000d8104 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8104:	b508      	push	{r3, lr}
   d8106:	4b02      	ldr	r3, [pc, #8]	; (d8110 <HAL_USB_USART_Receive_Data+0xc>)
   d8108:	681b      	ldr	r3, [r3, #0]
   d810a:	699b      	ldr	r3, [r3, #24]
   d810c:	9301      	str	r3, [sp, #4]
   d810e:	bd08      	pop	{r3, pc}
   d8110:	0003024c 	.word	0x0003024c

000d8114 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8114:	b508      	push	{r3, lr}
   d8116:	4b02      	ldr	r3, [pc, #8]	; (d8120 <HAL_USB_USART_Send_Data+0xc>)
   d8118:	681b      	ldr	r3, [r3, #0]
   d811a:	69db      	ldr	r3, [r3, #28]
   d811c:	9301      	str	r3, [sp, #4]
   d811e:	bd08      	pop	{r3, pc}
   d8120:	0003024c 	.word	0x0003024c

000d8124 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8124:	b508      	push	{r3, lr}
   d8126:	4b02      	ldr	r3, [pc, #8]	; (d8130 <HAL_USB_USART_Flush_Data+0xc>)
   d8128:	681b      	ldr	r3, [r3, #0]
   d812a:	6a1b      	ldr	r3, [r3, #32]
   d812c:	9301      	str	r3, [sp, #4]
   d812e:	bd08      	pop	{r3, pc}
   d8130:	0003024c 	.word	0x0003024c

000d8134 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d8134:	b508      	push	{r3, lr}
   d8136:	4b02      	ldr	r3, [pc, #8]	; (d8140 <HAL_USB_USART_Is_Enabled+0xc>)
   d8138:	681b      	ldr	r3, [r3, #0]
   d813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d813c:	9301      	str	r3, [sp, #4]
   d813e:	bd08      	pop	{r3, pc}
   d8140:	0003024c 	.word	0x0003024c

000d8144 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8144:	b508      	push	{r3, lr}
   d8146:	4b02      	ldr	r3, [pc, #8]	; (d8150 <panic_+0xc>)
   d8148:	681b      	ldr	r3, [r3, #0]
   d814a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d814c:	9301      	str	r3, [sp, #4]
   d814e:	bd08      	pop	{r3, pc}
   d8150:	00030260 	.word	0x00030260

000d8154 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8154:	b508      	push	{r3, lr}
   d8156:	4b02      	ldr	r3, [pc, #8]	; (d8160 <system_mode+0xc>)
   d8158:	681b      	ldr	r3, [r3, #0]
   d815a:	681b      	ldr	r3, [r3, #0]
   d815c:	9301      	str	r3, [sp, #4]
   d815e:	bd08      	pop	{r3, pc}
   d8160:	00030220 	.word	0x00030220

000d8164 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8164:	b508      	push	{r3, lr}
   d8166:	4b02      	ldr	r3, [pc, #8]	; (d8170 <set_system_mode+0xc>)
   d8168:	681b      	ldr	r3, [r3, #0]
   d816a:	685b      	ldr	r3, [r3, #4]
   d816c:	9301      	str	r3, [sp, #4]
   d816e:	bd08      	pop	{r3, pc}
   d8170:	00030220 	.word	0x00030220

000d8174 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8174:	b508      	push	{r3, lr}
   d8176:	4b02      	ldr	r3, [pc, #8]	; (d8180 <system_delay_ms+0xc>)
   d8178:	681b      	ldr	r3, [r3, #0]
   d817a:	695b      	ldr	r3, [r3, #20]
   d817c:	9301      	str	r3, [sp, #4]
   d817e:	bd08      	pop	{r3, pc}
   d8180:	00030220 	.word	0x00030220

000d8184 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d8184:	b508      	push	{r3, lr}
   d8186:	4b02      	ldr	r3, [pc, #8]	; (d8190 <application_thread_current+0xc>)
   d8188:	681b      	ldr	r3, [r3, #0]
   d818a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d818c:	9301      	str	r3, [sp, #4]
   d818e:	bd08      	pop	{r3, pc}
   d8190:	00030220 	.word	0x00030220

000d8194 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d8194:	b508      	push	{r3, lr}
   d8196:	4b02      	ldr	r3, [pc, #8]	; (d81a0 <application_thread_invoke+0xc>)
   d8198:	681b      	ldr	r3, [r3, #0]
   d819a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d819c:	9301      	str	r3, [sp, #4]
   d819e:	bd08      	pop	{r3, pc}
   d81a0:	00030220 	.word	0x00030220

000d81a4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d81a4:	b508      	push	{r3, lr}
   d81a6:	4b02      	ldr	r3, [pc, #8]	; (d81b0 <system_thread_get_state+0xc>)
   d81a8:	681b      	ldr	r3, [r3, #0]
   d81aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d81ac:	9301      	str	r3, [sp, #4]
   d81ae:	bd08      	pop	{r3, pc}
   d81b0:	00030220 	.word	0x00030220

000d81b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d81b4:	b508      	push	{r3, lr}
   d81b6:	4b03      	ldr	r3, [pc, #12]	; (d81c4 <system_ctrl_set_app_request_handler+0x10>)
   d81b8:	681b      	ldr	r3, [r3, #0]
   d81ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d81be:	9301      	str	r3, [sp, #4]
   d81c0:	bd08      	pop	{r3, pc}
   d81c2:	0000      	.short	0x0000
   d81c4:	00030220 	.word	0x00030220

000d81c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d81c8:	b508      	push	{r3, lr}
   d81ca:	4b03      	ldr	r3, [pc, #12]	; (d81d8 <system_ctrl_set_result+0x10>)
   d81cc:	681b      	ldr	r3, [r3, #0]
   d81ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d81d2:	9301      	str	r3, [sp, #4]
   d81d4:	bd08      	pop	{r3, pc}
   d81d6:	0000      	.short	0x0000
   d81d8:	00030220 	.word	0x00030220

000d81dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d81dc:	b508      	push	{r3, lr}
   d81de:	4b02      	ldr	r3, [pc, #8]	; (d81e8 <network_connect+0xc>)
   d81e0:	681b      	ldr	r3, [r3, #0]
   d81e2:	685b      	ldr	r3, [r3, #4]
   d81e4:	9301      	str	r3, [sp, #4]
   d81e6:	bd08      	pop	{r3, pc}
   d81e8:	00030240 	.word	0x00030240

000d81ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d81ec:	b508      	push	{r3, lr}
   d81ee:	4b02      	ldr	r3, [pc, #8]	; (d81f8 <network_connecting+0xc>)
   d81f0:	681b      	ldr	r3, [r3, #0]
   d81f2:	689b      	ldr	r3, [r3, #8]
   d81f4:	9301      	str	r3, [sp, #4]
   d81f6:	bd08      	pop	{r3, pc}
   d81f8:	00030240 	.word	0x00030240

000d81fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d81fc:	b508      	push	{r3, lr}
   d81fe:	4b02      	ldr	r3, [pc, #8]	; (d8208 <network_disconnect+0xc>)
   d8200:	681b      	ldr	r3, [r3, #0]
   d8202:	68db      	ldr	r3, [r3, #12]
   d8204:	9301      	str	r3, [sp, #4]
   d8206:	bd08      	pop	{r3, pc}
   d8208:	00030240 	.word	0x00030240

000d820c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d820c:	b508      	push	{r3, lr}
   d820e:	4b02      	ldr	r3, [pc, #8]	; (d8218 <network_ready+0xc>)
   d8210:	681b      	ldr	r3, [r3, #0]
   d8212:	691b      	ldr	r3, [r3, #16]
   d8214:	9301      	str	r3, [sp, #4]
   d8216:	bd08      	pop	{r3, pc}
   d8218:	00030240 	.word	0x00030240

000d821c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d821c:	b508      	push	{r3, lr}
   d821e:	4b02      	ldr	r3, [pc, #8]	; (d8228 <network_on+0xc>)
   d8220:	681b      	ldr	r3, [r3, #0]
   d8222:	695b      	ldr	r3, [r3, #20]
   d8224:	9301      	str	r3, [sp, #4]
   d8226:	bd08      	pop	{r3, pc}
   d8228:	00030240 	.word	0x00030240

000d822c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d822c:	b508      	push	{r3, lr}
   d822e:	4b02      	ldr	r3, [pc, #8]	; (d8238 <network_off+0xc>)
   d8230:	681b      	ldr	r3, [r3, #0]
   d8232:	699b      	ldr	r3, [r3, #24]
   d8234:	9301      	str	r3, [sp, #4]
   d8236:	bd08      	pop	{r3, pc}
   d8238:	00030240 	.word	0x00030240

000d823c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d823c:	b508      	push	{r3, lr}
   d823e:	4b02      	ldr	r3, [pc, #8]	; (d8248 <network_listen+0xc>)
   d8240:	681b      	ldr	r3, [r3, #0]
   d8242:	69db      	ldr	r3, [r3, #28]
   d8244:	9301      	str	r3, [sp, #4]
   d8246:	bd08      	pop	{r3, pc}
   d8248:	00030240 	.word	0x00030240

000d824c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d824c:	b508      	push	{r3, lr}
   d824e:	4b02      	ldr	r3, [pc, #8]	; (d8258 <network_listening+0xc>)
   d8250:	681b      	ldr	r3, [r3, #0]
   d8252:	6a1b      	ldr	r3, [r3, #32]
   d8254:	9301      	str	r3, [sp, #4]
   d8256:	bd08      	pop	{r3, pc}
   d8258:	00030240 	.word	0x00030240

000d825c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d825c:	b508      	push	{r3, lr}
   d825e:	4b02      	ldr	r3, [pc, #8]	; (d8268 <network_set_listen_timeout+0xc>)
   d8260:	681b      	ldr	r3, [r3, #0]
   d8262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8264:	9301      	str	r3, [sp, #4]
   d8266:	bd08      	pop	{r3, pc}
   d8268:	00030240 	.word	0x00030240

000d826c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d826c:	b508      	push	{r3, lr}
   d826e:	4b02      	ldr	r3, [pc, #8]	; (d8278 <network_get_listen_timeout+0xc>)
   d8270:	681b      	ldr	r3, [r3, #0]
   d8272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8274:	9301      	str	r3, [sp, #4]
   d8276:	bd08      	pop	{r3, pc}
   d8278:	00030240 	.word	0x00030240

000d827c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d827c:	b508      	push	{r3, lr}
   d827e:	4b02      	ldr	r3, [pc, #8]	; (d8288 <network_is_on+0xc>)
   d8280:	681b      	ldr	r3, [r3, #0]
   d8282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8284:	9301      	str	r3, [sp, #4]
   d8286:	bd08      	pop	{r3, pc}
   d8288:	00030240 	.word	0x00030240

000d828c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d828c:	b508      	push	{r3, lr}
   d828e:	4b02      	ldr	r3, [pc, #8]	; (d8298 <network_is_off+0xc>)
   d8290:	681b      	ldr	r3, [r3, #0]
   d8292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8294:	9301      	str	r3, [sp, #4]
   d8296:	bd08      	pop	{r3, pc}
   d8298:	00030240 	.word	0x00030240

000d829c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d829c:	b508      	push	{r3, lr}
   d829e:	4b02      	ldr	r3, [pc, #8]	; (d82a8 <spark_process+0xc>)
   d82a0:	681b      	ldr	r3, [r3, #0]
   d82a2:	689b      	ldr	r3, [r3, #8]
   d82a4:	9301      	str	r3, [sp, #4]
   d82a6:	bd08      	pop	{r3, pc}
   d82a8:	00030244 	.word	0x00030244

000d82ac <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d82ac:	b508      	push	{r3, lr}
   d82ae:	4b02      	ldr	r3, [pc, #8]	; (d82b8 <spark_cloud_flag_connected+0xc>)
   d82b0:	681b      	ldr	r3, [r3, #0]
   d82b2:	695b      	ldr	r3, [r3, #20]
   d82b4:	9301      	str	r3, [sp, #4]
   d82b6:	bd08      	pop	{r3, pc}
   d82b8:	00030244 	.word	0x00030244

000d82bc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d82bc:	b508      	push	{r3, lr}
   d82be:	4b02      	ldr	r3, [pc, #8]	; (d82c8 <spark_send_event+0xc>)
   d82c0:	681b      	ldr	r3, [r3, #0]
   d82c2:	6a1b      	ldr	r3, [r3, #32]
   d82c4:	9301      	str	r3, [sp, #4]
   d82c6:	bd08      	pop	{r3, pc}
   d82c8:	00030244 	.word	0x00030244

000d82cc <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d82cc:	b508      	push	{r3, lr}
   d82ce:	4b02      	ldr	r3, [pc, #8]	; (d82d8 <spark_sync_time_pending+0xc>)
   d82d0:	681b      	ldr	r3, [r3, #0]
   d82d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d82d4:	9301      	str	r3, [sp, #4]
   d82d6:	bd08      	pop	{r3, pc}
   d82d8:	00030244 	.word	0x00030244

000d82dc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d82dc:	b508      	push	{r3, lr}
   d82de:	4b02      	ldr	r3, [pc, #8]	; (d82e8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d82e0:	681b      	ldr	r3, [r3, #0]
   d82e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d82e4:	9301      	str	r3, [sp, #4]
   d82e6:	bd08      	pop	{r3, pc}
   d82e8:	00030244 	.word	0x00030244

000d82ec <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d82ec:	b508      	push	{r3, lr}
   d82ee:	4b02      	ldr	r3, [pc, #8]	; (d82f8 <malloc+0xc>)
   d82f0:	681b      	ldr	r3, [r3, #0]
   d82f2:	681b      	ldr	r3, [r3, #0]
   d82f4:	9301      	str	r3, [sp, #4]
   d82f6:	bd08      	pop	{r3, pc}
   d82f8:	0003021c 	.word	0x0003021c

000d82fc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d82fc:	b508      	push	{r3, lr}
   d82fe:	4b02      	ldr	r3, [pc, #8]	; (d8308 <free+0xc>)
   d8300:	681b      	ldr	r3, [r3, #0]
   d8302:	685b      	ldr	r3, [r3, #4]
   d8304:	9301      	str	r3, [sp, #4]
   d8306:	bd08      	pop	{r3, pc}
   d8308:	0003021c 	.word	0x0003021c

000d830c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d830c:	b508      	push	{r3, lr}
   d830e:	4b02      	ldr	r3, [pc, #8]	; (d8318 <realloc+0xc>)
   d8310:	681b      	ldr	r3, [r3, #0]
   d8312:	689b      	ldr	r3, [r3, #8]
   d8314:	9301      	str	r3, [sp, #4]
   d8316:	bd08      	pop	{r3, pc}
   d8318:	0003021c 	.word	0x0003021c

000d831c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d831c:	b508      	push	{r3, lr}
   d831e:	4b02      	ldr	r3, [pc, #8]	; (d8328 <vsnprintf+0xc>)
   d8320:	681b      	ldr	r3, [r3, #0]
   d8322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8324:	9301      	str	r3, [sp, #4]
   d8326:	bd08      	pop	{r3, pc}
   d8328:	0003021c 	.word	0x0003021c

000d832c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d832c:	b508      	push	{r3, lr}
   d832e:	4b02      	ldr	r3, [pc, #8]	; (d8338 <abort+0xc>)
   d8330:	681b      	ldr	r3, [r3, #0]
   d8332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8334:	9301      	str	r3, [sp, #4]
   d8336:	bd08      	pop	{r3, pc}
   d8338:	0003021c 	.word	0x0003021c

000d833c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d833c:	b508      	push	{r3, lr}
   d833e:	4b02      	ldr	r3, [pc, #8]	; (d8348 <_malloc_r+0xc>)
   d8340:	681b      	ldr	r3, [r3, #0]
   d8342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8344:	9301      	str	r3, [sp, #4]
   d8346:	bd08      	pop	{r3, pc}
   d8348:	0003021c 	.word	0x0003021c

000d834c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d834c:	b508      	push	{r3, lr}
   d834e:	4b02      	ldr	r3, [pc, #8]	; (d8358 <__errno+0xc>)
   d8350:	681b      	ldr	r3, [r3, #0]
   d8352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8354:	9301      	str	r3, [sp, #4]
   d8356:	bd08      	pop	{r3, pc}
   d8358:	0003021c 	.word	0x0003021c

000d835c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d835c:	b508      	push	{r3, lr}
   d835e:	4b02      	ldr	r3, [pc, #8]	; (d8368 <newlib_impure_ptr_callback+0xc>)
   d8360:	681b      	ldr	r3, [r3, #0]
   d8362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8364:	9301      	str	r3, [sp, #4]
   d8366:	bd08      	pop	{r3, pc}
   d8368:	0003021c 	.word	0x0003021c

000d836c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d836c:	2200      	movs	r2, #0
   d836e:	6840      	ldr	r0, [r0, #4]
   d8370:	4611      	mov	r1, r2
   d8372:	f7ff bf6b 	b.w	d824c <network_listening>

000d8376 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8376:	2200      	movs	r2, #0
   d8378:	6840      	ldr	r0, [r0, #4]
   d837a:	4611      	mov	r1, r2
   d837c:	f7ff bf76 	b.w	d826c <network_get_listen_timeout>

000d8380 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8380:	6840      	ldr	r0, [r0, #4]
   d8382:	2200      	movs	r2, #0
   d8384:	f7ff bf6a 	b.w	d825c <network_set_listen_timeout>

000d8388 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8388:	6840      	ldr	r0, [r0, #4]
   d838a:	2200      	movs	r2, #0
   d838c:	f081 0101 	eor.w	r1, r1, #1
   d8390:	f7ff bf54 	b.w	d823c <network_listen>

000d8394 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8394:	2300      	movs	r3, #0
   d8396:	6840      	ldr	r0, [r0, #4]
   d8398:	461a      	mov	r2, r3
   d839a:	4619      	mov	r1, r3
   d839c:	f7ff bf46 	b.w	d822c <network_off>

000d83a0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d83a0:	2300      	movs	r3, #0
   d83a2:	6840      	ldr	r0, [r0, #4]
   d83a4:	461a      	mov	r2, r3
   d83a6:	4619      	mov	r1, r3
   d83a8:	f7ff bf38 	b.w	d821c <network_on>

000d83ac <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d83ac:	2200      	movs	r2, #0
   d83ae:	6840      	ldr	r0, [r0, #4]
   d83b0:	4611      	mov	r1, r2
   d83b2:	f7ff bf2b 	b.w	d820c <network_ready>

000d83b6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d83b6:	2200      	movs	r2, #0
   d83b8:	6840      	ldr	r0, [r0, #4]
   d83ba:	4611      	mov	r1, r2
   d83bc:	f7ff bf16 	b.w	d81ec <network_connecting>

000d83c0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d83c0:	6840      	ldr	r0, [r0, #4]
   d83c2:	2200      	movs	r2, #0
   d83c4:	2102      	movs	r1, #2
   d83c6:	f7ff bf19 	b.w	d81fc <network_disconnect>

000d83ca <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d83ca:	2300      	movs	r3, #0
   d83cc:	6840      	ldr	r0, [r0, #4]
   d83ce:	461a      	mov	r2, r3
   d83d0:	f7ff bf04 	b.w	d81dc <network_connect>

000d83d4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d83d4:	4b02      	ldr	r3, [pc, #8]	; (d83e0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d83d6:	2203      	movs	r2, #3
   d83d8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d83da:	4a02      	ldr	r2, [pc, #8]	; (d83e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d83dc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d83de:	4770      	bx	lr
   d83e0:	2003e588 	.word	0x2003e588
   d83e4:	000de58c 	.word	0x000de58c

000d83e8 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d83e8:	2100      	movs	r1, #0
   d83ea:	f7ff be5b 	b.w	d80a4 <hal_spi_acquire>

000d83ee <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d83ee:	2100      	movs	r1, #0
   d83f0:	f7ff be60 	b.w	d80b4 <hal_spi_release>

000d83f4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d83f4:	b510      	push	{r4, lr}
   d83f6:	4604      	mov	r4, r0
   d83f8:	4608      	mov	r0, r1
{
    _spi = spi;
   d83fa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d83fc:	f7ff fe22 	bl	d8044 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8400:	2300      	movs	r3, #0
   d8402:	6063      	str	r3, [r4, #4]
}
   d8404:	4620      	mov	r0, r4
   d8406:	bd10      	pop	{r4, pc}

000d8408 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d8408:	b510      	push	{r4, lr}
   d840a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d840c:	7800      	ldrb	r0, [r0, #0]
   d840e:	f7ff ffeb 	bl	d83e8 <_ZN8SPIClass4lockEv.isra.0>
   d8412:	b948      	cbnz	r0, d8428 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d8414:	7820      	ldrb	r0, [r4, #0]
   d8416:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d841a:	f7ff fe03 	bl	d8024 <hal_spi_begin>
        unlock();
   d841e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d8424:	f7ff bfe3 	b.w	d83ee <_ZN8SPIClass6unlockEv.isra.0>
}
   d8428:	bd10      	pop	{r4, pc}

000d842a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d842a:	7800      	ldrb	r0, [r0, #0]
   d842c:	f7ff bfdf 	b.w	d83ee <_ZN8SPIClass6unlockEv.isra.0>

000d8430 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d8430:	0840      	lsrs	r0, r0, #1
{
   d8432:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d8434:	6018      	str	r0, [r3, #0]
   d8436:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d8438:	6818      	ldr	r0, [r3, #0]
   d843a:	4288      	cmp	r0, r1
   d843c:	b2e5      	uxtb	r5, r4
   d843e:	d906      	bls.n	d844e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d8440:	3401      	adds	r4, #1
   d8442:	2c08      	cmp	r4, #8
   d8444:	d002      	beq.n	d844c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d8446:	0840      	lsrs	r0, r0, #1
   d8448:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d844a:	e7f5      	b.n	d8438 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d844c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d844e:	4b02      	ldr	r3, [pc, #8]	; (d8458 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d8450:	5d5b      	ldrb	r3, [r3, r5]
   d8452:	7013      	strb	r3, [r2, #0]
}
   d8454:	bd30      	pop	{r4, r5, pc}
   d8456:	bf00      	nop
   d8458:	000de5c0 	.word	0x000de5c0

000d845c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d845c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8460:	4606      	mov	r6, r0
   d8462:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d8464:	7800      	ldrb	r0, [r0, #0]
{
   d8466:	460c      	mov	r4, r1
    CHECK(lock());
   d8468:	f7ff ffbe 	bl	d83e8 <_ZN8SPIClass4lockEv.isra.0>
   d846c:	2800      	cmp	r0, #0
   d846e:	db1b      	blt.n	d84a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d8470:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d8472:	2214      	movs	r2, #20
   d8474:	2100      	movs	r1, #0
   d8476:	a809      	add	r0, sp, #36	; 0x24
   d8478:	f004 ffd0 	bl	dd41c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d847c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d847e:	2200      	movs	r2, #0
   d8480:	a909      	add	r1, sp, #36	; 0x24
   d8482:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d8484:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d8488:	f7ff fdec 	bl	d8064 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d848c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d8490:	b113      	cbz	r3, d8498 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d8492:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d8496:	b155      	cbz	r5, d84ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d8498:	2700      	movs	r7, #0
   d849a:	46b9      	mov	r9, r7
   d849c:	46b8      	mov	r8, r7
   d849e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d84a0:	7923      	ldrb	r3, [r4, #4]
   d84a2:	b15d      	cbz	r5, d84bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d84a4:	b1c3      	cbz	r3, d84d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d84a6:	2000      	movs	r0, #0
}
   d84a8:	b00f      	add	sp, #60	; 0x3c
   d84aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d84ae:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d84b2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d84b6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d84ba:	e7f1      	b.n	d84a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d84bc:	2b00      	cmp	r3, #0
   d84be:	d135      	bne.n	d852c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d84c0:	68a3      	ldr	r3, [r4, #8]
   d84c2:	4543      	cmp	r3, r8
   d84c4:	d108      	bne.n	d84d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d84c6:	f88d 9020 	strb.w	r9, [sp, #32]
   d84ca:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d84ce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d84d2:	89a3      	ldrh	r3, [r4, #12]
   d84d4:	429a      	cmp	r2, r3
   d84d6:	d0e6      	beq.n	d84a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d84d8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d84da:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d84dc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d84e0:	980a      	ldr	r0, [sp, #40]	; 0x28
   d84e2:	ab04      	add	r3, sp, #16
   d84e4:	f10d 020f 	add.w	r2, sp, #15
   d84e8:	f7ff ffa2 	bl	d8430 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d84ec:	7921      	ldrb	r1, [r4, #4]
   d84ee:	b985      	cbnz	r5, d8512 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d84f0:	b989      	cbnz	r1, d8516 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d84f2:	68a3      	ldr	r3, [r4, #8]
   d84f4:	4543      	cmp	r3, r8
   d84f6:	d30e      	bcc.n	d8516 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d84f8:	f88d 9020 	strb.w	r9, [sp, #32]
   d84fc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d8500:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8504:	89a3      	ldrh	r3, [r4, #12]
   d8506:	429a      	cmp	r2, r3
   d8508:	d105      	bne.n	d8516 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d850a:	9b04      	ldr	r3, [sp, #16]
   d850c:	4543      	cmp	r3, r8
   d850e:	d102      	bne.n	d8516 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d8510:	e7c9      	b.n	d84a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d8512:	2900      	cmp	r1, #0
   d8514:	d1f9      	bne.n	d850a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d8516:	2300      	movs	r3, #0
   d8518:	9301      	str	r3, [sp, #4]
   d851a:	7b63      	ldrb	r3, [r4, #13]
   d851c:	9300      	str	r3, [sp, #0]
   d851e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d8522:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d8524:	7830      	ldrb	r0, [r6, #0]
   d8526:	f7ff fdb5 	bl	d8094 <hal_spi_set_settings>
   d852a:	e7bc      	b.n	d84a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d852c:	e9cd 5500 	strd	r5, r5, [sp]
   d8530:	462b      	mov	r3, r5
   d8532:	462a      	mov	r2, r5
   d8534:	2101      	movs	r1, #1
   d8536:	e7f5      	b.n	d8524 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d8538 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d8538:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d853a:	7800      	ldrb	r0, [r0, #0]
   d853c:	f7ff fd7a 	bl	d8034 <hal_spi_transfer>
}
   d8540:	b2c0      	uxtb	r0, r0
   d8542:	bd08      	pop	{r3, pc}

000d8544 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d8544:	b530      	push	{r4, r5, lr}
   d8546:	b087      	sub	sp, #28
   d8548:	4604      	mov	r4, r0
   d854a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d854c:	9500      	str	r5, [sp, #0]
   d854e:	7800      	ldrb	r0, [r0, #0]
   d8550:	f7ff fd90 	bl	d8074 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d8554:	b93d      	cbnz	r5, d8566 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d8556:	7820      	ldrb	r0, [r4, #0]
   d8558:	a902      	add	r1, sp, #8
   d855a:	f7ff fd93 	bl	d8084 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d855e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d8562:	07db      	lsls	r3, r3, #31
   d8564:	d4f7      	bmi.n	d8556 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d8566:	b007      	add	sp, #28
   d8568:	bd30      	pop	{r4, r5, pc}
	...

000d856c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d856c:	4b05      	ldr	r3, [pc, #20]	; (d8584 <_GLOBAL__sub_I_System+0x18>)
   d856e:	2202      	movs	r2, #2
   d8570:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8572:	4b05      	ldr	r3, [pc, #20]	; (d8588 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d8574:	4a05      	ldr	r2, [pc, #20]	; (d858c <_GLOBAL__sub_I_System+0x20>)
   d8576:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d8578:	2000      	movs	r0, #0
   d857a:	6018      	str	r0, [r3, #0]
   d857c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d857e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8580:	f7ff bdf0 	b.w	d8164 <set_system_mode>
   d8584:	2003e59c 	.word	0x2003e59c
   d8588:	2003e590 	.word	0x2003e590
   d858c:	ffff0000 	.word	0xffff0000

000d8590 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d8590:	b510      	push	{r4, lr}
   d8592:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d8594:	f004 ff8b 	bl	dd4ae <strlen>
   d8598:	3801      	subs	r0, #1
   d859a:	1823      	adds	r3, r4, r0
   d859c:	4620      	mov	r0, r4
	while(i<j){
   d859e:	4283      	cmp	r3, r0
   d85a0:	d906      	bls.n	d85b0 <_Z11str_reversePc+0x20>
		c = *i;
   d85a2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d85a4:	7819      	ldrb	r1, [r3, #0]
   d85a6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d85aa:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d85ae:	e7f6      	b.n	d859e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d85b0:	bd10      	pop	{r4, pc}

000d85b2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d85b2:	b570      	push	{r4, r5, r6, lr}
   d85b4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d85b6:	1e91      	subs	r1, r2, #2
   d85b8:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d85ba:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d85bc:	d822      	bhi.n	d8604 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d85be:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d85c0:	b16d      	cbz	r5, d85de <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d85c2:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d85c6:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d85ca:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d85cc:	2d09      	cmp	r5, #9
                *ptr += '0';
   d85ce:	bf94      	ite	ls
   d85d0:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d85d2:	3157      	addhi	r1, #87	; 0x57
   d85d4:	b2c9      	uxtb	r1, r1
   d85d6:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d85da:	4635      	mov	r5, r6
	while(a){
   d85dc:	e7f0      	b.n	d85c0 <ultoa+0xe>
   d85de:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d85e0:	4423      	add	r3, r4
            *ptr++ = '0';
   d85e2:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d85e4:	4293      	cmp	r3, r2
   d85e6:	d902      	bls.n	d85ee <ultoa+0x3c>
            *ptr++ = '0';
   d85e8:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d85ec:	e7fa      	b.n	d85e4 <ultoa+0x32>
   d85ee:	1a1a      	subs	r2, r3, r0
   d85f0:	4283      	cmp	r3, r0
   d85f2:	bf38      	it	cc
   d85f4:	2200      	movcc	r2, #0

	*ptr = '\0';
   d85f6:	2300      	movs	r3, #0
   d85f8:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d85fa:	4620      	mov	r0, r4
   d85fc:	f7ff ffc8 	bl	d8590 <_Z11str_reversePc>
	return buffer;
   d8600:	4620      	mov	r0, r4
}
   d8602:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d8604:	2000      	movs	r0, #0
   d8606:	e7fc      	b.n	d8602 <ultoa+0x50>

000d8608 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d8608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d860c:	ec57 6b10 	vmov	r6, r7, d0
   d8610:	4680      	mov	r8, r0
   d8612:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d8614:	ee10 0a10 	vmov	r0, s0
   d8618:	2200      	movs	r2, #0
   d861a:	2300      	movs	r3, #0
   d861c:	4639      	mov	r1, r7
   d861e:	f004 fb1b 	bl	dcc58 <__aeabi_dcmplt>
   d8622:	b128      	cbz	r0, d8630 <_Z4dtoadhPc+0x28>
        val = -val;
   d8624:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d8628:	461f      	mov	r7, r3
        *sout++ = '-';
   d862a:	232d      	movs	r3, #45	; 0x2d
   d862c:	f804 3b01 	strb.w	r3, [r4], #1
   d8630:	2300      	movs	r3, #0
    }
    long scale = 1;
   d8632:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d8636:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d8638:	b2d9      	uxtb	r1, r3
   d863a:	4588      	cmp	r8, r1
   d863c:	d903      	bls.n	d8646 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d863e:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d8642:	3301      	adds	r3, #1
   d8644:	e7f8      	b.n	d8638 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d8646:	4648      	mov	r0, r9
   d8648:	f004 f82a 	bl	dc6a0 <__aeabi_i2d>
   d864c:	4632      	mov	r2, r6
   d864e:	463b      	mov	r3, r7
   d8650:	f004 f890 	bl	dc774 <__aeabi_dmul>
   d8654:	4606      	mov	r6, r0
   d8656:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d8658:	f004 fd4a 	bl	dd0f0 <__aeabi_d2ulz>
   d865c:	4605      	mov	r5, r0
   d865e:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d8660:	f004 f852 	bl	dc708 <__aeabi_ul2d>
   d8664:	4602      	mov	r2, r0
   d8666:	460b      	mov	r3, r1
   d8668:	4630      	mov	r0, r6
   d866a:	4639      	mov	r1, r7
   d866c:	f003 feca 	bl	dc404 <__aeabi_dsub>
   d8670:	4b13      	ldr	r3, [pc, #76]	; (d86c0 <_Z4dtoadhPc+0xb8>)
   d8672:	2200      	movs	r2, #0
   d8674:	f004 fb04 	bl	dcc80 <__aeabi_dcmpge>
   d8678:	b110      	cbz	r0, d8680 <_Z4dtoadhPc+0x78>
        fixed++;
   d867a:	3501      	adds	r5, #1
   d867c:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d8680:	464a      	mov	r2, r9
   d8682:	4628      	mov	r0, r5
   d8684:	17d3      	asrs	r3, r2, #31
   d8686:	4651      	mov	r1, sl
   d8688:	f004 fd1a 	bl	dd0c0 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d868c:	2301      	movs	r3, #1
   d868e:	4615      	mov	r5, r2
   d8690:	4621      	mov	r1, r4
   d8692:	220a      	movs	r2, #10
   d8694:	f7ff ff8d 	bl	d85b2 <ultoa>
    if (prec) {
   d8698:	f1b8 0f00 	cmp.w	r8, #0
   d869c:	d00d      	beq.n	d86ba <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d869e:	4620      	mov	r0, r4
   d86a0:	f004 ff05 	bl	dd4ae <strlen>
        *sout++ = '.';
   d86a4:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d86a6:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d86a8:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d86aa:	220a      	movs	r2, #10
   d86ac:	4643      	mov	r3, r8
   d86ae:	4628      	mov	r0, r5
   d86b0:	3101      	adds	r1, #1
    }
}
   d86b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d86b6:	f7ff bf7c 	b.w	d85b2 <ultoa>
}
   d86ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d86be:	bf00      	nop
   d86c0:	3fe00000 	.word	0x3fe00000

000d86c4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d86c4:	b510      	push	{r4, lr}
   d86c6:	4604      	mov	r4, r0
{
	free(buffer);
   d86c8:	6800      	ldr	r0, [r0, #0]
   d86ca:	f7ff fe17 	bl	d82fc <free>
}
   d86ce:	4620      	mov	r0, r4
   d86d0:	bd10      	pop	{r4, pc}

000d86d2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d86d2:	b510      	push	{r4, lr}
   d86d4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d86d6:	6800      	ldr	r0, [r0, #0]
   d86d8:	b108      	cbz	r0, d86de <_ZN6String10invalidateEv+0xc>
   d86da:	f7ff fe0f 	bl	d82fc <free>
	buffer = NULL;
   d86de:	2300      	movs	r3, #0
	capacity = len = 0;
   d86e0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d86e4:	6023      	str	r3, [r4, #0]
}
   d86e6:	bd10      	pop	{r4, pc}

000d86e8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d86e8:	b538      	push	{r3, r4, r5, lr}
   d86ea:	4604      	mov	r4, r0
   d86ec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d86ee:	6800      	ldr	r0, [r0, #0]
   d86f0:	3101      	adds	r1, #1
   d86f2:	f7ff fe0b 	bl	d830c <realloc>
	if (newbuffer) {
   d86f6:	b110      	cbz	r0, d86fe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d86f8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d86fc:	2001      	movs	r0, #1
	}
	return 0;
}
   d86fe:	bd38      	pop	{r3, r4, r5, pc}

000d8700 <_ZN6String7reserveEj>:
{
   d8700:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8702:	6803      	ldr	r3, [r0, #0]
{
   d8704:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8706:	b123      	cbz	r3, d8712 <_ZN6String7reserveEj+0x12>
   d8708:	6843      	ldr	r3, [r0, #4]
   d870a:	428b      	cmp	r3, r1
   d870c:	d301      	bcc.n	d8712 <_ZN6String7reserveEj+0x12>
   d870e:	2001      	movs	r0, #1
}
   d8710:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d8712:	4620      	mov	r0, r4
   d8714:	f7ff ffe8 	bl	d86e8 <_ZN6String12changeBufferEj>
   d8718:	2800      	cmp	r0, #0
   d871a:	d0f9      	beq.n	d8710 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d871c:	68a3      	ldr	r3, [r4, #8]
   d871e:	2b00      	cmp	r3, #0
   d8720:	d1f5      	bne.n	d870e <_ZN6String7reserveEj+0xe>
   d8722:	6822      	ldr	r2, [r4, #0]
   d8724:	7013      	strb	r3, [r2, #0]
   d8726:	e7f2      	b.n	d870e <_ZN6String7reserveEj+0xe>

000d8728 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8728:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d872a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d872c:	4611      	mov	r1, r2
   d872e:	9201      	str	r2, [sp, #4]
{
   d8730:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d8732:	f7ff ffe5 	bl	d8700 <_ZN6String7reserveEj>
   d8736:	9a01      	ldr	r2, [sp, #4]
   d8738:	b928      	cbnz	r0, d8746 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d873a:	4620      	mov	r0, r4
   d873c:	f7ff ffc9 	bl	d86d2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8740:	4620      	mov	r0, r4
   d8742:	b003      	add	sp, #12
   d8744:	bd30      	pop	{r4, r5, pc}
	len = length;
   d8746:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d8748:	4629      	mov	r1, r5
   d874a:	6820      	ldr	r0, [r4, #0]
   d874c:	f004 fe58 	bl	dd400 <memcpy>
	buffer[len] = 0;
   d8750:	6822      	ldr	r2, [r4, #0]
   d8752:	68a3      	ldr	r3, [r4, #8]
   d8754:	2100      	movs	r1, #0
   d8756:	54d1      	strb	r1, [r2, r3]
	return *this;
   d8758:	e7f2      	b.n	d8740 <_ZN6String4copyEPKcj+0x18>

000d875a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d875a:	b513      	push	{r0, r1, r4, lr}
   d875c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d875e:	b159      	cbz	r1, d8778 <_ZN6StringaSEPKc+0x1e>
   d8760:	4608      	mov	r0, r1
   d8762:	9101      	str	r1, [sp, #4]
   d8764:	f004 fea3 	bl	dd4ae <strlen>
   d8768:	9901      	ldr	r1, [sp, #4]
   d876a:	4602      	mov	r2, r0
   d876c:	4620      	mov	r0, r4
   d876e:	f7ff ffdb 	bl	d8728 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d8772:	4620      	mov	r0, r4
   d8774:	b002      	add	sp, #8
   d8776:	bd10      	pop	{r4, pc}
	else invalidate();
   d8778:	f7ff ffab 	bl	d86d2 <_ZN6String10invalidateEv>
   d877c:	e7f9      	b.n	d8772 <_ZN6StringaSEPKc+0x18>

000d877e <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d877e:	b510      	push	{r4, lr}
   d8780:	4604      	mov	r4, r0
   d8782:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d8784:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d8786:	4608      	mov	r0, r1
	capacity = 0;
   d8788:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d878c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d878e:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d8790:	a901      	add	r1, sp, #4
   d8792:	b2c0      	uxtb	r0, r0
   d8794:	f7ff ff38 	bl	d8608 <_Z4dtoadhPc>
        *this = buf;
   d8798:	a901      	add	r1, sp, #4
   d879a:	4620      	mov	r0, r4
   d879c:	f7ff ffdd 	bl	d875a <_ZN6StringaSEPKc>
}
   d87a0:	4620      	mov	r0, r4
   d87a2:	b00a      	add	sp, #40	; 0x28
   d87a4:	bd10      	pop	{r4, pc}

000d87a6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d87a6:	b510      	push	{r4, lr}
          _M_dispose();
   d87a8:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d87aa:	4604      	mov	r4, r0
          _M_dispose();
   d87ac:	689b      	ldr	r3, [r3, #8]
   d87ae:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d87b0:	68a3      	ldr	r3, [r4, #8]
   d87b2:	3b01      	subs	r3, #1
   d87b4:	60a3      	str	r3, [r4, #8]
   d87b6:	b92b      	cbnz	r3, d87c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d87b8:	6823      	ldr	r3, [r4, #0]
   d87ba:	4620      	mov	r0, r4
   d87bc:	68db      	ldr	r3, [r3, #12]
    }
   d87be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d87c2:	4718      	bx	r3
    }
   d87c4:	bd10      	pop	{r4, pc}

000d87c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d87c6:	680b      	ldr	r3, [r1, #0]
   d87c8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d87ca:	b113      	cbz	r3, d87d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d87cc:	685a      	ldr	r2, [r3, #4]
   d87ce:	3201      	adds	r2, #1
   d87d0:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d87d2:	4770      	bx	lr

000d87d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d87d4:	b510      	push	{r4, lr}
   d87d6:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d87d8:	6800      	ldr	r0, [r0, #0]
   d87da:	b128      	cbz	r0, d87e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d87dc:	6843      	ldr	r3, [r0, #4]
   d87de:	3b01      	subs	r3, #1
   d87e0:	6043      	str	r3, [r0, #4]
   d87e2:	b90b      	cbnz	r3, d87e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d87e4:	f7ff ffdf 	bl	d87a6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d87e8:	4620      	mov	r0, r4
   d87ea:	bd10      	pop	{r4, pc}

000d87ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d87ec:	4802      	ldr	r0, [pc, #8]	; (d87f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d87ee:	2300      	movs	r3, #0
   d87f0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d87f2:	f7ff bb67 	b.w	d7ec4 <os_mutex_recursive_create>
   d87f6:	bf00      	nop
   d87f8:	2003e5a0 	.word	0x2003e5a0

000d87fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d87fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d87fe:	4606      	mov	r6, r0
   d8800:	460d      	mov	r5, r1
  size_t n = 0;
   d8802:	188f      	adds	r7, r1, r2
   d8804:	2400      	movs	r4, #0
  while (size--) {
   d8806:	42bd      	cmp	r5, r7
   d8808:	d00c      	beq.n	d8824 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d880a:	6833      	ldr	r3, [r6, #0]
   d880c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8810:	689b      	ldr	r3, [r3, #8]
   d8812:	4630      	mov	r0, r6
   d8814:	4798      	blx	r3
     if (chunk>=0)
   d8816:	1e03      	subs	r3, r0, #0
   d8818:	db01      	blt.n	d881e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d881a:	441c      	add	r4, r3
  while (size--) {
   d881c:	e7f3      	b.n	d8806 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d881e:	2c00      	cmp	r4, #0
   d8820:	bf08      	it	eq
   d8822:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d8824:	4620      	mov	r0, r4
   d8826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8828 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d8828:	b513      	push	{r0, r1, r4, lr}
   d882a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d882c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d882e:	b159      	cbz	r1, d8848 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d8830:	9101      	str	r1, [sp, #4]
   d8832:	f004 fe3c 	bl	dd4ae <strlen>
   d8836:	6823      	ldr	r3, [r4, #0]
   d8838:	9901      	ldr	r1, [sp, #4]
   d883a:	68db      	ldr	r3, [r3, #12]
   d883c:	4602      	mov	r2, r0
   d883e:	4620      	mov	r0, r4
    }
   d8840:	b002      	add	sp, #8
   d8842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d8846:	4718      	bx	r3
    }
   d8848:	b002      	add	sp, #8
   d884a:	bd10      	pop	{r4, pc}

000d884c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d884c:	b508      	push	{r3, lr}
  return write(str);
   d884e:	f7ff ffeb 	bl	d8828 <_ZN5Print5writeEPKc>
}
   d8852:	bd08      	pop	{r3, pc}

000d8854 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d8854:	6803      	ldr	r3, [r0, #0]
   d8856:	689b      	ldr	r3, [r3, #8]
   d8858:	4718      	bx	r3

000d885a <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d885a:	b508      	push	{r3, lr}
  return write(str);
   d885c:	f7ff ffe4 	bl	d8828 <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   d8860:	bd08      	pop	{r3, pc}

000d8862 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d8862:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8864:	210d      	movs	r1, #13
{
   d8866:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8868:	f7ff fff4 	bl	d8854 <_ZN5Print5printEc>
  n += print('\n');
   d886c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d886e:	4604      	mov	r4, r0
  n += print('\n');
   d8870:	4628      	mov	r0, r5
   d8872:	f7ff ffef 	bl	d8854 <_ZN5Print5printEc>
  return n;
}
   d8876:	4420      	add	r0, r4
   d8878:	bd38      	pop	{r3, r4, r5, pc}

000d887a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d887a:	b538      	push	{r3, r4, r5, lr}
   d887c:	4605      	mov	r5, r0
  return write(str);
   d887e:	f7ff ffd3 	bl	d8828 <_ZN5Print5writeEPKc>
   d8882:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d8884:	4628      	mov	r0, r5
   d8886:	f7ff ffec 	bl	d8862 <_ZN5Print7printlnEv>
  return n;
}
   d888a:	4420      	add	r0, r4
   d888c:	bd38      	pop	{r3, r4, r5, pc}

000d888e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d888e:	f7ff bff4 	b.w	d887a <_ZN5Print7printlnEPKc>

000d8892 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8892:	b530      	push	{r4, r5, lr}
   d8894:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8896:	2300      	movs	r3, #0
   d8898:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d889c:	2a01      	cmp	r2, #1
   d889e:	bf98      	it	ls
   d88a0:	220a      	movls	r2, #10
   d88a2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d88a4:	460d      	mov	r5, r1
   d88a6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d88aa:	fb01 5312 	mls	r3, r1, r2, r5
   d88ae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d88b2:	2b09      	cmp	r3, #9
   d88b4:	bf94      	ite	ls
   d88b6:	3330      	addls	r3, #48	; 0x30
   d88b8:	3337      	addhi	r3, #55	; 0x37
   d88ba:	b2db      	uxtb	r3, r3
  } while(n);
   d88bc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d88be:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d88c2:	d9ef      	bls.n	d88a4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d88c4:	4621      	mov	r1, r4
   d88c6:	f7ff ffaf 	bl	d8828 <_ZN5Print5writeEPKc>
}
   d88ca:	b00b      	add	sp, #44	; 0x2c
   d88cc:	bd30      	pop	{r4, r5, pc}

000d88ce <_ZN5Print11printNumberEyh>:
 
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d88ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d88d2:	b093      	sub	sp, #76	; 0x4c
   d88d4:	4619      	mov	r1, r3
   d88d6:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d88da:	2d01      	cmp	r5, #1
  *str = '\0';
   d88dc:	f04f 0300 	mov.w	r3, #0
  if (base < 2) base = 10;
   d88e0:	bf98      	it	ls
   d88e2:	250a      	movls	r5, #10
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d88e4:	4682      	mov	sl, r0
  *str = '\0';
   d88e6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d88ea:	4610      	mov	r0, r2
  if (base < 2) base = 10;
   d88ec:	f10d 0b44 	add.w	fp, sp, #68	; 0x44

  do {
    decltype(n) m = n;
    n /= base;
   d88f0:	fa5f f885 	uxtb.w	r8, r5
   d88f4:	f04f 0900 	mov.w	r9, #0
   d88f8:	4642      	mov	r2, r8
   d88fa:	464b      	mov	r3, r9
   d88fc:	4606      	mov	r6, r0
   d88fe:	460f      	mov	r7, r1
   d8900:	f004 fbde 	bl	dd0c0 <__aeabi_uldivmod>
    char c = m - base * n;
   d8904:	fb05 6410 	mls	r4, r5, r0, r6
   d8908:	f004 04ff 	and.w	r4, r4, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d890c:	2c09      	cmp	r4, #9
   d890e:	bf94      	ite	ls
   d8910:	3430      	addls	r4, #48	; 0x30
   d8912:	3437      	addhi	r4, #55	; 0x37
  } while(n);
   d8914:	454f      	cmp	r7, r9
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8916:	b2e4      	uxtb	r4, r4
  } while(n);
   d8918:	bf08      	it	eq
   d891a:	4546      	cmpeq	r6, r8
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d891c:	f80b 4d01 	strb.w	r4, [fp, #-1]!
  } while(n);
   d8920:	d2ea      	bcs.n	d88f8 <_ZN5Print11printNumberEyh+0x2a>

  return write(str);
   d8922:	4659      	mov	r1, fp
   d8924:	4650      	mov	r0, sl
   d8926:	f7ff ff7f 	bl	d8828 <_ZN5Print5writeEPKc>
}
   d892a:	b013      	add	sp, #76	; 0x4c
   d892c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8930 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
   d8930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8934:	ec55 4b10 	vmov	r4, r5, d0
   d8938:	4606      	mov	r6, r0
   d893a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d893c:	ee10 2a10 	vmov	r2, s0
   d8940:	ee10 0a10 	vmov	r0, s0
   d8944:	462b      	mov	r3, r5
   d8946:	4629      	mov	r1, r5
   d8948:	f004 f9ae 	bl	dcca8 <__aeabi_dcmpun>
   d894c:	b140      	cbz	r0, d8960 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d894e:	4953      	ldr	r1, [pc, #332]	; (d8a9c <_ZN5Print10printFloatEdh+0x16c>)
   d8950:	4630      	mov	r0, r6
   d8952:	f7ff ff69 	bl	d8828 <_ZN5Print5writeEPKc>
   d8956:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d8958:	4650      	mov	r0, sl
   d895a:	b003      	add	sp, #12
   d895c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d8960:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d8964:	4b4e      	ldr	r3, [pc, #312]	; (d8aa0 <_ZN5Print10printFloatEdh+0x170>)
   d8966:	f04f 32ff 	mov.w	r2, #4294967295
   d896a:	4620      	mov	r0, r4
   d896c:	4649      	mov	r1, r9
   d896e:	f004 f99b 	bl	dcca8 <__aeabi_dcmpun>
   d8972:	b948      	cbnz	r0, d8988 <_ZN5Print10printFloatEdh+0x58>
   d8974:	4b4a      	ldr	r3, [pc, #296]	; (d8aa0 <_ZN5Print10printFloatEdh+0x170>)
   d8976:	f04f 32ff 	mov.w	r2, #4294967295
   d897a:	4620      	mov	r0, r4
   d897c:	4649      	mov	r1, r9
   d897e:	f004 f975 	bl	dcc6c <__aeabi_dcmple>
   d8982:	b908      	cbnz	r0, d8988 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d8984:	4947      	ldr	r1, [pc, #284]	; (d8aa4 <_ZN5Print10printFloatEdh+0x174>)
   d8986:	e7e3      	b.n	d8950 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d8988:	4b47      	ldr	r3, [pc, #284]	; (d8aa8 <_ZN5Print10printFloatEdh+0x178>)
   d898a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d898e:	4620      	mov	r0, r4
   d8990:	4629      	mov	r1, r5
   d8992:	f004 f97f 	bl	dcc94 <__aeabi_dcmpgt>
   d8996:	b108      	cbz	r0, d899c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d8998:	4944      	ldr	r1, [pc, #272]	; (d8aac <_ZN5Print10printFloatEdh+0x17c>)
   d899a:	e7d9      	b.n	d8950 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d899c:	4b44      	ldr	r3, [pc, #272]	; (d8ab0 <_ZN5Print10printFloatEdh+0x180>)
   d899e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d89a2:	4620      	mov	r0, r4
   d89a4:	4629      	mov	r1, r5
   d89a6:	f004 f957 	bl	dcc58 <__aeabi_dcmplt>
   d89aa:	2800      	cmp	r0, #0
   d89ac:	d1f4      	bne.n	d8998 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d89ae:	2200      	movs	r2, #0
   d89b0:	2300      	movs	r3, #0
   d89b2:	4620      	mov	r0, r4
   d89b4:	4629      	mov	r1, r5
   d89b6:	f004 f94f 	bl	dcc58 <__aeabi_dcmplt>
   d89ba:	b1d0      	cbz	r0, d89f2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d89bc:	212d      	movs	r1, #45	; 0x2d
   d89be:	4630      	mov	r0, r6
   d89c0:	f7ff ff48 	bl	d8854 <_ZN5Print5printEc>
     number = -number;
   d89c4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d89c8:	4682      	mov	sl, r0
     number = -number;
   d89ca:	461d      	mov	r5, r3
  double rounding = 0.5;
   d89cc:	4939      	ldr	r1, [pc, #228]	; (d8ab4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d89ce:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d8abc <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d89d2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d89d6:	2000      	movs	r0, #0
    rounding /= 10.0;
   d89d8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d89dc:	fa5f f38b 	uxtb.w	r3, fp
   d89e0:	429f      	cmp	r7, r3
   d89e2:	d908      	bls.n	d89f6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d89e4:	4642      	mov	r2, r8
   d89e6:	464b      	mov	r3, r9
   d89e8:	f003 ffee 	bl	dc9c8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d89ec:	f10b 0b01 	add.w	fp, fp, #1
   d89f0:	e7f4      	b.n	d89dc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d89f2:	4682      	mov	sl, r0
   d89f4:	e7ea      	b.n	d89cc <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d89f6:	4622      	mov	r2, r4
   d89f8:	462b      	mov	r3, r5
   d89fa:	f003 fd05 	bl	dc408 <__adddf3>
   d89fe:	460d      	mov	r5, r1
   d8a00:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d8a02:	f004 f98f 	bl	dcd24 <__aeabi_d2uiz>
   d8a06:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d8a08:	f003 fe3a 	bl	dc680 <__aeabi_ui2d>
   d8a0c:	4602      	mov	r2, r0
   d8a0e:	460b      	mov	r3, r1
   d8a10:	4620      	mov	r0, r4
   d8a12:	4629      	mov	r1, r5
   d8a14:	f003 fcf6 	bl	dc404 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8a18:	220a      	movs	r2, #10
   d8a1a:	4604      	mov	r4, r0
   d8a1c:	460d      	mov	r5, r1
   d8a1e:	4630      	mov	r0, r6
   d8a20:	4641      	mov	r1, r8
   d8a22:	f7ff ff36 	bl	d8892 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d8a26:	4482      	add	sl, r0
  if (digits > 0) {
   d8a28:	b127      	cbz	r7, d8a34 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d8a2a:	4923      	ldr	r1, [pc, #140]	; (d8ab8 <_ZN5Print10printFloatEdh+0x188>)
   d8a2c:	4630      	mov	r0, r6
   d8a2e:	f7ff fefb 	bl	d8828 <_ZN5Print5writeEPKc>
    n += print(".");
   d8a32:	4482      	add	sl, r0
    remainder *= 10.0;
   d8a34:	f8df 9084 	ldr.w	r9, [pc, #132]	; d8abc <_ZN5Print10printFloatEdh+0x18c>
   d8a38:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d8a3c:	3f01      	subs	r7, #1
   d8a3e:	b2ff      	uxtb	r7, r7
   d8a40:	2fff      	cmp	r7, #255	; 0xff
   d8a42:	d089      	beq.n	d8958 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d8a44:	4642      	mov	r2, r8
   d8a46:	464b      	mov	r3, r9
   d8a48:	4620      	mov	r0, r4
   d8a4a:	4629      	mov	r1, r5
   d8a4c:	f003 fe92 	bl	dc774 <__aeabi_dmul>
   d8a50:	4604      	mov	r4, r0
   d8a52:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d8a54:	f004 f93e 	bl	dccd4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d8a58:	f1b0 0b00 	subs.w	fp, r0, #0
   d8a5c:	da1a      	bge.n	d8a94 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d8a5e:	212d      	movs	r1, #45	; 0x2d
   d8a60:	4630      	mov	r0, r6
   d8a62:	f7ff fef7 	bl	d8854 <_ZN5Print5printEc>
            val = -n;
   d8a66:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d8a6a:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d8a6c:	220a      	movs	r2, #10
   d8a6e:	4630      	mov	r0, r6
   d8a70:	9301      	str	r3, [sp, #4]
   d8a72:	f7ff ff0e 	bl	d8892 <_ZN5Print11printNumberEmh>
   d8a76:	9b01      	ldr	r3, [sp, #4]
   d8a78:	4418      	add	r0, r3
    n += print(toPrint);
   d8a7a:	4482      	add	sl, r0
    remainder -= toPrint;
   d8a7c:	4658      	mov	r0, fp
   d8a7e:	f003 fe0f 	bl	dc6a0 <__aeabi_i2d>
   d8a82:	4602      	mov	r2, r0
   d8a84:	460b      	mov	r3, r1
   d8a86:	4620      	mov	r0, r4
   d8a88:	4629      	mov	r1, r5
   d8a8a:	f003 fcbb 	bl	dc404 <__aeabi_dsub>
   d8a8e:	4604      	mov	r4, r0
   d8a90:	460d      	mov	r5, r1
  while (digits-- > 0)
   d8a92:	e7d3      	b.n	d8a3c <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d8a94:	4659      	mov	r1, fp
        size_t t = 0;
   d8a96:	2300      	movs	r3, #0
   d8a98:	e7e8      	b.n	d8a6c <_ZN5Print10printFloatEdh+0x13c>
   d8a9a:	bf00      	nop
   d8a9c:	000de5c8 	.word	0x000de5c8
   d8aa0:	7fefffff 	.word	0x7fefffff
   d8aa4:	000de5cc 	.word	0x000de5cc
   d8aa8:	41efffff 	.word	0x41efffff
   d8aac:	000de5d0 	.word	0x000de5d0
   d8ab0:	c1efffff 	.word	0xc1efffff
   d8ab4:	3fe00000 	.word	0x3fe00000
   d8ab8:	000ddba8 	.word	0x000ddba8
   d8abc:	40240000 	.word	0x40240000

000d8ac0 <_ZN5Print5printEfi>:
{
   d8ac0:	b538      	push	{r3, r4, r5, lr}
   d8ac2:	4604      	mov	r4, r0
   d8ac4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d8ac8:	b2cd      	uxtb	r5, r1
   d8aca:	f003 fdfb 	bl	dc6c4 <__aeabi_f2d>
   d8ace:	ec41 0b10 	vmov	d0, r0, r1
   d8ad2:	4629      	mov	r1, r5
   d8ad4:	4620      	mov	r0, r4
}
   d8ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d8ada:	f7ff bf29 	b.w	d8930 <_ZN5Print10printFloatEdh>

000d8ade <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   d8ade:	b2c9      	uxtb	r1, r1
   d8ae0:	f7ff bf26 	b.w	d8930 <_ZN5Print10printFloatEdh>

000d8ae4 <_ZN5Print7printlnEdi>:
{
   d8ae4:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d8ae6:	b2c9      	uxtb	r1, r1
{
   d8ae8:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d8aea:	f7ff ff21 	bl	d8930 <_ZN5Print10printFloatEdh>
   d8aee:	4604      	mov	r4, r0
  n += println();
   d8af0:	4628      	mov	r0, r5
   d8af2:	f7ff feb6 	bl	d8862 <_ZN5Print7printlnEv>
}
   d8af6:	4420      	add	r0, r4
   d8af8:	bd38      	pop	{r3, r4, r5, pc}

000d8afa <_ZN5Print7printlnEfi>:
{
   d8afa:	b538      	push	{r3, r4, r5, lr}
   d8afc:	4604      	mov	r4, r0
   d8afe:	ee10 0a10 	vmov	r0, s0
   d8b02:	460d      	mov	r5, r1
    return println((double)num, digits);
   d8b04:	f003 fdde 	bl	dc6c4 <__aeabi_f2d>
   d8b08:	ec41 0b10 	vmov	d0, r0, r1
   d8b0c:	4629      	mov	r1, r5
   d8b0e:	4620      	mov	r0, r4
}
   d8b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d8b14:	f7ff bfe6 	b.w	d8ae4 <_ZN5Print7printlnEdi>

000d8b18 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d8b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8b1c:	b086      	sub	sp, #24
   d8b1e:	af00      	add	r7, sp, #0
   d8b20:	4605      	mov	r5, r0
   d8b22:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d8b24:	1d38      	adds	r0, r7, #4
   d8b26:	2114      	movs	r1, #20
{
   d8b28:	4614      	mov	r4, r2
    va_copy(args2, args);
   d8b2a:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d8b2c:	f7ff fbf6 	bl	d831c <vsnprintf>

    if (n<bufsize)
   d8b30:	2813      	cmp	r0, #19
   d8b32:	d80e      	bhi.n	d8b52 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d8b34:	1d39      	adds	r1, r7, #4
   d8b36:	4628      	mov	r0, r5
   d8b38:	f7ff fe76 	bl	d8828 <_ZN5Print5writeEPKc>
   d8b3c:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d8b3e:	b11e      	cbz	r6, d8b48 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d8b40:	4628      	mov	r0, r5
   d8b42:	f7ff fe8e 	bl	d8862 <_ZN5Print7printlnEv>
   d8b46:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d8b48:	4620      	mov	r0, r4
   d8b4a:	3718      	adds	r7, #24
   d8b4c:	46bd      	mov	sp, r7
   d8b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d8b52:	f100 0308 	add.w	r3, r0, #8
   d8b56:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d8b5a:	46e8      	mov	r8, sp
        char bigger[n+1];
   d8b5c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d8b60:	4622      	mov	r2, r4
   d8b62:	1c41      	adds	r1, r0, #1
   d8b64:	683b      	ldr	r3, [r7, #0]
   d8b66:	4668      	mov	r0, sp
   d8b68:	f7ff fbd8 	bl	d831c <vsnprintf>
  return write(str);
   d8b6c:	4669      	mov	r1, sp
   d8b6e:	4628      	mov	r0, r5
   d8b70:	f7ff fe5a 	bl	d8828 <_ZN5Print5writeEPKc>
   d8b74:	4604      	mov	r4, r0
   d8b76:	46c5      	mov	sp, r8
   d8b78:	e7e1      	b.n	d8b3e <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000d8b7c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8b7c:	4b01      	ldr	r3, [pc, #4]	; (d8b84 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8b7e:	4a02      	ldr	r2, [pc, #8]	; (d8b88 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8b80:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8b82:	4770      	bx	lr
   d8b84:	2003e5a4 	.word	0x2003e5a4
   d8b88:	000de5d4 	.word	0x000de5d4

000d8b8c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d8b8c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8b8e:	2000      	movs	r0, #0
   d8b90:	f7ff fb9c 	bl	d82cc <spark_sync_time_pending>
   d8b94:	b128      	cbz	r0, d8ba2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8b96:	f7ff fb89 	bl	d82ac <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8b9a:	f080 0001 	eor.w	r0, r0, #1
   d8b9e:	b2c0      	uxtb	r0, r0
    }
   d8ba0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8ba2:	2001      	movs	r0, #1
   d8ba4:	e7fc      	b.n	d8ba0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d8ba6 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8ba6:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d8ba8:	2000      	movs	r0, #0
   d8baa:	f7ff f973 	bl	d7e94 <hal_rtc_time_is_valid>
    if (rtcstate)
   d8bae:	4604      	mov	r4, r0
   d8bb0:	b9a0      	cbnz	r0, d8bdc <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8bb2:	f7ff facf 	bl	d8154 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8bb6:	2801      	cmp	r0, #1
   d8bb8:	d110      	bne.n	d8bdc <_ZN9TimeClass7isValidEv+0x36>
   d8bba:	4620      	mov	r0, r4
   d8bbc:	f7ff faf2 	bl	d81a4 <system_thread_get_state>
   d8bc0:	b960      	cbnz	r0, d8bdc <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8bc2:	f7ff ffe3 	bl	d8b8c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8bc6:	b910      	cbnz	r0, d8bce <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d8bc8:	f7ff fb68 	bl	d829c <spark_process>
        while (_while() && !_condition()) {
   d8bcc:	e7f9      	b.n	d8bc2 <_ZN9TimeClass7isValidEv+0x1c>
   d8bce:	f7ff ffdd 	bl	d8b8c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d8bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d8bd6:	2000      	movs	r0, #0
   d8bd8:	f7ff b95c 	b.w	d7e94 <hal_rtc_time_is_valid>
}
   d8bdc:	4620      	mov	r0, r4
   d8bde:	bd10      	pop	{r4, pc}

000d8be0 <_ZN9TimeClass3nowEv>:
{
   d8be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d8be2:	f7ff ffe0 	bl	d8ba6 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d8be6:	2210      	movs	r2, #16
   d8be8:	2100      	movs	r1, #0
   d8bea:	4668      	mov	r0, sp
   d8bec:	f004 fc16 	bl	dd41c <memset>
    hal_rtc_get_time(&tv, nullptr);
   d8bf0:	2100      	movs	r1, #0
   d8bf2:	4668      	mov	r0, sp
   d8bf4:	f7ff f956 	bl	d7ea4 <hal_rtc_get_time>
}
   d8bf8:	9800      	ldr	r0, [sp, #0]
   d8bfa:	b005      	add	sp, #20
   d8bfc:	f85d fb04 	ldr.w	pc, [sp], #4

000d8c00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8c00:	4b02      	ldr	r3, [pc, #8]	; (d8c0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8c02:	681a      	ldr	r2, [r3, #0]
   d8c04:	4b02      	ldr	r3, [pc, #8]	; (d8c10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8c06:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d8c08:	4770      	bx	lr
   d8c0a:	bf00      	nop
   d8c0c:	2003e3d4 	.word	0x2003e3d4
   d8c10:	2003e5a8 	.word	0x2003e5a8

000d8c14 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d8c14:	428a      	cmp	r2, r1
{
   d8c16:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d8c18:	d007      	beq.n	d8c2a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d8c1a:	9c02      	ldr	r4, [sp, #8]
   d8c1c:	1a40      	subs	r0, r0, r1
   d8c1e:	1ae4      	subs	r4, r4, r3
   d8c20:	4360      	muls	r0, r4
   d8c22:	1a52      	subs	r2, r2, r1
   d8c24:	fb90 f0f2 	sdiv	r0, r0, r2
   d8c28:	4418      	add	r0, r3
}
   d8c2a:	bd10      	pop	{r4, pc}

000d8c2c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8c2c:	2100      	movs	r1, #0
   d8c2e:	f7ff baa1 	b.w	d8174 <system_delay_ms>

000d8c32 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d8c32:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d8c34:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d8c36:	4604      	mov	r4, r0
      if (_M_manager)
   d8c38:	b113      	cbz	r3, d8c40 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8c3a:	2203      	movs	r2, #3
   d8c3c:	4601      	mov	r1, r0
   d8c3e:	4798      	blx	r3
    }
   d8c40:	4620      	mov	r0, r4
   d8c42:	bd10      	pop	{r4, pc}

000d8c44 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d8c44:	b513      	push	{r0, r1, r4, lr}
   d8c46:	460b      	mov	r3, r1
   d8c48:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8c4a:	e9d0 0100 	ldrd	r0, r1, [r0]
   d8c4e:	466c      	mov	r4, sp
   d8c50:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8c54:	e893 0003 	ldmia.w	r3, {r0, r1}
   d8c58:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8c5c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d8c60:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d8c64:	b002      	add	sp, #8
   d8c66:	bd10      	pop	{r4, pc}

000d8c68 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d8c68:	4b01      	ldr	r3, [pc, #4]	; (d8c70 <_GLOBAL__sub_I_RGB+0x8>)
   d8c6a:	2200      	movs	r2, #0
   d8c6c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d8c6e:	4770      	bx	lr
   d8c70:	2003e5ac 	.word	0x2003e5ac

000d8c74 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8c74:	4b01      	ldr	r3, [pc, #4]	; (d8c7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d8c76:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8c78:	4770      	bx	lr
   d8c7a:	bf00      	nop
   d8c7c:	2003e3dc 	.word	0x2003e3dc

000d8c80 <serialEventRun>:
{
   d8c80:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8c82:	4b0b      	ldr	r3, [pc, #44]	; (d8cb0 <serialEventRun+0x30>)
   d8c84:	b143      	cbz	r3, d8c98 <serialEventRun+0x18>
   d8c86:	f000 fc03 	bl	d9490 <_Z16_fetch_usbserialv>
   d8c8a:	6803      	ldr	r3, [r0, #0]
   d8c8c:	691b      	ldr	r3, [r3, #16]
   d8c8e:	4798      	blx	r3
   d8c90:	2800      	cmp	r0, #0
   d8c92:	dd01      	ble.n	d8c98 <serialEventRun+0x18>
        serialEvent();
   d8c94:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8c98:	4b06      	ldr	r3, [pc, #24]	; (d8cb4 <serialEventRun+0x34>)
   d8c9a:	b143      	cbz	r3, d8cae <serialEventRun+0x2e>
   d8c9c:	f000 fcea 	bl	d9674 <_Z22__fetch_global_Serial1v>
   d8ca0:	6803      	ldr	r3, [r0, #0]
   d8ca2:	691b      	ldr	r3, [r3, #16]
   d8ca4:	4798      	blx	r3
   d8ca6:	2800      	cmp	r0, #0
   d8ca8:	dd01      	ble.n	d8cae <serialEventRun+0x2e>
        serialEvent1();
   d8caa:	f3af 8000 	nop.w
}
   d8cae:	bd08      	pop	{r3, pc}
	...

000d8cb8 <_post_loop>:
{
   d8cb8:	b508      	push	{r3, lr}
	serialEventRun();
   d8cba:	f7ff ffe1 	bl	d8c80 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8cbe:	f7ff f8c9 	bl	d7e54 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8cc2:	4b01      	ldr	r3, [pc, #4]	; (d8cc8 <_post_loop+0x10>)
   d8cc4:	6018      	str	r0, [r3, #0]
}
   d8cc6:	bd08      	pop	{r3, pc}
   d8cc8:	2003e734 	.word	0x2003e734

000d8ccc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8ccc:	4805      	ldr	r0, [pc, #20]	; (d8ce4 <_Z33system_initialize_user_backup_ramv+0x18>)
   d8cce:	4a06      	ldr	r2, [pc, #24]	; (d8ce8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d8cd0:	4906      	ldr	r1, [pc, #24]	; (d8cec <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d8cd2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8cd4:	1a12      	subs	r2, r2, r0
   d8cd6:	f004 fb93 	bl	dd400 <memcpy>
    __backup_sram_signature = signature;
   d8cda:	4b05      	ldr	r3, [pc, #20]	; (d8cf0 <_Z33system_initialize_user_backup_ramv+0x24>)
   d8cdc:	4a05      	ldr	r2, [pc, #20]	; (d8cf4 <_Z33system_initialize_user_backup_ramv+0x28>)
   d8cde:	601a      	str	r2, [r3, #0]
}
   d8ce0:	bd08      	pop	{r3, pc}
   d8ce2:	bf00      	nop
   d8ce4:	2003f400 	.word	0x2003f400
   d8ce8:	2003f404 	.word	0x2003f404
   d8cec:	000debf8 	.word	0x000debf8
   d8cf0:	2003f400 	.word	0x2003f400
   d8cf4:	9a271c1e 	.word	0x9a271c1e

000d8cf8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8cf8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8cfa:	2300      	movs	r3, #0
   d8cfc:	9300      	str	r3, [sp, #0]
   d8cfe:	461a      	mov	r2, r3
   d8d00:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8d04:	f7ff fa60 	bl	d81c8 <system_ctrl_set_result>
}
   d8d08:	b003      	add	sp, #12
   d8d0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8d10 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8d10:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8d12:	8843      	ldrh	r3, [r0, #2]
   d8d14:	2b0a      	cmp	r3, #10
   d8d16:	d008      	beq.n	d8d2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8d18:	2b50      	cmp	r3, #80	; 0x50
   d8d1a:	d10b      	bne.n	d8d34 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8d1c:	4b09      	ldr	r3, [pc, #36]	; (d8d44 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8d1e:	681b      	ldr	r3, [r3, #0]
   d8d20:	b14b      	cbz	r3, d8d36 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d8d22:	b003      	add	sp, #12
   d8d24:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8d28:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d8d2a:	f7ff ffe5 	bl	d8cf8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d8d2e:	b003      	add	sp, #12
   d8d30:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8d34:	2300      	movs	r3, #0
   d8d36:	9300      	str	r3, [sp, #0]
   d8d38:	461a      	mov	r2, r3
   d8d3a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8d3e:	f7ff fa43 	bl	d81c8 <system_ctrl_set_result>
}
   d8d42:	e7f4      	b.n	d8d2e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8d44:	2003e5c0 	.word	0x2003e5c0

000d8d48 <module_user_init_hook>:
{
   d8d48:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8d4a:	4812      	ldr	r0, [pc, #72]	; (d8d94 <module_user_init_hook+0x4c>)
   d8d4c:	2100      	movs	r1, #0
   d8d4e:	f7ff fb05 	bl	d835c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d8d52:	4b11      	ldr	r3, [pc, #68]	; (d8d98 <module_user_init_hook+0x50>)
   d8d54:	681a      	ldr	r2, [r3, #0]
   d8d56:	4b11      	ldr	r3, [pc, #68]	; (d8d9c <module_user_init_hook+0x54>)
   d8d58:	429a      	cmp	r2, r3
   d8d5a:	4b11      	ldr	r3, [pc, #68]	; (d8da0 <module_user_init_hook+0x58>)
   d8d5c:	bf0c      	ite	eq
   d8d5e:	2201      	moveq	r2, #1
   d8d60:	2200      	movne	r2, #0
   d8d62:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8d64:	d001      	beq.n	d8d6a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d8d66:	f7ff ffb1 	bl	d8ccc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8d6a:	f7ff f863 	bl	d7e34 <HAL_RNG_GetRandomNumber>
   d8d6e:	4604      	mov	r4, r0
    srand(seed);
   d8d70:	f004 fb5c 	bl	dd42c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8d74:	4b0b      	ldr	r3, [pc, #44]	; (d8da4 <module_user_init_hook+0x5c>)
   d8d76:	b113      	cbz	r3, d8d7e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d8d78:	4620      	mov	r0, r4
   d8d7a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8d7e:	2100      	movs	r1, #0
   d8d80:	4808      	ldr	r0, [pc, #32]	; (d8da4 <module_user_init_hook+0x5c>)
   d8d82:	f7ff faab 	bl	d82dc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8d8a:	4807      	ldr	r0, [pc, #28]	; (d8da8 <module_user_init_hook+0x60>)
   d8d8c:	2100      	movs	r1, #0
   d8d8e:	f7ff ba11 	b.w	d81b4 <system_ctrl_set_app_request_handler>
   d8d92:	bf00      	nop
   d8d94:	000d8c75 	.word	0x000d8c75
   d8d98:	2003f400 	.word	0x2003f400
   d8d9c:	9a271c1e 	.word	0x9a271c1e
   d8da0:	2003e5bc 	.word	0x2003e5bc
   d8da4:	00000000 	.word	0x00000000
   d8da8:	000d8d11 	.word	0x000d8d11

000d8dac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8dac:	4770      	bx	lr

000d8dae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8dae:	2000      	movs	r0, #0
   d8db0:	4770      	bx	lr

000d8db2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8db2:	b510      	push	{r4, lr}
   d8db4:	2110      	movs	r1, #16
   d8db6:	4604      	mov	r4, r0
   d8db8:	f000 feaa 	bl	d9b10 <_ZdlPvj>
   d8dbc:	4620      	mov	r0, r4
   d8dbe:	bd10      	pop	{r4, pc}

000d8dc0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8dc0:	b508      	push	{r3, lr}
      { delete this; }
   d8dc2:	f7ff fff6 	bl	d8db2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8dc6:	bd08      	pop	{r3, pc}

000d8dc8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8dc8:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8dca:	2200      	movs	r2, #0
   d8dcc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8dd0:	6002      	str	r2, [r0, #0]
   d8dd2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8dd4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8dd6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8dd8:	680c      	ldr	r4, [r1, #0]
   d8dda:	8085      	strh	r5, [r0, #4]
   d8ddc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8dde:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8de0:	bd30      	pop	{r4, r5, pc}

000d8de2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8de2:	b510      	push	{r4, lr}
   d8de4:	4604      	mov	r4, r0
    free((void*)msg_);
   d8de6:	6800      	ldr	r0, [r0, #0]
   d8de8:	f7ff fa88 	bl	d82fc <free>
}
   d8dec:	4620      	mov	r0, r4
   d8dee:	bd10      	pop	{r4, pc}

000d8df0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8df0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8df2:	68c4      	ldr	r4, [r0, #12]
   d8df4:	b1f4      	cbz	r4, d8e34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d8df6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8df8:	2b02      	cmp	r3, #2
   d8dfa:	d103      	bne.n	d8e04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8dfc:	f104 000c 	add.w	r0, r4, #12
   d8e00:	f7ff ffef 	bl	d8de2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8e04:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8e06:	b135      	cbz	r5, d8e16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8e08:	4628      	mov	r0, r5
   d8e0a:	f7ff ff12 	bl	d8c32 <_ZNSt14_Function_baseD1Ev>
   d8e0e:	2110      	movs	r1, #16
   d8e10:	4628      	mov	r0, r5
   d8e12:	f000 fe7d 	bl	d9b10 <_ZdlPvj>
   d8e16:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8e18:	b135      	cbz	r5, d8e28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8e1a:	4628      	mov	r0, r5
   d8e1c:	f7ff ff09 	bl	d8c32 <_ZNSt14_Function_baseD1Ev>
   d8e20:	2110      	movs	r1, #16
   d8e22:	4628      	mov	r0, r5
   d8e24:	f000 fe74 	bl	d9b10 <_ZdlPvj>
   d8e28:	4620      	mov	r0, r4
   d8e2a:	2114      	movs	r1, #20
   d8e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8e30:	f000 be6e 	b.w	d9b10 <_ZdlPvj>
   d8e34:	bd38      	pop	{r3, r4, r5, pc}

000d8e36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8e36:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8e38:	460e      	mov	r6, r1
   d8e3a:	4604      	mov	r4, r0
   d8e3c:	f856 3b04 	ldr.w	r3, [r6], #4
   d8e40:	9300      	str	r3, [sp, #0]
   d8e42:	460d      	mov	r5, r1
   d8e44:	a801      	add	r0, sp, #4
   d8e46:	4631      	mov	r1, r6
   d8e48:	f7ff fcbd 	bl	d87c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8e4c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8e4e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8e50:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8e52:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8e54:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8e56:	2300      	movs	r3, #0
   d8e58:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8e5a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8e5c:	f7ff fcba 	bl	d87d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8e60:	4630      	mov	r0, r6
   d8e62:	f7ff fcb7 	bl	d87d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8e66:	4628      	mov	r0, r5
   d8e68:	2108      	movs	r1, #8
   d8e6a:	f000 fe51 	bl	d9b10 <_ZdlPvj>
        return p;
    }
   d8e6e:	4620      	mov	r0, r4
   d8e70:	b002      	add	sp, #8
   d8e72:	bd70      	pop	{r4, r5, r6, pc}

000d8e74 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8e74:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8e76:	b510      	push	{r4, lr}
      if (_M_empty())
   d8e78:	b90a      	cbnz	r2, d8e7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8e7a:	f000 fe4d 	bl	d9b18 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d8e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8e82:	68c3      	ldr	r3, [r0, #12]
   d8e84:	4718      	bx	r3

000d8e86 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8e86:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8e88:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8e8a:	f100 0110 	add.w	r1, r0, #16
   d8e8e:	f7ff fff1 	bl	d8e74 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8e92:	bd08      	pop	{r3, pc}

000d8e94 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8e94:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8e96:	b510      	push	{r4, lr}
      if (_M_empty())
   d8e98:	b90a      	cbnz	r2, d8e9e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8e9a:	f000 fe3d 	bl	d9b18 <_ZSt25__throw_bad_function_callv>
    }
   d8e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8ea2:	68c3      	ldr	r3, [r0, #12]
   d8ea4:	4718      	bx	r3

000d8ea6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8ea6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8ea8:	6800      	ldr	r0, [r0, #0]
   d8eaa:	f100 0110 	add.w	r1, r0, #16
   d8eae:	f7ff fff1 	bl	d8e94 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8eb2:	bd08      	pop	{r3, pc}

000d8eb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8eb4:	b538      	push	{r3, r4, r5, lr}
   d8eb6:	2300      	movs	r3, #0
   d8eb8:	4604      	mov	r4, r0
   d8eba:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8ebc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8ebe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8ec0:	f7fb f8e9 	bl	d4096 <_Znwj>
   d8ec4:	b128      	cbz	r0, d8ed2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8ec6:	2301      	movs	r3, #1
   d8ec8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8ecc:	4b02      	ldr	r3, [pc, #8]	; (d8ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8ece:	6003      	str	r3, [r0, #0]
   d8ed0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8ed2:	6020      	str	r0, [r4, #0]
	}
   d8ed4:	4620      	mov	r0, r4
   d8ed6:	bd38      	pop	{r3, r4, r5, pc}
   d8ed8:	000de5fc 	.word	0x000de5fc

000d8edc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8edc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8ede:	2300      	movs	r3, #0
   d8ee0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8ee2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8ee4:	4604      	mov	r4, r0
   d8ee6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8ee8:	b12b      	cbz	r3, d8ef6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8eea:	2202      	movs	r2, #2
   d8eec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8eee:	68eb      	ldr	r3, [r5, #12]
   d8ef0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8ef2:	68ab      	ldr	r3, [r5, #8]
   d8ef4:	60a3      	str	r3, [r4, #8]
    }
   d8ef6:	4620      	mov	r0, r4
   d8ef8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8efc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8efc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8efe:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8f00:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8f02:	4668      	mov	r0, sp
   d8f04:	f7ff ff60 	bl	d8dc8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8f08:	f04f 0302 	mov.w	r3, #2
   d8f0c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8f10:	2a00      	cmp	r2, #0
   d8f12:	d103      	bne.n	d8f1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8f14:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8f18:	2900      	cmp	r1, #0
   d8f1a:	d1f7      	bne.n	d8f0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8f1c:	d125      	bne.n	d8f6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d8f1e:	f104 050c 	add.w	r5, r4, #12
   d8f22:	4669      	mov	r1, sp
   d8f24:	4628      	mov	r0, r5
   d8f26:	f7ff ff4f 	bl	d8dc8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8f2a:	f3bf 8f5b 	dmb	ish
   d8f2e:	2301      	movs	r3, #1
   d8f30:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8f32:	2000      	movs	r0, #0
   d8f34:	f104 0308 	add.w	r3, r4, #8
   d8f38:	f3bf 8f5b 	dmb	ish
   d8f3c:	e853 6f00 	ldrex	r6, [r3]
   d8f40:	e843 0200 	strex	r2, r0, [r3]
   d8f44:	2a00      	cmp	r2, #0
   d8f46:	d1f9      	bne.n	d8f3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8f48:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8f4c:	b16e      	cbz	r6, d8f6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d8f4e:	f7ff f919 	bl	d8184 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8f52:	b178      	cbz	r0, d8f74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8f54:	4629      	mov	r1, r5
   d8f56:	4630      	mov	r0, r6
   d8f58:	f7ff ff8c 	bl	d8e74 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d8f5c:	4630      	mov	r0, r6
   d8f5e:	f7ff fe68 	bl	d8c32 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8f62:	2110      	movs	r1, #16
   d8f64:	4630      	mov	r0, r6
   d8f66:	f000 fdd3 	bl	d9b10 <_ZdlPvj>
        p_->setError(std::move(error));
   d8f6a:	4668      	mov	r0, sp
   d8f6c:	f7ff ff39 	bl	d8de2 <_ZN8particle5ErrorD1Ev>
    }
   d8f70:	b009      	add	sp, #36	; 0x24
   d8f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8f74:	4631      	mov	r1, r6
   d8f76:	a802      	add	r0, sp, #8
   d8f78:	f7ff ffb0 	bl	d8edc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8f7c:	68e0      	ldr	r0, [r4, #12]
   d8f7e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8f82:	b108      	cbz	r0, d8f88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d8f84:	f004 fa76 	bl	dd474 <strdup>
        type_(type) {
   d8f88:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8f8a:	2010      	movs	r0, #16
   d8f8c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8f90:	f7fb f881 	bl	d4096 <_Znwj>
   d8f94:	4605      	mov	r5, r0
   d8f96:	b1e8      	cbz	r0, d8fd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8f98:	2700      	movs	r7, #0
   d8f9a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8f9c:	2018      	movs	r0, #24
   d8f9e:	f7fb f87a 	bl	d4096 <_Znwj>
   d8fa2:	4604      	mov	r4, r0
   d8fa4:	b188      	cbz	r0, d8fca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8fa6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8fa8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8faa:	a802      	add	r0, sp, #8
   d8fac:	f7ff fe4a 	bl	d8c44 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8fb0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8fb2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8fb4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8fb6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8fb8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8fba:	a906      	add	r1, sp, #24
   d8fbc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8fbe:	60e3      	str	r3, [r4, #12]
   d8fc0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8fc4:	9205      	str	r2, [sp, #20]
   d8fc6:	f7ff feff 	bl	d8dc8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8fca:	4b08      	ldr	r3, [pc, #32]	; (d8fec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8fcc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8fce:	4b08      	ldr	r3, [pc, #32]	; (d8ff0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8fd0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8fd2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8fd4:	a806      	add	r0, sp, #24
   d8fd6:	f7ff ff04 	bl	d8de2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8fda:	a802      	add	r0, sp, #8
   d8fdc:	f7ff fe29 	bl	d8c32 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8fe0:	2200      	movs	r2, #0
   d8fe2:	4629      	mov	r1, r5
   d8fe4:	4803      	ldr	r0, [pc, #12]	; (d8ff4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8fe6:	f7ff f8d5 	bl	d8194 <application_thread_invoke>
   d8fea:	e7b7      	b.n	d8f5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8fec:	000d8e87 	.word	0x000d8e87
   d8ff0:	000d911d 	.word	0x000d911d
   d8ff4:	000d96c1 	.word	0x000d96c1

000d8ff8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8ffc:	b08a      	sub	sp, #40	; 0x28
   d8ffe:	4605      	mov	r5, r0
   d9000:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d9004:	460c      	mov	r4, r1
   d9006:	4617      	mov	r7, r2
   d9008:	4698      	mov	r8, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d900a:	f7ff f94f 	bl	d82ac <spark_cloud_flag_connected>
   d900e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d9010:	4682      	mov	sl, r0
   d9012:	bb38      	cbnz	r0, d9064 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d9014:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d9018:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d901a:	a905      	add	r1, sp, #20
   d901c:	4630      	mov	r0, r6
   d901e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d9022:	f7ff fed1 	bl	d8dc8 <_ZN8particle5ErrorC1EOS0_>
   d9026:	2014      	movs	r0, #20
   d9028:	f7fb f835 	bl	d4096 <_Znwj>
   d902c:	4604      	mov	r4, r0
   d902e:	b148      	cbz	r0, d9044 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d9030:	2302      	movs	r3, #2
   d9032:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9034:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d9036:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d903a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d903c:	4631      	mov	r1, r6
   d903e:	300c      	adds	r0, #12
   d9040:	f7ff fec2 	bl	d8dc8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d9044:	4628      	mov	r0, r5
	: __shared_count(__p)
   d9046:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d9048:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d904c:	f7ff ff32 	bl	d8eb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d9050:	4630      	mov	r0, r6
   d9052:	f7ff fec6 	bl	d8de2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d9056:	a805      	add	r0, sp, #20
   d9058:	f7ff fec3 	bl	d8de2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d905c:	4628      	mov	r0, r5
   d905e:	b00a      	add	sp, #40	; 0x28
   d9060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d9064:	230c      	movs	r3, #12
   d9066:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d906a:	2014      	movs	r0, #20
   d906c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d9070:	9307      	str	r3, [sp, #28]
   d9072:	f7fb f810 	bl	d4096 <_Znwj>
   d9076:	4601      	mov	r1, r0
   d9078:	b128      	cbz	r0, d9086 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d907a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d907e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9082:	f880 a001 	strb.w	sl, [r0, #1]
   d9086:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d9088:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d908a:	f7ff ff13 	bl	d8eb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d908e:	4b22      	ldr	r3, [pc, #136]	; (d9118 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d9090:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d9092:	2008      	movs	r0, #8
   d9094:	f7fa ffff 	bl	d4096 <_Znwj>
   d9098:	4682      	mov	sl, r0
   d909a:	b128      	cbz	r0, d90a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d909c:	9b03      	ldr	r3, [sp, #12]
   d909e:	f840 3b04 	str.w	r3, [r0], #4
   d90a2:	a904      	add	r1, sp, #16
   d90a4:	f7ff fb8f 	bl	d87c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d90a8:	9600      	str	r6, [sp, #0]
   d90aa:	fa5f f389 	uxtb.w	r3, r9
   d90ae:	4642      	mov	r2, r8
   d90b0:	4639      	mov	r1, r7
   d90b2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d90b4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d90b8:	f7ff f900 	bl	d82bc <spark_send_event>
   d90bc:	b9b8      	cbnz	r0, d90ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d90be:	9b03      	ldr	r3, [sp, #12]
   d90c0:	785b      	ldrb	r3, [r3, #1]
   d90c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d90c6:	b993      	cbnz	r3, d90ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d90c8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d90cc:	a905      	add	r1, sp, #20
   d90ce:	a803      	add	r0, sp, #12
   d90d0:	9205      	str	r2, [sp, #20]
   d90d2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d90d6:	f7ff ff11 	bl	d8efc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d90da:	a805      	add	r0, sp, #20
   d90dc:	f7ff fe81 	bl	d8de2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d90e0:	a805      	add	r0, sp, #20
   d90e2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d90e4:	f7ff fea7 	bl	d8e36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d90e8:	a806      	add	r0, sp, #24
   d90ea:	f7ff fb73 	bl	d87d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d90ee:	9b03      	ldr	r3, [sp, #12]
   d90f0:	9305      	str	r3, [sp, #20]
   d90f2:	a904      	add	r1, sp, #16
   d90f4:	a806      	add	r0, sp, #24
   d90f6:	f7ff fb66 	bl	d87c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d90fa:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d90fc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d90fe:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d9100:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d9102:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d9104:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d9106:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d9108:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d910a:	f7ff fb63 	bl	d87d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d910e:	a804      	add	r0, sp, #16
   d9110:	f7ff fb60 	bl	d87d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d9114:	e7a2      	b.n	d905c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d9116:	bf00      	nop
   d9118:	000d91e1 	.word	0x000d91e1

000d911c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d911c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d911e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9120:	4605      	mov	r5, r0
	  switch (__op)
   d9122:	d007      	beq.n	d9134 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d9124:	2a03      	cmp	r2, #3
   d9126:	d018      	beq.n	d915a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d9128:	2a01      	cmp	r2, #1
   d912a:	d101      	bne.n	d9130 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d912c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d912e:	6003      	str	r3, [r0, #0]
	}
   d9130:	2000      	movs	r0, #0
   d9132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d9134:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d9136:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d9138:	f7fa ffad 	bl	d4096 <_Znwj>
   d913c:	4604      	mov	r4, r0
   d913e:	b150      	cbz	r0, d9156 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9140:	4631      	mov	r1, r6
   d9142:	f7ff fecb 	bl	d8edc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d9146:	6930      	ldr	r0, [r6, #16]
   d9148:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d914c:	b108      	cbz	r0, d9152 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d914e:	f004 f991 	bl	dd474 <strdup>
        type_(type) {
   d9152:	6120      	str	r0, [r4, #16]
   d9154:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d9156:	602c      	str	r4, [r5, #0]
	}
   d9158:	e7ea      	b.n	d9130 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d915a:	6804      	ldr	r4, [r0, #0]
   d915c:	2c00      	cmp	r4, #0
   d915e:	d0e7      	beq.n	d9130 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d9160:	f104 0010 	add.w	r0, r4, #16
   d9164:	f7ff fe3d 	bl	d8de2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d9168:	4620      	mov	r0, r4
   d916a:	f7ff fd62 	bl	d8c32 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d916e:	2118      	movs	r1, #24
   d9170:	4620      	mov	r0, r4
   d9172:	f000 fccd 	bl	d9b10 <_ZdlPvj>
   d9176:	e7db      	b.n	d9130 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d9178 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d9178:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d917a:	2300      	movs	r3, #0
   d917c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d917e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d9180:	4604      	mov	r4, r0
   d9182:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d9184:	b12b      	cbz	r3, d9192 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d9186:	2202      	movs	r2, #2
   d9188:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d918a:	68eb      	ldr	r3, [r5, #12]
   d918c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d918e:	68ab      	ldr	r3, [r5, #8]
   d9190:	60a3      	str	r3, [r4, #8]
    }
   d9192:	4620      	mov	r0, r4
   d9194:	bd38      	pop	{r3, r4, r5, pc}

000d9196 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d9196:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d9198:	b570      	push	{r4, r5, r6, lr}
   d919a:	4604      	mov	r4, r0
	  switch (__op)
   d919c:	d007      	beq.n	d91ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d919e:	2a03      	cmp	r2, #3
   d91a0:	d012      	beq.n	d91c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d91a2:	2a01      	cmp	r2, #1
   d91a4:	d101      	bne.n	d91aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d91a6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d91a8:	6003      	str	r3, [r0, #0]
	}
   d91aa:	2000      	movs	r0, #0
   d91ac:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d91ae:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d91b0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d91b2:	f7fa ff70 	bl	d4096 <_Znwj>
   d91b6:	4605      	mov	r5, r0
   d91b8:	b120      	cbz	r0, d91c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d91ba:	4631      	mov	r1, r6
   d91bc:	f7ff ffdc 	bl	d9178 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d91c0:	7c33      	ldrb	r3, [r6, #16]
   d91c2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d91c4:	6025      	str	r5, [r4, #0]
	}
   d91c6:	e7f0      	b.n	d91aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d91c8:	6804      	ldr	r4, [r0, #0]
   d91ca:	2c00      	cmp	r4, #0
   d91cc:	d0ed      	beq.n	d91aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d91ce:	4620      	mov	r0, r4
   d91d0:	f7ff fd2f 	bl	d8c32 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d91d4:	2114      	movs	r1, #20
   d91d6:	4620      	mov	r0, r4
   d91d8:	f000 fc9a 	bl	d9b10 <_ZdlPvj>
   d91dc:	e7e5      	b.n	d91aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d91e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d91e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d91e2:	b089      	sub	sp, #36	; 0x24
   d91e4:	4604      	mov	r4, r0
   d91e6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d91e8:	a801      	add	r0, sp, #4
   d91ea:	4611      	mov	r1, r2
   d91ec:	f7ff fe23 	bl	d8e36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d91f0:	b1a4      	cbz	r4, d921c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d91f2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d91f4:	b11d      	cbz	r5, d91fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d91f6:	4628      	mov	r0, r5
   d91f8:	f004 f93c 	bl	dd474 <strdup>
   d91fc:	4605      	mov	r5, r0
   d91fe:	a801      	add	r0, sp, #4
   d9200:	a903      	add	r1, sp, #12
        type_(type) {
   d9202:	9503      	str	r5, [sp, #12]
   d9204:	f8ad 4010 	strh.w	r4, [sp, #16]
   d9208:	f7ff fe78 	bl	d8efc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d920c:	a803      	add	r0, sp, #12
   d920e:	f7ff fde8 	bl	d8de2 <_ZN8particle5ErrorD1Ev>
   d9212:	a802      	add	r0, sp, #8
   d9214:	f7ff fade 	bl	d87d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9218:	b009      	add	sp, #36	; 0x24
   d921a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d921c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d921e:	2301      	movs	r3, #1
   d9220:	e8d5 2f4f 	ldrexb	r2, [r5]
   d9224:	2a00      	cmp	r2, #0
   d9226:	d103      	bne.n	d9230 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d9228:	e8c5 3f41 	strexb	r1, r3, [r5]
   d922c:	2900      	cmp	r1, #0
   d922e:	d1f7      	bne.n	d9220 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d9230:	d1ef      	bne.n	d9212 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d9232:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d9234:	f3bf 8f5b 	dmb	ish
   d9238:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d923a:	1d2b      	adds	r3, r5, #4
   d923c:	f3bf 8f5b 	dmb	ish
   d9240:	e853 6f00 	ldrex	r6, [r3]
   d9244:	e843 4200 	strex	r2, r4, [r3]
   d9248:	2a00      	cmp	r2, #0
   d924a:	d1f9      	bne.n	d9240 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d924c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d9250:	2e00      	cmp	r6, #0
   d9252:	d0de      	beq.n	d9212 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d9254:	4620      	mov	r0, r4
   d9256:	f7fe ff95 	bl	d8184 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d925a:	4607      	mov	r7, r0
   d925c:	b160      	cbz	r0, d9278 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d925e:	f105 010c 	add.w	r1, r5, #12
   d9262:	4630      	mov	r0, r6
   d9264:	f7ff fe16 	bl	d8e94 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d9268:	4630      	mov	r0, r6
   d926a:	f7ff fce2 	bl	d8c32 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d926e:	2110      	movs	r1, #16
   d9270:	4630      	mov	r0, r6
   d9272:	f000 fc4d 	bl	d9b10 <_ZdlPvj>
   d9276:	e7cc      	b.n	d9212 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9278:	4631      	mov	r1, r6
   d927a:	a803      	add	r0, sp, #12
   d927c:	f7ff ff7c 	bl	d9178 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9280:	7b2b      	ldrb	r3, [r5, #12]
   d9282:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d9286:	2010      	movs	r0, #16
   d9288:	f7fa ff05 	bl	d4096 <_Znwj>
   d928c:	4605      	mov	r5, r0
   d928e:	b1d0      	cbz	r0, d92c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d9290:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9292:	2014      	movs	r0, #20
   d9294:	f7fa feff 	bl	d4096 <_Znwj>
   d9298:	4604      	mov	r4, r0
   d929a:	b178      	cbz	r0, d92bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d929c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d929e:	4601      	mov	r1, r0
   d92a0:	a803      	add	r0, sp, #12
   d92a2:	f7ff fccf 	bl	d8c44 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92a6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d92a8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d92aa:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92ac:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d92ae:	9205      	str	r2, [sp, #20]
   d92b0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d92b2:	60e3      	str	r3, [r4, #12]
   d92b4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d92b8:	9206      	str	r2, [sp, #24]
   d92ba:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d92bc:	4b06      	ldr	r3, [pc, #24]	; (d92d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d92be:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d92c0:	4b06      	ldr	r3, [pc, #24]	; (d92dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d92c2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d92c4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d92c6:	a803      	add	r0, sp, #12
   d92c8:	f7ff fcb3 	bl	d8c32 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d92cc:	2200      	movs	r2, #0
   d92ce:	4629      	mov	r1, r5
   d92d0:	4803      	ldr	r0, [pc, #12]	; (d92e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d92d2:	f7fe ff5f 	bl	d8194 <application_thread_invoke>
   d92d6:	e7c7      	b.n	d9268 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d92d8:	000d8ea7 	.word	0x000d8ea7
   d92dc:	000d9197 	.word	0x000d9197
   d92e0:	000d96c1 	.word	0x000d96c1

000d92e4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d92e4:	4770      	bx	lr

000d92e6 <_ZN9IPAddressD0Ev>:
   d92e6:	b510      	push	{r4, lr}
   d92e8:	2118      	movs	r1, #24
   d92ea:	4604      	mov	r4, r0
   d92ec:	f000 fc10 	bl	d9b10 <_ZdlPvj>
   d92f0:	4620      	mov	r0, r4
   d92f2:	bd10      	pop	{r4, pc}

000d92f4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d92f4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d92f6:	7d03      	ldrb	r3, [r0, #20]
   d92f8:	2b06      	cmp	r3, #6
{
   d92fa:	b08d      	sub	sp, #52	; 0x34
   d92fc:	460e      	mov	r6, r1
   d92fe:	f100 0704 	add.w	r7, r0, #4
   d9302:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d9306:	d012      	beq.n	d932e <_ZNK9IPAddress7printToER5Print+0x3a>
   d9308:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d930c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9310:	220a      	movs	r2, #10
   d9312:	4630      	mov	r0, r6
   d9314:	f7ff fabd 	bl	d8892 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9318:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d931a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d931c:	d019      	beq.n	d9352 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d931e:	2c00      	cmp	r4, #0
   d9320:	d0f4      	beq.n	d930c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d9322:	212e      	movs	r1, #46	; 0x2e
   d9324:	4630      	mov	r0, r6
   d9326:	f7ff fa95 	bl	d8854 <_ZN5Print5printEc>
   d932a:	4404      	add	r4, r0
   d932c:	e7ee      	b.n	d930c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d932e:	232f      	movs	r3, #47	; 0x2f
   d9330:	466a      	mov	r2, sp
   d9332:	4639      	mov	r1, r7
   d9334:	200a      	movs	r0, #10
		buf[0] = 0;
   d9336:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d933a:	f7fe fdcb 	bl	d7ed4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d933e:	4668      	mov	r0, sp
   d9340:	f004 f8b5 	bl	dd4ae <strlen>
   d9344:	6833      	ldr	r3, [r6, #0]
   d9346:	4602      	mov	r2, r0
   d9348:	68db      	ldr	r3, [r3, #12]
   d934a:	4669      	mov	r1, sp
   d934c:	4630      	mov	r0, r6
   d934e:	4798      	blx	r3
   d9350:	4604      	mov	r4, r0
    }
    return n;
}
   d9352:	4620      	mov	r0, r4
   d9354:	b00d      	add	sp, #52	; 0x34
   d9356:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9358 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d9358:	b510      	push	{r4, lr}
   d935a:	4b05      	ldr	r3, [pc, #20]	; (d9370 <_ZN9IPAddressC1Ev+0x18>)
   d935c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d935e:	2211      	movs	r2, #17
   d9360:	f840 3b04 	str.w	r3, [r0], #4
   d9364:	2100      	movs	r1, #0
   d9366:	f004 f859 	bl	dd41c <memset>
}
   d936a:	4620      	mov	r0, r4
   d936c:	bd10      	pop	{r4, pc}
   d936e:	bf00      	nop
   d9370:	000de618 	.word	0x000de618

000d9374 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9374:	4603      	mov	r3, r0
   d9376:	4a07      	ldr	r2, [pc, #28]	; (d9394 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9378:	b510      	push	{r4, lr}
   d937a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d937e:	f101 0210 	add.w	r2, r1, #16
   d9382:	f851 4b04 	ldr.w	r4, [r1], #4
   d9386:	f843 4b04 	str.w	r4, [r3], #4
   d938a:	4291      	cmp	r1, r2
   d938c:	d1f9      	bne.n	d9382 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d938e:	780a      	ldrb	r2, [r1, #0]
   d9390:	701a      	strb	r2, [r3, #0]
}
   d9392:	bd10      	pop	{r4, pc}
   d9394:	000de618 	.word	0x000de618

000d9398 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d9398:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d939a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d939e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d93a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d93a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d93aa:	2304      	movs	r3, #4
   d93ac:	6041      	str	r1, [r0, #4]
   d93ae:	7503      	strb	r3, [r0, #20]
}
   d93b0:	bd10      	pop	{r4, pc}

000d93b2 <_ZN9IPAddressaSEPKh>:
{
   d93b2:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d93b4:	78cb      	ldrb	r3, [r1, #3]
   d93b6:	9300      	str	r3, [sp, #0]
   d93b8:	788b      	ldrb	r3, [r1, #2]
   d93ba:	784a      	ldrb	r2, [r1, #1]
   d93bc:	7809      	ldrb	r1, [r1, #0]
   d93be:	f7ff ffeb 	bl	d9398 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d93c2:	b002      	add	sp, #8
   d93c4:	bd10      	pop	{r4, pc}

000d93c6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d93c6:	7441      	strb	r1, [r0, #17]
}
   d93c8:	4770      	bx	lr

000d93ca <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d93ca:	4770      	bx	lr

000d93cc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d93cc:	4770      	bx	lr

000d93ce <_ZN9USBSerial4readEv>:
{
   d93ce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d93d0:	2100      	movs	r1, #0
   d93d2:	7c00      	ldrb	r0, [r0, #16]
   d93d4:	f7fe fe96 	bl	d8104 <HAL_USB_USART_Receive_Data>
}
   d93d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d93dc:	bd08      	pop	{r3, pc}

000d93de <_ZN9USBSerial4peekEv>:
{
   d93de:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d93e0:	2101      	movs	r1, #1
   d93e2:	7c00      	ldrb	r0, [r0, #16]
   d93e4:	f7fe fe8e 	bl	d8104 <HAL_USB_USART_Receive_Data>
}
   d93e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d93ec:	bd08      	pop	{r3, pc}

000d93ee <_ZN9USBSerial17availableForWriteEv>:
{
   d93ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d93f0:	7c00      	ldrb	r0, [r0, #16]
   d93f2:	f7fe fe7f 	bl	d80f4 <HAL_USB_USART_Available_Data_For_Write>
}
   d93f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d93fa:	bd08      	pop	{r3, pc}

000d93fc <_ZN9USBSerial9availableEv>:
{
   d93fc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d93fe:	7c00      	ldrb	r0, [r0, #16]
   d9400:	f7fe fe70 	bl	d80e4 <HAL_USB_USART_Available_Data>
}
   d9404:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9408:	bd08      	pop	{r3, pc}

000d940a <_ZN9USBSerial5writeEh>:
{
   d940a:	b513      	push	{r0, r1, r4, lr}
   d940c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d940e:	7c00      	ldrb	r0, [r0, #16]
{
   d9410:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9412:	f7fe fe6f 	bl	d80f4 <HAL_USB_USART_Available_Data_For_Write>
   d9416:	2800      	cmp	r0, #0
   d9418:	9901      	ldr	r1, [sp, #4]
   d941a:	dc01      	bgt.n	d9420 <_ZN9USBSerial5writeEh+0x16>
   d941c:	7c60      	ldrb	r0, [r4, #17]
   d941e:	b120      	cbz	r0, d942a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9420:	7c20      	ldrb	r0, [r4, #16]
   d9422:	f7fe fe77 	bl	d8114 <HAL_USB_USART_Send_Data>
   d9426:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d942a:	b002      	add	sp, #8
   d942c:	bd10      	pop	{r4, pc}

000d942e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d942e:	7c00      	ldrb	r0, [r0, #16]
   d9430:	f7fe be78 	b.w	d8124 <HAL_USB_USART_Flush_Data>

000d9434 <_ZN9USBSerialD0Ev>:
   d9434:	b510      	push	{r4, lr}
   d9436:	2114      	movs	r1, #20
   d9438:	4604      	mov	r4, r0
   d943a:	f000 fb69 	bl	d9b10 <_ZdlPvj>
   d943e:	4620      	mov	r0, r4
   d9440:	bd10      	pop	{r4, pc}
	...

000d9444 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9444:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d944a:	4604      	mov	r4, r0
   d944c:	4608      	mov	r0, r1
   d944e:	2100      	movs	r1, #0
   d9450:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9454:	4b04      	ldr	r3, [pc, #16]	; (d9468 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9456:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d9458:	2301      	movs	r3, #1
  _serial = serial;
   d945a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d945c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d945e:	4611      	mov	r1, r2
   d9460:	f7fe fe30 	bl	d80c4 <HAL_USB_USART_Init>
}
   d9464:	4620      	mov	r0, r4
   d9466:	bd10      	pop	{r4, pc}
   d9468:	000de62c 	.word	0x000de62c

000d946c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d946c:	7c00      	ldrb	r0, [r0, #16]
   d946e:	2200      	movs	r2, #0
   d9470:	f7fe be30 	b.w	d80d4 <HAL_USB_USART_Begin>

000d9474 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   d9474:	7c00      	ldrb	r0, [r0, #16]
   d9476:	f7fe be5d 	b.w	d8134 <HAL_USB_USART_Is_Enabled>

000d947a <_ZN9USBSerialcvbEv>:
  return isEnabled();
   d947a:	f7ff bffb 	b.w	d9474 <_ZN9USBSerial9isEnabledEv>

000d947e <_Z19acquireSerialBufferv>:
{
   d947e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9480:	2214      	movs	r2, #20
{
   d9482:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9484:	2100      	movs	r1, #0
   d9486:	f003 ffc9 	bl	dd41c <memset>
}
   d948a:	4620      	mov	r0, r4
   d948c:	bd10      	pop	{r4, pc}
	...

000d9490 <_Z16_fetch_usbserialv>:
{
   d9490:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9492:	4c0f      	ldr	r4, [pc, #60]	; (d94d0 <_Z16_fetch_usbserialv+0x40>)
{
   d9494:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9496:	a803      	add	r0, sp, #12
   d9498:	f7ff fff1 	bl	d947e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d949c:	7821      	ldrb	r1, [r4, #0]
   d949e:	f3bf 8f5b 	dmb	ish
   d94a2:	f011 0101 	ands.w	r1, r1, #1
   d94a6:	d10f      	bne.n	d94c8 <_Z16_fetch_usbserialv+0x38>
   d94a8:	4620      	mov	r0, r4
   d94aa:	9101      	str	r1, [sp, #4]
   d94ac:	f7fa fe04 	bl	d40b8 <__cxa_guard_acquire>
   d94b0:	9901      	ldr	r1, [sp, #4]
   d94b2:	b148      	cbz	r0, d94c8 <_Z16_fetch_usbserialv+0x38>
   d94b4:	aa03      	add	r2, sp, #12
   d94b6:	4807      	ldr	r0, [pc, #28]	; (d94d4 <_Z16_fetch_usbserialv+0x44>)
   d94b8:	f7ff ffc4 	bl	d9444 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d94bc:	4620      	mov	r0, r4
   d94be:	f7fa fe00 	bl	d40c2 <__cxa_guard_release>
   d94c2:	4805      	ldr	r0, [pc, #20]	; (d94d8 <_Z16_fetch_usbserialv+0x48>)
   d94c4:	f003 ff96 	bl	dd3f4 <atexit>
	return _usbserial;
}
   d94c8:	4802      	ldr	r0, [pc, #8]	; (d94d4 <_Z16_fetch_usbserialv+0x44>)
   d94ca:	b008      	add	sp, #32
   d94cc:	bd10      	pop	{r4, pc}
   d94ce:	bf00      	nop
   d94d0:	2003e5c4 	.word	0x2003e5c4
   d94d4:	2003e5c8 	.word	0x2003e5c8
   d94d8:	000d93cb 	.word	0x000d93cb

000d94dc <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d94dc:	4700      	bx	r0
	...

000d94e0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d94e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d94e4:	2400      	movs	r4, #0
{
   d94e6:	461d      	mov	r5, r3
   d94e8:	460f      	mov	r7, r1
   d94ea:	4690      	mov	r8, r2
   d94ec:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d94ee:	f7fe fc91 	bl	d7e14 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d94f2:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d94f4:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d94f8:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d94fc:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d9500:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d9504:	bfa2      	ittt	ge
   d9506:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d950a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d950e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9510:	4907      	ldr	r1, [pc, #28]	; (d9530 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d9512:	9400      	str	r4, [sp, #0]
   d9514:	4643      	mov	r3, r8
   d9516:	463a      	mov	r2, r7
   d9518:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d951a:	bfa8      	it	ge
   d951c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9520:	f7fe fc70 	bl	d7e04 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d9524:	fab0 f080 	clz	r0, r0
   d9528:	0940      	lsrs	r0, r0, #5
   d952a:	b004      	add	sp, #16
   d952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9530:	000d94dd 	.word	0x000d94dd

000d9534 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9534:	2200      	movs	r2, #0
   d9536:	6840      	ldr	r0, [r0, #4]
   d9538:	4611      	mov	r1, r2
   d953a:	f7fe be67 	b.w	d820c <network_ready>

000d953e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d953e:	2200      	movs	r2, #0
   d9540:	6840      	ldr	r0, [r0, #4]
   d9542:	4611      	mov	r1, r2
   d9544:	f7fe be82 	b.w	d824c <network_listening>

000d9548 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d9548:	2200      	movs	r2, #0
   d954a:	6840      	ldr	r0, [r0, #4]
   d954c:	4611      	mov	r1, r2
   d954e:	f7fe be8d 	b.w	d826c <network_get_listen_timeout>

000d9552 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d9552:	6840      	ldr	r0, [r0, #4]
   d9554:	2200      	movs	r2, #0
   d9556:	f7fe be81 	b.w	d825c <network_set_listen_timeout>

000d955a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d955a:	6840      	ldr	r0, [r0, #4]
   d955c:	2200      	movs	r2, #0
   d955e:	f081 0101 	eor.w	r1, r1, #1
   d9562:	f7fe be6b 	b.w	d823c <network_listen>

000d9566 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d9566:	2300      	movs	r3, #0
   d9568:	6840      	ldr	r0, [r0, #4]
   d956a:	461a      	mov	r2, r3
   d956c:	4619      	mov	r1, r3
   d956e:	f7fe be5d 	b.w	d822c <network_off>

000d9572 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d9572:	2300      	movs	r3, #0
   d9574:	6840      	ldr	r0, [r0, #4]
   d9576:	461a      	mov	r2, r3
   d9578:	4619      	mov	r1, r3
   d957a:	f7fe be4f 	b.w	d821c <network_on>

000d957e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d957e:	2200      	movs	r2, #0
   d9580:	6840      	ldr	r0, [r0, #4]
   d9582:	4611      	mov	r1, r2
   d9584:	f7fe be32 	b.w	d81ec <network_connecting>

000d9588 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9588:	6840      	ldr	r0, [r0, #4]
   d958a:	2200      	movs	r2, #0
   d958c:	2102      	movs	r1, #2
   d958e:	f7fe be35 	b.w	d81fc <network_disconnect>

000d9592 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d9592:	2300      	movs	r3, #0
   d9594:	6840      	ldr	r0, [r0, #4]
   d9596:	461a      	mov	r2, r3
   d9598:	f7fe be20 	b.w	d81dc <network_connect>

000d959c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d959c:	4b08      	ldr	r3, [pc, #32]	; (d95c0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d959e:	b510      	push	{r4, lr}
   d95a0:	2428      	movs	r4, #40	; 0x28
   d95a2:	4622      	mov	r2, r4
   d95a4:	4618      	mov	r0, r3
   d95a6:	2100      	movs	r1, #0
   d95a8:	f003 ff38 	bl	dd41c <memset>
   d95ac:	4b05      	ldr	r3, [pc, #20]	; (d95c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d95ae:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d95b0:	f04f 32ff 	mov.w	r2, #4294967295
   d95b4:	6042      	str	r2, [r0, #4]
   d95b6:	2204      	movs	r2, #4
   d95b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d95ba:	4a03      	ldr	r2, [pc, #12]	; (d95c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d95bc:	601a      	str	r2, [r3, #0]
   d95be:	bd10      	pop	{r4, pc}
   d95c0:	2003e5e4 	.word	0x2003e5e4
   d95c4:	2003e5dc 	.word	0x2003e5dc
   d95c8:	000de65c 	.word	0x000de65c

000d95cc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d95cc:	4770      	bx	lr

000d95ce <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d95ce:	7441      	strb	r1, [r0, #17]
}
   d95d0:	4770      	bx	lr

000d95d2 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d95d2:	4770      	bx	lr

000d95d4 <_ZN11USARTSerial17availableForWriteEv>:
{
   d95d4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d95d6:	7c00      	ldrb	r0, [r0, #16]
   d95d8:	f7fe fcbc 	bl	d7f54 <hal_usart_available_data_for_write>
}
   d95dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d95e0:	bd08      	pop	{r3, pc}

000d95e2 <_ZN11USARTSerial9availableEv>:
{
   d95e2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d95e4:	7c00      	ldrb	r0, [r0, #16]
   d95e6:	f7fe fc8d 	bl	d7f04 <hal_usart_available>
}
   d95ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d95ee:	bd08      	pop	{r3, pc}

000d95f0 <_ZN11USARTSerial4peekEv>:
{
   d95f0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d95f2:	7c00      	ldrb	r0, [r0, #16]
   d95f4:	f7fe fc96 	bl	d7f24 <hal_usart_peek>
}
   d95f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d95fc:	bd08      	pop	{r3, pc}

000d95fe <_ZN11USARTSerial4readEv>:
{
   d95fe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d9600:	7c00      	ldrb	r0, [r0, #16]
   d9602:	f7fe fc87 	bl	d7f14 <hal_usart_read>
}
   d9606:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d960a:	bd08      	pop	{r3, pc}

000d960c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d960c:	7c00      	ldrb	r0, [r0, #16]
   d960e:	f7fe bc91 	b.w	d7f34 <hal_usart_flush>

000d9612 <_ZN11USARTSerial5writeEh>:
{
   d9612:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9614:	7c45      	ldrb	r5, [r0, #17]
{
   d9616:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9618:	b12d      	cbz	r5, d9626 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d961a:	7c20      	ldrb	r0, [r4, #16]
}
   d961c:	b003      	add	sp, #12
   d961e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9622:	f7fe bc67 	b.w	d7ef4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9626:	7c00      	ldrb	r0, [r0, #16]
   d9628:	9101      	str	r1, [sp, #4]
   d962a:	f7fe fc93 	bl	d7f54 <hal_usart_available_data_for_write>
   d962e:	2800      	cmp	r0, #0
   d9630:	9901      	ldr	r1, [sp, #4]
   d9632:	dcf2      	bgt.n	d961a <_ZN11USARTSerial5writeEh+0x8>
}
   d9634:	4628      	mov	r0, r5
   d9636:	b003      	add	sp, #12
   d9638:	bd30      	pop	{r4, r5, pc}

000d963a <_ZN11USARTSerialD0Ev>:
   d963a:	b510      	push	{r4, lr}
   d963c:	2114      	movs	r1, #20
   d963e:	4604      	mov	r4, r0
   d9640:	f000 fa66 	bl	d9b10 <_ZdlPvj>
   d9644:	4620      	mov	r0, r4
   d9646:	bd10      	pop	{r4, pc}

000d9648 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9648:	b510      	push	{r4, lr}
   d964a:	f04f 0c00 	mov.w	ip, #0
   d964e:	4604      	mov	r4, r0
   d9650:	4608      	mov	r0, r1
   d9652:	4611      	mov	r1, r2
   d9654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9658:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d965c:	4a04      	ldr	r2, [pc, #16]	; (d9670 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d965e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9660:	2201      	movs	r2, #1
  _serial = serial;
   d9662:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9664:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d9666:	461a      	mov	r2, r3
   d9668:	f7fe fc3c 	bl	d7ee4 <hal_usart_init>
}
   d966c:	4620      	mov	r0, r4
   d966e:	bd10      	pop	{r4, pc}
   d9670:	000de698 	.word	0x000de698

000d9674 <_Z22__fetch_global_Serial1v>:
{
   d9674:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9676:	4c0d      	ldr	r4, [pc, #52]	; (d96ac <_Z22__fetch_global_Serial1v+0x38>)
   d9678:	7821      	ldrb	r1, [r4, #0]
   d967a:	f3bf 8f5b 	dmb	ish
   d967e:	f011 0101 	ands.w	r1, r1, #1
   d9682:	d110      	bne.n	d96a6 <_Z22__fetch_global_Serial1v+0x32>
   d9684:	4620      	mov	r0, r4
   d9686:	9101      	str	r1, [sp, #4]
   d9688:	f7fa fd16 	bl	d40b8 <__cxa_guard_acquire>
   d968c:	9901      	ldr	r1, [sp, #4]
   d968e:	b150      	cbz	r0, d96a6 <_Z22__fetch_global_Serial1v+0x32>
   d9690:	4b07      	ldr	r3, [pc, #28]	; (d96b0 <_Z22__fetch_global_Serial1v+0x3c>)
   d9692:	4a08      	ldr	r2, [pc, #32]	; (d96b4 <_Z22__fetch_global_Serial1v+0x40>)
   d9694:	4808      	ldr	r0, [pc, #32]	; (d96b8 <_Z22__fetch_global_Serial1v+0x44>)
   d9696:	f7ff ffd7 	bl	d9648 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d969a:	4620      	mov	r0, r4
   d969c:	f7fa fd11 	bl	d40c2 <__cxa_guard_release>
   d96a0:	4806      	ldr	r0, [pc, #24]	; (d96bc <_Z22__fetch_global_Serial1v+0x48>)
   d96a2:	f003 fea7 	bl	dd3f4 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d96a6:	4804      	ldr	r0, [pc, #16]	; (d96b8 <_Z22__fetch_global_Serial1v+0x44>)
   d96a8:	b002      	add	sp, #8
   d96aa:	bd10      	pop	{r4, pc}
   d96ac:	2003e60c 	.word	0x2003e60c
   d96b0:	2003e694 	.word	0x2003e694
   d96b4:	2003e610 	.word	0x2003e610
   d96b8:	2003e718 	.word	0x2003e718
   d96bc:	000d95d3 	.word	0x000d95d3

000d96c0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d96c0:	b510      	push	{r4, lr}
      if (_M_empty())
   d96c2:	6883      	ldr	r3, [r0, #8]
   d96c4:	4604      	mov	r4, r0
   d96c6:	b90b      	cbnz	r3, d96cc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d96c8:	f000 fa26 	bl	d9b18 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d96cc:	68c3      	ldr	r3, [r0, #12]
   d96ce:	4798      	blx	r3
      if (_M_manager)
   d96d0:	68a3      	ldr	r3, [r4, #8]
   d96d2:	b11b      	cbz	r3, d96dc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d96d4:	2203      	movs	r2, #3
   d96d6:	4621      	mov	r1, r4
   d96d8:	4620      	mov	r0, r4
   d96da:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d96dc:	4620      	mov	r0, r4
   d96de:	2110      	movs	r1, #16
}
   d96e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d96e4:	f000 ba14 	b.w	d9b10 <_ZdlPvj>

000d96e8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d96e8:	4770      	bx	lr

000d96ea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d96ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d96ec:	4606      	mov	r6, r0
   d96ee:	4615      	mov	r5, r2
   d96f0:	460c      	mov	r4, r1
   d96f2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d96f4:	42bc      	cmp	r4, r7
   d96f6:	d006      	beq.n	d9706 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d96f8:	6833      	ldr	r3, [r6, #0]
   d96fa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d96fe:	689b      	ldr	r3, [r3, #8]
   d9700:	4630      	mov	r0, r6
   d9702:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d9704:	e7f6      	b.n	d96f4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d9706:	4628      	mov	r0, r5
   d9708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d970a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d970a:	7c00      	ldrb	r0, [r0, #16]
   d970c:	2200      	movs	r2, #0
   d970e:	f7fe bc49 	b.w	d7fa4 <hal_i2c_write>

000d9712 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d9712:	7c00      	ldrb	r0, [r0, #16]
   d9714:	2100      	movs	r1, #0
   d9716:	f7fe bc4d 	b.w	d7fb4 <hal_i2c_available>

000d971a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d971a:	7c00      	ldrb	r0, [r0, #16]
   d971c:	2100      	movs	r1, #0
   d971e:	f7fe bc51 	b.w	d7fc4 <hal_i2c_read>

000d9722 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d9722:	7c00      	ldrb	r0, [r0, #16]
   d9724:	2100      	movs	r1, #0
   d9726:	f7fe bc55 	b.w	d7fd4 <hal_i2c_peek>

000d972a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d972a:	7c00      	ldrb	r0, [r0, #16]
   d972c:	2100      	movs	r1, #0
   d972e:	f7fe bc59 	b.w	d7fe4 <hal_i2c_flush>

000d9732 <_ZN7TwoWireD0Ev>:
   d9732:	b510      	push	{r4, lr}
   d9734:	2114      	movs	r1, #20
   d9736:	4604      	mov	r4, r0
   d9738:	f000 f9ea 	bl	d9b10 <_ZdlPvj>
   d973c:	4620      	mov	r0, r4
   d973e:	bd10      	pop	{r4, pc}

000d9740 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d9740:	b510      	push	{r4, lr}
   d9742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9746:	4604      	mov	r4, r0
   d9748:	4608      	mov	r0, r1
   d974a:	2100      	movs	r1, #0
   d974c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9750:	4b03      	ldr	r3, [pc, #12]	; (d9760 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d9752:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d9754:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d9756:	4611      	mov	r1, r2
   d9758:	f7fe fc54 	bl	d8004 <hal_i2c_init>
}
   d975c:	4620      	mov	r0, r4
   d975e:	bd10      	pop	{r4, pc}
   d9760:	000de6c8 	.word	0x000de6c8

000d9764 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d9764:	7c00      	ldrb	r0, [r0, #16]
   d9766:	2200      	movs	r2, #0
   d9768:	f7fe bbfc 	b.w	d7f64 <hal_i2c_set_speed>

000d976c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d976c:	2300      	movs	r3, #0
   d976e:	7c00      	ldrb	r0, [r0, #16]
   d9770:	461a      	mov	r2, r3
   d9772:	4619      	mov	r1, r3
   d9774:	f7fe bbfe 	b.w	d7f74 <hal_i2c_begin>

000d9778 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d9778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d977a:	2200      	movs	r2, #0
   d977c:	2314      	movs	r3, #20
   d977e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d9782:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d9786:	780b      	ldrb	r3, [r1, #0]
   d9788:	f88d 3008 	strb.w	r3, [sp, #8]
   d978c:	684b      	ldr	r3, [r1, #4]
   d978e:	9303      	str	r3, [sp, #12]
   d9790:	68cb      	ldr	r3, [r1, #12]
   d9792:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d9794:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d9796:	7a0b      	ldrb	r3, [r1, #8]
   d9798:	9305      	str	r3, [sp, #20]
   d979a:	a901      	add	r1, sp, #4
   d979c:	f7fe fc3a 	bl	d8014 <hal_i2c_request_ex>
}
   d97a0:	b007      	add	sp, #28
   d97a2:	f85d fb04 	ldr.w	pc, [sp], #4

000d97a6 <_ZN7TwoWire11requestFromEhjh>:
{
   d97a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d97a8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d97aa:	f88d 1000 	strb.w	r1, [sp]
   d97ae:	f04f 0164 	mov.w	r1, #100	; 0x64
   d97b2:	9103      	str	r1, [sp, #12]
   d97b4:	bf18      	it	ne
   d97b6:	2301      	movne	r3, #1
   d97b8:	4669      	mov	r1, sp
    size_ = size;
   d97ba:	9201      	str	r2, [sp, #4]
   d97bc:	f88d 3008 	strb.w	r3, [sp, #8]
   d97c0:	f7ff ffda 	bl	d9778 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d97c4:	b005      	add	sp, #20
   d97c6:	f85d fb04 	ldr.w	pc, [sp], #4

000d97ca <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d97ca:	2301      	movs	r3, #1
   d97cc:	f7ff bfeb 	b.w	d97a6 <_ZN7TwoWire11requestFromEhjh>

000d97d0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d97d0:	7c00      	ldrb	r0, [r0, #16]
   d97d2:	2200      	movs	r2, #0
   d97d4:	f7fe bbd6 	b.w	d7f84 <hal_i2c_begin_transmission>

000d97d8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d97d8:	7c00      	ldrb	r0, [r0, #16]
   d97da:	2200      	movs	r2, #0
   d97dc:	f7fe bbda 	b.w	d7f94 <hal_i2c_end_transmission>

000d97e0 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d97e0:	2101      	movs	r1, #1
   d97e2:	f7ff bff9 	b.w	d97d8 <_ZN7TwoWire15endTransmissionEh>

000d97e6 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d97e6:	2300      	movs	r3, #0
   d97e8:	6840      	ldr	r0, [r0, #4]
   d97ea:	461a      	mov	r2, r3
   d97ec:	f7fe bcf6 	b.w	d81dc <network_connect>

000d97f0 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d97f0:	6840      	ldr	r0, [r0, #4]
   d97f2:	2200      	movs	r2, #0
   d97f4:	2102      	movs	r1, #2
   d97f6:	f7fe bd01 	b.w	d81fc <network_disconnect>

000d97fa <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d97fa:	2200      	movs	r2, #0
   d97fc:	6840      	ldr	r0, [r0, #4]
   d97fe:	4611      	mov	r1, r2
   d9800:	f7fe bcf4 	b.w	d81ec <network_connecting>

000d9804 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9804:	2200      	movs	r2, #0
   d9806:	6840      	ldr	r0, [r0, #4]
   d9808:	4611      	mov	r1, r2
   d980a:	f7fe bcff 	b.w	d820c <network_ready>

000d980e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d980e:	2300      	movs	r3, #0
   d9810:	6840      	ldr	r0, [r0, #4]
   d9812:	461a      	mov	r2, r3
   d9814:	4619      	mov	r1, r3
   d9816:	f7fe bd01 	b.w	d821c <network_on>

000d981a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d981a:	2300      	movs	r3, #0
   d981c:	6840      	ldr	r0, [r0, #4]
   d981e:	461a      	mov	r2, r3
   d9820:	4619      	mov	r1, r3
   d9822:	f7fe bd03 	b.w	d822c <network_off>

000d9826 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9826:	6840      	ldr	r0, [r0, #4]
   d9828:	2100      	movs	r1, #0
   d982a:	f7fe bd27 	b.w	d827c <network_is_on>

000d982e <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d982e:	6840      	ldr	r0, [r0, #4]
   d9830:	2100      	movs	r1, #0
   d9832:	f7fe bd2b 	b.w	d828c <network_is_off>

000d9836 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9836:	6840      	ldr	r0, [r0, #4]
   d9838:	2200      	movs	r2, #0
   d983a:	f081 0101 	eor.w	r1, r1, #1
   d983e:	f7fe bcfd 	b.w	d823c <network_listen>

000d9842 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9842:	6840      	ldr	r0, [r0, #4]
   d9844:	2200      	movs	r2, #0
   d9846:	f7fe bd09 	b.w	d825c <network_set_listen_timeout>

000d984a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d984a:	2200      	movs	r2, #0
   d984c:	6840      	ldr	r0, [r0, #4]
   d984e:	4611      	mov	r1, r2
   d9850:	f7fe bd0c 	b.w	d826c <network_get_listen_timeout>

000d9854 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9854:	2200      	movs	r2, #0
   d9856:	6840      	ldr	r0, [r0, #4]
   d9858:	4611      	mov	r1, r2
   d985a:	f7fe bcf7 	b.w	d824c <network_listening>

000d985e <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d985e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9862:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9864:	b095      	sub	sp, #84	; 0x54
   d9866:	4616      	mov	r6, r2
   d9868:	460d      	mov	r5, r1
   d986a:	4607      	mov	r7, r0
    IPAddress addr;
   d986c:	f7ff fd74 	bl	d9358 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9870:	4621      	mov	r1, r4
   d9872:	2218      	movs	r2, #24
   d9874:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9876:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9878:	f003 fdd0 	bl	dd41c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d987c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d987e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9882:	4621      	mov	r1, r4
   d9884:	466b      	mov	r3, sp
   d9886:	aa0c      	add	r2, sp, #48	; 0x30
   d9888:	4630      	mov	r0, r6
   d988a:	f7fe fa8b 	bl	d7da4 <netdb_getaddrinfo>
    if (!r) {
   d988e:	4604      	mov	r4, r0
   d9890:	2800      	cmp	r0, #0
   d9892:	d146      	bne.n	d9922 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9894:	4602      	mov	r2, r0
   d9896:	2101      	movs	r1, #1
   d9898:	6868      	ldr	r0, [r5, #4]
   d989a:	f7fe fcb7 	bl	d820c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d989e:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d98a0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d98a2:	4622      	mov	r2, r4
   d98a4:	6868      	ldr	r0, [r5, #4]
   d98a6:	f7fe fcb1 	bl	d820c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d98aa:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d98ac:	4681      	mov	r9, r0
        bool ok = false;
   d98ae:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d98b0:	2e00      	cmp	r6, #0
   d98b2:	d036      	beq.n	d9922 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d98b4:	2900      	cmp	r1, #0
   d98b6:	d134      	bne.n	d9922 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d98b8:	6873      	ldr	r3, [r6, #4]
   d98ba:	2b02      	cmp	r3, #2
   d98bc:	d003      	beq.n	d98c6 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d98be:	2b0a      	cmp	r3, #10
   d98c0:	d00b      	beq.n	d98da <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d98c2:	69f6      	ldr	r6, [r6, #28]
   d98c4:	e7f4      	b.n	d98b0 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d98c6:	f1b8 0f00 	cmp.w	r8, #0
   d98ca:	d004      	beq.n	d98d6 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d98cc:	6971      	ldr	r1, [r6, #20]
   d98ce:	4638      	mov	r0, r7
   d98d0:	3104      	adds	r1, #4
   d98d2:	f7ff fd6e 	bl	d93b2 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d98d6:	4641      	mov	r1, r8
   d98d8:	e7f3      	b.n	d98c2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d98da:	f1b9 0f00 	cmp.w	r9, #0
   d98de:	d101      	bne.n	d98e4 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d98e0:	4649      	mov	r1, r9
   d98e2:	e7ee      	b.n	d98c2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d98e4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d98e6:	2210      	movs	r2, #16
   d98e8:	a801      	add	r0, sp, #4
   d98ea:	f003 fd97 	bl	dd41c <memset>
                    a.v = 6;
   d98ee:	2306      	movs	r3, #6
   d98f0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d98f4:	ad01      	add	r5, sp, #4
   d98f6:	f104 0308 	add.w	r3, r4, #8
   d98fa:	3418      	adds	r4, #24
   d98fc:	6818      	ldr	r0, [r3, #0]
   d98fe:	6859      	ldr	r1, [r3, #4]
   d9900:	462a      	mov	r2, r5
   d9902:	c203      	stmia	r2!, {r0, r1}
   d9904:	3308      	adds	r3, #8
   d9906:	42a3      	cmp	r3, r4
   d9908:	4615      	mov	r5, r2
   d990a:	d1f7      	bne.n	d98fc <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d990c:	a901      	add	r1, sp, #4
   d990e:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9910:	ad07      	add	r5, sp, #28
   d9912:	f7ff fd2f 	bl	d9374 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9918:	1d3c      	adds	r4, r7, #4
   d991a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d991c:	682b      	ldr	r3, [r5, #0]
   d991e:	7023      	strb	r3, [r4, #0]
   d9920:	e7de      	b.n	d98e0 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9922:	9800      	ldr	r0, [sp, #0]
   d9924:	f7fe fa36 	bl	d7d94 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9928:	4638      	mov	r0, r7
   d992a:	b015      	add	sp, #84	; 0x54
   d992c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9930 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9930:	4b02      	ldr	r3, [pc, #8]	; (d993c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9932:	4a03      	ldr	r2, [pc, #12]	; (d9940 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9934:	601a      	str	r2, [r3, #0]
   d9936:	2200      	movs	r2, #0
   d9938:	605a      	str	r2, [r3, #4]

} // spark
   d993a:	4770      	bx	lr
   d993c:	2003e72c 	.word	0x2003e72c
   d9940:	000de6f0 	.word	0x000de6f0

000d9944 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9944:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9946:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9948:	d902      	bls.n	d9950 <pinAvailable+0xc>
    return false;
   d994a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d994c:	b002      	add	sp, #8
   d994e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9950:	f1a0 030b 	sub.w	r3, r0, #11
   d9954:	2b02      	cmp	r3, #2
   d9956:	d81a      	bhi.n	d998e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9958:	4c17      	ldr	r4, [pc, #92]	; (d99b8 <pinAvailable+0x74>)
   d995a:	7821      	ldrb	r1, [r4, #0]
   d995c:	f3bf 8f5b 	dmb	ish
   d9960:	f011 0101 	ands.w	r1, r1, #1
   d9964:	d10b      	bne.n	d997e <pinAvailable+0x3a>
   d9966:	4620      	mov	r0, r4
   d9968:	9101      	str	r1, [sp, #4]
   d996a:	f7fa fba5 	bl	d40b8 <__cxa_guard_acquire>
   d996e:	9901      	ldr	r1, [sp, #4]
   d9970:	b128      	cbz	r0, d997e <pinAvailable+0x3a>
   d9972:	4812      	ldr	r0, [pc, #72]	; (d99bc <pinAvailable+0x78>)
   d9974:	f7fe fd3e 	bl	d83f4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9978:	4620      	mov	r0, r4
   d997a:	f7fa fba2 	bl	d40c2 <__cxa_guard_release>
   d997e:	4b0f      	ldr	r3, [pc, #60]	; (d99bc <pinAvailable+0x78>)
   d9980:	7818      	ldrb	r0, [r3, #0]
   d9982:	f7fe fb67 	bl	d8054 <hal_spi_is_enabled>
   d9986:	2800      	cmp	r0, #0
   d9988:	d1df      	bne.n	d994a <pinAvailable+0x6>
  return true; // 'pin' is available
   d998a:	2001      	movs	r0, #1
   d998c:	e7de      	b.n	d994c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d998e:	2801      	cmp	r0, #1
   d9990:	d809      	bhi.n	d99a6 <pinAvailable+0x62>
   d9992:	f000 f899 	bl	d9ac8 <_Z19__fetch_global_Wirev>
   d9996:	2100      	movs	r1, #0
   d9998:	7c00      	ldrb	r0, [r0, #16]
   d999a:	f7fe fb2b 	bl	d7ff4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d999e:	f080 0001 	eor.w	r0, r0, #1
   d99a2:	b2c0      	uxtb	r0, r0
   d99a4:	e7d2      	b.n	d994c <pinAvailable+0x8>
   d99a6:	3809      	subs	r0, #9
   d99a8:	2801      	cmp	r0, #1
   d99aa:	d8ee      	bhi.n	d998a <pinAvailable+0x46>
   d99ac:	f7ff fe62 	bl	d9674 <_Z22__fetch_global_Serial1v>
   d99b0:	7c00      	ldrb	r0, [r0, #16]
   d99b2:	f7fe fac7 	bl	d7f44 <hal_usart_is_enabled>
   d99b6:	e7f2      	b.n	d999e <pinAvailable+0x5a>
   d99b8:	2003e57c 	.word	0x2003e57c
   d99bc:	2003e580 	.word	0x2003e580

000d99c0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d99c0:	2823      	cmp	r0, #35	; 0x23
{
   d99c2:	b538      	push	{r3, r4, r5, lr}
   d99c4:	4604      	mov	r4, r0
   d99c6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d99c8:	d80a      	bhi.n	d99e0 <pinMode+0x20>
   d99ca:	29ff      	cmp	r1, #255	; 0xff
   d99cc:	d008      	beq.n	d99e0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d99ce:	f7ff ffb9 	bl	d9944 <pinAvailable>
   d99d2:	b128      	cbz	r0, d99e0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d99d4:	4629      	mov	r1, r5
   d99d6:	4620      	mov	r0, r4
}
   d99d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d99dc:	f7fe b9f2 	b.w	d7dc4 <HAL_Pin_Mode>
}
   d99e0:	bd38      	pop	{r3, r4, r5, pc}

000d99e2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d99e2:	b538      	push	{r3, r4, r5, lr}
   d99e4:	4604      	mov	r4, r0
   d99e6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d99e8:	f7fe f9f4 	bl	d7dd4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d99ec:	28ff      	cmp	r0, #255	; 0xff
   d99ee:	d010      	beq.n	d9a12 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d99f0:	2806      	cmp	r0, #6
   d99f2:	d804      	bhi.n	d99fe <digitalWrite+0x1c>
   d99f4:	234d      	movs	r3, #77	; 0x4d
   d99f6:	fa23 f000 	lsr.w	r0, r3, r0
   d99fa:	07c3      	lsls	r3, r0, #31
   d99fc:	d409      	bmi.n	d9a12 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d99fe:	4620      	mov	r0, r4
   d9a00:	f7ff ffa0 	bl	d9944 <pinAvailable>
   d9a04:	b128      	cbz	r0, d9a12 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9a06:	4629      	mov	r1, r5
   d9a08:	4620      	mov	r0, r4
}
   d9a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d9a0e:	f7fe b9e9 	b.w	d7de4 <HAL_GPIO_Write>
}
   d9a12:	bd38      	pop	{r3, r4, r5, pc}

000d9a14 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9a14:	b510      	push	{r4, lr}
   d9a16:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9a18:	f7fe f9dc 	bl	d7dd4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d9a1c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d9a1e:	b2db      	uxtb	r3, r3
   d9a20:	2b01      	cmp	r3, #1
   d9a22:	d908      	bls.n	d9a36 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9a24:	4620      	mov	r0, r4
   d9a26:	f7ff ff8d 	bl	d9944 <pinAvailable>
   d9a2a:	b120      	cbz	r0, d9a36 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9a2c:	4620      	mov	r0, r4
}
   d9a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d9a32:	f7fe b9df 	b.w	d7df4 <HAL_GPIO_Read>
}
   d9a36:	2000      	movs	r0, #0
   d9a38:	bd10      	pop	{r4, pc}

000d9a3a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d9a3a:	280d      	cmp	r0, #13
{
   d9a3c:	b510      	push	{r4, lr}
   d9a3e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d9a40:	bf9c      	itt	ls
   d9a42:	340e      	addls	r4, #14
   d9a44:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9a46:	4620      	mov	r0, r4
   d9a48:	f7ff ff7c 	bl	d9944 <pinAvailable>
   d9a4c:	b150      	cbz	r0, d9a64 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d9a4e:	2103      	movs	r1, #3
   d9a50:	4620      	mov	r0, r4
   d9a52:	f7fe f9af 	bl	d7db4 <HAL_Validate_Pin_Function>
   d9a56:	2803      	cmp	r0, #3
   d9a58:	d104      	bne.n	d9a64 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d9a5a:	4620      	mov	r0, r4
}
   d9a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d9a60:	f7fe b9e0 	b.w	d7e24 <hal_adc_read>
}
   d9a64:	2000      	movs	r0, #0
   d9a66:	bd10      	pop	{r4, pc}

000d9a68 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d9a68:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d9a6a:	4c08      	ldr	r4, [pc, #32]	; (d9a8c <_Z21__fetch_global_EEPROMv+0x24>)
   d9a6c:	7823      	ldrb	r3, [r4, #0]
   d9a6e:	f3bf 8f5b 	dmb	ish
   d9a72:	07db      	lsls	r3, r3, #31
   d9a74:	d408      	bmi.n	d9a88 <_Z21__fetch_global_EEPROMv+0x20>
   d9a76:	4620      	mov	r0, r4
   d9a78:	f7fa fb1e 	bl	d40b8 <__cxa_guard_acquire>
   d9a7c:	b120      	cbz	r0, d9a88 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d9a7e:	f7fe f9f1 	bl	d7e64 <HAL_EEPROM_Init>
   d9a82:	4620      	mov	r0, r4
   d9a84:	f7fa fb1d 	bl	d40c2 <__cxa_guard_release>
	return eeprom;
}
   d9a88:	4801      	ldr	r0, [pc, #4]	; (d9a90 <_Z21__fetch_global_EEPROMv+0x28>)
   d9a8a:	bd10      	pop	{r4, pc}
   d9a8c:	2003e738 	.word	0x2003e738
   d9a90:	2003e73c 	.word	0x2003e73c

000d9a94 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9a94:	4770      	bx	lr
	...

000d9a98 <_Z17acquireWireBufferv>:
{
   d9a98:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d9a9a:	2300      	movs	r3, #0
   d9a9c:	2520      	movs	r5, #32
   d9a9e:	8043      	strh	r3, [r0, #2]
   d9aa0:	2314      	movs	r3, #20
{
   d9aa2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9aa4:	8003      	strh	r3, [r0, #0]
   d9aa6:	6085      	str	r5, [r0, #8]
   d9aa8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9aaa:	4906      	ldr	r1, [pc, #24]	; (d9ac4 <_Z17acquireWireBufferv+0x2c>)
   d9aac:	4628      	mov	r0, r5
   d9aae:	f000 f831 	bl	d9b14 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9ab2:	4904      	ldr	r1, [pc, #16]	; (d9ac4 <_Z17acquireWireBufferv+0x2c>)
	};
   d9ab4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9ab6:	4628      	mov	r0, r5
   d9ab8:	f000 f82c 	bl	d9b14 <_ZnajRKSt9nothrow_t>
	};
   d9abc:	60e0      	str	r0, [r4, #12]
}
   d9abe:	4620      	mov	r0, r4
   d9ac0:	bd38      	pop	{r3, r4, r5, pc}
   d9ac2:	bf00      	nop
   d9ac4:	000de724 	.word	0x000de724

000d9ac8 <_Z19__fetch_global_Wirev>:
{
   d9ac8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9aca:	4d0e      	ldr	r5, [pc, #56]	; (d9b04 <_Z19__fetch_global_Wirev+0x3c>)
   d9acc:	7829      	ldrb	r1, [r5, #0]
   d9ace:	f3bf 8f5b 	dmb	ish
   d9ad2:	f011 0401 	ands.w	r4, r1, #1
{
   d9ad6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9ad8:	d111      	bne.n	d9afe <_Z19__fetch_global_Wirev+0x36>
   d9ada:	4628      	mov	r0, r5
   d9adc:	f7fa faec 	bl	d40b8 <__cxa_guard_acquire>
   d9ae0:	b168      	cbz	r0, d9afe <_Z19__fetch_global_Wirev+0x36>
   d9ae2:	a801      	add	r0, sp, #4
   d9ae4:	f7ff ffd8 	bl	d9a98 <_Z17acquireWireBufferv>
   d9ae8:	aa01      	add	r2, sp, #4
   d9aea:	4621      	mov	r1, r4
   d9aec:	4806      	ldr	r0, [pc, #24]	; (d9b08 <_Z19__fetch_global_Wirev+0x40>)
   d9aee:	f7ff fe27 	bl	d9740 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d9af2:	4628      	mov	r0, r5
   d9af4:	f7fa fae5 	bl	d40c2 <__cxa_guard_release>
   d9af8:	4804      	ldr	r0, [pc, #16]	; (d9b0c <_Z19__fetch_global_Wirev+0x44>)
   d9afa:	f003 fc7b 	bl	dd3f4 <atexit>
	return wire;
}
   d9afe:	4802      	ldr	r0, [pc, #8]	; (d9b08 <_Z19__fetch_global_Wirev+0x40>)
   d9b00:	b007      	add	sp, #28
   d9b02:	bd30      	pop	{r4, r5, pc}
   d9b04:	2003e740 	.word	0x2003e740
   d9b08:	2003e744 	.word	0x2003e744
   d9b0c:	000d9a95 	.word	0x000d9a95

000d9b10 <_ZdlPvj>:
   d9b10:	f7fa bac5 	b.w	d409e <_ZdlPv>

000d9b14 <_ZnajRKSt9nothrow_t>:
   d9b14:	f7fa bac1 	b.w	d409a <_Znaj>

000d9b18 <_ZSt25__throw_bad_function_callv>:
   d9b18:	b508      	push	{r3, lr}
   d9b1a:	f7fe fc07 	bl	d832c <abort>
	...

000d9b20 <cosf>:
   d9b20:	b500      	push	{lr}
   d9b22:	ee10 3a10 	vmov	r3, s0
   d9b26:	4a20      	ldr	r2, [pc, #128]	; (d9ba8 <cosf+0x88>)
   d9b28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d9b2c:	4293      	cmp	r3, r2
   d9b2e:	b083      	sub	sp, #12
   d9b30:	dd19      	ble.n	d9b66 <cosf+0x46>
   d9b32:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d9b36:	db04      	blt.n	d9b42 <cosf+0x22>
   d9b38:	ee30 0a40 	vsub.f32	s0, s0, s0
   d9b3c:	b003      	add	sp, #12
   d9b3e:	f85d fb04 	ldr.w	pc, [sp], #4
   d9b42:	4668      	mov	r0, sp
   d9b44:	f001 fa7e 	bl	db044 <__ieee754_rem_pio2f>
   d9b48:	f000 0003 	and.w	r0, r0, #3
   d9b4c:	2801      	cmp	r0, #1
   d9b4e:	d011      	beq.n	d9b74 <cosf+0x54>
   d9b50:	2802      	cmp	r0, #2
   d9b52:	d01f      	beq.n	d9b94 <cosf+0x74>
   d9b54:	b1b8      	cbz	r0, d9b86 <cosf+0x66>
   d9b56:	eddd 0a01 	vldr	s1, [sp, #4]
   d9b5a:	ed9d 0a00 	vldr	s0, [sp]
   d9b5e:	2001      	movs	r0, #1
   d9b60:	f001 ff72 	bl	dba48 <__kernel_sinf>
   d9b64:	e7ea      	b.n	d9b3c <cosf+0x1c>
   d9b66:	eddf 0a11 	vldr	s1, [pc, #68]	; d9bac <cosf+0x8c>
   d9b6a:	f001 fbb5 	bl	db2d8 <__kernel_cosf>
   d9b6e:	b003      	add	sp, #12
   d9b70:	f85d fb04 	ldr.w	pc, [sp], #4
   d9b74:	eddd 0a01 	vldr	s1, [sp, #4]
   d9b78:	ed9d 0a00 	vldr	s0, [sp]
   d9b7c:	f001 ff64 	bl	dba48 <__kernel_sinf>
   d9b80:	eeb1 0a40 	vneg.f32	s0, s0
   d9b84:	e7da      	b.n	d9b3c <cosf+0x1c>
   d9b86:	eddd 0a01 	vldr	s1, [sp, #4]
   d9b8a:	ed9d 0a00 	vldr	s0, [sp]
   d9b8e:	f001 fba3 	bl	db2d8 <__kernel_cosf>
   d9b92:	e7d3      	b.n	d9b3c <cosf+0x1c>
   d9b94:	eddd 0a01 	vldr	s1, [sp, #4]
   d9b98:	ed9d 0a00 	vldr	s0, [sp]
   d9b9c:	f001 fb9c 	bl	db2d8 <__kernel_cosf>
   d9ba0:	eeb1 0a40 	vneg.f32	s0, s0
   d9ba4:	e7ca      	b.n	d9b3c <cosf+0x1c>
   d9ba6:	bf00      	nop
   d9ba8:	3f490fd8 	.word	0x3f490fd8
   d9bac:	00000000 	.word	0x00000000

000d9bb0 <sinf>:
   d9bb0:	b500      	push	{lr}
   d9bb2:	ee10 3a10 	vmov	r3, s0
   d9bb6:	4a21      	ldr	r2, [pc, #132]	; (d9c3c <sinf+0x8c>)
   d9bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d9bbc:	4293      	cmp	r3, r2
   d9bbe:	b083      	sub	sp, #12
   d9bc0:	dd1a      	ble.n	d9bf8 <sinf+0x48>
   d9bc2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d9bc6:	db04      	blt.n	d9bd2 <sinf+0x22>
   d9bc8:	ee30 0a40 	vsub.f32	s0, s0, s0
   d9bcc:	b003      	add	sp, #12
   d9bce:	f85d fb04 	ldr.w	pc, [sp], #4
   d9bd2:	4668      	mov	r0, sp
   d9bd4:	f001 fa36 	bl	db044 <__ieee754_rem_pio2f>
   d9bd8:	f000 0003 	and.w	r0, r0, #3
   d9bdc:	2801      	cmp	r0, #1
   d9bde:	d013      	beq.n	d9c08 <sinf+0x58>
   d9be0:	2802      	cmp	r0, #2
   d9be2:	d020      	beq.n	d9c26 <sinf+0x76>
   d9be4:	b1b8      	cbz	r0, d9c16 <sinf+0x66>
   d9be6:	eddd 0a01 	vldr	s1, [sp, #4]
   d9bea:	ed9d 0a00 	vldr	s0, [sp]
   d9bee:	f001 fb73 	bl	db2d8 <__kernel_cosf>
   d9bf2:	eeb1 0a40 	vneg.f32	s0, s0
   d9bf6:	e7e9      	b.n	d9bcc <sinf+0x1c>
   d9bf8:	eddf 0a11 	vldr	s1, [pc, #68]	; d9c40 <sinf+0x90>
   d9bfc:	2000      	movs	r0, #0
   d9bfe:	f001 ff23 	bl	dba48 <__kernel_sinf>
   d9c02:	b003      	add	sp, #12
   d9c04:	f85d fb04 	ldr.w	pc, [sp], #4
   d9c08:	eddd 0a01 	vldr	s1, [sp, #4]
   d9c0c:	ed9d 0a00 	vldr	s0, [sp]
   d9c10:	f001 fb62 	bl	db2d8 <__kernel_cosf>
   d9c14:	e7da      	b.n	d9bcc <sinf+0x1c>
   d9c16:	eddd 0a01 	vldr	s1, [sp, #4]
   d9c1a:	ed9d 0a00 	vldr	s0, [sp]
   d9c1e:	2001      	movs	r0, #1
   d9c20:	f001 ff12 	bl	dba48 <__kernel_sinf>
   d9c24:	e7d2      	b.n	d9bcc <sinf+0x1c>
   d9c26:	eddd 0a01 	vldr	s1, [sp, #4]
   d9c2a:	ed9d 0a00 	vldr	s0, [sp]
   d9c2e:	2001      	movs	r0, #1
   d9c30:	f001 ff0a 	bl	dba48 <__kernel_sinf>
   d9c34:	eeb1 0a40 	vneg.f32	s0, s0
   d9c38:	e7c8      	b.n	d9bcc <sinf+0x1c>
   d9c3a:	bf00      	nop
   d9c3c:	3f490fd8 	.word	0x3f490fd8
   d9c40:	00000000 	.word	0x00000000

000d9c44 <atan2>:
   d9c44:	f000 b9b8 	b.w	d9fb8 <__ieee754_atan2>

000d9c48 <pow>:
   d9c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9c4c:	ed2d 8b02 	vpush	{d8}
   d9c50:	b08d      	sub	sp, #52	; 0x34
   d9c52:	ec57 6b10 	vmov	r6, r7, d0
   d9c56:	ec55 4b11 	vmov	r4, r5, d1
   d9c5a:	f000 faad 	bl	da1b8 <__ieee754_pow>
   d9c5e:	4bae      	ldr	r3, [pc, #696]	; (d9f18 <pow+0x2d0>)
   d9c60:	eeb0 8a40 	vmov.f32	s16, s0
   d9c64:	eef0 8a60 	vmov.f32	s17, s1
   d9c68:	f993 9000 	ldrsb.w	r9, [r3]
   d9c6c:	f1b9 3fff 	cmp.w	r9, #4294967295
   d9c70:	d037      	beq.n	d9ce2 <pow+0x9a>
   d9c72:	4622      	mov	r2, r4
   d9c74:	462b      	mov	r3, r5
   d9c76:	4620      	mov	r0, r4
   d9c78:	4629      	mov	r1, r5
   d9c7a:	f003 f815 	bl	dcca8 <__aeabi_dcmpun>
   d9c7e:	4683      	mov	fp, r0
   d9c80:	bb78      	cbnz	r0, d9ce2 <pow+0x9a>
   d9c82:	4632      	mov	r2, r6
   d9c84:	463b      	mov	r3, r7
   d9c86:	4630      	mov	r0, r6
   d9c88:	4639      	mov	r1, r7
   d9c8a:	f003 f80d 	bl	dcca8 <__aeabi_dcmpun>
   d9c8e:	4680      	mov	r8, r0
   d9c90:	2800      	cmp	r0, #0
   d9c92:	f040 8093 	bne.w	d9dbc <pow+0x174>
   d9c96:	f04f 0a00 	mov.w	sl, #0
   d9c9a:	f04f 0b00 	mov.w	fp, #0
   d9c9e:	4630      	mov	r0, r6
   d9ca0:	4639      	mov	r1, r7
   d9ca2:	4652      	mov	r2, sl
   d9ca4:	465b      	mov	r3, fp
   d9ca6:	f002 ffcd 	bl	dcc44 <__aeabi_dcmpeq>
   d9caa:	b318      	cbz	r0, d9cf4 <pow+0xac>
   d9cac:	4652      	mov	r2, sl
   d9cae:	465b      	mov	r3, fp
   d9cb0:	4620      	mov	r0, r4
   d9cb2:	4629      	mov	r1, r5
   d9cb4:	f002 ffc6 	bl	dcc44 <__aeabi_dcmpeq>
   d9cb8:	9000      	str	r0, [sp, #0]
   d9cba:	2800      	cmp	r0, #0
   d9cbc:	d057      	beq.n	d9d6e <pow+0x126>
   d9cbe:	4b97      	ldr	r3, [pc, #604]	; (d9f1c <pow+0x2d4>)
   d9cc0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d9cc4:	2201      	movs	r2, #1
   d9cc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9cca:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9cce:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d9cd2:	9202      	str	r2, [sp, #8]
   d9cd4:	9303      	str	r3, [sp, #12]
   d9cd6:	f1b9 0f00 	cmp.w	r9, #0
   d9cda:	f000 8089 	beq.w	d9df0 <pow+0x1a8>
   d9cde:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d9f08 <pow+0x2c0>
   d9ce2:	eeb0 0a48 	vmov.f32	s0, s16
   d9ce6:	eef0 0a68 	vmov.f32	s1, s17
   d9cea:	b00d      	add	sp, #52	; 0x34
   d9cec:	ecbd 8b02 	vpop	{d8}
   d9cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9cf4:	eeb0 0a48 	vmov.f32	s0, s16
   d9cf8:	eef0 0a68 	vmov.f32	s1, s17
   d9cfc:	f002 f8aa 	bl	dbe54 <finite>
   d9d00:	4680      	mov	r8, r0
   d9d02:	2800      	cmp	r0, #0
   d9d04:	f000 8082 	beq.w	d9e0c <pow+0x1c4>
   d9d08:	f04f 0800 	mov.w	r8, #0
   d9d0c:	f04f 0900 	mov.w	r9, #0
   d9d10:	ec51 0b18 	vmov	r0, r1, d8
   d9d14:	4642      	mov	r2, r8
   d9d16:	464b      	mov	r3, r9
   d9d18:	f002 ff94 	bl	dcc44 <__aeabi_dcmpeq>
   d9d1c:	2800      	cmp	r0, #0
   d9d1e:	d0e0      	beq.n	d9ce2 <pow+0x9a>
   d9d20:	ec47 6b10 	vmov	d0, r6, r7
   d9d24:	f002 f896 	bl	dbe54 <finite>
   d9d28:	2800      	cmp	r0, #0
   d9d2a:	d0da      	beq.n	d9ce2 <pow+0x9a>
   d9d2c:	ec45 4b10 	vmov	d0, r4, r5
   d9d30:	f002 f890 	bl	dbe54 <finite>
   d9d34:	2800      	cmp	r0, #0
   d9d36:	d0d4      	beq.n	d9ce2 <pow+0x9a>
   d9d38:	4b77      	ldr	r3, [pc, #476]	; (d9f18 <pow+0x2d0>)
   d9d3a:	4a78      	ldr	r2, [pc, #480]	; (d9f1c <pow+0x2d4>)
   d9d3c:	f993 3000 	ldrsb.w	r3, [r3]
   d9d40:	9203      	str	r2, [sp, #12]
   d9d42:	2104      	movs	r1, #4
   d9d44:	2200      	movs	r2, #0
   d9d46:	2b02      	cmp	r3, #2
   d9d48:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9d4c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9d50:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d9d54:	9102      	str	r1, [sp, #8]
   d9d56:	920a      	str	r2, [sp, #40]	; 0x28
   d9d58:	d004      	beq.n	d9d64 <pow+0x11c>
   d9d5a:	a802      	add	r0, sp, #8
   d9d5c:	f002 f886 	bl	dbe6c <matherr>
   d9d60:	2800      	cmp	r0, #0
   d9d62:	d14a      	bne.n	d9dfa <pow+0x1b2>
   d9d64:	f7fe faf2 	bl	d834c <__errno>
   d9d68:	2322      	movs	r3, #34	; 0x22
   d9d6a:	6003      	str	r3, [r0, #0]
   d9d6c:	e045      	b.n	d9dfa <pow+0x1b2>
   d9d6e:	ec45 4b10 	vmov	d0, r4, r5
   d9d72:	f002 f86f 	bl	dbe54 <finite>
   d9d76:	2800      	cmp	r0, #0
   d9d78:	d0b3      	beq.n	d9ce2 <pow+0x9a>
   d9d7a:	4652      	mov	r2, sl
   d9d7c:	465b      	mov	r3, fp
   d9d7e:	4620      	mov	r0, r4
   d9d80:	4629      	mov	r1, r5
   d9d82:	f002 ff69 	bl	dcc58 <__aeabi_dcmplt>
   d9d86:	2800      	cmp	r0, #0
   d9d88:	d0ab      	beq.n	d9ce2 <pow+0x9a>
   d9d8a:	4b63      	ldr	r3, [pc, #396]	; (d9f18 <pow+0x2d0>)
   d9d8c:	9900      	ldr	r1, [sp, #0]
   d9d8e:	4a63      	ldr	r2, [pc, #396]	; (d9f1c <pow+0x2d4>)
   d9d90:	f993 3000 	ldrsb.w	r3, [r3]
   d9d94:	910a      	str	r1, [sp, #40]	; 0x28
   d9d96:	2101      	movs	r1, #1
   d9d98:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9d9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9da0:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d9da4:	2b00      	cmp	r3, #0
   d9da6:	d16f      	bne.n	d9e88 <pow+0x240>
   d9da8:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d9dac:	a802      	add	r0, sp, #8
   d9dae:	f002 f85d 	bl	dbe6c <matherr>
   d9db2:	2800      	cmp	r0, #0
   d9db4:	d06e      	beq.n	d9e94 <pow+0x24c>
   d9db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9db8:	b32b      	cbz	r3, d9e06 <pow+0x1be>
   d9dba:	e020      	b.n	d9dfe <pow+0x1b6>
   d9dbc:	2200      	movs	r2, #0
   d9dbe:	2300      	movs	r3, #0
   d9dc0:	4620      	mov	r0, r4
   d9dc2:	4629      	mov	r1, r5
   d9dc4:	f002 ff3e 	bl	dcc44 <__aeabi_dcmpeq>
   d9dc8:	2800      	cmp	r0, #0
   d9dca:	d08a      	beq.n	d9ce2 <pow+0x9a>
   d9dcc:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d9f08 <pow+0x2c0>
   d9dd0:	4b52      	ldr	r3, [pc, #328]	; (d9f1c <pow+0x2d4>)
   d9dd2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d9dd6:	2201      	movs	r2, #1
   d9dd8:	f1b9 0f02 	cmp.w	r9, #2
   d9ddc:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9de0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9de4:	ed8d 8b08 	vstr	d8, [sp, #32]
   d9de8:	9202      	str	r2, [sp, #8]
   d9dea:	9303      	str	r3, [sp, #12]
   d9dec:	f43f af79 	beq.w	d9ce2 <pow+0x9a>
   d9df0:	a802      	add	r0, sp, #8
   d9df2:	f002 f83b 	bl	dbe6c <matherr>
   d9df6:	2800      	cmp	r0, #0
   d9df8:	d051      	beq.n	d9e9e <pow+0x256>
   d9dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9dfc:	b11b      	cbz	r3, d9e06 <pow+0x1be>
   d9dfe:	f7fe faa5 	bl	d834c <__errno>
   d9e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9e04:	6003      	str	r3, [r0, #0]
   d9e06:	ed9d 8b08 	vldr	d8, [sp, #32]
   d9e0a:	e76a      	b.n	d9ce2 <pow+0x9a>
   d9e0c:	ec47 6b10 	vmov	d0, r6, r7
   d9e10:	f002 f820 	bl	dbe54 <finite>
   d9e14:	2800      	cmp	r0, #0
   d9e16:	f43f af77 	beq.w	d9d08 <pow+0xc0>
   d9e1a:	ec45 4b10 	vmov	d0, r4, r5
   d9e1e:	f002 f819 	bl	dbe54 <finite>
   d9e22:	2800      	cmp	r0, #0
   d9e24:	f43f af70 	beq.w	d9d08 <pow+0xc0>
   d9e28:	ec53 2b18 	vmov	r2, r3, d8
   d9e2c:	ee18 0a10 	vmov	r0, s16
   d9e30:	4619      	mov	r1, r3
   d9e32:	f002 ff39 	bl	dcca8 <__aeabi_dcmpun>
   d9e36:	4b38      	ldr	r3, [pc, #224]	; (d9f18 <pow+0x2d0>)
   d9e38:	2800      	cmp	r0, #0
   d9e3a:	f040 8096 	bne.w	d9f6a <pow+0x322>
   d9e3e:	f993 8000 	ldrsb.w	r8, [r3]
   d9e42:	900a      	str	r0, [sp, #40]	; 0x28
   d9e44:	2303      	movs	r3, #3
   d9e46:	9302      	str	r3, [sp, #8]
   d9e48:	4b34      	ldr	r3, [pc, #208]	; (d9f1c <pow+0x2d4>)
   d9e4a:	9303      	str	r3, [sp, #12]
   d9e4c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9e50:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9e54:	f1b8 0f00 	cmp.w	r8, #0
   d9e58:	d126      	bne.n	d9ea8 <pow+0x260>
   d9e5a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d9f2c <pow+0x2e4>
   d9e5e:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d9e62:	4652      	mov	r2, sl
   d9e64:	465b      	mov	r3, fp
   d9e66:	4630      	mov	r0, r6
   d9e68:	4639      	mov	r1, r7
   d9e6a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d9e6e:	f002 fef3 	bl	dcc58 <__aeabi_dcmplt>
   d9e72:	bb48      	cbnz	r0, d9ec8 <pow+0x280>
   d9e74:	a802      	add	r0, sp, #8
   d9e76:	f001 fff9 	bl	dbe6c <matherr>
   d9e7a:	2800      	cmp	r0, #0
   d9e7c:	d19b      	bne.n	d9db6 <pow+0x16e>
   d9e7e:	f7fe fa65 	bl	d834c <__errno>
   d9e82:	2322      	movs	r3, #34	; 0x22
   d9e84:	6003      	str	r3, [r0, #0]
   d9e86:	e796      	b.n	d9db6 <pow+0x16e>
   d9e88:	4925      	ldr	r1, [pc, #148]	; (d9f20 <pow+0x2d8>)
   d9e8a:	2000      	movs	r0, #0
   d9e8c:	2b02      	cmp	r3, #2
   d9e8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d9e92:	d18b      	bne.n	d9dac <pow+0x164>
   d9e94:	f7fe fa5a 	bl	d834c <__errno>
   d9e98:	2321      	movs	r3, #33	; 0x21
   d9e9a:	6003      	str	r3, [r0, #0]
   d9e9c:	e78b      	b.n	d9db6 <pow+0x16e>
   d9e9e:	f7fe fa55 	bl	d834c <__errno>
   d9ea2:	2321      	movs	r3, #33	; 0x21
   d9ea4:	6003      	str	r3, [r0, #0]
   d9ea6:	e7a8      	b.n	d9dfa <pow+0x1b2>
   d9ea8:	ed9f 7b19 	vldr	d7, [pc, #100]	; d9f10 <pow+0x2c8>
   d9eac:	4652      	mov	r2, sl
   d9eae:	465b      	mov	r3, fp
   d9eb0:	4630      	mov	r0, r6
   d9eb2:	4639      	mov	r1, r7
   d9eb4:	ed8d 7b08 	vstr	d7, [sp, #32]
   d9eb8:	f002 fece 	bl	dcc58 <__aeabi_dcmplt>
   d9ebc:	2800      	cmp	r0, #0
   d9ebe:	d137      	bne.n	d9f30 <pow+0x2e8>
   d9ec0:	f1b8 0f02 	cmp.w	r8, #2
   d9ec4:	d0db      	beq.n	d9e7e <pow+0x236>
   d9ec6:	e7d5      	b.n	d9e74 <pow+0x22c>
   d9ec8:	4b16      	ldr	r3, [pc, #88]	; (d9f24 <pow+0x2dc>)
   d9eca:	2200      	movs	r2, #0
   d9ecc:	4620      	mov	r0, r4
   d9ece:	4629      	mov	r1, r5
   d9ed0:	f002 fc50 	bl	dc774 <__aeabi_dmul>
   d9ed4:	4602      	mov	r2, r0
   d9ed6:	460b      	mov	r3, r1
   d9ed8:	ec43 2b10 	vmov	d0, r2, r3
   d9edc:	e9cd 2300 	strd	r2, r3, [sp]
   d9ee0:	f001 ffce 	bl	dbe80 <rint>
   d9ee4:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9ee8:	ec51 0b10 	vmov	r0, r1, d0
   d9eec:	f002 feaa 	bl	dcc44 <__aeabi_dcmpeq>
   d9ef0:	2800      	cmp	r0, #0
   d9ef2:	d136      	bne.n	d9f62 <pow+0x31a>
   d9ef4:	4b0c      	ldr	r3, [pc, #48]	; (d9f28 <pow+0x2e0>)
   d9ef6:	4908      	ldr	r1, [pc, #32]	; (d9f18 <pow+0x2d0>)
   d9ef8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d9efc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d9f00:	f991 8000 	ldrsb.w	r8, [r1]
   d9f04:	e7dc      	b.n	d9ec0 <pow+0x278>
   d9f06:	bf00      	nop
   d9f08:	00000000 	.word	0x00000000
   d9f0c:	3ff00000 	.word	0x3ff00000
   d9f10:	00000000 	.word	0x00000000
   d9f14:	7ff00000 	.word	0x7ff00000
   d9f18:	2003e3d8 	.word	0x2003e3d8
   d9f1c:	000de728 	.word	0x000de728
   d9f20:	fff00000 	.word	0xfff00000
   d9f24:	3fe00000 	.word	0x3fe00000
   d9f28:	c7efffff 	.word	0xc7efffff
   d9f2c:	47efffff 	.word	0x47efffff
   d9f30:	4b1c      	ldr	r3, [pc, #112]	; (d9fa4 <pow+0x35c>)
   d9f32:	2200      	movs	r2, #0
   d9f34:	4620      	mov	r0, r4
   d9f36:	4629      	mov	r1, r5
   d9f38:	f002 fc1c 	bl	dc774 <__aeabi_dmul>
   d9f3c:	4602      	mov	r2, r0
   d9f3e:	460b      	mov	r3, r1
   d9f40:	ec43 2b10 	vmov	d0, r2, r3
   d9f44:	e9cd 2300 	strd	r2, r3, [sp]
   d9f48:	f001 ff9a 	bl	dbe80 <rint>
   d9f4c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9f50:	ec51 0b10 	vmov	r0, r1, d0
   d9f54:	f002 fe76 	bl	dcc44 <__aeabi_dcmpeq>
   d9f58:	b918      	cbnz	r0, d9f62 <pow+0x31a>
   d9f5a:	4b13      	ldr	r3, [pc, #76]	; (d9fa8 <pow+0x360>)
   d9f5c:	2200      	movs	r2, #0
   d9f5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d9f62:	4b12      	ldr	r3, [pc, #72]	; (d9fac <pow+0x364>)
   d9f64:	f993 8000 	ldrsb.w	r8, [r3]
   d9f68:	e7aa      	b.n	d9ec0 <pow+0x278>
   d9f6a:	f993 9000 	ldrsb.w	r9, [r3]
   d9f6e:	4b10      	ldr	r3, [pc, #64]	; (d9fb0 <pow+0x368>)
   d9f70:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d9f74:	2201      	movs	r2, #1
   d9f76:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9f7a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9f7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d9f82:	f1b9 0f00 	cmp.w	r9, #0
   d9f86:	f43f af0f 	beq.w	d9da8 <pow+0x160>
   d9f8a:	4652      	mov	r2, sl
   d9f8c:	465b      	mov	r3, fp
   d9f8e:	4650      	mov	r0, sl
   d9f90:	4659      	mov	r1, fp
   d9f92:	f002 fd19 	bl	dc9c8 <__aeabi_ddiv>
   d9f96:	f1b9 0f02 	cmp.w	r9, #2
   d9f9a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d9f9e:	f43f af79 	beq.w	d9e94 <pow+0x24c>
   d9fa2:	e703      	b.n	d9dac <pow+0x164>
   d9fa4:	3fe00000 	.word	0x3fe00000
   d9fa8:	fff00000 	.word	0xfff00000
   d9fac:	2003e3d8 	.word	0x2003e3d8
   d9fb0:	000de728 	.word	0x000de728

000d9fb4 <atan2f>:
   d9fb4:	f000 bf9e 	b.w	daef4 <__ieee754_atan2f>

000d9fb8 <__ieee754_atan2>:
   d9fb8:	ec51 0b11 	vmov	r0, r1, d1
   d9fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9fc0:	4243      	negs	r3, r0
   d9fc2:	4e79      	ldr	r6, [pc, #484]	; (da1a8 <__ieee754_atan2+0x1f0>)
   d9fc4:	4303      	orrs	r3, r0
   d9fc6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   d9fca:	ea4c 73d3 	orr.w	r3, ip, r3, lsr #31
   d9fce:	42b3      	cmp	r3, r6
   d9fd0:	ec55 4b10 	vmov	r4, r5, d0
   d9fd4:	b082      	sub	sp, #8
   d9fd6:	d847      	bhi.n	da068 <__ieee754_atan2+0xb0>
   d9fd8:	4263      	negs	r3, r4
   d9fda:	4323      	orrs	r3, r4
   d9fdc:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   d9fe0:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   d9fe4:	42b3      	cmp	r3, r6
   d9fe6:	ee10 ea10 	vmov	lr, s0
   d9fea:	46a9      	mov	r9, r5
   d9fec:	d83c      	bhi.n	da068 <__ieee754_atan2+0xb0>
   d9fee:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   d9ff2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d9ff6:	4303      	orrs	r3, r0
   d9ff8:	d04c      	beq.n	da094 <__ieee754_atan2+0xdc>
   d9ffa:	ea4f 78a1 	mov.w	r8, r1, asr #30
   d9ffe:	f008 0802 	and.w	r8, r8, #2
   da002:	ea5a 0304 	orrs.w	r3, sl, r4
   da006:	ea48 78d5 	orr.w	r8, r8, r5, lsr #31
   da00a:	d038      	beq.n	da07e <__ieee754_atan2+0xc6>
   da00c:	ea5c 0300 	orrs.w	r3, ip, r0
   da010:	d048      	beq.n	da0a4 <__ieee754_atan2+0xec>
   da012:	45b4      	cmp	ip, r6
   da014:	d05d      	beq.n	da0d2 <__ieee754_atan2+0x11a>
   da016:	45b2      	cmp	sl, r6
   da018:	d044      	beq.n	da0a4 <__ieee754_atan2+0xec>
   da01a:	ebaa 0c0c 	sub.w	ip, sl, ip
   da01e:	f1bc 7f74 	cmp.w	ip, #63963136	; 0x3d00000
   da022:	ea4f 532c 	mov.w	r3, ip, asr #20
   da026:	da4f      	bge.n	da0c8 <__ieee754_atan2+0x110>
   da028:	2900      	cmp	r1, #0
   da02a:	da61      	bge.n	da0f0 <__ieee754_atan2+0x138>
   da02c:	333c      	adds	r3, #60	; 0x3c
   da02e:	da5f      	bge.n	da0f0 <__ieee754_atan2+0x138>
   da030:	ed9f 7b4f 	vldr	d7, [pc, #316]	; da170 <__ieee754_atan2+0x1b8>
   da034:	ed8d 7b00 	vstr	d7, [sp]
   da038:	f1b8 0f01 	cmp.w	r8, #1
   da03c:	d078      	beq.n	da130 <__ieee754_atan2+0x178>
   da03e:	f1b8 0f02 	cmp.w	r8, #2
   da042:	d064      	beq.n	da10e <__ieee754_atan2+0x156>
   da044:	f1b8 0f00 	cmp.w	r8, #0
   da048:	d014      	beq.n	da074 <__ieee754_atan2+0xbc>
   da04a:	a34b      	add	r3, pc, #300	; (adr r3, da178 <__ieee754_atan2+0x1c0>)
   da04c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da050:	e9dd 0100 	ldrd	r0, r1, [sp]
   da054:	f002 f9d6 	bl	dc404 <__aeabi_dsub>
   da058:	a349      	add	r3, pc, #292	; (adr r3, da180 <__ieee754_atan2+0x1c8>)
   da05a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da05e:	f002 f9d1 	bl	dc404 <__aeabi_dsub>
   da062:	e9cd 0100 	strd	r0, r1, [sp]
   da066:	e005      	b.n	da074 <__ieee754_atan2+0xbc>
   da068:	4622      	mov	r2, r4
   da06a:	462b      	mov	r3, r5
   da06c:	f002 f9cc 	bl	dc408 <__adddf3>
   da070:	e9cd 0100 	strd	r0, r1, [sp]
   da074:	ed9d 0b00 	vldr	d0, [sp]
   da078:	b002      	add	sp, #8
   da07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da07e:	f1b8 0f02 	cmp.w	r8, #2
   da082:	d017      	beq.n	da0b4 <__ieee754_atan2+0xfc>
   da084:	f1b8 0f03 	cmp.w	r8, #3
   da088:	d109      	bne.n	da09e <__ieee754_atan2+0xe6>
   da08a:	ed9f 7b3f 	vldr	d7, [pc, #252]	; da188 <__ieee754_atan2+0x1d0>
   da08e:	ed8d 7b00 	vstr	d7, [sp]
   da092:	e7ef      	b.n	da074 <__ieee754_atan2+0xbc>
   da094:	b002      	add	sp, #8
   da096:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da09a:	f001 bd1d 	b.w	dbad8 <atan>
   da09e:	ed8d 0b00 	vstr	d0, [sp]
   da0a2:	e7e7      	b.n	da074 <__ieee754_atan2+0xbc>
   da0a4:	f1b9 0f00 	cmp.w	r9, #0
   da0a8:	db09      	blt.n	da0be <__ieee754_atan2+0x106>
   da0aa:	ed9f 7b39 	vldr	d7, [pc, #228]	; da190 <__ieee754_atan2+0x1d8>
   da0ae:	ed8d 7b00 	vstr	d7, [sp]
   da0b2:	e7df      	b.n	da074 <__ieee754_atan2+0xbc>
   da0b4:	ed9f 7b32 	vldr	d7, [pc, #200]	; da180 <__ieee754_atan2+0x1c8>
   da0b8:	ed8d 7b00 	vstr	d7, [sp]
   da0bc:	e7da      	b.n	da074 <__ieee754_atan2+0xbc>
   da0be:	ed9f 7b36 	vldr	d7, [pc, #216]	; da198 <__ieee754_atan2+0x1e0>
   da0c2:	ed8d 7b00 	vstr	d7, [sp]
   da0c6:	e7d5      	b.n	da074 <__ieee754_atan2+0xbc>
   da0c8:	ed9f 7b31 	vldr	d7, [pc, #196]	; da190 <__ieee754_atan2+0x1d8>
   da0cc:	ed8d 7b00 	vstr	d7, [sp]
   da0d0:	e7b2      	b.n	da038 <__ieee754_atan2+0x80>
   da0d2:	45e2      	cmp	sl, ip
   da0d4:	f108 38ff 	add.w	r8, r8, #4294967295
   da0d8:	d032      	beq.n	da140 <__ieee754_atan2+0x188>
   da0da:	f1b8 0f02 	cmp.w	r8, #2
   da0de:	d83a      	bhi.n	da156 <__ieee754_atan2+0x19e>
   da0e0:	4b32      	ldr	r3, [pc, #200]	; (da1ac <__ieee754_atan2+0x1f4>)
   da0e2:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   da0e6:	ed98 7b00 	vldr	d7, [r8]
   da0ea:	ed8d 7b00 	vstr	d7, [sp]
   da0ee:	e7c1      	b.n	da074 <__ieee754_atan2+0xbc>
   da0f0:	4602      	mov	r2, r0
   da0f2:	460b      	mov	r3, r1
   da0f4:	4620      	mov	r0, r4
   da0f6:	4629      	mov	r1, r5
   da0f8:	f002 fc66 	bl	dc9c8 <__aeabi_ddiv>
   da0fc:	ec41 0b10 	vmov	d0, r0, r1
   da100:	f001 fe9e 	bl	dbe40 <fabs>
   da104:	f001 fce8 	bl	dbad8 <atan>
   da108:	ed8d 0b00 	vstr	d0, [sp]
   da10c:	e794      	b.n	da038 <__ieee754_atan2+0x80>
   da10e:	a31a      	add	r3, pc, #104	; (adr r3, da178 <__ieee754_atan2+0x1c0>)
   da110:	e9d3 2300 	ldrd	r2, r3, [r3]
   da114:	e9dd 0100 	ldrd	r0, r1, [sp]
   da118:	f002 f974 	bl	dc404 <__aeabi_dsub>
   da11c:	4602      	mov	r2, r0
   da11e:	460b      	mov	r3, r1
   da120:	a117      	add	r1, pc, #92	; (adr r1, da180 <__ieee754_atan2+0x1c8>)
   da122:	e9d1 0100 	ldrd	r0, r1, [r1]
   da126:	f002 f96d 	bl	dc404 <__aeabi_dsub>
   da12a:	e9cd 0100 	strd	r0, r1, [sp]
   da12e:	e7a1      	b.n	da074 <__ieee754_atan2+0xbc>
   da130:	e9dd 2300 	ldrd	r2, r3, [sp]
   da134:	9901      	ldr	r1, [sp, #4]
   da136:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da13a:	e9cd 2300 	strd	r2, r3, [sp]
   da13e:	e799      	b.n	da074 <__ieee754_atan2+0xbc>
   da140:	f1b8 0f02 	cmp.w	r8, #2
   da144:	d80c      	bhi.n	da160 <__ieee754_atan2+0x1a8>
   da146:	4b1a      	ldr	r3, [pc, #104]	; (da1b0 <__ieee754_atan2+0x1f8>)
   da148:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   da14c:	ed98 7b00 	vldr	d7, [r8]
   da150:	ed8d 7b00 	vstr	d7, [sp]
   da154:	e78e      	b.n	da074 <__ieee754_atan2+0xbc>
   da156:	ed9f 7b06 	vldr	d7, [pc, #24]	; da170 <__ieee754_atan2+0x1b8>
   da15a:	ed8d 7b00 	vstr	d7, [sp]
   da15e:	e789      	b.n	da074 <__ieee754_atan2+0xbc>
   da160:	ed9f 7b0f 	vldr	d7, [pc, #60]	; da1a0 <__ieee754_atan2+0x1e8>
   da164:	ed8d 7b00 	vstr	d7, [sp]
   da168:	e784      	b.n	da074 <__ieee754_atan2+0xbc>
   da16a:	bf00      	nop
   da16c:	f3af 8000 	nop.w
	...
   da178:	33145c07 	.word	0x33145c07
   da17c:	3ca1a626 	.word	0x3ca1a626
   da180:	54442d18 	.word	0x54442d18
   da184:	400921fb 	.word	0x400921fb
   da188:	54442d18 	.word	0x54442d18
   da18c:	c00921fb 	.word	0xc00921fb
   da190:	54442d18 	.word	0x54442d18
   da194:	3ff921fb 	.word	0x3ff921fb
   da198:	54442d18 	.word	0x54442d18
   da19c:	bff921fb 	.word	0xbff921fb
   da1a0:	54442d18 	.word	0x54442d18
   da1a4:	3fe921fb 	.word	0x3fe921fb
   da1a8:	7ff00000 	.word	0x7ff00000
   da1ac:	000de748 	.word	0x000de748
   da1b0:	000de730 	.word	0x000de730
   da1b4:	00000000 	.word	0x00000000

000da1b8 <__ieee754_pow>:
   da1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da1bc:	ec57 6b11 	vmov	r6, r7, d1
   da1c0:	ed2d 8b0a 	vpush	{d8-d12}
   da1c4:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   da1c8:	ea5a 0206 	orrs.w	r2, sl, r6
   da1cc:	b089      	sub	sp, #36	; 0x24
   da1ce:	d03d      	beq.n	da24c <__ieee754_pow+0x94>
   da1d0:	ec55 4b10 	vmov	r4, r5, d0
   da1d4:	4976      	ldr	r1, [pc, #472]	; (da3b0 <__ieee754_pow+0x1f8>)
   da1d6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   da1da:	4588      	cmp	r8, r1
   da1dc:	ee10 2a10 	vmov	r2, s0
   da1e0:	46a9      	mov	r9, r5
   da1e2:	dc2c      	bgt.n	da23e <__ieee754_pow+0x86>
   da1e4:	ee11 3a10 	vmov	r3, s2
   da1e8:	46bb      	mov	fp, r7
   da1ea:	d03a      	beq.n	da262 <__ieee754_pow+0xaa>
   da1ec:	458a      	cmp	sl, r1
   da1ee:	dc26      	bgt.n	da23e <__ieee754_pow+0x86>
   da1f0:	496f      	ldr	r1, [pc, #444]	; (da3b0 <__ieee754_pow+0x1f8>)
   da1f2:	458a      	cmp	sl, r1
   da1f4:	d021      	beq.n	da23a <__ieee754_pow+0x82>
   da1f6:	f1b9 0f00 	cmp.w	r9, #0
   da1fa:	db3d      	blt.n	da278 <__ieee754_pow+0xc0>
   da1fc:	2100      	movs	r1, #0
   da1fe:	9103      	str	r1, [sp, #12]
   da200:	2b00      	cmp	r3, #0
   da202:	d155      	bne.n	da2b0 <__ieee754_pow+0xf8>
   da204:	4b6a      	ldr	r3, [pc, #424]	; (da3b0 <__ieee754_pow+0x1f8>)
   da206:	459a      	cmp	sl, r3
   da208:	f000 80a8 	beq.w	da35c <__ieee754_pow+0x1a4>
   da20c:	4b69      	ldr	r3, [pc, #420]	; (da3b4 <__ieee754_pow+0x1fc>)
   da20e:	459a      	cmp	sl, r3
   da210:	f000 80b6 	beq.w	da380 <__ieee754_pow+0x1c8>
   da214:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   da218:	f000 8501 	beq.w	dac1e <__ieee754_pow+0xa66>
   da21c:	4b66      	ldr	r3, [pc, #408]	; (da3b8 <__ieee754_pow+0x200>)
   da21e:	459b      	cmp	fp, r3
   da220:	d146      	bne.n	da2b0 <__ieee754_pow+0xf8>
   da222:	f1b9 0f00 	cmp.w	r9, #0
   da226:	db43      	blt.n	da2b0 <__ieee754_pow+0xf8>
   da228:	ec45 4b10 	vmov	d0, r4, r5
   da22c:	b009      	add	sp, #36	; 0x24
   da22e:	ecbd 8b0a 	vpop	{d8-d12}
   da232:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da236:	f000 bd99 	b.w	dad6c <__ieee754_sqrt>
   da23a:	2b00      	cmp	r3, #0
   da23c:	d0db      	beq.n	da1f6 <__ieee754_pow+0x3e>
   da23e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   da242:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   da246:	ea58 0302 	orrs.w	r3, r8, r2
   da24a:	d10d      	bne.n	da268 <__ieee754_pow+0xb0>
   da24c:	ed9f 7b54 	vldr	d7, [pc, #336]	; da3a0 <__ieee754_pow+0x1e8>
   da250:	ed8d 7b00 	vstr	d7, [sp]
   da254:	ed9d 0b00 	vldr	d0, [sp]
   da258:	b009      	add	sp, #36	; 0x24
   da25a:	ecbd 8b0a 	vpop	{d8-d12}
   da25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da262:	b90c      	cbnz	r4, da268 <__ieee754_pow+0xb0>
   da264:	45c2      	cmp	sl, r8
   da266:	ddc3      	ble.n	da1f0 <__ieee754_pow+0x38>
   da268:	4854      	ldr	r0, [pc, #336]	; (da3bc <__ieee754_pow+0x204>)
   da26a:	b009      	add	sp, #36	; 0x24
   da26c:	ecbd 8b0a 	vpop	{d8-d12}
   da270:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da274:	f001 bdfc 	b.w	dbe70 <nan>
   da278:	4951      	ldr	r1, [pc, #324]	; (da3c0 <__ieee754_pow+0x208>)
   da27a:	458a      	cmp	sl, r1
   da27c:	f300 8087 	bgt.w	da38e <__ieee754_pow+0x1d6>
   da280:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   da284:	458a      	cmp	sl, r1
   da286:	dd0f      	ble.n	da2a8 <__ieee754_pow+0xf0>
   da288:	ea4f 512a 	mov.w	r1, sl, asr #20
   da28c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   da290:	2914      	cmp	r1, #20
   da292:	f340 84ce 	ble.w	dac32 <__ieee754_pow+0xa7a>
   da296:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   da29a:	fa23 f001 	lsr.w	r0, r3, r1
   da29e:	fa00 f101 	lsl.w	r1, r0, r1
   da2a2:	4299      	cmp	r1, r3
   da2a4:	f000 8520 	beq.w	dace8 <__ieee754_pow+0xb30>
   da2a8:	2100      	movs	r1, #0
   da2aa:	9103      	str	r1, [sp, #12]
   da2ac:	2b00      	cmp	r3, #0
   da2ae:	d0ad      	beq.n	da20c <__ieee754_pow+0x54>
   da2b0:	ec45 4b10 	vmov	d0, r4, r5
   da2b4:	9206      	str	r2, [sp, #24]
   da2b6:	f001 fdc3 	bl	dbe40 <fabs>
   da2ba:	9a06      	ldr	r2, [sp, #24]
   da2bc:	ed8d 0b00 	vstr	d0, [sp]
   da2c0:	bb5a      	cbnz	r2, da31a <__ieee754_pow+0x162>
   da2c2:	f1b8 0f00 	cmp.w	r8, #0
   da2c6:	d004      	beq.n	da2d2 <__ieee754_pow+0x11a>
   da2c8:	4b3a      	ldr	r3, [pc, #232]	; (da3b4 <__ieee754_pow+0x1fc>)
   da2ca:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   da2ce:	429a      	cmp	r2, r3
   da2d0:	d123      	bne.n	da31a <__ieee754_pow+0x162>
   da2d2:	f1bb 0f00 	cmp.w	fp, #0
   da2d6:	da07      	bge.n	da2e8 <__ieee754_pow+0x130>
   da2d8:	e9dd 2300 	ldrd	r2, r3, [sp]
   da2dc:	4935      	ldr	r1, [pc, #212]	; (da3b4 <__ieee754_pow+0x1fc>)
   da2de:	2000      	movs	r0, #0
   da2e0:	f002 fb72 	bl	dc9c8 <__aeabi_ddiv>
   da2e4:	e9cd 0100 	strd	r0, r1, [sp]
   da2e8:	f1b9 0f00 	cmp.w	r9, #0
   da2ec:	dab2      	bge.n	da254 <__ieee754_pow+0x9c>
   da2ee:	9b03      	ldr	r3, [sp, #12]
   da2f0:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   da2f4:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   da2f8:	ea58 0303 	orrs.w	r3, r8, r3
   da2fc:	f040 84be 	bne.w	dac7c <__ieee754_pow+0xac4>
   da300:	e9dd 2300 	ldrd	r2, r3, [sp]
   da304:	4610      	mov	r0, r2
   da306:	4619      	mov	r1, r3
   da308:	f002 f87c 	bl	dc404 <__aeabi_dsub>
   da30c:	4602      	mov	r2, r0
   da30e:	460b      	mov	r3, r1
   da310:	f002 fb5a 	bl	dc9c8 <__aeabi_ddiv>
   da314:	e9cd 0100 	strd	r0, r1, [sp]
   da318:	e79c      	b.n	da254 <__ieee754_pow+0x9c>
   da31a:	9a03      	ldr	r2, [sp, #12]
   da31c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   da320:	3b01      	subs	r3, #1
   da322:	9306      	str	r3, [sp, #24]
   da324:	4313      	orrs	r3, r2
   da326:	d035      	beq.n	da394 <__ieee754_pow+0x1dc>
   da328:	4b26      	ldr	r3, [pc, #152]	; (da3c4 <__ieee754_pow+0x20c>)
   da32a:	459a      	cmp	sl, r3
   da32c:	dd4e      	ble.n	da3cc <__ieee754_pow+0x214>
   da32e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   da332:	459a      	cmp	sl, r3
   da334:	4b24      	ldr	r3, [pc, #144]	; (da3c8 <__ieee754_pow+0x210>)
   da336:	f340 83ed 	ble.w	dab14 <__ieee754_pow+0x95c>
   da33a:	4598      	cmp	r8, r3
   da33c:	f340 836b 	ble.w	daa16 <__ieee754_pow+0x85e>
   da340:	f1bb 0f00 	cmp.w	fp, #0
   da344:	f340 836b 	ble.w	daa1e <__ieee754_pow+0x866>
   da348:	a317      	add	r3, pc, #92	; (adr r3, da3a8 <__ieee754_pow+0x1f0>)
   da34a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da34e:	4610      	mov	r0, r2
   da350:	4619      	mov	r1, r3
   da352:	f002 fa0f 	bl	dc774 <__aeabi_dmul>
   da356:	e9cd 0100 	strd	r0, r1, [sp]
   da35a:	e77b      	b.n	da254 <__ieee754_pow+0x9c>
   da35c:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   da360:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   da364:	4313      	orrs	r3, r2
   da366:	f43f af71 	beq.w	da24c <__ieee754_pow+0x94>
   da36a:	4b17      	ldr	r3, [pc, #92]	; (da3c8 <__ieee754_pow+0x210>)
   da36c:	4598      	cmp	r8, r3
   da36e:	f340 8388 	ble.w	daa82 <__ieee754_pow+0x8ca>
   da372:	f1bb 0f00 	cmp.w	fp, #0
   da376:	f2c0 8352 	blt.w	daa1e <__ieee754_pow+0x866>
   da37a:	e9cd 6700 	strd	r6, r7, [sp]
   da37e:	e769      	b.n	da254 <__ieee754_pow+0x9c>
   da380:	f1bb 0f00 	cmp.w	fp, #0
   da384:	f2c0 8441 	blt.w	dac0a <__ieee754_pow+0xa52>
   da388:	e9cd 4500 	strd	r4, r5, [sp]
   da38c:	e762      	b.n	da254 <__ieee754_pow+0x9c>
   da38e:	2102      	movs	r1, #2
   da390:	9103      	str	r1, [sp, #12]
   da392:	e735      	b.n	da200 <__ieee754_pow+0x48>
   da394:	4622      	mov	r2, r4
   da396:	462b      	mov	r3, r5
   da398:	e7b4      	b.n	da304 <__ieee754_pow+0x14c>
   da39a:	bf00      	nop
   da39c:	f3af 8000 	nop.w
   da3a0:	00000000 	.word	0x00000000
   da3a4:	3ff00000 	.word	0x3ff00000
   da3a8:	8800759c 	.word	0x8800759c
   da3ac:	7e37e43c 	.word	0x7e37e43c
   da3b0:	7ff00000 	.word	0x7ff00000
   da3b4:	3ff00000 	.word	0x3ff00000
   da3b8:	3fe00000 	.word	0x3fe00000
   da3bc:	000de760 	.word	0x000de760
   da3c0:	433fffff 	.word	0x433fffff
   da3c4:	41e00000 	.word	0x41e00000
   da3c8:	3fefffff 	.word	0x3fefffff
   da3cc:	4be4      	ldr	r3, [pc, #912]	; (da760 <__ieee754_pow+0x5a8>)
   da3ce:	ea09 0303 	and.w	r3, r9, r3
   da3d2:	2b00      	cmp	r3, #0
   da3d4:	f040 8416 	bne.w	dac04 <__ieee754_pow+0xa4c>
   da3d8:	e9dd 0100 	ldrd	r0, r1, [sp]
   da3dc:	4be1      	ldr	r3, [pc, #900]	; (da764 <__ieee754_pow+0x5ac>)
   da3de:	2200      	movs	r2, #0
   da3e0:	f002 f9c8 	bl	dc774 <__aeabi_dmul>
   da3e4:	e9cd 0100 	strd	r0, r1, [sp]
   da3e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
   da3ec:	f06f 0034 	mvn.w	r0, #52	; 0x34
   da3f0:	ea4f 5328 	mov.w	r3, r8, asr #20
   da3f4:	49dc      	ldr	r1, [pc, #880]	; (da768 <__ieee754_pow+0x5b0>)
   da3f6:	f3c8 0213 	ubfx	r2, r8, #0, #20
   da3fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   da3fe:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   da402:	1818      	adds	r0, r3, r0
   da404:	428a      	cmp	r2, r1
   da406:	9007      	str	r0, [sp, #28]
   da408:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   da40c:	f340 83e9 	ble.w	dabe2 <__ieee754_pow+0xa2a>
   da410:	4bd6      	ldr	r3, [pc, #856]	; (da76c <__ieee754_pow+0x5b4>)
   da412:	429a      	cmp	r2, r3
   da414:	f340 843e 	ble.w	dac94 <__ieee754_pow+0xadc>
   da418:	ed9f 7bbb 	vldr	d7, [pc, #748]	; da708 <__ieee754_pow+0x550>
   da41c:	eeb0 ba47 	vmov.f32	s22, s14
   da420:	eef0 ba67 	vmov.f32	s23, s15
   da424:	eeb0 ca47 	vmov.f32	s24, s14
   da428:	eef0 ca67 	vmov.f32	s25, s15
   da42c:	ed9f 7bb8 	vldr	d7, [pc, #736]	; da710 <__ieee754_pow+0x558>
   da430:	3001      	adds	r0, #1
   da432:	ec54 3b17 	vmov	r3, r4, d7
   da436:	9007      	str	r0, [sp, #28]
   da438:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   da43c:	f04f 0900 	mov.w	r9, #0
   da440:	e9dd ab00 	ldrd	sl, fp, [sp]
   da444:	ec44 3b18 	vmov	d8, r3, r4
   da448:	461a      	mov	r2, r3
   da44a:	4650      	mov	r0, sl
   da44c:	4623      	mov	r3, r4
   da44e:	4641      	mov	r1, r8
   da450:	f001 ffd8 	bl	dc404 <__aeabi_dsub>
   da454:	ec53 2b18 	vmov	r2, r3, d8
   da458:	4604      	mov	r4, r0
   da45a:	460d      	mov	r5, r1
   da45c:	4650      	mov	r0, sl
   da45e:	4641      	mov	r1, r8
   da460:	f001 ffd2 	bl	dc408 <__adddf3>
   da464:	4602      	mov	r2, r0
   da466:	460b      	mov	r3, r1
   da468:	2000      	movs	r0, #0
   da46a:	49c1      	ldr	r1, [pc, #772]	; (da770 <__ieee754_pow+0x5b8>)
   da46c:	f002 faac 	bl	dc9c8 <__aeabi_ddiv>
   da470:	ec45 4b1a 	vmov	d10, r4, r5
   da474:	ec41 0b19 	vmov	d9, r0, r1
   da478:	ec51 0b1a 	vmov	r0, r1, d10
   da47c:	ec53 2b19 	vmov	r2, r3, d9
   da480:	f002 f978 	bl	dc774 <__aeabi_dmul>
   da484:	46c3      	mov	fp, r8
   da486:	ea4f 0868 	mov.w	r8, r8, asr #1
   da48a:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   da48e:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   da492:	eb03 0509 	add.w	r5, r3, r9
   da496:	460a      	mov	r2, r1
   da498:	2300      	movs	r3, #0
   da49a:	4601      	mov	r1, r0
   da49c:	e9cd 1200 	strd	r1, r2, [sp]
   da4a0:	9300      	str	r3, [sp, #0]
   da4a2:	e9dd 8900 	ldrd	r8, r9, [sp]
   da4a6:	2400      	movs	r4, #0
   da4a8:	e9cd 1204 	strd	r1, r2, [sp, #16]
   da4ac:	462b      	mov	r3, r5
   da4ae:	4622      	mov	r2, r4
   da4b0:	4640      	mov	r0, r8
   da4b2:	4649      	mov	r1, r9
   da4b4:	f002 f95e 	bl	dc774 <__aeabi_dmul>
   da4b8:	4602      	mov	r2, r0
   da4ba:	460b      	mov	r3, r1
   da4bc:	ec51 0b1a 	vmov	r0, r1, d10
   da4c0:	f001 ffa0 	bl	dc404 <__aeabi_dsub>
   da4c4:	ec41 0b17 	vmov	d7, r0, r1
   da4c8:	ec53 2b18 	vmov	r2, r3, d8
   da4cc:	4620      	mov	r0, r4
   da4ce:	4629      	mov	r1, r5
   da4d0:	ec55 4b17 	vmov	r4, r5, d7
   da4d4:	f001 ff96 	bl	dc404 <__aeabi_dsub>
   da4d8:	4602      	mov	r2, r0
   da4da:	460b      	mov	r3, r1
   da4dc:	4650      	mov	r0, sl
   da4de:	4659      	mov	r1, fp
   da4e0:	f001 ff90 	bl	dc404 <__aeabi_dsub>
   da4e4:	4642      	mov	r2, r8
   da4e6:	464b      	mov	r3, r9
   da4e8:	f002 f944 	bl	dc774 <__aeabi_dmul>
   da4ec:	4602      	mov	r2, r0
   da4ee:	460b      	mov	r3, r1
   da4f0:	4620      	mov	r0, r4
   da4f2:	4629      	mov	r1, r5
   da4f4:	f001 ff86 	bl	dc404 <__aeabi_dsub>
   da4f8:	ec53 2b19 	vmov	r2, r3, d9
   da4fc:	f002 f93a 	bl	dc774 <__aeabi_dmul>
   da500:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   da504:	4604      	mov	r4, r0
   da506:	460d      	mov	r5, r1
   da508:	4652      	mov	r2, sl
   da50a:	465b      	mov	r3, fp
   da50c:	4650      	mov	r0, sl
   da50e:	4659      	mov	r1, fp
   da510:	f002 f930 	bl	dc774 <__aeabi_dmul>
   da514:	a380      	add	r3, pc, #512	; (adr r3, da718 <__ieee754_pow+0x560>)
   da516:	e9d3 2300 	ldrd	r2, r3, [r3]
   da51a:	ec45 4b1a 	vmov	d10, r4, r5
   da51e:	4604      	mov	r4, r0
   da520:	460d      	mov	r5, r1
   da522:	f002 f927 	bl	dc774 <__aeabi_dmul>
   da526:	a37e      	add	r3, pc, #504	; (adr r3, da720 <__ieee754_pow+0x568>)
   da528:	e9d3 2300 	ldrd	r2, r3, [r3]
   da52c:	f001 ff6c 	bl	dc408 <__adddf3>
   da530:	4622      	mov	r2, r4
   da532:	462b      	mov	r3, r5
   da534:	f002 f91e 	bl	dc774 <__aeabi_dmul>
   da538:	a37b      	add	r3, pc, #492	; (adr r3, da728 <__ieee754_pow+0x570>)
   da53a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da53e:	f001 ff63 	bl	dc408 <__adddf3>
   da542:	4622      	mov	r2, r4
   da544:	462b      	mov	r3, r5
   da546:	f002 f915 	bl	dc774 <__aeabi_dmul>
   da54a:	a379      	add	r3, pc, #484	; (adr r3, da730 <__ieee754_pow+0x578>)
   da54c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da550:	f001 ff5a 	bl	dc408 <__adddf3>
   da554:	4622      	mov	r2, r4
   da556:	462b      	mov	r3, r5
   da558:	f002 f90c 	bl	dc774 <__aeabi_dmul>
   da55c:	a376      	add	r3, pc, #472	; (adr r3, da738 <__ieee754_pow+0x580>)
   da55e:	e9d3 2300 	ldrd	r2, r3, [r3]
   da562:	f001 ff51 	bl	dc408 <__adddf3>
   da566:	4622      	mov	r2, r4
   da568:	462b      	mov	r3, r5
   da56a:	f002 f903 	bl	dc774 <__aeabi_dmul>
   da56e:	a374      	add	r3, pc, #464	; (adr r3, da740 <__ieee754_pow+0x588>)
   da570:	e9d3 2300 	ldrd	r2, r3, [r3]
   da574:	f001 ff48 	bl	dc408 <__adddf3>
   da578:	4622      	mov	r2, r4
   da57a:	462b      	mov	r3, r5
   da57c:	4604      	mov	r4, r0
   da57e:	460d      	mov	r5, r1
   da580:	4610      	mov	r0, r2
   da582:	4619      	mov	r1, r3
   da584:	f002 f8f6 	bl	dc774 <__aeabi_dmul>
   da588:	4602      	mov	r2, r0
   da58a:	460b      	mov	r3, r1
   da58c:	4620      	mov	r0, r4
   da58e:	4629      	mov	r1, r5
   da590:	f002 f8f0 	bl	dc774 <__aeabi_dmul>
   da594:	4642      	mov	r2, r8
   da596:	4604      	mov	r4, r0
   da598:	460d      	mov	r5, r1
   da59a:	464b      	mov	r3, r9
   da59c:	4650      	mov	r0, sl
   da59e:	4659      	mov	r1, fp
   da5a0:	e9cd ab04 	strd	sl, fp, [sp, #16]
   da5a4:	f001 ff30 	bl	dc408 <__adddf3>
   da5a8:	ec53 2b1a 	vmov	r2, r3, d10
   da5ac:	f002 f8e2 	bl	dc774 <__aeabi_dmul>
   da5b0:	4622      	mov	r2, r4
   da5b2:	462b      	mov	r3, r5
   da5b4:	f001 ff28 	bl	dc408 <__adddf3>
   da5b8:	4642      	mov	r2, r8
   da5ba:	4604      	mov	r4, r0
   da5bc:	460d      	mov	r5, r1
   da5be:	464b      	mov	r3, r9
   da5c0:	4640      	mov	r0, r8
   da5c2:	4649      	mov	r1, r9
   da5c4:	f002 f8d6 	bl	dc774 <__aeabi_dmul>
   da5c8:	ec45 4b19 	vmov	d9, r4, r5
   da5cc:	4b69      	ldr	r3, [pc, #420]	; (da774 <__ieee754_pow+0x5bc>)
   da5ce:	2200      	movs	r2, #0
   da5d0:	4682      	mov	sl, r0
   da5d2:	468b      	mov	fp, r1
   da5d4:	f001 ff18 	bl	dc408 <__adddf3>
   da5d8:	ec53 2b19 	vmov	r2, r3, d9
   da5dc:	f001 ff14 	bl	dc408 <__adddf3>
   da5e0:	9c00      	ldr	r4, [sp, #0]
   da5e2:	460d      	mov	r5, r1
   da5e4:	4622      	mov	r2, r4
   da5e6:	462b      	mov	r3, r5
   da5e8:	4640      	mov	r0, r8
   da5ea:	4649      	mov	r1, r9
   da5ec:	f002 f8c2 	bl	dc774 <__aeabi_dmul>
   da5f0:	4b60      	ldr	r3, [pc, #384]	; (da774 <__ieee754_pow+0x5bc>)
   da5f2:	4680      	mov	r8, r0
   da5f4:	4689      	mov	r9, r1
   da5f6:	2200      	movs	r2, #0
   da5f8:	4620      	mov	r0, r4
   da5fa:	4629      	mov	r1, r5
   da5fc:	f001 ff02 	bl	dc404 <__aeabi_dsub>
   da600:	4652      	mov	r2, sl
   da602:	465b      	mov	r3, fp
   da604:	f001 fefe 	bl	dc404 <__aeabi_dsub>
   da608:	4602      	mov	r2, r0
   da60a:	460b      	mov	r3, r1
   da60c:	ec51 0b19 	vmov	r0, r1, d9
   da610:	f001 fef8 	bl	dc404 <__aeabi_dsub>
   da614:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   da618:	f002 f8ac 	bl	dc774 <__aeabi_dmul>
   da61c:	ec49 8b18 	vmov	d8, r8, r9
   da620:	4622      	mov	r2, r4
   da622:	4680      	mov	r8, r0
   da624:	4689      	mov	r9, r1
   da626:	462b      	mov	r3, r5
   da628:	ec51 0b1a 	vmov	r0, r1, d10
   da62c:	f002 f8a2 	bl	dc774 <__aeabi_dmul>
   da630:	4602      	mov	r2, r0
   da632:	460b      	mov	r3, r1
   da634:	4640      	mov	r0, r8
   da636:	4649      	mov	r1, r9
   da638:	f001 fee6 	bl	dc408 <__adddf3>
   da63c:	4682      	mov	sl, r0
   da63e:	468b      	mov	fp, r1
   da640:	4652      	mov	r2, sl
   da642:	465b      	mov	r3, fp
   da644:	ec51 0b18 	vmov	r0, r1, d8
   da648:	f001 fede 	bl	dc408 <__adddf3>
   da64c:	9c00      	ldr	r4, [sp, #0]
   da64e:	a33e      	add	r3, pc, #248	; (adr r3, da748 <__ieee754_pow+0x590>)
   da650:	e9d3 2300 	ldrd	r2, r3, [r3]
   da654:	4620      	mov	r0, r4
   da656:	460d      	mov	r5, r1
   da658:	f002 f88c 	bl	dc774 <__aeabi_dmul>
   da65c:	ec53 2b18 	vmov	r2, r3, d8
   da660:	4680      	mov	r8, r0
   da662:	4689      	mov	r9, r1
   da664:	4620      	mov	r0, r4
   da666:	4629      	mov	r1, r5
   da668:	f001 fecc 	bl	dc404 <__aeabi_dsub>
   da66c:	4602      	mov	r2, r0
   da66e:	460b      	mov	r3, r1
   da670:	4650      	mov	r0, sl
   da672:	4659      	mov	r1, fp
   da674:	f001 fec6 	bl	dc404 <__aeabi_dsub>
   da678:	a335      	add	r3, pc, #212	; (adr r3, da750 <__ieee754_pow+0x598>)
   da67a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da67e:	f002 f879 	bl	dc774 <__aeabi_dmul>
   da682:	ec49 8b19 	vmov	d9, r8, r9
   da686:	a334      	add	r3, pc, #208	; (adr r3, da758 <__ieee754_pow+0x5a0>)
   da688:	e9d3 2300 	ldrd	r2, r3, [r3]
   da68c:	4680      	mov	r8, r0
   da68e:	4689      	mov	r9, r1
   da690:	4620      	mov	r0, r4
   da692:	4629      	mov	r1, r5
   da694:	f002 f86e 	bl	dc774 <__aeabi_dmul>
   da698:	4602      	mov	r2, r0
   da69a:	460b      	mov	r3, r1
   da69c:	4640      	mov	r0, r8
   da69e:	4649      	mov	r1, r9
   da6a0:	f001 feb2 	bl	dc408 <__adddf3>
   da6a4:	ec53 2b1c 	vmov	r2, r3, d12
   da6a8:	f001 feae 	bl	dc408 <__adddf3>
   da6ac:	4682      	mov	sl, r0
   da6ae:	9807      	ldr	r0, [sp, #28]
   da6b0:	468b      	mov	fp, r1
   da6b2:	f001 fff5 	bl	dc6a0 <__aeabi_i2d>
   da6b6:	4652      	mov	r2, sl
   da6b8:	4680      	mov	r8, r0
   da6ba:	4689      	mov	r9, r1
   da6bc:	465b      	mov	r3, fp
   da6be:	ec51 0b19 	vmov	r0, r1, d9
   da6c2:	f001 fea1 	bl	dc408 <__adddf3>
   da6c6:	ec53 2b1b 	vmov	r2, r3, d11
   da6ca:	f001 fe9d 	bl	dc408 <__adddf3>
   da6ce:	4642      	mov	r2, r8
   da6d0:	464b      	mov	r3, r9
   da6d2:	f001 fe99 	bl	dc408 <__adddf3>
   da6d6:	9c00      	ldr	r4, [sp, #0]
   da6d8:	4642      	mov	r2, r8
   da6da:	464b      	mov	r3, r9
   da6dc:	4620      	mov	r0, r4
   da6de:	460d      	mov	r5, r1
   da6e0:	f001 fe90 	bl	dc404 <__aeabi_dsub>
   da6e4:	ec53 2b1b 	vmov	r2, r3, d11
   da6e8:	f001 fe8c 	bl	dc404 <__aeabi_dsub>
   da6ec:	ec53 2b19 	vmov	r2, r3, d9
   da6f0:	f001 fe88 	bl	dc404 <__aeabi_dsub>
   da6f4:	4602      	mov	r2, r0
   da6f6:	460b      	mov	r3, r1
   da6f8:	4650      	mov	r0, sl
   da6fa:	4659      	mov	r1, fp
   da6fc:	f001 fe82 	bl	dc404 <__aeabi_dsub>
   da700:	4682      	mov	sl, r0
   da702:	468b      	mov	fp, r1
   da704:	e038      	b.n	da778 <__ieee754_pow+0x5c0>
   da706:	bf00      	nop
	...
   da714:	3ff00000 	.word	0x3ff00000
   da718:	4a454eef 	.word	0x4a454eef
   da71c:	3fca7e28 	.word	0x3fca7e28
   da720:	93c9db65 	.word	0x93c9db65
   da724:	3fcd864a 	.word	0x3fcd864a
   da728:	a91d4101 	.word	0xa91d4101
   da72c:	3fd17460 	.word	0x3fd17460
   da730:	518f264d 	.word	0x518f264d
   da734:	3fd55555 	.word	0x3fd55555
   da738:	db6fabff 	.word	0xdb6fabff
   da73c:	3fdb6db6 	.word	0x3fdb6db6
   da740:	33333303 	.word	0x33333303
   da744:	3fe33333 	.word	0x3fe33333
   da748:	e0000000 	.word	0xe0000000
   da74c:	3feec709 	.word	0x3feec709
   da750:	dc3a03fd 	.word	0xdc3a03fd
   da754:	3feec709 	.word	0x3feec709
   da758:	145b01f5 	.word	0x145b01f5
   da75c:	be3e2fe0 	.word	0xbe3e2fe0
   da760:	7ff00000 	.word	0x7ff00000
   da764:	43400000 	.word	0x43400000
   da768:	0003988e 	.word	0x0003988e
   da76c:	000bb679 	.word	0x000bb679
   da770:	3ff00000 	.word	0x3ff00000
   da774:	40080000 	.word	0x40080000
   da778:	9b03      	ldr	r3, [sp, #12]
   da77a:	9a06      	ldr	r2, [sp, #24]
   da77c:	3b01      	subs	r3, #1
   da77e:	4313      	orrs	r3, r2
   da780:	f040 8178 	bne.w	daa74 <__ieee754_pow+0x8bc>
   da784:	ed9f 7bc4 	vldr	d7, [pc, #784]	; daa98 <__ieee754_pow+0x8e0>
   da788:	eeb0 9a47 	vmov.f32	s18, s14
   da78c:	eef0 9a67 	vmov.f32	s19, s15
   da790:	2300      	movs	r3, #0
   da792:	e9cd 6700 	strd	r6, r7, [sp]
   da796:	9300      	str	r3, [sp, #0]
   da798:	e9dd 8900 	ldrd	r8, r9, [sp]
   da79c:	4630      	mov	r0, r6
   da79e:	4642      	mov	r2, r8
   da7a0:	4639      	mov	r1, r7
   da7a2:	464b      	mov	r3, r9
   da7a4:	f001 fe2e 	bl	dc404 <__aeabi_dsub>
   da7a8:	4622      	mov	r2, r4
   da7aa:	462b      	mov	r3, r5
   da7ac:	f001 ffe2 	bl	dc774 <__aeabi_dmul>
   da7b0:	4632      	mov	r2, r6
   da7b2:	463b      	mov	r3, r7
   da7b4:	4606      	mov	r6, r0
   da7b6:	460f      	mov	r7, r1
   da7b8:	4650      	mov	r0, sl
   da7ba:	4659      	mov	r1, fp
   da7bc:	f001 ffda 	bl	dc774 <__aeabi_dmul>
   da7c0:	4602      	mov	r2, r0
   da7c2:	460b      	mov	r3, r1
   da7c4:	4630      	mov	r0, r6
   da7c6:	4639      	mov	r1, r7
   da7c8:	f001 fe1e 	bl	dc408 <__adddf3>
   da7cc:	4642      	mov	r2, r8
   da7ce:	4682      	mov	sl, r0
   da7d0:	468b      	mov	fp, r1
   da7d2:	464b      	mov	r3, r9
   da7d4:	4620      	mov	r0, r4
   da7d6:	4629      	mov	r1, r5
   da7d8:	f001 ffcc 	bl	dc774 <__aeabi_dmul>
   da7dc:	4606      	mov	r6, r0
   da7de:	460f      	mov	r7, r1
   da7e0:	463b      	mov	r3, r7
   da7e2:	4650      	mov	r0, sl
   da7e4:	4659      	mov	r1, fp
   da7e6:	4632      	mov	r2, r6
   da7e8:	f001 fe0e 	bl	dc408 <__adddf3>
   da7ec:	4bc4      	ldr	r3, [pc, #784]	; (dab00 <__ieee754_pow+0x948>)
   da7ee:	4299      	cmp	r1, r3
   da7f0:	4604      	mov	r4, r0
   da7f2:	460d      	mov	r5, r1
   da7f4:	4688      	mov	r8, r1
   da7f6:	f340 8117 	ble.w	daa28 <__ieee754_pow+0x870>
   da7fa:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   da7fe:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   da802:	4303      	orrs	r3, r0
   da804:	f040 822a 	bne.w	dac5c <__ieee754_pow+0xaa4>
   da808:	a3a5      	add	r3, pc, #660	; (adr r3, daaa0 <__ieee754_pow+0x8e8>)
   da80a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da80e:	4650      	mov	r0, sl
   da810:	4659      	mov	r1, fp
   da812:	f001 fdf9 	bl	dc408 <__adddf3>
   da816:	4632      	mov	r2, r6
   da818:	ec41 0b18 	vmov	d8, r0, r1
   da81c:	463b      	mov	r3, r7
   da81e:	4620      	mov	r0, r4
   da820:	4629      	mov	r1, r5
   da822:	f001 fdef 	bl	dc404 <__aeabi_dsub>
   da826:	4602      	mov	r2, r0
   da828:	460b      	mov	r3, r1
   da82a:	ec51 0b18 	vmov	r0, r1, d8
   da82e:	f002 fa31 	bl	dcc94 <__aeabi_dcmpgt>
   da832:	2800      	cmp	r0, #0
   da834:	f040 8212 	bne.w	dac5c <__ieee754_pow+0xaa4>
   da838:	f3c8 530a 	ubfx	r3, r8, #20, #11
   da83c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   da840:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   da844:	fa42 f303 	asr.w	r3, r2, r3
   da848:	4443      	add	r3, r8
   da84a:	49ae      	ldr	r1, [pc, #696]	; (dab04 <__ieee754_pow+0x94c>)
   da84c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   da850:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   da854:	fa41 fc02 	asr.w	ip, r1, r2
   da858:	f3c3 0513 	ubfx	r5, r3, #0, #20
   da85c:	ea23 010c 	bic.w	r1, r3, ip
   da860:	f1c2 0414 	rsb	r4, r2, #20
   da864:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   da868:	f1b8 0f00 	cmp.w	r8, #0
   da86c:	460b      	mov	r3, r1
   da86e:	fa45 f104 	asr.w	r1, r5, r4
   da872:	9103      	str	r1, [sp, #12]
   da874:	f04f 0000 	mov.w	r0, #0
   da878:	bfb8      	it	lt
   da87a:	4249      	neglt	r1, r1
   da87c:	4602      	mov	r2, r0
   da87e:	bfb8      	it	lt
   da880:	9103      	strlt	r1, [sp, #12]
   da882:	4630      	mov	r0, r6
   da884:	4639      	mov	r1, r7
   da886:	f001 fdbd 	bl	dc404 <__aeabi_dsub>
   da88a:	4606      	mov	r6, r0
   da88c:	460f      	mov	r7, r1
   da88e:	463b      	mov	r3, r7
   da890:	4650      	mov	r0, sl
   da892:	4659      	mov	r1, fp
   da894:	4632      	mov	r2, r6
   da896:	f001 fdb7 	bl	dc408 <__adddf3>
   da89a:	9b03      	ldr	r3, [sp, #12]
   da89c:	051b      	lsls	r3, r3, #20
   da89e:	9300      	str	r3, [sp, #0]
   da8a0:	460d      	mov	r5, r1
   da8a2:	2400      	movs	r4, #0
   da8a4:	a380      	add	r3, pc, #512	; (adr r3, daaa8 <__ieee754_pow+0x8f0>)
   da8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   da8aa:	4620      	mov	r0, r4
   da8ac:	4629      	mov	r1, r5
   da8ae:	f001 ff61 	bl	dc774 <__aeabi_dmul>
   da8b2:	4632      	mov	r2, r6
   da8b4:	4680      	mov	r8, r0
   da8b6:	4689      	mov	r9, r1
   da8b8:	463b      	mov	r3, r7
   da8ba:	4620      	mov	r0, r4
   da8bc:	4629      	mov	r1, r5
   da8be:	f001 fda1 	bl	dc404 <__aeabi_dsub>
   da8c2:	4602      	mov	r2, r0
   da8c4:	460b      	mov	r3, r1
   da8c6:	4650      	mov	r0, sl
   da8c8:	4659      	mov	r1, fp
   da8ca:	f001 fd9b 	bl	dc404 <__aeabi_dsub>
   da8ce:	a378      	add	r3, pc, #480	; (adr r3, daab0 <__ieee754_pow+0x8f8>)
   da8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   da8d4:	f001 ff4e 	bl	dc774 <__aeabi_dmul>
   da8d8:	a377      	add	r3, pc, #476	; (adr r3, daab8 <__ieee754_pow+0x900>)
   da8da:	e9d3 2300 	ldrd	r2, r3, [r3]
   da8de:	4606      	mov	r6, r0
   da8e0:	460f      	mov	r7, r1
   da8e2:	4620      	mov	r0, r4
   da8e4:	4629      	mov	r1, r5
   da8e6:	f001 ff45 	bl	dc774 <__aeabi_dmul>
   da8ea:	4602      	mov	r2, r0
   da8ec:	460b      	mov	r3, r1
   da8ee:	4630      	mov	r0, r6
   da8f0:	4639      	mov	r1, r7
   da8f2:	f001 fd89 	bl	dc408 <__adddf3>
   da8f6:	4606      	mov	r6, r0
   da8f8:	460f      	mov	r7, r1
   da8fa:	4632      	mov	r2, r6
   da8fc:	463b      	mov	r3, r7
   da8fe:	4640      	mov	r0, r8
   da900:	4649      	mov	r1, r9
   da902:	f001 fd81 	bl	dc408 <__adddf3>
   da906:	4642      	mov	r2, r8
   da908:	464b      	mov	r3, r9
   da90a:	4604      	mov	r4, r0
   da90c:	460d      	mov	r5, r1
   da90e:	f001 fd79 	bl	dc404 <__aeabi_dsub>
   da912:	4602      	mov	r2, r0
   da914:	460b      	mov	r3, r1
   da916:	4630      	mov	r0, r6
   da918:	4639      	mov	r1, r7
   da91a:	f001 fd73 	bl	dc404 <__aeabi_dsub>
   da91e:	4622      	mov	r2, r4
   da920:	4682      	mov	sl, r0
   da922:	468b      	mov	fp, r1
   da924:	462b      	mov	r3, r5
   da926:	4620      	mov	r0, r4
   da928:	4629      	mov	r1, r5
   da92a:	f001 ff23 	bl	dc774 <__aeabi_dmul>
   da92e:	a364      	add	r3, pc, #400	; (adr r3, daac0 <__ieee754_pow+0x908>)
   da930:	e9d3 2300 	ldrd	r2, r3, [r3]
   da934:	4606      	mov	r6, r0
   da936:	460f      	mov	r7, r1
   da938:	f001 ff1c 	bl	dc774 <__aeabi_dmul>
   da93c:	a362      	add	r3, pc, #392	; (adr r3, daac8 <__ieee754_pow+0x910>)
   da93e:	e9d3 2300 	ldrd	r2, r3, [r3]
   da942:	f001 fd5f 	bl	dc404 <__aeabi_dsub>
   da946:	4632      	mov	r2, r6
   da948:	463b      	mov	r3, r7
   da94a:	f001 ff13 	bl	dc774 <__aeabi_dmul>
   da94e:	a360      	add	r3, pc, #384	; (adr r3, daad0 <__ieee754_pow+0x918>)
   da950:	e9d3 2300 	ldrd	r2, r3, [r3]
   da954:	f001 fd58 	bl	dc408 <__adddf3>
   da958:	4632      	mov	r2, r6
   da95a:	463b      	mov	r3, r7
   da95c:	f001 ff0a 	bl	dc774 <__aeabi_dmul>
   da960:	a35d      	add	r3, pc, #372	; (adr r3, daad8 <__ieee754_pow+0x920>)
   da962:	e9d3 2300 	ldrd	r2, r3, [r3]
   da966:	f001 fd4d 	bl	dc404 <__aeabi_dsub>
   da96a:	4632      	mov	r2, r6
   da96c:	463b      	mov	r3, r7
   da96e:	f001 ff01 	bl	dc774 <__aeabi_dmul>
   da972:	a35b      	add	r3, pc, #364	; (adr r3, daae0 <__ieee754_pow+0x928>)
   da974:	e9d3 2300 	ldrd	r2, r3, [r3]
   da978:	f001 fd46 	bl	dc408 <__adddf3>
   da97c:	4632      	mov	r2, r6
   da97e:	463b      	mov	r3, r7
   da980:	f001 fef8 	bl	dc774 <__aeabi_dmul>
   da984:	4602      	mov	r2, r0
   da986:	460b      	mov	r3, r1
   da988:	4620      	mov	r0, r4
   da98a:	4629      	mov	r1, r5
   da98c:	f001 fd3a 	bl	dc404 <__aeabi_dsub>
   da990:	4606      	mov	r6, r0
   da992:	460f      	mov	r7, r1
   da994:	4632      	mov	r2, r6
   da996:	463b      	mov	r3, r7
   da998:	4620      	mov	r0, r4
   da99a:	4629      	mov	r1, r5
   da99c:	f001 feea 	bl	dc774 <__aeabi_dmul>
   da9a0:	2200      	movs	r2, #0
   da9a2:	4680      	mov	r8, r0
   da9a4:	4689      	mov	r9, r1
   da9a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da9aa:	4630      	mov	r0, r6
   da9ac:	4639      	mov	r1, r7
   da9ae:	f001 fd29 	bl	dc404 <__aeabi_dsub>
   da9b2:	4602      	mov	r2, r0
   da9b4:	460b      	mov	r3, r1
   da9b6:	4640      	mov	r0, r8
   da9b8:	4649      	mov	r1, r9
   da9ba:	f002 f805 	bl	dc9c8 <__aeabi_ddiv>
   da9be:	4652      	mov	r2, sl
   da9c0:	4606      	mov	r6, r0
   da9c2:	460f      	mov	r7, r1
   da9c4:	465b      	mov	r3, fp
   da9c6:	4620      	mov	r0, r4
   da9c8:	4629      	mov	r1, r5
   da9ca:	f001 fed3 	bl	dc774 <__aeabi_dmul>
   da9ce:	4652      	mov	r2, sl
   da9d0:	465b      	mov	r3, fp
   da9d2:	f001 fd19 	bl	dc408 <__adddf3>
   da9d6:	4602      	mov	r2, r0
   da9d8:	460b      	mov	r3, r1
   da9da:	4630      	mov	r0, r6
   da9dc:	4639      	mov	r1, r7
   da9de:	f001 fd11 	bl	dc404 <__aeabi_dsub>
   da9e2:	4622      	mov	r2, r4
   da9e4:	462b      	mov	r3, r5
   da9e6:	f001 fd0d 	bl	dc404 <__aeabi_dsub>
   da9ea:	4602      	mov	r2, r0
   da9ec:	460b      	mov	r3, r1
   da9ee:	2000      	movs	r0, #0
   da9f0:	4945      	ldr	r1, [pc, #276]	; (dab08 <__ieee754_pow+0x950>)
   da9f2:	f001 fd07 	bl	dc404 <__aeabi_dsub>
   da9f6:	460b      	mov	r3, r1
   da9f8:	9900      	ldr	r1, [sp, #0]
   da9fa:	4419      	add	r1, r3
   da9fc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   daa00:	4602      	mov	r2, r0
   daa02:	f2c0 8169 	blt.w	dacd8 <__ieee754_pow+0xb20>
   daa06:	4610      	mov	r0, r2
   daa08:	ec53 2b19 	vmov	r2, r3, d9
   daa0c:	f001 feb2 	bl	dc774 <__aeabi_dmul>
   daa10:	e9cd 0100 	strd	r0, r1, [sp]
   daa14:	e41e      	b.n	da254 <__ieee754_pow+0x9c>
   daa16:	f1bb 0f00 	cmp.w	fp, #0
   daa1a:	f6ff ac95 	blt.w	da348 <__ieee754_pow+0x190>
   daa1e:	ed9f 7b32 	vldr	d7, [pc, #200]	; daae8 <__ieee754_pow+0x930>
   daa22:	ed8d 7b00 	vstr	d7, [sp]
   daa26:	e415      	b.n	da254 <__ieee754_pow+0x9c>
   daa28:	f8df c0e4 	ldr.w	ip, [pc, #228]	; dab10 <__ieee754_pow+0x958>
   daa2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   daa30:	4563      	cmp	r3, ip
   daa32:	f340 810b 	ble.w	dac4c <__ieee754_pow+0xa94>
   daa36:	4b35      	ldr	r3, [pc, #212]	; (dab0c <__ieee754_pow+0x954>)
   daa38:	440b      	add	r3, r1
   daa3a:	4303      	orrs	r3, r0
   daa3c:	d10a      	bne.n	daa54 <__ieee754_pow+0x89c>
   daa3e:	4632      	mov	r2, r6
   daa40:	463b      	mov	r3, r7
   daa42:	f001 fcdf 	bl	dc404 <__aeabi_dsub>
   daa46:	4652      	mov	r2, sl
   daa48:	465b      	mov	r3, fp
   daa4a:	f002 f919 	bl	dcc80 <__aeabi_dcmpge>
   daa4e:	2800      	cmp	r0, #0
   daa50:	f43f aef2 	beq.w	da838 <__ieee754_pow+0x680>
   daa54:	a326      	add	r3, pc, #152	; (adr r3, daaf0 <__ieee754_pow+0x938>)
   daa56:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa5a:	ec51 0b19 	vmov	r0, r1, d9
   daa5e:	f001 fe89 	bl	dc774 <__aeabi_dmul>
   daa62:	a323      	add	r3, pc, #140	; (adr r3, daaf0 <__ieee754_pow+0x938>)
   daa64:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa68:	f001 fe84 	bl	dc774 <__aeabi_dmul>
   daa6c:	e9cd 0100 	strd	r0, r1, [sp]
   daa70:	f7ff bbf0 	b.w	da254 <__ieee754_pow+0x9c>
   daa74:	ed9f 7b20 	vldr	d7, [pc, #128]	; daaf8 <__ieee754_pow+0x940>
   daa78:	eeb0 9a47 	vmov.f32	s18, s14
   daa7c:	eef0 9a67 	vmov.f32	s19, s15
   daa80:	e686      	b.n	da790 <__ieee754_pow+0x5d8>
   daa82:	f1bb 0f00 	cmp.w	fp, #0
   daa86:	daca      	bge.n	daa1e <__ieee754_pow+0x866>
   daa88:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   daa8c:	9600      	str	r6, [sp, #0]
   daa8e:	9301      	str	r3, [sp, #4]
   daa90:	f7ff bbe0 	b.w	da254 <__ieee754_pow+0x9c>
   daa94:	f3af 8000 	nop.w
   daa98:	00000000 	.word	0x00000000
   daa9c:	bff00000 	.word	0xbff00000
   daaa0:	652b82fe 	.word	0x652b82fe
   daaa4:	3c971547 	.word	0x3c971547
   daaa8:	00000000 	.word	0x00000000
   daaac:	3fe62e43 	.word	0x3fe62e43
   daab0:	fefa39ef 	.word	0xfefa39ef
   daab4:	3fe62e42 	.word	0x3fe62e42
   daab8:	0ca86c39 	.word	0x0ca86c39
   daabc:	be205c61 	.word	0xbe205c61
   daac0:	72bea4d0 	.word	0x72bea4d0
   daac4:	3e663769 	.word	0x3e663769
   daac8:	c5d26bf1 	.word	0xc5d26bf1
   daacc:	3ebbbd41 	.word	0x3ebbbd41
   daad0:	af25de2c 	.word	0xaf25de2c
   daad4:	3f11566a 	.word	0x3f11566a
   daad8:	16bebd93 	.word	0x16bebd93
   daadc:	3f66c16c 	.word	0x3f66c16c
   daae0:	5555553e 	.word	0x5555553e
   daae4:	3fc55555 	.word	0x3fc55555
	...
   daaf0:	c2f8f359 	.word	0xc2f8f359
   daaf4:	01a56e1f 	.word	0x01a56e1f
   daaf8:	00000000 	.word	0x00000000
   daafc:	3ff00000 	.word	0x3ff00000
   dab00:	408fffff 	.word	0x408fffff
   dab04:	000fffff 	.word	0x000fffff
   dab08:	3ff00000 	.word	0x3ff00000
   dab0c:	3f6f3400 	.word	0x3f6f3400
   dab10:	4090cbff 	.word	0x4090cbff
   dab14:	4598      	cmp	r8, r3
   dab16:	f6ff af7e 	blt.w	daa16 <__ieee754_pow+0x85e>
   dab1a:	4b91      	ldr	r3, [pc, #580]	; (dad60 <__ieee754_pow+0xba8>)
   dab1c:	4598      	cmp	r8, r3
   dab1e:	f73f ac0f 	bgt.w	da340 <__ieee754_pow+0x188>
   dab22:	4b8f      	ldr	r3, [pc, #572]	; (dad60 <__ieee754_pow+0xba8>)
   dab24:	2200      	movs	r2, #0
   dab26:	e9dd 0100 	ldrd	r0, r1, [sp]
   dab2a:	f001 fc6b 	bl	dc404 <__aeabi_dsub>
   dab2e:	a378      	add	r3, pc, #480	; (adr r3, dad10 <__ieee754_pow+0xb58>)
   dab30:	e9d3 2300 	ldrd	r2, r3, [r3]
   dab34:	4604      	mov	r4, r0
   dab36:	460d      	mov	r5, r1
   dab38:	f001 fe1c 	bl	dc774 <__aeabi_dmul>
   dab3c:	a376      	add	r3, pc, #472	; (adr r3, dad18 <__ieee754_pow+0xb60>)
   dab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dab42:	4682      	mov	sl, r0
   dab44:	468b      	mov	fp, r1
   dab46:	4620      	mov	r0, r4
   dab48:	4629      	mov	r1, r5
   dab4a:	f001 fe13 	bl	dc774 <__aeabi_dmul>
   dab4e:	4b85      	ldr	r3, [pc, #532]	; (dad64 <__ieee754_pow+0xbac>)
   dab50:	4680      	mov	r8, r0
   dab52:	4689      	mov	r9, r1
   dab54:	2200      	movs	r2, #0
   dab56:	4620      	mov	r0, r4
   dab58:	4629      	mov	r1, r5
   dab5a:	f001 fe0b 	bl	dc774 <__aeabi_dmul>
   dab5e:	4602      	mov	r2, r0
   dab60:	460b      	mov	r3, r1
   dab62:	a16f      	add	r1, pc, #444	; (adr r1, dad20 <__ieee754_pow+0xb68>)
   dab64:	e9d1 0100 	ldrd	r0, r1, [r1]
   dab68:	f001 fc4c 	bl	dc404 <__aeabi_dsub>
   dab6c:	4622      	mov	r2, r4
   dab6e:	462b      	mov	r3, r5
   dab70:	f001 fe00 	bl	dc774 <__aeabi_dmul>
   dab74:	4602      	mov	r2, r0
   dab76:	460b      	mov	r3, r1
   dab78:	2000      	movs	r0, #0
   dab7a:	497b      	ldr	r1, [pc, #492]	; (dad68 <__ieee754_pow+0xbb0>)
   dab7c:	f001 fc42 	bl	dc404 <__aeabi_dsub>
   dab80:	4622      	mov	r2, r4
   dab82:	462b      	mov	r3, r5
   dab84:	4604      	mov	r4, r0
   dab86:	460d      	mov	r5, r1
   dab88:	4610      	mov	r0, r2
   dab8a:	4619      	mov	r1, r3
   dab8c:	f001 fdf2 	bl	dc774 <__aeabi_dmul>
   dab90:	4602      	mov	r2, r0
   dab92:	460b      	mov	r3, r1
   dab94:	4620      	mov	r0, r4
   dab96:	4629      	mov	r1, r5
   dab98:	f001 fdec 	bl	dc774 <__aeabi_dmul>
   dab9c:	a362      	add	r3, pc, #392	; (adr r3, dad28 <__ieee754_pow+0xb70>)
   dab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   daba2:	f001 fde7 	bl	dc774 <__aeabi_dmul>
   daba6:	4602      	mov	r2, r0
   daba8:	460b      	mov	r3, r1
   dabaa:	4640      	mov	r0, r8
   dabac:	4649      	mov	r1, r9
   dabae:	f001 fc29 	bl	dc404 <__aeabi_dsub>
   dabb2:	4680      	mov	r8, r0
   dabb4:	4689      	mov	r9, r1
   dabb6:	4650      	mov	r0, sl
   dabb8:	4659      	mov	r1, fp
   dabba:	4642      	mov	r2, r8
   dabbc:	464b      	mov	r3, r9
   dabbe:	f001 fc23 	bl	dc408 <__adddf3>
   dabc2:	2400      	movs	r4, #0
   dabc4:	4652      	mov	r2, sl
   dabc6:	465b      	mov	r3, fp
   dabc8:	4620      	mov	r0, r4
   dabca:	460d      	mov	r5, r1
   dabcc:	f001 fc1a 	bl	dc404 <__aeabi_dsub>
   dabd0:	4602      	mov	r2, r0
   dabd2:	460b      	mov	r3, r1
   dabd4:	4640      	mov	r0, r8
   dabd6:	4649      	mov	r1, r9
   dabd8:	f001 fc14 	bl	dc404 <__aeabi_dsub>
   dabdc:	4682      	mov	sl, r0
   dabde:	468b      	mov	fp, r1
   dabe0:	e5ca      	b.n	da778 <__ieee754_pow+0x5c0>
   dabe2:	ed9f 7b53 	vldr	d7, [pc, #332]	; dad30 <__ieee754_pow+0xb78>
   dabe6:	eeb0 ba47 	vmov.f32	s22, s14
   dabea:	eef0 ba67 	vmov.f32	s23, s15
   dabee:	eeb0 ca47 	vmov.f32	s24, s14
   dabf2:	eef0 ca67 	vmov.f32	s25, s15
   dabf6:	ed9f 7b50 	vldr	d7, [pc, #320]	; dad38 <__ieee754_pow+0xb80>
   dabfa:	f04f 0900 	mov.w	r9, #0
   dabfe:	ec54 3b17 	vmov	r3, r4, d7
   dac02:	e41d      	b.n	da440 <__ieee754_pow+0x288>
   dac04:	2000      	movs	r0, #0
   dac06:	f7ff bbf3 	b.w	da3f0 <__ieee754_pow+0x238>
   dac0a:	4955      	ldr	r1, [pc, #340]	; (dad60 <__ieee754_pow+0xba8>)
   dac0c:	4622      	mov	r2, r4
   dac0e:	462b      	mov	r3, r5
   dac10:	2000      	movs	r0, #0
   dac12:	f001 fed9 	bl	dc9c8 <__aeabi_ddiv>
   dac16:	e9cd 0100 	strd	r0, r1, [sp]
   dac1a:	f7ff bb1b 	b.w	da254 <__ieee754_pow+0x9c>
   dac1e:	4622      	mov	r2, r4
   dac20:	462b      	mov	r3, r5
   dac22:	4620      	mov	r0, r4
   dac24:	4629      	mov	r1, r5
   dac26:	f001 fda5 	bl	dc774 <__aeabi_dmul>
   dac2a:	e9cd 0100 	strd	r0, r1, [sp]
   dac2e:	f7ff bb11 	b.w	da254 <__ieee754_pow+0x9c>
   dac32:	2b00      	cmp	r3, #0
   dac34:	d142      	bne.n	dacbc <__ieee754_pow+0xb04>
   dac36:	f1c1 0114 	rsb	r1, r1, #20
   dac3a:	fa4a f001 	asr.w	r0, sl, r1
   dac3e:	fa00 f101 	lsl.w	r1, r0, r1
   dac42:	4551      	cmp	r1, sl
   dac44:	d05a      	beq.n	dacfc <__ieee754_pow+0xb44>
   dac46:	9303      	str	r3, [sp, #12]
   dac48:	f7ff bae0 	b.w	da20c <__ieee754_pow+0x54>
   dac4c:	4a46      	ldr	r2, [pc, #280]	; (dad68 <__ieee754_pow+0xbb0>)
   dac4e:	4293      	cmp	r3, r2
   dac50:	dc5b      	bgt.n	dad0a <__ieee754_pow+0xb52>
   dac52:	e9dd 1200 	ldrd	r1, r2, [sp]
   dac56:	9100      	str	r1, [sp, #0]
   dac58:	9103      	str	r1, [sp, #12]
   dac5a:	e622      	b.n	da8a2 <__ieee754_pow+0x6ea>
   dac5c:	a338      	add	r3, pc, #224	; (adr r3, dad40 <__ieee754_pow+0xb88>)
   dac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dac62:	ec51 0b19 	vmov	r0, r1, d9
   dac66:	f001 fd85 	bl	dc774 <__aeabi_dmul>
   dac6a:	a335      	add	r3, pc, #212	; (adr r3, dad40 <__ieee754_pow+0xb88>)
   dac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dac70:	f001 fd80 	bl	dc774 <__aeabi_dmul>
   dac74:	e9cd 0100 	strd	r0, r1, [sp]
   dac78:	f7ff baec 	b.w	da254 <__ieee754_pow+0x9c>
   dac7c:	9b03      	ldr	r3, [sp, #12]
   dac7e:	2b01      	cmp	r3, #1
   dac80:	f47f aae8 	bne.w	da254 <__ieee754_pow+0x9c>
   dac84:	e9dd 2100 	ldrd	r2, r1, [sp]
   dac88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dac8c:	e9cd 2300 	strd	r2, r3, [sp]
   dac90:	f7ff bae0 	b.w	da254 <__ieee754_pow+0x9c>
   dac94:	ed9f 7b2c 	vldr	d7, [pc, #176]	; dad48 <__ieee754_pow+0xb90>
   dac98:	eeb0 ba47 	vmov.f32	s22, s14
   dac9c:	eef0 ba67 	vmov.f32	s23, s15
   daca0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; dad50 <__ieee754_pow+0xb98>
   daca4:	eeb0 ca47 	vmov.f32	s24, s14
   daca8:	eef0 ca67 	vmov.f32	s25, s15
   dacac:	ed9f 7b2a 	vldr	d7, [pc, #168]	; dad58 <__ieee754_pow+0xba0>
   dacb0:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   dacb4:	ec54 3b17 	vmov	r3, r4, d7
   dacb8:	f7ff bbc2 	b.w	da440 <__ieee754_pow+0x288>
   dacbc:	ec45 4b10 	vmov	d0, r4, r5
   dacc0:	9203      	str	r2, [sp, #12]
   dacc2:	f001 f8bd 	bl	dbe40 <fabs>
   dacc6:	9a03      	ldr	r2, [sp, #12]
   dacc8:	ed8d 0b00 	vstr	d0, [sp]
   daccc:	2a00      	cmp	r2, #0
   dacce:	f47f ab61 	bne.w	da394 <__ieee754_pow+0x1dc>
   dacd2:	9203      	str	r2, [sp, #12]
   dacd4:	f7ff baf5 	b.w	da2c2 <__ieee754_pow+0x10a>
   dacd8:	9803      	ldr	r0, [sp, #12]
   dacda:	ec43 2b10 	vmov	d0, r2, r3
   dacde:	f001 f963 	bl	dbfa8 <scalbn>
   dace2:	ec51 0b10 	vmov	r0, r1, d0
   dace6:	e68f      	b.n	daa08 <__ieee754_pow+0x850>
   dace8:	f000 0001 	and.w	r0, r0, #1
   dacec:	f1c0 0102 	rsb	r1, r0, #2
   dacf0:	9103      	str	r1, [sp, #12]
   dacf2:	2b00      	cmp	r3, #0
   dacf4:	f43f aa8a 	beq.w	da20c <__ieee754_pow+0x54>
   dacf8:	f7ff bada 	b.w	da2b0 <__ieee754_pow+0xf8>
   dacfc:	f000 0001 	and.w	r0, r0, #1
   dad00:	f1c0 0302 	rsb	r3, r0, #2
   dad04:	9303      	str	r3, [sp, #12]
   dad06:	f7ff ba81 	b.w	da20c <__ieee754_pow+0x54>
   dad0a:	151b      	asrs	r3, r3, #20
   dad0c:	e596      	b.n	da83c <__ieee754_pow+0x684>
   dad0e:	bf00      	nop
   dad10:	60000000 	.word	0x60000000
   dad14:	3ff71547 	.word	0x3ff71547
   dad18:	f85ddf44 	.word	0xf85ddf44
   dad1c:	3e54ae0b 	.word	0x3e54ae0b
   dad20:	55555555 	.word	0x55555555
   dad24:	3fd55555 	.word	0x3fd55555
   dad28:	652b82fe 	.word	0x652b82fe
   dad2c:	3ff71547 	.word	0x3ff71547
	...
   dad3c:	3ff00000 	.word	0x3ff00000
   dad40:	8800759c 	.word	0x8800759c
   dad44:	7e37e43c 	.word	0x7e37e43c
   dad48:	40000000 	.word	0x40000000
   dad4c:	3fe2b803 	.word	0x3fe2b803
   dad50:	43cfd006 	.word	0x43cfd006
   dad54:	3e4cfdeb 	.word	0x3e4cfdeb
   dad58:	00000000 	.word	0x00000000
   dad5c:	3ff80000 	.word	0x3ff80000
   dad60:	3ff00000 	.word	0x3ff00000
   dad64:	3fd00000 	.word	0x3fd00000
   dad68:	3fe00000 	.word	0x3fe00000

000dad6c <__ieee754_sqrt>:
   dad6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dad70:	4a5f      	ldr	r2, [pc, #380]	; (daef0 <__ieee754_sqrt+0x184>)
   dad72:	ec57 6b10 	vmov	r6, r7, d0
   dad76:	43ba      	bics	r2, r7
   dad78:	f000 8098 	beq.w	daeac <__ieee754_sqrt+0x140>
   dad7c:	2f00      	cmp	r7, #0
   dad7e:	ee10 4a10 	vmov	r4, s0
   dad82:	463b      	mov	r3, r7
   dad84:	dd4e      	ble.n	dae24 <__ieee754_sqrt+0xb8>
   dad86:	1539      	asrs	r1, r7, #20
   dad88:	d05b      	beq.n	dae42 <__ieee754_sqrt+0xd6>
   dad8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   dad8e:	07ca      	lsls	r2, r1, #31
   dad90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dad94:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   dad98:	d403      	bmi.n	dada2 <__ieee754_sqrt+0x36>
   dad9a:	005b      	lsls	r3, r3, #1
   dad9c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   dada0:	0064      	lsls	r4, r4, #1
   dada2:	0fe2      	lsrs	r2, r4, #31
   dada4:	f04f 0c00 	mov.w	ip, #0
   dada8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   dadac:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   dadb0:	0064      	lsls	r4, r4, #1
   dadb2:	4666      	mov	r6, ip
   dadb4:	2516      	movs	r5, #22
   dadb6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   dadba:	18b1      	adds	r1, r6, r2
   dadbc:	4299      	cmp	r1, r3
   dadbe:	dc02      	bgt.n	dadc6 <__ieee754_sqrt+0x5a>
   dadc0:	1a5b      	subs	r3, r3, r1
   dadc2:	188e      	adds	r6, r1, r2
   dadc4:	4494      	add	ip, r2
   dadc6:	005b      	lsls	r3, r3, #1
   dadc8:	3d01      	subs	r5, #1
   dadca:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   dadce:	ea4f 0252 	mov.w	r2, r2, lsr #1
   dadd2:	ea4f 0444 	mov.w	r4, r4, lsl #1
   dadd6:	d1f0      	bne.n	dadba <__ieee754_sqrt+0x4e>
   dadd8:	462f      	mov	r7, r5
   dadda:	2020      	movs	r0, #32
   daddc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   dade0:	e009      	b.n	dadf6 <__ieee754_sqrt+0x8a>
   dade2:	d03e      	beq.n	dae62 <__ieee754_sqrt+0xf6>
   dade4:	0fe1      	lsrs	r1, r4, #31
   dade6:	3801      	subs	r0, #1
   dade8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   dadec:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   dadf0:	ea4f 0444 	mov.w	r4, r4, lsl #1
   dadf4:	d03e      	beq.n	dae74 <__ieee754_sqrt+0x108>
   dadf6:	42b3      	cmp	r3, r6
   dadf8:	eb02 0105 	add.w	r1, r2, r5
   dadfc:	ddf1      	ble.n	dade2 <__ieee754_sqrt+0x76>
   dadfe:	2900      	cmp	r1, #0
   dae00:	eb01 0502 	add.w	r5, r1, r2
   dae04:	db09      	blt.n	dae1a <__ieee754_sqrt+0xae>
   dae06:	46b0      	mov	r8, r6
   dae08:	1b9b      	subs	r3, r3, r6
   dae0a:	42a1      	cmp	r1, r4
   dae0c:	bf88      	it	hi
   dae0e:	f103 33ff 	addhi.w	r3, r3, #4294967295
   dae12:	1a64      	subs	r4, r4, r1
   dae14:	4417      	add	r7, r2
   dae16:	4646      	mov	r6, r8
   dae18:	e7e4      	b.n	dade4 <__ieee754_sqrt+0x78>
   dae1a:	2d00      	cmp	r5, #0
   dae1c:	dbf3      	blt.n	dae06 <__ieee754_sqrt+0x9a>
   dae1e:	f106 0801 	add.w	r8, r6, #1
   dae22:	e7f1      	b.n	dae08 <__ieee754_sqrt+0x9c>
   dae24:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   dae28:	4332      	orrs	r2, r6
   dae2a:	d036      	beq.n	dae9a <__ieee754_sqrt+0x12e>
   dae2c:	2f00      	cmp	r7, #0
   dae2e:	d14d      	bne.n	daecc <__ieee754_sqrt+0x160>
   dae30:	4639      	mov	r1, r7
   dae32:	0ae2      	lsrs	r2, r4, #11
   dae34:	3915      	subs	r1, #21
   dae36:	0564      	lsls	r4, r4, #21
   dae38:	4613      	mov	r3, r2
   dae3a:	2a00      	cmp	r2, #0
   dae3c:	d0f9      	beq.n	dae32 <__ieee754_sqrt+0xc6>
   dae3e:	02d7      	lsls	r7, r2, #11
   dae40:	d451      	bmi.n	daee6 <__ieee754_sqrt+0x17a>
   dae42:	2000      	movs	r0, #0
   dae44:	005b      	lsls	r3, r3, #1
   dae46:	02de      	lsls	r6, r3, #11
   dae48:	4605      	mov	r5, r0
   dae4a:	f100 0001 	add.w	r0, r0, #1
   dae4e:	d5f9      	bpl.n	dae44 <__ieee754_sqrt+0xd8>
   dae50:	461a      	mov	r2, r3
   dae52:	4623      	mov	r3, r4
   dae54:	4084      	lsls	r4, r0
   dae56:	f1c0 0020 	rsb	r0, r0, #32
   dae5a:	40c3      	lsrs	r3, r0
   dae5c:	4313      	orrs	r3, r2
   dae5e:	1b49      	subs	r1, r1, r5
   dae60:	e793      	b.n	dad8a <__ieee754_sqrt+0x1e>
   dae62:	42a1      	cmp	r1, r4
   dae64:	d8be      	bhi.n	dade4 <__ieee754_sqrt+0x78>
   dae66:	2900      	cmp	r1, #0
   dae68:	eb01 0502 	add.w	r5, r1, r2
   dae6c:	dbd5      	blt.n	dae1a <__ieee754_sqrt+0xae>
   dae6e:	4698      	mov	r8, r3
   dae70:	2300      	movs	r3, #0
   dae72:	e7ce      	b.n	dae12 <__ieee754_sqrt+0xa6>
   dae74:	4323      	orrs	r3, r4
   dae76:	d112      	bne.n	dae9e <__ieee754_sqrt+0x132>
   dae78:	0878      	lsrs	r0, r7, #1
   dae7a:	ea4f 016c 	mov.w	r1, ip, asr #1
   dae7e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   dae82:	f01c 0f01 	tst.w	ip, #1
   dae86:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   dae8a:	bf18      	it	ne
   dae8c:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   dae90:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   dae94:	4602      	mov	r2, r0
   dae96:	ec43 2b10 	vmov	d0, r2, r3
   dae9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dae9e:	1c7b      	adds	r3, r7, #1
   daea0:	bf16      	itet	ne
   daea2:	1c78      	addne	r0, r7, #1
   daea4:	f10c 0c01 	addeq.w	ip, ip, #1
   daea8:	0840      	lsrne	r0, r0, #1
   daeaa:	e7e6      	b.n	dae7a <__ieee754_sqrt+0x10e>
   daeac:	ee10 2a10 	vmov	r2, s0
   daeb0:	ee10 0a10 	vmov	r0, s0
   daeb4:	463b      	mov	r3, r7
   daeb6:	4639      	mov	r1, r7
   daeb8:	f001 fc5c 	bl	dc774 <__aeabi_dmul>
   daebc:	4632      	mov	r2, r6
   daebe:	463b      	mov	r3, r7
   daec0:	f001 faa2 	bl	dc408 <__adddf3>
   daec4:	ec41 0b10 	vmov	d0, r0, r1
   daec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   daecc:	ee10 2a10 	vmov	r2, s0
   daed0:	4630      	mov	r0, r6
   daed2:	4639      	mov	r1, r7
   daed4:	f001 fa96 	bl	dc404 <__aeabi_dsub>
   daed8:	4602      	mov	r2, r0
   daeda:	460b      	mov	r3, r1
   daedc:	f001 fd74 	bl	dc9c8 <__aeabi_ddiv>
   daee0:	ec41 0b10 	vmov	d0, r0, r1
   daee4:	e7d9      	b.n	dae9a <__ieee754_sqrt+0x12e>
   daee6:	4623      	mov	r3, r4
   daee8:	2020      	movs	r0, #32
   daeea:	f04f 35ff 	mov.w	r5, #4294967295
   daeee:	e7b4      	b.n	dae5a <__ieee754_sqrt+0xee>
   daef0:	7ff00000 	.word	0x7ff00000

000daef4 <__ieee754_atan2f>:
   daef4:	b510      	push	{r4, lr}
   daef6:	b082      	sub	sp, #8
   daef8:	edcd 0a01 	vstr	s1, [sp, #4]
   daefc:	9b01      	ldr	r3, [sp, #4]
   daefe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   daf02:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   daf06:	eef0 7a40 	vmov.f32	s15, s0
   daf0a:	dc30      	bgt.n	daf6e <__ieee754_atan2f+0x7a>
   daf0c:	ee10 0a10 	vmov	r0, s0
   daf10:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   daf14:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   daf18:	dc29      	bgt.n	daf6e <__ieee754_atan2f+0x7a>
   daf1a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   daf1e:	d042      	beq.n	dafa6 <__ieee754_atan2f+0xb2>
   daf20:	179c      	asrs	r4, r3, #30
   daf22:	f004 0402 	and.w	r4, r4, #2
   daf26:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   daf2a:	b331      	cbz	r1, daf7a <__ieee754_atan2f+0x86>
   daf2c:	b37a      	cbz	r2, daf8e <__ieee754_atan2f+0x9a>
   daf2e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   daf32:	d040      	beq.n	dafb6 <__ieee754_atan2f+0xc2>
   daf34:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   daf38:	d029      	beq.n	daf8e <__ieee754_atan2f+0x9a>
   daf3a:	1a8a      	subs	r2, r1, r2
   daf3c:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   daf40:	ea4f 51e2 	mov.w	r1, r2, asr #23
   daf44:	da34      	bge.n	dafb0 <__ieee754_atan2f+0xbc>
   daf46:	2b00      	cmp	r3, #0
   daf48:	da42      	bge.n	dafd0 <__ieee754_atan2f+0xdc>
   daf4a:	313c      	adds	r1, #60	; 0x3c
   daf4c:	da40      	bge.n	dafd0 <__ieee754_atan2f+0xdc>
   daf4e:	ed9f 0a34 	vldr	s0, [pc, #208]	; db020 <__ieee754_atan2f+0x12c>
   daf52:	2c01      	cmp	r4, #1
   daf54:	d04e      	beq.n	daff4 <__ieee754_atan2f+0x100>
   daf56:	2c02      	cmp	r4, #2
   daf58:	d043      	beq.n	dafe2 <__ieee754_atan2f+0xee>
   daf5a:	b164      	cbz	r4, daf76 <__ieee754_atan2f+0x82>
   daf5c:	ed9f 7a31 	vldr	s14, [pc, #196]	; db024 <__ieee754_atan2f+0x130>
   daf60:	eddf 7a31 	vldr	s15, [pc, #196]	; db028 <__ieee754_atan2f+0x134>
   daf64:	ee30 0a07 	vadd.f32	s0, s0, s14
   daf68:	ee30 0a67 	vsub.f32	s0, s0, s15
   daf6c:	e003      	b.n	daf76 <__ieee754_atan2f+0x82>
   daf6e:	ed9d 7a01 	vldr	s14, [sp, #4]
   daf72:	ee37 0a27 	vadd.f32	s0, s14, s15
   daf76:	b002      	add	sp, #8
   daf78:	bd10      	pop	{r4, pc}
   daf7a:	2c02      	cmp	r4, #2
   daf7c:	d010      	beq.n	dafa0 <__ieee754_atan2f+0xac>
   daf7e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; db02c <__ieee754_atan2f+0x138>
   daf82:	2c03      	cmp	r4, #3
   daf84:	bf18      	it	ne
   daf86:	eeb0 0a67 	vmovne.f32	s0, s15
   daf8a:	b002      	add	sp, #8
   daf8c:	bd10      	pop	{r4, pc}
   daf8e:	ed9f 0a28 	vldr	s0, [pc, #160]	; db030 <__ieee754_atan2f+0x13c>
   daf92:	eddf 7a28 	vldr	s15, [pc, #160]	; db034 <__ieee754_atan2f+0x140>
   daf96:	2800      	cmp	r0, #0
   daf98:	bfb8      	it	lt
   daf9a:	eeb0 0a67 	vmovlt.f32	s0, s15
   daf9e:	e7ea      	b.n	daf76 <__ieee754_atan2f+0x82>
   dafa0:	ed9f 0a21 	vldr	s0, [pc, #132]	; db028 <__ieee754_atan2f+0x134>
   dafa4:	e7e7      	b.n	daf76 <__ieee754_atan2f+0x82>
   dafa6:	b002      	add	sp, #8
   dafa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dafac:	f001 b88e 	b.w	dc0cc <atanf>
   dafb0:	ed9f 0a1f 	vldr	s0, [pc, #124]	; db030 <__ieee754_atan2f+0x13c>
   dafb4:	e7cd      	b.n	daf52 <__ieee754_atan2f+0x5e>
   dafb6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   dafba:	f104 34ff 	add.w	r4, r4, #4294967295
   dafbe:	d020      	beq.n	db002 <__ieee754_atan2f+0x10e>
   dafc0:	2c02      	cmp	r4, #2
   dafc2:	d826      	bhi.n	db012 <__ieee754_atan2f+0x11e>
   dafc4:	4b1c      	ldr	r3, [pc, #112]	; (db038 <__ieee754_atan2f+0x144>)
   dafc6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dafca:	ed94 0a00 	vldr	s0, [r4]
   dafce:	e7d2      	b.n	daf76 <__ieee754_atan2f+0x82>
   dafd0:	ed9d 7a01 	vldr	s14, [sp, #4]
   dafd4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   dafd8:	f001 f950 	bl	dc27c <fabsf>
   dafdc:	f001 f876 	bl	dc0cc <atanf>
   dafe0:	e7b7      	b.n	daf52 <__ieee754_atan2f+0x5e>
   dafe2:	ed9f 7a10 	vldr	s14, [pc, #64]	; db024 <__ieee754_atan2f+0x130>
   dafe6:	eddf 7a10 	vldr	s15, [pc, #64]	; db028 <__ieee754_atan2f+0x134>
   dafea:	ee30 0a07 	vadd.f32	s0, s0, s14
   dafee:	ee37 0ac0 	vsub.f32	s0, s15, s0
   daff2:	e7c0      	b.n	daf76 <__ieee754_atan2f+0x82>
   daff4:	ee10 3a10 	vmov	r3, s0
   daff8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   daffc:	ee00 3a10 	vmov	s0, r3
   db000:	e7b9      	b.n	daf76 <__ieee754_atan2f+0x82>
   db002:	2c02      	cmp	r4, #2
   db004:	d808      	bhi.n	db018 <__ieee754_atan2f+0x124>
   db006:	4b0d      	ldr	r3, [pc, #52]	; (db03c <__ieee754_atan2f+0x148>)
   db008:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db00c:	ed94 0a00 	vldr	s0, [r4]
   db010:	e7b1      	b.n	daf76 <__ieee754_atan2f+0x82>
   db012:	ed9f 0a03 	vldr	s0, [pc, #12]	; db020 <__ieee754_atan2f+0x12c>
   db016:	e7ae      	b.n	daf76 <__ieee754_atan2f+0x82>
   db018:	ed9f 0a09 	vldr	s0, [pc, #36]	; db040 <__ieee754_atan2f+0x14c>
   db01c:	e7ab      	b.n	daf76 <__ieee754_atan2f+0x82>
   db01e:	bf00      	nop
   db020:	00000000 	.word	0x00000000
   db024:	33bbbd2e 	.word	0x33bbbd2e
   db028:	40490fdb 	.word	0x40490fdb
   db02c:	c0490fdb 	.word	0xc0490fdb
   db030:	3fc90fdb 	.word	0x3fc90fdb
   db034:	bfc90fdb 	.word	0xbfc90fdb
   db038:	000de770 	.word	0x000de770
   db03c:	000de764 	.word	0x000de764
   db040:	3f490fdb 	.word	0x3f490fdb

000db044 <__ieee754_rem_pio2f>:
   db044:	b570      	push	{r4, r5, r6, lr}
   db046:	ee10 3a10 	vmov	r3, s0
   db04a:	4a95      	ldr	r2, [pc, #596]	; (db2a0 <__ieee754_rem_pio2f+0x25c>)
   db04c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   db050:	4294      	cmp	r4, r2
   db052:	b086      	sub	sp, #24
   db054:	4605      	mov	r5, r0
   db056:	dd68      	ble.n	db12a <__ieee754_rem_pio2f+0xe6>
   db058:	4a92      	ldr	r2, [pc, #584]	; (db2a4 <__ieee754_rem_pio2f+0x260>)
   db05a:	4294      	cmp	r4, r2
   db05c:	ee10 6a10 	vmov	r6, s0
   db060:	dc1a      	bgt.n	db098 <__ieee754_rem_pio2f+0x54>
   db062:	2b00      	cmp	r3, #0
   db064:	eddf 7a90 	vldr	s15, [pc, #576]	; db2a8 <__ieee754_rem_pio2f+0x264>
   db068:	4a90      	ldr	r2, [pc, #576]	; (db2ac <__ieee754_rem_pio2f+0x268>)
   db06a:	f024 040f 	bic.w	r4, r4, #15
   db06e:	f340 80f1 	ble.w	db254 <__ieee754_rem_pio2f+0x210>
   db072:	4294      	cmp	r4, r2
   db074:	ee70 7a67 	vsub.f32	s15, s0, s15
   db078:	d066      	beq.n	db148 <__ieee754_rem_pio2f+0x104>
   db07a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; db2b0 <__ieee754_rem_pio2f+0x26c>
   db07e:	ee77 6ac7 	vsub.f32	s13, s15, s14
   db082:	2001      	movs	r0, #1
   db084:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db088:	edc5 6a00 	vstr	s13, [r5]
   db08c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db090:	edc5 7a01 	vstr	s15, [r5, #4]
   db094:	b006      	add	sp, #24
   db096:	bd70      	pop	{r4, r5, r6, pc}
   db098:	4a86      	ldr	r2, [pc, #536]	; (db2b4 <__ieee754_rem_pio2f+0x270>)
   db09a:	4294      	cmp	r4, r2
   db09c:	dd67      	ble.n	db16e <__ieee754_rem_pio2f+0x12a>
   db09e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   db0a2:	da49      	bge.n	db138 <__ieee754_rem_pio2f+0xf4>
   db0a4:	15e2      	asrs	r2, r4, #23
   db0a6:	3a86      	subs	r2, #134	; 0x86
   db0a8:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   db0ac:	ee07 3a90 	vmov	s15, r3
   db0b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   db0b4:	eddf 6a80 	vldr	s13, [pc, #512]	; db2b8 <__ieee754_rem_pio2f+0x274>
   db0b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   db0bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db0c0:	ed8d 7a03 	vstr	s14, [sp, #12]
   db0c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
   db0c8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   db0cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   db0d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db0d4:	ed8d 7a04 	vstr	s14, [sp, #16]
   db0d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
   db0dc:	eef5 7a40 	vcmp.f32	s15, #0.0
   db0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db0e4:	edcd 7a05 	vstr	s15, [sp, #20]
   db0e8:	f040 80a3 	bne.w	db232 <__ieee754_rem_pio2f+0x1ee>
   db0ec:	eeb5 7a40 	vcmp.f32	s14, #0.0
   db0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db0f4:	bf14      	ite	ne
   db0f6:	2302      	movne	r3, #2
   db0f8:	2301      	moveq	r3, #1
   db0fa:	4970      	ldr	r1, [pc, #448]	; (db2bc <__ieee754_rem_pio2f+0x278>)
   db0fc:	9101      	str	r1, [sp, #4]
   db0fe:	2102      	movs	r1, #2
   db100:	9100      	str	r1, [sp, #0]
   db102:	a803      	add	r0, sp, #12
   db104:	4629      	mov	r1, r5
   db106:	f000 f969 	bl	db3dc <__kernel_rem_pio2f>
   db10a:	2e00      	cmp	r6, #0
   db10c:	dac2      	bge.n	db094 <__ieee754_rem_pio2f+0x50>
   db10e:	ed95 7a00 	vldr	s14, [r5]
   db112:	edd5 7a01 	vldr	s15, [r5, #4]
   db116:	eeb1 7a47 	vneg.f32	s14, s14
   db11a:	eef1 7a67 	vneg.f32	s15, s15
   db11e:	4240      	negs	r0, r0
   db120:	ed85 7a00 	vstr	s14, [r5]
   db124:	edc5 7a01 	vstr	s15, [r5, #4]
   db128:	e7b4      	b.n	db094 <__ieee754_rem_pio2f+0x50>
   db12a:	2200      	movs	r2, #0
   db12c:	ed85 0a00 	vstr	s0, [r5]
   db130:	6042      	str	r2, [r0, #4]
   db132:	2000      	movs	r0, #0
   db134:	b006      	add	sp, #24
   db136:	bd70      	pop	{r4, r5, r6, pc}
   db138:	ee70 7a40 	vsub.f32	s15, s0, s0
   db13c:	2000      	movs	r0, #0
   db13e:	edc5 7a01 	vstr	s15, [r5, #4]
   db142:	edc5 7a00 	vstr	s15, [r5]
   db146:	e7a5      	b.n	db094 <__ieee754_rem_pio2f+0x50>
   db148:	eddf 6a5d 	vldr	s13, [pc, #372]	; db2c0 <__ieee754_rem_pio2f+0x27c>
   db14c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; db2c4 <__ieee754_rem_pio2f+0x280>
   db150:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db154:	2001      	movs	r0, #1
   db156:	ee77 6ac7 	vsub.f32	s13, s15, s14
   db15a:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db15e:	edc5 6a00 	vstr	s13, [r5]
   db162:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db166:	edc5 7a01 	vstr	s15, [r5, #4]
   db16a:	b006      	add	sp, #24
   db16c:	bd70      	pop	{r4, r5, r6, pc}
   db16e:	f001 f885 	bl	dc27c <fabsf>
   db172:	eddf 6a55 	vldr	s13, [pc, #340]	; db2c8 <__ieee754_rem_pio2f+0x284>
   db176:	ed9f 6a4c 	vldr	s12, [pc, #304]	; db2a8 <__ieee754_rem_pio2f+0x264>
   db17a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; db2b0 <__ieee754_rem_pio2f+0x26c>
   db17e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   db182:	eee0 7a26 	vfma.f32	s15, s0, s13
   db186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db18a:	ee17 0a90 	vmov	r0, s15
   db18e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   db192:	281f      	cmp	r0, #31
   db194:	eea6 0ac6 	vfms.f32	s0, s13, s12
   db198:	ee66 7a87 	vmul.f32	s15, s13, s14
   db19c:	eeb1 6a66 	vneg.f32	s12, s13
   db1a0:	dc1e      	bgt.n	db1e0 <__ieee754_rem_pio2f+0x19c>
   db1a2:	4a4a      	ldr	r2, [pc, #296]	; (db2cc <__ieee754_rem_pio2f+0x288>)
   db1a4:	1e41      	subs	r1, r0, #1
   db1a6:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   db1aa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   db1ae:	4293      	cmp	r3, r2
   db1b0:	d016      	beq.n	db1e0 <__ieee754_rem_pio2f+0x19c>
   db1b2:	ee30 7a67 	vsub.f32	s14, s0, s15
   db1b6:	ed85 7a00 	vstr	s14, [r5]
   db1ba:	ee30 0a47 	vsub.f32	s0, s0, s14
   db1be:	2e00      	cmp	r6, #0
   db1c0:	ee30 0a67 	vsub.f32	s0, s0, s15
   db1c4:	ed85 0a01 	vstr	s0, [r5, #4]
   db1c8:	f6bf af64 	bge.w	db094 <__ieee754_rem_pio2f+0x50>
   db1cc:	eeb1 7a47 	vneg.f32	s14, s14
   db1d0:	eeb1 0a40 	vneg.f32	s0, s0
   db1d4:	ed85 7a00 	vstr	s14, [r5]
   db1d8:	ed85 0a01 	vstr	s0, [r5, #4]
   db1dc:	4240      	negs	r0, r0
   db1de:	e759      	b.n	db094 <__ieee754_rem_pio2f+0x50>
   db1e0:	ee30 7a67 	vsub.f32	s14, s0, s15
   db1e4:	15e2      	asrs	r2, r4, #23
   db1e6:	ee17 3a10 	vmov	r3, s14
   db1ea:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   db1ee:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   db1f2:	2c08      	cmp	r4, #8
   db1f4:	dddf      	ble.n	db1b6 <__ieee754_rem_pio2f+0x172>
   db1f6:	eddf 7a32 	vldr	s15, [pc, #200]	; db2c0 <__ieee754_rem_pio2f+0x27c>
   db1fa:	ed9f 7a32 	vldr	s14, [pc, #200]	; db2c4 <__ieee754_rem_pio2f+0x280>
   db1fe:	eef0 5a40 	vmov.f32	s11, s0
   db202:	eee6 5a27 	vfma.f32	s11, s12, s15
   db206:	ee30 0a65 	vsub.f32	s0, s0, s11
   db20a:	eea6 0a27 	vfma.f32	s0, s12, s15
   db20e:	eef0 7a40 	vmov.f32	s15, s0
   db212:	eed6 7a87 	vfnms.f32	s15, s13, s14
   db216:	ee35 7ae7 	vsub.f32	s14, s11, s15
   db21a:	ee17 3a10 	vmov	r3, s14
   db21e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   db222:	1ad2      	subs	r2, r2, r3
   db224:	2a19      	cmp	r2, #25
   db226:	dc06      	bgt.n	db236 <__ieee754_rem_pio2f+0x1f2>
   db228:	ed85 7a00 	vstr	s14, [r5]
   db22c:	eeb0 0a65 	vmov.f32	s0, s11
   db230:	e7c3      	b.n	db1ba <__ieee754_rem_pio2f+0x176>
   db232:	2303      	movs	r3, #3
   db234:	e761      	b.n	db0fa <__ieee754_rem_pio2f+0xb6>
   db236:	ed9f 7a26 	vldr	s14, [pc, #152]	; db2d0 <__ieee754_rem_pio2f+0x28c>
   db23a:	ed9f 5a26 	vldr	s10, [pc, #152]	; db2d4 <__ieee754_rem_pio2f+0x290>
   db23e:	eeb0 0a65 	vmov.f32	s0, s11
   db242:	eea6 0a07 	vfma.f32	s0, s12, s14
   db246:	ee75 7ac0 	vsub.f32	s15, s11, s0
   db24a:	eee6 7a07 	vfma.f32	s15, s12, s14
   db24e:	eed6 7a85 	vfnms.f32	s15, s13, s10
   db252:	e7ae      	b.n	db1b2 <__ieee754_rem_pio2f+0x16e>
   db254:	4294      	cmp	r4, r2
   db256:	ee70 7a27 	vadd.f32	s15, s0, s15
   db25a:	d00e      	beq.n	db27a <__ieee754_rem_pio2f+0x236>
   db25c:	ed9f 7a14 	vldr	s14, [pc, #80]	; db2b0 <__ieee754_rem_pio2f+0x26c>
   db260:	ee77 6a87 	vadd.f32	s13, s15, s14
   db264:	f04f 30ff 	mov.w	r0, #4294967295
   db268:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db26c:	edc5 6a00 	vstr	s13, [r5]
   db270:	ee77 7a87 	vadd.f32	s15, s15, s14
   db274:	edc5 7a01 	vstr	s15, [r5, #4]
   db278:	e70c      	b.n	db094 <__ieee754_rem_pio2f+0x50>
   db27a:	eddf 6a11 	vldr	s13, [pc, #68]	; db2c0 <__ieee754_rem_pio2f+0x27c>
   db27e:	ed9f 7a11 	vldr	s14, [pc, #68]	; db2c4 <__ieee754_rem_pio2f+0x280>
   db282:	ee77 7aa6 	vadd.f32	s15, s15, s13
   db286:	f04f 30ff 	mov.w	r0, #4294967295
   db28a:	ee77 6a87 	vadd.f32	s13, s15, s14
   db28e:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db292:	edc5 6a00 	vstr	s13, [r5]
   db296:	ee77 7a87 	vadd.f32	s15, s15, s14
   db29a:	edc5 7a01 	vstr	s15, [r5, #4]
   db29e:	e6f9      	b.n	db094 <__ieee754_rem_pio2f+0x50>
   db2a0:	3f490fd8 	.word	0x3f490fd8
   db2a4:	4016cbe3 	.word	0x4016cbe3
   db2a8:	3fc90f80 	.word	0x3fc90f80
   db2ac:	3fc90fd0 	.word	0x3fc90fd0
   db2b0:	37354443 	.word	0x37354443
   db2b4:	43490f80 	.word	0x43490f80
   db2b8:	43800000 	.word	0x43800000
   db2bc:	000de7fc 	.word	0x000de7fc
   db2c0:	37354400 	.word	0x37354400
   db2c4:	2e85a308 	.word	0x2e85a308
   db2c8:	3f22f984 	.word	0x3f22f984
   db2cc:	000de77c 	.word	0x000de77c
   db2d0:	2e85a300 	.word	0x2e85a300
   db2d4:	248d3132 	.word	0x248d3132

000db2d8 <__kernel_cosf>:
   db2d8:	ee10 3a10 	vmov	r3, s0
   db2dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   db2e0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   db2e4:	da2c      	bge.n	db340 <__kernel_cosf+0x68>
   db2e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   db2ea:	ee17 3a90 	vmov	r3, s15
   db2ee:	2b00      	cmp	r3, #0
   db2f0:	d060      	beq.n	db3b4 <__kernel_cosf+0xdc>
   db2f2:	ee20 7a00 	vmul.f32	s14, s0, s0
   db2f6:	eddf 4a31 	vldr	s9, [pc, #196]	; db3bc <__kernel_cosf+0xe4>
   db2fa:	ed9f 5a31 	vldr	s10, [pc, #196]	; db3c0 <__kernel_cosf+0xe8>
   db2fe:	eddf 5a31 	vldr	s11, [pc, #196]	; db3c4 <__kernel_cosf+0xec>
   db302:	ed9f 6a31 	vldr	s12, [pc, #196]	; db3c8 <__kernel_cosf+0xf0>
   db306:	eddf 7a31 	vldr	s15, [pc, #196]	; db3cc <__kernel_cosf+0xf4>
   db30a:	eddf 6a31 	vldr	s13, [pc, #196]	; db3d0 <__kernel_cosf+0xf8>
   db30e:	eea7 5a24 	vfma.f32	s10, s14, s9
   db312:	eee7 5a05 	vfma.f32	s11, s14, s10
   db316:	eea7 6a25 	vfma.f32	s12, s14, s11
   db31a:	eee7 7a06 	vfma.f32	s15, s14, s12
   db31e:	eee7 6a27 	vfma.f32	s13, s14, s15
   db322:	ee67 6a26 	vmul.f32	s13, s14, s13
   db326:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   db32a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   db32e:	eee7 0a26 	vfma.f32	s1, s14, s13
   db332:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db336:	eed7 0a27 	vfnms.f32	s1, s14, s15
   db33a:	ee30 0a60 	vsub.f32	s0, s0, s1
   db33e:	4770      	bx	lr
   db340:	ee20 7a00 	vmul.f32	s14, s0, s0
   db344:	eddf 4a1d 	vldr	s9, [pc, #116]	; db3bc <__kernel_cosf+0xe4>
   db348:	ed9f 5a1d 	vldr	s10, [pc, #116]	; db3c0 <__kernel_cosf+0xe8>
   db34c:	eddf 5a1d 	vldr	s11, [pc, #116]	; db3c4 <__kernel_cosf+0xec>
   db350:	ed9f 6a1d 	vldr	s12, [pc, #116]	; db3c8 <__kernel_cosf+0xf0>
   db354:	eddf 7a1d 	vldr	s15, [pc, #116]	; db3cc <__kernel_cosf+0xf4>
   db358:	eddf 6a1d 	vldr	s13, [pc, #116]	; db3d0 <__kernel_cosf+0xf8>
   db35c:	4a1d      	ldr	r2, [pc, #116]	; (db3d4 <__kernel_cosf+0xfc>)
   db35e:	eea7 5a24 	vfma.f32	s10, s14, s9
   db362:	4293      	cmp	r3, r2
   db364:	eee5 5a07 	vfma.f32	s11, s10, s14
   db368:	eea5 6a87 	vfma.f32	s12, s11, s14
   db36c:	eee6 7a07 	vfma.f32	s15, s12, s14
   db370:	eee7 6a87 	vfma.f32	s13, s15, s14
   db374:	ee66 6a87 	vmul.f32	s13, s13, s14
   db378:	ddd5      	ble.n	db326 <__kernel_cosf+0x4e>
   db37a:	4a17      	ldr	r2, [pc, #92]	; (db3d8 <__kernel_cosf+0x100>)
   db37c:	4293      	cmp	r3, r2
   db37e:	dc14      	bgt.n	db3aa <__kernel_cosf+0xd2>
   db380:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   db384:	ee07 3a90 	vmov	s15, r3
   db388:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   db38c:	ee36 6a67 	vsub.f32	s12, s12, s15
   db390:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   db394:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   db398:	eee7 0a26 	vfma.f32	s1, s14, s13
   db39c:	eed7 7a25 	vfnms.f32	s15, s14, s11
   db3a0:	ee77 0ae0 	vsub.f32	s1, s15, s1
   db3a4:	ee36 0a60 	vsub.f32	s0, s12, s1
   db3a8:	4770      	bx	lr
   db3aa:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   db3ae:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   db3b2:	e7ed      	b.n	db390 <__kernel_cosf+0xb8>
   db3b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db3b8:	4770      	bx	lr
   db3ba:	bf00      	nop
   db3bc:	ad47d74e 	.word	0xad47d74e
   db3c0:	310f74f6 	.word	0x310f74f6
   db3c4:	b493f27c 	.word	0xb493f27c
   db3c8:	37d00d01 	.word	0x37d00d01
   db3cc:	bab60b61 	.word	0xbab60b61
   db3d0:	3d2aaaab 	.word	0x3d2aaaab
   db3d4:	3e999999 	.word	0x3e999999
   db3d8:	3f480000 	.word	0x3f480000

000db3dc <__kernel_rem_pio2f>:
   db3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db3e0:	ed2d 8b04 	vpush	{d8-d9}
   db3e4:	b0db      	sub	sp, #364	; 0x16c
   db3e6:	4cd7      	ldr	r4, [pc, #860]	; (db744 <__kernel_rem_pio2f+0x368>)
   db3e8:	9d68      	ldr	r5, [sp, #416]	; 0x1a0
   db3ea:	9107      	str	r1, [sp, #28]
   db3ec:	1d11      	adds	r1, r2, #4
   db3ee:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   db3f2:	9304      	str	r3, [sp, #16]
   db3f4:	9209      	str	r2, [sp, #36]	; 0x24
   db3f6:	4683      	mov	fp, r0
   db3f8:	f103 39ff 	add.w	r9, r3, #4294967295
   db3fc:	f2c0 829d 	blt.w	db93a <__kernel_rem_pio2f+0x55e>
   db400:	1ed3      	subs	r3, r2, #3
   db402:	bf44      	itt	mi
   db404:	4613      	movmi	r3, r2
   db406:	3304      	addmi	r3, #4
   db408:	10db      	asrs	r3, r3, #3
   db40a:	9303      	str	r3, [sp, #12]
   db40c:	3301      	adds	r3, #1
   db40e:	00db      	lsls	r3, r3, #3
   db410:	9308      	str	r3, [sp, #32]
   db412:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db416:	1a9b      	subs	r3, r3, r2
   db418:	9306      	str	r3, [sp, #24]
   db41a:	9b03      	ldr	r3, [sp, #12]
   db41c:	eb16 0109 	adds.w	r1, r6, r9
   db420:	eba3 0309 	sub.w	r3, r3, r9
   db424:	d416      	bmi.n	db454 <__kernel_rem_pio2f+0x78>
   db426:	3101      	adds	r1, #1
   db428:	ed9f 7ac7 	vldr	s14, [pc, #796]	; db748 <__kernel_rem_pio2f+0x36c>
   db42c:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   db42e:	4419      	add	r1, r3
   db430:	aa1e      	add	r2, sp, #120	; 0x78
   db432:	2b00      	cmp	r3, #0
   db434:	bfa4      	itt	ge
   db436:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   db43a:	ee07 4a90 	vmovge	s15, r4
   db43e:	f103 0301 	add.w	r3, r3, #1
   db442:	bfac      	ite	ge
   db444:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   db448:	eef0 7a47 	vmovlt.f32	s15, s14
   db44c:	428b      	cmp	r3, r1
   db44e:	ece2 7a01 	vstmia	r2!, {s15}
   db452:	d1ee      	bne.n	db432 <__kernel_rem_pio2f+0x56>
   db454:	2e00      	cmp	r6, #0
   db456:	f2c0 82e0 	blt.w	dba1a <__kernel_rem_pio2f+0x63e>
   db45a:	9b04      	ldr	r3, [sp, #16]
   db45c:	a91e      	add	r1, sp, #120	; 0x78
   db45e:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   db462:	ad46      	add	r5, sp, #280	; 0x118
   db464:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   db468:	4648      	mov	r0, r9
   db46a:	18f7      	adds	r7, r6, r3
   db46c:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
   db470:	f1b9 0f00 	cmp.w	r9, #0
   db474:	eddf 7ab4 	vldr	s15, [pc, #720]	; db748 <__kernel_rem_pio2f+0x36c>
   db478:	db09      	blt.n	db48e <__kernel_rem_pio2f+0xb2>
   db47a:	4622      	mov	r2, r4
   db47c:	465b      	mov	r3, fp
   db47e:	ecf3 6a01 	vldmia	r3!, {s13}
   db482:	ed32 7a01 	vldmdb	r2!, {s14}
   db486:	428b      	cmp	r3, r1
   db488:	eee6 7a87 	vfma.f32	s15, s13, s14
   db48c:	d1f7      	bne.n	db47e <__kernel_rem_pio2f+0xa2>
   db48e:	3001      	adds	r0, #1
   db490:	42b8      	cmp	r0, r7
   db492:	ece5 7a01 	vstmia	r5!, {s15}
   db496:	f104 0404 	add.w	r4, r4, #4
   db49a:	d1e9      	bne.n	db470 <__kernel_rem_pio2f+0x94>
   db49c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   db4a0:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   db4a4:	3b08      	subs	r3, #8
   db4a6:	9305      	str	r3, [sp, #20]
   db4a8:	ed9f 9aa9 	vldr	s18, [pc, #676]	; db750 <__kernel_rem_pio2f+0x374>
   db4ac:	eddf 8aa7 	vldr	s17, [pc, #668]	; db74c <__kernel_rem_pio2f+0x370>
   db4b0:	9806      	ldr	r0, [sp, #24]
   db4b2:	9600      	str	r6, [sp, #0]
   db4b4:	ab09      	add	r3, sp, #36	; 0x24
   db4b6:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
   db4ba:	eb0b 040c 	add.w	r4, fp, ip
   db4be:	af46      	add	r7, sp, #280	; 0x118
   db4c0:	465b      	mov	r3, fp
   db4c2:	aa5a      	add	r2, sp, #360	; 0x168
   db4c4:	eb02 0286 	add.w	r2, r2, r6, lsl #2
   db4c8:	2e00      	cmp	r6, #0
   db4ca:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
   db4ce:	ea4f 0b86 	mov.w	fp, r6, lsl #2
   db4d2:	dd16      	ble.n	db502 <__kernel_rem_pio2f+0x126>
   db4d4:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   db4d8:	4641      	mov	r1, r8
   db4da:	ee60 7a09 	vmul.f32	s15, s0, s18
   db4de:	eeb0 7a40 	vmov.f32	s14, s0
   db4e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db4e6:	ed72 6a01 	vldmdb	r2!, {s13}
   db4ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db4ee:	42ba      	cmp	r2, r7
   db4f0:	eea7 7ae8 	vfms.f32	s14, s15, s17
   db4f4:	ee37 0aa6 	vadd.f32	s0, s15, s13
   db4f8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   db4fc:	eca1 7a01 	vstmia	r1!, {s14}
   db500:	d1eb      	bne.n	db4da <__kernel_rem_pio2f+0xfe>
   db502:	e9cd 0301 	strd	r0, r3, [sp, #4]
   db506:	f000 ff07 	bl	dc318 <scalbnf>
   db50a:	eeb0 8a40 	vmov.f32	s16, s0
   db50e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   db512:	ee28 0a00 	vmul.f32	s0, s16, s0
   db516:	f000 feb9 	bl	dc28c <floorf>
   db51a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   db51e:	eea0 8a67 	vfms.f32	s16, s0, s15
   db522:	9801      	ldr	r0, [sp, #4]
   db524:	9b02      	ldr	r3, [sp, #8]
   db526:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   db52a:	2800      	cmp	r0, #0
   db52c:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   db530:	ee38 8a67 	vsub.f32	s16, s16, s15
   db534:	dd78      	ble.n	db628 <__kernel_rem_pio2f+0x24c>
   db536:	f106 3cff 	add.w	ip, r6, #4294967295
   db53a:	f1c0 0208 	rsb	r2, r0, #8
   db53e:	f858 502c 	ldr.w	r5, [r8, ip, lsl #2]
   db542:	fa45 f102 	asr.w	r1, r5, r2
   db546:	fa01 f202 	lsl.w	r2, r1, r2
   db54a:	1aaa      	subs	r2, r5, r2
   db54c:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   db550:	f1c0 0507 	rsb	r5, r0, #7
   db554:	ee19 ca90 	vmov	ip, s19
   db558:	fa42 f505 	asr.w	r5, r2, r5
   db55c:	448c      	add	ip, r1
   db55e:	2d00      	cmp	r5, #0
   db560:	ee09 ca90 	vmov	s19, ip
   db564:	dc68      	bgt.n	db638 <__kernel_rem_pio2f+0x25c>
   db566:	eeb5 8a40 	vcmp.f32	s16, #0.0
   db56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db56e:	f040 80b6 	bne.w	db6de <__kernel_rem_pio2f+0x302>
   db572:	9a00      	ldr	r2, [sp, #0]
   db574:	f106 3eff 	add.w	lr, r6, #4294967295
   db578:	4572      	cmp	r2, lr
   db57a:	dc10      	bgt.n	db59e <__kernel_rem_pio2f+0x1c2>
   db57c:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
   db580:	3a01      	subs	r2, #1
   db582:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   db586:	2100      	movs	r1, #0
   db588:	469c      	mov	ip, r3
   db58a:	f852 3904 	ldr.w	r3, [r2], #-4
   db58e:	4552      	cmp	r2, sl
   db590:	ea41 0103 	orr.w	r1, r1, r3
   db594:	d1f9      	bne.n	db58a <__kernel_rem_pio2f+0x1ae>
   db596:	4663      	mov	r3, ip
   db598:	2900      	cmp	r1, #0
   db59a:	f040 80f2 	bne.w	db782 <__kernel_rem_pio2f+0x3a6>
   db59e:	9a00      	ldr	r2, [sp, #0]
   db5a0:	3a01      	subs	r2, #1
   db5a2:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
   db5a6:	2a00      	cmp	r2, #0
   db5a8:	f040 80e6 	bne.w	db778 <__kernel_rem_pio2f+0x39c>
   db5ac:	9a05      	ldr	r2, [sp, #20]
   db5ae:	f04f 0c01 	mov.w	ip, #1
   db5b2:	f852 1904 	ldr.w	r1, [r2], #-4
   db5b6:	f10c 0c01 	add.w	ip, ip, #1
   db5ba:	2900      	cmp	r1, #0
   db5bc:	d0f9      	beq.n	db5b2 <__kernel_rem_pio2f+0x1d6>
   db5be:	f106 0b01 	add.w	fp, r6, #1
   db5c2:	44b4      	add	ip, r6
   db5c4:	46de      	mov	lr, fp
   db5c6:	9904      	ldr	r1, [sp, #16]
   db5c8:	9a03      	ldr	r2, [sp, #12]
   db5ca:	198d      	adds	r5, r1, r6
   db5cc:	445a      	add	r2, fp
   db5ce:	a91e      	add	r1, sp, #120	; 0x78
   db5d0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   db5d4:	eb01 0585 	add.w	r5, r1, r5, lsl #2
   db5d8:	9969      	ldr	r1, [sp, #420]	; 0x1a4
   db5da:	3a01      	subs	r2, #1
   db5dc:	eb01 0682 	add.w	r6, r1, r2, lsl #2
   db5e0:	eb07 0b8b 	add.w	fp, r7, fp, lsl #2
   db5e4:	edd6 7a01 	vldr	s15, [r6, #4]
   db5e8:	ed9f 7a57 	vldr	s14, [pc, #348]	; db748 <__kernel_rem_pio2f+0x36c>
   db5ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db5f0:	f1b9 0f00 	cmp.w	r9, #0
   db5f4:	f106 0604 	add.w	r6, r6, #4
   db5f8:	4629      	mov	r1, r5
   db5fa:	edc5 7a00 	vstr	s15, [r5]
   db5fe:	f105 0504 	add.w	r5, r5, #4
   db602:	db09      	blt.n	db618 <__kernel_rem_pio2f+0x23c>
   db604:	461a      	mov	r2, r3
   db606:	e001      	b.n	db60c <__kernel_rem_pio2f+0x230>
   db608:	ed71 7a01 	vldmdb	r1!, {s15}
   db60c:	ecf2 6a01 	vldmia	r2!, {s13}
   db610:	42a2      	cmp	r2, r4
   db612:	eea6 7aa7 	vfma.f32	s14, s13, s15
   db616:	d1f7      	bne.n	db608 <__kernel_rem_pio2f+0x22c>
   db618:	f10e 0e01 	add.w	lr, lr, #1
   db61c:	45e6      	cmp	lr, ip
   db61e:	ecab 7a01 	vstmia	fp!, {s14}
   db622:	dddf      	ble.n	db5e4 <__kernel_rem_pio2f+0x208>
   db624:	4666      	mov	r6, ip
   db626:	e74c      	b.n	db4c2 <__kernel_rem_pio2f+0xe6>
   db628:	f040 809c 	bne.w	db764 <__kernel_rem_pio2f+0x388>
   db62c:	1e72      	subs	r2, r6, #1
   db62e:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
   db632:	122d      	asrs	r5, r5, #8
   db634:	2d00      	cmp	r5, #0
   db636:	dd96      	ble.n	db566 <__kernel_rem_pio2f+0x18a>
   db638:	ee19 2a90 	vmov	r2, s19
   db63c:	2e00      	cmp	r6, #0
   db63e:	f102 0201 	add.w	r2, r2, #1
   db642:	ee09 2a90 	vmov	s19, r2
   db646:	f340 818e 	ble.w	db966 <__kernel_rem_pio2f+0x58a>
   db64a:	f8d8 1000 	ldr.w	r1, [r8]
   db64e:	2900      	cmp	r1, #0
   db650:	d174      	bne.n	db73c <__kernel_rem_pio2f+0x360>
   db652:	2e01      	cmp	r6, #1
   db654:	d01c      	beq.n	db690 <__kernel_rem_pio2f+0x2b4>
   db656:	4642      	mov	r2, r8
   db658:	f04f 0c01 	mov.w	ip, #1
   db65c:	f852 1f04 	ldr.w	r1, [r2, #4]!
   db660:	2900      	cmp	r1, #0
   db662:	d079      	beq.n	db758 <__kernel_rem_pio2f+0x37c>
   db664:	f10c 0201 	add.w	r2, ip, #1
   db668:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   db66c:	4296      	cmp	r6, r2
   db66e:	f848 102c 	str.w	r1, [r8, ip, lsl #2]
   db672:	dd0c      	ble.n	db68e <__kernel_rem_pio2f+0x2b2>
   db674:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
   db678:	44c3      	add	fp, r8
   db67a:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   db67e:	e000      	b.n	db682 <__kernel_rem_pio2f+0x2a6>
   db680:	6811      	ldr	r1, [r2, #0]
   db682:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   db686:	f842 1b04 	str.w	r1, [r2], #4
   db68a:	455a      	cmp	r2, fp
   db68c:	d1f8      	bne.n	db680 <__kernel_rem_pio2f+0x2a4>
   db68e:	2101      	movs	r1, #1
   db690:	2800      	cmp	r0, #0
   db692:	dd0c      	ble.n	db6ae <__kernel_rem_pio2f+0x2d2>
   db694:	2801      	cmp	r0, #1
   db696:	f000 8147 	beq.w	db928 <__kernel_rem_pio2f+0x54c>
   db69a:	2802      	cmp	r0, #2
   db69c:	d107      	bne.n	db6ae <__kernel_rem_pio2f+0x2d2>
   db69e:	f106 3cff 	add.w	ip, r6, #4294967295
   db6a2:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   db6a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   db6aa:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   db6ae:	2d02      	cmp	r5, #2
   db6b0:	f47f af59 	bne.w	db566 <__kernel_rem_pio2f+0x18a>
   db6b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db6b8:	ee30 8a48 	vsub.f32	s16, s0, s16
   db6bc:	2900      	cmp	r1, #0
   db6be:	f43f af52 	beq.w	db566 <__kernel_rem_pio2f+0x18a>
   db6c2:	e9cd 0301 	strd	r0, r3, [sp, #4]
   db6c6:	f000 fe27 	bl	dc318 <scalbnf>
   db6ca:	ee38 8a40 	vsub.f32	s16, s16, s0
   db6ce:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
   db6d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
   db6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db6da:	f43f af4a 	beq.w	db572 <__kernel_rem_pio2f+0x196>
   db6de:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   db6e2:	eeb0 0a48 	vmov.f32	s0, s16
   db6e6:	1a98      	subs	r0, r3, r2
   db6e8:	9602      	str	r6, [sp, #8]
   db6ea:	9501      	str	r5, [sp, #4]
   db6ec:	9e00      	ldr	r6, [sp, #0]
   db6ee:	f000 fe13 	bl	dc318 <scalbnf>
   db6f2:	ed9f 7a16 	vldr	s14, [pc, #88]	; db74c <__kernel_rem_pio2f+0x370>
   db6f6:	eeb4 0ac7 	vcmpe.f32	s0, s14
   db6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db6fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   db702:	f2c0 8157 	blt.w	db9b4 <__kernel_rem_pio2f+0x5d8>
   db706:	eddf 7a12 	vldr	s15, [pc, #72]	; db750 <__kernel_rem_pio2f+0x374>
   db70a:	9906      	ldr	r1, [sp, #24]
   db70c:	ee60 7a27 	vmul.f32	s15, s0, s15
   db710:	3108      	adds	r1, #8
   db712:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db716:	9106      	str	r1, [sp, #24]
   db718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db71c:	1c5d      	adds	r5, r3, #1
   db71e:	eea7 0ac7 	vfms.f32	s0, s15, s14
   db722:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db726:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   db72a:	ee10 1a10 	vmov	r1, s0
   db72e:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   db732:	ee17 3a90 	vmov	r3, s15
   db736:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
   db73a:	e039      	b.n	db7b0 <__kernel_rem_pio2f+0x3d4>
   db73c:	2201      	movs	r2, #1
   db73e:	f04f 0c00 	mov.w	ip, #0
   db742:	e791      	b.n	db668 <__kernel_rem_pio2f+0x28c>
   db744:	000deb40 	.word	0x000deb40
   db748:	00000000 	.word	0x00000000
   db74c:	43800000 	.word	0x43800000
   db750:	3b800000 	.word	0x3b800000
   db754:	3fc90000 	.word	0x3fc90000
   db758:	f10c 0c01 	add.w	ip, ip, #1
   db75c:	45b4      	cmp	ip, r6
   db75e:	f47f af7d 	bne.w	db65c <__kernel_rem_pio2f+0x280>
   db762:	e795      	b.n	db690 <__kernel_rem_pio2f+0x2b4>
   db764:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   db768:	eeb4 8ae7 	vcmpe.f32	s16, s15
   db76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db770:	f280 80e8 	bge.w	db944 <__kernel_rem_pio2f+0x568>
   db774:	2500      	movs	r5, #0
   db776:	e6f6      	b.n	db566 <__kernel_rem_pio2f+0x18a>
   db778:	f106 0b01 	add.w	fp, r6, #1
   db77c:	46de      	mov	lr, fp
   db77e:	46dc      	mov	ip, fp
   db780:	e721      	b.n	db5c6 <__kernel_rem_pio2f+0x1ea>
   db782:	9806      	ldr	r0, [sp, #24]
   db784:	f858 102e 	ldr.w	r1, [r8, lr, lsl #2]
   db788:	3808      	subs	r0, #8
   db78a:	4633      	mov	r3, r6
   db78c:	462a      	mov	r2, r5
   db78e:	9e00      	ldr	r6, [sp, #0]
   db790:	9006      	str	r0, [sp, #24]
   db792:	4675      	mov	r5, lr
   db794:	b961      	cbnz	r1, db7b0 <__kernel_rem_pio2f+0x3d4>
   db796:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   db79a:	3b02      	subs	r3, #2
   db79c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   db7a0:	4601      	mov	r1, r0
   db7a2:	f853 0904 	ldr.w	r0, [r3], #-4
   db7a6:	3d01      	subs	r5, #1
   db7a8:	3908      	subs	r1, #8
   db7aa:	2800      	cmp	r0, #0
   db7ac:	d0f9      	beq.n	db7a2 <__kernel_rem_pio2f+0x3c6>
   db7ae:	9106      	str	r1, [sp, #24]
   db7b0:	9806      	ldr	r0, [sp, #24]
   db7b2:	9200      	str	r2, [sp, #0]
   db7b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db7b8:	f000 fdae 	bl	dc318 <scalbnf>
   db7bc:	2d00      	cmp	r5, #0
   db7be:	9a00      	ldr	r2, [sp, #0]
   db7c0:	f2c0 811e 	blt.w	dba00 <__kernel_rem_pio2f+0x624>
   db7c4:	ea4f 0e85 	mov.w	lr, r5, lsl #2
   db7c8:	ab46      	add	r3, sp, #280	; 0x118
   db7ca:	eb03 070e 	add.w	r7, r3, lr
   db7ce:	f10e 0c04 	add.w	ip, lr, #4
   db7d2:	ed1f 7a21 	vldr	s14, [pc, #-132]	; db750 <__kernel_rem_pio2f+0x374>
   db7d6:	eb08 030c 	add.w	r3, r8, ip
   db7da:	1d39      	adds	r1, r7, #4
   db7dc:	ed73 7a01 	vldmdb	r3!, {s15}
   db7e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db7e4:	4543      	cmp	r3, r8
   db7e6:	ee67 7a80 	vmul.f32	s15, s15, s0
   db7ea:	ee20 0a07 	vmul.f32	s0, s0, s14
   db7ee:	ed61 7a01 	vstmdb	r1!, {s15}
   db7f2:	d1f3      	bne.n	db7dc <__kernel_rem_pio2f+0x400>
   db7f4:	2e00      	cmp	r6, #0
   db7f6:	ed1f 6a29 	vldr	s12, [pc, #-164]	; db754 <__kernel_rem_pio2f+0x378>
   db7fa:	f04f 0400 	mov.w	r4, #0
   db7fe:	db20      	blt.n	db842 <__kernel_rem_pio2f+0x466>
   db800:	488f      	ldr	r0, [pc, #572]	; (dba40 <__kernel_rem_pio2f+0x664>)
   db802:	eddf 7a90 	vldr	s15, [pc, #576]	; dba44 <__kernel_rem_pio2f+0x668>
   db806:	4639      	mov	r1, r7
   db808:	eeb0 7a46 	vmov.f32	s14, s12
   db80c:	2300      	movs	r3, #0
   db80e:	e003      	b.n	db818 <__kernel_rem_pio2f+0x43c>
   db810:	429c      	cmp	r4, r3
   db812:	db08      	blt.n	db826 <__kernel_rem_pio2f+0x44a>
   db814:	ecb0 7a01 	vldmia	r0!, {s14}
   db818:	ecf1 6a01 	vldmia	r1!, {s13}
   db81c:	3301      	adds	r3, #1
   db81e:	429e      	cmp	r6, r3
   db820:	eee6 7a87 	vfma.f32	s15, s13, s14
   db824:	daf4      	bge.n	db810 <__kernel_rem_pio2f+0x434>
   db826:	ab5a      	add	r3, sp, #360	; 0x168
   db828:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   db82c:	42a5      	cmp	r5, r4
   db82e:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   db832:	f1a7 0704 	sub.w	r7, r7, #4
   db836:	f104 0301 	add.w	r3, r4, #1
   db83a:	d005      	beq.n	db848 <__kernel_rem_pio2f+0x46c>
   db83c:	2e00      	cmp	r6, #0
   db83e:	461c      	mov	r4, r3
   db840:	dade      	bge.n	db800 <__kernel_rem_pio2f+0x424>
   db842:	eddf 7a80 	vldr	s15, [pc, #512]	; dba44 <__kernel_rem_pio2f+0x668>
   db846:	e7ee      	b.n	db826 <__kernel_rem_pio2f+0x44a>
   db848:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   db84a:	2902      	cmp	r1, #2
   db84c:	dc1c      	bgt.n	db888 <__kernel_rem_pio2f+0x4ac>
   db84e:	2900      	cmp	r1, #0
   db850:	f300 808b 	bgt.w	db96a <__kernel_rem_pio2f+0x58e>
   db854:	d10f      	bne.n	db876 <__kernel_rem_pio2f+0x49a>
   db856:	ab32      	add	r3, sp, #200	; 0xc8
   db858:	eddf 7a7a 	vldr	s15, [pc, #488]	; dba44 <__kernel_rem_pio2f+0x668>
   db85c:	449c      	add	ip, r3
   db85e:	ed3c 7a01 	vldmdb	ip!, {s14}
   db862:	4563      	cmp	r3, ip
   db864:	ee77 7a87 	vadd.f32	s15, s15, s14
   db868:	d1f9      	bne.n	db85e <__kernel_rem_pio2f+0x482>
   db86a:	b10a      	cbz	r2, db870 <__kernel_rem_pio2f+0x494>
   db86c:	eef1 7a67 	vneg.f32	s15, s15
   db870:	9b07      	ldr	r3, [sp, #28]
   db872:	edc3 7a00 	vstr	s15, [r3]
   db876:	ee19 3a90 	vmov	r3, s19
   db87a:	f003 0007 	and.w	r0, r3, #7
   db87e:	b05b      	add	sp, #364	; 0x16c
   db880:	ecbd 8b04 	vpop	{d8-d9}
   db884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db888:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   db88a:	2b03      	cmp	r3, #3
   db88c:	d1f3      	bne.n	db876 <__kernel_rem_pio2f+0x49a>
   db88e:	2d00      	cmp	r5, #0
   db890:	f000 80cb 	beq.w	dba2a <__kernel_rem_pio2f+0x64e>
   db894:	ab5a      	add	r3, sp, #360	; 0x168
   db896:	4473      	add	r3, lr
   db898:	a932      	add	r1, sp, #200	; 0xc8
   db89a:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   db89e:	eb01 0385 	add.w	r3, r1, r5, lsl #2
   db8a2:	ed73 7a01 	vldmdb	r3!, {s15}
   db8a6:	eef0 6a47 	vmov.f32	s13, s14
   db8aa:	ee37 7a27 	vadd.f32	s14, s14, s15
   db8ae:	4299      	cmp	r1, r3
   db8b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db8b4:	ed83 7a00 	vstr	s14, [r3]
   db8b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
   db8bc:	edc3 7a01 	vstr	s15, [r3, #4]
   db8c0:	d1ef      	bne.n	db8a2 <__kernel_rem_pio2f+0x4c6>
   db8c2:	2d01      	cmp	r5, #1
   db8c4:	f340 80b1 	ble.w	dba2a <__kernel_rem_pio2f+0x64e>
   db8c8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   db8cc:	ab5a      	add	r3, sp, #360	; 0x168
   db8ce:	3d01      	subs	r5, #1
   db8d0:	449e      	add	lr, r3
   db8d2:	00ad      	lsls	r5, r5, #2
   db8d4:	1d2b      	adds	r3, r5, #4
   db8d6:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   db8da:	440b      	add	r3, r1
   db8dc:	a833      	add	r0, sp, #204	; 0xcc
   db8de:	ed73 7a01 	vldmdb	r3!, {s15}
   db8e2:	eef0 6a47 	vmov.f32	s13, s14
   db8e6:	ee37 7a27 	vadd.f32	s14, s14, s15
   db8ea:	4298      	cmp	r0, r3
   db8ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db8f0:	ed83 7a00 	vstr	s14, [r3]
   db8f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
   db8f8:	edc3 7a01 	vstr	s15, [r3, #4]
   db8fc:	d1ef      	bne.n	db8de <__kernel_rem_pio2f+0x502>
   db8fe:	3508      	adds	r5, #8
   db900:	eddf 7a50 	vldr	s15, [pc, #320]	; dba44 <__kernel_rem_pio2f+0x668>
   db904:	194b      	adds	r3, r1, r5
   db906:	3108      	adds	r1, #8
   db908:	ed33 7a01 	vldmdb	r3!, {s14}
   db90c:	4299      	cmp	r1, r3
   db90e:	ee77 7a87 	vadd.f32	s15, s15, s14
   db912:	d1f9      	bne.n	db908 <__kernel_rem_pio2f+0x52c>
   db914:	2a00      	cmp	r2, #0
   db916:	d155      	bne.n	db9c4 <__kernel_rem_pio2f+0x5e8>
   db918:	9907      	ldr	r1, [sp, #28]
   db91a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   db91c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   db91e:	edc1 7a02 	vstr	s15, [r1, #8]
   db922:	600a      	str	r2, [r1, #0]
   db924:	604b      	str	r3, [r1, #4]
   db926:	e7a6      	b.n	db876 <__kernel_rem_pio2f+0x49a>
   db928:	f106 3cff 	add.w	ip, r6, #4294967295
   db92c:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   db930:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   db934:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   db938:	e6b9      	b.n	db6ae <__kernel_rem_pio2f+0x2d2>
   db93a:	2308      	movs	r3, #8
   db93c:	9308      	str	r3, [sp, #32]
   db93e:	2300      	movs	r3, #0
   db940:	9303      	str	r3, [sp, #12]
   db942:	e566      	b.n	db412 <__kernel_rem_pio2f+0x36>
   db944:	ee19 2a90 	vmov	r2, s19
   db948:	2e00      	cmp	r6, #0
   db94a:	f102 0201 	add.w	r2, r2, #1
   db94e:	ee09 2a90 	vmov	s19, r2
   db952:	bfc8      	it	gt
   db954:	2502      	movgt	r5, #2
   db956:	f73f ae78 	bgt.w	db64a <__kernel_rem_pio2f+0x26e>
   db95a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   db95e:	ee37 8ac8 	vsub.f32	s16, s15, s16
   db962:	2502      	movs	r5, #2
   db964:	e5ff      	b.n	db566 <__kernel_rem_pio2f+0x18a>
   db966:	2100      	movs	r1, #0
   db968:	e692      	b.n	db690 <__kernel_rem_pio2f+0x2b4>
   db96a:	a932      	add	r1, sp, #200	; 0xc8
   db96c:	eddf 7a35 	vldr	s15, [pc, #212]	; dba44 <__kernel_rem_pio2f+0x668>
   db970:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   db974:	ed33 7a01 	vldmdb	r3!, {s14}
   db978:	4299      	cmp	r1, r3
   db97a:	ee77 7a87 	vadd.f32	s15, s15, s14
   db97e:	d1f9      	bne.n	db974 <__kernel_rem_pio2f+0x598>
   db980:	bb92      	cbnz	r2, db9e8 <__kernel_rem_pio2f+0x60c>
   db982:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   db986:	9b07      	ldr	r3, [sp, #28]
   db988:	2d00      	cmp	r5, #0
   db98a:	edc3 7a00 	vstr	s15, [r3]
   db98e:	ee77 7a67 	vsub.f32	s15, s14, s15
   db992:	dd0b      	ble.n	db9ac <__kernel_rem_pio2f+0x5d0>
   db994:	a933      	add	r1, sp, #204	; 0xcc
   db996:	2301      	movs	r3, #1
   db998:	ecb1 7a01 	vldmia	r1!, {s14}
   db99c:	3301      	adds	r3, #1
   db99e:	429d      	cmp	r5, r3
   db9a0:	ee77 7a87 	vadd.f32	s15, s15, s14
   db9a4:	daf8      	bge.n	db998 <__kernel_rem_pio2f+0x5bc>
   db9a6:	b10a      	cbz	r2, db9ac <__kernel_rem_pio2f+0x5d0>
   db9a8:	eef1 7a67 	vneg.f32	s15, s15
   db9ac:	9b07      	ldr	r3, [sp, #28]
   db9ae:	edc3 7a01 	vstr	s15, [r3, #4]
   db9b2:	e760      	b.n	db876 <__kernel_rem_pio2f+0x49a>
   db9b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   db9b8:	461d      	mov	r5, r3
   db9ba:	ee10 1a10 	vmov	r1, s0
   db9be:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   db9c2:	e6f5      	b.n	db7b0 <__kernel_rem_pio2f+0x3d4>
   db9c4:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   db9c8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   db9cc:	9b07      	ldr	r3, [sp, #28]
   db9ce:	eef1 7a67 	vneg.f32	s15, s15
   db9d2:	eef1 6a66 	vneg.f32	s13, s13
   db9d6:	eeb1 7a47 	vneg.f32	s14, s14
   db9da:	edc3 7a02 	vstr	s15, [r3, #8]
   db9de:	edc3 6a00 	vstr	s13, [r3]
   db9e2:	ed83 7a01 	vstr	s14, [r3, #4]
   db9e6:	e746      	b.n	db876 <__kernel_rem_pio2f+0x49a>
   db9e8:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   db9ec:	9b07      	ldr	r3, [sp, #28]
   db9ee:	eeb1 7a67 	vneg.f32	s14, s15
   db9f2:	2d00      	cmp	r5, #0
   db9f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
   db9f8:	ed83 7a00 	vstr	s14, [r3]
   db9fc:	dcca      	bgt.n	db994 <__kernel_rem_pio2f+0x5b8>
   db9fe:	e7d3      	b.n	db9a8 <__kernel_rem_pio2f+0x5cc>
   dba00:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   dba02:	2b02      	cmp	r3, #2
   dba04:	dc0d      	bgt.n	dba22 <__kernel_rem_pio2f+0x646>
   dba06:	2b00      	cmp	r3, #0
   dba08:	dc14      	bgt.n	dba34 <__kernel_rem_pio2f+0x658>
   dba0a:	f47f af34 	bne.w	db876 <__kernel_rem_pio2f+0x49a>
   dba0e:	eddf 7a0d 	vldr	s15, [pc, #52]	; dba44 <__kernel_rem_pio2f+0x668>
   dba12:	2a00      	cmp	r2, #0
   dba14:	f43f af2c 	beq.w	db870 <__kernel_rem_pio2f+0x494>
   dba18:	e728      	b.n	db86c <__kernel_rem_pio2f+0x490>
   dba1a:	9b04      	ldr	r3, [sp, #16]
   dba1c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   dba20:	e53c      	b.n	db49c <__kernel_rem_pio2f+0xc0>
   dba22:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   dba24:	2b03      	cmp	r3, #3
   dba26:	f47f af26 	bne.w	db876 <__kernel_rem_pio2f+0x49a>
   dba2a:	eddf 7a06 	vldr	s15, [pc, #24]	; dba44 <__kernel_rem_pio2f+0x668>
   dba2e:	2a00      	cmp	r2, #0
   dba30:	d1c8      	bne.n	db9c4 <__kernel_rem_pio2f+0x5e8>
   dba32:	e771      	b.n	db918 <__kernel_rem_pio2f+0x53c>
   dba34:	eddf 7a03 	vldr	s15, [pc, #12]	; dba44 <__kernel_rem_pio2f+0x668>
   dba38:	2a00      	cmp	r2, #0
   dba3a:	d0a2      	beq.n	db982 <__kernel_rem_pio2f+0x5a6>
   dba3c:	e7d4      	b.n	db9e8 <__kernel_rem_pio2f+0x60c>
   dba3e:	bf00      	nop
   dba40:	000deb18 	.word	0x000deb18
   dba44:	00000000 	.word	0x00000000

000dba48 <__kernel_sinf>:
   dba48:	ee10 3a10 	vmov	r3, s0
   dba4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dba50:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   dba54:	da04      	bge.n	dba60 <__kernel_sinf+0x18>
   dba56:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   dba5a:	ee17 3a90 	vmov	r3, s15
   dba5e:	b35b      	cbz	r3, dbab8 <__kernel_sinf+0x70>
   dba60:	ee60 7a00 	vmul.f32	s15, s0, s0
   dba64:	ed9f 5a15 	vldr	s10, [pc, #84]	; dbabc <__kernel_sinf+0x74>
   dba68:	eddf 5a15 	vldr	s11, [pc, #84]	; dbac0 <__kernel_sinf+0x78>
   dba6c:	ed9f 6a15 	vldr	s12, [pc, #84]	; dbac4 <__kernel_sinf+0x7c>
   dba70:	eddf 6a15 	vldr	s13, [pc, #84]	; dbac8 <__kernel_sinf+0x80>
   dba74:	ed9f 7a15 	vldr	s14, [pc, #84]	; dbacc <__kernel_sinf+0x84>
   dba78:	eee7 5a85 	vfma.f32	s11, s15, s10
   dba7c:	ee20 5a27 	vmul.f32	s10, s0, s15
   dba80:	eea5 6aa7 	vfma.f32	s12, s11, s15
   dba84:	eee6 6a27 	vfma.f32	s13, s12, s15
   dba88:	eea6 7aa7 	vfma.f32	s14, s13, s15
   dba8c:	b930      	cbnz	r0, dba9c <__kernel_sinf+0x54>
   dba8e:	eddf 6a10 	vldr	s13, [pc, #64]	; dbad0 <__kernel_sinf+0x88>
   dba92:	eee7 6a87 	vfma.f32	s13, s15, s14
   dba96:	eea6 0a85 	vfma.f32	s0, s13, s10
   dba9a:	4770      	bx	lr
   dba9c:	ee27 7a45 	vnmul.f32	s14, s14, s10
   dbaa0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   dbaa4:	eea0 7aa6 	vfma.f32	s14, s1, s13
   dbaa8:	eddf 6a0a 	vldr	s13, [pc, #40]	; dbad4 <__kernel_sinf+0x8c>
   dbaac:	eed7 0a27 	vfnms.f32	s1, s14, s15
   dbab0:	eee5 0a26 	vfma.f32	s1, s10, s13
   dbab4:	ee30 0a60 	vsub.f32	s0, s0, s1
   dbab8:	4770      	bx	lr
   dbaba:	bf00      	nop
   dbabc:	2f2ec9d3 	.word	0x2f2ec9d3
   dbac0:	b2d72f34 	.word	0xb2d72f34
   dbac4:	3638ef1b 	.word	0x3638ef1b
   dbac8:	b9500d01 	.word	0xb9500d01
   dbacc:	3c088889 	.word	0x3c088889
   dbad0:	be2aaaab 	.word	0xbe2aaaab
   dbad4:	3e2aaaab 	.word	0x3e2aaaab

000dbad8 <atan>:
   dbad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbadc:	ec55 4b10 	vmov	r4, r5, d0
   dbae0:	4bcd      	ldr	r3, [pc, #820]	; (dbe18 <atan+0x340>)
   dbae2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   dbae6:	429e      	cmp	r6, r3
   dbae8:	46aa      	mov	sl, r5
   dbaea:	dd0d      	ble.n	dbb08 <atan+0x30>
   dbaec:	4bcb      	ldr	r3, [pc, #812]	; (dbe1c <atan+0x344>)
   dbaee:	429e      	cmp	r6, r3
   dbaf0:	f300 80b5 	bgt.w	dbc5e <atan+0x186>
   dbaf4:	f000 80b0 	beq.w	dbc58 <atan+0x180>
   dbaf8:	f1ba 0f00 	cmp.w	sl, #0
   dbafc:	f340 80f6 	ble.w	dbcec <atan+0x214>
   dbb00:	ed9f 0ba9 	vldr	d0, [pc, #676]	; dbda8 <atan+0x2d0>
   dbb04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbb08:	4bc5      	ldr	r3, [pc, #788]	; (dbe20 <atan+0x348>)
   dbb0a:	429e      	cmp	r6, r3
   dbb0c:	f300 80c3 	bgt.w	dbc96 <atan+0x1be>
   dbb10:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   dbb14:	429e      	cmp	r6, r3
   dbb16:	f340 80ac 	ble.w	dbc72 <atan+0x19a>
   dbb1a:	f04f 3bff 	mov.w	fp, #4294967295
   dbb1e:	4622      	mov	r2, r4
   dbb20:	462b      	mov	r3, r5
   dbb22:	4620      	mov	r0, r4
   dbb24:	4629      	mov	r1, r5
   dbb26:	f000 fe25 	bl	dc774 <__aeabi_dmul>
   dbb2a:	4602      	mov	r2, r0
   dbb2c:	460b      	mov	r3, r1
   dbb2e:	4680      	mov	r8, r0
   dbb30:	4689      	mov	r9, r1
   dbb32:	f000 fe1f 	bl	dc774 <__aeabi_dmul>
   dbb36:	a39e      	add	r3, pc, #632	; (adr r3, dbdb0 <atan+0x2d8>)
   dbb38:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbb3c:	4606      	mov	r6, r0
   dbb3e:	460f      	mov	r7, r1
   dbb40:	f000 fe18 	bl	dc774 <__aeabi_dmul>
   dbb44:	a39c      	add	r3, pc, #624	; (adr r3, dbdb8 <atan+0x2e0>)
   dbb46:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbb4a:	f000 fc5d 	bl	dc408 <__adddf3>
   dbb4e:	4632      	mov	r2, r6
   dbb50:	463b      	mov	r3, r7
   dbb52:	f000 fe0f 	bl	dc774 <__aeabi_dmul>
   dbb56:	a39a      	add	r3, pc, #616	; (adr r3, dbdc0 <atan+0x2e8>)
   dbb58:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbb5c:	f000 fc54 	bl	dc408 <__adddf3>
   dbb60:	4632      	mov	r2, r6
   dbb62:	463b      	mov	r3, r7
   dbb64:	f000 fe06 	bl	dc774 <__aeabi_dmul>
   dbb68:	a397      	add	r3, pc, #604	; (adr r3, dbdc8 <atan+0x2f0>)
   dbb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbb6e:	f000 fc4b 	bl	dc408 <__adddf3>
   dbb72:	4632      	mov	r2, r6
   dbb74:	463b      	mov	r3, r7
   dbb76:	f000 fdfd 	bl	dc774 <__aeabi_dmul>
   dbb7a:	a395      	add	r3, pc, #596	; (adr r3, dbdd0 <atan+0x2f8>)
   dbb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbb80:	f000 fc42 	bl	dc408 <__adddf3>
   dbb84:	4632      	mov	r2, r6
   dbb86:	463b      	mov	r3, r7
   dbb88:	f000 fdf4 	bl	dc774 <__aeabi_dmul>
   dbb8c:	a392      	add	r3, pc, #584	; (adr r3, dbdd8 <atan+0x300>)
   dbb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbb92:	f000 fc39 	bl	dc408 <__adddf3>
   dbb96:	4642      	mov	r2, r8
   dbb98:	464b      	mov	r3, r9
   dbb9a:	f000 fdeb 	bl	dc774 <__aeabi_dmul>
   dbb9e:	a390      	add	r3, pc, #576	; (adr r3, dbde0 <atan+0x308>)
   dbba0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbba4:	4680      	mov	r8, r0
   dbba6:	4689      	mov	r9, r1
   dbba8:	4630      	mov	r0, r6
   dbbaa:	4639      	mov	r1, r7
   dbbac:	f000 fde2 	bl	dc774 <__aeabi_dmul>
   dbbb0:	a38d      	add	r3, pc, #564	; (adr r3, dbde8 <atan+0x310>)
   dbbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbb6:	f000 fc25 	bl	dc404 <__aeabi_dsub>
   dbbba:	4632      	mov	r2, r6
   dbbbc:	463b      	mov	r3, r7
   dbbbe:	f000 fdd9 	bl	dc774 <__aeabi_dmul>
   dbbc2:	a38b      	add	r3, pc, #556	; (adr r3, dbdf0 <atan+0x318>)
   dbbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbc8:	f000 fc1c 	bl	dc404 <__aeabi_dsub>
   dbbcc:	4632      	mov	r2, r6
   dbbce:	463b      	mov	r3, r7
   dbbd0:	f000 fdd0 	bl	dc774 <__aeabi_dmul>
   dbbd4:	a388      	add	r3, pc, #544	; (adr r3, dbdf8 <atan+0x320>)
   dbbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbda:	f000 fc13 	bl	dc404 <__aeabi_dsub>
   dbbde:	4632      	mov	r2, r6
   dbbe0:	463b      	mov	r3, r7
   dbbe2:	f000 fdc7 	bl	dc774 <__aeabi_dmul>
   dbbe6:	a386      	add	r3, pc, #536	; (adr r3, dbe00 <atan+0x328>)
   dbbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbec:	f000 fc0a 	bl	dc404 <__aeabi_dsub>
   dbbf0:	4632      	mov	r2, r6
   dbbf2:	463b      	mov	r3, r7
   dbbf4:	f000 fdbe 	bl	dc774 <__aeabi_dmul>
   dbbf8:	f1bb 3fff 	cmp.w	fp, #4294967295
   dbbfc:	4602      	mov	r2, r0
   dbbfe:	460b      	mov	r3, r1
   dbc00:	d078      	beq.n	dbcf4 <atan+0x21c>
   dbc02:	4640      	mov	r0, r8
   dbc04:	4649      	mov	r1, r9
   dbc06:	f000 fbff 	bl	dc408 <__adddf3>
   dbc0a:	4e86      	ldr	r6, [pc, #536]	; (dbe24 <atan+0x34c>)
   dbc0c:	4622      	mov	r2, r4
   dbc0e:	462b      	mov	r3, r5
   dbc10:	f000 fdb0 	bl	dc774 <__aeabi_dmul>
   dbc14:	4b84      	ldr	r3, [pc, #528]	; (dbe28 <atan+0x350>)
   dbc16:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   dbc1a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   dbc1e:	449b      	add	fp, r3
   dbc20:	e9db 2300 	ldrd	r2, r3, [fp]
   dbc24:	f000 fbee 	bl	dc404 <__aeabi_dsub>
   dbc28:	4622      	mov	r2, r4
   dbc2a:	462b      	mov	r3, r5
   dbc2c:	f000 fbea 	bl	dc404 <__aeabi_dsub>
   dbc30:	4602      	mov	r2, r0
   dbc32:	460b      	mov	r3, r1
   dbc34:	e9d6 0100 	ldrd	r0, r1, [r6]
   dbc38:	f000 fbe4 	bl	dc404 <__aeabi_dsub>
   dbc3c:	f1ba 0f00 	cmp.w	sl, #0
   dbc40:	ec41 0b10 	vmov	d0, r0, r1
   dbc44:	da13      	bge.n	dbc6e <atan+0x196>
   dbc46:	ee10 1a90 	vmov	r1, s1
   dbc4a:	4602      	mov	r2, r0
   dbc4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dbc50:	ec43 2b10 	vmov	d0, r2, r3
   dbc54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbc58:	2c00      	cmp	r4, #0
   dbc5a:	f43f af4d 	beq.w	dbaf8 <atan+0x20>
   dbc5e:	4622      	mov	r2, r4
   dbc60:	462b      	mov	r3, r5
   dbc62:	4620      	mov	r0, r4
   dbc64:	4629      	mov	r1, r5
   dbc66:	f000 fbcf 	bl	dc408 <__adddf3>
   dbc6a:	ec41 0b10 	vmov	d0, r0, r1
   dbc6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbc72:	a365      	add	r3, pc, #404	; (adr r3, dbe08 <atan+0x330>)
   dbc74:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc78:	ee10 0a10 	vmov	r0, s0
   dbc7c:	4629      	mov	r1, r5
   dbc7e:	f000 fbc3 	bl	dc408 <__adddf3>
   dbc82:	4b6a      	ldr	r3, [pc, #424]	; (dbe2c <atan+0x354>)
   dbc84:	2200      	movs	r2, #0
   dbc86:	f001 f805 	bl	dcc94 <__aeabi_dcmpgt>
   dbc8a:	2800      	cmp	r0, #0
   dbc8c:	f43f af45 	beq.w	dbb1a <atan+0x42>
   dbc90:	ec45 4b10 	vmov	d0, r4, r5
   dbc94:	e7eb      	b.n	dbc6e <atan+0x196>
   dbc96:	f000 f8d3 	bl	dbe40 <fabs>
   dbc9a:	4b65      	ldr	r3, [pc, #404]	; (dbe30 <atan+0x358>)
   dbc9c:	429e      	cmp	r6, r3
   dbc9e:	ec55 4b10 	vmov	r4, r5, d0
   dbca2:	dc39      	bgt.n	dbd18 <atan+0x240>
   dbca4:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   dbca8:	429e      	cmp	r6, r3
   dbcaa:	dc62      	bgt.n	dbd72 <atan+0x29a>
   dbcac:	ee10 2a10 	vmov	r2, s0
   dbcb0:	ee10 0a10 	vmov	r0, s0
   dbcb4:	462b      	mov	r3, r5
   dbcb6:	4629      	mov	r1, r5
   dbcb8:	f000 fba6 	bl	dc408 <__adddf3>
   dbcbc:	4b5b      	ldr	r3, [pc, #364]	; (dbe2c <atan+0x354>)
   dbcbe:	2200      	movs	r2, #0
   dbcc0:	f000 fba0 	bl	dc404 <__aeabi_dsub>
   dbcc4:	2200      	movs	r2, #0
   dbcc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dbcca:	4606      	mov	r6, r0
   dbccc:	460f      	mov	r7, r1
   dbcce:	4620      	mov	r0, r4
   dbcd0:	4629      	mov	r1, r5
   dbcd2:	f000 fb99 	bl	dc408 <__adddf3>
   dbcd6:	4602      	mov	r2, r0
   dbcd8:	460b      	mov	r3, r1
   dbcda:	4630      	mov	r0, r6
   dbcdc:	4639      	mov	r1, r7
   dbcde:	f000 fe73 	bl	dc9c8 <__aeabi_ddiv>
   dbce2:	f04f 0b00 	mov.w	fp, #0
   dbce6:	4604      	mov	r4, r0
   dbce8:	460d      	mov	r5, r1
   dbcea:	e718      	b.n	dbb1e <atan+0x46>
   dbcec:	ed9f 0b48 	vldr	d0, [pc, #288]	; dbe10 <atan+0x338>
   dbcf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbcf4:	4640      	mov	r0, r8
   dbcf6:	4649      	mov	r1, r9
   dbcf8:	f000 fb86 	bl	dc408 <__adddf3>
   dbcfc:	4622      	mov	r2, r4
   dbcfe:	462b      	mov	r3, r5
   dbd00:	f000 fd38 	bl	dc774 <__aeabi_dmul>
   dbd04:	4602      	mov	r2, r0
   dbd06:	460b      	mov	r3, r1
   dbd08:	4620      	mov	r0, r4
   dbd0a:	4629      	mov	r1, r5
   dbd0c:	f000 fb7a 	bl	dc404 <__aeabi_dsub>
   dbd10:	ec41 0b10 	vmov	d0, r0, r1
   dbd14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbd18:	4b46      	ldr	r3, [pc, #280]	; (dbe34 <atan+0x35c>)
   dbd1a:	429e      	cmp	r6, r3
   dbd1c:	da1d      	bge.n	dbd5a <atan+0x282>
   dbd1e:	ee10 0a10 	vmov	r0, s0
   dbd22:	4b45      	ldr	r3, [pc, #276]	; (dbe38 <atan+0x360>)
   dbd24:	2200      	movs	r2, #0
   dbd26:	4629      	mov	r1, r5
   dbd28:	f000 fb6c 	bl	dc404 <__aeabi_dsub>
   dbd2c:	4b42      	ldr	r3, [pc, #264]	; (dbe38 <atan+0x360>)
   dbd2e:	4606      	mov	r6, r0
   dbd30:	460f      	mov	r7, r1
   dbd32:	2200      	movs	r2, #0
   dbd34:	4620      	mov	r0, r4
   dbd36:	4629      	mov	r1, r5
   dbd38:	f000 fd1c 	bl	dc774 <__aeabi_dmul>
   dbd3c:	4b3b      	ldr	r3, [pc, #236]	; (dbe2c <atan+0x354>)
   dbd3e:	2200      	movs	r2, #0
   dbd40:	f000 fb62 	bl	dc408 <__adddf3>
   dbd44:	4602      	mov	r2, r0
   dbd46:	460b      	mov	r3, r1
   dbd48:	4630      	mov	r0, r6
   dbd4a:	4639      	mov	r1, r7
   dbd4c:	f000 fe3c 	bl	dc9c8 <__aeabi_ddiv>
   dbd50:	f04f 0b02 	mov.w	fp, #2
   dbd54:	4604      	mov	r4, r0
   dbd56:	460d      	mov	r5, r1
   dbd58:	e6e1      	b.n	dbb1e <atan+0x46>
   dbd5a:	462b      	mov	r3, r5
   dbd5c:	ee10 2a10 	vmov	r2, s0
   dbd60:	4936      	ldr	r1, [pc, #216]	; (dbe3c <atan+0x364>)
   dbd62:	2000      	movs	r0, #0
   dbd64:	f000 fe30 	bl	dc9c8 <__aeabi_ddiv>
   dbd68:	f04f 0b03 	mov.w	fp, #3
   dbd6c:	4604      	mov	r4, r0
   dbd6e:	460d      	mov	r5, r1
   dbd70:	e6d5      	b.n	dbb1e <atan+0x46>
   dbd72:	ee10 0a10 	vmov	r0, s0
   dbd76:	4b2d      	ldr	r3, [pc, #180]	; (dbe2c <atan+0x354>)
   dbd78:	2200      	movs	r2, #0
   dbd7a:	4629      	mov	r1, r5
   dbd7c:	f000 fb42 	bl	dc404 <__aeabi_dsub>
   dbd80:	4b2a      	ldr	r3, [pc, #168]	; (dbe2c <atan+0x354>)
   dbd82:	2200      	movs	r2, #0
   dbd84:	4606      	mov	r6, r0
   dbd86:	460f      	mov	r7, r1
   dbd88:	4620      	mov	r0, r4
   dbd8a:	4629      	mov	r1, r5
   dbd8c:	f000 fb3c 	bl	dc408 <__adddf3>
   dbd90:	4602      	mov	r2, r0
   dbd92:	460b      	mov	r3, r1
   dbd94:	4630      	mov	r0, r6
   dbd96:	4639      	mov	r1, r7
   dbd98:	f000 fe16 	bl	dc9c8 <__aeabi_ddiv>
   dbd9c:	f04f 0b01 	mov.w	fp, #1
   dbda0:	4604      	mov	r4, r0
   dbda2:	460d      	mov	r5, r1
   dbda4:	e6bb      	b.n	dbb1e <atan+0x46>
   dbda6:	bf00      	nop
   dbda8:	54442d18 	.word	0x54442d18
   dbdac:	3ff921fb 	.word	0x3ff921fb
   dbdb0:	e322da11 	.word	0xe322da11
   dbdb4:	3f90ad3a 	.word	0x3f90ad3a
   dbdb8:	24760deb 	.word	0x24760deb
   dbdbc:	3fa97b4b 	.word	0x3fa97b4b
   dbdc0:	a0d03d51 	.word	0xa0d03d51
   dbdc4:	3fb10d66 	.word	0x3fb10d66
   dbdc8:	c54c206e 	.word	0xc54c206e
   dbdcc:	3fb745cd 	.word	0x3fb745cd
   dbdd0:	920083ff 	.word	0x920083ff
   dbdd4:	3fc24924 	.word	0x3fc24924
   dbdd8:	5555550d 	.word	0x5555550d
   dbddc:	3fd55555 	.word	0x3fd55555
   dbde0:	2c6a6c2f 	.word	0x2c6a6c2f
   dbde4:	bfa2b444 	.word	0xbfa2b444
   dbde8:	52defd9a 	.word	0x52defd9a
   dbdec:	3fadde2d 	.word	0x3fadde2d
   dbdf0:	af749a6d 	.word	0xaf749a6d
   dbdf4:	3fb3b0f2 	.word	0x3fb3b0f2
   dbdf8:	fe231671 	.word	0xfe231671
   dbdfc:	3fbc71c6 	.word	0x3fbc71c6
   dbe00:	9998ebc4 	.word	0x9998ebc4
   dbe04:	3fc99999 	.word	0x3fc99999
   dbe08:	8800759c 	.word	0x8800759c
   dbe0c:	7e37e43c 	.word	0x7e37e43c
   dbe10:	54442d18 	.word	0x54442d18
   dbe14:	bff921fb 	.word	0xbff921fb
   dbe18:	440fffff 	.word	0x440fffff
   dbe1c:	7ff00000 	.word	0x7ff00000
   dbe20:	3fdbffff 	.word	0x3fdbffff
   dbe24:	000deb50 	.word	0x000deb50
   dbe28:	000deb70 	.word	0x000deb70
   dbe2c:	3ff00000 	.word	0x3ff00000
   dbe30:	3ff2ffff 	.word	0x3ff2ffff
   dbe34:	40038000 	.word	0x40038000
   dbe38:	3ff80000 	.word	0x3ff80000
   dbe3c:	bff00000 	.word	0xbff00000

000dbe40 <fabs>:
   dbe40:	ec51 0b10 	vmov	r0, r1, d0
   dbe44:	ee10 2a10 	vmov	r2, s0
   dbe48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dbe4c:	ec43 2b10 	vmov	d0, r2, r3
   dbe50:	4770      	bx	lr
   dbe52:	bf00      	nop

000dbe54 <finite>:
   dbe54:	b082      	sub	sp, #8
   dbe56:	ed8d 0b00 	vstr	d0, [sp]
   dbe5a:	9801      	ldr	r0, [sp, #4]
   dbe5c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   dbe60:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   dbe64:	0fc0      	lsrs	r0, r0, #31
   dbe66:	b002      	add	sp, #8
   dbe68:	4770      	bx	lr
   dbe6a:	bf00      	nop

000dbe6c <matherr>:
   dbe6c:	2000      	movs	r0, #0
   dbe6e:	4770      	bx	lr

000dbe70 <nan>:
   dbe70:	ed9f 0b01 	vldr	d0, [pc, #4]	; dbe78 <nan+0x8>
   dbe74:	4770      	bx	lr
   dbe76:	bf00      	nop
   dbe78:	00000000 	.word	0x00000000
   dbe7c:	7ff80000 	.word	0x7ff80000

000dbe80 <rint>:
   dbe80:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbe82:	ec53 2b10 	vmov	r2, r3, d0
   dbe86:	f3c3 560a 	ubfx	r6, r3, #20, #11
   dbe8a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   dbe8e:	2813      	cmp	r0, #19
   dbe90:	ee10 5a10 	vmov	r5, s0
   dbe94:	b083      	sub	sp, #12
   dbe96:	4619      	mov	r1, r3
   dbe98:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   dbe9c:	dc31      	bgt.n	dbf02 <rint+0x82>
   dbe9e:	2800      	cmp	r0, #0
   dbea0:	db4c      	blt.n	dbf3c <rint+0xbc>
   dbea2:	4e3e      	ldr	r6, [pc, #248]	; (dbf9c <rint+0x11c>)
   dbea4:	4106      	asrs	r6, r0
   dbea6:	ea03 0706 	and.w	r7, r3, r6
   dbeaa:	4317      	orrs	r7, r2
   dbeac:	d02e      	beq.n	dbf0c <rint+0x8c>
   dbeae:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   dbeb2:	431d      	orrs	r5, r3
   dbeb4:	ea4f 0656 	mov.w	r6, r6, lsr #1
   dbeb8:	d00c      	beq.n	dbed4 <rint+0x54>
   dbeba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   dbebe:	2813      	cmp	r0, #19
   dbec0:	ea21 0606 	bic.w	r6, r1, r6
   dbec4:	fa43 f100 	asr.w	r1, r3, r0
   dbec8:	ea41 0106 	orr.w	r1, r1, r6
   dbecc:	bf0c      	ite	eq
   dbece:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   dbed2:	2500      	movne	r5, #0
   dbed4:	4832      	ldr	r0, [pc, #200]	; (dbfa0 <rint+0x120>)
   dbed6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   dbeda:	462a      	mov	r2, r5
   dbedc:	e9d4 4500 	ldrd	r4, r5, [r4]
   dbee0:	460b      	mov	r3, r1
   dbee2:	4620      	mov	r0, r4
   dbee4:	4629      	mov	r1, r5
   dbee6:	f000 fa8f 	bl	dc408 <__adddf3>
   dbeea:	e9cd 0100 	strd	r0, r1, [sp]
   dbeee:	e9dd 0100 	ldrd	r0, r1, [sp]
   dbef2:	4622      	mov	r2, r4
   dbef4:	462b      	mov	r3, r5
   dbef6:	f000 fa85 	bl	dc404 <__aeabi_dsub>
   dbefa:	ec41 0b10 	vmov	d0, r0, r1
   dbefe:	b003      	add	sp, #12
   dbf00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbf02:	2833      	cmp	r0, #51	; 0x33
   dbf04:	dd06      	ble.n	dbf14 <rint+0x94>
   dbf06:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   dbf0a:	d040      	beq.n	dbf8e <rint+0x10e>
   dbf0c:	ec43 2b10 	vmov	d0, r2, r3
   dbf10:	b003      	add	sp, #12
   dbf12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbf14:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   dbf18:	f04f 30ff 	mov.w	r0, #4294967295
   dbf1c:	40f0      	lsrs	r0, r6
   dbf1e:	4202      	tst	r2, r0
   dbf20:	d0f4      	beq.n	dbf0c <rint+0x8c>
   dbf22:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   dbf26:	ea4f 0350 	mov.w	r3, r0, lsr #1
   dbf2a:	d0d3      	beq.n	dbed4 <rint+0x54>
   dbf2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   dbf30:	ea25 0503 	bic.w	r5, r5, r3
   dbf34:	fa42 f606 	asr.w	r6, r2, r6
   dbf38:	4335      	orrs	r5, r6
   dbf3a:	e7cb      	b.n	dbed4 <rint+0x54>
   dbf3c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   dbf40:	4310      	orrs	r0, r2
   dbf42:	d0e3      	beq.n	dbf0c <rint+0x8c>
   dbf44:	f3c3 0013 	ubfx	r0, r3, #0, #20
   dbf48:	4310      	orrs	r0, r2
   dbf4a:	4245      	negs	r5, r0
   dbf4c:	4305      	orrs	r5, r0
   dbf4e:	4814      	ldr	r0, [pc, #80]	; (dbfa0 <rint+0x120>)
   dbf50:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   dbf54:	e9d0 6700 	ldrd	r6, r7, [r0]
   dbf58:	0c59      	lsrs	r1, r3, #17
   dbf5a:	0b2d      	lsrs	r5, r5, #12
   dbf5c:	0449      	lsls	r1, r1, #17
   dbf5e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   dbf62:	ea45 0301 	orr.w	r3, r5, r1
   dbf66:	4630      	mov	r0, r6
   dbf68:	4639      	mov	r1, r7
   dbf6a:	f000 fa4d 	bl	dc408 <__adddf3>
   dbf6e:	e9cd 0100 	strd	r0, r1, [sp]
   dbf72:	463b      	mov	r3, r7
   dbf74:	e9dd 0100 	ldrd	r0, r1, [sp]
   dbf78:	4632      	mov	r2, r6
   dbf7a:	f000 fa43 	bl	dc404 <__aeabi_dsub>
   dbf7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dbf82:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   dbf86:	ec41 0b10 	vmov	d0, r0, r1
   dbf8a:	b003      	add	sp, #12
   dbf8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbf8e:	ee10 0a10 	vmov	r0, s0
   dbf92:	f000 fa39 	bl	dc408 <__adddf3>
   dbf96:	ec41 0b10 	vmov	d0, r0, r1
   dbf9a:	e7b9      	b.n	dbf10 <rint+0x90>
   dbf9c:	000fffff 	.word	0x000fffff
   dbfa0:	000deb90 	.word	0x000deb90
   dbfa4:	00000000 	.word	0x00000000

000dbfa8 <scalbn>:
   dbfa8:	b538      	push	{r3, r4, r5, lr}
   dbfaa:	ec53 2b10 	vmov	r2, r3, d0
   dbfae:	f3c3 510a 	ubfx	r1, r3, #20, #11
   dbfb2:	461c      	mov	r4, r3
   dbfb4:	4605      	mov	r5, r0
   dbfb6:	bb81      	cbnz	r1, dc01a <scalbn+0x72>
   dbfb8:	ee10 1a10 	vmov	r1, s0
   dbfbc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   dbfc0:	4321      	orrs	r1, r4
   dbfc2:	d029      	beq.n	dc018 <scalbn+0x70>
   dbfc4:	4619      	mov	r1, r3
   dbfc6:	2200      	movs	r2, #0
   dbfc8:	4b3d      	ldr	r3, [pc, #244]	; (dc0c0 <scalbn+0x118>)
   dbfca:	4c3e      	ldr	r4, [pc, #248]	; (dc0c4 <scalbn+0x11c>)
   dbfcc:	ee10 0a10 	vmov	r0, s0
   dbfd0:	f000 fbd0 	bl	dc774 <__aeabi_dmul>
   dbfd4:	42a5      	cmp	r5, r4
   dbfd6:	4602      	mov	r2, r0
   dbfd8:	460b      	mov	r3, r1
   dbfda:	db16      	blt.n	dc00a <scalbn+0x62>
   dbfdc:	460c      	mov	r4, r1
   dbfde:	f3c1 510a 	ubfx	r1, r1, #20, #11
   dbfe2:	3936      	subs	r1, #54	; 0x36
   dbfe4:	4429      	add	r1, r5
   dbfe6:	f240 70fe 	movw	r0, #2046	; 0x7fe
   dbfea:	4281      	cmp	r1, r0
   dbfec:	dc21      	bgt.n	dc032 <scalbn+0x8a>
   dbfee:	2900      	cmp	r1, #0
   dbff0:	dc47      	bgt.n	dc082 <scalbn+0xda>
   dbff2:	f111 0f35 	cmn.w	r1, #53	; 0x35
   dbff6:	da34      	bge.n	dc062 <scalbn+0xba>
   dbff8:	f24c 3150 	movw	r1, #50000	; 0xc350
   dbffc:	428d      	cmp	r5, r1
   dbffe:	dc18      	bgt.n	dc032 <scalbn+0x8a>
   dc000:	2b00      	cmp	r3, #0
   dc002:	a127      	add	r1, pc, #156	; (adr r1, dc0a0 <scalbn+0xf8>)
   dc004:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc008:	db44      	blt.n	dc094 <scalbn+0xec>
   dc00a:	a325      	add	r3, pc, #148	; (adr r3, dc0a0 <scalbn+0xf8>)
   dc00c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc010:	f000 fbb0 	bl	dc774 <__aeabi_dmul>
   dc014:	ec41 0b10 	vmov	d0, r0, r1
   dc018:	bd38      	pop	{r3, r4, r5, pc}
   dc01a:	f240 70ff 	movw	r0, #2047	; 0x7ff
   dc01e:	4281      	cmp	r1, r0
   dc020:	d1e0      	bne.n	dbfe4 <scalbn+0x3c>
   dc022:	ee10 0a10 	vmov	r0, s0
   dc026:	4619      	mov	r1, r3
   dc028:	f000 f9ee 	bl	dc408 <__adddf3>
   dc02c:	ec41 0b10 	vmov	d0, r0, r1
   dc030:	bd38      	pop	{r3, r4, r5, pc}
   dc032:	2b00      	cmp	r3, #0
   dc034:	a11c      	add	r1, pc, #112	; (adr r1, dc0a8 <scalbn+0x100>)
   dc036:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc03a:	db07      	blt.n	dc04c <scalbn+0xa4>
   dc03c:	a31a      	add	r3, pc, #104	; (adr r3, dc0a8 <scalbn+0x100>)
   dc03e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc042:	f000 fb97 	bl	dc774 <__aeabi_dmul>
   dc046:	ec41 0b10 	vmov	d0, r0, r1
   dc04a:	bd38      	pop	{r3, r4, r5, pc}
   dc04c:	a118      	add	r1, pc, #96	; (adr r1, dc0b0 <scalbn+0x108>)
   dc04e:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc052:	a315      	add	r3, pc, #84	; (adr r3, dc0a8 <scalbn+0x100>)
   dc054:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc058:	f000 fb8c 	bl	dc774 <__aeabi_dmul>
   dc05c:	ec41 0b10 	vmov	d0, r0, r1
   dc060:	e7f3      	b.n	dc04a <scalbn+0xa2>
   dc062:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   dc066:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   dc06a:	3136      	adds	r1, #54	; 0x36
   dc06c:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   dc070:	4610      	mov	r0, r2
   dc072:	4619      	mov	r1, r3
   dc074:	2200      	movs	r2, #0
   dc076:	4b14      	ldr	r3, [pc, #80]	; (dc0c8 <scalbn+0x120>)
   dc078:	f000 fb7c 	bl	dc774 <__aeabi_dmul>
   dc07c:	ec41 0b10 	vmov	d0, r0, r1
   dc080:	bd38      	pop	{r3, r4, r5, pc}
   dc082:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   dc086:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   dc08a:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   dc08e:	ec43 2b10 	vmov	d0, r2, r3
   dc092:	bd38      	pop	{r3, r4, r5, pc}
   dc094:	a108      	add	r1, pc, #32	; (adr r1, dc0b8 <scalbn+0x110>)
   dc096:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc09a:	e7b6      	b.n	dc00a <scalbn+0x62>
   dc09c:	f3af 8000 	nop.w
   dc0a0:	c2f8f359 	.word	0xc2f8f359
   dc0a4:	01a56e1f 	.word	0x01a56e1f
   dc0a8:	8800759c 	.word	0x8800759c
   dc0ac:	7e37e43c 	.word	0x7e37e43c
   dc0b0:	8800759c 	.word	0x8800759c
   dc0b4:	fe37e43c 	.word	0xfe37e43c
   dc0b8:	c2f8f359 	.word	0xc2f8f359
   dc0bc:	81a56e1f 	.word	0x81a56e1f
   dc0c0:	43500000 	.word	0x43500000
   dc0c4:	ffff3cb0 	.word	0xffff3cb0
   dc0c8:	3c900000 	.word	0x3c900000

000dc0cc <atanf>:
   dc0cc:	b538      	push	{r3, r4, r5, lr}
   dc0ce:	ee10 5a10 	vmov	r5, s0
   dc0d2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   dc0d6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   dc0da:	eef0 7a40 	vmov.f32	s15, s0
   dc0de:	db0b      	blt.n	dc0f8 <atanf+0x2c>
   dc0e0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   dc0e4:	dc59      	bgt.n	dc19a <atanf+0xce>
   dc0e6:	eddf 7a52 	vldr	s15, [pc, #328]	; dc230 <atanf+0x164>
   dc0ea:	ed9f 0a52 	vldr	s0, [pc, #328]	; dc234 <atanf+0x168>
   dc0ee:	2d00      	cmp	r5, #0
   dc0f0:	bfc8      	it	gt
   dc0f2:	eeb0 0a67 	vmovgt.f32	s0, s15
   dc0f6:	bd38      	pop	{r3, r4, r5, pc}
   dc0f8:	4b4f      	ldr	r3, [pc, #316]	; (dc238 <atanf+0x16c>)
   dc0fa:	429c      	cmp	r4, r3
   dc0fc:	dc5c      	bgt.n	dc1b8 <atanf+0xec>
   dc0fe:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   dc102:	db4d      	blt.n	dc1a0 <atanf+0xd4>
   dc104:	f04f 33ff 	mov.w	r3, #4294967295
   dc108:	ee27 6aa7 	vmul.f32	s12, s15, s15
   dc10c:	ed9f 1a4b 	vldr	s2, [pc, #300]	; dc23c <atanf+0x170>
   dc110:	ed9f 2a4b 	vldr	s4, [pc, #300]	; dc240 <atanf+0x174>
   dc114:	ed9f 3a4b 	vldr	s6, [pc, #300]	; dc244 <atanf+0x178>
   dc118:	eddf 1a4b 	vldr	s3, [pc, #300]	; dc248 <atanf+0x17c>
   dc11c:	eddf 2a4b 	vldr	s5, [pc, #300]	; dc24c <atanf+0x180>
   dc120:	ed9f 4a4b 	vldr	s8, [pc, #300]	; dc250 <atanf+0x184>
   dc124:	eddf 3a4b 	vldr	s7, [pc, #300]	; dc254 <atanf+0x188>
   dc128:	ed9f 5a4b 	vldr	s10, [pc, #300]	; dc258 <atanf+0x18c>
   dc12c:	eddf 4a4b 	vldr	s9, [pc, #300]	; dc25c <atanf+0x190>
   dc130:	eddf 6a4b 	vldr	s13, [pc, #300]	; dc260 <atanf+0x194>
   dc134:	eddf 5a4b 	vldr	s11, [pc, #300]	; dc264 <atanf+0x198>
   dc138:	ee26 7a06 	vmul.f32	s14, s12, s12
   dc13c:	1c5a      	adds	r2, r3, #1
   dc13e:	eea7 2a01 	vfma.f32	s4, s14, s2
   dc142:	eee7 2a21 	vfma.f32	s5, s14, s3
   dc146:	eea2 3a07 	vfma.f32	s6, s4, s14
   dc14a:	eee2 3a87 	vfma.f32	s7, s5, s14
   dc14e:	eea3 4a07 	vfma.f32	s8, s6, s14
   dc152:	eee3 4a87 	vfma.f32	s9, s7, s14
   dc156:	eea4 5a07 	vfma.f32	s10, s8, s14
   dc15a:	eee4 5a87 	vfma.f32	s11, s9, s14
   dc15e:	eee5 6a07 	vfma.f32	s13, s10, s14
   dc162:	ee25 7a87 	vmul.f32	s14, s11, s14
   dc166:	ee66 6a86 	vmul.f32	s13, s13, s12
   dc16a:	d03a      	beq.n	dc1e2 <atanf+0x116>
   dc16c:	493e      	ldr	r1, [pc, #248]	; (dc268 <atanf+0x19c>)
   dc16e:	4a3f      	ldr	r2, [pc, #252]	; (dc26c <atanf+0x1a0>)
   dc170:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   dc174:	ee76 6a87 	vadd.f32	s13, s13, s14
   dc178:	ed91 0a00 	vldr	s0, [r1]
   dc17c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   dc180:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dc184:	2d00      	cmp	r5, #0
   dc186:	ed93 7a00 	vldr	s14, [r3]
   dc18a:	ee70 7a67 	vsub.f32	s15, s0, s15
   dc18e:	ee37 0a67 	vsub.f32	s0, s14, s15
   dc192:	dab0      	bge.n	dc0f6 <atanf+0x2a>
   dc194:	eeb1 0a40 	vneg.f32	s0, s0
   dc198:	bd38      	pop	{r3, r4, r5, pc}
   dc19a:	ee30 0a00 	vadd.f32	s0, s0, s0
   dc19e:	bd38      	pop	{r3, r4, r5, pc}
   dc1a0:	ed9f 7a33 	vldr	s14, [pc, #204]	; dc270 <atanf+0x1a4>
   dc1a4:	ee30 7a07 	vadd.f32	s14, s0, s14
   dc1a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   dc1ac:	eeb4 7ae6 	vcmpe.f32	s14, s13
   dc1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc1b4:	dda6      	ble.n	dc104 <atanf+0x38>
   dc1b6:	bd38      	pop	{r3, r4, r5, pc}
   dc1b8:	f000 f860 	bl	dc27c <fabsf>
   dc1bc:	4b2d      	ldr	r3, [pc, #180]	; (dc274 <atanf+0x1a8>)
   dc1be:	429c      	cmp	r4, r3
   dc1c0:	dc16      	bgt.n	dc1f0 <atanf+0x124>
   dc1c2:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   dc1c6:	429c      	cmp	r4, r3
   dc1c8:	dc27      	bgt.n	dc21a <atanf+0x14e>
   dc1ca:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   dc1ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   dc1d2:	eea0 7a27 	vfma.f32	s14, s0, s15
   dc1d6:	2300      	movs	r3, #0
   dc1d8:	ee30 0a27 	vadd.f32	s0, s0, s15
   dc1dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dc1e0:	e792      	b.n	dc108 <atanf+0x3c>
   dc1e2:	ee76 6a87 	vadd.f32	s13, s13, s14
   dc1e6:	eee6 7ae7 	vfms.f32	s15, s13, s15
   dc1ea:	eeb0 0a67 	vmov.f32	s0, s15
   dc1ee:	bd38      	pop	{r3, r4, r5, pc}
   dc1f0:	4b21      	ldr	r3, [pc, #132]	; (dc278 <atanf+0x1ac>)
   dc1f2:	429c      	cmp	r4, r3
   dc1f4:	dc0b      	bgt.n	dc20e <atanf+0x142>
   dc1f6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   dc1fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   dc1fe:	eea0 7a27 	vfma.f32	s14, s0, s15
   dc202:	2302      	movs	r3, #2
   dc204:	ee30 0a67 	vsub.f32	s0, s0, s15
   dc208:	eec0 7a07 	vdiv.f32	s15, s0, s14
   dc20c:	e77c      	b.n	dc108 <atanf+0x3c>
   dc20e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   dc212:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dc216:	2303      	movs	r3, #3
   dc218:	e776      	b.n	dc108 <atanf+0x3c>
   dc21a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   dc21e:	ee30 7a67 	vsub.f32	s14, s0, s15
   dc222:	ee30 0a27 	vadd.f32	s0, s0, s15
   dc226:	2301      	movs	r3, #1
   dc228:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dc22c:	e76c      	b.n	dc108 <atanf+0x3c>
   dc22e:	bf00      	nop
   dc230:	3fc90fdb 	.word	0x3fc90fdb
   dc234:	bfc90fdb 	.word	0xbfc90fdb
   dc238:	3edfffff 	.word	0x3edfffff
   dc23c:	3c8569d7 	.word	0x3c8569d7
   dc240:	3d4bda59 	.word	0x3d4bda59
   dc244:	3d886b35 	.word	0x3d886b35
   dc248:	bd15a221 	.word	0xbd15a221
   dc24c:	bd6ef16b 	.word	0xbd6ef16b
   dc250:	3dba2e6e 	.word	0x3dba2e6e
   dc254:	bd9d8795 	.word	0xbd9d8795
   dc258:	3e124925 	.word	0x3e124925
   dc25c:	bde38e38 	.word	0xbde38e38
   dc260:	3eaaaaab 	.word	0x3eaaaaab
   dc264:	be4ccccd 	.word	0xbe4ccccd
   dc268:	000debb0 	.word	0x000debb0
   dc26c:	000deba0 	.word	0x000deba0
   dc270:	7149f2ca 	.word	0x7149f2ca
   dc274:	3f97ffff 	.word	0x3f97ffff
   dc278:	401bffff 	.word	0x401bffff

000dc27c <fabsf>:
   dc27c:	ee10 3a10 	vmov	r3, s0
   dc280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dc284:	ee00 3a10 	vmov	s0, r3
   dc288:	4770      	bx	lr
   dc28a:	bf00      	nop

000dc28c <floorf>:
   dc28c:	ee10 2a10 	vmov	r2, s0
   dc290:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   dc294:	3b7f      	subs	r3, #127	; 0x7f
   dc296:	2b16      	cmp	r3, #22
   dc298:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   dc29c:	dc1a      	bgt.n	dc2d4 <floorf+0x48>
   dc29e:	2b00      	cmp	r3, #0
   dc2a0:	db1e      	blt.n	dc2e0 <floorf+0x54>
   dc2a2:	491a      	ldr	r1, [pc, #104]	; (dc30c <floorf+0x80>)
   dc2a4:	4119      	asrs	r1, r3
   dc2a6:	420a      	tst	r2, r1
   dc2a8:	d027      	beq.n	dc2fa <floorf+0x6e>
   dc2aa:	eddf 7a19 	vldr	s15, [pc, #100]	; dc310 <floorf+0x84>
   dc2ae:	ee70 7a27 	vadd.f32	s15, s0, s15
   dc2b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dc2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc2ba:	dd1e      	ble.n	dc2fa <floorf+0x6e>
   dc2bc:	2a00      	cmp	r2, #0
   dc2be:	da04      	bge.n	dc2ca <floorf+0x3e>
   dc2c0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   dc2c4:	fa40 f303 	asr.w	r3, r0, r3
   dc2c8:	441a      	add	r2, r3
   dc2ca:	ea22 0301 	bic.w	r3, r2, r1
   dc2ce:	ee00 3a10 	vmov	s0, r3
   dc2d2:	4770      	bx	lr
   dc2d4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   dc2d8:	d30f      	bcc.n	dc2fa <floorf+0x6e>
   dc2da:	ee30 0a00 	vadd.f32	s0, s0, s0
   dc2de:	4770      	bx	lr
   dc2e0:	eddf 7a0b 	vldr	s15, [pc, #44]	; dc310 <floorf+0x84>
   dc2e4:	ee70 7a27 	vadd.f32	s15, s0, s15
   dc2e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dc2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc2f0:	dd03      	ble.n	dc2fa <floorf+0x6e>
   dc2f2:	2a00      	cmp	r2, #0
   dc2f4:	db02      	blt.n	dc2fc <floorf+0x70>
   dc2f6:	ed9f 0a07 	vldr	s0, [pc, #28]	; dc314 <floorf+0x88>
   dc2fa:	4770      	bx	lr
   dc2fc:	2900      	cmp	r1, #0
   dc2fe:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   dc302:	bf18      	it	ne
   dc304:	eeb0 0a67 	vmovne.f32	s0, s15
   dc308:	4770      	bx	lr
   dc30a:	bf00      	nop
   dc30c:	007fffff 	.word	0x007fffff
   dc310:	7149f2ca 	.word	0x7149f2ca
   dc314:	00000000 	.word	0x00000000

000dc318 <scalbnf>:
   dc318:	b082      	sub	sp, #8
   dc31a:	ed8d 0a01 	vstr	s0, [sp, #4]
   dc31e:	9b01      	ldr	r3, [sp, #4]
   dc320:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   dc324:	d02a      	beq.n	dc37c <scalbnf+0x64>
   dc326:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   dc32a:	d223      	bcs.n	dc374 <scalbnf+0x5c>
   dc32c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   dc330:	d128      	bne.n	dc384 <scalbnf+0x6c>
   dc332:	ed9d 7a01 	vldr	s14, [sp, #4]
   dc336:	eddf 7a2a 	vldr	s15, [pc, #168]	; dc3e0 <scalbnf+0xc8>
   dc33a:	4b2a      	ldr	r3, [pc, #168]	; (dc3e4 <scalbnf+0xcc>)
   dc33c:	ee67 7a27 	vmul.f32	s15, s14, s15
   dc340:	4298      	cmp	r0, r3
   dc342:	edcd 7a01 	vstr	s15, [sp, #4]
   dc346:	db37      	blt.n	dc3b8 <scalbnf+0xa0>
   dc348:	9b01      	ldr	r3, [sp, #4]
   dc34a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   dc34e:	3a19      	subs	r2, #25
   dc350:	4402      	add	r2, r0
   dc352:	2afe      	cmp	r2, #254	; 0xfe
   dc354:	dd1a      	ble.n	dc38c <scalbnf+0x74>
   dc356:	ed9f 0a24 	vldr	s0, [pc, #144]	; dc3e8 <scalbnf+0xd0>
   dc35a:	ed9f 7a24 	vldr	s14, [pc, #144]	; dc3ec <scalbnf+0xd4>
   dc35e:	9b01      	ldr	r3, [sp, #4]
   dc360:	2b00      	cmp	r3, #0
   dc362:	eef0 7a40 	vmov.f32	s15, s0
   dc366:	bfb8      	it	lt
   dc368:	eeb0 0a47 	vmovlt.f32	s0, s14
   dc36c:	ee20 0a27 	vmul.f32	s0, s0, s15
   dc370:	b002      	add	sp, #8
   dc372:	4770      	bx	lr
   dc374:	ee30 0a00 	vadd.f32	s0, s0, s0
   dc378:	b002      	add	sp, #8
   dc37a:	4770      	bx	lr
   dc37c:	ed9d 0a01 	vldr	s0, [sp, #4]
   dc380:	b002      	add	sp, #8
   dc382:	4770      	bx	lr
   dc384:	0dd2      	lsrs	r2, r2, #23
   dc386:	4402      	add	r2, r0
   dc388:	2afe      	cmp	r2, #254	; 0xfe
   dc38a:	dce4      	bgt.n	dc356 <scalbnf+0x3e>
   dc38c:	2a00      	cmp	r2, #0
   dc38e:	dc0b      	bgt.n	dc3a8 <scalbnf+0x90>
   dc390:	f112 0f16 	cmn.w	r2, #22
   dc394:	da17      	bge.n	dc3c6 <scalbnf+0xae>
   dc396:	f24c 3350 	movw	r3, #50000	; 0xc350
   dc39a:	4298      	cmp	r0, r3
   dc39c:	dcdb      	bgt.n	dc356 <scalbnf+0x3e>
   dc39e:	ed9f 0a14 	vldr	s0, [pc, #80]	; dc3f0 <scalbnf+0xd8>
   dc3a2:	ed9f 7a14 	vldr	s14, [pc, #80]	; dc3f4 <scalbnf+0xdc>
   dc3a6:	e7da      	b.n	dc35e <scalbnf+0x46>
   dc3a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   dc3ac:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   dc3b0:	ee00 3a10 	vmov	s0, r3
   dc3b4:	b002      	add	sp, #8
   dc3b6:	4770      	bx	lr
   dc3b8:	ed9f 0a0d 	vldr	s0, [pc, #52]	; dc3f0 <scalbnf+0xd8>
   dc3bc:	eddd 7a01 	vldr	s15, [sp, #4]
   dc3c0:	ee27 0a80 	vmul.f32	s0, s15, s0
   dc3c4:	e7d8      	b.n	dc378 <scalbnf+0x60>
   dc3c6:	3219      	adds	r2, #25
   dc3c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   dc3cc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   dc3d0:	eddf 7a09 	vldr	s15, [pc, #36]	; dc3f8 <scalbnf+0xe0>
   dc3d4:	ee07 3a10 	vmov	s14, r3
   dc3d8:	ee27 0a27 	vmul.f32	s0, s14, s15
   dc3dc:	e7cc      	b.n	dc378 <scalbnf+0x60>
   dc3de:	bf00      	nop
   dc3e0:	4c000000 	.word	0x4c000000
   dc3e4:	ffff3cb0 	.word	0xffff3cb0
   dc3e8:	7149f2ca 	.word	0x7149f2ca
   dc3ec:	f149f2ca 	.word	0xf149f2ca
   dc3f0:	0da24260 	.word	0x0da24260
   dc3f4:	8da24260 	.word	0x8da24260
   dc3f8:	33000000 	.word	0x33000000

000dc3fc <__aeabi_drsub>:
   dc3fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dc400:	e002      	b.n	dc408 <__adddf3>
   dc402:	bf00      	nop

000dc404 <__aeabi_dsub>:
   dc404:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dc408 <__adddf3>:
   dc408:	b530      	push	{r4, r5, lr}
   dc40a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dc40e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dc412:	ea94 0f05 	teq	r4, r5
   dc416:	bf08      	it	eq
   dc418:	ea90 0f02 	teqeq	r0, r2
   dc41c:	bf1f      	itttt	ne
   dc41e:	ea54 0c00 	orrsne.w	ip, r4, r0
   dc422:	ea55 0c02 	orrsne.w	ip, r5, r2
   dc426:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dc42a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc42e:	f000 80e2 	beq.w	dc5f6 <__adddf3+0x1ee>
   dc432:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dc436:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dc43a:	bfb8      	it	lt
   dc43c:	426d      	neglt	r5, r5
   dc43e:	dd0c      	ble.n	dc45a <__adddf3+0x52>
   dc440:	442c      	add	r4, r5
   dc442:	ea80 0202 	eor.w	r2, r0, r2
   dc446:	ea81 0303 	eor.w	r3, r1, r3
   dc44a:	ea82 0000 	eor.w	r0, r2, r0
   dc44e:	ea83 0101 	eor.w	r1, r3, r1
   dc452:	ea80 0202 	eor.w	r2, r0, r2
   dc456:	ea81 0303 	eor.w	r3, r1, r3
   dc45a:	2d36      	cmp	r5, #54	; 0x36
   dc45c:	bf88      	it	hi
   dc45e:	bd30      	pophi	{r4, r5, pc}
   dc460:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc464:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc468:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dc46c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dc470:	d002      	beq.n	dc478 <__adddf3+0x70>
   dc472:	4240      	negs	r0, r0
   dc474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc478:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dc47c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc480:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dc484:	d002      	beq.n	dc48c <__adddf3+0x84>
   dc486:	4252      	negs	r2, r2
   dc488:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc48c:	ea94 0f05 	teq	r4, r5
   dc490:	f000 80a7 	beq.w	dc5e2 <__adddf3+0x1da>
   dc494:	f1a4 0401 	sub.w	r4, r4, #1
   dc498:	f1d5 0e20 	rsbs	lr, r5, #32
   dc49c:	db0d      	blt.n	dc4ba <__adddf3+0xb2>
   dc49e:	fa02 fc0e 	lsl.w	ip, r2, lr
   dc4a2:	fa22 f205 	lsr.w	r2, r2, r5
   dc4a6:	1880      	adds	r0, r0, r2
   dc4a8:	f141 0100 	adc.w	r1, r1, #0
   dc4ac:	fa03 f20e 	lsl.w	r2, r3, lr
   dc4b0:	1880      	adds	r0, r0, r2
   dc4b2:	fa43 f305 	asr.w	r3, r3, r5
   dc4b6:	4159      	adcs	r1, r3
   dc4b8:	e00e      	b.n	dc4d8 <__adddf3+0xd0>
   dc4ba:	f1a5 0520 	sub.w	r5, r5, #32
   dc4be:	f10e 0e20 	add.w	lr, lr, #32
   dc4c2:	2a01      	cmp	r2, #1
   dc4c4:	fa03 fc0e 	lsl.w	ip, r3, lr
   dc4c8:	bf28      	it	cs
   dc4ca:	f04c 0c02 	orrcs.w	ip, ip, #2
   dc4ce:	fa43 f305 	asr.w	r3, r3, r5
   dc4d2:	18c0      	adds	r0, r0, r3
   dc4d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dc4d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc4dc:	d507      	bpl.n	dc4ee <__adddf3+0xe6>
   dc4de:	f04f 0e00 	mov.w	lr, #0
   dc4e2:	f1dc 0c00 	rsbs	ip, ip, #0
   dc4e6:	eb7e 0000 	sbcs.w	r0, lr, r0
   dc4ea:	eb6e 0101 	sbc.w	r1, lr, r1
   dc4ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dc4f2:	d31b      	bcc.n	dc52c <__adddf3+0x124>
   dc4f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dc4f8:	d30c      	bcc.n	dc514 <__adddf3+0x10c>
   dc4fa:	0849      	lsrs	r1, r1, #1
   dc4fc:	ea5f 0030 	movs.w	r0, r0, rrx
   dc500:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dc504:	f104 0401 	add.w	r4, r4, #1
   dc508:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dc50c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dc510:	f080 809a 	bcs.w	dc648 <__adddf3+0x240>
   dc514:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dc518:	bf08      	it	eq
   dc51a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc51e:	f150 0000 	adcs.w	r0, r0, #0
   dc522:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc526:	ea41 0105 	orr.w	r1, r1, r5
   dc52a:	bd30      	pop	{r4, r5, pc}
   dc52c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dc530:	4140      	adcs	r0, r0
   dc532:	eb41 0101 	adc.w	r1, r1, r1
   dc536:	3c01      	subs	r4, #1
   dc538:	bf28      	it	cs
   dc53a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dc53e:	d2e9      	bcs.n	dc514 <__adddf3+0x10c>
   dc540:	f091 0f00 	teq	r1, #0
   dc544:	bf04      	itt	eq
   dc546:	4601      	moveq	r1, r0
   dc548:	2000      	moveq	r0, #0
   dc54a:	fab1 f381 	clz	r3, r1
   dc54e:	bf08      	it	eq
   dc550:	3320      	addeq	r3, #32
   dc552:	f1a3 030b 	sub.w	r3, r3, #11
   dc556:	f1b3 0220 	subs.w	r2, r3, #32
   dc55a:	da0c      	bge.n	dc576 <__adddf3+0x16e>
   dc55c:	320c      	adds	r2, #12
   dc55e:	dd08      	ble.n	dc572 <__adddf3+0x16a>
   dc560:	f102 0c14 	add.w	ip, r2, #20
   dc564:	f1c2 020c 	rsb	r2, r2, #12
   dc568:	fa01 f00c 	lsl.w	r0, r1, ip
   dc56c:	fa21 f102 	lsr.w	r1, r1, r2
   dc570:	e00c      	b.n	dc58c <__adddf3+0x184>
   dc572:	f102 0214 	add.w	r2, r2, #20
   dc576:	bfd8      	it	le
   dc578:	f1c2 0c20 	rsble	ip, r2, #32
   dc57c:	fa01 f102 	lsl.w	r1, r1, r2
   dc580:	fa20 fc0c 	lsr.w	ip, r0, ip
   dc584:	bfdc      	itt	le
   dc586:	ea41 010c 	orrle.w	r1, r1, ip
   dc58a:	4090      	lslle	r0, r2
   dc58c:	1ae4      	subs	r4, r4, r3
   dc58e:	bfa2      	ittt	ge
   dc590:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dc594:	4329      	orrge	r1, r5
   dc596:	bd30      	popge	{r4, r5, pc}
   dc598:	ea6f 0404 	mvn.w	r4, r4
   dc59c:	3c1f      	subs	r4, #31
   dc59e:	da1c      	bge.n	dc5da <__adddf3+0x1d2>
   dc5a0:	340c      	adds	r4, #12
   dc5a2:	dc0e      	bgt.n	dc5c2 <__adddf3+0x1ba>
   dc5a4:	f104 0414 	add.w	r4, r4, #20
   dc5a8:	f1c4 0220 	rsb	r2, r4, #32
   dc5ac:	fa20 f004 	lsr.w	r0, r0, r4
   dc5b0:	fa01 f302 	lsl.w	r3, r1, r2
   dc5b4:	ea40 0003 	orr.w	r0, r0, r3
   dc5b8:	fa21 f304 	lsr.w	r3, r1, r4
   dc5bc:	ea45 0103 	orr.w	r1, r5, r3
   dc5c0:	bd30      	pop	{r4, r5, pc}
   dc5c2:	f1c4 040c 	rsb	r4, r4, #12
   dc5c6:	f1c4 0220 	rsb	r2, r4, #32
   dc5ca:	fa20 f002 	lsr.w	r0, r0, r2
   dc5ce:	fa01 f304 	lsl.w	r3, r1, r4
   dc5d2:	ea40 0003 	orr.w	r0, r0, r3
   dc5d6:	4629      	mov	r1, r5
   dc5d8:	bd30      	pop	{r4, r5, pc}
   dc5da:	fa21 f004 	lsr.w	r0, r1, r4
   dc5de:	4629      	mov	r1, r5
   dc5e0:	bd30      	pop	{r4, r5, pc}
   dc5e2:	f094 0f00 	teq	r4, #0
   dc5e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dc5ea:	bf06      	itte	eq
   dc5ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dc5f0:	3401      	addeq	r4, #1
   dc5f2:	3d01      	subne	r5, #1
   dc5f4:	e74e      	b.n	dc494 <__adddf3+0x8c>
   dc5f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc5fa:	bf18      	it	ne
   dc5fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc600:	d029      	beq.n	dc656 <__adddf3+0x24e>
   dc602:	ea94 0f05 	teq	r4, r5
   dc606:	bf08      	it	eq
   dc608:	ea90 0f02 	teqeq	r0, r2
   dc60c:	d005      	beq.n	dc61a <__adddf3+0x212>
   dc60e:	ea54 0c00 	orrs.w	ip, r4, r0
   dc612:	bf04      	itt	eq
   dc614:	4619      	moveq	r1, r3
   dc616:	4610      	moveq	r0, r2
   dc618:	bd30      	pop	{r4, r5, pc}
   dc61a:	ea91 0f03 	teq	r1, r3
   dc61e:	bf1e      	ittt	ne
   dc620:	2100      	movne	r1, #0
   dc622:	2000      	movne	r0, #0
   dc624:	bd30      	popne	{r4, r5, pc}
   dc626:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dc62a:	d105      	bne.n	dc638 <__adddf3+0x230>
   dc62c:	0040      	lsls	r0, r0, #1
   dc62e:	4149      	adcs	r1, r1
   dc630:	bf28      	it	cs
   dc632:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dc636:	bd30      	pop	{r4, r5, pc}
   dc638:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dc63c:	bf3c      	itt	cc
   dc63e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dc642:	bd30      	popcc	{r4, r5, pc}
   dc644:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc648:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dc64c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc650:	f04f 0000 	mov.w	r0, #0
   dc654:	bd30      	pop	{r4, r5, pc}
   dc656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc65a:	bf1a      	itte	ne
   dc65c:	4619      	movne	r1, r3
   dc65e:	4610      	movne	r0, r2
   dc660:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dc664:	bf1c      	itt	ne
   dc666:	460b      	movne	r3, r1
   dc668:	4602      	movne	r2, r0
   dc66a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc66e:	bf06      	itte	eq
   dc670:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dc674:	ea91 0f03 	teqeq	r1, r3
   dc678:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dc67c:	bd30      	pop	{r4, r5, pc}
   dc67e:	bf00      	nop

000dc680 <__aeabi_ui2d>:
   dc680:	f090 0f00 	teq	r0, #0
   dc684:	bf04      	itt	eq
   dc686:	2100      	moveq	r1, #0
   dc688:	4770      	bxeq	lr
   dc68a:	b530      	push	{r4, r5, lr}
   dc68c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc690:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc694:	f04f 0500 	mov.w	r5, #0
   dc698:	f04f 0100 	mov.w	r1, #0
   dc69c:	e750      	b.n	dc540 <__adddf3+0x138>
   dc69e:	bf00      	nop

000dc6a0 <__aeabi_i2d>:
   dc6a0:	f090 0f00 	teq	r0, #0
   dc6a4:	bf04      	itt	eq
   dc6a6:	2100      	moveq	r1, #0
   dc6a8:	4770      	bxeq	lr
   dc6aa:	b530      	push	{r4, r5, lr}
   dc6ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc6b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc6b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dc6b8:	bf48      	it	mi
   dc6ba:	4240      	negmi	r0, r0
   dc6bc:	f04f 0100 	mov.w	r1, #0
   dc6c0:	e73e      	b.n	dc540 <__adddf3+0x138>
   dc6c2:	bf00      	nop

000dc6c4 <__aeabi_f2d>:
   dc6c4:	0042      	lsls	r2, r0, #1
   dc6c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dc6ca:	ea4f 0131 	mov.w	r1, r1, rrx
   dc6ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dc6d2:	bf1f      	itttt	ne
   dc6d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dc6d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dc6dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dc6e0:	4770      	bxne	lr
   dc6e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dc6e6:	bf08      	it	eq
   dc6e8:	4770      	bxeq	lr
   dc6ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dc6ee:	bf04      	itt	eq
   dc6f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dc6f4:	4770      	bxeq	lr
   dc6f6:	b530      	push	{r4, r5, lr}
   dc6f8:	f44f 7460 	mov.w	r4, #896	; 0x380
   dc6fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc704:	e71c      	b.n	dc540 <__adddf3+0x138>
   dc706:	bf00      	nop

000dc708 <__aeabi_ul2d>:
   dc708:	ea50 0201 	orrs.w	r2, r0, r1
   dc70c:	bf08      	it	eq
   dc70e:	4770      	bxeq	lr
   dc710:	b530      	push	{r4, r5, lr}
   dc712:	f04f 0500 	mov.w	r5, #0
   dc716:	e00a      	b.n	dc72e <__aeabi_l2d+0x16>

000dc718 <__aeabi_l2d>:
   dc718:	ea50 0201 	orrs.w	r2, r0, r1
   dc71c:	bf08      	it	eq
   dc71e:	4770      	bxeq	lr
   dc720:	b530      	push	{r4, r5, lr}
   dc722:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dc726:	d502      	bpl.n	dc72e <__aeabi_l2d+0x16>
   dc728:	4240      	negs	r0, r0
   dc72a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc72e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc732:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc736:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dc73a:	f43f aed8 	beq.w	dc4ee <__adddf3+0xe6>
   dc73e:	f04f 0203 	mov.w	r2, #3
   dc742:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc746:	bf18      	it	ne
   dc748:	3203      	addne	r2, #3
   dc74a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc74e:	bf18      	it	ne
   dc750:	3203      	addne	r2, #3
   dc752:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dc756:	f1c2 0320 	rsb	r3, r2, #32
   dc75a:	fa00 fc03 	lsl.w	ip, r0, r3
   dc75e:	fa20 f002 	lsr.w	r0, r0, r2
   dc762:	fa01 fe03 	lsl.w	lr, r1, r3
   dc766:	ea40 000e 	orr.w	r0, r0, lr
   dc76a:	fa21 f102 	lsr.w	r1, r1, r2
   dc76e:	4414      	add	r4, r2
   dc770:	e6bd      	b.n	dc4ee <__adddf3+0xe6>
   dc772:	bf00      	nop

000dc774 <__aeabi_dmul>:
   dc774:	b570      	push	{r4, r5, r6, lr}
   dc776:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc77a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc77e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc782:	bf1d      	ittte	ne
   dc784:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc788:	ea94 0f0c 	teqne	r4, ip
   dc78c:	ea95 0f0c 	teqne	r5, ip
   dc790:	f000 f8de 	bleq	dc950 <__aeabi_dmul+0x1dc>
   dc794:	442c      	add	r4, r5
   dc796:	ea81 0603 	eor.w	r6, r1, r3
   dc79a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dc79e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dc7a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dc7a6:	bf18      	it	ne
   dc7a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dc7ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc7b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc7b4:	d038      	beq.n	dc828 <__aeabi_dmul+0xb4>
   dc7b6:	fba0 ce02 	umull	ip, lr, r0, r2
   dc7ba:	f04f 0500 	mov.w	r5, #0
   dc7be:	fbe1 e502 	umlal	lr, r5, r1, r2
   dc7c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dc7c6:	fbe0 e503 	umlal	lr, r5, r0, r3
   dc7ca:	f04f 0600 	mov.w	r6, #0
   dc7ce:	fbe1 5603 	umlal	r5, r6, r1, r3
   dc7d2:	f09c 0f00 	teq	ip, #0
   dc7d6:	bf18      	it	ne
   dc7d8:	f04e 0e01 	orrne.w	lr, lr, #1
   dc7dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dc7e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dc7e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dc7e8:	d204      	bcs.n	dc7f4 <__aeabi_dmul+0x80>
   dc7ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dc7ee:	416d      	adcs	r5, r5
   dc7f0:	eb46 0606 	adc.w	r6, r6, r6
   dc7f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dc7f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dc7fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dc800:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dc804:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dc808:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc80c:	bf88      	it	hi
   dc80e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc812:	d81e      	bhi.n	dc852 <__aeabi_dmul+0xde>
   dc814:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dc818:	bf08      	it	eq
   dc81a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dc81e:	f150 0000 	adcs.w	r0, r0, #0
   dc822:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc826:	bd70      	pop	{r4, r5, r6, pc}
   dc828:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dc82c:	ea46 0101 	orr.w	r1, r6, r1
   dc830:	ea40 0002 	orr.w	r0, r0, r2
   dc834:	ea81 0103 	eor.w	r1, r1, r3
   dc838:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dc83c:	bfc2      	ittt	gt
   dc83e:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc842:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc846:	bd70      	popgt	{r4, r5, r6, pc}
   dc848:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc84c:	f04f 0e00 	mov.w	lr, #0
   dc850:	3c01      	subs	r4, #1
   dc852:	f300 80ab 	bgt.w	dc9ac <__aeabi_dmul+0x238>
   dc856:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dc85a:	bfde      	ittt	le
   dc85c:	2000      	movle	r0, #0
   dc85e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dc862:	bd70      	pople	{r4, r5, r6, pc}
   dc864:	f1c4 0400 	rsb	r4, r4, #0
   dc868:	3c20      	subs	r4, #32
   dc86a:	da35      	bge.n	dc8d8 <__aeabi_dmul+0x164>
   dc86c:	340c      	adds	r4, #12
   dc86e:	dc1b      	bgt.n	dc8a8 <__aeabi_dmul+0x134>
   dc870:	f104 0414 	add.w	r4, r4, #20
   dc874:	f1c4 0520 	rsb	r5, r4, #32
   dc878:	fa00 f305 	lsl.w	r3, r0, r5
   dc87c:	fa20 f004 	lsr.w	r0, r0, r4
   dc880:	fa01 f205 	lsl.w	r2, r1, r5
   dc884:	ea40 0002 	orr.w	r0, r0, r2
   dc888:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dc88c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc890:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc894:	fa21 f604 	lsr.w	r6, r1, r4
   dc898:	eb42 0106 	adc.w	r1, r2, r6
   dc89c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc8a0:	bf08      	it	eq
   dc8a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc8a6:	bd70      	pop	{r4, r5, r6, pc}
   dc8a8:	f1c4 040c 	rsb	r4, r4, #12
   dc8ac:	f1c4 0520 	rsb	r5, r4, #32
   dc8b0:	fa00 f304 	lsl.w	r3, r0, r4
   dc8b4:	fa20 f005 	lsr.w	r0, r0, r5
   dc8b8:	fa01 f204 	lsl.w	r2, r1, r4
   dc8bc:	ea40 0002 	orr.w	r0, r0, r2
   dc8c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc8c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc8c8:	f141 0100 	adc.w	r1, r1, #0
   dc8cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc8d0:	bf08      	it	eq
   dc8d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc8d6:	bd70      	pop	{r4, r5, r6, pc}
   dc8d8:	f1c4 0520 	rsb	r5, r4, #32
   dc8dc:	fa00 f205 	lsl.w	r2, r0, r5
   dc8e0:	ea4e 0e02 	orr.w	lr, lr, r2
   dc8e4:	fa20 f304 	lsr.w	r3, r0, r4
   dc8e8:	fa01 f205 	lsl.w	r2, r1, r5
   dc8ec:	ea43 0302 	orr.w	r3, r3, r2
   dc8f0:	fa21 f004 	lsr.w	r0, r1, r4
   dc8f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc8f8:	fa21 f204 	lsr.w	r2, r1, r4
   dc8fc:	ea20 0002 	bic.w	r0, r0, r2
   dc900:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dc904:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc908:	bf08      	it	eq
   dc90a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc90e:	bd70      	pop	{r4, r5, r6, pc}
   dc910:	f094 0f00 	teq	r4, #0
   dc914:	d10f      	bne.n	dc936 <__aeabi_dmul+0x1c2>
   dc916:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dc91a:	0040      	lsls	r0, r0, #1
   dc91c:	eb41 0101 	adc.w	r1, r1, r1
   dc920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc924:	bf08      	it	eq
   dc926:	3c01      	subeq	r4, #1
   dc928:	d0f7      	beq.n	dc91a <__aeabi_dmul+0x1a6>
   dc92a:	ea41 0106 	orr.w	r1, r1, r6
   dc92e:	f095 0f00 	teq	r5, #0
   dc932:	bf18      	it	ne
   dc934:	4770      	bxne	lr
   dc936:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dc93a:	0052      	lsls	r2, r2, #1
   dc93c:	eb43 0303 	adc.w	r3, r3, r3
   dc940:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dc944:	bf08      	it	eq
   dc946:	3d01      	subeq	r5, #1
   dc948:	d0f7      	beq.n	dc93a <__aeabi_dmul+0x1c6>
   dc94a:	ea43 0306 	orr.w	r3, r3, r6
   dc94e:	4770      	bx	lr
   dc950:	ea94 0f0c 	teq	r4, ip
   dc954:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc958:	bf18      	it	ne
   dc95a:	ea95 0f0c 	teqne	r5, ip
   dc95e:	d00c      	beq.n	dc97a <__aeabi_dmul+0x206>
   dc960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc964:	bf18      	it	ne
   dc966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc96a:	d1d1      	bne.n	dc910 <__aeabi_dmul+0x19c>
   dc96c:	ea81 0103 	eor.w	r1, r1, r3
   dc970:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc974:	f04f 0000 	mov.w	r0, #0
   dc978:	bd70      	pop	{r4, r5, r6, pc}
   dc97a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc97e:	bf06      	itte	eq
   dc980:	4610      	moveq	r0, r2
   dc982:	4619      	moveq	r1, r3
   dc984:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc988:	d019      	beq.n	dc9be <__aeabi_dmul+0x24a>
   dc98a:	ea94 0f0c 	teq	r4, ip
   dc98e:	d102      	bne.n	dc996 <__aeabi_dmul+0x222>
   dc990:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dc994:	d113      	bne.n	dc9be <__aeabi_dmul+0x24a>
   dc996:	ea95 0f0c 	teq	r5, ip
   dc99a:	d105      	bne.n	dc9a8 <__aeabi_dmul+0x234>
   dc99c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dc9a0:	bf1c      	itt	ne
   dc9a2:	4610      	movne	r0, r2
   dc9a4:	4619      	movne	r1, r3
   dc9a6:	d10a      	bne.n	dc9be <__aeabi_dmul+0x24a>
   dc9a8:	ea81 0103 	eor.w	r1, r1, r3
   dc9ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc9b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc9b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc9b8:	f04f 0000 	mov.w	r0, #0
   dc9bc:	bd70      	pop	{r4, r5, r6, pc}
   dc9be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc9c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dc9c6:	bd70      	pop	{r4, r5, r6, pc}

000dc9c8 <__aeabi_ddiv>:
   dc9c8:	b570      	push	{r4, r5, r6, lr}
   dc9ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc9ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc9d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc9d6:	bf1d      	ittte	ne
   dc9d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc9dc:	ea94 0f0c 	teqne	r4, ip
   dc9e0:	ea95 0f0c 	teqne	r5, ip
   dc9e4:	f000 f8a7 	bleq	dcb36 <__aeabi_ddiv+0x16e>
   dc9e8:	eba4 0405 	sub.w	r4, r4, r5
   dc9ec:	ea81 0e03 	eor.w	lr, r1, r3
   dc9f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc9f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc9f8:	f000 8088 	beq.w	dcb0c <__aeabi_ddiv+0x144>
   dc9fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dca00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dca04:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dca08:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dca0c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dca10:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dca14:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dca18:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dca1c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dca20:	429d      	cmp	r5, r3
   dca22:	bf08      	it	eq
   dca24:	4296      	cmpeq	r6, r2
   dca26:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dca2a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dca2e:	d202      	bcs.n	dca36 <__aeabi_ddiv+0x6e>
   dca30:	085b      	lsrs	r3, r3, #1
   dca32:	ea4f 0232 	mov.w	r2, r2, rrx
   dca36:	1ab6      	subs	r6, r6, r2
   dca38:	eb65 0503 	sbc.w	r5, r5, r3
   dca3c:	085b      	lsrs	r3, r3, #1
   dca3e:	ea4f 0232 	mov.w	r2, r2, rrx
   dca42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dca46:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dca4a:	ebb6 0e02 	subs.w	lr, r6, r2
   dca4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dca52:	bf22      	ittt	cs
   dca54:	1ab6      	subcs	r6, r6, r2
   dca56:	4675      	movcs	r5, lr
   dca58:	ea40 000c 	orrcs.w	r0, r0, ip
   dca5c:	085b      	lsrs	r3, r3, #1
   dca5e:	ea4f 0232 	mov.w	r2, r2, rrx
   dca62:	ebb6 0e02 	subs.w	lr, r6, r2
   dca66:	eb75 0e03 	sbcs.w	lr, r5, r3
   dca6a:	bf22      	ittt	cs
   dca6c:	1ab6      	subcs	r6, r6, r2
   dca6e:	4675      	movcs	r5, lr
   dca70:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dca74:	085b      	lsrs	r3, r3, #1
   dca76:	ea4f 0232 	mov.w	r2, r2, rrx
   dca7a:	ebb6 0e02 	subs.w	lr, r6, r2
   dca7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dca82:	bf22      	ittt	cs
   dca84:	1ab6      	subcs	r6, r6, r2
   dca86:	4675      	movcs	r5, lr
   dca88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dca8c:	085b      	lsrs	r3, r3, #1
   dca8e:	ea4f 0232 	mov.w	r2, r2, rrx
   dca92:	ebb6 0e02 	subs.w	lr, r6, r2
   dca96:	eb75 0e03 	sbcs.w	lr, r5, r3
   dca9a:	bf22      	ittt	cs
   dca9c:	1ab6      	subcs	r6, r6, r2
   dca9e:	4675      	movcs	r5, lr
   dcaa0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dcaa4:	ea55 0e06 	orrs.w	lr, r5, r6
   dcaa8:	d018      	beq.n	dcadc <__aeabi_ddiv+0x114>
   dcaaa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dcaae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dcab2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dcab6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dcaba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dcabe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dcac2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dcac6:	d1c0      	bne.n	dca4a <__aeabi_ddiv+0x82>
   dcac8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dcacc:	d10b      	bne.n	dcae6 <__aeabi_ddiv+0x11e>
   dcace:	ea41 0100 	orr.w	r1, r1, r0
   dcad2:	f04f 0000 	mov.w	r0, #0
   dcad6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dcada:	e7b6      	b.n	dca4a <__aeabi_ddiv+0x82>
   dcadc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dcae0:	bf04      	itt	eq
   dcae2:	4301      	orreq	r1, r0
   dcae4:	2000      	moveq	r0, #0
   dcae6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dcaea:	bf88      	it	hi
   dcaec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dcaf0:	f63f aeaf 	bhi.w	dc852 <__aeabi_dmul+0xde>
   dcaf4:	ebb5 0c03 	subs.w	ip, r5, r3
   dcaf8:	bf04      	itt	eq
   dcafa:	ebb6 0c02 	subseq.w	ip, r6, r2
   dcafe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dcb02:	f150 0000 	adcs.w	r0, r0, #0
   dcb06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dcb0a:	bd70      	pop	{r4, r5, r6, pc}
   dcb0c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dcb10:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dcb14:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dcb18:	bfc2      	ittt	gt
   dcb1a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dcb1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dcb22:	bd70      	popgt	{r4, r5, r6, pc}
   dcb24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dcb28:	f04f 0e00 	mov.w	lr, #0
   dcb2c:	3c01      	subs	r4, #1
   dcb2e:	e690      	b.n	dc852 <__aeabi_dmul+0xde>
   dcb30:	ea45 0e06 	orr.w	lr, r5, r6
   dcb34:	e68d      	b.n	dc852 <__aeabi_dmul+0xde>
   dcb36:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dcb3a:	ea94 0f0c 	teq	r4, ip
   dcb3e:	bf08      	it	eq
   dcb40:	ea95 0f0c 	teqeq	r5, ip
   dcb44:	f43f af3b 	beq.w	dc9be <__aeabi_dmul+0x24a>
   dcb48:	ea94 0f0c 	teq	r4, ip
   dcb4c:	d10a      	bne.n	dcb64 <__aeabi_ddiv+0x19c>
   dcb4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dcb52:	f47f af34 	bne.w	dc9be <__aeabi_dmul+0x24a>
   dcb56:	ea95 0f0c 	teq	r5, ip
   dcb5a:	f47f af25 	bne.w	dc9a8 <__aeabi_dmul+0x234>
   dcb5e:	4610      	mov	r0, r2
   dcb60:	4619      	mov	r1, r3
   dcb62:	e72c      	b.n	dc9be <__aeabi_dmul+0x24a>
   dcb64:	ea95 0f0c 	teq	r5, ip
   dcb68:	d106      	bne.n	dcb78 <__aeabi_ddiv+0x1b0>
   dcb6a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dcb6e:	f43f aefd 	beq.w	dc96c <__aeabi_dmul+0x1f8>
   dcb72:	4610      	mov	r0, r2
   dcb74:	4619      	mov	r1, r3
   dcb76:	e722      	b.n	dc9be <__aeabi_dmul+0x24a>
   dcb78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dcb7c:	bf18      	it	ne
   dcb7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dcb82:	f47f aec5 	bne.w	dc910 <__aeabi_dmul+0x19c>
   dcb86:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dcb8a:	f47f af0d 	bne.w	dc9a8 <__aeabi_dmul+0x234>
   dcb8e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dcb92:	f47f aeeb 	bne.w	dc96c <__aeabi_dmul+0x1f8>
   dcb96:	e712      	b.n	dc9be <__aeabi_dmul+0x24a>

000dcb98 <__gedf2>:
   dcb98:	f04f 3cff 	mov.w	ip, #4294967295
   dcb9c:	e006      	b.n	dcbac <__cmpdf2+0x4>
   dcb9e:	bf00      	nop

000dcba0 <__ledf2>:
   dcba0:	f04f 0c01 	mov.w	ip, #1
   dcba4:	e002      	b.n	dcbac <__cmpdf2+0x4>
   dcba6:	bf00      	nop

000dcba8 <__cmpdf2>:
   dcba8:	f04f 0c01 	mov.w	ip, #1
   dcbac:	f84d cd04 	str.w	ip, [sp, #-4]!
   dcbb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dcbb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcbb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dcbbc:	bf18      	it	ne
   dcbbe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dcbc2:	d01b      	beq.n	dcbfc <__cmpdf2+0x54>
   dcbc4:	b001      	add	sp, #4
   dcbc6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dcbca:	bf0c      	ite	eq
   dcbcc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dcbd0:	ea91 0f03 	teqne	r1, r3
   dcbd4:	bf02      	ittt	eq
   dcbd6:	ea90 0f02 	teqeq	r0, r2
   dcbda:	2000      	moveq	r0, #0
   dcbdc:	4770      	bxeq	lr
   dcbde:	f110 0f00 	cmn.w	r0, #0
   dcbe2:	ea91 0f03 	teq	r1, r3
   dcbe6:	bf58      	it	pl
   dcbe8:	4299      	cmppl	r1, r3
   dcbea:	bf08      	it	eq
   dcbec:	4290      	cmpeq	r0, r2
   dcbee:	bf2c      	ite	cs
   dcbf0:	17d8      	asrcs	r0, r3, #31
   dcbf2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dcbf6:	f040 0001 	orr.w	r0, r0, #1
   dcbfa:	4770      	bx	lr
   dcbfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dcc00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcc04:	d102      	bne.n	dcc0c <__cmpdf2+0x64>
   dcc06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dcc0a:	d107      	bne.n	dcc1c <__cmpdf2+0x74>
   dcc0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dcc10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcc14:	d1d6      	bne.n	dcbc4 <__cmpdf2+0x1c>
   dcc16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dcc1a:	d0d3      	beq.n	dcbc4 <__cmpdf2+0x1c>
   dcc1c:	f85d 0b04 	ldr.w	r0, [sp], #4
   dcc20:	4770      	bx	lr
   dcc22:	bf00      	nop

000dcc24 <__aeabi_cdrcmple>:
   dcc24:	4684      	mov	ip, r0
   dcc26:	4610      	mov	r0, r2
   dcc28:	4662      	mov	r2, ip
   dcc2a:	468c      	mov	ip, r1
   dcc2c:	4619      	mov	r1, r3
   dcc2e:	4663      	mov	r3, ip
   dcc30:	e000      	b.n	dcc34 <__aeabi_cdcmpeq>
   dcc32:	bf00      	nop

000dcc34 <__aeabi_cdcmpeq>:
   dcc34:	b501      	push	{r0, lr}
   dcc36:	f7ff ffb7 	bl	dcba8 <__cmpdf2>
   dcc3a:	2800      	cmp	r0, #0
   dcc3c:	bf48      	it	mi
   dcc3e:	f110 0f00 	cmnmi.w	r0, #0
   dcc42:	bd01      	pop	{r0, pc}

000dcc44 <__aeabi_dcmpeq>:
   dcc44:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcc48:	f7ff fff4 	bl	dcc34 <__aeabi_cdcmpeq>
   dcc4c:	bf0c      	ite	eq
   dcc4e:	2001      	moveq	r0, #1
   dcc50:	2000      	movne	r0, #0
   dcc52:	f85d fb08 	ldr.w	pc, [sp], #8
   dcc56:	bf00      	nop

000dcc58 <__aeabi_dcmplt>:
   dcc58:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcc5c:	f7ff ffea 	bl	dcc34 <__aeabi_cdcmpeq>
   dcc60:	bf34      	ite	cc
   dcc62:	2001      	movcc	r0, #1
   dcc64:	2000      	movcs	r0, #0
   dcc66:	f85d fb08 	ldr.w	pc, [sp], #8
   dcc6a:	bf00      	nop

000dcc6c <__aeabi_dcmple>:
   dcc6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcc70:	f7ff ffe0 	bl	dcc34 <__aeabi_cdcmpeq>
   dcc74:	bf94      	ite	ls
   dcc76:	2001      	movls	r0, #1
   dcc78:	2000      	movhi	r0, #0
   dcc7a:	f85d fb08 	ldr.w	pc, [sp], #8
   dcc7e:	bf00      	nop

000dcc80 <__aeabi_dcmpge>:
   dcc80:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcc84:	f7ff ffce 	bl	dcc24 <__aeabi_cdrcmple>
   dcc88:	bf94      	ite	ls
   dcc8a:	2001      	movls	r0, #1
   dcc8c:	2000      	movhi	r0, #0
   dcc8e:	f85d fb08 	ldr.w	pc, [sp], #8
   dcc92:	bf00      	nop

000dcc94 <__aeabi_dcmpgt>:
   dcc94:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcc98:	f7ff ffc4 	bl	dcc24 <__aeabi_cdrcmple>
   dcc9c:	bf34      	ite	cc
   dcc9e:	2001      	movcc	r0, #1
   dcca0:	2000      	movcs	r0, #0
   dcca2:	f85d fb08 	ldr.w	pc, [sp], #8
   dcca6:	bf00      	nop

000dcca8 <__aeabi_dcmpun>:
   dcca8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dccac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dccb0:	d102      	bne.n	dccb8 <__aeabi_dcmpun+0x10>
   dccb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dccb6:	d10a      	bne.n	dccce <__aeabi_dcmpun+0x26>
   dccb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dccbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dccc0:	d102      	bne.n	dccc8 <__aeabi_dcmpun+0x20>
   dccc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dccc6:	d102      	bne.n	dccce <__aeabi_dcmpun+0x26>
   dccc8:	f04f 0000 	mov.w	r0, #0
   dcccc:	4770      	bx	lr
   dccce:	f04f 0001 	mov.w	r0, #1
   dccd2:	4770      	bx	lr

000dccd4 <__aeabi_d2iz>:
   dccd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dccd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dccdc:	d215      	bcs.n	dcd0a <__aeabi_d2iz+0x36>
   dccde:	d511      	bpl.n	dcd04 <__aeabi_d2iz+0x30>
   dcce0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dcce4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dcce8:	d912      	bls.n	dcd10 <__aeabi_d2iz+0x3c>
   dccea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dccee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dccf2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dccf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dccfa:	fa23 f002 	lsr.w	r0, r3, r2
   dccfe:	bf18      	it	ne
   dcd00:	4240      	negne	r0, r0
   dcd02:	4770      	bx	lr
   dcd04:	f04f 0000 	mov.w	r0, #0
   dcd08:	4770      	bx	lr
   dcd0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dcd0e:	d105      	bne.n	dcd1c <__aeabi_d2iz+0x48>
   dcd10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dcd14:	bf08      	it	eq
   dcd16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dcd1a:	4770      	bx	lr
   dcd1c:	f04f 0000 	mov.w	r0, #0
   dcd20:	4770      	bx	lr
   dcd22:	bf00      	nop

000dcd24 <__aeabi_d2uiz>:
   dcd24:	004a      	lsls	r2, r1, #1
   dcd26:	d211      	bcs.n	dcd4c <__aeabi_d2uiz+0x28>
   dcd28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dcd2c:	d211      	bcs.n	dcd52 <__aeabi_d2uiz+0x2e>
   dcd2e:	d50d      	bpl.n	dcd4c <__aeabi_d2uiz+0x28>
   dcd30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dcd34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dcd38:	d40e      	bmi.n	dcd58 <__aeabi_d2uiz+0x34>
   dcd3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dcd3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dcd42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dcd46:	fa23 f002 	lsr.w	r0, r3, r2
   dcd4a:	4770      	bx	lr
   dcd4c:	f04f 0000 	mov.w	r0, #0
   dcd50:	4770      	bx	lr
   dcd52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dcd56:	d102      	bne.n	dcd5e <__aeabi_d2uiz+0x3a>
   dcd58:	f04f 30ff 	mov.w	r0, #4294967295
   dcd5c:	4770      	bx	lr
   dcd5e:	f04f 0000 	mov.w	r0, #0
   dcd62:	4770      	bx	lr

000dcd64 <__aeabi_d2f>:
   dcd64:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dcd68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dcd6c:	bf24      	itt	cs
   dcd6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dcd72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dcd76:	d90d      	bls.n	dcd94 <__aeabi_d2f+0x30>
   dcd78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dcd7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dcd80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dcd84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dcd88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dcd8c:	bf08      	it	eq
   dcd8e:	f020 0001 	biceq.w	r0, r0, #1
   dcd92:	4770      	bx	lr
   dcd94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dcd98:	d121      	bne.n	dcdde <__aeabi_d2f+0x7a>
   dcd9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dcd9e:	bfbc      	itt	lt
   dcda0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dcda4:	4770      	bxlt	lr
   dcda6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dcdaa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dcdae:	f1c2 0218 	rsb	r2, r2, #24
   dcdb2:	f1c2 0c20 	rsb	ip, r2, #32
   dcdb6:	fa10 f30c 	lsls.w	r3, r0, ip
   dcdba:	fa20 f002 	lsr.w	r0, r0, r2
   dcdbe:	bf18      	it	ne
   dcdc0:	f040 0001 	orrne.w	r0, r0, #1
   dcdc4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dcdc8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dcdcc:	fa03 fc0c 	lsl.w	ip, r3, ip
   dcdd0:	ea40 000c 	orr.w	r0, r0, ip
   dcdd4:	fa23 f302 	lsr.w	r3, r3, r2
   dcdd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dcddc:	e7cc      	b.n	dcd78 <__aeabi_d2f+0x14>
   dcdde:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dcde2:	d107      	bne.n	dcdf4 <__aeabi_d2f+0x90>
   dcde4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dcde8:	bf1e      	ittt	ne
   dcdea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dcdee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dcdf2:	4770      	bxne	lr
   dcdf4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dcdf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dcdfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dce00:	4770      	bx	lr
   dce02:	bf00      	nop

000dce04 <__aeabi_frsub>:
   dce04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   dce08:	e002      	b.n	dce10 <__addsf3>
   dce0a:	bf00      	nop

000dce0c <__aeabi_fsub>:
   dce0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000dce10 <__addsf3>:
   dce10:	0042      	lsls	r2, r0, #1
   dce12:	bf1f      	itttt	ne
   dce14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   dce18:	ea92 0f03 	teqne	r2, r3
   dce1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   dce20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dce24:	d06a      	beq.n	dcefc <__addsf3+0xec>
   dce26:	ea4f 6212 	mov.w	r2, r2, lsr #24
   dce2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   dce2e:	bfc1      	itttt	gt
   dce30:	18d2      	addgt	r2, r2, r3
   dce32:	4041      	eorgt	r1, r0
   dce34:	4048      	eorgt	r0, r1
   dce36:	4041      	eorgt	r1, r0
   dce38:	bfb8      	it	lt
   dce3a:	425b      	neglt	r3, r3
   dce3c:	2b19      	cmp	r3, #25
   dce3e:	bf88      	it	hi
   dce40:	4770      	bxhi	lr
   dce42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   dce46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dce4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   dce4e:	bf18      	it	ne
   dce50:	4240      	negne	r0, r0
   dce52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dce56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   dce5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   dce5e:	bf18      	it	ne
   dce60:	4249      	negne	r1, r1
   dce62:	ea92 0f03 	teq	r2, r3
   dce66:	d03f      	beq.n	dcee8 <__addsf3+0xd8>
   dce68:	f1a2 0201 	sub.w	r2, r2, #1
   dce6c:	fa41 fc03 	asr.w	ip, r1, r3
   dce70:	eb10 000c 	adds.w	r0, r0, ip
   dce74:	f1c3 0320 	rsb	r3, r3, #32
   dce78:	fa01 f103 	lsl.w	r1, r1, r3
   dce7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   dce80:	d502      	bpl.n	dce88 <__addsf3+0x78>
   dce82:	4249      	negs	r1, r1
   dce84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   dce88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   dce8c:	d313      	bcc.n	dceb6 <__addsf3+0xa6>
   dce8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   dce92:	d306      	bcc.n	dcea2 <__addsf3+0x92>
   dce94:	0840      	lsrs	r0, r0, #1
   dce96:	ea4f 0131 	mov.w	r1, r1, rrx
   dce9a:	f102 0201 	add.w	r2, r2, #1
   dce9e:	2afe      	cmp	r2, #254	; 0xfe
   dcea0:	d251      	bcs.n	dcf46 <__addsf3+0x136>
   dcea2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   dcea6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   dceaa:	bf08      	it	eq
   dceac:	f020 0001 	biceq.w	r0, r0, #1
   dceb0:	ea40 0003 	orr.w	r0, r0, r3
   dceb4:	4770      	bx	lr
   dceb6:	0049      	lsls	r1, r1, #1
   dceb8:	eb40 0000 	adc.w	r0, r0, r0
   dcebc:	3a01      	subs	r2, #1
   dcebe:	bf28      	it	cs
   dcec0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   dcec4:	d2ed      	bcs.n	dcea2 <__addsf3+0x92>
   dcec6:	fab0 fc80 	clz	ip, r0
   dceca:	f1ac 0c08 	sub.w	ip, ip, #8
   dcece:	ebb2 020c 	subs.w	r2, r2, ip
   dced2:	fa00 f00c 	lsl.w	r0, r0, ip
   dced6:	bfaa      	itet	ge
   dced8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   dcedc:	4252      	neglt	r2, r2
   dcede:	4318      	orrge	r0, r3
   dcee0:	bfbc      	itt	lt
   dcee2:	40d0      	lsrlt	r0, r2
   dcee4:	4318      	orrlt	r0, r3
   dcee6:	4770      	bx	lr
   dcee8:	f092 0f00 	teq	r2, #0
   dceec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   dcef0:	bf06      	itte	eq
   dcef2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   dcef6:	3201      	addeq	r2, #1
   dcef8:	3b01      	subne	r3, #1
   dcefa:	e7b5      	b.n	dce68 <__addsf3+0x58>
   dcefc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   dcf00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   dcf04:	bf18      	it	ne
   dcf06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dcf0a:	d021      	beq.n	dcf50 <__addsf3+0x140>
   dcf0c:	ea92 0f03 	teq	r2, r3
   dcf10:	d004      	beq.n	dcf1c <__addsf3+0x10c>
   dcf12:	f092 0f00 	teq	r2, #0
   dcf16:	bf08      	it	eq
   dcf18:	4608      	moveq	r0, r1
   dcf1a:	4770      	bx	lr
   dcf1c:	ea90 0f01 	teq	r0, r1
   dcf20:	bf1c      	itt	ne
   dcf22:	2000      	movne	r0, #0
   dcf24:	4770      	bxne	lr
   dcf26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   dcf2a:	d104      	bne.n	dcf36 <__addsf3+0x126>
   dcf2c:	0040      	lsls	r0, r0, #1
   dcf2e:	bf28      	it	cs
   dcf30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   dcf34:	4770      	bx	lr
   dcf36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   dcf3a:	bf3c      	itt	cc
   dcf3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   dcf40:	4770      	bxcc	lr
   dcf42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   dcf46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   dcf4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dcf4e:	4770      	bx	lr
   dcf50:	ea7f 6222 	mvns.w	r2, r2, asr #24
   dcf54:	bf16      	itet	ne
   dcf56:	4608      	movne	r0, r1
   dcf58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   dcf5c:	4601      	movne	r1, r0
   dcf5e:	0242      	lsls	r2, r0, #9
   dcf60:	bf06      	itte	eq
   dcf62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   dcf66:	ea90 0f01 	teqeq	r0, r1
   dcf6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   dcf6e:	4770      	bx	lr

000dcf70 <__aeabi_ui2f>:
   dcf70:	f04f 0300 	mov.w	r3, #0
   dcf74:	e004      	b.n	dcf80 <__aeabi_i2f+0x8>
   dcf76:	bf00      	nop

000dcf78 <__aeabi_i2f>:
   dcf78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   dcf7c:	bf48      	it	mi
   dcf7e:	4240      	negmi	r0, r0
   dcf80:	ea5f 0c00 	movs.w	ip, r0
   dcf84:	bf08      	it	eq
   dcf86:	4770      	bxeq	lr
   dcf88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   dcf8c:	4601      	mov	r1, r0
   dcf8e:	f04f 0000 	mov.w	r0, #0
   dcf92:	e01c      	b.n	dcfce <__aeabi_l2f+0x2a>

000dcf94 <__aeabi_ul2f>:
   dcf94:	ea50 0201 	orrs.w	r2, r0, r1
   dcf98:	bf08      	it	eq
   dcf9a:	4770      	bxeq	lr
   dcf9c:	f04f 0300 	mov.w	r3, #0
   dcfa0:	e00a      	b.n	dcfb8 <__aeabi_l2f+0x14>
   dcfa2:	bf00      	nop

000dcfa4 <__aeabi_l2f>:
   dcfa4:	ea50 0201 	orrs.w	r2, r0, r1
   dcfa8:	bf08      	it	eq
   dcfaa:	4770      	bxeq	lr
   dcfac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   dcfb0:	d502      	bpl.n	dcfb8 <__aeabi_l2f+0x14>
   dcfb2:	4240      	negs	r0, r0
   dcfb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dcfb8:	ea5f 0c01 	movs.w	ip, r1
   dcfbc:	bf02      	ittt	eq
   dcfbe:	4684      	moveq	ip, r0
   dcfc0:	4601      	moveq	r1, r0
   dcfc2:	2000      	moveq	r0, #0
   dcfc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   dcfc8:	bf08      	it	eq
   dcfca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   dcfce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   dcfd2:	fabc f28c 	clz	r2, ip
   dcfd6:	3a08      	subs	r2, #8
   dcfd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   dcfdc:	db10      	blt.n	dd000 <__aeabi_l2f+0x5c>
   dcfde:	fa01 fc02 	lsl.w	ip, r1, r2
   dcfe2:	4463      	add	r3, ip
   dcfe4:	fa00 fc02 	lsl.w	ip, r0, r2
   dcfe8:	f1c2 0220 	rsb	r2, r2, #32
   dcfec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dcff0:	fa20 f202 	lsr.w	r2, r0, r2
   dcff4:	eb43 0002 	adc.w	r0, r3, r2
   dcff8:	bf08      	it	eq
   dcffa:	f020 0001 	biceq.w	r0, r0, #1
   dcffe:	4770      	bx	lr
   dd000:	f102 0220 	add.w	r2, r2, #32
   dd004:	fa01 fc02 	lsl.w	ip, r1, r2
   dd008:	f1c2 0220 	rsb	r2, r2, #32
   dd00c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   dd010:	fa21 f202 	lsr.w	r2, r1, r2
   dd014:	eb43 0002 	adc.w	r0, r3, r2
   dd018:	bf08      	it	eq
   dd01a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   dd01e:	4770      	bx	lr

000dd020 <__aeabi_ldivmod>:
   dd020:	b97b      	cbnz	r3, dd042 <__aeabi_ldivmod+0x22>
   dd022:	b972      	cbnz	r2, dd042 <__aeabi_ldivmod+0x22>
   dd024:	2900      	cmp	r1, #0
   dd026:	bfbe      	ittt	lt
   dd028:	2000      	movlt	r0, #0
   dd02a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   dd02e:	e006      	blt.n	dd03e <__aeabi_ldivmod+0x1e>
   dd030:	bf08      	it	eq
   dd032:	2800      	cmpeq	r0, #0
   dd034:	bf1c      	itt	ne
   dd036:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   dd03a:	f04f 30ff 	movne.w	r0, #4294967295
   dd03e:	f000 b9d7 	b.w	dd3f0 <__aeabi_idiv0>
   dd042:	f1ad 0c08 	sub.w	ip, sp, #8
   dd046:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dd04a:	2900      	cmp	r1, #0
   dd04c:	db09      	blt.n	dd062 <__aeabi_ldivmod+0x42>
   dd04e:	2b00      	cmp	r3, #0
   dd050:	db1a      	blt.n	dd088 <__aeabi_ldivmod+0x68>
   dd052:	f000 f86b 	bl	dd12c <__udivmoddi4>
   dd056:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd05a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd05e:	b004      	add	sp, #16
   dd060:	4770      	bx	lr
   dd062:	4240      	negs	r0, r0
   dd064:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd068:	2b00      	cmp	r3, #0
   dd06a:	db1b      	blt.n	dd0a4 <__aeabi_ldivmod+0x84>
   dd06c:	f000 f85e 	bl	dd12c <__udivmoddi4>
   dd070:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd078:	b004      	add	sp, #16
   dd07a:	4240      	negs	r0, r0
   dd07c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd080:	4252      	negs	r2, r2
   dd082:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd086:	4770      	bx	lr
   dd088:	4252      	negs	r2, r2
   dd08a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd08e:	f000 f84d 	bl	dd12c <__udivmoddi4>
   dd092:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd09a:	b004      	add	sp, #16
   dd09c:	4240      	negs	r0, r0
   dd09e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd0a2:	4770      	bx	lr
   dd0a4:	4252      	negs	r2, r2
   dd0a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd0aa:	f000 f83f 	bl	dd12c <__udivmoddi4>
   dd0ae:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd0b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd0b6:	b004      	add	sp, #16
   dd0b8:	4252      	negs	r2, r2
   dd0ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd0be:	4770      	bx	lr

000dd0c0 <__aeabi_uldivmod>:
   dd0c0:	b953      	cbnz	r3, dd0d8 <__aeabi_uldivmod+0x18>
   dd0c2:	b94a      	cbnz	r2, dd0d8 <__aeabi_uldivmod+0x18>
   dd0c4:	2900      	cmp	r1, #0
   dd0c6:	bf08      	it	eq
   dd0c8:	2800      	cmpeq	r0, #0
   dd0ca:	bf1c      	itt	ne
   dd0cc:	f04f 31ff 	movne.w	r1, #4294967295
   dd0d0:	f04f 30ff 	movne.w	r0, #4294967295
   dd0d4:	f000 b98c 	b.w	dd3f0 <__aeabi_idiv0>
   dd0d8:	f1ad 0c08 	sub.w	ip, sp, #8
   dd0dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dd0e0:	f000 f824 	bl	dd12c <__udivmoddi4>
   dd0e4:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd0e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd0ec:	b004      	add	sp, #16
   dd0ee:	4770      	bx	lr

000dd0f0 <__aeabi_d2ulz>:
   dd0f0:	b5d0      	push	{r4, r6, r7, lr}
   dd0f2:	4b0c      	ldr	r3, [pc, #48]	; (dd124 <__aeabi_d2ulz+0x34>)
   dd0f4:	2200      	movs	r2, #0
   dd0f6:	4606      	mov	r6, r0
   dd0f8:	460f      	mov	r7, r1
   dd0fa:	f7ff fb3b 	bl	dc774 <__aeabi_dmul>
   dd0fe:	f7ff fe11 	bl	dcd24 <__aeabi_d2uiz>
   dd102:	4604      	mov	r4, r0
   dd104:	f7ff fabc 	bl	dc680 <__aeabi_ui2d>
   dd108:	4b07      	ldr	r3, [pc, #28]	; (dd128 <__aeabi_d2ulz+0x38>)
   dd10a:	2200      	movs	r2, #0
   dd10c:	f7ff fb32 	bl	dc774 <__aeabi_dmul>
   dd110:	4602      	mov	r2, r0
   dd112:	460b      	mov	r3, r1
   dd114:	4630      	mov	r0, r6
   dd116:	4639      	mov	r1, r7
   dd118:	f7ff f974 	bl	dc404 <__aeabi_dsub>
   dd11c:	f7ff fe02 	bl	dcd24 <__aeabi_d2uiz>
   dd120:	4621      	mov	r1, r4
   dd122:	bdd0      	pop	{r4, r6, r7, pc}
   dd124:	3df00000 	.word	0x3df00000
   dd128:	41f00000 	.word	0x41f00000

000dd12c <__udivmoddi4>:
   dd12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd130:	9d08      	ldr	r5, [sp, #32]
   dd132:	4604      	mov	r4, r0
   dd134:	468c      	mov	ip, r1
   dd136:	2b00      	cmp	r3, #0
   dd138:	f040 8083 	bne.w	dd242 <__udivmoddi4+0x116>
   dd13c:	428a      	cmp	r2, r1
   dd13e:	4617      	mov	r7, r2
   dd140:	d947      	bls.n	dd1d2 <__udivmoddi4+0xa6>
   dd142:	fab2 f282 	clz	r2, r2
   dd146:	b142      	cbz	r2, dd15a <__udivmoddi4+0x2e>
   dd148:	f1c2 0020 	rsb	r0, r2, #32
   dd14c:	fa24 f000 	lsr.w	r0, r4, r0
   dd150:	4091      	lsls	r1, r2
   dd152:	4097      	lsls	r7, r2
   dd154:	ea40 0c01 	orr.w	ip, r0, r1
   dd158:	4094      	lsls	r4, r2
   dd15a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   dd15e:	0c23      	lsrs	r3, r4, #16
   dd160:	fbbc f6f8 	udiv	r6, ip, r8
   dd164:	fa1f fe87 	uxth.w	lr, r7
   dd168:	fb08 c116 	mls	r1, r8, r6, ip
   dd16c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dd170:	fb06 f10e 	mul.w	r1, r6, lr
   dd174:	4299      	cmp	r1, r3
   dd176:	d909      	bls.n	dd18c <__udivmoddi4+0x60>
   dd178:	18fb      	adds	r3, r7, r3
   dd17a:	f106 30ff 	add.w	r0, r6, #4294967295
   dd17e:	f080 8119 	bcs.w	dd3b4 <__udivmoddi4+0x288>
   dd182:	4299      	cmp	r1, r3
   dd184:	f240 8116 	bls.w	dd3b4 <__udivmoddi4+0x288>
   dd188:	3e02      	subs	r6, #2
   dd18a:	443b      	add	r3, r7
   dd18c:	1a5b      	subs	r3, r3, r1
   dd18e:	b2a4      	uxth	r4, r4
   dd190:	fbb3 f0f8 	udiv	r0, r3, r8
   dd194:	fb08 3310 	mls	r3, r8, r0, r3
   dd198:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   dd19c:	fb00 fe0e 	mul.w	lr, r0, lr
   dd1a0:	45a6      	cmp	lr, r4
   dd1a2:	d909      	bls.n	dd1b8 <__udivmoddi4+0x8c>
   dd1a4:	193c      	adds	r4, r7, r4
   dd1a6:	f100 33ff 	add.w	r3, r0, #4294967295
   dd1aa:	f080 8105 	bcs.w	dd3b8 <__udivmoddi4+0x28c>
   dd1ae:	45a6      	cmp	lr, r4
   dd1b0:	f240 8102 	bls.w	dd3b8 <__udivmoddi4+0x28c>
   dd1b4:	3802      	subs	r0, #2
   dd1b6:	443c      	add	r4, r7
   dd1b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   dd1bc:	eba4 040e 	sub.w	r4, r4, lr
   dd1c0:	2600      	movs	r6, #0
   dd1c2:	b11d      	cbz	r5, dd1cc <__udivmoddi4+0xa0>
   dd1c4:	40d4      	lsrs	r4, r2
   dd1c6:	2300      	movs	r3, #0
   dd1c8:	e9c5 4300 	strd	r4, r3, [r5]
   dd1cc:	4631      	mov	r1, r6
   dd1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd1d2:	b902      	cbnz	r2, dd1d6 <__udivmoddi4+0xaa>
   dd1d4:	deff      	udf	#255	; 0xff
   dd1d6:	fab2 f282 	clz	r2, r2
   dd1da:	2a00      	cmp	r2, #0
   dd1dc:	d150      	bne.n	dd280 <__udivmoddi4+0x154>
   dd1de:	1bcb      	subs	r3, r1, r7
   dd1e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dd1e4:	fa1f f887 	uxth.w	r8, r7
   dd1e8:	2601      	movs	r6, #1
   dd1ea:	fbb3 fcfe 	udiv	ip, r3, lr
   dd1ee:	0c21      	lsrs	r1, r4, #16
   dd1f0:	fb0e 331c 	mls	r3, lr, ip, r3
   dd1f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dd1f8:	fb08 f30c 	mul.w	r3, r8, ip
   dd1fc:	428b      	cmp	r3, r1
   dd1fe:	d907      	bls.n	dd210 <__udivmoddi4+0xe4>
   dd200:	1879      	adds	r1, r7, r1
   dd202:	f10c 30ff 	add.w	r0, ip, #4294967295
   dd206:	d202      	bcs.n	dd20e <__udivmoddi4+0xe2>
   dd208:	428b      	cmp	r3, r1
   dd20a:	f200 80e9 	bhi.w	dd3e0 <__udivmoddi4+0x2b4>
   dd20e:	4684      	mov	ip, r0
   dd210:	1ac9      	subs	r1, r1, r3
   dd212:	b2a3      	uxth	r3, r4
   dd214:	fbb1 f0fe 	udiv	r0, r1, lr
   dd218:	fb0e 1110 	mls	r1, lr, r0, r1
   dd21c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dd220:	fb08 f800 	mul.w	r8, r8, r0
   dd224:	45a0      	cmp	r8, r4
   dd226:	d907      	bls.n	dd238 <__udivmoddi4+0x10c>
   dd228:	193c      	adds	r4, r7, r4
   dd22a:	f100 33ff 	add.w	r3, r0, #4294967295
   dd22e:	d202      	bcs.n	dd236 <__udivmoddi4+0x10a>
   dd230:	45a0      	cmp	r8, r4
   dd232:	f200 80d9 	bhi.w	dd3e8 <__udivmoddi4+0x2bc>
   dd236:	4618      	mov	r0, r3
   dd238:	eba4 0408 	sub.w	r4, r4, r8
   dd23c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dd240:	e7bf      	b.n	dd1c2 <__udivmoddi4+0x96>
   dd242:	428b      	cmp	r3, r1
   dd244:	d909      	bls.n	dd25a <__udivmoddi4+0x12e>
   dd246:	2d00      	cmp	r5, #0
   dd248:	f000 80b1 	beq.w	dd3ae <__udivmoddi4+0x282>
   dd24c:	2600      	movs	r6, #0
   dd24e:	e9c5 0100 	strd	r0, r1, [r5]
   dd252:	4630      	mov	r0, r6
   dd254:	4631      	mov	r1, r6
   dd256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd25a:	fab3 f683 	clz	r6, r3
   dd25e:	2e00      	cmp	r6, #0
   dd260:	d14a      	bne.n	dd2f8 <__udivmoddi4+0x1cc>
   dd262:	428b      	cmp	r3, r1
   dd264:	d302      	bcc.n	dd26c <__udivmoddi4+0x140>
   dd266:	4282      	cmp	r2, r0
   dd268:	f200 80b8 	bhi.w	dd3dc <__udivmoddi4+0x2b0>
   dd26c:	1a84      	subs	r4, r0, r2
   dd26e:	eb61 0103 	sbc.w	r1, r1, r3
   dd272:	2001      	movs	r0, #1
   dd274:	468c      	mov	ip, r1
   dd276:	2d00      	cmp	r5, #0
   dd278:	d0a8      	beq.n	dd1cc <__udivmoddi4+0xa0>
   dd27a:	e9c5 4c00 	strd	r4, ip, [r5]
   dd27e:	e7a5      	b.n	dd1cc <__udivmoddi4+0xa0>
   dd280:	f1c2 0320 	rsb	r3, r2, #32
   dd284:	fa20 f603 	lsr.w	r6, r0, r3
   dd288:	4097      	lsls	r7, r2
   dd28a:	fa01 f002 	lsl.w	r0, r1, r2
   dd28e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dd292:	40d9      	lsrs	r1, r3
   dd294:	4330      	orrs	r0, r6
   dd296:	0c03      	lsrs	r3, r0, #16
   dd298:	fbb1 f6fe 	udiv	r6, r1, lr
   dd29c:	fa1f f887 	uxth.w	r8, r7
   dd2a0:	fb0e 1116 	mls	r1, lr, r6, r1
   dd2a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dd2a8:	fb06 f108 	mul.w	r1, r6, r8
   dd2ac:	4299      	cmp	r1, r3
   dd2ae:	fa04 f402 	lsl.w	r4, r4, r2
   dd2b2:	d909      	bls.n	dd2c8 <__udivmoddi4+0x19c>
   dd2b4:	18fb      	adds	r3, r7, r3
   dd2b6:	f106 3cff 	add.w	ip, r6, #4294967295
   dd2ba:	f080 808d 	bcs.w	dd3d8 <__udivmoddi4+0x2ac>
   dd2be:	4299      	cmp	r1, r3
   dd2c0:	f240 808a 	bls.w	dd3d8 <__udivmoddi4+0x2ac>
   dd2c4:	3e02      	subs	r6, #2
   dd2c6:	443b      	add	r3, r7
   dd2c8:	1a5b      	subs	r3, r3, r1
   dd2ca:	b281      	uxth	r1, r0
   dd2cc:	fbb3 f0fe 	udiv	r0, r3, lr
   dd2d0:	fb0e 3310 	mls	r3, lr, r0, r3
   dd2d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dd2d8:	fb00 f308 	mul.w	r3, r0, r8
   dd2dc:	428b      	cmp	r3, r1
   dd2de:	d907      	bls.n	dd2f0 <__udivmoddi4+0x1c4>
   dd2e0:	1879      	adds	r1, r7, r1
   dd2e2:	f100 3cff 	add.w	ip, r0, #4294967295
   dd2e6:	d273      	bcs.n	dd3d0 <__udivmoddi4+0x2a4>
   dd2e8:	428b      	cmp	r3, r1
   dd2ea:	d971      	bls.n	dd3d0 <__udivmoddi4+0x2a4>
   dd2ec:	3802      	subs	r0, #2
   dd2ee:	4439      	add	r1, r7
   dd2f0:	1acb      	subs	r3, r1, r3
   dd2f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dd2f6:	e778      	b.n	dd1ea <__udivmoddi4+0xbe>
   dd2f8:	f1c6 0c20 	rsb	ip, r6, #32
   dd2fc:	fa03 f406 	lsl.w	r4, r3, r6
   dd300:	fa22 f30c 	lsr.w	r3, r2, ip
   dd304:	431c      	orrs	r4, r3
   dd306:	fa20 f70c 	lsr.w	r7, r0, ip
   dd30a:	fa01 f306 	lsl.w	r3, r1, r6
   dd30e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dd312:	fa21 f10c 	lsr.w	r1, r1, ip
   dd316:	431f      	orrs	r7, r3
   dd318:	0c3b      	lsrs	r3, r7, #16
   dd31a:	fbb1 f9fe 	udiv	r9, r1, lr
   dd31e:	fa1f f884 	uxth.w	r8, r4
   dd322:	fb0e 1119 	mls	r1, lr, r9, r1
   dd326:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dd32a:	fb09 fa08 	mul.w	sl, r9, r8
   dd32e:	458a      	cmp	sl, r1
   dd330:	fa02 f206 	lsl.w	r2, r2, r6
   dd334:	fa00 f306 	lsl.w	r3, r0, r6
   dd338:	d908      	bls.n	dd34c <__udivmoddi4+0x220>
   dd33a:	1861      	adds	r1, r4, r1
   dd33c:	f109 30ff 	add.w	r0, r9, #4294967295
   dd340:	d248      	bcs.n	dd3d4 <__udivmoddi4+0x2a8>
   dd342:	458a      	cmp	sl, r1
   dd344:	d946      	bls.n	dd3d4 <__udivmoddi4+0x2a8>
   dd346:	f1a9 0902 	sub.w	r9, r9, #2
   dd34a:	4421      	add	r1, r4
   dd34c:	eba1 010a 	sub.w	r1, r1, sl
   dd350:	b2bf      	uxth	r7, r7
   dd352:	fbb1 f0fe 	udiv	r0, r1, lr
   dd356:	fb0e 1110 	mls	r1, lr, r0, r1
   dd35a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dd35e:	fb00 f808 	mul.w	r8, r0, r8
   dd362:	45b8      	cmp	r8, r7
   dd364:	d907      	bls.n	dd376 <__udivmoddi4+0x24a>
   dd366:	19e7      	adds	r7, r4, r7
   dd368:	f100 31ff 	add.w	r1, r0, #4294967295
   dd36c:	d22e      	bcs.n	dd3cc <__udivmoddi4+0x2a0>
   dd36e:	45b8      	cmp	r8, r7
   dd370:	d92c      	bls.n	dd3cc <__udivmoddi4+0x2a0>
   dd372:	3802      	subs	r0, #2
   dd374:	4427      	add	r7, r4
   dd376:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dd37a:	eba7 0708 	sub.w	r7, r7, r8
   dd37e:	fba0 8902 	umull	r8, r9, r0, r2
   dd382:	454f      	cmp	r7, r9
   dd384:	46c6      	mov	lr, r8
   dd386:	4649      	mov	r1, r9
   dd388:	d31a      	bcc.n	dd3c0 <__udivmoddi4+0x294>
   dd38a:	d017      	beq.n	dd3bc <__udivmoddi4+0x290>
   dd38c:	b15d      	cbz	r5, dd3a6 <__udivmoddi4+0x27a>
   dd38e:	ebb3 020e 	subs.w	r2, r3, lr
   dd392:	eb67 0701 	sbc.w	r7, r7, r1
   dd396:	fa07 fc0c 	lsl.w	ip, r7, ip
   dd39a:	40f2      	lsrs	r2, r6
   dd39c:	ea4c 0202 	orr.w	r2, ip, r2
   dd3a0:	40f7      	lsrs	r7, r6
   dd3a2:	e9c5 2700 	strd	r2, r7, [r5]
   dd3a6:	2600      	movs	r6, #0
   dd3a8:	4631      	mov	r1, r6
   dd3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd3ae:	462e      	mov	r6, r5
   dd3b0:	4628      	mov	r0, r5
   dd3b2:	e70b      	b.n	dd1cc <__udivmoddi4+0xa0>
   dd3b4:	4606      	mov	r6, r0
   dd3b6:	e6e9      	b.n	dd18c <__udivmoddi4+0x60>
   dd3b8:	4618      	mov	r0, r3
   dd3ba:	e6fd      	b.n	dd1b8 <__udivmoddi4+0x8c>
   dd3bc:	4543      	cmp	r3, r8
   dd3be:	d2e5      	bcs.n	dd38c <__udivmoddi4+0x260>
   dd3c0:	ebb8 0e02 	subs.w	lr, r8, r2
   dd3c4:	eb69 0104 	sbc.w	r1, r9, r4
   dd3c8:	3801      	subs	r0, #1
   dd3ca:	e7df      	b.n	dd38c <__udivmoddi4+0x260>
   dd3cc:	4608      	mov	r0, r1
   dd3ce:	e7d2      	b.n	dd376 <__udivmoddi4+0x24a>
   dd3d0:	4660      	mov	r0, ip
   dd3d2:	e78d      	b.n	dd2f0 <__udivmoddi4+0x1c4>
   dd3d4:	4681      	mov	r9, r0
   dd3d6:	e7b9      	b.n	dd34c <__udivmoddi4+0x220>
   dd3d8:	4666      	mov	r6, ip
   dd3da:	e775      	b.n	dd2c8 <__udivmoddi4+0x19c>
   dd3dc:	4630      	mov	r0, r6
   dd3de:	e74a      	b.n	dd276 <__udivmoddi4+0x14a>
   dd3e0:	f1ac 0c02 	sub.w	ip, ip, #2
   dd3e4:	4439      	add	r1, r7
   dd3e6:	e713      	b.n	dd210 <__udivmoddi4+0xe4>
   dd3e8:	3802      	subs	r0, #2
   dd3ea:	443c      	add	r4, r7
   dd3ec:	e724      	b.n	dd238 <__udivmoddi4+0x10c>
   dd3ee:	bf00      	nop

000dd3f0 <__aeabi_idiv0>:
   dd3f0:	4770      	bx	lr
   dd3f2:	bf00      	nop

000dd3f4 <atexit>:
   dd3f4:	2300      	movs	r3, #0
   dd3f6:	4601      	mov	r1, r0
   dd3f8:	461a      	mov	r2, r3
   dd3fa:	4618      	mov	r0, r3
   dd3fc:	f000 b872 	b.w	dd4e4 <__register_exitproc>

000dd400 <memcpy>:
   dd400:	440a      	add	r2, r1
   dd402:	4291      	cmp	r1, r2
   dd404:	f100 33ff 	add.w	r3, r0, #4294967295
   dd408:	d100      	bne.n	dd40c <memcpy+0xc>
   dd40a:	4770      	bx	lr
   dd40c:	b510      	push	{r4, lr}
   dd40e:	f811 4b01 	ldrb.w	r4, [r1], #1
   dd412:	f803 4f01 	strb.w	r4, [r3, #1]!
   dd416:	4291      	cmp	r1, r2
   dd418:	d1f9      	bne.n	dd40e <memcpy+0xe>
   dd41a:	bd10      	pop	{r4, pc}

000dd41c <memset>:
   dd41c:	4402      	add	r2, r0
   dd41e:	4603      	mov	r3, r0
   dd420:	4293      	cmp	r3, r2
   dd422:	d100      	bne.n	dd426 <memset+0xa>
   dd424:	4770      	bx	lr
   dd426:	f803 1b01 	strb.w	r1, [r3], #1
   dd42a:	e7f9      	b.n	dd420 <memset+0x4>

000dd42c <srand>:
   dd42c:	b538      	push	{r3, r4, r5, lr}
   dd42e:	4b0d      	ldr	r3, [pc, #52]	; (dd464 <srand+0x38>)
   dd430:	681d      	ldr	r5, [r3, #0]
   dd432:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dd434:	4604      	mov	r4, r0
   dd436:	b97b      	cbnz	r3, dd458 <srand+0x2c>
   dd438:	2018      	movs	r0, #24
   dd43a:	f7fa ff57 	bl	d82ec <malloc>
   dd43e:	4a0a      	ldr	r2, [pc, #40]	; (dd468 <srand+0x3c>)
   dd440:	4b0a      	ldr	r3, [pc, #40]	; (dd46c <srand+0x40>)
   dd442:	63a8      	str	r0, [r5, #56]	; 0x38
   dd444:	e9c0 2300 	strd	r2, r3, [r0]
   dd448:	4b09      	ldr	r3, [pc, #36]	; (dd470 <srand+0x44>)
   dd44a:	6083      	str	r3, [r0, #8]
   dd44c:	230b      	movs	r3, #11
   dd44e:	8183      	strh	r3, [r0, #12]
   dd450:	2201      	movs	r2, #1
   dd452:	2300      	movs	r3, #0
   dd454:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dd458:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dd45a:	2200      	movs	r2, #0
   dd45c:	611c      	str	r4, [r3, #16]
   dd45e:	615a      	str	r2, [r3, #20]
   dd460:	bd38      	pop	{r3, r4, r5, pc}
   dd462:	bf00      	nop
   dd464:	2003e3dc 	.word	0x2003e3dc
   dd468:	abcd330e 	.word	0xabcd330e
   dd46c:	e66d1234 	.word	0xe66d1234
   dd470:	0005deec 	.word	0x0005deec

000dd474 <strdup>:
   dd474:	4b02      	ldr	r3, [pc, #8]	; (dd480 <strdup+0xc>)
   dd476:	4601      	mov	r1, r0
   dd478:	6818      	ldr	r0, [r3, #0]
   dd47a:	f000 b803 	b.w	dd484 <_strdup_r>
   dd47e:	bf00      	nop
   dd480:	2003e3dc 	.word	0x2003e3dc

000dd484 <_strdup_r>:
   dd484:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dd486:	4604      	mov	r4, r0
   dd488:	4608      	mov	r0, r1
   dd48a:	460d      	mov	r5, r1
   dd48c:	f000 f80f 	bl	dd4ae <strlen>
   dd490:	1c42      	adds	r2, r0, #1
   dd492:	4611      	mov	r1, r2
   dd494:	4620      	mov	r0, r4
   dd496:	9201      	str	r2, [sp, #4]
   dd498:	f7fa ff50 	bl	d833c <_malloc_r>
   dd49c:	4604      	mov	r4, r0
   dd49e:	b118      	cbz	r0, dd4a8 <_strdup_r+0x24>
   dd4a0:	9a01      	ldr	r2, [sp, #4]
   dd4a2:	4629      	mov	r1, r5
   dd4a4:	f7ff ffac 	bl	dd400 <memcpy>
   dd4a8:	4620      	mov	r0, r4
   dd4aa:	b003      	add	sp, #12
   dd4ac:	bd30      	pop	{r4, r5, pc}

000dd4ae <strlen>:
   dd4ae:	4603      	mov	r3, r0
   dd4b0:	f813 2b01 	ldrb.w	r2, [r3], #1
   dd4b4:	2a00      	cmp	r2, #0
   dd4b6:	d1fb      	bne.n	dd4b0 <strlen+0x2>
   dd4b8:	1a18      	subs	r0, r3, r0
   dd4ba:	3801      	subs	r0, #1
   dd4bc:	4770      	bx	lr

000dd4be <strncpy>:
   dd4be:	b510      	push	{r4, lr}
   dd4c0:	3901      	subs	r1, #1
   dd4c2:	4603      	mov	r3, r0
   dd4c4:	b132      	cbz	r2, dd4d4 <strncpy+0x16>
   dd4c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dd4ca:	f803 4b01 	strb.w	r4, [r3], #1
   dd4ce:	3a01      	subs	r2, #1
   dd4d0:	2c00      	cmp	r4, #0
   dd4d2:	d1f7      	bne.n	dd4c4 <strncpy+0x6>
   dd4d4:	441a      	add	r2, r3
   dd4d6:	2100      	movs	r1, #0
   dd4d8:	4293      	cmp	r3, r2
   dd4da:	d100      	bne.n	dd4de <strncpy+0x20>
   dd4dc:	bd10      	pop	{r4, pc}
   dd4de:	f803 1b01 	strb.w	r1, [r3], #1
   dd4e2:	e7f9      	b.n	dd4d8 <strncpy+0x1a>

000dd4e4 <__register_exitproc>:
   dd4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd4e8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dd5a4 <__register_exitproc+0xc0>
   dd4ec:	4606      	mov	r6, r0
   dd4ee:	f8d8 0000 	ldr.w	r0, [r8]
   dd4f2:	461f      	mov	r7, r3
   dd4f4:	460d      	mov	r5, r1
   dd4f6:	4691      	mov	r9, r2
   dd4f8:	f000 f856 	bl	dd5a8 <__retarget_lock_acquire_recursive>
   dd4fc:	4b25      	ldr	r3, [pc, #148]	; (dd594 <__register_exitproc+0xb0>)
   dd4fe:	681c      	ldr	r4, [r3, #0]
   dd500:	b934      	cbnz	r4, dd510 <__register_exitproc+0x2c>
   dd502:	4c25      	ldr	r4, [pc, #148]	; (dd598 <__register_exitproc+0xb4>)
   dd504:	601c      	str	r4, [r3, #0]
   dd506:	4b25      	ldr	r3, [pc, #148]	; (dd59c <__register_exitproc+0xb8>)
   dd508:	b113      	cbz	r3, dd510 <__register_exitproc+0x2c>
   dd50a:	681b      	ldr	r3, [r3, #0]
   dd50c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dd510:	6863      	ldr	r3, [r4, #4]
   dd512:	2b1f      	cmp	r3, #31
   dd514:	dd07      	ble.n	dd526 <__register_exitproc+0x42>
   dd516:	f8d8 0000 	ldr.w	r0, [r8]
   dd51a:	f000 f847 	bl	dd5ac <__retarget_lock_release_recursive>
   dd51e:	f04f 30ff 	mov.w	r0, #4294967295
   dd522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd526:	b34e      	cbz	r6, dd57c <__register_exitproc+0x98>
   dd528:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dd52c:	b988      	cbnz	r0, dd552 <__register_exitproc+0x6e>
   dd52e:	4b1c      	ldr	r3, [pc, #112]	; (dd5a0 <__register_exitproc+0xbc>)
   dd530:	b923      	cbnz	r3, dd53c <__register_exitproc+0x58>
   dd532:	f8d8 0000 	ldr.w	r0, [r8]
   dd536:	f000 f838 	bl	dd5aa <__retarget_lock_release>
   dd53a:	e7f0      	b.n	dd51e <__register_exitproc+0x3a>
   dd53c:	f44f 7084 	mov.w	r0, #264	; 0x108
   dd540:	f7fa fed4 	bl	d82ec <malloc>
   dd544:	2800      	cmp	r0, #0
   dd546:	d0f4      	beq.n	dd532 <__register_exitproc+0x4e>
   dd548:	2300      	movs	r3, #0
   dd54a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dd54e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dd552:	6863      	ldr	r3, [r4, #4]
   dd554:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dd558:	2201      	movs	r2, #1
   dd55a:	409a      	lsls	r2, r3
   dd55c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dd560:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dd564:	4313      	orrs	r3, r2
   dd566:	2e02      	cmp	r6, #2
   dd568:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dd56c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dd570:	bf02      	ittt	eq
   dd572:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dd576:	431a      	orreq	r2, r3
   dd578:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dd57c:	6863      	ldr	r3, [r4, #4]
   dd57e:	f8d8 0000 	ldr.w	r0, [r8]
   dd582:	1c5a      	adds	r2, r3, #1
   dd584:	3302      	adds	r3, #2
   dd586:	6062      	str	r2, [r4, #4]
   dd588:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dd58c:	f000 f80e 	bl	dd5ac <__retarget_lock_release_recursive>
   dd590:	2000      	movs	r0, #0
   dd592:	e7c6      	b.n	dd522 <__register_exitproc+0x3e>
   dd594:	2003e7e4 	.word	0x2003e7e4
   dd598:	2003e758 	.word	0x2003e758
   dd59c:	00000000 	.word	0x00000000
   dd5a0:	000d82ed 	.word	0x000d82ed
   dd5a4:	2003e440 	.word	0x2003e440

000dd5a8 <__retarget_lock_acquire_recursive>:
   dd5a8:	4770      	bx	lr

000dd5aa <__retarget_lock_release>:
   dd5aa:	4770      	bx	lr

000dd5ac <__retarget_lock_release_recursive>:
   dd5ac:	4770      	bx	lr

000dd5ae <link_code_end>:
	...

000dd5b0 <dynalib_user>:
   dd5b0:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dd5c0:	0000 0000 0a0a 6554 706d 7265 7461 7275     ......Temperatur
   dd5d0:	2065 203d 2000 0046 7250 7365 7573 6572     e = . F.Pressure
   dd5e0:	3d20 0020 6d20 486d 0067 7041 7270 786f      = . mmHg.Approx
   dd5f0:	202e 6c41 6974 7574 6564 3d20 0020 6d20     . Altitude = . m
   dd600:	4800 6d75 6469 7469 2079 203d 2000 0025     .Humidity = . %.
   dd610:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dd620:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dd630:	2d2d 2d2d 5300 6e65 6f73 3a72 2020 2020     ----.Sensor:    
   dd640:	2020 0020 7244 7669 7265 5620 7265 203a        .Driver Ver: 
   dd650:	2020 5500 696e 7571 2065 4449 203a 2020       .Unique ID:   
   dd660:	0020 614d 2078 6156 756c 3a65 2020 2020      .Max Value:    
   dd670:	2000 7878 0078 694d 206e 6156 756c 3a65     . xxx.Min Value:
   dd680:	2020 2020 5200 7365 6c6f 7475 6f69 3a6e         .Resolution:
   dd690:	2020 0020 430a 6c61 6269 6172 6974 6e6f        ..Calibration
   dd6a0:	6f20 6666 6573 7374 0a20 4100 6363 6c65      offsets ..Accel
   dd6b0:	7265 6d6f 7465 7265 203a 0a00 7947 6f72     erometer: ..Gyro
   dd6c0:	203a 0a00 614d 3a67 0020 410a 6363 6c65     : ..Mag: ..Accel
   dd6d0:	5220 6461 7569 3a73 0020 4d0a 6761 5220      Radius: ..Mag R
   dd6e0:	6461 7569 3a73 0020 004e 454e 5300 0045     adius: .N.NE.SE.
   dd6f0:	0053 5753 4e00 0057 2021 5300 7379 003a     S.SW.NW.! .Sys:.
   dd700:	4720 003a 4120 003a 4d20 003a 002c 7953      G:. A:. M:.,.Sy
   dd710:	7473 6d65 5320 6174 7574 3a73 3020 0078     stem Status: 0x.
   dd720:	6553 666c 5420 7365 3a74 2020 2020 3020     Self Test:     0
   dd730:	0078 7953 7473 6d65 4520 7272 726f 203a     x.System Error: 
   dd740:	3020 0078 6554 706d 202e 203d 2000 b0c2      0x.Temp. = . ..
   dd750:	0046 7250 7365 2e73 3d20 0020 614d 7272     F.Press. = .Marr
   dd760:	6569 6920 2073 7267 6165 2174 4300 6d6f     ie is great!.Com
   dd770:	6170 7373 6820 6165 6964 676e 0900 0009     pass heading....
   dd780:	6d20 6870 4100 4300 4f00 6972 6e65 6174      mph.A.C.Orienta
   dd790:	6974 6e6f 203a 2c00 0020 7551 7461 7265     tion: ., .Quater
   dd7a0:	696e 6e6f 203a 4300 6c61 6269 6172 6974     nion: .Calibrati
   dd7b0:	6e6f 203a 0a00 000a 3a58 0020 5909 203a     on: ....X: ..Y: 
   dd7c0:	0900 3a5a 0020 6f63 706d 7361 2073 6568     ..Z: .compass he
   dd7d0:	6461 6e69 3a67 2020 7000 6973 6620 6f72     ading:  .psi fro
   dd7e0:	206d 6e62 306f 3535 000a 750a 696e 2078     m bno055...unix 
   dd7f0:	6974 656d 3d20 0020 6974 656d 6220 7361     time = .time bas
   dd800:	2065 6176 756c 2065 003d 666f 6966 6563     e value =.office
   dd810:	7420 6d65 6570 6172 7574 6572 5600 6e61      temperature.Van
   dd820:	2065 6156 756c 0965 6944 6572 7463 6f69     e Value.Directio
   dd830:	096e 6548 6461 6e69 0067 6144 6976 2073     n.Heading.Davis 
   dd840:	6957 646e 5320 6570 6465 5420 7365 0074     Wind Speed Test.
   dd850:	6f52 6174 6974 6e6f 0973 504d 0048 4d42     Rotations.MPH.BM
   dd860:	3245 3038 7420 7365 0074 3231 7838 3436     E280 test.128x64
   dd870:	4f20 454c 2044 6546 7461 6568 5772 6e69      OLED FeatherWin
   dd880:	2067 6574 7473 4f00 454c 2044 6562 7567     g test.OLED begu
   dd890:	006e 7542 7474 6e6f 7420 7365 0074 6942     n.Button test.Bi
   dd8a0:	6467 6461 7964 6441 6964 2065 6577 7461     gdaddyAddie weat
   dd8b0:	6568 2072 7473 7461 6f69 216e 000a 6f63     her station!..co
   dd8c0:	6e6e 6365 6574 2164 000a 5049 203a 3031     nnected!..IP: 10
   dd8d0:	302e 312e 322e 0033 6553 646e 6e69 2067     .0.1.23.Sending 
   dd8e0:	6176 206c 3023 4300 756f 646c 6e20 746f     val #0.Could not
   dd8f0:	6620 6e69 2064 2061 6176 696c 2064 4d42      find a valid BM
   dd900:	3245 3038 7320 6e65 6f73 2c72 6320 6568     E280 sensor, che
   dd910:	6b63 7720 7269 6e69 2c67 6120 6464 6572     ck wiring, addre
   dd920:	7373 202c 6573 736e 726f 4920 2144 5300     ss, sensor ID!.S
   dd930:	6e65 6f73 4972 2044 6177 3a73 3020 0078     ensorID was: 0x.
   dd940:	2020 2020 2020 2020 4449 6f20 2066 7830             ID of 0x
   dd950:	4646 7020 6f72 6162 6c62 2079 656d 6e61     FF probably mean
   dd960:	2073 2061 6162 2064 6461 7264 7365 2c73     s a bad address,
   dd970:	6120 4220 504d 3120 3038 6f20 2072 4d42      a BMP 180 or BM
   dd980:	2050 3830 0a35 2000 2020 4449 6f20 2066     P 085..   ID of 
   dd990:	7830 3635 302d 3578 2038 6572 7270 7365     0x56-0x58 repres
   dd9a0:	6e65 7374 6120 4220 504d 3220 3038 0a2c     ents a BMP 280,.
   dd9b0:	2000 2020 2020 2020 4920 2044 666f 3020     .        ID of 0
   dd9c0:	3678 2030 6572 7270 7365 6e65 7374 6120     x60 represents a
   dd9d0:	4220 454d 3220 3038 0a2e 2000 2020 2020      BME 280...     
   dd9e0:	2020 4920 2044 666f 3020 3678 2031 6572        ID of 0x61 re
   dd9f0:	7270 7365 6e65 7374 6120 4220 454d 3620     presents a BME 6
   dda00:	3038 0a2e 5700 6265 6553 6972 6c61 3320     80...WebSerial 3
   dda10:	2044 6946 6d72 6177 6572 4600 756f 646e     D Firmware.Found
   dda20:	4920 4332 4520 5045 4f52 004d 6554 7473      I2C EEPROM.Test
   dda30:	6e69 2067 6973 657a 0021 3249 2043 4545     ing size!.I2C EE
   dda40:	5250 4d4f 6e20 746f 6920 6564 746e 6669     PROM not identif
   dda50:	6569 2064 2e2e 202e 6863 6365 206b 6f79     ied ... check yo
   dda60:	7275 6320 6e6f 656e 7463 6f69 736e 0d3f     ur connections?.
   dda70:	000a 6146 6c69 6465 7420 206f 7277 7469     ..Failed to writ
   dda80:	2065 6461 7264 7365 2073 7830 4600 6961     e address 0x.Fai
   dda90:	656c 2064 6f74 7220 2d65 7277 7469 2065     led to re-write 
   ddaa0:	6461 7264 7365 2073 7830 4600 756f 646e     address 0x.Found
   ddab0:	6d20 7861 6120 6464 6572 7373 5400 6968      max address.Thi
   ddac0:	2073 4545 5250 4d4f 6320 6e61 7320 6f74     s EEPROM can sto
   ddad0:	6572 0020 6220 7479 7365 4f00 6f6f 7370     re . bytes.Ooops
   ddae0:	202c 6f6e 4220 4f4e 3530 2035 6564 6574     , no BNO055 dete
   ddaf0:	7463 6465 2e20 2e2e 4320 6568 6b63 7920     cted ... Check y
   ddb00:	756f 2072 6977 6972 676e 6f20 2072 3249     our wiring or I2
   ddb10:	2043 4441 5244 0021 4e0a 206f 6143 696c     C ADDR!..No Cali
   ddb20:	7262 7461 6f69 206e 6144 6174 6620 726f     bration Data for
   ddb30:	7420 6968 2073 6573 736e 726f 6520 6978      this sensor exi
   ddb40:	7473 2073 6e69 4520 5045 4f52 004d 460a     sts in EEPROM..F
   ddb50:	756f 646e 4320 6c61 6269 6172 6974 6e6f     ound Calibration
   ddb60:	6620 726f 7420 6968 2073 6573 736e 726f      for this sensor
   ddb70:	6920 206e 4545 5250 4d4f 002e 0a0a 6552      in EEPROM....Re
   ddb80:	7473 726f 6e69 2067 6143 696c 7262 7461     storing Calibrat
   ddb90:	6f69 206e 6164 6174 7420 206f 6874 2065     ion data to the 
   ddba0:	4e42 304f 3535 2e2e 002e 0a0a 6143 696c     BNO055......Cali
   ddbb0:	7262 7461 6f69 206e 6164 6174 6c20 616f     bration data loa
   ddbc0:	6564 2064 6e69 6f74 4220 4f4e 3530 0035     ded into BNO055.
   ddbd0:	6f4d 6576 7320 6e65 6f73 2072 6c73 6769     Move sensor slig
   ddbe0:	7468 796c 7420 206f 6163 696c 7262 7461     htly to calibrat
   ddbf0:	2065 616d 6e67 7465 6d6f 7465 7265 0073     e magnetometers.
   ddc00:	6c50 6165 6573 4320 6c61 6269 6172 6574     Please Calibrate
   ddc10:	5320 6e65 6f73 3a72 0020 460a 6c75 796c      Sensor: ..Fully
   ddc20:	6320 6c61 6269 6172 6574 2164 4300 6c61      calibrated!.Cal
   ddc30:	6269 6172 6974 6e6f 5220 7365 6c75 7374     ibration Results
   ddc40:	203a 0a00 530a 6f74 6972 676e 6320 6c61     : ...Storing cal
   ddc50:	6269 6172 6974 6e6f 6420 7461 2061 6f74     ibration data to
   ddc60:	4520 5045 4f52 2e4d 2e2e 4400 7461 2061      EEPROM....Data 
   ddc70:	7473 726f 6465 7420 206f 4545 5250 4d4f     stored to EEPROM
   ddc80:	002e 2d0a 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ...-------------
   ddc90:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   ddca0:	2d2d 0a2d 6400 6665 7561 746c 0020 534d     ---..default .MS
   ddcb0:	0042 534c 0042 533c 4950 6553 7474 6e69     B.LSB.<SPISettin
   ddcc0:	7367 6420 6665 7561 746c 003e 533c 4950     gs default>.<SPI
   ddcd0:	6553 7474 6e69 7367 2520 2573 2075 7325     Settings %s%u %s
   ddce0:	4d20 444f 2545 3e75 0000 0000                MODE%u>....

000ddcec <_ZTVN8particle11SPISettingsE>:
	...
   ddcf4:	5ac5 000d 5a99 000d 5a9b 000d               .Z...Z...Z..

000ddd00 <_ZTV15Adafruit_BNO055>:
	...
   ddd08:	6809 000d 684d 000d 6807 000d 6ea1 000d     .h..Mh...h...n..
   ddd18:	680d 000d                                   .h..

000ddd1c <_ZTV17Adafruit_GrayOLED>:
	...
   ddd2c:	7915 000d 87fd 000d 6ef3 000d 731d 000d     .y.......n...s..
   ddd3c:	731f 000d 7351 000d 732d 000d 733f 000d     .s..Qs..-s..?s..
   ddd4c:	7261 000d 731d 000d 7549 000d 70ef 000d     ar...s..Iu...p..
   ddd5c:	7369 000d 73a7 000d 73e1 000d 7427 000d     is...s...s..'t..
   ddd6c:	74c5 000d 7443 000d 40a5 000d               .t..Ct...@..

000ddd78 <_ZL4font>:
   ddd78:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   ddd88:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   ddd98:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   ddda8:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   dddb8:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   dddc8:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   dddd8:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   ddde8:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   dddf8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   dde08:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   dde18:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   dde28:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   dde38:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   dde48:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   dde58:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   dde68:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   dde78:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   dde88:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   dde98:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   ddea8:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   ddeb8:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   ddec8:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   dded8:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   ddee8:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   ddef8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   ddf08:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   ddf18:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   ddf28:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   ddf38:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   ddf48:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   ddf58:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   ddf68:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   ddf78:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   ddf88:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   ddf98:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   ddfa8:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   ddfb8:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   ddfc8:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   ddfd8:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   ddfe8:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   ddff8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   de008:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   de018:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   de028:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   de038:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   de048:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   de058:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   de068:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   de078:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   de088:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   de098:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   de0a8:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   de0b8:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   de0c8:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   de0d8:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   de0e8:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   de0f8:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   de108:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   de118:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   de128:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   de138:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   de148:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   de158:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   de168:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   de178:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   de188:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   de198:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   de1a8:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   de1b8:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   de1c8:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   de1d8:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   de1e8:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   de1f8:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   de208:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   de218:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   de228:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   de238:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   de248:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   de258:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   de268:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000de278 <_ZTV12Adafruit_GFX>:
	...
   de288:	7915 000d 87fd 000d 40a5 000d 731d 000d     .y.......@...s..
   de298:	731f 000d 7351 000d 732d 000d 733f 000d     .s..Qs..-s..?s..
   de2a8:	7261 000d 731d 000d 7549 000d 74c3 000d     ar...s..Iu...t..
   de2b8:	7369 000d 73a7 000d 73e1 000d 7427 000d     is...s...s..'t..
   de2c8:	74c5 000d 7443 000d                         .t..Ct..

000de2d0 <_ZTV15Adafruit_SH110X>:
	...
   de2d8:	40a5 000d 40a5 000d 7915 000d 87fd 000d     .@...@...y......
   de2e8:	6ef3 000d 731d 000d 731f 000d 7351 000d     .n...s...s..Qs..
   de2f8:	732d 000d 733f 000d 7261 000d 731d 000d     -s..?s..ar...s..
   de308:	7549 000d 70ef 000d 7369 000d 73a7 000d     Iu...p..is...s..
   de318:	73e1 000d 7427 000d 74c5 000d 7443 000d     .s..'t...t..Ct..
   de328:	7a23 000d                                   #z..

000de32c <_ZL12splash2_data>:
   de32c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   de33c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   de34c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   de368:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   de378:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   de388:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   de398:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   de3a8:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   de3b8:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   de3c8:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   de3d8:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   de3e8:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   de3f8:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   de408:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   de418:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   de428:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   de438:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   de448:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   de458:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   de468:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   de478:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   de488:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   de498:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   de4a8:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   de4c0:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   de4d0:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   de4e0:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   de4f0:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   de500:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000de50c <_ZTV15Adafruit_SH1107>:
	...
   de514:	7bc1 000d 7bd5 000d 7915 000d 87fd 000d     .{...{...y......
   de524:	6ef3 000d 731d 000d 731f 000d 7351 000d     .n...s...s..Qs..
   de534:	732d 000d 733f 000d 7261 000d 731d 000d     -s..?s..ar...s..
   de544:	7549 000d 70ef 000d 7369 000d 73a7 000d     Iu...p..is...s..
   de554:	73e1 000d 7427 000d 74c5 000d 7443 000d     .s..'t...t..Ct..
   de564:	7a23 000d                                   #z..

000de568 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   de568:	00d3 7fa8                                   ....

000de56c <_ZZN15Adafruit_SH11075beginEhbE4init>:
   de56c:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
   de57c:	35db 3fa8 a6a4 0000                         .5.?....

000de584 <_ZTVN5spark13EthernetClassE>:
	...
   de58c:	83cb 000d 83c1 000d 83b7 000d 83ad 000d     ................
   de59c:	83a1 000d 8395 000d 9827 000d 982f 000d     ........'.../...
   de5ac:	8389 000d 8381 000d 8377 000d 836d 000d     ........w...m...
   de5bc:	985f 000d                                   _...

000de5c0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   de5c0:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   de5d0:	766f 0066 7061 0070 5925 252d 2d6d 6425     ovf.app.%Y-%m-%d
   de5e0:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   de5f0:	6d69 0065                                   ime.

000de5f4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de5fc:	8dad 000d 8db3 000d 8df1 000d 8dc1 000d     ................
   de60c:	8daf 000d                                   ....

000de610 <_ZTV9IPAddress>:
	...
   de618:	92f5 000d 92e5 000d 92e7 000d               ............

000de624 <_ZTV9USBSerial>:
	...
   de62c:	93cd 000d 9435 000d 940b 000d 87fd 000d     ....5...........
   de63c:	93fd 000d 93cf 000d 93df 000d 942f 000d     ............/...
   de64c:	93ef 000d 93c7 000d                         ........

000de654 <_ZTVN5spark13CellularClassE>:
	...
   de65c:	9593 000d 9589 000d 957f 000d 9535 000d     ............5...
   de66c:	9573 000d 9567 000d 9827 000d 982f 000d     s...g...'.../...
   de67c:	955b 000d 9553 000d 9549 000d 953f 000d     [...S...I...?...
   de68c:	985f 000d                                   _...

000de690 <_ZTV11USARTSerial>:
	...
   de698:	95cd 000d 963b 000d 9613 000d 87fd 000d     ....;...........
   de6a8:	95e3 000d 95ff 000d 95f1 000d 960d 000d     ................
   de6b8:	95cf 000d 95d5 000d                         ........

000de6c0 <_ZTV7TwoWire>:
	...
   de6c8:	96e9 000d 9733 000d 970b 000d 96eb 000d     ....3...........
   de6d8:	9713 000d 971b 000d 9723 000d 972b 000d     ........#...+...

000de6e8 <_ZTVN5spark12NetworkClassE>:
	...
   de6f0:	97e7 000d 97f1 000d 97fb 000d 9805 000d     ................
   de700:	980f 000d 981b 000d 9827 000d 982f 000d     ........'.../...
   de710:	9837 000d 9843 000d 984b 000d 9855 000d     7...C...K...U...
   de720:	985f 000d                                   _...

000de724 <_ZSt7nothrow>:
   de724:	0000 0000 6f70 0077 0000 0000               ....pow.....

000de730 <CSWTCH.8>:
   de730:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   de740:	21d2 7f33 d97c c002                         .!3.|...

000de748 <CSWTCH.9>:
   de748:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   de758:	2d18 5444 21fb c009 0000 0000               .-DT.!......

000de764 <CSWTCH.8>:
   de764:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000de770 <CSWTCH.9>:
   de770:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000de77c <npio2_hw>:
   de77c:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   de78c:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   de79c:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   de7ac:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   de7bc:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   de7cc:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   de7dc:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   de7ec:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000de7fc <two_over_pi>:
   de7fc:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   de80c:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   de81c:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   de82c:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   de83c:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   de84c:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   de85c:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   de86c:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   de87c:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   de88c:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   de89c:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   de8ac:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   de8bc:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   de8cc:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   de8dc:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   de8ec:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   de8fc:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   de90c:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   de91c:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   de92c:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   de93c:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   de94c:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   de95c:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   de96c:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   de97c:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   de98c:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   de99c:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   de9ac:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   de9bc:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   de9cc:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   de9dc:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   de9ec:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   de9fc:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   dea0c:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   dea1c:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   dea2c:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   dea3c:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   dea4c:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   dea5c:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   dea6c:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   dea7c:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   dea8c:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   dea9c:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   deaac:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   deabc:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   deacc:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   deadc:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   deaec:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   deafc:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   deb0c:	008c 0000 006b 0000                         ....k...

000deb14 <PIo2>:
   deb14:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   deb24:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   deb34:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000deb40 <init_jk>:
   deb40:	0004 0000 0007 0000 0009 0000 0000 0000     ................

000deb50 <atanhi>:
   deb50:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   deb60:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000deb70 <atanlo>:
   deb70:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   deb80:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000deb90 <TWO52>:
   deb90:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000deba0 <atanhi>:
   deba0:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000debb0 <atanlo>:
   debb0:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3

000debc0 <link_const_variable_data_end>:
   debc0:	000d4db1 	.word	0x000d4db1
   debc4:	000d83d5 	.word	0x000d83d5
   debc8:	000d856d 	.word	0x000d856d
   debcc:	000d87ed 	.word	0x000d87ed
   debd0:	000d8b7d 	.word	0x000d8b7d
   debd4:	000d8c01 	.word	0x000d8c01
   debd8:	000d8c69 	.word	0x000d8c69
   debdc:	000d959d 	.word	0x000d959d
   debe0:	000d9931 	.word	0x000d9931

000debe4 <link_constructors_end>:
	...
