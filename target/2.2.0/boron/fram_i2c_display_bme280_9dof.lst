
z:/Personal/Electronics/particle/fram_i2c_display_bme280_9dof/target/2.2.0/boron/fram_i2c_display_bme280_9dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a4b0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000de4d0  000de4d0  0000e4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000de4d8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e398  000de4dc  0001e398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003e4  2003e410  2003e410  0002e410  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000de550  000de550  0001e550  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000de578  000de578  0001e578  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00217970  00000000  00000000  0001e57c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001ffd3  00000000  00000000  00235eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00036be7  00000000  00000000  00255ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002f48  00000000  00000000  0028caa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007e98  00000000  00000000  0028f9ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000464f7  00000000  00000000  00297886  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000540b5  00000000  00000000  002ddd7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010e546  00000000  00000000  00331e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00009024  00000000  00000000  00440378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f008 fe4b 	bl	dcccc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f008 fe53 	bl	dcce8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e398 	.word	0x2003e398
   d404c:	000de4dc 	.word	0x000de4dc
   d4050:	2003e40c 	.word	0x2003e40c
   d4054:	2003e410 	.word	0x2003e410
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fda7 	bl	d8bb4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000de4a0 	.word	0x000de4a0
   d4080:	000de4c4 	.word	0x000de4c4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b8c4 	b.w	d5210 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 f809 	bl	d50a0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 bd47 	b.w	d8b24 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b943 	b.w	d8320 <malloc>

000d409a <_Znaj>:
   d409a:	f004 b941 	b.w	d8320 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b947 	b.w	d8330 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f004 f87c 	bl	d81a8 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7ea9 	.word	0x000d7ea9

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z12isr_rotationv>:
    Serial.print(calibData.mag_radius);
}


// This is the function that the interrupt calls to increment the rotation count
void isr_rotation () {
   d40c8:	b510      	push	{r4, lr}
//a debounce time of 22 ms is equivalent to wind of 100 mph.
if ((millis() - ContactBounceTime) > 22 ) { // debounce the switch contact.
   d40ca:	4c07      	ldr	r4, [pc, #28]	; (d40e8 <_Z12isr_rotationv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40cc:	f003 fef4 	bl	d7eb8 <HAL_Timer_Get_Milli_Seconds>
   d40d0:	6823      	ldr	r3, [r4, #0]
   d40d2:	1ac0      	subs	r0, r0, r3
   d40d4:	2816      	cmp	r0, #22
   d40d6:	d906      	bls.n	d40e6 <_Z12isr_rotationv+0x1e>
Rotations++;
   d40d8:	4a04      	ldr	r2, [pc, #16]	; (d40ec <_Z12isr_rotationv+0x24>)
   d40da:	6813      	ldr	r3, [r2, #0]
   d40dc:	3301      	adds	r3, #1
   d40de:	6013      	str	r3, [r2, #0]
   d40e0:	f003 feea 	bl	d7eb8 <HAL_Timer_Get_Milli_Seconds>
ContactBounceTime = millis();
   d40e4:	6020      	str	r0, [r4, #0]
}

}
   d40e6:	bd10      	pop	{r4, pc}
   d40e8:	2003e410 	.word	0x2003e410
   d40ec:	2003e414 	.word	0x2003e414

000d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d40f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d40f2:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d40f4:	4607      	mov	r7, r0
   d40f6:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d40f8:	da0c      	bge.n	d4114 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
   d40fa:	2a0a      	cmp	r2, #10
   d40fc:	d10a      	bne.n	d4114 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d40fe:	212d      	movs	r1, #45	; 0x2d
   d4100:	f004 fb1a 	bl	d8738 <_ZN5Print5printEc>
            val = -n;
   d4104:	4261      	negs	r1, r4
            t = print('-');
   d4106:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4108:	b2f2      	uxtb	r2, r6
   d410a:	4638      	mov	r0, r7
   d410c:	f004 fb2f 	bl	d876e <_ZN5Print11printNumberEmh>
    }
}
   d4110:	4428      	add	r0, r5
   d4112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d4114:	4621      	mov	r1, r4
        size_t t = 0;
   d4116:	2500      	movs	r5, #0
   d4118:	e7f6      	b.n	d4108 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x18>
	...

000d411c <_Z15read_bme_valuesRfS_S_S_>:
void read_bme_values(float& bme_temperature, float& bme_pressure, float& bme_humidity, float& bme_altitude){
   d411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d411e:	4607      	mov	r7, r0
bme_temperature = bme.readTemperature()*1.8F + 32.;
   d4120:	4813      	ldr	r0, [pc, #76]	; (d4170 <_Z15read_bme_valuesRfS_S_S_+0x54>)
void read_bme_values(float& bme_temperature, float& bme_pressure, float& bme_humidity, float& bme_altitude){
   d4122:	460e      	mov	r6, r1
   d4124:	4615      	mov	r5, r2
   d4126:	461c      	mov	r4, r3
bme_temperature = bme.readTemperature()*1.8F + 32.;
   d4128:	f001 fc28 	bl	d597c <_ZN15Adafruit_BME28015readTemperatureEv>
   d412c:	ed9f 7a11 	vldr	s14, [pc, #68]	; d4174 <_Z15read_bme_valuesRfS_S_S_+0x58>
   d4130:	eddf 7a11 	vldr	s15, [pc, #68]	; d4178 <_Z15read_bme_valuesRfS_S_S_+0x5c>
bme_pressure = bme.readPressure() / 101325.0F * 760.0F;
   d4134:	480e      	ldr	r0, [pc, #56]	; (d4170 <_Z15read_bme_valuesRfS_S_S_+0x54>)
bme_temperature = bme.readTemperature()*1.8F + 32.;
   d4136:	eee0 7a07 	vfma.f32	s15, s0, s14
   d413a:	edc7 7a00 	vstr	s15, [r7]
bme_pressure = bme.readPressure() / 101325.0F * 760.0F;
   d413e:	f001 fc4b 	bl	d59d8 <_ZN15Adafruit_BME28012readPressureEv>
   d4142:	ed9f 7a0e 	vldr	s14, [pc, #56]	; d417c <_Z15read_bme_valuesRfS_S_S_+0x60>
bme_humidity = bme.readHumidity();
   d4146:	480a      	ldr	r0, [pc, #40]	; (d4170 <_Z15read_bme_valuesRfS_S_S_+0x54>)
bme_pressure = bme.readPressure() / 101325.0F * 760.0F;
   d4148:	eec0 7a07 	vdiv.f32	s15, s0, s14
   d414c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; d4180 <_Z15read_bme_valuesRfS_S_S_+0x64>
   d4150:	ee67 7a87 	vmul.f32	s15, s15, s14
   d4154:	edc6 7a00 	vstr	s15, [r6]
bme_humidity = bme.readHumidity();
   d4158:	f001 fdba 	bl	d5cd0 <_ZN15Adafruit_BME28012readHumidityEv>
bme_altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d415c:	4804      	ldr	r0, [pc, #16]	; (d4170 <_Z15read_bme_valuesRfS_S_S_+0x54>)
bme_humidity = bme.readHumidity();
   d415e:	ed85 0a00 	vstr	s0, [r5]
bme_altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d4162:	ed9f 0a08 	vldr	s0, [pc, #32]	; d4184 <_Z15read_bme_valuesRfS_S_S_+0x68>
   d4166:	f001 fd13 	bl	d5b90 <_ZN15Adafruit_BME28012readAltitudeEf>
   d416a:	ed84 0a00 	vstr	s0, [r4]
}
   d416e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4170:	2003e424 	.word	0x2003e424
   d4174:	3fe66666 	.word	0x3fe66666
   d4178:	42000000 	.word	0x42000000
   d417c:	47c5e680 	.word	0x47c5e680
   d4180:	443e0000 	.word	0x443e0000
   d4184:	447d5000 	.word	0x447d5000

000d4188 <_Z20displaySensorDetailsv>:
{
   d4188:	b530      	push	{r4, r5, lr}
   d418a:	b08b      	sub	sp, #44	; 0x2c
  bno.getSensor(&sensor);
   d418c:	4669      	mov	r1, sp
   d418e:	4842      	ldr	r0, [pc, #264]	; (d4298 <_Z20displaySensorDetailsv+0x110>)
   d4190:	f002 fa9c 	bl	d66cc <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
  Serial.println("------------------------------------");
   d4194:	f004 fe16 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4198:	4940      	ldr	r1, [pc, #256]	; (d429c <_Z20displaySensorDetailsv+0x114>)
   d419a:	f004 fadc 	bl	d8756 <_ZN5Print7printlnEPKc>
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
   d419e:	f004 fe11 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d41a2:	493f      	ldr	r1, [pc, #252]	; (d42a0 <_Z20displaySensorDetailsv+0x118>)
   d41a4:	f004 fac4 	bl	d8730 <_ZN5Print5printEPKc>
   d41a8:	f004 fe0c 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d41ac:	4669      	mov	r1, sp
   d41ae:	f004 fad2 	bl	d8756 <_ZN5Print7printlnEPKc>
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
   d41b2:	f004 fe07 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d41b6:	493b      	ldr	r1, [pc, #236]	; (d42a4 <_Z20displaySensorDetailsv+0x11c>)
   d41b8:	f004 faba 	bl	d8730 <_ZN5Print5printEPKc>
   d41bc:	f004 fe02 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d41c0:	9c03      	ldr	r4, [sp, #12]
        if (n < 0 && base == 10) {
   d41c2:	2c00      	cmp	r4, #0
   d41c4:	4605      	mov	r5, r0
   d41c6:	da63      	bge.n	d4290 <_Z20displaySensorDetailsv+0x108>
            t = print('-');
   d41c8:	212d      	movs	r1, #45	; 0x2d
   d41ca:	f004 fab5 	bl	d8738 <_ZN5Print5printEc>
            val = -n;
   d41ce:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d41d0:	220a      	movs	r2, #10
   d41d2:	4628      	mov	r0, r5
   d41d4:	f004 facb 	bl	d876e <_ZN5Print11printNumberEmh>
        n += println();
   d41d8:	4628      	mov	r0, r5
   d41da:	f004 fab0 	bl	d873e <_ZN5Print7printlnEv>
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
   d41de:	f004 fdf1 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d41e2:	4931      	ldr	r1, [pc, #196]	; (d42a8 <_Z20displaySensorDetailsv+0x120>)
   d41e4:	f004 faa4 	bl	d8730 <_ZN5Print5printEPKc>
   d41e8:	f004 fdec 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d41ec:	9c04      	ldr	r4, [sp, #16]
        if (n < 0 && base == 10) {
   d41ee:	2c00      	cmp	r4, #0
   d41f0:	4605      	mov	r5, r0
   d41f2:	da4f      	bge.n	d4294 <_Z20displaySensorDetailsv+0x10c>
            t = print('-');
   d41f4:	212d      	movs	r1, #45	; 0x2d
   d41f6:	f004 fa9f 	bl	d8738 <_ZN5Print5printEc>
            val = -n;
   d41fa:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d41fc:	220a      	movs	r2, #10
   d41fe:	4628      	mov	r0, r5
   d4200:	f004 fab5 	bl	d876e <_ZN5Print11printNumberEmh>
        n += println();
   d4204:	4628      	mov	r0, r5
   d4206:	f004 fa9a 	bl	d873e <_ZN5Print7printlnEv>
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" xxx");
   d420a:	f004 fddb 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d420e:	4927      	ldr	r1, [pc, #156]	; (d42ac <_Z20displaySensorDetailsv+0x124>)
   d4210:	f004 fa8e 	bl	d8730 <_ZN5Print5printEPKc>
   d4214:	f004 fdd6 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4218:	ed9d 0a06 	vldr	s0, [sp, #24]
   d421c:	2102      	movs	r1, #2
   d421e:	f004 fbbd 	bl	d899c <_ZN5Print5printEfi>
   d4222:	f004 fdcf 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4226:	4922      	ldr	r1, [pc, #136]	; (d42b0 <_Z20displaySensorDetailsv+0x128>)
   d4228:	f004 fa95 	bl	d8756 <_ZN5Print7printlnEPKc>
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" xxx");
   d422c:	f004 fdca 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4230:	4920      	ldr	r1, [pc, #128]	; (d42b4 <_Z20displaySensorDetailsv+0x12c>)
   d4232:	f004 fa7d 	bl	d8730 <_ZN5Print5printEPKc>
   d4236:	f004 fdc5 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d423a:	ed9d 0a07 	vldr	s0, [sp, #28]
   d423e:	2102      	movs	r1, #2
   d4240:	f004 fbac 	bl	d899c <_ZN5Print5printEfi>
   d4244:	f004 fdbe 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4248:	4919      	ldr	r1, [pc, #100]	; (d42b0 <_Z20displaySensorDetailsv+0x128>)
   d424a:	f004 fa84 	bl	d8756 <_ZN5Print7printlnEPKc>
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" xxx");
   d424e:	f004 fdb9 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4252:	4919      	ldr	r1, [pc, #100]	; (d42b8 <_Z20displaySensorDetailsv+0x130>)
   d4254:	f004 fa6c 	bl	d8730 <_ZN5Print5printEPKc>
   d4258:	f004 fdb4 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d425c:	ed9d 0a08 	vldr	s0, [sp, #32]
   d4260:	2102      	movs	r1, #2
   d4262:	f004 fb9b 	bl	d899c <_ZN5Print5printEfi>
   d4266:	f004 fdad 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d426a:	4911      	ldr	r1, [pc, #68]	; (d42b0 <_Z20displaySensorDetailsv+0x128>)
   d426c:	f004 fa73 	bl	d8756 <_ZN5Print7printlnEPKc>
  Serial.println("------------------------------------");
   d4270:	f004 fda8 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4274:	4909      	ldr	r1, [pc, #36]	; (d429c <_Z20displaySensorDetailsv+0x114>)
   d4276:	f004 fa6e 	bl	d8756 <_ZN5Print7printlnEPKc>
  Serial.println("");
   d427a:	f004 fda3 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d427e:	490f      	ldr	r1, [pc, #60]	; (d42bc <_Z20displaySensorDetailsv+0x134>)
   d4280:	f004 fa69 	bl	d8756 <_ZN5Print7printlnEPKc>
  delay(500);
   d4284:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4288:	f004 fc20 	bl	d8acc <delay>
}
   d428c:	b00b      	add	sp, #44	; 0x2c
   d428e:	bd30      	pop	{r4, r5, pc}
            val = n;
   d4290:	4621      	mov	r1, r4
   d4292:	e79d      	b.n	d41d0 <_Z20displaySensorDetailsv+0x48>
   d4294:	4621      	mov	r1, r4
   d4296:	e7b1      	b.n	d41fc <_Z20displaySensorDetailsv+0x74>
   d4298:	2003e478 	.word	0x2003e478
   d429c:	000dceb4 	.word	0x000dceb4
   d42a0:	000dced9 	.word	0x000dced9
   d42a4:	000dcee8 	.word	0x000dcee8
   d42a8:	000dcef7 	.word	0x000dcef7
   d42ac:	000dcf06 	.word	0x000dcf06
   d42b0:	000dcf15 	.word	0x000dcf15
   d42b4:	000dcf1a 	.word	0x000dcf1a
   d42b8:	000dcf29 	.word	0x000dcf29
   d42bc:	000dd0cd 	.word	0x000dd0cd

000d42c0 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>:
{
   d42c0:	b538      	push	{r3, r4, r5, lr}
   d42c2:	4604      	mov	r4, r0
    Serial.println("\nCalibration offsets \n");
   d42c4:	f004 fd7e 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d42c8:	494c      	ldr	r1, [pc, #304]	; (d43fc <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x13c>)
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   d42ca:	4d4d      	ldr	r5, [pc, #308]	; (d4400 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x140>)
    Serial.println("\nCalibration offsets \n");
   d42cc:	f004 fa43 	bl	d8756 <_ZN5Print7printlnEPKc>
    Serial.print("Accelerometer: ");
   d42d0:	f004 fd78 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d42d4:	494b      	ldr	r1, [pc, #300]	; (d4404 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x144>)
   d42d6:	f004 fa2b 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   d42da:	f004 fd73 	bl	d8dc4 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d42de:	220a      	movs	r2, #10
   d42e0:	f9b4 1000 	ldrsh.w	r1, [r4]
   d42e4:	f7ff ff04 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d42e8:	f004 fd6c 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d42ec:	4629      	mov	r1, r5
   d42ee:	f004 fa1f 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_y); Serial.print(" ");
   d42f2:	f004 fd67 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d42f6:	220a      	movs	r2, #10
   d42f8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   d42fc:	f7ff fef8 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4300:	f004 fd60 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4304:	4629      	mov	r1, r5
   d4306:	f004 fa13 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_z); Serial.print(" ");
   d430a:	f004 fd5b 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d430e:	220a      	movs	r2, #10
   d4310:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   d4314:	f7ff feec 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4318:	f004 fd54 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d431c:	4629      	mov	r1, r5
   d431e:	f004 fa07 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print("\nGyro: ");
   d4322:	f004 fd4f 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4326:	4938      	ldr	r1, [pc, #224]	; (d4408 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x148>)
   d4328:	f004 fa02 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_x); Serial.print(" ");
   d432c:	f004 fd4a 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4330:	220a      	movs	r2, #10
   d4332:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   d4336:	f7ff fedb 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d433a:	f004 fd43 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d433e:	4629      	mov	r1, r5
   d4340:	f004 f9f6 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_y); Serial.print(" ");
   d4344:	f004 fd3e 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4348:	220a      	movs	r2, #10
   d434a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   d434e:	f7ff fecf 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4352:	f004 fd37 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4356:	4629      	mov	r1, r5
   d4358:	f004 f9ea 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_z); Serial.print(" ");
   d435c:	f004 fd32 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4360:	220a      	movs	r2, #10
   d4362:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4366:	f7ff fec3 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d436a:	f004 fd2b 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d436e:	4629      	mov	r1, r5
   d4370:	f004 f9de 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print("\nMag: ");
   d4374:	f004 fd26 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4378:	4924      	ldr	r1, [pc, #144]	; (d440c <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x14c>)
   d437a:	f004 f9d9 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_x); Serial.print(" ");
   d437e:	f004 fd21 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4382:	220a      	movs	r2, #10
   d4384:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   d4388:	f7ff feb2 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d438c:	f004 fd1a 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4390:	4629      	mov	r1, r5
   d4392:	f004 f9cd 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_y); Serial.print(" ");
   d4396:	f004 fd15 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d439a:	220a      	movs	r2, #10
   d439c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d43a0:	f7ff fea6 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43a4:	f004 fd0e 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d43a8:	4629      	mov	r1, r5
   d43aa:	f004 f9c1 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_z); Serial.print(" ");
   d43ae:	f004 fd09 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d43b2:	220a      	movs	r2, #10
   d43b4:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d43b8:	f7ff fe9a 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43bc:	f004 fd02 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d43c0:	4629      	mov	r1, r5
   d43c2:	f004 f9b5 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print("\nAccel Radius: ");
   d43c6:	f004 fcfd 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d43ca:	4911      	ldr	r1, [pc, #68]	; (d4410 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x150>)
   d43cc:	f004 f9b0 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_radius);
   d43d0:	f004 fcf8 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d43d4:	220a      	movs	r2, #10
   d43d6:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
   d43da:	f7ff fe89 	bl	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
    Serial.print("\nMag Radius: ");
   d43de:	f004 fcf1 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d43e2:	490c      	ldr	r1, [pc, #48]	; (d4414 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x154>)
   d43e4:	f004 f9a4 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_radius);
   d43e8:	f004 fcec 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d43ec:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
   d43f0:	220a      	movs	r2, #10
}
   d43f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d43f6:	f7ff be7b 	b.w	d40f0 <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43fa:	bf00      	nop
   d43fc:	000dcf38 	.word	0x000dcf38
   d4400:	000dd06c 	.word	0x000dd06c
   d4404:	000dcf4f 	.word	0x000dcf4f
   d4408:	000dcf5f 	.word	0x000dcf5f
   d440c:	000dcf67 	.word	0x000dcf67
   d4410:	000dcf6e 	.word	0x000dcf6e
   d4414:	000dcf7e 	.word	0x000dcf7e

000d4418 <_Z19get_compass_headingv>:

float get_compass_heading() {
   d4418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d441c:	ed2d 8b08 	vpush	{d8-d11}
   d4420:	b097      	sub	sp, #92	; 0x5c
  // put your main code here, to run repeatedly:
uint8_t system, gyro, accel, mg = 0;
   d4422:	2300      	movs	r3, #0
   d4424:	f88d 300f 	strb.w	r3, [sp, #15]
bno.getCalibration(&system, &gyro, &accel, &mg);
   d4428:	f10d 030f 	add.w	r3, sp, #15
   d442c:	9300      	str	r3, [sp, #0]
   d442e:	f10d 020d 	add.w	r2, sp, #13
   d4432:	f10d 030e 	add.w	r3, sp, #14
   d4436:	a903      	add	r1, sp, #12
   d4438:	48db      	ldr	r0, [pc, #876]	; (d47a8 <_Z19get_compass_headingv+0x390>)
imu::Vector<3> acc =bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
imu::Vector<3> gyr =bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
imu::Vector<3> mag =bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
//measured value of tilt in x
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d443a:	f8df 83a4 	ldr.w	r8, [pc, #932]	; d47e0 <_Z19get_compass_headingv+0x3c8>
//measured value of tilt in y
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d443e:	f8df a3a4 	ldr.w	sl, [pc, #932]	; d47e4 <_Z19get_compass_headingv+0x3cc>
 //this is the time through one loop of program
dt=(millis()-millisOld)/1000.;
millisOld=millis();
//measures tilt in x with filter to remove vibration but still quick to respond.  lesson 9
//complimentary filter
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   d4442:	f8df 93a4 	ldr.w	r9, [pc, #932]	; d47e8 <_Z19get_compass_headingv+0x3d0>
//measures tilt in y with filter to remove vibration but still quick to respond.  lesson 9
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d4446:	f8df b3a4 	ldr.w	fp, [pc, #932]	; d47ec <_Z19get_compass_headingv+0x3d4>

thetaG=thetaG+gyr.y()*dt;
phiG=phiG-gyr.x()*dt;
 
phiRad=phi/360*(2*3.14);
   d444a:	ed9f 9ad8 	vldr	s18, [pc, #864]	; d47ac <_Z19get_compass_headingv+0x394>
bno.getCalibration(&system, &gyro, &accel, &mg);
   d444e:	f002 fabc 	bl	d69ca <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
imu::Vector<3> acc =bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
   d4452:	a804      	add	r0, sp, #16
   d4454:	49d4      	ldr	r1, [pc, #848]	; (d47a8 <_Z19get_compass_headingv+0x390>)
   d4456:	2208      	movs	r2, #8
   d4458:	f002 fbb6 	bl	d6bc8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> gyr =bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
   d445c:	a80a      	add	r0, sp, #40	; 0x28
   d445e:	49d2      	ldr	r1, [pc, #840]	; (d47a8 <_Z19get_compass_headingv+0x390>)
   d4460:	2214      	movs	r2, #20
   d4462:	f002 fbb1 	bl	d6bc8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> mag =bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
   d4466:	a810      	add	r0, sp, #64	; 0x40
   d4468:	49cf      	ldr	r1, [pc, #828]	; (d47a8 <_Z19get_compass_headingv+0x390>)
   d446a:	220e      	movs	r2, #14
   d446c:	f002 fbac 	bl	d6bc8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4470:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d4474:	a3c2      	add	r3, pc, #776	; (adr r3, d4780 <_Z19get_compass_headingv+0x368>)
   d4476:	e9d3 2300 	ldrd	r2, r3, [r3]
   d447a:	f007 ff29 	bl	dc2d0 <__aeabi_ddiv>
   d447e:	a3c0      	add	r3, pc, #768	; (adr r3, d4780 <_Z19get_compass_headingv+0x368>)
   d4480:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4484:	ec41 0b18 	vmov	d8, r0, r1
   d4488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d448c:	f007 ff20 	bl	dc2d0 <__aeabi_ddiv>
   d4490:	eeb0 1a48 	vmov.f32	s2, s16
   d4494:	eef0 1a68 	vmov.f32	s3, s17
   d4498:	ec41 0b10 	vmov	d0, r0, r1
   d449c:	f005 f854 	bl	d9548 <atan2>
   d44a0:	ec53 2b10 	vmov	r2, r3, d0
   d44a4:	ee10 0a10 	vmov	r0, s0
   d44a8:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   d44ac:	2200      	movs	r2, #0
   d44ae:	4bc0      	ldr	r3, [pc, #768]	; (d47b0 <_Z19get_compass_headingv+0x398>)
   d44b0:	f007 fde4 	bl	dc07c <__aeabi_dmul>
   d44b4:	a3b4      	add	r3, pc, #720	; (adr r3, d4788 <_Z19get_compass_headingv+0x370>)
   d44b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44ba:	f007 ff09 	bl	dc2d0 <__aeabi_ddiv>
   d44be:	4bbd      	ldr	r3, [pc, #756]	; (d47b4 <_Z19get_compass_headingv+0x39c>)
   d44c0:	2200      	movs	r2, #0
   d44c2:	f007 fddb 	bl	dc07c <__aeabi_dmul>
   d44c6:	f008 f8d1 	bl	dc66c <__aeabi_d2f>
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d44ca:	a3ad      	add	r3, pc, #692	; (adr r3, d4780 <_Z19get_compass_headingv+0x368>)
   d44cc:	e9d3 2300 	ldrd	r2, r3, [r3]
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d44d0:	f8c8 0000 	str.w	r0, [r8]
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d44d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d44d8:	f007 fefa 	bl	dc2d0 <__aeabi_ddiv>
   d44dc:	a3a8      	add	r3, pc, #672	; (adr r3, d4780 <_Z19get_compass_headingv+0x368>)
   d44de:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44e2:	ec41 0b18 	vmov	d8, r0, r1
   d44e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d44ea:	f007 fef1 	bl	dc2d0 <__aeabi_ddiv>
   d44ee:	eeb0 1a48 	vmov.f32	s2, s16
   d44f2:	eef0 1a68 	vmov.f32	s3, s17
   d44f6:	ec41 0b10 	vmov	d0, r0, r1
   d44fa:	f005 f825 	bl	d9548 <atan2>
   d44fe:	ec53 2b10 	vmov	r2, r3, d0
   d4502:	ee10 0a10 	vmov	r0, s0
   d4506:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   d450a:	2200      	movs	r2, #0
   d450c:	4ba8      	ldr	r3, [pc, #672]	; (d47b0 <_Z19get_compass_headingv+0x398>)
   d450e:	f007 fdb5 	bl	dc07c <__aeabi_dmul>
   d4512:	a39d      	add	r3, pc, #628	; (adr r3, d4788 <_Z19get_compass_headingv+0x370>)
   d4514:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4518:	f007 feda 	bl	dc2d0 <__aeabi_ddiv>
   d451c:	2200      	movs	r2, #0
   d451e:	4ba5      	ldr	r3, [pc, #660]	; (d47b4 <_Z19get_compass_headingv+0x39c>)
   d4520:	f007 fdac 	bl	dc07c <__aeabi_dmul>
   d4524:	f008 f8a2 	bl	dc66c <__aeabi_d2f>
phiFnew=.95*phiFold+.05*phiM;
   d4528:	4ba3      	ldr	r3, [pc, #652]	; (d47b8 <_Z19get_compass_headingv+0x3a0>)
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d452a:	f8ca 0000 	str.w	r0, [sl]
   d452e:	4606      	mov	r6, r0
phiFnew=.95*phiFold+.05*phiM;
   d4530:	6818      	ldr	r0, [r3, #0]
   d4532:	f007 fd4b 	bl	dbfcc <__aeabi_f2d>
   d4536:	a396      	add	r3, pc, #600	; (adr r3, d4790 <_Z19get_compass_headingv+0x378>)
   d4538:	e9d3 2300 	ldrd	r2, r3, [r3]
   d453c:	f007 fd9e 	bl	dc07c <__aeabi_dmul>
   d4540:	4604      	mov	r4, r0
   d4542:	4630      	mov	r0, r6
   d4544:	460d      	mov	r5, r1
   d4546:	f007 fd41 	bl	dbfcc <__aeabi_f2d>
   d454a:	a393      	add	r3, pc, #588	; (adr r3, d4798 <_Z19get_compass_headingv+0x380>)
   d454c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4550:	f007 fd94 	bl	dc07c <__aeabi_dmul>
   d4554:	4602      	mov	r2, r0
   d4556:	460b      	mov	r3, r1
   d4558:	4620      	mov	r0, r4
   d455a:	4629      	mov	r1, r5
   d455c:	f007 fbd8 	bl	dbd10 <__adddf3>
   d4560:	f008 f884 	bl	dc66c <__aeabi_d2f>
   d4564:	4995      	ldr	r1, [pc, #596]	; (d47bc <_Z19get_compass_headingv+0x3a4>)
   d4566:	6008      	str	r0, [r1, #0]
thetaFnew=.95*thetaFold+.05*thetaM;
   d4568:	4895      	ldr	r0, [pc, #596]	; (d47c0 <_Z19get_compass_headingv+0x3a8>)
   d456a:	6800      	ldr	r0, [r0, #0]
   d456c:	f007 fd2e 	bl	dbfcc <__aeabi_f2d>
   d4570:	a387      	add	r3, pc, #540	; (adr r3, d4790 <_Z19get_compass_headingv+0x378>)
   d4572:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4576:	f007 fd81 	bl	dc07c <__aeabi_dmul>
   d457a:	4604      	mov	r4, r0
   d457c:	f8d8 0000 	ldr.w	r0, [r8]
   d4580:	460d      	mov	r5, r1
   d4582:	f007 fd23 	bl	dbfcc <__aeabi_f2d>
   d4586:	a384      	add	r3, pc, #528	; (adr r3, d4798 <_Z19get_compass_headingv+0x380>)
   d4588:	e9d3 2300 	ldrd	r2, r3, [r3]
   d458c:	f007 fd76 	bl	dc07c <__aeabi_dmul>
   d4590:	4602      	mov	r2, r0
   d4592:	460b      	mov	r3, r1
   d4594:	4620      	mov	r0, r4
   d4596:	4629      	mov	r1, r5
   d4598:	f007 fbba 	bl	dbd10 <__adddf3>
   d459c:	f008 f866 	bl	dc66c <__aeabi_d2f>
   d45a0:	4c88      	ldr	r4, [pc, #544]	; (d47c4 <_Z19get_compass_headingv+0x3ac>)
dt=(millis()-millisOld)/1000.;
   d45a2:	4d89      	ldr	r5, [pc, #548]	; (d47c8 <_Z19get_compass_headingv+0x3b0>)
thetaFnew=.95*thetaFold+.05*thetaM;
   d45a4:	6020      	str	r0, [r4, #0]
   d45a6:	f003 fc87 	bl	d7eb8 <HAL_Timer_Get_Milli_Seconds>
dt=(millis()-millisOld)/1000.;
   d45aa:	682b      	ldr	r3, [r5, #0]
   d45ac:	4c87      	ldr	r4, [pc, #540]	; (d47cc <_Z19get_compass_headingv+0x3b4>)
   d45ae:	1ac0      	subs	r0, r0, r3
   d45b0:	f007 fcea 	bl	dbf88 <__aeabi_ui2d>
   d45b4:	4b86      	ldr	r3, [pc, #536]	; (d47d0 <_Z19get_compass_headingv+0x3b8>)
   d45b6:	2200      	movs	r2, #0
   d45b8:	f007 fe8a 	bl	dc2d0 <__aeabi_ddiv>
   d45bc:	f008 f856 	bl	dc66c <__aeabi_d2f>
   d45c0:	6020      	str	r0, [r4, #0]
   d45c2:	f003 fc79 	bl	d7eb8 <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
   d45c6:	6028      	str	r0, [r5, #0]
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   d45c8:	6820      	ldr	r0, [r4, #0]
   d45ca:	f007 fcff 	bl	dbfcc <__aeabi_f2d>
   d45ce:	4602      	mov	r2, r0
   d45d0:	460b      	mov	r3, r1
   d45d2:	ec43 2b1a 	vmov	d10, r2, r3
   d45d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   d45da:	f007 fd4f 	bl	dc07c <__aeabi_dmul>
   d45de:	4606      	mov	r6, r0
   d45e0:	460f      	mov	r7, r1
   d45e2:	f8d9 0000 	ldr.w	r0, [r9]
   d45e6:	f007 fcf1 	bl	dbfcc <__aeabi_f2d>
   d45ea:	4632      	mov	r2, r6
   d45ec:	463b      	mov	r3, r7
   d45ee:	f007 fb8f 	bl	dbd10 <__adddf3>
   d45f2:	a367      	add	r3, pc, #412	; (adr r3, d4790 <_Z19get_compass_headingv+0x378>)
   d45f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45f8:	f007 fd40 	bl	dc07c <__aeabi_dmul>
   d45fc:	4604      	mov	r4, r0
   d45fe:	f8d8 0000 	ldr.w	r0, [r8]
   d4602:	460d      	mov	r5, r1
   d4604:	f007 fce2 	bl	dbfcc <__aeabi_f2d>
   d4608:	a363      	add	r3, pc, #396	; (adr r3, d4798 <_Z19get_compass_headingv+0x380>)
   d460a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d460e:	f007 fd35 	bl	dc07c <__aeabi_dmul>
   d4612:	4602      	mov	r2, r0
   d4614:	460b      	mov	r3, r1
   d4616:	4620      	mov	r0, r4
   d4618:	4629      	mov	r1, r5
   d461a:	f007 fb79 	bl	dbd10 <__adddf3>
   d461e:	f008 f825 	bl	dc66c <__aeabi_d2f>
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d4622:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   d4626:	ee08 0a90 	vmov	s17, r0
   d462a:	f8c9 0000 	str.w	r0, [r9]
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d462e:	ec51 0b1a 	vmov	r0, r1, d10
   d4632:	f007 fd23 	bl	dc07c <__aeabi_dmul>
   d4636:	4604      	mov	r4, r0
   d4638:	460d      	mov	r5, r1
   d463a:	f8db 0000 	ldr.w	r0, [fp]
   d463e:	f007 fcc5 	bl	dbfcc <__aeabi_f2d>
   d4642:	4622      	mov	r2, r4
   d4644:	462b      	mov	r3, r5
   d4646:	f007 fb61 	bl	dbd0c <__aeabi_dsub>
   d464a:	a351      	add	r3, pc, #324	; (adr r3, d4790 <_Z19get_compass_headingv+0x378>)
   d464c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4650:	f007 fd14 	bl	dc07c <__aeabi_dmul>
   d4654:	4680      	mov	r8, r0
   d4656:	f8da 0000 	ldr.w	r0, [sl]
   d465a:	4689      	mov	r9, r1
   d465c:	f007 fcb6 	bl	dbfcc <__aeabi_f2d>
   d4660:	a34d      	add	r3, pc, #308	; (adr r3, d4798 <_Z19get_compass_headingv+0x380>)
   d4662:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4666:	f007 fd09 	bl	dc07c <__aeabi_dmul>
   d466a:	4602      	mov	r2, r0
   d466c:	460b      	mov	r3, r1
   d466e:	4640      	mov	r0, r8
   d4670:	4649      	mov	r1, r9
   d4672:	f007 fb4d 	bl	dbd10 <__adddf3>
   d4676:	f007 fff9 	bl	dc66c <__aeabi_d2f>
thetaG=thetaG+gyr.y()*dt;
   d467a:	f8df 8174 	ldr.w	r8, [pc, #372]	; d47f0 <_Z19get_compass_headingv+0x3d8>
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d467e:	f8cb 0000 	str.w	r0, [fp]
   d4682:	ee08 0a10 	vmov	s16, r0
thetaG=thetaG+gyr.y()*dt;
   d4686:	f8d8 0000 	ldr.w	r0, [r8]
   d468a:	f007 fc9f 	bl	dbfcc <__aeabi_f2d>
   d468e:	4632      	mov	r2, r6
   d4690:	463b      	mov	r3, r7
   d4692:	f007 fb3d 	bl	dbd10 <__adddf3>
   d4696:	f007 ffe9 	bl	dc66c <__aeabi_d2f>
phiG=phiG-gyr.x()*dt;
   d469a:	4e4e      	ldr	r6, [pc, #312]	; (d47d4 <_Z19get_compass_headingv+0x3bc>)
thetaG=thetaG+gyr.y()*dt;
   d469c:	f8c8 0000 	str.w	r0, [r8]
phiG=phiG-gyr.x()*dt;
   d46a0:	6830      	ldr	r0, [r6, #0]
   d46a2:	f007 fc93 	bl	dbfcc <__aeabi_f2d>
   d46a6:	4622      	mov	r2, r4
   d46a8:	462b      	mov	r3, r5
   d46aa:	f007 fb2f 	bl	dbd0c <__aeabi_dsub>
   d46ae:	f007 ffdd 	bl	dc66c <__aeabi_d2f>
phiRad=phi/360*(2*3.14);
   d46b2:	eec8 7a09 	vdiv.f32	s15, s16, s18
phiG=phiG-gyr.x()*dt;
   d46b6:	6030      	str	r0, [r6, #0]
phiRad=phi/360*(2*3.14);
   d46b8:	ee17 0a90 	vmov	r0, s15
   d46bc:	f007 fc86 	bl	dbfcc <__aeabi_f2d>
   d46c0:	a337      	add	r3, pc, #220	; (adr r3, d47a0 <_Z19get_compass_headingv+0x388>)
   d46c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46c6:	f007 fcd9 	bl	dc07c <__aeabi_dmul>
   d46ca:	f007 ffcf 	bl	dc66c <__aeabi_d2f>
thetaRad=theta/360*(2*3.14);
   d46ce:	eec8 7a89 	vdiv.f32	s15, s17, s18
phiRad=phi/360*(2*3.14);
   d46d2:	4b41      	ldr	r3, [pc, #260]	; (d47d8 <_Z19get_compass_headingv+0x3c0>)
   d46d4:	6018      	str	r0, [r3, #0]
   d46d6:	ee08 0a10 	vmov	s16, r0
thetaRad=theta/360*(2*3.14);
   d46da:	ee17 0a90 	vmov	r0, s15
   d46de:	f007 fc75 	bl	dbfcc <__aeabi_f2d>
   d46e2:	a32f      	add	r3, pc, #188	; (adr r3, d47a0 <_Z19get_compass_headingv+0x388>)
   d46e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46e8:	f007 fcc8 	bl	dc07c <__aeabi_dmul>
   d46ec:	f007 ffbe 	bl	dc66c <__aeabi_d2f>
   d46f0:	4b3a      	ldr	r3, [pc, #232]	; (d47dc <_Z19get_compass_headingv+0x3c4>)
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
   d46f2:	ee00 0a10 	vmov	s0, r0
   d46f6:	6018      	str	r0, [r3, #0]
   d46f8:	ee08 0a90 	vmov	s17, r0
   d46fc:	f004 fe92 	bl	d9424 <cosf>
   d4700:	ee10 4a10 	vmov	r4, s0
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
   d4704:	eeb0 0a48 	vmov.f32	s0, s16
   d4708:	f004 fed4 	bl	d94b4 <sinf>
   d470c:	ee10 0a10 	vmov	r0, s0
 
 //tilt compensated x
Xm=mag.x()*cos(thetaRad)-mag.y()*sin(phiRad)*sin(thetaRad)+mag.z()*cos(phiRad)*sin(thetaRad);
   d4710:	f007 fc5c 	bl	dbfcc <__aeabi_f2d>
   d4714:	eeb0 0a68 	vmov.f32	s0, s17
   d4718:	ec41 0b1a 	vmov	d10, r0, r1
   d471c:	f004 feca 	bl	d94b4 <sinf>
   d4720:	ee10 0a10 	vmov	r0, s0
   d4724:	f007 fc52 	bl	dbfcc <__aeabi_f2d>
   d4728:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
  { return __builtin_cosf(__x); }
   d472c:	eeb0 0a48 	vmov.f32	s0, s16
   d4730:	eeb0 ba47 	vmov.f32	s22, s14
   d4734:	eef0 ba67 	vmov.f32	s23, s15
   d4738:	4606      	mov	r6, r0
   d473a:	460f      	mov	r7, r1
   d473c:	f004 fe72 	bl	d9424 <cosf>
   d4740:	ee10 0a10 	vmov	r0, s0
   d4744:	f007 fc42 	bl	dbfcc <__aeabi_f2d>
   d4748:	4680      	mov	r8, r0
   d474a:	4620      	mov	r0, r4
   d474c:	4689      	mov	r9, r1
   d474e:	f007 fc3d 	bl	dbfcc <__aeabi_f2d>
   d4752:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d4756:	f007 fc91 	bl	dc07c <__aeabi_dmul>
   d475a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   d475e:	ec53 2b1a 	vmov	r2, r3, d10
   d4762:	4604      	mov	r4, r0
   d4764:	460d      	mov	r5, r1
   d4766:	4650      	mov	r0, sl
   d4768:	4659      	mov	r1, fp
   d476a:	f007 fc87 	bl	dc07c <__aeabi_dmul>
   d476e:	4632      	mov	r2, r6
   d4770:	463b      	mov	r3, r7
   d4772:	f007 fc83 	bl	dc07c <__aeabi_dmul>
   d4776:	4602      	mov	r2, r0
   d4778:	460b      	mov	r3, r1
   d477a:	4620      	mov	r0, r4
   d477c:	e03a      	b.n	d47f4 <_Z19get_compass_headingv+0x3dc>
   d477e:	bf00      	nop
   d4780:	9999999a 	.word	0x9999999a
   d4784:	40239999 	.word	0x40239999
   d4788:	54524550 	.word	0x54524550
   d478c:	400921fb 	.word	0x400921fb
   d4790:	66666666 	.word	0x66666666
   d4794:	3fee6666 	.word	0x3fee6666
   d4798:	9999999a 	.word	0x9999999a
   d479c:	3fa99999 	.word	0x3fa99999
   d47a0:	51eb851f 	.word	0x51eb851f
   d47a4:	40191eb8 	.word	0x40191eb8
   d47a8:	2003e478 	.word	0x2003e478
   d47ac:	43b40000 	.word	0x43b40000
   d47b0:	3fe00000 	.word	0x3fe00000
   d47b4:	40768000 	.word	0x40768000
   d47b8:	2003e53c 	.word	0x2003e53c
   d47bc:	2003e538 	.word	0x2003e538
   d47c0:	2003e560 	.word	0x2003e560
   d47c4:	2003e55c 	.word	0x2003e55c
   d47c8:	2003e530 	.word	0x2003e530
   d47cc:	2003e4f8 	.word	0x2003e4f8
   d47d0:	408f4000 	.word	0x408f4000
   d47d4:	2003e540 	.word	0x2003e540
   d47d8:	2003e548 	.word	0x2003e548
   d47dc:	2003e56c 	.word	0x2003e56c
   d47e0:	2003e568 	.word	0x2003e568
   d47e4:	2003e544 	.word	0x2003e544
   d47e8:	2003e558 	.word	0x2003e558
   d47ec:	2003e534 	.word	0x2003e534
   d47f0:	2003e564 	.word	0x2003e564
   d47f4:	4629      	mov	r1, r5
   d47f6:	f007 fa89 	bl	dbd0c <__aeabi_dsub>
   d47fa:	4642      	mov	r2, r8
   d47fc:	4604      	mov	r4, r0
   d47fe:	460d      	mov	r5, r1
   d4800:	464b      	mov	r3, r9
   d4802:	ec51 0b1b 	vmov	r0, r1, d11
   d4806:	f007 fc39 	bl	dc07c <__aeabi_dmul>
   d480a:	4632      	mov	r2, r6
   d480c:	463b      	mov	r3, r7
   d480e:	f007 fc35 	bl	dc07c <__aeabi_dmul>
   d4812:	4602      	mov	r2, r0
   d4814:	460b      	mov	r3, r1
   d4816:	4620      	mov	r0, r4
   d4818:	4629      	mov	r1, r5
   d481a:	f007 fa79 	bl	dbd10 <__adddf3>
   d481e:	f007 ff25 	bl	dc66c <__aeabi_d2f>
   d4822:	4b2b      	ldr	r3, [pc, #172]	; (d48d0 <_Z19get_compass_headingv+0x4b8>)
   d4824:	ee08 0a10 	vmov	s16, r0
   d4828:	6018      	str	r0, [r3, #0]
//tilt compensated y
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
   d482a:	4642      	mov	r2, r8
   d482c:	464b      	mov	r3, r9
   d482e:	4650      	mov	r0, sl
   d4830:	4659      	mov	r1, fp
   d4832:	f007 fc23 	bl	dc07c <__aeabi_dmul>
   d4836:	ec53 2b1b 	vmov	r2, r3, d11
   d483a:	4604      	mov	r4, r0
   d483c:	460d      	mov	r5, r1
   d483e:	ec51 0b1a 	vmov	r0, r1, d10
   d4842:	f007 fc1b 	bl	dc07c <__aeabi_dmul>
   d4846:	4602      	mov	r2, r0
   d4848:	460b      	mov	r3, r1
   d484a:	4620      	mov	r0, r4
   d484c:	4629      	mov	r1, r5
   d484e:	f007 fa5f 	bl	dbd10 <__adddf3>
   d4852:	f007 ff0b 	bl	dc66c <__aeabi_d2f>
   d4856:	4b1f      	ldr	r3, [pc, #124]	; (d48d4 <_Z19get_compass_headingv+0x4bc>)
// Serial.print(phi);
// Serial.print(",");
// Serial.println(psi);
 
phiFold=phiFnew;
thetaFold=thetaFnew;
   d4858:	4c1f      	ldr	r4, [pc, #124]	; (d48d8 <_Z19get_compass_headingv+0x4c0>)
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
   d485a:	6018      	str	r0, [r3, #0]
  { return __builtin_atan2f(__y, __x); }
   d485c:	eef0 0a48 	vmov.f32	s1, s16
   d4860:	ee00 0a10 	vmov	s0, r0
   d4864:	f005 f82a 	bl	d98bc <atan2f>
phiFold=phiFnew;
   d4868:	491c      	ldr	r1, [pc, #112]	; (d48dc <_Z19get_compass_headingv+0x4c4>)
   d486a:	4a1d      	ldr	r2, [pc, #116]	; (d48e0 <_Z19get_compass_headingv+0x4c8>)
   d486c:	680b      	ldr	r3, [r1, #0]
   d486e:	6013      	str	r3, [r2, #0]
thetaFold=thetaFnew;
   d4870:	4a1c      	ldr	r2, [pc, #112]	; (d48e4 <_Z19get_compass_headingv+0x4cc>)
   d4872:	6823      	ldr	r3, [r4, #0]
   d4874:	6013      	str	r3, [r2, #0]
   d4876:	ee10 0a10 	vmov	r0, s0
psi=atan2(Ym,Xm)/(2*3.14)*360;
   d487a:	f007 fba7 	bl	dbfcc <__aeabi_f2d>
   d487e:	a312      	add	r3, pc, #72	; (adr r3, d48c8 <_Z19get_compass_headingv+0x4b0>)
   d4880:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4884:	f007 fd24 	bl	dc2d0 <__aeabi_ddiv>
   d4888:	4b17      	ldr	r3, [pc, #92]	; (d48e8 <_Z19get_compass_headingv+0x4d0>)
   d488a:	2200      	movs	r2, #0
   d488c:	f007 fbf6 	bl	dc07c <__aeabi_dmul>
   d4890:	f007 feec 	bl	dc66c <__aeabi_d2f>
 psi = psi + 180;
   d4894:	eddf 7a15 	vldr	s15, [pc, #84]	; d48ec <_Z19get_compass_headingv+0x4d4>
   d4898:	4b15      	ldr	r3, [pc, #84]	; (d48f0 <_Z19get_compass_headingv+0x4d8>)
   d489a:	ee07 0a10 	vmov	s14, r0
   d489e:	ee77 7a27 	vadd.f32	s15, s14, s15
 if(psi >= 360) {
   d48a2:	eef4 7ac9 	vcmpe.f32	s15, s18
   d48a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   psi = psi -360;
   d48aa:	bfa8      	it	ge
   d48ac:	ee77 7ac9 	vsubge.f32	s15, s15, s18
   d48b0:	edc3 7a00 	vstr	s15, [r3]
 }
 return(psi);
//delay(BNO055_SAMPLERATE_DELAY_MS);
}
   d48b4:	ed93 0a00 	vldr	s0, [r3]
   d48b8:	b017      	add	sp, #92	; 0x5c
   d48ba:	ecbd 8b08 	vpop	{d8-d11}
   d48be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d48c2:	bf00      	nop
   d48c4:	f3af 8000 	nop.w
   d48c8:	51eb851f 	.word	0x51eb851f
   d48cc:	40191eb8 	.word	0x40191eb8
   d48d0:	2003e41c 	.word	0x2003e41c
   d48d4:	2003e420 	.word	0x2003e420
   d48d8:	2003e55c 	.word	0x2003e55c
   d48dc:	2003e538 	.word	0x2003e538
   d48e0:	2003e53c 	.word	0x2003e53c
   d48e4:	2003e560 	.word	0x2003e560
   d48e8:	40768000 	.word	0x40768000
   d48ec:	43340000 	.word	0x43340000
   d48f0:	2003e550 	.word	0x2003e550

000d48f4 <_Z11eeprom_testv>:

void eeprom_test(){
   d48f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t max_addr;
  //variables for calibration read from memory
int test = 55;
      // Try to determine the size by writing a value and seeing if it changes the first byte
  Serial.println("Testing size!");
   d48f8:	f004 fa64 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d48fc:	492e      	ldr	r1, [pc, #184]	; (d49b8 <_Z11eeprom_testv+0xc4>)
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
    if (i2ceeprom.read(max_addr) != test)
   d48fe:	4d2f      	ldr	r5, [pc, #188]	; (d49bc <_Z11eeprom_testv+0xc8>)
    // read address 0x0 again
    uint8_t val0 = i2ceeprom.read(0);

    // re-write the old value
    if (! i2ceeprom.write(max_addr, test)) {
        Serial.print("Failed to re-write address 0x");
   d4900:	f8df 80c8 	ldr.w	r8, [pc, #200]	; d49cc <_Z11eeprom_testv+0xd8>
        Serial.print("Failed to write address 0x");
   d4904:	f8df 90c8 	ldr.w	r9, [pc, #200]	; d49d0 <_Z11eeprom_testv+0xdc>
  Serial.println("Testing size!");
   d4908:	f003 ff25 	bl	d8756 <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
   d490c:	2401      	movs	r4, #1
    if (i2ceeprom.read(max_addr) != test)
   d490e:	b2a7      	uxth	r7, r4
   d4910:	482a      	ldr	r0, [pc, #168]	; (d49bc <_Z11eeprom_testv+0xc8>)
   d4912:	4639      	mov	r1, r7
   d4914:	f003 f92e 	bl	d7b74 <_ZN19Adafruit_EEPROM_I2C4readEt>
   d4918:	2837      	cmp	r0, #55	; 0x37
   d491a:	d147      	bne.n	d49ac <_Z11eeprom_testv+0xb8>
    if (! i2ceeprom.write(max_addr, (byte)~test)) {
   d491c:	22c8      	movs	r2, #200	; 0xc8
   d491e:	4639      	mov	r1, r7
   d4920:	4628      	mov	r0, r5
   d4922:	f003 f905 	bl	d7b30 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   d4926:	b970      	cbnz	r0, d4946 <_Z11eeprom_testv+0x52>
        Serial.print("Failed to write address 0x");
   d4928:	f004 fa4c 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d492c:	4649      	mov	r1, r9
   d492e:	f003 feff 	bl	d8730 <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   d4932:	f004 fa47 	bl	d8dc4 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4936:	2210      	movs	r2, #16
   d4938:	4606      	mov	r6, r0
   d493a:	4621      	mov	r1, r4
   d493c:	f003 ff17 	bl	d876e <_ZN5Print11printNumberEmh>
        n += println();
   d4940:	4630      	mov	r0, r6
   d4942:	f003 fefc 	bl	d873e <_ZN5Print7printlnEv>
    uint8_t val0 = i2ceeprom.read(0);
   d4946:	2100      	movs	r1, #0
   d4948:	4628      	mov	r0, r5
   d494a:	f003 f913 	bl	d7b74 <_ZN19Adafruit_EEPROM_I2C4readEt>
    if (! i2ceeprom.write(max_addr, test)) {
   d494e:	2237      	movs	r2, #55	; 0x37
    uint8_t val0 = i2ceeprom.read(0);
   d4950:	4606      	mov	r6, r0
    if (! i2ceeprom.write(max_addr, test)) {
   d4952:	4639      	mov	r1, r7
   d4954:	4628      	mov	r0, r5
   d4956:	f003 f8eb 	bl	d7b30 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   d495a:	b970      	cbnz	r0, d497a <_Z11eeprom_testv+0x86>
        Serial.print("Failed to re-write address 0x");
   d495c:	f004 fa32 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4960:	4641      	mov	r1, r8
   d4962:	f003 fee5 	bl	d8730 <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   d4966:	f004 fa2d 	bl	d8dc4 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d496a:	2210      	movs	r2, #16
   d496c:	4607      	mov	r7, r0
   d496e:	4621      	mov	r1, r4
   d4970:	f003 fefd 	bl	d876e <_ZN5Print11printNumberEmh>
        n += println();
   d4974:	4638      	mov	r0, r7
   d4976:	f003 fee2 	bl	d873e <_ZN5Print7printlnEv>
    }    

    // check if addr 0 was changed
    if (val0 == (byte)~test) {
   d497a:	2ec8      	cmp	r6, #200	; 0xc8
   d497c:	d116      	bne.n	d49ac <_Z11eeprom_testv+0xb8>
      Serial.println("Found max address");
   d497e:	f004 fa21 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4982:	490f      	ldr	r1, [pc, #60]	; (d49c0 <_Z11eeprom_testv+0xcc>)
   d4984:	f003 fee7 	bl	d8756 <_ZN5Print7printlnEPKc>
      break;
    }
  }
  Serial.print("This EEPROM can store ");
   d4988:	f004 fa1c 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d498c:	490d      	ldr	r1, [pc, #52]	; (d49c4 <_Z11eeprom_testv+0xd0>)
   d498e:	f003 fecf 	bl	d8730 <_ZN5Print5printEPKc>
  Serial.print(max_addr);
   d4992:	f004 fa17 	bl	d8dc4 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4996:	4621      	mov	r1, r4
   d4998:	220a      	movs	r2, #10
   d499a:	f003 fee8 	bl	d876e <_ZN5Print11printNumberEmh>
  Serial.println(" bytes");
   d499e:	f004 fa11 	bl	d8dc4 <_Z16_fetch_usbserialv>
}
   d49a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.println(" bytes");
   d49a6:	4908      	ldr	r1, [pc, #32]	; (d49c8 <_Z11eeprom_testv+0xd4>)
   d49a8:	f003 bed5 	b.w	d8756 <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
   d49ac:	3401      	adds	r4, #1
   d49ae:	f647 73ff 	movw	r3, #32767	; 0x7fff
   d49b2:	429c      	cmp	r4, r3
   d49b4:	d1ab      	bne.n	d490e <_Z11eeprom_testv+0x1a>
   d49b6:	e7e7      	b.n	d4988 <_Z11eeprom_testv+0x94>
   d49b8:	000dcf8c 	.word	0x000dcf8c
   d49bc:	2003e510 	.word	0x2003e510
   d49c0:	000dcfd3 	.word	0x000dcfd3
   d49c4:	000dcfe5 	.word	0x000dcfe5
   d49c8:	000dcffc 	.word	0x000dcffc
   d49cc:	000dcfb5 	.word	0x000dcfb5
   d49d0:	000dcf9a 	.word	0x000dcf9a
   d49d4:	00000000 	.word	0x00000000

000d49d8 <_Z18measure_wind_speedv>:

float measure_wind_speed() {
   d49d8:	b510      	push	{r4, lr}
   d49da:	f003 fa6d 	bl	d7eb8 <HAL_Timer_Get_Milli_Seconds>
uint16_t wind_speed_time_interval= 60000; //value in ms
uint32_t wind_speed_time = 0;
float WindSpeed = 0;
if ((millis() - wind_speed_time) > wind_speed_time_interval) {
   d49de:	f64e 2360 	movw	r3, #60000	; 0xea60
   d49e2:	4298      	cmp	r0, r3
   d49e4:	d911      	bls.n	d4a0a <_Z18measure_wind_speedv+0x32>
// Only update the display if change greater than 2 degrees.
  wind_speed_time = millis();
  WindSpeed = Rotations * 0.0375;
   d49e6:	4c0c      	ldr	r4, [pc, #48]	; (d4a18 <_Z18measure_wind_speedv+0x40>)
   d49e8:	f003 fa66 	bl	d7eb8 <HAL_Timer_Get_Milli_Seconds>
   d49ec:	6820      	ldr	r0, [r4, #0]
   d49ee:	f007 facb 	bl	dbf88 <__aeabi_ui2d>
   d49f2:	a307      	add	r3, pc, #28	; (adr r3, d4a10 <_Z18measure_wind_speedv+0x38>)
   d49f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49f8:	f007 fb40 	bl	dc07c <__aeabi_dmul>
   d49fc:	f007 fe36 	bl	dc66c <__aeabi_d2f>
Rotations = 0;  // Set Rotations count to 0 ready for calculations
   d4a00:	2300      	movs	r3, #0
  WindSpeed = Rotations * 0.0375;
   d4a02:	ee00 0a10 	vmov	s0, r0
Rotations = 0;  // Set Rotations count to 0 ready for calculations
   d4a06:	6023      	str	r3, [r4, #0]
// convert to mph using the formula V=P(2.25/T)
// V = P(2.25/3) = P * 0.75
}
return WindSpeed;
}
   d4a08:	bd10      	pop	{r4, pc}
float WindSpeed = 0;
   d4a0a:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4a1c <_Z18measure_wind_speedv+0x44>
return WindSpeed;
   d4a0e:	e7fb      	b.n	d4a08 <_Z18measure_wind_speedv+0x30>
   d4a10:	33333333 	.word	0x33333333
   d4a14:	3fa33333 	.word	0x3fa33333
   d4a18:	2003e414 	.word	0x2003e414
   d4a1c:	00000000 	.word	0x00000000

000d4a20 <_Z22measure_wind_directionv>:

int measure_wind_direction(){
   d4a20:	b507      	push	{r0, r1, r2, lr}
int VaneValue;// raw analog value from wind vane
int Direction;// translated 0 - 360 direction
int CalDirection;// converted value with offset applied
//int LastValue = 0;
VaneValue = analogRead(vane_pin);
   d4a22:	4b0d      	ldr	r3, [pc, #52]	; (d4a58 <_Z22measure_wind_directionv+0x38>)
   d4a24:	7818      	ldrb	r0, [r3, #0]
   d4a26:	f004 fc8e 	bl	d9346 <analogRead>
//digitalWrite(vane_switch, LOW);
//Serial.println("analog read value = ");
//Serial.print(VaneValue);
Direction = map(VaneValue, 0, 4095, 0, 360);
   d4a2a:	f44f 73b4 	mov.w	r3, #360	; 0x168
   d4a2e:	9300      	str	r3, [sp, #0]
   d4a30:	2300      	movs	r3, #0
   d4a32:	f640 72ff 	movw	r2, #4095	; 0xfff
   d4a36:	4619      	mov	r1, r3
   d4a38:	f004 f83c 	bl	d8ab4 <_Z3mapiiiii>
CalDirection = Direction + Offset;

if(CalDirection > 360)
   d4a3c:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
   d4a40:	dd04      	ble.n	d4a4c <_Z22measure_wind_directionv+0x2c>
CalDirection = CalDirection - 360;
   d4a42:	f5a0 70b4 	sub.w	r0, r0, #360	; 0x168
  // getHeading(CalDirection);
  // LastValue = CalDirection;
  // }

return CalDirection;
}
   d4a46:	b003      	add	sp, #12
   d4a48:	f85d fb04 	ldr.w	pc, [sp], #4
if(CalDirection < 0)
   d4a4c:	2800      	cmp	r0, #0
CalDirection = CalDirection + 360;
   d4a4e:	bfb8      	it	lt
   d4a50:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
return CalDirection;
   d4a54:	e7f7      	b.n	d4a46 <_Z22measure_wind_directionv+0x26>
   d4a56:	bf00      	nop
   d4a58:	2003e399 	.word	0x2003e399

000d4a5c <_Z16calculateHeadingi>:
Serial.println("NW");
else
Serial.println("N");
} 

String calculateHeading(int direction) {
   d4a5c:	b538      	push	{r3, r4, r5, lr}
   d4a5e:	460d      	mov	r5, r1
  String heading = "xx";
   d4a60:	4914      	ldr	r1, [pc, #80]	; (d4ab4 <_Z16calculateHeadingi+0x58>)
String calculateHeading(int direction) {
   d4a62:	4604      	mov	r4, r0
  String heading = "xx";
   d4a64:	f003 fde9 	bl	d863a <_ZN6StringC1EPKc>
if(direction < 22)
   d4a68:	2d15      	cmp	r5, #21
   d4a6a:	dc05      	bgt.n	d4a78 <_Z16calculateHeadingi+0x1c>
heading = "N";
   d4a6c:	4912      	ldr	r1, [pc, #72]	; (d4ab8 <_Z16calculateHeadingi+0x5c>)
else if (direction < 247)
heading = "SW";
else if (direction < 292)
heading = "W";
else if (direction < 337)
heading = "NW";
   d4a6e:	4620      	mov	r0, r4
   d4a70:	f003 fe1c 	bl	d86ac <_ZN6StringaSEPKc>
else
heading = "N";

return heading;
} 
   d4a74:	4620      	mov	r0, r4
   d4a76:	bd38      	pop	{r3, r4, r5, pc}
else if (direction < 67)
   d4a78:	2d42      	cmp	r5, #66	; 0x42
   d4a7a:	dc01      	bgt.n	d4a80 <_Z16calculateHeadingi+0x24>
heading = "NE";
   d4a7c:	490f      	ldr	r1, [pc, #60]	; (d4abc <_Z16calculateHeadingi+0x60>)
   d4a7e:	e7f6      	b.n	d4a6e <_Z16calculateHeadingi+0x12>
else if (direction < 112)
   d4a80:	2d6f      	cmp	r5, #111	; 0x6f
   d4a82:	dc01      	bgt.n	d4a88 <_Z16calculateHeadingi+0x2c>
heading = "E";
   d4a84:	490e      	ldr	r1, [pc, #56]	; (d4ac0 <_Z16calculateHeadingi+0x64>)
   d4a86:	e7f2      	b.n	d4a6e <_Z16calculateHeadingi+0x12>
else if (direction < 157)
   d4a88:	2d9c      	cmp	r5, #156	; 0x9c
   d4a8a:	dc01      	bgt.n	d4a90 <_Z16calculateHeadingi+0x34>
heading = "SE";
   d4a8c:	490d      	ldr	r1, [pc, #52]	; (d4ac4 <_Z16calculateHeadingi+0x68>)
   d4a8e:	e7ee      	b.n	d4a6e <_Z16calculateHeadingi+0x12>
else if (direction < 212)
   d4a90:	2dd3      	cmp	r5, #211	; 0xd3
   d4a92:	dc01      	bgt.n	d4a98 <_Z16calculateHeadingi+0x3c>
heading = "S";
   d4a94:	490c      	ldr	r1, [pc, #48]	; (d4ac8 <_Z16calculateHeadingi+0x6c>)
   d4a96:	e7ea      	b.n	d4a6e <_Z16calculateHeadingi+0x12>
else if (direction < 247)
   d4a98:	2df6      	cmp	r5, #246	; 0xf6
   d4a9a:	dc01      	bgt.n	d4aa0 <_Z16calculateHeadingi+0x44>
heading = "SW";
   d4a9c:	490b      	ldr	r1, [pc, #44]	; (d4acc <_Z16calculateHeadingi+0x70>)
   d4a9e:	e7e6      	b.n	d4a6e <_Z16calculateHeadingi+0x12>
else if (direction < 292)
   d4aa0:	f5b5 7f92 	cmp.w	r5, #292	; 0x124
   d4aa4:	da01      	bge.n	d4aaa <_Z16calculateHeadingi+0x4e>
heading = "W";
   d4aa6:	490a      	ldr	r1, [pc, #40]	; (d4ad0 <_Z16calculateHeadingi+0x74>)
   d4aa8:	e7e1      	b.n	d4a6e <_Z16calculateHeadingi+0x12>
else if (direction < 337)
   d4aaa:	f5b5 7fa8 	cmp.w	r5, #336	; 0x150
   d4aae:	dcdd      	bgt.n	d4a6c <_Z16calculateHeadingi+0x10>
heading = "NW";
   d4ab0:	4908      	ldr	r1, [pc, #32]	; (d4ad4 <_Z16calculateHeadingi+0x78>)
   d4ab2:	e7dc      	b.n	d4a6e <_Z16calculateHeadingi+0x12>
   d4ab4:	000dcf17 	.word	0x000dcf17
   d4ab8:	000dd003 	.word	0x000dd003
   d4abc:	000dd005 	.word	0x000dd005
   d4ac0:	000dd006 	.word	0x000dd006
   d4ac4:	000dd008 	.word	0x000dd008
   d4ac8:	000dd00b 	.word	0x000dd00b
   d4acc:	000dd00d 	.word	0x000dd00d
   d4ad0:	000dd011 	.word	0x000dd011
   d4ad4:	000dd010 	.word	0x000dd010

000d4ad8 <_Z29measure_current_voltage_powerRfS_S_S_S_>:
  Serial.print(F(", "));
  Serial.print((float)event.orientation.z);
  Serial.println(F(""));
}

void measure_current_voltage_power(float& shuntvoltage, float& busvoltage, float& current_mA, float& loadvoltage, float& power_mW){
   d4ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ada:	4605      	mov	r5, r0


  shuntvoltage = ina219.getShuntVoltage_mV();
   d4adc:	4812      	ldr	r0, [pc, #72]	; (d4b28 <_Z29measure_current_voltage_powerRfS_S_S_S_+0x50>)
void measure_current_voltage_power(float& shuntvoltage, float& busvoltage, float& current_mA, float& loadvoltage, float& power_mW){
   d4ade:	460c      	mov	r4, r1
   d4ae0:	461e      	mov	r6, r3
   d4ae2:	4617      	mov	r7, r2
  shuntvoltage = ina219.getShuntVoltage_mV();
   d4ae4:	f003 f8d4 	bl	d7c90 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv>
  busvoltage = ina219.getBusVoltage_V();
   d4ae8:	480f      	ldr	r0, [pc, #60]	; (d4b28 <_Z29measure_current_voltage_powerRfS_S_S_S_+0x50>)
  shuntvoltage = ina219.getShuntVoltage_mV();
   d4aea:	ed85 0a00 	vstr	s0, [r5]
  busvoltage = ina219.getBusVoltage_V();
   d4aee:	f003 f8e3 	bl	d7cb8 <_ZN15Adafruit_INA21915getBusVoltage_VEv>
  current_mA = ina219.getCurrent_mA();
   d4af2:	480d      	ldr	r0, [pc, #52]	; (d4b28 <_Z29measure_current_voltage_powerRfS_S_S_S_+0x50>)
  busvoltage = ina219.getBusVoltage_V();
   d4af4:	ed84 0a00 	vstr	s0, [r4]
  current_mA = ina219.getCurrent_mA();
   d4af8:	f003 f8f2 	bl	d7ce0 <_ZN15Adafruit_INA21913getCurrent_mAEv>
  power_mW = ina219.getPower_mW();
   d4afc:	480a      	ldr	r0, [pc, #40]	; (d4b28 <_Z29measure_current_voltage_powerRfS_S_S_S_+0x50>)
  current_mA = ina219.getCurrent_mA();
   d4afe:	ed87 0a00 	vstr	s0, [r7]
  power_mW = ina219.getPower_mW();
   d4b02:	f003 f8fc 	bl	d7cfe <_ZN15Adafruit_INA21911getPower_mWEv>
   d4b06:	9b06      	ldr	r3, [sp, #24]
  loadvoltage = busvoltage + (shuntvoltage / 1000);
   d4b08:	ed9f 7a08 	vldr	s14, [pc, #32]	; d4b2c <_Z29measure_current_voltage_powerRfS_S_S_S_+0x54>
  power_mW = ina219.getPower_mW();
   d4b0c:	ed83 0a00 	vstr	s0, [r3]
  loadvoltage = busvoltage + (shuntvoltage / 1000);
   d4b10:	edd5 6a00 	vldr	s13, [r5]
   d4b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
   d4b18:	ed94 7a00 	vldr	s14, [r4]
   d4b1c:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4b20:	edc6 7a00 	vstr	s15, [r6]

}
   d4b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4b26:	bf00      	nop
   d4b28:	2003e518 	.word	0x2003e518
   d4b2c:	447a0000 	.word	0x447a0000

000d4b30 <_Z25get_event_compass_headingv>:
  Serial.print("Power:         "); Serial.print(power_mW); Serial.println(" mW");
  Serial.println("");
}


float get_event_compass_heading(){
   d4b30:	b510      	push	{r4, lr}
   d4b32:	b08a      	sub	sp, #40	; 0x28
sensors_event_t event;
  bno.getEvent(&event);
   d4b34:	a901      	add	r1, sp, #4
   d4b36:	4829      	ldr	r0, [pc, #164]	; (d4bdc <_Z25get_event_compass_headingv+0xac>)
   d4b38:	4c29      	ldr	r4, [pc, #164]	; (d4be0 <_Z25get_event_compass_headingv+0xb0>)
   d4b3a:	f002 f8b5 	bl	d6ca8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  
  /* Display the floating point data */
  Serial.print("X: ");
   d4b3e:	f004 f941 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4b42:	4928      	ldr	r1, [pc, #160]	; (d4be4 <_Z25get_event_compass_headingv+0xb4>)
   d4b44:	f003 fdf4 	bl	d8730 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.x, 4);
   d4b48:	f004 f93c 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4b4c:	ed9d 0a06 	vldr	s0, [sp, #24]
   d4b50:	2104      	movs	r1, #4
   d4b52:	f003 ff23 	bl	d899c <_ZN5Print5printEfi>
  Serial.print("\tY: ");
   d4b56:	f004 f935 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4b5a:	4923      	ldr	r1, [pc, #140]	; (d4be8 <_Z25get_event_compass_headingv+0xb8>)
   d4b5c:	f003 fde8 	bl	d8730 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.y, 4);
   d4b60:	f004 f930 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4b64:	ed9d 0a07 	vldr	s0, [sp, #28]
   d4b68:	2104      	movs	r1, #4
   d4b6a:	f003 ff17 	bl	d899c <_ZN5Print5printEfi>
  Serial.print("\tZ: ");
   d4b6e:	f004 f929 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4b72:	491e      	ldr	r1, [pc, #120]	; (d4bec <_Z25get_event_compass_headingv+0xbc>)
   d4b74:	f003 fddc 	bl	d8730 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.z, 4);
   d4b78:	f004 f924 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4b7c:	ed9d 0a08 	vldr	s0, [sp, #32]
   d4b80:	2104      	movs	r1, #4
   d4b82:	f003 ff0b 	bl	d899c <_ZN5Print5printEfi>
  Serial.println("");
   d4b86:	f004 f91d 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4b8a:	4919      	ldr	r1, [pc, #100]	; (d4bf0 <_Z25get_event_compass_headingv+0xc0>)
   d4b8c:	f003 fde3 	bl	d8756 <_ZN5Print7printlnEPKc>

  Serial.println("\n\n");
   d4b90:	f004 f918 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4b94:	4917      	ldr	r1, [pc, #92]	; (d4bf4 <_Z25get_event_compass_headingv+0xc4>)
   d4b96:	f003 fdde 	bl	d8756 <_ZN5Print7printlnEPKc>

  compass_heading = event.orientation.x + 104;
   d4b9a:	eddd 7a06 	vldr	s15, [sp, #24]
   d4b9e:	ed9f 7a16 	vldr	s14, [pc, #88]	; d4bf8 <_Z25get_event_compass_headingv+0xc8>
   d4ba2:	ee77 7a87 	vadd.f32	s15, s15, s14

  if(compass_heading > 360) {
   d4ba6:	ed9f 7a15 	vldr	s14, [pc, #84]	; d4bfc <_Z25get_event_compass_headingv+0xcc>
   d4baa:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    compass_heading = compass_heading - 360;
   d4bb2:	bfc8      	it	gt
   d4bb4:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
   d4bb8:	edc4 7a00 	vstr	s15, [r4]
  }
  
  Serial.print("compass heading:  ");
   d4bbc:	f004 f902 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4bc0:	490f      	ldr	r1, [pc, #60]	; (d4c00 <_Z25get_event_compass_headingv+0xd0>)
   d4bc2:	f003 fdb5 	bl	d8730 <_ZN5Print5printEPKc>
  Serial.print(compass_heading, 4);
   d4bc6:	f004 f8fd 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4bca:	ed94 0a00 	vldr	s0, [r4]
   d4bce:	2104      	movs	r1, #4
   d4bd0:	f003 fee4 	bl	d899c <_ZN5Print5printEfi>
  return compass_heading;
}
   d4bd4:	ed94 0a00 	vldr	s0, [r4]
   d4bd8:	b00a      	add	sp, #40	; 0x28
   d4bda:	bd10      	pop	{r4, pc}
   d4bdc:	2003e478 	.word	0x2003e478
   d4be0:	2003e494 	.word	0x2003e494
   d4be4:	000dd072 	.word	0x000dd072
   d4be8:	000dd076 	.word	0x000dd076
   d4bec:	000dd07b 	.word	0x000dd07b
   d4bf0:	000dd0cd 	.word	0x000dd0cd
   d4bf4:	000dd080 	.word	0x000dd080
   d4bf8:	42d00000 	.word	0x42d00000
   d4bfc:	43b40000 	.word	0x43b40000
   d4c00:	000dd083 	.word	0x000dd083

000d4c04 <_ZN5Print5printIhLi0EEEjT_i>:
    if (base == 0) {
   d4c04:	b912      	cbnz	r2, d4c0c <_ZN5Print5printIhLi0EEEjT_i+0x8>
        return write(n);
   d4c06:	6803      	ldr	r3, [r0, #0]
   d4c08:	689b      	ldr	r3, [r3, #8]
   d4c0a:	4718      	bx	r3
        return printNumber(val, base) + t;
   d4c0c:	b2d2      	uxtb	r2, r2
   d4c0e:	f003 bdae 	b.w	d876e <_ZN5Print11printNumberEmh>

000d4c12 <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d4c12:	b538      	push	{r3, r4, r5, lr}
   d4c14:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d4c16:	f7ff fff5 	bl	d4c04 <_ZN5Print5printIhLi0EEEjT_i>
   d4c1a:	4604      	mov	r4, r0
        n += println();
   d4c1c:	4628      	mov	r0, r5
   d4c1e:	f003 fd8e 	bl	d873e <_ZN5Print7printlnEv>
    }
   d4c22:	4420      	add	r0, r4
   d4c24:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4c28 <_Z19displaySensorStatusv>:
{
   d4c28:	b513      	push	{r0, r1, r4, lr}
    system_status = self_test_results = system_error = 0;
   d4c2a:	2300      	movs	r3, #0
    Serial.println("");
   d4c2c:	4c21      	ldr	r4, [pc, #132]	; (d4cb4 <_Z19displaySensorStatusv+0x8c>)
    system_status = self_test_results = system_error = 0;
   d4c2e:	f88d 3007 	strb.w	r3, [sp, #7]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   d4c32:	f10d 0206 	add.w	r2, sp, #6
   d4c36:	f10d 0105 	add.w	r1, sp, #5
    system_status = self_test_results = system_error = 0;
   d4c3a:	f88d 3006 	strb.w	r3, [sp, #6]
   d4c3e:	f88d 3005 	strb.w	r3, [sp, #5]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   d4c42:	481d      	ldr	r0, [pc, #116]	; (d4cb8 <_Z19displaySensorStatusv+0x90>)
   d4c44:	f10d 0307 	add.w	r3, sp, #7
   d4c48:	f001 fe9f 	bl	d698a <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>
    Serial.println("");
   d4c4c:	f004 f8ba 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4c50:	4621      	mov	r1, r4
   d4c52:	f003 fd80 	bl	d8756 <_ZN5Print7printlnEPKc>
    Serial.print("System Status: 0x");
   d4c56:	f004 f8b5 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4c5a:	4918      	ldr	r1, [pc, #96]	; (d4cbc <_Z19displaySensorStatusv+0x94>)
   d4c5c:	f003 fd68 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.println(system_status, HEX);
   d4c60:	f004 f8b0 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4c64:	2210      	movs	r2, #16
   d4c66:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d4c6a:	f7ff ffd2 	bl	d4c12 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("Self Test:     0x");
   d4c6e:	f004 f8a9 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4c72:	4913      	ldr	r1, [pc, #76]	; (d4cc0 <_Z19displaySensorStatusv+0x98>)
   d4c74:	f003 fd5c 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.println(self_test_results, HEX);
   d4c78:	f004 f8a4 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4c7c:	2210      	movs	r2, #16
   d4c7e:	f89d 1006 	ldrb.w	r1, [sp, #6]
   d4c82:	f7ff ffc6 	bl	d4c12 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("System Error:  0x");
   d4c86:	f004 f89d 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4c8a:	490e      	ldr	r1, [pc, #56]	; (d4cc4 <_Z19displaySensorStatusv+0x9c>)
   d4c8c:	f003 fd50 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.println(system_error, HEX);
   d4c90:	f004 f898 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4c94:	2210      	movs	r2, #16
   d4c96:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d4c9a:	f7ff ffba 	bl	d4c12 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.println("");
   d4c9e:	f004 f891 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4ca2:	4621      	mov	r1, r4
   d4ca4:	f003 fd57 	bl	d8756 <_ZN5Print7printlnEPKc>
    delay(500);
   d4ca8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4cac:	f003 ff0e 	bl	d8acc <delay>
}
   d4cb0:	b002      	add	sp, #8
   d4cb2:	bd10      	pop	{r4, pc}
   d4cb4:	000dd0cd 	.word	0x000dd0cd
   d4cb8:	2003e478 	.word	0x2003e478
   d4cbc:	000dd096 	.word	0x000dd096
   d4cc0:	000dd0a8 	.word	0x000dd0a8
   d4cc4:	000dd0ba 	.word	0x000dd0ba

000d4cc8 <_GLOBAL__sub_I_i2ceeprom>:
}
   d4cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
Adafruit_EEPROM_I2C i2ceeprom;
   d4cca:	4814      	ldr	r0, [pc, #80]	; (d4d1c <_GLOBAL__sub_I_i2ceeprom+0x54>)
   d4ccc:	f002 ff16 	bl	d7afc <_ZN19Adafruit_EEPROM_I2CC1Ev>
Adafruit_INA219 ina219;
   d4cd0:	2140      	movs	r1, #64	; 0x40
   d4cd2:	4813      	ldr	r0, [pc, #76]	; (d4d20 <_GLOBAL__sub_I_i2ceeprom+0x58>)
   d4cd4:	f002 ff62 	bl	d7b9c <_ZN15Adafruit_INA219C1Eh>
Adafruit_BME280 bme; // I2C
   d4cd8:	4812      	ldr	r0, [pc, #72]	; (d4d24 <_GLOBAL__sub_I_i2ceeprom+0x5c>)
   d4cda:	f000 fd7b 	bl	d57d4 <_ZN15Adafruit_BME280C1Ev>
Adafruit_SH1107 display = Adafruit_SH1107(64, 128, &Wire);
   d4cde:	f004 fb79 	bl	d93d4 <_Z19__fetch_global_Wirev>
   d4ce2:	4a11      	ldr	r2, [pc, #68]	; (d4d28 <_GLOBAL__sub_I_i2ceeprom+0x60>)
   d4ce4:	4911      	ldr	r1, [pc, #68]	; (d4d2c <_GLOBAL__sub_I_i2ceeprom+0x64>)
   d4ce6:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4cea:	f04f 32ff 	mov.w	r2, #4294967295
   d4cee:	4603      	mov	r3, r0
   d4cf0:	9200      	str	r2, [sp, #0]
   d4cf2:	2140      	movs	r1, #64	; 0x40
   d4cf4:	2280      	movs	r2, #128	; 0x80
   d4cf6:	480e      	ldr	r0, [pc, #56]	; (d4d30 <_GLOBAL__sub_I_i2ceeprom+0x68>)
   d4cf8:	f002 fe7a 	bl	d79f0 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d4cfc:	f004 fb6a 	bl	d93d4 <_Z19__fetch_global_Wirev>
   d4d00:	2228      	movs	r2, #40	; 0x28
   d4d02:	4603      	mov	r3, r0
   d4d04:	2137      	movs	r1, #55	; 0x37
   d4d06:	480b      	ldr	r0, [pc, #44]	; (d4d34 <_GLOBAL__sub_I_i2ceeprom+0x6c>)
   d4d08:	f001 fd08 	bl	d671c <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
String heading;
   d4d0c:	490a      	ldr	r1, [pc, #40]	; (d4d38 <_GLOBAL__sub_I_i2ceeprom+0x70>)
   d4d0e:	480b      	ldr	r0, [pc, #44]	; (d4d3c <_GLOBAL__sub_I_i2ceeprom+0x74>)
}
   d4d10:	b005      	add	sp, #20
   d4d12:	f85d eb04 	ldr.w	lr, [sp], #4
String heading;
   d4d16:	f003 bc90 	b.w	d863a <_ZN6StringC1EPKc>
   d4d1a:	bf00      	nop
   d4d1c:	2003e510 	.word	0x2003e510
   d4d20:	2003e518 	.word	0x2003e518
   d4d24:	2003e424 	.word	0x2003e424
   d4d28:	00061a80 	.word	0x00061a80
   d4d2c:	000186a0 	.word	0x000186a0
   d4d30:	2003e4a0 	.word	0x2003e4a0
   d4d34:	2003e478 	.word	0x2003e478
   d4d38:	000dd0cd 	.word	0x000dd0cd
   d4d3c:	2003e500 	.word	0x2003e500

000d4d40 <_Z16displayCalStatusv>:
{
   d4d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    system = gyro = accel = mag = 0;
   d4d42:	2300      	movs	r3, #0
   d4d44:	f88d 300f 	strb.w	r3, [sp, #15]
   d4d48:	f88d 300e 	strb.w	r3, [sp, #14]
   d4d4c:	f88d 300d 	strb.w	r3, [sp, #13]
   d4d50:	f88d 300c 	strb.w	r3, [sp, #12]
    bno.getCalibration(&system, &gyro, &accel, &mag);
   d4d54:	f10d 030f 	add.w	r3, sp, #15
   d4d58:	f10d 020d 	add.w	r2, sp, #13
   d4d5c:	a903      	add	r1, sp, #12
   d4d5e:	483a      	ldr	r0, [pc, #232]	; (d4e48 <_Z16displayCalStatusv+0x108>)
   d4d60:	9300      	str	r3, [sp, #0]
   d4d62:	f10d 030e 	add.w	r3, sp, #14
   d4d66:	f001 fe30 	bl	d69ca <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
    Serial.print("\t");
   d4d6a:	f004 f82b 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4d6e:	4937      	ldr	r1, [pc, #220]	; (d4e4c <_Z16displayCalStatusv+0x10c>)
   d4d70:	f003 fcde 	bl	d8730 <_ZN5Print5printEPKc>
    if (!system)
   d4d74:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4d78:	b923      	cbnz	r3, d4d84 <_Z16displayCalStatusv+0x44>
        Serial.print("! ");
   d4d7a:	f004 f823 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4d7e:	4934      	ldr	r1, [pc, #208]	; (d4e50 <_Z16displayCalStatusv+0x110>)
   d4d80:	f003 fcd6 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print("Sys:");
   d4d84:	f004 f81e 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4d88:	4932      	ldr	r1, [pc, #200]	; (d4e54 <_Z16displayCalStatusv+0x114>)
   d4d8a:	f003 fcd1 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(system, DEC);
   d4d8e:	f004 f819 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4d92:	220a      	movs	r2, #10
   d4d94:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d4d98:	f7ff ff34 	bl	d4c04 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" G:");
   d4d9c:	f004 f812 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4da0:	492d      	ldr	r1, [pc, #180]	; (d4e58 <_Z16displayCalStatusv+0x118>)
   d4da2:	f003 fcc5 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(gyro, DEC);
   d4da6:	f004 f80d 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4daa:	220a      	movs	r2, #10
   d4dac:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d4db0:	f7ff ff28 	bl	d4c04 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" A:");
   d4db4:	f004 f806 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4db8:	4928      	ldr	r1, [pc, #160]	; (d4e5c <_Z16displayCalStatusv+0x11c>)
   d4dba:	f003 fcb9 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(accel, DEC);
   d4dbe:	f004 f801 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4dc2:	220a      	movs	r2, #10
   d4dc4:	f89d 100e 	ldrb.w	r1, [sp, #14]
   d4dc8:	f7ff ff1c 	bl	d4c04 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" M:");
   d4dcc:	f003 fffa 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4dd0:	4923      	ldr	r1, [pc, #140]	; (d4e60 <_Z16displayCalStatusv+0x120>)
   d4dd2:	f003 fcad 	bl	d8730 <_ZN5Print5printEPKc>
    Serial.print(mag, DEC);
   d4dd6:	f003 fff5 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d4dda:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d4dde:	220a      	movs	r2, #10
   d4de0:	f7ff ff10 	bl	d4c04 <_ZN5Print5printIhLi0EEEjT_i>
    display.clearDisplay();
   d4de4:	481f      	ldr	r0, [pc, #124]	; (d4e64 <_Z16displayCalStatusv+0x124>)
   d4de6:	f002 f8ad 	bl	d6f44 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
    display.print("Sys:");
   d4dea:	491a      	ldr	r1, [pc, #104]	; (d4e54 <_Z16displayCalStatusv+0x114>)
   d4dec:	481d      	ldr	r0, [pc, #116]	; (d4e64 <_Z16displayCalStatusv+0x124>)
   d4dee:	f003 fc9f 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(system, DEC);
   d4df2:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d4df6:	481b      	ldr	r0, [pc, #108]	; (d4e64 <_Z16displayCalStatusv+0x124>)
   d4df8:	220a      	movs	r2, #10
   d4dfa:	f7ff ff03 	bl	d4c04 <_ZN5Print5printIhLi0EEEjT_i>
    display.print(" G:");
   d4dfe:	4916      	ldr	r1, [pc, #88]	; (d4e58 <_Z16displayCalStatusv+0x118>)
   d4e00:	4818      	ldr	r0, [pc, #96]	; (d4e64 <_Z16displayCalStatusv+0x124>)
   d4e02:	f003 fc95 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(gyro, DEC);
   d4e06:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d4e0a:	4816      	ldr	r0, [pc, #88]	; (d4e64 <_Z16displayCalStatusv+0x124>)
   d4e0c:	220a      	movs	r2, #10
   d4e0e:	f7ff fef9 	bl	d4c04 <_ZN5Print5printIhLi0EEEjT_i>
    display.print(" A:");
   d4e12:	4912      	ldr	r1, [pc, #72]	; (d4e5c <_Z16displayCalStatusv+0x11c>)
   d4e14:	4813      	ldr	r0, [pc, #76]	; (d4e64 <_Z16displayCalStatusv+0x124>)
   d4e16:	f003 fc8b 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(accel, DEC);
   d4e1a:	f89d 100e 	ldrb.w	r1, [sp, #14]
   d4e1e:	4811      	ldr	r0, [pc, #68]	; (d4e64 <_Z16displayCalStatusv+0x124>)
   d4e20:	220a      	movs	r2, #10
   d4e22:	f7ff feef 	bl	d4c04 <_ZN5Print5printIhLi0EEEjT_i>
    display.print(" M:");
   d4e26:	490e      	ldr	r1, [pc, #56]	; (d4e60 <_Z16displayCalStatusv+0x120>)
   d4e28:	480e      	ldr	r0, [pc, #56]	; (d4e64 <_Z16displayCalStatusv+0x124>)
   d4e2a:	f003 fc81 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(mag, DEC);
   d4e2e:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d4e32:	480c      	ldr	r0, [pc, #48]	; (d4e64 <_Z16displayCalStatusv+0x124>)
   d4e34:	220a      	movs	r2, #10
   d4e36:	f7ff fee5 	bl	d4c04 <_ZN5Print5printIhLi0EEEjT_i>
    display.display();
   d4e3a:	480a      	ldr	r0, [pc, #40]	; (d4e64 <_Z16displayCalStatusv+0x124>)
   d4e3c:	f002 fcf5 	bl	d782a <_ZN15Adafruit_SH110X7displayEv>
}
   d4e40:	b005      	add	sp, #20
   d4e42:	f85d fb04 	ldr.w	pc, [sp], #4
   d4e46:	bf00      	nop
   d4e48:	2003e478 	.word	0x2003e478
   d4e4c:	000dd0cc 	.word	0x000dd0cc
   d4e50:	000dd0ce 	.word	0x000dd0ce
   d4e54:	000dd0d1 	.word	0x000dd0d1
   d4e58:	000dd0d6 	.word	0x000dd0d6
   d4e5c:	000dd0da 	.word	0x000dd0da
   d4e60:	000dd0de 	.word	0x000dd0de
   d4e64:	2003e4a0 	.word	0x2003e4a0

000d4e68 <_Z14displayValues1RfS_S_S_S_S_S_S_>:
void displayValues1(float& bme_temperature, float& bme_pressure, float& bme_humidity, float& bme_altitude, float& shuntvoltage, float& busvoltage, float& current_mA, float& power_mW) {
   d4e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    display.clearDisplay();
   d4e6c:	4c45      	ldr	r4, [pc, #276]	; (d4f84 <_Z14displayValues1RfS_S_S_S_S_S_S_+0x11c>)
void displayValues1(float& bme_temperature, float& bme_pressure, float& bme_humidity, float& bme_altitude, float& shuntvoltage, float& busvoltage, float& current_mA, float& power_mW) {
   d4e6e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   d4e72:	4680      	mov	r8, r0
   d4e74:	461e      	mov	r6, r3
    display.clearDisplay();
   d4e76:	4620      	mov	r0, r4
void displayValues1(float& bme_temperature, float& bme_pressure, float& bme_humidity, float& bme_altitude, float& shuntvoltage, float& busvoltage, float& current_mA, float& power_mW) {
   d4e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4e7a:	9301      	str	r3, [sp, #4]
   d4e7c:	460f      	mov	r7, r1
   d4e7e:	4615      	mov	r5, r2
   d4e80:	e9dd ba0d 	ldrd	fp, sl, [sp, #52]	; 0x34
    display.clearDisplay();
   d4e84:	f002 f85e 	bl	d6f44 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d4e88:	4620      	mov	r0, r4
   d4e8a:	f002 fcce 	bl	d782a <_ZN15Adafruit_SH110X7displayEv>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
   d4e8e:	2200      	movs	r2, #0
    display.print("Temp. = ");
   d4e90:	493d      	ldr	r1, [pc, #244]	; (d4f88 <_Z14displayValues1RfS_S_S_S_S_S_S_+0x120>)
   d4e92:	6122      	str	r2, [r4, #16]
   d4e94:	4620      	mov	r0, r4
   d4e96:	f003 fc4b 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(bme_temperature);
   d4e9a:	ed98 0a00 	vldr	s0, [r8]
   d4e9e:	2102      	movs	r1, #2
   d4ea0:	4620      	mov	r0, r4
   d4ea2:	f003 fd7b 	bl	d899c <_ZN5Print5printEfi>
    display.println(" F");
   d4ea6:	4939      	ldr	r1, [pc, #228]	; (d4f8c <_Z14displayValues1RfS_S_S_S_S_S_S_+0x124>)
   d4ea8:	4620      	mov	r0, r4
   d4eaa:	f003 fc54 	bl	d8756 <_ZN5Print7printlnEPKc>
    display.print("Press. = ");
   d4eae:	4938      	ldr	r1, [pc, #224]	; (d4f90 <_Z14displayValues1RfS_S_S_S_S_S_S_+0x128>)
   d4eb0:	4620      	mov	r0, r4
   d4eb2:	f003 fc3d 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(bme_pressure);
   d4eb6:	ed97 0a00 	vldr	s0, [r7]
   d4eba:	2102      	movs	r1, #2
   d4ebc:	4620      	mov	r0, r4
   d4ebe:	f003 fd6d 	bl	d899c <_ZN5Print5printEfi>
    display.println(" mmHg");
   d4ec2:	4934      	ldr	r1, [pc, #208]	; (d4f94 <_Z14displayValues1RfS_S_S_S_S_S_S_+0x12c>)
   d4ec4:	4620      	mov	r0, r4
   d4ec6:	f003 fc46 	bl	d8756 <_ZN5Print7printlnEPKc>
    display.print("Altitude = ");
   d4eca:	4933      	ldr	r1, [pc, #204]	; (d4f98 <_Z14displayValues1RfS_S_S_S_S_S_S_+0x130>)
   d4ecc:	4620      	mov	r0, r4
   d4ece:	f003 fc2f 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(bme_altitude);
   d4ed2:	ed96 0a00 	vldr	s0, [r6]
   d4ed6:	2102      	movs	r1, #2
   d4ed8:	4620      	mov	r0, r4
   d4eda:	f003 fd5f 	bl	d899c <_ZN5Print5printEfi>
    display.println(" m");
   d4ede:	492f      	ldr	r1, [pc, #188]	; (d4f9c <_Z14displayValues1RfS_S_S_S_S_S_S_+0x134>)
   d4ee0:	4620      	mov	r0, r4
   d4ee2:	f003 fc38 	bl	d8756 <_ZN5Print7printlnEPKc>
    display.print("Humidity = ");
   d4ee6:	492e      	ldr	r1, [pc, #184]	; (d4fa0 <_Z14displayValues1RfS_S_S_S_S_S_S_+0x138>)
   d4ee8:	4620      	mov	r0, r4
   d4eea:	f003 fc21 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(bme_humidity);
   d4eee:	ed95 0a00 	vldr	s0, [r5]
    display.println(" V");
   d4ef2:	4d2c      	ldr	r5, [pc, #176]	; (d4fa4 <_Z14displayValues1RfS_S_S_S_S_S_S_+0x13c>)
    display.print(bme_humidity);
   d4ef4:	2102      	movs	r1, #2
   d4ef6:	4620      	mov	r0, r4
   d4ef8:	f003 fd50 	bl	d899c <_ZN5Print5printEfi>
    display.println(" %");
   d4efc:	492a      	ldr	r1, [pc, #168]	; (d4fa8 <_Z14displayValues1RfS_S_S_S_S_S_S_+0x140>)
   d4efe:	4620      	mov	r0, r4
   d4f00:	f003 fc29 	bl	d8756 <_ZN5Print7printlnEPKc>
    display.print("shunt v. = ");
   d4f04:	4929      	ldr	r1, [pc, #164]	; (d4fac <_Z14displayValues1RfS_S_S_S_S_S_S_+0x144>)
   d4f06:	4620      	mov	r0, r4
   d4f08:	f003 fc12 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(shuntvoltage);
   d4f0c:	9b01      	ldr	r3, [sp, #4]
   d4f0e:	2102      	movs	r1, #2
   d4f10:	ed93 0a00 	vldr	s0, [r3]
   d4f14:	4620      	mov	r0, r4
   d4f16:	f003 fd41 	bl	d899c <_ZN5Print5printEfi>
    display.println(" V");
   d4f1a:	4629      	mov	r1, r5
   d4f1c:	4620      	mov	r0, r4
   d4f1e:	f003 fc1a 	bl	d8756 <_ZN5Print7printlnEPKc>
    display.print("Bus voltage = ");
   d4f22:	4923      	ldr	r1, [pc, #140]	; (d4fb0 <_Z14displayValues1RfS_S_S_S_S_S_S_+0x148>)
   d4f24:	4620      	mov	r0, r4
   d4f26:	f003 fc03 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(busvoltage);
   d4f2a:	ed9b 0a00 	vldr	s0, [fp]
   d4f2e:	2102      	movs	r1, #2
   d4f30:	4620      	mov	r0, r4
   d4f32:	f003 fd33 	bl	d899c <_ZN5Print5printEfi>
    display.println(" V");
   d4f36:	4629      	mov	r1, r5
   d4f38:	4620      	mov	r0, r4
   d4f3a:	f003 fc0c 	bl	d8756 <_ZN5Print7printlnEPKc>
    display.print("current = ");
   d4f3e:	491d      	ldr	r1, [pc, #116]	; (d4fb4 <_Z14displayValues1RfS_S_S_S_S_S_S_+0x14c>)
   d4f40:	4620      	mov	r0, r4
   d4f42:	f003 fbf5 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(current_mA);
   d4f46:	ed9a 0a00 	vldr	s0, [sl]
   d4f4a:	2102      	movs	r1, #2
   d4f4c:	4620      	mov	r0, r4
   d4f4e:	f003 fd25 	bl	d899c <_ZN5Print5printEfi>
    display.println(" mA");
   d4f52:	4919      	ldr	r1, [pc, #100]	; (d4fb8 <_Z14displayValues1RfS_S_S_S_S_S_S_+0x150>)
   d4f54:	4620      	mov	r0, r4
   d4f56:	f003 fbfe 	bl	d8756 <_ZN5Print7printlnEPKc>
    display.print("power = ");
   d4f5a:	4918      	ldr	r1, [pc, #96]	; (d4fbc <_Z14displayValues1RfS_S_S_S_S_S_S_+0x154>)
   d4f5c:	4620      	mov	r0, r4
   d4f5e:	f003 fbe7 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(power_mW);
   d4f62:	ed99 0a00 	vldr	s0, [r9]
   d4f66:	2102      	movs	r1, #2
   d4f68:	4620      	mov	r0, r4
   d4f6a:	f003 fd17 	bl	d899c <_ZN5Print5printEfi>
    display.println(" mW");
   d4f6e:	4914      	ldr	r1, [pc, #80]	; (d4fc0 <_Z14displayValues1RfS_S_S_S_S_S_S_+0x158>)
   d4f70:	4620      	mov	r0, r4
   d4f72:	f003 fbf0 	bl	d8756 <_ZN5Print7printlnEPKc>
    display.display(); // actually display all of the above
   d4f76:	4620      	mov	r0, r4
  }
   d4f78:	b003      	add	sp, #12
   d4f7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    display.display(); // actually display all of the above
   d4f7e:	f002 bc54 	b.w	d782a <_ZN15Adafruit_SH110X7displayEv>
   d4f82:	bf00      	nop
   d4f84:	2003e4a0 	.word	0x2003e4a0
   d4f88:	000dd0e2 	.word	0x000dd0e2
   d4f8c:	000dce79 	.word	0x000dce79
   d4f90:	000dd0eb 	.word	0x000dd0eb
   d4f94:	000dce88 	.word	0x000dce88
   d4f98:	000dce96 	.word	0x000dce96
   d4f9c:	000dcea2 	.word	0x000dcea2
   d4fa0:	000dcea5 	.word	0x000dcea5
   d4fa4:	000dd023 	.word	0x000dd023
   d4fa8:	000dceb1 	.word	0x000dceb1
   d4fac:	000dd0f5 	.word	0x000dd0f5
   d4fb0:	000dd101 	.word	0x000dd101
   d4fb4:	000dd110 	.word	0x000dd110
   d4fb8:	000dd05a 	.word	0x000dd05a
   d4fbc:	000dd11b 	.word	0x000dd11b
   d4fc0:	000dd06e 	.word	0x000dd06e

000d4fc4 <_Z14displayValues2RfS_RiR6StringS_>:
void displayValues2(float& event_compass_heading, float& bno_compass_heading, int& vane_wind_direction, String& heading  , float& WindSpeed) {
   d4fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    display.clearDisplay();
   d4fc8:	4c2d      	ldr	r4, [pc, #180]	; (d5080 <_Z14displayValues2RfS_RiR6StringS_+0xbc>)
void displayValues2(float& event_compass_heading, float& bno_compass_heading, int& vane_wind_direction, String& heading  , float& WindSpeed) {
   d4fca:	f8dd 9020 	ldr.w	r9, [sp, #32]
   d4fce:	4680      	mov	r8, r0
    display.clearDisplay();
   d4fd0:	4620      	mov	r0, r4
void displayValues2(float& event_compass_heading, float& bno_compass_heading, int& vane_wind_direction, String& heading  , float& WindSpeed) {
   d4fd2:	4615      	mov	r5, r2
   d4fd4:	460f      	mov	r7, r1
   d4fd6:	461e      	mov	r6, r3
    display.clearDisplay();
   d4fd8:	f001 ffb4 	bl	d6f44 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d4fdc:	4620      	mov	r0, r4
   d4fde:	f002 fc24 	bl	d782a <_ZN15Adafruit_SH110X7displayEv>
   d4fe2:	2300      	movs	r3, #0
    display.print("event com. = ");
   d4fe4:	4927      	ldr	r1, [pc, #156]	; (d5084 <_Z14displayValues2RfS_RiR6StringS_+0xc0>)
   d4fe6:	6123      	str	r3, [r4, #16]
   d4fe8:	4620      	mov	r0, r4
   d4fea:	f003 fba1 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(event_compass_heading);
   d4fee:	ed98 0a00 	vldr	s0, [r8]
   d4ff2:	2102      	movs	r1, #2
   d4ff4:	4620      	mov	r0, r4
   d4ff6:	f003 fcd1 	bl	d899c <_ZN5Print5printEfi>
    display.println(" d");
   d4ffa:	4923      	ldr	r1, [pc, #140]	; (d5088 <_Z14displayValues2RfS_RiR6StringS_+0xc4>)
   d4ffc:	4620      	mov	r0, r4
   d4ffe:	f003 fbaa 	bl	d8756 <_ZN5Print7printlnEPKc>
    display.print("bno com. = ");
   d5002:	4922      	ldr	r1, [pc, #136]	; (d508c <_Z14displayValues2RfS_RiR6StringS_+0xc8>)
   d5004:	4620      	mov	r0, r4
   d5006:	f003 fb93 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(bno_compass_heading);
   d500a:	ed97 0a00 	vldr	s0, [r7]
   d500e:	2102      	movs	r1, #2
   d5010:	4620      	mov	r0, r4
   d5012:	f003 fcc3 	bl	d899c <_ZN5Print5printEfi>
    display.println(" d");
   d5016:	491c      	ldr	r1, [pc, #112]	; (d5088 <_Z14displayValues2RfS_RiR6StringS_+0xc4>)
   d5018:	4620      	mov	r0, r4
   d501a:	f003 fb9c 	bl	d8756 <_ZN5Print7printlnEPKc>
    display.print("vane dir. = ");
   d501e:	491c      	ldr	r1, [pc, #112]	; (d5090 <_Z14displayValues2RfS_RiR6StringS_+0xcc>)
   d5020:	4620      	mov	r0, r4
   d5022:	f003 fb85 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(vane_wind_direction);
   d5026:	682d      	ldr	r5, [r5, #0]
        if (n < 0 && base == 10) {
   d5028:	2d00      	cmp	r5, #0
   d502a:	da27      	bge.n	d507c <_Z14displayValues2RfS_RiR6StringS_+0xb8>
            t = print('-');
   d502c:	212d      	movs	r1, #45	; 0x2d
   d502e:	4620      	mov	r0, r4
   d5030:	f003 fb82 	bl	d8738 <_ZN5Print5printEc>
            val = -n;
   d5034:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d5036:	220a      	movs	r2, #10
   d5038:	4811      	ldr	r0, [pc, #68]	; (d5080 <_Z14displayValues2RfS_RiR6StringS_+0xbc>)
   d503a:	f003 fb98 	bl	d876e <_ZN5Print11printNumberEmh>
    display.println(" d");
   d503e:	4912      	ldr	r1, [pc, #72]	; (d5088 <_Z14displayValues2RfS_RiR6StringS_+0xc4>)
   d5040:	480f      	ldr	r0, [pc, #60]	; (d5080 <_Z14displayValues2RfS_RiR6StringS_+0xbc>)
   d5042:	f003 fb88 	bl	d8756 <_ZN5Print7printlnEPKc>
    display.print("heading = ");
   d5046:	4913      	ldr	r1, [pc, #76]	; (d5094 <_Z14displayValues2RfS_RiR6StringS_+0xd0>)
   d5048:	480d      	ldr	r0, [pc, #52]	; (d5080 <_Z14displayValues2RfS_RiR6StringS_+0xbc>)
   d504a:	f003 fb71 	bl	d8730 <_ZN5Print5printEPKc>
    display.println(heading);
   d504e:	6831      	ldr	r1, [r6, #0]
   d5050:	480b      	ldr	r0, [pc, #44]	; (d5080 <_Z14displayValues2RfS_RiR6StringS_+0xbc>)
   d5052:	f003 fb80 	bl	d8756 <_ZN5Print7printlnEPKc>
    display.print("WindSpeed = ");
   d5056:	4910      	ldr	r1, [pc, #64]	; (d5098 <_Z14displayValues2RfS_RiR6StringS_+0xd4>)
   d5058:	4809      	ldr	r0, [pc, #36]	; (d5080 <_Z14displayValues2RfS_RiR6StringS_+0xbc>)
   d505a:	f003 fb69 	bl	d8730 <_ZN5Print5printEPKc>
    display.print(WindSpeed);
   d505e:	ed99 0a00 	vldr	s0, [r9]
   d5062:	4807      	ldr	r0, [pc, #28]	; (d5080 <_Z14displayValues2RfS_RiR6StringS_+0xbc>)
   d5064:	2102      	movs	r1, #2
   d5066:	f003 fc99 	bl	d899c <_ZN5Print5printEfi>
    display.println(" mph");
   d506a:	490c      	ldr	r1, [pc, #48]	; (d509c <_Z14displayValues2RfS_RiR6StringS_+0xd8>)
   d506c:	4804      	ldr	r0, [pc, #16]	; (d5080 <_Z14displayValues2RfS_RiR6StringS_+0xbc>)
   d506e:	f003 fb72 	bl	d8756 <_ZN5Print7printlnEPKc>
  }
   d5072:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  display.display(); // actually display all of the above
   d5076:	4802      	ldr	r0, [pc, #8]	; (d5080 <_Z14displayValues2RfS_RiR6StringS_+0xbc>)
   d5078:	f002 bbd7 	b.w	d782a <_ZN15Adafruit_SH110X7displayEv>
            val = n;
   d507c:	4629      	mov	r1, r5
   d507e:	e7da      	b.n	d5036 <_Z14displayValues2RfS_RiR6StringS_+0x72>
   d5080:	2003e4a0 	.word	0x2003e4a0
   d5084:	000dd124 	.word	0x000dd124
   d5088:	000dd132 	.word	0x000dd132
   d508c:	000dd135 	.word	0x000dd135
   d5090:	000dd141 	.word	0x000dd141
   d5094:	000dd14e 	.word	0x000dd14e
   d5098:	000dd159 	.word	0x000dd159
   d509c:	000dd166 	.word	0x000dd166

000d50a0 <loop>:
void loop(void) {
   d50a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
digitalWrite(vane_switch, HIGH);
   d50a4:	4b45      	ldr	r3, [pc, #276]	; (d51bc <loop+0x11c>)
WindSpeed = measure_wind_speed();
   d50a6:	4c46      	ldr	r4, [pc, #280]	; (d51c0 <loop+0x120>)
digitalWrite(vane_switch, HIGH);
   d50a8:	7818      	ldrb	r0, [r3, #0]
void loop(void) {
   d50aa:	b089      	sub	sp, #36	; 0x24
digitalWrite(vane_switch, HIGH);
   d50ac:	2101      	movs	r1, #1
   d50ae:	f004 f91e 	bl	d92ee <digitalWrite>
vane_wind_direction = measure_wind_direction();
   d50b2:	f7ff fcb5 	bl	d4a20 <_Z22measure_wind_directionv>
   d50b6:	4b43      	ldr	r3, [pc, #268]	; (d51c4 <loop+0x124>)
   d50b8:	6018      	str	r0, [r3, #0]
WindSpeed = measure_wind_speed();
   d50ba:	f7ff fc8d 	bl	d49d8 <_Z18measure_wind_speedv>
read_bme_values(bme_temperature, bme_pressure, bme_humidity, bme_altitude);
   d50be:	4a42      	ldr	r2, [pc, #264]	; (d51c8 <loop+0x128>)
   d50c0:	4942      	ldr	r1, [pc, #264]	; (d51cc <loop+0x12c>)
   d50c2:	4b43      	ldr	r3, [pc, #268]	; (d51d0 <loop+0x130>)
   d50c4:	4843      	ldr	r0, [pc, #268]	; (d51d4 <loop+0x134>)
WindSpeed = measure_wind_speed();
   d50c6:	ed84 0a00 	vstr	s0, [r4]
read_bme_values(bme_temperature, bme_pressure, bme_humidity, bme_altitude);
   d50ca:	f7ff f827 	bl	d411c <_Z15read_bme_valuesRfS_S_S_>
  delay(delayTime);
   d50ce:	4b42      	ldr	r3, [pc, #264]	; (d51d8 <loop+0x138>)
   d50d0:	6818      	ldr	r0, [r3, #0]
   d50d2:	f003 fcfb 	bl	d8acc <delay>
  if(!digitalRead(BUTTON_A)) display.print("A");
   d50d6:	2004      	movs	r0, #4
   d50d8:	f004 f922 	bl	d9320 <digitalRead>
   d50dc:	46a1      	mov	r9, r4
   d50de:	b918      	cbnz	r0, d50e8 <loop+0x48>
   d50e0:	493e      	ldr	r1, [pc, #248]	; (d51dc <loop+0x13c>)
   d50e2:	483f      	ldr	r0, [pc, #252]	; (d51e0 <loop+0x140>)
   d50e4:	f003 fb24 	bl	d8730 <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_B)) display.print("B");
   d50e8:	2003      	movs	r0, #3
   d50ea:	f004 f919 	bl	d9320 <digitalRead>
   d50ee:	b918      	cbnz	r0, d50f8 <loop+0x58>
   d50f0:	493c      	ldr	r1, [pc, #240]	; (d51e4 <loop+0x144>)
   d50f2:	483b      	ldr	r0, [pc, #236]	; (d51e0 <loop+0x140>)
   d50f4:	f003 fb1c 	bl	d8730 <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_C)) display.print("C");
   d50f8:	2002      	movs	r0, #2
   d50fa:	f004 f911 	bl	d9320 <digitalRead>
   d50fe:	b918      	cbnz	r0, d5108 <loop+0x68>
   d5100:	4939      	ldr	r1, [pc, #228]	; (d51e8 <loop+0x148>)
   d5102:	4837      	ldr	r0, [pc, #220]	; (d51e0 <loop+0x140>)
   d5104:	f003 fb14 	bl	d8730 <_ZN5Print5printEPKc>
  delay(10);
   d5108:	200a      	movs	r0, #10
   d510a:	f003 fcdf 	bl	d8acc <delay>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d510e:	f002 ff03 	bl	d7f18 <os_thread_yield>
  display.display();
   d5112:	4833      	ldr	r0, [pc, #204]	; (d51e0 <loop+0x140>)
event_compass_heading = get_event_compass_heading();
   d5114:	4c35      	ldr	r4, [pc, #212]	; (d51ec <loop+0x14c>)
  bno_compass_heading = get_compass_heading();
   d5116:	4d36      	ldr	r5, [pc, #216]	; (d51f0 <loop+0x150>)
  measure_current_voltage_power(shuntvoltage, busvoltage,current_mA, loadvoltage, power_mW );
   d5118:	f8df 80e8 	ldr.w	r8, [pc, #232]	; d5204 <loop+0x164>
   d511c:	4f35      	ldr	r7, [pc, #212]	; (d51f4 <loop+0x154>)
   d511e:	4e36      	ldr	r6, [pc, #216]	; (d51f8 <loop+0x158>)
   d5120:	f8df b0e4 	ldr.w	fp, [pc, #228]	; d5208 <loop+0x168>
  if (page1){
   d5124:	f8df a0e4 	ldr.w	sl, [pc, #228]	; d520c <loop+0x16c>
  display.display();
   d5128:	f002 fb7f 	bl	d782a <_ZN15Adafruit_SH110X7displayEv>
event_compass_heading = get_event_compass_heading();
   d512c:	f7ff fd00 	bl	d4b30 <_Z25get_event_compass_headingv>
   d5130:	ed84 0a00 	vstr	s0, [r4]
  bno_compass_heading = get_compass_heading();
   d5134:	f7ff f970 	bl	d4418 <_Z19get_compass_headingv>
  heading = calculateHeading(int((event_compass_heading + bno_compass_heading) / 2));
   d5138:	edd4 7a00 	vldr	s15, [r4]
  bno_compass_heading = get_compass_heading();
   d513c:	ed85 0a00 	vstr	s0, [r5]
  heading = calculateHeading(int((event_compass_heading + bno_compass_heading) / 2));
   d5140:	ee30 0a27 	vadd.f32	s0, s0, s15
   d5144:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d5148:	ee20 0a27 	vmul.f32	s0, s0, s15
   d514c:	a804      	add	r0, sp, #16
   d514e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d5152:	ee17 1a90 	vmov	r1, s15
   d5156:	f7ff fc81 	bl	d4a5c <_Z16calculateHeadingi>
   d515a:	a904      	add	r1, sp, #16
   d515c:	4827      	ldr	r0, [pc, #156]	; (d51fc <loop+0x15c>)
   d515e:	f003 fa9d 	bl	d869c <_ZN6StringaSEOS_>
   d5162:	a804      	add	r0, sp, #16
   d5164:	f003 fa1e 	bl	d85a4 <_ZN6StringD1Ev>
  measure_current_voltage_power(shuntvoltage, busvoltage,current_mA, loadvoltage, power_mW );
   d5168:	4b25      	ldr	r3, [pc, #148]	; (d5200 <loop+0x160>)
   d516a:	f8cd b000 	str.w	fp, [sp]
   d516e:	4642      	mov	r2, r8
   d5170:	4639      	mov	r1, r7
   d5172:	4630      	mov	r0, r6
   d5174:	f7ff fcb0 	bl	d4ad8 <_Z29measure_current_voltage_powerRfS_S_S_S_>
  if (page1){
   d5178:	f89a 3000 	ldrb.w	r3, [sl]
   d517c:	b19b      	cbz	r3, d51a6 <loop+0x106>
    displayValues1(bme_temperature, bme_pressure, bme_humidity, bme_altitude, shuntvoltage, busvoltage, current_mA, power_mW);
   d517e:	4b14      	ldr	r3, [pc, #80]	; (d51d0 <loop+0x130>)
   d5180:	4a11      	ldr	r2, [pc, #68]	; (d51c8 <loop+0x128>)
   d5182:	4912      	ldr	r1, [pc, #72]	; (d51cc <loop+0x12c>)
   d5184:	4813      	ldr	r0, [pc, #76]	; (d51d4 <loop+0x134>)
   d5186:	e9cd 8b02 	strd	r8, fp, [sp, #8]
   d518a:	e9cd 6700 	strd	r6, r7, [sp]
   d518e:	f7ff fe6b 	bl	d4e68 <_Z14displayValues1RfS_S_S_S_S_S_S_>
    page1 = false;
   d5192:	2300      	movs	r3, #0
      delay(BNO055_SAMPLERATE_DELAY_MS);
   d5194:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    page1 = true;
   d5198:	f88a 3000 	strb.w	r3, [sl]
      delay(BNO055_SAMPLERATE_DELAY_MS);
   d519c:	f003 fc96 	bl	d8acc <delay>
}
   d51a0:	b009      	add	sp, #36	; 0x24
   d51a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    displayValues2(event_compass_heading, bno_compass_heading, vane_wind_direction, heading, WindSpeed);
   d51a6:	4b15      	ldr	r3, [pc, #84]	; (d51fc <loop+0x15c>)
   d51a8:	4a06      	ldr	r2, [pc, #24]	; (d51c4 <loop+0x124>)
   d51aa:	f8cd 9000 	str.w	r9, [sp]
   d51ae:	4629      	mov	r1, r5
   d51b0:	4620      	mov	r0, r4
   d51b2:	f7ff ff07 	bl	d4fc4 <_Z14displayValues2RfS_RiR6StringS_>
    page1 = true;
   d51b6:	2301      	movs	r3, #1
   d51b8:	e7ec      	b.n	d5194 <loop+0xf4>
   d51ba:	bf00      	nop
   d51bc:	2003e39a 	.word	0x2003e39a
   d51c0:	2003e418 	.word	0x2003e418
   d51c4:	2003e578 	.word	0x2003e578
   d51c8:	2003e46c 	.word	0x2003e46c
   d51cc:	2003e470 	.word	0x2003e470
   d51d0:	2003e468 	.word	0x2003e468
   d51d4:	2003e474 	.word	0x2003e474
   d51d8:	2003e49c 	.word	0x2003e49c
   d51dc:	000dd05c 	.word	0x000dd05c
   d51e0:	2003e4a0 	.word	0x2003e4a0
   d51e4:	000dd5b2 	.word	0x000dd5b2
   d51e8:	000dd16b 	.word	0x000dd16b
   d51ec:	2003e4fc 	.word	0x2003e4fc
   d51f0:	2003e48c 	.word	0x2003e48c
   d51f4:	2003e490 	.word	0x2003e490
   d51f8:	2003e554 	.word	0x2003e554
   d51fc:	2003e500 	.word	0x2003e500
   d5200:	2003e52c 	.word	0x2003e52c
   d5204:	2003e498 	.word	0x2003e498
   d5208:	2003e54c 	.word	0x2003e54c
   d520c:	2003e398 	.word	0x2003e398

000d5210 <setup>:
void setup(void) {
   d5210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5214:	b0a2      	sub	sp, #136	; 0x88
  Serial.println("Hello!");
   d5216:	f003 fdd5 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d521a:	49cb      	ldr	r1, [pc, #812]	; (d5548 <setup+0x338>)
   d521c:	f003 fa9b 	bl	d8756 <_ZN5Print7printlnEPKc>
  if (! ina219.begin()) {
   d5220:	f004 f8d8 	bl	d93d4 <_Z19__fetch_global_Wirev>
   d5224:	4601      	mov	r1, r0
   d5226:	48c9      	ldr	r0, [pc, #804]	; (d554c <setup+0x33c>)
   d5228:	f002 fda0 	bl	d7d6c <_ZN15Adafruit_INA2195beginEP7TwoWire>
   d522c:	b940      	cbnz	r0, d5240 <setup+0x30>
    Serial.println("Failed to find INA219 chip");
   d522e:	f003 fdc9 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5232:	49c7      	ldr	r1, [pc, #796]	; (d5550 <setup+0x340>)
   d5234:	f003 fa8f 	bl	d8756 <_ZN5Print7printlnEPKc>
    while (1) { delay(10); }
   d5238:	200a      	movs	r0, #10
   d523a:	f003 fc47 	bl	d8acc <delay>
   d523e:	e7fb      	b.n	d5238 <setup+0x28>
  ina219.setCalibration_16V_400mA();
   d5240:	48c2      	ldr	r0, [pc, #776]	; (d554c <setup+0x33c>)
time_base = Time.now();
   d5242:	4fc4      	ldr	r7, [pc, #784]	; (d5554 <setup+0x344>)
  ina219.setCalibration_16V_400mA();
   d5244:	f002 fdad 	bl	d7da2 <_ZN15Adafruit_INA21924setCalibration_16V_400mAEv>
time_base = Time.now();
   d5248:	f003 fc1a 	bl	d8a80 <_ZN9TimeClass3nowEv>
   d524c:	17c1      	asrs	r1, r0, #31
   d524e:	e9c7 0100 	strd	r0, r1, [r7]
Serial.print("time base value =");
   d5252:	f003 fdb7 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5256:	49c0      	ldr	r1, [pc, #768]	; (d5558 <setup+0x348>)
   d5258:	f003 fa6a 	bl	d8730 <_ZN5Print5printEPKc>
Serial.print(time_base);
   d525c:	f003 fdb2 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5260:	e9d7 4500 	ldrd	r4, r5, [r7]
        if (n < 0 && base == 10) {
   d5264:	2c00      	cmp	r4, #0
   d5266:	f175 0300 	sbcs.w	r3, r5, #0
   d526a:	4606      	mov	r6, r0
   d526c:	f280 80c2 	bge.w	d53f4 <setup+0x1e4>
            t = print('-');
   d5270:	212d      	movs	r1, #45	; 0x2d
   d5272:	f003 fa61 	bl	d8738 <_ZN5Print5printEc>
            val = -n;
   d5276:	4262      	negs	r2, r4
   d5278:	eb65 0345 	sbc.w	r3, r5, r5, lsl #1
        return printNumber(val, base) + t;
   d527c:	210a      	movs	r1, #10
   d527e:	9100      	str	r1, [sp, #0]
   d5280:	4630      	mov	r0, r6
   d5282:	f003 fa92 	bl	d87aa <_ZN5Print11printNumberEyh>
Serial.print("\n");
   d5286:	f003 fd9d 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d528a:	49b4      	ldr	r1, [pc, #720]	; (d555c <setup+0x34c>)
pinMode(wind_pin, INPUT);
   d528c:	4cb4      	ldr	r4, [pc, #720]	; (d5560 <setup+0x350>)
Serial.print("\n");
   d528e:	f003 fa4f 	bl	d8730 <_ZN5Print5printEPKc>
pinMode(vane_pin, INPUT);
   d5292:	4bb4      	ldr	r3, [pc, #720]	; (d5564 <setup+0x354>)
   d5294:	2100      	movs	r1, #0
   d5296:	7818      	ldrb	r0, [r3, #0]
   d5298:	f004 f818 	bl	d92cc <pinMode>
pinMode(vane_switch, OUTPUT);
   d529c:	4bb2      	ldr	r3, [pc, #712]	; (d5568 <setup+0x358>)
   d529e:	2101      	movs	r1, #1
   d52a0:	7818      	ldrb	r0, [r3, #0]
   d52a2:	f004 f813 	bl	d92cc <pinMode>
Serial.println("Vane Value\tDirection\tHeading");
   d52a6:	f003 fd8d 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d52aa:	49b0      	ldr	r1, [pc, #704]	; (d556c <setup+0x35c>)
   d52ac:	f003 fa53 	bl	d8756 <_ZN5Print7printlnEPKc>
pinMode(wind_pin, INPUT);
   d52b0:	7820      	ldrb	r0, [r4, #0]
   d52b2:	2100      	movs	r1, #0
   d52b4:	f004 f80a 	bl	d92cc <pinMode>
attachInterrupt(wind_pin, isr_rotation, FALLING);
   d52b8:	2300      	movs	r3, #0
   d52ba:	9300      	str	r3, [sp, #0]
   d52bc:	2202      	movs	r2, #2
   d52be:	f04f 33ff 	mov.w	r3, #4294967295
   d52c2:	49ab      	ldr	r1, [pc, #684]	; (d5570 <setup+0x360>)
   d52c4:	7820      	ldrb	r0, [r4, #0]
   d52c6:	f003 fda5 	bl	d8e14 <_Z15attachInterrupttPFvvE13InterruptModeah>
Serial.println("Davis Wind Speed Test");
   d52ca:	f003 fd7b 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d52ce:	49a9      	ldr	r1, [pc, #676]	; (d5574 <setup+0x364>)
   d52d0:	f003 fa41 	bl	d8756 <_ZN5Print7printlnEPKc>
Serial.println("Rotations\tMPH");
   d52d4:	f003 fd76 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d52d8:	49a7      	ldr	r1, [pc, #668]	; (d5578 <setup+0x368>)
   d52da:	f003 fa3c 	bl	d8756 <_ZN5Print7printlnEPKc>
  Serial.begin(115200);
   d52de:	f003 fd71 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d52e2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d52e6:	f003 fd5b 	bl	d8da0 <_ZN9USBSerial5beginEl>
    while(!Serial);    // time to get serial running
   d52ea:	f003 fd6b 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d52ee:	f003 fd5e 	bl	d8dae <_ZN9USBSerialcvbEv>
   d52f2:	2800      	cmp	r0, #0
   d52f4:	d0f9      	beq.n	d52ea <setup+0xda>
  display.begin(0x3C, true); // Address 0x3C default
   d52f6:	4ca1      	ldr	r4, [pc, #644]	; (d557c <setup+0x36c>)
    Serial.println(F("BME280 test"));
   d52f8:	f003 fd64 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d52fc:	49a0      	ldr	r1, [pc, #640]	; (d5580 <setup+0x370>)
   d52fe:	f003 fa34 	bl	d876a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("128x64 OLED FeatherWing test");
   d5302:	f003 fd5f 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5306:	499f      	ldr	r1, [pc, #636]	; (d5584 <setup+0x374>)
   d5308:	f003 fa25 	bl	d8756 <_ZN5Print7printlnEPKc>
  display.begin(0x3C, true); // Address 0x3C default
   d530c:	2201      	movs	r2, #1
   d530e:	213c      	movs	r1, #60	; 0x3c
   d5310:	4620      	mov	r0, r4
   d5312:	f002 fb81 	bl	d7a18 <_ZN15Adafruit_SH11075beginEhb>
  Serial.println("OLED begun");
   d5316:	f003 fd55 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d531a:	499b      	ldr	r1, [pc, #620]	; (d5588 <setup+0x378>)
   d531c:	f003 fa1b 	bl	d8756 <_ZN5Print7printlnEPKc>
  display.display();
   d5320:	4620      	mov	r0, r4
   d5322:	f002 fa82 	bl	d782a <_ZN15Adafruit_SH110X7displayEv>
  delay(1000);
   d5326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d532a:	f003 fbcf 	bl	d8acc <delay>
  display.clearDisplay();
   d532e:	4620      	mov	r0, r4
   d5330:	f001 fe08 	bl	d6f44 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d5334:	4620      	mov	r0, r4
   d5336:	f002 fa78 	bl	d782a <_ZN15Adafruit_SH110X7displayEv>
  display.setRotation(1);
   d533a:	2101      	movs	r1, #1
   d533c:	4620      	mov	r0, r4
   d533e:	f002 f807 	bl	d7350 <_ZN12Adafruit_GFX11setRotationEh>
  Serial.println("Button test");
   d5342:	f003 fd3f 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5346:	4991      	ldr	r1, [pc, #580]	; (d558c <setup+0x37c>)
   d5348:	f003 fa05 	bl	d8756 <_ZN5Print7printlnEPKc>
  pinMode(BUTTON_A, INPUT_PULLUP);
   d534c:	2102      	movs	r1, #2
   d534e:	2004      	movs	r0, #4
   d5350:	f003 ffbc 	bl	d92cc <pinMode>
  pinMode(BUTTON_B, INPUT_PULLUP);
   d5354:	2102      	movs	r1, #2
   d5356:	2003      	movs	r0, #3
   d5358:	f003 ffb8 	bl	d92cc <pinMode>
  pinMode(BUTTON_C, INPUT_PULLUP);
   d535c:	2102      	movs	r1, #2
   d535e:	4608      	mov	r0, r1
   d5360:	f003 ffb4 	bl	d92cc <pinMode>
  display.setTextSize(1);
   d5364:	2101      	movs	r1, #1
   d5366:	4620      	mov	r0, r4
   d5368:	f002 fa59 	bl	d781e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d536c:	2200      	movs	r2, #0
   d536e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d5372:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.print("BigdaddyAddie weather station!\n");
   d5376:	4986      	ldr	r1, [pc, #536]	; (d5590 <setup+0x380>)
   d5378:	4620      	mov	r0, r4
   d537a:	f003 f9d9 	bl	d8730 <_ZN5Print5printEPKc>
  display.print("connected!\n");
   d537e:	4985      	ldr	r1, [pc, #532]	; (d5594 <setup+0x384>)
   d5380:	4620      	mov	r0, r4
   d5382:	f003 f9d5 	bl	d8730 <_ZN5Print5printEPKc>
  display.display(); // actually display all of the above
   d5386:	4620      	mov	r0, r4
   d5388:	f002 fa4f 	bl	d782a <_ZN15Adafruit_SH110X7displayEv>
    status = bme.begin();  
   d538c:	4882      	ldr	r0, [pc, #520]	; (d5598 <setup+0x388>)
   d538e:	f000 fea4 	bl	d60da <_ZN15Adafruit_BME2805beginEv>
    if (!status) {
   d5392:	bb90      	cbnz	r0, d53fa <setup+0x1ea>
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d5394:	f003 fd16 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5398:	4980      	ldr	r1, [pc, #512]	; (d559c <setup+0x38c>)
   d539a:	f003 f9dc 	bl	d8756 <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),16);
   d539e:	f003 fd11 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d53a2:	497f      	ldr	r1, [pc, #508]	; (d55a0 <setup+0x390>)
   d53a4:	f003 f9c4 	bl	d8730 <_ZN5Print5printEPKc>
   d53a8:	f003 fd0c 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d53ac:	4604      	mov	r4, r0
   d53ae:	487a      	ldr	r0, [pc, #488]	; (d5598 <setup+0x388>)
   d53b0:	f000 fa14 	bl	d57dc <_ZN15Adafruit_BME2808sensorIDEv>
   d53b4:	2210      	movs	r2, #16
   d53b6:	4601      	mov	r1, r0
   d53b8:	4620      	mov	r0, r4
   d53ba:	f003 f9d8 	bl	d876e <_ZN5Print11printNumberEmh>
        n += println();
   d53be:	4620      	mov	r0, r4
   d53c0:	f003 f9bd 	bl	d873e <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d53c4:	f003 fcfe 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d53c8:	4976      	ldr	r1, [pc, #472]	; (d55a4 <setup+0x394>)
   d53ca:	f003 f9b1 	bl	d8730 <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d53ce:	f003 fcf9 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d53d2:	4975      	ldr	r1, [pc, #468]	; (d55a8 <setup+0x398>)
   d53d4:	f003 f9ac 	bl	d8730 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d53d8:	f003 fcf4 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d53dc:	4973      	ldr	r1, [pc, #460]	; (d55ac <setup+0x39c>)
   d53de:	f003 f9a7 	bl	d8730 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d53e2:	f003 fcef 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d53e6:	4972      	ldr	r1, [pc, #456]	; (d55b0 <setup+0x3a0>)
   d53e8:	f003 f9a2 	bl	d8730 <_ZN5Print5printEPKc>
        while (1) delay(10);
   d53ec:	200a      	movs	r0, #10
   d53ee:	f003 fb6d 	bl	d8acc <delay>
   d53f2:	e7fb      	b.n	d53ec <setup+0x1dc>
            val = n;
   d53f4:	4622      	mov	r2, r4
   d53f6:	462b      	mov	r3, r5
   d53f8:	e740      	b.n	d527c <setup+0x6c>
if (i2ceeprom.begin(0x50)) {  // you can stick the new i2c addr in here, e.g. begin(0x51);
   d53fa:	f003 ffeb 	bl	d93d4 <_Z19__fetch_global_Wirev>
   d53fe:	2150      	movs	r1, #80	; 0x50
   d5400:	4602      	mov	r2, r0
   d5402:	486c      	ldr	r0, [pc, #432]	; (d55b4 <setup+0x3a4>)
   d5404:	f002 fb7e 	bl	d7b04 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>
   d5408:	b1e0      	cbz	r0, d5444 <setup+0x234>
    Serial.println("Found I2C EEPROM");
   d540a:	f003 fcdb 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d540e:	496a      	ldr	r1, [pc, #424]	; (d55b8 <setup+0x3a8>)
   d5410:	f003 f9a1 	bl	d8756 <_ZN5Print7printlnEPKc>
    display.clearDisplay();
   d5414:	4620      	mov	r0, r4
   d5416:	f001 fd95 	bl	d6f44 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
    display.println("Found I2C FRAM");
   d541a:	4968      	ldr	r1, [pc, #416]	; (d55bc <setup+0x3ac>)
   d541c:	4620      	mov	r0, r4
   d541e:	f003 f99a 	bl	d8756 <_ZN5Print7printlnEPKc>
    display.display();
   d5422:	4620      	mov	r0, r4
   d5424:	f002 fa01 	bl	d782a <_ZN15Adafruit_SH110X7displayEv>
eeprom_test();
   d5428:	f7ff fa64 	bl	d48f4 <_Z11eeprom_testv>
  if(!bno.begin())
   d542c:	4864      	ldr	r0, [pc, #400]	; (d55c0 <setup+0x3b0>)
   d542e:	210c      	movs	r1, #12
   d5430:	f001 fa5a 	bl	d68e8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
   d5434:	4606      	mov	r6, r0
   d5436:	b970      	cbnz	r0, d5456 <setup+0x246>
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
   d5438:	f003 fcc4 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d543c:	4961      	ldr	r1, [pc, #388]	; (d55c4 <setup+0x3b4>)
   d543e:	f003 f977 	bl	d8730 <_ZN5Print5printEPKc>
    while(1);
   d5442:	e7fe      	b.n	d5442 <setup+0x232>
    Serial.println("I2C EEPROM not identified ... check your connections?\r\n");
   d5444:	f003 fcbe 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5448:	495f      	ldr	r1, [pc, #380]	; (d55c8 <setup+0x3b8>)
   d544a:	f003 f984 	bl	d8756 <_ZN5Print7printlnEPKc>
    while (1) delay(10);
   d544e:	200a      	movs	r0, #10
   d5450:	f003 fb3c 	bl	d8acc <delay>
   d5454:	e7fb      	b.n	d544e <setup+0x23e>
   Serial.print("time base value =");
   d5456:	f003 fcb5 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d545a:	493f      	ldr	r1, [pc, #252]	; (d5558 <setup+0x348>)
   d545c:	f003 f968 	bl	d8730 <_ZN5Print5printEPKc>
Serial.print(time_base);
   d5460:	f003 fcb0 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5464:	e9d7 4500 	ldrd	r4, r5, [r7]
        if (n < 0 && base == 10) {
   d5468:	2c00      	cmp	r4, #0
   d546a:	f175 0300 	sbcs.w	r3, r5, #0
   d546e:	4680      	mov	r8, r0
   d5470:	da66      	bge.n	d5540 <setup+0x330>
            t = print('-');
   d5472:	212d      	movs	r1, #45	; 0x2d
   d5474:	f003 f960 	bl	d8738 <_ZN5Print5printEc>
            val = -n;
   d5478:	4262      	negs	r2, r4
   d547a:	eb65 0345 	sbc.w	r3, r5, r5, lsl #1
        return printNumber(val, base) + t;
   d547e:	210a      	movs	r1, #10
   d5480:	9100      	str	r1, [sp, #0]
   d5482:	4640      	mov	r0, r8
   d5484:	f003 f991 	bl	d87aa <_ZN5Print11printNumberEyh>
Serial.print("\n");
   d5488:	f003 fc9c 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d548c:	4933      	ldr	r1, [pc, #204]	; (d555c <setup+0x34c>)
   d548e:	f003 f94f 	bl	d8730 <_ZN5Print5printEPKc>
  delay(1000);
   d5492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5496:	f003 fb19 	bl	d8acc <delay>
  displaySensorDetails();
   d549a:	f7fe fe75 	bl	d4188 <_Z20displaySensorDetailsv>
    EEPROM.get(eeAddress, bnoID);
   d549e:	f003 ff69 	bl	d9374 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d54a2:	2204      	movs	r2, #4
   d54a4:	a902      	add	r1, sp, #8
   d54a6:	2000      	movs	r0, #0
   d54a8:	f002 fd16 	bl	d7ed8 <HAL_EEPROM_Get>
    bno.getSensor(&sensor);
   d54ac:	4844      	ldr	r0, [pc, #272]	; (d55c0 <setup+0x3b0>)
   d54ae:	a918      	add	r1, sp, #96	; 0x60
   d54b0:	f001 f90c 	bl	d66cc <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    if (bnoID != sensor.sensor_id)
   d54b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   d54b6:	9b02      	ldr	r3, [sp, #8]
   d54b8:	429a      	cmp	r2, r3
   d54ba:	f000 808f 	beq.w	d55dc <setup+0x3cc>
        Serial.println("\nNo Calibration Data for this sensor exists in EEPROM");
   d54be:	f003 fc81 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d54c2:	4942      	ldr	r1, [pc, #264]	; (d55cc <setup+0x3bc>)
   d54c4:	f003 f947 	bl	d8756 <_ZN5Print7printlnEPKc>
        delay(500);
   d54c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d54cc:	f003 fafe 	bl	d8acc <delay>
    bool foundCalib = false;
   d54d0:	2600      	movs	r6, #0
    delay(1000);
   d54d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d54d6:	f003 faf9 	bl	d8acc <delay>
    displaySensorDetails();
   d54da:	f7fe fe55 	bl	d4188 <_Z20displaySensorDetailsv>
    displaySensorStatus();
   d54de:	f7ff fba3 	bl	d4c28 <_Z19displaySensorStatusv>
    bno.setExtCrystalUse(true);
   d54e2:	2101      	movs	r1, #1
   d54e4:	4836      	ldr	r0, [pc, #216]	; (d55c0 <setup+0x3b0>)
   d54e6:	f001 f94d 	bl	d6784 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
   d54ea:	f002 fce5 	bl	d7eb8 <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
   d54ee:	4b38      	ldr	r3, [pc, #224]	; (d55d0 <setup+0x3c0>)
    bno.getEvent(&event);
   d54f0:	a90f      	add	r1, sp, #60	; 0x3c
millisOld=millis();
   d54f2:	6018      	str	r0, [r3, #0]
    bno.getEvent(&event);
   d54f4:	4832      	ldr	r0, [pc, #200]	; (d55c0 <setup+0x3b0>)
   d54f6:	f001 fbd7 	bl	d6ca8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
    if (foundCalib){
   d54fa:	2e00      	cmp	r6, #0
   d54fc:	f000 808c 	beq.w	d5618 <setup+0x408>
        Serial.println("Move sensor slightly to calibrate magnetometers");
   d5500:	f003 fc60 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5504:	4933      	ldr	r1, [pc, #204]	; (d55d4 <setup+0x3c4>)
        while (!bno.isFullyCalibrated())
   d5506:	4c2e      	ldr	r4, [pc, #184]	; (d55c0 <setup+0x3b0>)
        Serial.println("Move sensor slightly to calibrate magnetometers");
   d5508:	f003 f925 	bl	d8756 <_ZN5Print7printlnEPKc>
        display.clearDisplay();
   d550c:	481b      	ldr	r0, [pc, #108]	; (d557c <setup+0x36c>)
   d550e:	f001 fd19 	bl	d6f44 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
        display.println("Move sensor slightly");
   d5512:	4931      	ldr	r1, [pc, #196]	; (d55d8 <setup+0x3c8>)
   d5514:	4819      	ldr	r0, [pc, #100]	; (d557c <setup+0x36c>)
   d5516:	f003 f91e 	bl	d8756 <_ZN5Print7printlnEPKc>
        display.display();
   d551a:	4818      	ldr	r0, [pc, #96]	; (d557c <setup+0x36c>)
   d551c:	f002 f985 	bl	d782a <_ZN15Adafruit_SH110X7displayEv>
        while (!bno.isFullyCalibrated())
   d5520:	4620      	mov	r0, r4
   d5522:	f001 fa6a 	bl	d69fa <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d5526:	2800      	cmp	r0, #0
   d5528:	f040 80b5 	bne.w	d5696 <setup+0x486>
            bno.getEvent(&event);
   d552c:	a90f      	add	r1, sp, #60	; 0x3c
   d552e:	4620      	mov	r0, r4
   d5530:	f001 fbba 	bl	d6ca8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            displayCalStatus();
   d5534:	f7ff fc04 	bl	d4d40 <_Z16displayCalStatusv>
            delay(BNO055_STARTUP_SAMPLE_DELAY_MS);
   d5538:	2064      	movs	r0, #100	; 0x64
   d553a:	f003 fac7 	bl	d8acc <delay>
        while (!bno.isFullyCalibrated())
   d553e:	e7ef      	b.n	d5520 <setup+0x310>
            val = n;
   d5540:	4622      	mov	r2, r4
   d5542:	462b      	mov	r3, r5
   d5544:	e79b      	b.n	d547e <setup+0x26e>
   d5546:	bf00      	nop
   d5548:	000dd16d 	.word	0x000dd16d
   d554c:	2003e518 	.word	0x2003e518
   d5550:	000dd174 	.word	0x000dd174
   d5554:	2003e570 	.word	0x2003e570
   d5558:	000dd18f 	.word	0x000dd18f
   d555c:	000dd081 	.word	0x000dd081
   d5560:	2003e39b 	.word	0x2003e39b
   d5564:	2003e399 	.word	0x2003e399
   d5568:	2003e39a 	.word	0x2003e39a
   d556c:	000dd1a1 	.word	0x000dd1a1
   d5570:	000d40c9 	.word	0x000d40c9
   d5574:	000dd1be 	.word	0x000dd1be
   d5578:	000dd1d4 	.word	0x000dd1d4
   d557c:	2003e4a0 	.word	0x2003e4a0
   d5580:	000dd1e2 	.word	0x000dd1e2
   d5584:	000dd1ee 	.word	0x000dd1ee
   d5588:	000dd20b 	.word	0x000dd20b
   d558c:	000dd216 	.word	0x000dd216
   d5590:	000dd222 	.word	0x000dd222
   d5594:	000dd242 	.word	0x000dd242
   d5598:	2003e424 	.word	0x2003e424
   d559c:	000dd24e 	.word	0x000dd24e
   d55a0:	000dd296 	.word	0x000dd296
   d55a4:	000dd2a7 	.word	0x000dd2a7
   d55a8:	000dd2ee 	.word	0x000dd2ee
   d55ac:	000dd318 	.word	0x000dd318
   d55b0:	000dd342 	.word	0x000dd342
   d55b4:	2003e510 	.word	0x2003e510
   d55b8:	000dd36c 	.word	0x000dd36c
   d55bc:	000dd37d 	.word	0x000dd37d
   d55c0:	2003e478 	.word	0x2003e478
   d55c4:	000dd3c4 	.word	0x000dd3c4
   d55c8:	000dd38c 	.word	0x000dd38c
   d55cc:	000dd401 	.word	0x000dd401
   d55d0:	2003e530 	.word	0x2003e530
   d55d4:	000dd4b9 	.word	0x000dd4b9
   d55d8:	000dd4e9 	.word	0x000dd4e9
        Serial.println("\nFound Calibration for this sensor in EEPROM.");
   d55dc:	f003 fbf2 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d55e0:	494d      	ldr	r1, [pc, #308]	; (d5718 <setup+0x508>)
   d55e2:	f003 f8b8 	bl	d8756 <_ZN5Print7printlnEPKc>
        EEPROM.get(eeAddress, calibrationData);
   d55e6:	f003 fec5 	bl	d9374 <_Z21__fetch_global_EEPROMv>
   d55ea:	2216      	movs	r2, #22
   d55ec:	a903      	add	r1, sp, #12
   d55ee:	2004      	movs	r0, #4
   d55f0:	f002 fc72 	bl	d7ed8 <HAL_EEPROM_Get>
        displaySensorOffsets(calibrationData);
   d55f4:	a803      	add	r0, sp, #12
   d55f6:	f7fe fe63 	bl	d42c0 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
        Serial.println("\n\nRestoring Calibration data to the BNO055...");
   d55fa:	f003 fbe3 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d55fe:	4947      	ldr	r1, [pc, #284]	; (d571c <setup+0x50c>)
   d5600:	f003 f8a9 	bl	d8756 <_ZN5Print7printlnEPKc>
        bno.setSensorOffsets(calibrationData);
   d5604:	a903      	add	r1, sp, #12
   d5606:	4846      	ldr	r0, [pc, #280]	; (d5720 <setup+0x510>)
   d5608:	f001 f8df 	bl	d67ca <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>
        Serial.println("\n\nCalibration data loaded into BNO055");
   d560c:	f003 fbda 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5610:	4944      	ldr	r1, [pc, #272]	; (d5724 <setup+0x514>)
   d5612:	f003 f8a0 	bl	d8756 <_ZN5Print7printlnEPKc>
        foundCalib = true;
   d5616:	e75c      	b.n	d54d2 <setup+0x2c2>
        Serial.println("Please Calibrate Sensor: ");
   d5618:	f003 fbd4 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d561c:	4942      	ldr	r1, [pc, #264]	; (d5728 <setup+0x518>)
        while (!bno.isFullyCalibrated())
   d561e:	4c40      	ldr	r4, [pc, #256]	; (d5720 <setup+0x510>)
            Serial.print("X: ");
   d5620:	4e42      	ldr	r6, [pc, #264]	; (d572c <setup+0x51c>)
            Serial.print("\tY: ");
   d5622:	4d43      	ldr	r5, [pc, #268]	; (d5730 <setup+0x520>)
        Serial.println("Please Calibrate Sensor: ");
   d5624:	f003 f897 	bl	d8756 <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
   d5628:	4620      	mov	r0, r4
   d562a:	f001 f9e6 	bl	d69fa <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d562e:	bb90      	cbnz	r0, d5696 <setup+0x486>
            bno.getEvent(&event);
   d5630:	a90f      	add	r1, sp, #60	; 0x3c
   d5632:	4620      	mov	r0, r4
   d5634:	f001 fb38 	bl	d6ca8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            Serial.print("X: ");
   d5638:	f003 fbc4 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d563c:	4631      	mov	r1, r6
   d563e:	f003 f877 	bl	d8730 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.x, 4);
   d5642:	f003 fbbf 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5646:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   d564a:	2104      	movs	r1, #4
   d564c:	f003 f9a6 	bl	d899c <_ZN5Print5printEfi>
            Serial.print("\tY: ");
   d5650:	f003 fbb8 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5654:	4629      	mov	r1, r5
   d5656:	f003 f86b 	bl	d8730 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.y, 4);
   d565a:	f003 fbb3 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d565e:	ed9d 0a15 	vldr	s0, [sp, #84]	; 0x54
   d5662:	2104      	movs	r1, #4
   d5664:	f003 f99a 	bl	d899c <_ZN5Print5printEfi>
            Serial.print("\tZ: ");
   d5668:	f003 fbac 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d566c:	4931      	ldr	r1, [pc, #196]	; (d5734 <setup+0x524>)
   d566e:	f003 f85f 	bl	d8730 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.z, 4);
   d5672:	f003 fba7 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5676:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   d567a:	2104      	movs	r1, #4
   d567c:	f003 f98e 	bl	d899c <_ZN5Print5printEfi>
            displayCalStatus();
   d5680:	f7ff fb5e 	bl	d4d40 <_Z16displayCalStatusv>
            Serial.println("");
   d5684:	f003 fb9e 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5688:	492b      	ldr	r1, [pc, #172]	; (d5738 <setup+0x528>)
   d568a:	f003 f864 	bl	d8756 <_ZN5Print7printlnEPKc>
            delay(BNO055_STARTUP_SAMPLE_DELAY_MS);
   d568e:	2064      	movs	r0, #100	; 0x64
   d5690:	f003 fa1c 	bl	d8acc <delay>
        while (!bno.isFullyCalibrated())
   d5694:	e7c8      	b.n	d5628 <setup+0x418>
    Serial.println("\nFully calibrated!");
   d5696:	f003 fb95 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d569a:	4928      	ldr	r1, [pc, #160]	; (d573c <setup+0x52c>)
   d569c:	f003 f85b 	bl	d8756 <_ZN5Print7printlnEPKc>
    Serial.println("--------------------------------");
   d56a0:	f003 fb90 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d56a4:	4926      	ldr	r1, [pc, #152]	; (d5740 <setup+0x530>)
   d56a6:	f003 f856 	bl	d8756 <_ZN5Print7printlnEPKc>
    Serial.println("Calibration Results: ");
   d56aa:	f003 fb8b 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d56ae:	4925      	ldr	r1, [pc, #148]	; (d5744 <setup+0x534>)
   d56b0:	f003 f851 	bl	d8756 <_ZN5Print7printlnEPKc>
    bno.getSensorOffsets(newCalib);
   d56b4:	a909      	add	r1, sp, #36	; 0x24
   d56b6:	481a      	ldr	r0, [pc, #104]	; (d5720 <setup+0x510>)
   d56b8:	f001 f9d8 	bl	d6a6c <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>
    displaySensorOffsets(newCalib);
   d56bc:	a809      	add	r0, sp, #36	; 0x24
   d56be:	f7fe fdff 	bl	d42c0 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
    Serial.println("\n\nStoring calibration data to EEPROM...");
   d56c2:	f003 fb7f 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d56c6:	4920      	ldr	r1, [pc, #128]	; (d5748 <setup+0x538>)
   d56c8:	f003 f845 	bl	d8756 <_ZN5Print7printlnEPKc>
    bno.getSensor(&sensor);
   d56cc:	a918      	add	r1, sp, #96	; 0x60
   d56ce:	4814      	ldr	r0, [pc, #80]	; (d5720 <setup+0x510>)
   d56d0:	f000 fffc 	bl	d66cc <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    bnoID = sensor.sensor_id;
   d56d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d56d6:	9302      	str	r3, [sp, #8]
    EEPROM.put(eeAddress, bnoID);
   d56d8:	f003 fe4c 	bl	d9374 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d56dc:	a902      	add	r1, sp, #8
   d56de:	2204      	movs	r2, #4
   d56e0:	2000      	movs	r0, #0
   d56e2:	f002 fc01 	bl	d7ee8 <HAL_EEPROM_Put>
    EEPROM.put(eeAddress, newCalib);
   d56e6:	f003 fe45 	bl	d9374 <_Z21__fetch_global_EEPROMv>
   d56ea:	2216      	movs	r2, #22
   d56ec:	a909      	add	r1, sp, #36	; 0x24
   d56ee:	2004      	movs	r0, #4
   d56f0:	f002 fbfa 	bl	d7ee8 <HAL_EEPROM_Put>
    Serial.println("Data stored to EEPROM.");
   d56f4:	f003 fb66 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d56f8:	4914      	ldr	r1, [pc, #80]	; (d574c <setup+0x53c>)
   d56fa:	f003 f82c 	bl	d8756 <_ZN5Print7printlnEPKc>
    Serial.println("\n--------------------------------\n");
   d56fe:	f003 fb61 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d5702:	4913      	ldr	r1, [pc, #76]	; (d5750 <setup+0x540>)
   d5704:	f003 f827 	bl	d8756 <_ZN5Print7printlnEPKc>
    delay(500);
   d5708:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d570c:	f003 f9de 	bl	d8acc <delay>
}
   d5710:	b022      	add	sp, #136	; 0x88
   d5712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5716:	bf00      	nop
   d5718:	000dd437 	.word	0x000dd437
   d571c:	000dd465 	.word	0x000dd465
   d5720:	2003e478 	.word	0x2003e478
   d5724:	000dd493 	.word	0x000dd493
   d5728:	000dd4fe 	.word	0x000dd4fe
   d572c:	000dd072 	.word	0x000dd072
   d5730:	000dd076 	.word	0x000dd076
   d5734:	000dd07b 	.word	0x000dd07b
   d5738:	000dd0cd 	.word	0x000dd0cd
   d573c:	000dd518 	.word	0x000dd518
   d5740:	000dceb8 	.word	0x000dceb8
   d5744:	000dd52b 	.word	0x000dd52b
   d5748:	000dd541 	.word	0x000dd541
   d574c:	000dd569 	.word	0x000dd569
   d5750:	000dd580 	.word	0x000dd580

000d5754 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d5754:	4770      	bx	lr

000d5756 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d5756:	b510      	push	{r4, lr}
  }
   d5758:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d575a:	4604      	mov	r4, r0
  }
   d575c:	f003 fe5e 	bl	d941c <_ZdlPvj>
   d5760:	4620      	mov	r0, r4
   d5762:	bd10      	pop	{r4, pc}

000d5764 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5764:	b40e      	push	{r1, r2, r3}
   d5766:	b503      	push	{r0, r1, lr}
   d5768:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d576a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d576c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d5770:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d5772:	f003 f922 	bl	d89ba <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d5776:	b002      	add	sp, #8
   d5778:	f85d eb04 	ldr.w	lr, [sp], #4
   d577c:	b003      	add	sp, #12
   d577e:	4770      	bx	lr

000d5780 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5780:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5782:	4604      	mov	r4, r0
   d5784:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d5786:	7922      	ldrb	r2, [r4, #4]
   d5788:	68a3      	ldr	r3, [r4, #8]
   d578a:	b132      	cbz	r2, d579a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d578c:	b9a3      	cbnz	r3, d57b8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d578e:	490b      	ldr	r1, [pc, #44]	; (d57bc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d5790:	b002      	add	sp, #8
   d5792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d5796:	f002 bfcb 	b.w	d8730 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d579a:	4a09      	ldr	r2, [pc, #36]	; (d57c0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d579c:	7b26      	ldrb	r6, [r4, #12]
   d579e:	4d09      	ldr	r5, [pc, #36]	; (d57c4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d57a0:	4909      	ldr	r1, [pc, #36]	; (d57c8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d57a2:	7b64      	ldrb	r4, [r4, #13]
   d57a4:	2e01      	cmp	r6, #1
   d57a6:	bf18      	it	ne
   d57a8:	4629      	movne	r1, r5
   d57aa:	e9cd 1400 	strd	r1, r4, [sp]
   d57ae:	4907      	ldr	r1, [pc, #28]	; (d57cc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d57b0:	f7ff ffd8 	bl	d5764 <_ZN5Print6printfEPKcz>
  }
   d57b4:	b002      	add	sp, #8
   d57b6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d57b8:	4a05      	ldr	r2, [pc, #20]	; (d57d0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d57ba:	e7ef      	b.n	d579c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d57bc:	000dd5b4 	.word	0x000dd5b4
   d57c0:	000dd0cd 	.word	0x000dd0cd
   d57c4:	000dd5b0 	.word	0x000dd5b0
   d57c8:	000dd5ac 	.word	0x000dd5ac
   d57cc:	000dd5ca 	.word	0x000dd5ca
   d57d0:	000dd5a3 	.word	0x000dd5a3

000d57d4 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d57d4:	f04f 33ff 	mov.w	r3, #4294967295
   d57d8:	6103      	str	r3, [r0, #16]
{ }
   d57da:	4770      	bx	lr

000d57dc <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d57dc:	6880      	ldr	r0, [r0, #8]
   d57de:	4770      	bx	lr

000d57e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d57e0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d57e2:	4c0b      	ldr	r4, [pc, #44]	; (d5810 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d57e4:	7821      	ldrb	r1, [r4, #0]
   d57e6:	f3bf 8f5b 	dmb	ish
   d57ea:	f011 0101 	ands.w	r1, r1, #1
   d57ee:	d10b      	bne.n	d5808 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d57f0:	4620      	mov	r0, r4
   d57f2:	9101      	str	r1, [sp, #4]
   d57f4:	f7fe fc60 	bl	d40b8 <__cxa_guard_acquire>
   d57f8:	9901      	ldr	r1, [sp, #4]
   d57fa:	b128      	cbz	r0, d5808 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d57fc:	4805      	ldr	r0, [pc, #20]	; (d5814 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d57fe:	f002 fe03 	bl	d8408 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5802:	4620      	mov	r0, r4
   d5804:	f7fe fc5d 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d5808:	4802      	ldr	r0, [pc, #8]	; (d5814 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d580a:	b002      	add	sp, #8
   d580c:	bd10      	pop	{r4, pc}
   d580e:	bf00      	nop
   d5810:	2003e57c 	.word	0x2003e57c
   d5814:	2003e580 	.word	0x2003e580

000d5818 <_ZN15Adafruit_BME2807spixferEh>:
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sck == -1)
   d581c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5820:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5822:	4605      	mov	r5, r0
   d5824:	460f      	mov	r7, r1
    if (_sck == -1)
   d5826:	d106      	bne.n	d5836 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5828:	f7ff ffda 	bl	d57e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d582c:	4639      	mov	r1, r7
}
   d582e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d5832:	f002 be8b 	b.w	d854c <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d5836:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d5838:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d583a:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d583e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d5842:	2100      	movs	r1, #0
   d5844:	b280      	uxth	r0, r0
   d5846:	f003 fd52 	bl	d92ee <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d584a:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d584e:	fa08 f106 	lsl.w	r1, r8, r6
   d5852:	4039      	ands	r1, r7
   d5854:	b280      	uxth	r0, r0
   d5856:	f003 fd4a 	bl	d92ee <digitalWrite>
        digitalWrite(_sck, HIGH);
   d585a:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d585e:	2101      	movs	r1, #1
   d5860:	b280      	uxth	r0, r0
   d5862:	f003 fd44 	bl	d92ee <digitalWrite>
        if (digitalRead(_miso))
   d5866:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d586a:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d586c:	b280      	uxth	r0, r0
        reply <<= 1;
   d586e:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d5870:	f003 fd56 	bl	d9320 <digitalRead>
   d5874:	b108      	cbz	r0, d587a <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d5876:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d587a:	3e01      	subs	r6, #1
   d587c:	d2df      	bcs.n	d583e <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d587e:	4620      	mov	r0, r4
   d5880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5884 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d5884:	b508      	push	{r3, lr}
        instance().endTransaction();
   d5886:	f7ff ffab 	bl	d57e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d588a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d588e:	f002 bdd6 	b.w	d843e <_ZN8SPIClass14endTransactionEv>

000d5892 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d5892:	b507      	push	{r0, r1, r2, lr}
   d5894:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d5896:	f7ff ffa3 	bl	d57e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d589a:	9901      	ldr	r1, [sp, #4]
    }
   d589c:	b003      	add	sp, #12
   d589e:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d58a2:	f002 bde5 	b.w	d8470 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d58a8 <_ZN15Adafruit_BME2806read24Eh>:
{
   d58a8:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d58aa:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d58ae:	3301      	adds	r3, #1
{
   d58b0:	b085      	sub	sp, #20
   d58b2:	4604      	mov	r4, r0
   d58b4:	460d      	mov	r5, r1
    if (_cs == -1) {
   d58b6:	d123      	bne.n	d5900 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d58b8:	7901      	ldrb	r1, [r0, #4]
   d58ba:	6800      	ldr	r0, [r0, #0]
   d58bc:	f003 fc0e 	bl	d90dc <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d58c0:	6820      	ldr	r0, [r4, #0]
   d58c2:	6803      	ldr	r3, [r0, #0]
   d58c4:	4629      	mov	r1, r5
   d58c6:	689b      	ldr	r3, [r3, #8]
   d58c8:	4798      	blx	r3
        _wire -> endTransmission();
   d58ca:	6820      	ldr	r0, [r4, #0]
   d58cc:	f003 fc0e 	bl	d90ec <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d58d0:	7921      	ldrb	r1, [r4, #4]
   d58d2:	6820      	ldr	r0, [r4, #0]
   d58d4:	2203      	movs	r2, #3
   d58d6:	f003 fbfe 	bl	d90d6 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d58da:	6820      	ldr	r0, [r4, #0]
   d58dc:	6803      	ldr	r3, [r0, #0]
   d58de:	695b      	ldr	r3, [r3, #20]
   d58e0:	4798      	blx	r3
        value <<= 8;
   d58e2:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d58e4:	6820      	ldr	r0, [r4, #0]
   d58e6:	6803      	ldr	r3, [r0, #0]
   d58e8:	695b      	ldr	r3, [r3, #20]
   d58ea:	4798      	blx	r3
   d58ec:	4328      	orrs	r0, r5
        value <<= 8;
   d58ee:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d58f0:	6820      	ldr	r0, [r4, #0]
   d58f2:	6803      	ldr	r3, [r0, #0]
   d58f4:	695b      	ldr	r3, [r3, #20]
   d58f6:	4798      	blx	r3
   d58f8:	4305      	orrs	r5, r0
}
   d58fa:	4628      	mov	r0, r5
   d58fc:	b005      	add	sp, #20
   d58fe:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5900:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5904:	3301      	adds	r3, #1
   d5906:	d10c      	bne.n	d5922 <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d5908:	4b1a      	ldr	r3, [pc, #104]	; (d5974 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d590a:	9300      	str	r3, [sp, #0]
   d590c:	2300      	movs	r3, #0
   d590e:	f88d 3004 	strb.w	r3, [sp, #4]
   d5912:	4b19      	ldr	r3, [pc, #100]	; (d5978 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d5914:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5916:	4668      	mov	r0, sp
   d5918:	2301      	movs	r3, #1
   d591a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d591e:	f7ff ffb8 	bl	d5892 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5922:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5926:	2100      	movs	r1, #0
   d5928:	b280      	uxth	r0, r0
   d592a:	f003 fce0 	bl	d92ee <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d592e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5932:	4620      	mov	r0, r4
   d5934:	f7ff ff70 	bl	d5818 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5938:	2100      	movs	r1, #0
   d593a:	4620      	mov	r0, r4
   d593c:	f7ff ff6c 	bl	d5818 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d5940:	2100      	movs	r1, #0
        value <<= 8;
   d5942:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5944:	4620      	mov	r0, r4
   d5946:	f7ff ff67 	bl	d5818 <_ZN15Adafruit_BME2807spixferEh>
   d594a:	4328      	orrs	r0, r5
        value <<= 8;
   d594c:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d594e:	2100      	movs	r1, #0
   d5950:	4620      	mov	r0, r4
   d5952:	f7ff ff61 	bl	d5818 <_ZN15Adafruit_BME2807spixferEh>
   d5956:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d5958:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d595c:	2101      	movs	r1, #1
   d595e:	b280      	uxth	r0, r0
   d5960:	f003 fcc5 	bl	d92ee <digitalWrite>
        if (_sck == -1)
   d5964:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5968:	3301      	adds	r3, #1
   d596a:	d1c6      	bne.n	d58fa <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d596c:	f7ff ff8a 	bl	d5884 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d5970:	e7c3      	b.n	d58fa <_ZN15Adafruit_BME2806read24Eh+0x52>
   d5972:	bf00      	nop
   d5974:	000dd5f0 	.word	0x000dd5f0
   d5978:	0007a120 	.word	0x0007a120

000d597c <_ZN15Adafruit_BME28015readTemperatureEv>:
{
   d597c:	b510      	push	{r4, lr}
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d597e:	21fa      	movs	r1, #250	; 0xfa
{
   d5980:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5982:	f7ff ff91 	bl	d58a8 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d5986:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d598a:	d01e      	beq.n	d59ca <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d598c:	8aa1      	ldrh	r1, [r4, #20]
    return T/100;
   d598e:	ed9f 7a10 	vldr	s14, [pc, #64]	; d59d0 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5992:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5994:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5998:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d599c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d59a0:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d59a2:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d59a4:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d59a8:	1312      	asrs	r2, r2, #12
   d59aa:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d59ac:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d59ae:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d59b2:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d59b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d59b8:	3380      	adds	r3, #128	; 0x80
   d59ba:	121b      	asrs	r3, r3, #8
   d59bc:	ee07 3a90 	vmov	s15, r3
   d59c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d59c4:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d59c8:	bd10      	pop	{r4, pc}
        return NAN;
   d59ca:	ed9f 0a02 	vldr	s0, [pc, #8]	; d59d4 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d59ce:	e7fb      	b.n	d59c8 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d59d0:	42c80000 	.word	0x42c80000
   d59d4:	7fc00000 	.word	0x7fc00000

000d59d8 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   d59d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d59dc:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d59de:	f7ff ffcd 	bl	d597c <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d59e2:	21f7      	movs	r1, #247	; 0xf7
   d59e4:	4620      	mov	r0, r4
   d59e6:	f7ff ff5f 	bl	d58a8 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d59ea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d59ee:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d59f0:	f000 80bf 	beq.w	d5b72 <_ZN15Adafruit_BME28012readPressureEv+0x19a>
    var1 = ((int64_t)t_fine) - 128000;
   d59f4:	68e0      	ldr	r0, [r4, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d59f6:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
   d59fa:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d59fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d5a02:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5a06:	fba3 8903 	umull	r8, r9, r3, r3
   d5a0a:	fb03 f102 	mul.w	r1, r3, r2
   d5a0e:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5a12:	17f7      	asrs	r7, r6, #31
   d5a14:	fb06 f102 	mul.w	r1, r6, r2
   d5a18:	fb03 1107 	mla	r1, r3, r7, r1
   d5a1c:	fba6 6703 	umull	r6, r7, r6, r3
   d5a20:	440f      	add	r7, r1
   d5a22:	0339      	lsls	r1, r7, #12
   d5a24:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d5a28:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5a2a:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
   d5a2e:	17f7      	asrs	r7, r6, #31
   d5a30:	fb06 fc09 	mul.w	ip, r6, r9
   d5a34:	fb08 cc07 	mla	ip, r8, r7, ip
   d5a38:	fba6 6708 	umull	r6, r7, r6, r8
   d5a3c:	4467      	add	r7, ip
   d5a3e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d5a42:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5a46:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5a48:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d5a4c:	eb1c 0000 	adds.w	r0, ip, r0
   d5a50:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5a54:	3000      	adds	r0, #0
   d5a56:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d5a5a:	fba0 0106 	umull	r0, r1, r0, r6
   d5a5e:	fb06 110e 	mla	r1, r6, lr, r1
   d5a62:	104e      	asrs	r6, r1, #1
   d5a64:	17cf      	asrs	r7, r1, #31
    if (var1 == 0) {
   d5a66:	ea56 0107 	orrs.w	r1, r6, r7
   d5a6a:	f000 8085 	beq.w	d5b78 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5a6e:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
   d5a72:	fb00 fc09 	mul.w	ip, r0, r9
   d5a76:	17c1      	asrs	r1, r0, #31
   d5a78:	fb08 cc01 	mla	ip, r8, r1, ip
   d5a7c:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5a80:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
   d5a84:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d5a88:	fb08 f202 	mul.w	r2, r8, r2
   d5a8c:	fb03 2209 	mla	r2, r3, r9, r2
   d5a90:	fba8 8903 	umull	r8, r9, r8, r3
   d5a94:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5a96:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5a98:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d5a9c:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d5aa0:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5aa2:	1812      	adds	r2, r2, r0
    p = 1048576 - adc_P;
   d5aa4:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5aa8:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5aac:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5ab0:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5ab4:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d5ab6:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5ab8:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d5aba:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d5abe:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5ac2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d5ac6:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d5aca:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d5ace:	1ac0      	subs	r0, r0, r3
   d5ad0:	f640 4335 	movw	r3, #3125	; 0xc35
   d5ad4:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d5ad8:	fba0 0103 	umull	r0, r1, r0, r3
   d5adc:	fb03 110e 	mla	r1, r3, lr, r1
   d5ae0:	4632      	mov	r2, r6
   d5ae2:	463b      	mov	r3, r7
   d5ae4:	f006 ff20 	bl	dc928 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5ae8:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d5aec:	134d      	asrs	r5, r1, #13
   d5aee:	0b46      	lsrs	r6, r0, #13
   d5af0:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d5af4:	fb02 f705 	mul.w	r7, r2, r5
   d5af8:	17d3      	asrs	r3, r2, #31
   d5afa:	fb06 7703 	mla	r7, r6, r3, r7
   d5afe:	fba2 2306 	umull	r2, r3, r2, r6
   d5b02:	443b      	add	r3, r7
   d5b04:	4355      	muls	r5, r2
   d5b06:	fb06 5503 	mla	r5, r6, r3, r5
   d5b0a:	fba2 2306 	umull	r2, r3, r2, r6
   d5b0e:	442b      	add	r3, r5
   d5b10:	0e55      	lsrs	r5, r2, #25
   d5b12:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5b16:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5b1a:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   d5b1e:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5b20:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5b24:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5b28:	17d3      	asrs	r3, r2, #31
   d5b2a:	4351      	muls	r1, r2
   d5b2c:	fb00 1103 	mla	r1, r0, r3, r1
   d5b30:	fba2 2300 	umull	r2, r3, r2, r0
   d5b34:	440b      	add	r3, r1
   d5b36:	0cd1      	lsrs	r1, r2, #19
   d5b38:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5b3c:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5b3e:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5b42:	eb46 0300 	adc.w	r3, r6, r0
   d5b46:	0a2a      	lsrs	r2, r5, #8
   d5b48:	17e5      	asrs	r5, r4, #31
   d5b4a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d5b4e:	1219      	asrs	r1, r3, #8
   d5b50:	0120      	lsls	r0, r4, #4
   d5b52:	012b      	lsls	r3, r5, #4
   d5b54:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d5b58:	1880      	adds	r0, r0, r2
   d5b5a:	eb43 0101 	adc.w	r1, r3, r1
   d5b5e:	f006 fea5 	bl	dc8ac <__aeabi_l2f>
   d5b62:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5b80 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d5b66:	ee07 0a90 	vmov	s15, r0
   d5b6a:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d5b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d5b72:	ed9f 0a04 	vldr	s0, [pc, #16]	; d5b84 <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d5b76:	e7fa      	b.n	d5b6e <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d5b78:	ed9f 0a03 	vldr	s0, [pc, #12]	; d5b88 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d5b7c:	e7f7      	b.n	d5b6e <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d5b7e:	bf00      	nop
   d5b80:	3b800000 	.word	0x3b800000
   d5b84:	7fc00000 	.word	0x7fc00000
	...

000d5b90 <_ZN15Adafruit_BME28012readAltitudeEf>:
{
   d5b90:	b508      	push	{r3, lr}
   d5b92:	ed2d 8b02 	vpush	{d8}
   d5b96:	eeb0 8a40 	vmov.f32	s16, s0
    float atmospheric = readPressure() / 100.0F;
   d5b9a:	f7ff ff1d 	bl	d59d8 <_ZN15Adafruit_BME28012readPressureEv>
   d5b9e:	ed9f 7a16 	vldr	s14, [pc, #88]	; d5bf8 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d5ba2:	eec0 7a07 	vdiv.f32	s15, s0, s14
      return pow(__type(__x), __type(__y));
   d5ba6:	eec7 7a88 	vdiv.f32	s15, s15, s16
   d5baa:	ee17 0a90 	vmov	r0, s15
   d5bae:	f006 fa0d 	bl	dbfcc <__aeabi_f2d>
   d5bb2:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d5be8 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d5bb6:	ec41 0b10 	vmov	d0, r0, r1
   d5bba:	f003 fcc9 	bl	d9550 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d5bbe:	490f      	ldr	r1, [pc, #60]	; (d5bfc <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d5bc0:	ec53 2b10 	vmov	r2, r3, d0
   d5bc4:	2000      	movs	r0, #0
   d5bc6:	f006 f8a1 	bl	dbd0c <__aeabi_dsub>
   d5bca:	a309      	add	r3, pc, #36	; (adr r3, d5bf0 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d5bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5bd0:	f006 fa54 	bl	dc07c <__aeabi_dmul>
   d5bd4:	f006 fd4a 	bl	dc66c <__aeabi_d2f>
}
   d5bd8:	ecbd 8b02 	vpop	{d8}
   d5bdc:	ee00 0a10 	vmov	s0, r0
   d5be0:	bd08      	pop	{r3, pc}
   d5be2:	bf00      	nop
   d5be4:	f3af 8000 	nop.w
   d5be8:	1a36e2eb 	.word	0x1a36e2eb
   d5bec:	3fc85bc0 	.word	0x3fc85bc0
   d5bf0:	00000000 	.word	0x00000000
   d5bf4:	40e5a540 	.word	0x40e5a540
   d5bf8:	42c80000 	.word	0x42c80000
   d5bfc:	3ff00000 	.word	0x3ff00000

000d5c00 <_ZN15Adafruit_BME2806read16Eh>:
{
   d5c00:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5c02:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5c06:	3301      	adds	r3, #1
{
   d5c08:	b085      	sub	sp, #20
   d5c0a:	4604      	mov	r4, r0
   d5c0c:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5c0e:	d11f      	bne.n	d5c50 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5c10:	7901      	ldrb	r1, [r0, #4]
   d5c12:	6800      	ldr	r0, [r0, #0]
   d5c14:	f003 fa62 	bl	d90dc <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5c18:	6820      	ldr	r0, [r4, #0]
   d5c1a:	6803      	ldr	r3, [r0, #0]
   d5c1c:	4629      	mov	r1, r5
   d5c1e:	689b      	ldr	r3, [r3, #8]
   d5c20:	4798      	blx	r3
        _wire -> endTransmission();
   d5c22:	6820      	ldr	r0, [r4, #0]
   d5c24:	f003 fa62 	bl	d90ec <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d5c28:	7921      	ldrb	r1, [r4, #4]
   d5c2a:	6820      	ldr	r0, [r4, #0]
   d5c2c:	2202      	movs	r2, #2
   d5c2e:	f003 fa52 	bl	d90d6 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d5c32:	6820      	ldr	r0, [r4, #0]
   d5c34:	6803      	ldr	r3, [r0, #0]
   d5c36:	695b      	ldr	r3, [r3, #20]
   d5c38:	4798      	blx	r3
   d5c3a:	4605      	mov	r5, r0
   d5c3c:	6820      	ldr	r0, [r4, #0]
   d5c3e:	6803      	ldr	r3, [r0, #0]
   d5c40:	695b      	ldr	r3, [r3, #20]
   d5c42:	4798      	blx	r3
   d5c44:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5c48:	b285      	uxth	r5, r0
}
   d5c4a:	4628      	mov	r0, r5
   d5c4c:	b005      	add	sp, #20
   d5c4e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5c50:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5c54:	3301      	adds	r3, #1
   d5c56:	d10c      	bne.n	d5c72 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d5c58:	4b18      	ldr	r3, [pc, #96]	; (d5cbc <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d5c5a:	9300      	str	r3, [sp, #0]
   d5c5c:	2300      	movs	r3, #0
   d5c5e:	f88d 3004 	strb.w	r3, [sp, #4]
   d5c62:	4b17      	ldr	r3, [pc, #92]	; (d5cc0 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d5c64:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5c66:	4668      	mov	r0, sp
   d5c68:	2301      	movs	r3, #1
   d5c6a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5c6e:	f7ff fe10 	bl	d5892 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5c72:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5c76:	2100      	movs	r1, #0
   d5c78:	b280      	uxth	r0, r0
   d5c7a:	f003 fb38 	bl	d92ee <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5c7e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5c82:	4620      	mov	r0, r4
   d5c84:	f7ff fdc8 	bl	d5818 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5c88:	2100      	movs	r1, #0
   d5c8a:	4620      	mov	r0, r4
   d5c8c:	f7ff fdc4 	bl	d5818 <_ZN15Adafruit_BME2807spixferEh>
   d5c90:	2100      	movs	r1, #0
   d5c92:	4605      	mov	r5, r0
   d5c94:	4620      	mov	r0, r4
   d5c96:	f7ff fdbf 	bl	d5818 <_ZN15Adafruit_BME2807spixferEh>
   d5c9a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5c9e:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d5ca0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5ca4:	2101      	movs	r1, #1
   d5ca6:	b280      	uxth	r0, r0
   d5ca8:	f003 fb21 	bl	d92ee <digitalWrite>
        if (_sck == -1)
   d5cac:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5cb0:	3301      	adds	r3, #1
   d5cb2:	d1ca      	bne.n	d5c4a <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d5cb4:	f7ff fde6 	bl	d5884 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5cb8:	e7c7      	b.n	d5c4a <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d5cba:	bf00      	nop
   d5cbc:	000dd5f0 	.word	0x000dd5f0
   d5cc0:	0007a120 	.word	0x0007a120

000d5cc4 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d5cc4:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d5cc6:	f7ff ff9b 	bl	d5c00 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d5cca:	ba40      	rev16	r0, r0
}
   d5ccc:	b280      	uxth	r0, r0
   d5cce:	bd08      	pop	{r3, pc}

000d5cd0 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
   d5cd0:	b538      	push	{r3, r4, r5, lr}
   d5cd2:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5cd4:	f7ff fe52 	bl	d597c <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d5cd8:	21fd      	movs	r1, #253	; 0xfd
   d5cda:	4620      	mov	r0, r4
   d5cdc:	f7ff ff90 	bl	d5c00 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d5ce0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d5ce4:	d038      	beq.n	d5d58 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5ce6:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5cea:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5cec:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5cf0:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5cf2:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5cf6:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d5cfa:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5cfe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d5d02:	13d9      	asrs	r1, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5d04:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d5d08:	4353      	muls	r3, r2
   d5d0a:	12db      	asrs	r3, r3, #11
   d5d0c:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d5d10:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d5d14:	4353      	muls	r3, r2
   d5d16:	129b      	asrs	r3, r3, #10
   d5d18:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5d1a:	129b      	asrs	r3, r3, #10
   d5d1c:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d5d20:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d5d24:	4353      	muls	r3, r2
   d5d26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d5d2a:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5d2c:	434b      	muls	r3, r1
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5d2e:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d5d30:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5d34:	4352      	muls	r2, r2
   d5d36:	11d2      	asrs	r2, r2, #7
   d5d38:	434a      	muls	r2, r1
   d5d3a:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d5d3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d5d42:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d5d46:	bfa8      	it	ge
   d5d48:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d5d4c:	131b      	asrs	r3, r3, #12
   d5d4e:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d5d52:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d5d56:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d5d58:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5d60 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d5d5c:	e7fb      	b.n	d5d56 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d5d5e:	bf00      	nop
   d5d60:	7fc00000 	.word	0x7fc00000

000d5d64 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d5d64:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5d66:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5d6a:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d5d6c:	b085      	sub	sp, #20
   d5d6e:	4604      	mov	r4, r0
   d5d70:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5d72:	d118      	bne.n	d5da6 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5d74:	7901      	ldrb	r1, [r0, #4]
   d5d76:	6800      	ldr	r0, [r0, #0]
   d5d78:	f003 f9b0 	bl	d90dc <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5d7c:	6820      	ldr	r0, [r4, #0]
   d5d7e:	6803      	ldr	r3, [r0, #0]
   d5d80:	4629      	mov	r1, r5
   d5d82:	689b      	ldr	r3, [r3, #8]
   d5d84:	4798      	blx	r3
        _wire -> endTransmission();
   d5d86:	6820      	ldr	r0, [r4, #0]
   d5d88:	f003 f9b0 	bl	d90ec <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d5d8c:	7921      	ldrb	r1, [r4, #4]
   d5d8e:	6820      	ldr	r0, [r4, #0]
   d5d90:	2201      	movs	r2, #1
   d5d92:	f003 f9a0 	bl	d90d6 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d5d96:	6820      	ldr	r0, [r4, #0]
   d5d98:	6803      	ldr	r3, [r0, #0]
   d5d9a:	695b      	ldr	r3, [r3, #20]
   d5d9c:	4798      	blx	r3
   d5d9e:	b2c5      	uxtb	r5, r0
}
   d5da0:	4628      	mov	r0, r5
   d5da2:	b005      	add	sp, #20
   d5da4:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5da6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5daa:	3301      	adds	r3, #1
   d5dac:	d10c      	bne.n	d5dc8 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d5dae:	4b15      	ldr	r3, [pc, #84]	; (d5e04 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d5db0:	9300      	str	r3, [sp, #0]
   d5db2:	2300      	movs	r3, #0
   d5db4:	f88d 3004 	strb.w	r3, [sp, #4]
   d5db8:	4b13      	ldr	r3, [pc, #76]	; (d5e08 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d5dba:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5dbc:	4668      	mov	r0, sp
   d5dbe:	2301      	movs	r3, #1
   d5dc0:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5dc4:	f7ff fd65 	bl	d5892 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5dc8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5dcc:	2100      	movs	r1, #0
   d5dce:	b280      	uxth	r0, r0
   d5dd0:	f003 fa8d 	bl	d92ee <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5dd4:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5dd8:	4620      	mov	r0, r4
   d5dda:	f7ff fd1d 	bl	d5818 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5dde:	2100      	movs	r1, #0
   d5de0:	4620      	mov	r0, r4
   d5de2:	f7ff fd19 	bl	d5818 <_ZN15Adafruit_BME2807spixferEh>
   d5de6:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d5de8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5dec:	2101      	movs	r1, #1
   d5dee:	b280      	uxth	r0, r0
   d5df0:	f003 fa7d 	bl	d92ee <digitalWrite>
        if (_sck == -1)
   d5df4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5df8:	3301      	adds	r3, #1
   d5dfa:	d1d1      	bne.n	d5da0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d5dfc:	f7ff fd42 	bl	d5884 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5e00:	e7ce      	b.n	d5da0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d5e02:	bf00      	nop
   d5e04:	000dd5f0 	.word	0x000dd5f0
   d5e08:	0007a120 	.word	0x0007a120

000d5e0c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d5e0c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d5e0e:	21f3      	movs	r1, #243	; 0xf3
   d5e10:	f7ff ffa8 	bl	d5d64 <_ZN15Adafruit_BME2805read8Eh>
}
   d5e14:	f000 0001 	and.w	r0, r0, #1
   d5e18:	bd08      	pop	{r3, pc}

000d5e1a <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d5e1a:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5e1c:	2188      	movs	r1, #136	; 0x88
{
   d5e1e:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5e20:	f7ff ff50 	bl	d5cc4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5e24:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5e26:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d5e28:	4620      	mov	r0, r4
   d5e2a:	f7ff ff4b 	bl	d5cc4 <_ZN15Adafruit_BME2809read16_LEEh>
   d5e2e:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d5e30:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d5e32:	4620      	mov	r0, r4
   d5e34:	f7ff ff46 	bl	d5cc4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5e38:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d5e3a:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5e3c:	4620      	mov	r0, r4
   d5e3e:	f7ff ff41 	bl	d5cc4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5e42:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5e44:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d5e46:	4620      	mov	r0, r4
   d5e48:	f7ff ff3c 	bl	d5cc4 <_ZN15Adafruit_BME2809read16_LEEh>
   d5e4c:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d5e4e:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d5e50:	4620      	mov	r0, r4
   d5e52:	f7ff ff37 	bl	d5cc4 <_ZN15Adafruit_BME2809read16_LEEh>
   d5e56:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5e58:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d5e5a:	4620      	mov	r0, r4
   d5e5c:	f7ff ff32 	bl	d5cc4 <_ZN15Adafruit_BME2809read16_LEEh>
   d5e60:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d5e62:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d5e64:	4620      	mov	r0, r4
   d5e66:	f7ff ff2d 	bl	d5cc4 <_ZN15Adafruit_BME2809read16_LEEh>
   d5e6a:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d5e6c:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d5e6e:	4620      	mov	r0, r4
   d5e70:	f7ff ff28 	bl	d5cc4 <_ZN15Adafruit_BME2809read16_LEEh>
   d5e74:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d5e76:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d5e78:	4620      	mov	r0, r4
   d5e7a:	f7ff ff23 	bl	d5cc4 <_ZN15Adafruit_BME2809read16_LEEh>
   d5e7e:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d5e80:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d5e82:	4620      	mov	r0, r4
   d5e84:	f7ff ff1e 	bl	d5cc4 <_ZN15Adafruit_BME2809read16_LEEh>
   d5e88:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d5e8a:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d5e8c:	4620      	mov	r0, r4
   d5e8e:	f7ff ff19 	bl	d5cc4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5e92:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d5e94:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5e96:	4620      	mov	r0, r4
   d5e98:	f7ff ff64 	bl	d5d64 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d5e9c:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5e9e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d5ea2:	4620      	mov	r0, r4
   d5ea4:	f7ff ff0e 	bl	d5cc4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5ea8:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d5eaa:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5eac:	4620      	mov	r0, r4
   d5eae:	f7ff ff59 	bl	d5d64 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5eb2:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5eb4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5eb8:	4620      	mov	r0, r4
   d5eba:	f7ff ff53 	bl	d5d64 <_ZN15Adafruit_BME2805read8Eh>
   d5ebe:	21e5      	movs	r1, #229	; 0xe5
   d5ec0:	4605      	mov	r5, r0
   d5ec2:	4620      	mov	r0, r4
   d5ec4:	f7ff ff4e 	bl	d5d64 <_ZN15Adafruit_BME2805read8Eh>
   d5ec8:	f000 030f 	and.w	r3, r0, #15
   d5ecc:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d5ed0:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d5ed2:	21e6      	movs	r1, #230	; 0xe6
   d5ed4:	4620      	mov	r0, r4
   d5ed6:	f7ff ff45 	bl	d5d64 <_ZN15Adafruit_BME2805read8Eh>
   d5eda:	21e5      	movs	r1, #229	; 0xe5
   d5edc:	4605      	mov	r5, r0
   d5ede:	4620      	mov	r0, r4
   d5ee0:	f7ff ff40 	bl	d5d64 <_ZN15Adafruit_BME2805read8Eh>
   d5ee4:	1103      	asrs	r3, r0, #4
   d5ee6:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d5eea:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d5eec:	21e7      	movs	r1, #231	; 0xe7
   d5eee:	4620      	mov	r0, r4
   d5ef0:	f7ff ff38 	bl	d5d64 <_ZN15Adafruit_BME2805read8Eh>
   d5ef4:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d5ef8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5efc <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d5efc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d5efe:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5f02:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d5f04:	4604      	mov	r4, r0
   d5f06:	460e      	mov	r6, r1
   d5f08:	4615      	mov	r5, r2
    if (_cs == -1) {
   d5f0a:	d112      	bne.n	d5f32 <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5f0c:	7901      	ldrb	r1, [r0, #4]
   d5f0e:	6800      	ldr	r0, [r0, #0]
   d5f10:	f003 f8e4 	bl	d90dc <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5f14:	6820      	ldr	r0, [r4, #0]
   d5f16:	6803      	ldr	r3, [r0, #0]
   d5f18:	4631      	mov	r1, r6
   d5f1a:	689b      	ldr	r3, [r3, #8]
   d5f1c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d5f1e:	6820      	ldr	r0, [r4, #0]
   d5f20:	6803      	ldr	r3, [r0, #0]
   d5f22:	4629      	mov	r1, r5
   d5f24:	689b      	ldr	r3, [r3, #8]
   d5f26:	4798      	blx	r3
        _wire -> endTransmission();
   d5f28:	6820      	ldr	r0, [r4, #0]
   d5f2a:	f003 f8df 	bl	d90ec <_ZN7TwoWire15endTransmissionEv>
}
   d5f2e:	b004      	add	sp, #16
   d5f30:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d5f32:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5f36:	3301      	adds	r3, #1
   d5f38:	d10c      	bne.n	d5f54 <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d5f3a:	4b14      	ldr	r3, [pc, #80]	; (d5f8c <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d5f3c:	9300      	str	r3, [sp, #0]
   d5f3e:	2300      	movs	r3, #0
   d5f40:	f88d 3004 	strb.w	r3, [sp, #4]
   d5f44:	4b12      	ldr	r3, [pc, #72]	; (d5f90 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d5f46:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5f48:	4668      	mov	r0, sp
   d5f4a:	2301      	movs	r3, #1
   d5f4c:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5f50:	f7ff fc9f 	bl	d5892 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5f54:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5f58:	2100      	movs	r1, #0
   d5f5a:	b280      	uxth	r0, r0
   d5f5c:	f003 f9c7 	bl	d92ee <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d5f60:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d5f64:	4620      	mov	r0, r4
   d5f66:	f7ff fc57 	bl	d5818 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d5f6a:	4629      	mov	r1, r5
   d5f6c:	4620      	mov	r0, r4
   d5f6e:	f7ff fc53 	bl	d5818 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d5f72:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5f76:	2101      	movs	r1, #1
   d5f78:	b280      	uxth	r0, r0
   d5f7a:	f003 f9b8 	bl	d92ee <digitalWrite>
    if (_sck == -1)
   d5f7e:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5f82:	3301      	adds	r3, #1
   d5f84:	d1d3      	bne.n	d5f2e <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d5f86:	f7ff fc7d 	bl	d5884 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d5f8a:	e7d0      	b.n	d5f2e <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d5f8c:	000dd5f0 	.word	0x000dd5f0
   d5f90:	0007a120 	.word	0x0007a120

000d5f94 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d5f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d5f96:	00db      	lsls	r3, r3, #3
   d5f98:	f002 0207 	and.w	r2, r2, #7
   d5f9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d5fa0:	4313      	orrs	r3, r2
   d5fa2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d5fa6:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d5faa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d5fae:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d5fb2:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d5fb6:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d5fba:	f366 1347 	bfi	r3, r6, #5, #3
   d5fbe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d5fc2:	00ed      	lsls	r5, r5, #3
   d5fc4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d5fc8:	f007 0707 	and.w	r7, r7, #7
   d5fcc:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d5fd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d5fd4:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d5fd6:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d5fd8:	431d      	orrs	r5, r3
   d5fda:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d5fde:	f006 0207 	and.w	r2, r6, #7
   d5fe2:	21f2      	movs	r1, #242	; 0xf2
   d5fe4:	f7ff ff8a 	bl	d5efc <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d5fe8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d5fec:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d5ff0:	f002 0107 	and.w	r1, r2, #7
   d5ff4:	009b      	lsls	r3, r3, #2
   d5ff6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d5ffa:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d5ffe:	4620      	mov	r0, r4
   d6000:	21f5      	movs	r1, #245	; 0xf5
   d6002:	f7ff ff7b 	bl	d5efc <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d6006:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d600a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d600e:	f002 0107 	and.w	r1, r2, #7
   d6012:	009b      	lsls	r3, r3, #2
   d6014:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d6018:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d601c:	4620      	mov	r0, r4
   d601e:	21f4      	movs	r1, #244	; 0xf4
}
   d6020:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d6024:	f7ff bf6a 	b.w	d5efc <_ZN15Adafruit_BME2806write8Ehh>

000d6028 <_ZN15Adafruit_BME2804initEv>:
{
   d6028:	b530      	push	{r4, r5, lr}
   d602a:	4604      	mov	r4, r0
    if (_cs == -1) {
   d602c:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d6030:	1c42      	adds	r2, r0, #1
{
   d6032:	b085      	sub	sp, #20
    if (_cs == -1) {
   d6034:	d119      	bne.n	d606a <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d6036:	6820      	ldr	r0, [r4, #0]
   d6038:	f003 f81e 	bl	d9078 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d603c:	21d0      	movs	r1, #208	; 0xd0
   d603e:	4620      	mov	r0, r4
   d6040:	f7ff fe90 	bl	d5d64 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d6044:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d6046:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d6048:	d145      	bne.n	d60d6 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d604a:	4620      	mov	r0, r4
   d604c:	22b6      	movs	r2, #182	; 0xb6
   d604e:	21e0      	movs	r1, #224	; 0xe0
   d6050:	f7ff ff54 	bl	d5efc <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d6054:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d6058:	f002 fd38 	bl	d8acc <delay>
    while (isReadingCalibration())
   d605c:	4620      	mov	r0, r4
   d605e:	f7ff fed5 	bl	d5e0c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d6062:	4605      	mov	r5, r0
   d6064:	b328      	cbz	r0, d60b2 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d6066:	2064      	movs	r0, #100	; 0x64
   d6068:	e7f6      	b.n	d6058 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d606a:	2101      	movs	r1, #1
   d606c:	b280      	uxth	r0, r0
   d606e:	f003 f93e 	bl	d92ee <digitalWrite>
        pinMode(_cs, OUTPUT);
   d6072:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6076:	2101      	movs	r1, #1
   d6078:	b280      	uxth	r0, r0
   d607a:	f003 f927 	bl	d92cc <pinMode>
        if (_sck == -1) {
   d607e:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d6082:	1c43      	adds	r3, r0, #1
   d6084:	d104      	bne.n	d6090 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d6086:	f7ff fbab 	bl	d57e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d608a:	f002 f9c7 	bl	d841c <_ZN8SPIClass5beginEv>
    }
   d608e:	e7d5      	b.n	d603c <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d6090:	2101      	movs	r1, #1
   d6092:	b280      	uxth	r0, r0
   d6094:	f003 f91a 	bl	d92cc <pinMode>
            pinMode(_mosi, OUTPUT);
   d6098:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d609c:	2101      	movs	r1, #1
   d609e:	b280      	uxth	r0, r0
   d60a0:	f003 f914 	bl	d92cc <pinMode>
            pinMode(_miso, INPUT);
   d60a4:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d60a8:	2100      	movs	r1, #0
   d60aa:	b280      	uxth	r0, r0
   d60ac:	f003 f90e 	bl	d92cc <pinMode>
   d60b0:	e7c4      	b.n	d603c <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d60b2:	4620      	mov	r0, r4
   d60b4:	f7ff feb1 	bl	d5e1a <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d60b8:	2305      	movs	r3, #5
   d60ba:	9300      	str	r3, [sp, #0]
   d60bc:	461a      	mov	r2, r3
   d60be:	2103      	movs	r1, #3
   d60c0:	4620      	mov	r0, r4
   d60c2:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d60c6:	f7ff ff65 	bl	d5f94 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d60ca:	2064      	movs	r0, #100	; 0x64
   d60cc:	f002 fcfe 	bl	d8acc <delay>
   d60d0:	2001      	movs	r0, #1
}
   d60d2:	b005      	add	sp, #20
   d60d4:	bd30      	pop	{r4, r5, pc}
        return false;
   d60d6:	2000      	movs	r0, #0
   d60d8:	e7fb      	b.n	d60d2 <_ZN15Adafruit_BME2804initEv+0xaa>

000d60da <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d60da:	2377      	movs	r3, #119	; 0x77
{
   d60dc:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d60de:	7103      	strb	r3, [r0, #4]
{
   d60e0:	4604      	mov	r4, r0
	_wire = &Wire;
   d60e2:	f003 f977 	bl	d93d4 <_Z19__fetch_global_Wirev>
   d60e6:	6020      	str	r0, [r4, #0]
	status = init();
   d60e8:	4620      	mov	r0, r4
   d60ea:	f7ff ff9d 	bl	d6028 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d60ee:	b930      	cbnz	r0, d60fe <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d60f0:	2376      	movs	r3, #118	; 0x76
   d60f2:	7123      	strb	r3, [r4, #4]
 		status = init();
   d60f4:	4620      	mov	r0, r4
}
   d60f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d60fa:	f7ff bf95 	b.w	d6028 <_ZN15Adafruit_BME2804initEv>
}
   d60fe:	bd10      	pop	{r4, pc}

000d6100 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   d6100:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   d6102:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
   d6104:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   d6108:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   d610a:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   d610e:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   d6112:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   d6114:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   d6116:	7382      	strb	r2, [r0, #14]
  _width = width;
   d6118:	7303      	strb	r3, [r0, #12]
}
   d611a:	bd30      	pop	{r4, r5, pc}

000d611c <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   d611c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d611e:	4603      	mov	r3, r0
   d6120:	b085      	sub	sp, #20

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   d6122:	8940      	ldrh	r0, [r0, #10]
                           (uint8_t)(_address >> 8)};
   d6124:	f8ad 000c 	strh.w	r0, [sp, #12]
   d6128:	ea4f 2e10 	mov.w	lr, r0, lsr #8

  if (_i2cdevice) {
   d612c:	6818      	ldr	r0, [r3, #0]
                           (uint8_t)(_address >> 8)};
   d612e:	7a9c      	ldrb	r4, [r3, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   d6130:	460e      	mov	r6, r1
   d6132:	4617      	mov	r7, r2
  if (_i2cdevice) {
   d6134:	b140      	cbz	r0, d6148 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2c>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   d6136:	7b5b      	ldrb	r3, [r3, #13]
   d6138:	9301      	str	r3, [sp, #4]
   d613a:	ab03      	add	r3, sp, #12
   d613c:	9300      	str	r3, [sp, #0]
   d613e:	2301      	movs	r3, #1
   d6140:	f000 fa36 	bl	d65b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   d6144:	b005      	add	sp, #20
   d6146:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   d6148:	6858      	ldr	r0, [r3, #4]
   d614a:	2800      	cmp	r0, #0
   d614c:	d0fa      	beq.n	d6144 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   d614e:	f893 c008 	ldrb.w	ip, [r3, #8]
   d6152:	7b5d      	ldrb	r5, [r3, #13]
   d6154:	f1bc 0f03 	cmp.w	ip, #3
   d6158:	d10b      	bne.n	d6172 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   d615a:	f02e 0e01 	bic.w	lr, lr, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   d615e:	3501      	adds	r5, #1
      addrbuffer[0] =
   d6160:	f88d e00c 	strb.w	lr, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   d6164:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   d6168:	9500      	str	r5, [sp, #0]
   d616a:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   d616c:	f000 f98f 	bl	d648e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d6170:	e7e8      	b.n	d6144 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   d6172:	f1bc 0f00 	cmp.w	ip, #0
   d6176:	d108      	bne.n	d618a <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6e>
      addrbuffer[0] &= ~0x80;
   d6178:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   d617c:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   d6180:	9500      	str	r5, [sp, #0]
   d6182:	ab03      	add	r3, sp, #12
   d6184:	463a      	mov	r2, r7
   d6186:	4631      	mov	r1, r6
   d6188:	e7f0      	b.n	d616c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x50>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   d618a:	f1bc 0f02 	cmp.w	ip, #2
   d618e:	d102      	bne.n	d6196 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x7a>
      addrbuffer[0] |= 0x80;
   d6190:	f064 047f 	orn	r4, r4, #127	; 0x7f
   d6194:	e7f2      	b.n	d617c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x60>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   d6196:	f1bc 0f01 	cmp.w	ip, #1
      addrbuffer[0] &= ~0x80;
   d619a:	bf01      	itttt	eq
   d619c:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   d61a0:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   d61a4:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   d61a8:	f88d 300c 	strbeq.w	r3, [sp, #12]
   d61ac:	e7e8      	b.n	d6180 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x64>

000d61ae <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   d61ae:	b4f0      	push	{r4, r5, r6, r7}
   d61b0:	460b      	mov	r3, r1
  if (numbytes == 0) {
   d61b2:	b902      	cbnz	r2, d61b6 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   d61b4:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   d61b6:	2a04      	cmp	r2, #4
   d61b8:	d814      	bhi.n	d61e4 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   d61ba:	f100 050f 	add.w	r5, r0, #15
   d61be:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   d61c0:	1884      	adds	r4, r0, r2
   d61c2:	4629      	mov	r1, r5
   d61c4:	4284      	cmp	r4, r0
   d61c6:	d009      	beq.n	d61dc <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   d61c8:	7b87      	ldrb	r7, [r0, #14]
   d61ca:	b2de      	uxtb	r6, r3
   d61cc:	b927      	cbnz	r7, d61d8 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   d61ce:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   d61d0:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   d61d2:	3501      	adds	r5, #1
   d61d4:	3c01      	subs	r4, #1
   d61d6:	e7f5      	b.n	d61c4 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   d61d8:	73a6      	strb	r6, [r4, #14]
   d61da:	e7f9      	b.n	d61d0 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   d61dc:	4620      	mov	r0, r4
}
   d61de:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   d61e0:	f7ff bf9c 	b.w	d611c <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   d61e4:	2000      	movs	r0, #0
   d61e6:	bcf0      	pop	{r4, r5, r6, r7}
   d61e8:	4770      	bx	lr

000d61ea <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   d61ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d61ec:	4604      	mov	r4, r0
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
                           (uint8_t)(_address >> 8)};
   d61ee:	7a85      	ldrb	r5, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   d61f0:	460b      	mov	r3, r1
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   d61f2:	8941      	ldrh	r1, [r0, #10]

  if (_i2cdevice) {
   d61f4:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   d61f6:	f8ad 100c 	strh.w	r1, [sp, #12]
   d61fa:	0a0e      	lsrs	r6, r1, #8
  if (_i2cdevice) {
   d61fc:	b140      	cbz	r0, d6210 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d61fe:	2100      	movs	r1, #0
   d6200:	e9cd 2100 	strd	r2, r1, [sp]
   d6204:	a903      	add	r1, sp, #12
   d6206:	7b62      	ldrb	r2, [r4, #13]
   d6208:	f000 fa40 	bl	d668c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   d620c:	b004      	add	sp, #16
   d620e:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   d6210:	6860      	ldr	r0, [r4, #4]
   d6212:	2800      	cmp	r0, #0
   d6214:	d0fa      	beq.n	d620c <_ZN23Adafruit_BusIO_Register4readEPhh+0x22>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   d6216:	7a21      	ldrb	r1, [r4, #8]
   d6218:	7b64      	ldrb	r4, [r4, #13]
   d621a:	2903      	cmp	r1, #3
   d621c:	d10d      	bne.n	d623a <_ZN23Adafruit_BusIO_Register4readEPhh+0x50>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   d621e:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   d6222:	21ff      	movs	r1, #255	; 0xff
   d6224:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   d6228:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   d622c:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   d6230:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d6232:	a903      	add	r1, sp, #12
   d6234:	f000 f95d 	bl	d64f2 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   d6238:	e7e8      	b.n	d620c <_ZN23Adafruit_BusIO_Register4readEPhh+0x22>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   d623a:	b941      	cbnz	r1, d624e <_ZN23Adafruit_BusIO_Register4readEPhh+0x64>
      addrbuffer[0] |= 0x80;
   d623c:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   d6240:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d6244:	21ff      	movs	r1, #255	; 0xff
   d6246:	e9cd 2100 	strd	r2, r1, [sp]
   d624a:	4622      	mov	r2, r4
   d624c:	e7f1      	b.n	d6232 <_ZN23Adafruit_BusIO_Register4readEPhh+0x48>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   d624e:	2902      	cmp	r1, #2
   d6250:	d102      	bne.n	d6258 <_ZN23Adafruit_BusIO_Register4readEPhh+0x6e>
      addrbuffer[0] &= ~0x80;
   d6252:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   d6256:	e7f3      	b.n	d6240 <_ZN23Adafruit_BusIO_Register4readEPhh+0x56>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   d6258:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   d625a:	bf02      	ittt	eq
   d625c:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   d6260:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   d6264:	f88d 100c 	strbeq.w	r1, [sp, #12]
   d6268:	e7ec      	b.n	d6244 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>

000d626a <_ZN23Adafruit_BusIO_Register4readEPt>:
 *    @brief  Read 2 bytes of data from the register location
 *    @param  value Pointer to uint16_t variable to read into
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint16_t *value) {
   d626a:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, 2)) {
   d626c:	2202      	movs	r2, #2
bool Adafruit_BusIO_Register::read(uint16_t *value) {
   d626e:	460d      	mov	r5, r1
  if (!read(_buffer, 2)) {
   d6270:	f100 010f 	add.w	r1, r0, #15
bool Adafruit_BusIO_Register::read(uint16_t *value) {
   d6274:	4604      	mov	r4, r0
  if (!read(_buffer, 2)) {
   d6276:	f7ff ffb8 	bl	d61ea <_ZN23Adafruit_BusIO_Register4readEPhh>
   d627a:	b138      	cbz	r0, d628c <_ZN23Adafruit_BusIO_Register4readEPt+0x22>
    return false;
  }

  if (_byteorder == LSBFIRST) {
   d627c:	7ba3      	ldrb	r3, [r4, #14]
   d627e:	b933      	cbnz	r3, d628e <_ZN23Adafruit_BusIO_Register4readEPt+0x24>
    *value = _buffer[1];
   d6280:	7c23      	ldrb	r3, [r4, #16]
    *value <<= 8;
   d6282:	021b      	lsls	r3, r3, #8
   d6284:	802b      	strh	r3, [r5, #0]
    *value |= _buffer[0];
   d6286:	7be2      	ldrb	r2, [r4, #15]
  } else {
    *value = _buffer[0];
    *value <<= 8;
    *value |= _buffer[1];
   d6288:	4313      	orrs	r3, r2
   d628a:	802b      	strh	r3, [r5, #0]
  }
  return true;
}
   d628c:	bd38      	pop	{r3, r4, r5, pc}
    *value = _buffer[0];
   d628e:	7be3      	ldrb	r3, [r4, #15]
    *value <<= 8;
   d6290:	021b      	lsls	r3, r3, #8
   d6292:	802b      	strh	r3, [r5, #0]
    *value |= _buffer[1];
   d6294:	7c22      	ldrb	r2, [r4, #16]
   d6296:	e7f7      	b.n	d6288 <_ZN23Adafruit_BusIO_Register4readEPt+0x1e>

000d6298 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   d6298:	b510      	push	{r4, lr}
   d629a:	4604      	mov	r4, r0
  if (_spiSetting) {
   d629c:	6840      	ldr	r0, [r0, #4]
   d629e:	b110      	cbz	r0, d62a6 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   d62a0:	6803      	ldr	r3, [r0, #0]
   d62a2:	689b      	ldr	r3, [r3, #8]
   d62a4:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   d62a6:	4620      	mov	r0, r4
   d62a8:	bd10      	pop	{r4, pc}

000d62aa <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   d62aa:	b538      	push	{r3, r4, r5, lr}
   d62ac:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   d62ae:	f990 000e 	ldrsb.w	r0, [r0, #14]
   d62b2:	2101      	movs	r1, #1
   d62b4:	b280      	uxth	r0, r0
   d62b6:	f003 f809 	bl	d92cc <pinMode>
  digitalWrite(_cs, HIGH);
   d62ba:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d62be:	2101      	movs	r1, #1
   d62c0:	b280      	uxth	r0, r0
   d62c2:	f003 f814 	bl	d92ee <digitalWrite>

  if (_spi) { // hardware SPI
   d62c6:	6825      	ldr	r5, [r4, #0]
   d62c8:	b135      	cbz	r5, d62d8 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   d62ca:	4628      	mov	r0, r5
   d62cc:	f002 f8a6 	bl	d841c <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   d62d0:	2001      	movs	r0, #1
   d62d2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   d62d6:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   d62d8:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d62dc:	2101      	movs	r1, #1
   d62de:	b280      	uxth	r0, r0
   d62e0:	f002 fff4 	bl	d92cc <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   d62e4:	7b63      	ldrb	r3, [r4, #13]
   d62e6:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d62ea:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   d62ec:	bf94      	ite	ls
   d62ee:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   d62f0:	2101      	movhi	r1, #1
   d62f2:	b280      	uxth	r0, r0
   d62f4:	f002 fffb 	bl	d92ee <digitalWrite>
    if (_mosi != -1) {
   d62f8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d62fc:	1c42      	adds	r2, r0, #1
   d62fe:	d009      	beq.n	d6314 <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   d6300:	2101      	movs	r1, #1
   d6302:	b280      	uxth	r0, r0
   d6304:	f002 ffe2 	bl	d92cc <pinMode>
      digitalWrite(_mosi, HIGH);
   d6308:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d630c:	2101      	movs	r1, #1
   d630e:	b280      	uxth	r0, r0
   d6310:	f002 ffed 	bl	d92ee <digitalWrite>
    if (_miso != -1) {
   d6314:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d6318:	1c43      	adds	r3, r0, #1
   d631a:	d0d9      	beq.n	d62d0 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   d631c:	2100      	movs	r1, #0
   d631e:	b280      	uxth	r0, r0
   d6320:	f002 ffd4 	bl	d92cc <pinMode>
   d6324:	e7d4      	b.n	d62d0 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000d6328 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d6328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d632c:	4604      	mov	r4, r0
  if (_spi) {
   d632e:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d6330:	b085      	sub	sp, #20
   d6332:	460d      	mov	r5, r1
  if (_spi) {
   d6334:	b140      	cbz	r0, d6348 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   d6336:	2300      	movs	r3, #0
   d6338:	9300      	str	r3, [sp, #0]
   d633a:	4613      	mov	r3, r2
   d633c:	460a      	mov	r2, r1
   d633e:	f002 f90b 	bl	d8558 <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   d6342:	b005      	add	sp, #20
   d6344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   d6348:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d634a:	68a0      	ldr	r0, [r4, #8]
   d634c:	4f48      	ldr	r7, [pc, #288]	; (d6470 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   d634e:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   d6352:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d6354:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   d6356:	bf0c      	ite	eq
   d6358:	f04f 0b01 	moveq.w	fp, #1
   d635c:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d6360:	ea1b 0f03 	tst.w	fp, r3
   d6364:	eb01 0302 	add.w	r3, r1, r2
   d6368:	bf0c      	ite	eq
   d636a:	f04f 0901 	moveq.w	r9, #1
   d636e:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d6372:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   d6374:	9303      	str	r3, [sp, #12]
   d6376:	9b03      	ldr	r3, [sp, #12]
   d6378:	42ab      	cmp	r3, r5
   d637a:	d0e2      	beq.n	d6342 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   d637c:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   d6380:	465e      	mov	r6, fp
    uint8_t reply = 0;
   d6382:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   d6386:	b117      	cbz	r7, d638e <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d6388:	4638      	mov	r0, r7
   d638a:	f001 fd8d 	bl	d7ea8 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   d638e:	7b63      	ldrb	r3, [r4, #13]
   d6390:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d6394:	d141      	bne.n	d641a <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d6396:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d639a:	1c5a      	adds	r2, r3, #1
   d639c:	d00f      	beq.n	d63be <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   d639e:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d63a2:	bf14      	ite	ne
   d63a4:	2301      	movne	r3, #1
   d63a6:	2300      	moveq	r3, #0
   d63a8:	454b      	cmp	r3, r9
   d63aa:	d008      	beq.n	d63be <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
          if (towrite)
   d63ac:	6963      	ldr	r3, [r4, #20]
   d63ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d63b0:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   d63b2:	2900      	cmp	r1, #0
   d63b4:	d02c      	beq.n	d6410 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   d63b6:	4302      	orrs	r2, r0
   d63b8:	601a      	str	r2, [r3, #0]
   d63ba:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   d63be:	69a1      	ldr	r1, [r4, #24]
   d63c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d63c2:	680a      	ldr	r2, [r1, #0]
   d63c4:	4313      	orrs	r3, r2
   d63c6:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d63c8:	b117      	cbz	r7, d63d0 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   d63ca:	4638      	mov	r0, r7
   d63cc:	f001 fd6c 	bl	d7ea8 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   d63d0:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d63d4:	3301      	adds	r3, #1
   d63d6:	d006      	beq.n	d63e6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   d63d8:	69e3      	ldr	r3, [r4, #28]
   d63da:	681a      	ldr	r2, [r3, #0]
   d63dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d63de:	421a      	tst	r2, r3
            reply |= b;
   d63e0:	bf18      	it	ne
   d63e2:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   d63e6:	69a1      	ldr	r1, [r4, #24]
   d63e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d63ea:	680a      	ldr	r2, [r1, #0]
   d63ec:	ea22 0303 	bic.w	r3, r2, r3
   d63f0:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   d63f2:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d63f6:	3301      	adds	r3, #1
        buffer[i] = reply;
   d63f8:	bf18      	it	ne
   d63fa:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   d63fe:	7b23      	ldrb	r3, [r4, #12]
   d6400:	2b00      	cmp	r3, #0
   d6402:	d132      	bne.n	d646a <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   d6404:	0076      	lsls	r6, r6, #1
   d6406:	b2f6      	uxtb	r6, r6
   d6408:	2e00      	cmp	r6, #0
   d640a:	d1bc      	bne.n	d6386 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   d640c:	3501      	adds	r5, #1
   d640e:	e7b2      	b.n	d6376 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   d6410:	ea22 0200 	bic.w	r2, r2, r0
   d6414:	601a      	str	r2, [r3, #0]
   d6416:	4689      	mov	r9, r1
   d6418:	e7d1      	b.n	d63be <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   d641a:	69a1      	ldr	r1, [r4, #24]
   d641c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d641e:	680a      	ldr	r2, [r1, #0]
   d6420:	4313      	orrs	r3, r2
   d6422:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d6424:	b117      	cbz	r7, d642c <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   d6426:	4638      	mov	r0, r7
   d6428:	f001 fd3e 	bl	d7ea8 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   d642c:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d6430:	3301      	adds	r3, #1
   d6432:	d008      	beq.n	d6446 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
          if (send & b)
   d6434:	6963      	ldr	r3, [r4, #20]
   d6436:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d6438:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   d643a:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   d643e:	bf14      	ite	ne
   d6440:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   d6442:	438a      	biceq	r2, r1
   d6444:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   d6446:	69a1      	ldr	r1, [r4, #24]
   d6448:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d644a:	680a      	ldr	r2, [r1, #0]
   d644c:	ea22 0303 	bic.w	r3, r2, r3
   d6450:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   d6452:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d6456:	3301      	adds	r3, #1
   d6458:	d0cb      	beq.n	d63f2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   d645a:	69e3      	ldr	r3, [r4, #28]
   d645c:	681a      	ldr	r2, [r3, #0]
   d645e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6460:	421a      	tst	r2, r3
            reply |= b;
   d6462:	bf18      	it	ne
   d6464:	ea46 0808 	orrne.w	r8, r6, r8
   d6468:	e7c3      	b.n	d63f2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   d646a:	0876      	lsrs	r6, r6, #1
   d646c:	e7cc      	b.n	d6408 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   d646e:	bf00      	nop
   d6470:	0007a120 	.word	0x0007a120

000d6474 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   d6474:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   d6476:	2201      	movs	r2, #1
  uint8_t data = send;
   d6478:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   d647c:	f10d 0107 	add.w	r1, sp, #7
   d6480:	f7ff ff52 	bl	d6328 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   d6484:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6488:	b003      	add	sp, #12
   d648a:	f85d fb04 	ldr.w	pc, [sp], #4

000d648e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d648e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6492:	4604      	mov	r4, r0
  if (_spi) {
   d6494:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d6496:	460e      	mov	r6, r1
   d6498:	4617      	mov	r7, r2
   d649a:	461d      	mov	r5, r3
  if (_spi) {
   d649c:	b110      	cbz	r0, d64a4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   d649e:	6861      	ldr	r1, [r4, #4]
   d64a0:	f001 ffe6 	bl	d8470 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d64a4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d64a8:	2100      	movs	r1, #0
   d64aa:	b280      	uxth	r0, r0
   d64ac:	f002 ff1f 	bl	d92ee <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   d64b0:	9b06      	ldr	r3, [sp, #24]
   d64b2:	eb05 0803 	add.w	r8, r5, r3
   d64b6:	4545      	cmp	r5, r8
   d64b8:	d108      	bne.n	d64cc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   d64ba:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   d64bc:	42b7      	cmp	r7, r6
   d64be:	d00b      	beq.n	d64d8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   d64c0:	f816 1b01 	ldrb.w	r1, [r6], #1
   d64c4:	4620      	mov	r0, r4
   d64c6:	f7ff ffd5 	bl	d6474 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   d64ca:	e7f7      	b.n	d64bc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   d64cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d64d0:	4620      	mov	r0, r4
   d64d2:	f7ff ffcf 	bl	d6474 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   d64d6:	e7ee      	b.n	d64b6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   d64d8:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d64dc:	2101      	movs	r1, #1
   d64de:	b280      	uxth	r0, r0
   d64e0:	f002 ff05 	bl	d92ee <digitalWrite>

  if (_spi) {
   d64e4:	6820      	ldr	r0, [r4, #0]
   d64e6:	b108      	cbz	r0, d64ec <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   d64e8:	f001 ffa9 	bl	d843e <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d64ec:	2001      	movs	r0, #1
   d64ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d64f2 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   d64f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d64f6:	4604      	mov	r4, r0
  if (_spi) {
   d64f8:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   d64fa:	f89d 801c 	ldrb.w	r8, [sp, #28]
   d64fe:	460e      	mov	r6, r1
   d6500:	4617      	mov	r7, r2
   d6502:	461d      	mov	r5, r3
  if (_spi) {
   d6504:	b110      	cbz	r0, d650c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   d6506:	6861      	ldr	r1, [r4, #4]
   d6508:	f001 ffb2 	bl	d8470 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d650c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d6510:	2100      	movs	r1, #0
   d6512:	b280      	uxth	r0, r0
   d6514:	f002 feeb 	bl	d92ee <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   d6518:	4437      	add	r7, r6
   d651a:	42be      	cmp	r6, r7
   d651c:	d10a      	bne.n	d6534 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   d651e:	9b06      	ldr	r3, [sp, #24]
   d6520:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   d6522:	42ae      	cmp	r6, r5
   d6524:	d00c      	beq.n	d6540 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   d6526:	4641      	mov	r1, r8
   d6528:	4620      	mov	r0, r4
   d652a:	f7ff ffa3 	bl	d6474 <_ZN18Adafruit_SPIDevice8transferEh>
   d652e:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   d6532:	e7f6      	b.n	d6522 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   d6534:	f816 1b01 	ldrb.w	r1, [r6], #1
   d6538:	4620      	mov	r0, r4
   d653a:	f7ff ff9b 	bl	d6474 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   d653e:	e7ec      	b.n	d651a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   d6540:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d6544:	2101      	movs	r1, #1
   d6546:	b280      	uxth	r0, r0
   d6548:	f002 fed1 	bl	d92ee <digitalWrite>

  if (_spi) {
   d654c:	6820      	ldr	r0, [r4, #0]
   d654e:	b108      	cbz	r0, d6554 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   d6550:	f001 ff75 	bl	d843e <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   d6554:	2001      	movs	r0, #1
   d6556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d655a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d655a:	6042      	str	r2, [r0, #4]
  _begun = false;
   d655c:	2200      	movs	r2, #0
   d655e:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   d6560:	2220      	movs	r2, #32
  _addr = addr;
   d6562:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   d6564:	60c2      	str	r2, [r0, #12]
#endif
}
   d6566:	4770      	bx	lr

000d6568 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   d6568:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d656a:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d656c:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d656e:	b153      	cbz	r3, d6586 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d6570:	7821      	ldrb	r1, [r4, #0]
   d6572:	6860      	ldr	r0, [r4, #4]
   d6574:	f002 fdb2 	bl	d90dc <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   d6578:	6860      	ldr	r0, [r4, #4]
   d657a:	f002 fdb7 	bl	d90ec <_ZN7TwoWire15endTransmissionEv>
   d657e:	fab0 f080 	clz	r0, r0
   d6582:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   d6584:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d6586:	2101      	movs	r1, #1
   d6588:	f000 f803 	bl	d6592 <_ZN18Adafruit_I2CDevice5beginEb>
   d658c:	2800      	cmp	r0, #0
   d658e:	d1ef      	bne.n	d6570 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d6590:	e7f8      	b.n	d6584 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d6592 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d6592:	b538      	push	{r3, r4, r5, lr}
   d6594:	4604      	mov	r4, r0
  _wire->begin();
   d6596:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d6598:	460d      	mov	r5, r1
  _wire->begin();
   d659a:	f002 fd6d 	bl	d9078 <_ZN7TwoWire5beginEv>
  _begun = true;
   d659e:	2001      	movs	r0, #1
   d65a0:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   d65a2:	b125      	cbz	r5, d65ae <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   d65a4:	4620      	mov	r0, r4
}
   d65a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   d65aa:	f7ff bfdd 	b.w	d6568 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   d65ae:	bd38      	pop	{r3, r4, r5, pc}

000d65b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   d65b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d65b4:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d65b8:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   d65ba:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   d65bc:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   d65be:	4432      	add	r2, r6
   d65c0:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   d65c2:	4604      	mov	r4, r0
   d65c4:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   d65c6:	d902      	bls.n	d65ce <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d65c8:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   d65ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d65ce:	7801      	ldrb	r1, [r0, #0]
   d65d0:	6840      	ldr	r0, [r0, #4]
   d65d2:	f002 fd83 	bl	d90dc <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d65d6:	b97e      	cbnz	r6, d65f8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   d65d8:	6860      	ldr	r0, [r4, #4]
   d65da:	6803      	ldr	r3, [r0, #0]
   d65dc:	462a      	mov	r2, r5
   d65de:	68db      	ldr	r3, [r3, #12]
   d65e0:	4641      	mov	r1, r8
   d65e2:	4798      	blx	r3
   d65e4:	4285      	cmp	r5, r0
   d65e6:	d1ef      	bne.n	d65c8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   d65e8:	6860      	ldr	r0, [r4, #4]
   d65ea:	4639      	mov	r1, r7
   d65ec:	f002 fd7a 	bl	d90e4 <_ZN7TwoWire15endTransmissionEh>
   d65f0:	fab0 f080 	clz	r0, r0
   d65f4:	0940      	lsrs	r0, r0, #5
   d65f6:	e7e8      	b.n	d65ca <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d65f8:	f1b9 0f00 	cmp.w	r9, #0
   d65fc:	d0ec      	beq.n	d65d8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
   d65fe:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d6600:	6803      	ldr	r3, [r0, #0]
   d6602:	4632      	mov	r2, r6
   d6604:	68db      	ldr	r3, [r3, #12]
   d6606:	4649      	mov	r1, r9
   d6608:	4798      	blx	r3
   d660a:	42b0      	cmp	r0, r6
   d660c:	d1dc      	bne.n	d65c8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   d660e:	e7e3      	b.n	d65d8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000d6610 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   d6610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6614:	4615      	mov	r5, r2
   d6616:	4604      	mov	r4, r0
   d6618:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   d661a:	b2d2      	uxtb	r2, r2
   d661c:	7801      	ldrb	r1, [r0, #0]
   d661e:	6840      	ldr	r0, [r0, #4]
   d6620:	f002 fd47 	bl	d90b2 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   d6624:	4285      	cmp	r5, r0
   d6626:	d10d      	bne.n	d6644 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   d6628:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   d662a:	fa1f f887 	uxth.w	r8, r7
   d662e:	45a8      	cmp	r8, r5
   d6630:	f107 0701 	add.w	r7, r7, #1
   d6634:	d209      	bcs.n	d664a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   d6636:	6860      	ldr	r0, [r4, #4]
   d6638:	6803      	ldr	r3, [r0, #0]
   d663a:	695b      	ldr	r3, [r3, #20]
   d663c:	4798      	blx	r3
   d663e:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   d6642:	e7f2      	b.n	d662a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   d6644:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d6646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d664a:	2001      	movs	r0, #1
   d664c:	e7fb      	b.n	d6646 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000d664e <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d664e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6652:	4607      	mov	r7, r0
   d6654:	4688      	mov	r8, r1
   d6656:	4616      	mov	r6, r2
   d6658:	4699      	mov	r9, r3
  size_t pos = 0;
   d665a:	2500      	movs	r5, #0
  while (pos < len) {
   d665c:	42b5      	cmp	r5, r6
   d665e:	d212      	bcs.n	d6686 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   d6660:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   d6662:	1b74      	subs	r4, r6, r5
   d6664:	4294      	cmp	r4, r2
   d6666:	bf28      	it	cs
   d6668:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   d666a:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   d666c:	42ab      	cmp	r3, r5
   d666e:	bf94      	ite	ls
   d6670:	464b      	movls	r3, r9
   d6672:	2300      	movhi	r3, #0
   d6674:	4622      	mov	r2, r4
   d6676:	eb08 0105 	add.w	r1, r8, r5
   d667a:	4638      	mov	r0, r7
   d667c:	f7ff ffc8 	bl	d6610 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   d6680:	b110      	cbz	r0, d6688 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   d6682:	4425      	add	r5, r4
  while (pos < len) {
   d6684:	e7ea      	b.n	d665c <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   d6686:	2001      	movs	r0, #1
}
   d6688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d668c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   d668c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d668e:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   d6690:	2300      	movs	r3, #0
   d6692:	e9cd 3300 	strd	r3, r3, [sp]
   d6696:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   d669a:	9e06      	ldr	r6, [sp, #24]
   d669c:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   d669e:	f7ff ff87 	bl	d65b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d66a2:	b140      	cbz	r0, d66b6 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   d66a4:	2301      	movs	r3, #1
   d66a6:	4632      	mov	r2, r6
   d66a8:	4629      	mov	r1, r5
   d66aa:	4620      	mov	r0, r4
}
   d66ac:	b002      	add	sp, #8
   d66ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d66b2:	f7ff bfcc 	b.w	d664e <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d66b6:	b002      	add	sp, #8
   d66b8:	bd70      	pop	{r4, r5, r6, pc}

000d66ba <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   d66ba:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d66bc:	6840      	ldr	r0, [r0, #4]
   d66be:	f002 fcd7 	bl	d9070 <_ZN7TwoWire8setSpeedEm>
  return true;
#else
  (void)desiredclk;
  return false;
#endif
}
   d66c2:	2001      	movs	r0, #1
   d66c4:	bd08      	pop	{r3, pc}

000d66c6 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d66c6:	4770      	bx	lr

000d66c8 <_ZN15Adafruit_BNO055D1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
   d66c8:	4770      	bx	lr
	...

000d66cc <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 *          Sensor description
 */
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d66cc:	460b      	mov	r3, r1
   d66ce:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d66d0:	2228      	movs	r2, #40	; 0x28
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d66d2:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d66d4:	2100      	movs	r1, #0
   d66d6:	4618      	mov	r0, r3
   d66d8:	f006 fb06 	bl	dcce8 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
   d66dc:	4909      	ldr	r1, [pc, #36]	; (d6704 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x38>)
   d66de:	220b      	movs	r2, #11
   d66e0:	f006 fb3e 	bl	dcd60 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d66e4:	2200      	movs	r2, #0
  sensor->version = 1;
   d66e6:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d66e8:	72c2      	strb	r2, [r0, #11]
  sensor->version = 1;
   d66ea:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _sensorID;
   d66ec:	68e1      	ldr	r1, [r4, #12]
  sensor->type = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay = 0;
   d66ee:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->max_value = 0.0F;
   d66f0:	2200      	movs	r2, #0
  sensor->sensor_id = _sensorID;
   d66f2:	6101      	str	r1, [r0, #16]
  sensor->max_value = 0.0F;
   d66f4:	6182      	str	r2, [r0, #24]
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d66f6:	2103      	movs	r1, #3
  sensor->min_value = 0.0F;
   d66f8:	61c2      	str	r2, [r0, #28]
  sensor->resolution = 0.01F;
   d66fa:	4a03      	ldr	r2, [pc, #12]	; (d6708 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x3c>)
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d66fc:	6141      	str	r1, [r0, #20]
  sensor->resolution = 0.01F;
   d66fe:	6202      	str	r2, [r0, #32]
}
   d6700:	bd10      	pop	{r4, pc}
   d6702:	bf00      	nop
   d6704:	000dd4b2 	.word	0x000dd4b2
   d6708:	3c23d70a 	.word	0x3c23d70a

000d670c <_ZN15Adafruit_BNO055D0Ev>:
   d670c:	b510      	push	{r4, lr}
   d670e:	2114      	movs	r1, #20
   d6710:	4604      	mov	r4, r0
   d6712:	f002 fe83 	bl	d941c <_ZdlPvj>
   d6716:	4620      	mov	r0, r4
   d6718:	bd10      	pop	{r4, pc}
	...

000d671c <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d671c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d671e:	9301      	str	r3, [sp, #4]
                                 TwoWire *theWire) {
   d6720:	4b09      	ldr	r3, [pc, #36]	; (d6748 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x2c>)
   d6722:	6003      	str	r3, [r0, #0]
   d6724:	2300      	movs	r3, #0
  _sensorID = sensorID;
   d6726:	e9c0 3102 	strd	r3, r1, [r0, #8]
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d672a:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d672c:	2010      	movs	r0, #16
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d672e:	4616      	mov	r6, r2
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d6730:	f7fd fcb1 	bl	d4096 <_Znwj>
   d6734:	4605      	mov	r5, r0
   d6736:	b118      	cbz	r0, d6740 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x24>
   d6738:	9a01      	ldr	r2, [sp, #4]
   d673a:	4631      	mov	r1, r6
   d673c:	f7ff ff0d 	bl	d655a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
}
   d6740:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d6742:	60a5      	str	r5, [r4, #8]
}
   d6744:	b002      	add	sp, #8
   d6746:	bd70      	pop	{r4, r5, r6, pc}
   d6748:	000dd604 	.word	0x000dd604

000d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value) {
   d674c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
  return i2c_dev->write(buffer, 2);
   d674e:	2300      	movs	r3, #0
   d6750:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
   d6754:	f88d 100c 	strb.w	r1, [sp, #12]
   d6758:	f88d 200d 	strb.w	r2, [sp, #13]
  return i2c_dev->write(buffer, 2);
   d675c:	2301      	movs	r3, #1
   d675e:	2202      	movs	r2, #2
   d6760:	a903      	add	r1, sp, #12
   d6762:	6880      	ldr	r0, [r0, #8]
   d6764:	f7ff ff24 	bl	d65b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d6768:	b005      	add	sp, #20
   d676a:	f85d fb04 	ldr.w	pc, [sp], #4

000d676e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
   d676e:	b508      	push	{r3, lr}
   d6770:	460a      	mov	r2, r1
  _mode = mode;
   d6772:	7401      	strb	r1, [r0, #16]
  write8(BNO055_OPR_MODE_ADDR, _mode);
   d6774:	213d      	movs	r1, #61	; 0x3d
   d6776:	f7ff ffe9 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
}
   d677a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(30);
   d677e:	201e      	movs	r0, #30
   d6780:	f002 b9a4 	b.w	d8acc <delay>

000d6784 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>:
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d6784:	b570      	push	{r4, r5, r6, lr}
   d6786:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d6788:	2100      	movs	r1, #0
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d678a:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t modeback = _mode;
   d678c:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d678e:	f7ff ffee 	bl	d676e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d6792:	2019      	movs	r0, #25
   d6794:	f002 f99a 	bl	d8acc <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6798:	2200      	movs	r2, #0
   d679a:	2107      	movs	r1, #7
   d679c:	4620      	mov	r0, r4
   d679e:	f7ff ffd5 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (usextal) {
   d67a2:	b185      	cbz	r5, d67c6 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x42>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x80);
   d67a4:	2280      	movs	r2, #128	; 0x80
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d67a6:	213f      	movs	r1, #63	; 0x3f
   d67a8:	4620      	mov	r0, r4
   d67aa:	f7ff ffcf 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d67ae:	200a      	movs	r0, #10
   d67b0:	f002 f98c 	bl	d8acc <delay>
  setMode(modeback);
   d67b4:	4620      	mov	r0, r4
   d67b6:	4631      	mov	r1, r6
   d67b8:	f7ff ffd9 	bl	d676e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d67bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(20);
   d67c0:	2014      	movs	r0, #20
   d67c2:	f002 b983 	b.w	d8acc <delay>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d67c6:	462a      	mov	r2, r5
   d67c8:	e7ed      	b.n	d67a6 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x22>

000d67ca <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>:
    const adafruit_bno055_offsets_t &offsets_type) {
   d67ca:	b570      	push	{r4, r5, r6, lr}
   d67cc:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d67ce:	2100      	movs	r1, #0
    const adafruit_bno055_offsets_t &offsets_type) {
   d67d0:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t lastMode = _mode;
   d67d2:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d67d4:	f7ff ffcb 	bl	d676e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d67d8:	2019      	movs	r0, #25
   d67da:	f002 f977 	bl	d8acc <delay>
  write8(ACCEL_OFFSET_X_LSB_ADDR, (offsets_type.accel_offset_x) & 0x0FF);
   d67de:	782a      	ldrb	r2, [r5, #0]
   d67e0:	2155      	movs	r1, #85	; 0x55
   d67e2:	4620      	mov	r0, r4
   d67e4:	f7ff ffb2 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_X_MSB_ADDR, (offsets_type.accel_offset_x >> 8) & 0x0FF);
   d67e8:	786a      	ldrb	r2, [r5, #1]
   d67ea:	2156      	movs	r1, #86	; 0x56
   d67ec:	4620      	mov	r0, r4
   d67ee:	f7ff ffad 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_LSB_ADDR, (offsets_type.accel_offset_y) & 0x0FF);
   d67f2:	78aa      	ldrb	r2, [r5, #2]
   d67f4:	2157      	movs	r1, #87	; 0x57
   d67f6:	4620      	mov	r0, r4
   d67f8:	f7ff ffa8 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_MSB_ADDR, (offsets_type.accel_offset_y >> 8) & 0x0FF);
   d67fc:	78ea      	ldrb	r2, [r5, #3]
   d67fe:	2158      	movs	r1, #88	; 0x58
   d6800:	4620      	mov	r0, r4
   d6802:	f7ff ffa3 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_LSB_ADDR, (offsets_type.accel_offset_z) & 0x0FF);
   d6806:	792a      	ldrb	r2, [r5, #4]
   d6808:	2159      	movs	r1, #89	; 0x59
   d680a:	4620      	mov	r0, r4
   d680c:	f7ff ff9e 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_MSB_ADDR, (offsets_type.accel_offset_z >> 8) & 0x0FF);
   d6810:	796a      	ldrb	r2, [r5, #5]
   d6812:	215a      	movs	r1, #90	; 0x5a
   d6814:	4620      	mov	r0, r4
   d6816:	f7ff ff99 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_LSB_ADDR, (offsets_type.mag_offset_x) & 0x0FF);
   d681a:	79aa      	ldrb	r2, [r5, #6]
   d681c:	215b      	movs	r1, #91	; 0x5b
   d681e:	4620      	mov	r0, r4
   d6820:	f7ff ff94 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_MSB_ADDR, (offsets_type.mag_offset_x >> 8) & 0x0FF);
   d6824:	79ea      	ldrb	r2, [r5, #7]
   d6826:	215c      	movs	r1, #92	; 0x5c
   d6828:	4620      	mov	r0, r4
   d682a:	f7ff ff8f 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_LSB_ADDR, (offsets_type.mag_offset_y) & 0x0FF);
   d682e:	7a2a      	ldrb	r2, [r5, #8]
   d6830:	215d      	movs	r1, #93	; 0x5d
   d6832:	4620      	mov	r0, r4
   d6834:	f7ff ff8a 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_MSB_ADDR, (offsets_type.mag_offset_y >> 8) & 0x0FF);
   d6838:	7a6a      	ldrb	r2, [r5, #9]
   d683a:	215e      	movs	r1, #94	; 0x5e
   d683c:	4620      	mov	r0, r4
   d683e:	f7ff ff85 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_LSB_ADDR, (offsets_type.mag_offset_z) & 0x0FF);
   d6842:	7aaa      	ldrb	r2, [r5, #10]
   d6844:	215f      	movs	r1, #95	; 0x5f
   d6846:	4620      	mov	r0, r4
   d6848:	f7ff ff80 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_MSB_ADDR, (offsets_type.mag_offset_z >> 8) & 0x0FF);
   d684c:	7aea      	ldrb	r2, [r5, #11]
   d684e:	2160      	movs	r1, #96	; 0x60
   d6850:	4620      	mov	r0, r4
   d6852:	f7ff ff7b 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_LSB_ADDR, (offsets_type.gyro_offset_x) & 0x0FF);
   d6856:	7b2a      	ldrb	r2, [r5, #12]
   d6858:	2161      	movs	r1, #97	; 0x61
   d685a:	4620      	mov	r0, r4
   d685c:	f7ff ff76 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_MSB_ADDR, (offsets_type.gyro_offset_x >> 8) & 0x0FF);
   d6860:	7b6a      	ldrb	r2, [r5, #13]
   d6862:	2162      	movs	r1, #98	; 0x62
   d6864:	4620      	mov	r0, r4
   d6866:	f7ff ff71 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_LSB_ADDR, (offsets_type.gyro_offset_y) & 0x0FF);
   d686a:	7baa      	ldrb	r2, [r5, #14]
   d686c:	2163      	movs	r1, #99	; 0x63
   d686e:	4620      	mov	r0, r4
   d6870:	f7ff ff6c 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_MSB_ADDR, (offsets_type.gyro_offset_y >> 8) & 0x0FF);
   d6874:	7bea      	ldrb	r2, [r5, #15]
   d6876:	2164      	movs	r1, #100	; 0x64
   d6878:	4620      	mov	r0, r4
   d687a:	f7ff ff67 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_LSB_ADDR, (offsets_type.gyro_offset_z) & 0x0FF);
   d687e:	7c2a      	ldrb	r2, [r5, #16]
   d6880:	2165      	movs	r1, #101	; 0x65
   d6882:	4620      	mov	r0, r4
   d6884:	f7ff ff62 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_MSB_ADDR, (offsets_type.gyro_offset_z >> 8) & 0x0FF);
   d6888:	7c6a      	ldrb	r2, [r5, #17]
   d688a:	2166      	movs	r1, #102	; 0x66
   d688c:	4620      	mov	r0, r4
   d688e:	f7ff ff5d 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_LSB_ADDR, (offsets_type.accel_radius) & 0x0FF);
   d6892:	7caa      	ldrb	r2, [r5, #18]
   d6894:	2167      	movs	r1, #103	; 0x67
   d6896:	4620      	mov	r0, r4
   d6898:	f7ff ff58 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_MSB_ADDR, (offsets_type.accel_radius >> 8) & 0x0FF);
   d689c:	7cea      	ldrb	r2, [r5, #19]
   d689e:	2168      	movs	r1, #104	; 0x68
   d68a0:	4620      	mov	r0, r4
   d68a2:	f7ff ff53 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_LSB_ADDR, (offsets_type.mag_radius) & 0x0FF);
   d68a6:	7d2a      	ldrb	r2, [r5, #20]
   d68a8:	2169      	movs	r1, #105	; 0x69
   d68aa:	4620      	mov	r0, r4
   d68ac:	f7ff ff4e 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_MSB_ADDR, (offsets_type.mag_radius >> 8) & 0x0FF);
   d68b0:	7d6a      	ldrb	r2, [r5, #21]
   d68b2:	216a      	movs	r1, #106	; 0x6a
   d68b4:	4620      	mov	r0, r4
   d68b6:	f7ff ff49 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  setMode(lastMode);
   d68ba:	4631      	mov	r1, r6
   d68bc:	4620      	mov	r0, r4
}
   d68be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setMode(lastMode);
   d68c2:	f7ff bf54 	b.w	d676e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

000d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
   d68c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[1] = {reg};
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d68c8:	2201      	movs	r2, #1
   d68ca:	2300      	movs	r3, #0
   d68cc:	e9cd 2300 	strd	r2, r3, [sp]
   d68d0:	ab03      	add	r3, sp, #12
  uint8_t buffer[1] = {reg};
   d68d2:	f88d 100c 	strb.w	r1, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d68d6:	6880      	ldr	r0, [r0, #8]
   d68d8:	4619      	mov	r1, r3
   d68da:	f7ff fed7 	bl	d668c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
  return (byte)buffer[0];
}
   d68de:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d68e2:	b005      	add	sp, #20
   d68e4:	f85d fb04 	ldr.w	pc, [sp], #4

000d68e8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
   d68e8:	b570      	push	{r4, r5, r6, lr}
   d68ea:	4604      	mov	r4, r0
   d68ec:	460e      	mov	r6, r1
  if (!i2c_dev->begin()) {
   d68ee:	6880      	ldr	r0, [r0, #8]
   d68f0:	2101      	movs	r1, #1
   d68f2:	f7ff fe4e 	bl	d6592 <_ZN18Adafruit_I2CDevice5beginEb>
   d68f6:	4605      	mov	r5, r0
   d68f8:	b910      	cbnz	r0, d6900 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x18>
    return false;
   d68fa:	2500      	movs	r5, #0
}
   d68fc:	4628      	mov	r0, r5
   d68fe:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
   d6900:	2100      	movs	r1, #0
   d6902:	4620      	mov	r0, r4
   d6904:	f7ff ffdf 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (id != BNO055_ID) {
   d6908:	28a0      	cmp	r0, #160	; 0xa0
   d690a:	d113      	bne.n	d6934 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4c>
  setMode(OPERATION_MODE_CONFIG);
   d690c:	2100      	movs	r1, #0
   d690e:	4620      	mov	r0, r4
   d6910:	f7ff ff2d 	bl	d676e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
   d6914:	2220      	movs	r2, #32
   d6916:	213f      	movs	r1, #63	; 0x3f
   d6918:	4620      	mov	r0, r4
   d691a:	f7ff ff17 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
   d691e:	201e      	movs	r0, #30
    delay(10);
   d6920:	f002 f8d4 	bl	d8acc <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
   d6924:	2100      	movs	r1, #0
   d6926:	4620      	mov	r0, r4
   d6928:	f7ff ffcd 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d692c:	28a0      	cmp	r0, #160	; 0xa0
   d692e:	d00c      	beq.n	d694a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x62>
    delay(10);
   d6930:	200a      	movs	r0, #10
   d6932:	e7f5      	b.n	d6920 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x38>
    delay(1000); // hold on for boot
   d6934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6938:	f002 f8c8 	bl	d8acc <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
   d693c:	2100      	movs	r1, #0
   d693e:	4620      	mov	r0, r4
   d6940:	f7ff ffc1 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if (id != BNO055_ID) {
   d6944:	28a0      	cmp	r0, #160	; 0xa0
   d6946:	d1d8      	bne.n	d68fa <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x12>
   d6948:	e7e0      	b.n	d690c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x24>
  delay(50);
   d694a:	2032      	movs	r0, #50	; 0x32
   d694c:	f002 f8be 	bl	d8acc <delay>
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
   d6950:	2200      	movs	r2, #0
   d6952:	213e      	movs	r1, #62	; 0x3e
   d6954:	4620      	mov	r0, r4
   d6956:	f7ff fef9 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d695a:	200a      	movs	r0, #10
   d695c:	f002 f8b6 	bl	d8acc <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6960:	2200      	movs	r2, #0
   d6962:	2107      	movs	r1, #7
   d6964:	4620      	mov	r0, r4
   d6966:	f7ff fef1 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
   d696a:	2200      	movs	r2, #0
   d696c:	213f      	movs	r1, #63	; 0x3f
   d696e:	4620      	mov	r0, r4
   d6970:	f7ff feec 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6974:	200a      	movs	r0, #10
   d6976:	f002 f8a9 	bl	d8acc <delay>
  setMode(mode);
   d697a:	4620      	mov	r0, r4
   d697c:	4631      	mov	r1, r6
   d697e:	f7ff fef6 	bl	d676e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   d6982:	2014      	movs	r0, #20
   d6984:	f002 f8a2 	bl	d8acc <delay>
  return true;
   d6988:	e7b8      	b.n	d68fc <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x14>

000d698a <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>:
                                      uint8_t *system_error) {
   d698a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d698c:	460f      	mov	r7, r1
   d698e:	4616      	mov	r6, r2
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6990:	2107      	movs	r1, #7
   d6992:	2200      	movs	r2, #0
                                      uint8_t *system_error) {
   d6994:	4604      	mov	r4, r0
   d6996:	461d      	mov	r5, r3
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6998:	f7ff fed8 	bl	d674c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (system_status != 0)
   d699c:	b127      	cbz	r7, d69a8 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x1e>
    *system_status = read8(BNO055_SYS_STAT_ADDR);
   d699e:	2139      	movs	r1, #57	; 0x39
   d69a0:	4620      	mov	r0, r4
   d69a2:	f7ff ff90 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d69a6:	7038      	strb	r0, [r7, #0]
  if (self_test_result != 0)
   d69a8:	b126      	cbz	r6, d69b4 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x2a>
    *self_test_result = read8(BNO055_SELFTEST_RESULT_ADDR);
   d69aa:	2136      	movs	r1, #54	; 0x36
   d69ac:	4620      	mov	r0, r4
   d69ae:	f7ff ff8a 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d69b2:	7030      	strb	r0, [r6, #0]
  if (system_error != 0)
   d69b4:	b125      	cbz	r5, d69c0 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x36>
    *system_error = read8(BNO055_SYS_ERR_ADDR);
   d69b6:	213a      	movs	r1, #58	; 0x3a
   d69b8:	4620      	mov	r0, r4
   d69ba:	f7ff ff84 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d69be:	7028      	strb	r0, [r5, #0]
}
   d69c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(200);
   d69c4:	20c8      	movs	r0, #200	; 0xc8
   d69c6:	f002 b881 	b.w	d8acc <delay>

000d69ca <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>:
                                     uint8_t *accel, uint8_t *mag) {
   d69ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69cc:	460e      	mov	r6, r1
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d69ce:	2135      	movs	r1, #53	; 0x35
                                     uint8_t *accel, uint8_t *mag) {
   d69d0:	9f06      	ldr	r7, [sp, #24]
   d69d2:	4615      	mov	r5, r2
   d69d4:	461c      	mov	r4, r3
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d69d6:	f7ff ff76 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (sys != NULL) {
   d69da:	b10e      	cbz	r6, d69e0 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x16>
    *sys = (calData >> 6) & 0x03;
   d69dc:	0983      	lsrs	r3, r0, #6
   d69de:	7033      	strb	r3, [r6, #0]
  if (gyro != NULL) {
   d69e0:	b115      	cbz	r5, d69e8 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x1e>
    *gyro = (calData >> 4) & 0x03;
   d69e2:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d69e6:	702b      	strb	r3, [r5, #0]
  if (accel != NULL) {
   d69e8:	b114      	cbz	r4, d69f0 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x26>
    *accel = (calData >> 2) & 0x03;
   d69ea:	f3c0 0381 	ubfx	r3, r0, #2, #2
   d69ee:	7023      	strb	r3, [r4, #0]
  if (mag != NULL) {
   d69f0:	b117      	cbz	r7, d69f8 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x2e>
    *mag = calData & 0x03;
   d69f2:	f000 0003 	and.w	r0, r0, #3
   d69f6:	7038      	strb	r0, [r7, #0]
}
   d69f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d69fa <_ZN15Adafruit_BNO05517isFullyCalibratedEv>:
bool Adafruit_BNO055::isFullyCalibrated() {
   d69fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d69fc:	4604      	mov	r4, r0
  getCalibration(&system, &gyro, &accel, &mag);
   d69fe:	f10d 030f 	add.w	r3, sp, #15
   d6a02:	9300      	str	r3, [sp, #0]
   d6a04:	f10d 020d 	add.w	r2, sp, #13
   d6a08:	f10d 030e 	add.w	r3, sp, #14
   d6a0c:	a903      	add	r1, sp, #12
   d6a0e:	f7ff ffdc 	bl	d69ca <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
  switch (_mode) {
   d6a12:	7c23      	ldrb	r3, [r4, #16]
   d6a14:	3b01      	subs	r3, #1
   d6a16:	2b09      	cmp	r3, #9
   d6a18:	d817      	bhi.n	d6a4a <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x50>
   d6a1a:	e8df f003 	tbb	[pc, r3]
   d6a1e:	2205      	.short	0x2205
   d6a20:	130c1e10 	.word	0x130c1e10
   d6a24:	101e0c16 	.word	0x101e0c16
    return (accel == 3);
   d6a28:	f89d 000e 	ldrb.w	r0, [sp, #14]
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   d6a2c:	1ec3      	subs	r3, r0, #3
   d6a2e:	4258      	negs	r0, r3
   d6a30:	4158      	adcs	r0, r3
}
   d6a32:	b004      	add	sp, #16
   d6a34:	bd10      	pop	{r4, pc}
    return (accel == 3 && gyro == 3);
   d6a36:	f89d 300e 	ldrb.w	r3, [sp, #14]
    return (mag == 3 && gyro == 3);
   d6a3a:	2b03      	cmp	r3, #3
   d6a3c:	d114      	bne.n	d6a68 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6a3e:	f89d 000d 	ldrb.w	r0, [sp, #13]
   d6a42:	e7f3      	b.n	d6a2c <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
   d6a44:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d6a48:	e7f7      	b.n	d6a3a <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x40>
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   d6a4a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6a4e:	2b03      	cmp	r3, #3
   d6a50:	d10a      	bne.n	d6a68 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6a52:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6a56:	2b03      	cmp	r3, #3
   d6a58:	d106      	bne.n	d6a68 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6a5a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6a5e:	2b03      	cmp	r3, #3
   d6a60:	d102      	bne.n	d6a68 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6a62:	f89d 000f 	ldrb.w	r0, [sp, #15]
   d6a66:	e7e1      	b.n	d6a2c <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
    return (accel == 3 && mag == 3);
   d6a68:	2000      	movs	r0, #0
   d6a6a:	e7e2      	b.n	d6a32 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x38>

000d6a6c <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>:
    adafruit_bno055_offsets_t &offsets_type) {
   d6a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6a70:	4604      	mov	r4, r0
   d6a72:	460d      	mov	r5, r1
  if (isFullyCalibrated()) {
   d6a74:	f7ff ffc1 	bl	d69fa <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d6a78:	4606      	mov	r6, r0
   d6a7a:	2800      	cmp	r0, #0
   d6a7c:	f000 8091 	beq.w	d6ba2 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t+0x136>
    setMode(OPERATION_MODE_CONFIG);
   d6a80:	2100      	movs	r1, #0
   d6a82:	4620      	mov	r0, r4
    adafruit_bno055_opmode_t lastMode = _mode;
   d6a84:	f894 8010 	ldrb.w	r8, [r4, #16]
    setMode(OPERATION_MODE_CONFIG);
   d6a88:	f7ff fe71 	bl	d676e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
    delay(25);
   d6a8c:	2019      	movs	r0, #25
   d6a8e:	f002 f81d 	bl	d8acc <delay>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6a92:	2156      	movs	r1, #86	; 0x56
   d6a94:	4620      	mov	r0, r4
   d6a96:	f7ff ff16 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   d6a9a:	2155      	movs	r1, #85	; 0x55
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6a9c:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   d6a9e:	4620      	mov	r0, r4
   d6aa0:	f7ff ff11 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6aa4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6aa8:	8028      	strh	r0, [r5, #0]
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6aaa:	2158      	movs	r1, #88	; 0x58
   d6aac:	4620      	mov	r0, r4
   d6aae:	f7ff ff0a 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   d6ab2:	2157      	movs	r1, #87	; 0x57
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6ab4:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   d6ab6:	4620      	mov	r0, r4
   d6ab8:	f7ff ff05 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6abc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6ac0:	8068      	strh	r0, [r5, #2]
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6ac2:	215a      	movs	r1, #90	; 0x5a
   d6ac4:	4620      	mov	r0, r4
   d6ac6:	f7ff fefe 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   d6aca:	2159      	movs	r1, #89	; 0x59
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6acc:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   d6ace:	4620      	mov	r0, r4
   d6ad0:	f7ff fef9 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6ad4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6ad8:	80a8      	strh	r0, [r5, #4]
        (read8(MAG_OFFSET_X_MSB_ADDR) << 8) | (read8(MAG_OFFSET_X_LSB_ADDR));
   d6ada:	215c      	movs	r1, #92	; 0x5c
   d6adc:	4620      	mov	r0, r4
   d6ade:	f7ff fef2 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ae2:	215b      	movs	r1, #91	; 0x5b
   d6ae4:	4607      	mov	r7, r0
   d6ae6:	4620      	mov	r0, r4
   d6ae8:	f7ff feed 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6aec:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_x =
   d6af0:	80e8      	strh	r0, [r5, #6]
        (read8(MAG_OFFSET_Y_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Y_LSB_ADDR));
   d6af2:	215e      	movs	r1, #94	; 0x5e
   d6af4:	4620      	mov	r0, r4
   d6af6:	f7ff fee6 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6afa:	215d      	movs	r1, #93	; 0x5d
   d6afc:	4607      	mov	r7, r0
   d6afe:	4620      	mov	r0, r4
   d6b00:	f7ff fee1 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b04:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_y =
   d6b08:	8128      	strh	r0, [r5, #8]
        (read8(MAG_OFFSET_Z_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Z_LSB_ADDR));
   d6b0a:	2160      	movs	r1, #96	; 0x60
   d6b0c:	4620      	mov	r0, r4
   d6b0e:	f7ff feda 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b12:	215f      	movs	r1, #95	; 0x5f
   d6b14:	4607      	mov	r7, r0
   d6b16:	4620      	mov	r0, r4
   d6b18:	f7ff fed5 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b1c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_z =
   d6b20:	8168      	strh	r0, [r5, #10]
        (read8(GYRO_OFFSET_X_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_X_LSB_ADDR));
   d6b22:	2162      	movs	r1, #98	; 0x62
   d6b24:	4620      	mov	r0, r4
   d6b26:	f7ff fece 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b2a:	2161      	movs	r1, #97	; 0x61
   d6b2c:	4607      	mov	r7, r0
   d6b2e:	4620      	mov	r0, r4
   d6b30:	f7ff fec9 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b34:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_x =
   d6b38:	81a8      	strh	r0, [r5, #12]
        (read8(GYRO_OFFSET_Y_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Y_LSB_ADDR));
   d6b3a:	2164      	movs	r1, #100	; 0x64
   d6b3c:	4620      	mov	r0, r4
   d6b3e:	f7ff fec2 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b42:	2163      	movs	r1, #99	; 0x63
   d6b44:	4607      	mov	r7, r0
   d6b46:	4620      	mov	r0, r4
   d6b48:	f7ff febd 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b4c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_y =
   d6b50:	81e8      	strh	r0, [r5, #14]
        (read8(GYRO_OFFSET_Z_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Z_LSB_ADDR));
   d6b52:	2166      	movs	r1, #102	; 0x66
   d6b54:	4620      	mov	r0, r4
   d6b56:	f7ff feb6 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b5a:	2165      	movs	r1, #101	; 0x65
   d6b5c:	4607      	mov	r7, r0
   d6b5e:	4620      	mov	r0, r4
   d6b60:	f7ff feb1 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b64:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_z =
   d6b68:	8228      	strh	r0, [r5, #16]
        (read8(ACCEL_RADIUS_MSB_ADDR) << 8) | (read8(ACCEL_RADIUS_LSB_ADDR));
   d6b6a:	2168      	movs	r1, #104	; 0x68
   d6b6c:	4620      	mov	r0, r4
   d6b6e:	f7ff feaa 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b72:	2167      	movs	r1, #103	; 0x67
   d6b74:	4607      	mov	r7, r0
   d6b76:	4620      	mov	r0, r4
   d6b78:	f7ff fea5 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b7c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.accel_radius =
   d6b80:	8268      	strh	r0, [r5, #18]
        (read8(MAG_RADIUS_MSB_ADDR) << 8) | (read8(MAG_RADIUS_LSB_ADDR));
   d6b82:	216a      	movs	r1, #106	; 0x6a
   d6b84:	4620      	mov	r0, r4
   d6b86:	f7ff fe9e 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b8a:	2169      	movs	r1, #105	; 0x69
   d6b8c:	4607      	mov	r7, r0
   d6b8e:	4620      	mov	r0, r4
   d6b90:	f7ff fe99 	bl	d68c6 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b94:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_radius =
   d6b98:	82a8      	strh	r0, [r5, #20]
    setMode(lastMode);
   d6b9a:	4641      	mov	r1, r8
   d6b9c:	4620      	mov	r0, r4
   d6b9e:	f7ff fde6 	bl	d676e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d6ba2:	4630      	mov	r0, r6
   d6ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6ba8 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte *buffer,
                              uint8_t len) {
   d6ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t reg_buf[1] = {(uint8_t)reg};
   d6baa:	f88d 100c 	strb.w	r1, [sp, #12]
  return i2c_dev->write_then_read(reg_buf, 1, buffer, len);
   d6bae:	2100      	movs	r1, #0
   d6bb0:	e9cd 3100 	strd	r3, r1, [sp]
   d6bb4:	4613      	mov	r3, r2
   d6bb6:	a903      	add	r1, sp, #12
   d6bb8:	2201      	movs	r2, #1
   d6bba:	6880      	ldr	r0, [r0, #8]
   d6bbc:	f7ff fd66 	bl	d668c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
}
   d6bc0:	b005      	add	sp, #20
   d6bc2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6bc8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
   d6bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6bca:	460d      	mov	r5, r1
   d6bcc:	4616      	mov	r6, r2

namespace imu {

template <uint8_t N> class Vector {
public:
  Vector() { memset(p_vec, 0, sizeof(double) * N); }
   d6bce:	2100      	movs	r1, #0
   d6bd0:	2218      	movs	r2, #24
   d6bd2:	4604      	mov	r4, r0
   d6bd4:	f006 f888 	bl	dcce8 <memset>
  memset(buffer, 0, 6);
   d6bd8:	2300      	movs	r3, #0
   d6bda:	9300      	str	r3, [sp, #0]
   d6bdc:	f8ad 3004 	strh.w	r3, [sp, #4]
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
   d6be0:	4628      	mov	r0, r5
   d6be2:	2306      	movs	r3, #6
   d6be4:	466a      	mov	r2, sp
   d6be6:	4631      	mov	r1, r6
   d6be8:	f7ff ffde 	bl	d6ba8 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6bec:	f89d 3001 	ldrb.w	r3, [sp, #1]
   d6bf0:	f89d 0000 	ldrb.w	r0, [sp]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6bf4:	f89d 7002 	ldrb.w	r7, [sp, #2]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6bf8:	f89d 5004 	ldrb.w	r5, [sp, #4]
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6bfc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6c00:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d6c04:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6c08:	f89d 3005 	ldrb.w	r3, [sp, #5]
  switch (vector_type) {
   d6c0c:	2e1a      	cmp	r6, #26
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6c0e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6c12:	b200      	sxth	r0, r0
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6c14:	b23f      	sxth	r7, r7
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6c16:	b22d      	sxth	r5, r5
  switch (vector_type) {
   d6c18:	d00d      	beq.n	d6c36 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6c1a:	d808      	bhi.n	d6c2e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x66>
   d6c1c:	2e0e      	cmp	r6, #14
   d6c1e:	d00a      	beq.n	d6c36 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6c20:	2e14      	cmp	r6, #20
   d6c22:	d008      	beq.n	d6c36 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6c24:	2e08      	cmp	r6, #8
   d6c26:	d021      	beq.n	d6c6c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
}
   d6c28:	4620      	mov	r0, r4
   d6c2a:	b003      	add	sp, #12
   d6c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (vector_type) {
   d6c2e:	2e28      	cmp	r6, #40	; 0x28
   d6c30:	d01c      	beq.n	d6c6c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
   d6c32:	2e2e      	cmp	r6, #46	; 0x2e
   d6c34:	e7f7      	b.n	d6c26 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5e>
    xyz[0] = ((double)x) / 16.0;
   d6c36:	f005 f9b7 	bl	dbfa8 <__aeabi_i2d>
   d6c3a:	4b19      	ldr	r3, [pc, #100]	; (d6ca0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6c3c:	2200      	movs	r2, #0
   d6c3e:	f005 fa1d 	bl	dc07c <__aeabi_dmul>
   d6c42:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 16.0;
   d6c46:	4638      	mov	r0, r7
   d6c48:	f005 f9ae 	bl	dbfa8 <__aeabi_i2d>
   d6c4c:	4b14      	ldr	r3, [pc, #80]	; (d6ca0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6c4e:	2200      	movs	r2, #0
   d6c50:	f005 fa14 	bl	dc07c <__aeabi_dmul>
   d6c54:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 16.0;
   d6c58:	4628      	mov	r0, r5
   d6c5a:	f005 f9a5 	bl	dbfa8 <__aeabi_i2d>
   d6c5e:	4b10      	ldr	r3, [pc, #64]	; (d6ca0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6c60:	2200      	movs	r2, #0
   d6c62:	f005 fa0b 	bl	dc07c <__aeabi_dmul>
    xyz[2] = ((double)z) / 100.0;
   d6c66:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return xyz;
   d6c6a:	e7dd      	b.n	d6c28 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x60>
    xyz[0] = ((double)x) / 100.0;
   d6c6c:	f005 f99c 	bl	dbfa8 <__aeabi_i2d>
   d6c70:	4b0c      	ldr	r3, [pc, #48]	; (d6ca4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6c72:	2200      	movs	r2, #0
   d6c74:	f005 fb2c 	bl	dc2d0 <__aeabi_ddiv>
   d6c78:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 100.0;
   d6c7c:	4638      	mov	r0, r7
   d6c7e:	f005 f993 	bl	dbfa8 <__aeabi_i2d>
   d6c82:	4b08      	ldr	r3, [pc, #32]	; (d6ca4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6c84:	2200      	movs	r2, #0
   d6c86:	f005 fb23 	bl	dc2d0 <__aeabi_ddiv>
   d6c8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 100.0;
   d6c8e:	4628      	mov	r0, r5
   d6c90:	f005 f98a 	bl	dbfa8 <__aeabi_i2d>
   d6c94:	4b03      	ldr	r3, [pc, #12]	; (d6ca4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6c96:	2200      	movs	r2, #0
   d6c98:	f005 fb1a 	bl	dc2d0 <__aeabi_ddiv>
   d6c9c:	e7e3      	b.n	d6c66 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9e>
   d6c9e:	bf00      	nop
   d6ca0:	3fb00000 	.word	0x3fb00000
   d6ca4:	40590000 	.word	0x40590000

000d6ca8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
   d6ca8:	b530      	push	{r4, r5, lr}
   d6caa:	460c      	mov	r4, r1
   d6cac:	b087      	sub	sp, #28
   d6cae:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   d6cb0:	2220      	movs	r2, #32
   d6cb2:	2100      	movs	r1, #0
   d6cb4:	1d20      	adds	r0, r4, #4
   d6cb6:	f006 f817 	bl	dcce8 <memset>
  event->version = sizeof(sensors_event_t);
   d6cba:	2324      	movs	r3, #36	; 0x24
   d6cbc:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d6cbe:	68eb      	ldr	r3, [r5, #12]
   d6cc0:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_ORIENTATION;
   d6cc2:	2303      	movs	r3, #3
   d6cc4:	60a3      	str	r3, [r4, #8]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6cc6:	f001 f8f7 	bl	d7eb8 <HAL_Timer_Get_Milli_Seconds>
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6cca:	221a      	movs	r2, #26
  event->timestamp = millis();
   d6ccc:	6120      	str	r0, [r4, #16]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6cce:	4629      	mov	r1, r5
   d6cd0:	4668      	mov	r0, sp
   d6cd2:	f7ff ff79 	bl	d6bc8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
   d6cd6:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6cda:	f005 fcc7 	bl	dc66c <__aeabi_d2f>
   d6cde:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
   d6ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6ce4:	f005 fcc2 	bl	dc66c <__aeabi_d2f>
   d6ce8:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
   d6cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6cee:	f005 fcbd 	bl	dc66c <__aeabi_d2f>
   d6cf2:	61e0      	str	r0, [r4, #28]
}
   d6cf4:	2001      	movs	r0, #1
   d6cf6:	b007      	add	sp, #28
   d6cf8:	bd30      	pop	{r4, r5, pc}

000d6cfa <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d6cfa:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d6cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d6cfe:	db66      	blt.n	d6dce <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6d00:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d6d04:	428c      	cmp	r4, r1
   d6d06:	dd62      	ble.n	d6dce <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6d08:	2a00      	cmp	r2, #0
   d6d0a:	db60      	blt.n	d6dce <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6d0c:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d6d10:	4294      	cmp	r4, r2
   d6d12:	dd5c      	ble.n	d6dce <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   d6d14:	7e84      	ldrb	r4, [r0, #26]
   d6d16:	2c02      	cmp	r4, #2
   d6d18:	d05a      	beq.n	d6dd0 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   d6d1a:	2c03      	cmp	r4, #3
   d6d1c:	d061      	beq.n	d6de2 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   d6d1e:	2c01      	cmp	r4, #1
   d6d20:	d104      	bne.n	d6d2c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   d6d22:	8904      	ldrh	r4, [r0, #8]
   d6d24:	43d2      	mvns	r2, r2
   d6d26:	4414      	add	r4, r2
      break;
   d6d28:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d6d2a:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   d6d2c:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   d6d30:	428c      	cmp	r4, r1
   d6d32:	bfa8      	it	ge
   d6d34:	460c      	movge	r4, r1
   d6d36:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   d6d38:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   d6d3c:	4294      	cmp	r4, r2
   d6d3e:	bfa8      	it	ge
   d6d40:	4614      	movge	r4, r2
   d6d42:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   d6d44:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   d6d48:	428c      	cmp	r4, r1
   d6d4a:	bfb8      	it	lt
   d6d4c:	460c      	movlt	r4, r1
   d6d4e:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   d6d50:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   d6d54:	4294      	cmp	r4, r2
   d6d56:	bfb8      	it	lt
   d6d58:	4614      	movlt	r4, r2
   d6d5a:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   d6d5c:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d6d60:	2c01      	cmp	r4, #1
   d6d62:	d116      	bne.n	d6d92 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   d6d64:	2b01      	cmp	r3, #1
   d6d66:	d042      	beq.n	d6dee <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   d6d68:	2b02      	cmp	r3, #2
   d6d6a:	d051      	beq.n	d6e10 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   d6d6c:	b98b      	cbnz	r3, d6d92 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   d6d6e:	2a00      	cmp	r2, #0
   d6d70:	8905      	ldrh	r5, [r0, #8]
   d6d72:	6b47      	ldr	r7, [r0, #52]	; 0x34
   d6d74:	4614      	mov	r4, r2
   d6d76:	bfb8      	it	lt
   d6d78:	1dd4      	addlt	r4, r2, #7
   d6d7a:	10e4      	asrs	r4, r4, #3
   d6d7c:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6d80:	f002 0607 	and.w	r6, r2, #7
   d6d84:	2501      	movs	r5, #1
   d6d86:	fa05 f606 	lsl.w	r6, r5, r6
   d6d8a:	5d3d      	ldrb	r5, [r7, r4]
   d6d8c:	ea25 0506 	bic.w	r5, r5, r6
   d6d90:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   d6d92:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d6d96:	2c04      	cmp	r4, #4
   d6d98:	d119      	bne.n	d6dce <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   d6d9a:	8904      	ldrh	r4, [r0, #8]
   d6d9c:	fb14 f202 	smulbb	r2, r4, r2
   d6da0:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   d6da4:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   d6da8:	f342 024f 	sbfx	r2, r2, #1, #16
   d6dac:	eb02 0264 	add.w	r2, r2, r4, asr #1
   d6db0:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
   d6db2:	5ca0      	ldrb	r0, [r4, r2]
   d6db4:	07c9      	lsls	r1, r1, #31
        uint8_t t = pixelptr[0] & 0x0F;
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   d6db6:	bf4b      	itete	mi
   d6db8:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   d6dbc:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   d6dc0:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   d6dc4:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   d6dc8:	bf48      	it	mi
   d6dca:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   d6dcc:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   d6dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   d6dd0:	8904      	ldrh	r4, [r0, #8]
   d6dd2:	43c9      	mvns	r1, r1
   d6dd4:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d6dd6:	8944      	ldrh	r4, [r0, #10]
   d6dd8:	43d2      	mvns	r2, r2
   d6dda:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   d6ddc:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d6dde:	b212      	sxth	r2, r2
      break;
   d6de0:	e7a4      	b.n	d6d2c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d6de2:	8944      	ldrh	r4, [r0, #10]
   d6de4:	43c9      	mvns	r1, r1
   d6de6:	440c      	add	r4, r1
      break;
   d6de8:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d6dea:	b222      	sxth	r2, r4
      break;
   d6dec:	e79e      	b.n	d6d2c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   d6dee:	2a00      	cmp	r2, #0
   d6df0:	8905      	ldrh	r5, [r0, #8]
   d6df2:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d6df4:	4614      	mov	r4, r2
   d6df6:	bfb8      	it	lt
   d6df8:	1dd4      	addlt	r4, r2, #7
   d6dfa:	10e4      	asrs	r4, r4, #3
   d6dfc:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6e00:	f002 0707 	and.w	r7, r2, #7
   d6e04:	2501      	movs	r5, #1
   d6e06:	40bd      	lsls	r5, r7
   d6e08:	5d37      	ldrb	r7, [r6, r4]
   d6e0a:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d6e0c:	5535      	strb	r5, [r6, r4]
        break;
   d6e0e:	e7c0      	b.n	d6d92 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d6e10:	2a00      	cmp	r2, #0
   d6e12:	8905      	ldrh	r5, [r0, #8]
   d6e14:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d6e16:	4614      	mov	r4, r2
   d6e18:	bfb8      	it	lt
   d6e1a:	1dd4      	addlt	r4, r2, #7
   d6e1c:	10e4      	asrs	r4, r4, #3
   d6e1e:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6e22:	f002 0707 	and.w	r7, r2, #7
   d6e26:	2501      	movs	r5, #1
   d6e28:	40bd      	lsls	r5, r7
   d6e2a:	5d37      	ldrb	r7, [r6, r4]
   d6e2c:	407d      	eors	r5, r7
   d6e2e:	e7ed      	b.n	d6e0c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

000d6e30 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   d6e30:	b538      	push	{r3, r4, r5, lr}
   d6e32:	460d      	mov	r5, r1
   d6e34:	4611      	mov	r1, r2
   d6e36:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d6e38:	b21a      	sxth	r2, r3
   d6e3a:	b209      	sxth	r1, r1
   d6e3c:	f000 fa96 	bl	d736c <_ZN12Adafruit_GFXC1Ess>
   d6e40:	9a06      	ldr	r2, [sp, #24]
   d6e42:	4b0b      	ldr	r3, [pc, #44]	; (d6e70 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   d6e44:	62e2      	str	r2, [r4, #44]	; 0x2c
   d6e46:	9a07      	ldr	r2, [sp, #28]
   d6e48:	6023      	str	r3, [r4, #0]
   d6e4a:	2300      	movs	r3, #0
   d6e4c:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   d6e50:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   d6e54:	f04f 33ff 	mov.w	r3, #4294967295
   d6e58:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   d6e5c:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   d6e60:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   d6e62:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d6e64:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   d6e68:	6523      	str	r3, [r4, #80]	; 0x50
}
   d6e6a:	4620      	mov	r0, r4
   d6e6c:	bd38      	pop	{r3, r4, r5, pc}
   d6e6e:	bf00      	nop
   d6e70:	000dd620 	.word	0x000dd620

000d6e74 <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   d6e74:	b538      	push	{r3, r4, r5, lr}
   d6e76:	4b0c      	ldr	r3, [pc, #48]	; (d6ea8 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   d6e78:	6003      	str	r3, [r0, #0]
   d6e7a:	4604      	mov	r4, r0
  if (buffer) {
   d6e7c:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6e7e:	b118      	cbz	r0, d6e88 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   d6e80:	f001 fa56 	bl	d8330 <free>
    buffer = NULL;
   d6e84:	2300      	movs	r3, #0
   d6e86:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   d6e88:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d6e8a:	b135      	cbz	r5, d6e9a <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   d6e8c:	4628      	mov	r0, r5
   d6e8e:	f7ff fa03 	bl	d6298 <_ZN18Adafruit_SPIDeviceD1Ev>
   d6e92:	2138      	movs	r1, #56	; 0x38
   d6e94:	4628      	mov	r0, r5
   d6e96:	f002 fac1 	bl	d941c <_ZdlPvj>
  if (i2c_dev)
   d6e9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6e9c:	b110      	cbz	r0, d6ea4 <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   d6e9e:	2110      	movs	r1, #16
   d6ea0:	f002 fabc 	bl	d941c <_ZdlPvj>
}
   d6ea4:	4620      	mov	r0, r4
   d6ea6:	bd38      	pop	{r3, r4, r5, pc}
   d6ea8:	000dd620 	.word	0x000dd620

000d6eac <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d6eac:	b530      	push	{r4, r5, lr}
   d6eae:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   d6eb0:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d6eb2:	f88d 100f 	strb.w	r1, [sp, #15]
   d6eb6:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   d6eb8:	b17d      	cbz	r5, d6eda <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d6eba:	2300      	movs	r3, #0
   d6ebc:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   d6ebe:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d6ec2:	f88d 3014 	strb.w	r3, [sp, #20]
   d6ec6:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   d6eca:	2301      	movs	r3, #1
   d6ecc:	2202      	movs	r2, #2
   d6ece:	a905      	add	r1, sp, #20
   d6ed0:	4628      	mov	r0, r5
   d6ed2:	f7ff fb6d 	bl	d65b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d6ed6:	b007      	add	sp, #28
   d6ed8:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   d6eda:	4629      	mov	r1, r5
   d6edc:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d6ee0:	f002 fa05 	bl	d92ee <digitalWrite>
    spi_dev->write(&c, 1);
   d6ee4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6ee6:	9500      	str	r5, [sp, #0]
   d6ee8:	462b      	mov	r3, r5
   d6eea:	2201      	movs	r2, #1
   d6eec:	f10d 010f 	add.w	r1, sp, #15
   d6ef0:	f7ff facd 	bl	d648e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   d6ef4:	e7ef      	b.n	d6ed6 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000d6ef6 <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   d6ef6:	2900      	cmp	r1, #0
   d6ef8:	bf14      	ite	ne
   d6efa:	21a7      	movne	r1, #167	; 0xa7
   d6efc:	21a6      	moveq	r1, #166	; 0xa6
   d6efe:	f7ff bfd5 	b.w	d6eac <_ZN17Adafruit_GrayOLED12oled_commandEh>

000d6f02 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d6f02:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   d6f04:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d6f06:	b085      	sub	sp, #20
   d6f08:	4604      	mov	r4, r0
   d6f0a:	460e      	mov	r6, r1
   d6f0c:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   d6f0e:	b165      	cbz	r5, d6f2a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d6f10:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d6f12:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d6f16:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d6f1a:	2301      	movs	r3, #1
   d6f1c:	9000      	str	r0, [sp, #0]
   d6f1e:	9301      	str	r3, [sp, #4]
   d6f20:	4628      	mov	r0, r5
   d6f22:	f7ff fb45 	bl	d65b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d6f26:	b005      	add	sp, #20
   d6f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   d6f2a:	4629      	mov	r1, r5
   d6f2c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d6f30:	f002 f9dd 	bl	d92ee <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   d6f34:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6f36:	9500      	str	r5, [sp, #0]
   d6f38:	462b      	mov	r3, r5
   d6f3a:	463a      	mov	r2, r7
   d6f3c:	4631      	mov	r1, r6
   d6f3e:	f7ff faa6 	bl	d648e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d6f42:	e7f0      	b.n	d6f26 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000d6f44 <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   d6f44:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d6f46:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   d6f4a:	8903      	ldrh	r3, [r0, #8]
   d6f4c:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   d6f50:	fb12 f203 	smulbb	r2, r2, r3
   d6f54:	1dcb      	adds	r3, r1, #7
   d6f56:	bf48      	it	mi
   d6f58:	f101 030e 	addmi.w	r3, r1, #14
   d6f5c:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   d6f5e:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d6f60:	435a      	muls	r2, r3
   d6f62:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6f64:	2100      	movs	r1, #0
   d6f66:	f005 febf 	bl	dcce8 <memset>
  window_x1 = 0;
   d6f6a:	2300      	movs	r3, #0
   d6f6c:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d6f6e:	8923      	ldrh	r3, [r4, #8]
   d6f70:	3b01      	subs	r3, #1
   d6f72:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d6f74:	8963      	ldrh	r3, [r4, #10]
   d6f76:	3b01      	subs	r3, #1
   d6f78:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   d6f7a:	bd10      	pop	{r4, pc}

000d6f7c <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d6f7c:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   d6f7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d6f80:	4604      	mov	r4, r0
   d6f82:	460e      	mov	r6, r1
   d6f84:	4615      	mov	r5, r2
  if ((!buffer) &&
   d6f86:	b30b      	cbz	r3, d6fcc <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   d6f88:	2d00      	cmp	r5, #0
   d6f8a:	d133      	bne.n	d6ff4 <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   d6f8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d6f8e:	2b00      	cmp	r3, #0
   d6f90:	d050      	beq.n	d7034 <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   d6f92:	2010      	movs	r0, #16
   d6f94:	f7fd f87f 	bl	d4096 <_Znwj>
   d6f98:	4605      	mov	r5, r0
   d6f9a:	b118      	cbz	r0, d6fa4 <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   d6f9c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d6f9e:	4631      	mov	r1, r6
   d6fa0:	f7ff fadb 	bl	d655a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d6fa4:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   d6fa6:	b31d      	cbz	r5, d6ff0 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d6fa8:	2101      	movs	r1, #1
   d6faa:	4628      	mov	r0, r5
   d6fac:	f7ff faf1 	bl	d6592 <_ZN18Adafruit_I2CDevice5beginEb>
   d6fb0:	b1f0      	cbz	r0, d6ff0 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   d6fb2:	4620      	mov	r0, r4
   d6fb4:	f7ff ffc6 	bl	d6f44 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   d6fb8:	2300      	movs	r3, #0
   d6fba:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d6fbc:	8923      	ldrh	r3, [r4, #8]
   d6fbe:	3b01      	subs	r3, #1
   d6fc0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d6fc2:	8963      	ldrh	r3, [r4, #10]
   d6fc4:	3b01      	subs	r3, #1
   d6fc6:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   d6fc8:	2001      	movs	r0, #1
   d6fca:	e012      	b.n	d6ff2 <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   d6fcc:	8923      	ldrh	r3, [r4, #8]
   d6fce:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   d6fd2:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   d6fd6:	fb10 f003 	smulbb	r0, r0, r3
   d6fda:	1dd3      	adds	r3, r2, #7
   d6fdc:	bf48      	it	mi
   d6fde:	f102 030e 	addmi.w	r3, r2, #14
   d6fe2:	10db      	asrs	r3, r3, #3
   d6fe4:	4358      	muls	r0, r3
   d6fe6:	f001 f99b 	bl	d8320 <malloc>
   d6fea:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   d6fec:	2800      	cmp	r0, #0
   d6fee:	d1cb      	bne.n	d6f88 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   d6ff0:	2000      	movs	r0, #0
}
   d6ff2:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   d6ff4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d6ff6:	2800      	cmp	r0, #0
   d6ff8:	dbc8      	blt.n	d6f8c <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   d6ffa:	2101      	movs	r1, #1
   d6ffc:	b280      	uxth	r0, r0
   d6ffe:	f002 f965 	bl	d92cc <pinMode>
    digitalWrite(rstPin, HIGH);
   d7002:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d7006:	2101      	movs	r1, #1
   d7008:	f002 f971 	bl	d92ee <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   d700c:	200a      	movs	r0, #10
   d700e:	f001 fd5d 	bl	d8acc <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d7012:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d7016:	2100      	movs	r1, #0
   d7018:	f002 f969 	bl	d92ee <digitalWrite>
    delay(10);                  // Wait 10 ms
   d701c:	200a      	movs	r0, #10
   d701e:	f001 fd55 	bl	d8acc <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d7022:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d7026:	2101      	movs	r1, #1
   d7028:	f002 f961 	bl	d92ee <digitalWrite>
    delay(10);
   d702c:	200a      	movs	r0, #10
   d702e:	f001 fd4d 	bl	d8acc <delay>
   d7032:	e7ab      	b.n	d6f8c <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   d7034:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7036:	2800      	cmp	r0, #0
   d7038:	d0da      	beq.n	d6ff0 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d703a:	f7ff f936 	bl	d62aa <_ZN18Adafruit_SPIDevice5beginEv>
   d703e:	2800      	cmp	r0, #0
   d7040:	d0d6      	beq.n	d6ff0 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d7042:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d7046:	2101      	movs	r1, #1
   d7048:	f002 f940 	bl	d92cc <pinMode>
   d704c:	e7b1      	b.n	d6fb2 <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000d704e <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   d704e:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d7050:	2381      	movs	r3, #129	; 0x81
   d7052:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   d7056:	2202      	movs	r2, #2
   d7058:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d705a:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   d705e:	f7ff ff50 	bl	d6f02 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   d7062:	b003      	add	sp, #12
   d7064:	f85d fb04 	ldr.w	pc, [sp], #4

000d7068 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
   d7068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d706c:	b085      	sub	sp, #20
   d706e:	461f      	mov	r7, r3
   d7070:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d7074:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d7078:	eba8 0902 	sub.w	r9, r8, r2
   d707c:	eba7 0a01 	sub.w	sl, r7, r1
   d7080:	f1b9 0f00 	cmp.w	r9, #0
   d7084:	bfb8      	it	lt
   d7086:	f1c9 0900 	rsblt	r9, r9, #0
   d708a:	f1ba 0f00 	cmp.w	sl, #0
   d708e:	bfb8      	it	lt
   d7090:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d7094:	45d1      	cmp	r9, sl
                             uint16_t color) {
   d7096:	4683      	mov	fp, r0
   d7098:	460c      	mov	r4, r1
   d709a:	4615      	mov	r5, r2
  if (steep) {
   d709c:	dd04      	ble.n	d70a8 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d709e:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
   d70a0:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
   d70a2:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
   d70a4:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
   d70a6:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d70a8:	42bc      	cmp	r4, r7
   d70aa:	dd05      	ble.n	d70b8 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d70ac:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
   d70ae:	4645      	mov	r5, r8
   d70b0:	4690      	mov	r8, r2
  if (x0 > x1) {
   d70b2:	4622      	mov	r2, r4
   d70b4:	463c      	mov	r4, r7
   d70b6:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d70b8:	1b3e      	subs	r6, r7, r4
   d70ba:	b2b2      	uxth	r2, r6
   d70bc:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d70be:	eba8 0205 	sub.w	r2, r8, r5
   d70c2:	2a00      	cmp	r2, #0
   d70c4:	bfb8      	it	lt
   d70c6:	4252      	neglt	r2, r2
   d70c8:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d70ca:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d70ce:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d70d2:	4545      	cmp	r5, r8
   d70d4:	bfb4      	ite	lt
   d70d6:	2201      	movlt	r2, #1
   d70d8:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d70dc:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d70de:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
   d70e0:	42bc      	cmp	r4, r7
   d70e2:	dc1c      	bgt.n	d711e <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
    if (steep) {
   d70e4:	f8db 2000 	ldr.w	r2, [fp]
      writePixel(y0, x0, color);
   d70e8:	9303      	str	r3, [sp, #12]
    if (steep) {
   d70ea:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
   d70ec:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d70f0:	bfc7      	ittee	gt
   d70f2:	4629      	movgt	r1, r5
   d70f4:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
   d70f6:	462a      	movle	r2, r5
   d70f8:	4621      	movle	r1, r4
   d70fa:	4658      	mov	r0, fp
   d70fc:	47c0      	blx	r8
    }
    err -= dy;
   d70fe:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
   d7100:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d7102:	1ab6      	subs	r6, r6, r2
   d7104:	b2b1      	uxth	r1, r6
   d7106:	b236      	sxth	r6, r6
    if (err < 0) {
   d7108:	2e00      	cmp	r6, #0
   d710a:	da05      	bge.n	d7118 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
      y0 += ystep;
   d710c:	9a02      	ldr	r2, [sp, #8]
   d710e:	4415      	add	r5, r2
      err += dx;
   d7110:	9a00      	ldr	r2, [sp, #0]
   d7112:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d7114:	b22d      	sxth	r5, r5
      err += dx;
   d7116:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
   d7118:	3401      	adds	r4, #1
   d711a:	b224      	sxth	r4, r4
   d711c:	e7e0      	b.n	d70e0 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
    }
  }
}
   d711e:	b005      	add	sp, #20
   d7120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7124 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
   d7124:	4770      	bx	lr

000d7126 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
   d7126:	b410      	push	{r4}
  drawPixel(x, y, color);
   d7128:	6804      	ldr	r4, [r0, #0]
   d712a:	6924      	ldr	r4, [r4, #16]
   d712c:	46a4      	mov	ip, r4
}
   d712e:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
   d7132:	4760      	bx	ip

000d7134 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
   d7134:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
   d7136:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d7138:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
   d713c:	9502      	str	r5, [sp, #8]
   d713e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d7140:	46a4      	mov	ip, r4
}
   d7142:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
   d7144:	4760      	bx	ip

000d7146 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
   d7146:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
   d7148:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d714a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
   d714e:	9502      	str	r5, [sp, #8]
   d7150:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d7152:	46a4      	mov	ip, r4
}
   d7154:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
   d7156:	4760      	bx	ip

000d7158 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
   d7158:	b470      	push	{r4, r5, r6}
   d715a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d715e:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
   d7162:	6804      	ldr	r4, [r0, #0]
   d7164:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d7168:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d716a:	46a4      	mov	ip, r4
}
   d716c:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
   d716e:	4760      	bx	ip

000d7170 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
   d7170:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7174:	461c      	mov	r4, r3
  startWrite();
   d7176:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d7178:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d717c:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d717e:	4605      	mov	r5, r0
   d7180:	4616      	mov	r6, r2
  writeLine(x, y, x, y + h - 1, color);
   d7182:	3c01      	subs	r4, #1
   d7184:	4434      	add	r4, r6
                                 uint16_t color) {
   d7186:	460f      	mov	r7, r1
  writeLine(x, y, x, y + h - 1, color);
   d7188:	b224      	sxth	r4, r4
  startWrite();
   d718a:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
   d718c:	682b      	ldr	r3, [r5, #0]
   d718e:	f8cd 8004 	str.w	r8, [sp, #4]
   d7192:	9400      	str	r4, [sp, #0]
   d7194:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d7196:	4628      	mov	r0, r5
   d7198:	463b      	mov	r3, r7
   d719a:	4632      	mov	r2, r6
   d719c:	4639      	mov	r1, r7
   d719e:	47a0      	blx	r4
  endWrite();
   d71a0:	682b      	ldr	r3, [r5, #0]
   d71a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d71a4:	4628      	mov	r0, r5
}
   d71a6:	b002      	add	sp, #8
   d71a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d71ac:	4718      	bx	r3

000d71ae <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
   d71ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d71b2:	461d      	mov	r5, r3
  startWrite();
   d71b4:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d71b6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d71ba:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d71bc:	4604      	mov	r4, r0
   d71be:	4617      	mov	r7, r2
   d71c0:	460e      	mov	r6, r1
  startWrite();
   d71c2:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
   d71c4:	e9cd 7800 	strd	r7, r8, [sp]
   d71c8:	6822      	ldr	r2, [r4, #0]
   d71ca:	1e6b      	subs	r3, r5, #1
   d71cc:	4433      	add	r3, r6
   d71ce:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d71d0:	4620      	mov	r0, r4
   d71d2:	b21b      	sxth	r3, r3
   d71d4:	463a      	mov	r2, r7
   d71d6:	4631      	mov	r1, r6
   d71d8:	47a8      	blx	r5
  endWrite();
   d71da:	6823      	ldr	r3, [r4, #0]
   d71dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d71de:	4620      	mov	r0, r4
}
   d71e0:	b002      	add	sp, #8
   d71e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d71e6:	4718      	bx	r3

000d71e8 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d71e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d71ec:	461e      	mov	r6, r3
  startWrite();
   d71ee:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d71f0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
   d71f4:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d71f6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d71fa:	460c      	mov	r4, r1
   d71fc:	4605      	mov	r5, r0
   d71fe:	4617      	mov	r7, r2
  startWrite();
   d7200:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
   d7202:	4426      	add	r6, r4
   d7204:	42b4      	cmp	r4, r6
   d7206:	682b      	ldr	r3, [r5, #0]
   d7208:	da0b      	bge.n	d7222 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
   d720a:	f8cd 8000 	str.w	r8, [sp]
   d720e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d7212:	4621      	mov	r1, r4
   d7214:	464b      	mov	r3, r9
   d7216:	463a      	mov	r2, r7
   d7218:	4628      	mov	r0, r5
   d721a:	3401      	adds	r4, #1
   d721c:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
   d721e:	b224      	sxth	r4, r4
   d7220:	e7f0      	b.n	d7204 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
   d7222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7224:	4628      	mov	r0, r5
}
   d7226:	b002      	add	sp, #8
   d7228:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d722c:	4718      	bx	r3

000d722e <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d722e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d7230:	6802      	ldr	r2, [r0, #0]
   d7232:	9101      	str	r1, [sp, #4]
   d7234:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d7238:	9100      	str	r1, [sp, #0]
   d723a:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d723c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d7240:	2200      	movs	r2, #0
   d7242:	4611      	mov	r1, r2
   d7244:	47a0      	blx	r4
}
   d7246:	b002      	add	sp, #8
   d7248:	bd10      	pop	{r4, pc}

000d724a <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d724a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d724e:	461d      	mov	r5, r3
  startWrite();
   d7250:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d7252:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
   d7256:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d7258:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d725c:	4604      	mov	r4, r0
   d725e:	460f      	mov	r7, r1
   d7260:	4616      	mov	r6, r2
  startWrite();
   d7262:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
   d7264:	6823      	ldr	r3, [r4, #0]
   d7266:	f8cd 8000 	str.w	r8, [sp]
   d726a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d726e:	4632      	mov	r2, r6
   d7270:	462b      	mov	r3, r5
   d7272:	4639      	mov	r1, r7
   d7274:	4620      	mov	r0, r4
   d7276:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
   d7278:	6823      	ldr	r3, [r4, #0]
   d727a:	f8cd 8000 	str.w	r8, [sp]
   d727e:	f109 32ff 	add.w	r2, r9, #4294967295
   d7282:	4432      	add	r2, r6
   d7284:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d7288:	4639      	mov	r1, r7
   d728a:	462b      	mov	r3, r5
   d728c:	4620      	mov	r0, r4
   d728e:	b212      	sxth	r2, r2
   d7290:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
   d7292:	6823      	ldr	r3, [r4, #0]
   d7294:	f8cd 8000 	str.w	r8, [sp]
   d7298:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d729c:	4632      	mov	r2, r6
   d729e:	464b      	mov	r3, r9
   d72a0:	4639      	mov	r1, r7
   d72a2:	4620      	mov	r0, r4
   d72a4:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
   d72a6:	1e6b      	subs	r3, r5, #1
   d72a8:	19d9      	adds	r1, r3, r7
   d72aa:	6823      	ldr	r3, [r4, #0]
   d72ac:	f8cd 8000 	str.w	r8, [sp]
   d72b0:	6a1d      	ldr	r5, [r3, #32]
   d72b2:	4620      	mov	r0, r4
   d72b4:	464b      	mov	r3, r9
   d72b6:	4632      	mov	r2, r6
   d72b8:	b209      	sxth	r1, r1
   d72ba:	47a8      	blx	r5
  endWrite();
   d72bc:	6823      	ldr	r3, [r4, #0]
   d72be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d72c0:	4620      	mov	r0, r4
}
   d72c2:	b002      	add	sp, #8
   d72c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d72c8:	4718      	bx	r3

000d72ca <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
   d72ca:	4770      	bx	lr

000d72cc <_ZN12Adafruit_GFX8drawLineEsssst>:
                            uint16_t color) {
   d72cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if (x0 == x1) {
   d72d0:	4299      	cmp	r1, r3
                            uint16_t color) {
   d72d2:	4616      	mov	r6, r2
   d72d4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d72d8:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d72dc:	6802      	ldr	r2, [r0, #0]
   d72de:	4680      	mov	r8, r0
   d72e0:	460d      	mov	r5, r1
   d72e2:	461c      	mov	r4, r3
  if (x0 == x1) {
   d72e4:	d113      	bne.n	d730e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
    if (y0 > y1)
   d72e6:	42be      	cmp	r6, r7
   d72e8:	bfc8      	it	gt
   d72ea:	4633      	movgt	r3, r6
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d72ec:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    if (y0 > y1)
   d72f0:	bfc4      	itt	gt
   d72f2:	463e      	movgt	r6, r7
   d72f4:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d72f6:	1c7b      	adds	r3, r7, #1
   d72f8:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d72fa:	1b9b      	subs	r3, r3, r6
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d72fc:	b21b      	sxth	r3, r3
   d72fe:	4632      	mov	r2, r6
   d7300:	4629      	mov	r1, r5
   d7302:	4640      	mov	r0, r8
   d7304:	46a4      	mov	ip, r4
}
   d7306:	b003      	add	sp, #12
   d7308:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d730c:	4760      	bx	ip
  } else if (y0 == y1) {
   d730e:	42be      	cmp	r6, r7
   d7310:	d10a      	bne.n	d7328 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
    if (x0 > x1)
   d7312:	4299      	cmp	r1, r3
   d7314:	bfc2      	ittt	gt
   d7316:	460b      	movgt	r3, r1
   d7318:	4625      	movgt	r5, r4
   d731a:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d731c:	1c63      	adds	r3, r4, #1
   d731e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d7322:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d7324:	1b5b      	subs	r3, r3, r5
   d7326:	e7e9      	b.n	d72fc <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
    startWrite();
   d7328:	6953      	ldr	r3, [r2, #20]
   d732a:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
   d732c:	e9cd 7900 	strd	r7, r9, [sp]
   d7330:	f8d8 3000 	ldr.w	r3, [r8]
   d7334:	4640      	mov	r0, r8
   d7336:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d7338:	4632      	mov	r2, r6
   d733a:	4623      	mov	r3, r4
   d733c:	4629      	mov	r1, r5
   d733e:	47b8      	blx	r7
    endWrite();
   d7340:	f8d8 3000 	ldr.w	r3, [r8]
   d7344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7346:	4640      	mov	r0, r8
}
   d7348:	b003      	add	sp, #12
   d734a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
   d734e:	4718      	bx	r3

000d7350 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   d7350:	f001 0303 	and.w	r3, r1, #3
   d7354:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d7358:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
   d735a:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
   d735c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d7360:	bf59      	ittee	pl
   d7362:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   d7364:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
   d7366:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   d7368:	81c3      	strhmi	r3, [r0, #14]
}
   d736a:	4770      	bx	lr

000d736c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d736c:	b530      	push	{r4, r5, lr}
   d736e:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
   d7370:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
   d7372:	4a07      	ldr	r2, [pc, #28]	; (d7390 <_ZN12Adafruit_GFXC1Ess+0x24>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d7374:	4d07      	ldr	r5, [pc, #28]	; (d7394 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d7376:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d7378:	2400      	movs	r4, #0
  _width = WIDTH;
   d737a:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
   d737c:	f04f 31ff 	mov.w	r1, #4294967295
   d7380:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d7384:	6044      	str	r4, [r0, #4]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d7386:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
   d7388:	6104      	str	r4, [r0, #16]
  _cp437 = false;
   d738a:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
   d738c:	6204      	str	r4, [r0, #32]
}
   d738e:	bd30      	pop	{r4, r5, pc}
   d7390:	01000101 	.word	0x01000101
   d7394:	000ddb7c 	.word	0x000ddb7c

000d7398 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
   d7398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d739c:	b089      	sub	sp, #36	; 0x24
   d739e:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
   d73a2:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
   d73a4:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d73a8:	9304      	str	r3, [sp, #16]
   d73aa:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  startWrite();
   d73ae:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
   d73b0:	9305      	str	r3, [sp, #20]
   d73b2:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d73b6:	4604      	mov	r4, r0
  startWrite();
   d73b8:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d73ba:	f118 0207 	adds.w	r2, r8, #7
  startWrite();
   d73be:	f04f 0600 	mov.w	r6, #0
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d73c2:	bf48      	it	mi
   d73c4:	f108 020e 	addmi.w	r2, r8, #14
   d73c8:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
   d73cc:	9601      	str	r6, [sp, #4]
  uint8_t byte = 0;
   d73ce:	4635      	mov	r5, r6
   d73d0:	9b03      	ldr	r3, [sp, #12]
   d73d2:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
   d73d4:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d73d8:	189a      	adds	r2, r3, r2
   d73da:	9b05      	ldr	r3, [sp, #20]
   d73dc:	428b      	cmp	r3, r1
   d73de:	b212      	sxth	r2, r2
   d73e0:	dd27      	ble.n	d7432 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d73e2:	9b04      	ldr	r3, [sp, #16]
   d73e4:	4433      	add	r3, r6
  for (int16_t j = 0; j < h; j++, y++) {
   d73e6:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d73ea:	9306      	str	r3, [sp, #24]
   d73ec:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
   d73f0:	4580      	cmp	r8, r0
   d73f2:	fa1f f189 	uxth.w	r1, r9
   d73f6:	dd17      	ble.n	d7428 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
      if (i & 7)
   d73f8:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d73fa:	bf05      	ittet	eq
   d73fc:	9b06      	ldreq	r3, [sp, #24]
   d73fe:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
   d7400:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d7402:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
   d7404:	bf18      	it	ne
   d7406:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
   d7408:	062b      	lsls	r3, r5, #24
   d740a:	d50a      	bpl.n	d7422 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
        writePixel(x + i, y, color);
   d740c:	9b02      	ldr	r3, [sp, #8]
   d740e:	6820      	ldr	r0, [r4, #0]
   d7410:	9207      	str	r2, [sp, #28]
   d7412:	4419      	add	r1, r3
   d7414:	6983      	ldr	r3, [r0, #24]
   d7416:	b209      	sxth	r1, r1
   d7418:	461f      	mov	r7, r3
   d741a:	4620      	mov	r0, r4
   d741c:	4653      	mov	r3, sl
   d741e:	47b8      	blx	r7
   d7420:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
   d7422:	f109 0901 	add.w	r9, r9, #1
   d7426:	e7e1      	b.n	d73ec <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
  for (int16_t j = 0; j < h; j++, y++) {
   d7428:	9b01      	ldr	r3, [sp, #4]
   d742a:	3301      	adds	r3, #1
   d742c:	9301      	str	r3, [sp, #4]
   d742e:	445e      	add	r6, fp
   d7430:	e7ce      	b.n	d73d0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
  endWrite();
   d7432:	6823      	ldr	r3, [r4, #0]
   d7434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7436:	4620      	mov	r0, r4
}
   d7438:	b009      	add	sp, #36	; 0x24
   d743a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
   d743e:	4718      	bx	r3

000d7440 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
   d7440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7444:	ed2d 8b02 	vpush	{d8}
   d7448:	b091      	sub	sp, #68	; 0x44
   d744a:	4616      	mov	r6, r2
  if (!gfxFont) { // 'Classic' built-in font
   d744c:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
   d744e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d7452:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d7456:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d745a:	9103      	str	r1, [sp, #12]
   d745c:	461f      	mov	r7, r3
   d745e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d7462:	9304      	str	r3, [sp, #16]
   d7464:	4683      	mov	fp, r0
  if (!gfxFont) { // 'Classic' built-in font
   d7466:	2a00      	cmp	r2, #0
   d7468:	f040 80c5 	bne.w	d75f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
   d746c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d7470:	428b      	cmp	r3, r1
   d7472:	f340 814c 	ble.w	d770e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d7476:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d747a:	42b3      	cmp	r3, r6
   d747c:	f340 8147 	ble.w	d770e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d7480:	2306      	movs	r3, #6
   d7482:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
   d7486:	2b00      	cmp	r3, #0
   d7488:	f340 8141 	ble.w	d770e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
   d748c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d7490:	2b00      	cmp	r3, #0
   d7492:	f340 813c 	ble.w	d770e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
   d7496:	7f03      	ldrb	r3, [r0, #28]
   d7498:	b91b      	cbnz	r3, d74a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d749a:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
   d749c:	bf84      	itt	hi
   d749e:	3701      	addhi	r7, #1
   d74a0:	b2ff      	uxtbhi	r7, r7
    startWrite();
   d74a2:	f8db 3000 	ldr.w	r3, [fp]
   d74a6:	4658      	mov	r0, fp
   d74a8:	695b      	ldr	r3, [r3, #20]
   d74aa:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d74ac:	2205      	movs	r2, #5
   d74ae:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d74b0:	2200      	movs	r2, #0
   d74b2:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d74b4:	4a98      	ldr	r2, [pc, #608]	; (d7718 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d74b6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d74ba:	18d3      	adds	r3, r2, r3
   d74bc:	930c      	str	r3, [sp, #48]	; 0x30
   d74be:	b2b3      	uxth	r3, r6
   d74c0:	9306      	str	r3, [sp, #24]
   d74c2:	9a05      	ldr	r2, [sp, #20]
   d74c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d74c6:	5c9b      	ldrb	r3, [r3, r2]
   d74c8:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d74ca:	b2ab      	uxth	r3, r5
   d74cc:	930b      	str	r3, [sp, #44]	; 0x2c
   d74ce:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d74d2:	9308      	str	r3, [sp, #32]
   d74d4:	9b03      	ldr	r3, [sp, #12]
   d74d6:	fb02 f905 	mul.w	r9, r2, r5
   d74da:	fa19 f983 	uxtah	r9, r9, r3
   d74de:	fa0f f389 	sxth.w	r3, r9
   d74e2:	ee08 3a10 	vmov	s16, r3
   d74e6:	2308      	movs	r3, #8
   d74e8:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
   d74ea:	9b03      	ldr	r3, [sp, #12]
   d74ec:	eb02 0a03 	add.w	sl, r2, r3
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d74f0:	f04f 0900 	mov.w	r9, #0
            writePixel(x + i, y + j, bg);
   d74f4:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
   d74f8:	9a07      	ldr	r2, [sp, #28]
   d74fa:	f8db 3000 	ldr.w	r3, [fp]
   d74fe:	07d2      	lsls	r2, r2, #31
   d7500:	d552      	bpl.n	d75a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
   d7502:	2d01      	cmp	r5, #1
   d7504:	fa1f f289 	uxth.w	r2, r9
   d7508:	d13e      	bne.n	d7588 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d750a:	2c01      	cmp	r4, #1
   d750c:	d13c      	bne.n	d7588 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
   d750e:	699b      	ldr	r3, [r3, #24]
   d7510:	9906      	ldr	r1, [sp, #24]
   d7512:	461f      	mov	r7, r3
   d7514:	9b04      	ldr	r3, [sp, #16]
   d7516:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
   d7518:	b212      	sxth	r2, r2
   d751a:	4651      	mov	r1, sl
   d751c:	4658      	mov	r0, fp
   d751e:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d7520:	f109 0301 	add.w	r3, r9, #1
   d7524:	fa4f f983 	sxtb.w	r9, r3
   d7528:	9b07      	ldr	r3, [sp, #28]
   d752a:	085b      	lsrs	r3, r3, #1
   d752c:	9307      	str	r3, [sp, #28]
   d752e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7530:	3b01      	subs	r3, #1
   d7532:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d7536:	930a      	str	r3, [sp, #40]	; 0x28
   d7538:	d1de      	bne.n	d74f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d753a:	9f05      	ldr	r7, [sp, #20]
   d753c:	3701      	adds	r7, #1
   d753e:	b27b      	sxtb	r3, r7
   d7540:	9305      	str	r3, [sp, #20]
   d7542:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7544:	3b01      	subs	r3, #1
   d7546:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d754a:	9309      	str	r3, [sp, #36]	; 0x24
   d754c:	d1b9      	bne.n	d74c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
   d754e:	9b04      	ldr	r3, [sp, #16]
   d7550:	4543      	cmp	r3, r8
   d7552:	d00f      	beq.n	d7574 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
   d7554:	2d01      	cmp	r5, #1
   d7556:	f8db 3000 	ldr.w	r3, [fp]
   d755a:	d13b      	bne.n	d75d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d755c:	2c01      	cmp	r4, #1
   d755e:	d139      	bne.n	d75d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
   d7560:	9908      	ldr	r1, [sp, #32]
   d7562:	f8cd 8000 	str.w	r8, [sp]
   d7566:	3105      	adds	r1, #5
   d7568:	6a1c      	ldr	r4, [r3, #32]
   d756a:	4632      	mov	r2, r6
   d756c:	2308      	movs	r3, #8
   d756e:	b209      	sxth	r1, r1
   d7570:	4658      	mov	r0, fp
   d7572:	47a0      	blx	r4
    endWrite();
   d7574:	f8db 3000 	ldr.w	r3, [fp]
   d7578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d757a:	4658      	mov	r0, fp
}
   d757c:	b011      	add	sp, #68	; 0x44
   d757e:	ecbd 8b02 	vpop	{d8}
   d7582:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d7586:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
   d7588:	9906      	ldr	r1, [sp, #24]
   d758a:	fb14 f202 	smulbb	r2, r4, r2
   d758e:	440a      	add	r2, r1
   d7590:	9904      	ldr	r1, [sp, #16]
   d7592:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d7594:	9400      	str	r4, [sp, #0]
   d7596:	69db      	ldr	r3, [r3, #28]
   d7598:	ee18 1a10 	vmov	r1, s16
   d759c:	461f      	mov	r7, r3
   d759e:	b212      	sxth	r2, r2
   d75a0:	462b      	mov	r3, r5
   d75a2:	4658      	mov	r0, fp
   d75a4:	47b8      	blx	r7
   d75a6:	e7bb      	b.n	d7520 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
   d75a8:	9a04      	ldr	r2, [sp, #16]
   d75aa:	4542      	cmp	r2, r8
   d75ac:	d0b8      	beq.n	d7520 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
   d75ae:	2d01      	cmp	r5, #1
   d75b0:	fa1f f289 	uxth.w	r2, r9
   d75b4:	d107      	bne.n	d75c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d75b6:	2c01      	cmp	r4, #1
   d75b8:	d105      	bne.n	d75c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
   d75ba:	699b      	ldr	r3, [r3, #24]
   d75bc:	9906      	ldr	r1, [sp, #24]
   d75be:	461f      	mov	r7, r3
   d75c0:	440a      	add	r2, r1
   d75c2:	4643      	mov	r3, r8
   d75c4:	e7a8      	b.n	d7518 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d75c6:	9906      	ldr	r1, [sp, #24]
   d75c8:	f8cd 8004 	str.w	r8, [sp, #4]
   d75cc:	fb14 f202 	smulbb	r2, r4, r2
   d75d0:	440a      	add	r2, r1
   d75d2:	e7df      	b.n	d7594 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
   d75d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d75d6:	f8cd 8004 	str.w	r8, [sp, #4]
   d75da:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d75de:	9a08      	ldr	r2, [sp, #32]
   d75e0:	00e4      	lsls	r4, r4, #3
   d75e2:	440a      	add	r2, r1
   d75e4:	4611      	mov	r1, r2
   d75e6:	9400      	str	r4, [sp, #0]
   d75e8:	69dc      	ldr	r4, [r3, #28]
   d75ea:	4632      	mov	r2, r6
   d75ec:	462b      	mov	r3, r5
   d75ee:	b209      	sxth	r1, r1
   d75f0:	4658      	mov	r0, fp
   d75f2:	47a0      	blx	r4
    endWrite();
   d75f4:	e7be      	b.n	d7574 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d75f6:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
   d75f8:	6851      	ldr	r1, [r2, #4]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d75fa:	6812      	ldr	r2, [r2, #0]
   d75fc:	920d      	str	r2, [sp, #52]	; 0x34
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d75fe:	1aff      	subs	r7, r7, r3
  return gfxFont->glyph + c;
   d7600:	b2ff      	uxtb	r7, r7
   d7602:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d7606:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d760a:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
   d760c:	789a      	ldrb	r2, [r3, #2]
   d760e:	9209      	str	r2, [sp, #36]	; 0x24
   d7610:	78da      	ldrb	r2, [r3, #3]
   d7612:	920b      	str	r2, [sp, #44]	; 0x2c
    if (size_x > 1 || size_y > 1) {
   d7614:	2d01      	cmp	r5, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d7616:	f993 2005 	ldrsb.w	r2, [r3, #5]
           yo = pgm_read_byte(&glyph->yOffset);
   d761a:	f993 a006 	ldrsb.w	sl, [r3, #6]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d761e:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
   d7620:	d801      	bhi.n	d7626 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d7622:	2c01      	cmp	r4, #1
   d7624:	d957      	bls.n	d76d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
   d7626:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d762a:	9308      	str	r3, [sp, #32]
      yo16 = yo;
   d762c:	fa0f f38a 	sxth.w	r3, sl
   d7630:	9307      	str	r3, [sp, #28]
    startWrite();
   d7632:	f8db 3000 	ldr.w	r3, [fp]
   d7636:	4658      	mov	r0, fp
   d7638:	695b      	ldr	r3, [r3, #20]
   d763a:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d763c:	b2b3      	uxth	r3, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d763e:	f04f 0800 	mov.w	r8, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7642:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
   d7644:	fa1a f386 	uxtah	r3, sl, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d7648:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
   d764a:	4647      	mov	r7, r8
            writePixel(x + xo + xx, y + yo + yy, color);
   d764c:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
   d764e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7650:	429f      	cmp	r7, r3
   d7652:	d28f      	bcs.n	d7574 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7654:	9b07      	ldr	r3, [sp, #28]
   d7656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d7658:	443b      	add	r3, r7
   d765a:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
   d765e:	2200      	movs	r2, #0
   d7660:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
   d7662:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7664:	b21b      	sxth	r3, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d7666:	eb02 0a07 	add.w	sl, r2, r7
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d766a:	ee08 3a10 	vmov	s16, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d766e:	fa0f fa8a 	sxth.w	sl, sl
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7672:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
   d7674:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d7676:	9905      	ldr	r1, [sp, #20]
   d7678:	4291      	cmp	r1, r2
   d767a:	d241      	bcs.n	d7700 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
   d767c:	1c5a      	adds	r2, r3, #1
   d767e:	b2d2      	uxtb	r2, r2
   d7680:	075b      	lsls	r3, r3, #29
   d7682:	920c      	str	r2, [sp, #48]	; 0x30
   d7684:	d107      	bne.n	d7696 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
   d7686:	9b06      	ldr	r3, [sp, #24]
   d7688:	9906      	ldr	r1, [sp, #24]
   d768a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d768c:	3301      	adds	r3, #1
   d768e:	b29b      	uxth	r3, r3
   d7690:	f812 9001 	ldrb.w	r9, [r2, r1]
   d7694:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
   d7696:	f019 0f80 	tst.w	r9, #128	; 0x80
   d769a:	d012      	beq.n	d76c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
   d769c:	2d01      	cmp	r5, #1
   d769e:	f8db 3000 	ldr.w	r3, [fp]
   d76a2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d76a6:	d11a      	bne.n	d76de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d76a8:	2c01      	cmp	r4, #1
   d76aa:	d118      	bne.n	d76de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
   d76ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d76ae:	699b      	ldr	r3, [r3, #24]
   d76b0:	4411      	add	r1, r2
   d76b2:	9a05      	ldr	r2, [sp, #20]
   d76b4:	4411      	add	r1, r2
   d76b6:	461e      	mov	r6, r3
   d76b8:	4652      	mov	r2, sl
   d76ba:	9b04      	ldr	r3, [sp, #16]
   d76bc:	b209      	sxth	r1, r1
   d76be:	4658      	mov	r0, fp
   d76c0:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
   d76c2:	9e05      	ldr	r6, [sp, #20]
   d76c4:	3601      	adds	r6, #1
   d76c6:	b2f3      	uxtb	r3, r6
        bits <<= 1;
   d76c8:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
   d76cc:	9305      	str	r3, [sp, #20]
        bits <<= 1;
   d76ce:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
   d76d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (xx = 0; xx < w; xx++) {
   d76d4:	e7ce      	b.n	d7674 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
   d76d6:	2300      	movs	r3, #0
   d76d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d76dc:	e7a9      	b.n	d7632 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d76de:	9805      	ldr	r0, [sp, #20]
   d76e0:	9a08      	ldr	r2, [sp, #32]
   d76e2:	4402      	add	r2, r0
   d76e4:	fb02 1105 	mla	r1, r2, r5, r1
   d76e8:	9a04      	ldr	r2, [sp, #16]
   d76ea:	e9cd 4200 	strd	r4, r2, [sp]
   d76ee:	69db      	ldr	r3, [r3, #28]
   d76f0:	ee18 2a10 	vmov	r2, s16
   d76f4:	461e      	mov	r6, r3
   d76f6:	b209      	sxth	r1, r1
   d76f8:	462b      	mov	r3, r5
   d76fa:	4658      	mov	r0, fp
   d76fc:	47b0      	blx	r6
   d76fe:	e7e0      	b.n	d76c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d7700:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
   d7702:	3701      	adds	r7, #1
   d7704:	4498      	add	r8, r3
   d7706:	fa5f f888 	uxtb.w	r8, r8
   d770a:	b2ff      	uxtb	r7, r7
   d770c:	e79f      	b.n	d764e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d770e:	b011      	add	sp, #68	; 0x44
   d7710:	ecbd 8b02 	vpop	{d8}
   d7714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7718:	000dd674 	.word	0x000dd674

000d771c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d771c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
   d771e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d7720:	b085      	sub	sp, #20
   d7722:	4604      	mov	r4, r0
   d7724:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
   d7726:	2a00      	cmp	r2, #0
   d7728:	d134      	bne.n	d7794 <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
   d772a:	290a      	cmp	r1, #10
   d772c:	d108      	bne.n	d7740 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
   d772e:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
   d7730:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
   d7732:	7e42      	ldrb	r2, [r0, #25]
   d7734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
   d7738:	8263      	strh	r3, [r4, #18]
}
   d773a:	2001      	movs	r0, #1
   d773c:	b005      	add	sp, #20
   d773e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
   d7740:	290d      	cmp	r1, #13
   d7742:	d0fa      	beq.n	d773a <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d7744:	7ee1      	ldrb	r1, [r4, #27]
   d7746:	7e00      	ldrb	r0, [r0, #24]
   d7748:	7e65      	ldrb	r5, [r4, #25]
   d774a:	b171      	cbz	r1, d776a <_ZN12Adafruit_GFX5writeEh+0x4e>
   d774c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d7750:	2106      	movs	r1, #6
   d7752:	fb11 6100 	smlabb	r1, r1, r0, r6
   d7756:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d775a:	42b1      	cmp	r1, r6
   d775c:	bfc1      	itttt	gt
   d775e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
   d7762:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
   d7764:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d7768:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d776a:	8ae2      	ldrh	r2, [r4, #22]
   d776c:	9201      	str	r2, [sp, #4]
   d776e:	8aa2      	ldrh	r2, [r4, #20]
   d7770:	9200      	str	r2, [sp, #0]
   d7772:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d7776:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d777a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d777e:	4620      	mov	r0, r4
   d7780:	f7ff fe5e 	bl	d7440 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
   d7784:	7e23      	ldrb	r3, [r4, #24]
   d7786:	8a22      	ldrh	r2, [r4, #16]
   d7788:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d778c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
   d7790:	8223      	strh	r3, [r4, #16]
   d7792:	e7d2      	b.n	d773a <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
   d7794:	290a      	cmp	r1, #10
   d7796:	d107      	bne.n	d77a8 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
   d7798:	2300      	movs	r3, #0
   d779a:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d779c:	7b13      	ldrb	r3, [r2, #12]
   d779e:	7e41      	ldrb	r1, [r0, #25]
      cursor_y +=
   d77a0:	8a42      	ldrh	r2, [r0, #18]
   d77a2:	fb01 2303 	mla	r3, r1, r3, r2
   d77a6:	e7c7      	b.n	d7738 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
   d77a8:	290d      	cmp	r1, #13
   d77aa:	d0c6      	beq.n	d773a <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
   d77ac:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d77ae:	42a9      	cmp	r1, r5
   d77b0:	d3c3      	bcc.n	d773a <_ZN12Adafruit_GFX5writeEh+0x1e>
   d77b2:	7a91      	ldrb	r1, [r2, #10]
   d77b4:	4299      	cmp	r1, r3
   d77b6:	d3c0      	bcc.n	d773a <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
   d77b8:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
   d77ba:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
   d77bc:	b2ed      	uxtb	r5, r5
   d77be:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
   d77c2:	78af      	ldrb	r7, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d77c4:	b32f      	cbz	r7, d7812 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d77c6:	78e9      	ldrb	r1, [r5, #3]
   d77c8:	b319      	cbz	r1, d7812 <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d77ca:	7ee1      	ldrb	r1, [r4, #27]
   d77cc:	7e00      	ldrb	r0, [r0, #24]
   d77ce:	7e66      	ldrb	r6, [r4, #25]
   d77d0:	b191      	cbz	r1, d77f8 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d77d2:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d77d6:	4439      	add	r1, r7
   d77d8:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d77dc:	fb00 7101 	mla	r1, r0, r1, r7
   d77e0:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d77e4:	42b9      	cmp	r1, r7
   d77e6:	dd07      	ble.n	d77f8 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
   d77e8:	2700      	movs	r7, #0
   d77ea:	8227      	strh	r7, [r4, #16]
   d77ec:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d77f0:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
   d77f2:	fb02 1206 	mla	r2, r2, r6, r1
   d77f6:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d77f8:	8ae2      	ldrh	r2, [r4, #22]
   d77fa:	9201      	str	r2, [sp, #4]
   d77fc:	8aa2      	ldrh	r2, [r4, #20]
   d77fe:	9200      	str	r2, [sp, #0]
   d7800:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d7804:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d7808:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d780c:	4620      	mov	r0, r4
   d780e:	f7ff fe17 	bl	d7440 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d7812:	7929      	ldrb	r1, [r5, #4]
   d7814:	7e23      	ldrb	r3, [r4, #24]
        cursor_x +=
   d7816:	8a22      	ldrh	r2, [r4, #16]
   d7818:	fb01 2303 	mla	r3, r1, r3, r2
   d781c:	e7b8      	b.n	d7790 <_ZN12Adafruit_GFX5writeEh+0x74>

000d781e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
   d781e:	2901      	cmp	r1, #1
   d7820:	bf38      	it	cc
   d7822:	2101      	movcc	r1, #1
   d7824:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
   d7826:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
   d7828:	4770      	bx	lr

000d782a <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   d782a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d782e:	4604      	mov	r4, r0
   d7830:	b08b      	sub	sp, #44	; 0x2c
   d7832:	f000 fb71 	bl	d7f18 <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d7836:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   d783a:	f9b4 503a 	ldrsh.w	r5, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d783e:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d7842:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d7846:	1dda      	adds	r2, r3, #7
   d7848:	bf48      	it	mi
   d784a:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   d784e:	2340      	movs	r3, #64	; 0x40
   d7850:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   d7854:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   d7858:	9303      	str	r3, [sp, #12]
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   d785a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d785c:	68db      	ldr	r3, [r3, #12]
   d785e:	3b01      	subs	r3, #1
   d7860:	b29b      	uxth	r3, r3
   d7862:	9304      	str	r3, [sp, #16]
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d7864:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
  uint8_t bytes_per_page = WIDTH;
   d7868:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   d786a:	2d00      	cmp	r5, #0
   d786c:	bfb8      	it	lt
   d786e:	3507      	addlt	r5, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d7870:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d7874:	45b9      	cmp	r9, r7
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7876:	f107 0201 	add.w	r2, r7, #1
  uint8_t first_page = window_y1 / 8;
   d787a:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d787e:	bf28      	it	cs
   d7880:	46b9      	movcs	r9, r7
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7882:	fa52 f383 	uxtab	r3, r2, r3
   d7886:	fb05 9a07 	mla	sl, r5, r7, r9
   d788a:	9306      	str	r3, [sp, #24]
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};

      digitalWrite(dcPin, LOW);
   d788c:	f04f 0b00 	mov.w	fp, #0
  for (uint8_t p = first_page; p < pages; p++) {
   d7890:	9b03      	ldr	r3, [sp, #12]
   d7892:	429d      	cmp	r5, r3
   d7894:	d26b      	bcs.n	d796e <_ZN15Adafruit_SH110X7displayEv+0x144>
    ptr += page_start;
   d7896:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7898:	7a26      	ldrb	r6, [r4, #8]
   d789a:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   d789e:	eb03 080a 	add.w	r8, r3, sl
    bytes_remaining -= (WIDTH - 1) - page_end;
   d78a2:	9b06      	ldr	r3, [sp, #24]
   d78a4:	444a      	add	r2, r9
   d78a6:	1b9e      	subs	r6, r3, r6
    if (i2c_dev) { // I2C
   d78a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d78aa:	1111      	asrs	r1, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   d78ac:	eba6 0609 	sub.w	r6, r6, r9
   d78b0:	f1a5 0050 	sub.w	r0, r5, #80	; 0x50
   d78b4:	b2f6      	uxtb	r6, r6
    if (i2c_dev) { // I2C
   d78b6:	b2c0      	uxtb	r0, r0
   d78b8:	3110      	adds	r1, #16
   d78ba:	f002 020f 	and.w	r2, r2, #15
   d78be:	2b00      	cmp	r3, #0
   d78c0:	d035      	beq.n	d792e <_ZN15Adafruit_SH110X7displayEv+0x104>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d78c2:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   d78c6:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
      i2c_dev->setSpeed(i2c_preclk);
   d78ca:	4618      	mov	r0, r3
   d78cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d78ce:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      uint8_t cmd[] = {
   d78d2:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   d78d6:	f7fe fef0 	bl	d66ba <_ZN18Adafruit_I2CDevice8setSpeedEm>
      i2c_dev->write(cmd, 4);
   d78da:	2301      	movs	r3, #1
   d78dc:	e9cd bb00 	strd	fp, fp, [sp]
   d78e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d78e2:	2204      	movs	r2, #4
   d78e4:	a909      	add	r1, sp, #36	; 0x24
   d78e6:	f7fe fe63 	bl	d65b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d78ea:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d78ee:	9305      	str	r3, [sp, #20]
      while (bytes_remaining) {
   d78f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d78f2:	b1ae      	cbz	r6, d7920 <_ZN15Adafruit_SH110X7displayEv+0xf6>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d78f4:	9b05      	ldr	r3, [sp, #20]
   d78f6:	42b3      	cmp	r3, r6
   d78f8:	bf28      	it	cs
   d78fa:	4633      	movcs	r3, r6
   d78fc:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   d78fe:	2301      	movs	r3, #1
   d7900:	9301      	str	r3, [sp, #4]
   d7902:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   d7906:	9300      	str	r3, [sp, #0]
   d7908:	4641      	mov	r1, r8
   d790a:	2301      	movs	r3, #1
   d790c:	9207      	str	r2, [sp, #28]
   d790e:	f7fe fe4f 	bl	d65b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   d7912:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   d7914:	1ab6      	subs	r6, r6, r2
        ptr += to_write;
   d7916:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   d7918:	b2f6      	uxtb	r6, r6
   d791a:	f000 fafd 	bl	d7f18 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   d791e:	e7e7      	b.n	d78f0 <_ZN15Adafruit_SH110X7displayEv+0xc6>
      i2c_dev->setSpeed(i2c_postclk);
   d7920:	6b21      	ldr	r1, [r4, #48]	; 0x30
   d7922:	f7fe feca 	bl	d66ba <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   d7926:	3501      	adds	r5, #1
   d7928:	b2ed      	uxtb	r5, r5
   d792a:	44ba      	add	sl, r7
   d792c:	e7b0      	b.n	d7890 <_ZN15Adafruit_SH110X7displayEv+0x66>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d792e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   d7932:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
      digitalWrite(dcPin, LOW);
   d7936:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d793a:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   d793e:	4619      	mov	r1, r3
   d7940:	9305      	str	r3, [sp, #20]
   d7942:	f001 fcd4 	bl	d92ee <digitalWrite>
      spi_dev->write(cmd, 3);
   d7946:	9b05      	ldr	r3, [sp, #20]
   d7948:	9300      	str	r3, [sp, #0]
   d794a:	2203      	movs	r2, #3
   d794c:	a909      	add	r1, sp, #36	; 0x24
   d794e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7950:	f7fe fd9d 	bl	d648e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   d7954:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d7958:	2101      	movs	r1, #1
   d795a:	f001 fcc8 	bl	d92ee <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   d795e:	9b05      	ldr	r3, [sp, #20]
   d7960:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7962:	9300      	str	r3, [sp, #0]
   d7964:	4632      	mov	r2, r6
   d7966:	4641      	mov	r1, r8
   d7968:	f7fe fd91 	bl	d648e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d796c:	e7db      	b.n	d7926 <_ZN15Adafruit_SH110X7displayEv+0xfc>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   d796e:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   d7972:	f04f 33ff 	mov.w	r3, #4294967295
   d7976:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   d797a:	b00b      	add	sp, #44	; 0x2c
   d797c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7980 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   d7980:	b530      	push	{r4, r5, lr}
   d7982:	b085      	sub	sp, #20
   d7984:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d7986:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7988:	9503      	str	r5, [sp, #12]
   d798a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d798c:	9502      	str	r5, [sp, #8]
   d798e:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d7992:	e9cd 3500 	strd	r3, r5, [sp]
   d7996:	4613      	mov	r3, r2
   d7998:	460a      	mov	r2, r1
   d799a:	2101      	movs	r1, #1
   d799c:	f7ff fa48 	bl	d6e30 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   d79a0:	4b03      	ldr	r3, [pc, #12]	; (d79b0 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   d79a2:	6023      	str	r3, [r4, #0]
   d79a4:	4620      	mov	r0, r4
   d79a6:	2300      	movs	r3, #0
   d79a8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d79ac:	b005      	add	sp, #20
   d79ae:	bd30      	pop	{r4, r5, pc}
   d79b0:	000ddbd4 	.word	0x000ddbd4

000d79b4 <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   d79b4:	b510      	push	{r4, lr}
   d79b6:	4b03      	ldr	r3, [pc, #12]	; (d79c4 <_ZN15Adafruit_SH110XD1Ev+0x10>)
   d79b8:	6003      	str	r3, [r0, #0]
   d79ba:	4604      	mov	r4, r0
   d79bc:	f7ff fa5a 	bl	d6e74 <_ZN17Adafruit_GrayOLEDD1Ev>
   d79c0:	4620      	mov	r0, r4
   d79c2:	bd10      	pop	{r4, pc}
   d79c4:	000ddbd4 	.word	0x000ddbd4

000d79c8 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   d79c8:	b510      	push	{r4, lr}
   d79ca:	4b03      	ldr	r3, [pc, #12]	; (d79d8 <_ZN15Adafruit_SH1107D1Ev+0x10>)
   d79cc:	6003      	str	r3, [r0, #0]
   d79ce:	4604      	mov	r4, r0
   d79d0:	f7ff fff0 	bl	d79b4 <_ZN15Adafruit_SH110XD1Ev>
   d79d4:	4620      	mov	r0, r4
   d79d6:	bd10      	pop	{r4, pc}
   d79d8:	000dde10 	.word	0x000dde10

000d79dc <_ZN15Adafruit_SH1107D0Ev>:
   d79dc:	b510      	push	{r4, lr}
   d79de:	4604      	mov	r4, r0
   d79e0:	f7ff fff2 	bl	d79c8 <_ZN15Adafruit_SH1107D1Ev>
   d79e4:	4620      	mov	r0, r4
   d79e6:	2158      	movs	r1, #88	; 0x58
   d79e8:	f001 fd18 	bl	d941c <_ZdlPvj>
   d79ec:	4620      	mov	r0, r4
   d79ee:	bd10      	pop	{r4, pc}

000d79f0 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   d79f0:	b530      	push	{r4, r5, lr}
   d79f2:	b085      	sub	sp, #20
   d79f4:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d79f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d79f8:	9502      	str	r5, [sp, #8]
   d79fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d79fc:	9501      	str	r5, [sp, #4]
   d79fe:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d7a02:	9500      	str	r5, [sp, #0]
   d7a04:	f7ff ffbc 	bl	d7980 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   d7a08:	4b02      	ldr	r3, [pc, #8]	; (d7a14 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   d7a0a:	6023      	str	r3, [r4, #0]
   d7a0c:	4620      	mov	r0, r4
   d7a0e:	b005      	add	sp, #20
   d7a10:	bd30      	pop	{r4, r5, pc}
   d7a12:	bf00      	nop
   d7a14:	000dde10 	.word	0x000dde10

000d7a18 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   d7a18:	b530      	push	{r4, r5, lr}
   d7a1a:	4604      	mov	r4, r0
   d7a1c:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   d7a1e:	f7ff faad 	bl	d6f7c <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   d7a22:	212f      	movs	r1, #47	; 0x2f
   d7a24:	4620      	mov	r0, r4
   d7a26:	f7ff fb12 	bl	d704e <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   d7a2a:	68a2      	ldr	r2, [r4, #8]
   d7a2c:	4b2f      	ldr	r3, [pc, #188]	; (d7aec <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   d7a2e:	429a      	cmp	r2, r3
   d7a30:	d121      	bne.n	d7a76 <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   d7a32:	6823      	ldr	r3, [r4, #0]
   d7a34:	2101      	movs	r1, #1
   d7a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7a38:	4620      	mov	r0, r4
   d7a3a:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d7a3c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d7a40:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d7a44:	2320      	movs	r3, #32
   d7a46:	3a20      	subs	r2, #32
   d7a48:	3973      	subs	r1, #115	; 0x73
   d7a4a:	2501      	movs	r5, #1
   d7a4c:	e9cd 3501 	strd	r3, r5, [sp, #4]
   d7a50:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d7a54:	2373      	movs	r3, #115	; 0x73
   d7a56:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d7a5a:	9300      	str	r3, [sp, #0]
   d7a5c:	f341 014f 	sbfx	r1, r1, #1, #16
   d7a60:	4b23      	ldr	r3, [pc, #140]	; (d7af0 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d7a62:	4620      	mov	r0, r4
   d7a64:	f342 024f 	sbfx	r2, r2, #1, #16
   d7a68:	f7ff fc96 	bl	d7398 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   d7a6c:	6823      	ldr	r3, [r4, #0]
   d7a6e:	2100      	movs	r1, #0
   d7a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7a72:	4620      	mov	r0, r4
   d7a74:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   d7a76:	68a3      	ldr	r3, [r4, #8]
   d7a78:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d7a7c:	d117      	bne.n	d7aae <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d7a7e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d7a82:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d7a86:	2320      	movs	r3, #32
   d7a88:	2001      	movs	r0, #1
   d7a8a:	3a20      	subs	r2, #32
   d7a8c:	3973      	subs	r1, #115	; 0x73
   d7a8e:	e9cd 3001 	strd	r3, r0, [sp, #4]
   d7a92:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d7a96:	2373      	movs	r3, #115	; 0x73
   d7a98:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d7a9c:	9300      	str	r3, [sp, #0]
   d7a9e:	f342 024f 	sbfx	r2, r2, #1, #16
   d7aa2:	4b13      	ldr	r3, [pc, #76]	; (d7af0 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d7aa4:	f341 014f 	sbfx	r1, r1, #1, #16
   d7aa8:	4620      	mov	r0, r4
   d7aaa:	f7ff fc75 	bl	d7398 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   d7aae:	4911      	ldr	r1, [pc, #68]	; (d7af4 <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   d7ab0:	2216      	movs	r2, #22
   d7ab2:	4620      	mov	r0, r4
   d7ab4:	f7ff fa25 	bl	d6f02 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d7ab8:	4605      	mov	r5, r0
   d7aba:	b918      	cbnz	r0, d7ac4 <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   d7abc:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   d7abe:	4628      	mov	r0, r5
   d7ac0:	b005      	add	sp, #20
   d7ac2:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   d7ac4:	68a3      	ldr	r3, [r4, #8]
   d7ac6:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d7aca:	d007      	beq.n	d7adc <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   d7acc:	2064      	movs	r0, #100	; 0x64
   d7ace:	f000 fffd 	bl	d8acc <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   d7ad2:	21af      	movs	r1, #175	; 0xaf
   d7ad4:	4620      	mov	r0, r4
   d7ad6:	f7ff f9e9 	bl	d6eac <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   d7ada:	e7f0      	b.n	d7abe <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   d7adc:	4906      	ldr	r1, [pc, #24]	; (d7af8 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   d7ade:	2204      	movs	r2, #4
   d7ae0:	4620      	mov	r0, r4
   d7ae2:	f7ff fa0e 	bl	d6f02 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d7ae6:	2800      	cmp	r0, #0
   d7ae8:	d1f0      	bne.n	d7acc <_ZN15Adafruit_SH11075beginEhb+0xb4>
   d7aea:	e7e7      	b.n	d7abc <_ZN15Adafruit_SH11075beginEhb+0xa4>
   d7aec:	00800040 	.word	0x00800040
   d7af0:	000ddc28 	.word	0x000ddc28
   d7af4:	000dde68 	.word	0x000dde68
   d7af8:	000dde64 	.word	0x000dde64

000d7afc <_ZN19Adafruit_EEPROM_I2CC1Ev>:
/**************************************************************************/
/*!
    Constructor
*/
/**************************************************************************/
Adafruit_EEPROM_I2C::Adafruit_EEPROM_I2C(void) {}
   d7afc:	2200      	movs	r2, #0
   d7afe:	6002      	str	r2, [r0, #0]
   d7b00:	7102      	strb	r2, [r0, #4]
   d7b02:	4770      	bx	lr

000d7b04 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>:
 *            The I2C address to be used.
 *    @param  theWire
 *            The Wire object to be used for I2C connections.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d7b04:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7b06:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7b08:	2010      	movs	r0, #16
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d7b0a:	460e      	mov	r6, r1
   d7b0c:	9201      	str	r2, [sp, #4]
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7b0e:	f7fc fac2 	bl	d4096 <_Znwj>
   d7b12:	4604      	mov	r4, r0
   d7b14:	b118      	cbz	r0, d7b1e <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire+0x1a>
   d7b16:	9a01      	ldr	r2, [sp, #4]
   d7b18:	4631      	mov	r1, r6
   d7b1a:	f7fe fd1e 	bl	d655a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  _addr = addr;

  return i2c_dev->begin();
   d7b1e:	2101      	movs	r1, #1
   d7b20:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7b22:	602c      	str	r4, [r5, #0]
  _addr = addr;
   d7b24:	712e      	strb	r6, [r5, #4]
}
   d7b26:	b002      	add	sp, #8
   d7b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return i2c_dev->begin();
   d7b2c:	f7fe bd31 	b.w	d6592 <_ZN18Adafruit_I2CDevice5beginEb>

000d7b30 <_ZN19Adafruit_EEPROM_I2C5writeEth>:
    @param[in] value
                The 8-bit value to write at addr
    @returns True on I2C command success, false on timeout or I2C failure
*/
/**************************************************************************/
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7b30:	b530      	push	{r4, r5, lr}
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};

  if (!i2c_dev->write(buff, 3))
   d7b32:	2300      	movs	r3, #0
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7b34:	b085      	sub	sp, #20
  if (!i2c_dev->write(buff, 3))
   d7b36:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   d7b3a:	ba49      	rev16	r1, r1
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7b3c:	4605      	mov	r5, r0
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   d7b3e:	f8ad 100c 	strh.w	r1, [sp, #12]
   d7b42:	f88d 200e 	strb.w	r2, [sp, #14]
  if (!i2c_dev->write(buff, 3))
   d7b46:	6800      	ldr	r0, [r0, #0]
   d7b48:	2301      	movs	r3, #1
   d7b4a:	2203      	movs	r2, #3
   d7b4c:	a903      	add	r1, sp, #12
   d7b4e:	f7fe fd2f 	bl	d65b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d7b52:	b160      	cbz	r0, d7b6e <_ZN19Adafruit_EEPROM_I2C5writeEth+0x3e>
   d7b54:	2465      	movs	r4, #101	; 0x65
    return false;

  // Wait until it acks!
  uint8_t timeout = 100;
  while (timeout--) {
   d7b56:	3c01      	subs	r4, #1
   d7b58:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d7b5c:	d007      	beq.n	d7b6e <_ZN19Adafruit_EEPROM_I2C5writeEth+0x3e>
    if (i2c_dev->detected())
   d7b5e:	6828      	ldr	r0, [r5, #0]
   d7b60:	f7fe fd02 	bl	d6568 <_ZN18Adafruit_I2CDevice8detectedEv>
   d7b64:	b920      	cbnz	r0, d7b70 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x40>
      return true;
    delay(1);
   d7b66:	2001      	movs	r0, #1
   d7b68:	f000 ffb0 	bl	d8acc <delay>
  while (timeout--) {
   d7b6c:	e7f3      	b.n	d7b56 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x26>
    return false;
   d7b6e:	2000      	movs	r0, #0
  }

  // timed out :(
  return false;
}
   d7b70:	b005      	add	sp, #20
   d7b72:	bd30      	pop	{r4, r5, pc}

000d7b74 <_ZN19Adafruit_EEPROM_I2C4readEt>:
    @param addr
                The 16-bit address to read from in EEPROM memory
    @returns    The 8-bit value retrieved at addr
*/
/**************************************************************************/
uint8_t Adafruit_EEPROM_I2C::read(uint16_t addr) {
   d7b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};

  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7b76:	2301      	movs	r3, #1
   d7b78:	2200      	movs	r2, #0
   d7b7a:	e9cd 3200 	strd	r3, r2, [sp]
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   d7b7e:	ba49      	rev16	r1, r1
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7b80:	ab03      	add	r3, sp, #12
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   d7b82:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7b86:	6800      	ldr	r0, [r0, #0]
   d7b88:	2202      	movs	r2, #2
   d7b8a:	4619      	mov	r1, r3
   d7b8c:	f7fe fd7e 	bl	d668c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
   d7b90:	b108      	cbz	r0, d7b96 <_ZN19Adafruit_EEPROM_I2C4readEt+0x22>
    return 0x0;

  return buff[0];
   d7b92:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d7b96:	b005      	add	sp, #20
   d7b98:	f85d fb04 	ldr.w	pc, [sp], #4

000d7b9c <_ZN15Adafruit_INA219C1Eh>:

/*!
 *  @brief  Instantiates a new INA219 class
 *  @param addr the I2C address the device can be found on. Default is 0x40
 */
Adafruit_INA219::Adafruit_INA219(uint8_t addr) {
   d7b9c:	2200      	movs	r2, #0
   d7b9e:	6002      	str	r2, [r0, #0]
  ina219_i2caddr = addr;
  ina219_currentDivider_mA = 0;
   d7ba0:	60c2      	str	r2, [r0, #12]
  ina219_powerMultiplier_mW = 0.0f;
   d7ba2:	2200      	movs	r2, #0
  ina219_i2caddr = addr;
   d7ba4:	7141      	strb	r1, [r0, #5]
  ina219_powerMultiplier_mW = 0.0f;
   d7ba6:	6102      	str	r2, [r0, #16]
}
   d7ba8:	4770      	bx	lr

000d7baa <_ZN15Adafruit_INA21917getBusVoltage_rawEv>:

/*!
 *  @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
 *  @return the raw bus voltage reading
 */
int16_t Adafruit_INA219::getBusVoltage_raw() {
   d7baa:	b510      	push	{r4, lr}
  uint16_t value;

  Adafruit_BusIO_Register bus_voltage_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
   d7bac:	2301      	movs	r3, #1
int16_t Adafruit_INA219::getBusVoltage_raw() {
   d7bae:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
   d7bb0:	e9cd 3300 	strd	r3, r3, [sp]
   d7bb4:	2302      	movs	r3, #2
   d7bb6:	6801      	ldr	r1, [r0, #0]
int16_t Adafruit_INA219::getBusVoltage_raw() {
   d7bb8:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
   d7bba:	461a      	mov	r2, r3
   d7bbc:	a804      	add	r0, sp, #16
   d7bbe:	f7fe fa9f 	bl	d6100 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = bus_voltage_reg.read(&value);
   d7bc2:	f10d 010e 	add.w	r1, sp, #14
   d7bc6:	a804      	add	r0, sp, #16
   d7bc8:	f7fe fb4f 	bl	d626a <_ZN23Adafruit_BusIO_Register4readEPt>
   d7bcc:	7120      	strb	r0, [r4, #4]

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
   d7bce:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   d7bd2:	10c0      	asrs	r0, r0, #3
}
   d7bd4:	0080      	lsls	r0, r0, #2
   d7bd6:	b00a      	add	sp, #40	; 0x28
   d7bd8:	bd10      	pop	{r4, pc}

000d7bda <_ZN15Adafruit_INA21919getShuntVoltage_rawEv>:

/*!
 *  @brief  Gets the raw shunt voltage (16-bit signed integer, so +-32767)
 *  @return the raw shunt voltage reading
 */
int16_t Adafruit_INA219::getShuntVoltage_raw() {
   d7bda:	b510      	push	{r4, lr}
  uint16_t value;
  Adafruit_BusIO_Register shunt_voltage_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
   d7bdc:	2201      	movs	r2, #1
int16_t Adafruit_INA219::getShuntVoltage_raw() {
   d7bde:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
   d7be0:	e9cd 2200 	strd	r2, r2, [sp]
int16_t Adafruit_INA219::getShuntVoltage_raw() {
   d7be4:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
   d7be6:	6801      	ldr	r1, [r0, #0]
   d7be8:	2302      	movs	r3, #2
   d7bea:	a804      	add	r0, sp, #16
   d7bec:	f7fe fa88 	bl	d6100 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = shunt_voltage_reg.read(&value);
   d7bf0:	f10d 010e 	add.w	r1, sp, #14
   d7bf4:	a804      	add	r0, sp, #16
   d7bf6:	f7fe fb38 	bl	d626a <_ZN23Adafruit_BusIO_Register4readEPt>
   d7bfa:	7120      	strb	r0, [r4, #4]
  return value;
}
   d7bfc:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
   d7c00:	b00a      	add	sp, #40	; 0x28
   d7c02:	bd10      	pop	{r4, pc}

000d7c04 <_ZN15Adafruit_INA21914getCurrent_rawEv>:

/*!
 *  @brief  Gets the raw current value (16-bit signed integer, so +-32767)
 *  @return the raw current reading
 */
int16_t Adafruit_INA219::getCurrent_raw() {
   d7c04:	b530      	push	{r4, r5, lr}
  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7c06:	2501      	movs	r5, #1
int16_t Adafruit_INA219::getCurrent_raw() {
   d7c08:	b091      	sub	sp, #68	; 0x44
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7c0a:	e9cd 5500 	strd	r5, r5, [sp]
int16_t Adafruit_INA219::getCurrent_raw() {
   d7c0e:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7c10:	6801      	ldr	r1, [r0, #0]
   d7c12:	2302      	movs	r3, #2
   d7c14:	2205      	movs	r2, #5
   d7c16:	a804      	add	r0, sp, #16
   d7c18:	f7fe fa72 	bl	d6100 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   d7c1c:	68a1      	ldr	r1, [r4, #8]
   d7c1e:	2202      	movs	r2, #2
   d7c20:	a804      	add	r0, sp, #16
   d7c22:	f7fe fac4 	bl	d61ae <_ZN23Adafruit_BusIO_Register5writeEmh>

  // Now we can safely read the CURRENT register!
  Adafruit_BusIO_Register current_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CURRENT, 2, MSBFIRST);
   d7c26:	6821      	ldr	r1, [r4, #0]
   d7c28:	2302      	movs	r3, #2
   d7c2a:	2204      	movs	r2, #4
   d7c2c:	e9cd 5500 	strd	r5, r5, [sp]
   d7c30:	a80a      	add	r0, sp, #40	; 0x28
   d7c32:	f7fe fa65 	bl	d6100 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = current_reg.read(&value);
   d7c36:	f10d 010e 	add.w	r1, sp, #14
   d7c3a:	a80a      	add	r0, sp, #40	; 0x28
   d7c3c:	f7fe fb15 	bl	d626a <_ZN23Adafruit_BusIO_Register4readEPt>
   d7c40:	7120      	strb	r0, [r4, #4]
  return value;
}
   d7c42:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
   d7c46:	b011      	add	sp, #68	; 0x44
   d7c48:	bd30      	pop	{r4, r5, pc}

000d7c4a <_ZN15Adafruit_INA21912getPower_rawEv>:

/*!
 *  @brief  Gets the raw power value (16-bit signed integer, so +-32767)
 *  @return raw power reading
 */
int16_t Adafruit_INA219::getPower_raw() {
   d7c4a:	b530      	push	{r4, r5, lr}
  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7c4c:	2501      	movs	r5, #1
int16_t Adafruit_INA219::getPower_raw() {
   d7c4e:	b091      	sub	sp, #68	; 0x44
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7c50:	e9cd 5500 	strd	r5, r5, [sp]
int16_t Adafruit_INA219::getPower_raw() {
   d7c54:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7c56:	6801      	ldr	r1, [r0, #0]
   d7c58:	2302      	movs	r3, #2
   d7c5a:	2205      	movs	r2, #5
   d7c5c:	a804      	add	r0, sp, #16
   d7c5e:	f7fe fa4f 	bl	d6100 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   d7c62:	68a1      	ldr	r1, [r4, #8]
   d7c64:	2202      	movs	r2, #2
   d7c66:	a804      	add	r0, sp, #16
   d7c68:	f7fe faa1 	bl	d61ae <_ZN23Adafruit_BusIO_Register5writeEmh>

  // Now we can safely read the POWER register!
  Adafruit_BusIO_Register power_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_POWER, 2, MSBFIRST);
   d7c6c:	6821      	ldr	r1, [r4, #0]
   d7c6e:	2302      	movs	r3, #2
   d7c70:	2203      	movs	r2, #3
   d7c72:	e9cd 5500 	strd	r5, r5, [sp]
   d7c76:	a80a      	add	r0, sp, #40	; 0x28
   d7c78:	f7fe fa42 	bl	d6100 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = power_reg.read(&value);
   d7c7c:	f10d 010e 	add.w	r1, sp, #14
   d7c80:	a80a      	add	r0, sp, #40	; 0x28
   d7c82:	f7fe faf2 	bl	d626a <_ZN23Adafruit_BusIO_Register4readEPt>
   d7c86:	7120      	strb	r0, [r4, #4]
  return value;
}
   d7c88:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
   d7c8c:	b011      	add	sp, #68	; 0x44
   d7c8e:	bd30      	pop	{r4, r5, pc}

000d7c90 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv>:

/*!
 *  @brief  Gets the shunt voltage in mV (so +-327mV)
 *  @return the shunt voltage converted to millivolts
 */
float Adafruit_INA219::getShuntVoltage_mV() {
   d7c90:	b508      	push	{r3, lr}
  int16_t value;
  value = getShuntVoltage_raw();
   d7c92:	f7ff ffa2 	bl	d7bda <_ZN15Adafruit_INA21919getShuntVoltage_rawEv>
  return value * 0.01;
   d7c96:	f004 f987 	bl	dbfa8 <__aeabi_i2d>
   d7c9a:	a305      	add	r3, pc, #20	; (adr r3, d7cb0 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv+0x20>)
   d7c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ca0:	f004 f9ec 	bl	dc07c <__aeabi_dmul>
   d7ca4:	f004 fce2 	bl	dc66c <__aeabi_d2f>
}
   d7ca8:	ee00 0a10 	vmov	s0, r0
   d7cac:	bd08      	pop	{r3, pc}
   d7cae:	bf00      	nop
   d7cb0:	47ae147b 	.word	0x47ae147b
   d7cb4:	3f847ae1 	.word	0x3f847ae1

000d7cb8 <_ZN15Adafruit_INA21915getBusVoltage_VEv>:

/*!
 *  @brief  Gets the bus voltage in volts
 *  @return the bus voltage converted to volts
 */
float Adafruit_INA219::getBusVoltage_V() {
   d7cb8:	b508      	push	{r3, lr}
  int16_t value = getBusVoltage_raw();
   d7cba:	f7ff ff76 	bl	d7baa <_ZN15Adafruit_INA21917getBusVoltage_rawEv>
  return value * 0.001;
   d7cbe:	f004 f973 	bl	dbfa8 <__aeabi_i2d>
   d7cc2:	a305      	add	r3, pc, #20	; (adr r3, d7cd8 <_ZN15Adafruit_INA21915getBusVoltage_VEv+0x20>)
   d7cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7cc8:	f004 f9d8 	bl	dc07c <__aeabi_dmul>
   d7ccc:	f004 fcce 	bl	dc66c <__aeabi_d2f>
}
   d7cd0:	ee00 0a10 	vmov	s0, r0
   d7cd4:	bd08      	pop	{r3, pc}
   d7cd6:	bf00      	nop
   d7cd8:	d2f1a9fc 	.word	0xd2f1a9fc
   d7cdc:	3f50624d 	.word	0x3f50624d

000d7ce0 <_ZN15Adafruit_INA21913getCurrent_mAEv>:
/*!
 *  @brief  Gets the current value in mA, taking into account the
 *          config settings and current LSB
 *  @return the current reading convereted to milliamps
 */
float Adafruit_INA219::getCurrent_mA() {
   d7ce0:	b510      	push	{r4, lr}
   d7ce2:	4604      	mov	r4, r0
  float valueDec = getCurrent_raw();
   d7ce4:	f7ff ff8e 	bl	d7c04 <_ZN15Adafruit_INA21914getCurrent_rawEv>
   d7ce8:	ee07 0a90 	vmov	s15, r0
   d7cec:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  valueDec /= ina219_currentDivider_mA;
   d7cf0:	edd4 7a03 	vldr	s15, [r4, #12]
   d7cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
  return valueDec;
}
   d7cf8:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d7cfc:	bd10      	pop	{r4, pc}

000d7cfe <_ZN15Adafruit_INA21911getPower_mWEv>:
/*!
 *  @brief  Gets the power value in mW, taking into account the
 *          config settings and current LSB
 *  @return power reading converted to milliwatts
 */
float Adafruit_INA219::getPower_mW() {
   d7cfe:	b510      	push	{r4, lr}
   d7d00:	4604      	mov	r4, r0
  float valueDec = getPower_raw();
   d7d02:	f7ff ffa2 	bl	d7c4a <_ZN15Adafruit_INA21912getPower_rawEv>
   d7d06:	ee07 0a90 	vmov	s15, r0
   d7d0a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  valueDec *= ina219_powerMultiplier_mW;
   d7d0e:	edd4 7a04 	vldr	s15, [r4, #16]
  return valueDec;
}
   d7d12:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7d16:	bd10      	pop	{r4, pc}

000d7d18 <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>:
 *          of current.  Each unit of current corresponds to 100uA, and
 *          each unit of power corresponds to 2mW. Counter overflow
 *          occurs at 3.2A.
 *  @note   These calculations assume a 0.1 ohm resistor is present
 */
void Adafruit_INA219::setCalibration_32V_2A() {
   d7d18:	b530      	push	{r4, r5, lr}
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 3.2 * 32V
  // MaximumPower = 102.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
   d7d1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   d7d1e:	230a      	movs	r3, #10
void Adafruit_INA219::setCalibration_32V_2A() {
   d7d20:	b08f      	sub	sp, #60	; 0x3c
  ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
   d7d22:	e9c0 2302 	strd	r2, r3, [r0, #8]
  ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)

  // Set Calibration register to 'Cal' calculated above
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7d26:	2501      	movs	r5, #1
  ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
   d7d28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7d2c:	6103      	str	r3, [r0, #16]
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7d2e:	e9cd 5500 	strd	r5, r5, [sp]
void Adafruit_INA219::setCalibration_32V_2A() {
   d7d32:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7d34:	6801      	ldr	r1, [r0, #0]
   d7d36:	2302      	movs	r3, #2
   d7d38:	2205      	movs	r2, #5
   d7d3a:	a802      	add	r0, sp, #8
   d7d3c:	f7fe f9e0 	bl	d6100 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   d7d40:	68a1      	ldr	r1, [r4, #8]
   d7d42:	2202      	movs	r2, #2
   d7d44:	a802      	add	r0, sp, #8
   d7d46:	f7fe fa32 	bl	d61ae <_ZN23Adafruit_BusIO_Register5writeEmh>
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
                    INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  Adafruit_BusIO_Register config_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CONFIG, 2, MSBFIRST);
   d7d4a:	6821      	ldr	r1, [r4, #0]
   d7d4c:	2302      	movs	r3, #2
   d7d4e:	e9cd 5500 	strd	r5, r5, [sp]
   d7d52:	2200      	movs	r2, #0
   d7d54:	a808      	add	r0, sp, #32
   d7d56:	f7fe f9d3 	bl	d6100 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = config_reg.write(config, 2);
   d7d5a:	2202      	movs	r2, #2
   d7d5c:	f643 119f 	movw	r1, #14751	; 0x399f
   d7d60:	a808      	add	r0, sp, #32
   d7d62:	f7fe fa24 	bl	d61ae <_ZN23Adafruit_BusIO_Register5writeEmh>
   d7d66:	7120      	strb	r0, [r4, #4]
}
   d7d68:	b00f      	add	sp, #60	; 0x3c
   d7d6a:	bd30      	pop	{r4, r5, pc}

000d7d6c <_ZN15Adafruit_INA2195beginEP7TwoWire>:
bool Adafruit_INA219::begin(TwoWire *theWire) {
   d7d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   d7d6e:	6803      	ldr	r3, [r0, #0]
bool Adafruit_INA219::begin(TwoWire *theWire) {
   d7d70:	4604      	mov	r4, r0
  if (!i2c_dev) {
   d7d72:	b953      	cbnz	r3, d7d8a <_ZN15Adafruit_INA2195beginEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(ina219_i2caddr, theWire);
   d7d74:	2010      	movs	r0, #16
   d7d76:	9101      	str	r1, [sp, #4]
   d7d78:	f7fc f98d 	bl	d4096 <_Znwj>
   d7d7c:	4605      	mov	r5, r0
   d7d7e:	b118      	cbz	r0, d7d88 <_ZN15Adafruit_INA2195beginEP7TwoWire+0x1c>
   d7d80:	9a01      	ldr	r2, [sp, #4]
   d7d82:	7961      	ldrb	r1, [r4, #5]
   d7d84:	f7fe fbe9 	bl	d655a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d7d88:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
   d7d8a:	6820      	ldr	r0, [r4, #0]
   d7d8c:	2101      	movs	r1, #1
   d7d8e:	f7fe fc00 	bl	d6592 <_ZN18Adafruit_I2CDevice5beginEb>
   d7d92:	4605      	mov	r5, r0
   d7d94:	b110      	cbz	r0, d7d9c <_ZN15Adafruit_INA2195beginEP7TwoWire+0x30>
  setCalibration_32V_2A();
   d7d96:	4620      	mov	r0, r4
   d7d98:	f7ff ffbe 	bl	d7d18 <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>
}
   d7d9c:	4628      	mov	r0, r5
   d7d9e:	b003      	add	sp, #12
   d7da0:	bd30      	pop	{r4, r5, pc}

000d7da2 <_ZN15Adafruit_INA21924setCalibration_16V_400mAEv>:
/*!
 *  @brief set device to alibration which uses the highest precision for
 *     current measurement (0.1mA), at the expense of
 *     only supporting 16V at 400mA max.
 */
void Adafruit_INA219::setCalibration_16V_400mA() {
   d7da2:	b530      	push	{r4, r5, lr}
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 0.4 * 16V
  // MaximumPower = 6.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
   d7da4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d7da8:	2314      	movs	r3, #20
void Adafruit_INA219::setCalibration_16V_400mA() {
   d7daa:	b08f      	sub	sp, #60	; 0x3c
  ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
   d7dac:	e9c0 2302 	strd	r2, r3, [r0, #8]
  ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit

  // Set Calibration register to 'Cal' calculated above
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7db0:	2501      	movs	r5, #1
  ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit
   d7db2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d7db6:	6103      	str	r3, [r0, #16]
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7db8:	e9cd 5500 	strd	r5, r5, [sp]
void Adafruit_INA219::setCalibration_16V_400mA() {
   d7dbc:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7dbe:	6801      	ldr	r1, [r0, #0]
   d7dc0:	2302      	movs	r3, #2
   d7dc2:	2205      	movs	r2, #5
   d7dc4:	a802      	add	r0, sp, #8
   d7dc6:	f7fe f99b 	bl	d6100 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   d7dca:	68a1      	ldr	r1, [r4, #8]
   d7dcc:	2202      	movs	r2, #2
   d7dce:	a802      	add	r0, sp, #8
   d7dd0:	f7fe f9ed 	bl	d61ae <_ZN23Adafruit_BusIO_Register5writeEmh>
                    INA219_CONFIG_GAIN_1_40MV | INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

  Adafruit_BusIO_Register config_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CONFIG, 2, MSBFIRST);
   d7dd4:	6821      	ldr	r1, [r4, #0]
   d7dd6:	2302      	movs	r3, #2
   d7dd8:	e9cd 5500 	strd	r5, r5, [sp]
   d7ddc:	2200      	movs	r2, #0
   d7dde:	a808      	add	r0, sp, #32
   d7de0:	f7fe f98e 	bl	d6100 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = config_reg.write(config, 2);
   d7de4:	2202      	movs	r2, #2
   d7de6:	f240 119f 	movw	r1, #415	; 0x19f
   d7dea:	a808      	add	r0, sp, #32
   d7dec:	f7fe f9df 	bl	d61ae <_ZN23Adafruit_BusIO_Register5writeEmh>
   d7df0:	7120      	strb	r0, [r4, #4]
}
   d7df2:	b00f      	add	sp, #60	; 0x3c
   d7df4:	bd30      	pop	{r4, r5, pc}
	...

000d7df8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7df8:	b508      	push	{r3, lr}
   d7dfa:	4b02      	ldr	r3, [pc, #8]	; (d7e04 <netdb_freeaddrinfo+0xc>)
   d7dfc:	681b      	ldr	r3, [r3, #0]
   d7dfe:	689b      	ldr	r3, [r3, #8]
   d7e00:	9301      	str	r3, [sp, #4]
   d7e02:	bd08      	pop	{r3, pc}
   d7e04:	00030268 	.word	0x00030268

000d7e08 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7e08:	b508      	push	{r3, lr}
   d7e0a:	4b02      	ldr	r3, [pc, #8]	; (d7e14 <netdb_getaddrinfo+0xc>)
   d7e0c:	681b      	ldr	r3, [r3, #0]
   d7e0e:	68db      	ldr	r3, [r3, #12]
   d7e10:	9301      	str	r3, [sp, #4]
   d7e12:	bd08      	pop	{r3, pc}
   d7e14:	00030268 	.word	0x00030268

000d7e18 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7e18:	b508      	push	{r3, lr}
   d7e1a:	4b02      	ldr	r3, [pc, #8]	; (d7e24 <HAL_Validate_Pin_Function+0xc>)
   d7e1c:	681b      	ldr	r3, [r3, #0]
   d7e1e:	685b      	ldr	r3, [r3, #4]
   d7e20:	9301      	str	r3, [sp, #4]
   d7e22:	bd08      	pop	{r3, pc}
   d7e24:	0003022c 	.word	0x0003022c

000d7e28 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7e28:	b508      	push	{r3, lr}
   d7e2a:	4b02      	ldr	r3, [pc, #8]	; (d7e34 <HAL_Pin_Mode+0xc>)
   d7e2c:	681b      	ldr	r3, [r3, #0]
   d7e2e:	689b      	ldr	r3, [r3, #8]
   d7e30:	9301      	str	r3, [sp, #4]
   d7e32:	bd08      	pop	{r3, pc}
   d7e34:	0003022c 	.word	0x0003022c

000d7e38 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7e38:	b508      	push	{r3, lr}
   d7e3a:	4b02      	ldr	r3, [pc, #8]	; (d7e44 <HAL_Get_Pin_Mode+0xc>)
   d7e3c:	681b      	ldr	r3, [r3, #0]
   d7e3e:	68db      	ldr	r3, [r3, #12]
   d7e40:	9301      	str	r3, [sp, #4]
   d7e42:	bd08      	pop	{r3, pc}
   d7e44:	0003022c 	.word	0x0003022c

000d7e48 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7e48:	b508      	push	{r3, lr}
   d7e4a:	4b02      	ldr	r3, [pc, #8]	; (d7e54 <HAL_GPIO_Write+0xc>)
   d7e4c:	681b      	ldr	r3, [r3, #0]
   d7e4e:	691b      	ldr	r3, [r3, #16]
   d7e50:	9301      	str	r3, [sp, #4]
   d7e52:	bd08      	pop	{r3, pc}
   d7e54:	0003022c 	.word	0x0003022c

000d7e58 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7e58:	b508      	push	{r3, lr}
   d7e5a:	4b02      	ldr	r3, [pc, #8]	; (d7e64 <HAL_GPIO_Read+0xc>)
   d7e5c:	681b      	ldr	r3, [r3, #0]
   d7e5e:	695b      	ldr	r3, [r3, #20]
   d7e60:	9301      	str	r3, [sp, #4]
   d7e62:	bd08      	pop	{r3, pc}
   d7e64:	0003022c 	.word	0x0003022c

000d7e68 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7e68:	b508      	push	{r3, lr}
   d7e6a:	4b02      	ldr	r3, [pc, #8]	; (d7e74 <HAL_Interrupts_Attach+0xc>)
   d7e6c:	681b      	ldr	r3, [r3, #0]
   d7e6e:	699b      	ldr	r3, [r3, #24]
   d7e70:	9301      	str	r3, [sp, #4]
   d7e72:	bd08      	pop	{r3, pc}
   d7e74:	0003022c 	.word	0x0003022c

000d7e78 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7e78:	b508      	push	{r3, lr}
   d7e7a:	4b02      	ldr	r3, [pc, #8]	; (d7e84 <HAL_Interrupts_Detach+0xc>)
   d7e7c:	681b      	ldr	r3, [r3, #0]
   d7e7e:	69db      	ldr	r3, [r3, #28]
   d7e80:	9301      	str	r3, [sp, #4]
   d7e82:	bd08      	pop	{r3, pc}
   d7e84:	0003022c 	.word	0x0003022c

000d7e88 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7e88:	b508      	push	{r3, lr}
   d7e8a:	4b02      	ldr	r3, [pc, #8]	; (d7e94 <hal_adc_read+0xc>)
   d7e8c:	681b      	ldr	r3, [r3, #0]
   d7e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e90:	9301      	str	r3, [sp, #4]
   d7e92:	bd08      	pop	{r3, pc}
   d7e94:	0003022c 	.word	0x0003022c

000d7e98 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7e98:	b508      	push	{r3, lr}
   d7e9a:	4b02      	ldr	r3, [pc, #8]	; (d7ea4 <HAL_RNG_GetRandomNumber+0xc>)
   d7e9c:	681b      	ldr	r3, [r3, #0]
   d7e9e:	685b      	ldr	r3, [r3, #4]
   d7ea0:	9301      	str	r3, [sp, #4]
   d7ea2:	bd08      	pop	{r3, pc}
   d7ea4:	00030218 	.word	0x00030218

000d7ea8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7ea8:	b508      	push	{r3, lr}
   d7eaa:	4b02      	ldr	r3, [pc, #8]	; (d7eb4 <HAL_Delay_Microseconds+0xc>)
   d7eac:	681b      	ldr	r3, [r3, #0]
   d7eae:	68db      	ldr	r3, [r3, #12]
   d7eb0:	9301      	str	r3, [sp, #4]
   d7eb2:	bd08      	pop	{r3, pc}
   d7eb4:	00030218 	.word	0x00030218

000d7eb8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7eb8:	b508      	push	{r3, lr}
   d7eba:	4b02      	ldr	r3, [pc, #8]	; (d7ec4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7ebc:	681b      	ldr	r3, [r3, #0]
   d7ebe:	695b      	ldr	r3, [r3, #20]
   d7ec0:	9301      	str	r3, [sp, #4]
   d7ec2:	bd08      	pop	{r3, pc}
   d7ec4:	00030218 	.word	0x00030218

000d7ec8 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d7ec8:	b508      	push	{r3, lr}
   d7eca:	4b02      	ldr	r3, [pc, #8]	; (d7ed4 <HAL_EEPROM_Init+0xc>)
   d7ecc:	681b      	ldr	r3, [r3, #0]
   d7ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7ed0:	9301      	str	r3, [sp, #4]
   d7ed2:	bd08      	pop	{r3, pc}
   d7ed4:	00030218 	.word	0x00030218

000d7ed8 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d7ed8:	b508      	push	{r3, lr}
   d7eda:	4b02      	ldr	r3, [pc, #8]	; (d7ee4 <HAL_EEPROM_Get+0xc>)
   d7edc:	681b      	ldr	r3, [r3, #0]
   d7ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7ee0:	9301      	str	r3, [sp, #4]
   d7ee2:	bd08      	pop	{r3, pc}
   d7ee4:	00030218 	.word	0x00030218

000d7ee8 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d7ee8:	b508      	push	{r3, lr}
   d7eea:	4b02      	ldr	r3, [pc, #8]	; (d7ef4 <HAL_EEPROM_Put+0xc>)
   d7eec:	681b      	ldr	r3, [r3, #0]
   d7eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7ef0:	9301      	str	r3, [sp, #4]
   d7ef2:	bd08      	pop	{r3, pc}
   d7ef4:	00030218 	.word	0x00030218

000d7ef8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7ef8:	b508      	push	{r3, lr}
   d7efa:	4b02      	ldr	r3, [pc, #8]	; (d7f04 <hal_rtc_time_is_valid+0xc>)
   d7efc:	681b      	ldr	r3, [r3, #0]
   d7efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7f00:	9301      	str	r3, [sp, #4]
   d7f02:	bd08      	pop	{r3, pc}
   d7f04:	00030218 	.word	0x00030218

000d7f08 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7f08:	b508      	push	{r3, lr}
   d7f0a:	4b02      	ldr	r3, [pc, #8]	; (d7f14 <hal_rtc_get_time+0xc>)
   d7f0c:	681b      	ldr	r3, [r3, #0]
   d7f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7f10:	9301      	str	r3, [sp, #4]
   d7f12:	bd08      	pop	{r3, pc}
   d7f14:	00030218 	.word	0x00030218

000d7f18 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7f18:	b508      	push	{r3, lr}
   d7f1a:	4b02      	ldr	r3, [pc, #8]	; (d7f24 <os_thread_yield+0xc>)
   d7f1c:	681b      	ldr	r3, [r3, #0]
   d7f1e:	68db      	ldr	r3, [r3, #12]
   d7f20:	9301      	str	r3, [sp, #4]
   d7f22:	bd08      	pop	{r3, pc}
   d7f24:	00030248 	.word	0x00030248

000d7f28 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7f28:	b508      	push	{r3, lr}
   d7f2a:	4b02      	ldr	r3, [pc, #8]	; (d7f34 <os_mutex_recursive_create+0xc>)
   d7f2c:	681b      	ldr	r3, [r3, #0]
   d7f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7f30:	9301      	str	r3, [sp, #4]
   d7f32:	bd08      	pop	{r3, pc}
   d7f34:	00030248 	.word	0x00030248

000d7f38 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7f38:	b508      	push	{r3, lr}
   d7f3a:	4b02      	ldr	r3, [pc, #8]	; (d7f44 <inet_inet_ntop+0xc>)
   d7f3c:	681b      	ldr	r3, [r3, #0]
   d7f3e:	695b      	ldr	r3, [r3, #20]
   d7f40:	9301      	str	r3, [sp, #4]
   d7f42:	bd08      	pop	{r3, pc}
   d7f44:	00030264 	.word	0x00030264

000d7f48 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7f48:	b508      	push	{r3, lr}
   d7f4a:	4b02      	ldr	r3, [pc, #8]	; (d7f54 <hal_usart_init+0xc>)
   d7f4c:	681b      	ldr	r3, [r3, #0]
   d7f4e:	681b      	ldr	r3, [r3, #0]
   d7f50:	9301      	str	r3, [sp, #4]
   d7f52:	bd08      	pop	{r3, pc}
   d7f54:	0003023c 	.word	0x0003023c

000d7f58 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7f58:	b508      	push	{r3, lr}
   d7f5a:	4b02      	ldr	r3, [pc, #8]	; (d7f64 <hal_usart_write+0xc>)
   d7f5c:	681b      	ldr	r3, [r3, #0]
   d7f5e:	68db      	ldr	r3, [r3, #12]
   d7f60:	9301      	str	r3, [sp, #4]
   d7f62:	bd08      	pop	{r3, pc}
   d7f64:	0003023c 	.word	0x0003023c

000d7f68 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7f68:	b508      	push	{r3, lr}
   d7f6a:	4b02      	ldr	r3, [pc, #8]	; (d7f74 <hal_usart_available+0xc>)
   d7f6c:	681b      	ldr	r3, [r3, #0]
   d7f6e:	691b      	ldr	r3, [r3, #16]
   d7f70:	9301      	str	r3, [sp, #4]
   d7f72:	bd08      	pop	{r3, pc}
   d7f74:	0003023c 	.word	0x0003023c

000d7f78 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7f78:	b508      	push	{r3, lr}
   d7f7a:	4b02      	ldr	r3, [pc, #8]	; (d7f84 <hal_usart_read+0xc>)
   d7f7c:	681b      	ldr	r3, [r3, #0]
   d7f7e:	695b      	ldr	r3, [r3, #20]
   d7f80:	9301      	str	r3, [sp, #4]
   d7f82:	bd08      	pop	{r3, pc}
   d7f84:	0003023c 	.word	0x0003023c

000d7f88 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7f88:	b508      	push	{r3, lr}
   d7f8a:	4b02      	ldr	r3, [pc, #8]	; (d7f94 <hal_usart_peek+0xc>)
   d7f8c:	681b      	ldr	r3, [r3, #0]
   d7f8e:	699b      	ldr	r3, [r3, #24]
   d7f90:	9301      	str	r3, [sp, #4]
   d7f92:	bd08      	pop	{r3, pc}
   d7f94:	0003023c 	.word	0x0003023c

000d7f98 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7f98:	b508      	push	{r3, lr}
   d7f9a:	4b02      	ldr	r3, [pc, #8]	; (d7fa4 <hal_usart_flush+0xc>)
   d7f9c:	681b      	ldr	r3, [r3, #0]
   d7f9e:	69db      	ldr	r3, [r3, #28]
   d7fa0:	9301      	str	r3, [sp, #4]
   d7fa2:	bd08      	pop	{r3, pc}
   d7fa4:	0003023c 	.word	0x0003023c

000d7fa8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7fa8:	b508      	push	{r3, lr}
   d7faa:	4b02      	ldr	r3, [pc, #8]	; (d7fb4 <hal_usart_is_enabled+0xc>)
   d7fac:	681b      	ldr	r3, [r3, #0]
   d7fae:	6a1b      	ldr	r3, [r3, #32]
   d7fb0:	9301      	str	r3, [sp, #4]
   d7fb2:	bd08      	pop	{r3, pc}
   d7fb4:	0003023c 	.word	0x0003023c

000d7fb8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7fb8:	b508      	push	{r3, lr}
   d7fba:	4b02      	ldr	r3, [pc, #8]	; (d7fc4 <hal_usart_available_data_for_write+0xc>)
   d7fbc:	681b      	ldr	r3, [r3, #0]
   d7fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7fc0:	9301      	str	r3, [sp, #4]
   d7fc2:	bd08      	pop	{r3, pc}
   d7fc4:	0003023c 	.word	0x0003023c

000d7fc8 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d7fc8:	b508      	push	{r3, lr}
   d7fca:	4b02      	ldr	r3, [pc, #8]	; (d7fd4 <hal_i2c_set_speed+0xc>)
   d7fcc:	681b      	ldr	r3, [r3, #0]
   d7fce:	681b      	ldr	r3, [r3, #0]
   d7fd0:	9301      	str	r3, [sp, #4]
   d7fd2:	bd08      	pop	{r3, pc}
   d7fd4:	00030228 	.word	0x00030228

000d7fd8 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7fd8:	b508      	push	{r3, lr}
   d7fda:	4b02      	ldr	r3, [pc, #8]	; (d7fe4 <hal_i2c_begin+0xc>)
   d7fdc:	681b      	ldr	r3, [r3, #0]
   d7fde:	68db      	ldr	r3, [r3, #12]
   d7fe0:	9301      	str	r3, [sp, #4]
   d7fe2:	bd08      	pop	{r3, pc}
   d7fe4:	00030228 	.word	0x00030228

000d7fe8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7fe8:	b508      	push	{r3, lr}
   d7fea:	4b02      	ldr	r3, [pc, #8]	; (d7ff4 <hal_i2c_begin_transmission+0xc>)
   d7fec:	681b      	ldr	r3, [r3, #0]
   d7fee:	699b      	ldr	r3, [r3, #24]
   d7ff0:	9301      	str	r3, [sp, #4]
   d7ff2:	bd08      	pop	{r3, pc}
   d7ff4:	00030228 	.word	0x00030228

000d7ff8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7ff8:	b508      	push	{r3, lr}
   d7ffa:	4b02      	ldr	r3, [pc, #8]	; (d8004 <hal_i2c_end_transmission+0xc>)
   d7ffc:	681b      	ldr	r3, [r3, #0]
   d7ffe:	69db      	ldr	r3, [r3, #28]
   d8000:	9301      	str	r3, [sp, #4]
   d8002:	bd08      	pop	{r3, pc}
   d8004:	00030228 	.word	0x00030228

000d8008 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d8008:	b508      	push	{r3, lr}
   d800a:	4b02      	ldr	r3, [pc, #8]	; (d8014 <hal_i2c_write+0xc>)
   d800c:	681b      	ldr	r3, [r3, #0]
   d800e:	6a1b      	ldr	r3, [r3, #32]
   d8010:	9301      	str	r3, [sp, #4]
   d8012:	bd08      	pop	{r3, pc}
   d8014:	00030228 	.word	0x00030228

000d8018 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d8018:	b508      	push	{r3, lr}
   d801a:	4b02      	ldr	r3, [pc, #8]	; (d8024 <hal_i2c_available+0xc>)
   d801c:	681b      	ldr	r3, [r3, #0]
   d801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8020:	9301      	str	r3, [sp, #4]
   d8022:	bd08      	pop	{r3, pc}
   d8024:	00030228 	.word	0x00030228

000d8028 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d8028:	b508      	push	{r3, lr}
   d802a:	4b02      	ldr	r3, [pc, #8]	; (d8034 <hal_i2c_read+0xc>)
   d802c:	681b      	ldr	r3, [r3, #0]
   d802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8030:	9301      	str	r3, [sp, #4]
   d8032:	bd08      	pop	{r3, pc}
   d8034:	00030228 	.word	0x00030228

000d8038 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d8038:	b508      	push	{r3, lr}
   d803a:	4b02      	ldr	r3, [pc, #8]	; (d8044 <hal_i2c_peek+0xc>)
   d803c:	681b      	ldr	r3, [r3, #0]
   d803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8040:	9301      	str	r3, [sp, #4]
   d8042:	bd08      	pop	{r3, pc}
   d8044:	00030228 	.word	0x00030228

000d8048 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d8048:	b508      	push	{r3, lr}
   d804a:	4b02      	ldr	r3, [pc, #8]	; (d8054 <hal_i2c_flush+0xc>)
   d804c:	681b      	ldr	r3, [r3, #0]
   d804e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8050:	9301      	str	r3, [sp, #4]
   d8052:	bd08      	pop	{r3, pc}
   d8054:	00030228 	.word	0x00030228

000d8058 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d8058:	b508      	push	{r3, lr}
   d805a:	4b02      	ldr	r3, [pc, #8]	; (d8064 <hal_i2c_is_enabled+0xc>)
   d805c:	681b      	ldr	r3, [r3, #0]
   d805e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8060:	9301      	str	r3, [sp, #4]
   d8062:	bd08      	pop	{r3, pc}
   d8064:	00030228 	.word	0x00030228

000d8068 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d8068:	b508      	push	{r3, lr}
   d806a:	4b02      	ldr	r3, [pc, #8]	; (d8074 <hal_i2c_init+0xc>)
   d806c:	681b      	ldr	r3, [r3, #0]
   d806e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8070:	9301      	str	r3, [sp, #4]
   d8072:	bd08      	pop	{r3, pc}
   d8074:	00030228 	.word	0x00030228

000d8078 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d8078:	b508      	push	{r3, lr}
   d807a:	4b02      	ldr	r3, [pc, #8]	; (d8084 <hal_i2c_request_ex+0xc>)
   d807c:	681b      	ldr	r3, [r3, #0]
   d807e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8080:	9301      	str	r3, [sp, #4]
   d8082:	bd08      	pop	{r3, pc}
   d8084:	00030228 	.word	0x00030228

000d8088 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d8088:	b508      	push	{r3, lr}
   d808a:	4b02      	ldr	r3, [pc, #8]	; (d8094 <hal_spi_begin+0xc>)
   d808c:	681b      	ldr	r3, [r3, #0]
   d808e:	681b      	ldr	r3, [r3, #0]
   d8090:	9301      	str	r3, [sp, #4]
   d8092:	bd08      	pop	{r3, pc}
   d8094:	00030230 	.word	0x00030230

000d8098 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d8098:	b508      	push	{r3, lr}
   d809a:	4b02      	ldr	r3, [pc, #8]	; (d80a4 <hal_spi_transfer+0xc>)
   d809c:	681b      	ldr	r3, [r3, #0]
   d809e:	695b      	ldr	r3, [r3, #20]
   d80a0:	9301      	str	r3, [sp, #4]
   d80a2:	bd08      	pop	{r3, pc}
   d80a4:	00030230 	.word	0x00030230

000d80a8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d80a8:	b508      	push	{r3, lr}
   d80aa:	4b02      	ldr	r3, [pc, #8]	; (d80b4 <hal_spi_init+0xc>)
   d80ac:	681b      	ldr	r3, [r3, #0]
   d80ae:	69db      	ldr	r3, [r3, #28]
   d80b0:	9301      	str	r3, [sp, #4]
   d80b2:	bd08      	pop	{r3, pc}
   d80b4:	00030230 	.word	0x00030230

000d80b8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d80b8:	b508      	push	{r3, lr}
   d80ba:	4b02      	ldr	r3, [pc, #8]	; (d80c4 <hal_spi_is_enabled+0xc>)
   d80bc:	681b      	ldr	r3, [r3, #0]
   d80be:	6a1b      	ldr	r3, [r3, #32]
   d80c0:	9301      	str	r3, [sp, #4]
   d80c2:	bd08      	pop	{r3, pc}
   d80c4:	00030230 	.word	0x00030230

000d80c8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d80c8:	b508      	push	{r3, lr}
   d80ca:	4b02      	ldr	r3, [pc, #8]	; (d80d4 <hal_spi_info+0xc>)
   d80cc:	681b      	ldr	r3, [r3, #0]
   d80ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d80d0:	9301      	str	r3, [sp, #4]
   d80d2:	bd08      	pop	{r3, pc}
   d80d4:	00030230 	.word	0x00030230

000d80d8 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d80d8:	b508      	push	{r3, lr}
   d80da:	4b02      	ldr	r3, [pc, #8]	; (d80e4 <hal_spi_transfer_dma+0xc>)
   d80dc:	681b      	ldr	r3, [r3, #0]
   d80de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d80e0:	9301      	str	r3, [sp, #4]
   d80e2:	bd08      	pop	{r3, pc}
   d80e4:	00030230 	.word	0x00030230

000d80e8 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d80e8:	b508      	push	{r3, lr}
   d80ea:	4b02      	ldr	r3, [pc, #8]	; (d80f4 <hal_spi_transfer_dma_status+0xc>)
   d80ec:	681b      	ldr	r3, [r3, #0]
   d80ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d80f0:	9301      	str	r3, [sp, #4]
   d80f2:	bd08      	pop	{r3, pc}
   d80f4:	00030230 	.word	0x00030230

000d80f8 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d80f8:	b508      	push	{r3, lr}
   d80fa:	4b02      	ldr	r3, [pc, #8]	; (d8104 <hal_spi_set_settings+0xc>)
   d80fc:	681b      	ldr	r3, [r3, #0]
   d80fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8100:	9301      	str	r3, [sp, #4]
   d8102:	bd08      	pop	{r3, pc}
   d8104:	00030230 	.word	0x00030230

000d8108 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d8108:	b508      	push	{r3, lr}
   d810a:	4b02      	ldr	r3, [pc, #8]	; (d8114 <hal_spi_acquire+0xc>)
   d810c:	681b      	ldr	r3, [r3, #0]
   d810e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8110:	9301      	str	r3, [sp, #4]
   d8112:	bd08      	pop	{r3, pc}
   d8114:	00030230 	.word	0x00030230

000d8118 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d8118:	b508      	push	{r3, lr}
   d811a:	4b02      	ldr	r3, [pc, #8]	; (d8124 <hal_spi_release+0xc>)
   d811c:	681b      	ldr	r3, [r3, #0]
   d811e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8120:	9301      	str	r3, [sp, #4]
   d8122:	bd08      	pop	{r3, pc}
   d8124:	00030230 	.word	0x00030230

000d8128 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8128:	b508      	push	{r3, lr}
   d812a:	4b02      	ldr	r3, [pc, #8]	; (d8134 <HAL_USB_USART_Init+0xc>)
   d812c:	681b      	ldr	r3, [r3, #0]
   d812e:	681b      	ldr	r3, [r3, #0]
   d8130:	9301      	str	r3, [sp, #4]
   d8132:	bd08      	pop	{r3, pc}
   d8134:	0003024c 	.word	0x0003024c

000d8138 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8138:	b508      	push	{r3, lr}
   d813a:	4b02      	ldr	r3, [pc, #8]	; (d8144 <HAL_USB_USART_Begin+0xc>)
   d813c:	681b      	ldr	r3, [r3, #0]
   d813e:	685b      	ldr	r3, [r3, #4]
   d8140:	9301      	str	r3, [sp, #4]
   d8142:	bd08      	pop	{r3, pc}
   d8144:	0003024c 	.word	0x0003024c

000d8148 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8148:	b508      	push	{r3, lr}
   d814a:	4b02      	ldr	r3, [pc, #8]	; (d8154 <HAL_USB_USART_Available_Data+0xc>)
   d814c:	681b      	ldr	r3, [r3, #0]
   d814e:	691b      	ldr	r3, [r3, #16]
   d8150:	9301      	str	r3, [sp, #4]
   d8152:	bd08      	pop	{r3, pc}
   d8154:	0003024c 	.word	0x0003024c

000d8158 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8158:	b508      	push	{r3, lr}
   d815a:	4b02      	ldr	r3, [pc, #8]	; (d8164 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d815c:	681b      	ldr	r3, [r3, #0]
   d815e:	695b      	ldr	r3, [r3, #20]
   d8160:	9301      	str	r3, [sp, #4]
   d8162:	bd08      	pop	{r3, pc}
   d8164:	0003024c 	.word	0x0003024c

000d8168 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8168:	b508      	push	{r3, lr}
   d816a:	4b02      	ldr	r3, [pc, #8]	; (d8174 <HAL_USB_USART_Receive_Data+0xc>)
   d816c:	681b      	ldr	r3, [r3, #0]
   d816e:	699b      	ldr	r3, [r3, #24]
   d8170:	9301      	str	r3, [sp, #4]
   d8172:	bd08      	pop	{r3, pc}
   d8174:	0003024c 	.word	0x0003024c

000d8178 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8178:	b508      	push	{r3, lr}
   d817a:	4b02      	ldr	r3, [pc, #8]	; (d8184 <HAL_USB_USART_Send_Data+0xc>)
   d817c:	681b      	ldr	r3, [r3, #0]
   d817e:	69db      	ldr	r3, [r3, #28]
   d8180:	9301      	str	r3, [sp, #4]
   d8182:	bd08      	pop	{r3, pc}
   d8184:	0003024c 	.word	0x0003024c

000d8188 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8188:	b508      	push	{r3, lr}
   d818a:	4b02      	ldr	r3, [pc, #8]	; (d8194 <HAL_USB_USART_Flush_Data+0xc>)
   d818c:	681b      	ldr	r3, [r3, #0]
   d818e:	6a1b      	ldr	r3, [r3, #32]
   d8190:	9301      	str	r3, [sp, #4]
   d8192:	bd08      	pop	{r3, pc}
   d8194:	0003024c 	.word	0x0003024c

000d8198 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d8198:	b508      	push	{r3, lr}
   d819a:	4b02      	ldr	r3, [pc, #8]	; (d81a4 <HAL_USB_USART_Is_Enabled+0xc>)
   d819c:	681b      	ldr	r3, [r3, #0]
   d819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d81a0:	9301      	str	r3, [sp, #4]
   d81a2:	bd08      	pop	{r3, pc}
   d81a4:	0003024c 	.word	0x0003024c

000d81a8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d81a8:	b508      	push	{r3, lr}
   d81aa:	4b02      	ldr	r3, [pc, #8]	; (d81b4 <panic_+0xc>)
   d81ac:	681b      	ldr	r3, [r3, #0]
   d81ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d81b0:	9301      	str	r3, [sp, #4]
   d81b2:	bd08      	pop	{r3, pc}
   d81b4:	00030260 	.word	0x00030260

000d81b8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d81b8:	b508      	push	{r3, lr}
   d81ba:	4b02      	ldr	r3, [pc, #8]	; (d81c4 <system_mode+0xc>)
   d81bc:	681b      	ldr	r3, [r3, #0]
   d81be:	681b      	ldr	r3, [r3, #0]
   d81c0:	9301      	str	r3, [sp, #4]
   d81c2:	bd08      	pop	{r3, pc}
   d81c4:	00030220 	.word	0x00030220

000d81c8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d81c8:	b508      	push	{r3, lr}
   d81ca:	4b02      	ldr	r3, [pc, #8]	; (d81d4 <set_system_mode+0xc>)
   d81cc:	681b      	ldr	r3, [r3, #0]
   d81ce:	685b      	ldr	r3, [r3, #4]
   d81d0:	9301      	str	r3, [sp, #4]
   d81d2:	bd08      	pop	{r3, pc}
   d81d4:	00030220 	.word	0x00030220

000d81d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d81d8:	b508      	push	{r3, lr}
   d81da:	4b02      	ldr	r3, [pc, #8]	; (d81e4 <system_delay_ms+0xc>)
   d81dc:	681b      	ldr	r3, [r3, #0]
   d81de:	695b      	ldr	r3, [r3, #20]
   d81e0:	9301      	str	r3, [sp, #4]
   d81e2:	bd08      	pop	{r3, pc}
   d81e4:	00030220 	.word	0x00030220

000d81e8 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d81e8:	b508      	push	{r3, lr}
   d81ea:	4b02      	ldr	r3, [pc, #8]	; (d81f4 <system_thread_get_state+0xc>)
   d81ec:	681b      	ldr	r3, [r3, #0]
   d81ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d81f0:	9301      	str	r3, [sp, #4]
   d81f2:	bd08      	pop	{r3, pc}
   d81f4:	00030220 	.word	0x00030220

000d81f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d81f8:	b508      	push	{r3, lr}
   d81fa:	4b03      	ldr	r3, [pc, #12]	; (d8208 <system_ctrl_set_app_request_handler+0x10>)
   d81fc:	681b      	ldr	r3, [r3, #0]
   d81fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8202:	9301      	str	r3, [sp, #4]
   d8204:	bd08      	pop	{r3, pc}
   d8206:	0000      	.short	0x0000
   d8208:	00030220 	.word	0x00030220

000d820c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d820c:	b508      	push	{r3, lr}
   d820e:	4b03      	ldr	r3, [pc, #12]	; (d821c <system_ctrl_set_result+0x10>)
   d8210:	681b      	ldr	r3, [r3, #0]
   d8212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8216:	9301      	str	r3, [sp, #4]
   d8218:	bd08      	pop	{r3, pc}
   d821a:	0000      	.short	0x0000
   d821c:	00030220 	.word	0x00030220

000d8220 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8220:	b508      	push	{r3, lr}
   d8222:	4b02      	ldr	r3, [pc, #8]	; (d822c <network_connect+0xc>)
   d8224:	681b      	ldr	r3, [r3, #0]
   d8226:	685b      	ldr	r3, [r3, #4]
   d8228:	9301      	str	r3, [sp, #4]
   d822a:	bd08      	pop	{r3, pc}
   d822c:	00030240 	.word	0x00030240

000d8230 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8230:	b508      	push	{r3, lr}
   d8232:	4b02      	ldr	r3, [pc, #8]	; (d823c <network_connecting+0xc>)
   d8234:	681b      	ldr	r3, [r3, #0]
   d8236:	689b      	ldr	r3, [r3, #8]
   d8238:	9301      	str	r3, [sp, #4]
   d823a:	bd08      	pop	{r3, pc}
   d823c:	00030240 	.word	0x00030240

000d8240 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8240:	b508      	push	{r3, lr}
   d8242:	4b02      	ldr	r3, [pc, #8]	; (d824c <network_disconnect+0xc>)
   d8244:	681b      	ldr	r3, [r3, #0]
   d8246:	68db      	ldr	r3, [r3, #12]
   d8248:	9301      	str	r3, [sp, #4]
   d824a:	bd08      	pop	{r3, pc}
   d824c:	00030240 	.word	0x00030240

000d8250 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8250:	b508      	push	{r3, lr}
   d8252:	4b02      	ldr	r3, [pc, #8]	; (d825c <network_ready+0xc>)
   d8254:	681b      	ldr	r3, [r3, #0]
   d8256:	691b      	ldr	r3, [r3, #16]
   d8258:	9301      	str	r3, [sp, #4]
   d825a:	bd08      	pop	{r3, pc}
   d825c:	00030240 	.word	0x00030240

000d8260 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8260:	b508      	push	{r3, lr}
   d8262:	4b02      	ldr	r3, [pc, #8]	; (d826c <network_on+0xc>)
   d8264:	681b      	ldr	r3, [r3, #0]
   d8266:	695b      	ldr	r3, [r3, #20]
   d8268:	9301      	str	r3, [sp, #4]
   d826a:	bd08      	pop	{r3, pc}
   d826c:	00030240 	.word	0x00030240

000d8270 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8270:	b508      	push	{r3, lr}
   d8272:	4b02      	ldr	r3, [pc, #8]	; (d827c <network_off+0xc>)
   d8274:	681b      	ldr	r3, [r3, #0]
   d8276:	699b      	ldr	r3, [r3, #24]
   d8278:	9301      	str	r3, [sp, #4]
   d827a:	bd08      	pop	{r3, pc}
   d827c:	00030240 	.word	0x00030240

000d8280 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8280:	b508      	push	{r3, lr}
   d8282:	4b02      	ldr	r3, [pc, #8]	; (d828c <network_listen+0xc>)
   d8284:	681b      	ldr	r3, [r3, #0]
   d8286:	69db      	ldr	r3, [r3, #28]
   d8288:	9301      	str	r3, [sp, #4]
   d828a:	bd08      	pop	{r3, pc}
   d828c:	00030240 	.word	0x00030240

000d8290 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8290:	b508      	push	{r3, lr}
   d8292:	4b02      	ldr	r3, [pc, #8]	; (d829c <network_listening+0xc>)
   d8294:	681b      	ldr	r3, [r3, #0]
   d8296:	6a1b      	ldr	r3, [r3, #32]
   d8298:	9301      	str	r3, [sp, #4]
   d829a:	bd08      	pop	{r3, pc}
   d829c:	00030240 	.word	0x00030240

000d82a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d82a0:	b508      	push	{r3, lr}
   d82a2:	4b02      	ldr	r3, [pc, #8]	; (d82ac <network_set_listen_timeout+0xc>)
   d82a4:	681b      	ldr	r3, [r3, #0]
   d82a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d82a8:	9301      	str	r3, [sp, #4]
   d82aa:	bd08      	pop	{r3, pc}
   d82ac:	00030240 	.word	0x00030240

000d82b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d82b0:	b508      	push	{r3, lr}
   d82b2:	4b02      	ldr	r3, [pc, #8]	; (d82bc <network_get_listen_timeout+0xc>)
   d82b4:	681b      	ldr	r3, [r3, #0]
   d82b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d82b8:	9301      	str	r3, [sp, #4]
   d82ba:	bd08      	pop	{r3, pc}
   d82bc:	00030240 	.word	0x00030240

000d82c0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d82c0:	b508      	push	{r3, lr}
   d82c2:	4b02      	ldr	r3, [pc, #8]	; (d82cc <network_is_on+0xc>)
   d82c4:	681b      	ldr	r3, [r3, #0]
   d82c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d82c8:	9301      	str	r3, [sp, #4]
   d82ca:	bd08      	pop	{r3, pc}
   d82cc:	00030240 	.word	0x00030240

000d82d0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d82d0:	b508      	push	{r3, lr}
   d82d2:	4b02      	ldr	r3, [pc, #8]	; (d82dc <network_is_off+0xc>)
   d82d4:	681b      	ldr	r3, [r3, #0]
   d82d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d82d8:	9301      	str	r3, [sp, #4]
   d82da:	bd08      	pop	{r3, pc}
   d82dc:	00030240 	.word	0x00030240

000d82e0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d82e0:	b508      	push	{r3, lr}
   d82e2:	4b02      	ldr	r3, [pc, #8]	; (d82ec <spark_process+0xc>)
   d82e4:	681b      	ldr	r3, [r3, #0]
   d82e6:	689b      	ldr	r3, [r3, #8]
   d82e8:	9301      	str	r3, [sp, #4]
   d82ea:	bd08      	pop	{r3, pc}
   d82ec:	00030244 	.word	0x00030244

000d82f0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d82f0:	b508      	push	{r3, lr}
   d82f2:	4b02      	ldr	r3, [pc, #8]	; (d82fc <spark_cloud_flag_connected+0xc>)
   d82f4:	681b      	ldr	r3, [r3, #0]
   d82f6:	695b      	ldr	r3, [r3, #20]
   d82f8:	9301      	str	r3, [sp, #4]
   d82fa:	bd08      	pop	{r3, pc}
   d82fc:	00030244 	.word	0x00030244

000d8300 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8300:	b508      	push	{r3, lr}
   d8302:	4b02      	ldr	r3, [pc, #8]	; (d830c <spark_sync_time_pending+0xc>)
   d8304:	681b      	ldr	r3, [r3, #0]
   d8306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8308:	9301      	str	r3, [sp, #4]
   d830a:	bd08      	pop	{r3, pc}
   d830c:	00030244 	.word	0x00030244

000d8310 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8310:	b508      	push	{r3, lr}
   d8312:	4b02      	ldr	r3, [pc, #8]	; (d831c <spark_set_random_seed_from_cloud_handler+0xc>)
   d8314:	681b      	ldr	r3, [r3, #0]
   d8316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8318:	9301      	str	r3, [sp, #4]
   d831a:	bd08      	pop	{r3, pc}
   d831c:	00030244 	.word	0x00030244

000d8320 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8320:	b508      	push	{r3, lr}
   d8322:	4b02      	ldr	r3, [pc, #8]	; (d832c <malloc+0xc>)
   d8324:	681b      	ldr	r3, [r3, #0]
   d8326:	681b      	ldr	r3, [r3, #0]
   d8328:	9301      	str	r3, [sp, #4]
   d832a:	bd08      	pop	{r3, pc}
   d832c:	0003021c 	.word	0x0003021c

000d8330 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8330:	b508      	push	{r3, lr}
   d8332:	4b02      	ldr	r3, [pc, #8]	; (d833c <free+0xc>)
   d8334:	681b      	ldr	r3, [r3, #0]
   d8336:	685b      	ldr	r3, [r3, #4]
   d8338:	9301      	str	r3, [sp, #4]
   d833a:	bd08      	pop	{r3, pc}
   d833c:	0003021c 	.word	0x0003021c

000d8340 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8340:	b508      	push	{r3, lr}
   d8342:	4b02      	ldr	r3, [pc, #8]	; (d834c <realloc+0xc>)
   d8344:	681b      	ldr	r3, [r3, #0]
   d8346:	689b      	ldr	r3, [r3, #8]
   d8348:	9301      	str	r3, [sp, #4]
   d834a:	bd08      	pop	{r3, pc}
   d834c:	0003021c 	.word	0x0003021c

000d8350 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8350:	b508      	push	{r3, lr}
   d8352:	4b02      	ldr	r3, [pc, #8]	; (d835c <vsnprintf+0xc>)
   d8354:	681b      	ldr	r3, [r3, #0]
   d8356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8358:	9301      	str	r3, [sp, #4]
   d835a:	bd08      	pop	{r3, pc}
   d835c:	0003021c 	.word	0x0003021c

000d8360 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d8360:	b508      	push	{r3, lr}
   d8362:	4b02      	ldr	r3, [pc, #8]	; (d836c <__errno+0xc>)
   d8364:	681b      	ldr	r3, [r3, #0]
   d8366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8368:	9301      	str	r3, [sp, #4]
   d836a:	bd08      	pop	{r3, pc}
   d836c:	0003021c 	.word	0x0003021c

000d8370 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d8370:	b508      	push	{r3, lr}
   d8372:	4b02      	ldr	r3, [pc, #8]	; (d837c <newlib_impure_ptr_callback+0xc>)
   d8374:	681b      	ldr	r3, [r3, #0]
   d8376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8378:	9301      	str	r3, [sp, #4]
   d837a:	bd08      	pop	{r3, pc}
   d837c:	0003021c 	.word	0x0003021c

000d8380 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8380:	2200      	movs	r2, #0
   d8382:	6840      	ldr	r0, [r0, #4]
   d8384:	4611      	mov	r1, r2
   d8386:	f7ff bf83 	b.w	d8290 <network_listening>

000d838a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d838a:	2200      	movs	r2, #0
   d838c:	6840      	ldr	r0, [r0, #4]
   d838e:	4611      	mov	r1, r2
   d8390:	f7ff bf8e 	b.w	d82b0 <network_get_listen_timeout>

000d8394 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8394:	6840      	ldr	r0, [r0, #4]
   d8396:	2200      	movs	r2, #0
   d8398:	f7ff bf82 	b.w	d82a0 <network_set_listen_timeout>

000d839c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d839c:	6840      	ldr	r0, [r0, #4]
   d839e:	2200      	movs	r2, #0
   d83a0:	f081 0101 	eor.w	r1, r1, #1
   d83a4:	f7ff bf6c 	b.w	d8280 <network_listen>

000d83a8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d83a8:	2300      	movs	r3, #0
   d83aa:	6840      	ldr	r0, [r0, #4]
   d83ac:	461a      	mov	r2, r3
   d83ae:	4619      	mov	r1, r3
   d83b0:	f7ff bf5e 	b.w	d8270 <network_off>

000d83b4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d83b4:	2300      	movs	r3, #0
   d83b6:	6840      	ldr	r0, [r0, #4]
   d83b8:	461a      	mov	r2, r3
   d83ba:	4619      	mov	r1, r3
   d83bc:	f7ff bf50 	b.w	d8260 <network_on>

000d83c0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d83c0:	2200      	movs	r2, #0
   d83c2:	6840      	ldr	r0, [r0, #4]
   d83c4:	4611      	mov	r1, r2
   d83c6:	f7ff bf43 	b.w	d8250 <network_ready>

000d83ca <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d83ca:	2200      	movs	r2, #0
   d83cc:	6840      	ldr	r0, [r0, #4]
   d83ce:	4611      	mov	r1, r2
   d83d0:	f7ff bf2e 	b.w	d8230 <network_connecting>

000d83d4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d83d4:	6840      	ldr	r0, [r0, #4]
   d83d6:	2200      	movs	r2, #0
   d83d8:	2102      	movs	r1, #2
   d83da:	f7ff bf31 	b.w	d8240 <network_disconnect>

000d83de <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d83de:	2300      	movs	r3, #0
   d83e0:	6840      	ldr	r0, [r0, #4]
   d83e2:	461a      	mov	r2, r3
   d83e4:	f7ff bf1c 	b.w	d8220 <network_connect>

000d83e8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d83e8:	4b02      	ldr	r3, [pc, #8]	; (d83f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d83ea:	2203      	movs	r2, #3
   d83ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d83ee:	4a02      	ldr	r2, [pc, #8]	; (d83f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d83f0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d83f2:	4770      	bx	lr
   d83f4:	2003e588 	.word	0x2003e588
   d83f8:	000dde88 	.word	0x000dde88

000d83fc <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d83fc:	2100      	movs	r1, #0
   d83fe:	f7ff be83 	b.w	d8108 <hal_spi_acquire>

000d8402 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d8402:	2100      	movs	r1, #0
   d8404:	f7ff be88 	b.w	d8118 <hal_spi_release>

000d8408 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d8408:	b510      	push	{r4, lr}
   d840a:	4604      	mov	r4, r0
   d840c:	4608      	mov	r0, r1
{
    _spi = spi;
   d840e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d8410:	f7ff fe4a 	bl	d80a8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8414:	2300      	movs	r3, #0
   d8416:	6063      	str	r3, [r4, #4]
}
   d8418:	4620      	mov	r0, r4
   d841a:	bd10      	pop	{r4, pc}

000d841c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d841c:	b510      	push	{r4, lr}
   d841e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d8420:	7800      	ldrb	r0, [r0, #0]
   d8422:	f7ff ffeb 	bl	d83fc <_ZN8SPIClass4lockEv.isra.0>
   d8426:	b948      	cbnz	r0, d843c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d8428:	7820      	ldrb	r0, [r4, #0]
   d842a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d842e:	f7ff fe2b 	bl	d8088 <hal_spi_begin>
        unlock();
   d8432:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d8438:	f7ff bfe3 	b.w	d8402 <_ZN8SPIClass6unlockEv.isra.0>
}
   d843c:	bd10      	pop	{r4, pc}

000d843e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d843e:	7800      	ldrb	r0, [r0, #0]
   d8440:	f7ff bfdf 	b.w	d8402 <_ZN8SPIClass6unlockEv.isra.0>

000d8444 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d8444:	0840      	lsrs	r0, r0, #1
{
   d8446:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d8448:	6018      	str	r0, [r3, #0]
   d844a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d844c:	6818      	ldr	r0, [r3, #0]
   d844e:	4288      	cmp	r0, r1
   d8450:	b2e5      	uxtb	r5, r4
   d8452:	d906      	bls.n	d8462 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d8454:	3401      	adds	r4, #1
   d8456:	2c08      	cmp	r4, #8
   d8458:	d002      	beq.n	d8460 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d845a:	0840      	lsrs	r0, r0, #1
   d845c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d845e:	e7f5      	b.n	d844c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d8460:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d8462:	4b02      	ldr	r3, [pc, #8]	; (d846c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d8464:	5d5b      	ldrb	r3, [r3, r5]
   d8466:	7013      	strb	r3, [r2, #0]
}
   d8468:	bd30      	pop	{r4, r5, pc}
   d846a:	bf00      	nop
   d846c:	000ddebc 	.word	0x000ddebc

000d8470 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d8470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8474:	4606      	mov	r6, r0
   d8476:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d8478:	7800      	ldrb	r0, [r0, #0]
{
   d847a:	460c      	mov	r4, r1
    CHECK(lock());
   d847c:	f7ff ffbe 	bl	d83fc <_ZN8SPIClass4lockEv.isra.0>
   d8480:	2800      	cmp	r0, #0
   d8482:	db1b      	blt.n	d84bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d8484:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d8486:	2214      	movs	r2, #20
   d8488:	2100      	movs	r1, #0
   d848a:	a809      	add	r0, sp, #36	; 0x24
   d848c:	f004 fc2c 	bl	dcce8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8490:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d8492:	2200      	movs	r2, #0
   d8494:	a909      	add	r1, sp, #36	; 0x24
   d8496:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d8498:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d849c:	f7ff fe14 	bl	d80c8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d84a0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d84a4:	b113      	cbz	r3, d84ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d84a6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d84aa:	b155      	cbz	r5, d84c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d84ac:	2700      	movs	r7, #0
   d84ae:	46b9      	mov	r9, r7
   d84b0:	46b8      	mov	r8, r7
   d84b2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d84b4:	7923      	ldrb	r3, [r4, #4]
   d84b6:	b15d      	cbz	r5, d84d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d84b8:	b1c3      	cbz	r3, d84ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d84ba:	2000      	movs	r0, #0
}
   d84bc:	b00f      	add	sp, #60	; 0x3c
   d84be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d84c2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d84c6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d84ca:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d84ce:	e7f1      	b.n	d84b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d84d0:	2b00      	cmp	r3, #0
   d84d2:	d135      	bne.n	d8540 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d84d4:	68a3      	ldr	r3, [r4, #8]
   d84d6:	4543      	cmp	r3, r8
   d84d8:	d108      	bne.n	d84ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d84da:	f88d 9020 	strb.w	r9, [sp, #32]
   d84de:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d84e2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d84e6:	89a3      	ldrh	r3, [r4, #12]
   d84e8:	429a      	cmp	r2, r3
   d84ea:	d0e6      	beq.n	d84ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d84ec:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d84ee:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d84f0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d84f4:	980a      	ldr	r0, [sp, #40]	; 0x28
   d84f6:	ab04      	add	r3, sp, #16
   d84f8:	f10d 020f 	add.w	r2, sp, #15
   d84fc:	f7ff ffa2 	bl	d8444 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d8500:	7921      	ldrb	r1, [r4, #4]
   d8502:	b985      	cbnz	r5, d8526 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d8504:	b989      	cbnz	r1, d852a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d8506:	68a3      	ldr	r3, [r4, #8]
   d8508:	4543      	cmp	r3, r8
   d850a:	d30e      	bcc.n	d852a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d850c:	f88d 9020 	strb.w	r9, [sp, #32]
   d8510:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d8514:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8518:	89a3      	ldrh	r3, [r4, #12]
   d851a:	429a      	cmp	r2, r3
   d851c:	d105      	bne.n	d852a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d851e:	9b04      	ldr	r3, [sp, #16]
   d8520:	4543      	cmp	r3, r8
   d8522:	d102      	bne.n	d852a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d8524:	e7c9      	b.n	d84ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d8526:	2900      	cmp	r1, #0
   d8528:	d1f9      	bne.n	d851e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d852a:	2300      	movs	r3, #0
   d852c:	9301      	str	r3, [sp, #4]
   d852e:	7b63      	ldrb	r3, [r4, #13]
   d8530:	9300      	str	r3, [sp, #0]
   d8532:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d8536:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d8538:	7830      	ldrb	r0, [r6, #0]
   d853a:	f7ff fddd 	bl	d80f8 <hal_spi_set_settings>
   d853e:	e7bc      	b.n	d84ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d8540:	e9cd 5500 	strd	r5, r5, [sp]
   d8544:	462b      	mov	r3, r5
   d8546:	462a      	mov	r2, r5
   d8548:	2101      	movs	r1, #1
   d854a:	e7f5      	b.n	d8538 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d854c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d854c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d854e:	7800      	ldrb	r0, [r0, #0]
   d8550:	f7ff fda2 	bl	d8098 <hal_spi_transfer>
}
   d8554:	b2c0      	uxtb	r0, r0
   d8556:	bd08      	pop	{r3, pc}

000d8558 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d8558:	b530      	push	{r4, r5, lr}
   d855a:	b087      	sub	sp, #28
   d855c:	4604      	mov	r4, r0
   d855e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d8560:	9500      	str	r5, [sp, #0]
   d8562:	7800      	ldrb	r0, [r0, #0]
   d8564:	f7ff fdb8 	bl	d80d8 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d8568:	b93d      	cbnz	r5, d857a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d856a:	7820      	ldrb	r0, [r4, #0]
   d856c:	a902      	add	r1, sp, #8
   d856e:	f7ff fdbb 	bl	d80e8 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d8572:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d8576:	07db      	lsls	r3, r3, #31
   d8578:	d4f7      	bmi.n	d856a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d857a:	b007      	add	sp, #28
   d857c:	bd30      	pop	{r4, r5, pc}
	...

000d8580 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d8580:	4b05      	ldr	r3, [pc, #20]	; (d8598 <_GLOBAL__sub_I_System+0x18>)
   d8582:	2202      	movs	r2, #2
   d8584:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8586:	4b05      	ldr	r3, [pc, #20]	; (d859c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d8588:	4a05      	ldr	r2, [pc, #20]	; (d85a0 <_GLOBAL__sub_I_System+0x20>)
   d858a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d858c:	2000      	movs	r0, #0
   d858e:	6018      	str	r0, [r3, #0]
   d8590:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d8592:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8594:	f7ff be18 	b.w	d81c8 <set_system_mode>
   d8598:	2003e59c 	.word	0x2003e59c
   d859c:	2003e590 	.word	0x2003e590
   d85a0:	ffff0000 	.word	0xffff0000

000d85a4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d85a4:	b510      	push	{r4, lr}
   d85a6:	4604      	mov	r4, r0
{
	free(buffer);
   d85a8:	6800      	ldr	r0, [r0, #0]
   d85aa:	f7ff fec1 	bl	d8330 <free>
}
   d85ae:	4620      	mov	r0, r4
   d85b0:	bd10      	pop	{r4, pc}

000d85b2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d85b2:	b510      	push	{r4, lr}
   d85b4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d85b6:	6800      	ldr	r0, [r0, #0]
   d85b8:	b108      	cbz	r0, d85be <_ZN6String10invalidateEv+0xc>
   d85ba:	f7ff feb9 	bl	d8330 <free>
	buffer = NULL;
   d85be:	2300      	movs	r3, #0
	capacity = len = 0;
   d85c0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d85c4:	6023      	str	r3, [r4, #0]
}
   d85c6:	bd10      	pop	{r4, pc}

000d85c8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d85c8:	b538      	push	{r3, r4, r5, lr}
   d85ca:	4604      	mov	r4, r0
   d85cc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d85ce:	6800      	ldr	r0, [r0, #0]
   d85d0:	3101      	adds	r1, #1
   d85d2:	f7ff feb5 	bl	d8340 <realloc>
	if (newbuffer) {
   d85d6:	b110      	cbz	r0, d85de <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d85d8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d85dc:	2001      	movs	r0, #1
	}
	return 0;
}
   d85de:	bd38      	pop	{r3, r4, r5, pc}

000d85e0 <_ZN6String7reserveEj>:
{
   d85e0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d85e2:	6803      	ldr	r3, [r0, #0]
{
   d85e4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d85e6:	b123      	cbz	r3, d85f2 <_ZN6String7reserveEj+0x12>
   d85e8:	6843      	ldr	r3, [r0, #4]
   d85ea:	428b      	cmp	r3, r1
   d85ec:	d301      	bcc.n	d85f2 <_ZN6String7reserveEj+0x12>
   d85ee:	2001      	movs	r0, #1
}
   d85f0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d85f2:	4620      	mov	r0, r4
   d85f4:	f7ff ffe8 	bl	d85c8 <_ZN6String12changeBufferEj>
   d85f8:	2800      	cmp	r0, #0
   d85fa:	d0f9      	beq.n	d85f0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d85fc:	68a3      	ldr	r3, [r4, #8]
   d85fe:	2b00      	cmp	r3, #0
   d8600:	d1f5      	bne.n	d85ee <_ZN6String7reserveEj+0xe>
   d8602:	6822      	ldr	r2, [r4, #0]
   d8604:	7013      	strb	r3, [r2, #0]
   d8606:	e7f2      	b.n	d85ee <_ZN6String7reserveEj+0xe>

000d8608 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8608:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d860a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d860c:	4611      	mov	r1, r2
   d860e:	9201      	str	r2, [sp, #4]
{
   d8610:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d8612:	f7ff ffe5 	bl	d85e0 <_ZN6String7reserveEj>
   d8616:	9a01      	ldr	r2, [sp, #4]
   d8618:	b928      	cbnz	r0, d8626 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d861a:	4620      	mov	r0, r4
   d861c:	f7ff ffc9 	bl	d85b2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8620:	4620      	mov	r0, r4
   d8622:	b003      	add	sp, #12
   d8624:	bd30      	pop	{r4, r5, pc}
	len = length;
   d8626:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d8628:	4629      	mov	r1, r5
   d862a:	6820      	ldr	r0, [r4, #0]
   d862c:	f004 fb4e 	bl	dcccc <memcpy>
	buffer[len] = 0;
   d8630:	6822      	ldr	r2, [r4, #0]
   d8632:	68a3      	ldr	r3, [r4, #8]
   d8634:	2100      	movs	r1, #0
   d8636:	54d1      	strb	r1, [r2, r3]
	return *this;
   d8638:	e7f2      	b.n	d8620 <_ZN6String4copyEPKcj+0x18>

000d863a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d863a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d863c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d863e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d8642:	4604      	mov	r4, r0
	len = 0;
   d8644:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8646:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d8648:	b141      	cbz	r1, d865c <_ZN6StringC1EPKc+0x22>
   d864a:	4608      	mov	r0, r1
   d864c:	9101      	str	r1, [sp, #4]
   d864e:	f004 fb7f 	bl	dcd50 <strlen>
   d8652:	9901      	ldr	r1, [sp, #4]
   d8654:	4602      	mov	r2, r0
   d8656:	4620      	mov	r0, r4
   d8658:	f7ff ffd6 	bl	d8608 <_ZN6String4copyEPKcj>
}
   d865c:	4620      	mov	r0, r4
   d865e:	b002      	add	sp, #8
   d8660:	bd10      	pop	{r4, pc}

000d8662 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8662:	b538      	push	{r3, r4, r5, lr}
   d8664:	4605      	mov	r5, r0
	if (buffer) {
   d8666:	6800      	ldr	r0, [r0, #0]
{
   d8668:	460c      	mov	r4, r1
	if (buffer) {
   d866a:	b168      	cbz	r0, d8688 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d866c:	686a      	ldr	r2, [r5, #4]
   d866e:	688b      	ldr	r3, [r1, #8]
   d8670:	429a      	cmp	r2, r3
   d8672:	d307      	bcc.n	d8684 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d8674:	6809      	ldr	r1, [r1, #0]
   d8676:	f004 fb63 	bl	dcd40 <strcpy>
			len = rhs.len;
   d867a:	68a3      	ldr	r3, [r4, #8]
   d867c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d867e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d8680:	60a3      	str	r3, [r4, #8]
}
   d8682:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d8684:	f7ff fe54 	bl	d8330 <free>
	buffer = rhs.buffer;
   d8688:	6823      	ldr	r3, [r4, #0]
   d868a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d868c:	6863      	ldr	r3, [r4, #4]
   d868e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d8690:	68a3      	ldr	r3, [r4, #8]
   d8692:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d8694:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d8696:	e9c4 3300 	strd	r3, r3, [r4]
   d869a:	e7f1      	b.n	d8680 <_ZN6String4moveERS_+0x1e>

000d869c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d869c:	4288      	cmp	r0, r1
{
   d869e:	b510      	push	{r4, lr}
   d86a0:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d86a2:	d001      	beq.n	d86a8 <_ZN6StringaSEOS_+0xc>
   d86a4:	f7ff ffdd 	bl	d8662 <_ZN6String4moveERS_>
	return *this;
}
   d86a8:	4620      	mov	r0, r4
   d86aa:	bd10      	pop	{r4, pc}

000d86ac <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d86ac:	b513      	push	{r0, r1, r4, lr}
   d86ae:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d86b0:	b159      	cbz	r1, d86ca <_ZN6StringaSEPKc+0x1e>
   d86b2:	4608      	mov	r0, r1
   d86b4:	9101      	str	r1, [sp, #4]
   d86b6:	f004 fb4b 	bl	dcd50 <strlen>
   d86ba:	9901      	ldr	r1, [sp, #4]
   d86bc:	4602      	mov	r2, r0
   d86be:	4620      	mov	r0, r4
   d86c0:	f7ff ffa2 	bl	d8608 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d86c4:	4620      	mov	r0, r4
   d86c6:	b002      	add	sp, #8
   d86c8:	bd10      	pop	{r4, pc}
	else invalidate();
   d86ca:	f7ff ff72 	bl	d85b2 <_ZN6String10invalidateEv>
   d86ce:	e7f9      	b.n	d86c4 <_ZN6StringaSEPKc+0x18>

000d86d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d86d0:	4802      	ldr	r0, [pc, #8]	; (d86dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d86d2:	2300      	movs	r3, #0
   d86d4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d86d6:	f7ff bc27 	b.w	d7f28 <os_mutex_recursive_create>
   d86da:	bf00      	nop
   d86dc:	2003e5a0 	.word	0x2003e5a0

000d86e0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d86e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d86e2:	4606      	mov	r6, r0
   d86e4:	460d      	mov	r5, r1
  size_t n = 0;
   d86e6:	188f      	adds	r7, r1, r2
   d86e8:	2400      	movs	r4, #0
  while (size--) {
   d86ea:	42bd      	cmp	r5, r7
   d86ec:	d00c      	beq.n	d8708 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d86ee:	6833      	ldr	r3, [r6, #0]
   d86f0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d86f4:	689b      	ldr	r3, [r3, #8]
   d86f6:	4630      	mov	r0, r6
   d86f8:	4798      	blx	r3
     if (chunk>=0)
   d86fa:	1e03      	subs	r3, r0, #0
   d86fc:	db01      	blt.n	d8702 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d86fe:	441c      	add	r4, r3
  while (size--) {
   d8700:	e7f3      	b.n	d86ea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8702:	2c00      	cmp	r4, #0
   d8704:	bf08      	it	eq
   d8706:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d8708:	4620      	mov	r0, r4
   d870a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d870c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d870c:	b513      	push	{r0, r1, r4, lr}
   d870e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d8710:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d8712:	b159      	cbz	r1, d872c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d8714:	9101      	str	r1, [sp, #4]
   d8716:	f004 fb1b 	bl	dcd50 <strlen>
   d871a:	6823      	ldr	r3, [r4, #0]
   d871c:	9901      	ldr	r1, [sp, #4]
   d871e:	68db      	ldr	r3, [r3, #12]
   d8720:	4602      	mov	r2, r0
   d8722:	4620      	mov	r0, r4
    }
   d8724:	b002      	add	sp, #8
   d8726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d872a:	4718      	bx	r3
    }
   d872c:	b002      	add	sp, #8
   d872e:	bd10      	pop	{r4, pc}

000d8730 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d8730:	b508      	push	{r3, lr}
  return write(str);
   d8732:	f7ff ffeb 	bl	d870c <_ZN5Print5writeEPKc>
}
   d8736:	bd08      	pop	{r3, pc}

000d8738 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d8738:	6803      	ldr	r3, [r0, #0]
   d873a:	689b      	ldr	r3, [r3, #8]
   d873c:	4718      	bx	r3

000d873e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d873e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8740:	210d      	movs	r1, #13
{
   d8742:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8744:	f7ff fff8 	bl	d8738 <_ZN5Print5printEc>
  n += print('\n');
   d8748:	210a      	movs	r1, #10
  size_t n = print('\r');
   d874a:	4604      	mov	r4, r0
  n += print('\n');
   d874c:	4628      	mov	r0, r5
   d874e:	f7ff fff3 	bl	d8738 <_ZN5Print5printEc>
  return n;
}
   d8752:	4420      	add	r0, r4
   d8754:	bd38      	pop	{r3, r4, r5, pc}

000d8756 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8756:	b538      	push	{r3, r4, r5, lr}
   d8758:	4605      	mov	r5, r0
  return write(str);
   d875a:	f7ff ffd7 	bl	d870c <_ZN5Print5writeEPKc>
   d875e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d8760:	4628      	mov	r0, r5
   d8762:	f7ff ffec 	bl	d873e <_ZN5Print7printlnEv>
  return n;
}
   d8766:	4420      	add	r0, r4
   d8768:	bd38      	pop	{r3, r4, r5, pc}

000d876a <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d876a:	f7ff bff4 	b.w	d8756 <_ZN5Print7printlnEPKc>

000d876e <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d876e:	b530      	push	{r4, r5, lr}
   d8770:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8772:	2300      	movs	r3, #0
   d8774:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8778:	2a01      	cmp	r2, #1
   d877a:	bf98      	it	ls
   d877c:	220a      	movls	r2, #10
   d877e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d8780:	460d      	mov	r5, r1
   d8782:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d8786:	fb01 5312 	mls	r3, r1, r2, r5
   d878a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d878e:	2b09      	cmp	r3, #9
   d8790:	bf94      	ite	ls
   d8792:	3330      	addls	r3, #48	; 0x30
   d8794:	3337      	addhi	r3, #55	; 0x37
   d8796:	b2db      	uxtb	r3, r3
  } while(n);
   d8798:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d879a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d879e:	d9ef      	bls.n	d8780 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d87a0:	4621      	mov	r1, r4
   d87a2:	f7ff ffb3 	bl	d870c <_ZN5Print5writeEPKc>
}
   d87a6:	b00b      	add	sp, #44	; 0x2c
   d87a8:	bd30      	pop	{r4, r5, pc}

000d87aa <_ZN5Print11printNumberEyh>:
 
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d87aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d87ae:	b093      	sub	sp, #76	; 0x4c
   d87b0:	4619      	mov	r1, r3
   d87b2:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d87b6:	2d01      	cmp	r5, #1
  *str = '\0';
   d87b8:	f04f 0300 	mov.w	r3, #0
  if (base < 2) base = 10;
   d87bc:	bf98      	it	ls
   d87be:	250a      	movls	r5, #10
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d87c0:	4682      	mov	sl, r0
  *str = '\0';
   d87c2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d87c6:	4610      	mov	r0, r2
  if (base < 2) base = 10;
   d87c8:	f10d 0b44 	add.w	fp, sp, #68	; 0x44

  do {
    decltype(n) m = n;
    n /= base;
   d87cc:	fa5f f885 	uxtb.w	r8, r5
   d87d0:	f04f 0900 	mov.w	r9, #0
   d87d4:	4642      	mov	r2, r8
   d87d6:	464b      	mov	r3, r9
   d87d8:	4606      	mov	r6, r0
   d87da:	460f      	mov	r7, r1
   d87dc:	f004 f8f4 	bl	dc9c8 <__aeabi_uldivmod>
    char c = m - base * n;
   d87e0:	fb05 6410 	mls	r4, r5, r0, r6
   d87e4:	f004 04ff 	and.w	r4, r4, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d87e8:	2c09      	cmp	r4, #9
   d87ea:	bf94      	ite	ls
   d87ec:	3430      	addls	r4, #48	; 0x30
   d87ee:	3437      	addhi	r4, #55	; 0x37
  } while(n);
   d87f0:	454f      	cmp	r7, r9
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d87f2:	b2e4      	uxtb	r4, r4
  } while(n);
   d87f4:	bf08      	it	eq
   d87f6:	4546      	cmpeq	r6, r8
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d87f8:	f80b 4d01 	strb.w	r4, [fp, #-1]!
  } while(n);
   d87fc:	d2ea      	bcs.n	d87d4 <_ZN5Print11printNumberEyh+0x2a>

  return write(str);
   d87fe:	4659      	mov	r1, fp
   d8800:	4650      	mov	r0, sl
   d8802:	f7ff ff83 	bl	d870c <_ZN5Print5writeEPKc>
}
   d8806:	b013      	add	sp, #76	; 0x4c
   d8808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d880c <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
   d880c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8810:	ec55 4b10 	vmov	r4, r5, d0
   d8814:	4606      	mov	r6, r0
   d8816:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d8818:	ee10 2a10 	vmov	r2, s0
   d881c:	ee10 0a10 	vmov	r0, s0
   d8820:	462b      	mov	r3, r5
   d8822:	4629      	mov	r1, r5
   d8824:	f003 fec4 	bl	dc5b0 <__aeabi_dcmpun>
   d8828:	b140      	cbz	r0, d883c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d882a:	4953      	ldr	r1, [pc, #332]	; (d8978 <_ZN5Print10printFloatEdh+0x16c>)
   d882c:	4630      	mov	r0, r6
   d882e:	f7ff ff6d 	bl	d870c <_ZN5Print5writeEPKc>
   d8832:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d8834:	4650      	mov	r0, sl
   d8836:	b003      	add	sp, #12
   d8838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d883c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d8840:	4b4e      	ldr	r3, [pc, #312]	; (d897c <_ZN5Print10printFloatEdh+0x170>)
   d8842:	f04f 32ff 	mov.w	r2, #4294967295
   d8846:	4620      	mov	r0, r4
   d8848:	4649      	mov	r1, r9
   d884a:	f003 feb1 	bl	dc5b0 <__aeabi_dcmpun>
   d884e:	b948      	cbnz	r0, d8864 <_ZN5Print10printFloatEdh+0x58>
   d8850:	4b4a      	ldr	r3, [pc, #296]	; (d897c <_ZN5Print10printFloatEdh+0x170>)
   d8852:	f04f 32ff 	mov.w	r2, #4294967295
   d8856:	4620      	mov	r0, r4
   d8858:	4649      	mov	r1, r9
   d885a:	f003 fe8b 	bl	dc574 <__aeabi_dcmple>
   d885e:	b908      	cbnz	r0, d8864 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d8860:	4947      	ldr	r1, [pc, #284]	; (d8980 <_ZN5Print10printFloatEdh+0x174>)
   d8862:	e7e3      	b.n	d882c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d8864:	4b47      	ldr	r3, [pc, #284]	; (d8984 <_ZN5Print10printFloatEdh+0x178>)
   d8866:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d886a:	4620      	mov	r0, r4
   d886c:	4629      	mov	r1, r5
   d886e:	f003 fe95 	bl	dc59c <__aeabi_dcmpgt>
   d8872:	b108      	cbz	r0, d8878 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d8874:	4944      	ldr	r1, [pc, #272]	; (d8988 <_ZN5Print10printFloatEdh+0x17c>)
   d8876:	e7d9      	b.n	d882c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d8878:	4b44      	ldr	r3, [pc, #272]	; (d898c <_ZN5Print10printFloatEdh+0x180>)
   d887a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d887e:	4620      	mov	r0, r4
   d8880:	4629      	mov	r1, r5
   d8882:	f003 fe6d 	bl	dc560 <__aeabi_dcmplt>
   d8886:	2800      	cmp	r0, #0
   d8888:	d1f4      	bne.n	d8874 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d888a:	2200      	movs	r2, #0
   d888c:	2300      	movs	r3, #0
   d888e:	4620      	mov	r0, r4
   d8890:	4629      	mov	r1, r5
   d8892:	f003 fe65 	bl	dc560 <__aeabi_dcmplt>
   d8896:	b1d0      	cbz	r0, d88ce <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d8898:	212d      	movs	r1, #45	; 0x2d
   d889a:	4630      	mov	r0, r6
   d889c:	f7ff ff4c 	bl	d8738 <_ZN5Print5printEc>
     number = -number;
   d88a0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d88a4:	4682      	mov	sl, r0
     number = -number;
   d88a6:	461d      	mov	r5, r3
  double rounding = 0.5;
   d88a8:	4939      	ldr	r1, [pc, #228]	; (d8990 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d88aa:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d8998 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d88ae:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d88b2:	2000      	movs	r0, #0
    rounding /= 10.0;
   d88b4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d88b8:	fa5f f38b 	uxtb.w	r3, fp
   d88bc:	429f      	cmp	r7, r3
   d88be:	d908      	bls.n	d88d2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d88c0:	4642      	mov	r2, r8
   d88c2:	464b      	mov	r3, r9
   d88c4:	f003 fd04 	bl	dc2d0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d88c8:	f10b 0b01 	add.w	fp, fp, #1
   d88cc:	e7f4      	b.n	d88b8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d88ce:	4682      	mov	sl, r0
   d88d0:	e7ea      	b.n	d88a8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d88d2:	4622      	mov	r2, r4
   d88d4:	462b      	mov	r3, r5
   d88d6:	f003 fa1b 	bl	dbd10 <__adddf3>
   d88da:	460d      	mov	r5, r1
   d88dc:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d88de:	f003 fea5 	bl	dc62c <__aeabi_d2uiz>
   d88e2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d88e4:	f003 fb50 	bl	dbf88 <__aeabi_ui2d>
   d88e8:	4602      	mov	r2, r0
   d88ea:	460b      	mov	r3, r1
   d88ec:	4620      	mov	r0, r4
   d88ee:	4629      	mov	r1, r5
   d88f0:	f003 fa0c 	bl	dbd0c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d88f4:	220a      	movs	r2, #10
   d88f6:	4604      	mov	r4, r0
   d88f8:	460d      	mov	r5, r1
   d88fa:	4630      	mov	r0, r6
   d88fc:	4641      	mov	r1, r8
   d88fe:	f7ff ff36 	bl	d876e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d8902:	4482      	add	sl, r0
  if (digits > 0) {
   d8904:	b127      	cbz	r7, d8910 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d8906:	4923      	ldr	r1, [pc, #140]	; (d8994 <_ZN5Print10printFloatEdh+0x188>)
   d8908:	4630      	mov	r0, r6
   d890a:	f7ff feff 	bl	d870c <_ZN5Print5writeEPKc>
    n += print(".");
   d890e:	4482      	add	sl, r0
    remainder *= 10.0;
   d8910:	f8df 9084 	ldr.w	r9, [pc, #132]	; d8998 <_ZN5Print10printFloatEdh+0x18c>
   d8914:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d8918:	3f01      	subs	r7, #1
   d891a:	b2ff      	uxtb	r7, r7
   d891c:	2fff      	cmp	r7, #255	; 0xff
   d891e:	d089      	beq.n	d8834 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d8920:	4642      	mov	r2, r8
   d8922:	464b      	mov	r3, r9
   d8924:	4620      	mov	r0, r4
   d8926:	4629      	mov	r1, r5
   d8928:	f003 fba8 	bl	dc07c <__aeabi_dmul>
   d892c:	4604      	mov	r4, r0
   d892e:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d8930:	f003 fe54 	bl	dc5dc <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d8934:	f1b0 0b00 	subs.w	fp, r0, #0
   d8938:	da1a      	bge.n	d8970 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d893a:	212d      	movs	r1, #45	; 0x2d
   d893c:	4630      	mov	r0, r6
   d893e:	f7ff fefb 	bl	d8738 <_ZN5Print5printEc>
            val = -n;
   d8942:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d8946:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d8948:	220a      	movs	r2, #10
   d894a:	4630      	mov	r0, r6
   d894c:	9301      	str	r3, [sp, #4]
   d894e:	f7ff ff0e 	bl	d876e <_ZN5Print11printNumberEmh>
   d8952:	9b01      	ldr	r3, [sp, #4]
   d8954:	4418      	add	r0, r3
    n += print(toPrint);
   d8956:	4482      	add	sl, r0
    remainder -= toPrint;
   d8958:	4658      	mov	r0, fp
   d895a:	f003 fb25 	bl	dbfa8 <__aeabi_i2d>
   d895e:	4602      	mov	r2, r0
   d8960:	460b      	mov	r3, r1
   d8962:	4620      	mov	r0, r4
   d8964:	4629      	mov	r1, r5
   d8966:	f003 f9d1 	bl	dbd0c <__aeabi_dsub>
   d896a:	4604      	mov	r4, r0
   d896c:	460d      	mov	r5, r1
  while (digits-- > 0)
   d896e:	e7d3      	b.n	d8918 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d8970:	4659      	mov	r1, fp
        size_t t = 0;
   d8972:	2300      	movs	r3, #0
   d8974:	e7e8      	b.n	d8948 <_ZN5Print10printFloatEdh+0x13c>
   d8976:	bf00      	nop
   d8978:	000ddec4 	.word	0x000ddec4
   d897c:	7fefffff 	.word	0x7fefffff
   d8980:	000ddec8 	.word	0x000ddec8
   d8984:	41efffff 	.word	0x41efffff
   d8988:	000ddecc 	.word	0x000ddecc
   d898c:	c1efffff 	.word	0xc1efffff
   d8990:	3fe00000 	.word	0x3fe00000
   d8994:	000dd491 	.word	0x000dd491
   d8998:	40240000 	.word	0x40240000

000d899c <_ZN5Print5printEfi>:
{
   d899c:	b538      	push	{r3, r4, r5, lr}
   d899e:	4604      	mov	r4, r0
   d89a0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d89a4:	b2cd      	uxtb	r5, r1
   d89a6:	f003 fb11 	bl	dbfcc <__aeabi_f2d>
   d89aa:	ec41 0b10 	vmov	d0, r0, r1
   d89ae:	4629      	mov	r1, r5
   d89b0:	4620      	mov	r0, r4
}
   d89b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d89b6:	f7ff bf29 	b.w	d880c <_ZN5Print10printFloatEdh>

000d89ba <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d89ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d89be:	b086      	sub	sp, #24
   d89c0:	af00      	add	r7, sp, #0
   d89c2:	4605      	mov	r5, r0
   d89c4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d89c6:	1d38      	adds	r0, r7, #4
   d89c8:	2114      	movs	r1, #20
{
   d89ca:	4614      	mov	r4, r2
    va_copy(args2, args);
   d89cc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d89ce:	f7ff fcbf 	bl	d8350 <vsnprintf>

    if (n<bufsize)
   d89d2:	2813      	cmp	r0, #19
   d89d4:	d80e      	bhi.n	d89f4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d89d6:	1d39      	adds	r1, r7, #4
   d89d8:	4628      	mov	r0, r5
   d89da:	f7ff fe97 	bl	d870c <_ZN5Print5writeEPKc>
   d89de:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d89e0:	b11e      	cbz	r6, d89ea <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d89e2:	4628      	mov	r0, r5
   d89e4:	f7ff feab 	bl	d873e <_ZN5Print7printlnEv>
   d89e8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d89ea:	4620      	mov	r0, r4
   d89ec:	3718      	adds	r7, #24
   d89ee:	46bd      	mov	sp, r7
   d89f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d89f4:	f100 0308 	add.w	r3, r0, #8
   d89f8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d89fc:	46e8      	mov	r8, sp
        char bigger[n+1];
   d89fe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d8a02:	4622      	mov	r2, r4
   d8a04:	1c41      	adds	r1, r0, #1
   d8a06:	683b      	ldr	r3, [r7, #0]
   d8a08:	4668      	mov	r0, sp
   d8a0a:	f7ff fca1 	bl	d8350 <vsnprintf>
  return write(str);
   d8a0e:	4669      	mov	r1, sp
   d8a10:	4628      	mov	r0, r5
   d8a12:	f7ff fe7b 	bl	d870c <_ZN5Print5writeEPKc>
   d8a16:	4604      	mov	r4, r0
   d8a18:	46c5      	mov	sp, r8
   d8a1a:	e7e1      	b.n	d89e0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d8a1c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8a1c:	4b01      	ldr	r3, [pc, #4]	; (d8a24 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8a1e:	4a02      	ldr	r2, [pc, #8]	; (d8a28 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8a20:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8a22:	4770      	bx	lr
   d8a24:	2003e5a4 	.word	0x2003e5a4
   d8a28:	000dded0 	.word	0x000dded0

000d8a2c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d8a2c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8a2e:	2000      	movs	r0, #0
   d8a30:	f7ff fc66 	bl	d8300 <spark_sync_time_pending>
   d8a34:	b128      	cbz	r0, d8a42 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8a36:	f7ff fc5b 	bl	d82f0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8a3a:	f080 0001 	eor.w	r0, r0, #1
   d8a3e:	b2c0      	uxtb	r0, r0
    }
   d8a40:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8a42:	2001      	movs	r0, #1
   d8a44:	e7fc      	b.n	d8a40 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d8a46 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8a46:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d8a48:	2000      	movs	r0, #0
   d8a4a:	f7ff fa55 	bl	d7ef8 <hal_rtc_time_is_valid>
    if (rtcstate)
   d8a4e:	4604      	mov	r4, r0
   d8a50:	b9a0      	cbnz	r0, d8a7c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8a52:	f7ff fbb1 	bl	d81b8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8a56:	2801      	cmp	r0, #1
   d8a58:	d110      	bne.n	d8a7c <_ZN9TimeClass7isValidEv+0x36>
   d8a5a:	4620      	mov	r0, r4
   d8a5c:	f7ff fbc4 	bl	d81e8 <system_thread_get_state>
   d8a60:	b960      	cbnz	r0, d8a7c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8a62:	f7ff ffe3 	bl	d8a2c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8a66:	b910      	cbnz	r0, d8a6e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d8a68:	f7ff fc3a 	bl	d82e0 <spark_process>
        while (_while() && !_condition()) {
   d8a6c:	e7f9      	b.n	d8a62 <_ZN9TimeClass7isValidEv+0x1c>
   d8a6e:	f7ff ffdd 	bl	d8a2c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d8a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d8a76:	2000      	movs	r0, #0
   d8a78:	f7ff ba3e 	b.w	d7ef8 <hal_rtc_time_is_valid>
}
   d8a7c:	4620      	mov	r0, r4
   d8a7e:	bd10      	pop	{r4, pc}

000d8a80 <_ZN9TimeClass3nowEv>:
{
   d8a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d8a82:	f7ff ffe0 	bl	d8a46 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d8a86:	2210      	movs	r2, #16
   d8a88:	2100      	movs	r1, #0
   d8a8a:	4668      	mov	r0, sp
   d8a8c:	f004 f92c 	bl	dcce8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d8a90:	2100      	movs	r1, #0
   d8a92:	4668      	mov	r0, sp
   d8a94:	f7ff fa38 	bl	d7f08 <hal_rtc_get_time>
}
   d8a98:	9800      	ldr	r0, [sp, #0]
   d8a9a:	b005      	add	sp, #20
   d8a9c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8aa0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8aa0:	4b02      	ldr	r3, [pc, #8]	; (d8aac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8aa2:	681a      	ldr	r2, [r3, #0]
   d8aa4:	4b02      	ldr	r3, [pc, #8]	; (d8ab0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8aa6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d8aa8:	4770      	bx	lr
   d8aaa:	bf00      	nop
   d8aac:	2003e39c 	.word	0x2003e39c
   d8ab0:	2003e5a8 	.word	0x2003e5a8

000d8ab4 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d8ab4:	428a      	cmp	r2, r1
{
   d8ab6:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d8ab8:	d007      	beq.n	d8aca <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d8aba:	9c02      	ldr	r4, [sp, #8]
   d8abc:	1a40      	subs	r0, r0, r1
   d8abe:	1ae4      	subs	r4, r4, r3
   d8ac0:	4360      	muls	r0, r4
   d8ac2:	1a52      	subs	r2, r2, r1
   d8ac4:	fb90 f0f2 	sdiv	r0, r0, r2
   d8ac8:	4418      	add	r0, r3
}
   d8aca:	bd10      	pop	{r4, pc}

000d8acc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8acc:	2100      	movs	r1, #0
   d8ace:	f7ff bb83 	b.w	d81d8 <system_delay_ms>
	...

000d8ad4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d8ad4:	4b01      	ldr	r3, [pc, #4]	; (d8adc <_GLOBAL__sub_I_RGB+0x8>)
   d8ad6:	2200      	movs	r2, #0
   d8ad8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d8ada:	4770      	bx	lr
   d8adc:	2003e5ac 	.word	0x2003e5ac

000d8ae0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8ae0:	4b01      	ldr	r3, [pc, #4]	; (d8ae8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d8ae2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8ae4:	4770      	bx	lr
   d8ae6:	bf00      	nop
   d8ae8:	2003e3a4 	.word	0x2003e3a4

000d8aec <serialEventRun>:
{
   d8aec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8aee:	4b0b      	ldr	r3, [pc, #44]	; (d8b1c <serialEventRun+0x30>)
   d8af0:	b143      	cbz	r3, d8b04 <serialEventRun+0x18>
   d8af2:	f000 f967 	bl	d8dc4 <_Z16_fetch_usbserialv>
   d8af6:	6803      	ldr	r3, [r0, #0]
   d8af8:	691b      	ldr	r3, [r3, #16]
   d8afa:	4798      	blx	r3
   d8afc:	2800      	cmp	r0, #0
   d8afe:	dd01      	ble.n	d8b04 <serialEventRun+0x18>
        serialEvent();
   d8b00:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8b04:	4b06      	ldr	r3, [pc, #24]	; (d8b20 <serialEventRun+0x34>)
   d8b06:	b143      	cbz	r3, d8b1a <serialEventRun+0x2e>
   d8b08:	f000 fa4e 	bl	d8fa8 <_Z22__fetch_global_Serial1v>
   d8b0c:	6803      	ldr	r3, [r0, #0]
   d8b0e:	691b      	ldr	r3, [r3, #16]
   d8b10:	4798      	blx	r3
   d8b12:	2800      	cmp	r0, #0
   d8b14:	dd01      	ble.n	d8b1a <serialEventRun+0x2e>
        serialEvent1();
   d8b16:	f3af 8000 	nop.w
}
   d8b1a:	bd08      	pop	{r3, pc}
	...

000d8b24 <_post_loop>:
{
   d8b24:	b508      	push	{r3, lr}
	serialEventRun();
   d8b26:	f7ff ffe1 	bl	d8aec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8b2a:	f7ff f9c5 	bl	d7eb8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8b2e:	4b01      	ldr	r3, [pc, #4]	; (d8b34 <_post_loop+0x10>)
   d8b30:	6018      	str	r0, [r3, #0]
}
   d8b32:	bd08      	pop	{r3, pc}
   d8b34:	2003e734 	.word	0x2003e734

000d8b38 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8b38:	4805      	ldr	r0, [pc, #20]	; (d8b50 <_Z33system_initialize_user_backup_ramv+0x18>)
   d8b3a:	4a06      	ldr	r2, [pc, #24]	; (d8b54 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d8b3c:	4906      	ldr	r1, [pc, #24]	; (d8b58 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d8b3e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8b40:	1a12      	subs	r2, r2, r0
   d8b42:	f004 f8c3 	bl	dcccc <memcpy>
    __backup_sram_signature = signature;
   d8b46:	4b05      	ldr	r3, [pc, #20]	; (d8b5c <_Z33system_initialize_user_backup_ramv+0x24>)
   d8b48:	4a05      	ldr	r2, [pc, #20]	; (d8b60 <_Z33system_initialize_user_backup_ramv+0x28>)
   d8b4a:	601a      	str	r2, [r3, #0]
}
   d8b4c:	bd08      	pop	{r3, pc}
   d8b4e:	bf00      	nop
   d8b50:	2003f400 	.word	0x2003f400
   d8b54:	2003f404 	.word	0x2003f404
   d8b58:	000de4d8 	.word	0x000de4d8
   d8b5c:	2003f400 	.word	0x2003f400
   d8b60:	9a271c1e 	.word	0x9a271c1e

000d8b64 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8b64:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8b66:	2300      	movs	r3, #0
   d8b68:	9300      	str	r3, [sp, #0]
   d8b6a:	461a      	mov	r2, r3
   d8b6c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8b70:	f7ff fb4c 	bl	d820c <system_ctrl_set_result>
}
   d8b74:	b003      	add	sp, #12
   d8b76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8b7c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8b7c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8b7e:	8843      	ldrh	r3, [r0, #2]
   d8b80:	2b0a      	cmp	r3, #10
   d8b82:	d008      	beq.n	d8b96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8b84:	2b50      	cmp	r3, #80	; 0x50
   d8b86:	d10b      	bne.n	d8ba0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8b88:	4b09      	ldr	r3, [pc, #36]	; (d8bb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8b8a:	681b      	ldr	r3, [r3, #0]
   d8b8c:	b14b      	cbz	r3, d8ba2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d8b8e:	b003      	add	sp, #12
   d8b90:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8b94:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d8b96:	f7ff ffe5 	bl	d8b64 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d8b9a:	b003      	add	sp, #12
   d8b9c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8ba0:	2300      	movs	r3, #0
   d8ba2:	9300      	str	r3, [sp, #0]
   d8ba4:	461a      	mov	r2, r3
   d8ba6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8baa:	f7ff fb2f 	bl	d820c <system_ctrl_set_result>
}
   d8bae:	e7f4      	b.n	d8b9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8bb0:	2003e5c0 	.word	0x2003e5c0

000d8bb4 <module_user_init_hook>:
{
   d8bb4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8bb6:	4812      	ldr	r0, [pc, #72]	; (d8c00 <module_user_init_hook+0x4c>)
   d8bb8:	2100      	movs	r1, #0
   d8bba:	f7ff fbd9 	bl	d8370 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d8bbe:	4b11      	ldr	r3, [pc, #68]	; (d8c04 <module_user_init_hook+0x50>)
   d8bc0:	681a      	ldr	r2, [r3, #0]
   d8bc2:	4b11      	ldr	r3, [pc, #68]	; (d8c08 <module_user_init_hook+0x54>)
   d8bc4:	429a      	cmp	r2, r3
   d8bc6:	4b11      	ldr	r3, [pc, #68]	; (d8c0c <module_user_init_hook+0x58>)
   d8bc8:	bf0c      	ite	eq
   d8bca:	2201      	moveq	r2, #1
   d8bcc:	2200      	movne	r2, #0
   d8bce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8bd0:	d001      	beq.n	d8bd6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d8bd2:	f7ff ffb1 	bl	d8b38 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8bd6:	f7ff f95f 	bl	d7e98 <HAL_RNG_GetRandomNumber>
   d8bda:	4604      	mov	r4, r0
    srand(seed);
   d8bdc:	f004 f88c 	bl	dccf8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8be0:	4b0b      	ldr	r3, [pc, #44]	; (d8c10 <module_user_init_hook+0x5c>)
   d8be2:	b113      	cbz	r3, d8bea <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d8be4:	4620      	mov	r0, r4
   d8be6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8bea:	2100      	movs	r1, #0
   d8bec:	4808      	ldr	r0, [pc, #32]	; (d8c10 <module_user_init_hook+0x5c>)
   d8bee:	f7ff fb8f 	bl	d8310 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8bf6:	4807      	ldr	r0, [pc, #28]	; (d8c14 <module_user_init_hook+0x60>)
   d8bf8:	2100      	movs	r1, #0
   d8bfa:	f7ff bafd 	b.w	d81f8 <system_ctrl_set_app_request_handler>
   d8bfe:	bf00      	nop
   d8c00:	000d8ae1 	.word	0x000d8ae1
   d8c04:	2003f400 	.word	0x2003f400
   d8c08:	9a271c1e 	.word	0x9a271c1e
   d8c0c:	2003e5bc 	.word	0x2003e5bc
   d8c10:	00000000 	.word	0x00000000
   d8c14:	000d8b7d 	.word	0x000d8b7d

000d8c18 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8c18:	4770      	bx	lr

000d8c1a <_ZN9IPAddressD0Ev>:
   d8c1a:	b510      	push	{r4, lr}
   d8c1c:	2118      	movs	r1, #24
   d8c1e:	4604      	mov	r4, r0
   d8c20:	f000 fbfc 	bl	d941c <_ZdlPvj>
   d8c24:	4620      	mov	r0, r4
   d8c26:	bd10      	pop	{r4, pc}

000d8c28 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8c28:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8c2a:	7d03      	ldrb	r3, [r0, #20]
   d8c2c:	2b06      	cmp	r3, #6
{
   d8c2e:	b08d      	sub	sp, #52	; 0x34
   d8c30:	460e      	mov	r6, r1
   d8c32:	f100 0704 	add.w	r7, r0, #4
   d8c36:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8c3a:	d012      	beq.n	d8c62 <_ZNK9IPAddress7printToER5Print+0x3a>
   d8c3c:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8c40:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8c44:	220a      	movs	r2, #10
   d8c46:	4630      	mov	r0, r6
   d8c48:	f7ff fd91 	bl	d876e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8c4c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8c4e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8c50:	d019      	beq.n	d8c86 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8c52:	2c00      	cmp	r4, #0
   d8c54:	d0f4      	beq.n	d8c40 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8c56:	212e      	movs	r1, #46	; 0x2e
   d8c58:	4630      	mov	r0, r6
   d8c5a:	f7ff fd6d 	bl	d8738 <_ZN5Print5printEc>
   d8c5e:	4404      	add	r4, r0
   d8c60:	e7ee      	b.n	d8c40 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8c62:	232f      	movs	r3, #47	; 0x2f
   d8c64:	466a      	mov	r2, sp
   d8c66:	4639      	mov	r1, r7
   d8c68:	200a      	movs	r0, #10
		buf[0] = 0;
   d8c6a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8c6e:	f7ff f963 	bl	d7f38 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8c72:	4668      	mov	r0, sp
   d8c74:	f004 f86c 	bl	dcd50 <strlen>
   d8c78:	6833      	ldr	r3, [r6, #0]
   d8c7a:	4602      	mov	r2, r0
   d8c7c:	68db      	ldr	r3, [r3, #12]
   d8c7e:	4669      	mov	r1, sp
   d8c80:	4630      	mov	r0, r6
   d8c82:	4798      	blx	r3
   d8c84:	4604      	mov	r4, r0
    }
    return n;
}
   d8c86:	4620      	mov	r0, r4
   d8c88:	b00d      	add	sp, #52	; 0x34
   d8c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8c8c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8c8c:	b510      	push	{r4, lr}
   d8c8e:	4b05      	ldr	r3, [pc, #20]	; (d8ca4 <_ZN9IPAddressC1Ev+0x18>)
   d8c90:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8c92:	2211      	movs	r2, #17
   d8c94:	f840 3b04 	str.w	r3, [r0], #4
   d8c98:	2100      	movs	r1, #0
   d8c9a:	f004 f825 	bl	dcce8 <memset>
}
   d8c9e:	4620      	mov	r0, r4
   d8ca0:	bd10      	pop	{r4, pc}
   d8ca2:	bf00      	nop
   d8ca4:	000ddef8 	.word	0x000ddef8

000d8ca8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8ca8:	4603      	mov	r3, r0
   d8caa:	4a07      	ldr	r2, [pc, #28]	; (d8cc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8cac:	b510      	push	{r4, lr}
   d8cae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8cb2:	f101 0210 	add.w	r2, r1, #16
   d8cb6:	f851 4b04 	ldr.w	r4, [r1], #4
   d8cba:	f843 4b04 	str.w	r4, [r3], #4
   d8cbe:	4291      	cmp	r1, r2
   d8cc0:	d1f9      	bne.n	d8cb6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8cc2:	780a      	ldrb	r2, [r1, #0]
   d8cc4:	701a      	strb	r2, [r3, #0]
}
   d8cc6:	bd10      	pop	{r4, pc}
   d8cc8:	000ddef8 	.word	0x000ddef8

000d8ccc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8ccc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8cce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8cd2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8cd6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8cda:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8cde:	2304      	movs	r3, #4
   d8ce0:	6041      	str	r1, [r0, #4]
   d8ce2:	7503      	strb	r3, [r0, #20]
}
   d8ce4:	bd10      	pop	{r4, pc}

000d8ce6 <_ZN9IPAddressaSEPKh>:
{
   d8ce6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8ce8:	78cb      	ldrb	r3, [r1, #3]
   d8cea:	9300      	str	r3, [sp, #0]
   d8cec:	788b      	ldrb	r3, [r1, #2]
   d8cee:	784a      	ldrb	r2, [r1, #1]
   d8cf0:	7809      	ldrb	r1, [r1, #0]
   d8cf2:	f7ff ffeb 	bl	d8ccc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8cf6:	b002      	add	sp, #8
   d8cf8:	bd10      	pop	{r4, pc}

000d8cfa <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8cfa:	7441      	strb	r1, [r0, #17]
}
   d8cfc:	4770      	bx	lr

000d8cfe <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8cfe:	4770      	bx	lr

000d8d00 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8d00:	4770      	bx	lr

000d8d02 <_ZN9USBSerial4readEv>:
{
   d8d02:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8d04:	2100      	movs	r1, #0
   d8d06:	7c00      	ldrb	r0, [r0, #16]
   d8d08:	f7ff fa2e 	bl	d8168 <HAL_USB_USART_Receive_Data>
}
   d8d0c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8d10:	bd08      	pop	{r3, pc}

000d8d12 <_ZN9USBSerial4peekEv>:
{
   d8d12:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8d14:	2101      	movs	r1, #1
   d8d16:	7c00      	ldrb	r0, [r0, #16]
   d8d18:	f7ff fa26 	bl	d8168 <HAL_USB_USART_Receive_Data>
}
   d8d1c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8d20:	bd08      	pop	{r3, pc}

000d8d22 <_ZN9USBSerial17availableForWriteEv>:
{
   d8d22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8d24:	7c00      	ldrb	r0, [r0, #16]
   d8d26:	f7ff fa17 	bl	d8158 <HAL_USB_USART_Available_Data_For_Write>
}
   d8d2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8d2e:	bd08      	pop	{r3, pc}

000d8d30 <_ZN9USBSerial9availableEv>:
{
   d8d30:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8d32:	7c00      	ldrb	r0, [r0, #16]
   d8d34:	f7ff fa08 	bl	d8148 <HAL_USB_USART_Available_Data>
}
   d8d38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8d3c:	bd08      	pop	{r3, pc}

000d8d3e <_ZN9USBSerial5writeEh>:
{
   d8d3e:	b513      	push	{r0, r1, r4, lr}
   d8d40:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8d42:	7c00      	ldrb	r0, [r0, #16]
{
   d8d44:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8d46:	f7ff fa07 	bl	d8158 <HAL_USB_USART_Available_Data_For_Write>
   d8d4a:	2800      	cmp	r0, #0
   d8d4c:	9901      	ldr	r1, [sp, #4]
   d8d4e:	dc01      	bgt.n	d8d54 <_ZN9USBSerial5writeEh+0x16>
   d8d50:	7c60      	ldrb	r0, [r4, #17]
   d8d52:	b120      	cbz	r0, d8d5e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8d54:	7c20      	ldrb	r0, [r4, #16]
   d8d56:	f7ff fa0f 	bl	d8178 <HAL_USB_USART_Send_Data>
   d8d5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d8d5e:	b002      	add	sp, #8
   d8d60:	bd10      	pop	{r4, pc}

000d8d62 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d8d62:	7c00      	ldrb	r0, [r0, #16]
   d8d64:	f7ff ba10 	b.w	d8188 <HAL_USB_USART_Flush_Data>

000d8d68 <_ZN9USBSerialD0Ev>:
   d8d68:	b510      	push	{r4, lr}
   d8d6a:	2114      	movs	r1, #20
   d8d6c:	4604      	mov	r4, r0
   d8d6e:	f000 fb55 	bl	d941c <_ZdlPvj>
   d8d72:	4620      	mov	r0, r4
   d8d74:	bd10      	pop	{r4, pc}
	...

000d8d78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8d78:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8d7e:	4604      	mov	r4, r0
   d8d80:	4608      	mov	r0, r1
   d8d82:	2100      	movs	r1, #0
   d8d84:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8d88:	4b04      	ldr	r3, [pc, #16]	; (d8d9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8d8a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d8d8c:	2301      	movs	r3, #1
  _serial = serial;
   d8d8e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8d90:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d8d92:	4611      	mov	r1, r2
   d8d94:	f7ff f9c8 	bl	d8128 <HAL_USB_USART_Init>
}
   d8d98:	4620      	mov	r0, r4
   d8d9a:	bd10      	pop	{r4, pc}
   d8d9c:	000ddf0c 	.word	0x000ddf0c

000d8da0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8da0:	7c00      	ldrb	r0, [r0, #16]
   d8da2:	2200      	movs	r2, #0
   d8da4:	f7ff b9c8 	b.w	d8138 <HAL_USB_USART_Begin>

000d8da8 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   d8da8:	7c00      	ldrb	r0, [r0, #16]
   d8daa:	f7ff b9f5 	b.w	d8198 <HAL_USB_USART_Is_Enabled>

000d8dae <_ZN9USBSerialcvbEv>:
  return isEnabled();
   d8dae:	f7ff bffb 	b.w	d8da8 <_ZN9USBSerial9isEnabledEv>

000d8db2 <_Z19acquireSerialBufferv>:
{
   d8db2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8db4:	2214      	movs	r2, #20
{
   d8db6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8db8:	2100      	movs	r1, #0
   d8dba:	f003 ff95 	bl	dcce8 <memset>
}
   d8dbe:	4620      	mov	r0, r4
   d8dc0:	bd10      	pop	{r4, pc}
	...

000d8dc4 <_Z16_fetch_usbserialv>:
{
   d8dc4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8dc6:	4c0f      	ldr	r4, [pc, #60]	; (d8e04 <_Z16_fetch_usbserialv+0x40>)
{
   d8dc8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8dca:	a803      	add	r0, sp, #12
   d8dcc:	f7ff fff1 	bl	d8db2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8dd0:	7821      	ldrb	r1, [r4, #0]
   d8dd2:	f3bf 8f5b 	dmb	ish
   d8dd6:	f011 0101 	ands.w	r1, r1, #1
   d8dda:	d10f      	bne.n	d8dfc <_Z16_fetch_usbserialv+0x38>
   d8ddc:	4620      	mov	r0, r4
   d8dde:	9101      	str	r1, [sp, #4]
   d8de0:	f7fb f96a 	bl	d40b8 <__cxa_guard_acquire>
   d8de4:	9901      	ldr	r1, [sp, #4]
   d8de6:	b148      	cbz	r0, d8dfc <_Z16_fetch_usbserialv+0x38>
   d8de8:	aa03      	add	r2, sp, #12
   d8dea:	4807      	ldr	r0, [pc, #28]	; (d8e08 <_Z16_fetch_usbserialv+0x44>)
   d8dec:	f7ff ffc4 	bl	d8d78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8df0:	4620      	mov	r0, r4
   d8df2:	f7fb f966 	bl	d40c2 <__cxa_guard_release>
   d8df6:	4805      	ldr	r0, [pc, #20]	; (d8e0c <_Z16_fetch_usbserialv+0x48>)
   d8df8:	f003 ff62 	bl	dccc0 <atexit>
	return _usbserial;
}
   d8dfc:	4802      	ldr	r0, [pc, #8]	; (d8e08 <_Z16_fetch_usbserialv+0x44>)
   d8dfe:	b008      	add	sp, #32
   d8e00:	bd10      	pop	{r4, pc}
   d8e02:	bf00      	nop
   d8e04:	2003e5c4 	.word	0x2003e5c4
   d8e08:	2003e5c8 	.word	0x2003e5c8
   d8e0c:	000d8cff 	.word	0x000d8cff

000d8e10 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8e10:	4700      	bx	r0
	...

000d8e14 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8e14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8e18:	2400      	movs	r4, #0
{
   d8e1a:	461d      	mov	r5, r3
   d8e1c:	460f      	mov	r7, r1
   d8e1e:	4690      	mov	r8, r2
   d8e20:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d8e22:	f7ff f829 	bl	d7e78 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d8e26:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8e28:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d8e2c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8e30:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8e34:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d8e38:	bfa2      	ittt	ge
   d8e3a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8e3e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d8e42:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8e44:	4907      	ldr	r1, [pc, #28]	; (d8e64 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d8e46:	9400      	str	r4, [sp, #0]
   d8e48:	4643      	mov	r3, r8
   d8e4a:	463a      	mov	r2, r7
   d8e4c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8e4e:	bfa8      	it	ge
   d8e50:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8e54:	f7ff f808 	bl	d7e68 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8e58:	fab0 f080 	clz	r0, r0
   d8e5c:	0940      	lsrs	r0, r0, #5
   d8e5e:	b004      	add	sp, #16
   d8e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8e64:	000d8e11 	.word	0x000d8e11

000d8e68 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8e68:	2200      	movs	r2, #0
   d8e6a:	6840      	ldr	r0, [r0, #4]
   d8e6c:	4611      	mov	r1, r2
   d8e6e:	f7ff b9ef 	b.w	d8250 <network_ready>

000d8e72 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d8e72:	2200      	movs	r2, #0
   d8e74:	6840      	ldr	r0, [r0, #4]
   d8e76:	4611      	mov	r1, r2
   d8e78:	f7ff ba0a 	b.w	d8290 <network_listening>

000d8e7c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8e7c:	2200      	movs	r2, #0
   d8e7e:	6840      	ldr	r0, [r0, #4]
   d8e80:	4611      	mov	r1, r2
   d8e82:	f7ff ba15 	b.w	d82b0 <network_get_listen_timeout>

000d8e86 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8e86:	6840      	ldr	r0, [r0, #4]
   d8e88:	2200      	movs	r2, #0
   d8e8a:	f7ff ba09 	b.w	d82a0 <network_set_listen_timeout>

000d8e8e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8e8e:	6840      	ldr	r0, [r0, #4]
   d8e90:	2200      	movs	r2, #0
   d8e92:	f081 0101 	eor.w	r1, r1, #1
   d8e96:	f7ff b9f3 	b.w	d8280 <network_listen>

000d8e9a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8e9a:	2300      	movs	r3, #0
   d8e9c:	6840      	ldr	r0, [r0, #4]
   d8e9e:	461a      	mov	r2, r3
   d8ea0:	4619      	mov	r1, r3
   d8ea2:	f7ff b9e5 	b.w	d8270 <network_off>

000d8ea6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8ea6:	2300      	movs	r3, #0
   d8ea8:	6840      	ldr	r0, [r0, #4]
   d8eaa:	461a      	mov	r2, r3
   d8eac:	4619      	mov	r1, r3
   d8eae:	f7ff b9d7 	b.w	d8260 <network_on>

000d8eb2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8eb2:	2200      	movs	r2, #0
   d8eb4:	6840      	ldr	r0, [r0, #4]
   d8eb6:	4611      	mov	r1, r2
   d8eb8:	f7ff b9ba 	b.w	d8230 <network_connecting>

000d8ebc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8ebc:	6840      	ldr	r0, [r0, #4]
   d8ebe:	2200      	movs	r2, #0
   d8ec0:	2102      	movs	r1, #2
   d8ec2:	f7ff b9bd 	b.w	d8240 <network_disconnect>

000d8ec6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8ec6:	2300      	movs	r3, #0
   d8ec8:	6840      	ldr	r0, [r0, #4]
   d8eca:	461a      	mov	r2, r3
   d8ecc:	f7ff b9a8 	b.w	d8220 <network_connect>

000d8ed0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8ed0:	4b08      	ldr	r3, [pc, #32]	; (d8ef4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8ed2:	b510      	push	{r4, lr}
   d8ed4:	2428      	movs	r4, #40	; 0x28
   d8ed6:	4622      	mov	r2, r4
   d8ed8:	4618      	mov	r0, r3
   d8eda:	2100      	movs	r1, #0
   d8edc:	f003 ff04 	bl	dcce8 <memset>
   d8ee0:	4b05      	ldr	r3, [pc, #20]	; (d8ef8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d8ee2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d8ee4:	f04f 32ff 	mov.w	r2, #4294967295
   d8ee8:	6042      	str	r2, [r0, #4]
   d8eea:	2204      	movs	r2, #4
   d8eec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8eee:	4a03      	ldr	r2, [pc, #12]	; (d8efc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8ef0:	601a      	str	r2, [r3, #0]
   d8ef2:	bd10      	pop	{r4, pc}
   d8ef4:	2003e5e4 	.word	0x2003e5e4
   d8ef8:	2003e5dc 	.word	0x2003e5dc
   d8efc:	000ddf3c 	.word	0x000ddf3c

000d8f00 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d8f00:	4770      	bx	lr

000d8f02 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8f02:	7441      	strb	r1, [r0, #17]
}
   d8f04:	4770      	bx	lr

000d8f06 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8f06:	4770      	bx	lr

000d8f08 <_ZN11USARTSerial17availableForWriteEv>:
{
   d8f08:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8f0a:	7c00      	ldrb	r0, [r0, #16]
   d8f0c:	f7ff f854 	bl	d7fb8 <hal_usart_available_data_for_write>
}
   d8f10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8f14:	bd08      	pop	{r3, pc}

000d8f16 <_ZN11USARTSerial9availableEv>:
{
   d8f16:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d8f18:	7c00      	ldrb	r0, [r0, #16]
   d8f1a:	f7ff f825 	bl	d7f68 <hal_usart_available>
}
   d8f1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8f22:	bd08      	pop	{r3, pc}

000d8f24 <_ZN11USARTSerial4peekEv>:
{
   d8f24:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d8f26:	7c00      	ldrb	r0, [r0, #16]
   d8f28:	f7ff f82e 	bl	d7f88 <hal_usart_peek>
}
   d8f2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8f30:	bd08      	pop	{r3, pc}

000d8f32 <_ZN11USARTSerial4readEv>:
{
   d8f32:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d8f34:	7c00      	ldrb	r0, [r0, #16]
   d8f36:	f7ff f81f 	bl	d7f78 <hal_usart_read>
}
   d8f3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8f3e:	bd08      	pop	{r3, pc}

000d8f40 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d8f40:	7c00      	ldrb	r0, [r0, #16]
   d8f42:	f7ff b829 	b.w	d7f98 <hal_usart_flush>

000d8f46 <_ZN11USARTSerial5writeEh>:
{
   d8f46:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8f48:	7c45      	ldrb	r5, [r0, #17]
{
   d8f4a:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8f4c:	b12d      	cbz	r5, d8f5a <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d8f4e:	7c20      	ldrb	r0, [r4, #16]
}
   d8f50:	b003      	add	sp, #12
   d8f52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d8f56:	f7fe bfff 	b.w	d7f58 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8f5a:	7c00      	ldrb	r0, [r0, #16]
   d8f5c:	9101      	str	r1, [sp, #4]
   d8f5e:	f7ff f82b 	bl	d7fb8 <hal_usart_available_data_for_write>
   d8f62:	2800      	cmp	r0, #0
   d8f64:	9901      	ldr	r1, [sp, #4]
   d8f66:	dcf2      	bgt.n	d8f4e <_ZN11USARTSerial5writeEh+0x8>
}
   d8f68:	4628      	mov	r0, r5
   d8f6a:	b003      	add	sp, #12
   d8f6c:	bd30      	pop	{r4, r5, pc}

000d8f6e <_ZN11USARTSerialD0Ev>:
   d8f6e:	b510      	push	{r4, lr}
   d8f70:	2114      	movs	r1, #20
   d8f72:	4604      	mov	r4, r0
   d8f74:	f000 fa52 	bl	d941c <_ZdlPvj>
   d8f78:	4620      	mov	r0, r4
   d8f7a:	bd10      	pop	{r4, pc}

000d8f7c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8f7c:	b510      	push	{r4, lr}
   d8f7e:	f04f 0c00 	mov.w	ip, #0
   d8f82:	4604      	mov	r4, r0
   d8f84:	4608      	mov	r0, r1
   d8f86:	4611      	mov	r1, r2
   d8f88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8f8c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8f90:	4a04      	ldr	r2, [pc, #16]	; (d8fa4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d8f92:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d8f94:	2201      	movs	r2, #1
  _serial = serial;
   d8f96:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8f98:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d8f9a:	461a      	mov	r2, r3
   d8f9c:	f7fe ffd4 	bl	d7f48 <hal_usart_init>
}
   d8fa0:	4620      	mov	r0, r4
   d8fa2:	bd10      	pop	{r4, pc}
   d8fa4:	000ddf78 	.word	0x000ddf78

000d8fa8 <_Z22__fetch_global_Serial1v>:
{
   d8fa8:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8faa:	4c0d      	ldr	r4, [pc, #52]	; (d8fe0 <_Z22__fetch_global_Serial1v+0x38>)
   d8fac:	7821      	ldrb	r1, [r4, #0]
   d8fae:	f3bf 8f5b 	dmb	ish
   d8fb2:	f011 0101 	ands.w	r1, r1, #1
   d8fb6:	d110      	bne.n	d8fda <_Z22__fetch_global_Serial1v+0x32>
   d8fb8:	4620      	mov	r0, r4
   d8fba:	9101      	str	r1, [sp, #4]
   d8fbc:	f7fb f87c 	bl	d40b8 <__cxa_guard_acquire>
   d8fc0:	9901      	ldr	r1, [sp, #4]
   d8fc2:	b150      	cbz	r0, d8fda <_Z22__fetch_global_Serial1v+0x32>
   d8fc4:	4b07      	ldr	r3, [pc, #28]	; (d8fe4 <_Z22__fetch_global_Serial1v+0x3c>)
   d8fc6:	4a08      	ldr	r2, [pc, #32]	; (d8fe8 <_Z22__fetch_global_Serial1v+0x40>)
   d8fc8:	4808      	ldr	r0, [pc, #32]	; (d8fec <_Z22__fetch_global_Serial1v+0x44>)
   d8fca:	f7ff ffd7 	bl	d8f7c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d8fce:	4620      	mov	r0, r4
   d8fd0:	f7fb f877 	bl	d40c2 <__cxa_guard_release>
   d8fd4:	4806      	ldr	r0, [pc, #24]	; (d8ff0 <_Z22__fetch_global_Serial1v+0x48>)
   d8fd6:	f003 fe73 	bl	dccc0 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8fda:	4804      	ldr	r0, [pc, #16]	; (d8fec <_Z22__fetch_global_Serial1v+0x44>)
   d8fdc:	b002      	add	sp, #8
   d8fde:	bd10      	pop	{r4, pc}
   d8fe0:	2003e60c 	.word	0x2003e60c
   d8fe4:	2003e694 	.word	0x2003e694
   d8fe8:	2003e610 	.word	0x2003e610
   d8fec:	2003e718 	.word	0x2003e718
   d8ff0:	000d8f07 	.word	0x000d8f07

000d8ff4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8ff4:	4770      	bx	lr

000d8ff6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8ff8:	4606      	mov	r6, r0
   d8ffa:	4615      	mov	r5, r2
   d8ffc:	460c      	mov	r4, r1
   d8ffe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9000:	42bc      	cmp	r4, r7
   d9002:	d006      	beq.n	d9012 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9004:	6833      	ldr	r3, [r6, #0]
   d9006:	f814 1b01 	ldrb.w	r1, [r4], #1
   d900a:	689b      	ldr	r3, [r3, #8]
   d900c:	4630      	mov	r0, r6
   d900e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d9010:	e7f6      	b.n	d9000 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d9012:	4628      	mov	r0, r5
   d9014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9016 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d9016:	7c00      	ldrb	r0, [r0, #16]
   d9018:	2200      	movs	r2, #0
   d901a:	f7fe bff5 	b.w	d8008 <hal_i2c_write>

000d901e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d901e:	7c00      	ldrb	r0, [r0, #16]
   d9020:	2100      	movs	r1, #0
   d9022:	f7fe bff9 	b.w	d8018 <hal_i2c_available>

000d9026 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d9026:	7c00      	ldrb	r0, [r0, #16]
   d9028:	2100      	movs	r1, #0
   d902a:	f7fe bffd 	b.w	d8028 <hal_i2c_read>

000d902e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d902e:	7c00      	ldrb	r0, [r0, #16]
   d9030:	2100      	movs	r1, #0
   d9032:	f7ff b801 	b.w	d8038 <hal_i2c_peek>

000d9036 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d9036:	7c00      	ldrb	r0, [r0, #16]
   d9038:	2100      	movs	r1, #0
   d903a:	f7ff b805 	b.w	d8048 <hal_i2c_flush>

000d903e <_ZN7TwoWireD0Ev>:
   d903e:	b510      	push	{r4, lr}
   d9040:	2114      	movs	r1, #20
   d9042:	4604      	mov	r4, r0
   d9044:	f000 f9ea 	bl	d941c <_ZdlPvj>
   d9048:	4620      	mov	r0, r4
   d904a:	bd10      	pop	{r4, pc}

000d904c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d904c:	b510      	push	{r4, lr}
   d904e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9052:	4604      	mov	r4, r0
   d9054:	4608      	mov	r0, r1
   d9056:	2100      	movs	r1, #0
   d9058:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d905c:	4b03      	ldr	r3, [pc, #12]	; (d906c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d905e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d9060:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d9062:	4611      	mov	r1, r2
   d9064:	f7ff f800 	bl	d8068 <hal_i2c_init>
}
   d9068:	4620      	mov	r0, r4
   d906a:	bd10      	pop	{r4, pc}
   d906c:	000ddfa8 	.word	0x000ddfa8

000d9070 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d9070:	7c00      	ldrb	r0, [r0, #16]
   d9072:	2200      	movs	r2, #0
   d9074:	f7fe bfa8 	b.w	d7fc8 <hal_i2c_set_speed>

000d9078 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d9078:	2300      	movs	r3, #0
   d907a:	7c00      	ldrb	r0, [r0, #16]
   d907c:	461a      	mov	r2, r3
   d907e:	4619      	mov	r1, r3
   d9080:	f7fe bfaa 	b.w	d7fd8 <hal_i2c_begin>

000d9084 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d9084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d9086:	2200      	movs	r2, #0
   d9088:	2314      	movs	r3, #20
   d908a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d908e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d9092:	780b      	ldrb	r3, [r1, #0]
   d9094:	f88d 3008 	strb.w	r3, [sp, #8]
   d9098:	684b      	ldr	r3, [r1, #4]
   d909a:	9303      	str	r3, [sp, #12]
   d909c:	68cb      	ldr	r3, [r1, #12]
   d909e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d90a0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d90a2:	7a0b      	ldrb	r3, [r1, #8]
   d90a4:	9305      	str	r3, [sp, #20]
   d90a6:	a901      	add	r1, sp, #4
   d90a8:	f7fe ffe6 	bl	d8078 <hal_i2c_request_ex>
}
   d90ac:	b007      	add	sp, #28
   d90ae:	f85d fb04 	ldr.w	pc, [sp], #4

000d90b2 <_ZN7TwoWire11requestFromEhjh>:
{
   d90b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d90b4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d90b6:	f88d 1000 	strb.w	r1, [sp]
   d90ba:	f04f 0164 	mov.w	r1, #100	; 0x64
   d90be:	9103      	str	r1, [sp, #12]
   d90c0:	bf18      	it	ne
   d90c2:	2301      	movne	r3, #1
   d90c4:	4669      	mov	r1, sp
    size_ = size;
   d90c6:	9201      	str	r2, [sp, #4]
   d90c8:	f88d 3008 	strb.w	r3, [sp, #8]
   d90cc:	f7ff ffda 	bl	d9084 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d90d0:	b005      	add	sp, #20
   d90d2:	f85d fb04 	ldr.w	pc, [sp], #4

000d90d6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d90d6:	2301      	movs	r3, #1
   d90d8:	f7ff bfeb 	b.w	d90b2 <_ZN7TwoWire11requestFromEhjh>

000d90dc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d90dc:	7c00      	ldrb	r0, [r0, #16]
   d90de:	2200      	movs	r2, #0
   d90e0:	f7fe bf82 	b.w	d7fe8 <hal_i2c_begin_transmission>

000d90e4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d90e4:	7c00      	ldrb	r0, [r0, #16]
   d90e6:	2200      	movs	r2, #0
   d90e8:	f7fe bf86 	b.w	d7ff8 <hal_i2c_end_transmission>

000d90ec <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d90ec:	2101      	movs	r1, #1
   d90ee:	f7ff bff9 	b.w	d90e4 <_ZN7TwoWire15endTransmissionEh>

000d90f2 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d90f2:	2300      	movs	r3, #0
   d90f4:	6840      	ldr	r0, [r0, #4]
   d90f6:	461a      	mov	r2, r3
   d90f8:	f7ff b892 	b.w	d8220 <network_connect>

000d90fc <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d90fc:	6840      	ldr	r0, [r0, #4]
   d90fe:	2200      	movs	r2, #0
   d9100:	2102      	movs	r1, #2
   d9102:	f7ff b89d 	b.w	d8240 <network_disconnect>

000d9106 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9106:	2200      	movs	r2, #0
   d9108:	6840      	ldr	r0, [r0, #4]
   d910a:	4611      	mov	r1, r2
   d910c:	f7ff b890 	b.w	d8230 <network_connecting>

000d9110 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9110:	2200      	movs	r2, #0
   d9112:	6840      	ldr	r0, [r0, #4]
   d9114:	4611      	mov	r1, r2
   d9116:	f7ff b89b 	b.w	d8250 <network_ready>

000d911a <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d911a:	2300      	movs	r3, #0
   d911c:	6840      	ldr	r0, [r0, #4]
   d911e:	461a      	mov	r2, r3
   d9120:	4619      	mov	r1, r3
   d9122:	f7ff b89d 	b.w	d8260 <network_on>

000d9126 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9126:	2300      	movs	r3, #0
   d9128:	6840      	ldr	r0, [r0, #4]
   d912a:	461a      	mov	r2, r3
   d912c:	4619      	mov	r1, r3
   d912e:	f7ff b89f 	b.w	d8270 <network_off>

000d9132 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9132:	6840      	ldr	r0, [r0, #4]
   d9134:	2100      	movs	r1, #0
   d9136:	f7ff b8c3 	b.w	d82c0 <network_is_on>

000d913a <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d913a:	6840      	ldr	r0, [r0, #4]
   d913c:	2100      	movs	r1, #0
   d913e:	f7ff b8c7 	b.w	d82d0 <network_is_off>

000d9142 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9142:	6840      	ldr	r0, [r0, #4]
   d9144:	2200      	movs	r2, #0
   d9146:	f081 0101 	eor.w	r1, r1, #1
   d914a:	f7ff b899 	b.w	d8280 <network_listen>

000d914e <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d914e:	6840      	ldr	r0, [r0, #4]
   d9150:	2200      	movs	r2, #0
   d9152:	f7ff b8a5 	b.w	d82a0 <network_set_listen_timeout>

000d9156 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9156:	2200      	movs	r2, #0
   d9158:	6840      	ldr	r0, [r0, #4]
   d915a:	4611      	mov	r1, r2
   d915c:	f7ff b8a8 	b.w	d82b0 <network_get_listen_timeout>

000d9160 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9160:	2200      	movs	r2, #0
   d9162:	6840      	ldr	r0, [r0, #4]
   d9164:	4611      	mov	r1, r2
   d9166:	f7ff b893 	b.w	d8290 <network_listening>

000d916a <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d916a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d916e:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9170:	b095      	sub	sp, #84	; 0x54
   d9172:	4616      	mov	r6, r2
   d9174:	460d      	mov	r5, r1
   d9176:	4607      	mov	r7, r0
    IPAddress addr;
   d9178:	f7ff fd88 	bl	d8c8c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d917c:	4621      	mov	r1, r4
   d917e:	2218      	movs	r2, #24
   d9180:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9182:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9184:	f003 fdb0 	bl	dcce8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9188:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d918a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d918e:	4621      	mov	r1, r4
   d9190:	466b      	mov	r3, sp
   d9192:	aa0c      	add	r2, sp, #48	; 0x30
   d9194:	4630      	mov	r0, r6
   d9196:	f7fe fe37 	bl	d7e08 <netdb_getaddrinfo>
    if (!r) {
   d919a:	4604      	mov	r4, r0
   d919c:	2800      	cmp	r0, #0
   d919e:	d146      	bne.n	d922e <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d91a0:	4602      	mov	r2, r0
   d91a2:	2101      	movs	r1, #1
   d91a4:	6868      	ldr	r0, [r5, #4]
   d91a6:	f7ff f853 	bl	d8250 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d91aa:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d91ac:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d91ae:	4622      	mov	r2, r4
   d91b0:	6868      	ldr	r0, [r5, #4]
   d91b2:	f7ff f84d 	bl	d8250 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d91b6:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d91b8:	4681      	mov	r9, r0
        bool ok = false;
   d91ba:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d91bc:	2e00      	cmp	r6, #0
   d91be:	d036      	beq.n	d922e <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d91c0:	2900      	cmp	r1, #0
   d91c2:	d134      	bne.n	d922e <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d91c4:	6873      	ldr	r3, [r6, #4]
   d91c6:	2b02      	cmp	r3, #2
   d91c8:	d003      	beq.n	d91d2 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d91ca:	2b0a      	cmp	r3, #10
   d91cc:	d00b      	beq.n	d91e6 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d91ce:	69f6      	ldr	r6, [r6, #28]
   d91d0:	e7f4      	b.n	d91bc <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d91d2:	f1b8 0f00 	cmp.w	r8, #0
   d91d6:	d004      	beq.n	d91e2 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d91d8:	6971      	ldr	r1, [r6, #20]
   d91da:	4638      	mov	r0, r7
   d91dc:	3104      	adds	r1, #4
   d91de:	f7ff fd82 	bl	d8ce6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d91e2:	4641      	mov	r1, r8
   d91e4:	e7f3      	b.n	d91ce <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d91e6:	f1b9 0f00 	cmp.w	r9, #0
   d91ea:	d101      	bne.n	d91f0 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d91ec:	4649      	mov	r1, r9
   d91ee:	e7ee      	b.n	d91ce <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d91f0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d91f2:	2210      	movs	r2, #16
   d91f4:	a801      	add	r0, sp, #4
   d91f6:	f003 fd77 	bl	dcce8 <memset>
                    a.v = 6;
   d91fa:	2306      	movs	r3, #6
   d91fc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9200:	ad01      	add	r5, sp, #4
   d9202:	f104 0308 	add.w	r3, r4, #8
   d9206:	3418      	adds	r4, #24
   d9208:	6818      	ldr	r0, [r3, #0]
   d920a:	6859      	ldr	r1, [r3, #4]
   d920c:	462a      	mov	r2, r5
   d920e:	c203      	stmia	r2!, {r0, r1}
   d9210:	3308      	adds	r3, #8
   d9212:	42a3      	cmp	r3, r4
   d9214:	4615      	mov	r5, r2
   d9216:	d1f7      	bne.n	d9208 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d9218:	a901      	add	r1, sp, #4
   d921a:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d921c:	ad07      	add	r5, sp, #28
   d921e:	f7ff fd43 	bl	d8ca8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9224:	1d3c      	adds	r4, r7, #4
   d9226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9228:	682b      	ldr	r3, [r5, #0]
   d922a:	7023      	strb	r3, [r4, #0]
   d922c:	e7de      	b.n	d91ec <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d922e:	9800      	ldr	r0, [sp, #0]
   d9230:	f7fe fde2 	bl	d7df8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9234:	4638      	mov	r0, r7
   d9236:	b015      	add	sp, #84	; 0x54
   d9238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d923c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d923c:	4b02      	ldr	r3, [pc, #8]	; (d9248 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d923e:	4a03      	ldr	r2, [pc, #12]	; (d924c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9240:	601a      	str	r2, [r3, #0]
   d9242:	2200      	movs	r2, #0
   d9244:	605a      	str	r2, [r3, #4]

} // spark
   d9246:	4770      	bx	lr
   d9248:	2003e72c 	.word	0x2003e72c
   d924c:	000ddfd0 	.word	0x000ddfd0

000d9250 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9250:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9252:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9254:	d902      	bls.n	d925c <pinAvailable+0xc>
    return false;
   d9256:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9258:	b002      	add	sp, #8
   d925a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d925c:	f1a0 030b 	sub.w	r3, r0, #11
   d9260:	2b02      	cmp	r3, #2
   d9262:	d81a      	bhi.n	d929a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9264:	4c17      	ldr	r4, [pc, #92]	; (d92c4 <pinAvailable+0x74>)
   d9266:	7821      	ldrb	r1, [r4, #0]
   d9268:	f3bf 8f5b 	dmb	ish
   d926c:	f011 0101 	ands.w	r1, r1, #1
   d9270:	d10b      	bne.n	d928a <pinAvailable+0x3a>
   d9272:	4620      	mov	r0, r4
   d9274:	9101      	str	r1, [sp, #4]
   d9276:	f7fa ff1f 	bl	d40b8 <__cxa_guard_acquire>
   d927a:	9901      	ldr	r1, [sp, #4]
   d927c:	b128      	cbz	r0, d928a <pinAvailable+0x3a>
   d927e:	4812      	ldr	r0, [pc, #72]	; (d92c8 <pinAvailable+0x78>)
   d9280:	f7ff f8c2 	bl	d8408 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9284:	4620      	mov	r0, r4
   d9286:	f7fa ff1c 	bl	d40c2 <__cxa_guard_release>
   d928a:	4b0f      	ldr	r3, [pc, #60]	; (d92c8 <pinAvailable+0x78>)
   d928c:	7818      	ldrb	r0, [r3, #0]
   d928e:	f7fe ff13 	bl	d80b8 <hal_spi_is_enabled>
   d9292:	2800      	cmp	r0, #0
   d9294:	d1df      	bne.n	d9256 <pinAvailable+0x6>
  return true; // 'pin' is available
   d9296:	2001      	movs	r0, #1
   d9298:	e7de      	b.n	d9258 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d929a:	2801      	cmp	r0, #1
   d929c:	d809      	bhi.n	d92b2 <pinAvailable+0x62>
   d929e:	f000 f899 	bl	d93d4 <_Z19__fetch_global_Wirev>
   d92a2:	2100      	movs	r1, #0
   d92a4:	7c00      	ldrb	r0, [r0, #16]
   d92a6:	f7fe fed7 	bl	d8058 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d92aa:	f080 0001 	eor.w	r0, r0, #1
   d92ae:	b2c0      	uxtb	r0, r0
   d92b0:	e7d2      	b.n	d9258 <pinAvailable+0x8>
   d92b2:	3809      	subs	r0, #9
   d92b4:	2801      	cmp	r0, #1
   d92b6:	d8ee      	bhi.n	d9296 <pinAvailable+0x46>
   d92b8:	f7ff fe76 	bl	d8fa8 <_Z22__fetch_global_Serial1v>
   d92bc:	7c00      	ldrb	r0, [r0, #16]
   d92be:	f7fe fe73 	bl	d7fa8 <hal_usart_is_enabled>
   d92c2:	e7f2      	b.n	d92aa <pinAvailable+0x5a>
   d92c4:	2003e57c 	.word	0x2003e57c
   d92c8:	2003e580 	.word	0x2003e580

000d92cc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d92cc:	2823      	cmp	r0, #35	; 0x23
{
   d92ce:	b538      	push	{r3, r4, r5, lr}
   d92d0:	4604      	mov	r4, r0
   d92d2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d92d4:	d80a      	bhi.n	d92ec <pinMode+0x20>
   d92d6:	29ff      	cmp	r1, #255	; 0xff
   d92d8:	d008      	beq.n	d92ec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d92da:	f7ff ffb9 	bl	d9250 <pinAvailable>
   d92de:	b128      	cbz	r0, d92ec <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d92e0:	4629      	mov	r1, r5
   d92e2:	4620      	mov	r0, r4
}
   d92e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d92e8:	f7fe bd9e 	b.w	d7e28 <HAL_Pin_Mode>
}
   d92ec:	bd38      	pop	{r3, r4, r5, pc}

000d92ee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d92ee:	b538      	push	{r3, r4, r5, lr}
   d92f0:	4604      	mov	r4, r0
   d92f2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d92f4:	f7fe fda0 	bl	d7e38 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d92f8:	28ff      	cmp	r0, #255	; 0xff
   d92fa:	d010      	beq.n	d931e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d92fc:	2806      	cmp	r0, #6
   d92fe:	d804      	bhi.n	d930a <digitalWrite+0x1c>
   d9300:	234d      	movs	r3, #77	; 0x4d
   d9302:	fa23 f000 	lsr.w	r0, r3, r0
   d9306:	07c3      	lsls	r3, r0, #31
   d9308:	d409      	bmi.n	d931e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d930a:	4620      	mov	r0, r4
   d930c:	f7ff ffa0 	bl	d9250 <pinAvailable>
   d9310:	b128      	cbz	r0, d931e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9312:	4629      	mov	r1, r5
   d9314:	4620      	mov	r0, r4
}
   d9316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d931a:	f7fe bd95 	b.w	d7e48 <HAL_GPIO_Write>
}
   d931e:	bd38      	pop	{r3, r4, r5, pc}

000d9320 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9320:	b510      	push	{r4, lr}
   d9322:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9324:	f7fe fd88 	bl	d7e38 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d9328:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d932a:	b2db      	uxtb	r3, r3
   d932c:	2b01      	cmp	r3, #1
   d932e:	d908      	bls.n	d9342 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9330:	4620      	mov	r0, r4
   d9332:	f7ff ff8d 	bl	d9250 <pinAvailable>
   d9336:	b120      	cbz	r0, d9342 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9338:	4620      	mov	r0, r4
}
   d933a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d933e:	f7fe bd8b 	b.w	d7e58 <HAL_GPIO_Read>
}
   d9342:	2000      	movs	r0, #0
   d9344:	bd10      	pop	{r4, pc}

000d9346 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d9346:	280d      	cmp	r0, #13
{
   d9348:	b510      	push	{r4, lr}
   d934a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d934c:	bf9c      	itt	ls
   d934e:	340e      	addls	r4, #14
   d9350:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9352:	4620      	mov	r0, r4
   d9354:	f7ff ff7c 	bl	d9250 <pinAvailable>
   d9358:	b150      	cbz	r0, d9370 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d935a:	2103      	movs	r1, #3
   d935c:	4620      	mov	r0, r4
   d935e:	f7fe fd5b 	bl	d7e18 <HAL_Validate_Pin_Function>
   d9362:	2803      	cmp	r0, #3
   d9364:	d104      	bne.n	d9370 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d9366:	4620      	mov	r0, r4
}
   d9368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d936c:	f7fe bd8c 	b.w	d7e88 <hal_adc_read>
}
   d9370:	2000      	movs	r0, #0
   d9372:	bd10      	pop	{r4, pc}

000d9374 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d9374:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d9376:	4c08      	ldr	r4, [pc, #32]	; (d9398 <_Z21__fetch_global_EEPROMv+0x24>)
   d9378:	7823      	ldrb	r3, [r4, #0]
   d937a:	f3bf 8f5b 	dmb	ish
   d937e:	07db      	lsls	r3, r3, #31
   d9380:	d408      	bmi.n	d9394 <_Z21__fetch_global_EEPROMv+0x20>
   d9382:	4620      	mov	r0, r4
   d9384:	f7fa fe98 	bl	d40b8 <__cxa_guard_acquire>
   d9388:	b120      	cbz	r0, d9394 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d938a:	f7fe fd9d 	bl	d7ec8 <HAL_EEPROM_Init>
   d938e:	4620      	mov	r0, r4
   d9390:	f7fa fe97 	bl	d40c2 <__cxa_guard_release>
	return eeprom;
}
   d9394:	4801      	ldr	r0, [pc, #4]	; (d939c <_Z21__fetch_global_EEPROMv+0x28>)
   d9396:	bd10      	pop	{r4, pc}
   d9398:	2003e738 	.word	0x2003e738
   d939c:	2003e73c 	.word	0x2003e73c

000d93a0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d93a0:	4770      	bx	lr
	...

000d93a4 <_Z17acquireWireBufferv>:
{
   d93a4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d93a6:	2300      	movs	r3, #0
   d93a8:	2520      	movs	r5, #32
   d93aa:	8043      	strh	r3, [r0, #2]
   d93ac:	2314      	movs	r3, #20
{
   d93ae:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d93b0:	8003      	strh	r3, [r0, #0]
   d93b2:	6085      	str	r5, [r0, #8]
   d93b4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d93b6:	4906      	ldr	r1, [pc, #24]	; (d93d0 <_Z17acquireWireBufferv+0x2c>)
   d93b8:	4628      	mov	r0, r5
   d93ba:	f000 f831 	bl	d9420 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d93be:	4904      	ldr	r1, [pc, #16]	; (d93d0 <_Z17acquireWireBufferv+0x2c>)
	};
   d93c0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d93c2:	4628      	mov	r0, r5
   d93c4:	f000 f82c 	bl	d9420 <_ZnajRKSt9nothrow_t>
	};
   d93c8:	60e0      	str	r0, [r4, #12]
}
   d93ca:	4620      	mov	r0, r4
   d93cc:	bd38      	pop	{r3, r4, r5, pc}
   d93ce:	bf00      	nop
   d93d0:	000de004 	.word	0x000de004

000d93d4 <_Z19__fetch_global_Wirev>:
{
   d93d4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d93d6:	4d0e      	ldr	r5, [pc, #56]	; (d9410 <_Z19__fetch_global_Wirev+0x3c>)
   d93d8:	7829      	ldrb	r1, [r5, #0]
   d93da:	f3bf 8f5b 	dmb	ish
   d93de:	f011 0401 	ands.w	r4, r1, #1
{
   d93e2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d93e4:	d111      	bne.n	d940a <_Z19__fetch_global_Wirev+0x36>
   d93e6:	4628      	mov	r0, r5
   d93e8:	f7fa fe66 	bl	d40b8 <__cxa_guard_acquire>
   d93ec:	b168      	cbz	r0, d940a <_Z19__fetch_global_Wirev+0x36>
   d93ee:	a801      	add	r0, sp, #4
   d93f0:	f7ff ffd8 	bl	d93a4 <_Z17acquireWireBufferv>
   d93f4:	aa01      	add	r2, sp, #4
   d93f6:	4621      	mov	r1, r4
   d93f8:	4806      	ldr	r0, [pc, #24]	; (d9414 <_Z19__fetch_global_Wirev+0x40>)
   d93fa:	f7ff fe27 	bl	d904c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d93fe:	4628      	mov	r0, r5
   d9400:	f7fa fe5f 	bl	d40c2 <__cxa_guard_release>
   d9404:	4804      	ldr	r0, [pc, #16]	; (d9418 <_Z19__fetch_global_Wirev+0x44>)
   d9406:	f003 fc5b 	bl	dccc0 <atexit>
	return wire;
}
   d940a:	4802      	ldr	r0, [pc, #8]	; (d9414 <_Z19__fetch_global_Wirev+0x40>)
   d940c:	b007      	add	sp, #28
   d940e:	bd30      	pop	{r4, r5, pc}
   d9410:	2003e740 	.word	0x2003e740
   d9414:	2003e744 	.word	0x2003e744
   d9418:	000d93a1 	.word	0x000d93a1

000d941c <_ZdlPvj>:
   d941c:	f7fa be3f 	b.w	d409e <_ZdlPv>

000d9420 <_ZnajRKSt9nothrow_t>:
   d9420:	f7fa be3b 	b.w	d409a <_Znaj>

000d9424 <cosf>:
   d9424:	b500      	push	{lr}
   d9426:	ee10 3a10 	vmov	r3, s0
   d942a:	4a20      	ldr	r2, [pc, #128]	; (d94ac <cosf+0x88>)
   d942c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d9430:	4293      	cmp	r3, r2
   d9432:	b083      	sub	sp, #12
   d9434:	dd19      	ble.n	d946a <cosf+0x46>
   d9436:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d943a:	db04      	blt.n	d9446 <cosf+0x22>
   d943c:	ee30 0a40 	vsub.f32	s0, s0, s0
   d9440:	b003      	add	sp, #12
   d9442:	f85d fb04 	ldr.w	pc, [sp], #4
   d9446:	4668      	mov	r0, sp
   d9448:	f001 fa80 	bl	da94c <__ieee754_rem_pio2f>
   d944c:	f000 0003 	and.w	r0, r0, #3
   d9450:	2801      	cmp	r0, #1
   d9452:	d011      	beq.n	d9478 <cosf+0x54>
   d9454:	2802      	cmp	r0, #2
   d9456:	d01f      	beq.n	d9498 <cosf+0x74>
   d9458:	b1b8      	cbz	r0, d948a <cosf+0x66>
   d945a:	eddd 0a01 	vldr	s1, [sp, #4]
   d945e:	ed9d 0a00 	vldr	s0, [sp]
   d9462:	2001      	movs	r0, #1
   d9464:	f001 ff74 	bl	db350 <__kernel_sinf>
   d9468:	e7ea      	b.n	d9440 <cosf+0x1c>
   d946a:	eddf 0a11 	vldr	s1, [pc, #68]	; d94b0 <cosf+0x8c>
   d946e:	f001 fbb7 	bl	dabe0 <__kernel_cosf>
   d9472:	b003      	add	sp, #12
   d9474:	f85d fb04 	ldr.w	pc, [sp], #4
   d9478:	eddd 0a01 	vldr	s1, [sp, #4]
   d947c:	ed9d 0a00 	vldr	s0, [sp]
   d9480:	f001 ff66 	bl	db350 <__kernel_sinf>
   d9484:	eeb1 0a40 	vneg.f32	s0, s0
   d9488:	e7da      	b.n	d9440 <cosf+0x1c>
   d948a:	eddd 0a01 	vldr	s1, [sp, #4]
   d948e:	ed9d 0a00 	vldr	s0, [sp]
   d9492:	f001 fba5 	bl	dabe0 <__kernel_cosf>
   d9496:	e7d3      	b.n	d9440 <cosf+0x1c>
   d9498:	eddd 0a01 	vldr	s1, [sp, #4]
   d949c:	ed9d 0a00 	vldr	s0, [sp]
   d94a0:	f001 fb9e 	bl	dabe0 <__kernel_cosf>
   d94a4:	eeb1 0a40 	vneg.f32	s0, s0
   d94a8:	e7ca      	b.n	d9440 <cosf+0x1c>
   d94aa:	bf00      	nop
   d94ac:	3f490fd8 	.word	0x3f490fd8
   d94b0:	00000000 	.word	0x00000000

000d94b4 <sinf>:
   d94b4:	b500      	push	{lr}
   d94b6:	ee10 3a10 	vmov	r3, s0
   d94ba:	4a21      	ldr	r2, [pc, #132]	; (d9540 <sinf+0x8c>)
   d94bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d94c0:	4293      	cmp	r3, r2
   d94c2:	b083      	sub	sp, #12
   d94c4:	dd1a      	ble.n	d94fc <sinf+0x48>
   d94c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d94ca:	db04      	blt.n	d94d6 <sinf+0x22>
   d94cc:	ee30 0a40 	vsub.f32	s0, s0, s0
   d94d0:	b003      	add	sp, #12
   d94d2:	f85d fb04 	ldr.w	pc, [sp], #4
   d94d6:	4668      	mov	r0, sp
   d94d8:	f001 fa38 	bl	da94c <__ieee754_rem_pio2f>
   d94dc:	f000 0003 	and.w	r0, r0, #3
   d94e0:	2801      	cmp	r0, #1
   d94e2:	d013      	beq.n	d950c <sinf+0x58>
   d94e4:	2802      	cmp	r0, #2
   d94e6:	d020      	beq.n	d952a <sinf+0x76>
   d94e8:	b1b8      	cbz	r0, d951a <sinf+0x66>
   d94ea:	eddd 0a01 	vldr	s1, [sp, #4]
   d94ee:	ed9d 0a00 	vldr	s0, [sp]
   d94f2:	f001 fb75 	bl	dabe0 <__kernel_cosf>
   d94f6:	eeb1 0a40 	vneg.f32	s0, s0
   d94fa:	e7e9      	b.n	d94d0 <sinf+0x1c>
   d94fc:	eddf 0a11 	vldr	s1, [pc, #68]	; d9544 <sinf+0x90>
   d9500:	2000      	movs	r0, #0
   d9502:	f001 ff25 	bl	db350 <__kernel_sinf>
   d9506:	b003      	add	sp, #12
   d9508:	f85d fb04 	ldr.w	pc, [sp], #4
   d950c:	eddd 0a01 	vldr	s1, [sp, #4]
   d9510:	ed9d 0a00 	vldr	s0, [sp]
   d9514:	f001 fb64 	bl	dabe0 <__kernel_cosf>
   d9518:	e7da      	b.n	d94d0 <sinf+0x1c>
   d951a:	eddd 0a01 	vldr	s1, [sp, #4]
   d951e:	ed9d 0a00 	vldr	s0, [sp]
   d9522:	2001      	movs	r0, #1
   d9524:	f001 ff14 	bl	db350 <__kernel_sinf>
   d9528:	e7d2      	b.n	d94d0 <sinf+0x1c>
   d952a:	eddd 0a01 	vldr	s1, [sp, #4]
   d952e:	ed9d 0a00 	vldr	s0, [sp]
   d9532:	2001      	movs	r0, #1
   d9534:	f001 ff0c 	bl	db350 <__kernel_sinf>
   d9538:	eeb1 0a40 	vneg.f32	s0, s0
   d953c:	e7c8      	b.n	d94d0 <sinf+0x1c>
   d953e:	bf00      	nop
   d9540:	3f490fd8 	.word	0x3f490fd8
   d9544:	00000000 	.word	0x00000000

000d9548 <atan2>:
   d9548:	f000 b9ba 	b.w	d98c0 <__ieee754_atan2>
   d954c:	0000      	movs	r0, r0
	...

000d9550 <pow>:
   d9550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9554:	ed2d 8b02 	vpush	{d8}
   d9558:	b08d      	sub	sp, #52	; 0x34
   d955a:	ec57 6b10 	vmov	r6, r7, d0
   d955e:	ec55 4b11 	vmov	r4, r5, d1
   d9562:	f000 faad 	bl	d9ac0 <__ieee754_pow>
   d9566:	4bae      	ldr	r3, [pc, #696]	; (d9820 <pow+0x2d0>)
   d9568:	eeb0 8a40 	vmov.f32	s16, s0
   d956c:	eef0 8a60 	vmov.f32	s17, s1
   d9570:	f993 9000 	ldrsb.w	r9, [r3]
   d9574:	f1b9 3fff 	cmp.w	r9, #4294967295
   d9578:	d037      	beq.n	d95ea <pow+0x9a>
   d957a:	4622      	mov	r2, r4
   d957c:	462b      	mov	r3, r5
   d957e:	4620      	mov	r0, r4
   d9580:	4629      	mov	r1, r5
   d9582:	f003 f815 	bl	dc5b0 <__aeabi_dcmpun>
   d9586:	4683      	mov	fp, r0
   d9588:	bb78      	cbnz	r0, d95ea <pow+0x9a>
   d958a:	4632      	mov	r2, r6
   d958c:	463b      	mov	r3, r7
   d958e:	4630      	mov	r0, r6
   d9590:	4639      	mov	r1, r7
   d9592:	f003 f80d 	bl	dc5b0 <__aeabi_dcmpun>
   d9596:	4680      	mov	r8, r0
   d9598:	2800      	cmp	r0, #0
   d959a:	f040 8093 	bne.w	d96c4 <pow+0x174>
   d959e:	f04f 0a00 	mov.w	sl, #0
   d95a2:	f04f 0b00 	mov.w	fp, #0
   d95a6:	4630      	mov	r0, r6
   d95a8:	4639      	mov	r1, r7
   d95aa:	4652      	mov	r2, sl
   d95ac:	465b      	mov	r3, fp
   d95ae:	f002 ffcd 	bl	dc54c <__aeabi_dcmpeq>
   d95b2:	b318      	cbz	r0, d95fc <pow+0xac>
   d95b4:	4652      	mov	r2, sl
   d95b6:	465b      	mov	r3, fp
   d95b8:	4620      	mov	r0, r4
   d95ba:	4629      	mov	r1, r5
   d95bc:	f002 ffc6 	bl	dc54c <__aeabi_dcmpeq>
   d95c0:	9000      	str	r0, [sp, #0]
   d95c2:	2800      	cmp	r0, #0
   d95c4:	d057      	beq.n	d9676 <pow+0x126>
   d95c6:	4b97      	ldr	r3, [pc, #604]	; (d9824 <pow+0x2d4>)
   d95c8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d95cc:	2201      	movs	r2, #1
   d95ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d95d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d95d6:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d95da:	9202      	str	r2, [sp, #8]
   d95dc:	9303      	str	r3, [sp, #12]
   d95de:	f1b9 0f00 	cmp.w	r9, #0
   d95e2:	f000 8089 	beq.w	d96f8 <pow+0x1a8>
   d95e6:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d9810 <pow+0x2c0>
   d95ea:	eeb0 0a48 	vmov.f32	s0, s16
   d95ee:	eef0 0a68 	vmov.f32	s1, s17
   d95f2:	b00d      	add	sp, #52	; 0x34
   d95f4:	ecbd 8b02 	vpop	{d8}
   d95f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d95fc:	eeb0 0a48 	vmov.f32	s0, s16
   d9600:	eef0 0a68 	vmov.f32	s1, s17
   d9604:	f002 f8aa 	bl	db75c <finite>
   d9608:	4680      	mov	r8, r0
   d960a:	2800      	cmp	r0, #0
   d960c:	f000 8082 	beq.w	d9714 <pow+0x1c4>
   d9610:	f04f 0800 	mov.w	r8, #0
   d9614:	f04f 0900 	mov.w	r9, #0
   d9618:	ec51 0b18 	vmov	r0, r1, d8
   d961c:	4642      	mov	r2, r8
   d961e:	464b      	mov	r3, r9
   d9620:	f002 ff94 	bl	dc54c <__aeabi_dcmpeq>
   d9624:	2800      	cmp	r0, #0
   d9626:	d0e0      	beq.n	d95ea <pow+0x9a>
   d9628:	ec47 6b10 	vmov	d0, r6, r7
   d962c:	f002 f896 	bl	db75c <finite>
   d9630:	2800      	cmp	r0, #0
   d9632:	d0da      	beq.n	d95ea <pow+0x9a>
   d9634:	ec45 4b10 	vmov	d0, r4, r5
   d9638:	f002 f890 	bl	db75c <finite>
   d963c:	2800      	cmp	r0, #0
   d963e:	d0d4      	beq.n	d95ea <pow+0x9a>
   d9640:	4b77      	ldr	r3, [pc, #476]	; (d9820 <pow+0x2d0>)
   d9642:	4a78      	ldr	r2, [pc, #480]	; (d9824 <pow+0x2d4>)
   d9644:	f993 3000 	ldrsb.w	r3, [r3]
   d9648:	9203      	str	r2, [sp, #12]
   d964a:	2104      	movs	r1, #4
   d964c:	2200      	movs	r2, #0
   d964e:	2b02      	cmp	r3, #2
   d9650:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9654:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9658:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d965c:	9102      	str	r1, [sp, #8]
   d965e:	920a      	str	r2, [sp, #40]	; 0x28
   d9660:	d004      	beq.n	d966c <pow+0x11c>
   d9662:	a802      	add	r0, sp, #8
   d9664:	f002 f886 	bl	db774 <matherr>
   d9668:	2800      	cmp	r0, #0
   d966a:	d14a      	bne.n	d9702 <pow+0x1b2>
   d966c:	f7fe fe78 	bl	d8360 <__errno>
   d9670:	2322      	movs	r3, #34	; 0x22
   d9672:	6003      	str	r3, [r0, #0]
   d9674:	e045      	b.n	d9702 <pow+0x1b2>
   d9676:	ec45 4b10 	vmov	d0, r4, r5
   d967a:	f002 f86f 	bl	db75c <finite>
   d967e:	2800      	cmp	r0, #0
   d9680:	d0b3      	beq.n	d95ea <pow+0x9a>
   d9682:	4652      	mov	r2, sl
   d9684:	465b      	mov	r3, fp
   d9686:	4620      	mov	r0, r4
   d9688:	4629      	mov	r1, r5
   d968a:	f002 ff69 	bl	dc560 <__aeabi_dcmplt>
   d968e:	2800      	cmp	r0, #0
   d9690:	d0ab      	beq.n	d95ea <pow+0x9a>
   d9692:	4b63      	ldr	r3, [pc, #396]	; (d9820 <pow+0x2d0>)
   d9694:	9900      	ldr	r1, [sp, #0]
   d9696:	4a63      	ldr	r2, [pc, #396]	; (d9824 <pow+0x2d4>)
   d9698:	f993 3000 	ldrsb.w	r3, [r3]
   d969c:	910a      	str	r1, [sp, #40]	; 0x28
   d969e:	2101      	movs	r1, #1
   d96a0:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d96a4:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d96a8:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d96ac:	2b00      	cmp	r3, #0
   d96ae:	d16f      	bne.n	d9790 <pow+0x240>
   d96b0:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d96b4:	a802      	add	r0, sp, #8
   d96b6:	f002 f85d 	bl	db774 <matherr>
   d96ba:	2800      	cmp	r0, #0
   d96bc:	d06e      	beq.n	d979c <pow+0x24c>
   d96be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d96c0:	b32b      	cbz	r3, d970e <pow+0x1be>
   d96c2:	e020      	b.n	d9706 <pow+0x1b6>
   d96c4:	2200      	movs	r2, #0
   d96c6:	2300      	movs	r3, #0
   d96c8:	4620      	mov	r0, r4
   d96ca:	4629      	mov	r1, r5
   d96cc:	f002 ff3e 	bl	dc54c <__aeabi_dcmpeq>
   d96d0:	2800      	cmp	r0, #0
   d96d2:	d08a      	beq.n	d95ea <pow+0x9a>
   d96d4:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d9810 <pow+0x2c0>
   d96d8:	4b52      	ldr	r3, [pc, #328]	; (d9824 <pow+0x2d4>)
   d96da:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d96de:	2201      	movs	r2, #1
   d96e0:	f1b9 0f02 	cmp.w	r9, #2
   d96e4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d96e8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d96ec:	ed8d 8b08 	vstr	d8, [sp, #32]
   d96f0:	9202      	str	r2, [sp, #8]
   d96f2:	9303      	str	r3, [sp, #12]
   d96f4:	f43f af79 	beq.w	d95ea <pow+0x9a>
   d96f8:	a802      	add	r0, sp, #8
   d96fa:	f002 f83b 	bl	db774 <matherr>
   d96fe:	2800      	cmp	r0, #0
   d9700:	d051      	beq.n	d97a6 <pow+0x256>
   d9702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9704:	b11b      	cbz	r3, d970e <pow+0x1be>
   d9706:	f7fe fe2b 	bl	d8360 <__errno>
   d970a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d970c:	6003      	str	r3, [r0, #0]
   d970e:	ed9d 8b08 	vldr	d8, [sp, #32]
   d9712:	e76a      	b.n	d95ea <pow+0x9a>
   d9714:	ec47 6b10 	vmov	d0, r6, r7
   d9718:	f002 f820 	bl	db75c <finite>
   d971c:	2800      	cmp	r0, #0
   d971e:	f43f af77 	beq.w	d9610 <pow+0xc0>
   d9722:	ec45 4b10 	vmov	d0, r4, r5
   d9726:	f002 f819 	bl	db75c <finite>
   d972a:	2800      	cmp	r0, #0
   d972c:	f43f af70 	beq.w	d9610 <pow+0xc0>
   d9730:	ec53 2b18 	vmov	r2, r3, d8
   d9734:	ee18 0a10 	vmov	r0, s16
   d9738:	4619      	mov	r1, r3
   d973a:	f002 ff39 	bl	dc5b0 <__aeabi_dcmpun>
   d973e:	4b38      	ldr	r3, [pc, #224]	; (d9820 <pow+0x2d0>)
   d9740:	2800      	cmp	r0, #0
   d9742:	f040 8096 	bne.w	d9872 <pow+0x322>
   d9746:	f993 8000 	ldrsb.w	r8, [r3]
   d974a:	900a      	str	r0, [sp, #40]	; 0x28
   d974c:	2303      	movs	r3, #3
   d974e:	9302      	str	r3, [sp, #8]
   d9750:	4b34      	ldr	r3, [pc, #208]	; (d9824 <pow+0x2d4>)
   d9752:	9303      	str	r3, [sp, #12]
   d9754:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9758:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d975c:	f1b8 0f00 	cmp.w	r8, #0
   d9760:	d126      	bne.n	d97b0 <pow+0x260>
   d9762:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d9834 <pow+0x2e4>
   d9766:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d976a:	4652      	mov	r2, sl
   d976c:	465b      	mov	r3, fp
   d976e:	4630      	mov	r0, r6
   d9770:	4639      	mov	r1, r7
   d9772:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d9776:	f002 fef3 	bl	dc560 <__aeabi_dcmplt>
   d977a:	bb48      	cbnz	r0, d97d0 <pow+0x280>
   d977c:	a802      	add	r0, sp, #8
   d977e:	f001 fff9 	bl	db774 <matherr>
   d9782:	2800      	cmp	r0, #0
   d9784:	d19b      	bne.n	d96be <pow+0x16e>
   d9786:	f7fe fdeb 	bl	d8360 <__errno>
   d978a:	2322      	movs	r3, #34	; 0x22
   d978c:	6003      	str	r3, [r0, #0]
   d978e:	e796      	b.n	d96be <pow+0x16e>
   d9790:	4925      	ldr	r1, [pc, #148]	; (d9828 <pow+0x2d8>)
   d9792:	2000      	movs	r0, #0
   d9794:	2b02      	cmp	r3, #2
   d9796:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d979a:	d18b      	bne.n	d96b4 <pow+0x164>
   d979c:	f7fe fde0 	bl	d8360 <__errno>
   d97a0:	2321      	movs	r3, #33	; 0x21
   d97a2:	6003      	str	r3, [r0, #0]
   d97a4:	e78b      	b.n	d96be <pow+0x16e>
   d97a6:	f7fe fddb 	bl	d8360 <__errno>
   d97aa:	2321      	movs	r3, #33	; 0x21
   d97ac:	6003      	str	r3, [r0, #0]
   d97ae:	e7a8      	b.n	d9702 <pow+0x1b2>
   d97b0:	ed9f 7b19 	vldr	d7, [pc, #100]	; d9818 <pow+0x2c8>
   d97b4:	4652      	mov	r2, sl
   d97b6:	465b      	mov	r3, fp
   d97b8:	4630      	mov	r0, r6
   d97ba:	4639      	mov	r1, r7
   d97bc:	ed8d 7b08 	vstr	d7, [sp, #32]
   d97c0:	f002 fece 	bl	dc560 <__aeabi_dcmplt>
   d97c4:	2800      	cmp	r0, #0
   d97c6:	d137      	bne.n	d9838 <pow+0x2e8>
   d97c8:	f1b8 0f02 	cmp.w	r8, #2
   d97cc:	d0db      	beq.n	d9786 <pow+0x236>
   d97ce:	e7d5      	b.n	d977c <pow+0x22c>
   d97d0:	4b16      	ldr	r3, [pc, #88]	; (d982c <pow+0x2dc>)
   d97d2:	2200      	movs	r2, #0
   d97d4:	4620      	mov	r0, r4
   d97d6:	4629      	mov	r1, r5
   d97d8:	f002 fc50 	bl	dc07c <__aeabi_dmul>
   d97dc:	4602      	mov	r2, r0
   d97de:	460b      	mov	r3, r1
   d97e0:	ec43 2b10 	vmov	d0, r2, r3
   d97e4:	e9cd 2300 	strd	r2, r3, [sp]
   d97e8:	f001 ffce 	bl	db788 <rint>
   d97ec:	e9dd 2300 	ldrd	r2, r3, [sp]
   d97f0:	ec51 0b10 	vmov	r0, r1, d0
   d97f4:	f002 feaa 	bl	dc54c <__aeabi_dcmpeq>
   d97f8:	2800      	cmp	r0, #0
   d97fa:	d136      	bne.n	d986a <pow+0x31a>
   d97fc:	4b0c      	ldr	r3, [pc, #48]	; (d9830 <pow+0x2e0>)
   d97fe:	4908      	ldr	r1, [pc, #32]	; (d9820 <pow+0x2d0>)
   d9800:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d9804:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d9808:	f991 8000 	ldrsb.w	r8, [r1]
   d980c:	e7dc      	b.n	d97c8 <pow+0x278>
   d980e:	bf00      	nop
   d9810:	00000000 	.word	0x00000000
   d9814:	3ff00000 	.word	0x3ff00000
   d9818:	00000000 	.word	0x00000000
   d981c:	7ff00000 	.word	0x7ff00000
   d9820:	2003e3a0 	.word	0x2003e3a0
   d9824:	000de008 	.word	0x000de008
   d9828:	fff00000 	.word	0xfff00000
   d982c:	3fe00000 	.word	0x3fe00000
   d9830:	c7efffff 	.word	0xc7efffff
   d9834:	47efffff 	.word	0x47efffff
   d9838:	4b1c      	ldr	r3, [pc, #112]	; (d98ac <pow+0x35c>)
   d983a:	2200      	movs	r2, #0
   d983c:	4620      	mov	r0, r4
   d983e:	4629      	mov	r1, r5
   d9840:	f002 fc1c 	bl	dc07c <__aeabi_dmul>
   d9844:	4602      	mov	r2, r0
   d9846:	460b      	mov	r3, r1
   d9848:	ec43 2b10 	vmov	d0, r2, r3
   d984c:	e9cd 2300 	strd	r2, r3, [sp]
   d9850:	f001 ff9a 	bl	db788 <rint>
   d9854:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9858:	ec51 0b10 	vmov	r0, r1, d0
   d985c:	f002 fe76 	bl	dc54c <__aeabi_dcmpeq>
   d9860:	b918      	cbnz	r0, d986a <pow+0x31a>
   d9862:	4b13      	ldr	r3, [pc, #76]	; (d98b0 <pow+0x360>)
   d9864:	2200      	movs	r2, #0
   d9866:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d986a:	4b12      	ldr	r3, [pc, #72]	; (d98b4 <pow+0x364>)
   d986c:	f993 8000 	ldrsb.w	r8, [r3]
   d9870:	e7aa      	b.n	d97c8 <pow+0x278>
   d9872:	f993 9000 	ldrsb.w	r9, [r3]
   d9876:	4b10      	ldr	r3, [pc, #64]	; (d98b8 <pow+0x368>)
   d9878:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d987c:	2201      	movs	r2, #1
   d987e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9882:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9886:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d988a:	f1b9 0f00 	cmp.w	r9, #0
   d988e:	f43f af0f 	beq.w	d96b0 <pow+0x160>
   d9892:	4652      	mov	r2, sl
   d9894:	465b      	mov	r3, fp
   d9896:	4650      	mov	r0, sl
   d9898:	4659      	mov	r1, fp
   d989a:	f002 fd19 	bl	dc2d0 <__aeabi_ddiv>
   d989e:	f1b9 0f02 	cmp.w	r9, #2
   d98a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d98a6:	f43f af79 	beq.w	d979c <pow+0x24c>
   d98aa:	e703      	b.n	d96b4 <pow+0x164>
   d98ac:	3fe00000 	.word	0x3fe00000
   d98b0:	fff00000 	.word	0xfff00000
   d98b4:	2003e3a0 	.word	0x2003e3a0
   d98b8:	000de008 	.word	0x000de008

000d98bc <atan2f>:
   d98bc:	f000 bf9e 	b.w	da7fc <__ieee754_atan2f>

000d98c0 <__ieee754_atan2>:
   d98c0:	ec51 0b11 	vmov	r0, r1, d1
   d98c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d98c8:	4243      	negs	r3, r0
   d98ca:	4e79      	ldr	r6, [pc, #484]	; (d9ab0 <__ieee754_atan2+0x1f0>)
   d98cc:	4303      	orrs	r3, r0
   d98ce:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   d98d2:	ea4c 73d3 	orr.w	r3, ip, r3, lsr #31
   d98d6:	42b3      	cmp	r3, r6
   d98d8:	ec55 4b10 	vmov	r4, r5, d0
   d98dc:	b082      	sub	sp, #8
   d98de:	d847      	bhi.n	d9970 <__ieee754_atan2+0xb0>
   d98e0:	4263      	negs	r3, r4
   d98e2:	4323      	orrs	r3, r4
   d98e4:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   d98e8:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   d98ec:	42b3      	cmp	r3, r6
   d98ee:	ee10 ea10 	vmov	lr, s0
   d98f2:	46a9      	mov	r9, r5
   d98f4:	d83c      	bhi.n	d9970 <__ieee754_atan2+0xb0>
   d98f6:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   d98fa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d98fe:	4303      	orrs	r3, r0
   d9900:	d04c      	beq.n	d999c <__ieee754_atan2+0xdc>
   d9902:	ea4f 78a1 	mov.w	r8, r1, asr #30
   d9906:	f008 0802 	and.w	r8, r8, #2
   d990a:	ea5a 0304 	orrs.w	r3, sl, r4
   d990e:	ea48 78d5 	orr.w	r8, r8, r5, lsr #31
   d9912:	d038      	beq.n	d9986 <__ieee754_atan2+0xc6>
   d9914:	ea5c 0300 	orrs.w	r3, ip, r0
   d9918:	d048      	beq.n	d99ac <__ieee754_atan2+0xec>
   d991a:	45b4      	cmp	ip, r6
   d991c:	d05d      	beq.n	d99da <__ieee754_atan2+0x11a>
   d991e:	45b2      	cmp	sl, r6
   d9920:	d044      	beq.n	d99ac <__ieee754_atan2+0xec>
   d9922:	ebaa 0c0c 	sub.w	ip, sl, ip
   d9926:	f1bc 7f74 	cmp.w	ip, #63963136	; 0x3d00000
   d992a:	ea4f 532c 	mov.w	r3, ip, asr #20
   d992e:	da4f      	bge.n	d99d0 <__ieee754_atan2+0x110>
   d9930:	2900      	cmp	r1, #0
   d9932:	da61      	bge.n	d99f8 <__ieee754_atan2+0x138>
   d9934:	333c      	adds	r3, #60	; 0x3c
   d9936:	da5f      	bge.n	d99f8 <__ieee754_atan2+0x138>
   d9938:	ed9f 7b4f 	vldr	d7, [pc, #316]	; d9a78 <__ieee754_atan2+0x1b8>
   d993c:	ed8d 7b00 	vstr	d7, [sp]
   d9940:	f1b8 0f01 	cmp.w	r8, #1
   d9944:	d078      	beq.n	d9a38 <__ieee754_atan2+0x178>
   d9946:	f1b8 0f02 	cmp.w	r8, #2
   d994a:	d064      	beq.n	d9a16 <__ieee754_atan2+0x156>
   d994c:	f1b8 0f00 	cmp.w	r8, #0
   d9950:	d014      	beq.n	d997c <__ieee754_atan2+0xbc>
   d9952:	a34b      	add	r3, pc, #300	; (adr r3, d9a80 <__ieee754_atan2+0x1c0>)
   d9954:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9958:	e9dd 0100 	ldrd	r0, r1, [sp]
   d995c:	f002 f9d6 	bl	dbd0c <__aeabi_dsub>
   d9960:	a349      	add	r3, pc, #292	; (adr r3, d9a88 <__ieee754_atan2+0x1c8>)
   d9962:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9966:	f002 f9d1 	bl	dbd0c <__aeabi_dsub>
   d996a:	e9cd 0100 	strd	r0, r1, [sp]
   d996e:	e005      	b.n	d997c <__ieee754_atan2+0xbc>
   d9970:	4622      	mov	r2, r4
   d9972:	462b      	mov	r3, r5
   d9974:	f002 f9cc 	bl	dbd10 <__adddf3>
   d9978:	e9cd 0100 	strd	r0, r1, [sp]
   d997c:	ed9d 0b00 	vldr	d0, [sp]
   d9980:	b002      	add	sp, #8
   d9982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9986:	f1b8 0f02 	cmp.w	r8, #2
   d998a:	d017      	beq.n	d99bc <__ieee754_atan2+0xfc>
   d998c:	f1b8 0f03 	cmp.w	r8, #3
   d9990:	d109      	bne.n	d99a6 <__ieee754_atan2+0xe6>
   d9992:	ed9f 7b3f 	vldr	d7, [pc, #252]	; d9a90 <__ieee754_atan2+0x1d0>
   d9996:	ed8d 7b00 	vstr	d7, [sp]
   d999a:	e7ef      	b.n	d997c <__ieee754_atan2+0xbc>
   d999c:	b002      	add	sp, #8
   d999e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d99a2:	f001 bd1d 	b.w	db3e0 <atan>
   d99a6:	ed8d 0b00 	vstr	d0, [sp]
   d99aa:	e7e7      	b.n	d997c <__ieee754_atan2+0xbc>
   d99ac:	f1b9 0f00 	cmp.w	r9, #0
   d99b0:	db09      	blt.n	d99c6 <__ieee754_atan2+0x106>
   d99b2:	ed9f 7b39 	vldr	d7, [pc, #228]	; d9a98 <__ieee754_atan2+0x1d8>
   d99b6:	ed8d 7b00 	vstr	d7, [sp]
   d99ba:	e7df      	b.n	d997c <__ieee754_atan2+0xbc>
   d99bc:	ed9f 7b32 	vldr	d7, [pc, #200]	; d9a88 <__ieee754_atan2+0x1c8>
   d99c0:	ed8d 7b00 	vstr	d7, [sp]
   d99c4:	e7da      	b.n	d997c <__ieee754_atan2+0xbc>
   d99c6:	ed9f 7b36 	vldr	d7, [pc, #216]	; d9aa0 <__ieee754_atan2+0x1e0>
   d99ca:	ed8d 7b00 	vstr	d7, [sp]
   d99ce:	e7d5      	b.n	d997c <__ieee754_atan2+0xbc>
   d99d0:	ed9f 7b31 	vldr	d7, [pc, #196]	; d9a98 <__ieee754_atan2+0x1d8>
   d99d4:	ed8d 7b00 	vstr	d7, [sp]
   d99d8:	e7b2      	b.n	d9940 <__ieee754_atan2+0x80>
   d99da:	45e2      	cmp	sl, ip
   d99dc:	f108 38ff 	add.w	r8, r8, #4294967295
   d99e0:	d032      	beq.n	d9a48 <__ieee754_atan2+0x188>
   d99e2:	f1b8 0f02 	cmp.w	r8, #2
   d99e6:	d83a      	bhi.n	d9a5e <__ieee754_atan2+0x19e>
   d99e8:	4b32      	ldr	r3, [pc, #200]	; (d9ab4 <__ieee754_atan2+0x1f4>)
   d99ea:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   d99ee:	ed98 7b00 	vldr	d7, [r8]
   d99f2:	ed8d 7b00 	vstr	d7, [sp]
   d99f6:	e7c1      	b.n	d997c <__ieee754_atan2+0xbc>
   d99f8:	4602      	mov	r2, r0
   d99fa:	460b      	mov	r3, r1
   d99fc:	4620      	mov	r0, r4
   d99fe:	4629      	mov	r1, r5
   d9a00:	f002 fc66 	bl	dc2d0 <__aeabi_ddiv>
   d9a04:	ec41 0b10 	vmov	d0, r0, r1
   d9a08:	f001 fe9e 	bl	db748 <fabs>
   d9a0c:	f001 fce8 	bl	db3e0 <atan>
   d9a10:	ed8d 0b00 	vstr	d0, [sp]
   d9a14:	e794      	b.n	d9940 <__ieee754_atan2+0x80>
   d9a16:	a31a      	add	r3, pc, #104	; (adr r3, d9a80 <__ieee754_atan2+0x1c0>)
   d9a18:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9a1c:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9a20:	f002 f974 	bl	dbd0c <__aeabi_dsub>
   d9a24:	4602      	mov	r2, r0
   d9a26:	460b      	mov	r3, r1
   d9a28:	a117      	add	r1, pc, #92	; (adr r1, d9a88 <__ieee754_atan2+0x1c8>)
   d9a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9a2e:	f002 f96d 	bl	dbd0c <__aeabi_dsub>
   d9a32:	e9cd 0100 	strd	r0, r1, [sp]
   d9a36:	e7a1      	b.n	d997c <__ieee754_atan2+0xbc>
   d9a38:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9a3c:	9901      	ldr	r1, [sp, #4]
   d9a3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9a42:	e9cd 2300 	strd	r2, r3, [sp]
   d9a46:	e799      	b.n	d997c <__ieee754_atan2+0xbc>
   d9a48:	f1b8 0f02 	cmp.w	r8, #2
   d9a4c:	d80c      	bhi.n	d9a68 <__ieee754_atan2+0x1a8>
   d9a4e:	4b1a      	ldr	r3, [pc, #104]	; (d9ab8 <__ieee754_atan2+0x1f8>)
   d9a50:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   d9a54:	ed98 7b00 	vldr	d7, [r8]
   d9a58:	ed8d 7b00 	vstr	d7, [sp]
   d9a5c:	e78e      	b.n	d997c <__ieee754_atan2+0xbc>
   d9a5e:	ed9f 7b06 	vldr	d7, [pc, #24]	; d9a78 <__ieee754_atan2+0x1b8>
   d9a62:	ed8d 7b00 	vstr	d7, [sp]
   d9a66:	e789      	b.n	d997c <__ieee754_atan2+0xbc>
   d9a68:	ed9f 7b0f 	vldr	d7, [pc, #60]	; d9aa8 <__ieee754_atan2+0x1e8>
   d9a6c:	ed8d 7b00 	vstr	d7, [sp]
   d9a70:	e784      	b.n	d997c <__ieee754_atan2+0xbc>
   d9a72:	bf00      	nop
   d9a74:	f3af 8000 	nop.w
	...
   d9a80:	33145c07 	.word	0x33145c07
   d9a84:	3ca1a626 	.word	0x3ca1a626
   d9a88:	54442d18 	.word	0x54442d18
   d9a8c:	400921fb 	.word	0x400921fb
   d9a90:	54442d18 	.word	0x54442d18
   d9a94:	c00921fb 	.word	0xc00921fb
   d9a98:	54442d18 	.word	0x54442d18
   d9a9c:	3ff921fb 	.word	0x3ff921fb
   d9aa0:	54442d18 	.word	0x54442d18
   d9aa4:	bff921fb 	.word	0xbff921fb
   d9aa8:	54442d18 	.word	0x54442d18
   d9aac:	3fe921fb 	.word	0x3fe921fb
   d9ab0:	7ff00000 	.word	0x7ff00000
   d9ab4:	000de028 	.word	0x000de028
   d9ab8:	000de010 	.word	0x000de010
   d9abc:	00000000 	.word	0x00000000

000d9ac0 <__ieee754_pow>:
   d9ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9ac4:	ec57 6b11 	vmov	r6, r7, d1
   d9ac8:	ed2d 8b0a 	vpush	{d8-d12}
   d9acc:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d9ad0:	ea5a 0206 	orrs.w	r2, sl, r6
   d9ad4:	b089      	sub	sp, #36	; 0x24
   d9ad6:	d03d      	beq.n	d9b54 <__ieee754_pow+0x94>
   d9ad8:	ec55 4b10 	vmov	r4, r5, d0
   d9adc:	4976      	ldr	r1, [pc, #472]	; (d9cb8 <__ieee754_pow+0x1f8>)
   d9ade:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d9ae2:	4588      	cmp	r8, r1
   d9ae4:	ee10 2a10 	vmov	r2, s0
   d9ae8:	46a9      	mov	r9, r5
   d9aea:	dc2c      	bgt.n	d9b46 <__ieee754_pow+0x86>
   d9aec:	ee11 3a10 	vmov	r3, s2
   d9af0:	46bb      	mov	fp, r7
   d9af2:	d03a      	beq.n	d9b6a <__ieee754_pow+0xaa>
   d9af4:	458a      	cmp	sl, r1
   d9af6:	dc26      	bgt.n	d9b46 <__ieee754_pow+0x86>
   d9af8:	496f      	ldr	r1, [pc, #444]	; (d9cb8 <__ieee754_pow+0x1f8>)
   d9afa:	458a      	cmp	sl, r1
   d9afc:	d021      	beq.n	d9b42 <__ieee754_pow+0x82>
   d9afe:	f1b9 0f00 	cmp.w	r9, #0
   d9b02:	db3d      	blt.n	d9b80 <__ieee754_pow+0xc0>
   d9b04:	2100      	movs	r1, #0
   d9b06:	9103      	str	r1, [sp, #12]
   d9b08:	2b00      	cmp	r3, #0
   d9b0a:	d155      	bne.n	d9bb8 <__ieee754_pow+0xf8>
   d9b0c:	4b6a      	ldr	r3, [pc, #424]	; (d9cb8 <__ieee754_pow+0x1f8>)
   d9b0e:	459a      	cmp	sl, r3
   d9b10:	f000 80a8 	beq.w	d9c64 <__ieee754_pow+0x1a4>
   d9b14:	4b69      	ldr	r3, [pc, #420]	; (d9cbc <__ieee754_pow+0x1fc>)
   d9b16:	459a      	cmp	sl, r3
   d9b18:	f000 80b6 	beq.w	d9c88 <__ieee754_pow+0x1c8>
   d9b1c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d9b20:	f000 8501 	beq.w	da526 <__ieee754_pow+0xa66>
   d9b24:	4b66      	ldr	r3, [pc, #408]	; (d9cc0 <__ieee754_pow+0x200>)
   d9b26:	459b      	cmp	fp, r3
   d9b28:	d146      	bne.n	d9bb8 <__ieee754_pow+0xf8>
   d9b2a:	f1b9 0f00 	cmp.w	r9, #0
   d9b2e:	db43      	blt.n	d9bb8 <__ieee754_pow+0xf8>
   d9b30:	ec45 4b10 	vmov	d0, r4, r5
   d9b34:	b009      	add	sp, #36	; 0x24
   d9b36:	ecbd 8b0a 	vpop	{d8-d12}
   d9b3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9b3e:	f000 bd99 	b.w	da674 <__ieee754_sqrt>
   d9b42:	2b00      	cmp	r3, #0
   d9b44:	d0db      	beq.n	d9afe <__ieee754_pow+0x3e>
   d9b46:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d9b4a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d9b4e:	ea58 0302 	orrs.w	r3, r8, r2
   d9b52:	d10d      	bne.n	d9b70 <__ieee754_pow+0xb0>
   d9b54:	ed9f 7b54 	vldr	d7, [pc, #336]	; d9ca8 <__ieee754_pow+0x1e8>
   d9b58:	ed8d 7b00 	vstr	d7, [sp]
   d9b5c:	ed9d 0b00 	vldr	d0, [sp]
   d9b60:	b009      	add	sp, #36	; 0x24
   d9b62:	ecbd 8b0a 	vpop	{d8-d12}
   d9b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9b6a:	b90c      	cbnz	r4, d9b70 <__ieee754_pow+0xb0>
   d9b6c:	45c2      	cmp	sl, r8
   d9b6e:	ddc3      	ble.n	d9af8 <__ieee754_pow+0x38>
   d9b70:	4854      	ldr	r0, [pc, #336]	; (d9cc4 <__ieee754_pow+0x204>)
   d9b72:	b009      	add	sp, #36	; 0x24
   d9b74:	ecbd 8b0a 	vpop	{d8-d12}
   d9b78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9b7c:	f001 bdfc 	b.w	db778 <nan>
   d9b80:	4951      	ldr	r1, [pc, #324]	; (d9cc8 <__ieee754_pow+0x208>)
   d9b82:	458a      	cmp	sl, r1
   d9b84:	f300 8087 	bgt.w	d9c96 <__ieee754_pow+0x1d6>
   d9b88:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d9b8c:	458a      	cmp	sl, r1
   d9b8e:	dd0f      	ble.n	d9bb0 <__ieee754_pow+0xf0>
   d9b90:	ea4f 512a 	mov.w	r1, sl, asr #20
   d9b94:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d9b98:	2914      	cmp	r1, #20
   d9b9a:	f340 84ce 	ble.w	da53a <__ieee754_pow+0xa7a>
   d9b9e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d9ba2:	fa23 f001 	lsr.w	r0, r3, r1
   d9ba6:	fa00 f101 	lsl.w	r1, r0, r1
   d9baa:	4299      	cmp	r1, r3
   d9bac:	f000 8520 	beq.w	da5f0 <__ieee754_pow+0xb30>
   d9bb0:	2100      	movs	r1, #0
   d9bb2:	9103      	str	r1, [sp, #12]
   d9bb4:	2b00      	cmp	r3, #0
   d9bb6:	d0ad      	beq.n	d9b14 <__ieee754_pow+0x54>
   d9bb8:	ec45 4b10 	vmov	d0, r4, r5
   d9bbc:	9206      	str	r2, [sp, #24]
   d9bbe:	f001 fdc3 	bl	db748 <fabs>
   d9bc2:	9a06      	ldr	r2, [sp, #24]
   d9bc4:	ed8d 0b00 	vstr	d0, [sp]
   d9bc8:	bb5a      	cbnz	r2, d9c22 <__ieee754_pow+0x162>
   d9bca:	f1b8 0f00 	cmp.w	r8, #0
   d9bce:	d004      	beq.n	d9bda <__ieee754_pow+0x11a>
   d9bd0:	4b3a      	ldr	r3, [pc, #232]	; (d9cbc <__ieee754_pow+0x1fc>)
   d9bd2:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d9bd6:	429a      	cmp	r2, r3
   d9bd8:	d123      	bne.n	d9c22 <__ieee754_pow+0x162>
   d9bda:	f1bb 0f00 	cmp.w	fp, #0
   d9bde:	da07      	bge.n	d9bf0 <__ieee754_pow+0x130>
   d9be0:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9be4:	4935      	ldr	r1, [pc, #212]	; (d9cbc <__ieee754_pow+0x1fc>)
   d9be6:	2000      	movs	r0, #0
   d9be8:	f002 fb72 	bl	dc2d0 <__aeabi_ddiv>
   d9bec:	e9cd 0100 	strd	r0, r1, [sp]
   d9bf0:	f1b9 0f00 	cmp.w	r9, #0
   d9bf4:	dab2      	bge.n	d9b5c <__ieee754_pow+0x9c>
   d9bf6:	9b03      	ldr	r3, [sp, #12]
   d9bf8:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d9bfc:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d9c00:	ea58 0303 	orrs.w	r3, r8, r3
   d9c04:	f040 84be 	bne.w	da584 <__ieee754_pow+0xac4>
   d9c08:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9c0c:	4610      	mov	r0, r2
   d9c0e:	4619      	mov	r1, r3
   d9c10:	f002 f87c 	bl	dbd0c <__aeabi_dsub>
   d9c14:	4602      	mov	r2, r0
   d9c16:	460b      	mov	r3, r1
   d9c18:	f002 fb5a 	bl	dc2d0 <__aeabi_ddiv>
   d9c1c:	e9cd 0100 	strd	r0, r1, [sp]
   d9c20:	e79c      	b.n	d9b5c <__ieee754_pow+0x9c>
   d9c22:	9a03      	ldr	r2, [sp, #12]
   d9c24:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d9c28:	3b01      	subs	r3, #1
   d9c2a:	9306      	str	r3, [sp, #24]
   d9c2c:	4313      	orrs	r3, r2
   d9c2e:	d035      	beq.n	d9c9c <__ieee754_pow+0x1dc>
   d9c30:	4b26      	ldr	r3, [pc, #152]	; (d9ccc <__ieee754_pow+0x20c>)
   d9c32:	459a      	cmp	sl, r3
   d9c34:	dd4e      	ble.n	d9cd4 <__ieee754_pow+0x214>
   d9c36:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d9c3a:	459a      	cmp	sl, r3
   d9c3c:	4b24      	ldr	r3, [pc, #144]	; (d9cd0 <__ieee754_pow+0x210>)
   d9c3e:	f340 83ed 	ble.w	da41c <__ieee754_pow+0x95c>
   d9c42:	4598      	cmp	r8, r3
   d9c44:	f340 836b 	ble.w	da31e <__ieee754_pow+0x85e>
   d9c48:	f1bb 0f00 	cmp.w	fp, #0
   d9c4c:	f340 836b 	ble.w	da326 <__ieee754_pow+0x866>
   d9c50:	a317      	add	r3, pc, #92	; (adr r3, d9cb0 <__ieee754_pow+0x1f0>)
   d9c52:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c56:	4610      	mov	r0, r2
   d9c58:	4619      	mov	r1, r3
   d9c5a:	f002 fa0f 	bl	dc07c <__aeabi_dmul>
   d9c5e:	e9cd 0100 	strd	r0, r1, [sp]
   d9c62:	e77b      	b.n	d9b5c <__ieee754_pow+0x9c>
   d9c64:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d9c68:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d9c6c:	4313      	orrs	r3, r2
   d9c6e:	f43f af71 	beq.w	d9b54 <__ieee754_pow+0x94>
   d9c72:	4b17      	ldr	r3, [pc, #92]	; (d9cd0 <__ieee754_pow+0x210>)
   d9c74:	4598      	cmp	r8, r3
   d9c76:	f340 8388 	ble.w	da38a <__ieee754_pow+0x8ca>
   d9c7a:	f1bb 0f00 	cmp.w	fp, #0
   d9c7e:	f2c0 8352 	blt.w	da326 <__ieee754_pow+0x866>
   d9c82:	e9cd 6700 	strd	r6, r7, [sp]
   d9c86:	e769      	b.n	d9b5c <__ieee754_pow+0x9c>
   d9c88:	f1bb 0f00 	cmp.w	fp, #0
   d9c8c:	f2c0 8441 	blt.w	da512 <__ieee754_pow+0xa52>
   d9c90:	e9cd 4500 	strd	r4, r5, [sp]
   d9c94:	e762      	b.n	d9b5c <__ieee754_pow+0x9c>
   d9c96:	2102      	movs	r1, #2
   d9c98:	9103      	str	r1, [sp, #12]
   d9c9a:	e735      	b.n	d9b08 <__ieee754_pow+0x48>
   d9c9c:	4622      	mov	r2, r4
   d9c9e:	462b      	mov	r3, r5
   d9ca0:	e7b4      	b.n	d9c0c <__ieee754_pow+0x14c>
   d9ca2:	bf00      	nop
   d9ca4:	f3af 8000 	nop.w
   d9ca8:	00000000 	.word	0x00000000
   d9cac:	3ff00000 	.word	0x3ff00000
   d9cb0:	8800759c 	.word	0x8800759c
   d9cb4:	7e37e43c 	.word	0x7e37e43c
   d9cb8:	7ff00000 	.word	0x7ff00000
   d9cbc:	3ff00000 	.word	0x3ff00000
   d9cc0:	3fe00000 	.word	0x3fe00000
   d9cc4:	000de040 	.word	0x000de040
   d9cc8:	433fffff 	.word	0x433fffff
   d9ccc:	41e00000 	.word	0x41e00000
   d9cd0:	3fefffff 	.word	0x3fefffff
   d9cd4:	4be4      	ldr	r3, [pc, #912]	; (da068 <__ieee754_pow+0x5a8>)
   d9cd6:	ea09 0303 	and.w	r3, r9, r3
   d9cda:	2b00      	cmp	r3, #0
   d9cdc:	f040 8416 	bne.w	da50c <__ieee754_pow+0xa4c>
   d9ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9ce4:	4be1      	ldr	r3, [pc, #900]	; (da06c <__ieee754_pow+0x5ac>)
   d9ce6:	2200      	movs	r2, #0
   d9ce8:	f002 f9c8 	bl	dc07c <__aeabi_dmul>
   d9cec:	e9cd 0100 	strd	r0, r1, [sp]
   d9cf0:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d9cf4:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d9cf8:	ea4f 5328 	mov.w	r3, r8, asr #20
   d9cfc:	49dc      	ldr	r1, [pc, #880]	; (da070 <__ieee754_pow+0x5b0>)
   d9cfe:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d9d02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d9d06:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d9d0a:	1818      	adds	r0, r3, r0
   d9d0c:	428a      	cmp	r2, r1
   d9d0e:	9007      	str	r0, [sp, #28]
   d9d10:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d9d14:	f340 83e9 	ble.w	da4ea <__ieee754_pow+0xa2a>
   d9d18:	4bd6      	ldr	r3, [pc, #856]	; (da074 <__ieee754_pow+0x5b4>)
   d9d1a:	429a      	cmp	r2, r3
   d9d1c:	f340 843e 	ble.w	da59c <__ieee754_pow+0xadc>
   d9d20:	ed9f 7bbb 	vldr	d7, [pc, #748]	; da010 <__ieee754_pow+0x550>
   d9d24:	eeb0 ba47 	vmov.f32	s22, s14
   d9d28:	eef0 ba67 	vmov.f32	s23, s15
   d9d2c:	eeb0 ca47 	vmov.f32	s24, s14
   d9d30:	eef0 ca67 	vmov.f32	s25, s15
   d9d34:	ed9f 7bb8 	vldr	d7, [pc, #736]	; da018 <__ieee754_pow+0x558>
   d9d38:	3001      	adds	r0, #1
   d9d3a:	ec54 3b17 	vmov	r3, r4, d7
   d9d3e:	9007      	str	r0, [sp, #28]
   d9d40:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d9d44:	f04f 0900 	mov.w	r9, #0
   d9d48:	e9dd ab00 	ldrd	sl, fp, [sp]
   d9d4c:	ec44 3b18 	vmov	d8, r3, r4
   d9d50:	461a      	mov	r2, r3
   d9d52:	4650      	mov	r0, sl
   d9d54:	4623      	mov	r3, r4
   d9d56:	4641      	mov	r1, r8
   d9d58:	f001 ffd8 	bl	dbd0c <__aeabi_dsub>
   d9d5c:	ec53 2b18 	vmov	r2, r3, d8
   d9d60:	4604      	mov	r4, r0
   d9d62:	460d      	mov	r5, r1
   d9d64:	4650      	mov	r0, sl
   d9d66:	4641      	mov	r1, r8
   d9d68:	f001 ffd2 	bl	dbd10 <__adddf3>
   d9d6c:	4602      	mov	r2, r0
   d9d6e:	460b      	mov	r3, r1
   d9d70:	2000      	movs	r0, #0
   d9d72:	49c1      	ldr	r1, [pc, #772]	; (da078 <__ieee754_pow+0x5b8>)
   d9d74:	f002 faac 	bl	dc2d0 <__aeabi_ddiv>
   d9d78:	ec45 4b1a 	vmov	d10, r4, r5
   d9d7c:	ec41 0b19 	vmov	d9, r0, r1
   d9d80:	ec51 0b1a 	vmov	r0, r1, d10
   d9d84:	ec53 2b19 	vmov	r2, r3, d9
   d9d88:	f002 f978 	bl	dc07c <__aeabi_dmul>
   d9d8c:	46c3      	mov	fp, r8
   d9d8e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d9d92:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d9d96:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d9d9a:	eb03 0509 	add.w	r5, r3, r9
   d9d9e:	460a      	mov	r2, r1
   d9da0:	2300      	movs	r3, #0
   d9da2:	4601      	mov	r1, r0
   d9da4:	e9cd 1200 	strd	r1, r2, [sp]
   d9da8:	9300      	str	r3, [sp, #0]
   d9daa:	e9dd 8900 	ldrd	r8, r9, [sp]
   d9dae:	2400      	movs	r4, #0
   d9db0:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d9db4:	462b      	mov	r3, r5
   d9db6:	4622      	mov	r2, r4
   d9db8:	4640      	mov	r0, r8
   d9dba:	4649      	mov	r1, r9
   d9dbc:	f002 f95e 	bl	dc07c <__aeabi_dmul>
   d9dc0:	4602      	mov	r2, r0
   d9dc2:	460b      	mov	r3, r1
   d9dc4:	ec51 0b1a 	vmov	r0, r1, d10
   d9dc8:	f001 ffa0 	bl	dbd0c <__aeabi_dsub>
   d9dcc:	ec41 0b17 	vmov	d7, r0, r1
   d9dd0:	ec53 2b18 	vmov	r2, r3, d8
   d9dd4:	4620      	mov	r0, r4
   d9dd6:	4629      	mov	r1, r5
   d9dd8:	ec55 4b17 	vmov	r4, r5, d7
   d9ddc:	f001 ff96 	bl	dbd0c <__aeabi_dsub>
   d9de0:	4602      	mov	r2, r0
   d9de2:	460b      	mov	r3, r1
   d9de4:	4650      	mov	r0, sl
   d9de6:	4659      	mov	r1, fp
   d9de8:	f001 ff90 	bl	dbd0c <__aeabi_dsub>
   d9dec:	4642      	mov	r2, r8
   d9dee:	464b      	mov	r3, r9
   d9df0:	f002 f944 	bl	dc07c <__aeabi_dmul>
   d9df4:	4602      	mov	r2, r0
   d9df6:	460b      	mov	r3, r1
   d9df8:	4620      	mov	r0, r4
   d9dfa:	4629      	mov	r1, r5
   d9dfc:	f001 ff86 	bl	dbd0c <__aeabi_dsub>
   d9e00:	ec53 2b19 	vmov	r2, r3, d9
   d9e04:	f002 f93a 	bl	dc07c <__aeabi_dmul>
   d9e08:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d9e0c:	4604      	mov	r4, r0
   d9e0e:	460d      	mov	r5, r1
   d9e10:	4652      	mov	r2, sl
   d9e12:	465b      	mov	r3, fp
   d9e14:	4650      	mov	r0, sl
   d9e16:	4659      	mov	r1, fp
   d9e18:	f002 f930 	bl	dc07c <__aeabi_dmul>
   d9e1c:	a380      	add	r3, pc, #512	; (adr r3, da020 <__ieee754_pow+0x560>)
   d9e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e22:	ec45 4b1a 	vmov	d10, r4, r5
   d9e26:	4604      	mov	r4, r0
   d9e28:	460d      	mov	r5, r1
   d9e2a:	f002 f927 	bl	dc07c <__aeabi_dmul>
   d9e2e:	a37e      	add	r3, pc, #504	; (adr r3, da028 <__ieee754_pow+0x568>)
   d9e30:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e34:	f001 ff6c 	bl	dbd10 <__adddf3>
   d9e38:	4622      	mov	r2, r4
   d9e3a:	462b      	mov	r3, r5
   d9e3c:	f002 f91e 	bl	dc07c <__aeabi_dmul>
   d9e40:	a37b      	add	r3, pc, #492	; (adr r3, da030 <__ieee754_pow+0x570>)
   d9e42:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e46:	f001 ff63 	bl	dbd10 <__adddf3>
   d9e4a:	4622      	mov	r2, r4
   d9e4c:	462b      	mov	r3, r5
   d9e4e:	f002 f915 	bl	dc07c <__aeabi_dmul>
   d9e52:	a379      	add	r3, pc, #484	; (adr r3, da038 <__ieee754_pow+0x578>)
   d9e54:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e58:	f001 ff5a 	bl	dbd10 <__adddf3>
   d9e5c:	4622      	mov	r2, r4
   d9e5e:	462b      	mov	r3, r5
   d9e60:	f002 f90c 	bl	dc07c <__aeabi_dmul>
   d9e64:	a376      	add	r3, pc, #472	; (adr r3, da040 <__ieee754_pow+0x580>)
   d9e66:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e6a:	f001 ff51 	bl	dbd10 <__adddf3>
   d9e6e:	4622      	mov	r2, r4
   d9e70:	462b      	mov	r3, r5
   d9e72:	f002 f903 	bl	dc07c <__aeabi_dmul>
   d9e76:	a374      	add	r3, pc, #464	; (adr r3, da048 <__ieee754_pow+0x588>)
   d9e78:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e7c:	f001 ff48 	bl	dbd10 <__adddf3>
   d9e80:	4622      	mov	r2, r4
   d9e82:	462b      	mov	r3, r5
   d9e84:	4604      	mov	r4, r0
   d9e86:	460d      	mov	r5, r1
   d9e88:	4610      	mov	r0, r2
   d9e8a:	4619      	mov	r1, r3
   d9e8c:	f002 f8f6 	bl	dc07c <__aeabi_dmul>
   d9e90:	4602      	mov	r2, r0
   d9e92:	460b      	mov	r3, r1
   d9e94:	4620      	mov	r0, r4
   d9e96:	4629      	mov	r1, r5
   d9e98:	f002 f8f0 	bl	dc07c <__aeabi_dmul>
   d9e9c:	4642      	mov	r2, r8
   d9e9e:	4604      	mov	r4, r0
   d9ea0:	460d      	mov	r5, r1
   d9ea2:	464b      	mov	r3, r9
   d9ea4:	4650      	mov	r0, sl
   d9ea6:	4659      	mov	r1, fp
   d9ea8:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d9eac:	f001 ff30 	bl	dbd10 <__adddf3>
   d9eb0:	ec53 2b1a 	vmov	r2, r3, d10
   d9eb4:	f002 f8e2 	bl	dc07c <__aeabi_dmul>
   d9eb8:	4622      	mov	r2, r4
   d9eba:	462b      	mov	r3, r5
   d9ebc:	f001 ff28 	bl	dbd10 <__adddf3>
   d9ec0:	4642      	mov	r2, r8
   d9ec2:	4604      	mov	r4, r0
   d9ec4:	460d      	mov	r5, r1
   d9ec6:	464b      	mov	r3, r9
   d9ec8:	4640      	mov	r0, r8
   d9eca:	4649      	mov	r1, r9
   d9ecc:	f002 f8d6 	bl	dc07c <__aeabi_dmul>
   d9ed0:	ec45 4b19 	vmov	d9, r4, r5
   d9ed4:	4b69      	ldr	r3, [pc, #420]	; (da07c <__ieee754_pow+0x5bc>)
   d9ed6:	2200      	movs	r2, #0
   d9ed8:	4682      	mov	sl, r0
   d9eda:	468b      	mov	fp, r1
   d9edc:	f001 ff18 	bl	dbd10 <__adddf3>
   d9ee0:	ec53 2b19 	vmov	r2, r3, d9
   d9ee4:	f001 ff14 	bl	dbd10 <__adddf3>
   d9ee8:	9c00      	ldr	r4, [sp, #0]
   d9eea:	460d      	mov	r5, r1
   d9eec:	4622      	mov	r2, r4
   d9eee:	462b      	mov	r3, r5
   d9ef0:	4640      	mov	r0, r8
   d9ef2:	4649      	mov	r1, r9
   d9ef4:	f002 f8c2 	bl	dc07c <__aeabi_dmul>
   d9ef8:	4b60      	ldr	r3, [pc, #384]	; (da07c <__ieee754_pow+0x5bc>)
   d9efa:	4680      	mov	r8, r0
   d9efc:	4689      	mov	r9, r1
   d9efe:	2200      	movs	r2, #0
   d9f00:	4620      	mov	r0, r4
   d9f02:	4629      	mov	r1, r5
   d9f04:	f001 ff02 	bl	dbd0c <__aeabi_dsub>
   d9f08:	4652      	mov	r2, sl
   d9f0a:	465b      	mov	r3, fp
   d9f0c:	f001 fefe 	bl	dbd0c <__aeabi_dsub>
   d9f10:	4602      	mov	r2, r0
   d9f12:	460b      	mov	r3, r1
   d9f14:	ec51 0b19 	vmov	r0, r1, d9
   d9f18:	f001 fef8 	bl	dbd0c <__aeabi_dsub>
   d9f1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d9f20:	f002 f8ac 	bl	dc07c <__aeabi_dmul>
   d9f24:	ec49 8b18 	vmov	d8, r8, r9
   d9f28:	4622      	mov	r2, r4
   d9f2a:	4680      	mov	r8, r0
   d9f2c:	4689      	mov	r9, r1
   d9f2e:	462b      	mov	r3, r5
   d9f30:	ec51 0b1a 	vmov	r0, r1, d10
   d9f34:	f002 f8a2 	bl	dc07c <__aeabi_dmul>
   d9f38:	4602      	mov	r2, r0
   d9f3a:	460b      	mov	r3, r1
   d9f3c:	4640      	mov	r0, r8
   d9f3e:	4649      	mov	r1, r9
   d9f40:	f001 fee6 	bl	dbd10 <__adddf3>
   d9f44:	4682      	mov	sl, r0
   d9f46:	468b      	mov	fp, r1
   d9f48:	4652      	mov	r2, sl
   d9f4a:	465b      	mov	r3, fp
   d9f4c:	ec51 0b18 	vmov	r0, r1, d8
   d9f50:	f001 fede 	bl	dbd10 <__adddf3>
   d9f54:	9c00      	ldr	r4, [sp, #0]
   d9f56:	a33e      	add	r3, pc, #248	; (adr r3, da050 <__ieee754_pow+0x590>)
   d9f58:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f5c:	4620      	mov	r0, r4
   d9f5e:	460d      	mov	r5, r1
   d9f60:	f002 f88c 	bl	dc07c <__aeabi_dmul>
   d9f64:	ec53 2b18 	vmov	r2, r3, d8
   d9f68:	4680      	mov	r8, r0
   d9f6a:	4689      	mov	r9, r1
   d9f6c:	4620      	mov	r0, r4
   d9f6e:	4629      	mov	r1, r5
   d9f70:	f001 fecc 	bl	dbd0c <__aeabi_dsub>
   d9f74:	4602      	mov	r2, r0
   d9f76:	460b      	mov	r3, r1
   d9f78:	4650      	mov	r0, sl
   d9f7a:	4659      	mov	r1, fp
   d9f7c:	f001 fec6 	bl	dbd0c <__aeabi_dsub>
   d9f80:	a335      	add	r3, pc, #212	; (adr r3, da058 <__ieee754_pow+0x598>)
   d9f82:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f86:	f002 f879 	bl	dc07c <__aeabi_dmul>
   d9f8a:	ec49 8b19 	vmov	d9, r8, r9
   d9f8e:	a334      	add	r3, pc, #208	; (adr r3, da060 <__ieee754_pow+0x5a0>)
   d9f90:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f94:	4680      	mov	r8, r0
   d9f96:	4689      	mov	r9, r1
   d9f98:	4620      	mov	r0, r4
   d9f9a:	4629      	mov	r1, r5
   d9f9c:	f002 f86e 	bl	dc07c <__aeabi_dmul>
   d9fa0:	4602      	mov	r2, r0
   d9fa2:	460b      	mov	r3, r1
   d9fa4:	4640      	mov	r0, r8
   d9fa6:	4649      	mov	r1, r9
   d9fa8:	f001 feb2 	bl	dbd10 <__adddf3>
   d9fac:	ec53 2b1c 	vmov	r2, r3, d12
   d9fb0:	f001 feae 	bl	dbd10 <__adddf3>
   d9fb4:	4682      	mov	sl, r0
   d9fb6:	9807      	ldr	r0, [sp, #28]
   d9fb8:	468b      	mov	fp, r1
   d9fba:	f001 fff5 	bl	dbfa8 <__aeabi_i2d>
   d9fbe:	4652      	mov	r2, sl
   d9fc0:	4680      	mov	r8, r0
   d9fc2:	4689      	mov	r9, r1
   d9fc4:	465b      	mov	r3, fp
   d9fc6:	ec51 0b19 	vmov	r0, r1, d9
   d9fca:	f001 fea1 	bl	dbd10 <__adddf3>
   d9fce:	ec53 2b1b 	vmov	r2, r3, d11
   d9fd2:	f001 fe9d 	bl	dbd10 <__adddf3>
   d9fd6:	4642      	mov	r2, r8
   d9fd8:	464b      	mov	r3, r9
   d9fda:	f001 fe99 	bl	dbd10 <__adddf3>
   d9fde:	9c00      	ldr	r4, [sp, #0]
   d9fe0:	4642      	mov	r2, r8
   d9fe2:	464b      	mov	r3, r9
   d9fe4:	4620      	mov	r0, r4
   d9fe6:	460d      	mov	r5, r1
   d9fe8:	f001 fe90 	bl	dbd0c <__aeabi_dsub>
   d9fec:	ec53 2b1b 	vmov	r2, r3, d11
   d9ff0:	f001 fe8c 	bl	dbd0c <__aeabi_dsub>
   d9ff4:	ec53 2b19 	vmov	r2, r3, d9
   d9ff8:	f001 fe88 	bl	dbd0c <__aeabi_dsub>
   d9ffc:	4602      	mov	r2, r0
   d9ffe:	460b      	mov	r3, r1
   da000:	4650      	mov	r0, sl
   da002:	4659      	mov	r1, fp
   da004:	f001 fe82 	bl	dbd0c <__aeabi_dsub>
   da008:	4682      	mov	sl, r0
   da00a:	468b      	mov	fp, r1
   da00c:	e038      	b.n	da080 <__ieee754_pow+0x5c0>
   da00e:	bf00      	nop
	...
   da01c:	3ff00000 	.word	0x3ff00000
   da020:	4a454eef 	.word	0x4a454eef
   da024:	3fca7e28 	.word	0x3fca7e28
   da028:	93c9db65 	.word	0x93c9db65
   da02c:	3fcd864a 	.word	0x3fcd864a
   da030:	a91d4101 	.word	0xa91d4101
   da034:	3fd17460 	.word	0x3fd17460
   da038:	518f264d 	.word	0x518f264d
   da03c:	3fd55555 	.word	0x3fd55555
   da040:	db6fabff 	.word	0xdb6fabff
   da044:	3fdb6db6 	.word	0x3fdb6db6
   da048:	33333303 	.word	0x33333303
   da04c:	3fe33333 	.word	0x3fe33333
   da050:	e0000000 	.word	0xe0000000
   da054:	3feec709 	.word	0x3feec709
   da058:	dc3a03fd 	.word	0xdc3a03fd
   da05c:	3feec709 	.word	0x3feec709
   da060:	145b01f5 	.word	0x145b01f5
   da064:	be3e2fe0 	.word	0xbe3e2fe0
   da068:	7ff00000 	.word	0x7ff00000
   da06c:	43400000 	.word	0x43400000
   da070:	0003988e 	.word	0x0003988e
   da074:	000bb679 	.word	0x000bb679
   da078:	3ff00000 	.word	0x3ff00000
   da07c:	40080000 	.word	0x40080000
   da080:	9b03      	ldr	r3, [sp, #12]
   da082:	9a06      	ldr	r2, [sp, #24]
   da084:	3b01      	subs	r3, #1
   da086:	4313      	orrs	r3, r2
   da088:	f040 8178 	bne.w	da37c <__ieee754_pow+0x8bc>
   da08c:	ed9f 7bc4 	vldr	d7, [pc, #784]	; da3a0 <__ieee754_pow+0x8e0>
   da090:	eeb0 9a47 	vmov.f32	s18, s14
   da094:	eef0 9a67 	vmov.f32	s19, s15
   da098:	2300      	movs	r3, #0
   da09a:	e9cd 6700 	strd	r6, r7, [sp]
   da09e:	9300      	str	r3, [sp, #0]
   da0a0:	e9dd 8900 	ldrd	r8, r9, [sp]
   da0a4:	4630      	mov	r0, r6
   da0a6:	4642      	mov	r2, r8
   da0a8:	4639      	mov	r1, r7
   da0aa:	464b      	mov	r3, r9
   da0ac:	f001 fe2e 	bl	dbd0c <__aeabi_dsub>
   da0b0:	4622      	mov	r2, r4
   da0b2:	462b      	mov	r3, r5
   da0b4:	f001 ffe2 	bl	dc07c <__aeabi_dmul>
   da0b8:	4632      	mov	r2, r6
   da0ba:	463b      	mov	r3, r7
   da0bc:	4606      	mov	r6, r0
   da0be:	460f      	mov	r7, r1
   da0c0:	4650      	mov	r0, sl
   da0c2:	4659      	mov	r1, fp
   da0c4:	f001 ffda 	bl	dc07c <__aeabi_dmul>
   da0c8:	4602      	mov	r2, r0
   da0ca:	460b      	mov	r3, r1
   da0cc:	4630      	mov	r0, r6
   da0ce:	4639      	mov	r1, r7
   da0d0:	f001 fe1e 	bl	dbd10 <__adddf3>
   da0d4:	4642      	mov	r2, r8
   da0d6:	4682      	mov	sl, r0
   da0d8:	468b      	mov	fp, r1
   da0da:	464b      	mov	r3, r9
   da0dc:	4620      	mov	r0, r4
   da0de:	4629      	mov	r1, r5
   da0e0:	f001 ffcc 	bl	dc07c <__aeabi_dmul>
   da0e4:	4606      	mov	r6, r0
   da0e6:	460f      	mov	r7, r1
   da0e8:	463b      	mov	r3, r7
   da0ea:	4650      	mov	r0, sl
   da0ec:	4659      	mov	r1, fp
   da0ee:	4632      	mov	r2, r6
   da0f0:	f001 fe0e 	bl	dbd10 <__adddf3>
   da0f4:	4bc4      	ldr	r3, [pc, #784]	; (da408 <__ieee754_pow+0x948>)
   da0f6:	4299      	cmp	r1, r3
   da0f8:	4604      	mov	r4, r0
   da0fa:	460d      	mov	r5, r1
   da0fc:	4688      	mov	r8, r1
   da0fe:	f340 8117 	ble.w	da330 <__ieee754_pow+0x870>
   da102:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   da106:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   da10a:	4303      	orrs	r3, r0
   da10c:	f040 822a 	bne.w	da564 <__ieee754_pow+0xaa4>
   da110:	a3a5      	add	r3, pc, #660	; (adr r3, da3a8 <__ieee754_pow+0x8e8>)
   da112:	e9d3 2300 	ldrd	r2, r3, [r3]
   da116:	4650      	mov	r0, sl
   da118:	4659      	mov	r1, fp
   da11a:	f001 fdf9 	bl	dbd10 <__adddf3>
   da11e:	4632      	mov	r2, r6
   da120:	ec41 0b18 	vmov	d8, r0, r1
   da124:	463b      	mov	r3, r7
   da126:	4620      	mov	r0, r4
   da128:	4629      	mov	r1, r5
   da12a:	f001 fdef 	bl	dbd0c <__aeabi_dsub>
   da12e:	4602      	mov	r2, r0
   da130:	460b      	mov	r3, r1
   da132:	ec51 0b18 	vmov	r0, r1, d8
   da136:	f002 fa31 	bl	dc59c <__aeabi_dcmpgt>
   da13a:	2800      	cmp	r0, #0
   da13c:	f040 8212 	bne.w	da564 <__ieee754_pow+0xaa4>
   da140:	f3c8 530a 	ubfx	r3, r8, #20, #11
   da144:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   da148:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   da14c:	fa42 f303 	asr.w	r3, r2, r3
   da150:	4443      	add	r3, r8
   da152:	49ae      	ldr	r1, [pc, #696]	; (da40c <__ieee754_pow+0x94c>)
   da154:	f3c3 520a 	ubfx	r2, r3, #20, #11
   da158:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   da15c:	fa41 fc02 	asr.w	ip, r1, r2
   da160:	f3c3 0513 	ubfx	r5, r3, #0, #20
   da164:	ea23 010c 	bic.w	r1, r3, ip
   da168:	f1c2 0414 	rsb	r4, r2, #20
   da16c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   da170:	f1b8 0f00 	cmp.w	r8, #0
   da174:	460b      	mov	r3, r1
   da176:	fa45 f104 	asr.w	r1, r5, r4
   da17a:	9103      	str	r1, [sp, #12]
   da17c:	f04f 0000 	mov.w	r0, #0
   da180:	bfb8      	it	lt
   da182:	4249      	neglt	r1, r1
   da184:	4602      	mov	r2, r0
   da186:	bfb8      	it	lt
   da188:	9103      	strlt	r1, [sp, #12]
   da18a:	4630      	mov	r0, r6
   da18c:	4639      	mov	r1, r7
   da18e:	f001 fdbd 	bl	dbd0c <__aeabi_dsub>
   da192:	4606      	mov	r6, r0
   da194:	460f      	mov	r7, r1
   da196:	463b      	mov	r3, r7
   da198:	4650      	mov	r0, sl
   da19a:	4659      	mov	r1, fp
   da19c:	4632      	mov	r2, r6
   da19e:	f001 fdb7 	bl	dbd10 <__adddf3>
   da1a2:	9b03      	ldr	r3, [sp, #12]
   da1a4:	051b      	lsls	r3, r3, #20
   da1a6:	9300      	str	r3, [sp, #0]
   da1a8:	460d      	mov	r5, r1
   da1aa:	2400      	movs	r4, #0
   da1ac:	a380      	add	r3, pc, #512	; (adr r3, da3b0 <__ieee754_pow+0x8f0>)
   da1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   da1b2:	4620      	mov	r0, r4
   da1b4:	4629      	mov	r1, r5
   da1b6:	f001 ff61 	bl	dc07c <__aeabi_dmul>
   da1ba:	4632      	mov	r2, r6
   da1bc:	4680      	mov	r8, r0
   da1be:	4689      	mov	r9, r1
   da1c0:	463b      	mov	r3, r7
   da1c2:	4620      	mov	r0, r4
   da1c4:	4629      	mov	r1, r5
   da1c6:	f001 fda1 	bl	dbd0c <__aeabi_dsub>
   da1ca:	4602      	mov	r2, r0
   da1cc:	460b      	mov	r3, r1
   da1ce:	4650      	mov	r0, sl
   da1d0:	4659      	mov	r1, fp
   da1d2:	f001 fd9b 	bl	dbd0c <__aeabi_dsub>
   da1d6:	a378      	add	r3, pc, #480	; (adr r3, da3b8 <__ieee754_pow+0x8f8>)
   da1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   da1dc:	f001 ff4e 	bl	dc07c <__aeabi_dmul>
   da1e0:	a377      	add	r3, pc, #476	; (adr r3, da3c0 <__ieee754_pow+0x900>)
   da1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   da1e6:	4606      	mov	r6, r0
   da1e8:	460f      	mov	r7, r1
   da1ea:	4620      	mov	r0, r4
   da1ec:	4629      	mov	r1, r5
   da1ee:	f001 ff45 	bl	dc07c <__aeabi_dmul>
   da1f2:	4602      	mov	r2, r0
   da1f4:	460b      	mov	r3, r1
   da1f6:	4630      	mov	r0, r6
   da1f8:	4639      	mov	r1, r7
   da1fa:	f001 fd89 	bl	dbd10 <__adddf3>
   da1fe:	4606      	mov	r6, r0
   da200:	460f      	mov	r7, r1
   da202:	4632      	mov	r2, r6
   da204:	463b      	mov	r3, r7
   da206:	4640      	mov	r0, r8
   da208:	4649      	mov	r1, r9
   da20a:	f001 fd81 	bl	dbd10 <__adddf3>
   da20e:	4642      	mov	r2, r8
   da210:	464b      	mov	r3, r9
   da212:	4604      	mov	r4, r0
   da214:	460d      	mov	r5, r1
   da216:	f001 fd79 	bl	dbd0c <__aeabi_dsub>
   da21a:	4602      	mov	r2, r0
   da21c:	460b      	mov	r3, r1
   da21e:	4630      	mov	r0, r6
   da220:	4639      	mov	r1, r7
   da222:	f001 fd73 	bl	dbd0c <__aeabi_dsub>
   da226:	4622      	mov	r2, r4
   da228:	4682      	mov	sl, r0
   da22a:	468b      	mov	fp, r1
   da22c:	462b      	mov	r3, r5
   da22e:	4620      	mov	r0, r4
   da230:	4629      	mov	r1, r5
   da232:	f001 ff23 	bl	dc07c <__aeabi_dmul>
   da236:	a364      	add	r3, pc, #400	; (adr r3, da3c8 <__ieee754_pow+0x908>)
   da238:	e9d3 2300 	ldrd	r2, r3, [r3]
   da23c:	4606      	mov	r6, r0
   da23e:	460f      	mov	r7, r1
   da240:	f001 ff1c 	bl	dc07c <__aeabi_dmul>
   da244:	a362      	add	r3, pc, #392	; (adr r3, da3d0 <__ieee754_pow+0x910>)
   da246:	e9d3 2300 	ldrd	r2, r3, [r3]
   da24a:	f001 fd5f 	bl	dbd0c <__aeabi_dsub>
   da24e:	4632      	mov	r2, r6
   da250:	463b      	mov	r3, r7
   da252:	f001 ff13 	bl	dc07c <__aeabi_dmul>
   da256:	a360      	add	r3, pc, #384	; (adr r3, da3d8 <__ieee754_pow+0x918>)
   da258:	e9d3 2300 	ldrd	r2, r3, [r3]
   da25c:	f001 fd58 	bl	dbd10 <__adddf3>
   da260:	4632      	mov	r2, r6
   da262:	463b      	mov	r3, r7
   da264:	f001 ff0a 	bl	dc07c <__aeabi_dmul>
   da268:	a35d      	add	r3, pc, #372	; (adr r3, da3e0 <__ieee754_pow+0x920>)
   da26a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da26e:	f001 fd4d 	bl	dbd0c <__aeabi_dsub>
   da272:	4632      	mov	r2, r6
   da274:	463b      	mov	r3, r7
   da276:	f001 ff01 	bl	dc07c <__aeabi_dmul>
   da27a:	a35b      	add	r3, pc, #364	; (adr r3, da3e8 <__ieee754_pow+0x928>)
   da27c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da280:	f001 fd46 	bl	dbd10 <__adddf3>
   da284:	4632      	mov	r2, r6
   da286:	463b      	mov	r3, r7
   da288:	f001 fef8 	bl	dc07c <__aeabi_dmul>
   da28c:	4602      	mov	r2, r0
   da28e:	460b      	mov	r3, r1
   da290:	4620      	mov	r0, r4
   da292:	4629      	mov	r1, r5
   da294:	f001 fd3a 	bl	dbd0c <__aeabi_dsub>
   da298:	4606      	mov	r6, r0
   da29a:	460f      	mov	r7, r1
   da29c:	4632      	mov	r2, r6
   da29e:	463b      	mov	r3, r7
   da2a0:	4620      	mov	r0, r4
   da2a2:	4629      	mov	r1, r5
   da2a4:	f001 feea 	bl	dc07c <__aeabi_dmul>
   da2a8:	2200      	movs	r2, #0
   da2aa:	4680      	mov	r8, r0
   da2ac:	4689      	mov	r9, r1
   da2ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da2b2:	4630      	mov	r0, r6
   da2b4:	4639      	mov	r1, r7
   da2b6:	f001 fd29 	bl	dbd0c <__aeabi_dsub>
   da2ba:	4602      	mov	r2, r0
   da2bc:	460b      	mov	r3, r1
   da2be:	4640      	mov	r0, r8
   da2c0:	4649      	mov	r1, r9
   da2c2:	f002 f805 	bl	dc2d0 <__aeabi_ddiv>
   da2c6:	4652      	mov	r2, sl
   da2c8:	4606      	mov	r6, r0
   da2ca:	460f      	mov	r7, r1
   da2cc:	465b      	mov	r3, fp
   da2ce:	4620      	mov	r0, r4
   da2d0:	4629      	mov	r1, r5
   da2d2:	f001 fed3 	bl	dc07c <__aeabi_dmul>
   da2d6:	4652      	mov	r2, sl
   da2d8:	465b      	mov	r3, fp
   da2da:	f001 fd19 	bl	dbd10 <__adddf3>
   da2de:	4602      	mov	r2, r0
   da2e0:	460b      	mov	r3, r1
   da2e2:	4630      	mov	r0, r6
   da2e4:	4639      	mov	r1, r7
   da2e6:	f001 fd11 	bl	dbd0c <__aeabi_dsub>
   da2ea:	4622      	mov	r2, r4
   da2ec:	462b      	mov	r3, r5
   da2ee:	f001 fd0d 	bl	dbd0c <__aeabi_dsub>
   da2f2:	4602      	mov	r2, r0
   da2f4:	460b      	mov	r3, r1
   da2f6:	2000      	movs	r0, #0
   da2f8:	4945      	ldr	r1, [pc, #276]	; (da410 <__ieee754_pow+0x950>)
   da2fa:	f001 fd07 	bl	dbd0c <__aeabi_dsub>
   da2fe:	460b      	mov	r3, r1
   da300:	9900      	ldr	r1, [sp, #0]
   da302:	4419      	add	r1, r3
   da304:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da308:	4602      	mov	r2, r0
   da30a:	f2c0 8169 	blt.w	da5e0 <__ieee754_pow+0xb20>
   da30e:	4610      	mov	r0, r2
   da310:	ec53 2b19 	vmov	r2, r3, d9
   da314:	f001 feb2 	bl	dc07c <__aeabi_dmul>
   da318:	e9cd 0100 	strd	r0, r1, [sp]
   da31c:	e41e      	b.n	d9b5c <__ieee754_pow+0x9c>
   da31e:	f1bb 0f00 	cmp.w	fp, #0
   da322:	f6ff ac95 	blt.w	d9c50 <__ieee754_pow+0x190>
   da326:	ed9f 7b32 	vldr	d7, [pc, #200]	; da3f0 <__ieee754_pow+0x930>
   da32a:	ed8d 7b00 	vstr	d7, [sp]
   da32e:	e415      	b.n	d9b5c <__ieee754_pow+0x9c>
   da330:	f8df c0e4 	ldr.w	ip, [pc, #228]	; da418 <__ieee754_pow+0x958>
   da334:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da338:	4563      	cmp	r3, ip
   da33a:	f340 810b 	ble.w	da554 <__ieee754_pow+0xa94>
   da33e:	4b35      	ldr	r3, [pc, #212]	; (da414 <__ieee754_pow+0x954>)
   da340:	440b      	add	r3, r1
   da342:	4303      	orrs	r3, r0
   da344:	d10a      	bne.n	da35c <__ieee754_pow+0x89c>
   da346:	4632      	mov	r2, r6
   da348:	463b      	mov	r3, r7
   da34a:	f001 fcdf 	bl	dbd0c <__aeabi_dsub>
   da34e:	4652      	mov	r2, sl
   da350:	465b      	mov	r3, fp
   da352:	f002 f919 	bl	dc588 <__aeabi_dcmpge>
   da356:	2800      	cmp	r0, #0
   da358:	f43f aef2 	beq.w	da140 <__ieee754_pow+0x680>
   da35c:	a326      	add	r3, pc, #152	; (adr r3, da3f8 <__ieee754_pow+0x938>)
   da35e:	e9d3 2300 	ldrd	r2, r3, [r3]
   da362:	ec51 0b19 	vmov	r0, r1, d9
   da366:	f001 fe89 	bl	dc07c <__aeabi_dmul>
   da36a:	a323      	add	r3, pc, #140	; (adr r3, da3f8 <__ieee754_pow+0x938>)
   da36c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da370:	f001 fe84 	bl	dc07c <__aeabi_dmul>
   da374:	e9cd 0100 	strd	r0, r1, [sp]
   da378:	f7ff bbf0 	b.w	d9b5c <__ieee754_pow+0x9c>
   da37c:	ed9f 7b20 	vldr	d7, [pc, #128]	; da400 <__ieee754_pow+0x940>
   da380:	eeb0 9a47 	vmov.f32	s18, s14
   da384:	eef0 9a67 	vmov.f32	s19, s15
   da388:	e686      	b.n	da098 <__ieee754_pow+0x5d8>
   da38a:	f1bb 0f00 	cmp.w	fp, #0
   da38e:	daca      	bge.n	da326 <__ieee754_pow+0x866>
   da390:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   da394:	9600      	str	r6, [sp, #0]
   da396:	9301      	str	r3, [sp, #4]
   da398:	f7ff bbe0 	b.w	d9b5c <__ieee754_pow+0x9c>
   da39c:	f3af 8000 	nop.w
   da3a0:	00000000 	.word	0x00000000
   da3a4:	bff00000 	.word	0xbff00000
   da3a8:	652b82fe 	.word	0x652b82fe
   da3ac:	3c971547 	.word	0x3c971547
   da3b0:	00000000 	.word	0x00000000
   da3b4:	3fe62e43 	.word	0x3fe62e43
   da3b8:	fefa39ef 	.word	0xfefa39ef
   da3bc:	3fe62e42 	.word	0x3fe62e42
   da3c0:	0ca86c39 	.word	0x0ca86c39
   da3c4:	be205c61 	.word	0xbe205c61
   da3c8:	72bea4d0 	.word	0x72bea4d0
   da3cc:	3e663769 	.word	0x3e663769
   da3d0:	c5d26bf1 	.word	0xc5d26bf1
   da3d4:	3ebbbd41 	.word	0x3ebbbd41
   da3d8:	af25de2c 	.word	0xaf25de2c
   da3dc:	3f11566a 	.word	0x3f11566a
   da3e0:	16bebd93 	.word	0x16bebd93
   da3e4:	3f66c16c 	.word	0x3f66c16c
   da3e8:	5555553e 	.word	0x5555553e
   da3ec:	3fc55555 	.word	0x3fc55555
	...
   da3f8:	c2f8f359 	.word	0xc2f8f359
   da3fc:	01a56e1f 	.word	0x01a56e1f
   da400:	00000000 	.word	0x00000000
   da404:	3ff00000 	.word	0x3ff00000
   da408:	408fffff 	.word	0x408fffff
   da40c:	000fffff 	.word	0x000fffff
   da410:	3ff00000 	.word	0x3ff00000
   da414:	3f6f3400 	.word	0x3f6f3400
   da418:	4090cbff 	.word	0x4090cbff
   da41c:	4598      	cmp	r8, r3
   da41e:	f6ff af7e 	blt.w	da31e <__ieee754_pow+0x85e>
   da422:	4b91      	ldr	r3, [pc, #580]	; (da668 <__ieee754_pow+0xba8>)
   da424:	4598      	cmp	r8, r3
   da426:	f73f ac0f 	bgt.w	d9c48 <__ieee754_pow+0x188>
   da42a:	4b8f      	ldr	r3, [pc, #572]	; (da668 <__ieee754_pow+0xba8>)
   da42c:	2200      	movs	r2, #0
   da42e:	e9dd 0100 	ldrd	r0, r1, [sp]
   da432:	f001 fc6b 	bl	dbd0c <__aeabi_dsub>
   da436:	a378      	add	r3, pc, #480	; (adr r3, da618 <__ieee754_pow+0xb58>)
   da438:	e9d3 2300 	ldrd	r2, r3, [r3]
   da43c:	4604      	mov	r4, r0
   da43e:	460d      	mov	r5, r1
   da440:	f001 fe1c 	bl	dc07c <__aeabi_dmul>
   da444:	a376      	add	r3, pc, #472	; (adr r3, da620 <__ieee754_pow+0xb60>)
   da446:	e9d3 2300 	ldrd	r2, r3, [r3]
   da44a:	4682      	mov	sl, r0
   da44c:	468b      	mov	fp, r1
   da44e:	4620      	mov	r0, r4
   da450:	4629      	mov	r1, r5
   da452:	f001 fe13 	bl	dc07c <__aeabi_dmul>
   da456:	4b85      	ldr	r3, [pc, #532]	; (da66c <__ieee754_pow+0xbac>)
   da458:	4680      	mov	r8, r0
   da45a:	4689      	mov	r9, r1
   da45c:	2200      	movs	r2, #0
   da45e:	4620      	mov	r0, r4
   da460:	4629      	mov	r1, r5
   da462:	f001 fe0b 	bl	dc07c <__aeabi_dmul>
   da466:	4602      	mov	r2, r0
   da468:	460b      	mov	r3, r1
   da46a:	a16f      	add	r1, pc, #444	; (adr r1, da628 <__ieee754_pow+0xb68>)
   da46c:	e9d1 0100 	ldrd	r0, r1, [r1]
   da470:	f001 fc4c 	bl	dbd0c <__aeabi_dsub>
   da474:	4622      	mov	r2, r4
   da476:	462b      	mov	r3, r5
   da478:	f001 fe00 	bl	dc07c <__aeabi_dmul>
   da47c:	4602      	mov	r2, r0
   da47e:	460b      	mov	r3, r1
   da480:	2000      	movs	r0, #0
   da482:	497b      	ldr	r1, [pc, #492]	; (da670 <__ieee754_pow+0xbb0>)
   da484:	f001 fc42 	bl	dbd0c <__aeabi_dsub>
   da488:	4622      	mov	r2, r4
   da48a:	462b      	mov	r3, r5
   da48c:	4604      	mov	r4, r0
   da48e:	460d      	mov	r5, r1
   da490:	4610      	mov	r0, r2
   da492:	4619      	mov	r1, r3
   da494:	f001 fdf2 	bl	dc07c <__aeabi_dmul>
   da498:	4602      	mov	r2, r0
   da49a:	460b      	mov	r3, r1
   da49c:	4620      	mov	r0, r4
   da49e:	4629      	mov	r1, r5
   da4a0:	f001 fdec 	bl	dc07c <__aeabi_dmul>
   da4a4:	a362      	add	r3, pc, #392	; (adr r3, da630 <__ieee754_pow+0xb70>)
   da4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   da4aa:	f001 fde7 	bl	dc07c <__aeabi_dmul>
   da4ae:	4602      	mov	r2, r0
   da4b0:	460b      	mov	r3, r1
   da4b2:	4640      	mov	r0, r8
   da4b4:	4649      	mov	r1, r9
   da4b6:	f001 fc29 	bl	dbd0c <__aeabi_dsub>
   da4ba:	4680      	mov	r8, r0
   da4bc:	4689      	mov	r9, r1
   da4be:	4650      	mov	r0, sl
   da4c0:	4659      	mov	r1, fp
   da4c2:	4642      	mov	r2, r8
   da4c4:	464b      	mov	r3, r9
   da4c6:	f001 fc23 	bl	dbd10 <__adddf3>
   da4ca:	2400      	movs	r4, #0
   da4cc:	4652      	mov	r2, sl
   da4ce:	465b      	mov	r3, fp
   da4d0:	4620      	mov	r0, r4
   da4d2:	460d      	mov	r5, r1
   da4d4:	f001 fc1a 	bl	dbd0c <__aeabi_dsub>
   da4d8:	4602      	mov	r2, r0
   da4da:	460b      	mov	r3, r1
   da4dc:	4640      	mov	r0, r8
   da4de:	4649      	mov	r1, r9
   da4e0:	f001 fc14 	bl	dbd0c <__aeabi_dsub>
   da4e4:	4682      	mov	sl, r0
   da4e6:	468b      	mov	fp, r1
   da4e8:	e5ca      	b.n	da080 <__ieee754_pow+0x5c0>
   da4ea:	ed9f 7b53 	vldr	d7, [pc, #332]	; da638 <__ieee754_pow+0xb78>
   da4ee:	eeb0 ba47 	vmov.f32	s22, s14
   da4f2:	eef0 ba67 	vmov.f32	s23, s15
   da4f6:	eeb0 ca47 	vmov.f32	s24, s14
   da4fa:	eef0 ca67 	vmov.f32	s25, s15
   da4fe:	ed9f 7b50 	vldr	d7, [pc, #320]	; da640 <__ieee754_pow+0xb80>
   da502:	f04f 0900 	mov.w	r9, #0
   da506:	ec54 3b17 	vmov	r3, r4, d7
   da50a:	e41d      	b.n	d9d48 <__ieee754_pow+0x288>
   da50c:	2000      	movs	r0, #0
   da50e:	f7ff bbf3 	b.w	d9cf8 <__ieee754_pow+0x238>
   da512:	4955      	ldr	r1, [pc, #340]	; (da668 <__ieee754_pow+0xba8>)
   da514:	4622      	mov	r2, r4
   da516:	462b      	mov	r3, r5
   da518:	2000      	movs	r0, #0
   da51a:	f001 fed9 	bl	dc2d0 <__aeabi_ddiv>
   da51e:	e9cd 0100 	strd	r0, r1, [sp]
   da522:	f7ff bb1b 	b.w	d9b5c <__ieee754_pow+0x9c>
   da526:	4622      	mov	r2, r4
   da528:	462b      	mov	r3, r5
   da52a:	4620      	mov	r0, r4
   da52c:	4629      	mov	r1, r5
   da52e:	f001 fda5 	bl	dc07c <__aeabi_dmul>
   da532:	e9cd 0100 	strd	r0, r1, [sp]
   da536:	f7ff bb11 	b.w	d9b5c <__ieee754_pow+0x9c>
   da53a:	2b00      	cmp	r3, #0
   da53c:	d142      	bne.n	da5c4 <__ieee754_pow+0xb04>
   da53e:	f1c1 0114 	rsb	r1, r1, #20
   da542:	fa4a f001 	asr.w	r0, sl, r1
   da546:	fa00 f101 	lsl.w	r1, r0, r1
   da54a:	4551      	cmp	r1, sl
   da54c:	d05a      	beq.n	da604 <__ieee754_pow+0xb44>
   da54e:	9303      	str	r3, [sp, #12]
   da550:	f7ff bae0 	b.w	d9b14 <__ieee754_pow+0x54>
   da554:	4a46      	ldr	r2, [pc, #280]	; (da670 <__ieee754_pow+0xbb0>)
   da556:	4293      	cmp	r3, r2
   da558:	dc5b      	bgt.n	da612 <__ieee754_pow+0xb52>
   da55a:	e9dd 1200 	ldrd	r1, r2, [sp]
   da55e:	9100      	str	r1, [sp, #0]
   da560:	9103      	str	r1, [sp, #12]
   da562:	e622      	b.n	da1aa <__ieee754_pow+0x6ea>
   da564:	a338      	add	r3, pc, #224	; (adr r3, da648 <__ieee754_pow+0xb88>)
   da566:	e9d3 2300 	ldrd	r2, r3, [r3]
   da56a:	ec51 0b19 	vmov	r0, r1, d9
   da56e:	f001 fd85 	bl	dc07c <__aeabi_dmul>
   da572:	a335      	add	r3, pc, #212	; (adr r3, da648 <__ieee754_pow+0xb88>)
   da574:	e9d3 2300 	ldrd	r2, r3, [r3]
   da578:	f001 fd80 	bl	dc07c <__aeabi_dmul>
   da57c:	e9cd 0100 	strd	r0, r1, [sp]
   da580:	f7ff baec 	b.w	d9b5c <__ieee754_pow+0x9c>
   da584:	9b03      	ldr	r3, [sp, #12]
   da586:	2b01      	cmp	r3, #1
   da588:	f47f aae8 	bne.w	d9b5c <__ieee754_pow+0x9c>
   da58c:	e9dd 2100 	ldrd	r2, r1, [sp]
   da590:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da594:	e9cd 2300 	strd	r2, r3, [sp]
   da598:	f7ff bae0 	b.w	d9b5c <__ieee754_pow+0x9c>
   da59c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; da650 <__ieee754_pow+0xb90>
   da5a0:	eeb0 ba47 	vmov.f32	s22, s14
   da5a4:	eef0 ba67 	vmov.f32	s23, s15
   da5a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; da658 <__ieee754_pow+0xb98>
   da5ac:	eeb0 ca47 	vmov.f32	s24, s14
   da5b0:	eef0 ca67 	vmov.f32	s25, s15
   da5b4:	ed9f 7b2a 	vldr	d7, [pc, #168]	; da660 <__ieee754_pow+0xba0>
   da5b8:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   da5bc:	ec54 3b17 	vmov	r3, r4, d7
   da5c0:	f7ff bbc2 	b.w	d9d48 <__ieee754_pow+0x288>
   da5c4:	ec45 4b10 	vmov	d0, r4, r5
   da5c8:	9203      	str	r2, [sp, #12]
   da5ca:	f001 f8bd 	bl	db748 <fabs>
   da5ce:	9a03      	ldr	r2, [sp, #12]
   da5d0:	ed8d 0b00 	vstr	d0, [sp]
   da5d4:	2a00      	cmp	r2, #0
   da5d6:	f47f ab61 	bne.w	d9c9c <__ieee754_pow+0x1dc>
   da5da:	9203      	str	r2, [sp, #12]
   da5dc:	f7ff baf5 	b.w	d9bca <__ieee754_pow+0x10a>
   da5e0:	9803      	ldr	r0, [sp, #12]
   da5e2:	ec43 2b10 	vmov	d0, r2, r3
   da5e6:	f001 f963 	bl	db8b0 <scalbn>
   da5ea:	ec51 0b10 	vmov	r0, r1, d0
   da5ee:	e68f      	b.n	da310 <__ieee754_pow+0x850>
   da5f0:	f000 0001 	and.w	r0, r0, #1
   da5f4:	f1c0 0102 	rsb	r1, r0, #2
   da5f8:	9103      	str	r1, [sp, #12]
   da5fa:	2b00      	cmp	r3, #0
   da5fc:	f43f aa8a 	beq.w	d9b14 <__ieee754_pow+0x54>
   da600:	f7ff bada 	b.w	d9bb8 <__ieee754_pow+0xf8>
   da604:	f000 0001 	and.w	r0, r0, #1
   da608:	f1c0 0302 	rsb	r3, r0, #2
   da60c:	9303      	str	r3, [sp, #12]
   da60e:	f7ff ba81 	b.w	d9b14 <__ieee754_pow+0x54>
   da612:	151b      	asrs	r3, r3, #20
   da614:	e596      	b.n	da144 <__ieee754_pow+0x684>
   da616:	bf00      	nop
   da618:	60000000 	.word	0x60000000
   da61c:	3ff71547 	.word	0x3ff71547
   da620:	f85ddf44 	.word	0xf85ddf44
   da624:	3e54ae0b 	.word	0x3e54ae0b
   da628:	55555555 	.word	0x55555555
   da62c:	3fd55555 	.word	0x3fd55555
   da630:	652b82fe 	.word	0x652b82fe
   da634:	3ff71547 	.word	0x3ff71547
	...
   da644:	3ff00000 	.word	0x3ff00000
   da648:	8800759c 	.word	0x8800759c
   da64c:	7e37e43c 	.word	0x7e37e43c
   da650:	40000000 	.word	0x40000000
   da654:	3fe2b803 	.word	0x3fe2b803
   da658:	43cfd006 	.word	0x43cfd006
   da65c:	3e4cfdeb 	.word	0x3e4cfdeb
   da660:	00000000 	.word	0x00000000
   da664:	3ff80000 	.word	0x3ff80000
   da668:	3ff00000 	.word	0x3ff00000
   da66c:	3fd00000 	.word	0x3fd00000
   da670:	3fe00000 	.word	0x3fe00000

000da674 <__ieee754_sqrt>:
   da674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da678:	4a5f      	ldr	r2, [pc, #380]	; (da7f8 <__ieee754_sqrt+0x184>)
   da67a:	ec57 6b10 	vmov	r6, r7, d0
   da67e:	43ba      	bics	r2, r7
   da680:	f000 8098 	beq.w	da7b4 <__ieee754_sqrt+0x140>
   da684:	2f00      	cmp	r7, #0
   da686:	ee10 4a10 	vmov	r4, s0
   da68a:	463b      	mov	r3, r7
   da68c:	dd4e      	ble.n	da72c <__ieee754_sqrt+0xb8>
   da68e:	1539      	asrs	r1, r7, #20
   da690:	d05b      	beq.n	da74a <__ieee754_sqrt+0xd6>
   da692:	f3c3 0313 	ubfx	r3, r3, #0, #20
   da696:	07ca      	lsls	r2, r1, #31
   da698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da69c:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   da6a0:	d403      	bmi.n	da6aa <__ieee754_sqrt+0x36>
   da6a2:	005b      	lsls	r3, r3, #1
   da6a4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   da6a8:	0064      	lsls	r4, r4, #1
   da6aa:	0fe2      	lsrs	r2, r4, #31
   da6ac:	f04f 0c00 	mov.w	ip, #0
   da6b0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   da6b4:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   da6b8:	0064      	lsls	r4, r4, #1
   da6ba:	4666      	mov	r6, ip
   da6bc:	2516      	movs	r5, #22
   da6be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   da6c2:	18b1      	adds	r1, r6, r2
   da6c4:	4299      	cmp	r1, r3
   da6c6:	dc02      	bgt.n	da6ce <__ieee754_sqrt+0x5a>
   da6c8:	1a5b      	subs	r3, r3, r1
   da6ca:	188e      	adds	r6, r1, r2
   da6cc:	4494      	add	ip, r2
   da6ce:	005b      	lsls	r3, r3, #1
   da6d0:	3d01      	subs	r5, #1
   da6d2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   da6d6:	ea4f 0252 	mov.w	r2, r2, lsr #1
   da6da:	ea4f 0444 	mov.w	r4, r4, lsl #1
   da6de:	d1f0      	bne.n	da6c2 <__ieee754_sqrt+0x4e>
   da6e0:	462f      	mov	r7, r5
   da6e2:	2020      	movs	r0, #32
   da6e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   da6e8:	e009      	b.n	da6fe <__ieee754_sqrt+0x8a>
   da6ea:	d03e      	beq.n	da76a <__ieee754_sqrt+0xf6>
   da6ec:	0fe1      	lsrs	r1, r4, #31
   da6ee:	3801      	subs	r0, #1
   da6f0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   da6f4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   da6f8:	ea4f 0444 	mov.w	r4, r4, lsl #1
   da6fc:	d03e      	beq.n	da77c <__ieee754_sqrt+0x108>
   da6fe:	42b3      	cmp	r3, r6
   da700:	eb02 0105 	add.w	r1, r2, r5
   da704:	ddf1      	ble.n	da6ea <__ieee754_sqrt+0x76>
   da706:	2900      	cmp	r1, #0
   da708:	eb01 0502 	add.w	r5, r1, r2
   da70c:	db09      	blt.n	da722 <__ieee754_sqrt+0xae>
   da70e:	46b0      	mov	r8, r6
   da710:	1b9b      	subs	r3, r3, r6
   da712:	42a1      	cmp	r1, r4
   da714:	bf88      	it	hi
   da716:	f103 33ff 	addhi.w	r3, r3, #4294967295
   da71a:	1a64      	subs	r4, r4, r1
   da71c:	4417      	add	r7, r2
   da71e:	4646      	mov	r6, r8
   da720:	e7e4      	b.n	da6ec <__ieee754_sqrt+0x78>
   da722:	2d00      	cmp	r5, #0
   da724:	dbf3      	blt.n	da70e <__ieee754_sqrt+0x9a>
   da726:	f106 0801 	add.w	r8, r6, #1
   da72a:	e7f1      	b.n	da710 <__ieee754_sqrt+0x9c>
   da72c:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   da730:	4332      	orrs	r2, r6
   da732:	d036      	beq.n	da7a2 <__ieee754_sqrt+0x12e>
   da734:	2f00      	cmp	r7, #0
   da736:	d14d      	bne.n	da7d4 <__ieee754_sqrt+0x160>
   da738:	4639      	mov	r1, r7
   da73a:	0ae2      	lsrs	r2, r4, #11
   da73c:	3915      	subs	r1, #21
   da73e:	0564      	lsls	r4, r4, #21
   da740:	4613      	mov	r3, r2
   da742:	2a00      	cmp	r2, #0
   da744:	d0f9      	beq.n	da73a <__ieee754_sqrt+0xc6>
   da746:	02d7      	lsls	r7, r2, #11
   da748:	d451      	bmi.n	da7ee <__ieee754_sqrt+0x17a>
   da74a:	2000      	movs	r0, #0
   da74c:	005b      	lsls	r3, r3, #1
   da74e:	02de      	lsls	r6, r3, #11
   da750:	4605      	mov	r5, r0
   da752:	f100 0001 	add.w	r0, r0, #1
   da756:	d5f9      	bpl.n	da74c <__ieee754_sqrt+0xd8>
   da758:	461a      	mov	r2, r3
   da75a:	4623      	mov	r3, r4
   da75c:	4084      	lsls	r4, r0
   da75e:	f1c0 0020 	rsb	r0, r0, #32
   da762:	40c3      	lsrs	r3, r0
   da764:	4313      	orrs	r3, r2
   da766:	1b49      	subs	r1, r1, r5
   da768:	e793      	b.n	da692 <__ieee754_sqrt+0x1e>
   da76a:	42a1      	cmp	r1, r4
   da76c:	d8be      	bhi.n	da6ec <__ieee754_sqrt+0x78>
   da76e:	2900      	cmp	r1, #0
   da770:	eb01 0502 	add.w	r5, r1, r2
   da774:	dbd5      	blt.n	da722 <__ieee754_sqrt+0xae>
   da776:	4698      	mov	r8, r3
   da778:	2300      	movs	r3, #0
   da77a:	e7ce      	b.n	da71a <__ieee754_sqrt+0xa6>
   da77c:	4323      	orrs	r3, r4
   da77e:	d112      	bne.n	da7a6 <__ieee754_sqrt+0x132>
   da780:	0878      	lsrs	r0, r7, #1
   da782:	ea4f 016c 	mov.w	r1, ip, asr #1
   da786:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   da78a:	f01c 0f01 	tst.w	ip, #1
   da78e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   da792:	bf18      	it	ne
   da794:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   da798:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   da79c:	4602      	mov	r2, r0
   da79e:	ec43 2b10 	vmov	d0, r2, r3
   da7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da7a6:	1c7b      	adds	r3, r7, #1
   da7a8:	bf16      	itet	ne
   da7aa:	1c78      	addne	r0, r7, #1
   da7ac:	f10c 0c01 	addeq.w	ip, ip, #1
   da7b0:	0840      	lsrne	r0, r0, #1
   da7b2:	e7e6      	b.n	da782 <__ieee754_sqrt+0x10e>
   da7b4:	ee10 2a10 	vmov	r2, s0
   da7b8:	ee10 0a10 	vmov	r0, s0
   da7bc:	463b      	mov	r3, r7
   da7be:	4639      	mov	r1, r7
   da7c0:	f001 fc5c 	bl	dc07c <__aeabi_dmul>
   da7c4:	4632      	mov	r2, r6
   da7c6:	463b      	mov	r3, r7
   da7c8:	f001 faa2 	bl	dbd10 <__adddf3>
   da7cc:	ec41 0b10 	vmov	d0, r0, r1
   da7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da7d4:	ee10 2a10 	vmov	r2, s0
   da7d8:	4630      	mov	r0, r6
   da7da:	4639      	mov	r1, r7
   da7dc:	f001 fa96 	bl	dbd0c <__aeabi_dsub>
   da7e0:	4602      	mov	r2, r0
   da7e2:	460b      	mov	r3, r1
   da7e4:	f001 fd74 	bl	dc2d0 <__aeabi_ddiv>
   da7e8:	ec41 0b10 	vmov	d0, r0, r1
   da7ec:	e7d9      	b.n	da7a2 <__ieee754_sqrt+0x12e>
   da7ee:	4623      	mov	r3, r4
   da7f0:	2020      	movs	r0, #32
   da7f2:	f04f 35ff 	mov.w	r5, #4294967295
   da7f6:	e7b4      	b.n	da762 <__ieee754_sqrt+0xee>
   da7f8:	7ff00000 	.word	0x7ff00000

000da7fc <__ieee754_atan2f>:
   da7fc:	b510      	push	{r4, lr}
   da7fe:	b082      	sub	sp, #8
   da800:	edcd 0a01 	vstr	s1, [sp, #4]
   da804:	9b01      	ldr	r3, [sp, #4]
   da806:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   da80a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   da80e:	eef0 7a40 	vmov.f32	s15, s0
   da812:	dc30      	bgt.n	da876 <__ieee754_atan2f+0x7a>
   da814:	ee10 0a10 	vmov	r0, s0
   da818:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   da81c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   da820:	dc29      	bgt.n	da876 <__ieee754_atan2f+0x7a>
   da822:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   da826:	d042      	beq.n	da8ae <__ieee754_atan2f+0xb2>
   da828:	179c      	asrs	r4, r3, #30
   da82a:	f004 0402 	and.w	r4, r4, #2
   da82e:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   da832:	b331      	cbz	r1, da882 <__ieee754_atan2f+0x86>
   da834:	b37a      	cbz	r2, da896 <__ieee754_atan2f+0x9a>
   da836:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   da83a:	d040      	beq.n	da8be <__ieee754_atan2f+0xc2>
   da83c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   da840:	d029      	beq.n	da896 <__ieee754_atan2f+0x9a>
   da842:	1a8a      	subs	r2, r1, r2
   da844:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   da848:	ea4f 51e2 	mov.w	r1, r2, asr #23
   da84c:	da34      	bge.n	da8b8 <__ieee754_atan2f+0xbc>
   da84e:	2b00      	cmp	r3, #0
   da850:	da42      	bge.n	da8d8 <__ieee754_atan2f+0xdc>
   da852:	313c      	adds	r1, #60	; 0x3c
   da854:	da40      	bge.n	da8d8 <__ieee754_atan2f+0xdc>
   da856:	ed9f 0a34 	vldr	s0, [pc, #208]	; da928 <__ieee754_atan2f+0x12c>
   da85a:	2c01      	cmp	r4, #1
   da85c:	d04e      	beq.n	da8fc <__ieee754_atan2f+0x100>
   da85e:	2c02      	cmp	r4, #2
   da860:	d043      	beq.n	da8ea <__ieee754_atan2f+0xee>
   da862:	b164      	cbz	r4, da87e <__ieee754_atan2f+0x82>
   da864:	ed9f 7a31 	vldr	s14, [pc, #196]	; da92c <__ieee754_atan2f+0x130>
   da868:	eddf 7a31 	vldr	s15, [pc, #196]	; da930 <__ieee754_atan2f+0x134>
   da86c:	ee30 0a07 	vadd.f32	s0, s0, s14
   da870:	ee30 0a67 	vsub.f32	s0, s0, s15
   da874:	e003      	b.n	da87e <__ieee754_atan2f+0x82>
   da876:	ed9d 7a01 	vldr	s14, [sp, #4]
   da87a:	ee37 0a27 	vadd.f32	s0, s14, s15
   da87e:	b002      	add	sp, #8
   da880:	bd10      	pop	{r4, pc}
   da882:	2c02      	cmp	r4, #2
   da884:	d010      	beq.n	da8a8 <__ieee754_atan2f+0xac>
   da886:	ed9f 0a2b 	vldr	s0, [pc, #172]	; da934 <__ieee754_atan2f+0x138>
   da88a:	2c03      	cmp	r4, #3
   da88c:	bf18      	it	ne
   da88e:	eeb0 0a67 	vmovne.f32	s0, s15
   da892:	b002      	add	sp, #8
   da894:	bd10      	pop	{r4, pc}
   da896:	ed9f 0a28 	vldr	s0, [pc, #160]	; da938 <__ieee754_atan2f+0x13c>
   da89a:	eddf 7a28 	vldr	s15, [pc, #160]	; da93c <__ieee754_atan2f+0x140>
   da89e:	2800      	cmp	r0, #0
   da8a0:	bfb8      	it	lt
   da8a2:	eeb0 0a67 	vmovlt.f32	s0, s15
   da8a6:	e7ea      	b.n	da87e <__ieee754_atan2f+0x82>
   da8a8:	ed9f 0a21 	vldr	s0, [pc, #132]	; da930 <__ieee754_atan2f+0x134>
   da8ac:	e7e7      	b.n	da87e <__ieee754_atan2f+0x82>
   da8ae:	b002      	add	sp, #8
   da8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   da8b4:	f001 b88e 	b.w	db9d4 <atanf>
   da8b8:	ed9f 0a1f 	vldr	s0, [pc, #124]	; da938 <__ieee754_atan2f+0x13c>
   da8bc:	e7cd      	b.n	da85a <__ieee754_atan2f+0x5e>
   da8be:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   da8c2:	f104 34ff 	add.w	r4, r4, #4294967295
   da8c6:	d020      	beq.n	da90a <__ieee754_atan2f+0x10e>
   da8c8:	2c02      	cmp	r4, #2
   da8ca:	d826      	bhi.n	da91a <__ieee754_atan2f+0x11e>
   da8cc:	4b1c      	ldr	r3, [pc, #112]	; (da940 <__ieee754_atan2f+0x144>)
   da8ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da8d2:	ed94 0a00 	vldr	s0, [r4]
   da8d6:	e7d2      	b.n	da87e <__ieee754_atan2f+0x82>
   da8d8:	ed9d 7a01 	vldr	s14, [sp, #4]
   da8dc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   da8e0:	f001 f950 	bl	dbb84 <fabsf>
   da8e4:	f001 f876 	bl	db9d4 <atanf>
   da8e8:	e7b7      	b.n	da85a <__ieee754_atan2f+0x5e>
   da8ea:	ed9f 7a10 	vldr	s14, [pc, #64]	; da92c <__ieee754_atan2f+0x130>
   da8ee:	eddf 7a10 	vldr	s15, [pc, #64]	; da930 <__ieee754_atan2f+0x134>
   da8f2:	ee30 0a07 	vadd.f32	s0, s0, s14
   da8f6:	ee37 0ac0 	vsub.f32	s0, s15, s0
   da8fa:	e7c0      	b.n	da87e <__ieee754_atan2f+0x82>
   da8fc:	ee10 3a10 	vmov	r3, s0
   da900:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   da904:	ee00 3a10 	vmov	s0, r3
   da908:	e7b9      	b.n	da87e <__ieee754_atan2f+0x82>
   da90a:	2c02      	cmp	r4, #2
   da90c:	d808      	bhi.n	da920 <__ieee754_atan2f+0x124>
   da90e:	4b0d      	ldr	r3, [pc, #52]	; (da944 <__ieee754_atan2f+0x148>)
   da910:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da914:	ed94 0a00 	vldr	s0, [r4]
   da918:	e7b1      	b.n	da87e <__ieee754_atan2f+0x82>
   da91a:	ed9f 0a03 	vldr	s0, [pc, #12]	; da928 <__ieee754_atan2f+0x12c>
   da91e:	e7ae      	b.n	da87e <__ieee754_atan2f+0x82>
   da920:	ed9f 0a09 	vldr	s0, [pc, #36]	; da948 <__ieee754_atan2f+0x14c>
   da924:	e7ab      	b.n	da87e <__ieee754_atan2f+0x82>
   da926:	bf00      	nop
   da928:	00000000 	.word	0x00000000
   da92c:	33bbbd2e 	.word	0x33bbbd2e
   da930:	40490fdb 	.word	0x40490fdb
   da934:	c0490fdb 	.word	0xc0490fdb
   da938:	3fc90fdb 	.word	0x3fc90fdb
   da93c:	bfc90fdb 	.word	0xbfc90fdb
   da940:	000de050 	.word	0x000de050
   da944:	000de044 	.word	0x000de044
   da948:	3f490fdb 	.word	0x3f490fdb

000da94c <__ieee754_rem_pio2f>:
   da94c:	b570      	push	{r4, r5, r6, lr}
   da94e:	ee10 3a10 	vmov	r3, s0
   da952:	4a95      	ldr	r2, [pc, #596]	; (daba8 <__ieee754_rem_pio2f+0x25c>)
   da954:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   da958:	4294      	cmp	r4, r2
   da95a:	b086      	sub	sp, #24
   da95c:	4605      	mov	r5, r0
   da95e:	dd68      	ble.n	daa32 <__ieee754_rem_pio2f+0xe6>
   da960:	4a92      	ldr	r2, [pc, #584]	; (dabac <__ieee754_rem_pio2f+0x260>)
   da962:	4294      	cmp	r4, r2
   da964:	ee10 6a10 	vmov	r6, s0
   da968:	dc1a      	bgt.n	da9a0 <__ieee754_rem_pio2f+0x54>
   da96a:	2b00      	cmp	r3, #0
   da96c:	eddf 7a90 	vldr	s15, [pc, #576]	; dabb0 <__ieee754_rem_pio2f+0x264>
   da970:	4a90      	ldr	r2, [pc, #576]	; (dabb4 <__ieee754_rem_pio2f+0x268>)
   da972:	f024 040f 	bic.w	r4, r4, #15
   da976:	f340 80f1 	ble.w	dab5c <__ieee754_rem_pio2f+0x210>
   da97a:	4294      	cmp	r4, r2
   da97c:	ee70 7a67 	vsub.f32	s15, s0, s15
   da980:	d066      	beq.n	daa50 <__ieee754_rem_pio2f+0x104>
   da982:	ed9f 7a8d 	vldr	s14, [pc, #564]	; dabb8 <__ieee754_rem_pio2f+0x26c>
   da986:	ee77 6ac7 	vsub.f32	s13, s15, s14
   da98a:	2001      	movs	r0, #1
   da98c:	ee77 7ae6 	vsub.f32	s15, s15, s13
   da990:	edc5 6a00 	vstr	s13, [r5]
   da994:	ee77 7ac7 	vsub.f32	s15, s15, s14
   da998:	edc5 7a01 	vstr	s15, [r5, #4]
   da99c:	b006      	add	sp, #24
   da99e:	bd70      	pop	{r4, r5, r6, pc}
   da9a0:	4a86      	ldr	r2, [pc, #536]	; (dabbc <__ieee754_rem_pio2f+0x270>)
   da9a2:	4294      	cmp	r4, r2
   da9a4:	dd67      	ble.n	daa76 <__ieee754_rem_pio2f+0x12a>
   da9a6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   da9aa:	da49      	bge.n	daa40 <__ieee754_rem_pio2f+0xf4>
   da9ac:	15e2      	asrs	r2, r4, #23
   da9ae:	3a86      	subs	r2, #134	; 0x86
   da9b0:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   da9b4:	ee07 3a90 	vmov	s15, r3
   da9b8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   da9bc:	eddf 6a80 	vldr	s13, [pc, #512]	; dabc0 <__ieee754_rem_pio2f+0x274>
   da9c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   da9c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   da9c8:	ed8d 7a03 	vstr	s14, [sp, #12]
   da9cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
   da9d0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   da9d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   da9d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   da9dc:	ed8d 7a04 	vstr	s14, [sp, #16]
   da9e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
   da9e4:	eef5 7a40 	vcmp.f32	s15, #0.0
   da9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da9ec:	edcd 7a05 	vstr	s15, [sp, #20]
   da9f0:	f040 80a3 	bne.w	dab3a <__ieee754_rem_pio2f+0x1ee>
   da9f4:	eeb5 7a40 	vcmp.f32	s14, #0.0
   da9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da9fc:	bf14      	ite	ne
   da9fe:	2302      	movne	r3, #2
   daa00:	2301      	moveq	r3, #1
   daa02:	4970      	ldr	r1, [pc, #448]	; (dabc4 <__ieee754_rem_pio2f+0x278>)
   daa04:	9101      	str	r1, [sp, #4]
   daa06:	2102      	movs	r1, #2
   daa08:	9100      	str	r1, [sp, #0]
   daa0a:	a803      	add	r0, sp, #12
   daa0c:	4629      	mov	r1, r5
   daa0e:	f000 f969 	bl	dace4 <__kernel_rem_pio2f>
   daa12:	2e00      	cmp	r6, #0
   daa14:	dac2      	bge.n	da99c <__ieee754_rem_pio2f+0x50>
   daa16:	ed95 7a00 	vldr	s14, [r5]
   daa1a:	edd5 7a01 	vldr	s15, [r5, #4]
   daa1e:	eeb1 7a47 	vneg.f32	s14, s14
   daa22:	eef1 7a67 	vneg.f32	s15, s15
   daa26:	4240      	negs	r0, r0
   daa28:	ed85 7a00 	vstr	s14, [r5]
   daa2c:	edc5 7a01 	vstr	s15, [r5, #4]
   daa30:	e7b4      	b.n	da99c <__ieee754_rem_pio2f+0x50>
   daa32:	2200      	movs	r2, #0
   daa34:	ed85 0a00 	vstr	s0, [r5]
   daa38:	6042      	str	r2, [r0, #4]
   daa3a:	2000      	movs	r0, #0
   daa3c:	b006      	add	sp, #24
   daa3e:	bd70      	pop	{r4, r5, r6, pc}
   daa40:	ee70 7a40 	vsub.f32	s15, s0, s0
   daa44:	2000      	movs	r0, #0
   daa46:	edc5 7a01 	vstr	s15, [r5, #4]
   daa4a:	edc5 7a00 	vstr	s15, [r5]
   daa4e:	e7a5      	b.n	da99c <__ieee754_rem_pio2f+0x50>
   daa50:	eddf 6a5d 	vldr	s13, [pc, #372]	; dabc8 <__ieee754_rem_pio2f+0x27c>
   daa54:	ed9f 7a5d 	vldr	s14, [pc, #372]	; dabcc <__ieee754_rem_pio2f+0x280>
   daa58:	ee77 7ae6 	vsub.f32	s15, s15, s13
   daa5c:	2001      	movs	r0, #1
   daa5e:	ee77 6ac7 	vsub.f32	s13, s15, s14
   daa62:	ee77 7ae6 	vsub.f32	s15, s15, s13
   daa66:	edc5 6a00 	vstr	s13, [r5]
   daa6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   daa6e:	edc5 7a01 	vstr	s15, [r5, #4]
   daa72:	b006      	add	sp, #24
   daa74:	bd70      	pop	{r4, r5, r6, pc}
   daa76:	f001 f885 	bl	dbb84 <fabsf>
   daa7a:	eddf 6a55 	vldr	s13, [pc, #340]	; dabd0 <__ieee754_rem_pio2f+0x284>
   daa7e:	ed9f 6a4c 	vldr	s12, [pc, #304]	; dabb0 <__ieee754_rem_pio2f+0x264>
   daa82:	ed9f 7a4d 	vldr	s14, [pc, #308]	; dabb8 <__ieee754_rem_pio2f+0x26c>
   daa86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   daa8a:	eee0 7a26 	vfma.f32	s15, s0, s13
   daa8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   daa92:	ee17 0a90 	vmov	r0, s15
   daa96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   daa9a:	281f      	cmp	r0, #31
   daa9c:	eea6 0ac6 	vfms.f32	s0, s13, s12
   daaa0:	ee66 7a87 	vmul.f32	s15, s13, s14
   daaa4:	eeb1 6a66 	vneg.f32	s12, s13
   daaa8:	dc1e      	bgt.n	daae8 <__ieee754_rem_pio2f+0x19c>
   daaaa:	4a4a      	ldr	r2, [pc, #296]	; (dabd4 <__ieee754_rem_pio2f+0x288>)
   daaac:	1e41      	subs	r1, r0, #1
   daaae:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   daab2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   daab6:	4293      	cmp	r3, r2
   daab8:	d016      	beq.n	daae8 <__ieee754_rem_pio2f+0x19c>
   daaba:	ee30 7a67 	vsub.f32	s14, s0, s15
   daabe:	ed85 7a00 	vstr	s14, [r5]
   daac2:	ee30 0a47 	vsub.f32	s0, s0, s14
   daac6:	2e00      	cmp	r6, #0
   daac8:	ee30 0a67 	vsub.f32	s0, s0, s15
   daacc:	ed85 0a01 	vstr	s0, [r5, #4]
   daad0:	f6bf af64 	bge.w	da99c <__ieee754_rem_pio2f+0x50>
   daad4:	eeb1 7a47 	vneg.f32	s14, s14
   daad8:	eeb1 0a40 	vneg.f32	s0, s0
   daadc:	ed85 7a00 	vstr	s14, [r5]
   daae0:	ed85 0a01 	vstr	s0, [r5, #4]
   daae4:	4240      	negs	r0, r0
   daae6:	e759      	b.n	da99c <__ieee754_rem_pio2f+0x50>
   daae8:	ee30 7a67 	vsub.f32	s14, s0, s15
   daaec:	15e2      	asrs	r2, r4, #23
   daaee:	ee17 3a10 	vmov	r3, s14
   daaf2:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   daaf6:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   daafa:	2c08      	cmp	r4, #8
   daafc:	dddf      	ble.n	daabe <__ieee754_rem_pio2f+0x172>
   daafe:	eddf 7a32 	vldr	s15, [pc, #200]	; dabc8 <__ieee754_rem_pio2f+0x27c>
   dab02:	ed9f 7a32 	vldr	s14, [pc, #200]	; dabcc <__ieee754_rem_pio2f+0x280>
   dab06:	eef0 5a40 	vmov.f32	s11, s0
   dab0a:	eee6 5a27 	vfma.f32	s11, s12, s15
   dab0e:	ee30 0a65 	vsub.f32	s0, s0, s11
   dab12:	eea6 0a27 	vfma.f32	s0, s12, s15
   dab16:	eef0 7a40 	vmov.f32	s15, s0
   dab1a:	eed6 7a87 	vfnms.f32	s15, s13, s14
   dab1e:	ee35 7ae7 	vsub.f32	s14, s11, s15
   dab22:	ee17 3a10 	vmov	r3, s14
   dab26:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   dab2a:	1ad2      	subs	r2, r2, r3
   dab2c:	2a19      	cmp	r2, #25
   dab2e:	dc06      	bgt.n	dab3e <__ieee754_rem_pio2f+0x1f2>
   dab30:	ed85 7a00 	vstr	s14, [r5]
   dab34:	eeb0 0a65 	vmov.f32	s0, s11
   dab38:	e7c3      	b.n	daac2 <__ieee754_rem_pio2f+0x176>
   dab3a:	2303      	movs	r3, #3
   dab3c:	e761      	b.n	daa02 <__ieee754_rem_pio2f+0xb6>
   dab3e:	ed9f 7a26 	vldr	s14, [pc, #152]	; dabd8 <__ieee754_rem_pio2f+0x28c>
   dab42:	ed9f 5a26 	vldr	s10, [pc, #152]	; dabdc <__ieee754_rem_pio2f+0x290>
   dab46:	eeb0 0a65 	vmov.f32	s0, s11
   dab4a:	eea6 0a07 	vfma.f32	s0, s12, s14
   dab4e:	ee75 7ac0 	vsub.f32	s15, s11, s0
   dab52:	eee6 7a07 	vfma.f32	s15, s12, s14
   dab56:	eed6 7a85 	vfnms.f32	s15, s13, s10
   dab5a:	e7ae      	b.n	daaba <__ieee754_rem_pio2f+0x16e>
   dab5c:	4294      	cmp	r4, r2
   dab5e:	ee70 7a27 	vadd.f32	s15, s0, s15
   dab62:	d00e      	beq.n	dab82 <__ieee754_rem_pio2f+0x236>
   dab64:	ed9f 7a14 	vldr	s14, [pc, #80]	; dabb8 <__ieee754_rem_pio2f+0x26c>
   dab68:	ee77 6a87 	vadd.f32	s13, s15, s14
   dab6c:	f04f 30ff 	mov.w	r0, #4294967295
   dab70:	ee77 7ae6 	vsub.f32	s15, s15, s13
   dab74:	edc5 6a00 	vstr	s13, [r5]
   dab78:	ee77 7a87 	vadd.f32	s15, s15, s14
   dab7c:	edc5 7a01 	vstr	s15, [r5, #4]
   dab80:	e70c      	b.n	da99c <__ieee754_rem_pio2f+0x50>
   dab82:	eddf 6a11 	vldr	s13, [pc, #68]	; dabc8 <__ieee754_rem_pio2f+0x27c>
   dab86:	ed9f 7a11 	vldr	s14, [pc, #68]	; dabcc <__ieee754_rem_pio2f+0x280>
   dab8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
   dab8e:	f04f 30ff 	mov.w	r0, #4294967295
   dab92:	ee77 6a87 	vadd.f32	s13, s15, s14
   dab96:	ee77 7ae6 	vsub.f32	s15, s15, s13
   dab9a:	edc5 6a00 	vstr	s13, [r5]
   dab9e:	ee77 7a87 	vadd.f32	s15, s15, s14
   daba2:	edc5 7a01 	vstr	s15, [r5, #4]
   daba6:	e6f9      	b.n	da99c <__ieee754_rem_pio2f+0x50>
   daba8:	3f490fd8 	.word	0x3f490fd8
   dabac:	4016cbe3 	.word	0x4016cbe3
   dabb0:	3fc90f80 	.word	0x3fc90f80
   dabb4:	3fc90fd0 	.word	0x3fc90fd0
   dabb8:	37354443 	.word	0x37354443
   dabbc:	43490f80 	.word	0x43490f80
   dabc0:	43800000 	.word	0x43800000
   dabc4:	000de0dc 	.word	0x000de0dc
   dabc8:	37354400 	.word	0x37354400
   dabcc:	2e85a308 	.word	0x2e85a308
   dabd0:	3f22f984 	.word	0x3f22f984
   dabd4:	000de05c 	.word	0x000de05c
   dabd8:	2e85a300 	.word	0x2e85a300
   dabdc:	248d3132 	.word	0x248d3132

000dabe0 <__kernel_cosf>:
   dabe0:	ee10 3a10 	vmov	r3, s0
   dabe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dabe8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   dabec:	da2c      	bge.n	dac48 <__kernel_cosf+0x68>
   dabee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   dabf2:	ee17 3a90 	vmov	r3, s15
   dabf6:	2b00      	cmp	r3, #0
   dabf8:	d060      	beq.n	dacbc <__kernel_cosf+0xdc>
   dabfa:	ee20 7a00 	vmul.f32	s14, s0, s0
   dabfe:	eddf 4a31 	vldr	s9, [pc, #196]	; dacc4 <__kernel_cosf+0xe4>
   dac02:	ed9f 5a31 	vldr	s10, [pc, #196]	; dacc8 <__kernel_cosf+0xe8>
   dac06:	eddf 5a31 	vldr	s11, [pc, #196]	; daccc <__kernel_cosf+0xec>
   dac0a:	ed9f 6a31 	vldr	s12, [pc, #196]	; dacd0 <__kernel_cosf+0xf0>
   dac0e:	eddf 7a31 	vldr	s15, [pc, #196]	; dacd4 <__kernel_cosf+0xf4>
   dac12:	eddf 6a31 	vldr	s13, [pc, #196]	; dacd8 <__kernel_cosf+0xf8>
   dac16:	eea7 5a24 	vfma.f32	s10, s14, s9
   dac1a:	eee7 5a05 	vfma.f32	s11, s14, s10
   dac1e:	eea7 6a25 	vfma.f32	s12, s14, s11
   dac22:	eee7 7a06 	vfma.f32	s15, s14, s12
   dac26:	eee7 6a27 	vfma.f32	s13, s14, s15
   dac2a:	ee67 6a26 	vmul.f32	s13, s14, s13
   dac2e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   dac32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   dac36:	eee7 0a26 	vfma.f32	s1, s14, s13
   dac3a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   dac3e:	eed7 0a27 	vfnms.f32	s1, s14, s15
   dac42:	ee30 0a60 	vsub.f32	s0, s0, s1
   dac46:	4770      	bx	lr
   dac48:	ee20 7a00 	vmul.f32	s14, s0, s0
   dac4c:	eddf 4a1d 	vldr	s9, [pc, #116]	; dacc4 <__kernel_cosf+0xe4>
   dac50:	ed9f 5a1d 	vldr	s10, [pc, #116]	; dacc8 <__kernel_cosf+0xe8>
   dac54:	eddf 5a1d 	vldr	s11, [pc, #116]	; daccc <__kernel_cosf+0xec>
   dac58:	ed9f 6a1d 	vldr	s12, [pc, #116]	; dacd0 <__kernel_cosf+0xf0>
   dac5c:	eddf 7a1d 	vldr	s15, [pc, #116]	; dacd4 <__kernel_cosf+0xf4>
   dac60:	eddf 6a1d 	vldr	s13, [pc, #116]	; dacd8 <__kernel_cosf+0xf8>
   dac64:	4a1d      	ldr	r2, [pc, #116]	; (dacdc <__kernel_cosf+0xfc>)
   dac66:	eea7 5a24 	vfma.f32	s10, s14, s9
   dac6a:	4293      	cmp	r3, r2
   dac6c:	eee5 5a07 	vfma.f32	s11, s10, s14
   dac70:	eea5 6a87 	vfma.f32	s12, s11, s14
   dac74:	eee6 7a07 	vfma.f32	s15, s12, s14
   dac78:	eee7 6a87 	vfma.f32	s13, s15, s14
   dac7c:	ee66 6a87 	vmul.f32	s13, s13, s14
   dac80:	ddd5      	ble.n	dac2e <__kernel_cosf+0x4e>
   dac82:	4a17      	ldr	r2, [pc, #92]	; (dace0 <__kernel_cosf+0x100>)
   dac84:	4293      	cmp	r3, r2
   dac86:	dc14      	bgt.n	dacb2 <__kernel_cosf+0xd2>
   dac88:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   dac8c:	ee07 3a90 	vmov	s15, r3
   dac90:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   dac94:	ee36 6a67 	vsub.f32	s12, s12, s15
   dac98:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   dac9c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   daca0:	eee7 0a26 	vfma.f32	s1, s14, s13
   daca4:	eed7 7a25 	vfnms.f32	s15, s14, s11
   daca8:	ee77 0ae0 	vsub.f32	s1, s15, s1
   dacac:	ee36 0a60 	vsub.f32	s0, s12, s1
   dacb0:	4770      	bx	lr
   dacb2:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   dacb6:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   dacba:	e7ed      	b.n	dac98 <__kernel_cosf+0xb8>
   dacbc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   dacc0:	4770      	bx	lr
   dacc2:	bf00      	nop
   dacc4:	ad47d74e 	.word	0xad47d74e
   dacc8:	310f74f6 	.word	0x310f74f6
   daccc:	b493f27c 	.word	0xb493f27c
   dacd0:	37d00d01 	.word	0x37d00d01
   dacd4:	bab60b61 	.word	0xbab60b61
   dacd8:	3d2aaaab 	.word	0x3d2aaaab
   dacdc:	3e999999 	.word	0x3e999999
   dace0:	3f480000 	.word	0x3f480000

000dace4 <__kernel_rem_pio2f>:
   dace4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dace8:	ed2d 8b04 	vpush	{d8-d9}
   dacec:	b0db      	sub	sp, #364	; 0x16c
   dacee:	4cd7      	ldr	r4, [pc, #860]	; (db04c <__kernel_rem_pio2f+0x368>)
   dacf0:	9d68      	ldr	r5, [sp, #416]	; 0x1a0
   dacf2:	9107      	str	r1, [sp, #28]
   dacf4:	1d11      	adds	r1, r2, #4
   dacf6:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   dacfa:	9304      	str	r3, [sp, #16]
   dacfc:	9209      	str	r2, [sp, #36]	; 0x24
   dacfe:	4683      	mov	fp, r0
   dad00:	f103 39ff 	add.w	r9, r3, #4294967295
   dad04:	f2c0 829d 	blt.w	db242 <__kernel_rem_pio2f+0x55e>
   dad08:	1ed3      	subs	r3, r2, #3
   dad0a:	bf44      	itt	mi
   dad0c:	4613      	movmi	r3, r2
   dad0e:	3304      	addmi	r3, #4
   dad10:	10db      	asrs	r3, r3, #3
   dad12:	9303      	str	r3, [sp, #12]
   dad14:	3301      	adds	r3, #1
   dad16:	00db      	lsls	r3, r3, #3
   dad18:	9308      	str	r3, [sp, #32]
   dad1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   dad1e:	1a9b      	subs	r3, r3, r2
   dad20:	9306      	str	r3, [sp, #24]
   dad22:	9b03      	ldr	r3, [sp, #12]
   dad24:	eb16 0109 	adds.w	r1, r6, r9
   dad28:	eba3 0309 	sub.w	r3, r3, r9
   dad2c:	d416      	bmi.n	dad5c <__kernel_rem_pio2f+0x78>
   dad2e:	3101      	adds	r1, #1
   dad30:	ed9f 7ac7 	vldr	s14, [pc, #796]	; db050 <__kernel_rem_pio2f+0x36c>
   dad34:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   dad36:	4419      	add	r1, r3
   dad38:	aa1e      	add	r2, sp, #120	; 0x78
   dad3a:	2b00      	cmp	r3, #0
   dad3c:	bfa4      	itt	ge
   dad3e:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   dad42:	ee07 4a90 	vmovge	s15, r4
   dad46:	f103 0301 	add.w	r3, r3, #1
   dad4a:	bfac      	ite	ge
   dad4c:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   dad50:	eef0 7a47 	vmovlt.f32	s15, s14
   dad54:	428b      	cmp	r3, r1
   dad56:	ece2 7a01 	vstmia	r2!, {s15}
   dad5a:	d1ee      	bne.n	dad3a <__kernel_rem_pio2f+0x56>
   dad5c:	2e00      	cmp	r6, #0
   dad5e:	f2c0 82e0 	blt.w	db322 <__kernel_rem_pio2f+0x63e>
   dad62:	9b04      	ldr	r3, [sp, #16]
   dad64:	a91e      	add	r1, sp, #120	; 0x78
   dad66:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   dad6a:	ad46      	add	r5, sp, #280	; 0x118
   dad6c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   dad70:	4648      	mov	r0, r9
   dad72:	18f7      	adds	r7, r6, r3
   dad74:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
   dad78:	f1b9 0f00 	cmp.w	r9, #0
   dad7c:	eddf 7ab4 	vldr	s15, [pc, #720]	; db050 <__kernel_rem_pio2f+0x36c>
   dad80:	db09      	blt.n	dad96 <__kernel_rem_pio2f+0xb2>
   dad82:	4622      	mov	r2, r4
   dad84:	465b      	mov	r3, fp
   dad86:	ecf3 6a01 	vldmia	r3!, {s13}
   dad8a:	ed32 7a01 	vldmdb	r2!, {s14}
   dad8e:	428b      	cmp	r3, r1
   dad90:	eee6 7a87 	vfma.f32	s15, s13, s14
   dad94:	d1f7      	bne.n	dad86 <__kernel_rem_pio2f+0xa2>
   dad96:	3001      	adds	r0, #1
   dad98:	42b8      	cmp	r0, r7
   dad9a:	ece5 7a01 	vstmia	r5!, {s15}
   dad9e:	f104 0404 	add.w	r4, r4, #4
   dada2:	d1e9      	bne.n	dad78 <__kernel_rem_pio2f+0x94>
   dada4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   dada8:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   dadac:	3b08      	subs	r3, #8
   dadae:	9305      	str	r3, [sp, #20]
   dadb0:	ed9f 9aa9 	vldr	s18, [pc, #676]	; db058 <__kernel_rem_pio2f+0x374>
   dadb4:	eddf 8aa7 	vldr	s17, [pc, #668]	; db054 <__kernel_rem_pio2f+0x370>
   dadb8:	9806      	ldr	r0, [sp, #24]
   dadba:	9600      	str	r6, [sp, #0]
   dadbc:	ab09      	add	r3, sp, #36	; 0x24
   dadbe:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
   dadc2:	eb0b 040c 	add.w	r4, fp, ip
   dadc6:	af46      	add	r7, sp, #280	; 0x118
   dadc8:	465b      	mov	r3, fp
   dadca:	aa5a      	add	r2, sp, #360	; 0x168
   dadcc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
   dadd0:	2e00      	cmp	r6, #0
   dadd2:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
   dadd6:	ea4f 0b86 	mov.w	fp, r6, lsl #2
   dadda:	dd16      	ble.n	dae0a <__kernel_rem_pio2f+0x126>
   daddc:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   dade0:	4641      	mov	r1, r8
   dade2:	ee60 7a09 	vmul.f32	s15, s0, s18
   dade6:	eeb0 7a40 	vmov.f32	s14, s0
   dadea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   dadee:	ed72 6a01 	vldmdb	r2!, {s13}
   dadf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dadf6:	42ba      	cmp	r2, r7
   dadf8:	eea7 7ae8 	vfms.f32	s14, s15, s17
   dadfc:	ee37 0aa6 	vadd.f32	s0, s15, s13
   dae00:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   dae04:	eca1 7a01 	vstmia	r1!, {s14}
   dae08:	d1eb      	bne.n	dade2 <__kernel_rem_pio2f+0xfe>
   dae0a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   dae0e:	f000 ff07 	bl	dbc20 <scalbnf>
   dae12:	eeb0 8a40 	vmov.f32	s16, s0
   dae16:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   dae1a:	ee28 0a00 	vmul.f32	s0, s16, s0
   dae1e:	f000 feb9 	bl	dbb94 <floorf>
   dae22:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   dae26:	eea0 8a67 	vfms.f32	s16, s0, s15
   dae2a:	9801      	ldr	r0, [sp, #4]
   dae2c:	9b02      	ldr	r3, [sp, #8]
   dae2e:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   dae32:	2800      	cmp	r0, #0
   dae34:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   dae38:	ee38 8a67 	vsub.f32	s16, s16, s15
   dae3c:	dd78      	ble.n	daf30 <__kernel_rem_pio2f+0x24c>
   dae3e:	f106 3cff 	add.w	ip, r6, #4294967295
   dae42:	f1c0 0208 	rsb	r2, r0, #8
   dae46:	f858 502c 	ldr.w	r5, [r8, ip, lsl #2]
   dae4a:	fa45 f102 	asr.w	r1, r5, r2
   dae4e:	fa01 f202 	lsl.w	r2, r1, r2
   dae52:	1aaa      	subs	r2, r5, r2
   dae54:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   dae58:	f1c0 0507 	rsb	r5, r0, #7
   dae5c:	ee19 ca90 	vmov	ip, s19
   dae60:	fa42 f505 	asr.w	r5, r2, r5
   dae64:	448c      	add	ip, r1
   dae66:	2d00      	cmp	r5, #0
   dae68:	ee09 ca90 	vmov	s19, ip
   dae6c:	dc68      	bgt.n	daf40 <__kernel_rem_pio2f+0x25c>
   dae6e:	eeb5 8a40 	vcmp.f32	s16, #0.0
   dae72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dae76:	f040 80b6 	bne.w	dafe6 <__kernel_rem_pio2f+0x302>
   dae7a:	9a00      	ldr	r2, [sp, #0]
   dae7c:	f106 3eff 	add.w	lr, r6, #4294967295
   dae80:	4572      	cmp	r2, lr
   dae82:	dc10      	bgt.n	daea6 <__kernel_rem_pio2f+0x1c2>
   dae84:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
   dae88:	3a01      	subs	r2, #1
   dae8a:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   dae8e:	2100      	movs	r1, #0
   dae90:	469c      	mov	ip, r3
   dae92:	f852 3904 	ldr.w	r3, [r2], #-4
   dae96:	4552      	cmp	r2, sl
   dae98:	ea41 0103 	orr.w	r1, r1, r3
   dae9c:	d1f9      	bne.n	dae92 <__kernel_rem_pio2f+0x1ae>
   dae9e:	4663      	mov	r3, ip
   daea0:	2900      	cmp	r1, #0
   daea2:	f040 80f2 	bne.w	db08a <__kernel_rem_pio2f+0x3a6>
   daea6:	9a00      	ldr	r2, [sp, #0]
   daea8:	3a01      	subs	r2, #1
   daeaa:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
   daeae:	2a00      	cmp	r2, #0
   daeb0:	f040 80e6 	bne.w	db080 <__kernel_rem_pio2f+0x39c>
   daeb4:	9a05      	ldr	r2, [sp, #20]
   daeb6:	f04f 0c01 	mov.w	ip, #1
   daeba:	f852 1904 	ldr.w	r1, [r2], #-4
   daebe:	f10c 0c01 	add.w	ip, ip, #1
   daec2:	2900      	cmp	r1, #0
   daec4:	d0f9      	beq.n	daeba <__kernel_rem_pio2f+0x1d6>
   daec6:	f106 0b01 	add.w	fp, r6, #1
   daeca:	44b4      	add	ip, r6
   daecc:	46de      	mov	lr, fp
   daece:	9904      	ldr	r1, [sp, #16]
   daed0:	9a03      	ldr	r2, [sp, #12]
   daed2:	198d      	adds	r5, r1, r6
   daed4:	445a      	add	r2, fp
   daed6:	a91e      	add	r1, sp, #120	; 0x78
   daed8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   daedc:	eb01 0585 	add.w	r5, r1, r5, lsl #2
   daee0:	9969      	ldr	r1, [sp, #420]	; 0x1a4
   daee2:	3a01      	subs	r2, #1
   daee4:	eb01 0682 	add.w	r6, r1, r2, lsl #2
   daee8:	eb07 0b8b 	add.w	fp, r7, fp, lsl #2
   daeec:	edd6 7a01 	vldr	s15, [r6, #4]
   daef0:	ed9f 7a57 	vldr	s14, [pc, #348]	; db050 <__kernel_rem_pio2f+0x36c>
   daef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   daef8:	f1b9 0f00 	cmp.w	r9, #0
   daefc:	f106 0604 	add.w	r6, r6, #4
   daf00:	4629      	mov	r1, r5
   daf02:	edc5 7a00 	vstr	s15, [r5]
   daf06:	f105 0504 	add.w	r5, r5, #4
   daf0a:	db09      	blt.n	daf20 <__kernel_rem_pio2f+0x23c>
   daf0c:	461a      	mov	r2, r3
   daf0e:	e001      	b.n	daf14 <__kernel_rem_pio2f+0x230>
   daf10:	ed71 7a01 	vldmdb	r1!, {s15}
   daf14:	ecf2 6a01 	vldmia	r2!, {s13}
   daf18:	42a2      	cmp	r2, r4
   daf1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
   daf1e:	d1f7      	bne.n	daf10 <__kernel_rem_pio2f+0x22c>
   daf20:	f10e 0e01 	add.w	lr, lr, #1
   daf24:	45e6      	cmp	lr, ip
   daf26:	ecab 7a01 	vstmia	fp!, {s14}
   daf2a:	dddf      	ble.n	daeec <__kernel_rem_pio2f+0x208>
   daf2c:	4666      	mov	r6, ip
   daf2e:	e74c      	b.n	dadca <__kernel_rem_pio2f+0xe6>
   daf30:	f040 809c 	bne.w	db06c <__kernel_rem_pio2f+0x388>
   daf34:	1e72      	subs	r2, r6, #1
   daf36:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
   daf3a:	122d      	asrs	r5, r5, #8
   daf3c:	2d00      	cmp	r5, #0
   daf3e:	dd96      	ble.n	dae6e <__kernel_rem_pio2f+0x18a>
   daf40:	ee19 2a90 	vmov	r2, s19
   daf44:	2e00      	cmp	r6, #0
   daf46:	f102 0201 	add.w	r2, r2, #1
   daf4a:	ee09 2a90 	vmov	s19, r2
   daf4e:	f340 818e 	ble.w	db26e <__kernel_rem_pio2f+0x58a>
   daf52:	f8d8 1000 	ldr.w	r1, [r8]
   daf56:	2900      	cmp	r1, #0
   daf58:	d174      	bne.n	db044 <__kernel_rem_pio2f+0x360>
   daf5a:	2e01      	cmp	r6, #1
   daf5c:	d01c      	beq.n	daf98 <__kernel_rem_pio2f+0x2b4>
   daf5e:	4642      	mov	r2, r8
   daf60:	f04f 0c01 	mov.w	ip, #1
   daf64:	f852 1f04 	ldr.w	r1, [r2, #4]!
   daf68:	2900      	cmp	r1, #0
   daf6a:	d079      	beq.n	db060 <__kernel_rem_pio2f+0x37c>
   daf6c:	f10c 0201 	add.w	r2, ip, #1
   daf70:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   daf74:	4296      	cmp	r6, r2
   daf76:	f848 102c 	str.w	r1, [r8, ip, lsl #2]
   daf7a:	dd0c      	ble.n	daf96 <__kernel_rem_pio2f+0x2b2>
   daf7c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
   daf80:	44c3      	add	fp, r8
   daf82:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   daf86:	e000      	b.n	daf8a <__kernel_rem_pio2f+0x2a6>
   daf88:	6811      	ldr	r1, [r2, #0]
   daf8a:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   daf8e:	f842 1b04 	str.w	r1, [r2], #4
   daf92:	455a      	cmp	r2, fp
   daf94:	d1f8      	bne.n	daf88 <__kernel_rem_pio2f+0x2a4>
   daf96:	2101      	movs	r1, #1
   daf98:	2800      	cmp	r0, #0
   daf9a:	dd0c      	ble.n	dafb6 <__kernel_rem_pio2f+0x2d2>
   daf9c:	2801      	cmp	r0, #1
   daf9e:	f000 8147 	beq.w	db230 <__kernel_rem_pio2f+0x54c>
   dafa2:	2802      	cmp	r0, #2
   dafa4:	d107      	bne.n	dafb6 <__kernel_rem_pio2f+0x2d2>
   dafa6:	f106 3cff 	add.w	ip, r6, #4294967295
   dafaa:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   dafae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   dafb2:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   dafb6:	2d02      	cmp	r5, #2
   dafb8:	f47f af59 	bne.w	dae6e <__kernel_rem_pio2f+0x18a>
   dafbc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   dafc0:	ee30 8a48 	vsub.f32	s16, s0, s16
   dafc4:	2900      	cmp	r1, #0
   dafc6:	f43f af52 	beq.w	dae6e <__kernel_rem_pio2f+0x18a>
   dafca:	e9cd 0301 	strd	r0, r3, [sp, #4]
   dafce:	f000 fe27 	bl	dbc20 <scalbnf>
   dafd2:	ee38 8a40 	vsub.f32	s16, s16, s0
   dafd6:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
   dafda:	eeb5 8a40 	vcmp.f32	s16, #0.0
   dafde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dafe2:	f43f af4a 	beq.w	dae7a <__kernel_rem_pio2f+0x196>
   dafe6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   dafea:	eeb0 0a48 	vmov.f32	s0, s16
   dafee:	1a98      	subs	r0, r3, r2
   daff0:	9602      	str	r6, [sp, #8]
   daff2:	9501      	str	r5, [sp, #4]
   daff4:	9e00      	ldr	r6, [sp, #0]
   daff6:	f000 fe13 	bl	dbc20 <scalbnf>
   daffa:	ed9f 7a16 	vldr	s14, [pc, #88]	; db054 <__kernel_rem_pio2f+0x370>
   daffe:	eeb4 0ac7 	vcmpe.f32	s0, s14
   db002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db006:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   db00a:	f2c0 8157 	blt.w	db2bc <__kernel_rem_pio2f+0x5d8>
   db00e:	eddf 7a12 	vldr	s15, [pc, #72]	; db058 <__kernel_rem_pio2f+0x374>
   db012:	9906      	ldr	r1, [sp, #24]
   db014:	ee60 7a27 	vmul.f32	s15, s0, s15
   db018:	3108      	adds	r1, #8
   db01a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db01e:	9106      	str	r1, [sp, #24]
   db020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db024:	1c5d      	adds	r5, r3, #1
   db026:	eea7 0ac7 	vfms.f32	s0, s15, s14
   db02a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db02e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   db032:	ee10 1a10 	vmov	r1, s0
   db036:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   db03a:	ee17 3a90 	vmov	r3, s15
   db03e:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
   db042:	e039      	b.n	db0b8 <__kernel_rem_pio2f+0x3d4>
   db044:	2201      	movs	r2, #1
   db046:	f04f 0c00 	mov.w	ip, #0
   db04a:	e791      	b.n	daf70 <__kernel_rem_pio2f+0x28c>
   db04c:	000de420 	.word	0x000de420
   db050:	00000000 	.word	0x00000000
   db054:	43800000 	.word	0x43800000
   db058:	3b800000 	.word	0x3b800000
   db05c:	3fc90000 	.word	0x3fc90000
   db060:	f10c 0c01 	add.w	ip, ip, #1
   db064:	45b4      	cmp	ip, r6
   db066:	f47f af7d 	bne.w	daf64 <__kernel_rem_pio2f+0x280>
   db06a:	e795      	b.n	daf98 <__kernel_rem_pio2f+0x2b4>
   db06c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   db070:	eeb4 8ae7 	vcmpe.f32	s16, s15
   db074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db078:	f280 80e8 	bge.w	db24c <__kernel_rem_pio2f+0x568>
   db07c:	2500      	movs	r5, #0
   db07e:	e6f6      	b.n	dae6e <__kernel_rem_pio2f+0x18a>
   db080:	f106 0b01 	add.w	fp, r6, #1
   db084:	46de      	mov	lr, fp
   db086:	46dc      	mov	ip, fp
   db088:	e721      	b.n	daece <__kernel_rem_pio2f+0x1ea>
   db08a:	9806      	ldr	r0, [sp, #24]
   db08c:	f858 102e 	ldr.w	r1, [r8, lr, lsl #2]
   db090:	3808      	subs	r0, #8
   db092:	4633      	mov	r3, r6
   db094:	462a      	mov	r2, r5
   db096:	9e00      	ldr	r6, [sp, #0]
   db098:	9006      	str	r0, [sp, #24]
   db09a:	4675      	mov	r5, lr
   db09c:	b961      	cbnz	r1, db0b8 <__kernel_rem_pio2f+0x3d4>
   db09e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   db0a2:	3b02      	subs	r3, #2
   db0a4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   db0a8:	4601      	mov	r1, r0
   db0aa:	f853 0904 	ldr.w	r0, [r3], #-4
   db0ae:	3d01      	subs	r5, #1
   db0b0:	3908      	subs	r1, #8
   db0b2:	2800      	cmp	r0, #0
   db0b4:	d0f9      	beq.n	db0aa <__kernel_rem_pio2f+0x3c6>
   db0b6:	9106      	str	r1, [sp, #24]
   db0b8:	9806      	ldr	r0, [sp, #24]
   db0ba:	9200      	str	r2, [sp, #0]
   db0bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db0c0:	f000 fdae 	bl	dbc20 <scalbnf>
   db0c4:	2d00      	cmp	r5, #0
   db0c6:	9a00      	ldr	r2, [sp, #0]
   db0c8:	f2c0 811e 	blt.w	db308 <__kernel_rem_pio2f+0x624>
   db0cc:	ea4f 0e85 	mov.w	lr, r5, lsl #2
   db0d0:	ab46      	add	r3, sp, #280	; 0x118
   db0d2:	eb03 070e 	add.w	r7, r3, lr
   db0d6:	f10e 0c04 	add.w	ip, lr, #4
   db0da:	ed1f 7a21 	vldr	s14, [pc, #-132]	; db058 <__kernel_rem_pio2f+0x374>
   db0de:	eb08 030c 	add.w	r3, r8, ip
   db0e2:	1d39      	adds	r1, r7, #4
   db0e4:	ed73 7a01 	vldmdb	r3!, {s15}
   db0e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db0ec:	4543      	cmp	r3, r8
   db0ee:	ee67 7a80 	vmul.f32	s15, s15, s0
   db0f2:	ee20 0a07 	vmul.f32	s0, s0, s14
   db0f6:	ed61 7a01 	vstmdb	r1!, {s15}
   db0fa:	d1f3      	bne.n	db0e4 <__kernel_rem_pio2f+0x400>
   db0fc:	2e00      	cmp	r6, #0
   db0fe:	ed1f 6a29 	vldr	s12, [pc, #-164]	; db05c <__kernel_rem_pio2f+0x378>
   db102:	f04f 0400 	mov.w	r4, #0
   db106:	db20      	blt.n	db14a <__kernel_rem_pio2f+0x466>
   db108:	488f      	ldr	r0, [pc, #572]	; (db348 <__kernel_rem_pio2f+0x664>)
   db10a:	eddf 7a90 	vldr	s15, [pc, #576]	; db34c <__kernel_rem_pio2f+0x668>
   db10e:	4639      	mov	r1, r7
   db110:	eeb0 7a46 	vmov.f32	s14, s12
   db114:	2300      	movs	r3, #0
   db116:	e003      	b.n	db120 <__kernel_rem_pio2f+0x43c>
   db118:	429c      	cmp	r4, r3
   db11a:	db08      	blt.n	db12e <__kernel_rem_pio2f+0x44a>
   db11c:	ecb0 7a01 	vldmia	r0!, {s14}
   db120:	ecf1 6a01 	vldmia	r1!, {s13}
   db124:	3301      	adds	r3, #1
   db126:	429e      	cmp	r6, r3
   db128:	eee6 7a87 	vfma.f32	s15, s13, s14
   db12c:	daf4      	bge.n	db118 <__kernel_rem_pio2f+0x434>
   db12e:	ab5a      	add	r3, sp, #360	; 0x168
   db130:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   db134:	42a5      	cmp	r5, r4
   db136:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   db13a:	f1a7 0704 	sub.w	r7, r7, #4
   db13e:	f104 0301 	add.w	r3, r4, #1
   db142:	d005      	beq.n	db150 <__kernel_rem_pio2f+0x46c>
   db144:	2e00      	cmp	r6, #0
   db146:	461c      	mov	r4, r3
   db148:	dade      	bge.n	db108 <__kernel_rem_pio2f+0x424>
   db14a:	eddf 7a80 	vldr	s15, [pc, #512]	; db34c <__kernel_rem_pio2f+0x668>
   db14e:	e7ee      	b.n	db12e <__kernel_rem_pio2f+0x44a>
   db150:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   db152:	2902      	cmp	r1, #2
   db154:	dc1c      	bgt.n	db190 <__kernel_rem_pio2f+0x4ac>
   db156:	2900      	cmp	r1, #0
   db158:	f300 808b 	bgt.w	db272 <__kernel_rem_pio2f+0x58e>
   db15c:	d10f      	bne.n	db17e <__kernel_rem_pio2f+0x49a>
   db15e:	ab32      	add	r3, sp, #200	; 0xc8
   db160:	eddf 7a7a 	vldr	s15, [pc, #488]	; db34c <__kernel_rem_pio2f+0x668>
   db164:	449c      	add	ip, r3
   db166:	ed3c 7a01 	vldmdb	ip!, {s14}
   db16a:	4563      	cmp	r3, ip
   db16c:	ee77 7a87 	vadd.f32	s15, s15, s14
   db170:	d1f9      	bne.n	db166 <__kernel_rem_pio2f+0x482>
   db172:	b10a      	cbz	r2, db178 <__kernel_rem_pio2f+0x494>
   db174:	eef1 7a67 	vneg.f32	s15, s15
   db178:	9b07      	ldr	r3, [sp, #28]
   db17a:	edc3 7a00 	vstr	s15, [r3]
   db17e:	ee19 3a90 	vmov	r3, s19
   db182:	f003 0007 	and.w	r0, r3, #7
   db186:	b05b      	add	sp, #364	; 0x16c
   db188:	ecbd 8b04 	vpop	{d8-d9}
   db18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db190:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   db192:	2b03      	cmp	r3, #3
   db194:	d1f3      	bne.n	db17e <__kernel_rem_pio2f+0x49a>
   db196:	2d00      	cmp	r5, #0
   db198:	f000 80cb 	beq.w	db332 <__kernel_rem_pio2f+0x64e>
   db19c:	ab5a      	add	r3, sp, #360	; 0x168
   db19e:	4473      	add	r3, lr
   db1a0:	a932      	add	r1, sp, #200	; 0xc8
   db1a2:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   db1a6:	eb01 0385 	add.w	r3, r1, r5, lsl #2
   db1aa:	ed73 7a01 	vldmdb	r3!, {s15}
   db1ae:	eef0 6a47 	vmov.f32	s13, s14
   db1b2:	ee37 7a27 	vadd.f32	s14, s14, s15
   db1b6:	4299      	cmp	r1, r3
   db1b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db1bc:	ed83 7a00 	vstr	s14, [r3]
   db1c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
   db1c4:	edc3 7a01 	vstr	s15, [r3, #4]
   db1c8:	d1ef      	bne.n	db1aa <__kernel_rem_pio2f+0x4c6>
   db1ca:	2d01      	cmp	r5, #1
   db1cc:	f340 80b1 	ble.w	db332 <__kernel_rem_pio2f+0x64e>
   db1d0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   db1d4:	ab5a      	add	r3, sp, #360	; 0x168
   db1d6:	3d01      	subs	r5, #1
   db1d8:	449e      	add	lr, r3
   db1da:	00ad      	lsls	r5, r5, #2
   db1dc:	1d2b      	adds	r3, r5, #4
   db1de:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   db1e2:	440b      	add	r3, r1
   db1e4:	a833      	add	r0, sp, #204	; 0xcc
   db1e6:	ed73 7a01 	vldmdb	r3!, {s15}
   db1ea:	eef0 6a47 	vmov.f32	s13, s14
   db1ee:	ee37 7a27 	vadd.f32	s14, s14, s15
   db1f2:	4298      	cmp	r0, r3
   db1f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db1f8:	ed83 7a00 	vstr	s14, [r3]
   db1fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
   db200:	edc3 7a01 	vstr	s15, [r3, #4]
   db204:	d1ef      	bne.n	db1e6 <__kernel_rem_pio2f+0x502>
   db206:	3508      	adds	r5, #8
   db208:	eddf 7a50 	vldr	s15, [pc, #320]	; db34c <__kernel_rem_pio2f+0x668>
   db20c:	194b      	adds	r3, r1, r5
   db20e:	3108      	adds	r1, #8
   db210:	ed33 7a01 	vldmdb	r3!, {s14}
   db214:	4299      	cmp	r1, r3
   db216:	ee77 7a87 	vadd.f32	s15, s15, s14
   db21a:	d1f9      	bne.n	db210 <__kernel_rem_pio2f+0x52c>
   db21c:	2a00      	cmp	r2, #0
   db21e:	d155      	bne.n	db2cc <__kernel_rem_pio2f+0x5e8>
   db220:	9907      	ldr	r1, [sp, #28]
   db222:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   db224:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   db226:	edc1 7a02 	vstr	s15, [r1, #8]
   db22a:	600a      	str	r2, [r1, #0]
   db22c:	604b      	str	r3, [r1, #4]
   db22e:	e7a6      	b.n	db17e <__kernel_rem_pio2f+0x49a>
   db230:	f106 3cff 	add.w	ip, r6, #4294967295
   db234:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   db238:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   db23c:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   db240:	e6b9      	b.n	dafb6 <__kernel_rem_pio2f+0x2d2>
   db242:	2308      	movs	r3, #8
   db244:	9308      	str	r3, [sp, #32]
   db246:	2300      	movs	r3, #0
   db248:	9303      	str	r3, [sp, #12]
   db24a:	e566      	b.n	dad1a <__kernel_rem_pio2f+0x36>
   db24c:	ee19 2a90 	vmov	r2, s19
   db250:	2e00      	cmp	r6, #0
   db252:	f102 0201 	add.w	r2, r2, #1
   db256:	ee09 2a90 	vmov	s19, r2
   db25a:	bfc8      	it	gt
   db25c:	2502      	movgt	r5, #2
   db25e:	f73f ae78 	bgt.w	daf52 <__kernel_rem_pio2f+0x26e>
   db262:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   db266:	ee37 8ac8 	vsub.f32	s16, s15, s16
   db26a:	2502      	movs	r5, #2
   db26c:	e5ff      	b.n	dae6e <__kernel_rem_pio2f+0x18a>
   db26e:	2100      	movs	r1, #0
   db270:	e692      	b.n	daf98 <__kernel_rem_pio2f+0x2b4>
   db272:	a932      	add	r1, sp, #200	; 0xc8
   db274:	eddf 7a35 	vldr	s15, [pc, #212]	; db34c <__kernel_rem_pio2f+0x668>
   db278:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   db27c:	ed33 7a01 	vldmdb	r3!, {s14}
   db280:	4299      	cmp	r1, r3
   db282:	ee77 7a87 	vadd.f32	s15, s15, s14
   db286:	d1f9      	bne.n	db27c <__kernel_rem_pio2f+0x598>
   db288:	bb92      	cbnz	r2, db2f0 <__kernel_rem_pio2f+0x60c>
   db28a:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   db28e:	9b07      	ldr	r3, [sp, #28]
   db290:	2d00      	cmp	r5, #0
   db292:	edc3 7a00 	vstr	s15, [r3]
   db296:	ee77 7a67 	vsub.f32	s15, s14, s15
   db29a:	dd0b      	ble.n	db2b4 <__kernel_rem_pio2f+0x5d0>
   db29c:	a933      	add	r1, sp, #204	; 0xcc
   db29e:	2301      	movs	r3, #1
   db2a0:	ecb1 7a01 	vldmia	r1!, {s14}
   db2a4:	3301      	adds	r3, #1
   db2a6:	429d      	cmp	r5, r3
   db2a8:	ee77 7a87 	vadd.f32	s15, s15, s14
   db2ac:	daf8      	bge.n	db2a0 <__kernel_rem_pio2f+0x5bc>
   db2ae:	b10a      	cbz	r2, db2b4 <__kernel_rem_pio2f+0x5d0>
   db2b0:	eef1 7a67 	vneg.f32	s15, s15
   db2b4:	9b07      	ldr	r3, [sp, #28]
   db2b6:	edc3 7a01 	vstr	s15, [r3, #4]
   db2ba:	e760      	b.n	db17e <__kernel_rem_pio2f+0x49a>
   db2bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   db2c0:	461d      	mov	r5, r3
   db2c2:	ee10 1a10 	vmov	r1, s0
   db2c6:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   db2ca:	e6f5      	b.n	db0b8 <__kernel_rem_pio2f+0x3d4>
   db2cc:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   db2d0:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   db2d4:	9b07      	ldr	r3, [sp, #28]
   db2d6:	eef1 7a67 	vneg.f32	s15, s15
   db2da:	eef1 6a66 	vneg.f32	s13, s13
   db2de:	eeb1 7a47 	vneg.f32	s14, s14
   db2e2:	edc3 7a02 	vstr	s15, [r3, #8]
   db2e6:	edc3 6a00 	vstr	s13, [r3]
   db2ea:	ed83 7a01 	vstr	s14, [r3, #4]
   db2ee:	e746      	b.n	db17e <__kernel_rem_pio2f+0x49a>
   db2f0:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   db2f4:	9b07      	ldr	r3, [sp, #28]
   db2f6:	eeb1 7a67 	vneg.f32	s14, s15
   db2fa:	2d00      	cmp	r5, #0
   db2fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
   db300:	ed83 7a00 	vstr	s14, [r3]
   db304:	dcca      	bgt.n	db29c <__kernel_rem_pio2f+0x5b8>
   db306:	e7d3      	b.n	db2b0 <__kernel_rem_pio2f+0x5cc>
   db308:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   db30a:	2b02      	cmp	r3, #2
   db30c:	dc0d      	bgt.n	db32a <__kernel_rem_pio2f+0x646>
   db30e:	2b00      	cmp	r3, #0
   db310:	dc14      	bgt.n	db33c <__kernel_rem_pio2f+0x658>
   db312:	f47f af34 	bne.w	db17e <__kernel_rem_pio2f+0x49a>
   db316:	eddf 7a0d 	vldr	s15, [pc, #52]	; db34c <__kernel_rem_pio2f+0x668>
   db31a:	2a00      	cmp	r2, #0
   db31c:	f43f af2c 	beq.w	db178 <__kernel_rem_pio2f+0x494>
   db320:	e728      	b.n	db174 <__kernel_rem_pio2f+0x490>
   db322:	9b04      	ldr	r3, [sp, #16]
   db324:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   db328:	e53c      	b.n	dada4 <__kernel_rem_pio2f+0xc0>
   db32a:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   db32c:	2b03      	cmp	r3, #3
   db32e:	f47f af26 	bne.w	db17e <__kernel_rem_pio2f+0x49a>
   db332:	eddf 7a06 	vldr	s15, [pc, #24]	; db34c <__kernel_rem_pio2f+0x668>
   db336:	2a00      	cmp	r2, #0
   db338:	d1c8      	bne.n	db2cc <__kernel_rem_pio2f+0x5e8>
   db33a:	e771      	b.n	db220 <__kernel_rem_pio2f+0x53c>
   db33c:	eddf 7a03 	vldr	s15, [pc, #12]	; db34c <__kernel_rem_pio2f+0x668>
   db340:	2a00      	cmp	r2, #0
   db342:	d0a2      	beq.n	db28a <__kernel_rem_pio2f+0x5a6>
   db344:	e7d4      	b.n	db2f0 <__kernel_rem_pio2f+0x60c>
   db346:	bf00      	nop
   db348:	000de3f8 	.word	0x000de3f8
   db34c:	00000000 	.word	0x00000000

000db350 <__kernel_sinf>:
   db350:	ee10 3a10 	vmov	r3, s0
   db354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   db358:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   db35c:	da04      	bge.n	db368 <__kernel_sinf+0x18>
   db35e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   db362:	ee17 3a90 	vmov	r3, s15
   db366:	b35b      	cbz	r3, db3c0 <__kernel_sinf+0x70>
   db368:	ee60 7a00 	vmul.f32	s15, s0, s0
   db36c:	ed9f 5a15 	vldr	s10, [pc, #84]	; db3c4 <__kernel_sinf+0x74>
   db370:	eddf 5a15 	vldr	s11, [pc, #84]	; db3c8 <__kernel_sinf+0x78>
   db374:	ed9f 6a15 	vldr	s12, [pc, #84]	; db3cc <__kernel_sinf+0x7c>
   db378:	eddf 6a15 	vldr	s13, [pc, #84]	; db3d0 <__kernel_sinf+0x80>
   db37c:	ed9f 7a15 	vldr	s14, [pc, #84]	; db3d4 <__kernel_sinf+0x84>
   db380:	eee7 5a85 	vfma.f32	s11, s15, s10
   db384:	ee20 5a27 	vmul.f32	s10, s0, s15
   db388:	eea5 6aa7 	vfma.f32	s12, s11, s15
   db38c:	eee6 6a27 	vfma.f32	s13, s12, s15
   db390:	eea6 7aa7 	vfma.f32	s14, s13, s15
   db394:	b930      	cbnz	r0, db3a4 <__kernel_sinf+0x54>
   db396:	eddf 6a10 	vldr	s13, [pc, #64]	; db3d8 <__kernel_sinf+0x88>
   db39a:	eee7 6a87 	vfma.f32	s13, s15, s14
   db39e:	eea6 0a85 	vfma.f32	s0, s13, s10
   db3a2:	4770      	bx	lr
   db3a4:	ee27 7a45 	vnmul.f32	s14, s14, s10
   db3a8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   db3ac:	eea0 7aa6 	vfma.f32	s14, s1, s13
   db3b0:	eddf 6a0a 	vldr	s13, [pc, #40]	; db3dc <__kernel_sinf+0x8c>
   db3b4:	eed7 0a27 	vfnms.f32	s1, s14, s15
   db3b8:	eee5 0a26 	vfma.f32	s1, s10, s13
   db3bc:	ee30 0a60 	vsub.f32	s0, s0, s1
   db3c0:	4770      	bx	lr
   db3c2:	bf00      	nop
   db3c4:	2f2ec9d3 	.word	0x2f2ec9d3
   db3c8:	b2d72f34 	.word	0xb2d72f34
   db3cc:	3638ef1b 	.word	0x3638ef1b
   db3d0:	b9500d01 	.word	0xb9500d01
   db3d4:	3c088889 	.word	0x3c088889
   db3d8:	be2aaaab 	.word	0xbe2aaaab
   db3dc:	3e2aaaab 	.word	0x3e2aaaab

000db3e0 <atan>:
   db3e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db3e4:	ec55 4b10 	vmov	r4, r5, d0
   db3e8:	4bcd      	ldr	r3, [pc, #820]	; (db720 <atan+0x340>)
   db3ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   db3ee:	429e      	cmp	r6, r3
   db3f0:	46aa      	mov	sl, r5
   db3f2:	dd0d      	ble.n	db410 <atan+0x30>
   db3f4:	4bcb      	ldr	r3, [pc, #812]	; (db724 <atan+0x344>)
   db3f6:	429e      	cmp	r6, r3
   db3f8:	f300 80b5 	bgt.w	db566 <atan+0x186>
   db3fc:	f000 80b0 	beq.w	db560 <atan+0x180>
   db400:	f1ba 0f00 	cmp.w	sl, #0
   db404:	f340 80f6 	ble.w	db5f4 <atan+0x214>
   db408:	ed9f 0ba9 	vldr	d0, [pc, #676]	; db6b0 <atan+0x2d0>
   db40c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db410:	4bc5      	ldr	r3, [pc, #788]	; (db728 <atan+0x348>)
   db412:	429e      	cmp	r6, r3
   db414:	f300 80c3 	bgt.w	db59e <atan+0x1be>
   db418:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   db41c:	429e      	cmp	r6, r3
   db41e:	f340 80ac 	ble.w	db57a <atan+0x19a>
   db422:	f04f 3bff 	mov.w	fp, #4294967295
   db426:	4622      	mov	r2, r4
   db428:	462b      	mov	r3, r5
   db42a:	4620      	mov	r0, r4
   db42c:	4629      	mov	r1, r5
   db42e:	f000 fe25 	bl	dc07c <__aeabi_dmul>
   db432:	4602      	mov	r2, r0
   db434:	460b      	mov	r3, r1
   db436:	4680      	mov	r8, r0
   db438:	4689      	mov	r9, r1
   db43a:	f000 fe1f 	bl	dc07c <__aeabi_dmul>
   db43e:	a39e      	add	r3, pc, #632	; (adr r3, db6b8 <atan+0x2d8>)
   db440:	e9d3 2300 	ldrd	r2, r3, [r3]
   db444:	4606      	mov	r6, r0
   db446:	460f      	mov	r7, r1
   db448:	f000 fe18 	bl	dc07c <__aeabi_dmul>
   db44c:	a39c      	add	r3, pc, #624	; (adr r3, db6c0 <atan+0x2e0>)
   db44e:	e9d3 2300 	ldrd	r2, r3, [r3]
   db452:	f000 fc5d 	bl	dbd10 <__adddf3>
   db456:	4632      	mov	r2, r6
   db458:	463b      	mov	r3, r7
   db45a:	f000 fe0f 	bl	dc07c <__aeabi_dmul>
   db45e:	a39a      	add	r3, pc, #616	; (adr r3, db6c8 <atan+0x2e8>)
   db460:	e9d3 2300 	ldrd	r2, r3, [r3]
   db464:	f000 fc54 	bl	dbd10 <__adddf3>
   db468:	4632      	mov	r2, r6
   db46a:	463b      	mov	r3, r7
   db46c:	f000 fe06 	bl	dc07c <__aeabi_dmul>
   db470:	a397      	add	r3, pc, #604	; (adr r3, db6d0 <atan+0x2f0>)
   db472:	e9d3 2300 	ldrd	r2, r3, [r3]
   db476:	f000 fc4b 	bl	dbd10 <__adddf3>
   db47a:	4632      	mov	r2, r6
   db47c:	463b      	mov	r3, r7
   db47e:	f000 fdfd 	bl	dc07c <__aeabi_dmul>
   db482:	a395      	add	r3, pc, #596	; (adr r3, db6d8 <atan+0x2f8>)
   db484:	e9d3 2300 	ldrd	r2, r3, [r3]
   db488:	f000 fc42 	bl	dbd10 <__adddf3>
   db48c:	4632      	mov	r2, r6
   db48e:	463b      	mov	r3, r7
   db490:	f000 fdf4 	bl	dc07c <__aeabi_dmul>
   db494:	a392      	add	r3, pc, #584	; (adr r3, db6e0 <atan+0x300>)
   db496:	e9d3 2300 	ldrd	r2, r3, [r3]
   db49a:	f000 fc39 	bl	dbd10 <__adddf3>
   db49e:	4642      	mov	r2, r8
   db4a0:	464b      	mov	r3, r9
   db4a2:	f000 fdeb 	bl	dc07c <__aeabi_dmul>
   db4a6:	a390      	add	r3, pc, #576	; (adr r3, db6e8 <atan+0x308>)
   db4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   db4ac:	4680      	mov	r8, r0
   db4ae:	4689      	mov	r9, r1
   db4b0:	4630      	mov	r0, r6
   db4b2:	4639      	mov	r1, r7
   db4b4:	f000 fde2 	bl	dc07c <__aeabi_dmul>
   db4b8:	a38d      	add	r3, pc, #564	; (adr r3, db6f0 <atan+0x310>)
   db4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   db4be:	f000 fc25 	bl	dbd0c <__aeabi_dsub>
   db4c2:	4632      	mov	r2, r6
   db4c4:	463b      	mov	r3, r7
   db4c6:	f000 fdd9 	bl	dc07c <__aeabi_dmul>
   db4ca:	a38b      	add	r3, pc, #556	; (adr r3, db6f8 <atan+0x318>)
   db4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   db4d0:	f000 fc1c 	bl	dbd0c <__aeabi_dsub>
   db4d4:	4632      	mov	r2, r6
   db4d6:	463b      	mov	r3, r7
   db4d8:	f000 fdd0 	bl	dc07c <__aeabi_dmul>
   db4dc:	a388      	add	r3, pc, #544	; (adr r3, db700 <atan+0x320>)
   db4de:	e9d3 2300 	ldrd	r2, r3, [r3]
   db4e2:	f000 fc13 	bl	dbd0c <__aeabi_dsub>
   db4e6:	4632      	mov	r2, r6
   db4e8:	463b      	mov	r3, r7
   db4ea:	f000 fdc7 	bl	dc07c <__aeabi_dmul>
   db4ee:	a386      	add	r3, pc, #536	; (adr r3, db708 <atan+0x328>)
   db4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   db4f4:	f000 fc0a 	bl	dbd0c <__aeabi_dsub>
   db4f8:	4632      	mov	r2, r6
   db4fa:	463b      	mov	r3, r7
   db4fc:	f000 fdbe 	bl	dc07c <__aeabi_dmul>
   db500:	f1bb 3fff 	cmp.w	fp, #4294967295
   db504:	4602      	mov	r2, r0
   db506:	460b      	mov	r3, r1
   db508:	d078      	beq.n	db5fc <atan+0x21c>
   db50a:	4640      	mov	r0, r8
   db50c:	4649      	mov	r1, r9
   db50e:	f000 fbff 	bl	dbd10 <__adddf3>
   db512:	4e86      	ldr	r6, [pc, #536]	; (db72c <atan+0x34c>)
   db514:	4622      	mov	r2, r4
   db516:	462b      	mov	r3, r5
   db518:	f000 fdb0 	bl	dc07c <__aeabi_dmul>
   db51c:	4b84      	ldr	r3, [pc, #528]	; (db730 <atan+0x350>)
   db51e:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   db522:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   db526:	449b      	add	fp, r3
   db528:	e9db 2300 	ldrd	r2, r3, [fp]
   db52c:	f000 fbee 	bl	dbd0c <__aeabi_dsub>
   db530:	4622      	mov	r2, r4
   db532:	462b      	mov	r3, r5
   db534:	f000 fbea 	bl	dbd0c <__aeabi_dsub>
   db538:	4602      	mov	r2, r0
   db53a:	460b      	mov	r3, r1
   db53c:	e9d6 0100 	ldrd	r0, r1, [r6]
   db540:	f000 fbe4 	bl	dbd0c <__aeabi_dsub>
   db544:	f1ba 0f00 	cmp.w	sl, #0
   db548:	ec41 0b10 	vmov	d0, r0, r1
   db54c:	da13      	bge.n	db576 <atan+0x196>
   db54e:	ee10 1a90 	vmov	r1, s1
   db552:	4602      	mov	r2, r0
   db554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db558:	ec43 2b10 	vmov	d0, r2, r3
   db55c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db560:	2c00      	cmp	r4, #0
   db562:	f43f af4d 	beq.w	db400 <atan+0x20>
   db566:	4622      	mov	r2, r4
   db568:	462b      	mov	r3, r5
   db56a:	4620      	mov	r0, r4
   db56c:	4629      	mov	r1, r5
   db56e:	f000 fbcf 	bl	dbd10 <__adddf3>
   db572:	ec41 0b10 	vmov	d0, r0, r1
   db576:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db57a:	a365      	add	r3, pc, #404	; (adr r3, db710 <atan+0x330>)
   db57c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db580:	ee10 0a10 	vmov	r0, s0
   db584:	4629      	mov	r1, r5
   db586:	f000 fbc3 	bl	dbd10 <__adddf3>
   db58a:	4b6a      	ldr	r3, [pc, #424]	; (db734 <atan+0x354>)
   db58c:	2200      	movs	r2, #0
   db58e:	f001 f805 	bl	dc59c <__aeabi_dcmpgt>
   db592:	2800      	cmp	r0, #0
   db594:	f43f af45 	beq.w	db422 <atan+0x42>
   db598:	ec45 4b10 	vmov	d0, r4, r5
   db59c:	e7eb      	b.n	db576 <atan+0x196>
   db59e:	f000 f8d3 	bl	db748 <fabs>
   db5a2:	4b65      	ldr	r3, [pc, #404]	; (db738 <atan+0x358>)
   db5a4:	429e      	cmp	r6, r3
   db5a6:	ec55 4b10 	vmov	r4, r5, d0
   db5aa:	dc39      	bgt.n	db620 <atan+0x240>
   db5ac:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   db5b0:	429e      	cmp	r6, r3
   db5b2:	dc62      	bgt.n	db67a <atan+0x29a>
   db5b4:	ee10 2a10 	vmov	r2, s0
   db5b8:	ee10 0a10 	vmov	r0, s0
   db5bc:	462b      	mov	r3, r5
   db5be:	4629      	mov	r1, r5
   db5c0:	f000 fba6 	bl	dbd10 <__adddf3>
   db5c4:	4b5b      	ldr	r3, [pc, #364]	; (db734 <atan+0x354>)
   db5c6:	2200      	movs	r2, #0
   db5c8:	f000 fba0 	bl	dbd0c <__aeabi_dsub>
   db5cc:	2200      	movs	r2, #0
   db5ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   db5d2:	4606      	mov	r6, r0
   db5d4:	460f      	mov	r7, r1
   db5d6:	4620      	mov	r0, r4
   db5d8:	4629      	mov	r1, r5
   db5da:	f000 fb99 	bl	dbd10 <__adddf3>
   db5de:	4602      	mov	r2, r0
   db5e0:	460b      	mov	r3, r1
   db5e2:	4630      	mov	r0, r6
   db5e4:	4639      	mov	r1, r7
   db5e6:	f000 fe73 	bl	dc2d0 <__aeabi_ddiv>
   db5ea:	f04f 0b00 	mov.w	fp, #0
   db5ee:	4604      	mov	r4, r0
   db5f0:	460d      	mov	r5, r1
   db5f2:	e718      	b.n	db426 <atan+0x46>
   db5f4:	ed9f 0b48 	vldr	d0, [pc, #288]	; db718 <atan+0x338>
   db5f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db5fc:	4640      	mov	r0, r8
   db5fe:	4649      	mov	r1, r9
   db600:	f000 fb86 	bl	dbd10 <__adddf3>
   db604:	4622      	mov	r2, r4
   db606:	462b      	mov	r3, r5
   db608:	f000 fd38 	bl	dc07c <__aeabi_dmul>
   db60c:	4602      	mov	r2, r0
   db60e:	460b      	mov	r3, r1
   db610:	4620      	mov	r0, r4
   db612:	4629      	mov	r1, r5
   db614:	f000 fb7a 	bl	dbd0c <__aeabi_dsub>
   db618:	ec41 0b10 	vmov	d0, r0, r1
   db61c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db620:	4b46      	ldr	r3, [pc, #280]	; (db73c <atan+0x35c>)
   db622:	429e      	cmp	r6, r3
   db624:	da1d      	bge.n	db662 <atan+0x282>
   db626:	ee10 0a10 	vmov	r0, s0
   db62a:	4b45      	ldr	r3, [pc, #276]	; (db740 <atan+0x360>)
   db62c:	2200      	movs	r2, #0
   db62e:	4629      	mov	r1, r5
   db630:	f000 fb6c 	bl	dbd0c <__aeabi_dsub>
   db634:	4b42      	ldr	r3, [pc, #264]	; (db740 <atan+0x360>)
   db636:	4606      	mov	r6, r0
   db638:	460f      	mov	r7, r1
   db63a:	2200      	movs	r2, #0
   db63c:	4620      	mov	r0, r4
   db63e:	4629      	mov	r1, r5
   db640:	f000 fd1c 	bl	dc07c <__aeabi_dmul>
   db644:	4b3b      	ldr	r3, [pc, #236]	; (db734 <atan+0x354>)
   db646:	2200      	movs	r2, #0
   db648:	f000 fb62 	bl	dbd10 <__adddf3>
   db64c:	4602      	mov	r2, r0
   db64e:	460b      	mov	r3, r1
   db650:	4630      	mov	r0, r6
   db652:	4639      	mov	r1, r7
   db654:	f000 fe3c 	bl	dc2d0 <__aeabi_ddiv>
   db658:	f04f 0b02 	mov.w	fp, #2
   db65c:	4604      	mov	r4, r0
   db65e:	460d      	mov	r5, r1
   db660:	e6e1      	b.n	db426 <atan+0x46>
   db662:	462b      	mov	r3, r5
   db664:	ee10 2a10 	vmov	r2, s0
   db668:	4936      	ldr	r1, [pc, #216]	; (db744 <atan+0x364>)
   db66a:	2000      	movs	r0, #0
   db66c:	f000 fe30 	bl	dc2d0 <__aeabi_ddiv>
   db670:	f04f 0b03 	mov.w	fp, #3
   db674:	4604      	mov	r4, r0
   db676:	460d      	mov	r5, r1
   db678:	e6d5      	b.n	db426 <atan+0x46>
   db67a:	ee10 0a10 	vmov	r0, s0
   db67e:	4b2d      	ldr	r3, [pc, #180]	; (db734 <atan+0x354>)
   db680:	2200      	movs	r2, #0
   db682:	4629      	mov	r1, r5
   db684:	f000 fb42 	bl	dbd0c <__aeabi_dsub>
   db688:	4b2a      	ldr	r3, [pc, #168]	; (db734 <atan+0x354>)
   db68a:	2200      	movs	r2, #0
   db68c:	4606      	mov	r6, r0
   db68e:	460f      	mov	r7, r1
   db690:	4620      	mov	r0, r4
   db692:	4629      	mov	r1, r5
   db694:	f000 fb3c 	bl	dbd10 <__adddf3>
   db698:	4602      	mov	r2, r0
   db69a:	460b      	mov	r3, r1
   db69c:	4630      	mov	r0, r6
   db69e:	4639      	mov	r1, r7
   db6a0:	f000 fe16 	bl	dc2d0 <__aeabi_ddiv>
   db6a4:	f04f 0b01 	mov.w	fp, #1
   db6a8:	4604      	mov	r4, r0
   db6aa:	460d      	mov	r5, r1
   db6ac:	e6bb      	b.n	db426 <atan+0x46>
   db6ae:	bf00      	nop
   db6b0:	54442d18 	.word	0x54442d18
   db6b4:	3ff921fb 	.word	0x3ff921fb
   db6b8:	e322da11 	.word	0xe322da11
   db6bc:	3f90ad3a 	.word	0x3f90ad3a
   db6c0:	24760deb 	.word	0x24760deb
   db6c4:	3fa97b4b 	.word	0x3fa97b4b
   db6c8:	a0d03d51 	.word	0xa0d03d51
   db6cc:	3fb10d66 	.word	0x3fb10d66
   db6d0:	c54c206e 	.word	0xc54c206e
   db6d4:	3fb745cd 	.word	0x3fb745cd
   db6d8:	920083ff 	.word	0x920083ff
   db6dc:	3fc24924 	.word	0x3fc24924
   db6e0:	5555550d 	.word	0x5555550d
   db6e4:	3fd55555 	.word	0x3fd55555
   db6e8:	2c6a6c2f 	.word	0x2c6a6c2f
   db6ec:	bfa2b444 	.word	0xbfa2b444
   db6f0:	52defd9a 	.word	0x52defd9a
   db6f4:	3fadde2d 	.word	0x3fadde2d
   db6f8:	af749a6d 	.word	0xaf749a6d
   db6fc:	3fb3b0f2 	.word	0x3fb3b0f2
   db700:	fe231671 	.word	0xfe231671
   db704:	3fbc71c6 	.word	0x3fbc71c6
   db708:	9998ebc4 	.word	0x9998ebc4
   db70c:	3fc99999 	.word	0x3fc99999
   db710:	8800759c 	.word	0x8800759c
   db714:	7e37e43c 	.word	0x7e37e43c
   db718:	54442d18 	.word	0x54442d18
   db71c:	bff921fb 	.word	0xbff921fb
   db720:	440fffff 	.word	0x440fffff
   db724:	7ff00000 	.word	0x7ff00000
   db728:	3fdbffff 	.word	0x3fdbffff
   db72c:	000de430 	.word	0x000de430
   db730:	000de450 	.word	0x000de450
   db734:	3ff00000 	.word	0x3ff00000
   db738:	3ff2ffff 	.word	0x3ff2ffff
   db73c:	40038000 	.word	0x40038000
   db740:	3ff80000 	.word	0x3ff80000
   db744:	bff00000 	.word	0xbff00000

000db748 <fabs>:
   db748:	ec51 0b10 	vmov	r0, r1, d0
   db74c:	ee10 2a10 	vmov	r2, s0
   db750:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db754:	ec43 2b10 	vmov	d0, r2, r3
   db758:	4770      	bx	lr
   db75a:	bf00      	nop

000db75c <finite>:
   db75c:	b082      	sub	sp, #8
   db75e:	ed8d 0b00 	vstr	d0, [sp]
   db762:	9801      	ldr	r0, [sp, #4]
   db764:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   db768:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   db76c:	0fc0      	lsrs	r0, r0, #31
   db76e:	b002      	add	sp, #8
   db770:	4770      	bx	lr
   db772:	bf00      	nop

000db774 <matherr>:
   db774:	2000      	movs	r0, #0
   db776:	4770      	bx	lr

000db778 <nan>:
   db778:	ed9f 0b01 	vldr	d0, [pc, #4]	; db780 <nan+0x8>
   db77c:	4770      	bx	lr
   db77e:	bf00      	nop
   db780:	00000000 	.word	0x00000000
   db784:	7ff80000 	.word	0x7ff80000

000db788 <rint>:
   db788:	b5f0      	push	{r4, r5, r6, r7, lr}
   db78a:	ec53 2b10 	vmov	r2, r3, d0
   db78e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   db792:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   db796:	2813      	cmp	r0, #19
   db798:	ee10 5a10 	vmov	r5, s0
   db79c:	b083      	sub	sp, #12
   db79e:	4619      	mov	r1, r3
   db7a0:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   db7a4:	dc31      	bgt.n	db80a <rint+0x82>
   db7a6:	2800      	cmp	r0, #0
   db7a8:	db4c      	blt.n	db844 <rint+0xbc>
   db7aa:	4e3e      	ldr	r6, [pc, #248]	; (db8a4 <rint+0x11c>)
   db7ac:	4106      	asrs	r6, r0
   db7ae:	ea03 0706 	and.w	r7, r3, r6
   db7b2:	4317      	orrs	r7, r2
   db7b4:	d02e      	beq.n	db814 <rint+0x8c>
   db7b6:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   db7ba:	431d      	orrs	r5, r3
   db7bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
   db7c0:	d00c      	beq.n	db7dc <rint+0x54>
   db7c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   db7c6:	2813      	cmp	r0, #19
   db7c8:	ea21 0606 	bic.w	r6, r1, r6
   db7cc:	fa43 f100 	asr.w	r1, r3, r0
   db7d0:	ea41 0106 	orr.w	r1, r1, r6
   db7d4:	bf0c      	ite	eq
   db7d6:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   db7da:	2500      	movne	r5, #0
   db7dc:	4832      	ldr	r0, [pc, #200]	; (db8a8 <rint+0x120>)
   db7de:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   db7e2:	462a      	mov	r2, r5
   db7e4:	e9d4 4500 	ldrd	r4, r5, [r4]
   db7e8:	460b      	mov	r3, r1
   db7ea:	4620      	mov	r0, r4
   db7ec:	4629      	mov	r1, r5
   db7ee:	f000 fa8f 	bl	dbd10 <__adddf3>
   db7f2:	e9cd 0100 	strd	r0, r1, [sp]
   db7f6:	e9dd 0100 	ldrd	r0, r1, [sp]
   db7fa:	4622      	mov	r2, r4
   db7fc:	462b      	mov	r3, r5
   db7fe:	f000 fa85 	bl	dbd0c <__aeabi_dsub>
   db802:	ec41 0b10 	vmov	d0, r0, r1
   db806:	b003      	add	sp, #12
   db808:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db80a:	2833      	cmp	r0, #51	; 0x33
   db80c:	dd06      	ble.n	db81c <rint+0x94>
   db80e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   db812:	d040      	beq.n	db896 <rint+0x10e>
   db814:	ec43 2b10 	vmov	d0, r2, r3
   db818:	b003      	add	sp, #12
   db81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db81c:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   db820:	f04f 30ff 	mov.w	r0, #4294967295
   db824:	40f0      	lsrs	r0, r6
   db826:	4202      	tst	r2, r0
   db828:	d0f4      	beq.n	db814 <rint+0x8c>
   db82a:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   db82e:	ea4f 0350 	mov.w	r3, r0, lsr #1
   db832:	d0d3      	beq.n	db7dc <rint+0x54>
   db834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   db838:	ea25 0503 	bic.w	r5, r5, r3
   db83c:	fa42 f606 	asr.w	r6, r2, r6
   db840:	4335      	orrs	r5, r6
   db842:	e7cb      	b.n	db7dc <rint+0x54>
   db844:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   db848:	4310      	orrs	r0, r2
   db84a:	d0e3      	beq.n	db814 <rint+0x8c>
   db84c:	f3c3 0013 	ubfx	r0, r3, #0, #20
   db850:	4310      	orrs	r0, r2
   db852:	4245      	negs	r5, r0
   db854:	4305      	orrs	r5, r0
   db856:	4814      	ldr	r0, [pc, #80]	; (db8a8 <rint+0x120>)
   db858:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   db85c:	e9d0 6700 	ldrd	r6, r7, [r0]
   db860:	0c59      	lsrs	r1, r3, #17
   db862:	0b2d      	lsrs	r5, r5, #12
   db864:	0449      	lsls	r1, r1, #17
   db866:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   db86a:	ea45 0301 	orr.w	r3, r5, r1
   db86e:	4630      	mov	r0, r6
   db870:	4639      	mov	r1, r7
   db872:	f000 fa4d 	bl	dbd10 <__adddf3>
   db876:	e9cd 0100 	strd	r0, r1, [sp]
   db87a:	463b      	mov	r3, r7
   db87c:	e9dd 0100 	ldrd	r0, r1, [sp]
   db880:	4632      	mov	r2, r6
   db882:	f000 fa43 	bl	dbd0c <__aeabi_dsub>
   db886:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db88a:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   db88e:	ec41 0b10 	vmov	d0, r0, r1
   db892:	b003      	add	sp, #12
   db894:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db896:	ee10 0a10 	vmov	r0, s0
   db89a:	f000 fa39 	bl	dbd10 <__adddf3>
   db89e:	ec41 0b10 	vmov	d0, r0, r1
   db8a2:	e7b9      	b.n	db818 <rint+0x90>
   db8a4:	000fffff 	.word	0x000fffff
   db8a8:	000de470 	.word	0x000de470
   db8ac:	00000000 	.word	0x00000000

000db8b0 <scalbn>:
   db8b0:	b538      	push	{r3, r4, r5, lr}
   db8b2:	ec53 2b10 	vmov	r2, r3, d0
   db8b6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   db8ba:	461c      	mov	r4, r3
   db8bc:	4605      	mov	r5, r0
   db8be:	bb81      	cbnz	r1, db922 <scalbn+0x72>
   db8c0:	ee10 1a10 	vmov	r1, s0
   db8c4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   db8c8:	4321      	orrs	r1, r4
   db8ca:	d029      	beq.n	db920 <scalbn+0x70>
   db8cc:	4619      	mov	r1, r3
   db8ce:	2200      	movs	r2, #0
   db8d0:	4b3d      	ldr	r3, [pc, #244]	; (db9c8 <scalbn+0x118>)
   db8d2:	4c3e      	ldr	r4, [pc, #248]	; (db9cc <scalbn+0x11c>)
   db8d4:	ee10 0a10 	vmov	r0, s0
   db8d8:	f000 fbd0 	bl	dc07c <__aeabi_dmul>
   db8dc:	42a5      	cmp	r5, r4
   db8de:	4602      	mov	r2, r0
   db8e0:	460b      	mov	r3, r1
   db8e2:	db16      	blt.n	db912 <scalbn+0x62>
   db8e4:	460c      	mov	r4, r1
   db8e6:	f3c1 510a 	ubfx	r1, r1, #20, #11
   db8ea:	3936      	subs	r1, #54	; 0x36
   db8ec:	4429      	add	r1, r5
   db8ee:	f240 70fe 	movw	r0, #2046	; 0x7fe
   db8f2:	4281      	cmp	r1, r0
   db8f4:	dc21      	bgt.n	db93a <scalbn+0x8a>
   db8f6:	2900      	cmp	r1, #0
   db8f8:	dc47      	bgt.n	db98a <scalbn+0xda>
   db8fa:	f111 0f35 	cmn.w	r1, #53	; 0x35
   db8fe:	da34      	bge.n	db96a <scalbn+0xba>
   db900:	f24c 3150 	movw	r1, #50000	; 0xc350
   db904:	428d      	cmp	r5, r1
   db906:	dc18      	bgt.n	db93a <scalbn+0x8a>
   db908:	2b00      	cmp	r3, #0
   db90a:	a127      	add	r1, pc, #156	; (adr r1, db9a8 <scalbn+0xf8>)
   db90c:	e9d1 0100 	ldrd	r0, r1, [r1]
   db910:	db44      	blt.n	db99c <scalbn+0xec>
   db912:	a325      	add	r3, pc, #148	; (adr r3, db9a8 <scalbn+0xf8>)
   db914:	e9d3 2300 	ldrd	r2, r3, [r3]
   db918:	f000 fbb0 	bl	dc07c <__aeabi_dmul>
   db91c:	ec41 0b10 	vmov	d0, r0, r1
   db920:	bd38      	pop	{r3, r4, r5, pc}
   db922:	f240 70ff 	movw	r0, #2047	; 0x7ff
   db926:	4281      	cmp	r1, r0
   db928:	d1e0      	bne.n	db8ec <scalbn+0x3c>
   db92a:	ee10 0a10 	vmov	r0, s0
   db92e:	4619      	mov	r1, r3
   db930:	f000 f9ee 	bl	dbd10 <__adddf3>
   db934:	ec41 0b10 	vmov	d0, r0, r1
   db938:	bd38      	pop	{r3, r4, r5, pc}
   db93a:	2b00      	cmp	r3, #0
   db93c:	a11c      	add	r1, pc, #112	; (adr r1, db9b0 <scalbn+0x100>)
   db93e:	e9d1 0100 	ldrd	r0, r1, [r1]
   db942:	db07      	blt.n	db954 <scalbn+0xa4>
   db944:	a31a      	add	r3, pc, #104	; (adr r3, db9b0 <scalbn+0x100>)
   db946:	e9d3 2300 	ldrd	r2, r3, [r3]
   db94a:	f000 fb97 	bl	dc07c <__aeabi_dmul>
   db94e:	ec41 0b10 	vmov	d0, r0, r1
   db952:	bd38      	pop	{r3, r4, r5, pc}
   db954:	a118      	add	r1, pc, #96	; (adr r1, db9b8 <scalbn+0x108>)
   db956:	e9d1 0100 	ldrd	r0, r1, [r1]
   db95a:	a315      	add	r3, pc, #84	; (adr r3, db9b0 <scalbn+0x100>)
   db95c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db960:	f000 fb8c 	bl	dc07c <__aeabi_dmul>
   db964:	ec41 0b10 	vmov	d0, r0, r1
   db968:	e7f3      	b.n	db952 <scalbn+0xa2>
   db96a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   db96e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   db972:	3136      	adds	r1, #54	; 0x36
   db974:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   db978:	4610      	mov	r0, r2
   db97a:	4619      	mov	r1, r3
   db97c:	2200      	movs	r2, #0
   db97e:	4b14      	ldr	r3, [pc, #80]	; (db9d0 <scalbn+0x120>)
   db980:	f000 fb7c 	bl	dc07c <__aeabi_dmul>
   db984:	ec41 0b10 	vmov	d0, r0, r1
   db988:	bd38      	pop	{r3, r4, r5, pc}
   db98a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   db98e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   db992:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   db996:	ec43 2b10 	vmov	d0, r2, r3
   db99a:	bd38      	pop	{r3, r4, r5, pc}
   db99c:	a108      	add	r1, pc, #32	; (adr r1, db9c0 <scalbn+0x110>)
   db99e:	e9d1 0100 	ldrd	r0, r1, [r1]
   db9a2:	e7b6      	b.n	db912 <scalbn+0x62>
   db9a4:	f3af 8000 	nop.w
   db9a8:	c2f8f359 	.word	0xc2f8f359
   db9ac:	01a56e1f 	.word	0x01a56e1f
   db9b0:	8800759c 	.word	0x8800759c
   db9b4:	7e37e43c 	.word	0x7e37e43c
   db9b8:	8800759c 	.word	0x8800759c
   db9bc:	fe37e43c 	.word	0xfe37e43c
   db9c0:	c2f8f359 	.word	0xc2f8f359
   db9c4:	81a56e1f 	.word	0x81a56e1f
   db9c8:	43500000 	.word	0x43500000
   db9cc:	ffff3cb0 	.word	0xffff3cb0
   db9d0:	3c900000 	.word	0x3c900000

000db9d4 <atanf>:
   db9d4:	b538      	push	{r3, r4, r5, lr}
   db9d6:	ee10 5a10 	vmov	r5, s0
   db9da:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   db9de:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   db9e2:	eef0 7a40 	vmov.f32	s15, s0
   db9e6:	db0b      	blt.n	dba00 <atanf+0x2c>
   db9e8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   db9ec:	dc59      	bgt.n	dbaa2 <atanf+0xce>
   db9ee:	eddf 7a52 	vldr	s15, [pc, #328]	; dbb38 <atanf+0x164>
   db9f2:	ed9f 0a52 	vldr	s0, [pc, #328]	; dbb3c <atanf+0x168>
   db9f6:	2d00      	cmp	r5, #0
   db9f8:	bfc8      	it	gt
   db9fa:	eeb0 0a67 	vmovgt.f32	s0, s15
   db9fe:	bd38      	pop	{r3, r4, r5, pc}
   dba00:	4b4f      	ldr	r3, [pc, #316]	; (dbb40 <atanf+0x16c>)
   dba02:	429c      	cmp	r4, r3
   dba04:	dc5c      	bgt.n	dbac0 <atanf+0xec>
   dba06:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   dba0a:	db4d      	blt.n	dbaa8 <atanf+0xd4>
   dba0c:	f04f 33ff 	mov.w	r3, #4294967295
   dba10:	ee27 6aa7 	vmul.f32	s12, s15, s15
   dba14:	ed9f 1a4b 	vldr	s2, [pc, #300]	; dbb44 <atanf+0x170>
   dba18:	ed9f 2a4b 	vldr	s4, [pc, #300]	; dbb48 <atanf+0x174>
   dba1c:	ed9f 3a4b 	vldr	s6, [pc, #300]	; dbb4c <atanf+0x178>
   dba20:	eddf 1a4b 	vldr	s3, [pc, #300]	; dbb50 <atanf+0x17c>
   dba24:	eddf 2a4b 	vldr	s5, [pc, #300]	; dbb54 <atanf+0x180>
   dba28:	ed9f 4a4b 	vldr	s8, [pc, #300]	; dbb58 <atanf+0x184>
   dba2c:	eddf 3a4b 	vldr	s7, [pc, #300]	; dbb5c <atanf+0x188>
   dba30:	ed9f 5a4b 	vldr	s10, [pc, #300]	; dbb60 <atanf+0x18c>
   dba34:	eddf 4a4b 	vldr	s9, [pc, #300]	; dbb64 <atanf+0x190>
   dba38:	eddf 6a4b 	vldr	s13, [pc, #300]	; dbb68 <atanf+0x194>
   dba3c:	eddf 5a4b 	vldr	s11, [pc, #300]	; dbb6c <atanf+0x198>
   dba40:	ee26 7a06 	vmul.f32	s14, s12, s12
   dba44:	1c5a      	adds	r2, r3, #1
   dba46:	eea7 2a01 	vfma.f32	s4, s14, s2
   dba4a:	eee7 2a21 	vfma.f32	s5, s14, s3
   dba4e:	eea2 3a07 	vfma.f32	s6, s4, s14
   dba52:	eee2 3a87 	vfma.f32	s7, s5, s14
   dba56:	eea3 4a07 	vfma.f32	s8, s6, s14
   dba5a:	eee3 4a87 	vfma.f32	s9, s7, s14
   dba5e:	eea4 5a07 	vfma.f32	s10, s8, s14
   dba62:	eee4 5a87 	vfma.f32	s11, s9, s14
   dba66:	eee5 6a07 	vfma.f32	s13, s10, s14
   dba6a:	ee25 7a87 	vmul.f32	s14, s11, s14
   dba6e:	ee66 6a86 	vmul.f32	s13, s13, s12
   dba72:	d03a      	beq.n	dbaea <atanf+0x116>
   dba74:	493e      	ldr	r1, [pc, #248]	; (dbb70 <atanf+0x19c>)
   dba76:	4a3f      	ldr	r2, [pc, #252]	; (dbb74 <atanf+0x1a0>)
   dba78:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   dba7c:	ee76 6a87 	vadd.f32	s13, s13, s14
   dba80:	ed91 0a00 	vldr	s0, [r1]
   dba84:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   dba88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dba8c:	2d00      	cmp	r5, #0
   dba8e:	ed93 7a00 	vldr	s14, [r3]
   dba92:	ee70 7a67 	vsub.f32	s15, s0, s15
   dba96:	ee37 0a67 	vsub.f32	s0, s14, s15
   dba9a:	dab0      	bge.n	db9fe <atanf+0x2a>
   dba9c:	eeb1 0a40 	vneg.f32	s0, s0
   dbaa0:	bd38      	pop	{r3, r4, r5, pc}
   dbaa2:	ee30 0a00 	vadd.f32	s0, s0, s0
   dbaa6:	bd38      	pop	{r3, r4, r5, pc}
   dbaa8:	ed9f 7a33 	vldr	s14, [pc, #204]	; dbb78 <atanf+0x1a4>
   dbaac:	ee30 7a07 	vadd.f32	s14, s0, s14
   dbab0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   dbab4:	eeb4 7ae6 	vcmpe.f32	s14, s13
   dbab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbabc:	dda6      	ble.n	dba0c <atanf+0x38>
   dbabe:	bd38      	pop	{r3, r4, r5, pc}
   dbac0:	f000 f860 	bl	dbb84 <fabsf>
   dbac4:	4b2d      	ldr	r3, [pc, #180]	; (dbb7c <atanf+0x1a8>)
   dbac6:	429c      	cmp	r4, r3
   dbac8:	dc16      	bgt.n	dbaf8 <atanf+0x124>
   dbaca:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   dbace:	429c      	cmp	r4, r3
   dbad0:	dc27      	bgt.n	dbb22 <atanf+0x14e>
   dbad2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   dbad6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   dbada:	eea0 7a27 	vfma.f32	s14, s0, s15
   dbade:	2300      	movs	r3, #0
   dbae0:	ee30 0a27 	vadd.f32	s0, s0, s15
   dbae4:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dbae8:	e792      	b.n	dba10 <atanf+0x3c>
   dbaea:	ee76 6a87 	vadd.f32	s13, s13, s14
   dbaee:	eee6 7ae7 	vfms.f32	s15, s13, s15
   dbaf2:	eeb0 0a67 	vmov.f32	s0, s15
   dbaf6:	bd38      	pop	{r3, r4, r5, pc}
   dbaf8:	4b21      	ldr	r3, [pc, #132]	; (dbb80 <atanf+0x1ac>)
   dbafa:	429c      	cmp	r4, r3
   dbafc:	dc0b      	bgt.n	dbb16 <atanf+0x142>
   dbafe:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   dbb02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   dbb06:	eea0 7a27 	vfma.f32	s14, s0, s15
   dbb0a:	2302      	movs	r3, #2
   dbb0c:	ee30 0a67 	vsub.f32	s0, s0, s15
   dbb10:	eec0 7a07 	vdiv.f32	s15, s0, s14
   dbb14:	e77c      	b.n	dba10 <atanf+0x3c>
   dbb16:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   dbb1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dbb1e:	2303      	movs	r3, #3
   dbb20:	e776      	b.n	dba10 <atanf+0x3c>
   dbb22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   dbb26:	ee30 7a67 	vsub.f32	s14, s0, s15
   dbb2a:	ee30 0a27 	vadd.f32	s0, s0, s15
   dbb2e:	2301      	movs	r3, #1
   dbb30:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dbb34:	e76c      	b.n	dba10 <atanf+0x3c>
   dbb36:	bf00      	nop
   dbb38:	3fc90fdb 	.word	0x3fc90fdb
   dbb3c:	bfc90fdb 	.word	0xbfc90fdb
   dbb40:	3edfffff 	.word	0x3edfffff
   dbb44:	3c8569d7 	.word	0x3c8569d7
   dbb48:	3d4bda59 	.word	0x3d4bda59
   dbb4c:	3d886b35 	.word	0x3d886b35
   dbb50:	bd15a221 	.word	0xbd15a221
   dbb54:	bd6ef16b 	.word	0xbd6ef16b
   dbb58:	3dba2e6e 	.word	0x3dba2e6e
   dbb5c:	bd9d8795 	.word	0xbd9d8795
   dbb60:	3e124925 	.word	0x3e124925
   dbb64:	bde38e38 	.word	0xbde38e38
   dbb68:	3eaaaaab 	.word	0x3eaaaaab
   dbb6c:	be4ccccd 	.word	0xbe4ccccd
   dbb70:	000de490 	.word	0x000de490
   dbb74:	000de480 	.word	0x000de480
   dbb78:	7149f2ca 	.word	0x7149f2ca
   dbb7c:	3f97ffff 	.word	0x3f97ffff
   dbb80:	401bffff 	.word	0x401bffff

000dbb84 <fabsf>:
   dbb84:	ee10 3a10 	vmov	r3, s0
   dbb88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dbb8c:	ee00 3a10 	vmov	s0, r3
   dbb90:	4770      	bx	lr
   dbb92:	bf00      	nop

000dbb94 <floorf>:
   dbb94:	ee10 2a10 	vmov	r2, s0
   dbb98:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   dbb9c:	3b7f      	subs	r3, #127	; 0x7f
   dbb9e:	2b16      	cmp	r3, #22
   dbba0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   dbba4:	dc1a      	bgt.n	dbbdc <floorf+0x48>
   dbba6:	2b00      	cmp	r3, #0
   dbba8:	db1e      	blt.n	dbbe8 <floorf+0x54>
   dbbaa:	491a      	ldr	r1, [pc, #104]	; (dbc14 <floorf+0x80>)
   dbbac:	4119      	asrs	r1, r3
   dbbae:	420a      	tst	r2, r1
   dbbb0:	d027      	beq.n	dbc02 <floorf+0x6e>
   dbbb2:	eddf 7a19 	vldr	s15, [pc, #100]	; dbc18 <floorf+0x84>
   dbbb6:	ee70 7a27 	vadd.f32	s15, s0, s15
   dbbba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dbbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbbc2:	dd1e      	ble.n	dbc02 <floorf+0x6e>
   dbbc4:	2a00      	cmp	r2, #0
   dbbc6:	da04      	bge.n	dbbd2 <floorf+0x3e>
   dbbc8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   dbbcc:	fa40 f303 	asr.w	r3, r0, r3
   dbbd0:	441a      	add	r2, r3
   dbbd2:	ea22 0301 	bic.w	r3, r2, r1
   dbbd6:	ee00 3a10 	vmov	s0, r3
   dbbda:	4770      	bx	lr
   dbbdc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   dbbe0:	d30f      	bcc.n	dbc02 <floorf+0x6e>
   dbbe2:	ee30 0a00 	vadd.f32	s0, s0, s0
   dbbe6:	4770      	bx	lr
   dbbe8:	eddf 7a0b 	vldr	s15, [pc, #44]	; dbc18 <floorf+0x84>
   dbbec:	ee70 7a27 	vadd.f32	s15, s0, s15
   dbbf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dbbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbbf8:	dd03      	ble.n	dbc02 <floorf+0x6e>
   dbbfa:	2a00      	cmp	r2, #0
   dbbfc:	db02      	blt.n	dbc04 <floorf+0x70>
   dbbfe:	ed9f 0a07 	vldr	s0, [pc, #28]	; dbc1c <floorf+0x88>
   dbc02:	4770      	bx	lr
   dbc04:	2900      	cmp	r1, #0
   dbc06:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   dbc0a:	bf18      	it	ne
   dbc0c:	eeb0 0a67 	vmovne.f32	s0, s15
   dbc10:	4770      	bx	lr
   dbc12:	bf00      	nop
   dbc14:	007fffff 	.word	0x007fffff
   dbc18:	7149f2ca 	.word	0x7149f2ca
   dbc1c:	00000000 	.word	0x00000000

000dbc20 <scalbnf>:
   dbc20:	b082      	sub	sp, #8
   dbc22:	ed8d 0a01 	vstr	s0, [sp, #4]
   dbc26:	9b01      	ldr	r3, [sp, #4]
   dbc28:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   dbc2c:	d02a      	beq.n	dbc84 <scalbnf+0x64>
   dbc2e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   dbc32:	d223      	bcs.n	dbc7c <scalbnf+0x5c>
   dbc34:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   dbc38:	d128      	bne.n	dbc8c <scalbnf+0x6c>
   dbc3a:	ed9d 7a01 	vldr	s14, [sp, #4]
   dbc3e:	eddf 7a2a 	vldr	s15, [pc, #168]	; dbce8 <scalbnf+0xc8>
   dbc42:	4b2a      	ldr	r3, [pc, #168]	; (dbcec <scalbnf+0xcc>)
   dbc44:	ee67 7a27 	vmul.f32	s15, s14, s15
   dbc48:	4298      	cmp	r0, r3
   dbc4a:	edcd 7a01 	vstr	s15, [sp, #4]
   dbc4e:	db37      	blt.n	dbcc0 <scalbnf+0xa0>
   dbc50:	9b01      	ldr	r3, [sp, #4]
   dbc52:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   dbc56:	3a19      	subs	r2, #25
   dbc58:	4402      	add	r2, r0
   dbc5a:	2afe      	cmp	r2, #254	; 0xfe
   dbc5c:	dd1a      	ble.n	dbc94 <scalbnf+0x74>
   dbc5e:	ed9f 0a24 	vldr	s0, [pc, #144]	; dbcf0 <scalbnf+0xd0>
   dbc62:	ed9f 7a24 	vldr	s14, [pc, #144]	; dbcf4 <scalbnf+0xd4>
   dbc66:	9b01      	ldr	r3, [sp, #4]
   dbc68:	2b00      	cmp	r3, #0
   dbc6a:	eef0 7a40 	vmov.f32	s15, s0
   dbc6e:	bfb8      	it	lt
   dbc70:	eeb0 0a47 	vmovlt.f32	s0, s14
   dbc74:	ee20 0a27 	vmul.f32	s0, s0, s15
   dbc78:	b002      	add	sp, #8
   dbc7a:	4770      	bx	lr
   dbc7c:	ee30 0a00 	vadd.f32	s0, s0, s0
   dbc80:	b002      	add	sp, #8
   dbc82:	4770      	bx	lr
   dbc84:	ed9d 0a01 	vldr	s0, [sp, #4]
   dbc88:	b002      	add	sp, #8
   dbc8a:	4770      	bx	lr
   dbc8c:	0dd2      	lsrs	r2, r2, #23
   dbc8e:	4402      	add	r2, r0
   dbc90:	2afe      	cmp	r2, #254	; 0xfe
   dbc92:	dce4      	bgt.n	dbc5e <scalbnf+0x3e>
   dbc94:	2a00      	cmp	r2, #0
   dbc96:	dc0b      	bgt.n	dbcb0 <scalbnf+0x90>
   dbc98:	f112 0f16 	cmn.w	r2, #22
   dbc9c:	da17      	bge.n	dbcce <scalbnf+0xae>
   dbc9e:	f24c 3350 	movw	r3, #50000	; 0xc350
   dbca2:	4298      	cmp	r0, r3
   dbca4:	dcdb      	bgt.n	dbc5e <scalbnf+0x3e>
   dbca6:	ed9f 0a14 	vldr	s0, [pc, #80]	; dbcf8 <scalbnf+0xd8>
   dbcaa:	ed9f 7a14 	vldr	s14, [pc, #80]	; dbcfc <scalbnf+0xdc>
   dbcae:	e7da      	b.n	dbc66 <scalbnf+0x46>
   dbcb0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   dbcb4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   dbcb8:	ee00 3a10 	vmov	s0, r3
   dbcbc:	b002      	add	sp, #8
   dbcbe:	4770      	bx	lr
   dbcc0:	ed9f 0a0d 	vldr	s0, [pc, #52]	; dbcf8 <scalbnf+0xd8>
   dbcc4:	eddd 7a01 	vldr	s15, [sp, #4]
   dbcc8:	ee27 0a80 	vmul.f32	s0, s15, s0
   dbccc:	e7d8      	b.n	dbc80 <scalbnf+0x60>
   dbcce:	3219      	adds	r2, #25
   dbcd0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   dbcd4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   dbcd8:	eddf 7a09 	vldr	s15, [pc, #36]	; dbd00 <scalbnf+0xe0>
   dbcdc:	ee07 3a10 	vmov	s14, r3
   dbce0:	ee27 0a27 	vmul.f32	s0, s14, s15
   dbce4:	e7cc      	b.n	dbc80 <scalbnf+0x60>
   dbce6:	bf00      	nop
   dbce8:	4c000000 	.word	0x4c000000
   dbcec:	ffff3cb0 	.word	0xffff3cb0
   dbcf0:	7149f2ca 	.word	0x7149f2ca
   dbcf4:	f149f2ca 	.word	0xf149f2ca
   dbcf8:	0da24260 	.word	0x0da24260
   dbcfc:	8da24260 	.word	0x8da24260
   dbd00:	33000000 	.word	0x33000000

000dbd04 <__aeabi_drsub>:
   dbd04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dbd08:	e002      	b.n	dbd10 <__adddf3>
   dbd0a:	bf00      	nop

000dbd0c <__aeabi_dsub>:
   dbd0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dbd10 <__adddf3>:
   dbd10:	b530      	push	{r4, r5, lr}
   dbd12:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dbd16:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dbd1a:	ea94 0f05 	teq	r4, r5
   dbd1e:	bf08      	it	eq
   dbd20:	ea90 0f02 	teqeq	r0, r2
   dbd24:	bf1f      	itttt	ne
   dbd26:	ea54 0c00 	orrsne.w	ip, r4, r0
   dbd2a:	ea55 0c02 	orrsne.w	ip, r5, r2
   dbd2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dbd32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dbd36:	f000 80e2 	beq.w	dbefe <__adddf3+0x1ee>
   dbd3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dbd3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dbd42:	bfb8      	it	lt
   dbd44:	426d      	neglt	r5, r5
   dbd46:	dd0c      	ble.n	dbd62 <__adddf3+0x52>
   dbd48:	442c      	add	r4, r5
   dbd4a:	ea80 0202 	eor.w	r2, r0, r2
   dbd4e:	ea81 0303 	eor.w	r3, r1, r3
   dbd52:	ea82 0000 	eor.w	r0, r2, r0
   dbd56:	ea83 0101 	eor.w	r1, r3, r1
   dbd5a:	ea80 0202 	eor.w	r2, r0, r2
   dbd5e:	ea81 0303 	eor.w	r3, r1, r3
   dbd62:	2d36      	cmp	r5, #54	; 0x36
   dbd64:	bf88      	it	hi
   dbd66:	bd30      	pophi	{r4, r5, pc}
   dbd68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dbd6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dbd70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dbd74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dbd78:	d002      	beq.n	dbd80 <__adddf3+0x70>
   dbd7a:	4240      	negs	r0, r0
   dbd7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbd80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dbd84:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dbd88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dbd8c:	d002      	beq.n	dbd94 <__adddf3+0x84>
   dbd8e:	4252      	negs	r2, r2
   dbd90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dbd94:	ea94 0f05 	teq	r4, r5
   dbd98:	f000 80a7 	beq.w	dbeea <__adddf3+0x1da>
   dbd9c:	f1a4 0401 	sub.w	r4, r4, #1
   dbda0:	f1d5 0e20 	rsbs	lr, r5, #32
   dbda4:	db0d      	blt.n	dbdc2 <__adddf3+0xb2>
   dbda6:	fa02 fc0e 	lsl.w	ip, r2, lr
   dbdaa:	fa22 f205 	lsr.w	r2, r2, r5
   dbdae:	1880      	adds	r0, r0, r2
   dbdb0:	f141 0100 	adc.w	r1, r1, #0
   dbdb4:	fa03 f20e 	lsl.w	r2, r3, lr
   dbdb8:	1880      	adds	r0, r0, r2
   dbdba:	fa43 f305 	asr.w	r3, r3, r5
   dbdbe:	4159      	adcs	r1, r3
   dbdc0:	e00e      	b.n	dbde0 <__adddf3+0xd0>
   dbdc2:	f1a5 0520 	sub.w	r5, r5, #32
   dbdc6:	f10e 0e20 	add.w	lr, lr, #32
   dbdca:	2a01      	cmp	r2, #1
   dbdcc:	fa03 fc0e 	lsl.w	ip, r3, lr
   dbdd0:	bf28      	it	cs
   dbdd2:	f04c 0c02 	orrcs.w	ip, ip, #2
   dbdd6:	fa43 f305 	asr.w	r3, r3, r5
   dbdda:	18c0      	adds	r0, r0, r3
   dbddc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dbde0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbde4:	d507      	bpl.n	dbdf6 <__adddf3+0xe6>
   dbde6:	f04f 0e00 	mov.w	lr, #0
   dbdea:	f1dc 0c00 	rsbs	ip, ip, #0
   dbdee:	eb7e 0000 	sbcs.w	r0, lr, r0
   dbdf2:	eb6e 0101 	sbc.w	r1, lr, r1
   dbdf6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dbdfa:	d31b      	bcc.n	dbe34 <__adddf3+0x124>
   dbdfc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dbe00:	d30c      	bcc.n	dbe1c <__adddf3+0x10c>
   dbe02:	0849      	lsrs	r1, r1, #1
   dbe04:	ea5f 0030 	movs.w	r0, r0, rrx
   dbe08:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dbe0c:	f104 0401 	add.w	r4, r4, #1
   dbe10:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dbe14:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dbe18:	f080 809a 	bcs.w	dbf50 <__adddf3+0x240>
   dbe1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dbe20:	bf08      	it	eq
   dbe22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dbe26:	f150 0000 	adcs.w	r0, r0, #0
   dbe2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbe2e:	ea41 0105 	orr.w	r1, r1, r5
   dbe32:	bd30      	pop	{r4, r5, pc}
   dbe34:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dbe38:	4140      	adcs	r0, r0
   dbe3a:	eb41 0101 	adc.w	r1, r1, r1
   dbe3e:	3c01      	subs	r4, #1
   dbe40:	bf28      	it	cs
   dbe42:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dbe46:	d2e9      	bcs.n	dbe1c <__adddf3+0x10c>
   dbe48:	f091 0f00 	teq	r1, #0
   dbe4c:	bf04      	itt	eq
   dbe4e:	4601      	moveq	r1, r0
   dbe50:	2000      	moveq	r0, #0
   dbe52:	fab1 f381 	clz	r3, r1
   dbe56:	bf08      	it	eq
   dbe58:	3320      	addeq	r3, #32
   dbe5a:	f1a3 030b 	sub.w	r3, r3, #11
   dbe5e:	f1b3 0220 	subs.w	r2, r3, #32
   dbe62:	da0c      	bge.n	dbe7e <__adddf3+0x16e>
   dbe64:	320c      	adds	r2, #12
   dbe66:	dd08      	ble.n	dbe7a <__adddf3+0x16a>
   dbe68:	f102 0c14 	add.w	ip, r2, #20
   dbe6c:	f1c2 020c 	rsb	r2, r2, #12
   dbe70:	fa01 f00c 	lsl.w	r0, r1, ip
   dbe74:	fa21 f102 	lsr.w	r1, r1, r2
   dbe78:	e00c      	b.n	dbe94 <__adddf3+0x184>
   dbe7a:	f102 0214 	add.w	r2, r2, #20
   dbe7e:	bfd8      	it	le
   dbe80:	f1c2 0c20 	rsble	ip, r2, #32
   dbe84:	fa01 f102 	lsl.w	r1, r1, r2
   dbe88:	fa20 fc0c 	lsr.w	ip, r0, ip
   dbe8c:	bfdc      	itt	le
   dbe8e:	ea41 010c 	orrle.w	r1, r1, ip
   dbe92:	4090      	lslle	r0, r2
   dbe94:	1ae4      	subs	r4, r4, r3
   dbe96:	bfa2      	ittt	ge
   dbe98:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dbe9c:	4329      	orrge	r1, r5
   dbe9e:	bd30      	popge	{r4, r5, pc}
   dbea0:	ea6f 0404 	mvn.w	r4, r4
   dbea4:	3c1f      	subs	r4, #31
   dbea6:	da1c      	bge.n	dbee2 <__adddf3+0x1d2>
   dbea8:	340c      	adds	r4, #12
   dbeaa:	dc0e      	bgt.n	dbeca <__adddf3+0x1ba>
   dbeac:	f104 0414 	add.w	r4, r4, #20
   dbeb0:	f1c4 0220 	rsb	r2, r4, #32
   dbeb4:	fa20 f004 	lsr.w	r0, r0, r4
   dbeb8:	fa01 f302 	lsl.w	r3, r1, r2
   dbebc:	ea40 0003 	orr.w	r0, r0, r3
   dbec0:	fa21 f304 	lsr.w	r3, r1, r4
   dbec4:	ea45 0103 	orr.w	r1, r5, r3
   dbec8:	bd30      	pop	{r4, r5, pc}
   dbeca:	f1c4 040c 	rsb	r4, r4, #12
   dbece:	f1c4 0220 	rsb	r2, r4, #32
   dbed2:	fa20 f002 	lsr.w	r0, r0, r2
   dbed6:	fa01 f304 	lsl.w	r3, r1, r4
   dbeda:	ea40 0003 	orr.w	r0, r0, r3
   dbede:	4629      	mov	r1, r5
   dbee0:	bd30      	pop	{r4, r5, pc}
   dbee2:	fa21 f004 	lsr.w	r0, r1, r4
   dbee6:	4629      	mov	r1, r5
   dbee8:	bd30      	pop	{r4, r5, pc}
   dbeea:	f094 0f00 	teq	r4, #0
   dbeee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dbef2:	bf06      	itte	eq
   dbef4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dbef8:	3401      	addeq	r4, #1
   dbefa:	3d01      	subne	r5, #1
   dbefc:	e74e      	b.n	dbd9c <__adddf3+0x8c>
   dbefe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbf02:	bf18      	it	ne
   dbf04:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dbf08:	d029      	beq.n	dbf5e <__adddf3+0x24e>
   dbf0a:	ea94 0f05 	teq	r4, r5
   dbf0e:	bf08      	it	eq
   dbf10:	ea90 0f02 	teqeq	r0, r2
   dbf14:	d005      	beq.n	dbf22 <__adddf3+0x212>
   dbf16:	ea54 0c00 	orrs.w	ip, r4, r0
   dbf1a:	bf04      	itt	eq
   dbf1c:	4619      	moveq	r1, r3
   dbf1e:	4610      	moveq	r0, r2
   dbf20:	bd30      	pop	{r4, r5, pc}
   dbf22:	ea91 0f03 	teq	r1, r3
   dbf26:	bf1e      	ittt	ne
   dbf28:	2100      	movne	r1, #0
   dbf2a:	2000      	movne	r0, #0
   dbf2c:	bd30      	popne	{r4, r5, pc}
   dbf2e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dbf32:	d105      	bne.n	dbf40 <__adddf3+0x230>
   dbf34:	0040      	lsls	r0, r0, #1
   dbf36:	4149      	adcs	r1, r1
   dbf38:	bf28      	it	cs
   dbf3a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dbf3e:	bd30      	pop	{r4, r5, pc}
   dbf40:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dbf44:	bf3c      	itt	cc
   dbf46:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dbf4a:	bd30      	popcc	{r4, r5, pc}
   dbf4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbf50:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dbf54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbf58:	f04f 0000 	mov.w	r0, #0
   dbf5c:	bd30      	pop	{r4, r5, pc}
   dbf5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbf62:	bf1a      	itte	ne
   dbf64:	4619      	movne	r1, r3
   dbf66:	4610      	movne	r0, r2
   dbf68:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dbf6c:	bf1c      	itt	ne
   dbf6e:	460b      	movne	r3, r1
   dbf70:	4602      	movne	r2, r0
   dbf72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbf76:	bf06      	itte	eq
   dbf78:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dbf7c:	ea91 0f03 	teqeq	r1, r3
   dbf80:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dbf84:	bd30      	pop	{r4, r5, pc}
   dbf86:	bf00      	nop

000dbf88 <__aeabi_ui2d>:
   dbf88:	f090 0f00 	teq	r0, #0
   dbf8c:	bf04      	itt	eq
   dbf8e:	2100      	moveq	r1, #0
   dbf90:	4770      	bxeq	lr
   dbf92:	b530      	push	{r4, r5, lr}
   dbf94:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbf98:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbf9c:	f04f 0500 	mov.w	r5, #0
   dbfa0:	f04f 0100 	mov.w	r1, #0
   dbfa4:	e750      	b.n	dbe48 <__adddf3+0x138>
   dbfa6:	bf00      	nop

000dbfa8 <__aeabi_i2d>:
   dbfa8:	f090 0f00 	teq	r0, #0
   dbfac:	bf04      	itt	eq
   dbfae:	2100      	moveq	r1, #0
   dbfb0:	4770      	bxeq	lr
   dbfb2:	b530      	push	{r4, r5, lr}
   dbfb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbfb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbfbc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dbfc0:	bf48      	it	mi
   dbfc2:	4240      	negmi	r0, r0
   dbfc4:	f04f 0100 	mov.w	r1, #0
   dbfc8:	e73e      	b.n	dbe48 <__adddf3+0x138>
   dbfca:	bf00      	nop

000dbfcc <__aeabi_f2d>:
   dbfcc:	0042      	lsls	r2, r0, #1
   dbfce:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dbfd2:	ea4f 0131 	mov.w	r1, r1, rrx
   dbfd6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dbfda:	bf1f      	itttt	ne
   dbfdc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dbfe0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dbfe4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dbfe8:	4770      	bxne	lr
   dbfea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dbfee:	bf08      	it	eq
   dbff0:	4770      	bxeq	lr
   dbff2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dbff6:	bf04      	itt	eq
   dbff8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dbffc:	4770      	bxeq	lr
   dbffe:	b530      	push	{r4, r5, lr}
   dc000:	f44f 7460 	mov.w	r4, #896	; 0x380
   dc004:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc008:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc00c:	e71c      	b.n	dbe48 <__adddf3+0x138>
   dc00e:	bf00      	nop

000dc010 <__aeabi_ul2d>:
   dc010:	ea50 0201 	orrs.w	r2, r0, r1
   dc014:	bf08      	it	eq
   dc016:	4770      	bxeq	lr
   dc018:	b530      	push	{r4, r5, lr}
   dc01a:	f04f 0500 	mov.w	r5, #0
   dc01e:	e00a      	b.n	dc036 <__aeabi_l2d+0x16>

000dc020 <__aeabi_l2d>:
   dc020:	ea50 0201 	orrs.w	r2, r0, r1
   dc024:	bf08      	it	eq
   dc026:	4770      	bxeq	lr
   dc028:	b530      	push	{r4, r5, lr}
   dc02a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dc02e:	d502      	bpl.n	dc036 <__aeabi_l2d+0x16>
   dc030:	4240      	negs	r0, r0
   dc032:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc036:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc03a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc03e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dc042:	f43f aed8 	beq.w	dbdf6 <__adddf3+0xe6>
   dc046:	f04f 0203 	mov.w	r2, #3
   dc04a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc04e:	bf18      	it	ne
   dc050:	3203      	addne	r2, #3
   dc052:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc056:	bf18      	it	ne
   dc058:	3203      	addne	r2, #3
   dc05a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dc05e:	f1c2 0320 	rsb	r3, r2, #32
   dc062:	fa00 fc03 	lsl.w	ip, r0, r3
   dc066:	fa20 f002 	lsr.w	r0, r0, r2
   dc06a:	fa01 fe03 	lsl.w	lr, r1, r3
   dc06e:	ea40 000e 	orr.w	r0, r0, lr
   dc072:	fa21 f102 	lsr.w	r1, r1, r2
   dc076:	4414      	add	r4, r2
   dc078:	e6bd      	b.n	dbdf6 <__adddf3+0xe6>
   dc07a:	bf00      	nop

000dc07c <__aeabi_dmul>:
   dc07c:	b570      	push	{r4, r5, r6, lr}
   dc07e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc082:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc086:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc08a:	bf1d      	ittte	ne
   dc08c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc090:	ea94 0f0c 	teqne	r4, ip
   dc094:	ea95 0f0c 	teqne	r5, ip
   dc098:	f000 f8de 	bleq	dc258 <__aeabi_dmul+0x1dc>
   dc09c:	442c      	add	r4, r5
   dc09e:	ea81 0603 	eor.w	r6, r1, r3
   dc0a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dc0a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dc0aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dc0ae:	bf18      	it	ne
   dc0b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dc0b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc0b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc0bc:	d038      	beq.n	dc130 <__aeabi_dmul+0xb4>
   dc0be:	fba0 ce02 	umull	ip, lr, r0, r2
   dc0c2:	f04f 0500 	mov.w	r5, #0
   dc0c6:	fbe1 e502 	umlal	lr, r5, r1, r2
   dc0ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dc0ce:	fbe0 e503 	umlal	lr, r5, r0, r3
   dc0d2:	f04f 0600 	mov.w	r6, #0
   dc0d6:	fbe1 5603 	umlal	r5, r6, r1, r3
   dc0da:	f09c 0f00 	teq	ip, #0
   dc0de:	bf18      	it	ne
   dc0e0:	f04e 0e01 	orrne.w	lr, lr, #1
   dc0e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dc0e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dc0ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dc0f0:	d204      	bcs.n	dc0fc <__aeabi_dmul+0x80>
   dc0f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dc0f6:	416d      	adcs	r5, r5
   dc0f8:	eb46 0606 	adc.w	r6, r6, r6
   dc0fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dc100:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dc104:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dc108:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dc10c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dc110:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc114:	bf88      	it	hi
   dc116:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc11a:	d81e      	bhi.n	dc15a <__aeabi_dmul+0xde>
   dc11c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dc120:	bf08      	it	eq
   dc122:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dc126:	f150 0000 	adcs.w	r0, r0, #0
   dc12a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc12e:	bd70      	pop	{r4, r5, r6, pc}
   dc130:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dc134:	ea46 0101 	orr.w	r1, r6, r1
   dc138:	ea40 0002 	orr.w	r0, r0, r2
   dc13c:	ea81 0103 	eor.w	r1, r1, r3
   dc140:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dc144:	bfc2      	ittt	gt
   dc146:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc14a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc14e:	bd70      	popgt	{r4, r5, r6, pc}
   dc150:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc154:	f04f 0e00 	mov.w	lr, #0
   dc158:	3c01      	subs	r4, #1
   dc15a:	f300 80ab 	bgt.w	dc2b4 <__aeabi_dmul+0x238>
   dc15e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dc162:	bfde      	ittt	le
   dc164:	2000      	movle	r0, #0
   dc166:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dc16a:	bd70      	pople	{r4, r5, r6, pc}
   dc16c:	f1c4 0400 	rsb	r4, r4, #0
   dc170:	3c20      	subs	r4, #32
   dc172:	da35      	bge.n	dc1e0 <__aeabi_dmul+0x164>
   dc174:	340c      	adds	r4, #12
   dc176:	dc1b      	bgt.n	dc1b0 <__aeabi_dmul+0x134>
   dc178:	f104 0414 	add.w	r4, r4, #20
   dc17c:	f1c4 0520 	rsb	r5, r4, #32
   dc180:	fa00 f305 	lsl.w	r3, r0, r5
   dc184:	fa20 f004 	lsr.w	r0, r0, r4
   dc188:	fa01 f205 	lsl.w	r2, r1, r5
   dc18c:	ea40 0002 	orr.w	r0, r0, r2
   dc190:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dc194:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc198:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc19c:	fa21 f604 	lsr.w	r6, r1, r4
   dc1a0:	eb42 0106 	adc.w	r1, r2, r6
   dc1a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc1a8:	bf08      	it	eq
   dc1aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc1ae:	bd70      	pop	{r4, r5, r6, pc}
   dc1b0:	f1c4 040c 	rsb	r4, r4, #12
   dc1b4:	f1c4 0520 	rsb	r5, r4, #32
   dc1b8:	fa00 f304 	lsl.w	r3, r0, r4
   dc1bc:	fa20 f005 	lsr.w	r0, r0, r5
   dc1c0:	fa01 f204 	lsl.w	r2, r1, r4
   dc1c4:	ea40 0002 	orr.w	r0, r0, r2
   dc1c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc1cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc1d0:	f141 0100 	adc.w	r1, r1, #0
   dc1d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc1d8:	bf08      	it	eq
   dc1da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc1de:	bd70      	pop	{r4, r5, r6, pc}
   dc1e0:	f1c4 0520 	rsb	r5, r4, #32
   dc1e4:	fa00 f205 	lsl.w	r2, r0, r5
   dc1e8:	ea4e 0e02 	orr.w	lr, lr, r2
   dc1ec:	fa20 f304 	lsr.w	r3, r0, r4
   dc1f0:	fa01 f205 	lsl.w	r2, r1, r5
   dc1f4:	ea43 0302 	orr.w	r3, r3, r2
   dc1f8:	fa21 f004 	lsr.w	r0, r1, r4
   dc1fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc200:	fa21 f204 	lsr.w	r2, r1, r4
   dc204:	ea20 0002 	bic.w	r0, r0, r2
   dc208:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dc20c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc210:	bf08      	it	eq
   dc212:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc216:	bd70      	pop	{r4, r5, r6, pc}
   dc218:	f094 0f00 	teq	r4, #0
   dc21c:	d10f      	bne.n	dc23e <__aeabi_dmul+0x1c2>
   dc21e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dc222:	0040      	lsls	r0, r0, #1
   dc224:	eb41 0101 	adc.w	r1, r1, r1
   dc228:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc22c:	bf08      	it	eq
   dc22e:	3c01      	subeq	r4, #1
   dc230:	d0f7      	beq.n	dc222 <__aeabi_dmul+0x1a6>
   dc232:	ea41 0106 	orr.w	r1, r1, r6
   dc236:	f095 0f00 	teq	r5, #0
   dc23a:	bf18      	it	ne
   dc23c:	4770      	bxne	lr
   dc23e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dc242:	0052      	lsls	r2, r2, #1
   dc244:	eb43 0303 	adc.w	r3, r3, r3
   dc248:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dc24c:	bf08      	it	eq
   dc24e:	3d01      	subeq	r5, #1
   dc250:	d0f7      	beq.n	dc242 <__aeabi_dmul+0x1c6>
   dc252:	ea43 0306 	orr.w	r3, r3, r6
   dc256:	4770      	bx	lr
   dc258:	ea94 0f0c 	teq	r4, ip
   dc25c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc260:	bf18      	it	ne
   dc262:	ea95 0f0c 	teqne	r5, ip
   dc266:	d00c      	beq.n	dc282 <__aeabi_dmul+0x206>
   dc268:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc26c:	bf18      	it	ne
   dc26e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc272:	d1d1      	bne.n	dc218 <__aeabi_dmul+0x19c>
   dc274:	ea81 0103 	eor.w	r1, r1, r3
   dc278:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc27c:	f04f 0000 	mov.w	r0, #0
   dc280:	bd70      	pop	{r4, r5, r6, pc}
   dc282:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc286:	bf06      	itte	eq
   dc288:	4610      	moveq	r0, r2
   dc28a:	4619      	moveq	r1, r3
   dc28c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc290:	d019      	beq.n	dc2c6 <__aeabi_dmul+0x24a>
   dc292:	ea94 0f0c 	teq	r4, ip
   dc296:	d102      	bne.n	dc29e <__aeabi_dmul+0x222>
   dc298:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dc29c:	d113      	bne.n	dc2c6 <__aeabi_dmul+0x24a>
   dc29e:	ea95 0f0c 	teq	r5, ip
   dc2a2:	d105      	bne.n	dc2b0 <__aeabi_dmul+0x234>
   dc2a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dc2a8:	bf1c      	itt	ne
   dc2aa:	4610      	movne	r0, r2
   dc2ac:	4619      	movne	r1, r3
   dc2ae:	d10a      	bne.n	dc2c6 <__aeabi_dmul+0x24a>
   dc2b0:	ea81 0103 	eor.w	r1, r1, r3
   dc2b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc2b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc2bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc2c0:	f04f 0000 	mov.w	r0, #0
   dc2c4:	bd70      	pop	{r4, r5, r6, pc}
   dc2c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc2ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dc2ce:	bd70      	pop	{r4, r5, r6, pc}

000dc2d0 <__aeabi_ddiv>:
   dc2d0:	b570      	push	{r4, r5, r6, lr}
   dc2d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc2d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc2da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc2de:	bf1d      	ittte	ne
   dc2e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc2e4:	ea94 0f0c 	teqne	r4, ip
   dc2e8:	ea95 0f0c 	teqne	r5, ip
   dc2ec:	f000 f8a7 	bleq	dc43e <__aeabi_ddiv+0x16e>
   dc2f0:	eba4 0405 	sub.w	r4, r4, r5
   dc2f4:	ea81 0e03 	eor.w	lr, r1, r3
   dc2f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc2fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc300:	f000 8088 	beq.w	dc414 <__aeabi_ddiv+0x144>
   dc304:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc308:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dc30c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dc310:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dc314:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dc318:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dc31c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dc320:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dc324:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dc328:	429d      	cmp	r5, r3
   dc32a:	bf08      	it	eq
   dc32c:	4296      	cmpeq	r6, r2
   dc32e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dc332:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dc336:	d202      	bcs.n	dc33e <__aeabi_ddiv+0x6e>
   dc338:	085b      	lsrs	r3, r3, #1
   dc33a:	ea4f 0232 	mov.w	r2, r2, rrx
   dc33e:	1ab6      	subs	r6, r6, r2
   dc340:	eb65 0503 	sbc.w	r5, r5, r3
   dc344:	085b      	lsrs	r3, r3, #1
   dc346:	ea4f 0232 	mov.w	r2, r2, rrx
   dc34a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dc34e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dc352:	ebb6 0e02 	subs.w	lr, r6, r2
   dc356:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc35a:	bf22      	ittt	cs
   dc35c:	1ab6      	subcs	r6, r6, r2
   dc35e:	4675      	movcs	r5, lr
   dc360:	ea40 000c 	orrcs.w	r0, r0, ip
   dc364:	085b      	lsrs	r3, r3, #1
   dc366:	ea4f 0232 	mov.w	r2, r2, rrx
   dc36a:	ebb6 0e02 	subs.w	lr, r6, r2
   dc36e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc372:	bf22      	ittt	cs
   dc374:	1ab6      	subcs	r6, r6, r2
   dc376:	4675      	movcs	r5, lr
   dc378:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dc37c:	085b      	lsrs	r3, r3, #1
   dc37e:	ea4f 0232 	mov.w	r2, r2, rrx
   dc382:	ebb6 0e02 	subs.w	lr, r6, r2
   dc386:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc38a:	bf22      	ittt	cs
   dc38c:	1ab6      	subcs	r6, r6, r2
   dc38e:	4675      	movcs	r5, lr
   dc390:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dc394:	085b      	lsrs	r3, r3, #1
   dc396:	ea4f 0232 	mov.w	r2, r2, rrx
   dc39a:	ebb6 0e02 	subs.w	lr, r6, r2
   dc39e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc3a2:	bf22      	ittt	cs
   dc3a4:	1ab6      	subcs	r6, r6, r2
   dc3a6:	4675      	movcs	r5, lr
   dc3a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dc3ac:	ea55 0e06 	orrs.w	lr, r5, r6
   dc3b0:	d018      	beq.n	dc3e4 <__aeabi_ddiv+0x114>
   dc3b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dc3b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dc3ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dc3be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dc3c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dc3c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dc3ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dc3ce:	d1c0      	bne.n	dc352 <__aeabi_ddiv+0x82>
   dc3d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc3d4:	d10b      	bne.n	dc3ee <__aeabi_ddiv+0x11e>
   dc3d6:	ea41 0100 	orr.w	r1, r1, r0
   dc3da:	f04f 0000 	mov.w	r0, #0
   dc3de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dc3e2:	e7b6      	b.n	dc352 <__aeabi_ddiv+0x82>
   dc3e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc3e8:	bf04      	itt	eq
   dc3ea:	4301      	orreq	r1, r0
   dc3ec:	2000      	moveq	r0, #0
   dc3ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc3f2:	bf88      	it	hi
   dc3f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc3f8:	f63f aeaf 	bhi.w	dc15a <__aeabi_dmul+0xde>
   dc3fc:	ebb5 0c03 	subs.w	ip, r5, r3
   dc400:	bf04      	itt	eq
   dc402:	ebb6 0c02 	subseq.w	ip, r6, r2
   dc406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc40a:	f150 0000 	adcs.w	r0, r0, #0
   dc40e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc412:	bd70      	pop	{r4, r5, r6, pc}
   dc414:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dc418:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dc41c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dc420:	bfc2      	ittt	gt
   dc422:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc426:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc42a:	bd70      	popgt	{r4, r5, r6, pc}
   dc42c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc430:	f04f 0e00 	mov.w	lr, #0
   dc434:	3c01      	subs	r4, #1
   dc436:	e690      	b.n	dc15a <__aeabi_dmul+0xde>
   dc438:	ea45 0e06 	orr.w	lr, r5, r6
   dc43c:	e68d      	b.n	dc15a <__aeabi_dmul+0xde>
   dc43e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc442:	ea94 0f0c 	teq	r4, ip
   dc446:	bf08      	it	eq
   dc448:	ea95 0f0c 	teqeq	r5, ip
   dc44c:	f43f af3b 	beq.w	dc2c6 <__aeabi_dmul+0x24a>
   dc450:	ea94 0f0c 	teq	r4, ip
   dc454:	d10a      	bne.n	dc46c <__aeabi_ddiv+0x19c>
   dc456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc45a:	f47f af34 	bne.w	dc2c6 <__aeabi_dmul+0x24a>
   dc45e:	ea95 0f0c 	teq	r5, ip
   dc462:	f47f af25 	bne.w	dc2b0 <__aeabi_dmul+0x234>
   dc466:	4610      	mov	r0, r2
   dc468:	4619      	mov	r1, r3
   dc46a:	e72c      	b.n	dc2c6 <__aeabi_dmul+0x24a>
   dc46c:	ea95 0f0c 	teq	r5, ip
   dc470:	d106      	bne.n	dc480 <__aeabi_ddiv+0x1b0>
   dc472:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc476:	f43f aefd 	beq.w	dc274 <__aeabi_dmul+0x1f8>
   dc47a:	4610      	mov	r0, r2
   dc47c:	4619      	mov	r1, r3
   dc47e:	e722      	b.n	dc2c6 <__aeabi_dmul+0x24a>
   dc480:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc484:	bf18      	it	ne
   dc486:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc48a:	f47f aec5 	bne.w	dc218 <__aeabi_dmul+0x19c>
   dc48e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dc492:	f47f af0d 	bne.w	dc2b0 <__aeabi_dmul+0x234>
   dc496:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dc49a:	f47f aeeb 	bne.w	dc274 <__aeabi_dmul+0x1f8>
   dc49e:	e712      	b.n	dc2c6 <__aeabi_dmul+0x24a>

000dc4a0 <__gedf2>:
   dc4a0:	f04f 3cff 	mov.w	ip, #4294967295
   dc4a4:	e006      	b.n	dc4b4 <__cmpdf2+0x4>
   dc4a6:	bf00      	nop

000dc4a8 <__ledf2>:
   dc4a8:	f04f 0c01 	mov.w	ip, #1
   dc4ac:	e002      	b.n	dc4b4 <__cmpdf2+0x4>
   dc4ae:	bf00      	nop

000dc4b0 <__cmpdf2>:
   dc4b0:	f04f 0c01 	mov.w	ip, #1
   dc4b4:	f84d cd04 	str.w	ip, [sp, #-4]!
   dc4b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc4bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc4c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc4c4:	bf18      	it	ne
   dc4c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dc4ca:	d01b      	beq.n	dc504 <__cmpdf2+0x54>
   dc4cc:	b001      	add	sp, #4
   dc4ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dc4d2:	bf0c      	ite	eq
   dc4d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dc4d8:	ea91 0f03 	teqne	r1, r3
   dc4dc:	bf02      	ittt	eq
   dc4de:	ea90 0f02 	teqeq	r0, r2
   dc4e2:	2000      	moveq	r0, #0
   dc4e4:	4770      	bxeq	lr
   dc4e6:	f110 0f00 	cmn.w	r0, #0
   dc4ea:	ea91 0f03 	teq	r1, r3
   dc4ee:	bf58      	it	pl
   dc4f0:	4299      	cmppl	r1, r3
   dc4f2:	bf08      	it	eq
   dc4f4:	4290      	cmpeq	r0, r2
   dc4f6:	bf2c      	ite	cs
   dc4f8:	17d8      	asrcs	r0, r3, #31
   dc4fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dc4fe:	f040 0001 	orr.w	r0, r0, #1
   dc502:	4770      	bx	lr
   dc504:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc508:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc50c:	d102      	bne.n	dc514 <__cmpdf2+0x64>
   dc50e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dc512:	d107      	bne.n	dc524 <__cmpdf2+0x74>
   dc514:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc518:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc51c:	d1d6      	bne.n	dc4cc <__cmpdf2+0x1c>
   dc51e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dc522:	d0d3      	beq.n	dc4cc <__cmpdf2+0x1c>
   dc524:	f85d 0b04 	ldr.w	r0, [sp], #4
   dc528:	4770      	bx	lr
   dc52a:	bf00      	nop

000dc52c <__aeabi_cdrcmple>:
   dc52c:	4684      	mov	ip, r0
   dc52e:	4610      	mov	r0, r2
   dc530:	4662      	mov	r2, ip
   dc532:	468c      	mov	ip, r1
   dc534:	4619      	mov	r1, r3
   dc536:	4663      	mov	r3, ip
   dc538:	e000      	b.n	dc53c <__aeabi_cdcmpeq>
   dc53a:	bf00      	nop

000dc53c <__aeabi_cdcmpeq>:
   dc53c:	b501      	push	{r0, lr}
   dc53e:	f7ff ffb7 	bl	dc4b0 <__cmpdf2>
   dc542:	2800      	cmp	r0, #0
   dc544:	bf48      	it	mi
   dc546:	f110 0f00 	cmnmi.w	r0, #0
   dc54a:	bd01      	pop	{r0, pc}

000dc54c <__aeabi_dcmpeq>:
   dc54c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc550:	f7ff fff4 	bl	dc53c <__aeabi_cdcmpeq>
   dc554:	bf0c      	ite	eq
   dc556:	2001      	moveq	r0, #1
   dc558:	2000      	movne	r0, #0
   dc55a:	f85d fb08 	ldr.w	pc, [sp], #8
   dc55e:	bf00      	nop

000dc560 <__aeabi_dcmplt>:
   dc560:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc564:	f7ff ffea 	bl	dc53c <__aeabi_cdcmpeq>
   dc568:	bf34      	ite	cc
   dc56a:	2001      	movcc	r0, #1
   dc56c:	2000      	movcs	r0, #0
   dc56e:	f85d fb08 	ldr.w	pc, [sp], #8
   dc572:	bf00      	nop

000dc574 <__aeabi_dcmple>:
   dc574:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc578:	f7ff ffe0 	bl	dc53c <__aeabi_cdcmpeq>
   dc57c:	bf94      	ite	ls
   dc57e:	2001      	movls	r0, #1
   dc580:	2000      	movhi	r0, #0
   dc582:	f85d fb08 	ldr.w	pc, [sp], #8
   dc586:	bf00      	nop

000dc588 <__aeabi_dcmpge>:
   dc588:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc58c:	f7ff ffce 	bl	dc52c <__aeabi_cdrcmple>
   dc590:	bf94      	ite	ls
   dc592:	2001      	movls	r0, #1
   dc594:	2000      	movhi	r0, #0
   dc596:	f85d fb08 	ldr.w	pc, [sp], #8
   dc59a:	bf00      	nop

000dc59c <__aeabi_dcmpgt>:
   dc59c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc5a0:	f7ff ffc4 	bl	dc52c <__aeabi_cdrcmple>
   dc5a4:	bf34      	ite	cc
   dc5a6:	2001      	movcc	r0, #1
   dc5a8:	2000      	movcs	r0, #0
   dc5aa:	f85d fb08 	ldr.w	pc, [sp], #8
   dc5ae:	bf00      	nop

000dc5b0 <__aeabi_dcmpun>:
   dc5b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc5b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc5b8:	d102      	bne.n	dc5c0 <__aeabi_dcmpun+0x10>
   dc5ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dc5be:	d10a      	bne.n	dc5d6 <__aeabi_dcmpun+0x26>
   dc5c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc5c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc5c8:	d102      	bne.n	dc5d0 <__aeabi_dcmpun+0x20>
   dc5ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dc5ce:	d102      	bne.n	dc5d6 <__aeabi_dcmpun+0x26>
   dc5d0:	f04f 0000 	mov.w	r0, #0
   dc5d4:	4770      	bx	lr
   dc5d6:	f04f 0001 	mov.w	r0, #1
   dc5da:	4770      	bx	lr

000dc5dc <__aeabi_d2iz>:
   dc5dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc5e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc5e4:	d215      	bcs.n	dc612 <__aeabi_d2iz+0x36>
   dc5e6:	d511      	bpl.n	dc60c <__aeabi_d2iz+0x30>
   dc5e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc5ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc5f0:	d912      	bls.n	dc618 <__aeabi_d2iz+0x3c>
   dc5f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc5f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc5fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc5fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc602:	fa23 f002 	lsr.w	r0, r3, r2
   dc606:	bf18      	it	ne
   dc608:	4240      	negne	r0, r0
   dc60a:	4770      	bx	lr
   dc60c:	f04f 0000 	mov.w	r0, #0
   dc610:	4770      	bx	lr
   dc612:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc616:	d105      	bne.n	dc624 <__aeabi_d2iz+0x48>
   dc618:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dc61c:	bf08      	it	eq
   dc61e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dc622:	4770      	bx	lr
   dc624:	f04f 0000 	mov.w	r0, #0
   dc628:	4770      	bx	lr
   dc62a:	bf00      	nop

000dc62c <__aeabi_d2uiz>:
   dc62c:	004a      	lsls	r2, r1, #1
   dc62e:	d211      	bcs.n	dc654 <__aeabi_d2uiz+0x28>
   dc630:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc634:	d211      	bcs.n	dc65a <__aeabi_d2uiz+0x2e>
   dc636:	d50d      	bpl.n	dc654 <__aeabi_d2uiz+0x28>
   dc638:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc63c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc640:	d40e      	bmi.n	dc660 <__aeabi_d2uiz+0x34>
   dc642:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc64a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc64e:	fa23 f002 	lsr.w	r0, r3, r2
   dc652:	4770      	bx	lr
   dc654:	f04f 0000 	mov.w	r0, #0
   dc658:	4770      	bx	lr
   dc65a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc65e:	d102      	bne.n	dc666 <__aeabi_d2uiz+0x3a>
   dc660:	f04f 30ff 	mov.w	r0, #4294967295
   dc664:	4770      	bx	lr
   dc666:	f04f 0000 	mov.w	r0, #0
   dc66a:	4770      	bx	lr

000dc66c <__aeabi_d2f>:
   dc66c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc670:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dc674:	bf24      	itt	cs
   dc676:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dc67a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dc67e:	d90d      	bls.n	dc69c <__aeabi_d2f+0x30>
   dc680:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dc684:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dc688:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dc68c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dc690:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dc694:	bf08      	it	eq
   dc696:	f020 0001 	biceq.w	r0, r0, #1
   dc69a:	4770      	bx	lr
   dc69c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dc6a0:	d121      	bne.n	dc6e6 <__aeabi_d2f+0x7a>
   dc6a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dc6a6:	bfbc      	itt	lt
   dc6a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dc6ac:	4770      	bxlt	lr
   dc6ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc6b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dc6b6:	f1c2 0218 	rsb	r2, r2, #24
   dc6ba:	f1c2 0c20 	rsb	ip, r2, #32
   dc6be:	fa10 f30c 	lsls.w	r3, r0, ip
   dc6c2:	fa20 f002 	lsr.w	r0, r0, r2
   dc6c6:	bf18      	it	ne
   dc6c8:	f040 0001 	orrne.w	r0, r0, #1
   dc6cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc6d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dc6d4:	fa03 fc0c 	lsl.w	ip, r3, ip
   dc6d8:	ea40 000c 	orr.w	r0, r0, ip
   dc6dc:	fa23 f302 	lsr.w	r3, r3, r2
   dc6e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dc6e4:	e7cc      	b.n	dc680 <__aeabi_d2f+0x14>
   dc6e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dc6ea:	d107      	bne.n	dc6fc <__aeabi_d2f+0x90>
   dc6ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dc6f0:	bf1e      	ittt	ne
   dc6f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dc6f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dc6fa:	4770      	bxne	lr
   dc6fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dc700:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dc704:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dc708:	4770      	bx	lr
   dc70a:	bf00      	nop

000dc70c <__aeabi_frsub>:
   dc70c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   dc710:	e002      	b.n	dc718 <__addsf3>
   dc712:	bf00      	nop

000dc714 <__aeabi_fsub>:
   dc714:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000dc718 <__addsf3>:
   dc718:	0042      	lsls	r2, r0, #1
   dc71a:	bf1f      	itttt	ne
   dc71c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   dc720:	ea92 0f03 	teqne	r2, r3
   dc724:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   dc728:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dc72c:	d06a      	beq.n	dc804 <__addsf3+0xec>
   dc72e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   dc732:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   dc736:	bfc1      	itttt	gt
   dc738:	18d2      	addgt	r2, r2, r3
   dc73a:	4041      	eorgt	r1, r0
   dc73c:	4048      	eorgt	r0, r1
   dc73e:	4041      	eorgt	r1, r0
   dc740:	bfb8      	it	lt
   dc742:	425b      	neglt	r3, r3
   dc744:	2b19      	cmp	r3, #25
   dc746:	bf88      	it	hi
   dc748:	4770      	bxhi	lr
   dc74a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   dc74e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dc752:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   dc756:	bf18      	it	ne
   dc758:	4240      	negne	r0, r0
   dc75a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc75e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   dc762:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   dc766:	bf18      	it	ne
   dc768:	4249      	negne	r1, r1
   dc76a:	ea92 0f03 	teq	r2, r3
   dc76e:	d03f      	beq.n	dc7f0 <__addsf3+0xd8>
   dc770:	f1a2 0201 	sub.w	r2, r2, #1
   dc774:	fa41 fc03 	asr.w	ip, r1, r3
   dc778:	eb10 000c 	adds.w	r0, r0, ip
   dc77c:	f1c3 0320 	rsb	r3, r3, #32
   dc780:	fa01 f103 	lsl.w	r1, r1, r3
   dc784:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   dc788:	d502      	bpl.n	dc790 <__addsf3+0x78>
   dc78a:	4249      	negs	r1, r1
   dc78c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   dc790:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   dc794:	d313      	bcc.n	dc7be <__addsf3+0xa6>
   dc796:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   dc79a:	d306      	bcc.n	dc7aa <__addsf3+0x92>
   dc79c:	0840      	lsrs	r0, r0, #1
   dc79e:	ea4f 0131 	mov.w	r1, r1, rrx
   dc7a2:	f102 0201 	add.w	r2, r2, #1
   dc7a6:	2afe      	cmp	r2, #254	; 0xfe
   dc7a8:	d251      	bcs.n	dc84e <__addsf3+0x136>
   dc7aa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   dc7ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   dc7b2:	bf08      	it	eq
   dc7b4:	f020 0001 	biceq.w	r0, r0, #1
   dc7b8:	ea40 0003 	orr.w	r0, r0, r3
   dc7bc:	4770      	bx	lr
   dc7be:	0049      	lsls	r1, r1, #1
   dc7c0:	eb40 0000 	adc.w	r0, r0, r0
   dc7c4:	3a01      	subs	r2, #1
   dc7c6:	bf28      	it	cs
   dc7c8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   dc7cc:	d2ed      	bcs.n	dc7aa <__addsf3+0x92>
   dc7ce:	fab0 fc80 	clz	ip, r0
   dc7d2:	f1ac 0c08 	sub.w	ip, ip, #8
   dc7d6:	ebb2 020c 	subs.w	r2, r2, ip
   dc7da:	fa00 f00c 	lsl.w	r0, r0, ip
   dc7de:	bfaa      	itet	ge
   dc7e0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   dc7e4:	4252      	neglt	r2, r2
   dc7e6:	4318      	orrge	r0, r3
   dc7e8:	bfbc      	itt	lt
   dc7ea:	40d0      	lsrlt	r0, r2
   dc7ec:	4318      	orrlt	r0, r3
   dc7ee:	4770      	bx	lr
   dc7f0:	f092 0f00 	teq	r2, #0
   dc7f4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   dc7f8:	bf06      	itte	eq
   dc7fa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   dc7fe:	3201      	addeq	r2, #1
   dc800:	3b01      	subne	r3, #1
   dc802:	e7b5      	b.n	dc770 <__addsf3+0x58>
   dc804:	ea4f 0341 	mov.w	r3, r1, lsl #1
   dc808:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   dc80c:	bf18      	it	ne
   dc80e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dc812:	d021      	beq.n	dc858 <__addsf3+0x140>
   dc814:	ea92 0f03 	teq	r2, r3
   dc818:	d004      	beq.n	dc824 <__addsf3+0x10c>
   dc81a:	f092 0f00 	teq	r2, #0
   dc81e:	bf08      	it	eq
   dc820:	4608      	moveq	r0, r1
   dc822:	4770      	bx	lr
   dc824:	ea90 0f01 	teq	r0, r1
   dc828:	bf1c      	itt	ne
   dc82a:	2000      	movne	r0, #0
   dc82c:	4770      	bxne	lr
   dc82e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   dc832:	d104      	bne.n	dc83e <__addsf3+0x126>
   dc834:	0040      	lsls	r0, r0, #1
   dc836:	bf28      	it	cs
   dc838:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   dc83c:	4770      	bx	lr
   dc83e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   dc842:	bf3c      	itt	cc
   dc844:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   dc848:	4770      	bxcc	lr
   dc84a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   dc84e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   dc852:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dc856:	4770      	bx	lr
   dc858:	ea7f 6222 	mvns.w	r2, r2, asr #24
   dc85c:	bf16      	itet	ne
   dc85e:	4608      	movne	r0, r1
   dc860:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   dc864:	4601      	movne	r1, r0
   dc866:	0242      	lsls	r2, r0, #9
   dc868:	bf06      	itte	eq
   dc86a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   dc86e:	ea90 0f01 	teqeq	r0, r1
   dc872:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   dc876:	4770      	bx	lr

000dc878 <__aeabi_ui2f>:
   dc878:	f04f 0300 	mov.w	r3, #0
   dc87c:	e004      	b.n	dc888 <__aeabi_i2f+0x8>
   dc87e:	bf00      	nop

000dc880 <__aeabi_i2f>:
   dc880:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   dc884:	bf48      	it	mi
   dc886:	4240      	negmi	r0, r0
   dc888:	ea5f 0c00 	movs.w	ip, r0
   dc88c:	bf08      	it	eq
   dc88e:	4770      	bxeq	lr
   dc890:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   dc894:	4601      	mov	r1, r0
   dc896:	f04f 0000 	mov.w	r0, #0
   dc89a:	e01c      	b.n	dc8d6 <__aeabi_l2f+0x2a>

000dc89c <__aeabi_ul2f>:
   dc89c:	ea50 0201 	orrs.w	r2, r0, r1
   dc8a0:	bf08      	it	eq
   dc8a2:	4770      	bxeq	lr
   dc8a4:	f04f 0300 	mov.w	r3, #0
   dc8a8:	e00a      	b.n	dc8c0 <__aeabi_l2f+0x14>
   dc8aa:	bf00      	nop

000dc8ac <__aeabi_l2f>:
   dc8ac:	ea50 0201 	orrs.w	r2, r0, r1
   dc8b0:	bf08      	it	eq
   dc8b2:	4770      	bxeq	lr
   dc8b4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   dc8b8:	d502      	bpl.n	dc8c0 <__aeabi_l2f+0x14>
   dc8ba:	4240      	negs	r0, r0
   dc8bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc8c0:	ea5f 0c01 	movs.w	ip, r1
   dc8c4:	bf02      	ittt	eq
   dc8c6:	4684      	moveq	ip, r0
   dc8c8:	4601      	moveq	r1, r0
   dc8ca:	2000      	moveq	r0, #0
   dc8cc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   dc8d0:	bf08      	it	eq
   dc8d2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   dc8d6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   dc8da:	fabc f28c 	clz	r2, ip
   dc8de:	3a08      	subs	r2, #8
   dc8e0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   dc8e4:	db10      	blt.n	dc908 <__aeabi_l2f+0x5c>
   dc8e6:	fa01 fc02 	lsl.w	ip, r1, r2
   dc8ea:	4463      	add	r3, ip
   dc8ec:	fa00 fc02 	lsl.w	ip, r0, r2
   dc8f0:	f1c2 0220 	rsb	r2, r2, #32
   dc8f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dc8f8:	fa20 f202 	lsr.w	r2, r0, r2
   dc8fc:	eb43 0002 	adc.w	r0, r3, r2
   dc900:	bf08      	it	eq
   dc902:	f020 0001 	biceq.w	r0, r0, #1
   dc906:	4770      	bx	lr
   dc908:	f102 0220 	add.w	r2, r2, #32
   dc90c:	fa01 fc02 	lsl.w	ip, r1, r2
   dc910:	f1c2 0220 	rsb	r2, r2, #32
   dc914:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   dc918:	fa21 f202 	lsr.w	r2, r1, r2
   dc91c:	eb43 0002 	adc.w	r0, r3, r2
   dc920:	bf08      	it	eq
   dc922:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   dc926:	4770      	bx	lr

000dc928 <__aeabi_ldivmod>:
   dc928:	b97b      	cbnz	r3, dc94a <__aeabi_ldivmod+0x22>
   dc92a:	b972      	cbnz	r2, dc94a <__aeabi_ldivmod+0x22>
   dc92c:	2900      	cmp	r1, #0
   dc92e:	bfbe      	ittt	lt
   dc930:	2000      	movlt	r0, #0
   dc932:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   dc936:	e006      	blt.n	dc946 <__aeabi_ldivmod+0x1e>
   dc938:	bf08      	it	eq
   dc93a:	2800      	cmpeq	r0, #0
   dc93c:	bf1c      	itt	ne
   dc93e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   dc942:	f04f 30ff 	movne.w	r0, #4294967295
   dc946:	f000 b9b9 	b.w	dccbc <__aeabi_idiv0>
   dc94a:	f1ad 0c08 	sub.w	ip, sp, #8
   dc94e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dc952:	2900      	cmp	r1, #0
   dc954:	db09      	blt.n	dc96a <__aeabi_ldivmod+0x42>
   dc956:	2b00      	cmp	r3, #0
   dc958:	db1a      	blt.n	dc990 <__aeabi_ldivmod+0x68>
   dc95a:	f000 f84d 	bl	dc9f8 <__udivmoddi4>
   dc95e:	f8dd e004 	ldr.w	lr, [sp, #4]
   dc962:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc966:	b004      	add	sp, #16
   dc968:	4770      	bx	lr
   dc96a:	4240      	negs	r0, r0
   dc96c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc970:	2b00      	cmp	r3, #0
   dc972:	db1b      	blt.n	dc9ac <__aeabi_ldivmod+0x84>
   dc974:	f000 f840 	bl	dc9f8 <__udivmoddi4>
   dc978:	f8dd e004 	ldr.w	lr, [sp, #4]
   dc97c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc980:	b004      	add	sp, #16
   dc982:	4240      	negs	r0, r0
   dc984:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc988:	4252      	negs	r2, r2
   dc98a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc98e:	4770      	bx	lr
   dc990:	4252      	negs	r2, r2
   dc992:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc996:	f000 f82f 	bl	dc9f8 <__udivmoddi4>
   dc99a:	f8dd e004 	ldr.w	lr, [sp, #4]
   dc99e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc9a2:	b004      	add	sp, #16
   dc9a4:	4240      	negs	r0, r0
   dc9a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc9aa:	4770      	bx	lr
   dc9ac:	4252      	negs	r2, r2
   dc9ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc9b2:	f000 f821 	bl	dc9f8 <__udivmoddi4>
   dc9b6:	f8dd e004 	ldr.w	lr, [sp, #4]
   dc9ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc9be:	b004      	add	sp, #16
   dc9c0:	4252      	negs	r2, r2
   dc9c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc9c6:	4770      	bx	lr

000dc9c8 <__aeabi_uldivmod>:
   dc9c8:	b953      	cbnz	r3, dc9e0 <__aeabi_uldivmod+0x18>
   dc9ca:	b94a      	cbnz	r2, dc9e0 <__aeabi_uldivmod+0x18>
   dc9cc:	2900      	cmp	r1, #0
   dc9ce:	bf08      	it	eq
   dc9d0:	2800      	cmpeq	r0, #0
   dc9d2:	bf1c      	itt	ne
   dc9d4:	f04f 31ff 	movne.w	r1, #4294967295
   dc9d8:	f04f 30ff 	movne.w	r0, #4294967295
   dc9dc:	f000 b96e 	b.w	dccbc <__aeabi_idiv0>
   dc9e0:	f1ad 0c08 	sub.w	ip, sp, #8
   dc9e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dc9e8:	f000 f806 	bl	dc9f8 <__udivmoddi4>
   dc9ec:	f8dd e004 	ldr.w	lr, [sp, #4]
   dc9f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc9f4:	b004      	add	sp, #16
   dc9f6:	4770      	bx	lr

000dc9f8 <__udivmoddi4>:
   dc9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc9fc:	9d08      	ldr	r5, [sp, #32]
   dc9fe:	4604      	mov	r4, r0
   dca00:	468c      	mov	ip, r1
   dca02:	2b00      	cmp	r3, #0
   dca04:	f040 8083 	bne.w	dcb0e <__udivmoddi4+0x116>
   dca08:	428a      	cmp	r2, r1
   dca0a:	4617      	mov	r7, r2
   dca0c:	d947      	bls.n	dca9e <__udivmoddi4+0xa6>
   dca0e:	fab2 f282 	clz	r2, r2
   dca12:	b142      	cbz	r2, dca26 <__udivmoddi4+0x2e>
   dca14:	f1c2 0020 	rsb	r0, r2, #32
   dca18:	fa24 f000 	lsr.w	r0, r4, r0
   dca1c:	4091      	lsls	r1, r2
   dca1e:	4097      	lsls	r7, r2
   dca20:	ea40 0c01 	orr.w	ip, r0, r1
   dca24:	4094      	lsls	r4, r2
   dca26:	ea4f 4817 	mov.w	r8, r7, lsr #16
   dca2a:	0c23      	lsrs	r3, r4, #16
   dca2c:	fbbc f6f8 	udiv	r6, ip, r8
   dca30:	fa1f fe87 	uxth.w	lr, r7
   dca34:	fb08 c116 	mls	r1, r8, r6, ip
   dca38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dca3c:	fb06 f10e 	mul.w	r1, r6, lr
   dca40:	4299      	cmp	r1, r3
   dca42:	d909      	bls.n	dca58 <__udivmoddi4+0x60>
   dca44:	18fb      	adds	r3, r7, r3
   dca46:	f106 30ff 	add.w	r0, r6, #4294967295
   dca4a:	f080 8119 	bcs.w	dcc80 <__udivmoddi4+0x288>
   dca4e:	4299      	cmp	r1, r3
   dca50:	f240 8116 	bls.w	dcc80 <__udivmoddi4+0x288>
   dca54:	3e02      	subs	r6, #2
   dca56:	443b      	add	r3, r7
   dca58:	1a5b      	subs	r3, r3, r1
   dca5a:	b2a4      	uxth	r4, r4
   dca5c:	fbb3 f0f8 	udiv	r0, r3, r8
   dca60:	fb08 3310 	mls	r3, r8, r0, r3
   dca64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   dca68:	fb00 fe0e 	mul.w	lr, r0, lr
   dca6c:	45a6      	cmp	lr, r4
   dca6e:	d909      	bls.n	dca84 <__udivmoddi4+0x8c>
   dca70:	193c      	adds	r4, r7, r4
   dca72:	f100 33ff 	add.w	r3, r0, #4294967295
   dca76:	f080 8105 	bcs.w	dcc84 <__udivmoddi4+0x28c>
   dca7a:	45a6      	cmp	lr, r4
   dca7c:	f240 8102 	bls.w	dcc84 <__udivmoddi4+0x28c>
   dca80:	3802      	subs	r0, #2
   dca82:	443c      	add	r4, r7
   dca84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   dca88:	eba4 040e 	sub.w	r4, r4, lr
   dca8c:	2600      	movs	r6, #0
   dca8e:	b11d      	cbz	r5, dca98 <__udivmoddi4+0xa0>
   dca90:	40d4      	lsrs	r4, r2
   dca92:	2300      	movs	r3, #0
   dca94:	e9c5 4300 	strd	r4, r3, [r5]
   dca98:	4631      	mov	r1, r6
   dca9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dca9e:	b902      	cbnz	r2, dcaa2 <__udivmoddi4+0xaa>
   dcaa0:	deff      	udf	#255	; 0xff
   dcaa2:	fab2 f282 	clz	r2, r2
   dcaa6:	2a00      	cmp	r2, #0
   dcaa8:	d150      	bne.n	dcb4c <__udivmoddi4+0x154>
   dcaaa:	1bcb      	subs	r3, r1, r7
   dcaac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dcab0:	fa1f f887 	uxth.w	r8, r7
   dcab4:	2601      	movs	r6, #1
   dcab6:	fbb3 fcfe 	udiv	ip, r3, lr
   dcaba:	0c21      	lsrs	r1, r4, #16
   dcabc:	fb0e 331c 	mls	r3, lr, ip, r3
   dcac0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dcac4:	fb08 f30c 	mul.w	r3, r8, ip
   dcac8:	428b      	cmp	r3, r1
   dcaca:	d907      	bls.n	dcadc <__udivmoddi4+0xe4>
   dcacc:	1879      	adds	r1, r7, r1
   dcace:	f10c 30ff 	add.w	r0, ip, #4294967295
   dcad2:	d202      	bcs.n	dcada <__udivmoddi4+0xe2>
   dcad4:	428b      	cmp	r3, r1
   dcad6:	f200 80e9 	bhi.w	dccac <__udivmoddi4+0x2b4>
   dcada:	4684      	mov	ip, r0
   dcadc:	1ac9      	subs	r1, r1, r3
   dcade:	b2a3      	uxth	r3, r4
   dcae0:	fbb1 f0fe 	udiv	r0, r1, lr
   dcae4:	fb0e 1110 	mls	r1, lr, r0, r1
   dcae8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dcaec:	fb08 f800 	mul.w	r8, r8, r0
   dcaf0:	45a0      	cmp	r8, r4
   dcaf2:	d907      	bls.n	dcb04 <__udivmoddi4+0x10c>
   dcaf4:	193c      	adds	r4, r7, r4
   dcaf6:	f100 33ff 	add.w	r3, r0, #4294967295
   dcafa:	d202      	bcs.n	dcb02 <__udivmoddi4+0x10a>
   dcafc:	45a0      	cmp	r8, r4
   dcafe:	f200 80d9 	bhi.w	dccb4 <__udivmoddi4+0x2bc>
   dcb02:	4618      	mov	r0, r3
   dcb04:	eba4 0408 	sub.w	r4, r4, r8
   dcb08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dcb0c:	e7bf      	b.n	dca8e <__udivmoddi4+0x96>
   dcb0e:	428b      	cmp	r3, r1
   dcb10:	d909      	bls.n	dcb26 <__udivmoddi4+0x12e>
   dcb12:	2d00      	cmp	r5, #0
   dcb14:	f000 80b1 	beq.w	dcc7a <__udivmoddi4+0x282>
   dcb18:	2600      	movs	r6, #0
   dcb1a:	e9c5 0100 	strd	r0, r1, [r5]
   dcb1e:	4630      	mov	r0, r6
   dcb20:	4631      	mov	r1, r6
   dcb22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dcb26:	fab3 f683 	clz	r6, r3
   dcb2a:	2e00      	cmp	r6, #0
   dcb2c:	d14a      	bne.n	dcbc4 <__udivmoddi4+0x1cc>
   dcb2e:	428b      	cmp	r3, r1
   dcb30:	d302      	bcc.n	dcb38 <__udivmoddi4+0x140>
   dcb32:	4282      	cmp	r2, r0
   dcb34:	f200 80b8 	bhi.w	dcca8 <__udivmoddi4+0x2b0>
   dcb38:	1a84      	subs	r4, r0, r2
   dcb3a:	eb61 0103 	sbc.w	r1, r1, r3
   dcb3e:	2001      	movs	r0, #1
   dcb40:	468c      	mov	ip, r1
   dcb42:	2d00      	cmp	r5, #0
   dcb44:	d0a8      	beq.n	dca98 <__udivmoddi4+0xa0>
   dcb46:	e9c5 4c00 	strd	r4, ip, [r5]
   dcb4a:	e7a5      	b.n	dca98 <__udivmoddi4+0xa0>
   dcb4c:	f1c2 0320 	rsb	r3, r2, #32
   dcb50:	fa20 f603 	lsr.w	r6, r0, r3
   dcb54:	4097      	lsls	r7, r2
   dcb56:	fa01 f002 	lsl.w	r0, r1, r2
   dcb5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dcb5e:	40d9      	lsrs	r1, r3
   dcb60:	4330      	orrs	r0, r6
   dcb62:	0c03      	lsrs	r3, r0, #16
   dcb64:	fbb1 f6fe 	udiv	r6, r1, lr
   dcb68:	fa1f f887 	uxth.w	r8, r7
   dcb6c:	fb0e 1116 	mls	r1, lr, r6, r1
   dcb70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dcb74:	fb06 f108 	mul.w	r1, r6, r8
   dcb78:	4299      	cmp	r1, r3
   dcb7a:	fa04 f402 	lsl.w	r4, r4, r2
   dcb7e:	d909      	bls.n	dcb94 <__udivmoddi4+0x19c>
   dcb80:	18fb      	adds	r3, r7, r3
   dcb82:	f106 3cff 	add.w	ip, r6, #4294967295
   dcb86:	f080 808d 	bcs.w	dcca4 <__udivmoddi4+0x2ac>
   dcb8a:	4299      	cmp	r1, r3
   dcb8c:	f240 808a 	bls.w	dcca4 <__udivmoddi4+0x2ac>
   dcb90:	3e02      	subs	r6, #2
   dcb92:	443b      	add	r3, r7
   dcb94:	1a5b      	subs	r3, r3, r1
   dcb96:	b281      	uxth	r1, r0
   dcb98:	fbb3 f0fe 	udiv	r0, r3, lr
   dcb9c:	fb0e 3310 	mls	r3, lr, r0, r3
   dcba0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dcba4:	fb00 f308 	mul.w	r3, r0, r8
   dcba8:	428b      	cmp	r3, r1
   dcbaa:	d907      	bls.n	dcbbc <__udivmoddi4+0x1c4>
   dcbac:	1879      	adds	r1, r7, r1
   dcbae:	f100 3cff 	add.w	ip, r0, #4294967295
   dcbb2:	d273      	bcs.n	dcc9c <__udivmoddi4+0x2a4>
   dcbb4:	428b      	cmp	r3, r1
   dcbb6:	d971      	bls.n	dcc9c <__udivmoddi4+0x2a4>
   dcbb8:	3802      	subs	r0, #2
   dcbba:	4439      	add	r1, r7
   dcbbc:	1acb      	subs	r3, r1, r3
   dcbbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dcbc2:	e778      	b.n	dcab6 <__udivmoddi4+0xbe>
   dcbc4:	f1c6 0c20 	rsb	ip, r6, #32
   dcbc8:	fa03 f406 	lsl.w	r4, r3, r6
   dcbcc:	fa22 f30c 	lsr.w	r3, r2, ip
   dcbd0:	431c      	orrs	r4, r3
   dcbd2:	fa20 f70c 	lsr.w	r7, r0, ip
   dcbd6:	fa01 f306 	lsl.w	r3, r1, r6
   dcbda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dcbde:	fa21 f10c 	lsr.w	r1, r1, ip
   dcbe2:	431f      	orrs	r7, r3
   dcbe4:	0c3b      	lsrs	r3, r7, #16
   dcbe6:	fbb1 f9fe 	udiv	r9, r1, lr
   dcbea:	fa1f f884 	uxth.w	r8, r4
   dcbee:	fb0e 1119 	mls	r1, lr, r9, r1
   dcbf2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dcbf6:	fb09 fa08 	mul.w	sl, r9, r8
   dcbfa:	458a      	cmp	sl, r1
   dcbfc:	fa02 f206 	lsl.w	r2, r2, r6
   dcc00:	fa00 f306 	lsl.w	r3, r0, r6
   dcc04:	d908      	bls.n	dcc18 <__udivmoddi4+0x220>
   dcc06:	1861      	adds	r1, r4, r1
   dcc08:	f109 30ff 	add.w	r0, r9, #4294967295
   dcc0c:	d248      	bcs.n	dcca0 <__udivmoddi4+0x2a8>
   dcc0e:	458a      	cmp	sl, r1
   dcc10:	d946      	bls.n	dcca0 <__udivmoddi4+0x2a8>
   dcc12:	f1a9 0902 	sub.w	r9, r9, #2
   dcc16:	4421      	add	r1, r4
   dcc18:	eba1 010a 	sub.w	r1, r1, sl
   dcc1c:	b2bf      	uxth	r7, r7
   dcc1e:	fbb1 f0fe 	udiv	r0, r1, lr
   dcc22:	fb0e 1110 	mls	r1, lr, r0, r1
   dcc26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dcc2a:	fb00 f808 	mul.w	r8, r0, r8
   dcc2e:	45b8      	cmp	r8, r7
   dcc30:	d907      	bls.n	dcc42 <__udivmoddi4+0x24a>
   dcc32:	19e7      	adds	r7, r4, r7
   dcc34:	f100 31ff 	add.w	r1, r0, #4294967295
   dcc38:	d22e      	bcs.n	dcc98 <__udivmoddi4+0x2a0>
   dcc3a:	45b8      	cmp	r8, r7
   dcc3c:	d92c      	bls.n	dcc98 <__udivmoddi4+0x2a0>
   dcc3e:	3802      	subs	r0, #2
   dcc40:	4427      	add	r7, r4
   dcc42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dcc46:	eba7 0708 	sub.w	r7, r7, r8
   dcc4a:	fba0 8902 	umull	r8, r9, r0, r2
   dcc4e:	454f      	cmp	r7, r9
   dcc50:	46c6      	mov	lr, r8
   dcc52:	4649      	mov	r1, r9
   dcc54:	d31a      	bcc.n	dcc8c <__udivmoddi4+0x294>
   dcc56:	d017      	beq.n	dcc88 <__udivmoddi4+0x290>
   dcc58:	b15d      	cbz	r5, dcc72 <__udivmoddi4+0x27a>
   dcc5a:	ebb3 020e 	subs.w	r2, r3, lr
   dcc5e:	eb67 0701 	sbc.w	r7, r7, r1
   dcc62:	fa07 fc0c 	lsl.w	ip, r7, ip
   dcc66:	40f2      	lsrs	r2, r6
   dcc68:	ea4c 0202 	orr.w	r2, ip, r2
   dcc6c:	40f7      	lsrs	r7, r6
   dcc6e:	e9c5 2700 	strd	r2, r7, [r5]
   dcc72:	2600      	movs	r6, #0
   dcc74:	4631      	mov	r1, r6
   dcc76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dcc7a:	462e      	mov	r6, r5
   dcc7c:	4628      	mov	r0, r5
   dcc7e:	e70b      	b.n	dca98 <__udivmoddi4+0xa0>
   dcc80:	4606      	mov	r6, r0
   dcc82:	e6e9      	b.n	dca58 <__udivmoddi4+0x60>
   dcc84:	4618      	mov	r0, r3
   dcc86:	e6fd      	b.n	dca84 <__udivmoddi4+0x8c>
   dcc88:	4543      	cmp	r3, r8
   dcc8a:	d2e5      	bcs.n	dcc58 <__udivmoddi4+0x260>
   dcc8c:	ebb8 0e02 	subs.w	lr, r8, r2
   dcc90:	eb69 0104 	sbc.w	r1, r9, r4
   dcc94:	3801      	subs	r0, #1
   dcc96:	e7df      	b.n	dcc58 <__udivmoddi4+0x260>
   dcc98:	4608      	mov	r0, r1
   dcc9a:	e7d2      	b.n	dcc42 <__udivmoddi4+0x24a>
   dcc9c:	4660      	mov	r0, ip
   dcc9e:	e78d      	b.n	dcbbc <__udivmoddi4+0x1c4>
   dcca0:	4681      	mov	r9, r0
   dcca2:	e7b9      	b.n	dcc18 <__udivmoddi4+0x220>
   dcca4:	4666      	mov	r6, ip
   dcca6:	e775      	b.n	dcb94 <__udivmoddi4+0x19c>
   dcca8:	4630      	mov	r0, r6
   dccaa:	e74a      	b.n	dcb42 <__udivmoddi4+0x14a>
   dccac:	f1ac 0c02 	sub.w	ip, ip, #2
   dccb0:	4439      	add	r1, r7
   dccb2:	e713      	b.n	dcadc <__udivmoddi4+0xe4>
   dccb4:	3802      	subs	r0, #2
   dccb6:	443c      	add	r4, r7
   dccb8:	e724      	b.n	dcb04 <__udivmoddi4+0x10c>
   dccba:	bf00      	nop

000dccbc <__aeabi_idiv0>:
   dccbc:	4770      	bx	lr
   dccbe:	bf00      	nop

000dccc0 <atexit>:
   dccc0:	2300      	movs	r3, #0
   dccc2:	4601      	mov	r1, r0
   dccc4:	461a      	mov	r2, r3
   dccc6:	4618      	mov	r0, r3
   dccc8:	f000 b85e 	b.w	dcd88 <__register_exitproc>

000dcccc <memcpy>:
   dcccc:	440a      	add	r2, r1
   dccce:	4291      	cmp	r1, r2
   dccd0:	f100 33ff 	add.w	r3, r0, #4294967295
   dccd4:	d100      	bne.n	dccd8 <memcpy+0xc>
   dccd6:	4770      	bx	lr
   dccd8:	b510      	push	{r4, lr}
   dccda:	f811 4b01 	ldrb.w	r4, [r1], #1
   dccde:	f803 4f01 	strb.w	r4, [r3, #1]!
   dcce2:	4291      	cmp	r1, r2
   dcce4:	d1f9      	bne.n	dccda <memcpy+0xe>
   dcce6:	bd10      	pop	{r4, pc}

000dcce8 <memset>:
   dcce8:	4402      	add	r2, r0
   dccea:	4603      	mov	r3, r0
   dccec:	4293      	cmp	r3, r2
   dccee:	d100      	bne.n	dccf2 <memset+0xa>
   dccf0:	4770      	bx	lr
   dccf2:	f803 1b01 	strb.w	r1, [r3], #1
   dccf6:	e7f9      	b.n	dccec <memset+0x4>

000dccf8 <srand>:
   dccf8:	b538      	push	{r3, r4, r5, lr}
   dccfa:	4b0d      	ldr	r3, [pc, #52]	; (dcd30 <srand+0x38>)
   dccfc:	681d      	ldr	r5, [r3, #0]
   dccfe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dcd00:	4604      	mov	r4, r0
   dcd02:	b97b      	cbnz	r3, dcd24 <srand+0x2c>
   dcd04:	2018      	movs	r0, #24
   dcd06:	f7fb fb0b 	bl	d8320 <malloc>
   dcd0a:	4a0a      	ldr	r2, [pc, #40]	; (dcd34 <srand+0x3c>)
   dcd0c:	4b0a      	ldr	r3, [pc, #40]	; (dcd38 <srand+0x40>)
   dcd0e:	63a8      	str	r0, [r5, #56]	; 0x38
   dcd10:	e9c0 2300 	strd	r2, r3, [r0]
   dcd14:	4b09      	ldr	r3, [pc, #36]	; (dcd3c <srand+0x44>)
   dcd16:	6083      	str	r3, [r0, #8]
   dcd18:	230b      	movs	r3, #11
   dcd1a:	8183      	strh	r3, [r0, #12]
   dcd1c:	2201      	movs	r2, #1
   dcd1e:	2300      	movs	r3, #0
   dcd20:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dcd24:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dcd26:	2200      	movs	r2, #0
   dcd28:	611c      	str	r4, [r3, #16]
   dcd2a:	615a      	str	r2, [r3, #20]
   dcd2c:	bd38      	pop	{r3, r4, r5, pc}
   dcd2e:	bf00      	nop
   dcd30:	2003e3a4 	.word	0x2003e3a4
   dcd34:	abcd330e 	.word	0xabcd330e
   dcd38:	e66d1234 	.word	0xe66d1234
   dcd3c:	0005deec 	.word	0x0005deec

000dcd40 <strcpy>:
   dcd40:	4603      	mov	r3, r0
   dcd42:	f811 2b01 	ldrb.w	r2, [r1], #1
   dcd46:	f803 2b01 	strb.w	r2, [r3], #1
   dcd4a:	2a00      	cmp	r2, #0
   dcd4c:	d1f9      	bne.n	dcd42 <strcpy+0x2>
   dcd4e:	4770      	bx	lr

000dcd50 <strlen>:
   dcd50:	4603      	mov	r3, r0
   dcd52:	f813 2b01 	ldrb.w	r2, [r3], #1
   dcd56:	2a00      	cmp	r2, #0
   dcd58:	d1fb      	bne.n	dcd52 <strlen+0x2>
   dcd5a:	1a18      	subs	r0, r3, r0
   dcd5c:	3801      	subs	r0, #1
   dcd5e:	4770      	bx	lr

000dcd60 <strncpy>:
   dcd60:	b510      	push	{r4, lr}
   dcd62:	3901      	subs	r1, #1
   dcd64:	4603      	mov	r3, r0
   dcd66:	b132      	cbz	r2, dcd76 <strncpy+0x16>
   dcd68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dcd6c:	f803 4b01 	strb.w	r4, [r3], #1
   dcd70:	3a01      	subs	r2, #1
   dcd72:	2c00      	cmp	r4, #0
   dcd74:	d1f7      	bne.n	dcd66 <strncpy+0x6>
   dcd76:	441a      	add	r2, r3
   dcd78:	2100      	movs	r1, #0
   dcd7a:	4293      	cmp	r3, r2
   dcd7c:	d100      	bne.n	dcd80 <strncpy+0x20>
   dcd7e:	bd10      	pop	{r4, pc}
   dcd80:	f803 1b01 	strb.w	r1, [r3], #1
   dcd84:	e7f9      	b.n	dcd7a <strncpy+0x1a>
	...

000dcd88 <__register_exitproc>:
   dcd88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dcd8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dce48 <__register_exitproc+0xc0>
   dcd90:	4606      	mov	r6, r0
   dcd92:	f8d8 0000 	ldr.w	r0, [r8]
   dcd96:	461f      	mov	r7, r3
   dcd98:	460d      	mov	r5, r1
   dcd9a:	4691      	mov	r9, r2
   dcd9c:	f000 f856 	bl	dce4c <__retarget_lock_acquire_recursive>
   dcda0:	4b25      	ldr	r3, [pc, #148]	; (dce38 <__register_exitproc+0xb0>)
   dcda2:	681c      	ldr	r4, [r3, #0]
   dcda4:	b934      	cbnz	r4, dcdb4 <__register_exitproc+0x2c>
   dcda6:	4c25      	ldr	r4, [pc, #148]	; (dce3c <__register_exitproc+0xb4>)
   dcda8:	601c      	str	r4, [r3, #0]
   dcdaa:	4b25      	ldr	r3, [pc, #148]	; (dce40 <__register_exitproc+0xb8>)
   dcdac:	b113      	cbz	r3, dcdb4 <__register_exitproc+0x2c>
   dcdae:	681b      	ldr	r3, [r3, #0]
   dcdb0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dcdb4:	6863      	ldr	r3, [r4, #4]
   dcdb6:	2b1f      	cmp	r3, #31
   dcdb8:	dd07      	ble.n	dcdca <__register_exitproc+0x42>
   dcdba:	f8d8 0000 	ldr.w	r0, [r8]
   dcdbe:	f000 f847 	bl	dce50 <__retarget_lock_release_recursive>
   dcdc2:	f04f 30ff 	mov.w	r0, #4294967295
   dcdc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dcdca:	b34e      	cbz	r6, dce20 <__register_exitproc+0x98>
   dcdcc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dcdd0:	b988      	cbnz	r0, dcdf6 <__register_exitproc+0x6e>
   dcdd2:	4b1c      	ldr	r3, [pc, #112]	; (dce44 <__register_exitproc+0xbc>)
   dcdd4:	b923      	cbnz	r3, dcde0 <__register_exitproc+0x58>
   dcdd6:	f8d8 0000 	ldr.w	r0, [r8]
   dcdda:	f000 f838 	bl	dce4e <__retarget_lock_release>
   dcdde:	e7f0      	b.n	dcdc2 <__register_exitproc+0x3a>
   dcde0:	f44f 7084 	mov.w	r0, #264	; 0x108
   dcde4:	f7fb fa9c 	bl	d8320 <malloc>
   dcde8:	2800      	cmp	r0, #0
   dcdea:	d0f4      	beq.n	dcdd6 <__register_exitproc+0x4e>
   dcdec:	2300      	movs	r3, #0
   dcdee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dcdf2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dcdf6:	6863      	ldr	r3, [r4, #4]
   dcdf8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dcdfc:	2201      	movs	r2, #1
   dcdfe:	409a      	lsls	r2, r3
   dce00:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dce04:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dce08:	4313      	orrs	r3, r2
   dce0a:	2e02      	cmp	r6, #2
   dce0c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dce10:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dce14:	bf02      	ittt	eq
   dce16:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dce1a:	431a      	orreq	r2, r3
   dce1c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dce20:	6863      	ldr	r3, [r4, #4]
   dce22:	f8d8 0000 	ldr.w	r0, [r8]
   dce26:	1c5a      	adds	r2, r3, #1
   dce28:	3302      	adds	r3, #2
   dce2a:	6062      	str	r2, [r4, #4]
   dce2c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dce30:	f000 f80e 	bl	dce50 <__retarget_lock_release_recursive>
   dce34:	2000      	movs	r0, #0
   dce36:	e7c6      	b.n	dcdc6 <__register_exitproc+0x3e>
   dce38:	2003e7e4 	.word	0x2003e7e4
   dce3c:	2003e758 	.word	0x2003e758
   dce40:	00000000 	.word	0x00000000
   dce44:	000d8321 	.word	0x000d8321
   dce48:	2003e408 	.word	0x2003e408

000dce4c <__retarget_lock_acquire_recursive>:
   dce4c:	4770      	bx	lr

000dce4e <__retarget_lock_release>:
   dce4e:	4770      	bx	lr

000dce50 <__retarget_lock_release_recursive>:
   dce50:	4770      	bx	lr

000dce52 <link_code_end>:
	...

000dce54 <dynalib_user>:
   dce54:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dce64:	0000 0000 0a0a 6554 706d 7265 7461 7275     ......Temperatur
   dce74:	2065 203d 2000 0046 7250 7365 7573 6572     e = . F.Pressure
   dce84:	3d20 0020 6d20 486d 0067 7041 7270 786f      = . mmHg.Approx
   dce94:	202e 6c41 6974 7574 6564 3d20 0020 6d20     . Altitude = . m
   dcea4:	4800 6d75 6469 7469 2079 203d 2000 0025     .Humidity = . %.
   dceb4:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dcec4:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dced4:	2d2d 2d2d 5300 6e65 6f73 3a72 2020 2020     ----.Sensor:    
   dcee4:	2020 0020 7244 7669 7265 5620 7265 203a        .Driver Ver: 
   dcef4:	2020 5500 696e 7571 2065 4449 203a 2020       .Unique ID:   
   dcf04:	0020 614d 2078 6156 756c 3a65 2020 2020      .Max Value:    
   dcf14:	2000 7878 0078 694d 206e 6156 756c 3a65     . xxx.Min Value:
   dcf24:	2020 2020 5200 7365 6c6f 7475 6f69 3a6e         .Resolution:
   dcf34:	2020 0020 430a 6c61 6269 6172 6974 6e6f        ..Calibration
   dcf44:	6f20 6666 6573 7374 0a20 4100 6363 6c65      offsets ..Accel
   dcf54:	7265 6d6f 7465 7265 203a 0a00 7947 6f72     erometer: ..Gyro
   dcf64:	203a 0a00 614d 3a67 0020 410a 6363 6c65     : ..Mag: ..Accel
   dcf74:	5220 6461 7569 3a73 0020 4d0a 6761 5220      Radius: ..Mag R
   dcf84:	6461 7569 3a73 0020 6554 7473 6e69 2067     adius: .Testing 
   dcf94:	6973 657a 0021 6146 6c69 6465 7420 206f     size!.Failed to 
   dcfa4:	7277 7469 2065 6461 7264 7365 2073 7830     write address 0x
   dcfb4:	4600 6961 656c 2064 6f74 7220 2d65 7277     .Failed to re-wr
   dcfc4:	7469 2065 6461 7264 7365 2073 7830 4600     ite address 0x.F
   dcfd4:	756f 646e 6d20 7861 6120 6464 6572 7373     ound max address
   dcfe4:	5400 6968 2073 4545 5250 4d4f 6320 6e61     .This EEPROM can
   dcff4:	7320 6f74 6572 0020 6220 7479 7365 4e00      store . bytes.N
   dd004:	4e00 0045 4553 5300 5300 0057 574e 4200     .NE.SE.S.SW.NW.B
   dd014:	7375 5620 6c6f 6174 6567 203a 2020 2000     us Voltage:   . 
   dd024:	0056 6853 6e75 2074 6f56 746c 6761 3a65     V.Shunt Voltage:
   dd034:	0020 6d20 0056 6f4c 6461 5620 6c6f 6174      . mV.Load Volta
   dd044:	6567 203a 0020 7543 7272 6e65 3a74 2020     ge:  .Current:  
   dd054:	2020 2020 0020 6d20 0041 6f50 6577 3a72          . mA.Power:
   dd064:	2020 2020 2020 2020 0020 6d20 0057 3a58              . mW.X:
   dd074:	0020 5909 203a 0900 3a5a 0020 0a0a 6300      ..Y: ..Z: ....c
   dd084:	6d6f 6170 7373 6820 6165 6964 676e 203a     ompass heading: 
   dd094:	0020 7953 7473 6d65 5320 6174 7574 3a73      .System Status:
   dd0a4:	3020 0078 6553 666c 5420 7365 3a74 2020      0x.Self Test:  
   dd0b4:	2020 3020 0078 7953 7473 6d65 4520 7272        0x.System Err
   dd0c4:	726f 203a 3020 0078 0009 2021 5300 7379     or:  0x...! .Sys
   dd0d4:	003a 4720 003a 4120 003a 4d20 003a 6554     :. G:. A:. M:.Te
   dd0e4:	706d 202e 203d 5000 6572 7373 202e 203d     mp. = .Press. = 
   dd0f4:	7300 7568 746e 7620 202e 203d 4200 7375     .shunt v. = .Bus
   dd104:	7620 6c6f 6174 6567 3d20 0020 7563 7272      voltage = .curr
   dd114:	6e65 2074 203d 7000 776f 7265 3d20 0020     ent = .power = .
   dd124:	7665 6e65 2074 6f63 2e6d 3d20 0020 6420     event com. = . d
   dd134:	6200 6f6e 6320 6d6f 202e 203d 7600 6e61     .bno com. = .van
   dd144:	2065 6964 2e72 3d20 0020 6568 6461 6e69     e dir. = .headin
   dd154:	2067 203d 5700 6e69 5364 6570 6465 3d20     g = .WindSpeed =
   dd164:	0020 6d20 6870 4300 4800 6c65 6f6c 0021      . mph.C.Hello!.
   dd174:	6146 6c69 6465 7420 206f 6966 646e 4920     Failed to find I
   dd184:	414e 3132 2039 6863 7069 7400 6d69 2065     NA219 chip.time 
   dd194:	6162 6573 7620 6c61 6575 3d20 5600 6e61     base value =.Van
   dd1a4:	2065 6156 756c 0965 6944 6572 7463 6f69     e Value.Directio
   dd1b4:	096e 6548 6461 6e69 0067 6144 6976 2073     n.Heading.Davis 
   dd1c4:	6957 646e 5320 6570 6465 5420 7365 0074     Wind Speed Test.
   dd1d4:	6f52 6174 6974 6e6f 0973 504d 0048 4d42     Rotations.MPH.BM
   dd1e4:	3245 3038 7420 7365 0074 3231 7838 3436     E280 test.128x64
   dd1f4:	4f20 454c 2044 6546 7461 6568 5772 6e69      OLED FeatherWin
   dd204:	2067 6574 7473 4f00 454c 2044 6562 7567     g test.OLED begu
   dd214:	006e 7542 7474 6e6f 7420 7365 0074 6942     n.Button test.Bi
   dd224:	6467 6461 7964 6441 6964 2065 6577 7461     gdaddyAddie weat
   dd234:	6568 2072 7473 7461 6f69 216e 000a 6f63     her station!..co
   dd244:	6e6e 6365 6574 2164 000a 6f43 6c75 2064     nnected!..Could 
   dd254:	6f6e 2074 6966 646e 6120 7620 6c61 6469     not find a valid
   dd264:	4220 454d 3832 2030 6573 736e 726f 202c      BME280 sensor, 
   dd274:	6863 6365 206b 6977 6972 676e 202c 6461     check wiring, ad
   dd284:	7264 7365 2c73 7320 6e65 6f73 2072 4449     dress, sensor ID
   dd294:	0021 6553 736e 726f 4449 7720 7361 203a     !.SensorID was: 
   dd2a4:	7830 2000 2020 2020 2020 4920 2044 666f     0x.        ID of
   dd2b4:	3020 4678 2046 7270 626f 6261 796c 6d20      0xFF probably m
   dd2c4:	6165 736e 6120 6220 6461 6120 6464 6572     eans a bad addre
   dd2d4:	7373 202c 2061 4d42 2050 3831 2030 726f     ss, a BMP 180 or
   dd2e4:	4220 504d 3020 3538 000a 2020 4920 2044      BMP 085..   ID 
   dd2f4:	666f 3020 3578 2d36 7830 3835 7220 7065     of 0x56-0x58 rep
   dd304:	6572 6573 746e 2073 2061 4d42 2050 3832     resents a BMP 28
   dd314:	2c30 000a 2020 2020 2020 2020 4449 6f20     0,..        ID o
   dd324:	2066 7830 3036 7220 7065 6572 6573 746e     f 0x60 represent
   dd334:	2073 2061 4d42 2045 3832 2e30 000a 2020     s a BME 280...  
   dd344:	2020 2020 2020 4449 6f20 2066 7830 3136           ID of 0x61
   dd354:	7220 7065 6572 6573 746e 2073 2061 4d42      represents a BM
   dd364:	2045 3836 2e30 000a 6f46 6e75 2064 3249     E 680...Found I2
   dd374:	2043 4545 5250 4d4f 4600 756f 646e 4920     C EEPROM.Found I
   dd384:	4332 4620 4152 004d 3249 2043 4545 5250     2C FRAM.I2C EEPR
   dd394:	4d4f 6e20 746f 6920 6564 746e 6669 6569     OM not identifie
   dd3a4:	2064 2e2e 202e 6863 6365 206b 6f79 7275     d ... check your
   dd3b4:	6320 6e6f 656e 7463 6f69 736e 0d3f 000a      connections?...
   dd3c4:	6f4f 706f 2c73 6e20 206f 4e42 304f 3535     Ooops, no BNO055
   dd3d4:	6420 7465 6365 6574 2064 2e2e 202e 6843      detected ... Ch
   dd3e4:	6365 206b 6f79 7275 7720 7269 6e69 2067     eck your wiring 
   dd3f4:	726f 4920 4332 4120 4444 2152 0a00 6f4e     or I2C ADDR!..No
   dd404:	4320 6c61 6269 6172 6974 6e6f 4420 7461      Calibration Dat
   dd414:	2061 6f66 2072 6874 7369 7320 6e65 6f73     a for this senso
   dd424:	2072 7865 7369 7374 6920 206e 4545 5250     r exists in EEPR
   dd434:	4d4f 0a00 6f46 6e75 2064 6143 696c 7262     OM..Found Calibr
   dd444:	7461 6f69 206e 6f66 2072 6874 7369 7320     ation for this s
   dd454:	6e65 6f73 2072 6e69 4520 5045 4f52 2e4d     ensor in EEPROM.
   dd464:	0a00 520a 7365 6f74 6972 676e 4320 6c61     ...Restoring Cal
   dd474:	6269 6172 6974 6e6f 6420 7461 2061 6f74     ibration data to
   dd484:	7420 6568 4220 4f4e 3530 2e35 2e2e 0a00      the BNO055.....
   dd494:	430a 6c61 6269 6172 6974 6e6f 6420 7461     .Calibration dat
   dd4a4:	2061 6f6c 6461 6465 6920 746e 206f 4e42     a loaded into BN
   dd4b4:	304f 3535 4d00 766f 2065 6573 736e 726f     O055.Move sensor
   dd4c4:	7320 696c 6867 6c74 2079 6f74 6320 6c61      slightly to cal
   dd4d4:	6269 6172 6574 6d20 6761 656e 6f74 656d     ibrate magnetome
   dd4e4:	6574 7372 4d00 766f 2065 6573 736e 726f     ters.Move sensor
   dd4f4:	7320 696c 6867 6c74 0079 6c50 6165 6573      slightly.Please
   dd504:	4320 6c61 6269 6172 6574 5320 6e65 6f73      Calibrate Senso
   dd514:	3a72 0020 460a 6c75 796c 6320 6c61 6269     r: ..Fully calib
   dd524:	6172 6574 2164 4300 6c61 6269 6172 6974     rated!.Calibrati
   dd534:	6e6f 5220 7365 6c75 7374 203a 0a00 530a     on Results: ...S
   dd544:	6f74 6972 676e 6320 6c61 6269 6172 6974     toring calibrati
   dd554:	6e6f 6420 7461 2061 6f74 4520 5045 4f52     on data to EEPRO
   dd564:	2e4d 2e2e 4400 7461 2061 7473 726f 6465     M....Data stored
   dd574:	7420 206f 4545 5250 4d4f 002e 2d0a 2d2d      to EEPROM...---
   dd584:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dd594:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 0a2d 6400     -------------..d
   dd5a4:	6665 7561 746c 0020 534d 0042 534c 0042     efault .MSB.LSB.
   dd5b4:	533c 4950 6553 7474 6e69 7367 6420 6665     <SPISettings def
   dd5c4:	7561 746c 003e 533c 4950 6553 7474 6e69     ault>.<SPISettin
   dd5d4:	7367 2520 2573 2075 7325 4d20 444f 2545     gs %s%u %s MODE%
   dd5e4:	3e75 0000                                   u>..

000dd5e8 <_ZTVN8particle11SPISettingsE>:
	...
   dd5f0:	5781 000d 5755 000d 5757 000d               .W..UW..WW..

000dd5fc <_ZTV15Adafruit_BNO055>:
	...
   dd604:	66c9 000d 670d 000d 66c7 000d 6ca9 000d     .f...g...f...l..
   dd614:	66cd 000d                                   .f..

000dd618 <_ZTV17Adafruit_GrayOLED>:
	...
   dd628:	771d 000d 86e1 000d 6cfb 000d 7125 000d     .w.......l..%q..
   dd638:	7127 000d 7159 000d 7135 000d 7147 000d     'q..Yq..5q..Gq..
   dd648:	7069 000d 7125 000d 7351 000d 6ef7 000d     ip..%q..Qs...n..
   dd658:	7171 000d 71af 000d 71e9 000d 722f 000d     qq...q...q../r..
   dd668:	72cd 000d 724b 000d 40a5 000d               .r..Kr...@..

000dd674 <_ZL4font>:
   dd674:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   dd684:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   dd694:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   dd6a4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   dd6b4:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   dd6c4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   dd6d4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   dd6e4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   dd6f4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   dd704:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   dd714:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   dd724:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   dd734:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   dd744:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   dd754:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   dd764:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   dd774:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   dd784:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   dd794:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   dd7a4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   dd7b4:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   dd7c4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   dd7d4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   dd7e4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   dd7f4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   dd804:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   dd814:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   dd824:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   dd834:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   dd844:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   dd854:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   dd864:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   dd874:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   dd884:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   dd894:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   dd8a4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   dd8b4:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   dd8c4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   dd8d4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   dd8e4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   dd8f4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dd904:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   dd914:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dd924:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   dd934:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   dd944:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dd954:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   dd964:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   dd974:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   dd984:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dd994:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dd9a4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dd9b4:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dd9c4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dd9d4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dd9e4:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   dd9f4:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   dda04:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   dda14:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   dda24:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   dda34:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   dda44:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   dda54:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   dda64:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   dda74:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   dda84:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   dda94:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   ddaa4:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   ddab4:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   ddac4:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   ddad4:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   ddae4:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   ddaf4:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   ddb04:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   ddb14:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   ddb24:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   ddb34:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   ddb44:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   ddb54:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   ddb64:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000ddb74 <_ZTV12Adafruit_GFX>:
	...
   ddb84:	771d 000d 86e1 000d 40a5 000d 7125 000d     .w.......@..%q..
   ddb94:	7127 000d 7159 000d 7135 000d 7147 000d     'q..Yq..5q..Gq..
   ddba4:	7069 000d 7125 000d 7351 000d 72cb 000d     ip..%q..Qs...r..
   ddbb4:	7171 000d 71af 000d 71e9 000d 722f 000d     qq...q...q../r..
   ddbc4:	72cd 000d 724b 000d                         .r..Kr..

000ddbcc <_ZTV15Adafruit_SH110X>:
	...
   ddbd4:	40a5 000d 40a5 000d 771d 000d 86e1 000d     .@...@...w......
   ddbe4:	6cfb 000d 7125 000d 7127 000d 7159 000d     .l..%q..'q..Yq..
   ddbf4:	7135 000d 7147 000d 7069 000d 7125 000d     5q..Gq..ip..%q..
   ddc04:	7351 000d 6ef7 000d 7171 000d 71af 000d     Qs...n..qq...q..
   ddc14:	71e9 000d 722f 000d 72cd 000d 724b 000d     .q../r...r..Kr..
   ddc24:	782b 000d                                   +x..

000ddc28 <_ZL12splash2_data>:
   ddc28:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   ddc38:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   ddc48:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   ddc64:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   ddc74:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   ddc84:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   ddc94:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   ddca4:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   ddcb4:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   ddcc4:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   ddcd4:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   ddce4:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   ddcf4:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   ddd04:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   ddd14:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   ddd24:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   ddd34:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   ddd44:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   ddd54:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   ddd64:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   ddd74:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   ddd84:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   ddd94:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   ddda4:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   dddbc:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   dddcc:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   ddddc:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   dddec:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   dddfc:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000dde08 <_ZTV15Adafruit_SH1107>:
	...
   dde10:	79c9 000d 79dd 000d 771d 000d 86e1 000d     .y...y...w......
   dde20:	6cfb 000d 7125 000d 7127 000d 7159 000d     .l..%q..'q..Yq..
   dde30:	7135 000d 7147 000d 7069 000d 7125 000d     5q..Gq..ip..%q..
   dde40:	7351 000d 6ef7 000d 7171 000d 71af 000d     Qs...n..qq...q..
   dde50:	71e9 000d 722f 000d 72cd 000d 724b 000d     .q../r...r..Kr..
   dde60:	782b 000d                                   +x..

000dde64 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   dde64:	00d3 7fa8                                   ....

000dde68 <_ZZN15Adafruit_SH11075beginEhbE4init>:
   dde68:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
   dde78:	35db 3fa8 a6a4 0000                         .5.?....

000dde80 <_ZTVN5spark13EthernetClassE>:
	...
   dde88:	83df 000d 83d5 000d 83cb 000d 83c1 000d     ................
   dde98:	83b5 000d 83a9 000d 9133 000d 913b 000d     ........3...;...
   ddea8:	839d 000d 8395 000d 838b 000d 8381 000d     ................
   ddeb8:	916b 000d                                   k...

000ddebc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ddebc:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   ddecc:	766f 0066 7061 0070 5925 252d 2d6d 6425     ovf.app.%Y-%m-%d
   ddedc:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   ddeec:	6d69 0065                                   ime.

000ddef0 <_ZTV9IPAddress>:
	...
   ddef8:	8c29 000d 8c19 000d 8c1b 000d               )...........

000ddf04 <_ZTV9USBSerial>:
	...
   ddf0c:	8d01 000d 8d69 000d 8d3f 000d 86e1 000d     ....i...?.......
   ddf1c:	8d31 000d 8d03 000d 8d13 000d 8d63 000d     1...........c...
   ddf2c:	8d23 000d 8cfb 000d                         #.......

000ddf34 <_ZTVN5spark13CellularClassE>:
	...
   ddf3c:	8ec7 000d 8ebd 000d 8eb3 000d 8e69 000d     ............i...
   ddf4c:	8ea7 000d 8e9b 000d 9133 000d 913b 000d     ........3...;...
   ddf5c:	8e8f 000d 8e87 000d 8e7d 000d 8e73 000d     ........}...s...
   ddf6c:	916b 000d                                   k...

000ddf70 <_ZTV11USARTSerial>:
	...
   ddf78:	8f01 000d 8f6f 000d 8f47 000d 86e1 000d     ....o...G.......
   ddf88:	8f17 000d 8f33 000d 8f25 000d 8f41 000d     ....3...%...A...
   ddf98:	8f03 000d 8f09 000d                         ........

000ddfa0 <_ZTV7TwoWire>:
	...
   ddfa8:	8ff5 000d 903f 000d 9017 000d 8ff7 000d     ....?...........
   ddfb8:	901f 000d 9027 000d 902f 000d 9037 000d     ....'.../...7...

000ddfc8 <_ZTVN5spark12NetworkClassE>:
	...
   ddfd0:	90f3 000d 90fd 000d 9107 000d 9111 000d     ................
   ddfe0:	911b 000d 9127 000d 9133 000d 913b 000d     ....'...3...;...
   ddff0:	9143 000d 914f 000d 9157 000d 9161 000d     C...O...W...a...
   de000:	916b 000d                                   k...

000de004 <_ZSt7nothrow>:
   de004:	0000 0000 6f70 0077 0000 0000               ....pow.....

000de010 <CSWTCH.8>:
   de010:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   de020:	21d2 7f33 d97c c002                         .!3.|...

000de028 <CSWTCH.9>:
   de028:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   de038:	2d18 5444 21fb c009 0000 0000               .-DT.!......

000de044 <CSWTCH.8>:
   de044:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000de050 <CSWTCH.9>:
   de050:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000de05c <npio2_hw>:
   de05c:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   de06c:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   de07c:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   de08c:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   de09c:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   de0ac:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   de0bc:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   de0cc:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000de0dc <two_over_pi>:
   de0dc:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   de0ec:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   de0fc:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   de10c:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   de11c:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   de12c:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   de13c:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   de14c:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   de15c:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   de16c:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   de17c:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   de18c:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   de19c:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   de1ac:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   de1bc:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   de1cc:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   de1dc:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   de1ec:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   de1fc:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   de20c:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   de21c:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   de22c:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   de23c:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   de24c:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   de25c:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   de26c:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   de27c:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   de28c:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   de29c:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   de2ac:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   de2bc:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   de2cc:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   de2dc:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   de2ec:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   de2fc:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   de30c:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   de31c:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   de32c:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   de33c:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   de34c:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   de35c:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   de36c:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   de37c:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   de38c:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   de39c:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   de3ac:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   de3bc:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   de3cc:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   de3dc:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   de3ec:	008c 0000 006b 0000                         ....k...

000de3f4 <PIo2>:
   de3f4:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   de404:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   de414:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000de420 <init_jk>:
   de420:	0004 0000 0007 0000 0009 0000 0000 0000     ................

000de430 <atanhi>:
   de430:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   de440:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000de450 <atanlo>:
   de450:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   de460:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000de470 <TWO52>:
   de470:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000de480 <atanhi>:
   de480:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000de490 <atanlo>:
   de490:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3

000de4a0 <link_const_variable_data_end>:
   de4a0:	000d4cc9 	.word	0x000d4cc9
   de4a4:	000d83e9 	.word	0x000d83e9
   de4a8:	000d8581 	.word	0x000d8581
   de4ac:	000d86d1 	.word	0x000d86d1
   de4b0:	000d8a1d 	.word	0x000d8a1d
   de4b4:	000d8aa1 	.word	0x000d8aa1
   de4b8:	000d8ad5 	.word	0x000d8ad5
   de4bc:	000d8ed1 	.word	0x000d8ed1
   de4c0:	000d923d 	.word	0x000d923d

000de4c4 <link_constructors_end>:
	...
