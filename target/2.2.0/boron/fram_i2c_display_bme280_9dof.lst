
z:/Personal/Electronics/particle/fram_i2c_display_bme280_9dof/target/2.2.0/boron/fram_i2c_display_bme280_9dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b020  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000df040  000df040  0000f040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000df048  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e3cc  000df04c  0001e3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003b0  2003e440  2003e440  0002e440  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000df0c0  000df0c0  0001f0c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000df0e8  000df0e8  0001f0e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0023929c  00000000  00000000  0001f0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000220e2  00000000  00000000  00258388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003ac04  00000000  00000000  0027a46a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000030b0  00000000  00000000  002b506e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000088d0  00000000  00000000  002b811e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000482d1  00000000  00000000  002c09ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00058ab4  00000000  00000000  00308cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00114d44  00000000  00000000  00361773  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000094cc  00000000  00000000  004764b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f009 fbd1 	bl	dd7d8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f009 fbd9 	bl	dd7f4 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e3cc 	.word	0x2003e3cc
   d404c:	000df04c 	.word	0x000df04c
   d4050:	2003e440 	.word	0x2003e440
   d4054:	2003e440 	.word	0x2003e440
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f005 f85b 	bl	d911c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000df018 	.word	0x000df018
   d4080:	000df03c 	.word	0x000df03c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 bab4 	b.w	d55f0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 f947 	bl	d531c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 bffb 	b.w	d908c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 bb13 	b.w	d86c0 <malloc>

000d409a <_Znaj>:
   d409a:	f004 bb11 	b.w	d86c0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 bb17 	b.w	d86d0 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f004 fa34 	bl	d8518 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d8219 	.word	0x000d8219

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z12isr_rotationv>:
else
Serial.println("N");
} 

// This is the function that the interrupt calls to increment the rotation count
void isr_rotation () {
   d40c8:	b510      	push	{r4, lr}
//a debounce time of 22 ms is equivalent to wind of 100 mph.
if ((millis() - ContactBounceTime) > 22 ) { // debounce the switch contact.
   d40ca:	4c07      	ldr	r4, [pc, #28]	; (d40e8 <_Z12isr_rotationv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40cc:	f004 f8ac 	bl	d8228 <HAL_Timer_Get_Milli_Seconds>
   d40d0:	6823      	ldr	r3, [r4, #0]
   d40d2:	1ac0      	subs	r0, r0, r3
   d40d4:	2816      	cmp	r0, #22
   d40d6:	d906      	bls.n	d40e6 <_Z12isr_rotationv+0x1e>
Rotations++;
   d40d8:	4a04      	ldr	r2, [pc, #16]	; (d40ec <_Z12isr_rotationv+0x24>)
   d40da:	6813      	ldr	r3, [r2, #0]
   d40dc:	3301      	adds	r3, #1
   d40de:	6013      	str	r3, [r2, #0]
   d40e0:	f004 f8a2 	bl	d8228 <HAL_Timer_Get_Milli_Seconds>
ContactBounceTime = millis();
   d40e4:	6020      	str	r0, [r4, #0]
}

}
   d40e6:	bd10      	pop	{r4, pc}
   d40e8:	2003e440 	.word	0x2003e440
   d40ec:	2003e444 	.word	0x2003e444

000d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d40f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d40f4:	2a00      	cmp	r2, #0
size_t Print::print(T n, int base)
   d40f6:	461d      	mov	r5, r3
        if (n < 0 && base == 10) {
   d40f8:	f175 0300 	sbcs.w	r3, r5, #0
size_t Print::print(T n, int base)
   d40fc:	9f08      	ldr	r7, [sp, #32]
   d40fe:	4680      	mov	r8, r0
   d4100:	4614      	mov	r4, r2
        if (n < 0 && base == 10) {
   d4102:	da11      	bge.n	d4128 <_ZN5Print5printIxLi0EEEjT_i.part.0+0x38>
   d4104:	2f0a      	cmp	r7, #10
   d4106:	d10f      	bne.n	d4128 <_ZN5Print5printIxLi0EEEjT_i.part.0+0x38>
            t = print('-');
   d4108:	212d      	movs	r1, #45	; 0x2d
   d410a:	f004 fd8d 	bl	d8c28 <_ZN5Print5printEc>
            val = -n;
   d410e:	4262      	negs	r2, r4
            t = print('-');
   d4110:	4606      	mov	r6, r0
            val = -n;
   d4112:	eb65 0345 	sbc.w	r3, r5, r5, lsl #1
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4116:	b2ff      	uxtb	r7, r7
   d4118:	9700      	str	r7, [sp, #0]
   d411a:	4640      	mov	r0, r8
   d411c:	f004 fdc1 	bl	d8ca2 <_ZN5Print11printNumberEyh>
    }
}
   d4120:	4430      	add	r0, r6
   d4122:	b002      	add	sp, #8
   d4124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
   d4128:	4622      	mov	r2, r4
   d412a:	462b      	mov	r3, r5
        size_t t = 0;
   d412c:	2600      	movs	r6, #0
   d412e:	e7f2      	b.n	d4116 <_ZN5Print5printIxLi0EEEjT_i.part.0+0x26>

000d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>:
size_t Print::print(T n, int base)
   d4130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n < 0 && base == 10) {
   d4132:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d4134:	4607      	mov	r7, r0
   d4136:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d4138:	da0c      	bge.n	d4154 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x24>
   d413a:	2a0a      	cmp	r2, #10
   d413c:	d10a      	bne.n	d4154 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d413e:	212d      	movs	r1, #45	; 0x2d
   d4140:	f004 fd72 	bl	d8c28 <_ZN5Print5printEc>
            val = -n;
   d4144:	4261      	negs	r1, r4
            t = print('-');
   d4146:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
   d4148:	b2f2      	uxtb	r2, r6
   d414a:	4638      	mov	r0, r7
   d414c:	f004 fd8b 	bl	d8c66 <_ZN5Print11printNumberEmh>
}
   d4150:	4428      	add	r0, r5
   d4152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d4154:	4621      	mov	r1, r4
        size_t t = 0;
   d4156:	2500      	movs	r5, #0
   d4158:	e7f6      	b.n	d4148 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x18>

000d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>:
size_t Print::print(T n, int base)
   d415a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n < 0 && base == 10) {
   d415c:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d415e:	4607      	mov	r7, r0
   d4160:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d4162:	da0c      	bge.n	d417e <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
   d4164:	2a0a      	cmp	r2, #10
   d4166:	d10a      	bne.n	d417e <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d4168:	212d      	movs	r1, #45	; 0x2d
   d416a:	f004 fd5d 	bl	d8c28 <_ZN5Print5printEc>
            val = -n;
   d416e:	4261      	negs	r1, r4
            t = print('-');
   d4170:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
   d4172:	b2f2      	uxtb	r2, r6
   d4174:	4638      	mov	r0, r7
   d4176:	f004 fd76 	bl	d8c66 <_ZN5Print11printNumberEmh>
}
   d417a:	4428      	add	r0, r5
   d417c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d417e:	4621      	mov	r1, r4
        size_t t = 0;
   d4180:	2500      	movs	r5, #0
   d4182:	e7f6      	b.n	d4172 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x18>

000d4184 <_Z11printValuesv>:
void printValues() {
   d4184:	b538      	push	{r3, r4, r5, lr}
    Serial.print("\n\nTemperature = ");
   d4186:	f005 fb6d 	bl	d9864 <_Z16_fetch_usbserialv>
   d418a:	4936      	ldr	r1, [pc, #216]	; (d4264 <_Z11printValuesv+0xe0>)
    Serial.print(bme.readTemperature()*1.8F + 32.);
   d418c:	4c36      	ldr	r4, [pc, #216]	; (d4268 <_Z11printValuesv+0xe4>)
    Serial.print("\n\nTemperature = ");
   d418e:	f004 fd47 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature()*1.8F + 32.);
   d4192:	f005 fb67 	bl	d9864 <_Z16_fetch_usbserialv>
   d4196:	4605      	mov	r5, r0
   d4198:	4620      	mov	r0, r4
   d419a:	f001 fda7 	bl	d5cec <_ZN15Adafruit_BME28015readTemperatureEv>
   d419e:	eddf 7a33 	vldr	s15, [pc, #204]	; d426c <_Z11printValuesv+0xe8>
   d41a2:	ee60 7a27 	vmul.f32	s15, s0, s15
   d41a6:	ee17 0a90 	vmov	r0, s15
   d41aa:	f008 fc77 	bl	dca9c <__aeabi_f2d>
   d41ae:	4b30      	ldr	r3, [pc, #192]	; (d4270 <_Z11printValuesv+0xec>)
   d41b0:	2200      	movs	r2, #0
   d41b2:	f008 fb15 	bl	dc7e0 <__adddf3>
   d41b6:	ec41 0b10 	vmov	d0, r0, r1
   d41ba:	2102      	movs	r1, #2
   d41bc:	4628      	mov	r0, r5
   d41be:	f004 fe78 	bl	d8eb2 <_ZN5Print5printEdi>
    Serial.println(" F");
   d41c2:	f005 fb4f 	bl	d9864 <_Z16_fetch_usbserialv>
   d41c6:	492b      	ldr	r1, [pc, #172]	; (d4274 <_Z11printValuesv+0xf0>)
   d41c8:	f004 fd41 	bl	d8c4e <_ZN5Print7printlnEPKc>
    Serial.print("Pressure = ");
   d41cc:	f005 fb4a 	bl	d9864 <_Z16_fetch_usbserialv>
   d41d0:	4929      	ldr	r1, [pc, #164]	; (d4278 <_Z11printValuesv+0xf4>)
   d41d2:	f004 fd25 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(bme.readPressure() / 101325.0F * 760.0F);
   d41d6:	f005 fb45 	bl	d9864 <_Z16_fetch_usbserialv>
   d41da:	4605      	mov	r5, r0
   d41dc:	4620      	mov	r0, r4
   d41de:	f001 fdb3 	bl	d5d48 <_ZN15Adafruit_BME28012readPressureEv>
   d41e2:	eddf 7a26 	vldr	s15, [pc, #152]	; d427c <_Z11printValuesv+0xf8>
   d41e6:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d41ea:	2102      	movs	r1, #2
   d41ec:	4628      	mov	r0, r5
   d41ee:	ed9f 0a24 	vldr	s0, [pc, #144]	; d4280 <_Z11printValuesv+0xfc>
   d41f2:	ee27 0a00 	vmul.f32	s0, s14, s0
   d41f6:	f004 fe4d 	bl	d8e94 <_ZN5Print5printEfi>
    Serial.println(" mmHg");
   d41fa:	f005 fb33 	bl	d9864 <_Z16_fetch_usbserialv>
   d41fe:	4921      	ldr	r1, [pc, #132]	; (d4284 <_Z11printValuesv+0x100>)
   d4200:	f004 fd25 	bl	d8c4e <_ZN5Print7printlnEPKc>
    Serial.print("Approx. Altitude = ");
   d4204:	f005 fb2e 	bl	d9864 <_Z16_fetch_usbserialv>
   d4208:	491f      	ldr	r1, [pc, #124]	; (d4288 <_Z11printValuesv+0x104>)
   d420a:	f004 fd09 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d420e:	f005 fb29 	bl	d9864 <_Z16_fetch_usbserialv>
   d4212:	ed9f 0a1e 	vldr	s0, [pc, #120]	; d428c <_Z11printValuesv+0x108>
   d4216:	4605      	mov	r5, r0
   d4218:	4620      	mov	r0, r4
   d421a:	f001 fe71 	bl	d5f00 <_ZN15Adafruit_BME28012readAltitudeEf>
   d421e:	2102      	movs	r1, #2
   d4220:	4628      	mov	r0, r5
   d4222:	f004 fe37 	bl	d8e94 <_ZN5Print5printEfi>
    Serial.println(" m");
   d4226:	f005 fb1d 	bl	d9864 <_Z16_fetch_usbserialv>
   d422a:	4919      	ldr	r1, [pc, #100]	; (d4290 <_Z11printValuesv+0x10c>)
   d422c:	f004 fd0f 	bl	d8c4e <_ZN5Print7printlnEPKc>
    Serial.print("Humidity = ");
   d4230:	f005 fb18 	bl	d9864 <_Z16_fetch_usbserialv>
   d4234:	4917      	ldr	r1, [pc, #92]	; (d4294 <_Z11printValuesv+0x110>)
   d4236:	f004 fcf3 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d423a:	f005 fb13 	bl	d9864 <_Z16_fetch_usbserialv>
   d423e:	4605      	mov	r5, r0
   d4240:	4620      	mov	r0, r4
   d4242:	f001 fefd 	bl	d6040 <_ZN15Adafruit_BME28012readHumidityEv>
   d4246:	2102      	movs	r1, #2
   d4248:	4628      	mov	r0, r5
   d424a:	f004 fe23 	bl	d8e94 <_ZN5Print5printEfi>
    Serial.println(" %");
   d424e:	f005 fb09 	bl	d9864 <_Z16_fetch_usbserialv>
   d4252:	4911      	ldr	r1, [pc, #68]	; (d4298 <_Z11printValuesv+0x114>)
   d4254:	f004 fcfb 	bl	d8c4e <_ZN5Print7printlnEPKc>
    Serial.println();
   d4258:	f005 fb04 	bl	d9864 <_Z16_fetch_usbserialv>
}
   d425c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println();
   d4260:	f004 bce9 	b.w	d8c36 <_ZN5Print7printlnEv>
   d4264:	000dd99c 	.word	0x000dd99c
   d4268:	2003e458 	.word	0x2003e458
   d426c:	3fe66666 	.word	0x3fe66666
   d4270:	40400000 	.word	0x40400000
   d4274:	000dd9ad 	.word	0x000dd9ad
   d4278:	000dd9b0 	.word	0x000dd9b0
   d427c:	47c5e680 	.word	0x47c5e680
   d4280:	443e0000 	.word	0x443e0000
   d4284:	000dd9bc 	.word	0x000dd9bc
   d4288:	000dd9c2 	.word	0x000dd9c2
   d428c:	447d5000 	.word	0x447d5000
   d4290:	000dd9d6 	.word	0x000dd9d6
   d4294:	000dd9d9 	.word	0x000dd9d9
   d4298:	000dd9e5 	.word	0x000dd9e5

000d429c <_Z20displaySensorDetailsv>:
{
   d429c:	b530      	push	{r4, r5, lr}
  Serial.println("------------------------------------");
   d429e:	4d3b      	ldr	r5, [pc, #236]	; (d438c <_Z20displaySensorDetailsv+0xf0>)
  bno.getSensor(&sensor);
   d42a0:	483b      	ldr	r0, [pc, #236]	; (d4390 <_Z20displaySensorDetailsv+0xf4>)
{
   d42a2:	b08b      	sub	sp, #44	; 0x2c
  bno.getSensor(&sensor);
   d42a4:	4669      	mov	r1, sp
   d42a6:	f002 fbc9 	bl	d6a3c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
  Serial.println("------------------------------------");
   d42aa:	f005 fadb 	bl	d9864 <_Z16_fetch_usbserialv>
   d42ae:	4629      	mov	r1, r5
   d42b0:	f004 fccd 	bl	d8c4e <_ZN5Print7printlnEPKc>
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
   d42b4:	f005 fad6 	bl	d9864 <_Z16_fetch_usbserialv>
   d42b8:	4936      	ldr	r1, [pc, #216]	; (d4394 <_Z20displaySensorDetailsv+0xf8>)
   d42ba:	f004 fcb1 	bl	d8c20 <_ZN5Print5printEPKc>
   d42be:	f005 fad1 	bl	d9864 <_Z16_fetch_usbserialv>
   d42c2:	4669      	mov	r1, sp
   d42c4:	f004 fcc3 	bl	d8c4e <_ZN5Print7printlnEPKc>
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
   d42c8:	f005 facc 	bl	d9864 <_Z16_fetch_usbserialv>
   d42cc:	4932      	ldr	r1, [pc, #200]	; (d4398 <_Z20displaySensorDetailsv+0xfc>)
   d42ce:	f004 fca7 	bl	d8c20 <_ZN5Print5printEPKc>
   d42d2:	f005 fac7 	bl	d9864 <_Z16_fetch_usbserialv>
   d42d6:	220a      	movs	r2, #10
   d42d8:	9903      	ldr	r1, [sp, #12]
   d42da:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   d42dc:	f7ff ff28 	bl	d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>
        n += println();
   d42e0:	4620      	mov	r0, r4
   d42e2:	f004 fca8 	bl	d8c36 <_ZN5Print7printlnEv>
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
   d42e6:	f005 fabd 	bl	d9864 <_Z16_fetch_usbserialv>
   d42ea:	492c      	ldr	r1, [pc, #176]	; (d439c <_Z20displaySensorDetailsv+0x100>)
   d42ec:	f004 fc98 	bl	d8c20 <_ZN5Print5printEPKc>
   d42f0:	f005 fab8 	bl	d9864 <_Z16_fetch_usbserialv>
   d42f4:	220a      	movs	r2, #10
   d42f6:	9904      	ldr	r1, [sp, #16]
   d42f8:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   d42fa:	f7ff ff19 	bl	d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>
        n += println();
   d42fe:	4620      	mov	r0, r4
   d4300:	f004 fc99 	bl	d8c36 <_ZN5Print7printlnEv>
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" xxx");
   d4304:	4c26      	ldr	r4, [pc, #152]	; (d43a0 <_Z20displaySensorDetailsv+0x104>)
   d4306:	f005 faad 	bl	d9864 <_Z16_fetch_usbserialv>
   d430a:	4926      	ldr	r1, [pc, #152]	; (d43a4 <_Z20displaySensorDetailsv+0x108>)
   d430c:	f004 fc88 	bl	d8c20 <_ZN5Print5printEPKc>
   d4310:	f005 faa8 	bl	d9864 <_Z16_fetch_usbserialv>
   d4314:	ed9d 0a06 	vldr	s0, [sp, #24]
   d4318:	2102      	movs	r1, #2
   d431a:	f004 fdbb 	bl	d8e94 <_ZN5Print5printEfi>
   d431e:	f005 faa1 	bl	d9864 <_Z16_fetch_usbserialv>
   d4322:	4621      	mov	r1, r4
   d4324:	f004 fc93 	bl	d8c4e <_ZN5Print7printlnEPKc>
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" xxx");
   d4328:	f005 fa9c 	bl	d9864 <_Z16_fetch_usbserialv>
   d432c:	491e      	ldr	r1, [pc, #120]	; (d43a8 <_Z20displaySensorDetailsv+0x10c>)
   d432e:	f004 fc77 	bl	d8c20 <_ZN5Print5printEPKc>
   d4332:	f005 fa97 	bl	d9864 <_Z16_fetch_usbserialv>
   d4336:	ed9d 0a07 	vldr	s0, [sp, #28]
   d433a:	2102      	movs	r1, #2
   d433c:	f004 fdaa 	bl	d8e94 <_ZN5Print5printEfi>
   d4340:	f005 fa90 	bl	d9864 <_Z16_fetch_usbserialv>
   d4344:	4621      	mov	r1, r4
   d4346:	f004 fc82 	bl	d8c4e <_ZN5Print7printlnEPKc>
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" xxx");
   d434a:	f005 fa8b 	bl	d9864 <_Z16_fetch_usbserialv>
   d434e:	4917      	ldr	r1, [pc, #92]	; (d43ac <_Z20displaySensorDetailsv+0x110>)
   d4350:	f004 fc66 	bl	d8c20 <_ZN5Print5printEPKc>
   d4354:	f005 fa86 	bl	d9864 <_Z16_fetch_usbserialv>
   d4358:	ed9d 0a08 	vldr	s0, [sp, #32]
   d435c:	2102      	movs	r1, #2
   d435e:	f004 fd99 	bl	d8e94 <_ZN5Print5printEfi>
   d4362:	f005 fa7f 	bl	d9864 <_Z16_fetch_usbserialv>
   d4366:	4621      	mov	r1, r4
   d4368:	f004 fc71 	bl	d8c4e <_ZN5Print7printlnEPKc>
  Serial.println("------------------------------------");
   d436c:	f005 fa7a 	bl	d9864 <_Z16_fetch_usbserialv>
   d4370:	4629      	mov	r1, r5
   d4372:	f004 fc6c 	bl	d8c4e <_ZN5Print7printlnEPKc>
  Serial.println("");
   d4376:	f005 fa75 	bl	d9864 <_Z16_fetch_usbserialv>
   d437a:	490d      	ldr	r1, [pc, #52]	; (d43b0 <_Z20displaySensorDetailsv+0x114>)
   d437c:	f004 fc67 	bl	d8c4e <_ZN5Print7printlnEPKc>
  delay(500);
   d4380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4384:	f004 fe3c 	bl	d9000 <delay>
}
   d4388:	b00b      	add	sp, #44	; 0x2c
   d438a:	bd30      	pop	{r4, r5, pc}
   d438c:	000dd9e8 	.word	0x000dd9e8
   d4390:	2003e49c 	.word	0x2003e49c
   d4394:	000dda0d 	.word	0x000dda0d
   d4398:	000dda1c 	.word	0x000dda1c
   d439c:	000dda2b 	.word	0x000dda2b
   d43a0:	000dda49 	.word	0x000dda49
   d43a4:	000dda3a 	.word	0x000dda3a
   d43a8:	000dda4e 	.word	0x000dda4e
   d43ac:	000dda5d 	.word	0x000dda5d
   d43b0:	000ddb67 	.word	0x000ddb67

000d43b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>:
{
   d43b4:	b538      	push	{r3, r4, r5, lr}
   d43b6:	4604      	mov	r4, r0
    Serial.println("\nCalibration offsets \n");
   d43b8:	f005 fa54 	bl	d9864 <_Z16_fetch_usbserialv>
   d43bc:	494c      	ldr	r1, [pc, #304]	; (d44f0 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x13c>)
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   d43be:	4d4d      	ldr	r5, [pc, #308]	; (d44f4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x140>)
    Serial.println("\nCalibration offsets \n");
   d43c0:	f004 fc45 	bl	d8c4e <_ZN5Print7printlnEPKc>
    Serial.print("Accelerometer: ");
   d43c4:	f005 fa4e 	bl	d9864 <_Z16_fetch_usbserialv>
   d43c8:	494b      	ldr	r1, [pc, #300]	; (d44f8 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x144>)
   d43ca:	f004 fc29 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   d43ce:	f005 fa49 	bl	d9864 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d43d2:	220a      	movs	r2, #10
   d43d4:	f9b4 1000 	ldrsh.w	r1, [r4]
   d43d8:	f7ff febf 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43dc:	f005 fa42 	bl	d9864 <_Z16_fetch_usbserialv>
   d43e0:	4629      	mov	r1, r5
   d43e2:	f004 fc1d 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_y); Serial.print(" ");
   d43e6:	f005 fa3d 	bl	d9864 <_Z16_fetch_usbserialv>
   d43ea:	220a      	movs	r2, #10
   d43ec:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   d43f0:	f7ff feb3 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43f4:	f005 fa36 	bl	d9864 <_Z16_fetch_usbserialv>
   d43f8:	4629      	mov	r1, r5
   d43fa:	f004 fc11 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_z); Serial.print(" ");
   d43fe:	f005 fa31 	bl	d9864 <_Z16_fetch_usbserialv>
   d4402:	220a      	movs	r2, #10
   d4404:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   d4408:	f7ff fea7 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d440c:	f005 fa2a 	bl	d9864 <_Z16_fetch_usbserialv>
   d4410:	4629      	mov	r1, r5
   d4412:	f004 fc05 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print("\nGyro: ");
   d4416:	f005 fa25 	bl	d9864 <_Z16_fetch_usbserialv>
   d441a:	4938      	ldr	r1, [pc, #224]	; (d44fc <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x148>)
   d441c:	f004 fc00 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_x); Serial.print(" ");
   d4420:	f005 fa20 	bl	d9864 <_Z16_fetch_usbserialv>
   d4424:	220a      	movs	r2, #10
   d4426:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   d442a:	f7ff fe96 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d442e:	f005 fa19 	bl	d9864 <_Z16_fetch_usbserialv>
   d4432:	4629      	mov	r1, r5
   d4434:	f004 fbf4 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_y); Serial.print(" ");
   d4438:	f005 fa14 	bl	d9864 <_Z16_fetch_usbserialv>
   d443c:	220a      	movs	r2, #10
   d443e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   d4442:	f7ff fe8a 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4446:	f005 fa0d 	bl	d9864 <_Z16_fetch_usbserialv>
   d444a:	4629      	mov	r1, r5
   d444c:	f004 fbe8 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_z); Serial.print(" ");
   d4450:	f005 fa08 	bl	d9864 <_Z16_fetch_usbserialv>
   d4454:	220a      	movs	r2, #10
   d4456:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d445a:	f7ff fe7e 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d445e:	f005 fa01 	bl	d9864 <_Z16_fetch_usbserialv>
   d4462:	4629      	mov	r1, r5
   d4464:	f004 fbdc 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print("\nMag: ");
   d4468:	f005 f9fc 	bl	d9864 <_Z16_fetch_usbserialv>
   d446c:	4924      	ldr	r1, [pc, #144]	; (d4500 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x14c>)
   d446e:	f004 fbd7 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_x); Serial.print(" ");
   d4472:	f005 f9f7 	bl	d9864 <_Z16_fetch_usbserialv>
   d4476:	220a      	movs	r2, #10
   d4478:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   d447c:	f7ff fe6d 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4480:	f005 f9f0 	bl	d9864 <_Z16_fetch_usbserialv>
   d4484:	4629      	mov	r1, r5
   d4486:	f004 fbcb 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_y); Serial.print(" ");
   d448a:	f005 f9eb 	bl	d9864 <_Z16_fetch_usbserialv>
   d448e:	220a      	movs	r2, #10
   d4490:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d4494:	f7ff fe61 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4498:	f005 f9e4 	bl	d9864 <_Z16_fetch_usbserialv>
   d449c:	4629      	mov	r1, r5
   d449e:	f004 fbbf 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_z); Serial.print(" ");
   d44a2:	f005 f9df 	bl	d9864 <_Z16_fetch_usbserialv>
   d44a6:	220a      	movs	r2, #10
   d44a8:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d44ac:	f7ff fe55 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d44b0:	f005 f9d8 	bl	d9864 <_Z16_fetch_usbserialv>
   d44b4:	4629      	mov	r1, r5
   d44b6:	f004 fbb3 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print("\nAccel Radius: ");
   d44ba:	f005 f9d3 	bl	d9864 <_Z16_fetch_usbserialv>
   d44be:	4911      	ldr	r1, [pc, #68]	; (d4504 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x150>)
   d44c0:	f004 fbae 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_radius);
   d44c4:	f005 f9ce 	bl	d9864 <_Z16_fetch_usbserialv>
   d44c8:	220a      	movs	r2, #10
   d44ca:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
   d44ce:	f7ff fe44 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
    Serial.print("\nMag Radius: ");
   d44d2:	f005 f9c7 	bl	d9864 <_Z16_fetch_usbserialv>
   d44d6:	490c      	ldr	r1, [pc, #48]	; (d4508 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x154>)
   d44d8:	f004 fba2 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_radius);
   d44dc:	f005 f9c2 	bl	d9864 <_Z16_fetch_usbserialv>
   d44e0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
   d44e4:	220a      	movs	r2, #10
}
   d44e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d44ea:	f7ff be36 	b.w	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d44ee:	bf00      	nop
   d44f0:	000dda6c 	.word	0x000dda6c
   d44f4:	000ddbfd 	.word	0x000ddbfd
   d44f8:	000dda83 	.word	0x000dda83
   d44fc:	000dda93 	.word	0x000dda93
   d4500:	000dda9b 	.word	0x000dda9b
   d4504:	000ddaa2 	.word	0x000ddaa2
   d4508:	000ddab2 	.word	0x000ddab2

000d450c <_Z10getHeadingi>:
if(direction < 22)
   d450c:	2815      	cmp	r0, #21
void getHeading(int direction) {
   d450e:	b508      	push	{r3, lr}
if(direction < 22)
   d4510:	dc06      	bgt.n	d4520 <_Z10getHeadingi+0x14>
Serial.println("N");
   d4512:	f005 f9a7 	bl	d9864 <_Z16_fetch_usbserialv>
   d4516:	4918      	ldr	r1, [pc, #96]	; (d4578 <_Z10getHeadingi+0x6c>)
} 
   d4518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Serial.println("NW");
   d451c:	f004 bb97 	b.w	d8c4e <_ZN5Print7printlnEPKc>
else if (direction < 67)
   d4520:	2842      	cmp	r0, #66	; 0x42
   d4522:	dc03      	bgt.n	d452c <_Z10getHeadingi+0x20>
Serial.println("NE");
   d4524:	f005 f99e 	bl	d9864 <_Z16_fetch_usbserialv>
   d4528:	4914      	ldr	r1, [pc, #80]	; (d457c <_Z10getHeadingi+0x70>)
   d452a:	e7f5      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 112)
   d452c:	286f      	cmp	r0, #111	; 0x6f
   d452e:	dc03      	bgt.n	d4538 <_Z10getHeadingi+0x2c>
Serial.println("E");
   d4530:	f005 f998 	bl	d9864 <_Z16_fetch_usbserialv>
   d4534:	4912      	ldr	r1, [pc, #72]	; (d4580 <_Z10getHeadingi+0x74>)
   d4536:	e7ef      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 157)
   d4538:	289c      	cmp	r0, #156	; 0x9c
   d453a:	dc03      	bgt.n	d4544 <_Z10getHeadingi+0x38>
Serial.println("SE");
   d453c:	f005 f992 	bl	d9864 <_Z16_fetch_usbserialv>
   d4540:	4910      	ldr	r1, [pc, #64]	; (d4584 <_Z10getHeadingi+0x78>)
   d4542:	e7e9      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 212)
   d4544:	28d3      	cmp	r0, #211	; 0xd3
   d4546:	dc03      	bgt.n	d4550 <_Z10getHeadingi+0x44>
Serial.println("S");
   d4548:	f005 f98c 	bl	d9864 <_Z16_fetch_usbserialv>
   d454c:	490e      	ldr	r1, [pc, #56]	; (d4588 <_Z10getHeadingi+0x7c>)
   d454e:	e7e3      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 247)
   d4550:	28f6      	cmp	r0, #246	; 0xf6
   d4552:	dc03      	bgt.n	d455c <_Z10getHeadingi+0x50>
Serial.println("SW");
   d4554:	f005 f986 	bl	d9864 <_Z16_fetch_usbserialv>
   d4558:	490c      	ldr	r1, [pc, #48]	; (d458c <_Z10getHeadingi+0x80>)
   d455a:	e7dd      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 292)
   d455c:	f5b0 7f92 	cmp.w	r0, #292	; 0x124
   d4560:	da03      	bge.n	d456a <_Z10getHeadingi+0x5e>
Serial.println("W");
   d4562:	f005 f97f 	bl	d9864 <_Z16_fetch_usbserialv>
   d4566:	490a      	ldr	r1, [pc, #40]	; (d4590 <_Z10getHeadingi+0x84>)
   d4568:	e7d6      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 337)
   d456a:	f5b0 7fa8 	cmp.w	r0, #336	; 0x150
   d456e:	dcd0      	bgt.n	d4512 <_Z10getHeadingi+0x6>
Serial.println("NW");
   d4570:	f005 f978 	bl	d9864 <_Z16_fetch_usbserialv>
   d4574:	4907      	ldr	r1, [pc, #28]	; (d4594 <_Z10getHeadingi+0x88>)
   d4576:	e7cf      	b.n	d4518 <_Z10getHeadingi+0xc>
   d4578:	000ddac0 	.word	0x000ddac0
   d457c:	000ddac2 	.word	0x000ddac2
   d4580:	000ddac3 	.word	0x000ddac3
   d4584:	000ddac5 	.word	0x000ddac5
   d4588:	000ddac8 	.word	0x000ddac8
   d458c:	000ddaca 	.word	0x000ddaca
   d4590:	000ddace 	.word	0x000ddace
   d4594:	000ddacd 	.word	0x000ddacd

000d4598 <_Z11eeprom_testv>:
 }
 return(psi);
//delay(BNO055_SAMPLERATE_DELAY_MS);
}

void eeprom_test(){
   d4598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t max_addr;
  //variables for calibration read from memory
int test = 55;
      // Try to determine the size by writing a value and seeing if it changes the first byte
  Serial.println("Testing size!");
   d459c:	f005 f962 	bl	d9864 <_Z16_fetch_usbserialv>
   d45a0:	492e      	ldr	r1, [pc, #184]	; (d465c <_Z11eeprom_testv+0xc4>)
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
    if (i2ceeprom.read(max_addr) != test)
   d45a2:	4d2f      	ldr	r5, [pc, #188]	; (d4660 <_Z11eeprom_testv+0xc8>)
    // read address 0x0 again
    uint8_t val0 = i2ceeprom.read(0);

    // re-write the old value
    if (! i2ceeprom.write(max_addr, test)) {
        Serial.print("Failed to re-write address 0x");
   d45a4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; d4670 <_Z11eeprom_testv+0xd8>
        Serial.print("Failed to write address 0x");
   d45a8:	f8df 90c8 	ldr.w	r9, [pc, #200]	; d4674 <_Z11eeprom_testv+0xdc>
  Serial.println("Testing size!");
   d45ac:	f004 fb4f 	bl	d8c4e <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
   d45b0:	2401      	movs	r4, #1
    if (i2ceeprom.read(max_addr) != test)
   d45b2:	b2a7      	uxth	r7, r4
   d45b4:	482a      	ldr	r0, [pc, #168]	; (d4660 <_Z11eeprom_testv+0xc8>)
   d45b6:	4639      	mov	r1, r7
   d45b8:	f003 fc94 	bl	d7ee4 <_ZN19Adafruit_EEPROM_I2C4readEt>
   d45bc:	2837      	cmp	r0, #55	; 0x37
   d45be:	d147      	bne.n	d4650 <_Z11eeprom_testv+0xb8>
    if (! i2ceeprom.write(max_addr, (byte)~test)) {
   d45c0:	22c8      	movs	r2, #200	; 0xc8
   d45c2:	4639      	mov	r1, r7
   d45c4:	4628      	mov	r0, r5
   d45c6:	f003 fc6b 	bl	d7ea0 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   d45ca:	b970      	cbnz	r0, d45ea <_Z11eeprom_testv+0x52>
        Serial.print("Failed to write address 0x");
   d45cc:	f005 f94a 	bl	d9864 <_Z16_fetch_usbserialv>
   d45d0:	4649      	mov	r1, r9
   d45d2:	f004 fb25 	bl	d8c20 <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   d45d6:	f005 f945 	bl	d9864 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d45da:	2210      	movs	r2, #16
   d45dc:	4606      	mov	r6, r0
   d45de:	4621      	mov	r1, r4
   d45e0:	f004 fb41 	bl	d8c66 <_ZN5Print11printNumberEmh>
        n += println();
   d45e4:	4630      	mov	r0, r6
   d45e6:	f004 fb26 	bl	d8c36 <_ZN5Print7printlnEv>
    uint8_t val0 = i2ceeprom.read(0);
   d45ea:	2100      	movs	r1, #0
   d45ec:	4628      	mov	r0, r5
   d45ee:	f003 fc79 	bl	d7ee4 <_ZN19Adafruit_EEPROM_I2C4readEt>
    if (! i2ceeprom.write(max_addr, test)) {
   d45f2:	2237      	movs	r2, #55	; 0x37
    uint8_t val0 = i2ceeprom.read(0);
   d45f4:	4606      	mov	r6, r0
    if (! i2ceeprom.write(max_addr, test)) {
   d45f6:	4639      	mov	r1, r7
   d45f8:	4628      	mov	r0, r5
   d45fa:	f003 fc51 	bl	d7ea0 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   d45fe:	b970      	cbnz	r0, d461e <_Z11eeprom_testv+0x86>
        Serial.print("Failed to re-write address 0x");
   d4600:	f005 f930 	bl	d9864 <_Z16_fetch_usbserialv>
   d4604:	4641      	mov	r1, r8
   d4606:	f004 fb0b 	bl	d8c20 <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   d460a:	f005 f92b 	bl	d9864 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d460e:	2210      	movs	r2, #16
   d4610:	4607      	mov	r7, r0
   d4612:	4621      	mov	r1, r4
   d4614:	f004 fb27 	bl	d8c66 <_ZN5Print11printNumberEmh>
        n += println();
   d4618:	4638      	mov	r0, r7
   d461a:	f004 fb0c 	bl	d8c36 <_ZN5Print7printlnEv>
    }    

    // check if addr 0 was changed
    if (val0 == (byte)~test) {
   d461e:	2ec8      	cmp	r6, #200	; 0xc8
   d4620:	d116      	bne.n	d4650 <_Z11eeprom_testv+0xb8>
      Serial.println("Found max address");
   d4622:	f005 f91f 	bl	d9864 <_Z16_fetch_usbserialv>
   d4626:	490f      	ldr	r1, [pc, #60]	; (d4664 <_Z11eeprom_testv+0xcc>)
   d4628:	f004 fb11 	bl	d8c4e <_ZN5Print7printlnEPKc>
      break;
    }
  }
  Serial.print("This EEPROM can store ");
   d462c:	f005 f91a 	bl	d9864 <_Z16_fetch_usbserialv>
   d4630:	490d      	ldr	r1, [pc, #52]	; (d4668 <_Z11eeprom_testv+0xd0>)
   d4632:	f004 faf5 	bl	d8c20 <_ZN5Print5printEPKc>
  Serial.print(max_addr);
   d4636:	f005 f915 	bl	d9864 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d463a:	4621      	mov	r1, r4
   d463c:	220a      	movs	r2, #10
   d463e:	f004 fb12 	bl	d8c66 <_ZN5Print11printNumberEmh>
  Serial.println(" bytes");
   d4642:	f005 f90f 	bl	d9864 <_Z16_fetch_usbserialv>
}
   d4646:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.println(" bytes");
   d464a:	4908      	ldr	r1, [pc, #32]	; (d466c <_Z11eeprom_testv+0xd4>)
   d464c:	f004 baff 	b.w	d8c4e <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
   d4650:	3401      	adds	r4, #1
   d4652:	f647 73ff 	movw	r3, #32767	; 0x7fff
   d4656:	429c      	cmp	r4, r3
   d4658:	d1ab      	bne.n	d45b2 <_Z11eeprom_testv+0x1a>
   d465a:	e7e7      	b.n	d462c <_Z11eeprom_testv+0x94>
   d465c:	000ddad0 	.word	0x000ddad0
   d4660:	2003e518 	.word	0x2003e518
   d4664:	000ddb17 	.word	0x000ddb17
   d4668:	000ddb29 	.word	0x000ddb29
   d466c:	000ddb40 	.word	0x000ddb40
   d4670:	000ddaf9 	.word	0x000ddaf9
   d4674:	000ddade 	.word	0x000ddade

000d4678 <_Z22measure_wind_directionRf>:

float measure_wind_direction(float& WindSpeed){
   d4678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
int Direction;// translated 0 - 360 direction
int CalDirection;// converted value with offset applied
int LastValue = 0;
uint16_t wind_speed_time_interval= 5000; //value in ms
uint32_t wind_speed_time = 0;
VaneValue = analogRead(vane_pin);
   d467a:	4b49      	ldr	r3, [pc, #292]	; (d47a0 <_Z22measure_wind_directionRf+0x128>)
float measure_wind_direction(float& WindSpeed){
   d467c:	4606      	mov	r6, r0
VaneValue = analogRead(vane_pin);
   d467e:	7818      	ldrb	r0, [r3, #0]
   d4680:	f005 fbc5 	bl	d9e0e <analogRead>
//digitalWrite(vane_switch, LOW);
//Serial.println("analog read value = ");
//Serial.print(VaneValue);
Direction = map(VaneValue, 0, 4095, 0, 360);
   d4684:	f44f 73b4 	mov.w	r3, #360	; 0x168
   d4688:	9300      	str	r3, [sp, #0]
   d468a:	2300      	movs	r3, #0
   d468c:	f640 72ff 	movw	r2, #4095	; 0xfff
   d4690:	4619      	mov	r1, r3
VaneValue = analogRead(vane_pin);
   d4692:	4605      	mov	r5, r0
Direction = map(VaneValue, 0, 4095, 0, 360);
   d4694:	f004 fca8 	bl	d8fe8 <_Z3mapiiiii>
CalDirection = Direction + Offset;

if(CalDirection > 360)
   d4698:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
Direction = map(VaneValue, 0, 4095, 0, 360);
   d469c:	4604      	mov	r4, r0
if(CalDirection > 360)
   d469e:	dd70      	ble.n	d4782 <_Z22measure_wind_directionRf+0x10a>
CalDirection = CalDirection - 360;
   d46a0:	f5a0 74b4 	sub.w	r4, r0, #360	; 0x168
   d46a4:	f003 fdc0 	bl	d8228 <HAL_Timer_Get_Milli_Seconds>
if(CalDirection < 0)
CalDirection = CalDirection + 360;


//delay(100);
if ((millis() - wind_speed_time) > wind_speed_time_interval) {
   d46a8:	f241 3388 	movw	r3, #5000	; 0x1388
   d46ac:	4298      	cmp	r0, r3
   d46ae:	d930      	bls.n	d4712 <_Z22measure_wind_directionRf+0x9a>
// Only update the display if change greater than 2 degrees.
  wind_speed_time = millis();
  
  WindSpeed = Rotations * .45;
   d46b0:	4f3c      	ldr	r7, [pc, #240]	; (d47a4 <_Z22measure_wind_directionRf+0x12c>)
   d46b2:	f003 fdb9 	bl	d8228 <HAL_Timer_Get_Milli_Seconds>
   d46b6:	6838      	ldr	r0, [r7, #0]
   d46b8:	f008 f9ce 	bl	dca58 <__aeabi_ui2d>
   d46bc:	a336      	add	r3, pc, #216	; (adr r3, d4798 <_Z22measure_wind_directionRf+0x120>)
   d46be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46c2:	f008 fa43 	bl	dcb4c <__aeabi_dmul>
   d46c6:	f008 fd39 	bl	dd13c <__aeabi_d2f>
   d46ca:	6030      	str	r0, [r6, #0]
Serial.print("wind speed -----------------\n");
   d46cc:	f005 f8ca 	bl	d9864 <_Z16_fetch_usbserialv>
   d46d0:	4935      	ldr	r1, [pc, #212]	; (d47a8 <_Z22measure_wind_directionRf+0x130>)
   d46d2:	f004 faa5 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(Rotations); Serial.print("\t\t");
   d46d6:	f005 f8c5 	bl	d9864 <_Z16_fetch_usbserialv>
   d46da:	220a      	movs	r2, #10
   d46dc:	6839      	ldr	r1, [r7, #0]
   d46de:	f004 fac2 	bl	d8c66 <_ZN5Print11printNumberEmh>
   d46e2:	f005 f8bf 	bl	d9864 <_Z16_fetch_usbserialv>
   d46e6:	4931      	ldr	r1, [pc, #196]	; (d47ac <_Z22measure_wind_directionRf+0x134>)
   d46e8:	f004 fa9a 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(WindSpeed); Serial.print("\t\t");  Serial.println(" mph");
   d46ec:	f005 f8ba 	bl	d9864 <_Z16_fetch_usbserialv>
   d46f0:	ed96 0a00 	vldr	s0, [r6]
   d46f4:	2102      	movs	r1, #2
   d46f6:	f004 fbcd 	bl	d8e94 <_ZN5Print5printEfi>
   d46fa:	f005 f8b3 	bl	d9864 <_Z16_fetch_usbserialv>
   d46fe:	492b      	ldr	r1, [pc, #172]	; (d47ac <_Z22measure_wind_directionRf+0x134>)
   d4700:	f004 fa8e 	bl	d8c20 <_ZN5Print5printEPKc>
   d4704:	f005 f8ae 	bl	d9864 <_Z16_fetch_usbserialv>
   d4708:	4929      	ldr	r1, [pc, #164]	; (d47b0 <_Z22measure_wind_directionRf+0x138>)
   d470a:	f004 faa0 	bl	d8c4e <_ZN5Print7printlnEPKc>
// wind_speed_time = millis();
Rotations = 0;  // Set Rotations count to 0 ready for calculations
   d470e:	2300      	movs	r3, #0
   d4710:	603b      	str	r3, [r7, #0]
// convert to mph using the formula V=P(2.25/T)
// V = P(2.25/3) = P * 0.75
}
  if(abs(CalDirection - LastValue) > 5)
   d4712:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
   d4716:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
   d471a:	2b05      	cmp	r3, #5
   d471c:	dd2b      	ble.n	d4776 <_Z22measure_wind_directionRf+0xfe>
  {
    Serial.print("Vanevalue -----------------\n");
   d471e:	f005 f8a1 	bl	d9864 <_Z16_fetch_usbserialv>
   d4722:	4924      	ldr	r1, [pc, #144]	; (d47b4 <_Z22measure_wind_directionRf+0x13c>)
   d4724:	f004 fa7c 	bl	d8c20 <_ZN5Print5printEPKc>
  Serial.print(VaneValue); Serial.print("\t\t");
   d4728:	f005 f89c 	bl	d9864 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   d472c:	2d00      	cmp	r5, #0
   d472e:	4606      	mov	r6, r0
   d4730:	da2c      	bge.n	d478c <_Z22measure_wind_directionRf+0x114>
            t = print('-');
   d4732:	212d      	movs	r1, #45	; 0x2d
   d4734:	f004 fa78 	bl	d8c28 <_ZN5Print5printEc>
            val = -n;
   d4738:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d473a:	220a      	movs	r2, #10
   d473c:	4630      	mov	r0, r6
   d473e:	f004 fa92 	bl	d8c66 <_ZN5Print11printNumberEmh>
   d4742:	f005 f88f 	bl	d9864 <_Z16_fetch_usbserialv>
   d4746:	4919      	ldr	r1, [pc, #100]	; (d47ac <_Z22measure_wind_directionRf+0x134>)
   d4748:	f004 fa6a 	bl	d8c20 <_ZN5Print5printEPKc>
  Serial.print(CalDirection); Serial.print("\t\t");
   d474c:	f005 f88a 	bl	d9864 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   d4750:	2c00      	cmp	r4, #0
   d4752:	4605      	mov	r5, r0
   d4754:	da1c      	bge.n	d4790 <_Z22measure_wind_directionRf+0x118>
            t = print('-');
   d4756:	212d      	movs	r1, #45	; 0x2d
   d4758:	f004 fa66 	bl	d8c28 <_ZN5Print5printEc>
            val = -n;
   d475c:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d475e:	220a      	movs	r2, #10
   d4760:	4628      	mov	r0, r5
   d4762:	f004 fa80 	bl	d8c66 <_ZN5Print11printNumberEmh>
   d4766:	f005 f87d 	bl	d9864 <_Z16_fetch_usbserialv>
   d476a:	4910      	ldr	r1, [pc, #64]	; (d47ac <_Z22measure_wind_directionRf+0x134>)
   d476c:	f004 fa58 	bl	d8c20 <_ZN5Print5printEPKc>
  getHeading(CalDirection);
   d4770:	4620      	mov	r0, r4
   d4772:	f7ff fecb 	bl	d450c <_Z10getHeadingi>
  LastValue = CalDirection;
  }

return CalDirection;
}
   d4776:	ee07 4a90 	vmov	s15, r4
   d477a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d477e:	b003      	add	sp, #12
   d4780:	bdf0      	pop	{r4, r5, r6, r7, pc}
if(CalDirection < 0)
   d4782:	2800      	cmp	r0, #0
CalDirection = CalDirection + 360;
   d4784:	bfb8      	it	lt
   d4786:	f500 74b4 	addlt.w	r4, r0, #360	; 0x168
   d478a:	e78b      	b.n	d46a4 <_Z22measure_wind_directionRf+0x2c>
            val = n;
   d478c:	4629      	mov	r1, r5
   d478e:	e7d4      	b.n	d473a <_Z22measure_wind_directionRf+0xc2>
   d4790:	4621      	mov	r1, r4
   d4792:	e7e4      	b.n	d475e <_Z22measure_wind_directionRf+0xe6>
   d4794:	f3af 8000 	nop.w
   d4798:	cccccccd 	.word	0xcccccccd
   d479c:	3fdccccc 	.word	0x3fdccccc
   d47a0:	2003e3cc 	.word	0x2003e3cc
   d47a4:	2003e444 	.word	0x2003e444
   d47a8:	000ddb47 	.word	0x000ddb47
   d47ac:	000ddb65 	.word	0x000ddb65
   d47b0:	000ddb68 	.word	0x000ddb68
   d47b4:	000ddb6d 	.word	0x000ddb6d

000d47b8 <_Z24print_heading_pitch_rollv>:

void print_heading_pitch_roll() {
   d47b8:	b510      	push	{r4, lr}
   d47ba:	b08a      	sub	sp, #40	; 0x28
      /* Get a new sensor event */
  sensors_event_t event;
  bno.getEvent(&event);
   d47bc:	a901      	add	r1, sp, #4
   d47be:	4817      	ldr	r0, [pc, #92]	; (d481c <_Z24print_heading_pitch_rollv+0x64>)
  /* The WebSerial 3D Model Viewer expects data as heading, pitch, roll */
  Serial.print(F("Heading, pitch, roll: "));
  Serial.print((float)event.orientation.x);
  Serial.print(F(", "));
   d47c0:	4c17      	ldr	r4, [pc, #92]	; (d4820 <_Z24print_heading_pitch_rollv+0x68>)
  bno.getEvent(&event);
   d47c2:	f002 fc29 	bl	d7018 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  Serial.print(F("Heading, pitch, roll: "));
   d47c6:	f005 f84d 	bl	d9864 <_Z16_fetch_usbserialv>
   d47ca:	4916      	ldr	r1, [pc, #88]	; (d4824 <_Z24print_heading_pitch_rollv+0x6c>)
   d47cc:	f004 fa2f 	bl	d8c2e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.x);
   d47d0:	f005 f848 	bl	d9864 <_Z16_fetch_usbserialv>
   d47d4:	ed9d 0a06 	vldr	s0, [sp, #24]
   d47d8:	2102      	movs	r1, #2
   d47da:	f004 fb5b 	bl	d8e94 <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d47de:	f005 f841 	bl	d9864 <_Z16_fetch_usbserialv>
   d47e2:	4621      	mov	r1, r4
   d47e4:	f004 fa23 	bl	d8c2e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.y);
   d47e8:	f005 f83c 	bl	d9864 <_Z16_fetch_usbserialv>
   d47ec:	ed9d 0a07 	vldr	s0, [sp, #28]
   d47f0:	2102      	movs	r1, #2
   d47f2:	f004 fb4f 	bl	d8e94 <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d47f6:	f005 f835 	bl	d9864 <_Z16_fetch_usbserialv>
   d47fa:	4621      	mov	r1, r4
   d47fc:	f004 fa17 	bl	d8c2e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.z);
   d4800:	f005 f830 	bl	d9864 <_Z16_fetch_usbserialv>
   d4804:	ed9d 0a08 	vldr	s0, [sp, #32]
   d4808:	2102      	movs	r1, #2
   d480a:	f004 fb43 	bl	d8e94 <_ZN5Print5printEfi>
  Serial.println(F(""));
   d480e:	f005 f829 	bl	d9864 <_Z16_fetch_usbserialv>
   d4812:	4905      	ldr	r1, [pc, #20]	; (d4828 <_Z24print_heading_pitch_rollv+0x70>)
   d4814:	f004 fa25 	bl	d8c62 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   d4818:	b00a      	add	sp, #40	; 0x28
   d481a:	bd10      	pop	{r4, pc}
   d481c:	2003e49c 	.word	0x2003e49c
   d4820:	000ddba1 	.word	0x000ddba1
   d4824:	000ddb8a 	.word	0x000ddb8a
   d4828:	000ddb67 	.word	0x000ddb67

000d482c <_Z21current_power_voltagev>:

void current_power_voltage(){
   d482c:	b510      	push	{r4, lr}
  float busvoltage = 0;
  float current_mA = 0;
  float loadvoltage = 0;
  float power_mW = 0;

  shuntvoltage = ina219.getShuntVoltage_mV();
   d482e:	483d      	ldr	r0, [pc, #244]	; (d4924 <_Z21current_power_voltagev+0xf8>)
  busvoltage = ina219.getBusVoltage_V();
  current_mA = ina219.getCurrent_mA();
  power_mW = ina219.getPower_mW();
  loadvoltage = busvoltage + (shuntvoltage / 1000);
  
  Serial.print("Bus Voltage:   "); Serial.print(busvoltage); Serial.println(" V");
   d4830:	4c3d      	ldr	r4, [pc, #244]	; (d4928 <_Z21current_power_voltagev+0xfc>)
void current_power_voltage(){
   d4832:	ed2d 8b06 	vpush	{d8-d10}
  shuntvoltage = ina219.getShuntVoltage_mV();
   d4836:	f003 fbe3 	bl	d8000 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv>
  busvoltage = ina219.getBusVoltage_V();
   d483a:	483a      	ldr	r0, [pc, #232]	; (d4924 <_Z21current_power_voltagev+0xf8>)
  shuntvoltage = ina219.getShuntVoltage_mV();
   d483c:	eeb0 8a40 	vmov.f32	s16, s0
  busvoltage = ina219.getBusVoltage_V();
   d4840:	f003 fbf2 	bl	d8028 <_ZN15Adafruit_INA21915getBusVoltage_VEv>
  current_mA = ina219.getCurrent_mA();
   d4844:	4837      	ldr	r0, [pc, #220]	; (d4924 <_Z21current_power_voltagev+0xf8>)
  busvoltage = ina219.getBusVoltage_V();
   d4846:	eef0 8a40 	vmov.f32	s17, s0
  current_mA = ina219.getCurrent_mA();
   d484a:	f003 fc01 	bl	d8050 <_ZN15Adafruit_INA21913getCurrent_mAEv>
  power_mW = ina219.getPower_mW();
   d484e:	4835      	ldr	r0, [pc, #212]	; (d4924 <_Z21current_power_voltagev+0xf8>)
  current_mA = ina219.getCurrent_mA();
   d4850:	eef0 9a40 	vmov.f32	s19, s0
  power_mW = ina219.getPower_mW();
   d4854:	f003 fc0b 	bl	d806e <_ZN15Adafruit_INA21911getPower_mWEv>
  loadvoltage = busvoltage + (shuntvoltage / 1000);
   d4858:	eddf 7a34 	vldr	s15, [pc, #208]	; d492c <_Z21current_power_voltagev+0x100>
   d485c:	ee88 aa27 	vdiv.f32	s20, s16, s15
  power_mW = ina219.getPower_mW();
   d4860:	eeb0 9a40 	vmov.f32	s18, s0
  Serial.print("Bus Voltage:   "); Serial.print(busvoltage); Serial.println(" V");
   d4864:	f004 fffe 	bl	d9864 <_Z16_fetch_usbserialv>
   d4868:	4931      	ldr	r1, [pc, #196]	; (d4930 <_Z21current_power_voltagev+0x104>)
   d486a:	f004 f9d9 	bl	d8c20 <_ZN5Print5printEPKc>
   d486e:	f004 fff9 	bl	d9864 <_Z16_fetch_usbserialv>
   d4872:	eeb0 0a68 	vmov.f32	s0, s17
   d4876:	2102      	movs	r1, #2
   d4878:	f004 fb0c 	bl	d8e94 <_ZN5Print5printEfi>
   d487c:	f004 fff2 	bl	d9864 <_Z16_fetch_usbserialv>
   d4880:	4621      	mov	r1, r4
   d4882:	f004 f9e4 	bl	d8c4e <_ZN5Print7printlnEPKc>
  Serial.print("Shunt Voltage: "); Serial.print(shuntvoltage); Serial.println(" mV");
   d4886:	f004 ffed 	bl	d9864 <_Z16_fetch_usbserialv>
   d488a:	492a      	ldr	r1, [pc, #168]	; (d4934 <_Z21current_power_voltagev+0x108>)
   d488c:	f004 f9c8 	bl	d8c20 <_ZN5Print5printEPKc>
   d4890:	f004 ffe8 	bl	d9864 <_Z16_fetch_usbserialv>
   d4894:	eeb0 0a48 	vmov.f32	s0, s16
   d4898:	2102      	movs	r1, #2
   d489a:	f004 fafb 	bl	d8e94 <_ZN5Print5printEfi>
  loadvoltage = busvoltage + (shuntvoltage / 1000);
   d489e:	ee3a aa28 	vadd.f32	s20, s20, s17
  Serial.print("Shunt Voltage: "); Serial.print(shuntvoltage); Serial.println(" mV");
   d48a2:	f004 ffdf 	bl	d9864 <_Z16_fetch_usbserialv>
   d48a6:	4924      	ldr	r1, [pc, #144]	; (d4938 <_Z21current_power_voltagev+0x10c>)
   d48a8:	f004 f9d1 	bl	d8c4e <_ZN5Print7printlnEPKc>
  Serial.print("Load Voltage:  "); Serial.print(loadvoltage); Serial.println(" V");
   d48ac:	f004 ffda 	bl	d9864 <_Z16_fetch_usbserialv>
   d48b0:	4922      	ldr	r1, [pc, #136]	; (d493c <_Z21current_power_voltagev+0x110>)
   d48b2:	f004 f9b5 	bl	d8c20 <_ZN5Print5printEPKc>
   d48b6:	f004 ffd5 	bl	d9864 <_Z16_fetch_usbserialv>
   d48ba:	eeb0 0a4a 	vmov.f32	s0, s20
   d48be:	2102      	movs	r1, #2
   d48c0:	f004 fae8 	bl	d8e94 <_ZN5Print5printEfi>
   d48c4:	f004 ffce 	bl	d9864 <_Z16_fetch_usbserialv>
   d48c8:	4621      	mov	r1, r4
   d48ca:	f004 f9c0 	bl	d8c4e <_ZN5Print7printlnEPKc>
  Serial.print("Current:       "); Serial.print(current_mA); Serial.println(" mA");
   d48ce:	f004 ffc9 	bl	d9864 <_Z16_fetch_usbserialv>
   d48d2:	491b      	ldr	r1, [pc, #108]	; (d4940 <_Z21current_power_voltagev+0x114>)
   d48d4:	f004 f9a4 	bl	d8c20 <_ZN5Print5printEPKc>
   d48d8:	f004 ffc4 	bl	d9864 <_Z16_fetch_usbserialv>
   d48dc:	eeb0 0a69 	vmov.f32	s0, s19
   d48e0:	2102      	movs	r1, #2
   d48e2:	f004 fad7 	bl	d8e94 <_ZN5Print5printEfi>
   d48e6:	f004 ffbd 	bl	d9864 <_Z16_fetch_usbserialv>
   d48ea:	4916      	ldr	r1, [pc, #88]	; (d4944 <_Z21current_power_voltagev+0x118>)
   d48ec:	f004 f9af 	bl	d8c4e <_ZN5Print7printlnEPKc>
  Serial.print("Power:         "); Serial.print(power_mW); Serial.println(" mW");
   d48f0:	f004 ffb8 	bl	d9864 <_Z16_fetch_usbserialv>
   d48f4:	4914      	ldr	r1, [pc, #80]	; (d4948 <_Z21current_power_voltagev+0x11c>)
   d48f6:	f004 f993 	bl	d8c20 <_ZN5Print5printEPKc>
   d48fa:	f004 ffb3 	bl	d9864 <_Z16_fetch_usbserialv>
   d48fe:	eeb0 0a49 	vmov.f32	s0, s18
   d4902:	2102      	movs	r1, #2
   d4904:	f004 fac6 	bl	d8e94 <_ZN5Print5printEfi>
   d4908:	f004 ffac 	bl	d9864 <_Z16_fetch_usbserialv>
   d490c:	490f      	ldr	r1, [pc, #60]	; (d494c <_Z21current_power_voltagev+0x120>)
   d490e:	f004 f99e 	bl	d8c4e <_ZN5Print7printlnEPKc>
  Serial.println("");
   d4912:	f004 ffa7 	bl	d9864 <_Z16_fetch_usbserialv>
}
   d4916:	ecbd 8b06 	vpop	{d8-d10}
  Serial.println("");
   d491a:	490d      	ldr	r1, [pc, #52]	; (d4950 <_Z21current_power_voltagev+0x124>)
}
   d491c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println("");
   d4920:	f004 b995 	b.w	d8c4e <_ZN5Print7printlnEPKc>
   d4924:	2003e520 	.word	0x2003e520
   d4928:	000ddbb4 	.word	0x000ddbb4
   d492c:	447a0000 	.word	0x447a0000
   d4930:	000ddba4 	.word	0x000ddba4
   d4934:	000ddbb7 	.word	0x000ddbb7
   d4938:	000ddbc7 	.word	0x000ddbc7
   d493c:	000ddbcb 	.word	0x000ddbcb
   d4940:	000ddbdb 	.word	0x000ddbdb
   d4944:	000ddbeb 	.word	0x000ddbeb
   d4948:	000ddbef 	.word	0x000ddbef
   d494c:	000ddbff 	.word	0x000ddbff
   d4950:	000ddb67 	.word	0x000ddb67

000d4954 <_ZN5Print5printIhLi0EEEjT_i>:
    if (base == 0) {
   d4954:	b912      	cbnz	r2, d495c <_ZN5Print5printIhLi0EEEjT_i+0x8>
        return write(n);
   d4956:	6803      	ldr	r3, [r0, #0]
   d4958:	689b      	ldr	r3, [r3, #8]
   d495a:	4718      	bx	r3
        return printNumber(val, base) + t;
   d495c:	b2d2      	uxtb	r2, r2
   d495e:	f004 b982 	b.w	d8c66 <_ZN5Print11printNumberEmh>

000d4962 <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d4962:	b538      	push	{r3, r4, r5, lr}
   d4964:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d4966:	f7ff fff5 	bl	d4954 <_ZN5Print5printIhLi0EEEjT_i>
   d496a:	4604      	mov	r4, r0
        n += println();
   d496c:	4628      	mov	r0, r5
   d496e:	f004 f962 	bl	d8c36 <_ZN5Print7printlnEv>
    }
   d4972:	4420      	add	r0, r4
   d4974:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4978 <_Z19displaySensorStatusv>:
{
   d4978:	b513      	push	{r0, r1, r4, lr}
    system_status = self_test_results = system_error = 0;
   d497a:	2300      	movs	r3, #0
    Serial.println("");
   d497c:	4c21      	ldr	r4, [pc, #132]	; (d4a04 <_Z19displaySensorStatusv+0x8c>)
    system_status = self_test_results = system_error = 0;
   d497e:	f88d 3007 	strb.w	r3, [sp, #7]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   d4982:	f10d 0206 	add.w	r2, sp, #6
   d4986:	f10d 0105 	add.w	r1, sp, #5
    system_status = self_test_results = system_error = 0;
   d498a:	f88d 3006 	strb.w	r3, [sp, #6]
   d498e:	f88d 3005 	strb.w	r3, [sp, #5]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   d4992:	481d      	ldr	r0, [pc, #116]	; (d4a08 <_Z19displaySensorStatusv+0x90>)
   d4994:	f10d 0307 	add.w	r3, sp, #7
   d4998:	f002 f9af 	bl	d6cfa <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>
    Serial.println("");
   d499c:	f004 ff62 	bl	d9864 <_Z16_fetch_usbserialv>
   d49a0:	4621      	mov	r1, r4
   d49a2:	f004 f954 	bl	d8c4e <_ZN5Print7printlnEPKc>
    Serial.print("System Status: 0x");
   d49a6:	f004 ff5d 	bl	d9864 <_Z16_fetch_usbserialv>
   d49aa:	4918      	ldr	r1, [pc, #96]	; (d4a0c <_Z19displaySensorStatusv+0x94>)
   d49ac:	f004 f938 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.println(system_status, HEX);
   d49b0:	f004 ff58 	bl	d9864 <_Z16_fetch_usbserialv>
   d49b4:	2210      	movs	r2, #16
   d49b6:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d49ba:	f7ff ffd2 	bl	d4962 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("Self Test:     0x");
   d49be:	f004 ff51 	bl	d9864 <_Z16_fetch_usbserialv>
   d49c2:	4913      	ldr	r1, [pc, #76]	; (d4a10 <_Z19displaySensorStatusv+0x98>)
   d49c4:	f004 f92c 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.println(self_test_results, HEX);
   d49c8:	f004 ff4c 	bl	d9864 <_Z16_fetch_usbserialv>
   d49cc:	2210      	movs	r2, #16
   d49ce:	f89d 1006 	ldrb.w	r1, [sp, #6]
   d49d2:	f7ff ffc6 	bl	d4962 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("System Error:  0x");
   d49d6:	f004 ff45 	bl	d9864 <_Z16_fetch_usbserialv>
   d49da:	490e      	ldr	r1, [pc, #56]	; (d4a14 <_Z19displaySensorStatusv+0x9c>)
   d49dc:	f004 f920 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.println(system_error, HEX);
   d49e0:	f004 ff40 	bl	d9864 <_Z16_fetch_usbserialv>
   d49e4:	2210      	movs	r2, #16
   d49e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d49ea:	f7ff ffba 	bl	d4962 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.println("");
   d49ee:	f004 ff39 	bl	d9864 <_Z16_fetch_usbserialv>
   d49f2:	4621      	mov	r1, r4
   d49f4:	f004 f92b 	bl	d8c4e <_ZN5Print7printlnEPKc>
    delay(500);
   d49f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d49fc:	f004 fb00 	bl	d9000 <delay>
}
   d4a00:	b002      	add	sp, #8
   d4a02:	bd10      	pop	{r4, pc}
   d4a04:	000ddb67 	.word	0x000ddb67
   d4a08:	2003e49c 	.word	0x2003e49c
   d4a0c:	000ddc03 	.word	0x000ddc03
   d4a10:	000ddc15 	.word	0x000ddc15
   d4a14:	000ddc27 	.word	0x000ddc27

000d4a18 <_Z16displayCalStatusv>:
{
   d4a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    system = gyro = accel = mag = 0;
   d4a1a:	2300      	movs	r3, #0
   d4a1c:	f88d 300f 	strb.w	r3, [sp, #15]
   d4a20:	f88d 300e 	strb.w	r3, [sp, #14]
   d4a24:	f88d 300d 	strb.w	r3, [sp, #13]
   d4a28:	f88d 300c 	strb.w	r3, [sp, #12]
    bno.getCalibration(&system, &gyro, &accel, &mag);
   d4a2c:	f10d 030f 	add.w	r3, sp, #15
   d4a30:	f10d 020d 	add.w	r2, sp, #13
   d4a34:	a903      	add	r1, sp, #12
   d4a36:	4823      	ldr	r0, [pc, #140]	; (d4ac4 <_Z16displayCalStatusv+0xac>)
   d4a38:	9300      	str	r3, [sp, #0]
   d4a3a:	f10d 030e 	add.w	r3, sp, #14
   d4a3e:	f002 f97c 	bl	d6d3a <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
    Serial.print("\t");
   d4a42:	f004 ff0f 	bl	d9864 <_Z16_fetch_usbserialv>
   d4a46:	4920      	ldr	r1, [pc, #128]	; (d4ac8 <_Z16displayCalStatusv+0xb0>)
   d4a48:	f004 f8ea 	bl	d8c20 <_ZN5Print5printEPKc>
    if (!system)
   d4a4c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4a50:	b923      	cbnz	r3, d4a5c <_Z16displayCalStatusv+0x44>
        Serial.print("! ");
   d4a52:	f004 ff07 	bl	d9864 <_Z16_fetch_usbserialv>
   d4a56:	491d      	ldr	r1, [pc, #116]	; (d4acc <_Z16displayCalStatusv+0xb4>)
   d4a58:	f004 f8e2 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print("Sys:");
   d4a5c:	f004 ff02 	bl	d9864 <_Z16_fetch_usbserialv>
   d4a60:	491b      	ldr	r1, [pc, #108]	; (d4ad0 <_Z16displayCalStatusv+0xb8>)
   d4a62:	f004 f8dd 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(system, DEC);
   d4a66:	f004 fefd 	bl	d9864 <_Z16_fetch_usbserialv>
   d4a6a:	220a      	movs	r2, #10
   d4a6c:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d4a70:	f7ff ff70 	bl	d4954 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" G:");
   d4a74:	f004 fef6 	bl	d9864 <_Z16_fetch_usbserialv>
   d4a78:	4916      	ldr	r1, [pc, #88]	; (d4ad4 <_Z16displayCalStatusv+0xbc>)
   d4a7a:	f004 f8d1 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(gyro, DEC);
   d4a7e:	f004 fef1 	bl	d9864 <_Z16_fetch_usbserialv>
   d4a82:	220a      	movs	r2, #10
   d4a84:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d4a88:	f7ff ff64 	bl	d4954 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" A:");
   d4a8c:	f004 feea 	bl	d9864 <_Z16_fetch_usbserialv>
   d4a90:	4911      	ldr	r1, [pc, #68]	; (d4ad8 <_Z16displayCalStatusv+0xc0>)
   d4a92:	f004 f8c5 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(accel, DEC);
   d4a96:	f004 fee5 	bl	d9864 <_Z16_fetch_usbserialv>
   d4a9a:	220a      	movs	r2, #10
   d4a9c:	f89d 100e 	ldrb.w	r1, [sp, #14]
   d4aa0:	f7ff ff58 	bl	d4954 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" M:");
   d4aa4:	f004 fede 	bl	d9864 <_Z16_fetch_usbserialv>
   d4aa8:	490c      	ldr	r1, [pc, #48]	; (d4adc <_Z16displayCalStatusv+0xc4>)
   d4aaa:	f004 f8b9 	bl	d8c20 <_ZN5Print5printEPKc>
    Serial.print(mag, DEC);
   d4aae:	f004 fed9 	bl	d9864 <_Z16_fetch_usbserialv>
   d4ab2:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d4ab6:	220a      	movs	r2, #10
   d4ab8:	f7ff ff4c 	bl	d4954 <_ZN5Print5printIhLi0EEEjT_i>
}
   d4abc:	b005      	add	sp, #20
   d4abe:	f85d fb04 	ldr.w	pc, [sp], #4
   d4ac2:	bf00      	nop
   d4ac4:	2003e49c 	.word	0x2003e49c
   d4ac8:	000ddb66 	.word	0x000ddb66
   d4acc:	000ddc39 	.word	0x000ddc39
   d4ad0:	000ddc3c 	.word	0x000ddc3c
   d4ad4:	000ddc41 	.word	0x000ddc41
   d4ad8:	000ddc45 	.word	0x000ddc45
   d4adc:	000ddc49 	.word	0x000ddc49

000d4ae0 <_Z19get_compass_headingv>:
float get_compass_heading() {
   d4ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ae4:	ed2d 8b0a 	vpush	{d8-d12}
   d4ae8:	b097      	sub	sp, #92	; 0x5c
uint8_t system, gyro, accel, mg = 0;
   d4aea:	2300      	movs	r3, #0
   d4aec:	f88d 300f 	strb.w	r3, [sp, #15]
bno.getCalibration(&system, &gyro, &accel, &mg);
   d4af0:	f10d 030f 	add.w	r3, sp, #15
   d4af4:	9300      	str	r3, [sp, #0]
   d4af6:	f10d 020d 	add.w	r2, sp, #13
   d4afa:	f10d 030e 	add.w	r3, sp, #14
   d4afe:	a903      	add	r1, sp, #12
   d4b00:	48d3      	ldr	r0, [pc, #844]	; (d4e50 <_Z19get_compass_headingv+0x370>)
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4b02:	4fd4      	ldr	r7, [pc, #848]	; (d4e54 <_Z19get_compass_headingv+0x374>)
phiFnew=.95*phiFold+.05*phiM;
   d4b04:	f8df b38c 	ldr.w	fp, [pc, #908]	; d4e94 <_Z19get_compass_headingv+0x3b4>
thetaFnew=.95*thetaFold+.05*thetaM;
   d4b08:	f8df a38c 	ldr.w	sl, [pc, #908]	; d4e98 <_Z19get_compass_headingv+0x3b8>
phiRad=phi/360*(2*3.14);
   d4b0c:	ed9f 9ad2 	vldr	s18, [pc, #840]	; d4e58 <_Z19get_compass_headingv+0x378>
bno.getCalibration(&system, &gyro, &accel, &mg);
   d4b10:	f002 f913 	bl	d6d3a <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
imu::Vector<3> acc =bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
   d4b14:	a804      	add	r0, sp, #16
   d4b16:	49ce      	ldr	r1, [pc, #824]	; (d4e50 <_Z19get_compass_headingv+0x370>)
   d4b18:	2208      	movs	r2, #8
   d4b1a:	f002 fa0d 	bl	d6f38 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> gyr =bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
   d4b1e:	a80a      	add	r0, sp, #40	; 0x28
   d4b20:	49cb      	ldr	r1, [pc, #812]	; (d4e50 <_Z19get_compass_headingv+0x370>)
   d4b22:	2214      	movs	r2, #20
   d4b24:	f002 fa08 	bl	d6f38 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> mag =bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
   d4b28:	a810      	add	r0, sp, #64	; 0x40
   d4b2a:	49c9      	ldr	r1, [pc, #804]	; (d4e50 <_Z19get_compass_headingv+0x370>)
   d4b2c:	220e      	movs	r2, #14
   d4b2e:	f002 fa03 	bl	d6f38 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4b32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d4b36:	a3bc      	add	r3, pc, #752	; (adr r3, d4e28 <_Z19get_compass_headingv+0x348>)
   d4b38:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b3c:	f008 f930 	bl	dcda0 <__aeabi_ddiv>
   d4b40:	a3b9      	add	r3, pc, #740	; (adr r3, d4e28 <_Z19get_compass_headingv+0x348>)
   d4b42:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b46:	ec41 0b18 	vmov	d8, r0, r1
   d4b4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d4b4e:	f008 f927 	bl	dcda0 <__aeabi_ddiv>
   d4b52:	eeb0 1a48 	vmov.f32	s2, s16
   d4b56:	eef0 1a68 	vmov.f32	s3, s17
   d4b5a:	ec41 0b10 	vmov	d0, r0, r1
   d4b5e:	f005 fa5b 	bl	da018 <atan2>
   d4b62:	ec53 2b10 	vmov	r2, r3, d0
   d4b66:	ee10 0a10 	vmov	r0, s0
   d4b6a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   d4b6e:	2200      	movs	r2, #0
   d4b70:	4bba      	ldr	r3, [pc, #744]	; (d4e5c <_Z19get_compass_headingv+0x37c>)
   d4b72:	f007 ffeb 	bl	dcb4c <__aeabi_dmul>
   d4b76:	a3ae      	add	r3, pc, #696	; (adr r3, d4e30 <_Z19get_compass_headingv+0x350>)
   d4b78:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b7c:	f008 f910 	bl	dcda0 <__aeabi_ddiv>
   d4b80:	4bb7      	ldr	r3, [pc, #732]	; (d4e60 <_Z19get_compass_headingv+0x380>)
   d4b82:	2200      	movs	r2, #0
   d4b84:	f007 ffe2 	bl	dcb4c <__aeabi_dmul>
   d4b88:	f008 fad8 	bl	dd13c <__aeabi_d2f>
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4b8c:	a3a6      	add	r3, pc, #664	; (adr r3, d4e28 <_Z19get_compass_headingv+0x348>)
   d4b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4b92:	6038      	str	r0, [r7, #0]
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4b94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d4b98:	f008 f902 	bl	dcda0 <__aeabi_ddiv>
   d4b9c:	a3a2      	add	r3, pc, #648	; (adr r3, d4e28 <_Z19get_compass_headingv+0x348>)
   d4b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ba2:	ec41 0b18 	vmov	d8, r0, r1
   d4ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d4baa:	f008 f8f9 	bl	dcda0 <__aeabi_ddiv>
   d4bae:	eeb0 1a48 	vmov.f32	s2, s16
   d4bb2:	eef0 1a68 	vmov.f32	s3, s17
   d4bb6:	ec41 0b10 	vmov	d0, r0, r1
   d4bba:	f005 fa2d 	bl	da018 <atan2>
   d4bbe:	ec53 2b10 	vmov	r2, r3, d0
   d4bc2:	ee10 0a10 	vmov	r0, s0
   d4bc6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   d4bca:	2200      	movs	r2, #0
   d4bcc:	4ba3      	ldr	r3, [pc, #652]	; (d4e5c <_Z19get_compass_headingv+0x37c>)
   d4bce:	f007 ffbd 	bl	dcb4c <__aeabi_dmul>
   d4bd2:	a397      	add	r3, pc, #604	; (adr r3, d4e30 <_Z19get_compass_headingv+0x350>)
   d4bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bd8:	f008 f8e2 	bl	dcda0 <__aeabi_ddiv>
   d4bdc:	2200      	movs	r2, #0
   d4bde:	4ba0      	ldr	r3, [pc, #640]	; (d4e60 <_Z19get_compass_headingv+0x380>)
   d4be0:	f007 ffb4 	bl	dcb4c <__aeabi_dmul>
   d4be4:	f008 faaa 	bl	dd13c <__aeabi_d2f>
   d4be8:	4b9e      	ldr	r3, [pc, #632]	; (d4e64 <_Z19get_compass_headingv+0x384>)
phiFnew=.95*phiFold+.05*phiM;
   d4bea:	499f      	ldr	r1, [pc, #636]	; (d4e68 <_Z19get_compass_headingv+0x388>)
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4bec:	6018      	str	r0, [r3, #0]
   d4bee:	4606      	mov	r6, r0
phiFnew=.95*phiFold+.05*phiM;
   d4bf0:	6808      	ldr	r0, [r1, #0]
   d4bf2:	f007 ff53 	bl	dca9c <__aeabi_f2d>
   d4bf6:	a390      	add	r3, pc, #576	; (adr r3, d4e38 <_Z19get_compass_headingv+0x358>)
   d4bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bfc:	f007 ffa6 	bl	dcb4c <__aeabi_dmul>
   d4c00:	4604      	mov	r4, r0
   d4c02:	4630      	mov	r0, r6
   d4c04:	460d      	mov	r5, r1
   d4c06:	f007 ff49 	bl	dca9c <__aeabi_f2d>
   d4c0a:	a38d      	add	r3, pc, #564	; (adr r3, d4e40 <_Z19get_compass_headingv+0x360>)
   d4c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c10:	f007 ff9c 	bl	dcb4c <__aeabi_dmul>
   d4c14:	4602      	mov	r2, r0
   d4c16:	460b      	mov	r3, r1
   d4c18:	4620      	mov	r0, r4
   d4c1a:	4629      	mov	r1, r5
   d4c1c:	f007 fde0 	bl	dc7e0 <__adddf3>
   d4c20:	f008 fa8c 	bl	dd13c <__aeabi_d2f>
   d4c24:	f8cb 0000 	str.w	r0, [fp]
thetaFnew=.95*thetaFold+.05*thetaM;
   d4c28:	4890      	ldr	r0, [pc, #576]	; (d4e6c <_Z19get_compass_headingv+0x38c>)
   d4c2a:	6800      	ldr	r0, [r0, #0]
   d4c2c:	f007 ff36 	bl	dca9c <__aeabi_f2d>
   d4c30:	a381      	add	r3, pc, #516	; (adr r3, d4e38 <_Z19get_compass_headingv+0x358>)
   d4c32:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c36:	f007 ff89 	bl	dcb4c <__aeabi_dmul>
   d4c3a:	4604      	mov	r4, r0
   d4c3c:	6838      	ldr	r0, [r7, #0]
   d4c3e:	460d      	mov	r5, r1
   d4c40:	f007 ff2c 	bl	dca9c <__aeabi_f2d>
   d4c44:	a37e      	add	r3, pc, #504	; (adr r3, d4e40 <_Z19get_compass_headingv+0x360>)
   d4c46:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c4a:	f007 ff7f 	bl	dcb4c <__aeabi_dmul>
   d4c4e:	4602      	mov	r2, r0
   d4c50:	460b      	mov	r3, r1
   d4c52:	4620      	mov	r0, r4
   d4c54:	4629      	mov	r1, r5
   d4c56:	f007 fdc3 	bl	dc7e0 <__adddf3>
   d4c5a:	f008 fa6f 	bl	dd13c <__aeabi_d2f>
dt=(millis()-millisOld)/1000.;
   d4c5e:	4d84      	ldr	r5, [pc, #528]	; (d4e70 <_Z19get_compass_headingv+0x390>)
thetaFnew=.95*thetaFold+.05*thetaM;
   d4c60:	f8ca 0000 	str.w	r0, [sl]
   d4c64:	f003 fae0 	bl	d8228 <HAL_Timer_Get_Milli_Seconds>
dt=(millis()-millisOld)/1000.;
   d4c68:	682b      	ldr	r3, [r5, #0]
   d4c6a:	4c82      	ldr	r4, [pc, #520]	; (d4e74 <_Z19get_compass_headingv+0x394>)
   d4c6c:	1ac0      	subs	r0, r0, r3
   d4c6e:	f007 fef3 	bl	dca58 <__aeabi_ui2d>
   d4c72:	4b81      	ldr	r3, [pc, #516]	; (d4e78 <_Z19get_compass_headingv+0x398>)
   d4c74:	2200      	movs	r2, #0
   d4c76:	f008 f893 	bl	dcda0 <__aeabi_ddiv>
   d4c7a:	f008 fa5f 	bl	dd13c <__aeabi_d2f>
   d4c7e:	6020      	str	r0, [r4, #0]
   d4c80:	f003 fad2 	bl	d8228 <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
   d4c84:	6028      	str	r0, [r5, #0]
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   d4c86:	6820      	ldr	r0, [r4, #0]
   d4c88:	f007 ff08 	bl	dca9c <__aeabi_f2d>
   d4c8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   d4c90:	4604      	mov	r4, r0
   d4c92:	460d      	mov	r5, r1
   d4c94:	f007 ff5a 	bl	dcb4c <__aeabi_dmul>
   d4c98:	460f      	mov	r7, r1
   d4c9a:	4978      	ldr	r1, [pc, #480]	; (d4e7c <_Z19get_compass_headingv+0x39c>)
   d4c9c:	4606      	mov	r6, r0
   d4c9e:	6808      	ldr	r0, [r1, #0]
   d4ca0:	f007 fefc 	bl	dca9c <__aeabi_f2d>
   d4ca4:	4632      	mov	r2, r6
   d4ca6:	463b      	mov	r3, r7
   d4ca8:	f007 fd9a 	bl	dc7e0 <__adddf3>
   d4cac:	a362      	add	r3, pc, #392	; (adr r3, d4e38 <_Z19get_compass_headingv+0x358>)
   d4cae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4cb2:	f007 ff4b 	bl	dcb4c <__aeabi_dmul>
   d4cb6:	4b67      	ldr	r3, [pc, #412]	; (d4e54 <_Z19get_compass_headingv+0x374>)
   d4cb8:	4680      	mov	r8, r0
   d4cba:	6818      	ldr	r0, [r3, #0]
   d4cbc:	4689      	mov	r9, r1
   d4cbe:	f007 feed 	bl	dca9c <__aeabi_f2d>
   d4cc2:	a35f      	add	r3, pc, #380	; (adr r3, d4e40 <_Z19get_compass_headingv+0x360>)
   d4cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4cc8:	f007 ff40 	bl	dcb4c <__aeabi_dmul>
   d4ccc:	4602      	mov	r2, r0
   d4cce:	460b      	mov	r3, r1
   d4cd0:	4640      	mov	r0, r8
   d4cd2:	4649      	mov	r1, r9
   d4cd4:	f007 fd84 	bl	dc7e0 <__adddf3>
   d4cd8:	f008 fa30 	bl	dd13c <__aeabi_d2f>
   d4cdc:	4967      	ldr	r1, [pc, #412]	; (d4e7c <_Z19get_compass_headingv+0x39c>)
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d4cde:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   d4ce2:	ee08 0a90 	vmov	s17, r0
   d4ce6:	6008      	str	r0, [r1, #0]
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d4ce8:	4620      	mov	r0, r4
   d4cea:	4629      	mov	r1, r5
   d4cec:	f007 ff2e 	bl	dcb4c <__aeabi_dmul>
   d4cf0:	4604      	mov	r4, r0
   d4cf2:	4863      	ldr	r0, [pc, #396]	; (d4e80 <_Z19get_compass_headingv+0x3a0>)
   d4cf4:	460d      	mov	r5, r1
   d4cf6:	6800      	ldr	r0, [r0, #0]
   d4cf8:	f007 fed0 	bl	dca9c <__aeabi_f2d>
   d4cfc:	4622      	mov	r2, r4
   d4cfe:	462b      	mov	r3, r5
   d4d00:	f007 fd6c 	bl	dc7dc <__aeabi_dsub>
   d4d04:	a34c      	add	r3, pc, #304	; (adr r3, d4e38 <_Z19get_compass_headingv+0x358>)
   d4d06:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d0a:	f007 ff1f 	bl	dcb4c <__aeabi_dmul>
   d4d0e:	4a55      	ldr	r2, [pc, #340]	; (d4e64 <_Z19get_compass_headingv+0x384>)
   d4d10:	4680      	mov	r8, r0
   d4d12:	6810      	ldr	r0, [r2, #0]
   d4d14:	4689      	mov	r9, r1
   d4d16:	f007 fec1 	bl	dca9c <__aeabi_f2d>
   d4d1a:	a349      	add	r3, pc, #292	; (adr r3, d4e40 <_Z19get_compass_headingv+0x360>)
   d4d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d20:	f007 ff14 	bl	dcb4c <__aeabi_dmul>
   d4d24:	4602      	mov	r2, r0
   d4d26:	460b      	mov	r3, r1
   d4d28:	4640      	mov	r0, r8
   d4d2a:	4649      	mov	r1, r9
   d4d2c:	f007 fd58 	bl	dc7e0 <__adddf3>
   d4d30:	f008 fa04 	bl	dd13c <__aeabi_d2f>
thetaG=thetaG+gyr.y()*dt;
   d4d34:	4953      	ldr	r1, [pc, #332]	; (d4e84 <_Z19get_compass_headingv+0x3a4>)
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d4d36:	ee08 0a10 	vmov	s16, r0
   d4d3a:	4851      	ldr	r0, [pc, #324]	; (d4e80 <_Z19get_compass_headingv+0x3a0>)
   d4d3c:	ed80 8a00 	vstr	s16, [r0]
thetaG=thetaG+gyr.y()*dt;
   d4d40:	6808      	ldr	r0, [r1, #0]
   d4d42:	f007 feab 	bl	dca9c <__aeabi_f2d>
   d4d46:	4632      	mov	r2, r6
   d4d48:	463b      	mov	r3, r7
   d4d4a:	f007 fd49 	bl	dc7e0 <__adddf3>
   d4d4e:	f008 f9f5 	bl	dd13c <__aeabi_d2f>
phiG=phiG-gyr.x()*dt;
   d4d52:	4f4d      	ldr	r7, [pc, #308]	; (d4e88 <_Z19get_compass_headingv+0x3a8>)
thetaG=thetaG+gyr.y()*dt;
   d4d54:	4e4b      	ldr	r6, [pc, #300]	; (d4e84 <_Z19get_compass_headingv+0x3a4>)
   d4d56:	6030      	str	r0, [r6, #0]
phiG=phiG-gyr.x()*dt;
   d4d58:	6838      	ldr	r0, [r7, #0]
   d4d5a:	f007 fe9f 	bl	dca9c <__aeabi_f2d>
   d4d5e:	4622      	mov	r2, r4
   d4d60:	462b      	mov	r3, r5
   d4d62:	f007 fd3b 	bl	dc7dc <__aeabi_dsub>
   d4d66:	f008 f9e9 	bl	dd13c <__aeabi_d2f>
phiRad=phi/360*(2*3.14);
   d4d6a:	eec8 7a09 	vdiv.f32	s15, s16, s18
phiG=phiG-gyr.x()*dt;
   d4d6e:	6038      	str	r0, [r7, #0]
phiRad=phi/360*(2*3.14);
   d4d70:	ee17 0a90 	vmov	r0, s15
   d4d74:	f007 fe92 	bl	dca9c <__aeabi_f2d>
   d4d78:	a333      	add	r3, pc, #204	; (adr r3, d4e48 <_Z19get_compass_headingv+0x368>)
   d4d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d7e:	f007 fee5 	bl	dcb4c <__aeabi_dmul>
   d4d82:	f008 f9db 	bl	dd13c <__aeabi_d2f>
thetaRad=theta/360*(2*3.14);
   d4d86:	eec8 7a89 	vdiv.f32	s15, s17, s18
phiRad=phi/360*(2*3.14);
   d4d8a:	4b40      	ldr	r3, [pc, #256]	; (d4e8c <_Z19get_compass_headingv+0x3ac>)
   d4d8c:	6018      	str	r0, [r3, #0]
   d4d8e:	ee08 0a10 	vmov	s16, r0
thetaRad=theta/360*(2*3.14);
   d4d92:	ee17 0a90 	vmov	r0, s15
   d4d96:	f007 fe81 	bl	dca9c <__aeabi_f2d>
   d4d9a:	a32b      	add	r3, pc, #172	; (adr r3, d4e48 <_Z19get_compass_headingv+0x368>)
   d4d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4da0:	f007 fed4 	bl	dcb4c <__aeabi_dmul>
   d4da4:	f008 f9ca 	bl	dd13c <__aeabi_d2f>
   d4da8:	4b39      	ldr	r3, [pc, #228]	; (d4e90 <_Z19get_compass_headingv+0x3b0>)
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
   d4daa:	ee00 0a10 	vmov	s0, r0
   d4dae:	6018      	str	r0, [r3, #0]
   d4db0:	ee08 0a90 	vmov	s17, r0
   d4db4:	f005 f89e 	bl	d9ef4 <cosf>
Xm=mag.x()*cos(thetaRad)-mag.y()*sin(phiRad)*sin(thetaRad)+mag.z()*cos(phiRad)*sin(thetaRad);
   d4db8:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   d4dbc:	ee10 8a10 	vmov	r8, s0
   d4dc0:	eeb0 aa47 	vmov.f32	s20, s14
   d4dc4:	eef0 aa67 	vmov.f32	s21, s15
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
   d4dc8:	eeb0 0a48 	vmov.f32	s0, s16
   d4dcc:	f005 f8da 	bl	d9f84 <sinf>
   d4dd0:	ee10 0a10 	vmov	r0, s0
   d4dd4:	f007 fe62 	bl	dca9c <__aeabi_f2d>
   d4dd8:	eeb0 0a68 	vmov.f32	s0, s17
   d4ddc:	ec41 0b1b 	vmov	d11, r0, r1
   d4de0:	f005 f8d0 	bl	d9f84 <sinf>
   d4de4:	ee10 0a10 	vmov	r0, s0
   d4de8:	f007 fe58 	bl	dca9c <__aeabi_f2d>
   d4dec:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
  { return __builtin_cosf(__x); }
   d4df0:	eeb0 0a48 	vmov.f32	s0, s16
   d4df4:	eeb0 ca47 	vmov.f32	s24, s14
   d4df8:	eef0 ca67 	vmov.f32	s25, s15
   d4dfc:	4606      	mov	r6, r0
   d4dfe:	460f      	mov	r7, r1
   d4e00:	f005 f878 	bl	d9ef4 <cosf>
   d4e04:	ee10 0a10 	vmov	r0, s0
   d4e08:	f007 fe48 	bl	dca9c <__aeabi_f2d>
   d4e0c:	4604      	mov	r4, r0
   d4e0e:	4640      	mov	r0, r8
   d4e10:	460d      	mov	r5, r1
   d4e12:	f007 fe43 	bl	dca9c <__aeabi_f2d>
   d4e16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d4e1a:	f007 fe97 	bl	dcb4c <__aeabi_dmul>
   d4e1e:	ec53 2b1b 	vmov	r2, r3, d11
   d4e22:	4680      	mov	r8, r0
   d4e24:	4689      	mov	r9, r1
   d4e26:	e039      	b.n	d4e9c <_Z19get_compass_headingv+0x3bc>
   d4e28:	9999999a 	.word	0x9999999a
   d4e2c:	40239999 	.word	0x40239999
   d4e30:	54524550 	.word	0x54524550
   d4e34:	400921fb 	.word	0x400921fb
   d4e38:	66666666 	.word	0x66666666
   d4e3c:	3fee6666 	.word	0x3fee6666
   d4e40:	9999999a 	.word	0x9999999a
   d4e44:	3fa99999 	.word	0x3fa99999
   d4e48:	51eb851f 	.word	0x51eb851f
   d4e4c:	40191eb8 	.word	0x40191eb8
   d4e50:	2003e49c 	.word	0x2003e49c
   d4e54:	2003e564 	.word	0x2003e564
   d4e58:	43b40000 	.word	0x43b40000
   d4e5c:	3fe00000 	.word	0x3fe00000
   d4e60:	40768000 	.word	0x40768000
   d4e64:	2003e548 	.word	0x2003e548
   d4e68:	2003e540 	.word	0x2003e540
   d4e6c:	2003e55c 	.word	0x2003e55c
   d4e70:	2003e534 	.word	0x2003e534
   d4e74:	2003e514 	.word	0x2003e514
   d4e78:	408f4000 	.word	0x408f4000
   d4e7c:	2003e554 	.word	0x2003e554
   d4e80:	2003e538 	.word	0x2003e538
   d4e84:	2003e560 	.word	0x2003e560
   d4e88:	2003e544 	.word	0x2003e544
   d4e8c:	2003e54c 	.word	0x2003e54c
   d4e90:	2003e568 	.word	0x2003e568
   d4e94:	2003e53c 	.word	0x2003e53c
   d4e98:	2003e558 	.word	0x2003e558
   d4e9c:	ec51 0b1a 	vmov	r0, r1, d10
   d4ea0:	f007 fe54 	bl	dcb4c <__aeabi_dmul>
   d4ea4:	4632      	mov	r2, r6
   d4ea6:	463b      	mov	r3, r7
   d4ea8:	f007 fe50 	bl	dcb4c <__aeabi_dmul>
   d4eac:	4602      	mov	r2, r0
   d4eae:	460b      	mov	r3, r1
   d4eb0:	4640      	mov	r0, r8
   d4eb2:	4649      	mov	r1, r9
   d4eb4:	f007 fc92 	bl	dc7dc <__aeabi_dsub>
   d4eb8:	4622      	mov	r2, r4
   d4eba:	4680      	mov	r8, r0
   d4ebc:	4689      	mov	r9, r1
   d4ebe:	462b      	mov	r3, r5
   d4ec0:	ec51 0b1c 	vmov	r0, r1, d12
   d4ec4:	f007 fe42 	bl	dcb4c <__aeabi_dmul>
   d4ec8:	4632      	mov	r2, r6
   d4eca:	463b      	mov	r3, r7
   d4ecc:	f007 fe3e 	bl	dcb4c <__aeabi_dmul>
   d4ed0:	4602      	mov	r2, r0
   d4ed2:	460b      	mov	r3, r1
   d4ed4:	4640      	mov	r0, r8
   d4ed6:	4649      	mov	r1, r9
   d4ed8:	f007 fc82 	bl	dc7e0 <__adddf3>
   d4edc:	f008 f92e 	bl	dd13c <__aeabi_d2f>
   d4ee0:	4b9b      	ldr	r3, [pc, #620]	; (d5150 <_Z19get_compass_headingv+0x670>)
Serial.print(thetaG);
   d4ee2:	4e9c      	ldr	r6, [pc, #624]	; (d5154 <_Z19get_compass_headingv+0x674>)
Xm=mag.x()*cos(thetaRad)-mag.y()*sin(phiRad)*sin(thetaRad)+mag.z()*cos(phiRad)*sin(thetaRad);
   d4ee4:	6018      	str	r0, [r3, #0]
   d4ee6:	ee08 0a10 	vmov	s16, r0
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
   d4eea:	4622      	mov	r2, r4
   d4eec:	462b      	mov	r3, r5
   d4eee:	ec51 0b1a 	vmov	r0, r1, d10
   d4ef2:	f007 fe2b 	bl	dcb4c <__aeabi_dmul>
   d4ef6:	ec53 2b1c 	vmov	r2, r3, d12
   d4efa:	4604      	mov	r4, r0
   d4efc:	460d      	mov	r5, r1
   d4efe:	ec51 0b1b 	vmov	r0, r1, d11
   d4f02:	f007 fe23 	bl	dcb4c <__aeabi_dmul>
   d4f06:	4602      	mov	r2, r0
   d4f08:	460b      	mov	r3, r1
   d4f0a:	4620      	mov	r0, r4
   d4f0c:	4629      	mov	r1, r5
   d4f0e:	f007 fc67 	bl	dc7e0 <__adddf3>
   d4f12:	f008 f913 	bl	dd13c <__aeabi_d2f>
   d4f16:	4b90      	ldr	r3, [pc, #576]	; (d5158 <_Z19get_compass_headingv+0x678>)
psi=atan2(Ym,Xm)/(2*3.14)*360;
   d4f18:	4c90      	ldr	r4, [pc, #576]	; (d515c <_Z19get_compass_headingv+0x67c>)
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
   d4f1a:	6018      	str	r0, [r3, #0]
  { return __builtin_atan2f(__y, __x); }
   d4f1c:	eef0 0a48 	vmov.f32	s1, s16
   d4f20:	ee00 0a10 	vmov	s0, r0
   d4f24:	f005 fa32 	bl	da38c <atan2f>
   d4f28:	ee10 0a10 	vmov	r0, s0
psi=atan2(Ym,Xm)/(2*3.14)*360;
   d4f2c:	f007 fdb6 	bl	dca9c <__aeabi_f2d>
   d4f30:	a383      	add	r3, pc, #524	; (adr r3, d5140 <_Z19get_compass_headingv+0x660>)
   d4f32:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f36:	f007 ff33 	bl	dcda0 <__aeabi_ddiv>
   d4f3a:	4b89      	ldr	r3, [pc, #548]	; (d5160 <_Z19get_compass_headingv+0x680>)
Serial.print(phiG);
   d4f3c:	4f89      	ldr	r7, [pc, #548]	; (d5164 <_Z19get_compass_headingv+0x684>)
psi=atan2(Ym,Xm)/(2*3.14)*360;
   d4f3e:	2200      	movs	r2, #0
   d4f40:	f007 fe04 	bl	dcb4c <__aeabi_dmul>
   d4f44:	f008 f8fa 	bl	dd13c <__aeabi_d2f>
   d4f48:	6020      	str	r0, [r4, #0]
Serial.print(acc.x()/9.8);
   d4f4a:	f004 fc8b 	bl	d9864 <_Z16_fetch_usbserialv>
   d4f4e:	a37e      	add	r3, pc, #504	; (adr r3, d5148 <_Z19get_compass_headingv+0x668>)
   d4f50:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f54:	4605      	mov	r5, r0
   d4f56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d4f5a:	f007 ff21 	bl	dcda0 <__aeabi_ddiv>
   d4f5e:	ec41 0b10 	vmov	d0, r0, r1
   d4f62:	2102      	movs	r1, #2
   d4f64:	4628      	mov	r0, r5
   d4f66:	f003 ffa4 	bl	d8eb2 <_ZN5Print5printEdi>
Serial.print(",");
   d4f6a:	f004 fc7b 	bl	d9864 <_Z16_fetch_usbserialv>
   d4f6e:	497e      	ldr	r1, [pc, #504]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d4f70:	f003 fe56 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(acc.y()/9.8);
   d4f74:	f004 fc76 	bl	d9864 <_Z16_fetch_usbserialv>
   d4f78:	a373      	add	r3, pc, #460	; (adr r3, d5148 <_Z19get_compass_headingv+0x668>)
   d4f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f7e:	4605      	mov	r5, r0
   d4f80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d4f84:	f007 ff0c 	bl	dcda0 <__aeabi_ddiv>
   d4f88:	ec41 0b10 	vmov	d0, r0, r1
   d4f8c:	2102      	movs	r1, #2
   d4f8e:	4628      	mov	r0, r5
   d4f90:	f003 ff8f 	bl	d8eb2 <_ZN5Print5printEdi>
Serial.print(",");
   d4f94:	f004 fc66 	bl	d9864 <_Z16_fetch_usbserialv>
   d4f98:	4973      	ldr	r1, [pc, #460]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d4f9a:	f003 fe41 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(acc.z()/9.8);
   d4f9e:	f004 fc61 	bl	d9864 <_Z16_fetch_usbserialv>
   d4fa2:	a369      	add	r3, pc, #420	; (adr r3, d5148 <_Z19get_compass_headingv+0x668>)
   d4fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fa8:	4605      	mov	r5, r0
   d4faa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d4fae:	f007 fef7 	bl	dcda0 <__aeabi_ddiv>
   d4fb2:	ec41 0b10 	vmov	d0, r0, r1
   d4fb6:	2102      	movs	r1, #2
   d4fb8:	4628      	mov	r0, r5
   d4fba:	f003 ff7a 	bl	d8eb2 <_ZN5Print5printEdi>
Serial.print(",");
   d4fbe:	f004 fc51 	bl	d9864 <_Z16_fetch_usbserialv>
   d4fc2:	4969      	ldr	r1, [pc, #420]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d4fc4:	f003 fe2c 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(accel);
   d4fc8:	f004 fc4c 	bl	d9864 <_Z16_fetch_usbserialv>
   d4fcc:	220a      	movs	r2, #10
   d4fce:	f89d 100e 	ldrb.w	r1, [sp, #14]
   d4fd2:	f7ff fcbf 	bl	d4954 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d4fd6:	f004 fc45 	bl	d9864 <_Z16_fetch_usbserialv>
   d4fda:	4963      	ldr	r1, [pc, #396]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d4fdc:	f003 fe20 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(gyro);
   d4fe0:	f004 fc40 	bl	d9864 <_Z16_fetch_usbserialv>
   d4fe4:	220a      	movs	r2, #10
   d4fe6:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d4fea:	f7ff fcb3 	bl	d4954 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d4fee:	f004 fc39 	bl	d9864 <_Z16_fetch_usbserialv>
   d4ff2:	495d      	ldr	r1, [pc, #372]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d4ff4:	f003 fe14 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(mg);
   d4ff8:	f004 fc34 	bl	d9864 <_Z16_fetch_usbserialv>
   d4ffc:	220a      	movs	r2, #10
   d4ffe:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d5002:	f7ff fca7 	bl	d4954 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d5006:	f004 fc2d 	bl	d9864 <_Z16_fetch_usbserialv>
   d500a:	4957      	ldr	r1, [pc, #348]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d500c:	f003 fe08 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(system);
   d5010:	f004 fc28 	bl	d9864 <_Z16_fetch_usbserialv>
   d5014:	220a      	movs	r2, #10
   d5016:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d501a:	f7ff fc9b 	bl	d4954 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d501e:	f004 fc21 	bl	d9864 <_Z16_fetch_usbserialv>
   d5022:	4951      	ldr	r1, [pc, #324]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d5024:	f003 fdfc 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(thetaM);
   d5028:	f004 fc1c 	bl	d9864 <_Z16_fetch_usbserialv>
   d502c:	4b4f      	ldr	r3, [pc, #316]	; (d516c <_Z19get_compass_headingv+0x68c>)
   d502e:	2102      	movs	r1, #2
   d5030:	ed93 0a00 	vldr	s0, [r3]
   d5034:	f003 ff2e 	bl	d8e94 <_ZN5Print5printEfi>
Serial.print(",");
   d5038:	f004 fc14 	bl	d9864 <_Z16_fetch_usbserialv>
   d503c:	494a      	ldr	r1, [pc, #296]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d503e:	f003 fdef 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(phiM);
   d5042:	f004 fc0f 	bl	d9864 <_Z16_fetch_usbserialv>
   d5046:	4a4a      	ldr	r2, [pc, #296]	; (d5170 <_Z19get_compass_headingv+0x690>)
   d5048:	2102      	movs	r1, #2
   d504a:	ed92 0a00 	vldr	s0, [r2]
   d504e:	f003 ff21 	bl	d8e94 <_ZN5Print5printEfi>
Serial.print(",");
   d5052:	f004 fc07 	bl	d9864 <_Z16_fetch_usbserialv>
   d5056:	4944      	ldr	r1, [pc, #272]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d5058:	f003 fde2 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(thetaFnew);
   d505c:	f004 fc02 	bl	d9864 <_Z16_fetch_usbserialv>
   d5060:	ed9a 0a00 	vldr	s0, [sl]
   d5064:	2102      	movs	r1, #2
   d5066:	f003 ff15 	bl	d8e94 <_ZN5Print5printEfi>
Serial.print(",");
   d506a:	f004 fbfb 	bl	d9864 <_Z16_fetch_usbserialv>
   d506e:	493e      	ldr	r1, [pc, #248]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d5070:	f003 fdd6 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(phiFnew);
   d5074:	f004 fbf6 	bl	d9864 <_Z16_fetch_usbserialv>
   d5078:	ed9b 0a00 	vldr	s0, [fp]
   d507c:	2102      	movs	r1, #2
   d507e:	f003 ff09 	bl	d8e94 <_ZN5Print5printEfi>
Serial.print(",");
   d5082:	f004 fbef 	bl	d9864 <_Z16_fetch_usbserialv>
   d5086:	4938      	ldr	r1, [pc, #224]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d5088:	f003 fdca 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(thetaG);
   d508c:	f004 fbea 	bl	d9864 <_Z16_fetch_usbserialv>
   d5090:	ed96 0a00 	vldr	s0, [r6]
   d5094:	2102      	movs	r1, #2
   d5096:	f003 fefd 	bl	d8e94 <_ZN5Print5printEfi>
Serial.print(",");
   d509a:	f004 fbe3 	bl	d9864 <_Z16_fetch_usbserialv>
   d509e:	4932      	ldr	r1, [pc, #200]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d50a0:	f003 fdbe 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(phiG);
   d50a4:	f004 fbde 	bl	d9864 <_Z16_fetch_usbserialv>
   d50a8:	ed97 0a00 	vldr	s0, [r7]
   d50ac:	2102      	movs	r1, #2
   d50ae:	f003 fef1 	bl	d8e94 <_ZN5Print5printEfi>
Serial.print(",");
   d50b2:	f004 fbd7 	bl	d9864 <_Z16_fetch_usbserialv>
   d50b6:	492c      	ldr	r1, [pc, #176]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d50b8:	f003 fdb2 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(theta);
   d50bc:	f004 fbd2 	bl	d9864 <_Z16_fetch_usbserialv>
   d50c0:	4b2c      	ldr	r3, [pc, #176]	; (d5174 <_Z19get_compass_headingv+0x694>)
   d50c2:	2102      	movs	r1, #2
   d50c4:	ed93 0a00 	vldr	s0, [r3]
   d50c8:	f003 fee4 	bl	d8e94 <_ZN5Print5printEfi>
Serial.print(",");
   d50cc:	f004 fbca 	bl	d9864 <_Z16_fetch_usbserialv>
   d50d0:	4925      	ldr	r1, [pc, #148]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d50d2:	f003 fda5 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(phi);
   d50d6:	f004 fbc5 	bl	d9864 <_Z16_fetch_usbserialv>
   d50da:	4b27      	ldr	r3, [pc, #156]	; (d5178 <_Z19get_compass_headingv+0x698>)
   d50dc:	2102      	movs	r1, #2
   d50de:	ed93 0a00 	vldr	s0, [r3]
   d50e2:	f003 fed7 	bl	d8e94 <_ZN5Print5printEfi>
Serial.print(",");
   d50e6:	f004 fbbd 	bl	d9864 <_Z16_fetch_usbserialv>
   d50ea:	491f      	ldr	r1, [pc, #124]	; (d5168 <_Z19get_compass_headingv+0x688>)
   d50ec:	f003 fd98 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.println(psi);
   d50f0:	f004 fbb8 	bl	d9864 <_Z16_fetch_usbserialv>
   d50f4:	ed94 0a00 	vldr	s0, [r4]
   d50f8:	2102      	movs	r1, #2
   d50fa:	f003 fee8 	bl	d8ece <_ZN5Print7printlnEfi>
 psi += 180;
   d50fe:	edd4 7a00 	vldr	s15, [r4]
   d5102:	ed9f 7a1e 	vldr	s14, [pc, #120]	; d517c <_Z19get_compass_headingv+0x69c>
phiFold=phiFnew;
   d5106:	491e      	ldr	r1, [pc, #120]	; (d5180 <_Z19get_compass_headingv+0x6a0>)
   d5108:	f8db 3000 	ldr.w	r3, [fp]
thetaFold=thetaFnew;
   d510c:	481d      	ldr	r0, [pc, #116]	; (d5184 <_Z19get_compass_headingv+0x6a4>)
phiFold=phiFnew;
   d510e:	600b      	str	r3, [r1, #0]
 psi += 180;
   d5110:	ee77 7a87 	vadd.f32	s15, s15, s14
thetaFold=thetaFnew;
   d5114:	f8da 3000 	ldr.w	r3, [sl]
   d5118:	6003      	str	r3, [r0, #0]
 if(psi >= 360) {
   d511a:	eef4 7ac9 	vcmpe.f32	s15, s18
   d511e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   psi = psi -360;
   d5122:	bfa8      	it	ge
   d5124:	ee77 7ac9 	vsubge.f32	s15, s15, s18
   d5128:	edc4 7a00 	vstr	s15, [r4]
}
   d512c:	ed94 0a00 	vldr	s0, [r4]
   d5130:	b017      	add	sp, #92	; 0x5c
   d5132:	ecbd 8b0a 	vpop	{d8-d12}
   d5136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d513a:	bf00      	nop
   d513c:	f3af 8000 	nop.w
   d5140:	51eb851f 	.word	0x51eb851f
   d5144:	40191eb8 	.word	0x40191eb8
   d5148:	9999999a 	.word	0x9999999a
   d514c:	40239999 	.word	0x40239999
   d5150:	2003e44c 	.word	0x2003e44c
   d5154:	2003e560 	.word	0x2003e560
   d5158:	2003e450 	.word	0x2003e450
   d515c:	2003e550 	.word	0x2003e550
   d5160:	40768000 	.word	0x40768000
   d5164:	2003e544 	.word	0x2003e544
   d5168:	000ddc4d 	.word	0x000ddc4d
   d516c:	2003e564 	.word	0x2003e564
   d5170:	2003e548 	.word	0x2003e548
   d5174:	2003e554 	.word	0x2003e554
   d5178:	2003e538 	.word	0x2003e538
   d517c:	43340000 	.word	0x43340000
   d5180:	2003e540 	.word	0x2003e540
   d5184:	2003e55c 	.word	0x2003e55c

000d5188 <_GLOBAL__sub_I_i2ceeprom>:
}
   d5188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d518a:	4b13      	ldr	r3, [pc, #76]	; (d51d8 <_GLOBAL__sub_I_i2ceeprom+0x50>)
Adafruit_EEPROM_I2C i2ceeprom;
   d518c:	4813      	ldr	r0, [pc, #76]	; (d51dc <_GLOBAL__sub_I_i2ceeprom+0x54>)
   d518e:	2200      	movs	r2, #0
   d5190:	701a      	strb	r2, [r3, #0]
   d5192:	f002 fe6b 	bl	d7e6c <_ZN19Adafruit_EEPROM_I2CC1Ev>
Adafruit_INA219 ina219;
   d5196:	2140      	movs	r1, #64	; 0x40
   d5198:	4811      	ldr	r0, [pc, #68]	; (d51e0 <_GLOBAL__sub_I_i2ceeprom+0x58>)
   d519a:	f002 feb7 	bl	d7f0c <_ZN15Adafruit_INA219C1Eh>
Adafruit_BME280 bme; // I2C
   d519e:	4811      	ldr	r0, [pc, #68]	; (d51e4 <_GLOBAL__sub_I_i2ceeprom+0x5c>)
   d51a0:	f000 fcd0 	bl	d5b44 <_ZN15Adafruit_BME280C1Ev>
Adafruit_SH1107 display = Adafruit_SH1107(64, 128, &Wire);
   d51a4:	f004 fe7a 	bl	d9e9c <_Z19__fetch_global_Wirev>
   d51a8:	4a0f      	ldr	r2, [pc, #60]	; (d51e8 <_GLOBAL__sub_I_i2ceeprom+0x60>)
   d51aa:	4910      	ldr	r1, [pc, #64]	; (d51ec <_GLOBAL__sub_I_i2ceeprom+0x64>)
   d51ac:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d51b0:	f04f 32ff 	mov.w	r2, #4294967295
   d51b4:	4603      	mov	r3, r0
   d51b6:	9200      	str	r2, [sp, #0]
   d51b8:	2140      	movs	r1, #64	; 0x40
   d51ba:	2280      	movs	r2, #128	; 0x80
   d51bc:	480c      	ldr	r0, [pc, #48]	; (d51f0 <_GLOBAL__sub_I_i2ceeprom+0x68>)
   d51be:	f002 fdcf 	bl	d7d60 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d51c2:	f004 fe6b 	bl	d9e9c <_Z19__fetch_global_Wirev>
   d51c6:	4603      	mov	r3, r0
   d51c8:	480a      	ldr	r0, [pc, #40]	; (d51f4 <_GLOBAL__sub_I_i2ceeprom+0x6c>)
   d51ca:	2228      	movs	r2, #40	; 0x28
   d51cc:	2137      	movs	r1, #55	; 0x37
}
   d51ce:	b005      	add	sp, #20
   d51d0:	f85d eb04 	ldr.w	lr, [sp], #4
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d51d4:	f001 bc5a 	b.w	d6a8c <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
   d51d8:	2003e454 	.word	0x2003e454
   d51dc:	2003e518 	.word	0x2003e518
   d51e0:	2003e520 	.word	0x2003e520
   d51e4:	2003e458 	.word	0x2003e458
   d51e8:	00061a80 	.word	0x00061a80
   d51ec:	000186a0 	.word	0x000186a0
   d51f0:	2003e4bc 	.word	0x2003e4bc
   d51f4:	2003e49c 	.word	0x2003e49c

000d51f8 <_Z13displayValuesv>:
void displayValues() {
   d51f8:	b538      	push	{r3, r4, r5, lr}
    display.clearDisplay();
   d51fa:	4c37      	ldr	r4, [pc, #220]	; (d52d8 <_Z13displayValuesv+0xe0>)
    display.print(bme.readTemperature()*1.8F + 32.);
   d51fc:	4d37      	ldr	r5, [pc, #220]	; (d52dc <_Z13displayValuesv+0xe4>)
    display.clearDisplay();
   d51fe:	4620      	mov	r0, r4
   d5200:	f002 f858 	bl	d72b4 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d5204:	4620      	mov	r0, r4
   d5206:	f002 fcc8 	bl	d7b9a <_ZN15Adafruit_SH110X7displayEv>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
   d520a:	2300      	movs	r3, #0
    display.print("Temp. = ");
   d520c:	4934      	ldr	r1, [pc, #208]	; (d52e0 <_Z13displayValuesv+0xe8>)
   d520e:	6123      	str	r3, [r4, #16]
   d5210:	4620      	mov	r0, r4
   d5212:	f003 fd05 	bl	d8c20 <_ZN5Print5printEPKc>
    display.print(bme.readTemperature()*1.8F + 32.);
   d5216:	4628      	mov	r0, r5
   d5218:	f000 fd68 	bl	d5cec <_ZN15Adafruit_BME28015readTemperatureEv>
   d521c:	eddf 7a31 	vldr	s15, [pc, #196]	; d52e4 <_Z13displayValuesv+0xec>
   d5220:	ee60 7a27 	vmul.f32	s15, s0, s15
   d5224:	ee17 0a90 	vmov	r0, s15
   d5228:	f007 fc38 	bl	dca9c <__aeabi_f2d>
   d522c:	4b2e      	ldr	r3, [pc, #184]	; (d52e8 <_Z13displayValuesv+0xf0>)
   d522e:	2200      	movs	r2, #0
   d5230:	f007 fad6 	bl	dc7e0 <__adddf3>
   d5234:	ec41 0b10 	vmov	d0, r0, r1
   d5238:	2102      	movs	r1, #2
   d523a:	4620      	mov	r0, r4
   d523c:	f003 fe39 	bl	d8eb2 <_ZN5Print5printEdi>
    display.println(" °F");
   d5240:	492a      	ldr	r1, [pc, #168]	; (d52ec <_Z13displayValuesv+0xf4>)
   d5242:	4620      	mov	r0, r4
   d5244:	f003 fd03 	bl	d8c4e <_ZN5Print7printlnEPKc>
    display.print("Press. = ");
   d5248:	4929      	ldr	r1, [pc, #164]	; (d52f0 <_Z13displayValuesv+0xf8>)
   d524a:	4620      	mov	r0, r4
   d524c:	f003 fce8 	bl	d8c20 <_ZN5Print5printEPKc>
    display.print(bme.readPressure() / 101325.0F * 760.0F);
   d5250:	4628      	mov	r0, r5
   d5252:	f000 fd79 	bl	d5d48 <_ZN15Adafruit_BME28012readPressureEv>
   d5256:	eddf 7a27 	vldr	s15, [pc, #156]	; d52f4 <_Z13displayValuesv+0xfc>
   d525a:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d525e:	2102      	movs	r1, #2
   d5260:	4620      	mov	r0, r4
   d5262:	ed9f 0a25 	vldr	s0, [pc, #148]	; d52f8 <_Z13displayValuesv+0x100>
   d5266:	ee27 0a00 	vmul.f32	s0, s14, s0
   d526a:	f003 fe13 	bl	d8e94 <_ZN5Print5printEfi>
    display.println(" mmHg");
   d526e:	4923      	ldr	r1, [pc, #140]	; (d52fc <_Z13displayValuesv+0x104>)
   d5270:	4620      	mov	r0, r4
   d5272:	f003 fcec 	bl	d8c4e <_ZN5Print7printlnEPKc>
    display.print("Altitude = ");
   d5276:	4922      	ldr	r1, [pc, #136]	; (d5300 <_Z13displayValuesv+0x108>)
   d5278:	4620      	mov	r0, r4
   d527a:	f003 fcd1 	bl	d8c20 <_ZN5Print5printEPKc>
    display.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d527e:	4628      	mov	r0, r5
   d5280:	ed9f 0a20 	vldr	s0, [pc, #128]	; d5304 <_Z13displayValuesv+0x10c>
   d5284:	f000 fe3c 	bl	d5f00 <_ZN15Adafruit_BME28012readAltitudeEf>
   d5288:	2102      	movs	r1, #2
   d528a:	4620      	mov	r0, r4
   d528c:	f003 fe02 	bl	d8e94 <_ZN5Print5printEfi>
    display.println(" m");
   d5290:	491d      	ldr	r1, [pc, #116]	; (d5308 <_Z13displayValuesv+0x110>)
   d5292:	4620      	mov	r0, r4
   d5294:	f003 fcdb 	bl	d8c4e <_ZN5Print7printlnEPKc>
    display.print("Humidity = ");
   d5298:	491c      	ldr	r1, [pc, #112]	; (d530c <_Z13displayValuesv+0x114>)
   d529a:	4620      	mov	r0, r4
   d529c:	f003 fcc0 	bl	d8c20 <_ZN5Print5printEPKc>
    display.print(bme.readHumidity());
   d52a0:	4628      	mov	r0, r5
   d52a2:	f000 fecd 	bl	d6040 <_ZN15Adafruit_BME28012readHumidityEv>
   d52a6:	2102      	movs	r1, #2
   d52a8:	4620      	mov	r0, r4
   d52aa:	f003 fdf3 	bl	d8e94 <_ZN5Print5printEfi>
    display.println(" %");
   d52ae:	4918      	ldr	r1, [pc, #96]	; (d5310 <_Z13displayValuesv+0x118>)
   d52b0:	4620      	mov	r0, r4
   d52b2:	f003 fccc 	bl	d8c4e <_ZN5Print7printlnEPKc>
    display.print("Compass heading");
   d52b6:	4917      	ldr	r1, [pc, #92]	; (d5314 <_Z13displayValuesv+0x11c>)
   d52b8:	4620      	mov	r0, r4
   d52ba:	f003 fcb1 	bl	d8c20 <_ZN5Print5printEPKc>
    display.print(compass_heading);
   d52be:	4b16      	ldr	r3, [pc, #88]	; (d5318 <_Z13displayValuesv+0x120>)
   d52c0:	4620      	mov	r0, r4
   d52c2:	ed93 0a00 	vldr	s0, [r3]
   d52c6:	2102      	movs	r1, #2
   d52c8:	f003 fde4 	bl	d8e94 <_ZN5Print5printEfi>
  display.display(); // actually display all of the above
   d52cc:	4620      	mov	r0, r4
  }
   d52ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.display(); // actually display all of the above
   d52d2:	f002 bc62 	b.w	d7b9a <_ZN15Adafruit_SH110X7displayEv>
   d52d6:	bf00      	nop
   d52d8:	2003e4bc 	.word	0x2003e4bc
   d52dc:	2003e458 	.word	0x2003e458
   d52e0:	000ddc4f 	.word	0x000ddc4f
   d52e4:	3fe66666 	.word	0x3fe66666
   d52e8:	40400000 	.word	0x40400000
   d52ec:	000ddc58 	.word	0x000ddc58
   d52f0:	000ddc5d 	.word	0x000ddc5d
   d52f4:	47c5e680 	.word	0x47c5e680
   d52f8:	443e0000 	.word	0x443e0000
   d52fc:	000dd9bc 	.word	0x000dd9bc
   d5300:	000dd9ca 	.word	0x000dd9ca
   d5304:	447d5000 	.word	0x447d5000
   d5308:	000dd9d6 	.word	0x000dd9d6
   d530c:	000dd9d9 	.word	0x000dd9d9
   d5310:	000dd9e5 	.word	0x000dd9e5
   d5314:	000ddc67 	.word	0x000ddc67
   d5318:	2003e4b4 	.word	0x2003e4b4

000d531c <loop>:
void loop(void) {
   d531c:	b510      	push	{r4, lr}
digitalWrite(vane_switch, HIGH);
   d531e:	4b96      	ldr	r3, [pc, #600]	; (d5578 <loop+0x25c>)
float vane_wind_direction = measure_wind_direction(WindSpeed);
   d5320:	4c96      	ldr	r4, [pc, #600]	; (d557c <loop+0x260>)
digitalWrite(vane_switch, HIGH);
   d5322:	7818      	ldrb	r0, [r3, #0]
void loop(void) {
   d5324:	b096      	sub	sp, #88	; 0x58
digitalWrite(vane_switch, HIGH);
   d5326:	2101      	movs	r1, #1
   d5328:	f004 fd45 	bl	d9db6 <digitalWrite>
float vane_wind_direction = measure_wind_direction(WindSpeed);
   d532c:	4620      	mov	r0, r4
   d532e:	f7ff f9a3 	bl	d4678 <_Z22measure_wind_directionRf>
   d5332:	ed8d 0a03 	vstr	s0, [sp, #12]
Serial.print("\n");
   d5336:	f004 fa95 	bl	d9864 <_Z16_fetch_usbserialv>
   d533a:	4991      	ldr	r1, [pc, #580]	; (d5580 <loop+0x264>)
   d533c:	f003 fc70 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print("wind direction = ");
   d5340:	f004 fa90 	bl	d9864 <_Z16_fetch_usbserialv>
   d5344:	498f      	ldr	r1, [pc, #572]	; (d5584 <loop+0x268>)
   d5346:	f003 fc6b 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(vane_wind_direction);
   d534a:	f004 fa8b 	bl	d9864 <_Z16_fetch_usbserialv>
   d534e:	ed9d 0a03 	vldr	s0, [sp, #12]
   d5352:	2102      	movs	r1, #2
   d5354:	f003 fd9e 	bl	d8e94 <_ZN5Print5printEfi>
Serial.print("\n");
   d5358:	f004 fa84 	bl	d9864 <_Z16_fetch_usbserialv>
   d535c:	4988      	ldr	r1, [pc, #544]	; (d5580 <loop+0x264>)
   d535e:	f003 fc5f 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print("wind speed = ");
   d5362:	f004 fa7f 	bl	d9864 <_Z16_fetch_usbserialv>
   d5366:	4988      	ldr	r1, [pc, #544]	; (d5588 <loop+0x26c>)
   d5368:	f003 fc5a 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(WindSpeed);
   d536c:	f004 fa7a 	bl	d9864 <_Z16_fetch_usbserialv>
   d5370:	ed94 0a00 	vldr	s0, [r4]
   d5374:	2102      	movs	r1, #2
   d5376:	f003 fd8d 	bl	d8e94 <_ZN5Print5printEfi>
Serial.print("\n");
   d537a:	f004 fa73 	bl	d9864 <_Z16_fetch_usbserialv>
   d537e:	4980      	ldr	r1, [pc, #512]	; (d5580 <loop+0x264>)
   d5380:	f003 fc4e 	bl	d8c20 <_ZN5Print5printEPKc>
printValues();
   d5384:	f7fe fefe 	bl	d4184 <_Z11printValuesv>
displayValues();
   d5388:	f7ff ff36 	bl	d51f8 <_Z13displayValuesv>
  delay(delayTime);
   d538c:	4b7f      	ldr	r3, [pc, #508]	; (d558c <loop+0x270>)
   d538e:	6818      	ldr	r0, [r3, #0]
   d5390:	f003 fe36 	bl	d9000 <delay>
  if(!digitalRead(BUTTON_A)) display.print("A");
   d5394:	2004      	movs	r0, #4
   d5396:	f004 fd27 	bl	d9de8 <digitalRead>
   d539a:	b918      	cbnz	r0, d53a4 <loop+0x88>
   d539c:	497c      	ldr	r1, [pc, #496]	; (d5590 <loop+0x274>)
   d539e:	487d      	ldr	r0, [pc, #500]	; (d5594 <loop+0x278>)
   d53a0:	f003 fc3e 	bl	d8c20 <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_B)) display.print("B");
   d53a4:	2003      	movs	r0, #3
   d53a6:	f004 fd1f 	bl	d9de8 <digitalRead>
   d53aa:	b918      	cbnz	r0, d53b4 <loop+0x98>
   d53ac:	497a      	ldr	r1, [pc, #488]	; (d5598 <loop+0x27c>)
   d53ae:	4879      	ldr	r0, [pc, #484]	; (d5594 <loop+0x278>)
   d53b0:	f003 fc36 	bl	d8c20 <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_C)) display.print("C");
   d53b4:	2002      	movs	r0, #2
   d53b6:	f004 fd17 	bl	d9de8 <digitalRead>
   d53ba:	b918      	cbnz	r0, d53c4 <loop+0xa8>
   d53bc:	4977      	ldr	r1, [pc, #476]	; (d559c <loop+0x280>)
   d53be:	4875      	ldr	r0, [pc, #468]	; (d5594 <loop+0x278>)
   d53c0:	f003 fc2e 	bl	d8c20 <_ZN5Print5printEPKc>
  delay(10);
   d53c4:	200a      	movs	r0, #10
   d53c6:	f003 fe1b 	bl	d9000 <delay>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d53ca:	f002 ff5d 	bl	d8288 <os_thread_yield>
  display.display();
   d53ce:	4871      	ldr	r0, [pc, #452]	; (d5594 <loop+0x278>)
   d53d0:	4c73      	ldr	r4, [pc, #460]	; (d55a0 <loop+0x284>)
   d53d2:	f002 fbe2 	bl	d7b9a <_ZN15Adafruit_SH110X7displayEv>
print_heading_pitch_roll();
   d53d6:	f7ff f9ef 	bl	d47b8 <_Z24print_heading_pitch_rollv>
  Serial.println("\n\n");
   d53da:	f004 fa43 	bl	d9864 <_Z16_fetch_usbserialv>
   d53de:	4971      	ldr	r1, [pc, #452]	; (d55a4 <loop+0x288>)
   d53e0:	f003 fc35 	bl	d8c4e <_ZN5Print7printlnEPKc>
  bno.getEvent(&event);
   d53e4:	a90d      	add	r1, sp, #52	; 0x34
   d53e6:	4870      	ldr	r0, [pc, #448]	; (d55a8 <loop+0x28c>)
   d53e8:	f001 fe16 	bl	d7018 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  Serial.print("X: ");
   d53ec:	f004 fa3a 	bl	d9864 <_Z16_fetch_usbserialv>
   d53f0:	496e      	ldr	r1, [pc, #440]	; (d55ac <loop+0x290>)
   d53f2:	f003 fc15 	bl	d8c20 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.x, 4);
   d53f6:	f004 fa35 	bl	d9864 <_Z16_fetch_usbserialv>
   d53fa:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   d53fe:	2104      	movs	r1, #4
   d5400:	f003 fd48 	bl	d8e94 <_ZN5Print5printEfi>
  Serial.print("\tY: ");
   d5404:	f004 fa2e 	bl	d9864 <_Z16_fetch_usbserialv>
   d5408:	4969      	ldr	r1, [pc, #420]	; (d55b0 <loop+0x294>)
   d540a:	f003 fc09 	bl	d8c20 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.y, 4);
   d540e:	f004 fa29 	bl	d9864 <_Z16_fetch_usbserialv>
   d5412:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   d5416:	2104      	movs	r1, #4
   d5418:	f003 fd3c 	bl	d8e94 <_ZN5Print5printEfi>
  Serial.print("\tZ: ");
   d541c:	f004 fa22 	bl	d9864 <_Z16_fetch_usbserialv>
   d5420:	4964      	ldr	r1, [pc, #400]	; (d55b4 <loop+0x298>)
   d5422:	f003 fbfd 	bl	d8c20 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.z, 4);
   d5426:	f004 fa1d 	bl	d9864 <_Z16_fetch_usbserialv>
   d542a:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   d542e:	2104      	movs	r1, #4
   d5430:	f003 fd30 	bl	d8e94 <_ZN5Print5printEfi>
  Serial.println("");
   d5434:	f004 fa16 	bl	d9864 <_Z16_fetch_usbserialv>
   d5438:	495f      	ldr	r1, [pc, #380]	; (d55b8 <loop+0x29c>)
   d543a:	f003 fc08 	bl	d8c4e <_ZN5Print7printlnEPKc>
  Serial.println("\n\n");
   d543e:	f004 fa11 	bl	d9864 <_Z16_fetch_usbserialv>
   d5442:	4958      	ldr	r1, [pc, #352]	; (d55a4 <loop+0x288>)
   d5444:	f003 fc03 	bl	d8c4e <_ZN5Print7printlnEPKc>
  compass_heading = event.orientation.x + 104;
   d5448:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
   d544c:	ed9f 7a5b 	vldr	s14, [pc, #364]	; d55bc <loop+0x2a0>
   d5450:	ee77 7a87 	vadd.f32	s15, s15, s14
  if(compass_heading > 360) {
   d5454:	ed9f 7a5a 	vldr	s14, [pc, #360]	; d55c0 <loop+0x2a4>
   d5458:	eef4 7ac7 	vcmpe.f32	s15, s14
   d545c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    compass_heading = compass_heading - 360;
   d5460:	bfc8      	it	gt
   d5462:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
   d5466:	edc4 7a00 	vstr	s15, [r4]
  Serial.print("compass heading:  ");
   d546a:	f004 f9fb 	bl	d9864 <_Z16_fetch_usbserialv>
   d546e:	4955      	ldr	r1, [pc, #340]	; (d55c4 <loop+0x2a8>)
   d5470:	f003 fbd6 	bl	d8c20 <_ZN5Print5printEPKc>
  Serial.print(compass_heading, 4);
   d5474:	f004 f9f6 	bl	d9864 <_Z16_fetch_usbserialv>
   d5478:	2104      	movs	r1, #4
   d547a:	ed94 0a00 	vldr	s0, [r4]
  bno_compass_heading = get_compass_heading();
   d547e:	4c52      	ldr	r4, [pc, #328]	; (d55c8 <loop+0x2ac>)
  Serial.print(compass_heading, 4);
   d5480:	f003 fd08 	bl	d8e94 <_ZN5Print5printEfi>
  bno_compass_heading = get_compass_heading();
   d5484:	f7ff fb2c 	bl	d4ae0 <_Z19get_compass_headingv>
   d5488:	ed84 0a00 	vstr	s0, [r4]
  Serial.print("psi from bno055\n");
   d548c:	f004 f9ea 	bl	d9864 <_Z16_fetch_usbserialv>
   d5490:	494e      	ldr	r1, [pc, #312]	; (d55cc <loop+0x2b0>)
   d5492:	f003 fbc5 	bl	d8c20 <_ZN5Print5printEPKc>
  Serial.print(bno_compass_heading);
   d5496:	f004 f9e5 	bl	d9864 <_Z16_fetch_usbserialv>
   d549a:	ed94 0a00 	vldr	s0, [r4]
   d549e:	2102      	movs	r1, #2
   d54a0:	f003 fcf8 	bl	d8e94 <_ZN5Print5printEfi>
  Serial.print("\nunix time = ");
   d54a4:	f004 f9de 	bl	d9864 <_Z16_fetch_usbserialv>
   d54a8:	4949      	ldr	r1, [pc, #292]	; (d55d0 <loop+0x2b4>)
   d54aa:	f003 fbb9 	bl	d8c20 <_ZN5Print5printEPKc>
  Serial.print(Time.now());
   d54ae:	f004 f9d9 	bl	d9864 <_Z16_fetch_usbserialv>
   d54b2:	4604      	mov	r4, r0
   d54b4:	f003 fd7e 	bl	d8fb4 <_ZN9TimeClass3nowEv>
   d54b8:	220a      	movs	r2, #10
   d54ba:	4601      	mov	r1, r0
size_t Print::print(T n, int base)
   d54bc:	4620      	mov	r0, r4
   d54be:	f7fe fe37 	bl	d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>
Serial.print("time base value =");
   d54c2:	f004 f9cf 	bl	d9864 <_Z16_fetch_usbserialv>
   d54c6:	4943      	ldr	r1, [pc, #268]	; (d55d4 <loop+0x2b8>)
   d54c8:	f003 fbaa 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(time_base);
   d54cc:	f004 f9ca 	bl	d9864 <_Z16_fetch_usbserialv>
   d54d0:	230a      	movs	r3, #10
   d54d2:	9300      	str	r3, [sp, #0]
   d54d4:	4b40      	ldr	r3, [pc, #256]	; (d55d8 <loop+0x2bc>)
   d54d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d54da:	f7fe fe09 	bl	d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>
Serial.print("\n");
   d54de:	f004 f9c1 	bl	d9864 <_Z16_fetch_usbserialv>
   d54e2:	4927      	ldr	r1, [pc, #156]	; (d5580 <loop+0x264>)
   d54e4:	f003 fb9c 	bl	d8c20 <_ZN5Print5printEPKc>
  Serial.print("\n");
   d54e8:	f004 f9bc 	bl	d9864 <_Z16_fetch_usbserialv>
   d54ec:	4924      	ldr	r1, [pc, #144]	; (d5580 <loop+0x264>)
   d54ee:	f003 fb97 	bl	d8c20 <_ZN5Print5printEPKc>
  Particle.publish("office temperature", String(bme.readTemperature()*1.8F + 32.));
   d54f2:	483a      	ldr	r0, [pc, #232]	; (d55dc <loop+0x2c0>)
   d54f4:	f000 fbfa 	bl	d5cec <_ZN15Adafruit_BME28015readTemperatureEv>
   d54f8:	eddf 7a39 	vldr	s15, [pc, #228]	; d55e0 <loop+0x2c4>
   d54fc:	ee60 7a27 	vmul.f32	s15, s0, s15
   d5500:	ee17 0a90 	vmov	r0, s15
   d5504:	f007 faca 	bl	dca9c <__aeabi_f2d>
   d5508:	4b36      	ldr	r3, [pc, #216]	; (d55e4 <loop+0x2c8>)
   d550a:	2200      	movs	r2, #0
   d550c:	f007 f968 	bl	dc7e0 <__adddf3>
   d5510:	ec41 0b10 	vmov	d0, r0, r1
   d5514:	2106      	movs	r1, #6
   d5516:	a807      	add	r0, sp, #28
   d5518:	f003 fb1b 	bl	d8b52 <_ZN6StringC1Edi>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d551c:	4b32      	ldr	r3, [pc, #200]	; (d55e8 <loop+0x2cc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d551e:	9a07      	ldr	r2, [sp, #28]
   d5520:	781b      	ldrb	r3, [r3, #0]
   d5522:	f88d 3000 	strb.w	r3, [sp]
   d5526:	4931      	ldr	r1, [pc, #196]	; (d55ec <loop+0x2d0>)
   d5528:	233c      	movs	r3, #60	; 0x3c
   d552a:	a805      	add	r0, sp, #20
   d552c:	f003 ff4e 	bl	d93cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5530:	9c06      	ldr	r4, [sp, #24]
   d5532:	b17c      	cbz	r4, d5554 <loop+0x238>
      if (--_M_use_count == 0)
   d5534:	6863      	ldr	r3, [r4, #4]
   d5536:	3b01      	subs	r3, #1
   d5538:	6063      	str	r3, [r4, #4]
   d553a:	b95b      	cbnz	r3, d5554 <loop+0x238>
          _M_dispose();
   d553c:	6823      	ldr	r3, [r4, #0]
   d553e:	4620      	mov	r0, r4
   d5540:	689b      	ldr	r3, [r3, #8]
   d5542:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5544:	68a3      	ldr	r3, [r4, #8]
   d5546:	3b01      	subs	r3, #1
   d5548:	60a3      	str	r3, [r4, #8]
   d554a:	b91b      	cbnz	r3, d5554 <loop+0x238>
            _M_destroy();
   d554c:	6823      	ldr	r3, [r4, #0]
   d554e:	4620      	mov	r0, r4
   d5550:	68db      	ldr	r3, [r3, #12]
   d5552:	4798      	blx	r3
   d5554:	a807      	add	r0, sp, #28
   d5556:	f003 fa9f 	bl	d8a98 <_ZN6StringD1Ev>
    bno.getSensorOffsets(newCalib);
   d555a:	a907      	add	r1, sp, #28
   d555c:	4812      	ldr	r0, [pc, #72]	; (d55a8 <loop+0x28c>)
   d555e:	f001 fc3d 	bl	d6ddc <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>
    displaySensorOffsets(newCalib);
   d5562:	a807      	add	r0, sp, #28
   d5564:	f7fe ff26 	bl	d43b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
  current_power_voltage();
   d5568:	f7ff f960 	bl	d482c <_Z21current_power_voltagev>
      delay(BNO055_SAMPLERATE_DELAY_MS);
   d556c:	f242 7010 	movw	r0, #10000	; 0x2710
   d5570:	f003 fd46 	bl	d9000 <delay>
}
   d5574:	b016      	add	sp, #88	; 0x58
   d5576:	bd10      	pop	{r4, pc}
   d5578:	2003e3cd 	.word	0x2003e3cd
   d557c:	2003e448 	.word	0x2003e448
   d5580:	000ddc9a 	.word	0x000ddc9a
   d5584:	000ddc77 	.word	0x000ddc77
   d5588:	000ddc89 	.word	0x000ddc89
   d558c:	2003e4b8 	.word	0x2003e4b8
   d5590:	000ddbed 	.word	0x000ddbed
   d5594:	2003e4bc 	.word	0x2003e4bc
   d5598:	000de110 	.word	0x000de110
   d559c:	000ddc97 	.word	0x000ddc97
   d55a0:	2003e4b4 	.word	0x2003e4b4
   d55a4:	000ddc99 	.word	0x000ddc99
   d55a8:	2003e49c 	.word	0x2003e49c
   d55ac:	000ddc9c 	.word	0x000ddc9c
   d55b0:	000ddca0 	.word	0x000ddca0
   d55b4:	000ddca5 	.word	0x000ddca5
   d55b8:	000ddb67 	.word	0x000ddb67
   d55bc:	42d00000 	.word	0x42d00000
   d55c0:	43b40000 	.word	0x43b40000
   d55c4:	000ddcaa 	.word	0x000ddcaa
   d55c8:	2003e4b0 	.word	0x2003e4b0
   d55cc:	000ddcbd 	.word	0x000ddcbd
   d55d0:	000ddcce 	.word	0x000ddcce
   d55d4:	000ddcdc 	.word	0x000ddcdc
   d55d8:	2003e570 	.word	0x2003e570
   d55dc:	2003e458 	.word	0x2003e458
   d55e0:	3fe66666 	.word	0x3fe66666
   d55e4:	40400000 	.word	0x40400000
   d55e8:	2003e454 	.word	0x2003e454
   d55ec:	000ddcee 	.word	0x000ddcee

000d55f0 <setup>:
void setup(void) {
   d55f0:	b570      	push	{r4, r5, r6, lr}
   d55f2:	b0a2      	sub	sp, #136	; 0x88
  Serial.println("Hello!");
   d55f4:	f004 f936 	bl	d9864 <_Z16_fetch_usbserialv>
   d55f8:	49c0      	ldr	r1, [pc, #768]	; (d58fc <setup+0x30c>)
   d55fa:	f003 fb28 	bl	d8c4e <_ZN5Print7printlnEPKc>
  if (! ina219.begin()) {
   d55fe:	f004 fc4d 	bl	d9e9c <_Z19__fetch_global_Wirev>
   d5602:	4601      	mov	r1, r0
   d5604:	48be      	ldr	r0, [pc, #760]	; (d5900 <setup+0x310>)
   d5606:	f002 fd69 	bl	d80dc <_ZN15Adafruit_INA2195beginEP7TwoWire>
   d560a:	b940      	cbnz	r0, d561e <setup+0x2e>
    Serial.println("Failed to find INA219 chip");
   d560c:	f004 f92a 	bl	d9864 <_Z16_fetch_usbserialv>
   d5610:	49bc      	ldr	r1, [pc, #752]	; (d5904 <setup+0x314>)
   d5612:	f003 fb1c 	bl	d8c4e <_ZN5Print7printlnEPKc>
    while (1) { delay(10); }
   d5616:	200a      	movs	r0, #10
   d5618:	f003 fcf2 	bl	d9000 <delay>
   d561c:	e7fb      	b.n	d5616 <setup+0x26>
  ina219.setCalibration_16V_400mA();
   d561e:	48b8      	ldr	r0, [pc, #736]	; (d5900 <setup+0x310>)
time_base = Time.now();
   d5620:	4cb9      	ldr	r4, [pc, #740]	; (d5908 <setup+0x318>)
pinMode(wind_pin, INPUT);
   d5622:	4dba      	ldr	r5, [pc, #744]	; (d590c <setup+0x31c>)
  ina219.setCalibration_16V_400mA();
   d5624:	f002 fd75 	bl	d8112 <_ZN15Adafruit_INA21924setCalibration_16V_400mAEv>
time_base = Time.now();
   d5628:	f003 fcc4 	bl	d8fb4 <_ZN9TimeClass3nowEv>
   d562c:	17c1      	asrs	r1, r0, #31
   d562e:	e9c4 0100 	strd	r0, r1, [r4]
Serial.print("time base value =");
   d5632:	f004 f917 	bl	d9864 <_Z16_fetch_usbserialv>
   d5636:	49b6      	ldr	r1, [pc, #728]	; (d5910 <setup+0x320>)
   d5638:	f003 faf2 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(time_base);
   d563c:	f004 f912 	bl	d9864 <_Z16_fetch_usbserialv>
   d5640:	230a      	movs	r3, #10
   d5642:	9300      	str	r3, [sp, #0]
   d5644:	e9d4 2300 	ldrd	r2, r3, [r4]
   d5648:	f7fe fd52 	bl	d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>
Serial.print("\n");
   d564c:	f004 f90a 	bl	d9864 <_Z16_fetch_usbserialv>
   d5650:	49b0      	ldr	r1, [pc, #704]	; (d5914 <setup+0x324>)
   d5652:	f003 fae5 	bl	d8c20 <_ZN5Print5printEPKc>
pinMode(vane_pin, INPUT);
   d5656:	4bb0      	ldr	r3, [pc, #704]	; (d5918 <setup+0x328>)
   d5658:	2100      	movs	r1, #0
   d565a:	7818      	ldrb	r0, [r3, #0]
   d565c:	f004 fb9a 	bl	d9d94 <pinMode>
pinMode(vane_switch, OUTPUT);
   d5660:	4bae      	ldr	r3, [pc, #696]	; (d591c <setup+0x32c>)
   d5662:	2101      	movs	r1, #1
   d5664:	7818      	ldrb	r0, [r3, #0]
   d5666:	f004 fb95 	bl	d9d94 <pinMode>
Serial.println("Vane Value\tDirection\tHeading");
   d566a:	f004 f8fb 	bl	d9864 <_Z16_fetch_usbserialv>
   d566e:	49ac      	ldr	r1, [pc, #688]	; (d5920 <setup+0x330>)
   d5670:	f003 faed 	bl	d8c4e <_ZN5Print7printlnEPKc>
pinMode(wind_pin, INPUT);
   d5674:	7828      	ldrb	r0, [r5, #0]
   d5676:	2100      	movs	r1, #0
   d5678:	f004 fb8c 	bl	d9d94 <pinMode>
attachInterrupt(wind_pin, isr_rotation, FALLING);
   d567c:	2300      	movs	r3, #0
   d567e:	9300      	str	r3, [sp, #0]
   d5680:	2202      	movs	r2, #2
   d5682:	f04f 33ff 	mov.w	r3, #4294967295
   d5686:	49a7      	ldr	r1, [pc, #668]	; (d5924 <setup+0x334>)
   d5688:	7828      	ldrb	r0, [r5, #0]
   d568a:	f004 f913 	bl	d98b4 <_Z15attachInterrupttPFvvE13InterruptModeah>
Serial.println("Davis Wind Speed Test");
   d568e:	f004 f8e9 	bl	d9864 <_Z16_fetch_usbserialv>
   d5692:	49a5      	ldr	r1, [pc, #660]	; (d5928 <setup+0x338>)
   d5694:	f003 fadb 	bl	d8c4e <_ZN5Print7printlnEPKc>
Serial.println("Rotations\tMPH");
   d5698:	f004 f8e4 	bl	d9864 <_Z16_fetch_usbserialv>
   d569c:	49a3      	ldr	r1, [pc, #652]	; (d592c <setup+0x33c>)
   d569e:	f003 fad6 	bl	d8c4e <_ZN5Print7printlnEPKc>
  Serial.begin(115200);
   d56a2:	f004 f8df 	bl	d9864 <_Z16_fetch_usbserialv>
   d56a6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d56aa:	f004 f8c9 	bl	d9840 <_ZN9USBSerial5beginEl>
   d56ae:	4625      	mov	r5, r4
    while(!Serial);    // time to get serial running
   d56b0:	f004 f8d8 	bl	d9864 <_Z16_fetch_usbserialv>
   d56b4:	f004 f8cb 	bl	d984e <_ZN9USBSerialcvbEv>
   d56b8:	2800      	cmp	r0, #0
   d56ba:	d0f9      	beq.n	d56b0 <setup+0xc0>
  display.begin(0x3C, true); // Address 0x3C default
   d56bc:	4c9c      	ldr	r4, [pc, #624]	; (d5930 <setup+0x340>)
    Serial.println(F("BME280 test"));
   d56be:	f004 f8d1 	bl	d9864 <_Z16_fetch_usbserialv>
   d56c2:	499c      	ldr	r1, [pc, #624]	; (d5934 <setup+0x344>)
   d56c4:	f003 facd 	bl	d8c62 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("128x64 OLED FeatherWing test");
   d56c8:	f004 f8cc 	bl	d9864 <_Z16_fetch_usbserialv>
   d56cc:	499a      	ldr	r1, [pc, #616]	; (d5938 <setup+0x348>)
   d56ce:	f003 fabe 	bl	d8c4e <_ZN5Print7printlnEPKc>
  display.begin(0x3C, true); // Address 0x3C default
   d56d2:	2201      	movs	r2, #1
   d56d4:	213c      	movs	r1, #60	; 0x3c
   d56d6:	4620      	mov	r0, r4
   d56d8:	f002 fb56 	bl	d7d88 <_ZN15Adafruit_SH11075beginEhb>
  Serial.println("OLED begun");
   d56dc:	f004 f8c2 	bl	d9864 <_Z16_fetch_usbserialv>
   d56e0:	4996      	ldr	r1, [pc, #600]	; (d593c <setup+0x34c>)
   d56e2:	f003 fab4 	bl	d8c4e <_ZN5Print7printlnEPKc>
  display.display();
   d56e6:	4620      	mov	r0, r4
   d56e8:	f002 fa57 	bl	d7b9a <_ZN15Adafruit_SH110X7displayEv>
  delay(1000);
   d56ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d56f0:	f003 fc86 	bl	d9000 <delay>
  display.clearDisplay();
   d56f4:	4620      	mov	r0, r4
   d56f6:	f001 fddd 	bl	d72b4 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d56fa:	4620      	mov	r0, r4
   d56fc:	f002 fa4d 	bl	d7b9a <_ZN15Adafruit_SH110X7displayEv>
  display.setRotation(1);
   d5700:	2101      	movs	r1, #1
   d5702:	4620      	mov	r0, r4
   d5704:	f001 ffdc 	bl	d76c0 <_ZN12Adafruit_GFX11setRotationEh>
  Serial.println("Button test");
   d5708:	f004 f8ac 	bl	d9864 <_Z16_fetch_usbserialv>
   d570c:	498c      	ldr	r1, [pc, #560]	; (d5940 <setup+0x350>)
   d570e:	f003 fa9e 	bl	d8c4e <_ZN5Print7printlnEPKc>
  pinMode(BUTTON_A, INPUT_PULLUP);
   d5712:	2102      	movs	r1, #2
   d5714:	2004      	movs	r0, #4
   d5716:	f004 fb3d 	bl	d9d94 <pinMode>
  pinMode(BUTTON_B, INPUT_PULLUP);
   d571a:	2102      	movs	r1, #2
   d571c:	2003      	movs	r0, #3
   d571e:	f004 fb39 	bl	d9d94 <pinMode>
  pinMode(BUTTON_C, INPUT_PULLUP);
   d5722:	2102      	movs	r1, #2
   d5724:	4608      	mov	r0, r1
   d5726:	f004 fb35 	bl	d9d94 <pinMode>
  display.setTextSize(1);
   d572a:	2101      	movs	r1, #1
   d572c:	4620      	mov	r0, r4
   d572e:	f002 fa2e 	bl	d7b8e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d5732:	2600      	movs	r6, #0
   d5734:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d5738:	e9c4 6304 	strd	r6, r3, [r4, #16]
  display.print("BigdaddyAddie weather station!\n");
   d573c:	4981      	ldr	r1, [pc, #516]	; (d5944 <setup+0x354>)
   d573e:	4620      	mov	r0, r4
   d5740:	f003 fa6e 	bl	d8c20 <_ZN5Print5printEPKc>
  display.print("connected!\n");
   d5744:	4980      	ldr	r1, [pc, #512]	; (d5948 <setup+0x358>)
   d5746:	4620      	mov	r0, r4
   d5748:	f003 fa6a 	bl	d8c20 <_ZN5Print5printEPKc>
  display.display(); // actually display all of the above
   d574c:	4620      	mov	r0, r4
   d574e:	f002 fa24 	bl	d7b9a <_ZN15Adafruit_SH110X7displayEv>
    status = bme.begin();  
   d5752:	487e      	ldr	r0, [pc, #504]	; (d594c <setup+0x35c>)
   d5754:	f000 fe79 	bl	d644a <_ZN15Adafruit_BME2805beginEv>
    if (!status) {
   d5758:	bb78      	cbnz	r0, d57ba <setup+0x1ca>
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d575a:	f004 f883 	bl	d9864 <_Z16_fetch_usbserialv>
   d575e:	497c      	ldr	r1, [pc, #496]	; (d5950 <setup+0x360>)
   d5760:	f003 fa75 	bl	d8c4e <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),16);
   d5764:	f004 f87e 	bl	d9864 <_Z16_fetch_usbserialv>
   d5768:	497a      	ldr	r1, [pc, #488]	; (d5954 <setup+0x364>)
   d576a:	f003 fa59 	bl	d8c20 <_ZN5Print5printEPKc>
   d576e:	f004 f879 	bl	d9864 <_Z16_fetch_usbserialv>
   d5772:	4604      	mov	r4, r0
   d5774:	4875      	ldr	r0, [pc, #468]	; (d594c <setup+0x35c>)
   d5776:	f000 f9e9 	bl	d5b4c <_ZN15Adafruit_BME2808sensorIDEv>
        return printNumber(val, base) + t;
   d577a:	2210      	movs	r2, #16
   d577c:	4601      	mov	r1, r0
   d577e:	4620      	mov	r0, r4
   d5780:	f003 fa71 	bl	d8c66 <_ZN5Print11printNumberEmh>
        n += println();
   d5784:	4620      	mov	r0, r4
   d5786:	f003 fa56 	bl	d8c36 <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d578a:	f004 f86b 	bl	d9864 <_Z16_fetch_usbserialv>
   d578e:	4972      	ldr	r1, [pc, #456]	; (d5958 <setup+0x368>)
   d5790:	f003 fa46 	bl	d8c20 <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d5794:	f004 f866 	bl	d9864 <_Z16_fetch_usbserialv>
   d5798:	4970      	ldr	r1, [pc, #448]	; (d595c <setup+0x36c>)
   d579a:	f003 fa41 	bl	d8c20 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d579e:	f004 f861 	bl	d9864 <_Z16_fetch_usbserialv>
   d57a2:	496f      	ldr	r1, [pc, #444]	; (d5960 <setup+0x370>)
   d57a4:	f003 fa3c 	bl	d8c20 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d57a8:	f004 f85c 	bl	d9864 <_Z16_fetch_usbserialv>
   d57ac:	496d      	ldr	r1, [pc, #436]	; (d5964 <setup+0x374>)
   d57ae:	f003 fa37 	bl	d8c20 <_ZN5Print5printEPKc>
        while (1) delay(10);
   d57b2:	200a      	movs	r0, #10
   d57b4:	f003 fc24 	bl	d9000 <delay>
   d57b8:	e7fb      	b.n	d57b2 <setup+0x1c2>
if (i2ceeprom.begin(0x50)) {  // you can stick the new i2c addr in here, e.g. begin(0x51);
   d57ba:	f004 fb6f 	bl	d9e9c <_Z19__fetch_global_Wirev>
   d57be:	2150      	movs	r1, #80	; 0x50
   d57c0:	4602      	mov	r2, r0
   d57c2:	4869      	ldr	r0, [pc, #420]	; (d5968 <setup+0x378>)
   d57c4:	f002 fb56 	bl	d7e74 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>
   d57c8:	b190      	cbz	r0, d57f0 <setup+0x200>
    Serial.println("Found I2C EEPROM");
   d57ca:	f004 f84b 	bl	d9864 <_Z16_fetch_usbserialv>
   d57ce:	4967      	ldr	r1, [pc, #412]	; (d596c <setup+0x37c>)
   d57d0:	f003 fa3d 	bl	d8c4e <_ZN5Print7printlnEPKc>
eeprom_test();
   d57d4:	f7fe fee0 	bl	d4598 <_Z11eeprom_testv>
  if(!bno.begin())
   d57d8:	4865      	ldr	r0, [pc, #404]	; (d5970 <setup+0x380>)
   d57da:	210c      	movs	r1, #12
   d57dc:	f001 fa3c 	bl	d6c58 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
   d57e0:	4604      	mov	r4, r0
   d57e2:	b970      	cbnz	r0, d5802 <setup+0x212>
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
   d57e4:	f004 f83e 	bl	d9864 <_Z16_fetch_usbserialv>
   d57e8:	4962      	ldr	r1, [pc, #392]	; (d5974 <setup+0x384>)
   d57ea:	f003 fa19 	bl	d8c20 <_ZN5Print5printEPKc>
    while(1);
   d57ee:	e7fe      	b.n	d57ee <setup+0x1fe>
    Serial.println("I2C EEPROM not identified ... check your connections?\r\n");
   d57f0:	f004 f838 	bl	d9864 <_Z16_fetch_usbserialv>
   d57f4:	4960      	ldr	r1, [pc, #384]	; (d5978 <setup+0x388>)
   d57f6:	f003 fa2a 	bl	d8c4e <_ZN5Print7printlnEPKc>
    while (1) delay(10);
   d57fa:	200a      	movs	r0, #10
   d57fc:	f003 fc00 	bl	d9000 <delay>
   d5800:	e7fb      	b.n	d57fa <setup+0x20a>
   Serial.print("time base value =");
   d5802:	f004 f82f 	bl	d9864 <_Z16_fetch_usbserialv>
   d5806:	4942      	ldr	r1, [pc, #264]	; (d5910 <setup+0x320>)
   d5808:	f003 fa0a 	bl	d8c20 <_ZN5Print5printEPKc>
Serial.print(time_base);
   d580c:	f004 f82a 	bl	d9864 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d5810:	230a      	movs	r3, #10
   d5812:	9300      	str	r3, [sp, #0]
   d5814:	e9d5 2300 	ldrd	r2, r3, [r5]
   d5818:	f7fe fc6a 	bl	d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>
Serial.print("\n");
   d581c:	f004 f822 	bl	d9864 <_Z16_fetch_usbserialv>
   d5820:	493c      	ldr	r1, [pc, #240]	; (d5914 <setup+0x324>)
   d5822:	f003 f9fd 	bl	d8c20 <_ZN5Print5printEPKc>
  delay(1000);
   d5826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d582a:	f003 fbe9 	bl	d9000 <delay>
  displaySensorDetails();
   d582e:	f7fe fd35 	bl	d429c <_Z20displaySensorDetailsv>
    EEPROM.get(eeAddress, bnoID);
   d5832:	f004 fb03 	bl	d9e3c <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d5836:	2204      	movs	r2, #4
   d5838:	a902      	add	r1, sp, #8
   d583a:	4630      	mov	r0, r6
   d583c:	f002 fd04 	bl	d8248 <HAL_EEPROM_Get>
    bno.getSensor(&sensor);
   d5840:	484b      	ldr	r0, [pc, #300]	; (d5970 <setup+0x380>)
   d5842:	a918      	add	r1, sp, #96	; 0x60
   d5844:	f001 f8fa 	bl	d6a3c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    if (bnoID != sensor.sensor_id)
   d5848:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   d584a:	9b02      	ldr	r3, [sp, #8]
   d584c:	429a      	cmp	r2, r3
   d584e:	d037      	beq.n	d58c0 <setup+0x2d0>
        Serial.println("\nNo Calibration Data for this sensor exists in EEPROM");
   d5850:	f004 f808 	bl	d9864 <_Z16_fetch_usbserialv>
   d5854:	4949      	ldr	r1, [pc, #292]	; (d597c <setup+0x38c>)
   d5856:	f003 f9fa 	bl	d8c4e <_ZN5Print7printlnEPKc>
        delay(500);
   d585a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d585e:	f003 fbcf 	bl	d9000 <delay>
    bool foundCalib = false;
   d5862:	4634      	mov	r4, r6
    delay(1000);
   d5864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5868:	f003 fbca 	bl	d9000 <delay>
    displaySensorDetails();
   d586c:	f7fe fd16 	bl	d429c <_Z20displaySensorDetailsv>
    displaySensorStatus();
   d5870:	f7ff f882 	bl	d4978 <_Z19displaySensorStatusv>
    bno.setExtCrystalUse(true);
   d5874:	2101      	movs	r1, #1
   d5876:	483e      	ldr	r0, [pc, #248]	; (d5970 <setup+0x380>)
   d5878:	f001 f93c 	bl	d6af4 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
   d587c:	f002 fcd4 	bl	d8228 <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
   d5880:	4b3f      	ldr	r3, [pc, #252]	; (d5980 <setup+0x390>)
    bno.getEvent(&event);
   d5882:	a90f      	add	r1, sp, #60	; 0x3c
millisOld=millis();
   d5884:	6018      	str	r0, [r3, #0]
    bno.getEvent(&event);
   d5886:	483a      	ldr	r0, [pc, #232]	; (d5970 <setup+0x380>)
   d5888:	f001 fbc6 	bl	d7018 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
    if (foundCalib){
   d588c:	2c00      	cmp	r4, #0
   d588e:	f000 8081 	beq.w	d5994 <setup+0x3a4>
        Serial.println("Move sensor slightly to calibrate magnetometers");
   d5892:	f003 ffe7 	bl	d9864 <_Z16_fetch_usbserialv>
   d5896:	493b      	ldr	r1, [pc, #236]	; (d5984 <setup+0x394>)
        while (!bno.isFullyCalibrated())
   d5898:	4c35      	ldr	r4, [pc, #212]	; (d5970 <setup+0x380>)
        Serial.println("Move sensor slightly to calibrate magnetometers");
   d589a:	f003 f9d8 	bl	d8c4e <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
   d589e:	4620      	mov	r0, r4
   d58a0:	f001 fa63 	bl	d6d6a <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d58a4:	2800      	cmp	r0, #0
   d58a6:	f040 80b5 	bne.w	d5a14 <setup+0x424>
            bno.getEvent(&event);
   d58aa:	a90f      	add	r1, sp, #60	; 0x3c
   d58ac:	4620      	mov	r0, r4
   d58ae:	f001 fbb3 	bl	d7018 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            displayCalStatus();
   d58b2:	f7ff f8b1 	bl	d4a18 <_Z16displayCalStatusv>
            delay(BNO055_STARTUP_SAMPLE_DELAY_MS);
   d58b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d58ba:	f003 fba1 	bl	d9000 <delay>
        while (!bno.isFullyCalibrated())
   d58be:	e7ee      	b.n	d589e <setup+0x2ae>
        Serial.println("\nFound Calibration for this sensor in EEPROM.");
   d58c0:	f003 ffd0 	bl	d9864 <_Z16_fetch_usbserialv>
   d58c4:	4930      	ldr	r1, [pc, #192]	; (d5988 <setup+0x398>)
   d58c6:	f003 f9c2 	bl	d8c4e <_ZN5Print7printlnEPKc>
        EEPROM.get(eeAddress, calibrationData);
   d58ca:	f004 fab7 	bl	d9e3c <_Z21__fetch_global_EEPROMv>
   d58ce:	2216      	movs	r2, #22
   d58d0:	a903      	add	r1, sp, #12
   d58d2:	2004      	movs	r0, #4
   d58d4:	f002 fcb8 	bl	d8248 <HAL_EEPROM_Get>
        displaySensorOffsets(calibrationData);
   d58d8:	a803      	add	r0, sp, #12
   d58da:	f7fe fd6b 	bl	d43b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
        Serial.println("\n\nRestoring Calibration data to the BNO055...");
   d58de:	f003 ffc1 	bl	d9864 <_Z16_fetch_usbserialv>
   d58e2:	492a      	ldr	r1, [pc, #168]	; (d598c <setup+0x39c>)
   d58e4:	f003 f9b3 	bl	d8c4e <_ZN5Print7printlnEPKc>
        bno.setSensorOffsets(calibrationData);
   d58e8:	a903      	add	r1, sp, #12
   d58ea:	4821      	ldr	r0, [pc, #132]	; (d5970 <setup+0x380>)
   d58ec:	f001 f925 	bl	d6b3a <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>
        Serial.println("\n\nCalibration data loaded into BNO055");
   d58f0:	f003 ffb8 	bl	d9864 <_Z16_fetch_usbserialv>
   d58f4:	4926      	ldr	r1, [pc, #152]	; (d5990 <setup+0x3a0>)
   d58f6:	f003 f9aa 	bl	d8c4e <_ZN5Print7printlnEPKc>
        foundCalib = true;
   d58fa:	e7b3      	b.n	d5864 <setup+0x274>
   d58fc:	000ddd01 	.word	0x000ddd01
   d5900:	2003e520 	.word	0x2003e520
   d5904:	000ddd08 	.word	0x000ddd08
   d5908:	2003e570 	.word	0x2003e570
   d590c:	2003e3ce 	.word	0x2003e3ce
   d5910:	000ddcdc 	.word	0x000ddcdc
   d5914:	000ddc9a 	.word	0x000ddc9a
   d5918:	2003e3cc 	.word	0x2003e3cc
   d591c:	2003e3cd 	.word	0x2003e3cd
   d5920:	000ddd23 	.word	0x000ddd23
   d5924:	000d40c9 	.word	0x000d40c9
   d5928:	000ddd40 	.word	0x000ddd40
   d592c:	000ddd56 	.word	0x000ddd56
   d5930:	2003e4bc 	.word	0x2003e4bc
   d5934:	000ddd64 	.word	0x000ddd64
   d5938:	000ddd70 	.word	0x000ddd70
   d593c:	000ddd8d 	.word	0x000ddd8d
   d5940:	000ddd98 	.word	0x000ddd98
   d5944:	000ddda4 	.word	0x000ddda4
   d5948:	000dddc4 	.word	0x000dddc4
   d594c:	2003e458 	.word	0x2003e458
   d5950:	000dddd0 	.word	0x000dddd0
   d5954:	000dde18 	.word	0x000dde18
   d5958:	000dde29 	.word	0x000dde29
   d595c:	000dde70 	.word	0x000dde70
   d5960:	000dde9a 	.word	0x000dde9a
   d5964:	000ddec4 	.word	0x000ddec4
   d5968:	2003e518 	.word	0x2003e518
   d596c:	000ddeee 	.word	0x000ddeee
   d5970:	2003e49c 	.word	0x2003e49c
   d5974:	000ddf37 	.word	0x000ddf37
   d5978:	000ddeff 	.word	0x000ddeff
   d597c:	000ddf74 	.word	0x000ddf74
   d5980:	2003e534 	.word	0x2003e534
   d5984:	000de02c 	.word	0x000de02c
   d5988:	000ddfaa 	.word	0x000ddfaa
   d598c:	000ddfd8 	.word	0x000ddfd8
   d5990:	000de006 	.word	0x000de006
        Serial.println("Please Calibrate Sensor: ");
   d5994:	f003 ff66 	bl	d9864 <_Z16_fetch_usbserialv>
   d5998:	493e      	ldr	r1, [pc, #248]	; (d5a94 <setup+0x4a4>)
        while (!bno.isFullyCalibrated())
   d599a:	4c3f      	ldr	r4, [pc, #252]	; (d5a98 <setup+0x4a8>)
            Serial.print("X: ");
   d599c:	4e3f      	ldr	r6, [pc, #252]	; (d5a9c <setup+0x4ac>)
            Serial.print("\tY: ");
   d599e:	4d40      	ldr	r5, [pc, #256]	; (d5aa0 <setup+0x4b0>)
        Serial.println("Please Calibrate Sensor: ");
   d59a0:	f003 f955 	bl	d8c4e <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
   d59a4:	4620      	mov	r0, r4
   d59a6:	f001 f9e0 	bl	d6d6a <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d59aa:	bb98      	cbnz	r0, d5a14 <setup+0x424>
            bno.getEvent(&event);
   d59ac:	a90f      	add	r1, sp, #60	; 0x3c
   d59ae:	4620      	mov	r0, r4
   d59b0:	f001 fb32 	bl	d7018 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            Serial.print("X: ");
   d59b4:	f003 ff56 	bl	d9864 <_Z16_fetch_usbserialv>
   d59b8:	4631      	mov	r1, r6
   d59ba:	f003 f931 	bl	d8c20 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.x, 4);
   d59be:	f003 ff51 	bl	d9864 <_Z16_fetch_usbserialv>
   d59c2:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   d59c6:	2104      	movs	r1, #4
   d59c8:	f003 fa64 	bl	d8e94 <_ZN5Print5printEfi>
            Serial.print("\tY: ");
   d59cc:	f003 ff4a 	bl	d9864 <_Z16_fetch_usbserialv>
   d59d0:	4629      	mov	r1, r5
   d59d2:	f003 f925 	bl	d8c20 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.y, 4);
   d59d6:	f003 ff45 	bl	d9864 <_Z16_fetch_usbserialv>
   d59da:	ed9d 0a15 	vldr	s0, [sp, #84]	; 0x54
   d59de:	2104      	movs	r1, #4
   d59e0:	f003 fa58 	bl	d8e94 <_ZN5Print5printEfi>
            Serial.print("\tZ: ");
   d59e4:	f003 ff3e 	bl	d9864 <_Z16_fetch_usbserialv>
   d59e8:	492e      	ldr	r1, [pc, #184]	; (d5aa4 <setup+0x4b4>)
   d59ea:	f003 f919 	bl	d8c20 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.z, 4);
   d59ee:	f003 ff39 	bl	d9864 <_Z16_fetch_usbserialv>
   d59f2:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   d59f6:	2104      	movs	r1, #4
   d59f8:	f003 fa4c 	bl	d8e94 <_ZN5Print5printEfi>
            displayCalStatus();
   d59fc:	f7ff f80c 	bl	d4a18 <_Z16displayCalStatusv>
            Serial.println("");
   d5a00:	f003 ff30 	bl	d9864 <_Z16_fetch_usbserialv>
   d5a04:	4928      	ldr	r1, [pc, #160]	; (d5aa8 <setup+0x4b8>)
   d5a06:	f003 f922 	bl	d8c4e <_ZN5Print7printlnEPKc>
            delay(BNO055_STARTUP_SAMPLE_DELAY_MS);
   d5a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5a0e:	f003 faf7 	bl	d9000 <delay>
        while (!bno.isFullyCalibrated())
   d5a12:	e7c7      	b.n	d59a4 <setup+0x3b4>
    Serial.println("\nFully calibrated!");
   d5a14:	f003 ff26 	bl	d9864 <_Z16_fetch_usbserialv>
   d5a18:	4924      	ldr	r1, [pc, #144]	; (d5aac <setup+0x4bc>)
   d5a1a:	f003 f918 	bl	d8c4e <_ZN5Print7printlnEPKc>
    Serial.println("--------------------------------");
   d5a1e:	f003 ff21 	bl	d9864 <_Z16_fetch_usbserialv>
   d5a22:	4923      	ldr	r1, [pc, #140]	; (d5ab0 <setup+0x4c0>)
   d5a24:	f003 f913 	bl	d8c4e <_ZN5Print7printlnEPKc>
    Serial.println("Calibration Results: ");
   d5a28:	f003 ff1c 	bl	d9864 <_Z16_fetch_usbserialv>
   d5a2c:	4921      	ldr	r1, [pc, #132]	; (d5ab4 <setup+0x4c4>)
   d5a2e:	f003 f90e 	bl	d8c4e <_ZN5Print7printlnEPKc>
    bno.getSensorOffsets(newCalib);
   d5a32:	a909      	add	r1, sp, #36	; 0x24
   d5a34:	4818      	ldr	r0, [pc, #96]	; (d5a98 <setup+0x4a8>)
   d5a36:	f001 f9d1 	bl	d6ddc <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>
    displaySensorOffsets(newCalib);
   d5a3a:	a809      	add	r0, sp, #36	; 0x24
   d5a3c:	f7fe fcba 	bl	d43b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
    Serial.println("\n\nStoring calibration data to EEPROM...");
   d5a40:	f003 ff10 	bl	d9864 <_Z16_fetch_usbserialv>
   d5a44:	491c      	ldr	r1, [pc, #112]	; (d5ab8 <setup+0x4c8>)
   d5a46:	f003 f902 	bl	d8c4e <_ZN5Print7printlnEPKc>
    bno.getSensor(&sensor);
   d5a4a:	a918      	add	r1, sp, #96	; 0x60
   d5a4c:	4812      	ldr	r0, [pc, #72]	; (d5a98 <setup+0x4a8>)
   d5a4e:	f000 fff5 	bl	d6a3c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    bnoID = sensor.sensor_id;
   d5a52:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d5a54:	9302      	str	r3, [sp, #8]
    EEPROM.put(eeAddress, bnoID);
   d5a56:	f004 f9f1 	bl	d9e3c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5a5a:	a902      	add	r1, sp, #8
   d5a5c:	2204      	movs	r2, #4
   d5a5e:	2000      	movs	r0, #0
   d5a60:	f002 fbfa 	bl	d8258 <HAL_EEPROM_Put>
    EEPROM.put(eeAddress, newCalib);
   d5a64:	f004 f9ea 	bl	d9e3c <_Z21__fetch_global_EEPROMv>
   d5a68:	2216      	movs	r2, #22
   d5a6a:	a909      	add	r1, sp, #36	; 0x24
   d5a6c:	2004      	movs	r0, #4
   d5a6e:	f002 fbf3 	bl	d8258 <HAL_EEPROM_Put>
    Serial.println("Data stored to EEPROM.");
   d5a72:	f003 fef7 	bl	d9864 <_Z16_fetch_usbserialv>
   d5a76:	4911      	ldr	r1, [pc, #68]	; (d5abc <setup+0x4cc>)
   d5a78:	f003 f8e9 	bl	d8c4e <_ZN5Print7printlnEPKc>
    Serial.println("\n--------------------------------\n");
   d5a7c:	f003 fef2 	bl	d9864 <_Z16_fetch_usbserialv>
   d5a80:	490f      	ldr	r1, [pc, #60]	; (d5ac0 <setup+0x4d0>)
   d5a82:	f003 f8e4 	bl	d8c4e <_ZN5Print7printlnEPKc>
    delay(500);
   d5a86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5a8a:	f003 fab9 	bl	d9000 <delay>
}
   d5a8e:	b022      	add	sp, #136	; 0x88
   d5a90:	bd70      	pop	{r4, r5, r6, pc}
   d5a92:	bf00      	nop
   d5a94:	000de05c 	.word	0x000de05c
   d5a98:	2003e49c 	.word	0x2003e49c
   d5a9c:	000ddc9c 	.word	0x000ddc9c
   d5aa0:	000ddca0 	.word	0x000ddca0
   d5aa4:	000ddca5 	.word	0x000ddca5
   d5aa8:	000ddb67 	.word	0x000ddb67
   d5aac:	000de076 	.word	0x000de076
   d5ab0:	000dd9ec 	.word	0x000dd9ec
   d5ab4:	000de089 	.word	0x000de089
   d5ab8:	000de09f 	.word	0x000de09f
   d5abc:	000de0c7 	.word	0x000de0c7
   d5ac0:	000de0de 	.word	0x000de0de

000d5ac4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d5ac4:	4770      	bx	lr

000d5ac6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d5ac6:	b510      	push	{r4, lr}
  }
   d5ac8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d5aca:	4604      	mov	r4, r0
  }
   d5acc:	f004 fa0a 	bl	d9ee4 <_ZdlPvj>
   d5ad0:	4620      	mov	r0, r4
   d5ad2:	bd10      	pop	{r4, pc}

000d5ad4 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5ad4:	b40e      	push	{r1, r2, r3}
   d5ad6:	b503      	push	{r0, r1, lr}
   d5ad8:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d5ada:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5adc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d5ae0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d5ae2:	f003 fa03 	bl	d8eec <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d5ae6:	b002      	add	sp, #8
   d5ae8:	f85d eb04 	ldr.w	lr, [sp], #4
   d5aec:	b003      	add	sp, #12
   d5aee:	4770      	bx	lr

000d5af0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5af0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5af2:	4604      	mov	r4, r0
   d5af4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d5af6:	7922      	ldrb	r2, [r4, #4]
   d5af8:	68a3      	ldr	r3, [r4, #8]
   d5afa:	b132      	cbz	r2, d5b0a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d5afc:	b9a3      	cbnz	r3, d5b28 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d5afe:	490b      	ldr	r1, [pc, #44]	; (d5b2c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d5b00:	b002      	add	sp, #8
   d5b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d5b06:	f003 b88b 	b.w	d8c20 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5b0a:	4a09      	ldr	r2, [pc, #36]	; (d5b30 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d5b0c:	7b26      	ldrb	r6, [r4, #12]
   d5b0e:	4d09      	ldr	r5, [pc, #36]	; (d5b34 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d5b10:	4909      	ldr	r1, [pc, #36]	; (d5b38 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d5b12:	7b64      	ldrb	r4, [r4, #13]
   d5b14:	2e01      	cmp	r6, #1
   d5b16:	bf18      	it	ne
   d5b18:	4629      	movne	r1, r5
   d5b1a:	e9cd 1400 	strd	r1, r4, [sp]
   d5b1e:	4907      	ldr	r1, [pc, #28]	; (d5b3c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d5b20:	f7ff ffd8 	bl	d5ad4 <_ZN5Print6printfEPKcz>
  }
   d5b24:	b002      	add	sp, #8
   d5b26:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5b28:	4a05      	ldr	r2, [pc, #20]	; (d5b40 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d5b2a:	e7ef      	b.n	d5b0c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d5b2c:	000de112 	.word	0x000de112
   d5b30:	000ddb67 	.word	0x000ddb67
   d5b34:	000de10e 	.word	0x000de10e
   d5b38:	000de10a 	.word	0x000de10a
   d5b3c:	000de128 	.word	0x000de128
   d5b40:	000de101 	.word	0x000de101

000d5b44 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d5b44:	f04f 33ff 	mov.w	r3, #4294967295
   d5b48:	6103      	str	r3, [r0, #16]
{ }
   d5b4a:	4770      	bx	lr

000d5b4c <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d5b4c:	6880      	ldr	r0, [r0, #8]
   d5b4e:	4770      	bx	lr

000d5b50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d5b50:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d5b52:	4c0b      	ldr	r4, [pc, #44]	; (d5b80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d5b54:	7821      	ldrb	r1, [r4, #0]
   d5b56:	f3bf 8f5b 	dmb	ish
   d5b5a:	f011 0101 	ands.w	r1, r1, #1
   d5b5e:	d10b      	bne.n	d5b78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5b60:	4620      	mov	r0, r4
   d5b62:	9101      	str	r1, [sp, #4]
   d5b64:	f7fe faa8 	bl	d40b8 <__cxa_guard_acquire>
   d5b68:	9901      	ldr	r1, [sp, #4]
   d5b6a:	b128      	cbz	r0, d5b78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5b6c:	4805      	ldr	r0, [pc, #20]	; (d5b84 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d5b6e:	f002 fe2b 	bl	d87c8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5b72:	4620      	mov	r0, r4
   d5b74:	f7fe faa5 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d5b78:	4802      	ldr	r0, [pc, #8]	; (d5b84 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d5b7a:	b002      	add	sp, #8
   d5b7c:	bd10      	pop	{r4, pc}
   d5b7e:	bf00      	nop
   d5b80:	2003e578 	.word	0x2003e578
   d5b84:	2003e57c 	.word	0x2003e57c

000d5b88 <_ZN15Adafruit_BME2807spixferEh>:
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sck == -1)
   d5b8c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5b90:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5b92:	4605      	mov	r5, r0
   d5b94:	460f      	mov	r7, r1
    if (_sck == -1)
   d5b96:	d106      	bne.n	d5ba6 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5b98:	f7ff ffda 	bl	d5b50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5b9c:	4639      	mov	r1, r7
}
   d5b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d5ba2:	f002 beb3 	b.w	d890c <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d5ba6:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d5ba8:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d5baa:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d5bae:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d5bb2:	2100      	movs	r1, #0
   d5bb4:	b280      	uxth	r0, r0
   d5bb6:	f004 f8fe 	bl	d9db6 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d5bba:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d5bbe:	fa08 f106 	lsl.w	r1, r8, r6
   d5bc2:	4039      	ands	r1, r7
   d5bc4:	b280      	uxth	r0, r0
   d5bc6:	f004 f8f6 	bl	d9db6 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d5bca:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d5bce:	2101      	movs	r1, #1
   d5bd0:	b280      	uxth	r0, r0
   d5bd2:	f004 f8f0 	bl	d9db6 <digitalWrite>
        if (digitalRead(_miso))
   d5bd6:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d5bda:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d5bdc:	b280      	uxth	r0, r0
        reply <<= 1;
   d5bde:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d5be0:	f004 f902 	bl	d9de8 <digitalRead>
   d5be4:	b108      	cbz	r0, d5bea <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d5be6:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d5bea:	3e01      	subs	r6, #1
   d5bec:	d2df      	bcs.n	d5bae <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d5bee:	4620      	mov	r0, r4
   d5bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5bf4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d5bf4:	b508      	push	{r3, lr}
        instance().endTransaction();
   d5bf6:	f7ff ffab 	bl	d5b50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d5bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d5bfe:	f002 bdfe 	b.w	d87fe <_ZN8SPIClass14endTransactionEv>

000d5c02 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d5c02:	b507      	push	{r0, r1, r2, lr}
   d5c04:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d5c06:	f7ff ffa3 	bl	d5b50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5c0a:	9901      	ldr	r1, [sp, #4]
    }
   d5c0c:	b003      	add	sp, #12
   d5c0e:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d5c12:	f002 be0d 	b.w	d8830 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d5c18 <_ZN15Adafruit_BME2806read24Eh>:
{
   d5c18:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5c1a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5c1e:	3301      	adds	r3, #1
{
   d5c20:	b085      	sub	sp, #20
   d5c22:	4604      	mov	r4, r0
   d5c24:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5c26:	d123      	bne.n	d5c70 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5c28:	7901      	ldrb	r1, [r0, #4]
   d5c2a:	6800      	ldr	r0, [r0, #0]
   d5c2c:	f003 ffba 	bl	d9ba4 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5c30:	6820      	ldr	r0, [r4, #0]
   d5c32:	6803      	ldr	r3, [r0, #0]
   d5c34:	4629      	mov	r1, r5
   d5c36:	689b      	ldr	r3, [r3, #8]
   d5c38:	4798      	blx	r3
        _wire -> endTransmission();
   d5c3a:	6820      	ldr	r0, [r4, #0]
   d5c3c:	f003 ffba 	bl	d9bb4 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d5c40:	7921      	ldrb	r1, [r4, #4]
   d5c42:	6820      	ldr	r0, [r4, #0]
   d5c44:	2203      	movs	r2, #3
   d5c46:	f003 ffaa 	bl	d9b9e <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d5c4a:	6820      	ldr	r0, [r4, #0]
   d5c4c:	6803      	ldr	r3, [r0, #0]
   d5c4e:	695b      	ldr	r3, [r3, #20]
   d5c50:	4798      	blx	r3
        value <<= 8;
   d5c52:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5c54:	6820      	ldr	r0, [r4, #0]
   d5c56:	6803      	ldr	r3, [r0, #0]
   d5c58:	695b      	ldr	r3, [r3, #20]
   d5c5a:	4798      	blx	r3
   d5c5c:	4328      	orrs	r0, r5
        value <<= 8;
   d5c5e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5c60:	6820      	ldr	r0, [r4, #0]
   d5c62:	6803      	ldr	r3, [r0, #0]
   d5c64:	695b      	ldr	r3, [r3, #20]
   d5c66:	4798      	blx	r3
   d5c68:	4305      	orrs	r5, r0
}
   d5c6a:	4628      	mov	r0, r5
   d5c6c:	b005      	add	sp, #20
   d5c6e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5c70:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5c74:	3301      	adds	r3, #1
   d5c76:	d10c      	bne.n	d5c92 <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d5c78:	4b1a      	ldr	r3, [pc, #104]	; (d5ce4 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d5c7a:	9300      	str	r3, [sp, #0]
   d5c7c:	2300      	movs	r3, #0
   d5c7e:	f88d 3004 	strb.w	r3, [sp, #4]
   d5c82:	4b19      	ldr	r3, [pc, #100]	; (d5ce8 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d5c84:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5c86:	4668      	mov	r0, sp
   d5c88:	2301      	movs	r3, #1
   d5c8a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5c8e:	f7ff ffb8 	bl	d5c02 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5c92:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5c96:	2100      	movs	r1, #0
   d5c98:	b280      	uxth	r0, r0
   d5c9a:	f004 f88c 	bl	d9db6 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5c9e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5ca2:	4620      	mov	r0, r4
   d5ca4:	f7ff ff70 	bl	d5b88 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5ca8:	2100      	movs	r1, #0
   d5caa:	4620      	mov	r0, r4
   d5cac:	f7ff ff6c 	bl	d5b88 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d5cb0:	2100      	movs	r1, #0
        value <<= 8;
   d5cb2:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5cb4:	4620      	mov	r0, r4
   d5cb6:	f7ff ff67 	bl	d5b88 <_ZN15Adafruit_BME2807spixferEh>
   d5cba:	4328      	orrs	r0, r5
        value <<= 8;
   d5cbc:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5cbe:	2100      	movs	r1, #0
   d5cc0:	4620      	mov	r0, r4
   d5cc2:	f7ff ff61 	bl	d5b88 <_ZN15Adafruit_BME2807spixferEh>
   d5cc6:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d5cc8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5ccc:	2101      	movs	r1, #1
   d5cce:	b280      	uxth	r0, r0
   d5cd0:	f004 f871 	bl	d9db6 <digitalWrite>
        if (_sck == -1)
   d5cd4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5cd8:	3301      	adds	r3, #1
   d5cda:	d1c6      	bne.n	d5c6a <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d5cdc:	f7ff ff8a 	bl	d5bf4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d5ce0:	e7c3      	b.n	d5c6a <_ZN15Adafruit_BME2806read24Eh+0x52>
   d5ce2:	bf00      	nop
   d5ce4:	000de150 	.word	0x000de150
   d5ce8:	0007a120 	.word	0x0007a120

000d5cec <_ZN15Adafruit_BME28015readTemperatureEv>:
{
   d5cec:	b510      	push	{r4, lr}
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5cee:	21fa      	movs	r1, #250	; 0xfa
{
   d5cf0:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5cf2:	f7ff ff91 	bl	d5c18 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d5cf6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d5cfa:	d01e      	beq.n	d5d3a <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5cfc:	8aa1      	ldrh	r1, [r4, #20]
    return T/100;
   d5cfe:	ed9f 7a10 	vldr	s14, [pc, #64]	; d5d40 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5d02:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5d04:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5d08:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d5d0c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5d10:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5d12:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d5d14:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d5d18:	1312      	asrs	r2, r2, #12
   d5d1a:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5d1c:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d5d1e:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d5d22:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d5d24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5d28:	3380      	adds	r3, #128	; 0x80
   d5d2a:	121b      	asrs	r3, r3, #8
   d5d2c:	ee07 3a90 	vmov	s15, r3
   d5d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d5d34:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d5d38:	bd10      	pop	{r4, pc}
        return NAN;
   d5d3a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5d44 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d5d3e:	e7fb      	b.n	d5d38 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d5d40:	42c80000 	.word	0x42c80000
   d5d44:	7fc00000 	.word	0x7fc00000

000d5d48 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   d5d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5d4c:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5d4e:	f7ff ffcd 	bl	d5cec <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5d52:	21f7      	movs	r1, #247	; 0xf7
   d5d54:	4620      	mov	r0, r4
   d5d56:	f7ff ff5f 	bl	d5c18 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5d5a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5d5e:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5d60:	f000 80bf 	beq.w	d5ee2 <_ZN15Adafruit_BME28012readPressureEv+0x19a>
    var1 = ((int64_t)t_fine) - 128000;
   d5d64:	68e0      	ldr	r0, [r4, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5d66:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
   d5d6a:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d5d6e:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d5d72:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5d76:	fba3 8903 	umull	r8, r9, r3, r3
   d5d7a:	fb03 f102 	mul.w	r1, r3, r2
   d5d7e:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5d82:	17f7      	asrs	r7, r6, #31
   d5d84:	fb06 f102 	mul.w	r1, r6, r2
   d5d88:	fb03 1107 	mla	r1, r3, r7, r1
   d5d8c:	fba6 6703 	umull	r6, r7, r6, r3
   d5d90:	440f      	add	r7, r1
   d5d92:	0339      	lsls	r1, r7, #12
   d5d94:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d5d98:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5d9a:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
   d5d9e:	17f7      	asrs	r7, r6, #31
   d5da0:	fb06 fc09 	mul.w	ip, r6, r9
   d5da4:	fb08 cc07 	mla	ip, r8, r7, ip
   d5da8:	fba6 6708 	umull	r6, r7, r6, r8
   d5dac:	4467      	add	r7, ip
   d5dae:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d5db2:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5db6:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5db8:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d5dbc:	eb1c 0000 	adds.w	r0, ip, r0
   d5dc0:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5dc4:	3000      	adds	r0, #0
   d5dc6:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d5dca:	fba0 0106 	umull	r0, r1, r0, r6
   d5dce:	fb06 110e 	mla	r1, r6, lr, r1
   d5dd2:	104e      	asrs	r6, r1, #1
   d5dd4:	17cf      	asrs	r7, r1, #31
    if (var1 == 0) {
   d5dd6:	ea56 0107 	orrs.w	r1, r6, r7
   d5dda:	f000 8085 	beq.w	d5ee8 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5dde:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
   d5de2:	fb00 fc09 	mul.w	ip, r0, r9
   d5de6:	17c1      	asrs	r1, r0, #31
   d5de8:	fb08 cc01 	mla	ip, r8, r1, ip
   d5dec:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5df0:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
   d5df4:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d5df8:	fb08 f202 	mul.w	r2, r8, r2
   d5dfc:	fb03 2209 	mla	r2, r3, r9, r2
   d5e00:	fba8 8903 	umull	r8, r9, r8, r3
   d5e04:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5e06:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5e08:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d5e0c:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d5e10:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5e12:	1812      	adds	r2, r2, r0
    p = 1048576 - adc_P;
   d5e14:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5e18:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5e1c:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5e20:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5e24:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d5e26:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5e28:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d5e2a:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d5e2e:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5e32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d5e36:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d5e3a:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d5e3e:	1ac0      	subs	r0, r0, r3
   d5e40:	f640 4335 	movw	r3, #3125	; 0xc35
   d5e44:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d5e48:	fba0 0103 	umull	r0, r1, r0, r3
   d5e4c:	fb03 110e 	mla	r1, r3, lr, r1
   d5e50:	4632      	mov	r2, r6
   d5e52:	463b      	mov	r3, r7
   d5e54:	f007 fad0 	bl	dd3f8 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5e58:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d5e5c:	134d      	asrs	r5, r1, #13
   d5e5e:	0b46      	lsrs	r6, r0, #13
   d5e60:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d5e64:	fb02 f705 	mul.w	r7, r2, r5
   d5e68:	17d3      	asrs	r3, r2, #31
   d5e6a:	fb06 7703 	mla	r7, r6, r3, r7
   d5e6e:	fba2 2306 	umull	r2, r3, r2, r6
   d5e72:	443b      	add	r3, r7
   d5e74:	4355      	muls	r5, r2
   d5e76:	fb06 5503 	mla	r5, r6, r3, r5
   d5e7a:	fba2 2306 	umull	r2, r3, r2, r6
   d5e7e:	442b      	add	r3, r5
   d5e80:	0e55      	lsrs	r5, r2, #25
   d5e82:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5e86:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5e8a:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   d5e8e:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5e90:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5e94:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5e98:	17d3      	asrs	r3, r2, #31
   d5e9a:	4351      	muls	r1, r2
   d5e9c:	fb00 1103 	mla	r1, r0, r3, r1
   d5ea0:	fba2 2300 	umull	r2, r3, r2, r0
   d5ea4:	440b      	add	r3, r1
   d5ea6:	0cd1      	lsrs	r1, r2, #19
   d5ea8:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5eac:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5eae:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5eb2:	eb46 0300 	adc.w	r3, r6, r0
   d5eb6:	0a2a      	lsrs	r2, r5, #8
   d5eb8:	17e5      	asrs	r5, r4, #31
   d5eba:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d5ebe:	1219      	asrs	r1, r3, #8
   d5ec0:	0120      	lsls	r0, r4, #4
   d5ec2:	012b      	lsls	r3, r5, #4
   d5ec4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d5ec8:	1880      	adds	r0, r0, r2
   d5eca:	eb43 0101 	adc.w	r1, r3, r1
   d5ece:	f007 fa55 	bl	dd37c <__aeabi_l2f>
   d5ed2:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5ef0 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d5ed6:	ee07 0a90 	vmov	s15, r0
   d5eda:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d5ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d5ee2:	ed9f 0a04 	vldr	s0, [pc, #16]	; d5ef4 <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d5ee6:	e7fa      	b.n	d5ede <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d5ee8:	ed9f 0a03 	vldr	s0, [pc, #12]	; d5ef8 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d5eec:	e7f7      	b.n	d5ede <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d5eee:	bf00      	nop
   d5ef0:	3b800000 	.word	0x3b800000
   d5ef4:	7fc00000 	.word	0x7fc00000
	...

000d5f00 <_ZN15Adafruit_BME28012readAltitudeEf>:
{
   d5f00:	b508      	push	{r3, lr}
   d5f02:	ed2d 8b02 	vpush	{d8}
   d5f06:	eeb0 8a40 	vmov.f32	s16, s0
    float atmospheric = readPressure() / 100.0F;
   d5f0a:	f7ff ff1d 	bl	d5d48 <_ZN15Adafruit_BME28012readPressureEv>
   d5f0e:	ed9f 7a16 	vldr	s14, [pc, #88]	; d5f68 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d5f12:	eec0 7a07 	vdiv.f32	s15, s0, s14
      return pow(__type(__x), __type(__y));
   d5f16:	eec7 7a88 	vdiv.f32	s15, s15, s16
   d5f1a:	ee17 0a90 	vmov	r0, s15
   d5f1e:	f006 fdbd 	bl	dca9c <__aeabi_f2d>
   d5f22:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d5f58 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d5f26:	ec41 0b10 	vmov	d0, r0, r1
   d5f2a:	f004 f879 	bl	da020 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d5f2e:	490f      	ldr	r1, [pc, #60]	; (d5f6c <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d5f30:	ec53 2b10 	vmov	r2, r3, d0
   d5f34:	2000      	movs	r0, #0
   d5f36:	f006 fc51 	bl	dc7dc <__aeabi_dsub>
   d5f3a:	a309      	add	r3, pc, #36	; (adr r3, d5f60 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d5f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f40:	f006 fe04 	bl	dcb4c <__aeabi_dmul>
   d5f44:	f007 f8fa 	bl	dd13c <__aeabi_d2f>
}
   d5f48:	ecbd 8b02 	vpop	{d8}
   d5f4c:	ee00 0a10 	vmov	s0, r0
   d5f50:	bd08      	pop	{r3, pc}
   d5f52:	bf00      	nop
   d5f54:	f3af 8000 	nop.w
   d5f58:	1a36e2eb 	.word	0x1a36e2eb
   d5f5c:	3fc85bc0 	.word	0x3fc85bc0
   d5f60:	00000000 	.word	0x00000000
   d5f64:	40e5a540 	.word	0x40e5a540
   d5f68:	42c80000 	.word	0x42c80000
   d5f6c:	3ff00000 	.word	0x3ff00000

000d5f70 <_ZN15Adafruit_BME2806read16Eh>:
{
   d5f70:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5f72:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5f76:	3301      	adds	r3, #1
{
   d5f78:	b085      	sub	sp, #20
   d5f7a:	4604      	mov	r4, r0
   d5f7c:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5f7e:	d11f      	bne.n	d5fc0 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5f80:	7901      	ldrb	r1, [r0, #4]
   d5f82:	6800      	ldr	r0, [r0, #0]
   d5f84:	f003 fe0e 	bl	d9ba4 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5f88:	6820      	ldr	r0, [r4, #0]
   d5f8a:	6803      	ldr	r3, [r0, #0]
   d5f8c:	4629      	mov	r1, r5
   d5f8e:	689b      	ldr	r3, [r3, #8]
   d5f90:	4798      	blx	r3
        _wire -> endTransmission();
   d5f92:	6820      	ldr	r0, [r4, #0]
   d5f94:	f003 fe0e 	bl	d9bb4 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d5f98:	7921      	ldrb	r1, [r4, #4]
   d5f9a:	6820      	ldr	r0, [r4, #0]
   d5f9c:	2202      	movs	r2, #2
   d5f9e:	f003 fdfe 	bl	d9b9e <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d5fa2:	6820      	ldr	r0, [r4, #0]
   d5fa4:	6803      	ldr	r3, [r0, #0]
   d5fa6:	695b      	ldr	r3, [r3, #20]
   d5fa8:	4798      	blx	r3
   d5faa:	4605      	mov	r5, r0
   d5fac:	6820      	ldr	r0, [r4, #0]
   d5fae:	6803      	ldr	r3, [r0, #0]
   d5fb0:	695b      	ldr	r3, [r3, #20]
   d5fb2:	4798      	blx	r3
   d5fb4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5fb8:	b285      	uxth	r5, r0
}
   d5fba:	4628      	mov	r0, r5
   d5fbc:	b005      	add	sp, #20
   d5fbe:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5fc0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5fc4:	3301      	adds	r3, #1
   d5fc6:	d10c      	bne.n	d5fe2 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d5fc8:	4b18      	ldr	r3, [pc, #96]	; (d602c <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d5fca:	9300      	str	r3, [sp, #0]
   d5fcc:	2300      	movs	r3, #0
   d5fce:	f88d 3004 	strb.w	r3, [sp, #4]
   d5fd2:	4b17      	ldr	r3, [pc, #92]	; (d6030 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d5fd4:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5fd6:	4668      	mov	r0, sp
   d5fd8:	2301      	movs	r3, #1
   d5fda:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5fde:	f7ff fe10 	bl	d5c02 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5fe2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5fe6:	2100      	movs	r1, #0
   d5fe8:	b280      	uxth	r0, r0
   d5fea:	f003 fee4 	bl	d9db6 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5fee:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5ff2:	4620      	mov	r0, r4
   d5ff4:	f7ff fdc8 	bl	d5b88 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5ff8:	2100      	movs	r1, #0
   d5ffa:	4620      	mov	r0, r4
   d5ffc:	f7ff fdc4 	bl	d5b88 <_ZN15Adafruit_BME2807spixferEh>
   d6000:	2100      	movs	r1, #0
   d6002:	4605      	mov	r5, r0
   d6004:	4620      	mov	r0, r4
   d6006:	f7ff fdbf 	bl	d5b88 <_ZN15Adafruit_BME2807spixferEh>
   d600a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d600e:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d6010:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6014:	2101      	movs	r1, #1
   d6016:	b280      	uxth	r0, r0
   d6018:	f003 fecd 	bl	d9db6 <digitalWrite>
        if (_sck == -1)
   d601c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d6020:	3301      	adds	r3, #1
   d6022:	d1ca      	bne.n	d5fba <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d6024:	f7ff fde6 	bl	d5bf4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d6028:	e7c7      	b.n	d5fba <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d602a:	bf00      	nop
   d602c:	000de150 	.word	0x000de150
   d6030:	0007a120 	.word	0x0007a120

000d6034 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d6034:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d6036:	f7ff ff9b 	bl	d5f70 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d603a:	ba40      	rev16	r0, r0
}
   d603c:	b280      	uxth	r0, r0
   d603e:	bd08      	pop	{r3, pc}

000d6040 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
   d6040:	b538      	push	{r3, r4, r5, lr}
   d6042:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d6044:	f7ff fe52 	bl	d5cec <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d6048:	21fd      	movs	r1, #253	; 0xfd
   d604a:	4620      	mov	r0, r4
   d604c:	f7ff ff90 	bl	d5f70 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d6050:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d6054:	d038      	beq.n	d60c8 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d6056:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d605a:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d605c:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d6060:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d6062:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d6066:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d606a:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d606e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d6072:	13d9      	asrs	r1, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d6074:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d6078:	4353      	muls	r3, r2
   d607a:	12db      	asrs	r3, r3, #11
   d607c:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d6080:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d6084:	4353      	muls	r3, r2
   d6086:	129b      	asrs	r3, r3, #10
   d6088:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d608a:	129b      	asrs	r3, r3, #10
   d608c:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d6090:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d6094:	4353      	muls	r3, r2
   d6096:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d609a:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d609c:	434b      	muls	r3, r1
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d609e:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d60a0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d60a4:	4352      	muls	r2, r2
   d60a6:	11d2      	asrs	r2, r2, #7
   d60a8:	434a      	muls	r2, r1
   d60aa:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d60ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d60b2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d60b6:	bfa8      	it	ge
   d60b8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d60bc:	131b      	asrs	r3, r3, #12
   d60be:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d60c2:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d60c6:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d60c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d60d0 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d60cc:	e7fb      	b.n	d60c6 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d60ce:	bf00      	nop
   d60d0:	7fc00000 	.word	0x7fc00000

000d60d4 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d60d4:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d60d6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d60da:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d60dc:	b085      	sub	sp, #20
   d60de:	4604      	mov	r4, r0
   d60e0:	460d      	mov	r5, r1
    if (_cs == -1) {
   d60e2:	d118      	bne.n	d6116 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d60e4:	7901      	ldrb	r1, [r0, #4]
   d60e6:	6800      	ldr	r0, [r0, #0]
   d60e8:	f003 fd5c 	bl	d9ba4 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d60ec:	6820      	ldr	r0, [r4, #0]
   d60ee:	6803      	ldr	r3, [r0, #0]
   d60f0:	4629      	mov	r1, r5
   d60f2:	689b      	ldr	r3, [r3, #8]
   d60f4:	4798      	blx	r3
        _wire -> endTransmission();
   d60f6:	6820      	ldr	r0, [r4, #0]
   d60f8:	f003 fd5c 	bl	d9bb4 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d60fc:	7921      	ldrb	r1, [r4, #4]
   d60fe:	6820      	ldr	r0, [r4, #0]
   d6100:	2201      	movs	r2, #1
   d6102:	f003 fd4c 	bl	d9b9e <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d6106:	6820      	ldr	r0, [r4, #0]
   d6108:	6803      	ldr	r3, [r0, #0]
   d610a:	695b      	ldr	r3, [r3, #20]
   d610c:	4798      	blx	r3
   d610e:	b2c5      	uxtb	r5, r0
}
   d6110:	4628      	mov	r0, r5
   d6112:	b005      	add	sp, #20
   d6114:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d6116:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d611a:	3301      	adds	r3, #1
   d611c:	d10c      	bne.n	d6138 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d611e:	4b15      	ldr	r3, [pc, #84]	; (d6174 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d6120:	9300      	str	r3, [sp, #0]
   d6122:	2300      	movs	r3, #0
   d6124:	f88d 3004 	strb.w	r3, [sp, #4]
   d6128:	4b13      	ldr	r3, [pc, #76]	; (d6178 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d612a:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d612c:	4668      	mov	r0, sp
   d612e:	2301      	movs	r3, #1
   d6130:	f8ad 300c 	strh.w	r3, [sp, #12]
   d6134:	f7ff fd65 	bl	d5c02 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d6138:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d613c:	2100      	movs	r1, #0
   d613e:	b280      	uxth	r0, r0
   d6140:	f003 fe39 	bl	d9db6 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d6144:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d6148:	4620      	mov	r0, r4
   d614a:	f7ff fd1d 	bl	d5b88 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d614e:	2100      	movs	r1, #0
   d6150:	4620      	mov	r0, r4
   d6152:	f7ff fd19 	bl	d5b88 <_ZN15Adafruit_BME2807spixferEh>
   d6156:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d6158:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d615c:	2101      	movs	r1, #1
   d615e:	b280      	uxth	r0, r0
   d6160:	f003 fe29 	bl	d9db6 <digitalWrite>
        if (_sck == -1)
   d6164:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d6168:	3301      	adds	r3, #1
   d616a:	d1d1      	bne.n	d6110 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d616c:	f7ff fd42 	bl	d5bf4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d6170:	e7ce      	b.n	d6110 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d6172:	bf00      	nop
   d6174:	000de150 	.word	0x000de150
   d6178:	0007a120 	.word	0x0007a120

000d617c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d617c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d617e:	21f3      	movs	r1, #243	; 0xf3
   d6180:	f7ff ffa8 	bl	d60d4 <_ZN15Adafruit_BME2805read8Eh>
}
   d6184:	f000 0001 	and.w	r0, r0, #1
   d6188:	bd08      	pop	{r3, pc}

000d618a <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d618a:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d618c:	2188      	movs	r1, #136	; 0x88
{
   d618e:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d6190:	f7ff ff50 	bl	d6034 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d6194:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d6196:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d6198:	4620      	mov	r0, r4
   d619a:	f7ff ff4b 	bl	d6034 <_ZN15Adafruit_BME2809read16_LEEh>
   d619e:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d61a0:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d61a2:	4620      	mov	r0, r4
   d61a4:	f7ff ff46 	bl	d6034 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d61a8:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d61aa:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d61ac:	4620      	mov	r0, r4
   d61ae:	f7ff ff41 	bl	d6034 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d61b2:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d61b4:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d61b6:	4620      	mov	r0, r4
   d61b8:	f7ff ff3c 	bl	d6034 <_ZN15Adafruit_BME2809read16_LEEh>
   d61bc:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d61be:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d61c0:	4620      	mov	r0, r4
   d61c2:	f7ff ff37 	bl	d6034 <_ZN15Adafruit_BME2809read16_LEEh>
   d61c6:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d61c8:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d61ca:	4620      	mov	r0, r4
   d61cc:	f7ff ff32 	bl	d6034 <_ZN15Adafruit_BME2809read16_LEEh>
   d61d0:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d61d2:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d61d4:	4620      	mov	r0, r4
   d61d6:	f7ff ff2d 	bl	d6034 <_ZN15Adafruit_BME2809read16_LEEh>
   d61da:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d61dc:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d61de:	4620      	mov	r0, r4
   d61e0:	f7ff ff28 	bl	d6034 <_ZN15Adafruit_BME2809read16_LEEh>
   d61e4:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d61e6:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d61e8:	4620      	mov	r0, r4
   d61ea:	f7ff ff23 	bl	d6034 <_ZN15Adafruit_BME2809read16_LEEh>
   d61ee:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d61f0:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d61f2:	4620      	mov	r0, r4
   d61f4:	f7ff ff1e 	bl	d6034 <_ZN15Adafruit_BME2809read16_LEEh>
   d61f8:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d61fa:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d61fc:	4620      	mov	r0, r4
   d61fe:	f7ff ff19 	bl	d6034 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d6202:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d6204:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d6206:	4620      	mov	r0, r4
   d6208:	f7ff ff64 	bl	d60d4 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d620c:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d620e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d6212:	4620      	mov	r0, r4
   d6214:	f7ff ff0e 	bl	d6034 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d6218:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d621a:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d621c:	4620      	mov	r0, r4
   d621e:	f7ff ff59 	bl	d60d4 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d6222:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d6224:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d6228:	4620      	mov	r0, r4
   d622a:	f7ff ff53 	bl	d60d4 <_ZN15Adafruit_BME2805read8Eh>
   d622e:	21e5      	movs	r1, #229	; 0xe5
   d6230:	4605      	mov	r5, r0
   d6232:	4620      	mov	r0, r4
   d6234:	f7ff ff4e 	bl	d60d4 <_ZN15Adafruit_BME2805read8Eh>
   d6238:	f000 030f 	and.w	r3, r0, #15
   d623c:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d6240:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d6242:	21e6      	movs	r1, #230	; 0xe6
   d6244:	4620      	mov	r0, r4
   d6246:	f7ff ff45 	bl	d60d4 <_ZN15Adafruit_BME2805read8Eh>
   d624a:	21e5      	movs	r1, #229	; 0xe5
   d624c:	4605      	mov	r5, r0
   d624e:	4620      	mov	r0, r4
   d6250:	f7ff ff40 	bl	d60d4 <_ZN15Adafruit_BME2805read8Eh>
   d6254:	1103      	asrs	r3, r0, #4
   d6256:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d625a:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d625c:	21e7      	movs	r1, #231	; 0xe7
   d625e:	4620      	mov	r0, r4
   d6260:	f7ff ff38 	bl	d60d4 <_ZN15Adafruit_BME2805read8Eh>
   d6264:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d6268:	bd38      	pop	{r3, r4, r5, pc}
	...

000d626c <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d626c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d626e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d6272:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d6274:	4604      	mov	r4, r0
   d6276:	460e      	mov	r6, r1
   d6278:	4615      	mov	r5, r2
    if (_cs == -1) {
   d627a:	d112      	bne.n	d62a2 <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d627c:	7901      	ldrb	r1, [r0, #4]
   d627e:	6800      	ldr	r0, [r0, #0]
   d6280:	f003 fc90 	bl	d9ba4 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d6284:	6820      	ldr	r0, [r4, #0]
   d6286:	6803      	ldr	r3, [r0, #0]
   d6288:	4631      	mov	r1, r6
   d628a:	689b      	ldr	r3, [r3, #8]
   d628c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d628e:	6820      	ldr	r0, [r4, #0]
   d6290:	6803      	ldr	r3, [r0, #0]
   d6292:	4629      	mov	r1, r5
   d6294:	689b      	ldr	r3, [r3, #8]
   d6296:	4798      	blx	r3
        _wire -> endTransmission();
   d6298:	6820      	ldr	r0, [r4, #0]
   d629a:	f003 fc8b 	bl	d9bb4 <_ZN7TwoWire15endTransmissionEv>
}
   d629e:	b004      	add	sp, #16
   d62a0:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d62a2:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d62a6:	3301      	adds	r3, #1
   d62a8:	d10c      	bne.n	d62c4 <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d62aa:	4b14      	ldr	r3, [pc, #80]	; (d62fc <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d62ac:	9300      	str	r3, [sp, #0]
   d62ae:	2300      	movs	r3, #0
   d62b0:	f88d 3004 	strb.w	r3, [sp, #4]
   d62b4:	4b12      	ldr	r3, [pc, #72]	; (d6300 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d62b6:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d62b8:	4668      	mov	r0, sp
   d62ba:	2301      	movs	r3, #1
   d62bc:	f8ad 300c 	strh.w	r3, [sp, #12]
   d62c0:	f7ff fc9f 	bl	d5c02 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d62c4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d62c8:	2100      	movs	r1, #0
   d62ca:	b280      	uxth	r0, r0
   d62cc:	f003 fd73 	bl	d9db6 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d62d0:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d62d4:	4620      	mov	r0, r4
   d62d6:	f7ff fc57 	bl	d5b88 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d62da:	4629      	mov	r1, r5
   d62dc:	4620      	mov	r0, r4
   d62de:	f7ff fc53 	bl	d5b88 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d62e2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d62e6:	2101      	movs	r1, #1
   d62e8:	b280      	uxth	r0, r0
   d62ea:	f003 fd64 	bl	d9db6 <digitalWrite>
    if (_sck == -1)
   d62ee:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d62f2:	3301      	adds	r3, #1
   d62f4:	d1d3      	bne.n	d629e <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d62f6:	f7ff fc7d 	bl	d5bf4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d62fa:	e7d0      	b.n	d629e <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d62fc:	000de150 	.word	0x000de150
   d6300:	0007a120 	.word	0x0007a120

000d6304 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d6304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d6306:	00db      	lsls	r3, r3, #3
   d6308:	f002 0207 	and.w	r2, r2, #7
   d630c:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d6310:	4313      	orrs	r3, r2
   d6312:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d6316:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d631a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d631e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d6322:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d6326:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d632a:	f366 1347 	bfi	r3, r6, #5, #3
   d632e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d6332:	00ed      	lsls	r5, r5, #3
   d6334:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d6338:	f007 0707 	and.w	r7, r7, #7
   d633c:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d6340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d6344:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d6346:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d6348:	431d      	orrs	r5, r3
   d634a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d634e:	f006 0207 	and.w	r2, r6, #7
   d6352:	21f2      	movs	r1, #242	; 0xf2
   d6354:	f7ff ff8a 	bl	d626c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d6358:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d635c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d6360:	f002 0107 	and.w	r1, r2, #7
   d6364:	009b      	lsls	r3, r3, #2
   d6366:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d636a:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d636e:	4620      	mov	r0, r4
   d6370:	21f5      	movs	r1, #245	; 0xf5
   d6372:	f7ff ff7b 	bl	d626c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d6376:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d637a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d637e:	f002 0107 	and.w	r1, r2, #7
   d6382:	009b      	lsls	r3, r3, #2
   d6384:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d6388:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d638c:	4620      	mov	r0, r4
   d638e:	21f4      	movs	r1, #244	; 0xf4
}
   d6390:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d6394:	f7ff bf6a 	b.w	d626c <_ZN15Adafruit_BME2806write8Ehh>

000d6398 <_ZN15Adafruit_BME2804initEv>:
{
   d6398:	b530      	push	{r4, r5, lr}
   d639a:	4604      	mov	r4, r0
    if (_cs == -1) {
   d639c:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d63a0:	1c42      	adds	r2, r0, #1
{
   d63a2:	b085      	sub	sp, #20
    if (_cs == -1) {
   d63a4:	d119      	bne.n	d63da <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d63a6:	6820      	ldr	r0, [r4, #0]
   d63a8:	f003 fbca 	bl	d9b40 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d63ac:	21d0      	movs	r1, #208	; 0xd0
   d63ae:	4620      	mov	r0, r4
   d63b0:	f7ff fe90 	bl	d60d4 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d63b4:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d63b6:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d63b8:	d145      	bne.n	d6446 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d63ba:	4620      	mov	r0, r4
   d63bc:	22b6      	movs	r2, #182	; 0xb6
   d63be:	21e0      	movs	r1, #224	; 0xe0
   d63c0:	f7ff ff54 	bl	d626c <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d63c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d63c8:	f002 fe1a 	bl	d9000 <delay>
    while (isReadingCalibration())
   d63cc:	4620      	mov	r0, r4
   d63ce:	f7ff fed5 	bl	d617c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d63d2:	4605      	mov	r5, r0
   d63d4:	b328      	cbz	r0, d6422 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d63d6:	2064      	movs	r0, #100	; 0x64
   d63d8:	e7f6      	b.n	d63c8 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d63da:	2101      	movs	r1, #1
   d63dc:	b280      	uxth	r0, r0
   d63de:	f003 fcea 	bl	d9db6 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d63e2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d63e6:	2101      	movs	r1, #1
   d63e8:	b280      	uxth	r0, r0
   d63ea:	f003 fcd3 	bl	d9d94 <pinMode>
        if (_sck == -1) {
   d63ee:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d63f2:	1c43      	adds	r3, r0, #1
   d63f4:	d104      	bne.n	d6400 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d63f6:	f7ff fbab 	bl	d5b50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d63fa:	f002 f9ef 	bl	d87dc <_ZN8SPIClass5beginEv>
    }
   d63fe:	e7d5      	b.n	d63ac <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d6400:	2101      	movs	r1, #1
   d6402:	b280      	uxth	r0, r0
   d6404:	f003 fcc6 	bl	d9d94 <pinMode>
            pinMode(_mosi, OUTPUT);
   d6408:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d640c:	2101      	movs	r1, #1
   d640e:	b280      	uxth	r0, r0
   d6410:	f003 fcc0 	bl	d9d94 <pinMode>
            pinMode(_miso, INPUT);
   d6414:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d6418:	2100      	movs	r1, #0
   d641a:	b280      	uxth	r0, r0
   d641c:	f003 fcba 	bl	d9d94 <pinMode>
   d6420:	e7c4      	b.n	d63ac <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d6422:	4620      	mov	r0, r4
   d6424:	f7ff feb1 	bl	d618a <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d6428:	2305      	movs	r3, #5
   d642a:	9300      	str	r3, [sp, #0]
   d642c:	461a      	mov	r2, r3
   d642e:	2103      	movs	r1, #3
   d6430:	4620      	mov	r0, r4
   d6432:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d6436:	f7ff ff65 	bl	d6304 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d643a:	2064      	movs	r0, #100	; 0x64
   d643c:	f002 fde0 	bl	d9000 <delay>
   d6440:	2001      	movs	r0, #1
}
   d6442:	b005      	add	sp, #20
   d6444:	bd30      	pop	{r4, r5, pc}
        return false;
   d6446:	2000      	movs	r0, #0
   d6448:	e7fb      	b.n	d6442 <_ZN15Adafruit_BME2804initEv+0xaa>

000d644a <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d644a:	2377      	movs	r3, #119	; 0x77
{
   d644c:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d644e:	7103      	strb	r3, [r0, #4]
{
   d6450:	4604      	mov	r4, r0
	_wire = &Wire;
   d6452:	f003 fd23 	bl	d9e9c <_Z19__fetch_global_Wirev>
   d6456:	6020      	str	r0, [r4, #0]
	status = init();
   d6458:	4620      	mov	r0, r4
   d645a:	f7ff ff9d 	bl	d6398 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d645e:	b930      	cbnz	r0, d646e <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d6460:	2376      	movs	r3, #118	; 0x76
   d6462:	7123      	strb	r3, [r4, #4]
 		status = init();
   d6464:	4620      	mov	r0, r4
}
   d6466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d646a:	f7ff bf95 	b.w	d6398 <_ZN15Adafruit_BME2804initEv>
}
   d646e:	bd10      	pop	{r4, pc}

000d6470 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   d6470:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   d6472:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
   d6474:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   d6478:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   d647a:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   d647e:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   d6482:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   d6484:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   d6486:	7382      	strb	r2, [r0, #14]
  _width = width;
   d6488:	7303      	strb	r3, [r0, #12]
}
   d648a:	bd30      	pop	{r4, r5, pc}

000d648c <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   d648c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d648e:	4603      	mov	r3, r0
   d6490:	b085      	sub	sp, #20

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   d6492:	8940      	ldrh	r0, [r0, #10]
                           (uint8_t)(_address >> 8)};
   d6494:	f8ad 000c 	strh.w	r0, [sp, #12]
   d6498:	ea4f 2e10 	mov.w	lr, r0, lsr #8

  if (_i2cdevice) {
   d649c:	6818      	ldr	r0, [r3, #0]
                           (uint8_t)(_address >> 8)};
   d649e:	7a9c      	ldrb	r4, [r3, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   d64a0:	460e      	mov	r6, r1
   d64a2:	4617      	mov	r7, r2
  if (_i2cdevice) {
   d64a4:	b140      	cbz	r0, d64b8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2c>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   d64a6:	7b5b      	ldrb	r3, [r3, #13]
   d64a8:	9301      	str	r3, [sp, #4]
   d64aa:	ab03      	add	r3, sp, #12
   d64ac:	9300      	str	r3, [sp, #0]
   d64ae:	2301      	movs	r3, #1
   d64b0:	f000 fa36 	bl	d6920 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   d64b4:	b005      	add	sp, #20
   d64b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   d64b8:	6858      	ldr	r0, [r3, #4]
   d64ba:	2800      	cmp	r0, #0
   d64bc:	d0fa      	beq.n	d64b4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   d64be:	f893 c008 	ldrb.w	ip, [r3, #8]
   d64c2:	7b5d      	ldrb	r5, [r3, #13]
   d64c4:	f1bc 0f03 	cmp.w	ip, #3
   d64c8:	d10b      	bne.n	d64e2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   d64ca:	f02e 0e01 	bic.w	lr, lr, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   d64ce:	3501      	adds	r5, #1
      addrbuffer[0] =
   d64d0:	f88d e00c 	strb.w	lr, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   d64d4:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   d64d8:	9500      	str	r5, [sp, #0]
   d64da:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   d64dc:	f000 f98f 	bl	d67fe <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d64e0:	e7e8      	b.n	d64b4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   d64e2:	f1bc 0f00 	cmp.w	ip, #0
   d64e6:	d108      	bne.n	d64fa <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6e>
      addrbuffer[0] &= ~0x80;
   d64e8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   d64ec:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   d64f0:	9500      	str	r5, [sp, #0]
   d64f2:	ab03      	add	r3, sp, #12
   d64f4:	463a      	mov	r2, r7
   d64f6:	4631      	mov	r1, r6
   d64f8:	e7f0      	b.n	d64dc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x50>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   d64fa:	f1bc 0f02 	cmp.w	ip, #2
   d64fe:	d102      	bne.n	d6506 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x7a>
      addrbuffer[0] |= 0x80;
   d6500:	f064 047f 	orn	r4, r4, #127	; 0x7f
   d6504:	e7f2      	b.n	d64ec <_ZN23Adafruit_BusIO_Register5writeEPhh+0x60>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   d6506:	f1bc 0f01 	cmp.w	ip, #1
      addrbuffer[0] &= ~0x80;
   d650a:	bf01      	itttt	eq
   d650c:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   d6510:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   d6514:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   d6518:	f88d 300c 	strbeq.w	r3, [sp, #12]
   d651c:	e7e8      	b.n	d64f0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x64>

000d651e <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   d651e:	b4f0      	push	{r4, r5, r6, r7}
   d6520:	460b      	mov	r3, r1
  if (numbytes == 0) {
   d6522:	b902      	cbnz	r2, d6526 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   d6524:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   d6526:	2a04      	cmp	r2, #4
   d6528:	d814      	bhi.n	d6554 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   d652a:	f100 050f 	add.w	r5, r0, #15
   d652e:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   d6530:	1884      	adds	r4, r0, r2
   d6532:	4629      	mov	r1, r5
   d6534:	4284      	cmp	r4, r0
   d6536:	d009      	beq.n	d654c <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   d6538:	7b87      	ldrb	r7, [r0, #14]
   d653a:	b2de      	uxtb	r6, r3
   d653c:	b927      	cbnz	r7, d6548 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   d653e:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   d6540:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   d6542:	3501      	adds	r5, #1
   d6544:	3c01      	subs	r4, #1
   d6546:	e7f5      	b.n	d6534 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   d6548:	73a6      	strb	r6, [r4, #14]
   d654a:	e7f9      	b.n	d6540 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   d654c:	4620      	mov	r0, r4
}
   d654e:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   d6550:	f7ff bf9c 	b.w	d648c <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   d6554:	2000      	movs	r0, #0
   d6556:	bcf0      	pop	{r4, r5, r6, r7}
   d6558:	4770      	bx	lr

000d655a <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   d655a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d655c:	4604      	mov	r4, r0
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
                           (uint8_t)(_address >> 8)};
   d655e:	7a85      	ldrb	r5, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   d6560:	460b      	mov	r3, r1
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   d6562:	8941      	ldrh	r1, [r0, #10]

  if (_i2cdevice) {
   d6564:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   d6566:	f8ad 100c 	strh.w	r1, [sp, #12]
   d656a:	0a0e      	lsrs	r6, r1, #8
  if (_i2cdevice) {
   d656c:	b140      	cbz	r0, d6580 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d656e:	2100      	movs	r1, #0
   d6570:	e9cd 2100 	strd	r2, r1, [sp]
   d6574:	a903      	add	r1, sp, #12
   d6576:	7b62      	ldrb	r2, [r4, #13]
   d6578:	f000 fa40 	bl	d69fc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   d657c:	b004      	add	sp, #16
   d657e:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   d6580:	6860      	ldr	r0, [r4, #4]
   d6582:	2800      	cmp	r0, #0
   d6584:	d0fa      	beq.n	d657c <_ZN23Adafruit_BusIO_Register4readEPhh+0x22>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   d6586:	7a21      	ldrb	r1, [r4, #8]
   d6588:	7b64      	ldrb	r4, [r4, #13]
   d658a:	2903      	cmp	r1, #3
   d658c:	d10d      	bne.n	d65aa <_ZN23Adafruit_BusIO_Register4readEPhh+0x50>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   d658e:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   d6592:	21ff      	movs	r1, #255	; 0xff
   d6594:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   d6598:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   d659c:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   d65a0:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d65a2:	a903      	add	r1, sp, #12
   d65a4:	f000 f95d 	bl	d6862 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   d65a8:	e7e8      	b.n	d657c <_ZN23Adafruit_BusIO_Register4readEPhh+0x22>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   d65aa:	b941      	cbnz	r1, d65be <_ZN23Adafruit_BusIO_Register4readEPhh+0x64>
      addrbuffer[0] |= 0x80;
   d65ac:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   d65b0:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d65b4:	21ff      	movs	r1, #255	; 0xff
   d65b6:	e9cd 2100 	strd	r2, r1, [sp]
   d65ba:	4622      	mov	r2, r4
   d65bc:	e7f1      	b.n	d65a2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x48>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   d65be:	2902      	cmp	r1, #2
   d65c0:	d102      	bne.n	d65c8 <_ZN23Adafruit_BusIO_Register4readEPhh+0x6e>
      addrbuffer[0] &= ~0x80;
   d65c2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   d65c6:	e7f3      	b.n	d65b0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x56>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   d65c8:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   d65ca:	bf02      	ittt	eq
   d65cc:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   d65d0:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   d65d4:	f88d 100c 	strbeq.w	r1, [sp, #12]
   d65d8:	e7ec      	b.n	d65b4 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>

000d65da <_ZN23Adafruit_BusIO_Register4readEPt>:
 *    @brief  Read 2 bytes of data from the register location
 *    @param  value Pointer to uint16_t variable to read into
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint16_t *value) {
   d65da:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, 2)) {
   d65dc:	2202      	movs	r2, #2
bool Adafruit_BusIO_Register::read(uint16_t *value) {
   d65de:	460d      	mov	r5, r1
  if (!read(_buffer, 2)) {
   d65e0:	f100 010f 	add.w	r1, r0, #15
bool Adafruit_BusIO_Register::read(uint16_t *value) {
   d65e4:	4604      	mov	r4, r0
  if (!read(_buffer, 2)) {
   d65e6:	f7ff ffb8 	bl	d655a <_ZN23Adafruit_BusIO_Register4readEPhh>
   d65ea:	b138      	cbz	r0, d65fc <_ZN23Adafruit_BusIO_Register4readEPt+0x22>
    return false;
  }

  if (_byteorder == LSBFIRST) {
   d65ec:	7ba3      	ldrb	r3, [r4, #14]
   d65ee:	b933      	cbnz	r3, d65fe <_ZN23Adafruit_BusIO_Register4readEPt+0x24>
    *value = _buffer[1];
   d65f0:	7c23      	ldrb	r3, [r4, #16]
    *value <<= 8;
   d65f2:	021b      	lsls	r3, r3, #8
   d65f4:	802b      	strh	r3, [r5, #0]
    *value |= _buffer[0];
   d65f6:	7be2      	ldrb	r2, [r4, #15]
  } else {
    *value = _buffer[0];
    *value <<= 8;
    *value |= _buffer[1];
   d65f8:	4313      	orrs	r3, r2
   d65fa:	802b      	strh	r3, [r5, #0]
  }
  return true;
}
   d65fc:	bd38      	pop	{r3, r4, r5, pc}
    *value = _buffer[0];
   d65fe:	7be3      	ldrb	r3, [r4, #15]
    *value <<= 8;
   d6600:	021b      	lsls	r3, r3, #8
   d6602:	802b      	strh	r3, [r5, #0]
    *value |= _buffer[1];
   d6604:	7c22      	ldrb	r2, [r4, #16]
   d6606:	e7f7      	b.n	d65f8 <_ZN23Adafruit_BusIO_Register4readEPt+0x1e>

000d6608 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   d6608:	b510      	push	{r4, lr}
   d660a:	4604      	mov	r4, r0
  if (_spiSetting) {
   d660c:	6840      	ldr	r0, [r0, #4]
   d660e:	b110      	cbz	r0, d6616 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   d6610:	6803      	ldr	r3, [r0, #0]
   d6612:	689b      	ldr	r3, [r3, #8]
   d6614:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   d6616:	4620      	mov	r0, r4
   d6618:	bd10      	pop	{r4, pc}

000d661a <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   d661a:	b538      	push	{r3, r4, r5, lr}
   d661c:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   d661e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   d6622:	2101      	movs	r1, #1
   d6624:	b280      	uxth	r0, r0
   d6626:	f003 fbb5 	bl	d9d94 <pinMode>
  digitalWrite(_cs, HIGH);
   d662a:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d662e:	2101      	movs	r1, #1
   d6630:	b280      	uxth	r0, r0
   d6632:	f003 fbc0 	bl	d9db6 <digitalWrite>

  if (_spi) { // hardware SPI
   d6636:	6825      	ldr	r5, [r4, #0]
   d6638:	b135      	cbz	r5, d6648 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   d663a:	4628      	mov	r0, r5
   d663c:	f002 f8ce 	bl	d87dc <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   d6640:	2001      	movs	r0, #1
   d6642:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   d6646:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   d6648:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d664c:	2101      	movs	r1, #1
   d664e:	b280      	uxth	r0, r0
   d6650:	f003 fba0 	bl	d9d94 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   d6654:	7b63      	ldrb	r3, [r4, #13]
   d6656:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d665a:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   d665c:	bf94      	ite	ls
   d665e:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   d6660:	2101      	movhi	r1, #1
   d6662:	b280      	uxth	r0, r0
   d6664:	f003 fba7 	bl	d9db6 <digitalWrite>
    if (_mosi != -1) {
   d6668:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d666c:	1c42      	adds	r2, r0, #1
   d666e:	d009      	beq.n	d6684 <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   d6670:	2101      	movs	r1, #1
   d6672:	b280      	uxth	r0, r0
   d6674:	f003 fb8e 	bl	d9d94 <pinMode>
      digitalWrite(_mosi, HIGH);
   d6678:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d667c:	2101      	movs	r1, #1
   d667e:	b280      	uxth	r0, r0
   d6680:	f003 fb99 	bl	d9db6 <digitalWrite>
    if (_miso != -1) {
   d6684:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d6688:	1c43      	adds	r3, r0, #1
   d668a:	d0d9      	beq.n	d6640 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   d668c:	2100      	movs	r1, #0
   d668e:	b280      	uxth	r0, r0
   d6690:	f003 fb80 	bl	d9d94 <pinMode>
   d6694:	e7d4      	b.n	d6640 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000d6698 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d6698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d669c:	4604      	mov	r4, r0
  if (_spi) {
   d669e:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d66a0:	b085      	sub	sp, #20
   d66a2:	460d      	mov	r5, r1
  if (_spi) {
   d66a4:	b140      	cbz	r0, d66b8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   d66a6:	2300      	movs	r3, #0
   d66a8:	9300      	str	r3, [sp, #0]
   d66aa:	4613      	mov	r3, r2
   d66ac:	460a      	mov	r2, r1
   d66ae:	f002 f933 	bl	d8918 <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   d66b2:	b005      	add	sp, #20
   d66b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   d66b8:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d66ba:	68a0      	ldr	r0, [r4, #8]
   d66bc:	4f48      	ldr	r7, [pc, #288]	; (d67e0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   d66be:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   d66c2:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d66c4:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   d66c6:	bf0c      	ite	eq
   d66c8:	f04f 0b01 	moveq.w	fp, #1
   d66cc:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d66d0:	ea1b 0f03 	tst.w	fp, r3
   d66d4:	eb01 0302 	add.w	r3, r1, r2
   d66d8:	bf0c      	ite	eq
   d66da:	f04f 0901 	moveq.w	r9, #1
   d66de:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d66e2:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   d66e4:	9303      	str	r3, [sp, #12]
   d66e6:	9b03      	ldr	r3, [sp, #12]
   d66e8:	42ab      	cmp	r3, r5
   d66ea:	d0e2      	beq.n	d66b2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   d66ec:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   d66f0:	465e      	mov	r6, fp
    uint8_t reply = 0;
   d66f2:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   d66f6:	b117      	cbz	r7, d66fe <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d66f8:	4638      	mov	r0, r7
   d66fa:	f001 fd8d 	bl	d8218 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   d66fe:	7b63      	ldrb	r3, [r4, #13]
   d6700:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d6704:	d141      	bne.n	d678a <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d6706:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d670a:	1c5a      	adds	r2, r3, #1
   d670c:	d00f      	beq.n	d672e <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   d670e:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d6712:	bf14      	ite	ne
   d6714:	2301      	movne	r3, #1
   d6716:	2300      	moveq	r3, #0
   d6718:	454b      	cmp	r3, r9
   d671a:	d008      	beq.n	d672e <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
          if (towrite)
   d671c:	6963      	ldr	r3, [r4, #20]
   d671e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d6720:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   d6722:	2900      	cmp	r1, #0
   d6724:	d02c      	beq.n	d6780 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   d6726:	4302      	orrs	r2, r0
   d6728:	601a      	str	r2, [r3, #0]
   d672a:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   d672e:	69a1      	ldr	r1, [r4, #24]
   d6730:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6732:	680a      	ldr	r2, [r1, #0]
   d6734:	4313      	orrs	r3, r2
   d6736:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d6738:	b117      	cbz	r7, d6740 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   d673a:	4638      	mov	r0, r7
   d673c:	f001 fd6c 	bl	d8218 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   d6740:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d6744:	3301      	adds	r3, #1
   d6746:	d006      	beq.n	d6756 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   d6748:	69e3      	ldr	r3, [r4, #28]
   d674a:	681a      	ldr	r2, [r3, #0]
   d674c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d674e:	421a      	tst	r2, r3
            reply |= b;
   d6750:	bf18      	it	ne
   d6752:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   d6756:	69a1      	ldr	r1, [r4, #24]
   d6758:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d675a:	680a      	ldr	r2, [r1, #0]
   d675c:	ea22 0303 	bic.w	r3, r2, r3
   d6760:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   d6762:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d6766:	3301      	adds	r3, #1
        buffer[i] = reply;
   d6768:	bf18      	it	ne
   d676a:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   d676e:	7b23      	ldrb	r3, [r4, #12]
   d6770:	2b00      	cmp	r3, #0
   d6772:	d132      	bne.n	d67da <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   d6774:	0076      	lsls	r6, r6, #1
   d6776:	b2f6      	uxtb	r6, r6
   d6778:	2e00      	cmp	r6, #0
   d677a:	d1bc      	bne.n	d66f6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   d677c:	3501      	adds	r5, #1
   d677e:	e7b2      	b.n	d66e6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   d6780:	ea22 0200 	bic.w	r2, r2, r0
   d6784:	601a      	str	r2, [r3, #0]
   d6786:	4689      	mov	r9, r1
   d6788:	e7d1      	b.n	d672e <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   d678a:	69a1      	ldr	r1, [r4, #24]
   d678c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d678e:	680a      	ldr	r2, [r1, #0]
   d6790:	4313      	orrs	r3, r2
   d6792:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d6794:	b117      	cbz	r7, d679c <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   d6796:	4638      	mov	r0, r7
   d6798:	f001 fd3e 	bl	d8218 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   d679c:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d67a0:	3301      	adds	r3, #1
   d67a2:	d008      	beq.n	d67b6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
          if (send & b)
   d67a4:	6963      	ldr	r3, [r4, #20]
   d67a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d67a8:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   d67aa:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   d67ae:	bf14      	ite	ne
   d67b0:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   d67b2:	438a      	biceq	r2, r1
   d67b4:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   d67b6:	69a1      	ldr	r1, [r4, #24]
   d67b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d67ba:	680a      	ldr	r2, [r1, #0]
   d67bc:	ea22 0303 	bic.w	r3, r2, r3
   d67c0:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   d67c2:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d67c6:	3301      	adds	r3, #1
   d67c8:	d0cb      	beq.n	d6762 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   d67ca:	69e3      	ldr	r3, [r4, #28]
   d67cc:	681a      	ldr	r2, [r3, #0]
   d67ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d67d0:	421a      	tst	r2, r3
            reply |= b;
   d67d2:	bf18      	it	ne
   d67d4:	ea46 0808 	orrne.w	r8, r6, r8
   d67d8:	e7c3      	b.n	d6762 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   d67da:	0876      	lsrs	r6, r6, #1
   d67dc:	e7cc      	b.n	d6778 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   d67de:	bf00      	nop
   d67e0:	0007a120 	.word	0x0007a120

000d67e4 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   d67e4:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   d67e6:	2201      	movs	r2, #1
  uint8_t data = send;
   d67e8:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   d67ec:	f10d 0107 	add.w	r1, sp, #7
   d67f0:	f7ff ff52 	bl	d6698 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   d67f4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d67f8:	b003      	add	sp, #12
   d67fa:	f85d fb04 	ldr.w	pc, [sp], #4

000d67fe <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d67fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6802:	4604      	mov	r4, r0
  if (_spi) {
   d6804:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d6806:	460e      	mov	r6, r1
   d6808:	4617      	mov	r7, r2
   d680a:	461d      	mov	r5, r3
  if (_spi) {
   d680c:	b110      	cbz	r0, d6814 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   d680e:	6861      	ldr	r1, [r4, #4]
   d6810:	f002 f80e 	bl	d8830 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d6814:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d6818:	2100      	movs	r1, #0
   d681a:	b280      	uxth	r0, r0
   d681c:	f003 facb 	bl	d9db6 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   d6820:	9b06      	ldr	r3, [sp, #24]
   d6822:	eb05 0803 	add.w	r8, r5, r3
   d6826:	4545      	cmp	r5, r8
   d6828:	d108      	bne.n	d683c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   d682a:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   d682c:	42b7      	cmp	r7, r6
   d682e:	d00b      	beq.n	d6848 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   d6830:	f816 1b01 	ldrb.w	r1, [r6], #1
   d6834:	4620      	mov	r0, r4
   d6836:	f7ff ffd5 	bl	d67e4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   d683a:	e7f7      	b.n	d682c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   d683c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6840:	4620      	mov	r0, r4
   d6842:	f7ff ffcf 	bl	d67e4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   d6846:	e7ee      	b.n	d6826 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   d6848:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d684c:	2101      	movs	r1, #1
   d684e:	b280      	uxth	r0, r0
   d6850:	f003 fab1 	bl	d9db6 <digitalWrite>

  if (_spi) {
   d6854:	6820      	ldr	r0, [r4, #0]
   d6856:	b108      	cbz	r0, d685c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   d6858:	f001 ffd1 	bl	d87fe <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d685c:	2001      	movs	r0, #1
   d685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6862 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   d6862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6866:	4604      	mov	r4, r0
  if (_spi) {
   d6868:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   d686a:	f89d 801c 	ldrb.w	r8, [sp, #28]
   d686e:	460e      	mov	r6, r1
   d6870:	4617      	mov	r7, r2
   d6872:	461d      	mov	r5, r3
  if (_spi) {
   d6874:	b110      	cbz	r0, d687c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   d6876:	6861      	ldr	r1, [r4, #4]
   d6878:	f001 ffda 	bl	d8830 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d687c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d6880:	2100      	movs	r1, #0
   d6882:	b280      	uxth	r0, r0
   d6884:	f003 fa97 	bl	d9db6 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   d6888:	4437      	add	r7, r6
   d688a:	42be      	cmp	r6, r7
   d688c:	d10a      	bne.n	d68a4 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   d688e:	9b06      	ldr	r3, [sp, #24]
   d6890:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   d6892:	42ae      	cmp	r6, r5
   d6894:	d00c      	beq.n	d68b0 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   d6896:	4641      	mov	r1, r8
   d6898:	4620      	mov	r0, r4
   d689a:	f7ff ffa3 	bl	d67e4 <_ZN18Adafruit_SPIDevice8transferEh>
   d689e:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   d68a2:	e7f6      	b.n	d6892 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   d68a4:	f816 1b01 	ldrb.w	r1, [r6], #1
   d68a8:	4620      	mov	r0, r4
   d68aa:	f7ff ff9b 	bl	d67e4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   d68ae:	e7ec      	b.n	d688a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   d68b0:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d68b4:	2101      	movs	r1, #1
   d68b6:	b280      	uxth	r0, r0
   d68b8:	f003 fa7d 	bl	d9db6 <digitalWrite>

  if (_spi) {
   d68bc:	6820      	ldr	r0, [r4, #0]
   d68be:	b108      	cbz	r0, d68c4 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   d68c0:	f001 ff9d 	bl	d87fe <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   d68c4:	2001      	movs	r0, #1
   d68c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d68ca <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d68ca:	6042      	str	r2, [r0, #4]
  _begun = false;
   d68cc:	2200      	movs	r2, #0
   d68ce:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   d68d0:	2220      	movs	r2, #32
  _addr = addr;
   d68d2:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   d68d4:	60c2      	str	r2, [r0, #12]
#endif
}
   d68d6:	4770      	bx	lr

000d68d8 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   d68d8:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d68da:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d68dc:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d68de:	b153      	cbz	r3, d68f6 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d68e0:	7821      	ldrb	r1, [r4, #0]
   d68e2:	6860      	ldr	r0, [r4, #4]
   d68e4:	f003 f95e 	bl	d9ba4 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   d68e8:	6860      	ldr	r0, [r4, #4]
   d68ea:	f003 f963 	bl	d9bb4 <_ZN7TwoWire15endTransmissionEv>
   d68ee:	fab0 f080 	clz	r0, r0
   d68f2:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   d68f4:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d68f6:	2101      	movs	r1, #1
   d68f8:	f000 f803 	bl	d6902 <_ZN18Adafruit_I2CDevice5beginEb>
   d68fc:	2800      	cmp	r0, #0
   d68fe:	d1ef      	bne.n	d68e0 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d6900:	e7f8      	b.n	d68f4 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d6902 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d6902:	b538      	push	{r3, r4, r5, lr}
   d6904:	4604      	mov	r4, r0
  _wire->begin();
   d6906:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d6908:	460d      	mov	r5, r1
  _wire->begin();
   d690a:	f003 f919 	bl	d9b40 <_ZN7TwoWire5beginEv>
  _begun = true;
   d690e:	2001      	movs	r0, #1
   d6910:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   d6912:	b125      	cbz	r5, d691e <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   d6914:	4620      	mov	r0, r4
}
   d6916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   d691a:	f7ff bfdd 	b.w	d68d8 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   d691e:	bd38      	pop	{r3, r4, r5, pc}

000d6920 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   d6920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6924:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d6928:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   d692a:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   d692c:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   d692e:	4432      	add	r2, r6
   d6930:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   d6932:	4604      	mov	r4, r0
   d6934:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   d6936:	d902      	bls.n	d693e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d6938:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   d693a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d693e:	7801      	ldrb	r1, [r0, #0]
   d6940:	6840      	ldr	r0, [r0, #4]
   d6942:	f003 f92f 	bl	d9ba4 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d6946:	b97e      	cbnz	r6, d6968 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   d6948:	6860      	ldr	r0, [r4, #4]
   d694a:	6803      	ldr	r3, [r0, #0]
   d694c:	462a      	mov	r2, r5
   d694e:	68db      	ldr	r3, [r3, #12]
   d6950:	4641      	mov	r1, r8
   d6952:	4798      	blx	r3
   d6954:	4285      	cmp	r5, r0
   d6956:	d1ef      	bne.n	d6938 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   d6958:	6860      	ldr	r0, [r4, #4]
   d695a:	4639      	mov	r1, r7
   d695c:	f003 f926 	bl	d9bac <_ZN7TwoWire15endTransmissionEh>
   d6960:	fab0 f080 	clz	r0, r0
   d6964:	0940      	lsrs	r0, r0, #5
   d6966:	e7e8      	b.n	d693a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d6968:	f1b9 0f00 	cmp.w	r9, #0
   d696c:	d0ec      	beq.n	d6948 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
   d696e:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d6970:	6803      	ldr	r3, [r0, #0]
   d6972:	4632      	mov	r2, r6
   d6974:	68db      	ldr	r3, [r3, #12]
   d6976:	4649      	mov	r1, r9
   d6978:	4798      	blx	r3
   d697a:	42b0      	cmp	r0, r6
   d697c:	d1dc      	bne.n	d6938 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   d697e:	e7e3      	b.n	d6948 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000d6980 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   d6980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6984:	4615      	mov	r5, r2
   d6986:	4604      	mov	r4, r0
   d6988:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   d698a:	b2d2      	uxtb	r2, r2
   d698c:	7801      	ldrb	r1, [r0, #0]
   d698e:	6840      	ldr	r0, [r0, #4]
   d6990:	f003 f8f3 	bl	d9b7a <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   d6994:	4285      	cmp	r5, r0
   d6996:	d10d      	bne.n	d69b4 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   d6998:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   d699a:	fa1f f887 	uxth.w	r8, r7
   d699e:	45a8      	cmp	r8, r5
   d69a0:	f107 0701 	add.w	r7, r7, #1
   d69a4:	d209      	bcs.n	d69ba <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   d69a6:	6860      	ldr	r0, [r4, #4]
   d69a8:	6803      	ldr	r3, [r0, #0]
   d69aa:	695b      	ldr	r3, [r3, #20]
   d69ac:	4798      	blx	r3
   d69ae:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   d69b2:	e7f2      	b.n	d699a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   d69b4:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d69b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d69ba:	2001      	movs	r0, #1
   d69bc:	e7fb      	b.n	d69b6 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000d69be <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d69be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d69c2:	4607      	mov	r7, r0
   d69c4:	4688      	mov	r8, r1
   d69c6:	4616      	mov	r6, r2
   d69c8:	4699      	mov	r9, r3
  size_t pos = 0;
   d69ca:	2500      	movs	r5, #0
  while (pos < len) {
   d69cc:	42b5      	cmp	r5, r6
   d69ce:	d212      	bcs.n	d69f6 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   d69d0:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   d69d2:	1b74      	subs	r4, r6, r5
   d69d4:	4294      	cmp	r4, r2
   d69d6:	bf28      	it	cs
   d69d8:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   d69da:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   d69dc:	42ab      	cmp	r3, r5
   d69de:	bf94      	ite	ls
   d69e0:	464b      	movls	r3, r9
   d69e2:	2300      	movhi	r3, #0
   d69e4:	4622      	mov	r2, r4
   d69e6:	eb08 0105 	add.w	r1, r8, r5
   d69ea:	4638      	mov	r0, r7
   d69ec:	f7ff ffc8 	bl	d6980 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   d69f0:	b110      	cbz	r0, d69f8 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   d69f2:	4425      	add	r5, r4
  while (pos < len) {
   d69f4:	e7ea      	b.n	d69cc <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   d69f6:	2001      	movs	r0, #1
}
   d69f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d69fc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   d69fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d69fe:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   d6a00:	2300      	movs	r3, #0
   d6a02:	e9cd 3300 	strd	r3, r3, [sp]
   d6a06:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   d6a0a:	9e06      	ldr	r6, [sp, #24]
   d6a0c:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   d6a0e:	f7ff ff87 	bl	d6920 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d6a12:	b140      	cbz	r0, d6a26 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   d6a14:	2301      	movs	r3, #1
   d6a16:	4632      	mov	r2, r6
   d6a18:	4629      	mov	r1, r5
   d6a1a:	4620      	mov	r0, r4
}
   d6a1c:	b002      	add	sp, #8
   d6a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d6a22:	f7ff bfcc 	b.w	d69be <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d6a26:	b002      	add	sp, #8
   d6a28:	bd70      	pop	{r4, r5, r6, pc}

000d6a2a <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   d6a2a:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d6a2c:	6840      	ldr	r0, [r0, #4]
   d6a2e:	f003 f883 	bl	d9b38 <_ZN7TwoWire8setSpeedEm>
  return true;
#else
  (void)desiredclk;
  return false;
#endif
}
   d6a32:	2001      	movs	r0, #1
   d6a34:	bd08      	pop	{r3, pc}

000d6a36 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d6a36:	4770      	bx	lr

000d6a38 <_ZN15Adafruit_BNO055D1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
   d6a38:	4770      	bx	lr
	...

000d6a3c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 *          Sensor description
 */
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d6a3c:	460b      	mov	r3, r1
   d6a3e:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d6a40:	2228      	movs	r2, #40	; 0x28
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d6a42:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d6a44:	2100      	movs	r1, #0
   d6a46:	4618      	mov	r0, r3
   d6a48:	f006 fed4 	bl	dd7f4 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
   d6a4c:	4909      	ldr	r1, [pc, #36]	; (d6a74 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x38>)
   d6a4e:	220b      	movs	r2, #11
   d6a50:	f006 ff21 	bl	dd896 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d6a54:	2200      	movs	r2, #0
  sensor->version = 1;
   d6a56:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d6a58:	72c2      	strb	r2, [r0, #11]
  sensor->version = 1;
   d6a5a:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _sensorID;
   d6a5c:	68e1      	ldr	r1, [r4, #12]
  sensor->type = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay = 0;
   d6a5e:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->max_value = 0.0F;
   d6a60:	2200      	movs	r2, #0
  sensor->sensor_id = _sensorID;
   d6a62:	6101      	str	r1, [r0, #16]
  sensor->max_value = 0.0F;
   d6a64:	6182      	str	r2, [r0, #24]
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d6a66:	2103      	movs	r1, #3
  sensor->min_value = 0.0F;
   d6a68:	61c2      	str	r2, [r0, #28]
  sensor->resolution = 0.01F;
   d6a6a:	4a03      	ldr	r2, [pc, #12]	; (d6a78 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x3c>)
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d6a6c:	6141      	str	r1, [r0, #20]
  sensor->resolution = 0.01F;
   d6a6e:	6202      	str	r2, [r0, #32]
}
   d6a70:	bd10      	pop	{r4, pc}
   d6a72:	bf00      	nop
   d6a74:	000de025 	.word	0x000de025
   d6a78:	3c23d70a 	.word	0x3c23d70a

000d6a7c <_ZN15Adafruit_BNO055D0Ev>:
   d6a7c:	b510      	push	{r4, lr}
   d6a7e:	2114      	movs	r1, #20
   d6a80:	4604      	mov	r4, r0
   d6a82:	f003 fa2f 	bl	d9ee4 <_ZdlPvj>
   d6a86:	4620      	mov	r0, r4
   d6a88:	bd10      	pop	{r4, pc}
	...

000d6a8c <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d6a8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6a8e:	9301      	str	r3, [sp, #4]
                                 TwoWire *theWire) {
   d6a90:	4b09      	ldr	r3, [pc, #36]	; (d6ab8 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x2c>)
   d6a92:	6003      	str	r3, [r0, #0]
   d6a94:	2300      	movs	r3, #0
  _sensorID = sensorID;
   d6a96:	e9c0 3102 	strd	r3, r1, [r0, #8]
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d6a9a:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d6a9c:	2010      	movs	r0, #16
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d6a9e:	4616      	mov	r6, r2
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d6aa0:	f7fd faf9 	bl	d4096 <_Znwj>
   d6aa4:	4605      	mov	r5, r0
   d6aa6:	b118      	cbz	r0, d6ab0 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x24>
   d6aa8:	9a01      	ldr	r2, [sp, #4]
   d6aaa:	4631      	mov	r1, r6
   d6aac:	f7ff ff0d 	bl	d68ca <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
}
   d6ab0:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d6ab2:	60a5      	str	r5, [r4, #8]
}
   d6ab4:	b002      	add	sp, #8
   d6ab6:	bd70      	pop	{r4, r5, r6, pc}
   d6ab8:	000de164 	.word	0x000de164

000d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value) {
   d6abc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
  return i2c_dev->write(buffer, 2);
   d6abe:	2300      	movs	r3, #0
   d6ac0:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
   d6ac4:	f88d 100c 	strb.w	r1, [sp, #12]
   d6ac8:	f88d 200d 	strb.w	r2, [sp, #13]
  return i2c_dev->write(buffer, 2);
   d6acc:	2301      	movs	r3, #1
   d6ace:	2202      	movs	r2, #2
   d6ad0:	a903      	add	r1, sp, #12
   d6ad2:	6880      	ldr	r0, [r0, #8]
   d6ad4:	f7ff ff24 	bl	d6920 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d6ad8:	b005      	add	sp, #20
   d6ada:	f85d fb04 	ldr.w	pc, [sp], #4

000d6ade <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
   d6ade:	b508      	push	{r3, lr}
   d6ae0:	460a      	mov	r2, r1
  _mode = mode;
   d6ae2:	7401      	strb	r1, [r0, #16]
  write8(BNO055_OPR_MODE_ADDR, _mode);
   d6ae4:	213d      	movs	r1, #61	; 0x3d
   d6ae6:	f7ff ffe9 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
}
   d6aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(30);
   d6aee:	201e      	movs	r0, #30
   d6af0:	f002 ba86 	b.w	d9000 <delay>

000d6af4 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>:
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d6af4:	b570      	push	{r4, r5, r6, lr}
   d6af6:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d6af8:	2100      	movs	r1, #0
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d6afa:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t modeback = _mode;
   d6afc:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d6afe:	f7ff ffee 	bl	d6ade <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d6b02:	2019      	movs	r0, #25
   d6b04:	f002 fa7c 	bl	d9000 <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6b08:	2200      	movs	r2, #0
   d6b0a:	2107      	movs	r1, #7
   d6b0c:	4620      	mov	r0, r4
   d6b0e:	f7ff ffd5 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (usextal) {
   d6b12:	b185      	cbz	r5, d6b36 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x42>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x80);
   d6b14:	2280      	movs	r2, #128	; 0x80
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d6b16:	213f      	movs	r1, #63	; 0x3f
   d6b18:	4620      	mov	r0, r4
   d6b1a:	f7ff ffcf 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6b1e:	200a      	movs	r0, #10
   d6b20:	f002 fa6e 	bl	d9000 <delay>
  setMode(modeback);
   d6b24:	4620      	mov	r0, r4
   d6b26:	4631      	mov	r1, r6
   d6b28:	f7ff ffd9 	bl	d6ade <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d6b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(20);
   d6b30:	2014      	movs	r0, #20
   d6b32:	f002 ba65 	b.w	d9000 <delay>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d6b36:	462a      	mov	r2, r5
   d6b38:	e7ed      	b.n	d6b16 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x22>

000d6b3a <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>:
    const adafruit_bno055_offsets_t &offsets_type) {
   d6b3a:	b570      	push	{r4, r5, r6, lr}
   d6b3c:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d6b3e:	2100      	movs	r1, #0
    const adafruit_bno055_offsets_t &offsets_type) {
   d6b40:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t lastMode = _mode;
   d6b42:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d6b44:	f7ff ffcb 	bl	d6ade <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d6b48:	2019      	movs	r0, #25
   d6b4a:	f002 fa59 	bl	d9000 <delay>
  write8(ACCEL_OFFSET_X_LSB_ADDR, (offsets_type.accel_offset_x) & 0x0FF);
   d6b4e:	782a      	ldrb	r2, [r5, #0]
   d6b50:	2155      	movs	r1, #85	; 0x55
   d6b52:	4620      	mov	r0, r4
   d6b54:	f7ff ffb2 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_X_MSB_ADDR, (offsets_type.accel_offset_x >> 8) & 0x0FF);
   d6b58:	786a      	ldrb	r2, [r5, #1]
   d6b5a:	2156      	movs	r1, #86	; 0x56
   d6b5c:	4620      	mov	r0, r4
   d6b5e:	f7ff ffad 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_LSB_ADDR, (offsets_type.accel_offset_y) & 0x0FF);
   d6b62:	78aa      	ldrb	r2, [r5, #2]
   d6b64:	2157      	movs	r1, #87	; 0x57
   d6b66:	4620      	mov	r0, r4
   d6b68:	f7ff ffa8 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_MSB_ADDR, (offsets_type.accel_offset_y >> 8) & 0x0FF);
   d6b6c:	78ea      	ldrb	r2, [r5, #3]
   d6b6e:	2158      	movs	r1, #88	; 0x58
   d6b70:	4620      	mov	r0, r4
   d6b72:	f7ff ffa3 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_LSB_ADDR, (offsets_type.accel_offset_z) & 0x0FF);
   d6b76:	792a      	ldrb	r2, [r5, #4]
   d6b78:	2159      	movs	r1, #89	; 0x59
   d6b7a:	4620      	mov	r0, r4
   d6b7c:	f7ff ff9e 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_MSB_ADDR, (offsets_type.accel_offset_z >> 8) & 0x0FF);
   d6b80:	796a      	ldrb	r2, [r5, #5]
   d6b82:	215a      	movs	r1, #90	; 0x5a
   d6b84:	4620      	mov	r0, r4
   d6b86:	f7ff ff99 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_LSB_ADDR, (offsets_type.mag_offset_x) & 0x0FF);
   d6b8a:	79aa      	ldrb	r2, [r5, #6]
   d6b8c:	215b      	movs	r1, #91	; 0x5b
   d6b8e:	4620      	mov	r0, r4
   d6b90:	f7ff ff94 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_MSB_ADDR, (offsets_type.mag_offset_x >> 8) & 0x0FF);
   d6b94:	79ea      	ldrb	r2, [r5, #7]
   d6b96:	215c      	movs	r1, #92	; 0x5c
   d6b98:	4620      	mov	r0, r4
   d6b9a:	f7ff ff8f 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_LSB_ADDR, (offsets_type.mag_offset_y) & 0x0FF);
   d6b9e:	7a2a      	ldrb	r2, [r5, #8]
   d6ba0:	215d      	movs	r1, #93	; 0x5d
   d6ba2:	4620      	mov	r0, r4
   d6ba4:	f7ff ff8a 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_MSB_ADDR, (offsets_type.mag_offset_y >> 8) & 0x0FF);
   d6ba8:	7a6a      	ldrb	r2, [r5, #9]
   d6baa:	215e      	movs	r1, #94	; 0x5e
   d6bac:	4620      	mov	r0, r4
   d6bae:	f7ff ff85 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_LSB_ADDR, (offsets_type.mag_offset_z) & 0x0FF);
   d6bb2:	7aaa      	ldrb	r2, [r5, #10]
   d6bb4:	215f      	movs	r1, #95	; 0x5f
   d6bb6:	4620      	mov	r0, r4
   d6bb8:	f7ff ff80 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_MSB_ADDR, (offsets_type.mag_offset_z >> 8) & 0x0FF);
   d6bbc:	7aea      	ldrb	r2, [r5, #11]
   d6bbe:	2160      	movs	r1, #96	; 0x60
   d6bc0:	4620      	mov	r0, r4
   d6bc2:	f7ff ff7b 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_LSB_ADDR, (offsets_type.gyro_offset_x) & 0x0FF);
   d6bc6:	7b2a      	ldrb	r2, [r5, #12]
   d6bc8:	2161      	movs	r1, #97	; 0x61
   d6bca:	4620      	mov	r0, r4
   d6bcc:	f7ff ff76 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_MSB_ADDR, (offsets_type.gyro_offset_x >> 8) & 0x0FF);
   d6bd0:	7b6a      	ldrb	r2, [r5, #13]
   d6bd2:	2162      	movs	r1, #98	; 0x62
   d6bd4:	4620      	mov	r0, r4
   d6bd6:	f7ff ff71 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_LSB_ADDR, (offsets_type.gyro_offset_y) & 0x0FF);
   d6bda:	7baa      	ldrb	r2, [r5, #14]
   d6bdc:	2163      	movs	r1, #99	; 0x63
   d6bde:	4620      	mov	r0, r4
   d6be0:	f7ff ff6c 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_MSB_ADDR, (offsets_type.gyro_offset_y >> 8) & 0x0FF);
   d6be4:	7bea      	ldrb	r2, [r5, #15]
   d6be6:	2164      	movs	r1, #100	; 0x64
   d6be8:	4620      	mov	r0, r4
   d6bea:	f7ff ff67 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_LSB_ADDR, (offsets_type.gyro_offset_z) & 0x0FF);
   d6bee:	7c2a      	ldrb	r2, [r5, #16]
   d6bf0:	2165      	movs	r1, #101	; 0x65
   d6bf2:	4620      	mov	r0, r4
   d6bf4:	f7ff ff62 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_MSB_ADDR, (offsets_type.gyro_offset_z >> 8) & 0x0FF);
   d6bf8:	7c6a      	ldrb	r2, [r5, #17]
   d6bfa:	2166      	movs	r1, #102	; 0x66
   d6bfc:	4620      	mov	r0, r4
   d6bfe:	f7ff ff5d 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_LSB_ADDR, (offsets_type.accel_radius) & 0x0FF);
   d6c02:	7caa      	ldrb	r2, [r5, #18]
   d6c04:	2167      	movs	r1, #103	; 0x67
   d6c06:	4620      	mov	r0, r4
   d6c08:	f7ff ff58 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_MSB_ADDR, (offsets_type.accel_radius >> 8) & 0x0FF);
   d6c0c:	7cea      	ldrb	r2, [r5, #19]
   d6c0e:	2168      	movs	r1, #104	; 0x68
   d6c10:	4620      	mov	r0, r4
   d6c12:	f7ff ff53 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_LSB_ADDR, (offsets_type.mag_radius) & 0x0FF);
   d6c16:	7d2a      	ldrb	r2, [r5, #20]
   d6c18:	2169      	movs	r1, #105	; 0x69
   d6c1a:	4620      	mov	r0, r4
   d6c1c:	f7ff ff4e 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_MSB_ADDR, (offsets_type.mag_radius >> 8) & 0x0FF);
   d6c20:	7d6a      	ldrb	r2, [r5, #21]
   d6c22:	216a      	movs	r1, #106	; 0x6a
   d6c24:	4620      	mov	r0, r4
   d6c26:	f7ff ff49 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  setMode(lastMode);
   d6c2a:	4631      	mov	r1, r6
   d6c2c:	4620      	mov	r0, r4
}
   d6c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setMode(lastMode);
   d6c32:	f7ff bf54 	b.w	d6ade <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

000d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
   d6c36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[1] = {reg};
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d6c38:	2201      	movs	r2, #1
   d6c3a:	2300      	movs	r3, #0
   d6c3c:	e9cd 2300 	strd	r2, r3, [sp]
   d6c40:	ab03      	add	r3, sp, #12
  uint8_t buffer[1] = {reg};
   d6c42:	f88d 100c 	strb.w	r1, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d6c46:	6880      	ldr	r0, [r0, #8]
   d6c48:	4619      	mov	r1, r3
   d6c4a:	f7ff fed7 	bl	d69fc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
  return (byte)buffer[0];
}
   d6c4e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d6c52:	b005      	add	sp, #20
   d6c54:	f85d fb04 	ldr.w	pc, [sp], #4

000d6c58 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
   d6c58:	b570      	push	{r4, r5, r6, lr}
   d6c5a:	4604      	mov	r4, r0
   d6c5c:	460e      	mov	r6, r1
  if (!i2c_dev->begin()) {
   d6c5e:	6880      	ldr	r0, [r0, #8]
   d6c60:	2101      	movs	r1, #1
   d6c62:	f7ff fe4e 	bl	d6902 <_ZN18Adafruit_I2CDevice5beginEb>
   d6c66:	4605      	mov	r5, r0
   d6c68:	b910      	cbnz	r0, d6c70 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x18>
    return false;
   d6c6a:	2500      	movs	r5, #0
}
   d6c6c:	4628      	mov	r0, r5
   d6c6e:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
   d6c70:	2100      	movs	r1, #0
   d6c72:	4620      	mov	r0, r4
   d6c74:	f7ff ffdf 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (id != BNO055_ID) {
   d6c78:	28a0      	cmp	r0, #160	; 0xa0
   d6c7a:	d113      	bne.n	d6ca4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4c>
  setMode(OPERATION_MODE_CONFIG);
   d6c7c:	2100      	movs	r1, #0
   d6c7e:	4620      	mov	r0, r4
   d6c80:	f7ff ff2d 	bl	d6ade <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
   d6c84:	2220      	movs	r2, #32
   d6c86:	213f      	movs	r1, #63	; 0x3f
   d6c88:	4620      	mov	r0, r4
   d6c8a:	f7ff ff17 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
   d6c8e:	201e      	movs	r0, #30
    delay(10);
   d6c90:	f002 f9b6 	bl	d9000 <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
   d6c94:	2100      	movs	r1, #0
   d6c96:	4620      	mov	r0, r4
   d6c98:	f7ff ffcd 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6c9c:	28a0      	cmp	r0, #160	; 0xa0
   d6c9e:	d00c      	beq.n	d6cba <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x62>
    delay(10);
   d6ca0:	200a      	movs	r0, #10
   d6ca2:	e7f5      	b.n	d6c90 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x38>
    delay(1000); // hold on for boot
   d6ca4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6ca8:	f002 f9aa 	bl	d9000 <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
   d6cac:	2100      	movs	r1, #0
   d6cae:	4620      	mov	r0, r4
   d6cb0:	f7ff ffc1 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if (id != BNO055_ID) {
   d6cb4:	28a0      	cmp	r0, #160	; 0xa0
   d6cb6:	d1d8      	bne.n	d6c6a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x12>
   d6cb8:	e7e0      	b.n	d6c7c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x24>
  delay(50);
   d6cba:	2032      	movs	r0, #50	; 0x32
   d6cbc:	f002 f9a0 	bl	d9000 <delay>
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
   d6cc0:	2200      	movs	r2, #0
   d6cc2:	213e      	movs	r1, #62	; 0x3e
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	f7ff fef9 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6cca:	200a      	movs	r0, #10
   d6ccc:	f002 f998 	bl	d9000 <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6cd0:	2200      	movs	r2, #0
   d6cd2:	2107      	movs	r1, #7
   d6cd4:	4620      	mov	r0, r4
   d6cd6:	f7ff fef1 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
   d6cda:	2200      	movs	r2, #0
   d6cdc:	213f      	movs	r1, #63	; 0x3f
   d6cde:	4620      	mov	r0, r4
   d6ce0:	f7ff feec 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6ce4:	200a      	movs	r0, #10
   d6ce6:	f002 f98b 	bl	d9000 <delay>
  setMode(mode);
   d6cea:	4620      	mov	r0, r4
   d6cec:	4631      	mov	r1, r6
   d6cee:	f7ff fef6 	bl	d6ade <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   d6cf2:	2014      	movs	r0, #20
   d6cf4:	f002 f984 	bl	d9000 <delay>
  return true;
   d6cf8:	e7b8      	b.n	d6c6c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x14>

000d6cfa <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>:
                                      uint8_t *system_error) {
   d6cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cfc:	460f      	mov	r7, r1
   d6cfe:	4616      	mov	r6, r2
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6d00:	2107      	movs	r1, #7
   d6d02:	2200      	movs	r2, #0
                                      uint8_t *system_error) {
   d6d04:	4604      	mov	r4, r0
   d6d06:	461d      	mov	r5, r3
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6d08:	f7ff fed8 	bl	d6abc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (system_status != 0)
   d6d0c:	b127      	cbz	r7, d6d18 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x1e>
    *system_status = read8(BNO055_SYS_STAT_ADDR);
   d6d0e:	2139      	movs	r1, #57	; 0x39
   d6d10:	4620      	mov	r0, r4
   d6d12:	f7ff ff90 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6d16:	7038      	strb	r0, [r7, #0]
  if (self_test_result != 0)
   d6d18:	b126      	cbz	r6, d6d24 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x2a>
    *self_test_result = read8(BNO055_SELFTEST_RESULT_ADDR);
   d6d1a:	2136      	movs	r1, #54	; 0x36
   d6d1c:	4620      	mov	r0, r4
   d6d1e:	f7ff ff8a 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6d22:	7030      	strb	r0, [r6, #0]
  if (system_error != 0)
   d6d24:	b125      	cbz	r5, d6d30 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x36>
    *system_error = read8(BNO055_SYS_ERR_ADDR);
   d6d26:	213a      	movs	r1, #58	; 0x3a
   d6d28:	4620      	mov	r0, r4
   d6d2a:	f7ff ff84 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6d2e:	7028      	strb	r0, [r5, #0]
}
   d6d30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(200);
   d6d34:	20c8      	movs	r0, #200	; 0xc8
   d6d36:	f002 b963 	b.w	d9000 <delay>

000d6d3a <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>:
                                     uint8_t *accel, uint8_t *mag) {
   d6d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d3c:	460e      	mov	r6, r1
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d6d3e:	2135      	movs	r1, #53	; 0x35
                                     uint8_t *accel, uint8_t *mag) {
   d6d40:	9f06      	ldr	r7, [sp, #24]
   d6d42:	4615      	mov	r5, r2
   d6d44:	461c      	mov	r4, r3
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d6d46:	f7ff ff76 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (sys != NULL) {
   d6d4a:	b10e      	cbz	r6, d6d50 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x16>
    *sys = (calData >> 6) & 0x03;
   d6d4c:	0983      	lsrs	r3, r0, #6
   d6d4e:	7033      	strb	r3, [r6, #0]
  if (gyro != NULL) {
   d6d50:	b115      	cbz	r5, d6d58 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x1e>
    *gyro = (calData >> 4) & 0x03;
   d6d52:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d6d56:	702b      	strb	r3, [r5, #0]
  if (accel != NULL) {
   d6d58:	b114      	cbz	r4, d6d60 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x26>
    *accel = (calData >> 2) & 0x03;
   d6d5a:	f3c0 0381 	ubfx	r3, r0, #2, #2
   d6d5e:	7023      	strb	r3, [r4, #0]
  if (mag != NULL) {
   d6d60:	b117      	cbz	r7, d6d68 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x2e>
    *mag = calData & 0x03;
   d6d62:	f000 0003 	and.w	r0, r0, #3
   d6d66:	7038      	strb	r0, [r7, #0]
}
   d6d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d6a <_ZN15Adafruit_BNO05517isFullyCalibratedEv>:
bool Adafruit_BNO055::isFullyCalibrated() {
   d6d6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6d6c:	4604      	mov	r4, r0
  getCalibration(&system, &gyro, &accel, &mag);
   d6d6e:	f10d 030f 	add.w	r3, sp, #15
   d6d72:	9300      	str	r3, [sp, #0]
   d6d74:	f10d 020d 	add.w	r2, sp, #13
   d6d78:	f10d 030e 	add.w	r3, sp, #14
   d6d7c:	a903      	add	r1, sp, #12
   d6d7e:	f7ff ffdc 	bl	d6d3a <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
  switch (_mode) {
   d6d82:	7c23      	ldrb	r3, [r4, #16]
   d6d84:	3b01      	subs	r3, #1
   d6d86:	2b09      	cmp	r3, #9
   d6d88:	d817      	bhi.n	d6dba <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x50>
   d6d8a:	e8df f003 	tbb	[pc, r3]
   d6d8e:	2205      	.short	0x2205
   d6d90:	130c1e10 	.word	0x130c1e10
   d6d94:	101e0c16 	.word	0x101e0c16
    return (accel == 3);
   d6d98:	f89d 000e 	ldrb.w	r0, [sp, #14]
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   d6d9c:	1ec3      	subs	r3, r0, #3
   d6d9e:	4258      	negs	r0, r3
   d6da0:	4158      	adcs	r0, r3
}
   d6da2:	b004      	add	sp, #16
   d6da4:	bd10      	pop	{r4, pc}
    return (accel == 3 && gyro == 3);
   d6da6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    return (mag == 3 && gyro == 3);
   d6daa:	2b03      	cmp	r3, #3
   d6dac:	d114      	bne.n	d6dd8 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6dae:	f89d 000d 	ldrb.w	r0, [sp, #13]
   d6db2:	e7f3      	b.n	d6d9c <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
   d6db4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d6db8:	e7f7      	b.n	d6daa <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x40>
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   d6dba:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6dbe:	2b03      	cmp	r3, #3
   d6dc0:	d10a      	bne.n	d6dd8 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6dc2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6dc6:	2b03      	cmp	r3, #3
   d6dc8:	d106      	bne.n	d6dd8 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6dca:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6dce:	2b03      	cmp	r3, #3
   d6dd0:	d102      	bne.n	d6dd8 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6dd2:	f89d 000f 	ldrb.w	r0, [sp, #15]
   d6dd6:	e7e1      	b.n	d6d9c <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
    return (accel == 3 && mag == 3);
   d6dd8:	2000      	movs	r0, #0
   d6dda:	e7e2      	b.n	d6da2 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x38>

000d6ddc <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>:
    adafruit_bno055_offsets_t &offsets_type) {
   d6ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6de0:	4604      	mov	r4, r0
   d6de2:	460d      	mov	r5, r1
  if (isFullyCalibrated()) {
   d6de4:	f7ff ffc1 	bl	d6d6a <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d6de8:	4606      	mov	r6, r0
   d6dea:	2800      	cmp	r0, #0
   d6dec:	f000 8091 	beq.w	d6f12 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t+0x136>
    setMode(OPERATION_MODE_CONFIG);
   d6df0:	2100      	movs	r1, #0
   d6df2:	4620      	mov	r0, r4
    adafruit_bno055_opmode_t lastMode = _mode;
   d6df4:	f894 8010 	ldrb.w	r8, [r4, #16]
    setMode(OPERATION_MODE_CONFIG);
   d6df8:	f7ff fe71 	bl	d6ade <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
    delay(25);
   d6dfc:	2019      	movs	r0, #25
   d6dfe:	f002 f8ff 	bl	d9000 <delay>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6e02:	2156      	movs	r1, #86	; 0x56
   d6e04:	4620      	mov	r0, r4
   d6e06:	f7ff ff16 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   d6e0a:	2155      	movs	r1, #85	; 0x55
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6e0c:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   d6e0e:	4620      	mov	r0, r4
   d6e10:	f7ff ff11 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6e14:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6e18:	8028      	strh	r0, [r5, #0]
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6e1a:	2158      	movs	r1, #88	; 0x58
   d6e1c:	4620      	mov	r0, r4
   d6e1e:	f7ff ff0a 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   d6e22:	2157      	movs	r1, #87	; 0x57
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6e24:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   d6e26:	4620      	mov	r0, r4
   d6e28:	f7ff ff05 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6e2c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6e30:	8068      	strh	r0, [r5, #2]
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6e32:	215a      	movs	r1, #90	; 0x5a
   d6e34:	4620      	mov	r0, r4
   d6e36:	f7ff fefe 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   d6e3a:	2159      	movs	r1, #89	; 0x59
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6e3c:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   d6e3e:	4620      	mov	r0, r4
   d6e40:	f7ff fef9 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6e44:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6e48:	80a8      	strh	r0, [r5, #4]
        (read8(MAG_OFFSET_X_MSB_ADDR) << 8) | (read8(MAG_OFFSET_X_LSB_ADDR));
   d6e4a:	215c      	movs	r1, #92	; 0x5c
   d6e4c:	4620      	mov	r0, r4
   d6e4e:	f7ff fef2 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6e52:	215b      	movs	r1, #91	; 0x5b
   d6e54:	4607      	mov	r7, r0
   d6e56:	4620      	mov	r0, r4
   d6e58:	f7ff feed 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6e5c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_x =
   d6e60:	80e8      	strh	r0, [r5, #6]
        (read8(MAG_OFFSET_Y_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Y_LSB_ADDR));
   d6e62:	215e      	movs	r1, #94	; 0x5e
   d6e64:	4620      	mov	r0, r4
   d6e66:	f7ff fee6 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6e6a:	215d      	movs	r1, #93	; 0x5d
   d6e6c:	4607      	mov	r7, r0
   d6e6e:	4620      	mov	r0, r4
   d6e70:	f7ff fee1 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6e74:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_y =
   d6e78:	8128      	strh	r0, [r5, #8]
        (read8(MAG_OFFSET_Z_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Z_LSB_ADDR));
   d6e7a:	2160      	movs	r1, #96	; 0x60
   d6e7c:	4620      	mov	r0, r4
   d6e7e:	f7ff feda 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6e82:	215f      	movs	r1, #95	; 0x5f
   d6e84:	4607      	mov	r7, r0
   d6e86:	4620      	mov	r0, r4
   d6e88:	f7ff fed5 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6e8c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_z =
   d6e90:	8168      	strh	r0, [r5, #10]
        (read8(GYRO_OFFSET_X_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_X_LSB_ADDR));
   d6e92:	2162      	movs	r1, #98	; 0x62
   d6e94:	4620      	mov	r0, r4
   d6e96:	f7ff fece 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6e9a:	2161      	movs	r1, #97	; 0x61
   d6e9c:	4607      	mov	r7, r0
   d6e9e:	4620      	mov	r0, r4
   d6ea0:	f7ff fec9 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ea4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_x =
   d6ea8:	81a8      	strh	r0, [r5, #12]
        (read8(GYRO_OFFSET_Y_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Y_LSB_ADDR));
   d6eaa:	2164      	movs	r1, #100	; 0x64
   d6eac:	4620      	mov	r0, r4
   d6eae:	f7ff fec2 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6eb2:	2163      	movs	r1, #99	; 0x63
   d6eb4:	4607      	mov	r7, r0
   d6eb6:	4620      	mov	r0, r4
   d6eb8:	f7ff febd 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ebc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_y =
   d6ec0:	81e8      	strh	r0, [r5, #14]
        (read8(GYRO_OFFSET_Z_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Z_LSB_ADDR));
   d6ec2:	2166      	movs	r1, #102	; 0x66
   d6ec4:	4620      	mov	r0, r4
   d6ec6:	f7ff feb6 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6eca:	2165      	movs	r1, #101	; 0x65
   d6ecc:	4607      	mov	r7, r0
   d6ece:	4620      	mov	r0, r4
   d6ed0:	f7ff feb1 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ed4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_z =
   d6ed8:	8228      	strh	r0, [r5, #16]
        (read8(ACCEL_RADIUS_MSB_ADDR) << 8) | (read8(ACCEL_RADIUS_LSB_ADDR));
   d6eda:	2168      	movs	r1, #104	; 0x68
   d6edc:	4620      	mov	r0, r4
   d6ede:	f7ff feaa 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ee2:	2167      	movs	r1, #103	; 0x67
   d6ee4:	4607      	mov	r7, r0
   d6ee6:	4620      	mov	r0, r4
   d6ee8:	f7ff fea5 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6eec:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.accel_radius =
   d6ef0:	8268      	strh	r0, [r5, #18]
        (read8(MAG_RADIUS_MSB_ADDR) << 8) | (read8(MAG_RADIUS_LSB_ADDR));
   d6ef2:	216a      	movs	r1, #106	; 0x6a
   d6ef4:	4620      	mov	r0, r4
   d6ef6:	f7ff fe9e 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6efa:	2169      	movs	r1, #105	; 0x69
   d6efc:	4607      	mov	r7, r0
   d6efe:	4620      	mov	r0, r4
   d6f00:	f7ff fe99 	bl	d6c36 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6f04:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_radius =
   d6f08:	82a8      	strh	r0, [r5, #20]
    setMode(lastMode);
   d6f0a:	4641      	mov	r1, r8
   d6f0c:	4620      	mov	r0, r4
   d6f0e:	f7ff fde6 	bl	d6ade <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d6f12:	4630      	mov	r0, r6
   d6f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6f18 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte *buffer,
                              uint8_t len) {
   d6f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t reg_buf[1] = {(uint8_t)reg};
   d6f1a:	f88d 100c 	strb.w	r1, [sp, #12]
  return i2c_dev->write_then_read(reg_buf, 1, buffer, len);
   d6f1e:	2100      	movs	r1, #0
   d6f20:	e9cd 3100 	strd	r3, r1, [sp]
   d6f24:	4613      	mov	r3, r2
   d6f26:	a903      	add	r1, sp, #12
   d6f28:	2201      	movs	r2, #1
   d6f2a:	6880      	ldr	r0, [r0, #8]
   d6f2c:	f7ff fd66 	bl	d69fc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
}
   d6f30:	b005      	add	sp, #20
   d6f32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6f38 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
   d6f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6f3a:	460d      	mov	r5, r1
   d6f3c:	4616      	mov	r6, r2

namespace imu {

template <uint8_t N> class Vector {
public:
  Vector() { memset(p_vec, 0, sizeof(double) * N); }
   d6f3e:	2100      	movs	r1, #0
   d6f40:	2218      	movs	r2, #24
   d6f42:	4604      	mov	r4, r0
   d6f44:	f006 fc56 	bl	dd7f4 <memset>
  memset(buffer, 0, 6);
   d6f48:	2300      	movs	r3, #0
   d6f4a:	9300      	str	r3, [sp, #0]
   d6f4c:	f8ad 3004 	strh.w	r3, [sp, #4]
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
   d6f50:	4628      	mov	r0, r5
   d6f52:	2306      	movs	r3, #6
   d6f54:	466a      	mov	r2, sp
   d6f56:	4631      	mov	r1, r6
   d6f58:	f7ff ffde 	bl	d6f18 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6f5c:	f89d 3001 	ldrb.w	r3, [sp, #1]
   d6f60:	f89d 0000 	ldrb.w	r0, [sp]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6f64:	f89d 7002 	ldrb.w	r7, [sp, #2]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6f68:	f89d 5004 	ldrb.w	r5, [sp, #4]
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6f6c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6f70:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d6f74:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6f78:	f89d 3005 	ldrb.w	r3, [sp, #5]
  switch (vector_type) {
   d6f7c:	2e1a      	cmp	r6, #26
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6f7e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6f82:	b200      	sxth	r0, r0
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6f84:	b23f      	sxth	r7, r7
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6f86:	b22d      	sxth	r5, r5
  switch (vector_type) {
   d6f88:	d00d      	beq.n	d6fa6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6f8a:	d808      	bhi.n	d6f9e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x66>
   d6f8c:	2e0e      	cmp	r6, #14
   d6f8e:	d00a      	beq.n	d6fa6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6f90:	2e14      	cmp	r6, #20
   d6f92:	d008      	beq.n	d6fa6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6f94:	2e08      	cmp	r6, #8
   d6f96:	d021      	beq.n	d6fdc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
}
   d6f98:	4620      	mov	r0, r4
   d6f9a:	b003      	add	sp, #12
   d6f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (vector_type) {
   d6f9e:	2e28      	cmp	r6, #40	; 0x28
   d6fa0:	d01c      	beq.n	d6fdc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
   d6fa2:	2e2e      	cmp	r6, #46	; 0x2e
   d6fa4:	e7f7      	b.n	d6f96 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5e>
    xyz[0] = ((double)x) / 16.0;
   d6fa6:	f005 fd67 	bl	dca78 <__aeabi_i2d>
   d6faa:	4b19      	ldr	r3, [pc, #100]	; (d7010 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6fac:	2200      	movs	r2, #0
   d6fae:	f005 fdcd 	bl	dcb4c <__aeabi_dmul>
   d6fb2:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 16.0;
   d6fb6:	4638      	mov	r0, r7
   d6fb8:	f005 fd5e 	bl	dca78 <__aeabi_i2d>
   d6fbc:	4b14      	ldr	r3, [pc, #80]	; (d7010 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6fbe:	2200      	movs	r2, #0
   d6fc0:	f005 fdc4 	bl	dcb4c <__aeabi_dmul>
   d6fc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 16.0;
   d6fc8:	4628      	mov	r0, r5
   d6fca:	f005 fd55 	bl	dca78 <__aeabi_i2d>
   d6fce:	4b10      	ldr	r3, [pc, #64]	; (d7010 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6fd0:	2200      	movs	r2, #0
   d6fd2:	f005 fdbb 	bl	dcb4c <__aeabi_dmul>
    xyz[2] = ((double)z) / 100.0;
   d6fd6:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return xyz;
   d6fda:	e7dd      	b.n	d6f98 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x60>
    xyz[0] = ((double)x) / 100.0;
   d6fdc:	f005 fd4c 	bl	dca78 <__aeabi_i2d>
   d6fe0:	4b0c      	ldr	r3, [pc, #48]	; (d7014 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6fe2:	2200      	movs	r2, #0
   d6fe4:	f005 fedc 	bl	dcda0 <__aeabi_ddiv>
   d6fe8:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 100.0;
   d6fec:	4638      	mov	r0, r7
   d6fee:	f005 fd43 	bl	dca78 <__aeabi_i2d>
   d6ff2:	4b08      	ldr	r3, [pc, #32]	; (d7014 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6ff4:	2200      	movs	r2, #0
   d6ff6:	f005 fed3 	bl	dcda0 <__aeabi_ddiv>
   d6ffa:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 100.0;
   d6ffe:	4628      	mov	r0, r5
   d7000:	f005 fd3a 	bl	dca78 <__aeabi_i2d>
   d7004:	4b03      	ldr	r3, [pc, #12]	; (d7014 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d7006:	2200      	movs	r2, #0
   d7008:	f005 feca 	bl	dcda0 <__aeabi_ddiv>
   d700c:	e7e3      	b.n	d6fd6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9e>
   d700e:	bf00      	nop
   d7010:	3fb00000 	.word	0x3fb00000
   d7014:	40590000 	.word	0x40590000

000d7018 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
   d7018:	b530      	push	{r4, r5, lr}
   d701a:	460c      	mov	r4, r1
   d701c:	b087      	sub	sp, #28
   d701e:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   d7020:	2220      	movs	r2, #32
   d7022:	2100      	movs	r1, #0
   d7024:	1d20      	adds	r0, r4, #4
   d7026:	f006 fbe5 	bl	dd7f4 <memset>
  event->version = sizeof(sensors_event_t);
   d702a:	2324      	movs	r3, #36	; 0x24
   d702c:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d702e:	68eb      	ldr	r3, [r5, #12]
   d7030:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_ORIENTATION;
   d7032:	2303      	movs	r3, #3
   d7034:	60a3      	str	r3, [r4, #8]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7036:	f001 f8f7 	bl	d8228 <HAL_Timer_Get_Milli_Seconds>
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d703a:	221a      	movs	r2, #26
  event->timestamp = millis();
   d703c:	6120      	str	r0, [r4, #16]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d703e:	4629      	mov	r1, r5
   d7040:	4668      	mov	r0, sp
   d7042:	f7ff ff79 	bl	d6f38 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
   d7046:	e9dd 0100 	ldrd	r0, r1, [sp]
   d704a:	f006 f877 	bl	dd13c <__aeabi_d2f>
   d704e:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
   d7050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d7054:	f006 f872 	bl	dd13c <__aeabi_d2f>
   d7058:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
   d705a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d705e:	f006 f86d 	bl	dd13c <__aeabi_d2f>
   d7062:	61e0      	str	r0, [r4, #28]
}
   d7064:	2001      	movs	r0, #1
   d7066:	b007      	add	sp, #28
   d7068:	bd30      	pop	{r4, r5, pc}

000d706a <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d706a:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d706c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d706e:	db66      	blt.n	d713e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d7070:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d7074:	428c      	cmp	r4, r1
   d7076:	dd62      	ble.n	d713e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d7078:	2a00      	cmp	r2, #0
   d707a:	db60      	blt.n	d713e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d707c:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d7080:	4294      	cmp	r4, r2
   d7082:	dd5c      	ble.n	d713e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   d7084:	7e84      	ldrb	r4, [r0, #26]
   d7086:	2c02      	cmp	r4, #2
   d7088:	d05a      	beq.n	d7140 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   d708a:	2c03      	cmp	r4, #3
   d708c:	d061      	beq.n	d7152 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   d708e:	2c01      	cmp	r4, #1
   d7090:	d104      	bne.n	d709c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   d7092:	8904      	ldrh	r4, [r0, #8]
   d7094:	43d2      	mvns	r2, r2
   d7096:	4414      	add	r4, r2
      break;
   d7098:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d709a:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   d709c:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   d70a0:	428c      	cmp	r4, r1
   d70a2:	bfa8      	it	ge
   d70a4:	460c      	movge	r4, r1
   d70a6:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   d70a8:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   d70ac:	4294      	cmp	r4, r2
   d70ae:	bfa8      	it	ge
   d70b0:	4614      	movge	r4, r2
   d70b2:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   d70b4:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   d70b8:	428c      	cmp	r4, r1
   d70ba:	bfb8      	it	lt
   d70bc:	460c      	movlt	r4, r1
   d70be:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   d70c0:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   d70c4:	4294      	cmp	r4, r2
   d70c6:	bfb8      	it	lt
   d70c8:	4614      	movlt	r4, r2
   d70ca:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   d70cc:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d70d0:	2c01      	cmp	r4, #1
   d70d2:	d116      	bne.n	d7102 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   d70d4:	2b01      	cmp	r3, #1
   d70d6:	d042      	beq.n	d715e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   d70d8:	2b02      	cmp	r3, #2
   d70da:	d051      	beq.n	d7180 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   d70dc:	b98b      	cbnz	r3, d7102 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   d70de:	2a00      	cmp	r2, #0
   d70e0:	8905      	ldrh	r5, [r0, #8]
   d70e2:	6b47      	ldr	r7, [r0, #52]	; 0x34
   d70e4:	4614      	mov	r4, r2
   d70e6:	bfb8      	it	lt
   d70e8:	1dd4      	addlt	r4, r2, #7
   d70ea:	10e4      	asrs	r4, r4, #3
   d70ec:	fb14 1405 	smlabb	r4, r4, r5, r1
   d70f0:	f002 0607 	and.w	r6, r2, #7
   d70f4:	2501      	movs	r5, #1
   d70f6:	fa05 f606 	lsl.w	r6, r5, r6
   d70fa:	5d3d      	ldrb	r5, [r7, r4]
   d70fc:	ea25 0506 	bic.w	r5, r5, r6
   d7100:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   d7102:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d7106:	2c04      	cmp	r4, #4
   d7108:	d119      	bne.n	d713e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   d710a:	8904      	ldrh	r4, [r0, #8]
   d710c:	fb14 f202 	smulbb	r2, r4, r2
   d7110:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   d7114:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   d7118:	f342 024f 	sbfx	r2, r2, #1, #16
   d711c:	eb02 0264 	add.w	r2, r2, r4, asr #1
   d7120:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
   d7122:	5ca0      	ldrb	r0, [r4, r2]
   d7124:	07c9      	lsls	r1, r1, #31
        uint8_t t = pixelptr[0] & 0x0F;
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   d7126:	bf4b      	itete	mi
   d7128:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   d712c:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   d7130:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   d7134:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   d7138:	bf48      	it	mi
   d713a:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   d713c:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   d713e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   d7140:	8904      	ldrh	r4, [r0, #8]
   d7142:	43c9      	mvns	r1, r1
   d7144:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d7146:	8944      	ldrh	r4, [r0, #10]
   d7148:	43d2      	mvns	r2, r2
   d714a:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   d714c:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d714e:	b212      	sxth	r2, r2
      break;
   d7150:	e7a4      	b.n	d709c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d7152:	8944      	ldrh	r4, [r0, #10]
   d7154:	43c9      	mvns	r1, r1
   d7156:	440c      	add	r4, r1
      break;
   d7158:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d715a:	b222      	sxth	r2, r4
      break;
   d715c:	e79e      	b.n	d709c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   d715e:	2a00      	cmp	r2, #0
   d7160:	8905      	ldrh	r5, [r0, #8]
   d7162:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d7164:	4614      	mov	r4, r2
   d7166:	bfb8      	it	lt
   d7168:	1dd4      	addlt	r4, r2, #7
   d716a:	10e4      	asrs	r4, r4, #3
   d716c:	fb14 1405 	smlabb	r4, r4, r5, r1
   d7170:	f002 0707 	and.w	r7, r2, #7
   d7174:	2501      	movs	r5, #1
   d7176:	40bd      	lsls	r5, r7
   d7178:	5d37      	ldrb	r7, [r6, r4]
   d717a:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d717c:	5535      	strb	r5, [r6, r4]
        break;
   d717e:	e7c0      	b.n	d7102 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d7180:	2a00      	cmp	r2, #0
   d7182:	8905      	ldrh	r5, [r0, #8]
   d7184:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d7186:	4614      	mov	r4, r2
   d7188:	bfb8      	it	lt
   d718a:	1dd4      	addlt	r4, r2, #7
   d718c:	10e4      	asrs	r4, r4, #3
   d718e:	fb14 1405 	smlabb	r4, r4, r5, r1
   d7192:	f002 0707 	and.w	r7, r2, #7
   d7196:	2501      	movs	r5, #1
   d7198:	40bd      	lsls	r5, r7
   d719a:	5d37      	ldrb	r7, [r6, r4]
   d719c:	407d      	eors	r5, r7
   d719e:	e7ed      	b.n	d717c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

000d71a0 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   d71a0:	b538      	push	{r3, r4, r5, lr}
   d71a2:	460d      	mov	r5, r1
   d71a4:	4611      	mov	r1, r2
   d71a6:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d71a8:	b21a      	sxth	r2, r3
   d71aa:	b209      	sxth	r1, r1
   d71ac:	f000 fa96 	bl	d76dc <_ZN12Adafruit_GFXC1Ess>
   d71b0:	9a06      	ldr	r2, [sp, #24]
   d71b2:	4b0b      	ldr	r3, [pc, #44]	; (d71e0 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   d71b4:	62e2      	str	r2, [r4, #44]	; 0x2c
   d71b6:	9a07      	ldr	r2, [sp, #28]
   d71b8:	6023      	str	r3, [r4, #0]
   d71ba:	2300      	movs	r3, #0
   d71bc:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   d71c0:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   d71c4:	f04f 33ff 	mov.w	r3, #4294967295
   d71c8:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   d71cc:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   d71d0:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   d71d2:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d71d4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   d71d8:	6523      	str	r3, [r4, #80]	; 0x50
}
   d71da:	4620      	mov	r0, r4
   d71dc:	bd38      	pop	{r3, r4, r5, pc}
   d71de:	bf00      	nop
   d71e0:	000de180 	.word	0x000de180

000d71e4 <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   d71e4:	b538      	push	{r3, r4, r5, lr}
   d71e6:	4b0c      	ldr	r3, [pc, #48]	; (d7218 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   d71e8:	6003      	str	r3, [r0, #0]
   d71ea:	4604      	mov	r4, r0
  if (buffer) {
   d71ec:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d71ee:	b118      	cbz	r0, d71f8 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   d71f0:	f001 fa6e 	bl	d86d0 <free>
    buffer = NULL;
   d71f4:	2300      	movs	r3, #0
   d71f6:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   d71f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d71fa:	b135      	cbz	r5, d720a <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   d71fc:	4628      	mov	r0, r5
   d71fe:	f7ff fa03 	bl	d6608 <_ZN18Adafruit_SPIDeviceD1Ev>
   d7202:	2138      	movs	r1, #56	; 0x38
   d7204:	4628      	mov	r0, r5
   d7206:	f002 fe6d 	bl	d9ee4 <_ZdlPvj>
  if (i2c_dev)
   d720a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d720c:	b110      	cbz	r0, d7214 <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   d720e:	2110      	movs	r1, #16
   d7210:	f002 fe68 	bl	d9ee4 <_ZdlPvj>
}
   d7214:	4620      	mov	r0, r4
   d7216:	bd38      	pop	{r3, r4, r5, pc}
   d7218:	000de180 	.word	0x000de180

000d721c <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d721c:	b530      	push	{r4, r5, lr}
   d721e:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   d7220:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d7222:	f88d 100f 	strb.w	r1, [sp, #15]
   d7226:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   d7228:	b17d      	cbz	r5, d724a <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d722a:	2300      	movs	r3, #0
   d722c:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   d722e:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d7232:	f88d 3014 	strb.w	r3, [sp, #20]
   d7236:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   d723a:	2301      	movs	r3, #1
   d723c:	2202      	movs	r2, #2
   d723e:	a905      	add	r1, sp, #20
   d7240:	4628      	mov	r0, r5
   d7242:	f7ff fb6d 	bl	d6920 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d7246:	b007      	add	sp, #28
   d7248:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   d724a:	4629      	mov	r1, r5
   d724c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d7250:	f002 fdb1 	bl	d9db6 <digitalWrite>
    spi_dev->write(&c, 1);
   d7254:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7256:	9500      	str	r5, [sp, #0]
   d7258:	462b      	mov	r3, r5
   d725a:	2201      	movs	r2, #1
   d725c:	f10d 010f 	add.w	r1, sp, #15
   d7260:	f7ff facd 	bl	d67fe <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   d7264:	e7ef      	b.n	d7246 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000d7266 <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   d7266:	2900      	cmp	r1, #0
   d7268:	bf14      	ite	ne
   d726a:	21a7      	movne	r1, #167	; 0xa7
   d726c:	21a6      	moveq	r1, #166	; 0xa6
   d726e:	f7ff bfd5 	b.w	d721c <_ZN17Adafruit_GrayOLED12oled_commandEh>

000d7272 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d7272:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   d7274:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d7276:	b085      	sub	sp, #20
   d7278:	4604      	mov	r4, r0
   d727a:	460e      	mov	r6, r1
   d727c:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   d727e:	b165      	cbz	r5, d729a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d7280:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d7282:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d7286:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d728a:	2301      	movs	r3, #1
   d728c:	9000      	str	r0, [sp, #0]
   d728e:	9301      	str	r3, [sp, #4]
   d7290:	4628      	mov	r0, r5
   d7292:	f7ff fb45 	bl	d6920 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d7296:	b005      	add	sp, #20
   d7298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   d729a:	4629      	mov	r1, r5
   d729c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d72a0:	f002 fd89 	bl	d9db6 <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   d72a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d72a6:	9500      	str	r5, [sp, #0]
   d72a8:	462b      	mov	r3, r5
   d72aa:	463a      	mov	r2, r7
   d72ac:	4631      	mov	r1, r6
   d72ae:	f7ff faa6 	bl	d67fe <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d72b2:	e7f0      	b.n	d7296 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000d72b4 <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   d72b4:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d72b6:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   d72ba:	8903      	ldrh	r3, [r0, #8]
   d72bc:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   d72c0:	fb12 f203 	smulbb	r2, r2, r3
   d72c4:	1dcb      	adds	r3, r1, #7
   d72c6:	bf48      	it	mi
   d72c8:	f101 030e 	addmi.w	r3, r1, #14
   d72cc:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   d72ce:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d72d0:	435a      	muls	r2, r3
   d72d2:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d72d4:	2100      	movs	r1, #0
   d72d6:	f006 fa8d 	bl	dd7f4 <memset>
  window_x1 = 0;
   d72da:	2300      	movs	r3, #0
   d72dc:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d72de:	8923      	ldrh	r3, [r4, #8]
   d72e0:	3b01      	subs	r3, #1
   d72e2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d72e4:	8963      	ldrh	r3, [r4, #10]
   d72e6:	3b01      	subs	r3, #1
   d72e8:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   d72ea:	bd10      	pop	{r4, pc}

000d72ec <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d72ec:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   d72ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d72f0:	4604      	mov	r4, r0
   d72f2:	460e      	mov	r6, r1
   d72f4:	4615      	mov	r5, r2
  if ((!buffer) &&
   d72f6:	b30b      	cbz	r3, d733c <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   d72f8:	2d00      	cmp	r5, #0
   d72fa:	d133      	bne.n	d7364 <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   d72fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d72fe:	2b00      	cmp	r3, #0
   d7300:	d050      	beq.n	d73a4 <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   d7302:	2010      	movs	r0, #16
   d7304:	f7fc fec7 	bl	d4096 <_Znwj>
   d7308:	4605      	mov	r5, r0
   d730a:	b118      	cbz	r0, d7314 <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   d730c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d730e:	4631      	mov	r1, r6
   d7310:	f7ff fadb 	bl	d68ca <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d7314:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   d7316:	b31d      	cbz	r5, d7360 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d7318:	2101      	movs	r1, #1
   d731a:	4628      	mov	r0, r5
   d731c:	f7ff faf1 	bl	d6902 <_ZN18Adafruit_I2CDevice5beginEb>
   d7320:	b1f0      	cbz	r0, d7360 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   d7322:	4620      	mov	r0, r4
   d7324:	f7ff ffc6 	bl	d72b4 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   d7328:	2300      	movs	r3, #0
   d732a:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d732c:	8923      	ldrh	r3, [r4, #8]
   d732e:	3b01      	subs	r3, #1
   d7330:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d7332:	8963      	ldrh	r3, [r4, #10]
   d7334:	3b01      	subs	r3, #1
   d7336:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   d7338:	2001      	movs	r0, #1
   d733a:	e012      	b.n	d7362 <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   d733c:	8923      	ldrh	r3, [r4, #8]
   d733e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   d7342:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   d7346:	fb10 f003 	smulbb	r0, r0, r3
   d734a:	1dd3      	adds	r3, r2, #7
   d734c:	bf48      	it	mi
   d734e:	f102 030e 	addmi.w	r3, r2, #14
   d7352:	10db      	asrs	r3, r3, #3
   d7354:	4358      	muls	r0, r3
   d7356:	f001 f9b3 	bl	d86c0 <malloc>
   d735a:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   d735c:	2800      	cmp	r0, #0
   d735e:	d1cb      	bne.n	d72f8 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   d7360:	2000      	movs	r0, #0
}
   d7362:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   d7364:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d7366:	2800      	cmp	r0, #0
   d7368:	dbc8      	blt.n	d72fc <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   d736a:	2101      	movs	r1, #1
   d736c:	b280      	uxth	r0, r0
   d736e:	f002 fd11 	bl	d9d94 <pinMode>
    digitalWrite(rstPin, HIGH);
   d7372:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d7376:	2101      	movs	r1, #1
   d7378:	f002 fd1d 	bl	d9db6 <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   d737c:	200a      	movs	r0, #10
   d737e:	f001 fe3f 	bl	d9000 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d7382:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d7386:	2100      	movs	r1, #0
   d7388:	f002 fd15 	bl	d9db6 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d738c:	200a      	movs	r0, #10
   d738e:	f001 fe37 	bl	d9000 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d7392:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d7396:	2101      	movs	r1, #1
   d7398:	f002 fd0d 	bl	d9db6 <digitalWrite>
    delay(10);
   d739c:	200a      	movs	r0, #10
   d739e:	f001 fe2f 	bl	d9000 <delay>
   d73a2:	e7ab      	b.n	d72fc <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   d73a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d73a6:	2800      	cmp	r0, #0
   d73a8:	d0da      	beq.n	d7360 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d73aa:	f7ff f936 	bl	d661a <_ZN18Adafruit_SPIDevice5beginEv>
   d73ae:	2800      	cmp	r0, #0
   d73b0:	d0d6      	beq.n	d7360 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d73b2:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d73b6:	2101      	movs	r1, #1
   d73b8:	f002 fcec 	bl	d9d94 <pinMode>
   d73bc:	e7b1      	b.n	d7322 <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000d73be <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   d73be:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d73c0:	2381      	movs	r3, #129	; 0x81
   d73c2:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   d73c6:	2202      	movs	r2, #2
   d73c8:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d73ca:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   d73ce:	f7ff ff50 	bl	d7272 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   d73d2:	b003      	add	sp, #12
   d73d4:	f85d fb04 	ldr.w	pc, [sp], #4

000d73d8 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
   d73d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d73dc:	b085      	sub	sp, #20
   d73de:	461f      	mov	r7, r3
   d73e0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d73e4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d73e8:	eba8 0902 	sub.w	r9, r8, r2
   d73ec:	eba7 0a01 	sub.w	sl, r7, r1
   d73f0:	f1b9 0f00 	cmp.w	r9, #0
   d73f4:	bfb8      	it	lt
   d73f6:	f1c9 0900 	rsblt	r9, r9, #0
   d73fa:	f1ba 0f00 	cmp.w	sl, #0
   d73fe:	bfb8      	it	lt
   d7400:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d7404:	45d1      	cmp	r9, sl
                             uint16_t color) {
   d7406:	4683      	mov	fp, r0
   d7408:	460c      	mov	r4, r1
   d740a:	4615      	mov	r5, r2
  if (steep) {
   d740c:	dd04      	ble.n	d7418 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d740e:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
   d7410:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
   d7412:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
   d7414:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
   d7416:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d7418:	42bc      	cmp	r4, r7
   d741a:	dd05      	ble.n	d7428 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d741c:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
   d741e:	4645      	mov	r5, r8
   d7420:	4690      	mov	r8, r2
  if (x0 > x1) {
   d7422:	4622      	mov	r2, r4
   d7424:	463c      	mov	r4, r7
   d7426:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d7428:	1b3e      	subs	r6, r7, r4
   d742a:	b2b2      	uxth	r2, r6
   d742c:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d742e:	eba8 0205 	sub.w	r2, r8, r5
   d7432:	2a00      	cmp	r2, #0
   d7434:	bfb8      	it	lt
   d7436:	4252      	neglt	r2, r2
   d7438:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d743a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d743e:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d7442:	4545      	cmp	r5, r8
   d7444:	bfb4      	ite	lt
   d7446:	2201      	movlt	r2, #1
   d7448:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d744c:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d744e:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
   d7450:	42bc      	cmp	r4, r7
   d7452:	dc1c      	bgt.n	d748e <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
    if (steep) {
   d7454:	f8db 2000 	ldr.w	r2, [fp]
      writePixel(y0, x0, color);
   d7458:	9303      	str	r3, [sp, #12]
    if (steep) {
   d745a:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
   d745c:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d7460:	bfc7      	ittee	gt
   d7462:	4629      	movgt	r1, r5
   d7464:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
   d7466:	462a      	movle	r2, r5
   d7468:	4621      	movle	r1, r4
   d746a:	4658      	mov	r0, fp
   d746c:	47c0      	blx	r8
    }
    err -= dy;
   d746e:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
   d7470:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d7472:	1ab6      	subs	r6, r6, r2
   d7474:	b2b1      	uxth	r1, r6
   d7476:	b236      	sxth	r6, r6
    if (err < 0) {
   d7478:	2e00      	cmp	r6, #0
   d747a:	da05      	bge.n	d7488 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
      y0 += ystep;
   d747c:	9a02      	ldr	r2, [sp, #8]
   d747e:	4415      	add	r5, r2
      err += dx;
   d7480:	9a00      	ldr	r2, [sp, #0]
   d7482:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d7484:	b22d      	sxth	r5, r5
      err += dx;
   d7486:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
   d7488:	3401      	adds	r4, #1
   d748a:	b224      	sxth	r4, r4
   d748c:	e7e0      	b.n	d7450 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
    }
  }
}
   d748e:	b005      	add	sp, #20
   d7490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7494 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
   d7494:	4770      	bx	lr

000d7496 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
   d7496:	b410      	push	{r4}
  drawPixel(x, y, color);
   d7498:	6804      	ldr	r4, [r0, #0]
   d749a:	6924      	ldr	r4, [r4, #16]
   d749c:	46a4      	mov	ip, r4
}
   d749e:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
   d74a2:	4760      	bx	ip

000d74a4 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
   d74a4:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
   d74a6:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d74a8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
   d74ac:	9502      	str	r5, [sp, #8]
   d74ae:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d74b0:	46a4      	mov	ip, r4
}
   d74b2:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
   d74b4:	4760      	bx	ip

000d74b6 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
   d74b6:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
   d74b8:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d74ba:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
   d74be:	9502      	str	r5, [sp, #8]
   d74c0:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d74c2:	46a4      	mov	ip, r4
}
   d74c4:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
   d74c6:	4760      	bx	ip

000d74c8 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
   d74c8:	b470      	push	{r4, r5, r6}
   d74ca:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d74ce:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
   d74d2:	6804      	ldr	r4, [r0, #0]
   d74d4:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d74d8:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d74da:	46a4      	mov	ip, r4
}
   d74dc:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
   d74de:	4760      	bx	ip

000d74e0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
   d74e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d74e4:	461c      	mov	r4, r3
  startWrite();
   d74e6:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d74e8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d74ec:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d74ee:	4605      	mov	r5, r0
   d74f0:	4616      	mov	r6, r2
  writeLine(x, y, x, y + h - 1, color);
   d74f2:	3c01      	subs	r4, #1
   d74f4:	4434      	add	r4, r6
                                 uint16_t color) {
   d74f6:	460f      	mov	r7, r1
  writeLine(x, y, x, y + h - 1, color);
   d74f8:	b224      	sxth	r4, r4
  startWrite();
   d74fa:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
   d74fc:	682b      	ldr	r3, [r5, #0]
   d74fe:	f8cd 8004 	str.w	r8, [sp, #4]
   d7502:	9400      	str	r4, [sp, #0]
   d7504:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d7506:	4628      	mov	r0, r5
   d7508:	463b      	mov	r3, r7
   d750a:	4632      	mov	r2, r6
   d750c:	4639      	mov	r1, r7
   d750e:	47a0      	blx	r4
  endWrite();
   d7510:	682b      	ldr	r3, [r5, #0]
   d7512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7514:	4628      	mov	r0, r5
}
   d7516:	b002      	add	sp, #8
   d7518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d751c:	4718      	bx	r3

000d751e <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
   d751e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7522:	461d      	mov	r5, r3
  startWrite();
   d7524:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d7526:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d752a:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d752c:	4604      	mov	r4, r0
   d752e:	4617      	mov	r7, r2
   d7530:	460e      	mov	r6, r1
  startWrite();
   d7532:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
   d7534:	e9cd 7800 	strd	r7, r8, [sp]
   d7538:	6822      	ldr	r2, [r4, #0]
   d753a:	1e6b      	subs	r3, r5, #1
   d753c:	4433      	add	r3, r6
   d753e:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d7540:	4620      	mov	r0, r4
   d7542:	b21b      	sxth	r3, r3
   d7544:	463a      	mov	r2, r7
   d7546:	4631      	mov	r1, r6
   d7548:	47a8      	blx	r5
  endWrite();
   d754a:	6823      	ldr	r3, [r4, #0]
   d754c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d754e:	4620      	mov	r0, r4
}
   d7550:	b002      	add	sp, #8
   d7552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d7556:	4718      	bx	r3

000d7558 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d7558:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d755c:	461e      	mov	r6, r3
  startWrite();
   d755e:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d7560:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
   d7564:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d7566:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d756a:	460c      	mov	r4, r1
   d756c:	4605      	mov	r5, r0
   d756e:	4617      	mov	r7, r2
  startWrite();
   d7570:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
   d7572:	4426      	add	r6, r4
   d7574:	42b4      	cmp	r4, r6
   d7576:	682b      	ldr	r3, [r5, #0]
   d7578:	da0b      	bge.n	d7592 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
   d757a:	f8cd 8000 	str.w	r8, [sp]
   d757e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d7582:	4621      	mov	r1, r4
   d7584:	464b      	mov	r3, r9
   d7586:	463a      	mov	r2, r7
   d7588:	4628      	mov	r0, r5
   d758a:	3401      	adds	r4, #1
   d758c:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
   d758e:	b224      	sxth	r4, r4
   d7590:	e7f0      	b.n	d7574 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
   d7592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7594:	4628      	mov	r0, r5
}
   d7596:	b002      	add	sp, #8
   d7598:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d759c:	4718      	bx	r3

000d759e <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d759e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d75a0:	6802      	ldr	r2, [r0, #0]
   d75a2:	9101      	str	r1, [sp, #4]
   d75a4:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d75a8:	9100      	str	r1, [sp, #0]
   d75aa:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d75ac:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d75b0:	2200      	movs	r2, #0
   d75b2:	4611      	mov	r1, r2
   d75b4:	47a0      	blx	r4
}
   d75b6:	b002      	add	sp, #8
   d75b8:	bd10      	pop	{r4, pc}

000d75ba <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d75ba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d75be:	461d      	mov	r5, r3
  startWrite();
   d75c0:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d75c2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
   d75c6:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d75c8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d75cc:	4604      	mov	r4, r0
   d75ce:	460f      	mov	r7, r1
   d75d0:	4616      	mov	r6, r2
  startWrite();
   d75d2:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
   d75d4:	6823      	ldr	r3, [r4, #0]
   d75d6:	f8cd 8000 	str.w	r8, [sp]
   d75da:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d75de:	4632      	mov	r2, r6
   d75e0:	462b      	mov	r3, r5
   d75e2:	4639      	mov	r1, r7
   d75e4:	4620      	mov	r0, r4
   d75e6:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
   d75e8:	6823      	ldr	r3, [r4, #0]
   d75ea:	f8cd 8000 	str.w	r8, [sp]
   d75ee:	f109 32ff 	add.w	r2, r9, #4294967295
   d75f2:	4432      	add	r2, r6
   d75f4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d75f8:	4639      	mov	r1, r7
   d75fa:	462b      	mov	r3, r5
   d75fc:	4620      	mov	r0, r4
   d75fe:	b212      	sxth	r2, r2
   d7600:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
   d7602:	6823      	ldr	r3, [r4, #0]
   d7604:	f8cd 8000 	str.w	r8, [sp]
   d7608:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d760c:	4632      	mov	r2, r6
   d760e:	464b      	mov	r3, r9
   d7610:	4639      	mov	r1, r7
   d7612:	4620      	mov	r0, r4
   d7614:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
   d7616:	1e6b      	subs	r3, r5, #1
   d7618:	19d9      	adds	r1, r3, r7
   d761a:	6823      	ldr	r3, [r4, #0]
   d761c:	f8cd 8000 	str.w	r8, [sp]
   d7620:	6a1d      	ldr	r5, [r3, #32]
   d7622:	4620      	mov	r0, r4
   d7624:	464b      	mov	r3, r9
   d7626:	4632      	mov	r2, r6
   d7628:	b209      	sxth	r1, r1
   d762a:	47a8      	blx	r5
  endWrite();
   d762c:	6823      	ldr	r3, [r4, #0]
   d762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7630:	4620      	mov	r0, r4
}
   d7632:	b002      	add	sp, #8
   d7634:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d7638:	4718      	bx	r3

000d763a <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
   d763a:	4770      	bx	lr

000d763c <_ZN12Adafruit_GFX8drawLineEsssst>:
                            uint16_t color) {
   d763c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if (x0 == x1) {
   d7640:	4299      	cmp	r1, r3
                            uint16_t color) {
   d7642:	4616      	mov	r6, r2
   d7644:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d7648:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d764c:	6802      	ldr	r2, [r0, #0]
   d764e:	4680      	mov	r8, r0
   d7650:	460d      	mov	r5, r1
   d7652:	461c      	mov	r4, r3
  if (x0 == x1) {
   d7654:	d113      	bne.n	d767e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
    if (y0 > y1)
   d7656:	42be      	cmp	r6, r7
   d7658:	bfc8      	it	gt
   d765a:	4633      	movgt	r3, r6
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d765c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    if (y0 > y1)
   d7660:	bfc4      	itt	gt
   d7662:	463e      	movgt	r6, r7
   d7664:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d7666:	1c7b      	adds	r3, r7, #1
   d7668:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d766a:	1b9b      	subs	r3, r3, r6
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d766c:	b21b      	sxth	r3, r3
   d766e:	4632      	mov	r2, r6
   d7670:	4629      	mov	r1, r5
   d7672:	4640      	mov	r0, r8
   d7674:	46a4      	mov	ip, r4
}
   d7676:	b003      	add	sp, #12
   d7678:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d767c:	4760      	bx	ip
  } else if (y0 == y1) {
   d767e:	42be      	cmp	r6, r7
   d7680:	d10a      	bne.n	d7698 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
    if (x0 > x1)
   d7682:	4299      	cmp	r1, r3
   d7684:	bfc2      	ittt	gt
   d7686:	460b      	movgt	r3, r1
   d7688:	4625      	movgt	r5, r4
   d768a:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d768c:	1c63      	adds	r3, r4, #1
   d768e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d7692:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d7694:	1b5b      	subs	r3, r3, r5
   d7696:	e7e9      	b.n	d766c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
    startWrite();
   d7698:	6953      	ldr	r3, [r2, #20]
   d769a:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
   d769c:	e9cd 7900 	strd	r7, r9, [sp]
   d76a0:	f8d8 3000 	ldr.w	r3, [r8]
   d76a4:	4640      	mov	r0, r8
   d76a6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d76a8:	4632      	mov	r2, r6
   d76aa:	4623      	mov	r3, r4
   d76ac:	4629      	mov	r1, r5
   d76ae:	47b8      	blx	r7
    endWrite();
   d76b0:	f8d8 3000 	ldr.w	r3, [r8]
   d76b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d76b6:	4640      	mov	r0, r8
}
   d76b8:	b003      	add	sp, #12
   d76ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
   d76be:	4718      	bx	r3

000d76c0 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   d76c0:	f001 0303 	and.w	r3, r1, #3
   d76c4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d76c8:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
   d76ca:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
   d76cc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d76d0:	bf59      	ittee	pl
   d76d2:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   d76d4:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
   d76d6:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   d76d8:	81c3      	strhmi	r3, [r0, #14]
}
   d76da:	4770      	bx	lr

000d76dc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d76dc:	b530      	push	{r4, r5, lr}
   d76de:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
   d76e0:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
   d76e2:	4a07      	ldr	r2, [pc, #28]	; (d7700 <_ZN12Adafruit_GFXC1Ess+0x24>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d76e4:	4d07      	ldr	r5, [pc, #28]	; (d7704 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d76e6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d76e8:	2400      	movs	r4, #0
  _width = WIDTH;
   d76ea:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
   d76ec:	f04f 31ff 	mov.w	r1, #4294967295
   d76f0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d76f4:	6044      	str	r4, [r0, #4]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d76f6:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
   d76f8:	6104      	str	r4, [r0, #16]
  _cp437 = false;
   d76fa:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
   d76fc:	6204      	str	r4, [r0, #32]
}
   d76fe:	bd30      	pop	{r4, r5, pc}
   d7700:	01000101 	.word	0x01000101
   d7704:	000de6dc 	.word	0x000de6dc

000d7708 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
   d7708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d770c:	b089      	sub	sp, #36	; 0x24
   d770e:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
   d7712:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
   d7714:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d7718:	9304      	str	r3, [sp, #16]
   d771a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  startWrite();
   d771e:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
   d7720:	9305      	str	r3, [sp, #20]
   d7722:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d7726:	4604      	mov	r4, r0
  startWrite();
   d7728:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d772a:	f118 0207 	adds.w	r2, r8, #7
  startWrite();
   d772e:	f04f 0600 	mov.w	r6, #0
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d7732:	bf48      	it	mi
   d7734:	f108 020e 	addmi.w	r2, r8, #14
   d7738:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
   d773c:	9601      	str	r6, [sp, #4]
  uint8_t byte = 0;
   d773e:	4635      	mov	r5, r6
   d7740:	9b03      	ldr	r3, [sp, #12]
   d7742:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
   d7744:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d7748:	189a      	adds	r2, r3, r2
   d774a:	9b05      	ldr	r3, [sp, #20]
   d774c:	428b      	cmp	r3, r1
   d774e:	b212      	sxth	r2, r2
   d7750:	dd27      	ble.n	d77a2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d7752:	9b04      	ldr	r3, [sp, #16]
   d7754:	4433      	add	r3, r6
  for (int16_t j = 0; j < h; j++, y++) {
   d7756:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d775a:	9306      	str	r3, [sp, #24]
   d775c:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
   d7760:	4580      	cmp	r8, r0
   d7762:	fa1f f189 	uxth.w	r1, r9
   d7766:	dd17      	ble.n	d7798 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
      if (i & 7)
   d7768:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d776a:	bf05      	ittet	eq
   d776c:	9b06      	ldreq	r3, [sp, #24]
   d776e:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
   d7770:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d7772:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
   d7774:	bf18      	it	ne
   d7776:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
   d7778:	062b      	lsls	r3, r5, #24
   d777a:	d50a      	bpl.n	d7792 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
        writePixel(x + i, y, color);
   d777c:	9b02      	ldr	r3, [sp, #8]
   d777e:	6820      	ldr	r0, [r4, #0]
   d7780:	9207      	str	r2, [sp, #28]
   d7782:	4419      	add	r1, r3
   d7784:	6983      	ldr	r3, [r0, #24]
   d7786:	b209      	sxth	r1, r1
   d7788:	461f      	mov	r7, r3
   d778a:	4620      	mov	r0, r4
   d778c:	4653      	mov	r3, sl
   d778e:	47b8      	blx	r7
   d7790:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
   d7792:	f109 0901 	add.w	r9, r9, #1
   d7796:	e7e1      	b.n	d775c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
  for (int16_t j = 0; j < h; j++, y++) {
   d7798:	9b01      	ldr	r3, [sp, #4]
   d779a:	3301      	adds	r3, #1
   d779c:	9301      	str	r3, [sp, #4]
   d779e:	445e      	add	r6, fp
   d77a0:	e7ce      	b.n	d7740 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
  endWrite();
   d77a2:	6823      	ldr	r3, [r4, #0]
   d77a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d77a6:	4620      	mov	r0, r4
}
   d77a8:	b009      	add	sp, #36	; 0x24
   d77aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
   d77ae:	4718      	bx	r3

000d77b0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
   d77b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d77b4:	ed2d 8b02 	vpush	{d8}
   d77b8:	b091      	sub	sp, #68	; 0x44
   d77ba:	4616      	mov	r6, r2
  if (!gfxFont) { // 'Classic' built-in font
   d77bc:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
   d77be:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d77c2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d77c6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d77ca:	9103      	str	r1, [sp, #12]
   d77cc:	461f      	mov	r7, r3
   d77ce:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d77d2:	9304      	str	r3, [sp, #16]
   d77d4:	4683      	mov	fp, r0
  if (!gfxFont) { // 'Classic' built-in font
   d77d6:	2a00      	cmp	r2, #0
   d77d8:	f040 80c5 	bne.w	d7966 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
   d77dc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d77e0:	428b      	cmp	r3, r1
   d77e2:	f340 814c 	ble.w	d7a7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d77e6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d77ea:	42b3      	cmp	r3, r6
   d77ec:	f340 8147 	ble.w	d7a7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d77f0:	2306      	movs	r3, #6
   d77f2:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
   d77f6:	2b00      	cmp	r3, #0
   d77f8:	f340 8141 	ble.w	d7a7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
   d77fc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d7800:	2b00      	cmp	r3, #0
   d7802:	f340 813c 	ble.w	d7a7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
   d7806:	7f03      	ldrb	r3, [r0, #28]
   d7808:	b91b      	cbnz	r3, d7812 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d780a:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
   d780c:	bf84      	itt	hi
   d780e:	3701      	addhi	r7, #1
   d7810:	b2ff      	uxtbhi	r7, r7
    startWrite();
   d7812:	f8db 3000 	ldr.w	r3, [fp]
   d7816:	4658      	mov	r0, fp
   d7818:	695b      	ldr	r3, [r3, #20]
   d781a:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d781c:	2205      	movs	r2, #5
   d781e:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d7820:	2200      	movs	r2, #0
   d7822:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d7824:	4a98      	ldr	r2, [pc, #608]	; (d7a88 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d7826:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d782a:	18d3      	adds	r3, r2, r3
   d782c:	930c      	str	r3, [sp, #48]	; 0x30
   d782e:	b2b3      	uxth	r3, r6
   d7830:	9306      	str	r3, [sp, #24]
   d7832:	9a05      	ldr	r2, [sp, #20]
   d7834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7836:	5c9b      	ldrb	r3, [r3, r2]
   d7838:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d783a:	b2ab      	uxth	r3, r5
   d783c:	930b      	str	r3, [sp, #44]	; 0x2c
   d783e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d7842:	9308      	str	r3, [sp, #32]
   d7844:	9b03      	ldr	r3, [sp, #12]
   d7846:	fb02 f905 	mul.w	r9, r2, r5
   d784a:	fa19 f983 	uxtah	r9, r9, r3
   d784e:	fa0f f389 	sxth.w	r3, r9
   d7852:	ee08 3a10 	vmov	s16, r3
   d7856:	2308      	movs	r3, #8
   d7858:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
   d785a:	9b03      	ldr	r3, [sp, #12]
   d785c:	eb02 0a03 	add.w	sl, r2, r3
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d7860:	f04f 0900 	mov.w	r9, #0
            writePixel(x + i, y + j, bg);
   d7864:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
   d7868:	9a07      	ldr	r2, [sp, #28]
   d786a:	f8db 3000 	ldr.w	r3, [fp]
   d786e:	07d2      	lsls	r2, r2, #31
   d7870:	d552      	bpl.n	d7918 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
   d7872:	2d01      	cmp	r5, #1
   d7874:	fa1f f289 	uxth.w	r2, r9
   d7878:	d13e      	bne.n	d78f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d787a:	2c01      	cmp	r4, #1
   d787c:	d13c      	bne.n	d78f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
   d787e:	699b      	ldr	r3, [r3, #24]
   d7880:	9906      	ldr	r1, [sp, #24]
   d7882:	461f      	mov	r7, r3
   d7884:	9b04      	ldr	r3, [sp, #16]
   d7886:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
   d7888:	b212      	sxth	r2, r2
   d788a:	4651      	mov	r1, sl
   d788c:	4658      	mov	r0, fp
   d788e:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d7890:	f109 0301 	add.w	r3, r9, #1
   d7894:	fa4f f983 	sxtb.w	r9, r3
   d7898:	9b07      	ldr	r3, [sp, #28]
   d789a:	085b      	lsrs	r3, r3, #1
   d789c:	9307      	str	r3, [sp, #28]
   d789e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d78a0:	3b01      	subs	r3, #1
   d78a2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d78a6:	930a      	str	r3, [sp, #40]	; 0x28
   d78a8:	d1de      	bne.n	d7868 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d78aa:	9f05      	ldr	r7, [sp, #20]
   d78ac:	3701      	adds	r7, #1
   d78ae:	b27b      	sxtb	r3, r7
   d78b0:	9305      	str	r3, [sp, #20]
   d78b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d78b4:	3b01      	subs	r3, #1
   d78b6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d78ba:	9309      	str	r3, [sp, #36]	; 0x24
   d78bc:	d1b9      	bne.n	d7832 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
   d78be:	9b04      	ldr	r3, [sp, #16]
   d78c0:	4543      	cmp	r3, r8
   d78c2:	d00f      	beq.n	d78e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
   d78c4:	2d01      	cmp	r5, #1
   d78c6:	f8db 3000 	ldr.w	r3, [fp]
   d78ca:	d13b      	bne.n	d7944 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d78cc:	2c01      	cmp	r4, #1
   d78ce:	d139      	bne.n	d7944 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
   d78d0:	9908      	ldr	r1, [sp, #32]
   d78d2:	f8cd 8000 	str.w	r8, [sp]
   d78d6:	3105      	adds	r1, #5
   d78d8:	6a1c      	ldr	r4, [r3, #32]
   d78da:	4632      	mov	r2, r6
   d78dc:	2308      	movs	r3, #8
   d78de:	b209      	sxth	r1, r1
   d78e0:	4658      	mov	r0, fp
   d78e2:	47a0      	blx	r4
    endWrite();
   d78e4:	f8db 3000 	ldr.w	r3, [fp]
   d78e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d78ea:	4658      	mov	r0, fp
}
   d78ec:	b011      	add	sp, #68	; 0x44
   d78ee:	ecbd 8b02 	vpop	{d8}
   d78f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d78f6:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
   d78f8:	9906      	ldr	r1, [sp, #24]
   d78fa:	fb14 f202 	smulbb	r2, r4, r2
   d78fe:	440a      	add	r2, r1
   d7900:	9904      	ldr	r1, [sp, #16]
   d7902:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d7904:	9400      	str	r4, [sp, #0]
   d7906:	69db      	ldr	r3, [r3, #28]
   d7908:	ee18 1a10 	vmov	r1, s16
   d790c:	461f      	mov	r7, r3
   d790e:	b212      	sxth	r2, r2
   d7910:	462b      	mov	r3, r5
   d7912:	4658      	mov	r0, fp
   d7914:	47b8      	blx	r7
   d7916:	e7bb      	b.n	d7890 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
   d7918:	9a04      	ldr	r2, [sp, #16]
   d791a:	4542      	cmp	r2, r8
   d791c:	d0b8      	beq.n	d7890 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
   d791e:	2d01      	cmp	r5, #1
   d7920:	fa1f f289 	uxth.w	r2, r9
   d7924:	d107      	bne.n	d7936 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d7926:	2c01      	cmp	r4, #1
   d7928:	d105      	bne.n	d7936 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
   d792a:	699b      	ldr	r3, [r3, #24]
   d792c:	9906      	ldr	r1, [sp, #24]
   d792e:	461f      	mov	r7, r3
   d7930:	440a      	add	r2, r1
   d7932:	4643      	mov	r3, r8
   d7934:	e7a8      	b.n	d7888 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d7936:	9906      	ldr	r1, [sp, #24]
   d7938:	f8cd 8004 	str.w	r8, [sp, #4]
   d793c:	fb14 f202 	smulbb	r2, r4, r2
   d7940:	440a      	add	r2, r1
   d7942:	e7df      	b.n	d7904 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
   d7944:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d7946:	f8cd 8004 	str.w	r8, [sp, #4]
   d794a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d794e:	9a08      	ldr	r2, [sp, #32]
   d7950:	00e4      	lsls	r4, r4, #3
   d7952:	440a      	add	r2, r1
   d7954:	4611      	mov	r1, r2
   d7956:	9400      	str	r4, [sp, #0]
   d7958:	69dc      	ldr	r4, [r3, #28]
   d795a:	4632      	mov	r2, r6
   d795c:	462b      	mov	r3, r5
   d795e:	b209      	sxth	r1, r1
   d7960:	4658      	mov	r0, fp
   d7962:	47a0      	blx	r4
    endWrite();
   d7964:	e7be      	b.n	d78e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d7966:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
   d7968:	6851      	ldr	r1, [r2, #4]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d796a:	6812      	ldr	r2, [r2, #0]
   d796c:	920d      	str	r2, [sp, #52]	; 0x34
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d796e:	1aff      	subs	r7, r7, r3
  return gfxFont->glyph + c;
   d7970:	b2ff      	uxtb	r7, r7
   d7972:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d7976:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d797a:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
   d797c:	789a      	ldrb	r2, [r3, #2]
   d797e:	9209      	str	r2, [sp, #36]	; 0x24
   d7980:	78da      	ldrb	r2, [r3, #3]
   d7982:	920b      	str	r2, [sp, #44]	; 0x2c
    if (size_x > 1 || size_y > 1) {
   d7984:	2d01      	cmp	r5, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d7986:	f993 2005 	ldrsb.w	r2, [r3, #5]
           yo = pgm_read_byte(&glyph->yOffset);
   d798a:	f993 a006 	ldrsb.w	sl, [r3, #6]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d798e:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
   d7990:	d801      	bhi.n	d7996 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d7992:	2c01      	cmp	r4, #1
   d7994:	d957      	bls.n	d7a46 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
   d7996:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d799a:	9308      	str	r3, [sp, #32]
      yo16 = yo;
   d799c:	fa0f f38a 	sxth.w	r3, sl
   d79a0:	9307      	str	r3, [sp, #28]
    startWrite();
   d79a2:	f8db 3000 	ldr.w	r3, [fp]
   d79a6:	4658      	mov	r0, fp
   d79a8:	695b      	ldr	r3, [r3, #20]
   d79aa:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d79ac:	b2b3      	uxth	r3, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d79ae:	f04f 0800 	mov.w	r8, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d79b2:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
   d79b4:	fa1a f386 	uxtah	r3, sl, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d79b8:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
   d79ba:	4647      	mov	r7, r8
            writePixel(x + xo + xx, y + yo + yy, color);
   d79bc:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
   d79be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d79c0:	429f      	cmp	r7, r3
   d79c2:	d28f      	bcs.n	d78e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d79c4:	9b07      	ldr	r3, [sp, #28]
   d79c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d79c8:	443b      	add	r3, r7
   d79ca:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
   d79ce:	2200      	movs	r2, #0
   d79d0:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
   d79d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d79d4:	b21b      	sxth	r3, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d79d6:	eb02 0a07 	add.w	sl, r2, r7
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d79da:	ee08 3a10 	vmov	s16, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d79de:	fa0f fa8a 	sxth.w	sl, sl
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d79e2:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
   d79e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d79e6:	9905      	ldr	r1, [sp, #20]
   d79e8:	4291      	cmp	r1, r2
   d79ea:	d241      	bcs.n	d7a70 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
   d79ec:	1c5a      	adds	r2, r3, #1
   d79ee:	b2d2      	uxtb	r2, r2
   d79f0:	075b      	lsls	r3, r3, #29
   d79f2:	920c      	str	r2, [sp, #48]	; 0x30
   d79f4:	d107      	bne.n	d7a06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
   d79f6:	9b06      	ldr	r3, [sp, #24]
   d79f8:	9906      	ldr	r1, [sp, #24]
   d79fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d79fc:	3301      	adds	r3, #1
   d79fe:	b29b      	uxth	r3, r3
   d7a00:	f812 9001 	ldrb.w	r9, [r2, r1]
   d7a04:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
   d7a06:	f019 0f80 	tst.w	r9, #128	; 0x80
   d7a0a:	d012      	beq.n	d7a32 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
   d7a0c:	2d01      	cmp	r5, #1
   d7a0e:	f8db 3000 	ldr.w	r3, [fp]
   d7a12:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d7a16:	d11a      	bne.n	d7a4e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d7a18:	2c01      	cmp	r4, #1
   d7a1a:	d118      	bne.n	d7a4e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
   d7a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d7a1e:	699b      	ldr	r3, [r3, #24]
   d7a20:	4411      	add	r1, r2
   d7a22:	9a05      	ldr	r2, [sp, #20]
   d7a24:	4411      	add	r1, r2
   d7a26:	461e      	mov	r6, r3
   d7a28:	4652      	mov	r2, sl
   d7a2a:	9b04      	ldr	r3, [sp, #16]
   d7a2c:	b209      	sxth	r1, r1
   d7a2e:	4658      	mov	r0, fp
   d7a30:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
   d7a32:	9e05      	ldr	r6, [sp, #20]
   d7a34:	3601      	adds	r6, #1
   d7a36:	b2f3      	uxtb	r3, r6
        bits <<= 1;
   d7a38:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
   d7a3c:	9305      	str	r3, [sp, #20]
        bits <<= 1;
   d7a3e:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
   d7a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (xx = 0; xx < w; xx++) {
   d7a44:	e7ce      	b.n	d79e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
   d7a46:	2300      	movs	r3, #0
   d7a48:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d7a4c:	e7a9      	b.n	d79a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7a4e:	9805      	ldr	r0, [sp, #20]
   d7a50:	9a08      	ldr	r2, [sp, #32]
   d7a52:	4402      	add	r2, r0
   d7a54:	fb02 1105 	mla	r1, r2, r5, r1
   d7a58:	9a04      	ldr	r2, [sp, #16]
   d7a5a:	e9cd 4200 	strd	r4, r2, [sp]
   d7a5e:	69db      	ldr	r3, [r3, #28]
   d7a60:	ee18 2a10 	vmov	r2, s16
   d7a64:	461e      	mov	r6, r3
   d7a66:	b209      	sxth	r1, r1
   d7a68:	462b      	mov	r3, r5
   d7a6a:	4658      	mov	r0, fp
   d7a6c:	47b0      	blx	r6
   d7a6e:	e7e0      	b.n	d7a32 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d7a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
   d7a72:	3701      	adds	r7, #1
   d7a74:	4498      	add	r8, r3
   d7a76:	fa5f f888 	uxtb.w	r8, r8
   d7a7a:	b2ff      	uxtb	r7, r7
   d7a7c:	e79f      	b.n	d79be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d7a7e:	b011      	add	sp, #68	; 0x44
   d7a80:	ecbd 8b02 	vpop	{d8}
   d7a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7a88:	000de1d4 	.word	0x000de1d4

000d7a8c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d7a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
   d7a8e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d7a90:	b085      	sub	sp, #20
   d7a92:	4604      	mov	r4, r0
   d7a94:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
   d7a96:	2a00      	cmp	r2, #0
   d7a98:	d134      	bne.n	d7b04 <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
   d7a9a:	290a      	cmp	r1, #10
   d7a9c:	d108      	bne.n	d7ab0 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
   d7a9e:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
   d7aa0:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
   d7aa2:	7e42      	ldrb	r2, [r0, #25]
   d7aa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
   d7aa8:	8263      	strh	r3, [r4, #18]
}
   d7aaa:	2001      	movs	r0, #1
   d7aac:	b005      	add	sp, #20
   d7aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
   d7ab0:	290d      	cmp	r1, #13
   d7ab2:	d0fa      	beq.n	d7aaa <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d7ab4:	7ee1      	ldrb	r1, [r4, #27]
   d7ab6:	7e00      	ldrb	r0, [r0, #24]
   d7ab8:	7e65      	ldrb	r5, [r4, #25]
   d7aba:	b171      	cbz	r1, d7ada <_ZN12Adafruit_GFX5writeEh+0x4e>
   d7abc:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d7ac0:	2106      	movs	r1, #6
   d7ac2:	fb11 6100 	smlabb	r1, r1, r0, r6
   d7ac6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d7aca:	42b1      	cmp	r1, r6
   d7acc:	bfc1      	itttt	gt
   d7ace:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
   d7ad2:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
   d7ad4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d7ad8:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d7ada:	8ae2      	ldrh	r2, [r4, #22]
   d7adc:	9201      	str	r2, [sp, #4]
   d7ade:	8aa2      	ldrh	r2, [r4, #20]
   d7ae0:	9200      	str	r2, [sp, #0]
   d7ae2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d7ae6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d7aea:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d7aee:	4620      	mov	r0, r4
   d7af0:	f7ff fe5e 	bl	d77b0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
   d7af4:	7e23      	ldrb	r3, [r4, #24]
   d7af6:	8a22      	ldrh	r2, [r4, #16]
   d7af8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d7afc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
   d7b00:	8223      	strh	r3, [r4, #16]
   d7b02:	e7d2      	b.n	d7aaa <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
   d7b04:	290a      	cmp	r1, #10
   d7b06:	d107      	bne.n	d7b18 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
   d7b08:	2300      	movs	r3, #0
   d7b0a:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d7b0c:	7b13      	ldrb	r3, [r2, #12]
   d7b0e:	7e41      	ldrb	r1, [r0, #25]
      cursor_y +=
   d7b10:	8a42      	ldrh	r2, [r0, #18]
   d7b12:	fb01 2303 	mla	r3, r1, r3, r2
   d7b16:	e7c7      	b.n	d7aa8 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
   d7b18:	290d      	cmp	r1, #13
   d7b1a:	d0c6      	beq.n	d7aaa <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
   d7b1c:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d7b1e:	42a9      	cmp	r1, r5
   d7b20:	d3c3      	bcc.n	d7aaa <_ZN12Adafruit_GFX5writeEh+0x1e>
   d7b22:	7a91      	ldrb	r1, [r2, #10]
   d7b24:	4299      	cmp	r1, r3
   d7b26:	d3c0      	bcc.n	d7aaa <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
   d7b28:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
   d7b2a:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
   d7b2c:	b2ed      	uxtb	r5, r5
   d7b2e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
   d7b32:	78af      	ldrb	r7, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d7b34:	b32f      	cbz	r7, d7b82 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d7b36:	78e9      	ldrb	r1, [r5, #3]
   d7b38:	b319      	cbz	r1, d7b82 <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d7b3a:	7ee1      	ldrb	r1, [r4, #27]
   d7b3c:	7e00      	ldrb	r0, [r0, #24]
   d7b3e:	7e66      	ldrb	r6, [r4, #25]
   d7b40:	b191      	cbz	r1, d7b68 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d7b42:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d7b46:	4439      	add	r1, r7
   d7b48:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d7b4c:	fb00 7101 	mla	r1, r0, r1, r7
   d7b50:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d7b54:	42b9      	cmp	r1, r7
   d7b56:	dd07      	ble.n	d7b68 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
   d7b58:	2700      	movs	r7, #0
   d7b5a:	8227      	strh	r7, [r4, #16]
   d7b5c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d7b60:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
   d7b62:	fb02 1206 	mla	r2, r2, r6, r1
   d7b66:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d7b68:	8ae2      	ldrh	r2, [r4, #22]
   d7b6a:	9201      	str	r2, [sp, #4]
   d7b6c:	8aa2      	ldrh	r2, [r4, #20]
   d7b6e:	9200      	str	r2, [sp, #0]
   d7b70:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d7b74:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d7b78:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d7b7c:	4620      	mov	r0, r4
   d7b7e:	f7ff fe17 	bl	d77b0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d7b82:	7929      	ldrb	r1, [r5, #4]
   d7b84:	7e23      	ldrb	r3, [r4, #24]
        cursor_x +=
   d7b86:	8a22      	ldrh	r2, [r4, #16]
   d7b88:	fb01 2303 	mla	r3, r1, r3, r2
   d7b8c:	e7b8      	b.n	d7b00 <_ZN12Adafruit_GFX5writeEh+0x74>

000d7b8e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
   d7b8e:	2901      	cmp	r1, #1
   d7b90:	bf38      	it	cc
   d7b92:	2101      	movcc	r1, #1
   d7b94:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
   d7b96:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
   d7b98:	4770      	bx	lr

000d7b9a <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   d7b9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b9e:	4604      	mov	r4, r0
   d7ba0:	b08b      	sub	sp, #44	; 0x2c
   d7ba2:	f000 fb71 	bl	d8288 <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d7ba6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   d7baa:	f9b4 503a 	ldrsh.w	r5, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d7bae:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d7bb2:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d7bb6:	1dda      	adds	r2, r3, #7
   d7bb8:	bf48      	it	mi
   d7bba:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   d7bbe:	2340      	movs	r3, #64	; 0x40
   d7bc0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   d7bc4:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   d7bc8:	9303      	str	r3, [sp, #12]
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   d7bca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d7bcc:	68db      	ldr	r3, [r3, #12]
   d7bce:	3b01      	subs	r3, #1
   d7bd0:	b29b      	uxth	r3, r3
   d7bd2:	9304      	str	r3, [sp, #16]
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d7bd4:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
  uint8_t bytes_per_page = WIDTH;
   d7bd8:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   d7bda:	2d00      	cmp	r5, #0
   d7bdc:	bfb8      	it	lt
   d7bde:	3507      	addlt	r5, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d7be0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d7be4:	45b9      	cmp	r9, r7
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7be6:	f107 0201 	add.w	r2, r7, #1
  uint8_t first_page = window_y1 / 8;
   d7bea:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d7bee:	bf28      	it	cs
   d7bf0:	46b9      	movcs	r9, r7
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7bf2:	fa52 f383 	uxtab	r3, r2, r3
   d7bf6:	fb05 9a07 	mla	sl, r5, r7, r9
   d7bfa:	9306      	str	r3, [sp, #24]
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};

      digitalWrite(dcPin, LOW);
   d7bfc:	f04f 0b00 	mov.w	fp, #0
  for (uint8_t p = first_page; p < pages; p++) {
   d7c00:	9b03      	ldr	r3, [sp, #12]
   d7c02:	429d      	cmp	r5, r3
   d7c04:	d26b      	bcs.n	d7cde <_ZN15Adafruit_SH110X7displayEv+0x144>
    ptr += page_start;
   d7c06:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7c08:	7a26      	ldrb	r6, [r4, #8]
   d7c0a:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   d7c0e:	eb03 080a 	add.w	r8, r3, sl
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7c12:	9b06      	ldr	r3, [sp, #24]
   d7c14:	444a      	add	r2, r9
   d7c16:	1b9e      	subs	r6, r3, r6
    if (i2c_dev) { // I2C
   d7c18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d7c1a:	1111      	asrs	r1, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7c1c:	eba6 0609 	sub.w	r6, r6, r9
   d7c20:	f1a5 0050 	sub.w	r0, r5, #80	; 0x50
   d7c24:	b2f6      	uxtb	r6, r6
    if (i2c_dev) { // I2C
   d7c26:	b2c0      	uxtb	r0, r0
   d7c28:	3110      	adds	r1, #16
   d7c2a:	f002 020f 	and.w	r2, r2, #15
   d7c2e:	2b00      	cmp	r3, #0
   d7c30:	d035      	beq.n	d7c9e <_ZN15Adafruit_SH110X7displayEv+0x104>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d7c32:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   d7c36:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
      i2c_dev->setSpeed(i2c_preclk);
   d7c3a:	4618      	mov	r0, r3
   d7c3c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d7c3e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      uint8_t cmd[] = {
   d7c42:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   d7c46:	f7fe fef0 	bl	d6a2a <_ZN18Adafruit_I2CDevice8setSpeedEm>
      i2c_dev->write(cmd, 4);
   d7c4a:	2301      	movs	r3, #1
   d7c4c:	e9cd bb00 	strd	fp, fp, [sp]
   d7c50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d7c52:	2204      	movs	r2, #4
   d7c54:	a909      	add	r1, sp, #36	; 0x24
   d7c56:	f7fe fe63 	bl	d6920 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d7c5a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d7c5e:	9305      	str	r3, [sp, #20]
      while (bytes_remaining) {
   d7c60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d7c62:	b1ae      	cbz	r6, d7c90 <_ZN15Adafruit_SH110X7displayEv+0xf6>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d7c64:	9b05      	ldr	r3, [sp, #20]
   d7c66:	42b3      	cmp	r3, r6
   d7c68:	bf28      	it	cs
   d7c6a:	4633      	movcs	r3, r6
   d7c6c:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   d7c6e:	2301      	movs	r3, #1
   d7c70:	9301      	str	r3, [sp, #4]
   d7c72:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   d7c76:	9300      	str	r3, [sp, #0]
   d7c78:	4641      	mov	r1, r8
   d7c7a:	2301      	movs	r3, #1
   d7c7c:	9207      	str	r2, [sp, #28]
   d7c7e:	f7fe fe4f 	bl	d6920 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   d7c82:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   d7c84:	1ab6      	subs	r6, r6, r2
        ptr += to_write;
   d7c86:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   d7c88:	b2f6      	uxtb	r6, r6
   d7c8a:	f000 fafd 	bl	d8288 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   d7c8e:	e7e7      	b.n	d7c60 <_ZN15Adafruit_SH110X7displayEv+0xc6>
      i2c_dev->setSpeed(i2c_postclk);
   d7c90:	6b21      	ldr	r1, [r4, #48]	; 0x30
   d7c92:	f7fe feca 	bl	d6a2a <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   d7c96:	3501      	adds	r5, #1
   d7c98:	b2ed      	uxtb	r5, r5
   d7c9a:	44ba      	add	sl, r7
   d7c9c:	e7b0      	b.n	d7c00 <_ZN15Adafruit_SH110X7displayEv+0x66>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d7c9e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   d7ca2:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
      digitalWrite(dcPin, LOW);
   d7ca6:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d7caa:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   d7cae:	4619      	mov	r1, r3
   d7cb0:	9305      	str	r3, [sp, #20]
   d7cb2:	f002 f880 	bl	d9db6 <digitalWrite>
      spi_dev->write(cmd, 3);
   d7cb6:	9b05      	ldr	r3, [sp, #20]
   d7cb8:	9300      	str	r3, [sp, #0]
   d7cba:	2203      	movs	r2, #3
   d7cbc:	a909      	add	r1, sp, #36	; 0x24
   d7cbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7cc0:	f7fe fd9d 	bl	d67fe <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   d7cc4:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d7cc8:	2101      	movs	r1, #1
   d7cca:	f002 f874 	bl	d9db6 <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   d7cce:	9b05      	ldr	r3, [sp, #20]
   d7cd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7cd2:	9300      	str	r3, [sp, #0]
   d7cd4:	4632      	mov	r2, r6
   d7cd6:	4641      	mov	r1, r8
   d7cd8:	f7fe fd91 	bl	d67fe <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d7cdc:	e7db      	b.n	d7c96 <_ZN15Adafruit_SH110X7displayEv+0xfc>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   d7cde:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   d7ce2:	f04f 33ff 	mov.w	r3, #4294967295
   d7ce6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   d7cea:	b00b      	add	sp, #44	; 0x2c
   d7cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7cf0 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   d7cf0:	b530      	push	{r4, r5, lr}
   d7cf2:	b085      	sub	sp, #20
   d7cf4:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d7cf6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7cf8:	9503      	str	r5, [sp, #12]
   d7cfa:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d7cfc:	9502      	str	r5, [sp, #8]
   d7cfe:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d7d02:	e9cd 3500 	strd	r3, r5, [sp]
   d7d06:	4613      	mov	r3, r2
   d7d08:	460a      	mov	r2, r1
   d7d0a:	2101      	movs	r1, #1
   d7d0c:	f7ff fa48 	bl	d71a0 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   d7d10:	4b03      	ldr	r3, [pc, #12]	; (d7d20 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   d7d12:	6023      	str	r3, [r4, #0]
   d7d14:	4620      	mov	r0, r4
   d7d16:	2300      	movs	r3, #0
   d7d18:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d7d1c:	b005      	add	sp, #20
   d7d1e:	bd30      	pop	{r4, r5, pc}
   d7d20:	000de734 	.word	0x000de734

000d7d24 <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   d7d24:	b510      	push	{r4, lr}
   d7d26:	4b03      	ldr	r3, [pc, #12]	; (d7d34 <_ZN15Adafruit_SH110XD1Ev+0x10>)
   d7d28:	6003      	str	r3, [r0, #0]
   d7d2a:	4604      	mov	r4, r0
   d7d2c:	f7ff fa5a 	bl	d71e4 <_ZN17Adafruit_GrayOLEDD1Ev>
   d7d30:	4620      	mov	r0, r4
   d7d32:	bd10      	pop	{r4, pc}
   d7d34:	000de734 	.word	0x000de734

000d7d38 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   d7d38:	b510      	push	{r4, lr}
   d7d3a:	4b03      	ldr	r3, [pc, #12]	; (d7d48 <_ZN15Adafruit_SH1107D1Ev+0x10>)
   d7d3c:	6003      	str	r3, [r0, #0]
   d7d3e:	4604      	mov	r4, r0
   d7d40:	f7ff fff0 	bl	d7d24 <_ZN15Adafruit_SH110XD1Ev>
   d7d44:	4620      	mov	r0, r4
   d7d46:	bd10      	pop	{r4, pc}
   d7d48:	000de970 	.word	0x000de970

000d7d4c <_ZN15Adafruit_SH1107D0Ev>:
   d7d4c:	b510      	push	{r4, lr}
   d7d4e:	4604      	mov	r4, r0
   d7d50:	f7ff fff2 	bl	d7d38 <_ZN15Adafruit_SH1107D1Ev>
   d7d54:	4620      	mov	r0, r4
   d7d56:	2158      	movs	r1, #88	; 0x58
   d7d58:	f002 f8c4 	bl	d9ee4 <_ZdlPvj>
   d7d5c:	4620      	mov	r0, r4
   d7d5e:	bd10      	pop	{r4, pc}

000d7d60 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   d7d60:	b530      	push	{r4, r5, lr}
   d7d62:	b085      	sub	sp, #20
   d7d64:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d7d66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7d68:	9502      	str	r5, [sp, #8]
   d7d6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d7d6c:	9501      	str	r5, [sp, #4]
   d7d6e:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d7d72:	9500      	str	r5, [sp, #0]
   d7d74:	f7ff ffbc 	bl	d7cf0 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   d7d78:	4b02      	ldr	r3, [pc, #8]	; (d7d84 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   d7d7a:	6023      	str	r3, [r4, #0]
   d7d7c:	4620      	mov	r0, r4
   d7d7e:	b005      	add	sp, #20
   d7d80:	bd30      	pop	{r4, r5, pc}
   d7d82:	bf00      	nop
   d7d84:	000de970 	.word	0x000de970

000d7d88 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   d7d88:	b530      	push	{r4, r5, lr}
   d7d8a:	4604      	mov	r4, r0
   d7d8c:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   d7d8e:	f7ff faad 	bl	d72ec <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   d7d92:	212f      	movs	r1, #47	; 0x2f
   d7d94:	4620      	mov	r0, r4
   d7d96:	f7ff fb12 	bl	d73be <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   d7d9a:	68a2      	ldr	r2, [r4, #8]
   d7d9c:	4b2f      	ldr	r3, [pc, #188]	; (d7e5c <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   d7d9e:	429a      	cmp	r2, r3
   d7da0:	d121      	bne.n	d7de6 <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   d7da2:	6823      	ldr	r3, [r4, #0]
   d7da4:	2101      	movs	r1, #1
   d7da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7da8:	4620      	mov	r0, r4
   d7daa:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d7dac:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d7db0:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d7db4:	2320      	movs	r3, #32
   d7db6:	3a20      	subs	r2, #32
   d7db8:	3973      	subs	r1, #115	; 0x73
   d7dba:	2501      	movs	r5, #1
   d7dbc:	e9cd 3501 	strd	r3, r5, [sp, #4]
   d7dc0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d7dc4:	2373      	movs	r3, #115	; 0x73
   d7dc6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d7dca:	9300      	str	r3, [sp, #0]
   d7dcc:	f341 014f 	sbfx	r1, r1, #1, #16
   d7dd0:	4b23      	ldr	r3, [pc, #140]	; (d7e60 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d7dd2:	4620      	mov	r0, r4
   d7dd4:	f342 024f 	sbfx	r2, r2, #1, #16
   d7dd8:	f7ff fc96 	bl	d7708 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   d7ddc:	6823      	ldr	r3, [r4, #0]
   d7dde:	2100      	movs	r1, #0
   d7de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7de2:	4620      	mov	r0, r4
   d7de4:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   d7de6:	68a3      	ldr	r3, [r4, #8]
   d7de8:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d7dec:	d117      	bne.n	d7e1e <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d7dee:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d7df2:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d7df6:	2320      	movs	r3, #32
   d7df8:	2001      	movs	r0, #1
   d7dfa:	3a20      	subs	r2, #32
   d7dfc:	3973      	subs	r1, #115	; 0x73
   d7dfe:	e9cd 3001 	strd	r3, r0, [sp, #4]
   d7e02:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d7e06:	2373      	movs	r3, #115	; 0x73
   d7e08:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d7e0c:	9300      	str	r3, [sp, #0]
   d7e0e:	f342 024f 	sbfx	r2, r2, #1, #16
   d7e12:	4b13      	ldr	r3, [pc, #76]	; (d7e60 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d7e14:	f341 014f 	sbfx	r1, r1, #1, #16
   d7e18:	4620      	mov	r0, r4
   d7e1a:	f7ff fc75 	bl	d7708 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   d7e1e:	4911      	ldr	r1, [pc, #68]	; (d7e64 <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   d7e20:	2216      	movs	r2, #22
   d7e22:	4620      	mov	r0, r4
   d7e24:	f7ff fa25 	bl	d7272 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d7e28:	4605      	mov	r5, r0
   d7e2a:	b918      	cbnz	r0, d7e34 <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   d7e2c:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   d7e2e:	4628      	mov	r0, r5
   d7e30:	b005      	add	sp, #20
   d7e32:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   d7e34:	68a3      	ldr	r3, [r4, #8]
   d7e36:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d7e3a:	d007      	beq.n	d7e4c <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   d7e3c:	2064      	movs	r0, #100	; 0x64
   d7e3e:	f001 f8df 	bl	d9000 <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   d7e42:	21af      	movs	r1, #175	; 0xaf
   d7e44:	4620      	mov	r0, r4
   d7e46:	f7ff f9e9 	bl	d721c <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   d7e4a:	e7f0      	b.n	d7e2e <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   d7e4c:	4906      	ldr	r1, [pc, #24]	; (d7e68 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   d7e4e:	2204      	movs	r2, #4
   d7e50:	4620      	mov	r0, r4
   d7e52:	f7ff fa0e 	bl	d7272 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d7e56:	2800      	cmp	r0, #0
   d7e58:	d1f0      	bne.n	d7e3c <_ZN15Adafruit_SH11075beginEhb+0xb4>
   d7e5a:	e7e7      	b.n	d7e2c <_ZN15Adafruit_SH11075beginEhb+0xa4>
   d7e5c:	00800040 	.word	0x00800040
   d7e60:	000de788 	.word	0x000de788
   d7e64:	000de9c8 	.word	0x000de9c8
   d7e68:	000de9c4 	.word	0x000de9c4

000d7e6c <_ZN19Adafruit_EEPROM_I2CC1Ev>:
/**************************************************************************/
/*!
    Constructor
*/
/**************************************************************************/
Adafruit_EEPROM_I2C::Adafruit_EEPROM_I2C(void) {}
   d7e6c:	2200      	movs	r2, #0
   d7e6e:	6002      	str	r2, [r0, #0]
   d7e70:	7102      	strb	r2, [r0, #4]
   d7e72:	4770      	bx	lr

000d7e74 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>:
 *            The I2C address to be used.
 *    @param  theWire
 *            The Wire object to be used for I2C connections.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d7e74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7e76:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7e78:	2010      	movs	r0, #16
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d7e7a:	460e      	mov	r6, r1
   d7e7c:	9201      	str	r2, [sp, #4]
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7e7e:	f7fc f90a 	bl	d4096 <_Znwj>
   d7e82:	4604      	mov	r4, r0
   d7e84:	b118      	cbz	r0, d7e8e <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire+0x1a>
   d7e86:	9a01      	ldr	r2, [sp, #4]
   d7e88:	4631      	mov	r1, r6
   d7e8a:	f7fe fd1e 	bl	d68ca <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  _addr = addr;

  return i2c_dev->begin();
   d7e8e:	2101      	movs	r1, #1
   d7e90:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7e92:	602c      	str	r4, [r5, #0]
  _addr = addr;
   d7e94:	712e      	strb	r6, [r5, #4]
}
   d7e96:	b002      	add	sp, #8
   d7e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return i2c_dev->begin();
   d7e9c:	f7fe bd31 	b.w	d6902 <_ZN18Adafruit_I2CDevice5beginEb>

000d7ea0 <_ZN19Adafruit_EEPROM_I2C5writeEth>:
    @param[in] value
                The 8-bit value to write at addr
    @returns True on I2C command success, false on timeout or I2C failure
*/
/**************************************************************************/
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7ea0:	b530      	push	{r4, r5, lr}
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};

  if (!i2c_dev->write(buff, 3))
   d7ea2:	2300      	movs	r3, #0
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7ea4:	b085      	sub	sp, #20
  if (!i2c_dev->write(buff, 3))
   d7ea6:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   d7eaa:	ba49      	rev16	r1, r1
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7eac:	4605      	mov	r5, r0
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   d7eae:	f8ad 100c 	strh.w	r1, [sp, #12]
   d7eb2:	f88d 200e 	strb.w	r2, [sp, #14]
  if (!i2c_dev->write(buff, 3))
   d7eb6:	6800      	ldr	r0, [r0, #0]
   d7eb8:	2301      	movs	r3, #1
   d7eba:	2203      	movs	r2, #3
   d7ebc:	a903      	add	r1, sp, #12
   d7ebe:	f7fe fd2f 	bl	d6920 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d7ec2:	b160      	cbz	r0, d7ede <_ZN19Adafruit_EEPROM_I2C5writeEth+0x3e>
   d7ec4:	2465      	movs	r4, #101	; 0x65
    return false;

  // Wait until it acks!
  uint8_t timeout = 100;
  while (timeout--) {
   d7ec6:	3c01      	subs	r4, #1
   d7ec8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d7ecc:	d007      	beq.n	d7ede <_ZN19Adafruit_EEPROM_I2C5writeEth+0x3e>
    if (i2c_dev->detected())
   d7ece:	6828      	ldr	r0, [r5, #0]
   d7ed0:	f7fe fd02 	bl	d68d8 <_ZN18Adafruit_I2CDevice8detectedEv>
   d7ed4:	b920      	cbnz	r0, d7ee0 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x40>
      return true;
    delay(1);
   d7ed6:	2001      	movs	r0, #1
   d7ed8:	f001 f892 	bl	d9000 <delay>
  while (timeout--) {
   d7edc:	e7f3      	b.n	d7ec6 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x26>
    return false;
   d7ede:	2000      	movs	r0, #0
  }

  // timed out :(
  return false;
}
   d7ee0:	b005      	add	sp, #20
   d7ee2:	bd30      	pop	{r4, r5, pc}

000d7ee4 <_ZN19Adafruit_EEPROM_I2C4readEt>:
    @param addr
                The 16-bit address to read from in EEPROM memory
    @returns    The 8-bit value retrieved at addr
*/
/**************************************************************************/
uint8_t Adafruit_EEPROM_I2C::read(uint16_t addr) {
   d7ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};

  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7ee6:	2301      	movs	r3, #1
   d7ee8:	2200      	movs	r2, #0
   d7eea:	e9cd 3200 	strd	r3, r2, [sp]
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   d7eee:	ba49      	rev16	r1, r1
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7ef0:	ab03      	add	r3, sp, #12
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   d7ef2:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7ef6:	6800      	ldr	r0, [r0, #0]
   d7ef8:	2202      	movs	r2, #2
   d7efa:	4619      	mov	r1, r3
   d7efc:	f7fe fd7e 	bl	d69fc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
   d7f00:	b108      	cbz	r0, d7f06 <_ZN19Adafruit_EEPROM_I2C4readEt+0x22>
    return 0x0;

  return buff[0];
   d7f02:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d7f06:	b005      	add	sp, #20
   d7f08:	f85d fb04 	ldr.w	pc, [sp], #4

000d7f0c <_ZN15Adafruit_INA219C1Eh>:

/*!
 *  @brief  Instantiates a new INA219 class
 *  @param addr the I2C address the device can be found on. Default is 0x40
 */
Adafruit_INA219::Adafruit_INA219(uint8_t addr) {
   d7f0c:	2200      	movs	r2, #0
   d7f0e:	6002      	str	r2, [r0, #0]
  ina219_i2caddr = addr;
  ina219_currentDivider_mA = 0;
   d7f10:	60c2      	str	r2, [r0, #12]
  ina219_powerMultiplier_mW = 0.0f;
   d7f12:	2200      	movs	r2, #0
  ina219_i2caddr = addr;
   d7f14:	7141      	strb	r1, [r0, #5]
  ina219_powerMultiplier_mW = 0.0f;
   d7f16:	6102      	str	r2, [r0, #16]
}
   d7f18:	4770      	bx	lr

000d7f1a <_ZN15Adafruit_INA21917getBusVoltage_rawEv>:

/*!
 *  @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
 *  @return the raw bus voltage reading
 */
int16_t Adafruit_INA219::getBusVoltage_raw() {
   d7f1a:	b510      	push	{r4, lr}
  uint16_t value;

  Adafruit_BusIO_Register bus_voltage_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
   d7f1c:	2301      	movs	r3, #1
int16_t Adafruit_INA219::getBusVoltage_raw() {
   d7f1e:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
   d7f20:	e9cd 3300 	strd	r3, r3, [sp]
   d7f24:	2302      	movs	r3, #2
   d7f26:	6801      	ldr	r1, [r0, #0]
int16_t Adafruit_INA219::getBusVoltage_raw() {
   d7f28:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
   d7f2a:	461a      	mov	r2, r3
   d7f2c:	a804      	add	r0, sp, #16
   d7f2e:	f7fe fa9f 	bl	d6470 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = bus_voltage_reg.read(&value);
   d7f32:	f10d 010e 	add.w	r1, sp, #14
   d7f36:	a804      	add	r0, sp, #16
   d7f38:	f7fe fb4f 	bl	d65da <_ZN23Adafruit_BusIO_Register4readEPt>
   d7f3c:	7120      	strb	r0, [r4, #4]

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
   d7f3e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   d7f42:	10c0      	asrs	r0, r0, #3
}
   d7f44:	0080      	lsls	r0, r0, #2
   d7f46:	b00a      	add	sp, #40	; 0x28
   d7f48:	bd10      	pop	{r4, pc}

000d7f4a <_ZN15Adafruit_INA21919getShuntVoltage_rawEv>:

/*!
 *  @brief  Gets the raw shunt voltage (16-bit signed integer, so +-32767)
 *  @return the raw shunt voltage reading
 */
int16_t Adafruit_INA219::getShuntVoltage_raw() {
   d7f4a:	b510      	push	{r4, lr}
  uint16_t value;
  Adafruit_BusIO_Register shunt_voltage_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
   d7f4c:	2201      	movs	r2, #1
int16_t Adafruit_INA219::getShuntVoltage_raw() {
   d7f4e:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
   d7f50:	e9cd 2200 	strd	r2, r2, [sp]
int16_t Adafruit_INA219::getShuntVoltage_raw() {
   d7f54:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
   d7f56:	6801      	ldr	r1, [r0, #0]
   d7f58:	2302      	movs	r3, #2
   d7f5a:	a804      	add	r0, sp, #16
   d7f5c:	f7fe fa88 	bl	d6470 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = shunt_voltage_reg.read(&value);
   d7f60:	f10d 010e 	add.w	r1, sp, #14
   d7f64:	a804      	add	r0, sp, #16
   d7f66:	f7fe fb38 	bl	d65da <_ZN23Adafruit_BusIO_Register4readEPt>
   d7f6a:	7120      	strb	r0, [r4, #4]
  return value;
}
   d7f6c:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
   d7f70:	b00a      	add	sp, #40	; 0x28
   d7f72:	bd10      	pop	{r4, pc}

000d7f74 <_ZN15Adafruit_INA21914getCurrent_rawEv>:

/*!
 *  @brief  Gets the raw current value (16-bit signed integer, so +-32767)
 *  @return the raw current reading
 */
int16_t Adafruit_INA219::getCurrent_raw() {
   d7f74:	b530      	push	{r4, r5, lr}
  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7f76:	2501      	movs	r5, #1
int16_t Adafruit_INA219::getCurrent_raw() {
   d7f78:	b091      	sub	sp, #68	; 0x44
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7f7a:	e9cd 5500 	strd	r5, r5, [sp]
int16_t Adafruit_INA219::getCurrent_raw() {
   d7f7e:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7f80:	6801      	ldr	r1, [r0, #0]
   d7f82:	2302      	movs	r3, #2
   d7f84:	2205      	movs	r2, #5
   d7f86:	a804      	add	r0, sp, #16
   d7f88:	f7fe fa72 	bl	d6470 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   d7f8c:	68a1      	ldr	r1, [r4, #8]
   d7f8e:	2202      	movs	r2, #2
   d7f90:	a804      	add	r0, sp, #16
   d7f92:	f7fe fac4 	bl	d651e <_ZN23Adafruit_BusIO_Register5writeEmh>

  // Now we can safely read the CURRENT register!
  Adafruit_BusIO_Register current_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CURRENT, 2, MSBFIRST);
   d7f96:	6821      	ldr	r1, [r4, #0]
   d7f98:	2302      	movs	r3, #2
   d7f9a:	2204      	movs	r2, #4
   d7f9c:	e9cd 5500 	strd	r5, r5, [sp]
   d7fa0:	a80a      	add	r0, sp, #40	; 0x28
   d7fa2:	f7fe fa65 	bl	d6470 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = current_reg.read(&value);
   d7fa6:	f10d 010e 	add.w	r1, sp, #14
   d7faa:	a80a      	add	r0, sp, #40	; 0x28
   d7fac:	f7fe fb15 	bl	d65da <_ZN23Adafruit_BusIO_Register4readEPt>
   d7fb0:	7120      	strb	r0, [r4, #4]
  return value;
}
   d7fb2:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
   d7fb6:	b011      	add	sp, #68	; 0x44
   d7fb8:	bd30      	pop	{r4, r5, pc}

000d7fba <_ZN15Adafruit_INA21912getPower_rawEv>:

/*!
 *  @brief  Gets the raw power value (16-bit signed integer, so +-32767)
 *  @return raw power reading
 */
int16_t Adafruit_INA219::getPower_raw() {
   d7fba:	b530      	push	{r4, r5, lr}
  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7fbc:	2501      	movs	r5, #1
int16_t Adafruit_INA219::getPower_raw() {
   d7fbe:	b091      	sub	sp, #68	; 0x44
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7fc0:	e9cd 5500 	strd	r5, r5, [sp]
int16_t Adafruit_INA219::getPower_raw() {
   d7fc4:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d7fc6:	6801      	ldr	r1, [r0, #0]
   d7fc8:	2302      	movs	r3, #2
   d7fca:	2205      	movs	r2, #5
   d7fcc:	a804      	add	r0, sp, #16
   d7fce:	f7fe fa4f 	bl	d6470 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   d7fd2:	68a1      	ldr	r1, [r4, #8]
   d7fd4:	2202      	movs	r2, #2
   d7fd6:	a804      	add	r0, sp, #16
   d7fd8:	f7fe faa1 	bl	d651e <_ZN23Adafruit_BusIO_Register5writeEmh>

  // Now we can safely read the POWER register!
  Adafruit_BusIO_Register power_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_POWER, 2, MSBFIRST);
   d7fdc:	6821      	ldr	r1, [r4, #0]
   d7fde:	2302      	movs	r3, #2
   d7fe0:	2203      	movs	r2, #3
   d7fe2:	e9cd 5500 	strd	r5, r5, [sp]
   d7fe6:	a80a      	add	r0, sp, #40	; 0x28
   d7fe8:	f7fe fa42 	bl	d6470 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = power_reg.read(&value);
   d7fec:	f10d 010e 	add.w	r1, sp, #14
   d7ff0:	a80a      	add	r0, sp, #40	; 0x28
   d7ff2:	f7fe faf2 	bl	d65da <_ZN23Adafruit_BusIO_Register4readEPt>
   d7ff6:	7120      	strb	r0, [r4, #4]
  return value;
}
   d7ff8:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
   d7ffc:	b011      	add	sp, #68	; 0x44
   d7ffe:	bd30      	pop	{r4, r5, pc}

000d8000 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv>:

/*!
 *  @brief  Gets the shunt voltage in mV (so +-327mV)
 *  @return the shunt voltage converted to millivolts
 */
float Adafruit_INA219::getShuntVoltage_mV() {
   d8000:	b508      	push	{r3, lr}
  int16_t value;
  value = getShuntVoltage_raw();
   d8002:	f7ff ffa2 	bl	d7f4a <_ZN15Adafruit_INA21919getShuntVoltage_rawEv>
  return value * 0.01;
   d8006:	f004 fd37 	bl	dca78 <__aeabi_i2d>
   d800a:	a305      	add	r3, pc, #20	; (adr r3, d8020 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv+0x20>)
   d800c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8010:	f004 fd9c 	bl	dcb4c <__aeabi_dmul>
   d8014:	f005 f892 	bl	dd13c <__aeabi_d2f>
}
   d8018:	ee00 0a10 	vmov	s0, r0
   d801c:	bd08      	pop	{r3, pc}
   d801e:	bf00      	nop
   d8020:	47ae147b 	.word	0x47ae147b
   d8024:	3f847ae1 	.word	0x3f847ae1

000d8028 <_ZN15Adafruit_INA21915getBusVoltage_VEv>:

/*!
 *  @brief  Gets the bus voltage in volts
 *  @return the bus voltage converted to volts
 */
float Adafruit_INA219::getBusVoltage_V() {
   d8028:	b508      	push	{r3, lr}
  int16_t value = getBusVoltage_raw();
   d802a:	f7ff ff76 	bl	d7f1a <_ZN15Adafruit_INA21917getBusVoltage_rawEv>
  return value * 0.001;
   d802e:	f004 fd23 	bl	dca78 <__aeabi_i2d>
   d8032:	a305      	add	r3, pc, #20	; (adr r3, d8048 <_ZN15Adafruit_INA21915getBusVoltage_VEv+0x20>)
   d8034:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8038:	f004 fd88 	bl	dcb4c <__aeabi_dmul>
   d803c:	f005 f87e 	bl	dd13c <__aeabi_d2f>
}
   d8040:	ee00 0a10 	vmov	s0, r0
   d8044:	bd08      	pop	{r3, pc}
   d8046:	bf00      	nop
   d8048:	d2f1a9fc 	.word	0xd2f1a9fc
   d804c:	3f50624d 	.word	0x3f50624d

000d8050 <_ZN15Adafruit_INA21913getCurrent_mAEv>:
/*!
 *  @brief  Gets the current value in mA, taking into account the
 *          config settings and current LSB
 *  @return the current reading convereted to milliamps
 */
float Adafruit_INA219::getCurrent_mA() {
   d8050:	b510      	push	{r4, lr}
   d8052:	4604      	mov	r4, r0
  float valueDec = getCurrent_raw();
   d8054:	f7ff ff8e 	bl	d7f74 <_ZN15Adafruit_INA21914getCurrent_rawEv>
   d8058:	ee07 0a90 	vmov	s15, r0
   d805c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  valueDec /= ina219_currentDivider_mA;
   d8060:	edd4 7a03 	vldr	s15, [r4, #12]
   d8064:	eef8 7a67 	vcvt.f32.u32	s15, s15
  return valueDec;
}
   d8068:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d806c:	bd10      	pop	{r4, pc}

000d806e <_ZN15Adafruit_INA21911getPower_mWEv>:
/*!
 *  @brief  Gets the power value in mW, taking into account the
 *          config settings and current LSB
 *  @return power reading converted to milliwatts
 */
float Adafruit_INA219::getPower_mW() {
   d806e:	b510      	push	{r4, lr}
   d8070:	4604      	mov	r4, r0
  float valueDec = getPower_raw();
   d8072:	f7ff ffa2 	bl	d7fba <_ZN15Adafruit_INA21912getPower_rawEv>
   d8076:	ee07 0a90 	vmov	s15, r0
   d807a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  valueDec *= ina219_powerMultiplier_mW;
   d807e:	edd4 7a04 	vldr	s15, [r4, #16]
  return valueDec;
}
   d8082:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8086:	bd10      	pop	{r4, pc}

000d8088 <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>:
 *          of current.  Each unit of current corresponds to 100uA, and
 *          each unit of power corresponds to 2mW. Counter overflow
 *          occurs at 3.2A.
 *  @note   These calculations assume a 0.1 ohm resistor is present
 */
void Adafruit_INA219::setCalibration_32V_2A() {
   d8088:	b530      	push	{r4, r5, lr}
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 3.2 * 32V
  // MaximumPower = 102.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
   d808a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   d808e:	230a      	movs	r3, #10
void Adafruit_INA219::setCalibration_32V_2A() {
   d8090:	b08f      	sub	sp, #60	; 0x3c
  ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
   d8092:	e9c0 2302 	strd	r2, r3, [r0, #8]
  ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)

  // Set Calibration register to 'Cal' calculated above
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d8096:	2501      	movs	r5, #1
  ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
   d8098:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d809c:	6103      	str	r3, [r0, #16]
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d809e:	e9cd 5500 	strd	r5, r5, [sp]
void Adafruit_INA219::setCalibration_32V_2A() {
   d80a2:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d80a4:	6801      	ldr	r1, [r0, #0]
   d80a6:	2302      	movs	r3, #2
   d80a8:	2205      	movs	r2, #5
   d80aa:	a802      	add	r0, sp, #8
   d80ac:	f7fe f9e0 	bl	d6470 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   d80b0:	68a1      	ldr	r1, [r4, #8]
   d80b2:	2202      	movs	r2, #2
   d80b4:	a802      	add	r0, sp, #8
   d80b6:	f7fe fa32 	bl	d651e <_ZN23Adafruit_BusIO_Register5writeEmh>
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
                    INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  Adafruit_BusIO_Register config_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CONFIG, 2, MSBFIRST);
   d80ba:	6821      	ldr	r1, [r4, #0]
   d80bc:	2302      	movs	r3, #2
   d80be:	e9cd 5500 	strd	r5, r5, [sp]
   d80c2:	2200      	movs	r2, #0
   d80c4:	a808      	add	r0, sp, #32
   d80c6:	f7fe f9d3 	bl	d6470 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = config_reg.write(config, 2);
   d80ca:	2202      	movs	r2, #2
   d80cc:	f643 119f 	movw	r1, #14751	; 0x399f
   d80d0:	a808      	add	r0, sp, #32
   d80d2:	f7fe fa24 	bl	d651e <_ZN23Adafruit_BusIO_Register5writeEmh>
   d80d6:	7120      	strb	r0, [r4, #4]
}
   d80d8:	b00f      	add	sp, #60	; 0x3c
   d80da:	bd30      	pop	{r4, r5, pc}

000d80dc <_ZN15Adafruit_INA2195beginEP7TwoWire>:
bool Adafruit_INA219::begin(TwoWire *theWire) {
   d80dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   d80de:	6803      	ldr	r3, [r0, #0]
bool Adafruit_INA219::begin(TwoWire *theWire) {
   d80e0:	4604      	mov	r4, r0
  if (!i2c_dev) {
   d80e2:	b953      	cbnz	r3, d80fa <_ZN15Adafruit_INA2195beginEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(ina219_i2caddr, theWire);
   d80e4:	2010      	movs	r0, #16
   d80e6:	9101      	str	r1, [sp, #4]
   d80e8:	f7fb ffd5 	bl	d4096 <_Znwj>
   d80ec:	4605      	mov	r5, r0
   d80ee:	b118      	cbz	r0, d80f8 <_ZN15Adafruit_INA2195beginEP7TwoWire+0x1c>
   d80f0:	9a01      	ldr	r2, [sp, #4]
   d80f2:	7961      	ldrb	r1, [r4, #5]
   d80f4:	f7fe fbe9 	bl	d68ca <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d80f8:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
   d80fa:	6820      	ldr	r0, [r4, #0]
   d80fc:	2101      	movs	r1, #1
   d80fe:	f7fe fc00 	bl	d6902 <_ZN18Adafruit_I2CDevice5beginEb>
   d8102:	4605      	mov	r5, r0
   d8104:	b110      	cbz	r0, d810c <_ZN15Adafruit_INA2195beginEP7TwoWire+0x30>
  setCalibration_32V_2A();
   d8106:	4620      	mov	r0, r4
   d8108:	f7ff ffbe 	bl	d8088 <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>
}
   d810c:	4628      	mov	r0, r5
   d810e:	b003      	add	sp, #12
   d8110:	bd30      	pop	{r4, r5, pc}

000d8112 <_ZN15Adafruit_INA21924setCalibration_16V_400mAEv>:
/*!
 *  @brief set device to alibration which uses the highest precision for
 *     current measurement (0.1mA), at the expense of
 *     only supporting 16V at 400mA max.
 */
void Adafruit_INA219::setCalibration_16V_400mA() {
   d8112:	b530      	push	{r4, r5, lr}
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 0.4 * 16V
  // MaximumPower = 6.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
   d8114:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d8118:	2314      	movs	r3, #20
void Adafruit_INA219::setCalibration_16V_400mA() {
   d811a:	b08f      	sub	sp, #60	; 0x3c
  ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
   d811c:	e9c0 2302 	strd	r2, r3, [r0, #8]
  ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit

  // Set Calibration register to 'Cal' calculated above
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d8120:	2501      	movs	r5, #1
  ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit
   d8122:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d8126:	6103      	str	r3, [r0, #16]
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d8128:	e9cd 5500 	strd	r5, r5, [sp]
void Adafruit_INA219::setCalibration_16V_400mA() {
   d812c:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   d812e:	6801      	ldr	r1, [r0, #0]
   d8130:	2302      	movs	r3, #2
   d8132:	2205      	movs	r2, #5
   d8134:	a802      	add	r0, sp, #8
   d8136:	f7fe f99b 	bl	d6470 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   d813a:	68a1      	ldr	r1, [r4, #8]
   d813c:	2202      	movs	r2, #2
   d813e:	a802      	add	r0, sp, #8
   d8140:	f7fe f9ed 	bl	d651e <_ZN23Adafruit_BusIO_Register5writeEmh>
                    INA219_CONFIG_GAIN_1_40MV | INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

  Adafruit_BusIO_Register config_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CONFIG, 2, MSBFIRST);
   d8144:	6821      	ldr	r1, [r4, #0]
   d8146:	2302      	movs	r3, #2
   d8148:	e9cd 5500 	strd	r5, r5, [sp]
   d814c:	2200      	movs	r2, #0
   d814e:	a808      	add	r0, sp, #32
   d8150:	f7fe f98e 	bl	d6470 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = config_reg.write(config, 2);
   d8154:	2202      	movs	r2, #2
   d8156:	f240 119f 	movw	r1, #415	; 0x19f
   d815a:	a808      	add	r0, sp, #32
   d815c:	f7fe f9df 	bl	d651e <_ZN23Adafruit_BusIO_Register5writeEmh>
   d8160:	7120      	strb	r0, [r4, #4]
}
   d8162:	b00f      	add	sp, #60	; 0x3c
   d8164:	bd30      	pop	{r4, r5, pc}
	...

000d8168 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d8168:	b508      	push	{r3, lr}
   d816a:	4b02      	ldr	r3, [pc, #8]	; (d8174 <netdb_freeaddrinfo+0xc>)
   d816c:	681b      	ldr	r3, [r3, #0]
   d816e:	689b      	ldr	r3, [r3, #8]
   d8170:	9301      	str	r3, [sp, #4]
   d8172:	bd08      	pop	{r3, pc}
   d8174:	00030268 	.word	0x00030268

000d8178 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d8178:	b508      	push	{r3, lr}
   d817a:	4b02      	ldr	r3, [pc, #8]	; (d8184 <netdb_getaddrinfo+0xc>)
   d817c:	681b      	ldr	r3, [r3, #0]
   d817e:	68db      	ldr	r3, [r3, #12]
   d8180:	9301      	str	r3, [sp, #4]
   d8182:	bd08      	pop	{r3, pc}
   d8184:	00030268 	.word	0x00030268

000d8188 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d8188:	b508      	push	{r3, lr}
   d818a:	4b02      	ldr	r3, [pc, #8]	; (d8194 <HAL_Validate_Pin_Function+0xc>)
   d818c:	681b      	ldr	r3, [r3, #0]
   d818e:	685b      	ldr	r3, [r3, #4]
   d8190:	9301      	str	r3, [sp, #4]
   d8192:	bd08      	pop	{r3, pc}
   d8194:	0003022c 	.word	0x0003022c

000d8198 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d8198:	b508      	push	{r3, lr}
   d819a:	4b02      	ldr	r3, [pc, #8]	; (d81a4 <HAL_Pin_Mode+0xc>)
   d819c:	681b      	ldr	r3, [r3, #0]
   d819e:	689b      	ldr	r3, [r3, #8]
   d81a0:	9301      	str	r3, [sp, #4]
   d81a2:	bd08      	pop	{r3, pc}
   d81a4:	0003022c 	.word	0x0003022c

000d81a8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d81a8:	b508      	push	{r3, lr}
   d81aa:	4b02      	ldr	r3, [pc, #8]	; (d81b4 <HAL_Get_Pin_Mode+0xc>)
   d81ac:	681b      	ldr	r3, [r3, #0]
   d81ae:	68db      	ldr	r3, [r3, #12]
   d81b0:	9301      	str	r3, [sp, #4]
   d81b2:	bd08      	pop	{r3, pc}
   d81b4:	0003022c 	.word	0x0003022c

000d81b8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d81b8:	b508      	push	{r3, lr}
   d81ba:	4b02      	ldr	r3, [pc, #8]	; (d81c4 <HAL_GPIO_Write+0xc>)
   d81bc:	681b      	ldr	r3, [r3, #0]
   d81be:	691b      	ldr	r3, [r3, #16]
   d81c0:	9301      	str	r3, [sp, #4]
   d81c2:	bd08      	pop	{r3, pc}
   d81c4:	0003022c 	.word	0x0003022c

000d81c8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d81c8:	b508      	push	{r3, lr}
   d81ca:	4b02      	ldr	r3, [pc, #8]	; (d81d4 <HAL_GPIO_Read+0xc>)
   d81cc:	681b      	ldr	r3, [r3, #0]
   d81ce:	695b      	ldr	r3, [r3, #20]
   d81d0:	9301      	str	r3, [sp, #4]
   d81d2:	bd08      	pop	{r3, pc}
   d81d4:	0003022c 	.word	0x0003022c

000d81d8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d81d8:	b508      	push	{r3, lr}
   d81da:	4b02      	ldr	r3, [pc, #8]	; (d81e4 <HAL_Interrupts_Attach+0xc>)
   d81dc:	681b      	ldr	r3, [r3, #0]
   d81de:	699b      	ldr	r3, [r3, #24]
   d81e0:	9301      	str	r3, [sp, #4]
   d81e2:	bd08      	pop	{r3, pc}
   d81e4:	0003022c 	.word	0x0003022c

000d81e8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d81e8:	b508      	push	{r3, lr}
   d81ea:	4b02      	ldr	r3, [pc, #8]	; (d81f4 <HAL_Interrupts_Detach+0xc>)
   d81ec:	681b      	ldr	r3, [r3, #0]
   d81ee:	69db      	ldr	r3, [r3, #28]
   d81f0:	9301      	str	r3, [sp, #4]
   d81f2:	bd08      	pop	{r3, pc}
   d81f4:	0003022c 	.word	0x0003022c

000d81f8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d81f8:	b508      	push	{r3, lr}
   d81fa:	4b02      	ldr	r3, [pc, #8]	; (d8204 <hal_adc_read+0xc>)
   d81fc:	681b      	ldr	r3, [r3, #0]
   d81fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8200:	9301      	str	r3, [sp, #4]
   d8202:	bd08      	pop	{r3, pc}
   d8204:	0003022c 	.word	0x0003022c

000d8208 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d8208:	b508      	push	{r3, lr}
   d820a:	4b02      	ldr	r3, [pc, #8]	; (d8214 <HAL_RNG_GetRandomNumber+0xc>)
   d820c:	681b      	ldr	r3, [r3, #0]
   d820e:	685b      	ldr	r3, [r3, #4]
   d8210:	9301      	str	r3, [sp, #4]
   d8212:	bd08      	pop	{r3, pc}
   d8214:	00030218 	.word	0x00030218

000d8218 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d8218:	b508      	push	{r3, lr}
   d821a:	4b02      	ldr	r3, [pc, #8]	; (d8224 <HAL_Delay_Microseconds+0xc>)
   d821c:	681b      	ldr	r3, [r3, #0]
   d821e:	68db      	ldr	r3, [r3, #12]
   d8220:	9301      	str	r3, [sp, #4]
   d8222:	bd08      	pop	{r3, pc}
   d8224:	00030218 	.word	0x00030218

000d8228 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d8228:	b508      	push	{r3, lr}
   d822a:	4b02      	ldr	r3, [pc, #8]	; (d8234 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d822c:	681b      	ldr	r3, [r3, #0]
   d822e:	695b      	ldr	r3, [r3, #20]
   d8230:	9301      	str	r3, [sp, #4]
   d8232:	bd08      	pop	{r3, pc}
   d8234:	00030218 	.word	0x00030218

000d8238 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d8238:	b508      	push	{r3, lr}
   d823a:	4b02      	ldr	r3, [pc, #8]	; (d8244 <HAL_EEPROM_Init+0xc>)
   d823c:	681b      	ldr	r3, [r3, #0]
   d823e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8240:	9301      	str	r3, [sp, #4]
   d8242:	bd08      	pop	{r3, pc}
   d8244:	00030218 	.word	0x00030218

000d8248 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d8248:	b508      	push	{r3, lr}
   d824a:	4b02      	ldr	r3, [pc, #8]	; (d8254 <HAL_EEPROM_Get+0xc>)
   d824c:	681b      	ldr	r3, [r3, #0]
   d824e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8250:	9301      	str	r3, [sp, #4]
   d8252:	bd08      	pop	{r3, pc}
   d8254:	00030218 	.word	0x00030218

000d8258 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d8258:	b508      	push	{r3, lr}
   d825a:	4b02      	ldr	r3, [pc, #8]	; (d8264 <HAL_EEPROM_Put+0xc>)
   d825c:	681b      	ldr	r3, [r3, #0]
   d825e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8260:	9301      	str	r3, [sp, #4]
   d8262:	bd08      	pop	{r3, pc}
   d8264:	00030218 	.word	0x00030218

000d8268 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d8268:	b508      	push	{r3, lr}
   d826a:	4b02      	ldr	r3, [pc, #8]	; (d8274 <hal_rtc_time_is_valid+0xc>)
   d826c:	681b      	ldr	r3, [r3, #0]
   d826e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8270:	9301      	str	r3, [sp, #4]
   d8272:	bd08      	pop	{r3, pc}
   d8274:	00030218 	.word	0x00030218

000d8278 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d8278:	b508      	push	{r3, lr}
   d827a:	4b02      	ldr	r3, [pc, #8]	; (d8284 <hal_rtc_get_time+0xc>)
   d827c:	681b      	ldr	r3, [r3, #0]
   d827e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d8280:	9301      	str	r3, [sp, #4]
   d8282:	bd08      	pop	{r3, pc}
   d8284:	00030218 	.word	0x00030218

000d8288 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d8288:	b508      	push	{r3, lr}
   d828a:	4b02      	ldr	r3, [pc, #8]	; (d8294 <os_thread_yield+0xc>)
   d828c:	681b      	ldr	r3, [r3, #0]
   d828e:	68db      	ldr	r3, [r3, #12]
   d8290:	9301      	str	r3, [sp, #4]
   d8292:	bd08      	pop	{r3, pc}
   d8294:	00030248 	.word	0x00030248

000d8298 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d8298:	b508      	push	{r3, lr}
   d829a:	4b02      	ldr	r3, [pc, #8]	; (d82a4 <os_mutex_recursive_create+0xc>)
   d829c:	681b      	ldr	r3, [r3, #0]
   d829e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d82a0:	9301      	str	r3, [sp, #4]
   d82a2:	bd08      	pop	{r3, pc}
   d82a4:	00030248 	.word	0x00030248

000d82a8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d82a8:	b508      	push	{r3, lr}
   d82aa:	4b02      	ldr	r3, [pc, #8]	; (d82b4 <inet_inet_ntop+0xc>)
   d82ac:	681b      	ldr	r3, [r3, #0]
   d82ae:	695b      	ldr	r3, [r3, #20]
   d82b0:	9301      	str	r3, [sp, #4]
   d82b2:	bd08      	pop	{r3, pc}
   d82b4:	00030264 	.word	0x00030264

000d82b8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d82b8:	b508      	push	{r3, lr}
   d82ba:	4b02      	ldr	r3, [pc, #8]	; (d82c4 <hal_usart_init+0xc>)
   d82bc:	681b      	ldr	r3, [r3, #0]
   d82be:	681b      	ldr	r3, [r3, #0]
   d82c0:	9301      	str	r3, [sp, #4]
   d82c2:	bd08      	pop	{r3, pc}
   d82c4:	0003023c 	.word	0x0003023c

000d82c8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d82c8:	b508      	push	{r3, lr}
   d82ca:	4b02      	ldr	r3, [pc, #8]	; (d82d4 <hal_usart_write+0xc>)
   d82cc:	681b      	ldr	r3, [r3, #0]
   d82ce:	68db      	ldr	r3, [r3, #12]
   d82d0:	9301      	str	r3, [sp, #4]
   d82d2:	bd08      	pop	{r3, pc}
   d82d4:	0003023c 	.word	0x0003023c

000d82d8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d82d8:	b508      	push	{r3, lr}
   d82da:	4b02      	ldr	r3, [pc, #8]	; (d82e4 <hal_usart_available+0xc>)
   d82dc:	681b      	ldr	r3, [r3, #0]
   d82de:	691b      	ldr	r3, [r3, #16]
   d82e0:	9301      	str	r3, [sp, #4]
   d82e2:	bd08      	pop	{r3, pc}
   d82e4:	0003023c 	.word	0x0003023c

000d82e8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d82e8:	b508      	push	{r3, lr}
   d82ea:	4b02      	ldr	r3, [pc, #8]	; (d82f4 <hal_usart_read+0xc>)
   d82ec:	681b      	ldr	r3, [r3, #0]
   d82ee:	695b      	ldr	r3, [r3, #20]
   d82f0:	9301      	str	r3, [sp, #4]
   d82f2:	bd08      	pop	{r3, pc}
   d82f4:	0003023c 	.word	0x0003023c

000d82f8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d82f8:	b508      	push	{r3, lr}
   d82fa:	4b02      	ldr	r3, [pc, #8]	; (d8304 <hal_usart_peek+0xc>)
   d82fc:	681b      	ldr	r3, [r3, #0]
   d82fe:	699b      	ldr	r3, [r3, #24]
   d8300:	9301      	str	r3, [sp, #4]
   d8302:	bd08      	pop	{r3, pc}
   d8304:	0003023c 	.word	0x0003023c

000d8308 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d8308:	b508      	push	{r3, lr}
   d830a:	4b02      	ldr	r3, [pc, #8]	; (d8314 <hal_usart_flush+0xc>)
   d830c:	681b      	ldr	r3, [r3, #0]
   d830e:	69db      	ldr	r3, [r3, #28]
   d8310:	9301      	str	r3, [sp, #4]
   d8312:	bd08      	pop	{r3, pc}
   d8314:	0003023c 	.word	0x0003023c

000d8318 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d8318:	b508      	push	{r3, lr}
   d831a:	4b02      	ldr	r3, [pc, #8]	; (d8324 <hal_usart_is_enabled+0xc>)
   d831c:	681b      	ldr	r3, [r3, #0]
   d831e:	6a1b      	ldr	r3, [r3, #32]
   d8320:	9301      	str	r3, [sp, #4]
   d8322:	bd08      	pop	{r3, pc}
   d8324:	0003023c 	.word	0x0003023c

000d8328 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d8328:	b508      	push	{r3, lr}
   d832a:	4b02      	ldr	r3, [pc, #8]	; (d8334 <hal_usart_available_data_for_write+0xc>)
   d832c:	681b      	ldr	r3, [r3, #0]
   d832e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8330:	9301      	str	r3, [sp, #4]
   d8332:	bd08      	pop	{r3, pc}
   d8334:	0003023c 	.word	0x0003023c

000d8338 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d8338:	b508      	push	{r3, lr}
   d833a:	4b02      	ldr	r3, [pc, #8]	; (d8344 <hal_i2c_set_speed+0xc>)
   d833c:	681b      	ldr	r3, [r3, #0]
   d833e:	681b      	ldr	r3, [r3, #0]
   d8340:	9301      	str	r3, [sp, #4]
   d8342:	bd08      	pop	{r3, pc}
   d8344:	00030228 	.word	0x00030228

000d8348 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d8348:	b508      	push	{r3, lr}
   d834a:	4b02      	ldr	r3, [pc, #8]	; (d8354 <hal_i2c_begin+0xc>)
   d834c:	681b      	ldr	r3, [r3, #0]
   d834e:	68db      	ldr	r3, [r3, #12]
   d8350:	9301      	str	r3, [sp, #4]
   d8352:	bd08      	pop	{r3, pc}
   d8354:	00030228 	.word	0x00030228

000d8358 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d8358:	b508      	push	{r3, lr}
   d835a:	4b02      	ldr	r3, [pc, #8]	; (d8364 <hal_i2c_begin_transmission+0xc>)
   d835c:	681b      	ldr	r3, [r3, #0]
   d835e:	699b      	ldr	r3, [r3, #24]
   d8360:	9301      	str	r3, [sp, #4]
   d8362:	bd08      	pop	{r3, pc}
   d8364:	00030228 	.word	0x00030228

000d8368 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d8368:	b508      	push	{r3, lr}
   d836a:	4b02      	ldr	r3, [pc, #8]	; (d8374 <hal_i2c_end_transmission+0xc>)
   d836c:	681b      	ldr	r3, [r3, #0]
   d836e:	69db      	ldr	r3, [r3, #28]
   d8370:	9301      	str	r3, [sp, #4]
   d8372:	bd08      	pop	{r3, pc}
   d8374:	00030228 	.word	0x00030228

000d8378 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d8378:	b508      	push	{r3, lr}
   d837a:	4b02      	ldr	r3, [pc, #8]	; (d8384 <hal_i2c_write+0xc>)
   d837c:	681b      	ldr	r3, [r3, #0]
   d837e:	6a1b      	ldr	r3, [r3, #32]
   d8380:	9301      	str	r3, [sp, #4]
   d8382:	bd08      	pop	{r3, pc}
   d8384:	00030228 	.word	0x00030228

000d8388 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d8388:	b508      	push	{r3, lr}
   d838a:	4b02      	ldr	r3, [pc, #8]	; (d8394 <hal_i2c_available+0xc>)
   d838c:	681b      	ldr	r3, [r3, #0]
   d838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8390:	9301      	str	r3, [sp, #4]
   d8392:	bd08      	pop	{r3, pc}
   d8394:	00030228 	.word	0x00030228

000d8398 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d8398:	b508      	push	{r3, lr}
   d839a:	4b02      	ldr	r3, [pc, #8]	; (d83a4 <hal_i2c_read+0xc>)
   d839c:	681b      	ldr	r3, [r3, #0]
   d839e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d83a0:	9301      	str	r3, [sp, #4]
   d83a2:	bd08      	pop	{r3, pc}
   d83a4:	00030228 	.word	0x00030228

000d83a8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d83a8:	b508      	push	{r3, lr}
   d83aa:	4b02      	ldr	r3, [pc, #8]	; (d83b4 <hal_i2c_peek+0xc>)
   d83ac:	681b      	ldr	r3, [r3, #0]
   d83ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d83b0:	9301      	str	r3, [sp, #4]
   d83b2:	bd08      	pop	{r3, pc}
   d83b4:	00030228 	.word	0x00030228

000d83b8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d83b8:	b508      	push	{r3, lr}
   d83ba:	4b02      	ldr	r3, [pc, #8]	; (d83c4 <hal_i2c_flush+0xc>)
   d83bc:	681b      	ldr	r3, [r3, #0]
   d83be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d83c0:	9301      	str	r3, [sp, #4]
   d83c2:	bd08      	pop	{r3, pc}
   d83c4:	00030228 	.word	0x00030228

000d83c8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d83c8:	b508      	push	{r3, lr}
   d83ca:	4b02      	ldr	r3, [pc, #8]	; (d83d4 <hal_i2c_is_enabled+0xc>)
   d83cc:	681b      	ldr	r3, [r3, #0]
   d83ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d83d0:	9301      	str	r3, [sp, #4]
   d83d2:	bd08      	pop	{r3, pc}
   d83d4:	00030228 	.word	0x00030228

000d83d8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d83d8:	b508      	push	{r3, lr}
   d83da:	4b02      	ldr	r3, [pc, #8]	; (d83e4 <hal_i2c_init+0xc>)
   d83dc:	681b      	ldr	r3, [r3, #0]
   d83de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d83e0:	9301      	str	r3, [sp, #4]
   d83e2:	bd08      	pop	{r3, pc}
   d83e4:	00030228 	.word	0x00030228

000d83e8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d83e8:	b508      	push	{r3, lr}
   d83ea:	4b02      	ldr	r3, [pc, #8]	; (d83f4 <hal_i2c_request_ex+0xc>)
   d83ec:	681b      	ldr	r3, [r3, #0]
   d83ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d83f0:	9301      	str	r3, [sp, #4]
   d83f2:	bd08      	pop	{r3, pc}
   d83f4:	00030228 	.word	0x00030228

000d83f8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d83f8:	b508      	push	{r3, lr}
   d83fa:	4b02      	ldr	r3, [pc, #8]	; (d8404 <hal_spi_begin+0xc>)
   d83fc:	681b      	ldr	r3, [r3, #0]
   d83fe:	681b      	ldr	r3, [r3, #0]
   d8400:	9301      	str	r3, [sp, #4]
   d8402:	bd08      	pop	{r3, pc}
   d8404:	00030230 	.word	0x00030230

000d8408 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d8408:	b508      	push	{r3, lr}
   d840a:	4b02      	ldr	r3, [pc, #8]	; (d8414 <hal_spi_transfer+0xc>)
   d840c:	681b      	ldr	r3, [r3, #0]
   d840e:	695b      	ldr	r3, [r3, #20]
   d8410:	9301      	str	r3, [sp, #4]
   d8412:	bd08      	pop	{r3, pc}
   d8414:	00030230 	.word	0x00030230

000d8418 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d8418:	b508      	push	{r3, lr}
   d841a:	4b02      	ldr	r3, [pc, #8]	; (d8424 <hal_spi_init+0xc>)
   d841c:	681b      	ldr	r3, [r3, #0]
   d841e:	69db      	ldr	r3, [r3, #28]
   d8420:	9301      	str	r3, [sp, #4]
   d8422:	bd08      	pop	{r3, pc}
   d8424:	00030230 	.word	0x00030230

000d8428 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d8428:	b508      	push	{r3, lr}
   d842a:	4b02      	ldr	r3, [pc, #8]	; (d8434 <hal_spi_is_enabled+0xc>)
   d842c:	681b      	ldr	r3, [r3, #0]
   d842e:	6a1b      	ldr	r3, [r3, #32]
   d8430:	9301      	str	r3, [sp, #4]
   d8432:	bd08      	pop	{r3, pc}
   d8434:	00030230 	.word	0x00030230

000d8438 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d8438:	b508      	push	{r3, lr}
   d843a:	4b02      	ldr	r3, [pc, #8]	; (d8444 <hal_spi_info+0xc>)
   d843c:	681b      	ldr	r3, [r3, #0]
   d843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8440:	9301      	str	r3, [sp, #4]
   d8442:	bd08      	pop	{r3, pc}
   d8444:	00030230 	.word	0x00030230

000d8448 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d8448:	b508      	push	{r3, lr}
   d844a:	4b02      	ldr	r3, [pc, #8]	; (d8454 <hal_spi_transfer_dma+0xc>)
   d844c:	681b      	ldr	r3, [r3, #0]
   d844e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8450:	9301      	str	r3, [sp, #4]
   d8452:	bd08      	pop	{r3, pc}
   d8454:	00030230 	.word	0x00030230

000d8458 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d8458:	b508      	push	{r3, lr}
   d845a:	4b02      	ldr	r3, [pc, #8]	; (d8464 <hal_spi_transfer_dma_status+0xc>)
   d845c:	681b      	ldr	r3, [r3, #0]
   d845e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8460:	9301      	str	r3, [sp, #4]
   d8462:	bd08      	pop	{r3, pc}
   d8464:	00030230 	.word	0x00030230

000d8468 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d8468:	b508      	push	{r3, lr}
   d846a:	4b02      	ldr	r3, [pc, #8]	; (d8474 <hal_spi_set_settings+0xc>)
   d846c:	681b      	ldr	r3, [r3, #0]
   d846e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8470:	9301      	str	r3, [sp, #4]
   d8472:	bd08      	pop	{r3, pc}
   d8474:	00030230 	.word	0x00030230

000d8478 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d8478:	b508      	push	{r3, lr}
   d847a:	4b02      	ldr	r3, [pc, #8]	; (d8484 <hal_spi_acquire+0xc>)
   d847c:	681b      	ldr	r3, [r3, #0]
   d847e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8480:	9301      	str	r3, [sp, #4]
   d8482:	bd08      	pop	{r3, pc}
   d8484:	00030230 	.word	0x00030230

000d8488 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d8488:	b508      	push	{r3, lr}
   d848a:	4b02      	ldr	r3, [pc, #8]	; (d8494 <hal_spi_release+0xc>)
   d848c:	681b      	ldr	r3, [r3, #0]
   d848e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8490:	9301      	str	r3, [sp, #4]
   d8492:	bd08      	pop	{r3, pc}
   d8494:	00030230 	.word	0x00030230

000d8498 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8498:	b508      	push	{r3, lr}
   d849a:	4b02      	ldr	r3, [pc, #8]	; (d84a4 <HAL_USB_USART_Init+0xc>)
   d849c:	681b      	ldr	r3, [r3, #0]
   d849e:	681b      	ldr	r3, [r3, #0]
   d84a0:	9301      	str	r3, [sp, #4]
   d84a2:	bd08      	pop	{r3, pc}
   d84a4:	0003024c 	.word	0x0003024c

000d84a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d84a8:	b508      	push	{r3, lr}
   d84aa:	4b02      	ldr	r3, [pc, #8]	; (d84b4 <HAL_USB_USART_Begin+0xc>)
   d84ac:	681b      	ldr	r3, [r3, #0]
   d84ae:	685b      	ldr	r3, [r3, #4]
   d84b0:	9301      	str	r3, [sp, #4]
   d84b2:	bd08      	pop	{r3, pc}
   d84b4:	0003024c 	.word	0x0003024c

000d84b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d84b8:	b508      	push	{r3, lr}
   d84ba:	4b02      	ldr	r3, [pc, #8]	; (d84c4 <HAL_USB_USART_Available_Data+0xc>)
   d84bc:	681b      	ldr	r3, [r3, #0]
   d84be:	691b      	ldr	r3, [r3, #16]
   d84c0:	9301      	str	r3, [sp, #4]
   d84c2:	bd08      	pop	{r3, pc}
   d84c4:	0003024c 	.word	0x0003024c

000d84c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d84c8:	b508      	push	{r3, lr}
   d84ca:	4b02      	ldr	r3, [pc, #8]	; (d84d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d84cc:	681b      	ldr	r3, [r3, #0]
   d84ce:	695b      	ldr	r3, [r3, #20]
   d84d0:	9301      	str	r3, [sp, #4]
   d84d2:	bd08      	pop	{r3, pc}
   d84d4:	0003024c 	.word	0x0003024c

000d84d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d84d8:	b508      	push	{r3, lr}
   d84da:	4b02      	ldr	r3, [pc, #8]	; (d84e4 <HAL_USB_USART_Receive_Data+0xc>)
   d84dc:	681b      	ldr	r3, [r3, #0]
   d84de:	699b      	ldr	r3, [r3, #24]
   d84e0:	9301      	str	r3, [sp, #4]
   d84e2:	bd08      	pop	{r3, pc}
   d84e4:	0003024c 	.word	0x0003024c

000d84e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d84e8:	b508      	push	{r3, lr}
   d84ea:	4b02      	ldr	r3, [pc, #8]	; (d84f4 <HAL_USB_USART_Send_Data+0xc>)
   d84ec:	681b      	ldr	r3, [r3, #0]
   d84ee:	69db      	ldr	r3, [r3, #28]
   d84f0:	9301      	str	r3, [sp, #4]
   d84f2:	bd08      	pop	{r3, pc}
   d84f4:	0003024c 	.word	0x0003024c

000d84f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d84f8:	b508      	push	{r3, lr}
   d84fa:	4b02      	ldr	r3, [pc, #8]	; (d8504 <HAL_USB_USART_Flush_Data+0xc>)
   d84fc:	681b      	ldr	r3, [r3, #0]
   d84fe:	6a1b      	ldr	r3, [r3, #32]
   d8500:	9301      	str	r3, [sp, #4]
   d8502:	bd08      	pop	{r3, pc}
   d8504:	0003024c 	.word	0x0003024c

000d8508 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d8508:	b508      	push	{r3, lr}
   d850a:	4b02      	ldr	r3, [pc, #8]	; (d8514 <HAL_USB_USART_Is_Enabled+0xc>)
   d850c:	681b      	ldr	r3, [r3, #0]
   d850e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8510:	9301      	str	r3, [sp, #4]
   d8512:	bd08      	pop	{r3, pc}
   d8514:	0003024c 	.word	0x0003024c

000d8518 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8518:	b508      	push	{r3, lr}
   d851a:	4b02      	ldr	r3, [pc, #8]	; (d8524 <panic_+0xc>)
   d851c:	681b      	ldr	r3, [r3, #0]
   d851e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8520:	9301      	str	r3, [sp, #4]
   d8522:	bd08      	pop	{r3, pc}
   d8524:	00030260 	.word	0x00030260

000d8528 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8528:	b508      	push	{r3, lr}
   d852a:	4b02      	ldr	r3, [pc, #8]	; (d8534 <system_mode+0xc>)
   d852c:	681b      	ldr	r3, [r3, #0]
   d852e:	681b      	ldr	r3, [r3, #0]
   d8530:	9301      	str	r3, [sp, #4]
   d8532:	bd08      	pop	{r3, pc}
   d8534:	00030220 	.word	0x00030220

000d8538 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8538:	b508      	push	{r3, lr}
   d853a:	4b02      	ldr	r3, [pc, #8]	; (d8544 <set_system_mode+0xc>)
   d853c:	681b      	ldr	r3, [r3, #0]
   d853e:	685b      	ldr	r3, [r3, #4]
   d8540:	9301      	str	r3, [sp, #4]
   d8542:	bd08      	pop	{r3, pc}
   d8544:	00030220 	.word	0x00030220

000d8548 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8548:	b508      	push	{r3, lr}
   d854a:	4b02      	ldr	r3, [pc, #8]	; (d8554 <system_delay_ms+0xc>)
   d854c:	681b      	ldr	r3, [r3, #0]
   d854e:	695b      	ldr	r3, [r3, #20]
   d8550:	9301      	str	r3, [sp, #4]
   d8552:	bd08      	pop	{r3, pc}
   d8554:	00030220 	.word	0x00030220

000d8558 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d8558:	b508      	push	{r3, lr}
   d855a:	4b02      	ldr	r3, [pc, #8]	; (d8564 <application_thread_current+0xc>)
   d855c:	681b      	ldr	r3, [r3, #0]
   d855e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8560:	9301      	str	r3, [sp, #4]
   d8562:	bd08      	pop	{r3, pc}
   d8564:	00030220 	.word	0x00030220

000d8568 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d8568:	b508      	push	{r3, lr}
   d856a:	4b02      	ldr	r3, [pc, #8]	; (d8574 <application_thread_invoke+0xc>)
   d856c:	681b      	ldr	r3, [r3, #0]
   d856e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8570:	9301      	str	r3, [sp, #4]
   d8572:	bd08      	pop	{r3, pc}
   d8574:	00030220 	.word	0x00030220

000d8578 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8578:	b508      	push	{r3, lr}
   d857a:	4b02      	ldr	r3, [pc, #8]	; (d8584 <system_thread_get_state+0xc>)
   d857c:	681b      	ldr	r3, [r3, #0]
   d857e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8580:	9301      	str	r3, [sp, #4]
   d8582:	bd08      	pop	{r3, pc}
   d8584:	00030220 	.word	0x00030220

000d8588 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8588:	b508      	push	{r3, lr}
   d858a:	4b03      	ldr	r3, [pc, #12]	; (d8598 <system_ctrl_set_app_request_handler+0x10>)
   d858c:	681b      	ldr	r3, [r3, #0]
   d858e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8592:	9301      	str	r3, [sp, #4]
   d8594:	bd08      	pop	{r3, pc}
   d8596:	0000      	.short	0x0000
   d8598:	00030220 	.word	0x00030220

000d859c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d859c:	b508      	push	{r3, lr}
   d859e:	4b03      	ldr	r3, [pc, #12]	; (d85ac <system_ctrl_set_result+0x10>)
   d85a0:	681b      	ldr	r3, [r3, #0]
   d85a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d85a6:	9301      	str	r3, [sp, #4]
   d85a8:	bd08      	pop	{r3, pc}
   d85aa:	0000      	.short	0x0000
   d85ac:	00030220 	.word	0x00030220

000d85b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d85b0:	b508      	push	{r3, lr}
   d85b2:	4b02      	ldr	r3, [pc, #8]	; (d85bc <network_connect+0xc>)
   d85b4:	681b      	ldr	r3, [r3, #0]
   d85b6:	685b      	ldr	r3, [r3, #4]
   d85b8:	9301      	str	r3, [sp, #4]
   d85ba:	bd08      	pop	{r3, pc}
   d85bc:	00030240 	.word	0x00030240

000d85c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d85c0:	b508      	push	{r3, lr}
   d85c2:	4b02      	ldr	r3, [pc, #8]	; (d85cc <network_connecting+0xc>)
   d85c4:	681b      	ldr	r3, [r3, #0]
   d85c6:	689b      	ldr	r3, [r3, #8]
   d85c8:	9301      	str	r3, [sp, #4]
   d85ca:	bd08      	pop	{r3, pc}
   d85cc:	00030240 	.word	0x00030240

000d85d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d85d0:	b508      	push	{r3, lr}
   d85d2:	4b02      	ldr	r3, [pc, #8]	; (d85dc <network_disconnect+0xc>)
   d85d4:	681b      	ldr	r3, [r3, #0]
   d85d6:	68db      	ldr	r3, [r3, #12]
   d85d8:	9301      	str	r3, [sp, #4]
   d85da:	bd08      	pop	{r3, pc}
   d85dc:	00030240 	.word	0x00030240

000d85e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d85e0:	b508      	push	{r3, lr}
   d85e2:	4b02      	ldr	r3, [pc, #8]	; (d85ec <network_ready+0xc>)
   d85e4:	681b      	ldr	r3, [r3, #0]
   d85e6:	691b      	ldr	r3, [r3, #16]
   d85e8:	9301      	str	r3, [sp, #4]
   d85ea:	bd08      	pop	{r3, pc}
   d85ec:	00030240 	.word	0x00030240

000d85f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d85f0:	b508      	push	{r3, lr}
   d85f2:	4b02      	ldr	r3, [pc, #8]	; (d85fc <network_on+0xc>)
   d85f4:	681b      	ldr	r3, [r3, #0]
   d85f6:	695b      	ldr	r3, [r3, #20]
   d85f8:	9301      	str	r3, [sp, #4]
   d85fa:	bd08      	pop	{r3, pc}
   d85fc:	00030240 	.word	0x00030240

000d8600 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8600:	b508      	push	{r3, lr}
   d8602:	4b02      	ldr	r3, [pc, #8]	; (d860c <network_off+0xc>)
   d8604:	681b      	ldr	r3, [r3, #0]
   d8606:	699b      	ldr	r3, [r3, #24]
   d8608:	9301      	str	r3, [sp, #4]
   d860a:	bd08      	pop	{r3, pc}
   d860c:	00030240 	.word	0x00030240

000d8610 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8610:	b508      	push	{r3, lr}
   d8612:	4b02      	ldr	r3, [pc, #8]	; (d861c <network_listen+0xc>)
   d8614:	681b      	ldr	r3, [r3, #0]
   d8616:	69db      	ldr	r3, [r3, #28]
   d8618:	9301      	str	r3, [sp, #4]
   d861a:	bd08      	pop	{r3, pc}
   d861c:	00030240 	.word	0x00030240

000d8620 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8620:	b508      	push	{r3, lr}
   d8622:	4b02      	ldr	r3, [pc, #8]	; (d862c <network_listening+0xc>)
   d8624:	681b      	ldr	r3, [r3, #0]
   d8626:	6a1b      	ldr	r3, [r3, #32]
   d8628:	9301      	str	r3, [sp, #4]
   d862a:	bd08      	pop	{r3, pc}
   d862c:	00030240 	.word	0x00030240

000d8630 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8630:	b508      	push	{r3, lr}
   d8632:	4b02      	ldr	r3, [pc, #8]	; (d863c <network_set_listen_timeout+0xc>)
   d8634:	681b      	ldr	r3, [r3, #0]
   d8636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8638:	9301      	str	r3, [sp, #4]
   d863a:	bd08      	pop	{r3, pc}
   d863c:	00030240 	.word	0x00030240

000d8640 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8640:	b508      	push	{r3, lr}
   d8642:	4b02      	ldr	r3, [pc, #8]	; (d864c <network_get_listen_timeout+0xc>)
   d8644:	681b      	ldr	r3, [r3, #0]
   d8646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8648:	9301      	str	r3, [sp, #4]
   d864a:	bd08      	pop	{r3, pc}
   d864c:	00030240 	.word	0x00030240

000d8650 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d8650:	b508      	push	{r3, lr}
   d8652:	4b02      	ldr	r3, [pc, #8]	; (d865c <network_is_on+0xc>)
   d8654:	681b      	ldr	r3, [r3, #0]
   d8656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8658:	9301      	str	r3, [sp, #4]
   d865a:	bd08      	pop	{r3, pc}
   d865c:	00030240 	.word	0x00030240

000d8660 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d8660:	b508      	push	{r3, lr}
   d8662:	4b02      	ldr	r3, [pc, #8]	; (d866c <network_is_off+0xc>)
   d8664:	681b      	ldr	r3, [r3, #0]
   d8666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8668:	9301      	str	r3, [sp, #4]
   d866a:	bd08      	pop	{r3, pc}
   d866c:	00030240 	.word	0x00030240

000d8670 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8670:	b508      	push	{r3, lr}
   d8672:	4b02      	ldr	r3, [pc, #8]	; (d867c <spark_process+0xc>)
   d8674:	681b      	ldr	r3, [r3, #0]
   d8676:	689b      	ldr	r3, [r3, #8]
   d8678:	9301      	str	r3, [sp, #4]
   d867a:	bd08      	pop	{r3, pc}
   d867c:	00030244 	.word	0x00030244

000d8680 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8680:	b508      	push	{r3, lr}
   d8682:	4b02      	ldr	r3, [pc, #8]	; (d868c <spark_cloud_flag_connected+0xc>)
   d8684:	681b      	ldr	r3, [r3, #0]
   d8686:	695b      	ldr	r3, [r3, #20]
   d8688:	9301      	str	r3, [sp, #4]
   d868a:	bd08      	pop	{r3, pc}
   d868c:	00030244 	.word	0x00030244

000d8690 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d8690:	b508      	push	{r3, lr}
   d8692:	4b02      	ldr	r3, [pc, #8]	; (d869c <spark_send_event+0xc>)
   d8694:	681b      	ldr	r3, [r3, #0]
   d8696:	6a1b      	ldr	r3, [r3, #32]
   d8698:	9301      	str	r3, [sp, #4]
   d869a:	bd08      	pop	{r3, pc}
   d869c:	00030244 	.word	0x00030244

000d86a0 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d86a0:	b508      	push	{r3, lr}
   d86a2:	4b02      	ldr	r3, [pc, #8]	; (d86ac <spark_sync_time_pending+0xc>)
   d86a4:	681b      	ldr	r3, [r3, #0]
   d86a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d86a8:	9301      	str	r3, [sp, #4]
   d86aa:	bd08      	pop	{r3, pc}
   d86ac:	00030244 	.word	0x00030244

000d86b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d86b0:	b508      	push	{r3, lr}
   d86b2:	4b02      	ldr	r3, [pc, #8]	; (d86bc <spark_set_random_seed_from_cloud_handler+0xc>)
   d86b4:	681b      	ldr	r3, [r3, #0]
   d86b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d86b8:	9301      	str	r3, [sp, #4]
   d86ba:	bd08      	pop	{r3, pc}
   d86bc:	00030244 	.word	0x00030244

000d86c0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d86c0:	b508      	push	{r3, lr}
   d86c2:	4b02      	ldr	r3, [pc, #8]	; (d86cc <malloc+0xc>)
   d86c4:	681b      	ldr	r3, [r3, #0]
   d86c6:	681b      	ldr	r3, [r3, #0]
   d86c8:	9301      	str	r3, [sp, #4]
   d86ca:	bd08      	pop	{r3, pc}
   d86cc:	0003021c 	.word	0x0003021c

000d86d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d86d0:	b508      	push	{r3, lr}
   d86d2:	4b02      	ldr	r3, [pc, #8]	; (d86dc <free+0xc>)
   d86d4:	681b      	ldr	r3, [r3, #0]
   d86d6:	685b      	ldr	r3, [r3, #4]
   d86d8:	9301      	str	r3, [sp, #4]
   d86da:	bd08      	pop	{r3, pc}
   d86dc:	0003021c 	.word	0x0003021c

000d86e0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d86e0:	b508      	push	{r3, lr}
   d86e2:	4b02      	ldr	r3, [pc, #8]	; (d86ec <realloc+0xc>)
   d86e4:	681b      	ldr	r3, [r3, #0]
   d86e6:	689b      	ldr	r3, [r3, #8]
   d86e8:	9301      	str	r3, [sp, #4]
   d86ea:	bd08      	pop	{r3, pc}
   d86ec:	0003021c 	.word	0x0003021c

000d86f0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d86f0:	b508      	push	{r3, lr}
   d86f2:	4b02      	ldr	r3, [pc, #8]	; (d86fc <vsnprintf+0xc>)
   d86f4:	681b      	ldr	r3, [r3, #0]
   d86f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d86f8:	9301      	str	r3, [sp, #4]
   d86fa:	bd08      	pop	{r3, pc}
   d86fc:	0003021c 	.word	0x0003021c

000d8700 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d8700:	b508      	push	{r3, lr}
   d8702:	4b02      	ldr	r3, [pc, #8]	; (d870c <abort+0xc>)
   d8704:	681b      	ldr	r3, [r3, #0]
   d8706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8708:	9301      	str	r3, [sp, #4]
   d870a:	bd08      	pop	{r3, pc}
   d870c:	0003021c 	.word	0x0003021c

000d8710 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8710:	b508      	push	{r3, lr}
   d8712:	4b02      	ldr	r3, [pc, #8]	; (d871c <_malloc_r+0xc>)
   d8714:	681b      	ldr	r3, [r3, #0]
   d8716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8718:	9301      	str	r3, [sp, #4]
   d871a:	bd08      	pop	{r3, pc}
   d871c:	0003021c 	.word	0x0003021c

000d8720 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d8720:	b508      	push	{r3, lr}
   d8722:	4b02      	ldr	r3, [pc, #8]	; (d872c <__errno+0xc>)
   d8724:	681b      	ldr	r3, [r3, #0]
   d8726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8728:	9301      	str	r3, [sp, #4]
   d872a:	bd08      	pop	{r3, pc}
   d872c:	0003021c 	.word	0x0003021c

000d8730 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d8730:	b508      	push	{r3, lr}
   d8732:	4b02      	ldr	r3, [pc, #8]	; (d873c <newlib_impure_ptr_callback+0xc>)
   d8734:	681b      	ldr	r3, [r3, #0]
   d8736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8738:	9301      	str	r3, [sp, #4]
   d873a:	bd08      	pop	{r3, pc}
   d873c:	0003021c 	.word	0x0003021c

000d8740 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8740:	2200      	movs	r2, #0
   d8742:	6840      	ldr	r0, [r0, #4]
   d8744:	4611      	mov	r1, r2
   d8746:	f7ff bf6b 	b.w	d8620 <network_listening>

000d874a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d874a:	2200      	movs	r2, #0
   d874c:	6840      	ldr	r0, [r0, #4]
   d874e:	4611      	mov	r1, r2
   d8750:	f7ff bf76 	b.w	d8640 <network_get_listen_timeout>

000d8754 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8754:	6840      	ldr	r0, [r0, #4]
   d8756:	2200      	movs	r2, #0
   d8758:	f7ff bf6a 	b.w	d8630 <network_set_listen_timeout>

000d875c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d875c:	6840      	ldr	r0, [r0, #4]
   d875e:	2200      	movs	r2, #0
   d8760:	f081 0101 	eor.w	r1, r1, #1
   d8764:	f7ff bf54 	b.w	d8610 <network_listen>

000d8768 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8768:	2300      	movs	r3, #0
   d876a:	6840      	ldr	r0, [r0, #4]
   d876c:	461a      	mov	r2, r3
   d876e:	4619      	mov	r1, r3
   d8770:	f7ff bf46 	b.w	d8600 <network_off>

000d8774 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8774:	2300      	movs	r3, #0
   d8776:	6840      	ldr	r0, [r0, #4]
   d8778:	461a      	mov	r2, r3
   d877a:	4619      	mov	r1, r3
   d877c:	f7ff bf38 	b.w	d85f0 <network_on>

000d8780 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8780:	2200      	movs	r2, #0
   d8782:	6840      	ldr	r0, [r0, #4]
   d8784:	4611      	mov	r1, r2
   d8786:	f7ff bf2b 	b.w	d85e0 <network_ready>

000d878a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d878a:	2200      	movs	r2, #0
   d878c:	6840      	ldr	r0, [r0, #4]
   d878e:	4611      	mov	r1, r2
   d8790:	f7ff bf16 	b.w	d85c0 <network_connecting>

000d8794 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8794:	6840      	ldr	r0, [r0, #4]
   d8796:	2200      	movs	r2, #0
   d8798:	2102      	movs	r1, #2
   d879a:	f7ff bf19 	b.w	d85d0 <network_disconnect>

000d879e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d879e:	2300      	movs	r3, #0
   d87a0:	6840      	ldr	r0, [r0, #4]
   d87a2:	461a      	mov	r2, r3
   d87a4:	f7ff bf04 	b.w	d85b0 <network_connect>

000d87a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d87a8:	4b02      	ldr	r3, [pc, #8]	; (d87b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d87aa:	2203      	movs	r2, #3
   d87ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d87ae:	4a02      	ldr	r2, [pc, #8]	; (d87b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d87b0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d87b2:	4770      	bx	lr
   d87b4:	2003e584 	.word	0x2003e584
   d87b8:	000de9e8 	.word	0x000de9e8

000d87bc <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d87bc:	2100      	movs	r1, #0
   d87be:	f7ff be5b 	b.w	d8478 <hal_spi_acquire>

000d87c2 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d87c2:	2100      	movs	r1, #0
   d87c4:	f7ff be60 	b.w	d8488 <hal_spi_release>

000d87c8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d87c8:	b510      	push	{r4, lr}
   d87ca:	4604      	mov	r4, r0
   d87cc:	4608      	mov	r0, r1
{
    _spi = spi;
   d87ce:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d87d0:	f7ff fe22 	bl	d8418 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d87d4:	2300      	movs	r3, #0
   d87d6:	6063      	str	r3, [r4, #4]
}
   d87d8:	4620      	mov	r0, r4
   d87da:	bd10      	pop	{r4, pc}

000d87dc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d87dc:	b510      	push	{r4, lr}
   d87de:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d87e0:	7800      	ldrb	r0, [r0, #0]
   d87e2:	f7ff ffeb 	bl	d87bc <_ZN8SPIClass4lockEv.isra.0>
   d87e6:	b948      	cbnz	r0, d87fc <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d87e8:	7820      	ldrb	r0, [r4, #0]
   d87ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d87ee:	f7ff fe03 	bl	d83f8 <hal_spi_begin>
        unlock();
   d87f2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d87f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d87f8:	f7ff bfe3 	b.w	d87c2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d87fc:	bd10      	pop	{r4, pc}

000d87fe <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d87fe:	7800      	ldrb	r0, [r0, #0]
   d8800:	f7ff bfdf 	b.w	d87c2 <_ZN8SPIClass6unlockEv.isra.0>

000d8804 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d8804:	0840      	lsrs	r0, r0, #1
{
   d8806:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d8808:	6018      	str	r0, [r3, #0]
   d880a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d880c:	6818      	ldr	r0, [r3, #0]
   d880e:	4288      	cmp	r0, r1
   d8810:	b2e5      	uxtb	r5, r4
   d8812:	d906      	bls.n	d8822 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d8814:	3401      	adds	r4, #1
   d8816:	2c08      	cmp	r4, #8
   d8818:	d002      	beq.n	d8820 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d881a:	0840      	lsrs	r0, r0, #1
   d881c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d881e:	e7f5      	b.n	d880c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d8820:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d8822:	4b02      	ldr	r3, [pc, #8]	; (d882c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d8824:	5d5b      	ldrb	r3, [r3, r5]
   d8826:	7013      	strb	r3, [r2, #0]
}
   d8828:	bd30      	pop	{r4, r5, pc}
   d882a:	bf00      	nop
   d882c:	000dea1c 	.word	0x000dea1c

000d8830 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d8830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8834:	4606      	mov	r6, r0
   d8836:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d8838:	7800      	ldrb	r0, [r0, #0]
{
   d883a:	460c      	mov	r4, r1
    CHECK(lock());
   d883c:	f7ff ffbe 	bl	d87bc <_ZN8SPIClass4lockEv.isra.0>
   d8840:	2800      	cmp	r0, #0
   d8842:	db1b      	blt.n	d887c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d8844:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d8846:	2214      	movs	r2, #20
   d8848:	2100      	movs	r1, #0
   d884a:	a809      	add	r0, sp, #36	; 0x24
   d884c:	f004 ffd2 	bl	dd7f4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8850:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d8852:	2200      	movs	r2, #0
   d8854:	a909      	add	r1, sp, #36	; 0x24
   d8856:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d8858:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d885c:	f7ff fdec 	bl	d8438 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d8860:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d8864:	b113      	cbz	r3, d886c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d8866:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d886a:	b155      	cbz	r5, d8882 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d886c:	2700      	movs	r7, #0
   d886e:	46b9      	mov	r9, r7
   d8870:	46b8      	mov	r8, r7
   d8872:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d8874:	7923      	ldrb	r3, [r4, #4]
   d8876:	b15d      	cbz	r5, d8890 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d8878:	b1c3      	cbz	r3, d88ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d887a:	2000      	movs	r0, #0
}
   d887c:	b00f      	add	sp, #60	; 0x3c
   d887e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d8882:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d8886:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d888a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d888e:	e7f1      	b.n	d8874 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d8890:	2b00      	cmp	r3, #0
   d8892:	d135      	bne.n	d8900 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d8894:	68a3      	ldr	r3, [r4, #8]
   d8896:	4543      	cmp	r3, r8
   d8898:	d108      	bne.n	d88ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d889a:	f88d 9020 	strb.w	r9, [sp, #32]
   d889e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d88a2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d88a6:	89a3      	ldrh	r3, [r4, #12]
   d88a8:	429a      	cmp	r2, r3
   d88aa:	d0e6      	beq.n	d887a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d88ac:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d88ae:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d88b0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d88b4:	980a      	ldr	r0, [sp, #40]	; 0x28
   d88b6:	ab04      	add	r3, sp, #16
   d88b8:	f10d 020f 	add.w	r2, sp, #15
   d88bc:	f7ff ffa2 	bl	d8804 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d88c0:	7921      	ldrb	r1, [r4, #4]
   d88c2:	b985      	cbnz	r5, d88e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d88c4:	b989      	cbnz	r1, d88ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d88c6:	68a3      	ldr	r3, [r4, #8]
   d88c8:	4543      	cmp	r3, r8
   d88ca:	d30e      	bcc.n	d88ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d88cc:	f88d 9020 	strb.w	r9, [sp, #32]
   d88d0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d88d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d88d8:	89a3      	ldrh	r3, [r4, #12]
   d88da:	429a      	cmp	r2, r3
   d88dc:	d105      	bne.n	d88ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d88de:	9b04      	ldr	r3, [sp, #16]
   d88e0:	4543      	cmp	r3, r8
   d88e2:	d102      	bne.n	d88ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d88e4:	e7c9      	b.n	d887a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d88e6:	2900      	cmp	r1, #0
   d88e8:	d1f9      	bne.n	d88de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d88ea:	2300      	movs	r3, #0
   d88ec:	9301      	str	r3, [sp, #4]
   d88ee:	7b63      	ldrb	r3, [r4, #13]
   d88f0:	9300      	str	r3, [sp, #0]
   d88f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d88f6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d88f8:	7830      	ldrb	r0, [r6, #0]
   d88fa:	f7ff fdb5 	bl	d8468 <hal_spi_set_settings>
   d88fe:	e7bc      	b.n	d887a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d8900:	e9cd 5500 	strd	r5, r5, [sp]
   d8904:	462b      	mov	r3, r5
   d8906:	462a      	mov	r2, r5
   d8908:	2101      	movs	r1, #1
   d890a:	e7f5      	b.n	d88f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d890c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d890c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d890e:	7800      	ldrb	r0, [r0, #0]
   d8910:	f7ff fd7a 	bl	d8408 <hal_spi_transfer>
}
   d8914:	b2c0      	uxtb	r0, r0
   d8916:	bd08      	pop	{r3, pc}

000d8918 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d8918:	b530      	push	{r4, r5, lr}
   d891a:	b087      	sub	sp, #28
   d891c:	4604      	mov	r4, r0
   d891e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d8920:	9500      	str	r5, [sp, #0]
   d8922:	7800      	ldrb	r0, [r0, #0]
   d8924:	f7ff fd90 	bl	d8448 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d8928:	b93d      	cbnz	r5, d893a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d892a:	7820      	ldrb	r0, [r4, #0]
   d892c:	a902      	add	r1, sp, #8
   d892e:	f7ff fd93 	bl	d8458 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d8932:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d8936:	07db      	lsls	r3, r3, #31
   d8938:	d4f7      	bmi.n	d892a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d893a:	b007      	add	sp, #28
   d893c:	bd30      	pop	{r4, r5, pc}
	...

000d8940 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d8940:	4b05      	ldr	r3, [pc, #20]	; (d8958 <_GLOBAL__sub_I_System+0x18>)
   d8942:	2202      	movs	r2, #2
   d8944:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8946:	4b05      	ldr	r3, [pc, #20]	; (d895c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d8948:	4a05      	ldr	r2, [pc, #20]	; (d8960 <_GLOBAL__sub_I_System+0x20>)
   d894a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d894c:	2000      	movs	r0, #0
   d894e:	6018      	str	r0, [r3, #0]
   d8950:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d8952:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8954:	f7ff bdf0 	b.w	d8538 <set_system_mode>
   d8958:	2003e598 	.word	0x2003e598
   d895c:	2003e58c 	.word	0x2003e58c
   d8960:	ffff0000 	.word	0xffff0000

000d8964 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d8964:	b510      	push	{r4, lr}
   d8966:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d8968:	f004 ff8d 	bl	dd886 <strlen>
   d896c:	3801      	subs	r0, #1
   d896e:	1823      	adds	r3, r4, r0
   d8970:	4620      	mov	r0, r4
	while(i<j){
   d8972:	4283      	cmp	r3, r0
   d8974:	d906      	bls.n	d8984 <_Z11str_reversePc+0x20>
		c = *i;
   d8976:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d8978:	7819      	ldrb	r1, [r3, #0]
   d897a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d897e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d8982:	e7f6      	b.n	d8972 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d8984:	bd10      	pop	{r4, pc}

000d8986 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d8986:	b570      	push	{r4, r5, r6, lr}
   d8988:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d898a:	1e91      	subs	r1, r2, #2
   d898c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d898e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d8990:	d822      	bhi.n	d89d8 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d8992:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d8994:	b16d      	cbz	r5, d89b2 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d8996:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d899a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d899e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d89a0:	2d09      	cmp	r5, #9
                *ptr += '0';
   d89a2:	bf94      	ite	ls
   d89a4:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d89a6:	3157      	addhi	r1, #87	; 0x57
   d89a8:	b2c9      	uxtb	r1, r1
   d89aa:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d89ae:	4635      	mov	r5, r6
	while(a){
   d89b0:	e7f0      	b.n	d8994 <ultoa+0xe>
   d89b2:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d89b4:	4423      	add	r3, r4
            *ptr++ = '0';
   d89b6:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d89b8:	4293      	cmp	r3, r2
   d89ba:	d902      	bls.n	d89c2 <ultoa+0x3c>
            *ptr++ = '0';
   d89bc:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d89c0:	e7fa      	b.n	d89b8 <ultoa+0x32>
   d89c2:	1a1a      	subs	r2, r3, r0
   d89c4:	4283      	cmp	r3, r0
   d89c6:	bf38      	it	cc
   d89c8:	2200      	movcc	r2, #0

	*ptr = '\0';
   d89ca:	2300      	movs	r3, #0
   d89cc:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d89ce:	4620      	mov	r0, r4
   d89d0:	f7ff ffc8 	bl	d8964 <_Z11str_reversePc>
	return buffer;
   d89d4:	4620      	mov	r0, r4
}
   d89d6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d89d8:	2000      	movs	r0, #0
   d89da:	e7fc      	b.n	d89d6 <ultoa+0x50>

000d89dc <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d89dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d89e0:	ec57 6b10 	vmov	r6, r7, d0
   d89e4:	4680      	mov	r8, r0
   d89e6:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d89e8:	ee10 0a10 	vmov	r0, s0
   d89ec:	2200      	movs	r2, #0
   d89ee:	2300      	movs	r3, #0
   d89f0:	4639      	mov	r1, r7
   d89f2:	f004 fb1d 	bl	dd030 <__aeabi_dcmplt>
   d89f6:	b128      	cbz	r0, d8a04 <_Z4dtoadhPc+0x28>
        val = -val;
   d89f8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d89fc:	461f      	mov	r7, r3
        *sout++ = '-';
   d89fe:	232d      	movs	r3, #45	; 0x2d
   d8a00:	f804 3b01 	strb.w	r3, [r4], #1
   d8a04:	2300      	movs	r3, #0
    }
    long scale = 1;
   d8a06:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d8a0a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d8a0c:	b2d9      	uxtb	r1, r3
   d8a0e:	4588      	cmp	r8, r1
   d8a10:	d903      	bls.n	d8a1a <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d8a12:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d8a16:	3301      	adds	r3, #1
   d8a18:	e7f8      	b.n	d8a0c <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d8a1a:	4648      	mov	r0, r9
   d8a1c:	f004 f82c 	bl	dca78 <__aeabi_i2d>
   d8a20:	4632      	mov	r2, r6
   d8a22:	463b      	mov	r3, r7
   d8a24:	f004 f892 	bl	dcb4c <__aeabi_dmul>
   d8a28:	4606      	mov	r6, r0
   d8a2a:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d8a2c:	f004 fd4c 	bl	dd4c8 <__aeabi_d2ulz>
   d8a30:	4605      	mov	r5, r0
   d8a32:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d8a34:	f004 f854 	bl	dcae0 <__aeabi_ul2d>
   d8a38:	4602      	mov	r2, r0
   d8a3a:	460b      	mov	r3, r1
   d8a3c:	4630      	mov	r0, r6
   d8a3e:	4639      	mov	r1, r7
   d8a40:	f003 fecc 	bl	dc7dc <__aeabi_dsub>
   d8a44:	4b13      	ldr	r3, [pc, #76]	; (d8a94 <_Z4dtoadhPc+0xb8>)
   d8a46:	2200      	movs	r2, #0
   d8a48:	f004 fb06 	bl	dd058 <__aeabi_dcmpge>
   d8a4c:	b110      	cbz	r0, d8a54 <_Z4dtoadhPc+0x78>
        fixed++;
   d8a4e:	3501      	adds	r5, #1
   d8a50:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d8a54:	464a      	mov	r2, r9
   d8a56:	4628      	mov	r0, r5
   d8a58:	17d3      	asrs	r3, r2, #31
   d8a5a:	4651      	mov	r1, sl
   d8a5c:	f004 fd1c 	bl	dd498 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d8a60:	2301      	movs	r3, #1
   d8a62:	4615      	mov	r5, r2
   d8a64:	4621      	mov	r1, r4
   d8a66:	220a      	movs	r2, #10
   d8a68:	f7ff ff8d 	bl	d8986 <ultoa>
    if (prec) {
   d8a6c:	f1b8 0f00 	cmp.w	r8, #0
   d8a70:	d00d      	beq.n	d8a8e <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d8a72:	4620      	mov	r0, r4
   d8a74:	f004 ff07 	bl	dd886 <strlen>
        *sout++ = '.';
   d8a78:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d8a7a:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d8a7c:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d8a7e:	220a      	movs	r2, #10
   d8a80:	4643      	mov	r3, r8
   d8a82:	4628      	mov	r0, r5
   d8a84:	3101      	adds	r1, #1
    }
}
   d8a86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d8a8a:	f7ff bf7c 	b.w	d8986 <ultoa>
}
   d8a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8a92:	bf00      	nop
   d8a94:	3fe00000 	.word	0x3fe00000

000d8a98 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8a98:	b510      	push	{r4, lr}
   d8a9a:	4604      	mov	r4, r0
{
	free(buffer);
   d8a9c:	6800      	ldr	r0, [r0, #0]
   d8a9e:	f7ff fe17 	bl	d86d0 <free>
}
   d8aa2:	4620      	mov	r0, r4
   d8aa4:	bd10      	pop	{r4, pc}

000d8aa6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8aa6:	b510      	push	{r4, lr}
   d8aa8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8aaa:	6800      	ldr	r0, [r0, #0]
   d8aac:	b108      	cbz	r0, d8ab2 <_ZN6String10invalidateEv+0xc>
   d8aae:	f7ff fe0f 	bl	d86d0 <free>
	buffer = NULL;
   d8ab2:	2300      	movs	r3, #0
	capacity = len = 0;
   d8ab4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d8ab8:	6023      	str	r3, [r4, #0]
}
   d8aba:	bd10      	pop	{r4, pc}

000d8abc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8abc:	b538      	push	{r3, r4, r5, lr}
   d8abe:	4604      	mov	r4, r0
   d8ac0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8ac2:	6800      	ldr	r0, [r0, #0]
   d8ac4:	3101      	adds	r1, #1
   d8ac6:	f7ff fe0b 	bl	d86e0 <realloc>
	if (newbuffer) {
   d8aca:	b110      	cbz	r0, d8ad2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8acc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d8ad0:	2001      	movs	r0, #1
	}
	return 0;
}
   d8ad2:	bd38      	pop	{r3, r4, r5, pc}

000d8ad4 <_ZN6String7reserveEj>:
{
   d8ad4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8ad6:	6803      	ldr	r3, [r0, #0]
{
   d8ad8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8ada:	b123      	cbz	r3, d8ae6 <_ZN6String7reserveEj+0x12>
   d8adc:	6843      	ldr	r3, [r0, #4]
   d8ade:	428b      	cmp	r3, r1
   d8ae0:	d301      	bcc.n	d8ae6 <_ZN6String7reserveEj+0x12>
   d8ae2:	2001      	movs	r0, #1
}
   d8ae4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d8ae6:	4620      	mov	r0, r4
   d8ae8:	f7ff ffe8 	bl	d8abc <_ZN6String12changeBufferEj>
   d8aec:	2800      	cmp	r0, #0
   d8aee:	d0f9      	beq.n	d8ae4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d8af0:	68a3      	ldr	r3, [r4, #8]
   d8af2:	2b00      	cmp	r3, #0
   d8af4:	d1f5      	bne.n	d8ae2 <_ZN6String7reserveEj+0xe>
   d8af6:	6822      	ldr	r2, [r4, #0]
   d8af8:	7013      	strb	r3, [r2, #0]
   d8afa:	e7f2      	b.n	d8ae2 <_ZN6String7reserveEj+0xe>

000d8afc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8afe:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d8b00:	4611      	mov	r1, r2
   d8b02:	9201      	str	r2, [sp, #4]
{
   d8b04:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d8b06:	f7ff ffe5 	bl	d8ad4 <_ZN6String7reserveEj>
   d8b0a:	9a01      	ldr	r2, [sp, #4]
   d8b0c:	b928      	cbnz	r0, d8b1a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d8b0e:	4620      	mov	r0, r4
   d8b10:	f7ff ffc9 	bl	d8aa6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8b14:	4620      	mov	r0, r4
   d8b16:	b003      	add	sp, #12
   d8b18:	bd30      	pop	{r4, r5, pc}
	len = length;
   d8b1a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d8b1c:	4629      	mov	r1, r5
   d8b1e:	6820      	ldr	r0, [r4, #0]
   d8b20:	f004 fe5a 	bl	dd7d8 <memcpy>
	buffer[len] = 0;
   d8b24:	6822      	ldr	r2, [r4, #0]
   d8b26:	68a3      	ldr	r3, [r4, #8]
   d8b28:	2100      	movs	r1, #0
   d8b2a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d8b2c:	e7f2      	b.n	d8b14 <_ZN6String4copyEPKcj+0x18>

000d8b2e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8b2e:	b513      	push	{r0, r1, r4, lr}
   d8b30:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d8b32:	b159      	cbz	r1, d8b4c <_ZN6StringaSEPKc+0x1e>
   d8b34:	4608      	mov	r0, r1
   d8b36:	9101      	str	r1, [sp, #4]
   d8b38:	f004 fea5 	bl	dd886 <strlen>
   d8b3c:	9901      	ldr	r1, [sp, #4]
   d8b3e:	4602      	mov	r2, r0
   d8b40:	4620      	mov	r0, r4
   d8b42:	f7ff ffdb 	bl	d8afc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d8b46:	4620      	mov	r0, r4
   d8b48:	b002      	add	sp, #8
   d8b4a:	bd10      	pop	{r4, pc}
	else invalidate();
   d8b4c:	f7ff ffab 	bl	d8aa6 <_ZN6String10invalidateEv>
   d8b50:	e7f9      	b.n	d8b46 <_ZN6StringaSEPKc+0x18>

000d8b52 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d8b52:	b510      	push	{r4, lr}
   d8b54:	4604      	mov	r4, r0
   d8b56:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d8b58:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d8b5a:	4608      	mov	r0, r1
	capacity = 0;
   d8b5c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d8b60:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d8b62:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d8b64:	a901      	add	r1, sp, #4
   d8b66:	b2c0      	uxtb	r0, r0
   d8b68:	f7ff ff38 	bl	d89dc <_Z4dtoadhPc>
        *this = buf;
   d8b6c:	a901      	add	r1, sp, #4
   d8b6e:	4620      	mov	r0, r4
   d8b70:	f7ff ffdd 	bl	d8b2e <_ZN6StringaSEPKc>
}
   d8b74:	4620      	mov	r0, r4
   d8b76:	b00a      	add	sp, #40	; 0x28
   d8b78:	bd10      	pop	{r4, pc}

000d8b7a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8b7a:	b510      	push	{r4, lr}
          _M_dispose();
   d8b7c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8b7e:	4604      	mov	r4, r0
          _M_dispose();
   d8b80:	689b      	ldr	r3, [r3, #8]
   d8b82:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8b84:	68a3      	ldr	r3, [r4, #8]
   d8b86:	3b01      	subs	r3, #1
   d8b88:	60a3      	str	r3, [r4, #8]
   d8b8a:	b92b      	cbnz	r3, d8b98 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d8b8c:	6823      	ldr	r3, [r4, #0]
   d8b8e:	4620      	mov	r0, r4
   d8b90:	68db      	ldr	r3, [r3, #12]
    }
   d8b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d8b96:	4718      	bx	r3
    }
   d8b98:	bd10      	pop	{r4, pc}

000d8b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d8b9a:	680b      	ldr	r3, [r1, #0]
   d8b9c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d8b9e:	b113      	cbz	r3, d8ba6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d8ba0:	685a      	ldr	r2, [r3, #4]
   d8ba2:	3201      	adds	r2, #1
   d8ba4:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d8ba6:	4770      	bx	lr

000d8ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d8ba8:	b510      	push	{r4, lr}
   d8baa:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d8bac:	6800      	ldr	r0, [r0, #0]
   d8bae:	b128      	cbz	r0, d8bbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d8bb0:	6843      	ldr	r3, [r0, #4]
   d8bb2:	3b01      	subs	r3, #1
   d8bb4:	6043      	str	r3, [r0, #4]
   d8bb6:	b90b      	cbnz	r3, d8bbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d8bb8:	f7ff ffdf 	bl	d8b7a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d8bbc:	4620      	mov	r0, r4
   d8bbe:	bd10      	pop	{r4, pc}

000d8bc0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8bc0:	4802      	ldr	r0, [pc, #8]	; (d8bcc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d8bc2:	2300      	movs	r3, #0
   d8bc4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d8bc6:	f7ff bb67 	b.w	d8298 <os_mutex_recursive_create>
   d8bca:	bf00      	nop
   d8bcc:	2003e59c 	.word	0x2003e59c

000d8bd0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8bd2:	4606      	mov	r6, r0
   d8bd4:	460d      	mov	r5, r1
  size_t n = 0;
   d8bd6:	188f      	adds	r7, r1, r2
   d8bd8:	2400      	movs	r4, #0
  while (size--) {
   d8bda:	42bd      	cmp	r5, r7
   d8bdc:	d00c      	beq.n	d8bf8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8bde:	6833      	ldr	r3, [r6, #0]
   d8be0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8be4:	689b      	ldr	r3, [r3, #8]
   d8be6:	4630      	mov	r0, r6
   d8be8:	4798      	blx	r3
     if (chunk>=0)
   d8bea:	1e03      	subs	r3, r0, #0
   d8bec:	db01      	blt.n	d8bf2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8bee:	441c      	add	r4, r3
  while (size--) {
   d8bf0:	e7f3      	b.n	d8bda <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8bf2:	2c00      	cmp	r4, #0
   d8bf4:	bf08      	it	eq
   d8bf6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d8bf8:	4620      	mov	r0, r4
   d8bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8bfc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d8bfc:	b513      	push	{r0, r1, r4, lr}
   d8bfe:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d8c00:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d8c02:	b159      	cbz	r1, d8c1c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d8c04:	9101      	str	r1, [sp, #4]
   d8c06:	f004 fe3e 	bl	dd886 <strlen>
   d8c0a:	6823      	ldr	r3, [r4, #0]
   d8c0c:	9901      	ldr	r1, [sp, #4]
   d8c0e:	68db      	ldr	r3, [r3, #12]
   d8c10:	4602      	mov	r2, r0
   d8c12:	4620      	mov	r0, r4
    }
   d8c14:	b002      	add	sp, #8
   d8c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d8c1a:	4718      	bx	r3
    }
   d8c1c:	b002      	add	sp, #8
   d8c1e:	bd10      	pop	{r4, pc}

000d8c20 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d8c20:	b508      	push	{r3, lr}
  return write(str);
   d8c22:	f7ff ffeb 	bl	d8bfc <_ZN5Print5writeEPKc>
}
   d8c26:	bd08      	pop	{r3, pc}

000d8c28 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d8c28:	6803      	ldr	r3, [r0, #0]
   d8c2a:	689b      	ldr	r3, [r3, #8]
   d8c2c:	4718      	bx	r3

000d8c2e <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d8c2e:	b508      	push	{r3, lr}
  return write(str);
   d8c30:	f7ff ffe4 	bl	d8bfc <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   d8c34:	bd08      	pop	{r3, pc}

000d8c36 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d8c36:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8c38:	210d      	movs	r1, #13
{
   d8c3a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8c3c:	f7ff fff4 	bl	d8c28 <_ZN5Print5printEc>
  n += print('\n');
   d8c40:	210a      	movs	r1, #10
  size_t n = print('\r');
   d8c42:	4604      	mov	r4, r0
  n += print('\n');
   d8c44:	4628      	mov	r0, r5
   d8c46:	f7ff ffef 	bl	d8c28 <_ZN5Print5printEc>
  return n;
}
   d8c4a:	4420      	add	r0, r4
   d8c4c:	bd38      	pop	{r3, r4, r5, pc}

000d8c4e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8c4e:	b538      	push	{r3, r4, r5, lr}
   d8c50:	4605      	mov	r5, r0
  return write(str);
   d8c52:	f7ff ffd3 	bl	d8bfc <_ZN5Print5writeEPKc>
   d8c56:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d8c58:	4628      	mov	r0, r5
   d8c5a:	f7ff ffec 	bl	d8c36 <_ZN5Print7printlnEv>
  return n;
}
   d8c5e:	4420      	add	r0, r4
   d8c60:	bd38      	pop	{r3, r4, r5, pc}

000d8c62 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d8c62:	f7ff bff4 	b.w	d8c4e <_ZN5Print7printlnEPKc>

000d8c66 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8c66:	b530      	push	{r4, r5, lr}
   d8c68:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8c6a:	2300      	movs	r3, #0
   d8c6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8c70:	2a01      	cmp	r2, #1
   d8c72:	bf98      	it	ls
   d8c74:	220a      	movls	r2, #10
   d8c76:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d8c78:	460d      	mov	r5, r1
   d8c7a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d8c7e:	fb01 5312 	mls	r3, r1, r2, r5
   d8c82:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8c86:	2b09      	cmp	r3, #9
   d8c88:	bf94      	ite	ls
   d8c8a:	3330      	addls	r3, #48	; 0x30
   d8c8c:	3337      	addhi	r3, #55	; 0x37
   d8c8e:	b2db      	uxtb	r3, r3
  } while(n);
   d8c90:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8c92:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d8c96:	d9ef      	bls.n	d8c78 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d8c98:	4621      	mov	r1, r4
   d8c9a:	f7ff ffaf 	bl	d8bfc <_ZN5Print5writeEPKc>
}
   d8c9e:	b00b      	add	sp, #44	; 0x2c
   d8ca0:	bd30      	pop	{r4, r5, pc}

000d8ca2 <_ZN5Print11printNumberEyh>:
 
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d8ca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8ca6:	b093      	sub	sp, #76	; 0x4c
   d8ca8:	4619      	mov	r1, r3
   d8caa:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8cae:	2d01      	cmp	r5, #1
  *str = '\0';
   d8cb0:	f04f 0300 	mov.w	r3, #0
  if (base < 2) base = 10;
   d8cb4:	bf98      	it	ls
   d8cb6:	250a      	movls	r5, #10
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d8cb8:	4682      	mov	sl, r0
  *str = '\0';
   d8cba:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d8cbe:	4610      	mov	r0, r2
  if (base < 2) base = 10;
   d8cc0:	f10d 0b44 	add.w	fp, sp, #68	; 0x44

  do {
    decltype(n) m = n;
    n /= base;
   d8cc4:	fa5f f885 	uxtb.w	r8, r5
   d8cc8:	f04f 0900 	mov.w	r9, #0
   d8ccc:	4642      	mov	r2, r8
   d8cce:	464b      	mov	r3, r9
   d8cd0:	4606      	mov	r6, r0
   d8cd2:	460f      	mov	r7, r1
   d8cd4:	f004 fbe0 	bl	dd498 <__aeabi_uldivmod>
    char c = m - base * n;
   d8cd8:	fb05 6410 	mls	r4, r5, r0, r6
   d8cdc:	f004 04ff 	and.w	r4, r4, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8ce0:	2c09      	cmp	r4, #9
   d8ce2:	bf94      	ite	ls
   d8ce4:	3430      	addls	r4, #48	; 0x30
   d8ce6:	3437      	addhi	r4, #55	; 0x37
  } while(n);
   d8ce8:	454f      	cmp	r7, r9
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8cea:	b2e4      	uxtb	r4, r4
  } while(n);
   d8cec:	bf08      	it	eq
   d8cee:	4546      	cmpeq	r6, r8
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8cf0:	f80b 4d01 	strb.w	r4, [fp, #-1]!
  } while(n);
   d8cf4:	d2ea      	bcs.n	d8ccc <_ZN5Print11printNumberEyh+0x2a>

  return write(str);
   d8cf6:	4659      	mov	r1, fp
   d8cf8:	4650      	mov	r0, sl
   d8cfa:	f7ff ff7f 	bl	d8bfc <_ZN5Print5writeEPKc>
}
   d8cfe:	b013      	add	sp, #76	; 0x4c
   d8d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8d04 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
   d8d04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8d08:	ec55 4b10 	vmov	r4, r5, d0
   d8d0c:	4606      	mov	r6, r0
   d8d0e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d8d10:	ee10 2a10 	vmov	r2, s0
   d8d14:	ee10 0a10 	vmov	r0, s0
   d8d18:	462b      	mov	r3, r5
   d8d1a:	4629      	mov	r1, r5
   d8d1c:	f004 f9b0 	bl	dd080 <__aeabi_dcmpun>
   d8d20:	b140      	cbz	r0, d8d34 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d8d22:	4953      	ldr	r1, [pc, #332]	; (d8e70 <_ZN5Print10printFloatEdh+0x16c>)
   d8d24:	4630      	mov	r0, r6
   d8d26:	f7ff ff69 	bl	d8bfc <_ZN5Print5writeEPKc>
   d8d2a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d8d2c:	4650      	mov	r0, sl
   d8d2e:	b003      	add	sp, #12
   d8d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d8d34:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d8d38:	4b4e      	ldr	r3, [pc, #312]	; (d8e74 <_ZN5Print10printFloatEdh+0x170>)
   d8d3a:	f04f 32ff 	mov.w	r2, #4294967295
   d8d3e:	4620      	mov	r0, r4
   d8d40:	4649      	mov	r1, r9
   d8d42:	f004 f99d 	bl	dd080 <__aeabi_dcmpun>
   d8d46:	b948      	cbnz	r0, d8d5c <_ZN5Print10printFloatEdh+0x58>
   d8d48:	4b4a      	ldr	r3, [pc, #296]	; (d8e74 <_ZN5Print10printFloatEdh+0x170>)
   d8d4a:	f04f 32ff 	mov.w	r2, #4294967295
   d8d4e:	4620      	mov	r0, r4
   d8d50:	4649      	mov	r1, r9
   d8d52:	f004 f977 	bl	dd044 <__aeabi_dcmple>
   d8d56:	b908      	cbnz	r0, d8d5c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d8d58:	4947      	ldr	r1, [pc, #284]	; (d8e78 <_ZN5Print10printFloatEdh+0x174>)
   d8d5a:	e7e3      	b.n	d8d24 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d8d5c:	4b47      	ldr	r3, [pc, #284]	; (d8e7c <_ZN5Print10printFloatEdh+0x178>)
   d8d5e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8d62:	4620      	mov	r0, r4
   d8d64:	4629      	mov	r1, r5
   d8d66:	f004 f981 	bl	dd06c <__aeabi_dcmpgt>
   d8d6a:	b108      	cbz	r0, d8d70 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d8d6c:	4944      	ldr	r1, [pc, #272]	; (d8e80 <_ZN5Print10printFloatEdh+0x17c>)
   d8d6e:	e7d9      	b.n	d8d24 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d8d70:	4b44      	ldr	r3, [pc, #272]	; (d8e84 <_ZN5Print10printFloatEdh+0x180>)
   d8d72:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8d76:	4620      	mov	r0, r4
   d8d78:	4629      	mov	r1, r5
   d8d7a:	f004 f959 	bl	dd030 <__aeabi_dcmplt>
   d8d7e:	2800      	cmp	r0, #0
   d8d80:	d1f4      	bne.n	d8d6c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d8d82:	2200      	movs	r2, #0
   d8d84:	2300      	movs	r3, #0
   d8d86:	4620      	mov	r0, r4
   d8d88:	4629      	mov	r1, r5
   d8d8a:	f004 f951 	bl	dd030 <__aeabi_dcmplt>
   d8d8e:	b1d0      	cbz	r0, d8dc6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d8d90:	212d      	movs	r1, #45	; 0x2d
   d8d92:	4630      	mov	r0, r6
   d8d94:	f7ff ff48 	bl	d8c28 <_ZN5Print5printEc>
     number = -number;
   d8d98:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d8d9c:	4682      	mov	sl, r0
     number = -number;
   d8d9e:	461d      	mov	r5, r3
  double rounding = 0.5;
   d8da0:	4939      	ldr	r1, [pc, #228]	; (d8e88 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d8da2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d8e90 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d8da6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d8daa:	2000      	movs	r0, #0
    rounding /= 10.0;
   d8dac:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d8db0:	fa5f f38b 	uxtb.w	r3, fp
   d8db4:	429f      	cmp	r7, r3
   d8db6:	d908      	bls.n	d8dca <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d8db8:	4642      	mov	r2, r8
   d8dba:	464b      	mov	r3, r9
   d8dbc:	f003 fff0 	bl	dcda0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d8dc0:	f10b 0b01 	add.w	fp, fp, #1
   d8dc4:	e7f4      	b.n	d8db0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d8dc6:	4682      	mov	sl, r0
   d8dc8:	e7ea      	b.n	d8da0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d8dca:	4622      	mov	r2, r4
   d8dcc:	462b      	mov	r3, r5
   d8dce:	f003 fd07 	bl	dc7e0 <__adddf3>
   d8dd2:	460d      	mov	r5, r1
   d8dd4:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d8dd6:	f004 f991 	bl	dd0fc <__aeabi_d2uiz>
   d8dda:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d8ddc:	f003 fe3c 	bl	dca58 <__aeabi_ui2d>
   d8de0:	4602      	mov	r2, r0
   d8de2:	460b      	mov	r3, r1
   d8de4:	4620      	mov	r0, r4
   d8de6:	4629      	mov	r1, r5
   d8de8:	f003 fcf8 	bl	dc7dc <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8dec:	220a      	movs	r2, #10
   d8dee:	4604      	mov	r4, r0
   d8df0:	460d      	mov	r5, r1
   d8df2:	4630      	mov	r0, r6
   d8df4:	4641      	mov	r1, r8
   d8df6:	f7ff ff36 	bl	d8c66 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d8dfa:	4482      	add	sl, r0
  if (digits > 0) {
   d8dfc:	b127      	cbz	r7, d8e08 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d8dfe:	4923      	ldr	r1, [pc, #140]	; (d8e8c <_ZN5Print10printFloatEdh+0x188>)
   d8e00:	4630      	mov	r0, r6
   d8e02:	f7ff fefb 	bl	d8bfc <_ZN5Print5writeEPKc>
    n += print(".");
   d8e06:	4482      	add	sl, r0
    remainder *= 10.0;
   d8e08:	f8df 9084 	ldr.w	r9, [pc, #132]	; d8e90 <_ZN5Print10printFloatEdh+0x18c>
   d8e0c:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d8e10:	3f01      	subs	r7, #1
   d8e12:	b2ff      	uxtb	r7, r7
   d8e14:	2fff      	cmp	r7, #255	; 0xff
   d8e16:	d089      	beq.n	d8d2c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d8e18:	4642      	mov	r2, r8
   d8e1a:	464b      	mov	r3, r9
   d8e1c:	4620      	mov	r0, r4
   d8e1e:	4629      	mov	r1, r5
   d8e20:	f003 fe94 	bl	dcb4c <__aeabi_dmul>
   d8e24:	4604      	mov	r4, r0
   d8e26:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d8e28:	f004 f940 	bl	dd0ac <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d8e2c:	f1b0 0b00 	subs.w	fp, r0, #0
   d8e30:	da1a      	bge.n	d8e68 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d8e32:	212d      	movs	r1, #45	; 0x2d
   d8e34:	4630      	mov	r0, r6
   d8e36:	f7ff fef7 	bl	d8c28 <_ZN5Print5printEc>
            val = -n;
   d8e3a:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d8e3e:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d8e40:	220a      	movs	r2, #10
   d8e42:	4630      	mov	r0, r6
   d8e44:	9301      	str	r3, [sp, #4]
   d8e46:	f7ff ff0e 	bl	d8c66 <_ZN5Print11printNumberEmh>
   d8e4a:	9b01      	ldr	r3, [sp, #4]
   d8e4c:	4418      	add	r0, r3
    n += print(toPrint);
   d8e4e:	4482      	add	sl, r0
    remainder -= toPrint;
   d8e50:	4658      	mov	r0, fp
   d8e52:	f003 fe11 	bl	dca78 <__aeabi_i2d>
   d8e56:	4602      	mov	r2, r0
   d8e58:	460b      	mov	r3, r1
   d8e5a:	4620      	mov	r0, r4
   d8e5c:	4629      	mov	r1, r5
   d8e5e:	f003 fcbd 	bl	dc7dc <__aeabi_dsub>
   d8e62:	4604      	mov	r4, r0
   d8e64:	460d      	mov	r5, r1
  while (digits-- > 0)
   d8e66:	e7d3      	b.n	d8e10 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d8e68:	4659      	mov	r1, fp
        size_t t = 0;
   d8e6a:	2300      	movs	r3, #0
   d8e6c:	e7e8      	b.n	d8e40 <_ZN5Print10printFloatEdh+0x13c>
   d8e6e:	bf00      	nop
   d8e70:	000dea24 	.word	0x000dea24
   d8e74:	7fefffff 	.word	0x7fefffff
   d8e78:	000dea28 	.word	0x000dea28
   d8e7c:	41efffff 	.word	0x41efffff
   d8e80:	000dea2c 	.word	0x000dea2c
   d8e84:	c1efffff 	.word	0xc1efffff
   d8e88:	3fe00000 	.word	0x3fe00000
   d8e8c:	000de004 	.word	0x000de004
   d8e90:	40240000 	.word	0x40240000

000d8e94 <_ZN5Print5printEfi>:
{
   d8e94:	b538      	push	{r3, r4, r5, lr}
   d8e96:	4604      	mov	r4, r0
   d8e98:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d8e9c:	b2cd      	uxtb	r5, r1
   d8e9e:	f003 fdfd 	bl	dca9c <__aeabi_f2d>
   d8ea2:	ec41 0b10 	vmov	d0, r0, r1
   d8ea6:	4629      	mov	r1, r5
   d8ea8:	4620      	mov	r0, r4
}
   d8eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d8eae:	f7ff bf29 	b.w	d8d04 <_ZN5Print10printFloatEdh>

000d8eb2 <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   d8eb2:	b2c9      	uxtb	r1, r1
   d8eb4:	f7ff bf26 	b.w	d8d04 <_ZN5Print10printFloatEdh>

000d8eb8 <_ZN5Print7printlnEdi>:
{
   d8eb8:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d8eba:	b2c9      	uxtb	r1, r1
{
   d8ebc:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d8ebe:	f7ff ff21 	bl	d8d04 <_ZN5Print10printFloatEdh>
   d8ec2:	4604      	mov	r4, r0
  n += println();
   d8ec4:	4628      	mov	r0, r5
   d8ec6:	f7ff feb6 	bl	d8c36 <_ZN5Print7printlnEv>
}
   d8eca:	4420      	add	r0, r4
   d8ecc:	bd38      	pop	{r3, r4, r5, pc}

000d8ece <_ZN5Print7printlnEfi>:
{
   d8ece:	b538      	push	{r3, r4, r5, lr}
   d8ed0:	4604      	mov	r4, r0
   d8ed2:	ee10 0a10 	vmov	r0, s0
   d8ed6:	460d      	mov	r5, r1
    return println((double)num, digits);
   d8ed8:	f003 fde0 	bl	dca9c <__aeabi_f2d>
   d8edc:	ec41 0b10 	vmov	d0, r0, r1
   d8ee0:	4629      	mov	r1, r5
   d8ee2:	4620      	mov	r0, r4
}
   d8ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d8ee8:	f7ff bfe6 	b.w	d8eb8 <_ZN5Print7printlnEdi>

000d8eec <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d8eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8ef0:	b086      	sub	sp, #24
   d8ef2:	af00      	add	r7, sp, #0
   d8ef4:	4605      	mov	r5, r0
   d8ef6:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d8ef8:	1d38      	adds	r0, r7, #4
   d8efa:	2114      	movs	r1, #20
{
   d8efc:	4614      	mov	r4, r2
    va_copy(args2, args);
   d8efe:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d8f00:	f7ff fbf6 	bl	d86f0 <vsnprintf>

    if (n<bufsize)
   d8f04:	2813      	cmp	r0, #19
   d8f06:	d80e      	bhi.n	d8f26 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d8f08:	1d39      	adds	r1, r7, #4
   d8f0a:	4628      	mov	r0, r5
   d8f0c:	f7ff fe76 	bl	d8bfc <_ZN5Print5writeEPKc>
   d8f10:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d8f12:	b11e      	cbz	r6, d8f1c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d8f14:	4628      	mov	r0, r5
   d8f16:	f7ff fe8e 	bl	d8c36 <_ZN5Print7printlnEv>
   d8f1a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d8f1c:	4620      	mov	r0, r4
   d8f1e:	3718      	adds	r7, #24
   d8f20:	46bd      	mov	sp, r7
   d8f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d8f26:	f100 0308 	add.w	r3, r0, #8
   d8f2a:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d8f2e:	46e8      	mov	r8, sp
        char bigger[n+1];
   d8f30:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d8f34:	4622      	mov	r2, r4
   d8f36:	1c41      	adds	r1, r0, #1
   d8f38:	683b      	ldr	r3, [r7, #0]
   d8f3a:	4668      	mov	r0, sp
   d8f3c:	f7ff fbd8 	bl	d86f0 <vsnprintf>
  return write(str);
   d8f40:	4669      	mov	r1, sp
   d8f42:	4628      	mov	r0, r5
   d8f44:	f7ff fe5a 	bl	d8bfc <_ZN5Print5writeEPKc>
   d8f48:	4604      	mov	r4, r0
   d8f4a:	46c5      	mov	sp, r8
   d8f4c:	e7e1      	b.n	d8f12 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000d8f50 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8f50:	4b01      	ldr	r3, [pc, #4]	; (d8f58 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8f52:	4a02      	ldr	r2, [pc, #8]	; (d8f5c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8f54:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8f56:	4770      	bx	lr
   d8f58:	2003e5a0 	.word	0x2003e5a0
   d8f5c:	000dea30 	.word	0x000dea30

000d8f60 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d8f60:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8f62:	2000      	movs	r0, #0
   d8f64:	f7ff fb9c 	bl	d86a0 <spark_sync_time_pending>
   d8f68:	b128      	cbz	r0, d8f76 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8f6a:	f7ff fb89 	bl	d8680 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8f6e:	f080 0001 	eor.w	r0, r0, #1
   d8f72:	b2c0      	uxtb	r0, r0
    }
   d8f74:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8f76:	2001      	movs	r0, #1
   d8f78:	e7fc      	b.n	d8f74 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d8f7a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8f7a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d8f7c:	2000      	movs	r0, #0
   d8f7e:	f7ff f973 	bl	d8268 <hal_rtc_time_is_valid>
    if (rtcstate)
   d8f82:	4604      	mov	r4, r0
   d8f84:	b9a0      	cbnz	r0, d8fb0 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8f86:	f7ff facf 	bl	d8528 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8f8a:	2801      	cmp	r0, #1
   d8f8c:	d110      	bne.n	d8fb0 <_ZN9TimeClass7isValidEv+0x36>
   d8f8e:	4620      	mov	r0, r4
   d8f90:	f7ff faf2 	bl	d8578 <system_thread_get_state>
   d8f94:	b960      	cbnz	r0, d8fb0 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8f96:	f7ff ffe3 	bl	d8f60 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8f9a:	b910      	cbnz	r0, d8fa2 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d8f9c:	f7ff fb68 	bl	d8670 <spark_process>
        while (_while() && !_condition()) {
   d8fa0:	e7f9      	b.n	d8f96 <_ZN9TimeClass7isValidEv+0x1c>
   d8fa2:	f7ff ffdd 	bl	d8f60 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d8fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d8faa:	2000      	movs	r0, #0
   d8fac:	f7ff b95c 	b.w	d8268 <hal_rtc_time_is_valid>
}
   d8fb0:	4620      	mov	r0, r4
   d8fb2:	bd10      	pop	{r4, pc}

000d8fb4 <_ZN9TimeClass3nowEv>:
{
   d8fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d8fb6:	f7ff ffe0 	bl	d8f7a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d8fba:	2210      	movs	r2, #16
   d8fbc:	2100      	movs	r1, #0
   d8fbe:	4668      	mov	r0, sp
   d8fc0:	f004 fc18 	bl	dd7f4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d8fc4:	2100      	movs	r1, #0
   d8fc6:	4668      	mov	r0, sp
   d8fc8:	f7ff f956 	bl	d8278 <hal_rtc_get_time>
}
   d8fcc:	9800      	ldr	r0, [sp, #0]
   d8fce:	b005      	add	sp, #20
   d8fd0:	f85d fb04 	ldr.w	pc, [sp], #4

000d8fd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8fd4:	4b02      	ldr	r3, [pc, #8]	; (d8fe0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8fd6:	681a      	ldr	r2, [r3, #0]
   d8fd8:	4b02      	ldr	r3, [pc, #8]	; (d8fe4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8fda:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d8fdc:	4770      	bx	lr
   d8fde:	bf00      	nop
   d8fe0:	2003e3d0 	.word	0x2003e3d0
   d8fe4:	2003e5a4 	.word	0x2003e5a4

000d8fe8 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d8fe8:	428a      	cmp	r2, r1
{
   d8fea:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d8fec:	d007      	beq.n	d8ffe <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d8fee:	9c02      	ldr	r4, [sp, #8]
   d8ff0:	1a40      	subs	r0, r0, r1
   d8ff2:	1ae4      	subs	r4, r4, r3
   d8ff4:	4360      	muls	r0, r4
   d8ff6:	1a52      	subs	r2, r2, r1
   d8ff8:	fb90 f0f2 	sdiv	r0, r0, r2
   d8ffc:	4418      	add	r0, r3
}
   d8ffe:	bd10      	pop	{r4, pc}

000d9000 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d9000:	2100      	movs	r1, #0
   d9002:	f7ff baa1 	b.w	d8548 <system_delay_ms>

000d9006 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d9006:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d9008:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d900a:	4604      	mov	r4, r0
      if (_M_manager)
   d900c:	b113      	cbz	r3, d9014 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d900e:	2203      	movs	r2, #3
   d9010:	4601      	mov	r1, r0
   d9012:	4798      	blx	r3
    }
   d9014:	4620      	mov	r0, r4
   d9016:	bd10      	pop	{r4, pc}

000d9018 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d9018:	b513      	push	{r0, r1, r4, lr}
   d901a:	460b      	mov	r3, r1
   d901c:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d901e:	e9d0 0100 	ldrd	r0, r1, [r0]
   d9022:	466c      	mov	r4, sp
   d9024:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d9028:	e893 0003 	ldmia.w	r3, {r0, r1}
   d902c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d9030:	e894 0003 	ldmia.w	r4, {r0, r1}
   d9034:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d9038:	b002      	add	sp, #8
   d903a:	bd10      	pop	{r4, pc}

000d903c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d903c:	4b01      	ldr	r3, [pc, #4]	; (d9044 <_GLOBAL__sub_I_RGB+0x8>)
   d903e:	2200      	movs	r2, #0
   d9040:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d9042:	4770      	bx	lr
   d9044:	2003e5a8 	.word	0x2003e5a8

000d9048 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d9048:	4b01      	ldr	r3, [pc, #4]	; (d9050 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d904a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d904c:	4770      	bx	lr
   d904e:	bf00      	nop
   d9050:	2003e3d8 	.word	0x2003e3d8

000d9054 <serialEventRun>:
{
   d9054:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9056:	4b0b      	ldr	r3, [pc, #44]	; (d9084 <serialEventRun+0x30>)
   d9058:	b143      	cbz	r3, d906c <serialEventRun+0x18>
   d905a:	f000 fc03 	bl	d9864 <_Z16_fetch_usbserialv>
   d905e:	6803      	ldr	r3, [r0, #0]
   d9060:	691b      	ldr	r3, [r3, #16]
   d9062:	4798      	blx	r3
   d9064:	2800      	cmp	r0, #0
   d9066:	dd01      	ble.n	d906c <serialEventRun+0x18>
        serialEvent();
   d9068:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d906c:	4b06      	ldr	r3, [pc, #24]	; (d9088 <serialEventRun+0x34>)
   d906e:	b143      	cbz	r3, d9082 <serialEventRun+0x2e>
   d9070:	f000 fcea 	bl	d9a48 <_Z22__fetch_global_Serial1v>
   d9074:	6803      	ldr	r3, [r0, #0]
   d9076:	691b      	ldr	r3, [r3, #16]
   d9078:	4798      	blx	r3
   d907a:	2800      	cmp	r0, #0
   d907c:	dd01      	ble.n	d9082 <serialEventRun+0x2e>
        serialEvent1();
   d907e:	f3af 8000 	nop.w
}
   d9082:	bd08      	pop	{r3, pc}
	...

000d908c <_post_loop>:
{
   d908c:	b508      	push	{r3, lr}
	serialEventRun();
   d908e:	f7ff ffe1 	bl	d9054 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9092:	f7ff f8c9 	bl	d8228 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9096:	4b01      	ldr	r3, [pc, #4]	; (d909c <_post_loop+0x10>)
   d9098:	6018      	str	r0, [r3, #0]
}
   d909a:	bd08      	pop	{r3, pc}
   d909c:	2003e730 	.word	0x2003e730

000d90a0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d90a0:	4805      	ldr	r0, [pc, #20]	; (d90b8 <_Z33system_initialize_user_backup_ramv+0x18>)
   d90a2:	4a06      	ldr	r2, [pc, #24]	; (d90bc <_Z33system_initialize_user_backup_ramv+0x1c>)
   d90a4:	4906      	ldr	r1, [pc, #24]	; (d90c0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d90a6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d90a8:	1a12      	subs	r2, r2, r0
   d90aa:	f004 fb95 	bl	dd7d8 <memcpy>
    __backup_sram_signature = signature;
   d90ae:	4b05      	ldr	r3, [pc, #20]	; (d90c4 <_Z33system_initialize_user_backup_ramv+0x24>)
   d90b0:	4a05      	ldr	r2, [pc, #20]	; (d90c8 <_Z33system_initialize_user_backup_ramv+0x28>)
   d90b2:	601a      	str	r2, [r3, #0]
}
   d90b4:	bd08      	pop	{r3, pc}
   d90b6:	bf00      	nop
   d90b8:	2003f400 	.word	0x2003f400
   d90bc:	2003f404 	.word	0x2003f404
   d90c0:	000df048 	.word	0x000df048
   d90c4:	2003f400 	.word	0x2003f400
   d90c8:	9a271c1e 	.word	0x9a271c1e

000d90cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d90cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d90ce:	2300      	movs	r3, #0
   d90d0:	9300      	str	r3, [sp, #0]
   d90d2:	461a      	mov	r2, r3
   d90d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d90d8:	f7ff fa60 	bl	d859c <system_ctrl_set_result>
}
   d90dc:	b003      	add	sp, #12
   d90de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d90e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d90e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d90e6:	8843      	ldrh	r3, [r0, #2]
   d90e8:	2b0a      	cmp	r3, #10
   d90ea:	d008      	beq.n	d90fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d90ec:	2b50      	cmp	r3, #80	; 0x50
   d90ee:	d10b      	bne.n	d9108 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d90f0:	4b09      	ldr	r3, [pc, #36]	; (d9118 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d90f2:	681b      	ldr	r3, [r3, #0]
   d90f4:	b14b      	cbz	r3, d910a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d90f6:	b003      	add	sp, #12
   d90f8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d90fc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d90fe:	f7ff ffe5 	bl	d90cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d9102:	b003      	add	sp, #12
   d9104:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9108:	2300      	movs	r3, #0
   d910a:	9300      	str	r3, [sp, #0]
   d910c:	461a      	mov	r2, r3
   d910e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9112:	f7ff fa43 	bl	d859c <system_ctrl_set_result>
}
   d9116:	e7f4      	b.n	d9102 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d9118:	2003e5bc 	.word	0x2003e5bc

000d911c <module_user_init_hook>:
{
   d911c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d911e:	4812      	ldr	r0, [pc, #72]	; (d9168 <module_user_init_hook+0x4c>)
   d9120:	2100      	movs	r1, #0
   d9122:	f7ff fb05 	bl	d8730 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d9126:	4b11      	ldr	r3, [pc, #68]	; (d916c <module_user_init_hook+0x50>)
   d9128:	681a      	ldr	r2, [r3, #0]
   d912a:	4b11      	ldr	r3, [pc, #68]	; (d9170 <module_user_init_hook+0x54>)
   d912c:	429a      	cmp	r2, r3
   d912e:	4b11      	ldr	r3, [pc, #68]	; (d9174 <module_user_init_hook+0x58>)
   d9130:	bf0c      	ite	eq
   d9132:	2201      	moveq	r2, #1
   d9134:	2200      	movne	r2, #0
   d9136:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9138:	d001      	beq.n	d913e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d913a:	f7ff ffb1 	bl	d90a0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d913e:	f7ff f863 	bl	d8208 <HAL_RNG_GetRandomNumber>
   d9142:	4604      	mov	r4, r0
    srand(seed);
   d9144:	f004 fb5e 	bl	dd804 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9148:	4b0b      	ldr	r3, [pc, #44]	; (d9178 <module_user_init_hook+0x5c>)
   d914a:	b113      	cbz	r3, d9152 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d914c:	4620      	mov	r0, r4
   d914e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9152:	2100      	movs	r1, #0
   d9154:	4808      	ldr	r0, [pc, #32]	; (d9178 <module_user_init_hook+0x5c>)
   d9156:	f7ff faab 	bl	d86b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d915a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d915e:	4807      	ldr	r0, [pc, #28]	; (d917c <module_user_init_hook+0x60>)
   d9160:	2100      	movs	r1, #0
   d9162:	f7ff ba11 	b.w	d8588 <system_ctrl_set_app_request_handler>
   d9166:	bf00      	nop
   d9168:	000d9049 	.word	0x000d9049
   d916c:	2003f400 	.word	0x2003f400
   d9170:	9a271c1e 	.word	0x9a271c1e
   d9174:	2003e5b8 	.word	0x2003e5b8
   d9178:	00000000 	.word	0x00000000
   d917c:	000d90e5 	.word	0x000d90e5

000d9180 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d9180:	4770      	bx	lr

000d9182 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d9182:	2000      	movs	r0, #0
   d9184:	4770      	bx	lr

000d9186 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d9186:	b510      	push	{r4, lr}
   d9188:	2110      	movs	r1, #16
   d918a:	4604      	mov	r4, r0
   d918c:	f000 feaa 	bl	d9ee4 <_ZdlPvj>
   d9190:	4620      	mov	r0, r4
   d9192:	bd10      	pop	{r4, pc}

000d9194 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d9194:	b508      	push	{r3, lr}
      { delete this; }
   d9196:	f7ff fff6 	bl	d9186 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d919a:	bd08      	pop	{r3, pc}

000d919c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d919c:	b530      	push	{r4, r5, lr}
        type_(type) {
   d919e:	2200      	movs	r2, #0
   d91a0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d91a4:	6002      	str	r2, [r0, #0]
   d91a6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d91a8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d91aa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d91ac:	680c      	ldr	r4, [r1, #0]
   d91ae:	8085      	strh	r5, [r0, #4]
   d91b0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d91b2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d91b4:	bd30      	pop	{r4, r5, pc}

000d91b6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d91b6:	b510      	push	{r4, lr}
   d91b8:	4604      	mov	r4, r0
    free((void*)msg_);
   d91ba:	6800      	ldr	r0, [r0, #0]
   d91bc:	f7ff fa88 	bl	d86d0 <free>
}
   d91c0:	4620      	mov	r0, r4
   d91c2:	bd10      	pop	{r4, pc}

000d91c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d91c4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d91c6:	68c4      	ldr	r4, [r0, #12]
   d91c8:	b1f4      	cbz	r4, d9208 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d91ca:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d91cc:	2b02      	cmp	r3, #2
   d91ce:	d103      	bne.n	d91d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d91d0:	f104 000c 	add.w	r0, r4, #12
   d91d4:	f7ff ffef 	bl	d91b6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d91d8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d91da:	b135      	cbz	r5, d91ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d91dc:	4628      	mov	r0, r5
   d91de:	f7ff ff12 	bl	d9006 <_ZNSt14_Function_baseD1Ev>
   d91e2:	2110      	movs	r1, #16
   d91e4:	4628      	mov	r0, r5
   d91e6:	f000 fe7d 	bl	d9ee4 <_ZdlPvj>
   d91ea:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d91ec:	b135      	cbz	r5, d91fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d91ee:	4628      	mov	r0, r5
   d91f0:	f7ff ff09 	bl	d9006 <_ZNSt14_Function_baseD1Ev>
   d91f4:	2110      	movs	r1, #16
   d91f6:	4628      	mov	r0, r5
   d91f8:	f000 fe74 	bl	d9ee4 <_ZdlPvj>
   d91fc:	4620      	mov	r0, r4
   d91fe:	2114      	movs	r1, #20
   d9200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9204:	f000 be6e 	b.w	d9ee4 <_ZdlPvj>
   d9208:	bd38      	pop	{r3, r4, r5, pc}

000d920a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d920a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d920c:	460e      	mov	r6, r1
   d920e:	4604      	mov	r4, r0
   d9210:	f856 3b04 	ldr.w	r3, [r6], #4
   d9214:	9300      	str	r3, [sp, #0]
   d9216:	460d      	mov	r5, r1
   d9218:	a801      	add	r0, sp, #4
   d921a:	4631      	mov	r1, r6
   d921c:	f7ff fcbd 	bl	d8b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d9220:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d9222:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d9224:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d9226:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d9228:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d922a:	2300      	movs	r3, #0
   d922c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d922e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d9230:	f7ff fcba 	bl	d8ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9234:	4630      	mov	r0, r6
   d9236:	f7ff fcb7 	bl	d8ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d923a:	4628      	mov	r0, r5
   d923c:	2108      	movs	r1, #8
   d923e:	f000 fe51 	bl	d9ee4 <_ZdlPvj>
        return p;
    }
   d9242:	4620      	mov	r0, r4
   d9244:	b002      	add	sp, #8
   d9246:	bd70      	pop	{r4, r5, r6, pc}

000d9248 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d9248:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d924a:	b510      	push	{r4, lr}
      if (_M_empty())
   d924c:	b90a      	cbnz	r2, d9252 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d924e:	f000 fe4d 	bl	d9eec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d9252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9256:	68c3      	ldr	r3, [r0, #12]
   d9258:	4718      	bx	r3

000d925a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d925a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d925c:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d925e:	f100 0110 	add.w	r1, r0, #16
   d9262:	f7ff fff1 	bl	d9248 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d9266:	bd08      	pop	{r3, pc}

000d9268 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d9268:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d926a:	b510      	push	{r4, lr}
      if (_M_empty())
   d926c:	b90a      	cbnz	r2, d9272 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d926e:	f000 fe3d 	bl	d9eec <_ZSt25__throw_bad_function_callv>
    }
   d9272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9276:	68c3      	ldr	r3, [r0, #12]
   d9278:	4718      	bx	r3

000d927a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d927a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d927c:	6800      	ldr	r0, [r0, #0]
   d927e:	f100 0110 	add.w	r1, r0, #16
   d9282:	f7ff fff1 	bl	d9268 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d9286:	bd08      	pop	{r3, pc}

000d9288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d9288:	b538      	push	{r3, r4, r5, lr}
   d928a:	2300      	movs	r3, #0
   d928c:	4604      	mov	r4, r0
   d928e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9290:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d9292:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9294:	f7fa feff 	bl	d4096 <_Znwj>
   d9298:	b128      	cbz	r0, d92a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d929a:	2301      	movs	r3, #1
   d929c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d92a0:	4b02      	ldr	r3, [pc, #8]	; (d92ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d92a2:	6003      	str	r3, [r0, #0]
   d92a4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d92a6:	6020      	str	r0, [r4, #0]
	}
   d92a8:	4620      	mov	r0, r4
   d92aa:	bd38      	pop	{r3, r4, r5, pc}
   d92ac:	000dea58 	.word	0x000dea58

000d92b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d92b0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d92b2:	2300      	movs	r3, #0
   d92b4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d92b6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d92b8:	4604      	mov	r4, r0
   d92ba:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d92bc:	b12b      	cbz	r3, d92ca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d92be:	2202      	movs	r2, #2
   d92c0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d92c2:	68eb      	ldr	r3, [r5, #12]
   d92c4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d92c6:	68ab      	ldr	r3, [r5, #8]
   d92c8:	60a3      	str	r3, [r4, #8]
    }
   d92ca:	4620      	mov	r0, r4
   d92cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d92d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d92d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d92d2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d92d4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d92d6:	4668      	mov	r0, sp
   d92d8:	f7ff ff60 	bl	d919c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d92dc:	f04f 0302 	mov.w	r3, #2
   d92e0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d92e4:	2a00      	cmp	r2, #0
   d92e6:	d103      	bne.n	d92f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d92e8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d92ec:	2900      	cmp	r1, #0
   d92ee:	d1f7      	bne.n	d92e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d92f0:	d125      	bne.n	d933e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d92f2:	f104 050c 	add.w	r5, r4, #12
   d92f6:	4669      	mov	r1, sp
   d92f8:	4628      	mov	r0, r5
   d92fa:	f7ff ff4f 	bl	d919c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d92fe:	f3bf 8f5b 	dmb	ish
   d9302:	2301      	movs	r3, #1
   d9304:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d9306:	2000      	movs	r0, #0
   d9308:	f104 0308 	add.w	r3, r4, #8
   d930c:	f3bf 8f5b 	dmb	ish
   d9310:	e853 6f00 	ldrex	r6, [r3]
   d9314:	e843 0200 	strex	r2, r0, [r3]
   d9318:	2a00      	cmp	r2, #0
   d931a:	d1f9      	bne.n	d9310 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d931c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d9320:	b16e      	cbz	r6, d933e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d9322:	f7ff f919 	bl	d8558 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d9326:	b178      	cbz	r0, d9348 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9328:	4629      	mov	r1, r5
   d932a:	4630      	mov	r0, r6
   d932c:	f7ff ff8c 	bl	d9248 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d9330:	4630      	mov	r0, r6
   d9332:	f7ff fe68 	bl	d9006 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d9336:	2110      	movs	r1, #16
   d9338:	4630      	mov	r0, r6
   d933a:	f000 fdd3 	bl	d9ee4 <_ZdlPvj>
        p_->setError(std::move(error));
   d933e:	4668      	mov	r0, sp
   d9340:	f7ff ff39 	bl	d91b6 <_ZN8particle5ErrorD1Ev>
    }
   d9344:	b009      	add	sp, #36	; 0x24
   d9346:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9348:	4631      	mov	r1, r6
   d934a:	a802      	add	r0, sp, #8
   d934c:	f7ff ffb0 	bl	d92b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d9350:	68e0      	ldr	r0, [r4, #12]
   d9352:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d9356:	b108      	cbz	r0, d935c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d9358:	f004 fa78 	bl	dd84c <strdup>
        type_(type) {
   d935c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d935e:	2010      	movs	r0, #16
   d9360:	f8ad 501c 	strh.w	r5, [sp, #28]
   d9364:	f7fa fe97 	bl	d4096 <_Znwj>
   d9368:	4605      	mov	r5, r0
   d936a:	b1e8      	cbz	r0, d93a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d936c:	2700      	movs	r7, #0
   d936e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9370:	2018      	movs	r0, #24
   d9372:	f7fa fe90 	bl	d4096 <_Znwj>
   d9376:	4604      	mov	r4, r0
   d9378:	b188      	cbz	r0, d939e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d937a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d937c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d937e:	a802      	add	r0, sp, #8
   d9380:	f7ff fe4a 	bl	d9018 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9384:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9386:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9388:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d938a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d938c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d938e:	a906      	add	r1, sp, #24
   d9390:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9392:	60e3      	str	r3, [r4, #12]
   d9394:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d9398:	9205      	str	r2, [sp, #20]
   d939a:	f7ff feff 	bl	d919c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d939e:	4b08      	ldr	r3, [pc, #32]	; (d93c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d93a0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d93a2:	4b08      	ldr	r3, [pc, #32]	; (d93c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d93a4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d93a6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d93a8:	a806      	add	r0, sp, #24
   d93aa:	f7ff ff04 	bl	d91b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d93ae:	a802      	add	r0, sp, #8
   d93b0:	f7ff fe29 	bl	d9006 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d93b4:	2200      	movs	r2, #0
   d93b6:	4629      	mov	r1, r5
   d93b8:	4803      	ldr	r0, [pc, #12]	; (d93c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d93ba:	f7ff f8d5 	bl	d8568 <application_thread_invoke>
   d93be:	e7b7      	b.n	d9330 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d93c0:	000d925b 	.word	0x000d925b
   d93c4:	000d94f1 	.word	0x000d94f1
   d93c8:	000d9a95 	.word	0x000d9a95

000d93cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d93cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d93d0:	b08a      	sub	sp, #40	; 0x28
   d93d2:	4605      	mov	r5, r0
   d93d4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d93d8:	460c      	mov	r4, r1
   d93da:	4617      	mov	r7, r2
   d93dc:	4698      	mov	r8, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d93de:	f7ff f94f 	bl	d8680 <spark_cloud_flag_connected>
   d93e2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d93e4:	4682      	mov	sl, r0
   d93e6:	bb38      	cbnz	r0, d9438 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d93e8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d93ec:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d93ee:	a905      	add	r1, sp, #20
   d93f0:	4630      	mov	r0, r6
   d93f2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d93f6:	f7ff fed1 	bl	d919c <_ZN8particle5ErrorC1EOS0_>
   d93fa:	2014      	movs	r0, #20
   d93fc:	f7fa fe4b 	bl	d4096 <_Znwj>
   d9400:	4604      	mov	r4, r0
   d9402:	b148      	cbz	r0, d9418 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d9404:	2302      	movs	r3, #2
   d9406:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9408:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d940a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d940e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d9410:	4631      	mov	r1, r6
   d9412:	300c      	adds	r0, #12
   d9414:	f7ff fec2 	bl	d919c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d9418:	4628      	mov	r0, r5
	: __shared_count(__p)
   d941a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d941c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d9420:	f7ff ff32 	bl	d9288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d9424:	4630      	mov	r0, r6
   d9426:	f7ff fec6 	bl	d91b6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d942a:	a805      	add	r0, sp, #20
   d942c:	f7ff fec3 	bl	d91b6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d9430:	4628      	mov	r0, r5
   d9432:	b00a      	add	sp, #40	; 0x28
   d9434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d9438:	230c      	movs	r3, #12
   d943a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d943e:	2014      	movs	r0, #20
   d9440:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d9444:	9307      	str	r3, [sp, #28]
   d9446:	f7fa fe26 	bl	d4096 <_Znwj>
   d944a:	4601      	mov	r1, r0
   d944c:	b128      	cbz	r0, d945a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d944e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d9452:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9456:	f880 a001 	strb.w	sl, [r0, #1]
   d945a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d945c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d945e:	f7ff ff13 	bl	d9288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d9462:	4b22      	ldr	r3, [pc, #136]	; (d94ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d9464:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d9466:	2008      	movs	r0, #8
   d9468:	f7fa fe15 	bl	d4096 <_Znwj>
   d946c:	4682      	mov	sl, r0
   d946e:	b128      	cbz	r0, d947c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9470:	9b03      	ldr	r3, [sp, #12]
   d9472:	f840 3b04 	str.w	r3, [r0], #4
   d9476:	a904      	add	r1, sp, #16
   d9478:	f7ff fb8f 	bl	d8b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d947c:	9600      	str	r6, [sp, #0]
   d947e:	fa5f f389 	uxtb.w	r3, r9
   d9482:	4642      	mov	r2, r8
   d9484:	4639      	mov	r1, r7
   d9486:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d9488:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d948c:	f7ff f900 	bl	d8690 <spark_send_event>
   d9490:	b9b8      	cbnz	r0, d94c2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d9492:	9b03      	ldr	r3, [sp, #12]
   d9494:	785b      	ldrb	r3, [r3, #1]
   d9496:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d949a:	b993      	cbnz	r3, d94c2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d949c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d94a0:	a905      	add	r1, sp, #20
   d94a2:	a803      	add	r0, sp, #12
   d94a4:	9205      	str	r2, [sp, #20]
   d94a6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d94aa:	f7ff ff11 	bl	d92d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d94ae:	a805      	add	r0, sp, #20
   d94b0:	f7ff fe81 	bl	d91b6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d94b4:	a805      	add	r0, sp, #20
   d94b6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d94b8:	f7ff fea7 	bl	d920a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d94bc:	a806      	add	r0, sp, #24
   d94be:	f7ff fb73 	bl	d8ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d94c2:	9b03      	ldr	r3, [sp, #12]
   d94c4:	9305      	str	r3, [sp, #20]
   d94c6:	a904      	add	r1, sp, #16
   d94c8:	a806      	add	r0, sp, #24
   d94ca:	f7ff fb66 	bl	d8b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d94ce:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d94d0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d94d2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d94d4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d94d6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d94d8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d94da:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d94dc:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d94de:	f7ff fb63 	bl	d8ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d94e2:	a804      	add	r0, sp, #16
   d94e4:	f7ff fb60 	bl	d8ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d94e8:	e7a2      	b.n	d9430 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d94ea:	bf00      	nop
   d94ec:	000d95b5 	.word	0x000d95b5

000d94f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d94f0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d94f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d94f4:	4605      	mov	r5, r0
	  switch (__op)
   d94f6:	d007      	beq.n	d9508 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d94f8:	2a03      	cmp	r2, #3
   d94fa:	d018      	beq.n	d952e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d94fc:	2a01      	cmp	r2, #1
   d94fe:	d101      	bne.n	d9504 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d9500:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9502:	6003      	str	r3, [r0, #0]
	}
   d9504:	2000      	movs	r0, #0
   d9506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d9508:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d950a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d950c:	f7fa fdc3 	bl	d4096 <_Znwj>
   d9510:	4604      	mov	r4, r0
   d9512:	b150      	cbz	r0, d952a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9514:	4631      	mov	r1, r6
   d9516:	f7ff fecb 	bl	d92b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d951a:	6930      	ldr	r0, [r6, #16]
   d951c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d9520:	b108      	cbz	r0, d9526 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d9522:	f004 f993 	bl	dd84c <strdup>
        type_(type) {
   d9526:	6120      	str	r0, [r4, #16]
   d9528:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d952a:	602c      	str	r4, [r5, #0]
	}
   d952c:	e7ea      	b.n	d9504 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d952e:	6804      	ldr	r4, [r0, #0]
   d9530:	2c00      	cmp	r4, #0
   d9532:	d0e7      	beq.n	d9504 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d9534:	f104 0010 	add.w	r0, r4, #16
   d9538:	f7ff fe3d 	bl	d91b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d953c:	4620      	mov	r0, r4
   d953e:	f7ff fd62 	bl	d9006 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d9542:	2118      	movs	r1, #24
   d9544:	4620      	mov	r0, r4
   d9546:	f000 fccd 	bl	d9ee4 <_ZdlPvj>
   d954a:	e7db      	b.n	d9504 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d954c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d954c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d954e:	2300      	movs	r3, #0
   d9550:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d9552:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d9554:	4604      	mov	r4, r0
   d9556:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d9558:	b12b      	cbz	r3, d9566 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d955a:	2202      	movs	r2, #2
   d955c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d955e:	68eb      	ldr	r3, [r5, #12]
   d9560:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d9562:	68ab      	ldr	r3, [r5, #8]
   d9564:	60a3      	str	r3, [r4, #8]
    }
   d9566:	4620      	mov	r0, r4
   d9568:	bd38      	pop	{r3, r4, r5, pc}

000d956a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d956a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d956c:	b570      	push	{r4, r5, r6, lr}
   d956e:	4604      	mov	r4, r0
	  switch (__op)
   d9570:	d007      	beq.n	d9582 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d9572:	2a03      	cmp	r2, #3
   d9574:	d012      	beq.n	d959c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d9576:	2a01      	cmp	r2, #1
   d9578:	d101      	bne.n	d957e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d957a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d957c:	6003      	str	r3, [r0, #0]
	}
   d957e:	2000      	movs	r0, #0
   d9580:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d9582:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d9584:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d9586:	f7fa fd86 	bl	d4096 <_Znwj>
   d958a:	4605      	mov	r5, r0
   d958c:	b120      	cbz	r0, d9598 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d958e:	4631      	mov	r1, r6
   d9590:	f7ff ffdc 	bl	d954c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d9594:	7c33      	ldrb	r3, [r6, #16]
   d9596:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d9598:	6025      	str	r5, [r4, #0]
	}
   d959a:	e7f0      	b.n	d957e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d959c:	6804      	ldr	r4, [r0, #0]
   d959e:	2c00      	cmp	r4, #0
   d95a0:	d0ed      	beq.n	d957e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d95a2:	4620      	mov	r0, r4
   d95a4:	f7ff fd2f 	bl	d9006 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d95a8:	2114      	movs	r1, #20
   d95aa:	4620      	mov	r0, r4
   d95ac:	f000 fc9a 	bl	d9ee4 <_ZdlPvj>
   d95b0:	e7e5      	b.n	d957e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d95b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d95b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d95b6:	b089      	sub	sp, #36	; 0x24
   d95b8:	4604      	mov	r4, r0
   d95ba:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d95bc:	a801      	add	r0, sp, #4
   d95be:	4611      	mov	r1, r2
   d95c0:	f7ff fe23 	bl	d920a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d95c4:	b1a4      	cbz	r4, d95f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d95c6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d95c8:	b11d      	cbz	r5, d95d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d95ca:	4628      	mov	r0, r5
   d95cc:	f004 f93e 	bl	dd84c <strdup>
   d95d0:	4605      	mov	r5, r0
   d95d2:	a801      	add	r0, sp, #4
   d95d4:	a903      	add	r1, sp, #12
        type_(type) {
   d95d6:	9503      	str	r5, [sp, #12]
   d95d8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d95dc:	f7ff fe78 	bl	d92d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d95e0:	a803      	add	r0, sp, #12
   d95e2:	f7ff fde8 	bl	d91b6 <_ZN8particle5ErrorD1Ev>
   d95e6:	a802      	add	r0, sp, #8
   d95e8:	f7ff fade 	bl	d8ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d95ec:	b009      	add	sp, #36	; 0x24
   d95ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d95f0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d95f2:	2301      	movs	r3, #1
   d95f4:	e8d5 2f4f 	ldrexb	r2, [r5]
   d95f8:	2a00      	cmp	r2, #0
   d95fa:	d103      	bne.n	d9604 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d95fc:	e8c5 3f41 	strexb	r1, r3, [r5]
   d9600:	2900      	cmp	r1, #0
   d9602:	d1f7      	bne.n	d95f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d9604:	d1ef      	bne.n	d95e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d9606:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d9608:	f3bf 8f5b 	dmb	ish
   d960c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d960e:	1d2b      	adds	r3, r5, #4
   d9610:	f3bf 8f5b 	dmb	ish
   d9614:	e853 6f00 	ldrex	r6, [r3]
   d9618:	e843 4200 	strex	r2, r4, [r3]
   d961c:	2a00      	cmp	r2, #0
   d961e:	d1f9      	bne.n	d9614 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d9620:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d9624:	2e00      	cmp	r6, #0
   d9626:	d0de      	beq.n	d95e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d9628:	4620      	mov	r0, r4
   d962a:	f7fe ff95 	bl	d8558 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d962e:	4607      	mov	r7, r0
   d9630:	b160      	cbz	r0, d964c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9632:	f105 010c 	add.w	r1, r5, #12
   d9636:	4630      	mov	r0, r6
   d9638:	f7ff fe16 	bl	d9268 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d963c:	4630      	mov	r0, r6
   d963e:	f7ff fce2 	bl	d9006 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d9642:	2110      	movs	r1, #16
   d9644:	4630      	mov	r0, r6
   d9646:	f000 fc4d 	bl	d9ee4 <_ZdlPvj>
   d964a:	e7cc      	b.n	d95e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d964c:	4631      	mov	r1, r6
   d964e:	a803      	add	r0, sp, #12
   d9650:	f7ff ff7c 	bl	d954c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9654:	7b2b      	ldrb	r3, [r5, #12]
   d9656:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d965a:	2010      	movs	r0, #16
   d965c:	f7fa fd1b 	bl	d4096 <_Znwj>
   d9660:	4605      	mov	r5, r0
   d9662:	b1d0      	cbz	r0, d969a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d9664:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9666:	2014      	movs	r0, #20
   d9668:	f7fa fd15 	bl	d4096 <_Znwj>
   d966c:	4604      	mov	r4, r0
   d966e:	b178      	cbz	r0, d9690 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d9670:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d9672:	4601      	mov	r1, r0
   d9674:	a803      	add	r0, sp, #12
   d9676:	f7ff fccf 	bl	d9018 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d967a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d967c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d967e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9680:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d9682:	9205      	str	r2, [sp, #20]
   d9684:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9686:	60e3      	str	r3, [r4, #12]
   d9688:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d968c:	9206      	str	r2, [sp, #24]
   d968e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d9690:	4b06      	ldr	r3, [pc, #24]	; (d96ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d9692:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9694:	4b06      	ldr	r3, [pc, #24]	; (d96b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9696:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d9698:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d969a:	a803      	add	r0, sp, #12
   d969c:	f7ff fcb3 	bl	d9006 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d96a0:	2200      	movs	r2, #0
   d96a2:	4629      	mov	r1, r5
   d96a4:	4803      	ldr	r0, [pc, #12]	; (d96b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d96a6:	f7fe ff5f 	bl	d8568 <application_thread_invoke>
   d96aa:	e7c7      	b.n	d963c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d96ac:	000d927b 	.word	0x000d927b
   d96b0:	000d956b 	.word	0x000d956b
   d96b4:	000d9a95 	.word	0x000d9a95

000d96b8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d96b8:	4770      	bx	lr

000d96ba <_ZN9IPAddressD0Ev>:
   d96ba:	b510      	push	{r4, lr}
   d96bc:	2118      	movs	r1, #24
   d96be:	4604      	mov	r4, r0
   d96c0:	f000 fc10 	bl	d9ee4 <_ZdlPvj>
   d96c4:	4620      	mov	r0, r4
   d96c6:	bd10      	pop	{r4, pc}

000d96c8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d96c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d96ca:	7d03      	ldrb	r3, [r0, #20]
   d96cc:	2b06      	cmp	r3, #6
{
   d96ce:	b08d      	sub	sp, #52	; 0x34
   d96d0:	460e      	mov	r6, r1
   d96d2:	f100 0704 	add.w	r7, r0, #4
   d96d6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d96da:	d012      	beq.n	d9702 <_ZNK9IPAddress7printToER5Print+0x3a>
   d96dc:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d96e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d96e4:	220a      	movs	r2, #10
   d96e6:	4630      	mov	r0, r6
   d96e8:	f7ff fabd 	bl	d8c66 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d96ec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d96ee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d96f0:	d019      	beq.n	d9726 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d96f2:	2c00      	cmp	r4, #0
   d96f4:	d0f4      	beq.n	d96e0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d96f6:	212e      	movs	r1, #46	; 0x2e
   d96f8:	4630      	mov	r0, r6
   d96fa:	f7ff fa95 	bl	d8c28 <_ZN5Print5printEc>
   d96fe:	4404      	add	r4, r0
   d9700:	e7ee      	b.n	d96e0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9702:	232f      	movs	r3, #47	; 0x2f
   d9704:	466a      	mov	r2, sp
   d9706:	4639      	mov	r1, r7
   d9708:	200a      	movs	r0, #10
		buf[0] = 0;
   d970a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d970e:	f7fe fdcb 	bl	d82a8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d9712:	4668      	mov	r0, sp
   d9714:	f004 f8b7 	bl	dd886 <strlen>
   d9718:	6833      	ldr	r3, [r6, #0]
   d971a:	4602      	mov	r2, r0
   d971c:	68db      	ldr	r3, [r3, #12]
   d971e:	4669      	mov	r1, sp
   d9720:	4630      	mov	r0, r6
   d9722:	4798      	blx	r3
   d9724:	4604      	mov	r4, r0
    }
    return n;
}
   d9726:	4620      	mov	r0, r4
   d9728:	b00d      	add	sp, #52	; 0x34
   d972a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d972c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d972c:	b510      	push	{r4, lr}
   d972e:	4b05      	ldr	r3, [pc, #20]	; (d9744 <_ZN9IPAddressC1Ev+0x18>)
   d9730:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9732:	2211      	movs	r2, #17
   d9734:	f840 3b04 	str.w	r3, [r0], #4
   d9738:	2100      	movs	r1, #0
   d973a:	f004 f85b 	bl	dd7f4 <memset>
}
   d973e:	4620      	mov	r0, r4
   d9740:	bd10      	pop	{r4, pc}
   d9742:	bf00      	nop
   d9744:	000dea74 	.word	0x000dea74

000d9748 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9748:	4603      	mov	r3, r0
   d974a:	4a07      	ldr	r2, [pc, #28]	; (d9768 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d974c:	b510      	push	{r4, lr}
   d974e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d9752:	f101 0210 	add.w	r2, r1, #16
   d9756:	f851 4b04 	ldr.w	r4, [r1], #4
   d975a:	f843 4b04 	str.w	r4, [r3], #4
   d975e:	4291      	cmp	r1, r2
   d9760:	d1f9      	bne.n	d9756 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9762:	780a      	ldrb	r2, [r1, #0]
   d9764:	701a      	strb	r2, [r3, #0]
}
   d9766:	bd10      	pop	{r4, pc}
   d9768:	000dea74 	.word	0x000dea74

000d976c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d976c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d976e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9772:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9776:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d977a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d977e:	2304      	movs	r3, #4
   d9780:	6041      	str	r1, [r0, #4]
   d9782:	7503      	strb	r3, [r0, #20]
}
   d9784:	bd10      	pop	{r4, pc}

000d9786 <_ZN9IPAddressaSEPKh>:
{
   d9786:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9788:	78cb      	ldrb	r3, [r1, #3]
   d978a:	9300      	str	r3, [sp, #0]
   d978c:	788b      	ldrb	r3, [r1, #2]
   d978e:	784a      	ldrb	r2, [r1, #1]
   d9790:	7809      	ldrb	r1, [r1, #0]
   d9792:	f7ff ffeb 	bl	d976c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d9796:	b002      	add	sp, #8
   d9798:	bd10      	pop	{r4, pc}

000d979a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d979a:	7441      	strb	r1, [r0, #17]
}
   d979c:	4770      	bx	lr

000d979e <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d979e:	4770      	bx	lr

000d97a0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d97a0:	4770      	bx	lr

000d97a2 <_ZN9USBSerial4readEv>:
{
   d97a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d97a4:	2100      	movs	r1, #0
   d97a6:	7c00      	ldrb	r0, [r0, #16]
   d97a8:	f7fe fe96 	bl	d84d8 <HAL_USB_USART_Receive_Data>
}
   d97ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d97b0:	bd08      	pop	{r3, pc}

000d97b2 <_ZN9USBSerial4peekEv>:
{
   d97b2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d97b4:	2101      	movs	r1, #1
   d97b6:	7c00      	ldrb	r0, [r0, #16]
   d97b8:	f7fe fe8e 	bl	d84d8 <HAL_USB_USART_Receive_Data>
}
   d97bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d97c0:	bd08      	pop	{r3, pc}

000d97c2 <_ZN9USBSerial17availableForWriteEv>:
{
   d97c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d97c4:	7c00      	ldrb	r0, [r0, #16]
   d97c6:	f7fe fe7f 	bl	d84c8 <HAL_USB_USART_Available_Data_For_Write>
}
   d97ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d97ce:	bd08      	pop	{r3, pc}

000d97d0 <_ZN9USBSerial9availableEv>:
{
   d97d0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d97d2:	7c00      	ldrb	r0, [r0, #16]
   d97d4:	f7fe fe70 	bl	d84b8 <HAL_USB_USART_Available_Data>
}
   d97d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d97dc:	bd08      	pop	{r3, pc}

000d97de <_ZN9USBSerial5writeEh>:
{
   d97de:	b513      	push	{r0, r1, r4, lr}
   d97e0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d97e2:	7c00      	ldrb	r0, [r0, #16]
{
   d97e4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d97e6:	f7fe fe6f 	bl	d84c8 <HAL_USB_USART_Available_Data_For_Write>
   d97ea:	2800      	cmp	r0, #0
   d97ec:	9901      	ldr	r1, [sp, #4]
   d97ee:	dc01      	bgt.n	d97f4 <_ZN9USBSerial5writeEh+0x16>
   d97f0:	7c60      	ldrb	r0, [r4, #17]
   d97f2:	b120      	cbz	r0, d97fe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d97f4:	7c20      	ldrb	r0, [r4, #16]
   d97f6:	f7fe fe77 	bl	d84e8 <HAL_USB_USART_Send_Data>
   d97fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d97fe:	b002      	add	sp, #8
   d9800:	bd10      	pop	{r4, pc}

000d9802 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d9802:	7c00      	ldrb	r0, [r0, #16]
   d9804:	f7fe be78 	b.w	d84f8 <HAL_USB_USART_Flush_Data>

000d9808 <_ZN9USBSerialD0Ev>:
   d9808:	b510      	push	{r4, lr}
   d980a:	2114      	movs	r1, #20
   d980c:	4604      	mov	r4, r0
   d980e:	f000 fb69 	bl	d9ee4 <_ZdlPvj>
   d9812:	4620      	mov	r0, r4
   d9814:	bd10      	pop	{r4, pc}
	...

000d9818 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9818:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d981a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d981e:	4604      	mov	r4, r0
   d9820:	4608      	mov	r0, r1
   d9822:	2100      	movs	r1, #0
   d9824:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9828:	4b04      	ldr	r3, [pc, #16]	; (d983c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d982a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d982c:	2301      	movs	r3, #1
  _serial = serial;
   d982e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9830:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d9832:	4611      	mov	r1, r2
   d9834:	f7fe fe30 	bl	d8498 <HAL_USB_USART_Init>
}
   d9838:	4620      	mov	r0, r4
   d983a:	bd10      	pop	{r4, pc}
   d983c:	000dea88 	.word	0x000dea88

000d9840 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9840:	7c00      	ldrb	r0, [r0, #16]
   d9842:	2200      	movs	r2, #0
   d9844:	f7fe be30 	b.w	d84a8 <HAL_USB_USART_Begin>

000d9848 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   d9848:	7c00      	ldrb	r0, [r0, #16]
   d984a:	f7fe be5d 	b.w	d8508 <HAL_USB_USART_Is_Enabled>

000d984e <_ZN9USBSerialcvbEv>:
  return isEnabled();
   d984e:	f7ff bffb 	b.w	d9848 <_ZN9USBSerial9isEnabledEv>

000d9852 <_Z19acquireSerialBufferv>:
{
   d9852:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9854:	2214      	movs	r2, #20
{
   d9856:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9858:	2100      	movs	r1, #0
   d985a:	f003 ffcb 	bl	dd7f4 <memset>
}
   d985e:	4620      	mov	r0, r4
   d9860:	bd10      	pop	{r4, pc}
	...

000d9864 <_Z16_fetch_usbserialv>:
{
   d9864:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9866:	4c0f      	ldr	r4, [pc, #60]	; (d98a4 <_Z16_fetch_usbserialv+0x40>)
{
   d9868:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d986a:	a803      	add	r0, sp, #12
   d986c:	f7ff fff1 	bl	d9852 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9870:	7821      	ldrb	r1, [r4, #0]
   d9872:	f3bf 8f5b 	dmb	ish
   d9876:	f011 0101 	ands.w	r1, r1, #1
   d987a:	d10f      	bne.n	d989c <_Z16_fetch_usbserialv+0x38>
   d987c:	4620      	mov	r0, r4
   d987e:	9101      	str	r1, [sp, #4]
   d9880:	f7fa fc1a 	bl	d40b8 <__cxa_guard_acquire>
   d9884:	9901      	ldr	r1, [sp, #4]
   d9886:	b148      	cbz	r0, d989c <_Z16_fetch_usbserialv+0x38>
   d9888:	aa03      	add	r2, sp, #12
   d988a:	4807      	ldr	r0, [pc, #28]	; (d98a8 <_Z16_fetch_usbserialv+0x44>)
   d988c:	f7ff ffc4 	bl	d9818 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9890:	4620      	mov	r0, r4
   d9892:	f7fa fc16 	bl	d40c2 <__cxa_guard_release>
   d9896:	4805      	ldr	r0, [pc, #20]	; (d98ac <_Z16_fetch_usbserialv+0x48>)
   d9898:	f003 ff98 	bl	dd7cc <atexit>
	return _usbserial;
}
   d989c:	4802      	ldr	r0, [pc, #8]	; (d98a8 <_Z16_fetch_usbserialv+0x44>)
   d989e:	b008      	add	sp, #32
   d98a0:	bd10      	pop	{r4, pc}
   d98a2:	bf00      	nop
   d98a4:	2003e5c0 	.word	0x2003e5c0
   d98a8:	2003e5c4 	.word	0x2003e5c4
   d98ac:	000d979f 	.word	0x000d979f

000d98b0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d98b0:	4700      	bx	r0
	...

000d98b4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d98b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d98b8:	2400      	movs	r4, #0
{
   d98ba:	461d      	mov	r5, r3
   d98bc:	460f      	mov	r7, r1
   d98be:	4690      	mov	r8, r2
   d98c0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d98c2:	f7fe fc91 	bl	d81e8 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d98c6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d98c8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d98cc:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d98d0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d98d4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d98d8:	bfa2      	ittt	ge
   d98da:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d98de:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d98e2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d98e4:	4907      	ldr	r1, [pc, #28]	; (d9904 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d98e6:	9400      	str	r4, [sp, #0]
   d98e8:	4643      	mov	r3, r8
   d98ea:	463a      	mov	r2, r7
   d98ec:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d98ee:	bfa8      	it	ge
   d98f0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d98f4:	f7fe fc70 	bl	d81d8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d98f8:	fab0 f080 	clz	r0, r0
   d98fc:	0940      	lsrs	r0, r0, #5
   d98fe:	b004      	add	sp, #16
   d9900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9904:	000d98b1 	.word	0x000d98b1

000d9908 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9908:	2200      	movs	r2, #0
   d990a:	6840      	ldr	r0, [r0, #4]
   d990c:	4611      	mov	r1, r2
   d990e:	f7fe be67 	b.w	d85e0 <network_ready>

000d9912 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d9912:	2200      	movs	r2, #0
   d9914:	6840      	ldr	r0, [r0, #4]
   d9916:	4611      	mov	r1, r2
   d9918:	f7fe be82 	b.w	d8620 <network_listening>

000d991c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d991c:	2200      	movs	r2, #0
   d991e:	6840      	ldr	r0, [r0, #4]
   d9920:	4611      	mov	r1, r2
   d9922:	f7fe be8d 	b.w	d8640 <network_get_listen_timeout>

000d9926 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d9926:	6840      	ldr	r0, [r0, #4]
   d9928:	2200      	movs	r2, #0
   d992a:	f7fe be81 	b.w	d8630 <network_set_listen_timeout>

000d992e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d992e:	6840      	ldr	r0, [r0, #4]
   d9930:	2200      	movs	r2, #0
   d9932:	f081 0101 	eor.w	r1, r1, #1
   d9936:	f7fe be6b 	b.w	d8610 <network_listen>

000d993a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d993a:	2300      	movs	r3, #0
   d993c:	6840      	ldr	r0, [r0, #4]
   d993e:	461a      	mov	r2, r3
   d9940:	4619      	mov	r1, r3
   d9942:	f7fe be5d 	b.w	d8600 <network_off>

000d9946 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d9946:	2300      	movs	r3, #0
   d9948:	6840      	ldr	r0, [r0, #4]
   d994a:	461a      	mov	r2, r3
   d994c:	4619      	mov	r1, r3
   d994e:	f7fe be4f 	b.w	d85f0 <network_on>

000d9952 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d9952:	2200      	movs	r2, #0
   d9954:	6840      	ldr	r0, [r0, #4]
   d9956:	4611      	mov	r1, r2
   d9958:	f7fe be32 	b.w	d85c0 <network_connecting>

000d995c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d995c:	6840      	ldr	r0, [r0, #4]
   d995e:	2200      	movs	r2, #0
   d9960:	2102      	movs	r1, #2
   d9962:	f7fe be35 	b.w	d85d0 <network_disconnect>

000d9966 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d9966:	2300      	movs	r3, #0
   d9968:	6840      	ldr	r0, [r0, #4]
   d996a:	461a      	mov	r2, r3
   d996c:	f7fe be20 	b.w	d85b0 <network_connect>

000d9970 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d9970:	4b08      	ldr	r3, [pc, #32]	; (d9994 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d9972:	b510      	push	{r4, lr}
   d9974:	2428      	movs	r4, #40	; 0x28
   d9976:	4622      	mov	r2, r4
   d9978:	4618      	mov	r0, r3
   d997a:	2100      	movs	r1, #0
   d997c:	f003 ff3a 	bl	dd7f4 <memset>
   d9980:	4b05      	ldr	r3, [pc, #20]	; (d9998 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d9982:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d9984:	f04f 32ff 	mov.w	r2, #4294967295
   d9988:	6042      	str	r2, [r0, #4]
   d998a:	2204      	movs	r2, #4
   d998c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d998e:	4a03      	ldr	r2, [pc, #12]	; (d999c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d9990:	601a      	str	r2, [r3, #0]
   d9992:	bd10      	pop	{r4, pc}
   d9994:	2003e5e0 	.word	0x2003e5e0
   d9998:	2003e5d8 	.word	0x2003e5d8
   d999c:	000deab8 	.word	0x000deab8

000d99a0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d99a0:	4770      	bx	lr

000d99a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d99a2:	7441      	strb	r1, [r0, #17]
}
   d99a4:	4770      	bx	lr

000d99a6 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d99a6:	4770      	bx	lr

000d99a8 <_ZN11USARTSerial17availableForWriteEv>:
{
   d99a8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d99aa:	7c00      	ldrb	r0, [r0, #16]
   d99ac:	f7fe fcbc 	bl	d8328 <hal_usart_available_data_for_write>
}
   d99b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d99b4:	bd08      	pop	{r3, pc}

000d99b6 <_ZN11USARTSerial9availableEv>:
{
   d99b6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d99b8:	7c00      	ldrb	r0, [r0, #16]
   d99ba:	f7fe fc8d 	bl	d82d8 <hal_usart_available>
}
   d99be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d99c2:	bd08      	pop	{r3, pc}

000d99c4 <_ZN11USARTSerial4peekEv>:
{
   d99c4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d99c6:	7c00      	ldrb	r0, [r0, #16]
   d99c8:	f7fe fc96 	bl	d82f8 <hal_usart_peek>
}
   d99cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d99d0:	bd08      	pop	{r3, pc}

000d99d2 <_ZN11USARTSerial4readEv>:
{
   d99d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d99d4:	7c00      	ldrb	r0, [r0, #16]
   d99d6:	f7fe fc87 	bl	d82e8 <hal_usart_read>
}
   d99da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d99de:	bd08      	pop	{r3, pc}

000d99e0 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d99e0:	7c00      	ldrb	r0, [r0, #16]
   d99e2:	f7fe bc91 	b.w	d8308 <hal_usart_flush>

000d99e6 <_ZN11USARTSerial5writeEh>:
{
   d99e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d99e8:	7c45      	ldrb	r5, [r0, #17]
{
   d99ea:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d99ec:	b12d      	cbz	r5, d99fa <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d99ee:	7c20      	ldrb	r0, [r4, #16]
}
   d99f0:	b003      	add	sp, #12
   d99f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d99f6:	f7fe bc67 	b.w	d82c8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d99fa:	7c00      	ldrb	r0, [r0, #16]
   d99fc:	9101      	str	r1, [sp, #4]
   d99fe:	f7fe fc93 	bl	d8328 <hal_usart_available_data_for_write>
   d9a02:	2800      	cmp	r0, #0
   d9a04:	9901      	ldr	r1, [sp, #4]
   d9a06:	dcf2      	bgt.n	d99ee <_ZN11USARTSerial5writeEh+0x8>
}
   d9a08:	4628      	mov	r0, r5
   d9a0a:	b003      	add	sp, #12
   d9a0c:	bd30      	pop	{r4, r5, pc}

000d9a0e <_ZN11USARTSerialD0Ev>:
   d9a0e:	b510      	push	{r4, lr}
   d9a10:	2114      	movs	r1, #20
   d9a12:	4604      	mov	r4, r0
   d9a14:	f000 fa66 	bl	d9ee4 <_ZdlPvj>
   d9a18:	4620      	mov	r0, r4
   d9a1a:	bd10      	pop	{r4, pc}

000d9a1c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9a1c:	b510      	push	{r4, lr}
   d9a1e:	f04f 0c00 	mov.w	ip, #0
   d9a22:	4604      	mov	r4, r0
   d9a24:	4608      	mov	r0, r1
   d9a26:	4611      	mov	r1, r2
   d9a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9a2c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d9a30:	4a04      	ldr	r2, [pc, #16]	; (d9a44 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d9a32:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9a34:	2201      	movs	r2, #1
  _serial = serial;
   d9a36:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9a38:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d9a3a:	461a      	mov	r2, r3
   d9a3c:	f7fe fc3c 	bl	d82b8 <hal_usart_init>
}
   d9a40:	4620      	mov	r0, r4
   d9a42:	bd10      	pop	{r4, pc}
   d9a44:	000deaf4 	.word	0x000deaf4

000d9a48 <_Z22__fetch_global_Serial1v>:
{
   d9a48:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9a4a:	4c0d      	ldr	r4, [pc, #52]	; (d9a80 <_Z22__fetch_global_Serial1v+0x38>)
   d9a4c:	7821      	ldrb	r1, [r4, #0]
   d9a4e:	f3bf 8f5b 	dmb	ish
   d9a52:	f011 0101 	ands.w	r1, r1, #1
   d9a56:	d110      	bne.n	d9a7a <_Z22__fetch_global_Serial1v+0x32>
   d9a58:	4620      	mov	r0, r4
   d9a5a:	9101      	str	r1, [sp, #4]
   d9a5c:	f7fa fb2c 	bl	d40b8 <__cxa_guard_acquire>
   d9a60:	9901      	ldr	r1, [sp, #4]
   d9a62:	b150      	cbz	r0, d9a7a <_Z22__fetch_global_Serial1v+0x32>
   d9a64:	4b07      	ldr	r3, [pc, #28]	; (d9a84 <_Z22__fetch_global_Serial1v+0x3c>)
   d9a66:	4a08      	ldr	r2, [pc, #32]	; (d9a88 <_Z22__fetch_global_Serial1v+0x40>)
   d9a68:	4808      	ldr	r0, [pc, #32]	; (d9a8c <_Z22__fetch_global_Serial1v+0x44>)
   d9a6a:	f7ff ffd7 	bl	d9a1c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d9a6e:	4620      	mov	r0, r4
   d9a70:	f7fa fb27 	bl	d40c2 <__cxa_guard_release>
   d9a74:	4806      	ldr	r0, [pc, #24]	; (d9a90 <_Z22__fetch_global_Serial1v+0x48>)
   d9a76:	f003 fea9 	bl	dd7cc <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9a7a:	4804      	ldr	r0, [pc, #16]	; (d9a8c <_Z22__fetch_global_Serial1v+0x44>)
   d9a7c:	b002      	add	sp, #8
   d9a7e:	bd10      	pop	{r4, pc}
   d9a80:	2003e608 	.word	0x2003e608
   d9a84:	2003e690 	.word	0x2003e690
   d9a88:	2003e60c 	.word	0x2003e60c
   d9a8c:	2003e714 	.word	0x2003e714
   d9a90:	000d99a7 	.word	0x000d99a7

000d9a94 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d9a94:	b510      	push	{r4, lr}
      if (_M_empty())
   d9a96:	6883      	ldr	r3, [r0, #8]
   d9a98:	4604      	mov	r4, r0
   d9a9a:	b90b      	cbnz	r3, d9aa0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d9a9c:	f000 fa26 	bl	d9eec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9aa0:	68c3      	ldr	r3, [r0, #12]
   d9aa2:	4798      	blx	r3
      if (_M_manager)
   d9aa4:	68a3      	ldr	r3, [r4, #8]
   d9aa6:	b11b      	cbz	r3, d9ab0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d9aa8:	2203      	movs	r2, #3
   d9aaa:	4621      	mov	r1, r4
   d9aac:	4620      	mov	r0, r4
   d9aae:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d9ab0:	4620      	mov	r0, r4
   d9ab2:	2110      	movs	r1, #16
}
   d9ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d9ab8:	f000 ba14 	b.w	d9ee4 <_ZdlPvj>

000d9abc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d9abc:	4770      	bx	lr

000d9abe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d9abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9ac0:	4606      	mov	r6, r0
   d9ac2:	4615      	mov	r5, r2
   d9ac4:	460c      	mov	r4, r1
   d9ac6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9ac8:	42bc      	cmp	r4, r7
   d9aca:	d006      	beq.n	d9ada <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9acc:	6833      	ldr	r3, [r6, #0]
   d9ace:	f814 1b01 	ldrb.w	r1, [r4], #1
   d9ad2:	689b      	ldr	r3, [r3, #8]
   d9ad4:	4630      	mov	r0, r6
   d9ad6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d9ad8:	e7f6      	b.n	d9ac8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d9ada:	4628      	mov	r0, r5
   d9adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9ade <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d9ade:	7c00      	ldrb	r0, [r0, #16]
   d9ae0:	2200      	movs	r2, #0
   d9ae2:	f7fe bc49 	b.w	d8378 <hal_i2c_write>

000d9ae6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d9ae6:	7c00      	ldrb	r0, [r0, #16]
   d9ae8:	2100      	movs	r1, #0
   d9aea:	f7fe bc4d 	b.w	d8388 <hal_i2c_available>

000d9aee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d9aee:	7c00      	ldrb	r0, [r0, #16]
   d9af0:	2100      	movs	r1, #0
   d9af2:	f7fe bc51 	b.w	d8398 <hal_i2c_read>

000d9af6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d9af6:	7c00      	ldrb	r0, [r0, #16]
   d9af8:	2100      	movs	r1, #0
   d9afa:	f7fe bc55 	b.w	d83a8 <hal_i2c_peek>

000d9afe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d9afe:	7c00      	ldrb	r0, [r0, #16]
   d9b00:	2100      	movs	r1, #0
   d9b02:	f7fe bc59 	b.w	d83b8 <hal_i2c_flush>

000d9b06 <_ZN7TwoWireD0Ev>:
   d9b06:	b510      	push	{r4, lr}
   d9b08:	2114      	movs	r1, #20
   d9b0a:	4604      	mov	r4, r0
   d9b0c:	f000 f9ea 	bl	d9ee4 <_ZdlPvj>
   d9b10:	4620      	mov	r0, r4
   d9b12:	bd10      	pop	{r4, pc}

000d9b14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d9b14:	b510      	push	{r4, lr}
   d9b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9b1a:	4604      	mov	r4, r0
   d9b1c:	4608      	mov	r0, r1
   d9b1e:	2100      	movs	r1, #0
   d9b20:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9b24:	4b03      	ldr	r3, [pc, #12]	; (d9b34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d9b26:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d9b28:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d9b2a:	4611      	mov	r1, r2
   d9b2c:	f7fe fc54 	bl	d83d8 <hal_i2c_init>
}
   d9b30:	4620      	mov	r0, r4
   d9b32:	bd10      	pop	{r4, pc}
   d9b34:	000deb24 	.word	0x000deb24

000d9b38 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d9b38:	7c00      	ldrb	r0, [r0, #16]
   d9b3a:	2200      	movs	r2, #0
   d9b3c:	f7fe bbfc 	b.w	d8338 <hal_i2c_set_speed>

000d9b40 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d9b40:	2300      	movs	r3, #0
   d9b42:	7c00      	ldrb	r0, [r0, #16]
   d9b44:	461a      	mov	r2, r3
   d9b46:	4619      	mov	r1, r3
   d9b48:	f7fe bbfe 	b.w	d8348 <hal_i2c_begin>

000d9b4c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d9b4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d9b4e:	2200      	movs	r2, #0
   d9b50:	2314      	movs	r3, #20
   d9b52:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d9b56:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d9b5a:	780b      	ldrb	r3, [r1, #0]
   d9b5c:	f88d 3008 	strb.w	r3, [sp, #8]
   d9b60:	684b      	ldr	r3, [r1, #4]
   d9b62:	9303      	str	r3, [sp, #12]
   d9b64:	68cb      	ldr	r3, [r1, #12]
   d9b66:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d9b68:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d9b6a:	7a0b      	ldrb	r3, [r1, #8]
   d9b6c:	9305      	str	r3, [sp, #20]
   d9b6e:	a901      	add	r1, sp, #4
   d9b70:	f7fe fc3a 	bl	d83e8 <hal_i2c_request_ex>
}
   d9b74:	b007      	add	sp, #28
   d9b76:	f85d fb04 	ldr.w	pc, [sp], #4

000d9b7a <_ZN7TwoWire11requestFromEhjh>:
{
   d9b7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d9b7c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9b7e:	f88d 1000 	strb.w	r1, [sp]
   d9b82:	f04f 0164 	mov.w	r1, #100	; 0x64
   d9b86:	9103      	str	r1, [sp, #12]
   d9b88:	bf18      	it	ne
   d9b8a:	2301      	movne	r3, #1
   d9b8c:	4669      	mov	r1, sp
    size_ = size;
   d9b8e:	9201      	str	r2, [sp, #4]
   d9b90:	f88d 3008 	strb.w	r3, [sp, #8]
   d9b94:	f7ff ffda 	bl	d9b4c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d9b98:	b005      	add	sp, #20
   d9b9a:	f85d fb04 	ldr.w	pc, [sp], #4

000d9b9e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d9b9e:	2301      	movs	r3, #1
   d9ba0:	f7ff bfeb 	b.w	d9b7a <_ZN7TwoWire11requestFromEhjh>

000d9ba4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d9ba4:	7c00      	ldrb	r0, [r0, #16]
   d9ba6:	2200      	movs	r2, #0
   d9ba8:	f7fe bbd6 	b.w	d8358 <hal_i2c_begin_transmission>

000d9bac <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d9bac:	7c00      	ldrb	r0, [r0, #16]
   d9bae:	2200      	movs	r2, #0
   d9bb0:	f7fe bbda 	b.w	d8368 <hal_i2c_end_transmission>

000d9bb4 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d9bb4:	2101      	movs	r1, #1
   d9bb6:	f7ff bff9 	b.w	d9bac <_ZN7TwoWire15endTransmissionEh>

000d9bba <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9bba:	2300      	movs	r3, #0
   d9bbc:	6840      	ldr	r0, [r0, #4]
   d9bbe:	461a      	mov	r2, r3
   d9bc0:	f7fe bcf6 	b.w	d85b0 <network_connect>

000d9bc4 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9bc4:	6840      	ldr	r0, [r0, #4]
   d9bc6:	2200      	movs	r2, #0
   d9bc8:	2102      	movs	r1, #2
   d9bca:	f7fe bd01 	b.w	d85d0 <network_disconnect>

000d9bce <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9bce:	2200      	movs	r2, #0
   d9bd0:	6840      	ldr	r0, [r0, #4]
   d9bd2:	4611      	mov	r1, r2
   d9bd4:	f7fe bcf4 	b.w	d85c0 <network_connecting>

000d9bd8 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9bd8:	2200      	movs	r2, #0
   d9bda:	6840      	ldr	r0, [r0, #4]
   d9bdc:	4611      	mov	r1, r2
   d9bde:	f7fe bcff 	b.w	d85e0 <network_ready>

000d9be2 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9be2:	2300      	movs	r3, #0
   d9be4:	6840      	ldr	r0, [r0, #4]
   d9be6:	461a      	mov	r2, r3
   d9be8:	4619      	mov	r1, r3
   d9bea:	f7fe bd01 	b.w	d85f0 <network_on>

000d9bee <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9bee:	2300      	movs	r3, #0
   d9bf0:	6840      	ldr	r0, [r0, #4]
   d9bf2:	461a      	mov	r2, r3
   d9bf4:	4619      	mov	r1, r3
   d9bf6:	f7fe bd03 	b.w	d8600 <network_off>

000d9bfa <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9bfa:	6840      	ldr	r0, [r0, #4]
   d9bfc:	2100      	movs	r1, #0
   d9bfe:	f7fe bd27 	b.w	d8650 <network_is_on>

000d9c02 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d9c02:	6840      	ldr	r0, [r0, #4]
   d9c04:	2100      	movs	r1, #0
   d9c06:	f7fe bd2b 	b.w	d8660 <network_is_off>

000d9c0a <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9c0a:	6840      	ldr	r0, [r0, #4]
   d9c0c:	2200      	movs	r2, #0
   d9c0e:	f081 0101 	eor.w	r1, r1, #1
   d9c12:	f7fe bcfd 	b.w	d8610 <network_listen>

000d9c16 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9c16:	6840      	ldr	r0, [r0, #4]
   d9c18:	2200      	movs	r2, #0
   d9c1a:	f7fe bd09 	b.w	d8630 <network_set_listen_timeout>

000d9c1e <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9c1e:	2200      	movs	r2, #0
   d9c20:	6840      	ldr	r0, [r0, #4]
   d9c22:	4611      	mov	r1, r2
   d9c24:	f7fe bd0c 	b.w	d8640 <network_get_listen_timeout>

000d9c28 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9c28:	2200      	movs	r2, #0
   d9c2a:	6840      	ldr	r0, [r0, #4]
   d9c2c:	4611      	mov	r1, r2
   d9c2e:	f7fe bcf7 	b.w	d8620 <network_listening>

000d9c32 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9c32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9c36:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9c38:	b095      	sub	sp, #84	; 0x54
   d9c3a:	4616      	mov	r6, r2
   d9c3c:	460d      	mov	r5, r1
   d9c3e:	4607      	mov	r7, r0
    IPAddress addr;
   d9c40:	f7ff fd74 	bl	d972c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9c44:	4621      	mov	r1, r4
   d9c46:	2218      	movs	r2, #24
   d9c48:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9c4a:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9c4c:	f003 fdd2 	bl	dd7f4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9c50:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9c52:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9c56:	4621      	mov	r1, r4
   d9c58:	466b      	mov	r3, sp
   d9c5a:	aa0c      	add	r2, sp, #48	; 0x30
   d9c5c:	4630      	mov	r0, r6
   d9c5e:	f7fe fa8b 	bl	d8178 <netdb_getaddrinfo>
    if (!r) {
   d9c62:	4604      	mov	r4, r0
   d9c64:	2800      	cmp	r0, #0
   d9c66:	d146      	bne.n	d9cf6 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9c68:	4602      	mov	r2, r0
   d9c6a:	2101      	movs	r1, #1
   d9c6c:	6868      	ldr	r0, [r5, #4]
   d9c6e:	f7fe fcb7 	bl	d85e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9c72:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9c74:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9c76:	4622      	mov	r2, r4
   d9c78:	6868      	ldr	r0, [r5, #4]
   d9c7a:	f7fe fcb1 	bl	d85e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9c7e:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9c80:	4681      	mov	r9, r0
        bool ok = false;
   d9c82:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9c84:	2e00      	cmp	r6, #0
   d9c86:	d036      	beq.n	d9cf6 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d9c88:	2900      	cmp	r1, #0
   d9c8a:	d134      	bne.n	d9cf6 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9c8c:	6873      	ldr	r3, [r6, #4]
   d9c8e:	2b02      	cmp	r3, #2
   d9c90:	d003      	beq.n	d9c9a <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9c92:	2b0a      	cmp	r3, #10
   d9c94:	d00b      	beq.n	d9cae <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9c96:	69f6      	ldr	r6, [r6, #28]
   d9c98:	e7f4      	b.n	d9c84 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9c9a:	f1b8 0f00 	cmp.w	r8, #0
   d9c9e:	d004      	beq.n	d9caa <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9ca0:	6971      	ldr	r1, [r6, #20]
   d9ca2:	4638      	mov	r0, r7
   d9ca4:	3104      	adds	r1, #4
   d9ca6:	f7ff fd6e 	bl	d9786 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d9caa:	4641      	mov	r1, r8
   d9cac:	e7f3      	b.n	d9c96 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9cae:	f1b9 0f00 	cmp.w	r9, #0
   d9cb2:	d101      	bne.n	d9cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9cb4:	4649      	mov	r1, r9
   d9cb6:	e7ee      	b.n	d9c96 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9cb8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9cba:	2210      	movs	r2, #16
   d9cbc:	a801      	add	r0, sp, #4
   d9cbe:	f003 fd99 	bl	dd7f4 <memset>
                    a.v = 6;
   d9cc2:	2306      	movs	r3, #6
   d9cc4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9cc8:	ad01      	add	r5, sp, #4
   d9cca:	f104 0308 	add.w	r3, r4, #8
   d9cce:	3418      	adds	r4, #24
   d9cd0:	6818      	ldr	r0, [r3, #0]
   d9cd2:	6859      	ldr	r1, [r3, #4]
   d9cd4:	462a      	mov	r2, r5
   d9cd6:	c203      	stmia	r2!, {r0, r1}
   d9cd8:	3308      	adds	r3, #8
   d9cda:	42a3      	cmp	r3, r4
   d9cdc:	4615      	mov	r5, r2
   d9cde:	d1f7      	bne.n	d9cd0 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d9ce0:	a901      	add	r1, sp, #4
   d9ce2:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9ce4:	ad07      	add	r5, sp, #28
   d9ce6:	f7ff fd2f 	bl	d9748 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9cec:	1d3c      	adds	r4, r7, #4
   d9cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9cf0:	682b      	ldr	r3, [r5, #0]
   d9cf2:	7023      	strb	r3, [r4, #0]
   d9cf4:	e7de      	b.n	d9cb4 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9cf6:	9800      	ldr	r0, [sp, #0]
   d9cf8:	f7fe fa36 	bl	d8168 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9cfc:	4638      	mov	r0, r7
   d9cfe:	b015      	add	sp, #84	; 0x54
   d9d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9d04 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9d04:	4b02      	ldr	r3, [pc, #8]	; (d9d10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9d06:	4a03      	ldr	r2, [pc, #12]	; (d9d14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9d08:	601a      	str	r2, [r3, #0]
   d9d0a:	2200      	movs	r2, #0
   d9d0c:	605a      	str	r2, [r3, #4]

} // spark
   d9d0e:	4770      	bx	lr
   d9d10:	2003e728 	.word	0x2003e728
   d9d14:	000deb4c 	.word	0x000deb4c

000d9d18 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9d18:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9d1a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9d1c:	d902      	bls.n	d9d24 <pinAvailable+0xc>
    return false;
   d9d1e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9d20:	b002      	add	sp, #8
   d9d22:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9d24:	f1a0 030b 	sub.w	r3, r0, #11
   d9d28:	2b02      	cmp	r3, #2
   d9d2a:	d81a      	bhi.n	d9d62 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9d2c:	4c17      	ldr	r4, [pc, #92]	; (d9d8c <pinAvailable+0x74>)
   d9d2e:	7821      	ldrb	r1, [r4, #0]
   d9d30:	f3bf 8f5b 	dmb	ish
   d9d34:	f011 0101 	ands.w	r1, r1, #1
   d9d38:	d10b      	bne.n	d9d52 <pinAvailable+0x3a>
   d9d3a:	4620      	mov	r0, r4
   d9d3c:	9101      	str	r1, [sp, #4]
   d9d3e:	f7fa f9bb 	bl	d40b8 <__cxa_guard_acquire>
   d9d42:	9901      	ldr	r1, [sp, #4]
   d9d44:	b128      	cbz	r0, d9d52 <pinAvailable+0x3a>
   d9d46:	4812      	ldr	r0, [pc, #72]	; (d9d90 <pinAvailable+0x78>)
   d9d48:	f7fe fd3e 	bl	d87c8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9d4c:	4620      	mov	r0, r4
   d9d4e:	f7fa f9b8 	bl	d40c2 <__cxa_guard_release>
   d9d52:	4b0f      	ldr	r3, [pc, #60]	; (d9d90 <pinAvailable+0x78>)
   d9d54:	7818      	ldrb	r0, [r3, #0]
   d9d56:	f7fe fb67 	bl	d8428 <hal_spi_is_enabled>
   d9d5a:	2800      	cmp	r0, #0
   d9d5c:	d1df      	bne.n	d9d1e <pinAvailable+0x6>
  return true; // 'pin' is available
   d9d5e:	2001      	movs	r0, #1
   d9d60:	e7de      	b.n	d9d20 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d9d62:	2801      	cmp	r0, #1
   d9d64:	d809      	bhi.n	d9d7a <pinAvailable+0x62>
   d9d66:	f000 f899 	bl	d9e9c <_Z19__fetch_global_Wirev>
   d9d6a:	2100      	movs	r1, #0
   d9d6c:	7c00      	ldrb	r0, [r0, #16]
   d9d6e:	f7fe fb2b 	bl	d83c8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d9d72:	f080 0001 	eor.w	r0, r0, #1
   d9d76:	b2c0      	uxtb	r0, r0
   d9d78:	e7d2      	b.n	d9d20 <pinAvailable+0x8>
   d9d7a:	3809      	subs	r0, #9
   d9d7c:	2801      	cmp	r0, #1
   d9d7e:	d8ee      	bhi.n	d9d5e <pinAvailable+0x46>
   d9d80:	f7ff fe62 	bl	d9a48 <_Z22__fetch_global_Serial1v>
   d9d84:	7c00      	ldrb	r0, [r0, #16]
   d9d86:	f7fe fac7 	bl	d8318 <hal_usart_is_enabled>
   d9d8a:	e7f2      	b.n	d9d72 <pinAvailable+0x5a>
   d9d8c:	2003e578 	.word	0x2003e578
   d9d90:	2003e57c 	.word	0x2003e57c

000d9d94 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9d94:	2823      	cmp	r0, #35	; 0x23
{
   d9d96:	b538      	push	{r3, r4, r5, lr}
   d9d98:	4604      	mov	r4, r0
   d9d9a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9d9c:	d80a      	bhi.n	d9db4 <pinMode+0x20>
   d9d9e:	29ff      	cmp	r1, #255	; 0xff
   d9da0:	d008      	beq.n	d9db4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d9da2:	f7ff ffb9 	bl	d9d18 <pinAvailable>
   d9da6:	b128      	cbz	r0, d9db4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d9da8:	4629      	mov	r1, r5
   d9daa:	4620      	mov	r0, r4
}
   d9dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d9db0:	f7fe b9f2 	b.w	d8198 <HAL_Pin_Mode>
}
   d9db4:	bd38      	pop	{r3, r4, r5, pc}

000d9db6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9db6:	b538      	push	{r3, r4, r5, lr}
   d9db8:	4604      	mov	r4, r0
   d9dba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9dbc:	f7fe f9f4 	bl	d81a8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9dc0:	28ff      	cmp	r0, #255	; 0xff
   d9dc2:	d010      	beq.n	d9de6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d9dc4:	2806      	cmp	r0, #6
   d9dc6:	d804      	bhi.n	d9dd2 <digitalWrite+0x1c>
   d9dc8:	234d      	movs	r3, #77	; 0x4d
   d9dca:	fa23 f000 	lsr.w	r0, r3, r0
   d9dce:	07c3      	lsls	r3, r0, #31
   d9dd0:	d409      	bmi.n	d9de6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9dd2:	4620      	mov	r0, r4
   d9dd4:	f7ff ffa0 	bl	d9d18 <pinAvailable>
   d9dd8:	b128      	cbz	r0, d9de6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9dda:	4629      	mov	r1, r5
   d9ddc:	4620      	mov	r0, r4
}
   d9dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d9de2:	f7fe b9e9 	b.w	d81b8 <HAL_GPIO_Write>
}
   d9de6:	bd38      	pop	{r3, r4, r5, pc}

000d9de8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9de8:	b510      	push	{r4, lr}
   d9dea:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9dec:	f7fe f9dc 	bl	d81a8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d9df0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d9df2:	b2db      	uxtb	r3, r3
   d9df4:	2b01      	cmp	r3, #1
   d9df6:	d908      	bls.n	d9e0a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9df8:	4620      	mov	r0, r4
   d9dfa:	f7ff ff8d 	bl	d9d18 <pinAvailable>
   d9dfe:	b120      	cbz	r0, d9e0a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9e00:	4620      	mov	r0, r4
}
   d9e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d9e06:	f7fe b9df 	b.w	d81c8 <HAL_GPIO_Read>
}
   d9e0a:	2000      	movs	r0, #0
   d9e0c:	bd10      	pop	{r4, pc}

000d9e0e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d9e0e:	280d      	cmp	r0, #13
{
   d9e10:	b510      	push	{r4, lr}
   d9e12:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d9e14:	bf9c      	itt	ls
   d9e16:	340e      	addls	r4, #14
   d9e18:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9e1a:	4620      	mov	r0, r4
   d9e1c:	f7ff ff7c 	bl	d9d18 <pinAvailable>
   d9e20:	b150      	cbz	r0, d9e38 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d9e22:	2103      	movs	r1, #3
   d9e24:	4620      	mov	r0, r4
   d9e26:	f7fe f9af 	bl	d8188 <HAL_Validate_Pin_Function>
   d9e2a:	2803      	cmp	r0, #3
   d9e2c:	d104      	bne.n	d9e38 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d9e2e:	4620      	mov	r0, r4
}
   d9e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d9e34:	f7fe b9e0 	b.w	d81f8 <hal_adc_read>
}
   d9e38:	2000      	movs	r0, #0
   d9e3a:	bd10      	pop	{r4, pc}

000d9e3c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d9e3c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d9e3e:	4c08      	ldr	r4, [pc, #32]	; (d9e60 <_Z21__fetch_global_EEPROMv+0x24>)
   d9e40:	7823      	ldrb	r3, [r4, #0]
   d9e42:	f3bf 8f5b 	dmb	ish
   d9e46:	07db      	lsls	r3, r3, #31
   d9e48:	d408      	bmi.n	d9e5c <_Z21__fetch_global_EEPROMv+0x20>
   d9e4a:	4620      	mov	r0, r4
   d9e4c:	f7fa f934 	bl	d40b8 <__cxa_guard_acquire>
   d9e50:	b120      	cbz	r0, d9e5c <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d9e52:	f7fe f9f1 	bl	d8238 <HAL_EEPROM_Init>
   d9e56:	4620      	mov	r0, r4
   d9e58:	f7fa f933 	bl	d40c2 <__cxa_guard_release>
	return eeprom;
}
   d9e5c:	4801      	ldr	r0, [pc, #4]	; (d9e64 <_Z21__fetch_global_EEPROMv+0x28>)
   d9e5e:	bd10      	pop	{r4, pc}
   d9e60:	2003e734 	.word	0x2003e734
   d9e64:	2003e738 	.word	0x2003e738

000d9e68 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9e68:	4770      	bx	lr
	...

000d9e6c <_Z17acquireWireBufferv>:
{
   d9e6c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d9e6e:	2300      	movs	r3, #0
   d9e70:	2520      	movs	r5, #32
   d9e72:	8043      	strh	r3, [r0, #2]
   d9e74:	2314      	movs	r3, #20
{
   d9e76:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9e78:	8003      	strh	r3, [r0, #0]
   d9e7a:	6085      	str	r5, [r0, #8]
   d9e7c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9e7e:	4906      	ldr	r1, [pc, #24]	; (d9e98 <_Z17acquireWireBufferv+0x2c>)
   d9e80:	4628      	mov	r0, r5
   d9e82:	f000 f831 	bl	d9ee8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9e86:	4904      	ldr	r1, [pc, #16]	; (d9e98 <_Z17acquireWireBufferv+0x2c>)
	};
   d9e88:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9e8a:	4628      	mov	r0, r5
   d9e8c:	f000 f82c 	bl	d9ee8 <_ZnajRKSt9nothrow_t>
	};
   d9e90:	60e0      	str	r0, [r4, #12]
}
   d9e92:	4620      	mov	r0, r4
   d9e94:	bd38      	pop	{r3, r4, r5, pc}
   d9e96:	bf00      	nop
   d9e98:	000deb80 	.word	0x000deb80

000d9e9c <_Z19__fetch_global_Wirev>:
{
   d9e9c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9e9e:	4d0e      	ldr	r5, [pc, #56]	; (d9ed8 <_Z19__fetch_global_Wirev+0x3c>)
   d9ea0:	7829      	ldrb	r1, [r5, #0]
   d9ea2:	f3bf 8f5b 	dmb	ish
   d9ea6:	f011 0401 	ands.w	r4, r1, #1
{
   d9eaa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9eac:	d111      	bne.n	d9ed2 <_Z19__fetch_global_Wirev+0x36>
   d9eae:	4628      	mov	r0, r5
   d9eb0:	f7fa f902 	bl	d40b8 <__cxa_guard_acquire>
   d9eb4:	b168      	cbz	r0, d9ed2 <_Z19__fetch_global_Wirev+0x36>
   d9eb6:	a801      	add	r0, sp, #4
   d9eb8:	f7ff ffd8 	bl	d9e6c <_Z17acquireWireBufferv>
   d9ebc:	aa01      	add	r2, sp, #4
   d9ebe:	4621      	mov	r1, r4
   d9ec0:	4806      	ldr	r0, [pc, #24]	; (d9edc <_Z19__fetch_global_Wirev+0x40>)
   d9ec2:	f7ff fe27 	bl	d9b14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d9ec6:	4628      	mov	r0, r5
   d9ec8:	f7fa f8fb 	bl	d40c2 <__cxa_guard_release>
   d9ecc:	4804      	ldr	r0, [pc, #16]	; (d9ee0 <_Z19__fetch_global_Wirev+0x44>)
   d9ece:	f003 fc7d 	bl	dd7cc <atexit>
	return wire;
}
   d9ed2:	4802      	ldr	r0, [pc, #8]	; (d9edc <_Z19__fetch_global_Wirev+0x40>)
   d9ed4:	b007      	add	sp, #28
   d9ed6:	bd30      	pop	{r4, r5, pc}
   d9ed8:	2003e73c 	.word	0x2003e73c
   d9edc:	2003e740 	.word	0x2003e740
   d9ee0:	000d9e69 	.word	0x000d9e69

000d9ee4 <_ZdlPvj>:
   d9ee4:	f7fa b8db 	b.w	d409e <_ZdlPv>

000d9ee8 <_ZnajRKSt9nothrow_t>:
   d9ee8:	f7fa b8d7 	b.w	d409a <_Znaj>

000d9eec <_ZSt25__throw_bad_function_callv>:
   d9eec:	b508      	push	{r3, lr}
   d9eee:	f7fe fc07 	bl	d8700 <abort>
	...

000d9ef4 <cosf>:
   d9ef4:	b500      	push	{lr}
   d9ef6:	ee10 3a10 	vmov	r3, s0
   d9efa:	4a20      	ldr	r2, [pc, #128]	; (d9f7c <cosf+0x88>)
   d9efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d9f00:	4293      	cmp	r3, r2
   d9f02:	b083      	sub	sp, #12
   d9f04:	dd19      	ble.n	d9f3a <cosf+0x46>
   d9f06:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d9f0a:	db04      	blt.n	d9f16 <cosf+0x22>
   d9f0c:	ee30 0a40 	vsub.f32	s0, s0, s0
   d9f10:	b003      	add	sp, #12
   d9f12:	f85d fb04 	ldr.w	pc, [sp], #4
   d9f16:	4668      	mov	r0, sp
   d9f18:	f001 fa80 	bl	db41c <__ieee754_rem_pio2f>
   d9f1c:	f000 0003 	and.w	r0, r0, #3
   d9f20:	2801      	cmp	r0, #1
   d9f22:	d011      	beq.n	d9f48 <cosf+0x54>
   d9f24:	2802      	cmp	r0, #2
   d9f26:	d01f      	beq.n	d9f68 <cosf+0x74>
   d9f28:	b1b8      	cbz	r0, d9f5a <cosf+0x66>
   d9f2a:	eddd 0a01 	vldr	s1, [sp, #4]
   d9f2e:	ed9d 0a00 	vldr	s0, [sp]
   d9f32:	2001      	movs	r0, #1
   d9f34:	f001 ff74 	bl	dbe20 <__kernel_sinf>
   d9f38:	e7ea      	b.n	d9f10 <cosf+0x1c>
   d9f3a:	eddf 0a11 	vldr	s1, [pc, #68]	; d9f80 <cosf+0x8c>
   d9f3e:	f001 fbb7 	bl	db6b0 <__kernel_cosf>
   d9f42:	b003      	add	sp, #12
   d9f44:	f85d fb04 	ldr.w	pc, [sp], #4
   d9f48:	eddd 0a01 	vldr	s1, [sp, #4]
   d9f4c:	ed9d 0a00 	vldr	s0, [sp]
   d9f50:	f001 ff66 	bl	dbe20 <__kernel_sinf>
   d9f54:	eeb1 0a40 	vneg.f32	s0, s0
   d9f58:	e7da      	b.n	d9f10 <cosf+0x1c>
   d9f5a:	eddd 0a01 	vldr	s1, [sp, #4]
   d9f5e:	ed9d 0a00 	vldr	s0, [sp]
   d9f62:	f001 fba5 	bl	db6b0 <__kernel_cosf>
   d9f66:	e7d3      	b.n	d9f10 <cosf+0x1c>
   d9f68:	eddd 0a01 	vldr	s1, [sp, #4]
   d9f6c:	ed9d 0a00 	vldr	s0, [sp]
   d9f70:	f001 fb9e 	bl	db6b0 <__kernel_cosf>
   d9f74:	eeb1 0a40 	vneg.f32	s0, s0
   d9f78:	e7ca      	b.n	d9f10 <cosf+0x1c>
   d9f7a:	bf00      	nop
   d9f7c:	3f490fd8 	.word	0x3f490fd8
   d9f80:	00000000 	.word	0x00000000

000d9f84 <sinf>:
   d9f84:	b500      	push	{lr}
   d9f86:	ee10 3a10 	vmov	r3, s0
   d9f8a:	4a21      	ldr	r2, [pc, #132]	; (da010 <sinf+0x8c>)
   d9f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d9f90:	4293      	cmp	r3, r2
   d9f92:	b083      	sub	sp, #12
   d9f94:	dd1a      	ble.n	d9fcc <sinf+0x48>
   d9f96:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d9f9a:	db04      	blt.n	d9fa6 <sinf+0x22>
   d9f9c:	ee30 0a40 	vsub.f32	s0, s0, s0
   d9fa0:	b003      	add	sp, #12
   d9fa2:	f85d fb04 	ldr.w	pc, [sp], #4
   d9fa6:	4668      	mov	r0, sp
   d9fa8:	f001 fa38 	bl	db41c <__ieee754_rem_pio2f>
   d9fac:	f000 0003 	and.w	r0, r0, #3
   d9fb0:	2801      	cmp	r0, #1
   d9fb2:	d013      	beq.n	d9fdc <sinf+0x58>
   d9fb4:	2802      	cmp	r0, #2
   d9fb6:	d020      	beq.n	d9ffa <sinf+0x76>
   d9fb8:	b1b8      	cbz	r0, d9fea <sinf+0x66>
   d9fba:	eddd 0a01 	vldr	s1, [sp, #4]
   d9fbe:	ed9d 0a00 	vldr	s0, [sp]
   d9fc2:	f001 fb75 	bl	db6b0 <__kernel_cosf>
   d9fc6:	eeb1 0a40 	vneg.f32	s0, s0
   d9fca:	e7e9      	b.n	d9fa0 <sinf+0x1c>
   d9fcc:	eddf 0a11 	vldr	s1, [pc, #68]	; da014 <sinf+0x90>
   d9fd0:	2000      	movs	r0, #0
   d9fd2:	f001 ff25 	bl	dbe20 <__kernel_sinf>
   d9fd6:	b003      	add	sp, #12
   d9fd8:	f85d fb04 	ldr.w	pc, [sp], #4
   d9fdc:	eddd 0a01 	vldr	s1, [sp, #4]
   d9fe0:	ed9d 0a00 	vldr	s0, [sp]
   d9fe4:	f001 fb64 	bl	db6b0 <__kernel_cosf>
   d9fe8:	e7da      	b.n	d9fa0 <sinf+0x1c>
   d9fea:	eddd 0a01 	vldr	s1, [sp, #4]
   d9fee:	ed9d 0a00 	vldr	s0, [sp]
   d9ff2:	2001      	movs	r0, #1
   d9ff4:	f001 ff14 	bl	dbe20 <__kernel_sinf>
   d9ff8:	e7d2      	b.n	d9fa0 <sinf+0x1c>
   d9ffa:	eddd 0a01 	vldr	s1, [sp, #4]
   d9ffe:	ed9d 0a00 	vldr	s0, [sp]
   da002:	2001      	movs	r0, #1
   da004:	f001 ff0c 	bl	dbe20 <__kernel_sinf>
   da008:	eeb1 0a40 	vneg.f32	s0, s0
   da00c:	e7c8      	b.n	d9fa0 <sinf+0x1c>
   da00e:	bf00      	nop
   da010:	3f490fd8 	.word	0x3f490fd8
   da014:	00000000 	.word	0x00000000

000da018 <atan2>:
   da018:	f000 b9ba 	b.w	da390 <__ieee754_atan2>
   da01c:	0000      	movs	r0, r0
	...

000da020 <pow>:
   da020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da024:	ed2d 8b02 	vpush	{d8}
   da028:	b08d      	sub	sp, #52	; 0x34
   da02a:	ec57 6b10 	vmov	r6, r7, d0
   da02e:	ec55 4b11 	vmov	r4, r5, d1
   da032:	f000 faad 	bl	da590 <__ieee754_pow>
   da036:	4bae      	ldr	r3, [pc, #696]	; (da2f0 <pow+0x2d0>)
   da038:	eeb0 8a40 	vmov.f32	s16, s0
   da03c:	eef0 8a60 	vmov.f32	s17, s1
   da040:	f993 9000 	ldrsb.w	r9, [r3]
   da044:	f1b9 3fff 	cmp.w	r9, #4294967295
   da048:	d037      	beq.n	da0ba <pow+0x9a>
   da04a:	4622      	mov	r2, r4
   da04c:	462b      	mov	r3, r5
   da04e:	4620      	mov	r0, r4
   da050:	4629      	mov	r1, r5
   da052:	f003 f815 	bl	dd080 <__aeabi_dcmpun>
   da056:	4683      	mov	fp, r0
   da058:	bb78      	cbnz	r0, da0ba <pow+0x9a>
   da05a:	4632      	mov	r2, r6
   da05c:	463b      	mov	r3, r7
   da05e:	4630      	mov	r0, r6
   da060:	4639      	mov	r1, r7
   da062:	f003 f80d 	bl	dd080 <__aeabi_dcmpun>
   da066:	4680      	mov	r8, r0
   da068:	2800      	cmp	r0, #0
   da06a:	f040 8093 	bne.w	da194 <pow+0x174>
   da06e:	f04f 0a00 	mov.w	sl, #0
   da072:	f04f 0b00 	mov.w	fp, #0
   da076:	4630      	mov	r0, r6
   da078:	4639      	mov	r1, r7
   da07a:	4652      	mov	r2, sl
   da07c:	465b      	mov	r3, fp
   da07e:	f002 ffcd 	bl	dd01c <__aeabi_dcmpeq>
   da082:	b318      	cbz	r0, da0cc <pow+0xac>
   da084:	4652      	mov	r2, sl
   da086:	465b      	mov	r3, fp
   da088:	4620      	mov	r0, r4
   da08a:	4629      	mov	r1, r5
   da08c:	f002 ffc6 	bl	dd01c <__aeabi_dcmpeq>
   da090:	9000      	str	r0, [sp, #0]
   da092:	2800      	cmp	r0, #0
   da094:	d057      	beq.n	da146 <pow+0x126>
   da096:	4b97      	ldr	r3, [pc, #604]	; (da2f4 <pow+0x2d4>)
   da098:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   da09c:	2201      	movs	r2, #1
   da09e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da0a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da0a6:	e9cd ab08 	strd	sl, fp, [sp, #32]
   da0aa:	9202      	str	r2, [sp, #8]
   da0ac:	9303      	str	r3, [sp, #12]
   da0ae:	f1b9 0f00 	cmp.w	r9, #0
   da0b2:	f000 8089 	beq.w	da1c8 <pow+0x1a8>
   da0b6:	ed9f 8b8a 	vldr	d8, [pc, #552]	; da2e0 <pow+0x2c0>
   da0ba:	eeb0 0a48 	vmov.f32	s0, s16
   da0be:	eef0 0a68 	vmov.f32	s1, s17
   da0c2:	b00d      	add	sp, #52	; 0x34
   da0c4:	ecbd 8b02 	vpop	{d8}
   da0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da0cc:	eeb0 0a48 	vmov.f32	s0, s16
   da0d0:	eef0 0a68 	vmov.f32	s1, s17
   da0d4:	f002 f8aa 	bl	dc22c <finite>
   da0d8:	4680      	mov	r8, r0
   da0da:	2800      	cmp	r0, #0
   da0dc:	f000 8082 	beq.w	da1e4 <pow+0x1c4>
   da0e0:	f04f 0800 	mov.w	r8, #0
   da0e4:	f04f 0900 	mov.w	r9, #0
   da0e8:	ec51 0b18 	vmov	r0, r1, d8
   da0ec:	4642      	mov	r2, r8
   da0ee:	464b      	mov	r3, r9
   da0f0:	f002 ff94 	bl	dd01c <__aeabi_dcmpeq>
   da0f4:	2800      	cmp	r0, #0
   da0f6:	d0e0      	beq.n	da0ba <pow+0x9a>
   da0f8:	ec47 6b10 	vmov	d0, r6, r7
   da0fc:	f002 f896 	bl	dc22c <finite>
   da100:	2800      	cmp	r0, #0
   da102:	d0da      	beq.n	da0ba <pow+0x9a>
   da104:	ec45 4b10 	vmov	d0, r4, r5
   da108:	f002 f890 	bl	dc22c <finite>
   da10c:	2800      	cmp	r0, #0
   da10e:	d0d4      	beq.n	da0ba <pow+0x9a>
   da110:	4b77      	ldr	r3, [pc, #476]	; (da2f0 <pow+0x2d0>)
   da112:	4a78      	ldr	r2, [pc, #480]	; (da2f4 <pow+0x2d4>)
   da114:	f993 3000 	ldrsb.w	r3, [r3]
   da118:	9203      	str	r2, [sp, #12]
   da11a:	2104      	movs	r1, #4
   da11c:	2200      	movs	r2, #0
   da11e:	2b02      	cmp	r3, #2
   da120:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da124:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da128:	e9cd 8908 	strd	r8, r9, [sp, #32]
   da12c:	9102      	str	r1, [sp, #8]
   da12e:	920a      	str	r2, [sp, #40]	; 0x28
   da130:	d004      	beq.n	da13c <pow+0x11c>
   da132:	a802      	add	r0, sp, #8
   da134:	f002 f886 	bl	dc244 <matherr>
   da138:	2800      	cmp	r0, #0
   da13a:	d14a      	bne.n	da1d2 <pow+0x1b2>
   da13c:	f7fe faf0 	bl	d8720 <__errno>
   da140:	2322      	movs	r3, #34	; 0x22
   da142:	6003      	str	r3, [r0, #0]
   da144:	e045      	b.n	da1d2 <pow+0x1b2>
   da146:	ec45 4b10 	vmov	d0, r4, r5
   da14a:	f002 f86f 	bl	dc22c <finite>
   da14e:	2800      	cmp	r0, #0
   da150:	d0b3      	beq.n	da0ba <pow+0x9a>
   da152:	4652      	mov	r2, sl
   da154:	465b      	mov	r3, fp
   da156:	4620      	mov	r0, r4
   da158:	4629      	mov	r1, r5
   da15a:	f002 ff69 	bl	dd030 <__aeabi_dcmplt>
   da15e:	2800      	cmp	r0, #0
   da160:	d0ab      	beq.n	da0ba <pow+0x9a>
   da162:	4b63      	ldr	r3, [pc, #396]	; (da2f0 <pow+0x2d0>)
   da164:	9900      	ldr	r1, [sp, #0]
   da166:	4a63      	ldr	r2, [pc, #396]	; (da2f4 <pow+0x2d4>)
   da168:	f993 3000 	ldrsb.w	r3, [r3]
   da16c:	910a      	str	r1, [sp, #40]	; 0x28
   da16e:	2101      	movs	r1, #1
   da170:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da174:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da178:	e9cd 1202 	strd	r1, r2, [sp, #8]
   da17c:	2b00      	cmp	r3, #0
   da17e:	d16f      	bne.n	da260 <pow+0x240>
   da180:	e9cd ab08 	strd	sl, fp, [sp, #32]
   da184:	a802      	add	r0, sp, #8
   da186:	f002 f85d 	bl	dc244 <matherr>
   da18a:	2800      	cmp	r0, #0
   da18c:	d06e      	beq.n	da26c <pow+0x24c>
   da18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da190:	b32b      	cbz	r3, da1de <pow+0x1be>
   da192:	e020      	b.n	da1d6 <pow+0x1b6>
   da194:	2200      	movs	r2, #0
   da196:	2300      	movs	r3, #0
   da198:	4620      	mov	r0, r4
   da19a:	4629      	mov	r1, r5
   da19c:	f002 ff3e 	bl	dd01c <__aeabi_dcmpeq>
   da1a0:	2800      	cmp	r0, #0
   da1a2:	d08a      	beq.n	da0ba <pow+0x9a>
   da1a4:	ed9f 8b4e 	vldr	d8, [pc, #312]	; da2e0 <pow+0x2c0>
   da1a8:	4b52      	ldr	r3, [pc, #328]	; (da2f4 <pow+0x2d4>)
   da1aa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   da1ae:	2201      	movs	r2, #1
   da1b0:	f1b9 0f02 	cmp.w	r9, #2
   da1b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da1b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da1bc:	ed8d 8b08 	vstr	d8, [sp, #32]
   da1c0:	9202      	str	r2, [sp, #8]
   da1c2:	9303      	str	r3, [sp, #12]
   da1c4:	f43f af79 	beq.w	da0ba <pow+0x9a>
   da1c8:	a802      	add	r0, sp, #8
   da1ca:	f002 f83b 	bl	dc244 <matherr>
   da1ce:	2800      	cmp	r0, #0
   da1d0:	d051      	beq.n	da276 <pow+0x256>
   da1d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da1d4:	b11b      	cbz	r3, da1de <pow+0x1be>
   da1d6:	f7fe faa3 	bl	d8720 <__errno>
   da1da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da1dc:	6003      	str	r3, [r0, #0]
   da1de:	ed9d 8b08 	vldr	d8, [sp, #32]
   da1e2:	e76a      	b.n	da0ba <pow+0x9a>
   da1e4:	ec47 6b10 	vmov	d0, r6, r7
   da1e8:	f002 f820 	bl	dc22c <finite>
   da1ec:	2800      	cmp	r0, #0
   da1ee:	f43f af77 	beq.w	da0e0 <pow+0xc0>
   da1f2:	ec45 4b10 	vmov	d0, r4, r5
   da1f6:	f002 f819 	bl	dc22c <finite>
   da1fa:	2800      	cmp	r0, #0
   da1fc:	f43f af70 	beq.w	da0e0 <pow+0xc0>
   da200:	ec53 2b18 	vmov	r2, r3, d8
   da204:	ee18 0a10 	vmov	r0, s16
   da208:	4619      	mov	r1, r3
   da20a:	f002 ff39 	bl	dd080 <__aeabi_dcmpun>
   da20e:	4b38      	ldr	r3, [pc, #224]	; (da2f0 <pow+0x2d0>)
   da210:	2800      	cmp	r0, #0
   da212:	f040 8096 	bne.w	da342 <pow+0x322>
   da216:	f993 8000 	ldrsb.w	r8, [r3]
   da21a:	900a      	str	r0, [sp, #40]	; 0x28
   da21c:	2303      	movs	r3, #3
   da21e:	9302      	str	r3, [sp, #8]
   da220:	4b34      	ldr	r3, [pc, #208]	; (da2f4 <pow+0x2d4>)
   da222:	9303      	str	r3, [sp, #12]
   da224:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da228:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da22c:	f1b8 0f00 	cmp.w	r8, #0
   da230:	d126      	bne.n	da280 <pow+0x260>
   da232:	f8df 90d0 	ldr.w	r9, [pc, #208]	; da304 <pow+0x2e4>
   da236:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   da23a:	4652      	mov	r2, sl
   da23c:	465b      	mov	r3, fp
   da23e:	4630      	mov	r0, r6
   da240:	4639      	mov	r1, r7
   da242:	e9cd 8908 	strd	r8, r9, [sp, #32]
   da246:	f002 fef3 	bl	dd030 <__aeabi_dcmplt>
   da24a:	bb48      	cbnz	r0, da2a0 <pow+0x280>
   da24c:	a802      	add	r0, sp, #8
   da24e:	f001 fff9 	bl	dc244 <matherr>
   da252:	2800      	cmp	r0, #0
   da254:	d19b      	bne.n	da18e <pow+0x16e>
   da256:	f7fe fa63 	bl	d8720 <__errno>
   da25a:	2322      	movs	r3, #34	; 0x22
   da25c:	6003      	str	r3, [r0, #0]
   da25e:	e796      	b.n	da18e <pow+0x16e>
   da260:	4925      	ldr	r1, [pc, #148]	; (da2f8 <pow+0x2d8>)
   da262:	2000      	movs	r0, #0
   da264:	2b02      	cmp	r3, #2
   da266:	e9cd 0108 	strd	r0, r1, [sp, #32]
   da26a:	d18b      	bne.n	da184 <pow+0x164>
   da26c:	f7fe fa58 	bl	d8720 <__errno>
   da270:	2321      	movs	r3, #33	; 0x21
   da272:	6003      	str	r3, [r0, #0]
   da274:	e78b      	b.n	da18e <pow+0x16e>
   da276:	f7fe fa53 	bl	d8720 <__errno>
   da27a:	2321      	movs	r3, #33	; 0x21
   da27c:	6003      	str	r3, [r0, #0]
   da27e:	e7a8      	b.n	da1d2 <pow+0x1b2>
   da280:	ed9f 7b19 	vldr	d7, [pc, #100]	; da2e8 <pow+0x2c8>
   da284:	4652      	mov	r2, sl
   da286:	465b      	mov	r3, fp
   da288:	4630      	mov	r0, r6
   da28a:	4639      	mov	r1, r7
   da28c:	ed8d 7b08 	vstr	d7, [sp, #32]
   da290:	f002 fece 	bl	dd030 <__aeabi_dcmplt>
   da294:	2800      	cmp	r0, #0
   da296:	d137      	bne.n	da308 <pow+0x2e8>
   da298:	f1b8 0f02 	cmp.w	r8, #2
   da29c:	d0db      	beq.n	da256 <pow+0x236>
   da29e:	e7d5      	b.n	da24c <pow+0x22c>
   da2a0:	4b16      	ldr	r3, [pc, #88]	; (da2fc <pow+0x2dc>)
   da2a2:	2200      	movs	r2, #0
   da2a4:	4620      	mov	r0, r4
   da2a6:	4629      	mov	r1, r5
   da2a8:	f002 fc50 	bl	dcb4c <__aeabi_dmul>
   da2ac:	4602      	mov	r2, r0
   da2ae:	460b      	mov	r3, r1
   da2b0:	ec43 2b10 	vmov	d0, r2, r3
   da2b4:	e9cd 2300 	strd	r2, r3, [sp]
   da2b8:	f001 ffce 	bl	dc258 <rint>
   da2bc:	e9dd 2300 	ldrd	r2, r3, [sp]
   da2c0:	ec51 0b10 	vmov	r0, r1, d0
   da2c4:	f002 feaa 	bl	dd01c <__aeabi_dcmpeq>
   da2c8:	2800      	cmp	r0, #0
   da2ca:	d136      	bne.n	da33a <pow+0x31a>
   da2cc:	4b0c      	ldr	r3, [pc, #48]	; (da300 <pow+0x2e0>)
   da2ce:	4908      	ldr	r1, [pc, #32]	; (da2f0 <pow+0x2d0>)
   da2d0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   da2d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   da2d8:	f991 8000 	ldrsb.w	r8, [r1]
   da2dc:	e7dc      	b.n	da298 <pow+0x278>
   da2de:	bf00      	nop
   da2e0:	00000000 	.word	0x00000000
   da2e4:	3ff00000 	.word	0x3ff00000
   da2e8:	00000000 	.word	0x00000000
   da2ec:	7ff00000 	.word	0x7ff00000
   da2f0:	2003e3d4 	.word	0x2003e3d4
   da2f4:	000deb84 	.word	0x000deb84
   da2f8:	fff00000 	.word	0xfff00000
   da2fc:	3fe00000 	.word	0x3fe00000
   da300:	c7efffff 	.word	0xc7efffff
   da304:	47efffff 	.word	0x47efffff
   da308:	4b1c      	ldr	r3, [pc, #112]	; (da37c <pow+0x35c>)
   da30a:	2200      	movs	r2, #0
   da30c:	4620      	mov	r0, r4
   da30e:	4629      	mov	r1, r5
   da310:	f002 fc1c 	bl	dcb4c <__aeabi_dmul>
   da314:	4602      	mov	r2, r0
   da316:	460b      	mov	r3, r1
   da318:	ec43 2b10 	vmov	d0, r2, r3
   da31c:	e9cd 2300 	strd	r2, r3, [sp]
   da320:	f001 ff9a 	bl	dc258 <rint>
   da324:	e9dd 2300 	ldrd	r2, r3, [sp]
   da328:	ec51 0b10 	vmov	r0, r1, d0
   da32c:	f002 fe76 	bl	dd01c <__aeabi_dcmpeq>
   da330:	b918      	cbnz	r0, da33a <pow+0x31a>
   da332:	4b13      	ldr	r3, [pc, #76]	; (da380 <pow+0x360>)
   da334:	2200      	movs	r2, #0
   da336:	e9cd 2308 	strd	r2, r3, [sp, #32]
   da33a:	4b12      	ldr	r3, [pc, #72]	; (da384 <pow+0x364>)
   da33c:	f993 8000 	ldrsb.w	r8, [r3]
   da340:	e7aa      	b.n	da298 <pow+0x278>
   da342:	f993 9000 	ldrsb.w	r9, [r3]
   da346:	4b10      	ldr	r3, [pc, #64]	; (da388 <pow+0x368>)
   da348:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   da34c:	2201      	movs	r2, #1
   da34e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da352:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da356:	e9cd 2302 	strd	r2, r3, [sp, #8]
   da35a:	f1b9 0f00 	cmp.w	r9, #0
   da35e:	f43f af0f 	beq.w	da180 <pow+0x160>
   da362:	4652      	mov	r2, sl
   da364:	465b      	mov	r3, fp
   da366:	4650      	mov	r0, sl
   da368:	4659      	mov	r1, fp
   da36a:	f002 fd19 	bl	dcda0 <__aeabi_ddiv>
   da36e:	f1b9 0f02 	cmp.w	r9, #2
   da372:	e9cd 0108 	strd	r0, r1, [sp, #32]
   da376:	f43f af79 	beq.w	da26c <pow+0x24c>
   da37a:	e703      	b.n	da184 <pow+0x164>
   da37c:	3fe00000 	.word	0x3fe00000
   da380:	fff00000 	.word	0xfff00000
   da384:	2003e3d4 	.word	0x2003e3d4
   da388:	000deb84 	.word	0x000deb84

000da38c <atan2f>:
   da38c:	f000 bf9e 	b.w	db2cc <__ieee754_atan2f>

000da390 <__ieee754_atan2>:
   da390:	ec51 0b11 	vmov	r0, r1, d1
   da394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da398:	4243      	negs	r3, r0
   da39a:	4e79      	ldr	r6, [pc, #484]	; (da580 <__ieee754_atan2+0x1f0>)
   da39c:	4303      	orrs	r3, r0
   da39e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   da3a2:	ea4c 73d3 	orr.w	r3, ip, r3, lsr #31
   da3a6:	42b3      	cmp	r3, r6
   da3a8:	ec55 4b10 	vmov	r4, r5, d0
   da3ac:	b082      	sub	sp, #8
   da3ae:	d847      	bhi.n	da440 <__ieee754_atan2+0xb0>
   da3b0:	4263      	negs	r3, r4
   da3b2:	4323      	orrs	r3, r4
   da3b4:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   da3b8:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   da3bc:	42b3      	cmp	r3, r6
   da3be:	ee10 ea10 	vmov	lr, s0
   da3c2:	46a9      	mov	r9, r5
   da3c4:	d83c      	bhi.n	da440 <__ieee754_atan2+0xb0>
   da3c6:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   da3ca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   da3ce:	4303      	orrs	r3, r0
   da3d0:	d04c      	beq.n	da46c <__ieee754_atan2+0xdc>
   da3d2:	ea4f 78a1 	mov.w	r8, r1, asr #30
   da3d6:	f008 0802 	and.w	r8, r8, #2
   da3da:	ea5a 0304 	orrs.w	r3, sl, r4
   da3de:	ea48 78d5 	orr.w	r8, r8, r5, lsr #31
   da3e2:	d038      	beq.n	da456 <__ieee754_atan2+0xc6>
   da3e4:	ea5c 0300 	orrs.w	r3, ip, r0
   da3e8:	d048      	beq.n	da47c <__ieee754_atan2+0xec>
   da3ea:	45b4      	cmp	ip, r6
   da3ec:	d05d      	beq.n	da4aa <__ieee754_atan2+0x11a>
   da3ee:	45b2      	cmp	sl, r6
   da3f0:	d044      	beq.n	da47c <__ieee754_atan2+0xec>
   da3f2:	ebaa 0c0c 	sub.w	ip, sl, ip
   da3f6:	f1bc 7f74 	cmp.w	ip, #63963136	; 0x3d00000
   da3fa:	ea4f 532c 	mov.w	r3, ip, asr #20
   da3fe:	da4f      	bge.n	da4a0 <__ieee754_atan2+0x110>
   da400:	2900      	cmp	r1, #0
   da402:	da61      	bge.n	da4c8 <__ieee754_atan2+0x138>
   da404:	333c      	adds	r3, #60	; 0x3c
   da406:	da5f      	bge.n	da4c8 <__ieee754_atan2+0x138>
   da408:	ed9f 7b4f 	vldr	d7, [pc, #316]	; da548 <__ieee754_atan2+0x1b8>
   da40c:	ed8d 7b00 	vstr	d7, [sp]
   da410:	f1b8 0f01 	cmp.w	r8, #1
   da414:	d078      	beq.n	da508 <__ieee754_atan2+0x178>
   da416:	f1b8 0f02 	cmp.w	r8, #2
   da41a:	d064      	beq.n	da4e6 <__ieee754_atan2+0x156>
   da41c:	f1b8 0f00 	cmp.w	r8, #0
   da420:	d014      	beq.n	da44c <__ieee754_atan2+0xbc>
   da422:	a34b      	add	r3, pc, #300	; (adr r3, da550 <__ieee754_atan2+0x1c0>)
   da424:	e9d3 2300 	ldrd	r2, r3, [r3]
   da428:	e9dd 0100 	ldrd	r0, r1, [sp]
   da42c:	f002 f9d6 	bl	dc7dc <__aeabi_dsub>
   da430:	a349      	add	r3, pc, #292	; (adr r3, da558 <__ieee754_atan2+0x1c8>)
   da432:	e9d3 2300 	ldrd	r2, r3, [r3]
   da436:	f002 f9d1 	bl	dc7dc <__aeabi_dsub>
   da43a:	e9cd 0100 	strd	r0, r1, [sp]
   da43e:	e005      	b.n	da44c <__ieee754_atan2+0xbc>
   da440:	4622      	mov	r2, r4
   da442:	462b      	mov	r3, r5
   da444:	f002 f9cc 	bl	dc7e0 <__adddf3>
   da448:	e9cd 0100 	strd	r0, r1, [sp]
   da44c:	ed9d 0b00 	vldr	d0, [sp]
   da450:	b002      	add	sp, #8
   da452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da456:	f1b8 0f02 	cmp.w	r8, #2
   da45a:	d017      	beq.n	da48c <__ieee754_atan2+0xfc>
   da45c:	f1b8 0f03 	cmp.w	r8, #3
   da460:	d109      	bne.n	da476 <__ieee754_atan2+0xe6>
   da462:	ed9f 7b3f 	vldr	d7, [pc, #252]	; da560 <__ieee754_atan2+0x1d0>
   da466:	ed8d 7b00 	vstr	d7, [sp]
   da46a:	e7ef      	b.n	da44c <__ieee754_atan2+0xbc>
   da46c:	b002      	add	sp, #8
   da46e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da472:	f001 bd1d 	b.w	dbeb0 <atan>
   da476:	ed8d 0b00 	vstr	d0, [sp]
   da47a:	e7e7      	b.n	da44c <__ieee754_atan2+0xbc>
   da47c:	f1b9 0f00 	cmp.w	r9, #0
   da480:	db09      	blt.n	da496 <__ieee754_atan2+0x106>
   da482:	ed9f 7b39 	vldr	d7, [pc, #228]	; da568 <__ieee754_atan2+0x1d8>
   da486:	ed8d 7b00 	vstr	d7, [sp]
   da48a:	e7df      	b.n	da44c <__ieee754_atan2+0xbc>
   da48c:	ed9f 7b32 	vldr	d7, [pc, #200]	; da558 <__ieee754_atan2+0x1c8>
   da490:	ed8d 7b00 	vstr	d7, [sp]
   da494:	e7da      	b.n	da44c <__ieee754_atan2+0xbc>
   da496:	ed9f 7b36 	vldr	d7, [pc, #216]	; da570 <__ieee754_atan2+0x1e0>
   da49a:	ed8d 7b00 	vstr	d7, [sp]
   da49e:	e7d5      	b.n	da44c <__ieee754_atan2+0xbc>
   da4a0:	ed9f 7b31 	vldr	d7, [pc, #196]	; da568 <__ieee754_atan2+0x1d8>
   da4a4:	ed8d 7b00 	vstr	d7, [sp]
   da4a8:	e7b2      	b.n	da410 <__ieee754_atan2+0x80>
   da4aa:	45e2      	cmp	sl, ip
   da4ac:	f108 38ff 	add.w	r8, r8, #4294967295
   da4b0:	d032      	beq.n	da518 <__ieee754_atan2+0x188>
   da4b2:	f1b8 0f02 	cmp.w	r8, #2
   da4b6:	d83a      	bhi.n	da52e <__ieee754_atan2+0x19e>
   da4b8:	4b32      	ldr	r3, [pc, #200]	; (da584 <__ieee754_atan2+0x1f4>)
   da4ba:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   da4be:	ed98 7b00 	vldr	d7, [r8]
   da4c2:	ed8d 7b00 	vstr	d7, [sp]
   da4c6:	e7c1      	b.n	da44c <__ieee754_atan2+0xbc>
   da4c8:	4602      	mov	r2, r0
   da4ca:	460b      	mov	r3, r1
   da4cc:	4620      	mov	r0, r4
   da4ce:	4629      	mov	r1, r5
   da4d0:	f002 fc66 	bl	dcda0 <__aeabi_ddiv>
   da4d4:	ec41 0b10 	vmov	d0, r0, r1
   da4d8:	f001 fe9e 	bl	dc218 <fabs>
   da4dc:	f001 fce8 	bl	dbeb0 <atan>
   da4e0:	ed8d 0b00 	vstr	d0, [sp]
   da4e4:	e794      	b.n	da410 <__ieee754_atan2+0x80>
   da4e6:	a31a      	add	r3, pc, #104	; (adr r3, da550 <__ieee754_atan2+0x1c0>)
   da4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   da4ec:	e9dd 0100 	ldrd	r0, r1, [sp]
   da4f0:	f002 f974 	bl	dc7dc <__aeabi_dsub>
   da4f4:	4602      	mov	r2, r0
   da4f6:	460b      	mov	r3, r1
   da4f8:	a117      	add	r1, pc, #92	; (adr r1, da558 <__ieee754_atan2+0x1c8>)
   da4fa:	e9d1 0100 	ldrd	r0, r1, [r1]
   da4fe:	f002 f96d 	bl	dc7dc <__aeabi_dsub>
   da502:	e9cd 0100 	strd	r0, r1, [sp]
   da506:	e7a1      	b.n	da44c <__ieee754_atan2+0xbc>
   da508:	e9dd 2300 	ldrd	r2, r3, [sp]
   da50c:	9901      	ldr	r1, [sp, #4]
   da50e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da512:	e9cd 2300 	strd	r2, r3, [sp]
   da516:	e799      	b.n	da44c <__ieee754_atan2+0xbc>
   da518:	f1b8 0f02 	cmp.w	r8, #2
   da51c:	d80c      	bhi.n	da538 <__ieee754_atan2+0x1a8>
   da51e:	4b1a      	ldr	r3, [pc, #104]	; (da588 <__ieee754_atan2+0x1f8>)
   da520:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   da524:	ed98 7b00 	vldr	d7, [r8]
   da528:	ed8d 7b00 	vstr	d7, [sp]
   da52c:	e78e      	b.n	da44c <__ieee754_atan2+0xbc>
   da52e:	ed9f 7b06 	vldr	d7, [pc, #24]	; da548 <__ieee754_atan2+0x1b8>
   da532:	ed8d 7b00 	vstr	d7, [sp]
   da536:	e789      	b.n	da44c <__ieee754_atan2+0xbc>
   da538:	ed9f 7b0f 	vldr	d7, [pc, #60]	; da578 <__ieee754_atan2+0x1e8>
   da53c:	ed8d 7b00 	vstr	d7, [sp]
   da540:	e784      	b.n	da44c <__ieee754_atan2+0xbc>
   da542:	bf00      	nop
   da544:	f3af 8000 	nop.w
	...
   da550:	33145c07 	.word	0x33145c07
   da554:	3ca1a626 	.word	0x3ca1a626
   da558:	54442d18 	.word	0x54442d18
   da55c:	400921fb 	.word	0x400921fb
   da560:	54442d18 	.word	0x54442d18
   da564:	c00921fb 	.word	0xc00921fb
   da568:	54442d18 	.word	0x54442d18
   da56c:	3ff921fb 	.word	0x3ff921fb
   da570:	54442d18 	.word	0x54442d18
   da574:	bff921fb 	.word	0xbff921fb
   da578:	54442d18 	.word	0x54442d18
   da57c:	3fe921fb 	.word	0x3fe921fb
   da580:	7ff00000 	.word	0x7ff00000
   da584:	000deba0 	.word	0x000deba0
   da588:	000deb88 	.word	0x000deb88
   da58c:	00000000 	.word	0x00000000

000da590 <__ieee754_pow>:
   da590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da594:	ec57 6b11 	vmov	r6, r7, d1
   da598:	ed2d 8b0a 	vpush	{d8-d12}
   da59c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   da5a0:	ea5a 0206 	orrs.w	r2, sl, r6
   da5a4:	b089      	sub	sp, #36	; 0x24
   da5a6:	d03d      	beq.n	da624 <__ieee754_pow+0x94>
   da5a8:	ec55 4b10 	vmov	r4, r5, d0
   da5ac:	4976      	ldr	r1, [pc, #472]	; (da788 <__ieee754_pow+0x1f8>)
   da5ae:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   da5b2:	4588      	cmp	r8, r1
   da5b4:	ee10 2a10 	vmov	r2, s0
   da5b8:	46a9      	mov	r9, r5
   da5ba:	dc2c      	bgt.n	da616 <__ieee754_pow+0x86>
   da5bc:	ee11 3a10 	vmov	r3, s2
   da5c0:	46bb      	mov	fp, r7
   da5c2:	d03a      	beq.n	da63a <__ieee754_pow+0xaa>
   da5c4:	458a      	cmp	sl, r1
   da5c6:	dc26      	bgt.n	da616 <__ieee754_pow+0x86>
   da5c8:	496f      	ldr	r1, [pc, #444]	; (da788 <__ieee754_pow+0x1f8>)
   da5ca:	458a      	cmp	sl, r1
   da5cc:	d021      	beq.n	da612 <__ieee754_pow+0x82>
   da5ce:	f1b9 0f00 	cmp.w	r9, #0
   da5d2:	db3d      	blt.n	da650 <__ieee754_pow+0xc0>
   da5d4:	2100      	movs	r1, #0
   da5d6:	9103      	str	r1, [sp, #12]
   da5d8:	2b00      	cmp	r3, #0
   da5da:	d155      	bne.n	da688 <__ieee754_pow+0xf8>
   da5dc:	4b6a      	ldr	r3, [pc, #424]	; (da788 <__ieee754_pow+0x1f8>)
   da5de:	459a      	cmp	sl, r3
   da5e0:	f000 80a8 	beq.w	da734 <__ieee754_pow+0x1a4>
   da5e4:	4b69      	ldr	r3, [pc, #420]	; (da78c <__ieee754_pow+0x1fc>)
   da5e6:	459a      	cmp	sl, r3
   da5e8:	f000 80b6 	beq.w	da758 <__ieee754_pow+0x1c8>
   da5ec:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   da5f0:	f000 8501 	beq.w	daff6 <__ieee754_pow+0xa66>
   da5f4:	4b66      	ldr	r3, [pc, #408]	; (da790 <__ieee754_pow+0x200>)
   da5f6:	459b      	cmp	fp, r3
   da5f8:	d146      	bne.n	da688 <__ieee754_pow+0xf8>
   da5fa:	f1b9 0f00 	cmp.w	r9, #0
   da5fe:	db43      	blt.n	da688 <__ieee754_pow+0xf8>
   da600:	ec45 4b10 	vmov	d0, r4, r5
   da604:	b009      	add	sp, #36	; 0x24
   da606:	ecbd 8b0a 	vpop	{d8-d12}
   da60a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da60e:	f000 bd99 	b.w	db144 <__ieee754_sqrt>
   da612:	2b00      	cmp	r3, #0
   da614:	d0db      	beq.n	da5ce <__ieee754_pow+0x3e>
   da616:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   da61a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   da61e:	ea58 0302 	orrs.w	r3, r8, r2
   da622:	d10d      	bne.n	da640 <__ieee754_pow+0xb0>
   da624:	ed9f 7b54 	vldr	d7, [pc, #336]	; da778 <__ieee754_pow+0x1e8>
   da628:	ed8d 7b00 	vstr	d7, [sp]
   da62c:	ed9d 0b00 	vldr	d0, [sp]
   da630:	b009      	add	sp, #36	; 0x24
   da632:	ecbd 8b0a 	vpop	{d8-d12}
   da636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da63a:	b90c      	cbnz	r4, da640 <__ieee754_pow+0xb0>
   da63c:	45c2      	cmp	sl, r8
   da63e:	ddc3      	ble.n	da5c8 <__ieee754_pow+0x38>
   da640:	4854      	ldr	r0, [pc, #336]	; (da794 <__ieee754_pow+0x204>)
   da642:	b009      	add	sp, #36	; 0x24
   da644:	ecbd 8b0a 	vpop	{d8-d12}
   da648:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da64c:	f001 bdfc 	b.w	dc248 <nan>
   da650:	4951      	ldr	r1, [pc, #324]	; (da798 <__ieee754_pow+0x208>)
   da652:	458a      	cmp	sl, r1
   da654:	f300 8087 	bgt.w	da766 <__ieee754_pow+0x1d6>
   da658:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   da65c:	458a      	cmp	sl, r1
   da65e:	dd0f      	ble.n	da680 <__ieee754_pow+0xf0>
   da660:	ea4f 512a 	mov.w	r1, sl, asr #20
   da664:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   da668:	2914      	cmp	r1, #20
   da66a:	f340 84ce 	ble.w	db00a <__ieee754_pow+0xa7a>
   da66e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   da672:	fa23 f001 	lsr.w	r0, r3, r1
   da676:	fa00 f101 	lsl.w	r1, r0, r1
   da67a:	4299      	cmp	r1, r3
   da67c:	f000 8520 	beq.w	db0c0 <__ieee754_pow+0xb30>
   da680:	2100      	movs	r1, #0
   da682:	9103      	str	r1, [sp, #12]
   da684:	2b00      	cmp	r3, #0
   da686:	d0ad      	beq.n	da5e4 <__ieee754_pow+0x54>
   da688:	ec45 4b10 	vmov	d0, r4, r5
   da68c:	9206      	str	r2, [sp, #24]
   da68e:	f001 fdc3 	bl	dc218 <fabs>
   da692:	9a06      	ldr	r2, [sp, #24]
   da694:	ed8d 0b00 	vstr	d0, [sp]
   da698:	bb5a      	cbnz	r2, da6f2 <__ieee754_pow+0x162>
   da69a:	f1b8 0f00 	cmp.w	r8, #0
   da69e:	d004      	beq.n	da6aa <__ieee754_pow+0x11a>
   da6a0:	4b3a      	ldr	r3, [pc, #232]	; (da78c <__ieee754_pow+0x1fc>)
   da6a2:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   da6a6:	429a      	cmp	r2, r3
   da6a8:	d123      	bne.n	da6f2 <__ieee754_pow+0x162>
   da6aa:	f1bb 0f00 	cmp.w	fp, #0
   da6ae:	da07      	bge.n	da6c0 <__ieee754_pow+0x130>
   da6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
   da6b4:	4935      	ldr	r1, [pc, #212]	; (da78c <__ieee754_pow+0x1fc>)
   da6b6:	2000      	movs	r0, #0
   da6b8:	f002 fb72 	bl	dcda0 <__aeabi_ddiv>
   da6bc:	e9cd 0100 	strd	r0, r1, [sp]
   da6c0:	f1b9 0f00 	cmp.w	r9, #0
   da6c4:	dab2      	bge.n	da62c <__ieee754_pow+0x9c>
   da6c6:	9b03      	ldr	r3, [sp, #12]
   da6c8:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   da6cc:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   da6d0:	ea58 0303 	orrs.w	r3, r8, r3
   da6d4:	f040 84be 	bne.w	db054 <__ieee754_pow+0xac4>
   da6d8:	e9dd 2300 	ldrd	r2, r3, [sp]
   da6dc:	4610      	mov	r0, r2
   da6de:	4619      	mov	r1, r3
   da6e0:	f002 f87c 	bl	dc7dc <__aeabi_dsub>
   da6e4:	4602      	mov	r2, r0
   da6e6:	460b      	mov	r3, r1
   da6e8:	f002 fb5a 	bl	dcda0 <__aeabi_ddiv>
   da6ec:	e9cd 0100 	strd	r0, r1, [sp]
   da6f0:	e79c      	b.n	da62c <__ieee754_pow+0x9c>
   da6f2:	9a03      	ldr	r2, [sp, #12]
   da6f4:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   da6f8:	3b01      	subs	r3, #1
   da6fa:	9306      	str	r3, [sp, #24]
   da6fc:	4313      	orrs	r3, r2
   da6fe:	d035      	beq.n	da76c <__ieee754_pow+0x1dc>
   da700:	4b26      	ldr	r3, [pc, #152]	; (da79c <__ieee754_pow+0x20c>)
   da702:	459a      	cmp	sl, r3
   da704:	dd4e      	ble.n	da7a4 <__ieee754_pow+0x214>
   da706:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   da70a:	459a      	cmp	sl, r3
   da70c:	4b24      	ldr	r3, [pc, #144]	; (da7a0 <__ieee754_pow+0x210>)
   da70e:	f340 83ed 	ble.w	daeec <__ieee754_pow+0x95c>
   da712:	4598      	cmp	r8, r3
   da714:	f340 836b 	ble.w	dadee <__ieee754_pow+0x85e>
   da718:	f1bb 0f00 	cmp.w	fp, #0
   da71c:	f340 836b 	ble.w	dadf6 <__ieee754_pow+0x866>
   da720:	a317      	add	r3, pc, #92	; (adr r3, da780 <__ieee754_pow+0x1f0>)
   da722:	e9d3 2300 	ldrd	r2, r3, [r3]
   da726:	4610      	mov	r0, r2
   da728:	4619      	mov	r1, r3
   da72a:	f002 fa0f 	bl	dcb4c <__aeabi_dmul>
   da72e:	e9cd 0100 	strd	r0, r1, [sp]
   da732:	e77b      	b.n	da62c <__ieee754_pow+0x9c>
   da734:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   da738:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   da73c:	4313      	orrs	r3, r2
   da73e:	f43f af71 	beq.w	da624 <__ieee754_pow+0x94>
   da742:	4b17      	ldr	r3, [pc, #92]	; (da7a0 <__ieee754_pow+0x210>)
   da744:	4598      	cmp	r8, r3
   da746:	f340 8388 	ble.w	dae5a <__ieee754_pow+0x8ca>
   da74a:	f1bb 0f00 	cmp.w	fp, #0
   da74e:	f2c0 8352 	blt.w	dadf6 <__ieee754_pow+0x866>
   da752:	e9cd 6700 	strd	r6, r7, [sp]
   da756:	e769      	b.n	da62c <__ieee754_pow+0x9c>
   da758:	f1bb 0f00 	cmp.w	fp, #0
   da75c:	f2c0 8441 	blt.w	dafe2 <__ieee754_pow+0xa52>
   da760:	e9cd 4500 	strd	r4, r5, [sp]
   da764:	e762      	b.n	da62c <__ieee754_pow+0x9c>
   da766:	2102      	movs	r1, #2
   da768:	9103      	str	r1, [sp, #12]
   da76a:	e735      	b.n	da5d8 <__ieee754_pow+0x48>
   da76c:	4622      	mov	r2, r4
   da76e:	462b      	mov	r3, r5
   da770:	e7b4      	b.n	da6dc <__ieee754_pow+0x14c>
   da772:	bf00      	nop
   da774:	f3af 8000 	nop.w
   da778:	00000000 	.word	0x00000000
   da77c:	3ff00000 	.word	0x3ff00000
   da780:	8800759c 	.word	0x8800759c
   da784:	7e37e43c 	.word	0x7e37e43c
   da788:	7ff00000 	.word	0x7ff00000
   da78c:	3ff00000 	.word	0x3ff00000
   da790:	3fe00000 	.word	0x3fe00000
   da794:	000debb8 	.word	0x000debb8
   da798:	433fffff 	.word	0x433fffff
   da79c:	41e00000 	.word	0x41e00000
   da7a0:	3fefffff 	.word	0x3fefffff
   da7a4:	4be4      	ldr	r3, [pc, #912]	; (dab38 <__ieee754_pow+0x5a8>)
   da7a6:	ea09 0303 	and.w	r3, r9, r3
   da7aa:	2b00      	cmp	r3, #0
   da7ac:	f040 8416 	bne.w	dafdc <__ieee754_pow+0xa4c>
   da7b0:	e9dd 0100 	ldrd	r0, r1, [sp]
   da7b4:	4be1      	ldr	r3, [pc, #900]	; (dab3c <__ieee754_pow+0x5ac>)
   da7b6:	2200      	movs	r2, #0
   da7b8:	f002 f9c8 	bl	dcb4c <__aeabi_dmul>
   da7bc:	e9cd 0100 	strd	r0, r1, [sp]
   da7c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
   da7c4:	f06f 0034 	mvn.w	r0, #52	; 0x34
   da7c8:	ea4f 5328 	mov.w	r3, r8, asr #20
   da7cc:	49dc      	ldr	r1, [pc, #880]	; (dab40 <__ieee754_pow+0x5b0>)
   da7ce:	f3c8 0213 	ubfx	r2, r8, #0, #20
   da7d2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   da7d6:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   da7da:	1818      	adds	r0, r3, r0
   da7dc:	428a      	cmp	r2, r1
   da7de:	9007      	str	r0, [sp, #28]
   da7e0:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   da7e4:	f340 83e9 	ble.w	dafba <__ieee754_pow+0xa2a>
   da7e8:	4bd6      	ldr	r3, [pc, #856]	; (dab44 <__ieee754_pow+0x5b4>)
   da7ea:	429a      	cmp	r2, r3
   da7ec:	f340 843e 	ble.w	db06c <__ieee754_pow+0xadc>
   da7f0:	ed9f 7bbb 	vldr	d7, [pc, #748]	; daae0 <__ieee754_pow+0x550>
   da7f4:	eeb0 ba47 	vmov.f32	s22, s14
   da7f8:	eef0 ba67 	vmov.f32	s23, s15
   da7fc:	eeb0 ca47 	vmov.f32	s24, s14
   da800:	eef0 ca67 	vmov.f32	s25, s15
   da804:	ed9f 7bb8 	vldr	d7, [pc, #736]	; daae8 <__ieee754_pow+0x558>
   da808:	3001      	adds	r0, #1
   da80a:	ec54 3b17 	vmov	r3, r4, d7
   da80e:	9007      	str	r0, [sp, #28]
   da810:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   da814:	f04f 0900 	mov.w	r9, #0
   da818:	e9dd ab00 	ldrd	sl, fp, [sp]
   da81c:	ec44 3b18 	vmov	d8, r3, r4
   da820:	461a      	mov	r2, r3
   da822:	4650      	mov	r0, sl
   da824:	4623      	mov	r3, r4
   da826:	4641      	mov	r1, r8
   da828:	f001 ffd8 	bl	dc7dc <__aeabi_dsub>
   da82c:	ec53 2b18 	vmov	r2, r3, d8
   da830:	4604      	mov	r4, r0
   da832:	460d      	mov	r5, r1
   da834:	4650      	mov	r0, sl
   da836:	4641      	mov	r1, r8
   da838:	f001 ffd2 	bl	dc7e0 <__adddf3>
   da83c:	4602      	mov	r2, r0
   da83e:	460b      	mov	r3, r1
   da840:	2000      	movs	r0, #0
   da842:	49c1      	ldr	r1, [pc, #772]	; (dab48 <__ieee754_pow+0x5b8>)
   da844:	f002 faac 	bl	dcda0 <__aeabi_ddiv>
   da848:	ec45 4b1a 	vmov	d10, r4, r5
   da84c:	ec41 0b19 	vmov	d9, r0, r1
   da850:	ec51 0b1a 	vmov	r0, r1, d10
   da854:	ec53 2b19 	vmov	r2, r3, d9
   da858:	f002 f978 	bl	dcb4c <__aeabi_dmul>
   da85c:	46c3      	mov	fp, r8
   da85e:	ea4f 0868 	mov.w	r8, r8, asr #1
   da862:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   da866:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   da86a:	eb03 0509 	add.w	r5, r3, r9
   da86e:	460a      	mov	r2, r1
   da870:	2300      	movs	r3, #0
   da872:	4601      	mov	r1, r0
   da874:	e9cd 1200 	strd	r1, r2, [sp]
   da878:	9300      	str	r3, [sp, #0]
   da87a:	e9dd 8900 	ldrd	r8, r9, [sp]
   da87e:	2400      	movs	r4, #0
   da880:	e9cd 1204 	strd	r1, r2, [sp, #16]
   da884:	462b      	mov	r3, r5
   da886:	4622      	mov	r2, r4
   da888:	4640      	mov	r0, r8
   da88a:	4649      	mov	r1, r9
   da88c:	f002 f95e 	bl	dcb4c <__aeabi_dmul>
   da890:	4602      	mov	r2, r0
   da892:	460b      	mov	r3, r1
   da894:	ec51 0b1a 	vmov	r0, r1, d10
   da898:	f001 ffa0 	bl	dc7dc <__aeabi_dsub>
   da89c:	ec41 0b17 	vmov	d7, r0, r1
   da8a0:	ec53 2b18 	vmov	r2, r3, d8
   da8a4:	4620      	mov	r0, r4
   da8a6:	4629      	mov	r1, r5
   da8a8:	ec55 4b17 	vmov	r4, r5, d7
   da8ac:	f001 ff96 	bl	dc7dc <__aeabi_dsub>
   da8b0:	4602      	mov	r2, r0
   da8b2:	460b      	mov	r3, r1
   da8b4:	4650      	mov	r0, sl
   da8b6:	4659      	mov	r1, fp
   da8b8:	f001 ff90 	bl	dc7dc <__aeabi_dsub>
   da8bc:	4642      	mov	r2, r8
   da8be:	464b      	mov	r3, r9
   da8c0:	f002 f944 	bl	dcb4c <__aeabi_dmul>
   da8c4:	4602      	mov	r2, r0
   da8c6:	460b      	mov	r3, r1
   da8c8:	4620      	mov	r0, r4
   da8ca:	4629      	mov	r1, r5
   da8cc:	f001 ff86 	bl	dc7dc <__aeabi_dsub>
   da8d0:	ec53 2b19 	vmov	r2, r3, d9
   da8d4:	f002 f93a 	bl	dcb4c <__aeabi_dmul>
   da8d8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   da8dc:	4604      	mov	r4, r0
   da8de:	460d      	mov	r5, r1
   da8e0:	4652      	mov	r2, sl
   da8e2:	465b      	mov	r3, fp
   da8e4:	4650      	mov	r0, sl
   da8e6:	4659      	mov	r1, fp
   da8e8:	f002 f930 	bl	dcb4c <__aeabi_dmul>
   da8ec:	a380      	add	r3, pc, #512	; (adr r3, daaf0 <__ieee754_pow+0x560>)
   da8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   da8f2:	ec45 4b1a 	vmov	d10, r4, r5
   da8f6:	4604      	mov	r4, r0
   da8f8:	460d      	mov	r5, r1
   da8fa:	f002 f927 	bl	dcb4c <__aeabi_dmul>
   da8fe:	a37e      	add	r3, pc, #504	; (adr r3, daaf8 <__ieee754_pow+0x568>)
   da900:	e9d3 2300 	ldrd	r2, r3, [r3]
   da904:	f001 ff6c 	bl	dc7e0 <__adddf3>
   da908:	4622      	mov	r2, r4
   da90a:	462b      	mov	r3, r5
   da90c:	f002 f91e 	bl	dcb4c <__aeabi_dmul>
   da910:	a37b      	add	r3, pc, #492	; (adr r3, dab00 <__ieee754_pow+0x570>)
   da912:	e9d3 2300 	ldrd	r2, r3, [r3]
   da916:	f001 ff63 	bl	dc7e0 <__adddf3>
   da91a:	4622      	mov	r2, r4
   da91c:	462b      	mov	r3, r5
   da91e:	f002 f915 	bl	dcb4c <__aeabi_dmul>
   da922:	a379      	add	r3, pc, #484	; (adr r3, dab08 <__ieee754_pow+0x578>)
   da924:	e9d3 2300 	ldrd	r2, r3, [r3]
   da928:	f001 ff5a 	bl	dc7e0 <__adddf3>
   da92c:	4622      	mov	r2, r4
   da92e:	462b      	mov	r3, r5
   da930:	f002 f90c 	bl	dcb4c <__aeabi_dmul>
   da934:	a376      	add	r3, pc, #472	; (adr r3, dab10 <__ieee754_pow+0x580>)
   da936:	e9d3 2300 	ldrd	r2, r3, [r3]
   da93a:	f001 ff51 	bl	dc7e0 <__adddf3>
   da93e:	4622      	mov	r2, r4
   da940:	462b      	mov	r3, r5
   da942:	f002 f903 	bl	dcb4c <__aeabi_dmul>
   da946:	a374      	add	r3, pc, #464	; (adr r3, dab18 <__ieee754_pow+0x588>)
   da948:	e9d3 2300 	ldrd	r2, r3, [r3]
   da94c:	f001 ff48 	bl	dc7e0 <__adddf3>
   da950:	4622      	mov	r2, r4
   da952:	462b      	mov	r3, r5
   da954:	4604      	mov	r4, r0
   da956:	460d      	mov	r5, r1
   da958:	4610      	mov	r0, r2
   da95a:	4619      	mov	r1, r3
   da95c:	f002 f8f6 	bl	dcb4c <__aeabi_dmul>
   da960:	4602      	mov	r2, r0
   da962:	460b      	mov	r3, r1
   da964:	4620      	mov	r0, r4
   da966:	4629      	mov	r1, r5
   da968:	f002 f8f0 	bl	dcb4c <__aeabi_dmul>
   da96c:	4642      	mov	r2, r8
   da96e:	4604      	mov	r4, r0
   da970:	460d      	mov	r5, r1
   da972:	464b      	mov	r3, r9
   da974:	4650      	mov	r0, sl
   da976:	4659      	mov	r1, fp
   da978:	e9cd ab04 	strd	sl, fp, [sp, #16]
   da97c:	f001 ff30 	bl	dc7e0 <__adddf3>
   da980:	ec53 2b1a 	vmov	r2, r3, d10
   da984:	f002 f8e2 	bl	dcb4c <__aeabi_dmul>
   da988:	4622      	mov	r2, r4
   da98a:	462b      	mov	r3, r5
   da98c:	f001 ff28 	bl	dc7e0 <__adddf3>
   da990:	4642      	mov	r2, r8
   da992:	4604      	mov	r4, r0
   da994:	460d      	mov	r5, r1
   da996:	464b      	mov	r3, r9
   da998:	4640      	mov	r0, r8
   da99a:	4649      	mov	r1, r9
   da99c:	f002 f8d6 	bl	dcb4c <__aeabi_dmul>
   da9a0:	ec45 4b19 	vmov	d9, r4, r5
   da9a4:	4b69      	ldr	r3, [pc, #420]	; (dab4c <__ieee754_pow+0x5bc>)
   da9a6:	2200      	movs	r2, #0
   da9a8:	4682      	mov	sl, r0
   da9aa:	468b      	mov	fp, r1
   da9ac:	f001 ff18 	bl	dc7e0 <__adddf3>
   da9b0:	ec53 2b19 	vmov	r2, r3, d9
   da9b4:	f001 ff14 	bl	dc7e0 <__adddf3>
   da9b8:	9c00      	ldr	r4, [sp, #0]
   da9ba:	460d      	mov	r5, r1
   da9bc:	4622      	mov	r2, r4
   da9be:	462b      	mov	r3, r5
   da9c0:	4640      	mov	r0, r8
   da9c2:	4649      	mov	r1, r9
   da9c4:	f002 f8c2 	bl	dcb4c <__aeabi_dmul>
   da9c8:	4b60      	ldr	r3, [pc, #384]	; (dab4c <__ieee754_pow+0x5bc>)
   da9ca:	4680      	mov	r8, r0
   da9cc:	4689      	mov	r9, r1
   da9ce:	2200      	movs	r2, #0
   da9d0:	4620      	mov	r0, r4
   da9d2:	4629      	mov	r1, r5
   da9d4:	f001 ff02 	bl	dc7dc <__aeabi_dsub>
   da9d8:	4652      	mov	r2, sl
   da9da:	465b      	mov	r3, fp
   da9dc:	f001 fefe 	bl	dc7dc <__aeabi_dsub>
   da9e0:	4602      	mov	r2, r0
   da9e2:	460b      	mov	r3, r1
   da9e4:	ec51 0b19 	vmov	r0, r1, d9
   da9e8:	f001 fef8 	bl	dc7dc <__aeabi_dsub>
   da9ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   da9f0:	f002 f8ac 	bl	dcb4c <__aeabi_dmul>
   da9f4:	ec49 8b18 	vmov	d8, r8, r9
   da9f8:	4622      	mov	r2, r4
   da9fa:	4680      	mov	r8, r0
   da9fc:	4689      	mov	r9, r1
   da9fe:	462b      	mov	r3, r5
   daa00:	ec51 0b1a 	vmov	r0, r1, d10
   daa04:	f002 f8a2 	bl	dcb4c <__aeabi_dmul>
   daa08:	4602      	mov	r2, r0
   daa0a:	460b      	mov	r3, r1
   daa0c:	4640      	mov	r0, r8
   daa0e:	4649      	mov	r1, r9
   daa10:	f001 fee6 	bl	dc7e0 <__adddf3>
   daa14:	4682      	mov	sl, r0
   daa16:	468b      	mov	fp, r1
   daa18:	4652      	mov	r2, sl
   daa1a:	465b      	mov	r3, fp
   daa1c:	ec51 0b18 	vmov	r0, r1, d8
   daa20:	f001 fede 	bl	dc7e0 <__adddf3>
   daa24:	9c00      	ldr	r4, [sp, #0]
   daa26:	a33e      	add	r3, pc, #248	; (adr r3, dab20 <__ieee754_pow+0x590>)
   daa28:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa2c:	4620      	mov	r0, r4
   daa2e:	460d      	mov	r5, r1
   daa30:	f002 f88c 	bl	dcb4c <__aeabi_dmul>
   daa34:	ec53 2b18 	vmov	r2, r3, d8
   daa38:	4680      	mov	r8, r0
   daa3a:	4689      	mov	r9, r1
   daa3c:	4620      	mov	r0, r4
   daa3e:	4629      	mov	r1, r5
   daa40:	f001 fecc 	bl	dc7dc <__aeabi_dsub>
   daa44:	4602      	mov	r2, r0
   daa46:	460b      	mov	r3, r1
   daa48:	4650      	mov	r0, sl
   daa4a:	4659      	mov	r1, fp
   daa4c:	f001 fec6 	bl	dc7dc <__aeabi_dsub>
   daa50:	a335      	add	r3, pc, #212	; (adr r3, dab28 <__ieee754_pow+0x598>)
   daa52:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa56:	f002 f879 	bl	dcb4c <__aeabi_dmul>
   daa5a:	ec49 8b19 	vmov	d9, r8, r9
   daa5e:	a334      	add	r3, pc, #208	; (adr r3, dab30 <__ieee754_pow+0x5a0>)
   daa60:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa64:	4680      	mov	r8, r0
   daa66:	4689      	mov	r9, r1
   daa68:	4620      	mov	r0, r4
   daa6a:	4629      	mov	r1, r5
   daa6c:	f002 f86e 	bl	dcb4c <__aeabi_dmul>
   daa70:	4602      	mov	r2, r0
   daa72:	460b      	mov	r3, r1
   daa74:	4640      	mov	r0, r8
   daa76:	4649      	mov	r1, r9
   daa78:	f001 feb2 	bl	dc7e0 <__adddf3>
   daa7c:	ec53 2b1c 	vmov	r2, r3, d12
   daa80:	f001 feae 	bl	dc7e0 <__adddf3>
   daa84:	4682      	mov	sl, r0
   daa86:	9807      	ldr	r0, [sp, #28]
   daa88:	468b      	mov	fp, r1
   daa8a:	f001 fff5 	bl	dca78 <__aeabi_i2d>
   daa8e:	4652      	mov	r2, sl
   daa90:	4680      	mov	r8, r0
   daa92:	4689      	mov	r9, r1
   daa94:	465b      	mov	r3, fp
   daa96:	ec51 0b19 	vmov	r0, r1, d9
   daa9a:	f001 fea1 	bl	dc7e0 <__adddf3>
   daa9e:	ec53 2b1b 	vmov	r2, r3, d11
   daaa2:	f001 fe9d 	bl	dc7e0 <__adddf3>
   daaa6:	4642      	mov	r2, r8
   daaa8:	464b      	mov	r3, r9
   daaaa:	f001 fe99 	bl	dc7e0 <__adddf3>
   daaae:	9c00      	ldr	r4, [sp, #0]
   daab0:	4642      	mov	r2, r8
   daab2:	464b      	mov	r3, r9
   daab4:	4620      	mov	r0, r4
   daab6:	460d      	mov	r5, r1
   daab8:	f001 fe90 	bl	dc7dc <__aeabi_dsub>
   daabc:	ec53 2b1b 	vmov	r2, r3, d11
   daac0:	f001 fe8c 	bl	dc7dc <__aeabi_dsub>
   daac4:	ec53 2b19 	vmov	r2, r3, d9
   daac8:	f001 fe88 	bl	dc7dc <__aeabi_dsub>
   daacc:	4602      	mov	r2, r0
   daace:	460b      	mov	r3, r1
   daad0:	4650      	mov	r0, sl
   daad2:	4659      	mov	r1, fp
   daad4:	f001 fe82 	bl	dc7dc <__aeabi_dsub>
   daad8:	4682      	mov	sl, r0
   daada:	468b      	mov	fp, r1
   daadc:	e038      	b.n	dab50 <__ieee754_pow+0x5c0>
   daade:	bf00      	nop
	...
   daaec:	3ff00000 	.word	0x3ff00000
   daaf0:	4a454eef 	.word	0x4a454eef
   daaf4:	3fca7e28 	.word	0x3fca7e28
   daaf8:	93c9db65 	.word	0x93c9db65
   daafc:	3fcd864a 	.word	0x3fcd864a
   dab00:	a91d4101 	.word	0xa91d4101
   dab04:	3fd17460 	.word	0x3fd17460
   dab08:	518f264d 	.word	0x518f264d
   dab0c:	3fd55555 	.word	0x3fd55555
   dab10:	db6fabff 	.word	0xdb6fabff
   dab14:	3fdb6db6 	.word	0x3fdb6db6
   dab18:	33333303 	.word	0x33333303
   dab1c:	3fe33333 	.word	0x3fe33333
   dab20:	e0000000 	.word	0xe0000000
   dab24:	3feec709 	.word	0x3feec709
   dab28:	dc3a03fd 	.word	0xdc3a03fd
   dab2c:	3feec709 	.word	0x3feec709
   dab30:	145b01f5 	.word	0x145b01f5
   dab34:	be3e2fe0 	.word	0xbe3e2fe0
   dab38:	7ff00000 	.word	0x7ff00000
   dab3c:	43400000 	.word	0x43400000
   dab40:	0003988e 	.word	0x0003988e
   dab44:	000bb679 	.word	0x000bb679
   dab48:	3ff00000 	.word	0x3ff00000
   dab4c:	40080000 	.word	0x40080000
   dab50:	9b03      	ldr	r3, [sp, #12]
   dab52:	9a06      	ldr	r2, [sp, #24]
   dab54:	3b01      	subs	r3, #1
   dab56:	4313      	orrs	r3, r2
   dab58:	f040 8178 	bne.w	dae4c <__ieee754_pow+0x8bc>
   dab5c:	ed9f 7bc4 	vldr	d7, [pc, #784]	; dae70 <__ieee754_pow+0x8e0>
   dab60:	eeb0 9a47 	vmov.f32	s18, s14
   dab64:	eef0 9a67 	vmov.f32	s19, s15
   dab68:	2300      	movs	r3, #0
   dab6a:	e9cd 6700 	strd	r6, r7, [sp]
   dab6e:	9300      	str	r3, [sp, #0]
   dab70:	e9dd 8900 	ldrd	r8, r9, [sp]
   dab74:	4630      	mov	r0, r6
   dab76:	4642      	mov	r2, r8
   dab78:	4639      	mov	r1, r7
   dab7a:	464b      	mov	r3, r9
   dab7c:	f001 fe2e 	bl	dc7dc <__aeabi_dsub>
   dab80:	4622      	mov	r2, r4
   dab82:	462b      	mov	r3, r5
   dab84:	f001 ffe2 	bl	dcb4c <__aeabi_dmul>
   dab88:	4632      	mov	r2, r6
   dab8a:	463b      	mov	r3, r7
   dab8c:	4606      	mov	r6, r0
   dab8e:	460f      	mov	r7, r1
   dab90:	4650      	mov	r0, sl
   dab92:	4659      	mov	r1, fp
   dab94:	f001 ffda 	bl	dcb4c <__aeabi_dmul>
   dab98:	4602      	mov	r2, r0
   dab9a:	460b      	mov	r3, r1
   dab9c:	4630      	mov	r0, r6
   dab9e:	4639      	mov	r1, r7
   daba0:	f001 fe1e 	bl	dc7e0 <__adddf3>
   daba4:	4642      	mov	r2, r8
   daba6:	4682      	mov	sl, r0
   daba8:	468b      	mov	fp, r1
   dabaa:	464b      	mov	r3, r9
   dabac:	4620      	mov	r0, r4
   dabae:	4629      	mov	r1, r5
   dabb0:	f001 ffcc 	bl	dcb4c <__aeabi_dmul>
   dabb4:	4606      	mov	r6, r0
   dabb6:	460f      	mov	r7, r1
   dabb8:	463b      	mov	r3, r7
   dabba:	4650      	mov	r0, sl
   dabbc:	4659      	mov	r1, fp
   dabbe:	4632      	mov	r2, r6
   dabc0:	f001 fe0e 	bl	dc7e0 <__adddf3>
   dabc4:	4bc4      	ldr	r3, [pc, #784]	; (daed8 <__ieee754_pow+0x948>)
   dabc6:	4299      	cmp	r1, r3
   dabc8:	4604      	mov	r4, r0
   dabca:	460d      	mov	r5, r1
   dabcc:	4688      	mov	r8, r1
   dabce:	f340 8117 	ble.w	dae00 <__ieee754_pow+0x870>
   dabd2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   dabd6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   dabda:	4303      	orrs	r3, r0
   dabdc:	f040 822a 	bne.w	db034 <__ieee754_pow+0xaa4>
   dabe0:	a3a5      	add	r3, pc, #660	; (adr r3, dae78 <__ieee754_pow+0x8e8>)
   dabe2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dabe6:	4650      	mov	r0, sl
   dabe8:	4659      	mov	r1, fp
   dabea:	f001 fdf9 	bl	dc7e0 <__adddf3>
   dabee:	4632      	mov	r2, r6
   dabf0:	ec41 0b18 	vmov	d8, r0, r1
   dabf4:	463b      	mov	r3, r7
   dabf6:	4620      	mov	r0, r4
   dabf8:	4629      	mov	r1, r5
   dabfa:	f001 fdef 	bl	dc7dc <__aeabi_dsub>
   dabfe:	4602      	mov	r2, r0
   dac00:	460b      	mov	r3, r1
   dac02:	ec51 0b18 	vmov	r0, r1, d8
   dac06:	f002 fa31 	bl	dd06c <__aeabi_dcmpgt>
   dac0a:	2800      	cmp	r0, #0
   dac0c:	f040 8212 	bne.w	db034 <__ieee754_pow+0xaa4>
   dac10:	f3c8 530a 	ubfx	r3, r8, #20, #11
   dac14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   dac18:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   dac1c:	fa42 f303 	asr.w	r3, r2, r3
   dac20:	4443      	add	r3, r8
   dac22:	49ae      	ldr	r1, [pc, #696]	; (daedc <__ieee754_pow+0x94c>)
   dac24:	f3c3 520a 	ubfx	r2, r3, #20, #11
   dac28:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   dac2c:	fa41 fc02 	asr.w	ip, r1, r2
   dac30:	f3c3 0513 	ubfx	r5, r3, #0, #20
   dac34:	ea23 010c 	bic.w	r1, r3, ip
   dac38:	f1c2 0414 	rsb	r4, r2, #20
   dac3c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   dac40:	f1b8 0f00 	cmp.w	r8, #0
   dac44:	460b      	mov	r3, r1
   dac46:	fa45 f104 	asr.w	r1, r5, r4
   dac4a:	9103      	str	r1, [sp, #12]
   dac4c:	f04f 0000 	mov.w	r0, #0
   dac50:	bfb8      	it	lt
   dac52:	4249      	neglt	r1, r1
   dac54:	4602      	mov	r2, r0
   dac56:	bfb8      	it	lt
   dac58:	9103      	strlt	r1, [sp, #12]
   dac5a:	4630      	mov	r0, r6
   dac5c:	4639      	mov	r1, r7
   dac5e:	f001 fdbd 	bl	dc7dc <__aeabi_dsub>
   dac62:	4606      	mov	r6, r0
   dac64:	460f      	mov	r7, r1
   dac66:	463b      	mov	r3, r7
   dac68:	4650      	mov	r0, sl
   dac6a:	4659      	mov	r1, fp
   dac6c:	4632      	mov	r2, r6
   dac6e:	f001 fdb7 	bl	dc7e0 <__adddf3>
   dac72:	9b03      	ldr	r3, [sp, #12]
   dac74:	051b      	lsls	r3, r3, #20
   dac76:	9300      	str	r3, [sp, #0]
   dac78:	460d      	mov	r5, r1
   dac7a:	2400      	movs	r4, #0
   dac7c:	a380      	add	r3, pc, #512	; (adr r3, dae80 <__ieee754_pow+0x8f0>)
   dac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dac82:	4620      	mov	r0, r4
   dac84:	4629      	mov	r1, r5
   dac86:	f001 ff61 	bl	dcb4c <__aeabi_dmul>
   dac8a:	4632      	mov	r2, r6
   dac8c:	4680      	mov	r8, r0
   dac8e:	4689      	mov	r9, r1
   dac90:	463b      	mov	r3, r7
   dac92:	4620      	mov	r0, r4
   dac94:	4629      	mov	r1, r5
   dac96:	f001 fda1 	bl	dc7dc <__aeabi_dsub>
   dac9a:	4602      	mov	r2, r0
   dac9c:	460b      	mov	r3, r1
   dac9e:	4650      	mov	r0, sl
   daca0:	4659      	mov	r1, fp
   daca2:	f001 fd9b 	bl	dc7dc <__aeabi_dsub>
   daca6:	a378      	add	r3, pc, #480	; (adr r3, dae88 <__ieee754_pow+0x8f8>)
   daca8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dacac:	f001 ff4e 	bl	dcb4c <__aeabi_dmul>
   dacb0:	a377      	add	r3, pc, #476	; (adr r3, dae90 <__ieee754_pow+0x900>)
   dacb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dacb6:	4606      	mov	r6, r0
   dacb8:	460f      	mov	r7, r1
   dacba:	4620      	mov	r0, r4
   dacbc:	4629      	mov	r1, r5
   dacbe:	f001 ff45 	bl	dcb4c <__aeabi_dmul>
   dacc2:	4602      	mov	r2, r0
   dacc4:	460b      	mov	r3, r1
   dacc6:	4630      	mov	r0, r6
   dacc8:	4639      	mov	r1, r7
   dacca:	f001 fd89 	bl	dc7e0 <__adddf3>
   dacce:	4606      	mov	r6, r0
   dacd0:	460f      	mov	r7, r1
   dacd2:	4632      	mov	r2, r6
   dacd4:	463b      	mov	r3, r7
   dacd6:	4640      	mov	r0, r8
   dacd8:	4649      	mov	r1, r9
   dacda:	f001 fd81 	bl	dc7e0 <__adddf3>
   dacde:	4642      	mov	r2, r8
   dace0:	464b      	mov	r3, r9
   dace2:	4604      	mov	r4, r0
   dace4:	460d      	mov	r5, r1
   dace6:	f001 fd79 	bl	dc7dc <__aeabi_dsub>
   dacea:	4602      	mov	r2, r0
   dacec:	460b      	mov	r3, r1
   dacee:	4630      	mov	r0, r6
   dacf0:	4639      	mov	r1, r7
   dacf2:	f001 fd73 	bl	dc7dc <__aeabi_dsub>
   dacf6:	4622      	mov	r2, r4
   dacf8:	4682      	mov	sl, r0
   dacfa:	468b      	mov	fp, r1
   dacfc:	462b      	mov	r3, r5
   dacfe:	4620      	mov	r0, r4
   dad00:	4629      	mov	r1, r5
   dad02:	f001 ff23 	bl	dcb4c <__aeabi_dmul>
   dad06:	a364      	add	r3, pc, #400	; (adr r3, dae98 <__ieee754_pow+0x908>)
   dad08:	e9d3 2300 	ldrd	r2, r3, [r3]
   dad0c:	4606      	mov	r6, r0
   dad0e:	460f      	mov	r7, r1
   dad10:	f001 ff1c 	bl	dcb4c <__aeabi_dmul>
   dad14:	a362      	add	r3, pc, #392	; (adr r3, daea0 <__ieee754_pow+0x910>)
   dad16:	e9d3 2300 	ldrd	r2, r3, [r3]
   dad1a:	f001 fd5f 	bl	dc7dc <__aeabi_dsub>
   dad1e:	4632      	mov	r2, r6
   dad20:	463b      	mov	r3, r7
   dad22:	f001 ff13 	bl	dcb4c <__aeabi_dmul>
   dad26:	a360      	add	r3, pc, #384	; (adr r3, daea8 <__ieee754_pow+0x918>)
   dad28:	e9d3 2300 	ldrd	r2, r3, [r3]
   dad2c:	f001 fd58 	bl	dc7e0 <__adddf3>
   dad30:	4632      	mov	r2, r6
   dad32:	463b      	mov	r3, r7
   dad34:	f001 ff0a 	bl	dcb4c <__aeabi_dmul>
   dad38:	a35d      	add	r3, pc, #372	; (adr r3, daeb0 <__ieee754_pow+0x920>)
   dad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dad3e:	f001 fd4d 	bl	dc7dc <__aeabi_dsub>
   dad42:	4632      	mov	r2, r6
   dad44:	463b      	mov	r3, r7
   dad46:	f001 ff01 	bl	dcb4c <__aeabi_dmul>
   dad4a:	a35b      	add	r3, pc, #364	; (adr r3, daeb8 <__ieee754_pow+0x928>)
   dad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dad50:	f001 fd46 	bl	dc7e0 <__adddf3>
   dad54:	4632      	mov	r2, r6
   dad56:	463b      	mov	r3, r7
   dad58:	f001 fef8 	bl	dcb4c <__aeabi_dmul>
   dad5c:	4602      	mov	r2, r0
   dad5e:	460b      	mov	r3, r1
   dad60:	4620      	mov	r0, r4
   dad62:	4629      	mov	r1, r5
   dad64:	f001 fd3a 	bl	dc7dc <__aeabi_dsub>
   dad68:	4606      	mov	r6, r0
   dad6a:	460f      	mov	r7, r1
   dad6c:	4632      	mov	r2, r6
   dad6e:	463b      	mov	r3, r7
   dad70:	4620      	mov	r0, r4
   dad72:	4629      	mov	r1, r5
   dad74:	f001 feea 	bl	dcb4c <__aeabi_dmul>
   dad78:	2200      	movs	r2, #0
   dad7a:	4680      	mov	r8, r0
   dad7c:	4689      	mov	r9, r1
   dad7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dad82:	4630      	mov	r0, r6
   dad84:	4639      	mov	r1, r7
   dad86:	f001 fd29 	bl	dc7dc <__aeabi_dsub>
   dad8a:	4602      	mov	r2, r0
   dad8c:	460b      	mov	r3, r1
   dad8e:	4640      	mov	r0, r8
   dad90:	4649      	mov	r1, r9
   dad92:	f002 f805 	bl	dcda0 <__aeabi_ddiv>
   dad96:	4652      	mov	r2, sl
   dad98:	4606      	mov	r6, r0
   dad9a:	460f      	mov	r7, r1
   dad9c:	465b      	mov	r3, fp
   dad9e:	4620      	mov	r0, r4
   dada0:	4629      	mov	r1, r5
   dada2:	f001 fed3 	bl	dcb4c <__aeabi_dmul>
   dada6:	4652      	mov	r2, sl
   dada8:	465b      	mov	r3, fp
   dadaa:	f001 fd19 	bl	dc7e0 <__adddf3>
   dadae:	4602      	mov	r2, r0
   dadb0:	460b      	mov	r3, r1
   dadb2:	4630      	mov	r0, r6
   dadb4:	4639      	mov	r1, r7
   dadb6:	f001 fd11 	bl	dc7dc <__aeabi_dsub>
   dadba:	4622      	mov	r2, r4
   dadbc:	462b      	mov	r3, r5
   dadbe:	f001 fd0d 	bl	dc7dc <__aeabi_dsub>
   dadc2:	4602      	mov	r2, r0
   dadc4:	460b      	mov	r3, r1
   dadc6:	2000      	movs	r0, #0
   dadc8:	4945      	ldr	r1, [pc, #276]	; (daee0 <__ieee754_pow+0x950>)
   dadca:	f001 fd07 	bl	dc7dc <__aeabi_dsub>
   dadce:	460b      	mov	r3, r1
   dadd0:	9900      	ldr	r1, [sp, #0]
   dadd2:	4419      	add	r1, r3
   dadd4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dadd8:	4602      	mov	r2, r0
   dadda:	f2c0 8169 	blt.w	db0b0 <__ieee754_pow+0xb20>
   dadde:	4610      	mov	r0, r2
   dade0:	ec53 2b19 	vmov	r2, r3, d9
   dade4:	f001 feb2 	bl	dcb4c <__aeabi_dmul>
   dade8:	e9cd 0100 	strd	r0, r1, [sp]
   dadec:	e41e      	b.n	da62c <__ieee754_pow+0x9c>
   dadee:	f1bb 0f00 	cmp.w	fp, #0
   dadf2:	f6ff ac95 	blt.w	da720 <__ieee754_pow+0x190>
   dadf6:	ed9f 7b32 	vldr	d7, [pc, #200]	; daec0 <__ieee754_pow+0x930>
   dadfa:	ed8d 7b00 	vstr	d7, [sp]
   dadfe:	e415      	b.n	da62c <__ieee754_pow+0x9c>
   dae00:	f8df c0e4 	ldr.w	ip, [pc, #228]	; daee8 <__ieee754_pow+0x958>
   dae04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dae08:	4563      	cmp	r3, ip
   dae0a:	f340 810b 	ble.w	db024 <__ieee754_pow+0xa94>
   dae0e:	4b35      	ldr	r3, [pc, #212]	; (daee4 <__ieee754_pow+0x954>)
   dae10:	440b      	add	r3, r1
   dae12:	4303      	orrs	r3, r0
   dae14:	d10a      	bne.n	dae2c <__ieee754_pow+0x89c>
   dae16:	4632      	mov	r2, r6
   dae18:	463b      	mov	r3, r7
   dae1a:	f001 fcdf 	bl	dc7dc <__aeabi_dsub>
   dae1e:	4652      	mov	r2, sl
   dae20:	465b      	mov	r3, fp
   dae22:	f002 f919 	bl	dd058 <__aeabi_dcmpge>
   dae26:	2800      	cmp	r0, #0
   dae28:	f43f aef2 	beq.w	dac10 <__ieee754_pow+0x680>
   dae2c:	a326      	add	r3, pc, #152	; (adr r3, daec8 <__ieee754_pow+0x938>)
   dae2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dae32:	ec51 0b19 	vmov	r0, r1, d9
   dae36:	f001 fe89 	bl	dcb4c <__aeabi_dmul>
   dae3a:	a323      	add	r3, pc, #140	; (adr r3, daec8 <__ieee754_pow+0x938>)
   dae3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dae40:	f001 fe84 	bl	dcb4c <__aeabi_dmul>
   dae44:	e9cd 0100 	strd	r0, r1, [sp]
   dae48:	f7ff bbf0 	b.w	da62c <__ieee754_pow+0x9c>
   dae4c:	ed9f 7b20 	vldr	d7, [pc, #128]	; daed0 <__ieee754_pow+0x940>
   dae50:	eeb0 9a47 	vmov.f32	s18, s14
   dae54:	eef0 9a67 	vmov.f32	s19, s15
   dae58:	e686      	b.n	dab68 <__ieee754_pow+0x5d8>
   dae5a:	f1bb 0f00 	cmp.w	fp, #0
   dae5e:	daca      	bge.n	dadf6 <__ieee754_pow+0x866>
   dae60:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   dae64:	9600      	str	r6, [sp, #0]
   dae66:	9301      	str	r3, [sp, #4]
   dae68:	f7ff bbe0 	b.w	da62c <__ieee754_pow+0x9c>
   dae6c:	f3af 8000 	nop.w
   dae70:	00000000 	.word	0x00000000
   dae74:	bff00000 	.word	0xbff00000
   dae78:	652b82fe 	.word	0x652b82fe
   dae7c:	3c971547 	.word	0x3c971547
   dae80:	00000000 	.word	0x00000000
   dae84:	3fe62e43 	.word	0x3fe62e43
   dae88:	fefa39ef 	.word	0xfefa39ef
   dae8c:	3fe62e42 	.word	0x3fe62e42
   dae90:	0ca86c39 	.word	0x0ca86c39
   dae94:	be205c61 	.word	0xbe205c61
   dae98:	72bea4d0 	.word	0x72bea4d0
   dae9c:	3e663769 	.word	0x3e663769
   daea0:	c5d26bf1 	.word	0xc5d26bf1
   daea4:	3ebbbd41 	.word	0x3ebbbd41
   daea8:	af25de2c 	.word	0xaf25de2c
   daeac:	3f11566a 	.word	0x3f11566a
   daeb0:	16bebd93 	.word	0x16bebd93
   daeb4:	3f66c16c 	.word	0x3f66c16c
   daeb8:	5555553e 	.word	0x5555553e
   daebc:	3fc55555 	.word	0x3fc55555
	...
   daec8:	c2f8f359 	.word	0xc2f8f359
   daecc:	01a56e1f 	.word	0x01a56e1f
   daed0:	00000000 	.word	0x00000000
   daed4:	3ff00000 	.word	0x3ff00000
   daed8:	408fffff 	.word	0x408fffff
   daedc:	000fffff 	.word	0x000fffff
   daee0:	3ff00000 	.word	0x3ff00000
   daee4:	3f6f3400 	.word	0x3f6f3400
   daee8:	4090cbff 	.word	0x4090cbff
   daeec:	4598      	cmp	r8, r3
   daeee:	f6ff af7e 	blt.w	dadee <__ieee754_pow+0x85e>
   daef2:	4b91      	ldr	r3, [pc, #580]	; (db138 <__ieee754_pow+0xba8>)
   daef4:	4598      	cmp	r8, r3
   daef6:	f73f ac0f 	bgt.w	da718 <__ieee754_pow+0x188>
   daefa:	4b8f      	ldr	r3, [pc, #572]	; (db138 <__ieee754_pow+0xba8>)
   daefc:	2200      	movs	r2, #0
   daefe:	e9dd 0100 	ldrd	r0, r1, [sp]
   daf02:	f001 fc6b 	bl	dc7dc <__aeabi_dsub>
   daf06:	a378      	add	r3, pc, #480	; (adr r3, db0e8 <__ieee754_pow+0xb58>)
   daf08:	e9d3 2300 	ldrd	r2, r3, [r3]
   daf0c:	4604      	mov	r4, r0
   daf0e:	460d      	mov	r5, r1
   daf10:	f001 fe1c 	bl	dcb4c <__aeabi_dmul>
   daf14:	a376      	add	r3, pc, #472	; (adr r3, db0f0 <__ieee754_pow+0xb60>)
   daf16:	e9d3 2300 	ldrd	r2, r3, [r3]
   daf1a:	4682      	mov	sl, r0
   daf1c:	468b      	mov	fp, r1
   daf1e:	4620      	mov	r0, r4
   daf20:	4629      	mov	r1, r5
   daf22:	f001 fe13 	bl	dcb4c <__aeabi_dmul>
   daf26:	4b85      	ldr	r3, [pc, #532]	; (db13c <__ieee754_pow+0xbac>)
   daf28:	4680      	mov	r8, r0
   daf2a:	4689      	mov	r9, r1
   daf2c:	2200      	movs	r2, #0
   daf2e:	4620      	mov	r0, r4
   daf30:	4629      	mov	r1, r5
   daf32:	f001 fe0b 	bl	dcb4c <__aeabi_dmul>
   daf36:	4602      	mov	r2, r0
   daf38:	460b      	mov	r3, r1
   daf3a:	a16f      	add	r1, pc, #444	; (adr r1, db0f8 <__ieee754_pow+0xb68>)
   daf3c:	e9d1 0100 	ldrd	r0, r1, [r1]
   daf40:	f001 fc4c 	bl	dc7dc <__aeabi_dsub>
   daf44:	4622      	mov	r2, r4
   daf46:	462b      	mov	r3, r5
   daf48:	f001 fe00 	bl	dcb4c <__aeabi_dmul>
   daf4c:	4602      	mov	r2, r0
   daf4e:	460b      	mov	r3, r1
   daf50:	2000      	movs	r0, #0
   daf52:	497b      	ldr	r1, [pc, #492]	; (db140 <__ieee754_pow+0xbb0>)
   daf54:	f001 fc42 	bl	dc7dc <__aeabi_dsub>
   daf58:	4622      	mov	r2, r4
   daf5a:	462b      	mov	r3, r5
   daf5c:	4604      	mov	r4, r0
   daf5e:	460d      	mov	r5, r1
   daf60:	4610      	mov	r0, r2
   daf62:	4619      	mov	r1, r3
   daf64:	f001 fdf2 	bl	dcb4c <__aeabi_dmul>
   daf68:	4602      	mov	r2, r0
   daf6a:	460b      	mov	r3, r1
   daf6c:	4620      	mov	r0, r4
   daf6e:	4629      	mov	r1, r5
   daf70:	f001 fdec 	bl	dcb4c <__aeabi_dmul>
   daf74:	a362      	add	r3, pc, #392	; (adr r3, db100 <__ieee754_pow+0xb70>)
   daf76:	e9d3 2300 	ldrd	r2, r3, [r3]
   daf7a:	f001 fde7 	bl	dcb4c <__aeabi_dmul>
   daf7e:	4602      	mov	r2, r0
   daf80:	460b      	mov	r3, r1
   daf82:	4640      	mov	r0, r8
   daf84:	4649      	mov	r1, r9
   daf86:	f001 fc29 	bl	dc7dc <__aeabi_dsub>
   daf8a:	4680      	mov	r8, r0
   daf8c:	4689      	mov	r9, r1
   daf8e:	4650      	mov	r0, sl
   daf90:	4659      	mov	r1, fp
   daf92:	4642      	mov	r2, r8
   daf94:	464b      	mov	r3, r9
   daf96:	f001 fc23 	bl	dc7e0 <__adddf3>
   daf9a:	2400      	movs	r4, #0
   daf9c:	4652      	mov	r2, sl
   daf9e:	465b      	mov	r3, fp
   dafa0:	4620      	mov	r0, r4
   dafa2:	460d      	mov	r5, r1
   dafa4:	f001 fc1a 	bl	dc7dc <__aeabi_dsub>
   dafa8:	4602      	mov	r2, r0
   dafaa:	460b      	mov	r3, r1
   dafac:	4640      	mov	r0, r8
   dafae:	4649      	mov	r1, r9
   dafb0:	f001 fc14 	bl	dc7dc <__aeabi_dsub>
   dafb4:	4682      	mov	sl, r0
   dafb6:	468b      	mov	fp, r1
   dafb8:	e5ca      	b.n	dab50 <__ieee754_pow+0x5c0>
   dafba:	ed9f 7b53 	vldr	d7, [pc, #332]	; db108 <__ieee754_pow+0xb78>
   dafbe:	eeb0 ba47 	vmov.f32	s22, s14
   dafc2:	eef0 ba67 	vmov.f32	s23, s15
   dafc6:	eeb0 ca47 	vmov.f32	s24, s14
   dafca:	eef0 ca67 	vmov.f32	s25, s15
   dafce:	ed9f 7b50 	vldr	d7, [pc, #320]	; db110 <__ieee754_pow+0xb80>
   dafd2:	f04f 0900 	mov.w	r9, #0
   dafd6:	ec54 3b17 	vmov	r3, r4, d7
   dafda:	e41d      	b.n	da818 <__ieee754_pow+0x288>
   dafdc:	2000      	movs	r0, #0
   dafde:	f7ff bbf3 	b.w	da7c8 <__ieee754_pow+0x238>
   dafe2:	4955      	ldr	r1, [pc, #340]	; (db138 <__ieee754_pow+0xba8>)
   dafe4:	4622      	mov	r2, r4
   dafe6:	462b      	mov	r3, r5
   dafe8:	2000      	movs	r0, #0
   dafea:	f001 fed9 	bl	dcda0 <__aeabi_ddiv>
   dafee:	e9cd 0100 	strd	r0, r1, [sp]
   daff2:	f7ff bb1b 	b.w	da62c <__ieee754_pow+0x9c>
   daff6:	4622      	mov	r2, r4
   daff8:	462b      	mov	r3, r5
   daffa:	4620      	mov	r0, r4
   daffc:	4629      	mov	r1, r5
   daffe:	f001 fda5 	bl	dcb4c <__aeabi_dmul>
   db002:	e9cd 0100 	strd	r0, r1, [sp]
   db006:	f7ff bb11 	b.w	da62c <__ieee754_pow+0x9c>
   db00a:	2b00      	cmp	r3, #0
   db00c:	d142      	bne.n	db094 <__ieee754_pow+0xb04>
   db00e:	f1c1 0114 	rsb	r1, r1, #20
   db012:	fa4a f001 	asr.w	r0, sl, r1
   db016:	fa00 f101 	lsl.w	r1, r0, r1
   db01a:	4551      	cmp	r1, sl
   db01c:	d05a      	beq.n	db0d4 <__ieee754_pow+0xb44>
   db01e:	9303      	str	r3, [sp, #12]
   db020:	f7ff bae0 	b.w	da5e4 <__ieee754_pow+0x54>
   db024:	4a46      	ldr	r2, [pc, #280]	; (db140 <__ieee754_pow+0xbb0>)
   db026:	4293      	cmp	r3, r2
   db028:	dc5b      	bgt.n	db0e2 <__ieee754_pow+0xb52>
   db02a:	e9dd 1200 	ldrd	r1, r2, [sp]
   db02e:	9100      	str	r1, [sp, #0]
   db030:	9103      	str	r1, [sp, #12]
   db032:	e622      	b.n	dac7a <__ieee754_pow+0x6ea>
   db034:	a338      	add	r3, pc, #224	; (adr r3, db118 <__ieee754_pow+0xb88>)
   db036:	e9d3 2300 	ldrd	r2, r3, [r3]
   db03a:	ec51 0b19 	vmov	r0, r1, d9
   db03e:	f001 fd85 	bl	dcb4c <__aeabi_dmul>
   db042:	a335      	add	r3, pc, #212	; (adr r3, db118 <__ieee754_pow+0xb88>)
   db044:	e9d3 2300 	ldrd	r2, r3, [r3]
   db048:	f001 fd80 	bl	dcb4c <__aeabi_dmul>
   db04c:	e9cd 0100 	strd	r0, r1, [sp]
   db050:	f7ff baec 	b.w	da62c <__ieee754_pow+0x9c>
   db054:	9b03      	ldr	r3, [sp, #12]
   db056:	2b01      	cmp	r3, #1
   db058:	f47f aae8 	bne.w	da62c <__ieee754_pow+0x9c>
   db05c:	e9dd 2100 	ldrd	r2, r1, [sp]
   db060:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db064:	e9cd 2300 	strd	r2, r3, [sp]
   db068:	f7ff bae0 	b.w	da62c <__ieee754_pow+0x9c>
   db06c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; db120 <__ieee754_pow+0xb90>
   db070:	eeb0 ba47 	vmov.f32	s22, s14
   db074:	eef0 ba67 	vmov.f32	s23, s15
   db078:	ed9f 7b2b 	vldr	d7, [pc, #172]	; db128 <__ieee754_pow+0xb98>
   db07c:	eeb0 ca47 	vmov.f32	s24, s14
   db080:	eef0 ca67 	vmov.f32	s25, s15
   db084:	ed9f 7b2a 	vldr	d7, [pc, #168]	; db130 <__ieee754_pow+0xba0>
   db088:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   db08c:	ec54 3b17 	vmov	r3, r4, d7
   db090:	f7ff bbc2 	b.w	da818 <__ieee754_pow+0x288>
   db094:	ec45 4b10 	vmov	d0, r4, r5
   db098:	9203      	str	r2, [sp, #12]
   db09a:	f001 f8bd 	bl	dc218 <fabs>
   db09e:	9a03      	ldr	r2, [sp, #12]
   db0a0:	ed8d 0b00 	vstr	d0, [sp]
   db0a4:	2a00      	cmp	r2, #0
   db0a6:	f47f ab61 	bne.w	da76c <__ieee754_pow+0x1dc>
   db0aa:	9203      	str	r2, [sp, #12]
   db0ac:	f7ff baf5 	b.w	da69a <__ieee754_pow+0x10a>
   db0b0:	9803      	ldr	r0, [sp, #12]
   db0b2:	ec43 2b10 	vmov	d0, r2, r3
   db0b6:	f001 f963 	bl	dc380 <scalbn>
   db0ba:	ec51 0b10 	vmov	r0, r1, d0
   db0be:	e68f      	b.n	dade0 <__ieee754_pow+0x850>
   db0c0:	f000 0001 	and.w	r0, r0, #1
   db0c4:	f1c0 0102 	rsb	r1, r0, #2
   db0c8:	9103      	str	r1, [sp, #12]
   db0ca:	2b00      	cmp	r3, #0
   db0cc:	f43f aa8a 	beq.w	da5e4 <__ieee754_pow+0x54>
   db0d0:	f7ff bada 	b.w	da688 <__ieee754_pow+0xf8>
   db0d4:	f000 0001 	and.w	r0, r0, #1
   db0d8:	f1c0 0302 	rsb	r3, r0, #2
   db0dc:	9303      	str	r3, [sp, #12]
   db0de:	f7ff ba81 	b.w	da5e4 <__ieee754_pow+0x54>
   db0e2:	151b      	asrs	r3, r3, #20
   db0e4:	e596      	b.n	dac14 <__ieee754_pow+0x684>
   db0e6:	bf00      	nop
   db0e8:	60000000 	.word	0x60000000
   db0ec:	3ff71547 	.word	0x3ff71547
   db0f0:	f85ddf44 	.word	0xf85ddf44
   db0f4:	3e54ae0b 	.word	0x3e54ae0b
   db0f8:	55555555 	.word	0x55555555
   db0fc:	3fd55555 	.word	0x3fd55555
   db100:	652b82fe 	.word	0x652b82fe
   db104:	3ff71547 	.word	0x3ff71547
	...
   db114:	3ff00000 	.word	0x3ff00000
   db118:	8800759c 	.word	0x8800759c
   db11c:	7e37e43c 	.word	0x7e37e43c
   db120:	40000000 	.word	0x40000000
   db124:	3fe2b803 	.word	0x3fe2b803
   db128:	43cfd006 	.word	0x43cfd006
   db12c:	3e4cfdeb 	.word	0x3e4cfdeb
   db130:	00000000 	.word	0x00000000
   db134:	3ff80000 	.word	0x3ff80000
   db138:	3ff00000 	.word	0x3ff00000
   db13c:	3fd00000 	.word	0x3fd00000
   db140:	3fe00000 	.word	0x3fe00000

000db144 <__ieee754_sqrt>:
   db144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db148:	4a5f      	ldr	r2, [pc, #380]	; (db2c8 <__ieee754_sqrt+0x184>)
   db14a:	ec57 6b10 	vmov	r6, r7, d0
   db14e:	43ba      	bics	r2, r7
   db150:	f000 8098 	beq.w	db284 <__ieee754_sqrt+0x140>
   db154:	2f00      	cmp	r7, #0
   db156:	ee10 4a10 	vmov	r4, s0
   db15a:	463b      	mov	r3, r7
   db15c:	dd4e      	ble.n	db1fc <__ieee754_sqrt+0xb8>
   db15e:	1539      	asrs	r1, r7, #20
   db160:	d05b      	beq.n	db21a <__ieee754_sqrt+0xd6>
   db162:	f3c3 0313 	ubfx	r3, r3, #0, #20
   db166:	07ca      	lsls	r2, r1, #31
   db168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db16c:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   db170:	d403      	bmi.n	db17a <__ieee754_sqrt+0x36>
   db172:	005b      	lsls	r3, r3, #1
   db174:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   db178:	0064      	lsls	r4, r4, #1
   db17a:	0fe2      	lsrs	r2, r4, #31
   db17c:	f04f 0c00 	mov.w	ip, #0
   db180:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   db184:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   db188:	0064      	lsls	r4, r4, #1
   db18a:	4666      	mov	r6, ip
   db18c:	2516      	movs	r5, #22
   db18e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   db192:	18b1      	adds	r1, r6, r2
   db194:	4299      	cmp	r1, r3
   db196:	dc02      	bgt.n	db19e <__ieee754_sqrt+0x5a>
   db198:	1a5b      	subs	r3, r3, r1
   db19a:	188e      	adds	r6, r1, r2
   db19c:	4494      	add	ip, r2
   db19e:	005b      	lsls	r3, r3, #1
   db1a0:	3d01      	subs	r5, #1
   db1a2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   db1a6:	ea4f 0252 	mov.w	r2, r2, lsr #1
   db1aa:	ea4f 0444 	mov.w	r4, r4, lsl #1
   db1ae:	d1f0      	bne.n	db192 <__ieee754_sqrt+0x4e>
   db1b0:	462f      	mov	r7, r5
   db1b2:	2020      	movs	r0, #32
   db1b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   db1b8:	e009      	b.n	db1ce <__ieee754_sqrt+0x8a>
   db1ba:	d03e      	beq.n	db23a <__ieee754_sqrt+0xf6>
   db1bc:	0fe1      	lsrs	r1, r4, #31
   db1be:	3801      	subs	r0, #1
   db1c0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   db1c4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   db1c8:	ea4f 0444 	mov.w	r4, r4, lsl #1
   db1cc:	d03e      	beq.n	db24c <__ieee754_sqrt+0x108>
   db1ce:	42b3      	cmp	r3, r6
   db1d0:	eb02 0105 	add.w	r1, r2, r5
   db1d4:	ddf1      	ble.n	db1ba <__ieee754_sqrt+0x76>
   db1d6:	2900      	cmp	r1, #0
   db1d8:	eb01 0502 	add.w	r5, r1, r2
   db1dc:	db09      	blt.n	db1f2 <__ieee754_sqrt+0xae>
   db1de:	46b0      	mov	r8, r6
   db1e0:	1b9b      	subs	r3, r3, r6
   db1e2:	42a1      	cmp	r1, r4
   db1e4:	bf88      	it	hi
   db1e6:	f103 33ff 	addhi.w	r3, r3, #4294967295
   db1ea:	1a64      	subs	r4, r4, r1
   db1ec:	4417      	add	r7, r2
   db1ee:	4646      	mov	r6, r8
   db1f0:	e7e4      	b.n	db1bc <__ieee754_sqrt+0x78>
   db1f2:	2d00      	cmp	r5, #0
   db1f4:	dbf3      	blt.n	db1de <__ieee754_sqrt+0x9a>
   db1f6:	f106 0801 	add.w	r8, r6, #1
   db1fa:	e7f1      	b.n	db1e0 <__ieee754_sqrt+0x9c>
   db1fc:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   db200:	4332      	orrs	r2, r6
   db202:	d036      	beq.n	db272 <__ieee754_sqrt+0x12e>
   db204:	2f00      	cmp	r7, #0
   db206:	d14d      	bne.n	db2a4 <__ieee754_sqrt+0x160>
   db208:	4639      	mov	r1, r7
   db20a:	0ae2      	lsrs	r2, r4, #11
   db20c:	3915      	subs	r1, #21
   db20e:	0564      	lsls	r4, r4, #21
   db210:	4613      	mov	r3, r2
   db212:	2a00      	cmp	r2, #0
   db214:	d0f9      	beq.n	db20a <__ieee754_sqrt+0xc6>
   db216:	02d7      	lsls	r7, r2, #11
   db218:	d451      	bmi.n	db2be <__ieee754_sqrt+0x17a>
   db21a:	2000      	movs	r0, #0
   db21c:	005b      	lsls	r3, r3, #1
   db21e:	02de      	lsls	r6, r3, #11
   db220:	4605      	mov	r5, r0
   db222:	f100 0001 	add.w	r0, r0, #1
   db226:	d5f9      	bpl.n	db21c <__ieee754_sqrt+0xd8>
   db228:	461a      	mov	r2, r3
   db22a:	4623      	mov	r3, r4
   db22c:	4084      	lsls	r4, r0
   db22e:	f1c0 0020 	rsb	r0, r0, #32
   db232:	40c3      	lsrs	r3, r0
   db234:	4313      	orrs	r3, r2
   db236:	1b49      	subs	r1, r1, r5
   db238:	e793      	b.n	db162 <__ieee754_sqrt+0x1e>
   db23a:	42a1      	cmp	r1, r4
   db23c:	d8be      	bhi.n	db1bc <__ieee754_sqrt+0x78>
   db23e:	2900      	cmp	r1, #0
   db240:	eb01 0502 	add.w	r5, r1, r2
   db244:	dbd5      	blt.n	db1f2 <__ieee754_sqrt+0xae>
   db246:	4698      	mov	r8, r3
   db248:	2300      	movs	r3, #0
   db24a:	e7ce      	b.n	db1ea <__ieee754_sqrt+0xa6>
   db24c:	4323      	orrs	r3, r4
   db24e:	d112      	bne.n	db276 <__ieee754_sqrt+0x132>
   db250:	0878      	lsrs	r0, r7, #1
   db252:	ea4f 016c 	mov.w	r1, ip, asr #1
   db256:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   db25a:	f01c 0f01 	tst.w	ip, #1
   db25e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   db262:	bf18      	it	ne
   db264:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   db268:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   db26c:	4602      	mov	r2, r0
   db26e:	ec43 2b10 	vmov	d0, r2, r3
   db272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db276:	1c7b      	adds	r3, r7, #1
   db278:	bf16      	itet	ne
   db27a:	1c78      	addne	r0, r7, #1
   db27c:	f10c 0c01 	addeq.w	ip, ip, #1
   db280:	0840      	lsrne	r0, r0, #1
   db282:	e7e6      	b.n	db252 <__ieee754_sqrt+0x10e>
   db284:	ee10 2a10 	vmov	r2, s0
   db288:	ee10 0a10 	vmov	r0, s0
   db28c:	463b      	mov	r3, r7
   db28e:	4639      	mov	r1, r7
   db290:	f001 fc5c 	bl	dcb4c <__aeabi_dmul>
   db294:	4632      	mov	r2, r6
   db296:	463b      	mov	r3, r7
   db298:	f001 faa2 	bl	dc7e0 <__adddf3>
   db29c:	ec41 0b10 	vmov	d0, r0, r1
   db2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db2a4:	ee10 2a10 	vmov	r2, s0
   db2a8:	4630      	mov	r0, r6
   db2aa:	4639      	mov	r1, r7
   db2ac:	f001 fa96 	bl	dc7dc <__aeabi_dsub>
   db2b0:	4602      	mov	r2, r0
   db2b2:	460b      	mov	r3, r1
   db2b4:	f001 fd74 	bl	dcda0 <__aeabi_ddiv>
   db2b8:	ec41 0b10 	vmov	d0, r0, r1
   db2bc:	e7d9      	b.n	db272 <__ieee754_sqrt+0x12e>
   db2be:	4623      	mov	r3, r4
   db2c0:	2020      	movs	r0, #32
   db2c2:	f04f 35ff 	mov.w	r5, #4294967295
   db2c6:	e7b4      	b.n	db232 <__ieee754_sqrt+0xee>
   db2c8:	7ff00000 	.word	0x7ff00000

000db2cc <__ieee754_atan2f>:
   db2cc:	b510      	push	{r4, lr}
   db2ce:	b082      	sub	sp, #8
   db2d0:	edcd 0a01 	vstr	s1, [sp, #4]
   db2d4:	9b01      	ldr	r3, [sp, #4]
   db2d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   db2da:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   db2de:	eef0 7a40 	vmov.f32	s15, s0
   db2e2:	dc30      	bgt.n	db346 <__ieee754_atan2f+0x7a>
   db2e4:	ee10 0a10 	vmov	r0, s0
   db2e8:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   db2ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   db2f0:	dc29      	bgt.n	db346 <__ieee754_atan2f+0x7a>
   db2f2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   db2f6:	d042      	beq.n	db37e <__ieee754_atan2f+0xb2>
   db2f8:	179c      	asrs	r4, r3, #30
   db2fa:	f004 0402 	and.w	r4, r4, #2
   db2fe:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   db302:	b331      	cbz	r1, db352 <__ieee754_atan2f+0x86>
   db304:	b37a      	cbz	r2, db366 <__ieee754_atan2f+0x9a>
   db306:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   db30a:	d040      	beq.n	db38e <__ieee754_atan2f+0xc2>
   db30c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   db310:	d029      	beq.n	db366 <__ieee754_atan2f+0x9a>
   db312:	1a8a      	subs	r2, r1, r2
   db314:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   db318:	ea4f 51e2 	mov.w	r1, r2, asr #23
   db31c:	da34      	bge.n	db388 <__ieee754_atan2f+0xbc>
   db31e:	2b00      	cmp	r3, #0
   db320:	da42      	bge.n	db3a8 <__ieee754_atan2f+0xdc>
   db322:	313c      	adds	r1, #60	; 0x3c
   db324:	da40      	bge.n	db3a8 <__ieee754_atan2f+0xdc>
   db326:	ed9f 0a34 	vldr	s0, [pc, #208]	; db3f8 <__ieee754_atan2f+0x12c>
   db32a:	2c01      	cmp	r4, #1
   db32c:	d04e      	beq.n	db3cc <__ieee754_atan2f+0x100>
   db32e:	2c02      	cmp	r4, #2
   db330:	d043      	beq.n	db3ba <__ieee754_atan2f+0xee>
   db332:	b164      	cbz	r4, db34e <__ieee754_atan2f+0x82>
   db334:	ed9f 7a31 	vldr	s14, [pc, #196]	; db3fc <__ieee754_atan2f+0x130>
   db338:	eddf 7a31 	vldr	s15, [pc, #196]	; db400 <__ieee754_atan2f+0x134>
   db33c:	ee30 0a07 	vadd.f32	s0, s0, s14
   db340:	ee30 0a67 	vsub.f32	s0, s0, s15
   db344:	e003      	b.n	db34e <__ieee754_atan2f+0x82>
   db346:	ed9d 7a01 	vldr	s14, [sp, #4]
   db34a:	ee37 0a27 	vadd.f32	s0, s14, s15
   db34e:	b002      	add	sp, #8
   db350:	bd10      	pop	{r4, pc}
   db352:	2c02      	cmp	r4, #2
   db354:	d010      	beq.n	db378 <__ieee754_atan2f+0xac>
   db356:	ed9f 0a2b 	vldr	s0, [pc, #172]	; db404 <__ieee754_atan2f+0x138>
   db35a:	2c03      	cmp	r4, #3
   db35c:	bf18      	it	ne
   db35e:	eeb0 0a67 	vmovne.f32	s0, s15
   db362:	b002      	add	sp, #8
   db364:	bd10      	pop	{r4, pc}
   db366:	ed9f 0a28 	vldr	s0, [pc, #160]	; db408 <__ieee754_atan2f+0x13c>
   db36a:	eddf 7a28 	vldr	s15, [pc, #160]	; db40c <__ieee754_atan2f+0x140>
   db36e:	2800      	cmp	r0, #0
   db370:	bfb8      	it	lt
   db372:	eeb0 0a67 	vmovlt.f32	s0, s15
   db376:	e7ea      	b.n	db34e <__ieee754_atan2f+0x82>
   db378:	ed9f 0a21 	vldr	s0, [pc, #132]	; db400 <__ieee754_atan2f+0x134>
   db37c:	e7e7      	b.n	db34e <__ieee754_atan2f+0x82>
   db37e:	b002      	add	sp, #8
   db380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   db384:	f001 b88e 	b.w	dc4a4 <atanf>
   db388:	ed9f 0a1f 	vldr	s0, [pc, #124]	; db408 <__ieee754_atan2f+0x13c>
   db38c:	e7cd      	b.n	db32a <__ieee754_atan2f+0x5e>
   db38e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   db392:	f104 34ff 	add.w	r4, r4, #4294967295
   db396:	d020      	beq.n	db3da <__ieee754_atan2f+0x10e>
   db398:	2c02      	cmp	r4, #2
   db39a:	d826      	bhi.n	db3ea <__ieee754_atan2f+0x11e>
   db39c:	4b1c      	ldr	r3, [pc, #112]	; (db410 <__ieee754_atan2f+0x144>)
   db39e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db3a2:	ed94 0a00 	vldr	s0, [r4]
   db3a6:	e7d2      	b.n	db34e <__ieee754_atan2f+0x82>
   db3a8:	ed9d 7a01 	vldr	s14, [sp, #4]
   db3ac:	ee87 0a87 	vdiv.f32	s0, s15, s14
   db3b0:	f001 f950 	bl	dc654 <fabsf>
   db3b4:	f001 f876 	bl	dc4a4 <atanf>
   db3b8:	e7b7      	b.n	db32a <__ieee754_atan2f+0x5e>
   db3ba:	ed9f 7a10 	vldr	s14, [pc, #64]	; db3fc <__ieee754_atan2f+0x130>
   db3be:	eddf 7a10 	vldr	s15, [pc, #64]	; db400 <__ieee754_atan2f+0x134>
   db3c2:	ee30 0a07 	vadd.f32	s0, s0, s14
   db3c6:	ee37 0ac0 	vsub.f32	s0, s15, s0
   db3ca:	e7c0      	b.n	db34e <__ieee754_atan2f+0x82>
   db3cc:	ee10 3a10 	vmov	r3, s0
   db3d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   db3d4:	ee00 3a10 	vmov	s0, r3
   db3d8:	e7b9      	b.n	db34e <__ieee754_atan2f+0x82>
   db3da:	2c02      	cmp	r4, #2
   db3dc:	d808      	bhi.n	db3f0 <__ieee754_atan2f+0x124>
   db3de:	4b0d      	ldr	r3, [pc, #52]	; (db414 <__ieee754_atan2f+0x148>)
   db3e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db3e4:	ed94 0a00 	vldr	s0, [r4]
   db3e8:	e7b1      	b.n	db34e <__ieee754_atan2f+0x82>
   db3ea:	ed9f 0a03 	vldr	s0, [pc, #12]	; db3f8 <__ieee754_atan2f+0x12c>
   db3ee:	e7ae      	b.n	db34e <__ieee754_atan2f+0x82>
   db3f0:	ed9f 0a09 	vldr	s0, [pc, #36]	; db418 <__ieee754_atan2f+0x14c>
   db3f4:	e7ab      	b.n	db34e <__ieee754_atan2f+0x82>
   db3f6:	bf00      	nop
   db3f8:	00000000 	.word	0x00000000
   db3fc:	33bbbd2e 	.word	0x33bbbd2e
   db400:	40490fdb 	.word	0x40490fdb
   db404:	c0490fdb 	.word	0xc0490fdb
   db408:	3fc90fdb 	.word	0x3fc90fdb
   db40c:	bfc90fdb 	.word	0xbfc90fdb
   db410:	000debc8 	.word	0x000debc8
   db414:	000debbc 	.word	0x000debbc
   db418:	3f490fdb 	.word	0x3f490fdb

000db41c <__ieee754_rem_pio2f>:
   db41c:	b570      	push	{r4, r5, r6, lr}
   db41e:	ee10 3a10 	vmov	r3, s0
   db422:	4a95      	ldr	r2, [pc, #596]	; (db678 <__ieee754_rem_pio2f+0x25c>)
   db424:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   db428:	4294      	cmp	r4, r2
   db42a:	b086      	sub	sp, #24
   db42c:	4605      	mov	r5, r0
   db42e:	dd68      	ble.n	db502 <__ieee754_rem_pio2f+0xe6>
   db430:	4a92      	ldr	r2, [pc, #584]	; (db67c <__ieee754_rem_pio2f+0x260>)
   db432:	4294      	cmp	r4, r2
   db434:	ee10 6a10 	vmov	r6, s0
   db438:	dc1a      	bgt.n	db470 <__ieee754_rem_pio2f+0x54>
   db43a:	2b00      	cmp	r3, #0
   db43c:	eddf 7a90 	vldr	s15, [pc, #576]	; db680 <__ieee754_rem_pio2f+0x264>
   db440:	4a90      	ldr	r2, [pc, #576]	; (db684 <__ieee754_rem_pio2f+0x268>)
   db442:	f024 040f 	bic.w	r4, r4, #15
   db446:	f340 80f1 	ble.w	db62c <__ieee754_rem_pio2f+0x210>
   db44a:	4294      	cmp	r4, r2
   db44c:	ee70 7a67 	vsub.f32	s15, s0, s15
   db450:	d066      	beq.n	db520 <__ieee754_rem_pio2f+0x104>
   db452:	ed9f 7a8d 	vldr	s14, [pc, #564]	; db688 <__ieee754_rem_pio2f+0x26c>
   db456:	ee77 6ac7 	vsub.f32	s13, s15, s14
   db45a:	2001      	movs	r0, #1
   db45c:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db460:	edc5 6a00 	vstr	s13, [r5]
   db464:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db468:	edc5 7a01 	vstr	s15, [r5, #4]
   db46c:	b006      	add	sp, #24
   db46e:	bd70      	pop	{r4, r5, r6, pc}
   db470:	4a86      	ldr	r2, [pc, #536]	; (db68c <__ieee754_rem_pio2f+0x270>)
   db472:	4294      	cmp	r4, r2
   db474:	dd67      	ble.n	db546 <__ieee754_rem_pio2f+0x12a>
   db476:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   db47a:	da49      	bge.n	db510 <__ieee754_rem_pio2f+0xf4>
   db47c:	15e2      	asrs	r2, r4, #23
   db47e:	3a86      	subs	r2, #134	; 0x86
   db480:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   db484:	ee07 3a90 	vmov	s15, r3
   db488:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   db48c:	eddf 6a80 	vldr	s13, [pc, #512]	; db690 <__ieee754_rem_pio2f+0x274>
   db490:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   db494:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db498:	ed8d 7a03 	vstr	s14, [sp, #12]
   db49c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   db4a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   db4a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   db4a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db4ac:	ed8d 7a04 	vstr	s14, [sp, #16]
   db4b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
   db4b4:	eef5 7a40 	vcmp.f32	s15, #0.0
   db4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db4bc:	edcd 7a05 	vstr	s15, [sp, #20]
   db4c0:	f040 80a3 	bne.w	db60a <__ieee754_rem_pio2f+0x1ee>
   db4c4:	eeb5 7a40 	vcmp.f32	s14, #0.0
   db4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db4cc:	bf14      	ite	ne
   db4ce:	2302      	movne	r3, #2
   db4d0:	2301      	moveq	r3, #1
   db4d2:	4970      	ldr	r1, [pc, #448]	; (db694 <__ieee754_rem_pio2f+0x278>)
   db4d4:	9101      	str	r1, [sp, #4]
   db4d6:	2102      	movs	r1, #2
   db4d8:	9100      	str	r1, [sp, #0]
   db4da:	a803      	add	r0, sp, #12
   db4dc:	4629      	mov	r1, r5
   db4de:	f000 f969 	bl	db7b4 <__kernel_rem_pio2f>
   db4e2:	2e00      	cmp	r6, #0
   db4e4:	dac2      	bge.n	db46c <__ieee754_rem_pio2f+0x50>
   db4e6:	ed95 7a00 	vldr	s14, [r5]
   db4ea:	edd5 7a01 	vldr	s15, [r5, #4]
   db4ee:	eeb1 7a47 	vneg.f32	s14, s14
   db4f2:	eef1 7a67 	vneg.f32	s15, s15
   db4f6:	4240      	negs	r0, r0
   db4f8:	ed85 7a00 	vstr	s14, [r5]
   db4fc:	edc5 7a01 	vstr	s15, [r5, #4]
   db500:	e7b4      	b.n	db46c <__ieee754_rem_pio2f+0x50>
   db502:	2200      	movs	r2, #0
   db504:	ed85 0a00 	vstr	s0, [r5]
   db508:	6042      	str	r2, [r0, #4]
   db50a:	2000      	movs	r0, #0
   db50c:	b006      	add	sp, #24
   db50e:	bd70      	pop	{r4, r5, r6, pc}
   db510:	ee70 7a40 	vsub.f32	s15, s0, s0
   db514:	2000      	movs	r0, #0
   db516:	edc5 7a01 	vstr	s15, [r5, #4]
   db51a:	edc5 7a00 	vstr	s15, [r5]
   db51e:	e7a5      	b.n	db46c <__ieee754_rem_pio2f+0x50>
   db520:	eddf 6a5d 	vldr	s13, [pc, #372]	; db698 <__ieee754_rem_pio2f+0x27c>
   db524:	ed9f 7a5d 	vldr	s14, [pc, #372]	; db69c <__ieee754_rem_pio2f+0x280>
   db528:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db52c:	2001      	movs	r0, #1
   db52e:	ee77 6ac7 	vsub.f32	s13, s15, s14
   db532:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db536:	edc5 6a00 	vstr	s13, [r5]
   db53a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db53e:	edc5 7a01 	vstr	s15, [r5, #4]
   db542:	b006      	add	sp, #24
   db544:	bd70      	pop	{r4, r5, r6, pc}
   db546:	f001 f885 	bl	dc654 <fabsf>
   db54a:	eddf 6a55 	vldr	s13, [pc, #340]	; db6a0 <__ieee754_rem_pio2f+0x284>
   db54e:	ed9f 6a4c 	vldr	s12, [pc, #304]	; db680 <__ieee754_rem_pio2f+0x264>
   db552:	ed9f 7a4d 	vldr	s14, [pc, #308]	; db688 <__ieee754_rem_pio2f+0x26c>
   db556:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   db55a:	eee0 7a26 	vfma.f32	s15, s0, s13
   db55e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db562:	ee17 0a90 	vmov	r0, s15
   db566:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   db56a:	281f      	cmp	r0, #31
   db56c:	eea6 0ac6 	vfms.f32	s0, s13, s12
   db570:	ee66 7a87 	vmul.f32	s15, s13, s14
   db574:	eeb1 6a66 	vneg.f32	s12, s13
   db578:	dc1e      	bgt.n	db5b8 <__ieee754_rem_pio2f+0x19c>
   db57a:	4a4a      	ldr	r2, [pc, #296]	; (db6a4 <__ieee754_rem_pio2f+0x288>)
   db57c:	1e41      	subs	r1, r0, #1
   db57e:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   db582:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   db586:	4293      	cmp	r3, r2
   db588:	d016      	beq.n	db5b8 <__ieee754_rem_pio2f+0x19c>
   db58a:	ee30 7a67 	vsub.f32	s14, s0, s15
   db58e:	ed85 7a00 	vstr	s14, [r5]
   db592:	ee30 0a47 	vsub.f32	s0, s0, s14
   db596:	2e00      	cmp	r6, #0
   db598:	ee30 0a67 	vsub.f32	s0, s0, s15
   db59c:	ed85 0a01 	vstr	s0, [r5, #4]
   db5a0:	f6bf af64 	bge.w	db46c <__ieee754_rem_pio2f+0x50>
   db5a4:	eeb1 7a47 	vneg.f32	s14, s14
   db5a8:	eeb1 0a40 	vneg.f32	s0, s0
   db5ac:	ed85 7a00 	vstr	s14, [r5]
   db5b0:	ed85 0a01 	vstr	s0, [r5, #4]
   db5b4:	4240      	negs	r0, r0
   db5b6:	e759      	b.n	db46c <__ieee754_rem_pio2f+0x50>
   db5b8:	ee30 7a67 	vsub.f32	s14, s0, s15
   db5bc:	15e2      	asrs	r2, r4, #23
   db5be:	ee17 3a10 	vmov	r3, s14
   db5c2:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   db5c6:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   db5ca:	2c08      	cmp	r4, #8
   db5cc:	dddf      	ble.n	db58e <__ieee754_rem_pio2f+0x172>
   db5ce:	eddf 7a32 	vldr	s15, [pc, #200]	; db698 <__ieee754_rem_pio2f+0x27c>
   db5d2:	ed9f 7a32 	vldr	s14, [pc, #200]	; db69c <__ieee754_rem_pio2f+0x280>
   db5d6:	eef0 5a40 	vmov.f32	s11, s0
   db5da:	eee6 5a27 	vfma.f32	s11, s12, s15
   db5de:	ee30 0a65 	vsub.f32	s0, s0, s11
   db5e2:	eea6 0a27 	vfma.f32	s0, s12, s15
   db5e6:	eef0 7a40 	vmov.f32	s15, s0
   db5ea:	eed6 7a87 	vfnms.f32	s15, s13, s14
   db5ee:	ee35 7ae7 	vsub.f32	s14, s11, s15
   db5f2:	ee17 3a10 	vmov	r3, s14
   db5f6:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   db5fa:	1ad2      	subs	r2, r2, r3
   db5fc:	2a19      	cmp	r2, #25
   db5fe:	dc06      	bgt.n	db60e <__ieee754_rem_pio2f+0x1f2>
   db600:	ed85 7a00 	vstr	s14, [r5]
   db604:	eeb0 0a65 	vmov.f32	s0, s11
   db608:	e7c3      	b.n	db592 <__ieee754_rem_pio2f+0x176>
   db60a:	2303      	movs	r3, #3
   db60c:	e761      	b.n	db4d2 <__ieee754_rem_pio2f+0xb6>
   db60e:	ed9f 7a26 	vldr	s14, [pc, #152]	; db6a8 <__ieee754_rem_pio2f+0x28c>
   db612:	ed9f 5a26 	vldr	s10, [pc, #152]	; db6ac <__ieee754_rem_pio2f+0x290>
   db616:	eeb0 0a65 	vmov.f32	s0, s11
   db61a:	eea6 0a07 	vfma.f32	s0, s12, s14
   db61e:	ee75 7ac0 	vsub.f32	s15, s11, s0
   db622:	eee6 7a07 	vfma.f32	s15, s12, s14
   db626:	eed6 7a85 	vfnms.f32	s15, s13, s10
   db62a:	e7ae      	b.n	db58a <__ieee754_rem_pio2f+0x16e>
   db62c:	4294      	cmp	r4, r2
   db62e:	ee70 7a27 	vadd.f32	s15, s0, s15
   db632:	d00e      	beq.n	db652 <__ieee754_rem_pio2f+0x236>
   db634:	ed9f 7a14 	vldr	s14, [pc, #80]	; db688 <__ieee754_rem_pio2f+0x26c>
   db638:	ee77 6a87 	vadd.f32	s13, s15, s14
   db63c:	f04f 30ff 	mov.w	r0, #4294967295
   db640:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db644:	edc5 6a00 	vstr	s13, [r5]
   db648:	ee77 7a87 	vadd.f32	s15, s15, s14
   db64c:	edc5 7a01 	vstr	s15, [r5, #4]
   db650:	e70c      	b.n	db46c <__ieee754_rem_pio2f+0x50>
   db652:	eddf 6a11 	vldr	s13, [pc, #68]	; db698 <__ieee754_rem_pio2f+0x27c>
   db656:	ed9f 7a11 	vldr	s14, [pc, #68]	; db69c <__ieee754_rem_pio2f+0x280>
   db65a:	ee77 7aa6 	vadd.f32	s15, s15, s13
   db65e:	f04f 30ff 	mov.w	r0, #4294967295
   db662:	ee77 6a87 	vadd.f32	s13, s15, s14
   db666:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db66a:	edc5 6a00 	vstr	s13, [r5]
   db66e:	ee77 7a87 	vadd.f32	s15, s15, s14
   db672:	edc5 7a01 	vstr	s15, [r5, #4]
   db676:	e6f9      	b.n	db46c <__ieee754_rem_pio2f+0x50>
   db678:	3f490fd8 	.word	0x3f490fd8
   db67c:	4016cbe3 	.word	0x4016cbe3
   db680:	3fc90f80 	.word	0x3fc90f80
   db684:	3fc90fd0 	.word	0x3fc90fd0
   db688:	37354443 	.word	0x37354443
   db68c:	43490f80 	.word	0x43490f80
   db690:	43800000 	.word	0x43800000
   db694:	000dec54 	.word	0x000dec54
   db698:	37354400 	.word	0x37354400
   db69c:	2e85a308 	.word	0x2e85a308
   db6a0:	3f22f984 	.word	0x3f22f984
   db6a4:	000debd4 	.word	0x000debd4
   db6a8:	2e85a300 	.word	0x2e85a300
   db6ac:	248d3132 	.word	0x248d3132

000db6b0 <__kernel_cosf>:
   db6b0:	ee10 3a10 	vmov	r3, s0
   db6b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   db6b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   db6bc:	da2c      	bge.n	db718 <__kernel_cosf+0x68>
   db6be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   db6c2:	ee17 3a90 	vmov	r3, s15
   db6c6:	2b00      	cmp	r3, #0
   db6c8:	d060      	beq.n	db78c <__kernel_cosf+0xdc>
   db6ca:	ee20 7a00 	vmul.f32	s14, s0, s0
   db6ce:	eddf 4a31 	vldr	s9, [pc, #196]	; db794 <__kernel_cosf+0xe4>
   db6d2:	ed9f 5a31 	vldr	s10, [pc, #196]	; db798 <__kernel_cosf+0xe8>
   db6d6:	eddf 5a31 	vldr	s11, [pc, #196]	; db79c <__kernel_cosf+0xec>
   db6da:	ed9f 6a31 	vldr	s12, [pc, #196]	; db7a0 <__kernel_cosf+0xf0>
   db6de:	eddf 7a31 	vldr	s15, [pc, #196]	; db7a4 <__kernel_cosf+0xf4>
   db6e2:	eddf 6a31 	vldr	s13, [pc, #196]	; db7a8 <__kernel_cosf+0xf8>
   db6e6:	eea7 5a24 	vfma.f32	s10, s14, s9
   db6ea:	eee7 5a05 	vfma.f32	s11, s14, s10
   db6ee:	eea7 6a25 	vfma.f32	s12, s14, s11
   db6f2:	eee7 7a06 	vfma.f32	s15, s14, s12
   db6f6:	eee7 6a27 	vfma.f32	s13, s14, s15
   db6fa:	ee67 6a26 	vmul.f32	s13, s14, s13
   db6fe:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   db702:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   db706:	eee7 0a26 	vfma.f32	s1, s14, s13
   db70a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db70e:	eed7 0a27 	vfnms.f32	s1, s14, s15
   db712:	ee30 0a60 	vsub.f32	s0, s0, s1
   db716:	4770      	bx	lr
   db718:	ee20 7a00 	vmul.f32	s14, s0, s0
   db71c:	eddf 4a1d 	vldr	s9, [pc, #116]	; db794 <__kernel_cosf+0xe4>
   db720:	ed9f 5a1d 	vldr	s10, [pc, #116]	; db798 <__kernel_cosf+0xe8>
   db724:	eddf 5a1d 	vldr	s11, [pc, #116]	; db79c <__kernel_cosf+0xec>
   db728:	ed9f 6a1d 	vldr	s12, [pc, #116]	; db7a0 <__kernel_cosf+0xf0>
   db72c:	eddf 7a1d 	vldr	s15, [pc, #116]	; db7a4 <__kernel_cosf+0xf4>
   db730:	eddf 6a1d 	vldr	s13, [pc, #116]	; db7a8 <__kernel_cosf+0xf8>
   db734:	4a1d      	ldr	r2, [pc, #116]	; (db7ac <__kernel_cosf+0xfc>)
   db736:	eea7 5a24 	vfma.f32	s10, s14, s9
   db73a:	4293      	cmp	r3, r2
   db73c:	eee5 5a07 	vfma.f32	s11, s10, s14
   db740:	eea5 6a87 	vfma.f32	s12, s11, s14
   db744:	eee6 7a07 	vfma.f32	s15, s12, s14
   db748:	eee7 6a87 	vfma.f32	s13, s15, s14
   db74c:	ee66 6a87 	vmul.f32	s13, s13, s14
   db750:	ddd5      	ble.n	db6fe <__kernel_cosf+0x4e>
   db752:	4a17      	ldr	r2, [pc, #92]	; (db7b0 <__kernel_cosf+0x100>)
   db754:	4293      	cmp	r3, r2
   db756:	dc14      	bgt.n	db782 <__kernel_cosf+0xd2>
   db758:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   db75c:	ee07 3a90 	vmov	s15, r3
   db760:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   db764:	ee36 6a67 	vsub.f32	s12, s12, s15
   db768:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   db76c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   db770:	eee7 0a26 	vfma.f32	s1, s14, s13
   db774:	eed7 7a25 	vfnms.f32	s15, s14, s11
   db778:	ee77 0ae0 	vsub.f32	s1, s15, s1
   db77c:	ee36 0a60 	vsub.f32	s0, s12, s1
   db780:	4770      	bx	lr
   db782:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   db786:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   db78a:	e7ed      	b.n	db768 <__kernel_cosf+0xb8>
   db78c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db790:	4770      	bx	lr
   db792:	bf00      	nop
   db794:	ad47d74e 	.word	0xad47d74e
   db798:	310f74f6 	.word	0x310f74f6
   db79c:	b493f27c 	.word	0xb493f27c
   db7a0:	37d00d01 	.word	0x37d00d01
   db7a4:	bab60b61 	.word	0xbab60b61
   db7a8:	3d2aaaab 	.word	0x3d2aaaab
   db7ac:	3e999999 	.word	0x3e999999
   db7b0:	3f480000 	.word	0x3f480000

000db7b4 <__kernel_rem_pio2f>:
   db7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db7b8:	ed2d 8b04 	vpush	{d8-d9}
   db7bc:	b0db      	sub	sp, #364	; 0x16c
   db7be:	4cd7      	ldr	r4, [pc, #860]	; (dbb1c <__kernel_rem_pio2f+0x368>)
   db7c0:	9d68      	ldr	r5, [sp, #416]	; 0x1a0
   db7c2:	9107      	str	r1, [sp, #28]
   db7c4:	1d11      	adds	r1, r2, #4
   db7c6:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   db7ca:	9304      	str	r3, [sp, #16]
   db7cc:	9209      	str	r2, [sp, #36]	; 0x24
   db7ce:	4683      	mov	fp, r0
   db7d0:	f103 39ff 	add.w	r9, r3, #4294967295
   db7d4:	f2c0 829d 	blt.w	dbd12 <__kernel_rem_pio2f+0x55e>
   db7d8:	1ed3      	subs	r3, r2, #3
   db7da:	bf44      	itt	mi
   db7dc:	4613      	movmi	r3, r2
   db7de:	3304      	addmi	r3, #4
   db7e0:	10db      	asrs	r3, r3, #3
   db7e2:	9303      	str	r3, [sp, #12]
   db7e4:	3301      	adds	r3, #1
   db7e6:	00db      	lsls	r3, r3, #3
   db7e8:	9308      	str	r3, [sp, #32]
   db7ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db7ee:	1a9b      	subs	r3, r3, r2
   db7f0:	9306      	str	r3, [sp, #24]
   db7f2:	9b03      	ldr	r3, [sp, #12]
   db7f4:	eb16 0109 	adds.w	r1, r6, r9
   db7f8:	eba3 0309 	sub.w	r3, r3, r9
   db7fc:	d416      	bmi.n	db82c <__kernel_rem_pio2f+0x78>
   db7fe:	3101      	adds	r1, #1
   db800:	ed9f 7ac7 	vldr	s14, [pc, #796]	; dbb20 <__kernel_rem_pio2f+0x36c>
   db804:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   db806:	4419      	add	r1, r3
   db808:	aa1e      	add	r2, sp, #120	; 0x78
   db80a:	2b00      	cmp	r3, #0
   db80c:	bfa4      	itt	ge
   db80e:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   db812:	ee07 4a90 	vmovge	s15, r4
   db816:	f103 0301 	add.w	r3, r3, #1
   db81a:	bfac      	ite	ge
   db81c:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   db820:	eef0 7a47 	vmovlt.f32	s15, s14
   db824:	428b      	cmp	r3, r1
   db826:	ece2 7a01 	vstmia	r2!, {s15}
   db82a:	d1ee      	bne.n	db80a <__kernel_rem_pio2f+0x56>
   db82c:	2e00      	cmp	r6, #0
   db82e:	f2c0 82e0 	blt.w	dbdf2 <__kernel_rem_pio2f+0x63e>
   db832:	9b04      	ldr	r3, [sp, #16]
   db834:	a91e      	add	r1, sp, #120	; 0x78
   db836:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   db83a:	ad46      	add	r5, sp, #280	; 0x118
   db83c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   db840:	4648      	mov	r0, r9
   db842:	18f7      	adds	r7, r6, r3
   db844:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
   db848:	f1b9 0f00 	cmp.w	r9, #0
   db84c:	eddf 7ab4 	vldr	s15, [pc, #720]	; dbb20 <__kernel_rem_pio2f+0x36c>
   db850:	db09      	blt.n	db866 <__kernel_rem_pio2f+0xb2>
   db852:	4622      	mov	r2, r4
   db854:	465b      	mov	r3, fp
   db856:	ecf3 6a01 	vldmia	r3!, {s13}
   db85a:	ed32 7a01 	vldmdb	r2!, {s14}
   db85e:	428b      	cmp	r3, r1
   db860:	eee6 7a87 	vfma.f32	s15, s13, s14
   db864:	d1f7      	bne.n	db856 <__kernel_rem_pio2f+0xa2>
   db866:	3001      	adds	r0, #1
   db868:	42b8      	cmp	r0, r7
   db86a:	ece5 7a01 	vstmia	r5!, {s15}
   db86e:	f104 0404 	add.w	r4, r4, #4
   db872:	d1e9      	bne.n	db848 <__kernel_rem_pio2f+0x94>
   db874:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   db878:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   db87c:	3b08      	subs	r3, #8
   db87e:	9305      	str	r3, [sp, #20]
   db880:	ed9f 9aa9 	vldr	s18, [pc, #676]	; dbb28 <__kernel_rem_pio2f+0x374>
   db884:	eddf 8aa7 	vldr	s17, [pc, #668]	; dbb24 <__kernel_rem_pio2f+0x370>
   db888:	9806      	ldr	r0, [sp, #24]
   db88a:	9600      	str	r6, [sp, #0]
   db88c:	ab09      	add	r3, sp, #36	; 0x24
   db88e:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
   db892:	eb0b 040c 	add.w	r4, fp, ip
   db896:	af46      	add	r7, sp, #280	; 0x118
   db898:	465b      	mov	r3, fp
   db89a:	aa5a      	add	r2, sp, #360	; 0x168
   db89c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
   db8a0:	2e00      	cmp	r6, #0
   db8a2:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
   db8a6:	ea4f 0b86 	mov.w	fp, r6, lsl #2
   db8aa:	dd16      	ble.n	db8da <__kernel_rem_pio2f+0x126>
   db8ac:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   db8b0:	4641      	mov	r1, r8
   db8b2:	ee60 7a09 	vmul.f32	s15, s0, s18
   db8b6:	eeb0 7a40 	vmov.f32	s14, s0
   db8ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db8be:	ed72 6a01 	vldmdb	r2!, {s13}
   db8c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db8c6:	42ba      	cmp	r2, r7
   db8c8:	eea7 7ae8 	vfms.f32	s14, s15, s17
   db8cc:	ee37 0aa6 	vadd.f32	s0, s15, s13
   db8d0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   db8d4:	eca1 7a01 	vstmia	r1!, {s14}
   db8d8:	d1eb      	bne.n	db8b2 <__kernel_rem_pio2f+0xfe>
   db8da:	e9cd 0301 	strd	r0, r3, [sp, #4]
   db8de:	f000 ff07 	bl	dc6f0 <scalbnf>
   db8e2:	eeb0 8a40 	vmov.f32	s16, s0
   db8e6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   db8ea:	ee28 0a00 	vmul.f32	s0, s16, s0
   db8ee:	f000 feb9 	bl	dc664 <floorf>
   db8f2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   db8f6:	eea0 8a67 	vfms.f32	s16, s0, s15
   db8fa:	9801      	ldr	r0, [sp, #4]
   db8fc:	9b02      	ldr	r3, [sp, #8]
   db8fe:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   db902:	2800      	cmp	r0, #0
   db904:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   db908:	ee38 8a67 	vsub.f32	s16, s16, s15
   db90c:	dd78      	ble.n	dba00 <__kernel_rem_pio2f+0x24c>
   db90e:	f106 3cff 	add.w	ip, r6, #4294967295
   db912:	f1c0 0208 	rsb	r2, r0, #8
   db916:	f858 502c 	ldr.w	r5, [r8, ip, lsl #2]
   db91a:	fa45 f102 	asr.w	r1, r5, r2
   db91e:	fa01 f202 	lsl.w	r2, r1, r2
   db922:	1aaa      	subs	r2, r5, r2
   db924:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   db928:	f1c0 0507 	rsb	r5, r0, #7
   db92c:	ee19 ca90 	vmov	ip, s19
   db930:	fa42 f505 	asr.w	r5, r2, r5
   db934:	448c      	add	ip, r1
   db936:	2d00      	cmp	r5, #0
   db938:	ee09 ca90 	vmov	s19, ip
   db93c:	dc68      	bgt.n	dba10 <__kernel_rem_pio2f+0x25c>
   db93e:	eeb5 8a40 	vcmp.f32	s16, #0.0
   db942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db946:	f040 80b6 	bne.w	dbab6 <__kernel_rem_pio2f+0x302>
   db94a:	9a00      	ldr	r2, [sp, #0]
   db94c:	f106 3eff 	add.w	lr, r6, #4294967295
   db950:	4572      	cmp	r2, lr
   db952:	dc10      	bgt.n	db976 <__kernel_rem_pio2f+0x1c2>
   db954:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
   db958:	3a01      	subs	r2, #1
   db95a:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   db95e:	2100      	movs	r1, #0
   db960:	469c      	mov	ip, r3
   db962:	f852 3904 	ldr.w	r3, [r2], #-4
   db966:	4552      	cmp	r2, sl
   db968:	ea41 0103 	orr.w	r1, r1, r3
   db96c:	d1f9      	bne.n	db962 <__kernel_rem_pio2f+0x1ae>
   db96e:	4663      	mov	r3, ip
   db970:	2900      	cmp	r1, #0
   db972:	f040 80f2 	bne.w	dbb5a <__kernel_rem_pio2f+0x3a6>
   db976:	9a00      	ldr	r2, [sp, #0]
   db978:	3a01      	subs	r2, #1
   db97a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
   db97e:	2a00      	cmp	r2, #0
   db980:	f040 80e6 	bne.w	dbb50 <__kernel_rem_pio2f+0x39c>
   db984:	9a05      	ldr	r2, [sp, #20]
   db986:	f04f 0c01 	mov.w	ip, #1
   db98a:	f852 1904 	ldr.w	r1, [r2], #-4
   db98e:	f10c 0c01 	add.w	ip, ip, #1
   db992:	2900      	cmp	r1, #0
   db994:	d0f9      	beq.n	db98a <__kernel_rem_pio2f+0x1d6>
   db996:	f106 0b01 	add.w	fp, r6, #1
   db99a:	44b4      	add	ip, r6
   db99c:	46de      	mov	lr, fp
   db99e:	9904      	ldr	r1, [sp, #16]
   db9a0:	9a03      	ldr	r2, [sp, #12]
   db9a2:	198d      	adds	r5, r1, r6
   db9a4:	445a      	add	r2, fp
   db9a6:	a91e      	add	r1, sp, #120	; 0x78
   db9a8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   db9ac:	eb01 0585 	add.w	r5, r1, r5, lsl #2
   db9b0:	9969      	ldr	r1, [sp, #420]	; 0x1a4
   db9b2:	3a01      	subs	r2, #1
   db9b4:	eb01 0682 	add.w	r6, r1, r2, lsl #2
   db9b8:	eb07 0b8b 	add.w	fp, r7, fp, lsl #2
   db9bc:	edd6 7a01 	vldr	s15, [r6, #4]
   db9c0:	ed9f 7a57 	vldr	s14, [pc, #348]	; dbb20 <__kernel_rem_pio2f+0x36c>
   db9c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db9c8:	f1b9 0f00 	cmp.w	r9, #0
   db9cc:	f106 0604 	add.w	r6, r6, #4
   db9d0:	4629      	mov	r1, r5
   db9d2:	edc5 7a00 	vstr	s15, [r5]
   db9d6:	f105 0504 	add.w	r5, r5, #4
   db9da:	db09      	blt.n	db9f0 <__kernel_rem_pio2f+0x23c>
   db9dc:	461a      	mov	r2, r3
   db9de:	e001      	b.n	db9e4 <__kernel_rem_pio2f+0x230>
   db9e0:	ed71 7a01 	vldmdb	r1!, {s15}
   db9e4:	ecf2 6a01 	vldmia	r2!, {s13}
   db9e8:	42a2      	cmp	r2, r4
   db9ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
   db9ee:	d1f7      	bne.n	db9e0 <__kernel_rem_pio2f+0x22c>
   db9f0:	f10e 0e01 	add.w	lr, lr, #1
   db9f4:	45e6      	cmp	lr, ip
   db9f6:	ecab 7a01 	vstmia	fp!, {s14}
   db9fa:	dddf      	ble.n	db9bc <__kernel_rem_pio2f+0x208>
   db9fc:	4666      	mov	r6, ip
   db9fe:	e74c      	b.n	db89a <__kernel_rem_pio2f+0xe6>
   dba00:	f040 809c 	bne.w	dbb3c <__kernel_rem_pio2f+0x388>
   dba04:	1e72      	subs	r2, r6, #1
   dba06:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
   dba0a:	122d      	asrs	r5, r5, #8
   dba0c:	2d00      	cmp	r5, #0
   dba0e:	dd96      	ble.n	db93e <__kernel_rem_pio2f+0x18a>
   dba10:	ee19 2a90 	vmov	r2, s19
   dba14:	2e00      	cmp	r6, #0
   dba16:	f102 0201 	add.w	r2, r2, #1
   dba1a:	ee09 2a90 	vmov	s19, r2
   dba1e:	f340 818e 	ble.w	dbd3e <__kernel_rem_pio2f+0x58a>
   dba22:	f8d8 1000 	ldr.w	r1, [r8]
   dba26:	2900      	cmp	r1, #0
   dba28:	d174      	bne.n	dbb14 <__kernel_rem_pio2f+0x360>
   dba2a:	2e01      	cmp	r6, #1
   dba2c:	d01c      	beq.n	dba68 <__kernel_rem_pio2f+0x2b4>
   dba2e:	4642      	mov	r2, r8
   dba30:	f04f 0c01 	mov.w	ip, #1
   dba34:	f852 1f04 	ldr.w	r1, [r2, #4]!
   dba38:	2900      	cmp	r1, #0
   dba3a:	d079      	beq.n	dbb30 <__kernel_rem_pio2f+0x37c>
   dba3c:	f10c 0201 	add.w	r2, ip, #1
   dba40:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   dba44:	4296      	cmp	r6, r2
   dba46:	f848 102c 	str.w	r1, [r8, ip, lsl #2]
   dba4a:	dd0c      	ble.n	dba66 <__kernel_rem_pio2f+0x2b2>
   dba4c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
   dba50:	44c3      	add	fp, r8
   dba52:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   dba56:	e000      	b.n	dba5a <__kernel_rem_pio2f+0x2a6>
   dba58:	6811      	ldr	r1, [r2, #0]
   dba5a:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   dba5e:	f842 1b04 	str.w	r1, [r2], #4
   dba62:	455a      	cmp	r2, fp
   dba64:	d1f8      	bne.n	dba58 <__kernel_rem_pio2f+0x2a4>
   dba66:	2101      	movs	r1, #1
   dba68:	2800      	cmp	r0, #0
   dba6a:	dd0c      	ble.n	dba86 <__kernel_rem_pio2f+0x2d2>
   dba6c:	2801      	cmp	r0, #1
   dba6e:	f000 8147 	beq.w	dbd00 <__kernel_rem_pio2f+0x54c>
   dba72:	2802      	cmp	r0, #2
   dba74:	d107      	bne.n	dba86 <__kernel_rem_pio2f+0x2d2>
   dba76:	f106 3cff 	add.w	ip, r6, #4294967295
   dba7a:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   dba7e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   dba82:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   dba86:	2d02      	cmp	r5, #2
   dba88:	f47f af59 	bne.w	db93e <__kernel_rem_pio2f+0x18a>
   dba8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   dba90:	ee30 8a48 	vsub.f32	s16, s0, s16
   dba94:	2900      	cmp	r1, #0
   dba96:	f43f af52 	beq.w	db93e <__kernel_rem_pio2f+0x18a>
   dba9a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   dba9e:	f000 fe27 	bl	dc6f0 <scalbnf>
   dbaa2:	ee38 8a40 	vsub.f32	s16, s16, s0
   dbaa6:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
   dbaaa:	eeb5 8a40 	vcmp.f32	s16, #0.0
   dbaae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbab2:	f43f af4a 	beq.w	db94a <__kernel_rem_pio2f+0x196>
   dbab6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   dbaba:	eeb0 0a48 	vmov.f32	s0, s16
   dbabe:	1a98      	subs	r0, r3, r2
   dbac0:	9602      	str	r6, [sp, #8]
   dbac2:	9501      	str	r5, [sp, #4]
   dbac4:	9e00      	ldr	r6, [sp, #0]
   dbac6:	f000 fe13 	bl	dc6f0 <scalbnf>
   dbaca:	ed9f 7a16 	vldr	s14, [pc, #88]	; dbb24 <__kernel_rem_pio2f+0x370>
   dbace:	eeb4 0ac7 	vcmpe.f32	s0, s14
   dbad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbad6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   dbada:	f2c0 8157 	blt.w	dbd8c <__kernel_rem_pio2f+0x5d8>
   dbade:	eddf 7a12 	vldr	s15, [pc, #72]	; dbb28 <__kernel_rem_pio2f+0x374>
   dbae2:	9906      	ldr	r1, [sp, #24]
   dbae4:	ee60 7a27 	vmul.f32	s15, s0, s15
   dbae8:	3108      	adds	r1, #8
   dbaea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   dbaee:	9106      	str	r1, [sp, #24]
   dbaf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dbaf4:	1c5d      	adds	r5, r3, #1
   dbaf6:	eea7 0ac7 	vfms.f32	s0, s15, s14
   dbafa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   dbafe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   dbb02:	ee10 1a10 	vmov	r1, s0
   dbb06:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   dbb0a:	ee17 3a90 	vmov	r3, s15
   dbb0e:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
   dbb12:	e039      	b.n	dbb88 <__kernel_rem_pio2f+0x3d4>
   dbb14:	2201      	movs	r2, #1
   dbb16:	f04f 0c00 	mov.w	ip, #0
   dbb1a:	e791      	b.n	dba40 <__kernel_rem_pio2f+0x28c>
   dbb1c:	000def98 	.word	0x000def98
   dbb20:	00000000 	.word	0x00000000
   dbb24:	43800000 	.word	0x43800000
   dbb28:	3b800000 	.word	0x3b800000
   dbb2c:	3fc90000 	.word	0x3fc90000
   dbb30:	f10c 0c01 	add.w	ip, ip, #1
   dbb34:	45b4      	cmp	ip, r6
   dbb36:	f47f af7d 	bne.w	dba34 <__kernel_rem_pio2f+0x280>
   dbb3a:	e795      	b.n	dba68 <__kernel_rem_pio2f+0x2b4>
   dbb3c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   dbb40:	eeb4 8ae7 	vcmpe.f32	s16, s15
   dbb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbb48:	f280 80e8 	bge.w	dbd1c <__kernel_rem_pio2f+0x568>
   dbb4c:	2500      	movs	r5, #0
   dbb4e:	e6f6      	b.n	db93e <__kernel_rem_pio2f+0x18a>
   dbb50:	f106 0b01 	add.w	fp, r6, #1
   dbb54:	46de      	mov	lr, fp
   dbb56:	46dc      	mov	ip, fp
   dbb58:	e721      	b.n	db99e <__kernel_rem_pio2f+0x1ea>
   dbb5a:	9806      	ldr	r0, [sp, #24]
   dbb5c:	f858 102e 	ldr.w	r1, [r8, lr, lsl #2]
   dbb60:	3808      	subs	r0, #8
   dbb62:	4633      	mov	r3, r6
   dbb64:	462a      	mov	r2, r5
   dbb66:	9e00      	ldr	r6, [sp, #0]
   dbb68:	9006      	str	r0, [sp, #24]
   dbb6a:	4675      	mov	r5, lr
   dbb6c:	b961      	cbnz	r1, dbb88 <__kernel_rem_pio2f+0x3d4>
   dbb6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   dbb72:	3b02      	subs	r3, #2
   dbb74:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   dbb78:	4601      	mov	r1, r0
   dbb7a:	f853 0904 	ldr.w	r0, [r3], #-4
   dbb7e:	3d01      	subs	r5, #1
   dbb80:	3908      	subs	r1, #8
   dbb82:	2800      	cmp	r0, #0
   dbb84:	d0f9      	beq.n	dbb7a <__kernel_rem_pio2f+0x3c6>
   dbb86:	9106      	str	r1, [sp, #24]
   dbb88:	9806      	ldr	r0, [sp, #24]
   dbb8a:	9200      	str	r2, [sp, #0]
   dbb8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   dbb90:	f000 fdae 	bl	dc6f0 <scalbnf>
   dbb94:	2d00      	cmp	r5, #0
   dbb96:	9a00      	ldr	r2, [sp, #0]
   dbb98:	f2c0 811e 	blt.w	dbdd8 <__kernel_rem_pio2f+0x624>
   dbb9c:	ea4f 0e85 	mov.w	lr, r5, lsl #2
   dbba0:	ab46      	add	r3, sp, #280	; 0x118
   dbba2:	eb03 070e 	add.w	r7, r3, lr
   dbba6:	f10e 0c04 	add.w	ip, lr, #4
   dbbaa:	ed1f 7a21 	vldr	s14, [pc, #-132]	; dbb28 <__kernel_rem_pio2f+0x374>
   dbbae:	eb08 030c 	add.w	r3, r8, ip
   dbbb2:	1d39      	adds	r1, r7, #4
   dbbb4:	ed73 7a01 	vldmdb	r3!, {s15}
   dbbb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dbbbc:	4543      	cmp	r3, r8
   dbbbe:	ee67 7a80 	vmul.f32	s15, s15, s0
   dbbc2:	ee20 0a07 	vmul.f32	s0, s0, s14
   dbbc6:	ed61 7a01 	vstmdb	r1!, {s15}
   dbbca:	d1f3      	bne.n	dbbb4 <__kernel_rem_pio2f+0x400>
   dbbcc:	2e00      	cmp	r6, #0
   dbbce:	ed1f 6a29 	vldr	s12, [pc, #-164]	; dbb2c <__kernel_rem_pio2f+0x378>
   dbbd2:	f04f 0400 	mov.w	r4, #0
   dbbd6:	db20      	blt.n	dbc1a <__kernel_rem_pio2f+0x466>
   dbbd8:	488f      	ldr	r0, [pc, #572]	; (dbe18 <__kernel_rem_pio2f+0x664>)
   dbbda:	eddf 7a90 	vldr	s15, [pc, #576]	; dbe1c <__kernel_rem_pio2f+0x668>
   dbbde:	4639      	mov	r1, r7
   dbbe0:	eeb0 7a46 	vmov.f32	s14, s12
   dbbe4:	2300      	movs	r3, #0
   dbbe6:	e003      	b.n	dbbf0 <__kernel_rem_pio2f+0x43c>
   dbbe8:	429c      	cmp	r4, r3
   dbbea:	db08      	blt.n	dbbfe <__kernel_rem_pio2f+0x44a>
   dbbec:	ecb0 7a01 	vldmia	r0!, {s14}
   dbbf0:	ecf1 6a01 	vldmia	r1!, {s13}
   dbbf4:	3301      	adds	r3, #1
   dbbf6:	429e      	cmp	r6, r3
   dbbf8:	eee6 7a87 	vfma.f32	s15, s13, s14
   dbbfc:	daf4      	bge.n	dbbe8 <__kernel_rem_pio2f+0x434>
   dbbfe:	ab5a      	add	r3, sp, #360	; 0x168
   dbc00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   dbc04:	42a5      	cmp	r5, r4
   dbc06:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   dbc0a:	f1a7 0704 	sub.w	r7, r7, #4
   dbc0e:	f104 0301 	add.w	r3, r4, #1
   dbc12:	d005      	beq.n	dbc20 <__kernel_rem_pio2f+0x46c>
   dbc14:	2e00      	cmp	r6, #0
   dbc16:	461c      	mov	r4, r3
   dbc18:	dade      	bge.n	dbbd8 <__kernel_rem_pio2f+0x424>
   dbc1a:	eddf 7a80 	vldr	s15, [pc, #512]	; dbe1c <__kernel_rem_pio2f+0x668>
   dbc1e:	e7ee      	b.n	dbbfe <__kernel_rem_pio2f+0x44a>
   dbc20:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   dbc22:	2902      	cmp	r1, #2
   dbc24:	dc1c      	bgt.n	dbc60 <__kernel_rem_pio2f+0x4ac>
   dbc26:	2900      	cmp	r1, #0
   dbc28:	f300 808b 	bgt.w	dbd42 <__kernel_rem_pio2f+0x58e>
   dbc2c:	d10f      	bne.n	dbc4e <__kernel_rem_pio2f+0x49a>
   dbc2e:	ab32      	add	r3, sp, #200	; 0xc8
   dbc30:	eddf 7a7a 	vldr	s15, [pc, #488]	; dbe1c <__kernel_rem_pio2f+0x668>
   dbc34:	449c      	add	ip, r3
   dbc36:	ed3c 7a01 	vldmdb	ip!, {s14}
   dbc3a:	4563      	cmp	r3, ip
   dbc3c:	ee77 7a87 	vadd.f32	s15, s15, s14
   dbc40:	d1f9      	bne.n	dbc36 <__kernel_rem_pio2f+0x482>
   dbc42:	b10a      	cbz	r2, dbc48 <__kernel_rem_pio2f+0x494>
   dbc44:	eef1 7a67 	vneg.f32	s15, s15
   dbc48:	9b07      	ldr	r3, [sp, #28]
   dbc4a:	edc3 7a00 	vstr	s15, [r3]
   dbc4e:	ee19 3a90 	vmov	r3, s19
   dbc52:	f003 0007 	and.w	r0, r3, #7
   dbc56:	b05b      	add	sp, #364	; 0x16c
   dbc58:	ecbd 8b04 	vpop	{d8-d9}
   dbc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbc60:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   dbc62:	2b03      	cmp	r3, #3
   dbc64:	d1f3      	bne.n	dbc4e <__kernel_rem_pio2f+0x49a>
   dbc66:	2d00      	cmp	r5, #0
   dbc68:	f000 80cb 	beq.w	dbe02 <__kernel_rem_pio2f+0x64e>
   dbc6c:	ab5a      	add	r3, sp, #360	; 0x168
   dbc6e:	4473      	add	r3, lr
   dbc70:	a932      	add	r1, sp, #200	; 0xc8
   dbc72:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   dbc76:	eb01 0385 	add.w	r3, r1, r5, lsl #2
   dbc7a:	ed73 7a01 	vldmdb	r3!, {s15}
   dbc7e:	eef0 6a47 	vmov.f32	s13, s14
   dbc82:	ee37 7a27 	vadd.f32	s14, s14, s15
   dbc86:	4299      	cmp	r1, r3
   dbc88:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dbc8c:	ed83 7a00 	vstr	s14, [r3]
   dbc90:	ee77 7aa6 	vadd.f32	s15, s15, s13
   dbc94:	edc3 7a01 	vstr	s15, [r3, #4]
   dbc98:	d1ef      	bne.n	dbc7a <__kernel_rem_pio2f+0x4c6>
   dbc9a:	2d01      	cmp	r5, #1
   dbc9c:	f340 80b1 	ble.w	dbe02 <__kernel_rem_pio2f+0x64e>
   dbca0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   dbca4:	ab5a      	add	r3, sp, #360	; 0x168
   dbca6:	3d01      	subs	r5, #1
   dbca8:	449e      	add	lr, r3
   dbcaa:	00ad      	lsls	r5, r5, #2
   dbcac:	1d2b      	adds	r3, r5, #4
   dbcae:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   dbcb2:	440b      	add	r3, r1
   dbcb4:	a833      	add	r0, sp, #204	; 0xcc
   dbcb6:	ed73 7a01 	vldmdb	r3!, {s15}
   dbcba:	eef0 6a47 	vmov.f32	s13, s14
   dbcbe:	ee37 7a27 	vadd.f32	s14, s14, s15
   dbcc2:	4298      	cmp	r0, r3
   dbcc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dbcc8:	ed83 7a00 	vstr	s14, [r3]
   dbccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
   dbcd0:	edc3 7a01 	vstr	s15, [r3, #4]
   dbcd4:	d1ef      	bne.n	dbcb6 <__kernel_rem_pio2f+0x502>
   dbcd6:	3508      	adds	r5, #8
   dbcd8:	eddf 7a50 	vldr	s15, [pc, #320]	; dbe1c <__kernel_rem_pio2f+0x668>
   dbcdc:	194b      	adds	r3, r1, r5
   dbcde:	3108      	adds	r1, #8
   dbce0:	ed33 7a01 	vldmdb	r3!, {s14}
   dbce4:	4299      	cmp	r1, r3
   dbce6:	ee77 7a87 	vadd.f32	s15, s15, s14
   dbcea:	d1f9      	bne.n	dbce0 <__kernel_rem_pio2f+0x52c>
   dbcec:	2a00      	cmp	r2, #0
   dbcee:	d155      	bne.n	dbd9c <__kernel_rem_pio2f+0x5e8>
   dbcf0:	9907      	ldr	r1, [sp, #28]
   dbcf2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   dbcf4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   dbcf6:	edc1 7a02 	vstr	s15, [r1, #8]
   dbcfa:	600a      	str	r2, [r1, #0]
   dbcfc:	604b      	str	r3, [r1, #4]
   dbcfe:	e7a6      	b.n	dbc4e <__kernel_rem_pio2f+0x49a>
   dbd00:	f106 3cff 	add.w	ip, r6, #4294967295
   dbd04:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   dbd08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   dbd0c:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   dbd10:	e6b9      	b.n	dba86 <__kernel_rem_pio2f+0x2d2>
   dbd12:	2308      	movs	r3, #8
   dbd14:	9308      	str	r3, [sp, #32]
   dbd16:	2300      	movs	r3, #0
   dbd18:	9303      	str	r3, [sp, #12]
   dbd1a:	e566      	b.n	db7ea <__kernel_rem_pio2f+0x36>
   dbd1c:	ee19 2a90 	vmov	r2, s19
   dbd20:	2e00      	cmp	r6, #0
   dbd22:	f102 0201 	add.w	r2, r2, #1
   dbd26:	ee09 2a90 	vmov	s19, r2
   dbd2a:	bfc8      	it	gt
   dbd2c:	2502      	movgt	r5, #2
   dbd2e:	f73f ae78 	bgt.w	dba22 <__kernel_rem_pio2f+0x26e>
   dbd32:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   dbd36:	ee37 8ac8 	vsub.f32	s16, s15, s16
   dbd3a:	2502      	movs	r5, #2
   dbd3c:	e5ff      	b.n	db93e <__kernel_rem_pio2f+0x18a>
   dbd3e:	2100      	movs	r1, #0
   dbd40:	e692      	b.n	dba68 <__kernel_rem_pio2f+0x2b4>
   dbd42:	a932      	add	r1, sp, #200	; 0xc8
   dbd44:	eddf 7a35 	vldr	s15, [pc, #212]	; dbe1c <__kernel_rem_pio2f+0x668>
   dbd48:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   dbd4c:	ed33 7a01 	vldmdb	r3!, {s14}
   dbd50:	4299      	cmp	r1, r3
   dbd52:	ee77 7a87 	vadd.f32	s15, s15, s14
   dbd56:	d1f9      	bne.n	dbd4c <__kernel_rem_pio2f+0x598>
   dbd58:	bb92      	cbnz	r2, dbdc0 <__kernel_rem_pio2f+0x60c>
   dbd5a:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   dbd5e:	9b07      	ldr	r3, [sp, #28]
   dbd60:	2d00      	cmp	r5, #0
   dbd62:	edc3 7a00 	vstr	s15, [r3]
   dbd66:	ee77 7a67 	vsub.f32	s15, s14, s15
   dbd6a:	dd0b      	ble.n	dbd84 <__kernel_rem_pio2f+0x5d0>
   dbd6c:	a933      	add	r1, sp, #204	; 0xcc
   dbd6e:	2301      	movs	r3, #1
   dbd70:	ecb1 7a01 	vldmia	r1!, {s14}
   dbd74:	3301      	adds	r3, #1
   dbd76:	429d      	cmp	r5, r3
   dbd78:	ee77 7a87 	vadd.f32	s15, s15, s14
   dbd7c:	daf8      	bge.n	dbd70 <__kernel_rem_pio2f+0x5bc>
   dbd7e:	b10a      	cbz	r2, dbd84 <__kernel_rem_pio2f+0x5d0>
   dbd80:	eef1 7a67 	vneg.f32	s15, s15
   dbd84:	9b07      	ldr	r3, [sp, #28]
   dbd86:	edc3 7a01 	vstr	s15, [r3, #4]
   dbd8a:	e760      	b.n	dbc4e <__kernel_rem_pio2f+0x49a>
   dbd8c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   dbd90:	461d      	mov	r5, r3
   dbd92:	ee10 1a10 	vmov	r1, s0
   dbd96:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   dbd9a:	e6f5      	b.n	dbb88 <__kernel_rem_pio2f+0x3d4>
   dbd9c:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   dbda0:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   dbda4:	9b07      	ldr	r3, [sp, #28]
   dbda6:	eef1 7a67 	vneg.f32	s15, s15
   dbdaa:	eef1 6a66 	vneg.f32	s13, s13
   dbdae:	eeb1 7a47 	vneg.f32	s14, s14
   dbdb2:	edc3 7a02 	vstr	s15, [r3, #8]
   dbdb6:	edc3 6a00 	vstr	s13, [r3]
   dbdba:	ed83 7a01 	vstr	s14, [r3, #4]
   dbdbe:	e746      	b.n	dbc4e <__kernel_rem_pio2f+0x49a>
   dbdc0:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   dbdc4:	9b07      	ldr	r3, [sp, #28]
   dbdc6:	eeb1 7a67 	vneg.f32	s14, s15
   dbdca:	2d00      	cmp	r5, #0
   dbdcc:	ee76 7ae7 	vsub.f32	s15, s13, s15
   dbdd0:	ed83 7a00 	vstr	s14, [r3]
   dbdd4:	dcca      	bgt.n	dbd6c <__kernel_rem_pio2f+0x5b8>
   dbdd6:	e7d3      	b.n	dbd80 <__kernel_rem_pio2f+0x5cc>
   dbdd8:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   dbdda:	2b02      	cmp	r3, #2
   dbddc:	dc0d      	bgt.n	dbdfa <__kernel_rem_pio2f+0x646>
   dbdde:	2b00      	cmp	r3, #0
   dbde0:	dc14      	bgt.n	dbe0c <__kernel_rem_pio2f+0x658>
   dbde2:	f47f af34 	bne.w	dbc4e <__kernel_rem_pio2f+0x49a>
   dbde6:	eddf 7a0d 	vldr	s15, [pc, #52]	; dbe1c <__kernel_rem_pio2f+0x668>
   dbdea:	2a00      	cmp	r2, #0
   dbdec:	f43f af2c 	beq.w	dbc48 <__kernel_rem_pio2f+0x494>
   dbdf0:	e728      	b.n	dbc44 <__kernel_rem_pio2f+0x490>
   dbdf2:	9b04      	ldr	r3, [sp, #16]
   dbdf4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   dbdf8:	e53c      	b.n	db874 <__kernel_rem_pio2f+0xc0>
   dbdfa:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   dbdfc:	2b03      	cmp	r3, #3
   dbdfe:	f47f af26 	bne.w	dbc4e <__kernel_rem_pio2f+0x49a>
   dbe02:	eddf 7a06 	vldr	s15, [pc, #24]	; dbe1c <__kernel_rem_pio2f+0x668>
   dbe06:	2a00      	cmp	r2, #0
   dbe08:	d1c8      	bne.n	dbd9c <__kernel_rem_pio2f+0x5e8>
   dbe0a:	e771      	b.n	dbcf0 <__kernel_rem_pio2f+0x53c>
   dbe0c:	eddf 7a03 	vldr	s15, [pc, #12]	; dbe1c <__kernel_rem_pio2f+0x668>
   dbe10:	2a00      	cmp	r2, #0
   dbe12:	d0a2      	beq.n	dbd5a <__kernel_rem_pio2f+0x5a6>
   dbe14:	e7d4      	b.n	dbdc0 <__kernel_rem_pio2f+0x60c>
   dbe16:	bf00      	nop
   dbe18:	000def70 	.word	0x000def70
   dbe1c:	00000000 	.word	0x00000000

000dbe20 <__kernel_sinf>:
   dbe20:	ee10 3a10 	vmov	r3, s0
   dbe24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dbe28:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   dbe2c:	da04      	bge.n	dbe38 <__kernel_sinf+0x18>
   dbe2e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   dbe32:	ee17 3a90 	vmov	r3, s15
   dbe36:	b35b      	cbz	r3, dbe90 <__kernel_sinf+0x70>
   dbe38:	ee60 7a00 	vmul.f32	s15, s0, s0
   dbe3c:	ed9f 5a15 	vldr	s10, [pc, #84]	; dbe94 <__kernel_sinf+0x74>
   dbe40:	eddf 5a15 	vldr	s11, [pc, #84]	; dbe98 <__kernel_sinf+0x78>
   dbe44:	ed9f 6a15 	vldr	s12, [pc, #84]	; dbe9c <__kernel_sinf+0x7c>
   dbe48:	eddf 6a15 	vldr	s13, [pc, #84]	; dbea0 <__kernel_sinf+0x80>
   dbe4c:	ed9f 7a15 	vldr	s14, [pc, #84]	; dbea4 <__kernel_sinf+0x84>
   dbe50:	eee7 5a85 	vfma.f32	s11, s15, s10
   dbe54:	ee20 5a27 	vmul.f32	s10, s0, s15
   dbe58:	eea5 6aa7 	vfma.f32	s12, s11, s15
   dbe5c:	eee6 6a27 	vfma.f32	s13, s12, s15
   dbe60:	eea6 7aa7 	vfma.f32	s14, s13, s15
   dbe64:	b930      	cbnz	r0, dbe74 <__kernel_sinf+0x54>
   dbe66:	eddf 6a10 	vldr	s13, [pc, #64]	; dbea8 <__kernel_sinf+0x88>
   dbe6a:	eee7 6a87 	vfma.f32	s13, s15, s14
   dbe6e:	eea6 0a85 	vfma.f32	s0, s13, s10
   dbe72:	4770      	bx	lr
   dbe74:	ee27 7a45 	vnmul.f32	s14, s14, s10
   dbe78:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   dbe7c:	eea0 7aa6 	vfma.f32	s14, s1, s13
   dbe80:	eddf 6a0a 	vldr	s13, [pc, #40]	; dbeac <__kernel_sinf+0x8c>
   dbe84:	eed7 0a27 	vfnms.f32	s1, s14, s15
   dbe88:	eee5 0a26 	vfma.f32	s1, s10, s13
   dbe8c:	ee30 0a60 	vsub.f32	s0, s0, s1
   dbe90:	4770      	bx	lr
   dbe92:	bf00      	nop
   dbe94:	2f2ec9d3 	.word	0x2f2ec9d3
   dbe98:	b2d72f34 	.word	0xb2d72f34
   dbe9c:	3638ef1b 	.word	0x3638ef1b
   dbea0:	b9500d01 	.word	0xb9500d01
   dbea4:	3c088889 	.word	0x3c088889
   dbea8:	be2aaaab 	.word	0xbe2aaaab
   dbeac:	3e2aaaab 	.word	0x3e2aaaab

000dbeb0 <atan>:
   dbeb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbeb4:	ec55 4b10 	vmov	r4, r5, d0
   dbeb8:	4bcd      	ldr	r3, [pc, #820]	; (dc1f0 <atan+0x340>)
   dbeba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   dbebe:	429e      	cmp	r6, r3
   dbec0:	46aa      	mov	sl, r5
   dbec2:	dd0d      	ble.n	dbee0 <atan+0x30>
   dbec4:	4bcb      	ldr	r3, [pc, #812]	; (dc1f4 <atan+0x344>)
   dbec6:	429e      	cmp	r6, r3
   dbec8:	f300 80b5 	bgt.w	dc036 <atan+0x186>
   dbecc:	f000 80b0 	beq.w	dc030 <atan+0x180>
   dbed0:	f1ba 0f00 	cmp.w	sl, #0
   dbed4:	f340 80f6 	ble.w	dc0c4 <atan+0x214>
   dbed8:	ed9f 0ba9 	vldr	d0, [pc, #676]	; dc180 <atan+0x2d0>
   dbedc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbee0:	4bc5      	ldr	r3, [pc, #788]	; (dc1f8 <atan+0x348>)
   dbee2:	429e      	cmp	r6, r3
   dbee4:	f300 80c3 	bgt.w	dc06e <atan+0x1be>
   dbee8:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   dbeec:	429e      	cmp	r6, r3
   dbeee:	f340 80ac 	ble.w	dc04a <atan+0x19a>
   dbef2:	f04f 3bff 	mov.w	fp, #4294967295
   dbef6:	4622      	mov	r2, r4
   dbef8:	462b      	mov	r3, r5
   dbefa:	4620      	mov	r0, r4
   dbefc:	4629      	mov	r1, r5
   dbefe:	f000 fe25 	bl	dcb4c <__aeabi_dmul>
   dbf02:	4602      	mov	r2, r0
   dbf04:	460b      	mov	r3, r1
   dbf06:	4680      	mov	r8, r0
   dbf08:	4689      	mov	r9, r1
   dbf0a:	f000 fe1f 	bl	dcb4c <__aeabi_dmul>
   dbf0e:	a39e      	add	r3, pc, #632	; (adr r3, dc188 <atan+0x2d8>)
   dbf10:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf14:	4606      	mov	r6, r0
   dbf16:	460f      	mov	r7, r1
   dbf18:	f000 fe18 	bl	dcb4c <__aeabi_dmul>
   dbf1c:	a39c      	add	r3, pc, #624	; (adr r3, dc190 <atan+0x2e0>)
   dbf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf22:	f000 fc5d 	bl	dc7e0 <__adddf3>
   dbf26:	4632      	mov	r2, r6
   dbf28:	463b      	mov	r3, r7
   dbf2a:	f000 fe0f 	bl	dcb4c <__aeabi_dmul>
   dbf2e:	a39a      	add	r3, pc, #616	; (adr r3, dc198 <atan+0x2e8>)
   dbf30:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf34:	f000 fc54 	bl	dc7e0 <__adddf3>
   dbf38:	4632      	mov	r2, r6
   dbf3a:	463b      	mov	r3, r7
   dbf3c:	f000 fe06 	bl	dcb4c <__aeabi_dmul>
   dbf40:	a397      	add	r3, pc, #604	; (adr r3, dc1a0 <atan+0x2f0>)
   dbf42:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf46:	f000 fc4b 	bl	dc7e0 <__adddf3>
   dbf4a:	4632      	mov	r2, r6
   dbf4c:	463b      	mov	r3, r7
   dbf4e:	f000 fdfd 	bl	dcb4c <__aeabi_dmul>
   dbf52:	a395      	add	r3, pc, #596	; (adr r3, dc1a8 <atan+0x2f8>)
   dbf54:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf58:	f000 fc42 	bl	dc7e0 <__adddf3>
   dbf5c:	4632      	mov	r2, r6
   dbf5e:	463b      	mov	r3, r7
   dbf60:	f000 fdf4 	bl	dcb4c <__aeabi_dmul>
   dbf64:	a392      	add	r3, pc, #584	; (adr r3, dc1b0 <atan+0x300>)
   dbf66:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf6a:	f000 fc39 	bl	dc7e0 <__adddf3>
   dbf6e:	4642      	mov	r2, r8
   dbf70:	464b      	mov	r3, r9
   dbf72:	f000 fdeb 	bl	dcb4c <__aeabi_dmul>
   dbf76:	a390      	add	r3, pc, #576	; (adr r3, dc1b8 <atan+0x308>)
   dbf78:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf7c:	4680      	mov	r8, r0
   dbf7e:	4689      	mov	r9, r1
   dbf80:	4630      	mov	r0, r6
   dbf82:	4639      	mov	r1, r7
   dbf84:	f000 fde2 	bl	dcb4c <__aeabi_dmul>
   dbf88:	a38d      	add	r3, pc, #564	; (adr r3, dc1c0 <atan+0x310>)
   dbf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf8e:	f000 fc25 	bl	dc7dc <__aeabi_dsub>
   dbf92:	4632      	mov	r2, r6
   dbf94:	463b      	mov	r3, r7
   dbf96:	f000 fdd9 	bl	dcb4c <__aeabi_dmul>
   dbf9a:	a38b      	add	r3, pc, #556	; (adr r3, dc1c8 <atan+0x318>)
   dbf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbfa0:	f000 fc1c 	bl	dc7dc <__aeabi_dsub>
   dbfa4:	4632      	mov	r2, r6
   dbfa6:	463b      	mov	r3, r7
   dbfa8:	f000 fdd0 	bl	dcb4c <__aeabi_dmul>
   dbfac:	a388      	add	r3, pc, #544	; (adr r3, dc1d0 <atan+0x320>)
   dbfae:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbfb2:	f000 fc13 	bl	dc7dc <__aeabi_dsub>
   dbfb6:	4632      	mov	r2, r6
   dbfb8:	463b      	mov	r3, r7
   dbfba:	f000 fdc7 	bl	dcb4c <__aeabi_dmul>
   dbfbe:	a386      	add	r3, pc, #536	; (adr r3, dc1d8 <atan+0x328>)
   dbfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbfc4:	f000 fc0a 	bl	dc7dc <__aeabi_dsub>
   dbfc8:	4632      	mov	r2, r6
   dbfca:	463b      	mov	r3, r7
   dbfcc:	f000 fdbe 	bl	dcb4c <__aeabi_dmul>
   dbfd0:	f1bb 3fff 	cmp.w	fp, #4294967295
   dbfd4:	4602      	mov	r2, r0
   dbfd6:	460b      	mov	r3, r1
   dbfd8:	d078      	beq.n	dc0cc <atan+0x21c>
   dbfda:	4640      	mov	r0, r8
   dbfdc:	4649      	mov	r1, r9
   dbfde:	f000 fbff 	bl	dc7e0 <__adddf3>
   dbfe2:	4e86      	ldr	r6, [pc, #536]	; (dc1fc <atan+0x34c>)
   dbfe4:	4622      	mov	r2, r4
   dbfe6:	462b      	mov	r3, r5
   dbfe8:	f000 fdb0 	bl	dcb4c <__aeabi_dmul>
   dbfec:	4b84      	ldr	r3, [pc, #528]	; (dc200 <atan+0x350>)
   dbfee:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   dbff2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   dbff6:	449b      	add	fp, r3
   dbff8:	e9db 2300 	ldrd	r2, r3, [fp]
   dbffc:	f000 fbee 	bl	dc7dc <__aeabi_dsub>
   dc000:	4622      	mov	r2, r4
   dc002:	462b      	mov	r3, r5
   dc004:	f000 fbea 	bl	dc7dc <__aeabi_dsub>
   dc008:	4602      	mov	r2, r0
   dc00a:	460b      	mov	r3, r1
   dc00c:	e9d6 0100 	ldrd	r0, r1, [r6]
   dc010:	f000 fbe4 	bl	dc7dc <__aeabi_dsub>
   dc014:	f1ba 0f00 	cmp.w	sl, #0
   dc018:	ec41 0b10 	vmov	d0, r0, r1
   dc01c:	da13      	bge.n	dc046 <atan+0x196>
   dc01e:	ee10 1a90 	vmov	r1, s1
   dc022:	4602      	mov	r2, r0
   dc024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dc028:	ec43 2b10 	vmov	d0, r2, r3
   dc02c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc030:	2c00      	cmp	r4, #0
   dc032:	f43f af4d 	beq.w	dbed0 <atan+0x20>
   dc036:	4622      	mov	r2, r4
   dc038:	462b      	mov	r3, r5
   dc03a:	4620      	mov	r0, r4
   dc03c:	4629      	mov	r1, r5
   dc03e:	f000 fbcf 	bl	dc7e0 <__adddf3>
   dc042:	ec41 0b10 	vmov	d0, r0, r1
   dc046:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc04a:	a365      	add	r3, pc, #404	; (adr r3, dc1e0 <atan+0x330>)
   dc04c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc050:	ee10 0a10 	vmov	r0, s0
   dc054:	4629      	mov	r1, r5
   dc056:	f000 fbc3 	bl	dc7e0 <__adddf3>
   dc05a:	4b6a      	ldr	r3, [pc, #424]	; (dc204 <atan+0x354>)
   dc05c:	2200      	movs	r2, #0
   dc05e:	f001 f805 	bl	dd06c <__aeabi_dcmpgt>
   dc062:	2800      	cmp	r0, #0
   dc064:	f43f af45 	beq.w	dbef2 <atan+0x42>
   dc068:	ec45 4b10 	vmov	d0, r4, r5
   dc06c:	e7eb      	b.n	dc046 <atan+0x196>
   dc06e:	f000 f8d3 	bl	dc218 <fabs>
   dc072:	4b65      	ldr	r3, [pc, #404]	; (dc208 <atan+0x358>)
   dc074:	429e      	cmp	r6, r3
   dc076:	ec55 4b10 	vmov	r4, r5, d0
   dc07a:	dc39      	bgt.n	dc0f0 <atan+0x240>
   dc07c:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   dc080:	429e      	cmp	r6, r3
   dc082:	dc62      	bgt.n	dc14a <atan+0x29a>
   dc084:	ee10 2a10 	vmov	r2, s0
   dc088:	ee10 0a10 	vmov	r0, s0
   dc08c:	462b      	mov	r3, r5
   dc08e:	4629      	mov	r1, r5
   dc090:	f000 fba6 	bl	dc7e0 <__adddf3>
   dc094:	4b5b      	ldr	r3, [pc, #364]	; (dc204 <atan+0x354>)
   dc096:	2200      	movs	r2, #0
   dc098:	f000 fba0 	bl	dc7dc <__aeabi_dsub>
   dc09c:	2200      	movs	r2, #0
   dc09e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc0a2:	4606      	mov	r6, r0
   dc0a4:	460f      	mov	r7, r1
   dc0a6:	4620      	mov	r0, r4
   dc0a8:	4629      	mov	r1, r5
   dc0aa:	f000 fb99 	bl	dc7e0 <__adddf3>
   dc0ae:	4602      	mov	r2, r0
   dc0b0:	460b      	mov	r3, r1
   dc0b2:	4630      	mov	r0, r6
   dc0b4:	4639      	mov	r1, r7
   dc0b6:	f000 fe73 	bl	dcda0 <__aeabi_ddiv>
   dc0ba:	f04f 0b00 	mov.w	fp, #0
   dc0be:	4604      	mov	r4, r0
   dc0c0:	460d      	mov	r5, r1
   dc0c2:	e718      	b.n	dbef6 <atan+0x46>
   dc0c4:	ed9f 0b48 	vldr	d0, [pc, #288]	; dc1e8 <atan+0x338>
   dc0c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc0cc:	4640      	mov	r0, r8
   dc0ce:	4649      	mov	r1, r9
   dc0d0:	f000 fb86 	bl	dc7e0 <__adddf3>
   dc0d4:	4622      	mov	r2, r4
   dc0d6:	462b      	mov	r3, r5
   dc0d8:	f000 fd38 	bl	dcb4c <__aeabi_dmul>
   dc0dc:	4602      	mov	r2, r0
   dc0de:	460b      	mov	r3, r1
   dc0e0:	4620      	mov	r0, r4
   dc0e2:	4629      	mov	r1, r5
   dc0e4:	f000 fb7a 	bl	dc7dc <__aeabi_dsub>
   dc0e8:	ec41 0b10 	vmov	d0, r0, r1
   dc0ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc0f0:	4b46      	ldr	r3, [pc, #280]	; (dc20c <atan+0x35c>)
   dc0f2:	429e      	cmp	r6, r3
   dc0f4:	da1d      	bge.n	dc132 <atan+0x282>
   dc0f6:	ee10 0a10 	vmov	r0, s0
   dc0fa:	4b45      	ldr	r3, [pc, #276]	; (dc210 <atan+0x360>)
   dc0fc:	2200      	movs	r2, #0
   dc0fe:	4629      	mov	r1, r5
   dc100:	f000 fb6c 	bl	dc7dc <__aeabi_dsub>
   dc104:	4b42      	ldr	r3, [pc, #264]	; (dc210 <atan+0x360>)
   dc106:	4606      	mov	r6, r0
   dc108:	460f      	mov	r7, r1
   dc10a:	2200      	movs	r2, #0
   dc10c:	4620      	mov	r0, r4
   dc10e:	4629      	mov	r1, r5
   dc110:	f000 fd1c 	bl	dcb4c <__aeabi_dmul>
   dc114:	4b3b      	ldr	r3, [pc, #236]	; (dc204 <atan+0x354>)
   dc116:	2200      	movs	r2, #0
   dc118:	f000 fb62 	bl	dc7e0 <__adddf3>
   dc11c:	4602      	mov	r2, r0
   dc11e:	460b      	mov	r3, r1
   dc120:	4630      	mov	r0, r6
   dc122:	4639      	mov	r1, r7
   dc124:	f000 fe3c 	bl	dcda0 <__aeabi_ddiv>
   dc128:	f04f 0b02 	mov.w	fp, #2
   dc12c:	4604      	mov	r4, r0
   dc12e:	460d      	mov	r5, r1
   dc130:	e6e1      	b.n	dbef6 <atan+0x46>
   dc132:	462b      	mov	r3, r5
   dc134:	ee10 2a10 	vmov	r2, s0
   dc138:	4936      	ldr	r1, [pc, #216]	; (dc214 <atan+0x364>)
   dc13a:	2000      	movs	r0, #0
   dc13c:	f000 fe30 	bl	dcda0 <__aeabi_ddiv>
   dc140:	f04f 0b03 	mov.w	fp, #3
   dc144:	4604      	mov	r4, r0
   dc146:	460d      	mov	r5, r1
   dc148:	e6d5      	b.n	dbef6 <atan+0x46>
   dc14a:	ee10 0a10 	vmov	r0, s0
   dc14e:	4b2d      	ldr	r3, [pc, #180]	; (dc204 <atan+0x354>)
   dc150:	2200      	movs	r2, #0
   dc152:	4629      	mov	r1, r5
   dc154:	f000 fb42 	bl	dc7dc <__aeabi_dsub>
   dc158:	4b2a      	ldr	r3, [pc, #168]	; (dc204 <atan+0x354>)
   dc15a:	2200      	movs	r2, #0
   dc15c:	4606      	mov	r6, r0
   dc15e:	460f      	mov	r7, r1
   dc160:	4620      	mov	r0, r4
   dc162:	4629      	mov	r1, r5
   dc164:	f000 fb3c 	bl	dc7e0 <__adddf3>
   dc168:	4602      	mov	r2, r0
   dc16a:	460b      	mov	r3, r1
   dc16c:	4630      	mov	r0, r6
   dc16e:	4639      	mov	r1, r7
   dc170:	f000 fe16 	bl	dcda0 <__aeabi_ddiv>
   dc174:	f04f 0b01 	mov.w	fp, #1
   dc178:	4604      	mov	r4, r0
   dc17a:	460d      	mov	r5, r1
   dc17c:	e6bb      	b.n	dbef6 <atan+0x46>
   dc17e:	bf00      	nop
   dc180:	54442d18 	.word	0x54442d18
   dc184:	3ff921fb 	.word	0x3ff921fb
   dc188:	e322da11 	.word	0xe322da11
   dc18c:	3f90ad3a 	.word	0x3f90ad3a
   dc190:	24760deb 	.word	0x24760deb
   dc194:	3fa97b4b 	.word	0x3fa97b4b
   dc198:	a0d03d51 	.word	0xa0d03d51
   dc19c:	3fb10d66 	.word	0x3fb10d66
   dc1a0:	c54c206e 	.word	0xc54c206e
   dc1a4:	3fb745cd 	.word	0x3fb745cd
   dc1a8:	920083ff 	.word	0x920083ff
   dc1ac:	3fc24924 	.word	0x3fc24924
   dc1b0:	5555550d 	.word	0x5555550d
   dc1b4:	3fd55555 	.word	0x3fd55555
   dc1b8:	2c6a6c2f 	.word	0x2c6a6c2f
   dc1bc:	bfa2b444 	.word	0xbfa2b444
   dc1c0:	52defd9a 	.word	0x52defd9a
   dc1c4:	3fadde2d 	.word	0x3fadde2d
   dc1c8:	af749a6d 	.word	0xaf749a6d
   dc1cc:	3fb3b0f2 	.word	0x3fb3b0f2
   dc1d0:	fe231671 	.word	0xfe231671
   dc1d4:	3fbc71c6 	.word	0x3fbc71c6
   dc1d8:	9998ebc4 	.word	0x9998ebc4
   dc1dc:	3fc99999 	.word	0x3fc99999
   dc1e0:	8800759c 	.word	0x8800759c
   dc1e4:	7e37e43c 	.word	0x7e37e43c
   dc1e8:	54442d18 	.word	0x54442d18
   dc1ec:	bff921fb 	.word	0xbff921fb
   dc1f0:	440fffff 	.word	0x440fffff
   dc1f4:	7ff00000 	.word	0x7ff00000
   dc1f8:	3fdbffff 	.word	0x3fdbffff
   dc1fc:	000defa8 	.word	0x000defa8
   dc200:	000defc8 	.word	0x000defc8
   dc204:	3ff00000 	.word	0x3ff00000
   dc208:	3ff2ffff 	.word	0x3ff2ffff
   dc20c:	40038000 	.word	0x40038000
   dc210:	3ff80000 	.word	0x3ff80000
   dc214:	bff00000 	.word	0xbff00000

000dc218 <fabs>:
   dc218:	ec51 0b10 	vmov	r0, r1, d0
   dc21c:	ee10 2a10 	vmov	r2, s0
   dc220:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dc224:	ec43 2b10 	vmov	d0, r2, r3
   dc228:	4770      	bx	lr
   dc22a:	bf00      	nop

000dc22c <finite>:
   dc22c:	b082      	sub	sp, #8
   dc22e:	ed8d 0b00 	vstr	d0, [sp]
   dc232:	9801      	ldr	r0, [sp, #4]
   dc234:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   dc238:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   dc23c:	0fc0      	lsrs	r0, r0, #31
   dc23e:	b002      	add	sp, #8
   dc240:	4770      	bx	lr
   dc242:	bf00      	nop

000dc244 <matherr>:
   dc244:	2000      	movs	r0, #0
   dc246:	4770      	bx	lr

000dc248 <nan>:
   dc248:	ed9f 0b01 	vldr	d0, [pc, #4]	; dc250 <nan+0x8>
   dc24c:	4770      	bx	lr
   dc24e:	bf00      	nop
   dc250:	00000000 	.word	0x00000000
   dc254:	7ff80000 	.word	0x7ff80000

000dc258 <rint>:
   dc258:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc25a:	ec53 2b10 	vmov	r2, r3, d0
   dc25e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   dc262:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   dc266:	2813      	cmp	r0, #19
   dc268:	ee10 5a10 	vmov	r5, s0
   dc26c:	b083      	sub	sp, #12
   dc26e:	4619      	mov	r1, r3
   dc270:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   dc274:	dc31      	bgt.n	dc2da <rint+0x82>
   dc276:	2800      	cmp	r0, #0
   dc278:	db4c      	blt.n	dc314 <rint+0xbc>
   dc27a:	4e3e      	ldr	r6, [pc, #248]	; (dc374 <rint+0x11c>)
   dc27c:	4106      	asrs	r6, r0
   dc27e:	ea03 0706 	and.w	r7, r3, r6
   dc282:	4317      	orrs	r7, r2
   dc284:	d02e      	beq.n	dc2e4 <rint+0x8c>
   dc286:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   dc28a:	431d      	orrs	r5, r3
   dc28c:	ea4f 0656 	mov.w	r6, r6, lsr #1
   dc290:	d00c      	beq.n	dc2ac <rint+0x54>
   dc292:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   dc296:	2813      	cmp	r0, #19
   dc298:	ea21 0606 	bic.w	r6, r1, r6
   dc29c:	fa43 f100 	asr.w	r1, r3, r0
   dc2a0:	ea41 0106 	orr.w	r1, r1, r6
   dc2a4:	bf0c      	ite	eq
   dc2a6:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   dc2aa:	2500      	movne	r5, #0
   dc2ac:	4832      	ldr	r0, [pc, #200]	; (dc378 <rint+0x120>)
   dc2ae:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   dc2b2:	462a      	mov	r2, r5
   dc2b4:	e9d4 4500 	ldrd	r4, r5, [r4]
   dc2b8:	460b      	mov	r3, r1
   dc2ba:	4620      	mov	r0, r4
   dc2bc:	4629      	mov	r1, r5
   dc2be:	f000 fa8f 	bl	dc7e0 <__adddf3>
   dc2c2:	e9cd 0100 	strd	r0, r1, [sp]
   dc2c6:	e9dd 0100 	ldrd	r0, r1, [sp]
   dc2ca:	4622      	mov	r2, r4
   dc2cc:	462b      	mov	r3, r5
   dc2ce:	f000 fa85 	bl	dc7dc <__aeabi_dsub>
   dc2d2:	ec41 0b10 	vmov	d0, r0, r1
   dc2d6:	b003      	add	sp, #12
   dc2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc2da:	2833      	cmp	r0, #51	; 0x33
   dc2dc:	dd06      	ble.n	dc2ec <rint+0x94>
   dc2de:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   dc2e2:	d040      	beq.n	dc366 <rint+0x10e>
   dc2e4:	ec43 2b10 	vmov	d0, r2, r3
   dc2e8:	b003      	add	sp, #12
   dc2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc2ec:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   dc2f0:	f04f 30ff 	mov.w	r0, #4294967295
   dc2f4:	40f0      	lsrs	r0, r6
   dc2f6:	4202      	tst	r2, r0
   dc2f8:	d0f4      	beq.n	dc2e4 <rint+0x8c>
   dc2fa:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   dc2fe:	ea4f 0350 	mov.w	r3, r0, lsr #1
   dc302:	d0d3      	beq.n	dc2ac <rint+0x54>
   dc304:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   dc308:	ea25 0503 	bic.w	r5, r5, r3
   dc30c:	fa42 f606 	asr.w	r6, r2, r6
   dc310:	4335      	orrs	r5, r6
   dc312:	e7cb      	b.n	dc2ac <rint+0x54>
   dc314:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   dc318:	4310      	orrs	r0, r2
   dc31a:	d0e3      	beq.n	dc2e4 <rint+0x8c>
   dc31c:	f3c3 0013 	ubfx	r0, r3, #0, #20
   dc320:	4310      	orrs	r0, r2
   dc322:	4245      	negs	r5, r0
   dc324:	4305      	orrs	r5, r0
   dc326:	4814      	ldr	r0, [pc, #80]	; (dc378 <rint+0x120>)
   dc328:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   dc32c:	e9d0 6700 	ldrd	r6, r7, [r0]
   dc330:	0c59      	lsrs	r1, r3, #17
   dc332:	0b2d      	lsrs	r5, r5, #12
   dc334:	0449      	lsls	r1, r1, #17
   dc336:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   dc33a:	ea45 0301 	orr.w	r3, r5, r1
   dc33e:	4630      	mov	r0, r6
   dc340:	4639      	mov	r1, r7
   dc342:	f000 fa4d 	bl	dc7e0 <__adddf3>
   dc346:	e9cd 0100 	strd	r0, r1, [sp]
   dc34a:	463b      	mov	r3, r7
   dc34c:	e9dd 0100 	ldrd	r0, r1, [sp]
   dc350:	4632      	mov	r2, r6
   dc352:	f000 fa43 	bl	dc7dc <__aeabi_dsub>
   dc356:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dc35a:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   dc35e:	ec41 0b10 	vmov	d0, r0, r1
   dc362:	b003      	add	sp, #12
   dc364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc366:	ee10 0a10 	vmov	r0, s0
   dc36a:	f000 fa39 	bl	dc7e0 <__adddf3>
   dc36e:	ec41 0b10 	vmov	d0, r0, r1
   dc372:	e7b9      	b.n	dc2e8 <rint+0x90>
   dc374:	000fffff 	.word	0x000fffff
   dc378:	000defe8 	.word	0x000defe8
   dc37c:	00000000 	.word	0x00000000

000dc380 <scalbn>:
   dc380:	b538      	push	{r3, r4, r5, lr}
   dc382:	ec53 2b10 	vmov	r2, r3, d0
   dc386:	f3c3 510a 	ubfx	r1, r3, #20, #11
   dc38a:	461c      	mov	r4, r3
   dc38c:	4605      	mov	r5, r0
   dc38e:	bb81      	cbnz	r1, dc3f2 <scalbn+0x72>
   dc390:	ee10 1a10 	vmov	r1, s0
   dc394:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   dc398:	4321      	orrs	r1, r4
   dc39a:	d029      	beq.n	dc3f0 <scalbn+0x70>
   dc39c:	4619      	mov	r1, r3
   dc39e:	2200      	movs	r2, #0
   dc3a0:	4b3d      	ldr	r3, [pc, #244]	; (dc498 <scalbn+0x118>)
   dc3a2:	4c3e      	ldr	r4, [pc, #248]	; (dc49c <scalbn+0x11c>)
   dc3a4:	ee10 0a10 	vmov	r0, s0
   dc3a8:	f000 fbd0 	bl	dcb4c <__aeabi_dmul>
   dc3ac:	42a5      	cmp	r5, r4
   dc3ae:	4602      	mov	r2, r0
   dc3b0:	460b      	mov	r3, r1
   dc3b2:	db16      	blt.n	dc3e2 <scalbn+0x62>
   dc3b4:	460c      	mov	r4, r1
   dc3b6:	f3c1 510a 	ubfx	r1, r1, #20, #11
   dc3ba:	3936      	subs	r1, #54	; 0x36
   dc3bc:	4429      	add	r1, r5
   dc3be:	f240 70fe 	movw	r0, #2046	; 0x7fe
   dc3c2:	4281      	cmp	r1, r0
   dc3c4:	dc21      	bgt.n	dc40a <scalbn+0x8a>
   dc3c6:	2900      	cmp	r1, #0
   dc3c8:	dc47      	bgt.n	dc45a <scalbn+0xda>
   dc3ca:	f111 0f35 	cmn.w	r1, #53	; 0x35
   dc3ce:	da34      	bge.n	dc43a <scalbn+0xba>
   dc3d0:	f24c 3150 	movw	r1, #50000	; 0xc350
   dc3d4:	428d      	cmp	r5, r1
   dc3d6:	dc18      	bgt.n	dc40a <scalbn+0x8a>
   dc3d8:	2b00      	cmp	r3, #0
   dc3da:	a127      	add	r1, pc, #156	; (adr r1, dc478 <scalbn+0xf8>)
   dc3dc:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc3e0:	db44      	blt.n	dc46c <scalbn+0xec>
   dc3e2:	a325      	add	r3, pc, #148	; (adr r3, dc478 <scalbn+0xf8>)
   dc3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc3e8:	f000 fbb0 	bl	dcb4c <__aeabi_dmul>
   dc3ec:	ec41 0b10 	vmov	d0, r0, r1
   dc3f0:	bd38      	pop	{r3, r4, r5, pc}
   dc3f2:	f240 70ff 	movw	r0, #2047	; 0x7ff
   dc3f6:	4281      	cmp	r1, r0
   dc3f8:	d1e0      	bne.n	dc3bc <scalbn+0x3c>
   dc3fa:	ee10 0a10 	vmov	r0, s0
   dc3fe:	4619      	mov	r1, r3
   dc400:	f000 f9ee 	bl	dc7e0 <__adddf3>
   dc404:	ec41 0b10 	vmov	d0, r0, r1
   dc408:	bd38      	pop	{r3, r4, r5, pc}
   dc40a:	2b00      	cmp	r3, #0
   dc40c:	a11c      	add	r1, pc, #112	; (adr r1, dc480 <scalbn+0x100>)
   dc40e:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc412:	db07      	blt.n	dc424 <scalbn+0xa4>
   dc414:	a31a      	add	r3, pc, #104	; (adr r3, dc480 <scalbn+0x100>)
   dc416:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc41a:	f000 fb97 	bl	dcb4c <__aeabi_dmul>
   dc41e:	ec41 0b10 	vmov	d0, r0, r1
   dc422:	bd38      	pop	{r3, r4, r5, pc}
   dc424:	a118      	add	r1, pc, #96	; (adr r1, dc488 <scalbn+0x108>)
   dc426:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc42a:	a315      	add	r3, pc, #84	; (adr r3, dc480 <scalbn+0x100>)
   dc42c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc430:	f000 fb8c 	bl	dcb4c <__aeabi_dmul>
   dc434:	ec41 0b10 	vmov	d0, r0, r1
   dc438:	e7f3      	b.n	dc422 <scalbn+0xa2>
   dc43a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   dc43e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   dc442:	3136      	adds	r1, #54	; 0x36
   dc444:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   dc448:	4610      	mov	r0, r2
   dc44a:	4619      	mov	r1, r3
   dc44c:	2200      	movs	r2, #0
   dc44e:	4b14      	ldr	r3, [pc, #80]	; (dc4a0 <scalbn+0x120>)
   dc450:	f000 fb7c 	bl	dcb4c <__aeabi_dmul>
   dc454:	ec41 0b10 	vmov	d0, r0, r1
   dc458:	bd38      	pop	{r3, r4, r5, pc}
   dc45a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   dc45e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   dc462:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   dc466:	ec43 2b10 	vmov	d0, r2, r3
   dc46a:	bd38      	pop	{r3, r4, r5, pc}
   dc46c:	a108      	add	r1, pc, #32	; (adr r1, dc490 <scalbn+0x110>)
   dc46e:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc472:	e7b6      	b.n	dc3e2 <scalbn+0x62>
   dc474:	f3af 8000 	nop.w
   dc478:	c2f8f359 	.word	0xc2f8f359
   dc47c:	01a56e1f 	.word	0x01a56e1f
   dc480:	8800759c 	.word	0x8800759c
   dc484:	7e37e43c 	.word	0x7e37e43c
   dc488:	8800759c 	.word	0x8800759c
   dc48c:	fe37e43c 	.word	0xfe37e43c
   dc490:	c2f8f359 	.word	0xc2f8f359
   dc494:	81a56e1f 	.word	0x81a56e1f
   dc498:	43500000 	.word	0x43500000
   dc49c:	ffff3cb0 	.word	0xffff3cb0
   dc4a0:	3c900000 	.word	0x3c900000

000dc4a4 <atanf>:
   dc4a4:	b538      	push	{r3, r4, r5, lr}
   dc4a6:	ee10 5a10 	vmov	r5, s0
   dc4aa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   dc4ae:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   dc4b2:	eef0 7a40 	vmov.f32	s15, s0
   dc4b6:	db0b      	blt.n	dc4d0 <atanf+0x2c>
   dc4b8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   dc4bc:	dc59      	bgt.n	dc572 <atanf+0xce>
   dc4be:	eddf 7a52 	vldr	s15, [pc, #328]	; dc608 <atanf+0x164>
   dc4c2:	ed9f 0a52 	vldr	s0, [pc, #328]	; dc60c <atanf+0x168>
   dc4c6:	2d00      	cmp	r5, #0
   dc4c8:	bfc8      	it	gt
   dc4ca:	eeb0 0a67 	vmovgt.f32	s0, s15
   dc4ce:	bd38      	pop	{r3, r4, r5, pc}
   dc4d0:	4b4f      	ldr	r3, [pc, #316]	; (dc610 <atanf+0x16c>)
   dc4d2:	429c      	cmp	r4, r3
   dc4d4:	dc5c      	bgt.n	dc590 <atanf+0xec>
   dc4d6:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   dc4da:	db4d      	blt.n	dc578 <atanf+0xd4>
   dc4dc:	f04f 33ff 	mov.w	r3, #4294967295
   dc4e0:	ee27 6aa7 	vmul.f32	s12, s15, s15
   dc4e4:	ed9f 1a4b 	vldr	s2, [pc, #300]	; dc614 <atanf+0x170>
   dc4e8:	ed9f 2a4b 	vldr	s4, [pc, #300]	; dc618 <atanf+0x174>
   dc4ec:	ed9f 3a4b 	vldr	s6, [pc, #300]	; dc61c <atanf+0x178>
   dc4f0:	eddf 1a4b 	vldr	s3, [pc, #300]	; dc620 <atanf+0x17c>
   dc4f4:	eddf 2a4b 	vldr	s5, [pc, #300]	; dc624 <atanf+0x180>
   dc4f8:	ed9f 4a4b 	vldr	s8, [pc, #300]	; dc628 <atanf+0x184>
   dc4fc:	eddf 3a4b 	vldr	s7, [pc, #300]	; dc62c <atanf+0x188>
   dc500:	ed9f 5a4b 	vldr	s10, [pc, #300]	; dc630 <atanf+0x18c>
   dc504:	eddf 4a4b 	vldr	s9, [pc, #300]	; dc634 <atanf+0x190>
   dc508:	eddf 6a4b 	vldr	s13, [pc, #300]	; dc638 <atanf+0x194>
   dc50c:	eddf 5a4b 	vldr	s11, [pc, #300]	; dc63c <atanf+0x198>
   dc510:	ee26 7a06 	vmul.f32	s14, s12, s12
   dc514:	1c5a      	adds	r2, r3, #1
   dc516:	eea7 2a01 	vfma.f32	s4, s14, s2
   dc51a:	eee7 2a21 	vfma.f32	s5, s14, s3
   dc51e:	eea2 3a07 	vfma.f32	s6, s4, s14
   dc522:	eee2 3a87 	vfma.f32	s7, s5, s14
   dc526:	eea3 4a07 	vfma.f32	s8, s6, s14
   dc52a:	eee3 4a87 	vfma.f32	s9, s7, s14
   dc52e:	eea4 5a07 	vfma.f32	s10, s8, s14
   dc532:	eee4 5a87 	vfma.f32	s11, s9, s14
   dc536:	eee5 6a07 	vfma.f32	s13, s10, s14
   dc53a:	ee25 7a87 	vmul.f32	s14, s11, s14
   dc53e:	ee66 6a86 	vmul.f32	s13, s13, s12
   dc542:	d03a      	beq.n	dc5ba <atanf+0x116>
   dc544:	493e      	ldr	r1, [pc, #248]	; (dc640 <atanf+0x19c>)
   dc546:	4a3f      	ldr	r2, [pc, #252]	; (dc644 <atanf+0x1a0>)
   dc548:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   dc54c:	ee76 6a87 	vadd.f32	s13, s13, s14
   dc550:	ed91 0a00 	vldr	s0, [r1]
   dc554:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   dc558:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dc55c:	2d00      	cmp	r5, #0
   dc55e:	ed93 7a00 	vldr	s14, [r3]
   dc562:	ee70 7a67 	vsub.f32	s15, s0, s15
   dc566:	ee37 0a67 	vsub.f32	s0, s14, s15
   dc56a:	dab0      	bge.n	dc4ce <atanf+0x2a>
   dc56c:	eeb1 0a40 	vneg.f32	s0, s0
   dc570:	bd38      	pop	{r3, r4, r5, pc}
   dc572:	ee30 0a00 	vadd.f32	s0, s0, s0
   dc576:	bd38      	pop	{r3, r4, r5, pc}
   dc578:	ed9f 7a33 	vldr	s14, [pc, #204]	; dc648 <atanf+0x1a4>
   dc57c:	ee30 7a07 	vadd.f32	s14, s0, s14
   dc580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   dc584:	eeb4 7ae6 	vcmpe.f32	s14, s13
   dc588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc58c:	dda6      	ble.n	dc4dc <atanf+0x38>
   dc58e:	bd38      	pop	{r3, r4, r5, pc}
   dc590:	f000 f860 	bl	dc654 <fabsf>
   dc594:	4b2d      	ldr	r3, [pc, #180]	; (dc64c <atanf+0x1a8>)
   dc596:	429c      	cmp	r4, r3
   dc598:	dc16      	bgt.n	dc5c8 <atanf+0x124>
   dc59a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   dc59e:	429c      	cmp	r4, r3
   dc5a0:	dc27      	bgt.n	dc5f2 <atanf+0x14e>
   dc5a2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   dc5a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   dc5aa:	eea0 7a27 	vfma.f32	s14, s0, s15
   dc5ae:	2300      	movs	r3, #0
   dc5b0:	ee30 0a27 	vadd.f32	s0, s0, s15
   dc5b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dc5b8:	e792      	b.n	dc4e0 <atanf+0x3c>
   dc5ba:	ee76 6a87 	vadd.f32	s13, s13, s14
   dc5be:	eee6 7ae7 	vfms.f32	s15, s13, s15
   dc5c2:	eeb0 0a67 	vmov.f32	s0, s15
   dc5c6:	bd38      	pop	{r3, r4, r5, pc}
   dc5c8:	4b21      	ldr	r3, [pc, #132]	; (dc650 <atanf+0x1ac>)
   dc5ca:	429c      	cmp	r4, r3
   dc5cc:	dc0b      	bgt.n	dc5e6 <atanf+0x142>
   dc5ce:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   dc5d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   dc5d6:	eea0 7a27 	vfma.f32	s14, s0, s15
   dc5da:	2302      	movs	r3, #2
   dc5dc:	ee30 0a67 	vsub.f32	s0, s0, s15
   dc5e0:	eec0 7a07 	vdiv.f32	s15, s0, s14
   dc5e4:	e77c      	b.n	dc4e0 <atanf+0x3c>
   dc5e6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   dc5ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dc5ee:	2303      	movs	r3, #3
   dc5f0:	e776      	b.n	dc4e0 <atanf+0x3c>
   dc5f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   dc5f6:	ee30 7a67 	vsub.f32	s14, s0, s15
   dc5fa:	ee30 0a27 	vadd.f32	s0, s0, s15
   dc5fe:	2301      	movs	r3, #1
   dc600:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dc604:	e76c      	b.n	dc4e0 <atanf+0x3c>
   dc606:	bf00      	nop
   dc608:	3fc90fdb 	.word	0x3fc90fdb
   dc60c:	bfc90fdb 	.word	0xbfc90fdb
   dc610:	3edfffff 	.word	0x3edfffff
   dc614:	3c8569d7 	.word	0x3c8569d7
   dc618:	3d4bda59 	.word	0x3d4bda59
   dc61c:	3d886b35 	.word	0x3d886b35
   dc620:	bd15a221 	.word	0xbd15a221
   dc624:	bd6ef16b 	.word	0xbd6ef16b
   dc628:	3dba2e6e 	.word	0x3dba2e6e
   dc62c:	bd9d8795 	.word	0xbd9d8795
   dc630:	3e124925 	.word	0x3e124925
   dc634:	bde38e38 	.word	0xbde38e38
   dc638:	3eaaaaab 	.word	0x3eaaaaab
   dc63c:	be4ccccd 	.word	0xbe4ccccd
   dc640:	000df008 	.word	0x000df008
   dc644:	000deff8 	.word	0x000deff8
   dc648:	7149f2ca 	.word	0x7149f2ca
   dc64c:	3f97ffff 	.word	0x3f97ffff
   dc650:	401bffff 	.word	0x401bffff

000dc654 <fabsf>:
   dc654:	ee10 3a10 	vmov	r3, s0
   dc658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dc65c:	ee00 3a10 	vmov	s0, r3
   dc660:	4770      	bx	lr
   dc662:	bf00      	nop

000dc664 <floorf>:
   dc664:	ee10 2a10 	vmov	r2, s0
   dc668:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   dc66c:	3b7f      	subs	r3, #127	; 0x7f
   dc66e:	2b16      	cmp	r3, #22
   dc670:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   dc674:	dc1a      	bgt.n	dc6ac <floorf+0x48>
   dc676:	2b00      	cmp	r3, #0
   dc678:	db1e      	blt.n	dc6b8 <floorf+0x54>
   dc67a:	491a      	ldr	r1, [pc, #104]	; (dc6e4 <floorf+0x80>)
   dc67c:	4119      	asrs	r1, r3
   dc67e:	420a      	tst	r2, r1
   dc680:	d027      	beq.n	dc6d2 <floorf+0x6e>
   dc682:	eddf 7a19 	vldr	s15, [pc, #100]	; dc6e8 <floorf+0x84>
   dc686:	ee70 7a27 	vadd.f32	s15, s0, s15
   dc68a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dc68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc692:	dd1e      	ble.n	dc6d2 <floorf+0x6e>
   dc694:	2a00      	cmp	r2, #0
   dc696:	da04      	bge.n	dc6a2 <floorf+0x3e>
   dc698:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   dc69c:	fa40 f303 	asr.w	r3, r0, r3
   dc6a0:	441a      	add	r2, r3
   dc6a2:	ea22 0301 	bic.w	r3, r2, r1
   dc6a6:	ee00 3a10 	vmov	s0, r3
   dc6aa:	4770      	bx	lr
   dc6ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   dc6b0:	d30f      	bcc.n	dc6d2 <floorf+0x6e>
   dc6b2:	ee30 0a00 	vadd.f32	s0, s0, s0
   dc6b6:	4770      	bx	lr
   dc6b8:	eddf 7a0b 	vldr	s15, [pc, #44]	; dc6e8 <floorf+0x84>
   dc6bc:	ee70 7a27 	vadd.f32	s15, s0, s15
   dc6c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dc6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc6c8:	dd03      	ble.n	dc6d2 <floorf+0x6e>
   dc6ca:	2a00      	cmp	r2, #0
   dc6cc:	db02      	blt.n	dc6d4 <floorf+0x70>
   dc6ce:	ed9f 0a07 	vldr	s0, [pc, #28]	; dc6ec <floorf+0x88>
   dc6d2:	4770      	bx	lr
   dc6d4:	2900      	cmp	r1, #0
   dc6d6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   dc6da:	bf18      	it	ne
   dc6dc:	eeb0 0a67 	vmovne.f32	s0, s15
   dc6e0:	4770      	bx	lr
   dc6e2:	bf00      	nop
   dc6e4:	007fffff 	.word	0x007fffff
   dc6e8:	7149f2ca 	.word	0x7149f2ca
   dc6ec:	00000000 	.word	0x00000000

000dc6f0 <scalbnf>:
   dc6f0:	b082      	sub	sp, #8
   dc6f2:	ed8d 0a01 	vstr	s0, [sp, #4]
   dc6f6:	9b01      	ldr	r3, [sp, #4]
   dc6f8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   dc6fc:	d02a      	beq.n	dc754 <scalbnf+0x64>
   dc6fe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   dc702:	d223      	bcs.n	dc74c <scalbnf+0x5c>
   dc704:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   dc708:	d128      	bne.n	dc75c <scalbnf+0x6c>
   dc70a:	ed9d 7a01 	vldr	s14, [sp, #4]
   dc70e:	eddf 7a2a 	vldr	s15, [pc, #168]	; dc7b8 <scalbnf+0xc8>
   dc712:	4b2a      	ldr	r3, [pc, #168]	; (dc7bc <scalbnf+0xcc>)
   dc714:	ee67 7a27 	vmul.f32	s15, s14, s15
   dc718:	4298      	cmp	r0, r3
   dc71a:	edcd 7a01 	vstr	s15, [sp, #4]
   dc71e:	db37      	blt.n	dc790 <scalbnf+0xa0>
   dc720:	9b01      	ldr	r3, [sp, #4]
   dc722:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   dc726:	3a19      	subs	r2, #25
   dc728:	4402      	add	r2, r0
   dc72a:	2afe      	cmp	r2, #254	; 0xfe
   dc72c:	dd1a      	ble.n	dc764 <scalbnf+0x74>
   dc72e:	ed9f 0a24 	vldr	s0, [pc, #144]	; dc7c0 <scalbnf+0xd0>
   dc732:	ed9f 7a24 	vldr	s14, [pc, #144]	; dc7c4 <scalbnf+0xd4>
   dc736:	9b01      	ldr	r3, [sp, #4]
   dc738:	2b00      	cmp	r3, #0
   dc73a:	eef0 7a40 	vmov.f32	s15, s0
   dc73e:	bfb8      	it	lt
   dc740:	eeb0 0a47 	vmovlt.f32	s0, s14
   dc744:	ee20 0a27 	vmul.f32	s0, s0, s15
   dc748:	b002      	add	sp, #8
   dc74a:	4770      	bx	lr
   dc74c:	ee30 0a00 	vadd.f32	s0, s0, s0
   dc750:	b002      	add	sp, #8
   dc752:	4770      	bx	lr
   dc754:	ed9d 0a01 	vldr	s0, [sp, #4]
   dc758:	b002      	add	sp, #8
   dc75a:	4770      	bx	lr
   dc75c:	0dd2      	lsrs	r2, r2, #23
   dc75e:	4402      	add	r2, r0
   dc760:	2afe      	cmp	r2, #254	; 0xfe
   dc762:	dce4      	bgt.n	dc72e <scalbnf+0x3e>
   dc764:	2a00      	cmp	r2, #0
   dc766:	dc0b      	bgt.n	dc780 <scalbnf+0x90>
   dc768:	f112 0f16 	cmn.w	r2, #22
   dc76c:	da17      	bge.n	dc79e <scalbnf+0xae>
   dc76e:	f24c 3350 	movw	r3, #50000	; 0xc350
   dc772:	4298      	cmp	r0, r3
   dc774:	dcdb      	bgt.n	dc72e <scalbnf+0x3e>
   dc776:	ed9f 0a14 	vldr	s0, [pc, #80]	; dc7c8 <scalbnf+0xd8>
   dc77a:	ed9f 7a14 	vldr	s14, [pc, #80]	; dc7cc <scalbnf+0xdc>
   dc77e:	e7da      	b.n	dc736 <scalbnf+0x46>
   dc780:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   dc784:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   dc788:	ee00 3a10 	vmov	s0, r3
   dc78c:	b002      	add	sp, #8
   dc78e:	4770      	bx	lr
   dc790:	ed9f 0a0d 	vldr	s0, [pc, #52]	; dc7c8 <scalbnf+0xd8>
   dc794:	eddd 7a01 	vldr	s15, [sp, #4]
   dc798:	ee27 0a80 	vmul.f32	s0, s15, s0
   dc79c:	e7d8      	b.n	dc750 <scalbnf+0x60>
   dc79e:	3219      	adds	r2, #25
   dc7a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   dc7a4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   dc7a8:	eddf 7a09 	vldr	s15, [pc, #36]	; dc7d0 <scalbnf+0xe0>
   dc7ac:	ee07 3a10 	vmov	s14, r3
   dc7b0:	ee27 0a27 	vmul.f32	s0, s14, s15
   dc7b4:	e7cc      	b.n	dc750 <scalbnf+0x60>
   dc7b6:	bf00      	nop
   dc7b8:	4c000000 	.word	0x4c000000
   dc7bc:	ffff3cb0 	.word	0xffff3cb0
   dc7c0:	7149f2ca 	.word	0x7149f2ca
   dc7c4:	f149f2ca 	.word	0xf149f2ca
   dc7c8:	0da24260 	.word	0x0da24260
   dc7cc:	8da24260 	.word	0x8da24260
   dc7d0:	33000000 	.word	0x33000000

000dc7d4 <__aeabi_drsub>:
   dc7d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dc7d8:	e002      	b.n	dc7e0 <__adddf3>
   dc7da:	bf00      	nop

000dc7dc <__aeabi_dsub>:
   dc7dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dc7e0 <__adddf3>:
   dc7e0:	b530      	push	{r4, r5, lr}
   dc7e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dc7e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dc7ea:	ea94 0f05 	teq	r4, r5
   dc7ee:	bf08      	it	eq
   dc7f0:	ea90 0f02 	teqeq	r0, r2
   dc7f4:	bf1f      	itttt	ne
   dc7f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   dc7fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   dc7fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dc802:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc806:	f000 80e2 	beq.w	dc9ce <__adddf3+0x1ee>
   dc80a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dc80e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dc812:	bfb8      	it	lt
   dc814:	426d      	neglt	r5, r5
   dc816:	dd0c      	ble.n	dc832 <__adddf3+0x52>
   dc818:	442c      	add	r4, r5
   dc81a:	ea80 0202 	eor.w	r2, r0, r2
   dc81e:	ea81 0303 	eor.w	r3, r1, r3
   dc822:	ea82 0000 	eor.w	r0, r2, r0
   dc826:	ea83 0101 	eor.w	r1, r3, r1
   dc82a:	ea80 0202 	eor.w	r2, r0, r2
   dc82e:	ea81 0303 	eor.w	r3, r1, r3
   dc832:	2d36      	cmp	r5, #54	; 0x36
   dc834:	bf88      	it	hi
   dc836:	bd30      	pophi	{r4, r5, pc}
   dc838:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc83c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc840:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dc844:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dc848:	d002      	beq.n	dc850 <__adddf3+0x70>
   dc84a:	4240      	negs	r0, r0
   dc84c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc850:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dc854:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc858:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dc85c:	d002      	beq.n	dc864 <__adddf3+0x84>
   dc85e:	4252      	negs	r2, r2
   dc860:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc864:	ea94 0f05 	teq	r4, r5
   dc868:	f000 80a7 	beq.w	dc9ba <__adddf3+0x1da>
   dc86c:	f1a4 0401 	sub.w	r4, r4, #1
   dc870:	f1d5 0e20 	rsbs	lr, r5, #32
   dc874:	db0d      	blt.n	dc892 <__adddf3+0xb2>
   dc876:	fa02 fc0e 	lsl.w	ip, r2, lr
   dc87a:	fa22 f205 	lsr.w	r2, r2, r5
   dc87e:	1880      	adds	r0, r0, r2
   dc880:	f141 0100 	adc.w	r1, r1, #0
   dc884:	fa03 f20e 	lsl.w	r2, r3, lr
   dc888:	1880      	adds	r0, r0, r2
   dc88a:	fa43 f305 	asr.w	r3, r3, r5
   dc88e:	4159      	adcs	r1, r3
   dc890:	e00e      	b.n	dc8b0 <__adddf3+0xd0>
   dc892:	f1a5 0520 	sub.w	r5, r5, #32
   dc896:	f10e 0e20 	add.w	lr, lr, #32
   dc89a:	2a01      	cmp	r2, #1
   dc89c:	fa03 fc0e 	lsl.w	ip, r3, lr
   dc8a0:	bf28      	it	cs
   dc8a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   dc8a6:	fa43 f305 	asr.w	r3, r3, r5
   dc8aa:	18c0      	adds	r0, r0, r3
   dc8ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dc8b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc8b4:	d507      	bpl.n	dc8c6 <__adddf3+0xe6>
   dc8b6:	f04f 0e00 	mov.w	lr, #0
   dc8ba:	f1dc 0c00 	rsbs	ip, ip, #0
   dc8be:	eb7e 0000 	sbcs.w	r0, lr, r0
   dc8c2:	eb6e 0101 	sbc.w	r1, lr, r1
   dc8c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dc8ca:	d31b      	bcc.n	dc904 <__adddf3+0x124>
   dc8cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dc8d0:	d30c      	bcc.n	dc8ec <__adddf3+0x10c>
   dc8d2:	0849      	lsrs	r1, r1, #1
   dc8d4:	ea5f 0030 	movs.w	r0, r0, rrx
   dc8d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dc8dc:	f104 0401 	add.w	r4, r4, #1
   dc8e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dc8e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dc8e8:	f080 809a 	bcs.w	dca20 <__adddf3+0x240>
   dc8ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dc8f0:	bf08      	it	eq
   dc8f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc8f6:	f150 0000 	adcs.w	r0, r0, #0
   dc8fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc8fe:	ea41 0105 	orr.w	r1, r1, r5
   dc902:	bd30      	pop	{r4, r5, pc}
   dc904:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dc908:	4140      	adcs	r0, r0
   dc90a:	eb41 0101 	adc.w	r1, r1, r1
   dc90e:	3c01      	subs	r4, #1
   dc910:	bf28      	it	cs
   dc912:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dc916:	d2e9      	bcs.n	dc8ec <__adddf3+0x10c>
   dc918:	f091 0f00 	teq	r1, #0
   dc91c:	bf04      	itt	eq
   dc91e:	4601      	moveq	r1, r0
   dc920:	2000      	moveq	r0, #0
   dc922:	fab1 f381 	clz	r3, r1
   dc926:	bf08      	it	eq
   dc928:	3320      	addeq	r3, #32
   dc92a:	f1a3 030b 	sub.w	r3, r3, #11
   dc92e:	f1b3 0220 	subs.w	r2, r3, #32
   dc932:	da0c      	bge.n	dc94e <__adddf3+0x16e>
   dc934:	320c      	adds	r2, #12
   dc936:	dd08      	ble.n	dc94a <__adddf3+0x16a>
   dc938:	f102 0c14 	add.w	ip, r2, #20
   dc93c:	f1c2 020c 	rsb	r2, r2, #12
   dc940:	fa01 f00c 	lsl.w	r0, r1, ip
   dc944:	fa21 f102 	lsr.w	r1, r1, r2
   dc948:	e00c      	b.n	dc964 <__adddf3+0x184>
   dc94a:	f102 0214 	add.w	r2, r2, #20
   dc94e:	bfd8      	it	le
   dc950:	f1c2 0c20 	rsble	ip, r2, #32
   dc954:	fa01 f102 	lsl.w	r1, r1, r2
   dc958:	fa20 fc0c 	lsr.w	ip, r0, ip
   dc95c:	bfdc      	itt	le
   dc95e:	ea41 010c 	orrle.w	r1, r1, ip
   dc962:	4090      	lslle	r0, r2
   dc964:	1ae4      	subs	r4, r4, r3
   dc966:	bfa2      	ittt	ge
   dc968:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dc96c:	4329      	orrge	r1, r5
   dc96e:	bd30      	popge	{r4, r5, pc}
   dc970:	ea6f 0404 	mvn.w	r4, r4
   dc974:	3c1f      	subs	r4, #31
   dc976:	da1c      	bge.n	dc9b2 <__adddf3+0x1d2>
   dc978:	340c      	adds	r4, #12
   dc97a:	dc0e      	bgt.n	dc99a <__adddf3+0x1ba>
   dc97c:	f104 0414 	add.w	r4, r4, #20
   dc980:	f1c4 0220 	rsb	r2, r4, #32
   dc984:	fa20 f004 	lsr.w	r0, r0, r4
   dc988:	fa01 f302 	lsl.w	r3, r1, r2
   dc98c:	ea40 0003 	orr.w	r0, r0, r3
   dc990:	fa21 f304 	lsr.w	r3, r1, r4
   dc994:	ea45 0103 	orr.w	r1, r5, r3
   dc998:	bd30      	pop	{r4, r5, pc}
   dc99a:	f1c4 040c 	rsb	r4, r4, #12
   dc99e:	f1c4 0220 	rsb	r2, r4, #32
   dc9a2:	fa20 f002 	lsr.w	r0, r0, r2
   dc9a6:	fa01 f304 	lsl.w	r3, r1, r4
   dc9aa:	ea40 0003 	orr.w	r0, r0, r3
   dc9ae:	4629      	mov	r1, r5
   dc9b0:	bd30      	pop	{r4, r5, pc}
   dc9b2:	fa21 f004 	lsr.w	r0, r1, r4
   dc9b6:	4629      	mov	r1, r5
   dc9b8:	bd30      	pop	{r4, r5, pc}
   dc9ba:	f094 0f00 	teq	r4, #0
   dc9be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dc9c2:	bf06      	itte	eq
   dc9c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dc9c8:	3401      	addeq	r4, #1
   dc9ca:	3d01      	subne	r5, #1
   dc9cc:	e74e      	b.n	dc86c <__adddf3+0x8c>
   dc9ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc9d2:	bf18      	it	ne
   dc9d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc9d8:	d029      	beq.n	dca2e <__adddf3+0x24e>
   dc9da:	ea94 0f05 	teq	r4, r5
   dc9de:	bf08      	it	eq
   dc9e0:	ea90 0f02 	teqeq	r0, r2
   dc9e4:	d005      	beq.n	dc9f2 <__adddf3+0x212>
   dc9e6:	ea54 0c00 	orrs.w	ip, r4, r0
   dc9ea:	bf04      	itt	eq
   dc9ec:	4619      	moveq	r1, r3
   dc9ee:	4610      	moveq	r0, r2
   dc9f0:	bd30      	pop	{r4, r5, pc}
   dc9f2:	ea91 0f03 	teq	r1, r3
   dc9f6:	bf1e      	ittt	ne
   dc9f8:	2100      	movne	r1, #0
   dc9fa:	2000      	movne	r0, #0
   dc9fc:	bd30      	popne	{r4, r5, pc}
   dc9fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dca02:	d105      	bne.n	dca10 <__adddf3+0x230>
   dca04:	0040      	lsls	r0, r0, #1
   dca06:	4149      	adcs	r1, r1
   dca08:	bf28      	it	cs
   dca0a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dca0e:	bd30      	pop	{r4, r5, pc}
   dca10:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dca14:	bf3c      	itt	cc
   dca16:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dca1a:	bd30      	popcc	{r4, r5, pc}
   dca1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dca20:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dca24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dca28:	f04f 0000 	mov.w	r0, #0
   dca2c:	bd30      	pop	{r4, r5, pc}
   dca2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dca32:	bf1a      	itte	ne
   dca34:	4619      	movne	r1, r3
   dca36:	4610      	movne	r0, r2
   dca38:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dca3c:	bf1c      	itt	ne
   dca3e:	460b      	movne	r3, r1
   dca40:	4602      	movne	r2, r0
   dca42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dca46:	bf06      	itte	eq
   dca48:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dca4c:	ea91 0f03 	teqeq	r1, r3
   dca50:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dca54:	bd30      	pop	{r4, r5, pc}
   dca56:	bf00      	nop

000dca58 <__aeabi_ui2d>:
   dca58:	f090 0f00 	teq	r0, #0
   dca5c:	bf04      	itt	eq
   dca5e:	2100      	moveq	r1, #0
   dca60:	4770      	bxeq	lr
   dca62:	b530      	push	{r4, r5, lr}
   dca64:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dca68:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dca6c:	f04f 0500 	mov.w	r5, #0
   dca70:	f04f 0100 	mov.w	r1, #0
   dca74:	e750      	b.n	dc918 <__adddf3+0x138>
   dca76:	bf00      	nop

000dca78 <__aeabi_i2d>:
   dca78:	f090 0f00 	teq	r0, #0
   dca7c:	bf04      	itt	eq
   dca7e:	2100      	moveq	r1, #0
   dca80:	4770      	bxeq	lr
   dca82:	b530      	push	{r4, r5, lr}
   dca84:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dca88:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dca8c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dca90:	bf48      	it	mi
   dca92:	4240      	negmi	r0, r0
   dca94:	f04f 0100 	mov.w	r1, #0
   dca98:	e73e      	b.n	dc918 <__adddf3+0x138>
   dca9a:	bf00      	nop

000dca9c <__aeabi_f2d>:
   dca9c:	0042      	lsls	r2, r0, #1
   dca9e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dcaa2:	ea4f 0131 	mov.w	r1, r1, rrx
   dcaa6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dcaaa:	bf1f      	itttt	ne
   dcaac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dcab0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dcab4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dcab8:	4770      	bxne	lr
   dcaba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dcabe:	bf08      	it	eq
   dcac0:	4770      	bxeq	lr
   dcac2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dcac6:	bf04      	itt	eq
   dcac8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dcacc:	4770      	bxeq	lr
   dcace:	b530      	push	{r4, r5, lr}
   dcad0:	f44f 7460 	mov.w	r4, #896	; 0x380
   dcad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dcad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dcadc:	e71c      	b.n	dc918 <__adddf3+0x138>
   dcade:	bf00      	nop

000dcae0 <__aeabi_ul2d>:
   dcae0:	ea50 0201 	orrs.w	r2, r0, r1
   dcae4:	bf08      	it	eq
   dcae6:	4770      	bxeq	lr
   dcae8:	b530      	push	{r4, r5, lr}
   dcaea:	f04f 0500 	mov.w	r5, #0
   dcaee:	e00a      	b.n	dcb06 <__aeabi_l2d+0x16>

000dcaf0 <__aeabi_l2d>:
   dcaf0:	ea50 0201 	orrs.w	r2, r0, r1
   dcaf4:	bf08      	it	eq
   dcaf6:	4770      	bxeq	lr
   dcaf8:	b530      	push	{r4, r5, lr}
   dcafa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dcafe:	d502      	bpl.n	dcb06 <__aeabi_l2d+0x16>
   dcb00:	4240      	negs	r0, r0
   dcb02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dcb06:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dcb0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dcb0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dcb12:	f43f aed8 	beq.w	dc8c6 <__adddf3+0xe6>
   dcb16:	f04f 0203 	mov.w	r2, #3
   dcb1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dcb1e:	bf18      	it	ne
   dcb20:	3203      	addne	r2, #3
   dcb22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dcb26:	bf18      	it	ne
   dcb28:	3203      	addne	r2, #3
   dcb2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dcb2e:	f1c2 0320 	rsb	r3, r2, #32
   dcb32:	fa00 fc03 	lsl.w	ip, r0, r3
   dcb36:	fa20 f002 	lsr.w	r0, r0, r2
   dcb3a:	fa01 fe03 	lsl.w	lr, r1, r3
   dcb3e:	ea40 000e 	orr.w	r0, r0, lr
   dcb42:	fa21 f102 	lsr.w	r1, r1, r2
   dcb46:	4414      	add	r4, r2
   dcb48:	e6bd      	b.n	dc8c6 <__adddf3+0xe6>
   dcb4a:	bf00      	nop

000dcb4c <__aeabi_dmul>:
   dcb4c:	b570      	push	{r4, r5, r6, lr}
   dcb4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dcb52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dcb56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dcb5a:	bf1d      	ittte	ne
   dcb5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dcb60:	ea94 0f0c 	teqne	r4, ip
   dcb64:	ea95 0f0c 	teqne	r5, ip
   dcb68:	f000 f8de 	bleq	dcd28 <__aeabi_dmul+0x1dc>
   dcb6c:	442c      	add	r4, r5
   dcb6e:	ea81 0603 	eor.w	r6, r1, r3
   dcb72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dcb76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dcb7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dcb7e:	bf18      	it	ne
   dcb80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dcb84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dcb88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dcb8c:	d038      	beq.n	dcc00 <__aeabi_dmul+0xb4>
   dcb8e:	fba0 ce02 	umull	ip, lr, r0, r2
   dcb92:	f04f 0500 	mov.w	r5, #0
   dcb96:	fbe1 e502 	umlal	lr, r5, r1, r2
   dcb9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dcb9e:	fbe0 e503 	umlal	lr, r5, r0, r3
   dcba2:	f04f 0600 	mov.w	r6, #0
   dcba6:	fbe1 5603 	umlal	r5, r6, r1, r3
   dcbaa:	f09c 0f00 	teq	ip, #0
   dcbae:	bf18      	it	ne
   dcbb0:	f04e 0e01 	orrne.w	lr, lr, #1
   dcbb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dcbb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dcbbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dcbc0:	d204      	bcs.n	dcbcc <__aeabi_dmul+0x80>
   dcbc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dcbc6:	416d      	adcs	r5, r5
   dcbc8:	eb46 0606 	adc.w	r6, r6, r6
   dcbcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dcbd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dcbd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dcbd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dcbdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dcbe0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dcbe4:	bf88      	it	hi
   dcbe6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dcbea:	d81e      	bhi.n	dcc2a <__aeabi_dmul+0xde>
   dcbec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dcbf0:	bf08      	it	eq
   dcbf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dcbf6:	f150 0000 	adcs.w	r0, r0, #0
   dcbfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dcbfe:	bd70      	pop	{r4, r5, r6, pc}
   dcc00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dcc04:	ea46 0101 	orr.w	r1, r6, r1
   dcc08:	ea40 0002 	orr.w	r0, r0, r2
   dcc0c:	ea81 0103 	eor.w	r1, r1, r3
   dcc10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dcc14:	bfc2      	ittt	gt
   dcc16:	ebd4 050c 	rsbsgt	r5, r4, ip
   dcc1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dcc1e:	bd70      	popgt	{r4, r5, r6, pc}
   dcc20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dcc24:	f04f 0e00 	mov.w	lr, #0
   dcc28:	3c01      	subs	r4, #1
   dcc2a:	f300 80ab 	bgt.w	dcd84 <__aeabi_dmul+0x238>
   dcc2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dcc32:	bfde      	ittt	le
   dcc34:	2000      	movle	r0, #0
   dcc36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dcc3a:	bd70      	pople	{r4, r5, r6, pc}
   dcc3c:	f1c4 0400 	rsb	r4, r4, #0
   dcc40:	3c20      	subs	r4, #32
   dcc42:	da35      	bge.n	dccb0 <__aeabi_dmul+0x164>
   dcc44:	340c      	adds	r4, #12
   dcc46:	dc1b      	bgt.n	dcc80 <__aeabi_dmul+0x134>
   dcc48:	f104 0414 	add.w	r4, r4, #20
   dcc4c:	f1c4 0520 	rsb	r5, r4, #32
   dcc50:	fa00 f305 	lsl.w	r3, r0, r5
   dcc54:	fa20 f004 	lsr.w	r0, r0, r4
   dcc58:	fa01 f205 	lsl.w	r2, r1, r5
   dcc5c:	ea40 0002 	orr.w	r0, r0, r2
   dcc60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dcc64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dcc68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dcc6c:	fa21 f604 	lsr.w	r6, r1, r4
   dcc70:	eb42 0106 	adc.w	r1, r2, r6
   dcc74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dcc78:	bf08      	it	eq
   dcc7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dcc7e:	bd70      	pop	{r4, r5, r6, pc}
   dcc80:	f1c4 040c 	rsb	r4, r4, #12
   dcc84:	f1c4 0520 	rsb	r5, r4, #32
   dcc88:	fa00 f304 	lsl.w	r3, r0, r4
   dcc8c:	fa20 f005 	lsr.w	r0, r0, r5
   dcc90:	fa01 f204 	lsl.w	r2, r1, r4
   dcc94:	ea40 0002 	orr.w	r0, r0, r2
   dcc98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dcc9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dcca0:	f141 0100 	adc.w	r1, r1, #0
   dcca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dcca8:	bf08      	it	eq
   dccaa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dccae:	bd70      	pop	{r4, r5, r6, pc}
   dccb0:	f1c4 0520 	rsb	r5, r4, #32
   dccb4:	fa00 f205 	lsl.w	r2, r0, r5
   dccb8:	ea4e 0e02 	orr.w	lr, lr, r2
   dccbc:	fa20 f304 	lsr.w	r3, r0, r4
   dccc0:	fa01 f205 	lsl.w	r2, r1, r5
   dccc4:	ea43 0302 	orr.w	r3, r3, r2
   dccc8:	fa21 f004 	lsr.w	r0, r1, r4
   dcccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dccd0:	fa21 f204 	lsr.w	r2, r1, r4
   dccd4:	ea20 0002 	bic.w	r0, r0, r2
   dccd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dccdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dcce0:	bf08      	it	eq
   dcce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dcce6:	bd70      	pop	{r4, r5, r6, pc}
   dcce8:	f094 0f00 	teq	r4, #0
   dccec:	d10f      	bne.n	dcd0e <__aeabi_dmul+0x1c2>
   dccee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dccf2:	0040      	lsls	r0, r0, #1
   dccf4:	eb41 0101 	adc.w	r1, r1, r1
   dccf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dccfc:	bf08      	it	eq
   dccfe:	3c01      	subeq	r4, #1
   dcd00:	d0f7      	beq.n	dccf2 <__aeabi_dmul+0x1a6>
   dcd02:	ea41 0106 	orr.w	r1, r1, r6
   dcd06:	f095 0f00 	teq	r5, #0
   dcd0a:	bf18      	it	ne
   dcd0c:	4770      	bxne	lr
   dcd0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dcd12:	0052      	lsls	r2, r2, #1
   dcd14:	eb43 0303 	adc.w	r3, r3, r3
   dcd18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dcd1c:	bf08      	it	eq
   dcd1e:	3d01      	subeq	r5, #1
   dcd20:	d0f7      	beq.n	dcd12 <__aeabi_dmul+0x1c6>
   dcd22:	ea43 0306 	orr.w	r3, r3, r6
   dcd26:	4770      	bx	lr
   dcd28:	ea94 0f0c 	teq	r4, ip
   dcd2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dcd30:	bf18      	it	ne
   dcd32:	ea95 0f0c 	teqne	r5, ip
   dcd36:	d00c      	beq.n	dcd52 <__aeabi_dmul+0x206>
   dcd38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dcd3c:	bf18      	it	ne
   dcd3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dcd42:	d1d1      	bne.n	dcce8 <__aeabi_dmul+0x19c>
   dcd44:	ea81 0103 	eor.w	r1, r1, r3
   dcd48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dcd4c:	f04f 0000 	mov.w	r0, #0
   dcd50:	bd70      	pop	{r4, r5, r6, pc}
   dcd52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dcd56:	bf06      	itte	eq
   dcd58:	4610      	moveq	r0, r2
   dcd5a:	4619      	moveq	r1, r3
   dcd5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dcd60:	d019      	beq.n	dcd96 <__aeabi_dmul+0x24a>
   dcd62:	ea94 0f0c 	teq	r4, ip
   dcd66:	d102      	bne.n	dcd6e <__aeabi_dmul+0x222>
   dcd68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dcd6c:	d113      	bne.n	dcd96 <__aeabi_dmul+0x24a>
   dcd6e:	ea95 0f0c 	teq	r5, ip
   dcd72:	d105      	bne.n	dcd80 <__aeabi_dmul+0x234>
   dcd74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dcd78:	bf1c      	itt	ne
   dcd7a:	4610      	movne	r0, r2
   dcd7c:	4619      	movne	r1, r3
   dcd7e:	d10a      	bne.n	dcd96 <__aeabi_dmul+0x24a>
   dcd80:	ea81 0103 	eor.w	r1, r1, r3
   dcd84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dcd88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dcd8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dcd90:	f04f 0000 	mov.w	r0, #0
   dcd94:	bd70      	pop	{r4, r5, r6, pc}
   dcd96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dcd9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dcd9e:	bd70      	pop	{r4, r5, r6, pc}

000dcda0 <__aeabi_ddiv>:
   dcda0:	b570      	push	{r4, r5, r6, lr}
   dcda2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dcda6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dcdaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dcdae:	bf1d      	ittte	ne
   dcdb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dcdb4:	ea94 0f0c 	teqne	r4, ip
   dcdb8:	ea95 0f0c 	teqne	r5, ip
   dcdbc:	f000 f8a7 	bleq	dcf0e <__aeabi_ddiv+0x16e>
   dcdc0:	eba4 0405 	sub.w	r4, r4, r5
   dcdc4:	ea81 0e03 	eor.w	lr, r1, r3
   dcdc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dcdcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dcdd0:	f000 8088 	beq.w	dcee4 <__aeabi_ddiv+0x144>
   dcdd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dcdd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dcddc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dcde0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dcde4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dcde8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dcdec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dcdf0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dcdf4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dcdf8:	429d      	cmp	r5, r3
   dcdfa:	bf08      	it	eq
   dcdfc:	4296      	cmpeq	r6, r2
   dcdfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dce02:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dce06:	d202      	bcs.n	dce0e <__aeabi_ddiv+0x6e>
   dce08:	085b      	lsrs	r3, r3, #1
   dce0a:	ea4f 0232 	mov.w	r2, r2, rrx
   dce0e:	1ab6      	subs	r6, r6, r2
   dce10:	eb65 0503 	sbc.w	r5, r5, r3
   dce14:	085b      	lsrs	r3, r3, #1
   dce16:	ea4f 0232 	mov.w	r2, r2, rrx
   dce1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dce1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dce22:	ebb6 0e02 	subs.w	lr, r6, r2
   dce26:	eb75 0e03 	sbcs.w	lr, r5, r3
   dce2a:	bf22      	ittt	cs
   dce2c:	1ab6      	subcs	r6, r6, r2
   dce2e:	4675      	movcs	r5, lr
   dce30:	ea40 000c 	orrcs.w	r0, r0, ip
   dce34:	085b      	lsrs	r3, r3, #1
   dce36:	ea4f 0232 	mov.w	r2, r2, rrx
   dce3a:	ebb6 0e02 	subs.w	lr, r6, r2
   dce3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dce42:	bf22      	ittt	cs
   dce44:	1ab6      	subcs	r6, r6, r2
   dce46:	4675      	movcs	r5, lr
   dce48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dce4c:	085b      	lsrs	r3, r3, #1
   dce4e:	ea4f 0232 	mov.w	r2, r2, rrx
   dce52:	ebb6 0e02 	subs.w	lr, r6, r2
   dce56:	eb75 0e03 	sbcs.w	lr, r5, r3
   dce5a:	bf22      	ittt	cs
   dce5c:	1ab6      	subcs	r6, r6, r2
   dce5e:	4675      	movcs	r5, lr
   dce60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dce64:	085b      	lsrs	r3, r3, #1
   dce66:	ea4f 0232 	mov.w	r2, r2, rrx
   dce6a:	ebb6 0e02 	subs.w	lr, r6, r2
   dce6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dce72:	bf22      	ittt	cs
   dce74:	1ab6      	subcs	r6, r6, r2
   dce76:	4675      	movcs	r5, lr
   dce78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dce7c:	ea55 0e06 	orrs.w	lr, r5, r6
   dce80:	d018      	beq.n	dceb4 <__aeabi_ddiv+0x114>
   dce82:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dce86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dce8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dce8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dce92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dce96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dce9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dce9e:	d1c0      	bne.n	dce22 <__aeabi_ddiv+0x82>
   dcea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dcea4:	d10b      	bne.n	dcebe <__aeabi_ddiv+0x11e>
   dcea6:	ea41 0100 	orr.w	r1, r1, r0
   dceaa:	f04f 0000 	mov.w	r0, #0
   dceae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dceb2:	e7b6      	b.n	dce22 <__aeabi_ddiv+0x82>
   dceb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dceb8:	bf04      	itt	eq
   dceba:	4301      	orreq	r1, r0
   dcebc:	2000      	moveq	r0, #0
   dcebe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dcec2:	bf88      	it	hi
   dcec4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dcec8:	f63f aeaf 	bhi.w	dcc2a <__aeabi_dmul+0xde>
   dcecc:	ebb5 0c03 	subs.w	ip, r5, r3
   dced0:	bf04      	itt	eq
   dced2:	ebb6 0c02 	subseq.w	ip, r6, r2
   dced6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dceda:	f150 0000 	adcs.w	r0, r0, #0
   dcede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dcee2:	bd70      	pop	{r4, r5, r6, pc}
   dcee4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dcee8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dceec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dcef0:	bfc2      	ittt	gt
   dcef2:	ebd4 050c 	rsbsgt	r5, r4, ip
   dcef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dcefa:	bd70      	popgt	{r4, r5, r6, pc}
   dcefc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dcf00:	f04f 0e00 	mov.w	lr, #0
   dcf04:	3c01      	subs	r4, #1
   dcf06:	e690      	b.n	dcc2a <__aeabi_dmul+0xde>
   dcf08:	ea45 0e06 	orr.w	lr, r5, r6
   dcf0c:	e68d      	b.n	dcc2a <__aeabi_dmul+0xde>
   dcf0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dcf12:	ea94 0f0c 	teq	r4, ip
   dcf16:	bf08      	it	eq
   dcf18:	ea95 0f0c 	teqeq	r5, ip
   dcf1c:	f43f af3b 	beq.w	dcd96 <__aeabi_dmul+0x24a>
   dcf20:	ea94 0f0c 	teq	r4, ip
   dcf24:	d10a      	bne.n	dcf3c <__aeabi_ddiv+0x19c>
   dcf26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dcf2a:	f47f af34 	bne.w	dcd96 <__aeabi_dmul+0x24a>
   dcf2e:	ea95 0f0c 	teq	r5, ip
   dcf32:	f47f af25 	bne.w	dcd80 <__aeabi_dmul+0x234>
   dcf36:	4610      	mov	r0, r2
   dcf38:	4619      	mov	r1, r3
   dcf3a:	e72c      	b.n	dcd96 <__aeabi_dmul+0x24a>
   dcf3c:	ea95 0f0c 	teq	r5, ip
   dcf40:	d106      	bne.n	dcf50 <__aeabi_ddiv+0x1b0>
   dcf42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dcf46:	f43f aefd 	beq.w	dcd44 <__aeabi_dmul+0x1f8>
   dcf4a:	4610      	mov	r0, r2
   dcf4c:	4619      	mov	r1, r3
   dcf4e:	e722      	b.n	dcd96 <__aeabi_dmul+0x24a>
   dcf50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dcf54:	bf18      	it	ne
   dcf56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dcf5a:	f47f aec5 	bne.w	dcce8 <__aeabi_dmul+0x19c>
   dcf5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dcf62:	f47f af0d 	bne.w	dcd80 <__aeabi_dmul+0x234>
   dcf66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dcf6a:	f47f aeeb 	bne.w	dcd44 <__aeabi_dmul+0x1f8>
   dcf6e:	e712      	b.n	dcd96 <__aeabi_dmul+0x24a>

000dcf70 <__gedf2>:
   dcf70:	f04f 3cff 	mov.w	ip, #4294967295
   dcf74:	e006      	b.n	dcf84 <__cmpdf2+0x4>
   dcf76:	bf00      	nop

000dcf78 <__ledf2>:
   dcf78:	f04f 0c01 	mov.w	ip, #1
   dcf7c:	e002      	b.n	dcf84 <__cmpdf2+0x4>
   dcf7e:	bf00      	nop

000dcf80 <__cmpdf2>:
   dcf80:	f04f 0c01 	mov.w	ip, #1
   dcf84:	f84d cd04 	str.w	ip, [sp, #-4]!
   dcf88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dcf8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcf90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dcf94:	bf18      	it	ne
   dcf96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dcf9a:	d01b      	beq.n	dcfd4 <__cmpdf2+0x54>
   dcf9c:	b001      	add	sp, #4
   dcf9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dcfa2:	bf0c      	ite	eq
   dcfa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dcfa8:	ea91 0f03 	teqne	r1, r3
   dcfac:	bf02      	ittt	eq
   dcfae:	ea90 0f02 	teqeq	r0, r2
   dcfb2:	2000      	moveq	r0, #0
   dcfb4:	4770      	bxeq	lr
   dcfb6:	f110 0f00 	cmn.w	r0, #0
   dcfba:	ea91 0f03 	teq	r1, r3
   dcfbe:	bf58      	it	pl
   dcfc0:	4299      	cmppl	r1, r3
   dcfc2:	bf08      	it	eq
   dcfc4:	4290      	cmpeq	r0, r2
   dcfc6:	bf2c      	ite	cs
   dcfc8:	17d8      	asrcs	r0, r3, #31
   dcfca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dcfce:	f040 0001 	orr.w	r0, r0, #1
   dcfd2:	4770      	bx	lr
   dcfd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dcfd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcfdc:	d102      	bne.n	dcfe4 <__cmpdf2+0x64>
   dcfde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dcfe2:	d107      	bne.n	dcff4 <__cmpdf2+0x74>
   dcfe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dcfe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcfec:	d1d6      	bne.n	dcf9c <__cmpdf2+0x1c>
   dcfee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dcff2:	d0d3      	beq.n	dcf9c <__cmpdf2+0x1c>
   dcff4:	f85d 0b04 	ldr.w	r0, [sp], #4
   dcff8:	4770      	bx	lr
   dcffa:	bf00      	nop

000dcffc <__aeabi_cdrcmple>:
   dcffc:	4684      	mov	ip, r0
   dcffe:	4610      	mov	r0, r2
   dd000:	4662      	mov	r2, ip
   dd002:	468c      	mov	ip, r1
   dd004:	4619      	mov	r1, r3
   dd006:	4663      	mov	r3, ip
   dd008:	e000      	b.n	dd00c <__aeabi_cdcmpeq>
   dd00a:	bf00      	nop

000dd00c <__aeabi_cdcmpeq>:
   dd00c:	b501      	push	{r0, lr}
   dd00e:	f7ff ffb7 	bl	dcf80 <__cmpdf2>
   dd012:	2800      	cmp	r0, #0
   dd014:	bf48      	it	mi
   dd016:	f110 0f00 	cmnmi.w	r0, #0
   dd01a:	bd01      	pop	{r0, pc}

000dd01c <__aeabi_dcmpeq>:
   dd01c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd020:	f7ff fff4 	bl	dd00c <__aeabi_cdcmpeq>
   dd024:	bf0c      	ite	eq
   dd026:	2001      	moveq	r0, #1
   dd028:	2000      	movne	r0, #0
   dd02a:	f85d fb08 	ldr.w	pc, [sp], #8
   dd02e:	bf00      	nop

000dd030 <__aeabi_dcmplt>:
   dd030:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd034:	f7ff ffea 	bl	dd00c <__aeabi_cdcmpeq>
   dd038:	bf34      	ite	cc
   dd03a:	2001      	movcc	r0, #1
   dd03c:	2000      	movcs	r0, #0
   dd03e:	f85d fb08 	ldr.w	pc, [sp], #8
   dd042:	bf00      	nop

000dd044 <__aeabi_dcmple>:
   dd044:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd048:	f7ff ffe0 	bl	dd00c <__aeabi_cdcmpeq>
   dd04c:	bf94      	ite	ls
   dd04e:	2001      	movls	r0, #1
   dd050:	2000      	movhi	r0, #0
   dd052:	f85d fb08 	ldr.w	pc, [sp], #8
   dd056:	bf00      	nop

000dd058 <__aeabi_dcmpge>:
   dd058:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd05c:	f7ff ffce 	bl	dcffc <__aeabi_cdrcmple>
   dd060:	bf94      	ite	ls
   dd062:	2001      	movls	r0, #1
   dd064:	2000      	movhi	r0, #0
   dd066:	f85d fb08 	ldr.w	pc, [sp], #8
   dd06a:	bf00      	nop

000dd06c <__aeabi_dcmpgt>:
   dd06c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd070:	f7ff ffc4 	bl	dcffc <__aeabi_cdrcmple>
   dd074:	bf34      	ite	cc
   dd076:	2001      	movcc	r0, #1
   dd078:	2000      	movcs	r0, #0
   dd07a:	f85d fb08 	ldr.w	pc, [sp], #8
   dd07e:	bf00      	nop

000dd080 <__aeabi_dcmpun>:
   dd080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dd084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dd088:	d102      	bne.n	dd090 <__aeabi_dcmpun+0x10>
   dd08a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dd08e:	d10a      	bne.n	dd0a6 <__aeabi_dcmpun+0x26>
   dd090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dd094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dd098:	d102      	bne.n	dd0a0 <__aeabi_dcmpun+0x20>
   dd09a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dd09e:	d102      	bne.n	dd0a6 <__aeabi_dcmpun+0x26>
   dd0a0:	f04f 0000 	mov.w	r0, #0
   dd0a4:	4770      	bx	lr
   dd0a6:	f04f 0001 	mov.w	r0, #1
   dd0aa:	4770      	bx	lr

000dd0ac <__aeabi_d2iz>:
   dd0ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dd0b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dd0b4:	d215      	bcs.n	dd0e2 <__aeabi_d2iz+0x36>
   dd0b6:	d511      	bpl.n	dd0dc <__aeabi_d2iz+0x30>
   dd0b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dd0bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dd0c0:	d912      	bls.n	dd0e8 <__aeabi_d2iz+0x3c>
   dd0c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dd0c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dd0ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dd0ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dd0d2:	fa23 f002 	lsr.w	r0, r3, r2
   dd0d6:	bf18      	it	ne
   dd0d8:	4240      	negne	r0, r0
   dd0da:	4770      	bx	lr
   dd0dc:	f04f 0000 	mov.w	r0, #0
   dd0e0:	4770      	bx	lr
   dd0e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dd0e6:	d105      	bne.n	dd0f4 <__aeabi_d2iz+0x48>
   dd0e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dd0ec:	bf08      	it	eq
   dd0ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dd0f2:	4770      	bx	lr
   dd0f4:	f04f 0000 	mov.w	r0, #0
   dd0f8:	4770      	bx	lr
   dd0fa:	bf00      	nop

000dd0fc <__aeabi_d2uiz>:
   dd0fc:	004a      	lsls	r2, r1, #1
   dd0fe:	d211      	bcs.n	dd124 <__aeabi_d2uiz+0x28>
   dd100:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dd104:	d211      	bcs.n	dd12a <__aeabi_d2uiz+0x2e>
   dd106:	d50d      	bpl.n	dd124 <__aeabi_d2uiz+0x28>
   dd108:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dd10c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dd110:	d40e      	bmi.n	dd130 <__aeabi_d2uiz+0x34>
   dd112:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dd116:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dd11a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dd11e:	fa23 f002 	lsr.w	r0, r3, r2
   dd122:	4770      	bx	lr
   dd124:	f04f 0000 	mov.w	r0, #0
   dd128:	4770      	bx	lr
   dd12a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dd12e:	d102      	bne.n	dd136 <__aeabi_d2uiz+0x3a>
   dd130:	f04f 30ff 	mov.w	r0, #4294967295
   dd134:	4770      	bx	lr
   dd136:	f04f 0000 	mov.w	r0, #0
   dd13a:	4770      	bx	lr

000dd13c <__aeabi_d2f>:
   dd13c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dd140:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dd144:	bf24      	itt	cs
   dd146:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dd14a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dd14e:	d90d      	bls.n	dd16c <__aeabi_d2f+0x30>
   dd150:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dd154:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dd158:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dd15c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dd160:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dd164:	bf08      	it	eq
   dd166:	f020 0001 	biceq.w	r0, r0, #1
   dd16a:	4770      	bx	lr
   dd16c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dd170:	d121      	bne.n	dd1b6 <__aeabi_d2f+0x7a>
   dd172:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dd176:	bfbc      	itt	lt
   dd178:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dd17c:	4770      	bxlt	lr
   dd17e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dd182:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dd186:	f1c2 0218 	rsb	r2, r2, #24
   dd18a:	f1c2 0c20 	rsb	ip, r2, #32
   dd18e:	fa10 f30c 	lsls.w	r3, r0, ip
   dd192:	fa20 f002 	lsr.w	r0, r0, r2
   dd196:	bf18      	it	ne
   dd198:	f040 0001 	orrne.w	r0, r0, #1
   dd19c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dd1a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dd1a4:	fa03 fc0c 	lsl.w	ip, r3, ip
   dd1a8:	ea40 000c 	orr.w	r0, r0, ip
   dd1ac:	fa23 f302 	lsr.w	r3, r3, r2
   dd1b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dd1b4:	e7cc      	b.n	dd150 <__aeabi_d2f+0x14>
   dd1b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dd1ba:	d107      	bne.n	dd1cc <__aeabi_d2f+0x90>
   dd1bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dd1c0:	bf1e      	ittt	ne
   dd1c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dd1c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dd1ca:	4770      	bxne	lr
   dd1cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dd1d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dd1d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dd1d8:	4770      	bx	lr
   dd1da:	bf00      	nop

000dd1dc <__aeabi_frsub>:
   dd1dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   dd1e0:	e002      	b.n	dd1e8 <__addsf3>
   dd1e2:	bf00      	nop

000dd1e4 <__aeabi_fsub>:
   dd1e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000dd1e8 <__addsf3>:
   dd1e8:	0042      	lsls	r2, r0, #1
   dd1ea:	bf1f      	itttt	ne
   dd1ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   dd1f0:	ea92 0f03 	teqne	r2, r3
   dd1f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   dd1f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dd1fc:	d06a      	beq.n	dd2d4 <__addsf3+0xec>
   dd1fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
   dd202:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   dd206:	bfc1      	itttt	gt
   dd208:	18d2      	addgt	r2, r2, r3
   dd20a:	4041      	eorgt	r1, r0
   dd20c:	4048      	eorgt	r0, r1
   dd20e:	4041      	eorgt	r1, r0
   dd210:	bfb8      	it	lt
   dd212:	425b      	neglt	r3, r3
   dd214:	2b19      	cmp	r3, #25
   dd216:	bf88      	it	hi
   dd218:	4770      	bxhi	lr
   dd21a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   dd21e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dd222:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   dd226:	bf18      	it	ne
   dd228:	4240      	negne	r0, r0
   dd22a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dd22e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   dd232:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   dd236:	bf18      	it	ne
   dd238:	4249      	negne	r1, r1
   dd23a:	ea92 0f03 	teq	r2, r3
   dd23e:	d03f      	beq.n	dd2c0 <__addsf3+0xd8>
   dd240:	f1a2 0201 	sub.w	r2, r2, #1
   dd244:	fa41 fc03 	asr.w	ip, r1, r3
   dd248:	eb10 000c 	adds.w	r0, r0, ip
   dd24c:	f1c3 0320 	rsb	r3, r3, #32
   dd250:	fa01 f103 	lsl.w	r1, r1, r3
   dd254:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   dd258:	d502      	bpl.n	dd260 <__addsf3+0x78>
   dd25a:	4249      	negs	r1, r1
   dd25c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   dd260:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   dd264:	d313      	bcc.n	dd28e <__addsf3+0xa6>
   dd266:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   dd26a:	d306      	bcc.n	dd27a <__addsf3+0x92>
   dd26c:	0840      	lsrs	r0, r0, #1
   dd26e:	ea4f 0131 	mov.w	r1, r1, rrx
   dd272:	f102 0201 	add.w	r2, r2, #1
   dd276:	2afe      	cmp	r2, #254	; 0xfe
   dd278:	d251      	bcs.n	dd31e <__addsf3+0x136>
   dd27a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   dd27e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   dd282:	bf08      	it	eq
   dd284:	f020 0001 	biceq.w	r0, r0, #1
   dd288:	ea40 0003 	orr.w	r0, r0, r3
   dd28c:	4770      	bx	lr
   dd28e:	0049      	lsls	r1, r1, #1
   dd290:	eb40 0000 	adc.w	r0, r0, r0
   dd294:	3a01      	subs	r2, #1
   dd296:	bf28      	it	cs
   dd298:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   dd29c:	d2ed      	bcs.n	dd27a <__addsf3+0x92>
   dd29e:	fab0 fc80 	clz	ip, r0
   dd2a2:	f1ac 0c08 	sub.w	ip, ip, #8
   dd2a6:	ebb2 020c 	subs.w	r2, r2, ip
   dd2aa:	fa00 f00c 	lsl.w	r0, r0, ip
   dd2ae:	bfaa      	itet	ge
   dd2b0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   dd2b4:	4252      	neglt	r2, r2
   dd2b6:	4318      	orrge	r0, r3
   dd2b8:	bfbc      	itt	lt
   dd2ba:	40d0      	lsrlt	r0, r2
   dd2bc:	4318      	orrlt	r0, r3
   dd2be:	4770      	bx	lr
   dd2c0:	f092 0f00 	teq	r2, #0
   dd2c4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   dd2c8:	bf06      	itte	eq
   dd2ca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   dd2ce:	3201      	addeq	r2, #1
   dd2d0:	3b01      	subne	r3, #1
   dd2d2:	e7b5      	b.n	dd240 <__addsf3+0x58>
   dd2d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   dd2d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   dd2dc:	bf18      	it	ne
   dd2de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dd2e2:	d021      	beq.n	dd328 <__addsf3+0x140>
   dd2e4:	ea92 0f03 	teq	r2, r3
   dd2e8:	d004      	beq.n	dd2f4 <__addsf3+0x10c>
   dd2ea:	f092 0f00 	teq	r2, #0
   dd2ee:	bf08      	it	eq
   dd2f0:	4608      	moveq	r0, r1
   dd2f2:	4770      	bx	lr
   dd2f4:	ea90 0f01 	teq	r0, r1
   dd2f8:	bf1c      	itt	ne
   dd2fa:	2000      	movne	r0, #0
   dd2fc:	4770      	bxne	lr
   dd2fe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   dd302:	d104      	bne.n	dd30e <__addsf3+0x126>
   dd304:	0040      	lsls	r0, r0, #1
   dd306:	bf28      	it	cs
   dd308:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   dd30c:	4770      	bx	lr
   dd30e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   dd312:	bf3c      	itt	cc
   dd314:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   dd318:	4770      	bxcc	lr
   dd31a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   dd31e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   dd322:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dd326:	4770      	bx	lr
   dd328:	ea7f 6222 	mvns.w	r2, r2, asr #24
   dd32c:	bf16      	itet	ne
   dd32e:	4608      	movne	r0, r1
   dd330:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   dd334:	4601      	movne	r1, r0
   dd336:	0242      	lsls	r2, r0, #9
   dd338:	bf06      	itte	eq
   dd33a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   dd33e:	ea90 0f01 	teqeq	r0, r1
   dd342:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   dd346:	4770      	bx	lr

000dd348 <__aeabi_ui2f>:
   dd348:	f04f 0300 	mov.w	r3, #0
   dd34c:	e004      	b.n	dd358 <__aeabi_i2f+0x8>
   dd34e:	bf00      	nop

000dd350 <__aeabi_i2f>:
   dd350:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   dd354:	bf48      	it	mi
   dd356:	4240      	negmi	r0, r0
   dd358:	ea5f 0c00 	movs.w	ip, r0
   dd35c:	bf08      	it	eq
   dd35e:	4770      	bxeq	lr
   dd360:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   dd364:	4601      	mov	r1, r0
   dd366:	f04f 0000 	mov.w	r0, #0
   dd36a:	e01c      	b.n	dd3a6 <__aeabi_l2f+0x2a>

000dd36c <__aeabi_ul2f>:
   dd36c:	ea50 0201 	orrs.w	r2, r0, r1
   dd370:	bf08      	it	eq
   dd372:	4770      	bxeq	lr
   dd374:	f04f 0300 	mov.w	r3, #0
   dd378:	e00a      	b.n	dd390 <__aeabi_l2f+0x14>
   dd37a:	bf00      	nop

000dd37c <__aeabi_l2f>:
   dd37c:	ea50 0201 	orrs.w	r2, r0, r1
   dd380:	bf08      	it	eq
   dd382:	4770      	bxeq	lr
   dd384:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   dd388:	d502      	bpl.n	dd390 <__aeabi_l2f+0x14>
   dd38a:	4240      	negs	r0, r0
   dd38c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd390:	ea5f 0c01 	movs.w	ip, r1
   dd394:	bf02      	ittt	eq
   dd396:	4684      	moveq	ip, r0
   dd398:	4601      	moveq	r1, r0
   dd39a:	2000      	moveq	r0, #0
   dd39c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   dd3a0:	bf08      	it	eq
   dd3a2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   dd3a6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   dd3aa:	fabc f28c 	clz	r2, ip
   dd3ae:	3a08      	subs	r2, #8
   dd3b0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   dd3b4:	db10      	blt.n	dd3d8 <__aeabi_l2f+0x5c>
   dd3b6:	fa01 fc02 	lsl.w	ip, r1, r2
   dd3ba:	4463      	add	r3, ip
   dd3bc:	fa00 fc02 	lsl.w	ip, r0, r2
   dd3c0:	f1c2 0220 	rsb	r2, r2, #32
   dd3c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dd3c8:	fa20 f202 	lsr.w	r2, r0, r2
   dd3cc:	eb43 0002 	adc.w	r0, r3, r2
   dd3d0:	bf08      	it	eq
   dd3d2:	f020 0001 	biceq.w	r0, r0, #1
   dd3d6:	4770      	bx	lr
   dd3d8:	f102 0220 	add.w	r2, r2, #32
   dd3dc:	fa01 fc02 	lsl.w	ip, r1, r2
   dd3e0:	f1c2 0220 	rsb	r2, r2, #32
   dd3e4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   dd3e8:	fa21 f202 	lsr.w	r2, r1, r2
   dd3ec:	eb43 0002 	adc.w	r0, r3, r2
   dd3f0:	bf08      	it	eq
   dd3f2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   dd3f6:	4770      	bx	lr

000dd3f8 <__aeabi_ldivmod>:
   dd3f8:	b97b      	cbnz	r3, dd41a <__aeabi_ldivmod+0x22>
   dd3fa:	b972      	cbnz	r2, dd41a <__aeabi_ldivmod+0x22>
   dd3fc:	2900      	cmp	r1, #0
   dd3fe:	bfbe      	ittt	lt
   dd400:	2000      	movlt	r0, #0
   dd402:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   dd406:	e006      	blt.n	dd416 <__aeabi_ldivmod+0x1e>
   dd408:	bf08      	it	eq
   dd40a:	2800      	cmpeq	r0, #0
   dd40c:	bf1c      	itt	ne
   dd40e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   dd412:	f04f 30ff 	movne.w	r0, #4294967295
   dd416:	f000 b9d7 	b.w	dd7c8 <__aeabi_idiv0>
   dd41a:	f1ad 0c08 	sub.w	ip, sp, #8
   dd41e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dd422:	2900      	cmp	r1, #0
   dd424:	db09      	blt.n	dd43a <__aeabi_ldivmod+0x42>
   dd426:	2b00      	cmp	r3, #0
   dd428:	db1a      	blt.n	dd460 <__aeabi_ldivmod+0x68>
   dd42a:	f000 f86b 	bl	dd504 <__udivmoddi4>
   dd42e:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd432:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd436:	b004      	add	sp, #16
   dd438:	4770      	bx	lr
   dd43a:	4240      	negs	r0, r0
   dd43c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd440:	2b00      	cmp	r3, #0
   dd442:	db1b      	blt.n	dd47c <__aeabi_ldivmod+0x84>
   dd444:	f000 f85e 	bl	dd504 <__udivmoddi4>
   dd448:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd44c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd450:	b004      	add	sp, #16
   dd452:	4240      	negs	r0, r0
   dd454:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd458:	4252      	negs	r2, r2
   dd45a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd45e:	4770      	bx	lr
   dd460:	4252      	negs	r2, r2
   dd462:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd466:	f000 f84d 	bl	dd504 <__udivmoddi4>
   dd46a:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd46e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd472:	b004      	add	sp, #16
   dd474:	4240      	negs	r0, r0
   dd476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd47a:	4770      	bx	lr
   dd47c:	4252      	negs	r2, r2
   dd47e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd482:	f000 f83f 	bl	dd504 <__udivmoddi4>
   dd486:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd48a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd48e:	b004      	add	sp, #16
   dd490:	4252      	negs	r2, r2
   dd492:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd496:	4770      	bx	lr

000dd498 <__aeabi_uldivmod>:
   dd498:	b953      	cbnz	r3, dd4b0 <__aeabi_uldivmod+0x18>
   dd49a:	b94a      	cbnz	r2, dd4b0 <__aeabi_uldivmod+0x18>
   dd49c:	2900      	cmp	r1, #0
   dd49e:	bf08      	it	eq
   dd4a0:	2800      	cmpeq	r0, #0
   dd4a2:	bf1c      	itt	ne
   dd4a4:	f04f 31ff 	movne.w	r1, #4294967295
   dd4a8:	f04f 30ff 	movne.w	r0, #4294967295
   dd4ac:	f000 b98c 	b.w	dd7c8 <__aeabi_idiv0>
   dd4b0:	f1ad 0c08 	sub.w	ip, sp, #8
   dd4b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dd4b8:	f000 f824 	bl	dd504 <__udivmoddi4>
   dd4bc:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd4c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd4c4:	b004      	add	sp, #16
   dd4c6:	4770      	bx	lr

000dd4c8 <__aeabi_d2ulz>:
   dd4c8:	b5d0      	push	{r4, r6, r7, lr}
   dd4ca:	4b0c      	ldr	r3, [pc, #48]	; (dd4fc <__aeabi_d2ulz+0x34>)
   dd4cc:	2200      	movs	r2, #0
   dd4ce:	4606      	mov	r6, r0
   dd4d0:	460f      	mov	r7, r1
   dd4d2:	f7ff fb3b 	bl	dcb4c <__aeabi_dmul>
   dd4d6:	f7ff fe11 	bl	dd0fc <__aeabi_d2uiz>
   dd4da:	4604      	mov	r4, r0
   dd4dc:	f7ff fabc 	bl	dca58 <__aeabi_ui2d>
   dd4e0:	4b07      	ldr	r3, [pc, #28]	; (dd500 <__aeabi_d2ulz+0x38>)
   dd4e2:	2200      	movs	r2, #0
   dd4e4:	f7ff fb32 	bl	dcb4c <__aeabi_dmul>
   dd4e8:	4602      	mov	r2, r0
   dd4ea:	460b      	mov	r3, r1
   dd4ec:	4630      	mov	r0, r6
   dd4ee:	4639      	mov	r1, r7
   dd4f0:	f7ff f974 	bl	dc7dc <__aeabi_dsub>
   dd4f4:	f7ff fe02 	bl	dd0fc <__aeabi_d2uiz>
   dd4f8:	4621      	mov	r1, r4
   dd4fa:	bdd0      	pop	{r4, r6, r7, pc}
   dd4fc:	3df00000 	.word	0x3df00000
   dd500:	41f00000 	.word	0x41f00000

000dd504 <__udivmoddi4>:
   dd504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd508:	9d08      	ldr	r5, [sp, #32]
   dd50a:	4604      	mov	r4, r0
   dd50c:	468c      	mov	ip, r1
   dd50e:	2b00      	cmp	r3, #0
   dd510:	f040 8083 	bne.w	dd61a <__udivmoddi4+0x116>
   dd514:	428a      	cmp	r2, r1
   dd516:	4617      	mov	r7, r2
   dd518:	d947      	bls.n	dd5aa <__udivmoddi4+0xa6>
   dd51a:	fab2 f282 	clz	r2, r2
   dd51e:	b142      	cbz	r2, dd532 <__udivmoddi4+0x2e>
   dd520:	f1c2 0020 	rsb	r0, r2, #32
   dd524:	fa24 f000 	lsr.w	r0, r4, r0
   dd528:	4091      	lsls	r1, r2
   dd52a:	4097      	lsls	r7, r2
   dd52c:	ea40 0c01 	orr.w	ip, r0, r1
   dd530:	4094      	lsls	r4, r2
   dd532:	ea4f 4817 	mov.w	r8, r7, lsr #16
   dd536:	0c23      	lsrs	r3, r4, #16
   dd538:	fbbc f6f8 	udiv	r6, ip, r8
   dd53c:	fa1f fe87 	uxth.w	lr, r7
   dd540:	fb08 c116 	mls	r1, r8, r6, ip
   dd544:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dd548:	fb06 f10e 	mul.w	r1, r6, lr
   dd54c:	4299      	cmp	r1, r3
   dd54e:	d909      	bls.n	dd564 <__udivmoddi4+0x60>
   dd550:	18fb      	adds	r3, r7, r3
   dd552:	f106 30ff 	add.w	r0, r6, #4294967295
   dd556:	f080 8119 	bcs.w	dd78c <__udivmoddi4+0x288>
   dd55a:	4299      	cmp	r1, r3
   dd55c:	f240 8116 	bls.w	dd78c <__udivmoddi4+0x288>
   dd560:	3e02      	subs	r6, #2
   dd562:	443b      	add	r3, r7
   dd564:	1a5b      	subs	r3, r3, r1
   dd566:	b2a4      	uxth	r4, r4
   dd568:	fbb3 f0f8 	udiv	r0, r3, r8
   dd56c:	fb08 3310 	mls	r3, r8, r0, r3
   dd570:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   dd574:	fb00 fe0e 	mul.w	lr, r0, lr
   dd578:	45a6      	cmp	lr, r4
   dd57a:	d909      	bls.n	dd590 <__udivmoddi4+0x8c>
   dd57c:	193c      	adds	r4, r7, r4
   dd57e:	f100 33ff 	add.w	r3, r0, #4294967295
   dd582:	f080 8105 	bcs.w	dd790 <__udivmoddi4+0x28c>
   dd586:	45a6      	cmp	lr, r4
   dd588:	f240 8102 	bls.w	dd790 <__udivmoddi4+0x28c>
   dd58c:	3802      	subs	r0, #2
   dd58e:	443c      	add	r4, r7
   dd590:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   dd594:	eba4 040e 	sub.w	r4, r4, lr
   dd598:	2600      	movs	r6, #0
   dd59a:	b11d      	cbz	r5, dd5a4 <__udivmoddi4+0xa0>
   dd59c:	40d4      	lsrs	r4, r2
   dd59e:	2300      	movs	r3, #0
   dd5a0:	e9c5 4300 	strd	r4, r3, [r5]
   dd5a4:	4631      	mov	r1, r6
   dd5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd5aa:	b902      	cbnz	r2, dd5ae <__udivmoddi4+0xaa>
   dd5ac:	deff      	udf	#255	; 0xff
   dd5ae:	fab2 f282 	clz	r2, r2
   dd5b2:	2a00      	cmp	r2, #0
   dd5b4:	d150      	bne.n	dd658 <__udivmoddi4+0x154>
   dd5b6:	1bcb      	subs	r3, r1, r7
   dd5b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dd5bc:	fa1f f887 	uxth.w	r8, r7
   dd5c0:	2601      	movs	r6, #1
   dd5c2:	fbb3 fcfe 	udiv	ip, r3, lr
   dd5c6:	0c21      	lsrs	r1, r4, #16
   dd5c8:	fb0e 331c 	mls	r3, lr, ip, r3
   dd5cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dd5d0:	fb08 f30c 	mul.w	r3, r8, ip
   dd5d4:	428b      	cmp	r3, r1
   dd5d6:	d907      	bls.n	dd5e8 <__udivmoddi4+0xe4>
   dd5d8:	1879      	adds	r1, r7, r1
   dd5da:	f10c 30ff 	add.w	r0, ip, #4294967295
   dd5de:	d202      	bcs.n	dd5e6 <__udivmoddi4+0xe2>
   dd5e0:	428b      	cmp	r3, r1
   dd5e2:	f200 80e9 	bhi.w	dd7b8 <__udivmoddi4+0x2b4>
   dd5e6:	4684      	mov	ip, r0
   dd5e8:	1ac9      	subs	r1, r1, r3
   dd5ea:	b2a3      	uxth	r3, r4
   dd5ec:	fbb1 f0fe 	udiv	r0, r1, lr
   dd5f0:	fb0e 1110 	mls	r1, lr, r0, r1
   dd5f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dd5f8:	fb08 f800 	mul.w	r8, r8, r0
   dd5fc:	45a0      	cmp	r8, r4
   dd5fe:	d907      	bls.n	dd610 <__udivmoddi4+0x10c>
   dd600:	193c      	adds	r4, r7, r4
   dd602:	f100 33ff 	add.w	r3, r0, #4294967295
   dd606:	d202      	bcs.n	dd60e <__udivmoddi4+0x10a>
   dd608:	45a0      	cmp	r8, r4
   dd60a:	f200 80d9 	bhi.w	dd7c0 <__udivmoddi4+0x2bc>
   dd60e:	4618      	mov	r0, r3
   dd610:	eba4 0408 	sub.w	r4, r4, r8
   dd614:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dd618:	e7bf      	b.n	dd59a <__udivmoddi4+0x96>
   dd61a:	428b      	cmp	r3, r1
   dd61c:	d909      	bls.n	dd632 <__udivmoddi4+0x12e>
   dd61e:	2d00      	cmp	r5, #0
   dd620:	f000 80b1 	beq.w	dd786 <__udivmoddi4+0x282>
   dd624:	2600      	movs	r6, #0
   dd626:	e9c5 0100 	strd	r0, r1, [r5]
   dd62a:	4630      	mov	r0, r6
   dd62c:	4631      	mov	r1, r6
   dd62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd632:	fab3 f683 	clz	r6, r3
   dd636:	2e00      	cmp	r6, #0
   dd638:	d14a      	bne.n	dd6d0 <__udivmoddi4+0x1cc>
   dd63a:	428b      	cmp	r3, r1
   dd63c:	d302      	bcc.n	dd644 <__udivmoddi4+0x140>
   dd63e:	4282      	cmp	r2, r0
   dd640:	f200 80b8 	bhi.w	dd7b4 <__udivmoddi4+0x2b0>
   dd644:	1a84      	subs	r4, r0, r2
   dd646:	eb61 0103 	sbc.w	r1, r1, r3
   dd64a:	2001      	movs	r0, #1
   dd64c:	468c      	mov	ip, r1
   dd64e:	2d00      	cmp	r5, #0
   dd650:	d0a8      	beq.n	dd5a4 <__udivmoddi4+0xa0>
   dd652:	e9c5 4c00 	strd	r4, ip, [r5]
   dd656:	e7a5      	b.n	dd5a4 <__udivmoddi4+0xa0>
   dd658:	f1c2 0320 	rsb	r3, r2, #32
   dd65c:	fa20 f603 	lsr.w	r6, r0, r3
   dd660:	4097      	lsls	r7, r2
   dd662:	fa01 f002 	lsl.w	r0, r1, r2
   dd666:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dd66a:	40d9      	lsrs	r1, r3
   dd66c:	4330      	orrs	r0, r6
   dd66e:	0c03      	lsrs	r3, r0, #16
   dd670:	fbb1 f6fe 	udiv	r6, r1, lr
   dd674:	fa1f f887 	uxth.w	r8, r7
   dd678:	fb0e 1116 	mls	r1, lr, r6, r1
   dd67c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dd680:	fb06 f108 	mul.w	r1, r6, r8
   dd684:	4299      	cmp	r1, r3
   dd686:	fa04 f402 	lsl.w	r4, r4, r2
   dd68a:	d909      	bls.n	dd6a0 <__udivmoddi4+0x19c>
   dd68c:	18fb      	adds	r3, r7, r3
   dd68e:	f106 3cff 	add.w	ip, r6, #4294967295
   dd692:	f080 808d 	bcs.w	dd7b0 <__udivmoddi4+0x2ac>
   dd696:	4299      	cmp	r1, r3
   dd698:	f240 808a 	bls.w	dd7b0 <__udivmoddi4+0x2ac>
   dd69c:	3e02      	subs	r6, #2
   dd69e:	443b      	add	r3, r7
   dd6a0:	1a5b      	subs	r3, r3, r1
   dd6a2:	b281      	uxth	r1, r0
   dd6a4:	fbb3 f0fe 	udiv	r0, r3, lr
   dd6a8:	fb0e 3310 	mls	r3, lr, r0, r3
   dd6ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dd6b0:	fb00 f308 	mul.w	r3, r0, r8
   dd6b4:	428b      	cmp	r3, r1
   dd6b6:	d907      	bls.n	dd6c8 <__udivmoddi4+0x1c4>
   dd6b8:	1879      	adds	r1, r7, r1
   dd6ba:	f100 3cff 	add.w	ip, r0, #4294967295
   dd6be:	d273      	bcs.n	dd7a8 <__udivmoddi4+0x2a4>
   dd6c0:	428b      	cmp	r3, r1
   dd6c2:	d971      	bls.n	dd7a8 <__udivmoddi4+0x2a4>
   dd6c4:	3802      	subs	r0, #2
   dd6c6:	4439      	add	r1, r7
   dd6c8:	1acb      	subs	r3, r1, r3
   dd6ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dd6ce:	e778      	b.n	dd5c2 <__udivmoddi4+0xbe>
   dd6d0:	f1c6 0c20 	rsb	ip, r6, #32
   dd6d4:	fa03 f406 	lsl.w	r4, r3, r6
   dd6d8:	fa22 f30c 	lsr.w	r3, r2, ip
   dd6dc:	431c      	orrs	r4, r3
   dd6de:	fa20 f70c 	lsr.w	r7, r0, ip
   dd6e2:	fa01 f306 	lsl.w	r3, r1, r6
   dd6e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dd6ea:	fa21 f10c 	lsr.w	r1, r1, ip
   dd6ee:	431f      	orrs	r7, r3
   dd6f0:	0c3b      	lsrs	r3, r7, #16
   dd6f2:	fbb1 f9fe 	udiv	r9, r1, lr
   dd6f6:	fa1f f884 	uxth.w	r8, r4
   dd6fa:	fb0e 1119 	mls	r1, lr, r9, r1
   dd6fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dd702:	fb09 fa08 	mul.w	sl, r9, r8
   dd706:	458a      	cmp	sl, r1
   dd708:	fa02 f206 	lsl.w	r2, r2, r6
   dd70c:	fa00 f306 	lsl.w	r3, r0, r6
   dd710:	d908      	bls.n	dd724 <__udivmoddi4+0x220>
   dd712:	1861      	adds	r1, r4, r1
   dd714:	f109 30ff 	add.w	r0, r9, #4294967295
   dd718:	d248      	bcs.n	dd7ac <__udivmoddi4+0x2a8>
   dd71a:	458a      	cmp	sl, r1
   dd71c:	d946      	bls.n	dd7ac <__udivmoddi4+0x2a8>
   dd71e:	f1a9 0902 	sub.w	r9, r9, #2
   dd722:	4421      	add	r1, r4
   dd724:	eba1 010a 	sub.w	r1, r1, sl
   dd728:	b2bf      	uxth	r7, r7
   dd72a:	fbb1 f0fe 	udiv	r0, r1, lr
   dd72e:	fb0e 1110 	mls	r1, lr, r0, r1
   dd732:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dd736:	fb00 f808 	mul.w	r8, r0, r8
   dd73a:	45b8      	cmp	r8, r7
   dd73c:	d907      	bls.n	dd74e <__udivmoddi4+0x24a>
   dd73e:	19e7      	adds	r7, r4, r7
   dd740:	f100 31ff 	add.w	r1, r0, #4294967295
   dd744:	d22e      	bcs.n	dd7a4 <__udivmoddi4+0x2a0>
   dd746:	45b8      	cmp	r8, r7
   dd748:	d92c      	bls.n	dd7a4 <__udivmoddi4+0x2a0>
   dd74a:	3802      	subs	r0, #2
   dd74c:	4427      	add	r7, r4
   dd74e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dd752:	eba7 0708 	sub.w	r7, r7, r8
   dd756:	fba0 8902 	umull	r8, r9, r0, r2
   dd75a:	454f      	cmp	r7, r9
   dd75c:	46c6      	mov	lr, r8
   dd75e:	4649      	mov	r1, r9
   dd760:	d31a      	bcc.n	dd798 <__udivmoddi4+0x294>
   dd762:	d017      	beq.n	dd794 <__udivmoddi4+0x290>
   dd764:	b15d      	cbz	r5, dd77e <__udivmoddi4+0x27a>
   dd766:	ebb3 020e 	subs.w	r2, r3, lr
   dd76a:	eb67 0701 	sbc.w	r7, r7, r1
   dd76e:	fa07 fc0c 	lsl.w	ip, r7, ip
   dd772:	40f2      	lsrs	r2, r6
   dd774:	ea4c 0202 	orr.w	r2, ip, r2
   dd778:	40f7      	lsrs	r7, r6
   dd77a:	e9c5 2700 	strd	r2, r7, [r5]
   dd77e:	2600      	movs	r6, #0
   dd780:	4631      	mov	r1, r6
   dd782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd786:	462e      	mov	r6, r5
   dd788:	4628      	mov	r0, r5
   dd78a:	e70b      	b.n	dd5a4 <__udivmoddi4+0xa0>
   dd78c:	4606      	mov	r6, r0
   dd78e:	e6e9      	b.n	dd564 <__udivmoddi4+0x60>
   dd790:	4618      	mov	r0, r3
   dd792:	e6fd      	b.n	dd590 <__udivmoddi4+0x8c>
   dd794:	4543      	cmp	r3, r8
   dd796:	d2e5      	bcs.n	dd764 <__udivmoddi4+0x260>
   dd798:	ebb8 0e02 	subs.w	lr, r8, r2
   dd79c:	eb69 0104 	sbc.w	r1, r9, r4
   dd7a0:	3801      	subs	r0, #1
   dd7a2:	e7df      	b.n	dd764 <__udivmoddi4+0x260>
   dd7a4:	4608      	mov	r0, r1
   dd7a6:	e7d2      	b.n	dd74e <__udivmoddi4+0x24a>
   dd7a8:	4660      	mov	r0, ip
   dd7aa:	e78d      	b.n	dd6c8 <__udivmoddi4+0x1c4>
   dd7ac:	4681      	mov	r9, r0
   dd7ae:	e7b9      	b.n	dd724 <__udivmoddi4+0x220>
   dd7b0:	4666      	mov	r6, ip
   dd7b2:	e775      	b.n	dd6a0 <__udivmoddi4+0x19c>
   dd7b4:	4630      	mov	r0, r6
   dd7b6:	e74a      	b.n	dd64e <__udivmoddi4+0x14a>
   dd7b8:	f1ac 0c02 	sub.w	ip, ip, #2
   dd7bc:	4439      	add	r1, r7
   dd7be:	e713      	b.n	dd5e8 <__udivmoddi4+0xe4>
   dd7c0:	3802      	subs	r0, #2
   dd7c2:	443c      	add	r4, r7
   dd7c4:	e724      	b.n	dd610 <__udivmoddi4+0x10c>
   dd7c6:	bf00      	nop

000dd7c8 <__aeabi_idiv0>:
   dd7c8:	4770      	bx	lr
   dd7ca:	bf00      	nop

000dd7cc <atexit>:
   dd7cc:	2300      	movs	r3, #0
   dd7ce:	4601      	mov	r1, r0
   dd7d0:	461a      	mov	r2, r3
   dd7d2:	4618      	mov	r0, r3
   dd7d4:	f000 b872 	b.w	dd8bc <__register_exitproc>

000dd7d8 <memcpy>:
   dd7d8:	440a      	add	r2, r1
   dd7da:	4291      	cmp	r1, r2
   dd7dc:	f100 33ff 	add.w	r3, r0, #4294967295
   dd7e0:	d100      	bne.n	dd7e4 <memcpy+0xc>
   dd7e2:	4770      	bx	lr
   dd7e4:	b510      	push	{r4, lr}
   dd7e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   dd7ea:	f803 4f01 	strb.w	r4, [r3, #1]!
   dd7ee:	4291      	cmp	r1, r2
   dd7f0:	d1f9      	bne.n	dd7e6 <memcpy+0xe>
   dd7f2:	bd10      	pop	{r4, pc}

000dd7f4 <memset>:
   dd7f4:	4402      	add	r2, r0
   dd7f6:	4603      	mov	r3, r0
   dd7f8:	4293      	cmp	r3, r2
   dd7fa:	d100      	bne.n	dd7fe <memset+0xa>
   dd7fc:	4770      	bx	lr
   dd7fe:	f803 1b01 	strb.w	r1, [r3], #1
   dd802:	e7f9      	b.n	dd7f8 <memset+0x4>

000dd804 <srand>:
   dd804:	b538      	push	{r3, r4, r5, lr}
   dd806:	4b0d      	ldr	r3, [pc, #52]	; (dd83c <srand+0x38>)
   dd808:	681d      	ldr	r5, [r3, #0]
   dd80a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dd80c:	4604      	mov	r4, r0
   dd80e:	b97b      	cbnz	r3, dd830 <srand+0x2c>
   dd810:	2018      	movs	r0, #24
   dd812:	f7fa ff55 	bl	d86c0 <malloc>
   dd816:	4a0a      	ldr	r2, [pc, #40]	; (dd840 <srand+0x3c>)
   dd818:	4b0a      	ldr	r3, [pc, #40]	; (dd844 <srand+0x40>)
   dd81a:	63a8      	str	r0, [r5, #56]	; 0x38
   dd81c:	e9c0 2300 	strd	r2, r3, [r0]
   dd820:	4b09      	ldr	r3, [pc, #36]	; (dd848 <srand+0x44>)
   dd822:	6083      	str	r3, [r0, #8]
   dd824:	230b      	movs	r3, #11
   dd826:	8183      	strh	r3, [r0, #12]
   dd828:	2201      	movs	r2, #1
   dd82a:	2300      	movs	r3, #0
   dd82c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dd830:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dd832:	2200      	movs	r2, #0
   dd834:	611c      	str	r4, [r3, #16]
   dd836:	615a      	str	r2, [r3, #20]
   dd838:	bd38      	pop	{r3, r4, r5, pc}
   dd83a:	bf00      	nop
   dd83c:	2003e3d8 	.word	0x2003e3d8
   dd840:	abcd330e 	.word	0xabcd330e
   dd844:	e66d1234 	.word	0xe66d1234
   dd848:	0005deec 	.word	0x0005deec

000dd84c <strdup>:
   dd84c:	4b02      	ldr	r3, [pc, #8]	; (dd858 <strdup+0xc>)
   dd84e:	4601      	mov	r1, r0
   dd850:	6818      	ldr	r0, [r3, #0]
   dd852:	f000 b803 	b.w	dd85c <_strdup_r>
   dd856:	bf00      	nop
   dd858:	2003e3d8 	.word	0x2003e3d8

000dd85c <_strdup_r>:
   dd85c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dd85e:	4604      	mov	r4, r0
   dd860:	4608      	mov	r0, r1
   dd862:	460d      	mov	r5, r1
   dd864:	f000 f80f 	bl	dd886 <strlen>
   dd868:	1c42      	adds	r2, r0, #1
   dd86a:	4611      	mov	r1, r2
   dd86c:	4620      	mov	r0, r4
   dd86e:	9201      	str	r2, [sp, #4]
   dd870:	f7fa ff4e 	bl	d8710 <_malloc_r>
   dd874:	4604      	mov	r4, r0
   dd876:	b118      	cbz	r0, dd880 <_strdup_r+0x24>
   dd878:	9a01      	ldr	r2, [sp, #4]
   dd87a:	4629      	mov	r1, r5
   dd87c:	f7ff ffac 	bl	dd7d8 <memcpy>
   dd880:	4620      	mov	r0, r4
   dd882:	b003      	add	sp, #12
   dd884:	bd30      	pop	{r4, r5, pc}

000dd886 <strlen>:
   dd886:	4603      	mov	r3, r0
   dd888:	f813 2b01 	ldrb.w	r2, [r3], #1
   dd88c:	2a00      	cmp	r2, #0
   dd88e:	d1fb      	bne.n	dd888 <strlen+0x2>
   dd890:	1a18      	subs	r0, r3, r0
   dd892:	3801      	subs	r0, #1
   dd894:	4770      	bx	lr

000dd896 <strncpy>:
   dd896:	b510      	push	{r4, lr}
   dd898:	3901      	subs	r1, #1
   dd89a:	4603      	mov	r3, r0
   dd89c:	b132      	cbz	r2, dd8ac <strncpy+0x16>
   dd89e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dd8a2:	f803 4b01 	strb.w	r4, [r3], #1
   dd8a6:	3a01      	subs	r2, #1
   dd8a8:	2c00      	cmp	r4, #0
   dd8aa:	d1f7      	bne.n	dd89c <strncpy+0x6>
   dd8ac:	441a      	add	r2, r3
   dd8ae:	2100      	movs	r1, #0
   dd8b0:	4293      	cmp	r3, r2
   dd8b2:	d100      	bne.n	dd8b6 <strncpy+0x20>
   dd8b4:	bd10      	pop	{r4, pc}
   dd8b6:	f803 1b01 	strb.w	r1, [r3], #1
   dd8ba:	e7f9      	b.n	dd8b0 <strncpy+0x1a>

000dd8bc <__register_exitproc>:
   dd8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd8c0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dd97c <__register_exitproc+0xc0>
   dd8c4:	4606      	mov	r6, r0
   dd8c6:	f8d8 0000 	ldr.w	r0, [r8]
   dd8ca:	461f      	mov	r7, r3
   dd8cc:	460d      	mov	r5, r1
   dd8ce:	4691      	mov	r9, r2
   dd8d0:	f000 f856 	bl	dd980 <__retarget_lock_acquire_recursive>
   dd8d4:	4b25      	ldr	r3, [pc, #148]	; (dd96c <__register_exitproc+0xb0>)
   dd8d6:	681c      	ldr	r4, [r3, #0]
   dd8d8:	b934      	cbnz	r4, dd8e8 <__register_exitproc+0x2c>
   dd8da:	4c25      	ldr	r4, [pc, #148]	; (dd970 <__register_exitproc+0xb4>)
   dd8dc:	601c      	str	r4, [r3, #0]
   dd8de:	4b25      	ldr	r3, [pc, #148]	; (dd974 <__register_exitproc+0xb8>)
   dd8e0:	b113      	cbz	r3, dd8e8 <__register_exitproc+0x2c>
   dd8e2:	681b      	ldr	r3, [r3, #0]
   dd8e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dd8e8:	6863      	ldr	r3, [r4, #4]
   dd8ea:	2b1f      	cmp	r3, #31
   dd8ec:	dd07      	ble.n	dd8fe <__register_exitproc+0x42>
   dd8ee:	f8d8 0000 	ldr.w	r0, [r8]
   dd8f2:	f000 f847 	bl	dd984 <__retarget_lock_release_recursive>
   dd8f6:	f04f 30ff 	mov.w	r0, #4294967295
   dd8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd8fe:	b34e      	cbz	r6, dd954 <__register_exitproc+0x98>
   dd900:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dd904:	b988      	cbnz	r0, dd92a <__register_exitproc+0x6e>
   dd906:	4b1c      	ldr	r3, [pc, #112]	; (dd978 <__register_exitproc+0xbc>)
   dd908:	b923      	cbnz	r3, dd914 <__register_exitproc+0x58>
   dd90a:	f8d8 0000 	ldr.w	r0, [r8]
   dd90e:	f000 f838 	bl	dd982 <__retarget_lock_release>
   dd912:	e7f0      	b.n	dd8f6 <__register_exitproc+0x3a>
   dd914:	f44f 7084 	mov.w	r0, #264	; 0x108
   dd918:	f7fa fed2 	bl	d86c0 <malloc>
   dd91c:	2800      	cmp	r0, #0
   dd91e:	d0f4      	beq.n	dd90a <__register_exitproc+0x4e>
   dd920:	2300      	movs	r3, #0
   dd922:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dd926:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dd92a:	6863      	ldr	r3, [r4, #4]
   dd92c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dd930:	2201      	movs	r2, #1
   dd932:	409a      	lsls	r2, r3
   dd934:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dd938:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dd93c:	4313      	orrs	r3, r2
   dd93e:	2e02      	cmp	r6, #2
   dd940:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dd944:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dd948:	bf02      	ittt	eq
   dd94a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dd94e:	431a      	orreq	r2, r3
   dd950:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dd954:	6863      	ldr	r3, [r4, #4]
   dd956:	f8d8 0000 	ldr.w	r0, [r8]
   dd95a:	1c5a      	adds	r2, r3, #1
   dd95c:	3302      	adds	r3, #2
   dd95e:	6062      	str	r2, [r4, #4]
   dd960:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dd964:	f000 f80e 	bl	dd984 <__retarget_lock_release_recursive>
   dd968:	2000      	movs	r0, #0
   dd96a:	e7c6      	b.n	dd8fa <__register_exitproc+0x3e>
   dd96c:	2003e7e0 	.word	0x2003e7e0
   dd970:	2003e754 	.word	0x2003e754
   dd974:	00000000 	.word	0x00000000
   dd978:	000d86c1 	.word	0x000d86c1
   dd97c:	2003e43c 	.word	0x2003e43c

000dd980 <__retarget_lock_acquire_recursive>:
   dd980:	4770      	bx	lr

000dd982 <__retarget_lock_release>:
   dd982:	4770      	bx	lr

000dd984 <__retarget_lock_release_recursive>:
   dd984:	4770      	bx	lr

000dd986 <link_code_end>:
	...

000dd988 <dynalib_user>:
   dd988:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dd998:	0000 0000 0a0a 6554 706d 7265 7461 7275     ......Temperatur
   dd9a8:	2065 203d 2000 0046 7250 7365 7573 6572     e = . F.Pressure
   dd9b8:	3d20 0020 6d20 486d 0067 7041 7270 786f      = . mmHg.Approx
   dd9c8:	202e 6c41 6974 7574 6564 3d20 0020 6d20     . Altitude = . m
   dd9d8:	4800 6d75 6469 7469 2079 203d 2000 0025     .Humidity = . %.
   dd9e8:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dd9f8:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dda08:	2d2d 2d2d 5300 6e65 6f73 3a72 2020 2020     ----.Sensor:    
   dda18:	2020 0020 7244 7669 7265 5620 7265 203a        .Driver Ver: 
   dda28:	2020 5500 696e 7571 2065 4449 203a 2020       .Unique ID:   
   dda38:	0020 614d 2078 6156 756c 3a65 2020 2020      .Max Value:    
   dda48:	2000 7878 0078 694d 206e 6156 756c 3a65     . xxx.Min Value:
   dda58:	2020 2020 5200 7365 6c6f 7475 6f69 3a6e         .Resolution:
   dda68:	2020 0020 430a 6c61 6269 6172 6974 6e6f        ..Calibration
   dda78:	6f20 6666 6573 7374 0a20 4100 6363 6c65      offsets ..Accel
   dda88:	7265 6d6f 7465 7265 203a 0a00 7947 6f72     erometer: ..Gyro
   dda98:	203a 0a00 614d 3a67 0020 410a 6363 6c65     : ..Mag: ..Accel
   ddaa8:	5220 6461 7569 3a73 0020 4d0a 6761 5220      Radius: ..Mag R
   ddab8:	6461 7569 3a73 0020 004e 454e 5300 0045     adius: .N.NE.SE.
   ddac8:	0053 5753 4e00 0057 6554 7473 6e69 2067     S.SW.NW.Testing 
   ddad8:	6973 657a 0021 6146 6c69 6465 7420 206f     size!.Failed to 
   ddae8:	7277 7469 2065 6461 7264 7365 2073 7830     write address 0x
   ddaf8:	4600 6961 656c 2064 6f74 7220 2d65 7277     .Failed to re-wr
   ddb08:	7469 2065 6461 7264 7365 2073 7830 4600     ite address 0x.F
   ddb18:	756f 646e 6d20 7861 6120 6464 6572 7373     ound max address
   ddb28:	5400 6968 2073 4545 5250 4d4f 6320 6e61     .This EEPROM can
   ddb38:	7320 6f74 6572 0020 6220 7479 7365 7700      store . bytes.w
   ddb48:	6e69 2064 7073 6565 2064 2d2d 2d2d 2d2d     ind speed ------
   ddb58:	2d2d 2d2d 2d2d 2d2d 2d2d 0a2d 0900 0009     -----------.....
   ddb68:	6d20 6870 5600 6e61 7665 6c61 6575 2d20      mph.Vanevalue -
   ddb78:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   ddb88:	000a 6548 6461 6e69 2c67 7020 7469 6863     ..Heading, pitch
   ddb98:	202c 6f72 6c6c 203a 2c00 0020 7542 2073     , roll: ., .Bus 
   ddba8:	6f56 746c 6761 3a65 2020 0020 5620 5300     Voltage:   . V.S
   ddbb8:	7568 746e 5620 6c6f 6174 6567 203a 2000     hunt Voltage: . 
   ddbc8:	566d 4c00 616f 2064 6f56 746c 6761 3a65     mV.Load Voltage:
   ddbd8:	2020 4300 7275 6572 746e 203a 2020 2020       .Current:     
   ddbe8:	2020 2000 416d 5000 776f 7265 203a 2020       . mA.Power:   
   ddbf8:	2020 2020 2020 2000 576d 5300 7379 6574           . mW.Syste
   ddc08:	206d 7453 7461 7375 203a 7830 5300 6c65     m Status: 0x.Sel
   ddc18:	2066 6554 7473 203a 2020 2020 7830 5300     f Test:     0x.S
   ddc28:	7379 6574 206d 7245 6f72 3a72 2020 7830     ystem Error:  0x
   ddc38:	2100 0020 7953 3a73 2000 3a47 2000 3a41     .! .Sys:. G:. A:
   ddc48:	2000 3a4d 2c00 5400 6d65 2e70 3d20 0020     . M:.,.Temp. = .
   ddc58:	c220 46b0 5000 6572 7373 202e 203d 4300      ..F.Press. = .C
   ddc68:	6d6f 6170 7373 6820 6165 6964 676e 7700     ompass heading.w
   ddc78:	6e69 2064 6964 6572 7463 6f69 206e 203d     ind direction = 
   ddc88:	7700 6e69 2064 7073 6565 2064 203d 4300     .wind speed = .C
   ddc98:	0a00 000a 3a58 0020 5909 203a 0900 3a5a     ....X: ..Y: ..Z:
   ddca8:	0020 6f63 706d 7361 2073 6568 6461 6e69      .compass headin
   ddcb8:	3a67 2020 7000 6973 6620 6f72 206d 6e62     g:  .psi from bn
   ddcc8:	306f 3535 000a 750a 696e 2078 6974 656d     o055...unix time
   ddcd8:	3d20 0020 6974 656d 6220 7361 2065 6176      = .time base va
   ddce8:	756c 2065 003d 666f 6966 6563 7420 6d65     lue =.office tem
   ddcf8:	6570 6172 7574 6572 4800 6c65 6f6c 0021     perature.Hello!.
   ddd08:	6146 6c69 6465 7420 206f 6966 646e 4920     Failed to find I
   ddd18:	414e 3132 2039 6863 7069 5600 6e61 2065     NA219 chip.Vane 
   ddd28:	6156 756c 0965 6944 6572 7463 6f69 096e     Value.Direction.
   ddd38:	6548 6461 6e69 0067 6144 6976 2073 6957     Heading.Davis Wi
   ddd48:	646e 5320 6570 6465 5420 7365 0074 6f52     nd Speed Test.Ro
   ddd58:	6174 6974 6e6f 0973 504d 0048 4d42 3245     tations.MPH.BME2
   ddd68:	3038 7420 7365 0074 3231 7838 3436 4f20     80 test.128x64 O
   ddd78:	454c 2044 6546 7461 6568 5772 6e69 2067     LED FeatherWing 
   ddd88:	6574 7473 4f00 454c 2044 6562 7567 006e     test.OLED begun.
   ddd98:	7542 7474 6e6f 7420 7365 0074 6942 6467     Button test.Bigd
   ddda8:	6461 7964 6441 6964 2065 6577 7461 6568     addyAddie weathe
   dddb8:	2072 7473 7461 6f69 216e 000a 6f63 6e6e     r station!..conn
   dddc8:	6365 6574 2164 000a 6f43 6c75 2064 6f6e     ected!..Could no
   dddd8:	2074 6966 646e 6120 7620 6c61 6469 4220     t find a valid B
   ddde8:	454d 3832 2030 6573 736e 726f 202c 6863     ME280 sensor, ch
   dddf8:	6365 206b 6977 6972 676e 202c 6461 7264     eck wiring, addr
   dde08:	7365 2c73 7320 6e65 6f73 2072 4449 0021     ess, sensor ID!.
   dde18:	6553 736e 726f 4449 7720 7361 203a 7830     SensorID was: 0x
   dde28:	2000 2020 2020 2020 4920 2044 666f 3020     .        ID of 0
   dde38:	4678 2046 7270 626f 6261 796c 6d20 6165     xFF probably mea
   dde48:	736e 6120 6220 6461 6120 6464 6572 7373     ns a bad address
   dde58:	202c 2061 4d42 2050 3831 2030 726f 4220     , a BMP 180 or B
   dde68:	504d 3020 3538 000a 2020 4920 2044 666f     MP 085..   ID of
   dde78:	3020 3578 2d36 7830 3835 7220 7065 6572      0x56-0x58 repre
   dde88:	6573 746e 2073 2061 4d42 2050 3832 2c30     sents a BMP 280,
   dde98:	000a 2020 2020 2020 2020 4449 6f20 2066     ..        ID of 
   ddea8:	7830 3036 7220 7065 6572 6573 746e 2073     0x60 represents 
   ddeb8:	2061 4d42 2045 3832 2e30 000a 2020 2020     a BME 280...    
   ddec8:	2020 2020 4449 6f20 2066 7830 3136 7220         ID of 0x61 r
   dded8:	7065 6572 6573 746e 2073 2061 4d42 2045     epresents a BME 
   ddee8:	3836 2e30 000a 6f46 6e75 2064 3249 2043     680...Found I2C 
   ddef8:	4545 5250 4d4f 4900 4332 4520 5045 4f52     EEPROM.I2C EEPRO
   ddf08:	204d 6f6e 2074 6469 6e65 6974 6966 6465     M not identified
   ddf18:	2e20 2e2e 6320 6568 6b63 7920 756f 2072      ... check your 
   ddf28:	6f63 6e6e 6365 6974 6e6f 3f73 0a0d 4f00     connections?...O
   ddf38:	6f6f 7370 202c 6f6e 4220 4f4e 3530 2035     oops, no BNO055 
   ddf48:	6564 6574 7463 6465 2e20 2e2e 4320 6568     detected ... Che
   ddf58:	6b63 7920 756f 2072 6977 6972 676e 6f20     ck your wiring o
   ddf68:	2072 3249 2043 4441 5244 0021 4e0a 206f     r I2C ADDR!..No 
   ddf78:	6143 696c 7262 7461 6f69 206e 6144 6174     Calibration Data
   ddf88:	6620 726f 7420 6968 2073 6573 736e 726f      for this sensor
   ddf98:	6520 6978 7473 2073 6e69 4520 5045 4f52      exists in EEPRO
   ddfa8:	004d 460a 756f 646e 4320 6c61 6269 6172     M..Found Calibra
   ddfb8:	6974 6e6f 6620 726f 7420 6968 2073 6573     tion for this se
   ddfc8:	736e 726f 6920 206e 4545 5250 4d4f 002e     nsor in EEPROM..
   ddfd8:	0a0a 6552 7473 726f 6e69 2067 6143 696c     ..Restoring Cali
   ddfe8:	7262 7461 6f69 206e 6164 6174 7420 206f     bration data to 
   ddff8:	6874 2065 4e42 304f 3535 2e2e 002e 0a0a     the BNO055......
   de008:	6143 696c 7262 7461 6f69 206e 6164 6174     Calibration data
   de018:	6c20 616f 6564 2064 6e69 6f74 4220 4f4e      loaded into BNO
   de028:	3530 0035 6f4d 6576 7320 6e65 6f73 2072     055.Move sensor 
   de038:	6c73 6769 7468 796c 7420 206f 6163 696c     slightly to cali
   de048:	7262 7461 2065 616d 6e67 7465 6d6f 7465     brate magnetomet
   de058:	7265 0073 6c50 6165 6573 4320 6c61 6269     ers.Please Calib
   de068:	6172 6574 5320 6e65 6f73 3a72 0020 460a     rate Sensor: ..F
   de078:	6c75 796c 6320 6c61 6269 6172 6574 2164     ully calibrated!
   de088:	4300 6c61 6269 6172 6974 6e6f 5220 7365     .Calibration Res
   de098:	6c75 7374 203a 0a00 530a 6f74 6972 676e     ults: ...Storing
   de0a8:	6320 6c61 6269 6172 6974 6e6f 6420 7461      calibration dat
   de0b8:	2061 6f74 4520 5045 4f52 2e4d 2e2e 4400     a to EEPROM....D
   de0c8:	7461 2061 7473 726f 6465 7420 206f 4545     ata stored to EE
   de0d8:	5250 4d4f 002e 2d0a 2d2d 2d2d 2d2d 2d2d     PROM...---------
   de0e8:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   de0f8:	2d2d 2d2d 2d2d 0a2d 6400 6665 7561 746c     -------..default
   de108:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   de118:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   de128:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   de138:	2075 7325 4d20 444f 2545 3e75 0000 0000     u %s MODE%u>....

000de148 <_ZTVN8particle11SPISettingsE>:
	...
   de150:	5af1 000d 5ac5 000d 5ac7 000d               .Z...Z...Z..

000de15c <_ZTV15Adafruit_BNO055>:
	...
   de164:	6a39 000d 6a7d 000d 6a37 000d 7019 000d     9j..}j..7j...p..
   de174:	6a3d 000d                                   =j..

000de178 <_ZTV17Adafruit_GrayOLED>:
	...
   de188:	7a8d 000d 8bd1 000d 706b 000d 7495 000d     .z......kp...t..
   de198:	7497 000d 74c9 000d 74a5 000d 74b7 000d     .t...t...t...t..
   de1a8:	73d9 000d 7495 000d 76c1 000d 7267 000d     .s...t...v..gr..
   de1b8:	74e1 000d 751f 000d 7559 000d 759f 000d     .t...u..Yu...u..
   de1c8:	763d 000d 75bb 000d 40a5 000d               =v...u...@..

000de1d4 <_ZL4font>:
   de1d4:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   de1e4:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   de1f4:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   de204:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   de214:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   de224:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   de234:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   de244:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   de254:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   de264:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   de274:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   de284:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   de294:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   de2a4:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   de2b4:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   de2c4:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   de2d4:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   de2e4:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   de2f4:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   de304:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   de314:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   de324:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   de334:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   de344:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   de354:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   de364:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   de374:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   de384:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   de394:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   de3a4:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   de3b4:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   de3c4:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   de3d4:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   de3e4:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   de3f4:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   de404:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   de414:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   de424:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   de434:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   de444:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   de454:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   de464:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   de474:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   de484:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   de494:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   de4a4:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   de4b4:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   de4c4:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   de4d4:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   de4e4:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   de4f4:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   de504:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   de514:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   de524:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   de534:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   de544:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   de554:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   de564:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   de574:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   de584:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   de594:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   de5a4:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   de5b4:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   de5c4:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   de5d4:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   de5e4:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   de5f4:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   de604:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   de614:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   de624:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   de634:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   de644:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   de654:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   de664:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   de674:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   de684:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   de694:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   de6a4:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   de6b4:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   de6c4:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000de6d4 <_ZTV12Adafruit_GFX>:
	...
   de6e4:	7a8d 000d 8bd1 000d 40a5 000d 7495 000d     .z.......@...t..
   de6f4:	7497 000d 74c9 000d 74a5 000d 74b7 000d     .t...t...t...t..
   de704:	73d9 000d 7495 000d 76c1 000d 763b 000d     .s...t...v..;v..
   de714:	74e1 000d 751f 000d 7559 000d 759f 000d     .t...u..Yu...u..
   de724:	763d 000d 75bb 000d                         =v...u..

000de72c <_ZTV15Adafruit_SH110X>:
	...
   de734:	40a5 000d 40a5 000d 7a8d 000d 8bd1 000d     .@...@...z......
   de744:	706b 000d 7495 000d 7497 000d 74c9 000d     kp...t...t...t..
   de754:	74a5 000d 74b7 000d 73d9 000d 7495 000d     .t...t...s...t..
   de764:	76c1 000d 7267 000d 74e1 000d 751f 000d     .v..gr...t...u..
   de774:	7559 000d 759f 000d 763d 000d 75bb 000d     Yu...u..=v...u..
   de784:	7b9b 000d                                   .{..

000de788 <_ZL12splash2_data>:
   de788:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   de798:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   de7a8:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   de7c4:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   de7d4:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   de7e4:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   de7f4:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   de804:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   de814:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   de824:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   de834:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   de844:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   de854:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   de864:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   de874:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   de884:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   de894:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   de8a4:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   de8b4:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   de8c4:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   de8d4:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   de8e4:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   de8f4:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   de904:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   de91c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   de92c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   de93c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   de94c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   de95c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000de968 <_ZTV15Adafruit_SH1107>:
	...
   de970:	7d39 000d 7d4d 000d 7a8d 000d 8bd1 000d     9}..M}...z......
   de980:	706b 000d 7495 000d 7497 000d 74c9 000d     kp...t...t...t..
   de990:	74a5 000d 74b7 000d 73d9 000d 7495 000d     .t...t...s...t..
   de9a0:	76c1 000d 7267 000d 74e1 000d 751f 000d     .v..gr...t...u..
   de9b0:	7559 000d 759f 000d 763d 000d 75bb 000d     Yu...u..=v...u..
   de9c0:	7b9b 000d                                   .{..

000de9c4 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   de9c4:	00d3 7fa8                                   ....

000de9c8 <_ZZN15Adafruit_SH11075beginEhbE4init>:
   de9c8:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
   de9d8:	35db 3fa8 a6a4 0000                         .5.?....

000de9e0 <_ZTVN5spark13EthernetClassE>:
	...
   de9e8:	879f 000d 8795 000d 878b 000d 8781 000d     ................
   de9f8:	8775 000d 8769 000d 9bfb 000d 9c03 000d     u...i...........
   dea08:	875d 000d 8755 000d 874b 000d 8741 000d     ]...U...K...A...
   dea18:	9c33 000d                                   3...

000dea1c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dea1c:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   dea2c:	766f 0066 7061 0070 5925 252d 2d6d 6425     ovf.app.%Y-%m-%d
   dea3c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   dea4c:	6d69 0065                                   ime.

000dea50 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dea58:	9181 000d 9187 000d 91c5 000d 9195 000d     ................
   dea68:	9183 000d                                   ....

000dea6c <_ZTV9IPAddress>:
	...
   dea74:	96c9 000d 96b9 000d 96bb 000d               ............

000dea80 <_ZTV9USBSerial>:
	...
   dea88:	97a1 000d 9809 000d 97df 000d 8bd1 000d     ................
   dea98:	97d1 000d 97a3 000d 97b3 000d 9803 000d     ................
   deaa8:	97c3 000d 979b 000d                         ........

000deab0 <_ZTVN5spark13CellularClassE>:
	...
   deab8:	9967 000d 995d 000d 9953 000d 9909 000d     g...]...S.......
   deac8:	9947 000d 993b 000d 9bfb 000d 9c03 000d     G...;...........
   dead8:	992f 000d 9927 000d 991d 000d 9913 000d     /...'...........
   deae8:	9c33 000d                                   3...

000deaec <_ZTV11USARTSerial>:
	...
   deaf4:	99a1 000d 9a0f 000d 99e7 000d 8bd1 000d     ................
   deb04:	99b7 000d 99d3 000d 99c5 000d 99e1 000d     ................
   deb14:	99a3 000d 99a9 000d                         ........

000deb1c <_ZTV7TwoWire>:
	...
   deb24:	9abd 000d 9b07 000d 9adf 000d 9abf 000d     ................
   deb34:	9ae7 000d 9aef 000d 9af7 000d 9aff 000d     ................

000deb44 <_ZTVN5spark12NetworkClassE>:
	...
   deb4c:	9bbb 000d 9bc5 000d 9bcf 000d 9bd9 000d     ................
   deb5c:	9be3 000d 9bef 000d 9bfb 000d 9c03 000d     ................
   deb6c:	9c0b 000d 9c17 000d 9c1f 000d 9c29 000d     ............)...
   deb7c:	9c33 000d                                   3...

000deb80 <_ZSt7nothrow>:
   deb80:	0000 0000 6f70 0077                         ....pow.

000deb88 <CSWTCH.8>:
   deb88:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   deb98:	21d2 7f33 d97c c002                         .!3.|...

000deba0 <CSWTCH.9>:
   deba0:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   debb0:	2d18 5444 21fb c009 0000 0000               .-DT.!......

000debbc <CSWTCH.8>:
   debbc:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000debc8 <CSWTCH.9>:
   debc8:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000debd4 <npio2_hw>:
   debd4:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   debe4:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   debf4:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   dec04:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   dec14:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   dec24:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   dec34:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   dec44:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000dec54 <two_over_pi>:
   dec54:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   dec64:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   dec74:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   dec84:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   dec94:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   deca4:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   decb4:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   decc4:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   decd4:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   dece4:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   decf4:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   ded04:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   ded14:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   ded24:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   ded34:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   ded44:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   ded54:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   ded64:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   ded74:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   ded84:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   ded94:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   deda4:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   dedb4:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   dedc4:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   dedd4:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   dede4:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   dedf4:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   dee04:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   dee14:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   dee24:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   dee34:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   dee44:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   dee54:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   dee64:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   dee74:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   dee84:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   dee94:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   deea4:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   deeb4:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   deec4:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   deed4:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   deee4:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   deef4:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   def04:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   def14:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   def24:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   def34:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   def44:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   def54:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   def64:	008c 0000 006b 0000                         ....k...

000def6c <PIo2>:
   def6c:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   def7c:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   def8c:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000def98 <init_jk>:
   def98:	0004 0000 0007 0000 0009 0000 0000 0000     ................

000defa8 <atanhi>:
   defa8:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   defb8:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000defc8 <atanlo>:
   defc8:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   defd8:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000defe8 <TWO52>:
   defe8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000deff8 <atanhi>:
   deff8:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000df008 <atanlo>:
   df008:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3

000df018 <link_const_variable_data_end>:
   df018:	000d5189 	.word	0x000d5189
   df01c:	000d87a9 	.word	0x000d87a9
   df020:	000d8941 	.word	0x000d8941
   df024:	000d8bc1 	.word	0x000d8bc1
   df028:	000d8f51 	.word	0x000d8f51
   df02c:	000d8fd5 	.word	0x000d8fd5
   df030:	000d903d 	.word	0x000d903d
   df034:	000d9971 	.word	0x000d9971
   df038:	000d9d05 	.word	0x000d9d05

000df03c <link_constructors_end>:
   df03c:	00000000 	.word	0x00000000
