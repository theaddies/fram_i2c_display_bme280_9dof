
z:/Personal/Electronics/particle/fram_i2c_display_bme280_9dof/target/2.2.0/boron/fram_i2c_display_bme280_9dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a970  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000de990  000de990  0000e990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000de998  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e3d4  000de99c  0001e3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003a8  2003e448  2003e448  0002e448  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000dea10  000dea10  0001ea10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dea38  000dea38  0001ea38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0020b371  00000000  00000000  0001ea3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001fc5d  00000000  00000000  00229dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00039628  00000000  00000000  00249a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002f48  00000000  00000000  00283032  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00008750  00000000  00000000  00285f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00045446  00000000  00000000  0028e6ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00052ef1  00000000  00000000  002d3b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001139a8  00000000  00000000  00326a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00009064  00000000  00000000  0043a3ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f009 f8c5 	bl	dd1c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f009 f8cd 	bl	dd1dc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e3d4 	.word	0x2003e3d4
   d404c:	000de99c 	.word	0x000de99c
   d4050:	2003e448 	.word	0x2003e448
   d4054:	2003e448 	.word	0x2003e448
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fd51 	bl	d8b08 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000de960 	.word	0x000de960
   d4080:	000de984 	.word	0x000de984

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b9f2 	b.w	d546c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 f8b7 	bl	d51fc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 bcf1 	b.w	d8a78 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b809 	b.w	d80ac <malloc>

000d409a <_Znaj>:
   d409a:	f004 b807 	b.w	d80ac <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b80d 	b.w	d80bc <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 ff2a 	bl	d7f04 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7c05 	.word	0x000d7c05

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z12isr_rotationv>:
else
Serial.println("N");
} 

// This is the function that the interrupt calls to increment the rotation count
void isr_rotation () {
   d40c8:	b510      	push	{r4, lr}

if ((millis() - ContactBounceTime) > 15 ) { // debounce the switch contact.
   d40ca:	4c07      	ldr	r4, [pc, #28]	; (d40e8 <_Z12isr_rotationv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40cc:	f003 fda2 	bl	d7c14 <HAL_Timer_Get_Milli_Seconds>
   d40d0:	6823      	ldr	r3, [r4, #0]
   d40d2:	1ac0      	subs	r0, r0, r3
   d40d4:	280f      	cmp	r0, #15
   d40d6:	d906      	bls.n	d40e6 <_Z12isr_rotationv+0x1e>
Rotations++;
   d40d8:	4a04      	ldr	r2, [pc, #16]	; (d40ec <_Z12isr_rotationv+0x24>)
   d40da:	6813      	ldr	r3, [r2, #0]
   d40dc:	3301      	adds	r3, #1
   d40de:	6013      	str	r3, [r2, #0]
   d40e0:	f003 fd98 	bl	d7c14 <HAL_Timer_Get_Milli_Seconds>
ContactBounceTime = millis();
   d40e4:	6020      	str	r0, [r4, #0]
}

}
   d40e6:	bd10      	pop	{r4, pc}
   d40e8:	2003e44c 	.word	0x2003e44c
   d40ec:	2003e458 	.word	0x2003e458

000d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d40f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d40f4:	2a00      	cmp	r2, #0
size_t Print::print(T n, int base)
   d40f6:	461d      	mov	r5, r3
        if (n < 0 && base == 10) {
   d40f8:	f175 0300 	sbcs.w	r3, r5, #0
size_t Print::print(T n, int base)
   d40fc:	9f08      	ldr	r7, [sp, #32]
   d40fe:	4680      	mov	r8, r0
   d4100:	4614      	mov	r4, r2
        if (n < 0 && base == 10) {
   d4102:	da11      	bge.n	d4128 <_ZN5Print5printIxLi0EEEjT_i.part.0+0x38>
   d4104:	2f0a      	cmp	r7, #10
   d4106:	d10f      	bne.n	d4128 <_ZN5Print5printIxLi0EEEjT_i.part.0+0x38>
            t = print('-');
   d4108:	212d      	movs	r1, #45	; 0x2d
   d410a:	f004 fa83 	bl	d8614 <_ZN5Print5printEc>
            val = -n;
   d410e:	4262      	negs	r2, r4
            t = print('-');
   d4110:	4606      	mov	r6, r0
            val = -n;
   d4112:	eb65 0345 	sbc.w	r3, r5, r5, lsl #1
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4116:	b2ff      	uxtb	r7, r7
   d4118:	9700      	str	r7, [sp, #0]
   d411a:	4640      	mov	r0, r8
   d411c:	f004 fab7 	bl	d868e <_ZN5Print11printNumberEyh>
    }
}
   d4120:	4430      	add	r0, r6
   d4122:	b002      	add	sp, #8
   d4124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
   d4128:	4622      	mov	r2, r4
   d412a:	462b      	mov	r3, r5
        size_t t = 0;
   d412c:	2600      	movs	r6, #0
   d412e:	e7f2      	b.n	d4116 <_ZN5Print5printIxLi0EEEjT_i.part.0+0x26>

000d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>:
size_t Print::print(T n, int base)
   d4130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n < 0 && base == 10) {
   d4132:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d4134:	4607      	mov	r7, r0
   d4136:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d4138:	da0c      	bge.n	d4154 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x24>
   d413a:	2a0a      	cmp	r2, #10
   d413c:	d10a      	bne.n	d4154 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d413e:	212d      	movs	r1, #45	; 0x2d
   d4140:	f004 fa68 	bl	d8614 <_ZN5Print5printEc>
            val = -n;
   d4144:	4261      	negs	r1, r4
            t = print('-');
   d4146:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
   d4148:	b2f2      	uxtb	r2, r6
   d414a:	4638      	mov	r0, r7
   d414c:	f004 fa81 	bl	d8652 <_ZN5Print11printNumberEmh>
}
   d4150:	4428      	add	r0, r5
   d4152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d4154:	4621      	mov	r1, r4
        size_t t = 0;
   d4156:	2500      	movs	r5, #0
   d4158:	e7f6      	b.n	d4148 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x18>

000d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>:
size_t Print::print(T n, int base)
   d415a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n < 0 && base == 10) {
   d415c:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d415e:	4607      	mov	r7, r0
   d4160:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d4162:	da0c      	bge.n	d417e <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
   d4164:	2a0a      	cmp	r2, #10
   d4166:	d10a      	bne.n	d417e <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d4168:	212d      	movs	r1, #45	; 0x2d
   d416a:	f004 fa53 	bl	d8614 <_ZN5Print5printEc>
            val = -n;
   d416e:	4261      	negs	r1, r4
            t = print('-');
   d4170:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
   d4172:	b2f2      	uxtb	r2, r6
   d4174:	4638      	mov	r0, r7
   d4176:	f004 fa6c 	bl	d8652 <_ZN5Print11printNumberEmh>
}
   d417a:	4428      	add	r0, r5
   d417c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d417e:	4621      	mov	r1, r4
        size_t t = 0;
   d4180:	2500      	movs	r5, #0
   d4182:	e7f6      	b.n	d4172 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x18>

000d4184 <_Z11printValuesv>:
void printValues() {
   d4184:	b538      	push	{r3, r4, r5, lr}
    Serial.print("\n\nTemperature = ");
   d4186:	f005 f863 	bl	d9250 <_Z16_fetch_usbserialv>
   d418a:	4936      	ldr	r1, [pc, #216]	; (d4264 <_Z11printValuesv+0xe0>)
    Serial.print(bme.readTemperature()*1.8F + 32.);
   d418c:	4c36      	ldr	r4, [pc, #216]	; (d4268 <_Z11printValuesv+0xe4>)
    Serial.print("\n\nTemperature = ");
   d418e:	f004 fa3d 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature()*1.8F + 32.);
   d4192:	f005 f85d 	bl	d9250 <_Z16_fetch_usbserialv>
   d4196:	4605      	mov	r5, r0
   d4198:	4620      	mov	r0, r4
   d419a:	f001 fccb 	bl	d5b34 <_ZN15Adafruit_BME28015readTemperatureEv>
   d419e:	eddf 7a33 	vldr	s15, [pc, #204]	; d426c <_Z11printValuesv+0xe8>
   d41a2:	ee60 7a27 	vmul.f32	s15, s0, s15
   d41a6:	ee17 0a90 	vmov	r0, s15
   d41aa:	f008 f96b 	bl	dc484 <__aeabi_f2d>
   d41ae:	4b30      	ldr	r3, [pc, #192]	; (d4270 <_Z11printValuesv+0xec>)
   d41b0:	2200      	movs	r2, #0
   d41b2:	f008 f809 	bl	dc1c8 <__adddf3>
   d41b6:	ec41 0b10 	vmov	d0, r0, r1
   d41ba:	2102      	movs	r1, #2
   d41bc:	4628      	mov	r0, r5
   d41be:	f004 fb6e 	bl	d889e <_ZN5Print5printEdi>
    Serial.println(" F");
   d41c2:	f005 f845 	bl	d9250 <_Z16_fetch_usbserialv>
   d41c6:	492b      	ldr	r1, [pc, #172]	; (d4274 <_Z11printValuesv+0xf0>)
   d41c8:	f004 fa37 	bl	d863a <_ZN5Print7printlnEPKc>
    Serial.print("Pressure = ");
   d41cc:	f005 f840 	bl	d9250 <_Z16_fetch_usbserialv>
   d41d0:	4929      	ldr	r1, [pc, #164]	; (d4278 <_Z11printValuesv+0xf4>)
   d41d2:	f004 fa1b 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(bme.readPressure() / 101325.0F * 760.0F);
   d41d6:	f005 f83b 	bl	d9250 <_Z16_fetch_usbserialv>
   d41da:	4605      	mov	r5, r0
   d41dc:	4620      	mov	r0, r4
   d41de:	f001 fcd7 	bl	d5b90 <_ZN15Adafruit_BME28012readPressureEv>
   d41e2:	eddf 7a26 	vldr	s15, [pc, #152]	; d427c <_Z11printValuesv+0xf8>
   d41e6:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d41ea:	2102      	movs	r1, #2
   d41ec:	4628      	mov	r0, r5
   d41ee:	ed9f 0a24 	vldr	s0, [pc, #144]	; d4280 <_Z11printValuesv+0xfc>
   d41f2:	ee27 0a00 	vmul.f32	s0, s14, s0
   d41f6:	f004 fb43 	bl	d8880 <_ZN5Print5printEfi>
    Serial.println(" mmHg");
   d41fa:	f005 f829 	bl	d9250 <_Z16_fetch_usbserialv>
   d41fe:	4921      	ldr	r1, [pc, #132]	; (d4284 <_Z11printValuesv+0x100>)
   d4200:	f004 fa1b 	bl	d863a <_ZN5Print7printlnEPKc>
    Serial.print("Approx. Altitude = ");
   d4204:	f005 f824 	bl	d9250 <_Z16_fetch_usbserialv>
   d4208:	491f      	ldr	r1, [pc, #124]	; (d4288 <_Z11printValuesv+0x104>)
   d420a:	f004 f9ff 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d420e:	f005 f81f 	bl	d9250 <_Z16_fetch_usbserialv>
   d4212:	ed9f 0a1e 	vldr	s0, [pc, #120]	; d428c <_Z11printValuesv+0x108>
   d4216:	4605      	mov	r5, r0
   d4218:	4620      	mov	r0, r4
   d421a:	f001 fd95 	bl	d5d48 <_ZN15Adafruit_BME28012readAltitudeEf>
   d421e:	2102      	movs	r1, #2
   d4220:	4628      	mov	r0, r5
   d4222:	f004 fb2d 	bl	d8880 <_ZN5Print5printEfi>
    Serial.println(" m");
   d4226:	f005 f813 	bl	d9250 <_Z16_fetch_usbserialv>
   d422a:	4919      	ldr	r1, [pc, #100]	; (d4290 <_Z11printValuesv+0x10c>)
   d422c:	f004 fa05 	bl	d863a <_ZN5Print7printlnEPKc>
    Serial.print("Humidity = ");
   d4230:	f005 f80e 	bl	d9250 <_Z16_fetch_usbserialv>
   d4234:	4917      	ldr	r1, [pc, #92]	; (d4294 <_Z11printValuesv+0x110>)
   d4236:	f004 f9e9 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d423a:	f005 f809 	bl	d9250 <_Z16_fetch_usbserialv>
   d423e:	4605      	mov	r5, r0
   d4240:	4620      	mov	r0, r4
   d4242:	f001 fe21 	bl	d5e88 <_ZN15Adafruit_BME28012readHumidityEv>
   d4246:	2102      	movs	r1, #2
   d4248:	4628      	mov	r0, r5
   d424a:	f004 fb19 	bl	d8880 <_ZN5Print5printEfi>
    Serial.println(" %");
   d424e:	f004 ffff 	bl	d9250 <_Z16_fetch_usbserialv>
   d4252:	4911      	ldr	r1, [pc, #68]	; (d4298 <_Z11printValuesv+0x114>)
   d4254:	f004 f9f1 	bl	d863a <_ZN5Print7printlnEPKc>
    Serial.println();
   d4258:	f004 fffa 	bl	d9250 <_Z16_fetch_usbserialv>
}
   d425c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println();
   d4260:	f004 b9df 	b.w	d8622 <_ZN5Print7printlnEv>
   d4264:	000dd384 	.word	0x000dd384
   d4268:	2003e470 	.word	0x2003e470
   d426c:	3fe66666 	.word	0x3fe66666
   d4270:	40400000 	.word	0x40400000
   d4274:	000dd395 	.word	0x000dd395
   d4278:	000dd398 	.word	0x000dd398
   d427c:	47c5e680 	.word	0x47c5e680
   d4280:	443e0000 	.word	0x443e0000
   d4284:	000dd3a4 	.word	0x000dd3a4
   d4288:	000dd3aa 	.word	0x000dd3aa
   d428c:	447d5000 	.word	0x447d5000
   d4290:	000dd3be 	.word	0x000dd3be
   d4294:	000dd3c1 	.word	0x000dd3c1
   d4298:	000dd3cd 	.word	0x000dd3cd

000d429c <_Z20displaySensorDetailsv>:
{
   d429c:	b530      	push	{r4, r5, lr}
  Serial.println("------------------------------------");
   d429e:	4d3b      	ldr	r5, [pc, #236]	; (d438c <_Z20displaySensorDetailsv+0xf0>)
  bno.getSensor(&sensor);
   d42a0:	483b      	ldr	r0, [pc, #236]	; (d4390 <_Z20displaySensorDetailsv+0xf4>)
{
   d42a2:	b08b      	sub	sp, #44	; 0x2c
  bno.getSensor(&sensor);
   d42a4:	4669      	mov	r1, sp
   d42a6:	f002 f9ed 	bl	d6684 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
  Serial.println("------------------------------------");
   d42aa:	f004 ffd1 	bl	d9250 <_Z16_fetch_usbserialv>
   d42ae:	4629      	mov	r1, r5
   d42b0:	f004 f9c3 	bl	d863a <_ZN5Print7printlnEPKc>
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
   d42b4:	f004 ffcc 	bl	d9250 <_Z16_fetch_usbserialv>
   d42b8:	4936      	ldr	r1, [pc, #216]	; (d4394 <_Z20displaySensorDetailsv+0xf8>)
   d42ba:	f004 f9a7 	bl	d860c <_ZN5Print5printEPKc>
   d42be:	f004 ffc7 	bl	d9250 <_Z16_fetch_usbserialv>
   d42c2:	4669      	mov	r1, sp
   d42c4:	f004 f9b9 	bl	d863a <_ZN5Print7printlnEPKc>
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
   d42c8:	f004 ffc2 	bl	d9250 <_Z16_fetch_usbserialv>
   d42cc:	4932      	ldr	r1, [pc, #200]	; (d4398 <_Z20displaySensorDetailsv+0xfc>)
   d42ce:	f004 f99d 	bl	d860c <_ZN5Print5printEPKc>
   d42d2:	f004 ffbd 	bl	d9250 <_Z16_fetch_usbserialv>
   d42d6:	220a      	movs	r2, #10
   d42d8:	9903      	ldr	r1, [sp, #12]
   d42da:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   d42dc:	f7ff ff28 	bl	d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>
        n += println();
   d42e0:	4620      	mov	r0, r4
   d42e2:	f004 f99e 	bl	d8622 <_ZN5Print7printlnEv>
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
   d42e6:	f004 ffb3 	bl	d9250 <_Z16_fetch_usbserialv>
   d42ea:	492c      	ldr	r1, [pc, #176]	; (d439c <_Z20displaySensorDetailsv+0x100>)
   d42ec:	f004 f98e 	bl	d860c <_ZN5Print5printEPKc>
   d42f0:	f004 ffae 	bl	d9250 <_Z16_fetch_usbserialv>
   d42f4:	220a      	movs	r2, #10
   d42f6:	9904      	ldr	r1, [sp, #16]
   d42f8:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   d42fa:	f7ff ff19 	bl	d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>
        n += println();
   d42fe:	4620      	mov	r0, r4
   d4300:	f004 f98f 	bl	d8622 <_ZN5Print7printlnEv>
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" xxx");
   d4304:	4c26      	ldr	r4, [pc, #152]	; (d43a0 <_Z20displaySensorDetailsv+0x104>)
   d4306:	f004 ffa3 	bl	d9250 <_Z16_fetch_usbserialv>
   d430a:	4926      	ldr	r1, [pc, #152]	; (d43a4 <_Z20displaySensorDetailsv+0x108>)
   d430c:	f004 f97e 	bl	d860c <_ZN5Print5printEPKc>
   d4310:	f004 ff9e 	bl	d9250 <_Z16_fetch_usbserialv>
   d4314:	ed9d 0a06 	vldr	s0, [sp, #24]
   d4318:	2102      	movs	r1, #2
   d431a:	f004 fab1 	bl	d8880 <_ZN5Print5printEfi>
   d431e:	f004 ff97 	bl	d9250 <_Z16_fetch_usbserialv>
   d4322:	4621      	mov	r1, r4
   d4324:	f004 f989 	bl	d863a <_ZN5Print7printlnEPKc>
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" xxx");
   d4328:	f004 ff92 	bl	d9250 <_Z16_fetch_usbserialv>
   d432c:	491e      	ldr	r1, [pc, #120]	; (d43a8 <_Z20displaySensorDetailsv+0x10c>)
   d432e:	f004 f96d 	bl	d860c <_ZN5Print5printEPKc>
   d4332:	f004 ff8d 	bl	d9250 <_Z16_fetch_usbserialv>
   d4336:	ed9d 0a07 	vldr	s0, [sp, #28]
   d433a:	2102      	movs	r1, #2
   d433c:	f004 faa0 	bl	d8880 <_ZN5Print5printEfi>
   d4340:	f004 ff86 	bl	d9250 <_Z16_fetch_usbserialv>
   d4344:	4621      	mov	r1, r4
   d4346:	f004 f978 	bl	d863a <_ZN5Print7printlnEPKc>
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" xxx");
   d434a:	f004 ff81 	bl	d9250 <_Z16_fetch_usbserialv>
   d434e:	4917      	ldr	r1, [pc, #92]	; (d43ac <_Z20displaySensorDetailsv+0x110>)
   d4350:	f004 f95c 	bl	d860c <_ZN5Print5printEPKc>
   d4354:	f004 ff7c 	bl	d9250 <_Z16_fetch_usbserialv>
   d4358:	ed9d 0a08 	vldr	s0, [sp, #32]
   d435c:	2102      	movs	r1, #2
   d435e:	f004 fa8f 	bl	d8880 <_ZN5Print5printEfi>
   d4362:	f004 ff75 	bl	d9250 <_Z16_fetch_usbserialv>
   d4366:	4621      	mov	r1, r4
   d4368:	f004 f967 	bl	d863a <_ZN5Print7printlnEPKc>
  Serial.println("------------------------------------");
   d436c:	f004 ff70 	bl	d9250 <_Z16_fetch_usbserialv>
   d4370:	4629      	mov	r1, r5
   d4372:	f004 f962 	bl	d863a <_ZN5Print7printlnEPKc>
  Serial.println("");
   d4376:	f004 ff6b 	bl	d9250 <_Z16_fetch_usbserialv>
   d437a:	490d      	ldr	r1, [pc, #52]	; (d43b0 <_Z20displaySensorDetailsv+0x114>)
   d437c:	f004 f95d 	bl	d863a <_ZN5Print7printlnEPKc>
  delay(500);
   d4380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4384:	f004 fb32 	bl	d89ec <delay>
}
   d4388:	b00b      	add	sp, #44	; 0x2c
   d438a:	bd30      	pop	{r4, r5, pc}
   d438c:	000dd3d0 	.word	0x000dd3d0
   d4390:	2003e4b4 	.word	0x2003e4b4
   d4394:	000dd3f5 	.word	0x000dd3f5
   d4398:	000dd404 	.word	0x000dd404
   d439c:	000dd413 	.word	0x000dd413
   d43a0:	000dd431 	.word	0x000dd431
   d43a4:	000dd422 	.word	0x000dd422
   d43a8:	000dd436 	.word	0x000dd436
   d43ac:	000dd445 	.word	0x000dd445
   d43b0:	000dd54e 	.word	0x000dd54e

000d43b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>:
{
   d43b4:	b538      	push	{r3, r4, r5, lr}
   d43b6:	4604      	mov	r4, r0
    Serial.println("\nCalibration offsets \n");
   d43b8:	f004 ff4a 	bl	d9250 <_Z16_fetch_usbserialv>
   d43bc:	494c      	ldr	r1, [pc, #304]	; (d44f0 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x13c>)
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   d43be:	4d4d      	ldr	r5, [pc, #308]	; (d44f4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x140>)
    Serial.println("\nCalibration offsets \n");
   d43c0:	f004 f93b 	bl	d863a <_ZN5Print7printlnEPKc>
    Serial.print("Accelerometer: ");
   d43c4:	f004 ff44 	bl	d9250 <_Z16_fetch_usbserialv>
   d43c8:	494b      	ldr	r1, [pc, #300]	; (d44f8 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x144>)
   d43ca:	f004 f91f 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   d43ce:	f004 ff3f 	bl	d9250 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d43d2:	220a      	movs	r2, #10
   d43d4:	f9b4 1000 	ldrsh.w	r1, [r4]
   d43d8:	f7ff febf 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43dc:	f004 ff38 	bl	d9250 <_Z16_fetch_usbserialv>
   d43e0:	4629      	mov	r1, r5
   d43e2:	f004 f913 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_y); Serial.print(" ");
   d43e6:	f004 ff33 	bl	d9250 <_Z16_fetch_usbserialv>
   d43ea:	220a      	movs	r2, #10
   d43ec:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   d43f0:	f7ff feb3 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d43f4:	f004 ff2c 	bl	d9250 <_Z16_fetch_usbserialv>
   d43f8:	4629      	mov	r1, r5
   d43fa:	f004 f907 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_z); Serial.print(" ");
   d43fe:	f004 ff27 	bl	d9250 <_Z16_fetch_usbserialv>
   d4402:	220a      	movs	r2, #10
   d4404:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   d4408:	f7ff fea7 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d440c:	f004 ff20 	bl	d9250 <_Z16_fetch_usbserialv>
   d4410:	4629      	mov	r1, r5
   d4412:	f004 f8fb 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print("\nGyro: ");
   d4416:	f004 ff1b 	bl	d9250 <_Z16_fetch_usbserialv>
   d441a:	4938      	ldr	r1, [pc, #224]	; (d44fc <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x148>)
   d441c:	f004 f8f6 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_x); Serial.print(" ");
   d4420:	f004 ff16 	bl	d9250 <_Z16_fetch_usbserialv>
   d4424:	220a      	movs	r2, #10
   d4426:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   d442a:	f7ff fe96 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d442e:	f004 ff0f 	bl	d9250 <_Z16_fetch_usbserialv>
   d4432:	4629      	mov	r1, r5
   d4434:	f004 f8ea 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_y); Serial.print(" ");
   d4438:	f004 ff0a 	bl	d9250 <_Z16_fetch_usbserialv>
   d443c:	220a      	movs	r2, #10
   d443e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   d4442:	f7ff fe8a 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4446:	f004 ff03 	bl	d9250 <_Z16_fetch_usbserialv>
   d444a:	4629      	mov	r1, r5
   d444c:	f004 f8de 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_z); Serial.print(" ");
   d4450:	f004 fefe 	bl	d9250 <_Z16_fetch_usbserialv>
   d4454:	220a      	movs	r2, #10
   d4456:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d445a:	f7ff fe7e 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d445e:	f004 fef7 	bl	d9250 <_Z16_fetch_usbserialv>
   d4462:	4629      	mov	r1, r5
   d4464:	f004 f8d2 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print("\nMag: ");
   d4468:	f004 fef2 	bl	d9250 <_Z16_fetch_usbserialv>
   d446c:	4924      	ldr	r1, [pc, #144]	; (d4500 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x14c>)
   d446e:	f004 f8cd 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_x); Serial.print(" ");
   d4472:	f004 feed 	bl	d9250 <_Z16_fetch_usbserialv>
   d4476:	220a      	movs	r2, #10
   d4478:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   d447c:	f7ff fe6d 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4480:	f004 fee6 	bl	d9250 <_Z16_fetch_usbserialv>
   d4484:	4629      	mov	r1, r5
   d4486:	f004 f8c1 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_y); Serial.print(" ");
   d448a:	f004 fee1 	bl	d9250 <_Z16_fetch_usbserialv>
   d448e:	220a      	movs	r2, #10
   d4490:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d4494:	f7ff fe61 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4498:	f004 feda 	bl	d9250 <_Z16_fetch_usbserialv>
   d449c:	4629      	mov	r1, r5
   d449e:	f004 f8b5 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_z); Serial.print(" ");
   d44a2:	f004 fed5 	bl	d9250 <_Z16_fetch_usbserialv>
   d44a6:	220a      	movs	r2, #10
   d44a8:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d44ac:	f7ff fe55 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d44b0:	f004 fece 	bl	d9250 <_Z16_fetch_usbserialv>
   d44b4:	4629      	mov	r1, r5
   d44b6:	f004 f8a9 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print("\nAccel Radius: ");
   d44ba:	f004 fec9 	bl	d9250 <_Z16_fetch_usbserialv>
   d44be:	4911      	ldr	r1, [pc, #68]	; (d4504 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x150>)
   d44c0:	f004 f8a4 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_radius);
   d44c4:	f004 fec4 	bl	d9250 <_Z16_fetch_usbserialv>
   d44c8:	220a      	movs	r2, #10
   d44ca:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
   d44ce:	f7ff fe44 	bl	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
    Serial.print("\nMag Radius: ");
   d44d2:	f004 febd 	bl	d9250 <_Z16_fetch_usbserialv>
   d44d6:	490c      	ldr	r1, [pc, #48]	; (d4508 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x154>)
   d44d8:	f004 f898 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_radius);
   d44dc:	f004 feb8 	bl	d9250 <_Z16_fetch_usbserialv>
   d44e0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
   d44e4:	220a      	movs	r2, #10
}
   d44e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d44ea:	f7ff be36 	b.w	d415a <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d44ee:	bf00      	nop
   d44f0:	000dd454 	.word	0x000dd454
   d44f4:	000dd402 	.word	0x000dd402
   d44f8:	000dd46b 	.word	0x000dd46b
   d44fc:	000dd47b 	.word	0x000dd47b
   d4500:	000dd483 	.word	0x000dd483
   d4504:	000dd48a 	.word	0x000dd48a
   d4508:	000dd49a 	.word	0x000dd49a

000d450c <_Z10getHeadingi>:
if(direction < 22)
   d450c:	2815      	cmp	r0, #21
void getHeading(int direction) {
   d450e:	b508      	push	{r3, lr}
if(direction < 22)
   d4510:	dc06      	bgt.n	d4520 <_Z10getHeadingi+0x14>
Serial.println("N");
   d4512:	f004 fe9d 	bl	d9250 <_Z16_fetch_usbserialv>
   d4516:	4918      	ldr	r1, [pc, #96]	; (d4578 <_Z10getHeadingi+0x6c>)
} 
   d4518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Serial.println("NW");
   d451c:	f004 b88d 	b.w	d863a <_ZN5Print7printlnEPKc>
else if (direction < 67)
   d4520:	2842      	cmp	r0, #66	; 0x42
   d4522:	dc03      	bgt.n	d452c <_Z10getHeadingi+0x20>
Serial.println("NE");
   d4524:	f004 fe94 	bl	d9250 <_Z16_fetch_usbserialv>
   d4528:	4914      	ldr	r1, [pc, #80]	; (d457c <_Z10getHeadingi+0x70>)
   d452a:	e7f5      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 112)
   d452c:	286f      	cmp	r0, #111	; 0x6f
   d452e:	dc03      	bgt.n	d4538 <_Z10getHeadingi+0x2c>
Serial.println("E");
   d4530:	f004 fe8e 	bl	d9250 <_Z16_fetch_usbserialv>
   d4534:	4912      	ldr	r1, [pc, #72]	; (d4580 <_Z10getHeadingi+0x74>)
   d4536:	e7ef      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 157)
   d4538:	289c      	cmp	r0, #156	; 0x9c
   d453a:	dc03      	bgt.n	d4544 <_Z10getHeadingi+0x38>
Serial.println("SE");
   d453c:	f004 fe88 	bl	d9250 <_Z16_fetch_usbserialv>
   d4540:	4910      	ldr	r1, [pc, #64]	; (d4584 <_Z10getHeadingi+0x78>)
   d4542:	e7e9      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 212)
   d4544:	28d3      	cmp	r0, #211	; 0xd3
   d4546:	dc03      	bgt.n	d4550 <_Z10getHeadingi+0x44>
Serial.println("S");
   d4548:	f004 fe82 	bl	d9250 <_Z16_fetch_usbserialv>
   d454c:	490e      	ldr	r1, [pc, #56]	; (d4588 <_Z10getHeadingi+0x7c>)
   d454e:	e7e3      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 247)
   d4550:	28f6      	cmp	r0, #246	; 0xf6
   d4552:	dc03      	bgt.n	d455c <_Z10getHeadingi+0x50>
Serial.println("SW");
   d4554:	f004 fe7c 	bl	d9250 <_Z16_fetch_usbserialv>
   d4558:	490c      	ldr	r1, [pc, #48]	; (d458c <_Z10getHeadingi+0x80>)
   d455a:	e7dd      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 292)
   d455c:	f5b0 7f92 	cmp.w	r0, #292	; 0x124
   d4560:	da03      	bge.n	d456a <_Z10getHeadingi+0x5e>
Serial.println("W");
   d4562:	f004 fe75 	bl	d9250 <_Z16_fetch_usbserialv>
   d4566:	490a      	ldr	r1, [pc, #40]	; (d4590 <_Z10getHeadingi+0x84>)
   d4568:	e7d6      	b.n	d4518 <_Z10getHeadingi+0xc>
else if (direction < 337)
   d456a:	f5b0 7fa8 	cmp.w	r0, #336	; 0x150
   d456e:	dcd0      	bgt.n	d4512 <_Z10getHeadingi+0x6>
Serial.println("NW");
   d4570:	f004 fe6e 	bl	d9250 <_Z16_fetch_usbserialv>
   d4574:	4907      	ldr	r1, [pc, #28]	; (d4594 <_Z10getHeadingi+0x88>)
   d4576:	e7cf      	b.n	d4518 <_Z10getHeadingi+0xc>
   d4578:	000dd4a8 	.word	0x000dd4a8
   d457c:	000dd4aa 	.word	0x000dd4aa
   d4580:	000dd4ab 	.word	0x000dd4ab
   d4584:	000dd4ad 	.word	0x000dd4ad
   d4588:	000dd4b0 	.word	0x000dd4b0
   d458c:	000dd4b2 	.word	0x000dd4b2
   d4590:	000dd4b6 	.word	0x000dd4b6
   d4594:	000dd4b5 	.word	0x000dd4b5

000d4598 <_Z11eeprom_testv>:
 
 return(psi);
//delay(BNO055_SAMPLERATE_DELAY_MS);
}

void eeprom_test(){
   d4598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t max_addr;
  //variables for calibration read from memory
int test = 55;
      // Try to determine the size by writing a value and seeing if it changes the first byte
  Serial.println("Testing size!");
   d459c:	f004 fe58 	bl	d9250 <_Z16_fetch_usbserialv>
   d45a0:	492e      	ldr	r1, [pc, #184]	; (d465c <_Z11eeprom_testv+0xc4>)
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
    if (i2ceeprom.read(max_addr) != test)
   d45a2:	4d2f      	ldr	r5, [pc, #188]	; (d4660 <_Z11eeprom_testv+0xc8>)
    // read address 0x0 again
    uint8_t val0 = i2ceeprom.read(0);

    // re-write the old value
    if (! i2ceeprom.write(max_addr, test)) {
        Serial.print("Failed to re-write address 0x");
   d45a4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; d4670 <_Z11eeprom_testv+0xd8>
        Serial.print("Failed to write address 0x");
   d45a8:	f8df 90c8 	ldr.w	r9, [pc, #200]	; d4674 <_Z11eeprom_testv+0xdc>
  Serial.println("Testing size!");
   d45ac:	f004 f845 	bl	d863a <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
   d45b0:	2401      	movs	r4, #1
    if (i2ceeprom.read(max_addr) != test)
   d45b2:	b2a7      	uxth	r7, r4
   d45b4:	482a      	ldr	r0, [pc, #168]	; (d4660 <_Z11eeprom_testv+0xc8>)
   d45b6:	4639      	mov	r1, r7
   d45b8:	f003 fab8 	bl	d7b2c <_ZN19Adafruit_EEPROM_I2C4readEt>
   d45bc:	2837      	cmp	r0, #55	; 0x37
   d45be:	d147      	bne.n	d4650 <_Z11eeprom_testv+0xb8>
    if (! i2ceeprom.write(max_addr, (byte)~test)) {
   d45c0:	22c8      	movs	r2, #200	; 0xc8
   d45c2:	4639      	mov	r1, r7
   d45c4:	4628      	mov	r0, r5
   d45c6:	f003 fa8f 	bl	d7ae8 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   d45ca:	b970      	cbnz	r0, d45ea <_Z11eeprom_testv+0x52>
        Serial.print("Failed to write address 0x");
   d45cc:	f004 fe40 	bl	d9250 <_Z16_fetch_usbserialv>
   d45d0:	4649      	mov	r1, r9
   d45d2:	f004 f81b 	bl	d860c <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   d45d6:	f004 fe3b 	bl	d9250 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d45da:	2210      	movs	r2, #16
   d45dc:	4606      	mov	r6, r0
   d45de:	4621      	mov	r1, r4
   d45e0:	f004 f837 	bl	d8652 <_ZN5Print11printNumberEmh>
        n += println();
   d45e4:	4630      	mov	r0, r6
   d45e6:	f004 f81c 	bl	d8622 <_ZN5Print7printlnEv>
    uint8_t val0 = i2ceeprom.read(0);
   d45ea:	2100      	movs	r1, #0
   d45ec:	4628      	mov	r0, r5
   d45ee:	f003 fa9d 	bl	d7b2c <_ZN19Adafruit_EEPROM_I2C4readEt>
    if (! i2ceeprom.write(max_addr, test)) {
   d45f2:	2237      	movs	r2, #55	; 0x37
    uint8_t val0 = i2ceeprom.read(0);
   d45f4:	4606      	mov	r6, r0
    if (! i2ceeprom.write(max_addr, test)) {
   d45f6:	4639      	mov	r1, r7
   d45f8:	4628      	mov	r0, r5
   d45fa:	f003 fa75 	bl	d7ae8 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   d45fe:	b970      	cbnz	r0, d461e <_Z11eeprom_testv+0x86>
        Serial.print("Failed to re-write address 0x");
   d4600:	f004 fe26 	bl	d9250 <_Z16_fetch_usbserialv>
   d4604:	4641      	mov	r1, r8
   d4606:	f004 f801 	bl	d860c <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   d460a:	f004 fe21 	bl	d9250 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d460e:	2210      	movs	r2, #16
   d4610:	4607      	mov	r7, r0
   d4612:	4621      	mov	r1, r4
   d4614:	f004 f81d 	bl	d8652 <_ZN5Print11printNumberEmh>
        n += println();
   d4618:	4638      	mov	r0, r7
   d461a:	f004 f802 	bl	d8622 <_ZN5Print7printlnEv>
    }    

    // check if addr 0 was changed
    if (val0 == (byte)~test) {
   d461e:	2ec8      	cmp	r6, #200	; 0xc8
   d4620:	d116      	bne.n	d4650 <_Z11eeprom_testv+0xb8>
      Serial.println("Found max address");
   d4622:	f004 fe15 	bl	d9250 <_Z16_fetch_usbserialv>
   d4626:	490f      	ldr	r1, [pc, #60]	; (d4664 <_Z11eeprom_testv+0xcc>)
   d4628:	f004 f807 	bl	d863a <_ZN5Print7printlnEPKc>
      break;
    }
  }
  Serial.print("This EEPROM can store ");
   d462c:	f004 fe10 	bl	d9250 <_Z16_fetch_usbserialv>
   d4630:	490d      	ldr	r1, [pc, #52]	; (d4668 <_Z11eeprom_testv+0xd0>)
   d4632:	f003 ffeb 	bl	d860c <_ZN5Print5printEPKc>
  Serial.print(max_addr);
   d4636:	f004 fe0b 	bl	d9250 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d463a:	4621      	mov	r1, r4
   d463c:	220a      	movs	r2, #10
   d463e:	f004 f808 	bl	d8652 <_ZN5Print11printNumberEmh>
  Serial.println(" bytes");
   d4642:	f004 fe05 	bl	d9250 <_Z16_fetch_usbserialv>
}
   d4646:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.println(" bytes");
   d464a:	4908      	ldr	r1, [pc, #32]	; (d466c <_Z11eeprom_testv+0xd4>)
   d464c:	f003 bff5 	b.w	d863a <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
   d4650:	3401      	adds	r4, #1
   d4652:	f647 73ff 	movw	r3, #32767	; 0x7fff
   d4656:	429c      	cmp	r4, r3
   d4658:	d1ab      	bne.n	d45b2 <_Z11eeprom_testv+0x1a>
   d465a:	e7e7      	b.n	d462c <_Z11eeprom_testv+0x94>
   d465c:	000dd4b8 	.word	0x000dd4b8
   d4660:	2003e530 	.word	0x2003e530
   d4664:	000dd4ff 	.word	0x000dd4ff
   d4668:	000dd511 	.word	0x000dd511
   d466c:	000dd528 	.word	0x000dd528
   d4670:	000dd4e1 	.word	0x000dd4e1
   d4674:	000dd4c6 	.word	0x000dd4c6

000d4678 <_Z22measure_wind_directionv>:

float measure_wind_direction(){
   d4678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
uint16_t wind_speed_time_interval= 5000; //value in ms
uint32_t wind_speed_time = 0;
VaneValue = analogRead(vane_pin);
   d467a:	4b4f      	ldr	r3, [pc, #316]	; (d47b8 <_Z22measure_wind_directionv+0x140>)
   d467c:	4d4f      	ldr	r5, [pc, #316]	; (d47bc <_Z22measure_wind_directionv+0x144>)
   d467e:	7818      	ldrb	r0, [r3, #0]
   d4680:	4c4f      	ldr	r4, [pc, #316]	; (d47c0 <_Z22measure_wind_directionv+0x148>)
   d4682:	f005 f8ba 	bl	d97fa <analogRead>
//digitalWrite(vane_switch, LOW);
//Serial.println("analog read value = ");
//Serial.print(VaneValue);
Direction = map(VaneValue, 0, 4095, 0, 360);
   d4686:	f44f 73b4 	mov.w	r3, #360	; 0x168
VaneValue = analogRead(vane_pin);
   d468a:	6028      	str	r0, [r5, #0]
Direction = map(VaneValue, 0, 4095, 0, 360);
   d468c:	9300      	str	r3, [sp, #0]
   d468e:	2300      	movs	r3, #0
   d4690:	4619      	mov	r1, r3
   d4692:	f640 72ff 	movw	r2, #4095	; 0xfff
   d4696:	f004 f99d 	bl	d89d4 <_Z3mapiiiii>
   d469a:	4b4a      	ldr	r3, [pc, #296]	; (d47c4 <_Z22measure_wind_directionv+0x14c>)
CalDirection = Direction + Offset;

if(CalDirection > 360)
   d469c:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
Direction = map(VaneValue, 0, 4095, 0, 360);
   d46a0:	6018      	str	r0, [r3, #0]
CalDirection = CalDirection - 360;
   d46a2:	bfc8      	it	gt
   d46a4:	f5a0 70b4 	subgt.w	r0, r0, #360	; 0x168
   d46a8:	6020      	str	r0, [r4, #0]

if(CalDirection < 0)
   d46aa:	6823      	ldr	r3, [r4, #0]
   d46ac:	2b00      	cmp	r3, #0
CalDirection = CalDirection + 360;
   d46ae:	bfbc      	itt	lt
   d46b0:	f503 73b4 	addlt.w	r3, r3, #360	; 0x168
   d46b4:	6023      	strlt	r3, [r4, #0]
   d46b6:	f003 faad 	bl	d7c14 <HAL_Timer_Get_Milli_Seconds>


//delay(100);
if ((millis() - wind_speed_time) > wind_speed_time_interval) {
   d46ba:	f241 3388 	movw	r3, #5000	; 0x1388
   d46be:	4298      	cmp	r0, r3
   d46c0:	d96a      	bls.n	d4798 <_Z22measure_wind_directionv+0x120>
// Only update the display if change greater than 2 degrees.
  if(abs(CalDirection - LastValue) > 5)
   d46c2:	4e41      	ldr	r6, [pc, #260]	; (d47c8 <_Z22measure_wind_directionv+0x150>)
   d46c4:	6823      	ldr	r3, [r4, #0]
   d46c6:	6832      	ldr	r2, [r6, #0]
   d46c8:	1a9b      	subs	r3, r3, r2
   d46ca:	2b00      	cmp	r3, #0
   d46cc:	bfb8      	it	lt
   d46ce:	425b      	neglt	r3, r3
   d46d0:	2b05      	cmp	r3, #5
   d46d2:	dd2f      	ble.n	d4734 <_Z22measure_wind_directionv+0xbc>
  {
    Serial.print("Vanevalue -----------------\n");
   d46d4:	f004 fdbc 	bl	d9250 <_Z16_fetch_usbserialv>
   d46d8:	493c      	ldr	r1, [pc, #240]	; (d47cc <_Z22measure_wind_directionv+0x154>)
   d46da:	f003 ff97 	bl	d860c <_ZN5Print5printEPKc>
  Serial.print(VaneValue); Serial.print("\t\t");
   d46de:	f004 fdb7 	bl	d9250 <_Z16_fetch_usbserialv>
   d46e2:	682d      	ldr	r5, [r5, #0]
        if (n < 0 && base == 10) {
   d46e4:	2d00      	cmp	r5, #0
   d46e6:	4607      	mov	r7, r0
   d46e8:	da5c      	bge.n	d47a4 <_Z22measure_wind_directionv+0x12c>
            t = print('-');
   d46ea:	212d      	movs	r1, #45	; 0x2d
   d46ec:	f003 ff92 	bl	d8614 <_ZN5Print5printEc>
            val = -n;
   d46f0:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d46f2:	220a      	movs	r2, #10
   d46f4:	4638      	mov	r0, r7
   d46f6:	f003 ffac 	bl	d8652 <_ZN5Print11printNumberEmh>
   d46fa:	f004 fda9 	bl	d9250 <_Z16_fetch_usbserialv>
   d46fe:	4934      	ldr	r1, [pc, #208]	; (d47d0 <_Z22measure_wind_directionv+0x158>)
   d4700:	f003 ff84 	bl	d860c <_ZN5Print5printEPKc>
  Serial.print(CalDirection); Serial.print("\t\t");
   d4704:	f004 fda4 	bl	d9250 <_Z16_fetch_usbserialv>
   d4708:	6825      	ldr	r5, [r4, #0]
        if (n < 0 && base == 10) {
   d470a:	2d00      	cmp	r5, #0
   d470c:	4607      	mov	r7, r0
   d470e:	da4b      	bge.n	d47a8 <_Z22measure_wind_directionv+0x130>
            t = print('-');
   d4710:	212d      	movs	r1, #45	; 0x2d
   d4712:	f003 ff7f 	bl	d8614 <_ZN5Print5printEc>
            val = -n;
   d4716:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d4718:	220a      	movs	r2, #10
   d471a:	4638      	mov	r0, r7
   d471c:	f003 ff99 	bl	d8652 <_ZN5Print11printNumberEmh>
   d4720:	f004 fd96 	bl	d9250 <_Z16_fetch_usbserialv>
   d4724:	492a      	ldr	r1, [pc, #168]	; (d47d0 <_Z22measure_wind_directionv+0x158>)
   d4726:	f003 ff71 	bl	d860c <_ZN5Print5printEPKc>
  getHeading(CalDirection);
   d472a:	6820      	ldr	r0, [r4, #0]
   d472c:	f7ff feee 	bl	d450c <_Z10getHeadingi>
  LastValue = CalDirection;
   d4730:	6823      	ldr	r3, [r4, #0]
   d4732:	6033      	str	r3, [r6, #0]
  }
  wind_speed_time = millis();
  
  WindSpeed = Rotations * .45;
   d4734:	4d27      	ldr	r5, [pc, #156]	; (d47d4 <_Z22measure_wind_directionv+0x15c>)
   d4736:	4e28      	ldr	r6, [pc, #160]	; (d47d8 <_Z22measure_wind_directionv+0x160>)
   d4738:	f003 fa6c 	bl	d7c14 <HAL_Timer_Get_Milli_Seconds>
   d473c:	6828      	ldr	r0, [r5, #0]
   d473e:	f007 fe7f 	bl	dc440 <__aeabi_ui2d>
   d4742:	a31b      	add	r3, pc, #108	; (adr r3, d47b0 <_Z22measure_wind_directionv+0x138>)
   d4744:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4748:	f007 fef4 	bl	dc534 <__aeabi_dmul>
   d474c:	f008 f9ea 	bl	dcb24 <__aeabi_d2f>
   d4750:	6030      	str	r0, [r6, #0]
Serial.print("wind speed -----------------\n");
   d4752:	f004 fd7d 	bl	d9250 <_Z16_fetch_usbserialv>
   d4756:	4921      	ldr	r1, [pc, #132]	; (d47dc <_Z22measure_wind_directionv+0x164>)
   d4758:	f003 ff58 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(Rotations); Serial.print("\t\t");
   d475c:	f004 fd78 	bl	d9250 <_Z16_fetch_usbserialv>
   d4760:	220a      	movs	r2, #10
   d4762:	6829      	ldr	r1, [r5, #0]
   d4764:	f003 ff75 	bl	d8652 <_ZN5Print11printNumberEmh>
   d4768:	f004 fd72 	bl	d9250 <_Z16_fetch_usbserialv>
   d476c:	4918      	ldr	r1, [pc, #96]	; (d47d0 <_Z22measure_wind_directionv+0x158>)
   d476e:	f003 ff4d 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(WindSpeed); Serial.print("\t\t");  Serial.println(" mph");
   d4772:	f004 fd6d 	bl	d9250 <_Z16_fetch_usbserialv>
   d4776:	ed96 0a00 	vldr	s0, [r6]
   d477a:	2102      	movs	r1, #2
   d477c:	f004 f880 	bl	d8880 <_ZN5Print5printEfi>
   d4780:	f004 fd66 	bl	d9250 <_Z16_fetch_usbserialv>
   d4784:	4912      	ldr	r1, [pc, #72]	; (d47d0 <_Z22measure_wind_directionv+0x158>)
   d4786:	f003 ff41 	bl	d860c <_ZN5Print5printEPKc>
   d478a:	f004 fd61 	bl	d9250 <_Z16_fetch_usbserialv>
   d478e:	4914      	ldr	r1, [pc, #80]	; (d47e0 <_Z22measure_wind_directionv+0x168>)
   d4790:	f003 ff53 	bl	d863a <_ZN5Print7printlnEPKc>
// wind_speed_time = millis();
Rotations = 0;  // Set Rotations count to 0 ready for calculations
   d4794:	2300      	movs	r3, #0
   d4796:	602b      	str	r3, [r5, #0]
// convert to mp/h using the formula V=P(2.25/T)
// V = P(2.25/3) = P * 0.75
}
return CalDirection;
   d4798:	ed94 0a00 	vldr	s0, [r4]
}
   d479c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d47a0:	b003      	add	sp, #12
   d47a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            val = n;
   d47a4:	4629      	mov	r1, r5
   d47a6:	e7a4      	b.n	d46f2 <_Z22measure_wind_directionv+0x7a>
   d47a8:	4629      	mov	r1, r5
   d47aa:	e7b5      	b.n	d4718 <_Z22measure_wind_directionv+0xa0>
   d47ac:	f3af 8000 	nop.w
   d47b0:	cccccccd 	.word	0xcccccccd
   d47b4:	3fdccccc 	.word	0x3fdccccc
   d47b8:	2003e3d4 	.word	0x2003e3d4
   d47bc:	2003e45c 	.word	0x2003e45c
   d47c0:	2003e448 	.word	0x2003e448
   d47c4:	2003e450 	.word	0x2003e450
   d47c8:	2003e454 	.word	0x2003e454
   d47cc:	000dd52f 	.word	0x000dd52f
   d47d0:	000dd54c 	.word	0x000dd54c
   d47d4:	2003e458 	.word	0x2003e458
   d47d8:	2003e460 	.word	0x2003e460
   d47dc:	000dd54f 	.word	0x000dd54f
   d47e0:	000dd56d 	.word	0x000dd56d

000d47e4 <_Z24print_heading_pitch_rollv>:

void print_heading_pitch_roll() {
   d47e4:	b510      	push	{r4, lr}
   d47e6:	b08a      	sub	sp, #40	; 0x28
      /* Get a new sensor event */
  sensors_event_t event;
  bno.getEvent(&event);
   d47e8:	a901      	add	r1, sp, #4
   d47ea:	4817      	ldr	r0, [pc, #92]	; (d4848 <_Z24print_heading_pitch_rollv+0x64>)
  /* The WebSerial 3D Model Viewer expects data as heading, pitch, roll */
  Serial.print(F("Heading, pitch, roll: "));
  Serial.print((float)event.orientation.x);
  Serial.print(F(", "));
   d47ec:	4c17      	ldr	r4, [pc, #92]	; (d484c <_Z24print_heading_pitch_rollv+0x68>)
  bno.getEvent(&event);
   d47ee:	f002 fa37 	bl	d6c60 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  Serial.print(F("Heading, pitch, roll: "));
   d47f2:	f004 fd2d 	bl	d9250 <_Z16_fetch_usbserialv>
   d47f6:	4916      	ldr	r1, [pc, #88]	; (d4850 <_Z24print_heading_pitch_rollv+0x6c>)
   d47f8:	f003 ff0f 	bl	d861a <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.x);
   d47fc:	f004 fd28 	bl	d9250 <_Z16_fetch_usbserialv>
   d4800:	ed9d 0a06 	vldr	s0, [sp, #24]
   d4804:	2102      	movs	r1, #2
   d4806:	f004 f83b 	bl	d8880 <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d480a:	f004 fd21 	bl	d9250 <_Z16_fetch_usbserialv>
   d480e:	4621      	mov	r1, r4
   d4810:	f003 ff03 	bl	d861a <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.y);
   d4814:	f004 fd1c 	bl	d9250 <_Z16_fetch_usbserialv>
   d4818:	ed9d 0a07 	vldr	s0, [sp, #28]
   d481c:	2102      	movs	r1, #2
   d481e:	f004 f82f 	bl	d8880 <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d4822:	f004 fd15 	bl	d9250 <_Z16_fetch_usbserialv>
   d4826:	4621      	mov	r1, r4
   d4828:	f003 fef7 	bl	d861a <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.z);
   d482c:	f004 fd10 	bl	d9250 <_Z16_fetch_usbserialv>
   d4830:	ed9d 0a08 	vldr	s0, [sp, #32]
   d4834:	2102      	movs	r1, #2
   d4836:	f004 f823 	bl	d8880 <_ZN5Print5printEfi>
  Serial.println(F(""));
   d483a:	f004 fd09 	bl	d9250 <_Z16_fetch_usbserialv>
   d483e:	4905      	ldr	r1, [pc, #20]	; (d4854 <_Z24print_heading_pitch_rollv+0x70>)
   d4840:	f003 ff05 	bl	d864e <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   d4844:	b00a      	add	sp, #40	; 0x28
   d4846:	bd10      	pop	{r4, pc}
   d4848:	2003e4b4 	.word	0x2003e4b4
   d484c:	000dd589 	.word	0x000dd589
   d4850:	000dd572 	.word	0x000dd572
   d4854:	000dd54e 	.word	0x000dd54e

000d4858 <_ZN5Print5printIhLi0EEEjT_i>:
    if (base == 0) {
   d4858:	b912      	cbnz	r2, d4860 <_ZN5Print5printIhLi0EEEjT_i+0x8>
        return write(n);
   d485a:	6803      	ldr	r3, [r0, #0]
   d485c:	689b      	ldr	r3, [r3, #8]
   d485e:	4718      	bx	r3
        return printNumber(val, base) + t;
   d4860:	b2d2      	uxtb	r2, r2
   d4862:	f003 bef6 	b.w	d8652 <_ZN5Print11printNumberEmh>

000d4866 <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d4866:	b538      	push	{r3, r4, r5, lr}
   d4868:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d486a:	f7ff fff5 	bl	d4858 <_ZN5Print5printIhLi0EEEjT_i>
   d486e:	4604      	mov	r4, r0
        n += println();
   d4870:	4628      	mov	r0, r5
   d4872:	f003 fed6 	bl	d8622 <_ZN5Print7printlnEv>
    }
   d4876:	4420      	add	r0, r4
   d4878:	bd38      	pop	{r3, r4, r5, pc}
	...

000d487c <_Z19displaySensorStatusv>:
{
   d487c:	b513      	push	{r0, r1, r4, lr}
    system_status = self_test_results = system_error = 0;
   d487e:	2300      	movs	r3, #0
    Serial.println("");
   d4880:	4c21      	ldr	r4, [pc, #132]	; (d4908 <_Z19displaySensorStatusv+0x8c>)
    system_status = self_test_results = system_error = 0;
   d4882:	f88d 3007 	strb.w	r3, [sp, #7]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   d4886:	f10d 0206 	add.w	r2, sp, #6
   d488a:	f10d 0105 	add.w	r1, sp, #5
    system_status = self_test_results = system_error = 0;
   d488e:	f88d 3006 	strb.w	r3, [sp, #6]
   d4892:	f88d 3005 	strb.w	r3, [sp, #5]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   d4896:	481d      	ldr	r0, [pc, #116]	; (d490c <_Z19displaySensorStatusv+0x90>)
   d4898:	f10d 0307 	add.w	r3, sp, #7
   d489c:	f002 f851 	bl	d6942 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>
    Serial.println("");
   d48a0:	f004 fcd6 	bl	d9250 <_Z16_fetch_usbserialv>
   d48a4:	4621      	mov	r1, r4
   d48a6:	f003 fec8 	bl	d863a <_ZN5Print7printlnEPKc>
    Serial.print("System Status: 0x");
   d48aa:	f004 fcd1 	bl	d9250 <_Z16_fetch_usbserialv>
   d48ae:	4918      	ldr	r1, [pc, #96]	; (d4910 <_Z19displaySensorStatusv+0x94>)
   d48b0:	f003 feac 	bl	d860c <_ZN5Print5printEPKc>
    Serial.println(system_status, HEX);
   d48b4:	f004 fccc 	bl	d9250 <_Z16_fetch_usbserialv>
   d48b8:	2210      	movs	r2, #16
   d48ba:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d48be:	f7ff ffd2 	bl	d4866 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("Self Test:     0x");
   d48c2:	f004 fcc5 	bl	d9250 <_Z16_fetch_usbserialv>
   d48c6:	4913      	ldr	r1, [pc, #76]	; (d4914 <_Z19displaySensorStatusv+0x98>)
   d48c8:	f003 fea0 	bl	d860c <_ZN5Print5printEPKc>
    Serial.println(self_test_results, HEX);
   d48cc:	f004 fcc0 	bl	d9250 <_Z16_fetch_usbserialv>
   d48d0:	2210      	movs	r2, #16
   d48d2:	f89d 1006 	ldrb.w	r1, [sp, #6]
   d48d6:	f7ff ffc6 	bl	d4866 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("System Error:  0x");
   d48da:	f004 fcb9 	bl	d9250 <_Z16_fetch_usbserialv>
   d48de:	490e      	ldr	r1, [pc, #56]	; (d4918 <_Z19displaySensorStatusv+0x9c>)
   d48e0:	f003 fe94 	bl	d860c <_ZN5Print5printEPKc>
    Serial.println(system_error, HEX);
   d48e4:	f004 fcb4 	bl	d9250 <_Z16_fetch_usbserialv>
   d48e8:	2210      	movs	r2, #16
   d48ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d48ee:	f7ff ffba 	bl	d4866 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.println("");
   d48f2:	f004 fcad 	bl	d9250 <_Z16_fetch_usbserialv>
   d48f6:	4621      	mov	r1, r4
   d48f8:	f003 fe9f 	bl	d863a <_ZN5Print7printlnEPKc>
    delay(500);
   d48fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4900:	f004 f874 	bl	d89ec <delay>
}
   d4904:	b002      	add	sp, #8
   d4906:	bd10      	pop	{r4, pc}
   d4908:	000dd54e 	.word	0x000dd54e
   d490c:	2003e4b4 	.word	0x2003e4b4
   d4910:	000dd58c 	.word	0x000dd58c
   d4914:	000dd59e 	.word	0x000dd59e
   d4918:	000dd5b0 	.word	0x000dd5b0

000d491c <_Z16displayCalStatusv>:
{
   d491c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    system = gyro = accel = mag = 0;
   d491e:	2300      	movs	r3, #0
   d4920:	f88d 300f 	strb.w	r3, [sp, #15]
   d4924:	f88d 300e 	strb.w	r3, [sp, #14]
   d4928:	f88d 300d 	strb.w	r3, [sp, #13]
   d492c:	f88d 300c 	strb.w	r3, [sp, #12]
    bno.getCalibration(&system, &gyro, &accel, &mag);
   d4930:	f10d 030f 	add.w	r3, sp, #15
   d4934:	f10d 020d 	add.w	r2, sp, #13
   d4938:	a903      	add	r1, sp, #12
   d493a:	4823      	ldr	r0, [pc, #140]	; (d49c8 <_Z16displayCalStatusv+0xac>)
   d493c:	9300      	str	r3, [sp, #0]
   d493e:	f10d 030e 	add.w	r3, sp, #14
   d4942:	f002 f81e 	bl	d6982 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
    Serial.print("\t");
   d4946:	f004 fc83 	bl	d9250 <_Z16_fetch_usbserialv>
   d494a:	4920      	ldr	r1, [pc, #128]	; (d49cc <_Z16displayCalStatusv+0xb0>)
   d494c:	f003 fe5e 	bl	d860c <_ZN5Print5printEPKc>
    if (!system)
   d4950:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4954:	b923      	cbnz	r3, d4960 <_Z16displayCalStatusv+0x44>
        Serial.print("! ");
   d4956:	f004 fc7b 	bl	d9250 <_Z16_fetch_usbserialv>
   d495a:	491d      	ldr	r1, [pc, #116]	; (d49d0 <_Z16displayCalStatusv+0xb4>)
   d495c:	f003 fe56 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print("Sys:");
   d4960:	f004 fc76 	bl	d9250 <_Z16_fetch_usbserialv>
   d4964:	491b      	ldr	r1, [pc, #108]	; (d49d4 <_Z16displayCalStatusv+0xb8>)
   d4966:	f003 fe51 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(system, DEC);
   d496a:	f004 fc71 	bl	d9250 <_Z16_fetch_usbserialv>
   d496e:	220a      	movs	r2, #10
   d4970:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d4974:	f7ff ff70 	bl	d4858 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" G:");
   d4978:	f004 fc6a 	bl	d9250 <_Z16_fetch_usbserialv>
   d497c:	4916      	ldr	r1, [pc, #88]	; (d49d8 <_Z16displayCalStatusv+0xbc>)
   d497e:	f003 fe45 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(gyro, DEC);
   d4982:	f004 fc65 	bl	d9250 <_Z16_fetch_usbserialv>
   d4986:	220a      	movs	r2, #10
   d4988:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d498c:	f7ff ff64 	bl	d4858 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" A:");
   d4990:	f004 fc5e 	bl	d9250 <_Z16_fetch_usbserialv>
   d4994:	4911      	ldr	r1, [pc, #68]	; (d49dc <_Z16displayCalStatusv+0xc0>)
   d4996:	f003 fe39 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(accel, DEC);
   d499a:	f004 fc59 	bl	d9250 <_Z16_fetch_usbserialv>
   d499e:	220a      	movs	r2, #10
   d49a0:	f89d 100e 	ldrb.w	r1, [sp, #14]
   d49a4:	f7ff ff58 	bl	d4858 <_ZN5Print5printIhLi0EEEjT_i>
    Serial.print(" M:");
   d49a8:	f004 fc52 	bl	d9250 <_Z16_fetch_usbserialv>
   d49ac:	490c      	ldr	r1, [pc, #48]	; (d49e0 <_Z16displayCalStatusv+0xc4>)
   d49ae:	f003 fe2d 	bl	d860c <_ZN5Print5printEPKc>
    Serial.print(mag, DEC);
   d49b2:	f004 fc4d 	bl	d9250 <_Z16_fetch_usbserialv>
   d49b6:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d49ba:	220a      	movs	r2, #10
   d49bc:	f7ff ff4c 	bl	d4858 <_ZN5Print5printIhLi0EEEjT_i>
}
   d49c0:	b005      	add	sp, #20
   d49c2:	f85d fb04 	ldr.w	pc, [sp], #4
   d49c6:	bf00      	nop
   d49c8:	2003e4b4 	.word	0x2003e4b4
   d49cc:	000dd54d 	.word	0x000dd54d
   d49d0:	000dd5c2 	.word	0x000dd5c2
   d49d4:	000dd5c5 	.word	0x000dd5c5
   d49d8:	000dd5ca 	.word	0x000dd5ca
   d49dc:	000dd5ce 	.word	0x000dd5ce
   d49e0:	000dd5d2 	.word	0x000dd5d2
   d49e4:	00000000 	.word	0x00000000

000d49e8 <_Z19get_compass_headingv>:
float get_compass_heading() {
   d49e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d49ec:	ed2d 8b08 	vpush	{d8-d11}
   d49f0:	b097      	sub	sp, #92	; 0x5c
bno.getCalibration(&system, &gyro, &accel, &mg);
   d49f2:	4cd7      	ldr	r4, [pc, #860]	; (d4d50 <_Z19get_compass_headingv+0x368>)
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d49f4:	4fd7      	ldr	r7, [pc, #860]	; (d4d54 <_Z19get_compass_headingv+0x36c>)
phiFnew=.95*phiFold+.05*phiM;
   d49f6:	f8df b39c 	ldr.w	fp, [pc, #924]	; d4d94 <_Z19get_compass_headingv+0x3ac>
thetaFnew=.95*thetaFold+.05*thetaM;
   d49fa:	f8df a39c 	ldr.w	sl, [pc, #924]	; d4d98 <_Z19get_compass_headingv+0x3b0>
phiRad=phi/360*(2*3.14);
   d49fe:	ed9f 9ad6 	vldr	s18, [pc, #856]	; d4d58 <_Z19get_compass_headingv+0x370>
uint8_t system, gyro, accel, mg = 0;
   d4a02:	2300      	movs	r3, #0
   d4a04:	f88d 300f 	strb.w	r3, [sp, #15]
bno.getCalibration(&system, &gyro, &accel, &mg);
   d4a08:	f10d 030f 	add.w	r3, sp, #15
   d4a0c:	9300      	str	r3, [sp, #0]
   d4a0e:	f10d 020d 	add.w	r2, sp, #13
   d4a12:	f10d 030e 	add.w	r3, sp, #14
   d4a16:	a903      	add	r1, sp, #12
   d4a18:	4620      	mov	r0, r4
   d4a1a:	f001 ffb2 	bl	d6982 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
imu::Vector<3> acc =bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
   d4a1e:	4621      	mov	r1, r4
   d4a20:	a804      	add	r0, sp, #16
   d4a22:	2208      	movs	r2, #8
   d4a24:	f002 f8ac 	bl	d6b80 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> gyr =bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
   d4a28:	4621      	mov	r1, r4
   d4a2a:	a80a      	add	r0, sp, #40	; 0x28
   d4a2c:	2214      	movs	r2, #20
   d4a2e:	f002 f8a7 	bl	d6b80 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> mag =bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
   d4a32:	4621      	mov	r1, r4
   d4a34:	a810      	add	r0, sp, #64	; 0x40
   d4a36:	220e      	movs	r2, #14
   d4a38:	f002 f8a2 	bl	d6b80 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4a3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d4a40:	a3b9      	add	r3, pc, #740	; (adr r3, d4d28 <_Z19get_compass_headingv+0x340>)
   d4a42:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a46:	f007 fe9f 	bl	dc788 <__aeabi_ddiv>
   d4a4a:	a3b7      	add	r3, pc, #732	; (adr r3, d4d28 <_Z19get_compass_headingv+0x340>)
   d4a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a50:	ec41 0b18 	vmov	d8, r0, r1
   d4a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d4a58:	f007 fe96 	bl	dc788 <__aeabi_ddiv>
   d4a5c:	eeb0 1a48 	vmov.f32	s2, s16
   d4a60:	eef0 1a68 	vmov.f32	s3, s17
   d4a64:	ec41 0b10 	vmov	d0, r0, r1
   d4a68:	f004 ffcc 	bl	d9a04 <atan2>
   d4a6c:	ec53 2b10 	vmov	r2, r3, d0
   d4a70:	ee10 0a10 	vmov	r0, s0
   d4a74:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   d4a78:	2200      	movs	r2, #0
   d4a7a:	4bb8      	ldr	r3, [pc, #736]	; (d4d5c <_Z19get_compass_headingv+0x374>)
   d4a7c:	f007 fd5a 	bl	dc534 <__aeabi_dmul>
   d4a80:	a3ab      	add	r3, pc, #684	; (adr r3, d4d30 <_Z19get_compass_headingv+0x348>)
   d4a82:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a86:	f007 fe7f 	bl	dc788 <__aeabi_ddiv>
   d4a8a:	4bb5      	ldr	r3, [pc, #724]	; (d4d60 <_Z19get_compass_headingv+0x378>)
   d4a8c:	2200      	movs	r2, #0
   d4a8e:	f007 fd51 	bl	dc534 <__aeabi_dmul>
   d4a92:	f008 f847 	bl	dcb24 <__aeabi_d2f>
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4a96:	a3a4      	add	r3, pc, #656	; (adr r3, d4d28 <_Z19get_compass_headingv+0x340>)
   d4a98:	e9d3 2300 	ldrd	r2, r3, [r3]
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4a9c:	6038      	str	r0, [r7, #0]
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4a9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d4aa2:	f007 fe71 	bl	dc788 <__aeabi_ddiv>
   d4aa6:	a3a0      	add	r3, pc, #640	; (adr r3, d4d28 <_Z19get_compass_headingv+0x340>)
   d4aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4aac:	ec41 0b18 	vmov	d8, r0, r1
   d4ab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d4ab4:	f007 fe68 	bl	dc788 <__aeabi_ddiv>
   d4ab8:	eeb0 1a48 	vmov.f32	s2, s16
   d4abc:	eef0 1a68 	vmov.f32	s3, s17
   d4ac0:	ec41 0b10 	vmov	d0, r0, r1
   d4ac4:	f004 ff9e 	bl	d9a04 <atan2>
   d4ac8:	ec53 2b10 	vmov	r2, r3, d0
   d4acc:	ee10 0a10 	vmov	r0, s0
   d4ad0:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   d4ad4:	2200      	movs	r2, #0
   d4ad6:	4ba1      	ldr	r3, [pc, #644]	; (d4d5c <_Z19get_compass_headingv+0x374>)
   d4ad8:	f007 fd2c 	bl	dc534 <__aeabi_dmul>
   d4adc:	a394      	add	r3, pc, #592	; (adr r3, d4d30 <_Z19get_compass_headingv+0x348>)
   d4ade:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ae2:	f007 fe51 	bl	dc788 <__aeabi_ddiv>
   d4ae6:	2200      	movs	r2, #0
   d4ae8:	4b9d      	ldr	r3, [pc, #628]	; (d4d60 <_Z19get_compass_headingv+0x378>)
   d4aea:	f007 fd23 	bl	dc534 <__aeabi_dmul>
   d4aee:	f008 f819 	bl	dcb24 <__aeabi_d2f>
   d4af2:	4b9c      	ldr	r3, [pc, #624]	; (d4d64 <_Z19get_compass_headingv+0x37c>)
phiFnew=.95*phiFold+.05*phiM;
   d4af4:	499c      	ldr	r1, [pc, #624]	; (d4d68 <_Z19get_compass_headingv+0x380>)
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   d4af6:	6018      	str	r0, [r3, #0]
   d4af8:	4606      	mov	r6, r0
phiFnew=.95*phiFold+.05*phiM;
   d4afa:	6808      	ldr	r0, [r1, #0]
   d4afc:	f007 fcc2 	bl	dc484 <__aeabi_f2d>
   d4b00:	a38d      	add	r3, pc, #564	; (adr r3, d4d38 <_Z19get_compass_headingv+0x350>)
   d4b02:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b06:	f007 fd15 	bl	dc534 <__aeabi_dmul>
   d4b0a:	4604      	mov	r4, r0
   d4b0c:	4630      	mov	r0, r6
   d4b0e:	460d      	mov	r5, r1
   d4b10:	f007 fcb8 	bl	dc484 <__aeabi_f2d>
   d4b14:	a38a      	add	r3, pc, #552	; (adr r3, d4d40 <_Z19get_compass_headingv+0x358>)
   d4b16:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b1a:	f007 fd0b 	bl	dc534 <__aeabi_dmul>
   d4b1e:	4602      	mov	r2, r0
   d4b20:	460b      	mov	r3, r1
   d4b22:	4620      	mov	r0, r4
   d4b24:	4629      	mov	r1, r5
   d4b26:	f007 fb4f 	bl	dc1c8 <__adddf3>
   d4b2a:	f007 fffb 	bl	dcb24 <__aeabi_d2f>
   d4b2e:	f8cb 0000 	str.w	r0, [fp]
thetaFnew=.95*thetaFold+.05*thetaM;
   d4b32:	488e      	ldr	r0, [pc, #568]	; (d4d6c <_Z19get_compass_headingv+0x384>)
   d4b34:	6800      	ldr	r0, [r0, #0]
   d4b36:	f007 fca5 	bl	dc484 <__aeabi_f2d>
   d4b3a:	a37f      	add	r3, pc, #508	; (adr r3, d4d38 <_Z19get_compass_headingv+0x350>)
   d4b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b40:	f007 fcf8 	bl	dc534 <__aeabi_dmul>
   d4b44:	4604      	mov	r4, r0
   d4b46:	6838      	ldr	r0, [r7, #0]
   d4b48:	460d      	mov	r5, r1
   d4b4a:	f007 fc9b 	bl	dc484 <__aeabi_f2d>
   d4b4e:	a37c      	add	r3, pc, #496	; (adr r3, d4d40 <_Z19get_compass_headingv+0x358>)
   d4b50:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b54:	f007 fcee 	bl	dc534 <__aeabi_dmul>
   d4b58:	4602      	mov	r2, r0
   d4b5a:	460b      	mov	r3, r1
   d4b5c:	4620      	mov	r0, r4
   d4b5e:	4629      	mov	r1, r5
   d4b60:	f007 fb32 	bl	dc1c8 <__adddf3>
   d4b64:	f007 ffde 	bl	dcb24 <__aeabi_d2f>
dt=(millis()-millisOld)/1000.;
   d4b68:	4d81      	ldr	r5, [pc, #516]	; (d4d70 <_Z19get_compass_headingv+0x388>)
thetaFnew=.95*thetaFold+.05*thetaM;
   d4b6a:	f8ca 0000 	str.w	r0, [sl]
   d4b6e:	f003 f851 	bl	d7c14 <HAL_Timer_Get_Milli_Seconds>
dt=(millis()-millisOld)/1000.;
   d4b72:	682b      	ldr	r3, [r5, #0]
   d4b74:	4c7f      	ldr	r4, [pc, #508]	; (d4d74 <_Z19get_compass_headingv+0x38c>)
   d4b76:	1ac0      	subs	r0, r0, r3
   d4b78:	f007 fc62 	bl	dc440 <__aeabi_ui2d>
   d4b7c:	4b7e      	ldr	r3, [pc, #504]	; (d4d78 <_Z19get_compass_headingv+0x390>)
   d4b7e:	2200      	movs	r2, #0
   d4b80:	f007 fe02 	bl	dc788 <__aeabi_ddiv>
   d4b84:	f007 ffce 	bl	dcb24 <__aeabi_d2f>
   d4b88:	6020      	str	r0, [r4, #0]
   d4b8a:	f003 f843 	bl	d7c14 <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
   d4b8e:	6028      	str	r0, [r5, #0]
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   d4b90:	6820      	ldr	r0, [r4, #0]
   d4b92:	f007 fc77 	bl	dc484 <__aeabi_f2d>
   d4b96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   d4b9a:	4604      	mov	r4, r0
   d4b9c:	460d      	mov	r5, r1
   d4b9e:	f007 fcc9 	bl	dc534 <__aeabi_dmul>
   d4ba2:	460f      	mov	r7, r1
   d4ba4:	4975      	ldr	r1, [pc, #468]	; (d4d7c <_Z19get_compass_headingv+0x394>)
   d4ba6:	4606      	mov	r6, r0
   d4ba8:	6808      	ldr	r0, [r1, #0]
   d4baa:	f007 fc6b 	bl	dc484 <__aeabi_f2d>
   d4bae:	4632      	mov	r2, r6
   d4bb0:	463b      	mov	r3, r7
   d4bb2:	f007 fb09 	bl	dc1c8 <__adddf3>
   d4bb6:	a360      	add	r3, pc, #384	; (adr r3, d4d38 <_Z19get_compass_headingv+0x350>)
   d4bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bbc:	f007 fcba 	bl	dc534 <__aeabi_dmul>
   d4bc0:	4b64      	ldr	r3, [pc, #400]	; (d4d54 <_Z19get_compass_headingv+0x36c>)
   d4bc2:	4680      	mov	r8, r0
   d4bc4:	6818      	ldr	r0, [r3, #0]
   d4bc6:	4689      	mov	r9, r1
   d4bc8:	f007 fc5c 	bl	dc484 <__aeabi_f2d>
   d4bcc:	a35c      	add	r3, pc, #368	; (adr r3, d4d40 <_Z19get_compass_headingv+0x358>)
   d4bce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bd2:	f007 fcaf 	bl	dc534 <__aeabi_dmul>
   d4bd6:	4602      	mov	r2, r0
   d4bd8:	460b      	mov	r3, r1
   d4bda:	4640      	mov	r0, r8
   d4bdc:	4649      	mov	r1, r9
   d4bde:	f007 faf3 	bl	dc1c8 <__adddf3>
   d4be2:	f007 ff9f 	bl	dcb24 <__aeabi_d2f>
   d4be6:	4965      	ldr	r1, [pc, #404]	; (d4d7c <_Z19get_compass_headingv+0x394>)
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d4be8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   d4bec:	ee08 0a90 	vmov	s17, r0
   d4bf0:	6008      	str	r0, [r1, #0]
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d4bf2:	4620      	mov	r0, r4
   d4bf4:	4629      	mov	r1, r5
   d4bf6:	f007 fc9d 	bl	dc534 <__aeabi_dmul>
   d4bfa:	4604      	mov	r4, r0
   d4bfc:	4860      	ldr	r0, [pc, #384]	; (d4d80 <_Z19get_compass_headingv+0x398>)
   d4bfe:	460d      	mov	r5, r1
   d4c00:	6800      	ldr	r0, [r0, #0]
   d4c02:	f007 fc3f 	bl	dc484 <__aeabi_f2d>
   d4c06:	4622      	mov	r2, r4
   d4c08:	462b      	mov	r3, r5
   d4c0a:	f007 fadb 	bl	dc1c4 <__aeabi_dsub>
   d4c0e:	a34a      	add	r3, pc, #296	; (adr r3, d4d38 <_Z19get_compass_headingv+0x350>)
   d4c10:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c14:	f007 fc8e 	bl	dc534 <__aeabi_dmul>
   d4c18:	4a52      	ldr	r2, [pc, #328]	; (d4d64 <_Z19get_compass_headingv+0x37c>)
   d4c1a:	4680      	mov	r8, r0
   d4c1c:	6810      	ldr	r0, [r2, #0]
   d4c1e:	4689      	mov	r9, r1
   d4c20:	f007 fc30 	bl	dc484 <__aeabi_f2d>
   d4c24:	a346      	add	r3, pc, #280	; (adr r3, d4d40 <_Z19get_compass_headingv+0x358>)
   d4c26:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c2a:	f007 fc83 	bl	dc534 <__aeabi_dmul>
   d4c2e:	4602      	mov	r2, r0
   d4c30:	460b      	mov	r3, r1
   d4c32:	4640      	mov	r0, r8
   d4c34:	4649      	mov	r1, r9
   d4c36:	f007 fac7 	bl	dc1c8 <__adddf3>
   d4c3a:	f007 ff73 	bl	dcb24 <__aeabi_d2f>
thetaG=thetaG+gyr.y()*dt;
   d4c3e:	4951      	ldr	r1, [pc, #324]	; (d4d84 <_Z19get_compass_headingv+0x39c>)
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   d4c40:	ee08 0a10 	vmov	s16, r0
   d4c44:	484e      	ldr	r0, [pc, #312]	; (d4d80 <_Z19get_compass_headingv+0x398>)
   d4c46:	ed80 8a00 	vstr	s16, [r0]
thetaG=thetaG+gyr.y()*dt;
   d4c4a:	6808      	ldr	r0, [r1, #0]
   d4c4c:	f007 fc1a 	bl	dc484 <__aeabi_f2d>
   d4c50:	4632      	mov	r2, r6
   d4c52:	463b      	mov	r3, r7
   d4c54:	f007 fab8 	bl	dc1c8 <__adddf3>
   d4c58:	f007 ff64 	bl	dcb24 <__aeabi_d2f>
phiG=phiG-gyr.x()*dt;
   d4c5c:	4f4a      	ldr	r7, [pc, #296]	; (d4d88 <_Z19get_compass_headingv+0x3a0>)
thetaG=thetaG+gyr.y()*dt;
   d4c5e:	4e49      	ldr	r6, [pc, #292]	; (d4d84 <_Z19get_compass_headingv+0x39c>)
   d4c60:	6030      	str	r0, [r6, #0]
phiG=phiG-gyr.x()*dt;
   d4c62:	6838      	ldr	r0, [r7, #0]
   d4c64:	f007 fc0e 	bl	dc484 <__aeabi_f2d>
   d4c68:	4622      	mov	r2, r4
   d4c6a:	462b      	mov	r3, r5
   d4c6c:	f007 faaa 	bl	dc1c4 <__aeabi_dsub>
   d4c70:	f007 ff58 	bl	dcb24 <__aeabi_d2f>
phiRad=phi/360*(2*3.14);
   d4c74:	eec8 7a09 	vdiv.f32	s15, s16, s18
phiG=phiG-gyr.x()*dt;
   d4c78:	6038      	str	r0, [r7, #0]
phiRad=phi/360*(2*3.14);
   d4c7a:	ee17 0a90 	vmov	r0, s15
   d4c7e:	f007 fc01 	bl	dc484 <__aeabi_f2d>
   d4c82:	a331      	add	r3, pc, #196	; (adr r3, d4d48 <_Z19get_compass_headingv+0x360>)
   d4c84:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c88:	f007 fc54 	bl	dc534 <__aeabi_dmul>
   d4c8c:	f007 ff4a 	bl	dcb24 <__aeabi_d2f>
thetaRad=theta/360*(2*3.14);
   d4c90:	eec8 7a89 	vdiv.f32	s15, s17, s18
phiRad=phi/360*(2*3.14);
   d4c94:	4b3d      	ldr	r3, [pc, #244]	; (d4d8c <_Z19get_compass_headingv+0x3a4>)
   d4c96:	6018      	str	r0, [r3, #0]
   d4c98:	ee08 0a10 	vmov	s16, r0
thetaRad=theta/360*(2*3.14);
   d4c9c:	ee17 0a90 	vmov	r0, s15
   d4ca0:	f007 fbf0 	bl	dc484 <__aeabi_f2d>
   d4ca4:	a328      	add	r3, pc, #160	; (adr r3, d4d48 <_Z19get_compass_headingv+0x360>)
   d4ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4caa:	f007 fc43 	bl	dc534 <__aeabi_dmul>
   d4cae:	f007 ff39 	bl	dcb24 <__aeabi_d2f>
   d4cb2:	4b37      	ldr	r3, [pc, #220]	; (d4d90 <_Z19get_compass_headingv+0x3a8>)
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
   d4cb4:	ee00 0a10 	vmov	s0, r0
   d4cb8:	6018      	str	r0, [r3, #0]
   d4cba:	ee08 0a90 	vmov	s17, r0
   d4cbe:	f004 fe0f 	bl	d98e0 <cosf>
Xm=mag.x()*cos(thetaRad)-mag.y()*sin(phiRad)*sin(thetaRad)+mag.z()*cos(phiRad)*sin(thetaRad);
   d4cc2:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   d4cc6:	ee10 8a10 	vmov	r8, s0
   d4cca:	eeb0 9a47 	vmov.f32	s18, s14
   d4cce:	eef0 9a67 	vmov.f32	s19, s15
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
   d4cd2:	eeb0 0a48 	vmov.f32	s0, s16
   d4cd6:	f004 fe4b 	bl	d9970 <sinf>
   d4cda:	ee10 0a10 	vmov	r0, s0
   d4cde:	f007 fbd1 	bl	dc484 <__aeabi_f2d>
   d4ce2:	eeb0 0a68 	vmov.f32	s0, s17
   d4ce6:	ec41 0b1a 	vmov	d10, r0, r1
   d4cea:	f004 fe41 	bl	d9970 <sinf>
   d4cee:	ee10 0a10 	vmov	r0, s0
   d4cf2:	f007 fbc7 	bl	dc484 <__aeabi_f2d>
   d4cf6:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
  { return __builtin_cosf(__x); }
   d4cfa:	eeb0 0a48 	vmov.f32	s0, s16
   d4cfe:	eeb0 ba47 	vmov.f32	s22, s14
   d4d02:	eef0 ba67 	vmov.f32	s23, s15
   d4d06:	4606      	mov	r6, r0
   d4d08:	460f      	mov	r7, r1
   d4d0a:	f004 fde9 	bl	d98e0 <cosf>
   d4d0e:	ee10 0a10 	vmov	r0, s0
   d4d12:	f007 fbb7 	bl	dc484 <__aeabi_f2d>
   d4d16:	4604      	mov	r4, r0
   d4d18:	4640      	mov	r0, r8
   d4d1a:	460d      	mov	r5, r1
   d4d1c:	f007 fbb2 	bl	dc484 <__aeabi_f2d>
   d4d20:	e03c      	b.n	d4d9c <_Z19get_compass_headingv+0x3b4>
   d4d22:	bf00      	nop
   d4d24:	f3af 8000 	nop.w
   d4d28:	9999999a 	.word	0x9999999a
   d4d2c:	40239999 	.word	0x40239999
   d4d30:	54524550 	.word	0x54524550
   d4d34:	400921fb 	.word	0x400921fb
   d4d38:	66666666 	.word	0x66666666
   d4d3c:	3fee6666 	.word	0x3fee6666
   d4d40:	9999999a 	.word	0x9999999a
   d4d44:	3fa99999 	.word	0x3fa99999
   d4d48:	51eb851f 	.word	0x51eb851f
   d4d4c:	40191eb8 	.word	0x40191eb8
   d4d50:	2003e4b4 	.word	0x2003e4b4
   d4d54:	2003e568 	.word	0x2003e568
   d4d58:	43b40000 	.word	0x43b40000
   d4d5c:	3fe00000 	.word	0x3fe00000
   d4d60:	40768000 	.word	0x40768000
   d4d64:	2003e54c 	.word	0x2003e54c
   d4d68:	2003e544 	.word	0x2003e544
   d4d6c:	2003e560 	.word	0x2003e560
   d4d70:	2003e538 	.word	0x2003e538
   d4d74:	2003e52c 	.word	0x2003e52c
   d4d78:	408f4000 	.word	0x408f4000
   d4d7c:	2003e558 	.word	0x2003e558
   d4d80:	2003e53c 	.word	0x2003e53c
   d4d84:	2003e564 	.word	0x2003e564
   d4d88:	2003e548 	.word	0x2003e548
   d4d8c:	2003e550 	.word	0x2003e550
   d4d90:	2003e56c 	.word	0x2003e56c
   d4d94:	2003e540 	.word	0x2003e540
   d4d98:	2003e55c 	.word	0x2003e55c
   d4d9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d4da0:	f007 fbc8 	bl	dc534 <__aeabi_dmul>
   d4da4:	ec53 2b1a 	vmov	r2, r3, d10
   d4da8:	4680      	mov	r8, r0
   d4daa:	4689      	mov	r9, r1
   d4dac:	ec51 0b19 	vmov	r0, r1, d9
   d4db0:	f007 fbc0 	bl	dc534 <__aeabi_dmul>
   d4db4:	4632      	mov	r2, r6
   d4db6:	463b      	mov	r3, r7
   d4db8:	f007 fbbc 	bl	dc534 <__aeabi_dmul>
   d4dbc:	4602      	mov	r2, r0
   d4dbe:	460b      	mov	r3, r1
   d4dc0:	4640      	mov	r0, r8
   d4dc2:	4649      	mov	r1, r9
   d4dc4:	f007 f9fe 	bl	dc1c4 <__aeabi_dsub>
   d4dc8:	4622      	mov	r2, r4
   d4dca:	4680      	mov	r8, r0
   d4dcc:	4689      	mov	r9, r1
   d4dce:	462b      	mov	r3, r5
   d4dd0:	ec51 0b1b 	vmov	r0, r1, d11
   d4dd4:	f007 fbae 	bl	dc534 <__aeabi_dmul>
   d4dd8:	4632      	mov	r2, r6
   d4dda:	463b      	mov	r3, r7
   d4ddc:	f007 fbaa 	bl	dc534 <__aeabi_dmul>
   d4de0:	4602      	mov	r2, r0
   d4de2:	460b      	mov	r3, r1
   d4de4:	4640      	mov	r0, r8
   d4de6:	4649      	mov	r1, r9
   d4de8:	f007 f9ee 	bl	dc1c8 <__adddf3>
   d4dec:	f007 fe9a 	bl	dcb24 <__aeabi_d2f>
   d4df0:	4b93      	ldr	r3, [pc, #588]	; (d5040 <_Z19get_compass_headingv+0x658>)
Serial.print(phiG);
   d4df2:	4f94      	ldr	r7, [pc, #592]	; (d5044 <_Z19get_compass_headingv+0x65c>)
Xm=mag.x()*cos(thetaRad)-mag.y()*sin(phiRad)*sin(thetaRad)+mag.z()*cos(phiRad)*sin(thetaRad);
   d4df4:	6018      	str	r0, [r3, #0]
   d4df6:	ee08 0a10 	vmov	s16, r0
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
   d4dfa:	4622      	mov	r2, r4
   d4dfc:	462b      	mov	r3, r5
   d4dfe:	ec51 0b19 	vmov	r0, r1, d9
   d4e02:	f007 fb97 	bl	dc534 <__aeabi_dmul>
   d4e06:	ec53 2b1b 	vmov	r2, r3, d11
   d4e0a:	4604      	mov	r4, r0
   d4e0c:	460d      	mov	r5, r1
   d4e0e:	ec51 0b1a 	vmov	r0, r1, d10
   d4e12:	f007 fb8f 	bl	dc534 <__aeabi_dmul>
   d4e16:	4602      	mov	r2, r0
   d4e18:	460b      	mov	r3, r1
   d4e1a:	4620      	mov	r0, r4
   d4e1c:	4629      	mov	r1, r5
   d4e1e:	f007 f9d3 	bl	dc1c8 <__adddf3>
   d4e22:	f007 fe7f 	bl	dcb24 <__aeabi_d2f>
   d4e26:	4b88      	ldr	r3, [pc, #544]	; (d5048 <_Z19get_compass_headingv+0x660>)
psi=atan2(Ym,Xm)/(2*3.14)*360;
   d4e28:	4d88      	ldr	r5, [pc, #544]	; (d504c <_Z19get_compass_headingv+0x664>)
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
   d4e2a:	6018      	str	r0, [r3, #0]
  { return __builtin_atan2f(__y, __x); }
   d4e2c:	eef0 0a48 	vmov.f32	s1, s16
   d4e30:	ee00 0a10 	vmov	s0, r0
   d4e34:	f004 ff9e 	bl	d9d74 <atan2f>
   d4e38:	ee10 0a10 	vmov	r0, s0
psi=atan2(Ym,Xm)/(2*3.14)*360;
   d4e3c:	f007 fb22 	bl	dc484 <__aeabi_f2d>
   d4e40:	a37b      	add	r3, pc, #492	; (adr r3, d5030 <_Z19get_compass_headingv+0x648>)
   d4e42:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e46:	f007 fc9f 	bl	dc788 <__aeabi_ddiv>
   d4e4a:	4b81      	ldr	r3, [pc, #516]	; (d5050 <_Z19get_compass_headingv+0x668>)
   d4e4c:	2200      	movs	r2, #0
   d4e4e:	f007 fb71 	bl	dc534 <__aeabi_dmul>
   d4e52:	f007 fe67 	bl	dcb24 <__aeabi_d2f>
   d4e56:	6028      	str	r0, [r5, #0]
Serial.print(acc.x()/9.8);
   d4e58:	f004 f9fa 	bl	d9250 <_Z16_fetch_usbserialv>
   d4e5c:	a376      	add	r3, pc, #472	; (adr r3, d5038 <_Z19get_compass_headingv+0x650>)
   d4e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e62:	4604      	mov	r4, r0
   d4e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d4e68:	f007 fc8e 	bl	dc788 <__aeabi_ddiv>
   d4e6c:	ec41 0b10 	vmov	d0, r0, r1
   d4e70:	4620      	mov	r0, r4
Serial.print(",");
   d4e72:	4c78      	ldr	r4, [pc, #480]	; (d5054 <_Z19get_compass_headingv+0x66c>)
Serial.print(acc.x()/9.8);
   d4e74:	2102      	movs	r1, #2
   d4e76:	f003 fd12 	bl	d889e <_ZN5Print5printEdi>
Serial.print(",");
   d4e7a:	f004 f9e9 	bl	d9250 <_Z16_fetch_usbserialv>
   d4e7e:	4621      	mov	r1, r4
   d4e80:	f003 fbc4 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(acc.y()/9.8);
   d4e84:	f004 f9e4 	bl	d9250 <_Z16_fetch_usbserialv>
   d4e88:	a36b      	add	r3, pc, #428	; (adr r3, d5038 <_Z19get_compass_headingv+0x650>)
   d4e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e8e:	4606      	mov	r6, r0
   d4e90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d4e94:	f007 fc78 	bl	dc788 <__aeabi_ddiv>
   d4e98:	ec41 0b10 	vmov	d0, r0, r1
   d4e9c:	2102      	movs	r1, #2
   d4e9e:	4630      	mov	r0, r6
   d4ea0:	f003 fcfd 	bl	d889e <_ZN5Print5printEdi>
Serial.print(",");
   d4ea4:	f004 f9d4 	bl	d9250 <_Z16_fetch_usbserialv>
   d4ea8:	4621      	mov	r1, r4
   d4eaa:	f003 fbaf 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(acc.z()/9.8);
   d4eae:	f004 f9cf 	bl	d9250 <_Z16_fetch_usbserialv>
   d4eb2:	a361      	add	r3, pc, #388	; (adr r3, d5038 <_Z19get_compass_headingv+0x650>)
   d4eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4eb8:	4606      	mov	r6, r0
   d4eba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d4ebe:	f007 fc63 	bl	dc788 <__aeabi_ddiv>
   d4ec2:	ec41 0b10 	vmov	d0, r0, r1
   d4ec6:	2102      	movs	r1, #2
   d4ec8:	4630      	mov	r0, r6
   d4eca:	f003 fce8 	bl	d889e <_ZN5Print5printEdi>
Serial.print(",");
   d4ece:	f004 f9bf 	bl	d9250 <_Z16_fetch_usbserialv>
   d4ed2:	4621      	mov	r1, r4
   d4ed4:	f003 fb9a 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(accel);
   d4ed8:	f004 f9ba 	bl	d9250 <_Z16_fetch_usbserialv>
   d4edc:	220a      	movs	r2, #10
   d4ede:	f89d 100e 	ldrb.w	r1, [sp, #14]
Serial.print(thetaG);
   d4ee2:	4e5d      	ldr	r6, [pc, #372]	; (d5058 <_Z19get_compass_headingv+0x670>)
Serial.print(accel);
   d4ee4:	f7ff fcb8 	bl	d4858 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d4ee8:	f004 f9b2 	bl	d9250 <_Z16_fetch_usbserialv>
   d4eec:	4621      	mov	r1, r4
   d4eee:	f003 fb8d 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(gyro);
   d4ef2:	f004 f9ad 	bl	d9250 <_Z16_fetch_usbserialv>
   d4ef6:	220a      	movs	r2, #10
   d4ef8:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d4efc:	f7ff fcac 	bl	d4858 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d4f00:	f004 f9a6 	bl	d9250 <_Z16_fetch_usbserialv>
   d4f04:	4621      	mov	r1, r4
   d4f06:	f003 fb81 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(mg);
   d4f0a:	f004 f9a1 	bl	d9250 <_Z16_fetch_usbserialv>
   d4f0e:	220a      	movs	r2, #10
   d4f10:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d4f14:	f7ff fca0 	bl	d4858 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d4f18:	f004 f99a 	bl	d9250 <_Z16_fetch_usbserialv>
   d4f1c:	4621      	mov	r1, r4
   d4f1e:	f003 fb75 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(system);
   d4f22:	f004 f995 	bl	d9250 <_Z16_fetch_usbserialv>
   d4f26:	220a      	movs	r2, #10
   d4f28:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d4f2c:	f7ff fc94 	bl	d4858 <_ZN5Print5printIhLi0EEEjT_i>
Serial.print(",");
   d4f30:	f004 f98e 	bl	d9250 <_Z16_fetch_usbserialv>
   d4f34:	4621      	mov	r1, r4
   d4f36:	f003 fb69 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(thetaM);
   d4f3a:	f004 f989 	bl	d9250 <_Z16_fetch_usbserialv>
   d4f3e:	4b47      	ldr	r3, [pc, #284]	; (d505c <_Z19get_compass_headingv+0x674>)
   d4f40:	2102      	movs	r1, #2
   d4f42:	ed93 0a00 	vldr	s0, [r3]
   d4f46:	f003 fc9b 	bl	d8880 <_ZN5Print5printEfi>
Serial.print(",");
   d4f4a:	f004 f981 	bl	d9250 <_Z16_fetch_usbserialv>
   d4f4e:	4621      	mov	r1, r4
   d4f50:	f003 fb5c 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(phiM);
   d4f54:	f004 f97c 	bl	d9250 <_Z16_fetch_usbserialv>
   d4f58:	4a41      	ldr	r2, [pc, #260]	; (d5060 <_Z19get_compass_headingv+0x678>)
   d4f5a:	2102      	movs	r1, #2
   d4f5c:	ed92 0a00 	vldr	s0, [r2]
   d4f60:	f003 fc8e 	bl	d8880 <_ZN5Print5printEfi>
Serial.print(",");
   d4f64:	f004 f974 	bl	d9250 <_Z16_fetch_usbserialv>
   d4f68:	4621      	mov	r1, r4
   d4f6a:	f003 fb4f 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(thetaFnew);
   d4f6e:	f004 f96f 	bl	d9250 <_Z16_fetch_usbserialv>
   d4f72:	ed9a 0a00 	vldr	s0, [sl]
   d4f76:	2102      	movs	r1, #2
   d4f78:	f003 fc82 	bl	d8880 <_ZN5Print5printEfi>
Serial.print(",");
   d4f7c:	f004 f968 	bl	d9250 <_Z16_fetch_usbserialv>
   d4f80:	4621      	mov	r1, r4
   d4f82:	f003 fb43 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(phiFnew);
   d4f86:	f004 f963 	bl	d9250 <_Z16_fetch_usbserialv>
   d4f8a:	ed9b 0a00 	vldr	s0, [fp]
   d4f8e:	2102      	movs	r1, #2
   d4f90:	f003 fc76 	bl	d8880 <_ZN5Print5printEfi>
Serial.print(",");
   d4f94:	f004 f95c 	bl	d9250 <_Z16_fetch_usbserialv>
   d4f98:	4621      	mov	r1, r4
   d4f9a:	f003 fb37 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(thetaG);
   d4f9e:	f004 f957 	bl	d9250 <_Z16_fetch_usbserialv>
   d4fa2:	ed96 0a00 	vldr	s0, [r6]
   d4fa6:	2102      	movs	r1, #2
   d4fa8:	f003 fc6a 	bl	d8880 <_ZN5Print5printEfi>
Serial.print(",");
   d4fac:	f004 f950 	bl	d9250 <_Z16_fetch_usbserialv>
   d4fb0:	4621      	mov	r1, r4
   d4fb2:	f003 fb2b 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(phiG);
   d4fb6:	f004 f94b 	bl	d9250 <_Z16_fetch_usbserialv>
   d4fba:	ed97 0a00 	vldr	s0, [r7]
   d4fbe:	2102      	movs	r1, #2
   d4fc0:	f003 fc5e 	bl	d8880 <_ZN5Print5printEfi>
Serial.print(",");
   d4fc4:	f004 f944 	bl	d9250 <_Z16_fetch_usbserialv>
   d4fc8:	4621      	mov	r1, r4
   d4fca:	f003 fb1f 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(theta);
   d4fce:	f004 f93f 	bl	d9250 <_Z16_fetch_usbserialv>
   d4fd2:	4b24      	ldr	r3, [pc, #144]	; (d5064 <_Z19get_compass_headingv+0x67c>)
   d4fd4:	2102      	movs	r1, #2
   d4fd6:	ed93 0a00 	vldr	s0, [r3]
   d4fda:	f003 fc51 	bl	d8880 <_ZN5Print5printEfi>
Serial.print(",");
   d4fde:	f004 f937 	bl	d9250 <_Z16_fetch_usbserialv>
   d4fe2:	4621      	mov	r1, r4
   d4fe4:	f003 fb12 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(phi);
   d4fe8:	f004 f932 	bl	d9250 <_Z16_fetch_usbserialv>
   d4fec:	4b1e      	ldr	r3, [pc, #120]	; (d5068 <_Z19get_compass_headingv+0x680>)
   d4fee:	2102      	movs	r1, #2
   d4ff0:	ed93 0a00 	vldr	s0, [r3]
   d4ff4:	f003 fc44 	bl	d8880 <_ZN5Print5printEfi>
Serial.print(",");
   d4ff8:	f004 f92a 	bl	d9250 <_Z16_fetch_usbserialv>
   d4ffc:	4621      	mov	r1, r4
   d4ffe:	f003 fb05 	bl	d860c <_ZN5Print5printEPKc>
Serial.println(psi);
   d5002:	f004 f925 	bl	d9250 <_Z16_fetch_usbserialv>
   d5006:	ed95 0a00 	vldr	s0, [r5]
   d500a:	2102      	movs	r1, #2
   d500c:	f003 fc55 	bl	d88ba <_ZN5Print7printlnEfi>
phiFold=phiFnew;
   d5010:	4916      	ldr	r1, [pc, #88]	; (d506c <_Z19get_compass_headingv+0x684>)
   d5012:	f8db 3000 	ldr.w	r3, [fp]
thetaFold=thetaFnew;
   d5016:	4816      	ldr	r0, [pc, #88]	; (d5070 <_Z19get_compass_headingv+0x688>)
}
   d5018:	ed95 0a00 	vldr	s0, [r5]
phiFold=phiFnew;
   d501c:	600b      	str	r3, [r1, #0]
thetaFold=thetaFnew;
   d501e:	f8da 3000 	ldr.w	r3, [sl]
   d5022:	6003      	str	r3, [r0, #0]
}
   d5024:	b017      	add	sp, #92	; 0x5c
   d5026:	ecbd 8b08 	vpop	{d8-d11}
   d502a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d502e:	bf00      	nop
   d5030:	51eb851f 	.word	0x51eb851f
   d5034:	40191eb8 	.word	0x40191eb8
   d5038:	9999999a 	.word	0x9999999a
   d503c:	40239999 	.word	0x40239999
   d5040:	2003e464 	.word	0x2003e464
   d5044:	2003e548 	.word	0x2003e548
   d5048:	2003e468 	.word	0x2003e468
   d504c:	2003e554 	.word	0x2003e554
   d5050:	40768000 	.word	0x40768000
   d5054:	000dd5d6 	.word	0x000dd5d6
   d5058:	2003e564 	.word	0x2003e564
   d505c:	2003e568 	.word	0x2003e568
   d5060:	2003e54c 	.word	0x2003e54c
   d5064:	2003e558 	.word	0x2003e558
   d5068:	2003e53c 	.word	0x2003e53c
   d506c:	2003e544 	.word	0x2003e544
   d5070:	2003e560 	.word	0x2003e560

000d5074 <_GLOBAL__sub_I_i2ceeprom>:
}
   d5074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5076:	4b11      	ldr	r3, [pc, #68]	; (d50bc <_GLOBAL__sub_I_i2ceeprom+0x48>)
Adafruit_EEPROM_I2C i2ceeprom;
   d5078:	4811      	ldr	r0, [pc, #68]	; (d50c0 <_GLOBAL__sub_I_i2ceeprom+0x4c>)
   d507a:	2200      	movs	r2, #0
   d507c:	701a      	strb	r2, [r3, #0]
   d507e:	f002 fd19 	bl	d7ab4 <_ZN19Adafruit_EEPROM_I2CC1Ev>
Adafruit_BME280 bme; // I2C
   d5082:	4810      	ldr	r0, [pc, #64]	; (d50c4 <_GLOBAL__sub_I_i2ceeprom+0x50>)
   d5084:	f000 fc82 	bl	d598c <_ZN15Adafruit_BME280C1Ev>
Adafruit_SH1107 display = Adafruit_SH1107(64, 128, &Wire);
   d5088:	f004 fbfe 	bl	d9888 <_Z19__fetch_global_Wirev>
   d508c:	4a0e      	ldr	r2, [pc, #56]	; (d50c8 <_GLOBAL__sub_I_i2ceeprom+0x54>)
   d508e:	490f      	ldr	r1, [pc, #60]	; (d50cc <_GLOBAL__sub_I_i2ceeprom+0x58>)
   d5090:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d5094:	f04f 32ff 	mov.w	r2, #4294967295
   d5098:	4603      	mov	r3, r0
   d509a:	9200      	str	r2, [sp, #0]
   d509c:	2140      	movs	r1, #64	; 0x40
   d509e:	2280      	movs	r2, #128	; 0x80
   d50a0:	480b      	ldr	r0, [pc, #44]	; (d50d0 <_GLOBAL__sub_I_i2ceeprom+0x5c>)
   d50a2:	f002 fc81 	bl	d79a8 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d50a6:	f004 fbef 	bl	d9888 <_Z19__fetch_global_Wirev>
   d50aa:	4603      	mov	r3, r0
   d50ac:	4809      	ldr	r0, [pc, #36]	; (d50d4 <_GLOBAL__sub_I_i2ceeprom+0x60>)
   d50ae:	2228      	movs	r2, #40	; 0x28
   d50b0:	2137      	movs	r1, #55	; 0x37
}
   d50b2:	b005      	add	sp, #20
   d50b4:	f85d eb04 	ldr.w	lr, [sp], #4
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d50b8:	f001 bb0c 	b.w	d66d4 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
   d50bc:	2003e46c 	.word	0x2003e46c
   d50c0:	2003e530 	.word	0x2003e530
   d50c4:	2003e470 	.word	0x2003e470
   d50c8:	00061a80 	.word	0x00061a80
   d50cc:	000186a0 	.word	0x000186a0
   d50d0:	2003e4d4 	.word	0x2003e4d4
   d50d4:	2003e4b4 	.word	0x2003e4b4

000d50d8 <_Z13displayValuesv>:
void displayValues() {
   d50d8:	b538      	push	{r3, r4, r5, lr}
    display.clearDisplay();
   d50da:	4c37      	ldr	r4, [pc, #220]	; (d51b8 <_Z13displayValuesv+0xe0>)
    display.print(bme.readTemperature()*1.8F + 32.);
   d50dc:	4d37      	ldr	r5, [pc, #220]	; (d51bc <_Z13displayValuesv+0xe4>)
    display.clearDisplay();
   d50de:	4620      	mov	r0, r4
   d50e0:	f001 ff0c 	bl	d6efc <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d50e4:	4620      	mov	r0, r4
   d50e6:	f002 fb7c 	bl	d77e2 <_ZN15Adafruit_SH110X7displayEv>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
   d50ea:	2300      	movs	r3, #0
    display.print("Temp. = ");
   d50ec:	4934      	ldr	r1, [pc, #208]	; (d51c0 <_Z13displayValuesv+0xe8>)
   d50ee:	6123      	str	r3, [r4, #16]
   d50f0:	4620      	mov	r0, r4
   d50f2:	f003 fa8b 	bl	d860c <_ZN5Print5printEPKc>
    display.print(bme.readTemperature()*1.8F + 32.);
   d50f6:	4628      	mov	r0, r5
   d50f8:	f000 fd1c 	bl	d5b34 <_ZN15Adafruit_BME28015readTemperatureEv>
   d50fc:	eddf 7a31 	vldr	s15, [pc, #196]	; d51c4 <_Z13displayValuesv+0xec>
   d5100:	ee60 7a27 	vmul.f32	s15, s0, s15
   d5104:	ee17 0a90 	vmov	r0, s15
   d5108:	f007 f9bc 	bl	dc484 <__aeabi_f2d>
   d510c:	4b2e      	ldr	r3, [pc, #184]	; (d51c8 <_Z13displayValuesv+0xf0>)
   d510e:	2200      	movs	r2, #0
   d5110:	f007 f85a 	bl	dc1c8 <__adddf3>
   d5114:	ec41 0b10 	vmov	d0, r0, r1
   d5118:	2102      	movs	r1, #2
   d511a:	4620      	mov	r0, r4
   d511c:	f003 fbbf 	bl	d889e <_ZN5Print5printEdi>
    display.println(" °F");
   d5120:	492a      	ldr	r1, [pc, #168]	; (d51cc <_Z13displayValuesv+0xf4>)
   d5122:	4620      	mov	r0, r4
   d5124:	f003 fa89 	bl	d863a <_ZN5Print7printlnEPKc>
    display.print("Press. = ");
   d5128:	4929      	ldr	r1, [pc, #164]	; (d51d0 <_Z13displayValuesv+0xf8>)
   d512a:	4620      	mov	r0, r4
   d512c:	f003 fa6e 	bl	d860c <_ZN5Print5printEPKc>
    display.print(bme.readPressure() / 101325.0F * 760.0F);
   d5130:	4628      	mov	r0, r5
   d5132:	f000 fd2d 	bl	d5b90 <_ZN15Adafruit_BME28012readPressureEv>
   d5136:	eddf 7a27 	vldr	s15, [pc, #156]	; d51d4 <_Z13displayValuesv+0xfc>
   d513a:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d513e:	2102      	movs	r1, #2
   d5140:	4620      	mov	r0, r4
   d5142:	ed9f 0a25 	vldr	s0, [pc, #148]	; d51d8 <_Z13displayValuesv+0x100>
   d5146:	ee27 0a00 	vmul.f32	s0, s14, s0
   d514a:	f003 fb99 	bl	d8880 <_ZN5Print5printEfi>
    display.println(" mmHg");
   d514e:	4923      	ldr	r1, [pc, #140]	; (d51dc <_Z13displayValuesv+0x104>)
   d5150:	4620      	mov	r0, r4
   d5152:	f003 fa72 	bl	d863a <_ZN5Print7printlnEPKc>
    display.print("Altitude = ");
   d5156:	4922      	ldr	r1, [pc, #136]	; (d51e0 <_Z13displayValuesv+0x108>)
   d5158:	4620      	mov	r0, r4
   d515a:	f003 fa57 	bl	d860c <_ZN5Print5printEPKc>
    display.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d515e:	4628      	mov	r0, r5
   d5160:	ed9f 0a20 	vldr	s0, [pc, #128]	; d51e4 <_Z13displayValuesv+0x10c>
   d5164:	f000 fdf0 	bl	d5d48 <_ZN15Adafruit_BME28012readAltitudeEf>
   d5168:	2102      	movs	r1, #2
   d516a:	4620      	mov	r0, r4
   d516c:	f003 fb88 	bl	d8880 <_ZN5Print5printEfi>
    display.println(" m");
   d5170:	491d      	ldr	r1, [pc, #116]	; (d51e8 <_Z13displayValuesv+0x110>)
   d5172:	4620      	mov	r0, r4
   d5174:	f003 fa61 	bl	d863a <_ZN5Print7printlnEPKc>
    display.print("Humidity = ");
   d5178:	491c      	ldr	r1, [pc, #112]	; (d51ec <_Z13displayValuesv+0x114>)
   d517a:	4620      	mov	r0, r4
   d517c:	f003 fa46 	bl	d860c <_ZN5Print5printEPKc>
    display.print(bme.readHumidity());
   d5180:	4628      	mov	r0, r5
   d5182:	f000 fe81 	bl	d5e88 <_ZN15Adafruit_BME28012readHumidityEv>
   d5186:	2102      	movs	r1, #2
   d5188:	4620      	mov	r0, r4
   d518a:	f003 fb79 	bl	d8880 <_ZN5Print5printEfi>
    display.println(" %");
   d518e:	4918      	ldr	r1, [pc, #96]	; (d51f0 <_Z13displayValuesv+0x118>)
   d5190:	4620      	mov	r0, r4
   d5192:	f003 fa52 	bl	d863a <_ZN5Print7printlnEPKc>
    display.print("Compass heading");
   d5196:	4917      	ldr	r1, [pc, #92]	; (d51f4 <_Z13displayValuesv+0x11c>)
   d5198:	4620      	mov	r0, r4
   d519a:	f003 fa37 	bl	d860c <_ZN5Print5printEPKc>
    display.print(compass_heading);
   d519e:	4b16      	ldr	r3, [pc, #88]	; (d51f8 <_Z13displayValuesv+0x120>)
   d51a0:	4620      	mov	r0, r4
   d51a2:	ed93 0a00 	vldr	s0, [r3]
   d51a6:	2102      	movs	r1, #2
   d51a8:	f003 fb6a 	bl	d8880 <_ZN5Print5printEfi>
  display.display(); // actually display all of the above
   d51ac:	4620      	mov	r0, r4
  }
   d51ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.display(); // actually display all of the above
   d51b2:	f002 bb16 	b.w	d77e2 <_ZN15Adafruit_SH110X7displayEv>
   d51b6:	bf00      	nop
   d51b8:	2003e4d4 	.word	0x2003e4d4
   d51bc:	2003e470 	.word	0x2003e470
   d51c0:	000dd5d8 	.word	0x000dd5d8
   d51c4:	3fe66666 	.word	0x3fe66666
   d51c8:	40400000 	.word	0x40400000
   d51cc:	000dd5e1 	.word	0x000dd5e1
   d51d0:	000dd5e6 	.word	0x000dd5e6
   d51d4:	47c5e680 	.word	0x47c5e680
   d51d8:	443e0000 	.word	0x443e0000
   d51dc:	000dd3a4 	.word	0x000dd3a4
   d51e0:	000dd3b2 	.word	0x000dd3b2
   d51e4:	447d5000 	.word	0x447d5000
   d51e8:	000dd3be 	.word	0x000dd3be
   d51ec:	000dd3c1 	.word	0x000dd3c1
   d51f0:	000dd3cd 	.word	0x000dd3cd
   d51f4:	000dd5f0 	.word	0x000dd5f0
   d51f8:	2003e4cc 	.word	0x2003e4cc

000d51fc <loop>:
void loop(void) {
   d51fc:	b510      	push	{r4, lr}
digitalWrite(vane_switch, HIGH);
   d51fe:	4b80      	ldr	r3, [pc, #512]	; (d5400 <loop+0x204>)
void loop(void) {
   d5200:	b094      	sub	sp, #80	; 0x50
digitalWrite(vane_switch, HIGH);
   d5202:	7818      	ldrb	r0, [r3, #0]
   d5204:	2101      	movs	r1, #1
   d5206:	f004 facc 	bl	d97a2 <digitalWrite>
float vane_wind_direction = measure_wind_direction();
   d520a:	f7ff fa35 	bl	d4678 <_Z22measure_wind_directionv>
printValues();
   d520e:	f7fe ffb9 	bl	d4184 <_Z11printValuesv>
  displayValues();
   d5212:	f7ff ff61 	bl	d50d8 <_Z13displayValuesv>
  delay(delayTime);
   d5216:	4b7b      	ldr	r3, [pc, #492]	; (d5404 <loop+0x208>)
   d5218:	6818      	ldr	r0, [r3, #0]
   d521a:	f003 fbe7 	bl	d89ec <delay>
  if(!digitalRead(BUTTON_A)) display.print("A");
   d521e:	2004      	movs	r0, #4
   d5220:	f004 fad8 	bl	d97d4 <digitalRead>
   d5224:	b918      	cbnz	r0, d522e <loop+0x32>
   d5226:	4978      	ldr	r1, [pc, #480]	; (d5408 <loop+0x20c>)
   d5228:	4878      	ldr	r0, [pc, #480]	; (d540c <loop+0x210>)
   d522a:	f003 f9ef 	bl	d860c <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_B)) display.print("B");
   d522e:	2003      	movs	r0, #3
   d5230:	f004 fad0 	bl	d97d4 <digitalRead>
   d5234:	b918      	cbnz	r0, d523e <loop+0x42>
   d5236:	4976      	ldr	r1, [pc, #472]	; (d5410 <loop+0x214>)
   d5238:	4874      	ldr	r0, [pc, #464]	; (d540c <loop+0x210>)
   d523a:	f003 f9e7 	bl	d860c <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_C)) display.print("C");
   d523e:	2002      	movs	r0, #2
   d5240:	f004 fac8 	bl	d97d4 <digitalRead>
   d5244:	b918      	cbnz	r0, d524e <loop+0x52>
   d5246:	4973      	ldr	r1, [pc, #460]	; (d5414 <loop+0x218>)
   d5248:	4870      	ldr	r0, [pc, #448]	; (d540c <loop+0x210>)
   d524a:	f003 f9df 	bl	d860c <_ZN5Print5printEPKc>
  delay(10);
   d524e:	200a      	movs	r0, #10
   d5250:	f003 fbcc 	bl	d89ec <delay>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d5254:	f002 fd0e 	bl	d7c74 <os_thread_yield>
  display.display();
   d5258:	486c      	ldr	r0, [pc, #432]	; (d540c <loop+0x210>)
   d525a:	4c6f      	ldr	r4, [pc, #444]	; (d5418 <loop+0x21c>)
   d525c:	f002 fac1 	bl	d77e2 <_ZN15Adafruit_SH110X7displayEv>
print_heading_pitch_roll();
   d5260:	f7ff fac0 	bl	d47e4 <_Z24print_heading_pitch_rollv>
  Serial.println("\n\n");
   d5264:	f003 fff4 	bl	d9250 <_Z16_fetch_usbserialv>
   d5268:	496c      	ldr	r1, [pc, #432]	; (d541c <loop+0x220>)
   d526a:	f003 f9e6 	bl	d863a <_ZN5Print7printlnEPKc>
  bno.getEvent(&event);
   d526e:	a90b      	add	r1, sp, #44	; 0x2c
   d5270:	486b      	ldr	r0, [pc, #428]	; (d5420 <loop+0x224>)
   d5272:	f001 fcf5 	bl	d6c60 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  Serial.print("X: ");
   d5276:	f003 ffeb 	bl	d9250 <_Z16_fetch_usbserialv>
   d527a:	496a      	ldr	r1, [pc, #424]	; (d5424 <loop+0x228>)
   d527c:	f003 f9c6 	bl	d860c <_ZN5Print5printEPKc>
  Serial.print(event.orientation.x, 4);
   d5280:	f003 ffe6 	bl	d9250 <_Z16_fetch_usbserialv>
   d5284:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   d5288:	2104      	movs	r1, #4
   d528a:	f003 faf9 	bl	d8880 <_ZN5Print5printEfi>
  Serial.print("\tY: ");
   d528e:	f003 ffdf 	bl	d9250 <_Z16_fetch_usbserialv>
   d5292:	4965      	ldr	r1, [pc, #404]	; (d5428 <loop+0x22c>)
   d5294:	f003 f9ba 	bl	d860c <_ZN5Print5printEPKc>
  Serial.print(event.orientation.y, 4);
   d5298:	f003 ffda 	bl	d9250 <_Z16_fetch_usbserialv>
   d529c:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   d52a0:	2104      	movs	r1, #4
   d52a2:	f003 faed 	bl	d8880 <_ZN5Print5printEfi>
  Serial.print("\tZ: ");
   d52a6:	f003 ffd3 	bl	d9250 <_Z16_fetch_usbserialv>
   d52aa:	4960      	ldr	r1, [pc, #384]	; (d542c <loop+0x230>)
   d52ac:	f003 f9ae 	bl	d860c <_ZN5Print5printEPKc>
  Serial.print(event.orientation.z, 4);
   d52b0:	f003 ffce 	bl	d9250 <_Z16_fetch_usbserialv>
   d52b4:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   d52b8:	2104      	movs	r1, #4
   d52ba:	f003 fae1 	bl	d8880 <_ZN5Print5printEfi>
  Serial.println("");
   d52be:	f003 ffc7 	bl	d9250 <_Z16_fetch_usbserialv>
   d52c2:	495b      	ldr	r1, [pc, #364]	; (d5430 <loop+0x234>)
   d52c4:	f003 f9b9 	bl	d863a <_ZN5Print7printlnEPKc>
  Serial.println("\n\n");
   d52c8:	f003 ffc2 	bl	d9250 <_Z16_fetch_usbserialv>
   d52cc:	4953      	ldr	r1, [pc, #332]	; (d541c <loop+0x220>)
   d52ce:	f003 f9b4 	bl	d863a <_ZN5Print7printlnEPKc>
  compass_heading = event.orientation.x +285;
   d52d2:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   d52d6:	ed9f 7a57 	vldr	s14, [pc, #348]	; d5434 <loop+0x238>
   d52da:	ee77 7a87 	vadd.f32	s15, s15, s14
  if(compass_heading > 360) {
   d52de:	ed9f 7a56 	vldr	s14, [pc, #344]	; d5438 <loop+0x23c>
   d52e2:	eef4 7ac7 	vcmpe.f32	s15, s14
   d52e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    compass_heading = compass_heading - 360;
   d52ea:	bfc8      	it	gt
   d52ec:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
   d52f0:	edc4 7a00 	vstr	s15, [r4]
  Serial.print("compass heading:  ");
   d52f4:	f003 ffac 	bl	d9250 <_Z16_fetch_usbserialv>
   d52f8:	4950      	ldr	r1, [pc, #320]	; (d543c <loop+0x240>)
   d52fa:	f003 f987 	bl	d860c <_ZN5Print5printEPKc>
  Serial.print(compass_heading, 4);
   d52fe:	f003 ffa7 	bl	d9250 <_Z16_fetch_usbserialv>
   d5302:	2104      	movs	r1, #4
   d5304:	ed94 0a00 	vldr	s0, [r4]
  bno_compass_heading = get_compass_heading();
   d5308:	4c4d      	ldr	r4, [pc, #308]	; (d5440 <loop+0x244>)
  Serial.print(compass_heading, 4);
   d530a:	f003 fab9 	bl	d8880 <_ZN5Print5printEfi>
  bno_compass_heading = get_compass_heading();
   d530e:	f7ff fb6b 	bl	d49e8 <_Z19get_compass_headingv>
   d5312:	ed84 0a00 	vstr	s0, [r4]
  Serial.print("psi from bno055\n");
   d5316:	f003 ff9b 	bl	d9250 <_Z16_fetch_usbserialv>
   d531a:	494a      	ldr	r1, [pc, #296]	; (d5444 <loop+0x248>)
   d531c:	f003 f976 	bl	d860c <_ZN5Print5printEPKc>
  Serial.print(bno_compass_heading);
   d5320:	f003 ff96 	bl	d9250 <_Z16_fetch_usbserialv>
   d5324:	ed94 0a00 	vldr	s0, [r4]
   d5328:	2102      	movs	r1, #2
   d532a:	f003 faa9 	bl	d8880 <_ZN5Print5printEfi>
  Serial.print("\nunix time = ");
   d532e:	f003 ff8f 	bl	d9250 <_Z16_fetch_usbserialv>
   d5332:	4945      	ldr	r1, [pc, #276]	; (d5448 <loop+0x24c>)
   d5334:	f003 f96a 	bl	d860c <_ZN5Print5printEPKc>
  Serial.print(Time.now());
   d5338:	f003 ff8a 	bl	d9250 <_Z16_fetch_usbserialv>
   d533c:	4604      	mov	r4, r0
   d533e:	f003 fb2f 	bl	d89a0 <_ZN9TimeClass3nowEv>
   d5342:	220a      	movs	r2, #10
   d5344:	4601      	mov	r1, r0
size_t Print::print(T n, int base)
   d5346:	4620      	mov	r0, r4
   d5348:	f7fe fef2 	bl	d4130 <_ZN5Print5printIlLi0EEEjT_i.part.0>
Serial.print("time base value =");
   d534c:	f003 ff80 	bl	d9250 <_Z16_fetch_usbserialv>
   d5350:	493e      	ldr	r1, [pc, #248]	; (d544c <loop+0x250>)
   d5352:	f003 f95b 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(time_base);
   d5356:	f003 ff7b 	bl	d9250 <_Z16_fetch_usbserialv>
   d535a:	230a      	movs	r3, #10
   d535c:	9300      	str	r3, [sp, #0]
   d535e:	4b3c      	ldr	r3, [pc, #240]	; (d5450 <loop+0x254>)
   d5360:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5364:	f7fe fec4 	bl	d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>
Serial.print("\n");
   d5368:	f003 ff72 	bl	d9250 <_Z16_fetch_usbserialv>
   d536c:	4939      	ldr	r1, [pc, #228]	; (d5454 <loop+0x258>)
   d536e:	f003 f94d 	bl	d860c <_ZN5Print5printEPKc>
  Serial.print("\n");
   d5372:	f003 ff6d 	bl	d9250 <_Z16_fetch_usbserialv>
   d5376:	4937      	ldr	r1, [pc, #220]	; (d5454 <loop+0x258>)
   d5378:	f003 f948 	bl	d860c <_ZN5Print5printEPKc>
  Particle.publish("office temperature", String(bme.readTemperature()*1.8F + 32.));
   d537c:	4836      	ldr	r0, [pc, #216]	; (d5458 <loop+0x25c>)
   d537e:	f000 fbd9 	bl	d5b34 <_ZN15Adafruit_BME28015readTemperatureEv>
   d5382:	eddf 7a36 	vldr	s15, [pc, #216]	; d545c <loop+0x260>
   d5386:	ee60 7a27 	vmul.f32	s15, s0, s15
   d538a:	ee17 0a90 	vmov	r0, s15
   d538e:	f007 f879 	bl	dc484 <__aeabi_f2d>
   d5392:	4b33      	ldr	r3, [pc, #204]	; (d5460 <loop+0x264>)
   d5394:	2200      	movs	r2, #0
   d5396:	f006 ff17 	bl	dc1c8 <__adddf3>
   d539a:	ec41 0b10 	vmov	d0, r0, r1
   d539e:	2106      	movs	r1, #6
   d53a0:	a805      	add	r0, sp, #20
   d53a2:	f003 f8cc 	bl	d853e <_ZN6StringC1Edi>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d53a6:	4b2f      	ldr	r3, [pc, #188]	; (d5464 <loop+0x268>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d53a8:	9a05      	ldr	r2, [sp, #20]
   d53aa:	781b      	ldrb	r3, [r3, #0]
   d53ac:	f88d 3000 	strb.w	r3, [sp]
   d53b0:	492d      	ldr	r1, [pc, #180]	; (d5468 <loop+0x26c>)
   d53b2:	233c      	movs	r3, #60	; 0x3c
   d53b4:	a803      	add	r0, sp, #12
   d53b6:	f003 fcff 	bl	d8db8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d53ba:	9c04      	ldr	r4, [sp, #16]
   d53bc:	b17c      	cbz	r4, d53de <loop+0x1e2>
      if (--_M_use_count == 0)
   d53be:	6863      	ldr	r3, [r4, #4]
   d53c0:	3b01      	subs	r3, #1
   d53c2:	6063      	str	r3, [r4, #4]
   d53c4:	b95b      	cbnz	r3, d53de <loop+0x1e2>
          _M_dispose();
   d53c6:	6823      	ldr	r3, [r4, #0]
   d53c8:	4620      	mov	r0, r4
   d53ca:	689b      	ldr	r3, [r3, #8]
   d53cc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d53ce:	68a3      	ldr	r3, [r4, #8]
   d53d0:	3b01      	subs	r3, #1
   d53d2:	60a3      	str	r3, [r4, #8]
   d53d4:	b91b      	cbnz	r3, d53de <loop+0x1e2>
            _M_destroy();
   d53d6:	6823      	ldr	r3, [r4, #0]
   d53d8:	4620      	mov	r0, r4
   d53da:	68db      	ldr	r3, [r3, #12]
   d53dc:	4798      	blx	r3
   d53de:	a805      	add	r0, sp, #20
   d53e0:	f003 f850 	bl	d8484 <_ZN6StringD1Ev>
    bno.getSensorOffsets(newCalib);
   d53e4:	a905      	add	r1, sp, #20
   d53e6:	480e      	ldr	r0, [pc, #56]	; (d5420 <loop+0x224>)
   d53e8:	f001 fb1c 	bl	d6a24 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>
    displaySensorOffsets(newCalib);
   d53ec:	a805      	add	r0, sp, #20
   d53ee:	f7fe ffe1 	bl	d43b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
      delay(BNO055_SAMPLERATE_DELAY_MS);
   d53f2:	f242 7010 	movw	r0, #10000	; 0x2710
   d53f6:	f003 faf9 	bl	d89ec <delay>
}
   d53fa:	b014      	add	sp, #80	; 0x50
   d53fc:	bd10      	pop	{r4, pc}
   d53fe:	bf00      	nop
   d5400:	2003e3d5 	.word	0x2003e3d5
   d5404:	2003e4d0 	.word	0x2003e4d0
   d5408:	000dd600 	.word	0x000dd600
   d540c:	2003e4d4 	.word	0x2003e4d4
   d5410:	000dda59 	.word	0x000dda59
   d5414:	000dd602 	.word	0x000dd602
   d5418:	2003e4cc 	.word	0x2003e4cc
   d541c:	000dd604 	.word	0x000dd604
   d5420:	2003e4b4 	.word	0x2003e4b4
   d5424:	000dd607 	.word	0x000dd607
   d5428:	000dd60b 	.word	0x000dd60b
   d542c:	000dd610 	.word	0x000dd610
   d5430:	000dd54e 	.word	0x000dd54e
   d5434:	438e8000 	.word	0x438e8000
   d5438:	43b40000 	.word	0x43b40000
   d543c:	000dd615 	.word	0x000dd615
   d5440:	2003e4c8 	.word	0x2003e4c8
   d5444:	000dd628 	.word	0x000dd628
   d5448:	000dd639 	.word	0x000dd639
   d544c:	000dd647 	.word	0x000dd647
   d5450:	2003e570 	.word	0x2003e570
   d5454:	000dd605 	.word	0x000dd605
   d5458:	2003e470 	.word	0x2003e470
   d545c:	3fe66666 	.word	0x3fe66666
   d5460:	40400000 	.word	0x40400000
   d5464:	2003e46c 	.word	0x2003e46c
   d5468:	000dd659 	.word	0x000dd659

000d546c <setup>:
void setup(void) {
   d546c:	b570      	push	{r4, r5, r6, lr}
   d546e:	b0a2      	sub	sp, #136	; 0x88
time_base = Time.now();
   d5470:	f003 fa96 	bl	d89a0 <_ZN9TimeClass3nowEv>
   d5474:	4cb5      	ldr	r4, [pc, #724]	; (d574c <setup+0x2e0>)
   d5476:	17c1      	asrs	r1, r0, #31
   d5478:	e9c4 0100 	strd	r0, r1, [r4]
Serial.print("time base value =");
   d547c:	f003 fee8 	bl	d9250 <_Z16_fetch_usbserialv>
   d5480:	49b3      	ldr	r1, [pc, #716]	; (d5750 <setup+0x2e4>)
   d5482:	f003 f8c3 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(time_base);
   d5486:	f003 fee3 	bl	d9250 <_Z16_fetch_usbserialv>
   d548a:	230a      	movs	r3, #10
   d548c:	9300      	str	r3, [sp, #0]
   d548e:	e9d4 2300 	ldrd	r2, r3, [r4]
   d5492:	f7fe fe2d 	bl	d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>
Serial.print("\n");
   d5496:	f003 fedb 	bl	d9250 <_Z16_fetch_usbserialv>
   d549a:	49ae      	ldr	r1, [pc, #696]	; (d5754 <setup+0x2e8>)
   d549c:	f003 f8b6 	bl	d860c <_ZN5Print5printEPKc>
LastValue = 1;
   d54a0:	4bad      	ldr	r3, [pc, #692]	; (d5758 <setup+0x2ec>)
   d54a2:	2501      	movs	r5, #1
   d54a4:	601d      	str	r5, [r3, #0]
pinMode(vane_pin, INPUT);
   d54a6:	4bad      	ldr	r3, [pc, #692]	; (d575c <setup+0x2f0>)
   d54a8:	2100      	movs	r1, #0
   d54aa:	7818      	ldrb	r0, [r3, #0]
   d54ac:	f004 f968 	bl	d9780 <pinMode>
pinMode(vane_switch, OUTPUT);
   d54b0:	4bab      	ldr	r3, [pc, #684]	; (d5760 <setup+0x2f4>)
   d54b2:	4629      	mov	r1, r5
   d54b4:	7818      	ldrb	r0, [r3, #0]
pinMode(wind_pin, INPUT);
   d54b6:	4dab      	ldr	r5, [pc, #684]	; (d5764 <setup+0x2f8>)
pinMode(vane_switch, OUTPUT);
   d54b8:	f004 f962 	bl	d9780 <pinMode>
Serial.println("Vane Value\tDirection\tHeading");
   d54bc:	f003 fec8 	bl	d9250 <_Z16_fetch_usbserialv>
   d54c0:	49a9      	ldr	r1, [pc, #676]	; (d5768 <setup+0x2fc>)
   d54c2:	f003 f8ba 	bl	d863a <_ZN5Print7printlnEPKc>
pinMode(wind_pin, INPUT);
   d54c6:	7828      	ldrb	r0, [r5, #0]
   d54c8:	2100      	movs	r1, #0
   d54ca:	f004 f959 	bl	d9780 <pinMode>
attachInterrupt(wind_pin, isr_rotation, FALLING);
   d54ce:	2300      	movs	r3, #0
   d54d0:	9300      	str	r3, [sp, #0]
   d54d2:	2202      	movs	r2, #2
   d54d4:	f04f 33ff 	mov.w	r3, #4294967295
   d54d8:	49a4      	ldr	r1, [pc, #656]	; (d576c <setup+0x300>)
   d54da:	7828      	ldrb	r0, [r5, #0]
   d54dc:	f003 fee0 	bl	d92a0 <_Z15attachInterrupttPFvvE13InterruptModeah>
Serial.println("Davis Wind Speed Test");
   d54e0:	f003 feb6 	bl	d9250 <_Z16_fetch_usbserialv>
   d54e4:	49a2      	ldr	r1, [pc, #648]	; (d5770 <setup+0x304>)
   d54e6:	f003 f8a8 	bl	d863a <_ZN5Print7printlnEPKc>
Serial.println("Rotations\tMPH");
   d54ea:	f003 feb1 	bl	d9250 <_Z16_fetch_usbserialv>
   d54ee:	49a1      	ldr	r1, [pc, #644]	; (d5774 <setup+0x308>)
   d54f0:	f003 f8a3 	bl	d863a <_ZN5Print7printlnEPKc>
  Serial.begin(115200);
   d54f4:	f003 feac 	bl	d9250 <_Z16_fetch_usbserialv>
   d54f8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d54fc:	f003 fe96 	bl	d922c <_ZN9USBSerial5beginEl>
   d5500:	4625      	mov	r5, r4
    while(!Serial);    // time to get serial running
   d5502:	f003 fea5 	bl	d9250 <_Z16_fetch_usbserialv>
   d5506:	f003 fe98 	bl	d923a <_ZN9USBSerialcvbEv>
   d550a:	2800      	cmp	r0, #0
   d550c:	d0f9      	beq.n	d5502 <setup+0x96>
  display.begin(0x3C, true); // Address 0x3C default
   d550e:	4c9a      	ldr	r4, [pc, #616]	; (d5778 <setup+0x30c>)
    Serial.println(F("BME280 test"));
   d5510:	f003 fe9e 	bl	d9250 <_Z16_fetch_usbserialv>
   d5514:	4999      	ldr	r1, [pc, #612]	; (d577c <setup+0x310>)
   d5516:	f003 f89a 	bl	d864e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("128x64 OLED FeatherWing test");
   d551a:	f003 fe99 	bl	d9250 <_Z16_fetch_usbserialv>
   d551e:	4998      	ldr	r1, [pc, #608]	; (d5780 <setup+0x314>)
   d5520:	f003 f88b 	bl	d863a <_ZN5Print7printlnEPKc>
  display.begin(0x3C, true); // Address 0x3C default
   d5524:	2201      	movs	r2, #1
   d5526:	213c      	movs	r1, #60	; 0x3c
   d5528:	4620      	mov	r0, r4
   d552a:	f002 fa51 	bl	d79d0 <_ZN15Adafruit_SH11075beginEhb>
  Serial.println("OLED begun");
   d552e:	f003 fe8f 	bl	d9250 <_Z16_fetch_usbserialv>
   d5532:	4994      	ldr	r1, [pc, #592]	; (d5784 <setup+0x318>)
   d5534:	f003 f881 	bl	d863a <_ZN5Print7printlnEPKc>
  display.display();
   d5538:	4620      	mov	r0, r4
   d553a:	f002 f952 	bl	d77e2 <_ZN15Adafruit_SH110X7displayEv>
  delay(1000);
   d553e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5542:	f003 fa53 	bl	d89ec <delay>
  display.clearDisplay();
   d5546:	4620      	mov	r0, r4
   d5548:	f001 fcd8 	bl	d6efc <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d554c:	4620      	mov	r0, r4
   d554e:	f002 f948 	bl	d77e2 <_ZN15Adafruit_SH110X7displayEv>
  display.setRotation(1);
   d5552:	2101      	movs	r1, #1
   d5554:	4620      	mov	r0, r4
   d5556:	f001 fed7 	bl	d7308 <_ZN12Adafruit_GFX11setRotationEh>
  Serial.println("Button test");
   d555a:	f003 fe79 	bl	d9250 <_Z16_fetch_usbserialv>
   d555e:	498a      	ldr	r1, [pc, #552]	; (d5788 <setup+0x31c>)
   d5560:	f003 f86b 	bl	d863a <_ZN5Print7printlnEPKc>
  pinMode(BUTTON_A, INPUT_PULLUP);
   d5564:	2102      	movs	r1, #2
   d5566:	2004      	movs	r0, #4
   d5568:	f004 f90a 	bl	d9780 <pinMode>
  pinMode(BUTTON_B, INPUT_PULLUP);
   d556c:	2102      	movs	r1, #2
   d556e:	2003      	movs	r0, #3
   d5570:	f004 f906 	bl	d9780 <pinMode>
  pinMode(BUTTON_C, INPUT_PULLUP);
   d5574:	2102      	movs	r1, #2
   d5576:	4608      	mov	r0, r1
   d5578:	f004 f902 	bl	d9780 <pinMode>
  display.setTextSize(1);
   d557c:	2101      	movs	r1, #1
   d557e:	4620      	mov	r0, r4
   d5580:	f002 f929 	bl	d77d6 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d5584:	2600      	movs	r6, #0
   d5586:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d558a:	e9c4 6304 	strd	r6, r3, [r4, #16]
  display.print("BigdaddyAddie weather station!\n");
   d558e:	497f      	ldr	r1, [pc, #508]	; (d578c <setup+0x320>)
   d5590:	4620      	mov	r0, r4
   d5592:	f003 f83b 	bl	d860c <_ZN5Print5printEPKc>
  display.print("connected!\n");
   d5596:	497e      	ldr	r1, [pc, #504]	; (d5790 <setup+0x324>)
   d5598:	4620      	mov	r0, r4
   d559a:	f003 f837 	bl	d860c <_ZN5Print5printEPKc>
  display.display(); // actually display all of the above
   d559e:	4620      	mov	r0, r4
   d55a0:	f002 f91f 	bl	d77e2 <_ZN15Adafruit_SH110X7displayEv>
    status = bme.begin();  
   d55a4:	487b      	ldr	r0, [pc, #492]	; (d5794 <setup+0x328>)
   d55a6:	f000 fe74 	bl	d6292 <_ZN15Adafruit_BME2805beginEv>
    if (!status) {
   d55aa:	bb78      	cbnz	r0, d560c <setup+0x1a0>
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d55ac:	f003 fe50 	bl	d9250 <_Z16_fetch_usbserialv>
   d55b0:	4979      	ldr	r1, [pc, #484]	; (d5798 <setup+0x32c>)
   d55b2:	f003 f842 	bl	d863a <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),16);
   d55b6:	f003 fe4b 	bl	d9250 <_Z16_fetch_usbserialv>
   d55ba:	4978      	ldr	r1, [pc, #480]	; (d579c <setup+0x330>)
   d55bc:	f003 f826 	bl	d860c <_ZN5Print5printEPKc>
   d55c0:	f003 fe46 	bl	d9250 <_Z16_fetch_usbserialv>
   d55c4:	4604      	mov	r4, r0
   d55c6:	4873      	ldr	r0, [pc, #460]	; (d5794 <setup+0x328>)
   d55c8:	f000 f9e4 	bl	d5994 <_ZN15Adafruit_BME2808sensorIDEv>
        return printNumber(val, base) + t;
   d55cc:	2210      	movs	r2, #16
   d55ce:	4601      	mov	r1, r0
   d55d0:	4620      	mov	r0, r4
   d55d2:	f003 f83e 	bl	d8652 <_ZN5Print11printNumberEmh>
        n += println();
   d55d6:	4620      	mov	r0, r4
   d55d8:	f003 f823 	bl	d8622 <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d55dc:	f003 fe38 	bl	d9250 <_Z16_fetch_usbserialv>
   d55e0:	496f      	ldr	r1, [pc, #444]	; (d57a0 <setup+0x334>)
   d55e2:	f003 f813 	bl	d860c <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d55e6:	f003 fe33 	bl	d9250 <_Z16_fetch_usbserialv>
   d55ea:	496e      	ldr	r1, [pc, #440]	; (d57a4 <setup+0x338>)
   d55ec:	f003 f80e 	bl	d860c <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d55f0:	f003 fe2e 	bl	d9250 <_Z16_fetch_usbserialv>
   d55f4:	496c      	ldr	r1, [pc, #432]	; (d57a8 <setup+0x33c>)
   d55f6:	f003 f809 	bl	d860c <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d55fa:	f003 fe29 	bl	d9250 <_Z16_fetch_usbserialv>
   d55fe:	496b      	ldr	r1, [pc, #428]	; (d57ac <setup+0x340>)
   d5600:	f003 f804 	bl	d860c <_ZN5Print5printEPKc>
        while (1) delay(10);
   d5604:	200a      	movs	r0, #10
   d5606:	f003 f9f1 	bl	d89ec <delay>
   d560a:	e7fb      	b.n	d5604 <setup+0x198>
if (i2ceeprom.begin(0x50)) {  // you can stick the new i2c addr in here, e.g. begin(0x51);
   d560c:	f004 f93c 	bl	d9888 <_Z19__fetch_global_Wirev>
   d5610:	2150      	movs	r1, #80	; 0x50
   d5612:	4602      	mov	r2, r0
   d5614:	4866      	ldr	r0, [pc, #408]	; (d57b0 <setup+0x344>)
   d5616:	f002 fa51 	bl	d7abc <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>
   d561a:	b190      	cbz	r0, d5642 <setup+0x1d6>
    Serial.println("Found I2C EEPROM");
   d561c:	f003 fe18 	bl	d9250 <_Z16_fetch_usbserialv>
   d5620:	4964      	ldr	r1, [pc, #400]	; (d57b4 <setup+0x348>)
   d5622:	f003 f80a 	bl	d863a <_ZN5Print7printlnEPKc>
eeprom_test();
   d5626:	f7fe ffb7 	bl	d4598 <_Z11eeprom_testv>
  if(!bno.begin())
   d562a:	4863      	ldr	r0, [pc, #396]	; (d57b8 <setup+0x34c>)
   d562c:	210c      	movs	r1, #12
   d562e:	f001 f937 	bl	d68a0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
   d5632:	4604      	mov	r4, r0
   d5634:	b970      	cbnz	r0, d5654 <setup+0x1e8>
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
   d5636:	f003 fe0b 	bl	d9250 <_Z16_fetch_usbserialv>
   d563a:	4960      	ldr	r1, [pc, #384]	; (d57bc <setup+0x350>)
   d563c:	f002 ffe6 	bl	d860c <_ZN5Print5printEPKc>
    while(1);
   d5640:	e7fe      	b.n	d5640 <setup+0x1d4>
    Serial.println("I2C EEPROM not identified ... check your connections?\r\n");
   d5642:	f003 fe05 	bl	d9250 <_Z16_fetch_usbserialv>
   d5646:	495e      	ldr	r1, [pc, #376]	; (d57c0 <setup+0x354>)
   d5648:	f002 fff7 	bl	d863a <_ZN5Print7printlnEPKc>
    while (1) delay(10);
   d564c:	200a      	movs	r0, #10
   d564e:	f003 f9cd 	bl	d89ec <delay>
   d5652:	e7fb      	b.n	d564c <setup+0x1e0>
   Serial.print("time base value =");
   d5654:	f003 fdfc 	bl	d9250 <_Z16_fetch_usbserialv>
   d5658:	493d      	ldr	r1, [pc, #244]	; (d5750 <setup+0x2e4>)
   d565a:	f002 ffd7 	bl	d860c <_ZN5Print5printEPKc>
Serial.print(time_base);
   d565e:	f003 fdf7 	bl	d9250 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d5662:	230a      	movs	r3, #10
   d5664:	9300      	str	r3, [sp, #0]
   d5666:	e9d5 2300 	ldrd	r2, r3, [r5]
   d566a:	f7fe fd41 	bl	d40f0 <_ZN5Print5printIxLi0EEEjT_i.part.0>
Serial.print("\n");
   d566e:	f003 fdef 	bl	d9250 <_Z16_fetch_usbserialv>
   d5672:	4938      	ldr	r1, [pc, #224]	; (d5754 <setup+0x2e8>)
   d5674:	f002 ffca 	bl	d860c <_ZN5Print5printEPKc>
  delay(1000);
   d5678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d567c:	f003 f9b6 	bl	d89ec <delay>
  displaySensorDetails();
   d5680:	f7fe fe0c 	bl	d429c <_Z20displaySensorDetailsv>
    EEPROM.get(eeAddress, bnoID);
   d5684:	f004 f8d0 	bl	d9828 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d5688:	2204      	movs	r2, #4
   d568a:	a902      	add	r1, sp, #8
   d568c:	4630      	mov	r0, r6
   d568e:	f002 fad1 	bl	d7c34 <HAL_EEPROM_Get>
    bno.getSensor(&sensor);
   d5692:	4849      	ldr	r0, [pc, #292]	; (d57b8 <setup+0x34c>)
   d5694:	a918      	add	r1, sp, #96	; 0x60
   d5696:	f000 fff5 	bl	d6684 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    if (bnoID != sensor.sensor_id)
   d569a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   d569c:	9b02      	ldr	r3, [sp, #8]
   d569e:	429a      	cmp	r2, r3
   d56a0:	d036      	beq.n	d5710 <setup+0x2a4>
        Serial.println("\nNo Calibration Data for this sensor exists in EEPROM");
   d56a2:	f003 fdd5 	bl	d9250 <_Z16_fetch_usbserialv>
   d56a6:	4947      	ldr	r1, [pc, #284]	; (d57c4 <setup+0x358>)
   d56a8:	f002 ffc7 	bl	d863a <_ZN5Print7printlnEPKc>
        delay(500);
   d56ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d56b0:	f003 f99c 	bl	d89ec <delay>
    bool foundCalib = false;
   d56b4:	4634      	mov	r4, r6
    delay(1000);
   d56b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d56ba:	f003 f997 	bl	d89ec <delay>
    displaySensorDetails();
   d56be:	f7fe fded 	bl	d429c <_Z20displaySensorDetailsv>
    displaySensorStatus();
   d56c2:	f7ff f8db 	bl	d487c <_Z19displaySensorStatusv>
    bno.setExtCrystalUse(true);
   d56c6:	2101      	movs	r1, #1
   d56c8:	483b      	ldr	r0, [pc, #236]	; (d57b8 <setup+0x34c>)
   d56ca:	f001 f837 	bl	d673c <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
   d56ce:	f002 faa1 	bl	d7c14 <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
   d56d2:	4b3d      	ldr	r3, [pc, #244]	; (d57c8 <setup+0x35c>)
    bno.getEvent(&event);
   d56d4:	a90f      	add	r1, sp, #60	; 0x3c
millisOld=millis();
   d56d6:	6018      	str	r0, [r3, #0]
    bno.getEvent(&event);
   d56d8:	4837      	ldr	r0, [pc, #220]	; (d57b8 <setup+0x34c>)
   d56da:	f001 fac1 	bl	d6c60 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
    if (foundCalib){
   d56de:	2c00      	cmp	r4, #0
   d56e0:	d07c      	beq.n	d57dc <setup+0x370>
        Serial.println("Move sensor slightly to calibrate magnetometers");
   d56e2:	f003 fdb5 	bl	d9250 <_Z16_fetch_usbserialv>
   d56e6:	4939      	ldr	r1, [pc, #228]	; (d57cc <setup+0x360>)
        while (!bno.isFullyCalibrated())
   d56e8:	4c33      	ldr	r4, [pc, #204]	; (d57b8 <setup+0x34c>)
        Serial.println("Move sensor slightly to calibrate magnetometers");
   d56ea:	f002 ffa6 	bl	d863a <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
   d56ee:	4620      	mov	r0, r4
   d56f0:	f001 f95f 	bl	d69b2 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d56f4:	2800      	cmp	r0, #0
   d56f6:	f040 80b1 	bne.w	d585c <setup+0x3f0>
            bno.getEvent(&event);
   d56fa:	a90f      	add	r1, sp, #60	; 0x3c
   d56fc:	4620      	mov	r0, r4
   d56fe:	f001 faaf 	bl	d6c60 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            displayCalStatus();
   d5702:	f7ff f90b 	bl	d491c <_Z16displayCalStatusv>
            delay(BNO055_STARTUP_SAMPLE_DELAY_MS);
   d5706:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d570a:	f003 f96f 	bl	d89ec <delay>
        while (!bno.isFullyCalibrated())
   d570e:	e7ee      	b.n	d56ee <setup+0x282>
        Serial.println("\nFound Calibration for this sensor in EEPROM.");
   d5710:	f003 fd9e 	bl	d9250 <_Z16_fetch_usbserialv>
   d5714:	492e      	ldr	r1, [pc, #184]	; (d57d0 <setup+0x364>)
   d5716:	f002 ff90 	bl	d863a <_ZN5Print7printlnEPKc>
        EEPROM.get(eeAddress, calibrationData);
   d571a:	f004 f885 	bl	d9828 <_Z21__fetch_global_EEPROMv>
   d571e:	2216      	movs	r2, #22
   d5720:	a903      	add	r1, sp, #12
   d5722:	2004      	movs	r0, #4
   d5724:	f002 fa86 	bl	d7c34 <HAL_EEPROM_Get>
        displaySensorOffsets(calibrationData);
   d5728:	a803      	add	r0, sp, #12
   d572a:	f7fe fe43 	bl	d43b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
        Serial.println("\n\nRestoring Calibration data to the BNO055...");
   d572e:	f003 fd8f 	bl	d9250 <_Z16_fetch_usbserialv>
   d5732:	4928      	ldr	r1, [pc, #160]	; (d57d4 <setup+0x368>)
   d5734:	f002 ff81 	bl	d863a <_ZN5Print7printlnEPKc>
        bno.setSensorOffsets(calibrationData);
   d5738:	a903      	add	r1, sp, #12
   d573a:	481f      	ldr	r0, [pc, #124]	; (d57b8 <setup+0x34c>)
   d573c:	f001 f821 	bl	d6782 <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>
        Serial.println("\n\nCalibration data loaded into BNO055");
   d5740:	f003 fd86 	bl	d9250 <_Z16_fetch_usbserialv>
   d5744:	4924      	ldr	r1, [pc, #144]	; (d57d8 <setup+0x36c>)
   d5746:	f002 ff78 	bl	d863a <_ZN5Print7printlnEPKc>
        foundCalib = true;
   d574a:	e7b4      	b.n	d56b6 <setup+0x24a>
   d574c:	2003e570 	.word	0x2003e570
   d5750:	000dd647 	.word	0x000dd647
   d5754:	000dd605 	.word	0x000dd605
   d5758:	2003e454 	.word	0x2003e454
   d575c:	2003e3d4 	.word	0x2003e3d4
   d5760:	2003e3d5 	.word	0x2003e3d5
   d5764:	2003e3d6 	.word	0x2003e3d6
   d5768:	000dd66c 	.word	0x000dd66c
   d576c:	000d40c9 	.word	0x000d40c9
   d5770:	000dd689 	.word	0x000dd689
   d5774:	000dd69f 	.word	0x000dd69f
   d5778:	2003e4d4 	.word	0x2003e4d4
   d577c:	000dd6ad 	.word	0x000dd6ad
   d5780:	000dd6b9 	.word	0x000dd6b9
   d5784:	000dd6d6 	.word	0x000dd6d6
   d5788:	000dd6e1 	.word	0x000dd6e1
   d578c:	000dd6ed 	.word	0x000dd6ed
   d5790:	000dd70d 	.word	0x000dd70d
   d5794:	2003e470 	.word	0x2003e470
   d5798:	000dd719 	.word	0x000dd719
   d579c:	000dd761 	.word	0x000dd761
   d57a0:	000dd772 	.word	0x000dd772
   d57a4:	000dd7b9 	.word	0x000dd7b9
   d57a8:	000dd7e3 	.word	0x000dd7e3
   d57ac:	000dd80d 	.word	0x000dd80d
   d57b0:	2003e530 	.word	0x2003e530
   d57b4:	000dd837 	.word	0x000dd837
   d57b8:	2003e4b4 	.word	0x2003e4b4
   d57bc:	000dd880 	.word	0x000dd880
   d57c0:	000dd848 	.word	0x000dd848
   d57c4:	000dd8bd 	.word	0x000dd8bd
   d57c8:	2003e538 	.word	0x2003e538
   d57cc:	000dd975 	.word	0x000dd975
   d57d0:	000dd8f3 	.word	0x000dd8f3
   d57d4:	000dd921 	.word	0x000dd921
   d57d8:	000dd94f 	.word	0x000dd94f
        Serial.println("Please Calibrate Sensor: ");
   d57dc:	f003 fd38 	bl	d9250 <_Z16_fetch_usbserialv>
   d57e0:	493e      	ldr	r1, [pc, #248]	; (d58dc <setup+0x470>)
        while (!bno.isFullyCalibrated())
   d57e2:	4c3f      	ldr	r4, [pc, #252]	; (d58e0 <setup+0x474>)
            Serial.print("X: ");
   d57e4:	4e3f      	ldr	r6, [pc, #252]	; (d58e4 <setup+0x478>)
            Serial.print("\tY: ");
   d57e6:	4d40      	ldr	r5, [pc, #256]	; (d58e8 <setup+0x47c>)
        Serial.println("Please Calibrate Sensor: ");
   d57e8:	f002 ff27 	bl	d863a <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
   d57ec:	4620      	mov	r0, r4
   d57ee:	f001 f8e0 	bl	d69b2 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d57f2:	bb98      	cbnz	r0, d585c <setup+0x3f0>
            bno.getEvent(&event);
   d57f4:	a90f      	add	r1, sp, #60	; 0x3c
   d57f6:	4620      	mov	r0, r4
   d57f8:	f001 fa32 	bl	d6c60 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            Serial.print("X: ");
   d57fc:	f003 fd28 	bl	d9250 <_Z16_fetch_usbserialv>
   d5800:	4631      	mov	r1, r6
   d5802:	f002 ff03 	bl	d860c <_ZN5Print5printEPKc>
            Serial.print(event.orientation.x, 4);
   d5806:	f003 fd23 	bl	d9250 <_Z16_fetch_usbserialv>
   d580a:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   d580e:	2104      	movs	r1, #4
   d5810:	f003 f836 	bl	d8880 <_ZN5Print5printEfi>
            Serial.print("\tY: ");
   d5814:	f003 fd1c 	bl	d9250 <_Z16_fetch_usbserialv>
   d5818:	4629      	mov	r1, r5
   d581a:	f002 fef7 	bl	d860c <_ZN5Print5printEPKc>
            Serial.print(event.orientation.y, 4);
   d581e:	f003 fd17 	bl	d9250 <_Z16_fetch_usbserialv>
   d5822:	ed9d 0a15 	vldr	s0, [sp, #84]	; 0x54
   d5826:	2104      	movs	r1, #4
   d5828:	f003 f82a 	bl	d8880 <_ZN5Print5printEfi>
            Serial.print("\tZ: ");
   d582c:	f003 fd10 	bl	d9250 <_Z16_fetch_usbserialv>
   d5830:	492e      	ldr	r1, [pc, #184]	; (d58ec <setup+0x480>)
   d5832:	f002 feeb 	bl	d860c <_ZN5Print5printEPKc>
            Serial.print(event.orientation.z, 4);
   d5836:	f003 fd0b 	bl	d9250 <_Z16_fetch_usbserialv>
   d583a:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   d583e:	2104      	movs	r1, #4
   d5840:	f003 f81e 	bl	d8880 <_ZN5Print5printEfi>
            displayCalStatus();
   d5844:	f7ff f86a 	bl	d491c <_Z16displayCalStatusv>
            Serial.println("");
   d5848:	f003 fd02 	bl	d9250 <_Z16_fetch_usbserialv>
   d584c:	4928      	ldr	r1, [pc, #160]	; (d58f0 <setup+0x484>)
   d584e:	f002 fef4 	bl	d863a <_ZN5Print7printlnEPKc>
            delay(BNO055_STARTUP_SAMPLE_DELAY_MS);
   d5852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5856:	f003 f8c9 	bl	d89ec <delay>
        while (!bno.isFullyCalibrated())
   d585a:	e7c7      	b.n	d57ec <setup+0x380>
    Serial.println("\nFully calibrated!");
   d585c:	f003 fcf8 	bl	d9250 <_Z16_fetch_usbserialv>
   d5860:	4924      	ldr	r1, [pc, #144]	; (d58f4 <setup+0x488>)
   d5862:	f002 feea 	bl	d863a <_ZN5Print7printlnEPKc>
    Serial.println("--------------------------------");
   d5866:	f003 fcf3 	bl	d9250 <_Z16_fetch_usbserialv>
   d586a:	4923      	ldr	r1, [pc, #140]	; (d58f8 <setup+0x48c>)
   d586c:	f002 fee5 	bl	d863a <_ZN5Print7printlnEPKc>
    Serial.println("Calibration Results: ");
   d5870:	f003 fcee 	bl	d9250 <_Z16_fetch_usbserialv>
   d5874:	4921      	ldr	r1, [pc, #132]	; (d58fc <setup+0x490>)
   d5876:	f002 fee0 	bl	d863a <_ZN5Print7printlnEPKc>
    bno.getSensorOffsets(newCalib);
   d587a:	a909      	add	r1, sp, #36	; 0x24
   d587c:	4818      	ldr	r0, [pc, #96]	; (d58e0 <setup+0x474>)
   d587e:	f001 f8d1 	bl	d6a24 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>
    displaySensorOffsets(newCalib);
   d5882:	a809      	add	r0, sp, #36	; 0x24
   d5884:	f7fe fd96 	bl	d43b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
    Serial.println("\n\nStoring calibration data to EEPROM...");
   d5888:	f003 fce2 	bl	d9250 <_Z16_fetch_usbserialv>
   d588c:	491c      	ldr	r1, [pc, #112]	; (d5900 <setup+0x494>)
   d588e:	f002 fed4 	bl	d863a <_ZN5Print7printlnEPKc>
    bno.getSensor(&sensor);
   d5892:	a918      	add	r1, sp, #96	; 0x60
   d5894:	4812      	ldr	r0, [pc, #72]	; (d58e0 <setup+0x474>)
   d5896:	f000 fef5 	bl	d6684 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    bnoID = sensor.sensor_id;
   d589a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d589c:	9302      	str	r3, [sp, #8]
    EEPROM.put(eeAddress, bnoID);
   d589e:	f003 ffc3 	bl	d9828 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d58a2:	a902      	add	r1, sp, #8
   d58a4:	2204      	movs	r2, #4
   d58a6:	2000      	movs	r0, #0
   d58a8:	f002 f9cc 	bl	d7c44 <HAL_EEPROM_Put>
    EEPROM.put(eeAddress, newCalib);
   d58ac:	f003 ffbc 	bl	d9828 <_Z21__fetch_global_EEPROMv>
   d58b0:	2216      	movs	r2, #22
   d58b2:	a909      	add	r1, sp, #36	; 0x24
   d58b4:	2004      	movs	r0, #4
   d58b6:	f002 f9c5 	bl	d7c44 <HAL_EEPROM_Put>
    Serial.println("Data stored to EEPROM.");
   d58ba:	f003 fcc9 	bl	d9250 <_Z16_fetch_usbserialv>
   d58be:	4911      	ldr	r1, [pc, #68]	; (d5904 <setup+0x498>)
   d58c0:	f002 febb 	bl	d863a <_ZN5Print7printlnEPKc>
    Serial.println("\n--------------------------------\n");
   d58c4:	f003 fcc4 	bl	d9250 <_Z16_fetch_usbserialv>
   d58c8:	490f      	ldr	r1, [pc, #60]	; (d5908 <setup+0x49c>)
   d58ca:	f002 feb6 	bl	d863a <_ZN5Print7printlnEPKc>
    delay(500);
   d58ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d58d2:	f003 f88b 	bl	d89ec <delay>
}
   d58d6:	b022      	add	sp, #136	; 0x88
   d58d8:	bd70      	pop	{r4, r5, r6, pc}
   d58da:	bf00      	nop
   d58dc:	000dd9a5 	.word	0x000dd9a5
   d58e0:	2003e4b4 	.word	0x2003e4b4
   d58e4:	000dd607 	.word	0x000dd607
   d58e8:	000dd60b 	.word	0x000dd60b
   d58ec:	000dd610 	.word	0x000dd610
   d58f0:	000dd54e 	.word	0x000dd54e
   d58f4:	000dd9bf 	.word	0x000dd9bf
   d58f8:	000dd3d4 	.word	0x000dd3d4
   d58fc:	000dd9d2 	.word	0x000dd9d2
   d5900:	000dd9e8 	.word	0x000dd9e8
   d5904:	000dda10 	.word	0x000dda10
   d5908:	000dda27 	.word	0x000dda27

000d590c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d590c:	4770      	bx	lr

000d590e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d590e:	b510      	push	{r4, lr}
  }
   d5910:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d5912:	4604      	mov	r4, r0
  }
   d5914:	f003 ffdc 	bl	d98d0 <_ZdlPvj>
   d5918:	4620      	mov	r0, r4
   d591a:	bd10      	pop	{r4, pc}

000d591c <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d591c:	b40e      	push	{r1, r2, r3}
   d591e:	b503      	push	{r0, r1, lr}
   d5920:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d5922:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5924:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d5928:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d592a:	f002 ffd5 	bl	d88d8 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d592e:	b002      	add	sp, #8
   d5930:	f85d eb04 	ldr.w	lr, [sp], #4
   d5934:	b003      	add	sp, #12
   d5936:	4770      	bx	lr

000d5938 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5938:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d593a:	4604      	mov	r4, r0
   d593c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d593e:	7922      	ldrb	r2, [r4, #4]
   d5940:	68a3      	ldr	r3, [r4, #8]
   d5942:	b132      	cbz	r2, d5952 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d5944:	b9a3      	cbnz	r3, d5970 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d5946:	490b      	ldr	r1, [pc, #44]	; (d5974 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d5948:	b002      	add	sp, #8
   d594a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d594e:	f002 be5d 	b.w	d860c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5952:	4a09      	ldr	r2, [pc, #36]	; (d5978 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d5954:	7b26      	ldrb	r6, [r4, #12]
   d5956:	4d09      	ldr	r5, [pc, #36]	; (d597c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d5958:	4909      	ldr	r1, [pc, #36]	; (d5980 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d595a:	7b64      	ldrb	r4, [r4, #13]
   d595c:	2e01      	cmp	r6, #1
   d595e:	bf18      	it	ne
   d5960:	4629      	movne	r1, r5
   d5962:	e9cd 1400 	strd	r1, r4, [sp]
   d5966:	4907      	ldr	r1, [pc, #28]	; (d5984 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d5968:	f7ff ffd8 	bl	d591c <_ZN5Print6printfEPKcz>
  }
   d596c:	b002      	add	sp, #8
   d596e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5970:	4a05      	ldr	r2, [pc, #20]	; (d5988 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d5972:	e7ef      	b.n	d5954 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d5974:	000dda5b 	.word	0x000dda5b
   d5978:	000dd54e 	.word	0x000dd54e
   d597c:	000dda57 	.word	0x000dda57
   d5980:	000dda53 	.word	0x000dda53
   d5984:	000dda71 	.word	0x000dda71
   d5988:	000dda4a 	.word	0x000dda4a

000d598c <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d598c:	f04f 33ff 	mov.w	r3, #4294967295
   d5990:	6103      	str	r3, [r0, #16]
{ }
   d5992:	4770      	bx	lr

000d5994 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d5994:	6880      	ldr	r0, [r0, #8]
   d5996:	4770      	bx	lr

000d5998 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d5998:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d599a:	4c0b      	ldr	r4, [pc, #44]	; (d59c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d599c:	7821      	ldrb	r1, [r4, #0]
   d599e:	f3bf 8f5b 	dmb	ish
   d59a2:	f011 0101 	ands.w	r1, r1, #1
   d59a6:	d10b      	bne.n	d59c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d59a8:	4620      	mov	r0, r4
   d59aa:	9101      	str	r1, [sp, #4]
   d59ac:	f7fe fb84 	bl	d40b8 <__cxa_guard_acquire>
   d59b0:	9901      	ldr	r1, [sp, #4]
   d59b2:	b128      	cbz	r0, d59c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d59b4:	4805      	ldr	r0, [pc, #20]	; (d59cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d59b6:	f002 fbfd 	bl	d81b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d59ba:	4620      	mov	r0, r4
   d59bc:	f7fe fb81 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d59c0:	4802      	ldr	r0, [pc, #8]	; (d59cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d59c2:	b002      	add	sp, #8
   d59c4:	bd10      	pop	{r4, pc}
   d59c6:	bf00      	nop
   d59c8:	2003e578 	.word	0x2003e578
   d59cc:	2003e57c 	.word	0x2003e57c

000d59d0 <_ZN15Adafruit_BME2807spixferEh>:
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d59d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sck == -1)
   d59d4:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d59d8:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d59da:	4605      	mov	r5, r0
   d59dc:	460f      	mov	r7, r1
    if (_sck == -1)
   d59de:	d106      	bne.n	d59ee <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d59e0:	f7ff ffda 	bl	d5998 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d59e4:	4639      	mov	r1, r7
}
   d59e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d59ea:	f002 bc85 	b.w	d82f8 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d59ee:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d59f0:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d59f2:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d59f6:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d59fa:	2100      	movs	r1, #0
   d59fc:	b280      	uxth	r0, r0
   d59fe:	f003 fed0 	bl	d97a2 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d5a02:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d5a06:	fa08 f106 	lsl.w	r1, r8, r6
   d5a0a:	4039      	ands	r1, r7
   d5a0c:	b280      	uxth	r0, r0
   d5a0e:	f003 fec8 	bl	d97a2 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d5a12:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d5a16:	2101      	movs	r1, #1
   d5a18:	b280      	uxth	r0, r0
   d5a1a:	f003 fec2 	bl	d97a2 <digitalWrite>
        if (digitalRead(_miso))
   d5a1e:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d5a22:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d5a24:	b280      	uxth	r0, r0
        reply <<= 1;
   d5a26:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d5a28:	f003 fed4 	bl	d97d4 <digitalRead>
   d5a2c:	b108      	cbz	r0, d5a32 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d5a2e:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d5a32:	3e01      	subs	r6, #1
   d5a34:	d2df      	bcs.n	d59f6 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d5a36:	4620      	mov	r0, r4
   d5a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5a3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d5a3c:	b508      	push	{r3, lr}
        instance().endTransaction();
   d5a3e:	f7ff ffab 	bl	d5998 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d5a42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d5a46:	f002 bbd0 	b.w	d81ea <_ZN8SPIClass14endTransactionEv>

000d5a4a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d5a4a:	b507      	push	{r0, r1, r2, lr}
   d5a4c:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d5a4e:	f7ff ffa3 	bl	d5998 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5a52:	9901      	ldr	r1, [sp, #4]
    }
   d5a54:	b003      	add	sp, #12
   d5a56:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d5a5a:	f002 bbdf 	b.w	d821c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d5a60 <_ZN15Adafruit_BME2806read24Eh>:
{
   d5a60:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5a62:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5a66:	3301      	adds	r3, #1
{
   d5a68:	b085      	sub	sp, #20
   d5a6a:	4604      	mov	r4, r0
   d5a6c:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5a6e:	d123      	bne.n	d5ab8 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5a70:	7901      	ldrb	r1, [r0, #4]
   d5a72:	6800      	ldr	r0, [r0, #0]
   d5a74:	f003 fd8c 	bl	d9590 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5a78:	6820      	ldr	r0, [r4, #0]
   d5a7a:	6803      	ldr	r3, [r0, #0]
   d5a7c:	4629      	mov	r1, r5
   d5a7e:	689b      	ldr	r3, [r3, #8]
   d5a80:	4798      	blx	r3
        _wire -> endTransmission();
   d5a82:	6820      	ldr	r0, [r4, #0]
   d5a84:	f003 fd8c 	bl	d95a0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d5a88:	7921      	ldrb	r1, [r4, #4]
   d5a8a:	6820      	ldr	r0, [r4, #0]
   d5a8c:	2203      	movs	r2, #3
   d5a8e:	f003 fd7c 	bl	d958a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d5a92:	6820      	ldr	r0, [r4, #0]
   d5a94:	6803      	ldr	r3, [r0, #0]
   d5a96:	695b      	ldr	r3, [r3, #20]
   d5a98:	4798      	blx	r3
        value <<= 8;
   d5a9a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5a9c:	6820      	ldr	r0, [r4, #0]
   d5a9e:	6803      	ldr	r3, [r0, #0]
   d5aa0:	695b      	ldr	r3, [r3, #20]
   d5aa2:	4798      	blx	r3
   d5aa4:	4328      	orrs	r0, r5
        value <<= 8;
   d5aa6:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5aa8:	6820      	ldr	r0, [r4, #0]
   d5aaa:	6803      	ldr	r3, [r0, #0]
   d5aac:	695b      	ldr	r3, [r3, #20]
   d5aae:	4798      	blx	r3
   d5ab0:	4305      	orrs	r5, r0
}
   d5ab2:	4628      	mov	r0, r5
   d5ab4:	b005      	add	sp, #20
   d5ab6:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5ab8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5abc:	3301      	adds	r3, #1
   d5abe:	d10c      	bne.n	d5ada <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d5ac0:	4b1a      	ldr	r3, [pc, #104]	; (d5b2c <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d5ac2:	9300      	str	r3, [sp, #0]
   d5ac4:	2300      	movs	r3, #0
   d5ac6:	f88d 3004 	strb.w	r3, [sp, #4]
   d5aca:	4b19      	ldr	r3, [pc, #100]	; (d5b30 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d5acc:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5ace:	4668      	mov	r0, sp
   d5ad0:	2301      	movs	r3, #1
   d5ad2:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5ad6:	f7ff ffb8 	bl	d5a4a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5ada:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5ade:	2100      	movs	r1, #0
   d5ae0:	b280      	uxth	r0, r0
   d5ae2:	f003 fe5e 	bl	d97a2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5ae6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5aea:	4620      	mov	r0, r4
   d5aec:	f7ff ff70 	bl	d59d0 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5af0:	2100      	movs	r1, #0
   d5af2:	4620      	mov	r0, r4
   d5af4:	f7ff ff6c 	bl	d59d0 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d5af8:	2100      	movs	r1, #0
        value <<= 8;
   d5afa:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5afc:	4620      	mov	r0, r4
   d5afe:	f7ff ff67 	bl	d59d0 <_ZN15Adafruit_BME2807spixferEh>
   d5b02:	4328      	orrs	r0, r5
        value <<= 8;
   d5b04:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5b06:	2100      	movs	r1, #0
   d5b08:	4620      	mov	r0, r4
   d5b0a:	f7ff ff61 	bl	d59d0 <_ZN15Adafruit_BME2807spixferEh>
   d5b0e:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d5b10:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5b14:	2101      	movs	r1, #1
   d5b16:	b280      	uxth	r0, r0
   d5b18:	f003 fe43 	bl	d97a2 <digitalWrite>
        if (_sck == -1)
   d5b1c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5b20:	3301      	adds	r3, #1
   d5b22:	d1c6      	bne.n	d5ab2 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d5b24:	f7ff ff8a 	bl	d5a3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d5b28:	e7c3      	b.n	d5ab2 <_ZN15Adafruit_BME2806read24Eh+0x52>
   d5b2a:	bf00      	nop
   d5b2c:	000dda98 	.word	0x000dda98
   d5b30:	0007a120 	.word	0x0007a120

000d5b34 <_ZN15Adafruit_BME28015readTemperatureEv>:
{
   d5b34:	b510      	push	{r4, lr}
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5b36:	21fa      	movs	r1, #250	; 0xfa
{
   d5b38:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5b3a:	f7ff ff91 	bl	d5a60 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d5b3e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d5b42:	d01e      	beq.n	d5b82 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5b44:	8aa1      	ldrh	r1, [r4, #20]
    return T/100;
   d5b46:	ed9f 7a10 	vldr	s14, [pc, #64]	; d5b88 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5b4a:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5b4c:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5b50:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d5b54:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5b58:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5b5a:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d5b5c:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d5b60:	1312      	asrs	r2, r2, #12
   d5b62:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5b64:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d5b66:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d5b6a:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d5b6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5b70:	3380      	adds	r3, #128	; 0x80
   d5b72:	121b      	asrs	r3, r3, #8
   d5b74:	ee07 3a90 	vmov	s15, r3
   d5b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d5b7c:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d5b80:	bd10      	pop	{r4, pc}
        return NAN;
   d5b82:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5b8c <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d5b86:	e7fb      	b.n	d5b80 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d5b88:	42c80000 	.word	0x42c80000
   d5b8c:	7fc00000 	.word	0x7fc00000

000d5b90 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   d5b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5b94:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5b96:	f7ff ffcd 	bl	d5b34 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5b9a:	21f7      	movs	r1, #247	; 0xf7
   d5b9c:	4620      	mov	r0, r4
   d5b9e:	f7ff ff5f 	bl	d5a60 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5ba2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5ba6:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5ba8:	f000 80bf 	beq.w	d5d2a <_ZN15Adafruit_BME28012readPressureEv+0x19a>
    var1 = ((int64_t)t_fine) - 128000;
   d5bac:	68e0      	ldr	r0, [r4, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5bae:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
   d5bb2:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d5bb6:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d5bba:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5bbe:	fba3 8903 	umull	r8, r9, r3, r3
   d5bc2:	fb03 f102 	mul.w	r1, r3, r2
   d5bc6:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5bca:	17f7      	asrs	r7, r6, #31
   d5bcc:	fb06 f102 	mul.w	r1, r6, r2
   d5bd0:	fb03 1107 	mla	r1, r3, r7, r1
   d5bd4:	fba6 6703 	umull	r6, r7, r6, r3
   d5bd8:	440f      	add	r7, r1
   d5bda:	0339      	lsls	r1, r7, #12
   d5bdc:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d5be0:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5be2:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
   d5be6:	17f7      	asrs	r7, r6, #31
   d5be8:	fb06 fc09 	mul.w	ip, r6, r9
   d5bec:	fb08 cc07 	mla	ip, r8, r7, ip
   d5bf0:	fba6 6708 	umull	r6, r7, r6, r8
   d5bf4:	4467      	add	r7, ip
   d5bf6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d5bfa:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5bfe:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5c00:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d5c04:	eb1c 0000 	adds.w	r0, ip, r0
   d5c08:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5c0c:	3000      	adds	r0, #0
   d5c0e:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d5c12:	fba0 0106 	umull	r0, r1, r0, r6
   d5c16:	fb06 110e 	mla	r1, r6, lr, r1
   d5c1a:	104e      	asrs	r6, r1, #1
   d5c1c:	17cf      	asrs	r7, r1, #31
    if (var1 == 0) {
   d5c1e:	ea56 0107 	orrs.w	r1, r6, r7
   d5c22:	f000 8085 	beq.w	d5d30 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5c26:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
   d5c2a:	fb00 fc09 	mul.w	ip, r0, r9
   d5c2e:	17c1      	asrs	r1, r0, #31
   d5c30:	fb08 cc01 	mla	ip, r8, r1, ip
   d5c34:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5c38:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
   d5c3c:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d5c40:	fb08 f202 	mul.w	r2, r8, r2
   d5c44:	fb03 2209 	mla	r2, r3, r9, r2
   d5c48:	fba8 8903 	umull	r8, r9, r8, r3
   d5c4c:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5c4e:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5c50:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d5c54:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d5c58:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5c5a:	1812      	adds	r2, r2, r0
    p = 1048576 - adc_P;
   d5c5c:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5c60:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5c64:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5c68:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5c6c:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d5c6e:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5c70:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d5c72:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d5c76:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5c7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d5c7e:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d5c82:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d5c86:	1ac0      	subs	r0, r0, r3
   d5c88:	f640 4335 	movw	r3, #3125	; 0xc35
   d5c8c:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d5c90:	fba0 0103 	umull	r0, r1, r0, r3
   d5c94:	fb03 110e 	mla	r1, r3, lr, r1
   d5c98:	4632      	mov	r2, r6
   d5c9a:	463b      	mov	r3, r7
   d5c9c:	f007 f8a0 	bl	dcde0 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5ca0:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d5ca4:	134d      	asrs	r5, r1, #13
   d5ca6:	0b46      	lsrs	r6, r0, #13
   d5ca8:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d5cac:	fb02 f705 	mul.w	r7, r2, r5
   d5cb0:	17d3      	asrs	r3, r2, #31
   d5cb2:	fb06 7703 	mla	r7, r6, r3, r7
   d5cb6:	fba2 2306 	umull	r2, r3, r2, r6
   d5cba:	443b      	add	r3, r7
   d5cbc:	4355      	muls	r5, r2
   d5cbe:	fb06 5503 	mla	r5, r6, r3, r5
   d5cc2:	fba2 2306 	umull	r2, r3, r2, r6
   d5cc6:	442b      	add	r3, r5
   d5cc8:	0e55      	lsrs	r5, r2, #25
   d5cca:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5cce:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5cd2:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   d5cd6:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5cd8:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5cdc:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5ce0:	17d3      	asrs	r3, r2, #31
   d5ce2:	4351      	muls	r1, r2
   d5ce4:	fb00 1103 	mla	r1, r0, r3, r1
   d5ce8:	fba2 2300 	umull	r2, r3, r2, r0
   d5cec:	440b      	add	r3, r1
   d5cee:	0cd1      	lsrs	r1, r2, #19
   d5cf0:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5cf4:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5cf6:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5cfa:	eb46 0300 	adc.w	r3, r6, r0
   d5cfe:	0a2a      	lsrs	r2, r5, #8
   d5d00:	17e5      	asrs	r5, r4, #31
   d5d02:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d5d06:	1219      	asrs	r1, r3, #8
   d5d08:	0120      	lsls	r0, r4, #4
   d5d0a:	012b      	lsls	r3, r5, #4
   d5d0c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d5d10:	1880      	adds	r0, r0, r2
   d5d12:	eb43 0101 	adc.w	r1, r3, r1
   d5d16:	f007 f825 	bl	dcd64 <__aeabi_l2f>
   d5d1a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5d38 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d5d1e:	ee07 0a90 	vmov	s15, r0
   d5d22:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d5d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d5d2a:	ed9f 0a04 	vldr	s0, [pc, #16]	; d5d3c <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d5d2e:	e7fa      	b.n	d5d26 <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d5d30:	ed9f 0a03 	vldr	s0, [pc, #12]	; d5d40 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d5d34:	e7f7      	b.n	d5d26 <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d5d36:	bf00      	nop
   d5d38:	3b800000 	.word	0x3b800000
   d5d3c:	7fc00000 	.word	0x7fc00000
	...

000d5d48 <_ZN15Adafruit_BME28012readAltitudeEf>:
{
   d5d48:	b508      	push	{r3, lr}
   d5d4a:	ed2d 8b02 	vpush	{d8}
   d5d4e:	eeb0 8a40 	vmov.f32	s16, s0
    float atmospheric = readPressure() / 100.0F;
   d5d52:	f7ff ff1d 	bl	d5b90 <_ZN15Adafruit_BME28012readPressureEv>
   d5d56:	ed9f 7a16 	vldr	s14, [pc, #88]	; d5db0 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d5d5a:	eec0 7a07 	vdiv.f32	s15, s0, s14
      return pow(__type(__x), __type(__y));
   d5d5e:	eec7 7a88 	vdiv.f32	s15, s15, s16
   d5d62:	ee17 0a90 	vmov	r0, s15
   d5d66:	f006 fb8d 	bl	dc484 <__aeabi_f2d>
   d5d6a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d5da0 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d5d6e:	ec41 0b10 	vmov	d0, r0, r1
   d5d72:	f003 fe49 	bl	d9a08 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d5d76:	490f      	ldr	r1, [pc, #60]	; (d5db4 <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d5d78:	ec53 2b10 	vmov	r2, r3, d0
   d5d7c:	2000      	movs	r0, #0
   d5d7e:	f006 fa21 	bl	dc1c4 <__aeabi_dsub>
   d5d82:	a309      	add	r3, pc, #36	; (adr r3, d5da8 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d5d84:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5d88:	f006 fbd4 	bl	dc534 <__aeabi_dmul>
   d5d8c:	f006 feca 	bl	dcb24 <__aeabi_d2f>
}
   d5d90:	ecbd 8b02 	vpop	{d8}
   d5d94:	ee00 0a10 	vmov	s0, r0
   d5d98:	bd08      	pop	{r3, pc}
   d5d9a:	bf00      	nop
   d5d9c:	f3af 8000 	nop.w
   d5da0:	1a36e2eb 	.word	0x1a36e2eb
   d5da4:	3fc85bc0 	.word	0x3fc85bc0
   d5da8:	00000000 	.word	0x00000000
   d5dac:	40e5a540 	.word	0x40e5a540
   d5db0:	42c80000 	.word	0x42c80000
   d5db4:	3ff00000 	.word	0x3ff00000

000d5db8 <_ZN15Adafruit_BME2806read16Eh>:
{
   d5db8:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5dba:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5dbe:	3301      	adds	r3, #1
{
   d5dc0:	b085      	sub	sp, #20
   d5dc2:	4604      	mov	r4, r0
   d5dc4:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5dc6:	d11f      	bne.n	d5e08 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5dc8:	7901      	ldrb	r1, [r0, #4]
   d5dca:	6800      	ldr	r0, [r0, #0]
   d5dcc:	f003 fbe0 	bl	d9590 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5dd0:	6820      	ldr	r0, [r4, #0]
   d5dd2:	6803      	ldr	r3, [r0, #0]
   d5dd4:	4629      	mov	r1, r5
   d5dd6:	689b      	ldr	r3, [r3, #8]
   d5dd8:	4798      	blx	r3
        _wire -> endTransmission();
   d5dda:	6820      	ldr	r0, [r4, #0]
   d5ddc:	f003 fbe0 	bl	d95a0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d5de0:	7921      	ldrb	r1, [r4, #4]
   d5de2:	6820      	ldr	r0, [r4, #0]
   d5de4:	2202      	movs	r2, #2
   d5de6:	f003 fbd0 	bl	d958a <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d5dea:	6820      	ldr	r0, [r4, #0]
   d5dec:	6803      	ldr	r3, [r0, #0]
   d5dee:	695b      	ldr	r3, [r3, #20]
   d5df0:	4798      	blx	r3
   d5df2:	4605      	mov	r5, r0
   d5df4:	6820      	ldr	r0, [r4, #0]
   d5df6:	6803      	ldr	r3, [r0, #0]
   d5df8:	695b      	ldr	r3, [r3, #20]
   d5dfa:	4798      	blx	r3
   d5dfc:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5e00:	b285      	uxth	r5, r0
}
   d5e02:	4628      	mov	r0, r5
   d5e04:	b005      	add	sp, #20
   d5e06:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5e08:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5e0c:	3301      	adds	r3, #1
   d5e0e:	d10c      	bne.n	d5e2a <_ZN15Adafruit_BME2806read16Eh+0x72>
   d5e10:	4b18      	ldr	r3, [pc, #96]	; (d5e74 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d5e12:	9300      	str	r3, [sp, #0]
   d5e14:	2300      	movs	r3, #0
   d5e16:	f88d 3004 	strb.w	r3, [sp, #4]
   d5e1a:	4b17      	ldr	r3, [pc, #92]	; (d5e78 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d5e1c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5e1e:	4668      	mov	r0, sp
   d5e20:	2301      	movs	r3, #1
   d5e22:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5e26:	f7ff fe10 	bl	d5a4a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5e2a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5e2e:	2100      	movs	r1, #0
   d5e30:	b280      	uxth	r0, r0
   d5e32:	f003 fcb6 	bl	d97a2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5e36:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5e3a:	4620      	mov	r0, r4
   d5e3c:	f7ff fdc8 	bl	d59d0 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5e40:	2100      	movs	r1, #0
   d5e42:	4620      	mov	r0, r4
   d5e44:	f7ff fdc4 	bl	d59d0 <_ZN15Adafruit_BME2807spixferEh>
   d5e48:	2100      	movs	r1, #0
   d5e4a:	4605      	mov	r5, r0
   d5e4c:	4620      	mov	r0, r4
   d5e4e:	f7ff fdbf 	bl	d59d0 <_ZN15Adafruit_BME2807spixferEh>
   d5e52:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5e56:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d5e58:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5e5c:	2101      	movs	r1, #1
   d5e5e:	b280      	uxth	r0, r0
   d5e60:	f003 fc9f 	bl	d97a2 <digitalWrite>
        if (_sck == -1)
   d5e64:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5e68:	3301      	adds	r3, #1
   d5e6a:	d1ca      	bne.n	d5e02 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d5e6c:	f7ff fde6 	bl	d5a3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5e70:	e7c7      	b.n	d5e02 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d5e72:	bf00      	nop
   d5e74:	000dda98 	.word	0x000dda98
   d5e78:	0007a120 	.word	0x0007a120

000d5e7c <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d5e7c:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d5e7e:	f7ff ff9b 	bl	d5db8 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d5e82:	ba40      	rev16	r0, r0
}
   d5e84:	b280      	uxth	r0, r0
   d5e86:	bd08      	pop	{r3, pc}

000d5e88 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
   d5e88:	b538      	push	{r3, r4, r5, lr}
   d5e8a:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5e8c:	f7ff fe52 	bl	d5b34 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d5e90:	21fd      	movs	r1, #253	; 0xfd
   d5e92:	4620      	mov	r0, r4
   d5e94:	f7ff ff90 	bl	d5db8 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d5e98:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d5e9c:	d038      	beq.n	d5f10 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5e9e:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5ea2:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5ea4:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5ea8:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5eaa:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5eae:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d5eb2:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5eb6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d5eba:	13d9      	asrs	r1, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5ebc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d5ec0:	4353      	muls	r3, r2
   d5ec2:	12db      	asrs	r3, r3, #11
   d5ec4:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d5ec8:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d5ecc:	4353      	muls	r3, r2
   d5ece:	129b      	asrs	r3, r3, #10
   d5ed0:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5ed2:	129b      	asrs	r3, r3, #10
   d5ed4:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d5ed8:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d5edc:	4353      	muls	r3, r2
   d5ede:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d5ee2:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5ee4:	434b      	muls	r3, r1
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5ee6:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d5ee8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5eec:	4352      	muls	r2, r2
   d5eee:	11d2      	asrs	r2, r2, #7
   d5ef0:	434a      	muls	r2, r1
   d5ef2:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d5ef6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d5efa:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d5efe:	bfa8      	it	ge
   d5f00:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d5f04:	131b      	asrs	r3, r3, #12
   d5f06:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d5f0a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d5f0e:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d5f10:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5f18 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d5f14:	e7fb      	b.n	d5f0e <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d5f16:	bf00      	nop
   d5f18:	7fc00000 	.word	0x7fc00000

000d5f1c <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d5f1c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5f1e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5f22:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d5f24:	b085      	sub	sp, #20
   d5f26:	4604      	mov	r4, r0
   d5f28:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5f2a:	d118      	bne.n	d5f5e <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5f2c:	7901      	ldrb	r1, [r0, #4]
   d5f2e:	6800      	ldr	r0, [r0, #0]
   d5f30:	f003 fb2e 	bl	d9590 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5f34:	6820      	ldr	r0, [r4, #0]
   d5f36:	6803      	ldr	r3, [r0, #0]
   d5f38:	4629      	mov	r1, r5
   d5f3a:	689b      	ldr	r3, [r3, #8]
   d5f3c:	4798      	blx	r3
        _wire -> endTransmission();
   d5f3e:	6820      	ldr	r0, [r4, #0]
   d5f40:	f003 fb2e 	bl	d95a0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d5f44:	7921      	ldrb	r1, [r4, #4]
   d5f46:	6820      	ldr	r0, [r4, #0]
   d5f48:	2201      	movs	r2, #1
   d5f4a:	f003 fb1e 	bl	d958a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d5f4e:	6820      	ldr	r0, [r4, #0]
   d5f50:	6803      	ldr	r3, [r0, #0]
   d5f52:	695b      	ldr	r3, [r3, #20]
   d5f54:	4798      	blx	r3
   d5f56:	b2c5      	uxtb	r5, r0
}
   d5f58:	4628      	mov	r0, r5
   d5f5a:	b005      	add	sp, #20
   d5f5c:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5f5e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5f62:	3301      	adds	r3, #1
   d5f64:	d10c      	bne.n	d5f80 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d5f66:	4b15      	ldr	r3, [pc, #84]	; (d5fbc <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d5f68:	9300      	str	r3, [sp, #0]
   d5f6a:	2300      	movs	r3, #0
   d5f6c:	f88d 3004 	strb.w	r3, [sp, #4]
   d5f70:	4b13      	ldr	r3, [pc, #76]	; (d5fc0 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d5f72:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5f74:	4668      	mov	r0, sp
   d5f76:	2301      	movs	r3, #1
   d5f78:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5f7c:	f7ff fd65 	bl	d5a4a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5f80:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5f84:	2100      	movs	r1, #0
   d5f86:	b280      	uxth	r0, r0
   d5f88:	f003 fc0b 	bl	d97a2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5f8c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5f90:	4620      	mov	r0, r4
   d5f92:	f7ff fd1d 	bl	d59d0 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5f96:	2100      	movs	r1, #0
   d5f98:	4620      	mov	r0, r4
   d5f9a:	f7ff fd19 	bl	d59d0 <_ZN15Adafruit_BME2807spixferEh>
   d5f9e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d5fa0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5fa4:	2101      	movs	r1, #1
   d5fa6:	b280      	uxth	r0, r0
   d5fa8:	f003 fbfb 	bl	d97a2 <digitalWrite>
        if (_sck == -1)
   d5fac:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5fb0:	3301      	adds	r3, #1
   d5fb2:	d1d1      	bne.n	d5f58 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d5fb4:	f7ff fd42 	bl	d5a3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5fb8:	e7ce      	b.n	d5f58 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d5fba:	bf00      	nop
   d5fbc:	000dda98 	.word	0x000dda98
   d5fc0:	0007a120 	.word	0x0007a120

000d5fc4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d5fc4:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d5fc6:	21f3      	movs	r1, #243	; 0xf3
   d5fc8:	f7ff ffa8 	bl	d5f1c <_ZN15Adafruit_BME2805read8Eh>
}
   d5fcc:	f000 0001 	and.w	r0, r0, #1
   d5fd0:	bd08      	pop	{r3, pc}

000d5fd2 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d5fd2:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5fd4:	2188      	movs	r1, #136	; 0x88
{
   d5fd6:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5fd8:	f7ff ff50 	bl	d5e7c <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5fdc:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5fde:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d5fe0:	4620      	mov	r0, r4
   d5fe2:	f7ff ff4b 	bl	d5e7c <_ZN15Adafruit_BME2809read16_LEEh>
   d5fe6:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d5fe8:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d5fea:	4620      	mov	r0, r4
   d5fec:	f7ff ff46 	bl	d5e7c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5ff0:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d5ff2:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5ff4:	4620      	mov	r0, r4
   d5ff6:	f7ff ff41 	bl	d5e7c <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5ffa:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5ffc:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d5ffe:	4620      	mov	r0, r4
   d6000:	f7ff ff3c 	bl	d5e7c <_ZN15Adafruit_BME2809read16_LEEh>
   d6004:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d6006:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d6008:	4620      	mov	r0, r4
   d600a:	f7ff ff37 	bl	d5e7c <_ZN15Adafruit_BME2809read16_LEEh>
   d600e:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d6010:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d6012:	4620      	mov	r0, r4
   d6014:	f7ff ff32 	bl	d5e7c <_ZN15Adafruit_BME2809read16_LEEh>
   d6018:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d601a:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d601c:	4620      	mov	r0, r4
   d601e:	f7ff ff2d 	bl	d5e7c <_ZN15Adafruit_BME2809read16_LEEh>
   d6022:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d6024:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d6026:	4620      	mov	r0, r4
   d6028:	f7ff ff28 	bl	d5e7c <_ZN15Adafruit_BME2809read16_LEEh>
   d602c:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d602e:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d6030:	4620      	mov	r0, r4
   d6032:	f7ff ff23 	bl	d5e7c <_ZN15Adafruit_BME2809read16_LEEh>
   d6036:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d6038:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d603a:	4620      	mov	r0, r4
   d603c:	f7ff ff1e 	bl	d5e7c <_ZN15Adafruit_BME2809read16_LEEh>
   d6040:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d6042:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d6044:	4620      	mov	r0, r4
   d6046:	f7ff ff19 	bl	d5e7c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d604a:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d604c:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d604e:	4620      	mov	r0, r4
   d6050:	f7ff ff64 	bl	d5f1c <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d6054:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d6056:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d605a:	4620      	mov	r0, r4
   d605c:	f7ff ff0e 	bl	d5e7c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d6060:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d6062:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d6064:	4620      	mov	r0, r4
   d6066:	f7ff ff59 	bl	d5f1c <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d606a:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d606c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d6070:	4620      	mov	r0, r4
   d6072:	f7ff ff53 	bl	d5f1c <_ZN15Adafruit_BME2805read8Eh>
   d6076:	21e5      	movs	r1, #229	; 0xe5
   d6078:	4605      	mov	r5, r0
   d607a:	4620      	mov	r0, r4
   d607c:	f7ff ff4e 	bl	d5f1c <_ZN15Adafruit_BME2805read8Eh>
   d6080:	f000 030f 	and.w	r3, r0, #15
   d6084:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d6088:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d608a:	21e6      	movs	r1, #230	; 0xe6
   d608c:	4620      	mov	r0, r4
   d608e:	f7ff ff45 	bl	d5f1c <_ZN15Adafruit_BME2805read8Eh>
   d6092:	21e5      	movs	r1, #229	; 0xe5
   d6094:	4605      	mov	r5, r0
   d6096:	4620      	mov	r0, r4
   d6098:	f7ff ff40 	bl	d5f1c <_ZN15Adafruit_BME2805read8Eh>
   d609c:	1103      	asrs	r3, r0, #4
   d609e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d60a2:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d60a4:	21e7      	movs	r1, #231	; 0xe7
   d60a6:	4620      	mov	r0, r4
   d60a8:	f7ff ff38 	bl	d5f1c <_ZN15Adafruit_BME2805read8Eh>
   d60ac:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d60b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d60b4 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d60b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d60b6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d60ba:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d60bc:	4604      	mov	r4, r0
   d60be:	460e      	mov	r6, r1
   d60c0:	4615      	mov	r5, r2
    if (_cs == -1) {
   d60c2:	d112      	bne.n	d60ea <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d60c4:	7901      	ldrb	r1, [r0, #4]
   d60c6:	6800      	ldr	r0, [r0, #0]
   d60c8:	f003 fa62 	bl	d9590 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d60cc:	6820      	ldr	r0, [r4, #0]
   d60ce:	6803      	ldr	r3, [r0, #0]
   d60d0:	4631      	mov	r1, r6
   d60d2:	689b      	ldr	r3, [r3, #8]
   d60d4:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d60d6:	6820      	ldr	r0, [r4, #0]
   d60d8:	6803      	ldr	r3, [r0, #0]
   d60da:	4629      	mov	r1, r5
   d60dc:	689b      	ldr	r3, [r3, #8]
   d60de:	4798      	blx	r3
        _wire -> endTransmission();
   d60e0:	6820      	ldr	r0, [r4, #0]
   d60e2:	f003 fa5d 	bl	d95a0 <_ZN7TwoWire15endTransmissionEv>
}
   d60e6:	b004      	add	sp, #16
   d60e8:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d60ea:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d60ee:	3301      	adds	r3, #1
   d60f0:	d10c      	bne.n	d610c <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d60f2:	4b14      	ldr	r3, [pc, #80]	; (d6144 <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d60f4:	9300      	str	r3, [sp, #0]
   d60f6:	2300      	movs	r3, #0
   d60f8:	f88d 3004 	strb.w	r3, [sp, #4]
   d60fc:	4b12      	ldr	r3, [pc, #72]	; (d6148 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d60fe:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d6100:	4668      	mov	r0, sp
   d6102:	2301      	movs	r3, #1
   d6104:	f8ad 300c 	strh.w	r3, [sp, #12]
   d6108:	f7ff fc9f 	bl	d5a4a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d610c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6110:	2100      	movs	r1, #0
   d6112:	b280      	uxth	r0, r0
   d6114:	f003 fb45 	bl	d97a2 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d6118:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d611c:	4620      	mov	r0, r4
   d611e:	f7ff fc57 	bl	d59d0 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d6122:	4629      	mov	r1, r5
   d6124:	4620      	mov	r0, r4
   d6126:	f7ff fc53 	bl	d59d0 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d612a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d612e:	2101      	movs	r1, #1
   d6130:	b280      	uxth	r0, r0
   d6132:	f003 fb36 	bl	d97a2 <digitalWrite>
    if (_sck == -1)
   d6136:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d613a:	3301      	adds	r3, #1
   d613c:	d1d3      	bne.n	d60e6 <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d613e:	f7ff fc7d 	bl	d5a3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d6142:	e7d0      	b.n	d60e6 <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d6144:	000dda98 	.word	0x000dda98
   d6148:	0007a120 	.word	0x0007a120

000d614c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d614e:	00db      	lsls	r3, r3, #3
   d6150:	f002 0207 	and.w	r2, r2, #7
   d6154:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d6158:	4313      	orrs	r3, r2
   d615a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d615e:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d6162:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d6166:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d616a:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d616e:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d6172:	f366 1347 	bfi	r3, r6, #5, #3
   d6176:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d617a:	00ed      	lsls	r5, r5, #3
   d617c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d6180:	f007 0707 	and.w	r7, r7, #7
   d6184:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d6188:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d618c:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d618e:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d6190:	431d      	orrs	r5, r3
   d6192:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d6196:	f006 0207 	and.w	r2, r6, #7
   d619a:	21f2      	movs	r1, #242	; 0xf2
   d619c:	f7ff ff8a 	bl	d60b4 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d61a0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d61a4:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d61a8:	f002 0107 	and.w	r1, r2, #7
   d61ac:	009b      	lsls	r3, r3, #2
   d61ae:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d61b2:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d61b6:	4620      	mov	r0, r4
   d61b8:	21f5      	movs	r1, #245	; 0xf5
   d61ba:	f7ff ff7b 	bl	d60b4 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d61be:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d61c2:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d61c6:	f002 0107 	and.w	r1, r2, #7
   d61ca:	009b      	lsls	r3, r3, #2
   d61cc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d61d0:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d61d4:	4620      	mov	r0, r4
   d61d6:	21f4      	movs	r1, #244	; 0xf4
}
   d61d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d61dc:	f7ff bf6a 	b.w	d60b4 <_ZN15Adafruit_BME2806write8Ehh>

000d61e0 <_ZN15Adafruit_BME2804initEv>:
{
   d61e0:	b530      	push	{r4, r5, lr}
   d61e2:	4604      	mov	r4, r0
    if (_cs == -1) {
   d61e4:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d61e8:	1c42      	adds	r2, r0, #1
{
   d61ea:	b085      	sub	sp, #20
    if (_cs == -1) {
   d61ec:	d119      	bne.n	d6222 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d61ee:	6820      	ldr	r0, [r4, #0]
   d61f0:	f003 f99c 	bl	d952c <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d61f4:	21d0      	movs	r1, #208	; 0xd0
   d61f6:	4620      	mov	r0, r4
   d61f8:	f7ff fe90 	bl	d5f1c <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d61fc:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d61fe:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d6200:	d145      	bne.n	d628e <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d6202:	4620      	mov	r0, r4
   d6204:	22b6      	movs	r2, #182	; 0xb6
   d6206:	21e0      	movs	r1, #224	; 0xe0
   d6208:	f7ff ff54 	bl	d60b4 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d620c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d6210:	f002 fbec 	bl	d89ec <delay>
    while (isReadingCalibration())
   d6214:	4620      	mov	r0, r4
   d6216:	f7ff fed5 	bl	d5fc4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d621a:	4605      	mov	r5, r0
   d621c:	b328      	cbz	r0, d626a <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d621e:	2064      	movs	r0, #100	; 0x64
   d6220:	e7f6      	b.n	d6210 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d6222:	2101      	movs	r1, #1
   d6224:	b280      	uxth	r0, r0
   d6226:	f003 fabc 	bl	d97a2 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d622a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d622e:	2101      	movs	r1, #1
   d6230:	b280      	uxth	r0, r0
   d6232:	f003 faa5 	bl	d9780 <pinMode>
        if (_sck == -1) {
   d6236:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d623a:	1c43      	adds	r3, r0, #1
   d623c:	d104      	bne.n	d6248 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d623e:	f7ff fbab 	bl	d5998 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d6242:	f001 ffc1 	bl	d81c8 <_ZN8SPIClass5beginEv>
    }
   d6246:	e7d5      	b.n	d61f4 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d6248:	2101      	movs	r1, #1
   d624a:	b280      	uxth	r0, r0
   d624c:	f003 fa98 	bl	d9780 <pinMode>
            pinMode(_mosi, OUTPUT);
   d6250:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d6254:	2101      	movs	r1, #1
   d6256:	b280      	uxth	r0, r0
   d6258:	f003 fa92 	bl	d9780 <pinMode>
            pinMode(_miso, INPUT);
   d625c:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d6260:	2100      	movs	r1, #0
   d6262:	b280      	uxth	r0, r0
   d6264:	f003 fa8c 	bl	d9780 <pinMode>
   d6268:	e7c4      	b.n	d61f4 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d626a:	4620      	mov	r0, r4
   d626c:	f7ff feb1 	bl	d5fd2 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d6270:	2305      	movs	r3, #5
   d6272:	9300      	str	r3, [sp, #0]
   d6274:	461a      	mov	r2, r3
   d6276:	2103      	movs	r1, #3
   d6278:	4620      	mov	r0, r4
   d627a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d627e:	f7ff ff65 	bl	d614c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d6282:	2064      	movs	r0, #100	; 0x64
   d6284:	f002 fbb2 	bl	d89ec <delay>
   d6288:	2001      	movs	r0, #1
}
   d628a:	b005      	add	sp, #20
   d628c:	bd30      	pop	{r4, r5, pc}
        return false;
   d628e:	2000      	movs	r0, #0
   d6290:	e7fb      	b.n	d628a <_ZN15Adafruit_BME2804initEv+0xaa>

000d6292 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d6292:	2377      	movs	r3, #119	; 0x77
{
   d6294:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d6296:	7103      	strb	r3, [r0, #4]
{
   d6298:	4604      	mov	r4, r0
	_wire = &Wire;
   d629a:	f003 faf5 	bl	d9888 <_Z19__fetch_global_Wirev>
   d629e:	6020      	str	r0, [r4, #0]
	status = init();
   d62a0:	4620      	mov	r0, r4
   d62a2:	f7ff ff9d 	bl	d61e0 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d62a6:	b930      	cbnz	r0, d62b6 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d62a8:	2376      	movs	r3, #118	; 0x76
   d62aa:	7123      	strb	r3, [r4, #4]
 		status = init();
   d62ac:	4620      	mov	r0, r4
}
   d62ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d62b2:	f7ff bf95 	b.w	d61e0 <_ZN15Adafruit_BME2804initEv>
}
   d62b6:	bd10      	pop	{r4, pc}

000d62b8 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   d62b8:	b510      	push	{r4, lr}
   d62ba:	4604      	mov	r4, r0
  if (_spiSetting) {
   d62bc:	6840      	ldr	r0, [r0, #4]
   d62be:	b110      	cbz	r0, d62c6 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   d62c0:	6803      	ldr	r3, [r0, #0]
   d62c2:	689b      	ldr	r3, [r3, #8]
   d62c4:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   d62c6:	4620      	mov	r0, r4
   d62c8:	bd10      	pop	{r4, pc}

000d62ca <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   d62ca:	b538      	push	{r3, r4, r5, lr}
   d62cc:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   d62ce:	f990 000e 	ldrsb.w	r0, [r0, #14]
   d62d2:	2101      	movs	r1, #1
   d62d4:	b280      	uxth	r0, r0
   d62d6:	f003 fa53 	bl	d9780 <pinMode>
  digitalWrite(_cs, HIGH);
   d62da:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d62de:	2101      	movs	r1, #1
   d62e0:	b280      	uxth	r0, r0
   d62e2:	f003 fa5e 	bl	d97a2 <digitalWrite>

  if (_spi) { // hardware SPI
   d62e6:	6825      	ldr	r5, [r4, #0]
   d62e8:	b135      	cbz	r5, d62f8 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   d62ea:	4628      	mov	r0, r5
   d62ec:	f001 ff6c 	bl	d81c8 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   d62f0:	2001      	movs	r0, #1
   d62f2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   d62f6:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   d62f8:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d62fc:	2101      	movs	r1, #1
   d62fe:	b280      	uxth	r0, r0
   d6300:	f003 fa3e 	bl	d9780 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   d6304:	7b63      	ldrb	r3, [r4, #13]
   d6306:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d630a:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   d630c:	bf94      	ite	ls
   d630e:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   d6310:	2101      	movhi	r1, #1
   d6312:	b280      	uxth	r0, r0
   d6314:	f003 fa45 	bl	d97a2 <digitalWrite>
    if (_mosi != -1) {
   d6318:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d631c:	1c42      	adds	r2, r0, #1
   d631e:	d009      	beq.n	d6334 <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   d6320:	2101      	movs	r1, #1
   d6322:	b280      	uxth	r0, r0
   d6324:	f003 fa2c 	bl	d9780 <pinMode>
      digitalWrite(_mosi, HIGH);
   d6328:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d632c:	2101      	movs	r1, #1
   d632e:	b280      	uxth	r0, r0
   d6330:	f003 fa37 	bl	d97a2 <digitalWrite>
    if (_miso != -1) {
   d6334:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d6338:	1c43      	adds	r3, r0, #1
   d633a:	d0d9      	beq.n	d62f0 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   d633c:	2100      	movs	r1, #0
   d633e:	b280      	uxth	r0, r0
   d6340:	f003 fa1e 	bl	d9780 <pinMode>
   d6344:	e7d4      	b.n	d62f0 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000d6348 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d6348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d634c:	4604      	mov	r4, r0
  if (_spi) {
   d634e:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d6350:	b085      	sub	sp, #20
   d6352:	460d      	mov	r5, r1
  if (_spi) {
   d6354:	b140      	cbz	r0, d6368 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   d6356:	2300      	movs	r3, #0
   d6358:	9300      	str	r3, [sp, #0]
   d635a:	4613      	mov	r3, r2
   d635c:	460a      	mov	r2, r1
   d635e:	f001 ffd1 	bl	d8304 <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   d6362:	b005      	add	sp, #20
   d6364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   d6368:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d636a:	68a0      	ldr	r0, [r4, #8]
   d636c:	4f48      	ldr	r7, [pc, #288]	; (d6490 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   d636e:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   d6372:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d6374:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   d6376:	bf0c      	ite	eq
   d6378:	f04f 0b01 	moveq.w	fp, #1
   d637c:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d6380:	ea1b 0f03 	tst.w	fp, r3
   d6384:	eb01 0302 	add.w	r3, r1, r2
   d6388:	bf0c      	ite	eq
   d638a:	f04f 0901 	moveq.w	r9, #1
   d638e:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d6392:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   d6394:	9303      	str	r3, [sp, #12]
   d6396:	9b03      	ldr	r3, [sp, #12]
   d6398:	42ab      	cmp	r3, r5
   d639a:	d0e2      	beq.n	d6362 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   d639c:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   d63a0:	465e      	mov	r6, fp
    uint8_t reply = 0;
   d63a2:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   d63a6:	b117      	cbz	r7, d63ae <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d63a8:	4638      	mov	r0, r7
   d63aa:	f001 fc2b 	bl	d7c04 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   d63ae:	7b63      	ldrb	r3, [r4, #13]
   d63b0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d63b4:	d141      	bne.n	d643a <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d63b6:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d63ba:	1c5a      	adds	r2, r3, #1
   d63bc:	d00f      	beq.n	d63de <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   d63be:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d63c2:	bf14      	ite	ne
   d63c4:	2301      	movne	r3, #1
   d63c6:	2300      	moveq	r3, #0
   d63c8:	454b      	cmp	r3, r9
   d63ca:	d008      	beq.n	d63de <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
          if (towrite)
   d63cc:	6963      	ldr	r3, [r4, #20]
   d63ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d63d0:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   d63d2:	2900      	cmp	r1, #0
   d63d4:	d02c      	beq.n	d6430 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   d63d6:	4302      	orrs	r2, r0
   d63d8:	601a      	str	r2, [r3, #0]
   d63da:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   d63de:	69a1      	ldr	r1, [r4, #24]
   d63e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d63e2:	680a      	ldr	r2, [r1, #0]
   d63e4:	4313      	orrs	r3, r2
   d63e6:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d63e8:	b117      	cbz	r7, d63f0 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   d63ea:	4638      	mov	r0, r7
   d63ec:	f001 fc0a 	bl	d7c04 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   d63f0:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d63f4:	3301      	adds	r3, #1
   d63f6:	d006      	beq.n	d6406 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   d63f8:	69e3      	ldr	r3, [r4, #28]
   d63fa:	681a      	ldr	r2, [r3, #0]
   d63fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d63fe:	421a      	tst	r2, r3
            reply |= b;
   d6400:	bf18      	it	ne
   d6402:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   d6406:	69a1      	ldr	r1, [r4, #24]
   d6408:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d640a:	680a      	ldr	r2, [r1, #0]
   d640c:	ea22 0303 	bic.w	r3, r2, r3
   d6410:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   d6412:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d6416:	3301      	adds	r3, #1
        buffer[i] = reply;
   d6418:	bf18      	it	ne
   d641a:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   d641e:	7b23      	ldrb	r3, [r4, #12]
   d6420:	2b00      	cmp	r3, #0
   d6422:	d132      	bne.n	d648a <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   d6424:	0076      	lsls	r6, r6, #1
   d6426:	b2f6      	uxtb	r6, r6
   d6428:	2e00      	cmp	r6, #0
   d642a:	d1bc      	bne.n	d63a6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   d642c:	3501      	adds	r5, #1
   d642e:	e7b2      	b.n	d6396 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   d6430:	ea22 0200 	bic.w	r2, r2, r0
   d6434:	601a      	str	r2, [r3, #0]
   d6436:	4689      	mov	r9, r1
   d6438:	e7d1      	b.n	d63de <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   d643a:	69a1      	ldr	r1, [r4, #24]
   d643c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d643e:	680a      	ldr	r2, [r1, #0]
   d6440:	4313      	orrs	r3, r2
   d6442:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d6444:	b117      	cbz	r7, d644c <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   d6446:	4638      	mov	r0, r7
   d6448:	f001 fbdc 	bl	d7c04 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   d644c:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d6450:	3301      	adds	r3, #1
   d6452:	d008      	beq.n	d6466 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
          if (send & b)
   d6454:	6963      	ldr	r3, [r4, #20]
   d6456:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d6458:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   d645a:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   d645e:	bf14      	ite	ne
   d6460:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   d6462:	438a      	biceq	r2, r1
   d6464:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   d6466:	69a1      	ldr	r1, [r4, #24]
   d6468:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d646a:	680a      	ldr	r2, [r1, #0]
   d646c:	ea22 0303 	bic.w	r3, r2, r3
   d6470:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   d6472:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d6476:	3301      	adds	r3, #1
   d6478:	d0cb      	beq.n	d6412 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   d647a:	69e3      	ldr	r3, [r4, #28]
   d647c:	681a      	ldr	r2, [r3, #0]
   d647e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6480:	421a      	tst	r2, r3
            reply |= b;
   d6482:	bf18      	it	ne
   d6484:	ea46 0808 	orrne.w	r8, r6, r8
   d6488:	e7c3      	b.n	d6412 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   d648a:	0876      	lsrs	r6, r6, #1
   d648c:	e7cc      	b.n	d6428 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   d648e:	bf00      	nop
   d6490:	0007a120 	.word	0x0007a120

000d6494 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   d6494:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   d6496:	2201      	movs	r2, #1
  uint8_t data = send;
   d6498:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   d649c:	f10d 0107 	add.w	r1, sp, #7
   d64a0:	f7ff ff52 	bl	d6348 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   d64a4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d64a8:	b003      	add	sp, #12
   d64aa:	f85d fb04 	ldr.w	pc, [sp], #4

000d64ae <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d64ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d64b2:	4604      	mov	r4, r0
  if (_spi) {
   d64b4:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d64b6:	460e      	mov	r6, r1
   d64b8:	4617      	mov	r7, r2
   d64ba:	461d      	mov	r5, r3
  if (_spi) {
   d64bc:	b110      	cbz	r0, d64c4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   d64be:	6861      	ldr	r1, [r4, #4]
   d64c0:	f001 feac 	bl	d821c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d64c4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d64c8:	2100      	movs	r1, #0
   d64ca:	b280      	uxth	r0, r0
   d64cc:	f003 f969 	bl	d97a2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   d64d0:	9b06      	ldr	r3, [sp, #24]
   d64d2:	eb05 0803 	add.w	r8, r5, r3
   d64d6:	4545      	cmp	r5, r8
   d64d8:	d108      	bne.n	d64ec <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   d64da:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   d64dc:	42b7      	cmp	r7, r6
   d64de:	d00b      	beq.n	d64f8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   d64e0:	f816 1b01 	ldrb.w	r1, [r6], #1
   d64e4:	4620      	mov	r0, r4
   d64e6:	f7ff ffd5 	bl	d6494 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   d64ea:	e7f7      	b.n	d64dc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   d64ec:	f815 1b01 	ldrb.w	r1, [r5], #1
   d64f0:	4620      	mov	r0, r4
   d64f2:	f7ff ffcf 	bl	d6494 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   d64f6:	e7ee      	b.n	d64d6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   d64f8:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d64fc:	2101      	movs	r1, #1
   d64fe:	b280      	uxth	r0, r0
   d6500:	f003 f94f 	bl	d97a2 <digitalWrite>

  if (_spi) {
   d6504:	6820      	ldr	r0, [r4, #0]
   d6506:	b108      	cbz	r0, d650c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   d6508:	f001 fe6f 	bl	d81ea <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d650c:	2001      	movs	r0, #1
   d650e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6512 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d6512:	6042      	str	r2, [r0, #4]
  _begun = false;
   d6514:	2200      	movs	r2, #0
   d6516:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   d6518:	2220      	movs	r2, #32
  _addr = addr;
   d651a:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   d651c:	60c2      	str	r2, [r0, #12]
#endif
}
   d651e:	4770      	bx	lr

000d6520 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   d6520:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d6522:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d6524:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d6526:	b153      	cbz	r3, d653e <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d6528:	7821      	ldrb	r1, [r4, #0]
   d652a:	6860      	ldr	r0, [r4, #4]
   d652c:	f003 f830 	bl	d9590 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   d6530:	6860      	ldr	r0, [r4, #4]
   d6532:	f003 f835 	bl	d95a0 <_ZN7TwoWire15endTransmissionEv>
   d6536:	fab0 f080 	clz	r0, r0
   d653a:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   d653c:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d653e:	2101      	movs	r1, #1
   d6540:	f000 f803 	bl	d654a <_ZN18Adafruit_I2CDevice5beginEb>
   d6544:	2800      	cmp	r0, #0
   d6546:	d1ef      	bne.n	d6528 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d6548:	e7f8      	b.n	d653c <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d654a <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d654a:	b538      	push	{r3, r4, r5, lr}
   d654c:	4604      	mov	r4, r0
  _wire->begin();
   d654e:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d6550:	460d      	mov	r5, r1
  _wire->begin();
   d6552:	f002 ffeb 	bl	d952c <_ZN7TwoWire5beginEv>
  _begun = true;
   d6556:	2001      	movs	r0, #1
   d6558:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   d655a:	b125      	cbz	r5, d6566 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   d655c:	4620      	mov	r0, r4
}
   d655e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   d6562:	f7ff bfdd 	b.w	d6520 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   d6566:	bd38      	pop	{r3, r4, r5, pc}

000d6568 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   d6568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d656c:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d6570:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   d6572:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   d6574:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   d6576:	4432      	add	r2, r6
   d6578:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   d657a:	4604      	mov	r4, r0
   d657c:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   d657e:	d902      	bls.n	d6586 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d6580:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   d6582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d6586:	7801      	ldrb	r1, [r0, #0]
   d6588:	6840      	ldr	r0, [r0, #4]
   d658a:	f003 f801 	bl	d9590 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d658e:	b97e      	cbnz	r6, d65b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   d6590:	6860      	ldr	r0, [r4, #4]
   d6592:	6803      	ldr	r3, [r0, #0]
   d6594:	462a      	mov	r2, r5
   d6596:	68db      	ldr	r3, [r3, #12]
   d6598:	4641      	mov	r1, r8
   d659a:	4798      	blx	r3
   d659c:	4285      	cmp	r5, r0
   d659e:	d1ef      	bne.n	d6580 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   d65a0:	6860      	ldr	r0, [r4, #4]
   d65a2:	4639      	mov	r1, r7
   d65a4:	f002 fff8 	bl	d9598 <_ZN7TwoWire15endTransmissionEh>
   d65a8:	fab0 f080 	clz	r0, r0
   d65ac:	0940      	lsrs	r0, r0, #5
   d65ae:	e7e8      	b.n	d6582 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d65b0:	f1b9 0f00 	cmp.w	r9, #0
   d65b4:	d0ec      	beq.n	d6590 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
   d65b6:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d65b8:	6803      	ldr	r3, [r0, #0]
   d65ba:	4632      	mov	r2, r6
   d65bc:	68db      	ldr	r3, [r3, #12]
   d65be:	4649      	mov	r1, r9
   d65c0:	4798      	blx	r3
   d65c2:	42b0      	cmp	r0, r6
   d65c4:	d1dc      	bne.n	d6580 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   d65c6:	e7e3      	b.n	d6590 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000d65c8 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   d65c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d65cc:	4615      	mov	r5, r2
   d65ce:	4604      	mov	r4, r0
   d65d0:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   d65d2:	b2d2      	uxtb	r2, r2
   d65d4:	7801      	ldrb	r1, [r0, #0]
   d65d6:	6840      	ldr	r0, [r0, #4]
   d65d8:	f002 ffc5 	bl	d9566 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   d65dc:	4285      	cmp	r5, r0
   d65de:	d10d      	bne.n	d65fc <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   d65e0:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   d65e2:	fa1f f887 	uxth.w	r8, r7
   d65e6:	45a8      	cmp	r8, r5
   d65e8:	f107 0701 	add.w	r7, r7, #1
   d65ec:	d209      	bcs.n	d6602 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   d65ee:	6860      	ldr	r0, [r4, #4]
   d65f0:	6803      	ldr	r3, [r0, #0]
   d65f2:	695b      	ldr	r3, [r3, #20]
   d65f4:	4798      	blx	r3
   d65f6:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   d65fa:	e7f2      	b.n	d65e2 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   d65fc:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d65fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6602:	2001      	movs	r0, #1
   d6604:	e7fb      	b.n	d65fe <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000d6606 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d6606:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d660a:	4607      	mov	r7, r0
   d660c:	4688      	mov	r8, r1
   d660e:	4616      	mov	r6, r2
   d6610:	4699      	mov	r9, r3
  size_t pos = 0;
   d6612:	2500      	movs	r5, #0
  while (pos < len) {
   d6614:	42b5      	cmp	r5, r6
   d6616:	d212      	bcs.n	d663e <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   d6618:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   d661a:	1b74      	subs	r4, r6, r5
   d661c:	4294      	cmp	r4, r2
   d661e:	bf28      	it	cs
   d6620:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   d6622:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   d6624:	42ab      	cmp	r3, r5
   d6626:	bf94      	ite	ls
   d6628:	464b      	movls	r3, r9
   d662a:	2300      	movhi	r3, #0
   d662c:	4622      	mov	r2, r4
   d662e:	eb08 0105 	add.w	r1, r8, r5
   d6632:	4638      	mov	r0, r7
   d6634:	f7ff ffc8 	bl	d65c8 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   d6638:	b110      	cbz	r0, d6640 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   d663a:	4425      	add	r5, r4
  while (pos < len) {
   d663c:	e7ea      	b.n	d6614 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   d663e:	2001      	movs	r0, #1
}
   d6640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6644 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   d6644:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6646:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   d6648:	2300      	movs	r3, #0
   d664a:	e9cd 3300 	strd	r3, r3, [sp]
   d664e:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   d6652:	9e06      	ldr	r6, [sp, #24]
   d6654:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   d6656:	f7ff ff87 	bl	d6568 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d665a:	b140      	cbz	r0, d666e <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   d665c:	2301      	movs	r3, #1
   d665e:	4632      	mov	r2, r6
   d6660:	4629      	mov	r1, r5
   d6662:	4620      	mov	r0, r4
}
   d6664:	b002      	add	sp, #8
   d6666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d666a:	f7ff bfcc 	b.w	d6606 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d666e:	b002      	add	sp, #8
   d6670:	bd70      	pop	{r4, r5, r6, pc}

000d6672 <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   d6672:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d6674:	6840      	ldr	r0, [r0, #4]
   d6676:	f002 ff55 	bl	d9524 <_ZN7TwoWire8setSpeedEm>
  return true;
#else
  (void)desiredclk;
  return false;
#endif
}
   d667a:	2001      	movs	r0, #1
   d667c:	bd08      	pop	{r3, pc}

000d667e <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d667e:	4770      	bx	lr

000d6680 <_ZN15Adafruit_BNO055D1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
   d6680:	4770      	bx	lr
	...

000d6684 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 *          Sensor description
 */
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d6684:	460b      	mov	r3, r1
   d6686:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d6688:	2228      	movs	r2, #40	; 0x28
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d668a:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d668c:	2100      	movs	r1, #0
   d668e:	4618      	mov	r0, r3
   d6690:	f006 fda4 	bl	dd1dc <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
   d6694:	4909      	ldr	r1, [pc, #36]	; (d66bc <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x38>)
   d6696:	220b      	movs	r2, #11
   d6698:	f006 fdf1 	bl	dd27e <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d669c:	2200      	movs	r2, #0
  sensor->version = 1;
   d669e:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d66a0:	72c2      	strb	r2, [r0, #11]
  sensor->version = 1;
   d66a2:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _sensorID;
   d66a4:	68e1      	ldr	r1, [r4, #12]
  sensor->type = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay = 0;
   d66a6:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->max_value = 0.0F;
   d66a8:	2200      	movs	r2, #0
  sensor->sensor_id = _sensorID;
   d66aa:	6101      	str	r1, [r0, #16]
  sensor->max_value = 0.0F;
   d66ac:	6182      	str	r2, [r0, #24]
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d66ae:	2103      	movs	r1, #3
  sensor->min_value = 0.0F;
   d66b0:	61c2      	str	r2, [r0, #28]
  sensor->resolution = 0.01F;
   d66b2:	4a03      	ldr	r2, [pc, #12]	; (d66c0 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x3c>)
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d66b4:	6141      	str	r1, [r0, #20]
  sensor->resolution = 0.01F;
   d66b6:	6202      	str	r2, [r0, #32]
}
   d66b8:	bd10      	pop	{r4, pc}
   d66ba:	bf00      	nop
   d66bc:	000dd96e 	.word	0x000dd96e
   d66c0:	3c23d70a 	.word	0x3c23d70a

000d66c4 <_ZN15Adafruit_BNO055D0Ev>:
   d66c4:	b510      	push	{r4, lr}
   d66c6:	2114      	movs	r1, #20
   d66c8:	4604      	mov	r4, r0
   d66ca:	f003 f901 	bl	d98d0 <_ZdlPvj>
   d66ce:	4620      	mov	r0, r4
   d66d0:	bd10      	pop	{r4, pc}
	...

000d66d4 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d66d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d66d6:	9301      	str	r3, [sp, #4]
                                 TwoWire *theWire) {
   d66d8:	4b09      	ldr	r3, [pc, #36]	; (d6700 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x2c>)
   d66da:	6003      	str	r3, [r0, #0]
   d66dc:	2300      	movs	r3, #0
  _sensorID = sensorID;
   d66de:	e9c0 3102 	strd	r3, r1, [r0, #8]
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d66e2:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d66e4:	2010      	movs	r0, #16
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d66e6:	4616      	mov	r6, r2
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d66e8:	f7fd fcd5 	bl	d4096 <_Znwj>
   d66ec:	4605      	mov	r5, r0
   d66ee:	b118      	cbz	r0, d66f8 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x24>
   d66f0:	9a01      	ldr	r2, [sp, #4]
   d66f2:	4631      	mov	r1, r6
   d66f4:	f7ff ff0d 	bl	d6512 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
}
   d66f8:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d66fa:	60a5      	str	r5, [r4, #8]
}
   d66fc:	b002      	add	sp, #8
   d66fe:	bd70      	pop	{r4, r5, r6, pc}
   d6700:	000ddaac 	.word	0x000ddaac

000d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value) {
   d6704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
  return i2c_dev->write(buffer, 2);
   d6706:	2300      	movs	r3, #0
   d6708:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
   d670c:	f88d 100c 	strb.w	r1, [sp, #12]
   d6710:	f88d 200d 	strb.w	r2, [sp, #13]
  return i2c_dev->write(buffer, 2);
   d6714:	2301      	movs	r3, #1
   d6716:	2202      	movs	r2, #2
   d6718:	a903      	add	r1, sp, #12
   d671a:	6880      	ldr	r0, [r0, #8]
   d671c:	f7ff ff24 	bl	d6568 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d6720:	b005      	add	sp, #20
   d6722:	f85d fb04 	ldr.w	pc, [sp], #4

000d6726 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
   d6726:	b508      	push	{r3, lr}
   d6728:	460a      	mov	r2, r1
  _mode = mode;
   d672a:	7401      	strb	r1, [r0, #16]
  write8(BNO055_OPR_MODE_ADDR, _mode);
   d672c:	213d      	movs	r1, #61	; 0x3d
   d672e:	f7ff ffe9 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
}
   d6732:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(30);
   d6736:	201e      	movs	r0, #30
   d6738:	f002 b958 	b.w	d89ec <delay>

000d673c <_ZN15Adafruit_BNO05516setExtCrystalUseEb>:
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d673c:	b570      	push	{r4, r5, r6, lr}
   d673e:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d6740:	2100      	movs	r1, #0
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d6742:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t modeback = _mode;
   d6744:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d6746:	f7ff ffee 	bl	d6726 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d674a:	2019      	movs	r0, #25
   d674c:	f002 f94e 	bl	d89ec <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6750:	2200      	movs	r2, #0
   d6752:	2107      	movs	r1, #7
   d6754:	4620      	mov	r0, r4
   d6756:	f7ff ffd5 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (usextal) {
   d675a:	b185      	cbz	r5, d677e <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x42>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x80);
   d675c:	2280      	movs	r2, #128	; 0x80
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d675e:	213f      	movs	r1, #63	; 0x3f
   d6760:	4620      	mov	r0, r4
   d6762:	f7ff ffcf 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6766:	200a      	movs	r0, #10
   d6768:	f002 f940 	bl	d89ec <delay>
  setMode(modeback);
   d676c:	4620      	mov	r0, r4
   d676e:	4631      	mov	r1, r6
   d6770:	f7ff ffd9 	bl	d6726 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d6774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(20);
   d6778:	2014      	movs	r0, #20
   d677a:	f002 b937 	b.w	d89ec <delay>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d677e:	462a      	mov	r2, r5
   d6780:	e7ed      	b.n	d675e <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x22>

000d6782 <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>:
    const adafruit_bno055_offsets_t &offsets_type) {
   d6782:	b570      	push	{r4, r5, r6, lr}
   d6784:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d6786:	2100      	movs	r1, #0
    const adafruit_bno055_offsets_t &offsets_type) {
   d6788:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t lastMode = _mode;
   d678a:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d678c:	f7ff ffcb 	bl	d6726 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d6790:	2019      	movs	r0, #25
   d6792:	f002 f92b 	bl	d89ec <delay>
  write8(ACCEL_OFFSET_X_LSB_ADDR, (offsets_type.accel_offset_x) & 0x0FF);
   d6796:	782a      	ldrb	r2, [r5, #0]
   d6798:	2155      	movs	r1, #85	; 0x55
   d679a:	4620      	mov	r0, r4
   d679c:	f7ff ffb2 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_X_MSB_ADDR, (offsets_type.accel_offset_x >> 8) & 0x0FF);
   d67a0:	786a      	ldrb	r2, [r5, #1]
   d67a2:	2156      	movs	r1, #86	; 0x56
   d67a4:	4620      	mov	r0, r4
   d67a6:	f7ff ffad 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_LSB_ADDR, (offsets_type.accel_offset_y) & 0x0FF);
   d67aa:	78aa      	ldrb	r2, [r5, #2]
   d67ac:	2157      	movs	r1, #87	; 0x57
   d67ae:	4620      	mov	r0, r4
   d67b0:	f7ff ffa8 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_MSB_ADDR, (offsets_type.accel_offset_y >> 8) & 0x0FF);
   d67b4:	78ea      	ldrb	r2, [r5, #3]
   d67b6:	2158      	movs	r1, #88	; 0x58
   d67b8:	4620      	mov	r0, r4
   d67ba:	f7ff ffa3 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_LSB_ADDR, (offsets_type.accel_offset_z) & 0x0FF);
   d67be:	792a      	ldrb	r2, [r5, #4]
   d67c0:	2159      	movs	r1, #89	; 0x59
   d67c2:	4620      	mov	r0, r4
   d67c4:	f7ff ff9e 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_MSB_ADDR, (offsets_type.accel_offset_z >> 8) & 0x0FF);
   d67c8:	796a      	ldrb	r2, [r5, #5]
   d67ca:	215a      	movs	r1, #90	; 0x5a
   d67cc:	4620      	mov	r0, r4
   d67ce:	f7ff ff99 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_LSB_ADDR, (offsets_type.mag_offset_x) & 0x0FF);
   d67d2:	79aa      	ldrb	r2, [r5, #6]
   d67d4:	215b      	movs	r1, #91	; 0x5b
   d67d6:	4620      	mov	r0, r4
   d67d8:	f7ff ff94 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_MSB_ADDR, (offsets_type.mag_offset_x >> 8) & 0x0FF);
   d67dc:	79ea      	ldrb	r2, [r5, #7]
   d67de:	215c      	movs	r1, #92	; 0x5c
   d67e0:	4620      	mov	r0, r4
   d67e2:	f7ff ff8f 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_LSB_ADDR, (offsets_type.mag_offset_y) & 0x0FF);
   d67e6:	7a2a      	ldrb	r2, [r5, #8]
   d67e8:	215d      	movs	r1, #93	; 0x5d
   d67ea:	4620      	mov	r0, r4
   d67ec:	f7ff ff8a 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_MSB_ADDR, (offsets_type.mag_offset_y >> 8) & 0x0FF);
   d67f0:	7a6a      	ldrb	r2, [r5, #9]
   d67f2:	215e      	movs	r1, #94	; 0x5e
   d67f4:	4620      	mov	r0, r4
   d67f6:	f7ff ff85 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_LSB_ADDR, (offsets_type.mag_offset_z) & 0x0FF);
   d67fa:	7aaa      	ldrb	r2, [r5, #10]
   d67fc:	215f      	movs	r1, #95	; 0x5f
   d67fe:	4620      	mov	r0, r4
   d6800:	f7ff ff80 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_MSB_ADDR, (offsets_type.mag_offset_z >> 8) & 0x0FF);
   d6804:	7aea      	ldrb	r2, [r5, #11]
   d6806:	2160      	movs	r1, #96	; 0x60
   d6808:	4620      	mov	r0, r4
   d680a:	f7ff ff7b 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_LSB_ADDR, (offsets_type.gyro_offset_x) & 0x0FF);
   d680e:	7b2a      	ldrb	r2, [r5, #12]
   d6810:	2161      	movs	r1, #97	; 0x61
   d6812:	4620      	mov	r0, r4
   d6814:	f7ff ff76 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_MSB_ADDR, (offsets_type.gyro_offset_x >> 8) & 0x0FF);
   d6818:	7b6a      	ldrb	r2, [r5, #13]
   d681a:	2162      	movs	r1, #98	; 0x62
   d681c:	4620      	mov	r0, r4
   d681e:	f7ff ff71 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_LSB_ADDR, (offsets_type.gyro_offset_y) & 0x0FF);
   d6822:	7baa      	ldrb	r2, [r5, #14]
   d6824:	2163      	movs	r1, #99	; 0x63
   d6826:	4620      	mov	r0, r4
   d6828:	f7ff ff6c 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_MSB_ADDR, (offsets_type.gyro_offset_y >> 8) & 0x0FF);
   d682c:	7bea      	ldrb	r2, [r5, #15]
   d682e:	2164      	movs	r1, #100	; 0x64
   d6830:	4620      	mov	r0, r4
   d6832:	f7ff ff67 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_LSB_ADDR, (offsets_type.gyro_offset_z) & 0x0FF);
   d6836:	7c2a      	ldrb	r2, [r5, #16]
   d6838:	2165      	movs	r1, #101	; 0x65
   d683a:	4620      	mov	r0, r4
   d683c:	f7ff ff62 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_MSB_ADDR, (offsets_type.gyro_offset_z >> 8) & 0x0FF);
   d6840:	7c6a      	ldrb	r2, [r5, #17]
   d6842:	2166      	movs	r1, #102	; 0x66
   d6844:	4620      	mov	r0, r4
   d6846:	f7ff ff5d 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_LSB_ADDR, (offsets_type.accel_radius) & 0x0FF);
   d684a:	7caa      	ldrb	r2, [r5, #18]
   d684c:	2167      	movs	r1, #103	; 0x67
   d684e:	4620      	mov	r0, r4
   d6850:	f7ff ff58 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_MSB_ADDR, (offsets_type.accel_radius >> 8) & 0x0FF);
   d6854:	7cea      	ldrb	r2, [r5, #19]
   d6856:	2168      	movs	r1, #104	; 0x68
   d6858:	4620      	mov	r0, r4
   d685a:	f7ff ff53 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_LSB_ADDR, (offsets_type.mag_radius) & 0x0FF);
   d685e:	7d2a      	ldrb	r2, [r5, #20]
   d6860:	2169      	movs	r1, #105	; 0x69
   d6862:	4620      	mov	r0, r4
   d6864:	f7ff ff4e 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_MSB_ADDR, (offsets_type.mag_radius >> 8) & 0x0FF);
   d6868:	7d6a      	ldrb	r2, [r5, #21]
   d686a:	216a      	movs	r1, #106	; 0x6a
   d686c:	4620      	mov	r0, r4
   d686e:	f7ff ff49 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  setMode(lastMode);
   d6872:	4631      	mov	r1, r6
   d6874:	4620      	mov	r0, r4
}
   d6876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setMode(lastMode);
   d687a:	f7ff bf54 	b.w	d6726 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

000d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
   d687e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[1] = {reg};
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d6880:	2201      	movs	r2, #1
   d6882:	2300      	movs	r3, #0
   d6884:	e9cd 2300 	strd	r2, r3, [sp]
   d6888:	ab03      	add	r3, sp, #12
  uint8_t buffer[1] = {reg};
   d688a:	f88d 100c 	strb.w	r1, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d688e:	6880      	ldr	r0, [r0, #8]
   d6890:	4619      	mov	r1, r3
   d6892:	f7ff fed7 	bl	d6644 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
  return (byte)buffer[0];
}
   d6896:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d689a:	b005      	add	sp, #20
   d689c:	f85d fb04 	ldr.w	pc, [sp], #4

000d68a0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
   d68a0:	b570      	push	{r4, r5, r6, lr}
   d68a2:	4604      	mov	r4, r0
   d68a4:	460e      	mov	r6, r1
  if (!i2c_dev->begin()) {
   d68a6:	6880      	ldr	r0, [r0, #8]
   d68a8:	2101      	movs	r1, #1
   d68aa:	f7ff fe4e 	bl	d654a <_ZN18Adafruit_I2CDevice5beginEb>
   d68ae:	4605      	mov	r5, r0
   d68b0:	b910      	cbnz	r0, d68b8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x18>
    return false;
   d68b2:	2500      	movs	r5, #0
}
   d68b4:	4628      	mov	r0, r5
   d68b6:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
   d68b8:	2100      	movs	r1, #0
   d68ba:	4620      	mov	r0, r4
   d68bc:	f7ff ffdf 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (id != BNO055_ID) {
   d68c0:	28a0      	cmp	r0, #160	; 0xa0
   d68c2:	d113      	bne.n	d68ec <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4c>
  setMode(OPERATION_MODE_CONFIG);
   d68c4:	2100      	movs	r1, #0
   d68c6:	4620      	mov	r0, r4
   d68c8:	f7ff ff2d 	bl	d6726 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
   d68cc:	2220      	movs	r2, #32
   d68ce:	213f      	movs	r1, #63	; 0x3f
   d68d0:	4620      	mov	r0, r4
   d68d2:	f7ff ff17 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
   d68d6:	201e      	movs	r0, #30
    delay(10);
   d68d8:	f002 f888 	bl	d89ec <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
   d68dc:	2100      	movs	r1, #0
   d68de:	4620      	mov	r0, r4
   d68e0:	f7ff ffcd 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d68e4:	28a0      	cmp	r0, #160	; 0xa0
   d68e6:	d00c      	beq.n	d6902 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x62>
    delay(10);
   d68e8:	200a      	movs	r0, #10
   d68ea:	e7f5      	b.n	d68d8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x38>
    delay(1000); // hold on for boot
   d68ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d68f0:	f002 f87c 	bl	d89ec <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
   d68f4:	2100      	movs	r1, #0
   d68f6:	4620      	mov	r0, r4
   d68f8:	f7ff ffc1 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if (id != BNO055_ID) {
   d68fc:	28a0      	cmp	r0, #160	; 0xa0
   d68fe:	d1d8      	bne.n	d68b2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x12>
   d6900:	e7e0      	b.n	d68c4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x24>
  delay(50);
   d6902:	2032      	movs	r0, #50	; 0x32
   d6904:	f002 f872 	bl	d89ec <delay>
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
   d6908:	2200      	movs	r2, #0
   d690a:	213e      	movs	r1, #62	; 0x3e
   d690c:	4620      	mov	r0, r4
   d690e:	f7ff fef9 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6912:	200a      	movs	r0, #10
   d6914:	f002 f86a 	bl	d89ec <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6918:	2200      	movs	r2, #0
   d691a:	2107      	movs	r1, #7
   d691c:	4620      	mov	r0, r4
   d691e:	f7ff fef1 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
   d6922:	2200      	movs	r2, #0
   d6924:	213f      	movs	r1, #63	; 0x3f
   d6926:	4620      	mov	r0, r4
   d6928:	f7ff feec 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d692c:	200a      	movs	r0, #10
   d692e:	f002 f85d 	bl	d89ec <delay>
  setMode(mode);
   d6932:	4620      	mov	r0, r4
   d6934:	4631      	mov	r1, r6
   d6936:	f7ff fef6 	bl	d6726 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   d693a:	2014      	movs	r0, #20
   d693c:	f002 f856 	bl	d89ec <delay>
  return true;
   d6940:	e7b8      	b.n	d68b4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x14>

000d6942 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>:
                                      uint8_t *system_error) {
   d6942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6944:	460f      	mov	r7, r1
   d6946:	4616      	mov	r6, r2
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6948:	2107      	movs	r1, #7
   d694a:	2200      	movs	r2, #0
                                      uint8_t *system_error) {
   d694c:	4604      	mov	r4, r0
   d694e:	461d      	mov	r5, r3
  write8(BNO055_PAGE_ID_ADDR, 0);
   d6950:	f7ff fed8 	bl	d6704 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (system_status != 0)
   d6954:	b127      	cbz	r7, d6960 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x1e>
    *system_status = read8(BNO055_SYS_STAT_ADDR);
   d6956:	2139      	movs	r1, #57	; 0x39
   d6958:	4620      	mov	r0, r4
   d695a:	f7ff ff90 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d695e:	7038      	strb	r0, [r7, #0]
  if (self_test_result != 0)
   d6960:	b126      	cbz	r6, d696c <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x2a>
    *self_test_result = read8(BNO055_SELFTEST_RESULT_ADDR);
   d6962:	2136      	movs	r1, #54	; 0x36
   d6964:	4620      	mov	r0, r4
   d6966:	f7ff ff8a 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d696a:	7030      	strb	r0, [r6, #0]
  if (system_error != 0)
   d696c:	b125      	cbz	r5, d6978 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x36>
    *system_error = read8(BNO055_SYS_ERR_ADDR);
   d696e:	213a      	movs	r1, #58	; 0x3a
   d6970:	4620      	mov	r0, r4
   d6972:	f7ff ff84 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6976:	7028      	strb	r0, [r5, #0]
}
   d6978:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(200);
   d697c:	20c8      	movs	r0, #200	; 0xc8
   d697e:	f002 b835 	b.w	d89ec <delay>

000d6982 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>:
                                     uint8_t *accel, uint8_t *mag) {
   d6982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6984:	460e      	mov	r6, r1
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d6986:	2135      	movs	r1, #53	; 0x35
                                     uint8_t *accel, uint8_t *mag) {
   d6988:	9f06      	ldr	r7, [sp, #24]
   d698a:	4615      	mov	r5, r2
   d698c:	461c      	mov	r4, r3
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d698e:	f7ff ff76 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (sys != NULL) {
   d6992:	b10e      	cbz	r6, d6998 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x16>
    *sys = (calData >> 6) & 0x03;
   d6994:	0983      	lsrs	r3, r0, #6
   d6996:	7033      	strb	r3, [r6, #0]
  if (gyro != NULL) {
   d6998:	b115      	cbz	r5, d69a0 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x1e>
    *gyro = (calData >> 4) & 0x03;
   d699a:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d699e:	702b      	strb	r3, [r5, #0]
  if (accel != NULL) {
   d69a0:	b114      	cbz	r4, d69a8 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x26>
    *accel = (calData >> 2) & 0x03;
   d69a2:	f3c0 0381 	ubfx	r3, r0, #2, #2
   d69a6:	7023      	strb	r3, [r4, #0]
  if (mag != NULL) {
   d69a8:	b117      	cbz	r7, d69b0 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x2e>
    *mag = calData & 0x03;
   d69aa:	f000 0003 	and.w	r0, r0, #3
   d69ae:	7038      	strb	r0, [r7, #0]
}
   d69b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d69b2 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>:
bool Adafruit_BNO055::isFullyCalibrated() {
   d69b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d69b4:	4604      	mov	r4, r0
  getCalibration(&system, &gyro, &accel, &mag);
   d69b6:	f10d 030f 	add.w	r3, sp, #15
   d69ba:	9300      	str	r3, [sp, #0]
   d69bc:	f10d 020d 	add.w	r2, sp, #13
   d69c0:	f10d 030e 	add.w	r3, sp, #14
   d69c4:	a903      	add	r1, sp, #12
   d69c6:	f7ff ffdc 	bl	d6982 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
  switch (_mode) {
   d69ca:	7c23      	ldrb	r3, [r4, #16]
   d69cc:	3b01      	subs	r3, #1
   d69ce:	2b09      	cmp	r3, #9
   d69d0:	d817      	bhi.n	d6a02 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x50>
   d69d2:	e8df f003 	tbb	[pc, r3]
   d69d6:	2205      	.short	0x2205
   d69d8:	130c1e10 	.word	0x130c1e10
   d69dc:	101e0c16 	.word	0x101e0c16
    return (accel == 3);
   d69e0:	f89d 000e 	ldrb.w	r0, [sp, #14]
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   d69e4:	1ec3      	subs	r3, r0, #3
   d69e6:	4258      	negs	r0, r3
   d69e8:	4158      	adcs	r0, r3
}
   d69ea:	b004      	add	sp, #16
   d69ec:	bd10      	pop	{r4, pc}
    return (accel == 3 && gyro == 3);
   d69ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
    return (mag == 3 && gyro == 3);
   d69f2:	2b03      	cmp	r3, #3
   d69f4:	d114      	bne.n	d6a20 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d69f6:	f89d 000d 	ldrb.w	r0, [sp, #13]
   d69fa:	e7f3      	b.n	d69e4 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
   d69fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d6a00:	e7f7      	b.n	d69f2 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x40>
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   d6a02:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6a06:	2b03      	cmp	r3, #3
   d6a08:	d10a      	bne.n	d6a20 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6a0a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6a0e:	2b03      	cmp	r3, #3
   d6a10:	d106      	bne.n	d6a20 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6a12:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6a16:	2b03      	cmp	r3, #3
   d6a18:	d102      	bne.n	d6a20 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   d6a1a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   d6a1e:	e7e1      	b.n	d69e4 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
    return (accel == 3 && mag == 3);
   d6a20:	2000      	movs	r0, #0
   d6a22:	e7e2      	b.n	d69ea <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x38>

000d6a24 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>:
    adafruit_bno055_offsets_t &offsets_type) {
   d6a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6a28:	4604      	mov	r4, r0
   d6a2a:	460d      	mov	r5, r1
  if (isFullyCalibrated()) {
   d6a2c:	f7ff ffc1 	bl	d69b2 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   d6a30:	4606      	mov	r6, r0
   d6a32:	2800      	cmp	r0, #0
   d6a34:	f000 8091 	beq.w	d6b5a <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t+0x136>
    setMode(OPERATION_MODE_CONFIG);
   d6a38:	2100      	movs	r1, #0
   d6a3a:	4620      	mov	r0, r4
    adafruit_bno055_opmode_t lastMode = _mode;
   d6a3c:	f894 8010 	ldrb.w	r8, [r4, #16]
    setMode(OPERATION_MODE_CONFIG);
   d6a40:	f7ff fe71 	bl	d6726 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
    delay(25);
   d6a44:	2019      	movs	r0, #25
   d6a46:	f001 ffd1 	bl	d89ec <delay>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6a4a:	2156      	movs	r1, #86	; 0x56
   d6a4c:	4620      	mov	r0, r4
   d6a4e:	f7ff ff16 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   d6a52:	2155      	movs	r1, #85	; 0x55
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6a54:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   d6a56:	4620      	mov	r0, r4
   d6a58:	f7ff ff11 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   d6a5c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6a60:	8028      	strh	r0, [r5, #0]
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6a62:	2158      	movs	r1, #88	; 0x58
   d6a64:	4620      	mov	r0, r4
   d6a66:	f7ff ff0a 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   d6a6a:	2157      	movs	r1, #87	; 0x57
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6a6c:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   d6a6e:	4620      	mov	r0, r4
   d6a70:	f7ff ff05 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   d6a74:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6a78:	8068      	strh	r0, [r5, #2]
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6a7a:	215a      	movs	r1, #90	; 0x5a
   d6a7c:	4620      	mov	r0, r4
   d6a7e:	f7ff fefe 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   d6a82:	2159      	movs	r1, #89	; 0x59
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6a84:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   d6a86:	4620      	mov	r0, r4
   d6a88:	f7ff fef9 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   d6a8c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   d6a90:	80a8      	strh	r0, [r5, #4]
        (read8(MAG_OFFSET_X_MSB_ADDR) << 8) | (read8(MAG_OFFSET_X_LSB_ADDR));
   d6a92:	215c      	movs	r1, #92	; 0x5c
   d6a94:	4620      	mov	r0, r4
   d6a96:	f7ff fef2 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6a9a:	215b      	movs	r1, #91	; 0x5b
   d6a9c:	4607      	mov	r7, r0
   d6a9e:	4620      	mov	r0, r4
   d6aa0:	f7ff feed 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6aa4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_x =
   d6aa8:	80e8      	strh	r0, [r5, #6]
        (read8(MAG_OFFSET_Y_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Y_LSB_ADDR));
   d6aaa:	215e      	movs	r1, #94	; 0x5e
   d6aac:	4620      	mov	r0, r4
   d6aae:	f7ff fee6 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ab2:	215d      	movs	r1, #93	; 0x5d
   d6ab4:	4607      	mov	r7, r0
   d6ab6:	4620      	mov	r0, r4
   d6ab8:	f7ff fee1 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6abc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_y =
   d6ac0:	8128      	strh	r0, [r5, #8]
        (read8(MAG_OFFSET_Z_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Z_LSB_ADDR));
   d6ac2:	2160      	movs	r1, #96	; 0x60
   d6ac4:	4620      	mov	r0, r4
   d6ac6:	f7ff feda 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6aca:	215f      	movs	r1, #95	; 0x5f
   d6acc:	4607      	mov	r7, r0
   d6ace:	4620      	mov	r0, r4
   d6ad0:	f7ff fed5 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ad4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_z =
   d6ad8:	8168      	strh	r0, [r5, #10]
        (read8(GYRO_OFFSET_X_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_X_LSB_ADDR));
   d6ada:	2162      	movs	r1, #98	; 0x62
   d6adc:	4620      	mov	r0, r4
   d6ade:	f7ff fece 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6ae2:	2161      	movs	r1, #97	; 0x61
   d6ae4:	4607      	mov	r7, r0
   d6ae6:	4620      	mov	r0, r4
   d6ae8:	f7ff fec9 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6aec:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_x =
   d6af0:	81a8      	strh	r0, [r5, #12]
        (read8(GYRO_OFFSET_Y_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Y_LSB_ADDR));
   d6af2:	2164      	movs	r1, #100	; 0x64
   d6af4:	4620      	mov	r0, r4
   d6af6:	f7ff fec2 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6afa:	2163      	movs	r1, #99	; 0x63
   d6afc:	4607      	mov	r7, r0
   d6afe:	4620      	mov	r0, r4
   d6b00:	f7ff febd 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b04:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_y =
   d6b08:	81e8      	strh	r0, [r5, #14]
        (read8(GYRO_OFFSET_Z_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Z_LSB_ADDR));
   d6b0a:	2166      	movs	r1, #102	; 0x66
   d6b0c:	4620      	mov	r0, r4
   d6b0e:	f7ff feb6 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b12:	2165      	movs	r1, #101	; 0x65
   d6b14:	4607      	mov	r7, r0
   d6b16:	4620      	mov	r0, r4
   d6b18:	f7ff feb1 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b1c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_z =
   d6b20:	8228      	strh	r0, [r5, #16]
        (read8(ACCEL_RADIUS_MSB_ADDR) << 8) | (read8(ACCEL_RADIUS_LSB_ADDR));
   d6b22:	2168      	movs	r1, #104	; 0x68
   d6b24:	4620      	mov	r0, r4
   d6b26:	f7ff feaa 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b2a:	2167      	movs	r1, #103	; 0x67
   d6b2c:	4607      	mov	r7, r0
   d6b2e:	4620      	mov	r0, r4
   d6b30:	f7ff fea5 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b34:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.accel_radius =
   d6b38:	8268      	strh	r0, [r5, #18]
        (read8(MAG_RADIUS_MSB_ADDR) << 8) | (read8(MAG_RADIUS_LSB_ADDR));
   d6b3a:	216a      	movs	r1, #106	; 0x6a
   d6b3c:	4620      	mov	r0, r4
   d6b3e:	f7ff fe9e 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b42:	2169      	movs	r1, #105	; 0x69
   d6b44:	4607      	mov	r7, r0
   d6b46:	4620      	mov	r0, r4
   d6b48:	f7ff fe99 	bl	d687e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6b4c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_radius =
   d6b50:	82a8      	strh	r0, [r5, #20]
    setMode(lastMode);
   d6b52:	4641      	mov	r1, r8
   d6b54:	4620      	mov	r0, r4
   d6b56:	f7ff fde6 	bl	d6726 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d6b5a:	4630      	mov	r0, r6
   d6b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6b60 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte *buffer,
                              uint8_t len) {
   d6b60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t reg_buf[1] = {(uint8_t)reg};
   d6b62:	f88d 100c 	strb.w	r1, [sp, #12]
  return i2c_dev->write_then_read(reg_buf, 1, buffer, len);
   d6b66:	2100      	movs	r1, #0
   d6b68:	e9cd 3100 	strd	r3, r1, [sp]
   d6b6c:	4613      	mov	r3, r2
   d6b6e:	a903      	add	r1, sp, #12
   d6b70:	2201      	movs	r2, #1
   d6b72:	6880      	ldr	r0, [r0, #8]
   d6b74:	f7ff fd66 	bl	d6644 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
}
   d6b78:	b005      	add	sp, #20
   d6b7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6b80 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
   d6b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6b82:	460d      	mov	r5, r1
   d6b84:	4616      	mov	r6, r2

namespace imu {

template <uint8_t N> class Vector {
public:
  Vector() { memset(p_vec, 0, sizeof(double) * N); }
   d6b86:	2100      	movs	r1, #0
   d6b88:	2218      	movs	r2, #24
   d6b8a:	4604      	mov	r4, r0
   d6b8c:	f006 fb26 	bl	dd1dc <memset>
  memset(buffer, 0, 6);
   d6b90:	2300      	movs	r3, #0
   d6b92:	9300      	str	r3, [sp, #0]
   d6b94:	f8ad 3004 	strh.w	r3, [sp, #4]
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
   d6b98:	4628      	mov	r0, r5
   d6b9a:	2306      	movs	r3, #6
   d6b9c:	466a      	mov	r2, sp
   d6b9e:	4631      	mov	r1, r6
   d6ba0:	f7ff ffde 	bl	d6b60 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6ba4:	f89d 3001 	ldrb.w	r3, [sp, #1]
   d6ba8:	f89d 0000 	ldrb.w	r0, [sp]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6bac:	f89d 7002 	ldrb.w	r7, [sp, #2]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6bb0:	f89d 5004 	ldrb.w	r5, [sp, #4]
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6bb4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6bb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d6bbc:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6bc0:	f89d 3005 	ldrb.w	r3, [sp, #5]
  switch (vector_type) {
   d6bc4:	2e1a      	cmp	r6, #26
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6bc6:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6bca:	b200      	sxth	r0, r0
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6bcc:	b23f      	sxth	r7, r7
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6bce:	b22d      	sxth	r5, r5
  switch (vector_type) {
   d6bd0:	d00d      	beq.n	d6bee <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6bd2:	d808      	bhi.n	d6be6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x66>
   d6bd4:	2e0e      	cmp	r6, #14
   d6bd6:	d00a      	beq.n	d6bee <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6bd8:	2e14      	cmp	r6, #20
   d6bda:	d008      	beq.n	d6bee <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d6bdc:	2e08      	cmp	r6, #8
   d6bde:	d021      	beq.n	d6c24 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
}
   d6be0:	4620      	mov	r0, r4
   d6be2:	b003      	add	sp, #12
   d6be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (vector_type) {
   d6be6:	2e28      	cmp	r6, #40	; 0x28
   d6be8:	d01c      	beq.n	d6c24 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
   d6bea:	2e2e      	cmp	r6, #46	; 0x2e
   d6bec:	e7f7      	b.n	d6bde <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5e>
    xyz[0] = ((double)x) / 16.0;
   d6bee:	f005 fc37 	bl	dc460 <__aeabi_i2d>
   d6bf2:	4b19      	ldr	r3, [pc, #100]	; (d6c58 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6bf4:	2200      	movs	r2, #0
   d6bf6:	f005 fc9d 	bl	dc534 <__aeabi_dmul>
   d6bfa:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 16.0;
   d6bfe:	4638      	mov	r0, r7
   d6c00:	f005 fc2e 	bl	dc460 <__aeabi_i2d>
   d6c04:	4b14      	ldr	r3, [pc, #80]	; (d6c58 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6c06:	2200      	movs	r2, #0
   d6c08:	f005 fc94 	bl	dc534 <__aeabi_dmul>
   d6c0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 16.0;
   d6c10:	4628      	mov	r0, r5
   d6c12:	f005 fc25 	bl	dc460 <__aeabi_i2d>
   d6c16:	4b10      	ldr	r3, [pc, #64]	; (d6c58 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d6c18:	2200      	movs	r2, #0
   d6c1a:	f005 fc8b 	bl	dc534 <__aeabi_dmul>
    xyz[2] = ((double)z) / 100.0;
   d6c1e:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return xyz;
   d6c22:	e7dd      	b.n	d6be0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x60>
    xyz[0] = ((double)x) / 100.0;
   d6c24:	f005 fc1c 	bl	dc460 <__aeabi_i2d>
   d6c28:	4b0c      	ldr	r3, [pc, #48]	; (d6c5c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6c2a:	2200      	movs	r2, #0
   d6c2c:	f005 fdac 	bl	dc788 <__aeabi_ddiv>
   d6c30:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 100.0;
   d6c34:	4638      	mov	r0, r7
   d6c36:	f005 fc13 	bl	dc460 <__aeabi_i2d>
   d6c3a:	4b08      	ldr	r3, [pc, #32]	; (d6c5c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6c3c:	2200      	movs	r2, #0
   d6c3e:	f005 fda3 	bl	dc788 <__aeabi_ddiv>
   d6c42:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 100.0;
   d6c46:	4628      	mov	r0, r5
   d6c48:	f005 fc0a 	bl	dc460 <__aeabi_i2d>
   d6c4c:	4b03      	ldr	r3, [pc, #12]	; (d6c5c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d6c4e:	2200      	movs	r2, #0
   d6c50:	f005 fd9a 	bl	dc788 <__aeabi_ddiv>
   d6c54:	e7e3      	b.n	d6c1e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9e>
   d6c56:	bf00      	nop
   d6c58:	3fb00000 	.word	0x3fb00000
   d6c5c:	40590000 	.word	0x40590000

000d6c60 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
   d6c60:	b530      	push	{r4, r5, lr}
   d6c62:	460c      	mov	r4, r1
   d6c64:	b087      	sub	sp, #28
   d6c66:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   d6c68:	2220      	movs	r2, #32
   d6c6a:	2100      	movs	r1, #0
   d6c6c:	1d20      	adds	r0, r4, #4
   d6c6e:	f006 fab5 	bl	dd1dc <memset>
  event->version = sizeof(sensors_event_t);
   d6c72:	2324      	movs	r3, #36	; 0x24
   d6c74:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d6c76:	68eb      	ldr	r3, [r5, #12]
   d6c78:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_ORIENTATION;
   d6c7a:	2303      	movs	r3, #3
   d6c7c:	60a3      	str	r3, [r4, #8]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6c7e:	f000 ffc9 	bl	d7c14 <HAL_Timer_Get_Milli_Seconds>
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6c82:	221a      	movs	r2, #26
  event->timestamp = millis();
   d6c84:	6120      	str	r0, [r4, #16]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6c86:	4629      	mov	r1, r5
   d6c88:	4668      	mov	r0, sp
   d6c8a:	f7ff ff79 	bl	d6b80 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
   d6c8e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6c92:	f005 ff47 	bl	dcb24 <__aeabi_d2f>
   d6c96:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
   d6c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6c9c:	f005 ff42 	bl	dcb24 <__aeabi_d2f>
   d6ca0:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
   d6ca2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6ca6:	f005 ff3d 	bl	dcb24 <__aeabi_d2f>
   d6caa:	61e0      	str	r0, [r4, #28]
}
   d6cac:	2001      	movs	r0, #1
   d6cae:	b007      	add	sp, #28
   d6cb0:	bd30      	pop	{r4, r5, pc}

000d6cb2 <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d6cb2:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d6cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d6cb6:	db66      	blt.n	d6d86 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6cb8:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d6cbc:	428c      	cmp	r4, r1
   d6cbe:	dd62      	ble.n	d6d86 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6cc0:	2a00      	cmp	r2, #0
   d6cc2:	db60      	blt.n	d6d86 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d6cc4:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d6cc8:	4294      	cmp	r4, r2
   d6cca:	dd5c      	ble.n	d6d86 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   d6ccc:	7e84      	ldrb	r4, [r0, #26]
   d6cce:	2c02      	cmp	r4, #2
   d6cd0:	d05a      	beq.n	d6d88 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   d6cd2:	2c03      	cmp	r4, #3
   d6cd4:	d061      	beq.n	d6d9a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   d6cd6:	2c01      	cmp	r4, #1
   d6cd8:	d104      	bne.n	d6ce4 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   d6cda:	8904      	ldrh	r4, [r0, #8]
   d6cdc:	43d2      	mvns	r2, r2
   d6cde:	4414      	add	r4, r2
      break;
   d6ce0:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d6ce2:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   d6ce4:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   d6ce8:	428c      	cmp	r4, r1
   d6cea:	bfa8      	it	ge
   d6cec:	460c      	movge	r4, r1
   d6cee:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   d6cf0:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   d6cf4:	4294      	cmp	r4, r2
   d6cf6:	bfa8      	it	ge
   d6cf8:	4614      	movge	r4, r2
   d6cfa:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   d6cfc:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   d6d00:	428c      	cmp	r4, r1
   d6d02:	bfb8      	it	lt
   d6d04:	460c      	movlt	r4, r1
   d6d06:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   d6d08:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   d6d0c:	4294      	cmp	r4, r2
   d6d0e:	bfb8      	it	lt
   d6d10:	4614      	movlt	r4, r2
   d6d12:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   d6d14:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d6d18:	2c01      	cmp	r4, #1
   d6d1a:	d116      	bne.n	d6d4a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   d6d1c:	2b01      	cmp	r3, #1
   d6d1e:	d042      	beq.n	d6da6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   d6d20:	2b02      	cmp	r3, #2
   d6d22:	d051      	beq.n	d6dc8 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   d6d24:	b98b      	cbnz	r3, d6d4a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   d6d26:	2a00      	cmp	r2, #0
   d6d28:	8905      	ldrh	r5, [r0, #8]
   d6d2a:	6b47      	ldr	r7, [r0, #52]	; 0x34
   d6d2c:	4614      	mov	r4, r2
   d6d2e:	bfb8      	it	lt
   d6d30:	1dd4      	addlt	r4, r2, #7
   d6d32:	10e4      	asrs	r4, r4, #3
   d6d34:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6d38:	f002 0607 	and.w	r6, r2, #7
   d6d3c:	2501      	movs	r5, #1
   d6d3e:	fa05 f606 	lsl.w	r6, r5, r6
   d6d42:	5d3d      	ldrb	r5, [r7, r4]
   d6d44:	ea25 0506 	bic.w	r5, r5, r6
   d6d48:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   d6d4a:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d6d4e:	2c04      	cmp	r4, #4
   d6d50:	d119      	bne.n	d6d86 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   d6d52:	8904      	ldrh	r4, [r0, #8]
   d6d54:	fb14 f202 	smulbb	r2, r4, r2
   d6d58:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   d6d5c:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   d6d60:	f342 024f 	sbfx	r2, r2, #1, #16
   d6d64:	eb02 0264 	add.w	r2, r2, r4, asr #1
   d6d68:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
   d6d6a:	5ca0      	ldrb	r0, [r4, r2]
   d6d6c:	07c9      	lsls	r1, r1, #31
        uint8_t t = pixelptr[0] & 0x0F;
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   d6d6e:	bf4b      	itete	mi
   d6d70:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   d6d74:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   d6d78:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   d6d7c:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   d6d80:	bf48      	it	mi
   d6d82:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   d6d84:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   d6d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   d6d88:	8904      	ldrh	r4, [r0, #8]
   d6d8a:	43c9      	mvns	r1, r1
   d6d8c:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d6d8e:	8944      	ldrh	r4, [r0, #10]
   d6d90:	43d2      	mvns	r2, r2
   d6d92:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   d6d94:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d6d96:	b212      	sxth	r2, r2
      break;
   d6d98:	e7a4      	b.n	d6ce4 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d6d9a:	8944      	ldrh	r4, [r0, #10]
   d6d9c:	43c9      	mvns	r1, r1
   d6d9e:	440c      	add	r4, r1
      break;
   d6da0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d6da2:	b222      	sxth	r2, r4
      break;
   d6da4:	e79e      	b.n	d6ce4 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   d6da6:	2a00      	cmp	r2, #0
   d6da8:	8905      	ldrh	r5, [r0, #8]
   d6daa:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d6dac:	4614      	mov	r4, r2
   d6dae:	bfb8      	it	lt
   d6db0:	1dd4      	addlt	r4, r2, #7
   d6db2:	10e4      	asrs	r4, r4, #3
   d6db4:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6db8:	f002 0707 	and.w	r7, r2, #7
   d6dbc:	2501      	movs	r5, #1
   d6dbe:	40bd      	lsls	r5, r7
   d6dc0:	5d37      	ldrb	r7, [r6, r4]
   d6dc2:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d6dc4:	5535      	strb	r5, [r6, r4]
        break;
   d6dc6:	e7c0      	b.n	d6d4a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d6dc8:	2a00      	cmp	r2, #0
   d6dca:	8905      	ldrh	r5, [r0, #8]
   d6dcc:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d6dce:	4614      	mov	r4, r2
   d6dd0:	bfb8      	it	lt
   d6dd2:	1dd4      	addlt	r4, r2, #7
   d6dd4:	10e4      	asrs	r4, r4, #3
   d6dd6:	fb14 1405 	smlabb	r4, r4, r5, r1
   d6dda:	f002 0707 	and.w	r7, r2, #7
   d6dde:	2501      	movs	r5, #1
   d6de0:	40bd      	lsls	r5, r7
   d6de2:	5d37      	ldrb	r7, [r6, r4]
   d6de4:	407d      	eors	r5, r7
   d6de6:	e7ed      	b.n	d6dc4 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

000d6de8 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   d6de8:	b538      	push	{r3, r4, r5, lr}
   d6dea:	460d      	mov	r5, r1
   d6dec:	4611      	mov	r1, r2
   d6dee:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d6df0:	b21a      	sxth	r2, r3
   d6df2:	b209      	sxth	r1, r1
   d6df4:	f000 fa96 	bl	d7324 <_ZN12Adafruit_GFXC1Ess>
   d6df8:	9a06      	ldr	r2, [sp, #24]
   d6dfa:	4b0b      	ldr	r3, [pc, #44]	; (d6e28 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   d6dfc:	62e2      	str	r2, [r4, #44]	; 0x2c
   d6dfe:	9a07      	ldr	r2, [sp, #28]
   d6e00:	6023      	str	r3, [r4, #0]
   d6e02:	2300      	movs	r3, #0
   d6e04:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   d6e08:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   d6e0c:	f04f 33ff 	mov.w	r3, #4294967295
   d6e10:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   d6e14:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   d6e18:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   d6e1a:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d6e1c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   d6e20:	6523      	str	r3, [r4, #80]	; 0x50
}
   d6e22:	4620      	mov	r0, r4
   d6e24:	bd38      	pop	{r3, r4, r5, pc}
   d6e26:	bf00      	nop
   d6e28:	000ddac8 	.word	0x000ddac8

000d6e2c <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   d6e2c:	b538      	push	{r3, r4, r5, lr}
   d6e2e:	4b0c      	ldr	r3, [pc, #48]	; (d6e60 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   d6e30:	6003      	str	r3, [r0, #0]
   d6e32:	4604      	mov	r4, r0
  if (buffer) {
   d6e34:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6e36:	b118      	cbz	r0, d6e40 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   d6e38:	f001 f940 	bl	d80bc <free>
    buffer = NULL;
   d6e3c:	2300      	movs	r3, #0
   d6e3e:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   d6e40:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d6e42:	b135      	cbz	r5, d6e52 <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   d6e44:	4628      	mov	r0, r5
   d6e46:	f7ff fa37 	bl	d62b8 <_ZN18Adafruit_SPIDeviceD1Ev>
   d6e4a:	2138      	movs	r1, #56	; 0x38
   d6e4c:	4628      	mov	r0, r5
   d6e4e:	f002 fd3f 	bl	d98d0 <_ZdlPvj>
  if (i2c_dev)
   d6e52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6e54:	b110      	cbz	r0, d6e5c <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   d6e56:	2110      	movs	r1, #16
   d6e58:	f002 fd3a 	bl	d98d0 <_ZdlPvj>
}
   d6e5c:	4620      	mov	r0, r4
   d6e5e:	bd38      	pop	{r3, r4, r5, pc}
   d6e60:	000ddac8 	.word	0x000ddac8

000d6e64 <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d6e64:	b530      	push	{r4, r5, lr}
   d6e66:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   d6e68:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d6e6a:	f88d 100f 	strb.w	r1, [sp, #15]
   d6e6e:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   d6e70:	b17d      	cbz	r5, d6e92 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d6e72:	2300      	movs	r3, #0
   d6e74:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   d6e76:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d6e7a:	f88d 3014 	strb.w	r3, [sp, #20]
   d6e7e:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   d6e82:	2301      	movs	r3, #1
   d6e84:	2202      	movs	r2, #2
   d6e86:	a905      	add	r1, sp, #20
   d6e88:	4628      	mov	r0, r5
   d6e8a:	f7ff fb6d 	bl	d6568 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d6e8e:	b007      	add	sp, #28
   d6e90:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   d6e92:	4629      	mov	r1, r5
   d6e94:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d6e98:	f002 fc83 	bl	d97a2 <digitalWrite>
    spi_dev->write(&c, 1);
   d6e9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6e9e:	9500      	str	r5, [sp, #0]
   d6ea0:	462b      	mov	r3, r5
   d6ea2:	2201      	movs	r2, #1
   d6ea4:	f10d 010f 	add.w	r1, sp, #15
   d6ea8:	f7ff fb01 	bl	d64ae <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   d6eac:	e7ef      	b.n	d6e8e <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000d6eae <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   d6eae:	2900      	cmp	r1, #0
   d6eb0:	bf14      	ite	ne
   d6eb2:	21a7      	movne	r1, #167	; 0xa7
   d6eb4:	21a6      	moveq	r1, #166	; 0xa6
   d6eb6:	f7ff bfd5 	b.w	d6e64 <_ZN17Adafruit_GrayOLED12oled_commandEh>

000d6eba <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d6eba:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   d6ebc:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d6ebe:	b085      	sub	sp, #20
   d6ec0:	4604      	mov	r4, r0
   d6ec2:	460e      	mov	r6, r1
   d6ec4:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   d6ec6:	b165      	cbz	r5, d6ee2 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d6ec8:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d6eca:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d6ece:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d6ed2:	2301      	movs	r3, #1
   d6ed4:	9000      	str	r0, [sp, #0]
   d6ed6:	9301      	str	r3, [sp, #4]
   d6ed8:	4628      	mov	r0, r5
   d6eda:	f7ff fb45 	bl	d6568 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d6ede:	b005      	add	sp, #20
   d6ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   d6ee2:	4629      	mov	r1, r5
   d6ee4:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d6ee8:	f002 fc5b 	bl	d97a2 <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   d6eec:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6eee:	9500      	str	r5, [sp, #0]
   d6ef0:	462b      	mov	r3, r5
   d6ef2:	463a      	mov	r2, r7
   d6ef4:	4631      	mov	r1, r6
   d6ef6:	f7ff fada 	bl	d64ae <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d6efa:	e7f0      	b.n	d6ede <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000d6efc <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   d6efc:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d6efe:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   d6f02:	8903      	ldrh	r3, [r0, #8]
   d6f04:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   d6f08:	fb12 f203 	smulbb	r2, r2, r3
   d6f0c:	1dcb      	adds	r3, r1, #7
   d6f0e:	bf48      	it	mi
   d6f10:	f101 030e 	addmi.w	r3, r1, #14
   d6f14:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   d6f16:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d6f18:	435a      	muls	r2, r3
   d6f1a:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6f1c:	2100      	movs	r1, #0
   d6f1e:	f006 f95d 	bl	dd1dc <memset>
  window_x1 = 0;
   d6f22:	2300      	movs	r3, #0
   d6f24:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d6f26:	8923      	ldrh	r3, [r4, #8]
   d6f28:	3b01      	subs	r3, #1
   d6f2a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d6f2c:	8963      	ldrh	r3, [r4, #10]
   d6f2e:	3b01      	subs	r3, #1
   d6f30:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   d6f32:	bd10      	pop	{r4, pc}

000d6f34 <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d6f34:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   d6f36:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d6f38:	4604      	mov	r4, r0
   d6f3a:	460e      	mov	r6, r1
   d6f3c:	4615      	mov	r5, r2
  if ((!buffer) &&
   d6f3e:	b30b      	cbz	r3, d6f84 <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   d6f40:	2d00      	cmp	r5, #0
   d6f42:	d133      	bne.n	d6fac <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   d6f44:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d6f46:	2b00      	cmp	r3, #0
   d6f48:	d050      	beq.n	d6fec <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   d6f4a:	2010      	movs	r0, #16
   d6f4c:	f7fd f8a3 	bl	d4096 <_Znwj>
   d6f50:	4605      	mov	r5, r0
   d6f52:	b118      	cbz	r0, d6f5c <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   d6f54:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d6f56:	4631      	mov	r1, r6
   d6f58:	f7ff fadb 	bl	d6512 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d6f5c:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   d6f5e:	b31d      	cbz	r5, d6fa8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d6f60:	2101      	movs	r1, #1
   d6f62:	4628      	mov	r0, r5
   d6f64:	f7ff faf1 	bl	d654a <_ZN18Adafruit_I2CDevice5beginEb>
   d6f68:	b1f0      	cbz	r0, d6fa8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   d6f6a:	4620      	mov	r0, r4
   d6f6c:	f7ff ffc6 	bl	d6efc <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   d6f70:	2300      	movs	r3, #0
   d6f72:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d6f74:	8923      	ldrh	r3, [r4, #8]
   d6f76:	3b01      	subs	r3, #1
   d6f78:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d6f7a:	8963      	ldrh	r3, [r4, #10]
   d6f7c:	3b01      	subs	r3, #1
   d6f7e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   d6f80:	2001      	movs	r0, #1
   d6f82:	e012      	b.n	d6faa <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   d6f84:	8923      	ldrh	r3, [r4, #8]
   d6f86:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   d6f8a:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   d6f8e:	fb10 f003 	smulbb	r0, r0, r3
   d6f92:	1dd3      	adds	r3, r2, #7
   d6f94:	bf48      	it	mi
   d6f96:	f102 030e 	addmi.w	r3, r2, #14
   d6f9a:	10db      	asrs	r3, r3, #3
   d6f9c:	4358      	muls	r0, r3
   d6f9e:	f001 f885 	bl	d80ac <malloc>
   d6fa2:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   d6fa4:	2800      	cmp	r0, #0
   d6fa6:	d1cb      	bne.n	d6f40 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   d6fa8:	2000      	movs	r0, #0
}
   d6faa:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   d6fac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d6fae:	2800      	cmp	r0, #0
   d6fb0:	dbc8      	blt.n	d6f44 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   d6fb2:	2101      	movs	r1, #1
   d6fb4:	b280      	uxth	r0, r0
   d6fb6:	f002 fbe3 	bl	d9780 <pinMode>
    digitalWrite(rstPin, HIGH);
   d6fba:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d6fbe:	2101      	movs	r1, #1
   d6fc0:	f002 fbef 	bl	d97a2 <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   d6fc4:	200a      	movs	r0, #10
   d6fc6:	f001 fd11 	bl	d89ec <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d6fca:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d6fce:	2100      	movs	r1, #0
   d6fd0:	f002 fbe7 	bl	d97a2 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d6fd4:	200a      	movs	r0, #10
   d6fd6:	f001 fd09 	bl	d89ec <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d6fda:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d6fde:	2101      	movs	r1, #1
   d6fe0:	f002 fbdf 	bl	d97a2 <digitalWrite>
    delay(10);
   d6fe4:	200a      	movs	r0, #10
   d6fe6:	f001 fd01 	bl	d89ec <delay>
   d6fea:	e7ab      	b.n	d6f44 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   d6fec:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6fee:	2800      	cmp	r0, #0
   d6ff0:	d0da      	beq.n	d6fa8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d6ff2:	f7ff f96a 	bl	d62ca <_ZN18Adafruit_SPIDevice5beginEv>
   d6ff6:	2800      	cmp	r0, #0
   d6ff8:	d0d6      	beq.n	d6fa8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d6ffa:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d6ffe:	2101      	movs	r1, #1
   d7000:	f002 fbbe 	bl	d9780 <pinMode>
   d7004:	e7b1      	b.n	d6f6a <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000d7006 <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   d7006:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d7008:	2381      	movs	r3, #129	; 0x81
   d700a:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   d700e:	2202      	movs	r2, #2
   d7010:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d7012:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   d7016:	f7ff ff50 	bl	d6eba <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   d701a:	b003      	add	sp, #12
   d701c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7020 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
   d7020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7024:	b085      	sub	sp, #20
   d7026:	461f      	mov	r7, r3
   d7028:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d702c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d7030:	eba8 0902 	sub.w	r9, r8, r2
   d7034:	eba7 0a01 	sub.w	sl, r7, r1
   d7038:	f1b9 0f00 	cmp.w	r9, #0
   d703c:	bfb8      	it	lt
   d703e:	f1c9 0900 	rsblt	r9, r9, #0
   d7042:	f1ba 0f00 	cmp.w	sl, #0
   d7046:	bfb8      	it	lt
   d7048:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d704c:	45d1      	cmp	r9, sl
                             uint16_t color) {
   d704e:	4683      	mov	fp, r0
   d7050:	460c      	mov	r4, r1
   d7052:	4615      	mov	r5, r2
  if (steep) {
   d7054:	dd04      	ble.n	d7060 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d7056:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
   d7058:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
   d705a:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
   d705c:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
   d705e:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d7060:	42bc      	cmp	r4, r7
   d7062:	dd05      	ble.n	d7070 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d7064:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
   d7066:	4645      	mov	r5, r8
   d7068:	4690      	mov	r8, r2
  if (x0 > x1) {
   d706a:	4622      	mov	r2, r4
   d706c:	463c      	mov	r4, r7
   d706e:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d7070:	1b3e      	subs	r6, r7, r4
   d7072:	b2b2      	uxth	r2, r6
   d7074:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d7076:	eba8 0205 	sub.w	r2, r8, r5
   d707a:	2a00      	cmp	r2, #0
   d707c:	bfb8      	it	lt
   d707e:	4252      	neglt	r2, r2
   d7080:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d7082:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d7086:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d708a:	4545      	cmp	r5, r8
   d708c:	bfb4      	ite	lt
   d708e:	2201      	movlt	r2, #1
   d7090:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d7094:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d7096:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
   d7098:	42bc      	cmp	r4, r7
   d709a:	dc1c      	bgt.n	d70d6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
    if (steep) {
   d709c:	f8db 2000 	ldr.w	r2, [fp]
      writePixel(y0, x0, color);
   d70a0:	9303      	str	r3, [sp, #12]
    if (steep) {
   d70a2:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
   d70a4:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d70a8:	bfc7      	ittee	gt
   d70aa:	4629      	movgt	r1, r5
   d70ac:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
   d70ae:	462a      	movle	r2, r5
   d70b0:	4621      	movle	r1, r4
   d70b2:	4658      	mov	r0, fp
   d70b4:	47c0      	blx	r8
    }
    err -= dy;
   d70b6:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
   d70b8:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d70ba:	1ab6      	subs	r6, r6, r2
   d70bc:	b2b1      	uxth	r1, r6
   d70be:	b236      	sxth	r6, r6
    if (err < 0) {
   d70c0:	2e00      	cmp	r6, #0
   d70c2:	da05      	bge.n	d70d0 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
      y0 += ystep;
   d70c4:	9a02      	ldr	r2, [sp, #8]
   d70c6:	4415      	add	r5, r2
      err += dx;
   d70c8:	9a00      	ldr	r2, [sp, #0]
   d70ca:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d70cc:	b22d      	sxth	r5, r5
      err += dx;
   d70ce:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
   d70d0:	3401      	adds	r4, #1
   d70d2:	b224      	sxth	r4, r4
   d70d4:	e7e0      	b.n	d7098 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
    }
  }
}
   d70d6:	b005      	add	sp, #20
   d70d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d70dc <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
   d70dc:	4770      	bx	lr

000d70de <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
   d70de:	b410      	push	{r4}
  drawPixel(x, y, color);
   d70e0:	6804      	ldr	r4, [r0, #0]
   d70e2:	6924      	ldr	r4, [r4, #16]
   d70e4:	46a4      	mov	ip, r4
}
   d70e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
   d70ea:	4760      	bx	ip

000d70ec <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
   d70ec:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
   d70ee:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d70f0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
   d70f4:	9502      	str	r5, [sp, #8]
   d70f6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d70f8:	46a4      	mov	ip, r4
}
   d70fa:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
   d70fc:	4760      	bx	ip

000d70fe <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
   d70fe:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
   d7100:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d7102:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
   d7106:	9502      	str	r5, [sp, #8]
   d7108:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d710a:	46a4      	mov	ip, r4
}
   d710c:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
   d710e:	4760      	bx	ip

000d7110 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
   d7110:	b470      	push	{r4, r5, r6}
   d7112:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d7116:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
   d711a:	6804      	ldr	r4, [r0, #0]
   d711c:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d7120:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d7122:	46a4      	mov	ip, r4
}
   d7124:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
   d7126:	4760      	bx	ip

000d7128 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
   d7128:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d712c:	461c      	mov	r4, r3
  startWrite();
   d712e:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d7130:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d7134:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d7136:	4605      	mov	r5, r0
   d7138:	4616      	mov	r6, r2
  writeLine(x, y, x, y + h - 1, color);
   d713a:	3c01      	subs	r4, #1
   d713c:	4434      	add	r4, r6
                                 uint16_t color) {
   d713e:	460f      	mov	r7, r1
  writeLine(x, y, x, y + h - 1, color);
   d7140:	b224      	sxth	r4, r4
  startWrite();
   d7142:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
   d7144:	682b      	ldr	r3, [r5, #0]
   d7146:	f8cd 8004 	str.w	r8, [sp, #4]
   d714a:	9400      	str	r4, [sp, #0]
   d714c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d714e:	4628      	mov	r0, r5
   d7150:	463b      	mov	r3, r7
   d7152:	4632      	mov	r2, r6
   d7154:	4639      	mov	r1, r7
   d7156:	47a0      	blx	r4
  endWrite();
   d7158:	682b      	ldr	r3, [r5, #0]
   d715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d715c:	4628      	mov	r0, r5
}
   d715e:	b002      	add	sp, #8
   d7160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d7164:	4718      	bx	r3

000d7166 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
   d7166:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d716a:	461d      	mov	r5, r3
  startWrite();
   d716c:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d716e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d7172:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d7174:	4604      	mov	r4, r0
   d7176:	4617      	mov	r7, r2
   d7178:	460e      	mov	r6, r1
  startWrite();
   d717a:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
   d717c:	e9cd 7800 	strd	r7, r8, [sp]
   d7180:	6822      	ldr	r2, [r4, #0]
   d7182:	1e6b      	subs	r3, r5, #1
   d7184:	4433      	add	r3, r6
   d7186:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d7188:	4620      	mov	r0, r4
   d718a:	b21b      	sxth	r3, r3
   d718c:	463a      	mov	r2, r7
   d718e:	4631      	mov	r1, r6
   d7190:	47a8      	blx	r5
  endWrite();
   d7192:	6823      	ldr	r3, [r4, #0]
   d7194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7196:	4620      	mov	r0, r4
}
   d7198:	b002      	add	sp, #8
   d719a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d719e:	4718      	bx	r3

000d71a0 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d71a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d71a4:	461e      	mov	r6, r3
  startWrite();
   d71a6:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d71a8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
   d71ac:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d71ae:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d71b2:	460c      	mov	r4, r1
   d71b4:	4605      	mov	r5, r0
   d71b6:	4617      	mov	r7, r2
  startWrite();
   d71b8:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
   d71ba:	4426      	add	r6, r4
   d71bc:	42b4      	cmp	r4, r6
   d71be:	682b      	ldr	r3, [r5, #0]
   d71c0:	da0b      	bge.n	d71da <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
   d71c2:	f8cd 8000 	str.w	r8, [sp]
   d71c6:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d71ca:	4621      	mov	r1, r4
   d71cc:	464b      	mov	r3, r9
   d71ce:	463a      	mov	r2, r7
   d71d0:	4628      	mov	r0, r5
   d71d2:	3401      	adds	r4, #1
   d71d4:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
   d71d6:	b224      	sxth	r4, r4
   d71d8:	e7f0      	b.n	d71bc <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
   d71da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d71dc:	4628      	mov	r0, r5
}
   d71de:	b002      	add	sp, #8
   d71e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d71e4:	4718      	bx	r3

000d71e6 <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d71e6:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d71e8:	6802      	ldr	r2, [r0, #0]
   d71ea:	9101      	str	r1, [sp, #4]
   d71ec:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d71f0:	9100      	str	r1, [sp, #0]
   d71f2:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d71f4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d71f8:	2200      	movs	r2, #0
   d71fa:	4611      	mov	r1, r2
   d71fc:	47a0      	blx	r4
}
   d71fe:	b002      	add	sp, #8
   d7200:	bd10      	pop	{r4, pc}

000d7202 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d7202:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d7206:	461d      	mov	r5, r3
  startWrite();
   d7208:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d720a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
   d720e:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d7210:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d7214:	4604      	mov	r4, r0
   d7216:	460f      	mov	r7, r1
   d7218:	4616      	mov	r6, r2
  startWrite();
   d721a:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
   d721c:	6823      	ldr	r3, [r4, #0]
   d721e:	f8cd 8000 	str.w	r8, [sp]
   d7222:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d7226:	4632      	mov	r2, r6
   d7228:	462b      	mov	r3, r5
   d722a:	4639      	mov	r1, r7
   d722c:	4620      	mov	r0, r4
   d722e:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
   d7230:	6823      	ldr	r3, [r4, #0]
   d7232:	f8cd 8000 	str.w	r8, [sp]
   d7236:	f109 32ff 	add.w	r2, r9, #4294967295
   d723a:	4432      	add	r2, r6
   d723c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d7240:	4639      	mov	r1, r7
   d7242:	462b      	mov	r3, r5
   d7244:	4620      	mov	r0, r4
   d7246:	b212      	sxth	r2, r2
   d7248:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
   d724a:	6823      	ldr	r3, [r4, #0]
   d724c:	f8cd 8000 	str.w	r8, [sp]
   d7250:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d7254:	4632      	mov	r2, r6
   d7256:	464b      	mov	r3, r9
   d7258:	4639      	mov	r1, r7
   d725a:	4620      	mov	r0, r4
   d725c:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
   d725e:	1e6b      	subs	r3, r5, #1
   d7260:	19d9      	adds	r1, r3, r7
   d7262:	6823      	ldr	r3, [r4, #0]
   d7264:	f8cd 8000 	str.w	r8, [sp]
   d7268:	6a1d      	ldr	r5, [r3, #32]
   d726a:	4620      	mov	r0, r4
   d726c:	464b      	mov	r3, r9
   d726e:	4632      	mov	r2, r6
   d7270:	b209      	sxth	r1, r1
   d7272:	47a8      	blx	r5
  endWrite();
   d7274:	6823      	ldr	r3, [r4, #0]
   d7276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7278:	4620      	mov	r0, r4
}
   d727a:	b002      	add	sp, #8
   d727c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d7280:	4718      	bx	r3

000d7282 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
   d7282:	4770      	bx	lr

000d7284 <_ZN12Adafruit_GFX8drawLineEsssst>:
                            uint16_t color) {
   d7284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if (x0 == x1) {
   d7288:	4299      	cmp	r1, r3
                            uint16_t color) {
   d728a:	4616      	mov	r6, r2
   d728c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d7290:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d7294:	6802      	ldr	r2, [r0, #0]
   d7296:	4680      	mov	r8, r0
   d7298:	460d      	mov	r5, r1
   d729a:	461c      	mov	r4, r3
  if (x0 == x1) {
   d729c:	d113      	bne.n	d72c6 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
    if (y0 > y1)
   d729e:	42be      	cmp	r6, r7
   d72a0:	bfc8      	it	gt
   d72a2:	4633      	movgt	r3, r6
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d72a4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    if (y0 > y1)
   d72a8:	bfc4      	itt	gt
   d72aa:	463e      	movgt	r6, r7
   d72ac:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d72ae:	1c7b      	adds	r3, r7, #1
   d72b0:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d72b2:	1b9b      	subs	r3, r3, r6
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d72b4:	b21b      	sxth	r3, r3
   d72b6:	4632      	mov	r2, r6
   d72b8:	4629      	mov	r1, r5
   d72ba:	4640      	mov	r0, r8
   d72bc:	46a4      	mov	ip, r4
}
   d72be:	b003      	add	sp, #12
   d72c0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d72c4:	4760      	bx	ip
  } else if (y0 == y1) {
   d72c6:	42be      	cmp	r6, r7
   d72c8:	d10a      	bne.n	d72e0 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
    if (x0 > x1)
   d72ca:	4299      	cmp	r1, r3
   d72cc:	bfc2      	ittt	gt
   d72ce:	460b      	movgt	r3, r1
   d72d0:	4625      	movgt	r5, r4
   d72d2:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d72d4:	1c63      	adds	r3, r4, #1
   d72d6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d72da:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d72dc:	1b5b      	subs	r3, r3, r5
   d72de:	e7e9      	b.n	d72b4 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
    startWrite();
   d72e0:	6953      	ldr	r3, [r2, #20]
   d72e2:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
   d72e4:	e9cd 7900 	strd	r7, r9, [sp]
   d72e8:	f8d8 3000 	ldr.w	r3, [r8]
   d72ec:	4640      	mov	r0, r8
   d72ee:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d72f0:	4632      	mov	r2, r6
   d72f2:	4623      	mov	r3, r4
   d72f4:	4629      	mov	r1, r5
   d72f6:	47b8      	blx	r7
    endWrite();
   d72f8:	f8d8 3000 	ldr.w	r3, [r8]
   d72fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d72fe:	4640      	mov	r0, r8
}
   d7300:	b003      	add	sp, #12
   d7302:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
   d7306:	4718      	bx	r3

000d7308 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   d7308:	f001 0303 	and.w	r3, r1, #3
   d730c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d7310:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
   d7312:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
   d7314:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d7318:	bf59      	ittee	pl
   d731a:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   d731c:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
   d731e:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   d7320:	81c3      	strhmi	r3, [r0, #14]
}
   d7322:	4770      	bx	lr

000d7324 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d7324:	b530      	push	{r4, r5, lr}
   d7326:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
   d7328:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
   d732a:	4a07      	ldr	r2, [pc, #28]	; (d7348 <_ZN12Adafruit_GFXC1Ess+0x24>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d732c:	4d07      	ldr	r5, [pc, #28]	; (d734c <_ZN12Adafruit_GFXC1Ess+0x28>)
   d732e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d7330:	2400      	movs	r4, #0
  _width = WIDTH;
   d7332:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
   d7334:	f04f 31ff 	mov.w	r1, #4294967295
   d7338:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d733c:	6044      	str	r4, [r0, #4]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d733e:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
   d7340:	6104      	str	r4, [r0, #16]
  _cp437 = false;
   d7342:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
   d7344:	6204      	str	r4, [r0, #32]
}
   d7346:	bd30      	pop	{r4, r5, pc}
   d7348:	01000101 	.word	0x01000101
   d734c:	000de024 	.word	0x000de024

000d7350 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
   d7350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7354:	b089      	sub	sp, #36	; 0x24
   d7356:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
   d735a:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
   d735c:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d7360:	9304      	str	r3, [sp, #16]
   d7362:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  startWrite();
   d7366:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
   d7368:	9305      	str	r3, [sp, #20]
   d736a:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d736e:	4604      	mov	r4, r0
  startWrite();
   d7370:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d7372:	f118 0207 	adds.w	r2, r8, #7
  startWrite();
   d7376:	f04f 0600 	mov.w	r6, #0
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d737a:	bf48      	it	mi
   d737c:	f108 020e 	addmi.w	r2, r8, #14
   d7380:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
   d7384:	9601      	str	r6, [sp, #4]
  uint8_t byte = 0;
   d7386:	4635      	mov	r5, r6
   d7388:	9b03      	ldr	r3, [sp, #12]
   d738a:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
   d738c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d7390:	189a      	adds	r2, r3, r2
   d7392:	9b05      	ldr	r3, [sp, #20]
   d7394:	428b      	cmp	r3, r1
   d7396:	b212      	sxth	r2, r2
   d7398:	dd27      	ble.n	d73ea <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d739a:	9b04      	ldr	r3, [sp, #16]
   d739c:	4433      	add	r3, r6
  for (int16_t j = 0; j < h; j++, y++) {
   d739e:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d73a2:	9306      	str	r3, [sp, #24]
   d73a4:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
   d73a8:	4580      	cmp	r8, r0
   d73aa:	fa1f f189 	uxth.w	r1, r9
   d73ae:	dd17      	ble.n	d73e0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
      if (i & 7)
   d73b0:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d73b2:	bf05      	ittet	eq
   d73b4:	9b06      	ldreq	r3, [sp, #24]
   d73b6:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
   d73b8:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d73ba:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
   d73bc:	bf18      	it	ne
   d73be:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
   d73c0:	062b      	lsls	r3, r5, #24
   d73c2:	d50a      	bpl.n	d73da <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
        writePixel(x + i, y, color);
   d73c4:	9b02      	ldr	r3, [sp, #8]
   d73c6:	6820      	ldr	r0, [r4, #0]
   d73c8:	9207      	str	r2, [sp, #28]
   d73ca:	4419      	add	r1, r3
   d73cc:	6983      	ldr	r3, [r0, #24]
   d73ce:	b209      	sxth	r1, r1
   d73d0:	461f      	mov	r7, r3
   d73d2:	4620      	mov	r0, r4
   d73d4:	4653      	mov	r3, sl
   d73d6:	47b8      	blx	r7
   d73d8:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
   d73da:	f109 0901 	add.w	r9, r9, #1
   d73de:	e7e1      	b.n	d73a4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
  for (int16_t j = 0; j < h; j++, y++) {
   d73e0:	9b01      	ldr	r3, [sp, #4]
   d73e2:	3301      	adds	r3, #1
   d73e4:	9301      	str	r3, [sp, #4]
   d73e6:	445e      	add	r6, fp
   d73e8:	e7ce      	b.n	d7388 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
  endWrite();
   d73ea:	6823      	ldr	r3, [r4, #0]
   d73ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d73ee:	4620      	mov	r0, r4
}
   d73f0:	b009      	add	sp, #36	; 0x24
   d73f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
   d73f6:	4718      	bx	r3

000d73f8 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
   d73f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d73fc:	ed2d 8b02 	vpush	{d8}
   d7400:	b091      	sub	sp, #68	; 0x44
   d7402:	4616      	mov	r6, r2
  if (!gfxFont) { // 'Classic' built-in font
   d7404:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
   d7406:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d740a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d740e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d7412:	9103      	str	r1, [sp, #12]
   d7414:	461f      	mov	r7, r3
   d7416:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d741a:	9304      	str	r3, [sp, #16]
   d741c:	4683      	mov	fp, r0
  if (!gfxFont) { // 'Classic' built-in font
   d741e:	2a00      	cmp	r2, #0
   d7420:	f040 80c5 	bne.w	d75ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
   d7424:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d7428:	428b      	cmp	r3, r1
   d742a:	f340 814c 	ble.w	d76c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d742e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d7432:	42b3      	cmp	r3, r6
   d7434:	f340 8147 	ble.w	d76c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d7438:	2306      	movs	r3, #6
   d743a:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
   d743e:	2b00      	cmp	r3, #0
   d7440:	f340 8141 	ble.w	d76c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
   d7444:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d7448:	2b00      	cmp	r3, #0
   d744a:	f340 813c 	ble.w	d76c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
   d744e:	7f03      	ldrb	r3, [r0, #28]
   d7450:	b91b      	cbnz	r3, d745a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d7452:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
   d7454:	bf84      	itt	hi
   d7456:	3701      	addhi	r7, #1
   d7458:	b2ff      	uxtbhi	r7, r7
    startWrite();
   d745a:	f8db 3000 	ldr.w	r3, [fp]
   d745e:	4658      	mov	r0, fp
   d7460:	695b      	ldr	r3, [r3, #20]
   d7462:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d7464:	2205      	movs	r2, #5
   d7466:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d7468:	2200      	movs	r2, #0
   d746a:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d746c:	4a98      	ldr	r2, [pc, #608]	; (d76d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d746e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d7472:	18d3      	adds	r3, r2, r3
   d7474:	930c      	str	r3, [sp, #48]	; 0x30
   d7476:	b2b3      	uxth	r3, r6
   d7478:	9306      	str	r3, [sp, #24]
   d747a:	9a05      	ldr	r2, [sp, #20]
   d747c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d747e:	5c9b      	ldrb	r3, [r3, r2]
   d7480:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d7482:	b2ab      	uxth	r3, r5
   d7484:	930b      	str	r3, [sp, #44]	; 0x2c
   d7486:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d748a:	9308      	str	r3, [sp, #32]
   d748c:	9b03      	ldr	r3, [sp, #12]
   d748e:	fb02 f905 	mul.w	r9, r2, r5
   d7492:	fa19 f983 	uxtah	r9, r9, r3
   d7496:	fa0f f389 	sxth.w	r3, r9
   d749a:	ee08 3a10 	vmov	s16, r3
   d749e:	2308      	movs	r3, #8
   d74a0:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
   d74a2:	9b03      	ldr	r3, [sp, #12]
   d74a4:	eb02 0a03 	add.w	sl, r2, r3
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d74a8:	f04f 0900 	mov.w	r9, #0
            writePixel(x + i, y + j, bg);
   d74ac:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
   d74b0:	9a07      	ldr	r2, [sp, #28]
   d74b2:	f8db 3000 	ldr.w	r3, [fp]
   d74b6:	07d2      	lsls	r2, r2, #31
   d74b8:	d552      	bpl.n	d7560 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
   d74ba:	2d01      	cmp	r5, #1
   d74bc:	fa1f f289 	uxth.w	r2, r9
   d74c0:	d13e      	bne.n	d7540 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d74c2:	2c01      	cmp	r4, #1
   d74c4:	d13c      	bne.n	d7540 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
   d74c6:	699b      	ldr	r3, [r3, #24]
   d74c8:	9906      	ldr	r1, [sp, #24]
   d74ca:	461f      	mov	r7, r3
   d74cc:	9b04      	ldr	r3, [sp, #16]
   d74ce:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
   d74d0:	b212      	sxth	r2, r2
   d74d2:	4651      	mov	r1, sl
   d74d4:	4658      	mov	r0, fp
   d74d6:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d74d8:	f109 0301 	add.w	r3, r9, #1
   d74dc:	fa4f f983 	sxtb.w	r9, r3
   d74e0:	9b07      	ldr	r3, [sp, #28]
   d74e2:	085b      	lsrs	r3, r3, #1
   d74e4:	9307      	str	r3, [sp, #28]
   d74e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d74e8:	3b01      	subs	r3, #1
   d74ea:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d74ee:	930a      	str	r3, [sp, #40]	; 0x28
   d74f0:	d1de      	bne.n	d74b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d74f2:	9f05      	ldr	r7, [sp, #20]
   d74f4:	3701      	adds	r7, #1
   d74f6:	b27b      	sxtb	r3, r7
   d74f8:	9305      	str	r3, [sp, #20]
   d74fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d74fc:	3b01      	subs	r3, #1
   d74fe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d7502:	9309      	str	r3, [sp, #36]	; 0x24
   d7504:	d1b9      	bne.n	d747a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
   d7506:	9b04      	ldr	r3, [sp, #16]
   d7508:	4543      	cmp	r3, r8
   d750a:	d00f      	beq.n	d752c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
   d750c:	2d01      	cmp	r5, #1
   d750e:	f8db 3000 	ldr.w	r3, [fp]
   d7512:	d13b      	bne.n	d758c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d7514:	2c01      	cmp	r4, #1
   d7516:	d139      	bne.n	d758c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
   d7518:	9908      	ldr	r1, [sp, #32]
   d751a:	f8cd 8000 	str.w	r8, [sp]
   d751e:	3105      	adds	r1, #5
   d7520:	6a1c      	ldr	r4, [r3, #32]
   d7522:	4632      	mov	r2, r6
   d7524:	2308      	movs	r3, #8
   d7526:	b209      	sxth	r1, r1
   d7528:	4658      	mov	r0, fp
   d752a:	47a0      	blx	r4
    endWrite();
   d752c:	f8db 3000 	ldr.w	r3, [fp]
   d7530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7532:	4658      	mov	r0, fp
}
   d7534:	b011      	add	sp, #68	; 0x44
   d7536:	ecbd 8b02 	vpop	{d8}
   d753a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d753e:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
   d7540:	9906      	ldr	r1, [sp, #24]
   d7542:	fb14 f202 	smulbb	r2, r4, r2
   d7546:	440a      	add	r2, r1
   d7548:	9904      	ldr	r1, [sp, #16]
   d754a:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d754c:	9400      	str	r4, [sp, #0]
   d754e:	69db      	ldr	r3, [r3, #28]
   d7550:	ee18 1a10 	vmov	r1, s16
   d7554:	461f      	mov	r7, r3
   d7556:	b212      	sxth	r2, r2
   d7558:	462b      	mov	r3, r5
   d755a:	4658      	mov	r0, fp
   d755c:	47b8      	blx	r7
   d755e:	e7bb      	b.n	d74d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
   d7560:	9a04      	ldr	r2, [sp, #16]
   d7562:	4542      	cmp	r2, r8
   d7564:	d0b8      	beq.n	d74d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
   d7566:	2d01      	cmp	r5, #1
   d7568:	fa1f f289 	uxth.w	r2, r9
   d756c:	d107      	bne.n	d757e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d756e:	2c01      	cmp	r4, #1
   d7570:	d105      	bne.n	d757e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
   d7572:	699b      	ldr	r3, [r3, #24]
   d7574:	9906      	ldr	r1, [sp, #24]
   d7576:	461f      	mov	r7, r3
   d7578:	440a      	add	r2, r1
   d757a:	4643      	mov	r3, r8
   d757c:	e7a8      	b.n	d74d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d757e:	9906      	ldr	r1, [sp, #24]
   d7580:	f8cd 8004 	str.w	r8, [sp, #4]
   d7584:	fb14 f202 	smulbb	r2, r4, r2
   d7588:	440a      	add	r2, r1
   d758a:	e7df      	b.n	d754c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
   d758c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d758e:	f8cd 8004 	str.w	r8, [sp, #4]
   d7592:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d7596:	9a08      	ldr	r2, [sp, #32]
   d7598:	00e4      	lsls	r4, r4, #3
   d759a:	440a      	add	r2, r1
   d759c:	4611      	mov	r1, r2
   d759e:	9400      	str	r4, [sp, #0]
   d75a0:	69dc      	ldr	r4, [r3, #28]
   d75a2:	4632      	mov	r2, r6
   d75a4:	462b      	mov	r3, r5
   d75a6:	b209      	sxth	r1, r1
   d75a8:	4658      	mov	r0, fp
   d75aa:	47a0      	blx	r4
    endWrite();
   d75ac:	e7be      	b.n	d752c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d75ae:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
   d75b0:	6851      	ldr	r1, [r2, #4]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d75b2:	6812      	ldr	r2, [r2, #0]
   d75b4:	920d      	str	r2, [sp, #52]	; 0x34
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d75b6:	1aff      	subs	r7, r7, r3
  return gfxFont->glyph + c;
   d75b8:	b2ff      	uxtb	r7, r7
   d75ba:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d75be:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d75c2:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
   d75c4:	789a      	ldrb	r2, [r3, #2]
   d75c6:	9209      	str	r2, [sp, #36]	; 0x24
   d75c8:	78da      	ldrb	r2, [r3, #3]
   d75ca:	920b      	str	r2, [sp, #44]	; 0x2c
    if (size_x > 1 || size_y > 1) {
   d75cc:	2d01      	cmp	r5, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d75ce:	f993 2005 	ldrsb.w	r2, [r3, #5]
           yo = pgm_read_byte(&glyph->yOffset);
   d75d2:	f993 a006 	ldrsb.w	sl, [r3, #6]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d75d6:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
   d75d8:	d801      	bhi.n	d75de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d75da:	2c01      	cmp	r4, #1
   d75dc:	d957      	bls.n	d768e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
   d75de:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d75e2:	9308      	str	r3, [sp, #32]
      yo16 = yo;
   d75e4:	fa0f f38a 	sxth.w	r3, sl
   d75e8:	9307      	str	r3, [sp, #28]
    startWrite();
   d75ea:	f8db 3000 	ldr.w	r3, [fp]
   d75ee:	4658      	mov	r0, fp
   d75f0:	695b      	ldr	r3, [r3, #20]
   d75f2:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d75f4:	b2b3      	uxth	r3, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d75f6:	f04f 0800 	mov.w	r8, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d75fa:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
   d75fc:	fa1a f386 	uxtah	r3, sl, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d7600:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
   d7602:	4647      	mov	r7, r8
            writePixel(x + xo + xx, y + yo + yy, color);
   d7604:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
   d7606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7608:	429f      	cmp	r7, r3
   d760a:	d28f      	bcs.n	d752c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d760c:	9b07      	ldr	r3, [sp, #28]
   d760e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d7610:	443b      	add	r3, r7
   d7612:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
   d7616:	2200      	movs	r2, #0
   d7618:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
   d761a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d761c:	b21b      	sxth	r3, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d761e:	eb02 0a07 	add.w	sl, r2, r7
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7622:	ee08 3a10 	vmov	s16, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d7626:	fa0f fa8a 	sxth.w	sl, sl
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d762a:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
   d762c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d762e:	9905      	ldr	r1, [sp, #20]
   d7630:	4291      	cmp	r1, r2
   d7632:	d241      	bcs.n	d76b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
   d7634:	1c5a      	adds	r2, r3, #1
   d7636:	b2d2      	uxtb	r2, r2
   d7638:	075b      	lsls	r3, r3, #29
   d763a:	920c      	str	r2, [sp, #48]	; 0x30
   d763c:	d107      	bne.n	d764e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
   d763e:	9b06      	ldr	r3, [sp, #24]
   d7640:	9906      	ldr	r1, [sp, #24]
   d7642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d7644:	3301      	adds	r3, #1
   d7646:	b29b      	uxth	r3, r3
   d7648:	f812 9001 	ldrb.w	r9, [r2, r1]
   d764c:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
   d764e:	f019 0f80 	tst.w	r9, #128	; 0x80
   d7652:	d012      	beq.n	d767a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
   d7654:	2d01      	cmp	r5, #1
   d7656:	f8db 3000 	ldr.w	r3, [fp]
   d765a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d765e:	d11a      	bne.n	d7696 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d7660:	2c01      	cmp	r4, #1
   d7662:	d118      	bne.n	d7696 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
   d7664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d7666:	699b      	ldr	r3, [r3, #24]
   d7668:	4411      	add	r1, r2
   d766a:	9a05      	ldr	r2, [sp, #20]
   d766c:	4411      	add	r1, r2
   d766e:	461e      	mov	r6, r3
   d7670:	4652      	mov	r2, sl
   d7672:	9b04      	ldr	r3, [sp, #16]
   d7674:	b209      	sxth	r1, r1
   d7676:	4658      	mov	r0, fp
   d7678:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
   d767a:	9e05      	ldr	r6, [sp, #20]
   d767c:	3601      	adds	r6, #1
   d767e:	b2f3      	uxtb	r3, r6
        bits <<= 1;
   d7680:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
   d7684:	9305      	str	r3, [sp, #20]
        bits <<= 1;
   d7686:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
   d768a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (xx = 0; xx < w; xx++) {
   d768c:	e7ce      	b.n	d762c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
   d768e:	2300      	movs	r3, #0
   d7690:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d7694:	e7a9      	b.n	d75ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d7696:	9805      	ldr	r0, [sp, #20]
   d7698:	9a08      	ldr	r2, [sp, #32]
   d769a:	4402      	add	r2, r0
   d769c:	fb02 1105 	mla	r1, r2, r5, r1
   d76a0:	9a04      	ldr	r2, [sp, #16]
   d76a2:	e9cd 4200 	strd	r4, r2, [sp]
   d76a6:	69db      	ldr	r3, [r3, #28]
   d76a8:	ee18 2a10 	vmov	r2, s16
   d76ac:	461e      	mov	r6, r3
   d76ae:	b209      	sxth	r1, r1
   d76b0:	462b      	mov	r3, r5
   d76b2:	4658      	mov	r0, fp
   d76b4:	47b0      	blx	r6
   d76b6:	e7e0      	b.n	d767a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d76b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
   d76ba:	3701      	adds	r7, #1
   d76bc:	4498      	add	r8, r3
   d76be:	fa5f f888 	uxtb.w	r8, r8
   d76c2:	b2ff      	uxtb	r7, r7
   d76c4:	e79f      	b.n	d7606 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d76c6:	b011      	add	sp, #68	; 0x44
   d76c8:	ecbd 8b02 	vpop	{d8}
   d76cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d76d0:	000ddb1c 	.word	0x000ddb1c

000d76d4 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d76d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
   d76d6:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d76d8:	b085      	sub	sp, #20
   d76da:	4604      	mov	r4, r0
   d76dc:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
   d76de:	2a00      	cmp	r2, #0
   d76e0:	d134      	bne.n	d774c <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
   d76e2:	290a      	cmp	r1, #10
   d76e4:	d108      	bne.n	d76f8 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
   d76e6:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
   d76e8:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
   d76ea:	7e42      	ldrb	r2, [r0, #25]
   d76ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
   d76f0:	8263      	strh	r3, [r4, #18]
}
   d76f2:	2001      	movs	r0, #1
   d76f4:	b005      	add	sp, #20
   d76f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
   d76f8:	290d      	cmp	r1, #13
   d76fa:	d0fa      	beq.n	d76f2 <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d76fc:	7ee1      	ldrb	r1, [r4, #27]
   d76fe:	7e00      	ldrb	r0, [r0, #24]
   d7700:	7e65      	ldrb	r5, [r4, #25]
   d7702:	b171      	cbz	r1, d7722 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d7704:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d7708:	2106      	movs	r1, #6
   d770a:	fb11 6100 	smlabb	r1, r1, r0, r6
   d770e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d7712:	42b1      	cmp	r1, r6
   d7714:	bfc1      	itttt	gt
   d7716:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
   d771a:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
   d771c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d7720:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d7722:	8ae2      	ldrh	r2, [r4, #22]
   d7724:	9201      	str	r2, [sp, #4]
   d7726:	8aa2      	ldrh	r2, [r4, #20]
   d7728:	9200      	str	r2, [sp, #0]
   d772a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d772e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d7732:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d7736:	4620      	mov	r0, r4
   d7738:	f7ff fe5e 	bl	d73f8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
   d773c:	7e23      	ldrb	r3, [r4, #24]
   d773e:	8a22      	ldrh	r2, [r4, #16]
   d7740:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d7744:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
   d7748:	8223      	strh	r3, [r4, #16]
   d774a:	e7d2      	b.n	d76f2 <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
   d774c:	290a      	cmp	r1, #10
   d774e:	d107      	bne.n	d7760 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
   d7750:	2300      	movs	r3, #0
   d7752:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d7754:	7b13      	ldrb	r3, [r2, #12]
   d7756:	7e41      	ldrb	r1, [r0, #25]
      cursor_y +=
   d7758:	8a42      	ldrh	r2, [r0, #18]
   d775a:	fb01 2303 	mla	r3, r1, r3, r2
   d775e:	e7c7      	b.n	d76f0 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
   d7760:	290d      	cmp	r1, #13
   d7762:	d0c6      	beq.n	d76f2 <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
   d7764:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d7766:	42a9      	cmp	r1, r5
   d7768:	d3c3      	bcc.n	d76f2 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d776a:	7a91      	ldrb	r1, [r2, #10]
   d776c:	4299      	cmp	r1, r3
   d776e:	d3c0      	bcc.n	d76f2 <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
   d7770:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
   d7772:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
   d7774:	b2ed      	uxtb	r5, r5
   d7776:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
   d777a:	78af      	ldrb	r7, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d777c:	b32f      	cbz	r7, d77ca <_ZN12Adafruit_GFX5writeEh+0xf6>
   d777e:	78e9      	ldrb	r1, [r5, #3]
   d7780:	b319      	cbz	r1, d77ca <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d7782:	7ee1      	ldrb	r1, [r4, #27]
   d7784:	7e00      	ldrb	r0, [r0, #24]
   d7786:	7e66      	ldrb	r6, [r4, #25]
   d7788:	b191      	cbz	r1, d77b0 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d778a:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d778e:	4439      	add	r1, r7
   d7790:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d7794:	fb00 7101 	mla	r1, r0, r1, r7
   d7798:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d779c:	42b9      	cmp	r1, r7
   d779e:	dd07      	ble.n	d77b0 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
   d77a0:	2700      	movs	r7, #0
   d77a2:	8227      	strh	r7, [r4, #16]
   d77a4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d77a8:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
   d77aa:	fb02 1206 	mla	r2, r2, r6, r1
   d77ae:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d77b0:	8ae2      	ldrh	r2, [r4, #22]
   d77b2:	9201      	str	r2, [sp, #4]
   d77b4:	8aa2      	ldrh	r2, [r4, #20]
   d77b6:	9200      	str	r2, [sp, #0]
   d77b8:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d77bc:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d77c0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d77c4:	4620      	mov	r0, r4
   d77c6:	f7ff fe17 	bl	d73f8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d77ca:	7929      	ldrb	r1, [r5, #4]
   d77cc:	7e23      	ldrb	r3, [r4, #24]
        cursor_x +=
   d77ce:	8a22      	ldrh	r2, [r4, #16]
   d77d0:	fb01 2303 	mla	r3, r1, r3, r2
   d77d4:	e7b8      	b.n	d7748 <_ZN12Adafruit_GFX5writeEh+0x74>

000d77d6 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
   d77d6:	2901      	cmp	r1, #1
   d77d8:	bf38      	it	cc
   d77da:	2101      	movcc	r1, #1
   d77dc:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
   d77de:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
   d77e0:	4770      	bx	lr

000d77e2 <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   d77e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d77e6:	4604      	mov	r4, r0
   d77e8:	b08b      	sub	sp, #44	; 0x2c
   d77ea:	f000 fa43 	bl	d7c74 <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d77ee:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   d77f2:	f9b4 503a 	ldrsh.w	r5, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d77f6:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d77fa:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d77fe:	1dda      	adds	r2, r3, #7
   d7800:	bf48      	it	mi
   d7802:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   d7806:	2340      	movs	r3, #64	; 0x40
   d7808:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   d780c:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   d7810:	9303      	str	r3, [sp, #12]
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   d7812:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d7814:	68db      	ldr	r3, [r3, #12]
   d7816:	3b01      	subs	r3, #1
   d7818:	b29b      	uxth	r3, r3
   d781a:	9304      	str	r3, [sp, #16]
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d781c:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
  uint8_t bytes_per_page = WIDTH;
   d7820:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   d7822:	2d00      	cmp	r5, #0
   d7824:	bfb8      	it	lt
   d7826:	3507      	addlt	r5, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d7828:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d782c:	45b9      	cmp	r9, r7
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   d782e:	f107 0201 	add.w	r2, r7, #1
  uint8_t first_page = window_y1 / 8;
   d7832:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d7836:	bf28      	it	cs
   d7838:	46b9      	movcs	r9, r7
    bytes_remaining -= (WIDTH - 1) - page_end;
   d783a:	fa52 f383 	uxtab	r3, r2, r3
   d783e:	fb05 9a07 	mla	sl, r5, r7, r9
   d7842:	9306      	str	r3, [sp, #24]
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};

      digitalWrite(dcPin, LOW);
   d7844:	f04f 0b00 	mov.w	fp, #0
  for (uint8_t p = first_page; p < pages; p++) {
   d7848:	9b03      	ldr	r3, [sp, #12]
   d784a:	429d      	cmp	r5, r3
   d784c:	d26b      	bcs.n	d7926 <_ZN15Adafruit_SH110X7displayEv+0x144>
    ptr += page_start;
   d784e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7850:	7a26      	ldrb	r6, [r4, #8]
   d7852:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   d7856:	eb03 080a 	add.w	r8, r3, sl
    bytes_remaining -= (WIDTH - 1) - page_end;
   d785a:	9b06      	ldr	r3, [sp, #24]
   d785c:	444a      	add	r2, r9
   d785e:	1b9e      	subs	r6, r3, r6
    if (i2c_dev) { // I2C
   d7860:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d7862:	1111      	asrs	r1, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   d7864:	eba6 0609 	sub.w	r6, r6, r9
   d7868:	f1a5 0050 	sub.w	r0, r5, #80	; 0x50
   d786c:	b2f6      	uxtb	r6, r6
    if (i2c_dev) { // I2C
   d786e:	b2c0      	uxtb	r0, r0
   d7870:	3110      	adds	r1, #16
   d7872:	f002 020f 	and.w	r2, r2, #15
   d7876:	2b00      	cmp	r3, #0
   d7878:	d035      	beq.n	d78e6 <_ZN15Adafruit_SH110X7displayEv+0x104>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d787a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   d787e:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
      i2c_dev->setSpeed(i2c_preclk);
   d7882:	4618      	mov	r0, r3
   d7884:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d7886:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      uint8_t cmd[] = {
   d788a:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   d788e:	f7fe fef0 	bl	d6672 <_ZN18Adafruit_I2CDevice8setSpeedEm>
      i2c_dev->write(cmd, 4);
   d7892:	2301      	movs	r3, #1
   d7894:	e9cd bb00 	strd	fp, fp, [sp]
   d7898:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d789a:	2204      	movs	r2, #4
   d789c:	a909      	add	r1, sp, #36	; 0x24
   d789e:	f7fe fe63 	bl	d6568 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d78a2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d78a6:	9305      	str	r3, [sp, #20]
      while (bytes_remaining) {
   d78a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d78aa:	b1ae      	cbz	r6, d78d8 <_ZN15Adafruit_SH110X7displayEv+0xf6>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d78ac:	9b05      	ldr	r3, [sp, #20]
   d78ae:	42b3      	cmp	r3, r6
   d78b0:	bf28      	it	cs
   d78b2:	4633      	movcs	r3, r6
   d78b4:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   d78b6:	2301      	movs	r3, #1
   d78b8:	9301      	str	r3, [sp, #4]
   d78ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   d78be:	9300      	str	r3, [sp, #0]
   d78c0:	4641      	mov	r1, r8
   d78c2:	2301      	movs	r3, #1
   d78c4:	9207      	str	r2, [sp, #28]
   d78c6:	f7fe fe4f 	bl	d6568 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   d78ca:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   d78cc:	1ab6      	subs	r6, r6, r2
        ptr += to_write;
   d78ce:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   d78d0:	b2f6      	uxtb	r6, r6
   d78d2:	f000 f9cf 	bl	d7c74 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   d78d6:	e7e7      	b.n	d78a8 <_ZN15Adafruit_SH110X7displayEv+0xc6>
      i2c_dev->setSpeed(i2c_postclk);
   d78d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   d78da:	f7fe feca 	bl	d6672 <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   d78de:	3501      	adds	r5, #1
   d78e0:	b2ed      	uxtb	r5, r5
   d78e2:	44ba      	add	sl, r7
   d78e4:	e7b0      	b.n	d7848 <_ZN15Adafruit_SH110X7displayEv+0x66>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d78e6:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   d78ea:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
      digitalWrite(dcPin, LOW);
   d78ee:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d78f2:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   d78f6:	4619      	mov	r1, r3
   d78f8:	9305      	str	r3, [sp, #20]
   d78fa:	f001 ff52 	bl	d97a2 <digitalWrite>
      spi_dev->write(cmd, 3);
   d78fe:	9b05      	ldr	r3, [sp, #20]
   d7900:	9300      	str	r3, [sp, #0]
   d7902:	2203      	movs	r2, #3
   d7904:	a909      	add	r1, sp, #36	; 0x24
   d7906:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7908:	f7fe fdd1 	bl	d64ae <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   d790c:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d7910:	2101      	movs	r1, #1
   d7912:	f001 ff46 	bl	d97a2 <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   d7916:	9b05      	ldr	r3, [sp, #20]
   d7918:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d791a:	9300      	str	r3, [sp, #0]
   d791c:	4632      	mov	r2, r6
   d791e:	4641      	mov	r1, r8
   d7920:	f7fe fdc5 	bl	d64ae <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d7924:	e7db      	b.n	d78de <_ZN15Adafruit_SH110X7displayEv+0xfc>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   d7926:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   d792a:	f04f 33ff 	mov.w	r3, #4294967295
   d792e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   d7932:	b00b      	add	sp, #44	; 0x2c
   d7934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7938 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   d7938:	b530      	push	{r4, r5, lr}
   d793a:	b085      	sub	sp, #20
   d793c:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d793e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7940:	9503      	str	r5, [sp, #12]
   d7942:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d7944:	9502      	str	r5, [sp, #8]
   d7946:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d794a:	e9cd 3500 	strd	r3, r5, [sp]
   d794e:	4613      	mov	r3, r2
   d7950:	460a      	mov	r2, r1
   d7952:	2101      	movs	r1, #1
   d7954:	f7ff fa48 	bl	d6de8 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   d7958:	4b03      	ldr	r3, [pc, #12]	; (d7968 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   d795a:	6023      	str	r3, [r4, #0]
   d795c:	4620      	mov	r0, r4
   d795e:	2300      	movs	r3, #0
   d7960:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d7964:	b005      	add	sp, #20
   d7966:	bd30      	pop	{r4, r5, pc}
   d7968:	000de07c 	.word	0x000de07c

000d796c <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   d796c:	b510      	push	{r4, lr}
   d796e:	4b03      	ldr	r3, [pc, #12]	; (d797c <_ZN15Adafruit_SH110XD1Ev+0x10>)
   d7970:	6003      	str	r3, [r0, #0]
   d7972:	4604      	mov	r4, r0
   d7974:	f7ff fa5a 	bl	d6e2c <_ZN17Adafruit_GrayOLEDD1Ev>
   d7978:	4620      	mov	r0, r4
   d797a:	bd10      	pop	{r4, pc}
   d797c:	000de07c 	.word	0x000de07c

000d7980 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   d7980:	b510      	push	{r4, lr}
   d7982:	4b03      	ldr	r3, [pc, #12]	; (d7990 <_ZN15Adafruit_SH1107D1Ev+0x10>)
   d7984:	6003      	str	r3, [r0, #0]
   d7986:	4604      	mov	r4, r0
   d7988:	f7ff fff0 	bl	d796c <_ZN15Adafruit_SH110XD1Ev>
   d798c:	4620      	mov	r0, r4
   d798e:	bd10      	pop	{r4, pc}
   d7990:	000de2b8 	.word	0x000de2b8

000d7994 <_ZN15Adafruit_SH1107D0Ev>:
   d7994:	b510      	push	{r4, lr}
   d7996:	4604      	mov	r4, r0
   d7998:	f7ff fff2 	bl	d7980 <_ZN15Adafruit_SH1107D1Ev>
   d799c:	4620      	mov	r0, r4
   d799e:	2158      	movs	r1, #88	; 0x58
   d79a0:	f001 ff96 	bl	d98d0 <_ZdlPvj>
   d79a4:	4620      	mov	r0, r4
   d79a6:	bd10      	pop	{r4, pc}

000d79a8 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   d79a8:	b530      	push	{r4, r5, lr}
   d79aa:	b085      	sub	sp, #20
   d79ac:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d79ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d79b0:	9502      	str	r5, [sp, #8]
   d79b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d79b4:	9501      	str	r5, [sp, #4]
   d79b6:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d79ba:	9500      	str	r5, [sp, #0]
   d79bc:	f7ff ffbc 	bl	d7938 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   d79c0:	4b02      	ldr	r3, [pc, #8]	; (d79cc <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   d79c2:	6023      	str	r3, [r4, #0]
   d79c4:	4620      	mov	r0, r4
   d79c6:	b005      	add	sp, #20
   d79c8:	bd30      	pop	{r4, r5, pc}
   d79ca:	bf00      	nop
   d79cc:	000de2b8 	.word	0x000de2b8

000d79d0 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   d79d0:	b530      	push	{r4, r5, lr}
   d79d2:	4604      	mov	r4, r0
   d79d4:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   d79d6:	f7ff faad 	bl	d6f34 <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   d79da:	212f      	movs	r1, #47	; 0x2f
   d79dc:	4620      	mov	r0, r4
   d79de:	f7ff fb12 	bl	d7006 <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   d79e2:	68a2      	ldr	r2, [r4, #8]
   d79e4:	4b2f      	ldr	r3, [pc, #188]	; (d7aa4 <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   d79e6:	429a      	cmp	r2, r3
   d79e8:	d121      	bne.n	d7a2e <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   d79ea:	6823      	ldr	r3, [r4, #0]
   d79ec:	2101      	movs	r1, #1
   d79ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d79f0:	4620      	mov	r0, r4
   d79f2:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d79f4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d79f8:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d79fc:	2320      	movs	r3, #32
   d79fe:	3a20      	subs	r2, #32
   d7a00:	3973      	subs	r1, #115	; 0x73
   d7a02:	2501      	movs	r5, #1
   d7a04:	e9cd 3501 	strd	r3, r5, [sp, #4]
   d7a08:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d7a0c:	2373      	movs	r3, #115	; 0x73
   d7a0e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d7a12:	9300      	str	r3, [sp, #0]
   d7a14:	f341 014f 	sbfx	r1, r1, #1, #16
   d7a18:	4b23      	ldr	r3, [pc, #140]	; (d7aa8 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d7a1a:	4620      	mov	r0, r4
   d7a1c:	f342 024f 	sbfx	r2, r2, #1, #16
   d7a20:	f7ff fc96 	bl	d7350 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   d7a24:	6823      	ldr	r3, [r4, #0]
   d7a26:	2100      	movs	r1, #0
   d7a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7a2a:	4620      	mov	r0, r4
   d7a2c:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   d7a2e:	68a3      	ldr	r3, [r4, #8]
   d7a30:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d7a34:	d117      	bne.n	d7a66 <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d7a36:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d7a3a:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d7a3e:	2320      	movs	r3, #32
   d7a40:	2001      	movs	r0, #1
   d7a42:	3a20      	subs	r2, #32
   d7a44:	3973      	subs	r1, #115	; 0x73
   d7a46:	e9cd 3001 	strd	r3, r0, [sp, #4]
   d7a4a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d7a4e:	2373      	movs	r3, #115	; 0x73
   d7a50:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d7a54:	9300      	str	r3, [sp, #0]
   d7a56:	f342 024f 	sbfx	r2, r2, #1, #16
   d7a5a:	4b13      	ldr	r3, [pc, #76]	; (d7aa8 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d7a5c:	f341 014f 	sbfx	r1, r1, #1, #16
   d7a60:	4620      	mov	r0, r4
   d7a62:	f7ff fc75 	bl	d7350 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   d7a66:	4911      	ldr	r1, [pc, #68]	; (d7aac <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   d7a68:	2216      	movs	r2, #22
   d7a6a:	4620      	mov	r0, r4
   d7a6c:	f7ff fa25 	bl	d6eba <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d7a70:	4605      	mov	r5, r0
   d7a72:	b918      	cbnz	r0, d7a7c <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   d7a74:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   d7a76:	4628      	mov	r0, r5
   d7a78:	b005      	add	sp, #20
   d7a7a:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   d7a7c:	68a3      	ldr	r3, [r4, #8]
   d7a7e:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d7a82:	d007      	beq.n	d7a94 <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   d7a84:	2064      	movs	r0, #100	; 0x64
   d7a86:	f000 ffb1 	bl	d89ec <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   d7a8a:	21af      	movs	r1, #175	; 0xaf
   d7a8c:	4620      	mov	r0, r4
   d7a8e:	f7ff f9e9 	bl	d6e64 <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   d7a92:	e7f0      	b.n	d7a76 <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   d7a94:	4906      	ldr	r1, [pc, #24]	; (d7ab0 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   d7a96:	2204      	movs	r2, #4
   d7a98:	4620      	mov	r0, r4
   d7a9a:	f7ff fa0e 	bl	d6eba <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d7a9e:	2800      	cmp	r0, #0
   d7aa0:	d1f0      	bne.n	d7a84 <_ZN15Adafruit_SH11075beginEhb+0xb4>
   d7aa2:	e7e7      	b.n	d7a74 <_ZN15Adafruit_SH11075beginEhb+0xa4>
   d7aa4:	00800040 	.word	0x00800040
   d7aa8:	000de0d0 	.word	0x000de0d0
   d7aac:	000de310 	.word	0x000de310
   d7ab0:	000de30c 	.word	0x000de30c

000d7ab4 <_ZN19Adafruit_EEPROM_I2CC1Ev>:
/**************************************************************************/
/*!
    Constructor
*/
/**************************************************************************/
Adafruit_EEPROM_I2C::Adafruit_EEPROM_I2C(void) {}
   d7ab4:	2200      	movs	r2, #0
   d7ab6:	6002      	str	r2, [r0, #0]
   d7ab8:	7102      	strb	r2, [r0, #4]
   d7aba:	4770      	bx	lr

000d7abc <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>:
 *            The I2C address to be used.
 *    @param  theWire
 *            The Wire object to be used for I2C connections.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d7abc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7abe:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7ac0:	2010      	movs	r0, #16
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d7ac2:	460e      	mov	r6, r1
   d7ac4:	9201      	str	r2, [sp, #4]
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7ac6:	f7fc fae6 	bl	d4096 <_Znwj>
   d7aca:	4604      	mov	r4, r0
   d7acc:	b118      	cbz	r0, d7ad6 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire+0x1a>
   d7ace:	9a01      	ldr	r2, [sp, #4]
   d7ad0:	4631      	mov	r1, r6
   d7ad2:	f7fe fd1e 	bl	d6512 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  _addr = addr;

  return i2c_dev->begin();
   d7ad6:	2101      	movs	r1, #1
   d7ad8:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d7ada:	602c      	str	r4, [r5, #0]
  _addr = addr;
   d7adc:	712e      	strb	r6, [r5, #4]
}
   d7ade:	b002      	add	sp, #8
   d7ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return i2c_dev->begin();
   d7ae4:	f7fe bd31 	b.w	d654a <_ZN18Adafruit_I2CDevice5beginEb>

000d7ae8 <_ZN19Adafruit_EEPROM_I2C5writeEth>:
    @param[in] value
                The 8-bit value to write at addr
    @returns True on I2C command success, false on timeout or I2C failure
*/
/**************************************************************************/
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7ae8:	b530      	push	{r4, r5, lr}
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};

  if (!i2c_dev->write(buff, 3))
   d7aea:	2300      	movs	r3, #0
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7aec:	b085      	sub	sp, #20
  if (!i2c_dev->write(buff, 3))
   d7aee:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   d7af2:	ba49      	rev16	r1, r1
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   d7af4:	4605      	mov	r5, r0
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   d7af6:	f8ad 100c 	strh.w	r1, [sp, #12]
   d7afa:	f88d 200e 	strb.w	r2, [sp, #14]
  if (!i2c_dev->write(buff, 3))
   d7afe:	6800      	ldr	r0, [r0, #0]
   d7b00:	2301      	movs	r3, #1
   d7b02:	2203      	movs	r2, #3
   d7b04:	a903      	add	r1, sp, #12
   d7b06:	f7fe fd2f 	bl	d6568 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d7b0a:	b160      	cbz	r0, d7b26 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x3e>
   d7b0c:	2465      	movs	r4, #101	; 0x65
    return false;

  // Wait until it acks!
  uint8_t timeout = 100;
  while (timeout--) {
   d7b0e:	3c01      	subs	r4, #1
   d7b10:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d7b14:	d007      	beq.n	d7b26 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x3e>
    if (i2c_dev->detected())
   d7b16:	6828      	ldr	r0, [r5, #0]
   d7b18:	f7fe fd02 	bl	d6520 <_ZN18Adafruit_I2CDevice8detectedEv>
   d7b1c:	b920      	cbnz	r0, d7b28 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x40>
      return true;
    delay(1);
   d7b1e:	2001      	movs	r0, #1
   d7b20:	f000 ff64 	bl	d89ec <delay>
  while (timeout--) {
   d7b24:	e7f3      	b.n	d7b0e <_ZN19Adafruit_EEPROM_I2C5writeEth+0x26>
    return false;
   d7b26:	2000      	movs	r0, #0
  }

  // timed out :(
  return false;
}
   d7b28:	b005      	add	sp, #20
   d7b2a:	bd30      	pop	{r4, r5, pc}

000d7b2c <_ZN19Adafruit_EEPROM_I2C4readEt>:
    @param addr
                The 16-bit address to read from in EEPROM memory
    @returns    The 8-bit value retrieved at addr
*/
/**************************************************************************/
uint8_t Adafruit_EEPROM_I2C::read(uint16_t addr) {
   d7b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};

  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7b2e:	2301      	movs	r3, #1
   d7b30:	2200      	movs	r2, #0
   d7b32:	e9cd 3200 	strd	r3, r2, [sp]
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   d7b36:	ba49      	rev16	r1, r1
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7b38:	ab03      	add	r3, sp, #12
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   d7b3a:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   d7b3e:	6800      	ldr	r0, [r0, #0]
   d7b40:	2202      	movs	r2, #2
   d7b42:	4619      	mov	r1, r3
   d7b44:	f7fe fd7e 	bl	d6644 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
   d7b48:	b108      	cbz	r0, d7b4e <_ZN19Adafruit_EEPROM_I2C4readEt+0x22>
    return 0x0;

  return buff[0];
   d7b4a:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d7b4e:	b005      	add	sp, #20
   d7b50:	f85d fb04 	ldr.w	pc, [sp], #4

000d7b54 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7b54:	b508      	push	{r3, lr}
   d7b56:	4b02      	ldr	r3, [pc, #8]	; (d7b60 <netdb_freeaddrinfo+0xc>)
   d7b58:	681b      	ldr	r3, [r3, #0]
   d7b5a:	689b      	ldr	r3, [r3, #8]
   d7b5c:	9301      	str	r3, [sp, #4]
   d7b5e:	bd08      	pop	{r3, pc}
   d7b60:	00030268 	.word	0x00030268

000d7b64 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7b64:	b508      	push	{r3, lr}
   d7b66:	4b02      	ldr	r3, [pc, #8]	; (d7b70 <netdb_getaddrinfo+0xc>)
   d7b68:	681b      	ldr	r3, [r3, #0]
   d7b6a:	68db      	ldr	r3, [r3, #12]
   d7b6c:	9301      	str	r3, [sp, #4]
   d7b6e:	bd08      	pop	{r3, pc}
   d7b70:	00030268 	.word	0x00030268

000d7b74 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7b74:	b508      	push	{r3, lr}
   d7b76:	4b02      	ldr	r3, [pc, #8]	; (d7b80 <HAL_Validate_Pin_Function+0xc>)
   d7b78:	681b      	ldr	r3, [r3, #0]
   d7b7a:	685b      	ldr	r3, [r3, #4]
   d7b7c:	9301      	str	r3, [sp, #4]
   d7b7e:	bd08      	pop	{r3, pc}
   d7b80:	0003022c 	.word	0x0003022c

000d7b84 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7b84:	b508      	push	{r3, lr}
   d7b86:	4b02      	ldr	r3, [pc, #8]	; (d7b90 <HAL_Pin_Mode+0xc>)
   d7b88:	681b      	ldr	r3, [r3, #0]
   d7b8a:	689b      	ldr	r3, [r3, #8]
   d7b8c:	9301      	str	r3, [sp, #4]
   d7b8e:	bd08      	pop	{r3, pc}
   d7b90:	0003022c 	.word	0x0003022c

000d7b94 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7b94:	b508      	push	{r3, lr}
   d7b96:	4b02      	ldr	r3, [pc, #8]	; (d7ba0 <HAL_Get_Pin_Mode+0xc>)
   d7b98:	681b      	ldr	r3, [r3, #0]
   d7b9a:	68db      	ldr	r3, [r3, #12]
   d7b9c:	9301      	str	r3, [sp, #4]
   d7b9e:	bd08      	pop	{r3, pc}
   d7ba0:	0003022c 	.word	0x0003022c

000d7ba4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7ba4:	b508      	push	{r3, lr}
   d7ba6:	4b02      	ldr	r3, [pc, #8]	; (d7bb0 <HAL_GPIO_Write+0xc>)
   d7ba8:	681b      	ldr	r3, [r3, #0]
   d7baa:	691b      	ldr	r3, [r3, #16]
   d7bac:	9301      	str	r3, [sp, #4]
   d7bae:	bd08      	pop	{r3, pc}
   d7bb0:	0003022c 	.word	0x0003022c

000d7bb4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7bb4:	b508      	push	{r3, lr}
   d7bb6:	4b02      	ldr	r3, [pc, #8]	; (d7bc0 <HAL_GPIO_Read+0xc>)
   d7bb8:	681b      	ldr	r3, [r3, #0]
   d7bba:	695b      	ldr	r3, [r3, #20]
   d7bbc:	9301      	str	r3, [sp, #4]
   d7bbe:	bd08      	pop	{r3, pc}
   d7bc0:	0003022c 	.word	0x0003022c

000d7bc4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7bc4:	b508      	push	{r3, lr}
   d7bc6:	4b02      	ldr	r3, [pc, #8]	; (d7bd0 <HAL_Interrupts_Attach+0xc>)
   d7bc8:	681b      	ldr	r3, [r3, #0]
   d7bca:	699b      	ldr	r3, [r3, #24]
   d7bcc:	9301      	str	r3, [sp, #4]
   d7bce:	bd08      	pop	{r3, pc}
   d7bd0:	0003022c 	.word	0x0003022c

000d7bd4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7bd4:	b508      	push	{r3, lr}
   d7bd6:	4b02      	ldr	r3, [pc, #8]	; (d7be0 <HAL_Interrupts_Detach+0xc>)
   d7bd8:	681b      	ldr	r3, [r3, #0]
   d7bda:	69db      	ldr	r3, [r3, #28]
   d7bdc:	9301      	str	r3, [sp, #4]
   d7bde:	bd08      	pop	{r3, pc}
   d7be0:	0003022c 	.word	0x0003022c

000d7be4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7be4:	b508      	push	{r3, lr}
   d7be6:	4b02      	ldr	r3, [pc, #8]	; (d7bf0 <hal_adc_read+0xc>)
   d7be8:	681b      	ldr	r3, [r3, #0]
   d7bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7bec:	9301      	str	r3, [sp, #4]
   d7bee:	bd08      	pop	{r3, pc}
   d7bf0:	0003022c 	.word	0x0003022c

000d7bf4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7bf4:	b508      	push	{r3, lr}
   d7bf6:	4b02      	ldr	r3, [pc, #8]	; (d7c00 <HAL_RNG_GetRandomNumber+0xc>)
   d7bf8:	681b      	ldr	r3, [r3, #0]
   d7bfa:	685b      	ldr	r3, [r3, #4]
   d7bfc:	9301      	str	r3, [sp, #4]
   d7bfe:	bd08      	pop	{r3, pc}
   d7c00:	00030218 	.word	0x00030218

000d7c04 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7c04:	b508      	push	{r3, lr}
   d7c06:	4b02      	ldr	r3, [pc, #8]	; (d7c10 <HAL_Delay_Microseconds+0xc>)
   d7c08:	681b      	ldr	r3, [r3, #0]
   d7c0a:	68db      	ldr	r3, [r3, #12]
   d7c0c:	9301      	str	r3, [sp, #4]
   d7c0e:	bd08      	pop	{r3, pc}
   d7c10:	00030218 	.word	0x00030218

000d7c14 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7c14:	b508      	push	{r3, lr}
   d7c16:	4b02      	ldr	r3, [pc, #8]	; (d7c20 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7c18:	681b      	ldr	r3, [r3, #0]
   d7c1a:	695b      	ldr	r3, [r3, #20]
   d7c1c:	9301      	str	r3, [sp, #4]
   d7c1e:	bd08      	pop	{r3, pc}
   d7c20:	00030218 	.word	0x00030218

000d7c24 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d7c24:	b508      	push	{r3, lr}
   d7c26:	4b02      	ldr	r3, [pc, #8]	; (d7c30 <HAL_EEPROM_Init+0xc>)
   d7c28:	681b      	ldr	r3, [r3, #0]
   d7c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7c2c:	9301      	str	r3, [sp, #4]
   d7c2e:	bd08      	pop	{r3, pc}
   d7c30:	00030218 	.word	0x00030218

000d7c34 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d7c34:	b508      	push	{r3, lr}
   d7c36:	4b02      	ldr	r3, [pc, #8]	; (d7c40 <HAL_EEPROM_Get+0xc>)
   d7c38:	681b      	ldr	r3, [r3, #0]
   d7c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c3c:	9301      	str	r3, [sp, #4]
   d7c3e:	bd08      	pop	{r3, pc}
   d7c40:	00030218 	.word	0x00030218

000d7c44 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d7c44:	b508      	push	{r3, lr}
   d7c46:	4b02      	ldr	r3, [pc, #8]	; (d7c50 <HAL_EEPROM_Put+0xc>)
   d7c48:	681b      	ldr	r3, [r3, #0]
   d7c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7c4c:	9301      	str	r3, [sp, #4]
   d7c4e:	bd08      	pop	{r3, pc}
   d7c50:	00030218 	.word	0x00030218

000d7c54 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7c54:	b508      	push	{r3, lr}
   d7c56:	4b02      	ldr	r3, [pc, #8]	; (d7c60 <hal_rtc_time_is_valid+0xc>)
   d7c58:	681b      	ldr	r3, [r3, #0]
   d7c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7c5c:	9301      	str	r3, [sp, #4]
   d7c5e:	bd08      	pop	{r3, pc}
   d7c60:	00030218 	.word	0x00030218

000d7c64 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7c64:	b508      	push	{r3, lr}
   d7c66:	4b02      	ldr	r3, [pc, #8]	; (d7c70 <hal_rtc_get_time+0xc>)
   d7c68:	681b      	ldr	r3, [r3, #0]
   d7c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7c6c:	9301      	str	r3, [sp, #4]
   d7c6e:	bd08      	pop	{r3, pc}
   d7c70:	00030218 	.word	0x00030218

000d7c74 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7c74:	b508      	push	{r3, lr}
   d7c76:	4b02      	ldr	r3, [pc, #8]	; (d7c80 <os_thread_yield+0xc>)
   d7c78:	681b      	ldr	r3, [r3, #0]
   d7c7a:	68db      	ldr	r3, [r3, #12]
   d7c7c:	9301      	str	r3, [sp, #4]
   d7c7e:	bd08      	pop	{r3, pc}
   d7c80:	00030248 	.word	0x00030248

000d7c84 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7c84:	b508      	push	{r3, lr}
   d7c86:	4b02      	ldr	r3, [pc, #8]	; (d7c90 <os_mutex_recursive_create+0xc>)
   d7c88:	681b      	ldr	r3, [r3, #0]
   d7c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c8c:	9301      	str	r3, [sp, #4]
   d7c8e:	bd08      	pop	{r3, pc}
   d7c90:	00030248 	.word	0x00030248

000d7c94 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7c94:	b508      	push	{r3, lr}
   d7c96:	4b02      	ldr	r3, [pc, #8]	; (d7ca0 <inet_inet_ntop+0xc>)
   d7c98:	681b      	ldr	r3, [r3, #0]
   d7c9a:	695b      	ldr	r3, [r3, #20]
   d7c9c:	9301      	str	r3, [sp, #4]
   d7c9e:	bd08      	pop	{r3, pc}
   d7ca0:	00030264 	.word	0x00030264

000d7ca4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7ca4:	b508      	push	{r3, lr}
   d7ca6:	4b02      	ldr	r3, [pc, #8]	; (d7cb0 <hal_usart_init+0xc>)
   d7ca8:	681b      	ldr	r3, [r3, #0]
   d7caa:	681b      	ldr	r3, [r3, #0]
   d7cac:	9301      	str	r3, [sp, #4]
   d7cae:	bd08      	pop	{r3, pc}
   d7cb0:	0003023c 	.word	0x0003023c

000d7cb4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7cb4:	b508      	push	{r3, lr}
   d7cb6:	4b02      	ldr	r3, [pc, #8]	; (d7cc0 <hal_usart_write+0xc>)
   d7cb8:	681b      	ldr	r3, [r3, #0]
   d7cba:	68db      	ldr	r3, [r3, #12]
   d7cbc:	9301      	str	r3, [sp, #4]
   d7cbe:	bd08      	pop	{r3, pc}
   d7cc0:	0003023c 	.word	0x0003023c

000d7cc4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7cc4:	b508      	push	{r3, lr}
   d7cc6:	4b02      	ldr	r3, [pc, #8]	; (d7cd0 <hal_usart_available+0xc>)
   d7cc8:	681b      	ldr	r3, [r3, #0]
   d7cca:	691b      	ldr	r3, [r3, #16]
   d7ccc:	9301      	str	r3, [sp, #4]
   d7cce:	bd08      	pop	{r3, pc}
   d7cd0:	0003023c 	.word	0x0003023c

000d7cd4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7cd4:	b508      	push	{r3, lr}
   d7cd6:	4b02      	ldr	r3, [pc, #8]	; (d7ce0 <hal_usart_read+0xc>)
   d7cd8:	681b      	ldr	r3, [r3, #0]
   d7cda:	695b      	ldr	r3, [r3, #20]
   d7cdc:	9301      	str	r3, [sp, #4]
   d7cde:	bd08      	pop	{r3, pc}
   d7ce0:	0003023c 	.word	0x0003023c

000d7ce4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7ce4:	b508      	push	{r3, lr}
   d7ce6:	4b02      	ldr	r3, [pc, #8]	; (d7cf0 <hal_usart_peek+0xc>)
   d7ce8:	681b      	ldr	r3, [r3, #0]
   d7cea:	699b      	ldr	r3, [r3, #24]
   d7cec:	9301      	str	r3, [sp, #4]
   d7cee:	bd08      	pop	{r3, pc}
   d7cf0:	0003023c 	.word	0x0003023c

000d7cf4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7cf4:	b508      	push	{r3, lr}
   d7cf6:	4b02      	ldr	r3, [pc, #8]	; (d7d00 <hal_usart_flush+0xc>)
   d7cf8:	681b      	ldr	r3, [r3, #0]
   d7cfa:	69db      	ldr	r3, [r3, #28]
   d7cfc:	9301      	str	r3, [sp, #4]
   d7cfe:	bd08      	pop	{r3, pc}
   d7d00:	0003023c 	.word	0x0003023c

000d7d04 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7d04:	b508      	push	{r3, lr}
   d7d06:	4b02      	ldr	r3, [pc, #8]	; (d7d10 <hal_usart_is_enabled+0xc>)
   d7d08:	681b      	ldr	r3, [r3, #0]
   d7d0a:	6a1b      	ldr	r3, [r3, #32]
   d7d0c:	9301      	str	r3, [sp, #4]
   d7d0e:	bd08      	pop	{r3, pc}
   d7d10:	0003023c 	.word	0x0003023c

000d7d14 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7d14:	b508      	push	{r3, lr}
   d7d16:	4b02      	ldr	r3, [pc, #8]	; (d7d20 <hal_usart_available_data_for_write+0xc>)
   d7d18:	681b      	ldr	r3, [r3, #0]
   d7d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7d1c:	9301      	str	r3, [sp, #4]
   d7d1e:	bd08      	pop	{r3, pc}
   d7d20:	0003023c 	.word	0x0003023c

000d7d24 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d7d24:	b508      	push	{r3, lr}
   d7d26:	4b02      	ldr	r3, [pc, #8]	; (d7d30 <hal_i2c_set_speed+0xc>)
   d7d28:	681b      	ldr	r3, [r3, #0]
   d7d2a:	681b      	ldr	r3, [r3, #0]
   d7d2c:	9301      	str	r3, [sp, #4]
   d7d2e:	bd08      	pop	{r3, pc}
   d7d30:	00030228 	.word	0x00030228

000d7d34 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7d34:	b508      	push	{r3, lr}
   d7d36:	4b02      	ldr	r3, [pc, #8]	; (d7d40 <hal_i2c_begin+0xc>)
   d7d38:	681b      	ldr	r3, [r3, #0]
   d7d3a:	68db      	ldr	r3, [r3, #12]
   d7d3c:	9301      	str	r3, [sp, #4]
   d7d3e:	bd08      	pop	{r3, pc}
   d7d40:	00030228 	.word	0x00030228

000d7d44 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7d44:	b508      	push	{r3, lr}
   d7d46:	4b02      	ldr	r3, [pc, #8]	; (d7d50 <hal_i2c_begin_transmission+0xc>)
   d7d48:	681b      	ldr	r3, [r3, #0]
   d7d4a:	699b      	ldr	r3, [r3, #24]
   d7d4c:	9301      	str	r3, [sp, #4]
   d7d4e:	bd08      	pop	{r3, pc}
   d7d50:	00030228 	.word	0x00030228

000d7d54 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7d54:	b508      	push	{r3, lr}
   d7d56:	4b02      	ldr	r3, [pc, #8]	; (d7d60 <hal_i2c_end_transmission+0xc>)
   d7d58:	681b      	ldr	r3, [r3, #0]
   d7d5a:	69db      	ldr	r3, [r3, #28]
   d7d5c:	9301      	str	r3, [sp, #4]
   d7d5e:	bd08      	pop	{r3, pc}
   d7d60:	00030228 	.word	0x00030228

000d7d64 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7d64:	b508      	push	{r3, lr}
   d7d66:	4b02      	ldr	r3, [pc, #8]	; (d7d70 <hal_i2c_write+0xc>)
   d7d68:	681b      	ldr	r3, [r3, #0]
   d7d6a:	6a1b      	ldr	r3, [r3, #32]
   d7d6c:	9301      	str	r3, [sp, #4]
   d7d6e:	bd08      	pop	{r3, pc}
   d7d70:	00030228 	.word	0x00030228

000d7d74 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7d74:	b508      	push	{r3, lr}
   d7d76:	4b02      	ldr	r3, [pc, #8]	; (d7d80 <hal_i2c_available+0xc>)
   d7d78:	681b      	ldr	r3, [r3, #0]
   d7d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7d7c:	9301      	str	r3, [sp, #4]
   d7d7e:	bd08      	pop	{r3, pc}
   d7d80:	00030228 	.word	0x00030228

000d7d84 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7d84:	b508      	push	{r3, lr}
   d7d86:	4b02      	ldr	r3, [pc, #8]	; (d7d90 <hal_i2c_read+0xc>)
   d7d88:	681b      	ldr	r3, [r3, #0]
   d7d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7d8c:	9301      	str	r3, [sp, #4]
   d7d8e:	bd08      	pop	{r3, pc}
   d7d90:	00030228 	.word	0x00030228

000d7d94 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7d94:	b508      	push	{r3, lr}
   d7d96:	4b02      	ldr	r3, [pc, #8]	; (d7da0 <hal_i2c_peek+0xc>)
   d7d98:	681b      	ldr	r3, [r3, #0]
   d7d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7d9c:	9301      	str	r3, [sp, #4]
   d7d9e:	bd08      	pop	{r3, pc}
   d7da0:	00030228 	.word	0x00030228

000d7da4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7da4:	b508      	push	{r3, lr}
   d7da6:	4b02      	ldr	r3, [pc, #8]	; (d7db0 <hal_i2c_flush+0xc>)
   d7da8:	681b      	ldr	r3, [r3, #0]
   d7daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7dac:	9301      	str	r3, [sp, #4]
   d7dae:	bd08      	pop	{r3, pc}
   d7db0:	00030228 	.word	0x00030228

000d7db4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7db4:	b508      	push	{r3, lr}
   d7db6:	4b02      	ldr	r3, [pc, #8]	; (d7dc0 <hal_i2c_is_enabled+0xc>)
   d7db8:	681b      	ldr	r3, [r3, #0]
   d7dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7dbc:	9301      	str	r3, [sp, #4]
   d7dbe:	bd08      	pop	{r3, pc}
   d7dc0:	00030228 	.word	0x00030228

000d7dc4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7dc4:	b508      	push	{r3, lr}
   d7dc6:	4b02      	ldr	r3, [pc, #8]	; (d7dd0 <hal_i2c_init+0xc>)
   d7dc8:	681b      	ldr	r3, [r3, #0]
   d7dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7dcc:	9301      	str	r3, [sp, #4]
   d7dce:	bd08      	pop	{r3, pc}
   d7dd0:	00030228 	.word	0x00030228

000d7dd4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7dd4:	b508      	push	{r3, lr}
   d7dd6:	4b02      	ldr	r3, [pc, #8]	; (d7de0 <hal_i2c_request_ex+0xc>)
   d7dd8:	681b      	ldr	r3, [r3, #0]
   d7dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7ddc:	9301      	str	r3, [sp, #4]
   d7dde:	bd08      	pop	{r3, pc}
   d7de0:	00030228 	.word	0x00030228

000d7de4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d7de4:	b508      	push	{r3, lr}
   d7de6:	4b02      	ldr	r3, [pc, #8]	; (d7df0 <hal_spi_begin+0xc>)
   d7de8:	681b      	ldr	r3, [r3, #0]
   d7dea:	681b      	ldr	r3, [r3, #0]
   d7dec:	9301      	str	r3, [sp, #4]
   d7dee:	bd08      	pop	{r3, pc}
   d7df0:	00030230 	.word	0x00030230

000d7df4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d7df4:	b508      	push	{r3, lr}
   d7df6:	4b02      	ldr	r3, [pc, #8]	; (d7e00 <hal_spi_transfer+0xc>)
   d7df8:	681b      	ldr	r3, [r3, #0]
   d7dfa:	695b      	ldr	r3, [r3, #20]
   d7dfc:	9301      	str	r3, [sp, #4]
   d7dfe:	bd08      	pop	{r3, pc}
   d7e00:	00030230 	.word	0x00030230

000d7e04 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7e04:	b508      	push	{r3, lr}
   d7e06:	4b02      	ldr	r3, [pc, #8]	; (d7e10 <hal_spi_init+0xc>)
   d7e08:	681b      	ldr	r3, [r3, #0]
   d7e0a:	69db      	ldr	r3, [r3, #28]
   d7e0c:	9301      	str	r3, [sp, #4]
   d7e0e:	bd08      	pop	{r3, pc}
   d7e10:	00030230 	.word	0x00030230

000d7e14 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7e14:	b508      	push	{r3, lr}
   d7e16:	4b02      	ldr	r3, [pc, #8]	; (d7e20 <hal_spi_is_enabled+0xc>)
   d7e18:	681b      	ldr	r3, [r3, #0]
   d7e1a:	6a1b      	ldr	r3, [r3, #32]
   d7e1c:	9301      	str	r3, [sp, #4]
   d7e1e:	bd08      	pop	{r3, pc}
   d7e20:	00030230 	.word	0x00030230

000d7e24 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d7e24:	b508      	push	{r3, lr}
   d7e26:	4b02      	ldr	r3, [pc, #8]	; (d7e30 <hal_spi_info+0xc>)
   d7e28:	681b      	ldr	r3, [r3, #0]
   d7e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e2c:	9301      	str	r3, [sp, #4]
   d7e2e:	bd08      	pop	{r3, pc}
   d7e30:	00030230 	.word	0x00030230

000d7e34 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d7e34:	b508      	push	{r3, lr}
   d7e36:	4b02      	ldr	r3, [pc, #8]	; (d7e40 <hal_spi_transfer_dma+0xc>)
   d7e38:	681b      	ldr	r3, [r3, #0]
   d7e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7e3c:	9301      	str	r3, [sp, #4]
   d7e3e:	bd08      	pop	{r3, pc}
   d7e40:	00030230 	.word	0x00030230

000d7e44 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d7e44:	b508      	push	{r3, lr}
   d7e46:	4b02      	ldr	r3, [pc, #8]	; (d7e50 <hal_spi_transfer_dma_status+0xc>)
   d7e48:	681b      	ldr	r3, [r3, #0]
   d7e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7e4c:	9301      	str	r3, [sp, #4]
   d7e4e:	bd08      	pop	{r3, pc}
   d7e50:	00030230 	.word	0x00030230

000d7e54 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7e54:	b508      	push	{r3, lr}
   d7e56:	4b02      	ldr	r3, [pc, #8]	; (d7e60 <hal_spi_set_settings+0xc>)
   d7e58:	681b      	ldr	r3, [r3, #0]
   d7e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7e5c:	9301      	str	r3, [sp, #4]
   d7e5e:	bd08      	pop	{r3, pc}
   d7e60:	00030230 	.word	0x00030230

000d7e64 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d7e64:	b508      	push	{r3, lr}
   d7e66:	4b02      	ldr	r3, [pc, #8]	; (d7e70 <hal_spi_acquire+0xc>)
   d7e68:	681b      	ldr	r3, [r3, #0]
   d7e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7e6c:	9301      	str	r3, [sp, #4]
   d7e6e:	bd08      	pop	{r3, pc}
   d7e70:	00030230 	.word	0x00030230

000d7e74 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d7e74:	b508      	push	{r3, lr}
   d7e76:	4b02      	ldr	r3, [pc, #8]	; (d7e80 <hal_spi_release+0xc>)
   d7e78:	681b      	ldr	r3, [r3, #0]
   d7e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7e7c:	9301      	str	r3, [sp, #4]
   d7e7e:	bd08      	pop	{r3, pc}
   d7e80:	00030230 	.word	0x00030230

000d7e84 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7e84:	b508      	push	{r3, lr}
   d7e86:	4b02      	ldr	r3, [pc, #8]	; (d7e90 <HAL_USB_USART_Init+0xc>)
   d7e88:	681b      	ldr	r3, [r3, #0]
   d7e8a:	681b      	ldr	r3, [r3, #0]
   d7e8c:	9301      	str	r3, [sp, #4]
   d7e8e:	bd08      	pop	{r3, pc}
   d7e90:	0003024c 	.word	0x0003024c

000d7e94 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7e94:	b508      	push	{r3, lr}
   d7e96:	4b02      	ldr	r3, [pc, #8]	; (d7ea0 <HAL_USB_USART_Begin+0xc>)
   d7e98:	681b      	ldr	r3, [r3, #0]
   d7e9a:	685b      	ldr	r3, [r3, #4]
   d7e9c:	9301      	str	r3, [sp, #4]
   d7e9e:	bd08      	pop	{r3, pc}
   d7ea0:	0003024c 	.word	0x0003024c

000d7ea4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7ea4:	b508      	push	{r3, lr}
   d7ea6:	4b02      	ldr	r3, [pc, #8]	; (d7eb0 <HAL_USB_USART_Available_Data+0xc>)
   d7ea8:	681b      	ldr	r3, [r3, #0]
   d7eaa:	691b      	ldr	r3, [r3, #16]
   d7eac:	9301      	str	r3, [sp, #4]
   d7eae:	bd08      	pop	{r3, pc}
   d7eb0:	0003024c 	.word	0x0003024c

000d7eb4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7eb4:	b508      	push	{r3, lr}
   d7eb6:	4b02      	ldr	r3, [pc, #8]	; (d7ec0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7eb8:	681b      	ldr	r3, [r3, #0]
   d7eba:	695b      	ldr	r3, [r3, #20]
   d7ebc:	9301      	str	r3, [sp, #4]
   d7ebe:	bd08      	pop	{r3, pc}
   d7ec0:	0003024c 	.word	0x0003024c

000d7ec4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7ec4:	b508      	push	{r3, lr}
   d7ec6:	4b02      	ldr	r3, [pc, #8]	; (d7ed0 <HAL_USB_USART_Receive_Data+0xc>)
   d7ec8:	681b      	ldr	r3, [r3, #0]
   d7eca:	699b      	ldr	r3, [r3, #24]
   d7ecc:	9301      	str	r3, [sp, #4]
   d7ece:	bd08      	pop	{r3, pc}
   d7ed0:	0003024c 	.word	0x0003024c

000d7ed4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7ed4:	b508      	push	{r3, lr}
   d7ed6:	4b02      	ldr	r3, [pc, #8]	; (d7ee0 <HAL_USB_USART_Send_Data+0xc>)
   d7ed8:	681b      	ldr	r3, [r3, #0]
   d7eda:	69db      	ldr	r3, [r3, #28]
   d7edc:	9301      	str	r3, [sp, #4]
   d7ede:	bd08      	pop	{r3, pc}
   d7ee0:	0003024c 	.word	0x0003024c

000d7ee4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7ee4:	b508      	push	{r3, lr}
   d7ee6:	4b02      	ldr	r3, [pc, #8]	; (d7ef0 <HAL_USB_USART_Flush_Data+0xc>)
   d7ee8:	681b      	ldr	r3, [r3, #0]
   d7eea:	6a1b      	ldr	r3, [r3, #32]
   d7eec:	9301      	str	r3, [sp, #4]
   d7eee:	bd08      	pop	{r3, pc}
   d7ef0:	0003024c 	.word	0x0003024c

000d7ef4 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d7ef4:	b508      	push	{r3, lr}
   d7ef6:	4b02      	ldr	r3, [pc, #8]	; (d7f00 <HAL_USB_USART_Is_Enabled+0xc>)
   d7ef8:	681b      	ldr	r3, [r3, #0]
   d7efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7efc:	9301      	str	r3, [sp, #4]
   d7efe:	bd08      	pop	{r3, pc}
   d7f00:	0003024c 	.word	0x0003024c

000d7f04 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7f04:	b508      	push	{r3, lr}
   d7f06:	4b02      	ldr	r3, [pc, #8]	; (d7f10 <panic_+0xc>)
   d7f08:	681b      	ldr	r3, [r3, #0]
   d7f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7f0c:	9301      	str	r3, [sp, #4]
   d7f0e:	bd08      	pop	{r3, pc}
   d7f10:	00030260 	.word	0x00030260

000d7f14 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7f14:	b508      	push	{r3, lr}
   d7f16:	4b02      	ldr	r3, [pc, #8]	; (d7f20 <system_mode+0xc>)
   d7f18:	681b      	ldr	r3, [r3, #0]
   d7f1a:	681b      	ldr	r3, [r3, #0]
   d7f1c:	9301      	str	r3, [sp, #4]
   d7f1e:	bd08      	pop	{r3, pc}
   d7f20:	00030220 	.word	0x00030220

000d7f24 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7f24:	b508      	push	{r3, lr}
   d7f26:	4b02      	ldr	r3, [pc, #8]	; (d7f30 <set_system_mode+0xc>)
   d7f28:	681b      	ldr	r3, [r3, #0]
   d7f2a:	685b      	ldr	r3, [r3, #4]
   d7f2c:	9301      	str	r3, [sp, #4]
   d7f2e:	bd08      	pop	{r3, pc}
   d7f30:	00030220 	.word	0x00030220

000d7f34 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7f34:	b508      	push	{r3, lr}
   d7f36:	4b02      	ldr	r3, [pc, #8]	; (d7f40 <system_delay_ms+0xc>)
   d7f38:	681b      	ldr	r3, [r3, #0]
   d7f3a:	695b      	ldr	r3, [r3, #20]
   d7f3c:	9301      	str	r3, [sp, #4]
   d7f3e:	bd08      	pop	{r3, pc}
   d7f40:	00030220 	.word	0x00030220

000d7f44 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7f44:	b508      	push	{r3, lr}
   d7f46:	4b02      	ldr	r3, [pc, #8]	; (d7f50 <application_thread_current+0xc>)
   d7f48:	681b      	ldr	r3, [r3, #0]
   d7f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7f4c:	9301      	str	r3, [sp, #4]
   d7f4e:	bd08      	pop	{r3, pc}
   d7f50:	00030220 	.word	0x00030220

000d7f54 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7f54:	b508      	push	{r3, lr}
   d7f56:	4b02      	ldr	r3, [pc, #8]	; (d7f60 <application_thread_invoke+0xc>)
   d7f58:	681b      	ldr	r3, [r3, #0]
   d7f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7f5c:	9301      	str	r3, [sp, #4]
   d7f5e:	bd08      	pop	{r3, pc}
   d7f60:	00030220 	.word	0x00030220

000d7f64 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7f64:	b508      	push	{r3, lr}
   d7f66:	4b02      	ldr	r3, [pc, #8]	; (d7f70 <system_thread_get_state+0xc>)
   d7f68:	681b      	ldr	r3, [r3, #0]
   d7f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7f6c:	9301      	str	r3, [sp, #4]
   d7f6e:	bd08      	pop	{r3, pc}
   d7f70:	00030220 	.word	0x00030220

000d7f74 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7f74:	b508      	push	{r3, lr}
   d7f76:	4b03      	ldr	r3, [pc, #12]	; (d7f84 <system_ctrl_set_app_request_handler+0x10>)
   d7f78:	681b      	ldr	r3, [r3, #0]
   d7f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7f7e:	9301      	str	r3, [sp, #4]
   d7f80:	bd08      	pop	{r3, pc}
   d7f82:	0000      	.short	0x0000
   d7f84:	00030220 	.word	0x00030220

000d7f88 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7f88:	b508      	push	{r3, lr}
   d7f8a:	4b03      	ldr	r3, [pc, #12]	; (d7f98 <system_ctrl_set_result+0x10>)
   d7f8c:	681b      	ldr	r3, [r3, #0]
   d7f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7f92:	9301      	str	r3, [sp, #4]
   d7f94:	bd08      	pop	{r3, pc}
   d7f96:	0000      	.short	0x0000
   d7f98:	00030220 	.word	0x00030220

000d7f9c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7f9c:	b508      	push	{r3, lr}
   d7f9e:	4b02      	ldr	r3, [pc, #8]	; (d7fa8 <network_connect+0xc>)
   d7fa0:	681b      	ldr	r3, [r3, #0]
   d7fa2:	685b      	ldr	r3, [r3, #4]
   d7fa4:	9301      	str	r3, [sp, #4]
   d7fa6:	bd08      	pop	{r3, pc}
   d7fa8:	00030240 	.word	0x00030240

000d7fac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7fac:	b508      	push	{r3, lr}
   d7fae:	4b02      	ldr	r3, [pc, #8]	; (d7fb8 <network_connecting+0xc>)
   d7fb0:	681b      	ldr	r3, [r3, #0]
   d7fb2:	689b      	ldr	r3, [r3, #8]
   d7fb4:	9301      	str	r3, [sp, #4]
   d7fb6:	bd08      	pop	{r3, pc}
   d7fb8:	00030240 	.word	0x00030240

000d7fbc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7fbc:	b508      	push	{r3, lr}
   d7fbe:	4b02      	ldr	r3, [pc, #8]	; (d7fc8 <network_disconnect+0xc>)
   d7fc0:	681b      	ldr	r3, [r3, #0]
   d7fc2:	68db      	ldr	r3, [r3, #12]
   d7fc4:	9301      	str	r3, [sp, #4]
   d7fc6:	bd08      	pop	{r3, pc}
   d7fc8:	00030240 	.word	0x00030240

000d7fcc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7fcc:	b508      	push	{r3, lr}
   d7fce:	4b02      	ldr	r3, [pc, #8]	; (d7fd8 <network_ready+0xc>)
   d7fd0:	681b      	ldr	r3, [r3, #0]
   d7fd2:	691b      	ldr	r3, [r3, #16]
   d7fd4:	9301      	str	r3, [sp, #4]
   d7fd6:	bd08      	pop	{r3, pc}
   d7fd8:	00030240 	.word	0x00030240

000d7fdc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7fdc:	b508      	push	{r3, lr}
   d7fde:	4b02      	ldr	r3, [pc, #8]	; (d7fe8 <network_on+0xc>)
   d7fe0:	681b      	ldr	r3, [r3, #0]
   d7fe2:	695b      	ldr	r3, [r3, #20]
   d7fe4:	9301      	str	r3, [sp, #4]
   d7fe6:	bd08      	pop	{r3, pc}
   d7fe8:	00030240 	.word	0x00030240

000d7fec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7fec:	b508      	push	{r3, lr}
   d7fee:	4b02      	ldr	r3, [pc, #8]	; (d7ff8 <network_off+0xc>)
   d7ff0:	681b      	ldr	r3, [r3, #0]
   d7ff2:	699b      	ldr	r3, [r3, #24]
   d7ff4:	9301      	str	r3, [sp, #4]
   d7ff6:	bd08      	pop	{r3, pc}
   d7ff8:	00030240 	.word	0x00030240

000d7ffc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7ffc:	b508      	push	{r3, lr}
   d7ffe:	4b02      	ldr	r3, [pc, #8]	; (d8008 <network_listen+0xc>)
   d8000:	681b      	ldr	r3, [r3, #0]
   d8002:	69db      	ldr	r3, [r3, #28]
   d8004:	9301      	str	r3, [sp, #4]
   d8006:	bd08      	pop	{r3, pc}
   d8008:	00030240 	.word	0x00030240

000d800c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d800c:	b508      	push	{r3, lr}
   d800e:	4b02      	ldr	r3, [pc, #8]	; (d8018 <network_listening+0xc>)
   d8010:	681b      	ldr	r3, [r3, #0]
   d8012:	6a1b      	ldr	r3, [r3, #32]
   d8014:	9301      	str	r3, [sp, #4]
   d8016:	bd08      	pop	{r3, pc}
   d8018:	00030240 	.word	0x00030240

000d801c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d801c:	b508      	push	{r3, lr}
   d801e:	4b02      	ldr	r3, [pc, #8]	; (d8028 <network_set_listen_timeout+0xc>)
   d8020:	681b      	ldr	r3, [r3, #0]
   d8022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8024:	9301      	str	r3, [sp, #4]
   d8026:	bd08      	pop	{r3, pc}
   d8028:	00030240 	.word	0x00030240

000d802c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d802c:	b508      	push	{r3, lr}
   d802e:	4b02      	ldr	r3, [pc, #8]	; (d8038 <network_get_listen_timeout+0xc>)
   d8030:	681b      	ldr	r3, [r3, #0]
   d8032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8034:	9301      	str	r3, [sp, #4]
   d8036:	bd08      	pop	{r3, pc}
   d8038:	00030240 	.word	0x00030240

000d803c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d803c:	b508      	push	{r3, lr}
   d803e:	4b02      	ldr	r3, [pc, #8]	; (d8048 <network_is_on+0xc>)
   d8040:	681b      	ldr	r3, [r3, #0]
   d8042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8044:	9301      	str	r3, [sp, #4]
   d8046:	bd08      	pop	{r3, pc}
   d8048:	00030240 	.word	0x00030240

000d804c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d804c:	b508      	push	{r3, lr}
   d804e:	4b02      	ldr	r3, [pc, #8]	; (d8058 <network_is_off+0xc>)
   d8050:	681b      	ldr	r3, [r3, #0]
   d8052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8054:	9301      	str	r3, [sp, #4]
   d8056:	bd08      	pop	{r3, pc}
   d8058:	00030240 	.word	0x00030240

000d805c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d805c:	b508      	push	{r3, lr}
   d805e:	4b02      	ldr	r3, [pc, #8]	; (d8068 <spark_process+0xc>)
   d8060:	681b      	ldr	r3, [r3, #0]
   d8062:	689b      	ldr	r3, [r3, #8]
   d8064:	9301      	str	r3, [sp, #4]
   d8066:	bd08      	pop	{r3, pc}
   d8068:	00030244 	.word	0x00030244

000d806c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d806c:	b508      	push	{r3, lr}
   d806e:	4b02      	ldr	r3, [pc, #8]	; (d8078 <spark_cloud_flag_connected+0xc>)
   d8070:	681b      	ldr	r3, [r3, #0]
   d8072:	695b      	ldr	r3, [r3, #20]
   d8074:	9301      	str	r3, [sp, #4]
   d8076:	bd08      	pop	{r3, pc}
   d8078:	00030244 	.word	0x00030244

000d807c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d807c:	b508      	push	{r3, lr}
   d807e:	4b02      	ldr	r3, [pc, #8]	; (d8088 <spark_send_event+0xc>)
   d8080:	681b      	ldr	r3, [r3, #0]
   d8082:	6a1b      	ldr	r3, [r3, #32]
   d8084:	9301      	str	r3, [sp, #4]
   d8086:	bd08      	pop	{r3, pc}
   d8088:	00030244 	.word	0x00030244

000d808c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d808c:	b508      	push	{r3, lr}
   d808e:	4b02      	ldr	r3, [pc, #8]	; (d8098 <spark_sync_time_pending+0xc>)
   d8090:	681b      	ldr	r3, [r3, #0]
   d8092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8094:	9301      	str	r3, [sp, #4]
   d8096:	bd08      	pop	{r3, pc}
   d8098:	00030244 	.word	0x00030244

000d809c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d809c:	b508      	push	{r3, lr}
   d809e:	4b02      	ldr	r3, [pc, #8]	; (d80a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d80a0:	681b      	ldr	r3, [r3, #0]
   d80a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d80a4:	9301      	str	r3, [sp, #4]
   d80a6:	bd08      	pop	{r3, pc}
   d80a8:	00030244 	.word	0x00030244

000d80ac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d80ac:	b508      	push	{r3, lr}
   d80ae:	4b02      	ldr	r3, [pc, #8]	; (d80b8 <malloc+0xc>)
   d80b0:	681b      	ldr	r3, [r3, #0]
   d80b2:	681b      	ldr	r3, [r3, #0]
   d80b4:	9301      	str	r3, [sp, #4]
   d80b6:	bd08      	pop	{r3, pc}
   d80b8:	0003021c 	.word	0x0003021c

000d80bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d80bc:	b508      	push	{r3, lr}
   d80be:	4b02      	ldr	r3, [pc, #8]	; (d80c8 <free+0xc>)
   d80c0:	681b      	ldr	r3, [r3, #0]
   d80c2:	685b      	ldr	r3, [r3, #4]
   d80c4:	9301      	str	r3, [sp, #4]
   d80c6:	bd08      	pop	{r3, pc}
   d80c8:	0003021c 	.word	0x0003021c

000d80cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d80cc:	b508      	push	{r3, lr}
   d80ce:	4b02      	ldr	r3, [pc, #8]	; (d80d8 <realloc+0xc>)
   d80d0:	681b      	ldr	r3, [r3, #0]
   d80d2:	689b      	ldr	r3, [r3, #8]
   d80d4:	9301      	str	r3, [sp, #4]
   d80d6:	bd08      	pop	{r3, pc}
   d80d8:	0003021c 	.word	0x0003021c

000d80dc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d80dc:	b508      	push	{r3, lr}
   d80de:	4b02      	ldr	r3, [pc, #8]	; (d80e8 <vsnprintf+0xc>)
   d80e0:	681b      	ldr	r3, [r3, #0]
   d80e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d80e4:	9301      	str	r3, [sp, #4]
   d80e6:	bd08      	pop	{r3, pc}
   d80e8:	0003021c 	.word	0x0003021c

000d80ec <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d80ec:	b508      	push	{r3, lr}
   d80ee:	4b02      	ldr	r3, [pc, #8]	; (d80f8 <abort+0xc>)
   d80f0:	681b      	ldr	r3, [r3, #0]
   d80f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d80f4:	9301      	str	r3, [sp, #4]
   d80f6:	bd08      	pop	{r3, pc}
   d80f8:	0003021c 	.word	0x0003021c

000d80fc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d80fc:	b508      	push	{r3, lr}
   d80fe:	4b02      	ldr	r3, [pc, #8]	; (d8108 <_malloc_r+0xc>)
   d8100:	681b      	ldr	r3, [r3, #0]
   d8102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8104:	9301      	str	r3, [sp, #4]
   d8106:	bd08      	pop	{r3, pc}
   d8108:	0003021c 	.word	0x0003021c

000d810c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d810c:	b508      	push	{r3, lr}
   d810e:	4b02      	ldr	r3, [pc, #8]	; (d8118 <__errno+0xc>)
   d8110:	681b      	ldr	r3, [r3, #0]
   d8112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8114:	9301      	str	r3, [sp, #4]
   d8116:	bd08      	pop	{r3, pc}
   d8118:	0003021c 	.word	0x0003021c

000d811c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d811c:	b508      	push	{r3, lr}
   d811e:	4b02      	ldr	r3, [pc, #8]	; (d8128 <newlib_impure_ptr_callback+0xc>)
   d8120:	681b      	ldr	r3, [r3, #0]
   d8122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8124:	9301      	str	r3, [sp, #4]
   d8126:	bd08      	pop	{r3, pc}
   d8128:	0003021c 	.word	0x0003021c

000d812c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d812c:	2200      	movs	r2, #0
   d812e:	6840      	ldr	r0, [r0, #4]
   d8130:	4611      	mov	r1, r2
   d8132:	f7ff bf6b 	b.w	d800c <network_listening>

000d8136 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8136:	2200      	movs	r2, #0
   d8138:	6840      	ldr	r0, [r0, #4]
   d813a:	4611      	mov	r1, r2
   d813c:	f7ff bf76 	b.w	d802c <network_get_listen_timeout>

000d8140 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8140:	6840      	ldr	r0, [r0, #4]
   d8142:	2200      	movs	r2, #0
   d8144:	f7ff bf6a 	b.w	d801c <network_set_listen_timeout>

000d8148 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8148:	6840      	ldr	r0, [r0, #4]
   d814a:	2200      	movs	r2, #0
   d814c:	f081 0101 	eor.w	r1, r1, #1
   d8150:	f7ff bf54 	b.w	d7ffc <network_listen>

000d8154 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8154:	2300      	movs	r3, #0
   d8156:	6840      	ldr	r0, [r0, #4]
   d8158:	461a      	mov	r2, r3
   d815a:	4619      	mov	r1, r3
   d815c:	f7ff bf46 	b.w	d7fec <network_off>

000d8160 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8160:	2300      	movs	r3, #0
   d8162:	6840      	ldr	r0, [r0, #4]
   d8164:	461a      	mov	r2, r3
   d8166:	4619      	mov	r1, r3
   d8168:	f7ff bf38 	b.w	d7fdc <network_on>

000d816c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d816c:	2200      	movs	r2, #0
   d816e:	6840      	ldr	r0, [r0, #4]
   d8170:	4611      	mov	r1, r2
   d8172:	f7ff bf2b 	b.w	d7fcc <network_ready>

000d8176 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8176:	2200      	movs	r2, #0
   d8178:	6840      	ldr	r0, [r0, #4]
   d817a:	4611      	mov	r1, r2
   d817c:	f7ff bf16 	b.w	d7fac <network_connecting>

000d8180 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8180:	6840      	ldr	r0, [r0, #4]
   d8182:	2200      	movs	r2, #0
   d8184:	2102      	movs	r1, #2
   d8186:	f7ff bf19 	b.w	d7fbc <network_disconnect>

000d818a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d818a:	2300      	movs	r3, #0
   d818c:	6840      	ldr	r0, [r0, #4]
   d818e:	461a      	mov	r2, r3
   d8190:	f7ff bf04 	b.w	d7f9c <network_connect>

000d8194 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8194:	4b02      	ldr	r3, [pc, #8]	; (d81a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8196:	2203      	movs	r2, #3
   d8198:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d819a:	4a02      	ldr	r2, [pc, #8]	; (d81a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d819c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d819e:	4770      	bx	lr
   d81a0:	2003e584 	.word	0x2003e584
   d81a4:	000de330 	.word	0x000de330

000d81a8 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d81a8:	2100      	movs	r1, #0
   d81aa:	f7ff be5b 	b.w	d7e64 <hal_spi_acquire>

000d81ae <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d81ae:	2100      	movs	r1, #0
   d81b0:	f7ff be60 	b.w	d7e74 <hal_spi_release>

000d81b4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d81b4:	b510      	push	{r4, lr}
   d81b6:	4604      	mov	r4, r0
   d81b8:	4608      	mov	r0, r1
{
    _spi = spi;
   d81ba:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d81bc:	f7ff fe22 	bl	d7e04 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d81c0:	2300      	movs	r3, #0
   d81c2:	6063      	str	r3, [r4, #4]
}
   d81c4:	4620      	mov	r0, r4
   d81c6:	bd10      	pop	{r4, pc}

000d81c8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d81c8:	b510      	push	{r4, lr}
   d81ca:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d81cc:	7800      	ldrb	r0, [r0, #0]
   d81ce:	f7ff ffeb 	bl	d81a8 <_ZN8SPIClass4lockEv.isra.0>
   d81d2:	b948      	cbnz	r0, d81e8 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d81d4:	7820      	ldrb	r0, [r4, #0]
   d81d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d81da:	f7ff fe03 	bl	d7de4 <hal_spi_begin>
        unlock();
   d81de:	7820      	ldrb	r0, [r4, #0]
    }
}
   d81e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d81e4:	f7ff bfe3 	b.w	d81ae <_ZN8SPIClass6unlockEv.isra.0>
}
   d81e8:	bd10      	pop	{r4, pc}

000d81ea <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d81ea:	7800      	ldrb	r0, [r0, #0]
   d81ec:	f7ff bfdf 	b.w	d81ae <_ZN8SPIClass6unlockEv.isra.0>

000d81f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d81f0:	0840      	lsrs	r0, r0, #1
{
   d81f2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d81f4:	6018      	str	r0, [r3, #0]
   d81f6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d81f8:	6818      	ldr	r0, [r3, #0]
   d81fa:	4288      	cmp	r0, r1
   d81fc:	b2e5      	uxtb	r5, r4
   d81fe:	d906      	bls.n	d820e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d8200:	3401      	adds	r4, #1
   d8202:	2c08      	cmp	r4, #8
   d8204:	d002      	beq.n	d820c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d8206:	0840      	lsrs	r0, r0, #1
   d8208:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d820a:	e7f5      	b.n	d81f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d820c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d820e:	4b02      	ldr	r3, [pc, #8]	; (d8218 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d8210:	5d5b      	ldrb	r3, [r3, r5]
   d8212:	7013      	strb	r3, [r2, #0]
}
   d8214:	bd30      	pop	{r4, r5, pc}
   d8216:	bf00      	nop
   d8218:	000de364 	.word	0x000de364

000d821c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d821c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8220:	4606      	mov	r6, r0
   d8222:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d8224:	7800      	ldrb	r0, [r0, #0]
{
   d8226:	460c      	mov	r4, r1
    CHECK(lock());
   d8228:	f7ff ffbe 	bl	d81a8 <_ZN8SPIClass4lockEv.isra.0>
   d822c:	2800      	cmp	r0, #0
   d822e:	db1b      	blt.n	d8268 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d8230:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d8232:	2214      	movs	r2, #20
   d8234:	2100      	movs	r1, #0
   d8236:	a809      	add	r0, sp, #36	; 0x24
   d8238:	f004 ffd0 	bl	dd1dc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d823c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d823e:	2200      	movs	r2, #0
   d8240:	a909      	add	r1, sp, #36	; 0x24
   d8242:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d8244:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d8248:	f7ff fdec 	bl	d7e24 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d824c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d8250:	b113      	cbz	r3, d8258 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d8252:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d8256:	b155      	cbz	r5, d826e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d8258:	2700      	movs	r7, #0
   d825a:	46b9      	mov	r9, r7
   d825c:	46b8      	mov	r8, r7
   d825e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d8260:	7923      	ldrb	r3, [r4, #4]
   d8262:	b15d      	cbz	r5, d827c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d8264:	b1c3      	cbz	r3, d8298 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d8266:	2000      	movs	r0, #0
}
   d8268:	b00f      	add	sp, #60	; 0x3c
   d826a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d826e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d8272:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d8276:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d827a:	e7f1      	b.n	d8260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d827c:	2b00      	cmp	r3, #0
   d827e:	d135      	bne.n	d82ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d8280:	68a3      	ldr	r3, [r4, #8]
   d8282:	4543      	cmp	r3, r8
   d8284:	d108      	bne.n	d8298 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d8286:	f88d 9020 	strb.w	r9, [sp, #32]
   d828a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d828e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8292:	89a3      	ldrh	r3, [r4, #12]
   d8294:	429a      	cmp	r2, r3
   d8296:	d0e6      	beq.n	d8266 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d8298:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d829a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d829c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d82a0:	980a      	ldr	r0, [sp, #40]	; 0x28
   d82a2:	ab04      	add	r3, sp, #16
   d82a4:	f10d 020f 	add.w	r2, sp, #15
   d82a8:	f7ff ffa2 	bl	d81f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d82ac:	7921      	ldrb	r1, [r4, #4]
   d82ae:	b985      	cbnz	r5, d82d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d82b0:	b989      	cbnz	r1, d82d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d82b2:	68a3      	ldr	r3, [r4, #8]
   d82b4:	4543      	cmp	r3, r8
   d82b6:	d30e      	bcc.n	d82d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d82b8:	f88d 9020 	strb.w	r9, [sp, #32]
   d82bc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d82c0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d82c4:	89a3      	ldrh	r3, [r4, #12]
   d82c6:	429a      	cmp	r2, r3
   d82c8:	d105      	bne.n	d82d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d82ca:	9b04      	ldr	r3, [sp, #16]
   d82cc:	4543      	cmp	r3, r8
   d82ce:	d102      	bne.n	d82d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d82d0:	e7c9      	b.n	d8266 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d82d2:	2900      	cmp	r1, #0
   d82d4:	d1f9      	bne.n	d82ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d82d6:	2300      	movs	r3, #0
   d82d8:	9301      	str	r3, [sp, #4]
   d82da:	7b63      	ldrb	r3, [r4, #13]
   d82dc:	9300      	str	r3, [sp, #0]
   d82de:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d82e2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d82e4:	7830      	ldrb	r0, [r6, #0]
   d82e6:	f7ff fdb5 	bl	d7e54 <hal_spi_set_settings>
   d82ea:	e7bc      	b.n	d8266 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d82ec:	e9cd 5500 	strd	r5, r5, [sp]
   d82f0:	462b      	mov	r3, r5
   d82f2:	462a      	mov	r2, r5
   d82f4:	2101      	movs	r1, #1
   d82f6:	e7f5      	b.n	d82e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d82f8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d82f8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d82fa:	7800      	ldrb	r0, [r0, #0]
   d82fc:	f7ff fd7a 	bl	d7df4 <hal_spi_transfer>
}
   d8300:	b2c0      	uxtb	r0, r0
   d8302:	bd08      	pop	{r3, pc}

000d8304 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d8304:	b530      	push	{r4, r5, lr}
   d8306:	b087      	sub	sp, #28
   d8308:	4604      	mov	r4, r0
   d830a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d830c:	9500      	str	r5, [sp, #0]
   d830e:	7800      	ldrb	r0, [r0, #0]
   d8310:	f7ff fd90 	bl	d7e34 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d8314:	b93d      	cbnz	r5, d8326 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d8316:	7820      	ldrb	r0, [r4, #0]
   d8318:	a902      	add	r1, sp, #8
   d831a:	f7ff fd93 	bl	d7e44 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d831e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d8322:	07db      	lsls	r3, r3, #31
   d8324:	d4f7      	bmi.n	d8316 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d8326:	b007      	add	sp, #28
   d8328:	bd30      	pop	{r4, r5, pc}
	...

000d832c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d832c:	4b05      	ldr	r3, [pc, #20]	; (d8344 <_GLOBAL__sub_I_System+0x18>)
   d832e:	2202      	movs	r2, #2
   d8330:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8332:	4b05      	ldr	r3, [pc, #20]	; (d8348 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d8334:	4a05      	ldr	r2, [pc, #20]	; (d834c <_GLOBAL__sub_I_System+0x20>)
   d8336:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d8338:	2000      	movs	r0, #0
   d833a:	6018      	str	r0, [r3, #0]
   d833c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d833e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8340:	f7ff bdf0 	b.w	d7f24 <set_system_mode>
   d8344:	2003e598 	.word	0x2003e598
   d8348:	2003e58c 	.word	0x2003e58c
   d834c:	ffff0000 	.word	0xffff0000

000d8350 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d8350:	b510      	push	{r4, lr}
   d8352:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d8354:	f004 ff8b 	bl	dd26e <strlen>
   d8358:	3801      	subs	r0, #1
   d835a:	1823      	adds	r3, r4, r0
   d835c:	4620      	mov	r0, r4
	while(i<j){
   d835e:	4283      	cmp	r3, r0
   d8360:	d906      	bls.n	d8370 <_Z11str_reversePc+0x20>
		c = *i;
   d8362:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d8364:	7819      	ldrb	r1, [r3, #0]
   d8366:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d836a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d836e:	e7f6      	b.n	d835e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d8370:	bd10      	pop	{r4, pc}

000d8372 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d8372:	b570      	push	{r4, r5, r6, lr}
   d8374:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d8376:	1e91      	subs	r1, r2, #2
   d8378:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d837a:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d837c:	d822      	bhi.n	d83c4 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d837e:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d8380:	b16d      	cbz	r5, d839e <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d8382:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d8386:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d838a:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d838c:	2d09      	cmp	r5, #9
                *ptr += '0';
   d838e:	bf94      	ite	ls
   d8390:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d8392:	3157      	addhi	r1, #87	; 0x57
   d8394:	b2c9      	uxtb	r1, r1
   d8396:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d839a:	4635      	mov	r5, r6
	while(a){
   d839c:	e7f0      	b.n	d8380 <ultoa+0xe>
   d839e:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d83a0:	4423      	add	r3, r4
            *ptr++ = '0';
   d83a2:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d83a4:	4293      	cmp	r3, r2
   d83a6:	d902      	bls.n	d83ae <ultoa+0x3c>
            *ptr++ = '0';
   d83a8:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d83ac:	e7fa      	b.n	d83a4 <ultoa+0x32>
   d83ae:	1a1a      	subs	r2, r3, r0
   d83b0:	4283      	cmp	r3, r0
   d83b2:	bf38      	it	cc
   d83b4:	2200      	movcc	r2, #0

	*ptr = '\0';
   d83b6:	2300      	movs	r3, #0
   d83b8:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d83ba:	4620      	mov	r0, r4
   d83bc:	f7ff ffc8 	bl	d8350 <_Z11str_reversePc>
	return buffer;
   d83c0:	4620      	mov	r0, r4
}
   d83c2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d83c4:	2000      	movs	r0, #0
   d83c6:	e7fc      	b.n	d83c2 <ultoa+0x50>

000d83c8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d83c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d83cc:	ec57 6b10 	vmov	r6, r7, d0
   d83d0:	4680      	mov	r8, r0
   d83d2:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d83d4:	ee10 0a10 	vmov	r0, s0
   d83d8:	2200      	movs	r2, #0
   d83da:	2300      	movs	r3, #0
   d83dc:	4639      	mov	r1, r7
   d83de:	f004 fb1b 	bl	dca18 <__aeabi_dcmplt>
   d83e2:	b128      	cbz	r0, d83f0 <_Z4dtoadhPc+0x28>
        val = -val;
   d83e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d83e8:	461f      	mov	r7, r3
        *sout++ = '-';
   d83ea:	232d      	movs	r3, #45	; 0x2d
   d83ec:	f804 3b01 	strb.w	r3, [r4], #1
   d83f0:	2300      	movs	r3, #0
    }
    long scale = 1;
   d83f2:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d83f6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d83f8:	b2d9      	uxtb	r1, r3
   d83fa:	4588      	cmp	r8, r1
   d83fc:	d903      	bls.n	d8406 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d83fe:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d8402:	3301      	adds	r3, #1
   d8404:	e7f8      	b.n	d83f8 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d8406:	4648      	mov	r0, r9
   d8408:	f004 f82a 	bl	dc460 <__aeabi_i2d>
   d840c:	4632      	mov	r2, r6
   d840e:	463b      	mov	r3, r7
   d8410:	f004 f890 	bl	dc534 <__aeabi_dmul>
   d8414:	4606      	mov	r6, r0
   d8416:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d8418:	f004 fd4a 	bl	dceb0 <__aeabi_d2ulz>
   d841c:	4605      	mov	r5, r0
   d841e:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d8420:	f004 f852 	bl	dc4c8 <__aeabi_ul2d>
   d8424:	4602      	mov	r2, r0
   d8426:	460b      	mov	r3, r1
   d8428:	4630      	mov	r0, r6
   d842a:	4639      	mov	r1, r7
   d842c:	f003 feca 	bl	dc1c4 <__aeabi_dsub>
   d8430:	4b13      	ldr	r3, [pc, #76]	; (d8480 <_Z4dtoadhPc+0xb8>)
   d8432:	2200      	movs	r2, #0
   d8434:	f004 fb04 	bl	dca40 <__aeabi_dcmpge>
   d8438:	b110      	cbz	r0, d8440 <_Z4dtoadhPc+0x78>
        fixed++;
   d843a:	3501      	adds	r5, #1
   d843c:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d8440:	464a      	mov	r2, r9
   d8442:	4628      	mov	r0, r5
   d8444:	17d3      	asrs	r3, r2, #31
   d8446:	4651      	mov	r1, sl
   d8448:	f004 fd1a 	bl	dce80 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d844c:	2301      	movs	r3, #1
   d844e:	4615      	mov	r5, r2
   d8450:	4621      	mov	r1, r4
   d8452:	220a      	movs	r2, #10
   d8454:	f7ff ff8d 	bl	d8372 <ultoa>
    if (prec) {
   d8458:	f1b8 0f00 	cmp.w	r8, #0
   d845c:	d00d      	beq.n	d847a <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d845e:	4620      	mov	r0, r4
   d8460:	f004 ff05 	bl	dd26e <strlen>
        *sout++ = '.';
   d8464:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d8466:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d8468:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d846a:	220a      	movs	r2, #10
   d846c:	4643      	mov	r3, r8
   d846e:	4628      	mov	r0, r5
   d8470:	3101      	adds	r1, #1
    }
}
   d8472:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d8476:	f7ff bf7c 	b.w	d8372 <ultoa>
}
   d847a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d847e:	bf00      	nop
   d8480:	3fe00000 	.word	0x3fe00000

000d8484 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8484:	b510      	push	{r4, lr}
   d8486:	4604      	mov	r4, r0
{
	free(buffer);
   d8488:	6800      	ldr	r0, [r0, #0]
   d848a:	f7ff fe17 	bl	d80bc <free>
}
   d848e:	4620      	mov	r0, r4
   d8490:	bd10      	pop	{r4, pc}

000d8492 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8492:	b510      	push	{r4, lr}
   d8494:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8496:	6800      	ldr	r0, [r0, #0]
   d8498:	b108      	cbz	r0, d849e <_ZN6String10invalidateEv+0xc>
   d849a:	f7ff fe0f 	bl	d80bc <free>
	buffer = NULL;
   d849e:	2300      	movs	r3, #0
	capacity = len = 0;
   d84a0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d84a4:	6023      	str	r3, [r4, #0]
}
   d84a6:	bd10      	pop	{r4, pc}

000d84a8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d84a8:	b538      	push	{r3, r4, r5, lr}
   d84aa:	4604      	mov	r4, r0
   d84ac:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d84ae:	6800      	ldr	r0, [r0, #0]
   d84b0:	3101      	adds	r1, #1
   d84b2:	f7ff fe0b 	bl	d80cc <realloc>
	if (newbuffer) {
   d84b6:	b110      	cbz	r0, d84be <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d84b8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d84bc:	2001      	movs	r0, #1
	}
	return 0;
}
   d84be:	bd38      	pop	{r3, r4, r5, pc}

000d84c0 <_ZN6String7reserveEj>:
{
   d84c0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d84c2:	6803      	ldr	r3, [r0, #0]
{
   d84c4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d84c6:	b123      	cbz	r3, d84d2 <_ZN6String7reserveEj+0x12>
   d84c8:	6843      	ldr	r3, [r0, #4]
   d84ca:	428b      	cmp	r3, r1
   d84cc:	d301      	bcc.n	d84d2 <_ZN6String7reserveEj+0x12>
   d84ce:	2001      	movs	r0, #1
}
   d84d0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d84d2:	4620      	mov	r0, r4
   d84d4:	f7ff ffe8 	bl	d84a8 <_ZN6String12changeBufferEj>
   d84d8:	2800      	cmp	r0, #0
   d84da:	d0f9      	beq.n	d84d0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d84dc:	68a3      	ldr	r3, [r4, #8]
   d84de:	2b00      	cmp	r3, #0
   d84e0:	d1f5      	bne.n	d84ce <_ZN6String7reserveEj+0xe>
   d84e2:	6822      	ldr	r2, [r4, #0]
   d84e4:	7013      	strb	r3, [r2, #0]
   d84e6:	e7f2      	b.n	d84ce <_ZN6String7reserveEj+0xe>

000d84e8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d84e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d84ea:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d84ec:	4611      	mov	r1, r2
   d84ee:	9201      	str	r2, [sp, #4]
{
   d84f0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d84f2:	f7ff ffe5 	bl	d84c0 <_ZN6String7reserveEj>
   d84f6:	9a01      	ldr	r2, [sp, #4]
   d84f8:	b928      	cbnz	r0, d8506 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d84fa:	4620      	mov	r0, r4
   d84fc:	f7ff ffc9 	bl	d8492 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8500:	4620      	mov	r0, r4
   d8502:	b003      	add	sp, #12
   d8504:	bd30      	pop	{r4, r5, pc}
	len = length;
   d8506:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d8508:	4629      	mov	r1, r5
   d850a:	6820      	ldr	r0, [r4, #0]
   d850c:	f004 fe58 	bl	dd1c0 <memcpy>
	buffer[len] = 0;
   d8510:	6822      	ldr	r2, [r4, #0]
   d8512:	68a3      	ldr	r3, [r4, #8]
   d8514:	2100      	movs	r1, #0
   d8516:	54d1      	strb	r1, [r2, r3]
	return *this;
   d8518:	e7f2      	b.n	d8500 <_ZN6String4copyEPKcj+0x18>

000d851a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d851a:	b513      	push	{r0, r1, r4, lr}
   d851c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d851e:	b159      	cbz	r1, d8538 <_ZN6StringaSEPKc+0x1e>
   d8520:	4608      	mov	r0, r1
   d8522:	9101      	str	r1, [sp, #4]
   d8524:	f004 fea3 	bl	dd26e <strlen>
   d8528:	9901      	ldr	r1, [sp, #4]
   d852a:	4602      	mov	r2, r0
   d852c:	4620      	mov	r0, r4
   d852e:	f7ff ffdb 	bl	d84e8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d8532:	4620      	mov	r0, r4
   d8534:	b002      	add	sp, #8
   d8536:	bd10      	pop	{r4, pc}
	else invalidate();
   d8538:	f7ff ffab 	bl	d8492 <_ZN6String10invalidateEv>
   d853c:	e7f9      	b.n	d8532 <_ZN6StringaSEPKc+0x18>

000d853e <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d853e:	b510      	push	{r4, lr}
   d8540:	4604      	mov	r4, r0
   d8542:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d8544:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d8546:	4608      	mov	r0, r1
	capacity = 0;
   d8548:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d854c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d854e:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d8550:	a901      	add	r1, sp, #4
   d8552:	b2c0      	uxtb	r0, r0
   d8554:	f7ff ff38 	bl	d83c8 <_Z4dtoadhPc>
        *this = buf;
   d8558:	a901      	add	r1, sp, #4
   d855a:	4620      	mov	r0, r4
   d855c:	f7ff ffdd 	bl	d851a <_ZN6StringaSEPKc>
}
   d8560:	4620      	mov	r0, r4
   d8562:	b00a      	add	sp, #40	; 0x28
   d8564:	bd10      	pop	{r4, pc}

000d8566 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8566:	b510      	push	{r4, lr}
          _M_dispose();
   d8568:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d856a:	4604      	mov	r4, r0
          _M_dispose();
   d856c:	689b      	ldr	r3, [r3, #8]
   d856e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8570:	68a3      	ldr	r3, [r4, #8]
   d8572:	3b01      	subs	r3, #1
   d8574:	60a3      	str	r3, [r4, #8]
   d8576:	b92b      	cbnz	r3, d8584 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d8578:	6823      	ldr	r3, [r4, #0]
   d857a:	4620      	mov	r0, r4
   d857c:	68db      	ldr	r3, [r3, #12]
    }
   d857e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d8582:	4718      	bx	r3
    }
   d8584:	bd10      	pop	{r4, pc}

000d8586 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d8586:	680b      	ldr	r3, [r1, #0]
   d8588:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d858a:	b113      	cbz	r3, d8592 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d858c:	685a      	ldr	r2, [r3, #4]
   d858e:	3201      	adds	r2, #1
   d8590:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d8592:	4770      	bx	lr

000d8594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d8594:	b510      	push	{r4, lr}
   d8596:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d8598:	6800      	ldr	r0, [r0, #0]
   d859a:	b128      	cbz	r0, d85a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d859c:	6843      	ldr	r3, [r0, #4]
   d859e:	3b01      	subs	r3, #1
   d85a0:	6043      	str	r3, [r0, #4]
   d85a2:	b90b      	cbnz	r3, d85a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d85a4:	f7ff ffdf 	bl	d8566 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d85a8:	4620      	mov	r0, r4
   d85aa:	bd10      	pop	{r4, pc}

000d85ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d85ac:	4802      	ldr	r0, [pc, #8]	; (d85b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d85ae:	2300      	movs	r3, #0
   d85b0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d85b2:	f7ff bb67 	b.w	d7c84 <os_mutex_recursive_create>
   d85b6:	bf00      	nop
   d85b8:	2003e59c 	.word	0x2003e59c

000d85bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d85bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d85be:	4606      	mov	r6, r0
   d85c0:	460d      	mov	r5, r1
  size_t n = 0;
   d85c2:	188f      	adds	r7, r1, r2
   d85c4:	2400      	movs	r4, #0
  while (size--) {
   d85c6:	42bd      	cmp	r5, r7
   d85c8:	d00c      	beq.n	d85e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d85ca:	6833      	ldr	r3, [r6, #0]
   d85cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d85d0:	689b      	ldr	r3, [r3, #8]
   d85d2:	4630      	mov	r0, r6
   d85d4:	4798      	blx	r3
     if (chunk>=0)
   d85d6:	1e03      	subs	r3, r0, #0
   d85d8:	db01      	blt.n	d85de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d85da:	441c      	add	r4, r3
  while (size--) {
   d85dc:	e7f3      	b.n	d85c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d85de:	2c00      	cmp	r4, #0
   d85e0:	bf08      	it	eq
   d85e2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d85e4:	4620      	mov	r0, r4
   d85e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d85e8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d85e8:	b513      	push	{r0, r1, r4, lr}
   d85ea:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d85ec:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d85ee:	b159      	cbz	r1, d8608 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d85f0:	9101      	str	r1, [sp, #4]
   d85f2:	f004 fe3c 	bl	dd26e <strlen>
   d85f6:	6823      	ldr	r3, [r4, #0]
   d85f8:	9901      	ldr	r1, [sp, #4]
   d85fa:	68db      	ldr	r3, [r3, #12]
   d85fc:	4602      	mov	r2, r0
   d85fe:	4620      	mov	r0, r4
    }
   d8600:	b002      	add	sp, #8
   d8602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d8606:	4718      	bx	r3
    }
   d8608:	b002      	add	sp, #8
   d860a:	bd10      	pop	{r4, pc}

000d860c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d860c:	b508      	push	{r3, lr}
  return write(str);
   d860e:	f7ff ffeb 	bl	d85e8 <_ZN5Print5writeEPKc>
}
   d8612:	bd08      	pop	{r3, pc}

000d8614 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d8614:	6803      	ldr	r3, [r0, #0]
   d8616:	689b      	ldr	r3, [r3, #8]
   d8618:	4718      	bx	r3

000d861a <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d861a:	b508      	push	{r3, lr}
  return write(str);
   d861c:	f7ff ffe4 	bl	d85e8 <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   d8620:	bd08      	pop	{r3, pc}

000d8622 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d8622:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8624:	210d      	movs	r1, #13
{
   d8626:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8628:	f7ff fff4 	bl	d8614 <_ZN5Print5printEc>
  n += print('\n');
   d862c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d862e:	4604      	mov	r4, r0
  n += print('\n');
   d8630:	4628      	mov	r0, r5
   d8632:	f7ff ffef 	bl	d8614 <_ZN5Print5printEc>
  return n;
}
   d8636:	4420      	add	r0, r4
   d8638:	bd38      	pop	{r3, r4, r5, pc}

000d863a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d863a:	b538      	push	{r3, r4, r5, lr}
   d863c:	4605      	mov	r5, r0
  return write(str);
   d863e:	f7ff ffd3 	bl	d85e8 <_ZN5Print5writeEPKc>
   d8642:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d8644:	4628      	mov	r0, r5
   d8646:	f7ff ffec 	bl	d8622 <_ZN5Print7printlnEv>
  return n;
}
   d864a:	4420      	add	r0, r4
   d864c:	bd38      	pop	{r3, r4, r5, pc}

000d864e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d864e:	f7ff bff4 	b.w	d863a <_ZN5Print7printlnEPKc>

000d8652 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8652:	b530      	push	{r4, r5, lr}
   d8654:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8656:	2300      	movs	r3, #0
   d8658:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d865c:	2a01      	cmp	r2, #1
   d865e:	bf98      	it	ls
   d8660:	220a      	movls	r2, #10
   d8662:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d8664:	460d      	mov	r5, r1
   d8666:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d866a:	fb01 5312 	mls	r3, r1, r2, r5
   d866e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8672:	2b09      	cmp	r3, #9
   d8674:	bf94      	ite	ls
   d8676:	3330      	addls	r3, #48	; 0x30
   d8678:	3337      	addhi	r3, #55	; 0x37
   d867a:	b2db      	uxtb	r3, r3
  } while(n);
   d867c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d867e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d8682:	d9ef      	bls.n	d8664 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d8684:	4621      	mov	r1, r4
   d8686:	f7ff ffaf 	bl	d85e8 <_ZN5Print5writeEPKc>
}
   d868a:	b00b      	add	sp, #44	; 0x2c
   d868c:	bd30      	pop	{r4, r5, pc}

000d868e <_ZN5Print11printNumberEyh>:
 
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d868e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8692:	b093      	sub	sp, #76	; 0x4c
   d8694:	4619      	mov	r1, r3
   d8696:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d869a:	2d01      	cmp	r5, #1
  *str = '\0';
   d869c:	f04f 0300 	mov.w	r3, #0
  if (base < 2) base = 10;
   d86a0:	bf98      	it	ls
   d86a2:	250a      	movls	r5, #10
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d86a4:	4682      	mov	sl, r0
  *str = '\0';
   d86a6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   d86aa:	4610      	mov	r0, r2
  if (base < 2) base = 10;
   d86ac:	f10d 0b44 	add.w	fp, sp, #68	; 0x44

  do {
    decltype(n) m = n;
    n /= base;
   d86b0:	fa5f f885 	uxtb.w	r8, r5
   d86b4:	f04f 0900 	mov.w	r9, #0
   d86b8:	4642      	mov	r2, r8
   d86ba:	464b      	mov	r3, r9
   d86bc:	4606      	mov	r6, r0
   d86be:	460f      	mov	r7, r1
   d86c0:	f004 fbde 	bl	dce80 <__aeabi_uldivmod>
    char c = m - base * n;
   d86c4:	fb05 6410 	mls	r4, r5, r0, r6
   d86c8:	f004 04ff 	and.w	r4, r4, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d86cc:	2c09      	cmp	r4, #9
   d86ce:	bf94      	ite	ls
   d86d0:	3430      	addls	r4, #48	; 0x30
   d86d2:	3437      	addhi	r4, #55	; 0x37
  } while(n);
   d86d4:	454f      	cmp	r7, r9
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d86d6:	b2e4      	uxtb	r4, r4
  } while(n);
   d86d8:	bf08      	it	eq
   d86da:	4546      	cmpeq	r6, r8
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d86dc:	f80b 4d01 	strb.w	r4, [fp, #-1]!
  } while(n);
   d86e0:	d2ea      	bcs.n	d86b8 <_ZN5Print11printNumberEyh+0x2a>

  return write(str);
   d86e2:	4659      	mov	r1, fp
   d86e4:	4650      	mov	r0, sl
   d86e6:	f7ff ff7f 	bl	d85e8 <_ZN5Print5writeEPKc>
}
   d86ea:	b013      	add	sp, #76	; 0x4c
   d86ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d86f0 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
   d86f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d86f4:	ec55 4b10 	vmov	r4, r5, d0
   d86f8:	4606      	mov	r6, r0
   d86fa:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d86fc:	ee10 2a10 	vmov	r2, s0
   d8700:	ee10 0a10 	vmov	r0, s0
   d8704:	462b      	mov	r3, r5
   d8706:	4629      	mov	r1, r5
   d8708:	f004 f9ae 	bl	dca68 <__aeabi_dcmpun>
   d870c:	b140      	cbz	r0, d8720 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d870e:	4953      	ldr	r1, [pc, #332]	; (d885c <_ZN5Print10printFloatEdh+0x16c>)
   d8710:	4630      	mov	r0, r6
   d8712:	f7ff ff69 	bl	d85e8 <_ZN5Print5writeEPKc>
   d8716:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d8718:	4650      	mov	r0, sl
   d871a:	b003      	add	sp, #12
   d871c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d8720:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d8724:	4b4e      	ldr	r3, [pc, #312]	; (d8860 <_ZN5Print10printFloatEdh+0x170>)
   d8726:	f04f 32ff 	mov.w	r2, #4294967295
   d872a:	4620      	mov	r0, r4
   d872c:	4649      	mov	r1, r9
   d872e:	f004 f99b 	bl	dca68 <__aeabi_dcmpun>
   d8732:	b948      	cbnz	r0, d8748 <_ZN5Print10printFloatEdh+0x58>
   d8734:	4b4a      	ldr	r3, [pc, #296]	; (d8860 <_ZN5Print10printFloatEdh+0x170>)
   d8736:	f04f 32ff 	mov.w	r2, #4294967295
   d873a:	4620      	mov	r0, r4
   d873c:	4649      	mov	r1, r9
   d873e:	f004 f975 	bl	dca2c <__aeabi_dcmple>
   d8742:	b908      	cbnz	r0, d8748 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d8744:	4947      	ldr	r1, [pc, #284]	; (d8864 <_ZN5Print10printFloatEdh+0x174>)
   d8746:	e7e3      	b.n	d8710 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d8748:	4b47      	ldr	r3, [pc, #284]	; (d8868 <_ZN5Print10printFloatEdh+0x178>)
   d874a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d874e:	4620      	mov	r0, r4
   d8750:	4629      	mov	r1, r5
   d8752:	f004 f97f 	bl	dca54 <__aeabi_dcmpgt>
   d8756:	b108      	cbz	r0, d875c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d8758:	4944      	ldr	r1, [pc, #272]	; (d886c <_ZN5Print10printFloatEdh+0x17c>)
   d875a:	e7d9      	b.n	d8710 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d875c:	4b44      	ldr	r3, [pc, #272]	; (d8870 <_ZN5Print10printFloatEdh+0x180>)
   d875e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8762:	4620      	mov	r0, r4
   d8764:	4629      	mov	r1, r5
   d8766:	f004 f957 	bl	dca18 <__aeabi_dcmplt>
   d876a:	2800      	cmp	r0, #0
   d876c:	d1f4      	bne.n	d8758 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d876e:	2200      	movs	r2, #0
   d8770:	2300      	movs	r3, #0
   d8772:	4620      	mov	r0, r4
   d8774:	4629      	mov	r1, r5
   d8776:	f004 f94f 	bl	dca18 <__aeabi_dcmplt>
   d877a:	b1d0      	cbz	r0, d87b2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d877c:	212d      	movs	r1, #45	; 0x2d
   d877e:	4630      	mov	r0, r6
   d8780:	f7ff ff48 	bl	d8614 <_ZN5Print5printEc>
     number = -number;
   d8784:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d8788:	4682      	mov	sl, r0
     number = -number;
   d878a:	461d      	mov	r5, r3
  double rounding = 0.5;
   d878c:	4939      	ldr	r1, [pc, #228]	; (d8874 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d878e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d887c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d8792:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d8796:	2000      	movs	r0, #0
    rounding /= 10.0;
   d8798:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d879c:	fa5f f38b 	uxtb.w	r3, fp
   d87a0:	429f      	cmp	r7, r3
   d87a2:	d908      	bls.n	d87b6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d87a4:	4642      	mov	r2, r8
   d87a6:	464b      	mov	r3, r9
   d87a8:	f003 ffee 	bl	dc788 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d87ac:	f10b 0b01 	add.w	fp, fp, #1
   d87b0:	e7f4      	b.n	d879c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d87b2:	4682      	mov	sl, r0
   d87b4:	e7ea      	b.n	d878c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d87b6:	4622      	mov	r2, r4
   d87b8:	462b      	mov	r3, r5
   d87ba:	f003 fd05 	bl	dc1c8 <__adddf3>
   d87be:	460d      	mov	r5, r1
   d87c0:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d87c2:	f004 f98f 	bl	dcae4 <__aeabi_d2uiz>
   d87c6:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d87c8:	f003 fe3a 	bl	dc440 <__aeabi_ui2d>
   d87cc:	4602      	mov	r2, r0
   d87ce:	460b      	mov	r3, r1
   d87d0:	4620      	mov	r0, r4
   d87d2:	4629      	mov	r1, r5
   d87d4:	f003 fcf6 	bl	dc1c4 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d87d8:	220a      	movs	r2, #10
   d87da:	4604      	mov	r4, r0
   d87dc:	460d      	mov	r5, r1
   d87de:	4630      	mov	r0, r6
   d87e0:	4641      	mov	r1, r8
   d87e2:	f7ff ff36 	bl	d8652 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d87e6:	4482      	add	sl, r0
  if (digits > 0) {
   d87e8:	b127      	cbz	r7, d87f4 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d87ea:	4923      	ldr	r1, [pc, #140]	; (d8878 <_ZN5Print10printFloatEdh+0x188>)
   d87ec:	4630      	mov	r0, r6
   d87ee:	f7ff fefb 	bl	d85e8 <_ZN5Print5writeEPKc>
    n += print(".");
   d87f2:	4482      	add	sl, r0
    remainder *= 10.0;
   d87f4:	f8df 9084 	ldr.w	r9, [pc, #132]	; d887c <_ZN5Print10printFloatEdh+0x18c>
   d87f8:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d87fc:	3f01      	subs	r7, #1
   d87fe:	b2ff      	uxtb	r7, r7
   d8800:	2fff      	cmp	r7, #255	; 0xff
   d8802:	d089      	beq.n	d8718 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d8804:	4642      	mov	r2, r8
   d8806:	464b      	mov	r3, r9
   d8808:	4620      	mov	r0, r4
   d880a:	4629      	mov	r1, r5
   d880c:	f003 fe92 	bl	dc534 <__aeabi_dmul>
   d8810:	4604      	mov	r4, r0
   d8812:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d8814:	f004 f93e 	bl	dca94 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d8818:	f1b0 0b00 	subs.w	fp, r0, #0
   d881c:	da1a      	bge.n	d8854 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d881e:	212d      	movs	r1, #45	; 0x2d
   d8820:	4630      	mov	r0, r6
   d8822:	f7ff fef7 	bl	d8614 <_ZN5Print5printEc>
            val = -n;
   d8826:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d882a:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d882c:	220a      	movs	r2, #10
   d882e:	4630      	mov	r0, r6
   d8830:	9301      	str	r3, [sp, #4]
   d8832:	f7ff ff0e 	bl	d8652 <_ZN5Print11printNumberEmh>
   d8836:	9b01      	ldr	r3, [sp, #4]
   d8838:	4418      	add	r0, r3
    n += print(toPrint);
   d883a:	4482      	add	sl, r0
    remainder -= toPrint;
   d883c:	4658      	mov	r0, fp
   d883e:	f003 fe0f 	bl	dc460 <__aeabi_i2d>
   d8842:	4602      	mov	r2, r0
   d8844:	460b      	mov	r3, r1
   d8846:	4620      	mov	r0, r4
   d8848:	4629      	mov	r1, r5
   d884a:	f003 fcbb 	bl	dc1c4 <__aeabi_dsub>
   d884e:	4604      	mov	r4, r0
   d8850:	460d      	mov	r5, r1
  while (digits-- > 0)
   d8852:	e7d3      	b.n	d87fc <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d8854:	4659      	mov	r1, fp
        size_t t = 0;
   d8856:	2300      	movs	r3, #0
   d8858:	e7e8      	b.n	d882c <_ZN5Print10printFloatEdh+0x13c>
   d885a:	bf00      	nop
   d885c:	000de36c 	.word	0x000de36c
   d8860:	7fefffff 	.word	0x7fefffff
   d8864:	000de370 	.word	0x000de370
   d8868:	41efffff 	.word	0x41efffff
   d886c:	000de374 	.word	0x000de374
   d8870:	c1efffff 	.word	0xc1efffff
   d8874:	3fe00000 	.word	0x3fe00000
   d8878:	000dd94d 	.word	0x000dd94d
   d887c:	40240000 	.word	0x40240000

000d8880 <_ZN5Print5printEfi>:
{
   d8880:	b538      	push	{r3, r4, r5, lr}
   d8882:	4604      	mov	r4, r0
   d8884:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d8888:	b2cd      	uxtb	r5, r1
   d888a:	f003 fdfb 	bl	dc484 <__aeabi_f2d>
   d888e:	ec41 0b10 	vmov	d0, r0, r1
   d8892:	4629      	mov	r1, r5
   d8894:	4620      	mov	r0, r4
}
   d8896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d889a:	f7ff bf29 	b.w	d86f0 <_ZN5Print10printFloatEdh>

000d889e <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   d889e:	b2c9      	uxtb	r1, r1
   d88a0:	f7ff bf26 	b.w	d86f0 <_ZN5Print10printFloatEdh>

000d88a4 <_ZN5Print7printlnEdi>:
{
   d88a4:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d88a6:	b2c9      	uxtb	r1, r1
{
   d88a8:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d88aa:	f7ff ff21 	bl	d86f0 <_ZN5Print10printFloatEdh>
   d88ae:	4604      	mov	r4, r0
  n += println();
   d88b0:	4628      	mov	r0, r5
   d88b2:	f7ff feb6 	bl	d8622 <_ZN5Print7printlnEv>
}
   d88b6:	4420      	add	r0, r4
   d88b8:	bd38      	pop	{r3, r4, r5, pc}

000d88ba <_ZN5Print7printlnEfi>:
{
   d88ba:	b538      	push	{r3, r4, r5, lr}
   d88bc:	4604      	mov	r4, r0
   d88be:	ee10 0a10 	vmov	r0, s0
   d88c2:	460d      	mov	r5, r1
    return println((double)num, digits);
   d88c4:	f003 fdde 	bl	dc484 <__aeabi_f2d>
   d88c8:	ec41 0b10 	vmov	d0, r0, r1
   d88cc:	4629      	mov	r1, r5
   d88ce:	4620      	mov	r0, r4
}
   d88d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d88d4:	f7ff bfe6 	b.w	d88a4 <_ZN5Print7printlnEdi>

000d88d8 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d88d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d88dc:	b086      	sub	sp, #24
   d88de:	af00      	add	r7, sp, #0
   d88e0:	4605      	mov	r5, r0
   d88e2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d88e4:	1d38      	adds	r0, r7, #4
   d88e6:	2114      	movs	r1, #20
{
   d88e8:	4614      	mov	r4, r2
    va_copy(args2, args);
   d88ea:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d88ec:	f7ff fbf6 	bl	d80dc <vsnprintf>

    if (n<bufsize)
   d88f0:	2813      	cmp	r0, #19
   d88f2:	d80e      	bhi.n	d8912 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d88f4:	1d39      	adds	r1, r7, #4
   d88f6:	4628      	mov	r0, r5
   d88f8:	f7ff fe76 	bl	d85e8 <_ZN5Print5writeEPKc>
   d88fc:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d88fe:	b11e      	cbz	r6, d8908 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d8900:	4628      	mov	r0, r5
   d8902:	f7ff fe8e 	bl	d8622 <_ZN5Print7printlnEv>
   d8906:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d8908:	4620      	mov	r0, r4
   d890a:	3718      	adds	r7, #24
   d890c:	46bd      	mov	sp, r7
   d890e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d8912:	f100 0308 	add.w	r3, r0, #8
   d8916:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d891a:	46e8      	mov	r8, sp
        char bigger[n+1];
   d891c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d8920:	4622      	mov	r2, r4
   d8922:	1c41      	adds	r1, r0, #1
   d8924:	683b      	ldr	r3, [r7, #0]
   d8926:	4668      	mov	r0, sp
   d8928:	f7ff fbd8 	bl	d80dc <vsnprintf>
  return write(str);
   d892c:	4669      	mov	r1, sp
   d892e:	4628      	mov	r0, r5
   d8930:	f7ff fe5a 	bl	d85e8 <_ZN5Print5writeEPKc>
   d8934:	4604      	mov	r4, r0
   d8936:	46c5      	mov	sp, r8
   d8938:	e7e1      	b.n	d88fe <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000d893c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d893c:	4b01      	ldr	r3, [pc, #4]	; (d8944 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d893e:	4a02      	ldr	r2, [pc, #8]	; (d8948 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8940:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8942:	4770      	bx	lr
   d8944:	2003e5a0 	.word	0x2003e5a0
   d8948:	000de378 	.word	0x000de378

000d894c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d894c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d894e:	2000      	movs	r0, #0
   d8950:	f7ff fb9c 	bl	d808c <spark_sync_time_pending>
   d8954:	b128      	cbz	r0, d8962 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8956:	f7ff fb89 	bl	d806c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d895a:	f080 0001 	eor.w	r0, r0, #1
   d895e:	b2c0      	uxtb	r0, r0
    }
   d8960:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8962:	2001      	movs	r0, #1
   d8964:	e7fc      	b.n	d8960 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d8966 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8966:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d8968:	2000      	movs	r0, #0
   d896a:	f7ff f973 	bl	d7c54 <hal_rtc_time_is_valid>
    if (rtcstate)
   d896e:	4604      	mov	r4, r0
   d8970:	b9a0      	cbnz	r0, d899c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8972:	f7ff facf 	bl	d7f14 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8976:	2801      	cmp	r0, #1
   d8978:	d110      	bne.n	d899c <_ZN9TimeClass7isValidEv+0x36>
   d897a:	4620      	mov	r0, r4
   d897c:	f7ff faf2 	bl	d7f64 <system_thread_get_state>
   d8980:	b960      	cbnz	r0, d899c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8982:	f7ff ffe3 	bl	d894c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8986:	b910      	cbnz	r0, d898e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d8988:	f7ff fb68 	bl	d805c <spark_process>
        while (_while() && !_condition()) {
   d898c:	e7f9      	b.n	d8982 <_ZN9TimeClass7isValidEv+0x1c>
   d898e:	f7ff ffdd 	bl	d894c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d8992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d8996:	2000      	movs	r0, #0
   d8998:	f7ff b95c 	b.w	d7c54 <hal_rtc_time_is_valid>
}
   d899c:	4620      	mov	r0, r4
   d899e:	bd10      	pop	{r4, pc}

000d89a0 <_ZN9TimeClass3nowEv>:
{
   d89a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d89a2:	f7ff ffe0 	bl	d8966 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d89a6:	2210      	movs	r2, #16
   d89a8:	2100      	movs	r1, #0
   d89aa:	4668      	mov	r0, sp
   d89ac:	f004 fc16 	bl	dd1dc <memset>
    hal_rtc_get_time(&tv, nullptr);
   d89b0:	2100      	movs	r1, #0
   d89b2:	4668      	mov	r0, sp
   d89b4:	f7ff f956 	bl	d7c64 <hal_rtc_get_time>
}
   d89b8:	9800      	ldr	r0, [sp, #0]
   d89ba:	b005      	add	sp, #20
   d89bc:	f85d fb04 	ldr.w	pc, [sp], #4

000d89c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d89c0:	4b02      	ldr	r3, [pc, #8]	; (d89cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d89c2:	681a      	ldr	r2, [r3, #0]
   d89c4:	4b02      	ldr	r3, [pc, #8]	; (d89d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d89c6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d89c8:	4770      	bx	lr
   d89ca:	bf00      	nop
   d89cc:	2003e3d8 	.word	0x2003e3d8
   d89d0:	2003e5a4 	.word	0x2003e5a4

000d89d4 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d89d4:	428a      	cmp	r2, r1
{
   d89d6:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d89d8:	d007      	beq.n	d89ea <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d89da:	9c02      	ldr	r4, [sp, #8]
   d89dc:	1a40      	subs	r0, r0, r1
   d89de:	1ae4      	subs	r4, r4, r3
   d89e0:	4360      	muls	r0, r4
   d89e2:	1a52      	subs	r2, r2, r1
   d89e4:	fb90 f0f2 	sdiv	r0, r0, r2
   d89e8:	4418      	add	r0, r3
}
   d89ea:	bd10      	pop	{r4, pc}

000d89ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d89ec:	2100      	movs	r1, #0
   d89ee:	f7ff baa1 	b.w	d7f34 <system_delay_ms>

000d89f2 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d89f2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d89f4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d89f6:	4604      	mov	r4, r0
      if (_M_manager)
   d89f8:	b113      	cbz	r3, d8a00 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d89fa:	2203      	movs	r2, #3
   d89fc:	4601      	mov	r1, r0
   d89fe:	4798      	blx	r3
    }
   d8a00:	4620      	mov	r0, r4
   d8a02:	bd10      	pop	{r4, pc}

000d8a04 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d8a04:	b513      	push	{r0, r1, r4, lr}
   d8a06:	460b      	mov	r3, r1
   d8a08:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8a0a:	e9d0 0100 	ldrd	r0, r1, [r0]
   d8a0e:	466c      	mov	r4, sp
   d8a10:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8a14:	e893 0003 	ldmia.w	r3, {r0, r1}
   d8a18:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8a1c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d8a20:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d8a24:	b002      	add	sp, #8
   d8a26:	bd10      	pop	{r4, pc}

000d8a28 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d8a28:	4b01      	ldr	r3, [pc, #4]	; (d8a30 <_GLOBAL__sub_I_RGB+0x8>)
   d8a2a:	2200      	movs	r2, #0
   d8a2c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d8a2e:	4770      	bx	lr
   d8a30:	2003e5a8 	.word	0x2003e5a8

000d8a34 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8a34:	4b01      	ldr	r3, [pc, #4]	; (d8a3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d8a36:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8a38:	4770      	bx	lr
   d8a3a:	bf00      	nop
   d8a3c:	2003e3e0 	.word	0x2003e3e0

000d8a40 <serialEventRun>:
{
   d8a40:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8a42:	4b0b      	ldr	r3, [pc, #44]	; (d8a70 <serialEventRun+0x30>)
   d8a44:	b143      	cbz	r3, d8a58 <serialEventRun+0x18>
   d8a46:	f000 fc03 	bl	d9250 <_Z16_fetch_usbserialv>
   d8a4a:	6803      	ldr	r3, [r0, #0]
   d8a4c:	691b      	ldr	r3, [r3, #16]
   d8a4e:	4798      	blx	r3
   d8a50:	2800      	cmp	r0, #0
   d8a52:	dd01      	ble.n	d8a58 <serialEventRun+0x18>
        serialEvent();
   d8a54:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8a58:	4b06      	ldr	r3, [pc, #24]	; (d8a74 <serialEventRun+0x34>)
   d8a5a:	b143      	cbz	r3, d8a6e <serialEventRun+0x2e>
   d8a5c:	f000 fcea 	bl	d9434 <_Z22__fetch_global_Serial1v>
   d8a60:	6803      	ldr	r3, [r0, #0]
   d8a62:	691b      	ldr	r3, [r3, #16]
   d8a64:	4798      	blx	r3
   d8a66:	2800      	cmp	r0, #0
   d8a68:	dd01      	ble.n	d8a6e <serialEventRun+0x2e>
        serialEvent1();
   d8a6a:	f3af 8000 	nop.w
}
   d8a6e:	bd08      	pop	{r3, pc}
	...

000d8a78 <_post_loop>:
{
   d8a78:	b508      	push	{r3, lr}
	serialEventRun();
   d8a7a:	f7ff ffe1 	bl	d8a40 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8a7e:	f7ff f8c9 	bl	d7c14 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8a82:	4b01      	ldr	r3, [pc, #4]	; (d8a88 <_post_loop+0x10>)
   d8a84:	6018      	str	r0, [r3, #0]
}
   d8a86:	bd08      	pop	{r3, pc}
   d8a88:	2003e730 	.word	0x2003e730

000d8a8c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8a8c:	4805      	ldr	r0, [pc, #20]	; (d8aa4 <_Z33system_initialize_user_backup_ramv+0x18>)
   d8a8e:	4a06      	ldr	r2, [pc, #24]	; (d8aa8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d8a90:	4906      	ldr	r1, [pc, #24]	; (d8aac <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d8a92:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8a94:	1a12      	subs	r2, r2, r0
   d8a96:	f004 fb93 	bl	dd1c0 <memcpy>
    __backup_sram_signature = signature;
   d8a9a:	4b05      	ldr	r3, [pc, #20]	; (d8ab0 <_Z33system_initialize_user_backup_ramv+0x24>)
   d8a9c:	4a05      	ldr	r2, [pc, #20]	; (d8ab4 <_Z33system_initialize_user_backup_ramv+0x28>)
   d8a9e:	601a      	str	r2, [r3, #0]
}
   d8aa0:	bd08      	pop	{r3, pc}
   d8aa2:	bf00      	nop
   d8aa4:	2003f400 	.word	0x2003f400
   d8aa8:	2003f404 	.word	0x2003f404
   d8aac:	000de998 	.word	0x000de998
   d8ab0:	2003f400 	.word	0x2003f400
   d8ab4:	9a271c1e 	.word	0x9a271c1e

000d8ab8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8ab8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8aba:	2300      	movs	r3, #0
   d8abc:	9300      	str	r3, [sp, #0]
   d8abe:	461a      	mov	r2, r3
   d8ac0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8ac4:	f7ff fa60 	bl	d7f88 <system_ctrl_set_result>
}
   d8ac8:	b003      	add	sp, #12
   d8aca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8ad0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8ad0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8ad2:	8843      	ldrh	r3, [r0, #2]
   d8ad4:	2b0a      	cmp	r3, #10
   d8ad6:	d008      	beq.n	d8aea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8ad8:	2b50      	cmp	r3, #80	; 0x50
   d8ada:	d10b      	bne.n	d8af4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8adc:	4b09      	ldr	r3, [pc, #36]	; (d8b04 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8ade:	681b      	ldr	r3, [r3, #0]
   d8ae0:	b14b      	cbz	r3, d8af6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d8ae2:	b003      	add	sp, #12
   d8ae4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8ae8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d8aea:	f7ff ffe5 	bl	d8ab8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d8aee:	b003      	add	sp, #12
   d8af0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8af4:	2300      	movs	r3, #0
   d8af6:	9300      	str	r3, [sp, #0]
   d8af8:	461a      	mov	r2, r3
   d8afa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8afe:	f7ff fa43 	bl	d7f88 <system_ctrl_set_result>
}
   d8b02:	e7f4      	b.n	d8aee <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8b04:	2003e5bc 	.word	0x2003e5bc

000d8b08 <module_user_init_hook>:
{
   d8b08:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8b0a:	4812      	ldr	r0, [pc, #72]	; (d8b54 <module_user_init_hook+0x4c>)
   d8b0c:	2100      	movs	r1, #0
   d8b0e:	f7ff fb05 	bl	d811c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d8b12:	4b11      	ldr	r3, [pc, #68]	; (d8b58 <module_user_init_hook+0x50>)
   d8b14:	681a      	ldr	r2, [r3, #0]
   d8b16:	4b11      	ldr	r3, [pc, #68]	; (d8b5c <module_user_init_hook+0x54>)
   d8b18:	429a      	cmp	r2, r3
   d8b1a:	4b11      	ldr	r3, [pc, #68]	; (d8b60 <module_user_init_hook+0x58>)
   d8b1c:	bf0c      	ite	eq
   d8b1e:	2201      	moveq	r2, #1
   d8b20:	2200      	movne	r2, #0
   d8b22:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8b24:	d001      	beq.n	d8b2a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d8b26:	f7ff ffb1 	bl	d8a8c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8b2a:	f7ff f863 	bl	d7bf4 <HAL_RNG_GetRandomNumber>
   d8b2e:	4604      	mov	r4, r0
    srand(seed);
   d8b30:	f004 fb5c 	bl	dd1ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8b34:	4b0b      	ldr	r3, [pc, #44]	; (d8b64 <module_user_init_hook+0x5c>)
   d8b36:	b113      	cbz	r3, d8b3e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d8b38:	4620      	mov	r0, r4
   d8b3a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8b3e:	2100      	movs	r1, #0
   d8b40:	4808      	ldr	r0, [pc, #32]	; (d8b64 <module_user_init_hook+0x5c>)
   d8b42:	f7ff faab 	bl	d809c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8b4a:	4807      	ldr	r0, [pc, #28]	; (d8b68 <module_user_init_hook+0x60>)
   d8b4c:	2100      	movs	r1, #0
   d8b4e:	f7ff ba11 	b.w	d7f74 <system_ctrl_set_app_request_handler>
   d8b52:	bf00      	nop
   d8b54:	000d8a35 	.word	0x000d8a35
   d8b58:	2003f400 	.word	0x2003f400
   d8b5c:	9a271c1e 	.word	0x9a271c1e
   d8b60:	2003e5b8 	.word	0x2003e5b8
   d8b64:	00000000 	.word	0x00000000
   d8b68:	000d8ad1 	.word	0x000d8ad1

000d8b6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8b6c:	4770      	bx	lr

000d8b6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8b6e:	2000      	movs	r0, #0
   d8b70:	4770      	bx	lr

000d8b72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8b72:	b510      	push	{r4, lr}
   d8b74:	2110      	movs	r1, #16
   d8b76:	4604      	mov	r4, r0
   d8b78:	f000 feaa 	bl	d98d0 <_ZdlPvj>
   d8b7c:	4620      	mov	r0, r4
   d8b7e:	bd10      	pop	{r4, pc}

000d8b80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8b80:	b508      	push	{r3, lr}
      { delete this; }
   d8b82:	f7ff fff6 	bl	d8b72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8b86:	bd08      	pop	{r3, pc}

000d8b88 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8b88:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8b8a:	2200      	movs	r2, #0
   d8b8c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8b90:	6002      	str	r2, [r0, #0]
   d8b92:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8b94:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b96:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8b98:	680c      	ldr	r4, [r1, #0]
   d8b9a:	8085      	strh	r5, [r0, #4]
   d8b9c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b9e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8ba0:	bd30      	pop	{r4, r5, pc}

000d8ba2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8ba2:	b510      	push	{r4, lr}
   d8ba4:	4604      	mov	r4, r0
    free((void*)msg_);
   d8ba6:	6800      	ldr	r0, [r0, #0]
   d8ba8:	f7ff fa88 	bl	d80bc <free>
}
   d8bac:	4620      	mov	r0, r4
   d8bae:	bd10      	pop	{r4, pc}

000d8bb0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8bb0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8bb2:	68c4      	ldr	r4, [r0, #12]
   d8bb4:	b1f4      	cbz	r4, d8bf4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d8bb6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8bb8:	2b02      	cmp	r3, #2
   d8bba:	d103      	bne.n	d8bc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8bbc:	f104 000c 	add.w	r0, r4, #12
   d8bc0:	f7ff ffef 	bl	d8ba2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8bc4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8bc6:	b135      	cbz	r5, d8bd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8bc8:	4628      	mov	r0, r5
   d8bca:	f7ff ff12 	bl	d89f2 <_ZNSt14_Function_baseD1Ev>
   d8bce:	2110      	movs	r1, #16
   d8bd0:	4628      	mov	r0, r5
   d8bd2:	f000 fe7d 	bl	d98d0 <_ZdlPvj>
   d8bd6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8bd8:	b135      	cbz	r5, d8be8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8bda:	4628      	mov	r0, r5
   d8bdc:	f7ff ff09 	bl	d89f2 <_ZNSt14_Function_baseD1Ev>
   d8be0:	2110      	movs	r1, #16
   d8be2:	4628      	mov	r0, r5
   d8be4:	f000 fe74 	bl	d98d0 <_ZdlPvj>
   d8be8:	4620      	mov	r0, r4
   d8bea:	2114      	movs	r1, #20
   d8bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8bf0:	f000 be6e 	b.w	d98d0 <_ZdlPvj>
   d8bf4:	bd38      	pop	{r3, r4, r5, pc}

000d8bf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8bf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8bf8:	460e      	mov	r6, r1
   d8bfa:	4604      	mov	r4, r0
   d8bfc:	f856 3b04 	ldr.w	r3, [r6], #4
   d8c00:	9300      	str	r3, [sp, #0]
   d8c02:	460d      	mov	r5, r1
   d8c04:	a801      	add	r0, sp, #4
   d8c06:	4631      	mov	r1, r6
   d8c08:	f7ff fcbd 	bl	d8586 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8c0c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8c0e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8c10:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8c12:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8c14:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8c16:	2300      	movs	r3, #0
   d8c18:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8c1a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8c1c:	f7ff fcba 	bl	d8594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8c20:	4630      	mov	r0, r6
   d8c22:	f7ff fcb7 	bl	d8594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8c26:	4628      	mov	r0, r5
   d8c28:	2108      	movs	r1, #8
   d8c2a:	f000 fe51 	bl	d98d0 <_ZdlPvj>
        return p;
    }
   d8c2e:	4620      	mov	r0, r4
   d8c30:	b002      	add	sp, #8
   d8c32:	bd70      	pop	{r4, r5, r6, pc}

000d8c34 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8c34:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8c36:	b510      	push	{r4, lr}
      if (_M_empty())
   d8c38:	b90a      	cbnz	r2, d8c3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8c3a:	f000 fe4d 	bl	d98d8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d8c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8c42:	68c3      	ldr	r3, [r0, #12]
   d8c44:	4718      	bx	r3

000d8c46 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8c46:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8c48:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8c4a:	f100 0110 	add.w	r1, r0, #16
   d8c4e:	f7ff fff1 	bl	d8c34 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8c52:	bd08      	pop	{r3, pc}

000d8c54 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8c54:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8c56:	b510      	push	{r4, lr}
      if (_M_empty())
   d8c58:	b90a      	cbnz	r2, d8c5e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8c5a:	f000 fe3d 	bl	d98d8 <_ZSt25__throw_bad_function_callv>
    }
   d8c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8c62:	68c3      	ldr	r3, [r0, #12]
   d8c64:	4718      	bx	r3

000d8c66 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8c66:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8c68:	6800      	ldr	r0, [r0, #0]
   d8c6a:	f100 0110 	add.w	r1, r0, #16
   d8c6e:	f7ff fff1 	bl	d8c54 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8c72:	bd08      	pop	{r3, pc}

000d8c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8c74:	b538      	push	{r3, r4, r5, lr}
   d8c76:	2300      	movs	r3, #0
   d8c78:	4604      	mov	r4, r0
   d8c7a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8c7c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8c7e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8c80:	f7fb fa09 	bl	d4096 <_Znwj>
   d8c84:	b128      	cbz	r0, d8c92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8c86:	2301      	movs	r3, #1
   d8c88:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8c8c:	4b02      	ldr	r3, [pc, #8]	; (d8c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8c8e:	6003      	str	r3, [r0, #0]
   d8c90:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8c92:	6020      	str	r0, [r4, #0]
	}
   d8c94:	4620      	mov	r0, r4
   d8c96:	bd38      	pop	{r3, r4, r5, pc}
   d8c98:	000de3a0 	.word	0x000de3a0

000d8c9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8c9c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8c9e:	2300      	movs	r3, #0
   d8ca0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8ca2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8ca4:	4604      	mov	r4, r0
   d8ca6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8ca8:	b12b      	cbz	r3, d8cb6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8caa:	2202      	movs	r2, #2
   d8cac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8cae:	68eb      	ldr	r3, [r5, #12]
   d8cb0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8cb2:	68ab      	ldr	r3, [r5, #8]
   d8cb4:	60a3      	str	r3, [r4, #8]
    }
   d8cb6:	4620      	mov	r0, r4
   d8cb8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8cbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8cbe:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8cc0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8cc2:	4668      	mov	r0, sp
   d8cc4:	f7ff ff60 	bl	d8b88 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8cc8:	f04f 0302 	mov.w	r3, #2
   d8ccc:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8cd0:	2a00      	cmp	r2, #0
   d8cd2:	d103      	bne.n	d8cdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8cd4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8cd8:	2900      	cmp	r1, #0
   d8cda:	d1f7      	bne.n	d8ccc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8cdc:	d125      	bne.n	d8d2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d8cde:	f104 050c 	add.w	r5, r4, #12
   d8ce2:	4669      	mov	r1, sp
   d8ce4:	4628      	mov	r0, r5
   d8ce6:	f7ff ff4f 	bl	d8b88 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8cea:	f3bf 8f5b 	dmb	ish
   d8cee:	2301      	movs	r3, #1
   d8cf0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8cf2:	2000      	movs	r0, #0
   d8cf4:	f104 0308 	add.w	r3, r4, #8
   d8cf8:	f3bf 8f5b 	dmb	ish
   d8cfc:	e853 6f00 	ldrex	r6, [r3]
   d8d00:	e843 0200 	strex	r2, r0, [r3]
   d8d04:	2a00      	cmp	r2, #0
   d8d06:	d1f9      	bne.n	d8cfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8d08:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8d0c:	b16e      	cbz	r6, d8d2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d8d0e:	f7ff f919 	bl	d7f44 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8d12:	b178      	cbz	r0, d8d34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8d14:	4629      	mov	r1, r5
   d8d16:	4630      	mov	r0, r6
   d8d18:	f7ff ff8c 	bl	d8c34 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d8d1c:	4630      	mov	r0, r6
   d8d1e:	f7ff fe68 	bl	d89f2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8d22:	2110      	movs	r1, #16
   d8d24:	4630      	mov	r0, r6
   d8d26:	f000 fdd3 	bl	d98d0 <_ZdlPvj>
        p_->setError(std::move(error));
   d8d2a:	4668      	mov	r0, sp
   d8d2c:	f7ff ff39 	bl	d8ba2 <_ZN8particle5ErrorD1Ev>
    }
   d8d30:	b009      	add	sp, #36	; 0x24
   d8d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8d34:	4631      	mov	r1, r6
   d8d36:	a802      	add	r0, sp, #8
   d8d38:	f7ff ffb0 	bl	d8c9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8d3c:	68e0      	ldr	r0, [r4, #12]
   d8d3e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8d42:	b108      	cbz	r0, d8d48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d8d44:	f004 fa76 	bl	dd234 <strdup>
        type_(type) {
   d8d48:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8d4a:	2010      	movs	r0, #16
   d8d4c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8d50:	f7fb f9a1 	bl	d4096 <_Znwj>
   d8d54:	4605      	mov	r5, r0
   d8d56:	b1e8      	cbz	r0, d8d94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8d58:	2700      	movs	r7, #0
   d8d5a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8d5c:	2018      	movs	r0, #24
   d8d5e:	f7fb f99a 	bl	d4096 <_Znwj>
   d8d62:	4604      	mov	r4, r0
   d8d64:	b188      	cbz	r0, d8d8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8d66:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8d68:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8d6a:	a802      	add	r0, sp, #8
   d8d6c:	f7ff fe4a 	bl	d8a04 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8d70:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8d72:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8d74:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8d76:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8d78:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8d7a:	a906      	add	r1, sp, #24
   d8d7c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8d7e:	60e3      	str	r3, [r4, #12]
   d8d80:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8d84:	9205      	str	r2, [sp, #20]
   d8d86:	f7ff feff 	bl	d8b88 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8d8a:	4b08      	ldr	r3, [pc, #32]	; (d8dac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8d8c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8d8e:	4b08      	ldr	r3, [pc, #32]	; (d8db0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8d90:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8d92:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8d94:	a806      	add	r0, sp, #24
   d8d96:	f7ff ff04 	bl	d8ba2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8d9a:	a802      	add	r0, sp, #8
   d8d9c:	f7ff fe29 	bl	d89f2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8da0:	2200      	movs	r2, #0
   d8da2:	4629      	mov	r1, r5
   d8da4:	4803      	ldr	r0, [pc, #12]	; (d8db4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8da6:	f7ff f8d5 	bl	d7f54 <application_thread_invoke>
   d8daa:	e7b7      	b.n	d8d1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8dac:	000d8c47 	.word	0x000d8c47
   d8db0:	000d8edd 	.word	0x000d8edd
   d8db4:	000d9481 	.word	0x000d9481

000d8db8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8dbc:	b08a      	sub	sp, #40	; 0x28
   d8dbe:	4605      	mov	r5, r0
   d8dc0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8dc4:	460c      	mov	r4, r1
   d8dc6:	4617      	mov	r7, r2
   d8dc8:	4698      	mov	r8, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8dca:	f7ff f94f 	bl	d806c <spark_cloud_flag_connected>
   d8dce:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8dd0:	4682      	mov	sl, r0
   d8dd2:	bb38      	cbnz	r0, d8e24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8dd4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8dd8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8dda:	a905      	add	r1, sp, #20
   d8ddc:	4630      	mov	r0, r6
   d8dde:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8de2:	f7ff fed1 	bl	d8b88 <_ZN8particle5ErrorC1EOS0_>
   d8de6:	2014      	movs	r0, #20
   d8de8:	f7fb f955 	bl	d4096 <_Znwj>
   d8dec:	4604      	mov	r4, r0
   d8dee:	b148      	cbz	r0, d8e04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8df0:	2302      	movs	r3, #2
   d8df2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8df4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8df6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8dfa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8dfc:	4631      	mov	r1, r6
   d8dfe:	300c      	adds	r0, #12
   d8e00:	f7ff fec2 	bl	d8b88 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8e04:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8e06:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8e08:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8e0c:	f7ff ff32 	bl	d8c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8e10:	4630      	mov	r0, r6
   d8e12:	f7ff fec6 	bl	d8ba2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8e16:	a805      	add	r0, sp, #20
   d8e18:	f7ff fec3 	bl	d8ba2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d8e1c:	4628      	mov	r0, r5
   d8e1e:	b00a      	add	sp, #40	; 0x28
   d8e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8e24:	230c      	movs	r3, #12
   d8e26:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8e2a:	2014      	movs	r0, #20
   d8e2c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8e30:	9307      	str	r3, [sp, #28]
   d8e32:	f7fb f930 	bl	d4096 <_Znwj>
   d8e36:	4601      	mov	r1, r0
   d8e38:	b128      	cbz	r0, d8e46 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8e3a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8e3e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8e42:	f880 a001 	strb.w	sl, [r0, #1]
   d8e46:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8e48:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8e4a:	f7ff ff13 	bl	d8c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8e4e:	4b22      	ldr	r3, [pc, #136]	; (d8ed8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8e50:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8e52:	2008      	movs	r0, #8
   d8e54:	f7fb f91f 	bl	d4096 <_Znwj>
   d8e58:	4682      	mov	sl, r0
   d8e5a:	b128      	cbz	r0, d8e68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8e5c:	9b03      	ldr	r3, [sp, #12]
   d8e5e:	f840 3b04 	str.w	r3, [r0], #4
   d8e62:	a904      	add	r1, sp, #16
   d8e64:	f7ff fb8f 	bl	d8586 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8e68:	9600      	str	r6, [sp, #0]
   d8e6a:	fa5f f389 	uxtb.w	r3, r9
   d8e6e:	4642      	mov	r2, r8
   d8e70:	4639      	mov	r1, r7
   d8e72:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8e74:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8e78:	f7ff f900 	bl	d807c <spark_send_event>
   d8e7c:	b9b8      	cbnz	r0, d8eae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8e7e:	9b03      	ldr	r3, [sp, #12]
   d8e80:	785b      	ldrb	r3, [r3, #1]
   d8e82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8e86:	b993      	cbnz	r3, d8eae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8e88:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8e8c:	a905      	add	r1, sp, #20
   d8e8e:	a803      	add	r0, sp, #12
   d8e90:	9205      	str	r2, [sp, #20]
   d8e92:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8e96:	f7ff ff11 	bl	d8cbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8e9a:	a805      	add	r0, sp, #20
   d8e9c:	f7ff fe81 	bl	d8ba2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8ea0:	a805      	add	r0, sp, #20
   d8ea2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8ea4:	f7ff fea7 	bl	d8bf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8ea8:	a806      	add	r0, sp, #24
   d8eaa:	f7ff fb73 	bl	d8594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8eae:	9b03      	ldr	r3, [sp, #12]
   d8eb0:	9305      	str	r3, [sp, #20]
   d8eb2:	a904      	add	r1, sp, #16
   d8eb4:	a806      	add	r0, sp, #24
   d8eb6:	f7ff fb66 	bl	d8586 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8eba:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8ebc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8ebe:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8ec0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8ec2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8ec4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8ec6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8ec8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8eca:	f7ff fb63 	bl	d8594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8ece:	a804      	add	r0, sp, #16
   d8ed0:	f7ff fb60 	bl	d8594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8ed4:	e7a2      	b.n	d8e1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8ed6:	bf00      	nop
   d8ed8:	000d8fa1 	.word	0x000d8fa1

000d8edc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8edc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8ee0:	4605      	mov	r5, r0
	  switch (__op)
   d8ee2:	d007      	beq.n	d8ef4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8ee4:	2a03      	cmp	r2, #3
   d8ee6:	d018      	beq.n	d8f1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8ee8:	2a01      	cmp	r2, #1
   d8eea:	d101      	bne.n	d8ef0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8eec:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8eee:	6003      	str	r3, [r0, #0]
	}
   d8ef0:	2000      	movs	r0, #0
   d8ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8ef4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8ef6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8ef8:	f7fb f8cd 	bl	d4096 <_Znwj>
   d8efc:	4604      	mov	r4, r0
   d8efe:	b150      	cbz	r0, d8f16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8f00:	4631      	mov	r1, r6
   d8f02:	f7ff fecb 	bl	d8c9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8f06:	6930      	ldr	r0, [r6, #16]
   d8f08:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8f0c:	b108      	cbz	r0, d8f12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8f0e:	f004 f991 	bl	dd234 <strdup>
        type_(type) {
   d8f12:	6120      	str	r0, [r4, #16]
   d8f14:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8f16:	602c      	str	r4, [r5, #0]
	}
   d8f18:	e7ea      	b.n	d8ef0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8f1a:	6804      	ldr	r4, [r0, #0]
   d8f1c:	2c00      	cmp	r4, #0
   d8f1e:	d0e7      	beq.n	d8ef0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8f20:	f104 0010 	add.w	r0, r4, #16
   d8f24:	f7ff fe3d 	bl	d8ba2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8f28:	4620      	mov	r0, r4
   d8f2a:	f7ff fd62 	bl	d89f2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8f2e:	2118      	movs	r1, #24
   d8f30:	4620      	mov	r0, r4
   d8f32:	f000 fccd 	bl	d98d0 <_ZdlPvj>
   d8f36:	e7db      	b.n	d8ef0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8f38 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8f38:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8f3a:	2300      	movs	r3, #0
   d8f3c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8f3e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8f40:	4604      	mov	r4, r0
   d8f42:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8f44:	b12b      	cbz	r3, d8f52 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8f46:	2202      	movs	r2, #2
   d8f48:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8f4a:	68eb      	ldr	r3, [r5, #12]
   d8f4c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8f4e:	68ab      	ldr	r3, [r5, #8]
   d8f50:	60a3      	str	r3, [r4, #8]
    }
   d8f52:	4620      	mov	r0, r4
   d8f54:	bd38      	pop	{r3, r4, r5, pc}

000d8f56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8f56:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8f58:	b570      	push	{r4, r5, r6, lr}
   d8f5a:	4604      	mov	r4, r0
	  switch (__op)
   d8f5c:	d007      	beq.n	d8f6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8f5e:	2a03      	cmp	r2, #3
   d8f60:	d012      	beq.n	d8f88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8f62:	2a01      	cmp	r2, #1
   d8f64:	d101      	bne.n	d8f6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8f66:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8f68:	6003      	str	r3, [r0, #0]
	}
   d8f6a:	2000      	movs	r0, #0
   d8f6c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8f6e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8f70:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8f72:	f7fb f890 	bl	d4096 <_Znwj>
   d8f76:	4605      	mov	r5, r0
   d8f78:	b120      	cbz	r0, d8f84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8f7a:	4631      	mov	r1, r6
   d8f7c:	f7ff ffdc 	bl	d8f38 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8f80:	7c33      	ldrb	r3, [r6, #16]
   d8f82:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8f84:	6025      	str	r5, [r4, #0]
	}
   d8f86:	e7f0      	b.n	d8f6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8f88:	6804      	ldr	r4, [r0, #0]
   d8f8a:	2c00      	cmp	r4, #0
   d8f8c:	d0ed      	beq.n	d8f6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8f8e:	4620      	mov	r0, r4
   d8f90:	f7ff fd2f 	bl	d89f2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8f94:	2114      	movs	r1, #20
   d8f96:	4620      	mov	r0, r4
   d8f98:	f000 fc9a 	bl	d98d0 <_ZdlPvj>
   d8f9c:	e7e5      	b.n	d8f6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8fa0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8fa2:	b089      	sub	sp, #36	; 0x24
   d8fa4:	4604      	mov	r4, r0
   d8fa6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8fa8:	a801      	add	r0, sp, #4
   d8faa:	4611      	mov	r1, r2
   d8fac:	f7ff fe23 	bl	d8bf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8fb0:	b1a4      	cbz	r4, d8fdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8fb2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8fb4:	b11d      	cbz	r5, d8fbe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8fb6:	4628      	mov	r0, r5
   d8fb8:	f004 f93c 	bl	dd234 <strdup>
   d8fbc:	4605      	mov	r5, r0
   d8fbe:	a801      	add	r0, sp, #4
   d8fc0:	a903      	add	r1, sp, #12
        type_(type) {
   d8fc2:	9503      	str	r5, [sp, #12]
   d8fc4:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8fc8:	f7ff fe78 	bl	d8cbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8fcc:	a803      	add	r0, sp, #12
   d8fce:	f7ff fde8 	bl	d8ba2 <_ZN8particle5ErrorD1Ev>
   d8fd2:	a802      	add	r0, sp, #8
   d8fd4:	f7ff fade 	bl	d8594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8fd8:	b009      	add	sp, #36	; 0x24
   d8fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8fdc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8fde:	2301      	movs	r3, #1
   d8fe0:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8fe4:	2a00      	cmp	r2, #0
   d8fe6:	d103      	bne.n	d8ff0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8fe8:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8fec:	2900      	cmp	r1, #0
   d8fee:	d1f7      	bne.n	d8fe0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8ff0:	d1ef      	bne.n	d8fd2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8ff2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8ff4:	f3bf 8f5b 	dmb	ish
   d8ff8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8ffa:	1d2b      	adds	r3, r5, #4
   d8ffc:	f3bf 8f5b 	dmb	ish
   d9000:	e853 6f00 	ldrex	r6, [r3]
   d9004:	e843 4200 	strex	r2, r4, [r3]
   d9008:	2a00      	cmp	r2, #0
   d900a:	d1f9      	bne.n	d9000 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d900c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d9010:	2e00      	cmp	r6, #0
   d9012:	d0de      	beq.n	d8fd2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d9014:	4620      	mov	r0, r4
   d9016:	f7fe ff95 	bl	d7f44 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d901a:	4607      	mov	r7, r0
   d901c:	b160      	cbz	r0, d9038 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d901e:	f105 010c 	add.w	r1, r5, #12
   d9022:	4630      	mov	r0, r6
   d9024:	f7ff fe16 	bl	d8c54 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d9028:	4630      	mov	r0, r6
   d902a:	f7ff fce2 	bl	d89f2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d902e:	2110      	movs	r1, #16
   d9030:	4630      	mov	r0, r6
   d9032:	f000 fc4d 	bl	d98d0 <_ZdlPvj>
   d9036:	e7cc      	b.n	d8fd2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9038:	4631      	mov	r1, r6
   d903a:	a803      	add	r0, sp, #12
   d903c:	f7ff ff7c 	bl	d8f38 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9040:	7b2b      	ldrb	r3, [r5, #12]
   d9042:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d9046:	2010      	movs	r0, #16
   d9048:	f7fb f825 	bl	d4096 <_Znwj>
   d904c:	4605      	mov	r5, r0
   d904e:	b1d0      	cbz	r0, d9086 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d9050:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9052:	2014      	movs	r0, #20
   d9054:	f7fb f81f 	bl	d4096 <_Znwj>
   d9058:	4604      	mov	r4, r0
   d905a:	b178      	cbz	r0, d907c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d905c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d905e:	4601      	mov	r1, r0
   d9060:	a803      	add	r0, sp, #12
   d9062:	f7ff fccf 	bl	d8a04 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9066:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d9068:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d906a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d906c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d906e:	9205      	str	r2, [sp, #20]
   d9070:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9072:	60e3      	str	r3, [r4, #12]
   d9074:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d9078:	9206      	str	r2, [sp, #24]
   d907a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d907c:	4b06      	ldr	r3, [pc, #24]	; (d9098 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d907e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9080:	4b06      	ldr	r3, [pc, #24]	; (d909c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9082:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d9084:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d9086:	a803      	add	r0, sp, #12
   d9088:	f7ff fcb3 	bl	d89f2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d908c:	2200      	movs	r2, #0
   d908e:	4629      	mov	r1, r5
   d9090:	4803      	ldr	r0, [pc, #12]	; (d90a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d9092:	f7fe ff5f 	bl	d7f54 <application_thread_invoke>
   d9096:	e7c7      	b.n	d9028 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d9098:	000d8c67 	.word	0x000d8c67
   d909c:	000d8f57 	.word	0x000d8f57
   d90a0:	000d9481 	.word	0x000d9481

000d90a4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d90a4:	4770      	bx	lr

000d90a6 <_ZN9IPAddressD0Ev>:
   d90a6:	b510      	push	{r4, lr}
   d90a8:	2118      	movs	r1, #24
   d90aa:	4604      	mov	r4, r0
   d90ac:	f000 fc10 	bl	d98d0 <_ZdlPvj>
   d90b0:	4620      	mov	r0, r4
   d90b2:	bd10      	pop	{r4, pc}

000d90b4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d90b4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d90b6:	7d03      	ldrb	r3, [r0, #20]
   d90b8:	2b06      	cmp	r3, #6
{
   d90ba:	b08d      	sub	sp, #52	; 0x34
   d90bc:	460e      	mov	r6, r1
   d90be:	f100 0704 	add.w	r7, r0, #4
   d90c2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d90c6:	d012      	beq.n	d90ee <_ZNK9IPAddress7printToER5Print+0x3a>
   d90c8:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d90cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d90d0:	220a      	movs	r2, #10
   d90d2:	4630      	mov	r0, r6
   d90d4:	f7ff fabd 	bl	d8652 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d90d8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d90da:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d90dc:	d019      	beq.n	d9112 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d90de:	2c00      	cmp	r4, #0
   d90e0:	d0f4      	beq.n	d90cc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d90e2:	212e      	movs	r1, #46	; 0x2e
   d90e4:	4630      	mov	r0, r6
   d90e6:	f7ff fa95 	bl	d8614 <_ZN5Print5printEc>
   d90ea:	4404      	add	r4, r0
   d90ec:	e7ee      	b.n	d90cc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d90ee:	232f      	movs	r3, #47	; 0x2f
   d90f0:	466a      	mov	r2, sp
   d90f2:	4639      	mov	r1, r7
   d90f4:	200a      	movs	r0, #10
		buf[0] = 0;
   d90f6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d90fa:	f7fe fdcb 	bl	d7c94 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d90fe:	4668      	mov	r0, sp
   d9100:	f004 f8b5 	bl	dd26e <strlen>
   d9104:	6833      	ldr	r3, [r6, #0]
   d9106:	4602      	mov	r2, r0
   d9108:	68db      	ldr	r3, [r3, #12]
   d910a:	4669      	mov	r1, sp
   d910c:	4630      	mov	r0, r6
   d910e:	4798      	blx	r3
   d9110:	4604      	mov	r4, r0
    }
    return n;
}
   d9112:	4620      	mov	r0, r4
   d9114:	b00d      	add	sp, #52	; 0x34
   d9116:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9118 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d9118:	b510      	push	{r4, lr}
   d911a:	4b05      	ldr	r3, [pc, #20]	; (d9130 <_ZN9IPAddressC1Ev+0x18>)
   d911c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d911e:	2211      	movs	r2, #17
   d9120:	f840 3b04 	str.w	r3, [r0], #4
   d9124:	2100      	movs	r1, #0
   d9126:	f004 f859 	bl	dd1dc <memset>
}
   d912a:	4620      	mov	r0, r4
   d912c:	bd10      	pop	{r4, pc}
   d912e:	bf00      	nop
   d9130:	000de3bc 	.word	0x000de3bc

000d9134 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9134:	4603      	mov	r3, r0
   d9136:	4a07      	ldr	r2, [pc, #28]	; (d9154 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9138:	b510      	push	{r4, lr}
   d913a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d913e:	f101 0210 	add.w	r2, r1, #16
   d9142:	f851 4b04 	ldr.w	r4, [r1], #4
   d9146:	f843 4b04 	str.w	r4, [r3], #4
   d914a:	4291      	cmp	r1, r2
   d914c:	d1f9      	bne.n	d9142 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d914e:	780a      	ldrb	r2, [r1, #0]
   d9150:	701a      	strb	r2, [r3, #0]
}
   d9152:	bd10      	pop	{r4, pc}
   d9154:	000de3bc 	.word	0x000de3bc

000d9158 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d9158:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d915a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d915e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9162:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9166:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d916a:	2304      	movs	r3, #4
   d916c:	6041      	str	r1, [r0, #4]
   d916e:	7503      	strb	r3, [r0, #20]
}
   d9170:	bd10      	pop	{r4, pc}

000d9172 <_ZN9IPAddressaSEPKh>:
{
   d9172:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9174:	78cb      	ldrb	r3, [r1, #3]
   d9176:	9300      	str	r3, [sp, #0]
   d9178:	788b      	ldrb	r3, [r1, #2]
   d917a:	784a      	ldrb	r2, [r1, #1]
   d917c:	7809      	ldrb	r1, [r1, #0]
   d917e:	f7ff ffeb 	bl	d9158 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d9182:	b002      	add	sp, #8
   d9184:	bd10      	pop	{r4, pc}

000d9186 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9186:	7441      	strb	r1, [r0, #17]
}
   d9188:	4770      	bx	lr

000d918a <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d918a:	4770      	bx	lr

000d918c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d918c:	4770      	bx	lr

000d918e <_ZN9USBSerial4readEv>:
{
   d918e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9190:	2100      	movs	r1, #0
   d9192:	7c00      	ldrb	r0, [r0, #16]
   d9194:	f7fe fe96 	bl	d7ec4 <HAL_USB_USART_Receive_Data>
}
   d9198:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d919c:	bd08      	pop	{r3, pc}

000d919e <_ZN9USBSerial4peekEv>:
{
   d919e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d91a0:	2101      	movs	r1, #1
   d91a2:	7c00      	ldrb	r0, [r0, #16]
   d91a4:	f7fe fe8e 	bl	d7ec4 <HAL_USB_USART_Receive_Data>
}
   d91a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d91ac:	bd08      	pop	{r3, pc}

000d91ae <_ZN9USBSerial17availableForWriteEv>:
{
   d91ae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d91b0:	7c00      	ldrb	r0, [r0, #16]
   d91b2:	f7fe fe7f 	bl	d7eb4 <HAL_USB_USART_Available_Data_For_Write>
}
   d91b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d91ba:	bd08      	pop	{r3, pc}

000d91bc <_ZN9USBSerial9availableEv>:
{
   d91bc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d91be:	7c00      	ldrb	r0, [r0, #16]
   d91c0:	f7fe fe70 	bl	d7ea4 <HAL_USB_USART_Available_Data>
}
   d91c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d91c8:	bd08      	pop	{r3, pc}

000d91ca <_ZN9USBSerial5writeEh>:
{
   d91ca:	b513      	push	{r0, r1, r4, lr}
   d91cc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d91ce:	7c00      	ldrb	r0, [r0, #16]
{
   d91d0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d91d2:	f7fe fe6f 	bl	d7eb4 <HAL_USB_USART_Available_Data_For_Write>
   d91d6:	2800      	cmp	r0, #0
   d91d8:	9901      	ldr	r1, [sp, #4]
   d91da:	dc01      	bgt.n	d91e0 <_ZN9USBSerial5writeEh+0x16>
   d91dc:	7c60      	ldrb	r0, [r4, #17]
   d91de:	b120      	cbz	r0, d91ea <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d91e0:	7c20      	ldrb	r0, [r4, #16]
   d91e2:	f7fe fe77 	bl	d7ed4 <HAL_USB_USART_Send_Data>
   d91e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d91ea:	b002      	add	sp, #8
   d91ec:	bd10      	pop	{r4, pc}

000d91ee <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d91ee:	7c00      	ldrb	r0, [r0, #16]
   d91f0:	f7fe be78 	b.w	d7ee4 <HAL_USB_USART_Flush_Data>

000d91f4 <_ZN9USBSerialD0Ev>:
   d91f4:	b510      	push	{r4, lr}
   d91f6:	2114      	movs	r1, #20
   d91f8:	4604      	mov	r4, r0
   d91fa:	f000 fb69 	bl	d98d0 <_ZdlPvj>
   d91fe:	4620      	mov	r0, r4
   d9200:	bd10      	pop	{r4, pc}
	...

000d9204 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9204:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d920a:	4604      	mov	r4, r0
   d920c:	4608      	mov	r0, r1
   d920e:	2100      	movs	r1, #0
   d9210:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9214:	4b04      	ldr	r3, [pc, #16]	; (d9228 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9216:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d9218:	2301      	movs	r3, #1
  _serial = serial;
   d921a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d921c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d921e:	4611      	mov	r1, r2
   d9220:	f7fe fe30 	bl	d7e84 <HAL_USB_USART_Init>
}
   d9224:	4620      	mov	r0, r4
   d9226:	bd10      	pop	{r4, pc}
   d9228:	000de3d0 	.word	0x000de3d0

000d922c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d922c:	7c00      	ldrb	r0, [r0, #16]
   d922e:	2200      	movs	r2, #0
   d9230:	f7fe be30 	b.w	d7e94 <HAL_USB_USART_Begin>

000d9234 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   d9234:	7c00      	ldrb	r0, [r0, #16]
   d9236:	f7fe be5d 	b.w	d7ef4 <HAL_USB_USART_Is_Enabled>

000d923a <_ZN9USBSerialcvbEv>:
  return isEnabled();
   d923a:	f7ff bffb 	b.w	d9234 <_ZN9USBSerial9isEnabledEv>

000d923e <_Z19acquireSerialBufferv>:
{
   d923e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9240:	2214      	movs	r2, #20
{
   d9242:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9244:	2100      	movs	r1, #0
   d9246:	f003 ffc9 	bl	dd1dc <memset>
}
   d924a:	4620      	mov	r0, r4
   d924c:	bd10      	pop	{r4, pc}
	...

000d9250 <_Z16_fetch_usbserialv>:
{
   d9250:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9252:	4c0f      	ldr	r4, [pc, #60]	; (d9290 <_Z16_fetch_usbserialv+0x40>)
{
   d9254:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9256:	a803      	add	r0, sp, #12
   d9258:	f7ff fff1 	bl	d923e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d925c:	7821      	ldrb	r1, [r4, #0]
   d925e:	f3bf 8f5b 	dmb	ish
   d9262:	f011 0101 	ands.w	r1, r1, #1
   d9266:	d10f      	bne.n	d9288 <_Z16_fetch_usbserialv+0x38>
   d9268:	4620      	mov	r0, r4
   d926a:	9101      	str	r1, [sp, #4]
   d926c:	f7fa ff24 	bl	d40b8 <__cxa_guard_acquire>
   d9270:	9901      	ldr	r1, [sp, #4]
   d9272:	b148      	cbz	r0, d9288 <_Z16_fetch_usbserialv+0x38>
   d9274:	aa03      	add	r2, sp, #12
   d9276:	4807      	ldr	r0, [pc, #28]	; (d9294 <_Z16_fetch_usbserialv+0x44>)
   d9278:	f7ff ffc4 	bl	d9204 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d927c:	4620      	mov	r0, r4
   d927e:	f7fa ff20 	bl	d40c2 <__cxa_guard_release>
   d9282:	4805      	ldr	r0, [pc, #20]	; (d9298 <_Z16_fetch_usbserialv+0x48>)
   d9284:	f003 ff96 	bl	dd1b4 <atexit>
	return _usbserial;
}
   d9288:	4802      	ldr	r0, [pc, #8]	; (d9294 <_Z16_fetch_usbserialv+0x44>)
   d928a:	b008      	add	sp, #32
   d928c:	bd10      	pop	{r4, pc}
   d928e:	bf00      	nop
   d9290:	2003e5c0 	.word	0x2003e5c0
   d9294:	2003e5c4 	.word	0x2003e5c4
   d9298:	000d918b 	.word	0x000d918b

000d929c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d929c:	4700      	bx	r0
	...

000d92a0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d92a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d92a4:	2400      	movs	r4, #0
{
   d92a6:	461d      	mov	r5, r3
   d92a8:	460f      	mov	r7, r1
   d92aa:	4690      	mov	r8, r2
   d92ac:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d92ae:	f7fe fc91 	bl	d7bd4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d92b2:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d92b4:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d92b8:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d92bc:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d92c0:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d92c4:	bfa2      	ittt	ge
   d92c6:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d92ca:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d92ce:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d92d0:	4907      	ldr	r1, [pc, #28]	; (d92f0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d92d2:	9400      	str	r4, [sp, #0]
   d92d4:	4643      	mov	r3, r8
   d92d6:	463a      	mov	r2, r7
   d92d8:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d92da:	bfa8      	it	ge
   d92dc:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d92e0:	f7fe fc70 	bl	d7bc4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d92e4:	fab0 f080 	clz	r0, r0
   d92e8:	0940      	lsrs	r0, r0, #5
   d92ea:	b004      	add	sp, #16
   d92ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d92f0:	000d929d 	.word	0x000d929d

000d92f4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d92f4:	2200      	movs	r2, #0
   d92f6:	6840      	ldr	r0, [r0, #4]
   d92f8:	4611      	mov	r1, r2
   d92fa:	f7fe be67 	b.w	d7fcc <network_ready>

000d92fe <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d92fe:	2200      	movs	r2, #0
   d9300:	6840      	ldr	r0, [r0, #4]
   d9302:	4611      	mov	r1, r2
   d9304:	f7fe be82 	b.w	d800c <network_listening>

000d9308 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d9308:	2200      	movs	r2, #0
   d930a:	6840      	ldr	r0, [r0, #4]
   d930c:	4611      	mov	r1, r2
   d930e:	f7fe be8d 	b.w	d802c <network_get_listen_timeout>

000d9312 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d9312:	6840      	ldr	r0, [r0, #4]
   d9314:	2200      	movs	r2, #0
   d9316:	f7fe be81 	b.w	d801c <network_set_listen_timeout>

000d931a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d931a:	6840      	ldr	r0, [r0, #4]
   d931c:	2200      	movs	r2, #0
   d931e:	f081 0101 	eor.w	r1, r1, #1
   d9322:	f7fe be6b 	b.w	d7ffc <network_listen>

000d9326 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d9326:	2300      	movs	r3, #0
   d9328:	6840      	ldr	r0, [r0, #4]
   d932a:	461a      	mov	r2, r3
   d932c:	4619      	mov	r1, r3
   d932e:	f7fe be5d 	b.w	d7fec <network_off>

000d9332 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d9332:	2300      	movs	r3, #0
   d9334:	6840      	ldr	r0, [r0, #4]
   d9336:	461a      	mov	r2, r3
   d9338:	4619      	mov	r1, r3
   d933a:	f7fe be4f 	b.w	d7fdc <network_on>

000d933e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d933e:	2200      	movs	r2, #0
   d9340:	6840      	ldr	r0, [r0, #4]
   d9342:	4611      	mov	r1, r2
   d9344:	f7fe be32 	b.w	d7fac <network_connecting>

000d9348 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9348:	6840      	ldr	r0, [r0, #4]
   d934a:	2200      	movs	r2, #0
   d934c:	2102      	movs	r1, #2
   d934e:	f7fe be35 	b.w	d7fbc <network_disconnect>

000d9352 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d9352:	2300      	movs	r3, #0
   d9354:	6840      	ldr	r0, [r0, #4]
   d9356:	461a      	mov	r2, r3
   d9358:	f7fe be20 	b.w	d7f9c <network_connect>

000d935c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d935c:	4b08      	ldr	r3, [pc, #32]	; (d9380 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d935e:	b510      	push	{r4, lr}
   d9360:	2428      	movs	r4, #40	; 0x28
   d9362:	4622      	mov	r2, r4
   d9364:	4618      	mov	r0, r3
   d9366:	2100      	movs	r1, #0
   d9368:	f003 ff38 	bl	dd1dc <memset>
   d936c:	4b05      	ldr	r3, [pc, #20]	; (d9384 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d936e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d9370:	f04f 32ff 	mov.w	r2, #4294967295
   d9374:	6042      	str	r2, [r0, #4]
   d9376:	2204      	movs	r2, #4
   d9378:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d937a:	4a03      	ldr	r2, [pc, #12]	; (d9388 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d937c:	601a      	str	r2, [r3, #0]
   d937e:	bd10      	pop	{r4, pc}
   d9380:	2003e5e0 	.word	0x2003e5e0
   d9384:	2003e5d8 	.word	0x2003e5d8
   d9388:	000de400 	.word	0x000de400

000d938c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d938c:	4770      	bx	lr

000d938e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d938e:	7441      	strb	r1, [r0, #17]
}
   d9390:	4770      	bx	lr

000d9392 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9392:	4770      	bx	lr

000d9394 <_ZN11USARTSerial17availableForWriteEv>:
{
   d9394:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d9396:	7c00      	ldrb	r0, [r0, #16]
   d9398:	f7fe fcbc 	bl	d7d14 <hal_usart_available_data_for_write>
}
   d939c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d93a0:	bd08      	pop	{r3, pc}

000d93a2 <_ZN11USARTSerial9availableEv>:
{
   d93a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d93a4:	7c00      	ldrb	r0, [r0, #16]
   d93a6:	f7fe fc8d 	bl	d7cc4 <hal_usart_available>
}
   d93aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d93ae:	bd08      	pop	{r3, pc}

000d93b0 <_ZN11USARTSerial4peekEv>:
{
   d93b0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d93b2:	7c00      	ldrb	r0, [r0, #16]
   d93b4:	f7fe fc96 	bl	d7ce4 <hal_usart_peek>
}
   d93b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d93bc:	bd08      	pop	{r3, pc}

000d93be <_ZN11USARTSerial4readEv>:
{
   d93be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d93c0:	7c00      	ldrb	r0, [r0, #16]
   d93c2:	f7fe fc87 	bl	d7cd4 <hal_usart_read>
}
   d93c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d93ca:	bd08      	pop	{r3, pc}

000d93cc <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d93cc:	7c00      	ldrb	r0, [r0, #16]
   d93ce:	f7fe bc91 	b.w	d7cf4 <hal_usart_flush>

000d93d2 <_ZN11USARTSerial5writeEh>:
{
   d93d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d93d4:	7c45      	ldrb	r5, [r0, #17]
{
   d93d6:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d93d8:	b12d      	cbz	r5, d93e6 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d93da:	7c20      	ldrb	r0, [r4, #16]
}
   d93dc:	b003      	add	sp, #12
   d93de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d93e2:	f7fe bc67 	b.w	d7cb4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d93e6:	7c00      	ldrb	r0, [r0, #16]
   d93e8:	9101      	str	r1, [sp, #4]
   d93ea:	f7fe fc93 	bl	d7d14 <hal_usart_available_data_for_write>
   d93ee:	2800      	cmp	r0, #0
   d93f0:	9901      	ldr	r1, [sp, #4]
   d93f2:	dcf2      	bgt.n	d93da <_ZN11USARTSerial5writeEh+0x8>
}
   d93f4:	4628      	mov	r0, r5
   d93f6:	b003      	add	sp, #12
   d93f8:	bd30      	pop	{r4, r5, pc}

000d93fa <_ZN11USARTSerialD0Ev>:
   d93fa:	b510      	push	{r4, lr}
   d93fc:	2114      	movs	r1, #20
   d93fe:	4604      	mov	r4, r0
   d9400:	f000 fa66 	bl	d98d0 <_ZdlPvj>
   d9404:	4620      	mov	r0, r4
   d9406:	bd10      	pop	{r4, pc}

000d9408 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9408:	b510      	push	{r4, lr}
   d940a:	f04f 0c00 	mov.w	ip, #0
   d940e:	4604      	mov	r4, r0
   d9410:	4608      	mov	r0, r1
   d9412:	4611      	mov	r1, r2
   d9414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9418:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d941c:	4a04      	ldr	r2, [pc, #16]	; (d9430 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d941e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9420:	2201      	movs	r2, #1
  _serial = serial;
   d9422:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9424:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d9426:	461a      	mov	r2, r3
   d9428:	f7fe fc3c 	bl	d7ca4 <hal_usart_init>
}
   d942c:	4620      	mov	r0, r4
   d942e:	bd10      	pop	{r4, pc}
   d9430:	000de43c 	.word	0x000de43c

000d9434 <_Z22__fetch_global_Serial1v>:
{
   d9434:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9436:	4c0d      	ldr	r4, [pc, #52]	; (d946c <_Z22__fetch_global_Serial1v+0x38>)
   d9438:	7821      	ldrb	r1, [r4, #0]
   d943a:	f3bf 8f5b 	dmb	ish
   d943e:	f011 0101 	ands.w	r1, r1, #1
   d9442:	d110      	bne.n	d9466 <_Z22__fetch_global_Serial1v+0x32>
   d9444:	4620      	mov	r0, r4
   d9446:	9101      	str	r1, [sp, #4]
   d9448:	f7fa fe36 	bl	d40b8 <__cxa_guard_acquire>
   d944c:	9901      	ldr	r1, [sp, #4]
   d944e:	b150      	cbz	r0, d9466 <_Z22__fetch_global_Serial1v+0x32>
   d9450:	4b07      	ldr	r3, [pc, #28]	; (d9470 <_Z22__fetch_global_Serial1v+0x3c>)
   d9452:	4a08      	ldr	r2, [pc, #32]	; (d9474 <_Z22__fetch_global_Serial1v+0x40>)
   d9454:	4808      	ldr	r0, [pc, #32]	; (d9478 <_Z22__fetch_global_Serial1v+0x44>)
   d9456:	f7ff ffd7 	bl	d9408 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d945a:	4620      	mov	r0, r4
   d945c:	f7fa fe31 	bl	d40c2 <__cxa_guard_release>
   d9460:	4806      	ldr	r0, [pc, #24]	; (d947c <_Z22__fetch_global_Serial1v+0x48>)
   d9462:	f003 fea7 	bl	dd1b4 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9466:	4804      	ldr	r0, [pc, #16]	; (d9478 <_Z22__fetch_global_Serial1v+0x44>)
   d9468:	b002      	add	sp, #8
   d946a:	bd10      	pop	{r4, pc}
   d946c:	2003e608 	.word	0x2003e608
   d9470:	2003e690 	.word	0x2003e690
   d9474:	2003e60c 	.word	0x2003e60c
   d9478:	2003e714 	.word	0x2003e714
   d947c:	000d9393 	.word	0x000d9393

000d9480 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d9480:	b510      	push	{r4, lr}
      if (_M_empty())
   d9482:	6883      	ldr	r3, [r0, #8]
   d9484:	4604      	mov	r4, r0
   d9486:	b90b      	cbnz	r3, d948c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d9488:	f000 fa26 	bl	d98d8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d948c:	68c3      	ldr	r3, [r0, #12]
   d948e:	4798      	blx	r3
      if (_M_manager)
   d9490:	68a3      	ldr	r3, [r4, #8]
   d9492:	b11b      	cbz	r3, d949c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d9494:	2203      	movs	r2, #3
   d9496:	4621      	mov	r1, r4
   d9498:	4620      	mov	r0, r4
   d949a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d949c:	4620      	mov	r0, r4
   d949e:	2110      	movs	r1, #16
}
   d94a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d94a4:	f000 ba14 	b.w	d98d0 <_ZdlPvj>

000d94a8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d94a8:	4770      	bx	lr

000d94aa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d94aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d94ac:	4606      	mov	r6, r0
   d94ae:	4615      	mov	r5, r2
   d94b0:	460c      	mov	r4, r1
   d94b2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d94b4:	42bc      	cmp	r4, r7
   d94b6:	d006      	beq.n	d94c6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d94b8:	6833      	ldr	r3, [r6, #0]
   d94ba:	f814 1b01 	ldrb.w	r1, [r4], #1
   d94be:	689b      	ldr	r3, [r3, #8]
   d94c0:	4630      	mov	r0, r6
   d94c2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d94c4:	e7f6      	b.n	d94b4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d94c6:	4628      	mov	r0, r5
   d94c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d94ca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d94ca:	7c00      	ldrb	r0, [r0, #16]
   d94cc:	2200      	movs	r2, #0
   d94ce:	f7fe bc49 	b.w	d7d64 <hal_i2c_write>

000d94d2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d94d2:	7c00      	ldrb	r0, [r0, #16]
   d94d4:	2100      	movs	r1, #0
   d94d6:	f7fe bc4d 	b.w	d7d74 <hal_i2c_available>

000d94da <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d94da:	7c00      	ldrb	r0, [r0, #16]
   d94dc:	2100      	movs	r1, #0
   d94de:	f7fe bc51 	b.w	d7d84 <hal_i2c_read>

000d94e2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d94e2:	7c00      	ldrb	r0, [r0, #16]
   d94e4:	2100      	movs	r1, #0
   d94e6:	f7fe bc55 	b.w	d7d94 <hal_i2c_peek>

000d94ea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d94ea:	7c00      	ldrb	r0, [r0, #16]
   d94ec:	2100      	movs	r1, #0
   d94ee:	f7fe bc59 	b.w	d7da4 <hal_i2c_flush>

000d94f2 <_ZN7TwoWireD0Ev>:
   d94f2:	b510      	push	{r4, lr}
   d94f4:	2114      	movs	r1, #20
   d94f6:	4604      	mov	r4, r0
   d94f8:	f000 f9ea 	bl	d98d0 <_ZdlPvj>
   d94fc:	4620      	mov	r0, r4
   d94fe:	bd10      	pop	{r4, pc}

000d9500 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d9500:	b510      	push	{r4, lr}
   d9502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9506:	4604      	mov	r4, r0
   d9508:	4608      	mov	r0, r1
   d950a:	2100      	movs	r1, #0
   d950c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9510:	4b03      	ldr	r3, [pc, #12]	; (d9520 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d9512:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d9514:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d9516:	4611      	mov	r1, r2
   d9518:	f7fe fc54 	bl	d7dc4 <hal_i2c_init>
}
   d951c:	4620      	mov	r0, r4
   d951e:	bd10      	pop	{r4, pc}
   d9520:	000de46c 	.word	0x000de46c

000d9524 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d9524:	7c00      	ldrb	r0, [r0, #16]
   d9526:	2200      	movs	r2, #0
   d9528:	f7fe bbfc 	b.w	d7d24 <hal_i2c_set_speed>

000d952c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d952c:	2300      	movs	r3, #0
   d952e:	7c00      	ldrb	r0, [r0, #16]
   d9530:	461a      	mov	r2, r3
   d9532:	4619      	mov	r1, r3
   d9534:	f7fe bbfe 	b.w	d7d34 <hal_i2c_begin>

000d9538 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d9538:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d953a:	2200      	movs	r2, #0
   d953c:	2314      	movs	r3, #20
   d953e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d9542:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d9546:	780b      	ldrb	r3, [r1, #0]
   d9548:	f88d 3008 	strb.w	r3, [sp, #8]
   d954c:	684b      	ldr	r3, [r1, #4]
   d954e:	9303      	str	r3, [sp, #12]
   d9550:	68cb      	ldr	r3, [r1, #12]
   d9552:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d9554:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d9556:	7a0b      	ldrb	r3, [r1, #8]
   d9558:	9305      	str	r3, [sp, #20]
   d955a:	a901      	add	r1, sp, #4
   d955c:	f7fe fc3a 	bl	d7dd4 <hal_i2c_request_ex>
}
   d9560:	b007      	add	sp, #28
   d9562:	f85d fb04 	ldr.w	pc, [sp], #4

000d9566 <_ZN7TwoWire11requestFromEhjh>:
{
   d9566:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d9568:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d956a:	f88d 1000 	strb.w	r1, [sp]
   d956e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d9572:	9103      	str	r1, [sp, #12]
   d9574:	bf18      	it	ne
   d9576:	2301      	movne	r3, #1
   d9578:	4669      	mov	r1, sp
    size_ = size;
   d957a:	9201      	str	r2, [sp, #4]
   d957c:	f88d 3008 	strb.w	r3, [sp, #8]
   d9580:	f7ff ffda 	bl	d9538 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d9584:	b005      	add	sp, #20
   d9586:	f85d fb04 	ldr.w	pc, [sp], #4

000d958a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d958a:	2301      	movs	r3, #1
   d958c:	f7ff bfeb 	b.w	d9566 <_ZN7TwoWire11requestFromEhjh>

000d9590 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d9590:	7c00      	ldrb	r0, [r0, #16]
   d9592:	2200      	movs	r2, #0
   d9594:	f7fe bbd6 	b.w	d7d44 <hal_i2c_begin_transmission>

000d9598 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d9598:	7c00      	ldrb	r0, [r0, #16]
   d959a:	2200      	movs	r2, #0
   d959c:	f7fe bbda 	b.w	d7d54 <hal_i2c_end_transmission>

000d95a0 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d95a0:	2101      	movs	r1, #1
   d95a2:	f7ff bff9 	b.w	d9598 <_ZN7TwoWire15endTransmissionEh>

000d95a6 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d95a6:	2300      	movs	r3, #0
   d95a8:	6840      	ldr	r0, [r0, #4]
   d95aa:	461a      	mov	r2, r3
   d95ac:	f7fe bcf6 	b.w	d7f9c <network_connect>

000d95b0 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d95b0:	6840      	ldr	r0, [r0, #4]
   d95b2:	2200      	movs	r2, #0
   d95b4:	2102      	movs	r1, #2
   d95b6:	f7fe bd01 	b.w	d7fbc <network_disconnect>

000d95ba <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d95ba:	2200      	movs	r2, #0
   d95bc:	6840      	ldr	r0, [r0, #4]
   d95be:	4611      	mov	r1, r2
   d95c0:	f7fe bcf4 	b.w	d7fac <network_connecting>

000d95c4 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d95c4:	2200      	movs	r2, #0
   d95c6:	6840      	ldr	r0, [r0, #4]
   d95c8:	4611      	mov	r1, r2
   d95ca:	f7fe bcff 	b.w	d7fcc <network_ready>

000d95ce <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d95ce:	2300      	movs	r3, #0
   d95d0:	6840      	ldr	r0, [r0, #4]
   d95d2:	461a      	mov	r2, r3
   d95d4:	4619      	mov	r1, r3
   d95d6:	f7fe bd01 	b.w	d7fdc <network_on>

000d95da <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d95da:	2300      	movs	r3, #0
   d95dc:	6840      	ldr	r0, [r0, #4]
   d95de:	461a      	mov	r2, r3
   d95e0:	4619      	mov	r1, r3
   d95e2:	f7fe bd03 	b.w	d7fec <network_off>

000d95e6 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d95e6:	6840      	ldr	r0, [r0, #4]
   d95e8:	2100      	movs	r1, #0
   d95ea:	f7fe bd27 	b.w	d803c <network_is_on>

000d95ee <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d95ee:	6840      	ldr	r0, [r0, #4]
   d95f0:	2100      	movs	r1, #0
   d95f2:	f7fe bd2b 	b.w	d804c <network_is_off>

000d95f6 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d95f6:	6840      	ldr	r0, [r0, #4]
   d95f8:	2200      	movs	r2, #0
   d95fa:	f081 0101 	eor.w	r1, r1, #1
   d95fe:	f7fe bcfd 	b.w	d7ffc <network_listen>

000d9602 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9602:	6840      	ldr	r0, [r0, #4]
   d9604:	2200      	movs	r2, #0
   d9606:	f7fe bd09 	b.w	d801c <network_set_listen_timeout>

000d960a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d960a:	2200      	movs	r2, #0
   d960c:	6840      	ldr	r0, [r0, #4]
   d960e:	4611      	mov	r1, r2
   d9610:	f7fe bd0c 	b.w	d802c <network_get_listen_timeout>

000d9614 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9614:	2200      	movs	r2, #0
   d9616:	6840      	ldr	r0, [r0, #4]
   d9618:	4611      	mov	r1, r2
   d961a:	f7fe bcf7 	b.w	d800c <network_listening>

000d961e <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d961e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9622:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9624:	b095      	sub	sp, #84	; 0x54
   d9626:	4616      	mov	r6, r2
   d9628:	460d      	mov	r5, r1
   d962a:	4607      	mov	r7, r0
    IPAddress addr;
   d962c:	f7ff fd74 	bl	d9118 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9630:	4621      	mov	r1, r4
   d9632:	2218      	movs	r2, #24
   d9634:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9636:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9638:	f003 fdd0 	bl	dd1dc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d963c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d963e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9642:	4621      	mov	r1, r4
   d9644:	466b      	mov	r3, sp
   d9646:	aa0c      	add	r2, sp, #48	; 0x30
   d9648:	4630      	mov	r0, r6
   d964a:	f7fe fa8b 	bl	d7b64 <netdb_getaddrinfo>
    if (!r) {
   d964e:	4604      	mov	r4, r0
   d9650:	2800      	cmp	r0, #0
   d9652:	d146      	bne.n	d96e2 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9654:	4602      	mov	r2, r0
   d9656:	2101      	movs	r1, #1
   d9658:	6868      	ldr	r0, [r5, #4]
   d965a:	f7fe fcb7 	bl	d7fcc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d965e:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9660:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9662:	4622      	mov	r2, r4
   d9664:	6868      	ldr	r0, [r5, #4]
   d9666:	f7fe fcb1 	bl	d7fcc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d966a:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d966c:	4681      	mov	r9, r0
        bool ok = false;
   d966e:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9670:	2e00      	cmp	r6, #0
   d9672:	d036      	beq.n	d96e2 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d9674:	2900      	cmp	r1, #0
   d9676:	d134      	bne.n	d96e2 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9678:	6873      	ldr	r3, [r6, #4]
   d967a:	2b02      	cmp	r3, #2
   d967c:	d003      	beq.n	d9686 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d967e:	2b0a      	cmp	r3, #10
   d9680:	d00b      	beq.n	d969a <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9682:	69f6      	ldr	r6, [r6, #28]
   d9684:	e7f4      	b.n	d9670 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9686:	f1b8 0f00 	cmp.w	r8, #0
   d968a:	d004      	beq.n	d9696 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d968c:	6971      	ldr	r1, [r6, #20]
   d968e:	4638      	mov	r0, r7
   d9690:	3104      	adds	r1, #4
   d9692:	f7ff fd6e 	bl	d9172 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d9696:	4641      	mov	r1, r8
   d9698:	e7f3      	b.n	d9682 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d969a:	f1b9 0f00 	cmp.w	r9, #0
   d969e:	d101      	bne.n	d96a4 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d96a0:	4649      	mov	r1, r9
   d96a2:	e7ee      	b.n	d9682 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d96a4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d96a6:	2210      	movs	r2, #16
   d96a8:	a801      	add	r0, sp, #4
   d96aa:	f003 fd97 	bl	dd1dc <memset>
                    a.v = 6;
   d96ae:	2306      	movs	r3, #6
   d96b0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d96b4:	ad01      	add	r5, sp, #4
   d96b6:	f104 0308 	add.w	r3, r4, #8
   d96ba:	3418      	adds	r4, #24
   d96bc:	6818      	ldr	r0, [r3, #0]
   d96be:	6859      	ldr	r1, [r3, #4]
   d96c0:	462a      	mov	r2, r5
   d96c2:	c203      	stmia	r2!, {r0, r1}
   d96c4:	3308      	adds	r3, #8
   d96c6:	42a3      	cmp	r3, r4
   d96c8:	4615      	mov	r5, r2
   d96ca:	d1f7      	bne.n	d96bc <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d96cc:	a901      	add	r1, sp, #4
   d96ce:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d96d0:	ad07      	add	r5, sp, #28
   d96d2:	f7ff fd2f 	bl	d9134 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d96d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d96d8:	1d3c      	adds	r4, r7, #4
   d96da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d96dc:	682b      	ldr	r3, [r5, #0]
   d96de:	7023      	strb	r3, [r4, #0]
   d96e0:	e7de      	b.n	d96a0 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d96e2:	9800      	ldr	r0, [sp, #0]
   d96e4:	f7fe fa36 	bl	d7b54 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d96e8:	4638      	mov	r0, r7
   d96ea:	b015      	add	sp, #84	; 0x54
   d96ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d96f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d96f0:	4b02      	ldr	r3, [pc, #8]	; (d96fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d96f2:	4a03      	ldr	r2, [pc, #12]	; (d9700 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d96f4:	601a      	str	r2, [r3, #0]
   d96f6:	2200      	movs	r2, #0
   d96f8:	605a      	str	r2, [r3, #4]

} // spark
   d96fa:	4770      	bx	lr
   d96fc:	2003e728 	.word	0x2003e728
   d9700:	000de494 	.word	0x000de494

000d9704 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9704:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9706:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9708:	d902      	bls.n	d9710 <pinAvailable+0xc>
    return false;
   d970a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d970c:	b002      	add	sp, #8
   d970e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9710:	f1a0 030b 	sub.w	r3, r0, #11
   d9714:	2b02      	cmp	r3, #2
   d9716:	d81a      	bhi.n	d974e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9718:	4c17      	ldr	r4, [pc, #92]	; (d9778 <pinAvailable+0x74>)
   d971a:	7821      	ldrb	r1, [r4, #0]
   d971c:	f3bf 8f5b 	dmb	ish
   d9720:	f011 0101 	ands.w	r1, r1, #1
   d9724:	d10b      	bne.n	d973e <pinAvailable+0x3a>
   d9726:	4620      	mov	r0, r4
   d9728:	9101      	str	r1, [sp, #4]
   d972a:	f7fa fcc5 	bl	d40b8 <__cxa_guard_acquire>
   d972e:	9901      	ldr	r1, [sp, #4]
   d9730:	b128      	cbz	r0, d973e <pinAvailable+0x3a>
   d9732:	4812      	ldr	r0, [pc, #72]	; (d977c <pinAvailable+0x78>)
   d9734:	f7fe fd3e 	bl	d81b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9738:	4620      	mov	r0, r4
   d973a:	f7fa fcc2 	bl	d40c2 <__cxa_guard_release>
   d973e:	4b0f      	ldr	r3, [pc, #60]	; (d977c <pinAvailable+0x78>)
   d9740:	7818      	ldrb	r0, [r3, #0]
   d9742:	f7fe fb67 	bl	d7e14 <hal_spi_is_enabled>
   d9746:	2800      	cmp	r0, #0
   d9748:	d1df      	bne.n	d970a <pinAvailable+0x6>
  return true; // 'pin' is available
   d974a:	2001      	movs	r0, #1
   d974c:	e7de      	b.n	d970c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d974e:	2801      	cmp	r0, #1
   d9750:	d809      	bhi.n	d9766 <pinAvailable+0x62>
   d9752:	f000 f899 	bl	d9888 <_Z19__fetch_global_Wirev>
   d9756:	2100      	movs	r1, #0
   d9758:	7c00      	ldrb	r0, [r0, #16]
   d975a:	f7fe fb2b 	bl	d7db4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d975e:	f080 0001 	eor.w	r0, r0, #1
   d9762:	b2c0      	uxtb	r0, r0
   d9764:	e7d2      	b.n	d970c <pinAvailable+0x8>
   d9766:	3809      	subs	r0, #9
   d9768:	2801      	cmp	r0, #1
   d976a:	d8ee      	bhi.n	d974a <pinAvailable+0x46>
   d976c:	f7ff fe62 	bl	d9434 <_Z22__fetch_global_Serial1v>
   d9770:	7c00      	ldrb	r0, [r0, #16]
   d9772:	f7fe fac7 	bl	d7d04 <hal_usart_is_enabled>
   d9776:	e7f2      	b.n	d975e <pinAvailable+0x5a>
   d9778:	2003e578 	.word	0x2003e578
   d977c:	2003e57c 	.word	0x2003e57c

000d9780 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9780:	2823      	cmp	r0, #35	; 0x23
{
   d9782:	b538      	push	{r3, r4, r5, lr}
   d9784:	4604      	mov	r4, r0
   d9786:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9788:	d80a      	bhi.n	d97a0 <pinMode+0x20>
   d978a:	29ff      	cmp	r1, #255	; 0xff
   d978c:	d008      	beq.n	d97a0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d978e:	f7ff ffb9 	bl	d9704 <pinAvailable>
   d9792:	b128      	cbz	r0, d97a0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d9794:	4629      	mov	r1, r5
   d9796:	4620      	mov	r0, r4
}
   d9798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d979c:	f7fe b9f2 	b.w	d7b84 <HAL_Pin_Mode>
}
   d97a0:	bd38      	pop	{r3, r4, r5, pc}

000d97a2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d97a2:	b538      	push	{r3, r4, r5, lr}
   d97a4:	4604      	mov	r4, r0
   d97a6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d97a8:	f7fe f9f4 	bl	d7b94 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d97ac:	28ff      	cmp	r0, #255	; 0xff
   d97ae:	d010      	beq.n	d97d2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d97b0:	2806      	cmp	r0, #6
   d97b2:	d804      	bhi.n	d97be <digitalWrite+0x1c>
   d97b4:	234d      	movs	r3, #77	; 0x4d
   d97b6:	fa23 f000 	lsr.w	r0, r3, r0
   d97ba:	07c3      	lsls	r3, r0, #31
   d97bc:	d409      	bmi.n	d97d2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d97be:	4620      	mov	r0, r4
   d97c0:	f7ff ffa0 	bl	d9704 <pinAvailable>
   d97c4:	b128      	cbz	r0, d97d2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d97c6:	4629      	mov	r1, r5
   d97c8:	4620      	mov	r0, r4
}
   d97ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d97ce:	f7fe b9e9 	b.w	d7ba4 <HAL_GPIO_Write>
}
   d97d2:	bd38      	pop	{r3, r4, r5, pc}

000d97d4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d97d4:	b510      	push	{r4, lr}
   d97d6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d97d8:	f7fe f9dc 	bl	d7b94 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d97dc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d97de:	b2db      	uxtb	r3, r3
   d97e0:	2b01      	cmp	r3, #1
   d97e2:	d908      	bls.n	d97f6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d97e4:	4620      	mov	r0, r4
   d97e6:	f7ff ff8d 	bl	d9704 <pinAvailable>
   d97ea:	b120      	cbz	r0, d97f6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d97ec:	4620      	mov	r0, r4
}
   d97ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d97f2:	f7fe b9df 	b.w	d7bb4 <HAL_GPIO_Read>
}
   d97f6:	2000      	movs	r0, #0
   d97f8:	bd10      	pop	{r4, pc}

000d97fa <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d97fa:	280d      	cmp	r0, #13
{
   d97fc:	b510      	push	{r4, lr}
   d97fe:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d9800:	bf9c      	itt	ls
   d9802:	340e      	addls	r4, #14
   d9804:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9806:	4620      	mov	r0, r4
   d9808:	f7ff ff7c 	bl	d9704 <pinAvailable>
   d980c:	b150      	cbz	r0, d9824 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d980e:	2103      	movs	r1, #3
   d9810:	4620      	mov	r0, r4
   d9812:	f7fe f9af 	bl	d7b74 <HAL_Validate_Pin_Function>
   d9816:	2803      	cmp	r0, #3
   d9818:	d104      	bne.n	d9824 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d981a:	4620      	mov	r0, r4
}
   d981c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d9820:	f7fe b9e0 	b.w	d7be4 <hal_adc_read>
}
   d9824:	2000      	movs	r0, #0
   d9826:	bd10      	pop	{r4, pc}

000d9828 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d9828:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d982a:	4c08      	ldr	r4, [pc, #32]	; (d984c <_Z21__fetch_global_EEPROMv+0x24>)
   d982c:	7823      	ldrb	r3, [r4, #0]
   d982e:	f3bf 8f5b 	dmb	ish
   d9832:	07db      	lsls	r3, r3, #31
   d9834:	d408      	bmi.n	d9848 <_Z21__fetch_global_EEPROMv+0x20>
   d9836:	4620      	mov	r0, r4
   d9838:	f7fa fc3e 	bl	d40b8 <__cxa_guard_acquire>
   d983c:	b120      	cbz	r0, d9848 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d983e:	f7fe f9f1 	bl	d7c24 <HAL_EEPROM_Init>
   d9842:	4620      	mov	r0, r4
   d9844:	f7fa fc3d 	bl	d40c2 <__cxa_guard_release>
	return eeprom;
}
   d9848:	4801      	ldr	r0, [pc, #4]	; (d9850 <_Z21__fetch_global_EEPROMv+0x28>)
   d984a:	bd10      	pop	{r4, pc}
   d984c:	2003e734 	.word	0x2003e734
   d9850:	2003e738 	.word	0x2003e738

000d9854 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9854:	4770      	bx	lr
	...

000d9858 <_Z17acquireWireBufferv>:
{
   d9858:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d985a:	2300      	movs	r3, #0
   d985c:	2520      	movs	r5, #32
   d985e:	8043      	strh	r3, [r0, #2]
   d9860:	2314      	movs	r3, #20
{
   d9862:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9864:	8003      	strh	r3, [r0, #0]
   d9866:	6085      	str	r5, [r0, #8]
   d9868:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d986a:	4906      	ldr	r1, [pc, #24]	; (d9884 <_Z17acquireWireBufferv+0x2c>)
   d986c:	4628      	mov	r0, r5
   d986e:	f000 f831 	bl	d98d4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9872:	4904      	ldr	r1, [pc, #16]	; (d9884 <_Z17acquireWireBufferv+0x2c>)
	};
   d9874:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9876:	4628      	mov	r0, r5
   d9878:	f000 f82c 	bl	d98d4 <_ZnajRKSt9nothrow_t>
	};
   d987c:	60e0      	str	r0, [r4, #12]
}
   d987e:	4620      	mov	r0, r4
   d9880:	bd38      	pop	{r3, r4, r5, pc}
   d9882:	bf00      	nop
   d9884:	000de4c8 	.word	0x000de4c8

000d9888 <_Z19__fetch_global_Wirev>:
{
   d9888:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d988a:	4d0e      	ldr	r5, [pc, #56]	; (d98c4 <_Z19__fetch_global_Wirev+0x3c>)
   d988c:	7829      	ldrb	r1, [r5, #0]
   d988e:	f3bf 8f5b 	dmb	ish
   d9892:	f011 0401 	ands.w	r4, r1, #1
{
   d9896:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9898:	d111      	bne.n	d98be <_Z19__fetch_global_Wirev+0x36>
   d989a:	4628      	mov	r0, r5
   d989c:	f7fa fc0c 	bl	d40b8 <__cxa_guard_acquire>
   d98a0:	b168      	cbz	r0, d98be <_Z19__fetch_global_Wirev+0x36>
   d98a2:	a801      	add	r0, sp, #4
   d98a4:	f7ff ffd8 	bl	d9858 <_Z17acquireWireBufferv>
   d98a8:	aa01      	add	r2, sp, #4
   d98aa:	4621      	mov	r1, r4
   d98ac:	4806      	ldr	r0, [pc, #24]	; (d98c8 <_Z19__fetch_global_Wirev+0x40>)
   d98ae:	f7ff fe27 	bl	d9500 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d98b2:	4628      	mov	r0, r5
   d98b4:	f7fa fc05 	bl	d40c2 <__cxa_guard_release>
   d98b8:	4804      	ldr	r0, [pc, #16]	; (d98cc <_Z19__fetch_global_Wirev+0x44>)
   d98ba:	f003 fc7b 	bl	dd1b4 <atexit>
	return wire;
}
   d98be:	4802      	ldr	r0, [pc, #8]	; (d98c8 <_Z19__fetch_global_Wirev+0x40>)
   d98c0:	b007      	add	sp, #28
   d98c2:	bd30      	pop	{r4, r5, pc}
   d98c4:	2003e73c 	.word	0x2003e73c
   d98c8:	2003e740 	.word	0x2003e740
   d98cc:	000d9855 	.word	0x000d9855

000d98d0 <_ZdlPvj>:
   d98d0:	f7fa bbe5 	b.w	d409e <_ZdlPv>

000d98d4 <_ZnajRKSt9nothrow_t>:
   d98d4:	f7fa bbe1 	b.w	d409a <_Znaj>

000d98d8 <_ZSt25__throw_bad_function_callv>:
   d98d8:	b508      	push	{r3, lr}
   d98da:	f7fe fc07 	bl	d80ec <abort>
	...

000d98e0 <cosf>:
   d98e0:	b500      	push	{lr}
   d98e2:	ee10 3a10 	vmov	r3, s0
   d98e6:	4a20      	ldr	r2, [pc, #128]	; (d9968 <cosf+0x88>)
   d98e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d98ec:	4293      	cmp	r3, r2
   d98ee:	b083      	sub	sp, #12
   d98f0:	dd19      	ble.n	d9926 <cosf+0x46>
   d98f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d98f6:	db04      	blt.n	d9902 <cosf+0x22>
   d98f8:	ee30 0a40 	vsub.f32	s0, s0, s0
   d98fc:	b003      	add	sp, #12
   d98fe:	f85d fb04 	ldr.w	pc, [sp], #4
   d9902:	4668      	mov	r0, sp
   d9904:	f001 fa7e 	bl	dae04 <__ieee754_rem_pio2f>
   d9908:	f000 0003 	and.w	r0, r0, #3
   d990c:	2801      	cmp	r0, #1
   d990e:	d011      	beq.n	d9934 <cosf+0x54>
   d9910:	2802      	cmp	r0, #2
   d9912:	d01f      	beq.n	d9954 <cosf+0x74>
   d9914:	b1b8      	cbz	r0, d9946 <cosf+0x66>
   d9916:	eddd 0a01 	vldr	s1, [sp, #4]
   d991a:	ed9d 0a00 	vldr	s0, [sp]
   d991e:	2001      	movs	r0, #1
   d9920:	f001 ff72 	bl	db808 <__kernel_sinf>
   d9924:	e7ea      	b.n	d98fc <cosf+0x1c>
   d9926:	eddf 0a11 	vldr	s1, [pc, #68]	; d996c <cosf+0x8c>
   d992a:	f001 fbb5 	bl	db098 <__kernel_cosf>
   d992e:	b003      	add	sp, #12
   d9930:	f85d fb04 	ldr.w	pc, [sp], #4
   d9934:	eddd 0a01 	vldr	s1, [sp, #4]
   d9938:	ed9d 0a00 	vldr	s0, [sp]
   d993c:	f001 ff64 	bl	db808 <__kernel_sinf>
   d9940:	eeb1 0a40 	vneg.f32	s0, s0
   d9944:	e7da      	b.n	d98fc <cosf+0x1c>
   d9946:	eddd 0a01 	vldr	s1, [sp, #4]
   d994a:	ed9d 0a00 	vldr	s0, [sp]
   d994e:	f001 fba3 	bl	db098 <__kernel_cosf>
   d9952:	e7d3      	b.n	d98fc <cosf+0x1c>
   d9954:	eddd 0a01 	vldr	s1, [sp, #4]
   d9958:	ed9d 0a00 	vldr	s0, [sp]
   d995c:	f001 fb9c 	bl	db098 <__kernel_cosf>
   d9960:	eeb1 0a40 	vneg.f32	s0, s0
   d9964:	e7ca      	b.n	d98fc <cosf+0x1c>
   d9966:	bf00      	nop
   d9968:	3f490fd8 	.word	0x3f490fd8
   d996c:	00000000 	.word	0x00000000

000d9970 <sinf>:
   d9970:	b500      	push	{lr}
   d9972:	ee10 3a10 	vmov	r3, s0
   d9976:	4a21      	ldr	r2, [pc, #132]	; (d99fc <sinf+0x8c>)
   d9978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d997c:	4293      	cmp	r3, r2
   d997e:	b083      	sub	sp, #12
   d9980:	dd1a      	ble.n	d99b8 <sinf+0x48>
   d9982:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d9986:	db04      	blt.n	d9992 <sinf+0x22>
   d9988:	ee30 0a40 	vsub.f32	s0, s0, s0
   d998c:	b003      	add	sp, #12
   d998e:	f85d fb04 	ldr.w	pc, [sp], #4
   d9992:	4668      	mov	r0, sp
   d9994:	f001 fa36 	bl	dae04 <__ieee754_rem_pio2f>
   d9998:	f000 0003 	and.w	r0, r0, #3
   d999c:	2801      	cmp	r0, #1
   d999e:	d013      	beq.n	d99c8 <sinf+0x58>
   d99a0:	2802      	cmp	r0, #2
   d99a2:	d020      	beq.n	d99e6 <sinf+0x76>
   d99a4:	b1b8      	cbz	r0, d99d6 <sinf+0x66>
   d99a6:	eddd 0a01 	vldr	s1, [sp, #4]
   d99aa:	ed9d 0a00 	vldr	s0, [sp]
   d99ae:	f001 fb73 	bl	db098 <__kernel_cosf>
   d99b2:	eeb1 0a40 	vneg.f32	s0, s0
   d99b6:	e7e9      	b.n	d998c <sinf+0x1c>
   d99b8:	eddf 0a11 	vldr	s1, [pc, #68]	; d9a00 <sinf+0x90>
   d99bc:	2000      	movs	r0, #0
   d99be:	f001 ff23 	bl	db808 <__kernel_sinf>
   d99c2:	b003      	add	sp, #12
   d99c4:	f85d fb04 	ldr.w	pc, [sp], #4
   d99c8:	eddd 0a01 	vldr	s1, [sp, #4]
   d99cc:	ed9d 0a00 	vldr	s0, [sp]
   d99d0:	f001 fb62 	bl	db098 <__kernel_cosf>
   d99d4:	e7da      	b.n	d998c <sinf+0x1c>
   d99d6:	eddd 0a01 	vldr	s1, [sp, #4]
   d99da:	ed9d 0a00 	vldr	s0, [sp]
   d99de:	2001      	movs	r0, #1
   d99e0:	f001 ff12 	bl	db808 <__kernel_sinf>
   d99e4:	e7d2      	b.n	d998c <sinf+0x1c>
   d99e6:	eddd 0a01 	vldr	s1, [sp, #4]
   d99ea:	ed9d 0a00 	vldr	s0, [sp]
   d99ee:	2001      	movs	r0, #1
   d99f0:	f001 ff0a 	bl	db808 <__kernel_sinf>
   d99f4:	eeb1 0a40 	vneg.f32	s0, s0
   d99f8:	e7c8      	b.n	d998c <sinf+0x1c>
   d99fa:	bf00      	nop
   d99fc:	3f490fd8 	.word	0x3f490fd8
   d9a00:	00000000 	.word	0x00000000

000d9a04 <atan2>:
   d9a04:	f000 b9b8 	b.w	d9d78 <__ieee754_atan2>

000d9a08 <pow>:
   d9a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9a0c:	ed2d 8b02 	vpush	{d8}
   d9a10:	b08d      	sub	sp, #52	; 0x34
   d9a12:	ec57 6b10 	vmov	r6, r7, d0
   d9a16:	ec55 4b11 	vmov	r4, r5, d1
   d9a1a:	f000 faad 	bl	d9f78 <__ieee754_pow>
   d9a1e:	4bae      	ldr	r3, [pc, #696]	; (d9cd8 <pow+0x2d0>)
   d9a20:	eeb0 8a40 	vmov.f32	s16, s0
   d9a24:	eef0 8a60 	vmov.f32	s17, s1
   d9a28:	f993 9000 	ldrsb.w	r9, [r3]
   d9a2c:	f1b9 3fff 	cmp.w	r9, #4294967295
   d9a30:	d037      	beq.n	d9aa2 <pow+0x9a>
   d9a32:	4622      	mov	r2, r4
   d9a34:	462b      	mov	r3, r5
   d9a36:	4620      	mov	r0, r4
   d9a38:	4629      	mov	r1, r5
   d9a3a:	f003 f815 	bl	dca68 <__aeabi_dcmpun>
   d9a3e:	4683      	mov	fp, r0
   d9a40:	bb78      	cbnz	r0, d9aa2 <pow+0x9a>
   d9a42:	4632      	mov	r2, r6
   d9a44:	463b      	mov	r3, r7
   d9a46:	4630      	mov	r0, r6
   d9a48:	4639      	mov	r1, r7
   d9a4a:	f003 f80d 	bl	dca68 <__aeabi_dcmpun>
   d9a4e:	4680      	mov	r8, r0
   d9a50:	2800      	cmp	r0, #0
   d9a52:	f040 8093 	bne.w	d9b7c <pow+0x174>
   d9a56:	f04f 0a00 	mov.w	sl, #0
   d9a5a:	f04f 0b00 	mov.w	fp, #0
   d9a5e:	4630      	mov	r0, r6
   d9a60:	4639      	mov	r1, r7
   d9a62:	4652      	mov	r2, sl
   d9a64:	465b      	mov	r3, fp
   d9a66:	f002 ffcd 	bl	dca04 <__aeabi_dcmpeq>
   d9a6a:	b318      	cbz	r0, d9ab4 <pow+0xac>
   d9a6c:	4652      	mov	r2, sl
   d9a6e:	465b      	mov	r3, fp
   d9a70:	4620      	mov	r0, r4
   d9a72:	4629      	mov	r1, r5
   d9a74:	f002 ffc6 	bl	dca04 <__aeabi_dcmpeq>
   d9a78:	9000      	str	r0, [sp, #0]
   d9a7a:	2800      	cmp	r0, #0
   d9a7c:	d057      	beq.n	d9b2e <pow+0x126>
   d9a7e:	4b97      	ldr	r3, [pc, #604]	; (d9cdc <pow+0x2d4>)
   d9a80:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d9a84:	2201      	movs	r2, #1
   d9a86:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9a8a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9a8e:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d9a92:	9202      	str	r2, [sp, #8]
   d9a94:	9303      	str	r3, [sp, #12]
   d9a96:	f1b9 0f00 	cmp.w	r9, #0
   d9a9a:	f000 8089 	beq.w	d9bb0 <pow+0x1a8>
   d9a9e:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d9cc8 <pow+0x2c0>
   d9aa2:	eeb0 0a48 	vmov.f32	s0, s16
   d9aa6:	eef0 0a68 	vmov.f32	s1, s17
   d9aaa:	b00d      	add	sp, #52	; 0x34
   d9aac:	ecbd 8b02 	vpop	{d8}
   d9ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9ab4:	eeb0 0a48 	vmov.f32	s0, s16
   d9ab8:	eef0 0a68 	vmov.f32	s1, s17
   d9abc:	f002 f8aa 	bl	dbc14 <finite>
   d9ac0:	4680      	mov	r8, r0
   d9ac2:	2800      	cmp	r0, #0
   d9ac4:	f000 8082 	beq.w	d9bcc <pow+0x1c4>
   d9ac8:	f04f 0800 	mov.w	r8, #0
   d9acc:	f04f 0900 	mov.w	r9, #0
   d9ad0:	ec51 0b18 	vmov	r0, r1, d8
   d9ad4:	4642      	mov	r2, r8
   d9ad6:	464b      	mov	r3, r9
   d9ad8:	f002 ff94 	bl	dca04 <__aeabi_dcmpeq>
   d9adc:	2800      	cmp	r0, #0
   d9ade:	d0e0      	beq.n	d9aa2 <pow+0x9a>
   d9ae0:	ec47 6b10 	vmov	d0, r6, r7
   d9ae4:	f002 f896 	bl	dbc14 <finite>
   d9ae8:	2800      	cmp	r0, #0
   d9aea:	d0da      	beq.n	d9aa2 <pow+0x9a>
   d9aec:	ec45 4b10 	vmov	d0, r4, r5
   d9af0:	f002 f890 	bl	dbc14 <finite>
   d9af4:	2800      	cmp	r0, #0
   d9af6:	d0d4      	beq.n	d9aa2 <pow+0x9a>
   d9af8:	4b77      	ldr	r3, [pc, #476]	; (d9cd8 <pow+0x2d0>)
   d9afa:	4a78      	ldr	r2, [pc, #480]	; (d9cdc <pow+0x2d4>)
   d9afc:	f993 3000 	ldrsb.w	r3, [r3]
   d9b00:	9203      	str	r2, [sp, #12]
   d9b02:	2104      	movs	r1, #4
   d9b04:	2200      	movs	r2, #0
   d9b06:	2b02      	cmp	r3, #2
   d9b08:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9b0c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9b10:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d9b14:	9102      	str	r1, [sp, #8]
   d9b16:	920a      	str	r2, [sp, #40]	; 0x28
   d9b18:	d004      	beq.n	d9b24 <pow+0x11c>
   d9b1a:	a802      	add	r0, sp, #8
   d9b1c:	f002 f886 	bl	dbc2c <matherr>
   d9b20:	2800      	cmp	r0, #0
   d9b22:	d14a      	bne.n	d9bba <pow+0x1b2>
   d9b24:	f7fe faf2 	bl	d810c <__errno>
   d9b28:	2322      	movs	r3, #34	; 0x22
   d9b2a:	6003      	str	r3, [r0, #0]
   d9b2c:	e045      	b.n	d9bba <pow+0x1b2>
   d9b2e:	ec45 4b10 	vmov	d0, r4, r5
   d9b32:	f002 f86f 	bl	dbc14 <finite>
   d9b36:	2800      	cmp	r0, #0
   d9b38:	d0b3      	beq.n	d9aa2 <pow+0x9a>
   d9b3a:	4652      	mov	r2, sl
   d9b3c:	465b      	mov	r3, fp
   d9b3e:	4620      	mov	r0, r4
   d9b40:	4629      	mov	r1, r5
   d9b42:	f002 ff69 	bl	dca18 <__aeabi_dcmplt>
   d9b46:	2800      	cmp	r0, #0
   d9b48:	d0ab      	beq.n	d9aa2 <pow+0x9a>
   d9b4a:	4b63      	ldr	r3, [pc, #396]	; (d9cd8 <pow+0x2d0>)
   d9b4c:	9900      	ldr	r1, [sp, #0]
   d9b4e:	4a63      	ldr	r2, [pc, #396]	; (d9cdc <pow+0x2d4>)
   d9b50:	f993 3000 	ldrsb.w	r3, [r3]
   d9b54:	910a      	str	r1, [sp, #40]	; 0x28
   d9b56:	2101      	movs	r1, #1
   d9b58:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9b5c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9b60:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d9b64:	2b00      	cmp	r3, #0
   d9b66:	d16f      	bne.n	d9c48 <pow+0x240>
   d9b68:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d9b6c:	a802      	add	r0, sp, #8
   d9b6e:	f002 f85d 	bl	dbc2c <matherr>
   d9b72:	2800      	cmp	r0, #0
   d9b74:	d06e      	beq.n	d9c54 <pow+0x24c>
   d9b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9b78:	b32b      	cbz	r3, d9bc6 <pow+0x1be>
   d9b7a:	e020      	b.n	d9bbe <pow+0x1b6>
   d9b7c:	2200      	movs	r2, #0
   d9b7e:	2300      	movs	r3, #0
   d9b80:	4620      	mov	r0, r4
   d9b82:	4629      	mov	r1, r5
   d9b84:	f002 ff3e 	bl	dca04 <__aeabi_dcmpeq>
   d9b88:	2800      	cmp	r0, #0
   d9b8a:	d08a      	beq.n	d9aa2 <pow+0x9a>
   d9b8c:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d9cc8 <pow+0x2c0>
   d9b90:	4b52      	ldr	r3, [pc, #328]	; (d9cdc <pow+0x2d4>)
   d9b92:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d9b96:	2201      	movs	r2, #1
   d9b98:	f1b9 0f02 	cmp.w	r9, #2
   d9b9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9ba0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9ba4:	ed8d 8b08 	vstr	d8, [sp, #32]
   d9ba8:	9202      	str	r2, [sp, #8]
   d9baa:	9303      	str	r3, [sp, #12]
   d9bac:	f43f af79 	beq.w	d9aa2 <pow+0x9a>
   d9bb0:	a802      	add	r0, sp, #8
   d9bb2:	f002 f83b 	bl	dbc2c <matherr>
   d9bb6:	2800      	cmp	r0, #0
   d9bb8:	d051      	beq.n	d9c5e <pow+0x256>
   d9bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9bbc:	b11b      	cbz	r3, d9bc6 <pow+0x1be>
   d9bbe:	f7fe faa5 	bl	d810c <__errno>
   d9bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9bc4:	6003      	str	r3, [r0, #0]
   d9bc6:	ed9d 8b08 	vldr	d8, [sp, #32]
   d9bca:	e76a      	b.n	d9aa2 <pow+0x9a>
   d9bcc:	ec47 6b10 	vmov	d0, r6, r7
   d9bd0:	f002 f820 	bl	dbc14 <finite>
   d9bd4:	2800      	cmp	r0, #0
   d9bd6:	f43f af77 	beq.w	d9ac8 <pow+0xc0>
   d9bda:	ec45 4b10 	vmov	d0, r4, r5
   d9bde:	f002 f819 	bl	dbc14 <finite>
   d9be2:	2800      	cmp	r0, #0
   d9be4:	f43f af70 	beq.w	d9ac8 <pow+0xc0>
   d9be8:	ec53 2b18 	vmov	r2, r3, d8
   d9bec:	ee18 0a10 	vmov	r0, s16
   d9bf0:	4619      	mov	r1, r3
   d9bf2:	f002 ff39 	bl	dca68 <__aeabi_dcmpun>
   d9bf6:	4b38      	ldr	r3, [pc, #224]	; (d9cd8 <pow+0x2d0>)
   d9bf8:	2800      	cmp	r0, #0
   d9bfa:	f040 8096 	bne.w	d9d2a <pow+0x322>
   d9bfe:	f993 8000 	ldrsb.w	r8, [r3]
   d9c02:	900a      	str	r0, [sp, #40]	; 0x28
   d9c04:	2303      	movs	r3, #3
   d9c06:	9302      	str	r3, [sp, #8]
   d9c08:	4b34      	ldr	r3, [pc, #208]	; (d9cdc <pow+0x2d4>)
   d9c0a:	9303      	str	r3, [sp, #12]
   d9c0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9c10:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9c14:	f1b8 0f00 	cmp.w	r8, #0
   d9c18:	d126      	bne.n	d9c68 <pow+0x260>
   d9c1a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d9cec <pow+0x2e4>
   d9c1e:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d9c22:	4652      	mov	r2, sl
   d9c24:	465b      	mov	r3, fp
   d9c26:	4630      	mov	r0, r6
   d9c28:	4639      	mov	r1, r7
   d9c2a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d9c2e:	f002 fef3 	bl	dca18 <__aeabi_dcmplt>
   d9c32:	bb48      	cbnz	r0, d9c88 <pow+0x280>
   d9c34:	a802      	add	r0, sp, #8
   d9c36:	f001 fff9 	bl	dbc2c <matherr>
   d9c3a:	2800      	cmp	r0, #0
   d9c3c:	d19b      	bne.n	d9b76 <pow+0x16e>
   d9c3e:	f7fe fa65 	bl	d810c <__errno>
   d9c42:	2322      	movs	r3, #34	; 0x22
   d9c44:	6003      	str	r3, [r0, #0]
   d9c46:	e796      	b.n	d9b76 <pow+0x16e>
   d9c48:	4925      	ldr	r1, [pc, #148]	; (d9ce0 <pow+0x2d8>)
   d9c4a:	2000      	movs	r0, #0
   d9c4c:	2b02      	cmp	r3, #2
   d9c4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d9c52:	d18b      	bne.n	d9b6c <pow+0x164>
   d9c54:	f7fe fa5a 	bl	d810c <__errno>
   d9c58:	2321      	movs	r3, #33	; 0x21
   d9c5a:	6003      	str	r3, [r0, #0]
   d9c5c:	e78b      	b.n	d9b76 <pow+0x16e>
   d9c5e:	f7fe fa55 	bl	d810c <__errno>
   d9c62:	2321      	movs	r3, #33	; 0x21
   d9c64:	6003      	str	r3, [r0, #0]
   d9c66:	e7a8      	b.n	d9bba <pow+0x1b2>
   d9c68:	ed9f 7b19 	vldr	d7, [pc, #100]	; d9cd0 <pow+0x2c8>
   d9c6c:	4652      	mov	r2, sl
   d9c6e:	465b      	mov	r3, fp
   d9c70:	4630      	mov	r0, r6
   d9c72:	4639      	mov	r1, r7
   d9c74:	ed8d 7b08 	vstr	d7, [sp, #32]
   d9c78:	f002 fece 	bl	dca18 <__aeabi_dcmplt>
   d9c7c:	2800      	cmp	r0, #0
   d9c7e:	d137      	bne.n	d9cf0 <pow+0x2e8>
   d9c80:	f1b8 0f02 	cmp.w	r8, #2
   d9c84:	d0db      	beq.n	d9c3e <pow+0x236>
   d9c86:	e7d5      	b.n	d9c34 <pow+0x22c>
   d9c88:	4b16      	ldr	r3, [pc, #88]	; (d9ce4 <pow+0x2dc>)
   d9c8a:	2200      	movs	r2, #0
   d9c8c:	4620      	mov	r0, r4
   d9c8e:	4629      	mov	r1, r5
   d9c90:	f002 fc50 	bl	dc534 <__aeabi_dmul>
   d9c94:	4602      	mov	r2, r0
   d9c96:	460b      	mov	r3, r1
   d9c98:	ec43 2b10 	vmov	d0, r2, r3
   d9c9c:	e9cd 2300 	strd	r2, r3, [sp]
   d9ca0:	f001 ffce 	bl	dbc40 <rint>
   d9ca4:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9ca8:	ec51 0b10 	vmov	r0, r1, d0
   d9cac:	f002 feaa 	bl	dca04 <__aeabi_dcmpeq>
   d9cb0:	2800      	cmp	r0, #0
   d9cb2:	d136      	bne.n	d9d22 <pow+0x31a>
   d9cb4:	4b0c      	ldr	r3, [pc, #48]	; (d9ce8 <pow+0x2e0>)
   d9cb6:	4908      	ldr	r1, [pc, #32]	; (d9cd8 <pow+0x2d0>)
   d9cb8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d9cbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d9cc0:	f991 8000 	ldrsb.w	r8, [r1]
   d9cc4:	e7dc      	b.n	d9c80 <pow+0x278>
   d9cc6:	bf00      	nop
   d9cc8:	00000000 	.word	0x00000000
   d9ccc:	3ff00000 	.word	0x3ff00000
   d9cd0:	00000000 	.word	0x00000000
   d9cd4:	7ff00000 	.word	0x7ff00000
   d9cd8:	2003e3dc 	.word	0x2003e3dc
   d9cdc:	000de4cc 	.word	0x000de4cc
   d9ce0:	fff00000 	.word	0xfff00000
   d9ce4:	3fe00000 	.word	0x3fe00000
   d9ce8:	c7efffff 	.word	0xc7efffff
   d9cec:	47efffff 	.word	0x47efffff
   d9cf0:	4b1c      	ldr	r3, [pc, #112]	; (d9d64 <pow+0x35c>)
   d9cf2:	2200      	movs	r2, #0
   d9cf4:	4620      	mov	r0, r4
   d9cf6:	4629      	mov	r1, r5
   d9cf8:	f002 fc1c 	bl	dc534 <__aeabi_dmul>
   d9cfc:	4602      	mov	r2, r0
   d9cfe:	460b      	mov	r3, r1
   d9d00:	ec43 2b10 	vmov	d0, r2, r3
   d9d04:	e9cd 2300 	strd	r2, r3, [sp]
   d9d08:	f001 ff9a 	bl	dbc40 <rint>
   d9d0c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9d10:	ec51 0b10 	vmov	r0, r1, d0
   d9d14:	f002 fe76 	bl	dca04 <__aeabi_dcmpeq>
   d9d18:	b918      	cbnz	r0, d9d22 <pow+0x31a>
   d9d1a:	4b13      	ldr	r3, [pc, #76]	; (d9d68 <pow+0x360>)
   d9d1c:	2200      	movs	r2, #0
   d9d1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d9d22:	4b12      	ldr	r3, [pc, #72]	; (d9d6c <pow+0x364>)
   d9d24:	f993 8000 	ldrsb.w	r8, [r3]
   d9d28:	e7aa      	b.n	d9c80 <pow+0x278>
   d9d2a:	f993 9000 	ldrsb.w	r9, [r3]
   d9d2e:	4b10      	ldr	r3, [pc, #64]	; (d9d70 <pow+0x368>)
   d9d30:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d9d34:	2201      	movs	r2, #1
   d9d36:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9d3a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9d3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d9d42:	f1b9 0f00 	cmp.w	r9, #0
   d9d46:	f43f af0f 	beq.w	d9b68 <pow+0x160>
   d9d4a:	4652      	mov	r2, sl
   d9d4c:	465b      	mov	r3, fp
   d9d4e:	4650      	mov	r0, sl
   d9d50:	4659      	mov	r1, fp
   d9d52:	f002 fd19 	bl	dc788 <__aeabi_ddiv>
   d9d56:	f1b9 0f02 	cmp.w	r9, #2
   d9d5a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d9d5e:	f43f af79 	beq.w	d9c54 <pow+0x24c>
   d9d62:	e703      	b.n	d9b6c <pow+0x164>
   d9d64:	3fe00000 	.word	0x3fe00000
   d9d68:	fff00000 	.word	0xfff00000
   d9d6c:	2003e3dc 	.word	0x2003e3dc
   d9d70:	000de4cc 	.word	0x000de4cc

000d9d74 <atan2f>:
   d9d74:	f000 bf9e 	b.w	dacb4 <__ieee754_atan2f>

000d9d78 <__ieee754_atan2>:
   d9d78:	ec51 0b11 	vmov	r0, r1, d1
   d9d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9d80:	4243      	negs	r3, r0
   d9d82:	4e79      	ldr	r6, [pc, #484]	; (d9f68 <__ieee754_atan2+0x1f0>)
   d9d84:	4303      	orrs	r3, r0
   d9d86:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   d9d8a:	ea4c 73d3 	orr.w	r3, ip, r3, lsr #31
   d9d8e:	42b3      	cmp	r3, r6
   d9d90:	ec55 4b10 	vmov	r4, r5, d0
   d9d94:	b082      	sub	sp, #8
   d9d96:	d847      	bhi.n	d9e28 <__ieee754_atan2+0xb0>
   d9d98:	4263      	negs	r3, r4
   d9d9a:	4323      	orrs	r3, r4
   d9d9c:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   d9da0:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   d9da4:	42b3      	cmp	r3, r6
   d9da6:	ee10 ea10 	vmov	lr, s0
   d9daa:	46a9      	mov	r9, r5
   d9dac:	d83c      	bhi.n	d9e28 <__ieee754_atan2+0xb0>
   d9dae:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   d9db2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d9db6:	4303      	orrs	r3, r0
   d9db8:	d04c      	beq.n	d9e54 <__ieee754_atan2+0xdc>
   d9dba:	ea4f 78a1 	mov.w	r8, r1, asr #30
   d9dbe:	f008 0802 	and.w	r8, r8, #2
   d9dc2:	ea5a 0304 	orrs.w	r3, sl, r4
   d9dc6:	ea48 78d5 	orr.w	r8, r8, r5, lsr #31
   d9dca:	d038      	beq.n	d9e3e <__ieee754_atan2+0xc6>
   d9dcc:	ea5c 0300 	orrs.w	r3, ip, r0
   d9dd0:	d048      	beq.n	d9e64 <__ieee754_atan2+0xec>
   d9dd2:	45b4      	cmp	ip, r6
   d9dd4:	d05d      	beq.n	d9e92 <__ieee754_atan2+0x11a>
   d9dd6:	45b2      	cmp	sl, r6
   d9dd8:	d044      	beq.n	d9e64 <__ieee754_atan2+0xec>
   d9dda:	ebaa 0c0c 	sub.w	ip, sl, ip
   d9dde:	f1bc 7f74 	cmp.w	ip, #63963136	; 0x3d00000
   d9de2:	ea4f 532c 	mov.w	r3, ip, asr #20
   d9de6:	da4f      	bge.n	d9e88 <__ieee754_atan2+0x110>
   d9de8:	2900      	cmp	r1, #0
   d9dea:	da61      	bge.n	d9eb0 <__ieee754_atan2+0x138>
   d9dec:	333c      	adds	r3, #60	; 0x3c
   d9dee:	da5f      	bge.n	d9eb0 <__ieee754_atan2+0x138>
   d9df0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; d9f30 <__ieee754_atan2+0x1b8>
   d9df4:	ed8d 7b00 	vstr	d7, [sp]
   d9df8:	f1b8 0f01 	cmp.w	r8, #1
   d9dfc:	d078      	beq.n	d9ef0 <__ieee754_atan2+0x178>
   d9dfe:	f1b8 0f02 	cmp.w	r8, #2
   d9e02:	d064      	beq.n	d9ece <__ieee754_atan2+0x156>
   d9e04:	f1b8 0f00 	cmp.w	r8, #0
   d9e08:	d014      	beq.n	d9e34 <__ieee754_atan2+0xbc>
   d9e0a:	a34b      	add	r3, pc, #300	; (adr r3, d9f38 <__ieee754_atan2+0x1c0>)
   d9e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e10:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9e14:	f002 f9d6 	bl	dc1c4 <__aeabi_dsub>
   d9e18:	a349      	add	r3, pc, #292	; (adr r3, d9f40 <__ieee754_atan2+0x1c8>)
   d9e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e1e:	f002 f9d1 	bl	dc1c4 <__aeabi_dsub>
   d9e22:	e9cd 0100 	strd	r0, r1, [sp]
   d9e26:	e005      	b.n	d9e34 <__ieee754_atan2+0xbc>
   d9e28:	4622      	mov	r2, r4
   d9e2a:	462b      	mov	r3, r5
   d9e2c:	f002 f9cc 	bl	dc1c8 <__adddf3>
   d9e30:	e9cd 0100 	strd	r0, r1, [sp]
   d9e34:	ed9d 0b00 	vldr	d0, [sp]
   d9e38:	b002      	add	sp, #8
   d9e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9e3e:	f1b8 0f02 	cmp.w	r8, #2
   d9e42:	d017      	beq.n	d9e74 <__ieee754_atan2+0xfc>
   d9e44:	f1b8 0f03 	cmp.w	r8, #3
   d9e48:	d109      	bne.n	d9e5e <__ieee754_atan2+0xe6>
   d9e4a:	ed9f 7b3f 	vldr	d7, [pc, #252]	; d9f48 <__ieee754_atan2+0x1d0>
   d9e4e:	ed8d 7b00 	vstr	d7, [sp]
   d9e52:	e7ef      	b.n	d9e34 <__ieee754_atan2+0xbc>
   d9e54:	b002      	add	sp, #8
   d9e56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9e5a:	f001 bd1d 	b.w	db898 <atan>
   d9e5e:	ed8d 0b00 	vstr	d0, [sp]
   d9e62:	e7e7      	b.n	d9e34 <__ieee754_atan2+0xbc>
   d9e64:	f1b9 0f00 	cmp.w	r9, #0
   d9e68:	db09      	blt.n	d9e7e <__ieee754_atan2+0x106>
   d9e6a:	ed9f 7b39 	vldr	d7, [pc, #228]	; d9f50 <__ieee754_atan2+0x1d8>
   d9e6e:	ed8d 7b00 	vstr	d7, [sp]
   d9e72:	e7df      	b.n	d9e34 <__ieee754_atan2+0xbc>
   d9e74:	ed9f 7b32 	vldr	d7, [pc, #200]	; d9f40 <__ieee754_atan2+0x1c8>
   d9e78:	ed8d 7b00 	vstr	d7, [sp]
   d9e7c:	e7da      	b.n	d9e34 <__ieee754_atan2+0xbc>
   d9e7e:	ed9f 7b36 	vldr	d7, [pc, #216]	; d9f58 <__ieee754_atan2+0x1e0>
   d9e82:	ed8d 7b00 	vstr	d7, [sp]
   d9e86:	e7d5      	b.n	d9e34 <__ieee754_atan2+0xbc>
   d9e88:	ed9f 7b31 	vldr	d7, [pc, #196]	; d9f50 <__ieee754_atan2+0x1d8>
   d9e8c:	ed8d 7b00 	vstr	d7, [sp]
   d9e90:	e7b2      	b.n	d9df8 <__ieee754_atan2+0x80>
   d9e92:	45e2      	cmp	sl, ip
   d9e94:	f108 38ff 	add.w	r8, r8, #4294967295
   d9e98:	d032      	beq.n	d9f00 <__ieee754_atan2+0x188>
   d9e9a:	f1b8 0f02 	cmp.w	r8, #2
   d9e9e:	d83a      	bhi.n	d9f16 <__ieee754_atan2+0x19e>
   d9ea0:	4b32      	ldr	r3, [pc, #200]	; (d9f6c <__ieee754_atan2+0x1f4>)
   d9ea2:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   d9ea6:	ed98 7b00 	vldr	d7, [r8]
   d9eaa:	ed8d 7b00 	vstr	d7, [sp]
   d9eae:	e7c1      	b.n	d9e34 <__ieee754_atan2+0xbc>
   d9eb0:	4602      	mov	r2, r0
   d9eb2:	460b      	mov	r3, r1
   d9eb4:	4620      	mov	r0, r4
   d9eb6:	4629      	mov	r1, r5
   d9eb8:	f002 fc66 	bl	dc788 <__aeabi_ddiv>
   d9ebc:	ec41 0b10 	vmov	d0, r0, r1
   d9ec0:	f001 fe9e 	bl	dbc00 <fabs>
   d9ec4:	f001 fce8 	bl	db898 <atan>
   d9ec8:	ed8d 0b00 	vstr	d0, [sp]
   d9ecc:	e794      	b.n	d9df8 <__ieee754_atan2+0x80>
   d9ece:	a31a      	add	r3, pc, #104	; (adr r3, d9f38 <__ieee754_atan2+0x1c0>)
   d9ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9ed8:	f002 f974 	bl	dc1c4 <__aeabi_dsub>
   d9edc:	4602      	mov	r2, r0
   d9ede:	460b      	mov	r3, r1
   d9ee0:	a117      	add	r1, pc, #92	; (adr r1, d9f40 <__ieee754_atan2+0x1c8>)
   d9ee2:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9ee6:	f002 f96d 	bl	dc1c4 <__aeabi_dsub>
   d9eea:	e9cd 0100 	strd	r0, r1, [sp]
   d9eee:	e7a1      	b.n	d9e34 <__ieee754_atan2+0xbc>
   d9ef0:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9ef4:	9901      	ldr	r1, [sp, #4]
   d9ef6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9efa:	e9cd 2300 	strd	r2, r3, [sp]
   d9efe:	e799      	b.n	d9e34 <__ieee754_atan2+0xbc>
   d9f00:	f1b8 0f02 	cmp.w	r8, #2
   d9f04:	d80c      	bhi.n	d9f20 <__ieee754_atan2+0x1a8>
   d9f06:	4b1a      	ldr	r3, [pc, #104]	; (d9f70 <__ieee754_atan2+0x1f8>)
   d9f08:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   d9f0c:	ed98 7b00 	vldr	d7, [r8]
   d9f10:	ed8d 7b00 	vstr	d7, [sp]
   d9f14:	e78e      	b.n	d9e34 <__ieee754_atan2+0xbc>
   d9f16:	ed9f 7b06 	vldr	d7, [pc, #24]	; d9f30 <__ieee754_atan2+0x1b8>
   d9f1a:	ed8d 7b00 	vstr	d7, [sp]
   d9f1e:	e789      	b.n	d9e34 <__ieee754_atan2+0xbc>
   d9f20:	ed9f 7b0f 	vldr	d7, [pc, #60]	; d9f60 <__ieee754_atan2+0x1e8>
   d9f24:	ed8d 7b00 	vstr	d7, [sp]
   d9f28:	e784      	b.n	d9e34 <__ieee754_atan2+0xbc>
   d9f2a:	bf00      	nop
   d9f2c:	f3af 8000 	nop.w
	...
   d9f38:	33145c07 	.word	0x33145c07
   d9f3c:	3ca1a626 	.word	0x3ca1a626
   d9f40:	54442d18 	.word	0x54442d18
   d9f44:	400921fb 	.word	0x400921fb
   d9f48:	54442d18 	.word	0x54442d18
   d9f4c:	c00921fb 	.word	0xc00921fb
   d9f50:	54442d18 	.word	0x54442d18
   d9f54:	3ff921fb 	.word	0x3ff921fb
   d9f58:	54442d18 	.word	0x54442d18
   d9f5c:	bff921fb 	.word	0xbff921fb
   d9f60:	54442d18 	.word	0x54442d18
   d9f64:	3fe921fb 	.word	0x3fe921fb
   d9f68:	7ff00000 	.word	0x7ff00000
   d9f6c:	000de4e8 	.word	0x000de4e8
   d9f70:	000de4d0 	.word	0x000de4d0
   d9f74:	00000000 	.word	0x00000000

000d9f78 <__ieee754_pow>:
   d9f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9f7c:	ec57 6b11 	vmov	r6, r7, d1
   d9f80:	ed2d 8b0a 	vpush	{d8-d12}
   d9f84:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d9f88:	ea5a 0206 	orrs.w	r2, sl, r6
   d9f8c:	b089      	sub	sp, #36	; 0x24
   d9f8e:	d03d      	beq.n	da00c <__ieee754_pow+0x94>
   d9f90:	ec55 4b10 	vmov	r4, r5, d0
   d9f94:	4976      	ldr	r1, [pc, #472]	; (da170 <__ieee754_pow+0x1f8>)
   d9f96:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d9f9a:	4588      	cmp	r8, r1
   d9f9c:	ee10 2a10 	vmov	r2, s0
   d9fa0:	46a9      	mov	r9, r5
   d9fa2:	dc2c      	bgt.n	d9ffe <__ieee754_pow+0x86>
   d9fa4:	ee11 3a10 	vmov	r3, s2
   d9fa8:	46bb      	mov	fp, r7
   d9faa:	d03a      	beq.n	da022 <__ieee754_pow+0xaa>
   d9fac:	458a      	cmp	sl, r1
   d9fae:	dc26      	bgt.n	d9ffe <__ieee754_pow+0x86>
   d9fb0:	496f      	ldr	r1, [pc, #444]	; (da170 <__ieee754_pow+0x1f8>)
   d9fb2:	458a      	cmp	sl, r1
   d9fb4:	d021      	beq.n	d9ffa <__ieee754_pow+0x82>
   d9fb6:	f1b9 0f00 	cmp.w	r9, #0
   d9fba:	db3d      	blt.n	da038 <__ieee754_pow+0xc0>
   d9fbc:	2100      	movs	r1, #0
   d9fbe:	9103      	str	r1, [sp, #12]
   d9fc0:	2b00      	cmp	r3, #0
   d9fc2:	d155      	bne.n	da070 <__ieee754_pow+0xf8>
   d9fc4:	4b6a      	ldr	r3, [pc, #424]	; (da170 <__ieee754_pow+0x1f8>)
   d9fc6:	459a      	cmp	sl, r3
   d9fc8:	f000 80a8 	beq.w	da11c <__ieee754_pow+0x1a4>
   d9fcc:	4b69      	ldr	r3, [pc, #420]	; (da174 <__ieee754_pow+0x1fc>)
   d9fce:	459a      	cmp	sl, r3
   d9fd0:	f000 80b6 	beq.w	da140 <__ieee754_pow+0x1c8>
   d9fd4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d9fd8:	f000 8501 	beq.w	da9de <__ieee754_pow+0xa66>
   d9fdc:	4b66      	ldr	r3, [pc, #408]	; (da178 <__ieee754_pow+0x200>)
   d9fde:	459b      	cmp	fp, r3
   d9fe0:	d146      	bne.n	da070 <__ieee754_pow+0xf8>
   d9fe2:	f1b9 0f00 	cmp.w	r9, #0
   d9fe6:	db43      	blt.n	da070 <__ieee754_pow+0xf8>
   d9fe8:	ec45 4b10 	vmov	d0, r4, r5
   d9fec:	b009      	add	sp, #36	; 0x24
   d9fee:	ecbd 8b0a 	vpop	{d8-d12}
   d9ff2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9ff6:	f000 bd99 	b.w	dab2c <__ieee754_sqrt>
   d9ffa:	2b00      	cmp	r3, #0
   d9ffc:	d0db      	beq.n	d9fb6 <__ieee754_pow+0x3e>
   d9ffe:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   da002:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   da006:	ea58 0302 	orrs.w	r3, r8, r2
   da00a:	d10d      	bne.n	da028 <__ieee754_pow+0xb0>
   da00c:	ed9f 7b54 	vldr	d7, [pc, #336]	; da160 <__ieee754_pow+0x1e8>
   da010:	ed8d 7b00 	vstr	d7, [sp]
   da014:	ed9d 0b00 	vldr	d0, [sp]
   da018:	b009      	add	sp, #36	; 0x24
   da01a:	ecbd 8b0a 	vpop	{d8-d12}
   da01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da022:	b90c      	cbnz	r4, da028 <__ieee754_pow+0xb0>
   da024:	45c2      	cmp	sl, r8
   da026:	ddc3      	ble.n	d9fb0 <__ieee754_pow+0x38>
   da028:	4854      	ldr	r0, [pc, #336]	; (da17c <__ieee754_pow+0x204>)
   da02a:	b009      	add	sp, #36	; 0x24
   da02c:	ecbd 8b0a 	vpop	{d8-d12}
   da030:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da034:	f001 bdfc 	b.w	dbc30 <nan>
   da038:	4951      	ldr	r1, [pc, #324]	; (da180 <__ieee754_pow+0x208>)
   da03a:	458a      	cmp	sl, r1
   da03c:	f300 8087 	bgt.w	da14e <__ieee754_pow+0x1d6>
   da040:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   da044:	458a      	cmp	sl, r1
   da046:	dd0f      	ble.n	da068 <__ieee754_pow+0xf0>
   da048:	ea4f 512a 	mov.w	r1, sl, asr #20
   da04c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   da050:	2914      	cmp	r1, #20
   da052:	f340 84ce 	ble.w	da9f2 <__ieee754_pow+0xa7a>
   da056:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   da05a:	fa23 f001 	lsr.w	r0, r3, r1
   da05e:	fa00 f101 	lsl.w	r1, r0, r1
   da062:	4299      	cmp	r1, r3
   da064:	f000 8520 	beq.w	daaa8 <__ieee754_pow+0xb30>
   da068:	2100      	movs	r1, #0
   da06a:	9103      	str	r1, [sp, #12]
   da06c:	2b00      	cmp	r3, #0
   da06e:	d0ad      	beq.n	d9fcc <__ieee754_pow+0x54>
   da070:	ec45 4b10 	vmov	d0, r4, r5
   da074:	9206      	str	r2, [sp, #24]
   da076:	f001 fdc3 	bl	dbc00 <fabs>
   da07a:	9a06      	ldr	r2, [sp, #24]
   da07c:	ed8d 0b00 	vstr	d0, [sp]
   da080:	bb5a      	cbnz	r2, da0da <__ieee754_pow+0x162>
   da082:	f1b8 0f00 	cmp.w	r8, #0
   da086:	d004      	beq.n	da092 <__ieee754_pow+0x11a>
   da088:	4b3a      	ldr	r3, [pc, #232]	; (da174 <__ieee754_pow+0x1fc>)
   da08a:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   da08e:	429a      	cmp	r2, r3
   da090:	d123      	bne.n	da0da <__ieee754_pow+0x162>
   da092:	f1bb 0f00 	cmp.w	fp, #0
   da096:	da07      	bge.n	da0a8 <__ieee754_pow+0x130>
   da098:	e9dd 2300 	ldrd	r2, r3, [sp]
   da09c:	4935      	ldr	r1, [pc, #212]	; (da174 <__ieee754_pow+0x1fc>)
   da09e:	2000      	movs	r0, #0
   da0a0:	f002 fb72 	bl	dc788 <__aeabi_ddiv>
   da0a4:	e9cd 0100 	strd	r0, r1, [sp]
   da0a8:	f1b9 0f00 	cmp.w	r9, #0
   da0ac:	dab2      	bge.n	da014 <__ieee754_pow+0x9c>
   da0ae:	9b03      	ldr	r3, [sp, #12]
   da0b0:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   da0b4:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   da0b8:	ea58 0303 	orrs.w	r3, r8, r3
   da0bc:	f040 84be 	bne.w	daa3c <__ieee754_pow+0xac4>
   da0c0:	e9dd 2300 	ldrd	r2, r3, [sp]
   da0c4:	4610      	mov	r0, r2
   da0c6:	4619      	mov	r1, r3
   da0c8:	f002 f87c 	bl	dc1c4 <__aeabi_dsub>
   da0cc:	4602      	mov	r2, r0
   da0ce:	460b      	mov	r3, r1
   da0d0:	f002 fb5a 	bl	dc788 <__aeabi_ddiv>
   da0d4:	e9cd 0100 	strd	r0, r1, [sp]
   da0d8:	e79c      	b.n	da014 <__ieee754_pow+0x9c>
   da0da:	9a03      	ldr	r2, [sp, #12]
   da0dc:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   da0e0:	3b01      	subs	r3, #1
   da0e2:	9306      	str	r3, [sp, #24]
   da0e4:	4313      	orrs	r3, r2
   da0e6:	d035      	beq.n	da154 <__ieee754_pow+0x1dc>
   da0e8:	4b26      	ldr	r3, [pc, #152]	; (da184 <__ieee754_pow+0x20c>)
   da0ea:	459a      	cmp	sl, r3
   da0ec:	dd4e      	ble.n	da18c <__ieee754_pow+0x214>
   da0ee:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   da0f2:	459a      	cmp	sl, r3
   da0f4:	4b24      	ldr	r3, [pc, #144]	; (da188 <__ieee754_pow+0x210>)
   da0f6:	f340 83ed 	ble.w	da8d4 <__ieee754_pow+0x95c>
   da0fa:	4598      	cmp	r8, r3
   da0fc:	f340 836b 	ble.w	da7d6 <__ieee754_pow+0x85e>
   da100:	f1bb 0f00 	cmp.w	fp, #0
   da104:	f340 836b 	ble.w	da7de <__ieee754_pow+0x866>
   da108:	a317      	add	r3, pc, #92	; (adr r3, da168 <__ieee754_pow+0x1f0>)
   da10a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da10e:	4610      	mov	r0, r2
   da110:	4619      	mov	r1, r3
   da112:	f002 fa0f 	bl	dc534 <__aeabi_dmul>
   da116:	e9cd 0100 	strd	r0, r1, [sp]
   da11a:	e77b      	b.n	da014 <__ieee754_pow+0x9c>
   da11c:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   da120:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   da124:	4313      	orrs	r3, r2
   da126:	f43f af71 	beq.w	da00c <__ieee754_pow+0x94>
   da12a:	4b17      	ldr	r3, [pc, #92]	; (da188 <__ieee754_pow+0x210>)
   da12c:	4598      	cmp	r8, r3
   da12e:	f340 8388 	ble.w	da842 <__ieee754_pow+0x8ca>
   da132:	f1bb 0f00 	cmp.w	fp, #0
   da136:	f2c0 8352 	blt.w	da7de <__ieee754_pow+0x866>
   da13a:	e9cd 6700 	strd	r6, r7, [sp]
   da13e:	e769      	b.n	da014 <__ieee754_pow+0x9c>
   da140:	f1bb 0f00 	cmp.w	fp, #0
   da144:	f2c0 8441 	blt.w	da9ca <__ieee754_pow+0xa52>
   da148:	e9cd 4500 	strd	r4, r5, [sp]
   da14c:	e762      	b.n	da014 <__ieee754_pow+0x9c>
   da14e:	2102      	movs	r1, #2
   da150:	9103      	str	r1, [sp, #12]
   da152:	e735      	b.n	d9fc0 <__ieee754_pow+0x48>
   da154:	4622      	mov	r2, r4
   da156:	462b      	mov	r3, r5
   da158:	e7b4      	b.n	da0c4 <__ieee754_pow+0x14c>
   da15a:	bf00      	nop
   da15c:	f3af 8000 	nop.w
   da160:	00000000 	.word	0x00000000
   da164:	3ff00000 	.word	0x3ff00000
   da168:	8800759c 	.word	0x8800759c
   da16c:	7e37e43c 	.word	0x7e37e43c
   da170:	7ff00000 	.word	0x7ff00000
   da174:	3ff00000 	.word	0x3ff00000
   da178:	3fe00000 	.word	0x3fe00000
   da17c:	000de500 	.word	0x000de500
   da180:	433fffff 	.word	0x433fffff
   da184:	41e00000 	.word	0x41e00000
   da188:	3fefffff 	.word	0x3fefffff
   da18c:	4be4      	ldr	r3, [pc, #912]	; (da520 <__ieee754_pow+0x5a8>)
   da18e:	ea09 0303 	and.w	r3, r9, r3
   da192:	2b00      	cmp	r3, #0
   da194:	f040 8416 	bne.w	da9c4 <__ieee754_pow+0xa4c>
   da198:	e9dd 0100 	ldrd	r0, r1, [sp]
   da19c:	4be1      	ldr	r3, [pc, #900]	; (da524 <__ieee754_pow+0x5ac>)
   da19e:	2200      	movs	r2, #0
   da1a0:	f002 f9c8 	bl	dc534 <__aeabi_dmul>
   da1a4:	e9cd 0100 	strd	r0, r1, [sp]
   da1a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
   da1ac:	f06f 0034 	mvn.w	r0, #52	; 0x34
   da1b0:	ea4f 5328 	mov.w	r3, r8, asr #20
   da1b4:	49dc      	ldr	r1, [pc, #880]	; (da528 <__ieee754_pow+0x5b0>)
   da1b6:	f3c8 0213 	ubfx	r2, r8, #0, #20
   da1ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   da1be:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   da1c2:	1818      	adds	r0, r3, r0
   da1c4:	428a      	cmp	r2, r1
   da1c6:	9007      	str	r0, [sp, #28]
   da1c8:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   da1cc:	f340 83e9 	ble.w	da9a2 <__ieee754_pow+0xa2a>
   da1d0:	4bd6      	ldr	r3, [pc, #856]	; (da52c <__ieee754_pow+0x5b4>)
   da1d2:	429a      	cmp	r2, r3
   da1d4:	f340 843e 	ble.w	daa54 <__ieee754_pow+0xadc>
   da1d8:	ed9f 7bbb 	vldr	d7, [pc, #748]	; da4c8 <__ieee754_pow+0x550>
   da1dc:	eeb0 ba47 	vmov.f32	s22, s14
   da1e0:	eef0 ba67 	vmov.f32	s23, s15
   da1e4:	eeb0 ca47 	vmov.f32	s24, s14
   da1e8:	eef0 ca67 	vmov.f32	s25, s15
   da1ec:	ed9f 7bb8 	vldr	d7, [pc, #736]	; da4d0 <__ieee754_pow+0x558>
   da1f0:	3001      	adds	r0, #1
   da1f2:	ec54 3b17 	vmov	r3, r4, d7
   da1f6:	9007      	str	r0, [sp, #28]
   da1f8:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   da1fc:	f04f 0900 	mov.w	r9, #0
   da200:	e9dd ab00 	ldrd	sl, fp, [sp]
   da204:	ec44 3b18 	vmov	d8, r3, r4
   da208:	461a      	mov	r2, r3
   da20a:	4650      	mov	r0, sl
   da20c:	4623      	mov	r3, r4
   da20e:	4641      	mov	r1, r8
   da210:	f001 ffd8 	bl	dc1c4 <__aeabi_dsub>
   da214:	ec53 2b18 	vmov	r2, r3, d8
   da218:	4604      	mov	r4, r0
   da21a:	460d      	mov	r5, r1
   da21c:	4650      	mov	r0, sl
   da21e:	4641      	mov	r1, r8
   da220:	f001 ffd2 	bl	dc1c8 <__adddf3>
   da224:	4602      	mov	r2, r0
   da226:	460b      	mov	r3, r1
   da228:	2000      	movs	r0, #0
   da22a:	49c1      	ldr	r1, [pc, #772]	; (da530 <__ieee754_pow+0x5b8>)
   da22c:	f002 faac 	bl	dc788 <__aeabi_ddiv>
   da230:	ec45 4b1a 	vmov	d10, r4, r5
   da234:	ec41 0b19 	vmov	d9, r0, r1
   da238:	ec51 0b1a 	vmov	r0, r1, d10
   da23c:	ec53 2b19 	vmov	r2, r3, d9
   da240:	f002 f978 	bl	dc534 <__aeabi_dmul>
   da244:	46c3      	mov	fp, r8
   da246:	ea4f 0868 	mov.w	r8, r8, asr #1
   da24a:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   da24e:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   da252:	eb03 0509 	add.w	r5, r3, r9
   da256:	460a      	mov	r2, r1
   da258:	2300      	movs	r3, #0
   da25a:	4601      	mov	r1, r0
   da25c:	e9cd 1200 	strd	r1, r2, [sp]
   da260:	9300      	str	r3, [sp, #0]
   da262:	e9dd 8900 	ldrd	r8, r9, [sp]
   da266:	2400      	movs	r4, #0
   da268:	e9cd 1204 	strd	r1, r2, [sp, #16]
   da26c:	462b      	mov	r3, r5
   da26e:	4622      	mov	r2, r4
   da270:	4640      	mov	r0, r8
   da272:	4649      	mov	r1, r9
   da274:	f002 f95e 	bl	dc534 <__aeabi_dmul>
   da278:	4602      	mov	r2, r0
   da27a:	460b      	mov	r3, r1
   da27c:	ec51 0b1a 	vmov	r0, r1, d10
   da280:	f001 ffa0 	bl	dc1c4 <__aeabi_dsub>
   da284:	ec41 0b17 	vmov	d7, r0, r1
   da288:	ec53 2b18 	vmov	r2, r3, d8
   da28c:	4620      	mov	r0, r4
   da28e:	4629      	mov	r1, r5
   da290:	ec55 4b17 	vmov	r4, r5, d7
   da294:	f001 ff96 	bl	dc1c4 <__aeabi_dsub>
   da298:	4602      	mov	r2, r0
   da29a:	460b      	mov	r3, r1
   da29c:	4650      	mov	r0, sl
   da29e:	4659      	mov	r1, fp
   da2a0:	f001 ff90 	bl	dc1c4 <__aeabi_dsub>
   da2a4:	4642      	mov	r2, r8
   da2a6:	464b      	mov	r3, r9
   da2a8:	f002 f944 	bl	dc534 <__aeabi_dmul>
   da2ac:	4602      	mov	r2, r0
   da2ae:	460b      	mov	r3, r1
   da2b0:	4620      	mov	r0, r4
   da2b2:	4629      	mov	r1, r5
   da2b4:	f001 ff86 	bl	dc1c4 <__aeabi_dsub>
   da2b8:	ec53 2b19 	vmov	r2, r3, d9
   da2bc:	f002 f93a 	bl	dc534 <__aeabi_dmul>
   da2c0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   da2c4:	4604      	mov	r4, r0
   da2c6:	460d      	mov	r5, r1
   da2c8:	4652      	mov	r2, sl
   da2ca:	465b      	mov	r3, fp
   da2cc:	4650      	mov	r0, sl
   da2ce:	4659      	mov	r1, fp
   da2d0:	f002 f930 	bl	dc534 <__aeabi_dmul>
   da2d4:	a380      	add	r3, pc, #512	; (adr r3, da4d8 <__ieee754_pow+0x560>)
   da2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   da2da:	ec45 4b1a 	vmov	d10, r4, r5
   da2de:	4604      	mov	r4, r0
   da2e0:	460d      	mov	r5, r1
   da2e2:	f002 f927 	bl	dc534 <__aeabi_dmul>
   da2e6:	a37e      	add	r3, pc, #504	; (adr r3, da4e0 <__ieee754_pow+0x568>)
   da2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   da2ec:	f001 ff6c 	bl	dc1c8 <__adddf3>
   da2f0:	4622      	mov	r2, r4
   da2f2:	462b      	mov	r3, r5
   da2f4:	f002 f91e 	bl	dc534 <__aeabi_dmul>
   da2f8:	a37b      	add	r3, pc, #492	; (adr r3, da4e8 <__ieee754_pow+0x570>)
   da2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   da2fe:	f001 ff63 	bl	dc1c8 <__adddf3>
   da302:	4622      	mov	r2, r4
   da304:	462b      	mov	r3, r5
   da306:	f002 f915 	bl	dc534 <__aeabi_dmul>
   da30a:	a379      	add	r3, pc, #484	; (adr r3, da4f0 <__ieee754_pow+0x578>)
   da30c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da310:	f001 ff5a 	bl	dc1c8 <__adddf3>
   da314:	4622      	mov	r2, r4
   da316:	462b      	mov	r3, r5
   da318:	f002 f90c 	bl	dc534 <__aeabi_dmul>
   da31c:	a376      	add	r3, pc, #472	; (adr r3, da4f8 <__ieee754_pow+0x580>)
   da31e:	e9d3 2300 	ldrd	r2, r3, [r3]
   da322:	f001 ff51 	bl	dc1c8 <__adddf3>
   da326:	4622      	mov	r2, r4
   da328:	462b      	mov	r3, r5
   da32a:	f002 f903 	bl	dc534 <__aeabi_dmul>
   da32e:	a374      	add	r3, pc, #464	; (adr r3, da500 <__ieee754_pow+0x588>)
   da330:	e9d3 2300 	ldrd	r2, r3, [r3]
   da334:	f001 ff48 	bl	dc1c8 <__adddf3>
   da338:	4622      	mov	r2, r4
   da33a:	462b      	mov	r3, r5
   da33c:	4604      	mov	r4, r0
   da33e:	460d      	mov	r5, r1
   da340:	4610      	mov	r0, r2
   da342:	4619      	mov	r1, r3
   da344:	f002 f8f6 	bl	dc534 <__aeabi_dmul>
   da348:	4602      	mov	r2, r0
   da34a:	460b      	mov	r3, r1
   da34c:	4620      	mov	r0, r4
   da34e:	4629      	mov	r1, r5
   da350:	f002 f8f0 	bl	dc534 <__aeabi_dmul>
   da354:	4642      	mov	r2, r8
   da356:	4604      	mov	r4, r0
   da358:	460d      	mov	r5, r1
   da35a:	464b      	mov	r3, r9
   da35c:	4650      	mov	r0, sl
   da35e:	4659      	mov	r1, fp
   da360:	e9cd ab04 	strd	sl, fp, [sp, #16]
   da364:	f001 ff30 	bl	dc1c8 <__adddf3>
   da368:	ec53 2b1a 	vmov	r2, r3, d10
   da36c:	f002 f8e2 	bl	dc534 <__aeabi_dmul>
   da370:	4622      	mov	r2, r4
   da372:	462b      	mov	r3, r5
   da374:	f001 ff28 	bl	dc1c8 <__adddf3>
   da378:	4642      	mov	r2, r8
   da37a:	4604      	mov	r4, r0
   da37c:	460d      	mov	r5, r1
   da37e:	464b      	mov	r3, r9
   da380:	4640      	mov	r0, r8
   da382:	4649      	mov	r1, r9
   da384:	f002 f8d6 	bl	dc534 <__aeabi_dmul>
   da388:	ec45 4b19 	vmov	d9, r4, r5
   da38c:	4b69      	ldr	r3, [pc, #420]	; (da534 <__ieee754_pow+0x5bc>)
   da38e:	2200      	movs	r2, #0
   da390:	4682      	mov	sl, r0
   da392:	468b      	mov	fp, r1
   da394:	f001 ff18 	bl	dc1c8 <__adddf3>
   da398:	ec53 2b19 	vmov	r2, r3, d9
   da39c:	f001 ff14 	bl	dc1c8 <__adddf3>
   da3a0:	9c00      	ldr	r4, [sp, #0]
   da3a2:	460d      	mov	r5, r1
   da3a4:	4622      	mov	r2, r4
   da3a6:	462b      	mov	r3, r5
   da3a8:	4640      	mov	r0, r8
   da3aa:	4649      	mov	r1, r9
   da3ac:	f002 f8c2 	bl	dc534 <__aeabi_dmul>
   da3b0:	4b60      	ldr	r3, [pc, #384]	; (da534 <__ieee754_pow+0x5bc>)
   da3b2:	4680      	mov	r8, r0
   da3b4:	4689      	mov	r9, r1
   da3b6:	2200      	movs	r2, #0
   da3b8:	4620      	mov	r0, r4
   da3ba:	4629      	mov	r1, r5
   da3bc:	f001 ff02 	bl	dc1c4 <__aeabi_dsub>
   da3c0:	4652      	mov	r2, sl
   da3c2:	465b      	mov	r3, fp
   da3c4:	f001 fefe 	bl	dc1c4 <__aeabi_dsub>
   da3c8:	4602      	mov	r2, r0
   da3ca:	460b      	mov	r3, r1
   da3cc:	ec51 0b19 	vmov	r0, r1, d9
   da3d0:	f001 fef8 	bl	dc1c4 <__aeabi_dsub>
   da3d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   da3d8:	f002 f8ac 	bl	dc534 <__aeabi_dmul>
   da3dc:	ec49 8b18 	vmov	d8, r8, r9
   da3e0:	4622      	mov	r2, r4
   da3e2:	4680      	mov	r8, r0
   da3e4:	4689      	mov	r9, r1
   da3e6:	462b      	mov	r3, r5
   da3e8:	ec51 0b1a 	vmov	r0, r1, d10
   da3ec:	f002 f8a2 	bl	dc534 <__aeabi_dmul>
   da3f0:	4602      	mov	r2, r0
   da3f2:	460b      	mov	r3, r1
   da3f4:	4640      	mov	r0, r8
   da3f6:	4649      	mov	r1, r9
   da3f8:	f001 fee6 	bl	dc1c8 <__adddf3>
   da3fc:	4682      	mov	sl, r0
   da3fe:	468b      	mov	fp, r1
   da400:	4652      	mov	r2, sl
   da402:	465b      	mov	r3, fp
   da404:	ec51 0b18 	vmov	r0, r1, d8
   da408:	f001 fede 	bl	dc1c8 <__adddf3>
   da40c:	9c00      	ldr	r4, [sp, #0]
   da40e:	a33e      	add	r3, pc, #248	; (adr r3, da508 <__ieee754_pow+0x590>)
   da410:	e9d3 2300 	ldrd	r2, r3, [r3]
   da414:	4620      	mov	r0, r4
   da416:	460d      	mov	r5, r1
   da418:	f002 f88c 	bl	dc534 <__aeabi_dmul>
   da41c:	ec53 2b18 	vmov	r2, r3, d8
   da420:	4680      	mov	r8, r0
   da422:	4689      	mov	r9, r1
   da424:	4620      	mov	r0, r4
   da426:	4629      	mov	r1, r5
   da428:	f001 fecc 	bl	dc1c4 <__aeabi_dsub>
   da42c:	4602      	mov	r2, r0
   da42e:	460b      	mov	r3, r1
   da430:	4650      	mov	r0, sl
   da432:	4659      	mov	r1, fp
   da434:	f001 fec6 	bl	dc1c4 <__aeabi_dsub>
   da438:	a335      	add	r3, pc, #212	; (adr r3, da510 <__ieee754_pow+0x598>)
   da43a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da43e:	f002 f879 	bl	dc534 <__aeabi_dmul>
   da442:	ec49 8b19 	vmov	d9, r8, r9
   da446:	a334      	add	r3, pc, #208	; (adr r3, da518 <__ieee754_pow+0x5a0>)
   da448:	e9d3 2300 	ldrd	r2, r3, [r3]
   da44c:	4680      	mov	r8, r0
   da44e:	4689      	mov	r9, r1
   da450:	4620      	mov	r0, r4
   da452:	4629      	mov	r1, r5
   da454:	f002 f86e 	bl	dc534 <__aeabi_dmul>
   da458:	4602      	mov	r2, r0
   da45a:	460b      	mov	r3, r1
   da45c:	4640      	mov	r0, r8
   da45e:	4649      	mov	r1, r9
   da460:	f001 feb2 	bl	dc1c8 <__adddf3>
   da464:	ec53 2b1c 	vmov	r2, r3, d12
   da468:	f001 feae 	bl	dc1c8 <__adddf3>
   da46c:	4682      	mov	sl, r0
   da46e:	9807      	ldr	r0, [sp, #28]
   da470:	468b      	mov	fp, r1
   da472:	f001 fff5 	bl	dc460 <__aeabi_i2d>
   da476:	4652      	mov	r2, sl
   da478:	4680      	mov	r8, r0
   da47a:	4689      	mov	r9, r1
   da47c:	465b      	mov	r3, fp
   da47e:	ec51 0b19 	vmov	r0, r1, d9
   da482:	f001 fea1 	bl	dc1c8 <__adddf3>
   da486:	ec53 2b1b 	vmov	r2, r3, d11
   da48a:	f001 fe9d 	bl	dc1c8 <__adddf3>
   da48e:	4642      	mov	r2, r8
   da490:	464b      	mov	r3, r9
   da492:	f001 fe99 	bl	dc1c8 <__adddf3>
   da496:	9c00      	ldr	r4, [sp, #0]
   da498:	4642      	mov	r2, r8
   da49a:	464b      	mov	r3, r9
   da49c:	4620      	mov	r0, r4
   da49e:	460d      	mov	r5, r1
   da4a0:	f001 fe90 	bl	dc1c4 <__aeabi_dsub>
   da4a4:	ec53 2b1b 	vmov	r2, r3, d11
   da4a8:	f001 fe8c 	bl	dc1c4 <__aeabi_dsub>
   da4ac:	ec53 2b19 	vmov	r2, r3, d9
   da4b0:	f001 fe88 	bl	dc1c4 <__aeabi_dsub>
   da4b4:	4602      	mov	r2, r0
   da4b6:	460b      	mov	r3, r1
   da4b8:	4650      	mov	r0, sl
   da4ba:	4659      	mov	r1, fp
   da4bc:	f001 fe82 	bl	dc1c4 <__aeabi_dsub>
   da4c0:	4682      	mov	sl, r0
   da4c2:	468b      	mov	fp, r1
   da4c4:	e038      	b.n	da538 <__ieee754_pow+0x5c0>
   da4c6:	bf00      	nop
	...
   da4d4:	3ff00000 	.word	0x3ff00000
   da4d8:	4a454eef 	.word	0x4a454eef
   da4dc:	3fca7e28 	.word	0x3fca7e28
   da4e0:	93c9db65 	.word	0x93c9db65
   da4e4:	3fcd864a 	.word	0x3fcd864a
   da4e8:	a91d4101 	.word	0xa91d4101
   da4ec:	3fd17460 	.word	0x3fd17460
   da4f0:	518f264d 	.word	0x518f264d
   da4f4:	3fd55555 	.word	0x3fd55555
   da4f8:	db6fabff 	.word	0xdb6fabff
   da4fc:	3fdb6db6 	.word	0x3fdb6db6
   da500:	33333303 	.word	0x33333303
   da504:	3fe33333 	.word	0x3fe33333
   da508:	e0000000 	.word	0xe0000000
   da50c:	3feec709 	.word	0x3feec709
   da510:	dc3a03fd 	.word	0xdc3a03fd
   da514:	3feec709 	.word	0x3feec709
   da518:	145b01f5 	.word	0x145b01f5
   da51c:	be3e2fe0 	.word	0xbe3e2fe0
   da520:	7ff00000 	.word	0x7ff00000
   da524:	43400000 	.word	0x43400000
   da528:	0003988e 	.word	0x0003988e
   da52c:	000bb679 	.word	0x000bb679
   da530:	3ff00000 	.word	0x3ff00000
   da534:	40080000 	.word	0x40080000
   da538:	9b03      	ldr	r3, [sp, #12]
   da53a:	9a06      	ldr	r2, [sp, #24]
   da53c:	3b01      	subs	r3, #1
   da53e:	4313      	orrs	r3, r2
   da540:	f040 8178 	bne.w	da834 <__ieee754_pow+0x8bc>
   da544:	ed9f 7bc4 	vldr	d7, [pc, #784]	; da858 <__ieee754_pow+0x8e0>
   da548:	eeb0 9a47 	vmov.f32	s18, s14
   da54c:	eef0 9a67 	vmov.f32	s19, s15
   da550:	2300      	movs	r3, #0
   da552:	e9cd 6700 	strd	r6, r7, [sp]
   da556:	9300      	str	r3, [sp, #0]
   da558:	e9dd 8900 	ldrd	r8, r9, [sp]
   da55c:	4630      	mov	r0, r6
   da55e:	4642      	mov	r2, r8
   da560:	4639      	mov	r1, r7
   da562:	464b      	mov	r3, r9
   da564:	f001 fe2e 	bl	dc1c4 <__aeabi_dsub>
   da568:	4622      	mov	r2, r4
   da56a:	462b      	mov	r3, r5
   da56c:	f001 ffe2 	bl	dc534 <__aeabi_dmul>
   da570:	4632      	mov	r2, r6
   da572:	463b      	mov	r3, r7
   da574:	4606      	mov	r6, r0
   da576:	460f      	mov	r7, r1
   da578:	4650      	mov	r0, sl
   da57a:	4659      	mov	r1, fp
   da57c:	f001 ffda 	bl	dc534 <__aeabi_dmul>
   da580:	4602      	mov	r2, r0
   da582:	460b      	mov	r3, r1
   da584:	4630      	mov	r0, r6
   da586:	4639      	mov	r1, r7
   da588:	f001 fe1e 	bl	dc1c8 <__adddf3>
   da58c:	4642      	mov	r2, r8
   da58e:	4682      	mov	sl, r0
   da590:	468b      	mov	fp, r1
   da592:	464b      	mov	r3, r9
   da594:	4620      	mov	r0, r4
   da596:	4629      	mov	r1, r5
   da598:	f001 ffcc 	bl	dc534 <__aeabi_dmul>
   da59c:	4606      	mov	r6, r0
   da59e:	460f      	mov	r7, r1
   da5a0:	463b      	mov	r3, r7
   da5a2:	4650      	mov	r0, sl
   da5a4:	4659      	mov	r1, fp
   da5a6:	4632      	mov	r2, r6
   da5a8:	f001 fe0e 	bl	dc1c8 <__adddf3>
   da5ac:	4bc4      	ldr	r3, [pc, #784]	; (da8c0 <__ieee754_pow+0x948>)
   da5ae:	4299      	cmp	r1, r3
   da5b0:	4604      	mov	r4, r0
   da5b2:	460d      	mov	r5, r1
   da5b4:	4688      	mov	r8, r1
   da5b6:	f340 8117 	ble.w	da7e8 <__ieee754_pow+0x870>
   da5ba:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   da5be:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   da5c2:	4303      	orrs	r3, r0
   da5c4:	f040 822a 	bne.w	daa1c <__ieee754_pow+0xaa4>
   da5c8:	a3a5      	add	r3, pc, #660	; (adr r3, da860 <__ieee754_pow+0x8e8>)
   da5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   da5ce:	4650      	mov	r0, sl
   da5d0:	4659      	mov	r1, fp
   da5d2:	f001 fdf9 	bl	dc1c8 <__adddf3>
   da5d6:	4632      	mov	r2, r6
   da5d8:	ec41 0b18 	vmov	d8, r0, r1
   da5dc:	463b      	mov	r3, r7
   da5de:	4620      	mov	r0, r4
   da5e0:	4629      	mov	r1, r5
   da5e2:	f001 fdef 	bl	dc1c4 <__aeabi_dsub>
   da5e6:	4602      	mov	r2, r0
   da5e8:	460b      	mov	r3, r1
   da5ea:	ec51 0b18 	vmov	r0, r1, d8
   da5ee:	f002 fa31 	bl	dca54 <__aeabi_dcmpgt>
   da5f2:	2800      	cmp	r0, #0
   da5f4:	f040 8212 	bne.w	daa1c <__ieee754_pow+0xaa4>
   da5f8:	f3c8 530a 	ubfx	r3, r8, #20, #11
   da5fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   da600:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   da604:	fa42 f303 	asr.w	r3, r2, r3
   da608:	4443      	add	r3, r8
   da60a:	49ae      	ldr	r1, [pc, #696]	; (da8c4 <__ieee754_pow+0x94c>)
   da60c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   da610:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   da614:	fa41 fc02 	asr.w	ip, r1, r2
   da618:	f3c3 0513 	ubfx	r5, r3, #0, #20
   da61c:	ea23 010c 	bic.w	r1, r3, ip
   da620:	f1c2 0414 	rsb	r4, r2, #20
   da624:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   da628:	f1b8 0f00 	cmp.w	r8, #0
   da62c:	460b      	mov	r3, r1
   da62e:	fa45 f104 	asr.w	r1, r5, r4
   da632:	9103      	str	r1, [sp, #12]
   da634:	f04f 0000 	mov.w	r0, #0
   da638:	bfb8      	it	lt
   da63a:	4249      	neglt	r1, r1
   da63c:	4602      	mov	r2, r0
   da63e:	bfb8      	it	lt
   da640:	9103      	strlt	r1, [sp, #12]
   da642:	4630      	mov	r0, r6
   da644:	4639      	mov	r1, r7
   da646:	f001 fdbd 	bl	dc1c4 <__aeabi_dsub>
   da64a:	4606      	mov	r6, r0
   da64c:	460f      	mov	r7, r1
   da64e:	463b      	mov	r3, r7
   da650:	4650      	mov	r0, sl
   da652:	4659      	mov	r1, fp
   da654:	4632      	mov	r2, r6
   da656:	f001 fdb7 	bl	dc1c8 <__adddf3>
   da65a:	9b03      	ldr	r3, [sp, #12]
   da65c:	051b      	lsls	r3, r3, #20
   da65e:	9300      	str	r3, [sp, #0]
   da660:	460d      	mov	r5, r1
   da662:	2400      	movs	r4, #0
   da664:	a380      	add	r3, pc, #512	; (adr r3, da868 <__ieee754_pow+0x8f0>)
   da666:	e9d3 2300 	ldrd	r2, r3, [r3]
   da66a:	4620      	mov	r0, r4
   da66c:	4629      	mov	r1, r5
   da66e:	f001 ff61 	bl	dc534 <__aeabi_dmul>
   da672:	4632      	mov	r2, r6
   da674:	4680      	mov	r8, r0
   da676:	4689      	mov	r9, r1
   da678:	463b      	mov	r3, r7
   da67a:	4620      	mov	r0, r4
   da67c:	4629      	mov	r1, r5
   da67e:	f001 fda1 	bl	dc1c4 <__aeabi_dsub>
   da682:	4602      	mov	r2, r0
   da684:	460b      	mov	r3, r1
   da686:	4650      	mov	r0, sl
   da688:	4659      	mov	r1, fp
   da68a:	f001 fd9b 	bl	dc1c4 <__aeabi_dsub>
   da68e:	a378      	add	r3, pc, #480	; (adr r3, da870 <__ieee754_pow+0x8f8>)
   da690:	e9d3 2300 	ldrd	r2, r3, [r3]
   da694:	f001 ff4e 	bl	dc534 <__aeabi_dmul>
   da698:	a377      	add	r3, pc, #476	; (adr r3, da878 <__ieee754_pow+0x900>)
   da69a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da69e:	4606      	mov	r6, r0
   da6a0:	460f      	mov	r7, r1
   da6a2:	4620      	mov	r0, r4
   da6a4:	4629      	mov	r1, r5
   da6a6:	f001 ff45 	bl	dc534 <__aeabi_dmul>
   da6aa:	4602      	mov	r2, r0
   da6ac:	460b      	mov	r3, r1
   da6ae:	4630      	mov	r0, r6
   da6b0:	4639      	mov	r1, r7
   da6b2:	f001 fd89 	bl	dc1c8 <__adddf3>
   da6b6:	4606      	mov	r6, r0
   da6b8:	460f      	mov	r7, r1
   da6ba:	4632      	mov	r2, r6
   da6bc:	463b      	mov	r3, r7
   da6be:	4640      	mov	r0, r8
   da6c0:	4649      	mov	r1, r9
   da6c2:	f001 fd81 	bl	dc1c8 <__adddf3>
   da6c6:	4642      	mov	r2, r8
   da6c8:	464b      	mov	r3, r9
   da6ca:	4604      	mov	r4, r0
   da6cc:	460d      	mov	r5, r1
   da6ce:	f001 fd79 	bl	dc1c4 <__aeabi_dsub>
   da6d2:	4602      	mov	r2, r0
   da6d4:	460b      	mov	r3, r1
   da6d6:	4630      	mov	r0, r6
   da6d8:	4639      	mov	r1, r7
   da6da:	f001 fd73 	bl	dc1c4 <__aeabi_dsub>
   da6de:	4622      	mov	r2, r4
   da6e0:	4682      	mov	sl, r0
   da6e2:	468b      	mov	fp, r1
   da6e4:	462b      	mov	r3, r5
   da6e6:	4620      	mov	r0, r4
   da6e8:	4629      	mov	r1, r5
   da6ea:	f001 ff23 	bl	dc534 <__aeabi_dmul>
   da6ee:	a364      	add	r3, pc, #400	; (adr r3, da880 <__ieee754_pow+0x908>)
   da6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   da6f4:	4606      	mov	r6, r0
   da6f6:	460f      	mov	r7, r1
   da6f8:	f001 ff1c 	bl	dc534 <__aeabi_dmul>
   da6fc:	a362      	add	r3, pc, #392	; (adr r3, da888 <__ieee754_pow+0x910>)
   da6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   da702:	f001 fd5f 	bl	dc1c4 <__aeabi_dsub>
   da706:	4632      	mov	r2, r6
   da708:	463b      	mov	r3, r7
   da70a:	f001 ff13 	bl	dc534 <__aeabi_dmul>
   da70e:	a360      	add	r3, pc, #384	; (adr r3, da890 <__ieee754_pow+0x918>)
   da710:	e9d3 2300 	ldrd	r2, r3, [r3]
   da714:	f001 fd58 	bl	dc1c8 <__adddf3>
   da718:	4632      	mov	r2, r6
   da71a:	463b      	mov	r3, r7
   da71c:	f001 ff0a 	bl	dc534 <__aeabi_dmul>
   da720:	a35d      	add	r3, pc, #372	; (adr r3, da898 <__ieee754_pow+0x920>)
   da722:	e9d3 2300 	ldrd	r2, r3, [r3]
   da726:	f001 fd4d 	bl	dc1c4 <__aeabi_dsub>
   da72a:	4632      	mov	r2, r6
   da72c:	463b      	mov	r3, r7
   da72e:	f001 ff01 	bl	dc534 <__aeabi_dmul>
   da732:	a35b      	add	r3, pc, #364	; (adr r3, da8a0 <__ieee754_pow+0x928>)
   da734:	e9d3 2300 	ldrd	r2, r3, [r3]
   da738:	f001 fd46 	bl	dc1c8 <__adddf3>
   da73c:	4632      	mov	r2, r6
   da73e:	463b      	mov	r3, r7
   da740:	f001 fef8 	bl	dc534 <__aeabi_dmul>
   da744:	4602      	mov	r2, r0
   da746:	460b      	mov	r3, r1
   da748:	4620      	mov	r0, r4
   da74a:	4629      	mov	r1, r5
   da74c:	f001 fd3a 	bl	dc1c4 <__aeabi_dsub>
   da750:	4606      	mov	r6, r0
   da752:	460f      	mov	r7, r1
   da754:	4632      	mov	r2, r6
   da756:	463b      	mov	r3, r7
   da758:	4620      	mov	r0, r4
   da75a:	4629      	mov	r1, r5
   da75c:	f001 feea 	bl	dc534 <__aeabi_dmul>
   da760:	2200      	movs	r2, #0
   da762:	4680      	mov	r8, r0
   da764:	4689      	mov	r9, r1
   da766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da76a:	4630      	mov	r0, r6
   da76c:	4639      	mov	r1, r7
   da76e:	f001 fd29 	bl	dc1c4 <__aeabi_dsub>
   da772:	4602      	mov	r2, r0
   da774:	460b      	mov	r3, r1
   da776:	4640      	mov	r0, r8
   da778:	4649      	mov	r1, r9
   da77a:	f002 f805 	bl	dc788 <__aeabi_ddiv>
   da77e:	4652      	mov	r2, sl
   da780:	4606      	mov	r6, r0
   da782:	460f      	mov	r7, r1
   da784:	465b      	mov	r3, fp
   da786:	4620      	mov	r0, r4
   da788:	4629      	mov	r1, r5
   da78a:	f001 fed3 	bl	dc534 <__aeabi_dmul>
   da78e:	4652      	mov	r2, sl
   da790:	465b      	mov	r3, fp
   da792:	f001 fd19 	bl	dc1c8 <__adddf3>
   da796:	4602      	mov	r2, r0
   da798:	460b      	mov	r3, r1
   da79a:	4630      	mov	r0, r6
   da79c:	4639      	mov	r1, r7
   da79e:	f001 fd11 	bl	dc1c4 <__aeabi_dsub>
   da7a2:	4622      	mov	r2, r4
   da7a4:	462b      	mov	r3, r5
   da7a6:	f001 fd0d 	bl	dc1c4 <__aeabi_dsub>
   da7aa:	4602      	mov	r2, r0
   da7ac:	460b      	mov	r3, r1
   da7ae:	2000      	movs	r0, #0
   da7b0:	4945      	ldr	r1, [pc, #276]	; (da8c8 <__ieee754_pow+0x950>)
   da7b2:	f001 fd07 	bl	dc1c4 <__aeabi_dsub>
   da7b6:	460b      	mov	r3, r1
   da7b8:	9900      	ldr	r1, [sp, #0]
   da7ba:	4419      	add	r1, r3
   da7bc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da7c0:	4602      	mov	r2, r0
   da7c2:	f2c0 8169 	blt.w	daa98 <__ieee754_pow+0xb20>
   da7c6:	4610      	mov	r0, r2
   da7c8:	ec53 2b19 	vmov	r2, r3, d9
   da7cc:	f001 feb2 	bl	dc534 <__aeabi_dmul>
   da7d0:	e9cd 0100 	strd	r0, r1, [sp]
   da7d4:	e41e      	b.n	da014 <__ieee754_pow+0x9c>
   da7d6:	f1bb 0f00 	cmp.w	fp, #0
   da7da:	f6ff ac95 	blt.w	da108 <__ieee754_pow+0x190>
   da7de:	ed9f 7b32 	vldr	d7, [pc, #200]	; da8a8 <__ieee754_pow+0x930>
   da7e2:	ed8d 7b00 	vstr	d7, [sp]
   da7e6:	e415      	b.n	da014 <__ieee754_pow+0x9c>
   da7e8:	f8df c0e4 	ldr.w	ip, [pc, #228]	; da8d0 <__ieee754_pow+0x958>
   da7ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da7f0:	4563      	cmp	r3, ip
   da7f2:	f340 810b 	ble.w	daa0c <__ieee754_pow+0xa94>
   da7f6:	4b35      	ldr	r3, [pc, #212]	; (da8cc <__ieee754_pow+0x954>)
   da7f8:	440b      	add	r3, r1
   da7fa:	4303      	orrs	r3, r0
   da7fc:	d10a      	bne.n	da814 <__ieee754_pow+0x89c>
   da7fe:	4632      	mov	r2, r6
   da800:	463b      	mov	r3, r7
   da802:	f001 fcdf 	bl	dc1c4 <__aeabi_dsub>
   da806:	4652      	mov	r2, sl
   da808:	465b      	mov	r3, fp
   da80a:	f002 f919 	bl	dca40 <__aeabi_dcmpge>
   da80e:	2800      	cmp	r0, #0
   da810:	f43f aef2 	beq.w	da5f8 <__ieee754_pow+0x680>
   da814:	a326      	add	r3, pc, #152	; (adr r3, da8b0 <__ieee754_pow+0x938>)
   da816:	e9d3 2300 	ldrd	r2, r3, [r3]
   da81a:	ec51 0b19 	vmov	r0, r1, d9
   da81e:	f001 fe89 	bl	dc534 <__aeabi_dmul>
   da822:	a323      	add	r3, pc, #140	; (adr r3, da8b0 <__ieee754_pow+0x938>)
   da824:	e9d3 2300 	ldrd	r2, r3, [r3]
   da828:	f001 fe84 	bl	dc534 <__aeabi_dmul>
   da82c:	e9cd 0100 	strd	r0, r1, [sp]
   da830:	f7ff bbf0 	b.w	da014 <__ieee754_pow+0x9c>
   da834:	ed9f 7b20 	vldr	d7, [pc, #128]	; da8b8 <__ieee754_pow+0x940>
   da838:	eeb0 9a47 	vmov.f32	s18, s14
   da83c:	eef0 9a67 	vmov.f32	s19, s15
   da840:	e686      	b.n	da550 <__ieee754_pow+0x5d8>
   da842:	f1bb 0f00 	cmp.w	fp, #0
   da846:	daca      	bge.n	da7de <__ieee754_pow+0x866>
   da848:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   da84c:	9600      	str	r6, [sp, #0]
   da84e:	9301      	str	r3, [sp, #4]
   da850:	f7ff bbe0 	b.w	da014 <__ieee754_pow+0x9c>
   da854:	f3af 8000 	nop.w
   da858:	00000000 	.word	0x00000000
   da85c:	bff00000 	.word	0xbff00000
   da860:	652b82fe 	.word	0x652b82fe
   da864:	3c971547 	.word	0x3c971547
   da868:	00000000 	.word	0x00000000
   da86c:	3fe62e43 	.word	0x3fe62e43
   da870:	fefa39ef 	.word	0xfefa39ef
   da874:	3fe62e42 	.word	0x3fe62e42
   da878:	0ca86c39 	.word	0x0ca86c39
   da87c:	be205c61 	.word	0xbe205c61
   da880:	72bea4d0 	.word	0x72bea4d0
   da884:	3e663769 	.word	0x3e663769
   da888:	c5d26bf1 	.word	0xc5d26bf1
   da88c:	3ebbbd41 	.word	0x3ebbbd41
   da890:	af25de2c 	.word	0xaf25de2c
   da894:	3f11566a 	.word	0x3f11566a
   da898:	16bebd93 	.word	0x16bebd93
   da89c:	3f66c16c 	.word	0x3f66c16c
   da8a0:	5555553e 	.word	0x5555553e
   da8a4:	3fc55555 	.word	0x3fc55555
	...
   da8b0:	c2f8f359 	.word	0xc2f8f359
   da8b4:	01a56e1f 	.word	0x01a56e1f
   da8b8:	00000000 	.word	0x00000000
   da8bc:	3ff00000 	.word	0x3ff00000
   da8c0:	408fffff 	.word	0x408fffff
   da8c4:	000fffff 	.word	0x000fffff
   da8c8:	3ff00000 	.word	0x3ff00000
   da8cc:	3f6f3400 	.word	0x3f6f3400
   da8d0:	4090cbff 	.word	0x4090cbff
   da8d4:	4598      	cmp	r8, r3
   da8d6:	f6ff af7e 	blt.w	da7d6 <__ieee754_pow+0x85e>
   da8da:	4b91      	ldr	r3, [pc, #580]	; (dab20 <__ieee754_pow+0xba8>)
   da8dc:	4598      	cmp	r8, r3
   da8de:	f73f ac0f 	bgt.w	da100 <__ieee754_pow+0x188>
   da8e2:	4b8f      	ldr	r3, [pc, #572]	; (dab20 <__ieee754_pow+0xba8>)
   da8e4:	2200      	movs	r2, #0
   da8e6:	e9dd 0100 	ldrd	r0, r1, [sp]
   da8ea:	f001 fc6b 	bl	dc1c4 <__aeabi_dsub>
   da8ee:	a378      	add	r3, pc, #480	; (adr r3, daad0 <__ieee754_pow+0xb58>)
   da8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   da8f4:	4604      	mov	r4, r0
   da8f6:	460d      	mov	r5, r1
   da8f8:	f001 fe1c 	bl	dc534 <__aeabi_dmul>
   da8fc:	a376      	add	r3, pc, #472	; (adr r3, daad8 <__ieee754_pow+0xb60>)
   da8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   da902:	4682      	mov	sl, r0
   da904:	468b      	mov	fp, r1
   da906:	4620      	mov	r0, r4
   da908:	4629      	mov	r1, r5
   da90a:	f001 fe13 	bl	dc534 <__aeabi_dmul>
   da90e:	4b85      	ldr	r3, [pc, #532]	; (dab24 <__ieee754_pow+0xbac>)
   da910:	4680      	mov	r8, r0
   da912:	4689      	mov	r9, r1
   da914:	2200      	movs	r2, #0
   da916:	4620      	mov	r0, r4
   da918:	4629      	mov	r1, r5
   da91a:	f001 fe0b 	bl	dc534 <__aeabi_dmul>
   da91e:	4602      	mov	r2, r0
   da920:	460b      	mov	r3, r1
   da922:	a16f      	add	r1, pc, #444	; (adr r1, daae0 <__ieee754_pow+0xb68>)
   da924:	e9d1 0100 	ldrd	r0, r1, [r1]
   da928:	f001 fc4c 	bl	dc1c4 <__aeabi_dsub>
   da92c:	4622      	mov	r2, r4
   da92e:	462b      	mov	r3, r5
   da930:	f001 fe00 	bl	dc534 <__aeabi_dmul>
   da934:	4602      	mov	r2, r0
   da936:	460b      	mov	r3, r1
   da938:	2000      	movs	r0, #0
   da93a:	497b      	ldr	r1, [pc, #492]	; (dab28 <__ieee754_pow+0xbb0>)
   da93c:	f001 fc42 	bl	dc1c4 <__aeabi_dsub>
   da940:	4622      	mov	r2, r4
   da942:	462b      	mov	r3, r5
   da944:	4604      	mov	r4, r0
   da946:	460d      	mov	r5, r1
   da948:	4610      	mov	r0, r2
   da94a:	4619      	mov	r1, r3
   da94c:	f001 fdf2 	bl	dc534 <__aeabi_dmul>
   da950:	4602      	mov	r2, r0
   da952:	460b      	mov	r3, r1
   da954:	4620      	mov	r0, r4
   da956:	4629      	mov	r1, r5
   da958:	f001 fdec 	bl	dc534 <__aeabi_dmul>
   da95c:	a362      	add	r3, pc, #392	; (adr r3, daae8 <__ieee754_pow+0xb70>)
   da95e:	e9d3 2300 	ldrd	r2, r3, [r3]
   da962:	f001 fde7 	bl	dc534 <__aeabi_dmul>
   da966:	4602      	mov	r2, r0
   da968:	460b      	mov	r3, r1
   da96a:	4640      	mov	r0, r8
   da96c:	4649      	mov	r1, r9
   da96e:	f001 fc29 	bl	dc1c4 <__aeabi_dsub>
   da972:	4680      	mov	r8, r0
   da974:	4689      	mov	r9, r1
   da976:	4650      	mov	r0, sl
   da978:	4659      	mov	r1, fp
   da97a:	4642      	mov	r2, r8
   da97c:	464b      	mov	r3, r9
   da97e:	f001 fc23 	bl	dc1c8 <__adddf3>
   da982:	2400      	movs	r4, #0
   da984:	4652      	mov	r2, sl
   da986:	465b      	mov	r3, fp
   da988:	4620      	mov	r0, r4
   da98a:	460d      	mov	r5, r1
   da98c:	f001 fc1a 	bl	dc1c4 <__aeabi_dsub>
   da990:	4602      	mov	r2, r0
   da992:	460b      	mov	r3, r1
   da994:	4640      	mov	r0, r8
   da996:	4649      	mov	r1, r9
   da998:	f001 fc14 	bl	dc1c4 <__aeabi_dsub>
   da99c:	4682      	mov	sl, r0
   da99e:	468b      	mov	fp, r1
   da9a0:	e5ca      	b.n	da538 <__ieee754_pow+0x5c0>
   da9a2:	ed9f 7b53 	vldr	d7, [pc, #332]	; daaf0 <__ieee754_pow+0xb78>
   da9a6:	eeb0 ba47 	vmov.f32	s22, s14
   da9aa:	eef0 ba67 	vmov.f32	s23, s15
   da9ae:	eeb0 ca47 	vmov.f32	s24, s14
   da9b2:	eef0 ca67 	vmov.f32	s25, s15
   da9b6:	ed9f 7b50 	vldr	d7, [pc, #320]	; daaf8 <__ieee754_pow+0xb80>
   da9ba:	f04f 0900 	mov.w	r9, #0
   da9be:	ec54 3b17 	vmov	r3, r4, d7
   da9c2:	e41d      	b.n	da200 <__ieee754_pow+0x288>
   da9c4:	2000      	movs	r0, #0
   da9c6:	f7ff bbf3 	b.w	da1b0 <__ieee754_pow+0x238>
   da9ca:	4955      	ldr	r1, [pc, #340]	; (dab20 <__ieee754_pow+0xba8>)
   da9cc:	4622      	mov	r2, r4
   da9ce:	462b      	mov	r3, r5
   da9d0:	2000      	movs	r0, #0
   da9d2:	f001 fed9 	bl	dc788 <__aeabi_ddiv>
   da9d6:	e9cd 0100 	strd	r0, r1, [sp]
   da9da:	f7ff bb1b 	b.w	da014 <__ieee754_pow+0x9c>
   da9de:	4622      	mov	r2, r4
   da9e0:	462b      	mov	r3, r5
   da9e2:	4620      	mov	r0, r4
   da9e4:	4629      	mov	r1, r5
   da9e6:	f001 fda5 	bl	dc534 <__aeabi_dmul>
   da9ea:	e9cd 0100 	strd	r0, r1, [sp]
   da9ee:	f7ff bb11 	b.w	da014 <__ieee754_pow+0x9c>
   da9f2:	2b00      	cmp	r3, #0
   da9f4:	d142      	bne.n	daa7c <__ieee754_pow+0xb04>
   da9f6:	f1c1 0114 	rsb	r1, r1, #20
   da9fa:	fa4a f001 	asr.w	r0, sl, r1
   da9fe:	fa00 f101 	lsl.w	r1, r0, r1
   daa02:	4551      	cmp	r1, sl
   daa04:	d05a      	beq.n	daabc <__ieee754_pow+0xb44>
   daa06:	9303      	str	r3, [sp, #12]
   daa08:	f7ff bae0 	b.w	d9fcc <__ieee754_pow+0x54>
   daa0c:	4a46      	ldr	r2, [pc, #280]	; (dab28 <__ieee754_pow+0xbb0>)
   daa0e:	4293      	cmp	r3, r2
   daa10:	dc5b      	bgt.n	daaca <__ieee754_pow+0xb52>
   daa12:	e9dd 1200 	ldrd	r1, r2, [sp]
   daa16:	9100      	str	r1, [sp, #0]
   daa18:	9103      	str	r1, [sp, #12]
   daa1a:	e622      	b.n	da662 <__ieee754_pow+0x6ea>
   daa1c:	a338      	add	r3, pc, #224	; (adr r3, dab00 <__ieee754_pow+0xb88>)
   daa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa22:	ec51 0b19 	vmov	r0, r1, d9
   daa26:	f001 fd85 	bl	dc534 <__aeabi_dmul>
   daa2a:	a335      	add	r3, pc, #212	; (adr r3, dab00 <__ieee754_pow+0xb88>)
   daa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa30:	f001 fd80 	bl	dc534 <__aeabi_dmul>
   daa34:	e9cd 0100 	strd	r0, r1, [sp]
   daa38:	f7ff baec 	b.w	da014 <__ieee754_pow+0x9c>
   daa3c:	9b03      	ldr	r3, [sp, #12]
   daa3e:	2b01      	cmp	r3, #1
   daa40:	f47f aae8 	bne.w	da014 <__ieee754_pow+0x9c>
   daa44:	e9dd 2100 	ldrd	r2, r1, [sp]
   daa48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   daa4c:	e9cd 2300 	strd	r2, r3, [sp]
   daa50:	f7ff bae0 	b.w	da014 <__ieee754_pow+0x9c>
   daa54:	ed9f 7b2c 	vldr	d7, [pc, #176]	; dab08 <__ieee754_pow+0xb90>
   daa58:	eeb0 ba47 	vmov.f32	s22, s14
   daa5c:	eef0 ba67 	vmov.f32	s23, s15
   daa60:	ed9f 7b2b 	vldr	d7, [pc, #172]	; dab10 <__ieee754_pow+0xb98>
   daa64:	eeb0 ca47 	vmov.f32	s24, s14
   daa68:	eef0 ca67 	vmov.f32	s25, s15
   daa6c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; dab18 <__ieee754_pow+0xba0>
   daa70:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   daa74:	ec54 3b17 	vmov	r3, r4, d7
   daa78:	f7ff bbc2 	b.w	da200 <__ieee754_pow+0x288>
   daa7c:	ec45 4b10 	vmov	d0, r4, r5
   daa80:	9203      	str	r2, [sp, #12]
   daa82:	f001 f8bd 	bl	dbc00 <fabs>
   daa86:	9a03      	ldr	r2, [sp, #12]
   daa88:	ed8d 0b00 	vstr	d0, [sp]
   daa8c:	2a00      	cmp	r2, #0
   daa8e:	f47f ab61 	bne.w	da154 <__ieee754_pow+0x1dc>
   daa92:	9203      	str	r2, [sp, #12]
   daa94:	f7ff baf5 	b.w	da082 <__ieee754_pow+0x10a>
   daa98:	9803      	ldr	r0, [sp, #12]
   daa9a:	ec43 2b10 	vmov	d0, r2, r3
   daa9e:	f001 f963 	bl	dbd68 <scalbn>
   daaa2:	ec51 0b10 	vmov	r0, r1, d0
   daaa6:	e68f      	b.n	da7c8 <__ieee754_pow+0x850>
   daaa8:	f000 0001 	and.w	r0, r0, #1
   daaac:	f1c0 0102 	rsb	r1, r0, #2
   daab0:	9103      	str	r1, [sp, #12]
   daab2:	2b00      	cmp	r3, #0
   daab4:	f43f aa8a 	beq.w	d9fcc <__ieee754_pow+0x54>
   daab8:	f7ff bada 	b.w	da070 <__ieee754_pow+0xf8>
   daabc:	f000 0001 	and.w	r0, r0, #1
   daac0:	f1c0 0302 	rsb	r3, r0, #2
   daac4:	9303      	str	r3, [sp, #12]
   daac6:	f7ff ba81 	b.w	d9fcc <__ieee754_pow+0x54>
   daaca:	151b      	asrs	r3, r3, #20
   daacc:	e596      	b.n	da5fc <__ieee754_pow+0x684>
   daace:	bf00      	nop
   daad0:	60000000 	.word	0x60000000
   daad4:	3ff71547 	.word	0x3ff71547
   daad8:	f85ddf44 	.word	0xf85ddf44
   daadc:	3e54ae0b 	.word	0x3e54ae0b
   daae0:	55555555 	.word	0x55555555
   daae4:	3fd55555 	.word	0x3fd55555
   daae8:	652b82fe 	.word	0x652b82fe
   daaec:	3ff71547 	.word	0x3ff71547
	...
   daafc:	3ff00000 	.word	0x3ff00000
   dab00:	8800759c 	.word	0x8800759c
   dab04:	7e37e43c 	.word	0x7e37e43c
   dab08:	40000000 	.word	0x40000000
   dab0c:	3fe2b803 	.word	0x3fe2b803
   dab10:	43cfd006 	.word	0x43cfd006
   dab14:	3e4cfdeb 	.word	0x3e4cfdeb
   dab18:	00000000 	.word	0x00000000
   dab1c:	3ff80000 	.word	0x3ff80000
   dab20:	3ff00000 	.word	0x3ff00000
   dab24:	3fd00000 	.word	0x3fd00000
   dab28:	3fe00000 	.word	0x3fe00000

000dab2c <__ieee754_sqrt>:
   dab2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dab30:	4a5f      	ldr	r2, [pc, #380]	; (dacb0 <__ieee754_sqrt+0x184>)
   dab32:	ec57 6b10 	vmov	r6, r7, d0
   dab36:	43ba      	bics	r2, r7
   dab38:	f000 8098 	beq.w	dac6c <__ieee754_sqrt+0x140>
   dab3c:	2f00      	cmp	r7, #0
   dab3e:	ee10 4a10 	vmov	r4, s0
   dab42:	463b      	mov	r3, r7
   dab44:	dd4e      	ble.n	dabe4 <__ieee754_sqrt+0xb8>
   dab46:	1539      	asrs	r1, r7, #20
   dab48:	d05b      	beq.n	dac02 <__ieee754_sqrt+0xd6>
   dab4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   dab4e:	07ca      	lsls	r2, r1, #31
   dab50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dab54:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   dab58:	d403      	bmi.n	dab62 <__ieee754_sqrt+0x36>
   dab5a:	005b      	lsls	r3, r3, #1
   dab5c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   dab60:	0064      	lsls	r4, r4, #1
   dab62:	0fe2      	lsrs	r2, r4, #31
   dab64:	f04f 0c00 	mov.w	ip, #0
   dab68:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   dab6c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   dab70:	0064      	lsls	r4, r4, #1
   dab72:	4666      	mov	r6, ip
   dab74:	2516      	movs	r5, #22
   dab76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   dab7a:	18b1      	adds	r1, r6, r2
   dab7c:	4299      	cmp	r1, r3
   dab7e:	dc02      	bgt.n	dab86 <__ieee754_sqrt+0x5a>
   dab80:	1a5b      	subs	r3, r3, r1
   dab82:	188e      	adds	r6, r1, r2
   dab84:	4494      	add	ip, r2
   dab86:	005b      	lsls	r3, r3, #1
   dab88:	3d01      	subs	r5, #1
   dab8a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   dab8e:	ea4f 0252 	mov.w	r2, r2, lsr #1
   dab92:	ea4f 0444 	mov.w	r4, r4, lsl #1
   dab96:	d1f0      	bne.n	dab7a <__ieee754_sqrt+0x4e>
   dab98:	462f      	mov	r7, r5
   dab9a:	2020      	movs	r0, #32
   dab9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   daba0:	e009      	b.n	dabb6 <__ieee754_sqrt+0x8a>
   daba2:	d03e      	beq.n	dac22 <__ieee754_sqrt+0xf6>
   daba4:	0fe1      	lsrs	r1, r4, #31
   daba6:	3801      	subs	r0, #1
   daba8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   dabac:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   dabb0:	ea4f 0444 	mov.w	r4, r4, lsl #1
   dabb4:	d03e      	beq.n	dac34 <__ieee754_sqrt+0x108>
   dabb6:	42b3      	cmp	r3, r6
   dabb8:	eb02 0105 	add.w	r1, r2, r5
   dabbc:	ddf1      	ble.n	daba2 <__ieee754_sqrt+0x76>
   dabbe:	2900      	cmp	r1, #0
   dabc0:	eb01 0502 	add.w	r5, r1, r2
   dabc4:	db09      	blt.n	dabda <__ieee754_sqrt+0xae>
   dabc6:	46b0      	mov	r8, r6
   dabc8:	1b9b      	subs	r3, r3, r6
   dabca:	42a1      	cmp	r1, r4
   dabcc:	bf88      	it	hi
   dabce:	f103 33ff 	addhi.w	r3, r3, #4294967295
   dabd2:	1a64      	subs	r4, r4, r1
   dabd4:	4417      	add	r7, r2
   dabd6:	4646      	mov	r6, r8
   dabd8:	e7e4      	b.n	daba4 <__ieee754_sqrt+0x78>
   dabda:	2d00      	cmp	r5, #0
   dabdc:	dbf3      	blt.n	dabc6 <__ieee754_sqrt+0x9a>
   dabde:	f106 0801 	add.w	r8, r6, #1
   dabe2:	e7f1      	b.n	dabc8 <__ieee754_sqrt+0x9c>
   dabe4:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   dabe8:	4332      	orrs	r2, r6
   dabea:	d036      	beq.n	dac5a <__ieee754_sqrt+0x12e>
   dabec:	2f00      	cmp	r7, #0
   dabee:	d14d      	bne.n	dac8c <__ieee754_sqrt+0x160>
   dabf0:	4639      	mov	r1, r7
   dabf2:	0ae2      	lsrs	r2, r4, #11
   dabf4:	3915      	subs	r1, #21
   dabf6:	0564      	lsls	r4, r4, #21
   dabf8:	4613      	mov	r3, r2
   dabfa:	2a00      	cmp	r2, #0
   dabfc:	d0f9      	beq.n	dabf2 <__ieee754_sqrt+0xc6>
   dabfe:	02d7      	lsls	r7, r2, #11
   dac00:	d451      	bmi.n	daca6 <__ieee754_sqrt+0x17a>
   dac02:	2000      	movs	r0, #0
   dac04:	005b      	lsls	r3, r3, #1
   dac06:	02de      	lsls	r6, r3, #11
   dac08:	4605      	mov	r5, r0
   dac0a:	f100 0001 	add.w	r0, r0, #1
   dac0e:	d5f9      	bpl.n	dac04 <__ieee754_sqrt+0xd8>
   dac10:	461a      	mov	r2, r3
   dac12:	4623      	mov	r3, r4
   dac14:	4084      	lsls	r4, r0
   dac16:	f1c0 0020 	rsb	r0, r0, #32
   dac1a:	40c3      	lsrs	r3, r0
   dac1c:	4313      	orrs	r3, r2
   dac1e:	1b49      	subs	r1, r1, r5
   dac20:	e793      	b.n	dab4a <__ieee754_sqrt+0x1e>
   dac22:	42a1      	cmp	r1, r4
   dac24:	d8be      	bhi.n	daba4 <__ieee754_sqrt+0x78>
   dac26:	2900      	cmp	r1, #0
   dac28:	eb01 0502 	add.w	r5, r1, r2
   dac2c:	dbd5      	blt.n	dabda <__ieee754_sqrt+0xae>
   dac2e:	4698      	mov	r8, r3
   dac30:	2300      	movs	r3, #0
   dac32:	e7ce      	b.n	dabd2 <__ieee754_sqrt+0xa6>
   dac34:	4323      	orrs	r3, r4
   dac36:	d112      	bne.n	dac5e <__ieee754_sqrt+0x132>
   dac38:	0878      	lsrs	r0, r7, #1
   dac3a:	ea4f 016c 	mov.w	r1, ip, asr #1
   dac3e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   dac42:	f01c 0f01 	tst.w	ip, #1
   dac46:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   dac4a:	bf18      	it	ne
   dac4c:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   dac50:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   dac54:	4602      	mov	r2, r0
   dac56:	ec43 2b10 	vmov	d0, r2, r3
   dac5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dac5e:	1c7b      	adds	r3, r7, #1
   dac60:	bf16      	itet	ne
   dac62:	1c78      	addne	r0, r7, #1
   dac64:	f10c 0c01 	addeq.w	ip, ip, #1
   dac68:	0840      	lsrne	r0, r0, #1
   dac6a:	e7e6      	b.n	dac3a <__ieee754_sqrt+0x10e>
   dac6c:	ee10 2a10 	vmov	r2, s0
   dac70:	ee10 0a10 	vmov	r0, s0
   dac74:	463b      	mov	r3, r7
   dac76:	4639      	mov	r1, r7
   dac78:	f001 fc5c 	bl	dc534 <__aeabi_dmul>
   dac7c:	4632      	mov	r2, r6
   dac7e:	463b      	mov	r3, r7
   dac80:	f001 faa2 	bl	dc1c8 <__adddf3>
   dac84:	ec41 0b10 	vmov	d0, r0, r1
   dac88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dac8c:	ee10 2a10 	vmov	r2, s0
   dac90:	4630      	mov	r0, r6
   dac92:	4639      	mov	r1, r7
   dac94:	f001 fa96 	bl	dc1c4 <__aeabi_dsub>
   dac98:	4602      	mov	r2, r0
   dac9a:	460b      	mov	r3, r1
   dac9c:	f001 fd74 	bl	dc788 <__aeabi_ddiv>
   daca0:	ec41 0b10 	vmov	d0, r0, r1
   daca4:	e7d9      	b.n	dac5a <__ieee754_sqrt+0x12e>
   daca6:	4623      	mov	r3, r4
   daca8:	2020      	movs	r0, #32
   dacaa:	f04f 35ff 	mov.w	r5, #4294967295
   dacae:	e7b4      	b.n	dac1a <__ieee754_sqrt+0xee>
   dacb0:	7ff00000 	.word	0x7ff00000

000dacb4 <__ieee754_atan2f>:
   dacb4:	b510      	push	{r4, lr}
   dacb6:	b082      	sub	sp, #8
   dacb8:	edcd 0a01 	vstr	s1, [sp, #4]
   dacbc:	9b01      	ldr	r3, [sp, #4]
   dacbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   dacc2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   dacc6:	eef0 7a40 	vmov.f32	s15, s0
   dacca:	dc30      	bgt.n	dad2e <__ieee754_atan2f+0x7a>
   daccc:	ee10 0a10 	vmov	r0, s0
   dacd0:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   dacd4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   dacd8:	dc29      	bgt.n	dad2e <__ieee754_atan2f+0x7a>
   dacda:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   dacde:	d042      	beq.n	dad66 <__ieee754_atan2f+0xb2>
   dace0:	179c      	asrs	r4, r3, #30
   dace2:	f004 0402 	and.w	r4, r4, #2
   dace6:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   dacea:	b331      	cbz	r1, dad3a <__ieee754_atan2f+0x86>
   dacec:	b37a      	cbz	r2, dad4e <__ieee754_atan2f+0x9a>
   dacee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   dacf2:	d040      	beq.n	dad76 <__ieee754_atan2f+0xc2>
   dacf4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   dacf8:	d029      	beq.n	dad4e <__ieee754_atan2f+0x9a>
   dacfa:	1a8a      	subs	r2, r1, r2
   dacfc:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   dad00:	ea4f 51e2 	mov.w	r1, r2, asr #23
   dad04:	da34      	bge.n	dad70 <__ieee754_atan2f+0xbc>
   dad06:	2b00      	cmp	r3, #0
   dad08:	da42      	bge.n	dad90 <__ieee754_atan2f+0xdc>
   dad0a:	313c      	adds	r1, #60	; 0x3c
   dad0c:	da40      	bge.n	dad90 <__ieee754_atan2f+0xdc>
   dad0e:	ed9f 0a34 	vldr	s0, [pc, #208]	; dade0 <__ieee754_atan2f+0x12c>
   dad12:	2c01      	cmp	r4, #1
   dad14:	d04e      	beq.n	dadb4 <__ieee754_atan2f+0x100>
   dad16:	2c02      	cmp	r4, #2
   dad18:	d043      	beq.n	dada2 <__ieee754_atan2f+0xee>
   dad1a:	b164      	cbz	r4, dad36 <__ieee754_atan2f+0x82>
   dad1c:	ed9f 7a31 	vldr	s14, [pc, #196]	; dade4 <__ieee754_atan2f+0x130>
   dad20:	eddf 7a31 	vldr	s15, [pc, #196]	; dade8 <__ieee754_atan2f+0x134>
   dad24:	ee30 0a07 	vadd.f32	s0, s0, s14
   dad28:	ee30 0a67 	vsub.f32	s0, s0, s15
   dad2c:	e003      	b.n	dad36 <__ieee754_atan2f+0x82>
   dad2e:	ed9d 7a01 	vldr	s14, [sp, #4]
   dad32:	ee37 0a27 	vadd.f32	s0, s14, s15
   dad36:	b002      	add	sp, #8
   dad38:	bd10      	pop	{r4, pc}
   dad3a:	2c02      	cmp	r4, #2
   dad3c:	d010      	beq.n	dad60 <__ieee754_atan2f+0xac>
   dad3e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; dadec <__ieee754_atan2f+0x138>
   dad42:	2c03      	cmp	r4, #3
   dad44:	bf18      	it	ne
   dad46:	eeb0 0a67 	vmovne.f32	s0, s15
   dad4a:	b002      	add	sp, #8
   dad4c:	bd10      	pop	{r4, pc}
   dad4e:	ed9f 0a28 	vldr	s0, [pc, #160]	; dadf0 <__ieee754_atan2f+0x13c>
   dad52:	eddf 7a28 	vldr	s15, [pc, #160]	; dadf4 <__ieee754_atan2f+0x140>
   dad56:	2800      	cmp	r0, #0
   dad58:	bfb8      	it	lt
   dad5a:	eeb0 0a67 	vmovlt.f32	s0, s15
   dad5e:	e7ea      	b.n	dad36 <__ieee754_atan2f+0x82>
   dad60:	ed9f 0a21 	vldr	s0, [pc, #132]	; dade8 <__ieee754_atan2f+0x134>
   dad64:	e7e7      	b.n	dad36 <__ieee754_atan2f+0x82>
   dad66:	b002      	add	sp, #8
   dad68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dad6c:	f001 b88e 	b.w	dbe8c <atanf>
   dad70:	ed9f 0a1f 	vldr	s0, [pc, #124]	; dadf0 <__ieee754_atan2f+0x13c>
   dad74:	e7cd      	b.n	dad12 <__ieee754_atan2f+0x5e>
   dad76:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   dad7a:	f104 34ff 	add.w	r4, r4, #4294967295
   dad7e:	d020      	beq.n	dadc2 <__ieee754_atan2f+0x10e>
   dad80:	2c02      	cmp	r4, #2
   dad82:	d826      	bhi.n	dadd2 <__ieee754_atan2f+0x11e>
   dad84:	4b1c      	ldr	r3, [pc, #112]	; (dadf8 <__ieee754_atan2f+0x144>)
   dad86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dad8a:	ed94 0a00 	vldr	s0, [r4]
   dad8e:	e7d2      	b.n	dad36 <__ieee754_atan2f+0x82>
   dad90:	ed9d 7a01 	vldr	s14, [sp, #4]
   dad94:	ee87 0a87 	vdiv.f32	s0, s15, s14
   dad98:	f001 f950 	bl	dc03c <fabsf>
   dad9c:	f001 f876 	bl	dbe8c <atanf>
   dada0:	e7b7      	b.n	dad12 <__ieee754_atan2f+0x5e>
   dada2:	ed9f 7a10 	vldr	s14, [pc, #64]	; dade4 <__ieee754_atan2f+0x130>
   dada6:	eddf 7a10 	vldr	s15, [pc, #64]	; dade8 <__ieee754_atan2f+0x134>
   dadaa:	ee30 0a07 	vadd.f32	s0, s0, s14
   dadae:	ee37 0ac0 	vsub.f32	s0, s15, s0
   dadb2:	e7c0      	b.n	dad36 <__ieee754_atan2f+0x82>
   dadb4:	ee10 3a10 	vmov	r3, s0
   dadb8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   dadbc:	ee00 3a10 	vmov	s0, r3
   dadc0:	e7b9      	b.n	dad36 <__ieee754_atan2f+0x82>
   dadc2:	2c02      	cmp	r4, #2
   dadc4:	d808      	bhi.n	dadd8 <__ieee754_atan2f+0x124>
   dadc6:	4b0d      	ldr	r3, [pc, #52]	; (dadfc <__ieee754_atan2f+0x148>)
   dadc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dadcc:	ed94 0a00 	vldr	s0, [r4]
   dadd0:	e7b1      	b.n	dad36 <__ieee754_atan2f+0x82>
   dadd2:	ed9f 0a03 	vldr	s0, [pc, #12]	; dade0 <__ieee754_atan2f+0x12c>
   dadd6:	e7ae      	b.n	dad36 <__ieee754_atan2f+0x82>
   dadd8:	ed9f 0a09 	vldr	s0, [pc, #36]	; dae00 <__ieee754_atan2f+0x14c>
   daddc:	e7ab      	b.n	dad36 <__ieee754_atan2f+0x82>
   dadde:	bf00      	nop
   dade0:	00000000 	.word	0x00000000
   dade4:	33bbbd2e 	.word	0x33bbbd2e
   dade8:	40490fdb 	.word	0x40490fdb
   dadec:	c0490fdb 	.word	0xc0490fdb
   dadf0:	3fc90fdb 	.word	0x3fc90fdb
   dadf4:	bfc90fdb 	.word	0xbfc90fdb
   dadf8:	000de510 	.word	0x000de510
   dadfc:	000de504 	.word	0x000de504
   dae00:	3f490fdb 	.word	0x3f490fdb

000dae04 <__ieee754_rem_pio2f>:
   dae04:	b570      	push	{r4, r5, r6, lr}
   dae06:	ee10 3a10 	vmov	r3, s0
   dae0a:	4a95      	ldr	r2, [pc, #596]	; (db060 <__ieee754_rem_pio2f+0x25c>)
   dae0c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   dae10:	4294      	cmp	r4, r2
   dae12:	b086      	sub	sp, #24
   dae14:	4605      	mov	r5, r0
   dae16:	dd68      	ble.n	daeea <__ieee754_rem_pio2f+0xe6>
   dae18:	4a92      	ldr	r2, [pc, #584]	; (db064 <__ieee754_rem_pio2f+0x260>)
   dae1a:	4294      	cmp	r4, r2
   dae1c:	ee10 6a10 	vmov	r6, s0
   dae20:	dc1a      	bgt.n	dae58 <__ieee754_rem_pio2f+0x54>
   dae22:	2b00      	cmp	r3, #0
   dae24:	eddf 7a90 	vldr	s15, [pc, #576]	; db068 <__ieee754_rem_pio2f+0x264>
   dae28:	4a90      	ldr	r2, [pc, #576]	; (db06c <__ieee754_rem_pio2f+0x268>)
   dae2a:	f024 040f 	bic.w	r4, r4, #15
   dae2e:	f340 80f1 	ble.w	db014 <__ieee754_rem_pio2f+0x210>
   dae32:	4294      	cmp	r4, r2
   dae34:	ee70 7a67 	vsub.f32	s15, s0, s15
   dae38:	d066      	beq.n	daf08 <__ieee754_rem_pio2f+0x104>
   dae3a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; db070 <__ieee754_rem_pio2f+0x26c>
   dae3e:	ee77 6ac7 	vsub.f32	s13, s15, s14
   dae42:	2001      	movs	r0, #1
   dae44:	ee77 7ae6 	vsub.f32	s15, s15, s13
   dae48:	edc5 6a00 	vstr	s13, [r5]
   dae4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dae50:	edc5 7a01 	vstr	s15, [r5, #4]
   dae54:	b006      	add	sp, #24
   dae56:	bd70      	pop	{r4, r5, r6, pc}
   dae58:	4a86      	ldr	r2, [pc, #536]	; (db074 <__ieee754_rem_pio2f+0x270>)
   dae5a:	4294      	cmp	r4, r2
   dae5c:	dd67      	ble.n	daf2e <__ieee754_rem_pio2f+0x12a>
   dae5e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   dae62:	da49      	bge.n	daef8 <__ieee754_rem_pio2f+0xf4>
   dae64:	15e2      	asrs	r2, r4, #23
   dae66:	3a86      	subs	r2, #134	; 0x86
   dae68:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   dae6c:	ee07 3a90 	vmov	s15, r3
   dae70:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   dae74:	eddf 6a80 	vldr	s13, [pc, #512]	; db078 <__ieee754_rem_pio2f+0x274>
   dae78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   dae7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dae80:	ed8d 7a03 	vstr	s14, [sp, #12]
   dae84:	ee67 7aa6 	vmul.f32	s15, s15, s13
   dae88:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   dae8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   dae90:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dae94:	ed8d 7a04 	vstr	s14, [sp, #16]
   dae98:	ee67 7aa6 	vmul.f32	s15, s15, s13
   dae9c:	eef5 7a40 	vcmp.f32	s15, #0.0
   daea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   daea4:	edcd 7a05 	vstr	s15, [sp, #20]
   daea8:	f040 80a3 	bne.w	daff2 <__ieee754_rem_pio2f+0x1ee>
   daeac:	eeb5 7a40 	vcmp.f32	s14, #0.0
   daeb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   daeb4:	bf14      	ite	ne
   daeb6:	2302      	movne	r3, #2
   daeb8:	2301      	moveq	r3, #1
   daeba:	4970      	ldr	r1, [pc, #448]	; (db07c <__ieee754_rem_pio2f+0x278>)
   daebc:	9101      	str	r1, [sp, #4]
   daebe:	2102      	movs	r1, #2
   daec0:	9100      	str	r1, [sp, #0]
   daec2:	a803      	add	r0, sp, #12
   daec4:	4629      	mov	r1, r5
   daec6:	f000 f969 	bl	db19c <__kernel_rem_pio2f>
   daeca:	2e00      	cmp	r6, #0
   daecc:	dac2      	bge.n	dae54 <__ieee754_rem_pio2f+0x50>
   daece:	ed95 7a00 	vldr	s14, [r5]
   daed2:	edd5 7a01 	vldr	s15, [r5, #4]
   daed6:	eeb1 7a47 	vneg.f32	s14, s14
   daeda:	eef1 7a67 	vneg.f32	s15, s15
   daede:	4240      	negs	r0, r0
   daee0:	ed85 7a00 	vstr	s14, [r5]
   daee4:	edc5 7a01 	vstr	s15, [r5, #4]
   daee8:	e7b4      	b.n	dae54 <__ieee754_rem_pio2f+0x50>
   daeea:	2200      	movs	r2, #0
   daeec:	ed85 0a00 	vstr	s0, [r5]
   daef0:	6042      	str	r2, [r0, #4]
   daef2:	2000      	movs	r0, #0
   daef4:	b006      	add	sp, #24
   daef6:	bd70      	pop	{r4, r5, r6, pc}
   daef8:	ee70 7a40 	vsub.f32	s15, s0, s0
   daefc:	2000      	movs	r0, #0
   daefe:	edc5 7a01 	vstr	s15, [r5, #4]
   daf02:	edc5 7a00 	vstr	s15, [r5]
   daf06:	e7a5      	b.n	dae54 <__ieee754_rem_pio2f+0x50>
   daf08:	eddf 6a5d 	vldr	s13, [pc, #372]	; db080 <__ieee754_rem_pio2f+0x27c>
   daf0c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; db084 <__ieee754_rem_pio2f+0x280>
   daf10:	ee77 7ae6 	vsub.f32	s15, s15, s13
   daf14:	2001      	movs	r0, #1
   daf16:	ee77 6ac7 	vsub.f32	s13, s15, s14
   daf1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
   daf1e:	edc5 6a00 	vstr	s13, [r5]
   daf22:	ee77 7ac7 	vsub.f32	s15, s15, s14
   daf26:	edc5 7a01 	vstr	s15, [r5, #4]
   daf2a:	b006      	add	sp, #24
   daf2c:	bd70      	pop	{r4, r5, r6, pc}
   daf2e:	f001 f885 	bl	dc03c <fabsf>
   daf32:	eddf 6a55 	vldr	s13, [pc, #340]	; db088 <__ieee754_rem_pio2f+0x284>
   daf36:	ed9f 6a4c 	vldr	s12, [pc, #304]	; db068 <__ieee754_rem_pio2f+0x264>
   daf3a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; db070 <__ieee754_rem_pio2f+0x26c>
   daf3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   daf42:	eee0 7a26 	vfma.f32	s15, s0, s13
   daf46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   daf4a:	ee17 0a90 	vmov	r0, s15
   daf4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   daf52:	281f      	cmp	r0, #31
   daf54:	eea6 0ac6 	vfms.f32	s0, s13, s12
   daf58:	ee66 7a87 	vmul.f32	s15, s13, s14
   daf5c:	eeb1 6a66 	vneg.f32	s12, s13
   daf60:	dc1e      	bgt.n	dafa0 <__ieee754_rem_pio2f+0x19c>
   daf62:	4a4a      	ldr	r2, [pc, #296]	; (db08c <__ieee754_rem_pio2f+0x288>)
   daf64:	1e41      	subs	r1, r0, #1
   daf66:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   daf6a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   daf6e:	4293      	cmp	r3, r2
   daf70:	d016      	beq.n	dafa0 <__ieee754_rem_pio2f+0x19c>
   daf72:	ee30 7a67 	vsub.f32	s14, s0, s15
   daf76:	ed85 7a00 	vstr	s14, [r5]
   daf7a:	ee30 0a47 	vsub.f32	s0, s0, s14
   daf7e:	2e00      	cmp	r6, #0
   daf80:	ee30 0a67 	vsub.f32	s0, s0, s15
   daf84:	ed85 0a01 	vstr	s0, [r5, #4]
   daf88:	f6bf af64 	bge.w	dae54 <__ieee754_rem_pio2f+0x50>
   daf8c:	eeb1 7a47 	vneg.f32	s14, s14
   daf90:	eeb1 0a40 	vneg.f32	s0, s0
   daf94:	ed85 7a00 	vstr	s14, [r5]
   daf98:	ed85 0a01 	vstr	s0, [r5, #4]
   daf9c:	4240      	negs	r0, r0
   daf9e:	e759      	b.n	dae54 <__ieee754_rem_pio2f+0x50>
   dafa0:	ee30 7a67 	vsub.f32	s14, s0, s15
   dafa4:	15e2      	asrs	r2, r4, #23
   dafa6:	ee17 3a10 	vmov	r3, s14
   dafaa:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   dafae:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   dafb2:	2c08      	cmp	r4, #8
   dafb4:	dddf      	ble.n	daf76 <__ieee754_rem_pio2f+0x172>
   dafb6:	eddf 7a32 	vldr	s15, [pc, #200]	; db080 <__ieee754_rem_pio2f+0x27c>
   dafba:	ed9f 7a32 	vldr	s14, [pc, #200]	; db084 <__ieee754_rem_pio2f+0x280>
   dafbe:	eef0 5a40 	vmov.f32	s11, s0
   dafc2:	eee6 5a27 	vfma.f32	s11, s12, s15
   dafc6:	ee30 0a65 	vsub.f32	s0, s0, s11
   dafca:	eea6 0a27 	vfma.f32	s0, s12, s15
   dafce:	eef0 7a40 	vmov.f32	s15, s0
   dafd2:	eed6 7a87 	vfnms.f32	s15, s13, s14
   dafd6:	ee35 7ae7 	vsub.f32	s14, s11, s15
   dafda:	ee17 3a10 	vmov	r3, s14
   dafde:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   dafe2:	1ad2      	subs	r2, r2, r3
   dafe4:	2a19      	cmp	r2, #25
   dafe6:	dc06      	bgt.n	daff6 <__ieee754_rem_pio2f+0x1f2>
   dafe8:	ed85 7a00 	vstr	s14, [r5]
   dafec:	eeb0 0a65 	vmov.f32	s0, s11
   daff0:	e7c3      	b.n	daf7a <__ieee754_rem_pio2f+0x176>
   daff2:	2303      	movs	r3, #3
   daff4:	e761      	b.n	daeba <__ieee754_rem_pio2f+0xb6>
   daff6:	ed9f 7a26 	vldr	s14, [pc, #152]	; db090 <__ieee754_rem_pio2f+0x28c>
   daffa:	ed9f 5a26 	vldr	s10, [pc, #152]	; db094 <__ieee754_rem_pio2f+0x290>
   daffe:	eeb0 0a65 	vmov.f32	s0, s11
   db002:	eea6 0a07 	vfma.f32	s0, s12, s14
   db006:	ee75 7ac0 	vsub.f32	s15, s11, s0
   db00a:	eee6 7a07 	vfma.f32	s15, s12, s14
   db00e:	eed6 7a85 	vfnms.f32	s15, s13, s10
   db012:	e7ae      	b.n	daf72 <__ieee754_rem_pio2f+0x16e>
   db014:	4294      	cmp	r4, r2
   db016:	ee70 7a27 	vadd.f32	s15, s0, s15
   db01a:	d00e      	beq.n	db03a <__ieee754_rem_pio2f+0x236>
   db01c:	ed9f 7a14 	vldr	s14, [pc, #80]	; db070 <__ieee754_rem_pio2f+0x26c>
   db020:	ee77 6a87 	vadd.f32	s13, s15, s14
   db024:	f04f 30ff 	mov.w	r0, #4294967295
   db028:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db02c:	edc5 6a00 	vstr	s13, [r5]
   db030:	ee77 7a87 	vadd.f32	s15, s15, s14
   db034:	edc5 7a01 	vstr	s15, [r5, #4]
   db038:	e70c      	b.n	dae54 <__ieee754_rem_pio2f+0x50>
   db03a:	eddf 6a11 	vldr	s13, [pc, #68]	; db080 <__ieee754_rem_pio2f+0x27c>
   db03e:	ed9f 7a11 	vldr	s14, [pc, #68]	; db084 <__ieee754_rem_pio2f+0x280>
   db042:	ee77 7aa6 	vadd.f32	s15, s15, s13
   db046:	f04f 30ff 	mov.w	r0, #4294967295
   db04a:	ee77 6a87 	vadd.f32	s13, s15, s14
   db04e:	ee77 7ae6 	vsub.f32	s15, s15, s13
   db052:	edc5 6a00 	vstr	s13, [r5]
   db056:	ee77 7a87 	vadd.f32	s15, s15, s14
   db05a:	edc5 7a01 	vstr	s15, [r5, #4]
   db05e:	e6f9      	b.n	dae54 <__ieee754_rem_pio2f+0x50>
   db060:	3f490fd8 	.word	0x3f490fd8
   db064:	4016cbe3 	.word	0x4016cbe3
   db068:	3fc90f80 	.word	0x3fc90f80
   db06c:	3fc90fd0 	.word	0x3fc90fd0
   db070:	37354443 	.word	0x37354443
   db074:	43490f80 	.word	0x43490f80
   db078:	43800000 	.word	0x43800000
   db07c:	000de59c 	.word	0x000de59c
   db080:	37354400 	.word	0x37354400
   db084:	2e85a308 	.word	0x2e85a308
   db088:	3f22f984 	.word	0x3f22f984
   db08c:	000de51c 	.word	0x000de51c
   db090:	2e85a300 	.word	0x2e85a300
   db094:	248d3132 	.word	0x248d3132

000db098 <__kernel_cosf>:
   db098:	ee10 3a10 	vmov	r3, s0
   db09c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   db0a0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   db0a4:	da2c      	bge.n	db100 <__kernel_cosf+0x68>
   db0a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   db0aa:	ee17 3a90 	vmov	r3, s15
   db0ae:	2b00      	cmp	r3, #0
   db0b0:	d060      	beq.n	db174 <__kernel_cosf+0xdc>
   db0b2:	ee20 7a00 	vmul.f32	s14, s0, s0
   db0b6:	eddf 4a31 	vldr	s9, [pc, #196]	; db17c <__kernel_cosf+0xe4>
   db0ba:	ed9f 5a31 	vldr	s10, [pc, #196]	; db180 <__kernel_cosf+0xe8>
   db0be:	eddf 5a31 	vldr	s11, [pc, #196]	; db184 <__kernel_cosf+0xec>
   db0c2:	ed9f 6a31 	vldr	s12, [pc, #196]	; db188 <__kernel_cosf+0xf0>
   db0c6:	eddf 7a31 	vldr	s15, [pc, #196]	; db18c <__kernel_cosf+0xf4>
   db0ca:	eddf 6a31 	vldr	s13, [pc, #196]	; db190 <__kernel_cosf+0xf8>
   db0ce:	eea7 5a24 	vfma.f32	s10, s14, s9
   db0d2:	eee7 5a05 	vfma.f32	s11, s14, s10
   db0d6:	eea7 6a25 	vfma.f32	s12, s14, s11
   db0da:	eee7 7a06 	vfma.f32	s15, s14, s12
   db0de:	eee7 6a27 	vfma.f32	s13, s14, s15
   db0e2:	ee67 6a26 	vmul.f32	s13, s14, s13
   db0e6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   db0ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   db0ee:	eee7 0a26 	vfma.f32	s1, s14, s13
   db0f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db0f6:	eed7 0a27 	vfnms.f32	s1, s14, s15
   db0fa:	ee30 0a60 	vsub.f32	s0, s0, s1
   db0fe:	4770      	bx	lr
   db100:	ee20 7a00 	vmul.f32	s14, s0, s0
   db104:	eddf 4a1d 	vldr	s9, [pc, #116]	; db17c <__kernel_cosf+0xe4>
   db108:	ed9f 5a1d 	vldr	s10, [pc, #116]	; db180 <__kernel_cosf+0xe8>
   db10c:	eddf 5a1d 	vldr	s11, [pc, #116]	; db184 <__kernel_cosf+0xec>
   db110:	ed9f 6a1d 	vldr	s12, [pc, #116]	; db188 <__kernel_cosf+0xf0>
   db114:	eddf 7a1d 	vldr	s15, [pc, #116]	; db18c <__kernel_cosf+0xf4>
   db118:	eddf 6a1d 	vldr	s13, [pc, #116]	; db190 <__kernel_cosf+0xf8>
   db11c:	4a1d      	ldr	r2, [pc, #116]	; (db194 <__kernel_cosf+0xfc>)
   db11e:	eea7 5a24 	vfma.f32	s10, s14, s9
   db122:	4293      	cmp	r3, r2
   db124:	eee5 5a07 	vfma.f32	s11, s10, s14
   db128:	eea5 6a87 	vfma.f32	s12, s11, s14
   db12c:	eee6 7a07 	vfma.f32	s15, s12, s14
   db130:	eee7 6a87 	vfma.f32	s13, s15, s14
   db134:	ee66 6a87 	vmul.f32	s13, s13, s14
   db138:	ddd5      	ble.n	db0e6 <__kernel_cosf+0x4e>
   db13a:	4a17      	ldr	r2, [pc, #92]	; (db198 <__kernel_cosf+0x100>)
   db13c:	4293      	cmp	r3, r2
   db13e:	dc14      	bgt.n	db16a <__kernel_cosf+0xd2>
   db140:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   db144:	ee07 3a90 	vmov	s15, r3
   db148:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   db14c:	ee36 6a67 	vsub.f32	s12, s12, s15
   db150:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   db154:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   db158:	eee7 0a26 	vfma.f32	s1, s14, s13
   db15c:	eed7 7a25 	vfnms.f32	s15, s14, s11
   db160:	ee77 0ae0 	vsub.f32	s1, s15, s1
   db164:	ee36 0a60 	vsub.f32	s0, s12, s1
   db168:	4770      	bx	lr
   db16a:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   db16e:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   db172:	e7ed      	b.n	db150 <__kernel_cosf+0xb8>
   db174:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db178:	4770      	bx	lr
   db17a:	bf00      	nop
   db17c:	ad47d74e 	.word	0xad47d74e
   db180:	310f74f6 	.word	0x310f74f6
   db184:	b493f27c 	.word	0xb493f27c
   db188:	37d00d01 	.word	0x37d00d01
   db18c:	bab60b61 	.word	0xbab60b61
   db190:	3d2aaaab 	.word	0x3d2aaaab
   db194:	3e999999 	.word	0x3e999999
   db198:	3f480000 	.word	0x3f480000

000db19c <__kernel_rem_pio2f>:
   db19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db1a0:	ed2d 8b04 	vpush	{d8-d9}
   db1a4:	b0db      	sub	sp, #364	; 0x16c
   db1a6:	4cd7      	ldr	r4, [pc, #860]	; (db504 <__kernel_rem_pio2f+0x368>)
   db1a8:	9d68      	ldr	r5, [sp, #416]	; 0x1a0
   db1aa:	9107      	str	r1, [sp, #28]
   db1ac:	1d11      	adds	r1, r2, #4
   db1ae:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   db1b2:	9304      	str	r3, [sp, #16]
   db1b4:	9209      	str	r2, [sp, #36]	; 0x24
   db1b6:	4683      	mov	fp, r0
   db1b8:	f103 39ff 	add.w	r9, r3, #4294967295
   db1bc:	f2c0 829d 	blt.w	db6fa <__kernel_rem_pio2f+0x55e>
   db1c0:	1ed3      	subs	r3, r2, #3
   db1c2:	bf44      	itt	mi
   db1c4:	4613      	movmi	r3, r2
   db1c6:	3304      	addmi	r3, #4
   db1c8:	10db      	asrs	r3, r3, #3
   db1ca:	9303      	str	r3, [sp, #12]
   db1cc:	3301      	adds	r3, #1
   db1ce:	00db      	lsls	r3, r3, #3
   db1d0:	9308      	str	r3, [sp, #32]
   db1d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db1d6:	1a9b      	subs	r3, r3, r2
   db1d8:	9306      	str	r3, [sp, #24]
   db1da:	9b03      	ldr	r3, [sp, #12]
   db1dc:	eb16 0109 	adds.w	r1, r6, r9
   db1e0:	eba3 0309 	sub.w	r3, r3, r9
   db1e4:	d416      	bmi.n	db214 <__kernel_rem_pio2f+0x78>
   db1e6:	3101      	adds	r1, #1
   db1e8:	ed9f 7ac7 	vldr	s14, [pc, #796]	; db508 <__kernel_rem_pio2f+0x36c>
   db1ec:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   db1ee:	4419      	add	r1, r3
   db1f0:	aa1e      	add	r2, sp, #120	; 0x78
   db1f2:	2b00      	cmp	r3, #0
   db1f4:	bfa4      	itt	ge
   db1f6:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   db1fa:	ee07 4a90 	vmovge	s15, r4
   db1fe:	f103 0301 	add.w	r3, r3, #1
   db202:	bfac      	ite	ge
   db204:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   db208:	eef0 7a47 	vmovlt.f32	s15, s14
   db20c:	428b      	cmp	r3, r1
   db20e:	ece2 7a01 	vstmia	r2!, {s15}
   db212:	d1ee      	bne.n	db1f2 <__kernel_rem_pio2f+0x56>
   db214:	2e00      	cmp	r6, #0
   db216:	f2c0 82e0 	blt.w	db7da <__kernel_rem_pio2f+0x63e>
   db21a:	9b04      	ldr	r3, [sp, #16]
   db21c:	a91e      	add	r1, sp, #120	; 0x78
   db21e:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   db222:	ad46      	add	r5, sp, #280	; 0x118
   db224:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   db228:	4648      	mov	r0, r9
   db22a:	18f7      	adds	r7, r6, r3
   db22c:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
   db230:	f1b9 0f00 	cmp.w	r9, #0
   db234:	eddf 7ab4 	vldr	s15, [pc, #720]	; db508 <__kernel_rem_pio2f+0x36c>
   db238:	db09      	blt.n	db24e <__kernel_rem_pio2f+0xb2>
   db23a:	4622      	mov	r2, r4
   db23c:	465b      	mov	r3, fp
   db23e:	ecf3 6a01 	vldmia	r3!, {s13}
   db242:	ed32 7a01 	vldmdb	r2!, {s14}
   db246:	428b      	cmp	r3, r1
   db248:	eee6 7a87 	vfma.f32	s15, s13, s14
   db24c:	d1f7      	bne.n	db23e <__kernel_rem_pio2f+0xa2>
   db24e:	3001      	adds	r0, #1
   db250:	42b8      	cmp	r0, r7
   db252:	ece5 7a01 	vstmia	r5!, {s15}
   db256:	f104 0404 	add.w	r4, r4, #4
   db25a:	d1e9      	bne.n	db230 <__kernel_rem_pio2f+0x94>
   db25c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   db260:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   db264:	3b08      	subs	r3, #8
   db266:	9305      	str	r3, [sp, #20]
   db268:	ed9f 9aa9 	vldr	s18, [pc, #676]	; db510 <__kernel_rem_pio2f+0x374>
   db26c:	eddf 8aa7 	vldr	s17, [pc, #668]	; db50c <__kernel_rem_pio2f+0x370>
   db270:	9806      	ldr	r0, [sp, #24]
   db272:	9600      	str	r6, [sp, #0]
   db274:	ab09      	add	r3, sp, #36	; 0x24
   db276:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
   db27a:	eb0b 040c 	add.w	r4, fp, ip
   db27e:	af46      	add	r7, sp, #280	; 0x118
   db280:	465b      	mov	r3, fp
   db282:	aa5a      	add	r2, sp, #360	; 0x168
   db284:	eb02 0286 	add.w	r2, r2, r6, lsl #2
   db288:	2e00      	cmp	r6, #0
   db28a:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
   db28e:	ea4f 0b86 	mov.w	fp, r6, lsl #2
   db292:	dd16      	ble.n	db2c2 <__kernel_rem_pio2f+0x126>
   db294:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   db298:	4641      	mov	r1, r8
   db29a:	ee60 7a09 	vmul.f32	s15, s0, s18
   db29e:	eeb0 7a40 	vmov.f32	s14, s0
   db2a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db2a6:	ed72 6a01 	vldmdb	r2!, {s13}
   db2aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db2ae:	42ba      	cmp	r2, r7
   db2b0:	eea7 7ae8 	vfms.f32	s14, s15, s17
   db2b4:	ee37 0aa6 	vadd.f32	s0, s15, s13
   db2b8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   db2bc:	eca1 7a01 	vstmia	r1!, {s14}
   db2c0:	d1eb      	bne.n	db29a <__kernel_rem_pio2f+0xfe>
   db2c2:	e9cd 0301 	strd	r0, r3, [sp, #4]
   db2c6:	f000 ff07 	bl	dc0d8 <scalbnf>
   db2ca:	eeb0 8a40 	vmov.f32	s16, s0
   db2ce:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   db2d2:	ee28 0a00 	vmul.f32	s0, s16, s0
   db2d6:	f000 feb9 	bl	dc04c <floorf>
   db2da:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   db2de:	eea0 8a67 	vfms.f32	s16, s0, s15
   db2e2:	9801      	ldr	r0, [sp, #4]
   db2e4:	9b02      	ldr	r3, [sp, #8]
   db2e6:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   db2ea:	2800      	cmp	r0, #0
   db2ec:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   db2f0:	ee38 8a67 	vsub.f32	s16, s16, s15
   db2f4:	dd78      	ble.n	db3e8 <__kernel_rem_pio2f+0x24c>
   db2f6:	f106 3cff 	add.w	ip, r6, #4294967295
   db2fa:	f1c0 0208 	rsb	r2, r0, #8
   db2fe:	f858 502c 	ldr.w	r5, [r8, ip, lsl #2]
   db302:	fa45 f102 	asr.w	r1, r5, r2
   db306:	fa01 f202 	lsl.w	r2, r1, r2
   db30a:	1aaa      	subs	r2, r5, r2
   db30c:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   db310:	f1c0 0507 	rsb	r5, r0, #7
   db314:	ee19 ca90 	vmov	ip, s19
   db318:	fa42 f505 	asr.w	r5, r2, r5
   db31c:	448c      	add	ip, r1
   db31e:	2d00      	cmp	r5, #0
   db320:	ee09 ca90 	vmov	s19, ip
   db324:	dc68      	bgt.n	db3f8 <__kernel_rem_pio2f+0x25c>
   db326:	eeb5 8a40 	vcmp.f32	s16, #0.0
   db32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db32e:	f040 80b6 	bne.w	db49e <__kernel_rem_pio2f+0x302>
   db332:	9a00      	ldr	r2, [sp, #0]
   db334:	f106 3eff 	add.w	lr, r6, #4294967295
   db338:	4572      	cmp	r2, lr
   db33a:	dc10      	bgt.n	db35e <__kernel_rem_pio2f+0x1c2>
   db33c:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
   db340:	3a01      	subs	r2, #1
   db342:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   db346:	2100      	movs	r1, #0
   db348:	469c      	mov	ip, r3
   db34a:	f852 3904 	ldr.w	r3, [r2], #-4
   db34e:	4552      	cmp	r2, sl
   db350:	ea41 0103 	orr.w	r1, r1, r3
   db354:	d1f9      	bne.n	db34a <__kernel_rem_pio2f+0x1ae>
   db356:	4663      	mov	r3, ip
   db358:	2900      	cmp	r1, #0
   db35a:	f040 80f2 	bne.w	db542 <__kernel_rem_pio2f+0x3a6>
   db35e:	9a00      	ldr	r2, [sp, #0]
   db360:	3a01      	subs	r2, #1
   db362:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
   db366:	2a00      	cmp	r2, #0
   db368:	f040 80e6 	bne.w	db538 <__kernel_rem_pio2f+0x39c>
   db36c:	9a05      	ldr	r2, [sp, #20]
   db36e:	f04f 0c01 	mov.w	ip, #1
   db372:	f852 1904 	ldr.w	r1, [r2], #-4
   db376:	f10c 0c01 	add.w	ip, ip, #1
   db37a:	2900      	cmp	r1, #0
   db37c:	d0f9      	beq.n	db372 <__kernel_rem_pio2f+0x1d6>
   db37e:	f106 0b01 	add.w	fp, r6, #1
   db382:	44b4      	add	ip, r6
   db384:	46de      	mov	lr, fp
   db386:	9904      	ldr	r1, [sp, #16]
   db388:	9a03      	ldr	r2, [sp, #12]
   db38a:	198d      	adds	r5, r1, r6
   db38c:	445a      	add	r2, fp
   db38e:	a91e      	add	r1, sp, #120	; 0x78
   db390:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   db394:	eb01 0585 	add.w	r5, r1, r5, lsl #2
   db398:	9969      	ldr	r1, [sp, #420]	; 0x1a4
   db39a:	3a01      	subs	r2, #1
   db39c:	eb01 0682 	add.w	r6, r1, r2, lsl #2
   db3a0:	eb07 0b8b 	add.w	fp, r7, fp, lsl #2
   db3a4:	edd6 7a01 	vldr	s15, [r6, #4]
   db3a8:	ed9f 7a57 	vldr	s14, [pc, #348]	; db508 <__kernel_rem_pio2f+0x36c>
   db3ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db3b0:	f1b9 0f00 	cmp.w	r9, #0
   db3b4:	f106 0604 	add.w	r6, r6, #4
   db3b8:	4629      	mov	r1, r5
   db3ba:	edc5 7a00 	vstr	s15, [r5]
   db3be:	f105 0504 	add.w	r5, r5, #4
   db3c2:	db09      	blt.n	db3d8 <__kernel_rem_pio2f+0x23c>
   db3c4:	461a      	mov	r2, r3
   db3c6:	e001      	b.n	db3cc <__kernel_rem_pio2f+0x230>
   db3c8:	ed71 7a01 	vldmdb	r1!, {s15}
   db3cc:	ecf2 6a01 	vldmia	r2!, {s13}
   db3d0:	42a2      	cmp	r2, r4
   db3d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
   db3d6:	d1f7      	bne.n	db3c8 <__kernel_rem_pio2f+0x22c>
   db3d8:	f10e 0e01 	add.w	lr, lr, #1
   db3dc:	45e6      	cmp	lr, ip
   db3de:	ecab 7a01 	vstmia	fp!, {s14}
   db3e2:	dddf      	ble.n	db3a4 <__kernel_rem_pio2f+0x208>
   db3e4:	4666      	mov	r6, ip
   db3e6:	e74c      	b.n	db282 <__kernel_rem_pio2f+0xe6>
   db3e8:	f040 809c 	bne.w	db524 <__kernel_rem_pio2f+0x388>
   db3ec:	1e72      	subs	r2, r6, #1
   db3ee:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
   db3f2:	122d      	asrs	r5, r5, #8
   db3f4:	2d00      	cmp	r5, #0
   db3f6:	dd96      	ble.n	db326 <__kernel_rem_pio2f+0x18a>
   db3f8:	ee19 2a90 	vmov	r2, s19
   db3fc:	2e00      	cmp	r6, #0
   db3fe:	f102 0201 	add.w	r2, r2, #1
   db402:	ee09 2a90 	vmov	s19, r2
   db406:	f340 818e 	ble.w	db726 <__kernel_rem_pio2f+0x58a>
   db40a:	f8d8 1000 	ldr.w	r1, [r8]
   db40e:	2900      	cmp	r1, #0
   db410:	d174      	bne.n	db4fc <__kernel_rem_pio2f+0x360>
   db412:	2e01      	cmp	r6, #1
   db414:	d01c      	beq.n	db450 <__kernel_rem_pio2f+0x2b4>
   db416:	4642      	mov	r2, r8
   db418:	f04f 0c01 	mov.w	ip, #1
   db41c:	f852 1f04 	ldr.w	r1, [r2, #4]!
   db420:	2900      	cmp	r1, #0
   db422:	d079      	beq.n	db518 <__kernel_rem_pio2f+0x37c>
   db424:	f10c 0201 	add.w	r2, ip, #1
   db428:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   db42c:	4296      	cmp	r6, r2
   db42e:	f848 102c 	str.w	r1, [r8, ip, lsl #2]
   db432:	dd0c      	ble.n	db44e <__kernel_rem_pio2f+0x2b2>
   db434:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
   db438:	44c3      	add	fp, r8
   db43a:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   db43e:	e000      	b.n	db442 <__kernel_rem_pio2f+0x2a6>
   db440:	6811      	ldr	r1, [r2, #0]
   db442:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   db446:	f842 1b04 	str.w	r1, [r2], #4
   db44a:	455a      	cmp	r2, fp
   db44c:	d1f8      	bne.n	db440 <__kernel_rem_pio2f+0x2a4>
   db44e:	2101      	movs	r1, #1
   db450:	2800      	cmp	r0, #0
   db452:	dd0c      	ble.n	db46e <__kernel_rem_pio2f+0x2d2>
   db454:	2801      	cmp	r0, #1
   db456:	f000 8147 	beq.w	db6e8 <__kernel_rem_pio2f+0x54c>
   db45a:	2802      	cmp	r0, #2
   db45c:	d107      	bne.n	db46e <__kernel_rem_pio2f+0x2d2>
   db45e:	f106 3cff 	add.w	ip, r6, #4294967295
   db462:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   db466:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   db46a:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   db46e:	2d02      	cmp	r5, #2
   db470:	f47f af59 	bne.w	db326 <__kernel_rem_pio2f+0x18a>
   db474:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db478:	ee30 8a48 	vsub.f32	s16, s0, s16
   db47c:	2900      	cmp	r1, #0
   db47e:	f43f af52 	beq.w	db326 <__kernel_rem_pio2f+0x18a>
   db482:	e9cd 0301 	strd	r0, r3, [sp, #4]
   db486:	f000 fe27 	bl	dc0d8 <scalbnf>
   db48a:	ee38 8a40 	vsub.f32	s16, s16, s0
   db48e:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
   db492:	eeb5 8a40 	vcmp.f32	s16, #0.0
   db496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db49a:	f43f af4a 	beq.w	db332 <__kernel_rem_pio2f+0x196>
   db49e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   db4a2:	eeb0 0a48 	vmov.f32	s0, s16
   db4a6:	1a98      	subs	r0, r3, r2
   db4a8:	9602      	str	r6, [sp, #8]
   db4aa:	9501      	str	r5, [sp, #4]
   db4ac:	9e00      	ldr	r6, [sp, #0]
   db4ae:	f000 fe13 	bl	dc0d8 <scalbnf>
   db4b2:	ed9f 7a16 	vldr	s14, [pc, #88]	; db50c <__kernel_rem_pio2f+0x370>
   db4b6:	eeb4 0ac7 	vcmpe.f32	s0, s14
   db4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db4be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   db4c2:	f2c0 8157 	blt.w	db774 <__kernel_rem_pio2f+0x5d8>
   db4c6:	eddf 7a12 	vldr	s15, [pc, #72]	; db510 <__kernel_rem_pio2f+0x374>
   db4ca:	9906      	ldr	r1, [sp, #24]
   db4cc:	ee60 7a27 	vmul.f32	s15, s0, s15
   db4d0:	3108      	adds	r1, #8
   db4d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db4d6:	9106      	str	r1, [sp, #24]
   db4d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db4dc:	1c5d      	adds	r5, r3, #1
   db4de:	eea7 0ac7 	vfms.f32	s0, s15, s14
   db4e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db4e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   db4ea:	ee10 1a10 	vmov	r1, s0
   db4ee:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   db4f2:	ee17 3a90 	vmov	r3, s15
   db4f6:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
   db4fa:	e039      	b.n	db570 <__kernel_rem_pio2f+0x3d4>
   db4fc:	2201      	movs	r2, #1
   db4fe:	f04f 0c00 	mov.w	ip, #0
   db502:	e791      	b.n	db428 <__kernel_rem_pio2f+0x28c>
   db504:	000de8e0 	.word	0x000de8e0
   db508:	00000000 	.word	0x00000000
   db50c:	43800000 	.word	0x43800000
   db510:	3b800000 	.word	0x3b800000
   db514:	3fc90000 	.word	0x3fc90000
   db518:	f10c 0c01 	add.w	ip, ip, #1
   db51c:	45b4      	cmp	ip, r6
   db51e:	f47f af7d 	bne.w	db41c <__kernel_rem_pio2f+0x280>
   db522:	e795      	b.n	db450 <__kernel_rem_pio2f+0x2b4>
   db524:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   db528:	eeb4 8ae7 	vcmpe.f32	s16, s15
   db52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db530:	f280 80e8 	bge.w	db704 <__kernel_rem_pio2f+0x568>
   db534:	2500      	movs	r5, #0
   db536:	e6f6      	b.n	db326 <__kernel_rem_pio2f+0x18a>
   db538:	f106 0b01 	add.w	fp, r6, #1
   db53c:	46de      	mov	lr, fp
   db53e:	46dc      	mov	ip, fp
   db540:	e721      	b.n	db386 <__kernel_rem_pio2f+0x1ea>
   db542:	9806      	ldr	r0, [sp, #24]
   db544:	f858 102e 	ldr.w	r1, [r8, lr, lsl #2]
   db548:	3808      	subs	r0, #8
   db54a:	4633      	mov	r3, r6
   db54c:	462a      	mov	r2, r5
   db54e:	9e00      	ldr	r6, [sp, #0]
   db550:	9006      	str	r0, [sp, #24]
   db552:	4675      	mov	r5, lr
   db554:	b961      	cbnz	r1, db570 <__kernel_rem_pio2f+0x3d4>
   db556:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   db55a:	3b02      	subs	r3, #2
   db55c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   db560:	4601      	mov	r1, r0
   db562:	f853 0904 	ldr.w	r0, [r3], #-4
   db566:	3d01      	subs	r5, #1
   db568:	3908      	subs	r1, #8
   db56a:	2800      	cmp	r0, #0
   db56c:	d0f9      	beq.n	db562 <__kernel_rem_pio2f+0x3c6>
   db56e:	9106      	str	r1, [sp, #24]
   db570:	9806      	ldr	r0, [sp, #24]
   db572:	9200      	str	r2, [sp, #0]
   db574:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   db578:	f000 fdae 	bl	dc0d8 <scalbnf>
   db57c:	2d00      	cmp	r5, #0
   db57e:	9a00      	ldr	r2, [sp, #0]
   db580:	f2c0 811e 	blt.w	db7c0 <__kernel_rem_pio2f+0x624>
   db584:	ea4f 0e85 	mov.w	lr, r5, lsl #2
   db588:	ab46      	add	r3, sp, #280	; 0x118
   db58a:	eb03 070e 	add.w	r7, r3, lr
   db58e:	f10e 0c04 	add.w	ip, lr, #4
   db592:	ed1f 7a21 	vldr	s14, [pc, #-132]	; db510 <__kernel_rem_pio2f+0x374>
   db596:	eb08 030c 	add.w	r3, r8, ip
   db59a:	1d39      	adds	r1, r7, #4
   db59c:	ed73 7a01 	vldmdb	r3!, {s15}
   db5a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db5a4:	4543      	cmp	r3, r8
   db5a6:	ee67 7a80 	vmul.f32	s15, s15, s0
   db5aa:	ee20 0a07 	vmul.f32	s0, s0, s14
   db5ae:	ed61 7a01 	vstmdb	r1!, {s15}
   db5b2:	d1f3      	bne.n	db59c <__kernel_rem_pio2f+0x400>
   db5b4:	2e00      	cmp	r6, #0
   db5b6:	ed1f 6a29 	vldr	s12, [pc, #-164]	; db514 <__kernel_rem_pio2f+0x378>
   db5ba:	f04f 0400 	mov.w	r4, #0
   db5be:	db20      	blt.n	db602 <__kernel_rem_pio2f+0x466>
   db5c0:	488f      	ldr	r0, [pc, #572]	; (db800 <__kernel_rem_pio2f+0x664>)
   db5c2:	eddf 7a90 	vldr	s15, [pc, #576]	; db804 <__kernel_rem_pio2f+0x668>
   db5c6:	4639      	mov	r1, r7
   db5c8:	eeb0 7a46 	vmov.f32	s14, s12
   db5cc:	2300      	movs	r3, #0
   db5ce:	e003      	b.n	db5d8 <__kernel_rem_pio2f+0x43c>
   db5d0:	429c      	cmp	r4, r3
   db5d2:	db08      	blt.n	db5e6 <__kernel_rem_pio2f+0x44a>
   db5d4:	ecb0 7a01 	vldmia	r0!, {s14}
   db5d8:	ecf1 6a01 	vldmia	r1!, {s13}
   db5dc:	3301      	adds	r3, #1
   db5de:	429e      	cmp	r6, r3
   db5e0:	eee6 7a87 	vfma.f32	s15, s13, s14
   db5e4:	daf4      	bge.n	db5d0 <__kernel_rem_pio2f+0x434>
   db5e6:	ab5a      	add	r3, sp, #360	; 0x168
   db5e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   db5ec:	42a5      	cmp	r5, r4
   db5ee:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   db5f2:	f1a7 0704 	sub.w	r7, r7, #4
   db5f6:	f104 0301 	add.w	r3, r4, #1
   db5fa:	d005      	beq.n	db608 <__kernel_rem_pio2f+0x46c>
   db5fc:	2e00      	cmp	r6, #0
   db5fe:	461c      	mov	r4, r3
   db600:	dade      	bge.n	db5c0 <__kernel_rem_pio2f+0x424>
   db602:	eddf 7a80 	vldr	s15, [pc, #512]	; db804 <__kernel_rem_pio2f+0x668>
   db606:	e7ee      	b.n	db5e6 <__kernel_rem_pio2f+0x44a>
   db608:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   db60a:	2902      	cmp	r1, #2
   db60c:	dc1c      	bgt.n	db648 <__kernel_rem_pio2f+0x4ac>
   db60e:	2900      	cmp	r1, #0
   db610:	f300 808b 	bgt.w	db72a <__kernel_rem_pio2f+0x58e>
   db614:	d10f      	bne.n	db636 <__kernel_rem_pio2f+0x49a>
   db616:	ab32      	add	r3, sp, #200	; 0xc8
   db618:	eddf 7a7a 	vldr	s15, [pc, #488]	; db804 <__kernel_rem_pio2f+0x668>
   db61c:	449c      	add	ip, r3
   db61e:	ed3c 7a01 	vldmdb	ip!, {s14}
   db622:	4563      	cmp	r3, ip
   db624:	ee77 7a87 	vadd.f32	s15, s15, s14
   db628:	d1f9      	bne.n	db61e <__kernel_rem_pio2f+0x482>
   db62a:	b10a      	cbz	r2, db630 <__kernel_rem_pio2f+0x494>
   db62c:	eef1 7a67 	vneg.f32	s15, s15
   db630:	9b07      	ldr	r3, [sp, #28]
   db632:	edc3 7a00 	vstr	s15, [r3]
   db636:	ee19 3a90 	vmov	r3, s19
   db63a:	f003 0007 	and.w	r0, r3, #7
   db63e:	b05b      	add	sp, #364	; 0x16c
   db640:	ecbd 8b04 	vpop	{d8-d9}
   db644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db648:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   db64a:	2b03      	cmp	r3, #3
   db64c:	d1f3      	bne.n	db636 <__kernel_rem_pio2f+0x49a>
   db64e:	2d00      	cmp	r5, #0
   db650:	f000 80cb 	beq.w	db7ea <__kernel_rem_pio2f+0x64e>
   db654:	ab5a      	add	r3, sp, #360	; 0x168
   db656:	4473      	add	r3, lr
   db658:	a932      	add	r1, sp, #200	; 0xc8
   db65a:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   db65e:	eb01 0385 	add.w	r3, r1, r5, lsl #2
   db662:	ed73 7a01 	vldmdb	r3!, {s15}
   db666:	eef0 6a47 	vmov.f32	s13, s14
   db66a:	ee37 7a27 	vadd.f32	s14, s14, s15
   db66e:	4299      	cmp	r1, r3
   db670:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db674:	ed83 7a00 	vstr	s14, [r3]
   db678:	ee77 7aa6 	vadd.f32	s15, s15, s13
   db67c:	edc3 7a01 	vstr	s15, [r3, #4]
   db680:	d1ef      	bne.n	db662 <__kernel_rem_pio2f+0x4c6>
   db682:	2d01      	cmp	r5, #1
   db684:	f340 80b1 	ble.w	db7ea <__kernel_rem_pio2f+0x64e>
   db688:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   db68c:	ab5a      	add	r3, sp, #360	; 0x168
   db68e:	3d01      	subs	r5, #1
   db690:	449e      	add	lr, r3
   db692:	00ad      	lsls	r5, r5, #2
   db694:	1d2b      	adds	r3, r5, #4
   db696:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   db69a:	440b      	add	r3, r1
   db69c:	a833      	add	r0, sp, #204	; 0xcc
   db69e:	ed73 7a01 	vldmdb	r3!, {s15}
   db6a2:	eef0 6a47 	vmov.f32	s13, s14
   db6a6:	ee37 7a27 	vadd.f32	s14, s14, s15
   db6aa:	4298      	cmp	r0, r3
   db6ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
   db6b0:	ed83 7a00 	vstr	s14, [r3]
   db6b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
   db6b8:	edc3 7a01 	vstr	s15, [r3, #4]
   db6bc:	d1ef      	bne.n	db69e <__kernel_rem_pio2f+0x502>
   db6be:	3508      	adds	r5, #8
   db6c0:	eddf 7a50 	vldr	s15, [pc, #320]	; db804 <__kernel_rem_pio2f+0x668>
   db6c4:	194b      	adds	r3, r1, r5
   db6c6:	3108      	adds	r1, #8
   db6c8:	ed33 7a01 	vldmdb	r3!, {s14}
   db6cc:	4299      	cmp	r1, r3
   db6ce:	ee77 7a87 	vadd.f32	s15, s15, s14
   db6d2:	d1f9      	bne.n	db6c8 <__kernel_rem_pio2f+0x52c>
   db6d4:	2a00      	cmp	r2, #0
   db6d6:	d155      	bne.n	db784 <__kernel_rem_pio2f+0x5e8>
   db6d8:	9907      	ldr	r1, [sp, #28]
   db6da:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   db6dc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   db6de:	edc1 7a02 	vstr	s15, [r1, #8]
   db6e2:	600a      	str	r2, [r1, #0]
   db6e4:	604b      	str	r3, [r1, #4]
   db6e6:	e7a6      	b.n	db636 <__kernel_rem_pio2f+0x49a>
   db6e8:	f106 3cff 	add.w	ip, r6, #4294967295
   db6ec:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   db6f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   db6f4:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   db6f8:	e6b9      	b.n	db46e <__kernel_rem_pio2f+0x2d2>
   db6fa:	2308      	movs	r3, #8
   db6fc:	9308      	str	r3, [sp, #32]
   db6fe:	2300      	movs	r3, #0
   db700:	9303      	str	r3, [sp, #12]
   db702:	e566      	b.n	db1d2 <__kernel_rem_pio2f+0x36>
   db704:	ee19 2a90 	vmov	r2, s19
   db708:	2e00      	cmp	r6, #0
   db70a:	f102 0201 	add.w	r2, r2, #1
   db70e:	ee09 2a90 	vmov	s19, r2
   db712:	bfc8      	it	gt
   db714:	2502      	movgt	r5, #2
   db716:	f73f ae78 	bgt.w	db40a <__kernel_rem_pio2f+0x26e>
   db71a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   db71e:	ee37 8ac8 	vsub.f32	s16, s15, s16
   db722:	2502      	movs	r5, #2
   db724:	e5ff      	b.n	db326 <__kernel_rem_pio2f+0x18a>
   db726:	2100      	movs	r1, #0
   db728:	e692      	b.n	db450 <__kernel_rem_pio2f+0x2b4>
   db72a:	a932      	add	r1, sp, #200	; 0xc8
   db72c:	eddf 7a35 	vldr	s15, [pc, #212]	; db804 <__kernel_rem_pio2f+0x668>
   db730:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   db734:	ed33 7a01 	vldmdb	r3!, {s14}
   db738:	4299      	cmp	r1, r3
   db73a:	ee77 7a87 	vadd.f32	s15, s15, s14
   db73e:	d1f9      	bne.n	db734 <__kernel_rem_pio2f+0x598>
   db740:	bb92      	cbnz	r2, db7a8 <__kernel_rem_pio2f+0x60c>
   db742:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   db746:	9b07      	ldr	r3, [sp, #28]
   db748:	2d00      	cmp	r5, #0
   db74a:	edc3 7a00 	vstr	s15, [r3]
   db74e:	ee77 7a67 	vsub.f32	s15, s14, s15
   db752:	dd0b      	ble.n	db76c <__kernel_rem_pio2f+0x5d0>
   db754:	a933      	add	r1, sp, #204	; 0xcc
   db756:	2301      	movs	r3, #1
   db758:	ecb1 7a01 	vldmia	r1!, {s14}
   db75c:	3301      	adds	r3, #1
   db75e:	429d      	cmp	r5, r3
   db760:	ee77 7a87 	vadd.f32	s15, s15, s14
   db764:	daf8      	bge.n	db758 <__kernel_rem_pio2f+0x5bc>
   db766:	b10a      	cbz	r2, db76c <__kernel_rem_pio2f+0x5d0>
   db768:	eef1 7a67 	vneg.f32	s15, s15
   db76c:	9b07      	ldr	r3, [sp, #28]
   db76e:	edc3 7a01 	vstr	s15, [r3, #4]
   db772:	e760      	b.n	db636 <__kernel_rem_pio2f+0x49a>
   db774:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   db778:	461d      	mov	r5, r3
   db77a:	ee10 1a10 	vmov	r1, s0
   db77e:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   db782:	e6f5      	b.n	db570 <__kernel_rem_pio2f+0x3d4>
   db784:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   db788:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   db78c:	9b07      	ldr	r3, [sp, #28]
   db78e:	eef1 7a67 	vneg.f32	s15, s15
   db792:	eef1 6a66 	vneg.f32	s13, s13
   db796:	eeb1 7a47 	vneg.f32	s14, s14
   db79a:	edc3 7a02 	vstr	s15, [r3, #8]
   db79e:	edc3 6a00 	vstr	s13, [r3]
   db7a2:	ed83 7a01 	vstr	s14, [r3, #4]
   db7a6:	e746      	b.n	db636 <__kernel_rem_pio2f+0x49a>
   db7a8:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   db7ac:	9b07      	ldr	r3, [sp, #28]
   db7ae:	eeb1 7a67 	vneg.f32	s14, s15
   db7b2:	2d00      	cmp	r5, #0
   db7b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
   db7b8:	ed83 7a00 	vstr	s14, [r3]
   db7bc:	dcca      	bgt.n	db754 <__kernel_rem_pio2f+0x5b8>
   db7be:	e7d3      	b.n	db768 <__kernel_rem_pio2f+0x5cc>
   db7c0:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   db7c2:	2b02      	cmp	r3, #2
   db7c4:	dc0d      	bgt.n	db7e2 <__kernel_rem_pio2f+0x646>
   db7c6:	2b00      	cmp	r3, #0
   db7c8:	dc14      	bgt.n	db7f4 <__kernel_rem_pio2f+0x658>
   db7ca:	f47f af34 	bne.w	db636 <__kernel_rem_pio2f+0x49a>
   db7ce:	eddf 7a0d 	vldr	s15, [pc, #52]	; db804 <__kernel_rem_pio2f+0x668>
   db7d2:	2a00      	cmp	r2, #0
   db7d4:	f43f af2c 	beq.w	db630 <__kernel_rem_pio2f+0x494>
   db7d8:	e728      	b.n	db62c <__kernel_rem_pio2f+0x490>
   db7da:	9b04      	ldr	r3, [sp, #16]
   db7dc:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   db7e0:	e53c      	b.n	db25c <__kernel_rem_pio2f+0xc0>
   db7e2:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   db7e4:	2b03      	cmp	r3, #3
   db7e6:	f47f af26 	bne.w	db636 <__kernel_rem_pio2f+0x49a>
   db7ea:	eddf 7a06 	vldr	s15, [pc, #24]	; db804 <__kernel_rem_pio2f+0x668>
   db7ee:	2a00      	cmp	r2, #0
   db7f0:	d1c8      	bne.n	db784 <__kernel_rem_pio2f+0x5e8>
   db7f2:	e771      	b.n	db6d8 <__kernel_rem_pio2f+0x53c>
   db7f4:	eddf 7a03 	vldr	s15, [pc, #12]	; db804 <__kernel_rem_pio2f+0x668>
   db7f8:	2a00      	cmp	r2, #0
   db7fa:	d0a2      	beq.n	db742 <__kernel_rem_pio2f+0x5a6>
   db7fc:	e7d4      	b.n	db7a8 <__kernel_rem_pio2f+0x60c>
   db7fe:	bf00      	nop
   db800:	000de8b8 	.word	0x000de8b8
   db804:	00000000 	.word	0x00000000

000db808 <__kernel_sinf>:
   db808:	ee10 3a10 	vmov	r3, s0
   db80c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   db810:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   db814:	da04      	bge.n	db820 <__kernel_sinf+0x18>
   db816:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   db81a:	ee17 3a90 	vmov	r3, s15
   db81e:	b35b      	cbz	r3, db878 <__kernel_sinf+0x70>
   db820:	ee60 7a00 	vmul.f32	s15, s0, s0
   db824:	ed9f 5a15 	vldr	s10, [pc, #84]	; db87c <__kernel_sinf+0x74>
   db828:	eddf 5a15 	vldr	s11, [pc, #84]	; db880 <__kernel_sinf+0x78>
   db82c:	ed9f 6a15 	vldr	s12, [pc, #84]	; db884 <__kernel_sinf+0x7c>
   db830:	eddf 6a15 	vldr	s13, [pc, #84]	; db888 <__kernel_sinf+0x80>
   db834:	ed9f 7a15 	vldr	s14, [pc, #84]	; db88c <__kernel_sinf+0x84>
   db838:	eee7 5a85 	vfma.f32	s11, s15, s10
   db83c:	ee20 5a27 	vmul.f32	s10, s0, s15
   db840:	eea5 6aa7 	vfma.f32	s12, s11, s15
   db844:	eee6 6a27 	vfma.f32	s13, s12, s15
   db848:	eea6 7aa7 	vfma.f32	s14, s13, s15
   db84c:	b930      	cbnz	r0, db85c <__kernel_sinf+0x54>
   db84e:	eddf 6a10 	vldr	s13, [pc, #64]	; db890 <__kernel_sinf+0x88>
   db852:	eee7 6a87 	vfma.f32	s13, s15, s14
   db856:	eea6 0a85 	vfma.f32	s0, s13, s10
   db85a:	4770      	bx	lr
   db85c:	ee27 7a45 	vnmul.f32	s14, s14, s10
   db860:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   db864:	eea0 7aa6 	vfma.f32	s14, s1, s13
   db868:	eddf 6a0a 	vldr	s13, [pc, #40]	; db894 <__kernel_sinf+0x8c>
   db86c:	eed7 0a27 	vfnms.f32	s1, s14, s15
   db870:	eee5 0a26 	vfma.f32	s1, s10, s13
   db874:	ee30 0a60 	vsub.f32	s0, s0, s1
   db878:	4770      	bx	lr
   db87a:	bf00      	nop
   db87c:	2f2ec9d3 	.word	0x2f2ec9d3
   db880:	b2d72f34 	.word	0xb2d72f34
   db884:	3638ef1b 	.word	0x3638ef1b
   db888:	b9500d01 	.word	0xb9500d01
   db88c:	3c088889 	.word	0x3c088889
   db890:	be2aaaab 	.word	0xbe2aaaab
   db894:	3e2aaaab 	.word	0x3e2aaaab

000db898 <atan>:
   db898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db89c:	ec55 4b10 	vmov	r4, r5, d0
   db8a0:	4bcd      	ldr	r3, [pc, #820]	; (dbbd8 <atan+0x340>)
   db8a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   db8a6:	429e      	cmp	r6, r3
   db8a8:	46aa      	mov	sl, r5
   db8aa:	dd0d      	ble.n	db8c8 <atan+0x30>
   db8ac:	4bcb      	ldr	r3, [pc, #812]	; (dbbdc <atan+0x344>)
   db8ae:	429e      	cmp	r6, r3
   db8b0:	f300 80b5 	bgt.w	dba1e <atan+0x186>
   db8b4:	f000 80b0 	beq.w	dba18 <atan+0x180>
   db8b8:	f1ba 0f00 	cmp.w	sl, #0
   db8bc:	f340 80f6 	ble.w	dbaac <atan+0x214>
   db8c0:	ed9f 0ba9 	vldr	d0, [pc, #676]	; dbb68 <atan+0x2d0>
   db8c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db8c8:	4bc5      	ldr	r3, [pc, #788]	; (dbbe0 <atan+0x348>)
   db8ca:	429e      	cmp	r6, r3
   db8cc:	f300 80c3 	bgt.w	dba56 <atan+0x1be>
   db8d0:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   db8d4:	429e      	cmp	r6, r3
   db8d6:	f340 80ac 	ble.w	dba32 <atan+0x19a>
   db8da:	f04f 3bff 	mov.w	fp, #4294967295
   db8de:	4622      	mov	r2, r4
   db8e0:	462b      	mov	r3, r5
   db8e2:	4620      	mov	r0, r4
   db8e4:	4629      	mov	r1, r5
   db8e6:	f000 fe25 	bl	dc534 <__aeabi_dmul>
   db8ea:	4602      	mov	r2, r0
   db8ec:	460b      	mov	r3, r1
   db8ee:	4680      	mov	r8, r0
   db8f0:	4689      	mov	r9, r1
   db8f2:	f000 fe1f 	bl	dc534 <__aeabi_dmul>
   db8f6:	a39e      	add	r3, pc, #632	; (adr r3, dbb70 <atan+0x2d8>)
   db8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   db8fc:	4606      	mov	r6, r0
   db8fe:	460f      	mov	r7, r1
   db900:	f000 fe18 	bl	dc534 <__aeabi_dmul>
   db904:	a39c      	add	r3, pc, #624	; (adr r3, dbb78 <atan+0x2e0>)
   db906:	e9d3 2300 	ldrd	r2, r3, [r3]
   db90a:	f000 fc5d 	bl	dc1c8 <__adddf3>
   db90e:	4632      	mov	r2, r6
   db910:	463b      	mov	r3, r7
   db912:	f000 fe0f 	bl	dc534 <__aeabi_dmul>
   db916:	a39a      	add	r3, pc, #616	; (adr r3, dbb80 <atan+0x2e8>)
   db918:	e9d3 2300 	ldrd	r2, r3, [r3]
   db91c:	f000 fc54 	bl	dc1c8 <__adddf3>
   db920:	4632      	mov	r2, r6
   db922:	463b      	mov	r3, r7
   db924:	f000 fe06 	bl	dc534 <__aeabi_dmul>
   db928:	a397      	add	r3, pc, #604	; (adr r3, dbb88 <atan+0x2f0>)
   db92a:	e9d3 2300 	ldrd	r2, r3, [r3]
   db92e:	f000 fc4b 	bl	dc1c8 <__adddf3>
   db932:	4632      	mov	r2, r6
   db934:	463b      	mov	r3, r7
   db936:	f000 fdfd 	bl	dc534 <__aeabi_dmul>
   db93a:	a395      	add	r3, pc, #596	; (adr r3, dbb90 <atan+0x2f8>)
   db93c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db940:	f000 fc42 	bl	dc1c8 <__adddf3>
   db944:	4632      	mov	r2, r6
   db946:	463b      	mov	r3, r7
   db948:	f000 fdf4 	bl	dc534 <__aeabi_dmul>
   db94c:	a392      	add	r3, pc, #584	; (adr r3, dbb98 <atan+0x300>)
   db94e:	e9d3 2300 	ldrd	r2, r3, [r3]
   db952:	f000 fc39 	bl	dc1c8 <__adddf3>
   db956:	4642      	mov	r2, r8
   db958:	464b      	mov	r3, r9
   db95a:	f000 fdeb 	bl	dc534 <__aeabi_dmul>
   db95e:	a390      	add	r3, pc, #576	; (adr r3, dbba0 <atan+0x308>)
   db960:	e9d3 2300 	ldrd	r2, r3, [r3]
   db964:	4680      	mov	r8, r0
   db966:	4689      	mov	r9, r1
   db968:	4630      	mov	r0, r6
   db96a:	4639      	mov	r1, r7
   db96c:	f000 fde2 	bl	dc534 <__aeabi_dmul>
   db970:	a38d      	add	r3, pc, #564	; (adr r3, dbba8 <atan+0x310>)
   db972:	e9d3 2300 	ldrd	r2, r3, [r3]
   db976:	f000 fc25 	bl	dc1c4 <__aeabi_dsub>
   db97a:	4632      	mov	r2, r6
   db97c:	463b      	mov	r3, r7
   db97e:	f000 fdd9 	bl	dc534 <__aeabi_dmul>
   db982:	a38b      	add	r3, pc, #556	; (adr r3, dbbb0 <atan+0x318>)
   db984:	e9d3 2300 	ldrd	r2, r3, [r3]
   db988:	f000 fc1c 	bl	dc1c4 <__aeabi_dsub>
   db98c:	4632      	mov	r2, r6
   db98e:	463b      	mov	r3, r7
   db990:	f000 fdd0 	bl	dc534 <__aeabi_dmul>
   db994:	a388      	add	r3, pc, #544	; (adr r3, dbbb8 <atan+0x320>)
   db996:	e9d3 2300 	ldrd	r2, r3, [r3]
   db99a:	f000 fc13 	bl	dc1c4 <__aeabi_dsub>
   db99e:	4632      	mov	r2, r6
   db9a0:	463b      	mov	r3, r7
   db9a2:	f000 fdc7 	bl	dc534 <__aeabi_dmul>
   db9a6:	a386      	add	r3, pc, #536	; (adr r3, dbbc0 <atan+0x328>)
   db9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   db9ac:	f000 fc0a 	bl	dc1c4 <__aeabi_dsub>
   db9b0:	4632      	mov	r2, r6
   db9b2:	463b      	mov	r3, r7
   db9b4:	f000 fdbe 	bl	dc534 <__aeabi_dmul>
   db9b8:	f1bb 3fff 	cmp.w	fp, #4294967295
   db9bc:	4602      	mov	r2, r0
   db9be:	460b      	mov	r3, r1
   db9c0:	d078      	beq.n	dbab4 <atan+0x21c>
   db9c2:	4640      	mov	r0, r8
   db9c4:	4649      	mov	r1, r9
   db9c6:	f000 fbff 	bl	dc1c8 <__adddf3>
   db9ca:	4e86      	ldr	r6, [pc, #536]	; (dbbe4 <atan+0x34c>)
   db9cc:	4622      	mov	r2, r4
   db9ce:	462b      	mov	r3, r5
   db9d0:	f000 fdb0 	bl	dc534 <__aeabi_dmul>
   db9d4:	4b84      	ldr	r3, [pc, #528]	; (dbbe8 <atan+0x350>)
   db9d6:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   db9da:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   db9de:	449b      	add	fp, r3
   db9e0:	e9db 2300 	ldrd	r2, r3, [fp]
   db9e4:	f000 fbee 	bl	dc1c4 <__aeabi_dsub>
   db9e8:	4622      	mov	r2, r4
   db9ea:	462b      	mov	r3, r5
   db9ec:	f000 fbea 	bl	dc1c4 <__aeabi_dsub>
   db9f0:	4602      	mov	r2, r0
   db9f2:	460b      	mov	r3, r1
   db9f4:	e9d6 0100 	ldrd	r0, r1, [r6]
   db9f8:	f000 fbe4 	bl	dc1c4 <__aeabi_dsub>
   db9fc:	f1ba 0f00 	cmp.w	sl, #0
   dba00:	ec41 0b10 	vmov	d0, r0, r1
   dba04:	da13      	bge.n	dba2e <atan+0x196>
   dba06:	ee10 1a90 	vmov	r1, s1
   dba0a:	4602      	mov	r2, r0
   dba0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dba10:	ec43 2b10 	vmov	d0, r2, r3
   dba14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dba18:	2c00      	cmp	r4, #0
   dba1a:	f43f af4d 	beq.w	db8b8 <atan+0x20>
   dba1e:	4622      	mov	r2, r4
   dba20:	462b      	mov	r3, r5
   dba22:	4620      	mov	r0, r4
   dba24:	4629      	mov	r1, r5
   dba26:	f000 fbcf 	bl	dc1c8 <__adddf3>
   dba2a:	ec41 0b10 	vmov	d0, r0, r1
   dba2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dba32:	a365      	add	r3, pc, #404	; (adr r3, dbbc8 <atan+0x330>)
   dba34:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba38:	ee10 0a10 	vmov	r0, s0
   dba3c:	4629      	mov	r1, r5
   dba3e:	f000 fbc3 	bl	dc1c8 <__adddf3>
   dba42:	4b6a      	ldr	r3, [pc, #424]	; (dbbec <atan+0x354>)
   dba44:	2200      	movs	r2, #0
   dba46:	f001 f805 	bl	dca54 <__aeabi_dcmpgt>
   dba4a:	2800      	cmp	r0, #0
   dba4c:	f43f af45 	beq.w	db8da <atan+0x42>
   dba50:	ec45 4b10 	vmov	d0, r4, r5
   dba54:	e7eb      	b.n	dba2e <atan+0x196>
   dba56:	f000 f8d3 	bl	dbc00 <fabs>
   dba5a:	4b65      	ldr	r3, [pc, #404]	; (dbbf0 <atan+0x358>)
   dba5c:	429e      	cmp	r6, r3
   dba5e:	ec55 4b10 	vmov	r4, r5, d0
   dba62:	dc39      	bgt.n	dbad8 <atan+0x240>
   dba64:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   dba68:	429e      	cmp	r6, r3
   dba6a:	dc62      	bgt.n	dbb32 <atan+0x29a>
   dba6c:	ee10 2a10 	vmov	r2, s0
   dba70:	ee10 0a10 	vmov	r0, s0
   dba74:	462b      	mov	r3, r5
   dba76:	4629      	mov	r1, r5
   dba78:	f000 fba6 	bl	dc1c8 <__adddf3>
   dba7c:	4b5b      	ldr	r3, [pc, #364]	; (dbbec <atan+0x354>)
   dba7e:	2200      	movs	r2, #0
   dba80:	f000 fba0 	bl	dc1c4 <__aeabi_dsub>
   dba84:	2200      	movs	r2, #0
   dba86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dba8a:	4606      	mov	r6, r0
   dba8c:	460f      	mov	r7, r1
   dba8e:	4620      	mov	r0, r4
   dba90:	4629      	mov	r1, r5
   dba92:	f000 fb99 	bl	dc1c8 <__adddf3>
   dba96:	4602      	mov	r2, r0
   dba98:	460b      	mov	r3, r1
   dba9a:	4630      	mov	r0, r6
   dba9c:	4639      	mov	r1, r7
   dba9e:	f000 fe73 	bl	dc788 <__aeabi_ddiv>
   dbaa2:	f04f 0b00 	mov.w	fp, #0
   dbaa6:	4604      	mov	r4, r0
   dbaa8:	460d      	mov	r5, r1
   dbaaa:	e718      	b.n	db8de <atan+0x46>
   dbaac:	ed9f 0b48 	vldr	d0, [pc, #288]	; dbbd0 <atan+0x338>
   dbab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbab4:	4640      	mov	r0, r8
   dbab6:	4649      	mov	r1, r9
   dbab8:	f000 fb86 	bl	dc1c8 <__adddf3>
   dbabc:	4622      	mov	r2, r4
   dbabe:	462b      	mov	r3, r5
   dbac0:	f000 fd38 	bl	dc534 <__aeabi_dmul>
   dbac4:	4602      	mov	r2, r0
   dbac6:	460b      	mov	r3, r1
   dbac8:	4620      	mov	r0, r4
   dbaca:	4629      	mov	r1, r5
   dbacc:	f000 fb7a 	bl	dc1c4 <__aeabi_dsub>
   dbad0:	ec41 0b10 	vmov	d0, r0, r1
   dbad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbad8:	4b46      	ldr	r3, [pc, #280]	; (dbbf4 <atan+0x35c>)
   dbada:	429e      	cmp	r6, r3
   dbadc:	da1d      	bge.n	dbb1a <atan+0x282>
   dbade:	ee10 0a10 	vmov	r0, s0
   dbae2:	4b45      	ldr	r3, [pc, #276]	; (dbbf8 <atan+0x360>)
   dbae4:	2200      	movs	r2, #0
   dbae6:	4629      	mov	r1, r5
   dbae8:	f000 fb6c 	bl	dc1c4 <__aeabi_dsub>
   dbaec:	4b42      	ldr	r3, [pc, #264]	; (dbbf8 <atan+0x360>)
   dbaee:	4606      	mov	r6, r0
   dbaf0:	460f      	mov	r7, r1
   dbaf2:	2200      	movs	r2, #0
   dbaf4:	4620      	mov	r0, r4
   dbaf6:	4629      	mov	r1, r5
   dbaf8:	f000 fd1c 	bl	dc534 <__aeabi_dmul>
   dbafc:	4b3b      	ldr	r3, [pc, #236]	; (dbbec <atan+0x354>)
   dbafe:	2200      	movs	r2, #0
   dbb00:	f000 fb62 	bl	dc1c8 <__adddf3>
   dbb04:	4602      	mov	r2, r0
   dbb06:	460b      	mov	r3, r1
   dbb08:	4630      	mov	r0, r6
   dbb0a:	4639      	mov	r1, r7
   dbb0c:	f000 fe3c 	bl	dc788 <__aeabi_ddiv>
   dbb10:	f04f 0b02 	mov.w	fp, #2
   dbb14:	4604      	mov	r4, r0
   dbb16:	460d      	mov	r5, r1
   dbb18:	e6e1      	b.n	db8de <atan+0x46>
   dbb1a:	462b      	mov	r3, r5
   dbb1c:	ee10 2a10 	vmov	r2, s0
   dbb20:	4936      	ldr	r1, [pc, #216]	; (dbbfc <atan+0x364>)
   dbb22:	2000      	movs	r0, #0
   dbb24:	f000 fe30 	bl	dc788 <__aeabi_ddiv>
   dbb28:	f04f 0b03 	mov.w	fp, #3
   dbb2c:	4604      	mov	r4, r0
   dbb2e:	460d      	mov	r5, r1
   dbb30:	e6d5      	b.n	db8de <atan+0x46>
   dbb32:	ee10 0a10 	vmov	r0, s0
   dbb36:	4b2d      	ldr	r3, [pc, #180]	; (dbbec <atan+0x354>)
   dbb38:	2200      	movs	r2, #0
   dbb3a:	4629      	mov	r1, r5
   dbb3c:	f000 fb42 	bl	dc1c4 <__aeabi_dsub>
   dbb40:	4b2a      	ldr	r3, [pc, #168]	; (dbbec <atan+0x354>)
   dbb42:	2200      	movs	r2, #0
   dbb44:	4606      	mov	r6, r0
   dbb46:	460f      	mov	r7, r1
   dbb48:	4620      	mov	r0, r4
   dbb4a:	4629      	mov	r1, r5
   dbb4c:	f000 fb3c 	bl	dc1c8 <__adddf3>
   dbb50:	4602      	mov	r2, r0
   dbb52:	460b      	mov	r3, r1
   dbb54:	4630      	mov	r0, r6
   dbb56:	4639      	mov	r1, r7
   dbb58:	f000 fe16 	bl	dc788 <__aeabi_ddiv>
   dbb5c:	f04f 0b01 	mov.w	fp, #1
   dbb60:	4604      	mov	r4, r0
   dbb62:	460d      	mov	r5, r1
   dbb64:	e6bb      	b.n	db8de <atan+0x46>
   dbb66:	bf00      	nop
   dbb68:	54442d18 	.word	0x54442d18
   dbb6c:	3ff921fb 	.word	0x3ff921fb
   dbb70:	e322da11 	.word	0xe322da11
   dbb74:	3f90ad3a 	.word	0x3f90ad3a
   dbb78:	24760deb 	.word	0x24760deb
   dbb7c:	3fa97b4b 	.word	0x3fa97b4b
   dbb80:	a0d03d51 	.word	0xa0d03d51
   dbb84:	3fb10d66 	.word	0x3fb10d66
   dbb88:	c54c206e 	.word	0xc54c206e
   dbb8c:	3fb745cd 	.word	0x3fb745cd
   dbb90:	920083ff 	.word	0x920083ff
   dbb94:	3fc24924 	.word	0x3fc24924
   dbb98:	5555550d 	.word	0x5555550d
   dbb9c:	3fd55555 	.word	0x3fd55555
   dbba0:	2c6a6c2f 	.word	0x2c6a6c2f
   dbba4:	bfa2b444 	.word	0xbfa2b444
   dbba8:	52defd9a 	.word	0x52defd9a
   dbbac:	3fadde2d 	.word	0x3fadde2d
   dbbb0:	af749a6d 	.word	0xaf749a6d
   dbbb4:	3fb3b0f2 	.word	0x3fb3b0f2
   dbbb8:	fe231671 	.word	0xfe231671
   dbbbc:	3fbc71c6 	.word	0x3fbc71c6
   dbbc0:	9998ebc4 	.word	0x9998ebc4
   dbbc4:	3fc99999 	.word	0x3fc99999
   dbbc8:	8800759c 	.word	0x8800759c
   dbbcc:	7e37e43c 	.word	0x7e37e43c
   dbbd0:	54442d18 	.word	0x54442d18
   dbbd4:	bff921fb 	.word	0xbff921fb
   dbbd8:	440fffff 	.word	0x440fffff
   dbbdc:	7ff00000 	.word	0x7ff00000
   dbbe0:	3fdbffff 	.word	0x3fdbffff
   dbbe4:	000de8f0 	.word	0x000de8f0
   dbbe8:	000de910 	.word	0x000de910
   dbbec:	3ff00000 	.word	0x3ff00000
   dbbf0:	3ff2ffff 	.word	0x3ff2ffff
   dbbf4:	40038000 	.word	0x40038000
   dbbf8:	3ff80000 	.word	0x3ff80000
   dbbfc:	bff00000 	.word	0xbff00000

000dbc00 <fabs>:
   dbc00:	ec51 0b10 	vmov	r0, r1, d0
   dbc04:	ee10 2a10 	vmov	r2, s0
   dbc08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dbc0c:	ec43 2b10 	vmov	d0, r2, r3
   dbc10:	4770      	bx	lr
   dbc12:	bf00      	nop

000dbc14 <finite>:
   dbc14:	b082      	sub	sp, #8
   dbc16:	ed8d 0b00 	vstr	d0, [sp]
   dbc1a:	9801      	ldr	r0, [sp, #4]
   dbc1c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   dbc20:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   dbc24:	0fc0      	lsrs	r0, r0, #31
   dbc26:	b002      	add	sp, #8
   dbc28:	4770      	bx	lr
   dbc2a:	bf00      	nop

000dbc2c <matherr>:
   dbc2c:	2000      	movs	r0, #0
   dbc2e:	4770      	bx	lr

000dbc30 <nan>:
   dbc30:	ed9f 0b01 	vldr	d0, [pc, #4]	; dbc38 <nan+0x8>
   dbc34:	4770      	bx	lr
   dbc36:	bf00      	nop
   dbc38:	00000000 	.word	0x00000000
   dbc3c:	7ff80000 	.word	0x7ff80000

000dbc40 <rint>:
   dbc40:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbc42:	ec53 2b10 	vmov	r2, r3, d0
   dbc46:	f3c3 560a 	ubfx	r6, r3, #20, #11
   dbc4a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   dbc4e:	2813      	cmp	r0, #19
   dbc50:	ee10 5a10 	vmov	r5, s0
   dbc54:	b083      	sub	sp, #12
   dbc56:	4619      	mov	r1, r3
   dbc58:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   dbc5c:	dc31      	bgt.n	dbcc2 <rint+0x82>
   dbc5e:	2800      	cmp	r0, #0
   dbc60:	db4c      	blt.n	dbcfc <rint+0xbc>
   dbc62:	4e3e      	ldr	r6, [pc, #248]	; (dbd5c <rint+0x11c>)
   dbc64:	4106      	asrs	r6, r0
   dbc66:	ea03 0706 	and.w	r7, r3, r6
   dbc6a:	4317      	orrs	r7, r2
   dbc6c:	d02e      	beq.n	dbccc <rint+0x8c>
   dbc6e:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   dbc72:	431d      	orrs	r5, r3
   dbc74:	ea4f 0656 	mov.w	r6, r6, lsr #1
   dbc78:	d00c      	beq.n	dbc94 <rint+0x54>
   dbc7a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   dbc7e:	2813      	cmp	r0, #19
   dbc80:	ea21 0606 	bic.w	r6, r1, r6
   dbc84:	fa43 f100 	asr.w	r1, r3, r0
   dbc88:	ea41 0106 	orr.w	r1, r1, r6
   dbc8c:	bf0c      	ite	eq
   dbc8e:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   dbc92:	2500      	movne	r5, #0
   dbc94:	4832      	ldr	r0, [pc, #200]	; (dbd60 <rint+0x120>)
   dbc96:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   dbc9a:	462a      	mov	r2, r5
   dbc9c:	e9d4 4500 	ldrd	r4, r5, [r4]
   dbca0:	460b      	mov	r3, r1
   dbca2:	4620      	mov	r0, r4
   dbca4:	4629      	mov	r1, r5
   dbca6:	f000 fa8f 	bl	dc1c8 <__adddf3>
   dbcaa:	e9cd 0100 	strd	r0, r1, [sp]
   dbcae:	e9dd 0100 	ldrd	r0, r1, [sp]
   dbcb2:	4622      	mov	r2, r4
   dbcb4:	462b      	mov	r3, r5
   dbcb6:	f000 fa85 	bl	dc1c4 <__aeabi_dsub>
   dbcba:	ec41 0b10 	vmov	d0, r0, r1
   dbcbe:	b003      	add	sp, #12
   dbcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbcc2:	2833      	cmp	r0, #51	; 0x33
   dbcc4:	dd06      	ble.n	dbcd4 <rint+0x94>
   dbcc6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   dbcca:	d040      	beq.n	dbd4e <rint+0x10e>
   dbccc:	ec43 2b10 	vmov	d0, r2, r3
   dbcd0:	b003      	add	sp, #12
   dbcd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbcd4:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   dbcd8:	f04f 30ff 	mov.w	r0, #4294967295
   dbcdc:	40f0      	lsrs	r0, r6
   dbcde:	4202      	tst	r2, r0
   dbce0:	d0f4      	beq.n	dbccc <rint+0x8c>
   dbce2:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   dbce6:	ea4f 0350 	mov.w	r3, r0, lsr #1
   dbcea:	d0d3      	beq.n	dbc94 <rint+0x54>
   dbcec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   dbcf0:	ea25 0503 	bic.w	r5, r5, r3
   dbcf4:	fa42 f606 	asr.w	r6, r2, r6
   dbcf8:	4335      	orrs	r5, r6
   dbcfa:	e7cb      	b.n	dbc94 <rint+0x54>
   dbcfc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   dbd00:	4310      	orrs	r0, r2
   dbd02:	d0e3      	beq.n	dbccc <rint+0x8c>
   dbd04:	f3c3 0013 	ubfx	r0, r3, #0, #20
   dbd08:	4310      	orrs	r0, r2
   dbd0a:	4245      	negs	r5, r0
   dbd0c:	4305      	orrs	r5, r0
   dbd0e:	4814      	ldr	r0, [pc, #80]	; (dbd60 <rint+0x120>)
   dbd10:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   dbd14:	e9d0 6700 	ldrd	r6, r7, [r0]
   dbd18:	0c59      	lsrs	r1, r3, #17
   dbd1a:	0b2d      	lsrs	r5, r5, #12
   dbd1c:	0449      	lsls	r1, r1, #17
   dbd1e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   dbd22:	ea45 0301 	orr.w	r3, r5, r1
   dbd26:	4630      	mov	r0, r6
   dbd28:	4639      	mov	r1, r7
   dbd2a:	f000 fa4d 	bl	dc1c8 <__adddf3>
   dbd2e:	e9cd 0100 	strd	r0, r1, [sp]
   dbd32:	463b      	mov	r3, r7
   dbd34:	e9dd 0100 	ldrd	r0, r1, [sp]
   dbd38:	4632      	mov	r2, r6
   dbd3a:	f000 fa43 	bl	dc1c4 <__aeabi_dsub>
   dbd3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dbd42:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   dbd46:	ec41 0b10 	vmov	d0, r0, r1
   dbd4a:	b003      	add	sp, #12
   dbd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbd4e:	ee10 0a10 	vmov	r0, s0
   dbd52:	f000 fa39 	bl	dc1c8 <__adddf3>
   dbd56:	ec41 0b10 	vmov	d0, r0, r1
   dbd5a:	e7b9      	b.n	dbcd0 <rint+0x90>
   dbd5c:	000fffff 	.word	0x000fffff
   dbd60:	000de930 	.word	0x000de930
   dbd64:	00000000 	.word	0x00000000

000dbd68 <scalbn>:
   dbd68:	b538      	push	{r3, r4, r5, lr}
   dbd6a:	ec53 2b10 	vmov	r2, r3, d0
   dbd6e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   dbd72:	461c      	mov	r4, r3
   dbd74:	4605      	mov	r5, r0
   dbd76:	bb81      	cbnz	r1, dbdda <scalbn+0x72>
   dbd78:	ee10 1a10 	vmov	r1, s0
   dbd7c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   dbd80:	4321      	orrs	r1, r4
   dbd82:	d029      	beq.n	dbdd8 <scalbn+0x70>
   dbd84:	4619      	mov	r1, r3
   dbd86:	2200      	movs	r2, #0
   dbd88:	4b3d      	ldr	r3, [pc, #244]	; (dbe80 <scalbn+0x118>)
   dbd8a:	4c3e      	ldr	r4, [pc, #248]	; (dbe84 <scalbn+0x11c>)
   dbd8c:	ee10 0a10 	vmov	r0, s0
   dbd90:	f000 fbd0 	bl	dc534 <__aeabi_dmul>
   dbd94:	42a5      	cmp	r5, r4
   dbd96:	4602      	mov	r2, r0
   dbd98:	460b      	mov	r3, r1
   dbd9a:	db16      	blt.n	dbdca <scalbn+0x62>
   dbd9c:	460c      	mov	r4, r1
   dbd9e:	f3c1 510a 	ubfx	r1, r1, #20, #11
   dbda2:	3936      	subs	r1, #54	; 0x36
   dbda4:	4429      	add	r1, r5
   dbda6:	f240 70fe 	movw	r0, #2046	; 0x7fe
   dbdaa:	4281      	cmp	r1, r0
   dbdac:	dc21      	bgt.n	dbdf2 <scalbn+0x8a>
   dbdae:	2900      	cmp	r1, #0
   dbdb0:	dc47      	bgt.n	dbe42 <scalbn+0xda>
   dbdb2:	f111 0f35 	cmn.w	r1, #53	; 0x35
   dbdb6:	da34      	bge.n	dbe22 <scalbn+0xba>
   dbdb8:	f24c 3150 	movw	r1, #50000	; 0xc350
   dbdbc:	428d      	cmp	r5, r1
   dbdbe:	dc18      	bgt.n	dbdf2 <scalbn+0x8a>
   dbdc0:	2b00      	cmp	r3, #0
   dbdc2:	a127      	add	r1, pc, #156	; (adr r1, dbe60 <scalbn+0xf8>)
   dbdc4:	e9d1 0100 	ldrd	r0, r1, [r1]
   dbdc8:	db44      	blt.n	dbe54 <scalbn+0xec>
   dbdca:	a325      	add	r3, pc, #148	; (adr r3, dbe60 <scalbn+0xf8>)
   dbdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbdd0:	f000 fbb0 	bl	dc534 <__aeabi_dmul>
   dbdd4:	ec41 0b10 	vmov	d0, r0, r1
   dbdd8:	bd38      	pop	{r3, r4, r5, pc}
   dbdda:	f240 70ff 	movw	r0, #2047	; 0x7ff
   dbdde:	4281      	cmp	r1, r0
   dbde0:	d1e0      	bne.n	dbda4 <scalbn+0x3c>
   dbde2:	ee10 0a10 	vmov	r0, s0
   dbde6:	4619      	mov	r1, r3
   dbde8:	f000 f9ee 	bl	dc1c8 <__adddf3>
   dbdec:	ec41 0b10 	vmov	d0, r0, r1
   dbdf0:	bd38      	pop	{r3, r4, r5, pc}
   dbdf2:	2b00      	cmp	r3, #0
   dbdf4:	a11c      	add	r1, pc, #112	; (adr r1, dbe68 <scalbn+0x100>)
   dbdf6:	e9d1 0100 	ldrd	r0, r1, [r1]
   dbdfa:	db07      	blt.n	dbe0c <scalbn+0xa4>
   dbdfc:	a31a      	add	r3, pc, #104	; (adr r3, dbe68 <scalbn+0x100>)
   dbdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe02:	f000 fb97 	bl	dc534 <__aeabi_dmul>
   dbe06:	ec41 0b10 	vmov	d0, r0, r1
   dbe0a:	bd38      	pop	{r3, r4, r5, pc}
   dbe0c:	a118      	add	r1, pc, #96	; (adr r1, dbe70 <scalbn+0x108>)
   dbe0e:	e9d1 0100 	ldrd	r0, r1, [r1]
   dbe12:	a315      	add	r3, pc, #84	; (adr r3, dbe68 <scalbn+0x100>)
   dbe14:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe18:	f000 fb8c 	bl	dc534 <__aeabi_dmul>
   dbe1c:	ec41 0b10 	vmov	d0, r0, r1
   dbe20:	e7f3      	b.n	dbe0a <scalbn+0xa2>
   dbe22:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   dbe26:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   dbe2a:	3136      	adds	r1, #54	; 0x36
   dbe2c:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   dbe30:	4610      	mov	r0, r2
   dbe32:	4619      	mov	r1, r3
   dbe34:	2200      	movs	r2, #0
   dbe36:	4b14      	ldr	r3, [pc, #80]	; (dbe88 <scalbn+0x120>)
   dbe38:	f000 fb7c 	bl	dc534 <__aeabi_dmul>
   dbe3c:	ec41 0b10 	vmov	d0, r0, r1
   dbe40:	bd38      	pop	{r3, r4, r5, pc}
   dbe42:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   dbe46:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   dbe4a:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   dbe4e:	ec43 2b10 	vmov	d0, r2, r3
   dbe52:	bd38      	pop	{r3, r4, r5, pc}
   dbe54:	a108      	add	r1, pc, #32	; (adr r1, dbe78 <scalbn+0x110>)
   dbe56:	e9d1 0100 	ldrd	r0, r1, [r1]
   dbe5a:	e7b6      	b.n	dbdca <scalbn+0x62>
   dbe5c:	f3af 8000 	nop.w
   dbe60:	c2f8f359 	.word	0xc2f8f359
   dbe64:	01a56e1f 	.word	0x01a56e1f
   dbe68:	8800759c 	.word	0x8800759c
   dbe6c:	7e37e43c 	.word	0x7e37e43c
   dbe70:	8800759c 	.word	0x8800759c
   dbe74:	fe37e43c 	.word	0xfe37e43c
   dbe78:	c2f8f359 	.word	0xc2f8f359
   dbe7c:	81a56e1f 	.word	0x81a56e1f
   dbe80:	43500000 	.word	0x43500000
   dbe84:	ffff3cb0 	.word	0xffff3cb0
   dbe88:	3c900000 	.word	0x3c900000

000dbe8c <atanf>:
   dbe8c:	b538      	push	{r3, r4, r5, lr}
   dbe8e:	ee10 5a10 	vmov	r5, s0
   dbe92:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   dbe96:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   dbe9a:	eef0 7a40 	vmov.f32	s15, s0
   dbe9e:	db0b      	blt.n	dbeb8 <atanf+0x2c>
   dbea0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   dbea4:	dc59      	bgt.n	dbf5a <atanf+0xce>
   dbea6:	eddf 7a52 	vldr	s15, [pc, #328]	; dbff0 <atanf+0x164>
   dbeaa:	ed9f 0a52 	vldr	s0, [pc, #328]	; dbff4 <atanf+0x168>
   dbeae:	2d00      	cmp	r5, #0
   dbeb0:	bfc8      	it	gt
   dbeb2:	eeb0 0a67 	vmovgt.f32	s0, s15
   dbeb6:	bd38      	pop	{r3, r4, r5, pc}
   dbeb8:	4b4f      	ldr	r3, [pc, #316]	; (dbff8 <atanf+0x16c>)
   dbeba:	429c      	cmp	r4, r3
   dbebc:	dc5c      	bgt.n	dbf78 <atanf+0xec>
   dbebe:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   dbec2:	db4d      	blt.n	dbf60 <atanf+0xd4>
   dbec4:	f04f 33ff 	mov.w	r3, #4294967295
   dbec8:	ee27 6aa7 	vmul.f32	s12, s15, s15
   dbecc:	ed9f 1a4b 	vldr	s2, [pc, #300]	; dbffc <atanf+0x170>
   dbed0:	ed9f 2a4b 	vldr	s4, [pc, #300]	; dc000 <atanf+0x174>
   dbed4:	ed9f 3a4b 	vldr	s6, [pc, #300]	; dc004 <atanf+0x178>
   dbed8:	eddf 1a4b 	vldr	s3, [pc, #300]	; dc008 <atanf+0x17c>
   dbedc:	eddf 2a4b 	vldr	s5, [pc, #300]	; dc00c <atanf+0x180>
   dbee0:	ed9f 4a4b 	vldr	s8, [pc, #300]	; dc010 <atanf+0x184>
   dbee4:	eddf 3a4b 	vldr	s7, [pc, #300]	; dc014 <atanf+0x188>
   dbee8:	ed9f 5a4b 	vldr	s10, [pc, #300]	; dc018 <atanf+0x18c>
   dbeec:	eddf 4a4b 	vldr	s9, [pc, #300]	; dc01c <atanf+0x190>
   dbef0:	eddf 6a4b 	vldr	s13, [pc, #300]	; dc020 <atanf+0x194>
   dbef4:	eddf 5a4b 	vldr	s11, [pc, #300]	; dc024 <atanf+0x198>
   dbef8:	ee26 7a06 	vmul.f32	s14, s12, s12
   dbefc:	1c5a      	adds	r2, r3, #1
   dbefe:	eea7 2a01 	vfma.f32	s4, s14, s2
   dbf02:	eee7 2a21 	vfma.f32	s5, s14, s3
   dbf06:	eea2 3a07 	vfma.f32	s6, s4, s14
   dbf0a:	eee2 3a87 	vfma.f32	s7, s5, s14
   dbf0e:	eea3 4a07 	vfma.f32	s8, s6, s14
   dbf12:	eee3 4a87 	vfma.f32	s9, s7, s14
   dbf16:	eea4 5a07 	vfma.f32	s10, s8, s14
   dbf1a:	eee4 5a87 	vfma.f32	s11, s9, s14
   dbf1e:	eee5 6a07 	vfma.f32	s13, s10, s14
   dbf22:	ee25 7a87 	vmul.f32	s14, s11, s14
   dbf26:	ee66 6a86 	vmul.f32	s13, s13, s12
   dbf2a:	d03a      	beq.n	dbfa2 <atanf+0x116>
   dbf2c:	493e      	ldr	r1, [pc, #248]	; (dc028 <atanf+0x19c>)
   dbf2e:	4a3f      	ldr	r2, [pc, #252]	; (dc02c <atanf+0x1a0>)
   dbf30:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   dbf34:	ee76 6a87 	vadd.f32	s13, s13, s14
   dbf38:	ed91 0a00 	vldr	s0, [r1]
   dbf3c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   dbf40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dbf44:	2d00      	cmp	r5, #0
   dbf46:	ed93 7a00 	vldr	s14, [r3]
   dbf4a:	ee70 7a67 	vsub.f32	s15, s0, s15
   dbf4e:	ee37 0a67 	vsub.f32	s0, s14, s15
   dbf52:	dab0      	bge.n	dbeb6 <atanf+0x2a>
   dbf54:	eeb1 0a40 	vneg.f32	s0, s0
   dbf58:	bd38      	pop	{r3, r4, r5, pc}
   dbf5a:	ee30 0a00 	vadd.f32	s0, s0, s0
   dbf5e:	bd38      	pop	{r3, r4, r5, pc}
   dbf60:	ed9f 7a33 	vldr	s14, [pc, #204]	; dc030 <atanf+0x1a4>
   dbf64:	ee30 7a07 	vadd.f32	s14, s0, s14
   dbf68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   dbf6c:	eeb4 7ae6 	vcmpe.f32	s14, s13
   dbf70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbf74:	dda6      	ble.n	dbec4 <atanf+0x38>
   dbf76:	bd38      	pop	{r3, r4, r5, pc}
   dbf78:	f000 f860 	bl	dc03c <fabsf>
   dbf7c:	4b2d      	ldr	r3, [pc, #180]	; (dc034 <atanf+0x1a8>)
   dbf7e:	429c      	cmp	r4, r3
   dbf80:	dc16      	bgt.n	dbfb0 <atanf+0x124>
   dbf82:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   dbf86:	429c      	cmp	r4, r3
   dbf88:	dc27      	bgt.n	dbfda <atanf+0x14e>
   dbf8a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   dbf8e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   dbf92:	eea0 7a27 	vfma.f32	s14, s0, s15
   dbf96:	2300      	movs	r3, #0
   dbf98:	ee30 0a27 	vadd.f32	s0, s0, s15
   dbf9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dbfa0:	e792      	b.n	dbec8 <atanf+0x3c>
   dbfa2:	ee76 6a87 	vadd.f32	s13, s13, s14
   dbfa6:	eee6 7ae7 	vfms.f32	s15, s13, s15
   dbfaa:	eeb0 0a67 	vmov.f32	s0, s15
   dbfae:	bd38      	pop	{r3, r4, r5, pc}
   dbfb0:	4b21      	ldr	r3, [pc, #132]	; (dc038 <atanf+0x1ac>)
   dbfb2:	429c      	cmp	r4, r3
   dbfb4:	dc0b      	bgt.n	dbfce <atanf+0x142>
   dbfb6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   dbfba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   dbfbe:	eea0 7a27 	vfma.f32	s14, s0, s15
   dbfc2:	2302      	movs	r3, #2
   dbfc4:	ee30 0a67 	vsub.f32	s0, s0, s15
   dbfc8:	eec0 7a07 	vdiv.f32	s15, s0, s14
   dbfcc:	e77c      	b.n	dbec8 <atanf+0x3c>
   dbfce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   dbfd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dbfd6:	2303      	movs	r3, #3
   dbfd8:	e776      	b.n	dbec8 <atanf+0x3c>
   dbfda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   dbfde:	ee30 7a67 	vsub.f32	s14, s0, s15
   dbfe2:	ee30 0a27 	vadd.f32	s0, s0, s15
   dbfe6:	2301      	movs	r3, #1
   dbfe8:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dbfec:	e76c      	b.n	dbec8 <atanf+0x3c>
   dbfee:	bf00      	nop
   dbff0:	3fc90fdb 	.word	0x3fc90fdb
   dbff4:	bfc90fdb 	.word	0xbfc90fdb
   dbff8:	3edfffff 	.word	0x3edfffff
   dbffc:	3c8569d7 	.word	0x3c8569d7
   dc000:	3d4bda59 	.word	0x3d4bda59
   dc004:	3d886b35 	.word	0x3d886b35
   dc008:	bd15a221 	.word	0xbd15a221
   dc00c:	bd6ef16b 	.word	0xbd6ef16b
   dc010:	3dba2e6e 	.word	0x3dba2e6e
   dc014:	bd9d8795 	.word	0xbd9d8795
   dc018:	3e124925 	.word	0x3e124925
   dc01c:	bde38e38 	.word	0xbde38e38
   dc020:	3eaaaaab 	.word	0x3eaaaaab
   dc024:	be4ccccd 	.word	0xbe4ccccd
   dc028:	000de950 	.word	0x000de950
   dc02c:	000de940 	.word	0x000de940
   dc030:	7149f2ca 	.word	0x7149f2ca
   dc034:	3f97ffff 	.word	0x3f97ffff
   dc038:	401bffff 	.word	0x401bffff

000dc03c <fabsf>:
   dc03c:	ee10 3a10 	vmov	r3, s0
   dc040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dc044:	ee00 3a10 	vmov	s0, r3
   dc048:	4770      	bx	lr
   dc04a:	bf00      	nop

000dc04c <floorf>:
   dc04c:	ee10 2a10 	vmov	r2, s0
   dc050:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   dc054:	3b7f      	subs	r3, #127	; 0x7f
   dc056:	2b16      	cmp	r3, #22
   dc058:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   dc05c:	dc1a      	bgt.n	dc094 <floorf+0x48>
   dc05e:	2b00      	cmp	r3, #0
   dc060:	db1e      	blt.n	dc0a0 <floorf+0x54>
   dc062:	491a      	ldr	r1, [pc, #104]	; (dc0cc <floorf+0x80>)
   dc064:	4119      	asrs	r1, r3
   dc066:	420a      	tst	r2, r1
   dc068:	d027      	beq.n	dc0ba <floorf+0x6e>
   dc06a:	eddf 7a19 	vldr	s15, [pc, #100]	; dc0d0 <floorf+0x84>
   dc06e:	ee70 7a27 	vadd.f32	s15, s0, s15
   dc072:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dc076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc07a:	dd1e      	ble.n	dc0ba <floorf+0x6e>
   dc07c:	2a00      	cmp	r2, #0
   dc07e:	da04      	bge.n	dc08a <floorf+0x3e>
   dc080:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   dc084:	fa40 f303 	asr.w	r3, r0, r3
   dc088:	441a      	add	r2, r3
   dc08a:	ea22 0301 	bic.w	r3, r2, r1
   dc08e:	ee00 3a10 	vmov	s0, r3
   dc092:	4770      	bx	lr
   dc094:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   dc098:	d30f      	bcc.n	dc0ba <floorf+0x6e>
   dc09a:	ee30 0a00 	vadd.f32	s0, s0, s0
   dc09e:	4770      	bx	lr
   dc0a0:	eddf 7a0b 	vldr	s15, [pc, #44]	; dc0d0 <floorf+0x84>
   dc0a4:	ee70 7a27 	vadd.f32	s15, s0, s15
   dc0a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dc0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc0b0:	dd03      	ble.n	dc0ba <floorf+0x6e>
   dc0b2:	2a00      	cmp	r2, #0
   dc0b4:	db02      	blt.n	dc0bc <floorf+0x70>
   dc0b6:	ed9f 0a07 	vldr	s0, [pc, #28]	; dc0d4 <floorf+0x88>
   dc0ba:	4770      	bx	lr
   dc0bc:	2900      	cmp	r1, #0
   dc0be:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   dc0c2:	bf18      	it	ne
   dc0c4:	eeb0 0a67 	vmovne.f32	s0, s15
   dc0c8:	4770      	bx	lr
   dc0ca:	bf00      	nop
   dc0cc:	007fffff 	.word	0x007fffff
   dc0d0:	7149f2ca 	.word	0x7149f2ca
   dc0d4:	00000000 	.word	0x00000000

000dc0d8 <scalbnf>:
   dc0d8:	b082      	sub	sp, #8
   dc0da:	ed8d 0a01 	vstr	s0, [sp, #4]
   dc0de:	9b01      	ldr	r3, [sp, #4]
   dc0e0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   dc0e4:	d02a      	beq.n	dc13c <scalbnf+0x64>
   dc0e6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   dc0ea:	d223      	bcs.n	dc134 <scalbnf+0x5c>
   dc0ec:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   dc0f0:	d128      	bne.n	dc144 <scalbnf+0x6c>
   dc0f2:	ed9d 7a01 	vldr	s14, [sp, #4]
   dc0f6:	eddf 7a2a 	vldr	s15, [pc, #168]	; dc1a0 <scalbnf+0xc8>
   dc0fa:	4b2a      	ldr	r3, [pc, #168]	; (dc1a4 <scalbnf+0xcc>)
   dc0fc:	ee67 7a27 	vmul.f32	s15, s14, s15
   dc100:	4298      	cmp	r0, r3
   dc102:	edcd 7a01 	vstr	s15, [sp, #4]
   dc106:	db37      	blt.n	dc178 <scalbnf+0xa0>
   dc108:	9b01      	ldr	r3, [sp, #4]
   dc10a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   dc10e:	3a19      	subs	r2, #25
   dc110:	4402      	add	r2, r0
   dc112:	2afe      	cmp	r2, #254	; 0xfe
   dc114:	dd1a      	ble.n	dc14c <scalbnf+0x74>
   dc116:	ed9f 0a24 	vldr	s0, [pc, #144]	; dc1a8 <scalbnf+0xd0>
   dc11a:	ed9f 7a24 	vldr	s14, [pc, #144]	; dc1ac <scalbnf+0xd4>
   dc11e:	9b01      	ldr	r3, [sp, #4]
   dc120:	2b00      	cmp	r3, #0
   dc122:	eef0 7a40 	vmov.f32	s15, s0
   dc126:	bfb8      	it	lt
   dc128:	eeb0 0a47 	vmovlt.f32	s0, s14
   dc12c:	ee20 0a27 	vmul.f32	s0, s0, s15
   dc130:	b002      	add	sp, #8
   dc132:	4770      	bx	lr
   dc134:	ee30 0a00 	vadd.f32	s0, s0, s0
   dc138:	b002      	add	sp, #8
   dc13a:	4770      	bx	lr
   dc13c:	ed9d 0a01 	vldr	s0, [sp, #4]
   dc140:	b002      	add	sp, #8
   dc142:	4770      	bx	lr
   dc144:	0dd2      	lsrs	r2, r2, #23
   dc146:	4402      	add	r2, r0
   dc148:	2afe      	cmp	r2, #254	; 0xfe
   dc14a:	dce4      	bgt.n	dc116 <scalbnf+0x3e>
   dc14c:	2a00      	cmp	r2, #0
   dc14e:	dc0b      	bgt.n	dc168 <scalbnf+0x90>
   dc150:	f112 0f16 	cmn.w	r2, #22
   dc154:	da17      	bge.n	dc186 <scalbnf+0xae>
   dc156:	f24c 3350 	movw	r3, #50000	; 0xc350
   dc15a:	4298      	cmp	r0, r3
   dc15c:	dcdb      	bgt.n	dc116 <scalbnf+0x3e>
   dc15e:	ed9f 0a14 	vldr	s0, [pc, #80]	; dc1b0 <scalbnf+0xd8>
   dc162:	ed9f 7a14 	vldr	s14, [pc, #80]	; dc1b4 <scalbnf+0xdc>
   dc166:	e7da      	b.n	dc11e <scalbnf+0x46>
   dc168:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   dc16c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   dc170:	ee00 3a10 	vmov	s0, r3
   dc174:	b002      	add	sp, #8
   dc176:	4770      	bx	lr
   dc178:	ed9f 0a0d 	vldr	s0, [pc, #52]	; dc1b0 <scalbnf+0xd8>
   dc17c:	eddd 7a01 	vldr	s15, [sp, #4]
   dc180:	ee27 0a80 	vmul.f32	s0, s15, s0
   dc184:	e7d8      	b.n	dc138 <scalbnf+0x60>
   dc186:	3219      	adds	r2, #25
   dc188:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   dc18c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   dc190:	eddf 7a09 	vldr	s15, [pc, #36]	; dc1b8 <scalbnf+0xe0>
   dc194:	ee07 3a10 	vmov	s14, r3
   dc198:	ee27 0a27 	vmul.f32	s0, s14, s15
   dc19c:	e7cc      	b.n	dc138 <scalbnf+0x60>
   dc19e:	bf00      	nop
   dc1a0:	4c000000 	.word	0x4c000000
   dc1a4:	ffff3cb0 	.word	0xffff3cb0
   dc1a8:	7149f2ca 	.word	0x7149f2ca
   dc1ac:	f149f2ca 	.word	0xf149f2ca
   dc1b0:	0da24260 	.word	0x0da24260
   dc1b4:	8da24260 	.word	0x8da24260
   dc1b8:	33000000 	.word	0x33000000

000dc1bc <__aeabi_drsub>:
   dc1bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dc1c0:	e002      	b.n	dc1c8 <__adddf3>
   dc1c2:	bf00      	nop

000dc1c4 <__aeabi_dsub>:
   dc1c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dc1c8 <__adddf3>:
   dc1c8:	b530      	push	{r4, r5, lr}
   dc1ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dc1ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dc1d2:	ea94 0f05 	teq	r4, r5
   dc1d6:	bf08      	it	eq
   dc1d8:	ea90 0f02 	teqeq	r0, r2
   dc1dc:	bf1f      	itttt	ne
   dc1de:	ea54 0c00 	orrsne.w	ip, r4, r0
   dc1e2:	ea55 0c02 	orrsne.w	ip, r5, r2
   dc1e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dc1ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc1ee:	f000 80e2 	beq.w	dc3b6 <__adddf3+0x1ee>
   dc1f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dc1f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dc1fa:	bfb8      	it	lt
   dc1fc:	426d      	neglt	r5, r5
   dc1fe:	dd0c      	ble.n	dc21a <__adddf3+0x52>
   dc200:	442c      	add	r4, r5
   dc202:	ea80 0202 	eor.w	r2, r0, r2
   dc206:	ea81 0303 	eor.w	r3, r1, r3
   dc20a:	ea82 0000 	eor.w	r0, r2, r0
   dc20e:	ea83 0101 	eor.w	r1, r3, r1
   dc212:	ea80 0202 	eor.w	r2, r0, r2
   dc216:	ea81 0303 	eor.w	r3, r1, r3
   dc21a:	2d36      	cmp	r5, #54	; 0x36
   dc21c:	bf88      	it	hi
   dc21e:	bd30      	pophi	{r4, r5, pc}
   dc220:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc224:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc228:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dc22c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dc230:	d002      	beq.n	dc238 <__adddf3+0x70>
   dc232:	4240      	negs	r0, r0
   dc234:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc238:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dc23c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc240:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dc244:	d002      	beq.n	dc24c <__adddf3+0x84>
   dc246:	4252      	negs	r2, r2
   dc248:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc24c:	ea94 0f05 	teq	r4, r5
   dc250:	f000 80a7 	beq.w	dc3a2 <__adddf3+0x1da>
   dc254:	f1a4 0401 	sub.w	r4, r4, #1
   dc258:	f1d5 0e20 	rsbs	lr, r5, #32
   dc25c:	db0d      	blt.n	dc27a <__adddf3+0xb2>
   dc25e:	fa02 fc0e 	lsl.w	ip, r2, lr
   dc262:	fa22 f205 	lsr.w	r2, r2, r5
   dc266:	1880      	adds	r0, r0, r2
   dc268:	f141 0100 	adc.w	r1, r1, #0
   dc26c:	fa03 f20e 	lsl.w	r2, r3, lr
   dc270:	1880      	adds	r0, r0, r2
   dc272:	fa43 f305 	asr.w	r3, r3, r5
   dc276:	4159      	adcs	r1, r3
   dc278:	e00e      	b.n	dc298 <__adddf3+0xd0>
   dc27a:	f1a5 0520 	sub.w	r5, r5, #32
   dc27e:	f10e 0e20 	add.w	lr, lr, #32
   dc282:	2a01      	cmp	r2, #1
   dc284:	fa03 fc0e 	lsl.w	ip, r3, lr
   dc288:	bf28      	it	cs
   dc28a:	f04c 0c02 	orrcs.w	ip, ip, #2
   dc28e:	fa43 f305 	asr.w	r3, r3, r5
   dc292:	18c0      	adds	r0, r0, r3
   dc294:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dc298:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc29c:	d507      	bpl.n	dc2ae <__adddf3+0xe6>
   dc29e:	f04f 0e00 	mov.w	lr, #0
   dc2a2:	f1dc 0c00 	rsbs	ip, ip, #0
   dc2a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   dc2aa:	eb6e 0101 	sbc.w	r1, lr, r1
   dc2ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dc2b2:	d31b      	bcc.n	dc2ec <__adddf3+0x124>
   dc2b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dc2b8:	d30c      	bcc.n	dc2d4 <__adddf3+0x10c>
   dc2ba:	0849      	lsrs	r1, r1, #1
   dc2bc:	ea5f 0030 	movs.w	r0, r0, rrx
   dc2c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dc2c4:	f104 0401 	add.w	r4, r4, #1
   dc2c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dc2cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dc2d0:	f080 809a 	bcs.w	dc408 <__adddf3+0x240>
   dc2d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dc2d8:	bf08      	it	eq
   dc2da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc2de:	f150 0000 	adcs.w	r0, r0, #0
   dc2e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc2e6:	ea41 0105 	orr.w	r1, r1, r5
   dc2ea:	bd30      	pop	{r4, r5, pc}
   dc2ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dc2f0:	4140      	adcs	r0, r0
   dc2f2:	eb41 0101 	adc.w	r1, r1, r1
   dc2f6:	3c01      	subs	r4, #1
   dc2f8:	bf28      	it	cs
   dc2fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dc2fe:	d2e9      	bcs.n	dc2d4 <__adddf3+0x10c>
   dc300:	f091 0f00 	teq	r1, #0
   dc304:	bf04      	itt	eq
   dc306:	4601      	moveq	r1, r0
   dc308:	2000      	moveq	r0, #0
   dc30a:	fab1 f381 	clz	r3, r1
   dc30e:	bf08      	it	eq
   dc310:	3320      	addeq	r3, #32
   dc312:	f1a3 030b 	sub.w	r3, r3, #11
   dc316:	f1b3 0220 	subs.w	r2, r3, #32
   dc31a:	da0c      	bge.n	dc336 <__adddf3+0x16e>
   dc31c:	320c      	adds	r2, #12
   dc31e:	dd08      	ble.n	dc332 <__adddf3+0x16a>
   dc320:	f102 0c14 	add.w	ip, r2, #20
   dc324:	f1c2 020c 	rsb	r2, r2, #12
   dc328:	fa01 f00c 	lsl.w	r0, r1, ip
   dc32c:	fa21 f102 	lsr.w	r1, r1, r2
   dc330:	e00c      	b.n	dc34c <__adddf3+0x184>
   dc332:	f102 0214 	add.w	r2, r2, #20
   dc336:	bfd8      	it	le
   dc338:	f1c2 0c20 	rsble	ip, r2, #32
   dc33c:	fa01 f102 	lsl.w	r1, r1, r2
   dc340:	fa20 fc0c 	lsr.w	ip, r0, ip
   dc344:	bfdc      	itt	le
   dc346:	ea41 010c 	orrle.w	r1, r1, ip
   dc34a:	4090      	lslle	r0, r2
   dc34c:	1ae4      	subs	r4, r4, r3
   dc34e:	bfa2      	ittt	ge
   dc350:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dc354:	4329      	orrge	r1, r5
   dc356:	bd30      	popge	{r4, r5, pc}
   dc358:	ea6f 0404 	mvn.w	r4, r4
   dc35c:	3c1f      	subs	r4, #31
   dc35e:	da1c      	bge.n	dc39a <__adddf3+0x1d2>
   dc360:	340c      	adds	r4, #12
   dc362:	dc0e      	bgt.n	dc382 <__adddf3+0x1ba>
   dc364:	f104 0414 	add.w	r4, r4, #20
   dc368:	f1c4 0220 	rsb	r2, r4, #32
   dc36c:	fa20 f004 	lsr.w	r0, r0, r4
   dc370:	fa01 f302 	lsl.w	r3, r1, r2
   dc374:	ea40 0003 	orr.w	r0, r0, r3
   dc378:	fa21 f304 	lsr.w	r3, r1, r4
   dc37c:	ea45 0103 	orr.w	r1, r5, r3
   dc380:	bd30      	pop	{r4, r5, pc}
   dc382:	f1c4 040c 	rsb	r4, r4, #12
   dc386:	f1c4 0220 	rsb	r2, r4, #32
   dc38a:	fa20 f002 	lsr.w	r0, r0, r2
   dc38e:	fa01 f304 	lsl.w	r3, r1, r4
   dc392:	ea40 0003 	orr.w	r0, r0, r3
   dc396:	4629      	mov	r1, r5
   dc398:	bd30      	pop	{r4, r5, pc}
   dc39a:	fa21 f004 	lsr.w	r0, r1, r4
   dc39e:	4629      	mov	r1, r5
   dc3a0:	bd30      	pop	{r4, r5, pc}
   dc3a2:	f094 0f00 	teq	r4, #0
   dc3a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dc3aa:	bf06      	itte	eq
   dc3ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dc3b0:	3401      	addeq	r4, #1
   dc3b2:	3d01      	subne	r5, #1
   dc3b4:	e74e      	b.n	dc254 <__adddf3+0x8c>
   dc3b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc3ba:	bf18      	it	ne
   dc3bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc3c0:	d029      	beq.n	dc416 <__adddf3+0x24e>
   dc3c2:	ea94 0f05 	teq	r4, r5
   dc3c6:	bf08      	it	eq
   dc3c8:	ea90 0f02 	teqeq	r0, r2
   dc3cc:	d005      	beq.n	dc3da <__adddf3+0x212>
   dc3ce:	ea54 0c00 	orrs.w	ip, r4, r0
   dc3d2:	bf04      	itt	eq
   dc3d4:	4619      	moveq	r1, r3
   dc3d6:	4610      	moveq	r0, r2
   dc3d8:	bd30      	pop	{r4, r5, pc}
   dc3da:	ea91 0f03 	teq	r1, r3
   dc3de:	bf1e      	ittt	ne
   dc3e0:	2100      	movne	r1, #0
   dc3e2:	2000      	movne	r0, #0
   dc3e4:	bd30      	popne	{r4, r5, pc}
   dc3e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dc3ea:	d105      	bne.n	dc3f8 <__adddf3+0x230>
   dc3ec:	0040      	lsls	r0, r0, #1
   dc3ee:	4149      	adcs	r1, r1
   dc3f0:	bf28      	it	cs
   dc3f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dc3f6:	bd30      	pop	{r4, r5, pc}
   dc3f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dc3fc:	bf3c      	itt	cc
   dc3fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dc402:	bd30      	popcc	{r4, r5, pc}
   dc404:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc408:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dc40c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc410:	f04f 0000 	mov.w	r0, #0
   dc414:	bd30      	pop	{r4, r5, pc}
   dc416:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc41a:	bf1a      	itte	ne
   dc41c:	4619      	movne	r1, r3
   dc41e:	4610      	movne	r0, r2
   dc420:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dc424:	bf1c      	itt	ne
   dc426:	460b      	movne	r3, r1
   dc428:	4602      	movne	r2, r0
   dc42a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc42e:	bf06      	itte	eq
   dc430:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dc434:	ea91 0f03 	teqeq	r1, r3
   dc438:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dc43c:	bd30      	pop	{r4, r5, pc}
   dc43e:	bf00      	nop

000dc440 <__aeabi_ui2d>:
   dc440:	f090 0f00 	teq	r0, #0
   dc444:	bf04      	itt	eq
   dc446:	2100      	moveq	r1, #0
   dc448:	4770      	bxeq	lr
   dc44a:	b530      	push	{r4, r5, lr}
   dc44c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc450:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc454:	f04f 0500 	mov.w	r5, #0
   dc458:	f04f 0100 	mov.w	r1, #0
   dc45c:	e750      	b.n	dc300 <__adddf3+0x138>
   dc45e:	bf00      	nop

000dc460 <__aeabi_i2d>:
   dc460:	f090 0f00 	teq	r0, #0
   dc464:	bf04      	itt	eq
   dc466:	2100      	moveq	r1, #0
   dc468:	4770      	bxeq	lr
   dc46a:	b530      	push	{r4, r5, lr}
   dc46c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc470:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc474:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dc478:	bf48      	it	mi
   dc47a:	4240      	negmi	r0, r0
   dc47c:	f04f 0100 	mov.w	r1, #0
   dc480:	e73e      	b.n	dc300 <__adddf3+0x138>
   dc482:	bf00      	nop

000dc484 <__aeabi_f2d>:
   dc484:	0042      	lsls	r2, r0, #1
   dc486:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dc48a:	ea4f 0131 	mov.w	r1, r1, rrx
   dc48e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dc492:	bf1f      	itttt	ne
   dc494:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dc498:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dc49c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dc4a0:	4770      	bxne	lr
   dc4a2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dc4a6:	bf08      	it	eq
   dc4a8:	4770      	bxeq	lr
   dc4aa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dc4ae:	bf04      	itt	eq
   dc4b0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dc4b4:	4770      	bxeq	lr
   dc4b6:	b530      	push	{r4, r5, lr}
   dc4b8:	f44f 7460 	mov.w	r4, #896	; 0x380
   dc4bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc4c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc4c4:	e71c      	b.n	dc300 <__adddf3+0x138>
   dc4c6:	bf00      	nop

000dc4c8 <__aeabi_ul2d>:
   dc4c8:	ea50 0201 	orrs.w	r2, r0, r1
   dc4cc:	bf08      	it	eq
   dc4ce:	4770      	bxeq	lr
   dc4d0:	b530      	push	{r4, r5, lr}
   dc4d2:	f04f 0500 	mov.w	r5, #0
   dc4d6:	e00a      	b.n	dc4ee <__aeabi_l2d+0x16>

000dc4d8 <__aeabi_l2d>:
   dc4d8:	ea50 0201 	orrs.w	r2, r0, r1
   dc4dc:	bf08      	it	eq
   dc4de:	4770      	bxeq	lr
   dc4e0:	b530      	push	{r4, r5, lr}
   dc4e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dc4e6:	d502      	bpl.n	dc4ee <__aeabi_l2d+0x16>
   dc4e8:	4240      	negs	r0, r0
   dc4ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc4ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc4f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc4f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dc4fa:	f43f aed8 	beq.w	dc2ae <__adddf3+0xe6>
   dc4fe:	f04f 0203 	mov.w	r2, #3
   dc502:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc506:	bf18      	it	ne
   dc508:	3203      	addne	r2, #3
   dc50a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc50e:	bf18      	it	ne
   dc510:	3203      	addne	r2, #3
   dc512:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dc516:	f1c2 0320 	rsb	r3, r2, #32
   dc51a:	fa00 fc03 	lsl.w	ip, r0, r3
   dc51e:	fa20 f002 	lsr.w	r0, r0, r2
   dc522:	fa01 fe03 	lsl.w	lr, r1, r3
   dc526:	ea40 000e 	orr.w	r0, r0, lr
   dc52a:	fa21 f102 	lsr.w	r1, r1, r2
   dc52e:	4414      	add	r4, r2
   dc530:	e6bd      	b.n	dc2ae <__adddf3+0xe6>
   dc532:	bf00      	nop

000dc534 <__aeabi_dmul>:
   dc534:	b570      	push	{r4, r5, r6, lr}
   dc536:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc53a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc53e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc542:	bf1d      	ittte	ne
   dc544:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc548:	ea94 0f0c 	teqne	r4, ip
   dc54c:	ea95 0f0c 	teqne	r5, ip
   dc550:	f000 f8de 	bleq	dc710 <__aeabi_dmul+0x1dc>
   dc554:	442c      	add	r4, r5
   dc556:	ea81 0603 	eor.w	r6, r1, r3
   dc55a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dc55e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dc562:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dc566:	bf18      	it	ne
   dc568:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dc56c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc574:	d038      	beq.n	dc5e8 <__aeabi_dmul+0xb4>
   dc576:	fba0 ce02 	umull	ip, lr, r0, r2
   dc57a:	f04f 0500 	mov.w	r5, #0
   dc57e:	fbe1 e502 	umlal	lr, r5, r1, r2
   dc582:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dc586:	fbe0 e503 	umlal	lr, r5, r0, r3
   dc58a:	f04f 0600 	mov.w	r6, #0
   dc58e:	fbe1 5603 	umlal	r5, r6, r1, r3
   dc592:	f09c 0f00 	teq	ip, #0
   dc596:	bf18      	it	ne
   dc598:	f04e 0e01 	orrne.w	lr, lr, #1
   dc59c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dc5a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dc5a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dc5a8:	d204      	bcs.n	dc5b4 <__aeabi_dmul+0x80>
   dc5aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dc5ae:	416d      	adcs	r5, r5
   dc5b0:	eb46 0606 	adc.w	r6, r6, r6
   dc5b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dc5b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dc5bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dc5c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dc5c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dc5c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc5cc:	bf88      	it	hi
   dc5ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc5d2:	d81e      	bhi.n	dc612 <__aeabi_dmul+0xde>
   dc5d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dc5d8:	bf08      	it	eq
   dc5da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dc5de:	f150 0000 	adcs.w	r0, r0, #0
   dc5e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc5e6:	bd70      	pop	{r4, r5, r6, pc}
   dc5e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dc5ec:	ea46 0101 	orr.w	r1, r6, r1
   dc5f0:	ea40 0002 	orr.w	r0, r0, r2
   dc5f4:	ea81 0103 	eor.w	r1, r1, r3
   dc5f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dc5fc:	bfc2      	ittt	gt
   dc5fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc602:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc606:	bd70      	popgt	{r4, r5, r6, pc}
   dc608:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc60c:	f04f 0e00 	mov.w	lr, #0
   dc610:	3c01      	subs	r4, #1
   dc612:	f300 80ab 	bgt.w	dc76c <__aeabi_dmul+0x238>
   dc616:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dc61a:	bfde      	ittt	le
   dc61c:	2000      	movle	r0, #0
   dc61e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dc622:	bd70      	pople	{r4, r5, r6, pc}
   dc624:	f1c4 0400 	rsb	r4, r4, #0
   dc628:	3c20      	subs	r4, #32
   dc62a:	da35      	bge.n	dc698 <__aeabi_dmul+0x164>
   dc62c:	340c      	adds	r4, #12
   dc62e:	dc1b      	bgt.n	dc668 <__aeabi_dmul+0x134>
   dc630:	f104 0414 	add.w	r4, r4, #20
   dc634:	f1c4 0520 	rsb	r5, r4, #32
   dc638:	fa00 f305 	lsl.w	r3, r0, r5
   dc63c:	fa20 f004 	lsr.w	r0, r0, r4
   dc640:	fa01 f205 	lsl.w	r2, r1, r5
   dc644:	ea40 0002 	orr.w	r0, r0, r2
   dc648:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dc64c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc654:	fa21 f604 	lsr.w	r6, r1, r4
   dc658:	eb42 0106 	adc.w	r1, r2, r6
   dc65c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc660:	bf08      	it	eq
   dc662:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc666:	bd70      	pop	{r4, r5, r6, pc}
   dc668:	f1c4 040c 	rsb	r4, r4, #12
   dc66c:	f1c4 0520 	rsb	r5, r4, #32
   dc670:	fa00 f304 	lsl.w	r3, r0, r4
   dc674:	fa20 f005 	lsr.w	r0, r0, r5
   dc678:	fa01 f204 	lsl.w	r2, r1, r4
   dc67c:	ea40 0002 	orr.w	r0, r0, r2
   dc680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc688:	f141 0100 	adc.w	r1, r1, #0
   dc68c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc690:	bf08      	it	eq
   dc692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc696:	bd70      	pop	{r4, r5, r6, pc}
   dc698:	f1c4 0520 	rsb	r5, r4, #32
   dc69c:	fa00 f205 	lsl.w	r2, r0, r5
   dc6a0:	ea4e 0e02 	orr.w	lr, lr, r2
   dc6a4:	fa20 f304 	lsr.w	r3, r0, r4
   dc6a8:	fa01 f205 	lsl.w	r2, r1, r5
   dc6ac:	ea43 0302 	orr.w	r3, r3, r2
   dc6b0:	fa21 f004 	lsr.w	r0, r1, r4
   dc6b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc6b8:	fa21 f204 	lsr.w	r2, r1, r4
   dc6bc:	ea20 0002 	bic.w	r0, r0, r2
   dc6c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dc6c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc6c8:	bf08      	it	eq
   dc6ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc6ce:	bd70      	pop	{r4, r5, r6, pc}
   dc6d0:	f094 0f00 	teq	r4, #0
   dc6d4:	d10f      	bne.n	dc6f6 <__aeabi_dmul+0x1c2>
   dc6d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dc6da:	0040      	lsls	r0, r0, #1
   dc6dc:	eb41 0101 	adc.w	r1, r1, r1
   dc6e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc6e4:	bf08      	it	eq
   dc6e6:	3c01      	subeq	r4, #1
   dc6e8:	d0f7      	beq.n	dc6da <__aeabi_dmul+0x1a6>
   dc6ea:	ea41 0106 	orr.w	r1, r1, r6
   dc6ee:	f095 0f00 	teq	r5, #0
   dc6f2:	bf18      	it	ne
   dc6f4:	4770      	bxne	lr
   dc6f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dc6fa:	0052      	lsls	r2, r2, #1
   dc6fc:	eb43 0303 	adc.w	r3, r3, r3
   dc700:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dc704:	bf08      	it	eq
   dc706:	3d01      	subeq	r5, #1
   dc708:	d0f7      	beq.n	dc6fa <__aeabi_dmul+0x1c6>
   dc70a:	ea43 0306 	orr.w	r3, r3, r6
   dc70e:	4770      	bx	lr
   dc710:	ea94 0f0c 	teq	r4, ip
   dc714:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc718:	bf18      	it	ne
   dc71a:	ea95 0f0c 	teqne	r5, ip
   dc71e:	d00c      	beq.n	dc73a <__aeabi_dmul+0x206>
   dc720:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc724:	bf18      	it	ne
   dc726:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc72a:	d1d1      	bne.n	dc6d0 <__aeabi_dmul+0x19c>
   dc72c:	ea81 0103 	eor.w	r1, r1, r3
   dc730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc734:	f04f 0000 	mov.w	r0, #0
   dc738:	bd70      	pop	{r4, r5, r6, pc}
   dc73a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc73e:	bf06      	itte	eq
   dc740:	4610      	moveq	r0, r2
   dc742:	4619      	moveq	r1, r3
   dc744:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc748:	d019      	beq.n	dc77e <__aeabi_dmul+0x24a>
   dc74a:	ea94 0f0c 	teq	r4, ip
   dc74e:	d102      	bne.n	dc756 <__aeabi_dmul+0x222>
   dc750:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dc754:	d113      	bne.n	dc77e <__aeabi_dmul+0x24a>
   dc756:	ea95 0f0c 	teq	r5, ip
   dc75a:	d105      	bne.n	dc768 <__aeabi_dmul+0x234>
   dc75c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dc760:	bf1c      	itt	ne
   dc762:	4610      	movne	r0, r2
   dc764:	4619      	movne	r1, r3
   dc766:	d10a      	bne.n	dc77e <__aeabi_dmul+0x24a>
   dc768:	ea81 0103 	eor.w	r1, r1, r3
   dc76c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc770:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc774:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc778:	f04f 0000 	mov.w	r0, #0
   dc77c:	bd70      	pop	{r4, r5, r6, pc}
   dc77e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc782:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dc786:	bd70      	pop	{r4, r5, r6, pc}

000dc788 <__aeabi_ddiv>:
   dc788:	b570      	push	{r4, r5, r6, lr}
   dc78a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc78e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc792:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc796:	bf1d      	ittte	ne
   dc798:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc79c:	ea94 0f0c 	teqne	r4, ip
   dc7a0:	ea95 0f0c 	teqne	r5, ip
   dc7a4:	f000 f8a7 	bleq	dc8f6 <__aeabi_ddiv+0x16e>
   dc7a8:	eba4 0405 	sub.w	r4, r4, r5
   dc7ac:	ea81 0e03 	eor.w	lr, r1, r3
   dc7b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc7b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc7b8:	f000 8088 	beq.w	dc8cc <__aeabi_ddiv+0x144>
   dc7bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc7c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dc7c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dc7c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dc7cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dc7d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dc7d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dc7d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dc7dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dc7e0:	429d      	cmp	r5, r3
   dc7e2:	bf08      	it	eq
   dc7e4:	4296      	cmpeq	r6, r2
   dc7e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dc7ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dc7ee:	d202      	bcs.n	dc7f6 <__aeabi_ddiv+0x6e>
   dc7f0:	085b      	lsrs	r3, r3, #1
   dc7f2:	ea4f 0232 	mov.w	r2, r2, rrx
   dc7f6:	1ab6      	subs	r6, r6, r2
   dc7f8:	eb65 0503 	sbc.w	r5, r5, r3
   dc7fc:	085b      	lsrs	r3, r3, #1
   dc7fe:	ea4f 0232 	mov.w	r2, r2, rrx
   dc802:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dc806:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dc80a:	ebb6 0e02 	subs.w	lr, r6, r2
   dc80e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc812:	bf22      	ittt	cs
   dc814:	1ab6      	subcs	r6, r6, r2
   dc816:	4675      	movcs	r5, lr
   dc818:	ea40 000c 	orrcs.w	r0, r0, ip
   dc81c:	085b      	lsrs	r3, r3, #1
   dc81e:	ea4f 0232 	mov.w	r2, r2, rrx
   dc822:	ebb6 0e02 	subs.w	lr, r6, r2
   dc826:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc82a:	bf22      	ittt	cs
   dc82c:	1ab6      	subcs	r6, r6, r2
   dc82e:	4675      	movcs	r5, lr
   dc830:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dc834:	085b      	lsrs	r3, r3, #1
   dc836:	ea4f 0232 	mov.w	r2, r2, rrx
   dc83a:	ebb6 0e02 	subs.w	lr, r6, r2
   dc83e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc842:	bf22      	ittt	cs
   dc844:	1ab6      	subcs	r6, r6, r2
   dc846:	4675      	movcs	r5, lr
   dc848:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dc84c:	085b      	lsrs	r3, r3, #1
   dc84e:	ea4f 0232 	mov.w	r2, r2, rrx
   dc852:	ebb6 0e02 	subs.w	lr, r6, r2
   dc856:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc85a:	bf22      	ittt	cs
   dc85c:	1ab6      	subcs	r6, r6, r2
   dc85e:	4675      	movcs	r5, lr
   dc860:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dc864:	ea55 0e06 	orrs.w	lr, r5, r6
   dc868:	d018      	beq.n	dc89c <__aeabi_ddiv+0x114>
   dc86a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dc86e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dc872:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dc876:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dc87a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dc87e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dc882:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dc886:	d1c0      	bne.n	dc80a <__aeabi_ddiv+0x82>
   dc888:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc88c:	d10b      	bne.n	dc8a6 <__aeabi_ddiv+0x11e>
   dc88e:	ea41 0100 	orr.w	r1, r1, r0
   dc892:	f04f 0000 	mov.w	r0, #0
   dc896:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dc89a:	e7b6      	b.n	dc80a <__aeabi_ddiv+0x82>
   dc89c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc8a0:	bf04      	itt	eq
   dc8a2:	4301      	orreq	r1, r0
   dc8a4:	2000      	moveq	r0, #0
   dc8a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc8aa:	bf88      	it	hi
   dc8ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc8b0:	f63f aeaf 	bhi.w	dc612 <__aeabi_dmul+0xde>
   dc8b4:	ebb5 0c03 	subs.w	ip, r5, r3
   dc8b8:	bf04      	itt	eq
   dc8ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   dc8be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc8c2:	f150 0000 	adcs.w	r0, r0, #0
   dc8c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc8ca:	bd70      	pop	{r4, r5, r6, pc}
   dc8cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dc8d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dc8d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dc8d8:	bfc2      	ittt	gt
   dc8da:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc8de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc8e2:	bd70      	popgt	{r4, r5, r6, pc}
   dc8e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc8e8:	f04f 0e00 	mov.w	lr, #0
   dc8ec:	3c01      	subs	r4, #1
   dc8ee:	e690      	b.n	dc612 <__aeabi_dmul+0xde>
   dc8f0:	ea45 0e06 	orr.w	lr, r5, r6
   dc8f4:	e68d      	b.n	dc612 <__aeabi_dmul+0xde>
   dc8f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc8fa:	ea94 0f0c 	teq	r4, ip
   dc8fe:	bf08      	it	eq
   dc900:	ea95 0f0c 	teqeq	r5, ip
   dc904:	f43f af3b 	beq.w	dc77e <__aeabi_dmul+0x24a>
   dc908:	ea94 0f0c 	teq	r4, ip
   dc90c:	d10a      	bne.n	dc924 <__aeabi_ddiv+0x19c>
   dc90e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc912:	f47f af34 	bne.w	dc77e <__aeabi_dmul+0x24a>
   dc916:	ea95 0f0c 	teq	r5, ip
   dc91a:	f47f af25 	bne.w	dc768 <__aeabi_dmul+0x234>
   dc91e:	4610      	mov	r0, r2
   dc920:	4619      	mov	r1, r3
   dc922:	e72c      	b.n	dc77e <__aeabi_dmul+0x24a>
   dc924:	ea95 0f0c 	teq	r5, ip
   dc928:	d106      	bne.n	dc938 <__aeabi_ddiv+0x1b0>
   dc92a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc92e:	f43f aefd 	beq.w	dc72c <__aeabi_dmul+0x1f8>
   dc932:	4610      	mov	r0, r2
   dc934:	4619      	mov	r1, r3
   dc936:	e722      	b.n	dc77e <__aeabi_dmul+0x24a>
   dc938:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc93c:	bf18      	it	ne
   dc93e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc942:	f47f aec5 	bne.w	dc6d0 <__aeabi_dmul+0x19c>
   dc946:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dc94a:	f47f af0d 	bne.w	dc768 <__aeabi_dmul+0x234>
   dc94e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dc952:	f47f aeeb 	bne.w	dc72c <__aeabi_dmul+0x1f8>
   dc956:	e712      	b.n	dc77e <__aeabi_dmul+0x24a>

000dc958 <__gedf2>:
   dc958:	f04f 3cff 	mov.w	ip, #4294967295
   dc95c:	e006      	b.n	dc96c <__cmpdf2+0x4>
   dc95e:	bf00      	nop

000dc960 <__ledf2>:
   dc960:	f04f 0c01 	mov.w	ip, #1
   dc964:	e002      	b.n	dc96c <__cmpdf2+0x4>
   dc966:	bf00      	nop

000dc968 <__cmpdf2>:
   dc968:	f04f 0c01 	mov.w	ip, #1
   dc96c:	f84d cd04 	str.w	ip, [sp, #-4]!
   dc970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc978:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc97c:	bf18      	it	ne
   dc97e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dc982:	d01b      	beq.n	dc9bc <__cmpdf2+0x54>
   dc984:	b001      	add	sp, #4
   dc986:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dc98a:	bf0c      	ite	eq
   dc98c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dc990:	ea91 0f03 	teqne	r1, r3
   dc994:	bf02      	ittt	eq
   dc996:	ea90 0f02 	teqeq	r0, r2
   dc99a:	2000      	moveq	r0, #0
   dc99c:	4770      	bxeq	lr
   dc99e:	f110 0f00 	cmn.w	r0, #0
   dc9a2:	ea91 0f03 	teq	r1, r3
   dc9a6:	bf58      	it	pl
   dc9a8:	4299      	cmppl	r1, r3
   dc9aa:	bf08      	it	eq
   dc9ac:	4290      	cmpeq	r0, r2
   dc9ae:	bf2c      	ite	cs
   dc9b0:	17d8      	asrcs	r0, r3, #31
   dc9b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dc9b6:	f040 0001 	orr.w	r0, r0, #1
   dc9ba:	4770      	bx	lr
   dc9bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc9c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc9c4:	d102      	bne.n	dc9cc <__cmpdf2+0x64>
   dc9c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dc9ca:	d107      	bne.n	dc9dc <__cmpdf2+0x74>
   dc9cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc9d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc9d4:	d1d6      	bne.n	dc984 <__cmpdf2+0x1c>
   dc9d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dc9da:	d0d3      	beq.n	dc984 <__cmpdf2+0x1c>
   dc9dc:	f85d 0b04 	ldr.w	r0, [sp], #4
   dc9e0:	4770      	bx	lr
   dc9e2:	bf00      	nop

000dc9e4 <__aeabi_cdrcmple>:
   dc9e4:	4684      	mov	ip, r0
   dc9e6:	4610      	mov	r0, r2
   dc9e8:	4662      	mov	r2, ip
   dc9ea:	468c      	mov	ip, r1
   dc9ec:	4619      	mov	r1, r3
   dc9ee:	4663      	mov	r3, ip
   dc9f0:	e000      	b.n	dc9f4 <__aeabi_cdcmpeq>
   dc9f2:	bf00      	nop

000dc9f4 <__aeabi_cdcmpeq>:
   dc9f4:	b501      	push	{r0, lr}
   dc9f6:	f7ff ffb7 	bl	dc968 <__cmpdf2>
   dc9fa:	2800      	cmp	r0, #0
   dc9fc:	bf48      	it	mi
   dc9fe:	f110 0f00 	cmnmi.w	r0, #0
   dca02:	bd01      	pop	{r0, pc}

000dca04 <__aeabi_dcmpeq>:
   dca04:	f84d ed08 	str.w	lr, [sp, #-8]!
   dca08:	f7ff fff4 	bl	dc9f4 <__aeabi_cdcmpeq>
   dca0c:	bf0c      	ite	eq
   dca0e:	2001      	moveq	r0, #1
   dca10:	2000      	movne	r0, #0
   dca12:	f85d fb08 	ldr.w	pc, [sp], #8
   dca16:	bf00      	nop

000dca18 <__aeabi_dcmplt>:
   dca18:	f84d ed08 	str.w	lr, [sp, #-8]!
   dca1c:	f7ff ffea 	bl	dc9f4 <__aeabi_cdcmpeq>
   dca20:	bf34      	ite	cc
   dca22:	2001      	movcc	r0, #1
   dca24:	2000      	movcs	r0, #0
   dca26:	f85d fb08 	ldr.w	pc, [sp], #8
   dca2a:	bf00      	nop

000dca2c <__aeabi_dcmple>:
   dca2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dca30:	f7ff ffe0 	bl	dc9f4 <__aeabi_cdcmpeq>
   dca34:	bf94      	ite	ls
   dca36:	2001      	movls	r0, #1
   dca38:	2000      	movhi	r0, #0
   dca3a:	f85d fb08 	ldr.w	pc, [sp], #8
   dca3e:	bf00      	nop

000dca40 <__aeabi_dcmpge>:
   dca40:	f84d ed08 	str.w	lr, [sp, #-8]!
   dca44:	f7ff ffce 	bl	dc9e4 <__aeabi_cdrcmple>
   dca48:	bf94      	ite	ls
   dca4a:	2001      	movls	r0, #1
   dca4c:	2000      	movhi	r0, #0
   dca4e:	f85d fb08 	ldr.w	pc, [sp], #8
   dca52:	bf00      	nop

000dca54 <__aeabi_dcmpgt>:
   dca54:	f84d ed08 	str.w	lr, [sp, #-8]!
   dca58:	f7ff ffc4 	bl	dc9e4 <__aeabi_cdrcmple>
   dca5c:	bf34      	ite	cc
   dca5e:	2001      	movcc	r0, #1
   dca60:	2000      	movcs	r0, #0
   dca62:	f85d fb08 	ldr.w	pc, [sp], #8
   dca66:	bf00      	nop

000dca68 <__aeabi_dcmpun>:
   dca68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dca6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dca70:	d102      	bne.n	dca78 <__aeabi_dcmpun+0x10>
   dca72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dca76:	d10a      	bne.n	dca8e <__aeabi_dcmpun+0x26>
   dca78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dca7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dca80:	d102      	bne.n	dca88 <__aeabi_dcmpun+0x20>
   dca82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dca86:	d102      	bne.n	dca8e <__aeabi_dcmpun+0x26>
   dca88:	f04f 0000 	mov.w	r0, #0
   dca8c:	4770      	bx	lr
   dca8e:	f04f 0001 	mov.w	r0, #1
   dca92:	4770      	bx	lr

000dca94 <__aeabi_d2iz>:
   dca94:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dca98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dca9c:	d215      	bcs.n	dcaca <__aeabi_d2iz+0x36>
   dca9e:	d511      	bpl.n	dcac4 <__aeabi_d2iz+0x30>
   dcaa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dcaa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dcaa8:	d912      	bls.n	dcad0 <__aeabi_d2iz+0x3c>
   dcaaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dcaae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dcab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dcab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dcaba:	fa23 f002 	lsr.w	r0, r3, r2
   dcabe:	bf18      	it	ne
   dcac0:	4240      	negne	r0, r0
   dcac2:	4770      	bx	lr
   dcac4:	f04f 0000 	mov.w	r0, #0
   dcac8:	4770      	bx	lr
   dcaca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dcace:	d105      	bne.n	dcadc <__aeabi_d2iz+0x48>
   dcad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dcad4:	bf08      	it	eq
   dcad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dcada:	4770      	bx	lr
   dcadc:	f04f 0000 	mov.w	r0, #0
   dcae0:	4770      	bx	lr
   dcae2:	bf00      	nop

000dcae4 <__aeabi_d2uiz>:
   dcae4:	004a      	lsls	r2, r1, #1
   dcae6:	d211      	bcs.n	dcb0c <__aeabi_d2uiz+0x28>
   dcae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dcaec:	d211      	bcs.n	dcb12 <__aeabi_d2uiz+0x2e>
   dcaee:	d50d      	bpl.n	dcb0c <__aeabi_d2uiz+0x28>
   dcaf0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dcaf4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dcaf8:	d40e      	bmi.n	dcb18 <__aeabi_d2uiz+0x34>
   dcafa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dcafe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dcb02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dcb06:	fa23 f002 	lsr.w	r0, r3, r2
   dcb0a:	4770      	bx	lr
   dcb0c:	f04f 0000 	mov.w	r0, #0
   dcb10:	4770      	bx	lr
   dcb12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dcb16:	d102      	bne.n	dcb1e <__aeabi_d2uiz+0x3a>
   dcb18:	f04f 30ff 	mov.w	r0, #4294967295
   dcb1c:	4770      	bx	lr
   dcb1e:	f04f 0000 	mov.w	r0, #0
   dcb22:	4770      	bx	lr

000dcb24 <__aeabi_d2f>:
   dcb24:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dcb28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dcb2c:	bf24      	itt	cs
   dcb2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dcb32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dcb36:	d90d      	bls.n	dcb54 <__aeabi_d2f+0x30>
   dcb38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dcb3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dcb40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dcb44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dcb48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dcb4c:	bf08      	it	eq
   dcb4e:	f020 0001 	biceq.w	r0, r0, #1
   dcb52:	4770      	bx	lr
   dcb54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dcb58:	d121      	bne.n	dcb9e <__aeabi_d2f+0x7a>
   dcb5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dcb5e:	bfbc      	itt	lt
   dcb60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dcb64:	4770      	bxlt	lr
   dcb66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dcb6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dcb6e:	f1c2 0218 	rsb	r2, r2, #24
   dcb72:	f1c2 0c20 	rsb	ip, r2, #32
   dcb76:	fa10 f30c 	lsls.w	r3, r0, ip
   dcb7a:	fa20 f002 	lsr.w	r0, r0, r2
   dcb7e:	bf18      	it	ne
   dcb80:	f040 0001 	orrne.w	r0, r0, #1
   dcb84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dcb88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dcb8c:	fa03 fc0c 	lsl.w	ip, r3, ip
   dcb90:	ea40 000c 	orr.w	r0, r0, ip
   dcb94:	fa23 f302 	lsr.w	r3, r3, r2
   dcb98:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dcb9c:	e7cc      	b.n	dcb38 <__aeabi_d2f+0x14>
   dcb9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dcba2:	d107      	bne.n	dcbb4 <__aeabi_d2f+0x90>
   dcba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dcba8:	bf1e      	ittt	ne
   dcbaa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dcbae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dcbb2:	4770      	bxne	lr
   dcbb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dcbb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dcbbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dcbc0:	4770      	bx	lr
   dcbc2:	bf00      	nop

000dcbc4 <__aeabi_frsub>:
   dcbc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   dcbc8:	e002      	b.n	dcbd0 <__addsf3>
   dcbca:	bf00      	nop

000dcbcc <__aeabi_fsub>:
   dcbcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000dcbd0 <__addsf3>:
   dcbd0:	0042      	lsls	r2, r0, #1
   dcbd2:	bf1f      	itttt	ne
   dcbd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   dcbd8:	ea92 0f03 	teqne	r2, r3
   dcbdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   dcbe0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dcbe4:	d06a      	beq.n	dccbc <__addsf3+0xec>
   dcbe6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   dcbea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   dcbee:	bfc1      	itttt	gt
   dcbf0:	18d2      	addgt	r2, r2, r3
   dcbf2:	4041      	eorgt	r1, r0
   dcbf4:	4048      	eorgt	r0, r1
   dcbf6:	4041      	eorgt	r1, r0
   dcbf8:	bfb8      	it	lt
   dcbfa:	425b      	neglt	r3, r3
   dcbfc:	2b19      	cmp	r3, #25
   dcbfe:	bf88      	it	hi
   dcc00:	4770      	bxhi	lr
   dcc02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   dcc06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dcc0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   dcc0e:	bf18      	it	ne
   dcc10:	4240      	negne	r0, r0
   dcc12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dcc16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   dcc1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   dcc1e:	bf18      	it	ne
   dcc20:	4249      	negne	r1, r1
   dcc22:	ea92 0f03 	teq	r2, r3
   dcc26:	d03f      	beq.n	dcca8 <__addsf3+0xd8>
   dcc28:	f1a2 0201 	sub.w	r2, r2, #1
   dcc2c:	fa41 fc03 	asr.w	ip, r1, r3
   dcc30:	eb10 000c 	adds.w	r0, r0, ip
   dcc34:	f1c3 0320 	rsb	r3, r3, #32
   dcc38:	fa01 f103 	lsl.w	r1, r1, r3
   dcc3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   dcc40:	d502      	bpl.n	dcc48 <__addsf3+0x78>
   dcc42:	4249      	negs	r1, r1
   dcc44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   dcc48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   dcc4c:	d313      	bcc.n	dcc76 <__addsf3+0xa6>
   dcc4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   dcc52:	d306      	bcc.n	dcc62 <__addsf3+0x92>
   dcc54:	0840      	lsrs	r0, r0, #1
   dcc56:	ea4f 0131 	mov.w	r1, r1, rrx
   dcc5a:	f102 0201 	add.w	r2, r2, #1
   dcc5e:	2afe      	cmp	r2, #254	; 0xfe
   dcc60:	d251      	bcs.n	dcd06 <__addsf3+0x136>
   dcc62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   dcc66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   dcc6a:	bf08      	it	eq
   dcc6c:	f020 0001 	biceq.w	r0, r0, #1
   dcc70:	ea40 0003 	orr.w	r0, r0, r3
   dcc74:	4770      	bx	lr
   dcc76:	0049      	lsls	r1, r1, #1
   dcc78:	eb40 0000 	adc.w	r0, r0, r0
   dcc7c:	3a01      	subs	r2, #1
   dcc7e:	bf28      	it	cs
   dcc80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   dcc84:	d2ed      	bcs.n	dcc62 <__addsf3+0x92>
   dcc86:	fab0 fc80 	clz	ip, r0
   dcc8a:	f1ac 0c08 	sub.w	ip, ip, #8
   dcc8e:	ebb2 020c 	subs.w	r2, r2, ip
   dcc92:	fa00 f00c 	lsl.w	r0, r0, ip
   dcc96:	bfaa      	itet	ge
   dcc98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   dcc9c:	4252      	neglt	r2, r2
   dcc9e:	4318      	orrge	r0, r3
   dcca0:	bfbc      	itt	lt
   dcca2:	40d0      	lsrlt	r0, r2
   dcca4:	4318      	orrlt	r0, r3
   dcca6:	4770      	bx	lr
   dcca8:	f092 0f00 	teq	r2, #0
   dccac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   dccb0:	bf06      	itte	eq
   dccb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   dccb6:	3201      	addeq	r2, #1
   dccb8:	3b01      	subne	r3, #1
   dccba:	e7b5      	b.n	dcc28 <__addsf3+0x58>
   dccbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   dccc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   dccc4:	bf18      	it	ne
   dccc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dccca:	d021      	beq.n	dcd10 <__addsf3+0x140>
   dcccc:	ea92 0f03 	teq	r2, r3
   dccd0:	d004      	beq.n	dccdc <__addsf3+0x10c>
   dccd2:	f092 0f00 	teq	r2, #0
   dccd6:	bf08      	it	eq
   dccd8:	4608      	moveq	r0, r1
   dccda:	4770      	bx	lr
   dccdc:	ea90 0f01 	teq	r0, r1
   dcce0:	bf1c      	itt	ne
   dcce2:	2000      	movne	r0, #0
   dcce4:	4770      	bxne	lr
   dcce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   dccea:	d104      	bne.n	dccf6 <__addsf3+0x126>
   dccec:	0040      	lsls	r0, r0, #1
   dccee:	bf28      	it	cs
   dccf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   dccf4:	4770      	bx	lr
   dccf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   dccfa:	bf3c      	itt	cc
   dccfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   dcd00:	4770      	bxcc	lr
   dcd02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   dcd06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   dcd0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dcd0e:	4770      	bx	lr
   dcd10:	ea7f 6222 	mvns.w	r2, r2, asr #24
   dcd14:	bf16      	itet	ne
   dcd16:	4608      	movne	r0, r1
   dcd18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   dcd1c:	4601      	movne	r1, r0
   dcd1e:	0242      	lsls	r2, r0, #9
   dcd20:	bf06      	itte	eq
   dcd22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   dcd26:	ea90 0f01 	teqeq	r0, r1
   dcd2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   dcd2e:	4770      	bx	lr

000dcd30 <__aeabi_ui2f>:
   dcd30:	f04f 0300 	mov.w	r3, #0
   dcd34:	e004      	b.n	dcd40 <__aeabi_i2f+0x8>
   dcd36:	bf00      	nop

000dcd38 <__aeabi_i2f>:
   dcd38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   dcd3c:	bf48      	it	mi
   dcd3e:	4240      	negmi	r0, r0
   dcd40:	ea5f 0c00 	movs.w	ip, r0
   dcd44:	bf08      	it	eq
   dcd46:	4770      	bxeq	lr
   dcd48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   dcd4c:	4601      	mov	r1, r0
   dcd4e:	f04f 0000 	mov.w	r0, #0
   dcd52:	e01c      	b.n	dcd8e <__aeabi_l2f+0x2a>

000dcd54 <__aeabi_ul2f>:
   dcd54:	ea50 0201 	orrs.w	r2, r0, r1
   dcd58:	bf08      	it	eq
   dcd5a:	4770      	bxeq	lr
   dcd5c:	f04f 0300 	mov.w	r3, #0
   dcd60:	e00a      	b.n	dcd78 <__aeabi_l2f+0x14>
   dcd62:	bf00      	nop

000dcd64 <__aeabi_l2f>:
   dcd64:	ea50 0201 	orrs.w	r2, r0, r1
   dcd68:	bf08      	it	eq
   dcd6a:	4770      	bxeq	lr
   dcd6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   dcd70:	d502      	bpl.n	dcd78 <__aeabi_l2f+0x14>
   dcd72:	4240      	negs	r0, r0
   dcd74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dcd78:	ea5f 0c01 	movs.w	ip, r1
   dcd7c:	bf02      	ittt	eq
   dcd7e:	4684      	moveq	ip, r0
   dcd80:	4601      	moveq	r1, r0
   dcd82:	2000      	moveq	r0, #0
   dcd84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   dcd88:	bf08      	it	eq
   dcd8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   dcd8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   dcd92:	fabc f28c 	clz	r2, ip
   dcd96:	3a08      	subs	r2, #8
   dcd98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   dcd9c:	db10      	blt.n	dcdc0 <__aeabi_l2f+0x5c>
   dcd9e:	fa01 fc02 	lsl.w	ip, r1, r2
   dcda2:	4463      	add	r3, ip
   dcda4:	fa00 fc02 	lsl.w	ip, r0, r2
   dcda8:	f1c2 0220 	rsb	r2, r2, #32
   dcdac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dcdb0:	fa20 f202 	lsr.w	r2, r0, r2
   dcdb4:	eb43 0002 	adc.w	r0, r3, r2
   dcdb8:	bf08      	it	eq
   dcdba:	f020 0001 	biceq.w	r0, r0, #1
   dcdbe:	4770      	bx	lr
   dcdc0:	f102 0220 	add.w	r2, r2, #32
   dcdc4:	fa01 fc02 	lsl.w	ip, r1, r2
   dcdc8:	f1c2 0220 	rsb	r2, r2, #32
   dcdcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   dcdd0:	fa21 f202 	lsr.w	r2, r1, r2
   dcdd4:	eb43 0002 	adc.w	r0, r3, r2
   dcdd8:	bf08      	it	eq
   dcdda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   dcdde:	4770      	bx	lr

000dcde0 <__aeabi_ldivmod>:
   dcde0:	b97b      	cbnz	r3, dce02 <__aeabi_ldivmod+0x22>
   dcde2:	b972      	cbnz	r2, dce02 <__aeabi_ldivmod+0x22>
   dcde4:	2900      	cmp	r1, #0
   dcde6:	bfbe      	ittt	lt
   dcde8:	2000      	movlt	r0, #0
   dcdea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   dcdee:	e006      	blt.n	dcdfe <__aeabi_ldivmod+0x1e>
   dcdf0:	bf08      	it	eq
   dcdf2:	2800      	cmpeq	r0, #0
   dcdf4:	bf1c      	itt	ne
   dcdf6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   dcdfa:	f04f 30ff 	movne.w	r0, #4294967295
   dcdfe:	f000 b9d7 	b.w	dd1b0 <__aeabi_idiv0>
   dce02:	f1ad 0c08 	sub.w	ip, sp, #8
   dce06:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dce0a:	2900      	cmp	r1, #0
   dce0c:	db09      	blt.n	dce22 <__aeabi_ldivmod+0x42>
   dce0e:	2b00      	cmp	r3, #0
   dce10:	db1a      	blt.n	dce48 <__aeabi_ldivmod+0x68>
   dce12:	f000 f86b 	bl	dceec <__udivmoddi4>
   dce16:	f8dd e004 	ldr.w	lr, [sp, #4]
   dce1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dce1e:	b004      	add	sp, #16
   dce20:	4770      	bx	lr
   dce22:	4240      	negs	r0, r0
   dce24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dce28:	2b00      	cmp	r3, #0
   dce2a:	db1b      	blt.n	dce64 <__aeabi_ldivmod+0x84>
   dce2c:	f000 f85e 	bl	dceec <__udivmoddi4>
   dce30:	f8dd e004 	ldr.w	lr, [sp, #4]
   dce34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dce38:	b004      	add	sp, #16
   dce3a:	4240      	negs	r0, r0
   dce3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dce40:	4252      	negs	r2, r2
   dce42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dce46:	4770      	bx	lr
   dce48:	4252      	negs	r2, r2
   dce4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dce4e:	f000 f84d 	bl	dceec <__udivmoddi4>
   dce52:	f8dd e004 	ldr.w	lr, [sp, #4]
   dce56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dce5a:	b004      	add	sp, #16
   dce5c:	4240      	negs	r0, r0
   dce5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dce62:	4770      	bx	lr
   dce64:	4252      	negs	r2, r2
   dce66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dce6a:	f000 f83f 	bl	dceec <__udivmoddi4>
   dce6e:	f8dd e004 	ldr.w	lr, [sp, #4]
   dce72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dce76:	b004      	add	sp, #16
   dce78:	4252      	negs	r2, r2
   dce7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dce7e:	4770      	bx	lr

000dce80 <__aeabi_uldivmod>:
   dce80:	b953      	cbnz	r3, dce98 <__aeabi_uldivmod+0x18>
   dce82:	b94a      	cbnz	r2, dce98 <__aeabi_uldivmod+0x18>
   dce84:	2900      	cmp	r1, #0
   dce86:	bf08      	it	eq
   dce88:	2800      	cmpeq	r0, #0
   dce8a:	bf1c      	itt	ne
   dce8c:	f04f 31ff 	movne.w	r1, #4294967295
   dce90:	f04f 30ff 	movne.w	r0, #4294967295
   dce94:	f000 b98c 	b.w	dd1b0 <__aeabi_idiv0>
   dce98:	f1ad 0c08 	sub.w	ip, sp, #8
   dce9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dcea0:	f000 f824 	bl	dceec <__udivmoddi4>
   dcea4:	f8dd e004 	ldr.w	lr, [sp, #4]
   dcea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dceac:	b004      	add	sp, #16
   dceae:	4770      	bx	lr

000dceb0 <__aeabi_d2ulz>:
   dceb0:	b5d0      	push	{r4, r6, r7, lr}
   dceb2:	4b0c      	ldr	r3, [pc, #48]	; (dcee4 <__aeabi_d2ulz+0x34>)
   dceb4:	2200      	movs	r2, #0
   dceb6:	4606      	mov	r6, r0
   dceb8:	460f      	mov	r7, r1
   dceba:	f7ff fb3b 	bl	dc534 <__aeabi_dmul>
   dcebe:	f7ff fe11 	bl	dcae4 <__aeabi_d2uiz>
   dcec2:	4604      	mov	r4, r0
   dcec4:	f7ff fabc 	bl	dc440 <__aeabi_ui2d>
   dcec8:	4b07      	ldr	r3, [pc, #28]	; (dcee8 <__aeabi_d2ulz+0x38>)
   dceca:	2200      	movs	r2, #0
   dcecc:	f7ff fb32 	bl	dc534 <__aeabi_dmul>
   dced0:	4602      	mov	r2, r0
   dced2:	460b      	mov	r3, r1
   dced4:	4630      	mov	r0, r6
   dced6:	4639      	mov	r1, r7
   dced8:	f7ff f974 	bl	dc1c4 <__aeabi_dsub>
   dcedc:	f7ff fe02 	bl	dcae4 <__aeabi_d2uiz>
   dcee0:	4621      	mov	r1, r4
   dcee2:	bdd0      	pop	{r4, r6, r7, pc}
   dcee4:	3df00000 	.word	0x3df00000
   dcee8:	41f00000 	.word	0x41f00000

000dceec <__udivmoddi4>:
   dceec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcef0:	9d08      	ldr	r5, [sp, #32]
   dcef2:	4604      	mov	r4, r0
   dcef4:	468c      	mov	ip, r1
   dcef6:	2b00      	cmp	r3, #0
   dcef8:	f040 8083 	bne.w	dd002 <__udivmoddi4+0x116>
   dcefc:	428a      	cmp	r2, r1
   dcefe:	4617      	mov	r7, r2
   dcf00:	d947      	bls.n	dcf92 <__udivmoddi4+0xa6>
   dcf02:	fab2 f282 	clz	r2, r2
   dcf06:	b142      	cbz	r2, dcf1a <__udivmoddi4+0x2e>
   dcf08:	f1c2 0020 	rsb	r0, r2, #32
   dcf0c:	fa24 f000 	lsr.w	r0, r4, r0
   dcf10:	4091      	lsls	r1, r2
   dcf12:	4097      	lsls	r7, r2
   dcf14:	ea40 0c01 	orr.w	ip, r0, r1
   dcf18:	4094      	lsls	r4, r2
   dcf1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   dcf1e:	0c23      	lsrs	r3, r4, #16
   dcf20:	fbbc f6f8 	udiv	r6, ip, r8
   dcf24:	fa1f fe87 	uxth.w	lr, r7
   dcf28:	fb08 c116 	mls	r1, r8, r6, ip
   dcf2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dcf30:	fb06 f10e 	mul.w	r1, r6, lr
   dcf34:	4299      	cmp	r1, r3
   dcf36:	d909      	bls.n	dcf4c <__udivmoddi4+0x60>
   dcf38:	18fb      	adds	r3, r7, r3
   dcf3a:	f106 30ff 	add.w	r0, r6, #4294967295
   dcf3e:	f080 8119 	bcs.w	dd174 <__udivmoddi4+0x288>
   dcf42:	4299      	cmp	r1, r3
   dcf44:	f240 8116 	bls.w	dd174 <__udivmoddi4+0x288>
   dcf48:	3e02      	subs	r6, #2
   dcf4a:	443b      	add	r3, r7
   dcf4c:	1a5b      	subs	r3, r3, r1
   dcf4e:	b2a4      	uxth	r4, r4
   dcf50:	fbb3 f0f8 	udiv	r0, r3, r8
   dcf54:	fb08 3310 	mls	r3, r8, r0, r3
   dcf58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   dcf5c:	fb00 fe0e 	mul.w	lr, r0, lr
   dcf60:	45a6      	cmp	lr, r4
   dcf62:	d909      	bls.n	dcf78 <__udivmoddi4+0x8c>
   dcf64:	193c      	adds	r4, r7, r4
   dcf66:	f100 33ff 	add.w	r3, r0, #4294967295
   dcf6a:	f080 8105 	bcs.w	dd178 <__udivmoddi4+0x28c>
   dcf6e:	45a6      	cmp	lr, r4
   dcf70:	f240 8102 	bls.w	dd178 <__udivmoddi4+0x28c>
   dcf74:	3802      	subs	r0, #2
   dcf76:	443c      	add	r4, r7
   dcf78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   dcf7c:	eba4 040e 	sub.w	r4, r4, lr
   dcf80:	2600      	movs	r6, #0
   dcf82:	b11d      	cbz	r5, dcf8c <__udivmoddi4+0xa0>
   dcf84:	40d4      	lsrs	r4, r2
   dcf86:	2300      	movs	r3, #0
   dcf88:	e9c5 4300 	strd	r4, r3, [r5]
   dcf8c:	4631      	mov	r1, r6
   dcf8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dcf92:	b902      	cbnz	r2, dcf96 <__udivmoddi4+0xaa>
   dcf94:	deff      	udf	#255	; 0xff
   dcf96:	fab2 f282 	clz	r2, r2
   dcf9a:	2a00      	cmp	r2, #0
   dcf9c:	d150      	bne.n	dd040 <__udivmoddi4+0x154>
   dcf9e:	1bcb      	subs	r3, r1, r7
   dcfa0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dcfa4:	fa1f f887 	uxth.w	r8, r7
   dcfa8:	2601      	movs	r6, #1
   dcfaa:	fbb3 fcfe 	udiv	ip, r3, lr
   dcfae:	0c21      	lsrs	r1, r4, #16
   dcfb0:	fb0e 331c 	mls	r3, lr, ip, r3
   dcfb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dcfb8:	fb08 f30c 	mul.w	r3, r8, ip
   dcfbc:	428b      	cmp	r3, r1
   dcfbe:	d907      	bls.n	dcfd0 <__udivmoddi4+0xe4>
   dcfc0:	1879      	adds	r1, r7, r1
   dcfc2:	f10c 30ff 	add.w	r0, ip, #4294967295
   dcfc6:	d202      	bcs.n	dcfce <__udivmoddi4+0xe2>
   dcfc8:	428b      	cmp	r3, r1
   dcfca:	f200 80e9 	bhi.w	dd1a0 <__udivmoddi4+0x2b4>
   dcfce:	4684      	mov	ip, r0
   dcfd0:	1ac9      	subs	r1, r1, r3
   dcfd2:	b2a3      	uxth	r3, r4
   dcfd4:	fbb1 f0fe 	udiv	r0, r1, lr
   dcfd8:	fb0e 1110 	mls	r1, lr, r0, r1
   dcfdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dcfe0:	fb08 f800 	mul.w	r8, r8, r0
   dcfe4:	45a0      	cmp	r8, r4
   dcfe6:	d907      	bls.n	dcff8 <__udivmoddi4+0x10c>
   dcfe8:	193c      	adds	r4, r7, r4
   dcfea:	f100 33ff 	add.w	r3, r0, #4294967295
   dcfee:	d202      	bcs.n	dcff6 <__udivmoddi4+0x10a>
   dcff0:	45a0      	cmp	r8, r4
   dcff2:	f200 80d9 	bhi.w	dd1a8 <__udivmoddi4+0x2bc>
   dcff6:	4618      	mov	r0, r3
   dcff8:	eba4 0408 	sub.w	r4, r4, r8
   dcffc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dd000:	e7bf      	b.n	dcf82 <__udivmoddi4+0x96>
   dd002:	428b      	cmp	r3, r1
   dd004:	d909      	bls.n	dd01a <__udivmoddi4+0x12e>
   dd006:	2d00      	cmp	r5, #0
   dd008:	f000 80b1 	beq.w	dd16e <__udivmoddi4+0x282>
   dd00c:	2600      	movs	r6, #0
   dd00e:	e9c5 0100 	strd	r0, r1, [r5]
   dd012:	4630      	mov	r0, r6
   dd014:	4631      	mov	r1, r6
   dd016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd01a:	fab3 f683 	clz	r6, r3
   dd01e:	2e00      	cmp	r6, #0
   dd020:	d14a      	bne.n	dd0b8 <__udivmoddi4+0x1cc>
   dd022:	428b      	cmp	r3, r1
   dd024:	d302      	bcc.n	dd02c <__udivmoddi4+0x140>
   dd026:	4282      	cmp	r2, r0
   dd028:	f200 80b8 	bhi.w	dd19c <__udivmoddi4+0x2b0>
   dd02c:	1a84      	subs	r4, r0, r2
   dd02e:	eb61 0103 	sbc.w	r1, r1, r3
   dd032:	2001      	movs	r0, #1
   dd034:	468c      	mov	ip, r1
   dd036:	2d00      	cmp	r5, #0
   dd038:	d0a8      	beq.n	dcf8c <__udivmoddi4+0xa0>
   dd03a:	e9c5 4c00 	strd	r4, ip, [r5]
   dd03e:	e7a5      	b.n	dcf8c <__udivmoddi4+0xa0>
   dd040:	f1c2 0320 	rsb	r3, r2, #32
   dd044:	fa20 f603 	lsr.w	r6, r0, r3
   dd048:	4097      	lsls	r7, r2
   dd04a:	fa01 f002 	lsl.w	r0, r1, r2
   dd04e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dd052:	40d9      	lsrs	r1, r3
   dd054:	4330      	orrs	r0, r6
   dd056:	0c03      	lsrs	r3, r0, #16
   dd058:	fbb1 f6fe 	udiv	r6, r1, lr
   dd05c:	fa1f f887 	uxth.w	r8, r7
   dd060:	fb0e 1116 	mls	r1, lr, r6, r1
   dd064:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dd068:	fb06 f108 	mul.w	r1, r6, r8
   dd06c:	4299      	cmp	r1, r3
   dd06e:	fa04 f402 	lsl.w	r4, r4, r2
   dd072:	d909      	bls.n	dd088 <__udivmoddi4+0x19c>
   dd074:	18fb      	adds	r3, r7, r3
   dd076:	f106 3cff 	add.w	ip, r6, #4294967295
   dd07a:	f080 808d 	bcs.w	dd198 <__udivmoddi4+0x2ac>
   dd07e:	4299      	cmp	r1, r3
   dd080:	f240 808a 	bls.w	dd198 <__udivmoddi4+0x2ac>
   dd084:	3e02      	subs	r6, #2
   dd086:	443b      	add	r3, r7
   dd088:	1a5b      	subs	r3, r3, r1
   dd08a:	b281      	uxth	r1, r0
   dd08c:	fbb3 f0fe 	udiv	r0, r3, lr
   dd090:	fb0e 3310 	mls	r3, lr, r0, r3
   dd094:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dd098:	fb00 f308 	mul.w	r3, r0, r8
   dd09c:	428b      	cmp	r3, r1
   dd09e:	d907      	bls.n	dd0b0 <__udivmoddi4+0x1c4>
   dd0a0:	1879      	adds	r1, r7, r1
   dd0a2:	f100 3cff 	add.w	ip, r0, #4294967295
   dd0a6:	d273      	bcs.n	dd190 <__udivmoddi4+0x2a4>
   dd0a8:	428b      	cmp	r3, r1
   dd0aa:	d971      	bls.n	dd190 <__udivmoddi4+0x2a4>
   dd0ac:	3802      	subs	r0, #2
   dd0ae:	4439      	add	r1, r7
   dd0b0:	1acb      	subs	r3, r1, r3
   dd0b2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dd0b6:	e778      	b.n	dcfaa <__udivmoddi4+0xbe>
   dd0b8:	f1c6 0c20 	rsb	ip, r6, #32
   dd0bc:	fa03 f406 	lsl.w	r4, r3, r6
   dd0c0:	fa22 f30c 	lsr.w	r3, r2, ip
   dd0c4:	431c      	orrs	r4, r3
   dd0c6:	fa20 f70c 	lsr.w	r7, r0, ip
   dd0ca:	fa01 f306 	lsl.w	r3, r1, r6
   dd0ce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dd0d2:	fa21 f10c 	lsr.w	r1, r1, ip
   dd0d6:	431f      	orrs	r7, r3
   dd0d8:	0c3b      	lsrs	r3, r7, #16
   dd0da:	fbb1 f9fe 	udiv	r9, r1, lr
   dd0de:	fa1f f884 	uxth.w	r8, r4
   dd0e2:	fb0e 1119 	mls	r1, lr, r9, r1
   dd0e6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dd0ea:	fb09 fa08 	mul.w	sl, r9, r8
   dd0ee:	458a      	cmp	sl, r1
   dd0f0:	fa02 f206 	lsl.w	r2, r2, r6
   dd0f4:	fa00 f306 	lsl.w	r3, r0, r6
   dd0f8:	d908      	bls.n	dd10c <__udivmoddi4+0x220>
   dd0fa:	1861      	adds	r1, r4, r1
   dd0fc:	f109 30ff 	add.w	r0, r9, #4294967295
   dd100:	d248      	bcs.n	dd194 <__udivmoddi4+0x2a8>
   dd102:	458a      	cmp	sl, r1
   dd104:	d946      	bls.n	dd194 <__udivmoddi4+0x2a8>
   dd106:	f1a9 0902 	sub.w	r9, r9, #2
   dd10a:	4421      	add	r1, r4
   dd10c:	eba1 010a 	sub.w	r1, r1, sl
   dd110:	b2bf      	uxth	r7, r7
   dd112:	fbb1 f0fe 	udiv	r0, r1, lr
   dd116:	fb0e 1110 	mls	r1, lr, r0, r1
   dd11a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dd11e:	fb00 f808 	mul.w	r8, r0, r8
   dd122:	45b8      	cmp	r8, r7
   dd124:	d907      	bls.n	dd136 <__udivmoddi4+0x24a>
   dd126:	19e7      	adds	r7, r4, r7
   dd128:	f100 31ff 	add.w	r1, r0, #4294967295
   dd12c:	d22e      	bcs.n	dd18c <__udivmoddi4+0x2a0>
   dd12e:	45b8      	cmp	r8, r7
   dd130:	d92c      	bls.n	dd18c <__udivmoddi4+0x2a0>
   dd132:	3802      	subs	r0, #2
   dd134:	4427      	add	r7, r4
   dd136:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dd13a:	eba7 0708 	sub.w	r7, r7, r8
   dd13e:	fba0 8902 	umull	r8, r9, r0, r2
   dd142:	454f      	cmp	r7, r9
   dd144:	46c6      	mov	lr, r8
   dd146:	4649      	mov	r1, r9
   dd148:	d31a      	bcc.n	dd180 <__udivmoddi4+0x294>
   dd14a:	d017      	beq.n	dd17c <__udivmoddi4+0x290>
   dd14c:	b15d      	cbz	r5, dd166 <__udivmoddi4+0x27a>
   dd14e:	ebb3 020e 	subs.w	r2, r3, lr
   dd152:	eb67 0701 	sbc.w	r7, r7, r1
   dd156:	fa07 fc0c 	lsl.w	ip, r7, ip
   dd15a:	40f2      	lsrs	r2, r6
   dd15c:	ea4c 0202 	orr.w	r2, ip, r2
   dd160:	40f7      	lsrs	r7, r6
   dd162:	e9c5 2700 	strd	r2, r7, [r5]
   dd166:	2600      	movs	r6, #0
   dd168:	4631      	mov	r1, r6
   dd16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd16e:	462e      	mov	r6, r5
   dd170:	4628      	mov	r0, r5
   dd172:	e70b      	b.n	dcf8c <__udivmoddi4+0xa0>
   dd174:	4606      	mov	r6, r0
   dd176:	e6e9      	b.n	dcf4c <__udivmoddi4+0x60>
   dd178:	4618      	mov	r0, r3
   dd17a:	e6fd      	b.n	dcf78 <__udivmoddi4+0x8c>
   dd17c:	4543      	cmp	r3, r8
   dd17e:	d2e5      	bcs.n	dd14c <__udivmoddi4+0x260>
   dd180:	ebb8 0e02 	subs.w	lr, r8, r2
   dd184:	eb69 0104 	sbc.w	r1, r9, r4
   dd188:	3801      	subs	r0, #1
   dd18a:	e7df      	b.n	dd14c <__udivmoddi4+0x260>
   dd18c:	4608      	mov	r0, r1
   dd18e:	e7d2      	b.n	dd136 <__udivmoddi4+0x24a>
   dd190:	4660      	mov	r0, ip
   dd192:	e78d      	b.n	dd0b0 <__udivmoddi4+0x1c4>
   dd194:	4681      	mov	r9, r0
   dd196:	e7b9      	b.n	dd10c <__udivmoddi4+0x220>
   dd198:	4666      	mov	r6, ip
   dd19a:	e775      	b.n	dd088 <__udivmoddi4+0x19c>
   dd19c:	4630      	mov	r0, r6
   dd19e:	e74a      	b.n	dd036 <__udivmoddi4+0x14a>
   dd1a0:	f1ac 0c02 	sub.w	ip, ip, #2
   dd1a4:	4439      	add	r1, r7
   dd1a6:	e713      	b.n	dcfd0 <__udivmoddi4+0xe4>
   dd1a8:	3802      	subs	r0, #2
   dd1aa:	443c      	add	r4, r7
   dd1ac:	e724      	b.n	dcff8 <__udivmoddi4+0x10c>
   dd1ae:	bf00      	nop

000dd1b0 <__aeabi_idiv0>:
   dd1b0:	4770      	bx	lr
   dd1b2:	bf00      	nop

000dd1b4 <atexit>:
   dd1b4:	2300      	movs	r3, #0
   dd1b6:	4601      	mov	r1, r0
   dd1b8:	461a      	mov	r2, r3
   dd1ba:	4618      	mov	r0, r3
   dd1bc:	f000 b872 	b.w	dd2a4 <__register_exitproc>

000dd1c0 <memcpy>:
   dd1c0:	440a      	add	r2, r1
   dd1c2:	4291      	cmp	r1, r2
   dd1c4:	f100 33ff 	add.w	r3, r0, #4294967295
   dd1c8:	d100      	bne.n	dd1cc <memcpy+0xc>
   dd1ca:	4770      	bx	lr
   dd1cc:	b510      	push	{r4, lr}
   dd1ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   dd1d2:	f803 4f01 	strb.w	r4, [r3, #1]!
   dd1d6:	4291      	cmp	r1, r2
   dd1d8:	d1f9      	bne.n	dd1ce <memcpy+0xe>
   dd1da:	bd10      	pop	{r4, pc}

000dd1dc <memset>:
   dd1dc:	4402      	add	r2, r0
   dd1de:	4603      	mov	r3, r0
   dd1e0:	4293      	cmp	r3, r2
   dd1e2:	d100      	bne.n	dd1e6 <memset+0xa>
   dd1e4:	4770      	bx	lr
   dd1e6:	f803 1b01 	strb.w	r1, [r3], #1
   dd1ea:	e7f9      	b.n	dd1e0 <memset+0x4>

000dd1ec <srand>:
   dd1ec:	b538      	push	{r3, r4, r5, lr}
   dd1ee:	4b0d      	ldr	r3, [pc, #52]	; (dd224 <srand+0x38>)
   dd1f0:	681d      	ldr	r5, [r3, #0]
   dd1f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dd1f4:	4604      	mov	r4, r0
   dd1f6:	b97b      	cbnz	r3, dd218 <srand+0x2c>
   dd1f8:	2018      	movs	r0, #24
   dd1fa:	f7fa ff57 	bl	d80ac <malloc>
   dd1fe:	4a0a      	ldr	r2, [pc, #40]	; (dd228 <srand+0x3c>)
   dd200:	4b0a      	ldr	r3, [pc, #40]	; (dd22c <srand+0x40>)
   dd202:	63a8      	str	r0, [r5, #56]	; 0x38
   dd204:	e9c0 2300 	strd	r2, r3, [r0]
   dd208:	4b09      	ldr	r3, [pc, #36]	; (dd230 <srand+0x44>)
   dd20a:	6083      	str	r3, [r0, #8]
   dd20c:	230b      	movs	r3, #11
   dd20e:	8183      	strh	r3, [r0, #12]
   dd210:	2201      	movs	r2, #1
   dd212:	2300      	movs	r3, #0
   dd214:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dd218:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dd21a:	2200      	movs	r2, #0
   dd21c:	611c      	str	r4, [r3, #16]
   dd21e:	615a      	str	r2, [r3, #20]
   dd220:	bd38      	pop	{r3, r4, r5, pc}
   dd222:	bf00      	nop
   dd224:	2003e3e0 	.word	0x2003e3e0
   dd228:	abcd330e 	.word	0xabcd330e
   dd22c:	e66d1234 	.word	0xe66d1234
   dd230:	0005deec 	.word	0x0005deec

000dd234 <strdup>:
   dd234:	4b02      	ldr	r3, [pc, #8]	; (dd240 <strdup+0xc>)
   dd236:	4601      	mov	r1, r0
   dd238:	6818      	ldr	r0, [r3, #0]
   dd23a:	f000 b803 	b.w	dd244 <_strdup_r>
   dd23e:	bf00      	nop
   dd240:	2003e3e0 	.word	0x2003e3e0

000dd244 <_strdup_r>:
   dd244:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dd246:	4604      	mov	r4, r0
   dd248:	4608      	mov	r0, r1
   dd24a:	460d      	mov	r5, r1
   dd24c:	f000 f80f 	bl	dd26e <strlen>
   dd250:	1c42      	adds	r2, r0, #1
   dd252:	4611      	mov	r1, r2
   dd254:	4620      	mov	r0, r4
   dd256:	9201      	str	r2, [sp, #4]
   dd258:	f7fa ff50 	bl	d80fc <_malloc_r>
   dd25c:	4604      	mov	r4, r0
   dd25e:	b118      	cbz	r0, dd268 <_strdup_r+0x24>
   dd260:	9a01      	ldr	r2, [sp, #4]
   dd262:	4629      	mov	r1, r5
   dd264:	f7ff ffac 	bl	dd1c0 <memcpy>
   dd268:	4620      	mov	r0, r4
   dd26a:	b003      	add	sp, #12
   dd26c:	bd30      	pop	{r4, r5, pc}

000dd26e <strlen>:
   dd26e:	4603      	mov	r3, r0
   dd270:	f813 2b01 	ldrb.w	r2, [r3], #1
   dd274:	2a00      	cmp	r2, #0
   dd276:	d1fb      	bne.n	dd270 <strlen+0x2>
   dd278:	1a18      	subs	r0, r3, r0
   dd27a:	3801      	subs	r0, #1
   dd27c:	4770      	bx	lr

000dd27e <strncpy>:
   dd27e:	b510      	push	{r4, lr}
   dd280:	3901      	subs	r1, #1
   dd282:	4603      	mov	r3, r0
   dd284:	b132      	cbz	r2, dd294 <strncpy+0x16>
   dd286:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dd28a:	f803 4b01 	strb.w	r4, [r3], #1
   dd28e:	3a01      	subs	r2, #1
   dd290:	2c00      	cmp	r4, #0
   dd292:	d1f7      	bne.n	dd284 <strncpy+0x6>
   dd294:	441a      	add	r2, r3
   dd296:	2100      	movs	r1, #0
   dd298:	4293      	cmp	r3, r2
   dd29a:	d100      	bne.n	dd29e <strncpy+0x20>
   dd29c:	bd10      	pop	{r4, pc}
   dd29e:	f803 1b01 	strb.w	r1, [r3], #1
   dd2a2:	e7f9      	b.n	dd298 <strncpy+0x1a>

000dd2a4 <__register_exitproc>:
   dd2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd2a8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dd364 <__register_exitproc+0xc0>
   dd2ac:	4606      	mov	r6, r0
   dd2ae:	f8d8 0000 	ldr.w	r0, [r8]
   dd2b2:	461f      	mov	r7, r3
   dd2b4:	460d      	mov	r5, r1
   dd2b6:	4691      	mov	r9, r2
   dd2b8:	f000 f856 	bl	dd368 <__retarget_lock_acquire_recursive>
   dd2bc:	4b25      	ldr	r3, [pc, #148]	; (dd354 <__register_exitproc+0xb0>)
   dd2be:	681c      	ldr	r4, [r3, #0]
   dd2c0:	b934      	cbnz	r4, dd2d0 <__register_exitproc+0x2c>
   dd2c2:	4c25      	ldr	r4, [pc, #148]	; (dd358 <__register_exitproc+0xb4>)
   dd2c4:	601c      	str	r4, [r3, #0]
   dd2c6:	4b25      	ldr	r3, [pc, #148]	; (dd35c <__register_exitproc+0xb8>)
   dd2c8:	b113      	cbz	r3, dd2d0 <__register_exitproc+0x2c>
   dd2ca:	681b      	ldr	r3, [r3, #0]
   dd2cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dd2d0:	6863      	ldr	r3, [r4, #4]
   dd2d2:	2b1f      	cmp	r3, #31
   dd2d4:	dd07      	ble.n	dd2e6 <__register_exitproc+0x42>
   dd2d6:	f8d8 0000 	ldr.w	r0, [r8]
   dd2da:	f000 f847 	bl	dd36c <__retarget_lock_release_recursive>
   dd2de:	f04f 30ff 	mov.w	r0, #4294967295
   dd2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd2e6:	b34e      	cbz	r6, dd33c <__register_exitproc+0x98>
   dd2e8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dd2ec:	b988      	cbnz	r0, dd312 <__register_exitproc+0x6e>
   dd2ee:	4b1c      	ldr	r3, [pc, #112]	; (dd360 <__register_exitproc+0xbc>)
   dd2f0:	b923      	cbnz	r3, dd2fc <__register_exitproc+0x58>
   dd2f2:	f8d8 0000 	ldr.w	r0, [r8]
   dd2f6:	f000 f838 	bl	dd36a <__retarget_lock_release>
   dd2fa:	e7f0      	b.n	dd2de <__register_exitproc+0x3a>
   dd2fc:	f44f 7084 	mov.w	r0, #264	; 0x108
   dd300:	f7fa fed4 	bl	d80ac <malloc>
   dd304:	2800      	cmp	r0, #0
   dd306:	d0f4      	beq.n	dd2f2 <__register_exitproc+0x4e>
   dd308:	2300      	movs	r3, #0
   dd30a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dd30e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dd312:	6863      	ldr	r3, [r4, #4]
   dd314:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dd318:	2201      	movs	r2, #1
   dd31a:	409a      	lsls	r2, r3
   dd31c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dd320:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dd324:	4313      	orrs	r3, r2
   dd326:	2e02      	cmp	r6, #2
   dd328:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dd32c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dd330:	bf02      	ittt	eq
   dd332:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dd336:	431a      	orreq	r2, r3
   dd338:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dd33c:	6863      	ldr	r3, [r4, #4]
   dd33e:	f8d8 0000 	ldr.w	r0, [r8]
   dd342:	1c5a      	adds	r2, r3, #1
   dd344:	3302      	adds	r3, #2
   dd346:	6062      	str	r2, [r4, #4]
   dd348:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dd34c:	f000 f80e 	bl	dd36c <__retarget_lock_release_recursive>
   dd350:	2000      	movs	r0, #0
   dd352:	e7c6      	b.n	dd2e2 <__register_exitproc+0x3e>
   dd354:	2003e7e0 	.word	0x2003e7e0
   dd358:	2003e754 	.word	0x2003e754
   dd35c:	00000000 	.word	0x00000000
   dd360:	000d80ad 	.word	0x000d80ad
   dd364:	2003e444 	.word	0x2003e444

000dd368 <__retarget_lock_acquire_recursive>:
   dd368:	4770      	bx	lr

000dd36a <__retarget_lock_release>:
   dd36a:	4770      	bx	lr

000dd36c <__retarget_lock_release_recursive>:
   dd36c:	4770      	bx	lr

000dd36e <link_code_end>:
	...

000dd370 <dynalib_user>:
   dd370:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dd380:	0000 0000 0a0a 6554 706d 7265 7461 7275     ......Temperatur
   dd390:	2065 203d 2000 0046 7250 7365 7573 6572     e = . F.Pressure
   dd3a0:	3d20 0020 6d20 486d 0067 7041 7270 786f      = . mmHg.Approx
   dd3b0:	202e 6c41 6974 7574 6564 3d20 0020 6d20     . Altitude = . m
   dd3c0:	4800 6d75 6469 7469 2079 203d 2000 0025     .Humidity = . %.
   dd3d0:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dd3e0:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dd3f0:	2d2d 2d2d 5300 6e65 6f73 3a72 2020 2020     ----.Sensor:    
   dd400:	2020 0020 7244 7669 7265 5620 7265 203a        .Driver Ver: 
   dd410:	2020 5500 696e 7571 2065 4449 203a 2020       .Unique ID:   
   dd420:	0020 614d 2078 6156 756c 3a65 2020 2020      .Max Value:    
   dd430:	2000 7878 0078 694d 206e 6156 756c 3a65     . xxx.Min Value:
   dd440:	2020 2020 5200 7365 6c6f 7475 6f69 3a6e         .Resolution:
   dd450:	2020 0020 430a 6c61 6269 6172 6974 6e6f        ..Calibration
   dd460:	6f20 6666 6573 7374 0a20 4100 6363 6c65      offsets ..Accel
   dd470:	7265 6d6f 7465 7265 203a 0a00 7947 6f72     erometer: ..Gyro
   dd480:	203a 0a00 614d 3a67 0020 410a 6363 6c65     : ..Mag: ..Accel
   dd490:	5220 6461 7569 3a73 0020 4d0a 6761 5220      Radius: ..Mag R
   dd4a0:	6461 7569 3a73 0020 004e 454e 5300 0045     adius: .N.NE.SE.
   dd4b0:	0053 5753 4e00 0057 6554 7473 6e69 2067     S.SW.NW.Testing 
   dd4c0:	6973 657a 0021 6146 6c69 6465 7420 206f     size!.Failed to 
   dd4d0:	7277 7469 2065 6461 7264 7365 2073 7830     write address 0x
   dd4e0:	4600 6961 656c 2064 6f74 7220 2d65 7277     .Failed to re-wr
   dd4f0:	7469 2065 6461 7264 7365 2073 7830 4600     ite address 0x.F
   dd500:	756f 646e 6d20 7861 6120 6464 6572 7373     ound max address
   dd510:	5400 6968 2073 4545 5250 4d4f 6320 6e61     .This EEPROM can
   dd520:	7320 6f74 6572 0020 6220 7479 7365 5600      store . bytes.V
   dd530:	6e61 7665 6c61 6575 2d20 2d2d 2d2d 2d2d     anevalue -------
   dd540:	2d2d 2d2d 2d2d 2d2d 2d2d 000a 0909 7700     ----------.....w
   dd550:	6e69 2064 7073 6565 2064 2d2d 2d2d 2d2d     ind speed ------
   dd560:	2d2d 2d2d 2d2d 2d2d 2d2d 0a2d 2000 706d     -----------.. mp
   dd570:	0068 6548 6461 6e69 2c67 7020 7469 6863     h.Heading, pitch
   dd580:	202c 6f72 6c6c 203a 2c00 0020 7953 7473     , roll: ., .Syst
   dd590:	6d65 5320 6174 7574 3a73 3020 0078 6553     em Status: 0x.Se
   dd5a0:	666c 5420 7365 3a74 2020 2020 3020 0078     lf Test:     0x.
   dd5b0:	7953 7473 6d65 4520 7272 726f 203a 3020     System Error:  0
   dd5c0:	0078 2021 5300 7379 003a 4720 003a 4120     x.! .Sys:. G:. A
   dd5d0:	003a 4d20 003a 002c 6554 706d 202e 203d     :. M:.,.Temp. = 
   dd5e0:	2000 b0c2 0046 7250 7365 2e73 3d20 0020     . ..F.Press. = .
   dd5f0:	6f43 706d 7361 2073 6568 6461 6e69 0067     Compass heading.
   dd600:	0041 0043 0a0a 5800 203a 0900 3a59 0020     A.C....X: ..Y: .
   dd610:	5a09 203a 6300 6d6f 6170 7373 6820 6165     .Z: .compass hea
   dd620:	6964 676e 203a 0020 7370 2069 7266 6d6f     ding:  .psi from
   dd630:	6220 6f6e 3530 0a35 0a00 6e75 7869 7420      bno055...unix t
   dd640:	6d69 2065 203d 7400 6d69 2065 6162 6573     ime = .time base
   dd650:	7620 6c61 6575 3d20 6f00 6666 6369 2065      value =.office 
   dd660:	6574 706d 7265 7461 7275 0065 6156 656e     temperature.Vane
   dd670:	5620 6c61 6575 4409 7269 6365 6974 6e6f      Value.Direction
   dd680:	4809 6165 6964 676e 4400 7661 7369 5720     .Heading.Davis W
   dd690:	6e69 2064 7053 6565 2064 6554 7473 5200     ind Speed Test.R
   dd6a0:	746f 7461 6f69 736e 4d09 4850 4200 454d     otations.MPH.BME
   dd6b0:	3832 2030 6574 7473 3100 3832 3678 2034     280 test.128x64 
   dd6c0:	4c4f 4445 4620 6165 6874 7265 6957 676e     OLED FeatherWing
   dd6d0:	7420 7365 0074 4c4f 4445 6220 6765 6e75      test.OLED begun
   dd6e0:	4200 7475 6f74 206e 6574 7473 4200 6769     .Button test.Big
   dd6f0:	6164 6464 4179 6464 6569 7720 6165 6874     daddyAddie weath
   dd700:	7265 7320 6174 6974 6e6f 0a21 6300 6e6f     er station!..con
   dd710:	656e 7463 6465 0a21 4300 756f 646c 6e20     nected!..Could n
   dd720:	746f 6620 6e69 2064 2061 6176 696c 2064     ot find a valid 
   dd730:	4d42 3245 3038 7320 6e65 6f73 2c72 6320     BME280 sensor, c
   dd740:	6568 6b63 7720 7269 6e69 2c67 6120 6464     heck wiring, add
   dd750:	6572 7373 202c 6573 736e 726f 4920 2144     ress, sensor ID!
   dd760:	5300 6e65 6f73 4972 2044 6177 3a73 3020     .SensorID was: 0
   dd770:	0078 2020 2020 2020 2020 4449 6f20 2066     x.        ID of 
   dd780:	7830 4646 7020 6f72 6162 6c62 2079 656d     0xFF probably me
   dd790:	6e61 2073 2061 6162 2064 6461 7264 7365     ans a bad addres
   dd7a0:	2c73 6120 4220 504d 3120 3038 6f20 2072     s, a BMP 180 or 
   dd7b0:	4d42 2050 3830 0a35 2000 2020 4449 6f20     BMP 085..   ID o
   dd7c0:	2066 7830 3635 302d 3578 2038 6572 7270     f 0x56-0x58 repr
   dd7d0:	7365 6e65 7374 6120 4220 504d 3220 3038     esents a BMP 280
   dd7e0:	0a2c 2000 2020 2020 2020 4920 2044 666f     ,..        ID of
   dd7f0:	3020 3678 2030 6572 7270 7365 6e65 7374      0x60 represents
   dd800:	6120 4220 454d 3220 3038 0a2e 2000 2020      a BME 280...   
   dd810:	2020 2020 4920 2044 666f 3020 3678 2031          ID of 0x61 
   dd820:	6572 7270 7365 6e65 7374 6120 4220 454d     represents a BME
   dd830:	3620 3038 0a2e 4600 756f 646e 4920 4332      680...Found I2C
   dd840:	4520 5045 4f52 004d 3249 2043 4545 5250      EEPROM.I2C EEPR
   dd850:	4d4f 6e20 746f 6920 6564 746e 6669 6569     OM not identifie
   dd860:	2064 2e2e 202e 6863 6365 206b 6f79 7275     d ... check your
   dd870:	6320 6e6f 656e 7463 6f69 736e 0d3f 000a      connections?...
   dd880:	6f4f 706f 2c73 6e20 206f 4e42 304f 3535     Ooops, no BNO055
   dd890:	6420 7465 6365 6574 2064 2e2e 202e 6843      detected ... Ch
   dd8a0:	6365 206b 6f79 7275 7720 7269 6e69 2067     eck your wiring 
   dd8b0:	726f 4920 4332 4120 4444 2152 0a00 6f4e     or I2C ADDR!..No
   dd8c0:	4320 6c61 6269 6172 6974 6e6f 4420 7461      Calibration Dat
   dd8d0:	2061 6f66 2072 6874 7369 7320 6e65 6f73     a for this senso
   dd8e0:	2072 7865 7369 7374 6920 206e 4545 5250     r exists in EEPR
   dd8f0:	4d4f 0a00 6f46 6e75 2064 6143 696c 7262     OM..Found Calibr
   dd900:	7461 6f69 206e 6f66 2072 6874 7369 7320     ation for this s
   dd910:	6e65 6f73 2072 6e69 4520 5045 4f52 2e4d     ensor in EEPROM.
   dd920:	0a00 520a 7365 6f74 6972 676e 4320 6c61     ...Restoring Cal
   dd930:	6269 6172 6974 6e6f 6420 7461 2061 6f74     ibration data to
   dd940:	7420 6568 4220 4f4e 3530 2e35 2e2e 0a00      the BNO055.....
   dd950:	430a 6c61 6269 6172 6974 6e6f 6420 7461     .Calibration dat
   dd960:	2061 6f6c 6461 6465 6920 746e 206f 4e42     a loaded into BN
   dd970:	304f 3535 4d00 766f 2065 6573 736e 726f     O055.Move sensor
   dd980:	7320 696c 6867 6c74 2079 6f74 6320 6c61      slightly to cal
   dd990:	6269 6172 6574 6d20 6761 656e 6f74 656d     ibrate magnetome
   dd9a0:	6574 7372 5000 656c 7361 2065 6143 696c     ters.Please Cali
   dd9b0:	7262 7461 2065 6553 736e 726f 203a 0a00     brate Sensor: ..
   dd9c0:	7546 6c6c 2079 6163 696c 7262 7461 6465     Fully calibrated
   dd9d0:	0021 6143 696c 7262 7461 6f69 206e 6552     !.Calibration Re
   dd9e0:	7573 746c 3a73 0020 0a0a 7453 726f 6e69     sults: ...Storin
   dd9f0:	2067 6163 696c 7262 7461 6f69 206e 6164     g calibration da
   dda00:	6174 7420 206f 4545 5250 4d4f 2e2e 002e     ta to EEPROM....
   dda10:	6144 6174 7320 6f74 6572 2064 6f74 4520     Data stored to E
   dda20:	5045 4f52 2e4d 0a00 2d2d 2d2d 2d2d 2d2d     EPROM...--------
   dda30:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   dda40:	2d2d 2d2d 2d2d 2d2d 000a 6564 6166 6c75     --------..defaul
   dda50:	2074 4d00 4253 4c00 4253 3c00 5053 5349     t .MSB.LSB.<SPIS
   dda60:	7465 6974 676e 2073 6564 6166 6c75 3e74     ettings default>
   dda70:	3c00 5053 5349 7465 6974 676e 2073 7325     .<SPISettings %s
   dda80:	7525 2520 2073 4f4d 4544 7525 003e 0000     %u %s MODE%u>...

000dda90 <_ZTVN8particle11SPISettingsE>:
	...
   dda98:	5939 000d 590d 000d 590f 000d               9Y...Y...Y..

000ddaa4 <_ZTV15Adafruit_BNO055>:
	...
   ddaac:	6681 000d 66c5 000d 667f 000d 6c61 000d     .f...f...f..al..
   ddabc:	6685 000d                                   .f..

000ddac0 <_ZTV17Adafruit_GrayOLED>:
	...
   ddad0:	76d5 000d 85bd 000d 6cb3 000d 70dd 000d     .v.......l...p..
   ddae0:	70df 000d 7111 000d 70ed 000d 70ff 000d     .p...q...p...p..
   ddaf0:	7021 000d 70dd 000d 7309 000d 6eaf 000d     !p...p...s...n..
   ddb00:	7129 000d 7167 000d 71a1 000d 71e7 000d     )q..gq...q...q..
   ddb10:	7285 000d 7203 000d 40a5 000d               .r...r...@..

000ddb1c <_ZL4font>:
   ddb1c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   ddb2c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   ddb3c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   ddb4c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   ddb5c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   ddb6c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   ddb7c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   ddb8c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   ddb9c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   ddbac:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   ddbbc:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   ddbcc:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   ddbdc:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   ddbec:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   ddbfc:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   ddc0c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   ddc1c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   ddc2c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   ddc3c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   ddc4c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   ddc5c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   ddc6c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   ddc7c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   ddc8c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   ddc9c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   ddcac:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   ddcbc:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   ddccc:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   ddcdc:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   ddcec:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   ddcfc:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   ddd0c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   ddd1c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   ddd2c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   ddd3c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   ddd4c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   ddd5c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   ddd6c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   ddd7c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   ddd8c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   ddd9c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dddac:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   dddbc:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dddcc:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   ddddc:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   dddec:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dddfc:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   dde0c:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   dde1c:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   dde2c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dde3c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dde4c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dde5c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dde6c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dde7c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dde8c:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   dde9c:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   ddeac:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   ddebc:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   ddecc:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   ddedc:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   ddeec:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   ddefc:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   ddf0c:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   ddf1c:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   ddf2c:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   ddf3c:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   ddf4c:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   ddf5c:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   ddf6c:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   ddf7c:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   ddf8c:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   ddf9c:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   ddfac:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   ddfbc:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   ddfcc:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   ddfdc:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   ddfec:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   ddffc:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   de00c:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000de01c <_ZTV12Adafruit_GFX>:
	...
   de02c:	76d5 000d 85bd 000d 40a5 000d 70dd 000d     .v.......@...p..
   de03c:	70df 000d 7111 000d 70ed 000d 70ff 000d     .p...q...p...p..
   de04c:	7021 000d 70dd 000d 7309 000d 7283 000d     !p...p...s...r..
   de05c:	7129 000d 7167 000d 71a1 000d 71e7 000d     )q..gq...q...q..
   de06c:	7285 000d 7203 000d                         .r...r..

000de074 <_ZTV15Adafruit_SH110X>:
	...
   de07c:	40a5 000d 40a5 000d 76d5 000d 85bd 000d     .@...@...v......
   de08c:	6cb3 000d 70dd 000d 70df 000d 7111 000d     .l...p...p...q..
   de09c:	70ed 000d 70ff 000d 7021 000d 70dd 000d     .p...p..!p...p..
   de0ac:	7309 000d 6eaf 000d 7129 000d 7167 000d     .s...n..)q..gq..
   de0bc:	71a1 000d 71e7 000d 7285 000d 7203 000d     .q...q...r...r..
   de0cc:	77e3 000d                                   .w..

000de0d0 <_ZL12splash2_data>:
   de0d0:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   de0e0:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   de0f0:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   de10c:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   de11c:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   de12c:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   de13c:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   de14c:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   de15c:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   de16c:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   de17c:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   de18c:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   de19c:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   de1ac:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   de1bc:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   de1cc:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   de1dc:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   de1ec:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   de1fc:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   de20c:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   de21c:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   de22c:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   de23c:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   de24c:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   de264:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   de274:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   de284:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   de294:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   de2a4:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000de2b0 <_ZTV15Adafruit_SH1107>:
	...
   de2b8:	7981 000d 7995 000d 76d5 000d 85bd 000d     .y...y...v......
   de2c8:	6cb3 000d 70dd 000d 70df 000d 7111 000d     .l...p...p...q..
   de2d8:	70ed 000d 70ff 000d 7021 000d 70dd 000d     .p...p..!p...p..
   de2e8:	7309 000d 6eaf 000d 7129 000d 7167 000d     .s...n..)q..gq..
   de2f8:	71a1 000d 71e7 000d 7285 000d 7203 000d     .q...q...r...r..
   de308:	77e3 000d                                   .w..

000de30c <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   de30c:	00d3 7fa8                                   ....

000de310 <_ZZN15Adafruit_SH11075beginEhbE4init>:
   de310:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
   de320:	35db 3fa8 a6a4 0000                         .5.?....

000de328 <_ZTVN5spark13EthernetClassE>:
	...
   de330:	818b 000d 8181 000d 8177 000d 816d 000d     ........w...m...
   de340:	8161 000d 8155 000d 95e7 000d 95ef 000d     a...U...........
   de350:	8149 000d 8141 000d 8137 000d 812d 000d     I...A...7...-...
   de360:	961f 000d                                   ....

000de364 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   de364:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   de374:	766f 0066 7061 0070 5925 252d 2d6d 6425     ovf.app.%Y-%m-%d
   de384:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   de394:	6d69 0065                                   ime.

000de398 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de3a0:	8b6d 000d 8b73 000d 8bb1 000d 8b81 000d     m...s...........
   de3b0:	8b6f 000d                                   o...

000de3b4 <_ZTV9IPAddress>:
	...
   de3bc:	90b5 000d 90a5 000d 90a7 000d               ............

000de3c8 <_ZTV9USBSerial>:
	...
   de3d0:	918d 000d 91f5 000d 91cb 000d 85bd 000d     ................
   de3e0:	91bd 000d 918f 000d 919f 000d 91ef 000d     ................
   de3f0:	91af 000d 9187 000d                         ........

000de3f8 <_ZTVN5spark13CellularClassE>:
	...
   de400:	9353 000d 9349 000d 933f 000d 92f5 000d     S...I...?.......
   de410:	9333 000d 9327 000d 95e7 000d 95ef 000d     3...'...........
   de420:	931b 000d 9313 000d 9309 000d 92ff 000d     ................
   de430:	961f 000d                                   ....

000de434 <_ZTV11USARTSerial>:
	...
   de43c:	938d 000d 93fb 000d 93d3 000d 85bd 000d     ................
   de44c:	93a3 000d 93bf 000d 93b1 000d 93cd 000d     ................
   de45c:	938f 000d 9395 000d                         ........

000de464 <_ZTV7TwoWire>:
	...
   de46c:	94a9 000d 94f3 000d 94cb 000d 94ab 000d     ................
   de47c:	94d3 000d 94db 000d 94e3 000d 94eb 000d     ................

000de48c <_ZTVN5spark12NetworkClassE>:
	...
   de494:	95a7 000d 95b1 000d 95bb 000d 95c5 000d     ................
   de4a4:	95cf 000d 95db 000d 95e7 000d 95ef 000d     ................
   de4b4:	95f7 000d 9603 000d 960b 000d 9615 000d     ................
   de4c4:	961f 000d                                   ....

000de4c8 <_ZSt7nothrow>:
   de4c8:	0000 0000 6f70 0077                         ....pow.

000de4d0 <CSWTCH.8>:
   de4d0:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   de4e0:	21d2 7f33 d97c c002                         .!3.|...

000de4e8 <CSWTCH.9>:
   de4e8:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   de4f8:	2d18 5444 21fb c009 0000 0000               .-DT.!......

000de504 <CSWTCH.8>:
   de504:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000de510 <CSWTCH.9>:
   de510:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000de51c <npio2_hw>:
   de51c:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   de52c:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   de53c:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   de54c:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   de55c:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   de56c:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   de57c:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   de58c:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000de59c <two_over_pi>:
   de59c:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   de5ac:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   de5bc:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   de5cc:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   de5dc:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   de5ec:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   de5fc:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   de60c:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   de61c:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   de62c:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   de63c:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   de64c:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   de65c:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   de66c:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   de67c:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   de68c:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   de69c:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   de6ac:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   de6bc:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   de6cc:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   de6dc:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   de6ec:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   de6fc:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   de70c:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   de71c:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   de72c:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   de73c:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   de74c:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   de75c:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   de76c:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   de77c:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   de78c:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   de79c:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   de7ac:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   de7bc:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   de7cc:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   de7dc:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   de7ec:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   de7fc:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   de80c:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   de81c:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   de82c:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   de83c:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   de84c:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   de85c:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   de86c:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   de87c:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   de88c:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   de89c:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   de8ac:	008c 0000 006b 0000                         ....k...

000de8b4 <PIo2>:
   de8b4:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   de8c4:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   de8d4:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000de8e0 <init_jk>:
   de8e0:	0004 0000 0007 0000 0009 0000 0000 0000     ................

000de8f0 <atanhi>:
   de8f0:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   de900:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000de910 <atanlo>:
   de910:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   de920:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000de930 <TWO52>:
   de930:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000de940 <atanhi>:
   de940:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000de950 <atanlo>:
   de950:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3

000de960 <link_const_variable_data_end>:
   de960:	000d5075 	.word	0x000d5075
   de964:	000d8195 	.word	0x000d8195
   de968:	000d832d 	.word	0x000d832d
   de96c:	000d85ad 	.word	0x000d85ad
   de970:	000d893d 	.word	0x000d893d
   de974:	000d89c1 	.word	0x000d89c1
   de978:	000d8a29 	.word	0x000d8a29
   de97c:	000d935d 	.word	0x000d935d
   de980:	000d96f1 	.word	0x000d96f1

000de984 <link_constructors_end>:
	...
