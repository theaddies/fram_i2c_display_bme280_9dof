
z:/Personal/Electronics/particle/boron_display_bme280_9dof/target/2.2.0/boron/boron_display_bme280_9dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006fd0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000daff0  000daff0  0000aff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000daff8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e444  000daffc  0001e444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000033c  2003e4b4  2003e4b4  0002e4b4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000db06c  000db06c  0002b06c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000db094  000db094  0002b094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001dbef1  00000000  00000000  0002b098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001c3c5  00000000  00000000  00206f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002ffd1  00000000  00000000  0022334e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000029b8  00000000  00000000  0025331f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000072d8  00000000  00000000  00255cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000428fa  00000000  00000000  0025cfaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00049e9e  00000000  00000000  0029f8a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010b9da  00000000  00000000  002e9747  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007b20  00000000  00000000  003f5124  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 ffbf 	bl	d9fb4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 ffc7 	bl	d9fd0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e444 	.word	0x2003e444
   d404c:	000daffc 	.word	0x000daffc
   d4050:	2003e4b4 	.word	0x2003e4b4
   d4054:	2003e4b4 	.word	0x2003e4b4
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 fa5d 	bl	d7520 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dafc8 	.word	0x000dafc8
   d4080:	000dafec 	.word	0x000dafec

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bb9c 	b.w	d47c0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa15 	bl	d44b8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 b9fd 	b.w	d7490 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bf05 	b.w	d6ea4 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bf03 	b.w	d6ea4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bf09 	b.w	d6eb4 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fe66 	bl	d6d7c <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6acd 	.word	0x000d6acd

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11printValuesv>:

  delay(BNO055_SAMPLERATE_DELAY_MS);
}


void printValues() {
   d40c8:	b538      	push	{r3, r4, r5, lr}
    Serial.print("Temperature = ");
   d40ca:	f003 fb31 	bl	d7730 <_Z16_fetch_usbserialv>
   d40ce:	4936      	ldr	r1, [pc, #216]	; (d41a8 <_Z11printValuesv+0xe0>)
    Serial.print(bme.readTemperature()*1.8F + 32.);
   d40d0:	4c36      	ldr	r4, [pc, #216]	; (d41ac <_Z11printValuesv+0xe4>)
    Serial.print("Temperature = ");
   d40d2:	f003 f851 	bl	d7178 <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature()*1.8F + 32.);
   d40d6:	f003 fb2b 	bl	d7730 <_Z16_fetch_usbserialv>
   d40da:	4605      	mov	r5, r0
   d40dc:	4620      	mov	r0, r4
   d40de:	f000 fdff 	bl	d4ce0 <_ZN15Adafruit_BME28015readTemperatureEv>
   d40e2:	eddf 7a33 	vldr	s15, [pc, #204]	; d41b0 <_Z11printValuesv+0xe8>
   d40e6:	ee60 7a27 	vmul.f32	s15, s0, s15
   d40ea:	ee17 0a90 	vmov	r0, s15
   d40ee:	f005 f8f9 	bl	d92e4 <__aeabi_f2d>
   d40f2:	4b30      	ldr	r3, [pc, #192]	; (d41b4 <_Z11printValuesv+0xec>)
   d40f4:	2200      	movs	r2, #0
   d40f6:	f004 ff97 	bl	d9028 <__adddf3>
   d40fa:	ec41 0b10 	vmov	d0, r0, r1
   d40fe:	2102      	movs	r1, #2
   d4100:	4628      	mov	r0, r5
   d4102:	f003 f952 	bl	d73aa <_ZN5Print5printEdi>
    Serial.println(" F");
   d4106:	f003 fb13 	bl	d7730 <_Z16_fetch_usbserialv>
   d410a:	492b      	ldr	r1, [pc, #172]	; (d41b8 <_Z11printValuesv+0xf0>)
   d410c:	f003 f84b 	bl	d71a6 <_ZN5Print7printlnEPKc>

    Serial.print("Pressure = ");
   d4110:	f003 fb0e 	bl	d7730 <_Z16_fetch_usbserialv>
   d4114:	4929      	ldr	r1, [pc, #164]	; (d41bc <_Z11printValuesv+0xf4>)
   d4116:	f003 f82f 	bl	d7178 <_ZN5Print5printEPKc>

    Serial.print(bme.readPressure() / 101325.0F * 760.0F);
   d411a:	f003 fb09 	bl	d7730 <_Z16_fetch_usbserialv>
   d411e:	4605      	mov	r5, r0
   d4120:	4620      	mov	r0, r4
   d4122:	f000 fe0b 	bl	d4d3c <_ZN15Adafruit_BME28012readPressureEv>
   d4126:	eddf 7a26 	vldr	s15, [pc, #152]	; d41c0 <_Z11printValuesv+0xf8>
   d412a:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d412e:	2102      	movs	r1, #2
   d4130:	4628      	mov	r0, r5
   d4132:	ed9f 0a24 	vldr	s0, [pc, #144]	; d41c4 <_Z11printValuesv+0xfc>
   d4136:	ee27 0a00 	vmul.f32	s0, s14, s0
   d413a:	f003 f927 	bl	d738c <_ZN5Print5printEfi>
    Serial.println(" mmHg");
   d413e:	f003 faf7 	bl	d7730 <_Z16_fetch_usbserialv>
   d4142:	4921      	ldr	r1, [pc, #132]	; (d41c8 <_Z11printValuesv+0x100>)
   d4144:	f003 f82f 	bl	d71a6 <_ZN5Print7printlnEPKc>

    Serial.print("Approx. Altitude = ");
   d4148:	f003 faf2 	bl	d7730 <_Z16_fetch_usbserialv>
   d414c:	491f      	ldr	r1, [pc, #124]	; (d41cc <_Z11printValuesv+0x104>)
   d414e:	f003 f813 	bl	d7178 <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d4152:	f003 faed 	bl	d7730 <_Z16_fetch_usbserialv>
   d4156:	ed9f 0a1e 	vldr	s0, [pc, #120]	; d41d0 <_Z11printValuesv+0x108>
   d415a:	4605      	mov	r5, r0
   d415c:	4620      	mov	r0, r4
   d415e:	f000 fec7 	bl	d4ef0 <_ZN15Adafruit_BME28012readAltitudeEf>
   d4162:	2102      	movs	r1, #2
   d4164:	4628      	mov	r0, r5
   d4166:	f003 f911 	bl	d738c <_ZN5Print5printEfi>
    Serial.println(" m");
   d416a:	f003 fae1 	bl	d7730 <_Z16_fetch_usbserialv>
   d416e:	4919      	ldr	r1, [pc, #100]	; (d41d4 <_Z11printValuesv+0x10c>)
   d4170:	f003 f819 	bl	d71a6 <_ZN5Print7printlnEPKc>

    Serial.print("Humidity = ");
   d4174:	f003 fadc 	bl	d7730 <_Z16_fetch_usbserialv>
   d4178:	4917      	ldr	r1, [pc, #92]	; (d41d8 <_Z11printValuesv+0x110>)
   d417a:	f002 fffd 	bl	d7178 <_ZN5Print5printEPKc>

    Serial.print(bme.readHumidity());
   d417e:	f003 fad7 	bl	d7730 <_Z16_fetch_usbserialv>
   d4182:	4605      	mov	r5, r0
   d4184:	4620      	mov	r0, r4
   d4186:	f000 ff53 	bl	d5030 <_ZN15Adafruit_BME28012readHumidityEv>
   d418a:	2102      	movs	r1, #2
   d418c:	4628      	mov	r0, r5
   d418e:	f003 f8fd 	bl	d738c <_ZN5Print5printEfi>
    Serial.println(" %");
   d4192:	f003 facd 	bl	d7730 <_Z16_fetch_usbserialv>
   d4196:	4911      	ldr	r1, [pc, #68]	; (d41dc <_Z11printValuesv+0x114>)
   d4198:	f003 f805 	bl	d71a6 <_ZN5Print7printlnEPKc>

    Serial.println();
   d419c:	f003 fac8 	bl	d7730 <_Z16_fetch_usbserialv>
}
   d41a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println();
   d41a4:	f002 bff3 	b.w	d718e <_ZN5Print7printlnEv>
   d41a8:	000da140 	.word	0x000da140
   d41ac:	2003e4b8 	.word	0x2003e4b8
   d41b0:	3fe66666 	.word	0x3fe66666
   d41b4:	40400000 	.word	0x40400000
   d41b8:	000da14f 	.word	0x000da14f
   d41bc:	000da152 	.word	0x000da152
   d41c0:	47c5e680 	.word	0x47c5e680
   d41c4:	443e0000 	.word	0x443e0000
   d41c8:	000da15e 	.word	0x000da15e
   d41cc:	000da164 	.word	0x000da164
   d41d0:	447d5000 	.word	0x447d5000
   d41d4:	000da178 	.word	0x000da178
   d41d8:	000da17b 	.word	0x000da17b
   d41dc:	000da187 	.word	0x000da187

000d41e0 <_Z20displaySensorDetailsv>:
    Displays some basic information on this sensor from the unified
    sensor API sensor_t type (see Adafruit_Sensor for more information)
*/
/**************************************************************************/
void displaySensorDetails(void)
{
   d41e0:	b530      	push	{r4, r5, lr}
   d41e2:	b08b      	sub	sp, #44	; 0x2c
  sensor_t sensor;
  bno.getSensor(&sensor);
   d41e4:	4669      	mov	r1, sp
   d41e6:	4842      	ldr	r0, [pc, #264]	; (d42f0 <_Z20displaySensorDetailsv+0x110>)
   d41e8:	f001 fb20 	bl	d582c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
  Serial.println("------------------------------------");
   d41ec:	f003 faa0 	bl	d7730 <_Z16_fetch_usbserialv>
   d41f0:	4940      	ldr	r1, [pc, #256]	; (d42f4 <_Z20displaySensorDetailsv+0x114>)
   d41f2:	f002 ffd8 	bl	d71a6 <_ZN5Print7printlnEPKc>
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
   d41f6:	f003 fa9b 	bl	d7730 <_Z16_fetch_usbserialv>
   d41fa:	493f      	ldr	r1, [pc, #252]	; (d42f8 <_Z20displaySensorDetailsv+0x118>)
   d41fc:	f002 ffbc 	bl	d7178 <_ZN5Print5printEPKc>
   d4200:	f003 fa96 	bl	d7730 <_Z16_fetch_usbserialv>
   d4204:	4669      	mov	r1, sp
   d4206:	f002 ffce 	bl	d71a6 <_ZN5Print7printlnEPKc>
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
   d420a:	f003 fa91 	bl	d7730 <_Z16_fetch_usbserialv>
   d420e:	493b      	ldr	r1, [pc, #236]	; (d42fc <_Z20displaySensorDetailsv+0x11c>)
   d4210:	f002 ffb2 	bl	d7178 <_ZN5Print5printEPKc>
   d4214:	f003 fa8c 	bl	d7730 <_Z16_fetch_usbserialv>
   d4218:	9c03      	ldr	r4, [sp, #12]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d421a:	2c00      	cmp	r4, #0
   d421c:	4605      	mov	r5, r0
   d421e:	da63      	bge.n	d42e8 <_Z20displaySensorDetailsv+0x108>
            t = print('-');
   d4220:	212d      	movs	r1, #45	; 0x2d
   d4222:	f002 ffad 	bl	d7180 <_ZN5Print5printEc>
            val = -n;
   d4226:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4228:	220a      	movs	r2, #10
   d422a:	4628      	mov	r0, r5
   d422c:	f002 ffc7 	bl	d71be <_ZN5Print11printNumberEmh>
        n += println();
   d4230:	4628      	mov	r0, r5
   d4232:	f002 ffac 	bl	d718e <_ZN5Print7printlnEv>
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
   d4236:	f003 fa7b 	bl	d7730 <_Z16_fetch_usbserialv>
   d423a:	4931      	ldr	r1, [pc, #196]	; (d4300 <_Z20displaySensorDetailsv+0x120>)
   d423c:	f002 ff9c 	bl	d7178 <_ZN5Print5printEPKc>
   d4240:	f003 fa76 	bl	d7730 <_Z16_fetch_usbserialv>
   d4244:	9c04      	ldr	r4, [sp, #16]
        if (n < 0 && base == 10) {
   d4246:	2c00      	cmp	r4, #0
   d4248:	4605      	mov	r5, r0
   d424a:	da4f      	bge.n	d42ec <_Z20displaySensorDetailsv+0x10c>
            t = print('-');
   d424c:	212d      	movs	r1, #45	; 0x2d
   d424e:	f002 ff97 	bl	d7180 <_ZN5Print5printEc>
            val = -n;
   d4252:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d4254:	220a      	movs	r2, #10
   d4256:	4628      	mov	r0, r5
   d4258:	f002 ffb1 	bl	d71be <_ZN5Print11printNumberEmh>
        n += println();
   d425c:	4628      	mov	r0, r5
   d425e:	f002 ff96 	bl	d718e <_ZN5Print7printlnEv>
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" xxx");
   d4262:	f003 fa65 	bl	d7730 <_Z16_fetch_usbserialv>
   d4266:	4927      	ldr	r1, [pc, #156]	; (d4304 <_Z20displaySensorDetailsv+0x124>)
   d4268:	f002 ff86 	bl	d7178 <_ZN5Print5printEPKc>
   d426c:	f003 fa60 	bl	d7730 <_Z16_fetch_usbserialv>
   d4270:	ed9d 0a06 	vldr	s0, [sp, #24]
   d4274:	2102      	movs	r1, #2
   d4276:	f003 f889 	bl	d738c <_ZN5Print5printEfi>
   d427a:	f003 fa59 	bl	d7730 <_Z16_fetch_usbserialv>
   d427e:	4922      	ldr	r1, [pc, #136]	; (d4308 <_Z20displaySensorDetailsv+0x128>)
   d4280:	f002 ff91 	bl	d71a6 <_ZN5Print7printlnEPKc>
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" xxx");
   d4284:	f003 fa54 	bl	d7730 <_Z16_fetch_usbserialv>
   d4288:	4920      	ldr	r1, [pc, #128]	; (d430c <_Z20displaySensorDetailsv+0x12c>)
   d428a:	f002 ff75 	bl	d7178 <_ZN5Print5printEPKc>
   d428e:	f003 fa4f 	bl	d7730 <_Z16_fetch_usbserialv>
   d4292:	ed9d 0a07 	vldr	s0, [sp, #28]
   d4296:	2102      	movs	r1, #2
   d4298:	f003 f878 	bl	d738c <_ZN5Print5printEfi>
   d429c:	f003 fa48 	bl	d7730 <_Z16_fetch_usbserialv>
   d42a0:	4919      	ldr	r1, [pc, #100]	; (d4308 <_Z20displaySensorDetailsv+0x128>)
   d42a2:	f002 ff80 	bl	d71a6 <_ZN5Print7printlnEPKc>
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" xxx");
   d42a6:	f003 fa43 	bl	d7730 <_Z16_fetch_usbserialv>
   d42aa:	4919      	ldr	r1, [pc, #100]	; (d4310 <_Z20displaySensorDetailsv+0x130>)
   d42ac:	f002 ff64 	bl	d7178 <_ZN5Print5printEPKc>
   d42b0:	f003 fa3e 	bl	d7730 <_Z16_fetch_usbserialv>
   d42b4:	ed9d 0a08 	vldr	s0, [sp, #32]
   d42b8:	2102      	movs	r1, #2
   d42ba:	f003 f867 	bl	d738c <_ZN5Print5printEfi>
   d42be:	f003 fa37 	bl	d7730 <_Z16_fetch_usbserialv>
   d42c2:	4911      	ldr	r1, [pc, #68]	; (d4308 <_Z20displaySensorDetailsv+0x128>)
   d42c4:	f002 ff6f 	bl	d71a6 <_ZN5Print7printlnEPKc>
  Serial.println("------------------------------------");
   d42c8:	f003 fa32 	bl	d7730 <_Z16_fetch_usbserialv>
   d42cc:	4909      	ldr	r1, [pc, #36]	; (d42f4 <_Z20displaySensorDetailsv+0x114>)
   d42ce:	f002 ff6a 	bl	d71a6 <_ZN5Print7printlnEPKc>
  Serial.println("");
   d42d2:	f003 fa2d 	bl	d7730 <_Z16_fetch_usbserialv>
   d42d6:	490f      	ldr	r1, [pc, #60]	; (d4314 <_Z20displaySensorDetailsv+0x134>)
   d42d8:	f002 ff65 	bl	d71a6 <_ZN5Print7printlnEPKc>
  delay(500);
   d42dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d42e0:	f003 f8aa 	bl	d7438 <delay>
   d42e4:	b00b      	add	sp, #44	; 0x2c
   d42e6:	bd30      	pop	{r4, r5, pc}
            val = n;
   d42e8:	4621      	mov	r1, r4
   d42ea:	e79d      	b.n	d4228 <_Z20displaySensorDetailsv+0x48>
   d42ec:	4621      	mov	r1, r4
   d42ee:	e7b1      	b.n	d4254 <_Z20displaySensorDetailsv+0x74>
   d42f0:	2003e4fc 	.word	0x2003e4fc
   d42f4:	000da18a 	.word	0x000da18a
   d42f8:	000da1af 	.word	0x000da1af
   d42fc:	000da1be 	.word	0x000da1be
   d4300:	000da1cd 	.word	0x000da1cd
   d4304:	000da1dc 	.word	0x000da1dc
   d4308:	000da1eb 	.word	0x000da1eb
   d430c:	000da1f0 	.word	0x000da1f0
   d4310:	000da1ff 	.word	0x000da1ff
   d4314:	000da279 	.word	0x000da279

000d4318 <_GLOBAL__sub_I_i2ceeprom>:
   d4318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
Adafruit_EEPROM_I2C i2ceeprom;
   d431a:	4810      	ldr	r0, [pc, #64]	; (d435c <_GLOBAL__sub_I_i2ceeprom+0x44>)
   d431c:	f002 fb84 	bl	d6a28 <_ZN19Adafruit_EEPROM_I2CC1Ev>
Adafruit_BME280 bme; // I2C
   d4320:	480f      	ldr	r0, [pc, #60]	; (d4360 <_GLOBAL__sub_I_i2ceeprom+0x48>)
   d4322:	f000 fc09 	bl	d4b38 <_ZN15Adafruit_BME280C1Ev>
Adafruit_SH1107 display = Adafruit_SH1107(64, 128, &Wire);
   d4326:	f003 fcb1 	bl	d7c8c <_Z19__fetch_global_Wirev>
   d432a:	4a0e      	ldr	r2, [pc, #56]	; (d4364 <_GLOBAL__sub_I_i2ceeprom+0x4c>)
   d432c:	490e      	ldr	r1, [pc, #56]	; (d4368 <_GLOBAL__sub_I_i2ceeprom+0x50>)
   d432e:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4332:	f04f 32ff 	mov.w	r2, #4294967295
   d4336:	4603      	mov	r3, r0
   d4338:	9200      	str	r2, [sp, #0]
   d433a:	2140      	movs	r1, #64	; 0x40
   d433c:	2280      	movs	r2, #128	; 0x80
   d433e:	480b      	ldr	r0, [pc, #44]	; (d436c <_GLOBAL__sub_I_i2ceeprom+0x54>)
   d4340:	f002 faec 	bl	d691c <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d4344:	f003 fca2 	bl	d7c8c <_Z19__fetch_global_Wirev>
   d4348:	4603      	mov	r3, r0
   d434a:	4809      	ldr	r0, [pc, #36]	; (d4370 <_GLOBAL__sub_I_i2ceeprom+0x58>)
   d434c:	2228      	movs	r2, #40	; 0x28
   d434e:	2137      	movs	r1, #55	; 0x37
   d4350:	b005      	add	sp, #20
   d4352:	f85d eb04 	ldr.w	lr, [sp], #4
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   d4356:	f001 ba91 	b.w	d587c <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
   d435a:	bf00      	nop
   d435c:	2003e574 	.word	0x2003e574
   d4360:	2003e4b8 	.word	0x2003e4b8
   d4364:	00061a80 	.word	0x00061a80
   d4368:	000186a0 	.word	0x000186a0
   d436c:	2003e518 	.word	0x2003e518
   d4370:	2003e4fc 	.word	0x2003e4fc

000d4374 <_Z13displayValuesv>:
void displayValues() {
   d4374:	b538      	push	{r3, r4, r5, lr}
    display.clearDisplay();
   d4376:	4c3d      	ldr	r4, [pc, #244]	; (d446c <_Z13displayValuesv+0xf8>)
    display.print(bme.readTemperature()*1.8F + 32.);
   d4378:	4d3d      	ldr	r5, [pc, #244]	; (d4470 <_Z13displayValuesv+0xfc>)
    display.clearDisplay();
   d437a:	4620      	mov	r0, r4
   d437c:	f001 fd78 	bl	d5e70 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d4380:	4620      	mov	r0, r4
   d4382:	f002 f9e8 	bl	d6756 <_ZN15Adafruit_SH110X7displayEv>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
   d4386:	2300      	movs	r3, #0
    display.print("Temp. = ");
   d4388:	493a      	ldr	r1, [pc, #232]	; (d4474 <_Z13displayValuesv+0x100>)
   d438a:	6123      	str	r3, [r4, #16]
   d438c:	4620      	mov	r0, r4
   d438e:	f002 fef3 	bl	d7178 <_ZN5Print5printEPKc>
    display.print(bme.readTemperature()*1.8F + 32.);
   d4392:	4628      	mov	r0, r5
   d4394:	f000 fca4 	bl	d4ce0 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4398:	eddf 7a37 	vldr	s15, [pc, #220]	; d4478 <_Z13displayValuesv+0x104>
   d439c:	ee60 7a27 	vmul.f32	s15, s0, s15
   d43a0:	ee17 0a90 	vmov	r0, s15
   d43a4:	f004 ff9e 	bl	d92e4 <__aeabi_f2d>
   d43a8:	4b34      	ldr	r3, [pc, #208]	; (d447c <_Z13displayValuesv+0x108>)
   d43aa:	2200      	movs	r2, #0
   d43ac:	f004 fe3c 	bl	d9028 <__adddf3>
   d43b0:	ec41 0b10 	vmov	d0, r0, r1
   d43b4:	2102      	movs	r1, #2
   d43b6:	4620      	mov	r0, r4
   d43b8:	f002 fff7 	bl	d73aa <_ZN5Print5printEdi>
    display.println(" °F");
   d43bc:	4930      	ldr	r1, [pc, #192]	; (d4480 <_Z13displayValuesv+0x10c>)
   d43be:	4620      	mov	r0, r4
   d43c0:	f002 fef1 	bl	d71a6 <_ZN5Print7printlnEPKc>
    display.print("Press. = ");
   d43c4:	492f      	ldr	r1, [pc, #188]	; (d4484 <_Z13displayValuesv+0x110>)
   d43c6:	4620      	mov	r0, r4
   d43c8:	f002 fed6 	bl	d7178 <_ZN5Print5printEPKc>
    display.print(bme.readPressure() / 101325.0F * 760.0F);
   d43cc:	4628      	mov	r0, r5
   d43ce:	f000 fcb5 	bl	d4d3c <_ZN15Adafruit_BME28012readPressureEv>
   d43d2:	eddf 7a2d 	vldr	s15, [pc, #180]	; d4488 <_Z13displayValuesv+0x114>
   d43d6:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d43da:	2102      	movs	r1, #2
   d43dc:	4620      	mov	r0, r4
   d43de:	ed9f 0a2b 	vldr	s0, [pc, #172]	; d448c <_Z13displayValuesv+0x118>
   d43e2:	ee27 0a00 	vmul.f32	s0, s14, s0
   d43e6:	f002 ffd1 	bl	d738c <_ZN5Print5printEfi>
    display.println(" mmHg");
   d43ea:	4929      	ldr	r1, [pc, #164]	; (d4490 <_Z13displayValuesv+0x11c>)
   d43ec:	4620      	mov	r0, r4
   d43ee:	f002 feda 	bl	d71a6 <_ZN5Print7printlnEPKc>
    display.print("Altitude = ");
   d43f2:	4928      	ldr	r1, [pc, #160]	; (d4494 <_Z13displayValuesv+0x120>)
   d43f4:	4620      	mov	r0, r4
   d43f6:	f002 febf 	bl	d7178 <_ZN5Print5printEPKc>
    display.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d43fa:	4628      	mov	r0, r5
   d43fc:	ed9f 0a26 	vldr	s0, [pc, #152]	; d4498 <_Z13displayValuesv+0x124>
   d4400:	f000 fd76 	bl	d4ef0 <_ZN15Adafruit_BME28012readAltitudeEf>
   d4404:	2102      	movs	r1, #2
   d4406:	4620      	mov	r0, r4
   d4408:	f002 ffc0 	bl	d738c <_ZN5Print5printEfi>
    display.println(" m");
   d440c:	4923      	ldr	r1, [pc, #140]	; (d449c <_Z13displayValuesv+0x128>)
   d440e:	4620      	mov	r0, r4
   d4410:	f002 fec9 	bl	d71a6 <_ZN5Print7printlnEPKc>
    display.print("Humidity = ");
   d4414:	4922      	ldr	r1, [pc, #136]	; (d44a0 <_Z13displayValuesv+0x12c>)
   d4416:	4620      	mov	r0, r4
   d4418:	f002 feae 	bl	d7178 <_ZN5Print5printEPKc>
    display.print(bme.readHumidity());
   d441c:	4628      	mov	r0, r5
   d441e:	f000 fe07 	bl	d5030 <_ZN15Adafruit_BME28012readHumidityEv>
   d4422:	2102      	movs	r1, #2
   d4424:	4620      	mov	r0, r4
   d4426:	f002 ffb1 	bl	d738c <_ZN5Print5printEfi>
    display.println(" %");
   d442a:	491e      	ldr	r1, [pc, #120]	; (d44a4 <_Z13displayValuesv+0x130>)
   d442c:	4620      	mov	r0, r4
   d442e:	f002 feba 	bl	d71a6 <_ZN5Print7printlnEPKc>
    Serial.println();
   d4432:	f003 f97d 	bl	d7730 <_Z16_fetch_usbserialv>
   d4436:	f002 feaa 	bl	d718e <_ZN5Print7printlnEv>
    display.println("Marrie is great!");
   d443a:	491b      	ldr	r1, [pc, #108]	; (d44a8 <_Z13displayValuesv+0x134>)
   d443c:	4620      	mov	r0, r4
   d443e:	f002 feb2 	bl	d71a6 <_ZN5Print7printlnEPKc>
    Serial.println();
   d4442:	f003 f975 	bl	d7730 <_Z16_fetch_usbserialv>
   d4446:	f002 fea2 	bl	d718e <_ZN5Print7printlnEv>
    display.print("Compass heading");
   d444a:	4918      	ldr	r1, [pc, #96]	; (d44ac <_Z13displayValuesv+0x138>)
   d444c:	4620      	mov	r0, r4
   d444e:	f002 fe93 	bl	d7178 <_ZN5Print5printEPKc>
    display.print(compass_heading);
   d4452:	4b17      	ldr	r3, [pc, #92]	; (d44b0 <_Z13displayValuesv+0x13c>)
   d4454:	4620      	mov	r0, r4
   d4456:	ed93 0a00 	vldr	s0, [r3]
   d445a:	2102      	movs	r1, #2
   d445c:	f002 ff96 	bl	d738c <_ZN5Print5printEfi>
  display.display(); // actually display all of the above
   d4460:	4620      	mov	r0, r4
  }
   d4462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.display(); // actually display all of the above
   d4466:	f002 b976 	b.w	d6756 <_ZN15Adafruit_SH110X7displayEv>
   d446a:	bf00      	nop
   d446c:	2003e518 	.word	0x2003e518
   d4470:	2003e4b8 	.word	0x2003e4b8
   d4474:	000da20e 	.word	0x000da20e
   d4478:	3fe66666 	.word	0x3fe66666
   d447c:	40400000 	.word	0x40400000
   d4480:	000da217 	.word	0x000da217
   d4484:	000da21c 	.word	0x000da21c
   d4488:	47c5e680 	.word	0x47c5e680
   d448c:	443e0000 	.word	0x443e0000
   d4490:	000da15e 	.word	0x000da15e
   d4494:	000da16c 	.word	0x000da16c
   d4498:	447d5000 	.word	0x447d5000
   d449c:	000da178 	.word	0x000da178
   d44a0:	000da17b 	.word	0x000da17b
   d44a4:	000da187 	.word	0x000da187
   d44a8:	000da226 	.word	0x000da226
   d44ac:	000da237 	.word	0x000da237
   d44b0:	2003e510 	.word	0x2003e510
   d44b4:	00000000 	.word	0x00000000

000d44b8 <loop>:
void loop(void) {
   d44b8:	b510      	push	{r4, lr}
   d44ba:	ed2d 8b02 	vpush	{d8}
   d44be:	b096      	sub	sp, #88	; 0x58
  bno.getEvent(&event);
   d44c0:	a90d      	add	r1, sp, #52	; 0x34
   d44c2:	48ad      	ldr	r0, [pc, #692]	; (d4778 <loop+0x2c0>)
   d44c4:	f001 fb86 	bl	d5bd4 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
printValues();
   d44c8:	f7ff fdfe 	bl	d40c8 <_Z11printValuesv>
  displayValues();
   d44cc:	f7ff ff52 	bl	d4374 <_Z13displayValuesv>
  delay(delayTime);
   d44d0:	4baa      	ldr	r3, [pc, #680]	; (d477c <loop+0x2c4>)
   d44d2:	6818      	ldr	r0, [r3, #0]
   d44d4:	f002 ffb0 	bl	d7438 <delay>
  if(!digitalRead(BUTTON_A)) display.print("A");
   d44d8:	2004      	movs	r0, #4
   d44da:	f003 fbab 	bl	d7c34 <digitalRead>
   d44de:	b918      	cbnz	r0, d44e8 <loop+0x30>
   d44e0:	49a7      	ldr	r1, [pc, #668]	; (d4780 <loop+0x2c8>)
   d44e2:	48a8      	ldr	r0, [pc, #672]	; (d4784 <loop+0x2cc>)
   d44e4:	f002 fe48 	bl	d7178 <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_B)) display.print("B");
   d44e8:	2003      	movs	r0, #3
   d44ea:	f003 fba3 	bl	d7c34 <digitalRead>
   d44ee:	b918      	cbnz	r0, d44f8 <loop+0x40>
   d44f0:	49a5      	ldr	r1, [pc, #660]	; (d4788 <loop+0x2d0>)
   d44f2:	48a4      	ldr	r0, [pc, #656]	; (d4784 <loop+0x2cc>)
   d44f4:	f002 fe40 	bl	d7178 <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_C)) display.print("C");
   d44f8:	2002      	movs	r0, #2
   d44fa:	f003 fb9b 	bl	d7c34 <digitalRead>
   d44fe:	b918      	cbnz	r0, d4508 <loop+0x50>
   d4500:	49a2      	ldr	r1, [pc, #648]	; (d478c <loop+0x2d4>)
   d4502:	48a0      	ldr	r0, [pc, #640]	; (d4784 <loop+0x2cc>)
   d4504:	f002 fe38 	bl	d7178 <_ZN5Print5printEPKc>
  delay(10);
   d4508:	200a      	movs	r0, #10
   d450a:	f002 ff95 	bl	d7438 <delay>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d450e:	f002 faed 	bl	d6aec <os_thread_yield>
  display.display();
   d4512:	489c      	ldr	r0, [pc, #624]	; (d4784 <loop+0x2cc>)
  Serial.print(360 - (float)event.orientation.x);
   d4514:	ed9f 8a9e 	vldr	s16, [pc, #632]	; d4790 <loop+0x2d8>
  display.display();
   d4518:	f002 f91d 	bl	d6756 <_ZN15Adafruit_SH110X7displayEv>
  Serial.print(F("Orientation: "));
   d451c:	f003 f908 	bl	d7730 <_Z16_fetch_usbserialv>
   d4520:	499c      	ldr	r1, [pc, #624]	; (d4794 <loop+0x2dc>)
   d4522:	f002 fe30 	bl	d7186 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(360 - (float)event.orientation.x);
   d4526:	f003 f903 	bl	d7730 <_Z16_fetch_usbserialv>
   d452a:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   d452e:	2102      	movs	r1, #2
   d4530:	ee38 0a40 	vsub.f32	s0, s16, s0
   d4534:	f002 ff2a 	bl	d738c <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d4538:	f003 f8fa 	bl	d7730 <_Z16_fetch_usbserialv>
   d453c:	4996      	ldr	r1, [pc, #600]	; (d4798 <loop+0x2e0>)
   d453e:	f002 fe22 	bl	d7186 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.y);
   d4542:	f003 f8f5 	bl	d7730 <_Z16_fetch_usbserialv>
   d4546:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   d454a:	2102      	movs	r1, #2
   d454c:	f002 ff1e 	bl	d738c <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d4550:	f003 f8ee 	bl	d7730 <_Z16_fetch_usbserialv>
   d4554:	4990      	ldr	r1, [pc, #576]	; (d4798 <loop+0x2e0>)
   d4556:	f002 fe16 	bl	d7186 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.z);
   d455a:	f003 f8e9 	bl	d7730 <_Z16_fetch_usbserialv>
   d455e:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   d4562:	2102      	movs	r1, #2
   d4564:	f002 ff12 	bl	d738c <_ZN5Print5printEfi>
  Serial.println(F(""));
   d4568:	f003 f8e2 	bl	d7730 <_Z16_fetch_usbserialv>
   d456c:	498b      	ldr	r1, [pc, #556]	; (d479c <loop+0x2e4>)
   d456e:	f002 fe24 	bl	d71ba <_ZN5Print7printlnEPK19__FlashStringHelper>
  imu::Quaternion quat = bno.getQuat();
   d4572:	4881      	ldr	r0, [pc, #516]	; (d4778 <loop+0x2c0>)
   d4574:	f001 fa62 	bl	d5a3c <_ZN15Adafruit_BNO0557getQuatEv>
   d4578:	ed8d 0b04 	vstr	d0, [sp, #16]
   d457c:	ed8d 1b06 	vstr	d1, [sp, #24]
   d4580:	ed8d 2b08 	vstr	d2, [sp, #32]
   d4584:	ed8d 3b0a 	vstr	d3, [sp, #40]	; 0x28
  Serial.print(F("Quaternion: "));
   d4588:	f003 f8d2 	bl	d7730 <_Z16_fetch_usbserialv>
   d458c:	4984      	ldr	r1, [pc, #528]	; (d47a0 <loop+0x2e8>)
   d458e:	f002 fdfa 	bl	d7186 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.w());
   d4592:	f003 f8cd 	bl	d7730 <_Z16_fetch_usbserialv>
   d4596:	4604      	mov	r4, r0
   d4598:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d459c:	f005 f9f2 	bl	d9984 <__aeabi_d2f>
   d45a0:	2102      	movs	r1, #2
   d45a2:	ee00 0a10 	vmov	s0, r0
   d45a6:	4620      	mov	r0, r4
   d45a8:	f002 fef0 	bl	d738c <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d45ac:	f003 f8c0 	bl	d7730 <_Z16_fetch_usbserialv>
   d45b0:	4979      	ldr	r1, [pc, #484]	; (d4798 <loop+0x2e0>)
   d45b2:	f002 fde8 	bl	d7186 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.x());
   d45b6:	f003 f8bb 	bl	d7730 <_Z16_fetch_usbserialv>
   d45ba:	4604      	mov	r4, r0
   d45bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d45c0:	f005 f9e0 	bl	d9984 <__aeabi_d2f>
   d45c4:	2102      	movs	r1, #2
   d45c6:	ee00 0a10 	vmov	s0, r0
   d45ca:	4620      	mov	r0, r4
   d45cc:	f002 fede 	bl	d738c <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d45d0:	f003 f8ae 	bl	d7730 <_Z16_fetch_usbserialv>
   d45d4:	4970      	ldr	r1, [pc, #448]	; (d4798 <loop+0x2e0>)
   d45d6:	f002 fdd6 	bl	d7186 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.y());
   d45da:	f003 f8a9 	bl	d7730 <_Z16_fetch_usbserialv>
   d45de:	4604      	mov	r4, r0
   d45e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d45e4:	f005 f9ce 	bl	d9984 <__aeabi_d2f>
   d45e8:	2102      	movs	r1, #2
   d45ea:	ee00 0a10 	vmov	s0, r0
   d45ee:	4620      	mov	r0, r4
   d45f0:	f002 fecc 	bl	d738c <_ZN5Print5printEfi>
  Serial.print(F(", "));
   d45f4:	f003 f89c 	bl	d7730 <_Z16_fetch_usbserialv>
   d45f8:	4967      	ldr	r1, [pc, #412]	; (d4798 <loop+0x2e0>)
   d45fa:	f002 fdc4 	bl	d7186 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.z());
   d45fe:	f003 f897 	bl	d7730 <_Z16_fetch_usbserialv>
   d4602:	4604      	mov	r4, r0
   d4604:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d4608:	f005 f9bc 	bl	d9984 <__aeabi_d2f>
   d460c:	2102      	movs	r1, #2
   d460e:	ee00 0a10 	vmov	s0, r0
   d4612:	4620      	mov	r0, r4
   d4614:	f002 feba 	bl	d738c <_ZN5Print5printEfi>
  Serial.println(F(""));
   d4618:	f003 f88a 	bl	d7730 <_Z16_fetch_usbserialv>
   d461c:	495f      	ldr	r1, [pc, #380]	; (d479c <loop+0x2e4>)
   d461e:	4c61      	ldr	r4, [pc, #388]	; (d47a4 <loop+0x2ec>)
   d4620:	f002 fdcb 	bl	d71ba <_ZN5Print7printlnEPK19__FlashStringHelper>
  uint8_t sys, gyro, accel, mag = 0;
   d4624:	2300      	movs	r3, #0
   d4626:	f88d 300f 	strb.w	r3, [sp, #15]
  bno.getCalibration(&sys, &gyro, &accel, &mag);
   d462a:	f10d 030f 	add.w	r3, sp, #15
   d462e:	f10d 020d 	add.w	r2, sp, #13
   d4632:	a903      	add	r1, sp, #12
   d4634:	9300      	str	r3, [sp, #0]
   d4636:	4850      	ldr	r0, [pc, #320]	; (d4778 <loop+0x2c0>)
   d4638:	f10d 030e 	add.w	r3, sp, #14
   d463c:	f001 f9d7 	bl	d59ee <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
  Serial.print(F("Calibration: "));
   d4640:	f003 f876 	bl	d7730 <_Z16_fetch_usbserialv>
   d4644:	4958      	ldr	r1, [pc, #352]	; (d47a8 <loop+0x2f0>)
   d4646:	f002 fd9e 	bl	d7186 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(sys, DEC);
   d464a:	f003 f871 	bl	d7730 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d464e:	220a      	movs	r2, #10
   d4650:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d4654:	f002 fdb3 	bl	d71be <_ZN5Print11printNumberEmh>
  Serial.print(F(", "));
   d4658:	f003 f86a 	bl	d7730 <_Z16_fetch_usbserialv>
   d465c:	494e      	ldr	r1, [pc, #312]	; (d4798 <loop+0x2e0>)
   d465e:	f002 fd92 	bl	d7186 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(gyro, DEC);
   d4662:	f003 f865 	bl	d7730 <_Z16_fetch_usbserialv>
   d4666:	220a      	movs	r2, #10
   d4668:	f89d 100d 	ldrb.w	r1, [sp, #13]
   d466c:	f002 fda7 	bl	d71be <_ZN5Print11printNumberEmh>
  Serial.print(F(", "));
   d4670:	f003 f85e 	bl	d7730 <_Z16_fetch_usbserialv>
   d4674:	4948      	ldr	r1, [pc, #288]	; (d4798 <loop+0x2e0>)
   d4676:	f002 fd86 	bl	d7186 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(accel, DEC);
   d467a:	f003 f859 	bl	d7730 <_Z16_fetch_usbserialv>
   d467e:	220a      	movs	r2, #10
   d4680:	f89d 100e 	ldrb.w	r1, [sp, #14]
   d4684:	f002 fd9b 	bl	d71be <_ZN5Print11printNumberEmh>
  Serial.print(F(", "));
   d4688:	f003 f852 	bl	d7730 <_Z16_fetch_usbserialv>
   d468c:	4942      	ldr	r1, [pc, #264]	; (d4798 <loop+0x2e0>)
   d468e:	f002 fd7a 	bl	d7186 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(mag, DEC);
   d4692:	f003 f84d 	bl	d7730 <_Z16_fetch_usbserialv>
   d4696:	220a      	movs	r2, #10
   d4698:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d469c:	f002 fd8f 	bl	d71be <_ZN5Print11printNumberEmh>
  Serial.println(F(""));
   d46a0:	f003 f846 	bl	d7730 <_Z16_fetch_usbserialv>
   d46a4:	493d      	ldr	r1, [pc, #244]	; (d479c <loop+0x2e4>)
   d46a6:	f002 fd88 	bl	d71ba <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("\n\n");
   d46aa:	f003 f841 	bl	d7730 <_Z16_fetch_usbserialv>
   d46ae:	493f      	ldr	r1, [pc, #252]	; (d47ac <loop+0x2f4>)
   d46b0:	f002 fd79 	bl	d71a6 <_ZN5Print7printlnEPKc>
  bno.getEvent(&event);
   d46b4:	a90d      	add	r1, sp, #52	; 0x34
   d46b6:	4830      	ldr	r0, [pc, #192]	; (d4778 <loop+0x2c0>)
   d46b8:	f001 fa8c 	bl	d5bd4 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  Serial.print("X: ");
   d46bc:	f003 f838 	bl	d7730 <_Z16_fetch_usbserialv>
   d46c0:	493b      	ldr	r1, [pc, #236]	; (d47b0 <loop+0x2f8>)
   d46c2:	f002 fd59 	bl	d7178 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.x, 4);
   d46c6:	f003 f833 	bl	d7730 <_Z16_fetch_usbserialv>
   d46ca:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   d46ce:	2104      	movs	r1, #4
   d46d0:	f002 fe5c 	bl	d738c <_ZN5Print5printEfi>
  Serial.print("\tY: ");
   d46d4:	f003 f82c 	bl	d7730 <_Z16_fetch_usbserialv>
   d46d8:	4936      	ldr	r1, [pc, #216]	; (d47b4 <loop+0x2fc>)
   d46da:	f002 fd4d 	bl	d7178 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.y, 4);
   d46de:	f003 f827 	bl	d7730 <_Z16_fetch_usbserialv>
   d46e2:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   d46e6:	2104      	movs	r1, #4
   d46e8:	f002 fe50 	bl	d738c <_ZN5Print5printEfi>
  Serial.print("\tZ: ");
   d46ec:	f003 f820 	bl	d7730 <_Z16_fetch_usbserialv>
   d46f0:	4931      	ldr	r1, [pc, #196]	; (d47b8 <loop+0x300>)
   d46f2:	f002 fd41 	bl	d7178 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.z, 4);
   d46f6:	f003 f81b 	bl	d7730 <_Z16_fetch_usbserialv>
   d46fa:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   d46fe:	2104      	movs	r1, #4
   d4700:	f002 fe44 	bl	d738c <_ZN5Print5printEfi>
  Serial.println("");
   d4704:	f003 f814 	bl	d7730 <_Z16_fetch_usbserialv>
   d4708:	4924      	ldr	r1, [pc, #144]	; (d479c <loop+0x2e4>)
   d470a:	f002 fd4c 	bl	d71a6 <_ZN5Print7printlnEPKc>
  Serial.println("\n\n");
   d470e:	f003 f80f 	bl	d7730 <_Z16_fetch_usbserialv>
   d4712:	4926      	ldr	r1, [pc, #152]	; (d47ac <loop+0x2f4>)
   d4714:	f002 fd47 	bl	d71a6 <_ZN5Print7printlnEPKc>
  compass_heading = event.orientation.x + 51.6;
   d4718:	9812      	ldr	r0, [sp, #72]	; 0x48
   d471a:	f004 fde3 	bl	d92e4 <__aeabi_f2d>
   d471e:	a314      	add	r3, pc, #80	; (adr r3, d4770 <loop+0x2b8>)
   d4720:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4724:	f004 fc80 	bl	d9028 <__adddf3>
   d4728:	f005 f92c 	bl	d9984 <__aeabi_d2f>
   d472c:	ee07 0a90 	vmov	s15, r0
  if(compass_heading > 360) {
   d4730:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    compass_heading = compass_heading - 360;
   d4738:	bfc8      	it	gt
   d473a:	ee77 7ac8 	vsubgt.f32	s15, s15, s16
   d473e:	edc4 7a00 	vstr	s15, [r4]
  Serial.print("compass heading:  ");
   d4742:	f002 fff5 	bl	d7730 <_Z16_fetch_usbserialv>
   d4746:	491d      	ldr	r1, [pc, #116]	; (d47bc <loop+0x304>)
   d4748:	f002 fd16 	bl	d7178 <_ZN5Print5printEPKc>
  Serial.print(compass_heading, 4);
   d474c:	f002 fff0 	bl	d7730 <_Z16_fetch_usbserialv>
   d4750:	ed94 0a00 	vldr	s0, [r4]
   d4754:	2104      	movs	r1, #4
   d4756:	f002 fe19 	bl	d738c <_ZN5Print5printEfi>
  delay(BNO055_SAMPLERATE_DELAY_MS);
   d475a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d475e:	f002 fe6b 	bl	d7438 <delay>
}
   d4762:	b016      	add	sp, #88	; 0x58
   d4764:	ecbd 8b02 	vpop	{d8}
   d4768:	bd10      	pop	{r4, pc}
   d476a:	bf00      	nop
   d476c:	f3af 8000 	nop.w
   d4770:	cccccccd 	.word	0xcccccccd
   d4774:	4049cccc 	.word	0x4049cccc
   d4778:	2003e4fc 	.word	0x2003e4fc
   d477c:	2003e514 	.word	0x2003e514
   d4780:	000da247 	.word	0x000da247
   d4784:	2003e518 	.word	0x2003e518
   d4788:	000da552 	.word	0x000da552
   d478c:	000da249 	.word	0x000da249
   d4790:	43b40000 	.word	0x43b40000
   d4794:	000da24b 	.word	0x000da24b
   d4798:	000da259 	.word	0x000da259
   d479c:	000da279 	.word	0x000da279
   d47a0:	000da25c 	.word	0x000da25c
   d47a4:	2003e510 	.word	0x2003e510
   d47a8:	000da269 	.word	0x000da269
   d47ac:	000da277 	.word	0x000da277
   d47b0:	000da27a 	.word	0x000da27a
   d47b4:	000da27e 	.word	0x000da27e
   d47b8:	000da283 	.word	0x000da283
   d47bc:	000da288 	.word	0x000da288

000d47c0 <setup>:
void setup(void) {
   d47c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.begin(115200);
   d47c4:	f002 ffb4 	bl	d7730 <_Z16_fetch_usbserialv>
   d47c8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d47cc:	f002 ff9e 	bl	d770c <_ZN9USBSerial5beginEl>
  nDevices = 0;
   d47d0:	4d98      	ldr	r5, [pc, #608]	; (d4a34 <setup+0x274>)
  for (address = 1; address < 127; address++ )
   d47d2:	4c99      	ldr	r4, [pc, #612]	; (d4a38 <setup+0x278>)
    error = Wire.endTransmission();
   d47d4:	4f99      	ldr	r7, [pc, #612]	; (d4a3c <setup+0x27c>)
      Serial.print("Unknown error at address 0x");
   d47d6:	f8df 82dc 	ldr.w	r8, [pc, #732]	; d4ab4 <setup+0x2f4>
        Serial.print("0");
   d47da:	4e99      	ldr	r6, [pc, #612]	; (d4a40 <setup+0x280>)
Serial.println("Scanning...");
   d47dc:	f002 ffa8 	bl	d7730 <_Z16_fetch_usbserialv>
   d47e0:	4998      	ldr	r1, [pc, #608]	; (d4a44 <setup+0x284>)
   d47e2:	f002 fce0 	bl	d71a6 <_ZN5Print7printlnEPKc>
  nDevices = 0;
   d47e6:	2300      	movs	r3, #0
   d47e8:	602b      	str	r3, [r5, #0]
  for (address = 1; address < 127; address++ )
   d47ea:	2301      	movs	r3, #1
   d47ec:	7023      	strb	r3, [r4, #0]
    Wire.beginTransmission(address);
   d47ee:	f003 fa4d 	bl	d7c8c <_Z19__fetch_global_Wirev>
   d47f2:	7821      	ldrb	r1, [r4, #0]
   d47f4:	f003 f8fc 	bl	d79f0 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d47f8:	f003 fa48 	bl	d7c8c <_Z19__fetch_global_Wirev>
   d47fc:	f003 f900 	bl	d7a00 <_ZN7TwoWire15endTransmissionEv>
   d4800:	7038      	strb	r0, [r7, #0]
    if (error == 0)
   d4802:	2800      	cmp	r0, #0
   d4804:	f040 80c7 	bne.w	d4996 <setup+0x1d6>
      Serial.print("I2C device found at address 0x");
   d4808:	f002 ff92 	bl	d7730 <_Z16_fetch_usbserialv>
   d480c:	498e      	ldr	r1, [pc, #568]	; (d4a48 <setup+0x288>)
   d480e:	f002 fcb3 	bl	d7178 <_ZN5Print5printEPKc>
      if (address < 16)
   d4812:	7823      	ldrb	r3, [r4, #0]
   d4814:	2b0f      	cmp	r3, #15
   d4816:	d804      	bhi.n	d4822 <setup+0x62>
        Serial.print("0");
   d4818:	f002 ff8a 	bl	d7730 <_Z16_fetch_usbserialv>
   d481c:	4631      	mov	r1, r6
   d481e:	f002 fcab 	bl	d7178 <_ZN5Print5printEPKc>
      Serial.print(address, HEX);
   d4822:	f002 ff85 	bl	d7730 <_Z16_fetch_usbserialv>
   d4826:	7821      	ldrb	r1, [r4, #0]
   d4828:	2210      	movs	r2, #16
   d482a:	f002 fcc8 	bl	d71be <_ZN5Print11printNumberEmh>
      Serial.println("  !");
   d482e:	f002 ff7f 	bl	d7730 <_Z16_fetch_usbserialv>
   d4832:	4986      	ldr	r1, [pc, #536]	; (d4a4c <setup+0x28c>)
   d4834:	f002 fcb7 	bl	d71a6 <_ZN5Print7printlnEPKc>
      nDevices++;
   d4838:	682b      	ldr	r3, [r5, #0]
   d483a:	3301      	adds	r3, #1
   d483c:	602b      	str	r3, [r5, #0]
  for (address = 1; address < 127; address++ )
   d483e:	7823      	ldrb	r3, [r4, #0]
   d4840:	3301      	adds	r3, #1
   d4842:	b2db      	uxtb	r3, r3
   d4844:	2b7e      	cmp	r3, #126	; 0x7e
   d4846:	7023      	strb	r3, [r4, #0]
   d4848:	d9d1      	bls.n	d47ee <setup+0x2e>
  if (nDevices == 0)
   d484a:	682b      	ldr	r3, [r5, #0]
   d484c:	2b00      	cmp	r3, #0
   d484e:	f040 80bd 	bne.w	d49cc <setup+0x20c>
    Serial.println("No I2C devices found\n");
   d4852:	f002 ff6d 	bl	d7730 <_Z16_fetch_usbserialv>
   d4856:	497e      	ldr	r1, [pc, #504]	; (d4a50 <setup+0x290>)
    Serial.println("done\n");
   d4858:	f002 fca5 	bl	d71a6 <_ZN5Print7printlnEPKc>
  if (i2ceeprom.begin(0x50)) {  // you can stick the new i2c addr in here, e.g. begin(0x51);
   d485c:	f003 fa16 	bl	d7c8c <_Z19__fetch_global_Wirev>
   d4860:	2150      	movs	r1, #80	; 0x50
   d4862:	4602      	mov	r2, r0
   d4864:	487b      	ldr	r0, [pc, #492]	; (d4a54 <setup+0x294>)
   d4866:	f002 f8e3 	bl	d6a30 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>
   d486a:	2800      	cmp	r0, #0
   d486c:	f000 80b2 	beq.w	d49d4 <setup+0x214>
    Serial.println("Found I2C EEPROM");
   d4870:	f002 ff5e 	bl	d7730 <_Z16_fetch_usbserialv>
   d4874:	4978      	ldr	r1, [pc, #480]	; (d4a58 <setup+0x298>)
   d4876:	f002 fc96 	bl	d71a6 <_ZN5Print7printlnEPKc>
    while(!Serial);    // time to get serial running
   d487a:	f002 ff59 	bl	d7730 <_Z16_fetch_usbserialv>
   d487e:	f002 ff4c 	bl	d771a <_ZN9USBSerialcvbEv>
   d4882:	2800      	cmp	r0, #0
   d4884:	d0f9      	beq.n	d487a <setup+0xba>
  display.begin(0x3C, true); // Address 0x3C default
   d4886:	4c75      	ldr	r4, [pc, #468]	; (d4a5c <setup+0x29c>)
    Serial.println(F("BME280 test"));
   d4888:	f002 ff52 	bl	d7730 <_Z16_fetch_usbserialv>
   d488c:	4974      	ldr	r1, [pc, #464]	; (d4a60 <setup+0x2a0>)
   d488e:	f002 fc94 	bl	d71ba <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("128x64 OLED FeatherWing test");
   d4892:	f002 ff4d 	bl	d7730 <_Z16_fetch_usbserialv>
   d4896:	4973      	ldr	r1, [pc, #460]	; (d4a64 <setup+0x2a4>)
   d4898:	f002 fc85 	bl	d71a6 <_ZN5Print7printlnEPKc>
  display.begin(0x3C, true); // Address 0x3C default
   d489c:	2201      	movs	r2, #1
   d489e:	213c      	movs	r1, #60	; 0x3c
   d48a0:	4620      	mov	r0, r4
   d48a2:	f002 f84f 	bl	d6944 <_ZN15Adafruit_SH11075beginEhb>
  Serial.println("OLED begun");
   d48a6:	f002 ff43 	bl	d7730 <_Z16_fetch_usbserialv>
   d48aa:	496f      	ldr	r1, [pc, #444]	; (d4a68 <setup+0x2a8>)
   d48ac:	f002 fc7b 	bl	d71a6 <_ZN5Print7printlnEPKc>
  display.display();
   d48b0:	4620      	mov	r0, r4
   d48b2:	f001 ff50 	bl	d6756 <_ZN15Adafruit_SH110X7displayEv>
  delay(1000);
   d48b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d48ba:	f002 fdbd 	bl	d7438 <delay>
  display.clearDisplay();
   d48be:	4620      	mov	r0, r4
   d48c0:	f001 fad6 	bl	d5e70 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   d48c4:	4620      	mov	r0, r4
   d48c6:	f001 ff46 	bl	d6756 <_ZN15Adafruit_SH110X7displayEv>
  display.setRotation(1);
   d48ca:	2101      	movs	r1, #1
   d48cc:	4620      	mov	r0, r4
   d48ce:	f001 fcd5 	bl	d627c <_ZN12Adafruit_GFX11setRotationEh>
  Serial.println("Button test");
   d48d2:	f002 ff2d 	bl	d7730 <_Z16_fetch_usbserialv>
   d48d6:	4965      	ldr	r1, [pc, #404]	; (d4a6c <setup+0x2ac>)
   d48d8:	f002 fc65 	bl	d71a6 <_ZN5Print7printlnEPKc>
  pinMode(BUTTON_A, INPUT_PULLUP);
   d48dc:	2102      	movs	r1, #2
   d48de:	2004      	movs	r0, #4
   d48e0:	f003 f97e 	bl	d7be0 <pinMode>
  pinMode(BUTTON_B, INPUT_PULLUP);
   d48e4:	2102      	movs	r1, #2
   d48e6:	2003      	movs	r0, #3
   d48e8:	f003 f97a 	bl	d7be0 <pinMode>
  pinMode(BUTTON_C, INPUT_PULLUP);
   d48ec:	2102      	movs	r1, #2
   d48ee:	4608      	mov	r0, r1
   d48f0:	f003 f976 	bl	d7be0 <pinMode>
  display.setTextSize(1);
   d48f4:	2101      	movs	r1, #1
   d48f6:	4620      	mov	r0, r4
   d48f8:	f001 ff27 	bl	d674a <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d48fc:	2200      	movs	r2, #0
   d48fe:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4902:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.print("Connecting to SSID\n'adafruit':");
   d4906:	495a      	ldr	r1, [pc, #360]	; (d4a70 <setup+0x2b0>)
   d4908:	4620      	mov	r0, r4
   d490a:	f002 fc35 	bl	d7178 <_ZN5Print5printEPKc>
  display.print("connected!");
   d490e:	4959      	ldr	r1, [pc, #356]	; (d4a74 <setup+0x2b4>)
   d4910:	4620      	mov	r0, r4
   d4912:	f002 fc31 	bl	d7178 <_ZN5Print5printEPKc>
  display.println("IP: 10.0.1.23");
   d4916:	4958      	ldr	r1, [pc, #352]	; (d4a78 <setup+0x2b8>)
   d4918:	4620      	mov	r0, r4
   d491a:	f002 fc44 	bl	d71a6 <_ZN5Print7printlnEPKc>
  display.println("Sending val #0");
   d491e:	4957      	ldr	r1, [pc, #348]	; (d4a7c <setup+0x2bc>)
   d4920:	4620      	mov	r0, r4
   d4922:	f002 fc40 	bl	d71a6 <_ZN5Print7printlnEPKc>
  display.display(); // actually display all of the above
   d4926:	4620      	mov	r0, r4
   d4928:	f001 ff15 	bl	d6756 <_ZN15Adafruit_SH110X7displayEv>
    status = bme.begin();  
   d492c:	4854      	ldr	r0, [pc, #336]	; (d4a80 <setup+0x2c0>)
   d492e:	f000 fd84 	bl	d543a <_ZN15Adafruit_BME2805beginEv>
    if (!status) {
   d4932:	2800      	cmp	r0, #0
   d4934:	d157      	bne.n	d49e6 <setup+0x226>
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d4936:	f002 fefb 	bl	d7730 <_Z16_fetch_usbserialv>
   d493a:	4952      	ldr	r1, [pc, #328]	; (d4a84 <setup+0x2c4>)
   d493c:	f002 fc33 	bl	d71a6 <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),16);
   d4940:	f002 fef6 	bl	d7730 <_Z16_fetch_usbserialv>
   d4944:	4950      	ldr	r1, [pc, #320]	; (d4a88 <setup+0x2c8>)
   d4946:	f002 fc17 	bl	d7178 <_ZN5Print5printEPKc>
   d494a:	f002 fef1 	bl	d7730 <_Z16_fetch_usbserialv>
   d494e:	4604      	mov	r4, r0
   d4950:	484b      	ldr	r0, [pc, #300]	; (d4a80 <setup+0x2c0>)
   d4952:	f000 f8f5 	bl	d4b40 <_ZN15Adafruit_BME2808sensorIDEv>
   d4956:	2210      	movs	r2, #16
   d4958:	4601      	mov	r1, r0
   d495a:	4620      	mov	r0, r4
   d495c:	f002 fc2f 	bl	d71be <_ZN5Print11printNumberEmh>
        n += println();
   d4960:	4620      	mov	r0, r4
   d4962:	f002 fc14 	bl	d718e <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d4966:	f002 fee3 	bl	d7730 <_Z16_fetch_usbserialv>
   d496a:	4948      	ldr	r1, [pc, #288]	; (d4a8c <setup+0x2cc>)
   d496c:	f002 fc04 	bl	d7178 <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d4970:	f002 fede 	bl	d7730 <_Z16_fetch_usbserialv>
   d4974:	4946      	ldr	r1, [pc, #280]	; (d4a90 <setup+0x2d0>)
   d4976:	f002 fbff 	bl	d7178 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d497a:	f002 fed9 	bl	d7730 <_Z16_fetch_usbserialv>
   d497e:	4945      	ldr	r1, [pc, #276]	; (d4a94 <setup+0x2d4>)
   d4980:	f002 fbfa 	bl	d7178 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d4984:	f002 fed4 	bl	d7730 <_Z16_fetch_usbserialv>
   d4988:	4943      	ldr	r1, [pc, #268]	; (d4a98 <setup+0x2d8>)
   d498a:	f002 fbf5 	bl	d7178 <_ZN5Print5printEPKc>
        while (1) delay(10);
   d498e:	200a      	movs	r0, #10
   d4990:	f002 fd52 	bl	d7438 <delay>
   d4994:	e7fb      	b.n	d498e <setup+0x1ce>
    else if (error == 4)
   d4996:	2804      	cmp	r0, #4
   d4998:	f47f af51 	bne.w	d483e <setup+0x7e>
      Serial.print("Unknown error at address 0x");
   d499c:	f002 fec8 	bl	d7730 <_Z16_fetch_usbserialv>
   d49a0:	4641      	mov	r1, r8
   d49a2:	f002 fbe9 	bl	d7178 <_ZN5Print5printEPKc>
      if (address < 16)
   d49a6:	7823      	ldrb	r3, [r4, #0]
   d49a8:	2b0f      	cmp	r3, #15
   d49aa:	d804      	bhi.n	d49b6 <setup+0x1f6>
        Serial.print("0");
   d49ac:	f002 fec0 	bl	d7730 <_Z16_fetch_usbserialv>
   d49b0:	4631      	mov	r1, r6
   d49b2:	f002 fbe1 	bl	d7178 <_ZN5Print5printEPKc>
      Serial.println(address, HEX);
   d49b6:	f002 febb 	bl	d7730 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d49ba:	7821      	ldrb	r1, [r4, #0]
   d49bc:	4681      	mov	r9, r0
   d49be:	2210      	movs	r2, #16
   d49c0:	f002 fbfd 	bl	d71be <_ZN5Print11printNumberEmh>
        n += println();
   d49c4:	4648      	mov	r0, r9
   d49c6:	f002 fbe2 	bl	d718e <_ZN5Print7printlnEv>
        return n;
   d49ca:	e738      	b.n	d483e <setup+0x7e>
    Serial.println("done\n");
   d49cc:	f002 feb0 	bl	d7730 <_Z16_fetch_usbserialv>
   d49d0:	4932      	ldr	r1, [pc, #200]	; (d4a9c <setup+0x2dc>)
   d49d2:	e741      	b.n	d4858 <setup+0x98>
    Serial.println("I2C EEPROM not identified ... check your connections?\r\n");
   d49d4:	f002 feac 	bl	d7730 <_Z16_fetch_usbserialv>
   d49d8:	4931      	ldr	r1, [pc, #196]	; (d4aa0 <setup+0x2e0>)
   d49da:	f002 fbe4 	bl	d71a6 <_ZN5Print7printlnEPKc>
    while (1) delay(10);
   d49de:	200a      	movs	r0, #10
   d49e0:	f002 fd2a 	bl	d7438 <delay>
   d49e4:	e7fb      	b.n	d49de <setup+0x21e>
  Serial.begin(9600);
   d49e6:	f002 fea3 	bl	d7730 <_Z16_fetch_usbserialv>
   d49ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d49ee:	f002 fe8d 	bl	d770c <_ZN9USBSerial5beginEl>
  Serial.println("WebSerial 3D Firmware"); Serial.println("");
   d49f2:	f002 fe9d 	bl	d7730 <_Z16_fetch_usbserialv>
   d49f6:	492b      	ldr	r1, [pc, #172]	; (d4aa4 <setup+0x2e4>)
   d49f8:	f002 fbd5 	bl	d71a6 <_ZN5Print7printlnEPKc>
   d49fc:	f002 fe98 	bl	d7730 <_Z16_fetch_usbserialv>
   d4a00:	4929      	ldr	r1, [pc, #164]	; (d4aa8 <setup+0x2e8>)
   d4a02:	f002 fbd0 	bl	d71a6 <_ZN5Print7printlnEPKc>
  if(!bno.begin())
   d4a06:	4829      	ldr	r0, [pc, #164]	; (d4aac <setup+0x2ec>)
   d4a08:	210c      	movs	r1, #12
   d4a0a:	f000 ff9f 	bl	d594c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
   d4a0e:	b928      	cbnz	r0, d4a1c <setup+0x25c>
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
   d4a10:	f002 fe8e 	bl	d7730 <_Z16_fetch_usbserialv>
   d4a14:	4926      	ldr	r1, [pc, #152]	; (d4ab0 <setup+0x2f0>)
   d4a16:	f002 fbaf 	bl	d7178 <_ZN5Print5printEPKc>
    while(1);
   d4a1a:	e7fe      	b.n	d4a1a <setup+0x25a>
  delay(1000);
   d4a1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4a20:	f002 fd0a 	bl	d7438 <delay>
  bno.setExtCrystalUse(true);
   d4a24:	4821      	ldr	r0, [pc, #132]	; (d4aac <setup+0x2ec>)
   d4a26:	2101      	movs	r1, #1
   d4a28:	f000 ff5c 	bl	d58e4 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
}
   d4a2c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  displaySensorDetails();
   d4a30:	f7ff bbd6 	b.w	d41e0 <_Z20displaySensorDetailsv>
   d4a34:	2003e57c 	.word	0x2003e57c
   d4a38:	2003e4b4 	.word	0x2003e4b4
   d4a3c:	2003e570 	.word	0x2003e570
   d4a40:	000da3d0 	.word	0x000da3d0
   d4a44:	000da29b 	.word	0x000da29b
   d4a48:	000da2a7 	.word	0x000da2a7
   d4a4c:	000da2c6 	.word	0x000da2c6
   d4a50:	000da2e6 	.word	0x000da2e6
   d4a54:	2003e574 	.word	0x2003e574
   d4a58:	000da302 	.word	0x000da302
   d4a5c:	2003e518 	.word	0x2003e518
   d4a60:	000da34b 	.word	0x000da34b
   d4a64:	000da357 	.word	0x000da357
   d4a68:	000da374 	.word	0x000da374
   d4a6c:	000da37f 	.word	0x000da37f
   d4a70:	000da38b 	.word	0x000da38b
   d4a74:	000da3aa 	.word	0x000da3aa
   d4a78:	000da3b5 	.word	0x000da3b5
   d4a7c:	000da3c3 	.word	0x000da3c3
   d4a80:	2003e4b8 	.word	0x2003e4b8
   d4a84:	000da3d2 	.word	0x000da3d2
   d4a88:	000da41a 	.word	0x000da41a
   d4a8c:	000da42b 	.word	0x000da42b
   d4a90:	000da472 	.word	0x000da472
   d4a94:	000da49c 	.word	0x000da49c
   d4a98:	000da4c6 	.word	0x000da4c6
   d4a9c:	000da2fc 	.word	0x000da2fc
   d4aa0:	000da313 	.word	0x000da313
   d4aa4:	000da4f0 	.word	0x000da4f0
   d4aa8:	000da279 	.word	0x000da279
   d4aac:	2003e4fc 	.word	0x2003e4fc
   d4ab0:	000da506 	.word	0x000da506
   d4ab4:	000da2ca 	.word	0x000da2ca

000d4ab8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4ab8:	4770      	bx	lr

000d4aba <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4aba:	b510      	push	{r4, lr}
  }
   d4abc:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4abe:	4604      	mov	r4, r0
  }
   d4ac0:	f003 f908 	bl	d7cd4 <_ZdlPvj>
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	bd10      	pop	{r4, pc}

000d4ac8 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4ac8:	b40e      	push	{r1, r2, r3}
   d4aca:	b503      	push	{r0, r1, lr}
   d4acc:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d4ace:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4ad0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4ad4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4ad6:	f002 fc6b 	bl	d73b0 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d4ada:	b002      	add	sp, #8
   d4adc:	f85d eb04 	ldr.w	lr, [sp], #4
   d4ae0:	b003      	add	sp, #12
   d4ae2:	4770      	bx	lr

000d4ae4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4ae4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4ae6:	4604      	mov	r4, r0
   d4ae8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4aea:	7922      	ldrb	r2, [r4, #4]
   d4aec:	68a3      	ldr	r3, [r4, #8]
   d4aee:	b132      	cbz	r2, d4afe <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4af0:	b9a3      	cbnz	r3, d4b1c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4af2:	490b      	ldr	r1, [pc, #44]	; (d4b20 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4af4:	b002      	add	sp, #8
   d4af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4afa:	f002 bb3d 	b.w	d7178 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4afe:	4a09      	ldr	r2, [pc, #36]	; (d4b24 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4b00:	7b26      	ldrb	r6, [r4, #12]
   d4b02:	4d09      	ldr	r5, [pc, #36]	; (d4b28 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4b04:	4909      	ldr	r1, [pc, #36]	; (d4b2c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4b06:	7b64      	ldrb	r4, [r4, #13]
   d4b08:	2e01      	cmp	r6, #1
   d4b0a:	bf18      	it	ne
   d4b0c:	4629      	movne	r1, r5
   d4b0e:	e9cd 1400 	strd	r1, r4, [sp]
   d4b12:	4907      	ldr	r1, [pc, #28]	; (d4b30 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4b14:	f7ff ffd8 	bl	d4ac8 <_ZN5Print6printfEPKcz>
  }
   d4b18:	b002      	add	sp, #8
   d4b1a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4b1c:	4a05      	ldr	r2, [pc, #20]	; (d4b34 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4b1e:	e7ef      	b.n	d4b00 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4b20:	000da554 	.word	0x000da554
   d4b24:	000da279 	.word	0x000da279
   d4b28:	000da550 	.word	0x000da550
   d4b2c:	000da54c 	.word	0x000da54c
   d4b30:	000da56a 	.word	0x000da56a
   d4b34:	000da543 	.word	0x000da543

000d4b38 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4b38:	f04f 33ff 	mov.w	r3, #4294967295
   d4b3c:	6103      	str	r3, [r0, #16]
{ }
   d4b3e:	4770      	bx	lr

000d4b40 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d4b40:	6880      	ldr	r0, [r0, #8]
   d4b42:	4770      	bx	lr

000d4b44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4b44:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4b46:	4c0b      	ldr	r4, [pc, #44]	; (d4b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4b48:	7821      	ldrb	r1, [r4, #0]
   d4b4a:	f3bf 8f5b 	dmb	ish
   d4b4e:	f011 0101 	ands.w	r1, r1, #1
   d4b52:	d10b      	bne.n	d4b6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4b54:	4620      	mov	r0, r4
   d4b56:	9101      	str	r1, [sp, #4]
   d4b58:	f7ff faae 	bl	d40b8 <__cxa_guard_acquire>
   d4b5c:	9901      	ldr	r1, [sp, #4]
   d4b5e:	b128      	cbz	r0, d4b6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4b60:	4805      	ldr	r0, [pc, #20]	; (d4b78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4b62:	f002 fa0b 	bl	d6f7c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4b66:	4620      	mov	r0, r4
   d4b68:	f7ff faab 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d4b6c:	4802      	ldr	r0, [pc, #8]	; (d4b78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4b6e:	b002      	add	sp, #8
   d4b70:	bd10      	pop	{r4, pc}
   d4b72:	bf00      	nop
   d4b74:	2003e580 	.word	0x2003e580
   d4b78:	2003e584 	.word	0x2003e584

000d4b7c <_ZN15Adafruit_BME2807spixferEh>:
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sck == -1)
   d4b80:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4b84:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4b86:	4605      	mov	r5, r0
   d4b88:	460f      	mov	r7, r1
    if (_sck == -1)
   d4b8a:	d106      	bne.n	d4b9a <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4b8c:	f7ff ffda 	bl	d4b44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4b90:	4639      	mov	r1, r7
}
   d4b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4b96:	f002 ba93 	b.w	d70c0 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d4b9a:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d4b9c:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d4b9e:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d4ba2:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4ba6:	2100      	movs	r1, #0
   d4ba8:	b280      	uxth	r0, r0
   d4baa:	f003 f82a 	bl	d7c02 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4bae:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4bb2:	fa08 f106 	lsl.w	r1, r8, r6
   d4bb6:	4039      	ands	r1, r7
   d4bb8:	b280      	uxth	r0, r0
   d4bba:	f003 f822 	bl	d7c02 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4bbe:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4bc2:	2101      	movs	r1, #1
   d4bc4:	b280      	uxth	r0, r0
   d4bc6:	f003 f81c 	bl	d7c02 <digitalWrite>
        if (digitalRead(_miso))
   d4bca:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d4bce:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d4bd0:	b280      	uxth	r0, r0
        reply <<= 1;
   d4bd2:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d4bd4:	f003 f82e 	bl	d7c34 <digitalRead>
   d4bd8:	b108      	cbz	r0, d4bde <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4bda:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d4bde:	3e01      	subs	r6, #1
   d4be0:	d2df      	bcs.n	d4ba2 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d4be2:	4620      	mov	r0, r4
   d4be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4be8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d4be8:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4bea:	f7ff ffab 	bl	d4b44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d4bee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d4bf2:	f002 b9de 	b.w	d6fb2 <_ZN8SPIClass14endTransactionEv>

000d4bf6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d4bf6:	b507      	push	{r0, r1, r2, lr}
   d4bf8:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d4bfa:	f7ff ffa3 	bl	d4b44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4bfe:	9901      	ldr	r1, [sp, #4]
    }
   d4c00:	b003      	add	sp, #12
   d4c02:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d4c06:	f002 b9ed 	b.w	d6fe4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d4c0c <_ZN15Adafruit_BME2806read24Eh>:
{
   d4c0c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d4c0e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4c12:	3301      	adds	r3, #1
{
   d4c14:	b085      	sub	sp, #20
   d4c16:	4604      	mov	r4, r0
   d4c18:	460d      	mov	r5, r1
    if (_cs == -1) {
   d4c1a:	d123      	bne.n	d4c64 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4c1c:	7901      	ldrb	r1, [r0, #4]
   d4c1e:	6800      	ldr	r0, [r0, #0]
   d4c20:	f002 fee6 	bl	d79f0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4c24:	6820      	ldr	r0, [r4, #0]
   d4c26:	6803      	ldr	r3, [r0, #0]
   d4c28:	4629      	mov	r1, r5
   d4c2a:	689b      	ldr	r3, [r3, #8]
   d4c2c:	4798      	blx	r3
        _wire -> endTransmission();
   d4c2e:	6820      	ldr	r0, [r4, #0]
   d4c30:	f002 fee6 	bl	d7a00 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4c34:	7921      	ldrb	r1, [r4, #4]
   d4c36:	6820      	ldr	r0, [r4, #0]
   d4c38:	2203      	movs	r2, #3
   d4c3a:	f002 fed6 	bl	d79ea <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4c3e:	6820      	ldr	r0, [r4, #0]
   d4c40:	6803      	ldr	r3, [r0, #0]
   d4c42:	695b      	ldr	r3, [r3, #20]
   d4c44:	4798      	blx	r3
        value <<= 8;
   d4c46:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4c48:	6820      	ldr	r0, [r4, #0]
   d4c4a:	6803      	ldr	r3, [r0, #0]
   d4c4c:	695b      	ldr	r3, [r3, #20]
   d4c4e:	4798      	blx	r3
   d4c50:	4328      	orrs	r0, r5
        value <<= 8;
   d4c52:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4c54:	6820      	ldr	r0, [r4, #0]
   d4c56:	6803      	ldr	r3, [r0, #0]
   d4c58:	695b      	ldr	r3, [r3, #20]
   d4c5a:	4798      	blx	r3
   d4c5c:	4305      	orrs	r5, r0
}
   d4c5e:	4628      	mov	r0, r5
   d4c60:	b005      	add	sp, #20
   d4c62:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d4c64:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4c68:	3301      	adds	r3, #1
   d4c6a:	d10c      	bne.n	d4c86 <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d4c6c:	4b1a      	ldr	r3, [pc, #104]	; (d4cd8 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d4c6e:	9300      	str	r3, [sp, #0]
   d4c70:	2300      	movs	r3, #0
   d4c72:	f88d 3004 	strb.w	r3, [sp, #4]
   d4c76:	4b19      	ldr	r3, [pc, #100]	; (d4cdc <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d4c78:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4c7a:	4668      	mov	r0, sp
   d4c7c:	2301      	movs	r3, #1
   d4c7e:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4c82:	f7ff ffb8 	bl	d4bf6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4c86:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4c8a:	2100      	movs	r1, #0
   d4c8c:	b280      	uxth	r0, r0
   d4c8e:	f002 ffb8 	bl	d7c02 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4c92:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4c96:	4620      	mov	r0, r4
   d4c98:	f7ff ff70 	bl	d4b7c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4c9c:	2100      	movs	r1, #0
   d4c9e:	4620      	mov	r0, r4
   d4ca0:	f7ff ff6c 	bl	d4b7c <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d4ca4:	2100      	movs	r1, #0
        value <<= 8;
   d4ca6:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4ca8:	4620      	mov	r0, r4
   d4caa:	f7ff ff67 	bl	d4b7c <_ZN15Adafruit_BME2807spixferEh>
   d4cae:	4328      	orrs	r0, r5
        value <<= 8;
   d4cb0:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4cb2:	2100      	movs	r1, #0
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	f7ff ff61 	bl	d4b7c <_ZN15Adafruit_BME2807spixferEh>
   d4cba:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d4cbc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4cc0:	2101      	movs	r1, #1
   d4cc2:	b280      	uxth	r0, r0
   d4cc4:	f002 ff9d 	bl	d7c02 <digitalWrite>
        if (_sck == -1)
   d4cc8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4ccc:	3301      	adds	r3, #1
   d4cce:	d1c6      	bne.n	d4c5e <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d4cd0:	f7ff ff8a 	bl	d4be8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d4cd4:	e7c3      	b.n	d4c5e <_ZN15Adafruit_BME2806read24Eh+0x52>
   d4cd6:	bf00      	nop
   d4cd8:	000da590 	.word	0x000da590
   d4cdc:	0007a120 	.word	0x0007a120

000d4ce0 <_ZN15Adafruit_BME28015readTemperatureEv>:
{
   d4ce0:	b510      	push	{r4, lr}
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4ce2:	21fa      	movs	r1, #250	; 0xfa
{
   d4ce4:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4ce6:	f7ff ff91 	bl	d4c0c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d4cea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4cee:	d01e      	beq.n	d4d2e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4cf0:	8aa1      	ldrh	r1, [r4, #20]
    return T/100;
   d4cf2:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4d34 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4cf6:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d4cf8:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4cfc:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d4d00:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d4d04:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4d06:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d4d08:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4d0c:	1312      	asrs	r2, r2, #12
   d4d0e:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d4d10:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d4d12:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d4d16:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d4d18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4d1c:	3380      	adds	r3, #128	; 0x80
   d4d1e:	121b      	asrs	r3, r3, #8
   d4d20:	ee07 3a90 	vmov	s15, r3
   d4d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d4d28:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4d2c:	bd10      	pop	{r4, pc}
        return NAN;
   d4d2e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4d38 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d4d32:	e7fb      	b.n	d4d2c <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d4d34:	42c80000 	.word	0x42c80000
   d4d38:	7fc00000 	.word	0x7fc00000

000d4d3c <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   d4d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4d40:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d4d42:	f7ff ffcd 	bl	d4ce0 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4d46:	21f7      	movs	r1, #247	; 0xf7
   d4d48:	4620      	mov	r0, r4
   d4d4a:	f7ff ff5f 	bl	d4c0c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4d4e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4d52:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4d54:	f000 80bf 	beq.w	d4ed6 <_ZN15Adafruit_BME28012readPressureEv+0x19a>
    var1 = ((int64_t)t_fine) - 128000;
   d4d58:	68e0      	ldr	r0, [r4, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4d5a:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
   d4d5e:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d4d62:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d4d66:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4d6a:	fba3 8903 	umull	r8, r9, r3, r3
   d4d6e:	fb03 f102 	mul.w	r1, r3, r2
   d4d72:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4d76:	17f7      	asrs	r7, r6, #31
   d4d78:	fb06 f102 	mul.w	r1, r6, r2
   d4d7c:	fb03 1107 	mla	r1, r3, r7, r1
   d4d80:	fba6 6703 	umull	r6, r7, r6, r3
   d4d84:	440f      	add	r7, r1
   d4d86:	0339      	lsls	r1, r7, #12
   d4d88:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d4d8c:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d4d8e:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
   d4d92:	17f7      	asrs	r7, r6, #31
   d4d94:	fb06 fc09 	mul.w	ip, r6, r9
   d4d98:	fb08 cc07 	mla	ip, r8, r7, ip
   d4d9c:	fba6 6708 	umull	r6, r7, r6, r8
   d4da0:	4467      	add	r7, ip
   d4da2:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d4da6:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4daa:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d4dac:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d4db0:	eb1c 0000 	adds.w	r0, ip, r0
   d4db4:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4db8:	3000      	adds	r0, #0
   d4dba:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d4dbe:	fba0 0106 	umull	r0, r1, r0, r6
   d4dc2:	fb06 110e 	mla	r1, r6, lr, r1
   d4dc6:	104e      	asrs	r6, r1, #1
   d4dc8:	17cf      	asrs	r7, r1, #31
    if (var1 == 0) {
   d4dca:	ea56 0107 	orrs.w	r1, r6, r7
   d4dce:	f000 8085 	beq.w	d4edc <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4dd2:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
   d4dd6:	fb00 fc09 	mul.w	ip, r0, r9
   d4dda:	17c1      	asrs	r1, r0, #31
   d4ddc:	fb08 cc01 	mla	ip, r8, r1, ip
   d4de0:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4de4:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
   d4de8:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d4dec:	fb08 f202 	mul.w	r2, r8, r2
   d4df0:	fb03 2209 	mla	r2, r3, r9, r2
   d4df4:	fba8 8903 	umull	r8, r9, r8, r3
   d4df8:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4dfa:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4dfc:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d4e00:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d4e04:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4e06:	1812      	adds	r2, r2, r0
    p = 1048576 - adc_P;
   d4e08:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4e0c:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4e10:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4e14:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4e18:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d4e1a:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4e1c:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d4e1e:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d4e22:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4e26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d4e2a:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d4e2e:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d4e32:	1ac0      	subs	r0, r0, r3
   d4e34:	f640 4335 	movw	r3, #3125	; 0xc35
   d4e38:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d4e3c:	fba0 0103 	umull	r0, r1, r0, r3
   d4e40:	fb03 110e 	mla	r1, r3, lr, r1
   d4e44:	4632      	mov	r2, r6
   d4e46:	463b      	mov	r3, r7
   d4e48:	f004 fefa 	bl	d9c40 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4e4c:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d4e50:	134d      	asrs	r5, r1, #13
   d4e52:	0b46      	lsrs	r6, r0, #13
   d4e54:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d4e58:	fb02 f705 	mul.w	r7, r2, r5
   d4e5c:	17d3      	asrs	r3, r2, #31
   d4e5e:	fb06 7703 	mla	r7, r6, r3, r7
   d4e62:	fba2 2306 	umull	r2, r3, r2, r6
   d4e66:	443b      	add	r3, r7
   d4e68:	4355      	muls	r5, r2
   d4e6a:	fb06 5503 	mla	r5, r6, r3, r5
   d4e6e:	fba2 2306 	umull	r2, r3, r2, r6
   d4e72:	442b      	add	r3, r5
   d4e74:	0e55      	lsrs	r5, r2, #25
   d4e76:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d4e7a:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4e7e:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   d4e82:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4e84:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4e88:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d4e8c:	17d3      	asrs	r3, r2, #31
   d4e8e:	4351      	muls	r1, r2
   d4e90:	fb00 1103 	mla	r1, r0, r3, r1
   d4e94:	fba2 2300 	umull	r2, r3, r2, r0
   d4e98:	440b      	add	r3, r1
   d4e9a:	0cd1      	lsrs	r1, r2, #19
   d4e9c:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4ea0:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d4ea2:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4ea6:	eb46 0300 	adc.w	r3, r6, r0
   d4eaa:	0a2a      	lsrs	r2, r5, #8
   d4eac:	17e5      	asrs	r5, r4, #31
   d4eae:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d4eb2:	1219      	asrs	r1, r3, #8
   d4eb4:	0120      	lsls	r0, r4, #4
   d4eb6:	012b      	lsls	r3, r5, #4
   d4eb8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d4ebc:	1880      	adds	r0, r0, r2
   d4ebe:	eb43 0101 	adc.w	r1, r3, r1
   d4ec2:	f004 fe7f 	bl	d9bc4 <__aeabi_l2f>
   d4ec6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d4ee4 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d4eca:	ee07 0a90 	vmov	s15, r0
   d4ece:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d4ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d4ed6:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4ee8 <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d4eda:	e7fa      	b.n	d4ed2 <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d4edc:	ed9f 0a03 	vldr	s0, [pc, #12]	; d4eec <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d4ee0:	e7f7      	b.n	d4ed2 <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d4ee2:	bf00      	nop
   d4ee4:	3b800000 	.word	0x3b800000
   d4ee8:	7fc00000 	.word	0x7fc00000
   d4eec:	00000000 	.word	0x00000000

000d4ef0 <_ZN15Adafruit_BME28012readAltitudeEf>:
{
   d4ef0:	b508      	push	{r3, lr}
   d4ef2:	ed2d 8b02 	vpush	{d8}
   d4ef6:	eeb0 8a40 	vmov.f32	s16, s0
    float atmospheric = readPressure() / 100.0F;
   d4efa:	f7ff ff1f 	bl	d4d3c <_ZN15Adafruit_BME28012readPressureEv>
   d4efe:	ed9f 7a16 	vldr	s14, [pc, #88]	; d4f58 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d4f02:	eec0 7a07 	vdiv.f32	s15, s0, s14
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d4f06:	eec7 7a88 	vdiv.f32	s15, s15, s16
   d4f0a:	ee17 0a90 	vmov	r0, s15
   d4f0e:	f004 f9e9 	bl	d92e4 <__aeabi_f2d>
   d4f12:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d4f48 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d4f16:	ec41 0b10 	vmov	d0, r0, r1
   d4f1a:	f002 fee1 	bl	d7ce0 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d4f1e:	490f      	ldr	r1, [pc, #60]	; (d4f5c <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d4f20:	ec53 2b10 	vmov	r2, r3, d0
   d4f24:	2000      	movs	r0, #0
   d4f26:	f004 f87d 	bl	d9024 <__aeabi_dsub>
   d4f2a:	a309      	add	r3, pc, #36	; (adr r3, d4f50 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d4f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f30:	f004 fa30 	bl	d9394 <__aeabi_dmul>
   d4f34:	f004 fd26 	bl	d9984 <__aeabi_d2f>
}
   d4f38:	ecbd 8b02 	vpop	{d8}
   d4f3c:	ee00 0a10 	vmov	s0, r0
   d4f40:	bd08      	pop	{r3, pc}
   d4f42:	bf00      	nop
   d4f44:	f3af 8000 	nop.w
   d4f48:	1a36e2eb 	.word	0x1a36e2eb
   d4f4c:	3fc85bc0 	.word	0x3fc85bc0
   d4f50:	00000000 	.word	0x00000000
   d4f54:	40e5a540 	.word	0x40e5a540
   d4f58:	42c80000 	.word	0x42c80000
   d4f5c:	3ff00000 	.word	0x3ff00000

000d4f60 <_ZN15Adafruit_BME2806read16Eh>:
{
   d4f60:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d4f62:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4f66:	3301      	adds	r3, #1
{
   d4f68:	b085      	sub	sp, #20
   d4f6a:	4604      	mov	r4, r0
   d4f6c:	460d      	mov	r5, r1
    if (_cs == -1) {
   d4f6e:	d11f      	bne.n	d4fb0 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4f70:	7901      	ldrb	r1, [r0, #4]
   d4f72:	6800      	ldr	r0, [r0, #0]
   d4f74:	f002 fd3c 	bl	d79f0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4f78:	6820      	ldr	r0, [r4, #0]
   d4f7a:	6803      	ldr	r3, [r0, #0]
   d4f7c:	4629      	mov	r1, r5
   d4f7e:	689b      	ldr	r3, [r3, #8]
   d4f80:	4798      	blx	r3
        _wire -> endTransmission();
   d4f82:	6820      	ldr	r0, [r4, #0]
   d4f84:	f002 fd3c 	bl	d7a00 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4f88:	7921      	ldrb	r1, [r4, #4]
   d4f8a:	6820      	ldr	r0, [r4, #0]
   d4f8c:	2202      	movs	r2, #2
   d4f8e:	f002 fd2c 	bl	d79ea <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4f92:	6820      	ldr	r0, [r4, #0]
   d4f94:	6803      	ldr	r3, [r0, #0]
   d4f96:	695b      	ldr	r3, [r3, #20]
   d4f98:	4798      	blx	r3
   d4f9a:	4605      	mov	r5, r0
   d4f9c:	6820      	ldr	r0, [r4, #0]
   d4f9e:	6803      	ldr	r3, [r0, #0]
   d4fa0:	695b      	ldr	r3, [r3, #20]
   d4fa2:	4798      	blx	r3
   d4fa4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4fa8:	b285      	uxth	r5, r0
}
   d4faa:	4628      	mov	r0, r5
   d4fac:	b005      	add	sp, #20
   d4fae:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d4fb0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4fb4:	3301      	adds	r3, #1
   d4fb6:	d10c      	bne.n	d4fd2 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d4fb8:	4b18      	ldr	r3, [pc, #96]	; (d501c <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d4fba:	9300      	str	r3, [sp, #0]
   d4fbc:	2300      	movs	r3, #0
   d4fbe:	f88d 3004 	strb.w	r3, [sp, #4]
   d4fc2:	4b17      	ldr	r3, [pc, #92]	; (d5020 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d4fc4:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4fc6:	4668      	mov	r0, sp
   d4fc8:	2301      	movs	r3, #1
   d4fca:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4fce:	f7ff fe12 	bl	d4bf6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4fd2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4fd6:	2100      	movs	r1, #0
   d4fd8:	b280      	uxth	r0, r0
   d4fda:	f002 fe12 	bl	d7c02 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4fde:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	f7ff fdca 	bl	d4b7c <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4fe8:	2100      	movs	r1, #0
   d4fea:	4620      	mov	r0, r4
   d4fec:	f7ff fdc6 	bl	d4b7c <_ZN15Adafruit_BME2807spixferEh>
   d4ff0:	2100      	movs	r1, #0
   d4ff2:	4605      	mov	r5, r0
   d4ff4:	4620      	mov	r0, r4
   d4ff6:	f7ff fdc1 	bl	d4b7c <_ZN15Adafruit_BME2807spixferEh>
   d4ffa:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4ffe:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d5000:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5004:	2101      	movs	r1, #1
   d5006:	b280      	uxth	r0, r0
   d5008:	f002 fdfb 	bl	d7c02 <digitalWrite>
        if (_sck == -1)
   d500c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5010:	3301      	adds	r3, #1
   d5012:	d1ca      	bne.n	d4faa <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d5014:	f7ff fde8 	bl	d4be8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5018:	e7c7      	b.n	d4faa <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d501a:	bf00      	nop
   d501c:	000da590 	.word	0x000da590
   d5020:	0007a120 	.word	0x0007a120

000d5024 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d5024:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d5026:	f7ff ff9b 	bl	d4f60 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d502a:	ba40      	rev16	r0, r0
}
   d502c:	b280      	uxth	r0, r0
   d502e:	bd08      	pop	{r3, pc}

000d5030 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
   d5030:	b538      	push	{r3, r4, r5, lr}
   d5032:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5034:	f7ff fe54 	bl	d4ce0 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d5038:	21fd      	movs	r1, #253	; 0xfd
   d503a:	4620      	mov	r0, r4
   d503c:	f7ff ff90 	bl	d4f60 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d5040:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d5044:	d038      	beq.n	d50b8 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5046:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d504a:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d504c:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5050:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5052:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5056:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d505a:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d505e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d5062:	13d9      	asrs	r1, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5064:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d5068:	4353      	muls	r3, r2
   d506a:	12db      	asrs	r3, r3, #11
   d506c:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d5070:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d5074:	4353      	muls	r3, r2
   d5076:	129b      	asrs	r3, r3, #10
   d5078:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d507a:	129b      	asrs	r3, r3, #10
   d507c:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d5080:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d5084:	4353      	muls	r3, r2
   d5086:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d508a:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d508c:	434b      	muls	r3, r1
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d508e:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d5090:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5094:	4352      	muls	r2, r2
   d5096:	11d2      	asrs	r2, r2, #7
   d5098:	434a      	muls	r2, r1
   d509a:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d509e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d50a2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d50a6:	bfa8      	it	ge
   d50a8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d50ac:	131b      	asrs	r3, r3, #12
   d50ae:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d50b2:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d50b6:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d50b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d50c0 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d50bc:	e7fb      	b.n	d50b6 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d50be:	bf00      	nop
   d50c0:	7fc00000 	.word	0x7fc00000

000d50c4 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d50c4:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d50c6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d50ca:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d50cc:	b085      	sub	sp, #20
   d50ce:	4604      	mov	r4, r0
   d50d0:	460d      	mov	r5, r1
    if (_cs == -1) {
   d50d2:	d118      	bne.n	d5106 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d50d4:	7901      	ldrb	r1, [r0, #4]
   d50d6:	6800      	ldr	r0, [r0, #0]
   d50d8:	f002 fc8a 	bl	d79f0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d50dc:	6820      	ldr	r0, [r4, #0]
   d50de:	6803      	ldr	r3, [r0, #0]
   d50e0:	4629      	mov	r1, r5
   d50e2:	689b      	ldr	r3, [r3, #8]
   d50e4:	4798      	blx	r3
        _wire -> endTransmission();
   d50e6:	6820      	ldr	r0, [r4, #0]
   d50e8:	f002 fc8a 	bl	d7a00 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d50ec:	7921      	ldrb	r1, [r4, #4]
   d50ee:	6820      	ldr	r0, [r4, #0]
   d50f0:	2201      	movs	r2, #1
   d50f2:	f002 fc7a 	bl	d79ea <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d50f6:	6820      	ldr	r0, [r4, #0]
   d50f8:	6803      	ldr	r3, [r0, #0]
   d50fa:	695b      	ldr	r3, [r3, #20]
   d50fc:	4798      	blx	r3
   d50fe:	b2c5      	uxtb	r5, r0
}
   d5100:	4628      	mov	r0, r5
   d5102:	b005      	add	sp, #20
   d5104:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5106:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d510a:	3301      	adds	r3, #1
   d510c:	d10c      	bne.n	d5128 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d510e:	4b15      	ldr	r3, [pc, #84]	; (d5164 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d5110:	9300      	str	r3, [sp, #0]
   d5112:	2300      	movs	r3, #0
   d5114:	f88d 3004 	strb.w	r3, [sp, #4]
   d5118:	4b13      	ldr	r3, [pc, #76]	; (d5168 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d511a:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d511c:	4668      	mov	r0, sp
   d511e:	2301      	movs	r3, #1
   d5120:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5124:	f7ff fd67 	bl	d4bf6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5128:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d512c:	2100      	movs	r1, #0
   d512e:	b280      	uxth	r0, r0
   d5130:	f002 fd67 	bl	d7c02 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5134:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5138:	4620      	mov	r0, r4
   d513a:	f7ff fd1f 	bl	d4b7c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d513e:	2100      	movs	r1, #0
   d5140:	4620      	mov	r0, r4
   d5142:	f7ff fd1b 	bl	d4b7c <_ZN15Adafruit_BME2807spixferEh>
   d5146:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d5148:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d514c:	2101      	movs	r1, #1
   d514e:	b280      	uxth	r0, r0
   d5150:	f002 fd57 	bl	d7c02 <digitalWrite>
        if (_sck == -1)
   d5154:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5158:	3301      	adds	r3, #1
   d515a:	d1d1      	bne.n	d5100 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d515c:	f7ff fd44 	bl	d4be8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5160:	e7ce      	b.n	d5100 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d5162:	bf00      	nop
   d5164:	000da590 	.word	0x000da590
   d5168:	0007a120 	.word	0x0007a120

000d516c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d516c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d516e:	21f3      	movs	r1, #243	; 0xf3
   d5170:	f7ff ffa8 	bl	d50c4 <_ZN15Adafruit_BME2805read8Eh>
}
   d5174:	f000 0001 	and.w	r0, r0, #1
   d5178:	bd08      	pop	{r3, pc}

000d517a <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d517a:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d517c:	2188      	movs	r1, #136	; 0x88
{
   d517e:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5180:	f7ff ff50 	bl	d5024 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5184:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5186:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d5188:	4620      	mov	r0, r4
   d518a:	f7ff ff4b 	bl	d5024 <_ZN15Adafruit_BME2809read16_LEEh>
   d518e:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d5190:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d5192:	4620      	mov	r0, r4
   d5194:	f7ff ff46 	bl	d5024 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5198:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d519a:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d519c:	4620      	mov	r0, r4
   d519e:	f7ff ff41 	bl	d5024 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d51a2:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d51a4:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d51a6:	4620      	mov	r0, r4
   d51a8:	f7ff ff3c 	bl	d5024 <_ZN15Adafruit_BME2809read16_LEEh>
   d51ac:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d51ae:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d51b0:	4620      	mov	r0, r4
   d51b2:	f7ff ff37 	bl	d5024 <_ZN15Adafruit_BME2809read16_LEEh>
   d51b6:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d51b8:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d51ba:	4620      	mov	r0, r4
   d51bc:	f7ff ff32 	bl	d5024 <_ZN15Adafruit_BME2809read16_LEEh>
   d51c0:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d51c2:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d51c4:	4620      	mov	r0, r4
   d51c6:	f7ff ff2d 	bl	d5024 <_ZN15Adafruit_BME2809read16_LEEh>
   d51ca:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d51cc:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d51ce:	4620      	mov	r0, r4
   d51d0:	f7ff ff28 	bl	d5024 <_ZN15Adafruit_BME2809read16_LEEh>
   d51d4:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d51d6:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d51d8:	4620      	mov	r0, r4
   d51da:	f7ff ff23 	bl	d5024 <_ZN15Adafruit_BME2809read16_LEEh>
   d51de:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d51e0:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d51e2:	4620      	mov	r0, r4
   d51e4:	f7ff ff1e 	bl	d5024 <_ZN15Adafruit_BME2809read16_LEEh>
   d51e8:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d51ea:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d51ec:	4620      	mov	r0, r4
   d51ee:	f7ff ff19 	bl	d5024 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d51f2:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d51f4:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d51f6:	4620      	mov	r0, r4
   d51f8:	f7ff ff64 	bl	d50c4 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d51fc:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d51fe:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d5202:	4620      	mov	r0, r4
   d5204:	f7ff ff0e 	bl	d5024 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5208:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d520a:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d520c:	4620      	mov	r0, r4
   d520e:	f7ff ff59 	bl	d50c4 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5212:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5214:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5218:	4620      	mov	r0, r4
   d521a:	f7ff ff53 	bl	d50c4 <_ZN15Adafruit_BME2805read8Eh>
   d521e:	21e5      	movs	r1, #229	; 0xe5
   d5220:	4605      	mov	r5, r0
   d5222:	4620      	mov	r0, r4
   d5224:	f7ff ff4e 	bl	d50c4 <_ZN15Adafruit_BME2805read8Eh>
   d5228:	f000 030f 	and.w	r3, r0, #15
   d522c:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d5230:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d5232:	21e6      	movs	r1, #230	; 0xe6
   d5234:	4620      	mov	r0, r4
   d5236:	f7ff ff45 	bl	d50c4 <_ZN15Adafruit_BME2805read8Eh>
   d523a:	21e5      	movs	r1, #229	; 0xe5
   d523c:	4605      	mov	r5, r0
   d523e:	4620      	mov	r0, r4
   d5240:	f7ff ff40 	bl	d50c4 <_ZN15Adafruit_BME2805read8Eh>
   d5244:	1103      	asrs	r3, r0, #4
   d5246:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d524a:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d524c:	21e7      	movs	r1, #231	; 0xe7
   d524e:	4620      	mov	r0, r4
   d5250:	f7ff ff38 	bl	d50c4 <_ZN15Adafruit_BME2805read8Eh>
   d5254:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d5258:	bd38      	pop	{r3, r4, r5, pc}
	...

000d525c <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d525c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d525e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5262:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d5264:	4604      	mov	r4, r0
   d5266:	460e      	mov	r6, r1
   d5268:	4615      	mov	r5, r2
    if (_cs == -1) {
   d526a:	d112      	bne.n	d5292 <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d526c:	7901      	ldrb	r1, [r0, #4]
   d526e:	6800      	ldr	r0, [r0, #0]
   d5270:	f002 fbbe 	bl	d79f0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5274:	6820      	ldr	r0, [r4, #0]
   d5276:	6803      	ldr	r3, [r0, #0]
   d5278:	4631      	mov	r1, r6
   d527a:	689b      	ldr	r3, [r3, #8]
   d527c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d527e:	6820      	ldr	r0, [r4, #0]
   d5280:	6803      	ldr	r3, [r0, #0]
   d5282:	4629      	mov	r1, r5
   d5284:	689b      	ldr	r3, [r3, #8]
   d5286:	4798      	blx	r3
        _wire -> endTransmission();
   d5288:	6820      	ldr	r0, [r4, #0]
   d528a:	f002 fbb9 	bl	d7a00 <_ZN7TwoWire15endTransmissionEv>
}
   d528e:	b004      	add	sp, #16
   d5290:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d5292:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5296:	3301      	adds	r3, #1
   d5298:	d10c      	bne.n	d52b4 <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d529a:	4b14      	ldr	r3, [pc, #80]	; (d52ec <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d529c:	9300      	str	r3, [sp, #0]
   d529e:	2300      	movs	r3, #0
   d52a0:	f88d 3004 	strb.w	r3, [sp, #4]
   d52a4:	4b12      	ldr	r3, [pc, #72]	; (d52f0 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d52a6:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d52a8:	4668      	mov	r0, sp
   d52aa:	2301      	movs	r3, #1
   d52ac:	f8ad 300c 	strh.w	r3, [sp, #12]
   d52b0:	f7ff fca1 	bl	d4bf6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d52b4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d52b8:	2100      	movs	r1, #0
   d52ba:	b280      	uxth	r0, r0
   d52bc:	f002 fca1 	bl	d7c02 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d52c0:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d52c4:	4620      	mov	r0, r4
   d52c6:	f7ff fc59 	bl	d4b7c <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d52ca:	4629      	mov	r1, r5
   d52cc:	4620      	mov	r0, r4
   d52ce:	f7ff fc55 	bl	d4b7c <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d52d2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d52d6:	2101      	movs	r1, #1
   d52d8:	b280      	uxth	r0, r0
   d52da:	f002 fc92 	bl	d7c02 <digitalWrite>
    if (_sck == -1)
   d52de:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d52e2:	3301      	adds	r3, #1
   d52e4:	d1d3      	bne.n	d528e <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d52e6:	f7ff fc7f 	bl	d4be8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d52ea:	e7d0      	b.n	d528e <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d52ec:	000da590 	.word	0x000da590
   d52f0:	0007a120 	.word	0x0007a120

000d52f4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d52f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d52f6:	00db      	lsls	r3, r3, #3
   d52f8:	f002 0207 	and.w	r2, r2, #7
   d52fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d5300:	4313      	orrs	r3, r2
   d5302:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d5306:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d530a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d530e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d5312:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d5316:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d531a:	f366 1347 	bfi	r3, r6, #5, #3
   d531e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d5322:	00ed      	lsls	r5, r5, #3
   d5324:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d5328:	f007 0707 	and.w	r7, r7, #7
   d532c:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d5330:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d5334:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d5336:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d5338:	431d      	orrs	r5, r3
   d533a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d533e:	f006 0207 	and.w	r2, r6, #7
   d5342:	21f2      	movs	r1, #242	; 0xf2
   d5344:	f7ff ff8a 	bl	d525c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d5348:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d534c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d5350:	f002 0107 	and.w	r1, r2, #7
   d5354:	009b      	lsls	r3, r3, #2
   d5356:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d535a:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d535e:	4620      	mov	r0, r4
   d5360:	21f5      	movs	r1, #245	; 0xf5
   d5362:	f7ff ff7b 	bl	d525c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d5366:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d536a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d536e:	f002 0107 	and.w	r1, r2, #7
   d5372:	009b      	lsls	r3, r3, #2
   d5374:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5378:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d537c:	4620      	mov	r0, r4
   d537e:	21f4      	movs	r1, #244	; 0xf4
}
   d5380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5384:	f7ff bf6a 	b.w	d525c <_ZN15Adafruit_BME2806write8Ehh>

000d5388 <_ZN15Adafruit_BME2804initEv>:
{
   d5388:	b530      	push	{r4, r5, lr}
   d538a:	4604      	mov	r4, r0
    if (_cs == -1) {
   d538c:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d5390:	1c42      	adds	r2, r0, #1
{
   d5392:	b085      	sub	sp, #20
    if (_cs == -1) {
   d5394:	d119      	bne.n	d53ca <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d5396:	6820      	ldr	r0, [r4, #0]
   d5398:	f002 faf8 	bl	d798c <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d539c:	21d0      	movs	r1, #208	; 0xd0
   d539e:	4620      	mov	r0, r4
   d53a0:	f7ff fe90 	bl	d50c4 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d53a4:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d53a6:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d53a8:	d145      	bne.n	d5436 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d53aa:	4620      	mov	r0, r4
   d53ac:	22b6      	movs	r2, #182	; 0xb6
   d53ae:	21e0      	movs	r1, #224	; 0xe0
   d53b0:	f7ff ff54 	bl	d525c <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d53b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d53b8:	f002 f83e 	bl	d7438 <delay>
    while (isReadingCalibration())
   d53bc:	4620      	mov	r0, r4
   d53be:	f7ff fed5 	bl	d516c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d53c2:	4605      	mov	r5, r0
   d53c4:	b328      	cbz	r0, d5412 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d53c6:	2064      	movs	r0, #100	; 0x64
   d53c8:	e7f6      	b.n	d53b8 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d53ca:	2101      	movs	r1, #1
   d53cc:	b280      	uxth	r0, r0
   d53ce:	f002 fc18 	bl	d7c02 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d53d2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d53d6:	2101      	movs	r1, #1
   d53d8:	b280      	uxth	r0, r0
   d53da:	f002 fc01 	bl	d7be0 <pinMode>
        if (_sck == -1) {
   d53de:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d53e2:	1c43      	adds	r3, r0, #1
   d53e4:	d104      	bne.n	d53f0 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d53e6:	f7ff fbad 	bl	d4b44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d53ea:	f001 fdd1 	bl	d6f90 <_ZN8SPIClass5beginEv>
    }
   d53ee:	e7d5      	b.n	d539c <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d53f0:	2101      	movs	r1, #1
   d53f2:	b280      	uxth	r0, r0
   d53f4:	f002 fbf4 	bl	d7be0 <pinMode>
            pinMode(_mosi, OUTPUT);
   d53f8:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d53fc:	2101      	movs	r1, #1
   d53fe:	b280      	uxth	r0, r0
   d5400:	f002 fbee 	bl	d7be0 <pinMode>
            pinMode(_miso, INPUT);
   d5404:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d5408:	2100      	movs	r1, #0
   d540a:	b280      	uxth	r0, r0
   d540c:	f002 fbe8 	bl	d7be0 <pinMode>
   d5410:	e7c4      	b.n	d539c <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d5412:	4620      	mov	r0, r4
   d5414:	f7ff feb1 	bl	d517a <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d5418:	2305      	movs	r3, #5
   d541a:	9300      	str	r3, [sp, #0]
   d541c:	461a      	mov	r2, r3
   d541e:	2103      	movs	r1, #3
   d5420:	4620      	mov	r0, r4
   d5422:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d5426:	f7ff ff65 	bl	d52f4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d542a:	2064      	movs	r0, #100	; 0x64
   d542c:	f002 f804 	bl	d7438 <delay>
   d5430:	2001      	movs	r0, #1
}
   d5432:	b005      	add	sp, #20
   d5434:	bd30      	pop	{r4, r5, pc}
        return false;
   d5436:	2000      	movs	r0, #0
   d5438:	e7fb      	b.n	d5432 <_ZN15Adafruit_BME2804initEv+0xaa>

000d543a <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d543a:	2377      	movs	r3, #119	; 0x77
{
   d543c:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d543e:	7103      	strb	r3, [r0, #4]
{
   d5440:	4604      	mov	r4, r0
	_wire = &Wire;
   d5442:	f002 fc23 	bl	d7c8c <_Z19__fetch_global_Wirev>
   d5446:	6020      	str	r0, [r4, #0]
	status = init();
   d5448:	4620      	mov	r0, r4
   d544a:	f7ff ff9d 	bl	d5388 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d544e:	b930      	cbnz	r0, d545e <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d5450:	2376      	movs	r3, #118	; 0x76
   d5452:	7123      	strb	r3, [r4, #4]
 		status = init();
   d5454:	4620      	mov	r0, r4
}
   d5456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d545a:	f7ff bf95 	b.w	d5388 <_ZN15Adafruit_BME2804initEv>
}
   d545e:	bd10      	pop	{r4, pc}

000d5460 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   d5460:	b510      	push	{r4, lr}
   d5462:	4604      	mov	r4, r0
  if (_spiSetting) {
   d5464:	6840      	ldr	r0, [r0, #4]
   d5466:	b110      	cbz	r0, d546e <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   d5468:	6803      	ldr	r3, [r0, #0]
   d546a:	689b      	ldr	r3, [r3, #8]
   d546c:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   d546e:	4620      	mov	r0, r4
   d5470:	bd10      	pop	{r4, pc}

000d5472 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   d5472:	b538      	push	{r3, r4, r5, lr}
   d5474:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   d5476:	f990 000e 	ldrsb.w	r0, [r0, #14]
   d547a:	2101      	movs	r1, #1
   d547c:	b280      	uxth	r0, r0
   d547e:	f002 fbaf 	bl	d7be0 <pinMode>
  digitalWrite(_cs, HIGH);
   d5482:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d5486:	2101      	movs	r1, #1
   d5488:	b280      	uxth	r0, r0
   d548a:	f002 fbba 	bl	d7c02 <digitalWrite>

  if (_spi) { // hardware SPI
   d548e:	6825      	ldr	r5, [r4, #0]
   d5490:	b135      	cbz	r5, d54a0 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   d5492:	4628      	mov	r0, r5
   d5494:	f001 fd7c 	bl	d6f90 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   d5498:	2001      	movs	r0, #1
   d549a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   d549e:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   d54a0:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d54a4:	2101      	movs	r1, #1
   d54a6:	b280      	uxth	r0, r0
   d54a8:	f002 fb9a 	bl	d7be0 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   d54ac:	7b63      	ldrb	r3, [r4, #13]
   d54ae:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d54b2:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   d54b4:	bf94      	ite	ls
   d54b6:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   d54b8:	2101      	movhi	r1, #1
   d54ba:	b280      	uxth	r0, r0
   d54bc:	f002 fba1 	bl	d7c02 <digitalWrite>
    if (_mosi != -1) {
   d54c0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d54c4:	1c42      	adds	r2, r0, #1
   d54c6:	d009      	beq.n	d54dc <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   d54c8:	2101      	movs	r1, #1
   d54ca:	b280      	uxth	r0, r0
   d54cc:	f002 fb88 	bl	d7be0 <pinMode>
      digitalWrite(_mosi, HIGH);
   d54d0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d54d4:	2101      	movs	r1, #1
   d54d6:	b280      	uxth	r0, r0
   d54d8:	f002 fb93 	bl	d7c02 <digitalWrite>
    if (_miso != -1) {
   d54dc:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d54e0:	1c43      	adds	r3, r0, #1
   d54e2:	d0d9      	beq.n	d5498 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   d54e4:	2100      	movs	r1, #0
   d54e6:	b280      	uxth	r0, r0
   d54e8:	f002 fb7a 	bl	d7be0 <pinMode>
   d54ec:	e7d4      	b.n	d5498 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000d54f0 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d54f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d54f4:	4604      	mov	r4, r0
  if (_spi) {
   d54f6:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d54f8:	b085      	sub	sp, #20
   d54fa:	460d      	mov	r5, r1
  if (_spi) {
   d54fc:	b140      	cbz	r0, d5510 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   d54fe:	2300      	movs	r3, #0
   d5500:	9300      	str	r3, [sp, #0]
   d5502:	4613      	mov	r3, r2
   d5504:	460a      	mov	r2, r1
   d5506:	f001 fde1 	bl	d70cc <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   d550a:	b005      	add	sp, #20
   d550c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   d5510:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d5512:	68a0      	ldr	r0, [r4, #8]
   d5514:	4f48      	ldr	r7, [pc, #288]	; (d5638 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   d5516:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   d551a:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d551c:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   d551e:	bf0c      	ite	eq
   d5520:	f04f 0b01 	moveq.w	fp, #1
   d5524:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d5528:	ea1b 0f03 	tst.w	fp, r3
   d552c:	eb01 0302 	add.w	r3, r1, r2
   d5530:	bf0c      	ite	eq
   d5532:	f04f 0901 	moveq.w	r9, #1
   d5536:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d553a:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   d553c:	9303      	str	r3, [sp, #12]
   d553e:	9b03      	ldr	r3, [sp, #12]
   d5540:	42ab      	cmp	r3, r5
   d5542:	d0e2      	beq.n	d550a <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   d5544:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   d5548:	465e      	mov	r6, fp
    uint8_t reply = 0;
   d554a:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   d554e:	b117      	cbz	r7, d5556 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d5550:	4638      	mov	r0, r7
   d5552:	f001 fabb 	bl	d6acc <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   d5556:	7b63      	ldrb	r3, [r4, #13]
   d5558:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d555c:	d141      	bne.n	d55e2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d555e:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d5562:	1c5a      	adds	r2, r3, #1
   d5564:	d00f      	beq.n	d5586 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   d5566:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d556a:	bf14      	ite	ne
   d556c:	2301      	movne	r3, #1
   d556e:	2300      	moveq	r3, #0
   d5570:	454b      	cmp	r3, r9
   d5572:	d008      	beq.n	d5586 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
          if (towrite)
   d5574:	6963      	ldr	r3, [r4, #20]
   d5576:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d5578:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   d557a:	2900      	cmp	r1, #0
   d557c:	d02c      	beq.n	d55d8 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   d557e:	4302      	orrs	r2, r0
   d5580:	601a      	str	r2, [r3, #0]
   d5582:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   d5586:	69a1      	ldr	r1, [r4, #24]
   d5588:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d558a:	680a      	ldr	r2, [r1, #0]
   d558c:	4313      	orrs	r3, r2
   d558e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d5590:	b117      	cbz	r7, d5598 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   d5592:	4638      	mov	r0, r7
   d5594:	f001 fa9a 	bl	d6acc <HAL_Delay_Microseconds>
        if (_miso != -1) {
   d5598:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d559c:	3301      	adds	r3, #1
   d559e:	d006      	beq.n	d55ae <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   d55a0:	69e3      	ldr	r3, [r4, #28]
   d55a2:	681a      	ldr	r2, [r3, #0]
   d55a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d55a6:	421a      	tst	r2, r3
            reply |= b;
   d55a8:	bf18      	it	ne
   d55aa:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   d55ae:	69a1      	ldr	r1, [r4, #24]
   d55b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d55b2:	680a      	ldr	r2, [r1, #0]
   d55b4:	ea22 0303 	bic.w	r3, r2, r3
   d55b8:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   d55ba:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d55be:	3301      	adds	r3, #1
        buffer[i] = reply;
   d55c0:	bf18      	it	ne
   d55c2:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   d55c6:	7b23      	ldrb	r3, [r4, #12]
   d55c8:	2b00      	cmp	r3, #0
   d55ca:	d132      	bne.n	d5632 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   d55cc:	0076      	lsls	r6, r6, #1
   d55ce:	b2f6      	uxtb	r6, r6
   d55d0:	2e00      	cmp	r6, #0
   d55d2:	d1bc      	bne.n	d554e <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   d55d4:	3501      	adds	r5, #1
   d55d6:	e7b2      	b.n	d553e <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   d55d8:	ea22 0200 	bic.w	r2, r2, r0
   d55dc:	601a      	str	r2, [r3, #0]
   d55de:	4689      	mov	r9, r1
   d55e0:	e7d1      	b.n	d5586 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   d55e2:	69a1      	ldr	r1, [r4, #24]
   d55e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d55e6:	680a      	ldr	r2, [r1, #0]
   d55e8:	4313      	orrs	r3, r2
   d55ea:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d55ec:	b117      	cbz	r7, d55f4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   d55ee:	4638      	mov	r0, r7
   d55f0:	f001 fa6c 	bl	d6acc <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   d55f4:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d55f8:	3301      	adds	r3, #1
   d55fa:	d008      	beq.n	d560e <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
          if (send & b)
   d55fc:	6963      	ldr	r3, [r4, #20]
   d55fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d5600:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   d5602:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   d5606:	bf14      	ite	ne
   d5608:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   d560a:	438a      	biceq	r2, r1
   d560c:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   d560e:	69a1      	ldr	r1, [r4, #24]
   d5610:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5612:	680a      	ldr	r2, [r1, #0]
   d5614:	ea22 0303 	bic.w	r3, r2, r3
   d5618:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   d561a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d561e:	3301      	adds	r3, #1
   d5620:	d0cb      	beq.n	d55ba <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   d5622:	69e3      	ldr	r3, [r4, #28]
   d5624:	681a      	ldr	r2, [r3, #0]
   d5626:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5628:	421a      	tst	r2, r3
            reply |= b;
   d562a:	bf18      	it	ne
   d562c:	ea46 0808 	orrne.w	r8, r6, r8
   d5630:	e7c3      	b.n	d55ba <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   d5632:	0876      	lsrs	r6, r6, #1
   d5634:	e7cc      	b.n	d55d0 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   d5636:	bf00      	nop
   d5638:	0007a120 	.word	0x0007a120

000d563c <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   d563c:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   d563e:	2201      	movs	r2, #1
  uint8_t data = send;
   d5640:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   d5644:	f10d 0107 	add.w	r1, sp, #7
   d5648:	f7ff ff52 	bl	d54f0 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   d564c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5650:	b003      	add	sp, #12
   d5652:	f85d fb04 	ldr.w	pc, [sp], #4

000d5656 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d5656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d565a:	4604      	mov	r4, r0
  if (_spi) {
   d565c:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d565e:	460e      	mov	r6, r1
   d5660:	4617      	mov	r7, r2
   d5662:	461d      	mov	r5, r3
  if (_spi) {
   d5664:	b110      	cbz	r0, d566c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   d5666:	6861      	ldr	r1, [r4, #4]
   d5668:	f001 fcbc 	bl	d6fe4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d566c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d5670:	2100      	movs	r1, #0
   d5672:	b280      	uxth	r0, r0
   d5674:	f002 fac5 	bl	d7c02 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   d5678:	9b06      	ldr	r3, [sp, #24]
   d567a:	eb05 0803 	add.w	r8, r5, r3
   d567e:	4545      	cmp	r5, r8
   d5680:	d108      	bne.n	d5694 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   d5682:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   d5684:	42b7      	cmp	r7, r6
   d5686:	d00b      	beq.n	d56a0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   d5688:	f816 1b01 	ldrb.w	r1, [r6], #1
   d568c:	4620      	mov	r0, r4
   d568e:	f7ff ffd5 	bl	d563c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   d5692:	e7f7      	b.n	d5684 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   d5694:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5698:	4620      	mov	r0, r4
   d569a:	f7ff ffcf 	bl	d563c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   d569e:	e7ee      	b.n	d567e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   d56a0:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d56a4:	2101      	movs	r1, #1
   d56a6:	b280      	uxth	r0, r0
   d56a8:	f002 faab 	bl	d7c02 <digitalWrite>

  if (_spi) {
   d56ac:	6820      	ldr	r0, [r4, #0]
   d56ae:	b108      	cbz	r0, d56b4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   d56b0:	f001 fc7f 	bl	d6fb2 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d56b4:	2001      	movs	r0, #1
   d56b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d56ba <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d56ba:	6042      	str	r2, [r0, #4]
  _begun = false;
   d56bc:	2200      	movs	r2, #0
   d56be:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   d56c0:	2220      	movs	r2, #32
  _addr = addr;
   d56c2:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   d56c4:	60c2      	str	r2, [r0, #12]
#endif
}
   d56c6:	4770      	bx	lr

000d56c8 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   d56c8:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d56ca:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d56cc:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d56ce:	b153      	cbz	r3, d56e6 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d56d0:	7821      	ldrb	r1, [r4, #0]
   d56d2:	6860      	ldr	r0, [r4, #4]
   d56d4:	f002 f98c 	bl	d79f0 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   d56d8:	6860      	ldr	r0, [r4, #4]
   d56da:	f002 f991 	bl	d7a00 <_ZN7TwoWire15endTransmissionEv>
   d56de:	fab0 f080 	clz	r0, r0
   d56e2:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   d56e4:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d56e6:	2101      	movs	r1, #1
   d56e8:	f000 f803 	bl	d56f2 <_ZN18Adafruit_I2CDevice5beginEb>
   d56ec:	2800      	cmp	r0, #0
   d56ee:	d1ef      	bne.n	d56d0 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d56f0:	e7f8      	b.n	d56e4 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d56f2 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d56f2:	b538      	push	{r3, r4, r5, lr}
   d56f4:	4604      	mov	r4, r0
  _wire->begin();
   d56f6:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d56f8:	460d      	mov	r5, r1
  _wire->begin();
   d56fa:	f002 f947 	bl	d798c <_ZN7TwoWire5beginEv>
  _begun = true;
   d56fe:	2001      	movs	r0, #1
   d5700:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   d5702:	b125      	cbz	r5, d570e <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   d5704:	4620      	mov	r0, r4
}
   d5706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   d570a:	f7ff bfdd 	b.w	d56c8 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   d570e:	bd38      	pop	{r3, r4, r5, pc}

000d5710 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   d5710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5714:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d5718:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   d571a:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   d571c:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   d571e:	4432      	add	r2, r6
   d5720:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   d5722:	4604      	mov	r4, r0
   d5724:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   d5726:	d902      	bls.n	d572e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d5728:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   d572a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d572e:	7801      	ldrb	r1, [r0, #0]
   d5730:	6840      	ldr	r0, [r0, #4]
   d5732:	f002 f95d 	bl	d79f0 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d5736:	b97e      	cbnz	r6, d5758 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   d5738:	6860      	ldr	r0, [r4, #4]
   d573a:	6803      	ldr	r3, [r0, #0]
   d573c:	462a      	mov	r2, r5
   d573e:	68db      	ldr	r3, [r3, #12]
   d5740:	4641      	mov	r1, r8
   d5742:	4798      	blx	r3
   d5744:	4285      	cmp	r5, r0
   d5746:	d1ef      	bne.n	d5728 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   d5748:	6860      	ldr	r0, [r4, #4]
   d574a:	4639      	mov	r1, r7
   d574c:	f002 f954 	bl	d79f8 <_ZN7TwoWire15endTransmissionEh>
   d5750:	fab0 f080 	clz	r0, r0
   d5754:	0940      	lsrs	r0, r0, #5
   d5756:	e7e8      	b.n	d572a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d5758:	f1b9 0f00 	cmp.w	r9, #0
   d575c:	d0ec      	beq.n	d5738 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
   d575e:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d5760:	6803      	ldr	r3, [r0, #0]
   d5762:	4632      	mov	r2, r6
   d5764:	68db      	ldr	r3, [r3, #12]
   d5766:	4649      	mov	r1, r9
   d5768:	4798      	blx	r3
   d576a:	42b0      	cmp	r0, r6
   d576c:	d1dc      	bne.n	d5728 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   d576e:	e7e3      	b.n	d5738 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000d5770 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   d5770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5774:	4615      	mov	r5, r2
   d5776:	4604      	mov	r4, r0
   d5778:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   d577a:	b2d2      	uxtb	r2, r2
   d577c:	7801      	ldrb	r1, [r0, #0]
   d577e:	6840      	ldr	r0, [r0, #4]
   d5780:	f002 f921 	bl	d79c6 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   d5784:	4285      	cmp	r5, r0
   d5786:	d10d      	bne.n	d57a4 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   d5788:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   d578a:	fa1f f887 	uxth.w	r8, r7
   d578e:	45a8      	cmp	r8, r5
   d5790:	f107 0701 	add.w	r7, r7, #1
   d5794:	d209      	bcs.n	d57aa <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   d5796:	6860      	ldr	r0, [r4, #4]
   d5798:	6803      	ldr	r3, [r0, #0]
   d579a:	695b      	ldr	r3, [r3, #20]
   d579c:	4798      	blx	r3
   d579e:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   d57a2:	e7f2      	b.n	d578a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   d57a4:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d57a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d57aa:	2001      	movs	r0, #1
   d57ac:	e7fb      	b.n	d57a6 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000d57ae <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d57ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d57b2:	4607      	mov	r7, r0
   d57b4:	4688      	mov	r8, r1
   d57b6:	4616      	mov	r6, r2
   d57b8:	4699      	mov	r9, r3
  size_t pos = 0;
   d57ba:	2500      	movs	r5, #0
  while (pos < len) {
   d57bc:	42b5      	cmp	r5, r6
   d57be:	d212      	bcs.n	d57e6 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   d57c0:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   d57c2:	1b74      	subs	r4, r6, r5
   d57c4:	4294      	cmp	r4, r2
   d57c6:	bf28      	it	cs
   d57c8:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   d57ca:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   d57cc:	42ab      	cmp	r3, r5
   d57ce:	bf94      	ite	ls
   d57d0:	464b      	movls	r3, r9
   d57d2:	2300      	movhi	r3, #0
   d57d4:	4622      	mov	r2, r4
   d57d6:	eb08 0105 	add.w	r1, r8, r5
   d57da:	4638      	mov	r0, r7
   d57dc:	f7ff ffc8 	bl	d5770 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   d57e0:	b110      	cbz	r0, d57e8 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   d57e2:	4425      	add	r5, r4
  while (pos < len) {
   d57e4:	e7ea      	b.n	d57bc <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   d57e6:	2001      	movs	r0, #1
}
   d57e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d57ec <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   d57ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d57ee:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   d57f0:	2300      	movs	r3, #0
   d57f2:	e9cd 3300 	strd	r3, r3, [sp]
   d57f6:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   d57fa:	9e06      	ldr	r6, [sp, #24]
   d57fc:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   d57fe:	f7ff ff87 	bl	d5710 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d5802:	b140      	cbz	r0, d5816 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   d5804:	2301      	movs	r3, #1
   d5806:	4632      	mov	r2, r6
   d5808:	4629      	mov	r1, r5
   d580a:	4620      	mov	r0, r4
}
   d580c:	b002      	add	sp, #8
   d580e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d5812:	f7ff bfcc 	b.w	d57ae <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d5816:	b002      	add	sp, #8
   d5818:	bd70      	pop	{r4, r5, r6, pc}

000d581a <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   d581a:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d581c:	6840      	ldr	r0, [r0, #4]
   d581e:	f002 f8b1 	bl	d7984 <_ZN7TwoWire8setSpeedEm>
  return true;
#else
  (void)desiredclk;
  return false;
#endif
}
   d5822:	2001      	movs	r0, #1
   d5824:	bd08      	pop	{r3, pc}

000d5826 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d5826:	4770      	bx	lr

000d5828 <_ZN15Adafruit_BNO055D1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
   d5828:	4770      	bx	lr
	...

000d582c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 *          Sensor description
 */
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d582c:	460b      	mov	r3, r1
   d582e:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d5830:	2228      	movs	r2, #40	; 0x28
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d5832:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d5834:	2100      	movs	r1, #0
   d5836:	4618      	mov	r0, r3
   d5838:	f004 fbca 	bl	d9fd0 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
   d583c:	4909      	ldr	r1, [pc, #36]	; (d5864 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x38>)
   d583e:	220b      	movs	r2, #11
   d5840:	f004 fbfa 	bl	da038 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d5844:	2200      	movs	r2, #0
  sensor->version = 1;
   d5846:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d5848:	72c2      	strb	r2, [r0, #11]
  sensor->version = 1;
   d584a:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _sensorID;
   d584c:	68e1      	ldr	r1, [r4, #12]
  sensor->type = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay = 0;
   d584e:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->max_value = 0.0F;
   d5850:	2200      	movs	r2, #0
  sensor->sensor_id = _sensorID;
   d5852:	6101      	str	r1, [r0, #16]
  sensor->max_value = 0.0F;
   d5854:	6182      	str	r2, [r0, #24]
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d5856:	2103      	movs	r1, #3
  sensor->min_value = 0.0F;
   d5858:	61c2      	str	r2, [r0, #28]
  sensor->resolution = 0.01F;
   d585a:	4a03      	ldr	r2, [pc, #12]	; (d5868 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x3c>)
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d585c:	6141      	str	r1, [r0, #20]
  sensor->resolution = 0.01F;
   d585e:	6202      	str	r2, [r0, #32]
}
   d5860:	bd10      	pop	{r4, pc}
   d5862:	bf00      	nop
   d5864:	000da59c 	.word	0x000da59c
   d5868:	3c23d70a 	.word	0x3c23d70a

000d586c <_ZN15Adafruit_BNO055D0Ev>:
   d586c:	b510      	push	{r4, lr}
   d586e:	2114      	movs	r1, #20
   d5870:	4604      	mov	r4, r0
   d5872:	f002 fa2f 	bl	d7cd4 <_ZdlPvj>
   d5876:	4620      	mov	r0, r4
   d5878:	bd10      	pop	{r4, pc}
	...

000d587c <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d587c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d587e:	9301      	str	r3, [sp, #4]
                                 TwoWire *theWire) {
   d5880:	4b09      	ldr	r3, [pc, #36]	; (d58a8 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x2c>)
   d5882:	6003      	str	r3, [r0, #0]
   d5884:	2300      	movs	r3, #0
  _sensorID = sensorID;
   d5886:	e9c0 3102 	strd	r3, r1, [r0, #8]
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d588a:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d588c:	2010      	movs	r0, #16
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d588e:	4616      	mov	r6, r2
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d5890:	f7fe fc01 	bl	d4096 <_Znwj>
   d5894:	4605      	mov	r5, r0
   d5896:	b118      	cbz	r0, d58a0 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x24>
   d5898:	9a01      	ldr	r2, [sp, #4]
   d589a:	4631      	mov	r1, r6
   d589c:	f7ff ff0d 	bl	d56ba <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
}
   d58a0:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   d58a2:	60a5      	str	r5, [r4, #8]
}
   d58a4:	b002      	add	sp, #8
   d58a6:	bd70      	pop	{r4, r5, r6, pc}
   d58a8:	000da5ac 	.word	0x000da5ac

000d58ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value) {
   d58ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
  return i2c_dev->write(buffer, 2);
   d58ae:	2300      	movs	r3, #0
   d58b0:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
   d58b4:	f88d 100c 	strb.w	r1, [sp, #12]
   d58b8:	f88d 200d 	strb.w	r2, [sp, #13]
  return i2c_dev->write(buffer, 2);
   d58bc:	2301      	movs	r3, #1
   d58be:	2202      	movs	r2, #2
   d58c0:	a903      	add	r1, sp, #12
   d58c2:	6880      	ldr	r0, [r0, #8]
   d58c4:	f7ff ff24 	bl	d5710 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d58c8:	b005      	add	sp, #20
   d58ca:	f85d fb04 	ldr.w	pc, [sp], #4

000d58ce <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
   d58ce:	b508      	push	{r3, lr}
   d58d0:	460a      	mov	r2, r1
  _mode = mode;
   d58d2:	7401      	strb	r1, [r0, #16]
  write8(BNO055_OPR_MODE_ADDR, _mode);
   d58d4:	213d      	movs	r1, #61	; 0x3d
   d58d6:	f7ff ffe9 	bl	d58ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
}
   d58da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(30);
   d58de:	201e      	movs	r0, #30
   d58e0:	f001 bdaa 	b.w	d7438 <delay>

000d58e4 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>:
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d58e4:	b570      	push	{r4, r5, r6, lr}
   d58e6:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   d58e8:	2100      	movs	r1, #0
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d58ea:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t modeback = _mode;
   d58ec:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   d58ee:	f7ff ffee 	bl	d58ce <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d58f2:	2019      	movs	r0, #25
   d58f4:	f001 fda0 	bl	d7438 <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d58f8:	2200      	movs	r2, #0
   d58fa:	2107      	movs	r1, #7
   d58fc:	4620      	mov	r0, r4
   d58fe:	f7ff ffd5 	bl	d58ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (usextal) {
   d5902:	b185      	cbz	r5, d5926 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x42>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x80);
   d5904:	2280      	movs	r2, #128	; 0x80
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d5906:	213f      	movs	r1, #63	; 0x3f
   d5908:	4620      	mov	r0, r4
   d590a:	f7ff ffcf 	bl	d58ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d590e:	200a      	movs	r0, #10
   d5910:	f001 fd92 	bl	d7438 <delay>
  setMode(modeback);
   d5914:	4620      	mov	r0, r4
   d5916:	4631      	mov	r1, r6
   d5918:	f7ff ffd9 	bl	d58ce <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   d591c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(20);
   d5920:	2014      	movs	r0, #20
   d5922:	f001 bd89 	b.w	d7438 <delay>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d5926:	462a      	mov	r2, r5
   d5928:	e7ed      	b.n	d5906 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x22>

000d592a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
   d592a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[1] = {reg};
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d592c:	2201      	movs	r2, #1
   d592e:	2300      	movs	r3, #0
   d5930:	e9cd 2300 	strd	r2, r3, [sp]
   d5934:	ab03      	add	r3, sp, #12
  uint8_t buffer[1] = {reg};
   d5936:	f88d 100c 	strb.w	r1, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   d593a:	6880      	ldr	r0, [r0, #8]
   d593c:	4619      	mov	r1, r3
   d593e:	f7ff ff55 	bl	d57ec <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
  return (byte)buffer[0];
}
   d5942:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d5946:	b005      	add	sp, #20
   d5948:	f85d fb04 	ldr.w	pc, [sp], #4

000d594c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
   d594c:	b570      	push	{r4, r5, r6, lr}
   d594e:	4604      	mov	r4, r0
   d5950:	460e      	mov	r6, r1
  if (!i2c_dev->begin()) {
   d5952:	6880      	ldr	r0, [r0, #8]
   d5954:	2101      	movs	r1, #1
   d5956:	f7ff fecc 	bl	d56f2 <_ZN18Adafruit_I2CDevice5beginEb>
   d595a:	4605      	mov	r5, r0
   d595c:	b910      	cbnz	r0, d5964 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x18>
    return false;
   d595e:	2500      	movs	r5, #0
}
   d5960:	4628      	mov	r0, r5
   d5962:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
   d5964:	2100      	movs	r1, #0
   d5966:	4620      	mov	r0, r4
   d5968:	f7ff ffdf 	bl	d592a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (id != BNO055_ID) {
   d596c:	28a0      	cmp	r0, #160	; 0xa0
   d596e:	d113      	bne.n	d5998 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4c>
  setMode(OPERATION_MODE_CONFIG);
   d5970:	2100      	movs	r1, #0
   d5972:	4620      	mov	r0, r4
   d5974:	f7ff ffab 	bl	d58ce <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
   d5978:	2220      	movs	r2, #32
   d597a:	213f      	movs	r1, #63	; 0x3f
   d597c:	4620      	mov	r0, r4
   d597e:	f7ff ff95 	bl	d58ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
   d5982:	201e      	movs	r0, #30
    delay(10);
   d5984:	f001 fd58 	bl	d7438 <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
   d5988:	2100      	movs	r1, #0
   d598a:	4620      	mov	r0, r4
   d598c:	f7ff ffcd 	bl	d592a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d5990:	28a0      	cmp	r0, #160	; 0xa0
   d5992:	d00c      	beq.n	d59ae <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x62>
    delay(10);
   d5994:	200a      	movs	r0, #10
   d5996:	e7f5      	b.n	d5984 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x38>
    delay(1000); // hold on for boot
   d5998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d599c:	f001 fd4c 	bl	d7438 <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
   d59a0:	2100      	movs	r1, #0
   d59a2:	4620      	mov	r0, r4
   d59a4:	f7ff ffc1 	bl	d592a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if (id != BNO055_ID) {
   d59a8:	28a0      	cmp	r0, #160	; 0xa0
   d59aa:	d1d8      	bne.n	d595e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x12>
   d59ac:	e7e0      	b.n	d5970 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x24>
  delay(50);
   d59ae:	2032      	movs	r0, #50	; 0x32
   d59b0:	f001 fd42 	bl	d7438 <delay>
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
   d59b4:	2200      	movs	r2, #0
   d59b6:	213e      	movs	r1, #62	; 0x3e
   d59b8:	4620      	mov	r0, r4
   d59ba:	f7ff ff77 	bl	d58ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d59be:	200a      	movs	r0, #10
   d59c0:	f001 fd3a 	bl	d7438 <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d59c4:	2200      	movs	r2, #0
   d59c6:	2107      	movs	r1, #7
   d59c8:	4620      	mov	r0, r4
   d59ca:	f7ff ff6f 	bl	d58ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
   d59ce:	2200      	movs	r2, #0
   d59d0:	213f      	movs	r1, #63	; 0x3f
   d59d2:	4620      	mov	r0, r4
   d59d4:	f7ff ff6a 	bl	d58ac <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d59d8:	200a      	movs	r0, #10
   d59da:	f001 fd2d 	bl	d7438 <delay>
  setMode(mode);
   d59de:	4620      	mov	r0, r4
   d59e0:	4631      	mov	r1, r6
   d59e2:	f7ff ff74 	bl	d58ce <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   d59e6:	2014      	movs	r0, #20
   d59e8:	f001 fd26 	bl	d7438 <delay>
  return true;
   d59ec:	e7b8      	b.n	d5960 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x14>

000d59ee <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>:
                                     uint8_t *accel, uint8_t *mag) {
   d59ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59f0:	460e      	mov	r6, r1
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d59f2:	2135      	movs	r1, #53	; 0x35
                                     uint8_t *accel, uint8_t *mag) {
   d59f4:	9f06      	ldr	r7, [sp, #24]
   d59f6:	4615      	mov	r5, r2
   d59f8:	461c      	mov	r4, r3
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   d59fa:	f7ff ff96 	bl	d592a <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (sys != NULL) {
   d59fe:	b10e      	cbz	r6, d5a04 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x16>
    *sys = (calData >> 6) & 0x03;
   d5a00:	0983      	lsrs	r3, r0, #6
   d5a02:	7033      	strb	r3, [r6, #0]
  if (gyro != NULL) {
   d5a04:	b115      	cbz	r5, d5a0c <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x1e>
    *gyro = (calData >> 4) & 0x03;
   d5a06:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d5a0a:	702b      	strb	r3, [r5, #0]
  if (accel != NULL) {
   d5a0c:	b114      	cbz	r4, d5a14 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x26>
    *accel = (calData >> 2) & 0x03;
   d5a0e:	f3c0 0381 	ubfx	r3, r0, #2, #2
   d5a12:	7023      	strb	r3, [r4, #0]
  if (mag != NULL) {
   d5a14:	b117      	cbz	r7, d5a1c <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x2e>
    *mag = calData & 0x03;
   d5a16:	f000 0003 	and.w	r0, r0, #3
   d5a1a:	7038      	strb	r0, [r7, #0]
}
   d5a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a1e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte *buffer,
                              uint8_t len) {
   d5a1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t reg_buf[1] = {(uint8_t)reg};
   d5a20:	f88d 100c 	strb.w	r1, [sp, #12]
  return i2c_dev->write_then_read(reg_buf, 1, buffer, len);
   d5a24:	2100      	movs	r1, #0
   d5a26:	e9cd 3100 	strd	r3, r1, [sp]
   d5a2a:	4613      	mov	r3, r2
   d5a2c:	a903      	add	r1, sp, #12
   d5a2e:	2201      	movs	r2, #1
   d5a30:	6880      	ldr	r0, [r0, #8]
   d5a32:	f7ff fedb 	bl	d57ec <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
}
   d5a36:	b005      	add	sp, #20
   d5a38:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a3c <_ZN15Adafruit_BNO0557getQuatEv>:
imu::Quaternion Adafruit_BNO055::getQuat() {
   d5a3c:	b500      	push	{lr}
   d5a3e:	ed2d 8b06 	vpush	{d8-d10}
  memset(buffer, 0, 8);
   d5a42:	2300      	movs	r3, #0
imu::Quaternion Adafruit_BNO055::getQuat() {
   d5a44:	b093      	sub	sp, #76	; 0x4c
  readLen(BNO055_QUATERNION_DATA_W_LSB_ADDR, buffer, 8);
   d5a46:	aa08      	add	r2, sp, #32
  memset(buffer, 0, 8);
   d5a48:	e9cd 3308 	strd	r3, r3, [sp, #32]
  readLen(BNO055_QUATERNION_DATA_W_LSB_ADDR, buffer, 8);
   d5a4c:	2120      	movs	r1, #32
   d5a4e:	2308      	movs	r3, #8
   d5a50:	f7ff ffe5 	bl	d5a1e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  x = (((uint16_t)buffer[3]) << 8) | ((uint16_t)buffer[2]);
   d5a54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d5a58:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   d5a5c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d5a60:	b200      	sxth	r0, r0
   d5a62:	f003 fc2d 	bl	d92c0 <__aeabi_i2d>
   d5a66:	2200      	movs	r2, #0
   d5a68:	4b21      	ldr	r3, [pc, #132]	; (d5af0 <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d5a6a:	f003 fc93 	bl	d9394 <__aeabi_dmul>
  y = (((uint16_t)buffer[5]) << 8) | ((uint16_t)buffer[4]);
   d5a6e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d5a72:	ec41 0b1a 	vmov	d10, r0, r1
  y = (((uint16_t)buffer[5]) << 8) | ((uint16_t)buffer[4]);
   d5a76:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   d5a7a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d5a7e:	b200      	sxth	r0, r0
   d5a80:	f003 fc1e 	bl	d92c0 <__aeabi_i2d>
   d5a84:	2200      	movs	r2, #0
   d5a86:	4b1a      	ldr	r3, [pc, #104]	; (d5af0 <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d5a88:	f003 fc84 	bl	d9394 <__aeabi_dmul>
  z = (((uint16_t)buffer[7]) << 8) | ((uint16_t)buffer[6]);
   d5a8c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d5a90:	ec41 0b19 	vmov	d9, r0, r1
  z = (((uint16_t)buffer[7]) << 8) | ((uint16_t)buffer[6]);
   d5a94:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   d5a98:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d5a9c:	b200      	sxth	r0, r0
   d5a9e:	f003 fc0f 	bl	d92c0 <__aeabi_i2d>
   d5aa2:	2200      	movs	r2, #0
   d5aa4:	4b12      	ldr	r3, [pc, #72]	; (d5af0 <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d5aa6:	f003 fc75 	bl	d9394 <__aeabi_dmul>
  w = (((uint16_t)buffer[1]) << 8) | ((uint16_t)buffer[0]);
   d5aaa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d5aae:	ec41 0b18 	vmov	d8, r0, r1
  w = (((uint16_t)buffer[1]) << 8) | ((uint16_t)buffer[0]);
   d5ab2:	f89d 0020 	ldrb.w	r0, [sp, #32]
   d5ab6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
   d5aba:	b200      	sxth	r0, r0
   d5abc:	f003 fc00 	bl	d92c0 <__aeabi_i2d>
   d5ac0:	4b0b      	ldr	r3, [pc, #44]	; (d5af0 <_ZN15Adafruit_BNO0557getQuatEv+0xb4>)
   d5ac2:	2200      	movs	r2, #0
   d5ac4:	f003 fc66 	bl	d9394 <__aeabi_dmul>
}
   d5ac8:	eeb0 1a4a 	vmov.f32	s2, s20
   d5acc:	eef0 1a6a 	vmov.f32	s3, s21
   d5ad0:	eeb0 2a49 	vmov.f32	s4, s18
   d5ad4:	eef0 2a69 	vmov.f32	s5, s19
   d5ad8:	ec41 0b10 	vmov	d0, r0, r1
   d5adc:	eeb0 3a48 	vmov.f32	s6, s16
   d5ae0:	eef0 3a68 	vmov.f32	s7, s17
   d5ae4:	b013      	add	sp, #76	; 0x4c
   d5ae6:	ecbd 8b06 	vpop	{d8-d10}
   d5aea:	f85d fb04 	ldr.w	pc, [sp], #4
   d5aee:	bf00      	nop
   d5af0:	3f100000 	.word	0x3f100000

000d5af4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
   d5af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5af6:	460d      	mov	r5, r1
   d5af8:	4616      	mov	r6, r2

namespace imu {

template <uint8_t N> class Vector {
public:
  Vector() { memset(p_vec, 0, sizeof(double) * N); }
   d5afa:	2100      	movs	r1, #0
   d5afc:	2218      	movs	r2, #24
   d5afe:	4604      	mov	r4, r0
   d5b00:	f004 fa66 	bl	d9fd0 <memset>
  memset(buffer, 0, 6);
   d5b04:	2300      	movs	r3, #0
   d5b06:	9300      	str	r3, [sp, #0]
   d5b08:	f8ad 3004 	strh.w	r3, [sp, #4]
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
   d5b0c:	4628      	mov	r0, r5
   d5b0e:	2306      	movs	r3, #6
   d5b10:	466a      	mov	r2, sp
   d5b12:	4631      	mov	r1, r6
   d5b14:	f7ff ff83 	bl	d5a1e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d5b18:	f89d 3001 	ldrb.w	r3, [sp, #1]
   d5b1c:	f89d 0000 	ldrb.w	r0, [sp]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d5b20:	f89d 7002 	ldrb.w	r7, [sp, #2]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d5b24:	f89d 5004 	ldrb.w	r5, [sp, #4]
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d5b28:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d5b2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d5b30:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d5b34:	f89d 3005 	ldrb.w	r3, [sp, #5]
  switch (vector_type) {
   d5b38:	2e1a      	cmp	r6, #26
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d5b3a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d5b3e:	b200      	sxth	r0, r0
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d5b40:	b23f      	sxth	r7, r7
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d5b42:	b22d      	sxth	r5, r5
  switch (vector_type) {
   d5b44:	d00d      	beq.n	d5b62 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d5b46:	d808      	bhi.n	d5b5a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x66>
   d5b48:	2e0e      	cmp	r6, #14
   d5b4a:	d00a      	beq.n	d5b62 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d5b4c:	2e14      	cmp	r6, #20
   d5b4e:	d008      	beq.n	d5b62 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
   d5b50:	2e08      	cmp	r6, #8
   d5b52:	d021      	beq.n	d5b98 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
}
   d5b54:	4620      	mov	r0, r4
   d5b56:	b003      	add	sp, #12
   d5b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (vector_type) {
   d5b5a:	2e28      	cmp	r6, #40	; 0x28
   d5b5c:	d01c      	beq.n	d5b98 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
   d5b5e:	2e2e      	cmp	r6, #46	; 0x2e
   d5b60:	e7f7      	b.n	d5b52 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5e>
    xyz[0] = ((double)x) / 16.0;
   d5b62:	f003 fbad 	bl	d92c0 <__aeabi_i2d>
   d5b66:	4b19      	ldr	r3, [pc, #100]	; (d5bcc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d5b68:	2200      	movs	r2, #0
   d5b6a:	f003 fc13 	bl	d9394 <__aeabi_dmul>
   d5b6e:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 16.0;
   d5b72:	4638      	mov	r0, r7
   d5b74:	f003 fba4 	bl	d92c0 <__aeabi_i2d>
   d5b78:	4b14      	ldr	r3, [pc, #80]	; (d5bcc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d5b7a:	2200      	movs	r2, #0
   d5b7c:	f003 fc0a 	bl	d9394 <__aeabi_dmul>
   d5b80:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 16.0;
   d5b84:	4628      	mov	r0, r5
   d5b86:	f003 fb9b 	bl	d92c0 <__aeabi_i2d>
   d5b8a:	4b10      	ldr	r3, [pc, #64]	; (d5bcc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d5b8c:	2200      	movs	r2, #0
   d5b8e:	f003 fc01 	bl	d9394 <__aeabi_dmul>
    xyz[2] = ((double)z) / 100.0;
   d5b92:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return xyz;
   d5b96:	e7dd      	b.n	d5b54 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x60>
    xyz[0] = ((double)x) / 100.0;
   d5b98:	f003 fb92 	bl	d92c0 <__aeabi_i2d>
   d5b9c:	4b0c      	ldr	r3, [pc, #48]	; (d5bd0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d5b9e:	2200      	movs	r2, #0
   d5ba0:	f003 fd22 	bl	d95e8 <__aeabi_ddiv>
   d5ba4:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 100.0;
   d5ba8:	4638      	mov	r0, r7
   d5baa:	f003 fb89 	bl	d92c0 <__aeabi_i2d>
   d5bae:	4b08      	ldr	r3, [pc, #32]	; (d5bd0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d5bb0:	2200      	movs	r2, #0
   d5bb2:	f003 fd19 	bl	d95e8 <__aeabi_ddiv>
   d5bb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 100.0;
   d5bba:	4628      	mov	r0, r5
   d5bbc:	f003 fb80 	bl	d92c0 <__aeabi_i2d>
   d5bc0:	4b03      	ldr	r3, [pc, #12]	; (d5bd0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
   d5bc2:	2200      	movs	r2, #0
   d5bc4:	f003 fd10 	bl	d95e8 <__aeabi_ddiv>
   d5bc8:	e7e3      	b.n	d5b92 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9e>
   d5bca:	bf00      	nop
   d5bcc:	3fb00000 	.word	0x3fb00000
   d5bd0:	40590000 	.word	0x40590000

000d5bd4 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
   d5bd4:	b530      	push	{r4, r5, lr}
   d5bd6:	460c      	mov	r4, r1
   d5bd8:	b087      	sub	sp, #28
   d5bda:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   d5bdc:	2220      	movs	r2, #32
   d5bde:	2100      	movs	r1, #0
   d5be0:	1d20      	adds	r0, r4, #4
   d5be2:	f004 f9f5 	bl	d9fd0 <memset>
  event->version = sizeof(sensors_event_t);
   d5be6:	2324      	movs	r3, #36	; 0x24
   d5be8:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d5bea:	68eb      	ldr	r3, [r5, #12]
   d5bec:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_ORIENTATION;
   d5bee:	2303      	movs	r3, #3
   d5bf0:	60a3      	str	r3, [r4, #8]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5bf2:	f000 ff73 	bl	d6adc <HAL_Timer_Get_Milli_Seconds>
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d5bf6:	221a      	movs	r2, #26
  event->timestamp = millis();
   d5bf8:	6120      	str	r0, [r4, #16]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d5bfa:	4629      	mov	r1, r5
   d5bfc:	4668      	mov	r0, sp
   d5bfe:	f7ff ff79 	bl	d5af4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
   d5c02:	e9dd 0100 	ldrd	r0, r1, [sp]
   d5c06:	f003 febd 	bl	d9984 <__aeabi_d2f>
   d5c0a:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
   d5c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d5c10:	f003 feb8 	bl	d9984 <__aeabi_d2f>
   d5c14:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
   d5c16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d5c1a:	f003 feb3 	bl	d9984 <__aeabi_d2f>
   d5c1e:	61e0      	str	r0, [r4, #28]
}
   d5c20:	2001      	movs	r0, #1
   d5c22:	b007      	add	sp, #28
   d5c24:	bd30      	pop	{r4, r5, pc}

000d5c26 <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d5c26:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5c28:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d5c2a:	db66      	blt.n	d5cfa <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d5c2c:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d5c30:	428c      	cmp	r4, r1
   d5c32:	dd62      	ble.n	d5cfa <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d5c34:	2a00      	cmp	r2, #0
   d5c36:	db60      	blt.n	d5cfa <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   d5c38:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d5c3c:	4294      	cmp	r4, r2
   d5c3e:	dd5c      	ble.n	d5cfa <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   d5c40:	7e84      	ldrb	r4, [r0, #26]
   d5c42:	2c02      	cmp	r4, #2
   d5c44:	d05a      	beq.n	d5cfc <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   d5c46:	2c03      	cmp	r4, #3
   d5c48:	d061      	beq.n	d5d0e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   d5c4a:	2c01      	cmp	r4, #1
   d5c4c:	d104      	bne.n	d5c58 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   d5c4e:	8904      	ldrh	r4, [r0, #8]
   d5c50:	43d2      	mvns	r2, r2
   d5c52:	4414      	add	r4, r2
      break;
   d5c54:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d5c56:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   d5c58:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   d5c5c:	428c      	cmp	r4, r1
   d5c5e:	bfa8      	it	ge
   d5c60:	460c      	movge	r4, r1
   d5c62:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   d5c64:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   d5c68:	4294      	cmp	r4, r2
   d5c6a:	bfa8      	it	ge
   d5c6c:	4614      	movge	r4, r2
   d5c6e:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   d5c70:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   d5c74:	428c      	cmp	r4, r1
   d5c76:	bfb8      	it	lt
   d5c78:	460c      	movlt	r4, r1
   d5c7a:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   d5c7c:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   d5c80:	4294      	cmp	r4, r2
   d5c82:	bfb8      	it	lt
   d5c84:	4614      	movlt	r4, r2
   d5c86:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   d5c88:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d5c8c:	2c01      	cmp	r4, #1
   d5c8e:	d116      	bne.n	d5cbe <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   d5c90:	2b01      	cmp	r3, #1
   d5c92:	d042      	beq.n	d5d1a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   d5c94:	2b02      	cmp	r3, #2
   d5c96:	d051      	beq.n	d5d3c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   d5c98:	b98b      	cbnz	r3, d5cbe <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   d5c9a:	2a00      	cmp	r2, #0
   d5c9c:	8905      	ldrh	r5, [r0, #8]
   d5c9e:	6b47      	ldr	r7, [r0, #52]	; 0x34
   d5ca0:	4614      	mov	r4, r2
   d5ca2:	bfb8      	it	lt
   d5ca4:	1dd4      	addlt	r4, r2, #7
   d5ca6:	10e4      	asrs	r4, r4, #3
   d5ca8:	fb14 1405 	smlabb	r4, r4, r5, r1
   d5cac:	f002 0607 	and.w	r6, r2, #7
   d5cb0:	2501      	movs	r5, #1
   d5cb2:	fa05 f606 	lsl.w	r6, r5, r6
   d5cb6:	5d3d      	ldrb	r5, [r7, r4]
   d5cb8:	ea25 0506 	bic.w	r5, r5, r6
   d5cbc:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   d5cbe:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   d5cc2:	2c04      	cmp	r4, #4
   d5cc4:	d119      	bne.n	d5cfa <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   d5cc6:	8904      	ldrh	r4, [r0, #8]
   d5cc8:	fb14 f202 	smulbb	r2, r4, r2
   d5ccc:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   d5cd0:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   d5cd4:	f342 024f 	sbfx	r2, r2, #1, #16
   d5cd8:	eb02 0264 	add.w	r2, r2, r4, asr #1
   d5cdc:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
   d5cde:	5ca0      	ldrb	r0, [r4, r2]
   d5ce0:	07c9      	lsls	r1, r1, #31
        uint8_t t = pixelptr[0] & 0x0F;
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   d5ce2:	bf4b      	itete	mi
   d5ce4:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   d5ce8:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   d5cec:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   d5cf0:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   d5cf4:	bf48      	it	mi
   d5cf6:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   d5cf8:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   d5cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   d5cfc:	8904      	ldrh	r4, [r0, #8]
   d5cfe:	43c9      	mvns	r1, r1
   d5d00:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d5d02:	8944      	ldrh	r4, [r0, #10]
   d5d04:	43d2      	mvns	r2, r2
   d5d06:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   d5d08:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d5d0a:	b212      	sxth	r2, r2
      break;
   d5d0c:	e7a4      	b.n	d5c58 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d5d0e:	8944      	ldrh	r4, [r0, #10]
   d5d10:	43c9      	mvns	r1, r1
   d5d12:	440c      	add	r4, r1
      break;
   d5d14:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d5d16:	b222      	sxth	r2, r4
      break;
   d5d18:	e79e      	b.n	d5c58 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   d5d1a:	2a00      	cmp	r2, #0
   d5d1c:	8905      	ldrh	r5, [r0, #8]
   d5d1e:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d5d20:	4614      	mov	r4, r2
   d5d22:	bfb8      	it	lt
   d5d24:	1dd4      	addlt	r4, r2, #7
   d5d26:	10e4      	asrs	r4, r4, #3
   d5d28:	fb14 1405 	smlabb	r4, r4, r5, r1
   d5d2c:	f002 0707 	and.w	r7, r2, #7
   d5d30:	2501      	movs	r5, #1
   d5d32:	40bd      	lsls	r5, r7
   d5d34:	5d37      	ldrb	r7, [r6, r4]
   d5d36:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d5d38:	5535      	strb	r5, [r6, r4]
        break;
   d5d3a:	e7c0      	b.n	d5cbe <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   d5d3c:	2a00      	cmp	r2, #0
   d5d3e:	8905      	ldrh	r5, [r0, #8]
   d5d40:	6b46      	ldr	r6, [r0, #52]	; 0x34
   d5d42:	4614      	mov	r4, r2
   d5d44:	bfb8      	it	lt
   d5d46:	1dd4      	addlt	r4, r2, #7
   d5d48:	10e4      	asrs	r4, r4, #3
   d5d4a:	fb14 1405 	smlabb	r4, r4, r5, r1
   d5d4e:	f002 0707 	and.w	r7, r2, #7
   d5d52:	2501      	movs	r5, #1
   d5d54:	40bd      	lsls	r5, r7
   d5d56:	5d37      	ldrb	r7, [r6, r4]
   d5d58:	407d      	eors	r5, r7
   d5d5a:	e7ed      	b.n	d5d38 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

000d5d5c <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   d5d5c:	b538      	push	{r3, r4, r5, lr}
   d5d5e:	460d      	mov	r5, r1
   d5d60:	4611      	mov	r1, r2
   d5d62:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d5d64:	b21a      	sxth	r2, r3
   d5d66:	b209      	sxth	r1, r1
   d5d68:	f000 fa96 	bl	d6298 <_ZN12Adafruit_GFXC1Ess>
   d5d6c:	9a06      	ldr	r2, [sp, #24]
   d5d6e:	4b0b      	ldr	r3, [pc, #44]	; (d5d9c <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   d5d70:	62e2      	str	r2, [r4, #44]	; 0x2c
   d5d72:	9a07      	ldr	r2, [sp, #28]
   d5d74:	6023      	str	r3, [r4, #0]
   d5d76:	2300      	movs	r3, #0
   d5d78:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   d5d7c:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   d5d80:	f04f 33ff 	mov.w	r3, #4294967295
   d5d84:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   d5d88:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   d5d8c:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   d5d8e:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   d5d90:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   d5d94:	6523      	str	r3, [r4, #80]	; 0x50
}
   d5d96:	4620      	mov	r0, r4
   d5d98:	bd38      	pop	{r3, r4, r5, pc}
   d5d9a:	bf00      	nop
   d5d9c:	000da5c8 	.word	0x000da5c8

000d5da0 <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   d5da0:	b538      	push	{r3, r4, r5, lr}
   d5da2:	4b0c      	ldr	r3, [pc, #48]	; (d5dd4 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   d5da4:	6003      	str	r3, [r0, #0]
   d5da6:	4604      	mov	r4, r0
  if (buffer) {
   d5da8:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d5daa:	b118      	cbz	r0, d5db4 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   d5dac:	f001 f882 	bl	d6eb4 <free>
    buffer = NULL;
   d5db0:	2300      	movs	r3, #0
   d5db2:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   d5db4:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d5db6:	b135      	cbz	r5, d5dc6 <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   d5db8:	4628      	mov	r0, r5
   d5dba:	f7ff fb51 	bl	d5460 <_ZN18Adafruit_SPIDeviceD1Ev>
   d5dbe:	2138      	movs	r1, #56	; 0x38
   d5dc0:	4628      	mov	r0, r5
   d5dc2:	f001 ff87 	bl	d7cd4 <_ZdlPvj>
  if (i2c_dev)
   d5dc6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5dc8:	b110      	cbz	r0, d5dd0 <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   d5dca:	2110      	movs	r1, #16
   d5dcc:	f001 ff82 	bl	d7cd4 <_ZdlPvj>
}
   d5dd0:	4620      	mov	r0, r4
   d5dd2:	bd38      	pop	{r3, r4, r5, pc}
   d5dd4:	000da5c8 	.word	0x000da5c8

000d5dd8 <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d5dd8:	b530      	push	{r4, r5, lr}
   d5dda:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   d5ddc:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   d5dde:	f88d 100f 	strb.w	r1, [sp, #15]
   d5de2:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   d5de4:	b17d      	cbz	r5, d5e06 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d5de6:	2300      	movs	r3, #0
   d5de8:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   d5dea:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   d5dee:	f88d 3014 	strb.w	r3, [sp, #20]
   d5df2:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   d5df6:	2301      	movs	r3, #1
   d5df8:	2202      	movs	r2, #2
   d5dfa:	a905      	add	r1, sp, #20
   d5dfc:	4628      	mov	r0, r5
   d5dfe:	f7ff fc87 	bl	d5710 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d5e02:	b007      	add	sp, #28
   d5e04:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   d5e06:	4629      	mov	r1, r5
   d5e08:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d5e0c:	f001 fef9 	bl	d7c02 <digitalWrite>
    spi_dev->write(&c, 1);
   d5e10:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5e12:	9500      	str	r5, [sp, #0]
   d5e14:	462b      	mov	r3, r5
   d5e16:	2201      	movs	r2, #1
   d5e18:	f10d 010f 	add.w	r1, sp, #15
   d5e1c:	f7ff fc1b 	bl	d5656 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   d5e20:	e7ef      	b.n	d5e02 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000d5e22 <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   d5e22:	2900      	cmp	r1, #0
   d5e24:	bf14      	ite	ne
   d5e26:	21a7      	movne	r1, #167	; 0xa7
   d5e28:	21a6      	moveq	r1, #166	; 0xa6
   d5e2a:	f7ff bfd5 	b.w	d5dd8 <_ZN17Adafruit_GrayOLED12oled_commandEh>

000d5e2e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d5e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   d5e30:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   d5e32:	b085      	sub	sp, #20
   d5e34:	4604      	mov	r4, r0
   d5e36:	460e      	mov	r6, r1
   d5e38:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   d5e3a:	b165      	cbz	r5, d5e56 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d5e3c:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d5e3e:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   d5e42:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   d5e46:	2301      	movs	r3, #1
   d5e48:	9000      	str	r0, [sp, #0]
   d5e4a:	9301      	str	r3, [sp, #4]
   d5e4c:	4628      	mov	r0, r5
   d5e4e:	f7ff fc5f 	bl	d5710 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   d5e52:	b005      	add	sp, #20
   d5e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   d5e56:	4629      	mov	r1, r5
   d5e58:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   d5e5c:	f001 fed1 	bl	d7c02 <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   d5e60:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5e62:	9500      	str	r5, [sp, #0]
   d5e64:	462b      	mov	r3, r5
   d5e66:	463a      	mov	r2, r7
   d5e68:	4631      	mov	r1, r6
   d5e6a:	f7ff fbf4 	bl	d5656 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d5e6e:	e7f0      	b.n	d5e52 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000d5e70 <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   d5e70:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d5e72:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   d5e76:	8903      	ldrh	r3, [r0, #8]
   d5e78:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   d5e7c:	fb12 f203 	smulbb	r2, r2, r3
   d5e80:	1dcb      	adds	r3, r1, #7
   d5e82:	bf48      	it	mi
   d5e84:	f101 030e 	addmi.w	r3, r1, #14
   d5e88:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   d5e8a:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   d5e8c:	435a      	muls	r2, r3
   d5e8e:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d5e90:	2100      	movs	r1, #0
   d5e92:	f004 f89d 	bl	d9fd0 <memset>
  window_x1 = 0;
   d5e96:	2300      	movs	r3, #0
   d5e98:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d5e9a:	8923      	ldrh	r3, [r4, #8]
   d5e9c:	3b01      	subs	r3, #1
   d5e9e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d5ea0:	8963      	ldrh	r3, [r4, #10]
   d5ea2:	3b01      	subs	r3, #1
   d5ea4:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   d5ea6:	bd10      	pop	{r4, pc}

000d5ea8 <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d5ea8:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   d5eaa:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   d5eac:	4604      	mov	r4, r0
   d5eae:	460e      	mov	r6, r1
   d5eb0:	4615      	mov	r5, r2
  if ((!buffer) &&
   d5eb2:	b30b      	cbz	r3, d5ef8 <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   d5eb4:	2d00      	cmp	r5, #0
   d5eb6:	d133      	bne.n	d5f20 <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   d5eb8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5eba:	2b00      	cmp	r3, #0
   d5ebc:	d050      	beq.n	d5f60 <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   d5ebe:	2010      	movs	r0, #16
   d5ec0:	f7fe f8e9 	bl	d4096 <_Znwj>
   d5ec4:	4605      	mov	r5, r0
   d5ec6:	b118      	cbz	r0, d5ed0 <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   d5ec8:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5eca:	4631      	mov	r1, r6
   d5ecc:	f7ff fbf5 	bl	d56ba <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d5ed0:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   d5ed2:	b31d      	cbz	r5, d5f1c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d5ed4:	2101      	movs	r1, #1
   d5ed6:	4628      	mov	r0, r5
   d5ed8:	f7ff fc0b 	bl	d56f2 <_ZN18Adafruit_I2CDevice5beginEb>
   d5edc:	b1f0      	cbz	r0, d5f1c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   d5ede:	4620      	mov	r0, r4
   d5ee0:	f7ff ffc6 	bl	d5e70 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   d5ee4:	2300      	movs	r3, #0
   d5ee6:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   d5ee8:	8923      	ldrh	r3, [r4, #8]
   d5eea:	3b01      	subs	r3, #1
   d5eec:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   d5eee:	8963      	ldrh	r3, [r4, #10]
   d5ef0:	3b01      	subs	r3, #1
   d5ef2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   d5ef4:	2001      	movs	r0, #1
   d5ef6:	e012      	b.n	d5f1e <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   d5ef8:	8923      	ldrh	r3, [r4, #8]
   d5efa:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   d5efe:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   d5f02:	fb10 f003 	smulbb	r0, r0, r3
   d5f06:	1dd3      	adds	r3, r2, #7
   d5f08:	bf48      	it	mi
   d5f0a:	f102 030e 	addmi.w	r3, r2, #14
   d5f0e:	10db      	asrs	r3, r3, #3
   d5f10:	4358      	muls	r0, r3
   d5f12:	f000 ffc7 	bl	d6ea4 <malloc>
   d5f16:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   d5f18:	2800      	cmp	r0, #0
   d5f1a:	d1cb      	bne.n	d5eb4 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   d5f1c:	2000      	movs	r0, #0
}
   d5f1e:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   d5f20:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d5f22:	2800      	cmp	r0, #0
   d5f24:	dbc8      	blt.n	d5eb8 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   d5f26:	2101      	movs	r1, #1
   d5f28:	b280      	uxth	r0, r0
   d5f2a:	f001 fe59 	bl	d7be0 <pinMode>
    digitalWrite(rstPin, HIGH);
   d5f2e:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d5f32:	2101      	movs	r1, #1
   d5f34:	f001 fe65 	bl	d7c02 <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   d5f38:	200a      	movs	r0, #10
   d5f3a:	f001 fa7d 	bl	d7438 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d5f3e:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d5f42:	2100      	movs	r1, #0
   d5f44:	f001 fe5d 	bl	d7c02 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d5f48:	200a      	movs	r0, #10
   d5f4a:	f001 fa75 	bl	d7438 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d5f4e:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   d5f52:	2101      	movs	r1, #1
   d5f54:	f001 fe55 	bl	d7c02 <digitalWrite>
    delay(10);
   d5f58:	200a      	movs	r0, #10
   d5f5a:	f001 fa6d 	bl	d7438 <delay>
   d5f5e:	e7ab      	b.n	d5eb8 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   d5f60:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5f62:	2800      	cmp	r0, #0
   d5f64:	d0da      	beq.n	d5f1c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   d5f66:	f7ff fa84 	bl	d5472 <_ZN18Adafruit_SPIDevice5beginEv>
   d5f6a:	2800      	cmp	r0, #0
   d5f6c:	d0d6      	beq.n	d5f1c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d5f6e:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d5f72:	2101      	movs	r1, #1
   d5f74:	f001 fe34 	bl	d7be0 <pinMode>
   d5f78:	e7b1      	b.n	d5ede <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000d5f7a <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   d5f7a:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d5f7c:	2381      	movs	r3, #129	; 0x81
   d5f7e:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   d5f82:	2202      	movs	r2, #2
   d5f84:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   d5f86:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   d5f8a:	f7ff ff50 	bl	d5e2e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   d5f8e:	b003      	add	sp, #12
   d5f90:	f85d fb04 	ldr.w	pc, [sp], #4

000d5f94 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
   d5f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f98:	b085      	sub	sp, #20
   d5f9a:	461f      	mov	r7, r3
   d5f9c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d5fa0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5fa4:	eba8 0902 	sub.w	r9, r8, r2
   d5fa8:	eba7 0a01 	sub.w	sl, r7, r1
   d5fac:	f1b9 0f00 	cmp.w	r9, #0
   d5fb0:	bfb8      	it	lt
   d5fb2:	f1c9 0900 	rsblt	r9, r9, #0
   d5fb6:	f1ba 0f00 	cmp.w	sl, #0
   d5fba:	bfb8      	it	lt
   d5fbc:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d5fc0:	45d1      	cmp	r9, sl
                             uint16_t color) {
   d5fc2:	4683      	mov	fp, r0
   d5fc4:	460c      	mov	r4, r1
   d5fc6:	4615      	mov	r5, r2
  if (steep) {
   d5fc8:	dd04      	ble.n	d5fd4 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d5fca:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
   d5fcc:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
   d5fce:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
   d5fd0:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
   d5fd2:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d5fd4:	42bc      	cmp	r4, r7
   d5fd6:	dd05      	ble.n	d5fe4 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d5fd8:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
   d5fda:	4645      	mov	r5, r8
   d5fdc:	4690      	mov	r8, r2
  if (x0 > x1) {
   d5fde:	4622      	mov	r2, r4
   d5fe0:	463c      	mov	r4, r7
   d5fe2:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d5fe4:	1b3e      	subs	r6, r7, r4
   d5fe6:	b2b2      	uxth	r2, r6
   d5fe8:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d5fea:	eba8 0205 	sub.w	r2, r8, r5
   d5fee:	2a00      	cmp	r2, #0
   d5ff0:	bfb8      	it	lt
   d5ff2:	4252      	neglt	r2, r2
   d5ff4:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d5ff6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d5ffa:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d5ffe:	4545      	cmp	r5, r8
   d6000:	bfb4      	ite	lt
   d6002:	2201      	movlt	r2, #1
   d6004:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d6008:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d600a:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
   d600c:	42bc      	cmp	r4, r7
   d600e:	dc1c      	bgt.n	d604a <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
    if (steep) {
   d6010:	f8db 2000 	ldr.w	r2, [fp]
      writePixel(y0, x0, color);
   d6014:	9303      	str	r3, [sp, #12]
    if (steep) {
   d6016:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
   d6018:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d601c:	bfc7      	ittee	gt
   d601e:	4629      	movgt	r1, r5
   d6020:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
   d6022:	462a      	movle	r2, r5
   d6024:	4621      	movle	r1, r4
   d6026:	4658      	mov	r0, fp
   d6028:	47c0      	blx	r8
    }
    err -= dy;
   d602a:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
   d602c:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d602e:	1ab6      	subs	r6, r6, r2
   d6030:	b2b1      	uxth	r1, r6
   d6032:	b236      	sxth	r6, r6
    if (err < 0) {
   d6034:	2e00      	cmp	r6, #0
   d6036:	da05      	bge.n	d6044 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
      y0 += ystep;
   d6038:	9a02      	ldr	r2, [sp, #8]
   d603a:	4415      	add	r5, r2
      err += dx;
   d603c:	9a00      	ldr	r2, [sp, #0]
   d603e:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d6040:	b22d      	sxth	r5, r5
      err += dx;
   d6042:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
   d6044:	3401      	adds	r4, #1
   d6046:	b224      	sxth	r4, r4
   d6048:	e7e0      	b.n	d600c <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
    }
  }
}
   d604a:	b005      	add	sp, #20
   d604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6050 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
   d6050:	4770      	bx	lr

000d6052 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
   d6052:	b410      	push	{r4}
  drawPixel(x, y, color);
   d6054:	6804      	ldr	r4, [r0, #0]
   d6056:	6924      	ldr	r4, [r4, #16]
   d6058:	46a4      	mov	ip, r4
}
   d605a:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
   d605e:	4760      	bx	ip

000d6060 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
   d6060:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
   d6062:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d6064:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
   d6068:	9502      	str	r5, [sp, #8]
   d606a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d606c:	46a4      	mov	ip, r4
}
   d606e:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
   d6070:	4760      	bx	ip

000d6072 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
   d6072:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
   d6074:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   d6076:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
   d607a:	9502      	str	r5, [sp, #8]
   d607c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d607e:	46a4      	mov	ip, r4
}
   d6080:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
   d6082:	4760      	bx	ip

000d6084 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
   d6084:	b470      	push	{r4, r5, r6}
   d6086:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d608a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
   d608e:	6804      	ldr	r4, [r0, #0]
   d6090:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d6094:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d6096:	46a4      	mov	ip, r4
}
   d6098:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
   d609a:	4760      	bx	ip

000d609c <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
   d609c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d60a0:	461c      	mov	r4, r3
  startWrite();
   d60a2:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d60a4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d60a8:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d60aa:	4605      	mov	r5, r0
   d60ac:	4616      	mov	r6, r2
  writeLine(x, y, x, y + h - 1, color);
   d60ae:	3c01      	subs	r4, #1
   d60b0:	4434      	add	r4, r6
                                 uint16_t color) {
   d60b2:	460f      	mov	r7, r1
  writeLine(x, y, x, y + h - 1, color);
   d60b4:	b224      	sxth	r4, r4
  startWrite();
   d60b6:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
   d60b8:	682b      	ldr	r3, [r5, #0]
   d60ba:	f8cd 8004 	str.w	r8, [sp, #4]
   d60be:	9400      	str	r4, [sp, #0]
   d60c0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d60c2:	4628      	mov	r0, r5
   d60c4:	463b      	mov	r3, r7
   d60c6:	4632      	mov	r2, r6
   d60c8:	4639      	mov	r1, r7
   d60ca:	47a0      	blx	r4
  endWrite();
   d60cc:	682b      	ldr	r3, [r5, #0]
   d60ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d60d0:	4628      	mov	r0, r5
}
   d60d2:	b002      	add	sp, #8
   d60d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d60d8:	4718      	bx	r3

000d60da <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
   d60da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d60de:	461d      	mov	r5, r3
  startWrite();
   d60e0:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   d60e2:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   d60e6:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   d60e8:	4604      	mov	r4, r0
   d60ea:	4617      	mov	r7, r2
   d60ec:	460e      	mov	r6, r1
  startWrite();
   d60ee:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
   d60f0:	e9cd 7800 	strd	r7, r8, [sp]
   d60f4:	6822      	ldr	r2, [r4, #0]
   d60f6:	1e6b      	subs	r3, r5, #1
   d60f8:	4433      	add	r3, r6
   d60fa:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d60fc:	4620      	mov	r0, r4
   d60fe:	b21b      	sxth	r3, r3
   d6100:	463a      	mov	r2, r7
   d6102:	4631      	mov	r1, r6
   d6104:	47a8      	blx	r5
  endWrite();
   d6106:	6823      	ldr	r3, [r4, #0]
   d6108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d610a:	4620      	mov	r0, r4
}
   d610c:	b002      	add	sp, #8
   d610e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   d6112:	4718      	bx	r3

000d6114 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d6114:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6118:	461e      	mov	r6, r3
  startWrite();
   d611a:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d611c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
   d6120:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d6122:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d6126:	460c      	mov	r4, r1
   d6128:	4605      	mov	r5, r0
   d612a:	4617      	mov	r7, r2
  startWrite();
   d612c:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
   d612e:	4426      	add	r6, r4
   d6130:	42b4      	cmp	r4, r6
   d6132:	682b      	ldr	r3, [r5, #0]
   d6134:	da0b      	bge.n	d614e <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
   d6136:	f8cd 8000 	str.w	r8, [sp]
   d613a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d613e:	4621      	mov	r1, r4
   d6140:	464b      	mov	r3, r9
   d6142:	463a      	mov	r2, r7
   d6144:	4628      	mov	r0, r5
   d6146:	3401      	adds	r4, #1
   d6148:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
   d614a:	b224      	sxth	r4, r4
   d614c:	e7f0      	b.n	d6130 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
   d614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6150:	4628      	mov	r0, r5
}
   d6152:	b002      	add	sp, #8
   d6154:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d6158:	4718      	bx	r3

000d615a <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d615a:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d615c:	6802      	ldr	r2, [r0, #0]
   d615e:	9101      	str	r1, [sp, #4]
   d6160:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d6164:	9100      	str	r1, [sp, #0]
   d6166:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d6168:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d616c:	2200      	movs	r2, #0
   d616e:	4611      	mov	r1, r2
   d6170:	47a0      	blx	r4
}
   d6172:	b002      	add	sp, #8
   d6174:	bd10      	pop	{r4, pc}

000d6176 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d6176:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d617a:	461d      	mov	r5, r3
  startWrite();
   d617c:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   d617e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
   d6182:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   d6184:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d6188:	4604      	mov	r4, r0
   d618a:	460f      	mov	r7, r1
   d618c:	4616      	mov	r6, r2
  startWrite();
   d618e:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
   d6190:	6823      	ldr	r3, [r4, #0]
   d6192:	f8cd 8000 	str.w	r8, [sp]
   d6196:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d619a:	4632      	mov	r2, r6
   d619c:	462b      	mov	r3, r5
   d619e:	4639      	mov	r1, r7
   d61a0:	4620      	mov	r0, r4
   d61a2:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
   d61a4:	6823      	ldr	r3, [r4, #0]
   d61a6:	f8cd 8000 	str.w	r8, [sp]
   d61aa:	f109 32ff 	add.w	r2, r9, #4294967295
   d61ae:	4432      	add	r2, r6
   d61b0:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d61b4:	4639      	mov	r1, r7
   d61b6:	462b      	mov	r3, r5
   d61b8:	4620      	mov	r0, r4
   d61ba:	b212      	sxth	r2, r2
   d61bc:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
   d61be:	6823      	ldr	r3, [r4, #0]
   d61c0:	f8cd 8000 	str.w	r8, [sp]
   d61c4:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d61c8:	4632      	mov	r2, r6
   d61ca:	464b      	mov	r3, r9
   d61cc:	4639      	mov	r1, r7
   d61ce:	4620      	mov	r0, r4
   d61d0:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
   d61d2:	1e6b      	subs	r3, r5, #1
   d61d4:	19d9      	adds	r1, r3, r7
   d61d6:	6823      	ldr	r3, [r4, #0]
   d61d8:	f8cd 8000 	str.w	r8, [sp]
   d61dc:	6a1d      	ldr	r5, [r3, #32]
   d61de:	4620      	mov	r0, r4
   d61e0:	464b      	mov	r3, r9
   d61e2:	4632      	mov	r2, r6
   d61e4:	b209      	sxth	r1, r1
   d61e6:	47a8      	blx	r5
  endWrite();
   d61e8:	6823      	ldr	r3, [r4, #0]
   d61ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d61ec:	4620      	mov	r0, r4
}
   d61ee:	b002      	add	sp, #8
   d61f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   d61f4:	4718      	bx	r3

000d61f6 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
   d61f6:	4770      	bx	lr

000d61f8 <_ZN12Adafruit_GFX8drawLineEsssst>:
                            uint16_t color) {
   d61f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if (x0 == x1) {
   d61fc:	4299      	cmp	r1, r3
                            uint16_t color) {
   d61fe:	4616      	mov	r6, r2
   d6200:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d6204:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d6208:	6802      	ldr	r2, [r0, #0]
   d620a:	4680      	mov	r8, r0
   d620c:	460d      	mov	r5, r1
   d620e:	461c      	mov	r4, r3
  if (x0 == x1) {
   d6210:	d113      	bne.n	d623a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
    if (y0 > y1)
   d6212:	42be      	cmp	r6, r7
   d6214:	bfc8      	it	gt
   d6216:	4633      	movgt	r3, r6
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d6218:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    if (y0 > y1)
   d621c:	bfc4      	itt	gt
   d621e:	463e      	movgt	r6, r7
   d6220:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d6222:	1c7b      	adds	r3, r7, #1
   d6224:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d6226:	1b9b      	subs	r3, r3, r6
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d6228:	b21b      	sxth	r3, r3
   d622a:	4632      	mov	r2, r6
   d622c:	4629      	mov	r1, r5
   d622e:	4640      	mov	r0, r8
   d6230:	46a4      	mov	ip, r4
}
   d6232:	b003      	add	sp, #12
   d6234:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d6238:	4760      	bx	ip
  } else if (y0 == y1) {
   d623a:	42be      	cmp	r6, r7
   d623c:	d10a      	bne.n	d6254 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
    if (x0 > x1)
   d623e:	4299      	cmp	r1, r3
   d6240:	bfc2      	ittt	gt
   d6242:	460b      	movgt	r3, r1
   d6244:	4625      	movgt	r5, r4
   d6246:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d6248:	1c63      	adds	r3, r4, #1
   d624a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d624e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d6250:	1b5b      	subs	r3, r3, r5
   d6252:	e7e9      	b.n	d6228 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
    startWrite();
   d6254:	6953      	ldr	r3, [r2, #20]
   d6256:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
   d6258:	e9cd 7900 	strd	r7, r9, [sp]
   d625c:	f8d8 3000 	ldr.w	r3, [r8]
   d6260:	4640      	mov	r0, r8
   d6262:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d6264:	4632      	mov	r2, r6
   d6266:	4623      	mov	r3, r4
   d6268:	4629      	mov	r1, r5
   d626a:	47b8      	blx	r7
    endWrite();
   d626c:	f8d8 3000 	ldr.w	r3, [r8]
   d6270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6272:	4640      	mov	r0, r8
}
   d6274:	b003      	add	sp, #12
   d6276:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
   d627a:	4718      	bx	r3

000d627c <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   d627c:	f001 0303 	and.w	r3, r1, #3
   d6280:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d6284:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
   d6286:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
   d6288:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d628c:	bf59      	ittee	pl
   d628e:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   d6290:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
   d6292:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   d6294:	81c3      	strhmi	r3, [r0, #14]
}
   d6296:	4770      	bx	lr

000d6298 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d6298:	b530      	push	{r4, r5, lr}
   d629a:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
   d629c:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
   d629e:	4a07      	ldr	r2, [pc, #28]	; (d62bc <_ZN12Adafruit_GFXC1Ess+0x24>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d62a0:	4d07      	ldr	r5, [pc, #28]	; (d62c0 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d62a2:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d62a4:	2400      	movs	r4, #0
  _width = WIDTH;
   d62a6:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
   d62a8:	f04f 31ff 	mov.w	r1, #4294967295
   d62ac:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d62b0:	6044      	str	r4, [r0, #4]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   d62b2:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
   d62b4:	6104      	str	r4, [r0, #16]
  _cp437 = false;
   d62b6:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
   d62b8:	6204      	str	r4, [r0, #32]
}
   d62ba:	bd30      	pop	{r4, r5, pc}
   d62bc:	01000101 	.word	0x01000101
   d62c0:	000dab24 	.word	0x000dab24

000d62c4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
   d62c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d62c8:	b089      	sub	sp, #36	; 0x24
   d62ca:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
   d62ce:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
   d62d0:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d62d4:	9304      	str	r3, [sp, #16]
   d62d6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  startWrite();
   d62da:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
   d62dc:	9305      	str	r3, [sp, #20]
   d62de:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d62e2:	4604      	mov	r4, r0
  startWrite();
   d62e4:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d62e6:	f118 0207 	adds.w	r2, r8, #7
  startWrite();
   d62ea:	f04f 0600 	mov.w	r6, #0
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d62ee:	bf48      	it	mi
   d62f0:	f108 020e 	addmi.w	r2, r8, #14
   d62f4:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
   d62f8:	9601      	str	r6, [sp, #4]
  uint8_t byte = 0;
   d62fa:	4635      	mov	r5, r6
   d62fc:	9b03      	ldr	r3, [sp, #12]
   d62fe:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
   d6300:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d6304:	189a      	adds	r2, r3, r2
   d6306:	9b05      	ldr	r3, [sp, #20]
   d6308:	428b      	cmp	r3, r1
   d630a:	b212      	sxth	r2, r2
   d630c:	dd27      	ble.n	d635e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d630e:	9b04      	ldr	r3, [sp, #16]
   d6310:	4433      	add	r3, r6
  for (int16_t j = 0; j < h; j++, y++) {
   d6312:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d6316:	9306      	str	r3, [sp, #24]
   d6318:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
   d631c:	4580      	cmp	r8, r0
   d631e:	fa1f f189 	uxth.w	r1, r9
   d6322:	dd17      	ble.n	d6354 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
      if (i & 7)
   d6324:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d6326:	bf05      	ittet	eq
   d6328:	9b06      	ldreq	r3, [sp, #24]
   d632a:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
   d632c:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d632e:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
   d6330:	bf18      	it	ne
   d6332:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
   d6334:	062b      	lsls	r3, r5, #24
   d6336:	d50a      	bpl.n	d634e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
        writePixel(x + i, y, color);
   d6338:	9b02      	ldr	r3, [sp, #8]
   d633a:	6820      	ldr	r0, [r4, #0]
   d633c:	9207      	str	r2, [sp, #28]
   d633e:	4419      	add	r1, r3
   d6340:	6983      	ldr	r3, [r0, #24]
   d6342:	b209      	sxth	r1, r1
   d6344:	461f      	mov	r7, r3
   d6346:	4620      	mov	r0, r4
   d6348:	4653      	mov	r3, sl
   d634a:	47b8      	blx	r7
   d634c:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
   d634e:	f109 0901 	add.w	r9, r9, #1
   d6352:	e7e1      	b.n	d6318 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
  for (int16_t j = 0; j < h; j++, y++) {
   d6354:	9b01      	ldr	r3, [sp, #4]
   d6356:	3301      	adds	r3, #1
   d6358:	9301      	str	r3, [sp, #4]
   d635a:	445e      	add	r6, fp
   d635c:	e7ce      	b.n	d62fc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
  endWrite();
   d635e:	6823      	ldr	r3, [r4, #0]
   d6360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6362:	4620      	mov	r0, r4
}
   d6364:	b009      	add	sp, #36	; 0x24
   d6366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
   d636a:	4718      	bx	r3

000d636c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
   d636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6370:	ed2d 8b02 	vpush	{d8}
   d6374:	b091      	sub	sp, #68	; 0x44
   d6376:	4616      	mov	r6, r2
  if (!gfxFont) { // 'Classic' built-in font
   d6378:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
   d637a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d637e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d6382:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d6386:	9103      	str	r1, [sp, #12]
   d6388:	461f      	mov	r7, r3
   d638a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d638e:	9304      	str	r3, [sp, #16]
   d6390:	4683      	mov	fp, r0
  if (!gfxFont) { // 'Classic' built-in font
   d6392:	2a00      	cmp	r2, #0
   d6394:	f040 80c5 	bne.w	d6522 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
   d6398:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d639c:	428b      	cmp	r3, r1
   d639e:	f340 814c 	ble.w	d663a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d63a2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d63a6:	42b3      	cmp	r3, r6
   d63a8:	f340 8147 	ble.w	d663a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d63ac:	2306      	movs	r3, #6
   d63ae:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
   d63b2:	2b00      	cmp	r3, #0
   d63b4:	f340 8141 	ble.w	d663a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
   d63b8:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
   d63bc:	2b00      	cmp	r3, #0
   d63be:	f340 813c 	ble.w	d663a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
   d63c2:	7f03      	ldrb	r3, [r0, #28]
   d63c4:	b91b      	cbnz	r3, d63ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d63c6:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
   d63c8:	bf84      	itt	hi
   d63ca:	3701      	addhi	r7, #1
   d63cc:	b2ff      	uxtbhi	r7, r7
    startWrite();
   d63ce:	f8db 3000 	ldr.w	r3, [fp]
   d63d2:	4658      	mov	r0, fp
   d63d4:	695b      	ldr	r3, [r3, #20]
   d63d6:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d63d8:	2205      	movs	r2, #5
   d63da:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d63dc:	2200      	movs	r2, #0
   d63de:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d63e0:	4a98      	ldr	r2, [pc, #608]	; (d6644 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d63e2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d63e6:	18d3      	adds	r3, r2, r3
   d63e8:	930c      	str	r3, [sp, #48]	; 0x30
   d63ea:	b2b3      	uxth	r3, r6
   d63ec:	9306      	str	r3, [sp, #24]
   d63ee:	9a05      	ldr	r2, [sp, #20]
   d63f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d63f2:	5c9b      	ldrb	r3, [r3, r2]
   d63f4:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d63f6:	b2ab      	uxth	r3, r5
   d63f8:	930b      	str	r3, [sp, #44]	; 0x2c
   d63fa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d63fe:	9308      	str	r3, [sp, #32]
   d6400:	9b03      	ldr	r3, [sp, #12]
   d6402:	fb02 f905 	mul.w	r9, r2, r5
   d6406:	fa19 f983 	uxtah	r9, r9, r3
   d640a:	fa0f f389 	sxth.w	r3, r9
   d640e:	ee08 3a10 	vmov	s16, r3
   d6412:	2308      	movs	r3, #8
   d6414:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
   d6416:	9b03      	ldr	r3, [sp, #12]
   d6418:	eb02 0a03 	add.w	sl, r2, r3
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d641c:	f04f 0900 	mov.w	r9, #0
            writePixel(x + i, y + j, bg);
   d6420:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
   d6424:	9a07      	ldr	r2, [sp, #28]
   d6426:	f8db 3000 	ldr.w	r3, [fp]
   d642a:	07d2      	lsls	r2, r2, #31
   d642c:	d552      	bpl.n	d64d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
   d642e:	2d01      	cmp	r5, #1
   d6430:	fa1f f289 	uxth.w	r2, r9
   d6434:	d13e      	bne.n	d64b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d6436:	2c01      	cmp	r4, #1
   d6438:	d13c      	bne.n	d64b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
   d643a:	699b      	ldr	r3, [r3, #24]
   d643c:	9906      	ldr	r1, [sp, #24]
   d643e:	461f      	mov	r7, r3
   d6440:	9b04      	ldr	r3, [sp, #16]
   d6442:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
   d6444:	b212      	sxth	r2, r2
   d6446:	4651      	mov	r1, sl
   d6448:	4658      	mov	r0, fp
   d644a:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   d644c:	f109 0301 	add.w	r3, r9, #1
   d6450:	fa4f f983 	sxtb.w	r9, r3
   d6454:	9b07      	ldr	r3, [sp, #28]
   d6456:	085b      	lsrs	r3, r3, #1
   d6458:	9307      	str	r3, [sp, #28]
   d645a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d645c:	3b01      	subs	r3, #1
   d645e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d6462:	930a      	str	r3, [sp, #40]	; 0x28
   d6464:	d1de      	bne.n	d6424 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   d6466:	9f05      	ldr	r7, [sp, #20]
   d6468:	3701      	adds	r7, #1
   d646a:	b27b      	sxtb	r3, r7
   d646c:	9305      	str	r3, [sp, #20]
   d646e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6470:	3b01      	subs	r3, #1
   d6472:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d6476:	9309      	str	r3, [sp, #36]	; 0x24
   d6478:	d1b9      	bne.n	d63ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
   d647a:	9b04      	ldr	r3, [sp, #16]
   d647c:	4543      	cmp	r3, r8
   d647e:	d00f      	beq.n	d64a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
   d6480:	2d01      	cmp	r5, #1
   d6482:	f8db 3000 	ldr.w	r3, [fp]
   d6486:	d13b      	bne.n	d6500 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d6488:	2c01      	cmp	r4, #1
   d648a:	d139      	bne.n	d6500 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
   d648c:	9908      	ldr	r1, [sp, #32]
   d648e:	f8cd 8000 	str.w	r8, [sp]
   d6492:	3105      	adds	r1, #5
   d6494:	6a1c      	ldr	r4, [r3, #32]
   d6496:	4632      	mov	r2, r6
   d6498:	2308      	movs	r3, #8
   d649a:	b209      	sxth	r1, r1
   d649c:	4658      	mov	r0, fp
   d649e:	47a0      	blx	r4
    endWrite();
   d64a0:	f8db 3000 	ldr.w	r3, [fp]
   d64a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d64a6:	4658      	mov	r0, fp
}
   d64a8:	b011      	add	sp, #68	; 0x44
   d64aa:	ecbd 8b02 	vpop	{d8}
   d64ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d64b2:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
   d64b4:	9906      	ldr	r1, [sp, #24]
   d64b6:	fb14 f202 	smulbb	r2, r4, r2
   d64ba:	440a      	add	r2, r1
   d64bc:	9904      	ldr	r1, [sp, #16]
   d64be:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d64c0:	9400      	str	r4, [sp, #0]
   d64c2:	69db      	ldr	r3, [r3, #28]
   d64c4:	ee18 1a10 	vmov	r1, s16
   d64c8:	461f      	mov	r7, r3
   d64ca:	b212      	sxth	r2, r2
   d64cc:	462b      	mov	r3, r5
   d64ce:	4658      	mov	r0, fp
   d64d0:	47b8      	blx	r7
   d64d2:	e7bb      	b.n	d644c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
   d64d4:	9a04      	ldr	r2, [sp, #16]
   d64d6:	4542      	cmp	r2, r8
   d64d8:	d0b8      	beq.n	d644c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
   d64da:	2d01      	cmp	r5, #1
   d64dc:	fa1f f289 	uxth.w	r2, r9
   d64e0:	d107      	bne.n	d64f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d64e2:	2c01      	cmp	r4, #1
   d64e4:	d105      	bne.n	d64f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
   d64e6:	699b      	ldr	r3, [r3, #24]
   d64e8:	9906      	ldr	r1, [sp, #24]
   d64ea:	461f      	mov	r7, r3
   d64ec:	440a      	add	r2, r1
   d64ee:	4643      	mov	r3, r8
   d64f0:	e7a8      	b.n	d6444 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   d64f2:	9906      	ldr	r1, [sp, #24]
   d64f4:	f8cd 8004 	str.w	r8, [sp, #4]
   d64f8:	fb14 f202 	smulbb	r2, r4, r2
   d64fc:	440a      	add	r2, r1
   d64fe:	e7df      	b.n	d64c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
   d6500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d6502:	f8cd 8004 	str.w	r8, [sp, #4]
   d6506:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d650a:	9a08      	ldr	r2, [sp, #32]
   d650c:	00e4      	lsls	r4, r4, #3
   d650e:	440a      	add	r2, r1
   d6510:	4611      	mov	r1, r2
   d6512:	9400      	str	r4, [sp, #0]
   d6514:	69dc      	ldr	r4, [r3, #28]
   d6516:	4632      	mov	r2, r6
   d6518:	462b      	mov	r3, r5
   d651a:	b209      	sxth	r1, r1
   d651c:	4658      	mov	r0, fp
   d651e:	47a0      	blx	r4
    endWrite();
   d6520:	e7be      	b.n	d64a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d6522:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
   d6524:	6851      	ldr	r1, [r2, #4]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d6526:	6812      	ldr	r2, [r2, #0]
   d6528:	920d      	str	r2, [sp, #52]	; 0x34
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d652a:	1aff      	subs	r7, r7, r3
  return gfxFont->glyph + c;
   d652c:	b2ff      	uxtb	r7, r7
   d652e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d6532:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d6536:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
   d6538:	789a      	ldrb	r2, [r3, #2]
   d653a:	9209      	str	r2, [sp, #36]	; 0x24
   d653c:	78da      	ldrb	r2, [r3, #3]
   d653e:	920b      	str	r2, [sp, #44]	; 0x2c
    if (size_x > 1 || size_y > 1) {
   d6540:	2d01      	cmp	r5, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d6542:	f993 2005 	ldrsb.w	r2, [r3, #5]
           yo = pgm_read_byte(&glyph->yOffset);
   d6546:	f993 a006 	ldrsb.w	sl, [r3, #6]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   d654a:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
   d654c:	d801      	bhi.n	d6552 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d654e:	2c01      	cmp	r4, #1
   d6550:	d957      	bls.n	d6602 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
   d6552:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d6556:	9308      	str	r3, [sp, #32]
      yo16 = yo;
   d6558:	fa0f f38a 	sxth.w	r3, sl
   d655c:	9307      	str	r3, [sp, #28]
    startWrite();
   d655e:	f8db 3000 	ldr.w	r3, [fp]
   d6562:	4658      	mov	r0, fp
   d6564:	695b      	ldr	r3, [r3, #20]
   d6566:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d6568:	b2b3      	uxth	r3, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d656a:	f04f 0800 	mov.w	r8, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d656e:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
   d6570:	fa1a f386 	uxtah	r3, sl, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   d6574:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
   d6576:	4647      	mov	r7, r8
            writePixel(x + xo + xx, y + yo + yy, color);
   d6578:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
   d657a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d657c:	429f      	cmp	r7, r3
   d657e:	d28f      	bcs.n	d64a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d6580:	9b07      	ldr	r3, [sp, #28]
   d6582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d6584:	443b      	add	r3, r7
   d6586:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
   d658a:	2200      	movs	r2, #0
   d658c:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
   d658e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d6590:	b21b      	sxth	r3, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d6592:	eb02 0a07 	add.w	sl, r2, r7
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d6596:	ee08 3a10 	vmov	s16, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   d659a:	fa0f fa8a 	sxth.w	sl, sl
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d659e:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
   d65a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d65a2:	9905      	ldr	r1, [sp, #20]
   d65a4:	4291      	cmp	r1, r2
   d65a6:	d241      	bcs.n	d662c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
   d65a8:	1c5a      	adds	r2, r3, #1
   d65aa:	b2d2      	uxtb	r2, r2
   d65ac:	075b      	lsls	r3, r3, #29
   d65ae:	920c      	str	r2, [sp, #48]	; 0x30
   d65b0:	d107      	bne.n	d65c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
   d65b2:	9b06      	ldr	r3, [sp, #24]
   d65b4:	9906      	ldr	r1, [sp, #24]
   d65b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d65b8:	3301      	adds	r3, #1
   d65ba:	b29b      	uxth	r3, r3
   d65bc:	f812 9001 	ldrb.w	r9, [r2, r1]
   d65c0:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
   d65c2:	f019 0f80 	tst.w	r9, #128	; 0x80
   d65c6:	d012      	beq.n	d65ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
   d65c8:	2d01      	cmp	r5, #1
   d65ca:	f8db 3000 	ldr.w	r3, [fp]
   d65ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d65d2:	d11a      	bne.n	d660a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d65d4:	2c01      	cmp	r4, #1
   d65d6:	d118      	bne.n	d660a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
   d65d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d65da:	699b      	ldr	r3, [r3, #24]
   d65dc:	4411      	add	r1, r2
   d65de:	9a05      	ldr	r2, [sp, #20]
   d65e0:	4411      	add	r1, r2
   d65e2:	461e      	mov	r6, r3
   d65e4:	4652      	mov	r2, sl
   d65e6:	9b04      	ldr	r3, [sp, #16]
   d65e8:	b209      	sxth	r1, r1
   d65ea:	4658      	mov	r0, fp
   d65ec:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
   d65ee:	9e05      	ldr	r6, [sp, #20]
   d65f0:	3601      	adds	r6, #1
   d65f2:	b2f3      	uxtb	r3, r6
        bits <<= 1;
   d65f4:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
   d65f8:	9305      	str	r3, [sp, #20]
        bits <<= 1;
   d65fa:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
   d65fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (xx = 0; xx < w; xx++) {
   d6600:	e7ce      	b.n	d65a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
   d6602:	2300      	movs	r3, #0
   d6604:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d6608:	e7a9      	b.n	d655e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   d660a:	9805      	ldr	r0, [sp, #20]
   d660c:	9a08      	ldr	r2, [sp, #32]
   d660e:	4402      	add	r2, r0
   d6610:	fb02 1105 	mla	r1, r2, r5, r1
   d6614:	9a04      	ldr	r2, [sp, #16]
   d6616:	e9cd 4200 	strd	r4, r2, [sp]
   d661a:	69db      	ldr	r3, [r3, #28]
   d661c:	ee18 2a10 	vmov	r2, s16
   d6620:	461e      	mov	r6, r3
   d6622:	b209      	sxth	r1, r1
   d6624:	462b      	mov	r3, r5
   d6626:	4658      	mov	r0, fp
   d6628:	47b0      	blx	r6
   d662a:	e7e0      	b.n	d65ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d662c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
   d662e:	3701      	adds	r7, #1
   d6630:	4498      	add	r8, r3
   d6632:	fa5f f888 	uxtb.w	r8, r8
   d6636:	b2ff      	uxtb	r7, r7
   d6638:	e79f      	b.n	d657a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d663a:	b011      	add	sp, #68	; 0x44
   d663c:	ecbd 8b02 	vpop	{d8}
   d6640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6644:	000da61c 	.word	0x000da61c

000d6648 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d6648:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
   d664a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d664c:	b085      	sub	sp, #20
   d664e:	4604      	mov	r4, r0
   d6650:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
   d6652:	2a00      	cmp	r2, #0
   d6654:	d134      	bne.n	d66c0 <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
   d6656:	290a      	cmp	r1, #10
   d6658:	d108      	bne.n	d666c <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
   d665a:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
   d665c:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
   d665e:	7e42      	ldrb	r2, [r0, #25]
   d6660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
   d6664:	8263      	strh	r3, [r4, #18]
}
   d6666:	2001      	movs	r0, #1
   d6668:	b005      	add	sp, #20
   d666a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
   d666c:	290d      	cmp	r1, #13
   d666e:	d0fa      	beq.n	d6666 <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d6670:	7ee1      	ldrb	r1, [r4, #27]
   d6672:	7e00      	ldrb	r0, [r0, #24]
   d6674:	7e65      	ldrb	r5, [r4, #25]
   d6676:	b171      	cbz	r1, d6696 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d6678:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d667c:	2106      	movs	r1, #6
   d667e:	fb11 6100 	smlabb	r1, r1, r0, r6
   d6682:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d6686:	42b1      	cmp	r1, r6
   d6688:	bfc1      	itttt	gt
   d668a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
   d668e:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
   d6690:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d6694:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d6696:	8ae2      	ldrh	r2, [r4, #22]
   d6698:	9201      	str	r2, [sp, #4]
   d669a:	8aa2      	ldrh	r2, [r4, #20]
   d669c:	9200      	str	r2, [sp, #0]
   d669e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d66a2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d66a6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d66aa:	4620      	mov	r0, r4
   d66ac:	f7ff fe5e 	bl	d636c <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
   d66b0:	7e23      	ldrb	r3, [r4, #24]
   d66b2:	8a22      	ldrh	r2, [r4, #16]
   d66b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d66b8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
   d66bc:	8223      	strh	r3, [r4, #16]
   d66be:	e7d2      	b.n	d6666 <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
   d66c0:	290a      	cmp	r1, #10
   d66c2:	d107      	bne.n	d66d4 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
   d66c4:	2300      	movs	r3, #0
   d66c6:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d66c8:	7b13      	ldrb	r3, [r2, #12]
   d66ca:	7e41      	ldrb	r1, [r0, #25]
      cursor_y +=
   d66cc:	8a42      	ldrh	r2, [r0, #18]
   d66ce:	fb01 2303 	mla	r3, r1, r3, r2
   d66d2:	e7c7      	b.n	d6664 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
   d66d4:	290d      	cmp	r1, #13
   d66d6:	d0c6      	beq.n	d6666 <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
   d66d8:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d66da:	42a9      	cmp	r1, r5
   d66dc:	d3c3      	bcc.n	d6666 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d66de:	7a91      	ldrb	r1, [r2, #10]
   d66e0:	4299      	cmp	r1, r3
   d66e2:	d3c0      	bcc.n	d6666 <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
   d66e4:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
   d66e6:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
   d66e8:	b2ed      	uxtb	r5, r5
   d66ea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
   d66ee:	78af      	ldrb	r7, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d66f0:	b32f      	cbz	r7, d673e <_ZN12Adafruit_GFX5writeEh+0xf6>
   d66f2:	78e9      	ldrb	r1, [r5, #3]
   d66f4:	b319      	cbz	r1, d673e <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d66f6:	7ee1      	ldrb	r1, [r4, #27]
   d66f8:	7e00      	ldrb	r0, [r0, #24]
   d66fa:	7e66      	ldrb	r6, [r4, #25]
   d66fc:	b191      	cbz	r1, d6724 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d66fe:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d6702:	4439      	add	r1, r7
   d6704:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d6708:	fb00 7101 	mla	r1, r0, r1, r7
   d670c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d6710:	42b9      	cmp	r1, r7
   d6712:	dd07      	ble.n	d6724 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
   d6714:	2700      	movs	r7, #0
   d6716:	8227      	strh	r7, [r4, #16]
   d6718:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d671c:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
   d671e:	fb02 1206 	mla	r2, r2, r6, r1
   d6722:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   d6724:	8ae2      	ldrh	r2, [r4, #22]
   d6726:	9201      	str	r2, [sp, #4]
   d6728:	8aa2      	ldrh	r2, [r4, #20]
   d672a:	9200      	str	r2, [sp, #0]
   d672c:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d6730:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d6734:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d6738:	4620      	mov	r0, r4
   d673a:	f7ff fe17 	bl	d636c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d673e:	7929      	ldrb	r1, [r5, #4]
   d6740:	7e23      	ldrb	r3, [r4, #24]
        cursor_x +=
   d6742:	8a22      	ldrh	r2, [r4, #16]
   d6744:	fb01 2303 	mla	r3, r1, r3, r2
   d6748:	e7b8      	b.n	d66bc <_ZN12Adafruit_GFX5writeEh+0x74>

000d674a <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
   d674a:	2901      	cmp	r1, #1
   d674c:	bf38      	it	cc
   d674e:	2101      	movcc	r1, #1
   d6750:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
   d6752:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
   d6754:	4770      	bx	lr

000d6756 <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   d6756:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d675a:	4604      	mov	r4, r0
   d675c:	b08b      	sub	sp, #44	; 0x2c
   d675e:	f000 f9c5 	bl	d6aec <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d6762:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   d6766:	f9b4 503a 	ldrsh.w	r5, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d676a:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d676e:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d6772:	1dda      	adds	r2, r3, #7
   d6774:	bf48      	it	mi
   d6776:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   d677a:	2340      	movs	r3, #64	; 0x40
   d677c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   d6780:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   d6784:	9303      	str	r3, [sp, #12]
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   d6786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6788:	68db      	ldr	r3, [r3, #12]
   d678a:	3b01      	subs	r3, #1
   d678c:	b29b      	uxth	r3, r3
   d678e:	9304      	str	r3, [sp, #16]
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d6790:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
  uint8_t bytes_per_page = WIDTH;
   d6794:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   d6796:	2d00      	cmp	r5, #0
   d6798:	bfb8      	it	lt
   d679a:	3507      	addlt	r5, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   d679c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d67a0:	45b9      	cmp	r9, r7
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   d67a2:	f107 0201 	add.w	r2, r7, #1
  uint8_t first_page = window_y1 / 8;
   d67a6:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   d67aa:	bf28      	it	cs
   d67ac:	46b9      	movcs	r9, r7
    bytes_remaining -= (WIDTH - 1) - page_end;
   d67ae:	fa52 f383 	uxtab	r3, r2, r3
   d67b2:	fb05 9a07 	mla	sl, r5, r7, r9
   d67b6:	9306      	str	r3, [sp, #24]
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};

      digitalWrite(dcPin, LOW);
   d67b8:	f04f 0b00 	mov.w	fp, #0
  for (uint8_t p = first_page; p < pages; p++) {
   d67bc:	9b03      	ldr	r3, [sp, #12]
   d67be:	429d      	cmp	r5, r3
   d67c0:	d26b      	bcs.n	d689a <_ZN15Adafruit_SH110X7displayEv+0x144>
    ptr += page_start;
   d67c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   d67c4:	7a26      	ldrb	r6, [r4, #8]
   d67c6:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   d67ca:	eb03 080a 	add.w	r8, r3, sl
    bytes_remaining -= (WIDTH - 1) - page_end;
   d67ce:	9b06      	ldr	r3, [sp, #24]
   d67d0:	444a      	add	r2, r9
   d67d2:	1b9e      	subs	r6, r3, r6
    if (i2c_dev) { // I2C
   d67d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d67d6:	1111      	asrs	r1, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   d67d8:	eba6 0609 	sub.w	r6, r6, r9
   d67dc:	f1a5 0050 	sub.w	r0, r5, #80	; 0x50
   d67e0:	b2f6      	uxtb	r6, r6
    if (i2c_dev) { // I2C
   d67e2:	b2c0      	uxtb	r0, r0
   d67e4:	3110      	adds	r1, #16
   d67e6:	f002 020f 	and.w	r2, r2, #15
   d67ea:	2b00      	cmp	r3, #0
   d67ec:	d035      	beq.n	d685a <_ZN15Adafruit_SH110X7displayEv+0x104>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d67ee:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   d67f2:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
      i2c_dev->setSpeed(i2c_preclk);
   d67f6:	4618      	mov	r0, r3
   d67f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d67fa:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      uint8_t cmd[] = {
   d67fe:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   d6802:	f7ff f80a 	bl	d581a <_ZN18Adafruit_I2CDevice8setSpeedEm>
      i2c_dev->write(cmd, 4);
   d6806:	2301      	movs	r3, #1
   d6808:	e9cd bb00 	strd	fp, fp, [sp]
   d680c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d680e:	2204      	movs	r2, #4
   d6810:	a909      	add	r1, sp, #36	; 0x24
   d6812:	f7fe ff7d 	bl	d5710 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d6816:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d681a:	9305      	str	r3, [sp, #20]
      while (bytes_remaining) {
   d681c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d681e:	b1ae      	cbz	r6, d684c <_ZN15Adafruit_SH110X7displayEv+0xf6>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   d6820:	9b05      	ldr	r3, [sp, #20]
   d6822:	42b3      	cmp	r3, r6
   d6824:	bf28      	it	cs
   d6826:	4633      	movcs	r3, r6
   d6828:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   d682a:	2301      	movs	r3, #1
   d682c:	9301      	str	r3, [sp, #4]
   d682e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   d6832:	9300      	str	r3, [sp, #0]
   d6834:	4641      	mov	r1, r8
   d6836:	2301      	movs	r3, #1
   d6838:	9207      	str	r2, [sp, #28]
   d683a:	f7fe ff69 	bl	d5710 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   d683e:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   d6840:	1ab6      	subs	r6, r6, r2
        ptr += to_write;
   d6842:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   d6844:	b2f6      	uxtb	r6, r6
   d6846:	f000 f951 	bl	d6aec <os_thread_yield>
#endif // PLATFORM_THREADING
}
   d684a:	e7e7      	b.n	d681c <_ZN15Adafruit_SH110X7displayEv+0xc6>
      i2c_dev->setSpeed(i2c_postclk);
   d684c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   d684e:	f7fe ffe4 	bl	d581a <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   d6852:	3501      	adds	r5, #1
   d6854:	b2ed      	uxtb	r5, r5
   d6856:	44ba      	add	sl, r7
   d6858:	e7b0      	b.n	d67bc <_ZN15Adafruit_SH110X7displayEv+0x66>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d685a:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   d685e:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
      digitalWrite(dcPin, LOW);
   d6862:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   d6866:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   d686a:	4619      	mov	r1, r3
   d686c:	9305      	str	r3, [sp, #20]
   d686e:	f001 f9c8 	bl	d7c02 <digitalWrite>
      spi_dev->write(cmd, 3);
   d6872:	9b05      	ldr	r3, [sp, #20]
   d6874:	9300      	str	r3, [sp, #0]
   d6876:	2203      	movs	r2, #3
   d6878:	a909      	add	r1, sp, #36	; 0x24
   d687a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d687c:	f7fe feeb 	bl	d5656 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   d6880:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   d6884:	2101      	movs	r1, #1
   d6886:	f001 f9bc 	bl	d7c02 <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   d688a:	9b05      	ldr	r3, [sp, #20]
   d688c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d688e:	9300      	str	r3, [sp, #0]
   d6890:	4632      	mov	r2, r6
   d6892:	4641      	mov	r1, r8
   d6894:	f7fe fedf 	bl	d5656 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d6898:	e7db      	b.n	d6852 <_ZN15Adafruit_SH110X7displayEv+0xfc>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   d689a:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   d689e:	f04f 33ff 	mov.w	r3, #4294967295
   d68a2:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   d68a6:	b00b      	add	sp, #44	; 0x2c
   d68a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d68ac <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   d68ac:	b530      	push	{r4, r5, lr}
   d68ae:	b085      	sub	sp, #20
   d68b0:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d68b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d68b4:	9503      	str	r5, [sp, #12]
   d68b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d68b8:	9502      	str	r5, [sp, #8]
   d68ba:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d68be:	e9cd 3500 	strd	r3, r5, [sp]
   d68c2:	4613      	mov	r3, r2
   d68c4:	460a      	mov	r2, r1
   d68c6:	2101      	movs	r1, #1
   d68c8:	f7ff fa48 	bl	d5d5c <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   d68cc:	4b03      	ldr	r3, [pc, #12]	; (d68dc <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   d68ce:	6023      	str	r3, [r4, #0]
   d68d0:	4620      	mov	r0, r4
   d68d2:	2300      	movs	r3, #0
   d68d4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d68d8:	b005      	add	sp, #20
   d68da:	bd30      	pop	{r4, r5, pc}
   d68dc:	000dab7c 	.word	0x000dab7c

000d68e0 <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   d68e0:	b510      	push	{r4, lr}
   d68e2:	4b03      	ldr	r3, [pc, #12]	; (d68f0 <_ZN15Adafruit_SH110XD1Ev+0x10>)
   d68e4:	6003      	str	r3, [r0, #0]
   d68e6:	4604      	mov	r4, r0
   d68e8:	f7ff fa5a 	bl	d5da0 <_ZN17Adafruit_GrayOLEDD1Ev>
   d68ec:	4620      	mov	r0, r4
   d68ee:	bd10      	pop	{r4, pc}
   d68f0:	000dab7c 	.word	0x000dab7c

000d68f4 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   d68f4:	b510      	push	{r4, lr}
   d68f6:	4b03      	ldr	r3, [pc, #12]	; (d6904 <_ZN15Adafruit_SH1107D1Ev+0x10>)
   d68f8:	6003      	str	r3, [r0, #0]
   d68fa:	4604      	mov	r4, r0
   d68fc:	f7ff fff0 	bl	d68e0 <_ZN15Adafruit_SH110XD1Ev>
   d6900:	4620      	mov	r0, r4
   d6902:	bd10      	pop	{r4, pc}
   d6904:	000dadb8 	.word	0x000dadb8

000d6908 <_ZN15Adafruit_SH1107D0Ev>:
   d6908:	b510      	push	{r4, lr}
   d690a:	4604      	mov	r4, r0
   d690c:	f7ff fff2 	bl	d68f4 <_ZN15Adafruit_SH1107D1Ev>
   d6910:	4620      	mov	r0, r4
   d6912:	2158      	movs	r1, #88	; 0x58
   d6914:	f001 f9de 	bl	d7cd4 <_ZdlPvj>
   d6918:	4620      	mov	r0, r4
   d691a:	bd10      	pop	{r4, pc}

000d691c <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   d691c:	b530      	push	{r4, r5, lr}
   d691e:	b085      	sub	sp, #20
   d6920:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   d6922:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d6924:	9502      	str	r5, [sp, #8]
   d6926:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d6928:	9501      	str	r5, [sp, #4]
   d692a:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   d692e:	9500      	str	r5, [sp, #0]
   d6930:	f7ff ffbc 	bl	d68ac <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   d6934:	4b02      	ldr	r3, [pc, #8]	; (d6940 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   d6936:	6023      	str	r3, [r4, #0]
   d6938:	4620      	mov	r0, r4
   d693a:	b005      	add	sp, #20
   d693c:	bd30      	pop	{r4, r5, pc}
   d693e:	bf00      	nop
   d6940:	000dadb8 	.word	0x000dadb8

000d6944 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   d6944:	b530      	push	{r4, r5, lr}
   d6946:	4604      	mov	r4, r0
   d6948:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   d694a:	f7ff faad 	bl	d5ea8 <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   d694e:	212f      	movs	r1, #47	; 0x2f
   d6950:	4620      	mov	r0, r4
   d6952:	f7ff fb12 	bl	d5f7a <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   d6956:	68a2      	ldr	r2, [r4, #8]
   d6958:	4b2f      	ldr	r3, [pc, #188]	; (d6a18 <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   d695a:	429a      	cmp	r2, r3
   d695c:	d121      	bne.n	d69a2 <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   d695e:	6823      	ldr	r3, [r4, #0]
   d6960:	2101      	movs	r1, #1
   d6962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6964:	4620      	mov	r0, r4
   d6966:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d6968:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d696c:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d6970:	2320      	movs	r3, #32
   d6972:	3a20      	subs	r2, #32
   d6974:	3973      	subs	r1, #115	; 0x73
   d6976:	2501      	movs	r5, #1
   d6978:	e9cd 3501 	strd	r3, r5, [sp, #4]
   d697c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d6980:	2373      	movs	r3, #115	; 0x73
   d6982:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d6986:	9300      	str	r3, [sp, #0]
   d6988:	f341 014f 	sbfx	r1, r1, #1, #16
   d698c:	4b23      	ldr	r3, [pc, #140]	; (d6a1c <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d698e:	4620      	mov	r0, r4
   d6990:	f342 024f 	sbfx	r2, r2, #1, #16
   d6994:	f7ff fc96 	bl	d62c4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   d6998:	6823      	ldr	r3, [r4, #0]
   d699a:	2100      	movs	r1, #0
   d699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d699e:	4620      	mov	r0, r4
   d69a0:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   d69a2:	68a3      	ldr	r3, [r4, #8]
   d69a4:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d69a8:	d117      	bne.n	d69da <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   d69aa:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d69ae:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d69b2:	2320      	movs	r3, #32
   d69b4:	2001      	movs	r0, #1
   d69b6:	3a20      	subs	r2, #32
   d69b8:	3973      	subs	r1, #115	; 0x73
   d69ba:	e9cd 3001 	strd	r3, r0, [sp, #4]
   d69be:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   d69c2:	2373      	movs	r3, #115	; 0x73
   d69c4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d69c8:	9300      	str	r3, [sp, #0]
   d69ca:	f342 024f 	sbfx	r2, r2, #1, #16
   d69ce:	4b13      	ldr	r3, [pc, #76]	; (d6a1c <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   d69d0:	f341 014f 	sbfx	r1, r1, #1, #16
   d69d4:	4620      	mov	r0, r4
   d69d6:	f7ff fc75 	bl	d62c4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   d69da:	4911      	ldr	r1, [pc, #68]	; (d6a20 <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   d69dc:	2216      	movs	r2, #22
   d69de:	4620      	mov	r0, r4
   d69e0:	f7ff fa25 	bl	d5e2e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d69e4:	4605      	mov	r5, r0
   d69e6:	b918      	cbnz	r0, d69f0 <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   d69e8:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   d69ea:	4628      	mov	r0, r5
   d69ec:	b005      	add	sp, #20
   d69ee:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   d69f0:	68a3      	ldr	r3, [r4, #8]
   d69f2:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   d69f6:	d007      	beq.n	d6a08 <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   d69f8:	2064      	movs	r0, #100	; 0x64
   d69fa:	f000 fd1d 	bl	d7438 <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   d69fe:	21af      	movs	r1, #175	; 0xaf
   d6a00:	4620      	mov	r0, r4
   d6a02:	f7ff f9e9 	bl	d5dd8 <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   d6a06:	e7f0      	b.n	d69ea <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   d6a08:	4906      	ldr	r1, [pc, #24]	; (d6a24 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   d6a0a:	2204      	movs	r2, #4
   d6a0c:	4620      	mov	r0, r4
   d6a0e:	f7ff fa0e 	bl	d5e2e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   d6a12:	2800      	cmp	r0, #0
   d6a14:	d1f0      	bne.n	d69f8 <_ZN15Adafruit_SH11075beginEhb+0xb4>
   d6a16:	e7e7      	b.n	d69e8 <_ZN15Adafruit_SH11075beginEhb+0xa4>
   d6a18:	00800040 	.word	0x00800040
   d6a1c:	000dabd0 	.word	0x000dabd0
   d6a20:	000dae10 	.word	0x000dae10
   d6a24:	000dae0c 	.word	0x000dae0c

000d6a28 <_ZN19Adafruit_EEPROM_I2CC1Ev>:
/**************************************************************************/
/*!
    Constructor
*/
/**************************************************************************/
Adafruit_EEPROM_I2C::Adafruit_EEPROM_I2C(void) {}
   d6a28:	2200      	movs	r2, #0
   d6a2a:	6002      	str	r2, [r0, #0]
   d6a2c:	7102      	strb	r2, [r0, #4]
   d6a2e:	4770      	bx	lr

000d6a30 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>:
 *            The I2C address to be used.
 *    @param  theWire
 *            The Wire object to be used for I2C connections.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d6a30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6a32:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d6a34:	2010      	movs	r0, #16
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   d6a36:	460e      	mov	r6, r1
   d6a38:	9201      	str	r2, [sp, #4]
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d6a3a:	f7fd fb2c 	bl	d4096 <_Znwj>
   d6a3e:	4604      	mov	r4, r0
   d6a40:	b118      	cbz	r0, d6a4a <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire+0x1a>
   d6a42:	9a01      	ldr	r2, [sp, #4]
   d6a44:	4631      	mov	r1, r6
   d6a46:	f7fe fe38 	bl	d56ba <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  _addr = addr;

  return i2c_dev->begin();
   d6a4a:	2101      	movs	r1, #1
   d6a4c:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   d6a4e:	602c      	str	r4, [r5, #0]
  _addr = addr;
   d6a50:	712e      	strb	r6, [r5, #4]
}
   d6a52:	b002      	add	sp, #8
   d6a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return i2c_dev->begin();
   d6a58:	f7fe be4b 	b.w	d56f2 <_ZN18Adafruit_I2CDevice5beginEb>

000d6a5c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6a5c:	b508      	push	{r3, lr}
   d6a5e:	4b02      	ldr	r3, [pc, #8]	; (d6a68 <netdb_freeaddrinfo+0xc>)
   d6a60:	681b      	ldr	r3, [r3, #0]
   d6a62:	689b      	ldr	r3, [r3, #8]
   d6a64:	9301      	str	r3, [sp, #4]
   d6a66:	bd08      	pop	{r3, pc}
   d6a68:	00030268 	.word	0x00030268

000d6a6c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6a6c:	b508      	push	{r3, lr}
   d6a6e:	4b02      	ldr	r3, [pc, #8]	; (d6a78 <netdb_getaddrinfo+0xc>)
   d6a70:	681b      	ldr	r3, [r3, #0]
   d6a72:	68db      	ldr	r3, [r3, #12]
   d6a74:	9301      	str	r3, [sp, #4]
   d6a76:	bd08      	pop	{r3, pc}
   d6a78:	00030268 	.word	0x00030268

000d6a7c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6a7c:	b508      	push	{r3, lr}
   d6a7e:	4b02      	ldr	r3, [pc, #8]	; (d6a88 <HAL_Pin_Mode+0xc>)
   d6a80:	681b      	ldr	r3, [r3, #0]
   d6a82:	689b      	ldr	r3, [r3, #8]
   d6a84:	9301      	str	r3, [sp, #4]
   d6a86:	bd08      	pop	{r3, pc}
   d6a88:	0003022c 	.word	0x0003022c

000d6a8c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6a8c:	b508      	push	{r3, lr}
   d6a8e:	4b02      	ldr	r3, [pc, #8]	; (d6a98 <HAL_Get_Pin_Mode+0xc>)
   d6a90:	681b      	ldr	r3, [r3, #0]
   d6a92:	68db      	ldr	r3, [r3, #12]
   d6a94:	9301      	str	r3, [sp, #4]
   d6a96:	bd08      	pop	{r3, pc}
   d6a98:	0003022c 	.word	0x0003022c

000d6a9c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6a9c:	b508      	push	{r3, lr}
   d6a9e:	4b02      	ldr	r3, [pc, #8]	; (d6aa8 <HAL_GPIO_Write+0xc>)
   d6aa0:	681b      	ldr	r3, [r3, #0]
   d6aa2:	691b      	ldr	r3, [r3, #16]
   d6aa4:	9301      	str	r3, [sp, #4]
   d6aa6:	bd08      	pop	{r3, pc}
   d6aa8:	0003022c 	.word	0x0003022c

000d6aac <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6aac:	b508      	push	{r3, lr}
   d6aae:	4b02      	ldr	r3, [pc, #8]	; (d6ab8 <HAL_GPIO_Read+0xc>)
   d6ab0:	681b      	ldr	r3, [r3, #0]
   d6ab2:	695b      	ldr	r3, [r3, #20]
   d6ab4:	9301      	str	r3, [sp, #4]
   d6ab6:	bd08      	pop	{r3, pc}
   d6ab8:	0003022c 	.word	0x0003022c

000d6abc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6abc:	b508      	push	{r3, lr}
   d6abe:	4b02      	ldr	r3, [pc, #8]	; (d6ac8 <HAL_RNG_GetRandomNumber+0xc>)
   d6ac0:	681b      	ldr	r3, [r3, #0]
   d6ac2:	685b      	ldr	r3, [r3, #4]
   d6ac4:	9301      	str	r3, [sp, #4]
   d6ac6:	bd08      	pop	{r3, pc}
   d6ac8:	00030218 	.word	0x00030218

000d6acc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6acc:	b508      	push	{r3, lr}
   d6ace:	4b02      	ldr	r3, [pc, #8]	; (d6ad8 <HAL_Delay_Microseconds+0xc>)
   d6ad0:	681b      	ldr	r3, [r3, #0]
   d6ad2:	68db      	ldr	r3, [r3, #12]
   d6ad4:	9301      	str	r3, [sp, #4]
   d6ad6:	bd08      	pop	{r3, pc}
   d6ad8:	00030218 	.word	0x00030218

000d6adc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6adc:	b508      	push	{r3, lr}
   d6ade:	4b02      	ldr	r3, [pc, #8]	; (d6ae8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6ae0:	681b      	ldr	r3, [r3, #0]
   d6ae2:	695b      	ldr	r3, [r3, #20]
   d6ae4:	9301      	str	r3, [sp, #4]
   d6ae6:	bd08      	pop	{r3, pc}
   d6ae8:	00030218 	.word	0x00030218

000d6aec <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6aec:	b508      	push	{r3, lr}
   d6aee:	4b02      	ldr	r3, [pc, #8]	; (d6af8 <os_thread_yield+0xc>)
   d6af0:	681b      	ldr	r3, [r3, #0]
   d6af2:	68db      	ldr	r3, [r3, #12]
   d6af4:	9301      	str	r3, [sp, #4]
   d6af6:	bd08      	pop	{r3, pc}
   d6af8:	00030248 	.word	0x00030248

000d6afc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6afc:	b508      	push	{r3, lr}
   d6afe:	4b02      	ldr	r3, [pc, #8]	; (d6b08 <os_mutex_recursive_create+0xc>)
   d6b00:	681b      	ldr	r3, [r3, #0]
   d6b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6b04:	9301      	str	r3, [sp, #4]
   d6b06:	bd08      	pop	{r3, pc}
   d6b08:	00030248 	.word	0x00030248

000d6b0c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6b0c:	b508      	push	{r3, lr}
   d6b0e:	4b02      	ldr	r3, [pc, #8]	; (d6b18 <inet_inet_ntop+0xc>)
   d6b10:	681b      	ldr	r3, [r3, #0]
   d6b12:	695b      	ldr	r3, [r3, #20]
   d6b14:	9301      	str	r3, [sp, #4]
   d6b16:	bd08      	pop	{r3, pc}
   d6b18:	00030264 	.word	0x00030264

000d6b1c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6b1c:	b508      	push	{r3, lr}
   d6b1e:	4b02      	ldr	r3, [pc, #8]	; (d6b28 <hal_usart_init+0xc>)
   d6b20:	681b      	ldr	r3, [r3, #0]
   d6b22:	681b      	ldr	r3, [r3, #0]
   d6b24:	9301      	str	r3, [sp, #4]
   d6b26:	bd08      	pop	{r3, pc}
   d6b28:	0003023c 	.word	0x0003023c

000d6b2c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6b2c:	b508      	push	{r3, lr}
   d6b2e:	4b02      	ldr	r3, [pc, #8]	; (d6b38 <hal_usart_write+0xc>)
   d6b30:	681b      	ldr	r3, [r3, #0]
   d6b32:	68db      	ldr	r3, [r3, #12]
   d6b34:	9301      	str	r3, [sp, #4]
   d6b36:	bd08      	pop	{r3, pc}
   d6b38:	0003023c 	.word	0x0003023c

000d6b3c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6b3c:	b508      	push	{r3, lr}
   d6b3e:	4b02      	ldr	r3, [pc, #8]	; (d6b48 <hal_usart_available+0xc>)
   d6b40:	681b      	ldr	r3, [r3, #0]
   d6b42:	691b      	ldr	r3, [r3, #16]
   d6b44:	9301      	str	r3, [sp, #4]
   d6b46:	bd08      	pop	{r3, pc}
   d6b48:	0003023c 	.word	0x0003023c

000d6b4c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6b4c:	b508      	push	{r3, lr}
   d6b4e:	4b02      	ldr	r3, [pc, #8]	; (d6b58 <hal_usart_read+0xc>)
   d6b50:	681b      	ldr	r3, [r3, #0]
   d6b52:	695b      	ldr	r3, [r3, #20]
   d6b54:	9301      	str	r3, [sp, #4]
   d6b56:	bd08      	pop	{r3, pc}
   d6b58:	0003023c 	.word	0x0003023c

000d6b5c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6b5c:	b508      	push	{r3, lr}
   d6b5e:	4b02      	ldr	r3, [pc, #8]	; (d6b68 <hal_usart_peek+0xc>)
   d6b60:	681b      	ldr	r3, [r3, #0]
   d6b62:	699b      	ldr	r3, [r3, #24]
   d6b64:	9301      	str	r3, [sp, #4]
   d6b66:	bd08      	pop	{r3, pc}
   d6b68:	0003023c 	.word	0x0003023c

000d6b6c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6b6c:	b508      	push	{r3, lr}
   d6b6e:	4b02      	ldr	r3, [pc, #8]	; (d6b78 <hal_usart_flush+0xc>)
   d6b70:	681b      	ldr	r3, [r3, #0]
   d6b72:	69db      	ldr	r3, [r3, #28]
   d6b74:	9301      	str	r3, [sp, #4]
   d6b76:	bd08      	pop	{r3, pc}
   d6b78:	0003023c 	.word	0x0003023c

000d6b7c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6b7c:	b508      	push	{r3, lr}
   d6b7e:	4b02      	ldr	r3, [pc, #8]	; (d6b88 <hal_usart_is_enabled+0xc>)
   d6b80:	681b      	ldr	r3, [r3, #0]
   d6b82:	6a1b      	ldr	r3, [r3, #32]
   d6b84:	9301      	str	r3, [sp, #4]
   d6b86:	bd08      	pop	{r3, pc}
   d6b88:	0003023c 	.word	0x0003023c

000d6b8c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6b8c:	b508      	push	{r3, lr}
   d6b8e:	4b02      	ldr	r3, [pc, #8]	; (d6b98 <hal_usart_available_data_for_write+0xc>)
   d6b90:	681b      	ldr	r3, [r3, #0]
   d6b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b94:	9301      	str	r3, [sp, #4]
   d6b96:	bd08      	pop	{r3, pc}
   d6b98:	0003023c 	.word	0x0003023c

000d6b9c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d6b9c:	b508      	push	{r3, lr}
   d6b9e:	4b02      	ldr	r3, [pc, #8]	; (d6ba8 <hal_i2c_set_speed+0xc>)
   d6ba0:	681b      	ldr	r3, [r3, #0]
   d6ba2:	681b      	ldr	r3, [r3, #0]
   d6ba4:	9301      	str	r3, [sp, #4]
   d6ba6:	bd08      	pop	{r3, pc}
   d6ba8:	00030228 	.word	0x00030228

000d6bac <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6bac:	b508      	push	{r3, lr}
   d6bae:	4b02      	ldr	r3, [pc, #8]	; (d6bb8 <hal_i2c_begin+0xc>)
   d6bb0:	681b      	ldr	r3, [r3, #0]
   d6bb2:	68db      	ldr	r3, [r3, #12]
   d6bb4:	9301      	str	r3, [sp, #4]
   d6bb6:	bd08      	pop	{r3, pc}
   d6bb8:	00030228 	.word	0x00030228

000d6bbc <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6bbc:	b508      	push	{r3, lr}
   d6bbe:	4b02      	ldr	r3, [pc, #8]	; (d6bc8 <hal_i2c_begin_transmission+0xc>)
   d6bc0:	681b      	ldr	r3, [r3, #0]
   d6bc2:	699b      	ldr	r3, [r3, #24]
   d6bc4:	9301      	str	r3, [sp, #4]
   d6bc6:	bd08      	pop	{r3, pc}
   d6bc8:	00030228 	.word	0x00030228

000d6bcc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6bcc:	b508      	push	{r3, lr}
   d6bce:	4b02      	ldr	r3, [pc, #8]	; (d6bd8 <hal_i2c_end_transmission+0xc>)
   d6bd0:	681b      	ldr	r3, [r3, #0]
   d6bd2:	69db      	ldr	r3, [r3, #28]
   d6bd4:	9301      	str	r3, [sp, #4]
   d6bd6:	bd08      	pop	{r3, pc}
   d6bd8:	00030228 	.word	0x00030228

000d6bdc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6bdc:	b508      	push	{r3, lr}
   d6bde:	4b02      	ldr	r3, [pc, #8]	; (d6be8 <hal_i2c_write+0xc>)
   d6be0:	681b      	ldr	r3, [r3, #0]
   d6be2:	6a1b      	ldr	r3, [r3, #32]
   d6be4:	9301      	str	r3, [sp, #4]
   d6be6:	bd08      	pop	{r3, pc}
   d6be8:	00030228 	.word	0x00030228

000d6bec <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6bec:	b508      	push	{r3, lr}
   d6bee:	4b02      	ldr	r3, [pc, #8]	; (d6bf8 <hal_i2c_available+0xc>)
   d6bf0:	681b      	ldr	r3, [r3, #0]
   d6bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6bf4:	9301      	str	r3, [sp, #4]
   d6bf6:	bd08      	pop	{r3, pc}
   d6bf8:	00030228 	.word	0x00030228

000d6bfc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6bfc:	b508      	push	{r3, lr}
   d6bfe:	4b02      	ldr	r3, [pc, #8]	; (d6c08 <hal_i2c_read+0xc>)
   d6c00:	681b      	ldr	r3, [r3, #0]
   d6c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c04:	9301      	str	r3, [sp, #4]
   d6c06:	bd08      	pop	{r3, pc}
   d6c08:	00030228 	.word	0x00030228

000d6c0c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6c0c:	b508      	push	{r3, lr}
   d6c0e:	4b02      	ldr	r3, [pc, #8]	; (d6c18 <hal_i2c_peek+0xc>)
   d6c10:	681b      	ldr	r3, [r3, #0]
   d6c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c14:	9301      	str	r3, [sp, #4]
   d6c16:	bd08      	pop	{r3, pc}
   d6c18:	00030228 	.word	0x00030228

000d6c1c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6c1c:	b508      	push	{r3, lr}
   d6c1e:	4b02      	ldr	r3, [pc, #8]	; (d6c28 <hal_i2c_flush+0xc>)
   d6c20:	681b      	ldr	r3, [r3, #0]
   d6c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c24:	9301      	str	r3, [sp, #4]
   d6c26:	bd08      	pop	{r3, pc}
   d6c28:	00030228 	.word	0x00030228

000d6c2c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6c2c:	b508      	push	{r3, lr}
   d6c2e:	4b02      	ldr	r3, [pc, #8]	; (d6c38 <hal_i2c_is_enabled+0xc>)
   d6c30:	681b      	ldr	r3, [r3, #0]
   d6c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6c34:	9301      	str	r3, [sp, #4]
   d6c36:	bd08      	pop	{r3, pc}
   d6c38:	00030228 	.word	0x00030228

000d6c3c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6c3c:	b508      	push	{r3, lr}
   d6c3e:	4b02      	ldr	r3, [pc, #8]	; (d6c48 <hal_i2c_init+0xc>)
   d6c40:	681b      	ldr	r3, [r3, #0]
   d6c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c44:	9301      	str	r3, [sp, #4]
   d6c46:	bd08      	pop	{r3, pc}
   d6c48:	00030228 	.word	0x00030228

000d6c4c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d6c4c:	b508      	push	{r3, lr}
   d6c4e:	4b02      	ldr	r3, [pc, #8]	; (d6c58 <hal_i2c_request_ex+0xc>)
   d6c50:	681b      	ldr	r3, [r3, #0]
   d6c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6c54:	9301      	str	r3, [sp, #4]
   d6c56:	bd08      	pop	{r3, pc}
   d6c58:	00030228 	.word	0x00030228

000d6c5c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d6c5c:	b508      	push	{r3, lr}
   d6c5e:	4b02      	ldr	r3, [pc, #8]	; (d6c68 <hal_spi_begin+0xc>)
   d6c60:	681b      	ldr	r3, [r3, #0]
   d6c62:	681b      	ldr	r3, [r3, #0]
   d6c64:	9301      	str	r3, [sp, #4]
   d6c66:	bd08      	pop	{r3, pc}
   d6c68:	00030230 	.word	0x00030230

000d6c6c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d6c6c:	b508      	push	{r3, lr}
   d6c6e:	4b02      	ldr	r3, [pc, #8]	; (d6c78 <hal_spi_transfer+0xc>)
   d6c70:	681b      	ldr	r3, [r3, #0]
   d6c72:	695b      	ldr	r3, [r3, #20]
   d6c74:	9301      	str	r3, [sp, #4]
   d6c76:	bd08      	pop	{r3, pc}
   d6c78:	00030230 	.word	0x00030230

000d6c7c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6c7c:	b508      	push	{r3, lr}
   d6c7e:	4b02      	ldr	r3, [pc, #8]	; (d6c88 <hal_spi_init+0xc>)
   d6c80:	681b      	ldr	r3, [r3, #0]
   d6c82:	69db      	ldr	r3, [r3, #28]
   d6c84:	9301      	str	r3, [sp, #4]
   d6c86:	bd08      	pop	{r3, pc}
   d6c88:	00030230 	.word	0x00030230

000d6c8c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6c8c:	b508      	push	{r3, lr}
   d6c8e:	4b02      	ldr	r3, [pc, #8]	; (d6c98 <hal_spi_is_enabled+0xc>)
   d6c90:	681b      	ldr	r3, [r3, #0]
   d6c92:	6a1b      	ldr	r3, [r3, #32]
   d6c94:	9301      	str	r3, [sp, #4]
   d6c96:	bd08      	pop	{r3, pc}
   d6c98:	00030230 	.word	0x00030230

000d6c9c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d6c9c:	b508      	push	{r3, lr}
   d6c9e:	4b02      	ldr	r3, [pc, #8]	; (d6ca8 <hal_spi_info+0xc>)
   d6ca0:	681b      	ldr	r3, [r3, #0]
   d6ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6ca4:	9301      	str	r3, [sp, #4]
   d6ca6:	bd08      	pop	{r3, pc}
   d6ca8:	00030230 	.word	0x00030230

000d6cac <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d6cac:	b508      	push	{r3, lr}
   d6cae:	4b02      	ldr	r3, [pc, #8]	; (d6cb8 <hal_spi_transfer_dma+0xc>)
   d6cb0:	681b      	ldr	r3, [r3, #0]
   d6cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6cb4:	9301      	str	r3, [sp, #4]
   d6cb6:	bd08      	pop	{r3, pc}
   d6cb8:	00030230 	.word	0x00030230

000d6cbc <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d6cbc:	b508      	push	{r3, lr}
   d6cbe:	4b02      	ldr	r3, [pc, #8]	; (d6cc8 <hal_spi_transfer_dma_status+0xc>)
   d6cc0:	681b      	ldr	r3, [r3, #0]
   d6cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6cc4:	9301      	str	r3, [sp, #4]
   d6cc6:	bd08      	pop	{r3, pc}
   d6cc8:	00030230 	.word	0x00030230

000d6ccc <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6ccc:	b508      	push	{r3, lr}
   d6cce:	4b02      	ldr	r3, [pc, #8]	; (d6cd8 <hal_spi_set_settings+0xc>)
   d6cd0:	681b      	ldr	r3, [r3, #0]
   d6cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6cd4:	9301      	str	r3, [sp, #4]
   d6cd6:	bd08      	pop	{r3, pc}
   d6cd8:	00030230 	.word	0x00030230

000d6cdc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d6cdc:	b508      	push	{r3, lr}
   d6cde:	4b02      	ldr	r3, [pc, #8]	; (d6ce8 <hal_spi_acquire+0xc>)
   d6ce0:	681b      	ldr	r3, [r3, #0]
   d6ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6ce4:	9301      	str	r3, [sp, #4]
   d6ce6:	bd08      	pop	{r3, pc}
   d6ce8:	00030230 	.word	0x00030230

000d6cec <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d6cec:	b508      	push	{r3, lr}
   d6cee:	4b02      	ldr	r3, [pc, #8]	; (d6cf8 <hal_spi_release+0xc>)
   d6cf0:	681b      	ldr	r3, [r3, #0]
   d6cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6cf4:	9301      	str	r3, [sp, #4]
   d6cf6:	bd08      	pop	{r3, pc}
   d6cf8:	00030230 	.word	0x00030230

000d6cfc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6cfc:	b508      	push	{r3, lr}
   d6cfe:	4b02      	ldr	r3, [pc, #8]	; (d6d08 <HAL_USB_USART_Init+0xc>)
   d6d00:	681b      	ldr	r3, [r3, #0]
   d6d02:	681b      	ldr	r3, [r3, #0]
   d6d04:	9301      	str	r3, [sp, #4]
   d6d06:	bd08      	pop	{r3, pc}
   d6d08:	0003024c 	.word	0x0003024c

000d6d0c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6d0c:	b508      	push	{r3, lr}
   d6d0e:	4b02      	ldr	r3, [pc, #8]	; (d6d18 <HAL_USB_USART_Begin+0xc>)
   d6d10:	681b      	ldr	r3, [r3, #0]
   d6d12:	685b      	ldr	r3, [r3, #4]
   d6d14:	9301      	str	r3, [sp, #4]
   d6d16:	bd08      	pop	{r3, pc}
   d6d18:	0003024c 	.word	0x0003024c

000d6d1c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6d1c:	b508      	push	{r3, lr}
   d6d1e:	4b02      	ldr	r3, [pc, #8]	; (d6d28 <HAL_USB_USART_Available_Data+0xc>)
   d6d20:	681b      	ldr	r3, [r3, #0]
   d6d22:	691b      	ldr	r3, [r3, #16]
   d6d24:	9301      	str	r3, [sp, #4]
   d6d26:	bd08      	pop	{r3, pc}
   d6d28:	0003024c 	.word	0x0003024c

000d6d2c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6d2c:	b508      	push	{r3, lr}
   d6d2e:	4b02      	ldr	r3, [pc, #8]	; (d6d38 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6d30:	681b      	ldr	r3, [r3, #0]
   d6d32:	695b      	ldr	r3, [r3, #20]
   d6d34:	9301      	str	r3, [sp, #4]
   d6d36:	bd08      	pop	{r3, pc}
   d6d38:	0003024c 	.word	0x0003024c

000d6d3c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d3c:	b508      	push	{r3, lr}
   d6d3e:	4b02      	ldr	r3, [pc, #8]	; (d6d48 <HAL_USB_USART_Receive_Data+0xc>)
   d6d40:	681b      	ldr	r3, [r3, #0]
   d6d42:	699b      	ldr	r3, [r3, #24]
   d6d44:	9301      	str	r3, [sp, #4]
   d6d46:	bd08      	pop	{r3, pc}
   d6d48:	0003024c 	.word	0x0003024c

000d6d4c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d4c:	b508      	push	{r3, lr}
   d6d4e:	4b02      	ldr	r3, [pc, #8]	; (d6d58 <HAL_USB_USART_Send_Data+0xc>)
   d6d50:	681b      	ldr	r3, [r3, #0]
   d6d52:	69db      	ldr	r3, [r3, #28]
   d6d54:	9301      	str	r3, [sp, #4]
   d6d56:	bd08      	pop	{r3, pc}
   d6d58:	0003024c 	.word	0x0003024c

000d6d5c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6d5c:	b508      	push	{r3, lr}
   d6d5e:	4b02      	ldr	r3, [pc, #8]	; (d6d68 <HAL_USB_USART_Flush_Data+0xc>)
   d6d60:	681b      	ldr	r3, [r3, #0]
   d6d62:	6a1b      	ldr	r3, [r3, #32]
   d6d64:	9301      	str	r3, [sp, #4]
   d6d66:	bd08      	pop	{r3, pc}
   d6d68:	0003024c 	.word	0x0003024c

000d6d6c <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d6d6c:	b508      	push	{r3, lr}
   d6d6e:	4b02      	ldr	r3, [pc, #8]	; (d6d78 <HAL_USB_USART_Is_Enabled+0xc>)
   d6d70:	681b      	ldr	r3, [r3, #0]
   d6d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6d74:	9301      	str	r3, [sp, #4]
   d6d76:	bd08      	pop	{r3, pc}
   d6d78:	0003024c 	.word	0x0003024c

000d6d7c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6d7c:	b508      	push	{r3, lr}
   d6d7e:	4b02      	ldr	r3, [pc, #8]	; (d6d88 <panic_+0xc>)
   d6d80:	681b      	ldr	r3, [r3, #0]
   d6d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d84:	9301      	str	r3, [sp, #4]
   d6d86:	bd08      	pop	{r3, pc}
   d6d88:	00030260 	.word	0x00030260

000d6d8c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6d8c:	b508      	push	{r3, lr}
   d6d8e:	4b02      	ldr	r3, [pc, #8]	; (d6d98 <set_system_mode+0xc>)
   d6d90:	681b      	ldr	r3, [r3, #0]
   d6d92:	685b      	ldr	r3, [r3, #4]
   d6d94:	9301      	str	r3, [sp, #4]
   d6d96:	bd08      	pop	{r3, pc}
   d6d98:	00030220 	.word	0x00030220

000d6d9c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6d9c:	b508      	push	{r3, lr}
   d6d9e:	4b02      	ldr	r3, [pc, #8]	; (d6da8 <system_delay_ms+0xc>)
   d6da0:	681b      	ldr	r3, [r3, #0]
   d6da2:	695b      	ldr	r3, [r3, #20]
   d6da4:	9301      	str	r3, [sp, #4]
   d6da6:	bd08      	pop	{r3, pc}
   d6da8:	00030220 	.word	0x00030220

000d6dac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6dac:	b508      	push	{r3, lr}
   d6dae:	4b03      	ldr	r3, [pc, #12]	; (d6dbc <system_ctrl_set_app_request_handler+0x10>)
   d6db0:	681b      	ldr	r3, [r3, #0]
   d6db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6db6:	9301      	str	r3, [sp, #4]
   d6db8:	bd08      	pop	{r3, pc}
   d6dba:	0000      	.short	0x0000
   d6dbc:	00030220 	.word	0x00030220

000d6dc0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6dc0:	b508      	push	{r3, lr}
   d6dc2:	4b03      	ldr	r3, [pc, #12]	; (d6dd0 <system_ctrl_set_result+0x10>)
   d6dc4:	681b      	ldr	r3, [r3, #0]
   d6dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6dca:	9301      	str	r3, [sp, #4]
   d6dcc:	bd08      	pop	{r3, pc}
   d6dce:	0000      	.short	0x0000
   d6dd0:	00030220 	.word	0x00030220

000d6dd4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6dd4:	b508      	push	{r3, lr}
   d6dd6:	4b02      	ldr	r3, [pc, #8]	; (d6de0 <network_connect+0xc>)
   d6dd8:	681b      	ldr	r3, [r3, #0]
   d6dda:	685b      	ldr	r3, [r3, #4]
   d6ddc:	9301      	str	r3, [sp, #4]
   d6dde:	bd08      	pop	{r3, pc}
   d6de0:	00030240 	.word	0x00030240

000d6de4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6de4:	b508      	push	{r3, lr}
   d6de6:	4b02      	ldr	r3, [pc, #8]	; (d6df0 <network_connecting+0xc>)
   d6de8:	681b      	ldr	r3, [r3, #0]
   d6dea:	689b      	ldr	r3, [r3, #8]
   d6dec:	9301      	str	r3, [sp, #4]
   d6dee:	bd08      	pop	{r3, pc}
   d6df0:	00030240 	.word	0x00030240

000d6df4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6df4:	b508      	push	{r3, lr}
   d6df6:	4b02      	ldr	r3, [pc, #8]	; (d6e00 <network_disconnect+0xc>)
   d6df8:	681b      	ldr	r3, [r3, #0]
   d6dfa:	68db      	ldr	r3, [r3, #12]
   d6dfc:	9301      	str	r3, [sp, #4]
   d6dfe:	bd08      	pop	{r3, pc}
   d6e00:	00030240 	.word	0x00030240

000d6e04 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6e04:	b508      	push	{r3, lr}
   d6e06:	4b02      	ldr	r3, [pc, #8]	; (d6e10 <network_ready+0xc>)
   d6e08:	681b      	ldr	r3, [r3, #0]
   d6e0a:	691b      	ldr	r3, [r3, #16]
   d6e0c:	9301      	str	r3, [sp, #4]
   d6e0e:	bd08      	pop	{r3, pc}
   d6e10:	00030240 	.word	0x00030240

000d6e14 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e14:	b508      	push	{r3, lr}
   d6e16:	4b02      	ldr	r3, [pc, #8]	; (d6e20 <network_on+0xc>)
   d6e18:	681b      	ldr	r3, [r3, #0]
   d6e1a:	695b      	ldr	r3, [r3, #20]
   d6e1c:	9301      	str	r3, [sp, #4]
   d6e1e:	bd08      	pop	{r3, pc}
   d6e20:	00030240 	.word	0x00030240

000d6e24 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e24:	b508      	push	{r3, lr}
   d6e26:	4b02      	ldr	r3, [pc, #8]	; (d6e30 <network_off+0xc>)
   d6e28:	681b      	ldr	r3, [r3, #0]
   d6e2a:	699b      	ldr	r3, [r3, #24]
   d6e2c:	9301      	str	r3, [sp, #4]
   d6e2e:	bd08      	pop	{r3, pc}
   d6e30:	00030240 	.word	0x00030240

000d6e34 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6e34:	b508      	push	{r3, lr}
   d6e36:	4b02      	ldr	r3, [pc, #8]	; (d6e40 <network_listen+0xc>)
   d6e38:	681b      	ldr	r3, [r3, #0]
   d6e3a:	69db      	ldr	r3, [r3, #28]
   d6e3c:	9301      	str	r3, [sp, #4]
   d6e3e:	bd08      	pop	{r3, pc}
   d6e40:	00030240 	.word	0x00030240

000d6e44 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6e44:	b508      	push	{r3, lr}
   d6e46:	4b02      	ldr	r3, [pc, #8]	; (d6e50 <network_listening+0xc>)
   d6e48:	681b      	ldr	r3, [r3, #0]
   d6e4a:	6a1b      	ldr	r3, [r3, #32]
   d6e4c:	9301      	str	r3, [sp, #4]
   d6e4e:	bd08      	pop	{r3, pc}
   d6e50:	00030240 	.word	0x00030240

000d6e54 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6e54:	b508      	push	{r3, lr}
   d6e56:	4b02      	ldr	r3, [pc, #8]	; (d6e60 <network_set_listen_timeout+0xc>)
   d6e58:	681b      	ldr	r3, [r3, #0]
   d6e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e5c:	9301      	str	r3, [sp, #4]
   d6e5e:	bd08      	pop	{r3, pc}
   d6e60:	00030240 	.word	0x00030240

000d6e64 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6e64:	b508      	push	{r3, lr}
   d6e66:	4b02      	ldr	r3, [pc, #8]	; (d6e70 <network_get_listen_timeout+0xc>)
   d6e68:	681b      	ldr	r3, [r3, #0]
   d6e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6e6c:	9301      	str	r3, [sp, #4]
   d6e6e:	bd08      	pop	{r3, pc}
   d6e70:	00030240 	.word	0x00030240

000d6e74 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d6e74:	b508      	push	{r3, lr}
   d6e76:	4b02      	ldr	r3, [pc, #8]	; (d6e80 <network_is_on+0xc>)
   d6e78:	681b      	ldr	r3, [r3, #0]
   d6e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6e7c:	9301      	str	r3, [sp, #4]
   d6e7e:	bd08      	pop	{r3, pc}
   d6e80:	00030240 	.word	0x00030240

000d6e84 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d6e84:	b508      	push	{r3, lr}
   d6e86:	4b02      	ldr	r3, [pc, #8]	; (d6e90 <network_is_off+0xc>)
   d6e88:	681b      	ldr	r3, [r3, #0]
   d6e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6e8c:	9301      	str	r3, [sp, #4]
   d6e8e:	bd08      	pop	{r3, pc}
   d6e90:	00030240 	.word	0x00030240

000d6e94 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6e94:	b508      	push	{r3, lr}
   d6e96:	4b02      	ldr	r3, [pc, #8]	; (d6ea0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6e98:	681b      	ldr	r3, [r3, #0]
   d6e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6e9c:	9301      	str	r3, [sp, #4]
   d6e9e:	bd08      	pop	{r3, pc}
   d6ea0:	00030244 	.word	0x00030244

000d6ea4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6ea4:	b508      	push	{r3, lr}
   d6ea6:	4b02      	ldr	r3, [pc, #8]	; (d6eb0 <malloc+0xc>)
   d6ea8:	681b      	ldr	r3, [r3, #0]
   d6eaa:	681b      	ldr	r3, [r3, #0]
   d6eac:	9301      	str	r3, [sp, #4]
   d6eae:	bd08      	pop	{r3, pc}
   d6eb0:	0003021c 	.word	0x0003021c

000d6eb4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6eb4:	b508      	push	{r3, lr}
   d6eb6:	4b02      	ldr	r3, [pc, #8]	; (d6ec0 <free+0xc>)
   d6eb8:	681b      	ldr	r3, [r3, #0]
   d6eba:	685b      	ldr	r3, [r3, #4]
   d6ebc:	9301      	str	r3, [sp, #4]
   d6ebe:	bd08      	pop	{r3, pc}
   d6ec0:	0003021c 	.word	0x0003021c

000d6ec4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6ec4:	b508      	push	{r3, lr}
   d6ec6:	4b02      	ldr	r3, [pc, #8]	; (d6ed0 <vsnprintf+0xc>)
   d6ec8:	681b      	ldr	r3, [r3, #0]
   d6eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6ecc:	9301      	str	r3, [sp, #4]
   d6ece:	bd08      	pop	{r3, pc}
   d6ed0:	0003021c 	.word	0x0003021c

000d6ed4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6ed4:	b508      	push	{r3, lr}
   d6ed6:	4b02      	ldr	r3, [pc, #8]	; (d6ee0 <__errno+0xc>)
   d6ed8:	681b      	ldr	r3, [r3, #0]
   d6eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6edc:	9301      	str	r3, [sp, #4]
   d6ede:	bd08      	pop	{r3, pc}
   d6ee0:	0003021c 	.word	0x0003021c

000d6ee4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6ee4:	b508      	push	{r3, lr}
   d6ee6:	4b02      	ldr	r3, [pc, #8]	; (d6ef0 <newlib_impure_ptr_callback+0xc>)
   d6ee8:	681b      	ldr	r3, [r3, #0]
   d6eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6eec:	9301      	str	r3, [sp, #4]
   d6eee:	bd08      	pop	{r3, pc}
   d6ef0:	0003021c 	.word	0x0003021c

000d6ef4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6ef4:	2200      	movs	r2, #0
   d6ef6:	6840      	ldr	r0, [r0, #4]
   d6ef8:	4611      	mov	r1, r2
   d6efa:	f7ff bfa3 	b.w	d6e44 <network_listening>

000d6efe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6efe:	2200      	movs	r2, #0
   d6f00:	6840      	ldr	r0, [r0, #4]
   d6f02:	4611      	mov	r1, r2
   d6f04:	f7ff bfae 	b.w	d6e64 <network_get_listen_timeout>

000d6f08 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6f08:	6840      	ldr	r0, [r0, #4]
   d6f0a:	2200      	movs	r2, #0
   d6f0c:	f7ff bfa2 	b.w	d6e54 <network_set_listen_timeout>

000d6f10 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6f10:	6840      	ldr	r0, [r0, #4]
   d6f12:	2200      	movs	r2, #0
   d6f14:	f081 0101 	eor.w	r1, r1, #1
   d6f18:	f7ff bf8c 	b.w	d6e34 <network_listen>

000d6f1c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6f1c:	2300      	movs	r3, #0
   d6f1e:	6840      	ldr	r0, [r0, #4]
   d6f20:	461a      	mov	r2, r3
   d6f22:	4619      	mov	r1, r3
   d6f24:	f7ff bf7e 	b.w	d6e24 <network_off>

000d6f28 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6f28:	2300      	movs	r3, #0
   d6f2a:	6840      	ldr	r0, [r0, #4]
   d6f2c:	461a      	mov	r2, r3
   d6f2e:	4619      	mov	r1, r3
   d6f30:	f7ff bf70 	b.w	d6e14 <network_on>

000d6f34 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6f34:	2200      	movs	r2, #0
   d6f36:	6840      	ldr	r0, [r0, #4]
   d6f38:	4611      	mov	r1, r2
   d6f3a:	f7ff bf63 	b.w	d6e04 <network_ready>

000d6f3e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6f3e:	2200      	movs	r2, #0
   d6f40:	6840      	ldr	r0, [r0, #4]
   d6f42:	4611      	mov	r1, r2
   d6f44:	f7ff bf4e 	b.w	d6de4 <network_connecting>

000d6f48 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f48:	6840      	ldr	r0, [r0, #4]
   d6f4a:	2200      	movs	r2, #0
   d6f4c:	2102      	movs	r1, #2
   d6f4e:	f7ff bf51 	b.w	d6df4 <network_disconnect>

000d6f52 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6f52:	2300      	movs	r3, #0
   d6f54:	6840      	ldr	r0, [r0, #4]
   d6f56:	461a      	mov	r2, r3
   d6f58:	f7ff bf3c 	b.w	d6dd4 <network_connect>

000d6f5c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6f5c:	4b02      	ldr	r3, [pc, #8]	; (d6f68 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6f5e:	2203      	movs	r2, #3
   d6f60:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6f62:	4a02      	ldr	r2, [pc, #8]	; (d6f6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6f64:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6f66:	4770      	bx	lr
   d6f68:	2003e58c 	.word	0x2003e58c
   d6f6c:	000dae30 	.word	0x000dae30

000d6f70 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d6f70:	2100      	movs	r1, #0
   d6f72:	f7ff beb3 	b.w	d6cdc <hal_spi_acquire>

000d6f76 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d6f76:	2100      	movs	r1, #0
   d6f78:	f7ff beb8 	b.w	d6cec <hal_spi_release>

000d6f7c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6f7c:	b510      	push	{r4, lr}
   d6f7e:	4604      	mov	r4, r0
   d6f80:	4608      	mov	r0, r1
{
    _spi = spi;
   d6f82:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6f84:	f7ff fe7a 	bl	d6c7c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6f88:	2300      	movs	r3, #0
   d6f8a:	6063      	str	r3, [r4, #4]
}
   d6f8c:	4620      	mov	r0, r4
   d6f8e:	bd10      	pop	{r4, pc}

000d6f90 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6f90:	b510      	push	{r4, lr}
   d6f92:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6f94:	7800      	ldrb	r0, [r0, #0]
   d6f96:	f7ff ffeb 	bl	d6f70 <_ZN8SPIClass4lockEv.isra.0>
   d6f9a:	b948      	cbnz	r0, d6fb0 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d6f9c:	7820      	ldrb	r0, [r4, #0]
   d6f9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6fa2:	f7ff fe5b 	bl	d6c5c <hal_spi_begin>
        unlock();
   d6fa6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6fac:	f7ff bfe3 	b.w	d6f76 <_ZN8SPIClass6unlockEv.isra.0>
}
   d6fb0:	bd10      	pop	{r4, pc}

000d6fb2 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6fb2:	7800      	ldrb	r0, [r0, #0]
   d6fb4:	f7ff bfdf 	b.w	d6f76 <_ZN8SPIClass6unlockEv.isra.0>

000d6fb8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6fb8:	0840      	lsrs	r0, r0, #1
{
   d6fba:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d6fbc:	6018      	str	r0, [r3, #0]
   d6fbe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6fc0:	6818      	ldr	r0, [r3, #0]
   d6fc2:	4288      	cmp	r0, r1
   d6fc4:	b2e5      	uxtb	r5, r4
   d6fc6:	d906      	bls.n	d6fd6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6fc8:	3401      	adds	r4, #1
   d6fca:	2c08      	cmp	r4, #8
   d6fcc:	d002      	beq.n	d6fd4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6fce:	0840      	lsrs	r0, r0, #1
   d6fd0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d6fd2:	e7f5      	b.n	d6fc0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6fd4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d6fd6:	4b02      	ldr	r3, [pc, #8]	; (d6fe0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6fd8:	5d5b      	ldrb	r3, [r3, r5]
   d6fda:	7013      	strb	r3, [r2, #0]
}
   d6fdc:	bd30      	pop	{r4, r5, pc}
   d6fde:	bf00      	nop
   d6fe0:	000dae64 	.word	0x000dae64

000d6fe4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d6fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6fe8:	4606      	mov	r6, r0
   d6fea:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d6fec:	7800      	ldrb	r0, [r0, #0]
{
   d6fee:	460c      	mov	r4, r1
    CHECK(lock());
   d6ff0:	f7ff ffbe 	bl	d6f70 <_ZN8SPIClass4lockEv.isra.0>
   d6ff4:	2800      	cmp	r0, #0
   d6ff6:	db1b      	blt.n	d7030 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d6ff8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d6ffa:	2214      	movs	r2, #20
   d6ffc:	2100      	movs	r1, #0
   d6ffe:	a809      	add	r0, sp, #36	; 0x24
   d7000:	f002 ffe6 	bl	d9fd0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7004:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d7006:	2200      	movs	r2, #0
   d7008:	a909      	add	r1, sp, #36	; 0x24
   d700a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d700c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d7010:	f7ff fe44 	bl	d6c9c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d7014:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d7018:	b113      	cbz	r3, d7020 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d701a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d701e:	b155      	cbz	r5, d7036 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d7020:	2700      	movs	r7, #0
   d7022:	46b9      	mov	r9, r7
   d7024:	46b8      	mov	r8, r7
   d7026:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d7028:	7923      	ldrb	r3, [r4, #4]
   d702a:	b15d      	cbz	r5, d7044 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d702c:	b1c3      	cbz	r3, d7060 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d702e:	2000      	movs	r0, #0
}
   d7030:	b00f      	add	sp, #60	; 0x3c
   d7032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d7036:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d703a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d703e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d7042:	e7f1      	b.n	d7028 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d7044:	2b00      	cmp	r3, #0
   d7046:	d135      	bne.n	d70b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d7048:	68a3      	ldr	r3, [r4, #8]
   d704a:	4543      	cmp	r3, r8
   d704c:	d108      	bne.n	d7060 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d704e:	f88d 9020 	strb.w	r9, [sp, #32]
   d7052:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d7056:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d705a:	89a3      	ldrh	r3, [r4, #12]
   d705c:	429a      	cmp	r2, r3
   d705e:	d0e6      	beq.n	d702e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d7060:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d7062:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d7064:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d7068:	980a      	ldr	r0, [sp, #40]	; 0x28
   d706a:	ab04      	add	r3, sp, #16
   d706c:	f10d 020f 	add.w	r2, sp, #15
   d7070:	f7ff ffa2 	bl	d6fb8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d7074:	7921      	ldrb	r1, [r4, #4]
   d7076:	b985      	cbnz	r5, d709a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d7078:	b989      	cbnz	r1, d709e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d707a:	68a3      	ldr	r3, [r4, #8]
   d707c:	4543      	cmp	r3, r8
   d707e:	d30e      	bcc.n	d709e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d7080:	f88d 9020 	strb.w	r9, [sp, #32]
   d7084:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d7088:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d708c:	89a3      	ldrh	r3, [r4, #12]
   d708e:	429a      	cmp	r2, r3
   d7090:	d105      	bne.n	d709e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d7092:	9b04      	ldr	r3, [sp, #16]
   d7094:	4543      	cmp	r3, r8
   d7096:	d102      	bne.n	d709e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d7098:	e7c9      	b.n	d702e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d709a:	2900      	cmp	r1, #0
   d709c:	d1f9      	bne.n	d7092 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d709e:	2300      	movs	r3, #0
   d70a0:	9301      	str	r3, [sp, #4]
   d70a2:	7b63      	ldrb	r3, [r4, #13]
   d70a4:	9300      	str	r3, [sp, #0]
   d70a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d70aa:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d70ac:	7830      	ldrb	r0, [r6, #0]
   d70ae:	f7ff fe0d 	bl	d6ccc <hal_spi_set_settings>
   d70b2:	e7bc      	b.n	d702e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d70b4:	e9cd 5500 	strd	r5, r5, [sp]
   d70b8:	462b      	mov	r3, r5
   d70ba:	462a      	mov	r2, r5
   d70bc:	2101      	movs	r1, #1
   d70be:	e7f5      	b.n	d70ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d70c0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d70c0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d70c2:	7800      	ldrb	r0, [r0, #0]
   d70c4:	f7ff fdd2 	bl	d6c6c <hal_spi_transfer>
}
   d70c8:	b2c0      	uxtb	r0, r0
   d70ca:	bd08      	pop	{r3, pc}

000d70cc <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d70cc:	b530      	push	{r4, r5, lr}
   d70ce:	b087      	sub	sp, #28
   d70d0:	4604      	mov	r4, r0
   d70d2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d70d4:	9500      	str	r5, [sp, #0]
   d70d6:	7800      	ldrb	r0, [r0, #0]
   d70d8:	f7ff fde8 	bl	d6cac <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d70dc:	b93d      	cbnz	r5, d70ee <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d70de:	7820      	ldrb	r0, [r4, #0]
   d70e0:	a902      	add	r1, sp, #8
   d70e2:	f7ff fdeb 	bl	d6cbc <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d70e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d70ea:	07db      	lsls	r3, r3, #31
   d70ec:	d4f7      	bmi.n	d70de <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d70ee:	b007      	add	sp, #28
   d70f0:	bd30      	pop	{r4, r5, pc}
	...

000d70f4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d70f4:	4b05      	ldr	r3, [pc, #20]	; (d710c <_GLOBAL__sub_I_System+0x18>)
   d70f6:	2202      	movs	r2, #2
   d70f8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d70fa:	4b05      	ldr	r3, [pc, #20]	; (d7110 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d70fc:	4a05      	ldr	r2, [pc, #20]	; (d7114 <_GLOBAL__sub_I_System+0x20>)
   d70fe:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d7100:	2000      	movs	r0, #0
   d7102:	6018      	str	r0, [r3, #0]
   d7104:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d7106:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7108:	f7ff be40 	b.w	d6d8c <set_system_mode>
   d710c:	2003e5a0 	.word	0x2003e5a0
   d7110:	2003e594 	.word	0x2003e594
   d7114:	ffff0000 	.word	0xffff0000

000d7118 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7118:	4802      	ldr	r0, [pc, #8]	; (d7124 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d711a:	2300      	movs	r3, #0
   d711c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d711e:	f7ff bced 	b.w	d6afc <os_mutex_recursive_create>
   d7122:	bf00      	nop
   d7124:	2003e5a4 	.word	0x2003e5a4

000d7128 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d712a:	4606      	mov	r6, r0
   d712c:	460d      	mov	r5, r1
  size_t n = 0;
   d712e:	188f      	adds	r7, r1, r2
   d7130:	2400      	movs	r4, #0
  while (size--) {
   d7132:	42bd      	cmp	r5, r7
   d7134:	d00c      	beq.n	d7150 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7136:	6833      	ldr	r3, [r6, #0]
   d7138:	f815 1b01 	ldrb.w	r1, [r5], #1
   d713c:	689b      	ldr	r3, [r3, #8]
   d713e:	4630      	mov	r0, r6
   d7140:	4798      	blx	r3
     if (chunk>=0)
   d7142:	1e03      	subs	r3, r0, #0
   d7144:	db01      	blt.n	d714a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7146:	441c      	add	r4, r3
  while (size--) {
   d7148:	e7f3      	b.n	d7132 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d714a:	2c00      	cmp	r4, #0
   d714c:	bf08      	it	eq
   d714e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7150:	4620      	mov	r0, r4
   d7152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7154 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7154:	b513      	push	{r0, r1, r4, lr}
   d7156:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d7158:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d715a:	b159      	cbz	r1, d7174 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d715c:	9101      	str	r1, [sp, #4]
   d715e:	f002 ff63 	bl	da028 <strlen>
   d7162:	6823      	ldr	r3, [r4, #0]
   d7164:	9901      	ldr	r1, [sp, #4]
   d7166:	68db      	ldr	r3, [r3, #12]
   d7168:	4602      	mov	r2, r0
   d716a:	4620      	mov	r0, r4
    }
   d716c:	b002      	add	sp, #8
   d716e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7172:	4718      	bx	r3
    }
   d7174:	b002      	add	sp, #8
   d7176:	bd10      	pop	{r4, pc}

000d7178 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7178:	b508      	push	{r3, lr}
  return write(str);
   d717a:	f7ff ffeb 	bl	d7154 <_ZN5Print5writeEPKc>
}
   d717e:	bd08      	pop	{r3, pc}

000d7180 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7180:	6803      	ldr	r3, [r0, #0]
   d7182:	689b      	ldr	r3, [r3, #8]
   d7184:	4718      	bx	r3

000d7186 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d7186:	b508      	push	{r3, lr}
  return write(str);
   d7188:	f7ff ffe4 	bl	d7154 <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   d718c:	bd08      	pop	{r3, pc}

000d718e <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d718e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7190:	210d      	movs	r1, #13
{
   d7192:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7194:	f7ff fff4 	bl	d7180 <_ZN5Print5printEc>
  n += print('\n');
   d7198:	210a      	movs	r1, #10
  size_t n = print('\r');
   d719a:	4604      	mov	r4, r0
  n += print('\n');
   d719c:	4628      	mov	r0, r5
   d719e:	f7ff ffef 	bl	d7180 <_ZN5Print5printEc>
  return n;
}
   d71a2:	4420      	add	r0, r4
   d71a4:	bd38      	pop	{r3, r4, r5, pc}

000d71a6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d71a6:	b538      	push	{r3, r4, r5, lr}
   d71a8:	4605      	mov	r5, r0
  return write(str);
   d71aa:	f7ff ffd3 	bl	d7154 <_ZN5Print5writeEPKc>
   d71ae:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d71b0:	4628      	mov	r0, r5
   d71b2:	f7ff ffec 	bl	d718e <_ZN5Print7printlnEv>
  return n;
}
   d71b6:	4420      	add	r0, r4
   d71b8:	bd38      	pop	{r3, r4, r5, pc}

000d71ba <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d71ba:	f7ff bff4 	b.w	d71a6 <_ZN5Print7printlnEPKc>

000d71be <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d71be:	b530      	push	{r4, r5, lr}
   d71c0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d71c2:	2300      	movs	r3, #0
   d71c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d71c8:	2a01      	cmp	r2, #1
   d71ca:	bf98      	it	ls
   d71cc:	220a      	movls	r2, #10
   d71ce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d71d0:	460d      	mov	r5, r1
   d71d2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d71d6:	fb01 5312 	mls	r3, r1, r2, r5
   d71da:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d71de:	2b09      	cmp	r3, #9
   d71e0:	bf94      	ite	ls
   d71e2:	3330      	addls	r3, #48	; 0x30
   d71e4:	3337      	addhi	r3, #55	; 0x37
   d71e6:	b2db      	uxtb	r3, r3
  } while(n);
   d71e8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d71ea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d71ee:	d9ef      	bls.n	d71d0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d71f0:	4621      	mov	r1, r4
   d71f2:	f7ff ffaf 	bl	d7154 <_ZN5Print5writeEPKc>
}
   d71f6:	b00b      	add	sp, #44	; 0x2c
   d71f8:	bd30      	pop	{r4, r5, pc}
	...

000d71fc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d71fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7200:	ec55 4b10 	vmov	r4, r5, d0
   d7204:	4606      	mov	r6, r0
   d7206:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7208:	ee10 2a10 	vmov	r2, s0
   d720c:	ee10 0a10 	vmov	r0, s0
   d7210:	462b      	mov	r3, r5
   d7212:	4629      	mov	r1, r5
   d7214:	f002 fb58 	bl	d98c8 <__aeabi_dcmpun>
   d7218:	b140      	cbz	r0, d722c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d721a:	4953      	ldr	r1, [pc, #332]	; (d7368 <_ZN5Print10printFloatEdh+0x16c>)
   d721c:	4630      	mov	r0, r6
   d721e:	f7ff ff99 	bl	d7154 <_ZN5Print5writeEPKc>
   d7222:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d7224:	4650      	mov	r0, sl
   d7226:	b003      	add	sp, #12
   d7228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d722c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d7230:	4b4e      	ldr	r3, [pc, #312]	; (d736c <_ZN5Print10printFloatEdh+0x170>)
   d7232:	f04f 32ff 	mov.w	r2, #4294967295
   d7236:	4620      	mov	r0, r4
   d7238:	4649      	mov	r1, r9
   d723a:	f002 fb45 	bl	d98c8 <__aeabi_dcmpun>
   d723e:	b948      	cbnz	r0, d7254 <_ZN5Print10printFloatEdh+0x58>
   d7240:	4b4a      	ldr	r3, [pc, #296]	; (d736c <_ZN5Print10printFloatEdh+0x170>)
   d7242:	f04f 32ff 	mov.w	r2, #4294967295
   d7246:	4620      	mov	r0, r4
   d7248:	4649      	mov	r1, r9
   d724a:	f002 fb1f 	bl	d988c <__aeabi_dcmple>
   d724e:	b908      	cbnz	r0, d7254 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d7250:	4947      	ldr	r1, [pc, #284]	; (d7370 <_ZN5Print10printFloatEdh+0x174>)
   d7252:	e7e3      	b.n	d721c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d7254:	4b47      	ldr	r3, [pc, #284]	; (d7374 <_ZN5Print10printFloatEdh+0x178>)
   d7256:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d725a:	4620      	mov	r0, r4
   d725c:	4629      	mov	r1, r5
   d725e:	f002 fb29 	bl	d98b4 <__aeabi_dcmpgt>
   d7262:	b108      	cbz	r0, d7268 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d7264:	4944      	ldr	r1, [pc, #272]	; (d7378 <_ZN5Print10printFloatEdh+0x17c>)
   d7266:	e7d9      	b.n	d721c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d7268:	4b44      	ldr	r3, [pc, #272]	; (d737c <_ZN5Print10printFloatEdh+0x180>)
   d726a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d726e:	4620      	mov	r0, r4
   d7270:	4629      	mov	r1, r5
   d7272:	f002 fb01 	bl	d9878 <__aeabi_dcmplt>
   d7276:	2800      	cmp	r0, #0
   d7278:	d1f4      	bne.n	d7264 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d727a:	2200      	movs	r2, #0
   d727c:	2300      	movs	r3, #0
   d727e:	4620      	mov	r0, r4
   d7280:	4629      	mov	r1, r5
   d7282:	f002 faf9 	bl	d9878 <__aeabi_dcmplt>
   d7286:	b1d0      	cbz	r0, d72be <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d7288:	212d      	movs	r1, #45	; 0x2d
   d728a:	4630      	mov	r0, r6
   d728c:	f7ff ff78 	bl	d7180 <_ZN5Print5printEc>
     number = -number;
   d7290:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d7294:	4682      	mov	sl, r0
     number = -number;
   d7296:	461d      	mov	r5, r3
  double rounding = 0.5;
   d7298:	4939      	ldr	r1, [pc, #228]	; (d7380 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d729a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d7388 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d729e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d72a2:	2000      	movs	r0, #0
    rounding /= 10.0;
   d72a4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d72a8:	fa5f f38b 	uxtb.w	r3, fp
   d72ac:	429f      	cmp	r7, r3
   d72ae:	d908      	bls.n	d72c2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d72b0:	4642      	mov	r2, r8
   d72b2:	464b      	mov	r3, r9
   d72b4:	f002 f998 	bl	d95e8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d72b8:	f10b 0b01 	add.w	fp, fp, #1
   d72bc:	e7f4      	b.n	d72a8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d72be:	4682      	mov	sl, r0
   d72c0:	e7ea      	b.n	d7298 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d72c2:	4622      	mov	r2, r4
   d72c4:	462b      	mov	r3, r5
   d72c6:	f001 feaf 	bl	d9028 <__adddf3>
   d72ca:	460d      	mov	r5, r1
   d72cc:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d72ce:	f002 fb39 	bl	d9944 <__aeabi_d2uiz>
   d72d2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d72d4:	f001 ffe4 	bl	d92a0 <__aeabi_ui2d>
   d72d8:	4602      	mov	r2, r0
   d72da:	460b      	mov	r3, r1
   d72dc:	4620      	mov	r0, r4
   d72de:	4629      	mov	r1, r5
   d72e0:	f001 fea0 	bl	d9024 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d72e4:	220a      	movs	r2, #10
   d72e6:	4604      	mov	r4, r0
   d72e8:	460d      	mov	r5, r1
   d72ea:	4630      	mov	r0, r6
   d72ec:	4641      	mov	r1, r8
   d72ee:	f7ff ff66 	bl	d71be <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d72f2:	4482      	add	sl, r0
  if (digits > 0) {
   d72f4:	b127      	cbz	r7, d7300 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d72f6:	4923      	ldr	r1, [pc, #140]	; (d7384 <_ZN5Print10printFloatEdh+0x188>)
   d72f8:	4630      	mov	r0, r6
   d72fa:	f7ff ff2b 	bl	d7154 <_ZN5Print5writeEPKc>
    n += print(".");
   d72fe:	4482      	add	sl, r0
    remainder *= 10.0;
   d7300:	f8df 9084 	ldr.w	r9, [pc, #132]	; d7388 <_ZN5Print10printFloatEdh+0x18c>
   d7304:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d7308:	3f01      	subs	r7, #1
   d730a:	b2ff      	uxtb	r7, r7
   d730c:	2fff      	cmp	r7, #255	; 0xff
   d730e:	d089      	beq.n	d7224 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d7310:	4642      	mov	r2, r8
   d7312:	464b      	mov	r3, r9
   d7314:	4620      	mov	r0, r4
   d7316:	4629      	mov	r1, r5
   d7318:	f002 f83c 	bl	d9394 <__aeabi_dmul>
   d731c:	4604      	mov	r4, r0
   d731e:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d7320:	f002 fae8 	bl	d98f4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d7324:	f1b0 0b00 	subs.w	fp, r0, #0
   d7328:	da1a      	bge.n	d7360 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d732a:	212d      	movs	r1, #45	; 0x2d
   d732c:	4630      	mov	r0, r6
   d732e:	f7ff ff27 	bl	d7180 <_ZN5Print5printEc>
            val = -n;
   d7332:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d7336:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d7338:	220a      	movs	r2, #10
   d733a:	4630      	mov	r0, r6
   d733c:	9301      	str	r3, [sp, #4]
   d733e:	f7ff ff3e 	bl	d71be <_ZN5Print11printNumberEmh>
   d7342:	9b01      	ldr	r3, [sp, #4]
   d7344:	4418      	add	r0, r3
    n += print(toPrint);
   d7346:	4482      	add	sl, r0
    remainder -= toPrint;
   d7348:	4658      	mov	r0, fp
   d734a:	f001 ffb9 	bl	d92c0 <__aeabi_i2d>
   d734e:	4602      	mov	r2, r0
   d7350:	460b      	mov	r3, r1
   d7352:	4620      	mov	r0, r4
   d7354:	4629      	mov	r1, r5
   d7356:	f001 fe65 	bl	d9024 <__aeabi_dsub>
   d735a:	4604      	mov	r4, r0
   d735c:	460d      	mov	r5, r1
  while (digits-- > 0)
   d735e:	e7d3      	b.n	d7308 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d7360:	4659      	mov	r1, fp
        size_t t = 0;
   d7362:	2300      	movs	r3, #0
   d7364:	e7e8      	b.n	d7338 <_ZN5Print10printFloatEdh+0x13c>
   d7366:	bf00      	nop
   d7368:	000dae6c 	.word	0x000dae6c
   d736c:	7fefffff 	.word	0x7fefffff
   d7370:	000dae70 	.word	0x000dae70
   d7374:	41efffff 	.word	0x41efffff
   d7378:	000dae74 	.word	0x000dae74
   d737c:	c1efffff 	.word	0xc1efffff
   d7380:	3fe00000 	.word	0x3fe00000
   d7384:	000da2a5 	.word	0x000da2a5
   d7388:	40240000 	.word	0x40240000

000d738c <_ZN5Print5printEfi>:
{
   d738c:	b538      	push	{r3, r4, r5, lr}
   d738e:	4604      	mov	r4, r0
   d7390:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d7394:	b2cd      	uxtb	r5, r1
   d7396:	f001 ffa5 	bl	d92e4 <__aeabi_f2d>
   d739a:	ec41 0b10 	vmov	d0, r0, r1
   d739e:	4629      	mov	r1, r5
   d73a0:	4620      	mov	r0, r4
}
   d73a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d73a6:	f7ff bf29 	b.w	d71fc <_ZN5Print10printFloatEdh>

000d73aa <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   d73aa:	b2c9      	uxtb	r1, r1
   d73ac:	f7ff bf26 	b.w	d71fc <_ZN5Print10printFloatEdh>

000d73b0 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d73b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d73b4:	b086      	sub	sp, #24
   d73b6:	af00      	add	r7, sp, #0
   d73b8:	4605      	mov	r5, r0
   d73ba:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d73bc:	1d38      	adds	r0, r7, #4
   d73be:	2114      	movs	r1, #20
{
   d73c0:	4614      	mov	r4, r2
    va_copy(args2, args);
   d73c2:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d73c4:	f7ff fd7e 	bl	d6ec4 <vsnprintf>

    if (n<bufsize)
   d73c8:	2813      	cmp	r0, #19
   d73ca:	d80e      	bhi.n	d73ea <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d73cc:	1d39      	adds	r1, r7, #4
   d73ce:	4628      	mov	r0, r5
   d73d0:	f7ff fec0 	bl	d7154 <_ZN5Print5writeEPKc>
   d73d4:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d73d6:	b11e      	cbz	r6, d73e0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d73d8:	4628      	mov	r0, r5
   d73da:	f7ff fed8 	bl	d718e <_ZN5Print7printlnEv>
   d73de:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d73e0:	4620      	mov	r0, r4
   d73e2:	3718      	adds	r7, #24
   d73e4:	46bd      	mov	sp, r7
   d73e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d73ea:	f100 0308 	add.w	r3, r0, #8
   d73ee:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d73f2:	46e8      	mov	r8, sp
        char bigger[n+1];
   d73f4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d73f8:	4622      	mov	r2, r4
   d73fa:	1c41      	adds	r1, r0, #1
   d73fc:	683b      	ldr	r3, [r7, #0]
   d73fe:	4668      	mov	r0, sp
   d7400:	f7ff fd60 	bl	d6ec4 <vsnprintf>
  return write(str);
   d7404:	4669      	mov	r1, sp
   d7406:	4628      	mov	r0, r5
   d7408:	f7ff fea4 	bl	d7154 <_ZN5Print5writeEPKc>
   d740c:	4604      	mov	r4, r0
   d740e:	46c5      	mov	sp, r8
   d7410:	e7e1      	b.n	d73d6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000d7414 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7414:	4b01      	ldr	r3, [pc, #4]	; (d741c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7416:	4a02      	ldr	r2, [pc, #8]	; (d7420 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7418:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d741a:	4770      	bx	lr
   d741c:	2003e5a8 	.word	0x2003e5a8
   d7420:	000dae78 	.word	0x000dae78

000d7424 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7424:	4b02      	ldr	r3, [pc, #8]	; (d7430 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7426:	681a      	ldr	r2, [r3, #0]
   d7428:	4b02      	ldr	r3, [pc, #8]	; (d7434 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d742a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d742c:	4770      	bx	lr
   d742e:	bf00      	nop
   d7430:	2003e444 	.word	0x2003e444
   d7434:	2003e5ac 	.word	0x2003e5ac

000d7438 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7438:	2100      	movs	r1, #0
   d743a:	f7ff bcaf 	b.w	d6d9c <system_delay_ms>
	...

000d7440 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d7440:	4b01      	ldr	r3, [pc, #4]	; (d7448 <_GLOBAL__sub_I_RGB+0x8>)
   d7442:	2200      	movs	r2, #0
   d7444:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d7446:	4770      	bx	lr
   d7448:	2003e5b0 	.word	0x2003e5b0

000d744c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d744c:	4b01      	ldr	r3, [pc, #4]	; (d7454 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d744e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7450:	4770      	bx	lr
   d7452:	bf00      	nop
   d7454:	2003e44c 	.word	0x2003e44c

000d7458 <serialEventRun>:
{
   d7458:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d745a:	4b0b      	ldr	r3, [pc, #44]	; (d7488 <serialEventRun+0x30>)
   d745c:	b143      	cbz	r3, d7470 <serialEventRun+0x18>
   d745e:	f000 f967 	bl	d7730 <_Z16_fetch_usbserialv>
   d7462:	6803      	ldr	r3, [r0, #0]
   d7464:	691b      	ldr	r3, [r3, #16]
   d7466:	4798      	blx	r3
   d7468:	2800      	cmp	r0, #0
   d746a:	dd01      	ble.n	d7470 <serialEventRun+0x18>
        serialEvent();
   d746c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7470:	4b06      	ldr	r3, [pc, #24]	; (d748c <serialEventRun+0x34>)
   d7472:	b143      	cbz	r3, d7486 <serialEventRun+0x2e>
   d7474:	f000 fa22 	bl	d78bc <_Z22__fetch_global_Serial1v>
   d7478:	6803      	ldr	r3, [r0, #0]
   d747a:	691b      	ldr	r3, [r3, #16]
   d747c:	4798      	blx	r3
   d747e:	2800      	cmp	r0, #0
   d7480:	dd01      	ble.n	d7486 <serialEventRun+0x2e>
        serialEvent1();
   d7482:	f3af 8000 	nop.w
}
   d7486:	bd08      	pop	{r3, pc}
	...

000d7490 <_post_loop>:
{
   d7490:	b508      	push	{r3, lr}
	serialEventRun();
   d7492:	f7ff ffe1 	bl	d7458 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7496:	f7ff fb21 	bl	d6adc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d749a:	4b01      	ldr	r3, [pc, #4]	; (d74a0 <_post_loop+0x10>)
   d749c:	6018      	str	r0, [r3, #0]
}
   d749e:	bd08      	pop	{r3, pc}
   d74a0:	2003e738 	.word	0x2003e738

000d74a4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d74a4:	4805      	ldr	r0, [pc, #20]	; (d74bc <_Z33system_initialize_user_backup_ramv+0x18>)
   d74a6:	4a06      	ldr	r2, [pc, #24]	; (d74c0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d74a8:	4906      	ldr	r1, [pc, #24]	; (d74c4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d74aa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d74ac:	1a12      	subs	r2, r2, r0
   d74ae:	f002 fd81 	bl	d9fb4 <memcpy>
    __backup_sram_signature = signature;
   d74b2:	4b05      	ldr	r3, [pc, #20]	; (d74c8 <_Z33system_initialize_user_backup_ramv+0x24>)
   d74b4:	4a05      	ldr	r2, [pc, #20]	; (d74cc <_Z33system_initialize_user_backup_ramv+0x28>)
   d74b6:	601a      	str	r2, [r3, #0]
}
   d74b8:	bd08      	pop	{r3, pc}
   d74ba:	bf00      	nop
   d74bc:	2003f400 	.word	0x2003f400
   d74c0:	2003f404 	.word	0x2003f404
   d74c4:	000daff8 	.word	0x000daff8
   d74c8:	2003f400 	.word	0x2003f400
   d74cc:	9a271c1e 	.word	0x9a271c1e

000d74d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d74d0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d74d2:	2300      	movs	r3, #0
   d74d4:	9300      	str	r3, [sp, #0]
   d74d6:	461a      	mov	r2, r3
   d74d8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d74dc:	f7ff fc70 	bl	d6dc0 <system_ctrl_set_result>
}
   d74e0:	b003      	add	sp, #12
   d74e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d74e8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d74e8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d74ea:	8843      	ldrh	r3, [r0, #2]
   d74ec:	2b0a      	cmp	r3, #10
   d74ee:	d008      	beq.n	d7502 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d74f0:	2b50      	cmp	r3, #80	; 0x50
   d74f2:	d10b      	bne.n	d750c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d74f4:	4b09      	ldr	r3, [pc, #36]	; (d751c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d74f6:	681b      	ldr	r3, [r3, #0]
   d74f8:	b14b      	cbz	r3, d750e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d74fa:	b003      	add	sp, #12
   d74fc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7500:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7502:	f7ff ffe5 	bl	d74d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7506:	b003      	add	sp, #12
   d7508:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d750c:	2300      	movs	r3, #0
   d750e:	9300      	str	r3, [sp, #0]
   d7510:	461a      	mov	r2, r3
   d7512:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7516:	f7ff fc53 	bl	d6dc0 <system_ctrl_set_result>
}
   d751a:	e7f4      	b.n	d7506 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d751c:	2003e5c4 	.word	0x2003e5c4

000d7520 <module_user_init_hook>:
{
   d7520:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7522:	4812      	ldr	r0, [pc, #72]	; (d756c <module_user_init_hook+0x4c>)
   d7524:	2100      	movs	r1, #0
   d7526:	f7ff fcdd 	bl	d6ee4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d752a:	4b11      	ldr	r3, [pc, #68]	; (d7570 <module_user_init_hook+0x50>)
   d752c:	681a      	ldr	r2, [r3, #0]
   d752e:	4b11      	ldr	r3, [pc, #68]	; (d7574 <module_user_init_hook+0x54>)
   d7530:	429a      	cmp	r2, r3
   d7532:	4b11      	ldr	r3, [pc, #68]	; (d7578 <module_user_init_hook+0x58>)
   d7534:	bf0c      	ite	eq
   d7536:	2201      	moveq	r2, #1
   d7538:	2200      	movne	r2, #0
   d753a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d753c:	d001      	beq.n	d7542 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d753e:	f7ff ffb1 	bl	d74a4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7542:	f7ff fabb 	bl	d6abc <HAL_RNG_GetRandomNumber>
   d7546:	4604      	mov	r4, r0
    srand(seed);
   d7548:	f002 fd4a 	bl	d9fe0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d754c:	4b0b      	ldr	r3, [pc, #44]	; (d757c <module_user_init_hook+0x5c>)
   d754e:	b113      	cbz	r3, d7556 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d7550:	4620      	mov	r0, r4
   d7552:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7556:	2100      	movs	r1, #0
   d7558:	4808      	ldr	r0, [pc, #32]	; (d757c <module_user_init_hook+0x5c>)
   d755a:	f7ff fc9b 	bl	d6e94 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d755e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7562:	4807      	ldr	r0, [pc, #28]	; (d7580 <module_user_init_hook+0x60>)
   d7564:	2100      	movs	r1, #0
   d7566:	f7ff bc21 	b.w	d6dac <system_ctrl_set_app_request_handler>
   d756a:	bf00      	nop
   d756c:	000d744d 	.word	0x000d744d
   d7570:	2003f400 	.word	0x2003f400
   d7574:	9a271c1e 	.word	0x9a271c1e
   d7578:	2003e5c0 	.word	0x2003e5c0
   d757c:	00000000 	.word	0x00000000
   d7580:	000d74e9 	.word	0x000d74e9

000d7584 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7584:	4770      	bx	lr

000d7586 <_ZN9IPAddressD0Ev>:
   d7586:	b510      	push	{r4, lr}
   d7588:	2118      	movs	r1, #24
   d758a:	4604      	mov	r4, r0
   d758c:	f000 fba2 	bl	d7cd4 <_ZdlPvj>
   d7590:	4620      	mov	r0, r4
   d7592:	bd10      	pop	{r4, pc}

000d7594 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7594:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7596:	7d03      	ldrb	r3, [r0, #20]
   d7598:	2b06      	cmp	r3, #6
{
   d759a:	b08d      	sub	sp, #52	; 0x34
   d759c:	460e      	mov	r6, r1
   d759e:	f100 0704 	add.w	r7, r0, #4
   d75a2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d75a6:	d012      	beq.n	d75ce <_ZNK9IPAddress7printToER5Print+0x3a>
   d75a8:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d75ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d75b0:	220a      	movs	r2, #10
   d75b2:	4630      	mov	r0, r6
   d75b4:	f7ff fe03 	bl	d71be <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d75b8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d75ba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d75bc:	d019      	beq.n	d75f2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d75be:	2c00      	cmp	r4, #0
   d75c0:	d0f4      	beq.n	d75ac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d75c2:	212e      	movs	r1, #46	; 0x2e
   d75c4:	4630      	mov	r0, r6
   d75c6:	f7ff fddb 	bl	d7180 <_ZN5Print5printEc>
   d75ca:	4404      	add	r4, r0
   d75cc:	e7ee      	b.n	d75ac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d75ce:	232f      	movs	r3, #47	; 0x2f
   d75d0:	466a      	mov	r2, sp
   d75d2:	4639      	mov	r1, r7
   d75d4:	200a      	movs	r0, #10
		buf[0] = 0;
   d75d6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d75da:	f7ff fa97 	bl	d6b0c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d75de:	4668      	mov	r0, sp
   d75e0:	f002 fd22 	bl	da028 <strlen>
   d75e4:	6833      	ldr	r3, [r6, #0]
   d75e6:	4602      	mov	r2, r0
   d75e8:	68db      	ldr	r3, [r3, #12]
   d75ea:	4669      	mov	r1, sp
   d75ec:	4630      	mov	r0, r6
   d75ee:	4798      	blx	r3
   d75f0:	4604      	mov	r4, r0
    }
    return n;
}
   d75f2:	4620      	mov	r0, r4
   d75f4:	b00d      	add	sp, #52	; 0x34
   d75f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d75f8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d75f8:	b510      	push	{r4, lr}
   d75fa:	4b05      	ldr	r3, [pc, #20]	; (d7610 <_ZN9IPAddressC1Ev+0x18>)
   d75fc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d75fe:	2211      	movs	r2, #17
   d7600:	f840 3b04 	str.w	r3, [r0], #4
   d7604:	2100      	movs	r1, #0
   d7606:	f002 fce3 	bl	d9fd0 <memset>
}
   d760a:	4620      	mov	r0, r4
   d760c:	bd10      	pop	{r4, pc}
   d760e:	bf00      	nop
   d7610:	000daea0 	.word	0x000daea0

000d7614 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7614:	4603      	mov	r3, r0
   d7616:	4a07      	ldr	r2, [pc, #28]	; (d7634 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7618:	b510      	push	{r4, lr}
   d761a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d761e:	f101 0210 	add.w	r2, r1, #16
   d7622:	f851 4b04 	ldr.w	r4, [r1], #4
   d7626:	f843 4b04 	str.w	r4, [r3], #4
   d762a:	4291      	cmp	r1, r2
   d762c:	d1f9      	bne.n	d7622 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d762e:	780a      	ldrb	r2, [r1, #0]
   d7630:	701a      	strb	r2, [r3, #0]
}
   d7632:	bd10      	pop	{r4, pc}
   d7634:	000daea0 	.word	0x000daea0

000d7638 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7638:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d763a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d763e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7642:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7646:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d764a:	2304      	movs	r3, #4
   d764c:	6041      	str	r1, [r0, #4]
   d764e:	7503      	strb	r3, [r0, #20]
}
   d7650:	bd10      	pop	{r4, pc}

000d7652 <_ZN9IPAddressaSEPKh>:
{
   d7652:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7654:	78cb      	ldrb	r3, [r1, #3]
   d7656:	9300      	str	r3, [sp, #0]
   d7658:	788b      	ldrb	r3, [r1, #2]
   d765a:	784a      	ldrb	r2, [r1, #1]
   d765c:	7809      	ldrb	r1, [r1, #0]
   d765e:	f7ff ffeb 	bl	d7638 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7662:	b002      	add	sp, #8
   d7664:	bd10      	pop	{r4, pc}

000d7666 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7666:	7441      	strb	r1, [r0, #17]
}
   d7668:	4770      	bx	lr

000d766a <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d766a:	4770      	bx	lr

000d766c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d766c:	4770      	bx	lr

000d766e <_ZN9USBSerial4readEv>:
{
   d766e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7670:	2100      	movs	r1, #0
   d7672:	7c00      	ldrb	r0, [r0, #16]
   d7674:	f7ff fb62 	bl	d6d3c <HAL_USB_USART_Receive_Data>
}
   d7678:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d767c:	bd08      	pop	{r3, pc}

000d767e <_ZN9USBSerial4peekEv>:
{
   d767e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7680:	2101      	movs	r1, #1
   d7682:	7c00      	ldrb	r0, [r0, #16]
   d7684:	f7ff fb5a 	bl	d6d3c <HAL_USB_USART_Receive_Data>
}
   d7688:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d768c:	bd08      	pop	{r3, pc}

000d768e <_ZN9USBSerial17availableForWriteEv>:
{
   d768e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7690:	7c00      	ldrb	r0, [r0, #16]
   d7692:	f7ff fb4b 	bl	d6d2c <HAL_USB_USART_Available_Data_For_Write>
}
   d7696:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d769a:	bd08      	pop	{r3, pc}

000d769c <_ZN9USBSerial9availableEv>:
{
   d769c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d769e:	7c00      	ldrb	r0, [r0, #16]
   d76a0:	f7ff fb3c 	bl	d6d1c <HAL_USB_USART_Available_Data>
}
   d76a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d76a8:	bd08      	pop	{r3, pc}

000d76aa <_ZN9USBSerial5writeEh>:
{
   d76aa:	b513      	push	{r0, r1, r4, lr}
   d76ac:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d76ae:	7c00      	ldrb	r0, [r0, #16]
{
   d76b0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d76b2:	f7ff fb3b 	bl	d6d2c <HAL_USB_USART_Available_Data_For_Write>
   d76b6:	2800      	cmp	r0, #0
   d76b8:	9901      	ldr	r1, [sp, #4]
   d76ba:	dc01      	bgt.n	d76c0 <_ZN9USBSerial5writeEh+0x16>
   d76bc:	7c60      	ldrb	r0, [r4, #17]
   d76be:	b120      	cbz	r0, d76ca <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d76c0:	7c20      	ldrb	r0, [r4, #16]
   d76c2:	f7ff fb43 	bl	d6d4c <HAL_USB_USART_Send_Data>
   d76c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d76ca:	b002      	add	sp, #8
   d76cc:	bd10      	pop	{r4, pc}

000d76ce <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d76ce:	7c00      	ldrb	r0, [r0, #16]
   d76d0:	f7ff bb44 	b.w	d6d5c <HAL_USB_USART_Flush_Data>

000d76d4 <_ZN9USBSerialD0Ev>:
   d76d4:	b510      	push	{r4, lr}
   d76d6:	2114      	movs	r1, #20
   d76d8:	4604      	mov	r4, r0
   d76da:	f000 fafb 	bl	d7cd4 <_ZdlPvj>
   d76de:	4620      	mov	r0, r4
   d76e0:	bd10      	pop	{r4, pc}
	...

000d76e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d76e4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d76e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d76ea:	4604      	mov	r4, r0
   d76ec:	4608      	mov	r0, r1
   d76ee:	2100      	movs	r1, #0
   d76f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d76f4:	4b04      	ldr	r3, [pc, #16]	; (d7708 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d76f6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d76f8:	2301      	movs	r3, #1
  _serial = serial;
   d76fa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d76fc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d76fe:	4611      	mov	r1, r2
   d7700:	f7ff fafc 	bl	d6cfc <HAL_USB_USART_Init>
}
   d7704:	4620      	mov	r0, r4
   d7706:	bd10      	pop	{r4, pc}
   d7708:	000daeb4 	.word	0x000daeb4

000d770c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d770c:	7c00      	ldrb	r0, [r0, #16]
   d770e:	2200      	movs	r2, #0
   d7710:	f7ff bafc 	b.w	d6d0c <HAL_USB_USART_Begin>

000d7714 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   d7714:	7c00      	ldrb	r0, [r0, #16]
   d7716:	f7ff bb29 	b.w	d6d6c <HAL_USB_USART_Is_Enabled>

000d771a <_ZN9USBSerialcvbEv>:
  return isEnabled();
   d771a:	f7ff bffb 	b.w	d7714 <_ZN9USBSerial9isEnabledEv>

000d771e <_Z19acquireSerialBufferv>:
{
   d771e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7720:	2214      	movs	r2, #20
{
   d7722:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7724:	2100      	movs	r1, #0
   d7726:	f002 fc53 	bl	d9fd0 <memset>
}
   d772a:	4620      	mov	r0, r4
   d772c:	bd10      	pop	{r4, pc}
	...

000d7730 <_Z16_fetch_usbserialv>:
{
   d7730:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7732:	4c0f      	ldr	r4, [pc, #60]	; (d7770 <_Z16_fetch_usbserialv+0x40>)
{
   d7734:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7736:	a803      	add	r0, sp, #12
   d7738:	f7ff fff1 	bl	d771e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d773c:	7821      	ldrb	r1, [r4, #0]
   d773e:	f3bf 8f5b 	dmb	ish
   d7742:	f011 0101 	ands.w	r1, r1, #1
   d7746:	d10f      	bne.n	d7768 <_Z16_fetch_usbserialv+0x38>
   d7748:	4620      	mov	r0, r4
   d774a:	9101      	str	r1, [sp, #4]
   d774c:	f7fc fcb4 	bl	d40b8 <__cxa_guard_acquire>
   d7750:	9901      	ldr	r1, [sp, #4]
   d7752:	b148      	cbz	r0, d7768 <_Z16_fetch_usbserialv+0x38>
   d7754:	aa03      	add	r2, sp, #12
   d7756:	4807      	ldr	r0, [pc, #28]	; (d7774 <_Z16_fetch_usbserialv+0x44>)
   d7758:	f7ff ffc4 	bl	d76e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d775c:	4620      	mov	r0, r4
   d775e:	f7fc fcb0 	bl	d40c2 <__cxa_guard_release>
   d7762:	4805      	ldr	r0, [pc, #20]	; (d7778 <_Z16_fetch_usbserialv+0x48>)
   d7764:	f002 fc20 	bl	d9fa8 <atexit>
	return _usbserial;
}
   d7768:	4802      	ldr	r0, [pc, #8]	; (d7774 <_Z16_fetch_usbserialv+0x44>)
   d776a:	b008      	add	sp, #32
   d776c:	bd10      	pop	{r4, pc}
   d776e:	bf00      	nop
   d7770:	2003e5c8 	.word	0x2003e5c8
   d7774:	2003e5cc 	.word	0x2003e5cc
   d7778:	000d766b 	.word	0x000d766b

000d777c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d777c:	2200      	movs	r2, #0
   d777e:	6840      	ldr	r0, [r0, #4]
   d7780:	4611      	mov	r1, r2
   d7782:	f7ff bb3f 	b.w	d6e04 <network_ready>

000d7786 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d7786:	2200      	movs	r2, #0
   d7788:	6840      	ldr	r0, [r0, #4]
   d778a:	4611      	mov	r1, r2
   d778c:	f7ff bb5a 	b.w	d6e44 <network_listening>

000d7790 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7790:	2200      	movs	r2, #0
   d7792:	6840      	ldr	r0, [r0, #4]
   d7794:	4611      	mov	r1, r2
   d7796:	f7ff bb65 	b.w	d6e64 <network_get_listen_timeout>

000d779a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d779a:	6840      	ldr	r0, [r0, #4]
   d779c:	2200      	movs	r2, #0
   d779e:	f7ff bb59 	b.w	d6e54 <network_set_listen_timeout>

000d77a2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d77a2:	6840      	ldr	r0, [r0, #4]
   d77a4:	2200      	movs	r2, #0
   d77a6:	f081 0101 	eor.w	r1, r1, #1
   d77aa:	f7ff bb43 	b.w	d6e34 <network_listen>

000d77ae <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d77ae:	2300      	movs	r3, #0
   d77b0:	6840      	ldr	r0, [r0, #4]
   d77b2:	461a      	mov	r2, r3
   d77b4:	4619      	mov	r1, r3
   d77b6:	f7ff bb35 	b.w	d6e24 <network_off>

000d77ba <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d77ba:	2300      	movs	r3, #0
   d77bc:	6840      	ldr	r0, [r0, #4]
   d77be:	461a      	mov	r2, r3
   d77c0:	4619      	mov	r1, r3
   d77c2:	f7ff bb27 	b.w	d6e14 <network_on>

000d77c6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d77c6:	2200      	movs	r2, #0
   d77c8:	6840      	ldr	r0, [r0, #4]
   d77ca:	4611      	mov	r1, r2
   d77cc:	f7ff bb0a 	b.w	d6de4 <network_connecting>

000d77d0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d77d0:	6840      	ldr	r0, [r0, #4]
   d77d2:	2200      	movs	r2, #0
   d77d4:	2102      	movs	r1, #2
   d77d6:	f7ff bb0d 	b.w	d6df4 <network_disconnect>

000d77da <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d77da:	2300      	movs	r3, #0
   d77dc:	6840      	ldr	r0, [r0, #4]
   d77de:	461a      	mov	r2, r3
   d77e0:	f7ff baf8 	b.w	d6dd4 <network_connect>

000d77e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d77e4:	4b08      	ldr	r3, [pc, #32]	; (d7808 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d77e6:	b510      	push	{r4, lr}
   d77e8:	2428      	movs	r4, #40	; 0x28
   d77ea:	4622      	mov	r2, r4
   d77ec:	4618      	mov	r0, r3
   d77ee:	2100      	movs	r1, #0
   d77f0:	f002 fbee 	bl	d9fd0 <memset>
   d77f4:	4b05      	ldr	r3, [pc, #20]	; (d780c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d77f6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d77f8:	f04f 32ff 	mov.w	r2, #4294967295
   d77fc:	6042      	str	r2, [r0, #4]
   d77fe:	2204      	movs	r2, #4
   d7800:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d7802:	4a03      	ldr	r2, [pc, #12]	; (d7810 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7804:	601a      	str	r2, [r3, #0]
   d7806:	bd10      	pop	{r4, pc}
   d7808:	2003e5e8 	.word	0x2003e5e8
   d780c:	2003e5e0 	.word	0x2003e5e0
   d7810:	000daee4 	.word	0x000daee4

000d7814 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7814:	4770      	bx	lr

000d7816 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7816:	7441      	strb	r1, [r0, #17]
}
   d7818:	4770      	bx	lr

000d781a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d781a:	4770      	bx	lr

000d781c <_ZN11USARTSerial17availableForWriteEv>:
{
   d781c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d781e:	7c00      	ldrb	r0, [r0, #16]
   d7820:	f7ff f9b4 	bl	d6b8c <hal_usart_available_data_for_write>
}
   d7824:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7828:	bd08      	pop	{r3, pc}

000d782a <_ZN11USARTSerial9availableEv>:
{
   d782a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d782c:	7c00      	ldrb	r0, [r0, #16]
   d782e:	f7ff f985 	bl	d6b3c <hal_usart_available>
}
   d7832:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7836:	bd08      	pop	{r3, pc}

000d7838 <_ZN11USARTSerial4peekEv>:
{
   d7838:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d783a:	7c00      	ldrb	r0, [r0, #16]
   d783c:	f7ff f98e 	bl	d6b5c <hal_usart_peek>
}
   d7840:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7844:	bd08      	pop	{r3, pc}

000d7846 <_ZN11USARTSerial4readEv>:
{
   d7846:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7848:	7c00      	ldrb	r0, [r0, #16]
   d784a:	f7ff f97f 	bl	d6b4c <hal_usart_read>
}
   d784e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7852:	bd08      	pop	{r3, pc}

000d7854 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d7854:	7c00      	ldrb	r0, [r0, #16]
   d7856:	f7ff b989 	b.w	d6b6c <hal_usart_flush>

000d785a <_ZN11USARTSerial5writeEh>:
{
   d785a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d785c:	7c45      	ldrb	r5, [r0, #17]
{
   d785e:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7860:	b12d      	cbz	r5, d786e <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d7862:	7c20      	ldrb	r0, [r4, #16]
}
   d7864:	b003      	add	sp, #12
   d7866:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d786a:	f7ff b95f 	b.w	d6b2c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d786e:	7c00      	ldrb	r0, [r0, #16]
   d7870:	9101      	str	r1, [sp, #4]
   d7872:	f7ff f98b 	bl	d6b8c <hal_usart_available_data_for_write>
   d7876:	2800      	cmp	r0, #0
   d7878:	9901      	ldr	r1, [sp, #4]
   d787a:	dcf2      	bgt.n	d7862 <_ZN11USARTSerial5writeEh+0x8>
}
   d787c:	4628      	mov	r0, r5
   d787e:	b003      	add	sp, #12
   d7880:	bd30      	pop	{r4, r5, pc}

000d7882 <_ZN11USARTSerialD0Ev>:
   d7882:	b510      	push	{r4, lr}
   d7884:	2114      	movs	r1, #20
   d7886:	4604      	mov	r4, r0
   d7888:	f000 fa24 	bl	d7cd4 <_ZdlPvj>
   d788c:	4620      	mov	r0, r4
   d788e:	bd10      	pop	{r4, pc}

000d7890 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7890:	b510      	push	{r4, lr}
   d7892:	f04f 0c00 	mov.w	ip, #0
   d7896:	4604      	mov	r4, r0
   d7898:	4608      	mov	r0, r1
   d789a:	4611      	mov	r1, r2
   d789c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d78a0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d78a4:	4a04      	ldr	r2, [pc, #16]	; (d78b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d78a6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d78a8:	2201      	movs	r2, #1
  _serial = serial;
   d78aa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d78ac:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d78ae:	461a      	mov	r2, r3
   d78b0:	f7ff f934 	bl	d6b1c <hal_usart_init>
}
   d78b4:	4620      	mov	r0, r4
   d78b6:	bd10      	pop	{r4, pc}
   d78b8:	000daf20 	.word	0x000daf20

000d78bc <_Z22__fetch_global_Serial1v>:
{
   d78bc:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d78be:	4c0d      	ldr	r4, [pc, #52]	; (d78f4 <_Z22__fetch_global_Serial1v+0x38>)
   d78c0:	7821      	ldrb	r1, [r4, #0]
   d78c2:	f3bf 8f5b 	dmb	ish
   d78c6:	f011 0101 	ands.w	r1, r1, #1
   d78ca:	d110      	bne.n	d78ee <_Z22__fetch_global_Serial1v+0x32>
   d78cc:	4620      	mov	r0, r4
   d78ce:	9101      	str	r1, [sp, #4]
   d78d0:	f7fc fbf2 	bl	d40b8 <__cxa_guard_acquire>
   d78d4:	9901      	ldr	r1, [sp, #4]
   d78d6:	b150      	cbz	r0, d78ee <_Z22__fetch_global_Serial1v+0x32>
   d78d8:	4b07      	ldr	r3, [pc, #28]	; (d78f8 <_Z22__fetch_global_Serial1v+0x3c>)
   d78da:	4a08      	ldr	r2, [pc, #32]	; (d78fc <_Z22__fetch_global_Serial1v+0x40>)
   d78dc:	4808      	ldr	r0, [pc, #32]	; (d7900 <_Z22__fetch_global_Serial1v+0x44>)
   d78de:	f7ff ffd7 	bl	d7890 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d78e2:	4620      	mov	r0, r4
   d78e4:	f7fc fbed 	bl	d40c2 <__cxa_guard_release>
   d78e8:	4806      	ldr	r0, [pc, #24]	; (d7904 <_Z22__fetch_global_Serial1v+0x48>)
   d78ea:	f002 fb5d 	bl	d9fa8 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d78ee:	4804      	ldr	r0, [pc, #16]	; (d7900 <_Z22__fetch_global_Serial1v+0x44>)
   d78f0:	b002      	add	sp, #8
   d78f2:	bd10      	pop	{r4, pc}
   d78f4:	2003e610 	.word	0x2003e610
   d78f8:	2003e698 	.word	0x2003e698
   d78fc:	2003e614 	.word	0x2003e614
   d7900:	2003e71c 	.word	0x2003e71c
   d7904:	000d781b 	.word	0x000d781b

000d7908 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7908:	4770      	bx	lr

000d790a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d790a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d790c:	4606      	mov	r6, r0
   d790e:	4615      	mov	r5, r2
   d7910:	460c      	mov	r4, r1
   d7912:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7914:	42bc      	cmp	r4, r7
   d7916:	d006      	beq.n	d7926 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7918:	6833      	ldr	r3, [r6, #0]
   d791a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d791e:	689b      	ldr	r3, [r3, #8]
   d7920:	4630      	mov	r0, r6
   d7922:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7924:	e7f6      	b.n	d7914 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7926:	4628      	mov	r0, r5
   d7928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d792a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d792a:	7c00      	ldrb	r0, [r0, #16]
   d792c:	2200      	movs	r2, #0
   d792e:	f7ff b955 	b.w	d6bdc <hal_i2c_write>

000d7932 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7932:	7c00      	ldrb	r0, [r0, #16]
   d7934:	2100      	movs	r1, #0
   d7936:	f7ff b959 	b.w	d6bec <hal_i2c_available>

000d793a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d793a:	7c00      	ldrb	r0, [r0, #16]
   d793c:	2100      	movs	r1, #0
   d793e:	f7ff b95d 	b.w	d6bfc <hal_i2c_read>

000d7942 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7942:	7c00      	ldrb	r0, [r0, #16]
   d7944:	2100      	movs	r1, #0
   d7946:	f7ff b961 	b.w	d6c0c <hal_i2c_peek>

000d794a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d794a:	7c00      	ldrb	r0, [r0, #16]
   d794c:	2100      	movs	r1, #0
   d794e:	f7ff b965 	b.w	d6c1c <hal_i2c_flush>

000d7952 <_ZN7TwoWireD0Ev>:
   d7952:	b510      	push	{r4, lr}
   d7954:	2114      	movs	r1, #20
   d7956:	4604      	mov	r4, r0
   d7958:	f000 f9bc 	bl	d7cd4 <_ZdlPvj>
   d795c:	4620      	mov	r0, r4
   d795e:	bd10      	pop	{r4, pc}

000d7960 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7960:	b510      	push	{r4, lr}
   d7962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7966:	4604      	mov	r4, r0
   d7968:	4608      	mov	r0, r1
   d796a:	2100      	movs	r1, #0
   d796c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7970:	4b03      	ldr	r3, [pc, #12]	; (d7980 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7972:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7974:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7976:	4611      	mov	r1, r2
   d7978:	f7ff f960 	bl	d6c3c <hal_i2c_init>
}
   d797c:	4620      	mov	r0, r4
   d797e:	bd10      	pop	{r4, pc}
   d7980:	000daf50 	.word	0x000daf50

000d7984 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d7984:	7c00      	ldrb	r0, [r0, #16]
   d7986:	2200      	movs	r2, #0
   d7988:	f7ff b908 	b.w	d6b9c <hal_i2c_set_speed>

000d798c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d798c:	2300      	movs	r3, #0
   d798e:	7c00      	ldrb	r0, [r0, #16]
   d7990:	461a      	mov	r2, r3
   d7992:	4619      	mov	r1, r3
   d7994:	f7ff b90a 	b.w	d6bac <hal_i2c_begin>

000d7998 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7998:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d799a:	2200      	movs	r2, #0
   d799c:	2314      	movs	r3, #20
   d799e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d79a2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d79a6:	780b      	ldrb	r3, [r1, #0]
   d79a8:	f88d 3008 	strb.w	r3, [sp, #8]
   d79ac:	684b      	ldr	r3, [r1, #4]
   d79ae:	9303      	str	r3, [sp, #12]
   d79b0:	68cb      	ldr	r3, [r1, #12]
   d79b2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d79b4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d79b6:	7a0b      	ldrb	r3, [r1, #8]
   d79b8:	9305      	str	r3, [sp, #20]
   d79ba:	a901      	add	r1, sp, #4
   d79bc:	f7ff f946 	bl	d6c4c <hal_i2c_request_ex>
}
   d79c0:	b007      	add	sp, #28
   d79c2:	f85d fb04 	ldr.w	pc, [sp], #4

000d79c6 <_ZN7TwoWire11requestFromEhjh>:
{
   d79c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d79c8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d79ca:	f88d 1000 	strb.w	r1, [sp]
   d79ce:	f04f 0164 	mov.w	r1, #100	; 0x64
   d79d2:	9103      	str	r1, [sp, #12]
   d79d4:	bf18      	it	ne
   d79d6:	2301      	movne	r3, #1
   d79d8:	4669      	mov	r1, sp
    size_ = size;
   d79da:	9201      	str	r2, [sp, #4]
   d79dc:	f88d 3008 	strb.w	r3, [sp, #8]
   d79e0:	f7ff ffda 	bl	d7998 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d79e4:	b005      	add	sp, #20
   d79e6:	f85d fb04 	ldr.w	pc, [sp], #4

000d79ea <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d79ea:	2301      	movs	r3, #1
   d79ec:	f7ff bfeb 	b.w	d79c6 <_ZN7TwoWire11requestFromEhjh>

000d79f0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d79f0:	7c00      	ldrb	r0, [r0, #16]
   d79f2:	2200      	movs	r2, #0
   d79f4:	f7ff b8e2 	b.w	d6bbc <hal_i2c_begin_transmission>

000d79f8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d79f8:	7c00      	ldrb	r0, [r0, #16]
   d79fa:	2200      	movs	r2, #0
   d79fc:	f7ff b8e6 	b.w	d6bcc <hal_i2c_end_transmission>

000d7a00 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7a00:	2101      	movs	r1, #1
   d7a02:	f7ff bff9 	b.w	d79f8 <_ZN7TwoWire15endTransmissionEh>

000d7a06 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7a06:	2300      	movs	r3, #0
   d7a08:	6840      	ldr	r0, [r0, #4]
   d7a0a:	461a      	mov	r2, r3
   d7a0c:	f7ff b9e2 	b.w	d6dd4 <network_connect>

000d7a10 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7a10:	6840      	ldr	r0, [r0, #4]
   d7a12:	2200      	movs	r2, #0
   d7a14:	2102      	movs	r1, #2
   d7a16:	f7ff b9ed 	b.w	d6df4 <network_disconnect>

000d7a1a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7a1a:	2200      	movs	r2, #0
   d7a1c:	6840      	ldr	r0, [r0, #4]
   d7a1e:	4611      	mov	r1, r2
   d7a20:	f7ff b9e0 	b.w	d6de4 <network_connecting>

000d7a24 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7a24:	2200      	movs	r2, #0
   d7a26:	6840      	ldr	r0, [r0, #4]
   d7a28:	4611      	mov	r1, r2
   d7a2a:	f7ff b9eb 	b.w	d6e04 <network_ready>

000d7a2e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7a2e:	2300      	movs	r3, #0
   d7a30:	6840      	ldr	r0, [r0, #4]
   d7a32:	461a      	mov	r2, r3
   d7a34:	4619      	mov	r1, r3
   d7a36:	f7ff b9ed 	b.w	d6e14 <network_on>

000d7a3a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7a3a:	2300      	movs	r3, #0
   d7a3c:	6840      	ldr	r0, [r0, #4]
   d7a3e:	461a      	mov	r2, r3
   d7a40:	4619      	mov	r1, r3
   d7a42:	f7ff b9ef 	b.w	d6e24 <network_off>

000d7a46 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7a46:	6840      	ldr	r0, [r0, #4]
   d7a48:	2100      	movs	r1, #0
   d7a4a:	f7ff ba13 	b.w	d6e74 <network_is_on>

000d7a4e <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7a4e:	6840      	ldr	r0, [r0, #4]
   d7a50:	2100      	movs	r1, #0
   d7a52:	f7ff ba17 	b.w	d6e84 <network_is_off>

000d7a56 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7a56:	6840      	ldr	r0, [r0, #4]
   d7a58:	2200      	movs	r2, #0
   d7a5a:	f081 0101 	eor.w	r1, r1, #1
   d7a5e:	f7ff b9e9 	b.w	d6e34 <network_listen>

000d7a62 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7a62:	6840      	ldr	r0, [r0, #4]
   d7a64:	2200      	movs	r2, #0
   d7a66:	f7ff b9f5 	b.w	d6e54 <network_set_listen_timeout>

000d7a6a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7a6a:	2200      	movs	r2, #0
   d7a6c:	6840      	ldr	r0, [r0, #4]
   d7a6e:	4611      	mov	r1, r2
   d7a70:	f7ff b9f8 	b.w	d6e64 <network_get_listen_timeout>

000d7a74 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7a74:	2200      	movs	r2, #0
   d7a76:	6840      	ldr	r0, [r0, #4]
   d7a78:	4611      	mov	r1, r2
   d7a7a:	f7ff b9e3 	b.w	d6e44 <network_listening>

000d7a7e <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7a7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7a82:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7a84:	b095      	sub	sp, #84	; 0x54
   d7a86:	4616      	mov	r6, r2
   d7a88:	460d      	mov	r5, r1
   d7a8a:	4607      	mov	r7, r0
    IPAddress addr;
   d7a8c:	f7ff fdb4 	bl	d75f8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7a90:	4621      	mov	r1, r4
   d7a92:	2218      	movs	r2, #24
   d7a94:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7a96:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7a98:	f002 fa9a 	bl	d9fd0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7a9c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7a9e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7aa2:	4621      	mov	r1, r4
   d7aa4:	466b      	mov	r3, sp
   d7aa6:	aa0c      	add	r2, sp, #48	; 0x30
   d7aa8:	4630      	mov	r0, r6
   d7aaa:	f7fe ffdf 	bl	d6a6c <netdb_getaddrinfo>
    if (!r) {
   d7aae:	4604      	mov	r4, r0
   d7ab0:	2800      	cmp	r0, #0
   d7ab2:	d146      	bne.n	d7b42 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7ab4:	4602      	mov	r2, r0
   d7ab6:	2101      	movs	r1, #1
   d7ab8:	6868      	ldr	r0, [r5, #4]
   d7aba:	f7ff f9a3 	bl	d6e04 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7abe:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7ac0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7ac2:	4622      	mov	r2, r4
   d7ac4:	6868      	ldr	r0, [r5, #4]
   d7ac6:	f7ff f99d 	bl	d6e04 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7aca:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7acc:	4681      	mov	r9, r0
        bool ok = false;
   d7ace:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7ad0:	2e00      	cmp	r6, #0
   d7ad2:	d036      	beq.n	d7b42 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7ad4:	2900      	cmp	r1, #0
   d7ad6:	d134      	bne.n	d7b42 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7ad8:	6873      	ldr	r3, [r6, #4]
   d7ada:	2b02      	cmp	r3, #2
   d7adc:	d003      	beq.n	d7ae6 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7ade:	2b0a      	cmp	r3, #10
   d7ae0:	d00b      	beq.n	d7afa <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7ae2:	69f6      	ldr	r6, [r6, #28]
   d7ae4:	e7f4      	b.n	d7ad0 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7ae6:	f1b8 0f00 	cmp.w	r8, #0
   d7aea:	d004      	beq.n	d7af6 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7aec:	6971      	ldr	r1, [r6, #20]
   d7aee:	4638      	mov	r0, r7
   d7af0:	3104      	adds	r1, #4
   d7af2:	f7ff fdae 	bl	d7652 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7af6:	4641      	mov	r1, r8
   d7af8:	e7f3      	b.n	d7ae2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7afa:	f1b9 0f00 	cmp.w	r9, #0
   d7afe:	d101      	bne.n	d7b04 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7b00:	4649      	mov	r1, r9
   d7b02:	e7ee      	b.n	d7ae2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7b04:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7b06:	2210      	movs	r2, #16
   d7b08:	a801      	add	r0, sp, #4
   d7b0a:	f002 fa61 	bl	d9fd0 <memset>
                    a.v = 6;
   d7b0e:	2306      	movs	r3, #6
   d7b10:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7b14:	ad01      	add	r5, sp, #4
   d7b16:	f104 0308 	add.w	r3, r4, #8
   d7b1a:	3418      	adds	r4, #24
   d7b1c:	6818      	ldr	r0, [r3, #0]
   d7b1e:	6859      	ldr	r1, [r3, #4]
   d7b20:	462a      	mov	r2, r5
   d7b22:	c203      	stmia	r2!, {r0, r1}
   d7b24:	3308      	adds	r3, #8
   d7b26:	42a3      	cmp	r3, r4
   d7b28:	4615      	mov	r5, r2
   d7b2a:	d1f7      	bne.n	d7b1c <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7b2c:	a901      	add	r1, sp, #4
   d7b2e:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7b30:	ad07      	add	r5, sp, #28
   d7b32:	f7ff fd6f 	bl	d7614 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b38:	1d3c      	adds	r4, r7, #4
   d7b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b3c:	682b      	ldr	r3, [r5, #0]
   d7b3e:	7023      	strb	r3, [r4, #0]
   d7b40:	e7de      	b.n	d7b00 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7b42:	9800      	ldr	r0, [sp, #0]
   d7b44:	f7fe ff8a 	bl	d6a5c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7b48:	4638      	mov	r0, r7
   d7b4a:	b015      	add	sp, #84	; 0x54
   d7b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7b50 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7b50:	4b02      	ldr	r3, [pc, #8]	; (d7b5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7b52:	4a03      	ldr	r2, [pc, #12]	; (d7b60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7b54:	601a      	str	r2, [r3, #0]
   d7b56:	2200      	movs	r2, #0
   d7b58:	605a      	str	r2, [r3, #4]

} // spark
   d7b5a:	4770      	bx	lr
   d7b5c:	2003e730 	.word	0x2003e730
   d7b60:	000daf78 	.word	0x000daf78

000d7b64 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7b64:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7b66:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7b68:	d902      	bls.n	d7b70 <pinAvailable+0xc>
    return false;
   d7b6a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7b6c:	b002      	add	sp, #8
   d7b6e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7b70:	f1a0 030b 	sub.w	r3, r0, #11
   d7b74:	2b02      	cmp	r3, #2
   d7b76:	d81a      	bhi.n	d7bae <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7b78:	4c17      	ldr	r4, [pc, #92]	; (d7bd8 <pinAvailable+0x74>)
   d7b7a:	7821      	ldrb	r1, [r4, #0]
   d7b7c:	f3bf 8f5b 	dmb	ish
   d7b80:	f011 0101 	ands.w	r1, r1, #1
   d7b84:	d10b      	bne.n	d7b9e <pinAvailable+0x3a>
   d7b86:	4620      	mov	r0, r4
   d7b88:	9101      	str	r1, [sp, #4]
   d7b8a:	f7fc fa95 	bl	d40b8 <__cxa_guard_acquire>
   d7b8e:	9901      	ldr	r1, [sp, #4]
   d7b90:	b128      	cbz	r0, d7b9e <pinAvailable+0x3a>
   d7b92:	4812      	ldr	r0, [pc, #72]	; (d7bdc <pinAvailable+0x78>)
   d7b94:	f7ff f9f2 	bl	d6f7c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7b98:	4620      	mov	r0, r4
   d7b9a:	f7fc fa92 	bl	d40c2 <__cxa_guard_release>
   d7b9e:	4b0f      	ldr	r3, [pc, #60]	; (d7bdc <pinAvailable+0x78>)
   d7ba0:	7818      	ldrb	r0, [r3, #0]
   d7ba2:	f7ff f873 	bl	d6c8c <hal_spi_is_enabled>
   d7ba6:	2800      	cmp	r0, #0
   d7ba8:	d1df      	bne.n	d7b6a <pinAvailable+0x6>
  return true; // 'pin' is available
   d7baa:	2001      	movs	r0, #1
   d7bac:	e7de      	b.n	d7b6c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7bae:	2801      	cmp	r0, #1
   d7bb0:	d809      	bhi.n	d7bc6 <pinAvailable+0x62>
   d7bb2:	f000 f86b 	bl	d7c8c <_Z19__fetch_global_Wirev>
   d7bb6:	2100      	movs	r1, #0
   d7bb8:	7c00      	ldrb	r0, [r0, #16]
   d7bba:	f7ff f837 	bl	d6c2c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7bbe:	f080 0001 	eor.w	r0, r0, #1
   d7bc2:	b2c0      	uxtb	r0, r0
   d7bc4:	e7d2      	b.n	d7b6c <pinAvailable+0x8>
   d7bc6:	3809      	subs	r0, #9
   d7bc8:	2801      	cmp	r0, #1
   d7bca:	d8ee      	bhi.n	d7baa <pinAvailable+0x46>
   d7bcc:	f7ff fe76 	bl	d78bc <_Z22__fetch_global_Serial1v>
   d7bd0:	7c00      	ldrb	r0, [r0, #16]
   d7bd2:	f7fe ffd3 	bl	d6b7c <hal_usart_is_enabled>
   d7bd6:	e7f2      	b.n	d7bbe <pinAvailable+0x5a>
   d7bd8:	2003e580 	.word	0x2003e580
   d7bdc:	2003e584 	.word	0x2003e584

000d7be0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7be0:	2823      	cmp	r0, #35	; 0x23
{
   d7be2:	b538      	push	{r3, r4, r5, lr}
   d7be4:	4604      	mov	r4, r0
   d7be6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7be8:	d80a      	bhi.n	d7c00 <pinMode+0x20>
   d7bea:	29ff      	cmp	r1, #255	; 0xff
   d7bec:	d008      	beq.n	d7c00 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7bee:	f7ff ffb9 	bl	d7b64 <pinAvailable>
   d7bf2:	b128      	cbz	r0, d7c00 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7bf4:	4629      	mov	r1, r5
   d7bf6:	4620      	mov	r0, r4
}
   d7bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7bfc:	f7fe bf3e 	b.w	d6a7c <HAL_Pin_Mode>
}
   d7c00:	bd38      	pop	{r3, r4, r5, pc}

000d7c02 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7c02:	b538      	push	{r3, r4, r5, lr}
   d7c04:	4604      	mov	r4, r0
   d7c06:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7c08:	f7fe ff40 	bl	d6a8c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7c0c:	28ff      	cmp	r0, #255	; 0xff
   d7c0e:	d010      	beq.n	d7c32 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7c10:	2806      	cmp	r0, #6
   d7c12:	d804      	bhi.n	d7c1e <digitalWrite+0x1c>
   d7c14:	234d      	movs	r3, #77	; 0x4d
   d7c16:	fa23 f000 	lsr.w	r0, r3, r0
   d7c1a:	07c3      	lsls	r3, r0, #31
   d7c1c:	d409      	bmi.n	d7c32 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7c1e:	4620      	mov	r0, r4
   d7c20:	f7ff ffa0 	bl	d7b64 <pinAvailable>
   d7c24:	b128      	cbz	r0, d7c32 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7c26:	4629      	mov	r1, r5
   d7c28:	4620      	mov	r0, r4
}
   d7c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7c2e:	f7fe bf35 	b.w	d6a9c <HAL_GPIO_Write>
}
   d7c32:	bd38      	pop	{r3, r4, r5, pc}

000d7c34 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7c34:	b510      	push	{r4, lr}
   d7c36:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7c38:	f7fe ff28 	bl	d6a8c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7c3c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7c3e:	b2db      	uxtb	r3, r3
   d7c40:	2b01      	cmp	r3, #1
   d7c42:	d908      	bls.n	d7c56 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7c44:	4620      	mov	r0, r4
   d7c46:	f7ff ff8d 	bl	d7b64 <pinAvailable>
   d7c4a:	b120      	cbz	r0, d7c56 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7c4c:	4620      	mov	r0, r4
}
   d7c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7c52:	f7fe bf2b 	b.w	d6aac <HAL_GPIO_Read>
}
   d7c56:	2000      	movs	r0, #0
   d7c58:	bd10      	pop	{r4, pc}

000d7c5a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c5a:	4770      	bx	lr

000d7c5c <_Z17acquireWireBufferv>:
{
   d7c5c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7c5e:	2300      	movs	r3, #0
   d7c60:	2520      	movs	r5, #32
   d7c62:	8043      	strh	r3, [r0, #2]
   d7c64:	2314      	movs	r3, #20
{
   d7c66:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7c68:	8003      	strh	r3, [r0, #0]
   d7c6a:	6085      	str	r5, [r0, #8]
   d7c6c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c6e:	4906      	ldr	r1, [pc, #24]	; (d7c88 <_Z17acquireWireBufferv+0x2c>)
   d7c70:	4628      	mov	r0, r5
   d7c72:	f000 f831 	bl	d7cd8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c76:	4904      	ldr	r1, [pc, #16]	; (d7c88 <_Z17acquireWireBufferv+0x2c>)
	};
   d7c78:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c7a:	4628      	mov	r0, r5
   d7c7c:	f000 f82c 	bl	d7cd8 <_ZnajRKSt9nothrow_t>
	};
   d7c80:	60e0      	str	r0, [r4, #12]
}
   d7c82:	4620      	mov	r0, r4
   d7c84:	bd38      	pop	{r3, r4, r5, pc}
   d7c86:	bf00      	nop
   d7c88:	000dafac 	.word	0x000dafac

000d7c8c <_Z19__fetch_global_Wirev>:
{
   d7c8c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c8e:	4d0e      	ldr	r5, [pc, #56]	; (d7cc8 <_Z19__fetch_global_Wirev+0x3c>)
   d7c90:	7829      	ldrb	r1, [r5, #0]
   d7c92:	f3bf 8f5b 	dmb	ish
   d7c96:	f011 0401 	ands.w	r4, r1, #1
{
   d7c9a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c9c:	d111      	bne.n	d7cc2 <_Z19__fetch_global_Wirev+0x36>
   d7c9e:	4628      	mov	r0, r5
   d7ca0:	f7fc fa0a 	bl	d40b8 <__cxa_guard_acquire>
   d7ca4:	b168      	cbz	r0, d7cc2 <_Z19__fetch_global_Wirev+0x36>
   d7ca6:	a801      	add	r0, sp, #4
   d7ca8:	f7ff ffd8 	bl	d7c5c <_Z17acquireWireBufferv>
   d7cac:	aa01      	add	r2, sp, #4
   d7cae:	4621      	mov	r1, r4
   d7cb0:	4806      	ldr	r0, [pc, #24]	; (d7ccc <_Z19__fetch_global_Wirev+0x40>)
   d7cb2:	f7ff fe55 	bl	d7960 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7cb6:	4628      	mov	r0, r5
   d7cb8:	f7fc fa03 	bl	d40c2 <__cxa_guard_release>
   d7cbc:	4804      	ldr	r0, [pc, #16]	; (d7cd0 <_Z19__fetch_global_Wirev+0x44>)
   d7cbe:	f002 f973 	bl	d9fa8 <atexit>
	return wire;
}
   d7cc2:	4802      	ldr	r0, [pc, #8]	; (d7ccc <_Z19__fetch_global_Wirev+0x40>)
   d7cc4:	b007      	add	sp, #28
   d7cc6:	bd30      	pop	{r4, r5, pc}
   d7cc8:	2003e73c 	.word	0x2003e73c
   d7ccc:	2003e740 	.word	0x2003e740
   d7cd0:	000d7c5b 	.word	0x000d7c5b

000d7cd4 <_ZdlPvj>:
   d7cd4:	f7fc b9e3 	b.w	d409e <_ZdlPv>

000d7cd8 <_ZnajRKSt9nothrow_t>:
   d7cd8:	f7fc b9df 	b.w	d409a <_Znaj>
   d7cdc:	0000      	movs	r0, r0
	...

000d7ce0 <pow>:
   d7ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7ce4:	ed2d 8b02 	vpush	{d8}
   d7ce8:	b08d      	sub	sp, #52	; 0x34
   d7cea:	ec57 6b10 	vmov	r6, r7, d0
   d7cee:	ec55 4b11 	vmov	r4, r5, d1
   d7cf2:	f000 f9ad 	bl	d8050 <__ieee754_pow>
   d7cf6:	4bae      	ldr	r3, [pc, #696]	; (d7fb0 <pow+0x2d0>)
   d7cf8:	eeb0 8a40 	vmov.f32	s16, s0
   d7cfc:	eef0 8a60 	vmov.f32	s17, s1
   d7d00:	f993 9000 	ldrsb.w	r9, [r3]
   d7d04:	f1b9 3fff 	cmp.w	r9, #4294967295
   d7d08:	d037      	beq.n	d7d7a <pow+0x9a>
   d7d0a:	4622      	mov	r2, r4
   d7d0c:	462b      	mov	r3, r5
   d7d0e:	4620      	mov	r0, r4
   d7d10:	4629      	mov	r1, r5
   d7d12:	f001 fdd9 	bl	d98c8 <__aeabi_dcmpun>
   d7d16:	4683      	mov	fp, r0
   d7d18:	bb78      	cbnz	r0, d7d7a <pow+0x9a>
   d7d1a:	4632      	mov	r2, r6
   d7d1c:	463b      	mov	r3, r7
   d7d1e:	4630      	mov	r0, r6
   d7d20:	4639      	mov	r1, r7
   d7d22:	f001 fdd1 	bl	d98c8 <__aeabi_dcmpun>
   d7d26:	4680      	mov	r8, r0
   d7d28:	2800      	cmp	r0, #0
   d7d2a:	f040 8093 	bne.w	d7e54 <pow+0x174>
   d7d2e:	f04f 0a00 	mov.w	sl, #0
   d7d32:	f04f 0b00 	mov.w	fp, #0
   d7d36:	4630      	mov	r0, r6
   d7d38:	4639      	mov	r1, r7
   d7d3a:	4652      	mov	r2, sl
   d7d3c:	465b      	mov	r3, fp
   d7d3e:	f001 fd91 	bl	d9864 <__aeabi_dcmpeq>
   d7d42:	b318      	cbz	r0, d7d8c <pow+0xac>
   d7d44:	4652      	mov	r2, sl
   d7d46:	465b      	mov	r3, fp
   d7d48:	4620      	mov	r0, r4
   d7d4a:	4629      	mov	r1, r5
   d7d4c:	f001 fd8a 	bl	d9864 <__aeabi_dcmpeq>
   d7d50:	9000      	str	r0, [sp, #0]
   d7d52:	2800      	cmp	r0, #0
   d7d54:	d057      	beq.n	d7e06 <pow+0x126>
   d7d56:	4b97      	ldr	r3, [pc, #604]	; (d7fb4 <pow+0x2d4>)
   d7d58:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d7d5c:	2201      	movs	r2, #1
   d7d5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7d62:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7d66:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7d6a:	9202      	str	r2, [sp, #8]
   d7d6c:	9303      	str	r3, [sp, #12]
   d7d6e:	f1b9 0f00 	cmp.w	r9, #0
   d7d72:	f000 8089 	beq.w	d7e88 <pow+0x1a8>
   d7d76:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d7fa0 <pow+0x2c0>
   d7d7a:	eeb0 0a48 	vmov.f32	s0, s16
   d7d7e:	eef0 0a68 	vmov.f32	s1, s17
   d7d82:	b00d      	add	sp, #52	; 0x34
   d7d84:	ecbd 8b02 	vpop	{d8}
   d7d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7d8c:	eeb0 0a48 	vmov.f32	s0, s16
   d7d90:	eef0 0a68 	vmov.f32	s1, s17
   d7d94:	f001 f804 	bl	d8da0 <finite>
   d7d98:	4680      	mov	r8, r0
   d7d9a:	2800      	cmp	r0, #0
   d7d9c:	f000 8082 	beq.w	d7ea4 <pow+0x1c4>
   d7da0:	f04f 0800 	mov.w	r8, #0
   d7da4:	f04f 0900 	mov.w	r9, #0
   d7da8:	ec51 0b18 	vmov	r0, r1, d8
   d7dac:	4642      	mov	r2, r8
   d7dae:	464b      	mov	r3, r9
   d7db0:	f001 fd58 	bl	d9864 <__aeabi_dcmpeq>
   d7db4:	2800      	cmp	r0, #0
   d7db6:	d0e0      	beq.n	d7d7a <pow+0x9a>
   d7db8:	ec47 6b10 	vmov	d0, r6, r7
   d7dbc:	f000 fff0 	bl	d8da0 <finite>
   d7dc0:	2800      	cmp	r0, #0
   d7dc2:	d0da      	beq.n	d7d7a <pow+0x9a>
   d7dc4:	ec45 4b10 	vmov	d0, r4, r5
   d7dc8:	f000 ffea 	bl	d8da0 <finite>
   d7dcc:	2800      	cmp	r0, #0
   d7dce:	d0d4      	beq.n	d7d7a <pow+0x9a>
   d7dd0:	4b77      	ldr	r3, [pc, #476]	; (d7fb0 <pow+0x2d0>)
   d7dd2:	4a78      	ldr	r2, [pc, #480]	; (d7fb4 <pow+0x2d4>)
   d7dd4:	f993 3000 	ldrsb.w	r3, [r3]
   d7dd8:	9203      	str	r2, [sp, #12]
   d7dda:	2104      	movs	r1, #4
   d7ddc:	2200      	movs	r2, #0
   d7dde:	2b02      	cmp	r3, #2
   d7de0:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7de4:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7de8:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d7dec:	9102      	str	r1, [sp, #8]
   d7dee:	920a      	str	r2, [sp, #40]	; 0x28
   d7df0:	d004      	beq.n	d7dfc <pow+0x11c>
   d7df2:	a802      	add	r0, sp, #8
   d7df4:	f000 ffe0 	bl	d8db8 <matherr>
   d7df8:	2800      	cmp	r0, #0
   d7dfa:	d14a      	bne.n	d7e92 <pow+0x1b2>
   d7dfc:	f7ff f86a 	bl	d6ed4 <__errno>
   d7e00:	2322      	movs	r3, #34	; 0x22
   d7e02:	6003      	str	r3, [r0, #0]
   d7e04:	e045      	b.n	d7e92 <pow+0x1b2>
   d7e06:	ec45 4b10 	vmov	d0, r4, r5
   d7e0a:	f000 ffc9 	bl	d8da0 <finite>
   d7e0e:	2800      	cmp	r0, #0
   d7e10:	d0b3      	beq.n	d7d7a <pow+0x9a>
   d7e12:	4652      	mov	r2, sl
   d7e14:	465b      	mov	r3, fp
   d7e16:	4620      	mov	r0, r4
   d7e18:	4629      	mov	r1, r5
   d7e1a:	f001 fd2d 	bl	d9878 <__aeabi_dcmplt>
   d7e1e:	2800      	cmp	r0, #0
   d7e20:	d0ab      	beq.n	d7d7a <pow+0x9a>
   d7e22:	4b63      	ldr	r3, [pc, #396]	; (d7fb0 <pow+0x2d0>)
   d7e24:	9900      	ldr	r1, [sp, #0]
   d7e26:	4a63      	ldr	r2, [pc, #396]	; (d7fb4 <pow+0x2d4>)
   d7e28:	f993 3000 	ldrsb.w	r3, [r3]
   d7e2c:	910a      	str	r1, [sp, #40]	; 0x28
   d7e2e:	2101      	movs	r1, #1
   d7e30:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7e34:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7e38:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d7e3c:	2b00      	cmp	r3, #0
   d7e3e:	d16f      	bne.n	d7f20 <pow+0x240>
   d7e40:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7e44:	a802      	add	r0, sp, #8
   d7e46:	f000 ffb7 	bl	d8db8 <matherr>
   d7e4a:	2800      	cmp	r0, #0
   d7e4c:	d06e      	beq.n	d7f2c <pow+0x24c>
   d7e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7e50:	b32b      	cbz	r3, d7e9e <pow+0x1be>
   d7e52:	e020      	b.n	d7e96 <pow+0x1b6>
   d7e54:	2200      	movs	r2, #0
   d7e56:	2300      	movs	r3, #0
   d7e58:	4620      	mov	r0, r4
   d7e5a:	4629      	mov	r1, r5
   d7e5c:	f001 fd02 	bl	d9864 <__aeabi_dcmpeq>
   d7e60:	2800      	cmp	r0, #0
   d7e62:	d08a      	beq.n	d7d7a <pow+0x9a>
   d7e64:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d7fa0 <pow+0x2c0>
   d7e68:	4b52      	ldr	r3, [pc, #328]	; (d7fb4 <pow+0x2d4>)
   d7e6a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d7e6e:	2201      	movs	r2, #1
   d7e70:	f1b9 0f02 	cmp.w	r9, #2
   d7e74:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7e78:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7e7c:	ed8d 8b08 	vstr	d8, [sp, #32]
   d7e80:	9202      	str	r2, [sp, #8]
   d7e82:	9303      	str	r3, [sp, #12]
   d7e84:	f43f af79 	beq.w	d7d7a <pow+0x9a>
   d7e88:	a802      	add	r0, sp, #8
   d7e8a:	f000 ff95 	bl	d8db8 <matherr>
   d7e8e:	2800      	cmp	r0, #0
   d7e90:	d051      	beq.n	d7f36 <pow+0x256>
   d7e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7e94:	b11b      	cbz	r3, d7e9e <pow+0x1be>
   d7e96:	f7ff f81d 	bl	d6ed4 <__errno>
   d7e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7e9c:	6003      	str	r3, [r0, #0]
   d7e9e:	ed9d 8b08 	vldr	d8, [sp, #32]
   d7ea2:	e76a      	b.n	d7d7a <pow+0x9a>
   d7ea4:	ec47 6b10 	vmov	d0, r6, r7
   d7ea8:	f000 ff7a 	bl	d8da0 <finite>
   d7eac:	2800      	cmp	r0, #0
   d7eae:	f43f af77 	beq.w	d7da0 <pow+0xc0>
   d7eb2:	ec45 4b10 	vmov	d0, r4, r5
   d7eb6:	f000 ff73 	bl	d8da0 <finite>
   d7eba:	2800      	cmp	r0, #0
   d7ebc:	f43f af70 	beq.w	d7da0 <pow+0xc0>
   d7ec0:	ec53 2b18 	vmov	r2, r3, d8
   d7ec4:	ee18 0a10 	vmov	r0, s16
   d7ec8:	4619      	mov	r1, r3
   d7eca:	f001 fcfd 	bl	d98c8 <__aeabi_dcmpun>
   d7ece:	4b38      	ldr	r3, [pc, #224]	; (d7fb0 <pow+0x2d0>)
   d7ed0:	2800      	cmp	r0, #0
   d7ed2:	f040 8096 	bne.w	d8002 <pow+0x322>
   d7ed6:	f993 8000 	ldrsb.w	r8, [r3]
   d7eda:	900a      	str	r0, [sp, #40]	; 0x28
   d7edc:	2303      	movs	r3, #3
   d7ede:	9302      	str	r3, [sp, #8]
   d7ee0:	4b34      	ldr	r3, [pc, #208]	; (d7fb4 <pow+0x2d4>)
   d7ee2:	9303      	str	r3, [sp, #12]
   d7ee4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7ee8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7eec:	f1b8 0f00 	cmp.w	r8, #0
   d7ef0:	d126      	bne.n	d7f40 <pow+0x260>
   d7ef2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d7fc4 <pow+0x2e4>
   d7ef6:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d7efa:	4652      	mov	r2, sl
   d7efc:	465b      	mov	r3, fp
   d7efe:	4630      	mov	r0, r6
   d7f00:	4639      	mov	r1, r7
   d7f02:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d7f06:	f001 fcb7 	bl	d9878 <__aeabi_dcmplt>
   d7f0a:	bb48      	cbnz	r0, d7f60 <pow+0x280>
   d7f0c:	a802      	add	r0, sp, #8
   d7f0e:	f000 ff53 	bl	d8db8 <matherr>
   d7f12:	2800      	cmp	r0, #0
   d7f14:	d19b      	bne.n	d7e4e <pow+0x16e>
   d7f16:	f7fe ffdd 	bl	d6ed4 <__errno>
   d7f1a:	2322      	movs	r3, #34	; 0x22
   d7f1c:	6003      	str	r3, [r0, #0]
   d7f1e:	e796      	b.n	d7e4e <pow+0x16e>
   d7f20:	4925      	ldr	r1, [pc, #148]	; (d7fb8 <pow+0x2d8>)
   d7f22:	2000      	movs	r0, #0
   d7f24:	2b02      	cmp	r3, #2
   d7f26:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d7f2a:	d18b      	bne.n	d7e44 <pow+0x164>
   d7f2c:	f7fe ffd2 	bl	d6ed4 <__errno>
   d7f30:	2321      	movs	r3, #33	; 0x21
   d7f32:	6003      	str	r3, [r0, #0]
   d7f34:	e78b      	b.n	d7e4e <pow+0x16e>
   d7f36:	f7fe ffcd 	bl	d6ed4 <__errno>
   d7f3a:	2321      	movs	r3, #33	; 0x21
   d7f3c:	6003      	str	r3, [r0, #0]
   d7f3e:	e7a8      	b.n	d7e92 <pow+0x1b2>
   d7f40:	ed9f 7b19 	vldr	d7, [pc, #100]	; d7fa8 <pow+0x2c8>
   d7f44:	4652      	mov	r2, sl
   d7f46:	465b      	mov	r3, fp
   d7f48:	4630      	mov	r0, r6
   d7f4a:	4639      	mov	r1, r7
   d7f4c:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7f50:	f001 fc92 	bl	d9878 <__aeabi_dcmplt>
   d7f54:	2800      	cmp	r0, #0
   d7f56:	d137      	bne.n	d7fc8 <pow+0x2e8>
   d7f58:	f1b8 0f02 	cmp.w	r8, #2
   d7f5c:	d0db      	beq.n	d7f16 <pow+0x236>
   d7f5e:	e7d5      	b.n	d7f0c <pow+0x22c>
   d7f60:	4b16      	ldr	r3, [pc, #88]	; (d7fbc <pow+0x2dc>)
   d7f62:	2200      	movs	r2, #0
   d7f64:	4620      	mov	r0, r4
   d7f66:	4629      	mov	r1, r5
   d7f68:	f001 fa14 	bl	d9394 <__aeabi_dmul>
   d7f6c:	4602      	mov	r2, r0
   d7f6e:	460b      	mov	r3, r1
   d7f70:	ec43 2b10 	vmov	d0, r2, r3
   d7f74:	e9cd 2300 	strd	r2, r3, [sp]
   d7f78:	f000 ff2a 	bl	d8dd0 <rint>
   d7f7c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7f80:	ec51 0b10 	vmov	r0, r1, d0
   d7f84:	f001 fc6e 	bl	d9864 <__aeabi_dcmpeq>
   d7f88:	2800      	cmp	r0, #0
   d7f8a:	d136      	bne.n	d7ffa <pow+0x31a>
   d7f8c:	4b0c      	ldr	r3, [pc, #48]	; (d7fc0 <pow+0x2e0>)
   d7f8e:	4908      	ldr	r1, [pc, #32]	; (d7fb0 <pow+0x2d0>)
   d7f90:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7f94:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d7f98:	f991 8000 	ldrsb.w	r8, [r1]
   d7f9c:	e7dc      	b.n	d7f58 <pow+0x278>
   d7f9e:	bf00      	nop
   d7fa0:	00000000 	.word	0x00000000
   d7fa4:	3ff00000 	.word	0x3ff00000
   d7fa8:	00000000 	.word	0x00000000
   d7fac:	7ff00000 	.word	0x7ff00000
   d7fb0:	2003e448 	.word	0x2003e448
   d7fb4:	000dafb0 	.word	0x000dafb0
   d7fb8:	fff00000 	.word	0xfff00000
   d7fbc:	3fe00000 	.word	0x3fe00000
   d7fc0:	c7efffff 	.word	0xc7efffff
   d7fc4:	47efffff 	.word	0x47efffff
   d7fc8:	4b1c      	ldr	r3, [pc, #112]	; (d803c <pow+0x35c>)
   d7fca:	2200      	movs	r2, #0
   d7fcc:	4620      	mov	r0, r4
   d7fce:	4629      	mov	r1, r5
   d7fd0:	f001 f9e0 	bl	d9394 <__aeabi_dmul>
   d7fd4:	4602      	mov	r2, r0
   d7fd6:	460b      	mov	r3, r1
   d7fd8:	ec43 2b10 	vmov	d0, r2, r3
   d7fdc:	e9cd 2300 	strd	r2, r3, [sp]
   d7fe0:	f000 fef6 	bl	d8dd0 <rint>
   d7fe4:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7fe8:	ec51 0b10 	vmov	r0, r1, d0
   d7fec:	f001 fc3a 	bl	d9864 <__aeabi_dcmpeq>
   d7ff0:	b918      	cbnz	r0, d7ffa <pow+0x31a>
   d7ff2:	4b13      	ldr	r3, [pc, #76]	; (d8040 <pow+0x360>)
   d7ff4:	2200      	movs	r2, #0
   d7ff6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d7ffa:	4b12      	ldr	r3, [pc, #72]	; (d8044 <pow+0x364>)
   d7ffc:	f993 8000 	ldrsb.w	r8, [r3]
   d8000:	e7aa      	b.n	d7f58 <pow+0x278>
   d8002:	f993 9000 	ldrsb.w	r9, [r3]
   d8006:	4b10      	ldr	r3, [pc, #64]	; (d8048 <pow+0x368>)
   d8008:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d800c:	2201      	movs	r2, #1
   d800e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d8012:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d8016:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d801a:	f1b9 0f00 	cmp.w	r9, #0
   d801e:	f43f af0f 	beq.w	d7e40 <pow+0x160>
   d8022:	4652      	mov	r2, sl
   d8024:	465b      	mov	r3, fp
   d8026:	4650      	mov	r0, sl
   d8028:	4659      	mov	r1, fp
   d802a:	f001 fadd 	bl	d95e8 <__aeabi_ddiv>
   d802e:	f1b9 0f02 	cmp.w	r9, #2
   d8032:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d8036:	f43f af79 	beq.w	d7f2c <pow+0x24c>
   d803a:	e703      	b.n	d7e44 <pow+0x164>
   d803c:	3fe00000 	.word	0x3fe00000
   d8040:	fff00000 	.word	0xfff00000
   d8044:	2003e448 	.word	0x2003e448
   d8048:	000dafb0 	.word	0x000dafb0
   d804c:	00000000 	.word	0x00000000

000d8050 <__ieee754_pow>:
   d8050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8054:	ec57 6b11 	vmov	r6, r7, d1
   d8058:	ed2d 8b0a 	vpush	{d8-d12}
   d805c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d8060:	ea5a 0206 	orrs.w	r2, sl, r6
   d8064:	b089      	sub	sp, #36	; 0x24
   d8066:	d03d      	beq.n	d80e4 <__ieee754_pow+0x94>
   d8068:	ec55 4b10 	vmov	r4, r5, d0
   d806c:	4976      	ldr	r1, [pc, #472]	; (d8248 <__ieee754_pow+0x1f8>)
   d806e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d8072:	4588      	cmp	r8, r1
   d8074:	ee10 2a10 	vmov	r2, s0
   d8078:	46a9      	mov	r9, r5
   d807a:	dc2c      	bgt.n	d80d6 <__ieee754_pow+0x86>
   d807c:	ee11 3a10 	vmov	r3, s2
   d8080:	46bb      	mov	fp, r7
   d8082:	d03a      	beq.n	d80fa <__ieee754_pow+0xaa>
   d8084:	458a      	cmp	sl, r1
   d8086:	dc26      	bgt.n	d80d6 <__ieee754_pow+0x86>
   d8088:	496f      	ldr	r1, [pc, #444]	; (d8248 <__ieee754_pow+0x1f8>)
   d808a:	458a      	cmp	sl, r1
   d808c:	d021      	beq.n	d80d2 <__ieee754_pow+0x82>
   d808e:	f1b9 0f00 	cmp.w	r9, #0
   d8092:	db3d      	blt.n	d8110 <__ieee754_pow+0xc0>
   d8094:	2100      	movs	r1, #0
   d8096:	9103      	str	r1, [sp, #12]
   d8098:	2b00      	cmp	r3, #0
   d809a:	d155      	bne.n	d8148 <__ieee754_pow+0xf8>
   d809c:	4b6a      	ldr	r3, [pc, #424]	; (d8248 <__ieee754_pow+0x1f8>)
   d809e:	459a      	cmp	sl, r3
   d80a0:	f000 80a8 	beq.w	d81f4 <__ieee754_pow+0x1a4>
   d80a4:	4b69      	ldr	r3, [pc, #420]	; (d824c <__ieee754_pow+0x1fc>)
   d80a6:	459a      	cmp	sl, r3
   d80a8:	f000 80b6 	beq.w	d8218 <__ieee754_pow+0x1c8>
   d80ac:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d80b0:	f000 8501 	beq.w	d8ab6 <__ieee754_pow+0xa66>
   d80b4:	4b66      	ldr	r3, [pc, #408]	; (d8250 <__ieee754_pow+0x200>)
   d80b6:	459b      	cmp	fp, r3
   d80b8:	d146      	bne.n	d8148 <__ieee754_pow+0xf8>
   d80ba:	f1b9 0f00 	cmp.w	r9, #0
   d80be:	db43      	blt.n	d8148 <__ieee754_pow+0xf8>
   d80c0:	ec45 4b10 	vmov	d0, r4, r5
   d80c4:	b009      	add	sp, #36	; 0x24
   d80c6:	ecbd 8b0a 	vpop	{d8-d12}
   d80ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d80ce:	f000 bd99 	b.w	d8c04 <__ieee754_sqrt>
   d80d2:	2b00      	cmp	r3, #0
   d80d4:	d0db      	beq.n	d808e <__ieee754_pow+0x3e>
   d80d6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d80da:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d80de:	ea58 0302 	orrs.w	r3, r8, r2
   d80e2:	d10d      	bne.n	d8100 <__ieee754_pow+0xb0>
   d80e4:	ed9f 7b54 	vldr	d7, [pc, #336]	; d8238 <__ieee754_pow+0x1e8>
   d80e8:	ed8d 7b00 	vstr	d7, [sp]
   d80ec:	ed9d 0b00 	vldr	d0, [sp]
   d80f0:	b009      	add	sp, #36	; 0x24
   d80f2:	ecbd 8b0a 	vpop	{d8-d12}
   d80f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d80fa:	b90c      	cbnz	r4, d8100 <__ieee754_pow+0xb0>
   d80fc:	45c2      	cmp	sl, r8
   d80fe:	ddc3      	ble.n	d8088 <__ieee754_pow+0x38>
   d8100:	4854      	ldr	r0, [pc, #336]	; (d8254 <__ieee754_pow+0x204>)
   d8102:	b009      	add	sp, #36	; 0x24
   d8104:	ecbd 8b0a 	vpop	{d8-d12}
   d8108:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d810c:	f000 be58 	b.w	d8dc0 <nan>
   d8110:	4951      	ldr	r1, [pc, #324]	; (d8258 <__ieee754_pow+0x208>)
   d8112:	458a      	cmp	sl, r1
   d8114:	f300 8087 	bgt.w	d8226 <__ieee754_pow+0x1d6>
   d8118:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d811c:	458a      	cmp	sl, r1
   d811e:	dd0f      	ble.n	d8140 <__ieee754_pow+0xf0>
   d8120:	ea4f 512a 	mov.w	r1, sl, asr #20
   d8124:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d8128:	2914      	cmp	r1, #20
   d812a:	f340 84ce 	ble.w	d8aca <__ieee754_pow+0xa7a>
   d812e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d8132:	fa23 f001 	lsr.w	r0, r3, r1
   d8136:	fa00 f101 	lsl.w	r1, r0, r1
   d813a:	4299      	cmp	r1, r3
   d813c:	f000 8520 	beq.w	d8b80 <__ieee754_pow+0xb30>
   d8140:	2100      	movs	r1, #0
   d8142:	9103      	str	r1, [sp, #12]
   d8144:	2b00      	cmp	r3, #0
   d8146:	d0ad      	beq.n	d80a4 <__ieee754_pow+0x54>
   d8148:	ec45 4b10 	vmov	d0, r4, r5
   d814c:	9206      	str	r2, [sp, #24]
   d814e:	f000 fe1d 	bl	d8d8c <fabs>
   d8152:	9a06      	ldr	r2, [sp, #24]
   d8154:	ed8d 0b00 	vstr	d0, [sp]
   d8158:	bb5a      	cbnz	r2, d81b2 <__ieee754_pow+0x162>
   d815a:	f1b8 0f00 	cmp.w	r8, #0
   d815e:	d004      	beq.n	d816a <__ieee754_pow+0x11a>
   d8160:	4b3a      	ldr	r3, [pc, #232]	; (d824c <__ieee754_pow+0x1fc>)
   d8162:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d8166:	429a      	cmp	r2, r3
   d8168:	d123      	bne.n	d81b2 <__ieee754_pow+0x162>
   d816a:	f1bb 0f00 	cmp.w	fp, #0
   d816e:	da07      	bge.n	d8180 <__ieee754_pow+0x130>
   d8170:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8174:	4935      	ldr	r1, [pc, #212]	; (d824c <__ieee754_pow+0x1fc>)
   d8176:	2000      	movs	r0, #0
   d8178:	f001 fa36 	bl	d95e8 <__aeabi_ddiv>
   d817c:	e9cd 0100 	strd	r0, r1, [sp]
   d8180:	f1b9 0f00 	cmp.w	r9, #0
   d8184:	dab2      	bge.n	d80ec <__ieee754_pow+0x9c>
   d8186:	9b03      	ldr	r3, [sp, #12]
   d8188:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d818c:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d8190:	ea58 0303 	orrs.w	r3, r8, r3
   d8194:	f040 84be 	bne.w	d8b14 <__ieee754_pow+0xac4>
   d8198:	e9dd 2300 	ldrd	r2, r3, [sp]
   d819c:	4610      	mov	r0, r2
   d819e:	4619      	mov	r1, r3
   d81a0:	f000 ff40 	bl	d9024 <__aeabi_dsub>
   d81a4:	4602      	mov	r2, r0
   d81a6:	460b      	mov	r3, r1
   d81a8:	f001 fa1e 	bl	d95e8 <__aeabi_ddiv>
   d81ac:	e9cd 0100 	strd	r0, r1, [sp]
   d81b0:	e79c      	b.n	d80ec <__ieee754_pow+0x9c>
   d81b2:	9a03      	ldr	r2, [sp, #12]
   d81b4:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d81b8:	3b01      	subs	r3, #1
   d81ba:	9306      	str	r3, [sp, #24]
   d81bc:	4313      	orrs	r3, r2
   d81be:	d035      	beq.n	d822c <__ieee754_pow+0x1dc>
   d81c0:	4b26      	ldr	r3, [pc, #152]	; (d825c <__ieee754_pow+0x20c>)
   d81c2:	459a      	cmp	sl, r3
   d81c4:	dd4e      	ble.n	d8264 <__ieee754_pow+0x214>
   d81c6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d81ca:	459a      	cmp	sl, r3
   d81cc:	4b24      	ldr	r3, [pc, #144]	; (d8260 <__ieee754_pow+0x210>)
   d81ce:	f340 83ed 	ble.w	d89ac <__ieee754_pow+0x95c>
   d81d2:	4598      	cmp	r8, r3
   d81d4:	f340 836b 	ble.w	d88ae <__ieee754_pow+0x85e>
   d81d8:	f1bb 0f00 	cmp.w	fp, #0
   d81dc:	f340 836b 	ble.w	d88b6 <__ieee754_pow+0x866>
   d81e0:	a317      	add	r3, pc, #92	; (adr r3, d8240 <__ieee754_pow+0x1f0>)
   d81e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d81e6:	4610      	mov	r0, r2
   d81e8:	4619      	mov	r1, r3
   d81ea:	f001 f8d3 	bl	d9394 <__aeabi_dmul>
   d81ee:	e9cd 0100 	strd	r0, r1, [sp]
   d81f2:	e77b      	b.n	d80ec <__ieee754_pow+0x9c>
   d81f4:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d81f8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d81fc:	4313      	orrs	r3, r2
   d81fe:	f43f af71 	beq.w	d80e4 <__ieee754_pow+0x94>
   d8202:	4b17      	ldr	r3, [pc, #92]	; (d8260 <__ieee754_pow+0x210>)
   d8204:	4598      	cmp	r8, r3
   d8206:	f340 8388 	ble.w	d891a <__ieee754_pow+0x8ca>
   d820a:	f1bb 0f00 	cmp.w	fp, #0
   d820e:	f2c0 8352 	blt.w	d88b6 <__ieee754_pow+0x866>
   d8212:	e9cd 6700 	strd	r6, r7, [sp]
   d8216:	e769      	b.n	d80ec <__ieee754_pow+0x9c>
   d8218:	f1bb 0f00 	cmp.w	fp, #0
   d821c:	f2c0 8441 	blt.w	d8aa2 <__ieee754_pow+0xa52>
   d8220:	e9cd 4500 	strd	r4, r5, [sp]
   d8224:	e762      	b.n	d80ec <__ieee754_pow+0x9c>
   d8226:	2102      	movs	r1, #2
   d8228:	9103      	str	r1, [sp, #12]
   d822a:	e735      	b.n	d8098 <__ieee754_pow+0x48>
   d822c:	4622      	mov	r2, r4
   d822e:	462b      	mov	r3, r5
   d8230:	e7b4      	b.n	d819c <__ieee754_pow+0x14c>
   d8232:	bf00      	nop
   d8234:	f3af 8000 	nop.w
   d8238:	00000000 	.word	0x00000000
   d823c:	3ff00000 	.word	0x3ff00000
   d8240:	8800759c 	.word	0x8800759c
   d8244:	7e37e43c 	.word	0x7e37e43c
   d8248:	7ff00000 	.word	0x7ff00000
   d824c:	3ff00000 	.word	0x3ff00000
   d8250:	3fe00000 	.word	0x3fe00000
   d8254:	000dafb4 	.word	0x000dafb4
   d8258:	433fffff 	.word	0x433fffff
   d825c:	41e00000 	.word	0x41e00000
   d8260:	3fefffff 	.word	0x3fefffff
   d8264:	4be4      	ldr	r3, [pc, #912]	; (d85f8 <__ieee754_pow+0x5a8>)
   d8266:	ea09 0303 	and.w	r3, r9, r3
   d826a:	2b00      	cmp	r3, #0
   d826c:	f040 8416 	bne.w	d8a9c <__ieee754_pow+0xa4c>
   d8270:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8274:	4be1      	ldr	r3, [pc, #900]	; (d85fc <__ieee754_pow+0x5ac>)
   d8276:	2200      	movs	r2, #0
   d8278:	f001 f88c 	bl	d9394 <__aeabi_dmul>
   d827c:	e9cd 0100 	strd	r0, r1, [sp]
   d8280:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d8284:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d8288:	ea4f 5328 	mov.w	r3, r8, asr #20
   d828c:	49dc      	ldr	r1, [pc, #880]	; (d8600 <__ieee754_pow+0x5b0>)
   d828e:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d8292:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d8296:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d829a:	1818      	adds	r0, r3, r0
   d829c:	428a      	cmp	r2, r1
   d829e:	9007      	str	r0, [sp, #28]
   d82a0:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d82a4:	f340 83e9 	ble.w	d8a7a <__ieee754_pow+0xa2a>
   d82a8:	4bd6      	ldr	r3, [pc, #856]	; (d8604 <__ieee754_pow+0x5b4>)
   d82aa:	429a      	cmp	r2, r3
   d82ac:	f340 843e 	ble.w	d8b2c <__ieee754_pow+0xadc>
   d82b0:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d85a0 <__ieee754_pow+0x550>
   d82b4:	eeb0 ba47 	vmov.f32	s22, s14
   d82b8:	eef0 ba67 	vmov.f32	s23, s15
   d82bc:	eeb0 ca47 	vmov.f32	s24, s14
   d82c0:	eef0 ca67 	vmov.f32	s25, s15
   d82c4:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d85a8 <__ieee754_pow+0x558>
   d82c8:	3001      	adds	r0, #1
   d82ca:	ec54 3b17 	vmov	r3, r4, d7
   d82ce:	9007      	str	r0, [sp, #28]
   d82d0:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d82d4:	f04f 0900 	mov.w	r9, #0
   d82d8:	e9dd ab00 	ldrd	sl, fp, [sp]
   d82dc:	ec44 3b18 	vmov	d8, r3, r4
   d82e0:	461a      	mov	r2, r3
   d82e2:	4650      	mov	r0, sl
   d82e4:	4623      	mov	r3, r4
   d82e6:	4641      	mov	r1, r8
   d82e8:	f000 fe9c 	bl	d9024 <__aeabi_dsub>
   d82ec:	ec53 2b18 	vmov	r2, r3, d8
   d82f0:	4604      	mov	r4, r0
   d82f2:	460d      	mov	r5, r1
   d82f4:	4650      	mov	r0, sl
   d82f6:	4641      	mov	r1, r8
   d82f8:	f000 fe96 	bl	d9028 <__adddf3>
   d82fc:	4602      	mov	r2, r0
   d82fe:	460b      	mov	r3, r1
   d8300:	2000      	movs	r0, #0
   d8302:	49c1      	ldr	r1, [pc, #772]	; (d8608 <__ieee754_pow+0x5b8>)
   d8304:	f001 f970 	bl	d95e8 <__aeabi_ddiv>
   d8308:	ec45 4b1a 	vmov	d10, r4, r5
   d830c:	ec41 0b19 	vmov	d9, r0, r1
   d8310:	ec51 0b1a 	vmov	r0, r1, d10
   d8314:	ec53 2b19 	vmov	r2, r3, d9
   d8318:	f001 f83c 	bl	d9394 <__aeabi_dmul>
   d831c:	46c3      	mov	fp, r8
   d831e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d8322:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d8326:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d832a:	eb03 0509 	add.w	r5, r3, r9
   d832e:	460a      	mov	r2, r1
   d8330:	2300      	movs	r3, #0
   d8332:	4601      	mov	r1, r0
   d8334:	e9cd 1200 	strd	r1, r2, [sp]
   d8338:	9300      	str	r3, [sp, #0]
   d833a:	e9dd 8900 	ldrd	r8, r9, [sp]
   d833e:	2400      	movs	r4, #0
   d8340:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d8344:	462b      	mov	r3, r5
   d8346:	4622      	mov	r2, r4
   d8348:	4640      	mov	r0, r8
   d834a:	4649      	mov	r1, r9
   d834c:	f001 f822 	bl	d9394 <__aeabi_dmul>
   d8350:	4602      	mov	r2, r0
   d8352:	460b      	mov	r3, r1
   d8354:	ec51 0b1a 	vmov	r0, r1, d10
   d8358:	f000 fe64 	bl	d9024 <__aeabi_dsub>
   d835c:	ec41 0b17 	vmov	d7, r0, r1
   d8360:	ec53 2b18 	vmov	r2, r3, d8
   d8364:	4620      	mov	r0, r4
   d8366:	4629      	mov	r1, r5
   d8368:	ec55 4b17 	vmov	r4, r5, d7
   d836c:	f000 fe5a 	bl	d9024 <__aeabi_dsub>
   d8370:	4602      	mov	r2, r0
   d8372:	460b      	mov	r3, r1
   d8374:	4650      	mov	r0, sl
   d8376:	4659      	mov	r1, fp
   d8378:	f000 fe54 	bl	d9024 <__aeabi_dsub>
   d837c:	4642      	mov	r2, r8
   d837e:	464b      	mov	r3, r9
   d8380:	f001 f808 	bl	d9394 <__aeabi_dmul>
   d8384:	4602      	mov	r2, r0
   d8386:	460b      	mov	r3, r1
   d8388:	4620      	mov	r0, r4
   d838a:	4629      	mov	r1, r5
   d838c:	f000 fe4a 	bl	d9024 <__aeabi_dsub>
   d8390:	ec53 2b19 	vmov	r2, r3, d9
   d8394:	f000 fffe 	bl	d9394 <__aeabi_dmul>
   d8398:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d839c:	4604      	mov	r4, r0
   d839e:	460d      	mov	r5, r1
   d83a0:	4652      	mov	r2, sl
   d83a2:	465b      	mov	r3, fp
   d83a4:	4650      	mov	r0, sl
   d83a6:	4659      	mov	r1, fp
   d83a8:	f000 fff4 	bl	d9394 <__aeabi_dmul>
   d83ac:	a380      	add	r3, pc, #512	; (adr r3, d85b0 <__ieee754_pow+0x560>)
   d83ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83b2:	ec45 4b1a 	vmov	d10, r4, r5
   d83b6:	4604      	mov	r4, r0
   d83b8:	460d      	mov	r5, r1
   d83ba:	f000 ffeb 	bl	d9394 <__aeabi_dmul>
   d83be:	a37e      	add	r3, pc, #504	; (adr r3, d85b8 <__ieee754_pow+0x568>)
   d83c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83c4:	f000 fe30 	bl	d9028 <__adddf3>
   d83c8:	4622      	mov	r2, r4
   d83ca:	462b      	mov	r3, r5
   d83cc:	f000 ffe2 	bl	d9394 <__aeabi_dmul>
   d83d0:	a37b      	add	r3, pc, #492	; (adr r3, d85c0 <__ieee754_pow+0x570>)
   d83d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83d6:	f000 fe27 	bl	d9028 <__adddf3>
   d83da:	4622      	mov	r2, r4
   d83dc:	462b      	mov	r3, r5
   d83de:	f000 ffd9 	bl	d9394 <__aeabi_dmul>
   d83e2:	a379      	add	r3, pc, #484	; (adr r3, d85c8 <__ieee754_pow+0x578>)
   d83e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83e8:	f000 fe1e 	bl	d9028 <__adddf3>
   d83ec:	4622      	mov	r2, r4
   d83ee:	462b      	mov	r3, r5
   d83f0:	f000 ffd0 	bl	d9394 <__aeabi_dmul>
   d83f4:	a376      	add	r3, pc, #472	; (adr r3, d85d0 <__ieee754_pow+0x580>)
   d83f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83fa:	f000 fe15 	bl	d9028 <__adddf3>
   d83fe:	4622      	mov	r2, r4
   d8400:	462b      	mov	r3, r5
   d8402:	f000 ffc7 	bl	d9394 <__aeabi_dmul>
   d8406:	a374      	add	r3, pc, #464	; (adr r3, d85d8 <__ieee754_pow+0x588>)
   d8408:	e9d3 2300 	ldrd	r2, r3, [r3]
   d840c:	f000 fe0c 	bl	d9028 <__adddf3>
   d8410:	4622      	mov	r2, r4
   d8412:	462b      	mov	r3, r5
   d8414:	4604      	mov	r4, r0
   d8416:	460d      	mov	r5, r1
   d8418:	4610      	mov	r0, r2
   d841a:	4619      	mov	r1, r3
   d841c:	f000 ffba 	bl	d9394 <__aeabi_dmul>
   d8420:	4602      	mov	r2, r0
   d8422:	460b      	mov	r3, r1
   d8424:	4620      	mov	r0, r4
   d8426:	4629      	mov	r1, r5
   d8428:	f000 ffb4 	bl	d9394 <__aeabi_dmul>
   d842c:	4642      	mov	r2, r8
   d842e:	4604      	mov	r4, r0
   d8430:	460d      	mov	r5, r1
   d8432:	464b      	mov	r3, r9
   d8434:	4650      	mov	r0, sl
   d8436:	4659      	mov	r1, fp
   d8438:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d843c:	f000 fdf4 	bl	d9028 <__adddf3>
   d8440:	ec53 2b1a 	vmov	r2, r3, d10
   d8444:	f000 ffa6 	bl	d9394 <__aeabi_dmul>
   d8448:	4622      	mov	r2, r4
   d844a:	462b      	mov	r3, r5
   d844c:	f000 fdec 	bl	d9028 <__adddf3>
   d8450:	4642      	mov	r2, r8
   d8452:	4604      	mov	r4, r0
   d8454:	460d      	mov	r5, r1
   d8456:	464b      	mov	r3, r9
   d8458:	4640      	mov	r0, r8
   d845a:	4649      	mov	r1, r9
   d845c:	f000 ff9a 	bl	d9394 <__aeabi_dmul>
   d8460:	ec45 4b19 	vmov	d9, r4, r5
   d8464:	4b69      	ldr	r3, [pc, #420]	; (d860c <__ieee754_pow+0x5bc>)
   d8466:	2200      	movs	r2, #0
   d8468:	4682      	mov	sl, r0
   d846a:	468b      	mov	fp, r1
   d846c:	f000 fddc 	bl	d9028 <__adddf3>
   d8470:	ec53 2b19 	vmov	r2, r3, d9
   d8474:	f000 fdd8 	bl	d9028 <__adddf3>
   d8478:	9c00      	ldr	r4, [sp, #0]
   d847a:	460d      	mov	r5, r1
   d847c:	4622      	mov	r2, r4
   d847e:	462b      	mov	r3, r5
   d8480:	4640      	mov	r0, r8
   d8482:	4649      	mov	r1, r9
   d8484:	f000 ff86 	bl	d9394 <__aeabi_dmul>
   d8488:	4b60      	ldr	r3, [pc, #384]	; (d860c <__ieee754_pow+0x5bc>)
   d848a:	4680      	mov	r8, r0
   d848c:	4689      	mov	r9, r1
   d848e:	2200      	movs	r2, #0
   d8490:	4620      	mov	r0, r4
   d8492:	4629      	mov	r1, r5
   d8494:	f000 fdc6 	bl	d9024 <__aeabi_dsub>
   d8498:	4652      	mov	r2, sl
   d849a:	465b      	mov	r3, fp
   d849c:	f000 fdc2 	bl	d9024 <__aeabi_dsub>
   d84a0:	4602      	mov	r2, r0
   d84a2:	460b      	mov	r3, r1
   d84a4:	ec51 0b19 	vmov	r0, r1, d9
   d84a8:	f000 fdbc 	bl	d9024 <__aeabi_dsub>
   d84ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d84b0:	f000 ff70 	bl	d9394 <__aeabi_dmul>
   d84b4:	ec49 8b18 	vmov	d8, r8, r9
   d84b8:	4622      	mov	r2, r4
   d84ba:	4680      	mov	r8, r0
   d84bc:	4689      	mov	r9, r1
   d84be:	462b      	mov	r3, r5
   d84c0:	ec51 0b1a 	vmov	r0, r1, d10
   d84c4:	f000 ff66 	bl	d9394 <__aeabi_dmul>
   d84c8:	4602      	mov	r2, r0
   d84ca:	460b      	mov	r3, r1
   d84cc:	4640      	mov	r0, r8
   d84ce:	4649      	mov	r1, r9
   d84d0:	f000 fdaa 	bl	d9028 <__adddf3>
   d84d4:	4682      	mov	sl, r0
   d84d6:	468b      	mov	fp, r1
   d84d8:	4652      	mov	r2, sl
   d84da:	465b      	mov	r3, fp
   d84dc:	ec51 0b18 	vmov	r0, r1, d8
   d84e0:	f000 fda2 	bl	d9028 <__adddf3>
   d84e4:	9c00      	ldr	r4, [sp, #0]
   d84e6:	a33e      	add	r3, pc, #248	; (adr r3, d85e0 <__ieee754_pow+0x590>)
   d84e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d84ec:	4620      	mov	r0, r4
   d84ee:	460d      	mov	r5, r1
   d84f0:	f000 ff50 	bl	d9394 <__aeabi_dmul>
   d84f4:	ec53 2b18 	vmov	r2, r3, d8
   d84f8:	4680      	mov	r8, r0
   d84fa:	4689      	mov	r9, r1
   d84fc:	4620      	mov	r0, r4
   d84fe:	4629      	mov	r1, r5
   d8500:	f000 fd90 	bl	d9024 <__aeabi_dsub>
   d8504:	4602      	mov	r2, r0
   d8506:	460b      	mov	r3, r1
   d8508:	4650      	mov	r0, sl
   d850a:	4659      	mov	r1, fp
   d850c:	f000 fd8a 	bl	d9024 <__aeabi_dsub>
   d8510:	a335      	add	r3, pc, #212	; (adr r3, d85e8 <__ieee754_pow+0x598>)
   d8512:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8516:	f000 ff3d 	bl	d9394 <__aeabi_dmul>
   d851a:	ec49 8b19 	vmov	d9, r8, r9
   d851e:	a334      	add	r3, pc, #208	; (adr r3, d85f0 <__ieee754_pow+0x5a0>)
   d8520:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8524:	4680      	mov	r8, r0
   d8526:	4689      	mov	r9, r1
   d8528:	4620      	mov	r0, r4
   d852a:	4629      	mov	r1, r5
   d852c:	f000 ff32 	bl	d9394 <__aeabi_dmul>
   d8530:	4602      	mov	r2, r0
   d8532:	460b      	mov	r3, r1
   d8534:	4640      	mov	r0, r8
   d8536:	4649      	mov	r1, r9
   d8538:	f000 fd76 	bl	d9028 <__adddf3>
   d853c:	ec53 2b1c 	vmov	r2, r3, d12
   d8540:	f000 fd72 	bl	d9028 <__adddf3>
   d8544:	4682      	mov	sl, r0
   d8546:	9807      	ldr	r0, [sp, #28]
   d8548:	468b      	mov	fp, r1
   d854a:	f000 feb9 	bl	d92c0 <__aeabi_i2d>
   d854e:	4652      	mov	r2, sl
   d8550:	4680      	mov	r8, r0
   d8552:	4689      	mov	r9, r1
   d8554:	465b      	mov	r3, fp
   d8556:	ec51 0b19 	vmov	r0, r1, d9
   d855a:	f000 fd65 	bl	d9028 <__adddf3>
   d855e:	ec53 2b1b 	vmov	r2, r3, d11
   d8562:	f000 fd61 	bl	d9028 <__adddf3>
   d8566:	4642      	mov	r2, r8
   d8568:	464b      	mov	r3, r9
   d856a:	f000 fd5d 	bl	d9028 <__adddf3>
   d856e:	9c00      	ldr	r4, [sp, #0]
   d8570:	4642      	mov	r2, r8
   d8572:	464b      	mov	r3, r9
   d8574:	4620      	mov	r0, r4
   d8576:	460d      	mov	r5, r1
   d8578:	f000 fd54 	bl	d9024 <__aeabi_dsub>
   d857c:	ec53 2b1b 	vmov	r2, r3, d11
   d8580:	f000 fd50 	bl	d9024 <__aeabi_dsub>
   d8584:	ec53 2b19 	vmov	r2, r3, d9
   d8588:	f000 fd4c 	bl	d9024 <__aeabi_dsub>
   d858c:	4602      	mov	r2, r0
   d858e:	460b      	mov	r3, r1
   d8590:	4650      	mov	r0, sl
   d8592:	4659      	mov	r1, fp
   d8594:	f000 fd46 	bl	d9024 <__aeabi_dsub>
   d8598:	4682      	mov	sl, r0
   d859a:	468b      	mov	fp, r1
   d859c:	e038      	b.n	d8610 <__ieee754_pow+0x5c0>
   d859e:	bf00      	nop
	...
   d85ac:	3ff00000 	.word	0x3ff00000
   d85b0:	4a454eef 	.word	0x4a454eef
   d85b4:	3fca7e28 	.word	0x3fca7e28
   d85b8:	93c9db65 	.word	0x93c9db65
   d85bc:	3fcd864a 	.word	0x3fcd864a
   d85c0:	a91d4101 	.word	0xa91d4101
   d85c4:	3fd17460 	.word	0x3fd17460
   d85c8:	518f264d 	.word	0x518f264d
   d85cc:	3fd55555 	.word	0x3fd55555
   d85d0:	db6fabff 	.word	0xdb6fabff
   d85d4:	3fdb6db6 	.word	0x3fdb6db6
   d85d8:	33333303 	.word	0x33333303
   d85dc:	3fe33333 	.word	0x3fe33333
   d85e0:	e0000000 	.word	0xe0000000
   d85e4:	3feec709 	.word	0x3feec709
   d85e8:	dc3a03fd 	.word	0xdc3a03fd
   d85ec:	3feec709 	.word	0x3feec709
   d85f0:	145b01f5 	.word	0x145b01f5
   d85f4:	be3e2fe0 	.word	0xbe3e2fe0
   d85f8:	7ff00000 	.word	0x7ff00000
   d85fc:	43400000 	.word	0x43400000
   d8600:	0003988e 	.word	0x0003988e
   d8604:	000bb679 	.word	0x000bb679
   d8608:	3ff00000 	.word	0x3ff00000
   d860c:	40080000 	.word	0x40080000
   d8610:	9b03      	ldr	r3, [sp, #12]
   d8612:	9a06      	ldr	r2, [sp, #24]
   d8614:	3b01      	subs	r3, #1
   d8616:	4313      	orrs	r3, r2
   d8618:	f040 8178 	bne.w	d890c <__ieee754_pow+0x8bc>
   d861c:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d8930 <__ieee754_pow+0x8e0>
   d8620:	eeb0 9a47 	vmov.f32	s18, s14
   d8624:	eef0 9a67 	vmov.f32	s19, s15
   d8628:	2300      	movs	r3, #0
   d862a:	e9cd 6700 	strd	r6, r7, [sp]
   d862e:	9300      	str	r3, [sp, #0]
   d8630:	e9dd 8900 	ldrd	r8, r9, [sp]
   d8634:	4630      	mov	r0, r6
   d8636:	4642      	mov	r2, r8
   d8638:	4639      	mov	r1, r7
   d863a:	464b      	mov	r3, r9
   d863c:	f000 fcf2 	bl	d9024 <__aeabi_dsub>
   d8640:	4622      	mov	r2, r4
   d8642:	462b      	mov	r3, r5
   d8644:	f000 fea6 	bl	d9394 <__aeabi_dmul>
   d8648:	4632      	mov	r2, r6
   d864a:	463b      	mov	r3, r7
   d864c:	4606      	mov	r6, r0
   d864e:	460f      	mov	r7, r1
   d8650:	4650      	mov	r0, sl
   d8652:	4659      	mov	r1, fp
   d8654:	f000 fe9e 	bl	d9394 <__aeabi_dmul>
   d8658:	4602      	mov	r2, r0
   d865a:	460b      	mov	r3, r1
   d865c:	4630      	mov	r0, r6
   d865e:	4639      	mov	r1, r7
   d8660:	f000 fce2 	bl	d9028 <__adddf3>
   d8664:	4642      	mov	r2, r8
   d8666:	4682      	mov	sl, r0
   d8668:	468b      	mov	fp, r1
   d866a:	464b      	mov	r3, r9
   d866c:	4620      	mov	r0, r4
   d866e:	4629      	mov	r1, r5
   d8670:	f000 fe90 	bl	d9394 <__aeabi_dmul>
   d8674:	4606      	mov	r6, r0
   d8676:	460f      	mov	r7, r1
   d8678:	463b      	mov	r3, r7
   d867a:	4650      	mov	r0, sl
   d867c:	4659      	mov	r1, fp
   d867e:	4632      	mov	r2, r6
   d8680:	f000 fcd2 	bl	d9028 <__adddf3>
   d8684:	4bc4      	ldr	r3, [pc, #784]	; (d8998 <__ieee754_pow+0x948>)
   d8686:	4299      	cmp	r1, r3
   d8688:	4604      	mov	r4, r0
   d868a:	460d      	mov	r5, r1
   d868c:	4688      	mov	r8, r1
   d868e:	f340 8117 	ble.w	d88c0 <__ieee754_pow+0x870>
   d8692:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d8696:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d869a:	4303      	orrs	r3, r0
   d869c:	f040 822a 	bne.w	d8af4 <__ieee754_pow+0xaa4>
   d86a0:	a3a5      	add	r3, pc, #660	; (adr r3, d8938 <__ieee754_pow+0x8e8>)
   d86a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d86a6:	4650      	mov	r0, sl
   d86a8:	4659      	mov	r1, fp
   d86aa:	f000 fcbd 	bl	d9028 <__adddf3>
   d86ae:	4632      	mov	r2, r6
   d86b0:	ec41 0b18 	vmov	d8, r0, r1
   d86b4:	463b      	mov	r3, r7
   d86b6:	4620      	mov	r0, r4
   d86b8:	4629      	mov	r1, r5
   d86ba:	f000 fcb3 	bl	d9024 <__aeabi_dsub>
   d86be:	4602      	mov	r2, r0
   d86c0:	460b      	mov	r3, r1
   d86c2:	ec51 0b18 	vmov	r0, r1, d8
   d86c6:	f001 f8f5 	bl	d98b4 <__aeabi_dcmpgt>
   d86ca:	2800      	cmp	r0, #0
   d86cc:	f040 8212 	bne.w	d8af4 <__ieee754_pow+0xaa4>
   d86d0:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d86d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d86d8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d86dc:	fa42 f303 	asr.w	r3, r2, r3
   d86e0:	4443      	add	r3, r8
   d86e2:	49ae      	ldr	r1, [pc, #696]	; (d899c <__ieee754_pow+0x94c>)
   d86e4:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d86e8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d86ec:	fa41 fc02 	asr.w	ip, r1, r2
   d86f0:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d86f4:	ea23 010c 	bic.w	r1, r3, ip
   d86f8:	f1c2 0414 	rsb	r4, r2, #20
   d86fc:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d8700:	f1b8 0f00 	cmp.w	r8, #0
   d8704:	460b      	mov	r3, r1
   d8706:	fa45 f104 	asr.w	r1, r5, r4
   d870a:	9103      	str	r1, [sp, #12]
   d870c:	f04f 0000 	mov.w	r0, #0
   d8710:	bfb8      	it	lt
   d8712:	4249      	neglt	r1, r1
   d8714:	4602      	mov	r2, r0
   d8716:	bfb8      	it	lt
   d8718:	9103      	strlt	r1, [sp, #12]
   d871a:	4630      	mov	r0, r6
   d871c:	4639      	mov	r1, r7
   d871e:	f000 fc81 	bl	d9024 <__aeabi_dsub>
   d8722:	4606      	mov	r6, r0
   d8724:	460f      	mov	r7, r1
   d8726:	463b      	mov	r3, r7
   d8728:	4650      	mov	r0, sl
   d872a:	4659      	mov	r1, fp
   d872c:	4632      	mov	r2, r6
   d872e:	f000 fc7b 	bl	d9028 <__adddf3>
   d8732:	9b03      	ldr	r3, [sp, #12]
   d8734:	051b      	lsls	r3, r3, #20
   d8736:	9300      	str	r3, [sp, #0]
   d8738:	460d      	mov	r5, r1
   d873a:	2400      	movs	r4, #0
   d873c:	a380      	add	r3, pc, #512	; (adr r3, d8940 <__ieee754_pow+0x8f0>)
   d873e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8742:	4620      	mov	r0, r4
   d8744:	4629      	mov	r1, r5
   d8746:	f000 fe25 	bl	d9394 <__aeabi_dmul>
   d874a:	4632      	mov	r2, r6
   d874c:	4680      	mov	r8, r0
   d874e:	4689      	mov	r9, r1
   d8750:	463b      	mov	r3, r7
   d8752:	4620      	mov	r0, r4
   d8754:	4629      	mov	r1, r5
   d8756:	f000 fc65 	bl	d9024 <__aeabi_dsub>
   d875a:	4602      	mov	r2, r0
   d875c:	460b      	mov	r3, r1
   d875e:	4650      	mov	r0, sl
   d8760:	4659      	mov	r1, fp
   d8762:	f000 fc5f 	bl	d9024 <__aeabi_dsub>
   d8766:	a378      	add	r3, pc, #480	; (adr r3, d8948 <__ieee754_pow+0x8f8>)
   d8768:	e9d3 2300 	ldrd	r2, r3, [r3]
   d876c:	f000 fe12 	bl	d9394 <__aeabi_dmul>
   d8770:	a377      	add	r3, pc, #476	; (adr r3, d8950 <__ieee754_pow+0x900>)
   d8772:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8776:	4606      	mov	r6, r0
   d8778:	460f      	mov	r7, r1
   d877a:	4620      	mov	r0, r4
   d877c:	4629      	mov	r1, r5
   d877e:	f000 fe09 	bl	d9394 <__aeabi_dmul>
   d8782:	4602      	mov	r2, r0
   d8784:	460b      	mov	r3, r1
   d8786:	4630      	mov	r0, r6
   d8788:	4639      	mov	r1, r7
   d878a:	f000 fc4d 	bl	d9028 <__adddf3>
   d878e:	4606      	mov	r6, r0
   d8790:	460f      	mov	r7, r1
   d8792:	4632      	mov	r2, r6
   d8794:	463b      	mov	r3, r7
   d8796:	4640      	mov	r0, r8
   d8798:	4649      	mov	r1, r9
   d879a:	f000 fc45 	bl	d9028 <__adddf3>
   d879e:	4642      	mov	r2, r8
   d87a0:	464b      	mov	r3, r9
   d87a2:	4604      	mov	r4, r0
   d87a4:	460d      	mov	r5, r1
   d87a6:	f000 fc3d 	bl	d9024 <__aeabi_dsub>
   d87aa:	4602      	mov	r2, r0
   d87ac:	460b      	mov	r3, r1
   d87ae:	4630      	mov	r0, r6
   d87b0:	4639      	mov	r1, r7
   d87b2:	f000 fc37 	bl	d9024 <__aeabi_dsub>
   d87b6:	4622      	mov	r2, r4
   d87b8:	4682      	mov	sl, r0
   d87ba:	468b      	mov	fp, r1
   d87bc:	462b      	mov	r3, r5
   d87be:	4620      	mov	r0, r4
   d87c0:	4629      	mov	r1, r5
   d87c2:	f000 fde7 	bl	d9394 <__aeabi_dmul>
   d87c6:	a364      	add	r3, pc, #400	; (adr r3, d8958 <__ieee754_pow+0x908>)
   d87c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d87cc:	4606      	mov	r6, r0
   d87ce:	460f      	mov	r7, r1
   d87d0:	f000 fde0 	bl	d9394 <__aeabi_dmul>
   d87d4:	a362      	add	r3, pc, #392	; (adr r3, d8960 <__ieee754_pow+0x910>)
   d87d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d87da:	f000 fc23 	bl	d9024 <__aeabi_dsub>
   d87de:	4632      	mov	r2, r6
   d87e0:	463b      	mov	r3, r7
   d87e2:	f000 fdd7 	bl	d9394 <__aeabi_dmul>
   d87e6:	a360      	add	r3, pc, #384	; (adr r3, d8968 <__ieee754_pow+0x918>)
   d87e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d87ec:	f000 fc1c 	bl	d9028 <__adddf3>
   d87f0:	4632      	mov	r2, r6
   d87f2:	463b      	mov	r3, r7
   d87f4:	f000 fdce 	bl	d9394 <__aeabi_dmul>
   d87f8:	a35d      	add	r3, pc, #372	; (adr r3, d8970 <__ieee754_pow+0x920>)
   d87fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d87fe:	f000 fc11 	bl	d9024 <__aeabi_dsub>
   d8802:	4632      	mov	r2, r6
   d8804:	463b      	mov	r3, r7
   d8806:	f000 fdc5 	bl	d9394 <__aeabi_dmul>
   d880a:	a35b      	add	r3, pc, #364	; (adr r3, d8978 <__ieee754_pow+0x928>)
   d880c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8810:	f000 fc0a 	bl	d9028 <__adddf3>
   d8814:	4632      	mov	r2, r6
   d8816:	463b      	mov	r3, r7
   d8818:	f000 fdbc 	bl	d9394 <__aeabi_dmul>
   d881c:	4602      	mov	r2, r0
   d881e:	460b      	mov	r3, r1
   d8820:	4620      	mov	r0, r4
   d8822:	4629      	mov	r1, r5
   d8824:	f000 fbfe 	bl	d9024 <__aeabi_dsub>
   d8828:	4606      	mov	r6, r0
   d882a:	460f      	mov	r7, r1
   d882c:	4632      	mov	r2, r6
   d882e:	463b      	mov	r3, r7
   d8830:	4620      	mov	r0, r4
   d8832:	4629      	mov	r1, r5
   d8834:	f000 fdae 	bl	d9394 <__aeabi_dmul>
   d8838:	2200      	movs	r2, #0
   d883a:	4680      	mov	r8, r0
   d883c:	4689      	mov	r9, r1
   d883e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8842:	4630      	mov	r0, r6
   d8844:	4639      	mov	r1, r7
   d8846:	f000 fbed 	bl	d9024 <__aeabi_dsub>
   d884a:	4602      	mov	r2, r0
   d884c:	460b      	mov	r3, r1
   d884e:	4640      	mov	r0, r8
   d8850:	4649      	mov	r1, r9
   d8852:	f000 fec9 	bl	d95e8 <__aeabi_ddiv>
   d8856:	4652      	mov	r2, sl
   d8858:	4606      	mov	r6, r0
   d885a:	460f      	mov	r7, r1
   d885c:	465b      	mov	r3, fp
   d885e:	4620      	mov	r0, r4
   d8860:	4629      	mov	r1, r5
   d8862:	f000 fd97 	bl	d9394 <__aeabi_dmul>
   d8866:	4652      	mov	r2, sl
   d8868:	465b      	mov	r3, fp
   d886a:	f000 fbdd 	bl	d9028 <__adddf3>
   d886e:	4602      	mov	r2, r0
   d8870:	460b      	mov	r3, r1
   d8872:	4630      	mov	r0, r6
   d8874:	4639      	mov	r1, r7
   d8876:	f000 fbd5 	bl	d9024 <__aeabi_dsub>
   d887a:	4622      	mov	r2, r4
   d887c:	462b      	mov	r3, r5
   d887e:	f000 fbd1 	bl	d9024 <__aeabi_dsub>
   d8882:	4602      	mov	r2, r0
   d8884:	460b      	mov	r3, r1
   d8886:	2000      	movs	r0, #0
   d8888:	4945      	ldr	r1, [pc, #276]	; (d89a0 <__ieee754_pow+0x950>)
   d888a:	f000 fbcb 	bl	d9024 <__aeabi_dsub>
   d888e:	460b      	mov	r3, r1
   d8890:	9900      	ldr	r1, [sp, #0]
   d8892:	4419      	add	r1, r3
   d8894:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8898:	4602      	mov	r2, r0
   d889a:	f2c0 8169 	blt.w	d8b70 <__ieee754_pow+0xb20>
   d889e:	4610      	mov	r0, r2
   d88a0:	ec53 2b19 	vmov	r2, r3, d9
   d88a4:	f000 fd76 	bl	d9394 <__aeabi_dmul>
   d88a8:	e9cd 0100 	strd	r0, r1, [sp]
   d88ac:	e41e      	b.n	d80ec <__ieee754_pow+0x9c>
   d88ae:	f1bb 0f00 	cmp.w	fp, #0
   d88b2:	f6ff ac95 	blt.w	d81e0 <__ieee754_pow+0x190>
   d88b6:	ed9f 7b32 	vldr	d7, [pc, #200]	; d8980 <__ieee754_pow+0x930>
   d88ba:	ed8d 7b00 	vstr	d7, [sp]
   d88be:	e415      	b.n	d80ec <__ieee754_pow+0x9c>
   d88c0:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d89a8 <__ieee754_pow+0x958>
   d88c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d88c8:	4563      	cmp	r3, ip
   d88ca:	f340 810b 	ble.w	d8ae4 <__ieee754_pow+0xa94>
   d88ce:	4b35      	ldr	r3, [pc, #212]	; (d89a4 <__ieee754_pow+0x954>)
   d88d0:	440b      	add	r3, r1
   d88d2:	4303      	orrs	r3, r0
   d88d4:	d10a      	bne.n	d88ec <__ieee754_pow+0x89c>
   d88d6:	4632      	mov	r2, r6
   d88d8:	463b      	mov	r3, r7
   d88da:	f000 fba3 	bl	d9024 <__aeabi_dsub>
   d88de:	4652      	mov	r2, sl
   d88e0:	465b      	mov	r3, fp
   d88e2:	f000 ffdd 	bl	d98a0 <__aeabi_dcmpge>
   d88e6:	2800      	cmp	r0, #0
   d88e8:	f43f aef2 	beq.w	d86d0 <__ieee754_pow+0x680>
   d88ec:	a326      	add	r3, pc, #152	; (adr r3, d8988 <__ieee754_pow+0x938>)
   d88ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d88f2:	ec51 0b19 	vmov	r0, r1, d9
   d88f6:	f000 fd4d 	bl	d9394 <__aeabi_dmul>
   d88fa:	a323      	add	r3, pc, #140	; (adr r3, d8988 <__ieee754_pow+0x938>)
   d88fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8900:	f000 fd48 	bl	d9394 <__aeabi_dmul>
   d8904:	e9cd 0100 	strd	r0, r1, [sp]
   d8908:	f7ff bbf0 	b.w	d80ec <__ieee754_pow+0x9c>
   d890c:	ed9f 7b20 	vldr	d7, [pc, #128]	; d8990 <__ieee754_pow+0x940>
   d8910:	eeb0 9a47 	vmov.f32	s18, s14
   d8914:	eef0 9a67 	vmov.f32	s19, s15
   d8918:	e686      	b.n	d8628 <__ieee754_pow+0x5d8>
   d891a:	f1bb 0f00 	cmp.w	fp, #0
   d891e:	daca      	bge.n	d88b6 <__ieee754_pow+0x866>
   d8920:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d8924:	9600      	str	r6, [sp, #0]
   d8926:	9301      	str	r3, [sp, #4]
   d8928:	f7ff bbe0 	b.w	d80ec <__ieee754_pow+0x9c>
   d892c:	f3af 8000 	nop.w
   d8930:	00000000 	.word	0x00000000
   d8934:	bff00000 	.word	0xbff00000
   d8938:	652b82fe 	.word	0x652b82fe
   d893c:	3c971547 	.word	0x3c971547
   d8940:	00000000 	.word	0x00000000
   d8944:	3fe62e43 	.word	0x3fe62e43
   d8948:	fefa39ef 	.word	0xfefa39ef
   d894c:	3fe62e42 	.word	0x3fe62e42
   d8950:	0ca86c39 	.word	0x0ca86c39
   d8954:	be205c61 	.word	0xbe205c61
   d8958:	72bea4d0 	.word	0x72bea4d0
   d895c:	3e663769 	.word	0x3e663769
   d8960:	c5d26bf1 	.word	0xc5d26bf1
   d8964:	3ebbbd41 	.word	0x3ebbbd41
   d8968:	af25de2c 	.word	0xaf25de2c
   d896c:	3f11566a 	.word	0x3f11566a
   d8970:	16bebd93 	.word	0x16bebd93
   d8974:	3f66c16c 	.word	0x3f66c16c
   d8978:	5555553e 	.word	0x5555553e
   d897c:	3fc55555 	.word	0x3fc55555
	...
   d8988:	c2f8f359 	.word	0xc2f8f359
   d898c:	01a56e1f 	.word	0x01a56e1f
   d8990:	00000000 	.word	0x00000000
   d8994:	3ff00000 	.word	0x3ff00000
   d8998:	408fffff 	.word	0x408fffff
   d899c:	000fffff 	.word	0x000fffff
   d89a0:	3ff00000 	.word	0x3ff00000
   d89a4:	3f6f3400 	.word	0x3f6f3400
   d89a8:	4090cbff 	.word	0x4090cbff
   d89ac:	4598      	cmp	r8, r3
   d89ae:	f6ff af7e 	blt.w	d88ae <__ieee754_pow+0x85e>
   d89b2:	4b91      	ldr	r3, [pc, #580]	; (d8bf8 <__ieee754_pow+0xba8>)
   d89b4:	4598      	cmp	r8, r3
   d89b6:	f73f ac0f 	bgt.w	d81d8 <__ieee754_pow+0x188>
   d89ba:	4b8f      	ldr	r3, [pc, #572]	; (d8bf8 <__ieee754_pow+0xba8>)
   d89bc:	2200      	movs	r2, #0
   d89be:	e9dd 0100 	ldrd	r0, r1, [sp]
   d89c2:	f000 fb2f 	bl	d9024 <__aeabi_dsub>
   d89c6:	a378      	add	r3, pc, #480	; (adr r3, d8ba8 <__ieee754_pow+0xb58>)
   d89c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89cc:	4604      	mov	r4, r0
   d89ce:	460d      	mov	r5, r1
   d89d0:	f000 fce0 	bl	d9394 <__aeabi_dmul>
   d89d4:	a376      	add	r3, pc, #472	; (adr r3, d8bb0 <__ieee754_pow+0xb60>)
   d89d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89da:	4682      	mov	sl, r0
   d89dc:	468b      	mov	fp, r1
   d89de:	4620      	mov	r0, r4
   d89e0:	4629      	mov	r1, r5
   d89e2:	f000 fcd7 	bl	d9394 <__aeabi_dmul>
   d89e6:	4b85      	ldr	r3, [pc, #532]	; (d8bfc <__ieee754_pow+0xbac>)
   d89e8:	4680      	mov	r8, r0
   d89ea:	4689      	mov	r9, r1
   d89ec:	2200      	movs	r2, #0
   d89ee:	4620      	mov	r0, r4
   d89f0:	4629      	mov	r1, r5
   d89f2:	f000 fccf 	bl	d9394 <__aeabi_dmul>
   d89f6:	4602      	mov	r2, r0
   d89f8:	460b      	mov	r3, r1
   d89fa:	a16f      	add	r1, pc, #444	; (adr r1, d8bb8 <__ieee754_pow+0xb68>)
   d89fc:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8a00:	f000 fb10 	bl	d9024 <__aeabi_dsub>
   d8a04:	4622      	mov	r2, r4
   d8a06:	462b      	mov	r3, r5
   d8a08:	f000 fcc4 	bl	d9394 <__aeabi_dmul>
   d8a0c:	4602      	mov	r2, r0
   d8a0e:	460b      	mov	r3, r1
   d8a10:	2000      	movs	r0, #0
   d8a12:	497b      	ldr	r1, [pc, #492]	; (d8c00 <__ieee754_pow+0xbb0>)
   d8a14:	f000 fb06 	bl	d9024 <__aeabi_dsub>
   d8a18:	4622      	mov	r2, r4
   d8a1a:	462b      	mov	r3, r5
   d8a1c:	4604      	mov	r4, r0
   d8a1e:	460d      	mov	r5, r1
   d8a20:	4610      	mov	r0, r2
   d8a22:	4619      	mov	r1, r3
   d8a24:	f000 fcb6 	bl	d9394 <__aeabi_dmul>
   d8a28:	4602      	mov	r2, r0
   d8a2a:	460b      	mov	r3, r1
   d8a2c:	4620      	mov	r0, r4
   d8a2e:	4629      	mov	r1, r5
   d8a30:	f000 fcb0 	bl	d9394 <__aeabi_dmul>
   d8a34:	a362      	add	r3, pc, #392	; (adr r3, d8bc0 <__ieee754_pow+0xb70>)
   d8a36:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a3a:	f000 fcab 	bl	d9394 <__aeabi_dmul>
   d8a3e:	4602      	mov	r2, r0
   d8a40:	460b      	mov	r3, r1
   d8a42:	4640      	mov	r0, r8
   d8a44:	4649      	mov	r1, r9
   d8a46:	f000 faed 	bl	d9024 <__aeabi_dsub>
   d8a4a:	4680      	mov	r8, r0
   d8a4c:	4689      	mov	r9, r1
   d8a4e:	4650      	mov	r0, sl
   d8a50:	4659      	mov	r1, fp
   d8a52:	4642      	mov	r2, r8
   d8a54:	464b      	mov	r3, r9
   d8a56:	f000 fae7 	bl	d9028 <__adddf3>
   d8a5a:	2400      	movs	r4, #0
   d8a5c:	4652      	mov	r2, sl
   d8a5e:	465b      	mov	r3, fp
   d8a60:	4620      	mov	r0, r4
   d8a62:	460d      	mov	r5, r1
   d8a64:	f000 fade 	bl	d9024 <__aeabi_dsub>
   d8a68:	4602      	mov	r2, r0
   d8a6a:	460b      	mov	r3, r1
   d8a6c:	4640      	mov	r0, r8
   d8a6e:	4649      	mov	r1, r9
   d8a70:	f000 fad8 	bl	d9024 <__aeabi_dsub>
   d8a74:	4682      	mov	sl, r0
   d8a76:	468b      	mov	fp, r1
   d8a78:	e5ca      	b.n	d8610 <__ieee754_pow+0x5c0>
   d8a7a:	ed9f 7b53 	vldr	d7, [pc, #332]	; d8bc8 <__ieee754_pow+0xb78>
   d8a7e:	eeb0 ba47 	vmov.f32	s22, s14
   d8a82:	eef0 ba67 	vmov.f32	s23, s15
   d8a86:	eeb0 ca47 	vmov.f32	s24, s14
   d8a8a:	eef0 ca67 	vmov.f32	s25, s15
   d8a8e:	ed9f 7b50 	vldr	d7, [pc, #320]	; d8bd0 <__ieee754_pow+0xb80>
   d8a92:	f04f 0900 	mov.w	r9, #0
   d8a96:	ec54 3b17 	vmov	r3, r4, d7
   d8a9a:	e41d      	b.n	d82d8 <__ieee754_pow+0x288>
   d8a9c:	2000      	movs	r0, #0
   d8a9e:	f7ff bbf3 	b.w	d8288 <__ieee754_pow+0x238>
   d8aa2:	4955      	ldr	r1, [pc, #340]	; (d8bf8 <__ieee754_pow+0xba8>)
   d8aa4:	4622      	mov	r2, r4
   d8aa6:	462b      	mov	r3, r5
   d8aa8:	2000      	movs	r0, #0
   d8aaa:	f000 fd9d 	bl	d95e8 <__aeabi_ddiv>
   d8aae:	e9cd 0100 	strd	r0, r1, [sp]
   d8ab2:	f7ff bb1b 	b.w	d80ec <__ieee754_pow+0x9c>
   d8ab6:	4622      	mov	r2, r4
   d8ab8:	462b      	mov	r3, r5
   d8aba:	4620      	mov	r0, r4
   d8abc:	4629      	mov	r1, r5
   d8abe:	f000 fc69 	bl	d9394 <__aeabi_dmul>
   d8ac2:	e9cd 0100 	strd	r0, r1, [sp]
   d8ac6:	f7ff bb11 	b.w	d80ec <__ieee754_pow+0x9c>
   d8aca:	2b00      	cmp	r3, #0
   d8acc:	d142      	bne.n	d8b54 <__ieee754_pow+0xb04>
   d8ace:	f1c1 0114 	rsb	r1, r1, #20
   d8ad2:	fa4a f001 	asr.w	r0, sl, r1
   d8ad6:	fa00 f101 	lsl.w	r1, r0, r1
   d8ada:	4551      	cmp	r1, sl
   d8adc:	d05a      	beq.n	d8b94 <__ieee754_pow+0xb44>
   d8ade:	9303      	str	r3, [sp, #12]
   d8ae0:	f7ff bae0 	b.w	d80a4 <__ieee754_pow+0x54>
   d8ae4:	4a46      	ldr	r2, [pc, #280]	; (d8c00 <__ieee754_pow+0xbb0>)
   d8ae6:	4293      	cmp	r3, r2
   d8ae8:	dc5b      	bgt.n	d8ba2 <__ieee754_pow+0xb52>
   d8aea:	e9dd 1200 	ldrd	r1, r2, [sp]
   d8aee:	9100      	str	r1, [sp, #0]
   d8af0:	9103      	str	r1, [sp, #12]
   d8af2:	e622      	b.n	d873a <__ieee754_pow+0x6ea>
   d8af4:	a338      	add	r3, pc, #224	; (adr r3, d8bd8 <__ieee754_pow+0xb88>)
   d8af6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8afa:	ec51 0b19 	vmov	r0, r1, d9
   d8afe:	f000 fc49 	bl	d9394 <__aeabi_dmul>
   d8b02:	a335      	add	r3, pc, #212	; (adr r3, d8bd8 <__ieee754_pow+0xb88>)
   d8b04:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b08:	f000 fc44 	bl	d9394 <__aeabi_dmul>
   d8b0c:	e9cd 0100 	strd	r0, r1, [sp]
   d8b10:	f7ff baec 	b.w	d80ec <__ieee754_pow+0x9c>
   d8b14:	9b03      	ldr	r3, [sp, #12]
   d8b16:	2b01      	cmp	r3, #1
   d8b18:	f47f aae8 	bne.w	d80ec <__ieee754_pow+0x9c>
   d8b1c:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8b20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8b24:	e9cd 2300 	strd	r2, r3, [sp]
   d8b28:	f7ff bae0 	b.w	d80ec <__ieee754_pow+0x9c>
   d8b2c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d8be0 <__ieee754_pow+0xb90>
   d8b30:	eeb0 ba47 	vmov.f32	s22, s14
   d8b34:	eef0 ba67 	vmov.f32	s23, s15
   d8b38:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d8be8 <__ieee754_pow+0xb98>
   d8b3c:	eeb0 ca47 	vmov.f32	s24, s14
   d8b40:	eef0 ca67 	vmov.f32	s25, s15
   d8b44:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d8bf0 <__ieee754_pow+0xba0>
   d8b48:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d8b4c:	ec54 3b17 	vmov	r3, r4, d7
   d8b50:	f7ff bbc2 	b.w	d82d8 <__ieee754_pow+0x288>
   d8b54:	ec45 4b10 	vmov	d0, r4, r5
   d8b58:	9203      	str	r2, [sp, #12]
   d8b5a:	f000 f917 	bl	d8d8c <fabs>
   d8b5e:	9a03      	ldr	r2, [sp, #12]
   d8b60:	ed8d 0b00 	vstr	d0, [sp]
   d8b64:	2a00      	cmp	r2, #0
   d8b66:	f47f ab61 	bne.w	d822c <__ieee754_pow+0x1dc>
   d8b6a:	9203      	str	r2, [sp, #12]
   d8b6c:	f7ff baf5 	b.w	d815a <__ieee754_pow+0x10a>
   d8b70:	9803      	ldr	r0, [sp, #12]
   d8b72:	ec43 2b10 	vmov	d0, r2, r3
   d8b76:	f000 f9bf 	bl	d8ef8 <scalbn>
   d8b7a:	ec51 0b10 	vmov	r0, r1, d0
   d8b7e:	e68f      	b.n	d88a0 <__ieee754_pow+0x850>
   d8b80:	f000 0001 	and.w	r0, r0, #1
   d8b84:	f1c0 0102 	rsb	r1, r0, #2
   d8b88:	9103      	str	r1, [sp, #12]
   d8b8a:	2b00      	cmp	r3, #0
   d8b8c:	f43f aa8a 	beq.w	d80a4 <__ieee754_pow+0x54>
   d8b90:	f7ff bada 	b.w	d8148 <__ieee754_pow+0xf8>
   d8b94:	f000 0001 	and.w	r0, r0, #1
   d8b98:	f1c0 0302 	rsb	r3, r0, #2
   d8b9c:	9303      	str	r3, [sp, #12]
   d8b9e:	f7ff ba81 	b.w	d80a4 <__ieee754_pow+0x54>
   d8ba2:	151b      	asrs	r3, r3, #20
   d8ba4:	e596      	b.n	d86d4 <__ieee754_pow+0x684>
   d8ba6:	bf00      	nop
   d8ba8:	60000000 	.word	0x60000000
   d8bac:	3ff71547 	.word	0x3ff71547
   d8bb0:	f85ddf44 	.word	0xf85ddf44
   d8bb4:	3e54ae0b 	.word	0x3e54ae0b
   d8bb8:	55555555 	.word	0x55555555
   d8bbc:	3fd55555 	.word	0x3fd55555
   d8bc0:	652b82fe 	.word	0x652b82fe
   d8bc4:	3ff71547 	.word	0x3ff71547
	...
   d8bd4:	3ff00000 	.word	0x3ff00000
   d8bd8:	8800759c 	.word	0x8800759c
   d8bdc:	7e37e43c 	.word	0x7e37e43c
   d8be0:	40000000 	.word	0x40000000
   d8be4:	3fe2b803 	.word	0x3fe2b803
   d8be8:	43cfd006 	.word	0x43cfd006
   d8bec:	3e4cfdeb 	.word	0x3e4cfdeb
   d8bf0:	00000000 	.word	0x00000000
   d8bf4:	3ff80000 	.word	0x3ff80000
   d8bf8:	3ff00000 	.word	0x3ff00000
   d8bfc:	3fd00000 	.word	0x3fd00000
   d8c00:	3fe00000 	.word	0x3fe00000

000d8c04 <__ieee754_sqrt>:
   d8c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c08:	4a5f      	ldr	r2, [pc, #380]	; (d8d88 <__ieee754_sqrt+0x184>)
   d8c0a:	ec57 6b10 	vmov	r6, r7, d0
   d8c0e:	43ba      	bics	r2, r7
   d8c10:	f000 8098 	beq.w	d8d44 <__ieee754_sqrt+0x140>
   d8c14:	2f00      	cmp	r7, #0
   d8c16:	ee10 4a10 	vmov	r4, s0
   d8c1a:	463b      	mov	r3, r7
   d8c1c:	dd4e      	ble.n	d8cbc <__ieee754_sqrt+0xb8>
   d8c1e:	1539      	asrs	r1, r7, #20
   d8c20:	d05b      	beq.n	d8cda <__ieee754_sqrt+0xd6>
   d8c22:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d8c26:	07ca      	lsls	r2, r1, #31
   d8c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8c2c:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d8c30:	d403      	bmi.n	d8c3a <__ieee754_sqrt+0x36>
   d8c32:	005b      	lsls	r3, r3, #1
   d8c34:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8c38:	0064      	lsls	r4, r4, #1
   d8c3a:	0fe2      	lsrs	r2, r4, #31
   d8c3c:	f04f 0c00 	mov.w	ip, #0
   d8c40:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d8c44:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d8c48:	0064      	lsls	r4, r4, #1
   d8c4a:	4666      	mov	r6, ip
   d8c4c:	2516      	movs	r5, #22
   d8c4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d8c52:	18b1      	adds	r1, r6, r2
   d8c54:	4299      	cmp	r1, r3
   d8c56:	dc02      	bgt.n	d8c5e <__ieee754_sqrt+0x5a>
   d8c58:	1a5b      	subs	r3, r3, r1
   d8c5a:	188e      	adds	r6, r1, r2
   d8c5c:	4494      	add	ip, r2
   d8c5e:	005b      	lsls	r3, r3, #1
   d8c60:	3d01      	subs	r5, #1
   d8c62:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8c66:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8c6a:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8c6e:	d1f0      	bne.n	d8c52 <__ieee754_sqrt+0x4e>
   d8c70:	462f      	mov	r7, r5
   d8c72:	2020      	movs	r0, #32
   d8c74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d8c78:	e009      	b.n	d8c8e <__ieee754_sqrt+0x8a>
   d8c7a:	d03e      	beq.n	d8cfa <__ieee754_sqrt+0xf6>
   d8c7c:	0fe1      	lsrs	r1, r4, #31
   d8c7e:	3801      	subs	r0, #1
   d8c80:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8c84:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d8c88:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8c8c:	d03e      	beq.n	d8d0c <__ieee754_sqrt+0x108>
   d8c8e:	42b3      	cmp	r3, r6
   d8c90:	eb02 0105 	add.w	r1, r2, r5
   d8c94:	ddf1      	ble.n	d8c7a <__ieee754_sqrt+0x76>
   d8c96:	2900      	cmp	r1, #0
   d8c98:	eb01 0502 	add.w	r5, r1, r2
   d8c9c:	db09      	blt.n	d8cb2 <__ieee754_sqrt+0xae>
   d8c9e:	46b0      	mov	r8, r6
   d8ca0:	1b9b      	subs	r3, r3, r6
   d8ca2:	42a1      	cmp	r1, r4
   d8ca4:	bf88      	it	hi
   d8ca6:	f103 33ff 	addhi.w	r3, r3, #4294967295
   d8caa:	1a64      	subs	r4, r4, r1
   d8cac:	4417      	add	r7, r2
   d8cae:	4646      	mov	r6, r8
   d8cb0:	e7e4      	b.n	d8c7c <__ieee754_sqrt+0x78>
   d8cb2:	2d00      	cmp	r5, #0
   d8cb4:	dbf3      	blt.n	d8c9e <__ieee754_sqrt+0x9a>
   d8cb6:	f106 0801 	add.w	r8, r6, #1
   d8cba:	e7f1      	b.n	d8ca0 <__ieee754_sqrt+0x9c>
   d8cbc:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d8cc0:	4332      	orrs	r2, r6
   d8cc2:	d036      	beq.n	d8d32 <__ieee754_sqrt+0x12e>
   d8cc4:	2f00      	cmp	r7, #0
   d8cc6:	d14d      	bne.n	d8d64 <__ieee754_sqrt+0x160>
   d8cc8:	4639      	mov	r1, r7
   d8cca:	0ae2      	lsrs	r2, r4, #11
   d8ccc:	3915      	subs	r1, #21
   d8cce:	0564      	lsls	r4, r4, #21
   d8cd0:	4613      	mov	r3, r2
   d8cd2:	2a00      	cmp	r2, #0
   d8cd4:	d0f9      	beq.n	d8cca <__ieee754_sqrt+0xc6>
   d8cd6:	02d7      	lsls	r7, r2, #11
   d8cd8:	d451      	bmi.n	d8d7e <__ieee754_sqrt+0x17a>
   d8cda:	2000      	movs	r0, #0
   d8cdc:	005b      	lsls	r3, r3, #1
   d8cde:	02de      	lsls	r6, r3, #11
   d8ce0:	4605      	mov	r5, r0
   d8ce2:	f100 0001 	add.w	r0, r0, #1
   d8ce6:	d5f9      	bpl.n	d8cdc <__ieee754_sqrt+0xd8>
   d8ce8:	461a      	mov	r2, r3
   d8cea:	4623      	mov	r3, r4
   d8cec:	4084      	lsls	r4, r0
   d8cee:	f1c0 0020 	rsb	r0, r0, #32
   d8cf2:	40c3      	lsrs	r3, r0
   d8cf4:	4313      	orrs	r3, r2
   d8cf6:	1b49      	subs	r1, r1, r5
   d8cf8:	e793      	b.n	d8c22 <__ieee754_sqrt+0x1e>
   d8cfa:	42a1      	cmp	r1, r4
   d8cfc:	d8be      	bhi.n	d8c7c <__ieee754_sqrt+0x78>
   d8cfe:	2900      	cmp	r1, #0
   d8d00:	eb01 0502 	add.w	r5, r1, r2
   d8d04:	dbd5      	blt.n	d8cb2 <__ieee754_sqrt+0xae>
   d8d06:	4698      	mov	r8, r3
   d8d08:	2300      	movs	r3, #0
   d8d0a:	e7ce      	b.n	d8caa <__ieee754_sqrt+0xa6>
   d8d0c:	4323      	orrs	r3, r4
   d8d0e:	d112      	bne.n	d8d36 <__ieee754_sqrt+0x132>
   d8d10:	0878      	lsrs	r0, r7, #1
   d8d12:	ea4f 016c 	mov.w	r1, ip, asr #1
   d8d16:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d8d1a:	f01c 0f01 	tst.w	ip, #1
   d8d1e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8d22:	bf18      	it	ne
   d8d24:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d8d28:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d8d2c:	4602      	mov	r2, r0
   d8d2e:	ec43 2b10 	vmov	d0, r2, r3
   d8d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8d36:	1c7b      	adds	r3, r7, #1
   d8d38:	bf16      	itet	ne
   d8d3a:	1c78      	addne	r0, r7, #1
   d8d3c:	f10c 0c01 	addeq.w	ip, ip, #1
   d8d40:	0840      	lsrne	r0, r0, #1
   d8d42:	e7e6      	b.n	d8d12 <__ieee754_sqrt+0x10e>
   d8d44:	ee10 2a10 	vmov	r2, s0
   d8d48:	ee10 0a10 	vmov	r0, s0
   d8d4c:	463b      	mov	r3, r7
   d8d4e:	4639      	mov	r1, r7
   d8d50:	f000 fb20 	bl	d9394 <__aeabi_dmul>
   d8d54:	4632      	mov	r2, r6
   d8d56:	463b      	mov	r3, r7
   d8d58:	f000 f966 	bl	d9028 <__adddf3>
   d8d5c:	ec41 0b10 	vmov	d0, r0, r1
   d8d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8d64:	ee10 2a10 	vmov	r2, s0
   d8d68:	4630      	mov	r0, r6
   d8d6a:	4639      	mov	r1, r7
   d8d6c:	f000 f95a 	bl	d9024 <__aeabi_dsub>
   d8d70:	4602      	mov	r2, r0
   d8d72:	460b      	mov	r3, r1
   d8d74:	f000 fc38 	bl	d95e8 <__aeabi_ddiv>
   d8d78:	ec41 0b10 	vmov	d0, r0, r1
   d8d7c:	e7d9      	b.n	d8d32 <__ieee754_sqrt+0x12e>
   d8d7e:	4623      	mov	r3, r4
   d8d80:	2020      	movs	r0, #32
   d8d82:	f04f 35ff 	mov.w	r5, #4294967295
   d8d86:	e7b4      	b.n	d8cf2 <__ieee754_sqrt+0xee>
   d8d88:	7ff00000 	.word	0x7ff00000

000d8d8c <fabs>:
   d8d8c:	ec51 0b10 	vmov	r0, r1, d0
   d8d90:	ee10 2a10 	vmov	r2, s0
   d8d94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8d98:	ec43 2b10 	vmov	d0, r2, r3
   d8d9c:	4770      	bx	lr
   d8d9e:	bf00      	nop

000d8da0 <finite>:
   d8da0:	b082      	sub	sp, #8
   d8da2:	ed8d 0b00 	vstr	d0, [sp]
   d8da6:	9801      	ldr	r0, [sp, #4]
   d8da8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d8dac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d8db0:	0fc0      	lsrs	r0, r0, #31
   d8db2:	b002      	add	sp, #8
   d8db4:	4770      	bx	lr
   d8db6:	bf00      	nop

000d8db8 <matherr>:
   d8db8:	2000      	movs	r0, #0
   d8dba:	4770      	bx	lr
   d8dbc:	0000      	movs	r0, r0
	...

000d8dc0 <nan>:
   d8dc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8dc8 <nan+0x8>
   d8dc4:	4770      	bx	lr
   d8dc6:	bf00      	nop
   d8dc8:	00000000 	.word	0x00000000
   d8dcc:	7ff80000 	.word	0x7ff80000

000d8dd0 <rint>:
   d8dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8dd2:	ec53 2b10 	vmov	r2, r3, d0
   d8dd6:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d8dda:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d8dde:	2813      	cmp	r0, #19
   d8de0:	ee10 5a10 	vmov	r5, s0
   d8de4:	b083      	sub	sp, #12
   d8de6:	4619      	mov	r1, r3
   d8de8:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d8dec:	dc31      	bgt.n	d8e52 <rint+0x82>
   d8dee:	2800      	cmp	r0, #0
   d8df0:	db4c      	blt.n	d8e8c <rint+0xbc>
   d8df2:	4e3e      	ldr	r6, [pc, #248]	; (d8eec <rint+0x11c>)
   d8df4:	4106      	asrs	r6, r0
   d8df6:	ea03 0706 	and.w	r7, r3, r6
   d8dfa:	4317      	orrs	r7, r2
   d8dfc:	d02e      	beq.n	d8e5c <rint+0x8c>
   d8dfe:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d8e02:	431d      	orrs	r5, r3
   d8e04:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d8e08:	d00c      	beq.n	d8e24 <rint+0x54>
   d8e0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d8e0e:	2813      	cmp	r0, #19
   d8e10:	ea21 0606 	bic.w	r6, r1, r6
   d8e14:	fa43 f100 	asr.w	r1, r3, r0
   d8e18:	ea41 0106 	orr.w	r1, r1, r6
   d8e1c:	bf0c      	ite	eq
   d8e1e:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d8e22:	2500      	movne	r5, #0
   d8e24:	4832      	ldr	r0, [pc, #200]	; (d8ef0 <rint+0x120>)
   d8e26:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d8e2a:	462a      	mov	r2, r5
   d8e2c:	e9d4 4500 	ldrd	r4, r5, [r4]
   d8e30:	460b      	mov	r3, r1
   d8e32:	4620      	mov	r0, r4
   d8e34:	4629      	mov	r1, r5
   d8e36:	f000 f8f7 	bl	d9028 <__adddf3>
   d8e3a:	e9cd 0100 	strd	r0, r1, [sp]
   d8e3e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8e42:	4622      	mov	r2, r4
   d8e44:	462b      	mov	r3, r5
   d8e46:	f000 f8ed 	bl	d9024 <__aeabi_dsub>
   d8e4a:	ec41 0b10 	vmov	d0, r0, r1
   d8e4e:	b003      	add	sp, #12
   d8e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8e52:	2833      	cmp	r0, #51	; 0x33
   d8e54:	dd06      	ble.n	d8e64 <rint+0x94>
   d8e56:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d8e5a:	d040      	beq.n	d8ede <rint+0x10e>
   d8e5c:	ec43 2b10 	vmov	d0, r2, r3
   d8e60:	b003      	add	sp, #12
   d8e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8e64:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d8e68:	f04f 30ff 	mov.w	r0, #4294967295
   d8e6c:	40f0      	lsrs	r0, r6
   d8e6e:	4202      	tst	r2, r0
   d8e70:	d0f4      	beq.n	d8e5c <rint+0x8c>
   d8e72:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d8e76:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d8e7a:	d0d3      	beq.n	d8e24 <rint+0x54>
   d8e7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d8e80:	ea25 0503 	bic.w	r5, r5, r3
   d8e84:	fa42 f606 	asr.w	r6, r2, r6
   d8e88:	4335      	orrs	r5, r6
   d8e8a:	e7cb      	b.n	d8e24 <rint+0x54>
   d8e8c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d8e90:	4310      	orrs	r0, r2
   d8e92:	d0e3      	beq.n	d8e5c <rint+0x8c>
   d8e94:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d8e98:	4310      	orrs	r0, r2
   d8e9a:	4245      	negs	r5, r0
   d8e9c:	4305      	orrs	r5, r0
   d8e9e:	4814      	ldr	r0, [pc, #80]	; (d8ef0 <rint+0x120>)
   d8ea0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d8ea4:	e9d0 6700 	ldrd	r6, r7, [r0]
   d8ea8:	0c59      	lsrs	r1, r3, #17
   d8eaa:	0b2d      	lsrs	r5, r5, #12
   d8eac:	0449      	lsls	r1, r1, #17
   d8eae:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d8eb2:	ea45 0301 	orr.w	r3, r5, r1
   d8eb6:	4630      	mov	r0, r6
   d8eb8:	4639      	mov	r1, r7
   d8eba:	f000 f8b5 	bl	d9028 <__adddf3>
   d8ebe:	e9cd 0100 	strd	r0, r1, [sp]
   d8ec2:	463b      	mov	r3, r7
   d8ec4:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8ec8:	4632      	mov	r2, r6
   d8eca:	f000 f8ab 	bl	d9024 <__aeabi_dsub>
   d8ece:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8ed2:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d8ed6:	ec41 0b10 	vmov	d0, r0, r1
   d8eda:	b003      	add	sp, #12
   d8edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8ede:	ee10 0a10 	vmov	r0, s0
   d8ee2:	f000 f8a1 	bl	d9028 <__adddf3>
   d8ee6:	ec41 0b10 	vmov	d0, r0, r1
   d8eea:	e7b9      	b.n	d8e60 <rint+0x90>
   d8eec:	000fffff 	.word	0x000fffff
   d8ef0:	000dafb8 	.word	0x000dafb8
   d8ef4:	00000000 	.word	0x00000000

000d8ef8 <scalbn>:
   d8ef8:	b538      	push	{r3, r4, r5, lr}
   d8efa:	ec53 2b10 	vmov	r2, r3, d0
   d8efe:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d8f02:	461c      	mov	r4, r3
   d8f04:	4605      	mov	r5, r0
   d8f06:	bb81      	cbnz	r1, d8f6a <scalbn+0x72>
   d8f08:	ee10 1a10 	vmov	r1, s0
   d8f0c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d8f10:	4321      	orrs	r1, r4
   d8f12:	d029      	beq.n	d8f68 <scalbn+0x70>
   d8f14:	4619      	mov	r1, r3
   d8f16:	2200      	movs	r2, #0
   d8f18:	4b3d      	ldr	r3, [pc, #244]	; (d9010 <scalbn+0x118>)
   d8f1a:	4c3e      	ldr	r4, [pc, #248]	; (d9014 <scalbn+0x11c>)
   d8f1c:	ee10 0a10 	vmov	r0, s0
   d8f20:	f000 fa38 	bl	d9394 <__aeabi_dmul>
   d8f24:	42a5      	cmp	r5, r4
   d8f26:	4602      	mov	r2, r0
   d8f28:	460b      	mov	r3, r1
   d8f2a:	db16      	blt.n	d8f5a <scalbn+0x62>
   d8f2c:	460c      	mov	r4, r1
   d8f2e:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d8f32:	3936      	subs	r1, #54	; 0x36
   d8f34:	4429      	add	r1, r5
   d8f36:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d8f3a:	4281      	cmp	r1, r0
   d8f3c:	dc21      	bgt.n	d8f82 <scalbn+0x8a>
   d8f3e:	2900      	cmp	r1, #0
   d8f40:	dc47      	bgt.n	d8fd2 <scalbn+0xda>
   d8f42:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d8f46:	da34      	bge.n	d8fb2 <scalbn+0xba>
   d8f48:	f24c 3150 	movw	r1, #50000	; 0xc350
   d8f4c:	428d      	cmp	r5, r1
   d8f4e:	dc18      	bgt.n	d8f82 <scalbn+0x8a>
   d8f50:	2b00      	cmp	r3, #0
   d8f52:	a127      	add	r1, pc, #156	; (adr r1, d8ff0 <scalbn+0xf8>)
   d8f54:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8f58:	db44      	blt.n	d8fe4 <scalbn+0xec>
   d8f5a:	a325      	add	r3, pc, #148	; (adr r3, d8ff0 <scalbn+0xf8>)
   d8f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8f60:	f000 fa18 	bl	d9394 <__aeabi_dmul>
   d8f64:	ec41 0b10 	vmov	d0, r0, r1
   d8f68:	bd38      	pop	{r3, r4, r5, pc}
   d8f6a:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d8f6e:	4281      	cmp	r1, r0
   d8f70:	d1e0      	bne.n	d8f34 <scalbn+0x3c>
   d8f72:	ee10 0a10 	vmov	r0, s0
   d8f76:	4619      	mov	r1, r3
   d8f78:	f000 f856 	bl	d9028 <__adddf3>
   d8f7c:	ec41 0b10 	vmov	d0, r0, r1
   d8f80:	bd38      	pop	{r3, r4, r5, pc}
   d8f82:	2b00      	cmp	r3, #0
   d8f84:	a11c      	add	r1, pc, #112	; (adr r1, d8ff8 <scalbn+0x100>)
   d8f86:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8f8a:	db07      	blt.n	d8f9c <scalbn+0xa4>
   d8f8c:	a31a      	add	r3, pc, #104	; (adr r3, d8ff8 <scalbn+0x100>)
   d8f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8f92:	f000 f9ff 	bl	d9394 <__aeabi_dmul>
   d8f96:	ec41 0b10 	vmov	d0, r0, r1
   d8f9a:	bd38      	pop	{r3, r4, r5, pc}
   d8f9c:	a118      	add	r1, pc, #96	; (adr r1, d9000 <scalbn+0x108>)
   d8f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8fa2:	a315      	add	r3, pc, #84	; (adr r3, d8ff8 <scalbn+0x100>)
   d8fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8fa8:	f000 f9f4 	bl	d9394 <__aeabi_dmul>
   d8fac:	ec41 0b10 	vmov	d0, r0, r1
   d8fb0:	e7f3      	b.n	d8f9a <scalbn+0xa2>
   d8fb2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d8fb6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d8fba:	3136      	adds	r1, #54	; 0x36
   d8fbc:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d8fc0:	4610      	mov	r0, r2
   d8fc2:	4619      	mov	r1, r3
   d8fc4:	2200      	movs	r2, #0
   d8fc6:	4b14      	ldr	r3, [pc, #80]	; (d9018 <scalbn+0x120>)
   d8fc8:	f000 f9e4 	bl	d9394 <__aeabi_dmul>
   d8fcc:	ec41 0b10 	vmov	d0, r0, r1
   d8fd0:	bd38      	pop	{r3, r4, r5, pc}
   d8fd2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d8fd6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d8fda:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d8fde:	ec43 2b10 	vmov	d0, r2, r3
   d8fe2:	bd38      	pop	{r3, r4, r5, pc}
   d8fe4:	a108      	add	r1, pc, #32	; (adr r1, d9008 <scalbn+0x110>)
   d8fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8fea:	e7b6      	b.n	d8f5a <scalbn+0x62>
   d8fec:	f3af 8000 	nop.w
   d8ff0:	c2f8f359 	.word	0xc2f8f359
   d8ff4:	01a56e1f 	.word	0x01a56e1f
   d8ff8:	8800759c 	.word	0x8800759c
   d8ffc:	7e37e43c 	.word	0x7e37e43c
   d9000:	8800759c 	.word	0x8800759c
   d9004:	fe37e43c 	.word	0xfe37e43c
   d9008:	c2f8f359 	.word	0xc2f8f359
   d900c:	81a56e1f 	.word	0x81a56e1f
   d9010:	43500000 	.word	0x43500000
   d9014:	ffff3cb0 	.word	0xffff3cb0
   d9018:	3c900000 	.word	0x3c900000

000d901c <__aeabi_drsub>:
   d901c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9020:	e002      	b.n	d9028 <__adddf3>
   d9022:	bf00      	nop

000d9024 <__aeabi_dsub>:
   d9024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9028 <__adddf3>:
   d9028:	b530      	push	{r4, r5, lr}
   d902a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d902e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9032:	ea94 0f05 	teq	r4, r5
   d9036:	bf08      	it	eq
   d9038:	ea90 0f02 	teqeq	r0, r2
   d903c:	bf1f      	itttt	ne
   d903e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9042:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d904a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d904e:	f000 80e2 	beq.w	d9216 <__adddf3+0x1ee>
   d9052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d905a:	bfb8      	it	lt
   d905c:	426d      	neglt	r5, r5
   d905e:	dd0c      	ble.n	d907a <__adddf3+0x52>
   d9060:	442c      	add	r4, r5
   d9062:	ea80 0202 	eor.w	r2, r0, r2
   d9066:	ea81 0303 	eor.w	r3, r1, r3
   d906a:	ea82 0000 	eor.w	r0, r2, r0
   d906e:	ea83 0101 	eor.w	r1, r3, r1
   d9072:	ea80 0202 	eor.w	r2, r0, r2
   d9076:	ea81 0303 	eor.w	r3, r1, r3
   d907a:	2d36      	cmp	r5, #54	; 0x36
   d907c:	bf88      	it	hi
   d907e:	bd30      	pophi	{r4, r5, pc}
   d9080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d908c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9090:	d002      	beq.n	d9098 <__adddf3+0x70>
   d9092:	4240      	negs	r0, r0
   d9094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d909c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d90a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d90a4:	d002      	beq.n	d90ac <__adddf3+0x84>
   d90a6:	4252      	negs	r2, r2
   d90a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d90ac:	ea94 0f05 	teq	r4, r5
   d90b0:	f000 80a7 	beq.w	d9202 <__adddf3+0x1da>
   d90b4:	f1a4 0401 	sub.w	r4, r4, #1
   d90b8:	f1d5 0e20 	rsbs	lr, r5, #32
   d90bc:	db0d      	blt.n	d90da <__adddf3+0xb2>
   d90be:	fa02 fc0e 	lsl.w	ip, r2, lr
   d90c2:	fa22 f205 	lsr.w	r2, r2, r5
   d90c6:	1880      	adds	r0, r0, r2
   d90c8:	f141 0100 	adc.w	r1, r1, #0
   d90cc:	fa03 f20e 	lsl.w	r2, r3, lr
   d90d0:	1880      	adds	r0, r0, r2
   d90d2:	fa43 f305 	asr.w	r3, r3, r5
   d90d6:	4159      	adcs	r1, r3
   d90d8:	e00e      	b.n	d90f8 <__adddf3+0xd0>
   d90da:	f1a5 0520 	sub.w	r5, r5, #32
   d90de:	f10e 0e20 	add.w	lr, lr, #32
   d90e2:	2a01      	cmp	r2, #1
   d90e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d90e8:	bf28      	it	cs
   d90ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   d90ee:	fa43 f305 	asr.w	r3, r3, r5
   d90f2:	18c0      	adds	r0, r0, r3
   d90f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d90f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d90fc:	d507      	bpl.n	d910e <__adddf3+0xe6>
   d90fe:	f04f 0e00 	mov.w	lr, #0
   d9102:	f1dc 0c00 	rsbs	ip, ip, #0
   d9106:	eb7e 0000 	sbcs.w	r0, lr, r0
   d910a:	eb6e 0101 	sbc.w	r1, lr, r1
   d910e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9112:	d31b      	bcc.n	d914c <__adddf3+0x124>
   d9114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9118:	d30c      	bcc.n	d9134 <__adddf3+0x10c>
   d911a:	0849      	lsrs	r1, r1, #1
   d911c:	ea5f 0030 	movs.w	r0, r0, rrx
   d9120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9124:	f104 0401 	add.w	r4, r4, #1
   d9128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d912c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9130:	f080 809a 	bcs.w	d9268 <__adddf3+0x240>
   d9134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9138:	bf08      	it	eq
   d913a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d913e:	f150 0000 	adcs.w	r0, r0, #0
   d9142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9146:	ea41 0105 	orr.w	r1, r1, r5
   d914a:	bd30      	pop	{r4, r5, pc}
   d914c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9150:	4140      	adcs	r0, r0
   d9152:	eb41 0101 	adc.w	r1, r1, r1
   d9156:	3c01      	subs	r4, #1
   d9158:	bf28      	it	cs
   d915a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d915e:	d2e9      	bcs.n	d9134 <__adddf3+0x10c>
   d9160:	f091 0f00 	teq	r1, #0
   d9164:	bf04      	itt	eq
   d9166:	4601      	moveq	r1, r0
   d9168:	2000      	moveq	r0, #0
   d916a:	fab1 f381 	clz	r3, r1
   d916e:	bf08      	it	eq
   d9170:	3320      	addeq	r3, #32
   d9172:	f1a3 030b 	sub.w	r3, r3, #11
   d9176:	f1b3 0220 	subs.w	r2, r3, #32
   d917a:	da0c      	bge.n	d9196 <__adddf3+0x16e>
   d917c:	320c      	adds	r2, #12
   d917e:	dd08      	ble.n	d9192 <__adddf3+0x16a>
   d9180:	f102 0c14 	add.w	ip, r2, #20
   d9184:	f1c2 020c 	rsb	r2, r2, #12
   d9188:	fa01 f00c 	lsl.w	r0, r1, ip
   d918c:	fa21 f102 	lsr.w	r1, r1, r2
   d9190:	e00c      	b.n	d91ac <__adddf3+0x184>
   d9192:	f102 0214 	add.w	r2, r2, #20
   d9196:	bfd8      	it	le
   d9198:	f1c2 0c20 	rsble	ip, r2, #32
   d919c:	fa01 f102 	lsl.w	r1, r1, r2
   d91a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d91a4:	bfdc      	itt	le
   d91a6:	ea41 010c 	orrle.w	r1, r1, ip
   d91aa:	4090      	lslle	r0, r2
   d91ac:	1ae4      	subs	r4, r4, r3
   d91ae:	bfa2      	ittt	ge
   d91b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d91b4:	4329      	orrge	r1, r5
   d91b6:	bd30      	popge	{r4, r5, pc}
   d91b8:	ea6f 0404 	mvn.w	r4, r4
   d91bc:	3c1f      	subs	r4, #31
   d91be:	da1c      	bge.n	d91fa <__adddf3+0x1d2>
   d91c0:	340c      	adds	r4, #12
   d91c2:	dc0e      	bgt.n	d91e2 <__adddf3+0x1ba>
   d91c4:	f104 0414 	add.w	r4, r4, #20
   d91c8:	f1c4 0220 	rsb	r2, r4, #32
   d91cc:	fa20 f004 	lsr.w	r0, r0, r4
   d91d0:	fa01 f302 	lsl.w	r3, r1, r2
   d91d4:	ea40 0003 	orr.w	r0, r0, r3
   d91d8:	fa21 f304 	lsr.w	r3, r1, r4
   d91dc:	ea45 0103 	orr.w	r1, r5, r3
   d91e0:	bd30      	pop	{r4, r5, pc}
   d91e2:	f1c4 040c 	rsb	r4, r4, #12
   d91e6:	f1c4 0220 	rsb	r2, r4, #32
   d91ea:	fa20 f002 	lsr.w	r0, r0, r2
   d91ee:	fa01 f304 	lsl.w	r3, r1, r4
   d91f2:	ea40 0003 	orr.w	r0, r0, r3
   d91f6:	4629      	mov	r1, r5
   d91f8:	bd30      	pop	{r4, r5, pc}
   d91fa:	fa21 f004 	lsr.w	r0, r1, r4
   d91fe:	4629      	mov	r1, r5
   d9200:	bd30      	pop	{r4, r5, pc}
   d9202:	f094 0f00 	teq	r4, #0
   d9206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d920a:	bf06      	itte	eq
   d920c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9210:	3401      	addeq	r4, #1
   d9212:	3d01      	subne	r5, #1
   d9214:	e74e      	b.n	d90b4 <__adddf3+0x8c>
   d9216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d921a:	bf18      	it	ne
   d921c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9220:	d029      	beq.n	d9276 <__adddf3+0x24e>
   d9222:	ea94 0f05 	teq	r4, r5
   d9226:	bf08      	it	eq
   d9228:	ea90 0f02 	teqeq	r0, r2
   d922c:	d005      	beq.n	d923a <__adddf3+0x212>
   d922e:	ea54 0c00 	orrs.w	ip, r4, r0
   d9232:	bf04      	itt	eq
   d9234:	4619      	moveq	r1, r3
   d9236:	4610      	moveq	r0, r2
   d9238:	bd30      	pop	{r4, r5, pc}
   d923a:	ea91 0f03 	teq	r1, r3
   d923e:	bf1e      	ittt	ne
   d9240:	2100      	movne	r1, #0
   d9242:	2000      	movne	r0, #0
   d9244:	bd30      	popne	{r4, r5, pc}
   d9246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d924a:	d105      	bne.n	d9258 <__adddf3+0x230>
   d924c:	0040      	lsls	r0, r0, #1
   d924e:	4149      	adcs	r1, r1
   d9250:	bf28      	it	cs
   d9252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9256:	bd30      	pop	{r4, r5, pc}
   d9258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d925c:	bf3c      	itt	cc
   d925e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9262:	bd30      	popcc	{r4, r5, pc}
   d9264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d926c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9270:	f04f 0000 	mov.w	r0, #0
   d9274:	bd30      	pop	{r4, r5, pc}
   d9276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d927a:	bf1a      	itte	ne
   d927c:	4619      	movne	r1, r3
   d927e:	4610      	movne	r0, r2
   d9280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9284:	bf1c      	itt	ne
   d9286:	460b      	movne	r3, r1
   d9288:	4602      	movne	r2, r0
   d928a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d928e:	bf06      	itte	eq
   d9290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9294:	ea91 0f03 	teqeq	r1, r3
   d9298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d929c:	bd30      	pop	{r4, r5, pc}
   d929e:	bf00      	nop

000d92a0 <__aeabi_ui2d>:
   d92a0:	f090 0f00 	teq	r0, #0
   d92a4:	bf04      	itt	eq
   d92a6:	2100      	moveq	r1, #0
   d92a8:	4770      	bxeq	lr
   d92aa:	b530      	push	{r4, r5, lr}
   d92ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d92b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d92b4:	f04f 0500 	mov.w	r5, #0
   d92b8:	f04f 0100 	mov.w	r1, #0
   d92bc:	e750      	b.n	d9160 <__adddf3+0x138>
   d92be:	bf00      	nop

000d92c0 <__aeabi_i2d>:
   d92c0:	f090 0f00 	teq	r0, #0
   d92c4:	bf04      	itt	eq
   d92c6:	2100      	moveq	r1, #0
   d92c8:	4770      	bxeq	lr
   d92ca:	b530      	push	{r4, r5, lr}
   d92cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d92d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d92d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d92d8:	bf48      	it	mi
   d92da:	4240      	negmi	r0, r0
   d92dc:	f04f 0100 	mov.w	r1, #0
   d92e0:	e73e      	b.n	d9160 <__adddf3+0x138>
   d92e2:	bf00      	nop

000d92e4 <__aeabi_f2d>:
   d92e4:	0042      	lsls	r2, r0, #1
   d92e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d92ea:	ea4f 0131 	mov.w	r1, r1, rrx
   d92ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d92f2:	bf1f      	itttt	ne
   d92f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d92f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d92fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9300:	4770      	bxne	lr
   d9302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d9306:	bf08      	it	eq
   d9308:	4770      	bxeq	lr
   d930a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d930e:	bf04      	itt	eq
   d9310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d9314:	4770      	bxeq	lr
   d9316:	b530      	push	{r4, r5, lr}
   d9318:	f44f 7460 	mov.w	r4, #896	; 0x380
   d931c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9324:	e71c      	b.n	d9160 <__adddf3+0x138>
   d9326:	bf00      	nop

000d9328 <__aeabi_ul2d>:
   d9328:	ea50 0201 	orrs.w	r2, r0, r1
   d932c:	bf08      	it	eq
   d932e:	4770      	bxeq	lr
   d9330:	b530      	push	{r4, r5, lr}
   d9332:	f04f 0500 	mov.w	r5, #0
   d9336:	e00a      	b.n	d934e <__aeabi_l2d+0x16>

000d9338 <__aeabi_l2d>:
   d9338:	ea50 0201 	orrs.w	r2, r0, r1
   d933c:	bf08      	it	eq
   d933e:	4770      	bxeq	lr
   d9340:	b530      	push	{r4, r5, lr}
   d9342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9346:	d502      	bpl.n	d934e <__aeabi_l2d+0x16>
   d9348:	4240      	negs	r0, r0
   d934a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d934e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d935a:	f43f aed8 	beq.w	d910e <__adddf3+0xe6>
   d935e:	f04f 0203 	mov.w	r2, #3
   d9362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9366:	bf18      	it	ne
   d9368:	3203      	addne	r2, #3
   d936a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d936e:	bf18      	it	ne
   d9370:	3203      	addne	r2, #3
   d9372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9376:	f1c2 0320 	rsb	r3, r2, #32
   d937a:	fa00 fc03 	lsl.w	ip, r0, r3
   d937e:	fa20 f002 	lsr.w	r0, r0, r2
   d9382:	fa01 fe03 	lsl.w	lr, r1, r3
   d9386:	ea40 000e 	orr.w	r0, r0, lr
   d938a:	fa21 f102 	lsr.w	r1, r1, r2
   d938e:	4414      	add	r4, r2
   d9390:	e6bd      	b.n	d910e <__adddf3+0xe6>
   d9392:	bf00      	nop

000d9394 <__aeabi_dmul>:
   d9394:	b570      	push	{r4, r5, r6, lr}
   d9396:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d939a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d939e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d93a2:	bf1d      	ittte	ne
   d93a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d93a8:	ea94 0f0c 	teqne	r4, ip
   d93ac:	ea95 0f0c 	teqne	r5, ip
   d93b0:	f000 f8de 	bleq	d9570 <__aeabi_dmul+0x1dc>
   d93b4:	442c      	add	r4, r5
   d93b6:	ea81 0603 	eor.w	r6, r1, r3
   d93ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d93be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d93c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d93c6:	bf18      	it	ne
   d93c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d93cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d93d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d93d4:	d038      	beq.n	d9448 <__aeabi_dmul+0xb4>
   d93d6:	fba0 ce02 	umull	ip, lr, r0, r2
   d93da:	f04f 0500 	mov.w	r5, #0
   d93de:	fbe1 e502 	umlal	lr, r5, r1, r2
   d93e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d93e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d93ea:	f04f 0600 	mov.w	r6, #0
   d93ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   d93f2:	f09c 0f00 	teq	ip, #0
   d93f6:	bf18      	it	ne
   d93f8:	f04e 0e01 	orrne.w	lr, lr, #1
   d93fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9400:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9404:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9408:	d204      	bcs.n	d9414 <__aeabi_dmul+0x80>
   d940a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d940e:	416d      	adcs	r5, r5
   d9410:	eb46 0606 	adc.w	r6, r6, r6
   d9414:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9418:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d941c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9420:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9424:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9428:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d942c:	bf88      	it	hi
   d942e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9432:	d81e      	bhi.n	d9472 <__aeabi_dmul+0xde>
   d9434:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9438:	bf08      	it	eq
   d943a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d943e:	f150 0000 	adcs.w	r0, r0, #0
   d9442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9446:	bd70      	pop	{r4, r5, r6, pc}
   d9448:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d944c:	ea46 0101 	orr.w	r1, r6, r1
   d9450:	ea40 0002 	orr.w	r0, r0, r2
   d9454:	ea81 0103 	eor.w	r1, r1, r3
   d9458:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d945c:	bfc2      	ittt	gt
   d945e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9466:	bd70      	popgt	{r4, r5, r6, pc}
   d9468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d946c:	f04f 0e00 	mov.w	lr, #0
   d9470:	3c01      	subs	r4, #1
   d9472:	f300 80ab 	bgt.w	d95cc <__aeabi_dmul+0x238>
   d9476:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d947a:	bfde      	ittt	le
   d947c:	2000      	movle	r0, #0
   d947e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9482:	bd70      	pople	{r4, r5, r6, pc}
   d9484:	f1c4 0400 	rsb	r4, r4, #0
   d9488:	3c20      	subs	r4, #32
   d948a:	da35      	bge.n	d94f8 <__aeabi_dmul+0x164>
   d948c:	340c      	adds	r4, #12
   d948e:	dc1b      	bgt.n	d94c8 <__aeabi_dmul+0x134>
   d9490:	f104 0414 	add.w	r4, r4, #20
   d9494:	f1c4 0520 	rsb	r5, r4, #32
   d9498:	fa00 f305 	lsl.w	r3, r0, r5
   d949c:	fa20 f004 	lsr.w	r0, r0, r4
   d94a0:	fa01 f205 	lsl.w	r2, r1, r5
   d94a4:	ea40 0002 	orr.w	r0, r0, r2
   d94a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d94ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d94b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d94b4:	fa21 f604 	lsr.w	r6, r1, r4
   d94b8:	eb42 0106 	adc.w	r1, r2, r6
   d94bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d94c0:	bf08      	it	eq
   d94c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d94c6:	bd70      	pop	{r4, r5, r6, pc}
   d94c8:	f1c4 040c 	rsb	r4, r4, #12
   d94cc:	f1c4 0520 	rsb	r5, r4, #32
   d94d0:	fa00 f304 	lsl.w	r3, r0, r4
   d94d4:	fa20 f005 	lsr.w	r0, r0, r5
   d94d8:	fa01 f204 	lsl.w	r2, r1, r4
   d94dc:	ea40 0002 	orr.w	r0, r0, r2
   d94e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d94e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d94e8:	f141 0100 	adc.w	r1, r1, #0
   d94ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d94f0:	bf08      	it	eq
   d94f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d94f6:	bd70      	pop	{r4, r5, r6, pc}
   d94f8:	f1c4 0520 	rsb	r5, r4, #32
   d94fc:	fa00 f205 	lsl.w	r2, r0, r5
   d9500:	ea4e 0e02 	orr.w	lr, lr, r2
   d9504:	fa20 f304 	lsr.w	r3, r0, r4
   d9508:	fa01 f205 	lsl.w	r2, r1, r5
   d950c:	ea43 0302 	orr.w	r3, r3, r2
   d9510:	fa21 f004 	lsr.w	r0, r1, r4
   d9514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9518:	fa21 f204 	lsr.w	r2, r1, r4
   d951c:	ea20 0002 	bic.w	r0, r0, r2
   d9520:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9524:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9528:	bf08      	it	eq
   d952a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d952e:	bd70      	pop	{r4, r5, r6, pc}
   d9530:	f094 0f00 	teq	r4, #0
   d9534:	d10f      	bne.n	d9556 <__aeabi_dmul+0x1c2>
   d9536:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d953a:	0040      	lsls	r0, r0, #1
   d953c:	eb41 0101 	adc.w	r1, r1, r1
   d9540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9544:	bf08      	it	eq
   d9546:	3c01      	subeq	r4, #1
   d9548:	d0f7      	beq.n	d953a <__aeabi_dmul+0x1a6>
   d954a:	ea41 0106 	orr.w	r1, r1, r6
   d954e:	f095 0f00 	teq	r5, #0
   d9552:	bf18      	it	ne
   d9554:	4770      	bxne	lr
   d9556:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d955a:	0052      	lsls	r2, r2, #1
   d955c:	eb43 0303 	adc.w	r3, r3, r3
   d9560:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9564:	bf08      	it	eq
   d9566:	3d01      	subeq	r5, #1
   d9568:	d0f7      	beq.n	d955a <__aeabi_dmul+0x1c6>
   d956a:	ea43 0306 	orr.w	r3, r3, r6
   d956e:	4770      	bx	lr
   d9570:	ea94 0f0c 	teq	r4, ip
   d9574:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9578:	bf18      	it	ne
   d957a:	ea95 0f0c 	teqne	r5, ip
   d957e:	d00c      	beq.n	d959a <__aeabi_dmul+0x206>
   d9580:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9584:	bf18      	it	ne
   d9586:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d958a:	d1d1      	bne.n	d9530 <__aeabi_dmul+0x19c>
   d958c:	ea81 0103 	eor.w	r1, r1, r3
   d9590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9594:	f04f 0000 	mov.w	r0, #0
   d9598:	bd70      	pop	{r4, r5, r6, pc}
   d959a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d959e:	bf06      	itte	eq
   d95a0:	4610      	moveq	r0, r2
   d95a2:	4619      	moveq	r1, r3
   d95a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d95a8:	d019      	beq.n	d95de <__aeabi_dmul+0x24a>
   d95aa:	ea94 0f0c 	teq	r4, ip
   d95ae:	d102      	bne.n	d95b6 <__aeabi_dmul+0x222>
   d95b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d95b4:	d113      	bne.n	d95de <__aeabi_dmul+0x24a>
   d95b6:	ea95 0f0c 	teq	r5, ip
   d95ba:	d105      	bne.n	d95c8 <__aeabi_dmul+0x234>
   d95bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d95c0:	bf1c      	itt	ne
   d95c2:	4610      	movne	r0, r2
   d95c4:	4619      	movne	r1, r3
   d95c6:	d10a      	bne.n	d95de <__aeabi_dmul+0x24a>
   d95c8:	ea81 0103 	eor.w	r1, r1, r3
   d95cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d95d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d95d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d95d8:	f04f 0000 	mov.w	r0, #0
   d95dc:	bd70      	pop	{r4, r5, r6, pc}
   d95de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d95e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d95e6:	bd70      	pop	{r4, r5, r6, pc}

000d95e8 <__aeabi_ddiv>:
   d95e8:	b570      	push	{r4, r5, r6, lr}
   d95ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d95ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d95f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d95f6:	bf1d      	ittte	ne
   d95f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d95fc:	ea94 0f0c 	teqne	r4, ip
   d9600:	ea95 0f0c 	teqne	r5, ip
   d9604:	f000 f8a7 	bleq	d9756 <__aeabi_ddiv+0x16e>
   d9608:	eba4 0405 	sub.w	r4, r4, r5
   d960c:	ea81 0e03 	eor.w	lr, r1, r3
   d9610:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9614:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9618:	f000 8088 	beq.w	d972c <__aeabi_ddiv+0x144>
   d961c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9620:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9624:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9628:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d962c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9630:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9634:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9638:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d963c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9640:	429d      	cmp	r5, r3
   d9642:	bf08      	it	eq
   d9644:	4296      	cmpeq	r6, r2
   d9646:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d964a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d964e:	d202      	bcs.n	d9656 <__aeabi_ddiv+0x6e>
   d9650:	085b      	lsrs	r3, r3, #1
   d9652:	ea4f 0232 	mov.w	r2, r2, rrx
   d9656:	1ab6      	subs	r6, r6, r2
   d9658:	eb65 0503 	sbc.w	r5, r5, r3
   d965c:	085b      	lsrs	r3, r3, #1
   d965e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9662:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9666:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d966a:	ebb6 0e02 	subs.w	lr, r6, r2
   d966e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9672:	bf22      	ittt	cs
   d9674:	1ab6      	subcs	r6, r6, r2
   d9676:	4675      	movcs	r5, lr
   d9678:	ea40 000c 	orrcs.w	r0, r0, ip
   d967c:	085b      	lsrs	r3, r3, #1
   d967e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9682:	ebb6 0e02 	subs.w	lr, r6, r2
   d9686:	eb75 0e03 	sbcs.w	lr, r5, r3
   d968a:	bf22      	ittt	cs
   d968c:	1ab6      	subcs	r6, r6, r2
   d968e:	4675      	movcs	r5, lr
   d9690:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9694:	085b      	lsrs	r3, r3, #1
   d9696:	ea4f 0232 	mov.w	r2, r2, rrx
   d969a:	ebb6 0e02 	subs.w	lr, r6, r2
   d969e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d96a2:	bf22      	ittt	cs
   d96a4:	1ab6      	subcs	r6, r6, r2
   d96a6:	4675      	movcs	r5, lr
   d96a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d96ac:	085b      	lsrs	r3, r3, #1
   d96ae:	ea4f 0232 	mov.w	r2, r2, rrx
   d96b2:	ebb6 0e02 	subs.w	lr, r6, r2
   d96b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d96ba:	bf22      	ittt	cs
   d96bc:	1ab6      	subcs	r6, r6, r2
   d96be:	4675      	movcs	r5, lr
   d96c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d96c4:	ea55 0e06 	orrs.w	lr, r5, r6
   d96c8:	d018      	beq.n	d96fc <__aeabi_ddiv+0x114>
   d96ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d96ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d96d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d96d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d96da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d96de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d96e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d96e6:	d1c0      	bne.n	d966a <__aeabi_ddiv+0x82>
   d96e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d96ec:	d10b      	bne.n	d9706 <__aeabi_ddiv+0x11e>
   d96ee:	ea41 0100 	orr.w	r1, r1, r0
   d96f2:	f04f 0000 	mov.w	r0, #0
   d96f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d96fa:	e7b6      	b.n	d966a <__aeabi_ddiv+0x82>
   d96fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9700:	bf04      	itt	eq
   d9702:	4301      	orreq	r1, r0
   d9704:	2000      	moveq	r0, #0
   d9706:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d970a:	bf88      	it	hi
   d970c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9710:	f63f aeaf 	bhi.w	d9472 <__aeabi_dmul+0xde>
   d9714:	ebb5 0c03 	subs.w	ip, r5, r3
   d9718:	bf04      	itt	eq
   d971a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d971e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9722:	f150 0000 	adcs.w	r0, r0, #0
   d9726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d972a:	bd70      	pop	{r4, r5, r6, pc}
   d972c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9730:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9734:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9738:	bfc2      	ittt	gt
   d973a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d973e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9742:	bd70      	popgt	{r4, r5, r6, pc}
   d9744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9748:	f04f 0e00 	mov.w	lr, #0
   d974c:	3c01      	subs	r4, #1
   d974e:	e690      	b.n	d9472 <__aeabi_dmul+0xde>
   d9750:	ea45 0e06 	orr.w	lr, r5, r6
   d9754:	e68d      	b.n	d9472 <__aeabi_dmul+0xde>
   d9756:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d975a:	ea94 0f0c 	teq	r4, ip
   d975e:	bf08      	it	eq
   d9760:	ea95 0f0c 	teqeq	r5, ip
   d9764:	f43f af3b 	beq.w	d95de <__aeabi_dmul+0x24a>
   d9768:	ea94 0f0c 	teq	r4, ip
   d976c:	d10a      	bne.n	d9784 <__aeabi_ddiv+0x19c>
   d976e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9772:	f47f af34 	bne.w	d95de <__aeabi_dmul+0x24a>
   d9776:	ea95 0f0c 	teq	r5, ip
   d977a:	f47f af25 	bne.w	d95c8 <__aeabi_dmul+0x234>
   d977e:	4610      	mov	r0, r2
   d9780:	4619      	mov	r1, r3
   d9782:	e72c      	b.n	d95de <__aeabi_dmul+0x24a>
   d9784:	ea95 0f0c 	teq	r5, ip
   d9788:	d106      	bne.n	d9798 <__aeabi_ddiv+0x1b0>
   d978a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d978e:	f43f aefd 	beq.w	d958c <__aeabi_dmul+0x1f8>
   d9792:	4610      	mov	r0, r2
   d9794:	4619      	mov	r1, r3
   d9796:	e722      	b.n	d95de <__aeabi_dmul+0x24a>
   d9798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d979c:	bf18      	it	ne
   d979e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d97a2:	f47f aec5 	bne.w	d9530 <__aeabi_dmul+0x19c>
   d97a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d97aa:	f47f af0d 	bne.w	d95c8 <__aeabi_dmul+0x234>
   d97ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d97b2:	f47f aeeb 	bne.w	d958c <__aeabi_dmul+0x1f8>
   d97b6:	e712      	b.n	d95de <__aeabi_dmul+0x24a>

000d97b8 <__gedf2>:
   d97b8:	f04f 3cff 	mov.w	ip, #4294967295
   d97bc:	e006      	b.n	d97cc <__cmpdf2+0x4>
   d97be:	bf00      	nop

000d97c0 <__ledf2>:
   d97c0:	f04f 0c01 	mov.w	ip, #1
   d97c4:	e002      	b.n	d97cc <__cmpdf2+0x4>
   d97c6:	bf00      	nop

000d97c8 <__cmpdf2>:
   d97c8:	f04f 0c01 	mov.w	ip, #1
   d97cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   d97d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d97d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d97d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d97dc:	bf18      	it	ne
   d97de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d97e2:	d01b      	beq.n	d981c <__cmpdf2+0x54>
   d97e4:	b001      	add	sp, #4
   d97e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d97ea:	bf0c      	ite	eq
   d97ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d97f0:	ea91 0f03 	teqne	r1, r3
   d97f4:	bf02      	ittt	eq
   d97f6:	ea90 0f02 	teqeq	r0, r2
   d97fa:	2000      	moveq	r0, #0
   d97fc:	4770      	bxeq	lr
   d97fe:	f110 0f00 	cmn.w	r0, #0
   d9802:	ea91 0f03 	teq	r1, r3
   d9806:	bf58      	it	pl
   d9808:	4299      	cmppl	r1, r3
   d980a:	bf08      	it	eq
   d980c:	4290      	cmpeq	r0, r2
   d980e:	bf2c      	ite	cs
   d9810:	17d8      	asrcs	r0, r3, #31
   d9812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9816:	f040 0001 	orr.w	r0, r0, #1
   d981a:	4770      	bx	lr
   d981c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9824:	d102      	bne.n	d982c <__cmpdf2+0x64>
   d9826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d982a:	d107      	bne.n	d983c <__cmpdf2+0x74>
   d982c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9834:	d1d6      	bne.n	d97e4 <__cmpdf2+0x1c>
   d9836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d983a:	d0d3      	beq.n	d97e4 <__cmpdf2+0x1c>
   d983c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9840:	4770      	bx	lr
   d9842:	bf00      	nop

000d9844 <__aeabi_cdrcmple>:
   d9844:	4684      	mov	ip, r0
   d9846:	4610      	mov	r0, r2
   d9848:	4662      	mov	r2, ip
   d984a:	468c      	mov	ip, r1
   d984c:	4619      	mov	r1, r3
   d984e:	4663      	mov	r3, ip
   d9850:	e000      	b.n	d9854 <__aeabi_cdcmpeq>
   d9852:	bf00      	nop

000d9854 <__aeabi_cdcmpeq>:
   d9854:	b501      	push	{r0, lr}
   d9856:	f7ff ffb7 	bl	d97c8 <__cmpdf2>
   d985a:	2800      	cmp	r0, #0
   d985c:	bf48      	it	mi
   d985e:	f110 0f00 	cmnmi.w	r0, #0
   d9862:	bd01      	pop	{r0, pc}

000d9864 <__aeabi_dcmpeq>:
   d9864:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9868:	f7ff fff4 	bl	d9854 <__aeabi_cdcmpeq>
   d986c:	bf0c      	ite	eq
   d986e:	2001      	moveq	r0, #1
   d9870:	2000      	movne	r0, #0
   d9872:	f85d fb08 	ldr.w	pc, [sp], #8
   d9876:	bf00      	nop

000d9878 <__aeabi_dcmplt>:
   d9878:	f84d ed08 	str.w	lr, [sp, #-8]!
   d987c:	f7ff ffea 	bl	d9854 <__aeabi_cdcmpeq>
   d9880:	bf34      	ite	cc
   d9882:	2001      	movcc	r0, #1
   d9884:	2000      	movcs	r0, #0
   d9886:	f85d fb08 	ldr.w	pc, [sp], #8
   d988a:	bf00      	nop

000d988c <__aeabi_dcmple>:
   d988c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9890:	f7ff ffe0 	bl	d9854 <__aeabi_cdcmpeq>
   d9894:	bf94      	ite	ls
   d9896:	2001      	movls	r0, #1
   d9898:	2000      	movhi	r0, #0
   d989a:	f85d fb08 	ldr.w	pc, [sp], #8
   d989e:	bf00      	nop

000d98a0 <__aeabi_dcmpge>:
   d98a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d98a4:	f7ff ffce 	bl	d9844 <__aeabi_cdrcmple>
   d98a8:	bf94      	ite	ls
   d98aa:	2001      	movls	r0, #1
   d98ac:	2000      	movhi	r0, #0
   d98ae:	f85d fb08 	ldr.w	pc, [sp], #8
   d98b2:	bf00      	nop

000d98b4 <__aeabi_dcmpgt>:
   d98b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d98b8:	f7ff ffc4 	bl	d9844 <__aeabi_cdrcmple>
   d98bc:	bf34      	ite	cc
   d98be:	2001      	movcc	r0, #1
   d98c0:	2000      	movcs	r0, #0
   d98c2:	f85d fb08 	ldr.w	pc, [sp], #8
   d98c6:	bf00      	nop

000d98c8 <__aeabi_dcmpun>:
   d98c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d98cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d98d0:	d102      	bne.n	d98d8 <__aeabi_dcmpun+0x10>
   d98d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d98d6:	d10a      	bne.n	d98ee <__aeabi_dcmpun+0x26>
   d98d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d98dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d98e0:	d102      	bne.n	d98e8 <__aeabi_dcmpun+0x20>
   d98e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d98e6:	d102      	bne.n	d98ee <__aeabi_dcmpun+0x26>
   d98e8:	f04f 0000 	mov.w	r0, #0
   d98ec:	4770      	bx	lr
   d98ee:	f04f 0001 	mov.w	r0, #1
   d98f2:	4770      	bx	lr

000d98f4 <__aeabi_d2iz>:
   d98f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d98f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d98fc:	d215      	bcs.n	d992a <__aeabi_d2iz+0x36>
   d98fe:	d511      	bpl.n	d9924 <__aeabi_d2iz+0x30>
   d9900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9908:	d912      	bls.n	d9930 <__aeabi_d2iz+0x3c>
   d990a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d990e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d991a:	fa23 f002 	lsr.w	r0, r3, r2
   d991e:	bf18      	it	ne
   d9920:	4240      	negne	r0, r0
   d9922:	4770      	bx	lr
   d9924:	f04f 0000 	mov.w	r0, #0
   d9928:	4770      	bx	lr
   d992a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d992e:	d105      	bne.n	d993c <__aeabi_d2iz+0x48>
   d9930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9934:	bf08      	it	eq
   d9936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d993a:	4770      	bx	lr
   d993c:	f04f 0000 	mov.w	r0, #0
   d9940:	4770      	bx	lr
   d9942:	bf00      	nop

000d9944 <__aeabi_d2uiz>:
   d9944:	004a      	lsls	r2, r1, #1
   d9946:	d211      	bcs.n	d996c <__aeabi_d2uiz+0x28>
   d9948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d994c:	d211      	bcs.n	d9972 <__aeabi_d2uiz+0x2e>
   d994e:	d50d      	bpl.n	d996c <__aeabi_d2uiz+0x28>
   d9950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9958:	d40e      	bmi.n	d9978 <__aeabi_d2uiz+0x34>
   d995a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d995e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9966:	fa23 f002 	lsr.w	r0, r3, r2
   d996a:	4770      	bx	lr
   d996c:	f04f 0000 	mov.w	r0, #0
   d9970:	4770      	bx	lr
   d9972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9976:	d102      	bne.n	d997e <__aeabi_d2uiz+0x3a>
   d9978:	f04f 30ff 	mov.w	r0, #4294967295
   d997c:	4770      	bx	lr
   d997e:	f04f 0000 	mov.w	r0, #0
   d9982:	4770      	bx	lr

000d9984 <__aeabi_d2f>:
   d9984:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d998c:	bf24      	itt	cs
   d998e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9996:	d90d      	bls.n	d99b4 <__aeabi_d2f+0x30>
   d9998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d999c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d99a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d99a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d99a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d99ac:	bf08      	it	eq
   d99ae:	f020 0001 	biceq.w	r0, r0, #1
   d99b2:	4770      	bx	lr
   d99b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d99b8:	d121      	bne.n	d99fe <__aeabi_d2f+0x7a>
   d99ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d99be:	bfbc      	itt	lt
   d99c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d99c4:	4770      	bxlt	lr
   d99c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d99ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d99ce:	f1c2 0218 	rsb	r2, r2, #24
   d99d2:	f1c2 0c20 	rsb	ip, r2, #32
   d99d6:	fa10 f30c 	lsls.w	r3, r0, ip
   d99da:	fa20 f002 	lsr.w	r0, r0, r2
   d99de:	bf18      	it	ne
   d99e0:	f040 0001 	orrne.w	r0, r0, #1
   d99e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d99e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d99ec:	fa03 fc0c 	lsl.w	ip, r3, ip
   d99f0:	ea40 000c 	orr.w	r0, r0, ip
   d99f4:	fa23 f302 	lsr.w	r3, r3, r2
   d99f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d99fc:	e7cc      	b.n	d9998 <__aeabi_d2f+0x14>
   d99fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9a02:	d107      	bne.n	d9a14 <__aeabi_d2f+0x90>
   d9a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9a08:	bf1e      	ittt	ne
   d9a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9a12:	4770      	bxne	lr
   d9a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9a20:	4770      	bx	lr
   d9a22:	bf00      	nop

000d9a24 <__aeabi_frsub>:
   d9a24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d9a28:	e002      	b.n	d9a30 <__addsf3>
   d9a2a:	bf00      	nop

000d9a2c <__aeabi_fsub>:
   d9a2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d9a30 <__addsf3>:
   d9a30:	0042      	lsls	r2, r0, #1
   d9a32:	bf1f      	itttt	ne
   d9a34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d9a38:	ea92 0f03 	teqne	r2, r3
   d9a3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d9a40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d9a44:	d06a      	beq.n	d9b1c <__addsf3+0xec>
   d9a46:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d9a4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d9a4e:	bfc1      	itttt	gt
   d9a50:	18d2      	addgt	r2, r2, r3
   d9a52:	4041      	eorgt	r1, r0
   d9a54:	4048      	eorgt	r0, r1
   d9a56:	4041      	eorgt	r1, r0
   d9a58:	bfb8      	it	lt
   d9a5a:	425b      	neglt	r3, r3
   d9a5c:	2b19      	cmp	r3, #25
   d9a5e:	bf88      	it	hi
   d9a60:	4770      	bxhi	lr
   d9a62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d9a66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9a6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d9a6e:	bf18      	it	ne
   d9a70:	4240      	negne	r0, r0
   d9a72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9a76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d9a7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d9a7e:	bf18      	it	ne
   d9a80:	4249      	negne	r1, r1
   d9a82:	ea92 0f03 	teq	r2, r3
   d9a86:	d03f      	beq.n	d9b08 <__addsf3+0xd8>
   d9a88:	f1a2 0201 	sub.w	r2, r2, #1
   d9a8c:	fa41 fc03 	asr.w	ip, r1, r3
   d9a90:	eb10 000c 	adds.w	r0, r0, ip
   d9a94:	f1c3 0320 	rsb	r3, r3, #32
   d9a98:	fa01 f103 	lsl.w	r1, r1, r3
   d9a9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d9aa0:	d502      	bpl.n	d9aa8 <__addsf3+0x78>
   d9aa2:	4249      	negs	r1, r1
   d9aa4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d9aa8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d9aac:	d313      	bcc.n	d9ad6 <__addsf3+0xa6>
   d9aae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d9ab2:	d306      	bcc.n	d9ac2 <__addsf3+0x92>
   d9ab4:	0840      	lsrs	r0, r0, #1
   d9ab6:	ea4f 0131 	mov.w	r1, r1, rrx
   d9aba:	f102 0201 	add.w	r2, r2, #1
   d9abe:	2afe      	cmp	r2, #254	; 0xfe
   d9ac0:	d251      	bcs.n	d9b66 <__addsf3+0x136>
   d9ac2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d9ac6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d9aca:	bf08      	it	eq
   d9acc:	f020 0001 	biceq.w	r0, r0, #1
   d9ad0:	ea40 0003 	orr.w	r0, r0, r3
   d9ad4:	4770      	bx	lr
   d9ad6:	0049      	lsls	r1, r1, #1
   d9ad8:	eb40 0000 	adc.w	r0, r0, r0
   d9adc:	3a01      	subs	r2, #1
   d9ade:	bf28      	it	cs
   d9ae0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   d9ae4:	d2ed      	bcs.n	d9ac2 <__addsf3+0x92>
   d9ae6:	fab0 fc80 	clz	ip, r0
   d9aea:	f1ac 0c08 	sub.w	ip, ip, #8
   d9aee:	ebb2 020c 	subs.w	r2, r2, ip
   d9af2:	fa00 f00c 	lsl.w	r0, r0, ip
   d9af6:	bfaa      	itet	ge
   d9af8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d9afc:	4252      	neglt	r2, r2
   d9afe:	4318      	orrge	r0, r3
   d9b00:	bfbc      	itt	lt
   d9b02:	40d0      	lsrlt	r0, r2
   d9b04:	4318      	orrlt	r0, r3
   d9b06:	4770      	bx	lr
   d9b08:	f092 0f00 	teq	r2, #0
   d9b0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d9b10:	bf06      	itte	eq
   d9b12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d9b16:	3201      	addeq	r2, #1
   d9b18:	3b01      	subne	r3, #1
   d9b1a:	e7b5      	b.n	d9a88 <__addsf3+0x58>
   d9b1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d9b20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d9b24:	bf18      	it	ne
   d9b26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d9b2a:	d021      	beq.n	d9b70 <__addsf3+0x140>
   d9b2c:	ea92 0f03 	teq	r2, r3
   d9b30:	d004      	beq.n	d9b3c <__addsf3+0x10c>
   d9b32:	f092 0f00 	teq	r2, #0
   d9b36:	bf08      	it	eq
   d9b38:	4608      	moveq	r0, r1
   d9b3a:	4770      	bx	lr
   d9b3c:	ea90 0f01 	teq	r0, r1
   d9b40:	bf1c      	itt	ne
   d9b42:	2000      	movne	r0, #0
   d9b44:	4770      	bxne	lr
   d9b46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d9b4a:	d104      	bne.n	d9b56 <__addsf3+0x126>
   d9b4c:	0040      	lsls	r0, r0, #1
   d9b4e:	bf28      	it	cs
   d9b50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d9b54:	4770      	bx	lr
   d9b56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d9b5a:	bf3c      	itt	cc
   d9b5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d9b60:	4770      	bxcc	lr
   d9b62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d9b66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d9b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9b6e:	4770      	bx	lr
   d9b70:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d9b74:	bf16      	itet	ne
   d9b76:	4608      	movne	r0, r1
   d9b78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d9b7c:	4601      	movne	r1, r0
   d9b7e:	0242      	lsls	r2, r0, #9
   d9b80:	bf06      	itte	eq
   d9b82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d9b86:	ea90 0f01 	teqeq	r0, r1
   d9b8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d9b8e:	4770      	bx	lr

000d9b90 <__aeabi_ui2f>:
   d9b90:	f04f 0300 	mov.w	r3, #0
   d9b94:	e004      	b.n	d9ba0 <__aeabi_i2f+0x8>
   d9b96:	bf00      	nop

000d9b98 <__aeabi_i2f>:
   d9b98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d9b9c:	bf48      	it	mi
   d9b9e:	4240      	negmi	r0, r0
   d9ba0:	ea5f 0c00 	movs.w	ip, r0
   d9ba4:	bf08      	it	eq
   d9ba6:	4770      	bxeq	lr
   d9ba8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d9bac:	4601      	mov	r1, r0
   d9bae:	f04f 0000 	mov.w	r0, #0
   d9bb2:	e01c      	b.n	d9bee <__aeabi_l2f+0x2a>

000d9bb4 <__aeabi_ul2f>:
   d9bb4:	ea50 0201 	orrs.w	r2, r0, r1
   d9bb8:	bf08      	it	eq
   d9bba:	4770      	bxeq	lr
   d9bbc:	f04f 0300 	mov.w	r3, #0
   d9bc0:	e00a      	b.n	d9bd8 <__aeabi_l2f+0x14>
   d9bc2:	bf00      	nop

000d9bc4 <__aeabi_l2f>:
   d9bc4:	ea50 0201 	orrs.w	r2, r0, r1
   d9bc8:	bf08      	it	eq
   d9bca:	4770      	bxeq	lr
   d9bcc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d9bd0:	d502      	bpl.n	d9bd8 <__aeabi_l2f+0x14>
   d9bd2:	4240      	negs	r0, r0
   d9bd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9bd8:	ea5f 0c01 	movs.w	ip, r1
   d9bdc:	bf02      	ittt	eq
   d9bde:	4684      	moveq	ip, r0
   d9be0:	4601      	moveq	r1, r0
   d9be2:	2000      	moveq	r0, #0
   d9be4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d9be8:	bf08      	it	eq
   d9bea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d9bee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d9bf2:	fabc f28c 	clz	r2, ip
   d9bf6:	3a08      	subs	r2, #8
   d9bf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d9bfc:	db10      	blt.n	d9c20 <__aeabi_l2f+0x5c>
   d9bfe:	fa01 fc02 	lsl.w	ip, r1, r2
   d9c02:	4463      	add	r3, ip
   d9c04:	fa00 fc02 	lsl.w	ip, r0, r2
   d9c08:	f1c2 0220 	rsb	r2, r2, #32
   d9c0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9c10:	fa20 f202 	lsr.w	r2, r0, r2
   d9c14:	eb43 0002 	adc.w	r0, r3, r2
   d9c18:	bf08      	it	eq
   d9c1a:	f020 0001 	biceq.w	r0, r0, #1
   d9c1e:	4770      	bx	lr
   d9c20:	f102 0220 	add.w	r2, r2, #32
   d9c24:	fa01 fc02 	lsl.w	ip, r1, r2
   d9c28:	f1c2 0220 	rsb	r2, r2, #32
   d9c2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d9c30:	fa21 f202 	lsr.w	r2, r1, r2
   d9c34:	eb43 0002 	adc.w	r0, r3, r2
   d9c38:	bf08      	it	eq
   d9c3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d9c3e:	4770      	bx	lr

000d9c40 <__aeabi_ldivmod>:
   d9c40:	b97b      	cbnz	r3, d9c62 <__aeabi_ldivmod+0x22>
   d9c42:	b972      	cbnz	r2, d9c62 <__aeabi_ldivmod+0x22>
   d9c44:	2900      	cmp	r1, #0
   d9c46:	bfbe      	ittt	lt
   d9c48:	2000      	movlt	r0, #0
   d9c4a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d9c4e:	e006      	blt.n	d9c5e <__aeabi_ldivmod+0x1e>
   d9c50:	bf08      	it	eq
   d9c52:	2800      	cmpeq	r0, #0
   d9c54:	bf1c      	itt	ne
   d9c56:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d9c5a:	f04f 30ff 	movne.w	r0, #4294967295
   d9c5e:	f000 b9a1 	b.w	d9fa4 <__aeabi_idiv0>
   d9c62:	f1ad 0c08 	sub.w	ip, sp, #8
   d9c66:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d9c6a:	2900      	cmp	r1, #0
   d9c6c:	db09      	blt.n	d9c82 <__aeabi_ldivmod+0x42>
   d9c6e:	2b00      	cmp	r3, #0
   d9c70:	db1a      	blt.n	d9ca8 <__aeabi_ldivmod+0x68>
   d9c72:	f000 f835 	bl	d9ce0 <__udivmoddi4>
   d9c76:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9c7e:	b004      	add	sp, #16
   d9c80:	4770      	bx	lr
   d9c82:	4240      	negs	r0, r0
   d9c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9c88:	2b00      	cmp	r3, #0
   d9c8a:	db1b      	blt.n	d9cc4 <__aeabi_ldivmod+0x84>
   d9c8c:	f000 f828 	bl	d9ce0 <__udivmoddi4>
   d9c90:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9c98:	b004      	add	sp, #16
   d9c9a:	4240      	negs	r0, r0
   d9c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9ca0:	4252      	negs	r2, r2
   d9ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9ca6:	4770      	bx	lr
   d9ca8:	4252      	negs	r2, r2
   d9caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9cae:	f000 f817 	bl	d9ce0 <__udivmoddi4>
   d9cb2:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9cba:	b004      	add	sp, #16
   d9cbc:	4240      	negs	r0, r0
   d9cbe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9cc2:	4770      	bx	lr
   d9cc4:	4252      	negs	r2, r2
   d9cc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9cca:	f000 f809 	bl	d9ce0 <__udivmoddi4>
   d9cce:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9cd6:	b004      	add	sp, #16
   d9cd8:	4252      	negs	r2, r2
   d9cda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9cde:	4770      	bx	lr

000d9ce0 <__udivmoddi4>:
   d9ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9ce4:	9d08      	ldr	r5, [sp, #32]
   d9ce6:	4604      	mov	r4, r0
   d9ce8:	468c      	mov	ip, r1
   d9cea:	2b00      	cmp	r3, #0
   d9cec:	f040 8083 	bne.w	d9df6 <__udivmoddi4+0x116>
   d9cf0:	428a      	cmp	r2, r1
   d9cf2:	4617      	mov	r7, r2
   d9cf4:	d947      	bls.n	d9d86 <__udivmoddi4+0xa6>
   d9cf6:	fab2 f282 	clz	r2, r2
   d9cfa:	b142      	cbz	r2, d9d0e <__udivmoddi4+0x2e>
   d9cfc:	f1c2 0020 	rsb	r0, r2, #32
   d9d00:	fa24 f000 	lsr.w	r0, r4, r0
   d9d04:	4091      	lsls	r1, r2
   d9d06:	4097      	lsls	r7, r2
   d9d08:	ea40 0c01 	orr.w	ip, r0, r1
   d9d0c:	4094      	lsls	r4, r2
   d9d0e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d9d12:	0c23      	lsrs	r3, r4, #16
   d9d14:	fbbc f6f8 	udiv	r6, ip, r8
   d9d18:	fa1f fe87 	uxth.w	lr, r7
   d9d1c:	fb08 c116 	mls	r1, r8, r6, ip
   d9d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d9d24:	fb06 f10e 	mul.w	r1, r6, lr
   d9d28:	4299      	cmp	r1, r3
   d9d2a:	d909      	bls.n	d9d40 <__udivmoddi4+0x60>
   d9d2c:	18fb      	adds	r3, r7, r3
   d9d2e:	f106 30ff 	add.w	r0, r6, #4294967295
   d9d32:	f080 8119 	bcs.w	d9f68 <__udivmoddi4+0x288>
   d9d36:	4299      	cmp	r1, r3
   d9d38:	f240 8116 	bls.w	d9f68 <__udivmoddi4+0x288>
   d9d3c:	3e02      	subs	r6, #2
   d9d3e:	443b      	add	r3, r7
   d9d40:	1a5b      	subs	r3, r3, r1
   d9d42:	b2a4      	uxth	r4, r4
   d9d44:	fbb3 f0f8 	udiv	r0, r3, r8
   d9d48:	fb08 3310 	mls	r3, r8, r0, r3
   d9d4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d9d50:	fb00 fe0e 	mul.w	lr, r0, lr
   d9d54:	45a6      	cmp	lr, r4
   d9d56:	d909      	bls.n	d9d6c <__udivmoddi4+0x8c>
   d9d58:	193c      	adds	r4, r7, r4
   d9d5a:	f100 33ff 	add.w	r3, r0, #4294967295
   d9d5e:	f080 8105 	bcs.w	d9f6c <__udivmoddi4+0x28c>
   d9d62:	45a6      	cmp	lr, r4
   d9d64:	f240 8102 	bls.w	d9f6c <__udivmoddi4+0x28c>
   d9d68:	3802      	subs	r0, #2
   d9d6a:	443c      	add	r4, r7
   d9d6c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d9d70:	eba4 040e 	sub.w	r4, r4, lr
   d9d74:	2600      	movs	r6, #0
   d9d76:	b11d      	cbz	r5, d9d80 <__udivmoddi4+0xa0>
   d9d78:	40d4      	lsrs	r4, r2
   d9d7a:	2300      	movs	r3, #0
   d9d7c:	e9c5 4300 	strd	r4, r3, [r5]
   d9d80:	4631      	mov	r1, r6
   d9d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9d86:	b902      	cbnz	r2, d9d8a <__udivmoddi4+0xaa>
   d9d88:	deff      	udf	#255	; 0xff
   d9d8a:	fab2 f282 	clz	r2, r2
   d9d8e:	2a00      	cmp	r2, #0
   d9d90:	d150      	bne.n	d9e34 <__udivmoddi4+0x154>
   d9d92:	1bcb      	subs	r3, r1, r7
   d9d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d9d98:	fa1f f887 	uxth.w	r8, r7
   d9d9c:	2601      	movs	r6, #1
   d9d9e:	fbb3 fcfe 	udiv	ip, r3, lr
   d9da2:	0c21      	lsrs	r1, r4, #16
   d9da4:	fb0e 331c 	mls	r3, lr, ip, r3
   d9da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d9dac:	fb08 f30c 	mul.w	r3, r8, ip
   d9db0:	428b      	cmp	r3, r1
   d9db2:	d907      	bls.n	d9dc4 <__udivmoddi4+0xe4>
   d9db4:	1879      	adds	r1, r7, r1
   d9db6:	f10c 30ff 	add.w	r0, ip, #4294967295
   d9dba:	d202      	bcs.n	d9dc2 <__udivmoddi4+0xe2>
   d9dbc:	428b      	cmp	r3, r1
   d9dbe:	f200 80e9 	bhi.w	d9f94 <__udivmoddi4+0x2b4>
   d9dc2:	4684      	mov	ip, r0
   d9dc4:	1ac9      	subs	r1, r1, r3
   d9dc6:	b2a3      	uxth	r3, r4
   d9dc8:	fbb1 f0fe 	udiv	r0, r1, lr
   d9dcc:	fb0e 1110 	mls	r1, lr, r0, r1
   d9dd0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d9dd4:	fb08 f800 	mul.w	r8, r8, r0
   d9dd8:	45a0      	cmp	r8, r4
   d9dda:	d907      	bls.n	d9dec <__udivmoddi4+0x10c>
   d9ddc:	193c      	adds	r4, r7, r4
   d9dde:	f100 33ff 	add.w	r3, r0, #4294967295
   d9de2:	d202      	bcs.n	d9dea <__udivmoddi4+0x10a>
   d9de4:	45a0      	cmp	r8, r4
   d9de6:	f200 80d9 	bhi.w	d9f9c <__udivmoddi4+0x2bc>
   d9dea:	4618      	mov	r0, r3
   d9dec:	eba4 0408 	sub.w	r4, r4, r8
   d9df0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d9df4:	e7bf      	b.n	d9d76 <__udivmoddi4+0x96>
   d9df6:	428b      	cmp	r3, r1
   d9df8:	d909      	bls.n	d9e0e <__udivmoddi4+0x12e>
   d9dfa:	2d00      	cmp	r5, #0
   d9dfc:	f000 80b1 	beq.w	d9f62 <__udivmoddi4+0x282>
   d9e00:	2600      	movs	r6, #0
   d9e02:	e9c5 0100 	strd	r0, r1, [r5]
   d9e06:	4630      	mov	r0, r6
   d9e08:	4631      	mov	r1, r6
   d9e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9e0e:	fab3 f683 	clz	r6, r3
   d9e12:	2e00      	cmp	r6, #0
   d9e14:	d14a      	bne.n	d9eac <__udivmoddi4+0x1cc>
   d9e16:	428b      	cmp	r3, r1
   d9e18:	d302      	bcc.n	d9e20 <__udivmoddi4+0x140>
   d9e1a:	4282      	cmp	r2, r0
   d9e1c:	f200 80b8 	bhi.w	d9f90 <__udivmoddi4+0x2b0>
   d9e20:	1a84      	subs	r4, r0, r2
   d9e22:	eb61 0103 	sbc.w	r1, r1, r3
   d9e26:	2001      	movs	r0, #1
   d9e28:	468c      	mov	ip, r1
   d9e2a:	2d00      	cmp	r5, #0
   d9e2c:	d0a8      	beq.n	d9d80 <__udivmoddi4+0xa0>
   d9e2e:	e9c5 4c00 	strd	r4, ip, [r5]
   d9e32:	e7a5      	b.n	d9d80 <__udivmoddi4+0xa0>
   d9e34:	f1c2 0320 	rsb	r3, r2, #32
   d9e38:	fa20 f603 	lsr.w	r6, r0, r3
   d9e3c:	4097      	lsls	r7, r2
   d9e3e:	fa01 f002 	lsl.w	r0, r1, r2
   d9e42:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d9e46:	40d9      	lsrs	r1, r3
   d9e48:	4330      	orrs	r0, r6
   d9e4a:	0c03      	lsrs	r3, r0, #16
   d9e4c:	fbb1 f6fe 	udiv	r6, r1, lr
   d9e50:	fa1f f887 	uxth.w	r8, r7
   d9e54:	fb0e 1116 	mls	r1, lr, r6, r1
   d9e58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d9e5c:	fb06 f108 	mul.w	r1, r6, r8
   d9e60:	4299      	cmp	r1, r3
   d9e62:	fa04 f402 	lsl.w	r4, r4, r2
   d9e66:	d909      	bls.n	d9e7c <__udivmoddi4+0x19c>
   d9e68:	18fb      	adds	r3, r7, r3
   d9e6a:	f106 3cff 	add.w	ip, r6, #4294967295
   d9e6e:	f080 808d 	bcs.w	d9f8c <__udivmoddi4+0x2ac>
   d9e72:	4299      	cmp	r1, r3
   d9e74:	f240 808a 	bls.w	d9f8c <__udivmoddi4+0x2ac>
   d9e78:	3e02      	subs	r6, #2
   d9e7a:	443b      	add	r3, r7
   d9e7c:	1a5b      	subs	r3, r3, r1
   d9e7e:	b281      	uxth	r1, r0
   d9e80:	fbb3 f0fe 	udiv	r0, r3, lr
   d9e84:	fb0e 3310 	mls	r3, lr, r0, r3
   d9e88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d9e8c:	fb00 f308 	mul.w	r3, r0, r8
   d9e90:	428b      	cmp	r3, r1
   d9e92:	d907      	bls.n	d9ea4 <__udivmoddi4+0x1c4>
   d9e94:	1879      	adds	r1, r7, r1
   d9e96:	f100 3cff 	add.w	ip, r0, #4294967295
   d9e9a:	d273      	bcs.n	d9f84 <__udivmoddi4+0x2a4>
   d9e9c:	428b      	cmp	r3, r1
   d9e9e:	d971      	bls.n	d9f84 <__udivmoddi4+0x2a4>
   d9ea0:	3802      	subs	r0, #2
   d9ea2:	4439      	add	r1, r7
   d9ea4:	1acb      	subs	r3, r1, r3
   d9ea6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d9eaa:	e778      	b.n	d9d9e <__udivmoddi4+0xbe>
   d9eac:	f1c6 0c20 	rsb	ip, r6, #32
   d9eb0:	fa03 f406 	lsl.w	r4, r3, r6
   d9eb4:	fa22 f30c 	lsr.w	r3, r2, ip
   d9eb8:	431c      	orrs	r4, r3
   d9eba:	fa20 f70c 	lsr.w	r7, r0, ip
   d9ebe:	fa01 f306 	lsl.w	r3, r1, r6
   d9ec2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d9ec6:	fa21 f10c 	lsr.w	r1, r1, ip
   d9eca:	431f      	orrs	r7, r3
   d9ecc:	0c3b      	lsrs	r3, r7, #16
   d9ece:	fbb1 f9fe 	udiv	r9, r1, lr
   d9ed2:	fa1f f884 	uxth.w	r8, r4
   d9ed6:	fb0e 1119 	mls	r1, lr, r9, r1
   d9eda:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d9ede:	fb09 fa08 	mul.w	sl, r9, r8
   d9ee2:	458a      	cmp	sl, r1
   d9ee4:	fa02 f206 	lsl.w	r2, r2, r6
   d9ee8:	fa00 f306 	lsl.w	r3, r0, r6
   d9eec:	d908      	bls.n	d9f00 <__udivmoddi4+0x220>
   d9eee:	1861      	adds	r1, r4, r1
   d9ef0:	f109 30ff 	add.w	r0, r9, #4294967295
   d9ef4:	d248      	bcs.n	d9f88 <__udivmoddi4+0x2a8>
   d9ef6:	458a      	cmp	sl, r1
   d9ef8:	d946      	bls.n	d9f88 <__udivmoddi4+0x2a8>
   d9efa:	f1a9 0902 	sub.w	r9, r9, #2
   d9efe:	4421      	add	r1, r4
   d9f00:	eba1 010a 	sub.w	r1, r1, sl
   d9f04:	b2bf      	uxth	r7, r7
   d9f06:	fbb1 f0fe 	udiv	r0, r1, lr
   d9f0a:	fb0e 1110 	mls	r1, lr, r0, r1
   d9f0e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d9f12:	fb00 f808 	mul.w	r8, r0, r8
   d9f16:	45b8      	cmp	r8, r7
   d9f18:	d907      	bls.n	d9f2a <__udivmoddi4+0x24a>
   d9f1a:	19e7      	adds	r7, r4, r7
   d9f1c:	f100 31ff 	add.w	r1, r0, #4294967295
   d9f20:	d22e      	bcs.n	d9f80 <__udivmoddi4+0x2a0>
   d9f22:	45b8      	cmp	r8, r7
   d9f24:	d92c      	bls.n	d9f80 <__udivmoddi4+0x2a0>
   d9f26:	3802      	subs	r0, #2
   d9f28:	4427      	add	r7, r4
   d9f2a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d9f2e:	eba7 0708 	sub.w	r7, r7, r8
   d9f32:	fba0 8902 	umull	r8, r9, r0, r2
   d9f36:	454f      	cmp	r7, r9
   d9f38:	46c6      	mov	lr, r8
   d9f3a:	4649      	mov	r1, r9
   d9f3c:	d31a      	bcc.n	d9f74 <__udivmoddi4+0x294>
   d9f3e:	d017      	beq.n	d9f70 <__udivmoddi4+0x290>
   d9f40:	b15d      	cbz	r5, d9f5a <__udivmoddi4+0x27a>
   d9f42:	ebb3 020e 	subs.w	r2, r3, lr
   d9f46:	eb67 0701 	sbc.w	r7, r7, r1
   d9f4a:	fa07 fc0c 	lsl.w	ip, r7, ip
   d9f4e:	40f2      	lsrs	r2, r6
   d9f50:	ea4c 0202 	orr.w	r2, ip, r2
   d9f54:	40f7      	lsrs	r7, r6
   d9f56:	e9c5 2700 	strd	r2, r7, [r5]
   d9f5a:	2600      	movs	r6, #0
   d9f5c:	4631      	mov	r1, r6
   d9f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9f62:	462e      	mov	r6, r5
   d9f64:	4628      	mov	r0, r5
   d9f66:	e70b      	b.n	d9d80 <__udivmoddi4+0xa0>
   d9f68:	4606      	mov	r6, r0
   d9f6a:	e6e9      	b.n	d9d40 <__udivmoddi4+0x60>
   d9f6c:	4618      	mov	r0, r3
   d9f6e:	e6fd      	b.n	d9d6c <__udivmoddi4+0x8c>
   d9f70:	4543      	cmp	r3, r8
   d9f72:	d2e5      	bcs.n	d9f40 <__udivmoddi4+0x260>
   d9f74:	ebb8 0e02 	subs.w	lr, r8, r2
   d9f78:	eb69 0104 	sbc.w	r1, r9, r4
   d9f7c:	3801      	subs	r0, #1
   d9f7e:	e7df      	b.n	d9f40 <__udivmoddi4+0x260>
   d9f80:	4608      	mov	r0, r1
   d9f82:	e7d2      	b.n	d9f2a <__udivmoddi4+0x24a>
   d9f84:	4660      	mov	r0, ip
   d9f86:	e78d      	b.n	d9ea4 <__udivmoddi4+0x1c4>
   d9f88:	4681      	mov	r9, r0
   d9f8a:	e7b9      	b.n	d9f00 <__udivmoddi4+0x220>
   d9f8c:	4666      	mov	r6, ip
   d9f8e:	e775      	b.n	d9e7c <__udivmoddi4+0x19c>
   d9f90:	4630      	mov	r0, r6
   d9f92:	e74a      	b.n	d9e2a <__udivmoddi4+0x14a>
   d9f94:	f1ac 0c02 	sub.w	ip, ip, #2
   d9f98:	4439      	add	r1, r7
   d9f9a:	e713      	b.n	d9dc4 <__udivmoddi4+0xe4>
   d9f9c:	3802      	subs	r0, #2
   d9f9e:	443c      	add	r4, r7
   d9fa0:	e724      	b.n	d9dec <__udivmoddi4+0x10c>
   d9fa2:	bf00      	nop

000d9fa4 <__aeabi_idiv0>:
   d9fa4:	4770      	bx	lr
   d9fa6:	bf00      	nop

000d9fa8 <atexit>:
   d9fa8:	2300      	movs	r3, #0
   d9faa:	4601      	mov	r1, r0
   d9fac:	461a      	mov	r2, r3
   d9fae:	4618      	mov	r0, r3
   d9fb0:	f000 b856 	b.w	da060 <__register_exitproc>

000d9fb4 <memcpy>:
   d9fb4:	440a      	add	r2, r1
   d9fb6:	4291      	cmp	r1, r2
   d9fb8:	f100 33ff 	add.w	r3, r0, #4294967295
   d9fbc:	d100      	bne.n	d9fc0 <memcpy+0xc>
   d9fbe:	4770      	bx	lr
   d9fc0:	b510      	push	{r4, lr}
   d9fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9fca:	4291      	cmp	r1, r2
   d9fcc:	d1f9      	bne.n	d9fc2 <memcpy+0xe>
   d9fce:	bd10      	pop	{r4, pc}

000d9fd0 <memset>:
   d9fd0:	4402      	add	r2, r0
   d9fd2:	4603      	mov	r3, r0
   d9fd4:	4293      	cmp	r3, r2
   d9fd6:	d100      	bne.n	d9fda <memset+0xa>
   d9fd8:	4770      	bx	lr
   d9fda:	f803 1b01 	strb.w	r1, [r3], #1
   d9fde:	e7f9      	b.n	d9fd4 <memset+0x4>

000d9fe0 <srand>:
   d9fe0:	b538      	push	{r3, r4, r5, lr}
   d9fe2:	4b0d      	ldr	r3, [pc, #52]	; (da018 <srand+0x38>)
   d9fe4:	681d      	ldr	r5, [r3, #0]
   d9fe6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9fe8:	4604      	mov	r4, r0
   d9fea:	b97b      	cbnz	r3, da00c <srand+0x2c>
   d9fec:	2018      	movs	r0, #24
   d9fee:	f7fc ff59 	bl	d6ea4 <malloc>
   d9ff2:	4a0a      	ldr	r2, [pc, #40]	; (da01c <srand+0x3c>)
   d9ff4:	4b0a      	ldr	r3, [pc, #40]	; (da020 <srand+0x40>)
   d9ff6:	63a8      	str	r0, [r5, #56]	; 0x38
   d9ff8:	e9c0 2300 	strd	r2, r3, [r0]
   d9ffc:	4b09      	ldr	r3, [pc, #36]	; (da024 <srand+0x44>)
   d9ffe:	6083      	str	r3, [r0, #8]
   da000:	230b      	movs	r3, #11
   da002:	8183      	strh	r3, [r0, #12]
   da004:	2201      	movs	r2, #1
   da006:	2300      	movs	r3, #0
   da008:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da00c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da00e:	2200      	movs	r2, #0
   da010:	611c      	str	r4, [r3, #16]
   da012:	615a      	str	r2, [r3, #20]
   da014:	bd38      	pop	{r3, r4, r5, pc}
   da016:	bf00      	nop
   da018:	2003e44c 	.word	0x2003e44c
   da01c:	abcd330e 	.word	0xabcd330e
   da020:	e66d1234 	.word	0xe66d1234
   da024:	0005deec 	.word	0x0005deec

000da028 <strlen>:
   da028:	4603      	mov	r3, r0
   da02a:	f813 2b01 	ldrb.w	r2, [r3], #1
   da02e:	2a00      	cmp	r2, #0
   da030:	d1fb      	bne.n	da02a <strlen+0x2>
   da032:	1a18      	subs	r0, r3, r0
   da034:	3801      	subs	r0, #1
   da036:	4770      	bx	lr

000da038 <strncpy>:
   da038:	b510      	push	{r4, lr}
   da03a:	3901      	subs	r1, #1
   da03c:	4603      	mov	r3, r0
   da03e:	b132      	cbz	r2, da04e <strncpy+0x16>
   da040:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da044:	f803 4b01 	strb.w	r4, [r3], #1
   da048:	3a01      	subs	r2, #1
   da04a:	2c00      	cmp	r4, #0
   da04c:	d1f7      	bne.n	da03e <strncpy+0x6>
   da04e:	441a      	add	r2, r3
   da050:	2100      	movs	r1, #0
   da052:	4293      	cmp	r3, r2
   da054:	d100      	bne.n	da058 <strncpy+0x20>
   da056:	bd10      	pop	{r4, pc}
   da058:	f803 1b01 	strb.w	r1, [r3], #1
   da05c:	e7f9      	b.n	da052 <strncpy+0x1a>
	...

000da060 <__register_exitproc>:
   da060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da064:	f8df 80b8 	ldr.w	r8, [pc, #184]	; da120 <__register_exitproc+0xc0>
   da068:	4606      	mov	r6, r0
   da06a:	f8d8 0000 	ldr.w	r0, [r8]
   da06e:	461f      	mov	r7, r3
   da070:	460d      	mov	r5, r1
   da072:	4691      	mov	r9, r2
   da074:	f000 f856 	bl	da124 <__retarget_lock_acquire_recursive>
   da078:	4b25      	ldr	r3, [pc, #148]	; (da110 <__register_exitproc+0xb0>)
   da07a:	681c      	ldr	r4, [r3, #0]
   da07c:	b934      	cbnz	r4, da08c <__register_exitproc+0x2c>
   da07e:	4c25      	ldr	r4, [pc, #148]	; (da114 <__register_exitproc+0xb4>)
   da080:	601c      	str	r4, [r3, #0]
   da082:	4b25      	ldr	r3, [pc, #148]	; (da118 <__register_exitproc+0xb8>)
   da084:	b113      	cbz	r3, da08c <__register_exitproc+0x2c>
   da086:	681b      	ldr	r3, [r3, #0]
   da088:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   da08c:	6863      	ldr	r3, [r4, #4]
   da08e:	2b1f      	cmp	r3, #31
   da090:	dd07      	ble.n	da0a2 <__register_exitproc+0x42>
   da092:	f8d8 0000 	ldr.w	r0, [r8]
   da096:	f000 f847 	bl	da128 <__retarget_lock_release_recursive>
   da09a:	f04f 30ff 	mov.w	r0, #4294967295
   da09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da0a2:	b34e      	cbz	r6, da0f8 <__register_exitproc+0x98>
   da0a4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   da0a8:	b988      	cbnz	r0, da0ce <__register_exitproc+0x6e>
   da0aa:	4b1c      	ldr	r3, [pc, #112]	; (da11c <__register_exitproc+0xbc>)
   da0ac:	b923      	cbnz	r3, da0b8 <__register_exitproc+0x58>
   da0ae:	f8d8 0000 	ldr.w	r0, [r8]
   da0b2:	f000 f838 	bl	da126 <__retarget_lock_release>
   da0b6:	e7f0      	b.n	da09a <__register_exitproc+0x3a>
   da0b8:	f44f 7084 	mov.w	r0, #264	; 0x108
   da0bc:	f7fc fef2 	bl	d6ea4 <malloc>
   da0c0:	2800      	cmp	r0, #0
   da0c2:	d0f4      	beq.n	da0ae <__register_exitproc+0x4e>
   da0c4:	2300      	movs	r3, #0
   da0c6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   da0ca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   da0ce:	6863      	ldr	r3, [r4, #4]
   da0d0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   da0d4:	2201      	movs	r2, #1
   da0d6:	409a      	lsls	r2, r3
   da0d8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   da0dc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   da0e0:	4313      	orrs	r3, r2
   da0e2:	2e02      	cmp	r6, #2
   da0e4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   da0e8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   da0ec:	bf02      	ittt	eq
   da0ee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   da0f2:	431a      	orreq	r2, r3
   da0f4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   da0f8:	6863      	ldr	r3, [r4, #4]
   da0fa:	f8d8 0000 	ldr.w	r0, [r8]
   da0fe:	1c5a      	adds	r2, r3, #1
   da100:	3302      	adds	r3, #2
   da102:	6062      	str	r2, [r4, #4]
   da104:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   da108:	f000 f80e 	bl	da128 <__retarget_lock_release_recursive>
   da10c:	2000      	movs	r0, #0
   da10e:	e7c6      	b.n	da09e <__register_exitproc+0x3e>
   da110:	2003e7e0 	.word	0x2003e7e0
   da114:	2003e754 	.word	0x2003e754
   da118:	00000000 	.word	0x00000000
   da11c:	000d6ea5 	.word	0x000d6ea5
   da120:	2003e4b0 	.word	0x2003e4b0

000da124 <__retarget_lock_acquire_recursive>:
   da124:	4770      	bx	lr

000da126 <__retarget_lock_release>:
   da126:	4770      	bx	lr

000da128 <__retarget_lock_release_recursive>:
   da128:	4770      	bx	lr

000da12a <link_code_end>:
	...

000da12c <dynalib_user>:
   da12c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   da13c:	0000 0000 6554 706d 7265 7461 7275 2065     ....Temperature 
   da14c:	203d 2000 0046 7250 7365 7573 6572 3d20     = . F.Pressure =
   da15c:	0020 6d20 486d 0067 7041 7270 786f 202e      . mmHg.Approx. 
   da16c:	6c41 6974 7574 6564 3d20 0020 6d20 4800     Altitude = . m.H
   da17c:	6d75 6469 7469 2079 203d 2000 0025 2d2d     umidity = . %.--
   da18c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   da19c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   da1ac:	2d2d 5300 6e65 6f73 3a72 2020 2020 2020     --.Sensor:      
   da1bc:	0020 7244 7669 7265 5620 7265 203a 2020      .Driver Ver:   
   da1cc:	5500 696e 7571 2065 4449 203a 2020 0020     .Unique ID:    .
   da1dc:	614d 2078 6156 756c 3a65 2020 2020 2000     Max Value:    . 
   da1ec:	7878 0078 694d 206e 6156 756c 3a65 2020     xxx.Min Value:  
   da1fc:	2020 5200 7365 6c6f 7475 6f69 3a6e 2020       .Resolution:  
   da20c:	0020 6554 706d 202e 203d 2000 b0c2 0046      .Temp. = . ..F.
   da21c:	7250 7365 2e73 3d20 0020 614d 7272 6569     Press. = .Marrie
   da22c:	6920 2073 7267 6165 2174 4300 6d6f 6170      is great!.Compa
   da23c:	7373 6820 6165 6964 676e 4100 4300 4f00     ss heading.A.C.O
   da24c:	6972 6e65 6174 6974 6e6f 203a 2c00 0020     rientation: ., .
   da25c:	7551 7461 7265 696e 6e6f 203a 4300 6c61     Quaternion: .Cal
   da26c:	6269 6172 6974 6e6f 203a 0a00 000a 3a58     ibration: ....X:
   da27c:	0020 5909 203a 0900 3a5a 0020 6f63 706d      ..Y: ..Z: .comp
   da28c:	7361 2073 6568 6461 6e69 3a67 2020 5300     ass heading:  .S
   da29c:	6163 6e6e 6e69 2e67 2e2e 4900 4332 6420     canning....I2C d
   da2ac:	7665 6369 2065 6f66 6e75 2064 7461 6120     evice found at a
   da2bc:	6464 6572 7373 3020 0078 2020 0021 6e55     ddress 0x.  !.Un
   da2cc:	6e6b 776f 206e 7265 6f72 2072 7461 6120     known error at a
   da2dc:	6464 6572 7373 3020 0078 6f4e 4920 4332     ddress 0x.No I2C
   da2ec:	6420 7665 6369 7365 6620 756f 646e 000a      devices found..
   da2fc:	6f64 656e 000a 6f46 6e75 2064 3249 2043     done..Found I2C 
   da30c:	4545 5250 4d4f 4900 4332 4520 5045 4f52     EEPROM.I2C EEPRO
   da31c:	204d 6f6e 2074 6469 6e65 6974 6966 6465     M not identified
   da32c:	2e20 2e2e 6320 6568 6b63 7920 756f 2072      ... check your 
   da33c:	6f63 6e6e 6365 6974 6e6f 3f73 0a0d 4200     connections?...B
   da34c:	454d 3832 2030 6574 7473 3100 3832 3678     ME280 test.128x6
   da35c:	2034 4c4f 4445 4620 6165 6874 7265 6957     4 OLED FeatherWi
   da36c:	676e 7420 7365 0074 4c4f 4445 6220 6765     ng test.OLED beg
   da37c:	6e75 4200 7475 6f74 206e 6574 7473 4300     un.Button test.C
   da38c:	6e6f 656e 7463 6e69 2067 6f74 5320 4953     onnecting to SSI
   da39c:	0a44 6127 6164 7266 6975 2774 003a 6f63     D.'adafruit':.co
   da3ac:	6e6e 6365 6574 2164 4900 3a50 3120 2e30     nnected!.IP: 10.
   da3bc:	2e30 2e31 3332 5300 6e65 6964 676e 7620     0.1.23.Sending v
   da3cc:	6c61 2320 0030 6f43 6c75 2064 6f6e 2074     al #0.Could not 
   da3dc:	6966 646e 6120 7620 6c61 6469 4220 454d     find a valid BME
   da3ec:	3832 2030 6573 736e 726f 202c 6863 6365     280 sensor, chec
   da3fc:	206b 6977 6972 676e 202c 6461 7264 7365     k wiring, addres
   da40c:	2c73 7320 6e65 6f73 2072 4449 0021 6553     s, sensor ID!.Se
   da41c:	736e 726f 4449 7720 7361 203a 7830 2000     nsorID was: 0x. 
   da42c:	2020 2020 2020 4920 2044 666f 3020 4678            ID of 0xF
   da43c:	2046 7270 626f 6261 796c 6d20 6165 736e     F probably means
   da44c:	6120 6220 6461 6120 6464 6572 7373 202c      a bad address, 
   da45c:	2061 4d42 2050 3831 2030 726f 4220 504d     a BMP 180 or BMP
   da46c:	3020 3538 000a 2020 4920 2044 666f 3020      085..   ID of 0
   da47c:	3578 2d36 7830 3835 7220 7065 6572 6573     x56-0x58 represe
   da48c:	746e 2073 2061 4d42 2050 3832 2c30 000a     nts a BMP 280,..
   da49c:	2020 2020 2020 2020 4449 6f20 2066 7830             ID of 0x
   da4ac:	3036 7220 7065 6572 6573 746e 2073 2061     60 represents a 
   da4bc:	4d42 2045 3832 2e30 000a 2020 2020 2020     BME 280...      
   da4cc:	2020 4449 6f20 2066 7830 3136 7220 7065       ID of 0x61 rep
   da4dc:	6572 6573 746e 2073 2061 4d42 2045 3836     resents a BME 68
   da4ec:	2e30 000a 6557 5362 7265 6169 206c 4433     0...WebSerial 3D
   da4fc:	4620 7269 776d 7261 0065 6f4f 706f 2c73      Firmware.Ooops,
   da50c:	6e20 206f 4e42 304f 3535 6420 7465 6365      no BNO055 detec
   da51c:	6574 2064 2e2e 202e 6843 6365 206b 6f79     ted ... Check yo
   da52c:	7275 7720 7269 6e69 2067 726f 4920 4332     ur wiring or I2C
   da53c:	4120 4444 2152 6400 6665 7561 746c 0020      ADDR!.default .
   da54c:	534d 0042 534c 0042 533c 4950 6553 7474     MSB.LSB.<SPISett
   da55c:	6e69 7367 6420 6665 7561 746c 003e 533c     ings default>.<S
   da56c:	4950 6553 7474 6e69 7367 2520 2573 2075     PISettings %s%u 
   da57c:	7325 4d20 444f 2545 3e75 0000               %s MODE%u>..

000da588 <_ZTVN8particle11SPISettingsE>:
	...
   da590:	4ae5 000d 4ab9 000d 4abb 000d 4e42 304f     .J...J...J..BNO0
   da5a0:	3535 0000                                   55..

000da5a4 <_ZTV15Adafruit_BNO055>:
	...
   da5ac:	5829 000d 586d 000d 5827 000d 5bd5 000d     )X..mX..'X...[..
   da5bc:	582d 000d                                   -X..

000da5c0 <_ZTV17Adafruit_GrayOLED>:
	...
   da5d0:	6649 000d 7129 000d 5c27 000d 6051 000d     If..)q..'\..Q`..
   da5e0:	6053 000d 6085 000d 6061 000d 6073 000d     S`...`..a`..s`..
   da5f0:	5f95 000d 6051 000d 627d 000d 5e23 000d     ._..Q`..}b..#^..
   da600:	609d 000d 60db 000d 6115 000d 615b 000d     .`...`...a..[a..
   da610:	61f9 000d 6177 000d 40a5 000d               .a..wa...@..

000da61c <_ZL4font>:
   da61c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   da62c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   da63c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   da64c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   da65c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   da66c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   da67c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   da68c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   da69c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   da6ac:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   da6bc:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   da6cc:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   da6dc:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   da6ec:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   da6fc:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   da70c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   da71c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   da72c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   da73c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   da74c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   da75c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   da76c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   da77c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   da78c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   da79c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   da7ac:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   da7bc:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   da7cc:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   da7dc:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   da7ec:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   da7fc:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   da80c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   da81c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   da82c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   da83c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   da84c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   da85c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   da86c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   da87c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   da88c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   da89c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   da8ac:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   da8bc:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   da8cc:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   da8dc:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   da8ec:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   da8fc:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   da90c:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   da91c:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   da92c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   da93c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   da94c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   da95c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   da96c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   da97c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   da98c:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   da99c:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   da9ac:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   da9bc:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   da9cc:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   da9dc:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   da9ec:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   da9fc:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   daa0c:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   daa1c:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   daa2c:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   daa3c:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   daa4c:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   daa5c:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   daa6c:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   daa7c:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   daa8c:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   daa9c:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   daaac:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   daabc:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   daacc:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   daadc:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   daaec:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   daafc:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   dab0c:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000dab1c <_ZTV12Adafruit_GFX>:
	...
   dab2c:	6649 000d 7129 000d 40a5 000d 6051 000d     If..)q...@..Q`..
   dab3c:	6053 000d 6085 000d 6061 000d 6073 000d     S`...`..a`..s`..
   dab4c:	5f95 000d 6051 000d 627d 000d 61f7 000d     ._..Q`..}b...a..
   dab5c:	609d 000d 60db 000d 6115 000d 615b 000d     .`...`...a..[a..
   dab6c:	61f9 000d 6177 000d                         .a..wa..

000dab74 <_ZTV15Adafruit_SH110X>:
	...
   dab7c:	40a5 000d 40a5 000d 6649 000d 7129 000d     .@...@..If..)q..
   dab8c:	5c27 000d 6051 000d 6053 000d 6085 000d     '\..Q`..S`...`..
   dab9c:	6061 000d 6073 000d 5f95 000d 6051 000d     a`..s`..._..Q`..
   dabac:	627d 000d 5e23 000d 609d 000d 60db 000d     }b..#^...`...`..
   dabbc:	6115 000d 615b 000d 61f9 000d 6177 000d     .a..[a...a..wa..
   dabcc:	6757 000d                                   Wg..

000dabd0 <_ZL12splash2_data>:
   dabd0:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   dabe0:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   dabf0:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   dac0c:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   dac1c:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   dac2c:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   dac3c:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   dac4c:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   dac5c:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   dac6c:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   dac7c:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   dac8c:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   dac9c:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   dacac:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   dacbc:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   daccc:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   dacdc:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   dacec:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   dacfc:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   dad0c:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   dad1c:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   dad2c:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   dad3c:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   dad4c:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   dad64:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   dad74:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   dad84:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   dad94:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   dada4:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000dadb0 <_ZTV15Adafruit_SH1107>:
	...
   dadb8:	68f5 000d 6909 000d 6649 000d 7129 000d     .h...i..If..)q..
   dadc8:	5c27 000d 6051 000d 6053 000d 6085 000d     '\..Q`..S`...`..
   dadd8:	6061 000d 6073 000d 5f95 000d 6051 000d     a`..s`..._..Q`..
   dade8:	627d 000d 5e23 000d 609d 000d 60db 000d     }b..#^...`...`..
   dadf8:	6115 000d 615b 000d 61f9 000d 6177 000d     .a..[a...a..wa..
   dae08:	6757 000d                                   Wg..

000dae0c <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   dae0c:	00d3 7fa8                                   ....

000dae10 <_ZZN15Adafruit_SH11075beginEhbE4init>:
   dae10:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
   dae20:	35db 3fa8 a6a4 0000                         .5.?....

000dae28 <_ZTVN5spark13EthernetClassE>:
	...
   dae30:	6f53 000d 6f49 000d 6f3f 000d 6f35 000d     So..Io..?o..5o..
   dae40:	6f29 000d 6f1d 000d 7a47 000d 7a4f 000d     )o...o..Gz..Oz..
   dae50:	6f11 000d 6f09 000d 6eff 000d 6ef5 000d     .o...o...n...n..
   dae60:	7a7f 000d                                   .z..

000dae64 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dae64:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   dae74:	766f 0066 7061 0070 5925 252d 2d6d 6425     ovf.app.%Y-%m-%d
   dae84:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   dae94:	6d69 0065                                   ime.

000dae98 <_ZTV9IPAddress>:
	...
   daea0:	7595 000d 7585 000d 7587 000d               .u...u...u..

000daeac <_ZTV9USBSerial>:
	...
   daeb4:	766d 000d 76d5 000d 76ab 000d 7129 000d     mv...v...v..)q..
   daec4:	769d 000d 766f 000d 767f 000d 76cf 000d     .v..ov...v...v..
   daed4:	768f 000d 7667 000d                         .v..gv..

000daedc <_ZTVN5spark13CellularClassE>:
	...
   daee4:	77db 000d 77d1 000d 77c7 000d 777d 000d     .w...w...w..}w..
   daef4:	77bb 000d 77af 000d 7a47 000d 7a4f 000d     .w...w..Gz..Oz..
   daf04:	77a3 000d 779b 000d 7791 000d 7787 000d     .w...w...w...w..
   daf14:	7a7f 000d                                   .z..

000daf18 <_ZTV11USARTSerial>:
	...
   daf20:	7815 000d 7883 000d 785b 000d 7129 000d     .x...x..[x..)q..
   daf30:	782b 000d 7847 000d 7839 000d 7855 000d     +x..Gx..9x..Ux..
   daf40:	7817 000d 781d 000d                         .x...x..

000daf48 <_ZTV7TwoWire>:
	...
   daf50:	7909 000d 7953 000d 792b 000d 790b 000d     .y..Sy..+y...y..
   daf60:	7933 000d 793b 000d 7943 000d 794b 000d     3y..;y..Cy..Ky..

000daf70 <_ZTVN5spark12NetworkClassE>:
	...
   daf78:	7a07 000d 7a11 000d 7a1b 000d 7a25 000d     .z...z...z..%z..
   daf88:	7a2f 000d 7a3b 000d 7a47 000d 7a4f 000d     /z..;z..Gz..Oz..
   daf98:	7a57 000d 7a63 000d 7a6b 000d 7a75 000d     Wz..cz..kz..uz..
   dafa8:	7a7f 000d                                   .z..

000dafac <_ZSt7nothrow>:
   dafac:	0000 0000 6f70 0077 0000 0000               ....pow.....

000dafb8 <TWO52>:
   dafb8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000dafc8 <link_const_variable_data_end>:
   dafc8:	000d4319 	.word	0x000d4319
   dafcc:	000d6f5d 	.word	0x000d6f5d
   dafd0:	000d70f5 	.word	0x000d70f5
   dafd4:	000d7119 	.word	0x000d7119
   dafd8:	000d7415 	.word	0x000d7415
   dafdc:	000d7425 	.word	0x000d7425
   dafe0:	000d7441 	.word	0x000d7441
   dafe4:	000d77e5 	.word	0x000d77e5
   dafe8:	000d7b51 	.word	0x000d7b51

000dafec <link_constructors_end>:
   dafec:	00000000 	.word	0x00000000
