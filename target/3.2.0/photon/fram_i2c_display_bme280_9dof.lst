
z:/Personal/Electronics/particle/fram_i2c_display_bme280_9dof/target/3.2.0/photon/fram_i2c_display_bme280_9dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a850  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080aa870  080aa870  0001a870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080aa878  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  080aa87c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000634  20000078  20000078  00040078  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080aa8f4  080aa8f4  0003a8f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080aa91c  080aa91c  0003a91c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012f4cb  00000000  00000000  0003a920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019507  00000000  00000000  00169deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00029345  00000000  00000000  001832f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b08  00000000  00000000  001ac637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00005d28  00000000  00000000  001af13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035488  00000000  00000000  001b4e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004ad7f  00000000  00000000  001ea2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ba328  00000000  00000000  0023506e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008018  00000000  00000000  002ef398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f008 ffcb 	bl	80a8fcc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f008 ffd3 	bl	80a8fe8 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080aa87c 	.word	0x080aa87c
 80a0050:	20000078 	.word	0x20000078
 80a0054:	20000078 	.word	0x20000078
 80a0058:	200006a9 	.word	0x200006a9
 80a005c:	200006a9 	.word	0x200006a9

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f004 fe39 	bl	80a4cd8 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42ac      	cmp	r4, r5
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080aa844 	.word	0x080aa844
 80a0084:	080aa864 	.word	0x080aa864

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f001 ba1a 	b.w	80a14c0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 ffcd 	bl	80a102c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f004 bdd7 	b.w	80a4c48 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f004 ba05 	b.w	80a44a8 <malloc>

080a009e <_Znaj>:
 80a009e:	f004 ba03 	b.w	80a44a8 <malloc>

080a00a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a00a2:	f004 ba09 	b.w	80a44b8 <free>
	...

080a00a8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ae:	4a02      	ldr	r2, [pc, #8]	; (80a00b8 <__cxa_pure_virtual+0x10>)
 80a00b0:	f004 f93e 	bl	80a4330 <panic_>
  while (1);
 80a00b4:	e7fe      	b.n	80a00b4 <__cxa_pure_virtual+0xc>
 80a00b6:	bf00      	nop
 80a00b8:	080a4019 	.word	0x080a4019

080a00bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00bc:	7800      	ldrb	r0, [r0, #0]
 80a00be:	fab0 f080 	clz	r0, r0
 80a00c2:	0940      	lsrs	r0, r0, #5
 80a00c4:	4770      	bx	lr

080a00c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c6:	2301      	movs	r3, #1
 80a00c8:	7003      	strb	r3, [r0, #0]
 80a00ca:	4770      	bx	lr

080a00cc <_Z12isr_rotationv>:
    Serial.print(calibData.mag_radius);
}


// This is the function that the interrupt calls to increment the rotation count
void isr_rotation () {
 80a00cc:	b510      	push	{r4, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a00ce:	f003 ffab 	bl	80a4028 <HAL_Timer_Get_Milli_Seconds>
//a debounce time of 22 ms is equivalent to wind of 100 mph.
if ((millis() - ContactBounceTime) > 22 ) { // debounce the switch contact.
 80a00d2:	4c06      	ldr	r4, [pc, #24]	; (80a00ec <_Z12isr_rotationv+0x20>)
 80a00d4:	6823      	ldr	r3, [r4, #0]
 80a00d6:	1ac0      	subs	r0, r0, r3
 80a00d8:	2816      	cmp	r0, #22
 80a00da:	d906      	bls.n	80a00ea <_Z12isr_rotationv+0x1e>
Rotations++;
 80a00dc:	4a04      	ldr	r2, [pc, #16]	; (80a00f0 <_Z12isr_rotationv+0x24>)
 80a00de:	6813      	ldr	r3, [r2, #0]
 80a00e0:	3301      	adds	r3, #1
 80a00e2:	6013      	str	r3, [r2, #0]
 80a00e4:	f003 ffa0 	bl	80a4028 <HAL_Timer_Get_Milli_Seconds>
ContactBounceTime = millis();
 80a00e8:	6020      	str	r0, [r4, #0]
}

}
 80a00ea:	bd10      	pop	{r4, pc}
 80a00ec:	20000078 	.word	0x20000078
 80a00f0:	2000007c 	.word	0x2000007c

080a00f4 <_ZN5Print5printIsLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 80a00f4:	b570      	push	{r4, r5, r6, lr}
 80a00f6:	4606      	mov	r6, r0
 80a00f8:	460c      	mov	r4, r1
{
    if (base == 0) {
 80a00fa:	4615      	mov	r5, r2
 80a00fc:	b92a      	cbnz	r2, 80a010a <_ZN5Print5printIsLi0EEEjT_i.isra.0+0x16>
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
 80a00fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
 80a0102:	6803      	ldr	r3, [r0, #0]
 80a0104:	b2c9      	uxtb	r1, r1
 80a0106:	689b      	ldr	r3, [r3, #8]
 80a0108:	4718      	bx	r3
        if (n < 0 && base == 10) {
 80a010a:	2900      	cmp	r1, #0
 80a010c:	da0b      	bge.n	80a0126 <_ZN5Print5printIsLi0EEEjT_i.isra.0+0x32>
 80a010e:	2a0a      	cmp	r2, #10
 80a0110:	d109      	bne.n	80a0126 <_ZN5Print5printIsLi0EEEjT_i.isra.0+0x32>
            t = print('-');
 80a0112:	212d      	movs	r1, #45	; 0x2d
 80a0114:	f004 fb91 	bl	80a483a <_ZN5Print5printEc>
            val = -n;
 80a0118:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 80a011a:	4630      	mov	r0, r6
 80a011c:	b2ea      	uxtb	r2, r5
}
 80a011e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
 80a0122:	f004 bba5 	b.w	80a4870 <_ZN5Print11printNumberEmh>
            val = n;
 80a0126:	4621      	mov	r1, r4
 80a0128:	e7f7      	b.n	80a011a <_ZN5Print5printIsLi0EEEjT_i.isra.0+0x26>

080a012a <_ZN5Print5printIlLi0EEEjT_i.isra.0>:
size_t Print::print(T n, int base)
 80a012a:	b570      	push	{r4, r5, r6, lr}
 80a012c:	4606      	mov	r6, r0
 80a012e:	460c      	mov	r4, r1
    if (base == 0) {
 80a0130:	4615      	mov	r5, r2
 80a0132:	b92a      	cbnz	r2, 80a0140 <_ZN5Print5printIlLi0EEEjT_i.isra.0+0x16>
}
 80a0134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
 80a0138:	6803      	ldr	r3, [r0, #0]
 80a013a:	b2c9      	uxtb	r1, r1
 80a013c:	689b      	ldr	r3, [r3, #8]
 80a013e:	4718      	bx	r3
        if (n < 0 && base == 10) {
 80a0140:	2900      	cmp	r1, #0
 80a0142:	da0b      	bge.n	80a015c <_ZN5Print5printIlLi0EEEjT_i.isra.0+0x32>
 80a0144:	2a0a      	cmp	r2, #10
 80a0146:	d109      	bne.n	80a015c <_ZN5Print5printIlLi0EEEjT_i.isra.0+0x32>
            t = print('-');
 80a0148:	212d      	movs	r1, #45	; 0x2d
 80a014a:	f004 fb76 	bl	80a483a <_ZN5Print5printEc>
            val = -n;
 80a014e:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 80a0150:	4630      	mov	r0, r6
 80a0152:	b2ea      	uxtb	r2, r5
}
 80a0154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
 80a0158:	f004 bb8a 	b.w	80a4870 <_ZN5Print11printNumberEmh>
            val = n;
 80a015c:	4621      	mov	r1, r4
 80a015e:	e7f7      	b.n	80a0150 <_ZN5Print5printIlLi0EEEjT_i.isra.0+0x26>

080a0160 <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
 80a0160:	b912      	cbnz	r2, 80a0168 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
 80a0162:	6803      	ldr	r3, [r0, #0]
 80a0164:	689b      	ldr	r3, [r3, #8]
 80a0166:	4718      	bx	r3
        return printNumber(val, base) + t;
 80a0168:	b2d2      	uxtb	r2, r2
 80a016a:	f004 bb81 	b.w	80a4870 <_ZN5Print11printNumberEmh>

080a016e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
 80a016e:	b510      	push	{r4, lr}
 80a0170:	4604      	mov	r4, r0
        size_t n = print(b, base);
 80a0172:	f7ff fff5 	bl	80a0160 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
 80a0176:	4620      	mov	r0, r4
    }
 80a0178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
 80a017c:	f004 bb60 	b.w	80a4840 <_ZN5Print7printlnEv>

080a0180 <_ZN5Print7printlnImLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
 80a0180:	b510      	push	{r4, lr}
 80a0182:	4604      	mov	r4, r0
    if (base == 0) {
 80a0184:	b942      	cbnz	r2, 80a0198 <_ZN5Print7printlnImLi0EEEjT_i.isra.0+0x18>
        return write(n);
 80a0186:	6802      	ldr	r2, [r0, #0]
 80a0188:	b2c9      	uxtb	r1, r1
 80a018a:	6892      	ldr	r2, [r2, #8]
 80a018c:	4790      	blx	r2
        n += println();
 80a018e:	4620      	mov	r0, r4
    }
 80a0190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
 80a0194:	f004 bb54 	b.w	80a4840 <_ZN5Print7printlnEv>
        return printNumber(val, base) + t;
 80a0198:	b2d2      	uxtb	r2, r2
 80a019a:	f004 fb69 	bl	80a4870 <_ZN5Print11printNumberEmh>
 80a019e:	e7f6      	b.n	80a018e <_ZN5Print7printlnImLi0EEEjT_i.isra.0+0xe>

080a01a0 <_Z19displaySensorStatusv>:
    system_status = self_test_results = system_error = 0;
 80a01a0:	2300      	movs	r3, #0
{
 80a01a2:	b513      	push	{r0, r1, r4, lr}
    Serial.println("");
 80a01a4:	4c21      	ldr	r4, [pc, #132]	; (80a022c <_Z19displaySensorStatusv+0x8c>)
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
 80a01a6:	f10d 0206 	add.w	r2, sp, #6
 80a01aa:	f10d 0105 	add.w	r1, sp, #5
    system_status = self_test_results = system_error = 0;
 80a01ae:	f88d 3007 	strb.w	r3, [sp, #7]
 80a01b2:	f88d 3006 	strb.w	r3, [sp, #6]
 80a01b6:	f88d 3005 	strb.w	r3, [sp, #5]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
 80a01ba:	481d      	ldr	r0, [pc, #116]	; (80a0230 <_Z19displaySensorStatusv+0x90>)
 80a01bc:	f10d 0307 	add.w	r3, sp, #7
 80a01c0:	f002 fdfe 	bl	80a2dc0 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>
    Serial.println("");
 80a01c4:	f004 fe90 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a01c8:	4621      	mov	r1, r4
 80a01ca:	f004 fb45 	bl	80a4858 <_ZN5Print7printlnEPKc>
    Serial.print("System Status: 0x");
 80a01ce:	f004 fe8b 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a01d2:	4918      	ldr	r1, [pc, #96]	; (80a0234 <_Z19displaySensorStatusv+0x94>)
 80a01d4:	f004 fb2d 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.println(system_status, HEX);
 80a01d8:	f004 fe86 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a01dc:	2210      	movs	r2, #16
 80a01de:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80a01e2:	f7ff ffc4 	bl	80a016e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("Self Test:     0x");
 80a01e6:	f004 fe7f 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a01ea:	4913      	ldr	r1, [pc, #76]	; (80a0238 <_Z19displaySensorStatusv+0x98>)
 80a01ec:	f004 fb21 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.println(self_test_results, HEX);
 80a01f0:	f004 fe7a 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a01f4:	2210      	movs	r2, #16
 80a01f6:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80a01fa:	f7ff ffb8 	bl	80a016e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("System Error:  0x");
 80a01fe:	f004 fe73 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0202:	490e      	ldr	r1, [pc, #56]	; (80a023c <_Z19displaySensorStatusv+0x9c>)
 80a0204:	f004 fb15 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.println(system_error, HEX);
 80a0208:	f004 fe6e 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a020c:	2210      	movs	r2, #16
 80a020e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a0212:	f7ff ffac 	bl	80a016e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.println("");
 80a0216:	f004 fe67 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a021a:	4621      	mov	r1, r4
 80a021c:	f004 fb1c 	bl	80a4858 <_ZN5Print7printlnEPKc>
    delay(500);
 80a0220:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0224:	f004 fcd0 	bl	80a4bc8 <delay>
}
 80a0228:	b002      	add	sp, #8
 80a022a:	bd10      	pop	{r4, pc}
 80a022c:	080a93e5 	.word	0x080a93e5
 80a0230:	20000100 	.word	0x20000100
 80a0234:	080a9180 	.word	0x080a9180
 80a0238:	080a9192 	.word	0x080a9192
 80a023c:	080a91a4 	.word	0x080a91a4

080a0240 <_Z15read_bme_valuesRfS_S_S_>:
void read_bme_values(float& bme_temperature, float& bme_pressure, float& bme_humidity, float& bme_altitude){
 80a0240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
bme_temperature = bme.readTemperature()*1.8F + 32.;
 80a0244:	4c12      	ldr	r4, [pc, #72]	; (80a0290 <_Z15read_bme_valuesRfS_S_S_+0x50>)
void read_bme_values(float& bme_temperature, float& bme_pressure, float& bme_humidity, float& bme_altitude){
 80a0246:	4680      	mov	r8, r0
bme_temperature = bme.readTemperature()*1.8F + 32.;
 80a0248:	4620      	mov	r0, r4
void read_bme_values(float& bme_temperature, float& bme_pressure, float& bme_humidity, float& bme_altitude){
 80a024a:	4616      	mov	r6, r2
 80a024c:	461d      	mov	r5, r3
 80a024e:	460f      	mov	r7, r1
bme_temperature = bme.readTemperature()*1.8F + 32.;
 80a0250:	f001 feaa 	bl	80a1fa8 <_ZN15Adafruit_BME28015readTemperatureEv>
 80a0254:	490f      	ldr	r1, [pc, #60]	; (80a0294 <_Z15read_bme_valuesRfS_S_S_+0x54>)
 80a0256:	f008 faf3 	bl	80a8840 <__aeabi_fmul>
 80a025a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80a025e:	f008 f9e7 	bl	80a8630 <__addsf3>
 80a0262:	f8c8 0000 	str.w	r0, [r8]
bme_pressure = bme.readPressure() / 101325.0F * 760.0F;
 80a0266:	4620      	mov	r0, r4
 80a0268:	f001 ff14 	bl	80a2094 <_ZN15Adafruit_BME28012readPressureEv>
 80a026c:	490a      	ldr	r1, [pc, #40]	; (80a0298 <_Z15read_bme_valuesRfS_S_S_+0x58>)
 80a026e:	f008 fb9b 	bl	80a89a8 <__aeabi_fdiv>
 80a0272:	490a      	ldr	r1, [pc, #40]	; (80a029c <_Z15read_bme_valuesRfS_S_S_+0x5c>)
 80a0274:	f008 fae4 	bl	80a8840 <__aeabi_fmul>
 80a0278:	6038      	str	r0, [r7, #0]
bme_humidity = bme.readHumidity();
 80a027a:	4620      	mov	r0, r4
 80a027c:	f001 fec0 	bl	80a2000 <_ZN15Adafruit_BME28012readHumidityEv>
bme_altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
 80a0280:	4907      	ldr	r1, [pc, #28]	; (80a02a0 <_Z15read_bme_valuesRfS_S_S_+0x60>)
bme_humidity = bme.readHumidity();
 80a0282:	6030      	str	r0, [r6, #0]
bme_altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
 80a0284:	4620      	mov	r0, r4
 80a0286:	f001 ffcb 	bl	80a2220 <_ZN15Adafruit_BME28012readAltitudeEf>
 80a028a:	6028      	str	r0, [r5, #0]
}
 80a028c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0290:	2000008c 	.word	0x2000008c
 80a0294:	3fe66666 	.word	0x3fe66666
 80a0298:	47c5e680 	.word	0x47c5e680
 80a029c:	443e0000 	.word	0x443e0000
 80a02a0:	447d5000 	.word	0x447d5000

080a02a4 <_Z11printValuesRfS_S_S_>:
void printValues(float& bme_temperature, float& bme_pressure, float& bme_humidity, float& bme_altitude) {
 80a02a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a02a6:	4607      	mov	r7, r0
 80a02a8:	460e      	mov	r6, r1
 80a02aa:	461d      	mov	r5, r3
 80a02ac:	4614      	mov	r4, r2
    Serial.print("\n\nTemperature = ");
 80a02ae:	f004 fe1b 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a02b2:	4922      	ldr	r1, [pc, #136]	; (80a033c <_Z11printValuesRfS_S_S_+0x98>)
 80a02b4:	f004 fabd 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(bme_temperature);
 80a02b8:	f004 fe16 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a02bc:	2202      	movs	r2, #2
 80a02be:	6839      	ldr	r1, [r7, #0]
 80a02c0:	f004 fbe4 	bl	80a4a8c <_ZN5Print5printEfi>
    Serial.println(" F");
 80a02c4:	f004 fe10 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a02c8:	491d      	ldr	r1, [pc, #116]	; (80a0340 <_Z11printValuesRfS_S_S_+0x9c>)
 80a02ca:	f004 fac5 	bl	80a4858 <_ZN5Print7printlnEPKc>
    Serial.print("Pressure = ");
 80a02ce:	f004 fe0b 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a02d2:	491c      	ldr	r1, [pc, #112]	; (80a0344 <_Z11printValuesRfS_S_S_+0xa0>)
 80a02d4:	f004 faad 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(bme_pressure);
 80a02d8:	f004 fe06 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a02dc:	2202      	movs	r2, #2
 80a02de:	6831      	ldr	r1, [r6, #0]
 80a02e0:	f004 fbd4 	bl	80a4a8c <_ZN5Print5printEfi>
    Serial.println(" mmHg");
 80a02e4:	f004 fe00 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a02e8:	4917      	ldr	r1, [pc, #92]	; (80a0348 <_Z11printValuesRfS_S_S_+0xa4>)
 80a02ea:	f004 fab5 	bl	80a4858 <_ZN5Print7printlnEPKc>
    Serial.print("Approx. Altitude = ");
 80a02ee:	f004 fdfb 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a02f2:	4916      	ldr	r1, [pc, #88]	; (80a034c <_Z11printValuesRfS_S_S_+0xa8>)
 80a02f4:	f004 fa9d 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(bme_altitude);
 80a02f8:	f004 fdf6 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a02fc:	2202      	movs	r2, #2
 80a02fe:	6829      	ldr	r1, [r5, #0]
 80a0300:	f004 fbc4 	bl	80a4a8c <_ZN5Print5printEfi>
    Serial.println(" m");
 80a0304:	f004 fdf0 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0308:	4911      	ldr	r1, [pc, #68]	; (80a0350 <_Z11printValuesRfS_S_S_+0xac>)
 80a030a:	f004 faa5 	bl	80a4858 <_ZN5Print7printlnEPKc>
    Serial.print("Humidity = ");
 80a030e:	f004 fdeb 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0312:	4910      	ldr	r1, [pc, #64]	; (80a0354 <_Z11printValuesRfS_S_S_+0xb0>)
 80a0314:	f004 fa8d 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(bme_humidity);
 80a0318:	f004 fde6 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a031c:	2202      	movs	r2, #2
 80a031e:	6821      	ldr	r1, [r4, #0]
 80a0320:	f004 fbb4 	bl	80a4a8c <_ZN5Print5printEfi>
    Serial.println(" %");
 80a0324:	f004 fde0 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0328:	490b      	ldr	r1, [pc, #44]	; (80a0358 <_Z11printValuesRfS_S_S_+0xb4>)
 80a032a:	f004 fa95 	bl	80a4858 <_ZN5Print7printlnEPKc>
    Serial.println();
 80a032e:	f004 fddb 	bl	80a4ee8 <_Z16_fetch_usbserialv>
}
 80a0332:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println();
 80a0336:	f004 ba83 	b.w	80a4840 <_ZN5Print7printlnEv>
 80a033a:	bf00      	nop
 80a033c:	080a91b6 	.word	0x080a91b6
 80a0340:	080a91c7 	.word	0x080a91c7
 80a0344:	080a91ca 	.word	0x080a91ca
 80a0348:	080a91d6 	.word	0x080a91d6
 80a034c:	080a91dc 	.word	0x080a91dc
 80a0350:	080a91f0 	.word	0x080a91f0
 80a0354:	080a91f3 	.word	0x080a91f3
 80a0358:	080a91ff 	.word	0x080a91ff

080a035c <_Z20displaySensorDetailsv>:
{
 80a035c:	b530      	push	{r4, r5, lr}
  Serial.println("------------------------------------");
 80a035e:	4d3a      	ldr	r5, [pc, #232]	; (80a0448 <_Z20displaySensorDetailsv+0xec>)
{
 80a0360:	b08b      	sub	sp, #44	; 0x2c
  bno.getSensor(&sensor);
 80a0362:	4669      	mov	r1, sp
 80a0364:	4839      	ldr	r0, [pc, #228]	; (80a044c <_Z20displaySensorDetailsv+0xf0>)
 80a0366:	f002 fbc5 	bl	80a2af4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
  Serial.println("------------------------------------");
 80a036a:	f004 fdbd 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a036e:	4629      	mov	r1, r5
 80a0370:	f004 fa72 	bl	80a4858 <_ZN5Print7printlnEPKc>
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
 80a0374:	f004 fdb8 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0378:	4935      	ldr	r1, [pc, #212]	; (80a0450 <_Z20displaySensorDetailsv+0xf4>)
 80a037a:	f004 fa5a 	bl	80a4832 <_ZN5Print5printEPKc>
 80a037e:	f004 fdb3 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0382:	4669      	mov	r1, sp
 80a0384:	f004 fa68 	bl	80a4858 <_ZN5Print7printlnEPKc>
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
 80a0388:	f004 fdae 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a038c:	4931      	ldr	r1, [pc, #196]	; (80a0454 <_Z20displaySensorDetailsv+0xf8>)
 80a038e:	f004 fa50 	bl	80a4832 <_ZN5Print5printEPKc>
 80a0392:	f004 fda9 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0396:	4604      	mov	r4, r0
        size_t n = print(b, base);
 80a0398:	220a      	movs	r2, #10
 80a039a:	9903      	ldr	r1, [sp, #12]
 80a039c:	f7ff fec5 	bl	80a012a <_ZN5Print5printIlLi0EEEjT_i.isra.0>
        n += println();
 80a03a0:	4620      	mov	r0, r4
 80a03a2:	f004 fa4d 	bl	80a4840 <_ZN5Print7printlnEv>
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
 80a03a6:	f004 fd9f 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a03aa:	492b      	ldr	r1, [pc, #172]	; (80a0458 <_Z20displaySensorDetailsv+0xfc>)
 80a03ac:	f004 fa41 	bl	80a4832 <_ZN5Print5printEPKc>
 80a03b0:	f004 fd9a 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a03b4:	4604      	mov	r4, r0
        size_t n = print(b, base);
 80a03b6:	220a      	movs	r2, #10
 80a03b8:	9904      	ldr	r1, [sp, #16]
 80a03ba:	f7ff feb6 	bl	80a012a <_ZN5Print5printIlLi0EEEjT_i.isra.0>
        n += println();
 80a03be:	4620      	mov	r0, r4
 80a03c0:	f004 fa3e 	bl	80a4840 <_ZN5Print7printlnEv>
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" xxx");
 80a03c4:	4c25      	ldr	r4, [pc, #148]	; (80a045c <_Z20displaySensorDetailsv+0x100>)
 80a03c6:	f004 fd8f 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a03ca:	4925      	ldr	r1, [pc, #148]	; (80a0460 <_Z20displaySensorDetailsv+0x104>)
 80a03cc:	f004 fa31 	bl	80a4832 <_ZN5Print5printEPKc>
 80a03d0:	f004 fd8a 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a03d4:	2202      	movs	r2, #2
 80a03d6:	9906      	ldr	r1, [sp, #24]
 80a03d8:	f004 fb58 	bl	80a4a8c <_ZN5Print5printEfi>
 80a03dc:	f004 fd84 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a03e0:	4621      	mov	r1, r4
 80a03e2:	f004 fa39 	bl	80a4858 <_ZN5Print7printlnEPKc>
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" xxx");
 80a03e6:	f004 fd7f 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a03ea:	491e      	ldr	r1, [pc, #120]	; (80a0464 <_Z20displaySensorDetailsv+0x108>)
 80a03ec:	f004 fa21 	bl	80a4832 <_ZN5Print5printEPKc>
 80a03f0:	f004 fd7a 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a03f4:	2202      	movs	r2, #2
 80a03f6:	9907      	ldr	r1, [sp, #28]
 80a03f8:	f004 fb48 	bl	80a4a8c <_ZN5Print5printEfi>
 80a03fc:	f004 fd74 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0400:	4621      	mov	r1, r4
 80a0402:	f004 fa29 	bl	80a4858 <_ZN5Print7printlnEPKc>
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" xxx");
 80a0406:	f004 fd6f 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a040a:	4917      	ldr	r1, [pc, #92]	; (80a0468 <_Z20displaySensorDetailsv+0x10c>)
 80a040c:	f004 fa11 	bl	80a4832 <_ZN5Print5printEPKc>
 80a0410:	f004 fd6a 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0414:	2202      	movs	r2, #2
 80a0416:	9908      	ldr	r1, [sp, #32]
 80a0418:	f004 fb38 	bl	80a4a8c <_ZN5Print5printEfi>
 80a041c:	f004 fd64 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0420:	4621      	mov	r1, r4
 80a0422:	f004 fa19 	bl	80a4858 <_ZN5Print7printlnEPKc>
  Serial.println("------------------------------------");
 80a0426:	f004 fd5f 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a042a:	4629      	mov	r1, r5
 80a042c:	f004 fa14 	bl	80a4858 <_ZN5Print7printlnEPKc>
  Serial.println("");
 80a0430:	f004 fd5a 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0434:	490d      	ldr	r1, [pc, #52]	; (80a046c <_Z20displaySensorDetailsv+0x110>)
 80a0436:	f004 fa0f 	bl	80a4858 <_ZN5Print7printlnEPKc>
  delay(500);
 80a043a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a043e:	f004 fbc3 	bl	80a4bc8 <delay>
}
 80a0442:	b00b      	add	sp, #44	; 0x2c
 80a0444:	bd30      	pop	{r4, r5, pc}
 80a0446:	bf00      	nop
 80a0448:	080a9202 	.word	0x080a9202
 80a044c:	20000100 	.word	0x20000100
 80a0450:	080a9227 	.word	0x080a9227
 80a0454:	080a9236 	.word	0x080a9236
 80a0458:	080a9245 	.word	0x080a9245
 80a045c:	080a9263 	.word	0x080a9263
 80a0460:	080a9254 	.word	0x080a9254
 80a0464:	080a9268 	.word	0x080a9268
 80a0468:	080a9277 	.word	0x080a9277
 80a046c:	080a93e5 	.word	0x080a93e5

080a0470 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>:
{
 80a0470:	b538      	push	{r3, r4, r5, lr}
 80a0472:	4604      	mov	r4, r0
    Serial.println("\nCalibration offsets \n");
 80a0474:	f004 fd38 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0478:	494c      	ldr	r1, [pc, #304]	; (80a05ac <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x13c>)
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
 80a047a:	4d4d      	ldr	r5, [pc, #308]	; (80a05b0 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x140>)
    Serial.println("\nCalibration offsets \n");
 80a047c:	f004 f9ec 	bl	80a4858 <_ZN5Print7printlnEPKc>
    Serial.print("Accelerometer: ");
 80a0480:	f004 fd32 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0484:	494b      	ldr	r1, [pc, #300]	; (80a05b4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x144>)
 80a0486:	f004 f9d4 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
 80a048a:	f004 fd2d 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a048e:	220a      	movs	r2, #10
 80a0490:	f9b4 1000 	ldrsh.w	r1, [r4]
 80a0494:	f7ff fe2e 	bl	80a00f4 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
 80a0498:	f004 fd26 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a049c:	4629      	mov	r1, r5
 80a049e:	f004 f9c8 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_y); Serial.print(" ");
 80a04a2:	f004 fd21 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a04a6:	220a      	movs	r2, #10
 80a04a8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80a04ac:	f7ff fe22 	bl	80a00f4 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
 80a04b0:	f004 fd1a 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a04b4:	4629      	mov	r1, r5
 80a04b6:	f004 f9bc 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_z); Serial.print(" ");
 80a04ba:	f004 fd15 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a04be:	220a      	movs	r2, #10
 80a04c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80a04c4:	f7ff fe16 	bl	80a00f4 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
 80a04c8:	f004 fd0e 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a04cc:	4629      	mov	r1, r5
 80a04ce:	f004 f9b0 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print("\nGyro: ");
 80a04d2:	f004 fd09 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a04d6:	4938      	ldr	r1, [pc, #224]	; (80a05b8 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x148>)
 80a04d8:	f004 f9ab 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_x); Serial.print(" ");
 80a04dc:	f004 fd04 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a04e0:	220a      	movs	r2, #10
 80a04e2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80a04e6:	f7ff fe05 	bl	80a00f4 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
 80a04ea:	f004 fcfd 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a04ee:	4629      	mov	r1, r5
 80a04f0:	f004 f99f 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_y); Serial.print(" ");
 80a04f4:	f004 fcf8 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a04f8:	220a      	movs	r2, #10
 80a04fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80a04fe:	f7ff fdf9 	bl	80a00f4 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
 80a0502:	f004 fcf1 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0506:	4629      	mov	r1, r5
 80a0508:	f004 f993 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_z); Serial.print(" ");
 80a050c:	f004 fcec 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0510:	220a      	movs	r2, #10
 80a0512:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a0516:	f7ff fded 	bl	80a00f4 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
 80a051a:	f004 fce5 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a051e:	4629      	mov	r1, r5
 80a0520:	f004 f987 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print("\nMag: ");
 80a0524:	f004 fce0 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0528:	4924      	ldr	r1, [pc, #144]	; (80a05bc <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x14c>)
 80a052a:	f004 f982 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_x); Serial.print(" ");
 80a052e:	f004 fcdb 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0532:	220a      	movs	r2, #10
 80a0534:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80a0538:	f7ff fddc 	bl	80a00f4 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
 80a053c:	f004 fcd4 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0540:	4629      	mov	r1, r5
 80a0542:	f004 f976 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_y); Serial.print(" ");
 80a0546:	f004 fccf 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a054a:	220a      	movs	r2, #10
 80a054c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80a0550:	f7ff fdd0 	bl	80a00f4 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
 80a0554:	f004 fcc8 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0558:	4629      	mov	r1, r5
 80a055a:	f004 f96a 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_z); Serial.print(" ");
 80a055e:	f004 fcc3 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0562:	220a      	movs	r2, #10
 80a0564:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80a0568:	f7ff fdc4 	bl	80a00f4 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
 80a056c:	f004 fcbc 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0570:	4629      	mov	r1, r5
 80a0572:	f004 f95e 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print("\nAccel Radius: ");
 80a0576:	f004 fcb7 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a057a:	4911      	ldr	r1, [pc, #68]	; (80a05c0 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x150>)
 80a057c:	f004 f959 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_radius);
 80a0580:	f004 fcb2 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0584:	220a      	movs	r2, #10
 80a0586:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80a058a:	f7ff fdb3 	bl	80a00f4 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
    Serial.print("\nMag Radius: ");
 80a058e:	f004 fcab 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0592:	490c      	ldr	r1, [pc, #48]	; (80a05c4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x154>)
 80a0594:	f004 f94d 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_radius);
 80a0598:	f004 fca6 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a059c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80a05a0:	220a      	movs	r2, #10
}
 80a05a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.print(calibData.mag_radius);
 80a05a6:	f7ff bda5 	b.w	80a00f4 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
 80a05aa:	bf00      	nop
 80a05ac:	080a9286 	.word	0x080a9286
 80a05b0:	080a93ba 	.word	0x080a93ba
 80a05b4:	080a929d 	.word	0x080a929d
 80a05b8:	080a92ad 	.word	0x080a92ad
 80a05bc:	080a92b5 	.word	0x080a92b5
 80a05c0:	080a92bc 	.word	0x080a92bc
 80a05c4:	080a92cc 	.word	0x080a92cc

080a05c8 <_Z19get_compass_headingv>:

float get_compass_heading() {
  // put your main code here, to run repeatedly:
uint8_t system, gyro, accel, mg = 0;
 80a05c8:	2300      	movs	r3, #0
float get_compass_heading() {
 80a05ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a05ce:	b09d      	sub	sp, #116	; 0x74
uint8_t system, gyro, accel, mg = 0;
 80a05d0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
bno.getCalibration(&system, &gyro, &accel, &mg);
 80a05d4:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 80a05d8:	48c9      	ldr	r0, [pc, #804]	; (80a0900 <_Z19get_compass_headingv+0x338>)
 80a05da:	9300      	str	r3, [sp, #0]
 80a05dc:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 80a05e0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a05e4:	a909      	add	r1, sp, #36	; 0x24
 80a05e6:	f002 fc0b 	bl	80a2e00 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
imu::Vector<3> acc =bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
 80a05ea:	2208      	movs	r2, #8
 80a05ec:	49c4      	ldr	r1, [pc, #784]	; (80a0900 <_Z19get_compass_headingv+0x338>)
 80a05ee:	a80a      	add	r0, sp, #40	; 0x28
 80a05f0:	f002 fd04 	bl	80a2ffc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> gyr =bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
 80a05f4:	2214      	movs	r2, #20
 80a05f6:	49c2      	ldr	r1, [pc, #776]	; (80a0900 <_Z19get_compass_headingv+0x338>)
 80a05f8:	a810      	add	r0, sp, #64	; 0x40
 80a05fa:	f002 fcff 	bl	80a2ffc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> mag =bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
 80a05fe:	220e      	movs	r2, #14
 80a0600:	49bf      	ldr	r1, [pc, #764]	; (80a0900 <_Z19get_compass_headingv+0x338>)
 80a0602:	a816      	add	r0, sp, #88	; 0x58
 80a0604:	f002 fcfa 	bl	80a2ffc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
//measured value of tilt in x
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
 80a0608:	a3b3      	add	r3, pc, #716	; (adr r3, 80a08d8 <_Z19get_compass_headingv+0x310>)
 80a060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a060e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80a0612:	f007 fde9 	bl	80a81e8 <__aeabi_ddiv>
 80a0616:	a3b0      	add	r3, pc, #704	; (adr r3, 80a08d8 <_Z19get_compass_headingv+0x310>)
 80a0618:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a061c:	4604      	mov	r4, r0
 80a061e:	460d      	mov	r5, r1
 80a0620:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a0624:	f007 fde0 	bl	80a81e8 <__aeabi_ddiv>
 80a0628:	4622      	mov	r2, r4
 80a062a:	462b      	mov	r3, r5
 80a062c:	f005 f830 	bl	80a5690 <atan2>
 80a0630:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
 80a0634:	2200      	movs	r2, #0
 80a0636:	4639      	mov	r1, r7
 80a0638:	4bb2      	ldr	r3, [pc, #712]	; (80a0904 <_Z19get_compass_headingv+0x33c>)
 80a063a:	f007 fcab 	bl	80a7f94 <__aeabi_dmul>
 80a063e:	a3a8      	add	r3, pc, #672	; (adr r3, 80a08e0 <_Z19get_compass_headingv+0x318>)
 80a0640:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0644:	f007 fdd0 	bl	80a81e8 <__aeabi_ddiv>
 80a0648:	2200      	movs	r2, #0
 80a064a:	4baf      	ldr	r3, [pc, #700]	; (80a0908 <_Z19get_compass_headingv+0x340>)
 80a064c:	f007 fca2 	bl	80a7f94 <__aeabi_dmul>
 80a0650:	f007 ff98 	bl	80a8584 <__aeabi_d2f>
//measured value of tilt in y
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
 80a0654:	a3a0      	add	r3, pc, #640	; (adr r3, 80a08d8 <_Z19get_compass_headingv+0x310>)
 80a0656:	e9d3 2300 	ldrd	r2, r3, [r3]
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
 80a065a:	4cac      	ldr	r4, [pc, #688]	; (80a090c <_Z19get_compass_headingv+0x344>)
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
 80a065c:	4dac      	ldr	r5, [pc, #688]	; (80a0910 <_Z19get_compass_headingv+0x348>)
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
 80a065e:	6020      	str	r0, [r4, #0]
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
 80a0660:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80a0664:	f007 fdc0 	bl	80a81e8 <__aeabi_ddiv>
 80a0668:	a39b      	add	r3, pc, #620	; (adr r3, 80a08d8 <_Z19get_compass_headingv+0x310>)
 80a066a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a066e:	4606      	mov	r6, r0
 80a0670:	460f      	mov	r7, r1
 80a0672:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80a0676:	f007 fdb7 	bl	80a81e8 <__aeabi_ddiv>
 80a067a:	4632      	mov	r2, r6
 80a067c:	463b      	mov	r3, r7
 80a067e:	f005 f807 	bl	80a5690 <atan2>
 80a0682:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
 80a0686:	2200      	movs	r2, #0
 80a0688:	4639      	mov	r1, r7
 80a068a:	4b9e      	ldr	r3, [pc, #632]	; (80a0904 <_Z19get_compass_headingv+0x33c>)
 80a068c:	f007 fc82 	bl	80a7f94 <__aeabi_dmul>
 80a0690:	a393      	add	r3, pc, #588	; (adr r3, 80a08e0 <_Z19get_compass_headingv+0x318>)
 80a0692:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0696:	f007 fda7 	bl	80a81e8 <__aeabi_ddiv>
 80a069a:	2200      	movs	r2, #0
 80a069c:	4b9a      	ldr	r3, [pc, #616]	; (80a0908 <_Z19get_compass_headingv+0x340>)
 80a069e:	f007 fc79 	bl	80a7f94 <__aeabi_dmul>
 80a06a2:	f007 ff6f 	bl	80a8584 <__aeabi_d2f>
//filtered value for tilt in y
phiFnew=.95*phiFold+.05*phiM;
 80a06a6:	4b9b      	ldr	r3, [pc, #620]	; (80a0914 <_Z19get_compass_headingv+0x34c>)
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
 80a06a8:	4680      	mov	r8, r0
 80a06aa:	6028      	str	r0, [r5, #0]
phiFnew=.95*phiFold+.05*phiM;
 80a06ac:	6818      	ldr	r0, [r3, #0]
 80a06ae:	f007 fc19 	bl	80a7ee4 <__aeabi_f2d>
 80a06b2:	a38d      	add	r3, pc, #564	; (adr r3, 80a08e8 <_Z19get_compass_headingv+0x320>)
 80a06b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a06b8:	f007 fc6c 	bl	80a7f94 <__aeabi_dmul>
 80a06bc:	4606      	mov	r6, r0
 80a06be:	4640      	mov	r0, r8
 80a06c0:	460f      	mov	r7, r1
 80a06c2:	f007 fc0f 	bl	80a7ee4 <__aeabi_f2d>
 80a06c6:	a38a      	add	r3, pc, #552	; (adr r3, 80a08f0 <_Z19get_compass_headingv+0x328>)
 80a06c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a06cc:	f007 fc62 	bl	80a7f94 <__aeabi_dmul>
 80a06d0:	4602      	mov	r2, r0
 80a06d2:	460b      	mov	r3, r1
 80a06d4:	4630      	mov	r0, r6
 80a06d6:	4639      	mov	r1, r7
 80a06d8:	f007 faa6 	bl	80a7c28 <__adddf3>
 80a06dc:	f007 ff52 	bl	80a8584 <__aeabi_d2f>
 80a06e0:	f8df b234 	ldr.w	fp, [pc, #564]	; 80a0918 <_Z19get_compass_headingv+0x350>
//filtered value for tilt in x
thetaFnew=.95*thetaFold+.05*thetaM;
 80a06e4:	498d      	ldr	r1, [pc, #564]	; (80a091c <_Z19get_compass_headingv+0x354>)
phiFnew=.95*phiFold+.05*phiM;
 80a06e6:	f8cb 0000 	str.w	r0, [fp]
thetaFnew=.95*thetaFold+.05*thetaM;
 80a06ea:	6808      	ldr	r0, [r1, #0]
 80a06ec:	f007 fbfa 	bl	80a7ee4 <__aeabi_f2d>
 80a06f0:	a37d      	add	r3, pc, #500	; (adr r3, 80a08e8 <_Z19get_compass_headingv+0x320>)
 80a06f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a06f6:	f007 fc4d 	bl	80a7f94 <__aeabi_dmul>
 80a06fa:	4606      	mov	r6, r0
 80a06fc:	6820      	ldr	r0, [r4, #0]
 80a06fe:	460f      	mov	r7, r1
 80a0700:	f007 fbf0 	bl	80a7ee4 <__aeabi_f2d>
 80a0704:	a37a      	add	r3, pc, #488	; (adr r3, 80a08f0 <_Z19get_compass_headingv+0x328>)
 80a0706:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a070a:	f007 fc43 	bl	80a7f94 <__aeabi_dmul>
 80a070e:	4602      	mov	r2, r0
 80a0710:	460b      	mov	r3, r1
 80a0712:	4630      	mov	r0, r6
 80a0714:	4639      	mov	r1, r7
 80a0716:	f007 fa87 	bl	80a7c28 <__adddf3>
 80a071a:	f007 ff33 	bl	80a8584 <__aeabi_d2f>
 80a071e:	4e80      	ldr	r6, [pc, #512]	; (80a0920 <_Z19get_compass_headingv+0x358>)
 //this is the time through one loop of program
dt=(millis()-millisOld)/1000.;
 80a0720:	4f80      	ldr	r7, [pc, #512]	; (80a0924 <_Z19get_compass_headingv+0x35c>)
thetaFnew=.95*thetaFold+.05*thetaM;
 80a0722:	6030      	str	r0, [r6, #0]
 80a0724:	f003 fc80 	bl	80a4028 <HAL_Timer_Get_Milli_Seconds>
dt=(millis()-millisOld)/1000.;
 80a0728:	683b      	ldr	r3, [r7, #0]
 80a072a:	4e7f      	ldr	r6, [pc, #508]	; (80a0928 <_Z19get_compass_headingv+0x360>)
 80a072c:	1ac0      	subs	r0, r0, r3
 80a072e:	f007 fbb7 	bl	80a7ea0 <__aeabi_ui2d>
 80a0732:	2200      	movs	r2, #0
 80a0734:	4b7d      	ldr	r3, [pc, #500]	; (80a092c <_Z19get_compass_headingv+0x364>)
 80a0736:	f007 fd57 	bl	80a81e8 <__aeabi_ddiv>
 80a073a:	f007 ff23 	bl	80a8584 <__aeabi_d2f>
 80a073e:	6030      	str	r0, [r6, #0]
 80a0740:	f003 fc72 	bl	80a4028 <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
 80a0744:	6038      	str	r0, [r7, #0]
//measures tilt in x with filter to remove vibration but still quick to respond.  lesson 9
//complimentary filter
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
 80a0746:	6830      	ldr	r0, [r6, #0]
 80a0748:	f007 fbcc 	bl	80a7ee4 <__aeabi_f2d>
 80a074c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80a0750:	4606      	mov	r6, r0
 80a0752:	460f      	mov	r7, r1
 80a0754:	f007 fc1e 	bl	80a7f94 <__aeabi_dmul>
 80a0758:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 80a0930 <_Z19get_compass_headingv+0x368>
 80a075c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a0760:	f8da 0000 	ldr.w	r0, [sl]
 80a0764:	f007 fbbe 	bl	80a7ee4 <__aeabi_f2d>
 80a0768:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a076c:	f007 fa5c 	bl	80a7c28 <__adddf3>
 80a0770:	a35d      	add	r3, pc, #372	; (adr r3, 80a08e8 <_Z19get_compass_headingv+0x320>)
 80a0772:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0776:	f007 fc0d 	bl	80a7f94 <__aeabi_dmul>
 80a077a:	4680      	mov	r8, r0
 80a077c:	6820      	ldr	r0, [r4, #0]
 80a077e:	4689      	mov	r9, r1
 80a0780:	f007 fbb0 	bl	80a7ee4 <__aeabi_f2d>
 80a0784:	a35a      	add	r3, pc, #360	; (adr r3, 80a08f0 <_Z19get_compass_headingv+0x328>)
 80a0786:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a078a:	f007 fc03 	bl	80a7f94 <__aeabi_dmul>
 80a078e:	4602      	mov	r2, r0
 80a0790:	460b      	mov	r3, r1
 80a0792:	4640      	mov	r0, r8
 80a0794:	4649      	mov	r1, r9
 80a0796:	f007 fa47 	bl	80a7c28 <__adddf3>
 80a079a:	f007 fef3 	bl	80a8584 <__aeabi_d2f>
//measures tilt in y with filter to remove vibration but still quick to respond.  lesson 9
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
 80a079e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
 80a07a2:	4604      	mov	r4, r0
 80a07a4:	f8ca 0000 	str.w	r0, [sl]
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
 80a07a8:	4639      	mov	r1, r7
 80a07aa:	4630      	mov	r0, r6
 80a07ac:	f007 fbf2 	bl	80a7f94 <__aeabi_dmul>
 80a07b0:	4606      	mov	r6, r0
 80a07b2:	460f      	mov	r7, r1
 80a07b4:	f8df a17c 	ldr.w	sl, [pc, #380]	; 80a0934 <_Z19get_compass_headingv+0x36c>
 80a07b8:	f8da 0000 	ldr.w	r0, [sl]
 80a07bc:	f007 fb92 	bl	80a7ee4 <__aeabi_f2d>
 80a07c0:	4632      	mov	r2, r6
 80a07c2:	463b      	mov	r3, r7
 80a07c4:	f007 fa2e 	bl	80a7c24 <__aeabi_dsub>
 80a07c8:	a347      	add	r3, pc, #284	; (adr r3, 80a08e8 <_Z19get_compass_headingv+0x320>)
 80a07ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a07ce:	f007 fbe1 	bl	80a7f94 <__aeabi_dmul>
 80a07d2:	4680      	mov	r8, r0
 80a07d4:	6828      	ldr	r0, [r5, #0]
 80a07d6:	4689      	mov	r9, r1
 80a07d8:	f007 fb84 	bl	80a7ee4 <__aeabi_f2d>
 80a07dc:	a344      	add	r3, pc, #272	; (adr r3, 80a08f0 <_Z19get_compass_headingv+0x328>)
 80a07de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a07e2:	f007 fbd7 	bl	80a7f94 <__aeabi_dmul>
 80a07e6:	4602      	mov	r2, r0
 80a07e8:	460b      	mov	r3, r1
 80a07ea:	4640      	mov	r0, r8
 80a07ec:	4649      	mov	r1, r9
 80a07ee:	f007 fa1b 	bl	80a7c28 <__adddf3>
 80a07f2:	f007 fec7 	bl	80a8584 <__aeabi_d2f>

thetaG=thetaG+gyr.y()*dt;
 80a07f6:	f8df 8140 	ldr.w	r8, [pc, #320]	; 80a0938 <_Z19get_compass_headingv+0x370>
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
 80a07fa:	4605      	mov	r5, r0
 80a07fc:	f8ca 0000 	str.w	r0, [sl]
thetaG=thetaG+gyr.y()*dt;
 80a0800:	f8d8 0000 	ldr.w	r0, [r8]
 80a0804:	f007 fb6e 	bl	80a7ee4 <__aeabi_f2d>
 80a0808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a080c:	f007 fa0c 	bl	80a7c28 <__adddf3>
 80a0810:	f007 feb8 	bl	80a8584 <__aeabi_d2f>
 80a0814:	f8c8 0000 	str.w	r0, [r8]
phiG=phiG-gyr.x()*dt;
 80a0818:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80a093c <_Z19get_compass_headingv+0x374>
 80a081c:	f8d8 0000 	ldr.w	r0, [r8]
 80a0820:	f007 fb60 	bl	80a7ee4 <__aeabi_f2d>
 80a0824:	4632      	mov	r2, r6
 80a0826:	463b      	mov	r3, r7
 80a0828:	f007 f9fc 	bl	80a7c24 <__aeabi_dsub>
 80a082c:	f007 feaa 	bl	80a8584 <__aeabi_d2f>
 
phiRad=phi/360*(2*3.14);
 80a0830:	4943      	ldr	r1, [pc, #268]	; (80a0940 <_Z19get_compass_headingv+0x378>)
phiG=phiG-gyr.x()*dt;
 80a0832:	f8c8 0000 	str.w	r0, [r8]
phiRad=phi/360*(2*3.14);
 80a0836:	4628      	mov	r0, r5
 80a0838:	f008 f8b6 	bl	80a89a8 <__aeabi_fdiv>
 80a083c:	f007 fb52 	bl	80a7ee4 <__aeabi_f2d>
 80a0840:	a32d      	add	r3, pc, #180	; (adr r3, 80a08f8 <_Z19get_compass_headingv+0x330>)
 80a0842:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0846:	f007 fba5 	bl	80a7f94 <__aeabi_dmul>
 80a084a:	f007 fe9b 	bl	80a8584 <__aeabi_d2f>
 80a084e:	4b3d      	ldr	r3, [pc, #244]	; (80a0944 <_Z19get_compass_headingv+0x37c>)
 80a0850:	4605      	mov	r5, r0
 80a0852:	6018      	str	r0, [r3, #0]
thetaRad=theta/360*(2*3.14);
 80a0854:	493a      	ldr	r1, [pc, #232]	; (80a0940 <_Z19get_compass_headingv+0x378>)
 80a0856:	4620      	mov	r0, r4
 80a0858:	f008 f8a6 	bl	80a89a8 <__aeabi_fdiv>
 80a085c:	f007 fb42 	bl	80a7ee4 <__aeabi_f2d>
 80a0860:	a325      	add	r3, pc, #148	; (adr r3, 80a08f8 <_Z19get_compass_headingv+0x330>)
 80a0862:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0866:	f007 fb95 	bl	80a7f94 <__aeabi_dmul>
 80a086a:	f007 fe8b 	bl	80a8584 <__aeabi_d2f>
 80a086e:	4b36      	ldr	r3, [pc, #216]	; (80a0948 <_Z19get_compass_headingv+0x380>)
 80a0870:	4604      	mov	r4, r0
 80a0872:	6018      	str	r0, [r3, #0]
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80a0874:	f004 fe9a 	bl	80a55ac <cosf>
 
 //tilt compensated x
Xm=mag.x()*cos(thetaRad)-mag.y()*sin(phiRad)*sin(thetaRad)+mag.z()*cos(phiRad)*sin(thetaRad);
 80a0878:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80a087c:	4682      	mov	sl, r0
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80a087e:	4628      	mov	r0, r5
 80a0880:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a0884:	f004 feca 	bl	80a561c <sinf>
 80a0888:	f007 fb2c 	bl	80a7ee4 <__aeabi_f2d>
 80a088c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a0890:	4620      	mov	r0, r4
 80a0892:	f004 fec3 	bl	80a561c <sinf>
 80a0896:	f007 fb25 	bl	80a7ee4 <__aeabi_f2d>
 80a089a:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
 80a089e:	4606      	mov	r6, r0
  { return __builtin_cosf(__x); }
 80a08a0:	4628      	mov	r0, r5
 80a08a2:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a08a6:	460f      	mov	r7, r1
 80a08a8:	f004 fe80 	bl	80a55ac <cosf>
 80a08ac:	f007 fb1a 	bl	80a7ee4 <__aeabi_f2d>
 80a08b0:	4680      	mov	r8, r0
 80a08b2:	4650      	mov	r0, sl
 80a08b4:	4689      	mov	r9, r1
 80a08b6:	f007 fb15 	bl	80a7ee4 <__aeabi_f2d>
 80a08ba:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80a08be:	f007 fb69 	bl	80a7f94 <__aeabi_dmul>
 80a08c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a08c6:	4604      	mov	r4, r0
 80a08c8:	460d      	mov	r5, r1
 80a08ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a08ce:	f007 fb61 	bl	80a7f94 <__aeabi_dmul>
 80a08d2:	4632      	mov	r2, r6
 80a08d4:	463b      	mov	r3, r7
 80a08d6:	e039      	b.n	80a094c <_Z19get_compass_headingv+0x384>
 80a08d8:	9999999a 	.word	0x9999999a
 80a08dc:	40239999 	.word	0x40239999
 80a08e0:	54524550 	.word	0x54524550
 80a08e4:	400921fb 	.word	0x400921fb
 80a08e8:	66666666 	.word	0x66666666
 80a08ec:	3fee6666 	.word	0x3fee6666
 80a08f0:	9999999a 	.word	0x9999999a
 80a08f4:	3fa99999 	.word	0x3fa99999
 80a08f8:	51eb851f 	.word	0x51eb851f
 80a08fc:	40191eb8 	.word	0x40191eb8
 80a0900:	20000100 	.word	0x20000100
 80a0904:	3fe00000 	.word	0x3fe00000
 80a0908:	40768000 	.word	0x40768000
 80a090c:	20000218 	.word	0x20000218
 80a0910:	200001ec 	.word	0x200001ec
 80a0914:	200001e4 	.word	0x200001e4
 80a0918:	200001e0 	.word	0x200001e0
 80a091c:	20000210 	.word	0x20000210
 80a0920:	2000020c 	.word	0x2000020c
 80a0924:	200001d8 	.word	0x200001d8
 80a0928:	20000194 	.word	0x20000194
 80a092c:	408f4000 	.word	0x408f4000
 80a0930:	20000208 	.word	0x20000208
 80a0934:	200001dc 	.word	0x200001dc
 80a0938:	20000214 	.word	0x20000214
 80a093c:	200001e8 	.word	0x200001e8
 80a0940:	43b40000 	.word	0x43b40000
 80a0944:	200001f0 	.word	0x200001f0
 80a0948:	2000021c 	.word	0x2000021c
 80a094c:	f007 fb22 	bl	80a7f94 <__aeabi_dmul>
 80a0950:	4602      	mov	r2, r0
 80a0952:	460b      	mov	r3, r1
 80a0954:	4620      	mov	r0, r4
 80a0956:	4629      	mov	r1, r5
 80a0958:	f007 f964 	bl	80a7c24 <__aeabi_dsub>
 80a095c:	4642      	mov	r2, r8
 80a095e:	4604      	mov	r4, r0
 80a0960:	460d      	mov	r5, r1
 80a0962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a0966:	464b      	mov	r3, r9
 80a0968:	f007 fb14 	bl	80a7f94 <__aeabi_dmul>
 80a096c:	4632      	mov	r2, r6
 80a096e:	463b      	mov	r3, r7
 80a0970:	f007 fb10 	bl	80a7f94 <__aeabi_dmul>
 80a0974:	4602      	mov	r2, r0
 80a0976:	460b      	mov	r3, r1
 80a0978:	4620      	mov	r0, r4
 80a097a:	4629      	mov	r1, r5
 80a097c:	f007 f954 	bl	80a7c28 <__adddf3>
 80a0980:	f007 fe00 	bl	80a8584 <__aeabi_d2f>
 80a0984:	4b26      	ldr	r3, [pc, #152]	; (80a0a20 <_Z19get_compass_headingv+0x458>)
 80a0986:	4606      	mov	r6, r0
 80a0988:	6018      	str	r0, [r3, #0]
//tilt compensated y
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
 80a098a:	4642      	mov	r2, r8
 80a098c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a0990:	464b      	mov	r3, r9
 80a0992:	f007 faff 	bl	80a7f94 <__aeabi_dmul>
 80a0996:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a099a:	4604      	mov	r4, r0
 80a099c:	460d      	mov	r5, r1
 80a099e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a09a2:	f007 faf7 	bl	80a7f94 <__aeabi_dmul>
 80a09a6:	4602      	mov	r2, r0
 80a09a8:	460b      	mov	r3, r1
 80a09aa:	4620      	mov	r0, r4
 80a09ac:	4629      	mov	r1, r5
 80a09ae:	f007 f93b 	bl	80a7c28 <__adddf3>
 80a09b2:	f007 fde7 	bl	80a8584 <__aeabi_d2f>
 80a09b6:	4b1b      	ldr	r3, [pc, #108]	; (80a0a24 <_Z19get_compass_headingv+0x45c>)
  { return __builtin_atan2f(__y, __x); }
 80a09b8:	4631      	mov	r1, r6
 80a09ba:	6018      	str	r0, [r3, #0]
// Serial.print(phi);
// Serial.print(",");
// Serial.println(psi);
 
phiFold=phiFnew;
thetaFold=thetaFnew;
 80a09bc:	4e1a      	ldr	r6, [pc, #104]	; (80a0a28 <_Z19get_compass_headingv+0x460>)
 80a09be:	f004 ff29 	bl	80a5814 <atan2f>
phiFold=phiFnew;
 80a09c2:	4a1a      	ldr	r2, [pc, #104]	; (80a0a2c <_Z19get_compass_headingv+0x464>)
 80a09c4:	f8db 3000 	ldr.w	r3, [fp]
thetaFold=thetaFnew;
 80a09c8:	4919      	ldr	r1, [pc, #100]	; (80a0a30 <_Z19get_compass_headingv+0x468>)
phiFold=phiFnew;
 80a09ca:	6013      	str	r3, [r2, #0]
thetaFold=thetaFnew;
 80a09cc:	6833      	ldr	r3, [r6, #0]
 80a09ce:	4d19      	ldr	r5, [pc, #100]	; (80a0a34 <_Z19get_compass_headingv+0x46c>)
 80a09d0:	600b      	str	r3, [r1, #0]
psi=atan2(Ym,Xm)/(2*3.14)*360;
 80a09d2:	f007 fa87 	bl	80a7ee4 <__aeabi_f2d>
 80a09d6:	a310      	add	r3, pc, #64	; (adr r3, 80a0a18 <_Z19get_compass_headingv+0x450>)
 80a09d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a09dc:	f007 fc04 	bl	80a81e8 <__aeabi_ddiv>
 80a09e0:	2200      	movs	r2, #0
 80a09e2:	4b15      	ldr	r3, [pc, #84]	; (80a0a38 <_Z19get_compass_headingv+0x470>)
 80a09e4:	f007 fad6 	bl	80a7f94 <__aeabi_dmul>
 80a09e8:	f007 fdcc 	bl	80a8584 <__aeabi_d2f>
 psi = psi + 180;
 80a09ec:	4913      	ldr	r1, [pc, #76]	; (80a0a3c <_Z19get_compass_headingv+0x474>)
 80a09ee:	f007 fe1f 	bl	80a8630 <__addsf3>
 if(psi >= 360) {
 80a09f2:	4913      	ldr	r1, [pc, #76]	; (80a0a40 <_Z19get_compass_headingv+0x478>)
 psi = psi + 180;
 80a09f4:	4604      	mov	r4, r0
 if(psi >= 360) {
 80a09f6:	f008 f8d5 	bl	80a8ba4 <__aeabi_fcmpge>
 80a09fa:	b920      	cbnz	r0, 80a0a06 <_Z19get_compass_headingv+0x43e>
 psi = psi + 180;
 80a09fc:	602c      	str	r4, [r5, #0]
   psi = psi -360;
 }
 return(psi);
//delay(BNO055_SAMPLERATE_DELAY_MS);
}
 80a09fe:	6828      	ldr	r0, [r5, #0]
 80a0a00:	b01d      	add	sp, #116	; 0x74
 80a0a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   psi = psi -360;
 80a0a06:	4620      	mov	r0, r4
 80a0a08:	490d      	ldr	r1, [pc, #52]	; (80a0a40 <_Z19get_compass_headingv+0x478>)
 80a0a0a:	f007 fe0f 	bl	80a862c <__aeabi_fsub>
 80a0a0e:	6028      	str	r0, [r5, #0]
 80a0a10:	e7f5      	b.n	80a09fe <_Z19get_compass_headingv+0x436>
 80a0a12:	bf00      	nop
 80a0a14:	f3af 8000 	nop.w
 80a0a18:	51eb851f 	.word	0x51eb851f
 80a0a1c:	40191eb8 	.word	0x40191eb8
 80a0a20:	20000084 	.word	0x20000084
 80a0a24:	20000088 	.word	0x20000088
 80a0a28:	2000020c 	.word	0x2000020c
 80a0a2c:	200001e4 	.word	0x200001e4
 80a0a30:	20000210 	.word	0x20000210
 80a0a34:	20000200 	.word	0x20000200
 80a0a38:	40768000 	.word	0x40768000
 80a0a3c:	43340000 	.word	0x43340000
 80a0a40:	43b40000 	.word	0x43b40000

080a0a44 <_Z11eeprom_testv>:

void eeprom_test(){
 80a0a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t max_addr;
  //variables for calibration read from memory
int test = 55;
      // Try to determine the size by writing a value and seeing if it changes the first byte
  Serial.println("Testing size!");
 80a0a48:	f004 fa4e 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0a4c:	492a      	ldr	r1, [pc, #168]	; (80a0af8 <_Z11eeprom_testv+0xb4>)
 80a0a4e:	f003 ff03 	bl	80a4858 <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
 80a0a52:	2401      	movs	r4, #1
    if (i2ceeprom.read(max_addr) != test)
 80a0a54:	4d29      	ldr	r5, [pc, #164]	; (80a0afc <_Z11eeprom_testv+0xb8>)
    // read address 0x0 again
    uint8_t val0 = i2ceeprom.read(0);

    // re-write the old value
    if (! i2ceeprom.write(max_addr, test)) {
        Serial.print("Failed to re-write address 0x");
 80a0a56:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80a0b00 <_Z11eeprom_testv+0xbc>
        Serial.print("Failed to write address 0x");
 80a0a5a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80a0b04 <_Z11eeprom_testv+0xc0>
    if (i2ceeprom.read(max_addr) != test)
 80a0a5e:	b2a7      	uxth	r7, r4
 80a0a60:	4639      	mov	r1, r7
 80a0a62:	4826      	ldr	r0, [pc, #152]	; (80a0afc <_Z11eeprom_testv+0xb8>)
 80a0a64:	f003 fa79 	bl	80a3f5a <_ZN19Adafruit_EEPROM_I2C4readEt>
 80a0a68:	2837      	cmp	r0, #55	; 0x37
 80a0a6a:	d13f      	bne.n	80a0aec <_Z11eeprom_testv+0xa8>
    if (! i2ceeprom.write(max_addr, (byte)~test)) {
 80a0a6c:	22c8      	movs	r2, #200	; 0xc8
 80a0a6e:	4639      	mov	r1, r7
 80a0a70:	4628      	mov	r0, r5
 80a0a72:	f003 fa4e 	bl	80a3f12 <_ZN19Adafruit_EEPROM_I2C5writeEth>
 80a0a76:	b950      	cbnz	r0, 80a0a8e <_Z11eeprom_testv+0x4a>
        Serial.print("Failed to write address 0x");
 80a0a78:	f004 fa36 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0a7c:	4649      	mov	r1, r9
 80a0a7e:	f003 fed8 	bl	80a4832 <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
 80a0a82:	f004 fa31 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0a86:	2210      	movs	r2, #16
 80a0a88:	4621      	mov	r1, r4
 80a0a8a:	f7ff fb79 	bl	80a0180 <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    uint8_t val0 = i2ceeprom.read(0);
 80a0a8e:	2100      	movs	r1, #0
 80a0a90:	4628      	mov	r0, r5
 80a0a92:	f003 fa62 	bl	80a3f5a <_ZN19Adafruit_EEPROM_I2C4readEt>
    if (! i2ceeprom.write(max_addr, test)) {
 80a0a96:	2237      	movs	r2, #55	; 0x37
    uint8_t val0 = i2ceeprom.read(0);
 80a0a98:	4606      	mov	r6, r0
    if (! i2ceeprom.write(max_addr, test)) {
 80a0a9a:	4639      	mov	r1, r7
 80a0a9c:	4628      	mov	r0, r5
 80a0a9e:	f003 fa38 	bl	80a3f12 <_ZN19Adafruit_EEPROM_I2C5writeEth>
 80a0aa2:	b950      	cbnz	r0, 80a0aba <_Z11eeprom_testv+0x76>
        Serial.print("Failed to re-write address 0x");
 80a0aa4:	f004 fa20 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0aa8:	4641      	mov	r1, r8
 80a0aaa:	f003 fec2 	bl	80a4832 <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
 80a0aae:	f004 fa1b 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0ab2:	2210      	movs	r2, #16
 80a0ab4:	4621      	mov	r1, r4
 80a0ab6:	f7ff fb63 	bl	80a0180 <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    }    

    // check if addr 0 was changed
    if (val0 == (byte)~test) {
 80a0aba:	2ec8      	cmp	r6, #200	; 0xc8
 80a0abc:	d116      	bne.n	80a0aec <_Z11eeprom_testv+0xa8>
      Serial.println("Found max address");
 80a0abe:	f004 fa13 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0ac2:	4911      	ldr	r1, [pc, #68]	; (80a0b08 <_Z11eeprom_testv+0xc4>)
 80a0ac4:	f003 fec8 	bl	80a4858 <_ZN5Print7printlnEPKc>
      break;
    }
  }
  Serial.print("This EEPROM can store ");
 80a0ac8:	f004 fa0e 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0acc:	490f      	ldr	r1, [pc, #60]	; (80a0b0c <_Z11eeprom_testv+0xc8>)
 80a0ace:	f003 feb0 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print(max_addr);
 80a0ad2:	f004 fa09 	bl	80a4ee8 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 80a0ad6:	4621      	mov	r1, r4
 80a0ad8:	220a      	movs	r2, #10
 80a0ada:	f003 fec9 	bl	80a4870 <_ZN5Print11printNumberEmh>
  Serial.println(" bytes");
 80a0ade:	f004 fa03 	bl	80a4ee8 <_Z16_fetch_usbserialv>
}
 80a0ae2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.println(" bytes");
 80a0ae6:	490a      	ldr	r1, [pc, #40]	; (80a0b10 <_Z11eeprom_testv+0xcc>)
 80a0ae8:	f003 beb6 	b.w	80a4858 <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
 80a0aec:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80a0af0:	3401      	adds	r4, #1
 80a0af2:	429c      	cmp	r4, r3
 80a0af4:	d1b3      	bne.n	80a0a5e <_Z11eeprom_testv+0x1a>
 80a0af6:	e7e7      	b.n	80a0ac8 <_Z11eeprom_testv+0x84>
 80a0af8:	080a92da 	.word	0x080a92da
 80a0afc:	200001b4 	.word	0x200001b4
 80a0b00:	080a9303 	.word	0x080a9303
 80a0b04:	080a92e8 	.word	0x080a92e8
 80a0b08:	080a9321 	.word	0x080a9321
 80a0b0c:	080a9333 	.word	0x080a9333
 80a0b10:	080a934a 	.word	0x080a934a

080a0b14 <_Z22measure_wind_directionv>:
// // V = P(2.25/3) = P * 0.75
// }
// return WindSpeed;
// }

int measure_wind_direction(){
 80a0b14:	b507      	push	{r0, r1, r2, lr}
int VaneValue;// raw analog value from wind vane
int Direction;// translated 0 - 360 direction
int CalDirection;// converted value with offset applied
//int LastValue = 0;
VaneValue = analogRead(vane_pin);
 80a0b16:	4b0d      	ldr	r3, [pc, #52]	; (80a0b4c <_Z22measure_wind_directionv+0x38>)
 80a0b18:	7818      	ldrb	r0, [r3, #0]
 80a0b1a:	f004 fc8e 	bl	80a543a <analogRead>
//digitalWrite(vane_switch, LOW);
//Serial.println("analog read value = ");
//Serial.print(VaneValue);
Direction = map(VaneValue, 0, 4095, 0, 360);
 80a0b1e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80a0b22:	9300      	str	r3, [sp, #0]
 80a0b24:	2300      	movs	r3, #0
 80a0b26:	f640 72ff 	movw	r2, #4095	; 0xfff
 80a0b2a:	4619      	mov	r1, r3
 80a0b2c:	f004 f840 	bl	80a4bb0 <_Z3mapiiiii>
CalDirection = Direction + Offset;

if(CalDirection > 360)
 80a0b30:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 80a0b34:	dd04      	ble.n	80a0b40 <_Z22measure_wind_directionv+0x2c>
CalDirection = CalDirection - 360;
 80a0b36:	f5a0 70b4 	sub.w	r0, r0, #360	; 0x168
  // getHeading(CalDirection);
  // LastValue = CalDirection;
  // }

return CalDirection;
}
 80a0b3a:	b003      	add	sp, #12
 80a0b3c:	f85d fb04 	ldr.w	pc, [sp], #4
if(CalDirection < 0)
 80a0b40:	2800      	cmp	r0, #0
CalDirection = CalDirection + 360;
 80a0b42:	bfb8      	it	lt
 80a0b44:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
return CalDirection;
 80a0b48:	e7f7      	b.n	80a0b3a <_Z22measure_wind_directionv+0x26>
 80a0b4a:	bf00      	nop
 80a0b4c:	20000005 	.word	0x20000005

080a0b50 <_Z16calculateHeadingi>:
Serial.println("NW");
else
Serial.println("N");
} 

String calculateHeading(int direction) {
 80a0b50:	b538      	push	{r3, r4, r5, lr}
 80a0b52:	460d      	mov	r5, r1
  String heading = "xx";
 80a0b54:	4914      	ldr	r1, [pc, #80]	; (80a0ba8 <_Z16calculateHeadingi+0x58>)
String calculateHeading(int direction) {
 80a0b56:	4604      	mov	r4, r0
  String heading = "xx";
 80a0b58:	f003 fdfc 	bl	80a4754 <_ZN6StringC1EPK19__FlashStringHelper>
if(direction < 22)
 80a0b5c:	2d15      	cmp	r5, #21
 80a0b5e:	dc05      	bgt.n	80a0b6c <_Z16calculateHeadingi+0x1c>
heading = "N";
 80a0b60:	4912      	ldr	r1, [pc, #72]	; (80a0bac <_Z16calculateHeadingi+0x5c>)
else if (direction < 247)
heading = "SW";
else if (direction < 292)
heading = "W";
else if (direction < 337)
heading = "NW";
 80a0b62:	4620      	mov	r0, r4
 80a0b64:	f003 fe2e 	bl	80a47c4 <_ZN6StringaSEPKc>
else
heading = "N";

return heading;
} 
 80a0b68:	4620      	mov	r0, r4
 80a0b6a:	bd38      	pop	{r3, r4, r5, pc}
else if (direction < 67)
 80a0b6c:	2d42      	cmp	r5, #66	; 0x42
 80a0b6e:	dc01      	bgt.n	80a0b74 <_Z16calculateHeadingi+0x24>
heading = "NE";
 80a0b70:	490f      	ldr	r1, [pc, #60]	; (80a0bb0 <_Z16calculateHeadingi+0x60>)
 80a0b72:	e7f6      	b.n	80a0b62 <_Z16calculateHeadingi+0x12>
else if (direction < 112)
 80a0b74:	2d6f      	cmp	r5, #111	; 0x6f
 80a0b76:	dc01      	bgt.n	80a0b7c <_Z16calculateHeadingi+0x2c>
heading = "E";
 80a0b78:	490e      	ldr	r1, [pc, #56]	; (80a0bb4 <_Z16calculateHeadingi+0x64>)
 80a0b7a:	e7f2      	b.n	80a0b62 <_Z16calculateHeadingi+0x12>
else if (direction < 157)
 80a0b7c:	2d9c      	cmp	r5, #156	; 0x9c
 80a0b7e:	dc01      	bgt.n	80a0b84 <_Z16calculateHeadingi+0x34>
heading = "SE";
 80a0b80:	490d      	ldr	r1, [pc, #52]	; (80a0bb8 <_Z16calculateHeadingi+0x68>)
 80a0b82:	e7ee      	b.n	80a0b62 <_Z16calculateHeadingi+0x12>
else if (direction < 212)
 80a0b84:	2dd3      	cmp	r5, #211	; 0xd3
 80a0b86:	dc01      	bgt.n	80a0b8c <_Z16calculateHeadingi+0x3c>
heading = "S";
 80a0b88:	490c      	ldr	r1, [pc, #48]	; (80a0bbc <_Z16calculateHeadingi+0x6c>)
 80a0b8a:	e7ea      	b.n	80a0b62 <_Z16calculateHeadingi+0x12>
else if (direction < 247)
 80a0b8c:	2df6      	cmp	r5, #246	; 0xf6
 80a0b8e:	dc01      	bgt.n	80a0b94 <_Z16calculateHeadingi+0x44>
heading = "SW";
 80a0b90:	490b      	ldr	r1, [pc, #44]	; (80a0bc0 <_Z16calculateHeadingi+0x70>)
 80a0b92:	e7e6      	b.n	80a0b62 <_Z16calculateHeadingi+0x12>
else if (direction < 292)
 80a0b94:	f5b5 7f92 	cmp.w	r5, #292	; 0x124
 80a0b98:	da01      	bge.n	80a0b9e <_Z16calculateHeadingi+0x4e>
heading = "W";
 80a0b9a:	490a      	ldr	r1, [pc, #40]	; (80a0bc4 <_Z16calculateHeadingi+0x74>)
 80a0b9c:	e7e1      	b.n	80a0b62 <_Z16calculateHeadingi+0x12>
else if (direction < 337)
 80a0b9e:	f5b5 7fa8 	cmp.w	r5, #336	; 0x150
 80a0ba2:	dcdd      	bgt.n	80a0b60 <_Z16calculateHeadingi+0x10>
heading = "NW";
 80a0ba4:	4908      	ldr	r1, [pc, #32]	; (80a0bc8 <_Z16calculateHeadingi+0x78>)
 80a0ba6:	e7dc      	b.n	80a0b62 <_Z16calculateHeadingi+0x12>
 80a0ba8:	080a9265 	.word	0x080a9265
 80a0bac:	080a9351 	.word	0x080a9351
 80a0bb0:	080a9353 	.word	0x080a9353
 80a0bb4:	080a9354 	.word	0x080a9354
 80a0bb8:	080a9356 	.word	0x080a9356
 80a0bbc:	080a9359 	.word	0x080a9359
 80a0bc0:	080a935b 	.word	0x080a935b
 80a0bc4:	080a935f 	.word	0x080a935f
 80a0bc8:	080a935e 	.word	0x080a935e

080a0bcc <_Z29measure_current_voltage_powerRfS_S_S_S_>:
  Serial.print(F(", "));
  Serial.print((float)event.orientation.z);
  Serial.println(F(""));
}

void measure_current_voltage_power(float& shuntvoltage, float& busvoltage, float& current_mA, float& loadvoltage, float& power_mW){
 80a0bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


  shuntvoltage = ina219.getShuntVoltage_mV();
 80a0bd0:	4e10      	ldr	r6, [pc, #64]	; (80a0c14 <_Z29measure_current_voltage_powerRfS_S_S_S_+0x48>)
void measure_current_voltage_power(float& shuntvoltage, float& busvoltage, float& current_mA, float& loadvoltage, float& power_mW){
 80a0bd2:	4605      	mov	r5, r0
  shuntvoltage = ina219.getShuntVoltage_mV();
 80a0bd4:	4630      	mov	r0, r6
void measure_current_voltage_power(float& shuntvoltage, float& busvoltage, float& current_mA, float& loadvoltage, float& power_mW){
 80a0bd6:	460c      	mov	r4, r1
 80a0bd8:	4690      	mov	r8, r2
 80a0bda:	461f      	mov	r7, r3
  shuntvoltage = ina219.getShuntVoltage_mV();
 80a0bdc:	f001 ff1c 	bl	80a2a18 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv>
 80a0be0:	6028      	str	r0, [r5, #0]
  busvoltage = ina219.getBusVoltage_V();
 80a0be2:	4630      	mov	r0, r6
 80a0be4:	f001 ff2c 	bl	80a2a40 <_ZN15Adafruit_INA21915getBusVoltage_VEv>
 80a0be8:	6020      	str	r0, [r4, #0]
  current_mA = ina219.getCurrent_mA();
 80a0bea:	4630      	mov	r0, r6
 80a0bec:	f001 ff3c 	bl	80a2a68 <_ZN15Adafruit_INA21913getCurrent_mAEv>
 80a0bf0:	f8c8 0000 	str.w	r0, [r8]
  power_mW = ina219.getPower_mW();
 80a0bf4:	4630      	mov	r0, r6
 80a0bf6:	f001 ff46 	bl	80a2a86 <_ZN15Adafruit_INA21911getPower_mWEv>
 80a0bfa:	9b06      	ldr	r3, [sp, #24]
  loadvoltage = busvoltage + (shuntvoltage / 1000);
 80a0bfc:	4906      	ldr	r1, [pc, #24]	; (80a0c18 <_Z29measure_current_voltage_powerRfS_S_S_S_+0x4c>)
  power_mW = ina219.getPower_mW();
 80a0bfe:	6018      	str	r0, [r3, #0]
  loadvoltage = busvoltage + (shuntvoltage / 1000);
 80a0c00:	6828      	ldr	r0, [r5, #0]
 80a0c02:	f007 fed1 	bl	80a89a8 <__aeabi_fdiv>
 80a0c06:	6821      	ldr	r1, [r4, #0]
 80a0c08:	f007 fd12 	bl	80a8630 <__addsf3>
 80a0c0c:	6038      	str	r0, [r7, #0]

}
 80a0c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0c12:	bf00      	nop
 80a0c14:	200001bc 	.word	0x200001bc
 80a0c18:	447a0000 	.word	0x447a0000

080a0c1c <_Z25get_event_compass_headingv>:
  Serial.print("Power:         "); Serial.print(power_mW); Serial.println(" mW");
  Serial.println("");
}


float get_event_compass_heading(){
 80a0c1c:	b530      	push	{r4, r5, lr}
 80a0c1e:	b08b      	sub	sp, #44	; 0x2c
sensors_event_t event;
  bno.getEvent(&event);
 80a0c20:	a901      	add	r1, sp, #4
 80a0c22:	4826      	ldr	r0, [pc, #152]	; (80a0cbc <_Z25get_event_compass_headingv+0xa0>)
 80a0c24:	f002 fa4a 	bl	80a30bc <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  
  /* Display the floating point data */
  Serial.print("X: ");
 80a0c28:	f004 f95e 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0c2c:	4924      	ldr	r1, [pc, #144]	; (80a0cc0 <_Z25get_event_compass_headingv+0xa4>)
 80a0c2e:	f003 fe00 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.x, 4);
 80a0c32:	f004 f959 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0c36:	2204      	movs	r2, #4
 80a0c38:	9906      	ldr	r1, [sp, #24]
 80a0c3a:	f003 ff27 	bl	80a4a8c <_ZN5Print5printEfi>
  Serial.print("\tY: ");
 80a0c3e:	f004 f953 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0c42:	4920      	ldr	r1, [pc, #128]	; (80a0cc4 <_Z25get_event_compass_headingv+0xa8>)
 80a0c44:	f003 fdf5 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.y, 4);
 80a0c48:	f004 f94e 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0c4c:	2204      	movs	r2, #4
 80a0c4e:	9907      	ldr	r1, [sp, #28]
 80a0c50:	f003 ff1c 	bl	80a4a8c <_ZN5Print5printEfi>
  Serial.print("\tZ: ");
 80a0c54:	f004 f948 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0c58:	491b      	ldr	r1, [pc, #108]	; (80a0cc8 <_Z25get_event_compass_headingv+0xac>)
 80a0c5a:	f003 fdea 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print(event.orientation.z, 4);
 80a0c5e:	f004 f943 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0c62:	2204      	movs	r2, #4
 80a0c64:	9908      	ldr	r1, [sp, #32]
 80a0c66:	f003 ff11 	bl	80a4a8c <_ZN5Print5printEfi>
  Serial.println("");
 80a0c6a:	f004 f93d 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0c6e:	4917      	ldr	r1, [pc, #92]	; (80a0ccc <_Z25get_event_compass_headingv+0xb0>)
 80a0c70:	f003 fdf2 	bl	80a4858 <_ZN5Print7printlnEPKc>

  Serial.println("\n\n");
 80a0c74:	f004 f938 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0c78:	4915      	ldr	r1, [pc, #84]	; (80a0cd0 <_Z25get_event_compass_headingv+0xb4>)
 80a0c7a:	f003 fded 	bl	80a4858 <_ZN5Print7printlnEPKc>

  compass_heading = event.orientation.x + 104;
 80a0c7e:	4915      	ldr	r1, [pc, #84]	; (80a0cd4 <_Z25get_event_compass_headingv+0xb8>)
 80a0c80:	9806      	ldr	r0, [sp, #24]
 80a0c82:	f007 fcd5 	bl	80a8630 <__addsf3>

  if(compass_heading > 360) {
 80a0c86:	4914      	ldr	r1, [pc, #80]	; (80a0cd8 <_Z25get_event_compass_headingv+0xbc>)
  compass_heading = event.orientation.x + 104;
 80a0c88:	4605      	mov	r5, r0
  if(compass_heading > 360) {
 80a0c8a:	f007 ff95 	bl	80a8bb8 <__aeabi_fcmpgt>
 80a0c8e:	4c13      	ldr	r4, [pc, #76]	; (80a0cdc <_Z25get_event_compass_headingv+0xc0>)
 80a0c90:	b970      	cbnz	r0, 80a0cb0 <_Z25get_event_compass_headingv+0x94>
  compass_heading = event.orientation.x + 104;
 80a0c92:	6025      	str	r5, [r4, #0]
    compass_heading = compass_heading - 360;
  }
  
  Serial.print("compass heading:  ");
 80a0c94:	f004 f928 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0c98:	4911      	ldr	r1, [pc, #68]	; (80a0ce0 <_Z25get_event_compass_headingv+0xc4>)
 80a0c9a:	f003 fdca 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print(compass_heading, 4);
 80a0c9e:	f004 f923 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0ca2:	2204      	movs	r2, #4
 80a0ca4:	6821      	ldr	r1, [r4, #0]
 80a0ca6:	f003 fef1 	bl	80a4a8c <_ZN5Print5printEfi>
  return compass_heading;
}
 80a0caa:	6820      	ldr	r0, [r4, #0]
 80a0cac:	b00b      	add	sp, #44	; 0x2c
 80a0cae:	bd30      	pop	{r4, r5, pc}
    compass_heading = compass_heading - 360;
 80a0cb0:	4628      	mov	r0, r5
 80a0cb2:	4909      	ldr	r1, [pc, #36]	; (80a0cd8 <_Z25get_event_compass_headingv+0xbc>)
 80a0cb4:	f007 fcba 	bl	80a862c <__aeabi_fsub>
 80a0cb8:	6020      	str	r0, [r4, #0]
 80a0cba:	e7eb      	b.n	80a0c94 <_Z25get_event_compass_headingv+0x78>
 80a0cbc:	20000100 	.word	0x20000100
 80a0cc0:	080a93c0 	.word	0x080a93c0
 80a0cc4:	080a93c4 	.word	0x080a93c4
 80a0cc8:	080a93c9 	.word	0x080a93c9
 80a0ccc:	080a93e5 	.word	0x080a93e5
 80a0cd0:	080a93ce 	.word	0x080a93ce
 80a0cd4:	42d00000 	.word	0x42d00000
 80a0cd8:	43b40000 	.word	0x43b40000
 80a0cdc:	2000012c 	.word	0x2000012c
 80a0ce0:	080a93d1 	.word	0x080a93d1

080a0ce4 <_GLOBAL__sub_I_i2ceeprom>:
}
 80a0ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
Adafruit_EEPROM_I2C i2ceeprom;
 80a0ce6:	4814      	ldr	r0, [pc, #80]	; (80a0d38 <_GLOBAL__sub_I_i2ceeprom+0x54>)
 80a0ce8:	f003 f8fa 	bl	80a3ee0 <_ZN19Adafruit_EEPROM_I2CC1Ev>
Adafruit_INA219 ina219;
 80a0cec:	2140      	movs	r1, #64	; 0x40
 80a0cee:	4813      	ldr	r0, [pc, #76]	; (80a0d3c <_GLOBAL__sub_I_i2ceeprom+0x58>)
 80a0cf0:	f001 fe15 	bl	80a291e <_ZN15Adafruit_INA219C1Eh>
Adafruit_BME280 bme; // I2C
 80a0cf4:	4812      	ldr	r0, [pc, #72]	; (80a0d40 <_GLOBAL__sub_I_i2ceeprom+0x5c>)
 80a0cf6:	f000 feb1 	bl	80a1a5c <_ZN15Adafruit_BME280C1Ev>
Adafruit_SH1107 display = Adafruit_SH1107(64, 128, &Wire);
 80a0cfa:	f004 fc31 	bl	80a5560 <_Z19__fetch_global_Wirev>
 80a0cfe:	4a11      	ldr	r2, [pc, #68]	; (80a0d44 <_GLOBAL__sub_I_i2ceeprom+0x60>)
 80a0d00:	4911      	ldr	r1, [pc, #68]	; (80a0d48 <_GLOBAL__sub_I_i2ceeprom+0x64>)
 80a0d02:	4603      	mov	r3, r0
 80a0d04:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80a0d08:	f04f 32ff 	mov.w	r2, #4294967295
 80a0d0c:	2140      	movs	r1, #64	; 0x40
 80a0d0e:	9200      	str	r2, [sp, #0]
 80a0d10:	480e      	ldr	r0, [pc, #56]	; (80a0d4c <_GLOBAL__sub_I_i2ceeprom+0x68>)
 80a0d12:	2280      	movs	r2, #128	; 0x80
 80a0d14:	f003 f85e 	bl	80a3dd4 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
 80a0d18:	f004 fc22 	bl	80a5560 <_Z19__fetch_global_Wirev>
 80a0d1c:	2228      	movs	r2, #40	; 0x28
 80a0d1e:	4603      	mov	r3, r0
 80a0d20:	2137      	movs	r1, #55	; 0x37
 80a0d22:	480b      	ldr	r0, [pc, #44]	; (80a0d50 <_GLOBAL__sub_I_i2ceeprom+0x6c>)
 80a0d24:	f001 ff0a 	bl	80a2b3c <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
String heading;
 80a0d28:	490a      	ldr	r1, [pc, #40]	; (80a0d54 <_GLOBAL__sub_I_i2ceeprom+0x70>)
 80a0d2a:	480b      	ldr	r0, [pc, #44]	; (80a0d58 <_GLOBAL__sub_I_i2ceeprom+0x74>)
}
 80a0d2c:	b005      	add	sp, #20
 80a0d2e:	f85d eb04 	ldr.w	lr, [sp], #4
String heading;
 80a0d32:	f003 bd0f 	b.w	80a4754 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0d36:	bf00      	nop
 80a0d38:	200001b4 	.word	0x200001b4
 80a0d3c:	200001bc 	.word	0x200001bc
 80a0d40:	2000008c 	.word	0x2000008c
 80a0d44:	00061a80 	.word	0x00061a80
 80a0d48:	000186a0 	.word	0x000186a0
 80a0d4c:	2000013c 	.word	0x2000013c
 80a0d50:	20000100 	.word	0x20000100
 80a0d54:	080a93e5 	.word	0x080a93e5
 80a0d58:	200001a4 	.word	0x200001a4

080a0d5c <_Z16displayCalStatusv>:
{
 80a0d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    system = gyro = accel = mag = 0;
 80a0d5e:	2300      	movs	r3, #0
 80a0d60:	f88d 300f 	strb.w	r3, [sp, #15]
 80a0d64:	f88d 300e 	strb.w	r3, [sp, #14]
 80a0d68:	f88d 300d 	strb.w	r3, [sp, #13]
 80a0d6c:	f88d 300c 	strb.w	r3, [sp, #12]
    bno.getCalibration(&system, &gyro, &accel, &mag);
 80a0d70:	f10d 030f 	add.w	r3, sp, #15
 80a0d74:	f10d 020d 	add.w	r2, sp, #13
 80a0d78:	a903      	add	r1, sp, #12
 80a0d7a:	483b      	ldr	r0, [pc, #236]	; (80a0e68 <_Z16displayCalStatusv+0x10c>)
 80a0d7c:	9300      	str	r3, [sp, #0]
 80a0d7e:	f10d 030e 	add.w	r3, sp, #14
 80a0d82:	f002 f83d 	bl	80a2e00 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
    Serial.print("\t");
 80a0d86:	f004 f8af 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0d8a:	4938      	ldr	r1, [pc, #224]	; (80a0e6c <_Z16displayCalStatusv+0x110>)
 80a0d8c:	f003 fd51 	bl	80a4832 <_ZN5Print5printEPKc>
    if (!system)
 80a0d90:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80a0d94:	b923      	cbnz	r3, 80a0da0 <_Z16displayCalStatusv+0x44>
        Serial.print("! ");
 80a0d96:	f004 f8a7 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0d9a:	4935      	ldr	r1, [pc, #212]	; (80a0e70 <_Z16displayCalStatusv+0x114>)
 80a0d9c:	f003 fd49 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print("Sys:");
 80a0da0:	f004 f8a2 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0da4:	4933      	ldr	r1, [pc, #204]	; (80a0e74 <_Z16displayCalStatusv+0x118>)
 80a0da6:	f003 fd44 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(system, DEC);
 80a0daa:	f004 f89d 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0dae:	220a      	movs	r2, #10
 80a0db0:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80a0db4:	f7ff f9d4 	bl	80a0160 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    Serial.print(" G:");
 80a0db8:	f004 f896 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0dbc:	492e      	ldr	r1, [pc, #184]	; (80a0e78 <_Z16displayCalStatusv+0x11c>)
 80a0dbe:	f003 fd38 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(gyro, DEC);
 80a0dc2:	f004 f891 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0dc6:	220a      	movs	r2, #10
 80a0dc8:	f89d 100d 	ldrb.w	r1, [sp, #13]
 80a0dcc:	f7ff f9c8 	bl	80a0160 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    Serial.print(" A:");
 80a0dd0:	f004 f88a 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0dd4:	4929      	ldr	r1, [pc, #164]	; (80a0e7c <_Z16displayCalStatusv+0x120>)
 80a0dd6:	f003 fd2c 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(accel, DEC);
 80a0dda:	f004 f885 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0dde:	220a      	movs	r2, #10
 80a0de0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    display.clearDisplay();
 80a0de4:	4c26      	ldr	r4, [pc, #152]	; (80a0e80 <_Z16displayCalStatusv+0x124>)
    Serial.print(accel, DEC);
 80a0de6:	f7ff f9bb 	bl	80a0160 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    Serial.print(" M:");
 80a0dea:	f004 f87d 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0dee:	4925      	ldr	r1, [pc, #148]	; (80a0e84 <_Z16displayCalStatusv+0x128>)
 80a0df0:	f003 fd1f 	bl	80a4832 <_ZN5Print5printEPKc>
    Serial.print(mag, DEC);
 80a0df4:	f004 f878 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a0df8:	220a      	movs	r2, #10
 80a0dfa:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80a0dfe:	f7ff f9af 	bl	80a0160 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    display.clearDisplay();
 80a0e02:	4620      	mov	r0, r4
 80a0e04:	f002 faae 	bl	80a3364 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
 80a0e08:	2300      	movs	r3, #0
    display.print("Sys:");
 80a0e0a:	4620      	mov	r0, r4
 80a0e0c:	4919      	ldr	r1, [pc, #100]	; (80a0e74 <_Z16displayCalStatusv+0x118>)
 80a0e0e:	6123      	str	r3, [r4, #16]
 80a0e10:	f003 fd0f 	bl	80a4832 <_ZN5Print5printEPKc>
    display.print(system, DEC);
 80a0e14:	220a      	movs	r2, #10
 80a0e16:	4620      	mov	r0, r4
 80a0e18:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80a0e1c:	f7ff f9a0 	bl	80a0160 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    display.print(" G:");
 80a0e20:	4620      	mov	r0, r4
 80a0e22:	4915      	ldr	r1, [pc, #84]	; (80a0e78 <_Z16displayCalStatusv+0x11c>)
 80a0e24:	f003 fd05 	bl	80a4832 <_ZN5Print5printEPKc>
    display.print(gyro, DEC);
 80a0e28:	220a      	movs	r2, #10
 80a0e2a:	4620      	mov	r0, r4
 80a0e2c:	f89d 100d 	ldrb.w	r1, [sp, #13]
 80a0e30:	f7ff f996 	bl	80a0160 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    display.print(" A:");
 80a0e34:	4620      	mov	r0, r4
 80a0e36:	4911      	ldr	r1, [pc, #68]	; (80a0e7c <_Z16displayCalStatusv+0x120>)
 80a0e38:	f003 fcfb 	bl	80a4832 <_ZN5Print5printEPKc>
    display.print(accel, DEC);
 80a0e3c:	220a      	movs	r2, #10
 80a0e3e:	4620      	mov	r0, r4
 80a0e40:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80a0e44:	f7ff f98c 	bl	80a0160 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    display.print(" M:");
 80a0e48:	4620      	mov	r0, r4
 80a0e4a:	490e      	ldr	r1, [pc, #56]	; (80a0e84 <_Z16displayCalStatusv+0x128>)
 80a0e4c:	f003 fcf1 	bl	80a4832 <_ZN5Print5printEPKc>
    display.print(mag, DEC);
 80a0e50:	220a      	movs	r2, #10
 80a0e52:	4620      	mov	r0, r4
 80a0e54:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80a0e58:	f7ff f982 	bl	80a0160 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    display.display();
 80a0e5c:	4620      	mov	r0, r4
 80a0e5e:	f002 fed8 	bl	80a3c12 <_ZN15Adafruit_SH110X7displayEv>
}
 80a0e62:	b004      	add	sp, #16
 80a0e64:	bd10      	pop	{r4, pc}
 80a0e66:	bf00      	nop
 80a0e68:	20000100 	.word	0x20000100
 80a0e6c:	080a93e4 	.word	0x080a93e4
 80a0e70:	080a93e6 	.word	0x080a93e6
 80a0e74:	080a93e9 	.word	0x080a93e9
 80a0e78:	080a93ee 	.word	0x080a93ee
 80a0e7c:	080a93f2 	.word	0x080a93f2
 80a0e80:	2000013c 	.word	0x2000013c
 80a0e84:	080a93f6 	.word	0x080a93f6

080a0e88 <_Z14displayValues1lllllll>:
void displayValues1(int32_t bme_temperature_average, int32_t bme_pressure_average, int32_t bme_humidity_average, int32_t bme_altitude_average, int32_t busvoltage_average, int32_t current_mA_average, int32_t power_mW_average) {
 80a0e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    display.clearDisplay();
 80a0e8c:	4c38      	ldr	r4, [pc, #224]	; (80a0f70 <_Z14displayValues1lllllll+0xe8>)
void displayValues1(int32_t bme_temperature_average, int32_t bme_pressure_average, int32_t bme_humidity_average, int32_t bme_altitude_average, int32_t busvoltage_average, int32_t current_mA_average, int32_t power_mW_average) {
 80a0e8e:	4680      	mov	r8, r0
 80a0e90:	e9dd ba0a 	ldrd	fp, sl, [sp, #40]	; 0x28
    display.clearDisplay();
 80a0e94:	4620      	mov	r0, r4
void displayValues1(int32_t bme_temperature_average, int32_t bme_pressure_average, int32_t bme_humidity_average, int32_t bme_altitude_average, int32_t busvoltage_average, int32_t current_mA_average, int32_t power_mW_average) {
 80a0e96:	4616      	mov	r6, r2
 80a0e98:	460f      	mov	r7, r1
 80a0e9a:	461d      	mov	r5, r3
 80a0e9c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    display.clearDisplay();
 80a0ea0:	f002 fa60 	bl	80a3364 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
 80a0ea4:	4620      	mov	r0, r4
 80a0ea6:	f002 feb4 	bl	80a3c12 <_ZN15Adafruit_SH110X7displayEv>
 80a0eaa:	2300      	movs	r3, #0
    display.print("Temp. = ");
 80a0eac:	4620      	mov	r0, r4
 80a0eae:	4931      	ldr	r1, [pc, #196]	; (80a0f74 <_Z14displayValues1lllllll+0xec>)
 80a0eb0:	6123      	str	r3, [r4, #16]
 80a0eb2:	f003 fcbe 	bl	80a4832 <_ZN5Print5printEPKc>
    display.print(bme_temperature_average);
 80a0eb6:	220a      	movs	r2, #10
 80a0eb8:	4641      	mov	r1, r8
 80a0eba:	4620      	mov	r0, r4
 80a0ebc:	f7ff f935 	bl	80a012a <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" F");
 80a0ec0:	4620      	mov	r0, r4
 80a0ec2:	492d      	ldr	r1, [pc, #180]	; (80a0f78 <_Z14displayValues1lllllll+0xf0>)
 80a0ec4:	f003 fcc8 	bl	80a4858 <_ZN5Print7printlnEPKc>
    display.print("Press. = ");
 80a0ec8:	4620      	mov	r0, r4
 80a0eca:	492c      	ldr	r1, [pc, #176]	; (80a0f7c <_Z14displayValues1lllllll+0xf4>)
 80a0ecc:	f003 fcb1 	bl	80a4832 <_ZN5Print5printEPKc>
    display.print(bme_pressure_average);
 80a0ed0:	220a      	movs	r2, #10
 80a0ed2:	4639      	mov	r1, r7
 80a0ed4:	4620      	mov	r0, r4
 80a0ed6:	f7ff f928 	bl	80a012a <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" mmHg");
 80a0eda:	4620      	mov	r0, r4
 80a0edc:	4928      	ldr	r1, [pc, #160]	; (80a0f80 <_Z14displayValues1lllllll+0xf8>)
 80a0ede:	f003 fcbb 	bl	80a4858 <_ZN5Print7printlnEPKc>
    display.print("Humidity = ");
 80a0ee2:	4620      	mov	r0, r4
 80a0ee4:	4927      	ldr	r1, [pc, #156]	; (80a0f84 <_Z14displayValues1lllllll+0xfc>)
 80a0ee6:	f003 fca4 	bl	80a4832 <_ZN5Print5printEPKc>
    display.print(bme_humidity_average);
 80a0eea:	220a      	movs	r2, #10
 80a0eec:	4631      	mov	r1, r6
 80a0eee:	4620      	mov	r0, r4
 80a0ef0:	f7ff f91b 	bl	80a012a <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" %");
 80a0ef4:	4620      	mov	r0, r4
 80a0ef6:	4924      	ldr	r1, [pc, #144]	; (80a0f88 <_Z14displayValues1lllllll+0x100>)
 80a0ef8:	f003 fcae 	bl	80a4858 <_ZN5Print7printlnEPKc>
    display.print("Altitude = ");
 80a0efc:	4620      	mov	r0, r4
 80a0efe:	4923      	ldr	r1, [pc, #140]	; (80a0f8c <_Z14displayValues1lllllll+0x104>)
 80a0f00:	f003 fc97 	bl	80a4832 <_ZN5Print5printEPKc>
    display.print(bme_altitude_average);
 80a0f04:	220a      	movs	r2, #10
 80a0f06:	4629      	mov	r1, r5
 80a0f08:	4620      	mov	r0, r4
 80a0f0a:	f7ff f90e 	bl	80a012a <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" m");
 80a0f0e:	4620      	mov	r0, r4
 80a0f10:	491f      	ldr	r1, [pc, #124]	; (80a0f90 <_Z14displayValues1lllllll+0x108>)
 80a0f12:	f003 fca1 	bl	80a4858 <_ZN5Print7printlnEPKc>
    display.print("Bus voltage = ");
 80a0f16:	4620      	mov	r0, r4
 80a0f18:	491e      	ldr	r1, [pc, #120]	; (80a0f94 <_Z14displayValues1lllllll+0x10c>)
 80a0f1a:	f003 fc8a 	bl	80a4832 <_ZN5Print5printEPKc>
    display.print(busvoltage_average);
 80a0f1e:	220a      	movs	r2, #10
 80a0f20:	4659      	mov	r1, fp
 80a0f22:	4620      	mov	r0, r4
 80a0f24:	f7ff f901 	bl	80a012a <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" V");
 80a0f28:	4620      	mov	r0, r4
 80a0f2a:	491b      	ldr	r1, [pc, #108]	; (80a0f98 <_Z14displayValues1lllllll+0x110>)
 80a0f2c:	f003 fc94 	bl	80a4858 <_ZN5Print7printlnEPKc>
    display.print("current = ");
 80a0f30:	4620      	mov	r0, r4
 80a0f32:	491a      	ldr	r1, [pc, #104]	; (80a0f9c <_Z14displayValues1lllllll+0x114>)
 80a0f34:	f003 fc7d 	bl	80a4832 <_ZN5Print5printEPKc>
    display.print(current_mA_average);
 80a0f38:	220a      	movs	r2, #10
 80a0f3a:	4651      	mov	r1, sl
 80a0f3c:	4620      	mov	r0, r4
 80a0f3e:	f7ff f8f4 	bl	80a012a <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" mA");
 80a0f42:	4620      	mov	r0, r4
 80a0f44:	4916      	ldr	r1, [pc, #88]	; (80a0fa0 <_Z14displayValues1lllllll+0x118>)
 80a0f46:	f003 fc87 	bl	80a4858 <_ZN5Print7printlnEPKc>
    display.print("power = ");
 80a0f4a:	4620      	mov	r0, r4
 80a0f4c:	4915      	ldr	r1, [pc, #84]	; (80a0fa4 <_Z14displayValues1lllllll+0x11c>)
 80a0f4e:	f003 fc70 	bl	80a4832 <_ZN5Print5printEPKc>
    display.print(power_mW_average);
 80a0f52:	4649      	mov	r1, r9
 80a0f54:	4620      	mov	r0, r4
 80a0f56:	220a      	movs	r2, #10
 80a0f58:	f7ff f8e7 	bl	80a012a <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" mW");
 80a0f5c:	4620      	mov	r0, r4
 80a0f5e:	4912      	ldr	r1, [pc, #72]	; (80a0fa8 <_Z14displayValues1lllllll+0x120>)
 80a0f60:	f003 fc7a 	bl	80a4858 <_ZN5Print7printlnEPKc>
    display.display(); // actually display all of the above
 80a0f64:	4620      	mov	r0, r4
  }
 80a0f66:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    display.display(); // actually display all of the above
 80a0f6a:	f002 be52 	b.w	80a3c12 <_ZN15Adafruit_SH110X7displayEv>
 80a0f6e:	bf00      	nop
 80a0f70:	2000013c 	.word	0x2000013c
 80a0f74:	080a93fa 	.word	0x080a93fa
 80a0f78:	080a91c7 	.word	0x080a91c7
 80a0f7c:	080a9403 	.word	0x080a9403
 80a0f80:	080a91d6 	.word	0x080a91d6
 80a0f84:	080a91f3 	.word	0x080a91f3
 80a0f88:	080a91ff 	.word	0x080a91ff
 80a0f8c:	080a91e4 	.word	0x080a91e4
 80a0f90:	080a91f0 	.word	0x080a91f0
 80a0f94:	080a940d 	.word	0x080a940d
 80a0f98:	080a9371 	.word	0x080a9371
 80a0f9c:	080a941c 	.word	0x080a941c
 80a0fa0:	080a93a8 	.word	0x080a93a8
 80a0fa4:	080a9427 	.word	0x080a9427
 80a0fa8:	080a93bc 	.word	0x080a93bc

080a0fac <_Z14displayValues2lR6StringRf>:
void displayValues2(int32_t vane_wind_direction_average, String& heading  , float& WindSpeed) {
 80a0fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    display.clearDisplay();
 80a0fae:	4c19      	ldr	r4, [pc, #100]	; (80a1014 <_Z14displayValues2lR6StringRf+0x68>)
void displayValues2(int32_t vane_wind_direction_average, String& heading  , float& WindSpeed) {
 80a0fb0:	4607      	mov	r7, r0
    display.clearDisplay();
 80a0fb2:	4620      	mov	r0, r4
void displayValues2(int32_t vane_wind_direction_average, String& heading  , float& WindSpeed) {
 80a0fb4:	4615      	mov	r5, r2
 80a0fb6:	460e      	mov	r6, r1
    display.clearDisplay();
 80a0fb8:	f002 f9d4 	bl	80a3364 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
 80a0fbc:	4620      	mov	r0, r4
 80a0fbe:	f002 fe28 	bl	80a3c12 <_ZN15Adafruit_SH110X7displayEv>
 80a0fc2:	2300      	movs	r3, #0
    display.print("vane dir. = ");
 80a0fc4:	4620      	mov	r0, r4
 80a0fc6:	4914      	ldr	r1, [pc, #80]	; (80a1018 <_Z14displayValues2lR6StringRf+0x6c>)
 80a0fc8:	6123      	str	r3, [r4, #16]
 80a0fca:	f003 fc32 	bl	80a4832 <_ZN5Print5printEPKc>
    display.print(vane_wind_direction_average);
 80a0fce:	220a      	movs	r2, #10
 80a0fd0:	4639      	mov	r1, r7
 80a0fd2:	4620      	mov	r0, r4
 80a0fd4:	f7ff f8a9 	bl	80a012a <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" d");
 80a0fd8:	4620      	mov	r0, r4
 80a0fda:	4910      	ldr	r1, [pc, #64]	; (80a101c <_Z14displayValues2lR6StringRf+0x70>)
 80a0fdc:	f003 fc3c 	bl	80a4858 <_ZN5Print7printlnEPKc>
    display.print("heading = ");
 80a0fe0:	4620      	mov	r0, r4
 80a0fe2:	490f      	ldr	r1, [pc, #60]	; (80a1020 <_Z14displayValues2lR6StringRf+0x74>)
 80a0fe4:	f003 fc25 	bl	80a4832 <_ZN5Print5printEPKc>
    display.println(heading);
 80a0fe8:	6831      	ldr	r1, [r6, #0]
 80a0fea:	4620      	mov	r0, r4
 80a0fec:	f003 fc34 	bl	80a4858 <_ZN5Print7printlnEPKc>
    display.print("WindSpeed = ");
 80a0ff0:	4620      	mov	r0, r4
 80a0ff2:	490c      	ldr	r1, [pc, #48]	; (80a1024 <_Z14displayValues2lR6StringRf+0x78>)
 80a0ff4:	f003 fc1d 	bl	80a4832 <_ZN5Print5printEPKc>
    display.print(WindSpeed);
 80a0ff8:	6829      	ldr	r1, [r5, #0]
 80a0ffa:	2202      	movs	r2, #2
 80a0ffc:	4620      	mov	r0, r4
 80a0ffe:	f003 fd45 	bl	80a4a8c <_ZN5Print5printEfi>
    display.println(" mph");
 80a1002:	4620      	mov	r0, r4
 80a1004:	4908      	ldr	r1, [pc, #32]	; (80a1028 <_Z14displayValues2lR6StringRf+0x7c>)
 80a1006:	f003 fc27 	bl	80a4858 <_ZN5Print7printlnEPKc>
  display.display(); // actually display all of the above
 80a100a:	4620      	mov	r0, r4
  }
 80a100c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  display.display(); // actually display all of the above
 80a1010:	f002 bdff 	b.w	80a3c12 <_ZN15Adafruit_SH110X7displayEv>
 80a1014:	2000013c 	.word	0x2000013c
 80a1018:	080a9430 	.word	0x080a9430
 80a101c:	080a943d 	.word	0x080a943d
 80a1020:	080a9440 	.word	0x080a9440
 80a1024:	080a944b 	.word	0x080a944b
 80a1028:	080a9458 	.word	0x080a9458

080a102c <loop>:
void loop(void) {
 80a102c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
digitalWrite(vane_switch, HIGH);
 80a1030:	4bc3      	ldr	r3, [pc, #780]	; (80a1340 <loop+0x314>)
void loop(void) {
 80a1032:	b08b      	sub	sp, #44	; 0x2c
digitalWrite(vane_switch, HIGH);
 80a1034:	2101      	movs	r1, #1
 80a1036:	7818      	ldrb	r0, [r3, #0]
 80a1038:	f004 f9d3 	bl	80a53e2 <digitalWrite>
vane_wind_direction = measure_wind_direction();
 80a103c:	f7ff fd6a 	bl	80a0b14 <_Z22measure_wind_directionv>
read_bme_values(bme_temperature, bme_pressure, bme_humidity, bme_altitude);
 80a1040:	4cc0      	ldr	r4, [pc, #768]	; (80a1344 <loop+0x318>)
 80a1042:	4dc1      	ldr	r5, [pc, #772]	; (80a1348 <loop+0x31c>)
 80a1044:	4ec1      	ldr	r6, [pc, #772]	; (80a134c <loop+0x320>)
 80a1046:	4fc2      	ldr	r7, [pc, #776]	; (80a1350 <loop+0x324>)
vane_wind_direction = measure_wind_direction();
 80a1048:	f8df a308 	ldr.w	sl, [pc, #776]	; 80a1354 <loop+0x328>
read_bme_values(bme_temperature, bme_pressure, bme_humidity, bme_altitude);
 80a104c:	4623      	mov	r3, r4
 80a104e:	462a      	mov	r2, r5
 80a1050:	4631      	mov	r1, r6
vane_wind_direction = measure_wind_direction();
 80a1052:	f8ca 0000 	str.w	r0, [sl]
read_bme_values(bme_temperature, bme_pressure, bme_humidity, bme_altitude);
 80a1056:	4638      	mov	r0, r7
 80a1058:	f7ff f8f2 	bl	80a0240 <_Z15read_bme_valuesRfS_S_S_>
printValues(bme_temperature, bme_pressure, bme_humidity, bme_altitude);
 80a105c:	4623      	mov	r3, r4
 80a105e:	462a      	mov	r2, r5
 80a1060:	4631      	mov	r1, r6
 80a1062:	4638      	mov	r0, r7
 80a1064:	f7ff f91e 	bl	80a02a4 <_Z11printValuesRfS_S_S_>
event_compass_heading = get_event_compass_heading();
 80a1068:	f7ff fdd8 	bl	80a0c1c <_Z25get_event_compass_headingv>
 80a106c:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 80a1358 <loop+0x32c>
  measure_current_voltage_power(shuntvoltage, busvoltage,current_mA, loadvoltage, power_mW );
 80a1070:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 80a135c <loop+0x330>
event_compass_heading = get_event_compass_heading();
 80a1074:	f8c9 0000 	str.w	r0, [r9]
  bno_compass_heading = get_compass_heading();
 80a1078:	f7ff faa6 	bl	80a05c8 <_Z19get_compass_headingv>
 80a107c:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 80a1360 <loop+0x334>
  measure_current_voltage_power(shuntvoltage, busvoltage,current_mA, loadvoltage, power_mW );
 80a1080:	49b8      	ldr	r1, [pc, #736]	; (80a1364 <loop+0x338>)
 80a1082:	4ab9      	ldr	r2, [pc, #740]	; (80a1368 <loop+0x33c>)
 80a1084:	4bb9      	ldr	r3, [pc, #740]	; (80a136c <loop+0x340>)
  bno_compass_heading = get_compass_heading();
 80a1086:	f8c8 0000 	str.w	r0, [r8]
  measure_current_voltage_power(shuntvoltage, busvoltage,current_mA, loadvoltage, power_mW );
 80a108a:	48b9      	ldr	r0, [pc, #740]	; (80a1370 <loop+0x344>)
 80a108c:	f8cd b000 	str.w	fp, [sp]
 80a1090:	f7ff fd9c 	bl	80a0bcc <_Z29measure_current_voltage_powerRfS_S_S_S_>
bme_temperature_total = bme_temperature_total + (int) bme_temperature;
 80a1094:	6838      	ldr	r0, [r7, #0]
 80a1096:	f007 fd99 	bl	80a8bcc <__aeabi_f2iz>
 80a109a:	4ab6      	ldr	r2, [pc, #728]	; (80a1374 <loop+0x348>)
bme_pressure_total = bme_pressure_total + (int) bme_pressure;
 80a109c:	4fb6      	ldr	r7, [pc, #728]	; (80a1378 <loop+0x34c>)
bme_temperature_total = bme_temperature_total + (int) bme_temperature;
 80a109e:	6813      	ldr	r3, [r2, #0]
 80a10a0:	4418      	add	r0, r3
 80a10a2:	6010      	str	r0, [r2, #0]
bme_pressure_total = bme_pressure_total + (int) bme_pressure;
 80a10a4:	6830      	ldr	r0, [r6, #0]
 80a10a6:	f007 fd91 	bl	80a8bcc <__aeabi_f2iz>
 80a10aa:	683b      	ldr	r3, [r7, #0]
bme_humidity_total = bme_humidity_total + (int) bme_humidity;
 80a10ac:	4eb3      	ldr	r6, [pc, #716]	; (80a137c <loop+0x350>)
bme_pressure_total = bme_pressure_total + (int) bme_pressure;
 80a10ae:	4418      	add	r0, r3
 80a10b0:	6038      	str	r0, [r7, #0]
bme_humidity_total = bme_humidity_total + (int) bme_humidity;
 80a10b2:	6828      	ldr	r0, [r5, #0]
 80a10b4:	f007 fd8a 	bl	80a8bcc <__aeabi_f2iz>
 80a10b8:	6833      	ldr	r3, [r6, #0]
bme_altitude_total = bme_altitude_total + (int) bme_altitude;
 80a10ba:	4db1      	ldr	r5, [pc, #708]	; (80a1380 <loop+0x354>)
bme_humidity_total = bme_humidity_total + (int) bme_humidity;
 80a10bc:	4418      	add	r0, r3
 80a10be:	6030      	str	r0, [r6, #0]
bme_altitude_total = bme_altitude_total + (int) bme_altitude;
 80a10c0:	6820      	ldr	r0, [r4, #0]
 80a10c2:	f007 fd83 	bl	80a8bcc <__aeabi_f2iz>
 80a10c6:	682b      	ldr	r3, [r5, #0]
busvoltage_total = busvoltage_total + (int) busvoltage;
 80a10c8:	49a6      	ldr	r1, [pc, #664]	; (80a1364 <loop+0x338>)
bme_altitude_total = bme_altitude_total + (int) bme_altitude;
 80a10ca:	4418      	add	r0, r3
 80a10cc:	6028      	str	r0, [r5, #0]
busvoltage_total = busvoltage_total + (int) busvoltage;
 80a10ce:	6808      	ldr	r0, [r1, #0]
 80a10d0:	f007 fd7c 	bl	80a8bcc <__aeabi_f2iz>
 80a10d4:	4aab      	ldr	r2, [pc, #684]	; (80a1384 <loop+0x358>)
if ((millis() - timeFromLastReading) > average_time_interval) {
 80a10d6:	4cac      	ldr	r4, [pc, #688]	; (80a1388 <loop+0x35c>)
busvoltage_total = busvoltage_total + (int) busvoltage;
 80a10d8:	6813      	ldr	r3, [r2, #0]
 80a10da:	4418      	add	r0, r3
 80a10dc:	6010      	str	r0, [r2, #0]
current_mA_total = current_mA_total + (int) current_mA;
 80a10de:	4aa2      	ldr	r2, [pc, #648]	; (80a1368 <loop+0x33c>)
 80a10e0:	6810      	ldr	r0, [r2, #0]
 80a10e2:	f007 fd73 	bl	80a8bcc <__aeabi_f2iz>
 80a10e6:	4aa9      	ldr	r2, [pc, #676]	; (80a138c <loop+0x360>)
 80a10e8:	6813      	ldr	r3, [r2, #0]
 80a10ea:	4418      	add	r0, r3
 80a10ec:	6010      	str	r0, [r2, #0]
power_mW_total = power_mW_total + (int) power_mW;
 80a10ee:	f8db 0000 	ldr.w	r0, [fp]
 80a10f2:	f007 fd6b 	bl	80a8bcc <__aeabi_f2iz>
 80a10f6:	4aa6      	ldr	r2, [pc, #664]	; (80a1390 <loop+0x364>)
vane_wind_direction_total = vane_wind_direction_total + (int) vane_wind_direction;
 80a10f8:	f8df b298 	ldr.w	fp, [pc, #664]	; 80a1394 <loop+0x368>
power_mW_total = power_mW_total + (int) power_mW;
 80a10fc:	6813      	ldr	r3, [r2, #0]
 80a10fe:	4418      	add	r0, r3
 80a1100:	6010      	str	r0, [r2, #0]
vane_wind_direction_total = vane_wind_direction_total + (int) vane_wind_direction;
 80a1102:	f8db 3000 	ldr.w	r3, [fp]
 80a1106:	f8da 2000 	ldr.w	r2, [sl]
event_compass_heading_total = event_compass_heading_total + (int) event_compass_heading;
 80a110a:	f8d9 0000 	ldr.w	r0, [r9]
vane_wind_direction_total = vane_wind_direction_total + (int) vane_wind_direction;
 80a110e:	4413      	add	r3, r2
 80a1110:	f8cb 3000 	str.w	r3, [fp]
event_compass_heading_total = event_compass_heading_total + (int) event_compass_heading;
 80a1114:	f007 fd5a 	bl	80a8bcc <__aeabi_f2iz>
 80a1118:	4a9f      	ldr	r2, [pc, #636]	; (80a1398 <loop+0x36c>)
bno_compass_heading_total = bno_compass_heading_total + (int) bno_compass_heading;
 80a111a:	f8df a280 	ldr.w	sl, [pc, #640]	; 80a139c <loop+0x370>
event_compass_heading_total = event_compass_heading_total + (int) event_compass_heading;
 80a111e:	6813      	ldr	r3, [r2, #0]
 80a1120:	4418      	add	r0, r3
 80a1122:	6010      	str	r0, [r2, #0]
bno_compass_heading_total = bno_compass_heading_total + (int) bno_compass_heading;
 80a1124:	f8d8 0000 	ldr.w	r0, [r8]
 80a1128:	f007 fd50 	bl	80a8bcc <__aeabi_f2iz>
 80a112c:	f8da 3000 	ldr.w	r3, [sl]
 80a1130:	4418      	add	r0, r3
 80a1132:	f8ca 0000 	str.w	r0, [sl]
 80a1136:	f002 ff77 	bl	80a4028 <HAL_Timer_Get_Milli_Seconds>
if ((millis() - timeFromLastReading) > average_time_interval) {
 80a113a:	6823      	ldr	r3, [r4, #0]
 80a113c:	1ac0      	subs	r0, r0, r3
 80a113e:	4b98      	ldr	r3, [pc, #608]	; (80a13a0 <loop+0x374>)
 80a1140:	881b      	ldrh	r3, [r3, #0]
 80a1142:	4298      	cmp	r0, r3
 80a1144:	f240 8169 	bls.w	80a141a <loop+0x3ee>
  WindSpeed = (float) Rotations * 2.25 / (float) (millis() - timeFromLastReading) * 1000.;
 80a1148:	4b96      	ldr	r3, [pc, #600]	; (80a13a4 <loop+0x378>)
 80a114a:	f8d3 8000 	ldr.w	r8, [r3]
 80a114e:	f002 ff6b 	bl	80a4028 <HAL_Timer_Get_Milli_Seconds>
 80a1152:	9005      	str	r0, [sp, #20]
 80a1154:	4640      	mov	r0, r8
 80a1156:	f007 fb1b 	bl	80a8790 <__aeabi_ui2f>
 80a115a:	f006 fec3 	bl	80a7ee4 <__aeabi_f2d>
 80a115e:	2200      	movs	r2, #0
 80a1160:	4b91      	ldr	r3, [pc, #580]	; (80a13a8 <loop+0x37c>)
 80a1162:	f006 ff17 	bl	80a7f94 <__aeabi_dmul>
 80a1166:	9b05      	ldr	r3, [sp, #20]
 80a1168:	4680      	mov	r8, r0
 80a116a:	6820      	ldr	r0, [r4, #0]
 80a116c:	4689      	mov	r9, r1
 80a116e:	1a18      	subs	r0, r3, r0
 80a1170:	f007 fb0e 	bl	80a8790 <__aeabi_ui2f>
 80a1174:	f006 feb6 	bl	80a7ee4 <__aeabi_f2d>
 80a1178:	4602      	mov	r2, r0
 80a117a:	460b      	mov	r3, r1
 80a117c:	4640      	mov	r0, r8
 80a117e:	4649      	mov	r1, r9
 80a1180:	f007 f832 	bl	80a81e8 <__aeabi_ddiv>
 80a1184:	2200      	movs	r2, #0
 80a1186:	4b89      	ldr	r3, [pc, #548]	; (80a13ac <loop+0x380>)
 80a1188:	f006 ff04 	bl	80a7f94 <__aeabi_dmul>
 80a118c:	f007 f9fa 	bl	80a8584 <__aeabi_d2f>
  bme_temperature_average = bme_temperature_total / loop_counter;
 80a1190:	f8df 821c 	ldr.w	r8, [pc, #540]	; 80a13b0 <loop+0x384>
 80a1194:	4977      	ldr	r1, [pc, #476]	; (80a1374 <loop+0x348>)
 80a1196:	f8b8 2000 	ldrh.w	r2, [r8]
 80a119a:	6809      	ldr	r1, [r1, #0]
 80a119c:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80a13b4 <loop+0x388>
 80a11a0:	fbb1 f1f2 	udiv	r1, r1, r2
 80a11a4:	f8c9 1000 	str.w	r1, [r9]
  bme_pressure_average = bme_pressure_total / loop_counter;
 80a11a8:	6839      	ldr	r1, [r7, #0]
  WindSpeed = (float) Rotations * 2.25 / (float) (millis() - timeFromLastReading) * 1000.;
 80a11aa:	4b83      	ldr	r3, [pc, #524]	; (80a13b8 <loop+0x38c>)
  bme_pressure_average = bme_pressure_total / loop_counter;
 80a11ac:	fbb1 f1f2 	udiv	r1, r1, r2
  WindSpeed = (float) Rotations * 2.25 / (float) (millis() - timeFromLastReading) * 1000.;
 80a11b0:	6018      	str	r0, [r3, #0]
  bme_pressure_average = bme_pressure_total / loop_counter;
 80a11b2:	4882      	ldr	r0, [pc, #520]	; (80a13bc <loop+0x390>)
  current_mA_average = current_mA_total / loop_counter;
 80a11b4:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 80a138c <loop+0x360>
  bme_pressure_average = bme_pressure_total / loop_counter;
 80a11b8:	6001      	str	r1, [r0, #0]
  bme_humidity_average = bme_humidity_total / loop_counter;
 80a11ba:	6831      	ldr	r1, [r6, #0]
 80a11bc:	4880      	ldr	r0, [pc, #512]	; (80a13c0 <loop+0x394>)
 80a11be:	fbb1 f1f2 	udiv	r1, r1, r2
 80a11c2:	6001      	str	r1, [r0, #0]
  bme_altitude_average = bme_altitude_total / loop_counter;
 80a11c4:	6829      	ldr	r1, [r5, #0]
 80a11c6:	487f      	ldr	r0, [pc, #508]	; (80a13c4 <loop+0x398>)
 80a11c8:	fbb1 f1f2 	udiv	r1, r1, r2
 80a11cc:	6001      	str	r1, [r0, #0]
  busvoltage_average = busvoltage_total / loop_counter;
 80a11ce:	486d      	ldr	r0, [pc, #436]	; (80a1384 <loop+0x358>)
  power_mW_average = power_mW_total / loop_counter;
 80a11d0:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 80a1390 <loop+0x364>
  busvoltage_average = busvoltage_total / loop_counter;
 80a11d4:	6801      	ldr	r1, [r0, #0]
 80a11d6:	487c      	ldr	r0, [pc, #496]	; (80a13c8 <loop+0x39c>)
 80a11d8:	fbb1 f1f2 	udiv	r1, r1, r2
 80a11dc:	6001      	str	r1, [r0, #0]
  current_mA_average = current_mA_total / loop_counter;
 80a11de:	f8dc 1000 	ldr.w	r1, [ip]
 80a11e2:	487a      	ldr	r0, [pc, #488]	; (80a13cc <loop+0x3a0>)
 80a11e4:	fbb1 f1f2 	udiv	r1, r1, r2
 80a11e8:	6001      	str	r1, [r0, #0]
  power_mW_average = power_mW_total / loop_counter;
 80a11ea:	f8de 1000 	ldr.w	r1, [lr]
 80a11ee:	4878      	ldr	r0, [pc, #480]	; (80a13d0 <loop+0x3a4>)
 80a11f0:	fbb1 f1f2 	udiv	r1, r1, r2
 80a11f4:	6001      	str	r1, [r0, #0]
  vane_wind_direction_average = vane_wind_direction_total / loop_counter;
 80a11f6:	f8db 1000 	ldr.w	r1, [fp]
 80a11fa:	4876      	ldr	r0, [pc, #472]	; (80a13d4 <loop+0x3a8>)
 80a11fc:	fbb1 f1f2 	udiv	r1, r1, r2
  event_compass_heading_average = event_compass_heading_total / loop_counter;
 80a1200:	4b65      	ldr	r3, [pc, #404]	; (80a1398 <loop+0x36c>)
  vane_wind_direction_average = vane_wind_direction_total / loop_counter;
 80a1202:	6001      	str	r1, [r0, #0]
  event_compass_heading_average = event_compass_heading_total / loop_counter;
 80a1204:	6819      	ldr	r1, [r3, #0]
 80a1206:	4874      	ldr	r0, [pc, #464]	; (80a13d8 <loop+0x3ac>)
 80a1208:	fbb1 f1f2 	udiv	r1, r1, r2
 80a120c:	6001      	str	r1, [r0, #0]
  bno_compass_heading_average = bno_compass_heading_total / loop_counter;
 80a120e:	f8da 1000 	ldr.w	r1, [sl]
 80a1212:	4b72      	ldr	r3, [pc, #456]	; (80a13dc <loop+0x3b0>)
 80a1214:	fbb1 f2f2 	udiv	r2, r1, r2
 80a1218:	601a      	str	r2, [r3, #0]
 80a121a:	f002 ff05 	bl	80a4028 <HAL_Timer_Get_Milli_Seconds>
  timeFromLastReading = millis();
 80a121e:	6020      	str	r0, [r4, #0]
  bme_temperature_total = 0;
 80a1220:	2400      	movs	r4, #0
  Serial.print("rotations = ");
 80a1222:	f003 fe61 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1226:	496e      	ldr	r1, [pc, #440]	; (80a13e0 <loop+0x3b4>)
 80a1228:	f003 fb03 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print(Rotations);
 80a122c:	f003 fe5c 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1230:	4b5c      	ldr	r3, [pc, #368]	; (80a13a4 <loop+0x378>)
 80a1232:	220a      	movs	r2, #10
 80a1234:	6819      	ldr	r1, [r3, #0]
 80a1236:	f003 fb1b 	bl	80a4870 <_ZN5Print11printNumberEmh>
  Serial.print("\n");
 80a123a:	f003 fe55 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a123e:	4969      	ldr	r1, [pc, #420]	; (80a13e4 <loop+0x3b8>)
 80a1240:	f003 faf7 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print("\nBME altitude total = ");
 80a1244:	f003 fe50 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1248:	4967      	ldr	r1, [pc, #412]	; (80a13e8 <loop+0x3bc>)
 80a124a:	f003 faf2 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print(bme_altitude_total);
 80a124e:	f003 fe4b 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1252:	220a      	movs	r2, #10
 80a1254:	6829      	ldr	r1, [r5, #0]
 80a1256:	f003 fb0b 	bl	80a4870 <_ZN5Print11printNumberEmh>
  Serial.print("\t");
 80a125a:	f003 fe45 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a125e:	4963      	ldr	r1, [pc, #396]	; (80a13ec <loop+0x3c0>)
 80a1260:	f003 fae7 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print("\nBME temp total = ");
 80a1264:	f003 fe40 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1268:	4961      	ldr	r1, [pc, #388]	; (80a13f0 <loop+0x3c4>)
 80a126a:	f003 fae2 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print(bme_temperature_total);
 80a126e:	f003 fe3b 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1272:	4940      	ldr	r1, [pc, #256]	; (80a1374 <loop+0x348>)
 80a1274:	220a      	movs	r2, #10
 80a1276:	6809      	ldr	r1, [r1, #0]
 80a1278:	f003 fafa 	bl	80a4870 <_ZN5Print11printNumberEmh>
  Serial.print("\t");
 80a127c:	f003 fe34 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1280:	495a      	ldr	r1, [pc, #360]	; (80a13ec <loop+0x3c0>)
 80a1282:	f003 fad6 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print("loop counter = ");
 80a1286:	f003 fe2f 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a128a:	495a      	ldr	r1, [pc, #360]	; (80a13f4 <loop+0x3c8>)
 80a128c:	f003 fad1 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print(loop_counter);
 80a1290:	f003 fe2a 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1294:	220a      	movs	r2, #10
 80a1296:	f8b8 1000 	ldrh.w	r1, [r8]
 80a129a:	f003 fae9 	bl	80a4870 <_ZN5Print11printNumberEmh>
  Serial.print("\n");
 80a129e:	f003 fe23 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a12a2:	4950      	ldr	r1, [pc, #320]	; (80a13e4 <loop+0x3b8>)
 80a12a4:	f003 fac5 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print("\nBME temp average = ");
 80a12a8:	f003 fe1e 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a12ac:	4952      	ldr	r1, [pc, #328]	; (80a13f8 <loop+0x3cc>)
 80a12ae:	f003 fac0 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print(bme_temperature_average);
 80a12b2:	f003 fe19 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a12b6:	220a      	movs	r2, #10
 80a12b8:	f8d9 1000 	ldr.w	r1, [r9]
 80a12bc:	f003 fad8 	bl	80a4870 <_ZN5Print11printNumberEmh>
  Serial.print("\n");
 80a12c0:	f003 fe12 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a12c4:	4947      	ldr	r1, [pc, #284]	; (80a13e4 <loop+0x3b8>)
 80a12c6:	f003 fab4 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print("\nBME temp average as 8 bit = ");
 80a12ca:	f003 fe0d 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a12ce:	494b      	ldr	r1, [pc, #300]	; (80a13fc <loop+0x3d0>)
 80a12d0:	f003 faaf 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print((uint8_t) bme_temperature_average);
 80a12d4:	f003 fe08 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a12d8:	220a      	movs	r2, #10
 80a12da:	f899 1000 	ldrb.w	r1, [r9]
 80a12de:	f7fe ff3f 	bl	80a0160 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  Serial.print("\n");
 80a12e2:	f003 fe01 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a12e6:	493f      	ldr	r1, [pc, #252]	; (80a13e4 <loop+0x3b8>)
 80a12e8:	f003 faa3 	bl	80a4832 <_ZN5Print5printEPKc>
  current_mA_total = 0;
 80a12ec:	f8df c09c 	ldr.w	ip, [pc, #156]	; 80a138c <loop+0x360>
  power_mW_total = 0;
 80a12f0:	f8df e09c 	ldr.w	lr, [pc, #156]	; 80a1390 <loop+0x364>
  Rotations = 0;  // Set Rotations count to 0 ready for calculations
 80a12f4:	4b2b      	ldr	r3, [pc, #172]	; (80a13a4 <loop+0x378>)
  event_compass_heading_total = 0;
 80a12f6:	4a28      	ldr	r2, [pc, #160]	; (80a1398 <loop+0x36c>)
  bme_temperature_total = 0;
 80a12f8:	491e      	ldr	r1, [pc, #120]	; (80a1374 <loop+0x348>)
  busvoltage_total = 0;
 80a12fa:	4822      	ldr	r0, [pc, #136]	; (80a1384 <loop+0x358>)
  current_mA_total = 0;
 80a12fc:	f8cc 4000 	str.w	r4, [ip]
  power_mW_total = 0;
 80a1300:	f8ce 4000 	str.w	r4, [lr]
  Rotations = 0;  // Set Rotations count to 0 ready for calculations
 80a1304:	601c      	str	r4, [r3, #0]
  event_compass_heading_total = 0;
 80a1306:	6014      	str	r4, [r2, #0]
  bme_temperature_total = 0;
 80a1308:	600c      	str	r4, [r1, #0]
  bme_pressure_total = 0;
 80a130a:	603c      	str	r4, [r7, #0]
  bme_humidity_total = 0;
 80a130c:	6034      	str	r4, [r6, #0]
  bme_altitude_total = 0;
 80a130e:	602c      	str	r4, [r5, #0]
  busvoltage_total = 0;
 80a1310:	6004      	str	r4, [r0, #0]
  vane_wind_direction_total = 0;
 80a1312:	f8cb 4000 	str.w	r4, [fp]
  bno_compass_heading_total = 0;
 80a1316:	f8ca 4000 	str.w	r4, [sl]
  Serial.print("loop counter = ");
 80a131a:	f003 fde5 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a131e:	4935      	ldr	r1, [pc, #212]	; (80a13f4 <loop+0x3c8>)
 80a1320:	f003 fa87 	bl	80a4832 <_ZN5Print5printEPKc>
  Serial.print(loop_counter);
 80a1324:	f003 fde0 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1328:	220a      	movs	r2, #10
 80a132a:	f8b8 1000 	ldrh.w	r1, [r8]
 80a132e:	f003 fa9f 	bl	80a4870 <_ZN5Print11printNumberEmh>
  heading = calculateHeading(int((event_compass_heading_average + bno_compass_heading_average) / 2));
 80a1332:	4829      	ldr	r0, [pc, #164]	; (80a13d8 <loop+0x3ac>)
 80a1334:	4b29      	ldr	r3, [pc, #164]	; (80a13dc <loop+0x3b0>)
 80a1336:	6801      	ldr	r1, [r0, #0]
 80a1338:	681b      	ldr	r3, [r3, #0]
 80a133a:	a806      	add	r0, sp, #24
 80a133c:	e060      	b.n	80a1400 <loop+0x3d4>
 80a133e:	bf00      	nop
 80a1340:	20000006 	.word	0x20000006
 80a1344:	200000d0 	.word	0x200000d0
 80a1348:	200000dc 	.word	0x200000dc
 80a134c:	200000e8 	.word	0x200000e8
 80a1350:	200000f4 	.word	0x200000f4
 80a1354:	20000234 	.word	0x20000234
 80a1358:	20000198 	.word	0x20000198
 80a135c:	200001f4 	.word	0x200001f4
 80a1360:	20000114 	.word	0x20000114
 80a1364:	20000120 	.word	0x20000120
 80a1368:	20000130 	.word	0x20000130
 80a136c:	200001d0 	.word	0x200001d0
 80a1370:	20000204 	.word	0x20000204
 80a1374:	200000fc 	.word	0x200000fc
 80a1378:	200000f0 	.word	0x200000f0
 80a137c:	200000e4 	.word	0x200000e4
 80a1380:	200000d8 	.word	0x200000d8
 80a1384:	20000128 	.word	0x20000128
 80a1388:	20000220 	.word	0x20000220
 80a138c:	20000138 	.word	0x20000138
 80a1390:	200001fc 	.word	0x200001fc
 80a1394:	2000023c 	.word	0x2000023c
 80a1398:	200001a0 	.word	0x200001a0
 80a139c:	2000011c 	.word	0x2000011c
 80a13a0:	20000000 	.word	0x20000000
 80a13a4:	2000007c 	.word	0x2000007c
 80a13a8:	40020000 	.word	0x40020000
 80a13ac:	408f4000 	.word	0x408f4000
 80a13b0:	200001d4 	.word	0x200001d4
 80a13b4:	200000f8 	.word	0x200000f8
 80a13b8:	20000080 	.word	0x20000080
 80a13bc:	200000ec 	.word	0x200000ec
 80a13c0:	200000e0 	.word	0x200000e0
 80a13c4:	200000d4 	.word	0x200000d4
 80a13c8:	20000124 	.word	0x20000124
 80a13cc:	20000134 	.word	0x20000134
 80a13d0:	200001f8 	.word	0x200001f8
 80a13d4:	20000238 	.word	0x20000238
 80a13d8:	2000019c 	.word	0x2000019c
 80a13dc:	20000118 	.word	0x20000118
 80a13e0:	080a945d 	.word	0x080a945d
 80a13e4:	080a93cf 	.word	0x080a93cf
 80a13e8:	080a946a 	.word	0x080a946a
 80a13ec:	080a93e4 	.word	0x080a93e4
 80a13f0:	080a9481 	.word	0x080a9481
 80a13f4:	080a9494 	.word	0x080a9494
 80a13f8:	080a94a4 	.word	0x080a94a4
 80a13fc:	080a94b9 	.word	0x080a94b9
 80a1400:	4419      	add	r1, r3
 80a1402:	0849      	lsrs	r1, r1, #1
  loop_counter = 0;
 80a1404:	f8a8 4000 	strh.w	r4, [r8]
  heading = calculateHeading(int((event_compass_heading_average + bno_compass_heading_average) / 2));
 80a1408:	f7ff fba2 	bl	80a0b50 <_Z16calculateHeadingi>
 80a140c:	481e      	ldr	r0, [pc, #120]	; (80a1488 <loop+0x45c>)
 80a140e:	a906      	add	r1, sp, #24
 80a1410:	f003 f9d0 	bl	80a47b4 <_ZN6StringaSEOS_>
 80a1414:	a806      	add	r0, sp, #24
 80a1416:	f003 f953 	bl	80a46c0 <_ZN6StringD1Ev>
 80a141a:	f002 fe05 	bl	80a4028 <HAL_Timer_Get_Milli_Seconds>
if ((millis() - time_from_last_display) > change_display_time_interval) {
 80a141e:	4c1b      	ldr	r4, [pc, #108]	; (80a148c <loop+0x460>)
 80a1420:	6823      	ldr	r3, [r4, #0]
 80a1422:	1ac0      	subs	r0, r0, r3
 80a1424:	4b1a      	ldr	r3, [pc, #104]	; (80a1490 <loop+0x464>)
 80a1426:	881b      	ldrh	r3, [r3, #0]
 80a1428:	4298      	cmp	r0, r3
 80a142a:	d91a      	bls.n	80a1462 <loop+0x436>
 80a142c:	f002 fdfc 	bl	80a4028 <HAL_Timer_Get_Milli_Seconds>
  time_from_last_display = millis();    
 80a1430:	6020      	str	r0, [r4, #0]
  if (page1){
 80a1432:	4c18      	ldr	r4, [pc, #96]	; (80a1494 <loop+0x468>)
 80a1434:	7823      	ldrb	r3, [r4, #0]
 80a1436:	b1f3      	cbz	r3, 80a1476 <loop+0x44a>
    displayValues1(bme_temperature_average, bme_pressure_average, bme_humidity_average, bme_altitude_average, busvoltage_average, current_mA_average, power_mW_average);
 80a1438:	4b17      	ldr	r3, [pc, #92]	; (80a1498 <loop+0x46c>)
 80a143a:	4a18      	ldr	r2, [pc, #96]	; (80a149c <loop+0x470>)
 80a143c:	681b      	ldr	r3, [r3, #0]
 80a143e:	4918      	ldr	r1, [pc, #96]	; (80a14a0 <loop+0x474>)
 80a1440:	9302      	str	r3, [sp, #8]
 80a1442:	4b18      	ldr	r3, [pc, #96]	; (80a14a4 <loop+0x478>)
 80a1444:	4818      	ldr	r0, [pc, #96]	; (80a14a8 <loop+0x47c>)
 80a1446:	681b      	ldr	r3, [r3, #0]
 80a1448:	9301      	str	r3, [sp, #4]
 80a144a:	4b18      	ldr	r3, [pc, #96]	; (80a14ac <loop+0x480>)
 80a144c:	681b      	ldr	r3, [r3, #0]
 80a144e:	9300      	str	r3, [sp, #0]
 80a1450:	4b17      	ldr	r3, [pc, #92]	; (80a14b0 <loop+0x484>)
 80a1452:	6812      	ldr	r2, [r2, #0]
 80a1454:	681b      	ldr	r3, [r3, #0]
 80a1456:	6809      	ldr	r1, [r1, #0]
 80a1458:	6800      	ldr	r0, [r0, #0]
 80a145a:	f7ff fd15 	bl	80a0e88 <_Z14displayValues1lllllll>
    page1 = false;
 80a145e:	2300      	movs	r3, #0
    page1 = true;
 80a1460:	7023      	strb	r3, [r4, #0]
      delay(BNO055_SAMPLERATE_DELAY_MS);
 80a1462:	20c8      	movs	r0, #200	; 0xc8
loop_counter += 1;
 80a1464:	4a13      	ldr	r2, [pc, #76]	; (80a14b4 <loop+0x488>)
 80a1466:	8813      	ldrh	r3, [r2, #0]
 80a1468:	3301      	adds	r3, #1
 80a146a:	8013      	strh	r3, [r2, #0]
}
 80a146c:	b00b      	add	sp, #44	; 0x2c
 80a146e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      delay(BNO055_SAMPLERATE_DELAY_MS);
 80a1472:	f003 bba9 	b.w	80a4bc8 <delay>
    displayValues2(vane_wind_direction_average, heading, WindSpeed);
 80a1476:	4b10      	ldr	r3, [pc, #64]	; (80a14b8 <loop+0x48c>)
 80a1478:	4a10      	ldr	r2, [pc, #64]	; (80a14bc <loop+0x490>)
 80a147a:	6818      	ldr	r0, [r3, #0]
 80a147c:	4902      	ldr	r1, [pc, #8]	; (80a1488 <loop+0x45c>)
 80a147e:	f7ff fd95 	bl	80a0fac <_Z14displayValues2lR6StringRf>
    page1 = true;
 80a1482:	2301      	movs	r3, #1
 80a1484:	e7ec      	b.n	80a1460 <loop+0x434>
 80a1486:	bf00      	nop
 80a1488:	200001a4 	.word	0x200001a4
 80a148c:	20000230 	.word	0x20000230
 80a1490:	20000002 	.word	0x20000002
 80a1494:	20000004 	.word	0x20000004
 80a1498:	200001f8 	.word	0x200001f8
 80a149c:	200000e0 	.word	0x200000e0
 80a14a0:	200000ec 	.word	0x200000ec
 80a14a4:	20000134 	.word	0x20000134
 80a14a8:	200000f8 	.word	0x200000f8
 80a14ac:	20000124 	.word	0x20000124
 80a14b0:	200000d4 	.word	0x200000d4
 80a14b4:	200001d4 	.word	0x200001d4
 80a14b8:	20000238 	.word	0x20000238
 80a14bc:	20000080 	.word	0x20000080

080a14c0 <setup>:
void setup(void) {
 80a14c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a14c4:	b0a2      	sub	sp, #136	; 0x88
  Serial.println("Hello!");
 80a14c6:	f003 fd0f 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a14ca:	49ce      	ldr	r1, [pc, #824]	; (80a1804 <setup+0x344>)
 80a14cc:	f003 f9c4 	bl	80a4858 <_ZN5Print7printlnEPKc>
  ina219.setCalibration_16V_400mA();
 80a14d0:	48cd      	ldr	r0, [pc, #820]	; (80a1808 <setup+0x348>)
 80a14d2:	f001 fae2 	bl	80a2a9a <_ZN15Adafruit_INA21924setCalibration_16V_400mAEv>
time_base = Time.now();
 80a14d6:	f003 fb51 	bl	80a4b7c <_ZN9TimeClass3nowEv>
 80a14da:	4ecc      	ldr	r6, [pc, #816]	; (80a180c <setup+0x34c>)
 80a14dc:	17c3      	asrs	r3, r0, #31
 80a14de:	e9c6 0300 	strd	r0, r3, [r6]
Serial.print("time base value =");
 80a14e2:	f003 fd01 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a14e6:	49ca      	ldr	r1, [pc, #808]	; (80a1810 <setup+0x350>)
 80a14e8:	f003 f9a3 	bl	80a4832 <_ZN5Print5printEPKc>
Serial.print(time_base);
 80a14ec:	f003 fcfc 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a14f0:	e9d6 5400 	ldrd	r5, r4, [r6]
        if (n < 0 && base == 10) {
 80a14f4:	2c00      	cmp	r4, #0
 80a14f6:	4607      	mov	r7, r0
 80a14f8:	f280 80bf 	bge.w	80a167a <setup+0x1ba>
            t = print('-');
 80a14fc:	212d      	movs	r1, #45	; 0x2d
 80a14fe:	f003 f99c 	bl	80a483a <_ZN5Print5printEc>
            val = -n;
 80a1502:	426a      	negs	r2, r5
 80a1504:	eb64 0344 	sbc.w	r3, r4, r4, lsl #1
        return printNumber(val, base) + t;
 80a1508:	210a      	movs	r1, #10
 80a150a:	4638      	mov	r0, r7
 80a150c:	9100      	str	r1, [sp, #0]
 80a150e:	f003 f9cc 	bl	80a48aa <_ZN5Print11printNumberEyh>
Serial.print("\n");
 80a1512:	f003 fce9 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1516:	49bf      	ldr	r1, [pc, #764]	; (80a1814 <setup+0x354>)
 80a1518:	f003 f98b 	bl	80a4832 <_ZN5Print5printEPKc>
pinMode(vane_pin, INPUT);
 80a151c:	4bbe      	ldr	r3, [pc, #760]	; (80a1818 <setup+0x358>)
 80a151e:	2100      	movs	r1, #0
 80a1520:	7818      	ldrb	r0, [r3, #0]
 80a1522:	f003 ff4d 	bl	80a53c0 <pinMode>
pinMode(vane_switch, OUTPUT);
 80a1526:	4bbd      	ldr	r3, [pc, #756]	; (80a181c <setup+0x35c>)
 80a1528:	2101      	movs	r1, #1
 80a152a:	7818      	ldrb	r0, [r3, #0]
pinMode(wind_pin, INPUT);
 80a152c:	4cbc      	ldr	r4, [pc, #752]	; (80a1820 <setup+0x360>)
pinMode(vane_switch, OUTPUT);
 80a152e:	f003 ff47 	bl	80a53c0 <pinMode>
Serial.println("Vane Value\tDirection\tHeading");
 80a1532:	f003 fcd9 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1536:	49bb      	ldr	r1, [pc, #748]	; (80a1824 <setup+0x364>)
 80a1538:	f003 f98e 	bl	80a4858 <_ZN5Print7printlnEPKc>
pinMode(wind_pin, INPUT);
 80a153c:	2100      	movs	r1, #0
 80a153e:	7820      	ldrb	r0, [r4, #0]
 80a1540:	f003 ff3e 	bl	80a53c0 <pinMode>
attachInterrupt(wind_pin, isr_rotation, FALLING);
 80a1544:	2300      	movs	r3, #0
 80a1546:	9300      	str	r3, [sp, #0]
 80a1548:	2202      	movs	r2, #2
 80a154a:	f04f 33ff 	mov.w	r3, #4294967295
 80a154e:	49b6      	ldr	r1, [pc, #728]	; (80a1828 <setup+0x368>)
 80a1550:	7820      	ldrb	r0, [r4, #0]
 80a1552:	f003 fd29 	bl	80a4fa8 <_Z15attachInterrupttPFvvE13InterruptModeah>
Serial.println("Davis Wind Speed Test");
 80a1556:	f003 fcc7 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a155a:	49b4      	ldr	r1, [pc, #720]	; (80a182c <setup+0x36c>)
 80a155c:	f003 f97c 	bl	80a4858 <_ZN5Print7printlnEPKc>
Serial.println("Rotations\tMPH");
 80a1560:	f003 fcc2 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1564:	49b2      	ldr	r1, [pc, #712]	; (80a1830 <setup+0x370>)
 80a1566:	f003 f977 	bl	80a4858 <_ZN5Print7printlnEPKc>
  Serial.begin(115200);
 80a156a:	f003 fcbd 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a156e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a1572:	f003 fc99 	bl	80a4ea8 <_ZN9USBSerial5beginEl>
    while(!Serial);    // time to get serial running
 80a1576:	f003 fcb7 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a157a:	f003 fc9c 	bl	80a4eb6 <_ZN9USBSerialcvbEv>
 80a157e:	2800      	cmp	r0, #0
 80a1580:	d0f9      	beq.n	80a1576 <setup+0xb6>
  display.begin(0x3C, true); // Address 0x3C default
 80a1582:	4cac      	ldr	r4, [pc, #688]	; (80a1834 <setup+0x374>)
    Serial.println(F("BME280 test"));
 80a1584:	f003 fcb0 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1588:	49ab      	ldr	r1, [pc, #684]	; (80a1838 <setup+0x378>)
 80a158a:	f003 f96f 	bl	80a486c <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("128x64 OLED FeatherWing test");
 80a158e:	f003 fcab 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1592:	49aa      	ldr	r1, [pc, #680]	; (80a183c <setup+0x37c>)
 80a1594:	f003 f960 	bl	80a4858 <_ZN5Print7printlnEPKc>
  display.begin(0x3C, true); // Address 0x3C default
 80a1598:	2201      	movs	r2, #1
 80a159a:	213c      	movs	r1, #60	; 0x3c
 80a159c:	4620      	mov	r0, r4
 80a159e:	f002 fc2d 	bl	80a3dfc <_ZN15Adafruit_SH11075beginEhb>
  Serial.println("OLED begun");
 80a15a2:	f003 fca1 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a15a6:	49a6      	ldr	r1, [pc, #664]	; (80a1840 <setup+0x380>)
 80a15a8:	f003 f956 	bl	80a4858 <_ZN5Print7printlnEPKc>
  display.display();
 80a15ac:	4620      	mov	r0, r4
 80a15ae:	f002 fb30 	bl	80a3c12 <_ZN15Adafruit_SH110X7displayEv>
  delay(1000);
 80a15b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a15b6:	f003 fb07 	bl	80a4bc8 <delay>
  display.clearDisplay();
 80a15ba:	4620      	mov	r0, r4
 80a15bc:	f001 fed2 	bl	80a3364 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
 80a15c0:	4620      	mov	r0, r4
 80a15c2:	f002 fb26 	bl	80a3c12 <_ZN15Adafruit_SH110X7displayEv>
  display.setRotation(1);
 80a15c6:	2101      	movs	r1, #1
 80a15c8:	4620      	mov	r0, r4
 80a15ca:	f002 f8d0 	bl	80a376e <_ZN12Adafruit_GFX11setRotationEh>
  Serial.println("Button test");
 80a15ce:	f003 fc8b 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a15d2:	499c      	ldr	r1, [pc, #624]	; (80a1844 <setup+0x384>)
 80a15d4:	f003 f940 	bl	80a4858 <_ZN5Print7printlnEPKc>
  pinMode(BUTTON_A, INPUT_PULLUP);
 80a15d8:	2102      	movs	r1, #2
 80a15da:	2004      	movs	r0, #4
 80a15dc:	f003 fef0 	bl	80a53c0 <pinMode>
  pinMode(BUTTON_B, INPUT_PULLUP);
 80a15e0:	2102      	movs	r1, #2
 80a15e2:	2003      	movs	r0, #3
 80a15e4:	f003 feec 	bl	80a53c0 <pinMode>
  pinMode(BUTTON_C, INPUT_PULLUP);
 80a15e8:	2102      	movs	r1, #2
 80a15ea:	4608      	mov	r0, r1
 80a15ec:	f003 fee8 	bl	80a53c0 <pinMode>
  display.setTextSize(1);
 80a15f0:	2101      	movs	r1, #1
 80a15f2:	4620      	mov	r0, r4
 80a15f4:	f002 fb07 	bl	80a3c06 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 80a15f8:	2200      	movs	r2, #0
 80a15fa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.print("BigdaddyAddie weather station!\n");
 80a15fe:	4992      	ldr	r1, [pc, #584]	; (80a1848 <setup+0x388>)
 80a1600:	e9c4 2304 	strd	r2, r3, [r4, #16]
 80a1604:	4620      	mov	r0, r4
 80a1606:	f003 f914 	bl	80a4832 <_ZN5Print5printEPKc>
  display.print("connected!\n");
 80a160a:	4990      	ldr	r1, [pc, #576]	; (80a184c <setup+0x38c>)
 80a160c:	4620      	mov	r0, r4
 80a160e:	f003 f910 	bl	80a4832 <_ZN5Print5printEPKc>
  display.display(); // actually display all of the above
 80a1612:	4620      	mov	r0, r4
 80a1614:	f002 fafd 	bl	80a3c12 <_ZN15Adafruit_SH110X7displayEv>
    status = bme.begin();  
 80a1618:	488d      	ldr	r0, [pc, #564]	; (80a1850 <setup+0x390>)
 80a161a:	f000 fe86 	bl	80a232a <_ZN15Adafruit_BME2805beginEv>
    if (!status) {
 80a161e:	bb78      	cbnz	r0, 80a1680 <setup+0x1c0>
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
 80a1620:	f003 fc62 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1624:	498b      	ldr	r1, [pc, #556]	; (80a1854 <setup+0x394>)
 80a1626:	f003 f917 	bl	80a4858 <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),16);
 80a162a:	f003 fc5d 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a162e:	498a      	ldr	r1, [pc, #552]	; (80a1858 <setup+0x398>)
 80a1630:	f003 f8ff 	bl	80a4832 <_ZN5Print5printEPKc>
 80a1634:	f003 fc58 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1638:	4604      	mov	r4, r0
 80a163a:	4885      	ldr	r0, [pc, #532]	; (80a1850 <setup+0x390>)
 80a163c:	f000 fa12 	bl	80a1a64 <_ZN15Adafruit_BME2808sensorIDEv>
 80a1640:	2210      	movs	r2, #16
 80a1642:	4601      	mov	r1, r0
 80a1644:	4620      	mov	r0, r4
 80a1646:	f7fe fd9b 	bl	80a0180 <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
 80a164a:	f003 fc4d 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a164e:	4983      	ldr	r1, [pc, #524]	; (80a185c <setup+0x39c>)
 80a1650:	f003 f8ef 	bl	80a4832 <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
 80a1654:	f003 fc48 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1658:	4981      	ldr	r1, [pc, #516]	; (80a1860 <setup+0x3a0>)
 80a165a:	f003 f8ea 	bl	80a4832 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
 80a165e:	f003 fc43 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1662:	4980      	ldr	r1, [pc, #512]	; (80a1864 <setup+0x3a4>)
 80a1664:	f003 f8e5 	bl	80a4832 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
 80a1668:	f003 fc3e 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a166c:	497e      	ldr	r1, [pc, #504]	; (80a1868 <setup+0x3a8>)
 80a166e:	f003 f8e0 	bl	80a4832 <_ZN5Print5printEPKc>
        while (1) delay(10);
 80a1672:	200a      	movs	r0, #10
 80a1674:	f003 faa8 	bl	80a4bc8 <delay>
 80a1678:	e7fb      	b.n	80a1672 <setup+0x1b2>
            val = n;
 80a167a:	462a      	mov	r2, r5
 80a167c:	4623      	mov	r3, r4
 80a167e:	e743      	b.n	80a1508 <setup+0x48>
if (i2ceeprom.begin(0x50)) {  // you can stick the new i2c addr in here, e.g. begin(0x51);
 80a1680:	f003 ff6e 	bl	80a5560 <_Z19__fetch_global_Wirev>
 80a1684:	2150      	movs	r1, #80	; 0x50
 80a1686:	4602      	mov	r2, r0
 80a1688:	4878      	ldr	r0, [pc, #480]	; (80a186c <setup+0x3ac>)
 80a168a:	f002 fc2d 	bl	80a3ee8 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>
 80a168e:	b1e0      	cbz	r0, 80a16ca <setup+0x20a>
    Serial.println("Found I2C EEPROM");
 80a1690:	f003 fc2a 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1694:	4976      	ldr	r1, [pc, #472]	; (80a1870 <setup+0x3b0>)
 80a1696:	f003 f8df 	bl	80a4858 <_ZN5Print7printlnEPKc>
    display.clearDisplay();
 80a169a:	4620      	mov	r0, r4
 80a169c:	f001 fe62 	bl	80a3364 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
    display.println("Found I2C FRAM");
 80a16a0:	4974      	ldr	r1, [pc, #464]	; (80a1874 <setup+0x3b4>)
 80a16a2:	4620      	mov	r0, r4
 80a16a4:	f003 f8d8 	bl	80a4858 <_ZN5Print7printlnEPKc>
    display.display();
 80a16a8:	4620      	mov	r0, r4
 80a16aa:	f002 fab2 	bl	80a3c12 <_ZN15Adafruit_SH110X7displayEv>
eeprom_test();
 80a16ae:	f7ff f9c9 	bl	80a0a44 <_Z11eeprom_testv>
  if(!bno.begin())
 80a16b2:	210c      	movs	r1, #12
 80a16b4:	4870      	ldr	r0, [pc, #448]	; (80a1878 <setup+0x3b8>)
 80a16b6:	f001 fb32 	bl	80a2d1e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
 80a16ba:	4607      	mov	r7, r0
 80a16bc:	b970      	cbnz	r0, 80a16dc <setup+0x21c>
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
 80a16be:	f003 fc13 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a16c2:	496e      	ldr	r1, [pc, #440]	; (80a187c <setup+0x3bc>)
 80a16c4:	f003 f8b5 	bl	80a4832 <_ZN5Print5printEPKc>
    while(1);
 80a16c8:	e7fe      	b.n	80a16c8 <setup+0x208>
    Serial.println("I2C EEPROM not identified ... check your connections?\r\n");
 80a16ca:	f003 fc0d 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a16ce:	496c      	ldr	r1, [pc, #432]	; (80a1880 <setup+0x3c0>)
 80a16d0:	f003 f8c2 	bl	80a4858 <_ZN5Print7printlnEPKc>
    while (1) delay(10);
 80a16d4:	200a      	movs	r0, #10
 80a16d6:	f003 fa77 	bl	80a4bc8 <delay>
 80a16da:	e7fb      	b.n	80a16d4 <setup+0x214>
   Serial.print("time base value =");
 80a16dc:	f003 fc04 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a16e0:	494b      	ldr	r1, [pc, #300]	; (80a1810 <setup+0x350>)
 80a16e2:	f003 f8a6 	bl	80a4832 <_ZN5Print5printEPKc>
Serial.print(time_base);
 80a16e6:	f003 fbff 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a16ea:	e9d6 5400 	ldrd	r5, r4, [r6]
        if (n < 0 && base == 10) {
 80a16ee:	2c00      	cmp	r4, #0
 80a16f0:	4680      	mov	r8, r0
 80a16f2:	da65      	bge.n	80a17c0 <setup+0x300>
            t = print('-');
 80a16f4:	212d      	movs	r1, #45	; 0x2d
 80a16f6:	f003 f8a0 	bl	80a483a <_ZN5Print5printEc>
            val = -n;
 80a16fa:	426a      	negs	r2, r5
 80a16fc:	eb64 0344 	sbc.w	r3, r4, r4, lsl #1
        return printNumber(val, base) + t;
 80a1700:	210a      	movs	r1, #10
 80a1702:	4640      	mov	r0, r8
 80a1704:	9100      	str	r1, [sp, #0]
 80a1706:	f003 f8d0 	bl	80a48aa <_ZN5Print11printNumberEyh>
Serial.print("\n");
 80a170a:	f003 fbed 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a170e:	4941      	ldr	r1, [pc, #260]	; (80a1814 <setup+0x354>)
 80a1710:	f003 f88f 	bl	80a4832 <_ZN5Print5printEPKc>
  delay(1000);
 80a1714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1718:	f003 fa56 	bl	80a4bc8 <delay>
  displaySensorDetails();
 80a171c:	f7fe fe1e 	bl	80a035c <_Z20displaySensorDetailsv>
    EEPROM.get(eeAddress, bnoID);
 80a1720:	f003 fee2 	bl	80a54e8 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a1724:	2204      	movs	r2, #4
 80a1726:	2000      	movs	r0, #0
 80a1728:	a902      	add	r1, sp, #8
 80a172a:	f002 fc8d 	bl	80a4048 <HAL_EEPROM_Get>
    bno.getSensor(&sensor);
 80a172e:	4852      	ldr	r0, [pc, #328]	; (80a1878 <setup+0x3b8>)
 80a1730:	a918      	add	r1, sp, #96	; 0x60
 80a1732:	f001 f9df 	bl	80a2af4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    if (bnoID != sensor.sensor_id)
 80a1736:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80a1738:	9b02      	ldr	r3, [sp, #8]
 80a173a:	429a      	cmp	r2, r3
 80a173c:	d043      	beq.n	80a17c6 <setup+0x306>
        Serial.println("\nNo Calibration Data for this sensor exists in EEPROM");
 80a173e:	f003 fbd3 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1742:	4950      	ldr	r1, [pc, #320]	; (80a1884 <setup+0x3c4>)
 80a1744:	f003 f888 	bl	80a4858 <_ZN5Print7printlnEPKc>
        delay(500);
 80a1748:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a174c:	f003 fa3c 	bl	80a4bc8 <delay>
    bool foundCalib = false;
 80a1750:	2700      	movs	r7, #0
    delay(1000);
 80a1752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1756:	f003 fa37 	bl	80a4bc8 <delay>
    displaySensorDetails();
 80a175a:	f7fe fdff 	bl	80a035c <_Z20displaySensorDetailsv>
    displaySensorStatus();
 80a175e:	f7fe fd1f 	bl	80a01a0 <_Z19displaySensorStatusv>
    bno.setExtCrystalUse(true);
 80a1762:	2101      	movs	r1, #1
 80a1764:	4844      	ldr	r0, [pc, #272]	; (80a1878 <setup+0x3b8>)
 80a1766:	f001 fa1d 	bl	80a2ba4 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
 80a176a:	f002 fc5d 	bl	80a4028 <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
 80a176e:	4b46      	ldr	r3, [pc, #280]	; (80a1888 <setup+0x3c8>)
    bno.getEvent(&event);
 80a1770:	a90f      	add	r1, sp, #60	; 0x3c
millisOld=millis();
 80a1772:	6018      	str	r0, [r3, #0]
    bno.getEvent(&event);
 80a1774:	4840      	ldr	r0, [pc, #256]	; (80a1878 <setup+0x3b8>)
 80a1776:	f001 fca1 	bl	80a30bc <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
    if (foundCalib){
 80a177a:	2f00      	cmp	r7, #0
 80a177c:	f000 8090 	beq.w	80a18a0 <setup+0x3e0>
        Serial.println("Move sensor slightly to calibrate magnetometers");
 80a1780:	f003 fbb2 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1784:	4941      	ldr	r1, [pc, #260]	; (80a188c <setup+0x3cc>)
 80a1786:	f003 f867 	bl	80a4858 <_ZN5Print7printlnEPKc>
        display.clearDisplay();
 80a178a:	482a      	ldr	r0, [pc, #168]	; (80a1834 <setup+0x374>)
 80a178c:	f001 fdea 	bl	80a3364 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
        display.println("Move sensor slightly");
 80a1790:	493f      	ldr	r1, [pc, #252]	; (80a1890 <setup+0x3d0>)
 80a1792:	4828      	ldr	r0, [pc, #160]	; (80a1834 <setup+0x374>)
 80a1794:	f003 f860 	bl	80a4858 <_ZN5Print7printlnEPKc>
        display.display();
 80a1798:	4826      	ldr	r0, [pc, #152]	; (80a1834 <setup+0x374>)
 80a179a:	f002 fa3a 	bl	80a3c12 <_ZN15Adafruit_SH110X7displayEv>
        while (!bno.isFullyCalibrated())
 80a179e:	4c36      	ldr	r4, [pc, #216]	; (80a1878 <setup+0x3b8>)
 80a17a0:	4620      	mov	r0, r4
 80a17a2:	f001 fb45 	bl	80a2e30 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
 80a17a6:	2800      	cmp	r0, #0
 80a17a8:	f040 80b6 	bne.w	80a1918 <setup+0x458>
            bno.getEvent(&event);
 80a17ac:	a90f      	add	r1, sp, #60	; 0x3c
 80a17ae:	4620      	mov	r0, r4
 80a17b0:	f001 fc84 	bl	80a30bc <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            displayCalStatus();
 80a17b4:	f7ff fad2 	bl	80a0d5c <_Z16displayCalStatusv>
            delay(BNO055_STARTUP_SAMPLE_DELAY_MS);
 80a17b8:	2064      	movs	r0, #100	; 0x64
 80a17ba:	f003 fa05 	bl	80a4bc8 <delay>
        while (!bno.isFullyCalibrated())
 80a17be:	e7ef      	b.n	80a17a0 <setup+0x2e0>
            val = n;
 80a17c0:	462a      	mov	r2, r5
 80a17c2:	4623      	mov	r3, r4
 80a17c4:	e79c      	b.n	80a1700 <setup+0x240>
        Serial.println("\nFound Calibration for this sensor in EEPROM.");
 80a17c6:	f003 fb8f 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a17ca:	4932      	ldr	r1, [pc, #200]	; (80a1894 <setup+0x3d4>)
 80a17cc:	f003 f844 	bl	80a4858 <_ZN5Print7printlnEPKc>
        EEPROM.get(eeAddress, calibrationData);
 80a17d0:	f003 fe8a 	bl	80a54e8 <_Z21__fetch_global_EEPROMv>
 80a17d4:	2216      	movs	r2, #22
 80a17d6:	a903      	add	r1, sp, #12
 80a17d8:	2004      	movs	r0, #4
 80a17da:	f002 fc35 	bl	80a4048 <HAL_EEPROM_Get>
        displaySensorOffsets(calibrationData);
 80a17de:	a803      	add	r0, sp, #12
 80a17e0:	f7fe fe46 	bl	80a0470 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
        Serial.println("\n\nRestoring Calibration data to the BNO055...");
 80a17e4:	f003 fb80 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a17e8:	492b      	ldr	r1, [pc, #172]	; (80a1898 <setup+0x3d8>)
 80a17ea:	f003 f835 	bl	80a4858 <_ZN5Print7printlnEPKc>
        bno.setSensorOffsets(calibrationData);
 80a17ee:	a903      	add	r1, sp, #12
 80a17f0:	4821      	ldr	r0, [pc, #132]	; (80a1878 <setup+0x3b8>)
 80a17f2:	f001 f9fa 	bl	80a2bea <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>
        Serial.println("\n\nCalibration data loaded into BNO055");
 80a17f6:	f003 fb77 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a17fa:	4928      	ldr	r1, [pc, #160]	; (80a189c <setup+0x3dc>)
 80a17fc:	f003 f82c 	bl	80a4858 <_ZN5Print7printlnEPKc>
        foundCalib = true;
 80a1800:	e7a7      	b.n	80a1752 <setup+0x292>
 80a1802:	bf00      	nop
 80a1804:	080a94d7 	.word	0x080a94d7
 80a1808:	200001bc 	.word	0x200001bc
 80a180c:	20000228 	.word	0x20000228
 80a1810:	080a94de 	.word	0x080a94de
 80a1814:	080a93cf 	.word	0x080a93cf
 80a1818:	20000005 	.word	0x20000005
 80a181c:	20000006 	.word	0x20000006
 80a1820:	20000007 	.word	0x20000007
 80a1824:	080a94f0 	.word	0x080a94f0
 80a1828:	080a00cd 	.word	0x080a00cd
 80a182c:	080a950d 	.word	0x080a950d
 80a1830:	080a9523 	.word	0x080a9523
 80a1834:	2000013c 	.word	0x2000013c
 80a1838:	080a9531 	.word	0x080a9531
 80a183c:	080a953d 	.word	0x080a953d
 80a1840:	080a955a 	.word	0x080a955a
 80a1844:	080a9565 	.word	0x080a9565
 80a1848:	080a9571 	.word	0x080a9571
 80a184c:	080a9591 	.word	0x080a9591
 80a1850:	2000008c 	.word	0x2000008c
 80a1854:	080a959d 	.word	0x080a959d
 80a1858:	080a95e5 	.word	0x080a95e5
 80a185c:	080a95f6 	.word	0x080a95f6
 80a1860:	080a963d 	.word	0x080a963d
 80a1864:	080a9667 	.word	0x080a9667
 80a1868:	080a9691 	.word	0x080a9691
 80a186c:	200001b4 	.word	0x200001b4
 80a1870:	080a96bb 	.word	0x080a96bb
 80a1874:	080a96cc 	.word	0x080a96cc
 80a1878:	20000100 	.word	0x20000100
 80a187c:	080a9713 	.word	0x080a9713
 80a1880:	080a96db 	.word	0x080a96db
 80a1884:	080a9750 	.word	0x080a9750
 80a1888:	200001d8 	.word	0x200001d8
 80a188c:	080a9808 	.word	0x080a9808
 80a1890:	080a9838 	.word	0x080a9838
 80a1894:	080a9786 	.word	0x080a9786
 80a1898:	080a97b4 	.word	0x080a97b4
 80a189c:	080a97e2 	.word	0x080a97e2
        Serial.println("Please Calibrate Sensor: ");
 80a18a0:	f003 fb22 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a18a4:	493c      	ldr	r1, [pc, #240]	; (80a1998 <setup+0x4d8>)
 80a18a6:	f002 ffd7 	bl	80a4858 <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
 80a18aa:	4c3c      	ldr	r4, [pc, #240]	; (80a199c <setup+0x4dc>)
            Serial.print("X: ");
 80a18ac:	4e3c      	ldr	r6, [pc, #240]	; (80a19a0 <setup+0x4e0>)
            Serial.print("\tY: ");
 80a18ae:	4d3d      	ldr	r5, [pc, #244]	; (80a19a4 <setup+0x4e4>)
        while (!bno.isFullyCalibrated())
 80a18b0:	4620      	mov	r0, r4
 80a18b2:	f001 fabd 	bl	80a2e30 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
 80a18b6:	bb78      	cbnz	r0, 80a1918 <setup+0x458>
            bno.getEvent(&event);
 80a18b8:	a90f      	add	r1, sp, #60	; 0x3c
 80a18ba:	4620      	mov	r0, r4
 80a18bc:	f001 fbfe 	bl	80a30bc <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            Serial.print("X: ");
 80a18c0:	f003 fb12 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a18c4:	4631      	mov	r1, r6
 80a18c6:	f002 ffb4 	bl	80a4832 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.x, 4);
 80a18ca:	f003 fb0d 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a18ce:	2204      	movs	r2, #4
 80a18d0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a18d2:	f003 f8db 	bl	80a4a8c <_ZN5Print5printEfi>
            Serial.print("\tY: ");
 80a18d6:	f003 fb07 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a18da:	4629      	mov	r1, r5
 80a18dc:	f002 ffa9 	bl	80a4832 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.y, 4);
 80a18e0:	f003 fb02 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a18e4:	2204      	movs	r2, #4
 80a18e6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80a18e8:	f003 f8d0 	bl	80a4a8c <_ZN5Print5printEfi>
            Serial.print("\tZ: ");
 80a18ec:	f003 fafc 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a18f0:	492d      	ldr	r1, [pc, #180]	; (80a19a8 <setup+0x4e8>)
 80a18f2:	f002 ff9e 	bl	80a4832 <_ZN5Print5printEPKc>
            Serial.print(event.orientation.z, 4);
 80a18f6:	f003 faf7 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a18fa:	2204      	movs	r2, #4
 80a18fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80a18fe:	f003 f8c5 	bl	80a4a8c <_ZN5Print5printEfi>
            displayCalStatus();
 80a1902:	f7ff fa2b 	bl	80a0d5c <_Z16displayCalStatusv>
            Serial.println("");
 80a1906:	f003 faef 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a190a:	4928      	ldr	r1, [pc, #160]	; (80a19ac <setup+0x4ec>)
 80a190c:	f002 ffa4 	bl	80a4858 <_ZN5Print7printlnEPKc>
            delay(BNO055_STARTUP_SAMPLE_DELAY_MS);
 80a1910:	2064      	movs	r0, #100	; 0x64
 80a1912:	f003 f959 	bl	80a4bc8 <delay>
        while (!bno.isFullyCalibrated())
 80a1916:	e7cb      	b.n	80a18b0 <setup+0x3f0>
    Serial.println("\nFully calibrated!");
 80a1918:	f003 fae6 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a191c:	4924      	ldr	r1, [pc, #144]	; (80a19b0 <setup+0x4f0>)
 80a191e:	f002 ff9b 	bl	80a4858 <_ZN5Print7printlnEPKc>
    Serial.println("--------------------------------");
 80a1922:	f003 fae1 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1926:	4923      	ldr	r1, [pc, #140]	; (80a19b4 <setup+0x4f4>)
 80a1928:	f002 ff96 	bl	80a4858 <_ZN5Print7printlnEPKc>
    Serial.println("Calibration Results: ");
 80a192c:	f003 fadc 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1930:	4921      	ldr	r1, [pc, #132]	; (80a19b8 <setup+0x4f8>)
 80a1932:	f002 ff91 	bl	80a4858 <_ZN5Print7printlnEPKc>
    bno.getSensorOffsets(newCalib);
 80a1936:	a909      	add	r1, sp, #36	; 0x24
 80a1938:	4818      	ldr	r0, [pc, #96]	; (80a199c <setup+0x4dc>)
 80a193a:	f001 fab2 	bl	80a2ea2 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>
    displaySensorOffsets(newCalib);
 80a193e:	a809      	add	r0, sp, #36	; 0x24
 80a1940:	f7fe fd96 	bl	80a0470 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
    Serial.println("\n\nStoring calibration data to EEPROM...");
 80a1944:	f003 fad0 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1948:	491c      	ldr	r1, [pc, #112]	; (80a19bc <setup+0x4fc>)
 80a194a:	f002 ff85 	bl	80a4858 <_ZN5Print7printlnEPKc>
    bno.getSensor(&sensor);
 80a194e:	a918      	add	r1, sp, #96	; 0x60
 80a1950:	4812      	ldr	r0, [pc, #72]	; (80a199c <setup+0x4dc>)
 80a1952:	f001 f8cf 	bl	80a2af4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    bnoID = sensor.sensor_id;
 80a1956:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80a1958:	9302      	str	r3, [sp, #8]
    EEPROM.put(eeAddress, bnoID);
 80a195a:	f003 fdc5 	bl	80a54e8 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a195e:	a902      	add	r1, sp, #8
 80a1960:	2204      	movs	r2, #4
 80a1962:	2000      	movs	r0, #0
 80a1964:	f002 fb78 	bl	80a4058 <HAL_EEPROM_Put>
    EEPROM.put(eeAddress, newCalib);
 80a1968:	f003 fdbe 	bl	80a54e8 <_Z21__fetch_global_EEPROMv>
 80a196c:	2216      	movs	r2, #22
 80a196e:	a909      	add	r1, sp, #36	; 0x24
 80a1970:	2004      	movs	r0, #4
 80a1972:	f002 fb71 	bl	80a4058 <HAL_EEPROM_Put>
    Serial.println("Data stored to EEPROM.");
 80a1976:	f003 fab7 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a197a:	4911      	ldr	r1, [pc, #68]	; (80a19c0 <setup+0x500>)
 80a197c:	f002 ff6c 	bl	80a4858 <_ZN5Print7printlnEPKc>
    Serial.println("\n--------------------------------\n");
 80a1980:	f003 fab2 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a1984:	490f      	ldr	r1, [pc, #60]	; (80a19c4 <setup+0x504>)
 80a1986:	f002 ff67 	bl	80a4858 <_ZN5Print7printlnEPKc>
    delay(500);
 80a198a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a198e:	f003 f91b 	bl	80a4bc8 <delay>
}
 80a1992:	b022      	add	sp, #136	; 0x88
 80a1994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1998:	080a984d 	.word	0x080a984d
 80a199c:	20000100 	.word	0x20000100
 80a19a0:	080a93c0 	.word	0x080a93c0
 80a19a4:	080a93c4 	.word	0x080a93c4
 80a19a8:	080a93c9 	.word	0x080a93c9
 80a19ac:	080a93e5 	.word	0x080a93e5
 80a19b0:	080a9867 	.word	0x080a9867
 80a19b4:	080a9206 	.word	0x080a9206
 80a19b8:	080a987a 	.word	0x080a987a
 80a19bc:	080a9890 	.word	0x080a9890
 80a19c0:	080a98b8 	.word	0x080a98b8
 80a19c4:	080a98cf 	.word	0x080a98cf

080a19c8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 80a19c8:	4770      	bx	lr
	...

080a19cc <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a19cc:	4b02      	ldr	r3, [pc, #8]	; (80a19d8 <__tcf_0+0xc>)
 80a19ce:	6898      	ldr	r0, [r3, #8]
 80a19d0:	b108      	cbz	r0, 80a19d6 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a19d2:	f002 bb69 	b.w	80a40a8 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a19d6:	4770      	bx	lr
 80a19d8:	20000244 	.word	0x20000244

080a19dc <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 80a19dc:	b510      	push	{r4, lr}
 80a19de:	4604      	mov	r4, r0
  }
 80a19e0:	2110      	movs	r1, #16
 80a19e2:	f7fe fb5e 	bl	80a00a2 <_ZdlPvj>
 80a19e6:	4620      	mov	r0, r4
 80a19e8:	bd10      	pop	{r4, pc}

080a19ea <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a19ea:	b40e      	push	{r1, r2, r3}
 80a19ec:	b503      	push	{r0, r1, lr}
 80a19ee:	ab03      	add	r3, sp, #12
 80a19f0:	f853 2b04 	ldr.w	r2, [r3], #4
        auto r = this->vprintf(false, format, args);
 80a19f4:	2100      	movs	r1, #0
        va_start(args, format);
 80a19f6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a19f8:	f003 f857 	bl	80a4aaa <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
 80a19fc:	b002      	add	sp, #8
 80a19fe:	f85d eb04 	ldr.w	lr, [sp], #4
 80a1a02:	b003      	add	sp, #12
 80a1a04:	4770      	bx	lr
	...

080a1a08 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a1a08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1a0a:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 80a1a0c:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 80a1a0e:	4608      	mov	r0, r1
    if (default_ && clock_ == 0)
 80a1a10:	68a3      	ldr	r3, [r4, #8]
 80a1a12:	b132      	cbz	r2, 80a1a22 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 80a1a14:	b9a3      	cbnz	r3, 80a1a40 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 80a1a16:	490b      	ldr	r1, [pc, #44]	; (80a1a44 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 80a1a18:	b002      	add	sp, #8
 80a1a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 80a1a1e:	f002 bf08 	b.w	80a4832 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a1a22:	4a09      	ldr	r2, [pc, #36]	; (80a1a48 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 80a1a24:	7b26      	ldrb	r6, [r4, #12]
 80a1a26:	4d09      	ldr	r5, [pc, #36]	; (80a1a4c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 80a1a28:	4909      	ldr	r1, [pc, #36]	; (80a1a50 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 80a1a2a:	7b64      	ldrb	r4, [r4, #13]
 80a1a2c:	2e01      	cmp	r6, #1
 80a1a2e:	bf18      	it	ne
 80a1a30:	4629      	movne	r1, r5
 80a1a32:	e9cd 1400 	strd	r1, r4, [sp]
 80a1a36:	4907      	ldr	r1, [pc, #28]	; (80a1a54 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 80a1a38:	f7ff ffd7 	bl	80a19ea <_ZN5Print6printfEPKcz>
  }
 80a1a3c:	b002      	add	sp, #8
 80a1a3e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a1a40:	4a05      	ldr	r2, [pc, #20]	; (80a1a58 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 80a1a42:	e7ef      	b.n	80a1a24 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 80a1a44:	080a9903 	.word	0x080a9903
 80a1a48:	080a93e5 	.word	0x080a93e5
 80a1a4c:	080a98ff 	.word	0x080a98ff
 80a1a50:	080a98fb 	.word	0x080a98fb
 80a1a54:	080a9919 	.word	0x080a9919
 80a1a58:	080a98f2 	.word	0x080a98f2

080a1a5c <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
 80a1a5c:	f04f 33ff 	mov.w	r3, #4294967295
 80a1a60:	6103      	str	r3, [r0, #16]
{ }
 80a1a62:	4770      	bx	lr

080a1a64 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
 80a1a64:	6880      	ldr	r0, [r0, #8]
 80a1a66:	4770      	bx	lr

080a1a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 80a1a68:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a1a6a:	4d0b      	ldr	r5, [pc, #44]	; (80a1a98 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 80a1a6c:	7829      	ldrb	r1, [r5, #0]
 80a1a6e:	f3bf 8f5b 	dmb	ish
 80a1a72:	f011 0401 	ands.w	r4, r1, #1
 80a1a76:	d10d      	bne.n	80a1a94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>
 80a1a78:	4628      	mov	r0, r5
 80a1a7a:	f7fe fb1f 	bl	80a00bc <__cxa_guard_acquire>
 80a1a7e:	b148      	cbz	r0, 80a1a94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>
 80a1a80:	4621      	mov	r1, r4
 80a1a82:	4806      	ldr	r0, [pc, #24]	; (80a1a9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a1a84:	f002 fd4c 	bl	80a4520 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1a88:	4628      	mov	r0, r5
 80a1a8a:	f7fe fb1c 	bl	80a00c6 <__cxa_guard_release>
 80a1a8e:	4804      	ldr	r0, [pc, #16]	; (80a1aa0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a1a90:	f007 fa96 	bl	80a8fc0 <atexit>
        return instance;
    }
 80a1a94:	4801      	ldr	r0, [pc, #4]	; (80a1a9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a1a96:	bd38      	pop	{r3, r4, r5, pc}
 80a1a98:	20000240 	.word	0x20000240
 80a1a9c:	20000244 	.word	0x20000244
 80a1aa0:	080a19cd 	.word	0x080a19cd

080a1aa4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
 80a1aa4:	b508      	push	{r3, lr}
        instance().endTransaction();
 80a1aa6:	f7ff ffdf 	bl	80a1a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
 80a1aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
 80a1aae:	f002 bd55 	b.w	80a455c <_ZN8SPIClass14endTransactionEv>

080a1ab2 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
 80a1ab2:	b510      	push	{r4, lr}
 80a1ab4:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
 80a1ab6:	f7ff ffd7 	bl	80a1a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a1aba:	4621      	mov	r1, r4
    }
 80a1abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return instance().beginTransaction(settings);
 80a1ac0:	f002 bd66 	b.w	80a4590 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

080a1ac4 <_ZN15Adafruit_BME2807spixferEh>:
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a1ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sck == -1)
 80a1ac8:	f990 3013 	ldrsb.w	r3, [r0, #19]
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a1acc:	4605      	mov	r5, r0
    if (_sck == -1)
 80a1ace:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a1ad0:	460f      	mov	r7, r1
    if (_sck == -1)
 80a1ad2:	d106      	bne.n	80a1ae2 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80a1ad4:	f7ff ffc8 	bl	80a1a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a1ad8:	4639      	mov	r1, r7
}
 80a1ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a1ade:	f002 bdc3 	b.w	80a4668 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
 80a1ae2:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
 80a1ae4:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
 80a1ae6:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
 80a1aea:	f995 0013 	ldrsb.w	r0, [r5, #19]
 80a1aee:	2100      	movs	r1, #0
 80a1af0:	b280      	uxth	r0, r0
 80a1af2:	f003 fc76 	bl	80a53e2 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
 80a1af6:	f995 0011 	ldrsb.w	r0, [r5, #17]
 80a1afa:	fa08 f106 	lsl.w	r1, r8, r6
 80a1afe:	4039      	ands	r1, r7
 80a1b00:	b280      	uxth	r0, r0
 80a1b02:	f003 fc6e 	bl	80a53e2 <digitalWrite>
        digitalWrite(_sck, HIGH);
 80a1b06:	f995 0013 	ldrsb.w	r0, [r5, #19]
 80a1b0a:	2101      	movs	r1, #1
 80a1b0c:	b280      	uxth	r0, r0
 80a1b0e:	f003 fc68 	bl	80a53e2 <digitalWrite>
        if (digitalRead(_miso))
 80a1b12:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
 80a1b16:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
 80a1b18:	b280      	uxth	r0, r0
        reply <<= 1;
 80a1b1a:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
 80a1b1c:	f003 fc7a 	bl	80a5414 <digitalRead>
 80a1b20:	b108      	cbz	r0, 80a1b26 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
 80a1b22:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
 80a1b26:	3e01      	subs	r6, #1
 80a1b28:	d2df      	bcs.n	80a1aea <_ZN15Adafruit_BME2807spixferEh+0x26>
}
 80a1b2a:	4620      	mov	r0, r4
 80a1b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1b30 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
 80a1b30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
 80a1b32:	f990 3010 	ldrsb.w	r3, [r0, #16]
void Adafruit_BME280::write8(byte reg, byte value) {
 80a1b36:	4604      	mov	r4, r0
    if (_cs == -1) {
 80a1b38:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
 80a1b3a:	460e      	mov	r6, r1
 80a1b3c:	4615      	mov	r5, r2
    if (_cs == -1) {
 80a1b3e:	d113      	bne.n	80a1b68 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a1b40:	7901      	ldrb	r1, [r0, #4]
 80a1b42:	6800      	ldr	r0, [r0, #0]
 80a1b44:	f003 fb1e 	bl	80a5184 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a1b48:	6820      	ldr	r0, [r4, #0]
 80a1b4a:	4631      	mov	r1, r6
 80a1b4c:	6803      	ldr	r3, [r0, #0]
 80a1b4e:	689b      	ldr	r3, [r3, #8]
 80a1b50:	4798      	blx	r3
        _wire -> write((uint8_t)value);
 80a1b52:	6820      	ldr	r0, [r4, #0]
 80a1b54:	4629      	mov	r1, r5
 80a1b56:	6803      	ldr	r3, [r0, #0]
 80a1b58:	689b      	ldr	r3, [r3, #8]
 80a1b5a:	4798      	blx	r3
        _wire -> endTransmission();
 80a1b5c:	6820      	ldr	r0, [r4, #0]
}
 80a1b5e:	b004      	add	sp, #16
 80a1b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
 80a1b64:	f003 bb16 	b.w	80a5194 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
 80a1b68:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a1b6c:	3301      	adds	r3, #1
 80a1b6e:	d10c      	bne.n	80a1b8a <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
 80a1b70:	4b16      	ldr	r3, [pc, #88]	; (80a1bcc <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a1b72:	4668      	mov	r0, sp
 80a1b74:	9300      	str	r3, [sp, #0]
 80a1b76:	2300      	movs	r3, #0
 80a1b78:	f88d 3004 	strb.w	r3, [sp, #4]
 80a1b7c:	4b14      	ldr	r3, [pc, #80]	; (80a1bd0 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
 80a1b7e:	9302      	str	r3, [sp, #8]
 80a1b80:	2301      	movs	r3, #1
 80a1b82:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a1b86:	f7ff ff94 	bl	80a1ab2 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
 80a1b8a:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a1b8e:	2100      	movs	r1, #0
 80a1b90:	b280      	uxth	r0, r0
 80a1b92:	f003 fc26 	bl	80a53e2 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
 80a1b96:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 80a1b9a:	4620      	mov	r0, r4
 80a1b9c:	f7ff ff92 	bl	80a1ac4 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
 80a1ba0:	4629      	mov	r1, r5
 80a1ba2:	4620      	mov	r0, r4
 80a1ba4:	f7ff ff8e 	bl	80a1ac4 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
 80a1ba8:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a1bac:	2101      	movs	r1, #1
 80a1bae:	b280      	uxth	r0, r0
 80a1bb0:	f003 fc17 	bl	80a53e2 <digitalWrite>
    if (_sck == -1)
 80a1bb4:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a1bb8:	3301      	adds	r3, #1
 80a1bba:	d104      	bne.n	80a1bc6 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
 80a1bbc:	b004      	add	sp, #16
 80a1bbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
 80a1bc2:	f7ff bf6f 	b.w	80a1aa4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
 80a1bc6:	b004      	add	sp, #16
 80a1bc8:	bd70      	pop	{r4, r5, r6, pc}
 80a1bca:	bf00      	nop
 80a1bcc:	080a9940 	.word	0x080a9940
 80a1bd0:	0007a120 	.word	0x0007a120

080a1bd4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
 80a1bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1bd6:	4604      	mov	r4, r0
    _measReg.osrs_t   = tempSampling;
 80a1bd8:	00db      	lsls	r3, r3, #3
 80a1bda:	f002 0207 	and.w	r2, r2, #7
 80a1bde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80a1be2:	4313      	orrs	r3, r2
 80a1be4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
 80a1be8:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
 80a1bec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
 80a1bf0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
 80a1bf4:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80a1bf8:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
 80a1bfc:	f366 1347 	bfi	r3, r6, #5, #3
 80a1c00:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
 80a1c04:	00ed      	lsls	r5, r5, #3
 80a1c06:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80a1c0a:	f007 0707 	and.w	r7, r7, #7
 80a1c0e:	f005 0538 	and.w	r5, r5, #56	; 0x38
 80a1c12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80a1c16:	433d      	orrs	r5, r7
 80a1c18:	431d      	orrs	r5, r3
 80a1c1a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
 80a1c1e:	f006 0207 	and.w	r2, r6, #7
 80a1c22:	21f2      	movs	r1, #242	; 0xf2
 80a1c24:	f7ff ff84 	bl	80a1b30 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
 80a1c28:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
 80a1c2c:	4620      	mov	r0, r4
 80a1c2e:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 80a1c32:	f002 0107 	and.w	r1, r2, #7
 80a1c36:	009b      	lsls	r3, r3, #2
 80a1c38:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80a1c3c:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
 80a1c40:	21f5      	movs	r1, #245	; 0xf5
 80a1c42:	f7ff ff75 	bl	80a1b30 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
 80a1c46:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
 80a1c4a:	4620      	mov	r0, r4
 80a1c4c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 80a1c50:	f002 0107 	and.w	r1, r2, #7
 80a1c54:	009b      	lsls	r3, r3, #2
 80a1c56:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80a1c5a:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 80a1c5e:	21f4      	movs	r1, #244	; 0xf4
}
 80a1c60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
 80a1c64:	f7ff bf64 	b.w	80a1b30 <_ZN15Adafruit_BME2806write8Ehh>

080a1c68 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
 80a1c68:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
 80a1c6a:	f990 3010 	ldrsb.w	r3, [r0, #16]
uint8_t Adafruit_BME280::read8(byte reg) {
 80a1c6e:	4604      	mov	r4, r0
    if (_cs == -1) {
 80a1c70:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
 80a1c72:	460d      	mov	r5, r1
 80a1c74:	b085      	sub	sp, #20
    if (_cs == -1) {
 80a1c76:	d118      	bne.n	80a1caa <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a1c78:	7901      	ldrb	r1, [r0, #4]
 80a1c7a:	6800      	ldr	r0, [r0, #0]
 80a1c7c:	f003 fa82 	bl	80a5184 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a1c80:	6820      	ldr	r0, [r4, #0]
 80a1c82:	4629      	mov	r1, r5
 80a1c84:	6803      	ldr	r3, [r0, #0]
 80a1c86:	689b      	ldr	r3, [r3, #8]
 80a1c88:	4798      	blx	r3
        _wire -> endTransmission();
 80a1c8a:	6820      	ldr	r0, [r4, #0]
 80a1c8c:	f003 fa82 	bl	80a5194 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
 80a1c90:	2201      	movs	r2, #1
 80a1c92:	7921      	ldrb	r1, [r4, #4]
 80a1c94:	6820      	ldr	r0, [r4, #0]
 80a1c96:	f003 fa72 	bl	80a517e <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
 80a1c9a:	6820      	ldr	r0, [r4, #0]
 80a1c9c:	6803      	ldr	r3, [r0, #0]
 80a1c9e:	695b      	ldr	r3, [r3, #20]
 80a1ca0:	4798      	blx	r3
 80a1ca2:	b2c5      	uxtb	r5, r0
}
 80a1ca4:	4628      	mov	r0, r5
 80a1ca6:	b005      	add	sp, #20
 80a1ca8:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
 80a1caa:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a1cae:	3301      	adds	r3, #1
 80a1cb0:	d10c      	bne.n	80a1ccc <_ZN15Adafruit_BME2805read8Eh+0x64>
 80a1cb2:	4b15      	ldr	r3, [pc, #84]	; (80a1d08 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a1cb4:	4668      	mov	r0, sp
 80a1cb6:	9300      	str	r3, [sp, #0]
 80a1cb8:	2300      	movs	r3, #0
 80a1cba:	f88d 3004 	strb.w	r3, [sp, #4]
 80a1cbe:	4b13      	ldr	r3, [pc, #76]	; (80a1d0c <_ZN15Adafruit_BME2805read8Eh+0xa4>)
 80a1cc0:	9302      	str	r3, [sp, #8]
 80a1cc2:	2301      	movs	r3, #1
 80a1cc4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a1cc8:	f7ff fef3 	bl	80a1ab2 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
 80a1ccc:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a1cd0:	2100      	movs	r1, #0
 80a1cd2:	b280      	uxth	r0, r0
 80a1cd4:	f003 fb85 	bl	80a53e2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a1cd8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a1cdc:	4620      	mov	r0, r4
 80a1cde:	f7ff fef1 	bl	80a1ac4 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
 80a1ce2:	2100      	movs	r1, #0
 80a1ce4:	4620      	mov	r0, r4
 80a1ce6:	f7ff feed 	bl	80a1ac4 <_ZN15Adafruit_BME2807spixferEh>
 80a1cea:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
 80a1cec:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a1cf0:	2101      	movs	r1, #1
 80a1cf2:	b280      	uxth	r0, r0
 80a1cf4:	f003 fb75 	bl	80a53e2 <digitalWrite>
        if (_sck == -1)
 80a1cf8:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a1cfc:	3301      	adds	r3, #1
 80a1cfe:	d1d1      	bne.n	80a1ca4 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
 80a1d00:	f7ff fed0 	bl	80a1aa4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
 80a1d04:	e7ce      	b.n	80a1ca4 <_ZN15Adafruit_BME2805read8Eh+0x3c>
 80a1d06:	bf00      	nop
 80a1d08:	080a9940 	.word	0x080a9940
 80a1d0c:	0007a120 	.word	0x0007a120

080a1d10 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 80a1d10:	21f3      	movs	r1, #243	; 0xf3
{
 80a1d12:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 80a1d14:	f7ff ffa8 	bl	80a1c68 <_ZN15Adafruit_BME2805read8Eh>
}
 80a1d18:	f000 0001 	and.w	r0, r0, #1
 80a1d1c:	bd08      	pop	{r3, pc}
	...

080a1d20 <_ZN15Adafruit_BME2806read16Eh>:
{
 80a1d20:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
 80a1d22:	f990 3010 	ldrsb.w	r3, [r0, #16]
{
 80a1d26:	4604      	mov	r4, r0
    if (_cs == -1) {
 80a1d28:	3301      	adds	r3, #1
{
 80a1d2a:	460d      	mov	r5, r1
 80a1d2c:	b085      	sub	sp, #20
    if (_cs == -1) {
 80a1d2e:	d11f      	bne.n	80a1d70 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a1d30:	7901      	ldrb	r1, [r0, #4]
 80a1d32:	6800      	ldr	r0, [r0, #0]
 80a1d34:	f003 fa26 	bl	80a5184 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a1d38:	6820      	ldr	r0, [r4, #0]
 80a1d3a:	4629      	mov	r1, r5
 80a1d3c:	6803      	ldr	r3, [r0, #0]
 80a1d3e:	689b      	ldr	r3, [r3, #8]
 80a1d40:	4798      	blx	r3
        _wire -> endTransmission();
 80a1d42:	6820      	ldr	r0, [r4, #0]
 80a1d44:	f003 fa26 	bl	80a5194 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
 80a1d48:	2202      	movs	r2, #2
 80a1d4a:	7921      	ldrb	r1, [r4, #4]
 80a1d4c:	6820      	ldr	r0, [r4, #0]
 80a1d4e:	f003 fa16 	bl	80a517e <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
 80a1d52:	6820      	ldr	r0, [r4, #0]
 80a1d54:	6803      	ldr	r3, [r0, #0]
 80a1d56:	695b      	ldr	r3, [r3, #20]
 80a1d58:	4798      	blx	r3
 80a1d5a:	4605      	mov	r5, r0
 80a1d5c:	6820      	ldr	r0, [r4, #0]
 80a1d5e:	6803      	ldr	r3, [r0, #0]
 80a1d60:	695b      	ldr	r3, [r3, #20]
 80a1d62:	4798      	blx	r3
 80a1d64:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
 80a1d68:	b2ad      	uxth	r5, r5
}
 80a1d6a:	4628      	mov	r0, r5
 80a1d6c:	b005      	add	sp, #20
 80a1d6e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
 80a1d70:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a1d74:	3301      	adds	r3, #1
 80a1d76:	d10c      	bne.n	80a1d92 <_ZN15Adafruit_BME2806read16Eh+0x72>
 80a1d78:	4b18      	ldr	r3, [pc, #96]	; (80a1ddc <_ZN15Adafruit_BME2806read16Eh+0xbc>)
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a1d7a:	4668      	mov	r0, sp
 80a1d7c:	9300      	str	r3, [sp, #0]
 80a1d7e:	2300      	movs	r3, #0
 80a1d80:	f88d 3004 	strb.w	r3, [sp, #4]
 80a1d84:	4b16      	ldr	r3, [pc, #88]	; (80a1de0 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
 80a1d86:	9302      	str	r3, [sp, #8]
 80a1d88:	2301      	movs	r3, #1
 80a1d8a:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a1d8e:	f7ff fe90 	bl	80a1ab2 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
 80a1d92:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a1d96:	2100      	movs	r1, #0
 80a1d98:	b280      	uxth	r0, r0
 80a1d9a:	f003 fb22 	bl	80a53e2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a1d9e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a1da2:	4620      	mov	r0, r4
 80a1da4:	f7ff fe8e 	bl	80a1ac4 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
 80a1da8:	2100      	movs	r1, #0
 80a1daa:	4620      	mov	r0, r4
 80a1dac:	f7ff fe8a 	bl	80a1ac4 <_ZN15Adafruit_BME2807spixferEh>
 80a1db0:	2100      	movs	r1, #0
 80a1db2:	4605      	mov	r5, r0
 80a1db4:	4620      	mov	r0, r4
 80a1db6:	f7ff fe85 	bl	80a1ac4 <_ZN15Adafruit_BME2807spixferEh>
 80a1dba:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
        digitalWrite(_cs, HIGH);
 80a1dbe:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a1dc2:	2101      	movs	r1, #1
 80a1dc4:	b280      	uxth	r0, r0
 80a1dc6:	f003 fb0c 	bl	80a53e2 <digitalWrite>
        if (_sck == -1)
 80a1dca:	f994 3013 	ldrsb.w	r3, [r4, #19]
        value = (spixfer(0) << 8) | spixfer(0);
 80a1dce:	b2ad      	uxth	r5, r5
        if (_sck == -1)
 80a1dd0:	3301      	adds	r3, #1
 80a1dd2:	d1ca      	bne.n	80a1d6a <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
 80a1dd4:	f7ff fe66 	bl	80a1aa4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
 80a1dd8:	e7c7      	b.n	80a1d6a <_ZN15Adafruit_BME2806read16Eh+0x4a>
 80a1dda:	bf00      	nop
 80a1ddc:	080a9940 	.word	0x080a9940
 80a1de0:	0007a120 	.word	0x0007a120

080a1de4 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
 80a1de4:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
 80a1de6:	f7ff ff9b 	bl	80a1d20 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
 80a1dea:	ba40      	rev16	r0, r0
}
 80a1dec:	b280      	uxth	r0, r0
 80a1dee:	bd08      	pop	{r3, pc}

080a1df0 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
 80a1df0:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a1df2:	2188      	movs	r1, #136	; 0x88
{
 80a1df4:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a1df6:	f7ff fff5 	bl	80a1de4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
 80a1dfa:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a1dfc:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
 80a1dfe:	4620      	mov	r0, r4
 80a1e00:	f7ff fff0 	bl	80a1de4 <_ZN15Adafruit_BME2809read16_LEEh>
 80a1e04:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 80a1e06:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
 80a1e08:	4620      	mov	r0, r4
 80a1e0a:	f7ff ffeb 	bl	80a1de4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a1e0e:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 80a1e10:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a1e12:	4620      	mov	r0, r4
 80a1e14:	f7ff ffe6 	bl	80a1de4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
 80a1e18:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a1e1a:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
 80a1e1c:	4620      	mov	r0, r4
 80a1e1e:	f7ff ffe1 	bl	80a1de4 <_ZN15Adafruit_BME2809read16_LEEh>
 80a1e22:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 80a1e24:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
 80a1e26:	4620      	mov	r0, r4
 80a1e28:	f7ff ffdc 	bl	80a1de4 <_ZN15Adafruit_BME2809read16_LEEh>
 80a1e2c:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 80a1e2e:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
 80a1e30:	4620      	mov	r0, r4
 80a1e32:	f7ff ffd7 	bl	80a1de4 <_ZN15Adafruit_BME2809read16_LEEh>
 80a1e36:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 80a1e38:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
 80a1e3a:	4620      	mov	r0, r4
 80a1e3c:	f7ff ffd2 	bl	80a1de4 <_ZN15Adafruit_BME2809read16_LEEh>
 80a1e40:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 80a1e42:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
 80a1e44:	4620      	mov	r0, r4
 80a1e46:	f7ff ffcd 	bl	80a1de4 <_ZN15Adafruit_BME2809read16_LEEh>
 80a1e4a:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 80a1e4c:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
 80a1e4e:	4620      	mov	r0, r4
 80a1e50:	f7ff ffc8 	bl	80a1de4 <_ZN15Adafruit_BME2809read16_LEEh>
 80a1e54:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 80a1e56:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
 80a1e58:	4620      	mov	r0, r4
 80a1e5a:	f7ff ffc3 	bl	80a1de4 <_ZN15Adafruit_BME2809read16_LEEh>
 80a1e5e:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 80a1e60:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
 80a1e62:	4620      	mov	r0, r4
 80a1e64:	f7ff ffbe 	bl	80a1de4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a1e68:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 80a1e6a:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a1e6c:	4620      	mov	r0, r4
 80a1e6e:	f7ff fefb 	bl	80a1c68 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
 80a1e72:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a1e74:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
 80a1e78:	4620      	mov	r0, r4
 80a1e7a:	f7ff ffb3 	bl	80a1de4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a1e7e:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 80a1e80:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a1e82:	4620      	mov	r0, r4
 80a1e84:	f7ff fef0 	bl	80a1c68 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80a1e88:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a1e8a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80a1e8e:	4620      	mov	r0, r4
 80a1e90:	f7ff feea 	bl	80a1c68 <_ZN15Adafruit_BME2805read8Eh>
 80a1e94:	21e5      	movs	r1, #229	; 0xe5
 80a1e96:	4605      	mov	r5, r0
 80a1e98:	4620      	mov	r0, r4
 80a1e9a:	f7ff fee5 	bl	80a1c68 <_ZN15Adafruit_BME2805read8Eh>
 80a1e9e:	f000 030f 	and.w	r3, r0, #15
 80a1ea2:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 80a1ea6:	21e6      	movs	r1, #230	; 0xe6
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80a1ea8:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 80a1eaa:	4620      	mov	r0, r4
 80a1eac:	f7ff fedc 	bl	80a1c68 <_ZN15Adafruit_BME2805read8Eh>
 80a1eb0:	21e5      	movs	r1, #229	; 0xe5
 80a1eb2:	4605      	mov	r5, r0
 80a1eb4:	4620      	mov	r0, r4
 80a1eb6:	f7ff fed7 	bl	80a1c68 <_ZN15Adafruit_BME2805read8Eh>
 80a1eba:	f3c0 1307 	ubfx	r3, r0, #4, #8
 80a1ebe:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
 80a1ec2:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 80a1ec4:	21e7      	movs	r1, #231	; 0xe7
 80a1ec6:	4620      	mov	r0, r4
 80a1ec8:	f7ff fece 	bl	80a1c68 <_ZN15Adafruit_BME2805read8Eh>
 80a1ecc:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
 80a1ed0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1ed4 <_ZN15Adafruit_BME2806read24Eh>:
{
 80a1ed4:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
 80a1ed6:	f990 3010 	ldrsb.w	r3, [r0, #16]
{
 80a1eda:	4604      	mov	r4, r0
    if (_cs == -1) {
 80a1edc:	3301      	adds	r3, #1
{
 80a1ede:	460d      	mov	r5, r1
 80a1ee0:	b085      	sub	sp, #20
    if (_cs == -1) {
 80a1ee2:	d123      	bne.n	80a1f2c <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a1ee4:	7901      	ldrb	r1, [r0, #4]
 80a1ee6:	6800      	ldr	r0, [r0, #0]
 80a1ee8:	f003 f94c 	bl	80a5184 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a1eec:	6820      	ldr	r0, [r4, #0]
 80a1eee:	4629      	mov	r1, r5
 80a1ef0:	6803      	ldr	r3, [r0, #0]
 80a1ef2:	689b      	ldr	r3, [r3, #8]
 80a1ef4:	4798      	blx	r3
        _wire -> endTransmission();
 80a1ef6:	6820      	ldr	r0, [r4, #0]
 80a1ef8:	f003 f94c 	bl	80a5194 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
 80a1efc:	2203      	movs	r2, #3
 80a1efe:	7921      	ldrb	r1, [r4, #4]
 80a1f00:	6820      	ldr	r0, [r4, #0]
 80a1f02:	f003 f93c 	bl	80a517e <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
 80a1f06:	6820      	ldr	r0, [r4, #0]
 80a1f08:	6803      	ldr	r3, [r0, #0]
 80a1f0a:	695b      	ldr	r3, [r3, #20]
 80a1f0c:	4798      	blx	r3
        value <<= 8;
 80a1f0e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
 80a1f10:	6820      	ldr	r0, [r4, #0]
 80a1f12:	6803      	ldr	r3, [r0, #0]
 80a1f14:	695b      	ldr	r3, [r3, #20]
 80a1f16:	4798      	blx	r3
 80a1f18:	4305      	orrs	r5, r0
        value |= _wire -> read();
 80a1f1a:	6820      	ldr	r0, [r4, #0]
        value <<= 8;
 80a1f1c:	022d      	lsls	r5, r5, #8
        value |= _wire -> read();
 80a1f1e:	6803      	ldr	r3, [r0, #0]
 80a1f20:	695b      	ldr	r3, [r3, #20]
 80a1f22:	4798      	blx	r3
 80a1f24:	4305      	orrs	r5, r0
}
 80a1f26:	4628      	mov	r0, r5
 80a1f28:	b005      	add	sp, #20
 80a1f2a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
 80a1f2c:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a1f30:	3301      	adds	r3, #1
 80a1f32:	d10c      	bne.n	80a1f4e <_ZN15Adafruit_BME2806read24Eh+0x7a>
 80a1f34:	4b1a      	ldr	r3, [pc, #104]	; (80a1fa0 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a1f36:	4668      	mov	r0, sp
 80a1f38:	9300      	str	r3, [sp, #0]
 80a1f3a:	2300      	movs	r3, #0
 80a1f3c:	f88d 3004 	strb.w	r3, [sp, #4]
 80a1f40:	4b18      	ldr	r3, [pc, #96]	; (80a1fa4 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
 80a1f42:	9302      	str	r3, [sp, #8]
 80a1f44:	2301      	movs	r3, #1
 80a1f46:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a1f4a:	f7ff fdb2 	bl	80a1ab2 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
 80a1f4e:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a1f52:	2100      	movs	r1, #0
 80a1f54:	b280      	uxth	r0, r0
 80a1f56:	f003 fa44 	bl	80a53e2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a1f5a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a1f5e:	4620      	mov	r0, r4
 80a1f60:	f7ff fdb0 	bl	80a1ac4 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
 80a1f64:	2100      	movs	r1, #0
 80a1f66:	4620      	mov	r0, r4
 80a1f68:	f7ff fdac 	bl	80a1ac4 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
 80a1f6c:	2100      	movs	r1, #0
        value <<= 8;
 80a1f6e:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
 80a1f70:	4620      	mov	r0, r4
 80a1f72:	f7ff fda7 	bl	80a1ac4 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
 80a1f76:	2100      	movs	r1, #0
        value |= spixfer(0);
 80a1f78:	4305      	orrs	r5, r0
        value |= spixfer(0);
 80a1f7a:	4620      	mov	r0, r4
 80a1f7c:	f7ff fda2 	bl	80a1ac4 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
 80a1f80:	022d      	lsls	r5, r5, #8
        value |= spixfer(0);
 80a1f82:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
 80a1f84:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a1f88:	2101      	movs	r1, #1
 80a1f8a:	b280      	uxth	r0, r0
 80a1f8c:	f003 fa29 	bl	80a53e2 <digitalWrite>
        if (_sck == -1)
 80a1f90:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a1f94:	3301      	adds	r3, #1
 80a1f96:	d1c6      	bne.n	80a1f26 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
 80a1f98:	f7ff fd84 	bl	80a1aa4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
 80a1f9c:	e7c3      	b.n	80a1f26 <_ZN15Adafruit_BME2806read24Eh+0x52>
 80a1f9e:	bf00      	nop
 80a1fa0:	080a9940 	.word	0x080a9940
 80a1fa4:	0007a120 	.word	0x0007a120

080a1fa8 <_ZN15Adafruit_BME28015readTemperatureEv>:
{
 80a1fa8:	b510      	push	{r4, lr}
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 80a1faa:	21fa      	movs	r1, #250	; 0xfa
{
 80a1fac:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 80a1fae:	f7ff ff91 	bl	80a1ed4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
 80a1fb2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a1fb6:	d01d      	beq.n	80a1ff4 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 80a1fb8:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
 80a1fba:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
 80a1fbe:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 80a1fc2:	0049      	lsls	r1, r1, #1
 80a1fc4:	ebc1 11e0 	rsb	r1, r1, r0, asr #7
 80a1fc8:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
 80a1fca:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
 80a1fce:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
 80a1fd2:	131b      	asrs	r3, r3, #12
 80a1fd4:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
 80a1fd6:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
 80a1fd8:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 80a1fdc:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
 80a1fde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a1fe2:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80a1fe6:	1200      	asrs	r0, r0, #8
 80a1fe8:	f006 fbd6 	bl	80a8798 <__aeabi_i2f>
    return T/100;
 80a1fec:	4902      	ldr	r1, [pc, #8]	; (80a1ff8 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>)
 80a1fee:	f006 fcdb 	bl	80a89a8 <__aeabi_fdiv>
}
 80a1ff2:	bd10      	pop	{r4, pc}
        return NAN;
 80a1ff4:	4801      	ldr	r0, [pc, #4]	; (80a1ffc <_ZN15Adafruit_BME28015readTemperatureEv+0x54>)
 80a1ff6:	e7fc      	b.n	80a1ff2 <_ZN15Adafruit_BME28015readTemperatureEv+0x4a>
 80a1ff8:	42c80000 	.word	0x42c80000
 80a1ffc:	7fc00000 	.word	0x7fc00000

080a2000 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
 80a2000:	b510      	push	{r4, lr}
 80a2002:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
 80a2004:	f7ff ffd0 	bl	80a1fa8 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 80a2008:	21fd      	movs	r1, #253	; 0xfd
 80a200a:	4620      	mov	r0, r4
 80a200c:	f7ff fe88 	bl	80a1d20 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
 80a2010:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80a2014:	d03a      	beq.n	80a208c <_ZN15Adafruit_BME28012readHumidityEv+0x8c>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 80a2016:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
 80a201a:	68e2      	ldr	r2, [r4, #12]
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 80a201c:	051b      	lsls	r3, r3, #20
 80a201e:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a2022:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
 80a2026:	f5a2 3196 	sub.w	r1, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 80a202a:	fb01 3310 	mls	r3, r1, r0, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a202e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80a2032:	13d8      	asrs	r0, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80a2034:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 80a2038:	f994 2036 	ldrsb.w	r2, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80a203c:	434b      	muls	r3, r1
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 80a203e:	434a      	muls	r2, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80a2040:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 80a2042:	1292      	asrs	r2, r2, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80a2044:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 80a2048:	4353      	muls	r3, r2
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
 80a204a:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80a204e:	129b      	asrs	r3, r3, #10
 80a2050:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
 80a2054:	4353      	muls	r3, r2
 80a2056:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80a205a:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 80a205c:	4343      	muls	r3, r0
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80a205e:	13da      	asrs	r2, r3, #15
 80a2060:	4352      	muls	r2, r2
 80a2062:	11d0      	asrs	r0, r2, #7
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
 80a2064:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80a2068:	4350      	muls	r0, r2
 80a206a:	eba3 1320 	sub.w	r3, r3, r0, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 80a206e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 80a2072:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80a2076:	bfa8      	it	ge
 80a2078:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
 80a207c:	1318      	asrs	r0, r3, #12
 80a207e:	f006 fb8b 	bl	80a8798 <__aeabi_i2f>
    return  h / 1024.0;
 80a2082:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80a2086:	f006 fbdb 	bl	80a8840 <__aeabi_fmul>
}
 80a208a:	bd10      	pop	{r4, pc}
        return NAN;
 80a208c:	4800      	ldr	r0, [pc, #0]	; (80a2090 <_ZN15Adafruit_BME28012readHumidityEv+0x90>)
 80a208e:	e7fc      	b.n	80a208a <_ZN15Adafruit_BME28012readHumidityEv+0x8a>
 80a2090:	7fc00000 	.word	0x7fc00000

080a2094 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
 80a2094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2098:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
 80a209a:	f7ff ff85 	bl	80a1fa8 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 80a209e:	21f7      	movs	r1, #247	; 0xf7
 80a20a0:	4628      	mov	r0, r5
 80a20a2:	f7ff ff17 	bl	80a1ed4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
 80a20a6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a20aa:	f000 80b1 	beq.w	80a2210 <_ZN15Adafruit_BME28012readPressureEv+0x17c>
    var1 = ((int64_t)t_fine) - 128000;
 80a20ae:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a20b0:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
 80a20b4:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 80a20b8:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
 80a20bc:	f14e 3eff 	adc.w	lr, lr, #4294967295
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a20c0:	fb03 f20e 	mul.w	r2, r3, lr
 80a20c4:	17dc      	asrs	r4, r3, #31
 80a20c6:	fb01 2204 	mla	r2, r1, r4, r2
 80a20ca:	fba3 3401 	umull	r3, r4, r3, r1
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a20ce:	fba1 7801 	umull	r7, r8, r1, r1
 80a20d2:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a20d6:	4422      	add	r2, r4
 80a20d8:	0312      	lsls	r2, r2, #12
 80a20da:	031c      	lsls	r4, r3, #12
 80a20dc:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
 80a20e0:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a20e4:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
 80a20e8:	fb03 f608 	mul.w	r6, r3, r8
 80a20ec:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 80a20f0:	fb07 660c 	mla	r6, r7, ip, r6
 80a20f4:	fba3 3c07 	umull	r3, ip, r3, r7
 80a20f8:	4466      	add	r6, ip
 80a20fa:	0a1b      	lsrs	r3, r3, #8
 80a20fc:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80a2100:	191b      	adds	r3, r3, r4
 80a2102:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
 80a2106:	8b6e      	ldrh	r6, [r5, #26]
 80a2108:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80a210c:	fba3 3406 	umull	r3, r4, r3, r6
 80a2110:	fb06 4402 	mla	r4, r6, r2, r4
 80a2114:	17e3      	asrs	r3, r4, #31
 80a2116:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
 80a2118:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
 80a211c:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
 80a2120:	d078      	beq.n	80a2214 <_ZN15Adafruit_BME28012readPressureEv+0x180>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a2122:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
    adc_P >>= 4;
 80a2126:	1100      	asrs	r0, r0, #4
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a2128:	fb04 f608 	mul.w	r6, r4, r8
 80a212c:	ea4f 79e4 	mov.w	r9, r4, asr #31
 80a2130:	fb07 6609 	mla	r6, r7, r9, r6
 80a2134:	fba4 4707 	umull	r4, r7, r4, r7
 80a2138:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80a213a:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
 80a213e:	fb07 fe0e 	mul.w	lr, r7, lr
 80a2142:	ea4f 78e7 	mov.w	r8, r7, asr #31
 80a2146:	fb01 ee08 	mla	lr, r1, r8, lr
 80a214a:	fba7 7101 	umull	r7, r1, r7, r1
 80a214e:	4471      	add	r1, lr
 80a2150:	0449      	lsls	r1, r1, #17
 80a2152:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
 80a2156:	047f      	lsls	r7, r7, #17
 80a2158:	193f      	adds	r7, r7, r4
 80a215a:	eb46 0601 	adc.w	r6, r6, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
 80a215e:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
    p = 1048576 - adc_P;
 80a2162:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
 80a2166:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
 80a216a:	f640 4135 	movw	r1, #3125	; 0xc35
 80a216e:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
 80a2172:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
 80a2176:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
 80a217a:	07e4      	lsls	r4, r4, #31
 80a217c:	1be4      	subs	r4, r4, r7
 80a217e:	eb60 0606 	sbc.w	r6, r0, r6
 80a2182:	fba4 0401 	umull	r0, r4, r4, r1
 80a2186:	fb01 4106 	mla	r1, r1, r6, r4
 80a218a:	f006 fd45 	bl	80a8c18 <__aeabi_ldivmod>
 80a218e:	4684      	mov	ip, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 80a2190:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
 80a2194:	134f      	asrs	r7, r1, #13
 80a2196:	fb02 f607 	mul.w	r6, r2, r7
 80a219a:	0b43      	lsrs	r3, r0, #13
 80a219c:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 80a21a0:	17d4      	asrs	r4, r2, #31
 80a21a2:	fb03 6604 	mla	r6, r3, r4, r6
 80a21a6:	fba2 2403 	umull	r2, r4, r2, r3
 80a21aa:	4434      	add	r4, r6
 80a21ac:	fb02 f607 	mul.w	r6, r2, r7
 80a21b0:	fb03 6604 	mla	r6, r3, r4, r6
 80a21b4:	fba2 2303 	umull	r2, r3, r2, r3
 80a21b8:	441e      	add	r6, r3
 80a21ba:	0e53      	lsrs	r3, r2, #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 80a21bc:	f9b5 4028 	ldrsh.w	r4, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 80a21c0:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a21c4:	181b      	adds	r3, r3, r0
 80a21c6:	eb41 6666 	adc.w	r6, r1, r6, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 80a21ca:	4361      	muls	r1, r4
 80a21cc:	17e2      	asrs	r2, r4, #31
 80a21ce:	fb02 110c 	mla	r1, r2, ip, r1
 80a21d2:	fba4 0400 	umull	r0, r4, r4, r0
 80a21d6:	4421      	add	r1, r4
 80a21d8:	0cc0      	lsrs	r0, r0, #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a21da:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 80a21de:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a21e2:	1818      	adds	r0, r3, r0
 80a21e4:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80a21e8:	eb46 41e1 	adc.w	r1, r6, r1, asr #19
 80a21ec:	0a00      	lsrs	r0, r0, #8
 80a21ee:	012d      	lsls	r5, r5, #4
 80a21f0:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 80a21f4:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
 80a21f8:	0124      	lsls	r4, r4, #4
 80a21fa:	1820      	adds	r0, r4, r0
    return (float)p/256;
 80a21fc:	eb45 2121 	adc.w	r1, r5, r1, asr #8
 80a2200:	f006 fae0 	bl	80a87c4 <__aeabi_l2f>
 80a2204:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80a2208:	f006 fb1a 	bl	80a8840 <__aeabi_fmul>
}
 80a220c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
 80a2210:	4801      	ldr	r0, [pc, #4]	; (80a2218 <_ZN15Adafruit_BME28012readPressureEv+0x184>)
 80a2212:	e7fb      	b.n	80a220c <_ZN15Adafruit_BME28012readPressureEv+0x178>
        return 0; // avoid exception caused by division by zero
 80a2214:	2000      	movs	r0, #0
 80a2216:	e7f9      	b.n	80a220c <_ZN15Adafruit_BME28012readPressureEv+0x178>
 80a2218:	7fc00000 	.word	0x7fc00000
 80a221c:	00000000 	.word	0x00000000

080a2220 <_ZN15Adafruit_BME28012readAltitudeEf>:
{
 80a2220:	b510      	push	{r4, lr}
 80a2222:	460c      	mov	r4, r1
    float atmospheric = readPressure() / 100.0F;
 80a2224:	f7ff ff36 	bl	80a2094 <_ZN15Adafruit_BME28012readPressureEv>
 80a2228:	4911      	ldr	r1, [pc, #68]	; (80a2270 <_ZN15Adafruit_BME28012readAltitudeEf+0x50>)
 80a222a:	f006 fbbd 	bl	80a89a8 <__aeabi_fdiv>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
 80a222e:	4621      	mov	r1, r4
 80a2230:	f006 fbba 	bl	80a89a8 <__aeabi_fdiv>
      return pow(__type(__x), __type(__y));
 80a2234:	f005 fe56 	bl	80a7ee4 <__aeabi_f2d>
 80a2238:	a309      	add	r3, pc, #36	; (adr r3, 80a2260 <_ZN15Adafruit_BME28012readAltitudeEf+0x40>)
 80a223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a223e:	f003 fa29 	bl	80a5694 <pow>
 80a2242:	4602      	mov	r2, r0
 80a2244:	460b      	mov	r3, r1
 80a2246:	2000      	movs	r0, #0
 80a2248:	490a      	ldr	r1, [pc, #40]	; (80a2274 <_ZN15Adafruit_BME28012readAltitudeEf+0x54>)
 80a224a:	f005 fceb 	bl	80a7c24 <__aeabi_dsub>
 80a224e:	a306      	add	r3, pc, #24	; (adr r3, 80a2268 <_ZN15Adafruit_BME28012readAltitudeEf+0x48>)
 80a2250:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2254:	f005 fe9e 	bl	80a7f94 <__aeabi_dmul>
 80a2258:	f006 f994 	bl	80a8584 <__aeabi_d2f>
}
 80a225c:	bd10      	pop	{r4, pc}
 80a225e:	bf00      	nop
 80a2260:	1a36e2eb 	.word	0x1a36e2eb
 80a2264:	3fc85bc0 	.word	0x3fc85bc0
 80a2268:	00000000 	.word	0x00000000
 80a226c:	40e5a540 	.word	0x40e5a540
 80a2270:	42c80000 	.word	0x42c80000
 80a2274:	3ff00000 	.word	0x3ff00000

080a2278 <_ZN15Adafruit_BME2804initEv>:
{
 80a2278:	b530      	push	{r4, r5, lr}
 80a227a:	4604      	mov	r4, r0
    if (_cs == -1) {
 80a227c:	f990 0010 	ldrsb.w	r0, [r0, #16]
{
 80a2280:	b085      	sub	sp, #20
    if (_cs == -1) {
 80a2282:	1c42      	adds	r2, r0, #1
 80a2284:	d119      	bne.n	80a22ba <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
 80a2286:	6820      	ldr	r0, [r4, #0]
 80a2288:	f002 ff4a 	bl	80a5120 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
 80a228c:	21d0      	movs	r1, #208	; 0xd0
 80a228e:	4620      	mov	r0, r4
 80a2290:	f7ff fcea 	bl	80a1c68 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
 80a2294:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
 80a2296:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
 80a2298:	d145      	bne.n	80a2326 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
 80a229a:	4620      	mov	r0, r4
 80a229c:	22b6      	movs	r2, #182	; 0xb6
 80a229e:	21e0      	movs	r1, #224	; 0xe0
 80a22a0:	f7ff fc46 	bl	80a1b30 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
 80a22a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a22a8:	f002 fc8e 	bl	80a4bc8 <delay>
    while (isReadingCalibration())
 80a22ac:	4620      	mov	r0, r4
 80a22ae:	f7ff fd2f 	bl	80a1d10 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
 80a22b2:	4605      	mov	r5, r0
 80a22b4:	b328      	cbz	r0, 80a2302 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
 80a22b6:	2064      	movs	r0, #100	; 0x64
 80a22b8:	e7f6      	b.n	80a22a8 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
 80a22ba:	2101      	movs	r1, #1
 80a22bc:	b280      	uxth	r0, r0
 80a22be:	f003 f890 	bl	80a53e2 <digitalWrite>
        pinMode(_cs, OUTPUT);
 80a22c2:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a22c6:	2101      	movs	r1, #1
 80a22c8:	b280      	uxth	r0, r0
 80a22ca:	f003 f879 	bl	80a53c0 <pinMode>
        if (_sck == -1) {
 80a22ce:	f994 0013 	ldrsb.w	r0, [r4, #19]
 80a22d2:	1c43      	adds	r3, r0, #1
 80a22d4:	d104      	bne.n	80a22e0 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
 80a22d6:	f7ff fbc7 	bl	80a1a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a22da:	f002 f930 	bl	80a453e <_ZN8SPIClass5beginEv>
    }
 80a22de:	e7d5      	b.n	80a228c <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
 80a22e0:	2101      	movs	r1, #1
 80a22e2:	b280      	uxth	r0, r0
 80a22e4:	f003 f86c 	bl	80a53c0 <pinMode>
            pinMode(_mosi, OUTPUT);
 80a22e8:	f994 0011 	ldrsb.w	r0, [r4, #17]
 80a22ec:	2101      	movs	r1, #1
 80a22ee:	b280      	uxth	r0, r0
 80a22f0:	f003 f866 	bl	80a53c0 <pinMode>
            pinMode(_miso, INPUT);
 80a22f4:	f994 0012 	ldrsb.w	r0, [r4, #18]
 80a22f8:	2100      	movs	r1, #0
 80a22fa:	b280      	uxth	r0, r0
 80a22fc:	f003 f860 	bl	80a53c0 <pinMode>
 80a2300:	e7c4      	b.n	80a228c <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
 80a2302:	4620      	mov	r0, r4
 80a2304:	f7ff fd74 	bl	80a1df0 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
 80a2308:	2305      	movs	r3, #5
 80a230a:	2103      	movs	r1, #3
 80a230c:	461a      	mov	r2, r3
 80a230e:	4620      	mov	r0, r4
 80a2310:	9300      	str	r3, [sp, #0]
 80a2312:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80a2316:	f7ff fc5d 	bl	80a1bd4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
 80a231a:	2064      	movs	r0, #100	; 0x64
 80a231c:	f002 fc54 	bl	80a4bc8 <delay>
    return true;
 80a2320:	2001      	movs	r0, #1
}
 80a2322:	b005      	add	sp, #20
 80a2324:	bd30      	pop	{r4, r5, pc}
        return false;
 80a2326:	2000      	movs	r0, #0
 80a2328:	e7fb      	b.n	80a2322 <_ZN15Adafruit_BME2804initEv+0xaa>

080a232a <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
 80a232a:	2377      	movs	r3, #119	; 0x77
{
 80a232c:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
 80a232e:	7103      	strb	r3, [r0, #4]
{
 80a2330:	4604      	mov	r4, r0
	_wire = &Wire;
 80a2332:	f003 f915 	bl	80a5560 <_Z19__fetch_global_Wirev>
 80a2336:	6020      	str	r0, [r4, #0]
	status = init();
 80a2338:	4620      	mov	r0, r4
 80a233a:	f7ff ff9d 	bl	80a2278 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
 80a233e:	b930      	cbnz	r0, 80a234e <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 80a2340:	2376      	movs	r3, #118	; 0x76
 		status = init();
 80a2342:	4620      	mov	r0, r4
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 80a2344:	7123      	strb	r3, [r4, #4]
}
 80a2346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
 80a234a:	f7ff bf95 	b.w	80a2278 <_ZN15Adafruit_BME2804initEv>
}
 80a234e:	bd10      	pop	{r4, pc}

080a2350 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
 80a2350:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
 80a2352:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
  _addrwidth = address_width;
  _address = reg_addr;
 80a2354:	8142      	strh	r2, [r0, #10]
  _spidevice = NULL;
 80a2356:	e9c0 1500 	strd	r1, r5, [r0]
  _byteorder = byteorder;
 80a235a:	f89d 200c 	ldrb.w	r2, [sp, #12]
  _addrwidth = address_width;
 80a235e:	f89d 1010 	ldrb.w	r1, [sp, #16]
                                                 uint8_t address_width) {
 80a2362:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
 80a2364:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
 80a2366:	7382      	strb	r2, [r0, #14]
  _width = width;
 80a2368:	7303      	strb	r3, [r0, #12]
}
 80a236a:	bd30      	pop	{r4, r5, pc}

080a236c <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 80a236c:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 80a236e:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
 80a2370:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 80a2372:	4603      	mov	r3, r0

  if (_i2cdevice) {
 80a2374:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 80a2376:	b085      	sub	sp, #20
                           (uint8_t)(_address >> 8)};
 80a2378:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 80a237a:	460e      	mov	r6, r1
 80a237c:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
 80a237e:	f88d 400c 	strb.w	r4, [sp, #12]
 80a2382:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
 80a2386:	b140      	cbz	r0, 80a239a <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 80a2388:	7b5b      	ldrb	r3, [r3, #13]
 80a238a:	9301      	str	r3, [sp, #4]
 80a238c:	ab03      	add	r3, sp, #12
 80a238e:	9300      	str	r3, [sp, #0]
 80a2390:	2301      	movs	r3, #1
 80a2392:	f000 fa39 	bl	80a2808 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
 80a2396:	b005      	add	sp, #20
 80a2398:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
 80a239a:	6858      	ldr	r0, [r3, #4]
 80a239c:	2800      	cmp	r0, #0
 80a239e:	d0fa      	beq.n	80a2396 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 80a23a0:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 80a23a4:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 80a23a8:	f1be 0f03 	cmp.w	lr, #3
 80a23ac:	d10c      	bne.n	80a23c8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 80a23ae:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
 80a23b2:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 80a23b6:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
 80a23b8:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
 80a23bc:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 80a23c0:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
 80a23c2:	f000 f990 	bl	80a26e6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
 80a23c6:	e7e6      	b.n	80a2396 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
 80a23c8:	f1be 0f00 	cmp.w	lr, #0
 80a23cc:	d109      	bne.n	80a23e2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
 80a23ce:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
 80a23d2:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
 80a23d6:	463a      	mov	r2, r7
 80a23d8:	4631      	mov	r1, r6
 80a23da:	f8cd c000 	str.w	ip, [sp]
 80a23de:	ab03      	add	r3, sp, #12
 80a23e0:	e7ef      	b.n	80a23c2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
 80a23e2:	f1be 0f02 	cmp.w	lr, #2
 80a23e6:	d102      	bne.n	80a23ee <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
 80a23e8:	f064 047f 	orn	r4, r4, #127	; 0x7f
 80a23ec:	e7f1      	b.n	80a23d2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
 80a23ee:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
 80a23f2:	bf01      	itttt	eq
 80a23f4:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80a23f8:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
 80a23fc:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 80a2400:	f88d 300c 	strbeq.w	r3, [sp, #12]
 80a2404:	e7e7      	b.n	80a23d6 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

080a2406 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
 80a2406:	b4f0      	push	{r4, r5, r6, r7}
 80a2408:	4603      	mov	r3, r0
 80a240a:	460c      	mov	r4, r1
  if (numbytes == 0) {
 80a240c:	b902      	cbnz	r2, 80a2410 <_ZN23Adafruit_BusIO_Register5writeEmh+0xa>
    numbytes = _width;
 80a240e:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
 80a2410:	2a04      	cmp	r2, #4
 80a2412:	d813      	bhi.n	80a243c <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
 80a2414:	f103 050f 	add.w	r5, r3, #15
 80a2418:	4629      	mov	r1, r5
 80a241a:	615c      	str	r4, [r3, #20]

  for (int i = 0; i < numbytes; i++) {
 80a241c:	1898      	adds	r0, r3, r2
 80a241e:	4298      	cmp	r0, r3
 80a2420:	d009      	beq.n	80a2436 <_ZN23Adafruit_BusIO_Register5writeEmh+0x30>
    if (_byteorder == LSBFIRST) {
 80a2422:	7b9f      	ldrb	r7, [r3, #14]
      _buffer[i] = value & 0xFF;
 80a2424:	b2e6      	uxtb	r6, r4
    if (_byteorder == LSBFIRST) {
 80a2426:	b927      	cbnz	r7, 80a2432 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2c>
      _buffer[i] = value & 0xFF;
 80a2428:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
 80a242a:	0a24      	lsrs	r4, r4, #8
  for (int i = 0; i < numbytes; i++) {
 80a242c:	3501      	adds	r5, #1
 80a242e:	3801      	subs	r0, #1
 80a2430:	e7f5      	b.n	80a241e <_ZN23Adafruit_BusIO_Register5writeEmh+0x18>
      _buffer[numbytes - i - 1] = value & 0xFF;
 80a2432:	7386      	strb	r6, [r0, #14]
 80a2434:	e7f9      	b.n	80a242a <_ZN23Adafruit_BusIO_Register5writeEmh+0x24>
  }
  return write(_buffer, numbytes);
}
 80a2436:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
 80a2438:	f7ff bf98 	b.w	80a236c <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
 80a243c:	2000      	movs	r0, #0
 80a243e:	bcf0      	pop	{r4, r5, r6, r7}
 80a2440:	4770      	bx	lr

080a2442 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 80a2442:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 80a2444:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
 80a2446:	7a85      	ldrb	r5, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 80a2448:	4604      	mov	r4, r0

  if (_i2cdevice) {
 80a244a:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 80a244c:	b085      	sub	sp, #20
                           (uint8_t)(_address >> 8)};
 80a244e:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 80a2450:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
 80a2452:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 80a2456:	4611      	mov	r1, r2
                           (uint8_t)(_address >> 8)};
 80a2458:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
 80a245c:	b140      	cbz	r0, 80a2470 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2e>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 80a245e:	2200      	movs	r2, #0
 80a2460:	e9cd 1200 	strd	r1, r2, [sp]
 80a2464:	a903      	add	r1, sp, #12
 80a2466:	7b62      	ldrb	r2, [r4, #13]
 80a2468:	f000 fa3c 	bl	80a28e4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
 80a246c:	b005      	add	sp, #20
 80a246e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
 80a2470:	6860      	ldr	r0, [r4, #4]
 80a2472:	2800      	cmp	r0, #0
 80a2474:	d0fa      	beq.n	80a246c <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 80a2476:	7a27      	ldrb	r7, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 80a2478:	7b62      	ldrb	r2, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 80a247a:	2f03      	cmp	r7, #3
 80a247c:	d10d      	bne.n	80a249a <_ZN23Adafruit_BusIO_Register4readEPhh+0x58>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 80a247e:	24ff      	movs	r4, #255	; 0xff
 80a2480:	e9cd 1400 	strd	r1, r4, [sp]
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
 80a2484:	f046 0601 	orr.w	r6, r6, #1
      addrbuffer[0] =
 80a2488:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
 80a248c:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 80a2490:	3201      	adds	r2, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 80a2492:	a903      	add	r1, sp, #12
 80a2494:	f000 f959 	bl	80a274a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
 80a2498:	e7e8      	b.n	80a246c <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
 80a249a:	b93f      	cbnz	r7, 80a24ac <_ZN23Adafruit_BusIO_Register4readEPhh+0x6a>
      addrbuffer[0] |= 0x80;
 80a249c:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
 80a24a0:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 80a24a4:	24ff      	movs	r4, #255	; 0xff
 80a24a6:	e9cd 1400 	strd	r1, r4, [sp]
 80a24aa:	e7f2      	b.n	80a2492 <_ZN23Adafruit_BusIO_Register4readEPhh+0x50>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
 80a24ac:	2f02      	cmp	r7, #2
 80a24ae:	d102      	bne.n	80a24b6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x74>
      addrbuffer[0] &= ~0x80;
 80a24b0:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 80a24b4:	e7f4      	b.n	80a24a0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
 80a24b6:	2f01      	cmp	r7, #1
      addrbuffer[0] |= 0x80 | 0x40;
 80a24b8:	bf02      	ittt	eq
 80a24ba:	f89d 400c 	ldrbeq.w	r4, [sp, #12]
 80a24be:	f064 043f 	orneq	r4, r4, #63	; 0x3f
 80a24c2:	f88d 400c 	strbeq.w	r4, [sp, #12]
 80a24c6:	e7ed      	b.n	80a24a4 <_ZN23Adafruit_BusIO_Register4readEPhh+0x62>

080a24c8 <_ZN23Adafruit_BusIO_Register4readEPt>:
 *    @brief  Read 2 bytes of data from the register location
 *    @param  value Pointer to uint16_t variable to read into
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint16_t *value) {
 80a24c8:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, 2)) {
 80a24ca:	2202      	movs	r2, #2
bool Adafruit_BusIO_Register::read(uint16_t *value) {
 80a24cc:	460d      	mov	r5, r1
  if (!read(_buffer, 2)) {
 80a24ce:	f100 010f 	add.w	r1, r0, #15
bool Adafruit_BusIO_Register::read(uint16_t *value) {
 80a24d2:	4604      	mov	r4, r0
  if (!read(_buffer, 2)) {
 80a24d4:	f7ff ffb5 	bl	80a2442 <_ZN23Adafruit_BusIO_Register4readEPhh>
 80a24d8:	b138      	cbz	r0, 80a24ea <_ZN23Adafruit_BusIO_Register4readEPt+0x22>
    return false;
  }

  if (_byteorder == LSBFIRST) {
 80a24da:	7ba3      	ldrb	r3, [r4, #14]
 80a24dc:	b933      	cbnz	r3, 80a24ec <_ZN23Adafruit_BusIO_Register4readEPt+0x24>
    *value = _buffer[1];
 80a24de:	7c23      	ldrb	r3, [r4, #16]
    *value <<= 8;
 80a24e0:	021b      	lsls	r3, r3, #8
 80a24e2:	802b      	strh	r3, [r5, #0]
    *value |= _buffer[0];
 80a24e4:	7be2      	ldrb	r2, [r4, #15]
  } else {
    *value = _buffer[0];
    *value <<= 8;
    *value |= _buffer[1];
 80a24e6:	4313      	orrs	r3, r2
 80a24e8:	802b      	strh	r3, [r5, #0]
  }
  return true;
}
 80a24ea:	bd38      	pop	{r3, r4, r5, pc}
    *value = _buffer[0];
 80a24ec:	7be3      	ldrb	r3, [r4, #15]
    *value <<= 8;
 80a24ee:	021b      	lsls	r3, r3, #8
 80a24f0:	802b      	strh	r3, [r5, #0]
    *value |= _buffer[1];
 80a24f2:	7c22      	ldrb	r2, [r4, #16]
 80a24f4:	e7f7      	b.n	80a24e6 <_ZN23Adafruit_BusIO_Register4readEPt+0x1e>

080a24f6 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
 80a24f6:	b510      	push	{r4, lr}
 80a24f8:	4604      	mov	r4, r0
  if (_spiSetting) {
 80a24fa:	6840      	ldr	r0, [r0, #4]
 80a24fc:	b110      	cbz	r0, 80a2504 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
 80a24fe:	6803      	ldr	r3, [r0, #0]
 80a2500:	689b      	ldr	r3, [r3, #8]
 80a2502:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
 80a2504:	4620      	mov	r0, r4
 80a2506:	bd10      	pop	{r4, pc}

080a2508 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
 80a2508:	b538      	push	{r3, r4, r5, lr}
 80a250a:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
 80a250c:	f990 000e 	ldrsb.w	r0, [r0, #14]
 80a2510:	2101      	movs	r1, #1
 80a2512:	b280      	uxth	r0, r0
 80a2514:	f002 ff54 	bl	80a53c0 <pinMode>
  digitalWrite(_cs, HIGH);
 80a2518:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80a251c:	2101      	movs	r1, #1
 80a251e:	b280      	uxth	r0, r0
 80a2520:	f002 ff5f 	bl	80a53e2 <digitalWrite>

  if (_spi) { // hardware SPI
 80a2524:	6825      	ldr	r5, [r4, #0]
 80a2526:	b135      	cbz	r5, 80a2536 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
 80a2528:	4628      	mov	r0, r5
 80a252a:	f002 f808 	bl	80a453e <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
 80a252e:	2001      	movs	r0, #1
 80a2530:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
 80a2534:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
 80a2536:	f994 000f 	ldrsb.w	r0, [r4, #15]
 80a253a:	2101      	movs	r1, #1
 80a253c:	b280      	uxth	r0, r0
 80a253e:	f002 ff3f 	bl	80a53c0 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
 80a2542:	7b63      	ldrb	r3, [r4, #13]
 80a2544:	f994 000f 	ldrsb.w	r0, [r4, #15]
 80a2548:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
 80a254a:	bf94      	ite	ls
 80a254c:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
 80a254e:	2101      	movhi	r1, #1
 80a2550:	b280      	uxth	r0, r0
 80a2552:	f002 ff46 	bl	80a53e2 <digitalWrite>
    if (_mosi != -1) {
 80a2556:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a255a:	1c42      	adds	r2, r0, #1
 80a255c:	d009      	beq.n	80a2572 <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
 80a255e:	2101      	movs	r1, #1
 80a2560:	b280      	uxth	r0, r0
 80a2562:	f002 ff2d 	bl	80a53c0 <pinMode>
      digitalWrite(_mosi, HIGH);
 80a2566:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a256a:	2101      	movs	r1, #1
 80a256c:	b280      	uxth	r0, r0
 80a256e:	f002 ff38 	bl	80a53e2 <digitalWrite>
    if (_miso != -1) {
 80a2572:	f994 0011 	ldrsb.w	r0, [r4, #17]
 80a2576:	1c43      	adds	r3, r0, #1
 80a2578:	d0d9      	beq.n	80a252e <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
 80a257a:	2100      	movs	r1, #0
 80a257c:	b280      	uxth	r0, r0
 80a257e:	f002 ff1f 	bl	80a53c0 <pinMode>
 80a2582:	e7d4      	b.n	80a252e <_ZN18Adafruit_SPIDevice5beginEv+0x26>

080a2584 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 80a2584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2588:	4604      	mov	r4, r0
  if (_spi) {
 80a258a:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 80a258c:	460d      	mov	r5, r1
 80a258e:	4613      	mov	r3, r2
 80a2590:	b085      	sub	sp, #20
  if (_spi) {
 80a2592:	b138      	cbz	r0, 80a25a4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
 80a2594:	2200      	movs	r2, #0
 80a2596:	9200      	str	r2, [sp, #0]
 80a2598:	460a      	mov	r2, r1
 80a259a:	f002 f86b 	bl	80a4674 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
 80a259e:	b005      	add	sp, #20
 80a25a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
 80a25a4:	7b22      	ldrb	r2, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 80a25a6:	68a0      	ldr	r0, [r4, #8]
    startbit = 0x80;
 80a25a8:	2a00      	cmp	r2, #0
 80a25aa:	bf0c      	ite	eq
 80a25ac:	f04f 0b01 	moveq.w	fp, #1
 80a25b0:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
 80a25b4:	780a      	ldrb	r2, [r1, #0]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 80a25b6:	4f44      	ldr	r7, [pc, #272]	; (80a26c8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x144>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
 80a25b8:	ea1b 0f02 	tst.w	fp, r2
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 80a25bc:	fbb7 f7f0 	udiv	r7, r7, r0
  bool towrite, lastmosi = !(buffer[0] & startbit);
 80a25c0:	bf0c      	ite	eq
 80a25c2:	f04f 0901 	moveq.w	r9, #1
 80a25c6:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 80a25ca:	18cb      	adds	r3, r1, r3
 80a25cc:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
 80a25ce:	9303      	str	r3, [sp, #12]
 80a25d0:	9b03      	ldr	r3, [sp, #12]
 80a25d2:	42ab      	cmp	r3, r5
 80a25d4:	d0e3      	beq.n	80a259e <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    for (uint8_t b = startbit; b != 0;
 80a25d6:	465e      	mov	r6, fp
    uint8_t reply = 0;
 80a25d8:	f04f 0800 	mov.w	r8, #0
    uint8_t send = buffer[i];
 80a25dc:	f895 a000 	ldrb.w	sl, [r5]
      if (bitdelay_us) {
 80a25e0:	b117      	cbz	r7, 80a25e8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x64>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a25e2:	4638      	mov	r0, r7
 80a25e4:	f001 fd18 	bl	80a4018 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
 80a25e8:	7b63      	ldrb	r3, [r4, #13]
 80a25ea:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80a25ee:	d141      	bne.n	80a2674 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf0>
        if ((_mosi != -1) && (lastmosi != towrite)) {
 80a25f0:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80a25f4:	1c5a      	adds	r2, r3, #1
 80a25f6:	d00f      	beq.n	80a2618 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        towrite = send & b;
 80a25f8:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
 80a25fc:	bf14      	ite	ne
 80a25fe:	2301      	movne	r3, #1
 80a2600:	2300      	moveq	r3, #0
 80a2602:	454b      	cmp	r3, r9
 80a2604:	d008      	beq.n	80a2618 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
            *mosiPort |= mosiPinMask;
 80a2606:	6963      	ldr	r3, [r4, #20]
 80a2608:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a260a:	681a      	ldr	r2, [r3, #0]
          if (towrite)
 80a260c:	2900      	cmp	r1, #0
 80a260e:	d02c      	beq.n	80a266a <_ZN18Adafruit_SPIDevice8transferEPhj+0xe6>
            *mosiPort |= mosiPinMask;
 80a2610:	f04f 0901 	mov.w	r9, #1
 80a2614:	4302      	orrs	r2, r0
 80a2616:	601a      	str	r2, [r3, #0]
        *clkPort |= clkPinMask; // Clock high
 80a2618:	69a1      	ldr	r1, [r4, #24]
 80a261a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a261c:	680a      	ldr	r2, [r1, #0]
 80a261e:	4313      	orrs	r3, r2
 80a2620:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 80a2622:	b117      	cbz	r7, 80a262a <_ZN18Adafruit_SPIDevice8transferEPhj+0xa6>
 80a2624:	4638      	mov	r0, r7
 80a2626:	f001 fcf7 	bl	80a4018 <HAL_Delay_Microseconds>
        if (_miso != -1) {
 80a262a:	f994 3011 	ldrsb.w	r3, [r4, #17]
 80a262e:	3301      	adds	r3, #1
 80a2630:	d006      	beq.n	80a2640 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbc>
          if (*misoPort & misoPinMask) {
 80a2632:	69e3      	ldr	r3, [r4, #28]
 80a2634:	681a      	ldr	r2, [r3, #0]
 80a2636:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a2638:	421a      	tst	r2, r3
            reply |= b;
 80a263a:	bf18      	it	ne
 80a263c:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
 80a2640:	69a1      	ldr	r1, [r4, #24]
 80a2642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a2644:	680a      	ldr	r2, [r1, #0]
 80a2646:	ea22 0303 	bic.w	r3, r2, r3
 80a264a:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
 80a264c:	f994 3011 	ldrsb.w	r3, [r4, #17]
 80a2650:	3301      	adds	r3, #1
        buffer[i] = reply;
 80a2652:	bf18      	it	ne
 80a2654:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
 80a2658:	7b23      	ldrb	r3, [r4, #12]
 80a265a:	2b00      	cmp	r3, #0
 80a265c:	d132      	bne.n	80a26c4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x140>
 80a265e:	0076      	lsls	r6, r6, #1
 80a2660:	b2f6      	uxtb	r6, r6
 80a2662:	2e00      	cmp	r6, #0
 80a2664:	d1bc      	bne.n	80a25e0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5c>
  for (size_t i = 0; i < len; i++) {
 80a2666:	3501      	adds	r5, #1
 80a2668:	e7b2      	b.n	80a25d0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4c>
            *mosiPort &= ~mosiPinMask;
 80a266a:	ea22 0200 	bic.w	r2, r2, r0
 80a266e:	4689      	mov	r9, r1
 80a2670:	601a      	str	r2, [r3, #0]
 80a2672:	e7d1      	b.n	80a2618 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        *clkPort |= clkPinMask; // Clock high
 80a2674:	69a1      	ldr	r1, [r4, #24]
 80a2676:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a2678:	680a      	ldr	r2, [r1, #0]
 80a267a:	4313      	orrs	r3, r2
 80a267c:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 80a267e:	b117      	cbz	r7, 80a2686 <_ZN18Adafruit_SPIDevice8transferEPhj+0x102>
 80a2680:	4638      	mov	r0, r7
 80a2682:	f001 fcc9 	bl	80a4018 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
 80a2686:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80a268a:	3301      	adds	r3, #1
 80a268c:	d008      	beq.n	80a26a0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11c>
            *mosiPort |= mosiPinMask;
 80a268e:	6963      	ldr	r3, [r4, #20]
 80a2690:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a2692:	681a      	ldr	r2, [r3, #0]
          if (send & b)
 80a2694:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
 80a2698:	bf14      	ite	ne
 80a269a:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
 80a269c:	438a      	biceq	r2, r1
 80a269e:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
 80a26a0:	69a1      	ldr	r1, [r4, #24]
 80a26a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a26a4:	680a      	ldr	r2, [r1, #0]
 80a26a6:	ea22 0303 	bic.w	r3, r2, r3
 80a26aa:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
 80a26ac:	f994 3011 	ldrsb.w	r3, [r4, #17]
 80a26b0:	3301      	adds	r3, #1
 80a26b2:	d0cb      	beq.n	80a264c <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
          if (*misoPort & misoPinMask) {
 80a26b4:	69e3      	ldr	r3, [r4, #28]
 80a26b6:	681a      	ldr	r2, [r3, #0]
 80a26b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a26ba:	421a      	tst	r2, r3
            reply |= b;
 80a26bc:	bf18      	it	ne
 80a26be:	ea46 0808 	orrne.w	r8, r6, r8
 80a26c2:	e7c3      	b.n	80a264c <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
    for (uint8_t b = startbit; b != 0;
 80a26c4:	0876      	lsrs	r6, r6, #1
 80a26c6:	e7cc      	b.n	80a2662 <_ZN18Adafruit_SPIDevice8transferEPhj+0xde>
 80a26c8:	0007a120 	.word	0x0007a120

080a26cc <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
 80a26cc:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
 80a26ce:	2201      	movs	r2, #1
  uint8_t data = send;
 80a26d0:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
 80a26d4:	f10d 0107 	add.w	r1, sp, #7
 80a26d8:	f7ff ff54 	bl	80a2584 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
 80a26dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a26e0:	b003      	add	sp, #12
 80a26e2:	f85d fb04 	ldr.w	pc, [sp], #4

080a26e6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
 80a26e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a26ea:	4604      	mov	r4, r0
  if (_spi) {
 80a26ec:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
 80a26ee:	460e      	mov	r6, r1
 80a26f0:	4617      	mov	r7, r2
 80a26f2:	461d      	mov	r5, r3
  if (_spi) {
 80a26f4:	b110      	cbz	r0, 80a26fc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
 80a26f6:	6861      	ldr	r1, [r4, #4]
 80a26f8:	f001 ff4a 	bl	80a4590 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 80a26fc:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80a2700:	2100      	movs	r1, #0
 80a2702:	b280      	uxth	r0, r0
 80a2704:	f002 fe6d 	bl	80a53e2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
 80a2708:	9b06      	ldr	r3, [sp, #24]
 80a270a:	eb05 0803 	add.w	r8, r5, r3
 80a270e:	4545      	cmp	r5, r8
 80a2710:	d108      	bne.n	80a2724 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
 80a2712:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
 80a2714:	42b7      	cmp	r7, r6
 80a2716:	d00b      	beq.n	80a2730 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
 80a2718:	4620      	mov	r0, r4
 80a271a:	f816 1b01 	ldrb.w	r1, [r6], #1
 80a271e:	f7ff ffd5 	bl	80a26cc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
 80a2722:	e7f7      	b.n	80a2714 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
 80a2724:	4620      	mov	r0, r4
 80a2726:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a272a:	f7ff ffcf 	bl	80a26cc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
 80a272e:	e7ee      	b.n	80a270e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
 80a2730:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80a2734:	2101      	movs	r1, #1
 80a2736:	b280      	uxth	r0, r0
 80a2738:	f002 fe53 	bl	80a53e2 <digitalWrite>

  if (_spi) {
 80a273c:	6820      	ldr	r0, [r4, #0]
 80a273e:	b108      	cbz	r0, 80a2744 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
 80a2740:	f001 ff0c 	bl	80a455c <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 80a2744:	2001      	movs	r0, #1
 80a2746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a274a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
 80a274a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a274e:	4604      	mov	r4, r0
  if (_spi) {
 80a2750:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
 80a2752:	460e      	mov	r6, r1
 80a2754:	4617      	mov	r7, r2
 80a2756:	461d      	mov	r5, r3
 80a2758:	f89d 801c 	ldrb.w	r8, [sp, #28]
  if (_spi) {
 80a275c:	b110      	cbz	r0, 80a2764 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
 80a275e:	6861      	ldr	r1, [r4, #4]
 80a2760:	f001 ff16 	bl	80a4590 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 80a2764:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80a2768:	2100      	movs	r1, #0
 80a276a:	b280      	uxth	r0, r0
 80a276c:	f002 fe39 	bl	80a53e2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
 80a2770:	4437      	add	r7, r6
 80a2772:	42be      	cmp	r6, r7
 80a2774:	d10a      	bne.n	80a278c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
 80a2776:	9b06      	ldr	r3, [sp, #24]
 80a2778:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
 80a277a:	42ae      	cmp	r6, r5
 80a277c:	d00c      	beq.n	80a2798 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
 80a277e:	4641      	mov	r1, r8
 80a2780:	4620      	mov	r0, r4
 80a2782:	f7ff ffa3 	bl	80a26cc <_ZN18Adafruit_SPIDevice8transferEh>
 80a2786:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
 80a278a:	e7f6      	b.n	80a277a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
 80a278c:	4620      	mov	r0, r4
 80a278e:	f816 1b01 	ldrb.w	r1, [r6], #1
 80a2792:	f7ff ff9b 	bl	80a26cc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
 80a2796:	e7ec      	b.n	80a2772 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
 80a2798:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80a279c:	2101      	movs	r1, #1
 80a279e:	b280      	uxth	r0, r0
 80a27a0:	f002 fe1f 	bl	80a53e2 <digitalWrite>

  if (_spi) {
 80a27a4:	6820      	ldr	r0, [r4, #0]
 80a27a6:	b108      	cbz	r0, 80a27ac <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
 80a27a8:	f001 fed8 	bl	80a455c <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
 80a27ac:	2001      	movs	r0, #1
 80a27ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a27b2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 80a27b2:	6042      	str	r2, [r0, #4]
  _begun = false;
 80a27b4:	2200      	movs	r2, #0
 80a27b6:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
 80a27b8:	2220      	movs	r2, #32
  _addr = addr;
 80a27ba:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 80a27bc:	60c2      	str	r2, [r0, #12]
#endif
}
 80a27be:	4770      	bx	lr

080a27c0 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 80a27c0:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 80a27c2:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 80a27c4:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 80a27c6:	b153      	cbz	r3, 80a27de <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 80a27c8:	7821      	ldrb	r1, [r4, #0]
 80a27ca:	6860      	ldr	r0, [r4, #4]
 80a27cc:	f002 fcda 	bl	80a5184 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 80a27d0:	6860      	ldr	r0, [r4, #4]
 80a27d2:	f002 fcdf 	bl	80a5194 <_ZN7TwoWire15endTransmissionEv>
 80a27d6:	fab0 f080 	clz	r0, r0
 80a27da:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 80a27dc:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 80a27de:	2101      	movs	r1, #1
 80a27e0:	f000 f803 	bl	80a27ea <_ZN18Adafruit_I2CDevice5beginEb>
 80a27e4:	2800      	cmp	r0, #0
 80a27e6:	d1ef      	bne.n	80a27c8 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 80a27e8:	e7f8      	b.n	80a27dc <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

080a27ea <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80a27ea:	b538      	push	{r3, r4, r5, lr}
 80a27ec:	4604      	mov	r4, r0
  _wire->begin();
 80a27ee:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80a27f0:	460d      	mov	r5, r1
  _wire->begin();
 80a27f2:	f002 fc95 	bl	80a5120 <_ZN7TwoWire5beginEv>
  _begun = true;
 80a27f6:	2001      	movs	r0, #1
 80a27f8:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 80a27fa:	b125      	cbz	r5, 80a2806 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 80a27fc:	4620      	mov	r0, r4
}
 80a27fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 80a2802:	f7ff bfdd 	b.w	80a27c0 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 80a2806:	bd38      	pop	{r3, r4, r5, pc}

080a2808 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 80a2808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a280c:	461f      	mov	r7, r3
 80a280e:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 80a2812:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 80a2814:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 80a2816:	4432      	add	r2, r6
 80a2818:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 80a281a:	4604      	mov	r4, r0
 80a281c:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 80a281e:	d902      	bls.n	80a2826 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 80a2820:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
 80a2822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 80a2826:	7801      	ldrb	r1, [r0, #0]
 80a2828:	6840      	ldr	r0, [r0, #4]
 80a282a:	f002 fcab 	bl	80a5184 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a282e:	b97e      	cbnz	r6, 80a2850 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 80a2830:	6860      	ldr	r0, [r4, #4]
 80a2832:	462a      	mov	r2, r5
 80a2834:	6803      	ldr	r3, [r0, #0]
 80a2836:	4641      	mov	r1, r8
 80a2838:	68db      	ldr	r3, [r3, #12]
 80a283a:	4798      	blx	r3
 80a283c:	4285      	cmp	r5, r0
 80a283e:	d1ef      	bne.n	80a2820 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 80a2840:	4639      	mov	r1, r7
 80a2842:	6860      	ldr	r0, [r4, #4]
 80a2844:	f002 fca2 	bl	80a518c <_ZN7TwoWire15endTransmissionEh>
 80a2848:	fab0 f080 	clz	r0, r0
 80a284c:	0940      	lsrs	r0, r0, #5
 80a284e:	e7e8      	b.n	80a2822 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a2850:	f1b9 0f00 	cmp.w	r9, #0
 80a2854:	d0ec      	beq.n	80a2830 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 80a2856:	6860      	ldr	r0, [r4, #4]
 80a2858:	4632      	mov	r2, r6
 80a285a:	6803      	ldr	r3, [r0, #0]
 80a285c:	4649      	mov	r1, r9
 80a285e:	68db      	ldr	r3, [r3, #12]
 80a2860:	4798      	blx	r3
 80a2862:	4286      	cmp	r6, r0
 80a2864:	d1dc      	bne.n	80a2820 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 80a2866:	e7e3      	b.n	80a2830 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

080a2868 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
 80a2868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a286c:	4615      	mov	r5, r2
 80a286e:	4604      	mov	r4, r0
 80a2870:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 80a2872:	b2d2      	uxtb	r2, r2
 80a2874:	7801      	ldrb	r1, [r0, #0]
 80a2876:	6840      	ldr	r0, [r0, #4]
 80a2878:	f002 fc6f 	bl	80a515a <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 80a287c:	4285      	cmp	r5, r0
 80a287e:	d10d      	bne.n	80a289c <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
 80a2880:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 80a2882:	fa1f f887 	uxth.w	r8, r7
 80a2886:	45a8      	cmp	r8, r5
 80a2888:	f107 0701 	add.w	r7, r7, #1
 80a288c:	d209      	bcs.n	80a28a2 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
 80a288e:	6860      	ldr	r0, [r4, #4]
 80a2890:	6803      	ldr	r3, [r0, #0]
 80a2892:	695b      	ldr	r3, [r3, #20]
 80a2894:	4798      	blx	r3
 80a2896:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 80a289a:	e7f2      	b.n	80a2882 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
 80a289c:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 80a289e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a28a2:	2001      	movs	r0, #1
 80a28a4:	e7fb      	b.n	80a289e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

080a28a6 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 80a28a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a28aa:	4607      	mov	r7, r0
 80a28ac:	4688      	mov	r8, r1
 80a28ae:	4616      	mov	r6, r2
 80a28b0:	4699      	mov	r9, r3
  size_t pos = 0;
 80a28b2:	2500      	movs	r5, #0
  while (pos < len) {
 80a28b4:	42b5      	cmp	r5, r6
 80a28b6:	d212      	bcs.n	80a28de <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
 80a28b8:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
 80a28ba:	1b74      	subs	r4, r6, r5
 80a28bc:	4294      	cmp	r4, r2
 80a28be:	bf28      	it	cs
 80a28c0:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
 80a28c2:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
 80a28c4:	42ab      	cmp	r3, r5
 80a28c6:	bf94      	ite	ls
 80a28c8:	464b      	movls	r3, r9
 80a28ca:	2300      	movhi	r3, #0
 80a28cc:	4622      	mov	r2, r4
 80a28ce:	4638      	mov	r0, r7
 80a28d0:	eb08 0105 	add.w	r1, r8, r5
 80a28d4:	f7ff ffc8 	bl	80a2868 <_ZN18Adafruit_I2CDevice5_readEPhjb>
 80a28d8:	b110      	cbz	r0, 80a28e0 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
 80a28da:	4425      	add	r5, r4
  while (pos < len) {
 80a28dc:	e7ea      	b.n	80a28b4 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
 80a28de:	2001      	movs	r0, #1
}
 80a28e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a28e4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
 80a28e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a28e6:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
 80a28e8:	2300      	movs	r3, #0
 80a28ea:	e9cd 3300 	strd	r3, r3, [sp]
 80a28ee:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
 80a28f2:	4604      	mov	r4, r0
 80a28f4:	9e06      	ldr	r6, [sp, #24]
  if (!write(write_buffer, write_len, stop)) {
 80a28f6:	f7ff ff87 	bl	80a2808 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 80a28fa:	b140      	cbz	r0, 80a290e <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
 80a28fc:	2301      	movs	r3, #1
 80a28fe:	4632      	mov	r2, r6
 80a2900:	4629      	mov	r1, r5
 80a2902:	4620      	mov	r0, r4
}
 80a2904:	b002      	add	sp, #8
 80a2906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
 80a290a:	f7ff bfcc 	b.w	80a28a6 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
 80a290e:	b002      	add	sp, #8
 80a2910:	bd70      	pop	{r4, r5, r6, pc}

080a2912 <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
 80a2912:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 80a2914:	6840      	ldr	r0, [r0, #4]
 80a2916:	f002 fbff 	bl	80a5118 <_ZN7TwoWire8setSpeedEm>
  return true;
#else
  (void)desiredclk;
  return false;
#endif
}
 80a291a:	2001      	movs	r0, #1
 80a291c:	bd08      	pop	{r3, pc}

080a291e <_ZN15Adafruit_INA219C1Eh>:

/*!
 *  @brief  Instantiates a new INA219 class
 *  @param addr the I2C address the device can be found on. Default is 0x40
 */
Adafruit_INA219::Adafruit_INA219(uint8_t addr) {
 80a291e:	2200      	movs	r2, #0
 80a2920:	6002      	str	r2, [r0, #0]
  ina219_i2caddr = addr;
  ina219_currentDivider_mA = 0;
 80a2922:	60c2      	str	r2, [r0, #12]
  ina219_powerMultiplier_mW = 0.0f;
 80a2924:	2200      	movs	r2, #0
  ina219_i2caddr = addr;
 80a2926:	7141      	strb	r1, [r0, #5]
  ina219_powerMultiplier_mW = 0.0f;
 80a2928:	6102      	str	r2, [r0, #16]
}
 80a292a:	4770      	bx	lr

080a292c <_ZN15Adafruit_INA21917getBusVoltage_rawEv>:
 */
int16_t Adafruit_INA219::getBusVoltage_raw() {
  uint16_t value;

  Adafruit_BusIO_Register bus_voltage_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
 80a292c:	2301      	movs	r3, #1
int16_t Adafruit_INA219::getBusVoltage_raw() {
 80a292e:	b510      	push	{r4, lr}
 80a2930:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
 80a2932:	e9cd 3300 	strd	r3, r3, [sp]
 80a2936:	2302      	movs	r3, #2
int16_t Adafruit_INA219::getBusVoltage_raw() {
 80a2938:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
 80a293a:	461a      	mov	r2, r3
 80a293c:	6801      	ldr	r1, [r0, #0]
 80a293e:	a804      	add	r0, sp, #16
 80a2940:	f7ff fd06 	bl	80a2350 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = bus_voltage_reg.read(&value);
 80a2944:	f10d 010e 	add.w	r1, sp, #14
 80a2948:	a804      	add	r0, sp, #16
 80a294a:	f7ff fdbd 	bl	80a24c8 <_ZN23Adafruit_BusIO_Register4readEPt>
 80a294e:	7120      	strb	r0, [r4, #4]

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
 80a2950:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80a2954:	08c0      	lsrs	r0, r0, #3
}
 80a2956:	0080      	lsls	r0, r0, #2
 80a2958:	b00a      	add	sp, #40	; 0x28
 80a295a:	bd10      	pop	{r4, pc}

080a295c <_ZN15Adafruit_INA21919getShuntVoltage_rawEv>:
 *  @return the raw shunt voltage reading
 */
int16_t Adafruit_INA219::getShuntVoltage_raw() {
  uint16_t value;
  Adafruit_BusIO_Register shunt_voltage_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
 80a295c:	2201      	movs	r2, #1
int16_t Adafruit_INA219::getShuntVoltage_raw() {
 80a295e:	b510      	push	{r4, lr}
 80a2960:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
 80a2962:	e9cd 2200 	strd	r2, r2, [sp]
int16_t Adafruit_INA219::getShuntVoltage_raw() {
 80a2966:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
 80a2968:	2302      	movs	r3, #2
 80a296a:	6801      	ldr	r1, [r0, #0]
 80a296c:	a804      	add	r0, sp, #16
 80a296e:	f7ff fcef 	bl	80a2350 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = shunt_voltage_reg.read(&value);
 80a2972:	f10d 010e 	add.w	r1, sp, #14
 80a2976:	a804      	add	r0, sp, #16
 80a2978:	f7ff fda6 	bl	80a24c8 <_ZN23Adafruit_BusIO_Register4readEPt>
 80a297c:	7120      	strb	r0, [r4, #4]
  return value;
}
 80a297e:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 80a2982:	b00a      	add	sp, #40	; 0x28
 80a2984:	bd10      	pop	{r4, pc}

080a2986 <_ZN15Adafruit_INA21914getCurrent_rawEv>:

/*!
 *  @brief  Gets the raw current value (16-bit signed integer, so +-32767)
 *  @return the raw current reading
 */
int16_t Adafruit_INA219::getCurrent_raw() {
 80a2986:	b530      	push	{r4, r5, lr}
  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
 80a2988:	2501      	movs	r5, #1
int16_t Adafruit_INA219::getCurrent_raw() {
 80a298a:	4604      	mov	r4, r0
 80a298c:	b091      	sub	sp, #68	; 0x44
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
 80a298e:	e9cd 5500 	strd	r5, r5, [sp]
 80a2992:	2302      	movs	r3, #2
 80a2994:	6801      	ldr	r1, [r0, #0]
 80a2996:	2205      	movs	r2, #5
 80a2998:	a804      	add	r0, sp, #16
 80a299a:	f7ff fcd9 	bl	80a2350 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
 80a299e:	68a1      	ldr	r1, [r4, #8]
 80a29a0:	2202      	movs	r2, #2
 80a29a2:	a804      	add	r0, sp, #16
 80a29a4:	f7ff fd2f 	bl	80a2406 <_ZN23Adafruit_BusIO_Register5writeEmh>

  // Now we can safely read the CURRENT register!
  Adafruit_BusIO_Register current_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CURRENT, 2, MSBFIRST);
 80a29a8:	2302      	movs	r3, #2
 80a29aa:	2204      	movs	r2, #4
 80a29ac:	6821      	ldr	r1, [r4, #0]
 80a29ae:	e9cd 5500 	strd	r5, r5, [sp]
 80a29b2:	a80a      	add	r0, sp, #40	; 0x28
 80a29b4:	f7ff fccc 	bl	80a2350 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = current_reg.read(&value);
 80a29b8:	f10d 010e 	add.w	r1, sp, #14
 80a29bc:	a80a      	add	r0, sp, #40	; 0x28
 80a29be:	f7ff fd83 	bl	80a24c8 <_ZN23Adafruit_BusIO_Register4readEPt>
 80a29c2:	7120      	strb	r0, [r4, #4]
  return value;
}
 80a29c4:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 80a29c8:	b011      	add	sp, #68	; 0x44
 80a29ca:	bd30      	pop	{r4, r5, pc}

080a29cc <_ZN15Adafruit_INA21912getPower_rawEv>:

/*!
 *  @brief  Gets the raw power value (16-bit signed integer, so +-32767)
 *  @return raw power reading
 */
int16_t Adafruit_INA219::getPower_raw() {
 80a29cc:	b530      	push	{r4, r5, lr}
  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
 80a29ce:	2501      	movs	r5, #1
int16_t Adafruit_INA219::getPower_raw() {
 80a29d0:	4604      	mov	r4, r0
 80a29d2:	b091      	sub	sp, #68	; 0x44
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
 80a29d4:	e9cd 5500 	strd	r5, r5, [sp]
 80a29d8:	2302      	movs	r3, #2
 80a29da:	6801      	ldr	r1, [r0, #0]
 80a29dc:	2205      	movs	r2, #5
 80a29de:	a804      	add	r0, sp, #16
 80a29e0:	f7ff fcb6 	bl	80a2350 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
 80a29e4:	68a1      	ldr	r1, [r4, #8]
 80a29e6:	2202      	movs	r2, #2
 80a29e8:	a804      	add	r0, sp, #16
 80a29ea:	f7ff fd0c 	bl	80a2406 <_ZN23Adafruit_BusIO_Register5writeEmh>

  // Now we can safely read the POWER register!
  Adafruit_BusIO_Register power_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_POWER, 2, MSBFIRST);
 80a29ee:	2302      	movs	r3, #2
 80a29f0:	2203      	movs	r2, #3
 80a29f2:	6821      	ldr	r1, [r4, #0]
 80a29f4:	e9cd 5500 	strd	r5, r5, [sp]
 80a29f8:	a80a      	add	r0, sp, #40	; 0x28
 80a29fa:	f7ff fca9 	bl	80a2350 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = power_reg.read(&value);
 80a29fe:	f10d 010e 	add.w	r1, sp, #14
 80a2a02:	a80a      	add	r0, sp, #40	; 0x28
 80a2a04:	f7ff fd60 	bl	80a24c8 <_ZN23Adafruit_BusIO_Register4readEPt>
 80a2a08:	7120      	strb	r0, [r4, #4]
  return value;
}
 80a2a0a:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 80a2a0e:	b011      	add	sp, #68	; 0x44
 80a2a10:	bd30      	pop	{r4, r5, pc}
 80a2a12:	0000      	movs	r0, r0
 80a2a14:	0000      	movs	r0, r0
	...

080a2a18 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv>:

/*!
 *  @brief  Gets the shunt voltage in mV (so +-327mV)
 *  @return the shunt voltage converted to millivolts
 */
float Adafruit_INA219::getShuntVoltage_mV() {
 80a2a18:	b508      	push	{r3, lr}
  int16_t value;
  value = getShuntVoltage_raw();
 80a2a1a:	f7ff ff9f 	bl	80a295c <_ZN15Adafruit_INA21919getShuntVoltage_rawEv>
  return value * 0.01;
 80a2a1e:	f005 fa4f 	bl	80a7ec0 <__aeabi_i2d>
 80a2a22:	a305      	add	r3, pc, #20	; (adr r3, 80a2a38 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv+0x20>)
 80a2a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2a28:	f005 fab4 	bl	80a7f94 <__aeabi_dmul>
 80a2a2c:	f005 fdaa 	bl	80a8584 <__aeabi_d2f>
}
 80a2a30:	bd08      	pop	{r3, pc}
 80a2a32:	bf00      	nop
 80a2a34:	f3af 8000 	nop.w
 80a2a38:	47ae147b 	.word	0x47ae147b
 80a2a3c:	3f847ae1 	.word	0x3f847ae1

080a2a40 <_ZN15Adafruit_INA21915getBusVoltage_VEv>:

/*!
 *  @brief  Gets the bus voltage in volts
 *  @return the bus voltage converted to volts
 */
float Adafruit_INA219::getBusVoltage_V() {
 80a2a40:	b508      	push	{r3, lr}
  int16_t value = getBusVoltage_raw();
 80a2a42:	f7ff ff73 	bl	80a292c <_ZN15Adafruit_INA21917getBusVoltage_rawEv>
  return value * 0.001;
 80a2a46:	f005 fa3b 	bl	80a7ec0 <__aeabi_i2d>
 80a2a4a:	a305      	add	r3, pc, #20	; (adr r3, 80a2a60 <_ZN15Adafruit_INA21915getBusVoltage_VEv+0x20>)
 80a2a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2a50:	f005 faa0 	bl	80a7f94 <__aeabi_dmul>
 80a2a54:	f005 fd96 	bl	80a8584 <__aeabi_d2f>
}
 80a2a58:	bd08      	pop	{r3, pc}
 80a2a5a:	bf00      	nop
 80a2a5c:	f3af 8000 	nop.w
 80a2a60:	d2f1a9fc 	.word	0xd2f1a9fc
 80a2a64:	3f50624d 	.word	0x3f50624d

080a2a68 <_ZN15Adafruit_INA21913getCurrent_mAEv>:
/*!
 *  @brief  Gets the current value in mA, taking into account the
 *          config settings and current LSB
 *  @return the current reading convereted to milliamps
 */
float Adafruit_INA219::getCurrent_mA() {
 80a2a68:	b538      	push	{r3, r4, r5, lr}
 80a2a6a:	4605      	mov	r5, r0
  float valueDec = getCurrent_raw();
 80a2a6c:	f7ff ff8b 	bl	80a2986 <_ZN15Adafruit_INA21914getCurrent_rawEv>
 80a2a70:	f005 fe92 	bl	80a8798 <__aeabi_i2f>
 80a2a74:	4604      	mov	r4, r0
  valueDec /= ina219_currentDivider_mA;
 80a2a76:	68e8      	ldr	r0, [r5, #12]
 80a2a78:	f005 fe8a 	bl	80a8790 <__aeabi_ui2f>
 80a2a7c:	4601      	mov	r1, r0
 80a2a7e:	4620      	mov	r0, r4
 80a2a80:	f005 ff92 	bl	80a89a8 <__aeabi_fdiv>
  return valueDec;
}
 80a2a84:	bd38      	pop	{r3, r4, r5, pc}

080a2a86 <_ZN15Adafruit_INA21911getPower_mWEv>:
/*!
 *  @brief  Gets the power value in mW, taking into account the
 *          config settings and current LSB
 *  @return power reading converted to milliwatts
 */
float Adafruit_INA219::getPower_mW() {
 80a2a86:	b510      	push	{r4, lr}
 80a2a88:	4604      	mov	r4, r0
  float valueDec = getPower_raw();
 80a2a8a:	f7ff ff9f 	bl	80a29cc <_ZN15Adafruit_INA21912getPower_rawEv>
 80a2a8e:	f005 fe83 	bl	80a8798 <__aeabi_i2f>
  valueDec *= ina219_powerMultiplier_mW;
 80a2a92:	6921      	ldr	r1, [r4, #16]
 80a2a94:	f005 fed4 	bl	80a8840 <__aeabi_fmul>
  return valueDec;
}
 80a2a98:	bd10      	pop	{r4, pc}

080a2a9a <_ZN15Adafruit_INA21924setCalibration_16V_400mAEv>:
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 0.4 * 16V
  // MaximumPower = 6.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
 80a2a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80a2a9e:	2314      	movs	r3, #20
void Adafruit_INA219::setCalibration_16V_400mA() {
 80a2aa0:	b530      	push	{r4, r5, lr}
  ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
 80a2aa2:	e9c0 2302 	strd	r2, r3, [r0, #8]
  ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit

  // Set Calibration register to 'Cal' calculated above
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
 80a2aa6:	2501      	movs	r5, #1
  ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit
 80a2aa8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
void Adafruit_INA219::setCalibration_16V_400mA() {
 80a2aac:	4604      	mov	r4, r0
 80a2aae:	b08f      	sub	sp, #60	; 0x3c
  ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit
 80a2ab0:	6103      	str	r3, [r0, #16]
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
 80a2ab2:	e9cd 5500 	strd	r5, r5, [sp]
 80a2ab6:	2302      	movs	r3, #2
 80a2ab8:	6801      	ldr	r1, [r0, #0]
 80a2aba:	2205      	movs	r2, #5
 80a2abc:	a802      	add	r0, sp, #8
 80a2abe:	f7ff fc47 	bl	80a2350 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
 80a2ac2:	68a1      	ldr	r1, [r4, #8]
 80a2ac4:	2202      	movs	r2, #2
 80a2ac6:	a802      	add	r0, sp, #8
 80a2ac8:	f7ff fc9d 	bl	80a2406 <_ZN23Adafruit_BusIO_Register5writeEmh>
                    INA219_CONFIG_GAIN_1_40MV | INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

  Adafruit_BusIO_Register config_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CONFIG, 2, MSBFIRST);
 80a2acc:	2302      	movs	r3, #2
 80a2ace:	6821      	ldr	r1, [r4, #0]
 80a2ad0:	2200      	movs	r2, #0
 80a2ad2:	e9cd 5500 	strd	r5, r5, [sp]
 80a2ad6:	a808      	add	r0, sp, #32
 80a2ad8:	f7ff fc3a 	bl	80a2350 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = config_reg.write(config, 2);
 80a2adc:	2202      	movs	r2, #2
 80a2ade:	f240 119f 	movw	r1, #415	; 0x19f
 80a2ae2:	a808      	add	r0, sp, #32
 80a2ae4:	f7ff fc8f 	bl	80a2406 <_ZN23Adafruit_BusIO_Register5writeEmh>
 80a2ae8:	7120      	strb	r0, [r4, #4]
}
 80a2aea:	b00f      	add	sp, #60	; 0x3c
 80a2aec:	bd30      	pop	{r4, r5, pc}

080a2aee <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80a2aee:	4770      	bx	lr

080a2af0 <_ZN15Adafruit_BNO055D1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
 80a2af0:	4770      	bx	lr
	...

080a2af4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 *          Sensor description
 */
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
 80a2af4:	b538      	push	{r3, r4, r5, lr}
 80a2af6:	460c      	mov	r4, r1
 80a2af8:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 80a2afa:	2220      	movs	r2, #32
 80a2afc:	2100      	movs	r1, #0
 80a2afe:	f104 0008 	add.w	r0, r4, #8
 80a2b02:	f006 fa71 	bl	80a8fe8 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
 80a2b06:	220b      	movs	r2, #11
 80a2b08:	4620      	mov	r0, r4
 80a2b0a:	4906      	ldr	r1, [pc, #24]	; (80a2b24 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x30>)
 80a2b0c:	f006 fab2 	bl	80a9074 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 80a2b10:	2301      	movs	r3, #1
 80a2b12:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 80a2b14:	68eb      	ldr	r3, [r5, #12]
 80a2b16:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_ORIENTATION;
 80a2b18:	2303      	movs	r3, #3
 80a2b1a:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->max_value = 0.0F;
  sensor->min_value = 0.0F;
  sensor->resolution = 0.01F;
 80a2b1c:	4b02      	ldr	r3, [pc, #8]	; (80a2b28 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x34>)
 80a2b1e:	6223      	str	r3, [r4, #32]
}
 80a2b20:	bd38      	pop	{r3, r4, r5, pc}
 80a2b22:	bf00      	nop
 80a2b24:	080a9801 	.word	0x080a9801
 80a2b28:	3c23d70a 	.word	0x3c23d70a

080a2b2c <_ZN15Adafruit_BNO055D0Ev>:
 80a2b2c:	b510      	push	{r4, lr}
 80a2b2e:	4604      	mov	r4, r0
 80a2b30:	2114      	movs	r1, #20
 80a2b32:	f7fd fab6 	bl	80a00a2 <_ZdlPvj>
 80a2b36:	4620      	mov	r0, r4
 80a2b38:	bd10      	pop	{r4, pc}
	...

080a2b3c <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
 80a2b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2b3e:	461f      	mov	r7, r3
                                 TwoWire *theWire) {
 80a2b40:	4b09      	ldr	r3, [pc, #36]	; (80a2b68 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x2c>)
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
 80a2b42:	4604      	mov	r4, r0
                                 TwoWire *theWire) {
 80a2b44:	6003      	str	r3, [r0, #0]
 80a2b46:	2300      	movs	r3, #0
  _sensorID = sensorID;
 80a2b48:	e9c0 3102 	strd	r3, r1, [r0, #8]
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
 80a2b4c:	2010      	movs	r0, #16
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
 80a2b4e:	4616      	mov	r6, r2
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
 80a2b50:	f7fd faa3 	bl	80a009a <_Znwj>
 80a2b54:	4605      	mov	r5, r0
 80a2b56:	b118      	cbz	r0, 80a2b60 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x24>
 80a2b58:	463a      	mov	r2, r7
 80a2b5a:	4631      	mov	r1, r6
 80a2b5c:	f7ff fe29 	bl	80a27b2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
}
 80a2b60:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
 80a2b62:	60a5      	str	r5, [r4, #8]
}
 80a2b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2b66:	bf00      	nop
 80a2b68:	080a9954 	.word	0x080a9954

080a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value) {
 80a2b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
  return i2c_dev->write(buffer, 2);
 80a2b6e:	2300      	movs	r3, #0
 80a2b70:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
 80a2b74:	f88d 100c 	strb.w	r1, [sp, #12]
 80a2b78:	f88d 200d 	strb.w	r2, [sp, #13]
  return i2c_dev->write(buffer, 2);
 80a2b7c:	2301      	movs	r3, #1
 80a2b7e:	2202      	movs	r2, #2
 80a2b80:	a903      	add	r1, sp, #12
 80a2b82:	6880      	ldr	r0, [r0, #8]
 80a2b84:	f7ff fe40 	bl	80a2808 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 80a2b88:	b005      	add	sp, #20
 80a2b8a:	f85d fb04 	ldr.w	pc, [sp], #4

080a2b8e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
 80a2b8e:	b508      	push	{r3, lr}
 80a2b90:	460a      	mov	r2, r1
  _mode = mode;
 80a2b92:	7401      	strb	r1, [r0, #16]
  write8(BNO055_OPR_MODE_ADDR, _mode);
 80a2b94:	213d      	movs	r1, #61	; 0x3d
 80a2b96:	f7ff ffe9 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
}
 80a2b9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(30);
 80a2b9e:	201e      	movs	r0, #30
 80a2ba0:	f002 b812 	b.w	80a4bc8 <delay>

080a2ba4 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>:
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
 80a2ba4:	b570      	push	{r4, r5, r6, lr}
 80a2ba6:	4604      	mov	r4, r0
 80a2ba8:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
 80a2baa:	2100      	movs	r1, #0
  adafruit_bno055_opmode_t modeback = _mode;
 80a2bac:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
 80a2bae:	f7ff ffee 	bl	80a2b8e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
 80a2bb2:	2019      	movs	r0, #25
 80a2bb4:	f002 f808 	bl	80a4bc8 <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
 80a2bb8:	2200      	movs	r2, #0
 80a2bba:	2107      	movs	r1, #7
 80a2bbc:	4620      	mov	r0, r4
 80a2bbe:	f7ff ffd5 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (usextal) {
 80a2bc2:	b185      	cbz	r5, 80a2be6 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x42>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x80);
 80a2bc4:	2280      	movs	r2, #128	; 0x80
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
 80a2bc6:	213f      	movs	r1, #63	; 0x3f
 80a2bc8:	4620      	mov	r0, r4
 80a2bca:	f7ff ffcf 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
 80a2bce:	200a      	movs	r0, #10
 80a2bd0:	f001 fffa 	bl	80a4bc8 <delay>
  setMode(modeback);
 80a2bd4:	4620      	mov	r0, r4
 80a2bd6:	4631      	mov	r1, r6
 80a2bd8:	f7ff ffd9 	bl	80a2b8e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
 80a2bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(20);
 80a2be0:	2014      	movs	r0, #20
 80a2be2:	f001 bff1 	b.w	80a4bc8 <delay>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
 80a2be6:	462a      	mov	r2, r5
 80a2be8:	e7ed      	b.n	80a2bc6 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x22>

080a2bea <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>:
    const adafruit_bno055_offsets_t &offsets_type) {
 80a2bea:	b570      	push	{r4, r5, r6, lr}
 80a2bec:	4604      	mov	r4, r0
 80a2bee:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
 80a2bf0:	2100      	movs	r1, #0
  adafruit_bno055_opmode_t lastMode = _mode;
 80a2bf2:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
 80a2bf4:	f7ff ffcb 	bl	80a2b8e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
 80a2bf8:	2019      	movs	r0, #25
 80a2bfa:	f001 ffe5 	bl	80a4bc8 <delay>
  write8(ACCEL_OFFSET_X_LSB_ADDR, (offsets_type.accel_offset_x) & 0x0FF);
 80a2bfe:	782a      	ldrb	r2, [r5, #0]
 80a2c00:	2155      	movs	r1, #85	; 0x55
 80a2c02:	4620      	mov	r0, r4
 80a2c04:	f7ff ffb2 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_X_MSB_ADDR, (offsets_type.accel_offset_x >> 8) & 0x0FF);
 80a2c08:	882a      	ldrh	r2, [r5, #0]
 80a2c0a:	2156      	movs	r1, #86	; 0x56
 80a2c0c:	4620      	mov	r0, r4
 80a2c0e:	0a12      	lsrs	r2, r2, #8
 80a2c10:	f7ff ffac 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_LSB_ADDR, (offsets_type.accel_offset_y) & 0x0FF);
 80a2c14:	78aa      	ldrb	r2, [r5, #2]
 80a2c16:	2157      	movs	r1, #87	; 0x57
 80a2c18:	4620      	mov	r0, r4
 80a2c1a:	f7ff ffa7 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_MSB_ADDR, (offsets_type.accel_offset_y >> 8) & 0x0FF);
 80a2c1e:	886a      	ldrh	r2, [r5, #2]
 80a2c20:	2158      	movs	r1, #88	; 0x58
 80a2c22:	4620      	mov	r0, r4
 80a2c24:	0a12      	lsrs	r2, r2, #8
 80a2c26:	f7ff ffa1 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_LSB_ADDR, (offsets_type.accel_offset_z) & 0x0FF);
 80a2c2a:	792a      	ldrb	r2, [r5, #4]
 80a2c2c:	2159      	movs	r1, #89	; 0x59
 80a2c2e:	4620      	mov	r0, r4
 80a2c30:	f7ff ff9c 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_MSB_ADDR, (offsets_type.accel_offset_z >> 8) & 0x0FF);
 80a2c34:	88aa      	ldrh	r2, [r5, #4]
 80a2c36:	215a      	movs	r1, #90	; 0x5a
 80a2c38:	4620      	mov	r0, r4
 80a2c3a:	0a12      	lsrs	r2, r2, #8
 80a2c3c:	f7ff ff96 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_LSB_ADDR, (offsets_type.mag_offset_x) & 0x0FF);
 80a2c40:	79aa      	ldrb	r2, [r5, #6]
 80a2c42:	215b      	movs	r1, #91	; 0x5b
 80a2c44:	4620      	mov	r0, r4
 80a2c46:	f7ff ff91 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_MSB_ADDR, (offsets_type.mag_offset_x >> 8) & 0x0FF);
 80a2c4a:	88ea      	ldrh	r2, [r5, #6]
 80a2c4c:	215c      	movs	r1, #92	; 0x5c
 80a2c4e:	4620      	mov	r0, r4
 80a2c50:	0a12      	lsrs	r2, r2, #8
 80a2c52:	f7ff ff8b 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_LSB_ADDR, (offsets_type.mag_offset_y) & 0x0FF);
 80a2c56:	7a2a      	ldrb	r2, [r5, #8]
 80a2c58:	215d      	movs	r1, #93	; 0x5d
 80a2c5a:	4620      	mov	r0, r4
 80a2c5c:	f7ff ff86 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_MSB_ADDR, (offsets_type.mag_offset_y >> 8) & 0x0FF);
 80a2c60:	892a      	ldrh	r2, [r5, #8]
 80a2c62:	215e      	movs	r1, #94	; 0x5e
 80a2c64:	4620      	mov	r0, r4
 80a2c66:	0a12      	lsrs	r2, r2, #8
 80a2c68:	f7ff ff80 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_LSB_ADDR, (offsets_type.mag_offset_z) & 0x0FF);
 80a2c6c:	7aaa      	ldrb	r2, [r5, #10]
 80a2c6e:	215f      	movs	r1, #95	; 0x5f
 80a2c70:	4620      	mov	r0, r4
 80a2c72:	f7ff ff7b 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_MSB_ADDR, (offsets_type.mag_offset_z >> 8) & 0x0FF);
 80a2c76:	896a      	ldrh	r2, [r5, #10]
 80a2c78:	2160      	movs	r1, #96	; 0x60
 80a2c7a:	4620      	mov	r0, r4
 80a2c7c:	0a12      	lsrs	r2, r2, #8
 80a2c7e:	f7ff ff75 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_LSB_ADDR, (offsets_type.gyro_offset_x) & 0x0FF);
 80a2c82:	7b2a      	ldrb	r2, [r5, #12]
 80a2c84:	2161      	movs	r1, #97	; 0x61
 80a2c86:	4620      	mov	r0, r4
 80a2c88:	f7ff ff70 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_MSB_ADDR, (offsets_type.gyro_offset_x >> 8) & 0x0FF);
 80a2c8c:	89aa      	ldrh	r2, [r5, #12]
 80a2c8e:	2162      	movs	r1, #98	; 0x62
 80a2c90:	4620      	mov	r0, r4
 80a2c92:	0a12      	lsrs	r2, r2, #8
 80a2c94:	f7ff ff6a 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_LSB_ADDR, (offsets_type.gyro_offset_y) & 0x0FF);
 80a2c98:	7baa      	ldrb	r2, [r5, #14]
 80a2c9a:	2163      	movs	r1, #99	; 0x63
 80a2c9c:	4620      	mov	r0, r4
 80a2c9e:	f7ff ff65 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_MSB_ADDR, (offsets_type.gyro_offset_y >> 8) & 0x0FF);
 80a2ca2:	89ea      	ldrh	r2, [r5, #14]
 80a2ca4:	2164      	movs	r1, #100	; 0x64
 80a2ca6:	4620      	mov	r0, r4
 80a2ca8:	0a12      	lsrs	r2, r2, #8
 80a2caa:	f7ff ff5f 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_LSB_ADDR, (offsets_type.gyro_offset_z) & 0x0FF);
 80a2cae:	7c2a      	ldrb	r2, [r5, #16]
 80a2cb0:	2165      	movs	r1, #101	; 0x65
 80a2cb2:	4620      	mov	r0, r4
 80a2cb4:	f7ff ff5a 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_MSB_ADDR, (offsets_type.gyro_offset_z >> 8) & 0x0FF);
 80a2cb8:	8a2a      	ldrh	r2, [r5, #16]
 80a2cba:	2166      	movs	r1, #102	; 0x66
 80a2cbc:	4620      	mov	r0, r4
 80a2cbe:	0a12      	lsrs	r2, r2, #8
 80a2cc0:	f7ff ff54 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_LSB_ADDR, (offsets_type.accel_radius) & 0x0FF);
 80a2cc4:	7caa      	ldrb	r2, [r5, #18]
 80a2cc6:	2167      	movs	r1, #103	; 0x67
 80a2cc8:	4620      	mov	r0, r4
 80a2cca:	f7ff ff4f 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_MSB_ADDR, (offsets_type.accel_radius >> 8) & 0x0FF);
 80a2cce:	8a6a      	ldrh	r2, [r5, #18]
 80a2cd0:	2168      	movs	r1, #104	; 0x68
 80a2cd2:	4620      	mov	r0, r4
 80a2cd4:	0a12      	lsrs	r2, r2, #8
 80a2cd6:	f7ff ff49 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_LSB_ADDR, (offsets_type.mag_radius) & 0x0FF);
 80a2cda:	7d2a      	ldrb	r2, [r5, #20]
 80a2cdc:	2169      	movs	r1, #105	; 0x69
 80a2cde:	4620      	mov	r0, r4
 80a2ce0:	f7ff ff44 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_MSB_ADDR, (offsets_type.mag_radius >> 8) & 0x0FF);
 80a2ce4:	8aaa      	ldrh	r2, [r5, #20]
 80a2ce6:	216a      	movs	r1, #106	; 0x6a
 80a2ce8:	4620      	mov	r0, r4
 80a2cea:	0a12      	lsrs	r2, r2, #8
 80a2cec:	f7ff ff3e 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  setMode(lastMode);
 80a2cf0:	4631      	mov	r1, r6
 80a2cf2:	4620      	mov	r0, r4
}
 80a2cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setMode(lastMode);
 80a2cf8:	f7ff bf49 	b.w	80a2b8e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

080a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
 80a2cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[1] = {reg};
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
 80a2cfe:	2201      	movs	r2, #1
 80a2d00:	2300      	movs	r3, #0
 80a2d02:	e9cd 2300 	strd	r2, r3, [sp]
 80a2d06:	ab03      	add	r3, sp, #12
  uint8_t buffer[1] = {reg};
 80a2d08:	f88d 100c 	strb.w	r1, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
 80a2d0c:	6880      	ldr	r0, [r0, #8]
 80a2d0e:	4619      	mov	r1, r3
 80a2d10:	f7ff fde8 	bl	80a28e4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
  return (byte)buffer[0];
}
 80a2d14:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80a2d18:	b005      	add	sp, #20
 80a2d1a:	f85d fb04 	ldr.w	pc, [sp], #4

080a2d1e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
 80a2d1e:	b570      	push	{r4, r5, r6, lr}
 80a2d20:	4604      	mov	r4, r0
 80a2d22:	460e      	mov	r6, r1
  if (!i2c_dev->begin()) {
 80a2d24:	6880      	ldr	r0, [r0, #8]
 80a2d26:	2101      	movs	r1, #1
 80a2d28:	f7ff fd5f 	bl	80a27ea <_ZN18Adafruit_I2CDevice5beginEb>
 80a2d2c:	4605      	mov	r5, r0
 80a2d2e:	b910      	cbnz	r0, 80a2d36 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x18>
    return false;
 80a2d30:	2500      	movs	r5, #0
}
 80a2d32:	4628      	mov	r0, r5
 80a2d34:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
 80a2d36:	2100      	movs	r1, #0
 80a2d38:	4620      	mov	r0, r4
 80a2d3a:	f7ff ffdf 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (id != BNO055_ID) {
 80a2d3e:	28a0      	cmp	r0, #160	; 0xa0
 80a2d40:	d113      	bne.n	80a2d6a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4c>
  setMode(OPERATION_MODE_CONFIG);
 80a2d42:	2100      	movs	r1, #0
 80a2d44:	4620      	mov	r0, r4
 80a2d46:	f7ff ff22 	bl	80a2b8e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
 80a2d4a:	2220      	movs	r2, #32
 80a2d4c:	213f      	movs	r1, #63	; 0x3f
 80a2d4e:	4620      	mov	r0, r4
 80a2d50:	f7ff ff0c 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
 80a2d54:	201e      	movs	r0, #30
    delay(10);
 80a2d56:	f001 ff37 	bl	80a4bc8 <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
 80a2d5a:	2100      	movs	r1, #0
 80a2d5c:	4620      	mov	r0, r4
 80a2d5e:	f7ff ffcd 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2d62:	28a0      	cmp	r0, #160	; 0xa0
 80a2d64:	d00c      	beq.n	80a2d80 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x62>
    delay(10);
 80a2d66:	200a      	movs	r0, #10
 80a2d68:	e7f5      	b.n	80a2d56 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x38>
    delay(1000); // hold on for boot
 80a2d6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a2d6e:	f001 ff2b 	bl	80a4bc8 <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
 80a2d72:	2100      	movs	r1, #0
 80a2d74:	4620      	mov	r0, r4
 80a2d76:	f7ff ffc1 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if (id != BNO055_ID) {
 80a2d7a:	28a0      	cmp	r0, #160	; 0xa0
 80a2d7c:	d1d8      	bne.n	80a2d30 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x12>
 80a2d7e:	e7e0      	b.n	80a2d42 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x24>
  delay(50);
 80a2d80:	2032      	movs	r0, #50	; 0x32
 80a2d82:	f001 ff21 	bl	80a4bc8 <delay>
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
 80a2d86:	2200      	movs	r2, #0
 80a2d88:	213e      	movs	r1, #62	; 0x3e
 80a2d8a:	4620      	mov	r0, r4
 80a2d8c:	f7ff feee 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
 80a2d90:	200a      	movs	r0, #10
 80a2d92:	f001 ff19 	bl	80a4bc8 <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
 80a2d96:	2200      	movs	r2, #0
 80a2d98:	2107      	movs	r1, #7
 80a2d9a:	4620      	mov	r0, r4
 80a2d9c:	f7ff fee6 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
 80a2da0:	2200      	movs	r2, #0
 80a2da2:	213f      	movs	r1, #63	; 0x3f
 80a2da4:	4620      	mov	r0, r4
 80a2da6:	f7ff fee1 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
 80a2daa:	200a      	movs	r0, #10
 80a2dac:	f001 ff0c 	bl	80a4bc8 <delay>
  setMode(mode);
 80a2db0:	4620      	mov	r0, r4
 80a2db2:	4631      	mov	r1, r6
 80a2db4:	f7ff feeb 	bl	80a2b8e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
 80a2db8:	2014      	movs	r0, #20
 80a2dba:	f001 ff05 	bl	80a4bc8 <delay>
  return true;
 80a2dbe:	e7b8      	b.n	80a2d32 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x14>

080a2dc0 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>:
                                      uint8_t *system_error) {
 80a2dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2dc2:	460f      	mov	r7, r1
 80a2dc4:	4616      	mov	r6, r2
  write8(BNO055_PAGE_ID_ADDR, 0);
 80a2dc6:	2107      	movs	r1, #7
 80a2dc8:	2200      	movs	r2, #0
                                      uint8_t *system_error) {
 80a2dca:	4604      	mov	r4, r0
 80a2dcc:	461d      	mov	r5, r3
  write8(BNO055_PAGE_ID_ADDR, 0);
 80a2dce:	f7ff fecd 	bl	80a2b6c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (system_status != 0)
 80a2dd2:	b127      	cbz	r7, 80a2dde <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x1e>
    *system_status = read8(BNO055_SYS_STAT_ADDR);
 80a2dd4:	2139      	movs	r1, #57	; 0x39
 80a2dd6:	4620      	mov	r0, r4
 80a2dd8:	f7ff ff90 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2ddc:	7038      	strb	r0, [r7, #0]
  if (self_test_result != 0)
 80a2dde:	b126      	cbz	r6, 80a2dea <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x2a>
    *self_test_result = read8(BNO055_SELFTEST_RESULT_ADDR);
 80a2de0:	2136      	movs	r1, #54	; 0x36
 80a2de2:	4620      	mov	r0, r4
 80a2de4:	f7ff ff8a 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2de8:	7030      	strb	r0, [r6, #0]
  if (system_error != 0)
 80a2dea:	b125      	cbz	r5, 80a2df6 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x36>
    *system_error = read8(BNO055_SYS_ERR_ADDR);
 80a2dec:	213a      	movs	r1, #58	; 0x3a
 80a2dee:	4620      	mov	r0, r4
 80a2df0:	f7ff ff84 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2df4:	7028      	strb	r0, [r5, #0]
  delay(200);
 80a2df6:	20c8      	movs	r0, #200	; 0xc8
}
 80a2df8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(200);
 80a2dfc:	f001 bee4 	b.w	80a4bc8 <delay>

080a2e00 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>:
                                     uint8_t *accel, uint8_t *mag) {
 80a2e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2e02:	460e      	mov	r6, r1
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
 80a2e04:	2135      	movs	r1, #53	; 0x35
                                     uint8_t *accel, uint8_t *mag) {
 80a2e06:	4615      	mov	r5, r2
 80a2e08:	461c      	mov	r4, r3
 80a2e0a:	9f06      	ldr	r7, [sp, #24]
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
 80a2e0c:	f7ff ff76 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (sys != NULL) {
 80a2e10:	b10e      	cbz	r6, 80a2e16 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x16>
    *sys = (calData >> 6) & 0x03;
 80a2e12:	0983      	lsrs	r3, r0, #6
 80a2e14:	7033      	strb	r3, [r6, #0]
  if (gyro != NULL) {
 80a2e16:	b115      	cbz	r5, 80a2e1e <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x1e>
    *gyro = (calData >> 4) & 0x03;
 80a2e18:	f3c0 1301 	ubfx	r3, r0, #4, #2
 80a2e1c:	702b      	strb	r3, [r5, #0]
  if (accel != NULL) {
 80a2e1e:	b114      	cbz	r4, 80a2e26 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x26>
    *accel = (calData >> 2) & 0x03;
 80a2e20:	f3c0 0381 	ubfx	r3, r0, #2, #2
 80a2e24:	7023      	strb	r3, [r4, #0]
  if (mag != NULL) {
 80a2e26:	b117      	cbz	r7, 80a2e2e <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x2e>
    *mag = calData & 0x03;
 80a2e28:	f000 0003 	and.w	r0, r0, #3
 80a2e2c:	7038      	strb	r0, [r7, #0]
}
 80a2e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2e30 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>:
bool Adafruit_BNO055::isFullyCalibrated() {
 80a2e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a2e32:	4604      	mov	r4, r0
  getCalibration(&system, &gyro, &accel, &mag);
 80a2e34:	f10d 030f 	add.w	r3, sp, #15
 80a2e38:	9300      	str	r3, [sp, #0]
 80a2e3a:	f10d 020d 	add.w	r2, sp, #13
 80a2e3e:	f10d 030e 	add.w	r3, sp, #14
 80a2e42:	a903      	add	r1, sp, #12
 80a2e44:	f7ff ffdc 	bl	80a2e00 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
  switch (_mode) {
 80a2e48:	7c23      	ldrb	r3, [r4, #16]
 80a2e4a:	3b01      	subs	r3, #1
 80a2e4c:	2b09      	cmp	r3, #9
 80a2e4e:	d817      	bhi.n	80a2e80 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x50>
 80a2e50:	e8df f003 	tbb	[pc, r3]
 80a2e54:	1e102205 	.word	0x1e102205
 80a2e58:	0c16130c 	.word	0x0c16130c
 80a2e5c:	101e      	.short	0x101e
    return (accel == 3);
 80a2e5e:	f89d 000e 	ldrb.w	r0, [sp, #14]
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
 80a2e62:	1ec3      	subs	r3, r0, #3
 80a2e64:	4258      	negs	r0, r3
 80a2e66:	4158      	adcs	r0, r3
}
 80a2e68:	b004      	add	sp, #16
 80a2e6a:	bd10      	pop	{r4, pc}
    return (accel == 3 && gyro == 3);
 80a2e6c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    return (mag == 3 && gyro == 3);
 80a2e70:	2b03      	cmp	r3, #3
 80a2e72:	d114      	bne.n	80a2e9e <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
 80a2e74:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80a2e78:	e7f3      	b.n	80a2e62 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
 80a2e7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80a2e7e:	e7f7      	b.n	80a2e70 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x40>
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
 80a2e80:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80a2e84:	2b03      	cmp	r3, #3
 80a2e86:	d10a      	bne.n	80a2e9e <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
 80a2e88:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80a2e8c:	2b03      	cmp	r3, #3
 80a2e8e:	d106      	bne.n	80a2e9e <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
 80a2e90:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80a2e94:	2b03      	cmp	r3, #3
 80a2e96:	d102      	bne.n	80a2e9e <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
 80a2e98:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a2e9c:	e7e1      	b.n	80a2e62 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
    return (accel == 3 && mag == 3);
 80a2e9e:	2000      	movs	r0, #0
 80a2ea0:	e7e2      	b.n	80a2e68 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x38>

080a2ea2 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>:
    adafruit_bno055_offsets_t &offsets_type) {
 80a2ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2ea6:	4604      	mov	r4, r0
 80a2ea8:	460d      	mov	r5, r1
  if (isFullyCalibrated()) {
 80a2eaa:	f7ff ffc1 	bl	80a2e30 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
 80a2eae:	4606      	mov	r6, r0
 80a2eb0:	2800      	cmp	r0, #0
 80a2eb2:	f000 8091 	beq.w	80a2fd8 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t+0x136>
    setMode(OPERATION_MODE_CONFIG);
 80a2eb6:	2100      	movs	r1, #0
 80a2eb8:	4620      	mov	r0, r4
    adafruit_bno055_opmode_t lastMode = _mode;
 80a2eba:	f894 8010 	ldrb.w	r8, [r4, #16]
    setMode(OPERATION_MODE_CONFIG);
 80a2ebe:	f7ff fe66 	bl	80a2b8e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
    delay(25);
 80a2ec2:	2019      	movs	r0, #25
 80a2ec4:	f001 fe80 	bl	80a4bc8 <delay>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
 80a2ec8:	2156      	movs	r1, #86	; 0x56
 80a2eca:	4620      	mov	r0, r4
 80a2ecc:	f7ff ff16 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
 80a2ed0:	2155      	movs	r1, #85	; 0x55
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
 80a2ed2:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
 80a2ed4:	4620      	mov	r0, r4
 80a2ed6:	f7ff ff11 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
 80a2eda:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
 80a2ede:	2158      	movs	r1, #88	; 0x58
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
 80a2ee0:	8028      	strh	r0, [r5, #0]
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
 80a2ee2:	4620      	mov	r0, r4
 80a2ee4:	f7ff ff0a 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
 80a2ee8:	2157      	movs	r1, #87	; 0x57
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
 80a2eea:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
 80a2eec:	4620      	mov	r0, r4
 80a2eee:	f7ff ff05 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
 80a2ef2:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
 80a2ef6:	215a      	movs	r1, #90	; 0x5a
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
 80a2ef8:	8068      	strh	r0, [r5, #2]
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
 80a2efa:	4620      	mov	r0, r4
 80a2efc:	f7ff fefe 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
 80a2f00:	2159      	movs	r1, #89	; 0x59
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
 80a2f02:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
 80a2f04:	4620      	mov	r0, r4
 80a2f06:	f7ff fef9 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
 80a2f0a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
        (read8(MAG_OFFSET_X_MSB_ADDR) << 8) | (read8(MAG_OFFSET_X_LSB_ADDR));
 80a2f0e:	215c      	movs	r1, #92	; 0x5c
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
 80a2f10:	80a8      	strh	r0, [r5, #4]
        (read8(MAG_OFFSET_X_MSB_ADDR) << 8) | (read8(MAG_OFFSET_X_LSB_ADDR));
 80a2f12:	4620      	mov	r0, r4
 80a2f14:	f7ff fef2 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2f18:	215b      	movs	r1, #91	; 0x5b
 80a2f1a:	4607      	mov	r7, r0
 80a2f1c:	4620      	mov	r0, r4
 80a2f1e:	f7ff feed 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2f22:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
        (read8(MAG_OFFSET_Y_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Y_LSB_ADDR));
 80a2f26:	215e      	movs	r1, #94	; 0x5e
    offsets_type.mag_offset_x =
 80a2f28:	80e8      	strh	r0, [r5, #6]
        (read8(MAG_OFFSET_Y_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Y_LSB_ADDR));
 80a2f2a:	4620      	mov	r0, r4
 80a2f2c:	f7ff fee6 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2f30:	215d      	movs	r1, #93	; 0x5d
 80a2f32:	4607      	mov	r7, r0
 80a2f34:	4620      	mov	r0, r4
 80a2f36:	f7ff fee1 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2f3a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
        (read8(MAG_OFFSET_Z_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Z_LSB_ADDR));
 80a2f3e:	2160      	movs	r1, #96	; 0x60
    offsets_type.mag_offset_y =
 80a2f40:	8128      	strh	r0, [r5, #8]
        (read8(MAG_OFFSET_Z_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Z_LSB_ADDR));
 80a2f42:	4620      	mov	r0, r4
 80a2f44:	f7ff feda 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2f48:	215f      	movs	r1, #95	; 0x5f
 80a2f4a:	4607      	mov	r7, r0
 80a2f4c:	4620      	mov	r0, r4
 80a2f4e:	f7ff fed5 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2f52:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
        (read8(GYRO_OFFSET_X_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_X_LSB_ADDR));
 80a2f56:	2162      	movs	r1, #98	; 0x62
    offsets_type.mag_offset_z =
 80a2f58:	8168      	strh	r0, [r5, #10]
        (read8(GYRO_OFFSET_X_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_X_LSB_ADDR));
 80a2f5a:	4620      	mov	r0, r4
 80a2f5c:	f7ff fece 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2f60:	2161      	movs	r1, #97	; 0x61
 80a2f62:	4607      	mov	r7, r0
 80a2f64:	4620      	mov	r0, r4
 80a2f66:	f7ff fec9 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2f6a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
        (read8(GYRO_OFFSET_Y_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Y_LSB_ADDR));
 80a2f6e:	2164      	movs	r1, #100	; 0x64
    offsets_type.gyro_offset_x =
 80a2f70:	81a8      	strh	r0, [r5, #12]
        (read8(GYRO_OFFSET_Y_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Y_LSB_ADDR));
 80a2f72:	4620      	mov	r0, r4
 80a2f74:	f7ff fec2 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2f78:	2163      	movs	r1, #99	; 0x63
 80a2f7a:	4607      	mov	r7, r0
 80a2f7c:	4620      	mov	r0, r4
 80a2f7e:	f7ff febd 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2f82:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
        (read8(GYRO_OFFSET_Z_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Z_LSB_ADDR));
 80a2f86:	2166      	movs	r1, #102	; 0x66
    offsets_type.gyro_offset_y =
 80a2f88:	81e8      	strh	r0, [r5, #14]
        (read8(GYRO_OFFSET_Z_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Z_LSB_ADDR));
 80a2f8a:	4620      	mov	r0, r4
 80a2f8c:	f7ff feb6 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2f90:	2165      	movs	r1, #101	; 0x65
 80a2f92:	4607      	mov	r7, r0
 80a2f94:	4620      	mov	r0, r4
 80a2f96:	f7ff feb1 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2f9a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
        (read8(ACCEL_RADIUS_MSB_ADDR) << 8) | (read8(ACCEL_RADIUS_LSB_ADDR));
 80a2f9e:	2168      	movs	r1, #104	; 0x68
    offsets_type.gyro_offset_z =
 80a2fa0:	8228      	strh	r0, [r5, #16]
        (read8(ACCEL_RADIUS_MSB_ADDR) << 8) | (read8(ACCEL_RADIUS_LSB_ADDR));
 80a2fa2:	4620      	mov	r0, r4
 80a2fa4:	f7ff feaa 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2fa8:	2167      	movs	r1, #103	; 0x67
 80a2faa:	4607      	mov	r7, r0
 80a2fac:	4620      	mov	r0, r4
 80a2fae:	f7ff fea5 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2fb2:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
        (read8(MAG_RADIUS_MSB_ADDR) << 8) | (read8(MAG_RADIUS_LSB_ADDR));
 80a2fb6:	216a      	movs	r1, #106	; 0x6a
    offsets_type.accel_radius =
 80a2fb8:	8268      	strh	r0, [r5, #18]
        (read8(MAG_RADIUS_MSB_ADDR) << 8) | (read8(MAG_RADIUS_LSB_ADDR));
 80a2fba:	4620      	mov	r0, r4
 80a2fbc:	f7ff fe9e 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2fc0:	2169      	movs	r1, #105	; 0x69
 80a2fc2:	4607      	mov	r7, r0
 80a2fc4:	4620      	mov	r0, r4
 80a2fc6:	f7ff fe99 	bl	80a2cfc <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a2fca:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_radius =
 80a2fce:	82a8      	strh	r0, [r5, #20]
    setMode(lastMode);
 80a2fd0:	4641      	mov	r1, r8
 80a2fd2:	4620      	mov	r0, r4
 80a2fd4:	f7ff fddb 	bl	80a2b8e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
 80a2fd8:	4630      	mov	r0, r6
 80a2fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2fde <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte *buffer,
                              uint8_t len) {
 80a2fde:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t reg_buf[1] = {(uint8_t)reg};
 80a2fe0:	f88d 100c 	strb.w	r1, [sp, #12]
  return i2c_dev->write_then_read(reg_buf, 1, buffer, len);
 80a2fe4:	2100      	movs	r1, #0
 80a2fe6:	e9cd 3100 	strd	r3, r1, [sp]
 80a2fea:	4613      	mov	r3, r2
 80a2fec:	a903      	add	r1, sp, #12
 80a2fee:	2201      	movs	r2, #1
 80a2ff0:	6880      	ldr	r0, [r0, #8]
 80a2ff2:	f7ff fc77 	bl	80a28e4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
}
 80a2ff6:	b005      	add	sp, #20
 80a2ff8:	f85d fb04 	ldr.w	pc, [sp], #4

080a2ffc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
 80a2ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a2ffe:	460e      	mov	r6, r1
 80a3000:	4615      	mov	r5, r2

namespace imu {

template <uint8_t N> class Vector {
public:
  Vector() { memset(p_vec, 0, sizeof(double) * N); }
 80a3002:	2100      	movs	r1, #0
 80a3004:	2218      	movs	r2, #24
 80a3006:	4604      	mov	r4, r0
 80a3008:	f005 ffee 	bl	80a8fe8 <memset>
  memset(buffer, 0, 6);
 80a300c:	2300      	movs	r3, #0
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 80a300e:	4630      	mov	r0, r6
  memset(buffer, 0, 6);
 80a3010:	9300      	str	r3, [sp, #0]
 80a3012:	f8ad 3004 	strh.w	r3, [sp, #4]
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 80a3016:	466a      	mov	r2, sp
 80a3018:	2306      	movs	r3, #6
 80a301a:	4629      	mov	r1, r5
 80a301c:	f7ff ffdf 	bl	80a2fde <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  switch (vector_type) {
 80a3020:	2d1a      	cmp	r5, #26
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 80a3022:	f9bd 0000 	ldrsh.w	r0, [sp]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 80a3026:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 80a302a:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
  switch (vector_type) {
 80a302e:	d00d      	beq.n	80a304c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x50>
 80a3030:	d808      	bhi.n	80a3044 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x48>
 80a3032:	2d0e      	cmp	r5, #14
 80a3034:	d00a      	beq.n	80a304c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x50>
 80a3036:	2d14      	cmp	r5, #20
 80a3038:	d008      	beq.n	80a304c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x50>
 80a303a:	2d08      	cmp	r5, #8
 80a303c:	d021      	beq.n	80a3082 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x86>
}
 80a303e:	4620      	mov	r0, r4
 80a3040:	b003      	add	sp, #12
 80a3042:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (vector_type) {
 80a3044:	2d28      	cmp	r5, #40	; 0x28
 80a3046:	d01c      	beq.n	80a3082 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x86>
 80a3048:	2d2e      	cmp	r5, #46	; 0x2e
 80a304a:	e7f7      	b.n	80a303c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x40>
    xyz[0] = ((double)x) / 16.0;
 80a304c:	f004 ff38 	bl	80a7ec0 <__aeabi_i2d>
 80a3050:	2200      	movs	r2, #0
 80a3052:	4b18      	ldr	r3, [pc, #96]	; (80a30b4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xb8>)
 80a3054:	f004 ff9e 	bl	80a7f94 <__aeabi_dmul>
 80a3058:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 16.0;
 80a305c:	4638      	mov	r0, r7
 80a305e:	f004 ff2f 	bl	80a7ec0 <__aeabi_i2d>
 80a3062:	2200      	movs	r2, #0
 80a3064:	4b13      	ldr	r3, [pc, #76]	; (80a30b4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xb8>)
 80a3066:	f004 ff95 	bl	80a7f94 <__aeabi_dmul>
 80a306a:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 16.0;
 80a306e:	4630      	mov	r0, r6
 80a3070:	f004 ff26 	bl	80a7ec0 <__aeabi_i2d>
 80a3074:	2200      	movs	r2, #0
 80a3076:	4b0f      	ldr	r3, [pc, #60]	; (80a30b4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xb8>)
 80a3078:	f004 ff8c 	bl	80a7f94 <__aeabi_dmul>
    xyz[2] = ((double)z) / 100.0;
 80a307c:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return xyz;
 80a3080:	e7dd      	b.n	80a303e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x42>
    xyz[0] = ((double)x) / 100.0;
 80a3082:	f004 ff1d 	bl	80a7ec0 <__aeabi_i2d>
 80a3086:	2200      	movs	r2, #0
 80a3088:	4b0b      	ldr	r3, [pc, #44]	; (80a30b8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xbc>)
 80a308a:	f005 f8ad 	bl	80a81e8 <__aeabi_ddiv>
 80a308e:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 100.0;
 80a3092:	4638      	mov	r0, r7
 80a3094:	f004 ff14 	bl	80a7ec0 <__aeabi_i2d>
 80a3098:	2200      	movs	r2, #0
 80a309a:	4b07      	ldr	r3, [pc, #28]	; (80a30b8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xbc>)
 80a309c:	f005 f8a4 	bl	80a81e8 <__aeabi_ddiv>
 80a30a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 100.0;
 80a30a4:	4630      	mov	r0, r6
 80a30a6:	f004 ff0b 	bl	80a7ec0 <__aeabi_i2d>
 80a30aa:	2200      	movs	r2, #0
 80a30ac:	4b02      	ldr	r3, [pc, #8]	; (80a30b8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xbc>)
 80a30ae:	f005 f89b 	bl	80a81e8 <__aeabi_ddiv>
 80a30b2:	e7e3      	b.n	80a307c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x80>
 80a30b4:	3fb00000 	.word	0x3fb00000
 80a30b8:	40590000 	.word	0x40590000

080a30bc <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
 80a30bc:	b530      	push	{r4, r5, lr}
 80a30be:	460c      	mov	r4, r1
 80a30c0:	b087      	sub	sp, #28
 80a30c2:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
 80a30c4:	2220      	movs	r2, #32
 80a30c6:	2100      	movs	r1, #0
 80a30c8:	1d20      	adds	r0, r4, #4
 80a30ca:	f005 ff8d 	bl	80a8fe8 <memset>
  event->version = sizeof(sensors_event_t);
 80a30ce:	2324      	movs	r3, #36	; 0x24
 80a30d0:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 80a30d2:	68eb      	ldr	r3, [r5, #12]
 80a30d4:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_ORIENTATION;
 80a30d6:	2303      	movs	r3, #3
 80a30d8:	60a3      	str	r3, [r4, #8]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a30da:	f000 ffa5 	bl	80a4028 <HAL_Timer_Get_Milli_Seconds>
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80a30de:	221a      	movs	r2, #26
 80a30e0:	4629      	mov	r1, r5
  event->timestamp = millis();
 80a30e2:	6120      	str	r0, [r4, #16]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80a30e4:	4668      	mov	r0, sp
 80a30e6:	f7ff ff89 	bl	80a2ffc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80a30ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a30ee:	f005 fa49 	bl	80a8584 <__aeabi_d2f>
 80a30f2:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
 80a30f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a30f8:	f005 fa44 	bl	80a8584 <__aeabi_d2f>
 80a30fc:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
 80a30fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3102:	f005 fa3f 	bl	80a8584 <__aeabi_d2f>
 80a3106:	61e0      	str	r0, [r4, #28]
}
 80a3108:	2001      	movs	r0, #1
 80a310a:	b007      	add	sp, #28
 80a310c:	bd30      	pop	{r4, r5, pc}

080a310e <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 80a310e:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a3110:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 80a3112:	db68      	blt.n	80a31e6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd8>
 80a3114:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 80a3118:	428c      	cmp	r4, r1
 80a311a:	dd64      	ble.n	80a31e6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd8>
 80a311c:	2a00      	cmp	r2, #0
 80a311e:	db62      	blt.n	80a31e6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd8>
 80a3120:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 80a3124:	4294      	cmp	r4, r2
 80a3126:	dd5e      	ble.n	80a31e6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd8>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
 80a3128:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
 80a312a:	2c02      	cmp	r4, #2
 80a312c:	d05c      	beq.n	80a31e8 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xda>
 80a312e:	2c03      	cmp	r4, #3
 80a3130:	d063      	beq.n	80a31fa <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xec>
 80a3132:	2c01      	cmp	r4, #1
 80a3134:	d104      	bne.n	80a3140 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
 80a3136:	43d2      	mvns	r2, r2
 80a3138:	8904      	ldrh	r4, [r0, #8]
 80a313a:	4414      	add	r4, r2
      break;
 80a313c:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
 80a313e:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
 80a3140:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
 80a3144:	428c      	cmp	r4, r1
 80a3146:	bfa8      	it	ge
 80a3148:	460c      	movge	r4, r1
 80a314a:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
 80a314c:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
 80a3150:	4294      	cmp	r4, r2
 80a3152:	bfa8      	it	ge
 80a3154:	4614      	movge	r4, r2
 80a3156:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
 80a3158:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
 80a315c:	428c      	cmp	r4, r1
 80a315e:	bfb8      	it	lt
 80a3160:	460c      	movlt	r4, r1
 80a3162:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
 80a3164:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
 80a3168:	4294      	cmp	r4, r2
 80a316a:	bfb8      	it	lt
 80a316c:	4614      	movlt	r4, r2
 80a316e:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
 80a3170:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
 80a3174:	2c01      	cmp	r4, #1
 80a3176:	d118      	bne.n	80a31aa <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x9c>
      switch (color) {
 80a3178:	2b01      	cmp	r3, #1
 80a317a:	d044      	beq.n	80a3206 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf8>
 80a317c:	2b02      	cmp	r3, #2
 80a317e:	d055      	beq.n	80a322c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x11e>
 80a3180:	b99b      	cbnz	r3, 80a31aa <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x9c>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
 80a3182:	4614      	mov	r4, r2
 80a3184:	2a00      	cmp	r2, #0
 80a3186:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80a318a:	bfb8      	it	lt
 80a318c:	1dd4      	addlt	r4, r2, #7
 80a318e:	f344 04cf 	sbfx	r4, r4, #3, #16
 80a3192:	fb05 1404 	mla	r4, r5, r4, r1
 80a3196:	2501      	movs	r5, #1
 80a3198:	6b47      	ldr	r7, [r0, #52]	; 0x34
 80a319a:	f002 0607 	and.w	r6, r2, #7
 80a319e:	fa05 f606 	lsl.w	r6, r5, r6
 80a31a2:	5d3d      	ldrb	r5, [r7, r4]
 80a31a4:	ea25 0506 	bic.w	r5, r5, r6
 80a31a8:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
 80a31aa:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
 80a31ae:	2c04      	cmp	r4, #4
 80a31b0:	d119      	bne.n	80a31e6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd8>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
 80a31b2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a31b6:	4362      	muls	r2, r4
 80a31b8:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 80a31bc:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
 80a31c0:	f342 024f 	sbfx	r2, r2, #1, #16
 80a31c4:	eb02 0264 	add.w	r2, r2, r4, asr #1
 80a31c8:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
 80a31ca:	07c9      	lsls	r1, r1, #31
        uint8_t t = pixelptr[0] & 0x0F;
 80a31cc:	5ca0      	ldrb	r0, [r4, r2]
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
 80a31ce:	bf4b      	itete	mi
 80a31d0:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
 80a31d4:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
 80a31d8:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
 80a31dc:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
 80a31e0:	bf48      	it	mi
 80a31e2:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
 80a31e4:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
 80a31e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
 80a31e8:	43d2      	mvns	r2, r2
      x = WIDTH - x - 1;
 80a31ea:	8904      	ldrh	r4, [r0, #8]
 80a31ec:	3c01      	subs	r4, #1
 80a31ee:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
 80a31f0:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
 80a31f2:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 80a31f4:	4422      	add	r2, r4
 80a31f6:	b212      	sxth	r2, r2
      break;
 80a31f8:	e7a2      	b.n	80a3140 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
 80a31fa:	8944      	ldrh	r4, [r0, #10]
 80a31fc:	3c01      	subs	r4, #1
 80a31fe:	1a64      	subs	r4, r4, r1
      break;
 80a3200:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 80a3202:	b222      	sxth	r2, r4
      break;
 80a3204:	e79c      	b.n	80a3140 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
 80a3206:	4614      	mov	r4, r2
 80a3208:	2a00      	cmp	r2, #0
 80a320a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80a320e:	bfb8      	it	lt
 80a3210:	1dd4      	addlt	r4, r2, #7
 80a3212:	f344 04cf 	sbfx	r4, r4, #3, #16
 80a3216:	fb05 1404 	mla	r4, r5, r4, r1
 80a321a:	2501      	movs	r5, #1
 80a321c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80a321e:	f002 0707 	and.w	r7, r2, #7
 80a3222:	40bd      	lsls	r5, r7
 80a3224:	5d37      	ldrb	r7, [r6, r4]
 80a3226:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 80a3228:	5535      	strb	r5, [r6, r4]
        break;
 80a322a:	e7be      	b.n	80a31aa <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x9c>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 80a322c:	4614      	mov	r4, r2
 80a322e:	2a00      	cmp	r2, #0
 80a3230:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80a3234:	bfb8      	it	lt
 80a3236:	1dd4      	addlt	r4, r2, #7
 80a3238:	f344 04cf 	sbfx	r4, r4, #3, #16
 80a323c:	fb05 1404 	mla	r4, r5, r4, r1
 80a3240:	2501      	movs	r5, #1
 80a3242:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80a3244:	f002 0707 	and.w	r7, r2, #7
 80a3248:	40bd      	lsls	r5, r7
 80a324a:	5d37      	ldrb	r7, [r6, r4]
 80a324c:	407d      	eors	r5, r7
 80a324e:	e7eb      	b.n	80a3228 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x11a>

080a3250 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
 80a3250:	b538      	push	{r3, r4, r5, lr}
 80a3252:	460d      	mov	r5, r1
 80a3254:	4611      	mov	r1, r2
 80a3256:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 80a3258:	b21a      	sxth	r2, r3
 80a325a:	b209      	sxth	r1, r1
 80a325c:	f000 fa96 	bl	80a378c <_ZN12Adafruit_GFXC1Ess>
 80a3260:	4b0b      	ldr	r3, [pc, #44]	; (80a3290 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
 80a3262:	9a06      	ldr	r2, [sp, #24]
 80a3264:	6023      	str	r3, [r4, #0]
 80a3266:	2300      	movs	r3, #0
 80a3268:	62e2      	str	r2, [r4, #44]	; 0x2c
 80a326a:	9a07      	ldr	r2, [sp, #28]
 80a326c:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
 80a3270:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 80a3274:	f04f 33ff 	mov.w	r3, #4294967295
 80a3278:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 80a327c:	f99d 3014 	ldrsb.w	r3, [sp, #20]
}
 80a3280:	4620      	mov	r0, r4
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 80a3282:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
 80a3284:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 80a3286:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
 80a328a:	6523      	str	r3, [r4, #80]	; 0x50
}
 80a328c:	bd38      	pop	{r3, r4, r5, pc}
 80a328e:	bf00      	nop
 80a3290:	080a9970 	.word	0x080a9970

080a3294 <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
 80a3294:	b538      	push	{r3, r4, r5, lr}
 80a3296:	4b0c      	ldr	r3, [pc, #48]	; (80a32c8 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
 80a3298:	4604      	mov	r4, r0
 80a329a:	6003      	str	r3, [r0, #0]
  if (buffer) {
 80a329c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a329e:	b118      	cbz	r0, 80a32a8 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
 80a32a0:	f001 f90a 	bl	80a44b8 <free>
    buffer = NULL;
 80a32a4:	2300      	movs	r3, #0
 80a32a6:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
 80a32a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a32aa:	b135      	cbz	r5, 80a32ba <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
 80a32ac:	4628      	mov	r0, r5
 80a32ae:	f7ff f922 	bl	80a24f6 <_ZN18Adafruit_SPIDeviceD1Ev>
 80a32b2:	2138      	movs	r1, #56	; 0x38
 80a32b4:	4628      	mov	r0, r5
 80a32b6:	f7fc fef4 	bl	80a00a2 <_ZdlPvj>
  if (i2c_dev)
 80a32ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a32bc:	b110      	cbz	r0, 80a32c4 <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
 80a32be:	2110      	movs	r1, #16
 80a32c0:	f7fc feef 	bl	80a00a2 <_ZdlPvj>
}
 80a32c4:	4620      	mov	r0, r4
 80a32c6:	bd38      	pop	{r3, r4, r5, pc}
 80a32c8:	080a9970 	.word	0x080a9970

080a32cc <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
 80a32cc:	b530      	push	{r4, r5, lr}
  if (i2c_dev) {                // I2C
 80a32ce:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
 80a32d0:	b087      	sub	sp, #28
 80a32d2:	4604      	mov	r4, r0
 80a32d4:	f88d 100f 	strb.w	r1, [sp, #15]
  if (i2c_dev) {                // I2C
 80a32d8:	b17d      	cbz	r5, 80a32fa <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
 80a32da:	2300      	movs	r3, #0
 80a32dc:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
 80a32de:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
 80a32e2:	f88d 3014 	strb.w	r3, [sp, #20]
 80a32e6:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
 80a32ea:	2301      	movs	r3, #1
 80a32ec:	2202      	movs	r2, #2
 80a32ee:	4628      	mov	r0, r5
 80a32f0:	a905      	add	r1, sp, #20
 80a32f2:	f7ff fa89 	bl	80a2808 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 80a32f6:	b007      	add	sp, #28
 80a32f8:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
 80a32fa:	4629      	mov	r1, r5
 80a32fc:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
 80a3300:	f002 f86f 	bl	80a53e2 <digitalWrite>
    spi_dev->write(&c, 1);
 80a3304:	462b      	mov	r3, r5
 80a3306:	2201      	movs	r2, #1
 80a3308:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a330a:	9500      	str	r5, [sp, #0]
 80a330c:	f10d 010f 	add.w	r1, sp, #15
 80a3310:	f7ff f9e9 	bl	80a26e6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
 80a3314:	e7ef      	b.n	80a32f6 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

080a3316 <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
 80a3316:	2900      	cmp	r1, #0
 80a3318:	bf14      	ite	ne
 80a331a:	21a7      	movne	r1, #167	; 0xa7
 80a331c:	21a6      	moveq	r1, #166	; 0xa6
 80a331e:	f7ff bfd5 	b.w	80a32cc <_ZN17Adafruit_GrayOLED12oled_commandEh>

080a3322 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
 80a3322:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
 80a3324:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
 80a3326:	4604      	mov	r4, r0
 80a3328:	460e      	mov	r6, r1
 80a332a:	4617      	mov	r7, r2
 80a332c:	b085      	sub	sp, #20
  if (i2c_dev) {            // I2C
 80a332e:	b165      	cbz	r5, 80a334a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
 80a3330:	2300      	movs	r3, #0
 80a3332:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
 80a3336:	2301      	movs	r3, #1
 80a3338:	f10d 000f 	add.w	r0, sp, #15
 80a333c:	9000      	str	r0, [sp, #0]
 80a333e:	9301      	str	r3, [sp, #4]
 80a3340:	4628      	mov	r0, r5
 80a3342:	f7ff fa61 	bl	80a2808 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 80a3346:	b005      	add	sp, #20
 80a3348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
 80a334a:	4629      	mov	r1, r5
 80a334c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
 80a3350:	f002 f847 	bl	80a53e2 <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
 80a3354:	462b      	mov	r3, r5
 80a3356:	463a      	mov	r2, r7
 80a3358:	4631      	mov	r1, r6
 80a335a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a335c:	9500      	str	r5, [sp, #0]
 80a335e:	f7ff f9c2 	bl	80a26e6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
 80a3362:	e7f0      	b.n	80a3346 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

080a3364 <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
 80a3364:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
 80a3366:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80a336a:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 80a336e:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 80a3372:	435a      	muls	r2, r3
 80a3374:	1dcb      	adds	r3, r1, #7
 80a3376:	bf48      	it	mi
 80a3378:	f101 030e 	addmi.w	r3, r1, #14
 80a337c:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
 80a337e:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
 80a3380:	435a      	muls	r2, r3
 80a3382:	2100      	movs	r1, #0
 80a3384:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a3386:	f005 fe2f 	bl	80a8fe8 <memset>
  window_x1 = 0;
 80a338a:	2300      	movs	r3, #0
 80a338c:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
 80a338e:	8923      	ldrh	r3, [r4, #8]
 80a3390:	3b01      	subs	r3, #1
 80a3392:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
 80a3394:	8963      	ldrh	r3, [r4, #10]
 80a3396:	3b01      	subs	r3, #1
 80a3398:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
 80a339a:	bd10      	pop	{r4, pc}

080a339c <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
 80a339c:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
 80a339e:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
 80a33a0:	4604      	mov	r4, r0
 80a33a2:	460e      	mov	r6, r1
 80a33a4:	4615      	mov	r5, r2
  if ((!buffer) &&
 80a33a6:	b30b      	cbz	r3, 80a33ec <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
 80a33a8:	2d00      	cmp	r5, #0
 80a33aa:	d133      	bne.n	80a3414 <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
 80a33ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a33ae:	2b00      	cmp	r3, #0
 80a33b0:	d050      	beq.n	80a3454 <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
 80a33b2:	2010      	movs	r0, #16
 80a33b4:	f7fc fe71 	bl	80a009a <_Znwj>
 80a33b8:	4605      	mov	r5, r0
 80a33ba:	b118      	cbz	r0, 80a33c4 <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
 80a33bc:	4631      	mov	r1, r6
 80a33be:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a33c0:	f7ff f9f7 	bl	80a27b2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 80a33c4:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
 80a33c6:	b31d      	cbz	r5, 80a3410 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
 80a33c8:	2101      	movs	r1, #1
 80a33ca:	4628      	mov	r0, r5
 80a33cc:	f7ff fa0d 	bl	80a27ea <_ZN18Adafruit_I2CDevice5beginEb>
 80a33d0:	b1f0      	cbz	r0, 80a3410 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
 80a33d2:	4620      	mov	r0, r4
 80a33d4:	f7ff ffc6 	bl	80a3364 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
 80a33d8:	2300      	movs	r3, #0
 80a33da:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
 80a33dc:	8923      	ldrh	r3, [r4, #8]
  return true; // Success
 80a33de:	2001      	movs	r0, #1
  window_x2 = WIDTH - 1;
 80a33e0:	3b01      	subs	r3, #1
 80a33e2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
 80a33e4:	8963      	ldrh	r3, [r4, #10]
 80a33e6:	3b01      	subs	r3, #1
 80a33e8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
 80a33ea:	e012      	b.n	80a3412 <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
 80a33ec:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80a33f0:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 80a33f4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80a33f8:	4358      	muls	r0, r3
 80a33fa:	1dd3      	adds	r3, r2, #7
 80a33fc:	bf48      	it	mi
 80a33fe:	f102 030e 	addmi.w	r3, r2, #14
 80a3402:	10db      	asrs	r3, r3, #3
 80a3404:	4358      	muls	r0, r3
 80a3406:	f001 f84f 	bl	80a44a8 <malloc>
 80a340a:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
 80a340c:	2800      	cmp	r0, #0
 80a340e:	d1cb      	bne.n	80a33a8 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
 80a3410:	2000      	movs	r0, #0
}
 80a3412:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
 80a3414:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80a3416:	2800      	cmp	r0, #0
 80a3418:	dbc8      	blt.n	80a33ac <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
 80a341a:	2101      	movs	r1, #1
 80a341c:	b280      	uxth	r0, r0
 80a341e:	f001 ffcf 	bl	80a53c0 <pinMode>
    digitalWrite(rstPin, HIGH);
 80a3422:	2101      	movs	r1, #1
 80a3424:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 80a3428:	f001 ffdb 	bl	80a53e2 <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
 80a342c:	200a      	movs	r0, #10
 80a342e:	f001 fbcb 	bl	80a4bc8 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
 80a3432:	2100      	movs	r1, #0
 80a3434:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 80a3438:	f001 ffd3 	bl	80a53e2 <digitalWrite>
    delay(10);                  // Wait 10 ms
 80a343c:	200a      	movs	r0, #10
 80a343e:	f001 fbc3 	bl	80a4bc8 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
 80a3442:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 80a3446:	2101      	movs	r1, #1
 80a3448:	f001 ffcb 	bl	80a53e2 <digitalWrite>
    delay(10);
 80a344c:	200a      	movs	r0, #10
 80a344e:	f001 fbbb 	bl	80a4bc8 <delay>
 80a3452:	e7ab      	b.n	80a33ac <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
 80a3454:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a3456:	2800      	cmp	r0, #0
 80a3458:	d0da      	beq.n	80a3410 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
 80a345a:	f7ff f855 	bl	80a2508 <_ZN18Adafruit_SPIDevice5beginEv>
 80a345e:	2800      	cmp	r0, #0
 80a3460:	d0d6      	beq.n	80a3410 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
 80a3462:	2101      	movs	r1, #1
 80a3464:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 80a3468:	f001 ffaa 	bl	80a53c0 <pinMode>
 80a346c:	e7b1      	b.n	80a33d2 <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

080a346e <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
 80a346e:	2381      	movs	r3, #129	; 0x81
void Adafruit_GrayOLED::setContrast(uint8_t level) {
 80a3470:	b507      	push	{r0, r1, r2, lr}
  oled_commandList(cmd, 2);
 80a3472:	2202      	movs	r2, #2
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
 80a3474:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
 80a3478:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
 80a347a:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
 80a347e:	f7ff ff50 	bl	80a3322 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
 80a3482:	b003      	add	sp, #12
 80a3484:	f85d fb04 	ldr.w	pc, [sp], #4

080a3488 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 80a3488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a348c:	461f      	mov	r7, r3
 80a348e:	b085      	sub	sp, #20
 80a3490:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a3494:	eba7 0a01 	sub.w	sl, r7, r1
 80a3498:	eba8 0902 	sub.w	r9, r8, r2
 80a349c:	f1b9 0f00 	cmp.w	r9, #0
 80a34a0:	bfb8      	it	lt
 80a34a2:	f1c9 0900 	rsblt	r9, r9, #0
 80a34a6:	f1ba 0f00 	cmp.w	sl, #0
 80a34aa:	bfb8      	it	lt
 80a34ac:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 80a34b0:	45d1      	cmp	r9, sl
                             uint16_t color) {
 80a34b2:	4683      	mov	fp, r0
 80a34b4:	460c      	mov	r4, r1
 80a34b6:	4616      	mov	r6, r2
 80a34b8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 80a34bc:	dd04      	ble.n	80a34c8 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 80a34be:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
 80a34c0:	4634      	mov	r4, r6
    _swap_int16_t(x1, y1);
 80a34c2:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
 80a34c4:	460e      	mov	r6, r1
    _swap_int16_t(x1, y1);
 80a34c6:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 80a34c8:	42bc      	cmp	r4, r7
 80a34ca:	dd05      	ble.n	80a34d8 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 80a34cc:	4632      	mov	r2, r6
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
 80a34ce:	4646      	mov	r6, r8
 80a34d0:	4690      	mov	r8, r2
  if (x0 > x1) {
 80a34d2:	4622      	mov	r2, r4
 80a34d4:	463c      	mov	r4, r7
 80a34d6:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a34d8:	1b3a      	subs	r2, r7, r4
 80a34da:	b291      	uxth	r1, r2
 80a34dc:	9100      	str	r1, [sp, #0]
  dy = abs(y1 - y0);
 80a34de:	eba8 0106 	sub.w	r1, r8, r6
 80a34e2:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 80a34e6:	eba0 70e1 	sub.w	r0, r0, r1, asr #31

  int16_t err = dx / 2;
 80a34ea:	f3c2 35c0 	ubfx	r5, r2, #15, #1
 80a34ee:	b211      	sxth	r1, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a34f0:	4546      	cmp	r6, r8
 80a34f2:	bfb4      	ite	lt
 80a34f4:	2201      	movlt	r2, #1
 80a34f6:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
 80a34fa:	440d      	add	r5, r1
  dy = abs(y1 - y0);
 80a34fc:	9001      	str	r0, [sp, #4]
  int16_t err = dx / 2;
 80a34fe:	106d      	asrs	r5, r5, #1
    ystep = -1;
 80a3500:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
 80a3502:	42bc      	cmp	r4, r7
 80a3504:	dc1c      	bgt.n	80a3540 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
    if (steep) {
      writePixel(y0, x0, color);
 80a3506:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 80a350a:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
 80a350c:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80a3510:	bfc7      	ittee	gt
 80a3512:	4631      	movgt	r1, r6
 80a3514:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
 80a3516:	4632      	movle	r2, r6
 80a3518:	4621      	movle	r1, r4
      writePixel(y0, x0, color);
 80a351a:	9303      	str	r3, [sp, #12]
      writePixel(x0, y0, color);
 80a351c:	4658      	mov	r0, fp
 80a351e:	47c0      	blx	r8
    }
    err -= dy;
 80a3520:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
 80a3522:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 80a3524:	1aad      	subs	r5, r5, r2
 80a3526:	b2a9      	uxth	r1, r5
 80a3528:	b22d      	sxth	r5, r5
    if (err < 0) {
 80a352a:	2d00      	cmp	r5, #0
 80a352c:	da05      	bge.n	80a353a <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
      y0 += ystep;
 80a352e:	9a02      	ldr	r2, [sp, #8]
 80a3530:	4416      	add	r6, r2
      err += dx;
 80a3532:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 80a3534:	b236      	sxth	r6, r6
      err += dx;
 80a3536:	1855      	adds	r5, r2, r1
 80a3538:	b22d      	sxth	r5, r5
  for (; x0 <= x1; x0++) {
 80a353a:	3401      	adds	r4, #1
 80a353c:	b224      	sxth	r4, r4
 80a353e:	e7e0      	b.n	80a3502 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
    }
  }
}
 80a3540:	b005      	add	sp, #20
 80a3542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a3546 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 80a3546:	4770      	bx	lr

080a3548 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 80a3548:	b410      	push	{r4}
  drawPixel(x, y, color);
 80a354a:	6804      	ldr	r4, [r0, #0]
 80a354c:	6924      	ldr	r4, [r4, #16]
 80a354e:	46a4      	mov	ip, r4
}
 80a3550:	bc10      	pop	{r4}
  drawPixel(x, y, color);
 80a3552:	4760      	bx	ip

080a3554 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 80a3554:	b430      	push	{r4, r5}
 80a3556:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 80a355a:	6804      	ldr	r4, [r0, #0]
 80a355c:	9502      	str	r5, [sp, #8]
 80a355e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80a3560:	46a4      	mov	ip, r4
}
 80a3562:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
 80a3564:	4760      	bx	ip

080a3566 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 80a3566:	b430      	push	{r4, r5}
 80a3568:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 80a356c:	6804      	ldr	r4, [r0, #0]
 80a356e:	9502      	str	r5, [sp, #8]
 80a3570:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80a3572:	46a4      	mov	ip, r4
}
 80a3574:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
 80a3576:	4760      	bx	ip

080a3578 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 80a3578:	b470      	push	{r4, r5, r6}
 80a357a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80a357e:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 80a3582:	6804      	ldr	r4, [r0, #0]
 80a3584:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80a3588:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80a358a:	46a4      	mov	ip, r4
}
 80a358c:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
 80a358e:	4760      	bx	ip

080a3590 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 80a3590:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a3594:	461c      	mov	r4, r3
 80a3596:	4616      	mov	r6, r2
 80a3598:	4605      	mov	r5, r0
 80a359a:	460f      	mov	r7, r1
  startWrite();
 80a359c:	6803      	ldr	r3, [r0, #0]
  writeLine(x, y, x, y + h - 1, color);
 80a359e:	3c01      	subs	r4, #1
                                 uint16_t color) {
 80a35a0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 80a35a4:	695b      	ldr	r3, [r3, #20]
  writeLine(x, y, x, y + h - 1, color);
 80a35a6:	4434      	add	r4, r6
  startWrite();
 80a35a8:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 80a35aa:	b224      	sxth	r4, r4
 80a35ac:	682b      	ldr	r3, [r5, #0]
 80a35ae:	f8cd 8004 	str.w	r8, [sp, #4]
 80a35b2:	9400      	str	r4, [sp, #0]
 80a35b4:	4628      	mov	r0, r5
 80a35b6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80a35b8:	4632      	mov	r2, r6
 80a35ba:	463b      	mov	r3, r7
 80a35bc:	4639      	mov	r1, r7
 80a35be:	47a0      	blx	r4
  endWrite();
 80a35c0:	4628      	mov	r0, r5
 80a35c2:	682b      	ldr	r3, [r5, #0]
 80a35c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a35c6:	b002      	add	sp, #8
 80a35c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 80a35cc:	4718      	bx	r3

080a35ce <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 80a35ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a35d2:	4617      	mov	r7, r2
 80a35d4:	4604      	mov	r4, r0
 80a35d6:	461d      	mov	r5, r3
 80a35d8:	460e      	mov	r6, r1
  startWrite();
 80a35da:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
 80a35dc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 80a35e0:	695b      	ldr	r3, [r3, #20]
 80a35e2:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 80a35e4:	e9cd 7800 	strd	r7, r8, [sp]
 80a35e8:	6822      	ldr	r2, [r4, #0]
 80a35ea:	1e6b      	subs	r3, r5, #1
 80a35ec:	4433      	add	r3, r6
 80a35ee:	4620      	mov	r0, r4
 80a35f0:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80a35f2:	4631      	mov	r1, r6
 80a35f4:	463a      	mov	r2, r7
 80a35f6:	b21b      	sxth	r3, r3
 80a35f8:	47a8      	blx	r5
  endWrite();
 80a35fa:	4620      	mov	r0, r4
 80a35fc:	6823      	ldr	r3, [r4, #0]
 80a35fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a3600:	b002      	add	sp, #8
 80a3602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 80a3606:	4718      	bx	r3

080a3608 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 80a3608:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a360c:	461e      	mov	r6, r3
  startWrite();
 80a360e:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 80a3610:	460c      	mov	r4, r1
  startWrite();
 80a3612:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 80a3614:	4605      	mov	r5, r0
 80a3616:	4617      	mov	r7, r2
 80a3618:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a361c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  startWrite();
 80a3620:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 80a3622:	4426      	add	r6, r4
 80a3624:	42b4      	cmp	r4, r6
    writeFastVLine(i, y, h, color);
 80a3626:	682b      	ldr	r3, [r5, #0]
  for (int16_t i = x; i < x + w; i++) {
 80a3628:	da0b      	bge.n	80a3642 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
 80a362a:	f8cd 9000 	str.w	r9, [sp]
 80a362e:	4621      	mov	r1, r4
 80a3630:	f8d3 a020 	ldr.w	sl, [r3, #32]
 80a3634:	463a      	mov	r2, r7
 80a3636:	4643      	mov	r3, r8
 80a3638:	4628      	mov	r0, r5
 80a363a:	3401      	adds	r4, #1
 80a363c:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
 80a363e:	b224      	sxth	r4, r4
 80a3640:	e7f0      	b.n	80a3624 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
 80a3642:	4628      	mov	r0, r5
 80a3644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a3646:	b002      	add	sp, #8
 80a3648:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 80a364c:	4718      	bx	r3

080a364e <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 80a364e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a3650:	9101      	str	r1, [sp, #4]
 80a3652:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 80a3656:	6802      	ldr	r2, [r0, #0]
 80a3658:	9100      	str	r1, [sp, #0]
 80a365a:	6c14      	ldr	r4, [r2, #64]	; 0x40
 80a365c:	2200      	movs	r2, #0
 80a365e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a3662:	4611      	mov	r1, r2
 80a3664:	47a0      	blx	r4
}
 80a3666:	b002      	add	sp, #8
 80a3668:	bd10      	pop	{r4, pc}

080a366a <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
 80a366a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  // Update in subclasses if desired!
  if (x0 == x1) {
 80a366e:	4299      	cmp	r1, r3
                            uint16_t color) {
 80a3670:	4616      	mov	r6, r2
 80a3672:	4680      	mov	r8, r0
 80a3674:	460d      	mov	r5, r1
 80a3676:	461c      	mov	r4, r3
 80a3678:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 80a367c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if (y0 > y1)
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80a3680:	6802      	ldr	r2, [r0, #0]
  if (x0 == x1) {
 80a3682:	d112      	bne.n	80a36aa <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
    if (y0 > y1)
 80a3684:	42be      	cmp	r6, r7
 80a3686:	bfc2      	ittt	gt
 80a3688:	4633      	movgt	r3, r6
 80a368a:	463e      	movgt	r6, r7
 80a368c:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80a368e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a3692:	1c7b      	adds	r3, r7, #1
 80a3694:	6b94      	ldr	r4, [r2, #56]	; 0x38
 80a3696:	1b9b      	subs	r3, r3, r6
  } else if (y0 == y1) {
    if (x0 > x1)
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a3698:	4632      	mov	r2, r6
 80a369a:	4629      	mov	r1, r5
 80a369c:	4640      	mov	r0, r8
 80a369e:	46a4      	mov	ip, r4
 80a36a0:	b21b      	sxth	r3, r3
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
 80a36a2:	b003      	add	sp, #12
 80a36a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a36a8:	4760      	bx	ip
  } else if (y0 == y1) {
 80a36aa:	42be      	cmp	r6, r7
 80a36ac:	d10a      	bne.n	80a36c4 <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
    if (x0 > x1)
 80a36ae:	4299      	cmp	r1, r3
 80a36b0:	bfc2      	ittt	gt
 80a36b2:	460b      	movgt	r3, r1
 80a36b4:	4625      	movgt	r5, r4
 80a36b6:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a36b8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a36bc:	1c63      	adds	r3, r4, #1
 80a36be:	1b5b      	subs	r3, r3, r5
 80a36c0:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a36c2:	e7e9      	b.n	80a3698 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
    startWrite();
 80a36c4:	6953      	ldr	r3, [r2, #20]
 80a36c6:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 80a36c8:	e9cd 7900 	strd	r7, r9, [sp]
 80a36cc:	f8d8 3000 	ldr.w	r3, [r8]
 80a36d0:	4640      	mov	r0, r8
 80a36d2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a36d4:	4632      	mov	r2, r6
 80a36d6:	4623      	mov	r3, r4
 80a36d8:	4629      	mov	r1, r5
 80a36da:	47b8      	blx	r7
    endWrite();
 80a36dc:	4640      	mov	r0, r8
 80a36de:	f8d8 3000 	ldr.w	r3, [r8]
 80a36e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a36e4:	b003      	add	sp, #12
 80a36e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
 80a36ea:	4718      	bx	r3

080a36ec <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 80a36ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a36f0:	4604      	mov	r4, r0
 80a36f2:	460f      	mov	r7, r1
 80a36f4:	4616      	mov	r6, r2
 80a36f6:	461d      	mov	r5, r3
  startWrite();
 80a36f8:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 80a36fa:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 80a36fe:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 80a3700:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
 80a3704:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 80a3706:	6823      	ldr	r3, [r4, #0]
 80a3708:	f8cd 8000 	str.w	r8, [sp]
 80a370c:	4632      	mov	r2, r6
 80a370e:	4639      	mov	r1, r7
 80a3710:	4620      	mov	r0, r4
 80a3712:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80a3716:	462b      	mov	r3, r5
 80a3718:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
 80a371a:	6823      	ldr	r3, [r4, #0]
 80a371c:	f109 32ff 	add.w	r2, r9, #4294967295
 80a3720:	f8cd 8000 	str.w	r8, [sp]
 80a3724:	4432      	add	r2, r6
 80a3726:	4639      	mov	r1, r7
 80a3728:	4620      	mov	r0, r4
 80a372a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80a372e:	b212      	sxth	r2, r2
 80a3730:	462b      	mov	r3, r5
 80a3732:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
 80a3734:	6823      	ldr	r3, [r4, #0]
 80a3736:	f8cd 8000 	str.w	r8, [sp]
 80a373a:	4632      	mov	r2, r6
 80a373c:	4639      	mov	r1, r7
 80a373e:	4620      	mov	r0, r4
 80a3740:	f8d3 a020 	ldr.w	sl, [r3, #32]
 80a3744:	464b      	mov	r3, r9
 80a3746:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
 80a3748:	3d01      	subs	r5, #1
 80a374a:	6823      	ldr	r3, [r4, #0]
 80a374c:	19e9      	adds	r1, r5, r7
 80a374e:	f8cd 8000 	str.w	r8, [sp]
 80a3752:	4620      	mov	r0, r4
 80a3754:	6a1d      	ldr	r5, [r3, #32]
 80a3756:	4632      	mov	r2, r6
 80a3758:	464b      	mov	r3, r9
 80a375a:	b209      	sxth	r1, r1
 80a375c:	47a8      	blx	r5
  endWrite();
 80a375e:	4620      	mov	r0, r4
 80a3760:	6823      	ldr	r3, [r4, #0]
 80a3762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a3764:	b002      	add	sp, #8
 80a3766:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 80a376a:	4718      	bx	r3

080a376c <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 80a376c:	4770      	bx	lr

080a376e <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
 80a376e:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
 80a3772:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
 80a3776:	7683      	strb	r3, [r0, #26]
    _width = WIDTH;
 80a3778:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  switch (rotation) {
 80a377c:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
 80a377e:	bf59      	ittee	pl
 80a3780:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
 80a3782:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
 80a3784:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
 80a3786:	81c3      	strhmi	r3, [r0, #14]
}
 80a3788:	4770      	bx	lr
	...

080a378c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 80a378c:	b530      	push	{r4, r5, lr}
 80a378e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 80a3790:	2400      	movs	r4, #0
  _width = WIDTH;
 80a3792:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
 80a3794:	f04f 31ff 	mov.w	r1, #4294967295
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 80a3798:	4d05      	ldr	r5, [pc, #20]	; (80a37b0 <_ZN12Adafruit_GFXC1Ess+0x24>)
 80a379a:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
 80a379c:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
 80a379e:	4a05      	ldr	r2, [pc, #20]	; (80a37b4 <_ZN12Adafruit_GFXC1Ess+0x28>)
 80a37a0:	6044      	str	r4, [r0, #4]
 80a37a2:	e9c0 1205 	strd	r1, r2, [r0, #20]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 80a37a6:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
 80a37a8:	6104      	str	r4, [r0, #16]
  _cp437 = false;
 80a37aa:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
 80a37ac:	6204      	str	r4, [r0, #32]
}
 80a37ae:	bd30      	pop	{r4, r5, pc}
 80a37b0:	080a9ecc 	.word	0x080a9ecc
 80a37b4:	01000101 	.word	0x01000101

080a37b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
 80a37b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  startWrite();
 80a37bc:	2600      	movs	r6, #0
 80a37be:	4637      	mov	r7, r6
  uint8_t byte = 0;
 80a37c0:	4635      	mov	r5, r6
                              int16_t w, int16_t h, uint16_t color) {
 80a37c2:	b087      	sub	sp, #28
 80a37c4:	9302      	str	r3, [sp, #8]
 80a37c6:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 80a37ca:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80a37ce:	9303      	str	r3, [sp, #12]
  startWrite();
 80a37d0:	6803      	ldr	r3, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
 80a37d2:	e9cd 1200 	strd	r1, r2, [sp]
  startWrite();
 80a37d6:	695b      	ldr	r3, [r3, #20]
                              int16_t w, int16_t h, uint16_t color) {
 80a37d8:	4604      	mov	r4, r0
 80a37da:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
  startWrite();
 80a37de:	4798      	blx	r3
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80a37e0:	f118 0307 	adds.w	r3, r8, #7
 80a37e4:	bf48      	it	mi
 80a37e6:	f108 030e 	addmi.w	r3, r8, #14
 80a37ea:	ea4f 0be3 	mov.w	fp, r3, asr #3
 80a37ee:	9b01      	ldr	r3, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
 80a37f0:	9903      	ldr	r1, [sp, #12]
 80a37f2:	19da      	adds	r2, r3, r7
 80a37f4:	b23b      	sxth	r3, r7
 80a37f6:	4299      	cmp	r1, r3
 80a37f8:	b212      	sxth	r2, r2
 80a37fa:	dd25      	ble.n	80a3848 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
 80a37fc:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a3800:	9b02      	ldr	r3, [sp, #8]
 80a3802:	4433      	add	r3, r6
 80a3804:	9304      	str	r3, [sp, #16]
 80a3806:	fa0f f389 	sxth.w	r3, r9
    for (int16_t i = 0; i < w; i++) {
 80a380a:	4598      	cmp	r8, r3
 80a380c:	fa1f f189 	uxth.w	r1, r9
 80a3810:	dd17      	ble.n	80a3842 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
      if (i & 7)
 80a3812:	0748      	lsls	r0, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a3814:	bf05      	ittet	eq
 80a3816:	9804      	ldreq	r0, [sp, #16]
 80a3818:	10db      	asreq	r3, r3, #3
        byte <<= 1;
 80a381a:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a381c:	5cc5      	ldrbeq	r5, [r0, r3]
        byte <<= 1;
 80a381e:	bf18      	it	ne
 80a3820:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
 80a3822:	062b      	lsls	r3, r5, #24
 80a3824:	d50a      	bpl.n	80a383c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x84>
        writePixel(x + i, y, color);
 80a3826:	9b00      	ldr	r3, [sp, #0]
 80a3828:	9205      	str	r2, [sp, #20]
 80a382a:	4419      	add	r1, r3
 80a382c:	6823      	ldr	r3, [r4, #0]
 80a382e:	4620      	mov	r0, r4
 80a3830:	699b      	ldr	r3, [r3, #24]
 80a3832:	b209      	sxth	r1, r1
 80a3834:	469c      	mov	ip, r3
 80a3836:	4653      	mov	r3, sl
 80a3838:	47e0      	blx	ip
 80a383a:	9a05      	ldr	r2, [sp, #20]
    for (int16_t i = 0; i < w; i++) {
 80a383c:	f109 0901 	add.w	r9, r9, #1
 80a3840:	e7e1      	b.n	80a3806 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x4e>
  for (int16_t j = 0; j < h; j++, y++) {
 80a3842:	3701      	adds	r7, #1
 80a3844:	445e      	add	r6, fp
 80a3846:	e7d2      	b.n	80a37ee <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x36>
  endWrite();
 80a3848:	4620      	mov	r0, r4
 80a384a:	6823      	ldr	r3, [r4, #0]
 80a384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a384e:	b007      	add	sp, #28
 80a3850:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 80a3854:	4718      	bx	r3
	...

080a3858 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
 80a3858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a385c:	b091      	sub	sp, #68	; 0x44
 80a385e:	4617      	mov	r7, r2
 80a3860:	461e      	mov	r6, r3
  if (!gfxFont) { // 'Classic' built-in font
 80a3862:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
 80a3864:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80a3868:	4682      	mov	sl, r0
 80a386a:	f8bd 806c 	ldrh.w	r8, [sp, #108]	; 0x6c
 80a386e:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
 80a3872:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 80a3876:	9106      	str	r1, [sp, #24]
 80a3878:	9303      	str	r3, [sp, #12]
  if (!gfxFont) { // 'Classic' built-in font
 80a387a:	2a00      	cmp	r2, #0
 80a387c:	f040 80b9 	bne.w	80a39f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x19a>
    if ((x >= _width) ||              // Clip right
 80a3880:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a3884:	428b      	cmp	r3, r1
 80a3886:	f340 8137 	ble.w	80a3af8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2a0>
 80a388a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80a388e:	42bb      	cmp	r3, r7
 80a3890:	f340 8132 	ble.w	80a3af8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2a0>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 80a3894:	2306      	movs	r3, #6
 80a3896:	fb03 1305 	mla	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
 80a389a:	2b00      	cmp	r3, #0
 80a389c:	f340 812c 	ble.w	80a3af8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2a0>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 80a38a0:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
 80a38a4:	2b00      	cmp	r3, #0
 80a38a6:	f340 8127 	ble.w	80a3af8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2a0>
    if (!_cp437 && (c >= 176))
 80a38aa:	7f03      	ldrb	r3, [r0, #28]
 80a38ac:	b91b      	cbnz	r3, 80a38b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x5e>
 80a38ae:	2eaf      	cmp	r6, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
 80a38b0:	bf84      	itt	hi
 80a38b2:	3601      	addhi	r6, #1
 80a38b4:	b2f6      	uxtbhi	r6, r6
    startWrite();
 80a38b6:	f8da 3000 	ldr.w	r3, [sl]
 80a38ba:	4650      	mov	r0, sl
 80a38bc:	695b      	ldr	r3, [r3, #20]
 80a38be:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a38c0:	2305      	movs	r3, #5
 80a38c2:	930a      	str	r3, [sp, #40]	; 0x28
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80a38c4:	2300      	movs	r3, #0
 80a38c6:	9305      	str	r3, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a38c8:	4b8d      	ldr	r3, [pc, #564]	; (80a3b00 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2a8>)
 80a38ca:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80a38ce:	4433      	add	r3, r6
 80a38d0:	930d      	str	r3, [sp, #52]	; 0x34
            writePixel(x + i, y + j, color);
 80a38d2:	b2bb      	uxth	r3, r7
 80a38d4:	9307      	str	r3, [sp, #28]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a38d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a38d8:	9a05      	ldr	r2, [sp, #20]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80a38da:	f8bd 6014 	ldrh.w	r6, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a38de:	5c9b      	ldrb	r3, [r3, r2]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80a38e0:	f04f 0900 	mov.w	r9, #0
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a38e4:	9308      	str	r3, [sp, #32]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80a38e6:	b2ab      	uxth	r3, r5
 80a38e8:	930c      	str	r3, [sp, #48]	; 0x30
 80a38ea:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80a38ee:	9304      	str	r3, [sp, #16]
 80a38f0:	fb05 3306 	mla	r3, r5, r6, r3
 80a38f4:	b21b      	sxth	r3, r3
 80a38f6:	9309      	str	r3, [sp, #36]	; 0x24
 80a38f8:	2308      	movs	r3, #8
 80a38fa:	930b      	str	r3, [sp, #44]	; 0x2c
            writePixel(x + i, y + j, bg);
 80a38fc:	9b04      	ldr	r3, [sp, #16]
 80a38fe:	441e      	add	r6, r3
 80a3900:	b236      	sxth	r6, r6
        if (line & 1) {
 80a3902:	9a08      	ldr	r2, [sp, #32]
            writePixel(x + i, y + j, color);
 80a3904:	f8da 3000 	ldr.w	r3, [sl]
        if (line & 1) {
 80a3908:	07d2      	lsls	r2, r2, #31
 80a390a:	d54d      	bpl.n	80a39a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x150>
          if (size_x == 1 && size_y == 1)
 80a390c:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 80a390e:	9907      	ldr	r1, [sp, #28]
 80a3910:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 80a3914:	d13b      	bne.n	80a398e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x136>
 80a3916:	2c01      	cmp	r4, #1
 80a3918:	d139      	bne.n	80a398e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x136>
            writePixel(x + i, y + j, color);
 80a391a:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a391e:	9b03      	ldr	r3, [sp, #12]
 80a3920:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
 80a3922:	4631      	mov	r1, r6
 80a3924:	4650      	mov	r0, sl
 80a3926:	b212      	sxth	r2, r2
 80a3928:	47d8      	blx	fp
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80a392a:	9b08      	ldr	r3, [sp, #32]
 80a392c:	f109 0901 	add.w	r9, r9, #1
 80a3930:	085b      	lsrs	r3, r3, #1
 80a3932:	9308      	str	r3, [sp, #32]
 80a3934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a3936:	fa4f f989 	sxtb.w	r9, r9
 80a393a:	3b01      	subs	r3, #1
 80a393c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a3940:	930b      	str	r3, [sp, #44]	; 0x2c
 80a3942:	d1de      	bne.n	80a3902 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xaa>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80a3944:	9b05      	ldr	r3, [sp, #20]
 80a3946:	3301      	adds	r3, #1
 80a3948:	b25b      	sxtb	r3, r3
 80a394a:	9305      	str	r3, [sp, #20]
 80a394c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a394e:	3b01      	subs	r3, #1
 80a3950:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a3954:	930a      	str	r3, [sp, #40]	; 0x28
 80a3956:	d1be      	bne.n	80a38d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x7e>
    if (bg != color) { // If opaque, draw vertical line for last column
 80a3958:	9b03      	ldr	r3, [sp, #12]
 80a395a:	4543      	cmp	r3, r8
 80a395c:	d00f      	beq.n	80a397e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
      if (size_x == 1 && size_y == 1)
 80a395e:	2d01      	cmp	r5, #1
        writeFastVLine(x + 5, y, 8, bg);
 80a3960:	f8da 3000 	ldr.w	r3, [sl]
      if (size_x == 1 && size_y == 1)
 80a3964:	d134      	bne.n	80a39d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x178>
 80a3966:	2c01      	cmp	r4, #1
 80a3968:	d132      	bne.n	80a39d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x178>
        writeFastVLine(x + 5, y, 8, bg);
 80a396a:	9904      	ldr	r1, [sp, #16]
 80a396c:	f8cd 8000 	str.w	r8, [sp]
 80a3970:	3105      	adds	r1, #5
 80a3972:	6a1c      	ldr	r4, [r3, #32]
 80a3974:	463a      	mov	r2, r7
 80a3976:	2308      	movs	r3, #8
 80a3978:	4650      	mov	r0, sl
 80a397a:	b209      	sxth	r1, r1
 80a397c:	47a0      	blx	r4
    endWrite();
 80a397e:	4650      	mov	r0, sl
 80a3980:	f8da 3000 	ldr.w	r3, [sl]
 80a3984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a3986:	b011      	add	sp, #68	; 0x44
 80a3988:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 80a398c:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 80a398e:	fb04 1202 	mla	r2, r4, r2, r1
 80a3992:	9903      	ldr	r1, [sp, #12]
 80a3994:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80a3996:	9400      	str	r4, [sp, #0]
 80a3998:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80a399c:	4650      	mov	r0, sl
 80a399e:	462b      	mov	r3, r5
 80a39a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a39a2:	b212      	sxth	r2, r2
 80a39a4:	47d8      	blx	fp
 80a39a6:	e7c0      	b.n	80a392a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd2>
        } else if (bg != color) {
 80a39a8:	9a03      	ldr	r2, [sp, #12]
 80a39aa:	4542      	cmp	r2, r8
 80a39ac:	d0bd      	beq.n	80a392a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd2>
          if (size_x == 1 && size_y == 1)
 80a39ae:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, bg);
 80a39b0:	9907      	ldr	r1, [sp, #28]
            writePixel(x + i, y + j, color);
 80a39b2:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 80a39b6:	d106      	bne.n	80a39c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x16e>
 80a39b8:	2c01      	cmp	r4, #1
 80a39ba:	d104      	bne.n	80a39c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x16e>
            writePixel(x + i, y + j, bg);
 80a39bc:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a39c0:	440a      	add	r2, r1
 80a39c2:	4643      	mov	r3, r8
 80a39c4:	e7ad      	b.n	80a3922 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xca>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80a39c6:	fb04 1202 	mla	r2, r4, r2, r1
 80a39ca:	f8cd 8004 	str.w	r8, [sp, #4]
 80a39ce:	e7e2      	b.n	80a3996 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x13e>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80a39d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a39d2:	00e4      	lsls	r4, r4, #3
 80a39d4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80a39d8:	9a04      	ldr	r2, [sp, #16]
 80a39da:	f8cd 8004 	str.w	r8, [sp, #4]
 80a39de:	440a      	add	r2, r1
 80a39e0:	4611      	mov	r1, r2
 80a39e2:	9400      	str	r4, [sp, #0]
 80a39e4:	69dc      	ldr	r4, [r3, #28]
 80a39e6:	463a      	mov	r2, r7
 80a39e8:	462b      	mov	r3, r5
 80a39ea:	4650      	mov	r0, sl
 80a39ec:	b209      	sxth	r1, r1
 80a39ee:	47a0      	blx	r4
    endWrite();
 80a39f0:	e7c5      	b.n	80a397e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80a39f2:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
 80a39f4:	6851      	ldr	r1, [r2, #4]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80a39f6:	1af6      	subs	r6, r6, r3
  return gfxFont->bitmap;
 80a39f8:	6812      	ldr	r2, [r2, #0]
  return gfxFont->glyph + c;
 80a39fa:	b2f6      	uxtb	r6, r6
  return gfxFont->bitmap;
 80a39fc:	920c      	str	r2, [sp, #48]	; 0x30
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a39fe:	f831 2036 	ldrh.w	r2, [r1, r6, lsl #3]
  return gfxFont->glyph + c;
 80a3a02:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a3a06:	9204      	str	r2, [sp, #16]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 80a3a08:	789a      	ldrb	r2, [r3, #2]
    if (size_x > 1 || size_y > 1) {
 80a3a0a:	2d01      	cmp	r5, #1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 80a3a0c:	9208      	str	r2, [sp, #32]
 80a3a0e:	78da      	ldrb	r2, [r3, #3]
           yo = pgm_read_byte(&glyph->yOffset);
 80a3a10:	f993 b006 	ldrsb.w	fp, [r3, #6]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 80a3a14:	920d      	str	r2, [sp, #52]	; 0x34
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 80a3a16:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80a3a1a:	9209      	str	r2, [sp, #36]	; 0x24
    if (size_x > 1 || size_y > 1) {
 80a3a1c:	d801      	bhi.n	80a3a22 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ca>
 80a3a1e:	2c01      	cmp	r4, #1
 80a3a20:	d950      	bls.n	80a3ac4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x26c>
      xo16 = xo;
 80a3a22:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80a3a26:	9305      	str	r3, [sp, #20]
      yo16 = yo;
 80a3a28:	fa0f f38b 	sxth.w	r3, fp
 80a3a2c:	9307      	str	r3, [sp, #28]
    uint8_t xx, yy, bits = 0, bit = 0;
 80a3a2e:	f04f 0800 	mov.w	r8, #0
 80a3a32:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
 80a3a34:	4646      	mov	r6, r8
    startWrite();
 80a3a36:	f8da 3000 	ldr.w	r3, [sl]
 80a3a3a:	4650      	mov	r0, sl
 80a3a3c:	695b      	ldr	r3, [r3, #20]
 80a3a3e:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 80a3a40:	b2bb      	uxth	r3, r7
 80a3a42:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + xo + xx, y + yo + yy, color);
 80a3a44:	445b      	add	r3, fp
 80a3a46:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
 80a3a48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a3a4a:	429e      	cmp	r6, r3
 80a3a4c:	d297      	bcs.n	80a397e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 80a3a4e:	9b07      	ldr	r3, [sp, #28]
 80a3a50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a3a52:	4433      	add	r3, r6
 80a3a54:	fb03 2304 	mla	r3, r3, r4, r2
 80a3a58:	b21b      	sxth	r3, r3
 80a3a5a:	930b      	str	r3, [sp, #44]	; 0x2c
      for (xx = 0; xx < w; xx++) {
 80a3a5c:	2700      	movs	r7, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 80a3a5e:	4643      	mov	r3, r8
            writePixel(x + xo + xx, y + yo + yy, color);
 80a3a60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a3a62:	eb02 0b06 	add.w	fp, r2, r6
 80a3a66:	fa0f fb8b 	sxth.w	fp, fp
      for (xx = 0; xx < w; xx++) {
 80a3a6a:	9a08      	ldr	r2, [sp, #32]
 80a3a6c:	4297      	cmp	r7, r2
 80a3a6e:	d23c      	bcs.n	80a3aea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x292>
        if (!(bit++ & 7)) {
 80a3a70:	1c5a      	adds	r2, r3, #1
 80a3a72:	b2d2      	uxtb	r2, r2
 80a3a74:	075b      	lsls	r3, r3, #29
 80a3a76:	920e      	str	r2, [sp, #56]	; 0x38
 80a3a78:	d107      	bne.n	80a3a8a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x232>
          bits = pgm_read_byte(&bitmap[bo++]);
 80a3a7a:	9b04      	ldr	r3, [sp, #16]
 80a3a7c:	9904      	ldr	r1, [sp, #16]
 80a3a7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a3a80:	3301      	adds	r3, #1
 80a3a82:	b29b      	uxth	r3, r3
 80a3a84:	f812 9001 	ldrb.w	r9, [r2, r1]
 80a3a88:	9304      	str	r3, [sp, #16]
        if (bits & 0x80) {
 80a3a8a:	f019 0f80 	tst.w	r9, #128	; 0x80
 80a3a8e:	d011      	beq.n	80a3ab4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x25c>
          if (size_x == 1 && size_y == 1) {
 80a3a90:	2d01      	cmp	r5, #1
            writePixel(x + xo + xx, y + yo + yy, color);
 80a3a92:	f8da 3000 	ldr.w	r3, [sl]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80a3a96:	f8bd 1018 	ldrh.w	r1, [sp, #24]
          if (size_x == 1 && size_y == 1) {
 80a3a9a:	d117      	bne.n	80a3acc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x274>
 80a3a9c:	2c01      	cmp	r4, #1
 80a3a9e:	d115      	bne.n	80a3acc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x274>
            writePixel(x + xo + xx, y + yo + yy, color);
 80a3aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a3aa2:	699b      	ldr	r3, [r3, #24]
 80a3aa4:	4411      	add	r1, r2
 80a3aa6:	4439      	add	r1, r7
 80a3aa8:	469c      	mov	ip, r3
 80a3aaa:	465a      	mov	r2, fp
 80a3aac:	4650      	mov	r0, sl
 80a3aae:	9b03      	ldr	r3, [sp, #12]
 80a3ab0:	b209      	sxth	r1, r1
 80a3ab2:	47e0      	blx	ip
        bits <<= 1;
 80a3ab4:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
 80a3ab8:	3701      	adds	r7, #1
        if (!(bit++ & 7)) {
 80a3aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        bits <<= 1;
 80a3abc:	fa5f f989 	uxtb.w	r9, r9
      for (xx = 0; xx < w; xx++) {
 80a3ac0:	b2ff      	uxtb	r7, r7
 80a3ac2:	e7d2      	b.n	80a3a6a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x212>
    int16_t xo16 = 0, yo16 = 0;
 80a3ac4:	2300      	movs	r3, #0
 80a3ac6:	9307      	str	r3, [sp, #28]
 80a3ac8:	9305      	str	r3, [sp, #20]
 80a3aca:	e7b0      	b.n	80a3a2e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1d6>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 80a3acc:	9a05      	ldr	r2, [sp, #20]
 80a3ace:	4650      	mov	r0, sl
 80a3ad0:	443a      	add	r2, r7
 80a3ad2:	fb02 1105 	mla	r1, r2, r5, r1
 80a3ad6:	9a03      	ldr	r2, [sp, #12]
 80a3ad8:	b209      	sxth	r1, r1
 80a3ada:	e9cd 4200 	strd	r4, r2, [sp]
 80a3ade:	69db      	ldr	r3, [r3, #28]
 80a3ae0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a3ae2:	469c      	mov	ip, r3
 80a3ae4:	462b      	mov	r3, r5
 80a3ae6:	47e0      	blx	ip
 80a3ae8:	e7e4      	b.n	80a3ab4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x25c>
 80a3aea:	9b08      	ldr	r3, [sp, #32]
    for (yy = 0; yy < h; yy++) {
 80a3aec:	3601      	adds	r6, #1
 80a3aee:	4498      	add	r8, r3
 80a3af0:	fa5f f888 	uxtb.w	r8, r8
 80a3af4:	b2f6      	uxtb	r6, r6
 80a3af6:	e7a7      	b.n	80a3a48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f0>
}
 80a3af8:	b011      	add	sp, #68	; 0x44
 80a3afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3afe:	bf00      	nop
 80a3b00:	080a99c4 	.word	0x080a99c4

080a3b04 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 80a3b04:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
 80a3b06:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 80a3b08:	4604      	mov	r4, r0
 80a3b0a:	460b      	mov	r3, r1
 80a3b0c:	b085      	sub	sp, #20
  if (!gfxFont) { // 'Classic' built-in font
 80a3b0e:	2a00      	cmp	r2, #0
 80a3b10:	d134      	bne.n	80a3b7c <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
 80a3b12:	290a      	cmp	r1, #10
 80a3b14:	d108      	bne.n	80a3b28 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
 80a3b16:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
 80a3b18:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
 80a3b1a:	7e42      	ldrb	r2, [r0, #25]
 80a3b1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
 80a3b20:	8263      	strh	r3, [r4, #18]
}
 80a3b22:	2001      	movs	r0, #1
 80a3b24:	b005      	add	sp, #20
 80a3b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
 80a3b28:	290d      	cmp	r1, #13
 80a3b2a:	d0fa      	beq.n	80a3b22 <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80a3b2c:	7ee1      	ldrb	r1, [r4, #27]
 80a3b2e:	7e00      	ldrb	r0, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
 80a3b30:	7e65      	ldrb	r5, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80a3b32:	b171      	cbz	r1, 80a3b52 <_ZN12Adafruit_GFX5writeEh+0x4e>
 80a3b34:	2606      	movs	r6, #6
 80a3b36:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a3b3a:	fb06 1100 	mla	r1, r6, r0, r1
 80a3b3e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80a3b42:	42b1      	cmp	r1, r6
      cursor_y += textsize_y * 8; // advance y one line
 80a3b44:	bfc1      	itttt	gt
 80a3b46:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
 80a3b4a:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
 80a3b4c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 80a3b50:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 80a3b52:	8ae2      	ldrh	r2, [r4, #22]
 80a3b54:	e9cd 0502 	strd	r0, r5, [sp, #8]
 80a3b58:	9201      	str	r2, [sp, #4]
 80a3b5a:	8aa2      	ldrh	r2, [r4, #20]
 80a3b5c:	4620      	mov	r0, r4
 80a3b5e:	9200      	str	r2, [sp, #0]
 80a3b60:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a3b64:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a3b68:	f7ff fe76 	bl	80a3858 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
 80a3b6c:	7e23      	ldrb	r3, [r4, #24]
 80a3b6e:	8a22      	ldrh	r2, [r4, #16]
 80a3b70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a3b74:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
 80a3b78:	8223      	strh	r3, [r4, #16]
 80a3b7a:	e7d2      	b.n	80a3b22 <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
 80a3b7c:	290a      	cmp	r1, #10
 80a3b7e:	d107      	bne.n	80a3b90 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
 80a3b80:	2300      	movs	r3, #0
 80a3b82:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a3b84:	7e41      	ldrb	r1, [r0, #25]
 80a3b86:	7b12      	ldrb	r2, [r2, #12]
      cursor_y +=
 80a3b88:	8a43      	ldrh	r3, [r0, #18]
 80a3b8a:	fb01 3302 	mla	r3, r1, r2, r3
 80a3b8e:	e7c7      	b.n	80a3b20 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
 80a3b90:	290d      	cmp	r1, #13
 80a3b92:	d0c6      	beq.n	80a3b22 <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 80a3b94:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80a3b96:	42a9      	cmp	r1, r5
 80a3b98:	d3c3      	bcc.n	80a3b22 <_ZN12Adafruit_GFX5writeEh+0x1e>
 80a3b9a:	7a91      	ldrb	r1, [r2, #10]
 80a3b9c:	4299      	cmp	r1, r3
 80a3b9e:	d3c0      	bcc.n	80a3b22 <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
 80a3ba0:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 80a3ba2:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
 80a3ba4:	b2ed      	uxtb	r5, r5
 80a3ba6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
 80a3baa:	78a8      	ldrb	r0, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80a3bac:	b328      	cbz	r0, 80a3bfa <_ZN12Adafruit_GFX5writeEh+0xf6>
 80a3bae:	78e9      	ldrb	r1, [r5, #3]
 80a3bb0:	b319      	cbz	r1, 80a3bfa <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 80a3bb2:	7ee1      	ldrb	r1, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80a3bb4:	7e26      	ldrb	r6, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 80a3bb6:	7e67      	ldrb	r7, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 80a3bb8:	b191      	cbz	r1, 80a3be0 <_ZN12Adafruit_GFX5writeEh+0xdc>
 80a3bba:	f995 1005 	ldrsb.w	r1, [r5, #5]
 80a3bbe:	4408      	add	r0, r1
 80a3bc0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a3bc4:	fb06 1100 	mla	r1, r6, r0, r1
 80a3bc8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80a3bcc:	4281      	cmp	r1, r0
 80a3bce:	dd07      	ble.n	80a3be0 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
 80a3bd0:	2000      	movs	r0, #0
 80a3bd2:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
 80a3bd4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a3bd8:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
 80a3bda:	fb02 1207 	mla	r2, r2, r7, r1
 80a3bde:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 80a3be0:	8ae2      	ldrh	r2, [r4, #22]
 80a3be2:	4620      	mov	r0, r4
 80a3be4:	9201      	str	r2, [sp, #4]
 80a3be6:	8aa2      	ldrh	r2, [r4, #20]
 80a3be8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a3bec:	9200      	str	r2, [sp, #0]
 80a3bee:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a3bf2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a3bf6:	f7ff fe2f 	bl	80a3858 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 80a3bfa:	7929      	ldrb	r1, [r5, #4]
 80a3bfc:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
 80a3bfe:	8a23      	ldrh	r3, [r4, #16]
 80a3c00:	fb01 3302 	mla	r3, r1, r2, r3
 80a3c04:	e7b8      	b.n	80a3b78 <_ZN12Adafruit_GFX5writeEh+0x74>

080a3c06 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
 80a3c06:	2901      	cmp	r1, #1
 80a3c08:	bf38      	it	cc
 80a3c0a:	2101      	movcc	r1, #1
 80a3c0c:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
 80a3c0e:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 80a3c10:	4770      	bx	lr

080a3c12 <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
 80a3c12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3c16:	4604      	mov	r4, r0
 80a3c18:	b08b      	sub	sp, #44	; 0x2c
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
 80a3c1a:	f000 fa35 	bl	80a4088 <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a3c1e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
 80a3c22:	f9b4 503a 	ldrsh.w	r5, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a3c26:	1dda      	adds	r2, r3, #7
 80a3c28:	bf48      	it	mi
 80a3c2a:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
 80a3c2e:	2340      	movs	r3, #64	; 0x40
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a3c30:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
 80a3c34:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
  uint8_t bytes_per_page = WIDTH;
 80a3c38:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
 80a3c3a:	2d00      	cmp	r5, #0
 80a3c3c:	bfb8      	it	lt
 80a3c3e:	3507      	addlt	r5, #7
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
 80a3c40:	45b9      	cmp	r9, r7
 80a3c42:	bf28      	it	cs
 80a3c44:	46b9      	movcs	r9, r7
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};

      digitalWrite(dcPin, LOW);
 80a3c46:	f04f 0b00 	mov.w	fp, #0
  uint8_t dc_byte = 0x40;
 80a3c4a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
 80a3c4e:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 80a3c52:	9303      	str	r3, [sp, #12]
 80a3c54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  uint8_t first_page = window_y1 / 8;
 80a3c56:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
 80a3c5a:	68db      	ldr	r3, [r3, #12]
 80a3c5c:	fb07 9a05 	mla	sl, r7, r5, r9
 80a3c60:	3b01      	subs	r3, #1
 80a3c62:	b29b      	uxth	r3, r3
 80a3c64:	9304      	str	r3, [sp, #16]
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
 80a3c66:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
    bytes_remaining -= (WIDTH - 1) - page_end;
 80a3c6a:	1c7a      	adds	r2, r7, #1
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
 80a3c6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80a3c70:	b2db      	uxtb	r3, r3
    bytes_remaining -= (WIDTH - 1) - page_end;
 80a3c72:	4413      	add	r3, r2
 80a3c74:	9306      	str	r3, [sp, #24]
  for (uint8_t p = first_page; p < pages; p++) {
 80a3c76:	9b03      	ldr	r3, [sp, #12]
 80a3c78:	429d      	cmp	r5, r3
 80a3c7a:	d26a      	bcs.n	80a3d52 <_ZN15Adafruit_SH110X7displayEv+0x140>
    ptr += page_start;
 80a3c7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
 80a3c7e:	8926      	ldrh	r6, [r4, #8]
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 80a3c80:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
 80a3c84:	eb03 080a 	add.w	r8, r3, sl
    bytes_remaining -= (WIDTH - 1) - page_end;
 80a3c88:	9b06      	ldr	r3, [sp, #24]
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 80a3c8a:	444a      	add	r2, r9
    bytes_remaining -= (WIDTH - 1) - page_end;
 80a3c8c:	1b9e      	subs	r6, r3, r6
    if (i2c_dev) { // I2C
 80a3c8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 80a3c90:	1111      	asrs	r1, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
 80a3c92:	eba6 0609 	sub.w	r6, r6, r9
 80a3c96:	f1a5 0050 	sub.w	r0, r5, #80	; 0x50
 80a3c9a:	b2f6      	uxtb	r6, r6
    if (i2c_dev) { // I2C
 80a3c9c:	b2c0      	uxtb	r0, r0
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 80a3c9e:	3110      	adds	r1, #16
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 80a3ca0:	f002 020f 	and.w	r2, r2, #15
    if (i2c_dev) { // I2C
 80a3ca4:	2b00      	cmp	r3, #0
 80a3ca6:	d034      	beq.n	80a3d12 <_ZN15Adafruit_SH110X7displayEv+0x100>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 80a3ca8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80a3cac:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
      i2c_dev->setSpeed(i2c_preclk);
 80a3cb0:	4618      	mov	r0, r3
 80a3cb2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 80a3cb4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      uint8_t cmd[] = {
 80a3cb8:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
 80a3cbc:	f7fe fe29 	bl	80a2912 <_ZN18Adafruit_I2CDevice8setSpeedEm>
      i2c_dev->write(cmd, 4);
 80a3cc0:	2301      	movs	r3, #1
 80a3cc2:	2204      	movs	r2, #4
 80a3cc4:	e9cd bb00 	strd	fp, fp, [sp]
 80a3cc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a3cca:	a909      	add	r1, sp, #36	; 0x24
 80a3ccc:	f7fe fd9c 	bl	80a2808 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
 80a3cd0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80a3cd4:	9305      	str	r3, [sp, #20]
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
 80a3cd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      while (bytes_remaining) {
 80a3cd8:	b1a6      	cbz	r6, 80a3d04 <_ZN15Adafruit_SH110X7displayEv+0xf2>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
 80a3cda:	9a05      	ldr	r2, [sp, #20]
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
 80a3cdc:	2301      	movs	r3, #1
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
 80a3cde:	42b2      	cmp	r2, r6
 80a3ce0:	bf28      	it	cs
 80a3ce2:	4632      	movcs	r2, r6
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
 80a3ce4:	9301      	str	r3, [sp, #4]
 80a3ce6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80a3cea:	4641      	mov	r1, r8
 80a3cec:	9300      	str	r3, [sp, #0]
 80a3cee:	2301      	movs	r3, #1
 80a3cf0:	9207      	str	r2, [sp, #28]
 80a3cf2:	f7fe fd89 	bl	80a2808 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
 80a3cf6:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
 80a3cf8:	1ab6      	subs	r6, r6, r2
        ptr += to_write;
 80a3cfa:	4490      	add	r8, r2
        bytes_remaining -= to_write;
 80a3cfc:	b2f6      	uxtb	r6, r6
 80a3cfe:	f000 f9c3 	bl	80a4088 <os_thread_yield>
#endif // PLATFORM_THREADING
}
 80a3d02:	e7e8      	b.n	80a3cd6 <_ZN15Adafruit_SH110X7displayEv+0xc4>
      i2c_dev->setSpeed(i2c_postclk);
 80a3d04:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80a3d06:	f7fe fe04 	bl	80a2912 <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
 80a3d0a:	3501      	adds	r5, #1
 80a3d0c:	b2ed      	uxtb	r5, r5
 80a3d0e:	44ba      	add	sl, r7
 80a3d10:	e7b1      	b.n	80a3c76 <_ZN15Adafruit_SH110X7displayEv+0x64>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 80a3d12:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
 80a3d16:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
      digitalWrite(dcPin, LOW);
 80a3d1a:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 80a3d1e:	4619      	mov	r1, r3
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 80a3d20:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
 80a3d24:	9305      	str	r3, [sp, #20]
 80a3d26:	f001 fb5c 	bl	80a53e2 <digitalWrite>
      spi_dev->write(cmd, 3);
 80a3d2a:	9b05      	ldr	r3, [sp, #20]
 80a3d2c:	2203      	movs	r2, #3
 80a3d2e:	9300      	str	r3, [sp, #0]
 80a3d30:	a909      	add	r1, sp, #36	; 0x24
 80a3d32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a3d34:	f7fe fcd7 	bl	80a26e6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
 80a3d38:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 80a3d3c:	2101      	movs	r1, #1
 80a3d3e:	f001 fb50 	bl	80a53e2 <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
 80a3d42:	9b05      	ldr	r3, [sp, #20]
 80a3d44:	4632      	mov	r2, r6
 80a3d46:	4641      	mov	r1, r8
 80a3d48:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a3d4a:	9300      	str	r3, [sp, #0]
 80a3d4c:	f7fe fccb 	bl	80a26e6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
 80a3d50:	e7db      	b.n	80a3d0a <_ZN15Adafruit_SH110X7displayEv+0xf8>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
 80a3d52:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 80a3d56:	f04f 33ff 	mov.w	r3, #4294967295
 80a3d5a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
 80a3d5e:	b00b      	add	sp, #44	; 0x2c
 80a3d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a3d64 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
 80a3d64:	b530      	push	{r4, r5, lr}
 80a3d66:	4604      	mov	r4, r0
 80a3d68:	b085      	sub	sp, #20
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
 80a3d6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a3d6c:	9503      	str	r5, [sp, #12]
 80a3d6e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a3d70:	9502      	str	r5, [sp, #8]
 80a3d72:	f99d 5020 	ldrsb.w	r5, [sp, #32]
 80a3d76:	e9cd 3500 	strd	r3, r5, [sp]
 80a3d7a:	4613      	mov	r3, r2
 80a3d7c:	460a      	mov	r2, r1
 80a3d7e:	2101      	movs	r1, #1
 80a3d80:	f7ff fa66 	bl	80a3250 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
 80a3d84:	4b03      	ldr	r3, [pc, #12]	; (80a3d94 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
 80a3d86:	4620      	mov	r0, r4
 80a3d88:	6023      	str	r3, [r4, #0]
 80a3d8a:	2300      	movs	r3, #0
 80a3d8c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80a3d90:	b005      	add	sp, #20
 80a3d92:	bd30      	pop	{r4, r5, pc}
 80a3d94:	080a9f24 	.word	0x080a9f24

080a3d98 <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
 80a3d98:	b510      	push	{r4, lr}
 80a3d9a:	4604      	mov	r4, r0
 80a3d9c:	4b02      	ldr	r3, [pc, #8]	; (80a3da8 <_ZN15Adafruit_SH110XD1Ev+0x10>)
 80a3d9e:	6003      	str	r3, [r0, #0]
 80a3da0:	f7ff fa78 	bl	80a3294 <_ZN17Adafruit_GrayOLEDD1Ev>
 80a3da4:	4620      	mov	r0, r4
 80a3da6:	bd10      	pop	{r4, pc}
 80a3da8:	080a9f24 	.word	0x080a9f24

080a3dac <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
 80a3dac:	b510      	push	{r4, lr}
 80a3dae:	4604      	mov	r4, r0
 80a3db0:	4b02      	ldr	r3, [pc, #8]	; (80a3dbc <_ZN15Adafruit_SH1107D1Ev+0x10>)
 80a3db2:	6003      	str	r3, [r0, #0]
 80a3db4:	f7ff fff0 	bl	80a3d98 <_ZN15Adafruit_SH110XD1Ev>
 80a3db8:	4620      	mov	r0, r4
 80a3dba:	bd10      	pop	{r4, pc}
 80a3dbc:	080aa160 	.word	0x080aa160

080a3dc0 <_ZN15Adafruit_SH1107D0Ev>:
 80a3dc0:	b510      	push	{r4, lr}
 80a3dc2:	4604      	mov	r4, r0
 80a3dc4:	f7ff fff2 	bl	80a3dac <_ZN15Adafruit_SH1107D1Ev>
 80a3dc8:	4620      	mov	r0, r4
 80a3dca:	2158      	movs	r1, #88	; 0x58
 80a3dcc:	f7fc f969 	bl	80a00a2 <_ZdlPvj>
 80a3dd0:	4620      	mov	r0, r4
 80a3dd2:	bd10      	pop	{r4, pc}

080a3dd4 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
 80a3dd4:	b530      	push	{r4, r5, lr}
 80a3dd6:	4604      	mov	r4, r0
 80a3dd8:	b085      	sub	sp, #20
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
 80a3dda:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a3ddc:	9502      	str	r5, [sp, #8]
 80a3dde:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a3de0:	9501      	str	r5, [sp, #4]
 80a3de2:	f99d 5020 	ldrsb.w	r5, [sp, #32]
 80a3de6:	9500      	str	r5, [sp, #0]
 80a3de8:	f7ff ffbc 	bl	80a3d64 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
 80a3dec:	4620      	mov	r0, r4
 80a3dee:	4b02      	ldr	r3, [pc, #8]	; (80a3df8 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
 80a3df0:	6023      	str	r3, [r4, #0]
 80a3df2:	b005      	add	sp, #20
 80a3df4:	bd30      	pop	{r4, r5, pc}
 80a3df6:	bf00      	nop
 80a3df8:	080aa160 	.word	0x080aa160

080a3dfc <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
 80a3dfc:	b530      	push	{r4, r5, lr}
 80a3dfe:	4604      	mov	r4, r0
 80a3e00:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
 80a3e02:	f7ff facb 	bl	80a339c <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
 80a3e06:	212f      	movs	r1, #47	; 0x2f
 80a3e08:	4620      	mov	r0, r4
 80a3e0a:	f7ff fb30 	bl	80a346e <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
 80a3e0e:	68a2      	ldr	r2, [r4, #8]
 80a3e10:	4b2f      	ldr	r3, [pc, #188]	; (80a3ed0 <_ZN15Adafruit_SH11075beginEhb+0xd4>)
 80a3e12:	429a      	cmp	r2, r3
 80a3e14:	d121      	bne.n	80a3e5a <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
 80a3e16:	6823      	ldr	r3, [r4, #0]
 80a3e18:	2101      	movs	r1, #1
 80a3e1a:	4620      	mov	r0, r4
 80a3e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3e1e:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
 80a3e20:	2501      	movs	r5, #1
 80a3e22:	2320      	movs	r3, #32
 80a3e24:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80a3e28:	2373      	movs	r3, #115	; 0x73
 80a3e2a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80a3e2e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80a3e32:	3a20      	subs	r2, #32
 80a3e34:	3973      	subs	r1, #115	; 0x73
 80a3e36:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80a3e3a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80a3e3e:	4620      	mov	r0, r4
 80a3e40:	9300      	str	r3, [sp, #0]
 80a3e42:	f341 014f 	sbfx	r1, r1, #1, #16
 80a3e46:	4b23      	ldr	r3, [pc, #140]	; (80a3ed4 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
 80a3e48:	f342 024f 	sbfx	r2, r2, #1, #16
 80a3e4c:	f7ff fcb4 	bl	80a37b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
 80a3e50:	6823      	ldr	r3, [r4, #0]
 80a3e52:	2100      	movs	r1, #0
 80a3e54:	4620      	mov	r0, r4
 80a3e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3e58:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
 80a3e5a:	68a3      	ldr	r3, [r4, #8]
 80a3e5c:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
 80a3e60:	d117      	bne.n	80a3e92 <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
 80a3e62:	2320      	movs	r3, #32
 80a3e64:	2001      	movs	r0, #1
 80a3e66:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80a3e6a:	2373      	movs	r3, #115	; 0x73
 80a3e6c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80a3e70:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80a3e74:	3a20      	subs	r2, #32
 80a3e76:	3973      	subs	r1, #115	; 0x73
 80a3e78:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80a3e7c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80a3e80:	9300      	str	r3, [sp, #0]
 80a3e82:	4620      	mov	r0, r4
 80a3e84:	4b13      	ldr	r3, [pc, #76]	; (80a3ed4 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
 80a3e86:	f342 024f 	sbfx	r2, r2, #1, #16
 80a3e8a:	f341 014f 	sbfx	r1, r1, #1, #16
 80a3e8e:	f7ff fc93 	bl	80a37b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
 80a3e92:	2216      	movs	r2, #22
 80a3e94:	4620      	mov	r0, r4
 80a3e96:	4910      	ldr	r1, [pc, #64]	; (80a3ed8 <_ZN15Adafruit_SH11075beginEhb+0xdc>)
 80a3e98:	f7ff fa43 	bl	80a3322 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
 80a3e9c:	4605      	mov	r5, r0
 80a3e9e:	b918      	cbnz	r0, 80a3ea8 <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
 80a3ea0:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
 80a3ea2:	4628      	mov	r0, r5
 80a3ea4:	b005      	add	sp, #20
 80a3ea6:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
 80a3ea8:	68a3      	ldr	r3, [r4, #8]
 80a3eaa:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
 80a3eae:	d007      	beq.n	80a3ec0 <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
 80a3eb0:	2064      	movs	r0, #100	; 0x64
 80a3eb2:	f000 fe89 	bl	80a4bc8 <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
 80a3eb6:	21af      	movs	r1, #175	; 0xaf
 80a3eb8:	4620      	mov	r0, r4
 80a3eba:	f7ff fa07 	bl	80a32cc <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
 80a3ebe:	e7f0      	b.n	80a3ea2 <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
 80a3ec0:	2204      	movs	r2, #4
 80a3ec2:	4620      	mov	r0, r4
 80a3ec4:	4905      	ldr	r1, [pc, #20]	; (80a3edc <_ZN15Adafruit_SH11075beginEhb+0xe0>)
 80a3ec6:	f7ff fa2c 	bl	80a3322 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
 80a3eca:	2800      	cmp	r0, #0
 80a3ecc:	d1f0      	bne.n	80a3eb0 <_ZN15Adafruit_SH11075beginEhb+0xb4>
 80a3ece:	e7e7      	b.n	80a3ea0 <_ZN15Adafruit_SH11075beginEhb+0xa4>
 80a3ed0:	00800040 	.word	0x00800040
 80a3ed4:	080a9f78 	.word	0x080a9f78
 80a3ed8:	080aa1b8 	.word	0x080aa1b8
 80a3edc:	080aa1b4 	.word	0x080aa1b4

080a3ee0 <_ZN19Adafruit_EEPROM_I2CC1Ev>:
/**************************************************************************/
/*!
    Constructor
*/
/**************************************************************************/
Adafruit_EEPROM_I2C::Adafruit_EEPROM_I2C(void) {}
 80a3ee0:	2200      	movs	r2, #0
 80a3ee2:	6002      	str	r2, [r0, #0]
 80a3ee4:	7102      	strb	r2, [r0, #4]
 80a3ee6:	4770      	bx	lr

080a3ee8 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>:
 *            The I2C address to be used.
 *    @param  theWire
 *            The Wire object to be used for I2C connections.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
 80a3ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3eea:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 80a3eec:	2010      	movs	r0, #16
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
 80a3eee:	460e      	mov	r6, r1
 80a3ef0:	4617      	mov	r7, r2
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 80a3ef2:	f7fc f8d2 	bl	80a009a <_Znwj>
 80a3ef6:	4604      	mov	r4, r0
 80a3ef8:	b118      	cbz	r0, 80a3f02 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire+0x1a>
 80a3efa:	463a      	mov	r2, r7
 80a3efc:	4631      	mov	r1, r6
 80a3efe:	f7fe fc58 	bl	80a27b2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  _addr = addr;

  return i2c_dev->begin();
 80a3f02:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 80a3f04:	602c      	str	r4, [r5, #0]
  _addr = addr;
 80a3f06:	712e      	strb	r6, [r5, #4]
  return i2c_dev->begin();
 80a3f08:	2101      	movs	r1, #1
}
 80a3f0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return i2c_dev->begin();
 80a3f0e:	f7fe bc6c 	b.w	80a27ea <_ZN18Adafruit_I2CDevice5beginEb>

080a3f12 <_ZN19Adafruit_EEPROM_I2C5writeEth>:
    @param[in] value
                The 8-bit value to write at addr
    @returns True on I2C command success, false on timeout or I2C failure
*/
/**************************************************************************/
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
 80a3f12:	b530      	push	{r4, r5, lr}
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
 80a3f14:	0a0b      	lsrs	r3, r1, #8
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
 80a3f16:	b085      	sub	sp, #20
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
 80a3f18:	f88d 300c 	strb.w	r3, [sp, #12]

  if (!i2c_dev->write(buff, 3))
 80a3f1c:	2300      	movs	r3, #0
 80a3f1e:	e9cd 3300 	strd	r3, r3, [sp]
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
 80a3f22:	4605      	mov	r5, r0
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
 80a3f24:	f88d 100d 	strb.w	r1, [sp, #13]
 80a3f28:	f88d 200e 	strb.w	r2, [sp, #14]
  if (!i2c_dev->write(buff, 3))
 80a3f2c:	2301      	movs	r3, #1
 80a3f2e:	2203      	movs	r2, #3
 80a3f30:	6800      	ldr	r0, [r0, #0]
 80a3f32:	a903      	add	r1, sp, #12
 80a3f34:	f7fe fc68 	bl	80a2808 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 80a3f38:	b160      	cbz	r0, 80a3f54 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x42>
 80a3f3a:	2465      	movs	r4, #101	; 0x65
    return false;

  // Wait until it acks!
  uint8_t timeout = 100;
  while (timeout--) {
 80a3f3c:	3c01      	subs	r4, #1
 80a3f3e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a3f42:	d007      	beq.n	80a3f54 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x42>
    if (i2c_dev->detected())
 80a3f44:	6828      	ldr	r0, [r5, #0]
 80a3f46:	f7fe fc3b 	bl	80a27c0 <_ZN18Adafruit_I2CDevice8detectedEv>
 80a3f4a:	b920      	cbnz	r0, 80a3f56 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x44>
      return true;
    delay(1);
 80a3f4c:	2001      	movs	r0, #1
 80a3f4e:	f000 fe3b 	bl	80a4bc8 <delay>
  while (timeout--) {
 80a3f52:	e7f3      	b.n	80a3f3c <_ZN19Adafruit_EEPROM_I2C5writeEth+0x2a>
    return false;
 80a3f54:	2000      	movs	r0, #0
  }

  // timed out :(
  return false;
}
 80a3f56:	b005      	add	sp, #20
 80a3f58:	bd30      	pop	{r4, r5, pc}

080a3f5a <_ZN19Adafruit_EEPROM_I2C4readEt>:
    @param addr
                The 16-bit address to read from in EEPROM memory
    @returns    The 8-bit value retrieved at addr
*/
/**************************************************************************/
uint8_t Adafruit_EEPROM_I2C::read(uint16_t addr) {
 80a3f5a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
 80a3f5c:	0a0b      	lsrs	r3, r1, #8

  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
 80a3f5e:	2200      	movs	r2, #0
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
 80a3f60:	f88d 300c 	strb.w	r3, [sp, #12]
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
 80a3f64:	2301      	movs	r3, #1
 80a3f66:	e9cd 3200 	strd	r3, r2, [sp]
 80a3f6a:	ab03      	add	r3, sp, #12
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
 80a3f6c:	f88d 100d 	strb.w	r1, [sp, #13]
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
 80a3f70:	2202      	movs	r2, #2
 80a3f72:	4619      	mov	r1, r3
 80a3f74:	6800      	ldr	r0, [r0, #0]
 80a3f76:	f7fe fcb5 	bl	80a28e4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 80a3f7a:	b108      	cbz	r0, 80a3f80 <_ZN19Adafruit_EEPROM_I2C4readEt+0x26>
    return 0x0;

  return buff[0];
 80a3f7c:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
 80a3f80:	b005      	add	sp, #20
 80a3f82:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3f88 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a3f88:	b508      	push	{r3, lr}
 80a3f8a:	4b02      	ldr	r3, [pc, #8]	; (80a3f94 <HAL_Validate_Pin_Function+0xc>)
 80a3f8c:	681b      	ldr	r3, [r3, #0]
 80a3f8e:	685b      	ldr	r3, [r3, #4]
 80a3f90:	9301      	str	r3, [sp, #4]
 80a3f92:	bd08      	pop	{r3, pc}
 80a3f94:	080601b0 	.word	0x080601b0

080a3f98 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a3f98:	b508      	push	{r3, lr}
 80a3f9a:	4b02      	ldr	r3, [pc, #8]	; (80a3fa4 <HAL_Pin_Mode+0xc>)
 80a3f9c:	681b      	ldr	r3, [r3, #0]
 80a3f9e:	689b      	ldr	r3, [r3, #8]
 80a3fa0:	9301      	str	r3, [sp, #4]
 80a3fa2:	bd08      	pop	{r3, pc}
 80a3fa4:	080601b0 	.word	0x080601b0

080a3fa8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3fa8:	b508      	push	{r3, lr}
 80a3faa:	4b02      	ldr	r3, [pc, #8]	; (80a3fb4 <HAL_Get_Pin_Mode+0xc>)
 80a3fac:	681b      	ldr	r3, [r3, #0]
 80a3fae:	68db      	ldr	r3, [r3, #12]
 80a3fb0:	9301      	str	r3, [sp, #4]
 80a3fb2:	bd08      	pop	{r3, pc}
 80a3fb4:	080601b0 	.word	0x080601b0

080a3fb8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a3fb8:	b508      	push	{r3, lr}
 80a3fba:	4b02      	ldr	r3, [pc, #8]	; (80a3fc4 <HAL_GPIO_Write+0xc>)
 80a3fbc:	681b      	ldr	r3, [r3, #0]
 80a3fbe:	691b      	ldr	r3, [r3, #16]
 80a3fc0:	9301      	str	r3, [sp, #4]
 80a3fc2:	bd08      	pop	{r3, pc}
 80a3fc4:	080601b0 	.word	0x080601b0

080a3fc8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a3fc8:	b508      	push	{r3, lr}
 80a3fca:	4b02      	ldr	r3, [pc, #8]	; (80a3fd4 <HAL_GPIO_Read+0xc>)
 80a3fcc:	681b      	ldr	r3, [r3, #0]
 80a3fce:	695b      	ldr	r3, [r3, #20]
 80a3fd0:	9301      	str	r3, [sp, #4]
 80a3fd2:	bd08      	pop	{r3, pc}
 80a3fd4:	080601b0 	.word	0x080601b0

080a3fd8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a3fd8:	b508      	push	{r3, lr}
 80a3fda:	4b02      	ldr	r3, [pc, #8]	; (80a3fe4 <HAL_Interrupts_Attach+0xc>)
 80a3fdc:	681b      	ldr	r3, [r3, #0]
 80a3fde:	699b      	ldr	r3, [r3, #24]
 80a3fe0:	9301      	str	r3, [sp, #4]
 80a3fe2:	bd08      	pop	{r3, pc}
 80a3fe4:	080601b0 	.word	0x080601b0

080a3fe8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80a3fe8:	b508      	push	{r3, lr}
 80a3fea:	4b02      	ldr	r3, [pc, #8]	; (80a3ff4 <HAL_Interrupts_Detach+0xc>)
 80a3fec:	681b      	ldr	r3, [r3, #0]
 80a3fee:	69db      	ldr	r3, [r3, #28]
 80a3ff0:	9301      	str	r3, [sp, #4]
 80a3ff2:	bd08      	pop	{r3, pc}
 80a3ff4:	080601b0 	.word	0x080601b0

080a3ff8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a3ff8:	b508      	push	{r3, lr}
 80a3ffa:	4b02      	ldr	r3, [pc, #8]	; (80a4004 <hal_adc_read+0xc>)
 80a3ffc:	681b      	ldr	r3, [r3, #0]
 80a3ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a4000:	9301      	str	r3, [sp, #4]
 80a4002:	bd08      	pop	{r3, pc}
 80a4004:	080601b0 	.word	0x080601b0

080a4008 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a4008:	b508      	push	{r3, lr}
 80a400a:	4b02      	ldr	r3, [pc, #8]	; (80a4014 <HAL_RNG_GetRandomNumber+0xc>)
 80a400c:	681b      	ldr	r3, [r3, #0]
 80a400e:	685b      	ldr	r3, [r3, #4]
 80a4010:	9301      	str	r3, [sp, #4]
 80a4012:	bd08      	pop	{r3, pc}
 80a4014:	0806019c 	.word	0x0806019c

080a4018 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a4018:	b508      	push	{r3, lr}
 80a401a:	4b02      	ldr	r3, [pc, #8]	; (80a4024 <HAL_Delay_Microseconds+0xc>)
 80a401c:	681b      	ldr	r3, [r3, #0]
 80a401e:	68db      	ldr	r3, [r3, #12]
 80a4020:	9301      	str	r3, [sp, #4]
 80a4022:	bd08      	pop	{r3, pc}
 80a4024:	0806019c 	.word	0x0806019c

080a4028 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a4028:	b508      	push	{r3, lr}
 80a402a:	4b02      	ldr	r3, [pc, #8]	; (80a4034 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a402c:	681b      	ldr	r3, [r3, #0]
 80a402e:	695b      	ldr	r3, [r3, #20]
 80a4030:	9301      	str	r3, [sp, #4]
 80a4032:	bd08      	pop	{r3, pc}
 80a4034:	0806019c 	.word	0x0806019c

080a4038 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a4038:	b508      	push	{r3, lr}
 80a403a:	4b02      	ldr	r3, [pc, #8]	; (80a4044 <HAL_EEPROM_Init+0xc>)
 80a403c:	681b      	ldr	r3, [r3, #0]
 80a403e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a4040:	9301      	str	r3, [sp, #4]
 80a4042:	bd08      	pop	{r3, pc}
 80a4044:	0806019c 	.word	0x0806019c

080a4048 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a4048:	b508      	push	{r3, lr}
 80a404a:	4b02      	ldr	r3, [pc, #8]	; (80a4054 <HAL_EEPROM_Get+0xc>)
 80a404c:	681b      	ldr	r3, [r3, #0]
 80a404e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a4050:	9301      	str	r3, [sp, #4]
 80a4052:	bd08      	pop	{r3, pc}
 80a4054:	0806019c 	.word	0x0806019c

080a4058 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a4058:	b508      	push	{r3, lr}
 80a405a:	4b02      	ldr	r3, [pc, #8]	; (80a4064 <HAL_EEPROM_Put+0xc>)
 80a405c:	681b      	ldr	r3, [r3, #0]
 80a405e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a4060:	9301      	str	r3, [sp, #4]
 80a4062:	bd08      	pop	{r3, pc}
 80a4064:	0806019c 	.word	0x0806019c

080a4068 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a4068:	b508      	push	{r3, lr}
 80a406a:	4b02      	ldr	r3, [pc, #8]	; (80a4074 <hal_rtc_time_is_valid+0xc>)
 80a406c:	681b      	ldr	r3, [r3, #0]
 80a406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a4070:	9301      	str	r3, [sp, #4]
 80a4072:	bd08      	pop	{r3, pc}
 80a4074:	0806019c 	.word	0x0806019c

080a4078 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a4078:	b508      	push	{r3, lr}
 80a407a:	4b02      	ldr	r3, [pc, #8]	; (80a4084 <hal_rtc_get_time+0xc>)
 80a407c:	681b      	ldr	r3, [r3, #0]
 80a407e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a4080:	9301      	str	r3, [sp, #4]
 80a4082:	bd08      	pop	{r3, pc}
 80a4084:	0806019c 	.word	0x0806019c

080a4088 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80a4088:	b508      	push	{r3, lr}
 80a408a:	4b02      	ldr	r3, [pc, #8]	; (80a4094 <os_thread_yield+0xc>)
 80a408c:	681b      	ldr	r3, [r3, #0]
 80a408e:	68db      	ldr	r3, [r3, #12]
 80a4090:	9301      	str	r3, [sp, #4]
 80a4092:	bd08      	pop	{r3, pc}
 80a4094:	080601d0 	.word	0x080601d0

080a4098 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a4098:	b508      	push	{r3, lr}
 80a409a:	4b02      	ldr	r3, [pc, #8]	; (80a40a4 <os_mutex_recursive_create+0xc>)
 80a409c:	681b      	ldr	r3, [r3, #0]
 80a409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a40a0:	9301      	str	r3, [sp, #4]
 80a40a2:	bd08      	pop	{r3, pc}
 80a40a4:	080601d0 	.word	0x080601d0

080a40a8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a40a8:	b508      	push	{r3, lr}
 80a40aa:	4b02      	ldr	r3, [pc, #8]	; (80a40b4 <os_mutex_recursive_destroy+0xc>)
 80a40ac:	681b      	ldr	r3, [r3, #0]
 80a40ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a40b0:	9301      	str	r3, [sp, #4]
 80a40b2:	bd08      	pop	{r3, pc}
 80a40b4:	080601d0 	.word	0x080601d0

080a40b8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a40b8:	b508      	push	{r3, lr}
 80a40ba:	4b02      	ldr	r3, [pc, #8]	; (80a40c4 <os_mutex_recursive_lock+0xc>)
 80a40bc:	681b      	ldr	r3, [r3, #0]
 80a40be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a40c0:	9301      	str	r3, [sp, #4]
 80a40c2:	bd08      	pop	{r3, pc}
 80a40c4:	080601d0 	.word	0x080601d0

080a40c8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a40c8:	b508      	push	{r3, lr}
 80a40ca:	4b02      	ldr	r3, [pc, #8]	; (80a40d4 <os_mutex_recursive_unlock+0xc>)
 80a40cc:	681b      	ldr	r3, [r3, #0]
 80a40ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a40d0:	9301      	str	r3, [sp, #4]
 80a40d2:	bd08      	pop	{r3, pc}
 80a40d4:	080601d0 	.word	0x080601d0

080a40d8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a40d8:	b508      	push	{r3, lr}
 80a40da:	4b02      	ldr	r3, [pc, #8]	; (80a40e4 <hal_usart_write+0xc>)
 80a40dc:	681b      	ldr	r3, [r3, #0]
 80a40de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a40e0:	9301      	str	r3, [sp, #4]
 80a40e2:	bd08      	pop	{r3, pc}
 80a40e4:	080601c4 	.word	0x080601c4

080a40e8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a40e8:	b508      	push	{r3, lr}
 80a40ea:	4b02      	ldr	r3, [pc, #8]	; (80a40f4 <hal_usart_available+0xc>)
 80a40ec:	681b      	ldr	r3, [r3, #0]
 80a40ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a40f0:	9301      	str	r3, [sp, #4]
 80a40f2:	bd08      	pop	{r3, pc}
 80a40f4:	080601c4 	.word	0x080601c4

080a40f8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a40f8:	b508      	push	{r3, lr}
 80a40fa:	4b02      	ldr	r3, [pc, #8]	; (80a4104 <hal_usart_read+0xc>)
 80a40fc:	681b      	ldr	r3, [r3, #0]
 80a40fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a4100:	9301      	str	r3, [sp, #4]
 80a4102:	bd08      	pop	{r3, pc}
 80a4104:	080601c4 	.word	0x080601c4

080a4108 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a4108:	b508      	push	{r3, lr}
 80a410a:	4b02      	ldr	r3, [pc, #8]	; (80a4114 <hal_usart_peek+0xc>)
 80a410c:	681b      	ldr	r3, [r3, #0]
 80a410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a4110:	9301      	str	r3, [sp, #4]
 80a4112:	bd08      	pop	{r3, pc}
 80a4114:	080601c4 	.word	0x080601c4

080a4118 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a4118:	b508      	push	{r3, lr}
 80a411a:	4b02      	ldr	r3, [pc, #8]	; (80a4124 <hal_usart_flush+0xc>)
 80a411c:	681b      	ldr	r3, [r3, #0]
 80a411e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a4120:	9301      	str	r3, [sp, #4]
 80a4122:	bd08      	pop	{r3, pc}
 80a4124:	080601c4 	.word	0x080601c4

080a4128 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a4128:	b508      	push	{r3, lr}
 80a412a:	4b02      	ldr	r3, [pc, #8]	; (80a4134 <hal_usart_is_enabled+0xc>)
 80a412c:	681b      	ldr	r3, [r3, #0]
 80a412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a4130:	9301      	str	r3, [sp, #4]
 80a4132:	bd08      	pop	{r3, pc}
 80a4134:	080601c4 	.word	0x080601c4

080a4138 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a4138:	b508      	push	{r3, lr}
 80a413a:	4b02      	ldr	r3, [pc, #8]	; (80a4144 <hal_usart_available_data_for_write+0xc>)
 80a413c:	681b      	ldr	r3, [r3, #0]
 80a413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a4140:	9301      	str	r3, [sp, #4]
 80a4142:	bd08      	pop	{r3, pc}
 80a4144:	080601c4 	.word	0x080601c4

080a4148 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a4148:	b508      	push	{r3, lr}
 80a414a:	4b02      	ldr	r3, [pc, #8]	; (80a4154 <hal_usart_init_ex+0xc>)
 80a414c:	681b      	ldr	r3, [r3, #0]
 80a414e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a4150:	9301      	str	r3, [sp, #4]
 80a4152:	bd08      	pop	{r3, pc}
 80a4154:	080601c4 	.word	0x080601c4

080a4158 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a4158:	b508      	push	{r3, lr}
 80a415a:	4b02      	ldr	r3, [pc, #8]	; (80a4164 <hal_i2c_set_speed+0xc>)
 80a415c:	681b      	ldr	r3, [r3, #0]
 80a415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a4160:	9301      	str	r3, [sp, #4]
 80a4162:	bd08      	pop	{r3, pc}
 80a4164:	080601ac 	.word	0x080601ac

080a4168 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a4168:	b508      	push	{r3, lr}
 80a416a:	4b02      	ldr	r3, [pc, #8]	; (80a4174 <hal_i2c_begin+0xc>)
 80a416c:	681b      	ldr	r3, [r3, #0]
 80a416e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a4170:	9301      	str	r3, [sp, #4]
 80a4172:	bd08      	pop	{r3, pc}
 80a4174:	080601ac 	.word	0x080601ac

080a4178 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a4178:	b508      	push	{r3, lr}
 80a417a:	4b02      	ldr	r3, [pc, #8]	; (80a4184 <hal_i2c_begin_transmission+0xc>)
 80a417c:	681b      	ldr	r3, [r3, #0]
 80a417e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a4180:	9301      	str	r3, [sp, #4]
 80a4182:	bd08      	pop	{r3, pc}
 80a4184:	080601ac 	.word	0x080601ac

080a4188 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a4188:	b508      	push	{r3, lr}
 80a418a:	4b02      	ldr	r3, [pc, #8]	; (80a4194 <hal_i2c_end_transmission+0xc>)
 80a418c:	681b      	ldr	r3, [r3, #0]
 80a418e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a4190:	9301      	str	r3, [sp, #4]
 80a4192:	bd08      	pop	{r3, pc}
 80a4194:	080601ac 	.word	0x080601ac

080a4198 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a4198:	b508      	push	{r3, lr}
 80a419a:	4b02      	ldr	r3, [pc, #8]	; (80a41a4 <hal_i2c_write+0xc>)
 80a419c:	681b      	ldr	r3, [r3, #0]
 80a419e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a41a0:	9301      	str	r3, [sp, #4]
 80a41a2:	bd08      	pop	{r3, pc}
 80a41a4:	080601ac 	.word	0x080601ac

080a41a8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a41a8:	b508      	push	{r3, lr}
 80a41aa:	4b02      	ldr	r3, [pc, #8]	; (80a41b4 <hal_i2c_available+0xc>)
 80a41ac:	681b      	ldr	r3, [r3, #0]
 80a41ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a41b0:	9301      	str	r3, [sp, #4]
 80a41b2:	bd08      	pop	{r3, pc}
 80a41b4:	080601ac 	.word	0x080601ac

080a41b8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a41b8:	b508      	push	{r3, lr}
 80a41ba:	4b02      	ldr	r3, [pc, #8]	; (80a41c4 <hal_i2c_read+0xc>)
 80a41bc:	681b      	ldr	r3, [r3, #0]
 80a41be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a41c0:	9301      	str	r3, [sp, #4]
 80a41c2:	bd08      	pop	{r3, pc}
 80a41c4:	080601ac 	.word	0x080601ac

080a41c8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a41c8:	b508      	push	{r3, lr}
 80a41ca:	4b02      	ldr	r3, [pc, #8]	; (80a41d4 <hal_i2c_peek+0xc>)
 80a41cc:	681b      	ldr	r3, [r3, #0]
 80a41ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a41d0:	9301      	str	r3, [sp, #4]
 80a41d2:	bd08      	pop	{r3, pc}
 80a41d4:	080601ac 	.word	0x080601ac

080a41d8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a41d8:	b508      	push	{r3, lr}
 80a41da:	4b02      	ldr	r3, [pc, #8]	; (80a41e4 <hal_i2c_flush+0xc>)
 80a41dc:	681b      	ldr	r3, [r3, #0]
 80a41de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a41e0:	9301      	str	r3, [sp, #4]
 80a41e2:	bd08      	pop	{r3, pc}
 80a41e4:	080601ac 	.word	0x080601ac

080a41e8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a41e8:	b508      	push	{r3, lr}
 80a41ea:	4b02      	ldr	r3, [pc, #8]	; (80a41f4 <hal_i2c_is_enabled+0xc>)
 80a41ec:	681b      	ldr	r3, [r3, #0]
 80a41ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a41f0:	9301      	str	r3, [sp, #4]
 80a41f2:	bd08      	pop	{r3, pc}
 80a41f4:	080601ac 	.word	0x080601ac

080a41f8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a41f8:	b508      	push	{r3, lr}
 80a41fa:	4b03      	ldr	r3, [pc, #12]	; (80a4208 <hal_i2c_init+0x10>)
 80a41fc:	681b      	ldr	r3, [r3, #0]
 80a41fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a4202:	9301      	str	r3, [sp, #4]
 80a4204:	bd08      	pop	{r3, pc}
 80a4206:	0000      	.short	0x0000
 80a4208:	080601ac 	.word	0x080601ac

080a420c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a420c:	b508      	push	{r3, lr}
 80a420e:	4b03      	ldr	r3, [pc, #12]	; (80a421c <hal_i2c_request_ex+0x10>)
 80a4210:	681b      	ldr	r3, [r3, #0]
 80a4212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a4216:	9301      	str	r3, [sp, #4]
 80a4218:	bd08      	pop	{r3, pc}
 80a421a:	0000      	.short	0x0000
 80a421c:	080601ac 	.word	0x080601ac

080a4220 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a4220:	b508      	push	{r3, lr}
 80a4222:	4b02      	ldr	r3, [pc, #8]	; (80a422c <hal_spi_begin+0xc>)
 80a4224:	681b      	ldr	r3, [r3, #0]
 80a4226:	681b      	ldr	r3, [r3, #0]
 80a4228:	9301      	str	r3, [sp, #4]
 80a422a:	bd08      	pop	{r3, pc}
 80a422c:	080601b4 	.word	0x080601b4

080a4230 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a4230:	b508      	push	{r3, lr}
 80a4232:	4b02      	ldr	r3, [pc, #8]	; (80a423c <hal_spi_transfer+0xc>)
 80a4234:	681b      	ldr	r3, [r3, #0]
 80a4236:	695b      	ldr	r3, [r3, #20]
 80a4238:	9301      	str	r3, [sp, #4]
 80a423a:	bd08      	pop	{r3, pc}
 80a423c:	080601b4 	.word	0x080601b4

080a4240 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a4240:	b508      	push	{r3, lr}
 80a4242:	4b02      	ldr	r3, [pc, #8]	; (80a424c <hal_spi_init+0xc>)
 80a4244:	681b      	ldr	r3, [r3, #0]
 80a4246:	69db      	ldr	r3, [r3, #28]
 80a4248:	9301      	str	r3, [sp, #4]
 80a424a:	bd08      	pop	{r3, pc}
 80a424c:	080601b4 	.word	0x080601b4

080a4250 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a4250:	b508      	push	{r3, lr}
 80a4252:	4b02      	ldr	r3, [pc, #8]	; (80a425c <hal_spi_is_enabled+0xc>)
 80a4254:	681b      	ldr	r3, [r3, #0]
 80a4256:	6a1b      	ldr	r3, [r3, #32]
 80a4258:	9301      	str	r3, [sp, #4]
 80a425a:	bd08      	pop	{r3, pc}
 80a425c:	080601b4 	.word	0x080601b4

080a4260 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 80a4260:	b508      	push	{r3, lr}
 80a4262:	4b02      	ldr	r3, [pc, #8]	; (80a426c <hal_spi_info+0xc>)
 80a4264:	681b      	ldr	r3, [r3, #0]
 80a4266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a4268:	9301      	str	r3, [sp, #4]
 80a426a:	bd08      	pop	{r3, pc}
 80a426c:	080601b4 	.word	0x080601b4

080a4270 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 80a4270:	b508      	push	{r3, lr}
 80a4272:	4b02      	ldr	r3, [pc, #8]	; (80a427c <hal_spi_transfer_dma+0xc>)
 80a4274:	681b      	ldr	r3, [r3, #0]
 80a4276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a4278:	9301      	str	r3, [sp, #4]
 80a427a:	bd08      	pop	{r3, pc}
 80a427c:	080601b4 	.word	0x080601b4

080a4280 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 80a4280:	b508      	push	{r3, lr}
 80a4282:	4b02      	ldr	r3, [pc, #8]	; (80a428c <hal_spi_transfer_dma_status+0xc>)
 80a4284:	681b      	ldr	r3, [r3, #0]
 80a4286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a4288:	9301      	str	r3, [sp, #4]
 80a428a:	bd08      	pop	{r3, pc}
 80a428c:	080601b4 	.word	0x080601b4

080a4290 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a4290:	b508      	push	{r3, lr}
 80a4292:	4b02      	ldr	r3, [pc, #8]	; (80a429c <hal_spi_set_settings+0xc>)
 80a4294:	681b      	ldr	r3, [r3, #0]
 80a4296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a4298:	9301      	str	r3, [sp, #4]
 80a429a:	bd08      	pop	{r3, pc}
 80a429c:	080601b4 	.word	0x080601b4

080a42a0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a42a0:	b508      	push	{r3, lr}
 80a42a2:	4b02      	ldr	r3, [pc, #8]	; (80a42ac <HAL_USB_USART_Init+0xc>)
 80a42a4:	681b      	ldr	r3, [r3, #0]
 80a42a6:	681b      	ldr	r3, [r3, #0]
 80a42a8:	9301      	str	r3, [sp, #4]
 80a42aa:	bd08      	pop	{r3, pc}
 80a42ac:	080601d8 	.word	0x080601d8

080a42b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a42b0:	b508      	push	{r3, lr}
 80a42b2:	4b02      	ldr	r3, [pc, #8]	; (80a42bc <HAL_USB_USART_Begin+0xc>)
 80a42b4:	681b      	ldr	r3, [r3, #0]
 80a42b6:	685b      	ldr	r3, [r3, #4]
 80a42b8:	9301      	str	r3, [sp, #4]
 80a42ba:	bd08      	pop	{r3, pc}
 80a42bc:	080601d8 	.word	0x080601d8

080a42c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a42c0:	b508      	push	{r3, lr}
 80a42c2:	4b02      	ldr	r3, [pc, #8]	; (80a42cc <HAL_USB_USART_Available_Data+0xc>)
 80a42c4:	681b      	ldr	r3, [r3, #0]
 80a42c6:	691b      	ldr	r3, [r3, #16]
 80a42c8:	9301      	str	r3, [sp, #4]
 80a42ca:	bd08      	pop	{r3, pc}
 80a42cc:	080601d8 	.word	0x080601d8

080a42d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a42d0:	b508      	push	{r3, lr}
 80a42d2:	4b02      	ldr	r3, [pc, #8]	; (80a42dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a42d4:	681b      	ldr	r3, [r3, #0]
 80a42d6:	695b      	ldr	r3, [r3, #20]
 80a42d8:	9301      	str	r3, [sp, #4]
 80a42da:	bd08      	pop	{r3, pc}
 80a42dc:	080601d8 	.word	0x080601d8

080a42e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a42e0:	b508      	push	{r3, lr}
 80a42e2:	4b02      	ldr	r3, [pc, #8]	; (80a42ec <HAL_USB_USART_Receive_Data+0xc>)
 80a42e4:	681b      	ldr	r3, [r3, #0]
 80a42e6:	699b      	ldr	r3, [r3, #24]
 80a42e8:	9301      	str	r3, [sp, #4]
 80a42ea:	bd08      	pop	{r3, pc}
 80a42ec:	080601d8 	.word	0x080601d8

080a42f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a42f0:	b508      	push	{r3, lr}
 80a42f2:	4b02      	ldr	r3, [pc, #8]	; (80a42fc <HAL_USB_USART_Send_Data+0xc>)
 80a42f4:	681b      	ldr	r3, [r3, #0]
 80a42f6:	69db      	ldr	r3, [r3, #28]
 80a42f8:	9301      	str	r3, [sp, #4]
 80a42fa:	bd08      	pop	{r3, pc}
 80a42fc:	080601d8 	.word	0x080601d8

080a4300 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a4300:	b508      	push	{r3, lr}
 80a4302:	4b02      	ldr	r3, [pc, #8]	; (80a430c <HAL_USB_USART_Flush_Data+0xc>)
 80a4304:	681b      	ldr	r3, [r3, #0]
 80a4306:	6a1b      	ldr	r3, [r3, #32]
 80a4308:	9301      	str	r3, [sp, #4]
 80a430a:	bd08      	pop	{r3, pc}
 80a430c:	080601d8 	.word	0x080601d8

080a4310 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a4310:	b508      	push	{r3, lr}
 80a4312:	4b02      	ldr	r3, [pc, #8]	; (80a431c <HAL_USB_USART_Is_Enabled+0xc>)
 80a4314:	681b      	ldr	r3, [r3, #0]
 80a4316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a4318:	9301      	str	r3, [sp, #4]
 80a431a:	bd08      	pop	{r3, pc}
 80a431c:	080601d8 	.word	0x080601d8

080a4320 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a4320:	b508      	push	{r3, lr}
 80a4322:	4b02      	ldr	r3, [pc, #8]	; (80a432c <inet_gethostbyname+0xc>)
 80a4324:	681b      	ldr	r3, [r3, #0]
 80a4326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a4328:	9301      	str	r3, [sp, #4]
 80a432a:	bd08      	pop	{r3, pc}
 80a432c:	080601c0 	.word	0x080601c0

080a4330 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a4330:	b508      	push	{r3, lr}
 80a4332:	4b02      	ldr	r3, [pc, #8]	; (80a433c <panic_+0xc>)
 80a4334:	681b      	ldr	r3, [r3, #0]
 80a4336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a4338:	9301      	str	r3, [sp, #4]
 80a433a:	bd08      	pop	{r3, pc}
 80a433c:	080201a8 	.word	0x080201a8

080a4340 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a4340:	b508      	push	{r3, lr}
 80a4342:	4b02      	ldr	r3, [pc, #8]	; (80a434c <system_mode+0xc>)
 80a4344:	681b      	ldr	r3, [r3, #0]
 80a4346:	681b      	ldr	r3, [r3, #0]
 80a4348:	9301      	str	r3, [sp, #4]
 80a434a:	bd08      	pop	{r3, pc}
 80a434c:	080601a4 	.word	0x080601a4

080a4350 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a4350:	b508      	push	{r3, lr}
 80a4352:	4b02      	ldr	r3, [pc, #8]	; (80a435c <set_system_mode+0xc>)
 80a4354:	681b      	ldr	r3, [r3, #0]
 80a4356:	685b      	ldr	r3, [r3, #4]
 80a4358:	9301      	str	r3, [sp, #4]
 80a435a:	bd08      	pop	{r3, pc}
 80a435c:	080601a4 	.word	0x080601a4

080a4360 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a4360:	b508      	push	{r3, lr}
 80a4362:	4b02      	ldr	r3, [pc, #8]	; (80a436c <system_delay_ms+0xc>)
 80a4364:	681b      	ldr	r3, [r3, #0]
 80a4366:	695b      	ldr	r3, [r3, #20]
 80a4368:	9301      	str	r3, [sp, #4]
 80a436a:	bd08      	pop	{r3, pc}
 80a436c:	080601a4 	.word	0x080601a4

080a4370 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a4370:	b508      	push	{r3, lr}
 80a4372:	4b02      	ldr	r3, [pc, #8]	; (80a437c <system_thread_get_state+0xc>)
 80a4374:	681b      	ldr	r3, [r3, #0]
 80a4376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a4378:	9301      	str	r3, [sp, #4]
 80a437a:	bd08      	pop	{r3, pc}
 80a437c:	080601a4 	.word	0x080601a4

080a4380 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a4380:	b508      	push	{r3, lr}
 80a4382:	4b03      	ldr	r3, [pc, #12]	; (80a4390 <system_ctrl_set_app_request_handler+0x10>)
 80a4384:	681b      	ldr	r3, [r3, #0]
 80a4386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a438a:	9301      	str	r3, [sp, #4]
 80a438c:	bd08      	pop	{r3, pc}
 80a438e:	0000      	.short	0x0000
 80a4390:	080601a4 	.word	0x080601a4

080a4394 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a4394:	b508      	push	{r3, lr}
 80a4396:	4b03      	ldr	r3, [pc, #12]	; (80a43a4 <system_ctrl_set_result+0x10>)
 80a4398:	681b      	ldr	r3, [r3, #0]
 80a439a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a439e:	9301      	str	r3, [sp, #4]
 80a43a0:	bd08      	pop	{r3, pc}
 80a43a2:	0000      	.short	0x0000
 80a43a4:	080601a4 	.word	0x080601a4

080a43a8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a43a8:	b508      	push	{r3, lr}
 80a43aa:	4b02      	ldr	r3, [pc, #8]	; (80a43b4 <network_connect+0xc>)
 80a43ac:	681b      	ldr	r3, [r3, #0]
 80a43ae:	685b      	ldr	r3, [r3, #4]
 80a43b0:	9301      	str	r3, [sp, #4]
 80a43b2:	bd08      	pop	{r3, pc}
 80a43b4:	080601c8 	.word	0x080601c8

080a43b8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a43b8:	b508      	push	{r3, lr}
 80a43ba:	4b02      	ldr	r3, [pc, #8]	; (80a43c4 <network_connecting+0xc>)
 80a43bc:	681b      	ldr	r3, [r3, #0]
 80a43be:	689b      	ldr	r3, [r3, #8]
 80a43c0:	9301      	str	r3, [sp, #4]
 80a43c2:	bd08      	pop	{r3, pc}
 80a43c4:	080601c8 	.word	0x080601c8

080a43c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a43c8:	b508      	push	{r3, lr}
 80a43ca:	4b02      	ldr	r3, [pc, #8]	; (80a43d4 <network_disconnect+0xc>)
 80a43cc:	681b      	ldr	r3, [r3, #0]
 80a43ce:	68db      	ldr	r3, [r3, #12]
 80a43d0:	9301      	str	r3, [sp, #4]
 80a43d2:	bd08      	pop	{r3, pc}
 80a43d4:	080601c8 	.word	0x080601c8

080a43d8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a43d8:	b508      	push	{r3, lr}
 80a43da:	4b02      	ldr	r3, [pc, #8]	; (80a43e4 <network_ready+0xc>)
 80a43dc:	681b      	ldr	r3, [r3, #0]
 80a43de:	691b      	ldr	r3, [r3, #16]
 80a43e0:	9301      	str	r3, [sp, #4]
 80a43e2:	bd08      	pop	{r3, pc}
 80a43e4:	080601c8 	.word	0x080601c8

080a43e8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a43e8:	b508      	push	{r3, lr}
 80a43ea:	4b02      	ldr	r3, [pc, #8]	; (80a43f4 <network_on+0xc>)
 80a43ec:	681b      	ldr	r3, [r3, #0]
 80a43ee:	695b      	ldr	r3, [r3, #20]
 80a43f0:	9301      	str	r3, [sp, #4]
 80a43f2:	bd08      	pop	{r3, pc}
 80a43f4:	080601c8 	.word	0x080601c8

080a43f8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a43f8:	b508      	push	{r3, lr}
 80a43fa:	4b02      	ldr	r3, [pc, #8]	; (80a4404 <network_off+0xc>)
 80a43fc:	681b      	ldr	r3, [r3, #0]
 80a43fe:	699b      	ldr	r3, [r3, #24]
 80a4400:	9301      	str	r3, [sp, #4]
 80a4402:	bd08      	pop	{r3, pc}
 80a4404:	080601c8 	.word	0x080601c8

080a4408 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a4408:	b508      	push	{r3, lr}
 80a440a:	4b02      	ldr	r3, [pc, #8]	; (80a4414 <network_listen+0xc>)
 80a440c:	681b      	ldr	r3, [r3, #0]
 80a440e:	69db      	ldr	r3, [r3, #28]
 80a4410:	9301      	str	r3, [sp, #4]
 80a4412:	bd08      	pop	{r3, pc}
 80a4414:	080601c8 	.word	0x080601c8

080a4418 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a4418:	b508      	push	{r3, lr}
 80a441a:	4b02      	ldr	r3, [pc, #8]	; (80a4424 <network_listening+0xc>)
 80a441c:	681b      	ldr	r3, [r3, #0]
 80a441e:	6a1b      	ldr	r3, [r3, #32]
 80a4420:	9301      	str	r3, [sp, #4]
 80a4422:	bd08      	pop	{r3, pc}
 80a4424:	080601c8 	.word	0x080601c8

080a4428 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a4428:	b508      	push	{r3, lr}
 80a442a:	4b02      	ldr	r3, [pc, #8]	; (80a4434 <network_set_listen_timeout+0xc>)
 80a442c:	681b      	ldr	r3, [r3, #0]
 80a442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a4430:	9301      	str	r3, [sp, #4]
 80a4432:	bd08      	pop	{r3, pc}
 80a4434:	080601c8 	.word	0x080601c8

080a4438 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a4438:	b508      	push	{r3, lr}
 80a443a:	4b02      	ldr	r3, [pc, #8]	; (80a4444 <network_get_listen_timeout+0xc>)
 80a443c:	681b      	ldr	r3, [r3, #0]
 80a443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a4440:	9301      	str	r3, [sp, #4]
 80a4442:	bd08      	pop	{r3, pc}
 80a4444:	080601c8 	.word	0x080601c8

080a4448 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a4448:	b508      	push	{r3, lr}
 80a444a:	4b02      	ldr	r3, [pc, #8]	; (80a4454 <network_is_on+0xc>)
 80a444c:	681b      	ldr	r3, [r3, #0]
 80a444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a4450:	9301      	str	r3, [sp, #4]
 80a4452:	bd08      	pop	{r3, pc}
 80a4454:	080601c8 	.word	0x080601c8

080a4458 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a4458:	b508      	push	{r3, lr}
 80a445a:	4b02      	ldr	r3, [pc, #8]	; (80a4464 <network_is_off+0xc>)
 80a445c:	681b      	ldr	r3, [r3, #0]
 80a445e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a4460:	9301      	str	r3, [sp, #4]
 80a4462:	bd08      	pop	{r3, pc}
 80a4464:	080601c8 	.word	0x080601c8

080a4468 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a4468:	b508      	push	{r3, lr}
 80a446a:	4b02      	ldr	r3, [pc, #8]	; (80a4474 <spark_process+0xc>)
 80a446c:	681b      	ldr	r3, [r3, #0]
 80a446e:	689b      	ldr	r3, [r3, #8]
 80a4470:	9301      	str	r3, [sp, #4]
 80a4472:	bd08      	pop	{r3, pc}
 80a4474:	080601cc 	.word	0x080601cc

080a4478 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a4478:	b508      	push	{r3, lr}
 80a447a:	4b02      	ldr	r3, [pc, #8]	; (80a4484 <spark_cloud_flag_connected+0xc>)
 80a447c:	681b      	ldr	r3, [r3, #0]
 80a447e:	695b      	ldr	r3, [r3, #20]
 80a4480:	9301      	str	r3, [sp, #4]
 80a4482:	bd08      	pop	{r3, pc}
 80a4484:	080601cc 	.word	0x080601cc

080a4488 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a4488:	b508      	push	{r3, lr}
 80a448a:	4b02      	ldr	r3, [pc, #8]	; (80a4494 <spark_sync_time_pending+0xc>)
 80a448c:	681b      	ldr	r3, [r3, #0]
 80a448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a4490:	9301      	str	r3, [sp, #4]
 80a4492:	bd08      	pop	{r3, pc}
 80a4494:	080601cc 	.word	0x080601cc

080a4498 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a4498:	b508      	push	{r3, lr}
 80a449a:	4b02      	ldr	r3, [pc, #8]	; (80a44a4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a449c:	681b      	ldr	r3, [r3, #0]
 80a449e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a44a0:	9301      	str	r3, [sp, #4]
 80a44a2:	bd08      	pop	{r3, pc}
 80a44a4:	080601cc 	.word	0x080601cc

080a44a8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a44a8:	b508      	push	{r3, lr}
 80a44aa:	4b02      	ldr	r3, [pc, #8]	; (80a44b4 <malloc+0xc>)
 80a44ac:	681b      	ldr	r3, [r3, #0]
 80a44ae:	681b      	ldr	r3, [r3, #0]
 80a44b0:	9301      	str	r3, [sp, #4]
 80a44b2:	bd08      	pop	{r3, pc}
 80a44b4:	080601a0 	.word	0x080601a0

080a44b8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a44b8:	b508      	push	{r3, lr}
 80a44ba:	4b02      	ldr	r3, [pc, #8]	; (80a44c4 <free+0xc>)
 80a44bc:	681b      	ldr	r3, [r3, #0]
 80a44be:	685b      	ldr	r3, [r3, #4]
 80a44c0:	9301      	str	r3, [sp, #4]
 80a44c2:	bd08      	pop	{r3, pc}
 80a44c4:	080601a0 	.word	0x080601a0

080a44c8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a44c8:	b508      	push	{r3, lr}
 80a44ca:	4b02      	ldr	r3, [pc, #8]	; (80a44d4 <realloc+0xc>)
 80a44cc:	681b      	ldr	r3, [r3, #0]
 80a44ce:	689b      	ldr	r3, [r3, #8]
 80a44d0:	9301      	str	r3, [sp, #4]
 80a44d2:	bd08      	pop	{r3, pc}
 80a44d4:	080601a0 	.word	0x080601a0

080a44d8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a44d8:	b508      	push	{r3, lr}
 80a44da:	4b02      	ldr	r3, [pc, #8]	; (80a44e4 <vsnprintf+0xc>)
 80a44dc:	681b      	ldr	r3, [r3, #0]
 80a44de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a44e0:	9301      	str	r3, [sp, #4]
 80a44e2:	bd08      	pop	{r3, pc}
 80a44e4:	080601a0 	.word	0x080601a0

080a44e8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a44e8:	b508      	push	{r3, lr}
 80a44ea:	4b02      	ldr	r3, [pc, #8]	; (80a44f4 <__errno+0xc>)
 80a44ec:	681b      	ldr	r3, [r3, #0]
 80a44ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a44f0:	9301      	str	r3, [sp, #4]
 80a44f2:	bd08      	pop	{r3, pc}
 80a44f4:	080601a0 	.word	0x080601a0

080a44f8 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a44f8:	b508      	push	{r3, lr}
 80a44fa:	4b02      	ldr	r3, [pc, #8]	; (80a4504 <__assert_func+0xc>)
 80a44fc:	681b      	ldr	r3, [r3, #0]
 80a44fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a4500:	9301      	str	r3, [sp, #4]
 80a4502:	bd08      	pop	{r3, pc}
 80a4504:	080601a0 	.word	0x080601a0

080a4508 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a4508:	b508      	push	{r3, lr}
 80a450a:	4b02      	ldr	r3, [pc, #8]	; (80a4514 <newlib_impure_ptr_callback+0xc>)
 80a450c:	681b      	ldr	r3, [r3, #0]
 80a450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a4510:	9301      	str	r3, [sp, #4]
 80a4512:	bd08      	pop	{r3, pc}
 80a4514:	080601a0 	.word	0x080601a0

080a4518 <_ZN14RecursiveMutex6unlockEv.isra.0>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a4518:	f7ff bdd6 	b.w	80a40c8 <os_mutex_recursive_unlock>

080a451c <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
 80a451c:	f7ff bdcc 	b.w	80a40b8 <os_mutex_recursive_lock>

080a4520 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a4520:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a4522:	2600      	movs	r6, #0
 80a4524:	4604      	mov	r4, r0
 80a4526:	460d      	mov	r5, r1
 80a4528:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a452c:	f7ff fdb4 	bl	80a4098 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a4530:	4628      	mov	r0, r5
    _spi = spi;
 80a4532:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a4534:	f7ff fe84 	bl	80a4240 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a4538:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a453a:	6066      	str	r6, [r4, #4]
}
 80a453c:	bd70      	pop	{r4, r5, r6, pc}

080a453e <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a453e:	b510      	push	{r4, lr}
 80a4540:	4604      	mov	r4, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a4542:	6880      	ldr	r0, [r0, #8]
 80a4544:	f7ff ffea 	bl	80a451c <_ZN14RecursiveMutex4lockEv.isra.0>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 80a4548:	7820      	ldrb	r0, [r4, #0]
 80a454a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a454e:	f7ff fe67 	bl	80a4220 <hal_spi_begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a4552:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 80a4554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a4558:	f7ff bfde 	b.w	80a4518 <_ZN14RecursiveMutex6unlockEv.isra.0>

080a455c <_ZN8SPIClass14endTransactionEv>:
 80a455c:	6880      	ldr	r0, [r0, #8]
 80a455e:	f7ff bfdb 	b.w	80a4518 <_ZN14RecursiveMutex6unlockEv.isra.0>
	...

080a4564 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a4564:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a4566:	2400      	movs	r4, #0
 80a4568:	0840      	lsrs	r0, r0, #1
 80a456a:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a456c:	6818      	ldr	r0, [r3, #0]
 80a456e:	b2e5      	uxtb	r5, r4
 80a4570:	4288      	cmp	r0, r1
 80a4572:	d906      	bls.n	80a4582 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a4574:	3401      	adds	r4, #1
 80a4576:	2c08      	cmp	r4, #8
 80a4578:	d002      	beq.n	80a4580 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a457a:	0840      	lsrs	r0, r0, #1
 80a457c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a457e:	e7f5      	b.n	80a456c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a4580:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 80a4582:	4b02      	ldr	r3, [pc, #8]	; (80a458c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a4584:	5d5b      	ldrb	r3, [r3, r5]
 80a4586:	7013      	strb	r3, [r2, #0]
}
 80a4588:	bd30      	pop	{r4, r5, pc}
 80a458a:	bf00      	nop
 80a458c:	080aa1ce 	.word	0x080aa1ce

080a4590 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 80a4590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a4594:	4606      	mov	r6, r0
 80a4596:	b08f      	sub	sp, #60	; 0x3c
    _mutex.lock();
 80a4598:	6880      	ldr	r0, [r0, #8]
 80a459a:	460c      	mov	r4, r1
 80a459c:	f7ff ffbe 	bl	80a451c <_ZN14RecursiveMutex4lockEv.isra.0>
    memset(info, 0, sizeof(hal_spi_info_t));
 80a45a0:	2214      	movs	r2, #20
 80a45a2:	2100      	movs	r1, #0
 80a45a4:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 80a45a6:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 80a45a8:	f004 fd1e 	bl	80a8fe8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a45ac:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 80a45ae:	2200      	movs	r2, #0
 80a45b0:	4628      	mov	r0, r5
 80a45b2:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 80a45b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 80a45b8:	f7ff fe52 	bl	80a4260 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 80a45bc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80a45c0:	b113      	cbz	r3, 80a45c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x38>
 80a45c2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a45c6:	b155      	cbz	r5, 80a45de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4e>
  {
 80a45c8:	2700      	movs	r7, #0
 80a45ca:	2501      	movs	r5, #1
 80a45cc:	46b9      	mov	r9, r7
 80a45ce:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 80a45d0:	7923      	ldrb	r3, [r4, #4]
 80a45d2:	b15d      	cbz	r5, 80a45ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x5c>
 80a45d4:	b1c3      	cbz	r3, 80a4608 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
}
 80a45d6:	2000      	movs	r0, #0
 80a45d8:	b00f      	add	sp, #60	; 0x3c
 80a45da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 80a45de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a45e2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a45e6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 80a45ea:	e7f1      	b.n	80a45d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x40>
    if (default_ == other.default_ &&
 80a45ec:	2b00      	cmp	r3, #0
 80a45ee:	d135      	bne.n	80a465c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xcc>
 80a45f0:	68a3      	ldr	r3, [r4, #8]
 80a45f2:	4543      	cmp	r3, r8
 80a45f4:	d108      	bne.n	80a4608 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
        bitOrder_ == other.bitOrder_ &&
 80a45f6:	f88d 9020 	strb.w	r9, [sp, #32]
 80a45fa:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a45fe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a4602:	89a3      	ldrh	r3, [r4, #12]
 80a4604:	429a      	cmp	r2, r3
 80a4606:	d0e6      	beq.n	80a45d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            uint8_t divisor = 0;
 80a4608:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a460a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 80a460c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a4610:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a4612:	ab04      	add	r3, sp, #16
 80a4614:	f10d 020f 	add.w	r2, sp, #15
 80a4618:	f7ff ffa4 	bl	80a4564 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 80a461c:	7921      	ldrb	r1, [r4, #4]
 80a461e:	b985      	cbnz	r5, 80a4642 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb2>
    if (default_ == other.default_ &&
 80a4620:	b989      	cbnz	r1, 80a4646 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a4622:	68a3      	ldr	r3, [r4, #8]
 80a4624:	4543      	cmp	r3, r8
 80a4626:	d30e      	bcc.n	80a4646 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
        bitOrder_ == other.bitOrder_ &&
 80a4628:	f88d 9020 	strb.w	r9, [sp, #32]
 80a462c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a4630:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a4634:	89a3      	ldrh	r3, [r4, #12]
 80a4636:	429a      	cmp	r2, r3
 80a4638:	d105      	bne.n	80a4646 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 80a463a:	9b04      	ldr	r3, [sp, #16]
 80a463c:	4543      	cmp	r3, r8
 80a463e:	d102      	bne.n	80a4646 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a4640:	e7c9      	b.n	80a45d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
    if (default_ && other.default_)
 80a4642:	2900      	cmp	r1, #0
 80a4644:	d1f9      	bne.n	80a463a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xaa>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 80a4646:	2300      	movs	r3, #0
 80a4648:	9301      	str	r3, [sp, #4]
 80a464a:	7b63      	ldrb	r3, [r4, #13]
 80a464c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a4650:	9300      	str	r3, [sp, #0]
 80a4652:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a4654:	7830      	ldrb	r0, [r6, #0]
 80a4656:	f7ff fe1b 	bl	80a4290 <hal_spi_set_settings>
    return 0;
 80a465a:	e7bc      	b.n	80a45d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a465c:	462b      	mov	r3, r5
 80a465e:	462a      	mov	r2, r5
 80a4660:	2101      	movs	r1, #1
 80a4662:	e9cd 5500 	strd	r5, r5, [sp]
 80a4666:	e7f5      	b.n	80a4654 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc4>

080a4668 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a4668:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a466a:	7800      	ldrb	r0, [r0, #0]
 80a466c:	f7ff fde0 	bl	80a4230 <hal_spi_transfer>
}
 80a4670:	b2c0      	uxtb	r0, r0
 80a4672:	bd08      	pop	{r3, pc}

080a4674 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 80a4674:	b530      	push	{r4, r5, lr}
 80a4676:	b087      	sub	sp, #28
 80a4678:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a467a:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 80a467c:	9500      	str	r5, [sp, #0]
 80a467e:	7800      	ldrb	r0, [r0, #0]
 80a4680:	f7ff fdf6 	bl	80a4270 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 80a4684:	b93d      	cbnz	r5, 80a4696 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 80a4686:	7820      	ldrb	r0, [r4, #0]
 80a4688:	a902      	add	r1, sp, #8
 80a468a:	f7ff fdf9 	bl	80a4280 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 80a468e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a4692:	07db      	lsls	r3, r3, #31
 80a4694:	d4f7      	bmi.n	80a4686 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 80a4696:	b007      	add	sp, #28
 80a4698:	bd30      	pop	{r4, r5, pc}
	...

080a469c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a469c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a469e:	2000      	movs	r0, #0
 80a46a0:	4b04      	ldr	r3, [pc, #16]	; (80a46b4 <_GLOBAL__sub_I_System+0x18>)
 80a46a2:	601a      	str	r2, [r3, #0]
 80a46a4:	4b04      	ldr	r3, [pc, #16]	; (80a46b8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a46a6:	4a05      	ldr	r2, [pc, #20]	; (80a46bc <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a46a8:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a46ac:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a46ae:	f7ff be4f 	b.w	80a4350 <set_system_mode>
 80a46b2:	bf00      	nop
 80a46b4:	2000025c 	.word	0x2000025c
 80a46b8:	20000250 	.word	0x20000250
 80a46bc:	ffff0000 	.word	0xffff0000

080a46c0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a46c0:	b510      	push	{r4, lr}
 80a46c2:	4604      	mov	r4, r0
{
	free(buffer);
 80a46c4:	6800      	ldr	r0, [r0, #0]
 80a46c6:	f7ff fef7 	bl	80a44b8 <free>
}
 80a46ca:	4620      	mov	r0, r4
 80a46cc:	bd10      	pop	{r4, pc}

080a46ce <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a46ce:	b510      	push	{r4, lr}
 80a46d0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a46d2:	6800      	ldr	r0, [r0, #0]
 80a46d4:	b108      	cbz	r0, 80a46da <_ZN6String10invalidateEv+0xc>
 80a46d6:	f7ff feef 	bl	80a44b8 <free>
	buffer = NULL;
 80a46da:	2300      	movs	r3, #0
	capacity = len = 0;
 80a46dc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a46e0:	6023      	str	r3, [r4, #0]
}
 80a46e2:	bd10      	pop	{r4, pc}

080a46e4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a46e4:	b538      	push	{r3, r4, r5, lr}
 80a46e6:	4604      	mov	r4, r0
 80a46e8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a46ea:	6800      	ldr	r0, [r0, #0]
 80a46ec:	3101      	adds	r1, #1
 80a46ee:	f7ff feeb 	bl	80a44c8 <realloc>
	if (newbuffer) {
 80a46f2:	b110      	cbz	r0, 80a46fa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a46f4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a46f8:	2001      	movs	r0, #1
	}
	return 0;
}
 80a46fa:	bd38      	pop	{r3, r4, r5, pc}

080a46fc <_ZN6String7reserveEj>:
{
 80a46fc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a46fe:	6803      	ldr	r3, [r0, #0]
{
 80a4700:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a4702:	b123      	cbz	r3, 80a470e <_ZN6String7reserveEj+0x12>
 80a4704:	6843      	ldr	r3, [r0, #4]
 80a4706:	428b      	cmp	r3, r1
 80a4708:	d301      	bcc.n	80a470e <_ZN6String7reserveEj+0x12>
 80a470a:	2001      	movs	r0, #1
}
 80a470c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a470e:	4620      	mov	r0, r4
 80a4710:	f7ff ffe8 	bl	80a46e4 <_ZN6String12changeBufferEj>
 80a4714:	2800      	cmp	r0, #0
 80a4716:	d0f9      	beq.n	80a470c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a4718:	68a3      	ldr	r3, [r4, #8]
 80a471a:	2b00      	cmp	r3, #0
 80a471c:	d1f5      	bne.n	80a470a <_ZN6String7reserveEj+0xe>
 80a471e:	6822      	ldr	r2, [r4, #0]
 80a4720:	7013      	strb	r3, [r2, #0]
 80a4722:	e7f2      	b.n	80a470a <_ZN6String7reserveEj+0xe>

080a4724 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a4724:	b570      	push	{r4, r5, r6, lr}
 80a4726:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a4728:	4611      	mov	r1, r2
{
 80a472a:	4604      	mov	r4, r0
 80a472c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a472e:	f7ff ffe5 	bl	80a46fc <_ZN6String7reserveEj>
 80a4732:	b920      	cbnz	r0, 80a473e <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a4734:	4620      	mov	r0, r4
 80a4736:	f7ff ffca 	bl	80a46ce <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a473a:	4620      	mov	r0, r4
 80a473c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a473e:	462a      	mov	r2, r5
 80a4740:	4631      	mov	r1, r6
 80a4742:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a4744:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a4746:	f004 fc41 	bl	80a8fcc <memcpy>
	buffer[len] = 0;
 80a474a:	2100      	movs	r1, #0
 80a474c:	6822      	ldr	r2, [r4, #0]
 80a474e:	68a3      	ldr	r3, [r4, #8]
 80a4750:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a4752:	e7f2      	b.n	80a473a <_ZN6String4copyEPKcj+0x16>

080a4754 <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 80a4754:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a4756:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 80a4758:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a475a:	460d      	mov	r5, r1
	capacity = 0;
 80a475c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a4760:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a4762:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a4764:	b139      	cbz	r1, 80a4776 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 80a4766:	4608      	mov	r0, r1
 80a4768:	f004 fc7c 	bl	80a9064 <strlen>
 80a476c:	4629      	mov	r1, r5
 80a476e:	4602      	mov	r2, r0
 80a4770:	4620      	mov	r0, r4
 80a4772:	f7ff ffd7 	bl	80a4724 <_ZN6String4copyEPKcj>
}
 80a4776:	4620      	mov	r0, r4
 80a4778:	bd38      	pop	{r3, r4, r5, pc}

080a477a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a477a:	b538      	push	{r3, r4, r5, lr}
 80a477c:	4605      	mov	r5, r0
	if (buffer) {
 80a477e:	6800      	ldr	r0, [r0, #0]
{
 80a4780:	460c      	mov	r4, r1
	if (buffer) {
 80a4782:	b168      	cbz	r0, 80a47a0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a4784:	686a      	ldr	r2, [r5, #4]
 80a4786:	688b      	ldr	r3, [r1, #8]
 80a4788:	429a      	cmp	r2, r3
 80a478a:	d307      	bcc.n	80a479c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a478c:	6809      	ldr	r1, [r1, #0]
 80a478e:	f004 fc61 	bl	80a9054 <strcpy>
			len = rhs.len;
 80a4792:	68a3      	ldr	r3, [r4, #8]
 80a4794:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a4796:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a4798:	60a3      	str	r3, [r4, #8]
}
 80a479a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a479c:	f7ff fe8c 	bl	80a44b8 <free>
	buffer = rhs.buffer;
 80a47a0:	6823      	ldr	r3, [r4, #0]
 80a47a2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a47a4:	6863      	ldr	r3, [r4, #4]
 80a47a6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a47a8:	68a3      	ldr	r3, [r4, #8]
 80a47aa:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a47ac:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a47ae:	e9c4 3300 	strd	r3, r3, [r4]
 80a47b2:	e7f1      	b.n	80a4798 <_ZN6String4moveERS_+0x1e>

080a47b4 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a47b4:	4288      	cmp	r0, r1
{
 80a47b6:	b510      	push	{r4, lr}
 80a47b8:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a47ba:	d001      	beq.n	80a47c0 <_ZN6StringaSEOS_+0xc>
 80a47bc:	f7ff ffdd 	bl	80a477a <_ZN6String4moveERS_>
	return *this;
}
 80a47c0:	4620      	mov	r0, r4
 80a47c2:	bd10      	pop	{r4, pc}

080a47c4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a47c4:	b538      	push	{r3, r4, r5, lr}
 80a47c6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a47c8:	460c      	mov	r4, r1
 80a47ca:	b149      	cbz	r1, 80a47e0 <_ZN6StringaSEPKc+0x1c>
 80a47cc:	4608      	mov	r0, r1
 80a47ce:	f004 fc49 	bl	80a9064 <strlen>
 80a47d2:	4621      	mov	r1, r4
 80a47d4:	4602      	mov	r2, r0
 80a47d6:	4628      	mov	r0, r5
 80a47d8:	f7ff ffa4 	bl	80a4724 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a47dc:	4628      	mov	r0, r5
 80a47de:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a47e0:	f7ff ff75 	bl	80a46ce <_ZN6String10invalidateEv>
 80a47e4:	e7fa      	b.n	80a47dc <_ZN6StringaSEPKc+0x18>

080a47e6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a47e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a47e8:	4606      	mov	r6, r0
 80a47ea:	460d      	mov	r5, r1
  size_t n = 0;
 80a47ec:	2400      	movs	r4, #0
 80a47ee:	188f      	adds	r7, r1, r2
  while (size--) {
 80a47f0:	42bd      	cmp	r5, r7
 80a47f2:	d00c      	beq.n	80a480e <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a47f4:	6833      	ldr	r3, [r6, #0]
 80a47f6:	4630      	mov	r0, r6
 80a47f8:	689b      	ldr	r3, [r3, #8]
 80a47fa:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a47fe:	4798      	blx	r3
     if (chunk>=0)
 80a4800:	1e03      	subs	r3, r0, #0
 80a4802:	db01      	blt.n	80a4808 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a4804:	441c      	add	r4, r3
  while (size--) {
 80a4806:	e7f3      	b.n	80a47f0 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a4808:	2c00      	cmp	r4, #0
 80a480a:	bf08      	it	eq
 80a480c:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a480e:	4620      	mov	r0, r4
 80a4810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4812 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a4812:	b570      	push	{r4, r5, r6, lr}
 80a4814:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a4816:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a4818:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a481a:	b149      	cbz	r1, 80a4830 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a481c:	f004 fc22 	bl	80a9064 <strlen>
 80a4820:	682b      	ldr	r3, [r5, #0]
 80a4822:	4602      	mov	r2, r0
 80a4824:	4621      	mov	r1, r4
 80a4826:	4628      	mov	r0, r5
    }
 80a4828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a482c:	68db      	ldr	r3, [r3, #12]
 80a482e:	4718      	bx	r3
    }
 80a4830:	bd70      	pop	{r4, r5, r6, pc}

080a4832 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a4832:	b508      	push	{r3, lr}
  return write(str);
 80a4834:	f7ff ffed 	bl	80a4812 <_ZN5Print5writeEPKc>
}
 80a4838:	bd08      	pop	{r3, pc}

080a483a <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a483a:	6803      	ldr	r3, [r0, #0]
 80a483c:	689b      	ldr	r3, [r3, #8]
 80a483e:	4718      	bx	r3

080a4840 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a4840:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a4842:	210d      	movs	r1, #13
{
 80a4844:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a4846:	f7ff fff8 	bl	80a483a <_ZN5Print5printEc>
  n += print('\n');
 80a484a:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a484c:	4604      	mov	r4, r0
  n += print('\n');
 80a484e:	4628      	mov	r0, r5
 80a4850:	f7ff fff3 	bl	80a483a <_ZN5Print5printEc>
  return n;
}
 80a4854:	4420      	add	r0, r4
 80a4856:	bd38      	pop	{r3, r4, r5, pc}

080a4858 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a4858:	b538      	push	{r3, r4, r5, lr}
 80a485a:	4605      	mov	r5, r0
  return write(str);
 80a485c:	f7ff ffd9 	bl	80a4812 <_ZN5Print5writeEPKc>
 80a4860:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a4862:	4628      	mov	r0, r5
 80a4864:	f7ff ffec 	bl	80a4840 <_ZN5Print7printlnEv>
  return n;
}
 80a4868:	4420      	add	r0, r4
 80a486a:	bd38      	pop	{r3, r4, r5, pc}

080a486c <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 80a486c:	f7ff bff4 	b.w	80a4858 <_ZN5Print7printlnEPKc>

080a4870 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a4870:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a4872:	2a01      	cmp	r2, #1
 80a4874:	bf98      	it	ls
 80a4876:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a4878:	b530      	push	{r4, r5, lr}
 80a487a:	b08b      	sub	sp, #44	; 0x2c
 80a487c:	460c      	mov	r4, r1
  *str = '\0';
 80a487e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a4882:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a4884:	4625      	mov	r5, r4
 80a4886:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a488a:	fb04 5312 	mls	r3, r4, r2, r5
 80a488e:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a4890:	2b09      	cmp	r3, #9
 80a4892:	bf94      	ite	ls
 80a4894:	3330      	addls	r3, #48	; 0x30
 80a4896:	3337      	addhi	r3, #55	; 0x37
 80a4898:	b2db      	uxtb	r3, r3
  } while(n);
 80a489a:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a489c:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a48a0:	d9f0      	bls.n	80a4884 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a48a2:	f7ff ffb6 	bl	80a4812 <_ZN5Print5writeEPKc>
}
 80a48a6:	b00b      	add	sp, #44	; 0x2c
 80a48a8:	bd30      	pop	{r4, r5, pc}

080a48aa <_ZN5Print11printNumberEyh>:
 
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
 80a48aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a48ae:	b092      	sub	sp, #72	; 0x48
 80a48b0:	f89d 8060 	ldrb.w	r8, [sp, #96]	; 0x60
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.

  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a48b4:	2100      	movs	r1, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a48b6:	f1b8 0f01 	cmp.w	r8, #1
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
 80a48ba:	4604      	mov	r4, r0
  if (base < 2) base = 10;
 80a48bc:	bf98      	it	ls
 80a48be:	f04f 080a 	movls.w	r8, #10
  *str = '\0';
 80a48c2:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
  if (base < 2) base = 10;
 80a48c6:	ad11      	add	r5, sp, #68	; 0x44

  do {
    decltype(n) m = n;
    n /= base;
 80a48c8:	4616      	mov	r6, r2
 80a48ca:	461f      	mov	r7, r3
 80a48cc:	4642      	mov	r2, r8
 80a48ce:	2300      	movs	r3, #0
 80a48d0:	4630      	mov	r0, r6
 80a48d2:	4639      	mov	r1, r7
 80a48d4:	f004 f9f0 	bl	80a8cb8 <__aeabi_uldivmod>
 80a48d8:	4602      	mov	r2, r0
    char c = m - base * n;
 80a48da:	fb08 6010 	mls	r0, r8, r0, r6
    n /= base;
 80a48de:	460b      	mov	r3, r1
    char c = m - base * n;
 80a48e0:	b2c1      	uxtb	r1, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a48e2:	2909      	cmp	r1, #9
 80a48e4:	bf94      	ite	ls
 80a48e6:	3130      	addls	r1, #48	; 0x30
 80a48e8:	3137      	addhi	r1, #55	; 0x37
 80a48ea:	b2c9      	uxtb	r1, r1
  } while(n);
 80a48ec:	4546      	cmp	r6, r8
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a48ee:	f805 1d01 	strb.w	r1, [r5, #-1]!
  } while(n);
 80a48f2:	f177 0100 	sbcs.w	r1, r7, #0
 80a48f6:	d2e7      	bcs.n	80a48c8 <_ZN5Print11printNumberEyh+0x1e>

  return write(str);
 80a48f8:	4629      	mov	r1, r5
 80a48fa:	4620      	mov	r0, r4
 80a48fc:	f7ff ff89 	bl	80a4812 <_ZN5Print5writeEPKc>
}
 80a4900:	b012      	add	sp, #72	; 0x48
 80a4902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a4908 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
 80a4908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a490c:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a490e:	4619      	mov	r1, r3
 80a4910:	4610      	mov	r0, r2
{
 80a4912:	4692      	mov	sl, r2
 80a4914:	461f      	mov	r7, r3
 80a4916:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a491a:	f003 fdd5 	bl	80a84c8 <__aeabi_dcmpun>
 80a491e:	b140      	cbz	r0, 80a4932 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a4920:	4951      	ldr	r1, [pc, #324]	; (80a4a68 <_ZN5Print10printFloatEdh+0x160>)
 80a4922:	4628      	mov	r0, r5
 80a4924:	f7ff ff75 	bl	80a4812 <_ZN5Print5writeEPKc>
 80a4928:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a492a:	4620      	mov	r0, r4
 80a492c:	b003      	add	sp, #12
 80a492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a4932:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a4936:	f04f 32ff 	mov.w	r2, #4294967295
 80a493a:	4650      	mov	r0, sl
 80a493c:	4621      	mov	r1, r4
 80a493e:	4b4b      	ldr	r3, [pc, #300]	; (80a4a6c <_ZN5Print10printFloatEdh+0x164>)
 80a4940:	f003 fdc2 	bl	80a84c8 <__aeabi_dcmpun>
 80a4944:	b948      	cbnz	r0, 80a495a <_ZN5Print10printFloatEdh+0x52>
 80a4946:	f04f 32ff 	mov.w	r2, #4294967295
 80a494a:	4650      	mov	r0, sl
 80a494c:	4621      	mov	r1, r4
 80a494e:	4b47      	ldr	r3, [pc, #284]	; (80a4a6c <_ZN5Print10printFloatEdh+0x164>)
 80a4950:	f003 fd9c 	bl	80a848c <__aeabi_dcmple>
 80a4954:	b908      	cbnz	r0, 80a495a <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a4956:	4946      	ldr	r1, [pc, #280]	; (80a4a70 <_ZN5Print10printFloatEdh+0x168>)
 80a4958:	e7e3      	b.n	80a4922 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a495a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a495e:	4650      	mov	r0, sl
 80a4960:	4639      	mov	r1, r7
 80a4962:	4b44      	ldr	r3, [pc, #272]	; (80a4a74 <_ZN5Print10printFloatEdh+0x16c>)
 80a4964:	f003 fda6 	bl	80a84b4 <__aeabi_dcmpgt>
 80a4968:	b108      	cbz	r0, 80a496e <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a496a:	4943      	ldr	r1, [pc, #268]	; (80a4a78 <_ZN5Print10printFloatEdh+0x170>)
 80a496c:	e7d9      	b.n	80a4922 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a496e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a4972:	4650      	mov	r0, sl
 80a4974:	4639      	mov	r1, r7
 80a4976:	4b41      	ldr	r3, [pc, #260]	; (80a4a7c <_ZN5Print10printFloatEdh+0x174>)
 80a4978:	f003 fd7e 	bl	80a8478 <__aeabi_dcmplt>
 80a497c:	2800      	cmp	r0, #0
 80a497e:	d1f4      	bne.n	80a496a <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a4980:	2200      	movs	r2, #0
 80a4982:	2300      	movs	r3, #0
 80a4984:	4650      	mov	r0, sl
 80a4986:	4639      	mov	r1, r7
 80a4988:	f003 fd76 	bl	80a8478 <__aeabi_dcmplt>
 80a498c:	4604      	mov	r4, r0
 80a498e:	b130      	cbz	r0, 80a499e <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a4990:	212d      	movs	r1, #45	; 0x2d
 80a4992:	4628      	mov	r0, r5
 80a4994:	f7ff ff51 	bl	80a483a <_ZN5Print5printEc>
 80a4998:	4604      	mov	r4, r0
     number = -number;
 80a499a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a499e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a49a2:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a49a4:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a49a8:	4935      	ldr	r1, [pc, #212]	; (80a4a80 <_ZN5Print10printFloatEdh+0x178>)
    rounding /= 10.0;
 80a49aa:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a4a84 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a49ae:	fa5f f38b 	uxtb.w	r3, fp
 80a49b2:	429e      	cmp	r6, r3
 80a49b4:	d906      	bls.n	80a49c4 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a49b6:	4642      	mov	r2, r8
 80a49b8:	464b      	mov	r3, r9
 80a49ba:	f003 fc15 	bl	80a81e8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a49be:	f10b 0b01 	add.w	fp, fp, #1
 80a49c2:	e7f4      	b.n	80a49ae <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a49c4:	463b      	mov	r3, r7
 80a49c6:	4652      	mov	r2, sl
 80a49c8:	f003 f92e 	bl	80a7c28 <__adddf3>
 80a49cc:	4689      	mov	r9, r1
 80a49ce:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a49d0:	f003 fdb8 	bl	80a8544 <__aeabi_d2uiz>
 80a49d4:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a49d6:	f003 fa63 	bl	80a7ea0 <__aeabi_ui2d>
 80a49da:	4602      	mov	r2, r0
 80a49dc:	460b      	mov	r3, r1
 80a49de:	4640      	mov	r0, r8
 80a49e0:	4649      	mov	r1, r9
 80a49e2:	f003 f91f 	bl	80a7c24 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a49e6:	220a      	movs	r2, #10
 80a49e8:	4680      	mov	r8, r0
 80a49ea:	4689      	mov	r9, r1
 80a49ec:	4628      	mov	r0, r5
 80a49ee:	4639      	mov	r1, r7
 80a49f0:	f7ff ff3e 	bl	80a4870 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a49f4:	4404      	add	r4, r0
  if (digits > 0) {
 80a49f6:	2e00      	cmp	r6, #0
 80a49f8:	d097      	beq.n	80a492a <_ZN5Print10printFloatEdh+0x22>
  return write(str);
 80a49fa:	4628      	mov	r0, r5
 80a49fc:	4922      	ldr	r1, [pc, #136]	; (80a4a88 <_ZN5Print10printFloatEdh+0x180>)
 80a49fe:	f7ff ff08 	bl	80a4812 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 80a4a02:	f04f 0a00 	mov.w	sl, #0
 80a4a06:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a4a84 <_ZN5Print10printFloatEdh+0x17c>
    n += print(".");
 80a4a0a:	4404      	add	r4, r0
  while (digits-- > 0)
 80a4a0c:	2e00      	cmp	r6, #0
 80a4a0e:	d08c      	beq.n	80a492a <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a4a10:	4652      	mov	r2, sl
 80a4a12:	465b      	mov	r3, fp
 80a4a14:	4640      	mov	r0, r8
 80a4a16:	4649      	mov	r1, r9
 80a4a18:	f003 fabc 	bl	80a7f94 <__aeabi_dmul>
 80a4a1c:	4680      	mov	r8, r0
 80a4a1e:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a4a20:	f003 fd68 	bl	80a84f4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a4a24:	1e07      	subs	r7, r0, #0
 80a4a26:	da1b      	bge.n	80a4a60 <_ZN5Print10printFloatEdh+0x158>
            t = print('-');
 80a4a28:	212d      	movs	r1, #45	; 0x2d
 80a4a2a:	4628      	mov	r0, r5
 80a4a2c:	f7ff ff05 	bl	80a483a <_ZN5Print5printEc>
 80a4a30:	4603      	mov	r3, r0
            val = -n;
 80a4a32:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a4a34:	220a      	movs	r2, #10
 80a4a36:	4628      	mov	r0, r5
 80a4a38:	9301      	str	r3, [sp, #4]
 80a4a3a:	f7ff ff19 	bl	80a4870 <_ZN5Print11printNumberEmh>
 80a4a3e:	9b01      	ldr	r3, [sp, #4]
 80a4a40:	3e01      	subs	r6, #1
 80a4a42:	4403      	add	r3, r0
    remainder -= toPrint;
 80a4a44:	4638      	mov	r0, r7
    n += print(toPrint);
 80a4a46:	441c      	add	r4, r3
    remainder -= toPrint;
 80a4a48:	f003 fa3a 	bl	80a7ec0 <__aeabi_i2d>
 80a4a4c:	4602      	mov	r2, r0
 80a4a4e:	460b      	mov	r3, r1
 80a4a50:	4640      	mov	r0, r8
 80a4a52:	4649      	mov	r1, r9
 80a4a54:	f003 f8e6 	bl	80a7c24 <__aeabi_dsub>
 80a4a58:	b2f6      	uxtb	r6, r6
 80a4a5a:	4680      	mov	r8, r0
 80a4a5c:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a4a5e:	e7d5      	b.n	80a4a0c <_ZN5Print10printFloatEdh+0x104>
            val = n;
 80a4a60:	4639      	mov	r1, r7
        size_t t = 0;
 80a4a62:	2300      	movs	r3, #0
 80a4a64:	e7e6      	b.n	80a4a34 <_ZN5Print10printFloatEdh+0x12c>
 80a4a66:	bf00      	nop
 80a4a68:	080aa1d6 	.word	0x080aa1d6
 80a4a6c:	7fefffff 	.word	0x7fefffff
 80a4a70:	080aa1da 	.word	0x080aa1da
 80a4a74:	41efffff 	.word	0x41efffff
 80a4a78:	080aa1de 	.word	0x080aa1de
 80a4a7c:	c1efffff 	.word	0xc1efffff
 80a4a80:	3fe00000 	.word	0x3fe00000
 80a4a84:	40240000 	.word	0x40240000
 80a4a88:	080a97e0 	.word	0x080a97e0

080a4a8c <_ZN5Print5printEfi>:
{
 80a4a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4a8e:	4605      	mov	r5, r0
 80a4a90:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a4a92:	4608      	mov	r0, r1
 80a4a94:	f003 fa26 	bl	80a7ee4 <__aeabi_f2d>
 80a4a98:	b2e4      	uxtb	r4, r4
 80a4a9a:	4602      	mov	r2, r0
 80a4a9c:	460b      	mov	r3, r1
 80a4a9e:	4628      	mov	r0, r5
 80a4aa0:	9400      	str	r4, [sp, #0]
 80a4aa2:	f7ff ff31 	bl	80a4908 <_ZN5Print10printFloatEdh>
}
 80a4aa6:	b003      	add	sp, #12
 80a4aa8:	bd30      	pop	{r4, r5, pc}

080a4aaa <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a4aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4aae:	b086      	sub	sp, #24
 80a4ab0:	af00      	add	r7, sp, #0
 80a4ab2:	4605      	mov	r5, r0
 80a4ab4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a4ab6:	1d38      	adds	r0, r7, #4
 80a4ab8:	2114      	movs	r1, #20
{
 80a4aba:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a4abc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a4abe:	f7ff fd0b 	bl	80a44d8 <vsnprintf>

    if (n<bufsize)
 80a4ac2:	2813      	cmp	r0, #19
 80a4ac4:	d80e      	bhi.n	80a4ae4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a4ac6:	4628      	mov	r0, r5
 80a4ac8:	1d39      	adds	r1, r7, #4
 80a4aca:	f7ff fea2 	bl	80a4812 <_ZN5Print5writeEPKc>
 80a4ace:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a4ad0:	b11e      	cbz	r6, 80a4ada <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a4ad2:	4628      	mov	r0, r5
 80a4ad4:	f7ff feb4 	bl	80a4840 <_ZN5Print7printlnEv>
 80a4ad8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a4ada:	4620      	mov	r0, r4
 80a4adc:	3718      	adds	r7, #24
 80a4ade:	46bd      	mov	sp, r7
 80a4ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a4ae4:	f100 0308 	add.w	r3, r0, #8
 80a4ae8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a4aec:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a4aee:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a4af2:	4622      	mov	r2, r4
 80a4af4:	1c41      	adds	r1, r0, #1
 80a4af6:	683b      	ldr	r3, [r7, #0]
 80a4af8:	4668      	mov	r0, sp
 80a4afa:	f7ff fced 	bl	80a44d8 <vsnprintf>
  return write(str);
 80a4afe:	4669      	mov	r1, sp
 80a4b00:	4628      	mov	r0, r5
 80a4b02:	f7ff fe86 	bl	80a4812 <_ZN5Print5writeEPKc>
 80a4b06:	4604      	mov	r4, r0
 80a4b08:	46c5      	mov	sp, r8
 80a4b0a:	e7e1      	b.n	80a4ad0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a4b0c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a4b0c:	2300      	movs	r3, #0
 80a4b0e:	6840      	ldr	r0, [r0, #4]
 80a4b10:	461a      	mov	r2, r3
 80a4b12:	4619      	mov	r1, r3
 80a4b14:	f7ff bc68 	b.w	80a43e8 <network_on>

080a4b18 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a4b18:	4b01      	ldr	r3, [pc, #4]	; (80a4b20 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a4b1a:	4a02      	ldr	r2, [pc, #8]	; (80a4b24 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a4b1c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a4b1e:	4770      	bx	lr
 80a4b20:	20000260 	.word	0x20000260
 80a4b24:	080aa1e2 	.word	0x080aa1e2

080a4b28 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a4b28:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4b2a:	2000      	movs	r0, #0
 80a4b2c:	f7ff fcac 	bl	80a4488 <spark_sync_time_pending>
 80a4b30:	b128      	cbz	r0, 80a4b3e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a4b32:	f7ff fca1 	bl	80a4478 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4b36:	f080 0001 	eor.w	r0, r0, #1
 80a4b3a:	b2c0      	uxtb	r0, r0
    }
 80a4b3c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4b3e:	2001      	movs	r0, #1
 80a4b40:	e7fc      	b.n	80a4b3c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080a4b42 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a4b42:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a4b44:	2000      	movs	r0, #0
 80a4b46:	f7ff fa8f 	bl	80a4068 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a4b4a:	4604      	mov	r4, r0
 80a4b4c:	b9a0      	cbnz	r0, 80a4b78 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a4b4e:	f7ff fbf7 	bl	80a4340 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a4b52:	2801      	cmp	r0, #1
 80a4b54:	d110      	bne.n	80a4b78 <_ZN9TimeClass7isValidEv+0x36>
 80a4b56:	4620      	mov	r0, r4
 80a4b58:	f7ff fc0a 	bl	80a4370 <system_thread_get_state>
 80a4b5c:	b960      	cbnz	r0, 80a4b78 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a4b5e:	f7ff ffe3 	bl	80a4b28 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a4b62:	b910      	cbnz	r0, 80a4b6a <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a4b64:	f7ff fc80 	bl	80a4468 <spark_process>
        while (_while() && !_condition()) {
 80a4b68:	e7f9      	b.n	80a4b5e <_ZN9TimeClass7isValidEv+0x1c>
 80a4b6a:	f7ff ffdd 	bl	80a4b28 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a4b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a4b72:	2000      	movs	r0, #0
 80a4b74:	f7ff ba78 	b.w	80a4068 <hal_rtc_time_is_valid>
}
 80a4b78:	4620      	mov	r0, r4
 80a4b7a:	bd10      	pop	{r4, pc}

080a4b7c <_ZN9TimeClass3nowEv>:
{
 80a4b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a4b7e:	f7ff ffe0 	bl	80a4b42 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a4b82:	2210      	movs	r2, #16
 80a4b84:	2100      	movs	r1, #0
 80a4b86:	4668      	mov	r0, sp
 80a4b88:	f004 fa2e 	bl	80a8fe8 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a4b8c:	2100      	movs	r1, #0
 80a4b8e:	4668      	mov	r0, sp
 80a4b90:	f7ff fa72 	bl	80a4078 <hal_rtc_get_time>
}
 80a4b94:	9800      	ldr	r0, [sp, #0]
 80a4b96:	b005      	add	sp, #20
 80a4b98:	f85d fb04 	ldr.w	pc, [sp], #4

080a4b9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a4b9c:	4b02      	ldr	r3, [pc, #8]	; (80a4ba8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a4b9e:	681a      	ldr	r2, [r3, #0]
 80a4ba0:	4b02      	ldr	r3, [pc, #8]	; (80a4bac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a4ba2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a4ba4:	4770      	bx	lr
 80a4ba6:	bf00      	nop
 80a4ba8:	20000008 	.word	0x20000008
 80a4bac:	20000264 	.word	0x20000264

080a4bb0 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 80a4bb0:	428a      	cmp	r2, r1
{
 80a4bb2:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
 80a4bb4:	d007      	beq.n	80a4bc6 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 80a4bb6:	9c02      	ldr	r4, [sp, #8]
 80a4bb8:	1a40      	subs	r0, r0, r1
 80a4bba:	1ae4      	subs	r4, r4, r3
 80a4bbc:	4360      	muls	r0, r4
 80a4bbe:	1a52      	subs	r2, r2, r1
 80a4bc0:	fb90 f0f2 	sdiv	r0, r0, r2
 80a4bc4:	4418      	add	r0, r3
}
 80a4bc6:	bd10      	pop	{r4, pc}

080a4bc8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a4bc8:	2100      	movs	r1, #0
 80a4bca:	f7ff bbc9 	b.w	80a4360 <system_delay_ms>
	...

080a4bd0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a4bd0:	2200      	movs	r2, #0
 80a4bd2:	4b01      	ldr	r3, [pc, #4]	; (80a4bd8 <_GLOBAL__sub_I_RGB+0x8>)
 80a4bd4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a4bd6:	4770      	bx	lr
 80a4bd8:	20000268 	.word	0x20000268

080a4bdc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a4bdc:	4b01      	ldr	r3, [pc, #4]	; (80a4be4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a4bde:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a4be0:	4770      	bx	lr
 80a4be2:	bf00      	nop
 80a4be4:	20000010 	.word	0x20000010

080a4be8 <serialEventRun>:
{
 80a4be8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a4bea:	4b13      	ldr	r3, [pc, #76]	; (80a4c38 <serialEventRun+0x50>)
 80a4bec:	b143      	cbz	r3, 80a4c00 <serialEventRun+0x18>
 80a4bee:	f000 f97b 	bl	80a4ee8 <_Z16_fetch_usbserialv>
 80a4bf2:	6803      	ldr	r3, [r0, #0]
 80a4bf4:	691b      	ldr	r3, [r3, #16]
 80a4bf6:	4798      	blx	r3
 80a4bf8:	2800      	cmp	r0, #0
 80a4bfa:	dd01      	ble.n	80a4c00 <serialEventRun+0x18>
        serialEvent();
 80a4bfc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a4c00:	4b0e      	ldr	r3, [pc, #56]	; (80a4c3c <serialEventRun+0x54>)
 80a4c02:	b143      	cbz	r3, 80a4c16 <serialEventRun+0x2e>
 80a4c04:	f000 fc4c 	bl	80a54a0 <_Z22__fetch_global_Serial1v>
 80a4c08:	6803      	ldr	r3, [r0, #0]
 80a4c0a:	691b      	ldr	r3, [r3, #16]
 80a4c0c:	4798      	blx	r3
 80a4c0e:	2800      	cmp	r0, #0
 80a4c10:	dd01      	ble.n	80a4c16 <serialEventRun+0x2e>
        serialEvent1();
 80a4c12:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a4c16:	4b0a      	ldr	r3, [pc, #40]	; (80a4c40 <serialEventRun+0x58>)
 80a4c18:	b10b      	cbz	r3, 80a4c1e <serialEventRun+0x36>
 80a4c1a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a4c1e:	4b09      	ldr	r3, [pc, #36]	; (80a4c44 <serialEventRun+0x5c>)
 80a4c20:	b143      	cbz	r3, 80a4c34 <serialEventRun+0x4c>
 80a4c22:	f000 f99b 	bl	80a4f5c <_Z17_fetch_usbserial1v>
 80a4c26:	6803      	ldr	r3, [r0, #0]
 80a4c28:	691b      	ldr	r3, [r3, #16]
 80a4c2a:	4798      	blx	r3
 80a4c2c:	2800      	cmp	r0, #0
 80a4c2e:	dd01      	ble.n	80a4c34 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a4c30:	f3af 8000 	nop.w
}
 80a4c34:	bd08      	pop	{r3, pc}
 80a4c36:	bf00      	nop
	...

080a4c48 <_post_loop>:
{
 80a4c48:	b508      	push	{r3, lr}
	serialEventRun();
 80a4c4a:	f7ff ffcd 	bl	80a4be8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a4c4e:	f7ff f9eb 	bl	80a4028 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a4c52:	4b01      	ldr	r3, [pc, #4]	; (80a4c58 <_post_loop+0x10>)
 80a4c54:	6018      	str	r0, [r3, #0]
}
 80a4c56:	bd08      	pop	{r3, pc}
 80a4c58:	200005dc 	.word	0x200005dc

080a4c5c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a4c5c:	4805      	ldr	r0, [pc, #20]	; (80a4c74 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a4c5e:	4a06      	ldr	r2, [pc, #24]	; (80a4c78 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a4c60:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a4c62:	1a12      	subs	r2, r2, r0
 80a4c64:	4905      	ldr	r1, [pc, #20]	; (80a4c7c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a4c66:	f004 f9b1 	bl	80a8fcc <memcpy>
    __backup_sram_signature = signature;
 80a4c6a:	4b05      	ldr	r3, [pc, #20]	; (80a4c80 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a4c6c:	4a05      	ldr	r2, [pc, #20]	; (80a4c84 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a4c6e:	601a      	str	r2, [r3, #0]
}
 80a4c70:	bd08      	pop	{r3, pc}
 80a4c72:	bf00      	nop
 80a4c74:	40024000 	.word	0x40024000
 80a4c78:	40024004 	.word	0x40024004
 80a4c7c:	080aa878 	.word	0x080aa878
 80a4c80:	40024000 	.word	0x40024000
 80a4c84:	9a271c1e 	.word	0x9a271c1e

080a4c88 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4c88:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a4c8a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4c8c:	461a      	mov	r2, r3
 80a4c8e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4c92:	9300      	str	r3, [sp, #0]
 80a4c94:	f7ff fb7e 	bl	80a4394 <system_ctrl_set_result>
}
 80a4c98:	b003      	add	sp, #12
 80a4c9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4ca0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a4ca0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a4ca2:	8843      	ldrh	r3, [r0, #2]
 80a4ca4:	2b0a      	cmp	r3, #10
 80a4ca6:	d008      	beq.n	80a4cba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a4ca8:	2b50      	cmp	r3, #80	; 0x50
 80a4caa:	d10b      	bne.n	80a4cc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a4cac:	4b09      	ldr	r3, [pc, #36]	; (80a4cd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a4cae:	681b      	ldr	r3, [r3, #0]
 80a4cb0:	b14b      	cbz	r3, 80a4cc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a4cb2:	b003      	add	sp, #12
 80a4cb4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a4cb8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a4cba:	f7ff ffe5 	bl	80a4c88 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a4cbe:	b003      	add	sp, #12
 80a4cc0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4cc4:	2300      	movs	r3, #0
 80a4cc6:	461a      	mov	r2, r3
 80a4cc8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4ccc:	9300      	str	r3, [sp, #0]
 80a4cce:	f7ff fb61 	bl	80a4394 <system_ctrl_set_result>
}
 80a4cd2:	e7f4      	b.n	80a4cbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a4cd4:	2000027c 	.word	0x2000027c

080a4cd8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a4cd8:	2100      	movs	r1, #0
{
 80a4cda:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a4cdc:	4811      	ldr	r0, [pc, #68]	; (80a4d24 <module_user_init_hook+0x4c>)
 80a4cde:	f7ff fc13 	bl	80a4508 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a4ce2:	4b11      	ldr	r3, [pc, #68]	; (80a4d28 <module_user_init_hook+0x50>)
 80a4ce4:	681a      	ldr	r2, [r3, #0]
 80a4ce6:	4b11      	ldr	r3, [pc, #68]	; (80a4d2c <module_user_init_hook+0x54>)
 80a4ce8:	429a      	cmp	r2, r3
 80a4cea:	bf0c      	ite	eq
 80a4cec:	2201      	moveq	r2, #1
 80a4cee:	2200      	movne	r2, #0
 80a4cf0:	4b0f      	ldr	r3, [pc, #60]	; (80a4d30 <module_user_init_hook+0x58>)
 80a4cf2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a4cf4:	d001      	beq.n	80a4cfa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a4cf6:	f7ff ffb1 	bl	80a4c5c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a4cfa:	f7ff f985 	bl	80a4008 <HAL_RNG_GetRandomNumber>
 80a4cfe:	4604      	mov	r4, r0
    srand(seed);
 80a4d00:	f004 f97a 	bl	80a8ff8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a4d04:	4b0b      	ldr	r3, [pc, #44]	; (80a4d34 <module_user_init_hook+0x5c>)
 80a4d06:	b113      	cbz	r3, 80a4d0e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a4d08:	4620      	mov	r0, r4
 80a4d0a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a4d0e:	2100      	movs	r1, #0
 80a4d10:	4808      	ldr	r0, [pc, #32]	; (80a4d34 <module_user_init_hook+0x5c>)
 80a4d12:	f7ff fbc1 	bl	80a4498 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a4d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a4d1a:	2100      	movs	r1, #0
 80a4d1c:	4806      	ldr	r0, [pc, #24]	; (80a4d38 <module_user_init_hook+0x60>)
 80a4d1e:	f7ff bb2f 	b.w	80a4380 <system_ctrl_set_app_request_handler>
 80a4d22:	bf00      	nop
 80a4d24:	080a4bdd 	.word	0x080a4bdd
 80a4d28:	40024000 	.word	0x40024000
 80a4d2c:	9a271c1e 	.word	0x9a271c1e
 80a4d30:	20000278 	.word	0x20000278
 80a4d34:	00000000 	.word	0x00000000
 80a4d38:	080a4ca1 	.word	0x080a4ca1

080a4d3c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a4d3c:	4770      	bx	lr

080a4d3e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4d40:	460e      	mov	r6, r1
 80a4d42:	2400      	movs	r4, #0
 80a4d44:	f100 0708 	add.w	r7, r0, #8
 80a4d48:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a4d4a:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a4d4e:	220a      	movs	r2, #10
 80a4d50:	4630      	mov	r0, r6
 80a4d52:	f7ff fd8d 	bl	80a4870 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4d56:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4d58:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a4d5a:	d101      	bne.n	80a4d60 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a4d5c:	4620      	mov	r0, r4
 80a4d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a4d60:	2c00      	cmp	r4, #0
 80a4d62:	d0f2      	beq.n	80a4d4a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a4d64:	212e      	movs	r1, #46	; 0x2e
 80a4d66:	4630      	mov	r0, r6
 80a4d68:	f7ff fd67 	bl	80a483a <_ZN5Print5printEc>
 80a4d6c:	4404      	add	r4, r0
 80a4d6e:	e7ec      	b.n	80a4d4a <_ZNK9IPAddress7printToER5Print+0xc>

080a4d70 <_ZN9IPAddressD0Ev>:
 80a4d70:	b510      	push	{r4, lr}
 80a4d72:	4604      	mov	r4, r0
 80a4d74:	2118      	movs	r1, #24
 80a4d76:	f7fb f994 	bl	80a00a2 <_ZdlPvj>
 80a4d7a:	4620      	mov	r0, r4
 80a4d7c:	bd10      	pop	{r4, pc}
	...

080a4d80 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a4d80:	b510      	push	{r4, lr}
 80a4d82:	4604      	mov	r4, r0
 80a4d84:	4b04      	ldr	r3, [pc, #16]	; (80a4d98 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a4d86:	2211      	movs	r2, #17
 80a4d88:	2100      	movs	r1, #0
 80a4d8a:	f840 3b04 	str.w	r3, [r0], #4
 80a4d8e:	f004 f92b 	bl	80a8fe8 <memset>
}
 80a4d92:	4620      	mov	r0, r4
 80a4d94:	bd10      	pop	{r4, pc}
 80a4d96:	bf00      	nop
 80a4d98:	080aa20c 	.word	0x080aa20c

080a4d9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4d9c:	4603      	mov	r3, r0
 80a4d9e:	4a07      	ldr	r2, [pc, #28]	; (80a4dbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4da0:	b510      	push	{r4, lr}
 80a4da2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a4da6:	f101 0210 	add.w	r2, r1, #16
 80a4daa:	f851 4b04 	ldr.w	r4, [r1], #4
 80a4dae:	4291      	cmp	r1, r2
 80a4db0:	f843 4b04 	str.w	r4, [r3], #4
 80a4db4:	d1f9      	bne.n	80a4daa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a4db6:	780a      	ldrb	r2, [r1, #0]
 80a4db8:	701a      	strb	r2, [r3, #0]
}
 80a4dba:	bd10      	pop	{r4, pc}
 80a4dbc:	080aa20c 	.word	0x080aa20c

080a4dc0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a4dc0:	4a02      	ldr	r2, [pc, #8]	; (80a4dcc <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a4dc2:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a4dc6:	2204      	movs	r2, #4
 80a4dc8:	7502      	strb	r2, [r0, #20]
}
 80a4dca:	4770      	bx	lr
 80a4dcc:	080aa20c 	.word	0x080aa20c

080a4dd0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a4dd0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a4dd2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a4dd6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a4dda:	2304      	movs	r3, #4
 80a4ddc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a4de0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a4de4:	6044      	str	r4, [r0, #4]
 80a4de6:	7503      	strb	r3, [r0, #20]
}
 80a4de8:	bd10      	pop	{r4, pc}
	...

080a4dec <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4dec:	b513      	push	{r0, r1, r4, lr}
 80a4dee:	4c04      	ldr	r4, [pc, #16]	; (80a4e00 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4df0:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a4df2:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a4df6:	9400      	str	r4, [sp, #0]
 80a4df8:	f7ff ffea 	bl	80a4dd0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4dfc:	b002      	add	sp, #8
 80a4dfe:	bd10      	pop	{r4, pc}
 80a4e00:	080aa20c 	.word	0x080aa20c

080a4e04 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4e04:	7441      	strb	r1, [r0, #17]
}
 80a4e06:	4770      	bx	lr

080a4e08 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4e08:	4770      	bx	lr

080a4e0a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a4e0a:	4770      	bx	lr

080a4e0c <_ZN9USBSerial4readEv>:
{
 80a4e0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a4e0e:	2100      	movs	r1, #0
 80a4e10:	7c00      	ldrb	r0, [r0, #16]
 80a4e12:	f7ff fa65 	bl	80a42e0 <HAL_USB_USART_Receive_Data>
}
 80a4e16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4e1a:	bd08      	pop	{r3, pc}

080a4e1c <_ZN9USBSerial4peekEv>:
{
 80a4e1c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a4e1e:	2101      	movs	r1, #1
 80a4e20:	7c00      	ldrb	r0, [r0, #16]
 80a4e22:	f7ff fa5d 	bl	80a42e0 <HAL_USB_USART_Receive_Data>
}
 80a4e26:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4e2a:	bd08      	pop	{r3, pc}

080a4e2c <_ZN9USBSerial17availableForWriteEv>:
{
 80a4e2c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a4e2e:	7c00      	ldrb	r0, [r0, #16]
 80a4e30:	f7ff fa4e 	bl	80a42d0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a4e34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4e38:	bd08      	pop	{r3, pc}

080a4e3a <_ZN9USBSerial9availableEv>:
{
 80a4e3a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a4e3c:	7c00      	ldrb	r0, [r0, #16]
 80a4e3e:	f7ff fa3f 	bl	80a42c0 <HAL_USB_USART_Available_Data>
}
 80a4e42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4e46:	bd08      	pop	{r3, pc}

080a4e48 <_ZN9USBSerial5writeEh>:
{
 80a4e48:	b538      	push	{r3, r4, r5, lr}
 80a4e4a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4e4c:	7c00      	ldrb	r0, [r0, #16]
{
 80a4e4e:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4e50:	f7ff fa3e 	bl	80a42d0 <HAL_USB_USART_Available_Data_For_Write>
 80a4e54:	2800      	cmp	r0, #0
 80a4e56:	dc01      	bgt.n	80a4e5c <_ZN9USBSerial5writeEh+0x14>
 80a4e58:	7c60      	ldrb	r0, [r4, #17]
 80a4e5a:	b128      	cbz	r0, 80a4e68 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a4e5c:	4629      	mov	r1, r5
 80a4e5e:	7c20      	ldrb	r0, [r4, #16]
 80a4e60:	f7ff fa46 	bl	80a42f0 <HAL_USB_USART_Send_Data>
 80a4e64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a4e68:	bd38      	pop	{r3, r4, r5, pc}

080a4e6a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a4e6a:	7c00      	ldrb	r0, [r0, #16]
 80a4e6c:	f7ff ba48 	b.w	80a4300 <HAL_USB_USART_Flush_Data>

080a4e70 <_ZN9USBSerialD0Ev>:
 80a4e70:	b510      	push	{r4, lr}
 80a4e72:	4604      	mov	r4, r0
 80a4e74:	2114      	movs	r1, #20
 80a4e76:	f7fb f914 	bl	80a00a2 <_ZdlPvj>
 80a4e7a:	4620      	mov	r0, r4
 80a4e7c:	bd10      	pop	{r4, pc}

080a4e7e <__tcf_1>:
 80a4e7e:	4770      	bx	lr

080a4e80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4e80:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a4e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4e86:	4604      	mov	r4, r0
 80a4e88:	4608      	mov	r0, r1
 80a4e8a:	2100      	movs	r1, #0
 80a4e8c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4e90:	4b04      	ldr	r3, [pc, #16]	; (80a4ea4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a4e92:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4e94:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a4e96:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a4e98:	4611      	mov	r1, r2
  _blocking = true;
 80a4e9a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a4e9c:	f7ff fa00 	bl	80a42a0 <HAL_USB_USART_Init>
}
 80a4ea0:	4620      	mov	r0, r4
 80a4ea2:	bd10      	pop	{r4, pc}
 80a4ea4:	080aa220 	.word	0x080aa220

080a4ea8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a4ea8:	2200      	movs	r2, #0
 80a4eaa:	7c00      	ldrb	r0, [r0, #16]
 80a4eac:	f7ff ba00 	b.w	80a42b0 <HAL_USB_USART_Begin>

080a4eb0 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
 80a4eb0:	7c00      	ldrb	r0, [r0, #16]
 80a4eb2:	f7ff ba2d 	b.w	80a4310 <HAL_USB_USART_Is_Enabled>

080a4eb6 <_ZN9USBSerialcvbEv>:
  return isEnabled();
 80a4eb6:	f7ff bffb 	b.w	80a4eb0 <_ZN9USBSerial9isEnabledEv>
	...

080a4ebc <_Z19acquireSerialBufferv>:
{
 80a4ebc:	b510      	push	{r4, lr}
 80a4ebe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a4ec0:	2214      	movs	r2, #20
 80a4ec2:	2100      	movs	r1, #0
 80a4ec4:	f004 f890 	bl	80a8fe8 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a4ec8:	4b05      	ldr	r3, [pc, #20]	; (80a4ee0 <_Z19acquireSerialBufferv+0x24>)
}
 80a4eca:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a4ecc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a4ece:	4b05      	ldr	r3, [pc, #20]	; (80a4ee4 <_Z19acquireSerialBufferv+0x28>)
 80a4ed0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a4ed2:	f240 1301 	movw	r3, #257	; 0x101
 80a4ed6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a4ed8:	2381      	movs	r3, #129	; 0x81
 80a4eda:	8223      	strh	r3, [r4, #16]
}
 80a4edc:	bd10      	pop	{r4, pc}
 80a4ede:	bf00      	nop
 80a4ee0:	200002b0 	.word	0x200002b0
 80a4ee4:	200003b1 	.word	0x200003b1

080a4ee8 <_Z16_fetch_usbserialv>:
{
 80a4ee8:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4eea:	4d0e      	ldr	r5, [pc, #56]	; (80a4f24 <_Z16_fetch_usbserialv+0x3c>)
{
 80a4eec:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a4eee:	a801      	add	r0, sp, #4
 80a4ef0:	f7ff ffe4 	bl	80a4ebc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4ef4:	7829      	ldrb	r1, [r5, #0]
 80a4ef6:	f3bf 8f5b 	dmb	ish
 80a4efa:	f011 0401 	ands.w	r4, r1, #1
 80a4efe:	d10e      	bne.n	80a4f1e <_Z16_fetch_usbserialv+0x36>
 80a4f00:	4628      	mov	r0, r5
 80a4f02:	f7fb f8db 	bl	80a00bc <__cxa_guard_acquire>
 80a4f06:	b150      	cbz	r0, 80a4f1e <_Z16_fetch_usbserialv+0x36>
 80a4f08:	4621      	mov	r1, r4
 80a4f0a:	aa01      	add	r2, sp, #4
 80a4f0c:	4806      	ldr	r0, [pc, #24]	; (80a4f28 <_Z16_fetch_usbserialv+0x40>)
 80a4f0e:	f7ff ffb7 	bl	80a4e80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4f12:	4628      	mov	r0, r5
 80a4f14:	f7fb f8d7 	bl	80a00c6 <__cxa_guard_release>
 80a4f18:	4804      	ldr	r0, [pc, #16]	; (80a4f2c <_Z16_fetch_usbserialv+0x44>)
 80a4f1a:	f004 f851 	bl	80a8fc0 <atexit>
	return _usbserial;
}
 80a4f1e:	4802      	ldr	r0, [pc, #8]	; (80a4f28 <_Z16_fetch_usbserialv+0x40>)
 80a4f20:	b007      	add	sp, #28
 80a4f22:	bd30      	pop	{r4, r5, pc}
 80a4f24:	20000280 	.word	0x20000280
 80a4f28:	20000288 	.word	0x20000288
 80a4f2c:	080a4e09 	.word	0x080a4e09

080a4f30 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a4f30:	b510      	push	{r4, lr}
 80a4f32:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a4f34:	2214      	movs	r2, #20
 80a4f36:	2100      	movs	r1, #0
 80a4f38:	f004 f856 	bl	80a8fe8 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a4f3c:	4b05      	ldr	r3, [pc, #20]	; (80a4f54 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4f3e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a4f40:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a4f42:	4b05      	ldr	r3, [pc, #20]	; (80a4f58 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a4f44:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a4f46:	f240 1301 	movw	r3, #257	; 0x101
 80a4f4a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a4f4c:	2381      	movs	r3, #129	; 0x81
 80a4f4e:	8223      	strh	r3, [r4, #16]
}
 80a4f50:	bd10      	pop	{r4, pc}
 80a4f52:	bf00      	nop
 80a4f54:	20000432 	.word	0x20000432
 80a4f58:	20000533 	.word	0x20000533

080a4f5c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a4f5c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4f5e:	4c0e      	ldr	r4, [pc, #56]	; (80a4f98 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a4f60:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a4f62:	a801      	add	r0, sp, #4
 80a4f64:	f7ff ffe4 	bl	80a4f30 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4f68:	7823      	ldrb	r3, [r4, #0]
 80a4f6a:	f3bf 8f5b 	dmb	ish
 80a4f6e:	07db      	lsls	r3, r3, #31
 80a4f70:	d40e      	bmi.n	80a4f90 <_Z17_fetch_usbserial1v+0x34>
 80a4f72:	4620      	mov	r0, r4
 80a4f74:	f7fb f8a2 	bl	80a00bc <__cxa_guard_acquire>
 80a4f78:	b150      	cbz	r0, 80a4f90 <_Z17_fetch_usbserial1v+0x34>
 80a4f7a:	2101      	movs	r1, #1
 80a4f7c:	aa01      	add	r2, sp, #4
 80a4f7e:	4807      	ldr	r0, [pc, #28]	; (80a4f9c <_Z17_fetch_usbserial1v+0x40>)
 80a4f80:	f7ff ff7e 	bl	80a4e80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4f84:	4620      	mov	r0, r4
 80a4f86:	f7fb f89e 	bl	80a00c6 <__cxa_guard_release>
 80a4f8a:	4805      	ldr	r0, [pc, #20]	; (80a4fa0 <_Z17_fetch_usbserial1v+0x44>)
 80a4f8c:	f004 f818 	bl	80a8fc0 <atexit>
  return _usbserial1;
}
 80a4f90:	4802      	ldr	r0, [pc, #8]	; (80a4f9c <_Z17_fetch_usbserial1v+0x40>)
 80a4f92:	b006      	add	sp, #24
 80a4f94:	bd10      	pop	{r4, pc}
 80a4f96:	bf00      	nop
 80a4f98:	20000284 	.word	0x20000284
 80a4f9c:	2000029c 	.word	0x2000029c
 80a4fa0:	080a4e7f 	.word	0x080a4e7f

080a4fa4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a4fa4:	4700      	bx	r0
	...

080a4fa8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a4fa8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
 80a4fac:	2400      	movs	r4, #0
{
 80a4fae:	461d      	mov	r5, r3
 80a4fb0:	460f      	mov	r7, r1
 80a4fb2:	4690      	mov	r8, r2
 80a4fb4:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 80a4fb6:	f7ff f817 	bl	80a3fe8 <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a4fba:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a4fbc:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a4fbe:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 80a4fc2:	bfa8      	it	ge
 80a4fc4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {};
 80a4fc8:	f8ad 400d 	strh.w	r4, [sp, #13]
 80a4fcc:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 80a4fd0:	bfa4      	itt	ge
 80a4fd2:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 80a4fd4:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a4fd8:	463a      	mov	r2, r7
 80a4fda:	4643      	mov	r3, r8
 80a4fdc:	4630      	mov	r0, r6
 80a4fde:	4906      	ldr	r1, [pc, #24]	; (80a4ff8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 80a4fe0:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a4fe2:	bfa8      	it	ge
 80a4fe4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a4fe8:	f7fe fff6 	bl	80a3fd8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 80a4fec:	fab0 f080 	clz	r0, r0
 80a4ff0:	0940      	lsrs	r0, r0, #5
 80a4ff2:	b004      	add	sp, #16
 80a4ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4ff8:	080a4fa5 	.word	0x080a4fa5

080a4ffc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a4ffc:	4770      	bx	lr

080a4ffe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4ffe:	7441      	strb	r1, [r0, #17]
}
 80a5000:	4770      	bx	lr

080a5002 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a5002:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a5004:	7c00      	ldrb	r0, [r0, #16]
 80a5006:	f7ff f897 	bl	80a4138 <hal_usart_available_data_for_write>
}
 80a500a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a500e:	bd08      	pop	{r3, pc}

080a5010 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a5010:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a5012:	7c00      	ldrb	r0, [r0, #16]
 80a5014:	f7ff f868 	bl	80a40e8 <hal_usart_available>
}
 80a5018:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a501c:	bd08      	pop	{r3, pc}

080a501e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a501e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a5020:	7c00      	ldrb	r0, [r0, #16]
 80a5022:	f7ff f871 	bl	80a4108 <hal_usart_peek>
}
 80a5026:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a502a:	bd08      	pop	{r3, pc}

080a502c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a502c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a502e:	7c00      	ldrb	r0, [r0, #16]
 80a5030:	f7ff f862 	bl	80a40f8 <hal_usart_read>
}
 80a5034:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a5038:	bd08      	pop	{r3, pc}

080a503a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a503a:	7c00      	ldrb	r0, [r0, #16]
 80a503c:	f7ff b86c 	b.w	80a4118 <hal_usart_flush>

080a5040 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a5040:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a5042:	7c46      	ldrb	r6, [r0, #17]
{
 80a5044:	4604      	mov	r4, r0
 80a5046:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a5048:	b12e      	cbz	r6, 80a5056 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a504a:	4629      	mov	r1, r5
 80a504c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a504e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a5052:	f7ff b841 	b.w	80a40d8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a5056:	7c00      	ldrb	r0, [r0, #16]
 80a5058:	f7ff f86e 	bl	80a4138 <hal_usart_available_data_for_write>
 80a505c:	2800      	cmp	r0, #0
 80a505e:	dcf4      	bgt.n	80a504a <_ZN11USARTSerial5writeEh+0xa>
}
 80a5060:	4630      	mov	r0, r6
 80a5062:	bd70      	pop	{r4, r5, r6, pc}

080a5064 <_ZN11USARTSerialD0Ev>:
 80a5064:	b510      	push	{r4, lr}
 80a5066:	4604      	mov	r4, r0
 80a5068:	2114      	movs	r1, #20
 80a506a:	f7fb f81a 	bl	80a00a2 <_ZdlPvj>
 80a506e:	4620      	mov	r0, r4
 80a5070:	bd10      	pop	{r4, pc}
	...

080a5074 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a5074:	b510      	push	{r4, lr}
 80a5076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a507a:	4604      	mov	r4, r0
 80a507c:	4608      	mov	r0, r1
 80a507e:	4611      	mov	r1, r2
 80a5080:	2200      	movs	r2, #0
 80a5082:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a5086:	4b04      	ldr	r3, [pc, #16]	; (80a5098 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a5088:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a508a:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a508c:	2301      	movs	r3, #1
 80a508e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a5090:	f7ff f85a 	bl	80a4148 <hal_usart_init_ex>
}
 80a5094:	4620      	mov	r0, r4
 80a5096:	bd10      	pop	{r4, pc}
 80a5098:	080aa250 	.word	0x080aa250

080a509c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a509c:	4770      	bx	lr

080a509e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a509e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a50a0:	4606      	mov	r6, r0
 80a50a2:	4615      	mov	r5, r2
 80a50a4:	460c      	mov	r4, r1
 80a50a6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a50a8:	42bc      	cmp	r4, r7
 80a50aa:	d006      	beq.n	80a50ba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a50ac:	6833      	ldr	r3, [r6, #0]
 80a50ae:	4630      	mov	r0, r6
 80a50b0:	689b      	ldr	r3, [r3, #8]
 80a50b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a50b6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a50b8:	e7f6      	b.n	80a50a8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a50ba:	4628      	mov	r0, r5
 80a50bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a50be <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a50be:	2200      	movs	r2, #0
 80a50c0:	7c00      	ldrb	r0, [r0, #16]
 80a50c2:	f7ff b869 	b.w	80a4198 <hal_i2c_write>

080a50c6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a50c6:	2100      	movs	r1, #0
 80a50c8:	7c00      	ldrb	r0, [r0, #16]
 80a50ca:	f7ff b86d 	b.w	80a41a8 <hal_i2c_available>

080a50ce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a50ce:	2100      	movs	r1, #0
 80a50d0:	7c00      	ldrb	r0, [r0, #16]
 80a50d2:	f7ff b871 	b.w	80a41b8 <hal_i2c_read>

080a50d6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a50d6:	2100      	movs	r1, #0
 80a50d8:	7c00      	ldrb	r0, [r0, #16]
 80a50da:	f7ff b875 	b.w	80a41c8 <hal_i2c_peek>

080a50de <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a50de:	2100      	movs	r1, #0
 80a50e0:	7c00      	ldrb	r0, [r0, #16]
 80a50e2:	f7ff b879 	b.w	80a41d8 <hal_i2c_flush>

080a50e6 <_ZN7TwoWireD0Ev>:
 80a50e6:	b510      	push	{r4, lr}
 80a50e8:	4604      	mov	r4, r0
 80a50ea:	2114      	movs	r1, #20
 80a50ec:	f7fa ffd9 	bl	80a00a2 <_ZdlPvj>
 80a50f0:	4620      	mov	r0, r4
 80a50f2:	bd10      	pop	{r4, pc}

080a50f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a50f4:	b510      	push	{r4, lr}
 80a50f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a50fa:	4604      	mov	r4, r0
 80a50fc:	4608      	mov	r0, r1
 80a50fe:	2100      	movs	r1, #0
 80a5100:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a5104:	4b03      	ldr	r3, [pc, #12]	; (80a5114 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a5106:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a5108:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a510a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a510c:	f7ff f874 	bl	80a41f8 <hal_i2c_init>
}
 80a5110:	4620      	mov	r0, r4
 80a5112:	bd10      	pop	{r4, pc}
 80a5114:	080aa280 	.word	0x080aa280

080a5118 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a5118:	2200      	movs	r2, #0
 80a511a:	7c00      	ldrb	r0, [r0, #16]
 80a511c:	f7ff b81c 	b.w	80a4158 <hal_i2c_set_speed>

080a5120 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a5120:	2300      	movs	r3, #0
 80a5122:	7c00      	ldrb	r0, [r0, #16]
 80a5124:	461a      	mov	r2, r3
 80a5126:	4619      	mov	r1, r3
 80a5128:	f7ff b81e 	b.w	80a4168 <hal_i2c_begin>

080a512c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a512c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a512e:	2200      	movs	r2, #0
 80a5130:	2314      	movs	r3, #20
 80a5132:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a5136:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a513a:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a513c:	7c00      	ldrb	r0, [r0, #16]
 80a513e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a5142:	684b      	ldr	r3, [r1, #4]
 80a5144:	9303      	str	r3, [sp, #12]
 80a5146:	68cb      	ldr	r3, [r1, #12]
 80a5148:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a514a:	7a0b      	ldrb	r3, [r1, #8]
 80a514c:	a901      	add	r1, sp, #4
 80a514e:	9305      	str	r3, [sp, #20]
 80a5150:	f7ff f85c 	bl	80a420c <hal_i2c_request_ex>
}
 80a5154:	b007      	add	sp, #28
 80a5156:	f85d fb04 	ldr.w	pc, [sp], #4

080a515a <_ZN7TwoWire11requestFromEhjh>:
{
 80a515a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a515c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a515e:	f88d 1000 	strb.w	r1, [sp]
 80a5162:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a5166:	bf18      	it	ne
 80a5168:	2301      	movne	r3, #1
 80a516a:	9103      	str	r1, [sp, #12]
 80a516c:	4669      	mov	r1, sp
    size_ = size;
 80a516e:	9201      	str	r2, [sp, #4]
 80a5170:	f88d 3008 	strb.w	r3, [sp, #8]
 80a5174:	f7ff ffda 	bl	80a512c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a5178:	b005      	add	sp, #20
 80a517a:	f85d fb04 	ldr.w	pc, [sp], #4

080a517e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a517e:	2301      	movs	r3, #1
 80a5180:	f7ff bfeb 	b.w	80a515a <_ZN7TwoWire11requestFromEhjh>

080a5184 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a5184:	2200      	movs	r2, #0
 80a5186:	7c00      	ldrb	r0, [r0, #16]
 80a5188:	f7fe bff6 	b.w	80a4178 <hal_i2c_begin_transmission>

080a518c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a518c:	2200      	movs	r2, #0
 80a518e:	7c00      	ldrb	r0, [r0, #16]
 80a5190:	f7fe bffa 	b.w	80a4188 <hal_i2c_end_transmission>

080a5194 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a5194:	2101      	movs	r1, #1
 80a5196:	f7ff bff9 	b.w	80a518c <_ZN7TwoWire15endTransmissionEh>

080a519a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a519a:	2200      	movs	r2, #0
 80a519c:	6840      	ldr	r0, [r0, #4]
 80a519e:	4611      	mov	r1, r2
 80a51a0:	f7ff b91a 	b.w	80a43d8 <network_ready>

080a51a4 <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a51a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a51a6:	4615      	mov	r5, r2
 80a51a8:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a51aa:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a51ac:	460e      	mov	r6, r1
 80a51ae:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a51b0:	2100      	movs	r1, #0
 80a51b2:	a803      	add	r0, sp, #12
 80a51b4:	f003 ff18 	bl	80a8fe8 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a51b8:	4628      	mov	r0, r5
 80a51ba:	f003 ff53 	bl	80a9064 <strlen>
 80a51be:	2700      	movs	r7, #0
 80a51c0:	b281      	uxth	r1, r0
 80a51c2:	6873      	ldr	r3, [r6, #4]
 80a51c4:	4628      	mov	r0, r5
 80a51c6:	9700      	str	r7, [sp, #0]
 80a51c8:	aa03      	add	r2, sp, #12
 80a51ca:	f7ff f8a9 	bl	80a4320 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a51ce:	b130      	cbz	r0, 80a51de <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a51d0:	4639      	mov	r1, r7
 80a51d2:	4620      	mov	r0, r4
 80a51d4:	f7ff fdf4 	bl	80a4dc0 <_ZN9IPAddressC1Em>
    }
 80a51d8:	4620      	mov	r0, r4
 80a51da:	b009      	add	sp, #36	; 0x24
 80a51dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a51de:	4620      	mov	r0, r4
 80a51e0:	a903      	add	r1, sp, #12
 80a51e2:	f7ff fddb 	bl	80a4d9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a51e6:	e7f7      	b.n	80a51d8 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a51e8 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a51e8:	2200      	movs	r2, #0
 80a51ea:	6840      	ldr	r0, [r0, #4]
 80a51ec:	4611      	mov	r1, r2
 80a51ee:	f7ff b913 	b.w	80a4418 <network_listening>

080a51f2 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a51f2:	2200      	movs	r2, #0
 80a51f4:	6840      	ldr	r0, [r0, #4]
 80a51f6:	4611      	mov	r1, r2
 80a51f8:	f7ff b91e 	b.w	80a4438 <network_get_listen_timeout>

080a51fc <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a51fc:	2200      	movs	r2, #0
 80a51fe:	6840      	ldr	r0, [r0, #4]
 80a5200:	f7ff b912 	b.w	80a4428 <network_set_listen_timeout>

080a5204 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a5204:	2200      	movs	r2, #0
 80a5206:	6840      	ldr	r0, [r0, #4]
 80a5208:	f081 0101 	eor.w	r1, r1, #1
 80a520c:	f7ff b8fc 	b.w	80a4408 <network_listen>

080a5210 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a5210:	2300      	movs	r3, #0
 80a5212:	6840      	ldr	r0, [r0, #4]
 80a5214:	461a      	mov	r2, r3
 80a5216:	4619      	mov	r1, r3
 80a5218:	f7ff b8ee 	b.w	80a43f8 <network_off>

080a521c <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a521c:	2200      	movs	r2, #0
 80a521e:	6840      	ldr	r0, [r0, #4]
 80a5220:	4611      	mov	r1, r2
 80a5222:	f7ff b8c9 	b.w	80a43b8 <network_connecting>

080a5226 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a5226:	2200      	movs	r2, #0
 80a5228:	2102      	movs	r1, #2
 80a522a:	6840      	ldr	r0, [r0, #4]
 80a522c:	f7ff b8cc 	b.w	80a43c8 <network_disconnect>

080a5230 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a5230:	2300      	movs	r3, #0
 80a5232:	6840      	ldr	r0, [r0, #4]
 80a5234:	461a      	mov	r2, r3
 80a5236:	f7ff b8b7 	b.w	80a43a8 <network_connect>
	...

080a523c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a523c:	2204      	movs	r2, #4
 80a523e:	4b02      	ldr	r3, [pc, #8]	; (80a5248 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a5240:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a5242:	4a02      	ldr	r2, [pc, #8]	; (80a524c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a5244:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a5246:	4770      	bx	lr
 80a5248:	200005b4 	.word	0x200005b4
 80a524c:	080aa2a8 	.word	0x080aa2a8

080a5250 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a5250:	2300      	movs	r3, #0
 80a5252:	6840      	ldr	r0, [r0, #4]
 80a5254:	461a      	mov	r2, r3
 80a5256:	f7ff b8a7 	b.w	80a43a8 <network_connect>

080a525a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a525a:	2200      	movs	r2, #0
 80a525c:	2102      	movs	r1, #2
 80a525e:	6840      	ldr	r0, [r0, #4]
 80a5260:	f7ff b8b2 	b.w	80a43c8 <network_disconnect>

080a5264 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a5264:	2200      	movs	r2, #0
 80a5266:	6840      	ldr	r0, [r0, #4]
 80a5268:	4611      	mov	r1, r2
 80a526a:	f7ff b8a5 	b.w	80a43b8 <network_connecting>

080a526e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a526e:	2200      	movs	r2, #0
 80a5270:	6840      	ldr	r0, [r0, #4]
 80a5272:	4611      	mov	r1, r2
 80a5274:	f7ff b8b0 	b.w	80a43d8 <network_ready>

080a5278 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a5278:	2300      	movs	r3, #0
 80a527a:	6840      	ldr	r0, [r0, #4]
 80a527c:	461a      	mov	r2, r3
 80a527e:	4619      	mov	r1, r3
 80a5280:	f7ff b8b2 	b.w	80a43e8 <network_on>

080a5284 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a5284:	2300      	movs	r3, #0
 80a5286:	6840      	ldr	r0, [r0, #4]
 80a5288:	461a      	mov	r2, r3
 80a528a:	4619      	mov	r1, r3
 80a528c:	f7ff b8b4 	b.w	80a43f8 <network_off>

080a5290 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a5290:	2100      	movs	r1, #0
 80a5292:	6840      	ldr	r0, [r0, #4]
 80a5294:	f7ff b8d8 	b.w	80a4448 <network_is_on>

080a5298 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a5298:	2100      	movs	r1, #0
 80a529a:	6840      	ldr	r0, [r0, #4]
 80a529c:	f7ff b8dc 	b.w	80a4458 <network_is_off>

080a52a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a52a0:	2200      	movs	r2, #0
 80a52a2:	6840      	ldr	r0, [r0, #4]
 80a52a4:	f081 0101 	eor.w	r1, r1, #1
 80a52a8:	f7ff b8ae 	b.w	80a4408 <network_listen>

080a52ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a52ac:	2200      	movs	r2, #0
 80a52ae:	6840      	ldr	r0, [r0, #4]
 80a52b0:	f7ff b8ba 	b.w	80a4428 <network_set_listen_timeout>

080a52b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a52b4:	2200      	movs	r2, #0
 80a52b6:	6840      	ldr	r0, [r0, #4]
 80a52b8:	4611      	mov	r1, r2
 80a52ba:	f7ff b8bd 	b.w	80a4438 <network_get_listen_timeout>

080a52be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a52be:	2200      	movs	r2, #0
 80a52c0:	6840      	ldr	r0, [r0, #4]
 80a52c2:	4611      	mov	r1, r2
 80a52c4:	f7ff b8a8 	b.w	80a4418 <network_listening>

080a52c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a52c8:	b570      	push	{r4, r5, r6, lr}
 80a52ca:	4615      	mov	r5, r2
 80a52cc:	b08e      	sub	sp, #56	; 0x38
 80a52ce:	4604      	mov	r4, r0
    IPAddress addr;
 80a52d0:	a808      	add	r0, sp, #32
 80a52d2:	f7ff fd55 	bl	80a4d80 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a52d6:	2211      	movs	r2, #17
 80a52d8:	2100      	movs	r1, #0
 80a52da:	a803      	add	r0, sp, #12
 80a52dc:	f003 fe84 	bl	80a8fe8 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a52e0:	2600      	movs	r6, #0
 80a52e2:	4628      	mov	r0, r5
 80a52e4:	f003 febe 	bl	80a9064 <strlen>
 80a52e8:	4b0a      	ldr	r3, [pc, #40]	; (80a5314 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a52ea:	9600      	str	r6, [sp, #0]
 80a52ec:	b281      	uxth	r1, r0
 80a52ee:	685b      	ldr	r3, [r3, #4]
 80a52f0:	4628      	mov	r0, r5
 80a52f2:	aa03      	add	r2, sp, #12
 80a52f4:	f7ff f814 	bl	80a4320 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a52f8:	b130      	cbz	r0, 80a5308 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a52fa:	4631      	mov	r1, r6
 80a52fc:	4620      	mov	r0, r4
 80a52fe:	f7ff fd5f 	bl	80a4dc0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a5302:	4620      	mov	r0, r4
 80a5304:	b00e      	add	sp, #56	; 0x38
 80a5306:	bd70      	pop	{r4, r5, r6, pc}
 80a5308:	4620      	mov	r0, r4
 80a530a:	a903      	add	r1, sp, #12
 80a530c:	f7ff fd46 	bl	80a4d9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a5310:	e7f7      	b.n	80a5302 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a5312:	bf00      	nop
 80a5314:	200005b4 	.word	0x200005b4

080a5318 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a5318:	4b02      	ldr	r3, [pc, #8]	; (80a5324 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a531a:	4a03      	ldr	r2, [pc, #12]	; (80a5328 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a531c:	601a      	str	r2, [r3, #0]
 80a531e:	2200      	movs	r2, #0
 80a5320:	605a      	str	r2, [r3, #4]

} // spark
 80a5322:	4770      	bx	lr
 80a5324:	200005bc 	.word	0x200005bc
 80a5328:	080aa2e4 	.word	0x080aa2e4

080a532c <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a532c:	4b02      	ldr	r3, [pc, #8]	; (80a5338 <__tcf_0+0xc>)
 80a532e:	6898      	ldr	r0, [r3, #8]
 80a5330:	b108      	cbz	r0, 80a5336 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a5332:	f7fe beb9 	b.w	80a40a8 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a5336:	4770      	bx	lr
 80a5338:	20000244 	.word	0x20000244

080a533c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a533c:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a533e:	b570      	push	{r4, r5, r6, lr}
 80a5340:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a5342:	d901      	bls.n	80a5348 <pinAvailable+0xc>
    return false;
 80a5344:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a5346:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a5348:	f1a0 030d 	sub.w	r3, r0, #13
 80a534c:	2b02      	cmp	r3, #2
 80a534e:	d90b      	bls.n	80a5368 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a5350:	2801      	cmp	r0, #1
 80a5352:	d824      	bhi.n	80a539e <pinAvailable+0x62>
 80a5354:	f000 f904 	bl	80a5560 <_Z19__fetch_global_Wirev>
 80a5358:	2100      	movs	r1, #0
 80a535a:	7c00      	ldrb	r0, [r0, #16]
 80a535c:	f7fe ff44 	bl	80a41e8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a5360:	f080 0001 	eor.w	r0, r0, #1
 80a5364:	b2c0      	uxtb	r0, r0
 80a5366:	e7ee      	b.n	80a5346 <pinAvailable+0xa>
 80a5368:	4e12      	ldr	r6, [pc, #72]	; (80a53b4 <pinAvailable+0x78>)
 80a536a:	7831      	ldrb	r1, [r6, #0]
 80a536c:	f3bf 8f5b 	dmb	ish
 80a5370:	f011 0501 	ands.w	r5, r1, #1
 80a5374:	d10d      	bne.n	80a5392 <pinAvailable+0x56>
 80a5376:	4630      	mov	r0, r6
 80a5378:	f7fa fea0 	bl	80a00bc <__cxa_guard_acquire>
 80a537c:	b148      	cbz	r0, 80a5392 <pinAvailable+0x56>
 80a537e:	4629      	mov	r1, r5
 80a5380:	480d      	ldr	r0, [pc, #52]	; (80a53b8 <pinAvailable+0x7c>)
 80a5382:	f7ff f8cd 	bl	80a4520 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a5386:	4630      	mov	r0, r6
 80a5388:	f7fa fe9d 	bl	80a00c6 <__cxa_guard_release>
 80a538c:	480b      	ldr	r0, [pc, #44]	; (80a53bc <pinAvailable+0x80>)
 80a538e:	f003 fe17 	bl	80a8fc0 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a5392:	4b09      	ldr	r3, [pc, #36]	; (80a53b8 <pinAvailable+0x7c>)
 80a5394:	7818      	ldrb	r0, [r3, #0]
 80a5396:	f7fe ff5b 	bl	80a4250 <hal_spi_is_enabled>
 80a539a:	2800      	cmp	r0, #0
 80a539c:	d1d2      	bne.n	80a5344 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a539e:	3c12      	subs	r4, #18
 80a53a0:	2c01      	cmp	r4, #1
 80a53a2:	d805      	bhi.n	80a53b0 <pinAvailable+0x74>
 80a53a4:	f000 f87c 	bl	80a54a0 <_Z22__fetch_global_Serial1v>
 80a53a8:	7c00      	ldrb	r0, [r0, #16]
 80a53aa:	f7fe febd 	bl	80a4128 <hal_usart_is_enabled>
 80a53ae:	e7d7      	b.n	80a5360 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a53b0:	2001      	movs	r0, #1
 80a53b2:	e7c8      	b.n	80a5346 <pinAvailable+0xa>
 80a53b4:	20000240 	.word	0x20000240
 80a53b8:	20000244 	.word	0x20000244
 80a53bc:	080a532d 	.word	0x080a532d

080a53c0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a53c0:	2817      	cmp	r0, #23
{
 80a53c2:	b538      	push	{r3, r4, r5, lr}
 80a53c4:	4604      	mov	r4, r0
 80a53c6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a53c8:	d80a      	bhi.n	80a53e0 <pinMode+0x20>
 80a53ca:	29ff      	cmp	r1, #255	; 0xff
 80a53cc:	d008      	beq.n	80a53e0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a53ce:	f7ff ffb5 	bl	80a533c <pinAvailable>
 80a53d2:	b128      	cbz	r0, 80a53e0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a53d4:	4629      	mov	r1, r5
 80a53d6:	4620      	mov	r0, r4
}
 80a53d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a53dc:	f7fe bddc 	b.w	80a3f98 <HAL_Pin_Mode>
}
 80a53e0:	bd38      	pop	{r3, r4, r5, pc}

080a53e2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a53e2:	b538      	push	{r3, r4, r5, lr}
 80a53e4:	4604      	mov	r4, r0
 80a53e6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a53e8:	f7fe fdde 	bl	80a3fa8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a53ec:	28ff      	cmp	r0, #255	; 0xff
 80a53ee:	d010      	beq.n	80a5412 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a53f0:	2806      	cmp	r0, #6
 80a53f2:	d804      	bhi.n	80a53fe <digitalWrite+0x1c>
 80a53f4:	234d      	movs	r3, #77	; 0x4d
 80a53f6:	fa23 f000 	lsr.w	r0, r3, r0
 80a53fa:	07c3      	lsls	r3, r0, #31
 80a53fc:	d409      	bmi.n	80a5412 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a53fe:	4620      	mov	r0, r4
 80a5400:	f7ff ff9c 	bl	80a533c <pinAvailable>
 80a5404:	b128      	cbz	r0, 80a5412 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a5406:	4629      	mov	r1, r5
 80a5408:	4620      	mov	r0, r4
}
 80a540a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a540e:	f7fe bdd3 	b.w	80a3fb8 <HAL_GPIO_Write>
}
 80a5412:	bd38      	pop	{r3, r4, r5, pc}

080a5414 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a5414:	b510      	push	{r4, lr}
 80a5416:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a5418:	f7fe fdc6 	bl	80a3fa8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a541c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a541e:	b2db      	uxtb	r3, r3
 80a5420:	2b01      	cmp	r3, #1
 80a5422:	d908      	bls.n	80a5436 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a5424:	4620      	mov	r0, r4
 80a5426:	f7ff ff89 	bl	80a533c <pinAvailable>
 80a542a:	b120      	cbz	r0, 80a5436 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a542c:	4620      	mov	r0, r4
}
 80a542e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a5432:	f7fe bdc9 	b.w	80a3fc8 <HAL_GPIO_Read>
}
 80a5436:	2000      	movs	r0, #0
 80a5438:	bd10      	pop	{r4, pc}

080a543a <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a543a:	b510      	push	{r4, lr}
 80a543c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
 80a543e:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a5440:	bf9c      	itt	ls
 80a5442:	340a      	addls	r4, #10
 80a5444:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
 80a5446:	4620      	mov	r0, r4
 80a5448:	f7ff ff78 	bl	80a533c <pinAvailable>
 80a544c:	b150      	cbz	r0, 80a5464 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a544e:	2103      	movs	r1, #3
 80a5450:	4620      	mov	r0, r4
 80a5452:	f7fe fd99 	bl	80a3f88 <HAL_Validate_Pin_Function>
 80a5456:	2803      	cmp	r0, #3
 80a5458:	d104      	bne.n	80a5464 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a545a:	4620      	mov	r0, r4
}
 80a545c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a5460:	f7fe bdca 	b.w	80a3ff8 <hal_adc_read>
}
 80a5464:	2000      	movs	r0, #0
 80a5466:	bd10      	pop	{r4, pc}

080a5468 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a5468:	4770      	bx	lr
	...

080a546c <_Z20acquireSerial1Bufferv>:
{
 80a546c:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a546e:	2514      	movs	r5, #20
{
 80a5470:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a5472:	462a      	mov	r2, r5
 80a5474:	2100      	movs	r1, #0
 80a5476:	f003 fdb7 	bl	80a8fe8 <memset>
 80a547a:	8025      	strh	r5, [r4, #0]
 80a547c:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a547e:	4e07      	ldr	r6, [pc, #28]	; (80a549c <_Z20acquireSerial1Bufferv+0x30>)
 80a5480:	4628      	mov	r0, r5
 80a5482:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a5484:	8125      	strh	r5, [r4, #8]
 80a5486:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a5488:	f000 f88e 	bl	80a55a8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a548c:	4631      	mov	r1, r6
    };
 80a548e:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a5490:	4628      	mov	r0, r5
 80a5492:	f000 f889 	bl	80a55a8 <_ZnajRKSt9nothrow_t>
    };
 80a5496:	60e0      	str	r0, [r4, #12]
}
 80a5498:	4620      	mov	r0, r4
 80a549a:	bd70      	pop	{r4, r5, r6, pc}
 80a549c:	080aa318 	.word	0x080aa318

080a54a0 <_Z22__fetch_global_Serial1v>:
{
 80a54a0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a54a2:	4d0e      	ldr	r5, [pc, #56]	; (80a54dc <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a54a4:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a54a6:	7829      	ldrb	r1, [r5, #0]
 80a54a8:	f3bf 8f5b 	dmb	ish
 80a54ac:	f011 0401 	ands.w	r4, r1, #1
 80a54b0:	d111      	bne.n	80a54d6 <_Z22__fetch_global_Serial1v+0x36>
 80a54b2:	4628      	mov	r0, r5
 80a54b4:	f7fa fe02 	bl	80a00bc <__cxa_guard_acquire>
 80a54b8:	b168      	cbz	r0, 80a54d6 <_Z22__fetch_global_Serial1v+0x36>
 80a54ba:	a801      	add	r0, sp, #4
 80a54bc:	f7ff ffd6 	bl	80a546c <_Z20acquireSerial1Bufferv>
 80a54c0:	4621      	mov	r1, r4
 80a54c2:	aa01      	add	r2, sp, #4
 80a54c4:	4806      	ldr	r0, [pc, #24]	; (80a54e0 <_Z22__fetch_global_Serial1v+0x40>)
 80a54c6:	f7ff fdd5 	bl	80a5074 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a54ca:	4628      	mov	r0, r5
 80a54cc:	f7fa fdfb 	bl	80a00c6 <__cxa_guard_release>
 80a54d0:	4804      	ldr	r0, [pc, #16]	; (80a54e4 <_Z22__fetch_global_Serial1v+0x44>)
 80a54d2:	f003 fd75 	bl	80a8fc0 <atexit>
    return serial1;
}
 80a54d6:	4802      	ldr	r0, [pc, #8]	; (80a54e0 <_Z22__fetch_global_Serial1v+0x40>)
 80a54d8:	b007      	add	sp, #28
 80a54da:	bd30      	pop	{r4, r5, pc}
 80a54dc:	200005c4 	.word	0x200005c4
 80a54e0:	200005c8 	.word	0x200005c8
 80a54e4:	080a5469 	.word	0x080a5469

080a54e8 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a54e8:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a54ea:	4c08      	ldr	r4, [pc, #32]	; (80a550c <_Z21__fetch_global_EEPROMv+0x24>)
 80a54ec:	7823      	ldrb	r3, [r4, #0]
 80a54ee:	f3bf 8f5b 	dmb	ish
 80a54f2:	07db      	lsls	r3, r3, #31
 80a54f4:	d408      	bmi.n	80a5508 <_Z21__fetch_global_EEPROMv+0x20>
 80a54f6:	4620      	mov	r0, r4
 80a54f8:	f7fa fde0 	bl	80a00bc <__cxa_guard_acquire>
 80a54fc:	b120      	cbz	r0, 80a5508 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a54fe:	f7fe fd9b 	bl	80a4038 <HAL_EEPROM_Init>
 80a5502:	4620      	mov	r0, r4
 80a5504:	f7fa fddf 	bl	80a00c6 <__cxa_guard_release>
	return eeprom;
}
 80a5508:	4801      	ldr	r0, [pc, #4]	; (80a5510 <_Z21__fetch_global_EEPROMv+0x28>)
 80a550a:	bd10      	pop	{r4, pc}
 80a550c:	200005e0 	.word	0x200005e0
 80a5510:	200005e4 	.word	0x200005e4

080a5514 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a5514:	2300      	movs	r3, #0
 80a5516:	b507      	push	{r0, r1, r2, lr}
 80a5518:	461a      	mov	r2, r3
 80a551a:	4619      	mov	r1, r3
 80a551c:	9300      	str	r3, [sp, #0]
 80a551e:	4803      	ldr	r0, [pc, #12]	; (80a552c <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a5520:	f7ff fc64 	bl	80a4dec <_ZN9IPAddressC1Ehhhh>
 80a5524:	b003      	add	sp, #12
 80a5526:	f85d fb04 	ldr.w	pc, [sp], #4
 80a552a:	bf00      	nop
 80a552c:	200005e8 	.word	0x200005e8

080a5530 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5530:	4770      	bx	lr
	...

080a5534 <_Z17acquireWireBufferv>:
{
 80a5534:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a5536:	2314      	movs	r3, #20
 80a5538:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a553a:	4e08      	ldr	r6, [pc, #32]	; (80a555c <_Z17acquireWireBufferv+0x28>)
{
 80a553c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a553e:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5540:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a5542:	6085      	str	r5, [r0, #8]
 80a5544:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5546:	4628      	mov	r0, r5
 80a5548:	f000 f82e 	bl	80a55a8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a554c:	4631      	mov	r1, r6
	};
 80a554e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5550:	4628      	mov	r0, r5
 80a5552:	f000 f829 	bl	80a55a8 <_ZnajRKSt9nothrow_t>
	};
 80a5556:	60e0      	str	r0, [r4, #12]
}
 80a5558:	4620      	mov	r0, r4
 80a555a:	bd70      	pop	{r4, r5, r6, pc}
 80a555c:	080aa318 	.word	0x080aa318

080a5560 <_Z19__fetch_global_Wirev>:
{
 80a5560:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5562:	4d0e      	ldr	r5, [pc, #56]	; (80a559c <_Z19__fetch_global_Wirev+0x3c>)
{
 80a5564:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5566:	7829      	ldrb	r1, [r5, #0]
 80a5568:	f3bf 8f5b 	dmb	ish
 80a556c:	f011 0401 	ands.w	r4, r1, #1
 80a5570:	d111      	bne.n	80a5596 <_Z19__fetch_global_Wirev+0x36>
 80a5572:	4628      	mov	r0, r5
 80a5574:	f7fa fda2 	bl	80a00bc <__cxa_guard_acquire>
 80a5578:	b168      	cbz	r0, 80a5596 <_Z19__fetch_global_Wirev+0x36>
 80a557a:	a801      	add	r0, sp, #4
 80a557c:	f7ff ffda 	bl	80a5534 <_Z17acquireWireBufferv>
 80a5580:	4621      	mov	r1, r4
 80a5582:	aa01      	add	r2, sp, #4
 80a5584:	4806      	ldr	r0, [pc, #24]	; (80a55a0 <_Z19__fetch_global_Wirev+0x40>)
 80a5586:	f7ff fdb5 	bl	80a50f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a558a:	4628      	mov	r0, r5
 80a558c:	f7fa fd9b 	bl	80a00c6 <__cxa_guard_release>
 80a5590:	4804      	ldr	r0, [pc, #16]	; (80a55a4 <_Z19__fetch_global_Wirev+0x44>)
 80a5592:	f003 fd15 	bl	80a8fc0 <atexit>
	return wire;
}
 80a5596:	4802      	ldr	r0, [pc, #8]	; (80a55a0 <_Z19__fetch_global_Wirev+0x40>)
 80a5598:	b007      	add	sp, #28
 80a559a:	bd30      	pop	{r4, r5, pc}
 80a559c:	20000600 	.word	0x20000600
 80a55a0:	20000604 	.word	0x20000604
 80a55a4:	080a5531 	.word	0x080a5531

080a55a8 <_ZnajRKSt9nothrow_t>:
 80a55a8:	f7fa bd79 	b.w	80a009e <_Znaj>

080a55ac <cosf>:
 80a55ac:	4a1a      	ldr	r2, [pc, #104]	; (80a5618 <cosf+0x6c>)
 80a55ae:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80a55b2:	4293      	cmp	r3, r2
 80a55b4:	dd1a      	ble.n	80a55ec <cosf+0x40>
 80a55b6:	b500      	push	{lr}
 80a55b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80a55bc:	b083      	sub	sp, #12
 80a55be:	db05      	blt.n	80a55cc <cosf+0x20>
 80a55c0:	4601      	mov	r1, r0
 80a55c2:	f003 f833 	bl	80a862c <__aeabi_fsub>
 80a55c6:	b003      	add	sp, #12
 80a55c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a55cc:	4669      	mov	r1, sp
 80a55ce:	f001 f8a5 	bl	80a671c <__ieee754_rem_pio2f>
 80a55d2:	f000 0203 	and.w	r2, r0, #3
 80a55d6:	2a01      	cmp	r2, #1
 80a55d8:	d00b      	beq.n	80a55f2 <cosf+0x46>
 80a55da:	2a02      	cmp	r2, #2
 80a55dc:	d015      	beq.n	80a560a <cosf+0x5e>
 80a55de:	b17a      	cbz	r2, 80a5600 <cosf+0x54>
 80a55e0:	2201      	movs	r2, #1
 80a55e2:	9901      	ldr	r1, [sp, #4]
 80a55e4:	9800      	ldr	r0, [sp, #0]
 80a55e6:	f001 fe3f 	bl	80a7268 <__kernel_sinf>
 80a55ea:	e7ec      	b.n	80a55c6 <cosf+0x1a>
 80a55ec:	2100      	movs	r1, #0
 80a55ee:	f001 ba07 	b.w	80a6a00 <__kernel_cosf>
 80a55f2:	9901      	ldr	r1, [sp, #4]
 80a55f4:	9800      	ldr	r0, [sp, #0]
 80a55f6:	f001 fe37 	bl	80a7268 <__kernel_sinf>
 80a55fa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a55fe:	e7e2      	b.n	80a55c6 <cosf+0x1a>
 80a5600:	9901      	ldr	r1, [sp, #4]
 80a5602:	9800      	ldr	r0, [sp, #0]
 80a5604:	f001 f9fc 	bl	80a6a00 <__kernel_cosf>
 80a5608:	e7dd      	b.n	80a55c6 <cosf+0x1a>
 80a560a:	9901      	ldr	r1, [sp, #4]
 80a560c:	9800      	ldr	r0, [sp, #0]
 80a560e:	f001 f9f7 	bl	80a6a00 <__kernel_cosf>
 80a5612:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a5616:	e7d6      	b.n	80a55c6 <cosf+0x1a>
 80a5618:	3f490fd8 	.word	0x3f490fd8

080a561c <sinf>:
 80a561c:	4a1b      	ldr	r2, [pc, #108]	; (80a568c <sinf+0x70>)
 80a561e:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80a5622:	4293      	cmp	r3, r2
 80a5624:	dd1b      	ble.n	80a565e <sinf+0x42>
 80a5626:	b500      	push	{lr}
 80a5628:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80a562c:	b083      	sub	sp, #12
 80a562e:	db05      	blt.n	80a563c <sinf+0x20>
 80a5630:	4601      	mov	r1, r0
 80a5632:	f002 fffb 	bl	80a862c <__aeabi_fsub>
 80a5636:	b003      	add	sp, #12
 80a5638:	f85d fb04 	ldr.w	pc, [sp], #4
 80a563c:	4669      	mov	r1, sp
 80a563e:	f001 f86d 	bl	80a671c <__ieee754_rem_pio2f>
 80a5642:	f000 0003 	and.w	r0, r0, #3
 80a5646:	2801      	cmp	r0, #1
 80a5648:	d00d      	beq.n	80a5666 <sinf+0x4a>
 80a564a:	2802      	cmp	r0, #2
 80a564c:	d016      	beq.n	80a567c <sinf+0x60>
 80a564e:	b178      	cbz	r0, 80a5670 <sinf+0x54>
 80a5650:	9901      	ldr	r1, [sp, #4]
 80a5652:	9800      	ldr	r0, [sp, #0]
 80a5654:	f001 f9d4 	bl	80a6a00 <__kernel_cosf>
 80a5658:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a565c:	e7eb      	b.n	80a5636 <sinf+0x1a>
 80a565e:	2200      	movs	r2, #0
 80a5660:	2100      	movs	r1, #0
 80a5662:	f001 be01 	b.w	80a7268 <__kernel_sinf>
 80a5666:	9901      	ldr	r1, [sp, #4]
 80a5668:	9800      	ldr	r0, [sp, #0]
 80a566a:	f001 f9c9 	bl	80a6a00 <__kernel_cosf>
 80a566e:	e7e2      	b.n	80a5636 <sinf+0x1a>
 80a5670:	2201      	movs	r2, #1
 80a5672:	9901      	ldr	r1, [sp, #4]
 80a5674:	9800      	ldr	r0, [sp, #0]
 80a5676:	f001 fdf7 	bl	80a7268 <__kernel_sinf>
 80a567a:	e7dc      	b.n	80a5636 <sinf+0x1a>
 80a567c:	2201      	movs	r2, #1
 80a567e:	9901      	ldr	r1, [sp, #4]
 80a5680:	9800      	ldr	r0, [sp, #0]
 80a5682:	f001 fdf1 	bl	80a7268 <__kernel_sinf>
 80a5686:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a568a:	e7d4      	b.n	80a5636 <sinf+0x1a>
 80a568c:	3f490fd8 	.word	0x3f490fd8

080a5690 <atan2>:
 80a5690:	f000 b8c2 	b.w	80a5818 <__ieee754_atan2>

080a5694 <pow>:
 80a5694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a5698:	461d      	mov	r5, r3
 80a569a:	4606      	mov	r6, r0
 80a569c:	460f      	mov	r7, r1
 80a569e:	4614      	mov	r4, r2
 80a56a0:	f000 f986 	bl	80a59b0 <__ieee754_pow>
 80a56a4:	4b57      	ldr	r3, [pc, #348]	; (80a5804 <pow+0x170>)
 80a56a6:	4680      	mov	r8, r0
 80a56a8:	f993 3000 	ldrsb.w	r3, [r3]
 80a56ac:	4689      	mov	r9, r1
 80a56ae:	3301      	adds	r3, #1
 80a56b0:	d02a      	beq.n	80a5708 <pow+0x74>
 80a56b2:	4622      	mov	r2, r4
 80a56b4:	462b      	mov	r3, r5
 80a56b6:	4620      	mov	r0, r4
 80a56b8:	4629      	mov	r1, r5
 80a56ba:	f002 ff05 	bl	80a84c8 <__aeabi_dcmpun>
 80a56be:	bb18      	cbnz	r0, 80a5708 <pow+0x74>
 80a56c0:	4632      	mov	r2, r6
 80a56c2:	463b      	mov	r3, r7
 80a56c4:	4630      	mov	r0, r6
 80a56c6:	4639      	mov	r1, r7
 80a56c8:	f002 fefe 	bl	80a84c8 <__aeabi_dcmpun>
 80a56cc:	2800      	cmp	r0, #0
 80a56ce:	d141      	bne.n	80a5754 <pow+0xc0>
 80a56d0:	2200      	movs	r2, #0
 80a56d2:	2300      	movs	r3, #0
 80a56d4:	4630      	mov	r0, r6
 80a56d6:	4639      	mov	r1, r7
 80a56d8:	f002 fec4 	bl	80a8464 <__aeabi_dcmpeq>
 80a56dc:	b1c0      	cbz	r0, 80a5710 <pow+0x7c>
 80a56de:	2200      	movs	r2, #0
 80a56e0:	2300      	movs	r3, #0
 80a56e2:	4620      	mov	r0, r4
 80a56e4:	4629      	mov	r1, r5
 80a56e6:	f002 febd 	bl	80a8464 <__aeabi_dcmpeq>
 80a56ea:	2800      	cmp	r0, #0
 80a56ec:	d13a      	bne.n	80a5764 <pow+0xd0>
 80a56ee:	4620      	mov	r0, r4
 80a56f0:	4629      	mov	r1, r5
 80a56f2:	f001 ffbf 	bl	80a7674 <finite>
 80a56f6:	b138      	cbz	r0, 80a5708 <pow+0x74>
 80a56f8:	4620      	mov	r0, r4
 80a56fa:	4629      	mov	r1, r5
 80a56fc:	2200      	movs	r2, #0
 80a56fe:	2300      	movs	r3, #0
 80a5700:	f002 feba 	bl	80a8478 <__aeabi_dcmplt>
 80a5704:	2800      	cmp	r0, #0
 80a5706:	d159      	bne.n	80a57bc <pow+0x128>
 80a5708:	4640      	mov	r0, r8
 80a570a:	4649      	mov	r1, r9
 80a570c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a5710:	4640      	mov	r0, r8
 80a5712:	4649      	mov	r1, r9
 80a5714:	f001 ffae 	bl	80a7674 <finite>
 80a5718:	b360      	cbz	r0, 80a5774 <pow+0xe0>
 80a571a:	2200      	movs	r2, #0
 80a571c:	2300      	movs	r3, #0
 80a571e:	4640      	mov	r0, r8
 80a5720:	4649      	mov	r1, r9
 80a5722:	f002 fe9f 	bl	80a8464 <__aeabi_dcmpeq>
 80a5726:	2800      	cmp	r0, #0
 80a5728:	d0ee      	beq.n	80a5708 <pow+0x74>
 80a572a:	4630      	mov	r0, r6
 80a572c:	4639      	mov	r1, r7
 80a572e:	f001 ffa1 	bl	80a7674 <finite>
 80a5732:	2800      	cmp	r0, #0
 80a5734:	d0e8      	beq.n	80a5708 <pow+0x74>
 80a5736:	4620      	mov	r0, r4
 80a5738:	4629      	mov	r1, r5
 80a573a:	f001 ff9b 	bl	80a7674 <finite>
 80a573e:	2800      	cmp	r0, #0
 80a5740:	d0e2      	beq.n	80a5708 <pow+0x74>
 80a5742:	f7fe fed1 	bl	80a44e8 <__errno>
 80a5746:	2322      	movs	r3, #34	; 0x22
 80a5748:	f04f 0800 	mov.w	r8, #0
 80a574c:	f04f 0900 	mov.w	r9, #0
 80a5750:	6003      	str	r3, [r0, #0]
 80a5752:	e7d9      	b.n	80a5708 <pow+0x74>
 80a5754:	4620      	mov	r0, r4
 80a5756:	4629      	mov	r1, r5
 80a5758:	2200      	movs	r2, #0
 80a575a:	2300      	movs	r3, #0
 80a575c:	f002 fe82 	bl	80a8464 <__aeabi_dcmpeq>
 80a5760:	2800      	cmp	r0, #0
 80a5762:	d0d1      	beq.n	80a5708 <pow+0x74>
 80a5764:	f04f 0800 	mov.w	r8, #0
 80a5768:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80a5808 <pow+0x174>
 80a576c:	4640      	mov	r0, r8
 80a576e:	4649      	mov	r1, r9
 80a5770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a5774:	4630      	mov	r0, r6
 80a5776:	4639      	mov	r1, r7
 80a5778:	f001 ff7c 	bl	80a7674 <finite>
 80a577c:	2800      	cmp	r0, #0
 80a577e:	d0cc      	beq.n	80a571a <pow+0x86>
 80a5780:	4620      	mov	r0, r4
 80a5782:	4629      	mov	r1, r5
 80a5784:	f001 ff76 	bl	80a7674 <finite>
 80a5788:	2800      	cmp	r0, #0
 80a578a:	d0c6      	beq.n	80a571a <pow+0x86>
 80a578c:	4642      	mov	r2, r8
 80a578e:	464b      	mov	r3, r9
 80a5790:	4640      	mov	r0, r8
 80a5792:	4649      	mov	r1, r9
 80a5794:	f002 fe98 	bl	80a84c8 <__aeabi_dcmpun>
 80a5798:	bb30      	cbnz	r0, 80a57e8 <pow+0x154>
 80a579a:	f7fe fea5 	bl	80a44e8 <__errno>
 80a579e:	2222      	movs	r2, #34	; 0x22
 80a57a0:	4603      	mov	r3, r0
 80a57a2:	4639      	mov	r1, r7
 80a57a4:	601a      	str	r2, [r3, #0]
 80a57a6:	4630      	mov	r0, r6
 80a57a8:	2200      	movs	r2, #0
 80a57aa:	2300      	movs	r3, #0
 80a57ac:	f002 fe64 	bl	80a8478 <__aeabi_dcmplt>
 80a57b0:	f04f 0800 	mov.w	r8, #0
 80a57b4:	b958      	cbnz	r0, 80a57ce <pow+0x13a>
 80a57b6:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a580c <pow+0x178>
 80a57ba:	e7a5      	b.n	80a5708 <pow+0x74>
 80a57bc:	f7fe fe94 	bl	80a44e8 <__errno>
 80a57c0:	2321      	movs	r3, #33	; 0x21
 80a57c2:	f04f 0800 	mov.w	r8, #0
 80a57c6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80a5810 <pow+0x17c>
 80a57ca:	6003      	str	r3, [r0, #0]
 80a57cc:	e79c      	b.n	80a5708 <pow+0x74>
 80a57ce:	4620      	mov	r0, r4
 80a57d0:	4629      	mov	r1, r5
 80a57d2:	f001 ff5b 	bl	80a768c <rint>
 80a57d6:	4622      	mov	r2, r4
 80a57d8:	462b      	mov	r3, r5
 80a57da:	f002 fe43 	bl	80a8464 <__aeabi_dcmpeq>
 80a57de:	2800      	cmp	r0, #0
 80a57e0:	d1e9      	bne.n	80a57b6 <pow+0x122>
 80a57e2:	f8df 902c 	ldr.w	r9, [pc, #44]	; 80a5810 <pow+0x17c>
 80a57e6:	e78f      	b.n	80a5708 <pow+0x74>
 80a57e8:	f7fe fe7e 	bl	80a44e8 <__errno>
 80a57ec:	2200      	movs	r2, #0
 80a57ee:	2300      	movs	r3, #0
 80a57f0:	2121      	movs	r1, #33	; 0x21
 80a57f2:	6001      	str	r1, [r0, #0]
 80a57f4:	4610      	mov	r0, r2
 80a57f6:	4619      	mov	r1, r3
 80a57f8:	f002 fcf6 	bl	80a81e8 <__aeabi_ddiv>
 80a57fc:	4680      	mov	r8, r0
 80a57fe:	4689      	mov	r9, r1
 80a5800:	e782      	b.n	80a5708 <pow+0x74>
 80a5802:	bf00      	nop
 80a5804:	2000000c 	.word	0x2000000c
 80a5808:	3ff00000 	.word	0x3ff00000
 80a580c:	7ff00000 	.word	0x7ff00000
 80a5810:	fff00000 	.word	0xfff00000

080a5814 <atan2f>:
 80a5814:	f000 befa 	b.w	80a660c <__ieee754_atan2f>

080a5818 <__ieee754_atan2>:
 80a5818:	469c      	mov	ip, r3
 80a581a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a581e:	4253      	negs	r3, r2
 80a5820:	4c5f      	ldr	r4, [pc, #380]	; (80a59a0 <__ieee754_atan2+0x188>)
 80a5822:	4313      	orrs	r3, r2
 80a5824:	f02c 4900 	bic.w	r9, ip, #2147483648	; 0x80000000
 80a5828:	ea49 73d3 	orr.w	r3, r9, r3, lsr #31
 80a582c:	42a3      	cmp	r3, r4
 80a582e:	4696      	mov	lr, r2
 80a5830:	4607      	mov	r7, r0
 80a5832:	460e      	mov	r6, r1
 80a5834:	d83d      	bhi.n	80a58b2 <__ieee754_atan2+0x9a>
 80a5836:	4245      	negs	r5, r0
 80a5838:	4305      	orrs	r5, r0
 80a583a:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80a583e:	ea4a 75d5 	orr.w	r5, sl, r5, lsr #31
 80a5842:	42a5      	cmp	r5, r4
 80a5844:	4603      	mov	r3, r0
 80a5846:	468b      	mov	fp, r1
 80a5848:	d833      	bhi.n	80a58b2 <__ieee754_atan2+0x9a>
 80a584a:	f10c 4540 	add.w	r5, ip, #3221225472	; 0xc0000000
 80a584e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80a5852:	4315      	orrs	r5, r2
 80a5854:	d03d      	beq.n	80a58d2 <__ieee754_atan2+0xba>
 80a5856:	ea4f 75ac 	mov.w	r5, ip, asr #30
 80a585a:	f005 0502 	and.w	r5, r5, #2
 80a585e:	ea5a 0303 	orrs.w	r3, sl, r3
 80a5862:	ea45 75d1 	orr.w	r5, r5, r1, lsr #31
 80a5866:	d02c      	beq.n	80a58c2 <__ieee754_atan2+0xaa>
 80a5868:	ea59 0302 	orrs.w	r3, r9, r2
 80a586c:	d035      	beq.n	80a58da <__ieee754_atan2+0xc2>
 80a586e:	45a1      	cmp	r9, r4
 80a5870:	d046      	beq.n	80a5900 <__ieee754_atan2+0xe8>
 80a5872:	45a2      	cmp	sl, r4
 80a5874:	d031      	beq.n	80a58da <__ieee754_atan2+0xc2>
 80a5876:	ebaa 0909 	sub.w	r9, sl, r9
 80a587a:	f1b9 7f74 	cmp.w	r9, #63963136	; 0x3d00000
 80a587e:	ea4f 5329 	mov.w	r3, r9, asr #20
 80a5882:	da39      	bge.n	80a58f8 <__ieee754_atan2+0xe0>
 80a5884:	f1bc 0f00 	cmp.w	ip, #0
 80a5888:	da46      	bge.n	80a5918 <__ieee754_atan2+0x100>
 80a588a:	333c      	adds	r3, #60	; 0x3c
 80a588c:	da44      	bge.n	80a5918 <__ieee754_atan2+0x100>
 80a588e:	2000      	movs	r0, #0
 80a5890:	2100      	movs	r1, #0
 80a5892:	2d01      	cmp	r5, #1
 80a5894:	d058      	beq.n	80a5948 <__ieee754_atan2+0x130>
 80a5896:	2d02      	cmp	r5, #2
 80a5898:	d049      	beq.n	80a592e <__ieee754_atan2+0x116>
 80a589a:	b185      	cbz	r5, 80a58be <__ieee754_atan2+0xa6>
 80a589c:	a334      	add	r3, pc, #208	; (adr r3, 80a5970 <__ieee754_atan2+0x158>)
 80a589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a58a2:	f002 f9bf 	bl	80a7c24 <__aeabi_dsub>
 80a58a6:	a334      	add	r3, pc, #208	; (adr r3, 80a5978 <__ieee754_atan2+0x160>)
 80a58a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a58ac:	f002 f9ba 	bl	80a7c24 <__aeabi_dsub>
 80a58b0:	e005      	b.n	80a58be <__ieee754_atan2+0xa6>
 80a58b2:	463a      	mov	r2, r7
 80a58b4:	4670      	mov	r0, lr
 80a58b6:	4661      	mov	r1, ip
 80a58b8:	4633      	mov	r3, r6
 80a58ba:	f002 f9b5 	bl	80a7c28 <__adddf3>
 80a58be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a58c2:	2d02      	cmp	r5, #2
 80a58c4:	d010      	beq.n	80a58e8 <__ieee754_atan2+0xd0>
 80a58c6:	2d03      	cmp	r5, #3
 80a58c8:	d1f9      	bne.n	80a58be <__ieee754_atan2+0xa6>
 80a58ca:	a12d      	add	r1, pc, #180	; (adr r1, 80a5980 <__ieee754_atan2+0x168>)
 80a58cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a58d0:	e7f5      	b.n	80a58be <__ieee754_atan2+0xa6>
 80a58d2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a58d6:	f001 bd3b 	b.w	80a7350 <atan>
 80a58da:	f1bb 0f00 	cmp.w	fp, #0
 80a58de:	db07      	blt.n	80a58f0 <__ieee754_atan2+0xd8>
 80a58e0:	a129      	add	r1, pc, #164	; (adr r1, 80a5988 <__ieee754_atan2+0x170>)
 80a58e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a58e6:	e7ea      	b.n	80a58be <__ieee754_atan2+0xa6>
 80a58e8:	a123      	add	r1, pc, #140	; (adr r1, 80a5978 <__ieee754_atan2+0x160>)
 80a58ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a58ee:	e7e6      	b.n	80a58be <__ieee754_atan2+0xa6>
 80a58f0:	a127      	add	r1, pc, #156	; (adr r1, 80a5990 <__ieee754_atan2+0x178>)
 80a58f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a58f6:	e7e2      	b.n	80a58be <__ieee754_atan2+0xa6>
 80a58f8:	a123      	add	r1, pc, #140	; (adr r1, 80a5988 <__ieee754_atan2+0x170>)
 80a58fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a58fe:	e7c8      	b.n	80a5892 <__ieee754_atan2+0x7a>
 80a5900:	45ca      	cmp	sl, r9
 80a5902:	f105 35ff 	add.w	r5, r5, #4294967295
 80a5906:	d023      	beq.n	80a5950 <__ieee754_atan2+0x138>
 80a5908:	2d02      	cmp	r5, #2
 80a590a:	d829      	bhi.n	80a5960 <__ieee754_atan2+0x148>
 80a590c:	4b25      	ldr	r3, [pc, #148]	; (80a59a4 <__ieee754_atan2+0x18c>)
 80a590e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a5912:	e9d5 0100 	ldrd	r0, r1, [r5]
 80a5916:	e7d2      	b.n	80a58be <__ieee754_atan2+0xa6>
 80a5918:	4672      	mov	r2, lr
 80a591a:	4663      	mov	r3, ip
 80a591c:	4638      	mov	r0, r7
 80a591e:	4631      	mov	r1, r6
 80a5920:	f002 fc62 	bl	80a81e8 <__aeabi_ddiv>
 80a5924:	f001 fea2 	bl	80a766c <fabs>
 80a5928:	f001 fd12 	bl	80a7350 <atan>
 80a592c:	e7b1      	b.n	80a5892 <__ieee754_atan2+0x7a>
 80a592e:	a310      	add	r3, pc, #64	; (adr r3, 80a5970 <__ieee754_atan2+0x158>)
 80a5930:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5934:	f002 f976 	bl	80a7c24 <__aeabi_dsub>
 80a5938:	4602      	mov	r2, r0
 80a593a:	460b      	mov	r3, r1
 80a593c:	a10e      	add	r1, pc, #56	; (adr r1, 80a5978 <__ieee754_atan2+0x160>)
 80a593e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5942:	f002 f96f 	bl	80a7c24 <__aeabi_dsub>
 80a5946:	e7ba      	b.n	80a58be <__ieee754_atan2+0xa6>
 80a5948:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a594c:	4619      	mov	r1, r3
 80a594e:	e7b6      	b.n	80a58be <__ieee754_atan2+0xa6>
 80a5950:	2d02      	cmp	r5, #2
 80a5952:	d808      	bhi.n	80a5966 <__ieee754_atan2+0x14e>
 80a5954:	4b14      	ldr	r3, [pc, #80]	; (80a59a8 <__ieee754_atan2+0x190>)
 80a5956:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a595a:	e9d5 0100 	ldrd	r0, r1, [r5]
 80a595e:	e7ae      	b.n	80a58be <__ieee754_atan2+0xa6>
 80a5960:	2000      	movs	r0, #0
 80a5962:	2100      	movs	r1, #0
 80a5964:	e7ab      	b.n	80a58be <__ieee754_atan2+0xa6>
 80a5966:	a10c      	add	r1, pc, #48	; (adr r1, 80a5998 <__ieee754_atan2+0x180>)
 80a5968:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a596c:	e7a7      	b.n	80a58be <__ieee754_atan2+0xa6>
 80a596e:	bf00      	nop
 80a5970:	33145c07 	.word	0x33145c07
 80a5974:	3ca1a626 	.word	0x3ca1a626
 80a5978:	54442d18 	.word	0x54442d18
 80a597c:	400921fb 	.word	0x400921fb
 80a5980:	54442d18 	.word	0x54442d18
 80a5984:	c00921fb 	.word	0xc00921fb
 80a5988:	54442d18 	.word	0x54442d18
 80a598c:	3ff921fb 	.word	0x3ff921fb
 80a5990:	54442d18 	.word	0x54442d18
 80a5994:	bff921fb 	.word	0xbff921fb
 80a5998:	54442d18 	.word	0x54442d18
 80a599c:	3fe921fb 	.word	0x3fe921fb
 80a59a0:	7ff00000 	.word	0x7ff00000
 80a59a4:	080aa338 	.word	0x080aa338
 80a59a8:	080aa320 	.word	0x080aa320
 80a59ac:	00000000 	.word	0x00000000

080a59b0 <__ieee754_pow>:
 80a59b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a59b4:	4699      	mov	r9, r3
 80a59b6:	4690      	mov	r8, r2
 80a59b8:	f029 4500 	bic.w	r5, r9, #2147483648	; 0x80000000
 80a59bc:	461e      	mov	r6, r3
 80a59be:	4613      	mov	r3, r2
 80a59c0:	ea55 0208 	orrs.w	r2, r5, r8
 80a59c4:	b093      	sub	sp, #76	; 0x4c
 80a59c6:	d035      	beq.n	80a5a34 <__ieee754_pow+0x84>
 80a59c8:	4a6b      	ldr	r2, [pc, #428]	; (80a5b78 <__ieee754_pow+0x1c8>)
 80a59ca:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80a59ce:	4294      	cmp	r4, r2
 80a59d0:	4683      	mov	fp, r0
 80a59d2:	468a      	mov	sl, r1
 80a59d4:	460f      	mov	r7, r1
 80a59d6:	9000      	str	r0, [sp, #0]
 80a59d8:	dc25      	bgt.n	80a5a26 <__ieee754_pow+0x76>
 80a59da:	d034      	beq.n	80a5a46 <__ieee754_pow+0x96>
 80a59dc:	4295      	cmp	r5, r2
 80a59de:	dc22      	bgt.n	80a5a26 <__ieee754_pow+0x76>
 80a59e0:	4a65      	ldr	r2, [pc, #404]	; (80a5b78 <__ieee754_pow+0x1c8>)
 80a59e2:	4295      	cmp	r5, r2
 80a59e4:	d01d      	beq.n	80a5a22 <__ieee754_pow+0x72>
 80a59e6:	2f00      	cmp	r7, #0
 80a59e8:	db36      	blt.n	80a5a58 <__ieee754_pow+0xa8>
 80a59ea:	2200      	movs	r2, #0
 80a59ec:	9202      	str	r2, [sp, #8]
 80a59ee:	2b00      	cmp	r3, #0
 80a59f0:	d14c      	bne.n	80a5a8c <__ieee754_pow+0xdc>
 80a59f2:	4b61      	ldr	r3, [pc, #388]	; (80a5b78 <__ieee754_pow+0x1c8>)
 80a59f4:	429d      	cmp	r5, r3
 80a59f6:	f000 8097 	beq.w	80a5b28 <__ieee754_pow+0x178>
 80a59fa:	4b60      	ldr	r3, [pc, #384]	; (80a5b7c <__ieee754_pow+0x1cc>)
 80a59fc:	429d      	cmp	r5, r3
 80a59fe:	f000 80a5 	beq.w	80a5b4c <__ieee754_pow+0x19c>
 80a5a02:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80a5a06:	f000 84a3 	beq.w	80a6350 <__ieee754_pow+0x9a0>
 80a5a0a:	4b5d      	ldr	r3, [pc, #372]	; (80a5b80 <__ieee754_pow+0x1d0>)
 80a5a0c:	429e      	cmp	r6, r3
 80a5a0e:	d13d      	bne.n	80a5a8c <__ieee754_pow+0xdc>
 80a5a10:	2f00      	cmp	r7, #0
 80a5a12:	db3b      	blt.n	80a5a8c <__ieee754_pow+0xdc>
 80a5a14:	4658      	mov	r0, fp
 80a5a16:	4651      	mov	r1, sl
 80a5a18:	b013      	add	sp, #76	; 0x4c
 80a5a1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5a1e:	f000 bd2f 	b.w	80a6480 <__ieee754_sqrt>
 80a5a22:	2b00      	cmp	r3, #0
 80a5a24:	d0df      	beq.n	80a59e6 <__ieee754_pow+0x36>
 80a5a26:	9b00      	ldr	r3, [sp, #0]
 80a5a28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a5a2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a5a30:	4323      	orrs	r3, r4
 80a5a32:	d10b      	bne.n	80a5a4c <__ieee754_pow+0x9c>
 80a5a34:	2300      	movs	r3, #0
 80a5a36:	4c51      	ldr	r4, [pc, #324]	; (80a5b7c <__ieee754_pow+0x1cc>)
 80a5a38:	e9cd 3400 	strd	r3, r4, [sp]
 80a5a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a5a40:	b013      	add	sp, #76	; 0x4c
 80a5a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5a46:	b908      	cbnz	r0, 80a5a4c <__ieee754_pow+0x9c>
 80a5a48:	42a5      	cmp	r5, r4
 80a5a4a:	ddc9      	ble.n	80a59e0 <__ieee754_pow+0x30>
 80a5a4c:	484d      	ldr	r0, [pc, #308]	; (80a5b84 <__ieee754_pow+0x1d4>)
 80a5a4e:	b013      	add	sp, #76	; 0x4c
 80a5a50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5a54:	f001 be14 	b.w	80a7680 <nan>
 80a5a58:	4a4b      	ldr	r2, [pc, #300]	; (80a5b88 <__ieee754_pow+0x1d8>)
 80a5a5a:	4295      	cmp	r5, r2
 80a5a5c:	dc7e      	bgt.n	80a5b5c <__ieee754_pow+0x1ac>
 80a5a5e:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
 80a5a62:	4295      	cmp	r5, r2
 80a5a64:	dd0e      	ble.n	80a5a84 <__ieee754_pow+0xd4>
 80a5a66:	152a      	asrs	r2, r5, #20
 80a5a68:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a5a6c:	2a14      	cmp	r2, #20
 80a5a6e:	f340 8479 	ble.w	80a6364 <__ieee754_pow+0x9b4>
 80a5a72:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 80a5a76:	fa23 f102 	lsr.w	r1, r3, r2
 80a5a7a:	fa01 f202 	lsl.w	r2, r1, r2
 80a5a7e:	429a      	cmp	r2, r3
 80a5a80:	f000 84c5 	beq.w	80a640e <__ieee754_pow+0xa5e>
 80a5a84:	2200      	movs	r2, #0
 80a5a86:	9202      	str	r2, [sp, #8]
 80a5a88:	2b00      	cmp	r3, #0
 80a5a8a:	d0b6      	beq.n	80a59fa <__ieee754_pow+0x4a>
 80a5a8c:	4658      	mov	r0, fp
 80a5a8e:	4651      	mov	r1, sl
 80a5a90:	f001 fdec 	bl	80a766c <fabs>
 80a5a94:	465b      	mov	r3, fp
 80a5a96:	e9cd 0100 	strd	r0, r1, [sp]
 80a5a9a:	bb33      	cbnz	r3, 80a5aea <__ieee754_pow+0x13a>
 80a5a9c:	b124      	cbz	r4, 80a5aa8 <__ieee754_pow+0xf8>
 80a5a9e:	4b37      	ldr	r3, [pc, #220]	; (80a5b7c <__ieee754_pow+0x1cc>)
 80a5aa0:	f027 4240 	bic.w	r2, r7, #3221225472	; 0xc0000000
 80a5aa4:	429a      	cmp	r2, r3
 80a5aa6:	d120      	bne.n	80a5aea <__ieee754_pow+0x13a>
 80a5aa8:	2e00      	cmp	r6, #0
 80a5aaa:	da07      	bge.n	80a5abc <__ieee754_pow+0x10c>
 80a5aac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a5ab0:	2000      	movs	r0, #0
 80a5ab2:	4932      	ldr	r1, [pc, #200]	; (80a5b7c <__ieee754_pow+0x1cc>)
 80a5ab4:	f002 fb98 	bl	80a81e8 <__aeabi_ddiv>
 80a5ab8:	e9cd 0100 	strd	r0, r1, [sp]
 80a5abc:	2f00      	cmp	r7, #0
 80a5abe:	dabd      	bge.n	80a5a3c <__ieee754_pow+0x8c>
 80a5ac0:	9b02      	ldr	r3, [sp, #8]
 80a5ac2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a5ac6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a5aca:	4323      	orrs	r3, r4
 80a5acc:	f040 846f 	bne.w	80a63ae <__ieee754_pow+0x9fe>
 80a5ad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a5ad4:	4610      	mov	r0, r2
 80a5ad6:	4619      	mov	r1, r3
 80a5ad8:	f002 f8a4 	bl	80a7c24 <__aeabi_dsub>
 80a5adc:	4602      	mov	r2, r0
 80a5ade:	460b      	mov	r3, r1
 80a5ae0:	f002 fb82 	bl	80a81e8 <__aeabi_ddiv>
 80a5ae4:	e9cd 0100 	strd	r0, r1, [sp]
 80a5ae8:	e7a8      	b.n	80a5a3c <__ieee754_pow+0x8c>
 80a5aea:	9a02      	ldr	r2, [sp, #8]
 80a5aec:	0ffb      	lsrs	r3, r7, #31
 80a5aee:	3b01      	subs	r3, #1
 80a5af0:	930a      	str	r3, [sp, #40]	; 0x28
 80a5af2:	4313      	orrs	r3, r2
 80a5af4:	d035      	beq.n	80a5b62 <__ieee754_pow+0x1b2>
 80a5af6:	4b25      	ldr	r3, [pc, #148]	; (80a5b8c <__ieee754_pow+0x1dc>)
 80a5af8:	429d      	cmp	r5, r3
 80a5afa:	dd4b      	ble.n	80a5b94 <__ieee754_pow+0x1e4>
 80a5afc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a5b00:	429d      	cmp	r5, r3
 80a5b02:	4b23      	ldr	r3, [pc, #140]	; (80a5b90 <__ieee754_pow+0x1e0>)
 80a5b04:	f340 83bc 	ble.w	80a6280 <__ieee754_pow+0x8d0>
 80a5b08:	429c      	cmp	r4, r3
 80a5b0a:	f340 834f 	ble.w	80a61ac <__ieee754_pow+0x7fc>
 80a5b0e:	2e00      	cmp	r6, #0
 80a5b10:	f340 834f 	ble.w	80a61b2 <__ieee754_pow+0x802>
 80a5b14:	a316      	add	r3, pc, #88	; (adr r3, 80a5b70 <__ieee754_pow+0x1c0>)
 80a5b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5b1a:	4610      	mov	r0, r2
 80a5b1c:	4619      	mov	r1, r3
 80a5b1e:	f002 fa39 	bl	80a7f94 <__aeabi_dmul>
 80a5b22:	e9cd 0100 	strd	r0, r1, [sp]
 80a5b26:	e789      	b.n	80a5a3c <__ieee754_pow+0x8c>
 80a5b28:	9a00      	ldr	r2, [sp, #0]
 80a5b2a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80a5b2e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80a5b32:	4313      	orrs	r3, r2
 80a5b34:	f43f af7e 	beq.w	80a5a34 <__ieee754_pow+0x84>
 80a5b38:	4b15      	ldr	r3, [pc, #84]	; (80a5b90 <__ieee754_pow+0x1e0>)
 80a5b3a:	429c      	cmp	r4, r3
 80a5b3c:	f340 8363 	ble.w	80a6206 <__ieee754_pow+0x856>
 80a5b40:	2e00      	cmp	r6, #0
 80a5b42:	f2c0 8336 	blt.w	80a61b2 <__ieee754_pow+0x802>
 80a5b46:	e9cd 8900 	strd	r8, r9, [sp]
 80a5b4a:	e777      	b.n	80a5a3c <__ieee754_pow+0x8c>
 80a5b4c:	2e00      	cmp	r6, #0
 80a5b4e:	f2c0 83f5 	blt.w	80a633c <__ieee754_pow+0x98c>
 80a5b52:	4658      	mov	r0, fp
 80a5b54:	4651      	mov	r1, sl
 80a5b56:	e9cd 0100 	strd	r0, r1, [sp]
 80a5b5a:	e76f      	b.n	80a5a3c <__ieee754_pow+0x8c>
 80a5b5c:	2202      	movs	r2, #2
 80a5b5e:	9202      	str	r2, [sp, #8]
 80a5b60:	e745      	b.n	80a59ee <__ieee754_pow+0x3e>
 80a5b62:	465a      	mov	r2, fp
 80a5b64:	4658      	mov	r0, fp
 80a5b66:	4653      	mov	r3, sl
 80a5b68:	4651      	mov	r1, sl
 80a5b6a:	e7b5      	b.n	80a5ad8 <__ieee754_pow+0x128>
 80a5b6c:	f3af 8000 	nop.w
 80a5b70:	8800759c 	.word	0x8800759c
 80a5b74:	7e37e43c 	.word	0x7e37e43c
 80a5b78:	7ff00000 	.word	0x7ff00000
 80a5b7c:	3ff00000 	.word	0x3ff00000
 80a5b80:	3fe00000 	.word	0x3fe00000
 80a5b84:	080aa350 	.word	0x080aa350
 80a5b88:	433fffff 	.word	0x433fffff
 80a5b8c:	41e00000 	.word	0x41e00000
 80a5b90:	3fefffff 	.word	0x3fefffff
 80a5b94:	4bd4      	ldr	r3, [pc, #848]	; (80a5ee8 <__ieee754_pow+0x538>)
 80a5b96:	403b      	ands	r3, r7
 80a5b98:	2b00      	cmp	r3, #0
 80a5b9a:	f040 83cd 	bne.w	80a6338 <__ieee754_pow+0x988>
 80a5b9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a5ba2:	2200      	movs	r2, #0
 80a5ba4:	4bd1      	ldr	r3, [pc, #836]	; (80a5eec <__ieee754_pow+0x53c>)
 80a5ba6:	f002 f9f5 	bl	80a7f94 <__aeabi_dmul>
 80a5baa:	f06f 0534 	mvn.w	r5, #52	; 0x34
 80a5bae:	460c      	mov	r4, r1
 80a5bb0:	e9cd 0100 	strd	r0, r1, [sp]
 80a5bb4:	1523      	asrs	r3, r4, #20
 80a5bb6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a5bba:	1959      	adds	r1, r3, r5
 80a5bbc:	4bcc      	ldr	r3, [pc, #816]	; (80a5ef0 <__ieee754_pow+0x540>)
 80a5bbe:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80a5bc2:	f042 547f 	orr.w	r4, r2, #1069547520	; 0x3fc00000
 80a5bc6:	429a      	cmp	r2, r3
 80a5bc8:	910b      	str	r1, [sp, #44]	; 0x2c
 80a5bca:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80a5bce:	dd07      	ble.n	80a5be0 <__ieee754_pow+0x230>
 80a5bd0:	4bc8      	ldr	r3, [pc, #800]	; (80a5ef4 <__ieee754_pow+0x544>)
 80a5bd2:	429a      	cmp	r2, r3
 80a5bd4:	f340 83f8 	ble.w	80a63c8 <__ieee754_pow+0xa18>
 80a5bd8:	3101      	adds	r1, #1
 80a5bda:	910b      	str	r1, [sp, #44]	; 0x2c
 80a5bdc:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
 80a5be0:	2200      	movs	r2, #0
 80a5be2:	2300      	movs	r3, #0
 80a5be4:	2000      	movs	r0, #0
 80a5be6:	2500      	movs	r5, #0
 80a5be8:	49c3      	ldr	r1, [pc, #780]	; (80a5ef8 <__ieee754_pow+0x548>)
 80a5bea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a5bee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a5bf2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a5bf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a5bfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a5bfe:	4621      	mov	r1, r4
 80a5c00:	4682      	mov	sl, r0
 80a5c02:	f002 f80f 	bl	80a7c24 <__aeabi_dsub>
 80a5c06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a5c0a:	46a3      	mov	fp, r4
 80a5c0c:	4606      	mov	r6, r0
 80a5c0e:	460f      	mov	r7, r1
 80a5c10:	4650      	mov	r0, sl
 80a5c12:	4621      	mov	r1, r4
 80a5c14:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80a5c18:	f002 f806 	bl	80a7c28 <__adddf3>
 80a5c1c:	4602      	mov	r2, r0
 80a5c1e:	460b      	mov	r3, r1
 80a5c20:	2000      	movs	r0, #0
 80a5c22:	49b5      	ldr	r1, [pc, #724]	; (80a5ef8 <__ieee754_pow+0x548>)
 80a5c24:	f002 fae0 	bl	80a81e8 <__aeabi_ddiv>
 80a5c28:	468c      	mov	ip, r1
 80a5c2a:	4683      	mov	fp, r0
 80a5c2c:	4663      	mov	r3, ip
 80a5c2e:	465a      	mov	r2, fp
 80a5c30:	4630      	mov	r0, r6
 80a5c32:	4639      	mov	r1, r7
 80a5c34:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 80a5c38:	f002 f9ac 	bl	80a7f94 <__aeabi_dmul>
 80a5c3c:	4682      	mov	sl, r0
 80a5c3e:	468b      	mov	fp, r1
 80a5c40:	1063      	asrs	r3, r4, #1
 80a5c42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a5c46:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a5c4a:	1959      	adds	r1, r3, r5
 80a5c4c:	460d      	mov	r5, r1
 80a5c4e:	465a      	mov	r2, fp
 80a5c50:	4651      	mov	r1, sl
 80a5c52:	2300      	movs	r3, #0
 80a5c54:	2000      	movs	r0, #0
 80a5c56:	e9cd 1200 	strd	r1, r2, [sp]
 80a5c5a:	9300      	str	r3, [sp, #0]
 80a5c5c:	4604      	mov	r4, r0
 80a5c5e:	4602      	mov	r2, r0
 80a5c60:	462b      	mov	r3, r5
 80a5c62:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80a5c66:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a5c6a:	4650      	mov	r0, sl
 80a5c6c:	4659      	mov	r1, fp
 80a5c6e:	f002 f991 	bl	80a7f94 <__aeabi_dmul>
 80a5c72:	4602      	mov	r2, r0
 80a5c74:	460b      	mov	r3, r1
 80a5c76:	4630      	mov	r0, r6
 80a5c78:	4639      	mov	r1, r7
 80a5c7a:	f001 ffd3 	bl	80a7c24 <__aeabi_dsub>
 80a5c7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a5c82:	4606      	mov	r6, r0
 80a5c84:	460f      	mov	r7, r1
 80a5c86:	4620      	mov	r0, r4
 80a5c88:	4629      	mov	r1, r5
 80a5c8a:	f001 ffcb 	bl	80a7c24 <__aeabi_dsub>
 80a5c8e:	4602      	mov	r2, r0
 80a5c90:	460b      	mov	r3, r1
 80a5c92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80a5c96:	f001 ffc5 	bl	80a7c24 <__aeabi_dsub>
 80a5c9a:	4652      	mov	r2, sl
 80a5c9c:	465b      	mov	r3, fp
 80a5c9e:	f002 f979 	bl	80a7f94 <__aeabi_dmul>
 80a5ca2:	4602      	mov	r2, r0
 80a5ca4:	460b      	mov	r3, r1
 80a5ca6:	4630      	mov	r0, r6
 80a5ca8:	4639      	mov	r1, r7
 80a5caa:	f001 ffbb 	bl	80a7c24 <__aeabi_dsub>
 80a5cae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a5cb2:	f002 f96f 	bl	80a7f94 <__aeabi_dmul>
 80a5cb6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80a5cba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a5cbe:	4622      	mov	r2, r4
 80a5cc0:	462b      	mov	r3, r5
 80a5cc2:	4620      	mov	r0, r4
 80a5cc4:	4629      	mov	r1, r5
 80a5cc6:	f002 f965 	bl	80a7f94 <__aeabi_dmul>
 80a5cca:	a375      	add	r3, pc, #468	; (adr r3, 80a5ea0 <__ieee754_pow+0x4f0>)
 80a5ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5cd0:	4604      	mov	r4, r0
 80a5cd2:	460d      	mov	r5, r1
 80a5cd4:	f002 f95e 	bl	80a7f94 <__aeabi_dmul>
 80a5cd8:	a373      	add	r3, pc, #460	; (adr r3, 80a5ea8 <__ieee754_pow+0x4f8>)
 80a5cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5cde:	f001 ffa3 	bl	80a7c28 <__adddf3>
 80a5ce2:	4622      	mov	r2, r4
 80a5ce4:	462b      	mov	r3, r5
 80a5ce6:	f002 f955 	bl	80a7f94 <__aeabi_dmul>
 80a5cea:	a371      	add	r3, pc, #452	; (adr r3, 80a5eb0 <__ieee754_pow+0x500>)
 80a5cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5cf0:	f001 ff9a 	bl	80a7c28 <__adddf3>
 80a5cf4:	4622      	mov	r2, r4
 80a5cf6:	462b      	mov	r3, r5
 80a5cf8:	f002 f94c 	bl	80a7f94 <__aeabi_dmul>
 80a5cfc:	a36e      	add	r3, pc, #440	; (adr r3, 80a5eb8 <__ieee754_pow+0x508>)
 80a5cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5d02:	f001 ff91 	bl	80a7c28 <__adddf3>
 80a5d06:	4622      	mov	r2, r4
 80a5d08:	462b      	mov	r3, r5
 80a5d0a:	f002 f943 	bl	80a7f94 <__aeabi_dmul>
 80a5d0e:	a36c      	add	r3, pc, #432	; (adr r3, 80a5ec0 <__ieee754_pow+0x510>)
 80a5d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5d14:	f001 ff88 	bl	80a7c28 <__adddf3>
 80a5d18:	4622      	mov	r2, r4
 80a5d1a:	462b      	mov	r3, r5
 80a5d1c:	f002 f93a 	bl	80a7f94 <__aeabi_dmul>
 80a5d20:	a369      	add	r3, pc, #420	; (adr r3, 80a5ec8 <__ieee754_pow+0x518>)
 80a5d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5d26:	f001 ff7f 	bl	80a7c28 <__adddf3>
 80a5d2a:	4622      	mov	r2, r4
 80a5d2c:	4606      	mov	r6, r0
 80a5d2e:	460f      	mov	r7, r1
 80a5d30:	462b      	mov	r3, r5
 80a5d32:	4620      	mov	r0, r4
 80a5d34:	4629      	mov	r1, r5
 80a5d36:	f002 f92d 	bl	80a7f94 <__aeabi_dmul>
 80a5d3a:	4602      	mov	r2, r0
 80a5d3c:	460b      	mov	r3, r1
 80a5d3e:	4630      	mov	r0, r6
 80a5d40:	4639      	mov	r1, r7
 80a5d42:	f002 f927 	bl	80a7f94 <__aeabi_dmul>
 80a5d46:	4604      	mov	r4, r0
 80a5d48:	460d      	mov	r5, r1
 80a5d4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a5d4e:	4652      	mov	r2, sl
 80a5d50:	465b      	mov	r3, fp
 80a5d52:	f001 ff69 	bl	80a7c28 <__adddf3>
 80a5d56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a5d5a:	f002 f91b 	bl	80a7f94 <__aeabi_dmul>
 80a5d5e:	4622      	mov	r2, r4
 80a5d60:	462b      	mov	r3, r5
 80a5d62:	f001 ff61 	bl	80a7c28 <__adddf3>
 80a5d66:	4652      	mov	r2, sl
 80a5d68:	4606      	mov	r6, r0
 80a5d6a:	460f      	mov	r7, r1
 80a5d6c:	465b      	mov	r3, fp
 80a5d6e:	4650      	mov	r0, sl
 80a5d70:	4659      	mov	r1, fp
 80a5d72:	f002 f90f 	bl	80a7f94 <__aeabi_dmul>
 80a5d76:	4602      	mov	r2, r0
 80a5d78:	460b      	mov	r3, r1
 80a5d7a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a5d7e:	2200      	movs	r2, #0
 80a5d80:	4b5e      	ldr	r3, [pc, #376]	; (80a5efc <__ieee754_pow+0x54c>)
 80a5d82:	f001 ff51 	bl	80a7c28 <__adddf3>
 80a5d86:	4632      	mov	r2, r6
 80a5d88:	463b      	mov	r3, r7
 80a5d8a:	f001 ff4d 	bl	80a7c28 <__adddf3>
 80a5d8e:	2400      	movs	r4, #0
 80a5d90:	460d      	mov	r5, r1
 80a5d92:	4622      	mov	r2, r4
 80a5d94:	462b      	mov	r3, r5
 80a5d96:	4650      	mov	r0, sl
 80a5d98:	4659      	mov	r1, fp
 80a5d9a:	f002 f8fb 	bl	80a7f94 <__aeabi_dmul>
 80a5d9e:	2200      	movs	r2, #0
 80a5da0:	4682      	mov	sl, r0
 80a5da2:	468b      	mov	fp, r1
 80a5da4:	4620      	mov	r0, r4
 80a5da6:	4629      	mov	r1, r5
 80a5da8:	4b54      	ldr	r3, [pc, #336]	; (80a5efc <__ieee754_pow+0x54c>)
 80a5daa:	f001 ff3b 	bl	80a7c24 <__aeabi_dsub>
 80a5dae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a5db2:	f001 ff37 	bl	80a7c24 <__aeabi_dsub>
 80a5db6:	4602      	mov	r2, r0
 80a5db8:	460b      	mov	r3, r1
 80a5dba:	4630      	mov	r0, r6
 80a5dbc:	4639      	mov	r1, r7
 80a5dbe:	f001 ff31 	bl	80a7c24 <__aeabi_dsub>
 80a5dc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a5dc6:	f002 f8e5 	bl	80a7f94 <__aeabi_dmul>
 80a5dca:	4622      	mov	r2, r4
 80a5dcc:	4606      	mov	r6, r0
 80a5dce:	460f      	mov	r7, r1
 80a5dd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a5dd4:	462b      	mov	r3, r5
 80a5dd6:	f002 f8dd 	bl	80a7f94 <__aeabi_dmul>
 80a5dda:	4602      	mov	r2, r0
 80a5ddc:	460b      	mov	r3, r1
 80a5dde:	4630      	mov	r0, r6
 80a5de0:	4639      	mov	r1, r7
 80a5de2:	f001 ff21 	bl	80a7c28 <__adddf3>
 80a5de6:	4606      	mov	r6, r0
 80a5de8:	460f      	mov	r7, r1
 80a5dea:	2400      	movs	r4, #0
 80a5dec:	4632      	mov	r2, r6
 80a5dee:	463b      	mov	r3, r7
 80a5df0:	4650      	mov	r0, sl
 80a5df2:	4659      	mov	r1, fp
 80a5df4:	f001 ff18 	bl	80a7c28 <__adddf3>
 80a5df8:	a335      	add	r3, pc, #212	; (adr r3, 80a5ed0 <__ieee754_pow+0x520>)
 80a5dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5dfe:	4620      	mov	r0, r4
 80a5e00:	460d      	mov	r5, r1
 80a5e02:	f002 f8c7 	bl	80a7f94 <__aeabi_dmul>
 80a5e06:	4652      	mov	r2, sl
 80a5e08:	465b      	mov	r3, fp
 80a5e0a:	4682      	mov	sl, r0
 80a5e0c:	468b      	mov	fp, r1
 80a5e0e:	4620      	mov	r0, r4
 80a5e10:	4629      	mov	r1, r5
 80a5e12:	f001 ff07 	bl	80a7c24 <__aeabi_dsub>
 80a5e16:	4602      	mov	r2, r0
 80a5e18:	460b      	mov	r3, r1
 80a5e1a:	4630      	mov	r0, r6
 80a5e1c:	4639      	mov	r1, r7
 80a5e1e:	f001 ff01 	bl	80a7c24 <__aeabi_dsub>
 80a5e22:	a32d      	add	r3, pc, #180	; (adr r3, 80a5ed8 <__ieee754_pow+0x528>)
 80a5e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5e28:	f002 f8b4 	bl	80a7f94 <__aeabi_dmul>
 80a5e2c:	4602      	mov	r2, r0
 80a5e2e:	460b      	mov	r3, r1
 80a5e30:	4620      	mov	r0, r4
 80a5e32:	4629      	mov	r1, r5
 80a5e34:	4614      	mov	r4, r2
 80a5e36:	461d      	mov	r5, r3
 80a5e38:	a329      	add	r3, pc, #164	; (adr r3, 80a5ee0 <__ieee754_pow+0x530>)
 80a5e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5e3e:	f002 f8a9 	bl	80a7f94 <__aeabi_dmul>
 80a5e42:	4602      	mov	r2, r0
 80a5e44:	460b      	mov	r3, r1
 80a5e46:	4620      	mov	r0, r4
 80a5e48:	4629      	mov	r1, r5
 80a5e4a:	f001 feed 	bl	80a7c28 <__adddf3>
 80a5e4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80a5e52:	f001 fee9 	bl	80a7c28 <__adddf3>
 80a5e56:	4606      	mov	r6, r0
 80a5e58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a5e5a:	460f      	mov	r7, r1
 80a5e5c:	f002 f830 	bl	80a7ec0 <__aeabi_i2d>
 80a5e60:	4604      	mov	r4, r0
 80a5e62:	460d      	mov	r5, r1
 80a5e64:	4632      	mov	r2, r6
 80a5e66:	463b      	mov	r3, r7
 80a5e68:	4650      	mov	r0, sl
 80a5e6a:	4659      	mov	r1, fp
 80a5e6c:	f001 fedc 	bl	80a7c28 <__adddf3>
 80a5e70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a5e74:	f001 fed8 	bl	80a7c28 <__adddf3>
 80a5e78:	4622      	mov	r2, r4
 80a5e7a:	462b      	mov	r3, r5
 80a5e7c:	f001 fed4 	bl	80a7c28 <__adddf3>
 80a5e80:	4622      	mov	r2, r4
 80a5e82:	2400      	movs	r4, #0
 80a5e84:	462b      	mov	r3, r5
 80a5e86:	4620      	mov	r0, r4
 80a5e88:	460d      	mov	r5, r1
 80a5e8a:	f001 fecb 	bl	80a7c24 <__aeabi_dsub>
 80a5e8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a5e92:	f001 fec7 	bl	80a7c24 <__aeabi_dsub>
 80a5e96:	4652      	mov	r2, sl
 80a5e98:	465b      	mov	r3, fp
 80a5e9a:	e031      	b.n	80a5f00 <__ieee754_pow+0x550>
 80a5e9c:	f3af 8000 	nop.w
 80a5ea0:	4a454eef 	.word	0x4a454eef
 80a5ea4:	3fca7e28 	.word	0x3fca7e28
 80a5ea8:	93c9db65 	.word	0x93c9db65
 80a5eac:	3fcd864a 	.word	0x3fcd864a
 80a5eb0:	a91d4101 	.word	0xa91d4101
 80a5eb4:	3fd17460 	.word	0x3fd17460
 80a5eb8:	518f264d 	.word	0x518f264d
 80a5ebc:	3fd55555 	.word	0x3fd55555
 80a5ec0:	db6fabff 	.word	0xdb6fabff
 80a5ec4:	3fdb6db6 	.word	0x3fdb6db6
 80a5ec8:	33333303 	.word	0x33333303
 80a5ecc:	3fe33333 	.word	0x3fe33333
 80a5ed0:	e0000000 	.word	0xe0000000
 80a5ed4:	3feec709 	.word	0x3feec709
 80a5ed8:	dc3a03fd 	.word	0xdc3a03fd
 80a5edc:	3feec709 	.word	0x3feec709
 80a5ee0:	145b01f5 	.word	0x145b01f5
 80a5ee4:	be3e2fe0 	.word	0xbe3e2fe0
 80a5ee8:	7ff00000 	.word	0x7ff00000
 80a5eec:	43400000 	.word	0x43400000
 80a5ef0:	0003988e 	.word	0x0003988e
 80a5ef4:	000bb679 	.word	0x000bb679
 80a5ef8:	3ff00000 	.word	0x3ff00000
 80a5efc:	40080000 	.word	0x40080000
 80a5f00:	f001 fe90 	bl	80a7c24 <__aeabi_dsub>
 80a5f04:	4602      	mov	r2, r0
 80a5f06:	460b      	mov	r3, r1
 80a5f08:	4630      	mov	r0, r6
 80a5f0a:	4639      	mov	r1, r7
 80a5f0c:	f001 fe8a 	bl	80a7c24 <__aeabi_dsub>
 80a5f10:	9b02      	ldr	r3, [sp, #8]
 80a5f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a5f14:	3b01      	subs	r3, #1
 80a5f16:	4313      	orrs	r3, r2
 80a5f18:	f04f 0200 	mov.w	r2, #0
 80a5f1c:	bf0c      	ite	eq
 80a5f1e:	4bd2      	ldreq	r3, [pc, #840]	; (80a6268 <__ieee754_pow+0x8b8>)
 80a5f20:	4bd2      	ldrne	r3, [pc, #840]	; (80a626c <__ieee754_pow+0x8bc>)
 80a5f22:	e9cd 8900 	strd	r8, r9, [sp]
 80a5f26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a5f2a:	2300      	movs	r3, #0
 80a5f2c:	9300      	str	r3, [sp, #0]
 80a5f2e:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a5f32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a5f36:	4652      	mov	r2, sl
 80a5f38:	4640      	mov	r0, r8
 80a5f3a:	4649      	mov	r1, r9
 80a5f3c:	465b      	mov	r3, fp
 80a5f3e:	f001 fe71 	bl	80a7c24 <__aeabi_dsub>
 80a5f42:	4622      	mov	r2, r4
 80a5f44:	462b      	mov	r3, r5
 80a5f46:	f002 f825 	bl	80a7f94 <__aeabi_dmul>
 80a5f4a:	4642      	mov	r2, r8
 80a5f4c:	4606      	mov	r6, r0
 80a5f4e:	460f      	mov	r7, r1
 80a5f50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a5f54:	464b      	mov	r3, r9
 80a5f56:	f002 f81d 	bl	80a7f94 <__aeabi_dmul>
 80a5f5a:	4602      	mov	r2, r0
 80a5f5c:	460b      	mov	r3, r1
 80a5f5e:	4630      	mov	r0, r6
 80a5f60:	4639      	mov	r1, r7
 80a5f62:	f001 fe61 	bl	80a7c28 <__adddf3>
 80a5f66:	4652      	mov	r2, sl
 80a5f68:	4606      	mov	r6, r0
 80a5f6a:	460f      	mov	r7, r1
 80a5f6c:	465b      	mov	r3, fp
 80a5f6e:	4620      	mov	r0, r4
 80a5f70:	4629      	mov	r1, r5
 80a5f72:	f002 f80f 	bl	80a7f94 <__aeabi_dmul>
 80a5f76:	4604      	mov	r4, r0
 80a5f78:	460d      	mov	r5, r1
 80a5f7a:	4630      	mov	r0, r6
 80a5f7c:	462b      	mov	r3, r5
 80a5f7e:	4639      	mov	r1, r7
 80a5f80:	4622      	mov	r2, r4
 80a5f82:	f001 fe51 	bl	80a7c28 <__adddf3>
 80a5f86:	4bba      	ldr	r3, [pc, #744]	; (80a6270 <__ieee754_pow+0x8c0>)
 80a5f88:	4680      	mov	r8, r0
 80a5f8a:	4299      	cmp	r1, r3
 80a5f8c:	4689      	mov	r9, r1
 80a5f8e:	468a      	mov	sl, r1
 80a5f90:	f340 8114 	ble.w	80a61bc <__ieee754_pow+0x80c>
 80a5f94:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a5f98:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a5f9c:	4303      	orrs	r3, r0
 80a5f9e:	f040 81f6 	bne.w	80a638e <__ieee754_pow+0x9de>
 80a5fa2:	a39d      	add	r3, pc, #628	; (adr r3, 80a6218 <__ieee754_pow+0x868>)
 80a5fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5fa8:	4630      	mov	r0, r6
 80a5faa:	4639      	mov	r1, r7
 80a5fac:	f001 fe3c 	bl	80a7c28 <__adddf3>
 80a5fb0:	4602      	mov	r2, r0
 80a5fb2:	460b      	mov	r3, r1
 80a5fb4:	4640      	mov	r0, r8
 80a5fb6:	4649      	mov	r1, r9
 80a5fb8:	4690      	mov	r8, r2
 80a5fba:	4699      	mov	r9, r3
 80a5fbc:	4622      	mov	r2, r4
 80a5fbe:	462b      	mov	r3, r5
 80a5fc0:	f001 fe30 	bl	80a7c24 <__aeabi_dsub>
 80a5fc4:	4602      	mov	r2, r0
 80a5fc6:	460b      	mov	r3, r1
 80a5fc8:	4640      	mov	r0, r8
 80a5fca:	4649      	mov	r1, r9
 80a5fcc:	f002 fa72 	bl	80a84b4 <__aeabi_dcmpgt>
 80a5fd0:	2800      	cmp	r0, #0
 80a5fd2:	f040 81dc 	bne.w	80a638e <__ieee754_pow+0x9de>
 80a5fd6:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80a5fda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a5fde:	2000      	movs	r0, #0
 80a5fe0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a5fe4:	fa42 f303 	asr.w	r3, r2, r3
 80a5fe8:	4453      	add	r3, sl
 80a5fea:	49a2      	ldr	r1, [pc, #648]	; (80a6274 <__ieee754_pow+0x8c4>)
 80a5fec:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a5ff0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a5ff4:	fa41 fc02 	asr.w	ip, r1, r2
 80a5ff8:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80a5ffc:	ea23 010c 	bic.w	r1, r3, ip
 80a6000:	f1c2 0214 	rsb	r2, r2, #20
 80a6004:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 80a6008:	f1ba 0f00 	cmp.w	sl, #0
 80a600c:	460b      	mov	r3, r1
 80a600e:	fa4b fb02 	asr.w	fp, fp, r2
 80a6012:	4629      	mov	r1, r5
 80a6014:	4602      	mov	r2, r0
 80a6016:	4620      	mov	r0, r4
 80a6018:	bfb8      	it	lt
 80a601a:	f1cb 0b00 	rsblt	fp, fp, #0
 80a601e:	f001 fe01 	bl	80a7c24 <__aeabi_dsub>
 80a6022:	4604      	mov	r4, r0
 80a6024:	460d      	mov	r5, r1
 80a6026:	4630      	mov	r0, r6
 80a6028:	4639      	mov	r1, r7
 80a602a:	4622      	mov	r2, r4
 80a602c:	462b      	mov	r3, r5
 80a602e:	f001 fdfb 	bl	80a7c28 <__adddf3>
 80a6032:	4689      	mov	r9, r1
 80a6034:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 80a6038:	f04f 0800 	mov.w	r8, #0
 80a603c:	a378      	add	r3, pc, #480	; (adr r3, 80a6220 <__ieee754_pow+0x870>)
 80a603e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6042:	4640      	mov	r0, r8
 80a6044:	4649      	mov	r1, r9
 80a6046:	f001 ffa5 	bl	80a7f94 <__aeabi_dmul>
 80a604a:	4622      	mov	r2, r4
 80a604c:	462b      	mov	r3, r5
 80a604e:	4604      	mov	r4, r0
 80a6050:	460d      	mov	r5, r1
 80a6052:	4640      	mov	r0, r8
 80a6054:	4649      	mov	r1, r9
 80a6056:	f001 fde5 	bl	80a7c24 <__aeabi_dsub>
 80a605a:	4602      	mov	r2, r0
 80a605c:	460b      	mov	r3, r1
 80a605e:	4630      	mov	r0, r6
 80a6060:	4639      	mov	r1, r7
 80a6062:	f001 fddf 	bl	80a7c24 <__aeabi_dsub>
 80a6066:	a370      	add	r3, pc, #448	; (adr r3, 80a6228 <__ieee754_pow+0x878>)
 80a6068:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a606c:	f001 ff92 	bl	80a7f94 <__aeabi_dmul>
 80a6070:	a36f      	add	r3, pc, #444	; (adr r3, 80a6230 <__ieee754_pow+0x880>)
 80a6072:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6076:	4606      	mov	r6, r0
 80a6078:	460f      	mov	r7, r1
 80a607a:	4640      	mov	r0, r8
 80a607c:	4649      	mov	r1, r9
 80a607e:	f001 ff89 	bl	80a7f94 <__aeabi_dmul>
 80a6082:	4602      	mov	r2, r0
 80a6084:	460b      	mov	r3, r1
 80a6086:	4630      	mov	r0, r6
 80a6088:	4639      	mov	r1, r7
 80a608a:	f001 fdcd 	bl	80a7c28 <__adddf3>
 80a608e:	4680      	mov	r8, r0
 80a6090:	4689      	mov	r9, r1
 80a6092:	4642      	mov	r2, r8
 80a6094:	464b      	mov	r3, r9
 80a6096:	4620      	mov	r0, r4
 80a6098:	4629      	mov	r1, r5
 80a609a:	f001 fdc5 	bl	80a7c28 <__adddf3>
 80a609e:	4622      	mov	r2, r4
 80a60a0:	462b      	mov	r3, r5
 80a60a2:	4606      	mov	r6, r0
 80a60a4:	460f      	mov	r7, r1
 80a60a6:	f001 fdbd 	bl	80a7c24 <__aeabi_dsub>
 80a60aa:	4602      	mov	r2, r0
 80a60ac:	460b      	mov	r3, r1
 80a60ae:	4640      	mov	r0, r8
 80a60b0:	4649      	mov	r1, r9
 80a60b2:	f001 fdb7 	bl	80a7c24 <__aeabi_dsub>
 80a60b6:	4632      	mov	r2, r6
 80a60b8:	4680      	mov	r8, r0
 80a60ba:	4689      	mov	r9, r1
 80a60bc:	463b      	mov	r3, r7
 80a60be:	4630      	mov	r0, r6
 80a60c0:	4639      	mov	r1, r7
 80a60c2:	f001 ff67 	bl	80a7f94 <__aeabi_dmul>
 80a60c6:	a35c      	add	r3, pc, #368	; (adr r3, 80a6238 <__ieee754_pow+0x888>)
 80a60c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a60cc:	4604      	mov	r4, r0
 80a60ce:	460d      	mov	r5, r1
 80a60d0:	f001 ff60 	bl	80a7f94 <__aeabi_dmul>
 80a60d4:	a35a      	add	r3, pc, #360	; (adr r3, 80a6240 <__ieee754_pow+0x890>)
 80a60d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a60da:	f001 fda3 	bl	80a7c24 <__aeabi_dsub>
 80a60de:	4622      	mov	r2, r4
 80a60e0:	462b      	mov	r3, r5
 80a60e2:	f001 ff57 	bl	80a7f94 <__aeabi_dmul>
 80a60e6:	a358      	add	r3, pc, #352	; (adr r3, 80a6248 <__ieee754_pow+0x898>)
 80a60e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a60ec:	f001 fd9c 	bl	80a7c28 <__adddf3>
 80a60f0:	4622      	mov	r2, r4
 80a60f2:	462b      	mov	r3, r5
 80a60f4:	f001 ff4e 	bl	80a7f94 <__aeabi_dmul>
 80a60f8:	a355      	add	r3, pc, #340	; (adr r3, 80a6250 <__ieee754_pow+0x8a0>)
 80a60fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a60fe:	f001 fd91 	bl	80a7c24 <__aeabi_dsub>
 80a6102:	4622      	mov	r2, r4
 80a6104:	462b      	mov	r3, r5
 80a6106:	f001 ff45 	bl	80a7f94 <__aeabi_dmul>
 80a610a:	a353      	add	r3, pc, #332	; (adr r3, 80a6258 <__ieee754_pow+0x8a8>)
 80a610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6110:	f001 fd8a 	bl	80a7c28 <__adddf3>
 80a6114:	4622      	mov	r2, r4
 80a6116:	462b      	mov	r3, r5
 80a6118:	f001 ff3c 	bl	80a7f94 <__aeabi_dmul>
 80a611c:	4602      	mov	r2, r0
 80a611e:	460b      	mov	r3, r1
 80a6120:	4630      	mov	r0, r6
 80a6122:	4639      	mov	r1, r7
 80a6124:	f001 fd7e 	bl	80a7c24 <__aeabi_dsub>
 80a6128:	4604      	mov	r4, r0
 80a612a:	460d      	mov	r5, r1
 80a612c:	4622      	mov	r2, r4
 80a612e:	462b      	mov	r3, r5
 80a6130:	4630      	mov	r0, r6
 80a6132:	4639      	mov	r1, r7
 80a6134:	f001 ff2e 	bl	80a7f94 <__aeabi_dmul>
 80a6138:	4602      	mov	r2, r0
 80a613a:	460b      	mov	r3, r1
 80a613c:	4620      	mov	r0, r4
 80a613e:	4629      	mov	r1, r5
 80a6140:	4614      	mov	r4, r2
 80a6142:	461d      	mov	r5, r3
 80a6144:	2200      	movs	r2, #0
 80a6146:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a614a:	f001 fd6b 	bl	80a7c24 <__aeabi_dsub>
 80a614e:	4602      	mov	r2, r0
 80a6150:	460b      	mov	r3, r1
 80a6152:	4620      	mov	r0, r4
 80a6154:	4629      	mov	r1, r5
 80a6156:	f002 f847 	bl	80a81e8 <__aeabi_ddiv>
 80a615a:	4642      	mov	r2, r8
 80a615c:	4604      	mov	r4, r0
 80a615e:	460d      	mov	r5, r1
 80a6160:	464b      	mov	r3, r9
 80a6162:	4630      	mov	r0, r6
 80a6164:	4639      	mov	r1, r7
 80a6166:	f001 ff15 	bl	80a7f94 <__aeabi_dmul>
 80a616a:	4642      	mov	r2, r8
 80a616c:	464b      	mov	r3, r9
 80a616e:	f001 fd5b 	bl	80a7c28 <__adddf3>
 80a6172:	4602      	mov	r2, r0
 80a6174:	460b      	mov	r3, r1
 80a6176:	4620      	mov	r0, r4
 80a6178:	4629      	mov	r1, r5
 80a617a:	f001 fd53 	bl	80a7c24 <__aeabi_dsub>
 80a617e:	4632      	mov	r2, r6
 80a6180:	463b      	mov	r3, r7
 80a6182:	f001 fd4f 	bl	80a7c24 <__aeabi_dsub>
 80a6186:	4602      	mov	r2, r0
 80a6188:	460b      	mov	r3, r1
 80a618a:	2000      	movs	r0, #0
 80a618c:	4937      	ldr	r1, [pc, #220]	; (80a626c <__ieee754_pow+0x8bc>)
 80a618e:	f001 fd49 	bl	80a7c24 <__aeabi_dsub>
 80a6192:	448a      	add	sl, r1
 80a6194:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 80a6198:	f2c0 8135 	blt.w	80a6406 <__ieee754_pow+0xa56>
 80a619c:	4651      	mov	r1, sl
 80a619e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a61a2:	f001 fef7 	bl	80a7f94 <__aeabi_dmul>
 80a61a6:	e9cd 0100 	strd	r0, r1, [sp]
 80a61aa:	e447      	b.n	80a5a3c <__ieee754_pow+0x8c>
 80a61ac:	2e00      	cmp	r6, #0
 80a61ae:	f6ff acb1 	blt.w	80a5b14 <__ieee754_pow+0x164>
 80a61b2:	2300      	movs	r3, #0
 80a61b4:	2400      	movs	r4, #0
 80a61b6:	e9cd 3400 	strd	r3, r4, [sp]
 80a61ba:	e43f      	b.n	80a5a3c <__ieee754_pow+0x8c>
 80a61bc:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 80a6278 <__ieee754_pow+0x8c8>
 80a61c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a61c4:	4563      	cmp	r3, ip
 80a61c6:	f340 80da 	ble.w	80a637e <__ieee754_pow+0x9ce>
 80a61ca:	4b2c      	ldr	r3, [pc, #176]	; (80a627c <__ieee754_pow+0x8cc>)
 80a61cc:	440b      	add	r3, r1
 80a61ce:	4303      	orrs	r3, r0
 80a61d0:	d10a      	bne.n	80a61e8 <__ieee754_pow+0x838>
 80a61d2:	4622      	mov	r2, r4
 80a61d4:	462b      	mov	r3, r5
 80a61d6:	f001 fd25 	bl	80a7c24 <__aeabi_dsub>
 80a61da:	4632      	mov	r2, r6
 80a61dc:	463b      	mov	r3, r7
 80a61de:	f002 f95f 	bl	80a84a0 <__aeabi_dcmpge>
 80a61e2:	2800      	cmp	r0, #0
 80a61e4:	f43f aef7 	beq.w	80a5fd6 <__ieee754_pow+0x626>
 80a61e8:	a31d      	add	r3, pc, #116	; (adr r3, 80a6260 <__ieee754_pow+0x8b0>)
 80a61ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a61ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a61f2:	f001 fecf 	bl	80a7f94 <__aeabi_dmul>
 80a61f6:	a31a      	add	r3, pc, #104	; (adr r3, 80a6260 <__ieee754_pow+0x8b0>)
 80a61f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a61fc:	f001 feca 	bl	80a7f94 <__aeabi_dmul>
 80a6200:	e9cd 0100 	strd	r0, r1, [sp]
 80a6204:	e41a      	b.n	80a5a3c <__ieee754_pow+0x8c>
 80a6206:	2e00      	cmp	r6, #0
 80a6208:	dad3      	bge.n	80a61b2 <__ieee754_pow+0x802>
 80a620a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a620e:	f8cd 8000 	str.w	r8, [sp]
 80a6212:	9301      	str	r3, [sp, #4]
 80a6214:	e412      	b.n	80a5a3c <__ieee754_pow+0x8c>
 80a6216:	bf00      	nop
 80a6218:	652b82fe 	.word	0x652b82fe
 80a621c:	3c971547 	.word	0x3c971547
 80a6220:	00000000 	.word	0x00000000
 80a6224:	3fe62e43 	.word	0x3fe62e43
 80a6228:	fefa39ef 	.word	0xfefa39ef
 80a622c:	3fe62e42 	.word	0x3fe62e42
 80a6230:	0ca86c39 	.word	0x0ca86c39
 80a6234:	be205c61 	.word	0xbe205c61
 80a6238:	72bea4d0 	.word	0x72bea4d0
 80a623c:	3e663769 	.word	0x3e663769
 80a6240:	c5d26bf1 	.word	0xc5d26bf1
 80a6244:	3ebbbd41 	.word	0x3ebbbd41
 80a6248:	af25de2c 	.word	0xaf25de2c
 80a624c:	3f11566a 	.word	0x3f11566a
 80a6250:	16bebd93 	.word	0x16bebd93
 80a6254:	3f66c16c 	.word	0x3f66c16c
 80a6258:	5555553e 	.word	0x5555553e
 80a625c:	3fc55555 	.word	0x3fc55555
 80a6260:	c2f8f359 	.word	0xc2f8f359
 80a6264:	01a56e1f 	.word	0x01a56e1f
 80a6268:	bff00000 	.word	0xbff00000
 80a626c:	3ff00000 	.word	0x3ff00000
 80a6270:	408fffff 	.word	0x408fffff
 80a6274:	000fffff 	.word	0x000fffff
 80a6278:	4090cbff 	.word	0x4090cbff
 80a627c:	3f6f3400 	.word	0x3f6f3400
 80a6280:	429c      	cmp	r4, r3
 80a6282:	db93      	blt.n	80a61ac <__ieee754_pow+0x7fc>
 80a6284:	4b7a      	ldr	r3, [pc, #488]	; (80a6470 <__ieee754_pow+0xac0>)
 80a6286:	429c      	cmp	r4, r3
 80a6288:	f73f ac41 	bgt.w	80a5b0e <__ieee754_pow+0x15e>
 80a628c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a6290:	2200      	movs	r2, #0
 80a6292:	4b77      	ldr	r3, [pc, #476]	; (80a6470 <__ieee754_pow+0xac0>)
 80a6294:	f001 fcc6 	bl	80a7c24 <__aeabi_dsub>
 80a6298:	a367      	add	r3, pc, #412	; (adr r3, 80a6438 <__ieee754_pow+0xa88>)
 80a629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a629e:	4604      	mov	r4, r0
 80a62a0:	460d      	mov	r5, r1
 80a62a2:	f001 fe77 	bl	80a7f94 <__aeabi_dmul>
 80a62a6:	a366      	add	r3, pc, #408	; (adr r3, 80a6440 <__ieee754_pow+0xa90>)
 80a62a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a62ac:	4682      	mov	sl, r0
 80a62ae:	468b      	mov	fp, r1
 80a62b0:	4620      	mov	r0, r4
 80a62b2:	4629      	mov	r1, r5
 80a62b4:	f001 fe6e 	bl	80a7f94 <__aeabi_dmul>
 80a62b8:	2200      	movs	r2, #0
 80a62ba:	e9cd 0100 	strd	r0, r1, [sp]
 80a62be:	4b6d      	ldr	r3, [pc, #436]	; (80a6474 <__ieee754_pow+0xac4>)
 80a62c0:	4620      	mov	r0, r4
 80a62c2:	4629      	mov	r1, r5
 80a62c4:	f001 fe66 	bl	80a7f94 <__aeabi_dmul>
 80a62c8:	4602      	mov	r2, r0
 80a62ca:	460b      	mov	r3, r1
 80a62cc:	a15e      	add	r1, pc, #376	; (adr r1, 80a6448 <__ieee754_pow+0xa98>)
 80a62ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a62d2:	f001 fca7 	bl	80a7c24 <__aeabi_dsub>
 80a62d6:	4622      	mov	r2, r4
 80a62d8:	462b      	mov	r3, r5
 80a62da:	f001 fe5b 	bl	80a7f94 <__aeabi_dmul>
 80a62de:	4602      	mov	r2, r0
 80a62e0:	460b      	mov	r3, r1
 80a62e2:	2000      	movs	r0, #0
 80a62e4:	4964      	ldr	r1, [pc, #400]	; (80a6478 <__ieee754_pow+0xac8>)
 80a62e6:	f001 fc9d 	bl	80a7c24 <__aeabi_dsub>
 80a62ea:	4622      	mov	r2, r4
 80a62ec:	4606      	mov	r6, r0
 80a62ee:	460f      	mov	r7, r1
 80a62f0:	462b      	mov	r3, r5
 80a62f2:	4620      	mov	r0, r4
 80a62f4:	4629      	mov	r1, r5
 80a62f6:	f001 fe4d 	bl	80a7f94 <__aeabi_dmul>
 80a62fa:	4602      	mov	r2, r0
 80a62fc:	460b      	mov	r3, r1
 80a62fe:	4630      	mov	r0, r6
 80a6300:	4639      	mov	r1, r7
 80a6302:	f001 fe47 	bl	80a7f94 <__aeabi_dmul>
 80a6306:	a352      	add	r3, pc, #328	; (adr r3, 80a6450 <__ieee754_pow+0xaa0>)
 80a6308:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a630c:	f001 fe42 	bl	80a7f94 <__aeabi_dmul>
 80a6310:	4602      	mov	r2, r0
 80a6312:	460b      	mov	r3, r1
 80a6314:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a6318:	f001 fc84 	bl	80a7c24 <__aeabi_dsub>
 80a631c:	4606      	mov	r6, r0
 80a631e:	460f      	mov	r7, r1
 80a6320:	4632      	mov	r2, r6
 80a6322:	463b      	mov	r3, r7
 80a6324:	4650      	mov	r0, sl
 80a6326:	4659      	mov	r1, fp
 80a6328:	f001 fc7e 	bl	80a7c28 <__adddf3>
 80a632c:	2400      	movs	r4, #0
 80a632e:	4652      	mov	r2, sl
 80a6330:	465b      	mov	r3, fp
 80a6332:	460d      	mov	r5, r1
 80a6334:	4620      	mov	r0, r4
 80a6336:	e5e3      	b.n	80a5f00 <__ieee754_pow+0x550>
 80a6338:	2500      	movs	r5, #0
 80a633a:	e43b      	b.n	80a5bb4 <__ieee754_pow+0x204>
 80a633c:	465a      	mov	r2, fp
 80a633e:	2000      	movs	r0, #0
 80a6340:	4653      	mov	r3, sl
 80a6342:	494b      	ldr	r1, [pc, #300]	; (80a6470 <__ieee754_pow+0xac0>)
 80a6344:	f001 ff50 	bl	80a81e8 <__aeabi_ddiv>
 80a6348:	e9cd 0100 	strd	r0, r1, [sp]
 80a634c:	f7ff bb76 	b.w	80a5a3c <__ieee754_pow+0x8c>
 80a6350:	465a      	mov	r2, fp
 80a6352:	4658      	mov	r0, fp
 80a6354:	4653      	mov	r3, sl
 80a6356:	4651      	mov	r1, sl
 80a6358:	f001 fe1c 	bl	80a7f94 <__aeabi_dmul>
 80a635c:	e9cd 0100 	strd	r0, r1, [sp]
 80a6360:	f7ff bb6c 	b.w	80a5a3c <__ieee754_pow+0x8c>
 80a6364:	2b00      	cmp	r3, #0
 80a6366:	d140      	bne.n	80a63ea <__ieee754_pow+0xa3a>
 80a6368:	f1c2 0214 	rsb	r2, r2, #20
 80a636c:	fa45 f102 	asr.w	r1, r5, r2
 80a6370:	fa01 f202 	lsl.w	r2, r1, r2
 80a6374:	42aa      	cmp	r2, r5
 80a6376:	d054      	beq.n	80a6422 <__ieee754_pow+0xa72>
 80a6378:	9302      	str	r3, [sp, #8]
 80a637a:	f7ff bb3e 	b.w	80a59fa <__ieee754_pow+0x4a>
 80a637e:	4a3e      	ldr	r2, [pc, #248]	; (80a6478 <__ieee754_pow+0xac8>)
 80a6380:	4293      	cmp	r3, r2
 80a6382:	dc55      	bgt.n	80a6430 <__ieee754_pow+0xa80>
 80a6384:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a6388:	4692      	mov	sl, r2
 80a638a:	4693      	mov	fp, r2
 80a638c:	e654      	b.n	80a6038 <__ieee754_pow+0x688>
 80a638e:	a332      	add	r3, pc, #200	; (adr r3, 80a6458 <__ieee754_pow+0xaa8>)
 80a6390:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a6398:	f001 fdfc 	bl	80a7f94 <__aeabi_dmul>
 80a639c:	a32e      	add	r3, pc, #184	; (adr r3, 80a6458 <__ieee754_pow+0xaa8>)
 80a639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a63a2:	f001 fdf7 	bl	80a7f94 <__aeabi_dmul>
 80a63a6:	e9cd 0100 	strd	r0, r1, [sp]
 80a63aa:	f7ff bb47 	b.w	80a5a3c <__ieee754_pow+0x8c>
 80a63ae:	9b02      	ldr	r3, [sp, #8]
 80a63b0:	2b01      	cmp	r3, #1
 80a63b2:	f47f ab43 	bne.w	80a5a3c <__ieee754_pow+0x8c>
 80a63b6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80a63ba:	4622      	mov	r2, r4
 80a63bc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a63c0:	e9cd 2300 	strd	r2, r3, [sp]
 80a63c4:	f7ff bb3a 	b.w	80a5a3c <__ieee754_pow+0x8c>
 80a63c8:	2200      	movs	r2, #0
 80a63ca:	4b2c      	ldr	r3, [pc, #176]	; (80a647c <__ieee754_pow+0xacc>)
 80a63cc:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80a63d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a63d4:	a322      	add	r3, pc, #136	; (adr r3, 80a6460 <__ieee754_pow+0xab0>)
 80a63d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a63da:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a63de:	a322      	add	r3, pc, #136	; (adr r3, 80a6468 <__ieee754_pow+0xab8>)
 80a63e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a63e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a63e8:	e405      	b.n	80a5bf6 <__ieee754_pow+0x246>
 80a63ea:	4658      	mov	r0, fp
 80a63ec:	4651      	mov	r1, sl
 80a63ee:	f001 f93d 	bl	80a766c <fabs>
 80a63f2:	465b      	mov	r3, fp
 80a63f4:	e9cd 0100 	strd	r0, r1, [sp]
 80a63f8:	2b00      	cmp	r3, #0
 80a63fa:	f47f abb2 	bne.w	80a5b62 <__ieee754_pow+0x1b2>
 80a63fe:	f8cd b008 	str.w	fp, [sp, #8]
 80a6402:	f7ff bb4b 	b.w	80a5a9c <__ieee754_pow+0xec>
 80a6406:	465a      	mov	r2, fp
 80a6408:	f001 f9de 	bl	80a77c8 <scalbn>
 80a640c:	e6c7      	b.n	80a619e <__ieee754_pow+0x7ee>
 80a640e:	f001 0101 	and.w	r1, r1, #1
 80a6412:	f1c1 0202 	rsb	r2, r1, #2
 80a6416:	9202      	str	r2, [sp, #8]
 80a6418:	2b00      	cmp	r3, #0
 80a641a:	f43f aaee 	beq.w	80a59fa <__ieee754_pow+0x4a>
 80a641e:	f7ff bb35 	b.w	80a5a8c <__ieee754_pow+0xdc>
 80a6422:	f001 0101 	and.w	r1, r1, #1
 80a6426:	f1c1 0302 	rsb	r3, r1, #2
 80a642a:	9302      	str	r3, [sp, #8]
 80a642c:	f7ff bae5 	b.w	80a59fa <__ieee754_pow+0x4a>
 80a6430:	151b      	asrs	r3, r3, #20
 80a6432:	e5d2      	b.n	80a5fda <__ieee754_pow+0x62a>
 80a6434:	f3af 8000 	nop.w
 80a6438:	60000000 	.word	0x60000000
 80a643c:	3ff71547 	.word	0x3ff71547
 80a6440:	f85ddf44 	.word	0xf85ddf44
 80a6444:	3e54ae0b 	.word	0x3e54ae0b
 80a6448:	55555555 	.word	0x55555555
 80a644c:	3fd55555 	.word	0x3fd55555
 80a6450:	652b82fe 	.word	0x652b82fe
 80a6454:	3ff71547 	.word	0x3ff71547
 80a6458:	8800759c 	.word	0x8800759c
 80a645c:	7e37e43c 	.word	0x7e37e43c
 80a6460:	40000000 	.word	0x40000000
 80a6464:	3fe2b803 	.word	0x3fe2b803
 80a6468:	43cfd006 	.word	0x43cfd006
 80a646c:	3e4cfdeb 	.word	0x3e4cfdeb
 80a6470:	3ff00000 	.word	0x3ff00000
 80a6474:	3fd00000 	.word	0x3fd00000
 80a6478:	3fe00000 	.word	0x3fe00000
 80a647c:	3ff80000 	.word	0x3ff80000

080a6480 <__ieee754_sqrt>:
 80a6480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a6484:	4e60      	ldr	r6, [pc, #384]	; (80a6608 <__ieee754_sqrt+0x188>)
 80a6486:	4605      	mov	r5, r0
 80a6488:	ea36 0201 	bics.w	r2, r6, r1
 80a648c:	460c      	mov	r4, r1
 80a648e:	f000 809e 	beq.w	80a65ce <__ieee754_sqrt+0x14e>
 80a6492:	2900      	cmp	r1, #0
 80a6494:	460b      	mov	r3, r1
 80a6496:	4684      	mov	ip, r0
 80a6498:	dd54      	ble.n	80a6544 <__ieee754_sqrt+0xc4>
 80a649a:	1509      	asrs	r1, r1, #20
 80a649c:	d062      	beq.n	80a6564 <__ieee754_sqrt+0xe4>
 80a649e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a64a2:	07c8      	lsls	r0, r1, #31
 80a64a4:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80a64a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a64ac:	d404      	bmi.n	80a64b8 <__ieee754_sqrt+0x38>
 80a64ae:	005b      	lsls	r3, r3, #1
 80a64b0:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 80a64b4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80a64b8:	2600      	movs	r6, #0
 80a64ba:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 80a64be:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80a64c2:	f04f 0e16 	mov.w	lr, #22
 80a64c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80a64ca:	4634      	mov	r4, r6
 80a64cc:	107f      	asrs	r7, r7, #1
 80a64ce:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80a64d2:	18a1      	adds	r1, r4, r2
 80a64d4:	4299      	cmp	r1, r3
 80a64d6:	dc02      	bgt.n	80a64de <__ieee754_sqrt+0x5e>
 80a64d8:	1a5b      	subs	r3, r3, r1
 80a64da:	188c      	adds	r4, r1, r2
 80a64dc:	4416      	add	r6, r2
 80a64de:	005b      	lsls	r3, r3, #1
 80a64e0:	f1be 0e01 	subs.w	lr, lr, #1
 80a64e4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 80a64e8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a64ec:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80a64f0:	d1ef      	bne.n	80a64d2 <__ieee754_sqrt+0x52>
 80a64f2:	4675      	mov	r5, lr
 80a64f4:	2020      	movs	r0, #32
 80a64f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80a64fa:	e00a      	b.n	80a6512 <__ieee754_sqrt+0x92>
 80a64fc:	d043      	beq.n	80a6586 <__ieee754_sqrt+0x106>
 80a64fe:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80a6502:	3801      	subs	r0, #1
 80a6504:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a6508:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80a650c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a6510:	d042      	beq.n	80a6598 <__ieee754_sqrt+0x118>
 80a6512:	42a3      	cmp	r3, r4
 80a6514:	eb02 010e 	add.w	r1, r2, lr
 80a6518:	ddf0      	ble.n	80a64fc <__ieee754_sqrt+0x7c>
 80a651a:	2900      	cmp	r1, #0
 80a651c:	eb01 0e02 	add.w	lr, r1, r2
 80a6520:	db0a      	blt.n	80a6538 <__ieee754_sqrt+0xb8>
 80a6522:	46a0      	mov	r8, r4
 80a6524:	1b1b      	subs	r3, r3, r4
 80a6526:	4561      	cmp	r1, ip
 80a6528:	bf88      	it	hi
 80a652a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80a652e:	4644      	mov	r4, r8
 80a6530:	ebac 0c01 	sub.w	ip, ip, r1
 80a6534:	4415      	add	r5, r2
 80a6536:	e7e2      	b.n	80a64fe <__ieee754_sqrt+0x7e>
 80a6538:	f1be 0f00 	cmp.w	lr, #0
 80a653c:	dbf1      	blt.n	80a6522 <__ieee754_sqrt+0xa2>
 80a653e:	f104 0801 	add.w	r8, r4, #1
 80a6542:	e7ef      	b.n	80a6524 <__ieee754_sqrt+0xa4>
 80a6544:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a6548:	4302      	orrs	r2, r0
 80a654a:	d036      	beq.n	80a65ba <__ieee754_sqrt+0x13a>
 80a654c:	2900      	cmp	r1, #0
 80a654e:	d14c      	bne.n	80a65ea <__ieee754_sqrt+0x16a>
 80a6550:	ea4f 22dc 	mov.w	r2, ip, lsr #11
 80a6554:	4613      	mov	r3, r2
 80a6556:	3915      	subs	r1, #21
 80a6558:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
 80a655c:	2a00      	cmp	r2, #0
 80a655e:	d0f7      	beq.n	80a6550 <__ieee754_sqrt+0xd0>
 80a6560:	02d6      	lsls	r6, r2, #11
 80a6562:	d44c      	bmi.n	80a65fe <__ieee754_sqrt+0x17e>
 80a6564:	2000      	movs	r0, #0
 80a6566:	005b      	lsls	r3, r3, #1
 80a6568:	02dd      	lsls	r5, r3, #11
 80a656a:	4604      	mov	r4, r0
 80a656c:	f100 0001 	add.w	r0, r0, #1
 80a6570:	d5f9      	bpl.n	80a6566 <__ieee754_sqrt+0xe6>
 80a6572:	461a      	mov	r2, r3
 80a6574:	4663      	mov	r3, ip
 80a6576:	fa0c fc00 	lsl.w	ip, ip, r0
 80a657a:	f1c0 0020 	rsb	r0, r0, #32
 80a657e:	40c3      	lsrs	r3, r0
 80a6580:	1b09      	subs	r1, r1, r4
 80a6582:	4313      	orrs	r3, r2
 80a6584:	e78b      	b.n	80a649e <__ieee754_sqrt+0x1e>
 80a6586:	4561      	cmp	r1, ip
 80a6588:	d8b9      	bhi.n	80a64fe <__ieee754_sqrt+0x7e>
 80a658a:	2900      	cmp	r1, #0
 80a658c:	eb01 0e02 	add.w	lr, r1, r2
 80a6590:	dbd2      	blt.n	80a6538 <__ieee754_sqrt+0xb8>
 80a6592:	4698      	mov	r8, r3
 80a6594:	2300      	movs	r3, #0
 80a6596:	e7ca      	b.n	80a652e <__ieee754_sqrt+0xae>
 80a6598:	ea53 030c 	orrs.w	r3, r3, ip
 80a659c:	d111      	bne.n	80a65c2 <__ieee754_sqrt+0x142>
 80a659e:	0868      	lsrs	r0, r5, #1
 80a65a0:	1073      	asrs	r3, r6, #1
 80a65a2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a65a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a65aa:	07f2      	lsls	r2, r6, #31
 80a65ac:	bf48      	it	mi
 80a65ae:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a65b2:	eb03 5907 	add.w	r9, r3, r7, lsl #20
 80a65b6:	4605      	mov	r5, r0
 80a65b8:	464c      	mov	r4, r9
 80a65ba:	4628      	mov	r0, r5
 80a65bc:	4621      	mov	r1, r4
 80a65be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a65c2:	1c69      	adds	r1, r5, #1
 80a65c4:	bf16      	itet	ne
 80a65c6:	1c68      	addne	r0, r5, #1
 80a65c8:	3601      	addeq	r6, #1
 80a65ca:	0840      	lsrne	r0, r0, #1
 80a65cc:	e7e8      	b.n	80a65a0 <__ieee754_sqrt+0x120>
 80a65ce:	4602      	mov	r2, r0
 80a65d0:	460b      	mov	r3, r1
 80a65d2:	f001 fcdf 	bl	80a7f94 <__aeabi_dmul>
 80a65d6:	462a      	mov	r2, r5
 80a65d8:	4623      	mov	r3, r4
 80a65da:	f001 fb25 	bl	80a7c28 <__adddf3>
 80a65de:	4605      	mov	r5, r0
 80a65e0:	460c      	mov	r4, r1
 80a65e2:	4628      	mov	r0, r5
 80a65e4:	4621      	mov	r1, r4
 80a65e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a65ea:	4602      	mov	r2, r0
 80a65ec:	f001 fb1a 	bl	80a7c24 <__aeabi_dsub>
 80a65f0:	4602      	mov	r2, r0
 80a65f2:	460b      	mov	r3, r1
 80a65f4:	f001 fdf8 	bl	80a81e8 <__aeabi_ddiv>
 80a65f8:	4605      	mov	r5, r0
 80a65fa:	460c      	mov	r4, r1
 80a65fc:	e7dd      	b.n	80a65ba <__ieee754_sqrt+0x13a>
 80a65fe:	4663      	mov	r3, ip
 80a6600:	2020      	movs	r0, #32
 80a6602:	f04f 34ff 	mov.w	r4, #4294967295
 80a6606:	e7ba      	b.n	80a657e <__ieee754_sqrt+0xfe>
 80a6608:	7ff00000 	.word	0x7ff00000

080a660c <__ieee754_atan2f>:
 80a660c:	b570      	push	{r4, r5, r6, lr}
 80a660e:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80a6612:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80a6616:	460a      	mov	r2, r1
 80a6618:	4603      	mov	r3, r0
 80a661a:	dc2c      	bgt.n	80a6676 <__ieee754_atan2f+0x6a>
 80a661c:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80a6620:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80a6624:	4684      	mov	ip, r0
 80a6626:	dc26      	bgt.n	80a6676 <__ieee754_atan2f+0x6a>
 80a6628:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80a662c:	d035      	beq.n	80a669a <__ieee754_atan2f+0x8e>
 80a662e:	178c      	asrs	r4, r1, #30
 80a6630:	f004 0402 	and.w	r4, r4, #2
 80a6634:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80a6638:	b316      	cbz	r6, 80a6680 <__ieee754_atan2f+0x74>
 80a663a:	b33d      	cbz	r5, 80a668c <__ieee754_atan2f+0x80>
 80a663c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80a6640:	d033      	beq.n	80a66aa <__ieee754_atan2f+0x9e>
 80a6642:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80a6646:	d021      	beq.n	80a668c <__ieee754_atan2f+0x80>
 80a6648:	1b75      	subs	r5, r6, r5
 80a664a:	f1b5 5ff4 	cmp.w	r5, #511705088	; 0x1e800000
 80a664e:	ea4f 50e5 	mov.w	r0, r5, asr #23
 80a6652:	da28      	bge.n	80a66a6 <__ieee754_atan2f+0x9a>
 80a6654:	2900      	cmp	r1, #0
 80a6656:	da33      	bge.n	80a66c0 <__ieee754_atan2f+0xb4>
 80a6658:	303c      	adds	r0, #60	; 0x3c
 80a665a:	da31      	bge.n	80a66c0 <__ieee754_atan2f+0xb4>
 80a665c:	2000      	movs	r0, #0
 80a665e:	2c01      	cmp	r4, #1
 80a6660:	d03f      	beq.n	80a66e2 <__ieee754_atan2f+0xd6>
 80a6662:	2c02      	cmp	r4, #2
 80a6664:	d035      	beq.n	80a66d2 <__ieee754_atan2f+0xc6>
 80a6666:	b12c      	cbz	r4, 80a6674 <__ieee754_atan2f+0x68>
 80a6668:	4924      	ldr	r1, [pc, #144]	; (80a66fc <__ieee754_atan2f+0xf0>)
 80a666a:	f001 ffe1 	bl	80a8630 <__addsf3>
 80a666e:	4924      	ldr	r1, [pc, #144]	; (80a6700 <__ieee754_atan2f+0xf4>)
 80a6670:	f001 ffdc 	bl	80a862c <__aeabi_fsub>
 80a6674:	bd70      	pop	{r4, r5, r6, pc}
 80a6676:	4619      	mov	r1, r3
 80a6678:	4610      	mov	r0, r2
 80a667a:	f001 ffd9 	bl	80a8630 <__addsf3>
 80a667e:	bd70      	pop	{r4, r5, r6, pc}
 80a6680:	2c02      	cmp	r4, #2
 80a6682:	d008      	beq.n	80a6696 <__ieee754_atan2f+0x8a>
 80a6684:	2c03      	cmp	r4, #3
 80a6686:	d1f5      	bne.n	80a6674 <__ieee754_atan2f+0x68>
 80a6688:	481e      	ldr	r0, [pc, #120]	; (80a6704 <__ieee754_atan2f+0xf8>)
 80a668a:	bd70      	pop	{r4, r5, r6, pc}
 80a668c:	f1bc 0f00 	cmp.w	ip, #0
 80a6690:	db07      	blt.n	80a66a2 <__ieee754_atan2f+0x96>
 80a6692:	481d      	ldr	r0, [pc, #116]	; (80a6708 <__ieee754_atan2f+0xfc>)
 80a6694:	bd70      	pop	{r4, r5, r6, pc}
 80a6696:	481a      	ldr	r0, [pc, #104]	; (80a6700 <__ieee754_atan2f+0xf4>)
 80a6698:	bd70      	pop	{r4, r5, r6, pc}
 80a669a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a669e:	f001 b911 	b.w	80a78c4 <atanf>
 80a66a2:	481a      	ldr	r0, [pc, #104]	; (80a670c <__ieee754_atan2f+0x100>)
 80a66a4:	bd70      	pop	{r4, r5, r6, pc}
 80a66a6:	4818      	ldr	r0, [pc, #96]	; (80a6708 <__ieee754_atan2f+0xfc>)
 80a66a8:	e7d9      	b.n	80a665e <__ieee754_atan2f+0x52>
 80a66aa:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80a66ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80a66b2:	d019      	beq.n	80a66e8 <__ieee754_atan2f+0xdc>
 80a66b4:	2c02      	cmp	r4, #2
 80a66b6:	d81d      	bhi.n	80a66f4 <__ieee754_atan2f+0xe8>
 80a66b8:	4b15      	ldr	r3, [pc, #84]	; (80a6710 <__ieee754_atan2f+0x104>)
 80a66ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a66be:	bd70      	pop	{r4, r5, r6, pc}
 80a66c0:	4611      	mov	r1, r2
 80a66c2:	4618      	mov	r0, r3
 80a66c4:	f002 f970 	bl	80a89a8 <__aeabi_fdiv>
 80a66c8:	f001 fa06 	bl	80a7ad8 <fabsf>
 80a66cc:	f001 f8fa 	bl	80a78c4 <atanf>
 80a66d0:	e7c5      	b.n	80a665e <__ieee754_atan2f+0x52>
 80a66d2:	490a      	ldr	r1, [pc, #40]	; (80a66fc <__ieee754_atan2f+0xf0>)
 80a66d4:	f001 ffac 	bl	80a8630 <__addsf3>
 80a66d8:	4601      	mov	r1, r0
 80a66da:	4809      	ldr	r0, [pc, #36]	; (80a6700 <__ieee754_atan2f+0xf4>)
 80a66dc:	f001 ffa6 	bl	80a862c <__aeabi_fsub>
 80a66e0:	bd70      	pop	{r4, r5, r6, pc}
 80a66e2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a66e6:	bd70      	pop	{r4, r5, r6, pc}
 80a66e8:	2c02      	cmp	r4, #2
 80a66ea:	d805      	bhi.n	80a66f8 <__ieee754_atan2f+0xec>
 80a66ec:	4b09      	ldr	r3, [pc, #36]	; (80a6714 <__ieee754_atan2f+0x108>)
 80a66ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a66f2:	bd70      	pop	{r4, r5, r6, pc}
 80a66f4:	2000      	movs	r0, #0
 80a66f6:	bd70      	pop	{r4, r5, r6, pc}
 80a66f8:	4807      	ldr	r0, [pc, #28]	; (80a6718 <__ieee754_atan2f+0x10c>)
 80a66fa:	bd70      	pop	{r4, r5, r6, pc}
 80a66fc:	33bbbd2e 	.word	0x33bbbd2e
 80a6700:	40490fdb 	.word	0x40490fdb
 80a6704:	c0490fdb 	.word	0xc0490fdb
 80a6708:	3fc90fdb 	.word	0x3fc90fdb
 80a670c:	bfc90fdb 	.word	0xbfc90fdb
 80a6710:	080aa360 	.word	0x080aa360
 80a6714:	080aa354 	.word	0x080aa354
 80a6718:	3f490fdb 	.word	0x3f490fdb

080a671c <__ieee754_rem_pio2f>:
 80a671c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6720:	4aaa      	ldr	r2, [pc, #680]	; (80a69cc <__ieee754_rem_pio2f+0x2b0>)
 80a6722:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80a6726:	4294      	cmp	r4, r2
 80a6728:	460d      	mov	r5, r1
 80a672a:	b089      	sub	sp, #36	; 0x24
 80a672c:	dd6c      	ble.n	80a6808 <__ieee754_rem_pio2f+0xec>
 80a672e:	4aa8      	ldr	r2, [pc, #672]	; (80a69d0 <__ieee754_rem_pio2f+0x2b4>)
 80a6730:	4607      	mov	r7, r0
 80a6732:	4294      	cmp	r4, r2
 80a6734:	dc1c      	bgt.n	80a6770 <__ieee754_rem_pio2f+0x54>
 80a6736:	2800      	cmp	r0, #0
 80a6738:	49a6      	ldr	r1, [pc, #664]	; (80a69d4 <__ieee754_rem_pio2f+0x2b8>)
 80a673a:	f340 811d 	ble.w	80a6978 <__ieee754_rem_pio2f+0x25c>
 80a673e:	f001 ff75 	bl	80a862c <__aeabi_fsub>
 80a6742:	4ba5      	ldr	r3, [pc, #660]	; (80a69d8 <__ieee754_rem_pio2f+0x2bc>)
 80a6744:	f024 040f 	bic.w	r4, r4, #15
 80a6748:	429c      	cmp	r4, r3
 80a674a:	4606      	mov	r6, r0
 80a674c:	d06b      	beq.n	80a6826 <__ieee754_rem_pio2f+0x10a>
 80a674e:	49a3      	ldr	r1, [pc, #652]	; (80a69dc <__ieee754_rem_pio2f+0x2c0>)
 80a6750:	f001 ff6c 	bl	80a862c <__aeabi_fsub>
 80a6754:	4601      	mov	r1, r0
 80a6756:	4630      	mov	r0, r6
 80a6758:	6029      	str	r1, [r5, #0]
 80a675a:	f001 ff67 	bl	80a862c <__aeabi_fsub>
 80a675e:	499f      	ldr	r1, [pc, #636]	; (80a69dc <__ieee754_rem_pio2f+0x2c0>)
 80a6760:	f001 ff64 	bl	80a862c <__aeabi_fsub>
 80a6764:	2601      	movs	r6, #1
 80a6766:	6068      	str	r0, [r5, #4]
 80a6768:	4630      	mov	r0, r6
 80a676a:	b009      	add	sp, #36	; 0x24
 80a676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6770:	4a9b      	ldr	r2, [pc, #620]	; (80a69e0 <__ieee754_rem_pio2f+0x2c4>)
 80a6772:	4294      	cmp	r4, r2
 80a6774:	dd6c      	ble.n	80a6850 <__ieee754_rem_pio2f+0x134>
 80a6776:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80a677a:	da4d      	bge.n	80a6818 <__ieee754_rem_pio2f+0xfc>
 80a677c:	15e6      	asrs	r6, r4, #23
 80a677e:	3e86      	subs	r6, #134	; 0x86
 80a6780:	eba4 54c6 	sub.w	r4, r4, r6, lsl #23
 80a6784:	4620      	mov	r0, r4
 80a6786:	f002 fa21 	bl	80a8bcc <__aeabi_f2iz>
 80a678a:	f002 f805 	bl	80a8798 <__aeabi_i2f>
 80a678e:	4601      	mov	r1, r0
 80a6790:	4620      	mov	r0, r4
 80a6792:	9105      	str	r1, [sp, #20]
 80a6794:	f001 ff4a 	bl	80a862c <__aeabi_fsub>
 80a6798:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a679c:	f002 f850 	bl	80a8840 <__aeabi_fmul>
 80a67a0:	4680      	mov	r8, r0
 80a67a2:	f002 fa13 	bl	80a8bcc <__aeabi_f2iz>
 80a67a6:	f001 fff7 	bl	80a8798 <__aeabi_i2f>
 80a67aa:	4604      	mov	r4, r0
 80a67ac:	4640      	mov	r0, r8
 80a67ae:	4621      	mov	r1, r4
 80a67b0:	9406      	str	r4, [sp, #24]
 80a67b2:	f001 ff3b 	bl	80a862c <__aeabi_fsub>
 80a67b6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a67ba:	f002 f841 	bl	80a8840 <__aeabi_fmul>
 80a67be:	2100      	movs	r1, #0
 80a67c0:	9007      	str	r0, [sp, #28]
 80a67c2:	f002 f9d1 	bl	80a8b68 <__aeabi_fcmpeq>
 80a67c6:	2800      	cmp	r0, #0
 80a67c8:	f000 80b7 	beq.w	80a693a <__ieee754_rem_pio2f+0x21e>
 80a67cc:	4620      	mov	r0, r4
 80a67ce:	2100      	movs	r1, #0
 80a67d0:	f002 f9ca 	bl	80a8b68 <__aeabi_fcmpeq>
 80a67d4:	2800      	cmp	r0, #0
 80a67d6:	bf14      	ite	ne
 80a67d8:	2301      	movne	r3, #1
 80a67da:	2302      	moveq	r3, #2
 80a67dc:	2402      	movs	r4, #2
 80a67de:	4981      	ldr	r1, [pc, #516]	; (80a69e4 <__ieee754_rem_pio2f+0x2c8>)
 80a67e0:	4632      	mov	r2, r6
 80a67e2:	9101      	str	r1, [sp, #4]
 80a67e4:	a805      	add	r0, sp, #20
 80a67e6:	4629      	mov	r1, r5
 80a67e8:	9400      	str	r4, [sp, #0]
 80a67ea:	f000 f9cf 	bl	80a6b8c <__kernel_rem_pio2f>
 80a67ee:	2f00      	cmp	r7, #0
 80a67f0:	4606      	mov	r6, r0
 80a67f2:	dab9      	bge.n	80a6768 <__ieee754_rem_pio2f+0x4c>
 80a67f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a67f8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a67fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a6800:	602a      	str	r2, [r5, #0]
 80a6802:	606b      	str	r3, [r5, #4]
 80a6804:	4246      	negs	r6, r0
 80a6806:	e7af      	b.n	80a6768 <__ieee754_rem_pio2f+0x4c>
 80a6808:	2600      	movs	r6, #0
 80a680a:	6028      	str	r0, [r5, #0]
 80a680c:	2200      	movs	r2, #0
 80a680e:	4630      	mov	r0, r6
 80a6810:	604a      	str	r2, [r1, #4]
 80a6812:	b009      	add	sp, #36	; 0x24
 80a6814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6818:	4601      	mov	r1, r0
 80a681a:	f001 ff07 	bl	80a862c <__aeabi_fsub>
 80a681e:	2600      	movs	r6, #0
 80a6820:	6068      	str	r0, [r5, #4]
 80a6822:	6028      	str	r0, [r5, #0]
 80a6824:	e7a0      	b.n	80a6768 <__ieee754_rem_pio2f+0x4c>
 80a6826:	4970      	ldr	r1, [pc, #448]	; (80a69e8 <__ieee754_rem_pio2f+0x2cc>)
 80a6828:	f001 ff00 	bl	80a862c <__aeabi_fsub>
 80a682c:	496f      	ldr	r1, [pc, #444]	; (80a69ec <__ieee754_rem_pio2f+0x2d0>)
 80a682e:	4604      	mov	r4, r0
 80a6830:	f001 fefc 	bl	80a862c <__aeabi_fsub>
 80a6834:	4601      	mov	r1, r0
 80a6836:	4620      	mov	r0, r4
 80a6838:	6029      	str	r1, [r5, #0]
 80a683a:	f001 fef7 	bl	80a862c <__aeabi_fsub>
 80a683e:	496b      	ldr	r1, [pc, #428]	; (80a69ec <__ieee754_rem_pio2f+0x2d0>)
 80a6840:	f001 fef4 	bl	80a862c <__aeabi_fsub>
 80a6844:	2601      	movs	r6, #1
 80a6846:	6068      	str	r0, [r5, #4]
 80a6848:	4630      	mov	r0, r6
 80a684a:	b009      	add	sp, #36	; 0x24
 80a684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6850:	f001 f942 	bl	80a7ad8 <fabsf>
 80a6854:	4966      	ldr	r1, [pc, #408]	; (80a69f0 <__ieee754_rem_pio2f+0x2d4>)
 80a6856:	4680      	mov	r8, r0
 80a6858:	f001 fff2 	bl	80a8840 <__aeabi_fmul>
 80a685c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a6860:	f001 fee6 	bl	80a8630 <__addsf3>
 80a6864:	f002 f9b2 	bl	80a8bcc <__aeabi_f2iz>
 80a6868:	4606      	mov	r6, r0
 80a686a:	f001 ff95 	bl	80a8798 <__aeabi_i2f>
 80a686e:	4959      	ldr	r1, [pc, #356]	; (80a69d4 <__ieee754_rem_pio2f+0x2b8>)
 80a6870:	4683      	mov	fp, r0
 80a6872:	f001 ffe5 	bl	80a8840 <__aeabi_fmul>
 80a6876:	4601      	mov	r1, r0
 80a6878:	4640      	mov	r0, r8
 80a687a:	f001 fed7 	bl	80a862c <__aeabi_fsub>
 80a687e:	4957      	ldr	r1, [pc, #348]	; (80a69dc <__ieee754_rem_pio2f+0x2c0>)
 80a6880:	4682      	mov	sl, r0
 80a6882:	4658      	mov	r0, fp
 80a6884:	f001 ffdc 	bl	80a8840 <__aeabi_fmul>
 80a6888:	2e1f      	cmp	r6, #31
 80a688a:	4681      	mov	r9, r0
 80a688c:	4601      	mov	r1, r0
 80a688e:	4650      	mov	r0, sl
 80a6890:	dc20      	bgt.n	80a68d4 <__ieee754_rem_pio2f+0x1b8>
 80a6892:	4b58      	ldr	r3, [pc, #352]	; (80a69f4 <__ieee754_rem_pio2f+0x2d8>)
 80a6894:	1e72      	subs	r2, r6, #1
 80a6896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a689a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80a689e:	429a      	cmp	r2, r3
 80a68a0:	d018      	beq.n	80a68d4 <__ieee754_rem_pio2f+0x1b8>
 80a68a2:	f001 fec3 	bl	80a862c <__aeabi_fsub>
 80a68a6:	4680      	mov	r8, r0
 80a68a8:	f8c5 8000 	str.w	r8, [r5]
 80a68ac:	4641      	mov	r1, r8
 80a68ae:	4650      	mov	r0, sl
 80a68b0:	f001 febc 	bl	80a862c <__aeabi_fsub>
 80a68b4:	4649      	mov	r1, r9
 80a68b6:	f001 feb9 	bl	80a862c <__aeabi_fsub>
 80a68ba:	2f00      	cmp	r7, #0
 80a68bc:	6068      	str	r0, [r5, #4]
 80a68be:	f6bf af53 	bge.w	80a6768 <__ieee754_rem_pio2f+0x4c>
 80a68c2:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 80a68c6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a68ca:	f8c5 8000 	str.w	r8, [r5]
 80a68ce:	6068      	str	r0, [r5, #4]
 80a68d0:	4276      	negs	r6, r6
 80a68d2:	e749      	b.n	80a6768 <__ieee754_rem_pio2f+0x4c>
 80a68d4:	f001 feaa 	bl	80a862c <__aeabi_fsub>
 80a68d8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80a68dc:	15e3      	asrs	r3, r4, #23
 80a68de:	ebc2 54d4 	rsb	r4, r2, r4, lsr #23
 80a68e2:	2c08      	cmp	r4, #8
 80a68e4:	4680      	mov	r8, r0
 80a68e6:	dddf      	ble.n	80a68a8 <__ieee754_rem_pio2f+0x18c>
 80a68e8:	493f      	ldr	r1, [pc, #252]	; (80a69e8 <__ieee754_rem_pio2f+0x2cc>)
 80a68ea:	4658      	mov	r0, fp
 80a68ec:	9303      	str	r3, [sp, #12]
 80a68ee:	f001 ffa7 	bl	80a8840 <__aeabi_fmul>
 80a68f2:	4680      	mov	r8, r0
 80a68f4:	4650      	mov	r0, sl
 80a68f6:	4641      	mov	r1, r8
 80a68f8:	f001 fe98 	bl	80a862c <__aeabi_fsub>
 80a68fc:	4604      	mov	r4, r0
 80a68fe:	4650      	mov	r0, sl
 80a6900:	4621      	mov	r1, r4
 80a6902:	f001 fe93 	bl	80a862c <__aeabi_fsub>
 80a6906:	4641      	mov	r1, r8
 80a6908:	f001 fe90 	bl	80a862c <__aeabi_fsub>
 80a690c:	4680      	mov	r8, r0
 80a690e:	4937      	ldr	r1, [pc, #220]	; (80a69ec <__ieee754_rem_pio2f+0x2d0>)
 80a6910:	4658      	mov	r0, fp
 80a6912:	f001 ff95 	bl	80a8840 <__aeabi_fmul>
 80a6916:	4641      	mov	r1, r8
 80a6918:	f001 fe88 	bl	80a862c <__aeabi_fsub>
 80a691c:	4681      	mov	r9, r0
 80a691e:	4620      	mov	r0, r4
 80a6920:	4649      	mov	r1, r9
 80a6922:	f001 fe83 	bl	80a862c <__aeabi_fsub>
 80a6926:	9b03      	ldr	r3, [sp, #12]
 80a6928:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80a692c:	1a9b      	subs	r3, r3, r2
 80a692e:	2b19      	cmp	r3, #25
 80a6930:	4680      	mov	r8, r0
 80a6932:	dc04      	bgt.n	80a693e <__ieee754_rem_pio2f+0x222>
 80a6934:	46a2      	mov	sl, r4
 80a6936:	6028      	str	r0, [r5, #0]
 80a6938:	e7b8      	b.n	80a68ac <__ieee754_rem_pio2f+0x190>
 80a693a:	2303      	movs	r3, #3
 80a693c:	e74e      	b.n	80a67dc <__ieee754_rem_pio2f+0xc0>
 80a693e:	492e      	ldr	r1, [pc, #184]	; (80a69f8 <__ieee754_rem_pio2f+0x2dc>)
 80a6940:	4658      	mov	r0, fp
 80a6942:	f001 ff7d 	bl	80a8840 <__aeabi_fmul>
 80a6946:	4680      	mov	r8, r0
 80a6948:	4620      	mov	r0, r4
 80a694a:	4641      	mov	r1, r8
 80a694c:	f001 fe6e 	bl	80a862c <__aeabi_fsub>
 80a6950:	4682      	mov	sl, r0
 80a6952:	4620      	mov	r0, r4
 80a6954:	4651      	mov	r1, sl
 80a6956:	f001 fe69 	bl	80a862c <__aeabi_fsub>
 80a695a:	4641      	mov	r1, r8
 80a695c:	f001 fe66 	bl	80a862c <__aeabi_fsub>
 80a6960:	4604      	mov	r4, r0
 80a6962:	4926      	ldr	r1, [pc, #152]	; (80a69fc <__ieee754_rem_pio2f+0x2e0>)
 80a6964:	4658      	mov	r0, fp
 80a6966:	f001 ff6b 	bl	80a8840 <__aeabi_fmul>
 80a696a:	4621      	mov	r1, r4
 80a696c:	f001 fe5e 	bl	80a862c <__aeabi_fsub>
 80a6970:	4681      	mov	r9, r0
 80a6972:	4650      	mov	r0, sl
 80a6974:	4649      	mov	r1, r9
 80a6976:	e794      	b.n	80a68a2 <__ieee754_rem_pio2f+0x186>
 80a6978:	f001 fe5a 	bl	80a8630 <__addsf3>
 80a697c:	4b16      	ldr	r3, [pc, #88]	; (80a69d8 <__ieee754_rem_pio2f+0x2bc>)
 80a697e:	f024 040f 	bic.w	r4, r4, #15
 80a6982:	429c      	cmp	r4, r3
 80a6984:	4606      	mov	r6, r0
 80a6986:	d00e      	beq.n	80a69a6 <__ieee754_rem_pio2f+0x28a>
 80a6988:	4914      	ldr	r1, [pc, #80]	; (80a69dc <__ieee754_rem_pio2f+0x2c0>)
 80a698a:	f001 fe51 	bl	80a8630 <__addsf3>
 80a698e:	4601      	mov	r1, r0
 80a6990:	4630      	mov	r0, r6
 80a6992:	6029      	str	r1, [r5, #0]
 80a6994:	f001 fe4a 	bl	80a862c <__aeabi_fsub>
 80a6998:	4910      	ldr	r1, [pc, #64]	; (80a69dc <__ieee754_rem_pio2f+0x2c0>)
 80a699a:	f001 fe49 	bl	80a8630 <__addsf3>
 80a699e:	f04f 36ff 	mov.w	r6, #4294967295
 80a69a2:	6068      	str	r0, [r5, #4]
 80a69a4:	e6e0      	b.n	80a6768 <__ieee754_rem_pio2f+0x4c>
 80a69a6:	4910      	ldr	r1, [pc, #64]	; (80a69e8 <__ieee754_rem_pio2f+0x2cc>)
 80a69a8:	f001 fe42 	bl	80a8630 <__addsf3>
 80a69ac:	490f      	ldr	r1, [pc, #60]	; (80a69ec <__ieee754_rem_pio2f+0x2d0>)
 80a69ae:	4604      	mov	r4, r0
 80a69b0:	f001 fe3e 	bl	80a8630 <__addsf3>
 80a69b4:	4601      	mov	r1, r0
 80a69b6:	4620      	mov	r0, r4
 80a69b8:	6029      	str	r1, [r5, #0]
 80a69ba:	f001 fe37 	bl	80a862c <__aeabi_fsub>
 80a69be:	490b      	ldr	r1, [pc, #44]	; (80a69ec <__ieee754_rem_pio2f+0x2d0>)
 80a69c0:	f001 fe36 	bl	80a8630 <__addsf3>
 80a69c4:	f04f 36ff 	mov.w	r6, #4294967295
 80a69c8:	6068      	str	r0, [r5, #4]
 80a69ca:	e6cd      	b.n	80a6768 <__ieee754_rem_pio2f+0x4c>
 80a69cc:	3f490fd8 	.word	0x3f490fd8
 80a69d0:	4016cbe3 	.word	0x4016cbe3
 80a69d4:	3fc90f80 	.word	0x3fc90f80
 80a69d8:	3fc90fd0 	.word	0x3fc90fd0
 80a69dc:	37354443 	.word	0x37354443
 80a69e0:	43490f80 	.word	0x43490f80
 80a69e4:	080aa3ec 	.word	0x080aa3ec
 80a69e8:	37354400 	.word	0x37354400
 80a69ec:	2e85a308 	.word	0x2e85a308
 80a69f0:	3f22f984 	.word	0x3f22f984
 80a69f4:	080aa36c 	.word	0x080aa36c
 80a69f8:	2e85a300 	.word	0x2e85a300
 80a69fc:	248d3132 	.word	0x248d3132

080a6a00 <__kernel_cosf>:
 80a6a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a6a04:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80a6a08:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 80a6a0c:	4606      	mov	r6, r0
 80a6a0e:	4688      	mov	r8, r1
 80a6a10:	da4a      	bge.n	80a6aa8 <__kernel_cosf+0xa8>
 80a6a12:	f002 f8db 	bl	80a8bcc <__aeabi_f2iz>
 80a6a16:	2800      	cmp	r0, #0
 80a6a18:	f000 809f 	beq.w	80a6b5a <__kernel_cosf+0x15a>
 80a6a1c:	4631      	mov	r1, r6
 80a6a1e:	4630      	mov	r0, r6
 80a6a20:	f001 ff0e 	bl	80a8840 <__aeabi_fmul>
 80a6a24:	4604      	mov	r4, r0
 80a6a26:	494f      	ldr	r1, [pc, #316]	; (80a6b64 <__kernel_cosf+0x164>)
 80a6a28:	f001 ff0a 	bl	80a8840 <__aeabi_fmul>
 80a6a2c:	494e      	ldr	r1, [pc, #312]	; (80a6b68 <__kernel_cosf+0x168>)
 80a6a2e:	f001 fdff 	bl	80a8630 <__addsf3>
 80a6a32:	4621      	mov	r1, r4
 80a6a34:	f001 ff04 	bl	80a8840 <__aeabi_fmul>
 80a6a38:	494c      	ldr	r1, [pc, #304]	; (80a6b6c <__kernel_cosf+0x16c>)
 80a6a3a:	f001 fdf7 	bl	80a862c <__aeabi_fsub>
 80a6a3e:	4621      	mov	r1, r4
 80a6a40:	f001 fefe 	bl	80a8840 <__aeabi_fmul>
 80a6a44:	494a      	ldr	r1, [pc, #296]	; (80a6b70 <__kernel_cosf+0x170>)
 80a6a46:	f001 fdf3 	bl	80a8630 <__addsf3>
 80a6a4a:	4621      	mov	r1, r4
 80a6a4c:	f001 fef8 	bl	80a8840 <__aeabi_fmul>
 80a6a50:	4948      	ldr	r1, [pc, #288]	; (80a6b74 <__kernel_cosf+0x174>)
 80a6a52:	f001 fdeb 	bl	80a862c <__aeabi_fsub>
 80a6a56:	4621      	mov	r1, r4
 80a6a58:	f001 fef2 	bl	80a8840 <__aeabi_fmul>
 80a6a5c:	4946      	ldr	r1, [pc, #280]	; (80a6b78 <__kernel_cosf+0x178>)
 80a6a5e:	f001 fde7 	bl	80a8630 <__addsf3>
 80a6a62:	4621      	mov	r1, r4
 80a6a64:	f001 feec 	bl	80a8840 <__aeabi_fmul>
 80a6a68:	4607      	mov	r7, r0
 80a6a6a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a6a6e:	4620      	mov	r0, r4
 80a6a70:	f001 fee6 	bl	80a8840 <__aeabi_fmul>
 80a6a74:	4603      	mov	r3, r0
 80a6a76:	4639      	mov	r1, r7
 80a6a78:	4620      	mov	r0, r4
 80a6a7a:	461c      	mov	r4, r3
 80a6a7c:	f001 fee0 	bl	80a8840 <__aeabi_fmul>
 80a6a80:	4641      	mov	r1, r8
 80a6a82:	4605      	mov	r5, r0
 80a6a84:	4630      	mov	r0, r6
 80a6a86:	f001 fedb 	bl	80a8840 <__aeabi_fmul>
 80a6a8a:	4601      	mov	r1, r0
 80a6a8c:	4628      	mov	r0, r5
 80a6a8e:	f001 fdcd 	bl	80a862c <__aeabi_fsub>
 80a6a92:	4601      	mov	r1, r0
 80a6a94:	4620      	mov	r0, r4
 80a6a96:	f001 fdc9 	bl	80a862c <__aeabi_fsub>
 80a6a9a:	4601      	mov	r1, r0
 80a6a9c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a6aa0:	f001 fdc4 	bl	80a862c <__aeabi_fsub>
 80a6aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a6aa8:	4601      	mov	r1, r0
 80a6aaa:	f001 fec9 	bl	80a8840 <__aeabi_fmul>
 80a6aae:	4604      	mov	r4, r0
 80a6ab0:	492c      	ldr	r1, [pc, #176]	; (80a6b64 <__kernel_cosf+0x164>)
 80a6ab2:	f001 fec5 	bl	80a8840 <__aeabi_fmul>
 80a6ab6:	492c      	ldr	r1, [pc, #176]	; (80a6b68 <__kernel_cosf+0x168>)
 80a6ab8:	f001 fdba 	bl	80a8630 <__addsf3>
 80a6abc:	4621      	mov	r1, r4
 80a6abe:	f001 febf 	bl	80a8840 <__aeabi_fmul>
 80a6ac2:	492a      	ldr	r1, [pc, #168]	; (80a6b6c <__kernel_cosf+0x16c>)
 80a6ac4:	f001 fdb2 	bl	80a862c <__aeabi_fsub>
 80a6ac8:	4621      	mov	r1, r4
 80a6aca:	f001 feb9 	bl	80a8840 <__aeabi_fmul>
 80a6ace:	4928      	ldr	r1, [pc, #160]	; (80a6b70 <__kernel_cosf+0x170>)
 80a6ad0:	f001 fdae 	bl	80a8630 <__addsf3>
 80a6ad4:	4621      	mov	r1, r4
 80a6ad6:	f001 feb3 	bl	80a8840 <__aeabi_fmul>
 80a6ada:	4926      	ldr	r1, [pc, #152]	; (80a6b74 <__kernel_cosf+0x174>)
 80a6adc:	f001 fda6 	bl	80a862c <__aeabi_fsub>
 80a6ae0:	4621      	mov	r1, r4
 80a6ae2:	f001 fead 	bl	80a8840 <__aeabi_fmul>
 80a6ae6:	4924      	ldr	r1, [pc, #144]	; (80a6b78 <__kernel_cosf+0x178>)
 80a6ae8:	f001 fda2 	bl	80a8630 <__addsf3>
 80a6aec:	4621      	mov	r1, r4
 80a6aee:	f001 fea7 	bl	80a8840 <__aeabi_fmul>
 80a6af2:	4b22      	ldr	r3, [pc, #136]	; (80a6b7c <__kernel_cosf+0x17c>)
 80a6af4:	4607      	mov	r7, r0
 80a6af6:	429d      	cmp	r5, r3
 80a6af8:	ddb7      	ble.n	80a6a6a <__kernel_cosf+0x6a>
 80a6afa:	4b21      	ldr	r3, [pc, #132]	; (80a6b80 <__kernel_cosf+0x180>)
 80a6afc:	429d      	cmp	r5, r3
 80a6afe:	dc28      	bgt.n	80a6b52 <__kernel_cosf+0x152>
 80a6b00:	f105 457f 	add.w	r5, r5, #4278190080	; 0xff000000
 80a6b04:	4629      	mov	r1, r5
 80a6b06:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a6b0a:	f001 fd8f 	bl	80a862c <__aeabi_fsub>
 80a6b0e:	4681      	mov	r9, r0
 80a6b10:	4620      	mov	r0, r4
 80a6b12:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a6b16:	f001 fe93 	bl	80a8840 <__aeabi_fmul>
 80a6b1a:	4629      	mov	r1, r5
 80a6b1c:	f001 fd86 	bl	80a862c <__aeabi_fsub>
 80a6b20:	4603      	mov	r3, r0
 80a6b22:	4639      	mov	r1, r7
 80a6b24:	4620      	mov	r0, r4
 80a6b26:	461c      	mov	r4, r3
 80a6b28:	f001 fe8a 	bl	80a8840 <__aeabi_fmul>
 80a6b2c:	4641      	mov	r1, r8
 80a6b2e:	4605      	mov	r5, r0
 80a6b30:	4630      	mov	r0, r6
 80a6b32:	f001 fe85 	bl	80a8840 <__aeabi_fmul>
 80a6b36:	4601      	mov	r1, r0
 80a6b38:	4628      	mov	r0, r5
 80a6b3a:	f001 fd77 	bl	80a862c <__aeabi_fsub>
 80a6b3e:	4601      	mov	r1, r0
 80a6b40:	4620      	mov	r0, r4
 80a6b42:	f001 fd73 	bl	80a862c <__aeabi_fsub>
 80a6b46:	4601      	mov	r1, r0
 80a6b48:	4648      	mov	r0, r9
 80a6b4a:	f001 fd6f 	bl	80a862c <__aeabi_fsub>
 80a6b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a6b52:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80a6b84 <__kernel_cosf+0x184>
 80a6b56:	4d0c      	ldr	r5, [pc, #48]	; (80a6b88 <__kernel_cosf+0x188>)
 80a6b58:	e7da      	b.n	80a6b10 <__kernel_cosf+0x110>
 80a6b5a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a6b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a6b62:	bf00      	nop
 80a6b64:	ad47d74e 	.word	0xad47d74e
 80a6b68:	310f74f6 	.word	0x310f74f6
 80a6b6c:	3493f27c 	.word	0x3493f27c
 80a6b70:	37d00d01 	.word	0x37d00d01
 80a6b74:	3ab60b61 	.word	0x3ab60b61
 80a6b78:	3d2aaaab 	.word	0x3d2aaaab
 80a6b7c:	3e999999 	.word	0x3e999999
 80a6b80:	3f480000 	.word	0x3f480000
 80a6b84:	3f380000 	.word	0x3f380000
 80a6b88:	3e900000 	.word	0x3e900000

080a6b8c <__kernel_rem_pio2f>:
 80a6b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6b90:	b0dd      	sub	sp, #372	; 0x174
 80a6b92:	9d66      	ldr	r5, [sp, #408]	; 0x198
 80a6b94:	4ca7      	ldr	r4, [pc, #668]	; (80a6e34 <__kernel_rem_pio2f+0x2a8>)
 80a6b96:	9306      	str	r3, [sp, #24]
 80a6b98:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80a6b9c:	9109      	str	r1, [sp, #36]	; 0x24
 80a6b9e:	3b01      	subs	r3, #1
 80a6ba0:	1d11      	adds	r1, r2, #4
 80a6ba2:	4605      	mov	r5, r0
 80a6ba4:	9403      	str	r4, [sp, #12]
 80a6ba6:	920b      	str	r2, [sp, #44]	; 0x2c
 80a6ba8:	9301      	str	r3, [sp, #4]
 80a6baa:	f2c0 82ee 	blt.w	80a718a <__kernel_rem_pio2f+0x5fe>
 80a6bae:	1ed3      	subs	r3, r2, #3
 80a6bb0:	bf48      	it	mi
 80a6bb2:	1d13      	addmi	r3, r2, #4
 80a6bb4:	10db      	asrs	r3, r3, #3
 80a6bb6:	9305      	str	r3, [sp, #20]
 80a6bb8:	3301      	adds	r3, #1
 80a6bba:	00db      	lsls	r3, r3, #3
 80a6bbc:	930a      	str	r3, [sp, #40]	; 0x28
 80a6bbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a6bc2:	1a9b      	subs	r3, r3, r2
 80a6bc4:	9304      	str	r3, [sp, #16]
 80a6bc6:	9a05      	ldr	r2, [sp, #20]
 80a6bc8:	9b01      	ldr	r3, [sp, #4]
 80a6bca:	1ad6      	subs	r6, r2, r3
 80a6bcc:	9a03      	ldr	r2, [sp, #12]
 80a6bce:	eb12 0803 	adds.w	r8, r2, r3
 80a6bd2:	d418      	bmi.n	80a6c06 <__kernel_rem_pio2f+0x7a>
 80a6bd4:	f108 0801 	add.w	r8, r8, #1
 80a6bd8:	2400      	movs	r4, #0
 80a6bda:	f8dd 919c 	ldr.w	r9, [sp, #412]	; 0x19c
 80a6bde:	44b0      	add	r8, r6
 80a6be0:	af20      	add	r7, sp, #128	; 0x80
 80a6be2:	e008      	b.n	80a6bf6 <__kernel_rem_pio2f+0x6a>
 80a6be4:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 80a6be8:	f001 fdd6 	bl	80a8798 <__aeabi_i2f>
 80a6bec:	3601      	adds	r6, #1
 80a6bee:	4546      	cmp	r6, r8
 80a6bf0:	f847 0b04 	str.w	r0, [r7], #4
 80a6bf4:	d007      	beq.n	80a6c06 <__kernel_rem_pio2f+0x7a>
 80a6bf6:	2e00      	cmp	r6, #0
 80a6bf8:	daf4      	bge.n	80a6be4 <__kernel_rem_pio2f+0x58>
 80a6bfa:	4620      	mov	r0, r4
 80a6bfc:	3601      	adds	r6, #1
 80a6bfe:	4546      	cmp	r6, r8
 80a6c00:	f847 0b04 	str.w	r0, [r7], #4
 80a6c04:	d1f7      	bne.n	80a6bf6 <__kernel_rem_pio2f+0x6a>
 80a6c06:	9b03      	ldr	r3, [sp, #12]
 80a6c08:	2b00      	cmp	r3, #0
 80a6c0a:	f2c0 8312 	blt.w	80a7232 <__kernel_rem_pio2f+0x6a6>
 80a6c0e:	9b06      	ldr	r3, [sp, #24]
 80a6c10:	aa20      	add	r2, sp, #128	; 0x80
 80a6c12:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80a6c16:	009a      	lsls	r2, r3, #2
 80a6c18:	9200      	str	r2, [sp, #0]
 80a6c1a:	9a03      	ldr	r2, [sp, #12]
 80a6c1c:	1f29      	subs	r1, r5, #4
 80a6c1e:	9e01      	ldr	r6, [sp, #4]
 80a6c20:	9102      	str	r1, [sp, #8]
 80a6c22:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 80a6c26:	eb02 0903 	add.w	r9, r2, r3
 80a6c2a:	eb01 0583 	add.w	r5, r1, r3, lsl #2
 80a6c2e:	9b01      	ldr	r3, [sp, #4]
 80a6c30:	2b00      	cmp	r3, #0
 80a6c32:	bfb8      	it	lt
 80a6c34:	2400      	movlt	r4, #0
 80a6c36:	db10      	blt.n	80a6c5a <__kernel_rem_pio2f+0xce>
 80a6c38:	46bb      	mov	fp, r7
 80a6c3a:	2400      	movs	r4, #0
 80a6c3c:	f8dd a008 	ldr.w	sl, [sp, #8]
 80a6c40:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 80a6c44:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a6c48:	f001 fdfa 	bl	80a8840 <__aeabi_fmul>
 80a6c4c:	4601      	mov	r1, r0
 80a6c4e:	4620      	mov	r0, r4
 80a6c50:	f001 fcee 	bl	80a8630 <__addsf3>
 80a6c54:	45aa      	cmp	sl, r5
 80a6c56:	4604      	mov	r4, r0
 80a6c58:	d1f2      	bne.n	80a6c40 <__kernel_rem_pio2f+0xb4>
 80a6c5a:	3601      	adds	r6, #1
 80a6c5c:	454e      	cmp	r6, r9
 80a6c5e:	f848 4b04 	str.w	r4, [r8], #4
 80a6c62:	f107 0704 	add.w	r7, r7, #4
 80a6c66:	d1e2      	bne.n	80a6c2e <__kernel_rem_pio2f+0xa2>
 80a6c68:	9b02      	ldr	r3, [sp, #8]
 80a6c6a:	9d00      	ldr	r5, [sp, #0]
 80a6c6c:	aa0b      	add	r2, sp, #44	; 0x2c
 80a6c6e:	441d      	add	r5, r3
 80a6c70:	9b03      	ldr	r3, [sp, #12]
 80a6c72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80a6c76:	9208      	str	r2, [sp, #32]
 80a6c78:	aa0c      	add	r2, sp, #48	; 0x30
 80a6c7a:	4699      	mov	r9, r3
 80a6c7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a6c80:	3b08      	subs	r3, #8
 80a6c82:	9307      	str	r3, [sp, #28]
 80a6c84:	ab5c      	add	r3, sp, #368	; 0x170
 80a6c86:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80a6c8a:	f1b9 0f00 	cmp.w	r9, #0
 80a6c8e:	f853 ac50 	ldr.w	sl, [r3, #-80]
 80a6c92:	ea4f 0889 	mov.w	r8, r9, lsl #2
 80a6c96:	dd21      	ble.n	80a6cdc <__kernel_rem_pio2f+0x150>
 80a6c98:	af48      	add	r7, sp, #288	; 0x120
 80a6c9a:	ae0c      	add	r6, sp, #48	; 0x30
 80a6c9c:	eb07 0489 	add.w	r4, r7, r9, lsl #2
 80a6ca0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80a6ca4:	4650      	mov	r0, sl
 80a6ca6:	f001 fdcb 	bl	80a8840 <__aeabi_fmul>
 80a6caa:	f001 ff8f 	bl	80a8bcc <__aeabi_f2iz>
 80a6cae:	f001 fd73 	bl	80a8798 <__aeabi_i2f>
 80a6cb2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a6cb6:	4683      	mov	fp, r0
 80a6cb8:	f001 fdc2 	bl	80a8840 <__aeabi_fmul>
 80a6cbc:	4601      	mov	r1, r0
 80a6cbe:	4650      	mov	r0, sl
 80a6cc0:	f001 fcb4 	bl	80a862c <__aeabi_fsub>
 80a6cc4:	f001 ff82 	bl	80a8bcc <__aeabi_f2iz>
 80a6cc8:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80a6ccc:	f846 0b04 	str.w	r0, [r6], #4
 80a6cd0:	4658      	mov	r0, fp
 80a6cd2:	f001 fcad 	bl	80a8630 <__addsf3>
 80a6cd6:	42bc      	cmp	r4, r7
 80a6cd8:	4682      	mov	sl, r0
 80a6cda:	d1e1      	bne.n	80a6ca0 <__kernel_rem_pio2f+0x114>
 80a6cdc:	9e04      	ldr	r6, [sp, #16]
 80a6cde:	4650      	mov	r0, sl
 80a6ce0:	4631      	mov	r1, r6
 80a6ce2:	f000 ff3d 	bl	80a7b60 <scalbnf>
 80a6ce6:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80a6cea:	4604      	mov	r4, r0
 80a6cec:	f001 fda8 	bl	80a8840 <__aeabi_fmul>
 80a6cf0:	f000 fef6 	bl	80a7ae0 <floorf>
 80a6cf4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80a6cf8:	f001 fda2 	bl	80a8840 <__aeabi_fmul>
 80a6cfc:	4601      	mov	r1, r0
 80a6cfe:	4620      	mov	r0, r4
 80a6d00:	f001 fc94 	bl	80a862c <__aeabi_fsub>
 80a6d04:	4604      	mov	r4, r0
 80a6d06:	f001 ff61 	bl	80a8bcc <__aeabi_f2iz>
 80a6d0a:	4682      	mov	sl, r0
 80a6d0c:	f001 fd44 	bl	80a8798 <__aeabi_i2f>
 80a6d10:	4601      	mov	r1, r0
 80a6d12:	4620      	mov	r0, r4
 80a6d14:	f001 fc8a 	bl	80a862c <__aeabi_fsub>
 80a6d18:	2e00      	cmp	r6, #0
 80a6d1a:	4604      	mov	r4, r0
 80a6d1c:	4633      	mov	r3, r6
 80a6d1e:	f340 808b 	ble.w	80a6e38 <__kernel_rem_pio2f+0x2ac>
 80a6d22:	4618      	mov	r0, r3
 80a6d24:	f109 32ff 	add.w	r2, r9, #4294967295
 80a6d28:	a90c      	add	r1, sp, #48	; 0x30
 80a6d2a:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80a6d2e:	f1c3 0308 	rsb	r3, r3, #8
 80a6d32:	fa46 f103 	asr.w	r1, r6, r3
 80a6d36:	fa01 f303 	lsl.w	r3, r1, r3
 80a6d3a:	1af6      	subs	r6, r6, r3
 80a6d3c:	ab0c      	add	r3, sp, #48	; 0x30
 80a6d3e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80a6d42:	f1c0 0307 	rsb	r3, r0, #7
 80a6d46:	411e      	asrs	r6, r3
 80a6d48:	2e00      	cmp	r6, #0
 80a6d4a:	448a      	add	sl, r1
 80a6d4c:	dc7e      	bgt.n	80a6e4c <__kernel_rem_pio2f+0x2c0>
 80a6d4e:	2100      	movs	r1, #0
 80a6d50:	4620      	mov	r0, r4
 80a6d52:	f001 ff09 	bl	80a8b68 <__aeabi_fcmpeq>
 80a6d56:	2800      	cmp	r0, #0
 80a6d58:	f000 80cf 	beq.w	80a6efa <__kernel_rem_pio2f+0x36e>
 80a6d5c:	9b03      	ldr	r3, [sp, #12]
 80a6d5e:	f109 34ff 	add.w	r4, r9, #4294967295
 80a6d62:	42a3      	cmp	r3, r4
 80a6d64:	dc10      	bgt.n	80a6d88 <__kernel_rem_pio2f+0x1fc>
 80a6d66:	2200      	movs	r2, #0
 80a6d68:	f109 4380 	add.w	r3, r9, #1073741824	; 0x40000000
 80a6d6c:	3b01      	subs	r3, #1
 80a6d6e:	a90c      	add	r1, sp, #48	; 0x30
 80a6d70:	9808      	ldr	r0, [sp, #32]
 80a6d72:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a6d76:	f853 1904 	ldr.w	r1, [r3], #-4
 80a6d7a:	4283      	cmp	r3, r0
 80a6d7c:	ea42 0201 	orr.w	r2, r2, r1
 80a6d80:	d1f9      	bne.n	80a6d76 <__kernel_rem_pio2f+0x1ea>
 80a6d82:	2a00      	cmp	r2, #0
 80a6d84:	f040 8111 	bne.w	80a6faa <__kernel_rem_pio2f+0x41e>
 80a6d88:	9b03      	ldr	r3, [sp, #12]
 80a6d8a:	aa0c      	add	r2, sp, #48	; 0x30
 80a6d8c:	3b01      	subs	r3, #1
 80a6d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a6d92:	2b00      	cmp	r3, #0
 80a6d94:	f040 8103 	bne.w	80a6f9e <__kernel_rem_pio2f+0x412>
 80a6d98:	2701      	movs	r7, #1
 80a6d9a:	9b07      	ldr	r3, [sp, #28]
 80a6d9c:	f853 2904 	ldr.w	r2, [r3], #-4
 80a6da0:	3701      	adds	r7, #1
 80a6da2:	2a00      	cmp	r2, #0
 80a6da4:	d0fa      	beq.n	80a6d9c <__kernel_rem_pio2f+0x210>
 80a6da6:	f109 0a01 	add.w	sl, r9, #1
 80a6daa:	46d0      	mov	r8, sl
 80a6dac:	eb09 0307 	add.w	r3, r9, r7
 80a6db0:	9300      	str	r3, [sp, #0]
 80a6db2:	9b06      	ldr	r3, [sp, #24]
 80a6db4:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 80a6db6:	eb03 0609 	add.w	r6, r3, r9
 80a6dba:	9b05      	ldr	r3, [sp, #20]
 80a6dbc:	4453      	add	r3, sl
 80a6dbe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a6dc2:	3b01      	subs	r3, #1
 80a6dc4:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80a6dc8:	ab20      	add	r3, sp, #128	; 0x80
 80a6dca:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 80a6dce:	ab48      	add	r3, sp, #288	; 0x120
 80a6dd0:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 80a6dd4:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80a6dd8:	f001 fcde 	bl	80a8798 <__aeabi_i2f>
 80a6ddc:	9b01      	ldr	r3, [sp, #4]
 80a6dde:	4634      	mov	r4, r6
 80a6de0:	2b00      	cmp	r3, #0
 80a6de2:	f106 0604 	add.w	r6, r6, #4
 80a6de6:	f846 0c04 	str.w	r0, [r6, #-4]
 80a6dea:	db1a      	blt.n	80a6e22 <__kernel_rem_pio2f+0x296>
 80a6dec:	2700      	movs	r7, #0
 80a6dee:	f8dd b008 	ldr.w	fp, [sp, #8]
 80a6df2:	3c04      	subs	r4, #4
 80a6df4:	e001      	b.n	80a6dfa <__kernel_rem_pio2f+0x26e>
 80a6df6:	f854 0904 	ldr.w	r0, [r4], #-4
 80a6dfa:	f85b 1f04 	ldr.w	r1, [fp, #4]!
 80a6dfe:	f001 fd1f 	bl	80a8840 <__aeabi_fmul>
 80a6e02:	4601      	mov	r1, r0
 80a6e04:	4638      	mov	r0, r7
 80a6e06:	f001 fc13 	bl	80a8630 <__addsf3>
 80a6e0a:	45ab      	cmp	fp, r5
 80a6e0c:	4607      	mov	r7, r0
 80a6e0e:	d1f2      	bne.n	80a6df6 <__kernel_rem_pio2f+0x26a>
 80a6e10:	9b00      	ldr	r3, [sp, #0]
 80a6e12:	f108 0801 	add.w	r8, r8, #1
 80a6e16:	4598      	cmp	r8, r3
 80a6e18:	f84a 7b04 	str.w	r7, [sl], #4
 80a6e1c:	ddda      	ble.n	80a6dd4 <__kernel_rem_pio2f+0x248>
 80a6e1e:	4699      	mov	r9, r3
 80a6e20:	e730      	b.n	80a6c84 <__kernel_rem_pio2f+0xf8>
 80a6e22:	2700      	movs	r7, #0
 80a6e24:	9b00      	ldr	r3, [sp, #0]
 80a6e26:	f108 0801 	add.w	r8, r8, #1
 80a6e2a:	4598      	cmp	r8, r3
 80a6e2c:	f84a 7b04 	str.w	r7, [sl], #4
 80a6e30:	ddd0      	ble.n	80a6dd4 <__kernel_rem_pio2f+0x248>
 80a6e32:	e7f4      	b.n	80a6e1e <__kernel_rem_pio2f+0x292>
 80a6e34:	080aa730 	.word	0x080aa730
 80a6e38:	f040 8099 	bne.w	80a6f6e <__kernel_rem_pio2f+0x3e2>
 80a6e3c:	f109 33ff 	add.w	r3, r9, #4294967295
 80a6e40:	aa0c      	add	r2, sp, #48	; 0x30
 80a6e42:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80a6e46:	1236      	asrs	r6, r6, #8
 80a6e48:	2e00      	cmp	r6, #0
 80a6e4a:	dd80      	ble.n	80a6d4e <__kernel_rem_pio2f+0x1c2>
 80a6e4c:	f1b9 0f00 	cmp.w	r9, #0
 80a6e50:	f10a 0a01 	add.w	sl, sl, #1
 80a6e54:	f340 819e 	ble.w	80a7194 <__kernel_rem_pio2f+0x608>
 80a6e58:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80a6e5a:	2f00      	cmp	r7, #0
 80a6e5c:	d17f      	bne.n	80a6f5e <__kernel_rem_pio2f+0x3d2>
 80a6e5e:	f1b9 0f01 	cmp.w	r9, #1
 80a6e62:	d01b      	beq.n	80a6e9c <__kernel_rem_pio2f+0x310>
 80a6e64:	2201      	movs	r2, #1
 80a6e66:	ab0c      	add	r3, sp, #48	; 0x30
 80a6e68:	f853 7f04 	ldr.w	r7, [r3, #4]!
 80a6e6c:	2f00      	cmp	r7, #0
 80a6e6e:	d079      	beq.n	80a6f64 <__kernel_rem_pio2f+0x3d8>
 80a6e70:	1c53      	adds	r3, r2, #1
 80a6e72:	f5c7 7780 	rsb	r7, r7, #256	; 0x100
 80a6e76:	a90c      	add	r1, sp, #48	; 0x30
 80a6e78:	4599      	cmp	r9, r3
 80a6e7a:	f841 7022 	str.w	r7, [r1, r2, lsl #2]
 80a6e7e:	dd0c      	ble.n	80a6e9a <__kernel_rem_pio2f+0x30e>
 80a6e80:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80a6e84:	4488      	add	r8, r1
 80a6e86:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a6e8a:	e000      	b.n	80a6e8e <__kernel_rem_pio2f+0x302>
 80a6e8c:	681a      	ldr	r2, [r3, #0]
 80a6e8e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80a6e92:	f843 2b04 	str.w	r2, [r3], #4
 80a6e96:	4543      	cmp	r3, r8
 80a6e98:	d1f8      	bne.n	80a6e8c <__kernel_rem_pio2f+0x300>
 80a6e9a:	2701      	movs	r7, #1
 80a6e9c:	9b04      	ldr	r3, [sp, #16]
 80a6e9e:	2b00      	cmp	r3, #0
 80a6ea0:	dd0e      	ble.n	80a6ec0 <__kernel_rem_pio2f+0x334>
 80a6ea2:	2b01      	cmp	r3, #1
 80a6ea4:	f000 8166 	beq.w	80a7174 <__kernel_rem_pio2f+0x5e8>
 80a6ea8:	2b02      	cmp	r3, #2
 80a6eaa:	d109      	bne.n	80a6ec0 <__kernel_rem_pio2f+0x334>
 80a6eac:	f109 32ff 	add.w	r2, r9, #4294967295
 80a6eb0:	ab0c      	add	r3, sp, #48	; 0x30
 80a6eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6eb6:	a90c      	add	r1, sp, #48	; 0x30
 80a6eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a6ebc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a6ec0:	2e02      	cmp	r6, #2
 80a6ec2:	f47f af44 	bne.w	80a6d4e <__kernel_rem_pio2f+0x1c2>
 80a6ec6:	4621      	mov	r1, r4
 80a6ec8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a6ecc:	f001 fbae 	bl	80a862c <__aeabi_fsub>
 80a6ed0:	4604      	mov	r4, r0
 80a6ed2:	2f00      	cmp	r7, #0
 80a6ed4:	f43f af3b 	beq.w	80a6d4e <__kernel_rem_pio2f+0x1c2>
 80a6ed8:	9904      	ldr	r1, [sp, #16]
 80a6eda:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a6ede:	f000 fe3f 	bl	80a7b60 <scalbnf>
 80a6ee2:	4601      	mov	r1, r0
 80a6ee4:	4620      	mov	r0, r4
 80a6ee6:	f001 fba1 	bl	80a862c <__aeabi_fsub>
 80a6eea:	4604      	mov	r4, r0
 80a6eec:	2100      	movs	r1, #0
 80a6eee:	4620      	mov	r0, r4
 80a6ef0:	f001 fe3a 	bl	80a8b68 <__aeabi_fcmpeq>
 80a6ef4:	2800      	cmp	r0, #0
 80a6ef6:	f47f af31 	bne.w	80a6d5c <__kernel_rem_pio2f+0x1d0>
 80a6efa:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 80a6efe:	4620      	mov	r0, r4
 80a6f00:	1a99      	subs	r1, r3, r2
 80a6f02:	9600      	str	r6, [sp, #0]
 80a6f04:	f000 fe2c 	bl	80a7b60 <scalbnf>
 80a6f08:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a6f0c:	4605      	mov	r5, r0
 80a6f0e:	f001 fe49 	bl	80a8ba4 <__aeabi_fcmpge>
 80a6f12:	2800      	cmp	r0, #0
 80a6f14:	f000 8169 	beq.w	80a71ea <__kernel_rem_pio2f+0x65e>
 80a6f18:	9b04      	ldr	r3, [sp, #16]
 80a6f1a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80a6f1e:	3308      	adds	r3, #8
 80a6f20:	4628      	mov	r0, r5
 80a6f22:	9304      	str	r3, [sp, #16]
 80a6f24:	f001 fc8c 	bl	80a8840 <__aeabi_fmul>
 80a6f28:	f001 fe50 	bl	80a8bcc <__aeabi_f2iz>
 80a6f2c:	f001 fc34 	bl	80a8798 <__aeabi_i2f>
 80a6f30:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a6f34:	4606      	mov	r6, r0
 80a6f36:	f001 fc83 	bl	80a8840 <__aeabi_fmul>
 80a6f3a:	4601      	mov	r1, r0
 80a6f3c:	4628      	mov	r0, r5
 80a6f3e:	f001 fb75 	bl	80a862c <__aeabi_fsub>
 80a6f42:	f001 fe43 	bl	80a8bcc <__aeabi_f2iz>
 80a6f46:	ab0c      	add	r3, sp, #48	; 0x30
 80a6f48:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
 80a6f4c:	4630      	mov	r0, r6
 80a6f4e:	f001 fe3d 	bl	80a8bcc <__aeabi_f2iz>
 80a6f52:	f109 0401 	add.w	r4, r9, #1
 80a6f56:	ab0c      	add	r3, sp, #48	; 0x30
 80a6f58:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80a6f5c:	e03b      	b.n	80a6fd6 <__kernel_rem_pio2f+0x44a>
 80a6f5e:	2301      	movs	r3, #1
 80a6f60:	2200      	movs	r2, #0
 80a6f62:	e786      	b.n	80a6e72 <__kernel_rem_pio2f+0x2e6>
 80a6f64:	3201      	adds	r2, #1
 80a6f66:	454a      	cmp	r2, r9
 80a6f68:	f47f af7e 	bne.w	80a6e68 <__kernel_rem_pio2f+0x2dc>
 80a6f6c:	e796      	b.n	80a6e9c <__kernel_rem_pio2f+0x310>
 80a6f6e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a6f72:	f001 fe17 	bl	80a8ba4 <__aeabi_fcmpge>
 80a6f76:	4606      	mov	r6, r0
 80a6f78:	2800      	cmp	r0, #0
 80a6f7a:	f43f aee8 	beq.w	80a6d4e <__kernel_rem_pio2f+0x1c2>
 80a6f7e:	f1b9 0f00 	cmp.w	r9, #0
 80a6f82:	bfc8      	it	gt
 80a6f84:	2602      	movgt	r6, #2
 80a6f86:	f10a 0a01 	add.w	sl, sl, #1
 80a6f8a:	f73f af65 	bgt.w	80a6e58 <__kernel_rem_pio2f+0x2cc>
 80a6f8e:	4621      	mov	r1, r4
 80a6f90:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a6f94:	f001 fb4a 	bl	80a862c <__aeabi_fsub>
 80a6f98:	2602      	movs	r6, #2
 80a6f9a:	4604      	mov	r4, r0
 80a6f9c:	e6d7      	b.n	80a6d4e <__kernel_rem_pio2f+0x1c2>
 80a6f9e:	f109 0a01 	add.w	sl, r9, #1
 80a6fa2:	46d0      	mov	r8, sl
 80a6fa4:	f8cd a000 	str.w	sl, [sp]
 80a6fa8:	e703      	b.n	80a6db2 <__kernel_rem_pio2f+0x226>
 80a6faa:	9b04      	ldr	r3, [sp, #16]
 80a6fac:	9600      	str	r6, [sp, #0]
 80a6fae:	f1a3 0208 	sub.w	r2, r3, #8
 80a6fb2:	ab0c      	add	r3, sp, #48	; 0x30
 80a6fb4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80a6fb8:	9204      	str	r2, [sp, #16]
 80a6fba:	b963      	cbnz	r3, 80a6fd6 <__kernel_rem_pio2f+0x44a>
 80a6fbc:	f109 4380 	add.w	r3, r9, #1073741824	; 0x40000000
 80a6fc0:	3b02      	subs	r3, #2
 80a6fc2:	a90c      	add	r1, sp, #48	; 0x30
 80a6fc4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a6fc8:	f853 1904 	ldr.w	r1, [r3], #-4
 80a6fcc:	3c01      	subs	r4, #1
 80a6fce:	3a08      	subs	r2, #8
 80a6fd0:	2900      	cmp	r1, #0
 80a6fd2:	d0f9      	beq.n	80a6fc8 <__kernel_rem_pio2f+0x43c>
 80a6fd4:	9204      	str	r2, [sp, #16]
 80a6fd6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a6fda:	9904      	ldr	r1, [sp, #16]
 80a6fdc:	f000 fdc0 	bl	80a7b60 <scalbnf>
 80a6fe0:	2c00      	cmp	r4, #0
 80a6fe2:	4607      	mov	r7, r0
 80a6fe4:	f2c0 812b 	blt.w	80a723e <__kernel_rem_pio2f+0x6b2>
 80a6fe8:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 80a6fec:	00a3      	lsls	r3, r4, #2
 80a6fee:	aa48      	add	r2, sp, #288	; 0x120
 80a6ff0:	eb02 0803 	add.w	r8, r2, r3
 80a6ff4:	9301      	str	r3, [sp, #4]
 80a6ff6:	aa0c      	add	r2, sp, #48	; 0x30
 80a6ff8:	3304      	adds	r3, #4
 80a6ffa:	9302      	str	r3, [sp, #8]
 80a6ffc:	eb02 0903 	add.w	r9, r2, r3
 80a7000:	f108 0504 	add.w	r5, r8, #4
 80a7004:	f859 0d04 	ldr.w	r0, [r9, #-4]!
 80a7008:	f001 fbc6 	bl	80a8798 <__aeabi_i2f>
 80a700c:	4639      	mov	r1, r7
 80a700e:	f001 fc17 	bl	80a8840 <__aeabi_fmul>
 80a7012:	4603      	mov	r3, r0
 80a7014:	4631      	mov	r1, r6
 80a7016:	4638      	mov	r0, r7
 80a7018:	f845 3d04 	str.w	r3, [r5, #-4]!
 80a701c:	f001 fc10 	bl	80a8840 <__aeabi_fmul>
 80a7020:	ab0c      	add	r3, sp, #48	; 0x30
 80a7022:	4599      	cmp	r9, r3
 80a7024:	4607      	mov	r7, r0
 80a7026:	d1ed      	bne.n	80a7004 <__kernel_rem_pio2f+0x478>
 80a7028:	2700      	movs	r7, #0
 80a702a:	46a3      	mov	fp, r4
 80a702c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80a7030:	f1a8 0804 	sub.w	r8, r8, #4
 80a7034:	f8cd a010 	str.w	sl, [sp, #16]
 80a7038:	f1b9 0f00 	cmp.w	r9, #0
 80a703c:	bfb8      	it	lt
 80a703e:	2500      	movlt	r5, #0
 80a7040:	db15      	blt.n	80a706e <__kernel_rem_pio2f+0x4e2>
 80a7042:	46c2      	mov	sl, r8
 80a7044:	2500      	movs	r5, #0
 80a7046:	2600      	movs	r6, #0
 80a7048:	4885      	ldr	r0, [pc, #532]	; (80a7260 <__kernel_rem_pio2f+0x6d4>)
 80a704a:	4c86      	ldr	r4, [pc, #536]	; (80a7264 <__kernel_rem_pio2f+0x6d8>)
 80a704c:	e003      	b.n	80a7056 <__kernel_rem_pio2f+0x4ca>
 80a704e:	42b7      	cmp	r7, r6
 80a7050:	db0d      	blt.n	80a706e <__kernel_rem_pio2f+0x4e2>
 80a7052:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80a7056:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 80a705a:	f001 fbf1 	bl	80a8840 <__aeabi_fmul>
 80a705e:	4601      	mov	r1, r0
 80a7060:	4628      	mov	r0, r5
 80a7062:	f001 fae5 	bl	80a8630 <__addsf3>
 80a7066:	3601      	adds	r6, #1
 80a7068:	45b1      	cmp	r9, r6
 80a706a:	4605      	mov	r5, r0
 80a706c:	daef      	bge.n	80a704e <__kernel_rem_pio2f+0x4c2>
 80a706e:	ab5c      	add	r3, sp, #368	; 0x170
 80a7070:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80a7074:	45bb      	cmp	fp, r7
 80a7076:	f843 5ca0 	str.w	r5, [r3, #-160]
 80a707a:	f1a8 0804 	sub.w	r8, r8, #4
 80a707e:	f107 0301 	add.w	r3, r7, #1
 80a7082:	d001      	beq.n	80a7088 <__kernel_rem_pio2f+0x4fc>
 80a7084:	461f      	mov	r7, r3
 80a7086:	e7d7      	b.n	80a7038 <__kernel_rem_pio2f+0x4ac>
 80a7088:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80a708a:	465c      	mov	r4, fp
 80a708c:	2a02      	cmp	r2, #2
 80a708e:	f8dd a010 	ldr.w	sl, [sp, #16]
 80a7092:	dc17      	bgt.n	80a70c4 <__kernel_rem_pio2f+0x538>
 80a7094:	2a00      	cmp	r2, #0
 80a7096:	dc7f      	bgt.n	80a7198 <__kernel_rem_pio2f+0x60c>
 80a7098:	d10f      	bne.n	80a70ba <__kernel_rem_pio2f+0x52e>
 80a709a:	2000      	movs	r0, #0
 80a709c:	9c02      	ldr	r4, [sp, #8]
 80a709e:	ad34      	add	r5, sp, #208	; 0xd0
 80a70a0:	442c      	add	r4, r5
 80a70a2:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80a70a6:	f001 fac3 	bl	80a8630 <__addsf3>
 80a70aa:	42a5      	cmp	r5, r4
 80a70ac:	d1f9      	bne.n	80a70a2 <__kernel_rem_pio2f+0x516>
 80a70ae:	9b00      	ldr	r3, [sp, #0]
 80a70b0:	b10b      	cbz	r3, 80a70b6 <__kernel_rem_pio2f+0x52a>
 80a70b2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a70b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a70b8:	6018      	str	r0, [r3, #0]
 80a70ba:	f00a 0007 	and.w	r0, sl, #7
 80a70be:	b05d      	add	sp, #372	; 0x174
 80a70c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a70c4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80a70c6:	2b03      	cmp	r3, #3
 80a70c8:	d1f7      	bne.n	80a70ba <__kernel_rem_pio2f+0x52e>
 80a70ca:	2c00      	cmp	r4, #0
 80a70cc:	f000 80c4 	beq.w	80a7258 <__kernel_rem_pio2f+0x6cc>
 80a70d0:	9a01      	ldr	r2, [sp, #4]
 80a70d2:	ab5c      	add	r3, sp, #368	; 0x170
 80a70d4:	4413      	add	r3, r2
 80a70d6:	ae34      	add	r6, sp, #208	; 0xd0
 80a70d8:	f853 5ca0 	ldr.w	r5, [r3, #-160]
 80a70dc:	18b7      	adds	r7, r6, r2
 80a70de:	f857 9c04 	ldr.w	r9, [r7, #-4]
 80a70e2:	4628      	mov	r0, r5
 80a70e4:	4649      	mov	r1, r9
 80a70e6:	f001 faa3 	bl	80a8630 <__addsf3>
 80a70ea:	46a8      	mov	r8, r5
 80a70ec:	4605      	mov	r5, r0
 80a70ee:	4648      	mov	r0, r9
 80a70f0:	4629      	mov	r1, r5
 80a70f2:	f001 fa9b 	bl	80a862c <__aeabi_fsub>
 80a70f6:	4641      	mov	r1, r8
 80a70f8:	f001 fa9a 	bl	80a8630 <__addsf3>
 80a70fc:	6038      	str	r0, [r7, #0]
 80a70fe:	f847 5d04 	str.w	r5, [r7, #-4]!
 80a7102:	42be      	cmp	r6, r7
 80a7104:	d1eb      	bne.n	80a70de <__kernel_rem_pio2f+0x552>
 80a7106:	2c01      	cmp	r4, #1
 80a7108:	f340 80a6 	ble.w	80a7258 <__kernel_rem_pio2f+0x6cc>
 80a710c:	9b01      	ldr	r3, [sp, #4]
 80a710e:	aa5c      	add	r2, sp, #368	; 0x170
 80a7110:	18f7      	adds	r7, r6, r3
 80a7112:	463d      	mov	r5, r7
 80a7114:	18d3      	adds	r3, r2, r3
 80a7116:	f853 4ca0 	ldr.w	r4, [r3, #-160]
 80a711a:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
 80a711e:	f855 bc04 	ldr.w	fp, [r5, #-4]
 80a7122:	4620      	mov	r0, r4
 80a7124:	4659      	mov	r1, fp
 80a7126:	f001 fa83 	bl	80a8630 <__addsf3>
 80a712a:	46a1      	mov	r9, r4
 80a712c:	4604      	mov	r4, r0
 80a712e:	4658      	mov	r0, fp
 80a7130:	4621      	mov	r1, r4
 80a7132:	f001 fa7b 	bl	80a862c <__aeabi_fsub>
 80a7136:	4649      	mov	r1, r9
 80a7138:	f001 fa7a 	bl	80a8630 <__addsf3>
 80a713c:	6028      	str	r0, [r5, #0]
 80a713e:	f845 4d04 	str.w	r4, [r5, #-4]!
 80a7142:	45a8      	cmp	r8, r5
 80a7144:	d1eb      	bne.n	80a711e <__kernel_rem_pio2f+0x592>
 80a7146:	2000      	movs	r0, #0
 80a7148:	3704      	adds	r7, #4
 80a714a:	3608      	adds	r6, #8
 80a714c:	f857 1d04 	ldr.w	r1, [r7, #-4]!
 80a7150:	f001 fa6e 	bl	80a8630 <__addsf3>
 80a7154:	42be      	cmp	r6, r7
 80a7156:	d1f9      	bne.n	80a714c <__kernel_rem_pio2f+0x5c0>
 80a7158:	9b00      	ldr	r3, [sp, #0]
 80a715a:	2b00      	cmp	r3, #0
 80a715c:	d14d      	bne.n	80a71fa <__kernel_rem_pio2f+0x66e>
 80a715e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a7160:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80a7162:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80a7164:	6088      	str	r0, [r1, #8]
 80a7166:	f00a 0007 	and.w	r0, sl, #7
 80a716a:	600a      	str	r2, [r1, #0]
 80a716c:	604b      	str	r3, [r1, #4]
 80a716e:	b05d      	add	sp, #372	; 0x174
 80a7170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7174:	f109 32ff 	add.w	r2, r9, #4294967295
 80a7178:	ab0c      	add	r3, sp, #48	; 0x30
 80a717a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a717e:	a90c      	add	r1, sp, #48	; 0x30
 80a7180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80a7184:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a7188:	e69a      	b.n	80a6ec0 <__kernel_rem_pio2f+0x334>
 80a718a:	2308      	movs	r3, #8
 80a718c:	930a      	str	r3, [sp, #40]	; 0x28
 80a718e:	2300      	movs	r3, #0
 80a7190:	9305      	str	r3, [sp, #20]
 80a7192:	e514      	b.n	80a6bbe <__kernel_rem_pio2f+0x32>
 80a7194:	2700      	movs	r7, #0
 80a7196:	e681      	b.n	80a6e9c <__kernel_rem_pio2f+0x310>
 80a7198:	2000      	movs	r0, #0
 80a719a:	ae34      	add	r6, sp, #208	; 0xd0
 80a719c:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 80a71a0:	f855 1d04 	ldr.w	r1, [r5, #-4]!
 80a71a4:	f001 fa44 	bl	80a8630 <__addsf3>
 80a71a8:	42ae      	cmp	r6, r5
 80a71aa:	d1f9      	bne.n	80a71a0 <__kernel_rem_pio2f+0x614>
 80a71ac:	9b00      	ldr	r3, [sp, #0]
 80a71ae:	2b00      	cmp	r3, #0
 80a71b0:	d134      	bne.n	80a721c <__kernel_rem_pio2f+0x690>
 80a71b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a71b4:	4601      	mov	r1, r0
 80a71b6:	6018      	str	r0, [r3, #0]
 80a71b8:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80a71ba:	f001 fa37 	bl	80a862c <__aeabi_fsub>
 80a71be:	2c00      	cmp	r4, #0
 80a71c0:	dd0c      	ble.n	80a71dc <__kernel_rem_pio2f+0x650>
 80a71c2:	2501      	movs	r5, #1
 80a71c4:	ae34      	add	r6, sp, #208	; 0xd0
 80a71c6:	f856 1f04 	ldr.w	r1, [r6, #4]!
 80a71ca:	3501      	adds	r5, #1
 80a71cc:	f001 fa30 	bl	80a8630 <__addsf3>
 80a71d0:	42ac      	cmp	r4, r5
 80a71d2:	daf8      	bge.n	80a71c6 <__kernel_rem_pio2f+0x63a>
 80a71d4:	9b00      	ldr	r3, [sp, #0]
 80a71d6:	b10b      	cbz	r3, 80a71dc <__kernel_rem_pio2f+0x650>
 80a71d8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a71dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a71de:	6058      	str	r0, [r3, #4]
 80a71e0:	f00a 0007 	and.w	r0, sl, #7
 80a71e4:	b05d      	add	sp, #372	; 0x174
 80a71e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a71ea:	4628      	mov	r0, r5
 80a71ec:	f001 fcee 	bl	80a8bcc <__aeabi_f2iz>
 80a71f0:	ab0c      	add	r3, sp, #48	; 0x30
 80a71f2:	464c      	mov	r4, r9
 80a71f4:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
 80a71f8:	e6ed      	b.n	80a6fd6 <__kernel_rem_pio2f+0x44a>
 80a71fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a71fc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a7200:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 80a7204:	6088      	str	r0, [r1, #8]
 80a7206:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a720a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a720e:	f00a 0007 	and.w	r0, sl, #7
 80a7212:	600a      	str	r2, [r1, #0]
 80a7214:	604b      	str	r3, [r1, #4]
 80a7216:	b05d      	add	sp, #372	; 0x174
 80a7218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a721c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a721e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80a7222:	4601      	mov	r1, r0
 80a7224:	6013      	str	r3, [r2, #0]
 80a7226:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80a7228:	f001 fa00 	bl	80a862c <__aeabi_fsub>
 80a722c:	2c00      	cmp	r4, #0
 80a722e:	dcc8      	bgt.n	80a71c2 <__kernel_rem_pio2f+0x636>
 80a7230:	e7d2      	b.n	80a71d8 <__kernel_rem_pio2f+0x64c>
 80a7232:	1f2b      	subs	r3, r5, #4
 80a7234:	9302      	str	r3, [sp, #8]
 80a7236:	9b06      	ldr	r3, [sp, #24]
 80a7238:	009b      	lsls	r3, r3, #2
 80a723a:	9300      	str	r3, [sp, #0]
 80a723c:	e514      	b.n	80a6c68 <__kernel_rem_pio2f+0xdc>
 80a723e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80a7240:	2b02      	cmp	r3, #2
 80a7242:	dc05      	bgt.n	80a7250 <__kernel_rem_pio2f+0x6c4>
 80a7244:	2b00      	cmp	r3, #0
 80a7246:	dc09      	bgt.n	80a725c <__kernel_rem_pio2f+0x6d0>
 80a7248:	f47f af37 	bne.w	80a70ba <__kernel_rem_pio2f+0x52e>
 80a724c:	2000      	movs	r0, #0
 80a724e:	e72e      	b.n	80a70ae <__kernel_rem_pio2f+0x522>
 80a7250:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80a7252:	2b03      	cmp	r3, #3
 80a7254:	f47f af31 	bne.w	80a70ba <__kernel_rem_pio2f+0x52e>
 80a7258:	2000      	movs	r0, #0
 80a725a:	e77d      	b.n	80a7158 <__kernel_rem_pio2f+0x5cc>
 80a725c:	2000      	movs	r0, #0
 80a725e:	e7a5      	b.n	80a71ac <__kernel_rem_pio2f+0x620>
 80a7260:	3fc90000 	.word	0x3fc90000
 80a7264:	080aa704 	.word	0x080aa704

080a7268 <__kernel_sinf>:
 80a7268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a726c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80a7270:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80a7274:	4604      	mov	r4, r0
 80a7276:	460e      	mov	r6, r1
 80a7278:	4617      	mov	r7, r2
 80a727a:	da03      	bge.n	80a7284 <__kernel_sinf+0x1c>
 80a727c:	f001 fca6 	bl	80a8bcc <__aeabi_f2iz>
 80a7280:	2800      	cmp	r0, #0
 80a7282:	d056      	beq.n	80a7332 <__kernel_sinf+0xca>
 80a7284:	4621      	mov	r1, r4
 80a7286:	4620      	mov	r0, r4
 80a7288:	f001 fada 	bl	80a8840 <__aeabi_fmul>
 80a728c:	4605      	mov	r5, r0
 80a728e:	4620      	mov	r0, r4
 80a7290:	4629      	mov	r1, r5
 80a7292:	f001 fad5 	bl	80a8840 <__aeabi_fmul>
 80a7296:	4928      	ldr	r1, [pc, #160]	; (80a7338 <__kernel_sinf+0xd0>)
 80a7298:	4680      	mov	r8, r0
 80a729a:	4628      	mov	r0, r5
 80a729c:	f001 fad0 	bl	80a8840 <__aeabi_fmul>
 80a72a0:	4926      	ldr	r1, [pc, #152]	; (80a733c <__kernel_sinf+0xd4>)
 80a72a2:	f001 f9c3 	bl	80a862c <__aeabi_fsub>
 80a72a6:	4629      	mov	r1, r5
 80a72a8:	f001 faca 	bl	80a8840 <__aeabi_fmul>
 80a72ac:	4924      	ldr	r1, [pc, #144]	; (80a7340 <__kernel_sinf+0xd8>)
 80a72ae:	f001 f9bf 	bl	80a8630 <__addsf3>
 80a72b2:	4629      	mov	r1, r5
 80a72b4:	f001 fac4 	bl	80a8840 <__aeabi_fmul>
 80a72b8:	4922      	ldr	r1, [pc, #136]	; (80a7344 <__kernel_sinf+0xdc>)
 80a72ba:	f001 f9b7 	bl	80a862c <__aeabi_fsub>
 80a72be:	4629      	mov	r1, r5
 80a72c0:	f001 fabe 	bl	80a8840 <__aeabi_fmul>
 80a72c4:	4920      	ldr	r1, [pc, #128]	; (80a7348 <__kernel_sinf+0xe0>)
 80a72c6:	f001 f9b3 	bl	80a8630 <__addsf3>
 80a72ca:	4681      	mov	r9, r0
 80a72cc:	b317      	cbz	r7, 80a7314 <__kernel_sinf+0xac>
 80a72ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a72d2:	4630      	mov	r0, r6
 80a72d4:	f001 fab4 	bl	80a8840 <__aeabi_fmul>
 80a72d8:	4649      	mov	r1, r9
 80a72da:	4607      	mov	r7, r0
 80a72dc:	4640      	mov	r0, r8
 80a72de:	f001 faaf 	bl	80a8840 <__aeabi_fmul>
 80a72e2:	4601      	mov	r1, r0
 80a72e4:	4638      	mov	r0, r7
 80a72e6:	f001 f9a1 	bl	80a862c <__aeabi_fsub>
 80a72ea:	4629      	mov	r1, r5
 80a72ec:	f001 faa8 	bl	80a8840 <__aeabi_fmul>
 80a72f0:	4631      	mov	r1, r6
 80a72f2:	f001 f99b 	bl	80a862c <__aeabi_fsub>
 80a72f6:	4915      	ldr	r1, [pc, #84]	; (80a734c <__kernel_sinf+0xe4>)
 80a72f8:	4605      	mov	r5, r0
 80a72fa:	4640      	mov	r0, r8
 80a72fc:	f001 faa0 	bl	80a8840 <__aeabi_fmul>
 80a7300:	4601      	mov	r1, r0
 80a7302:	4628      	mov	r0, r5
 80a7304:	f001 f994 	bl	80a8630 <__addsf3>
 80a7308:	4601      	mov	r1, r0
 80a730a:	4620      	mov	r0, r4
 80a730c:	f001 f98e 	bl	80a862c <__aeabi_fsub>
 80a7310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a7314:	4601      	mov	r1, r0
 80a7316:	4628      	mov	r0, r5
 80a7318:	f001 fa92 	bl	80a8840 <__aeabi_fmul>
 80a731c:	490b      	ldr	r1, [pc, #44]	; (80a734c <__kernel_sinf+0xe4>)
 80a731e:	f001 f985 	bl	80a862c <__aeabi_fsub>
 80a7322:	4641      	mov	r1, r8
 80a7324:	f001 fa8c 	bl	80a8840 <__aeabi_fmul>
 80a7328:	4621      	mov	r1, r4
 80a732a:	f001 f981 	bl	80a8630 <__addsf3>
 80a732e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a7332:	4620      	mov	r0, r4
 80a7334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a7338:	2f2ec9d3 	.word	0x2f2ec9d3
 80a733c:	32d72f34 	.word	0x32d72f34
 80a7340:	3638ef1b 	.word	0x3638ef1b
 80a7344:	39500d01 	.word	0x39500d01
 80a7348:	3c088889 	.word	0x3c088889
 80a734c:	3e2aaaab 	.word	0x3e2aaaab

080a7350 <atan>:
 80a7350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7354:	4fb8      	ldr	r7, [pc, #736]	; (80a7638 <atan+0x2e8>)
 80a7356:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a735a:	42be      	cmp	r6, r7
 80a735c:	4604      	mov	r4, r0
 80a735e:	460d      	mov	r5, r1
 80a7360:	468a      	mov	sl, r1
 80a7362:	dd1c      	ble.n	80a739e <atan+0x4e>
 80a7364:	4bb5      	ldr	r3, [pc, #724]	; (80a763c <atan+0x2ec>)
 80a7366:	429e      	cmp	r6, r3
 80a7368:	dc0d      	bgt.n	80a7386 <atan+0x36>
 80a736a:	d00a      	beq.n	80a7382 <atan+0x32>
 80a736c:	4bb4      	ldr	r3, [pc, #720]	; (80a7640 <atan+0x2f0>)
 80a736e:	4ab5      	ldr	r2, [pc, #724]	; (80a7644 <atan+0x2f4>)
 80a7370:	4cb5      	ldr	r4, [pc, #724]	; (80a7648 <atan+0x2f8>)
 80a7372:	f1ba 0f00 	cmp.w	sl, #0
 80a7376:	bfd8      	it	le
 80a7378:	4613      	movle	r3, r2
 80a737a:	4620      	mov	r0, r4
 80a737c:	4619      	mov	r1, r3
 80a737e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7382:	2800      	cmp	r0, #0
 80a7384:	d0f2      	beq.n	80a736c <atan+0x1c>
 80a7386:	4622      	mov	r2, r4
 80a7388:	462b      	mov	r3, r5
 80a738a:	4620      	mov	r0, r4
 80a738c:	4629      	mov	r1, r5
 80a738e:	f000 fc4b 	bl	80a7c28 <__adddf3>
 80a7392:	4604      	mov	r4, r0
 80a7394:	460b      	mov	r3, r1
 80a7396:	4620      	mov	r0, r4
 80a7398:	4619      	mov	r1, r3
 80a739a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a739e:	4bab      	ldr	r3, [pc, #684]	; (80a764c <atan+0x2fc>)
 80a73a0:	429e      	cmp	r6, r3
 80a73a2:	f300 80b0 	bgt.w	80a7506 <atan+0x1b6>
 80a73a6:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80a73aa:	429e      	cmp	r6, r3
 80a73ac:	f340 809d 	ble.w	80a74ea <atan+0x19a>
 80a73b0:	f04f 3bff 	mov.w	fp, #4294967295
 80a73b4:	4622      	mov	r2, r4
 80a73b6:	462b      	mov	r3, r5
 80a73b8:	4620      	mov	r0, r4
 80a73ba:	4629      	mov	r1, r5
 80a73bc:	f000 fdea 	bl	80a7f94 <__aeabi_dmul>
 80a73c0:	4602      	mov	r2, r0
 80a73c2:	460b      	mov	r3, r1
 80a73c4:	4680      	mov	r8, r0
 80a73c6:	4689      	mov	r9, r1
 80a73c8:	f000 fde4 	bl	80a7f94 <__aeabi_dmul>
 80a73cc:	a382      	add	r3, pc, #520	; (adr r3, 80a75d8 <atan+0x288>)
 80a73ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a73d2:	4606      	mov	r6, r0
 80a73d4:	460f      	mov	r7, r1
 80a73d6:	f000 fddd 	bl	80a7f94 <__aeabi_dmul>
 80a73da:	a381      	add	r3, pc, #516	; (adr r3, 80a75e0 <atan+0x290>)
 80a73dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a73e0:	f000 fc22 	bl	80a7c28 <__adddf3>
 80a73e4:	4632      	mov	r2, r6
 80a73e6:	463b      	mov	r3, r7
 80a73e8:	f000 fdd4 	bl	80a7f94 <__aeabi_dmul>
 80a73ec:	a37e      	add	r3, pc, #504	; (adr r3, 80a75e8 <atan+0x298>)
 80a73ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a73f2:	f000 fc19 	bl	80a7c28 <__adddf3>
 80a73f6:	4632      	mov	r2, r6
 80a73f8:	463b      	mov	r3, r7
 80a73fa:	f000 fdcb 	bl	80a7f94 <__aeabi_dmul>
 80a73fe:	a37c      	add	r3, pc, #496	; (adr r3, 80a75f0 <atan+0x2a0>)
 80a7400:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7404:	f000 fc10 	bl	80a7c28 <__adddf3>
 80a7408:	4632      	mov	r2, r6
 80a740a:	463b      	mov	r3, r7
 80a740c:	f000 fdc2 	bl	80a7f94 <__aeabi_dmul>
 80a7410:	a379      	add	r3, pc, #484	; (adr r3, 80a75f8 <atan+0x2a8>)
 80a7412:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7416:	f000 fc07 	bl	80a7c28 <__adddf3>
 80a741a:	4632      	mov	r2, r6
 80a741c:	463b      	mov	r3, r7
 80a741e:	f000 fdb9 	bl	80a7f94 <__aeabi_dmul>
 80a7422:	a377      	add	r3, pc, #476	; (adr r3, 80a7600 <atan+0x2b0>)
 80a7424:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7428:	f000 fbfe 	bl	80a7c28 <__adddf3>
 80a742c:	4642      	mov	r2, r8
 80a742e:	464b      	mov	r3, r9
 80a7430:	f000 fdb0 	bl	80a7f94 <__aeabi_dmul>
 80a7434:	a374      	add	r3, pc, #464	; (adr r3, 80a7608 <atan+0x2b8>)
 80a7436:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a743a:	4680      	mov	r8, r0
 80a743c:	4689      	mov	r9, r1
 80a743e:	4630      	mov	r0, r6
 80a7440:	4639      	mov	r1, r7
 80a7442:	f000 fda7 	bl	80a7f94 <__aeabi_dmul>
 80a7446:	a372      	add	r3, pc, #456	; (adr r3, 80a7610 <atan+0x2c0>)
 80a7448:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a744c:	f000 fbea 	bl	80a7c24 <__aeabi_dsub>
 80a7450:	4632      	mov	r2, r6
 80a7452:	463b      	mov	r3, r7
 80a7454:	f000 fd9e 	bl	80a7f94 <__aeabi_dmul>
 80a7458:	a36f      	add	r3, pc, #444	; (adr r3, 80a7618 <atan+0x2c8>)
 80a745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a745e:	f000 fbe1 	bl	80a7c24 <__aeabi_dsub>
 80a7462:	4632      	mov	r2, r6
 80a7464:	463b      	mov	r3, r7
 80a7466:	f000 fd95 	bl	80a7f94 <__aeabi_dmul>
 80a746a:	a36d      	add	r3, pc, #436	; (adr r3, 80a7620 <atan+0x2d0>)
 80a746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7470:	f000 fbd8 	bl	80a7c24 <__aeabi_dsub>
 80a7474:	4632      	mov	r2, r6
 80a7476:	463b      	mov	r3, r7
 80a7478:	f000 fd8c 	bl	80a7f94 <__aeabi_dmul>
 80a747c:	a36a      	add	r3, pc, #424	; (adr r3, 80a7628 <atan+0x2d8>)
 80a747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7482:	f000 fbcf 	bl	80a7c24 <__aeabi_dsub>
 80a7486:	4632      	mov	r2, r6
 80a7488:	463b      	mov	r3, r7
 80a748a:	f000 fd83 	bl	80a7f94 <__aeabi_dmul>
 80a748e:	f1bb 3fff 	cmp.w	fp, #4294967295
 80a7492:	4602      	mov	r2, r0
 80a7494:	460b      	mov	r3, r1
 80a7496:	4640      	mov	r0, r8
 80a7498:	4649      	mov	r1, r9
 80a749a:	d053      	beq.n	80a7544 <atan+0x1f4>
 80a749c:	f000 fbc4 	bl	80a7c28 <__adddf3>
 80a74a0:	4e6b      	ldr	r6, [pc, #428]	; (80a7650 <atan+0x300>)
 80a74a2:	4622      	mov	r2, r4
 80a74a4:	462b      	mov	r3, r5
 80a74a6:	f000 fd75 	bl	80a7f94 <__aeabi_dmul>
 80a74aa:	4b6a      	ldr	r3, [pc, #424]	; (80a7654 <atan+0x304>)
 80a74ac:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 80a74b0:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80a74b4:	449b      	add	fp, r3
 80a74b6:	e9db 2300 	ldrd	r2, r3, [fp]
 80a74ba:	f000 fbb3 	bl	80a7c24 <__aeabi_dsub>
 80a74be:	4622      	mov	r2, r4
 80a74c0:	462b      	mov	r3, r5
 80a74c2:	f000 fbaf 	bl	80a7c24 <__aeabi_dsub>
 80a74c6:	460b      	mov	r3, r1
 80a74c8:	4602      	mov	r2, r0
 80a74ca:	e9d6 0100 	ldrd	r0, r1, [r6]
 80a74ce:	f000 fba9 	bl	80a7c24 <__aeabi_dsub>
 80a74d2:	f1ba 0f00 	cmp.w	sl, #0
 80a74d6:	4604      	mov	r4, r0
 80a74d8:	460b      	mov	r3, r1
 80a74da:	f6bf af4e 	bge.w	80a737a <atan+0x2a>
 80a74de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a74e2:	4620      	mov	r0, r4
 80a74e4:	4619      	mov	r1, r3
 80a74e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a74ea:	a351      	add	r3, pc, #324	; (adr r3, 80a7630 <atan+0x2e0>)
 80a74ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a74f0:	f000 fb9a 	bl	80a7c28 <__adddf3>
 80a74f4:	2200      	movs	r2, #0
 80a74f6:	4b58      	ldr	r3, [pc, #352]	; (80a7658 <atan+0x308>)
 80a74f8:	f000 ffdc 	bl	80a84b4 <__aeabi_dcmpgt>
 80a74fc:	2800      	cmp	r0, #0
 80a74fe:	f43f af57 	beq.w	80a73b0 <atan+0x60>
 80a7502:	462b      	mov	r3, r5
 80a7504:	e739      	b.n	80a737a <atan+0x2a>
 80a7506:	f000 f8b1 	bl	80a766c <fabs>
 80a750a:	4b54      	ldr	r3, [pc, #336]	; (80a765c <atan+0x30c>)
 80a750c:	4604      	mov	r4, r0
 80a750e:	429e      	cmp	r6, r3
 80a7510:	460d      	mov	r5, r1
 80a7512:	dc29      	bgt.n	80a7568 <atan+0x218>
 80a7514:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80a7518:	429e      	cmp	r6, r3
 80a751a:	dc50      	bgt.n	80a75be <atan+0x26e>
 80a751c:	4602      	mov	r2, r0
 80a751e:	460b      	mov	r3, r1
 80a7520:	f000 fb82 	bl	80a7c28 <__adddf3>
 80a7524:	2200      	movs	r2, #0
 80a7526:	4b4c      	ldr	r3, [pc, #304]	; (80a7658 <atan+0x308>)
 80a7528:	f000 fb7c 	bl	80a7c24 <__aeabi_dsub>
 80a752c:	4602      	mov	r2, r0
 80a752e:	460b      	mov	r3, r1
 80a7530:	4620      	mov	r0, r4
 80a7532:	4629      	mov	r1, r5
 80a7534:	4614      	mov	r4, r2
 80a7536:	461d      	mov	r5, r3
 80a7538:	f04f 0b00 	mov.w	fp, #0
 80a753c:	2200      	movs	r2, #0
 80a753e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a7542:	e026      	b.n	80a7592 <atan+0x242>
 80a7544:	f000 fb70 	bl	80a7c28 <__adddf3>
 80a7548:	4622      	mov	r2, r4
 80a754a:	462b      	mov	r3, r5
 80a754c:	f000 fd22 	bl	80a7f94 <__aeabi_dmul>
 80a7550:	4602      	mov	r2, r0
 80a7552:	460b      	mov	r3, r1
 80a7554:	4620      	mov	r0, r4
 80a7556:	4629      	mov	r1, r5
 80a7558:	f000 fb64 	bl	80a7c24 <__aeabi_dsub>
 80a755c:	4604      	mov	r4, r0
 80a755e:	460b      	mov	r3, r1
 80a7560:	4620      	mov	r0, r4
 80a7562:	4619      	mov	r1, r3
 80a7564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7568:	4b3d      	ldr	r3, [pc, #244]	; (80a7660 <atan+0x310>)
 80a756a:	429e      	cmp	r6, r3
 80a756c:	da1c      	bge.n	80a75a8 <atan+0x258>
 80a756e:	2200      	movs	r2, #0
 80a7570:	4b3c      	ldr	r3, [pc, #240]	; (80a7664 <atan+0x314>)
 80a7572:	f000 fb57 	bl	80a7c24 <__aeabi_dsub>
 80a7576:	4602      	mov	r2, r0
 80a7578:	460b      	mov	r3, r1
 80a757a:	4620      	mov	r0, r4
 80a757c:	4629      	mov	r1, r5
 80a757e:	4614      	mov	r4, r2
 80a7580:	461d      	mov	r5, r3
 80a7582:	2200      	movs	r2, #0
 80a7584:	4b37      	ldr	r3, [pc, #220]	; (80a7664 <atan+0x314>)
 80a7586:	f04f 0b02 	mov.w	fp, #2
 80a758a:	f000 fd03 	bl	80a7f94 <__aeabi_dmul>
 80a758e:	2200      	movs	r2, #0
 80a7590:	4b31      	ldr	r3, [pc, #196]	; (80a7658 <atan+0x308>)
 80a7592:	f000 fb49 	bl	80a7c28 <__adddf3>
 80a7596:	4602      	mov	r2, r0
 80a7598:	460b      	mov	r3, r1
 80a759a:	4620      	mov	r0, r4
 80a759c:	4629      	mov	r1, r5
 80a759e:	f000 fe23 	bl	80a81e8 <__aeabi_ddiv>
 80a75a2:	4604      	mov	r4, r0
 80a75a4:	460d      	mov	r5, r1
 80a75a6:	e705      	b.n	80a73b4 <atan+0x64>
 80a75a8:	4602      	mov	r2, r0
 80a75aa:	460b      	mov	r3, r1
 80a75ac:	2000      	movs	r0, #0
 80a75ae:	492e      	ldr	r1, [pc, #184]	; (80a7668 <atan+0x318>)
 80a75b0:	f000 fe1a 	bl	80a81e8 <__aeabi_ddiv>
 80a75b4:	f04f 0b03 	mov.w	fp, #3
 80a75b8:	4604      	mov	r4, r0
 80a75ba:	460d      	mov	r5, r1
 80a75bc:	e6fa      	b.n	80a73b4 <atan+0x64>
 80a75be:	2200      	movs	r2, #0
 80a75c0:	4b25      	ldr	r3, [pc, #148]	; (80a7658 <atan+0x308>)
 80a75c2:	f000 fb2f 	bl	80a7c24 <__aeabi_dsub>
 80a75c6:	4602      	mov	r2, r0
 80a75c8:	460b      	mov	r3, r1
 80a75ca:	4620      	mov	r0, r4
 80a75cc:	4629      	mov	r1, r5
 80a75ce:	f04f 0b01 	mov.w	fp, #1
 80a75d2:	4614      	mov	r4, r2
 80a75d4:	461d      	mov	r5, r3
 80a75d6:	e7da      	b.n	80a758e <atan+0x23e>
 80a75d8:	e322da11 	.word	0xe322da11
 80a75dc:	3f90ad3a 	.word	0x3f90ad3a
 80a75e0:	24760deb 	.word	0x24760deb
 80a75e4:	3fa97b4b 	.word	0x3fa97b4b
 80a75e8:	a0d03d51 	.word	0xa0d03d51
 80a75ec:	3fb10d66 	.word	0x3fb10d66
 80a75f0:	c54c206e 	.word	0xc54c206e
 80a75f4:	3fb745cd 	.word	0x3fb745cd
 80a75f8:	920083ff 	.word	0x920083ff
 80a75fc:	3fc24924 	.word	0x3fc24924
 80a7600:	5555550d 	.word	0x5555550d
 80a7604:	3fd55555 	.word	0x3fd55555
 80a7608:	2c6a6c2f 	.word	0x2c6a6c2f
 80a760c:	bfa2b444 	.word	0xbfa2b444
 80a7610:	52defd9a 	.word	0x52defd9a
 80a7614:	3fadde2d 	.word	0x3fadde2d
 80a7618:	af749a6d 	.word	0xaf749a6d
 80a761c:	3fb3b0f2 	.word	0x3fb3b0f2
 80a7620:	fe231671 	.word	0xfe231671
 80a7624:	3fbc71c6 	.word	0x3fbc71c6
 80a7628:	9998ebc4 	.word	0x9998ebc4
 80a762c:	3fc99999 	.word	0x3fc99999
 80a7630:	8800759c 	.word	0x8800759c
 80a7634:	7e37e43c 	.word	0x7e37e43c
 80a7638:	440fffff 	.word	0x440fffff
 80a763c:	7ff00000 	.word	0x7ff00000
 80a7640:	3ff921fb 	.word	0x3ff921fb
 80a7644:	bff921fb 	.word	0xbff921fb
 80a7648:	54442d18 	.word	0x54442d18
 80a764c:	3fdbffff 	.word	0x3fdbffff
 80a7650:	080aa740 	.word	0x080aa740
 80a7654:	080aa760 	.word	0x080aa760
 80a7658:	3ff00000 	.word	0x3ff00000
 80a765c:	3ff2ffff 	.word	0x3ff2ffff
 80a7660:	40038000 	.word	0x40038000
 80a7664:	3ff80000 	.word	0x3ff80000
 80a7668:	bff00000 	.word	0xbff00000

080a766c <fabs>:
 80a766c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a7670:	4770      	bx	lr
 80a7672:	bf00      	nop

080a7674 <finite>:
 80a7674:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80a7678:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80a767c:	0fc0      	lsrs	r0, r0, #31
 80a767e:	4770      	bx	lr

080a7680 <nan>:
 80a7680:	2000      	movs	r0, #0
 80a7682:	4901      	ldr	r1, [pc, #4]	; (80a7688 <nan+0x8>)
 80a7684:	4770      	bx	lr
 80a7686:	bf00      	nop
 80a7688:	7ff80000 	.word	0x7ff80000

080a768c <rint>:
 80a768c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a768e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80a7692:	f2a5 3cff 	subw	ip, r5, #1023	; 0x3ff
 80a7696:	f1bc 0f13 	cmp.w	ip, #19
 80a769a:	4602      	mov	r2, r0
 80a769c:	460b      	mov	r3, r1
 80a769e:	460c      	mov	r4, r1
 80a76a0:	4686      	mov	lr, r0
 80a76a2:	b083      	sub	sp, #12
 80a76a4:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80a76a8:	dc65      	bgt.n	80a7776 <rint+0xea>
 80a76aa:	f1bc 0f00 	cmp.w	ip, #0
 80a76ae:	db30      	blt.n	80a7712 <rint+0x86>
 80a76b0:	4942      	ldr	r1, [pc, #264]	; (80a77bc <rint+0x130>)
 80a76b2:	fa41 f10c 	asr.w	r1, r1, ip
 80a76b6:	ea03 0001 	and.w	r0, r3, r1
 80a76ba:	4310      	orrs	r0, r2
 80a76bc:	d061      	beq.n	80a7782 <rint+0xf6>
 80a76be:	ea03 0351 	and.w	r3, r3, r1, lsr #1
 80a76c2:	ea52 0e03 	orrs.w	lr, r2, r3
 80a76c6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a76ca:	d00d      	beq.n	80a76e8 <rint+0x5c>
 80a76cc:	ea24 0101 	bic.w	r1, r4, r1
 80a76d0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80a76d4:	f1bc 0f13 	cmp.w	ip, #19
 80a76d8:	bf0c      	ite	eq
 80a76da:	f04f 4e00 	moveq.w	lr, #2147483648	; 0x80000000
 80a76de:	f04f 0e00 	movne.w	lr, #0
 80a76e2:	fa44 f40c 	asr.w	r4, r4, ip
 80a76e6:	430c      	orrs	r4, r1
 80a76e8:	4935      	ldr	r1, [pc, #212]	; (80a77c0 <rint+0x134>)
 80a76ea:	4623      	mov	r3, r4
 80a76ec:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80a76f0:	e9d6 6700 	ldrd	r6, r7, [r6]
 80a76f4:	4672      	mov	r2, lr
 80a76f6:	4630      	mov	r0, r6
 80a76f8:	4639      	mov	r1, r7
 80a76fa:	f000 fa95 	bl	80a7c28 <__adddf3>
 80a76fe:	e9cd 0100 	strd	r0, r1, [sp]
 80a7702:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a7706:	4632      	mov	r2, r6
 80a7708:	463b      	mov	r3, r7
 80a770a:	f000 fa8b 	bl	80a7c24 <__aeabi_dsub>
 80a770e:	b003      	add	sp, #12
 80a7710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a7712:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a7716:	4301      	orrs	r1, r0
 80a7718:	4619      	mov	r1, r3
 80a771a:	d0f8      	beq.n	80a770e <rint+0x82>
 80a771c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a7720:	ea43 0e00 	orr.w	lr, r3, r0
 80a7724:	f1ce 0300 	rsb	r3, lr, #0
 80a7728:	ea43 030e 	orr.w	r3, r3, lr
 80a772c:	0c62      	lsrs	r2, r4, #17
 80a772e:	0b1b      	lsrs	r3, r3, #12
 80a7730:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80a7734:	0452      	lsls	r2, r2, #17
 80a7736:	ea43 0102 	orr.w	r1, r3, r2
 80a773a:	460b      	mov	r3, r1
 80a773c:	4920      	ldr	r1, [pc, #128]	; (80a77c0 <rint+0x134>)
 80a773e:	4602      	mov	r2, r0
 80a7740:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80a7744:	e9d6 6700 	ldrd	r6, r7, [r6]
 80a7748:	4630      	mov	r0, r6
 80a774a:	4639      	mov	r1, r7
 80a774c:	f000 fa6c 	bl	80a7c28 <__adddf3>
 80a7750:	e9cd 0100 	strd	r0, r1, [sp]
 80a7754:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a7758:	4632      	mov	r2, r6
 80a775a:	463b      	mov	r3, r7
 80a775c:	f000 fa62 	bl	80a7c24 <__aeabi_dsub>
 80a7760:	4602      	mov	r2, r0
 80a7762:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80a7766:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a776a:	ea41 0304 	orr.w	r3, r1, r4
 80a776e:	4610      	mov	r0, r2
 80a7770:	4619      	mov	r1, r3
 80a7772:	b003      	add	sp, #12
 80a7774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a7776:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 80a777a:	dd06      	ble.n	80a778a <rint+0xfe>
 80a777c:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80a7780:	d018      	beq.n	80a77b4 <rint+0x128>
 80a7782:	4610      	mov	r0, r2
 80a7784:	4619      	mov	r1, r3
 80a7786:	b003      	add	sp, #12
 80a7788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a778a:	f04f 31ff 	mov.w	r1, #4294967295
 80a778e:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80a7792:	40e9      	lsrs	r1, r5
 80a7794:	4208      	tst	r0, r1
 80a7796:	d0f4      	beq.n	80a7782 <rint+0xf6>
 80a7798:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80a779c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80a77a0:	d0a2      	beq.n	80a76e8 <rint+0x5c>
 80a77a2:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 80a77a6:	ea20 0303 	bic.w	r3, r0, r3
 80a77aa:	fa4e f505 	asr.w	r5, lr, r5
 80a77ae:	ea43 0e05 	orr.w	lr, r3, r5
 80a77b2:	e799      	b.n	80a76e8 <rint+0x5c>
 80a77b4:	f000 fa38 	bl	80a7c28 <__adddf3>
 80a77b8:	e7a9      	b.n	80a770e <rint+0x82>
 80a77ba:	bf00      	nop
 80a77bc:	000fffff 	.word	0x000fffff
 80a77c0:	080aa780 	.word	0x080aa780
 80a77c4:	00000000 	.word	0x00000000

080a77c8 <scalbn>:
 80a77c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a77cc:	b570      	push	{r4, r5, r6, lr}
 80a77ce:	468c      	mov	ip, r1
 80a77d0:	4604      	mov	r4, r0
 80a77d2:	460d      	mov	r5, r1
 80a77d4:	4616      	mov	r6, r2
 80a77d6:	bb7b      	cbnz	r3, 80a7838 <scalbn+0x70>
 80a77d8:	4603      	mov	r3, r0
 80a77da:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80a77de:	ea5c 0303 	orrs.w	r3, ip, r3
 80a77e2:	d028      	beq.n	80a7836 <scalbn+0x6e>
 80a77e4:	4b32      	ldr	r3, [pc, #200]	; (80a78b0 <scalbn+0xe8>)
 80a77e6:	2200      	movs	r2, #0
 80a77e8:	f000 fbd4 	bl	80a7f94 <__aeabi_dmul>
 80a77ec:	4b31      	ldr	r3, [pc, #196]	; (80a78b4 <scalbn+0xec>)
 80a77ee:	4604      	mov	r4, r0
 80a77f0:	429e      	cmp	r6, r3
 80a77f2:	460d      	mov	r5, r1
 80a77f4:	db1a      	blt.n	80a782c <scalbn+0x64>
 80a77f6:	468c      	mov	ip, r1
 80a77f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a77fc:	3b36      	subs	r3, #54	; 0x36
 80a77fe:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a7802:	4433      	add	r3, r6
 80a7804:	4293      	cmp	r3, r2
 80a7806:	dc20      	bgt.n	80a784a <scalbn+0x82>
 80a7808:	2b00      	cmp	r3, #0
 80a780a:	dc3e      	bgt.n	80a788a <scalbn+0xc2>
 80a780c:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80a7810:	da2c      	bge.n	80a786c <scalbn+0xa4>
 80a7812:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a7816:	429e      	cmp	r6, r3
 80a7818:	dc17      	bgt.n	80a784a <scalbn+0x82>
 80a781a:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a781e:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 80a7822:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80a7826:	4824      	ldr	r0, [pc, #144]	; (80a78b8 <scalbn+0xf0>)
 80a7828:	f041 011f 	orr.w	r1, r1, #31
 80a782c:	a31c      	add	r3, pc, #112	; (adr r3, 80a78a0 <scalbn+0xd8>)
 80a782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7832:	f000 fbaf 	bl	80a7f94 <__aeabi_dmul>
 80a7836:	bd70      	pop	{r4, r5, r6, pc}
 80a7838:	f240 7eff 	movw	lr, #2047	; 0x7ff
 80a783c:	4573      	cmp	r3, lr
 80a783e:	d1de      	bne.n	80a77fe <scalbn+0x36>
 80a7840:	4602      	mov	r2, r0
 80a7842:	460b      	mov	r3, r1
 80a7844:	f000 f9f0 	bl	80a7c28 <__adddf3>
 80a7848:	bd70      	pop	{r4, r5, r6, pc}
 80a784a:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a784e:	f043 41fc 	orr.w	r1, r3, #2113929216	; 0x7e000000
 80a7852:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80a7856:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80a785a:	a313      	add	r3, pc, #76	; (adr r3, 80a78a8 <scalbn+0xe0>)
 80a785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7860:	4816      	ldr	r0, [pc, #88]	; (80a78bc <scalbn+0xf4>)
 80a7862:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80a7866:	f000 fb95 	bl	80a7f94 <__aeabi_dmul>
 80a786a:	bd70      	pop	{r4, r5, r6, pc}
 80a786c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 80a7870:	f103 0136 	add.w	r1, r3, #54	; 0x36
 80a7874:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 80a7878:	ea4c 5501 	orr.w	r5, ip, r1, lsl #20
 80a787c:	2200      	movs	r2, #0
 80a787e:	4620      	mov	r0, r4
 80a7880:	4629      	mov	r1, r5
 80a7882:	4b0f      	ldr	r3, [pc, #60]	; (80a78c0 <scalbn+0xf8>)
 80a7884:	f000 fb86 	bl	80a7f94 <__aeabi_dmul>
 80a7888:	bd70      	pop	{r4, r5, r6, pc}
 80a788a:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 80a788e:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 80a7892:	4620      	mov	r0, r4
 80a7894:	ea4c 5103 	orr.w	r1, ip, r3, lsl #20
 80a7898:	bd70      	pop	{r4, r5, r6, pc}
 80a789a:	bf00      	nop
 80a789c:	f3af 8000 	nop.w
 80a78a0:	c2f8f359 	.word	0xc2f8f359
 80a78a4:	01a56e1f 	.word	0x01a56e1f
 80a78a8:	8800759c 	.word	0x8800759c
 80a78ac:	7e37e43c 	.word	0x7e37e43c
 80a78b0:	43500000 	.word	0x43500000
 80a78b4:	ffff3cb0 	.word	0xffff3cb0
 80a78b8:	c2f8f359 	.word	0xc2f8f359
 80a78bc:	8800759c 	.word	0x8800759c
 80a78c0:	3c900000 	.word	0x3c900000

080a78c4 <atanf>:
 80a78c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a78c8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80a78cc:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 80a78d0:	4604      	mov	r4, r0
 80a78d2:	4607      	mov	r7, r0
 80a78d4:	db07      	blt.n	80a78e6 <atanf+0x22>
 80a78d6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80a78da:	dc71      	bgt.n	80a79c0 <atanf+0xfc>
 80a78dc:	2800      	cmp	r0, #0
 80a78de:	dd7f      	ble.n	80a79e0 <atanf+0x11c>
 80a78e0:	4869      	ldr	r0, [pc, #420]	; (80a7a88 <atanf+0x1c4>)
 80a78e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a78e6:	4b69      	ldr	r3, [pc, #420]	; (80a7a8c <atanf+0x1c8>)
 80a78e8:	429d      	cmp	r5, r3
 80a78ea:	dc7c      	bgt.n	80a79e6 <atanf+0x122>
 80a78ec:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80a78f0:	db6b      	blt.n	80a79ca <atanf+0x106>
 80a78f2:	f04f 38ff 	mov.w	r8, #4294967295
 80a78f6:	4621      	mov	r1, r4
 80a78f8:	4620      	mov	r0, r4
 80a78fa:	f000 ffa1 	bl	80a8840 <__aeabi_fmul>
 80a78fe:	4601      	mov	r1, r0
 80a7900:	4606      	mov	r6, r0
 80a7902:	f000 ff9d 	bl	80a8840 <__aeabi_fmul>
 80a7906:	4605      	mov	r5, r0
 80a7908:	4961      	ldr	r1, [pc, #388]	; (80a7a90 <atanf+0x1cc>)
 80a790a:	f000 ff99 	bl	80a8840 <__aeabi_fmul>
 80a790e:	4961      	ldr	r1, [pc, #388]	; (80a7a94 <atanf+0x1d0>)
 80a7910:	f000 fe8e 	bl	80a8630 <__addsf3>
 80a7914:	4629      	mov	r1, r5
 80a7916:	f000 ff93 	bl	80a8840 <__aeabi_fmul>
 80a791a:	495f      	ldr	r1, [pc, #380]	; (80a7a98 <atanf+0x1d4>)
 80a791c:	f000 fe88 	bl	80a8630 <__addsf3>
 80a7920:	4629      	mov	r1, r5
 80a7922:	f000 ff8d 	bl	80a8840 <__aeabi_fmul>
 80a7926:	495d      	ldr	r1, [pc, #372]	; (80a7a9c <atanf+0x1d8>)
 80a7928:	f000 fe82 	bl	80a8630 <__addsf3>
 80a792c:	4629      	mov	r1, r5
 80a792e:	f000 ff87 	bl	80a8840 <__aeabi_fmul>
 80a7932:	495b      	ldr	r1, [pc, #364]	; (80a7aa0 <atanf+0x1dc>)
 80a7934:	f000 fe7c 	bl	80a8630 <__addsf3>
 80a7938:	4629      	mov	r1, r5
 80a793a:	f000 ff81 	bl	80a8840 <__aeabi_fmul>
 80a793e:	4959      	ldr	r1, [pc, #356]	; (80a7aa4 <atanf+0x1e0>)
 80a7940:	f000 fe76 	bl	80a8630 <__addsf3>
 80a7944:	4631      	mov	r1, r6
 80a7946:	f000 ff7b 	bl	80a8840 <__aeabi_fmul>
 80a794a:	4957      	ldr	r1, [pc, #348]	; (80a7aa8 <atanf+0x1e4>)
 80a794c:	4606      	mov	r6, r0
 80a794e:	4628      	mov	r0, r5
 80a7950:	f000 ff76 	bl	80a8840 <__aeabi_fmul>
 80a7954:	4955      	ldr	r1, [pc, #340]	; (80a7aac <atanf+0x1e8>)
 80a7956:	f000 fe69 	bl	80a862c <__aeabi_fsub>
 80a795a:	4629      	mov	r1, r5
 80a795c:	f000 ff70 	bl	80a8840 <__aeabi_fmul>
 80a7960:	4953      	ldr	r1, [pc, #332]	; (80a7ab0 <atanf+0x1ec>)
 80a7962:	f000 fe63 	bl	80a862c <__aeabi_fsub>
 80a7966:	4629      	mov	r1, r5
 80a7968:	f000 ff6a 	bl	80a8840 <__aeabi_fmul>
 80a796c:	4951      	ldr	r1, [pc, #324]	; (80a7ab4 <atanf+0x1f0>)
 80a796e:	f000 fe5d 	bl	80a862c <__aeabi_fsub>
 80a7972:	4629      	mov	r1, r5
 80a7974:	f000 ff64 	bl	80a8840 <__aeabi_fmul>
 80a7978:	494f      	ldr	r1, [pc, #316]	; (80a7ab8 <atanf+0x1f4>)
 80a797a:	f000 fe57 	bl	80a862c <__aeabi_fsub>
 80a797e:	4629      	mov	r1, r5
 80a7980:	f000 ff5e 	bl	80a8840 <__aeabi_fmul>
 80a7984:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a7988:	4601      	mov	r1, r0
 80a798a:	4630      	mov	r0, r6
 80a798c:	d041      	beq.n	80a7a12 <atanf+0x14e>
 80a798e:	f000 fe4f 	bl	80a8630 <__addsf3>
 80a7992:	4621      	mov	r1, r4
 80a7994:	f000 ff54 	bl	80a8840 <__aeabi_fmul>
 80a7998:	4b48      	ldr	r3, [pc, #288]	; (80a7abc <atanf+0x1f8>)
 80a799a:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80a799e:	f000 fe45 	bl	80a862c <__aeabi_fsub>
 80a79a2:	4621      	mov	r1, r4
 80a79a4:	f000 fe42 	bl	80a862c <__aeabi_fsub>
 80a79a8:	4b45      	ldr	r3, [pc, #276]	; (80a7ac0 <atanf+0x1fc>)
 80a79aa:	4601      	mov	r1, r0
 80a79ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80a79b0:	f000 fe3c 	bl	80a862c <__aeabi_fsub>
 80a79b4:	2f00      	cmp	r7, #0
 80a79b6:	da94      	bge.n	80a78e2 <atanf+0x1e>
 80a79b8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a79bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a79c0:	4601      	mov	r1, r0
 80a79c2:	f000 fe35 	bl	80a8630 <__addsf3>
 80a79c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a79ca:	493e      	ldr	r1, [pc, #248]	; (80a7ac4 <atanf+0x200>)
 80a79cc:	f000 fe30 	bl	80a8630 <__addsf3>
 80a79d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a79d4:	f001 f8f0 	bl	80a8bb8 <__aeabi_fcmpgt>
 80a79d8:	2800      	cmp	r0, #0
 80a79da:	d08a      	beq.n	80a78f2 <atanf+0x2e>
 80a79dc:	4620      	mov	r0, r4
 80a79de:	e780      	b.n	80a78e2 <atanf+0x1e>
 80a79e0:	4839      	ldr	r0, [pc, #228]	; (80a7ac8 <atanf+0x204>)
 80a79e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a79e6:	f000 f877 	bl	80a7ad8 <fabsf>
 80a79ea:	4b38      	ldr	r3, [pc, #224]	; (80a7acc <atanf+0x208>)
 80a79ec:	4604      	mov	r4, r0
 80a79ee:	429d      	cmp	r5, r3
 80a79f0:	dc1a      	bgt.n	80a7a28 <atanf+0x164>
 80a79f2:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80a79f6:	429d      	cmp	r5, r3
 80a79f8:	dd38      	ble.n	80a7a6c <atanf+0x1a8>
 80a79fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a79fe:	f000 fe15 	bl	80a862c <__aeabi_fsub>
 80a7a02:	f04f 0801 	mov.w	r8, #1
 80a7a06:	4603      	mov	r3, r0
 80a7a08:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a7a0c:	4620      	mov	r0, r4
 80a7a0e:	461c      	mov	r4, r3
 80a7a10:	e01c      	b.n	80a7a4c <atanf+0x188>
 80a7a12:	f000 fe0d 	bl	80a8630 <__addsf3>
 80a7a16:	4621      	mov	r1, r4
 80a7a18:	f000 ff12 	bl	80a8840 <__aeabi_fmul>
 80a7a1c:	4601      	mov	r1, r0
 80a7a1e:	4620      	mov	r0, r4
 80a7a20:	f000 fe04 	bl	80a862c <__aeabi_fsub>
 80a7a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a7a28:	4b29      	ldr	r3, [pc, #164]	; (80a7ad0 <atanf+0x20c>)
 80a7a2a:	429d      	cmp	r5, r3
 80a7a2c:	dc16      	bgt.n	80a7a5c <atanf+0x198>
 80a7a2e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80a7a32:	f000 fdfb 	bl	80a862c <__aeabi_fsub>
 80a7a36:	4603      	mov	r3, r0
 80a7a38:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80a7a3c:	4620      	mov	r0, r4
 80a7a3e:	f04f 0802 	mov.w	r8, #2
 80a7a42:	461c      	mov	r4, r3
 80a7a44:	f000 fefc 	bl	80a8840 <__aeabi_fmul>
 80a7a48:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a7a4c:	f000 fdf0 	bl	80a8630 <__addsf3>
 80a7a50:	4601      	mov	r1, r0
 80a7a52:	4620      	mov	r0, r4
 80a7a54:	f000 ffa8 	bl	80a89a8 <__aeabi_fdiv>
 80a7a58:	4604      	mov	r4, r0
 80a7a5a:	e74c      	b.n	80a78f6 <atanf+0x32>
 80a7a5c:	4601      	mov	r1, r0
 80a7a5e:	481d      	ldr	r0, [pc, #116]	; (80a7ad4 <atanf+0x210>)
 80a7a60:	f000 ffa2 	bl	80a89a8 <__aeabi_fdiv>
 80a7a64:	f04f 0803 	mov.w	r8, #3
 80a7a68:	4604      	mov	r4, r0
 80a7a6a:	e744      	b.n	80a78f6 <atanf+0x32>
 80a7a6c:	4601      	mov	r1, r0
 80a7a6e:	f000 fddf 	bl	80a8630 <__addsf3>
 80a7a72:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a7a76:	f000 fdd9 	bl	80a862c <__aeabi_fsub>
 80a7a7a:	f04f 0800 	mov.w	r8, #0
 80a7a7e:	4603      	mov	r3, r0
 80a7a80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80a7a84:	4620      	mov	r0, r4
 80a7a86:	e7c2      	b.n	80a7a0e <atanf+0x14a>
 80a7a88:	3fc90fdb 	.word	0x3fc90fdb
 80a7a8c:	3edfffff 	.word	0x3edfffff
 80a7a90:	3c8569d7 	.word	0x3c8569d7
 80a7a94:	3d4bda59 	.word	0x3d4bda59
 80a7a98:	3d886b35 	.word	0x3d886b35
 80a7a9c:	3dba2e6e 	.word	0x3dba2e6e
 80a7aa0:	3e124925 	.word	0x3e124925
 80a7aa4:	3eaaaaab 	.word	0x3eaaaaab
 80a7aa8:	bd15a221 	.word	0xbd15a221
 80a7aac:	3d6ef16b 	.word	0x3d6ef16b
 80a7ab0:	3d9d8795 	.word	0x3d9d8795
 80a7ab4:	3de38e38 	.word	0x3de38e38
 80a7ab8:	3e4ccccd 	.word	0x3e4ccccd
 80a7abc:	080aa7a0 	.word	0x080aa7a0
 80a7ac0:	080aa790 	.word	0x080aa790
 80a7ac4:	7149f2ca 	.word	0x7149f2ca
 80a7ac8:	bfc90fdb 	.word	0xbfc90fdb
 80a7acc:	3f97ffff 	.word	0x3f97ffff
 80a7ad0:	401bffff 	.word	0x401bffff
 80a7ad4:	bf800000 	.word	0xbf800000

080a7ad8 <fabsf>:
 80a7ad8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80a7adc:	4770      	bx	lr
 80a7ade:	bf00      	nop

080a7ae0 <floorf>:
 80a7ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a7ae2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80a7ae6:	3d7f      	subs	r5, #127	; 0x7f
 80a7ae8:	2d16      	cmp	r5, #22
 80a7aea:	4604      	mov	r4, r0
 80a7aec:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 80a7af0:	dc24      	bgt.n	80a7b3c <floorf+0x5c>
 80a7af2:	2d00      	cmp	r5, #0
 80a7af4:	4606      	mov	r6, r0
 80a7af6:	db14      	blt.n	80a7b22 <floorf+0x42>
 80a7af8:	4f16      	ldr	r7, [pc, #88]	; (80a7b54 <floorf+0x74>)
 80a7afa:	412f      	asrs	r7, r5
 80a7afc:	4238      	tst	r0, r7
 80a7afe:	d01b      	beq.n	80a7b38 <floorf+0x58>
 80a7b00:	4915      	ldr	r1, [pc, #84]	; (80a7b58 <floorf+0x78>)
 80a7b02:	f000 fd95 	bl	80a8630 <__addsf3>
 80a7b06:	2100      	movs	r1, #0
 80a7b08:	f001 f856 	bl	80a8bb8 <__aeabi_fcmpgt>
 80a7b0c:	b1a0      	cbz	r0, 80a7b38 <floorf+0x58>
 80a7b0e:	2c00      	cmp	r4, #0
 80a7b10:	da04      	bge.n	80a7b1c <floorf+0x3c>
 80a7b12:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80a7b16:	fa43 f505 	asr.w	r5, r3, r5
 80a7b1a:	442e      	add	r6, r5
 80a7b1c:	ea26 0007 	bic.w	r0, r6, r7
 80a7b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a7b22:	490d      	ldr	r1, [pc, #52]	; (80a7b58 <floorf+0x78>)
 80a7b24:	f000 fd84 	bl	80a8630 <__addsf3>
 80a7b28:	2100      	movs	r1, #0
 80a7b2a:	f001 f845 	bl	80a8bb8 <__aeabi_fcmpgt>
 80a7b2e:	b118      	cbz	r0, 80a7b38 <floorf+0x58>
 80a7b30:	2c00      	cmp	r4, #0
 80a7b32:	db0a      	blt.n	80a7b4a <floorf+0x6a>
 80a7b34:	2000      	movs	r0, #0
 80a7b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a7b38:	4620      	mov	r0, r4
 80a7b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a7b3c:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80a7b40:	d3fa      	bcc.n	80a7b38 <floorf+0x58>
 80a7b42:	4601      	mov	r1, r0
 80a7b44:	f000 fd74 	bl	80a8630 <__addsf3>
 80a7b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a7b4a:	2f00      	cmp	r7, #0
 80a7b4c:	d0f4      	beq.n	80a7b38 <floorf+0x58>
 80a7b4e:	4803      	ldr	r0, [pc, #12]	; (80a7b5c <floorf+0x7c>)
 80a7b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a7b52:	bf00      	nop
 80a7b54:	007fffff 	.word	0x007fffff
 80a7b58:	7149f2ca 	.word	0x7149f2ca
 80a7b5c:	bf800000 	.word	0xbf800000

080a7b60 <scalbnf>:
 80a7b60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a7b64:	4603      	mov	r3, r0
 80a7b66:	d025      	beq.n	80a7bb4 <scalbnf+0x54>
 80a7b68:	f1bc 4fff 	cmp.w	ip, #2139095040	; 0x7f800000
 80a7b6c:	b510      	push	{r4, lr}
 80a7b6e:	d21d      	bcs.n	80a7bac <scalbnf+0x4c>
 80a7b70:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80a7b74:	460c      	mov	r4, r1
 80a7b76:	4602      	mov	r2, r0
 80a7b78:	d11d      	bne.n	80a7bb6 <scalbnf+0x56>
 80a7b7a:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80a7b7e:	f000 fe5f 	bl	80a8840 <__aeabi_fmul>
 80a7b82:	4a23      	ldr	r2, [pc, #140]	; (80a7c10 <scalbnf+0xb0>)
 80a7b84:	4603      	mov	r3, r0
 80a7b86:	4294      	cmp	r4, r2
 80a7b88:	db33      	blt.n	80a7bf2 <scalbnf+0x92>
 80a7b8a:	f3c0 5cc7 	ubfx	ip, r0, #23, #8
 80a7b8e:	4602      	mov	r2, r0
 80a7b90:	f1ac 0019 	sub.w	r0, ip, #25
 80a7b94:	eb00 0c04 	add.w	ip, r0, r4
 80a7b98:	f1bc 0ffe 	cmp.w	ip, #254	; 0xfe
 80a7b9c:	dd12      	ble.n	80a7bc4 <scalbnf+0x64>
 80a7b9e:	4618      	mov	r0, r3
 80a7ba0:	491c      	ldr	r1, [pc, #112]	; (80a7c14 <scalbnf+0xb4>)
 80a7ba2:	f361 001e 	bfi	r0, r1, #0, #31
 80a7ba6:	f000 fe4b 	bl	80a8840 <__aeabi_fmul>
 80a7baa:	bd10      	pop	{r4, pc}
 80a7bac:	4601      	mov	r1, r0
 80a7bae:	f000 fd3f 	bl	80a8630 <__addsf3>
 80a7bb2:	bd10      	pop	{r4, pc}
 80a7bb4:	4770      	bx	lr
 80a7bb6:	ea4f 50dc 	mov.w	r0, ip, lsr #23
 80a7bba:	eb00 0c04 	add.w	ip, r0, r4
 80a7bbe:	f1bc 0ffe 	cmp.w	ip, #254	; 0xfe
 80a7bc2:	dcec      	bgt.n	80a7b9e <scalbnf+0x3e>
 80a7bc4:	f1bc 0f00 	cmp.w	ip, #0
 80a7bc8:	dc0e      	bgt.n	80a7be8 <scalbnf+0x88>
 80a7bca:	f11c 0f16 	cmn.w	ip, #22
 80a7bce:	da14      	bge.n	80a7bfa <scalbnf+0x9a>
 80a7bd0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80a7bd4:	4618      	mov	r0, r3
 80a7bd6:	4294      	cmp	r4, r2
 80a7bd8:	bfcc      	ite	gt
 80a7bda:	490e      	ldrgt	r1, [pc, #56]	; (80a7c14 <scalbnf+0xb4>)
 80a7bdc:	490e      	ldrle	r1, [pc, #56]	; (80a7c18 <scalbnf+0xb8>)
 80a7bde:	f361 001e 	bfi	r0, r1, #0, #31
 80a7be2:	f000 fe2d 	bl	80a8840 <__aeabi_fmul>
 80a7be6:	bd10      	pop	{r4, pc}
 80a7be8:	f022 40ff 	bic.w	r0, r2, #2139095040	; 0x7f800000
 80a7bec:	ea40 50cc 	orr.w	r0, r0, ip, lsl #23
 80a7bf0:	bd10      	pop	{r4, pc}
 80a7bf2:	4909      	ldr	r1, [pc, #36]	; (80a7c18 <scalbnf+0xb8>)
 80a7bf4:	f000 fe24 	bl	80a8840 <__aeabi_fmul>
 80a7bf8:	bd10      	pop	{r4, pc}
 80a7bfa:	f10c 0019 	add.w	r0, ip, #25
 80a7bfe:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80a7c02:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80a7c06:	ea42 50c0 	orr.w	r0, r2, r0, lsl #23
 80a7c0a:	f000 fe19 	bl	80a8840 <__aeabi_fmul>
 80a7c0e:	bd10      	pop	{r4, pc}
 80a7c10:	ffff3cb0 	.word	0xffff3cb0
 80a7c14:	7149f2ca 	.word	0x7149f2ca
 80a7c18:	0da24260 	.word	0x0da24260

080a7c1c <__aeabi_drsub>:
 80a7c1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a7c20:	e002      	b.n	80a7c28 <__adddf3>
 80a7c22:	bf00      	nop

080a7c24 <__aeabi_dsub>:
 80a7c24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a7c28 <__adddf3>:
 80a7c28:	b530      	push	{r4, r5, lr}
 80a7c2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a7c2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a7c32:	ea94 0f05 	teq	r4, r5
 80a7c36:	bf08      	it	eq
 80a7c38:	ea90 0f02 	teqeq	r0, r2
 80a7c3c:	bf1f      	itttt	ne
 80a7c3e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a7c42:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a7c46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a7c4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a7c4e:	f000 80e2 	beq.w	80a7e16 <__adddf3+0x1ee>
 80a7c52:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a7c56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a7c5a:	bfb8      	it	lt
 80a7c5c:	426d      	neglt	r5, r5
 80a7c5e:	dd0c      	ble.n	80a7c7a <__adddf3+0x52>
 80a7c60:	442c      	add	r4, r5
 80a7c62:	ea80 0202 	eor.w	r2, r0, r2
 80a7c66:	ea81 0303 	eor.w	r3, r1, r3
 80a7c6a:	ea82 0000 	eor.w	r0, r2, r0
 80a7c6e:	ea83 0101 	eor.w	r1, r3, r1
 80a7c72:	ea80 0202 	eor.w	r2, r0, r2
 80a7c76:	ea81 0303 	eor.w	r3, r1, r3
 80a7c7a:	2d36      	cmp	r5, #54	; 0x36
 80a7c7c:	bf88      	it	hi
 80a7c7e:	bd30      	pophi	{r4, r5, pc}
 80a7c80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a7c84:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a7c88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a7c8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a7c90:	d002      	beq.n	80a7c98 <__adddf3+0x70>
 80a7c92:	4240      	negs	r0, r0
 80a7c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a7c98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a7c9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a7ca0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a7ca4:	d002      	beq.n	80a7cac <__adddf3+0x84>
 80a7ca6:	4252      	negs	r2, r2
 80a7ca8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a7cac:	ea94 0f05 	teq	r4, r5
 80a7cb0:	f000 80a7 	beq.w	80a7e02 <__adddf3+0x1da>
 80a7cb4:	f1a4 0401 	sub.w	r4, r4, #1
 80a7cb8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a7cbc:	db0d      	blt.n	80a7cda <__adddf3+0xb2>
 80a7cbe:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a7cc2:	fa22 f205 	lsr.w	r2, r2, r5
 80a7cc6:	1880      	adds	r0, r0, r2
 80a7cc8:	f141 0100 	adc.w	r1, r1, #0
 80a7ccc:	fa03 f20e 	lsl.w	r2, r3, lr
 80a7cd0:	1880      	adds	r0, r0, r2
 80a7cd2:	fa43 f305 	asr.w	r3, r3, r5
 80a7cd6:	4159      	adcs	r1, r3
 80a7cd8:	e00e      	b.n	80a7cf8 <__adddf3+0xd0>
 80a7cda:	f1a5 0520 	sub.w	r5, r5, #32
 80a7cde:	f10e 0e20 	add.w	lr, lr, #32
 80a7ce2:	2a01      	cmp	r2, #1
 80a7ce4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a7ce8:	bf28      	it	cs
 80a7cea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a7cee:	fa43 f305 	asr.w	r3, r3, r5
 80a7cf2:	18c0      	adds	r0, r0, r3
 80a7cf4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a7cf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a7cfc:	d507      	bpl.n	80a7d0e <__adddf3+0xe6>
 80a7cfe:	f04f 0e00 	mov.w	lr, #0
 80a7d02:	f1dc 0c00 	rsbs	ip, ip, #0
 80a7d06:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a7d0a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a7d0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a7d12:	d31b      	bcc.n	80a7d4c <__adddf3+0x124>
 80a7d14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a7d18:	d30c      	bcc.n	80a7d34 <__adddf3+0x10c>
 80a7d1a:	0849      	lsrs	r1, r1, #1
 80a7d1c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a7d20:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a7d24:	f104 0401 	add.w	r4, r4, #1
 80a7d28:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a7d2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a7d30:	f080 809a 	bcs.w	80a7e68 <__adddf3+0x240>
 80a7d34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a7d38:	bf08      	it	eq
 80a7d3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a7d3e:	f150 0000 	adcs.w	r0, r0, #0
 80a7d42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a7d46:	ea41 0105 	orr.w	r1, r1, r5
 80a7d4a:	bd30      	pop	{r4, r5, pc}
 80a7d4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a7d50:	4140      	adcs	r0, r0
 80a7d52:	eb41 0101 	adc.w	r1, r1, r1
 80a7d56:	3c01      	subs	r4, #1
 80a7d58:	bf28      	it	cs
 80a7d5a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a7d5e:	d2e9      	bcs.n	80a7d34 <__adddf3+0x10c>
 80a7d60:	f091 0f00 	teq	r1, #0
 80a7d64:	bf04      	itt	eq
 80a7d66:	4601      	moveq	r1, r0
 80a7d68:	2000      	moveq	r0, #0
 80a7d6a:	fab1 f381 	clz	r3, r1
 80a7d6e:	bf08      	it	eq
 80a7d70:	3320      	addeq	r3, #32
 80a7d72:	f1a3 030b 	sub.w	r3, r3, #11
 80a7d76:	f1b3 0220 	subs.w	r2, r3, #32
 80a7d7a:	da0c      	bge.n	80a7d96 <__adddf3+0x16e>
 80a7d7c:	320c      	adds	r2, #12
 80a7d7e:	dd08      	ble.n	80a7d92 <__adddf3+0x16a>
 80a7d80:	f102 0c14 	add.w	ip, r2, #20
 80a7d84:	f1c2 020c 	rsb	r2, r2, #12
 80a7d88:	fa01 f00c 	lsl.w	r0, r1, ip
 80a7d8c:	fa21 f102 	lsr.w	r1, r1, r2
 80a7d90:	e00c      	b.n	80a7dac <__adddf3+0x184>
 80a7d92:	f102 0214 	add.w	r2, r2, #20
 80a7d96:	bfd8      	it	le
 80a7d98:	f1c2 0c20 	rsble	ip, r2, #32
 80a7d9c:	fa01 f102 	lsl.w	r1, r1, r2
 80a7da0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a7da4:	bfdc      	itt	le
 80a7da6:	ea41 010c 	orrle.w	r1, r1, ip
 80a7daa:	4090      	lslle	r0, r2
 80a7dac:	1ae4      	subs	r4, r4, r3
 80a7dae:	bfa2      	ittt	ge
 80a7db0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a7db4:	4329      	orrge	r1, r5
 80a7db6:	bd30      	popge	{r4, r5, pc}
 80a7db8:	ea6f 0404 	mvn.w	r4, r4
 80a7dbc:	3c1f      	subs	r4, #31
 80a7dbe:	da1c      	bge.n	80a7dfa <__adddf3+0x1d2>
 80a7dc0:	340c      	adds	r4, #12
 80a7dc2:	dc0e      	bgt.n	80a7de2 <__adddf3+0x1ba>
 80a7dc4:	f104 0414 	add.w	r4, r4, #20
 80a7dc8:	f1c4 0220 	rsb	r2, r4, #32
 80a7dcc:	fa20 f004 	lsr.w	r0, r0, r4
 80a7dd0:	fa01 f302 	lsl.w	r3, r1, r2
 80a7dd4:	ea40 0003 	orr.w	r0, r0, r3
 80a7dd8:	fa21 f304 	lsr.w	r3, r1, r4
 80a7ddc:	ea45 0103 	orr.w	r1, r5, r3
 80a7de0:	bd30      	pop	{r4, r5, pc}
 80a7de2:	f1c4 040c 	rsb	r4, r4, #12
 80a7de6:	f1c4 0220 	rsb	r2, r4, #32
 80a7dea:	fa20 f002 	lsr.w	r0, r0, r2
 80a7dee:	fa01 f304 	lsl.w	r3, r1, r4
 80a7df2:	ea40 0003 	orr.w	r0, r0, r3
 80a7df6:	4629      	mov	r1, r5
 80a7df8:	bd30      	pop	{r4, r5, pc}
 80a7dfa:	fa21 f004 	lsr.w	r0, r1, r4
 80a7dfe:	4629      	mov	r1, r5
 80a7e00:	bd30      	pop	{r4, r5, pc}
 80a7e02:	f094 0f00 	teq	r4, #0
 80a7e06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a7e0a:	bf06      	itte	eq
 80a7e0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a7e10:	3401      	addeq	r4, #1
 80a7e12:	3d01      	subne	r5, #1
 80a7e14:	e74e      	b.n	80a7cb4 <__adddf3+0x8c>
 80a7e16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a7e1a:	bf18      	it	ne
 80a7e1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a7e20:	d029      	beq.n	80a7e76 <__adddf3+0x24e>
 80a7e22:	ea94 0f05 	teq	r4, r5
 80a7e26:	bf08      	it	eq
 80a7e28:	ea90 0f02 	teqeq	r0, r2
 80a7e2c:	d005      	beq.n	80a7e3a <__adddf3+0x212>
 80a7e2e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a7e32:	bf04      	itt	eq
 80a7e34:	4619      	moveq	r1, r3
 80a7e36:	4610      	moveq	r0, r2
 80a7e38:	bd30      	pop	{r4, r5, pc}
 80a7e3a:	ea91 0f03 	teq	r1, r3
 80a7e3e:	bf1e      	ittt	ne
 80a7e40:	2100      	movne	r1, #0
 80a7e42:	2000      	movne	r0, #0
 80a7e44:	bd30      	popne	{r4, r5, pc}
 80a7e46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a7e4a:	d105      	bne.n	80a7e58 <__adddf3+0x230>
 80a7e4c:	0040      	lsls	r0, r0, #1
 80a7e4e:	4149      	adcs	r1, r1
 80a7e50:	bf28      	it	cs
 80a7e52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a7e56:	bd30      	pop	{r4, r5, pc}
 80a7e58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a7e5c:	bf3c      	itt	cc
 80a7e5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a7e62:	bd30      	popcc	{r4, r5, pc}
 80a7e64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a7e68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a7e6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a7e70:	f04f 0000 	mov.w	r0, #0
 80a7e74:	bd30      	pop	{r4, r5, pc}
 80a7e76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a7e7a:	bf1a      	itte	ne
 80a7e7c:	4619      	movne	r1, r3
 80a7e7e:	4610      	movne	r0, r2
 80a7e80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a7e84:	bf1c      	itt	ne
 80a7e86:	460b      	movne	r3, r1
 80a7e88:	4602      	movne	r2, r0
 80a7e8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a7e8e:	bf06      	itte	eq
 80a7e90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a7e94:	ea91 0f03 	teqeq	r1, r3
 80a7e98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a7e9c:	bd30      	pop	{r4, r5, pc}
 80a7e9e:	bf00      	nop

080a7ea0 <__aeabi_ui2d>:
 80a7ea0:	f090 0f00 	teq	r0, #0
 80a7ea4:	bf04      	itt	eq
 80a7ea6:	2100      	moveq	r1, #0
 80a7ea8:	4770      	bxeq	lr
 80a7eaa:	b530      	push	{r4, r5, lr}
 80a7eac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a7eb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a7eb4:	f04f 0500 	mov.w	r5, #0
 80a7eb8:	f04f 0100 	mov.w	r1, #0
 80a7ebc:	e750      	b.n	80a7d60 <__adddf3+0x138>
 80a7ebe:	bf00      	nop

080a7ec0 <__aeabi_i2d>:
 80a7ec0:	f090 0f00 	teq	r0, #0
 80a7ec4:	bf04      	itt	eq
 80a7ec6:	2100      	moveq	r1, #0
 80a7ec8:	4770      	bxeq	lr
 80a7eca:	b530      	push	{r4, r5, lr}
 80a7ecc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a7ed0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a7ed4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a7ed8:	bf48      	it	mi
 80a7eda:	4240      	negmi	r0, r0
 80a7edc:	f04f 0100 	mov.w	r1, #0
 80a7ee0:	e73e      	b.n	80a7d60 <__adddf3+0x138>
 80a7ee2:	bf00      	nop

080a7ee4 <__aeabi_f2d>:
 80a7ee4:	0042      	lsls	r2, r0, #1
 80a7ee6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a7eea:	ea4f 0131 	mov.w	r1, r1, rrx
 80a7eee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a7ef2:	bf1f      	itttt	ne
 80a7ef4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a7ef8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a7efc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a7f00:	4770      	bxne	lr
 80a7f02:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a7f06:	bf08      	it	eq
 80a7f08:	4770      	bxeq	lr
 80a7f0a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a7f0e:	bf04      	itt	eq
 80a7f10:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a7f14:	4770      	bxeq	lr
 80a7f16:	b530      	push	{r4, r5, lr}
 80a7f18:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a7f1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a7f20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a7f24:	e71c      	b.n	80a7d60 <__adddf3+0x138>
 80a7f26:	bf00      	nop

080a7f28 <__aeabi_ul2d>:
 80a7f28:	ea50 0201 	orrs.w	r2, r0, r1
 80a7f2c:	bf08      	it	eq
 80a7f2e:	4770      	bxeq	lr
 80a7f30:	b530      	push	{r4, r5, lr}
 80a7f32:	f04f 0500 	mov.w	r5, #0
 80a7f36:	e00a      	b.n	80a7f4e <__aeabi_l2d+0x16>

080a7f38 <__aeabi_l2d>:
 80a7f38:	ea50 0201 	orrs.w	r2, r0, r1
 80a7f3c:	bf08      	it	eq
 80a7f3e:	4770      	bxeq	lr
 80a7f40:	b530      	push	{r4, r5, lr}
 80a7f42:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a7f46:	d502      	bpl.n	80a7f4e <__aeabi_l2d+0x16>
 80a7f48:	4240      	negs	r0, r0
 80a7f4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a7f4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a7f52:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a7f56:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a7f5a:	f43f aed8 	beq.w	80a7d0e <__adddf3+0xe6>
 80a7f5e:	f04f 0203 	mov.w	r2, #3
 80a7f62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a7f66:	bf18      	it	ne
 80a7f68:	3203      	addne	r2, #3
 80a7f6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a7f6e:	bf18      	it	ne
 80a7f70:	3203      	addne	r2, #3
 80a7f72:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a7f76:	f1c2 0320 	rsb	r3, r2, #32
 80a7f7a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a7f7e:	fa20 f002 	lsr.w	r0, r0, r2
 80a7f82:	fa01 fe03 	lsl.w	lr, r1, r3
 80a7f86:	ea40 000e 	orr.w	r0, r0, lr
 80a7f8a:	fa21 f102 	lsr.w	r1, r1, r2
 80a7f8e:	4414      	add	r4, r2
 80a7f90:	e6bd      	b.n	80a7d0e <__adddf3+0xe6>
 80a7f92:	bf00      	nop

080a7f94 <__aeabi_dmul>:
 80a7f94:	b570      	push	{r4, r5, r6, lr}
 80a7f96:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a7f9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a7f9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a7fa2:	bf1d      	ittte	ne
 80a7fa4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a7fa8:	ea94 0f0c 	teqne	r4, ip
 80a7fac:	ea95 0f0c 	teqne	r5, ip
 80a7fb0:	f000 f8de 	bleq	80a8170 <__aeabi_dmul+0x1dc>
 80a7fb4:	442c      	add	r4, r5
 80a7fb6:	ea81 0603 	eor.w	r6, r1, r3
 80a7fba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a7fbe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a7fc2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a7fc6:	bf18      	it	ne
 80a7fc8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a7fcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a7fd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a7fd4:	d038      	beq.n	80a8048 <__aeabi_dmul+0xb4>
 80a7fd6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a7fda:	f04f 0500 	mov.w	r5, #0
 80a7fde:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a7fe2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a7fe6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a7fea:	f04f 0600 	mov.w	r6, #0
 80a7fee:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a7ff2:	f09c 0f00 	teq	ip, #0
 80a7ff6:	bf18      	it	ne
 80a7ff8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a7ffc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a8000:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a8004:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a8008:	d204      	bcs.n	80a8014 <__aeabi_dmul+0x80>
 80a800a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a800e:	416d      	adcs	r5, r5
 80a8010:	eb46 0606 	adc.w	r6, r6, r6
 80a8014:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a8018:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a801c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a8020:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a8024:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a8028:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a802c:	bf88      	it	hi
 80a802e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a8032:	d81e      	bhi.n	80a8072 <__aeabi_dmul+0xde>
 80a8034:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a8038:	bf08      	it	eq
 80a803a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a803e:	f150 0000 	adcs.w	r0, r0, #0
 80a8042:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a8046:	bd70      	pop	{r4, r5, r6, pc}
 80a8048:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a804c:	ea46 0101 	orr.w	r1, r6, r1
 80a8050:	ea40 0002 	orr.w	r0, r0, r2
 80a8054:	ea81 0103 	eor.w	r1, r1, r3
 80a8058:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a805c:	bfc2      	ittt	gt
 80a805e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a8062:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a8066:	bd70      	popgt	{r4, r5, r6, pc}
 80a8068:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a806c:	f04f 0e00 	mov.w	lr, #0
 80a8070:	3c01      	subs	r4, #1
 80a8072:	f300 80ab 	bgt.w	80a81cc <__aeabi_dmul+0x238>
 80a8076:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a807a:	bfde      	ittt	le
 80a807c:	2000      	movle	r0, #0
 80a807e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a8082:	bd70      	pople	{r4, r5, r6, pc}
 80a8084:	f1c4 0400 	rsb	r4, r4, #0
 80a8088:	3c20      	subs	r4, #32
 80a808a:	da35      	bge.n	80a80f8 <__aeabi_dmul+0x164>
 80a808c:	340c      	adds	r4, #12
 80a808e:	dc1b      	bgt.n	80a80c8 <__aeabi_dmul+0x134>
 80a8090:	f104 0414 	add.w	r4, r4, #20
 80a8094:	f1c4 0520 	rsb	r5, r4, #32
 80a8098:	fa00 f305 	lsl.w	r3, r0, r5
 80a809c:	fa20 f004 	lsr.w	r0, r0, r4
 80a80a0:	fa01 f205 	lsl.w	r2, r1, r5
 80a80a4:	ea40 0002 	orr.w	r0, r0, r2
 80a80a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a80ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a80b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a80b4:	fa21 f604 	lsr.w	r6, r1, r4
 80a80b8:	eb42 0106 	adc.w	r1, r2, r6
 80a80bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a80c0:	bf08      	it	eq
 80a80c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a80c6:	bd70      	pop	{r4, r5, r6, pc}
 80a80c8:	f1c4 040c 	rsb	r4, r4, #12
 80a80cc:	f1c4 0520 	rsb	r5, r4, #32
 80a80d0:	fa00 f304 	lsl.w	r3, r0, r4
 80a80d4:	fa20 f005 	lsr.w	r0, r0, r5
 80a80d8:	fa01 f204 	lsl.w	r2, r1, r4
 80a80dc:	ea40 0002 	orr.w	r0, r0, r2
 80a80e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a80e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a80e8:	f141 0100 	adc.w	r1, r1, #0
 80a80ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a80f0:	bf08      	it	eq
 80a80f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a80f6:	bd70      	pop	{r4, r5, r6, pc}
 80a80f8:	f1c4 0520 	rsb	r5, r4, #32
 80a80fc:	fa00 f205 	lsl.w	r2, r0, r5
 80a8100:	ea4e 0e02 	orr.w	lr, lr, r2
 80a8104:	fa20 f304 	lsr.w	r3, r0, r4
 80a8108:	fa01 f205 	lsl.w	r2, r1, r5
 80a810c:	ea43 0302 	orr.w	r3, r3, r2
 80a8110:	fa21 f004 	lsr.w	r0, r1, r4
 80a8114:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a8118:	fa21 f204 	lsr.w	r2, r1, r4
 80a811c:	ea20 0002 	bic.w	r0, r0, r2
 80a8120:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a8124:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a8128:	bf08      	it	eq
 80a812a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a812e:	bd70      	pop	{r4, r5, r6, pc}
 80a8130:	f094 0f00 	teq	r4, #0
 80a8134:	d10f      	bne.n	80a8156 <__aeabi_dmul+0x1c2>
 80a8136:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a813a:	0040      	lsls	r0, r0, #1
 80a813c:	eb41 0101 	adc.w	r1, r1, r1
 80a8140:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a8144:	bf08      	it	eq
 80a8146:	3c01      	subeq	r4, #1
 80a8148:	d0f7      	beq.n	80a813a <__aeabi_dmul+0x1a6>
 80a814a:	ea41 0106 	orr.w	r1, r1, r6
 80a814e:	f095 0f00 	teq	r5, #0
 80a8152:	bf18      	it	ne
 80a8154:	4770      	bxne	lr
 80a8156:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a815a:	0052      	lsls	r2, r2, #1
 80a815c:	eb43 0303 	adc.w	r3, r3, r3
 80a8160:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a8164:	bf08      	it	eq
 80a8166:	3d01      	subeq	r5, #1
 80a8168:	d0f7      	beq.n	80a815a <__aeabi_dmul+0x1c6>
 80a816a:	ea43 0306 	orr.w	r3, r3, r6
 80a816e:	4770      	bx	lr
 80a8170:	ea94 0f0c 	teq	r4, ip
 80a8174:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a8178:	bf18      	it	ne
 80a817a:	ea95 0f0c 	teqne	r5, ip
 80a817e:	d00c      	beq.n	80a819a <__aeabi_dmul+0x206>
 80a8180:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a8184:	bf18      	it	ne
 80a8186:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a818a:	d1d1      	bne.n	80a8130 <__aeabi_dmul+0x19c>
 80a818c:	ea81 0103 	eor.w	r1, r1, r3
 80a8190:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a8194:	f04f 0000 	mov.w	r0, #0
 80a8198:	bd70      	pop	{r4, r5, r6, pc}
 80a819a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a819e:	bf06      	itte	eq
 80a81a0:	4610      	moveq	r0, r2
 80a81a2:	4619      	moveq	r1, r3
 80a81a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a81a8:	d019      	beq.n	80a81de <__aeabi_dmul+0x24a>
 80a81aa:	ea94 0f0c 	teq	r4, ip
 80a81ae:	d102      	bne.n	80a81b6 <__aeabi_dmul+0x222>
 80a81b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a81b4:	d113      	bne.n	80a81de <__aeabi_dmul+0x24a>
 80a81b6:	ea95 0f0c 	teq	r5, ip
 80a81ba:	d105      	bne.n	80a81c8 <__aeabi_dmul+0x234>
 80a81bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a81c0:	bf1c      	itt	ne
 80a81c2:	4610      	movne	r0, r2
 80a81c4:	4619      	movne	r1, r3
 80a81c6:	d10a      	bne.n	80a81de <__aeabi_dmul+0x24a>
 80a81c8:	ea81 0103 	eor.w	r1, r1, r3
 80a81cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a81d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a81d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a81d8:	f04f 0000 	mov.w	r0, #0
 80a81dc:	bd70      	pop	{r4, r5, r6, pc}
 80a81de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a81e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a81e6:	bd70      	pop	{r4, r5, r6, pc}

080a81e8 <__aeabi_ddiv>:
 80a81e8:	b570      	push	{r4, r5, r6, lr}
 80a81ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a81ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a81f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a81f6:	bf1d      	ittte	ne
 80a81f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a81fc:	ea94 0f0c 	teqne	r4, ip
 80a8200:	ea95 0f0c 	teqne	r5, ip
 80a8204:	f000 f8a7 	bleq	80a8356 <__aeabi_ddiv+0x16e>
 80a8208:	eba4 0405 	sub.w	r4, r4, r5
 80a820c:	ea81 0e03 	eor.w	lr, r1, r3
 80a8210:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a8214:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a8218:	f000 8088 	beq.w	80a832c <__aeabi_ddiv+0x144>
 80a821c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a8220:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a8224:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a8228:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a822c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a8230:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a8234:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a8238:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a823c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a8240:	429d      	cmp	r5, r3
 80a8242:	bf08      	it	eq
 80a8244:	4296      	cmpeq	r6, r2
 80a8246:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a824a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a824e:	d202      	bcs.n	80a8256 <__aeabi_ddiv+0x6e>
 80a8250:	085b      	lsrs	r3, r3, #1
 80a8252:	ea4f 0232 	mov.w	r2, r2, rrx
 80a8256:	1ab6      	subs	r6, r6, r2
 80a8258:	eb65 0503 	sbc.w	r5, r5, r3
 80a825c:	085b      	lsrs	r3, r3, #1
 80a825e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a8262:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a8266:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a826a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a826e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a8272:	bf22      	ittt	cs
 80a8274:	1ab6      	subcs	r6, r6, r2
 80a8276:	4675      	movcs	r5, lr
 80a8278:	ea40 000c 	orrcs.w	r0, r0, ip
 80a827c:	085b      	lsrs	r3, r3, #1
 80a827e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a8282:	ebb6 0e02 	subs.w	lr, r6, r2
 80a8286:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a828a:	bf22      	ittt	cs
 80a828c:	1ab6      	subcs	r6, r6, r2
 80a828e:	4675      	movcs	r5, lr
 80a8290:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a8294:	085b      	lsrs	r3, r3, #1
 80a8296:	ea4f 0232 	mov.w	r2, r2, rrx
 80a829a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a829e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a82a2:	bf22      	ittt	cs
 80a82a4:	1ab6      	subcs	r6, r6, r2
 80a82a6:	4675      	movcs	r5, lr
 80a82a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a82ac:	085b      	lsrs	r3, r3, #1
 80a82ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80a82b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a82b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a82ba:	bf22      	ittt	cs
 80a82bc:	1ab6      	subcs	r6, r6, r2
 80a82be:	4675      	movcs	r5, lr
 80a82c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a82c4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a82c8:	d018      	beq.n	80a82fc <__aeabi_ddiv+0x114>
 80a82ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a82ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a82d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a82d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a82da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a82de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a82e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a82e6:	d1c0      	bne.n	80a826a <__aeabi_ddiv+0x82>
 80a82e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a82ec:	d10b      	bne.n	80a8306 <__aeabi_ddiv+0x11e>
 80a82ee:	ea41 0100 	orr.w	r1, r1, r0
 80a82f2:	f04f 0000 	mov.w	r0, #0
 80a82f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a82fa:	e7b6      	b.n	80a826a <__aeabi_ddiv+0x82>
 80a82fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a8300:	bf04      	itt	eq
 80a8302:	4301      	orreq	r1, r0
 80a8304:	2000      	moveq	r0, #0
 80a8306:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a830a:	bf88      	it	hi
 80a830c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a8310:	f63f aeaf 	bhi.w	80a8072 <__aeabi_dmul+0xde>
 80a8314:	ebb5 0c03 	subs.w	ip, r5, r3
 80a8318:	bf04      	itt	eq
 80a831a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a831e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a8322:	f150 0000 	adcs.w	r0, r0, #0
 80a8326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a832a:	bd70      	pop	{r4, r5, r6, pc}
 80a832c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a8330:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a8334:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a8338:	bfc2      	ittt	gt
 80a833a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a833e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a8342:	bd70      	popgt	{r4, r5, r6, pc}
 80a8344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a8348:	f04f 0e00 	mov.w	lr, #0
 80a834c:	3c01      	subs	r4, #1
 80a834e:	e690      	b.n	80a8072 <__aeabi_dmul+0xde>
 80a8350:	ea45 0e06 	orr.w	lr, r5, r6
 80a8354:	e68d      	b.n	80a8072 <__aeabi_dmul+0xde>
 80a8356:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a835a:	ea94 0f0c 	teq	r4, ip
 80a835e:	bf08      	it	eq
 80a8360:	ea95 0f0c 	teqeq	r5, ip
 80a8364:	f43f af3b 	beq.w	80a81de <__aeabi_dmul+0x24a>
 80a8368:	ea94 0f0c 	teq	r4, ip
 80a836c:	d10a      	bne.n	80a8384 <__aeabi_ddiv+0x19c>
 80a836e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a8372:	f47f af34 	bne.w	80a81de <__aeabi_dmul+0x24a>
 80a8376:	ea95 0f0c 	teq	r5, ip
 80a837a:	f47f af25 	bne.w	80a81c8 <__aeabi_dmul+0x234>
 80a837e:	4610      	mov	r0, r2
 80a8380:	4619      	mov	r1, r3
 80a8382:	e72c      	b.n	80a81de <__aeabi_dmul+0x24a>
 80a8384:	ea95 0f0c 	teq	r5, ip
 80a8388:	d106      	bne.n	80a8398 <__aeabi_ddiv+0x1b0>
 80a838a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a838e:	f43f aefd 	beq.w	80a818c <__aeabi_dmul+0x1f8>
 80a8392:	4610      	mov	r0, r2
 80a8394:	4619      	mov	r1, r3
 80a8396:	e722      	b.n	80a81de <__aeabi_dmul+0x24a>
 80a8398:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a839c:	bf18      	it	ne
 80a839e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a83a2:	f47f aec5 	bne.w	80a8130 <__aeabi_dmul+0x19c>
 80a83a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a83aa:	f47f af0d 	bne.w	80a81c8 <__aeabi_dmul+0x234>
 80a83ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a83b2:	f47f aeeb 	bne.w	80a818c <__aeabi_dmul+0x1f8>
 80a83b6:	e712      	b.n	80a81de <__aeabi_dmul+0x24a>

080a83b8 <__gedf2>:
 80a83b8:	f04f 3cff 	mov.w	ip, #4294967295
 80a83bc:	e006      	b.n	80a83cc <__cmpdf2+0x4>
 80a83be:	bf00      	nop

080a83c0 <__ledf2>:
 80a83c0:	f04f 0c01 	mov.w	ip, #1
 80a83c4:	e002      	b.n	80a83cc <__cmpdf2+0x4>
 80a83c6:	bf00      	nop

080a83c8 <__cmpdf2>:
 80a83c8:	f04f 0c01 	mov.w	ip, #1
 80a83cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a83d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a83d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a83d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a83dc:	bf18      	it	ne
 80a83de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a83e2:	d01b      	beq.n	80a841c <__cmpdf2+0x54>
 80a83e4:	b001      	add	sp, #4
 80a83e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a83ea:	bf0c      	ite	eq
 80a83ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a83f0:	ea91 0f03 	teqne	r1, r3
 80a83f4:	bf02      	ittt	eq
 80a83f6:	ea90 0f02 	teqeq	r0, r2
 80a83fa:	2000      	moveq	r0, #0
 80a83fc:	4770      	bxeq	lr
 80a83fe:	f110 0f00 	cmn.w	r0, #0
 80a8402:	ea91 0f03 	teq	r1, r3
 80a8406:	bf58      	it	pl
 80a8408:	4299      	cmppl	r1, r3
 80a840a:	bf08      	it	eq
 80a840c:	4290      	cmpeq	r0, r2
 80a840e:	bf2c      	ite	cs
 80a8410:	17d8      	asrcs	r0, r3, #31
 80a8412:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a8416:	f040 0001 	orr.w	r0, r0, #1
 80a841a:	4770      	bx	lr
 80a841c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a8420:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a8424:	d102      	bne.n	80a842c <__cmpdf2+0x64>
 80a8426:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a842a:	d107      	bne.n	80a843c <__cmpdf2+0x74>
 80a842c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a8430:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a8434:	d1d6      	bne.n	80a83e4 <__cmpdf2+0x1c>
 80a8436:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a843a:	d0d3      	beq.n	80a83e4 <__cmpdf2+0x1c>
 80a843c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a8440:	4770      	bx	lr
 80a8442:	bf00      	nop

080a8444 <__aeabi_cdrcmple>:
 80a8444:	4684      	mov	ip, r0
 80a8446:	4610      	mov	r0, r2
 80a8448:	4662      	mov	r2, ip
 80a844a:	468c      	mov	ip, r1
 80a844c:	4619      	mov	r1, r3
 80a844e:	4663      	mov	r3, ip
 80a8450:	e000      	b.n	80a8454 <__aeabi_cdcmpeq>
 80a8452:	bf00      	nop

080a8454 <__aeabi_cdcmpeq>:
 80a8454:	b501      	push	{r0, lr}
 80a8456:	f7ff ffb7 	bl	80a83c8 <__cmpdf2>
 80a845a:	2800      	cmp	r0, #0
 80a845c:	bf48      	it	mi
 80a845e:	f110 0f00 	cmnmi.w	r0, #0
 80a8462:	bd01      	pop	{r0, pc}

080a8464 <__aeabi_dcmpeq>:
 80a8464:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a8468:	f7ff fff4 	bl	80a8454 <__aeabi_cdcmpeq>
 80a846c:	bf0c      	ite	eq
 80a846e:	2001      	moveq	r0, #1
 80a8470:	2000      	movne	r0, #0
 80a8472:	f85d fb08 	ldr.w	pc, [sp], #8
 80a8476:	bf00      	nop

080a8478 <__aeabi_dcmplt>:
 80a8478:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a847c:	f7ff ffea 	bl	80a8454 <__aeabi_cdcmpeq>
 80a8480:	bf34      	ite	cc
 80a8482:	2001      	movcc	r0, #1
 80a8484:	2000      	movcs	r0, #0
 80a8486:	f85d fb08 	ldr.w	pc, [sp], #8
 80a848a:	bf00      	nop

080a848c <__aeabi_dcmple>:
 80a848c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a8490:	f7ff ffe0 	bl	80a8454 <__aeabi_cdcmpeq>
 80a8494:	bf94      	ite	ls
 80a8496:	2001      	movls	r0, #1
 80a8498:	2000      	movhi	r0, #0
 80a849a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a849e:	bf00      	nop

080a84a0 <__aeabi_dcmpge>:
 80a84a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a84a4:	f7ff ffce 	bl	80a8444 <__aeabi_cdrcmple>
 80a84a8:	bf94      	ite	ls
 80a84aa:	2001      	movls	r0, #1
 80a84ac:	2000      	movhi	r0, #0
 80a84ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a84b2:	bf00      	nop

080a84b4 <__aeabi_dcmpgt>:
 80a84b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a84b8:	f7ff ffc4 	bl	80a8444 <__aeabi_cdrcmple>
 80a84bc:	bf34      	ite	cc
 80a84be:	2001      	movcc	r0, #1
 80a84c0:	2000      	movcs	r0, #0
 80a84c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a84c6:	bf00      	nop

080a84c8 <__aeabi_dcmpun>:
 80a84c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a84cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a84d0:	d102      	bne.n	80a84d8 <__aeabi_dcmpun+0x10>
 80a84d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a84d6:	d10a      	bne.n	80a84ee <__aeabi_dcmpun+0x26>
 80a84d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a84dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a84e0:	d102      	bne.n	80a84e8 <__aeabi_dcmpun+0x20>
 80a84e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a84e6:	d102      	bne.n	80a84ee <__aeabi_dcmpun+0x26>
 80a84e8:	f04f 0000 	mov.w	r0, #0
 80a84ec:	4770      	bx	lr
 80a84ee:	f04f 0001 	mov.w	r0, #1
 80a84f2:	4770      	bx	lr

080a84f4 <__aeabi_d2iz>:
 80a84f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a84f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a84fc:	d215      	bcs.n	80a852a <__aeabi_d2iz+0x36>
 80a84fe:	d511      	bpl.n	80a8524 <__aeabi_d2iz+0x30>
 80a8500:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a8504:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a8508:	d912      	bls.n	80a8530 <__aeabi_d2iz+0x3c>
 80a850a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a850e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a8512:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a8516:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a851a:	fa23 f002 	lsr.w	r0, r3, r2
 80a851e:	bf18      	it	ne
 80a8520:	4240      	negne	r0, r0
 80a8522:	4770      	bx	lr
 80a8524:	f04f 0000 	mov.w	r0, #0
 80a8528:	4770      	bx	lr
 80a852a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a852e:	d105      	bne.n	80a853c <__aeabi_d2iz+0x48>
 80a8530:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a8534:	bf08      	it	eq
 80a8536:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a853a:	4770      	bx	lr
 80a853c:	f04f 0000 	mov.w	r0, #0
 80a8540:	4770      	bx	lr
 80a8542:	bf00      	nop

080a8544 <__aeabi_d2uiz>:
 80a8544:	004a      	lsls	r2, r1, #1
 80a8546:	d211      	bcs.n	80a856c <__aeabi_d2uiz+0x28>
 80a8548:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a854c:	d211      	bcs.n	80a8572 <__aeabi_d2uiz+0x2e>
 80a854e:	d50d      	bpl.n	80a856c <__aeabi_d2uiz+0x28>
 80a8550:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a8554:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a8558:	d40e      	bmi.n	80a8578 <__aeabi_d2uiz+0x34>
 80a855a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a855e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a8562:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a8566:	fa23 f002 	lsr.w	r0, r3, r2
 80a856a:	4770      	bx	lr
 80a856c:	f04f 0000 	mov.w	r0, #0
 80a8570:	4770      	bx	lr
 80a8572:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a8576:	d102      	bne.n	80a857e <__aeabi_d2uiz+0x3a>
 80a8578:	f04f 30ff 	mov.w	r0, #4294967295
 80a857c:	4770      	bx	lr
 80a857e:	f04f 0000 	mov.w	r0, #0
 80a8582:	4770      	bx	lr

080a8584 <__aeabi_d2f>:
 80a8584:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a8588:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a858c:	bf24      	itt	cs
 80a858e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a8592:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a8596:	d90d      	bls.n	80a85b4 <__aeabi_d2f+0x30>
 80a8598:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a859c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a85a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a85a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a85a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a85ac:	bf08      	it	eq
 80a85ae:	f020 0001 	biceq.w	r0, r0, #1
 80a85b2:	4770      	bx	lr
 80a85b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a85b8:	d121      	bne.n	80a85fe <__aeabi_d2f+0x7a>
 80a85ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a85be:	bfbc      	itt	lt
 80a85c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a85c4:	4770      	bxlt	lr
 80a85c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a85ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a85ce:	f1c2 0218 	rsb	r2, r2, #24
 80a85d2:	f1c2 0c20 	rsb	ip, r2, #32
 80a85d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80a85da:	fa20 f002 	lsr.w	r0, r0, r2
 80a85de:	bf18      	it	ne
 80a85e0:	f040 0001 	orrne.w	r0, r0, #1
 80a85e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a85e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a85ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a85f0:	ea40 000c 	orr.w	r0, r0, ip
 80a85f4:	fa23 f302 	lsr.w	r3, r3, r2
 80a85f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a85fc:	e7cc      	b.n	80a8598 <__aeabi_d2f+0x14>
 80a85fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a8602:	d107      	bne.n	80a8614 <__aeabi_d2f+0x90>
 80a8604:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a8608:	bf1e      	ittt	ne
 80a860a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a860e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a8612:	4770      	bxne	lr
 80a8614:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a8618:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a861c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a8620:	4770      	bx	lr
 80a8622:	bf00      	nop

080a8624 <__aeabi_frsub>:
 80a8624:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a8628:	e002      	b.n	80a8630 <__addsf3>
 80a862a:	bf00      	nop

080a862c <__aeabi_fsub>:
 80a862c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a8630 <__addsf3>:
 80a8630:	0042      	lsls	r2, r0, #1
 80a8632:	bf1f      	itttt	ne
 80a8634:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a8638:	ea92 0f03 	teqne	r2, r3
 80a863c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a8640:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a8644:	d06a      	beq.n	80a871c <__addsf3+0xec>
 80a8646:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a864a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a864e:	bfc1      	itttt	gt
 80a8650:	18d2      	addgt	r2, r2, r3
 80a8652:	4041      	eorgt	r1, r0
 80a8654:	4048      	eorgt	r0, r1
 80a8656:	4041      	eorgt	r1, r0
 80a8658:	bfb8      	it	lt
 80a865a:	425b      	neglt	r3, r3
 80a865c:	2b19      	cmp	r3, #25
 80a865e:	bf88      	it	hi
 80a8660:	4770      	bxhi	lr
 80a8662:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a8666:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a866a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a866e:	bf18      	it	ne
 80a8670:	4240      	negne	r0, r0
 80a8672:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a8676:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a867a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a867e:	bf18      	it	ne
 80a8680:	4249      	negne	r1, r1
 80a8682:	ea92 0f03 	teq	r2, r3
 80a8686:	d03f      	beq.n	80a8708 <__addsf3+0xd8>
 80a8688:	f1a2 0201 	sub.w	r2, r2, #1
 80a868c:	fa41 fc03 	asr.w	ip, r1, r3
 80a8690:	eb10 000c 	adds.w	r0, r0, ip
 80a8694:	f1c3 0320 	rsb	r3, r3, #32
 80a8698:	fa01 f103 	lsl.w	r1, r1, r3
 80a869c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a86a0:	d502      	bpl.n	80a86a8 <__addsf3+0x78>
 80a86a2:	4249      	negs	r1, r1
 80a86a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a86a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a86ac:	d313      	bcc.n	80a86d6 <__addsf3+0xa6>
 80a86ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a86b2:	d306      	bcc.n	80a86c2 <__addsf3+0x92>
 80a86b4:	0840      	lsrs	r0, r0, #1
 80a86b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a86ba:	f102 0201 	add.w	r2, r2, #1
 80a86be:	2afe      	cmp	r2, #254	; 0xfe
 80a86c0:	d251      	bcs.n	80a8766 <__addsf3+0x136>
 80a86c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a86c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a86ca:	bf08      	it	eq
 80a86cc:	f020 0001 	biceq.w	r0, r0, #1
 80a86d0:	ea40 0003 	orr.w	r0, r0, r3
 80a86d4:	4770      	bx	lr
 80a86d6:	0049      	lsls	r1, r1, #1
 80a86d8:	eb40 0000 	adc.w	r0, r0, r0
 80a86dc:	3a01      	subs	r2, #1
 80a86de:	bf28      	it	cs
 80a86e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a86e4:	d2ed      	bcs.n	80a86c2 <__addsf3+0x92>
 80a86e6:	fab0 fc80 	clz	ip, r0
 80a86ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80a86ee:	ebb2 020c 	subs.w	r2, r2, ip
 80a86f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80a86f6:	bfaa      	itet	ge
 80a86f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a86fc:	4252      	neglt	r2, r2
 80a86fe:	4318      	orrge	r0, r3
 80a8700:	bfbc      	itt	lt
 80a8702:	40d0      	lsrlt	r0, r2
 80a8704:	4318      	orrlt	r0, r3
 80a8706:	4770      	bx	lr
 80a8708:	f092 0f00 	teq	r2, #0
 80a870c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a8710:	bf06      	itte	eq
 80a8712:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a8716:	3201      	addeq	r2, #1
 80a8718:	3b01      	subne	r3, #1
 80a871a:	e7b5      	b.n	80a8688 <__addsf3+0x58>
 80a871c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a8720:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a8724:	bf18      	it	ne
 80a8726:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a872a:	d021      	beq.n	80a8770 <__addsf3+0x140>
 80a872c:	ea92 0f03 	teq	r2, r3
 80a8730:	d004      	beq.n	80a873c <__addsf3+0x10c>
 80a8732:	f092 0f00 	teq	r2, #0
 80a8736:	bf08      	it	eq
 80a8738:	4608      	moveq	r0, r1
 80a873a:	4770      	bx	lr
 80a873c:	ea90 0f01 	teq	r0, r1
 80a8740:	bf1c      	itt	ne
 80a8742:	2000      	movne	r0, #0
 80a8744:	4770      	bxne	lr
 80a8746:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a874a:	d104      	bne.n	80a8756 <__addsf3+0x126>
 80a874c:	0040      	lsls	r0, r0, #1
 80a874e:	bf28      	it	cs
 80a8750:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a8754:	4770      	bx	lr
 80a8756:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a875a:	bf3c      	itt	cc
 80a875c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a8760:	4770      	bxcc	lr
 80a8762:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a8766:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a876a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a876e:	4770      	bx	lr
 80a8770:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a8774:	bf16      	itet	ne
 80a8776:	4608      	movne	r0, r1
 80a8778:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a877c:	4601      	movne	r1, r0
 80a877e:	0242      	lsls	r2, r0, #9
 80a8780:	bf06      	itte	eq
 80a8782:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a8786:	ea90 0f01 	teqeq	r0, r1
 80a878a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a878e:	4770      	bx	lr

080a8790 <__aeabi_ui2f>:
 80a8790:	f04f 0300 	mov.w	r3, #0
 80a8794:	e004      	b.n	80a87a0 <__aeabi_i2f+0x8>
 80a8796:	bf00      	nop

080a8798 <__aeabi_i2f>:
 80a8798:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a879c:	bf48      	it	mi
 80a879e:	4240      	negmi	r0, r0
 80a87a0:	ea5f 0c00 	movs.w	ip, r0
 80a87a4:	bf08      	it	eq
 80a87a6:	4770      	bxeq	lr
 80a87a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a87ac:	4601      	mov	r1, r0
 80a87ae:	f04f 0000 	mov.w	r0, #0
 80a87b2:	e01c      	b.n	80a87ee <__aeabi_l2f+0x2a>

080a87b4 <__aeabi_ul2f>:
 80a87b4:	ea50 0201 	orrs.w	r2, r0, r1
 80a87b8:	bf08      	it	eq
 80a87ba:	4770      	bxeq	lr
 80a87bc:	f04f 0300 	mov.w	r3, #0
 80a87c0:	e00a      	b.n	80a87d8 <__aeabi_l2f+0x14>
 80a87c2:	bf00      	nop

080a87c4 <__aeabi_l2f>:
 80a87c4:	ea50 0201 	orrs.w	r2, r0, r1
 80a87c8:	bf08      	it	eq
 80a87ca:	4770      	bxeq	lr
 80a87cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a87d0:	d502      	bpl.n	80a87d8 <__aeabi_l2f+0x14>
 80a87d2:	4240      	negs	r0, r0
 80a87d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a87d8:	ea5f 0c01 	movs.w	ip, r1
 80a87dc:	bf02      	ittt	eq
 80a87de:	4684      	moveq	ip, r0
 80a87e0:	4601      	moveq	r1, r0
 80a87e2:	2000      	moveq	r0, #0
 80a87e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a87e8:	bf08      	it	eq
 80a87ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a87ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a87f2:	fabc f28c 	clz	r2, ip
 80a87f6:	3a08      	subs	r2, #8
 80a87f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a87fc:	db10      	blt.n	80a8820 <__aeabi_l2f+0x5c>
 80a87fe:	fa01 fc02 	lsl.w	ip, r1, r2
 80a8802:	4463      	add	r3, ip
 80a8804:	fa00 fc02 	lsl.w	ip, r0, r2
 80a8808:	f1c2 0220 	rsb	r2, r2, #32
 80a880c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a8810:	fa20 f202 	lsr.w	r2, r0, r2
 80a8814:	eb43 0002 	adc.w	r0, r3, r2
 80a8818:	bf08      	it	eq
 80a881a:	f020 0001 	biceq.w	r0, r0, #1
 80a881e:	4770      	bx	lr
 80a8820:	f102 0220 	add.w	r2, r2, #32
 80a8824:	fa01 fc02 	lsl.w	ip, r1, r2
 80a8828:	f1c2 0220 	rsb	r2, r2, #32
 80a882c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a8830:	fa21 f202 	lsr.w	r2, r1, r2
 80a8834:	eb43 0002 	adc.w	r0, r3, r2
 80a8838:	bf08      	it	eq
 80a883a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a883e:	4770      	bx	lr

080a8840 <__aeabi_fmul>:
 80a8840:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a8844:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a8848:	bf1e      	ittt	ne
 80a884a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a884e:	ea92 0f0c 	teqne	r2, ip
 80a8852:	ea93 0f0c 	teqne	r3, ip
 80a8856:	d06f      	beq.n	80a8938 <__aeabi_fmul+0xf8>
 80a8858:	441a      	add	r2, r3
 80a885a:	ea80 0c01 	eor.w	ip, r0, r1
 80a885e:	0240      	lsls	r0, r0, #9
 80a8860:	bf18      	it	ne
 80a8862:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a8866:	d01e      	beq.n	80a88a6 <__aeabi_fmul+0x66>
 80a8868:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a886c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a8870:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a8874:	fba0 3101 	umull	r3, r1, r0, r1
 80a8878:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a887c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a8880:	bf3e      	ittt	cc
 80a8882:	0049      	lslcc	r1, r1, #1
 80a8884:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a8888:	005b      	lslcc	r3, r3, #1
 80a888a:	ea40 0001 	orr.w	r0, r0, r1
 80a888e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a8892:	2afd      	cmp	r2, #253	; 0xfd
 80a8894:	d81d      	bhi.n	80a88d2 <__aeabi_fmul+0x92>
 80a8896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a889a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a889e:	bf08      	it	eq
 80a88a0:	f020 0001 	biceq.w	r0, r0, #1
 80a88a4:	4770      	bx	lr
 80a88a6:	f090 0f00 	teq	r0, #0
 80a88aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a88ae:	bf08      	it	eq
 80a88b0:	0249      	lsleq	r1, r1, #9
 80a88b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a88b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a88ba:	3a7f      	subs	r2, #127	; 0x7f
 80a88bc:	bfc2      	ittt	gt
 80a88be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a88c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a88c6:	4770      	bxgt	lr
 80a88c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a88cc:	f04f 0300 	mov.w	r3, #0
 80a88d0:	3a01      	subs	r2, #1
 80a88d2:	dc5d      	bgt.n	80a8990 <__aeabi_fmul+0x150>
 80a88d4:	f112 0f19 	cmn.w	r2, #25
 80a88d8:	bfdc      	itt	le
 80a88da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a88de:	4770      	bxle	lr
 80a88e0:	f1c2 0200 	rsb	r2, r2, #0
 80a88e4:	0041      	lsls	r1, r0, #1
 80a88e6:	fa21 f102 	lsr.w	r1, r1, r2
 80a88ea:	f1c2 0220 	rsb	r2, r2, #32
 80a88ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80a88f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80a88f6:	f140 0000 	adc.w	r0, r0, #0
 80a88fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a88fe:	bf08      	it	eq
 80a8900:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a8904:	4770      	bx	lr
 80a8906:	f092 0f00 	teq	r2, #0
 80a890a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a890e:	bf02      	ittt	eq
 80a8910:	0040      	lsleq	r0, r0, #1
 80a8912:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a8916:	3a01      	subeq	r2, #1
 80a8918:	d0f9      	beq.n	80a890e <__aeabi_fmul+0xce>
 80a891a:	ea40 000c 	orr.w	r0, r0, ip
 80a891e:	f093 0f00 	teq	r3, #0
 80a8922:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a8926:	bf02      	ittt	eq
 80a8928:	0049      	lsleq	r1, r1, #1
 80a892a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a892e:	3b01      	subeq	r3, #1
 80a8930:	d0f9      	beq.n	80a8926 <__aeabi_fmul+0xe6>
 80a8932:	ea41 010c 	orr.w	r1, r1, ip
 80a8936:	e78f      	b.n	80a8858 <__aeabi_fmul+0x18>
 80a8938:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a893c:	ea92 0f0c 	teq	r2, ip
 80a8940:	bf18      	it	ne
 80a8942:	ea93 0f0c 	teqne	r3, ip
 80a8946:	d00a      	beq.n	80a895e <__aeabi_fmul+0x11e>
 80a8948:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a894c:	bf18      	it	ne
 80a894e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a8952:	d1d8      	bne.n	80a8906 <__aeabi_fmul+0xc6>
 80a8954:	ea80 0001 	eor.w	r0, r0, r1
 80a8958:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a895c:	4770      	bx	lr
 80a895e:	f090 0f00 	teq	r0, #0
 80a8962:	bf17      	itett	ne
 80a8964:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a8968:	4608      	moveq	r0, r1
 80a896a:	f091 0f00 	teqne	r1, #0
 80a896e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a8972:	d014      	beq.n	80a899e <__aeabi_fmul+0x15e>
 80a8974:	ea92 0f0c 	teq	r2, ip
 80a8978:	d101      	bne.n	80a897e <__aeabi_fmul+0x13e>
 80a897a:	0242      	lsls	r2, r0, #9
 80a897c:	d10f      	bne.n	80a899e <__aeabi_fmul+0x15e>
 80a897e:	ea93 0f0c 	teq	r3, ip
 80a8982:	d103      	bne.n	80a898c <__aeabi_fmul+0x14c>
 80a8984:	024b      	lsls	r3, r1, #9
 80a8986:	bf18      	it	ne
 80a8988:	4608      	movne	r0, r1
 80a898a:	d108      	bne.n	80a899e <__aeabi_fmul+0x15e>
 80a898c:	ea80 0001 	eor.w	r0, r0, r1
 80a8990:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a8994:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a8998:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a899c:	4770      	bx	lr
 80a899e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a89a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a89a6:	4770      	bx	lr

080a89a8 <__aeabi_fdiv>:
 80a89a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a89ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a89b0:	bf1e      	ittt	ne
 80a89b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a89b6:	ea92 0f0c 	teqne	r2, ip
 80a89ba:	ea93 0f0c 	teqne	r3, ip
 80a89be:	d069      	beq.n	80a8a94 <__aeabi_fdiv+0xec>
 80a89c0:	eba2 0203 	sub.w	r2, r2, r3
 80a89c4:	ea80 0c01 	eor.w	ip, r0, r1
 80a89c8:	0249      	lsls	r1, r1, #9
 80a89ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a89ce:	d037      	beq.n	80a8a40 <__aeabi_fdiv+0x98>
 80a89d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a89d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a89d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a89dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a89e0:	428b      	cmp	r3, r1
 80a89e2:	bf38      	it	cc
 80a89e4:	005b      	lslcc	r3, r3, #1
 80a89e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a89ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a89ee:	428b      	cmp	r3, r1
 80a89f0:	bf24      	itt	cs
 80a89f2:	1a5b      	subcs	r3, r3, r1
 80a89f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a89f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a89fc:	bf24      	itt	cs
 80a89fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a8a02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a8a06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a8a0a:	bf24      	itt	cs
 80a8a0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a8a10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a8a14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a8a18:	bf24      	itt	cs
 80a8a1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a8a1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a8a22:	011b      	lsls	r3, r3, #4
 80a8a24:	bf18      	it	ne
 80a8a26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a8a2a:	d1e0      	bne.n	80a89ee <__aeabi_fdiv+0x46>
 80a8a2c:	2afd      	cmp	r2, #253	; 0xfd
 80a8a2e:	f63f af50 	bhi.w	80a88d2 <__aeabi_fmul+0x92>
 80a8a32:	428b      	cmp	r3, r1
 80a8a34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a8a38:	bf08      	it	eq
 80a8a3a:	f020 0001 	biceq.w	r0, r0, #1
 80a8a3e:	4770      	bx	lr
 80a8a40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a8a44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a8a48:	327f      	adds	r2, #127	; 0x7f
 80a8a4a:	bfc2      	ittt	gt
 80a8a4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a8a50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a8a54:	4770      	bxgt	lr
 80a8a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a8a5a:	f04f 0300 	mov.w	r3, #0
 80a8a5e:	3a01      	subs	r2, #1
 80a8a60:	e737      	b.n	80a88d2 <__aeabi_fmul+0x92>
 80a8a62:	f092 0f00 	teq	r2, #0
 80a8a66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a8a6a:	bf02      	ittt	eq
 80a8a6c:	0040      	lsleq	r0, r0, #1
 80a8a6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a8a72:	3a01      	subeq	r2, #1
 80a8a74:	d0f9      	beq.n	80a8a6a <__aeabi_fdiv+0xc2>
 80a8a76:	ea40 000c 	orr.w	r0, r0, ip
 80a8a7a:	f093 0f00 	teq	r3, #0
 80a8a7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a8a82:	bf02      	ittt	eq
 80a8a84:	0049      	lsleq	r1, r1, #1
 80a8a86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a8a8a:	3b01      	subeq	r3, #1
 80a8a8c:	d0f9      	beq.n	80a8a82 <__aeabi_fdiv+0xda>
 80a8a8e:	ea41 010c 	orr.w	r1, r1, ip
 80a8a92:	e795      	b.n	80a89c0 <__aeabi_fdiv+0x18>
 80a8a94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a8a98:	ea92 0f0c 	teq	r2, ip
 80a8a9c:	d108      	bne.n	80a8ab0 <__aeabi_fdiv+0x108>
 80a8a9e:	0242      	lsls	r2, r0, #9
 80a8aa0:	f47f af7d 	bne.w	80a899e <__aeabi_fmul+0x15e>
 80a8aa4:	ea93 0f0c 	teq	r3, ip
 80a8aa8:	f47f af70 	bne.w	80a898c <__aeabi_fmul+0x14c>
 80a8aac:	4608      	mov	r0, r1
 80a8aae:	e776      	b.n	80a899e <__aeabi_fmul+0x15e>
 80a8ab0:	ea93 0f0c 	teq	r3, ip
 80a8ab4:	d104      	bne.n	80a8ac0 <__aeabi_fdiv+0x118>
 80a8ab6:	024b      	lsls	r3, r1, #9
 80a8ab8:	f43f af4c 	beq.w	80a8954 <__aeabi_fmul+0x114>
 80a8abc:	4608      	mov	r0, r1
 80a8abe:	e76e      	b.n	80a899e <__aeabi_fmul+0x15e>
 80a8ac0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a8ac4:	bf18      	it	ne
 80a8ac6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a8aca:	d1ca      	bne.n	80a8a62 <__aeabi_fdiv+0xba>
 80a8acc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a8ad0:	f47f af5c 	bne.w	80a898c <__aeabi_fmul+0x14c>
 80a8ad4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a8ad8:	f47f af3c 	bne.w	80a8954 <__aeabi_fmul+0x114>
 80a8adc:	e75f      	b.n	80a899e <__aeabi_fmul+0x15e>
 80a8ade:	bf00      	nop

080a8ae0 <__gesf2>:
 80a8ae0:	f04f 3cff 	mov.w	ip, #4294967295
 80a8ae4:	e006      	b.n	80a8af4 <__cmpsf2+0x4>
 80a8ae6:	bf00      	nop

080a8ae8 <__lesf2>:
 80a8ae8:	f04f 0c01 	mov.w	ip, #1
 80a8aec:	e002      	b.n	80a8af4 <__cmpsf2+0x4>
 80a8aee:	bf00      	nop

080a8af0 <__cmpsf2>:
 80a8af0:	f04f 0c01 	mov.w	ip, #1
 80a8af4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a8af8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a8afc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a8b00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a8b04:	bf18      	it	ne
 80a8b06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a8b0a:	d011      	beq.n	80a8b30 <__cmpsf2+0x40>
 80a8b0c:	b001      	add	sp, #4
 80a8b0e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a8b12:	bf18      	it	ne
 80a8b14:	ea90 0f01 	teqne	r0, r1
 80a8b18:	bf58      	it	pl
 80a8b1a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a8b1e:	bf88      	it	hi
 80a8b20:	17c8      	asrhi	r0, r1, #31
 80a8b22:	bf38      	it	cc
 80a8b24:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a8b28:	bf18      	it	ne
 80a8b2a:	f040 0001 	orrne.w	r0, r0, #1
 80a8b2e:	4770      	bx	lr
 80a8b30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a8b34:	d102      	bne.n	80a8b3c <__cmpsf2+0x4c>
 80a8b36:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a8b3a:	d105      	bne.n	80a8b48 <__cmpsf2+0x58>
 80a8b3c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a8b40:	d1e4      	bne.n	80a8b0c <__cmpsf2+0x1c>
 80a8b42:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a8b46:	d0e1      	beq.n	80a8b0c <__cmpsf2+0x1c>
 80a8b48:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a8b4c:	4770      	bx	lr
 80a8b4e:	bf00      	nop

080a8b50 <__aeabi_cfrcmple>:
 80a8b50:	4684      	mov	ip, r0
 80a8b52:	4608      	mov	r0, r1
 80a8b54:	4661      	mov	r1, ip
 80a8b56:	e7ff      	b.n	80a8b58 <__aeabi_cfcmpeq>

080a8b58 <__aeabi_cfcmpeq>:
 80a8b58:	b50f      	push	{r0, r1, r2, r3, lr}
 80a8b5a:	f7ff ffc9 	bl	80a8af0 <__cmpsf2>
 80a8b5e:	2800      	cmp	r0, #0
 80a8b60:	bf48      	it	mi
 80a8b62:	f110 0f00 	cmnmi.w	r0, #0
 80a8b66:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a8b68 <__aeabi_fcmpeq>:
 80a8b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a8b6c:	f7ff fff4 	bl	80a8b58 <__aeabi_cfcmpeq>
 80a8b70:	bf0c      	ite	eq
 80a8b72:	2001      	moveq	r0, #1
 80a8b74:	2000      	movne	r0, #0
 80a8b76:	f85d fb08 	ldr.w	pc, [sp], #8
 80a8b7a:	bf00      	nop

080a8b7c <__aeabi_fcmplt>:
 80a8b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a8b80:	f7ff ffea 	bl	80a8b58 <__aeabi_cfcmpeq>
 80a8b84:	bf34      	ite	cc
 80a8b86:	2001      	movcc	r0, #1
 80a8b88:	2000      	movcs	r0, #0
 80a8b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a8b8e:	bf00      	nop

080a8b90 <__aeabi_fcmple>:
 80a8b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a8b94:	f7ff ffe0 	bl	80a8b58 <__aeabi_cfcmpeq>
 80a8b98:	bf94      	ite	ls
 80a8b9a:	2001      	movls	r0, #1
 80a8b9c:	2000      	movhi	r0, #0
 80a8b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a8ba2:	bf00      	nop

080a8ba4 <__aeabi_fcmpge>:
 80a8ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a8ba8:	f7ff ffd2 	bl	80a8b50 <__aeabi_cfrcmple>
 80a8bac:	bf94      	ite	ls
 80a8bae:	2001      	movls	r0, #1
 80a8bb0:	2000      	movhi	r0, #0
 80a8bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a8bb6:	bf00      	nop

080a8bb8 <__aeabi_fcmpgt>:
 80a8bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a8bbc:	f7ff ffc8 	bl	80a8b50 <__aeabi_cfrcmple>
 80a8bc0:	bf34      	ite	cc
 80a8bc2:	2001      	movcc	r0, #1
 80a8bc4:	2000      	movcs	r0, #0
 80a8bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a8bca:	bf00      	nop

080a8bcc <__aeabi_f2iz>:
 80a8bcc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a8bd0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a8bd4:	d30f      	bcc.n	80a8bf6 <__aeabi_f2iz+0x2a>
 80a8bd6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a8bda:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a8bde:	d90d      	bls.n	80a8bfc <__aeabi_f2iz+0x30>
 80a8be0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a8be4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a8be8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a8bec:	fa23 f002 	lsr.w	r0, r3, r2
 80a8bf0:	bf18      	it	ne
 80a8bf2:	4240      	negne	r0, r0
 80a8bf4:	4770      	bx	lr
 80a8bf6:	f04f 0000 	mov.w	r0, #0
 80a8bfa:	4770      	bx	lr
 80a8bfc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a8c00:	d101      	bne.n	80a8c06 <__aeabi_f2iz+0x3a>
 80a8c02:	0242      	lsls	r2, r0, #9
 80a8c04:	d105      	bne.n	80a8c12 <__aeabi_f2iz+0x46>
 80a8c06:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a8c0a:	bf08      	it	eq
 80a8c0c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a8c10:	4770      	bx	lr
 80a8c12:	f04f 0000 	mov.w	r0, #0
 80a8c16:	4770      	bx	lr

080a8c18 <__aeabi_ldivmod>:
 80a8c18:	b97b      	cbnz	r3, 80a8c3a <__aeabi_ldivmod+0x22>
 80a8c1a:	b972      	cbnz	r2, 80a8c3a <__aeabi_ldivmod+0x22>
 80a8c1c:	2900      	cmp	r1, #0
 80a8c1e:	bfbe      	ittt	lt
 80a8c20:	2000      	movlt	r0, #0
 80a8c22:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a8c26:	e006      	blt.n	80a8c36 <__aeabi_ldivmod+0x1e>
 80a8c28:	bf08      	it	eq
 80a8c2a:	2800      	cmpeq	r0, #0
 80a8c2c:	bf1c      	itt	ne
 80a8c2e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a8c32:	f04f 30ff 	movne.w	r0, #4294967295
 80a8c36:	f000 b9c1 	b.w	80a8fbc <__aeabi_idiv0>
 80a8c3a:	f1ad 0c08 	sub.w	ip, sp, #8
 80a8c3e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a8c42:	2900      	cmp	r1, #0
 80a8c44:	db09      	blt.n	80a8c5a <__aeabi_ldivmod+0x42>
 80a8c46:	2b00      	cmp	r3, #0
 80a8c48:	db1a      	blt.n	80a8c80 <__aeabi_ldivmod+0x68>
 80a8c4a:	f000 f84d 	bl	80a8ce8 <__udivmoddi4>
 80a8c4e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8c52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8c56:	b004      	add	sp, #16
 80a8c58:	4770      	bx	lr
 80a8c5a:	4240      	negs	r0, r0
 80a8c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8c60:	2b00      	cmp	r3, #0
 80a8c62:	db1b      	blt.n	80a8c9c <__aeabi_ldivmod+0x84>
 80a8c64:	f000 f840 	bl	80a8ce8 <__udivmoddi4>
 80a8c68:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8c6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8c70:	b004      	add	sp, #16
 80a8c72:	4240      	negs	r0, r0
 80a8c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8c78:	4252      	negs	r2, r2
 80a8c7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8c7e:	4770      	bx	lr
 80a8c80:	4252      	negs	r2, r2
 80a8c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8c86:	f000 f82f 	bl	80a8ce8 <__udivmoddi4>
 80a8c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8c92:	b004      	add	sp, #16
 80a8c94:	4240      	negs	r0, r0
 80a8c96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8c9a:	4770      	bx	lr
 80a8c9c:	4252      	negs	r2, r2
 80a8c9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8ca2:	f000 f821 	bl	80a8ce8 <__udivmoddi4>
 80a8ca6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8caa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8cae:	b004      	add	sp, #16
 80a8cb0:	4252      	negs	r2, r2
 80a8cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8cb6:	4770      	bx	lr

080a8cb8 <__aeabi_uldivmod>:
 80a8cb8:	b953      	cbnz	r3, 80a8cd0 <__aeabi_uldivmod+0x18>
 80a8cba:	b94a      	cbnz	r2, 80a8cd0 <__aeabi_uldivmod+0x18>
 80a8cbc:	2900      	cmp	r1, #0
 80a8cbe:	bf08      	it	eq
 80a8cc0:	2800      	cmpeq	r0, #0
 80a8cc2:	bf1c      	itt	ne
 80a8cc4:	f04f 31ff 	movne.w	r1, #4294967295
 80a8cc8:	f04f 30ff 	movne.w	r0, #4294967295
 80a8ccc:	f000 b976 	b.w	80a8fbc <__aeabi_idiv0>
 80a8cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 80a8cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a8cd8:	f000 f806 	bl	80a8ce8 <__udivmoddi4>
 80a8cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8ce4:	b004      	add	sp, #16
 80a8ce6:	4770      	bx	lr

080a8ce8 <__udivmoddi4>:
 80a8ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a8cec:	9e08      	ldr	r6, [sp, #32]
 80a8cee:	460d      	mov	r5, r1
 80a8cf0:	4604      	mov	r4, r0
 80a8cf2:	4688      	mov	r8, r1
 80a8cf4:	2b00      	cmp	r3, #0
 80a8cf6:	d14d      	bne.n	80a8d94 <__udivmoddi4+0xac>
 80a8cf8:	428a      	cmp	r2, r1
 80a8cfa:	4694      	mov	ip, r2
 80a8cfc:	d968      	bls.n	80a8dd0 <__udivmoddi4+0xe8>
 80a8cfe:	fab2 f282 	clz	r2, r2
 80a8d02:	b152      	cbz	r2, 80a8d1a <__udivmoddi4+0x32>
 80a8d04:	fa01 f302 	lsl.w	r3, r1, r2
 80a8d08:	f1c2 0120 	rsb	r1, r2, #32
 80a8d0c:	fa20 f101 	lsr.w	r1, r0, r1
 80a8d10:	fa0c fc02 	lsl.w	ip, ip, r2
 80a8d14:	ea41 0803 	orr.w	r8, r1, r3
 80a8d18:	4094      	lsls	r4, r2
 80a8d1a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80a8d1e:	fbb8 f7f1 	udiv	r7, r8, r1
 80a8d22:	fa1f fe8c 	uxth.w	lr, ip
 80a8d26:	fb01 8817 	mls	r8, r1, r7, r8
 80a8d2a:	fb07 f00e 	mul.w	r0, r7, lr
 80a8d2e:	0c23      	lsrs	r3, r4, #16
 80a8d30:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a8d34:	4298      	cmp	r0, r3
 80a8d36:	d90a      	bls.n	80a8d4e <__udivmoddi4+0x66>
 80a8d38:	eb1c 0303 	adds.w	r3, ip, r3
 80a8d3c:	f107 35ff 	add.w	r5, r7, #4294967295
 80a8d40:	f080 811e 	bcs.w	80a8f80 <__udivmoddi4+0x298>
 80a8d44:	4298      	cmp	r0, r3
 80a8d46:	f240 811b 	bls.w	80a8f80 <__udivmoddi4+0x298>
 80a8d4a:	3f02      	subs	r7, #2
 80a8d4c:	4463      	add	r3, ip
 80a8d4e:	1a1b      	subs	r3, r3, r0
 80a8d50:	fbb3 f0f1 	udiv	r0, r3, r1
 80a8d54:	fb01 3310 	mls	r3, r1, r0, r3
 80a8d58:	fb00 fe0e 	mul.w	lr, r0, lr
 80a8d5c:	b2a4      	uxth	r4, r4
 80a8d5e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80a8d62:	45a6      	cmp	lr, r4
 80a8d64:	d90a      	bls.n	80a8d7c <__udivmoddi4+0x94>
 80a8d66:	eb1c 0404 	adds.w	r4, ip, r4
 80a8d6a:	f100 33ff 	add.w	r3, r0, #4294967295
 80a8d6e:	f080 8109 	bcs.w	80a8f84 <__udivmoddi4+0x29c>
 80a8d72:	45a6      	cmp	lr, r4
 80a8d74:	f240 8106 	bls.w	80a8f84 <__udivmoddi4+0x29c>
 80a8d78:	4464      	add	r4, ip
 80a8d7a:	3802      	subs	r0, #2
 80a8d7c:	2100      	movs	r1, #0
 80a8d7e:	eba4 040e 	sub.w	r4, r4, lr
 80a8d82:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80a8d86:	b11e      	cbz	r6, 80a8d90 <__udivmoddi4+0xa8>
 80a8d88:	2300      	movs	r3, #0
 80a8d8a:	40d4      	lsrs	r4, r2
 80a8d8c:	e9c6 4300 	strd	r4, r3, [r6]
 80a8d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a8d94:	428b      	cmp	r3, r1
 80a8d96:	d908      	bls.n	80a8daa <__udivmoddi4+0xc2>
 80a8d98:	2e00      	cmp	r6, #0
 80a8d9a:	f000 80ee 	beq.w	80a8f7a <__udivmoddi4+0x292>
 80a8d9e:	2100      	movs	r1, #0
 80a8da0:	e9c6 0500 	strd	r0, r5, [r6]
 80a8da4:	4608      	mov	r0, r1
 80a8da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a8daa:	fab3 f183 	clz	r1, r3
 80a8dae:	2900      	cmp	r1, #0
 80a8db0:	d14a      	bne.n	80a8e48 <__udivmoddi4+0x160>
 80a8db2:	42ab      	cmp	r3, r5
 80a8db4:	d302      	bcc.n	80a8dbc <__udivmoddi4+0xd4>
 80a8db6:	4282      	cmp	r2, r0
 80a8db8:	f200 80fc 	bhi.w	80a8fb4 <__udivmoddi4+0x2cc>
 80a8dbc:	1a84      	subs	r4, r0, r2
 80a8dbe:	eb65 0303 	sbc.w	r3, r5, r3
 80a8dc2:	2001      	movs	r0, #1
 80a8dc4:	4698      	mov	r8, r3
 80a8dc6:	2e00      	cmp	r6, #0
 80a8dc8:	d0e2      	beq.n	80a8d90 <__udivmoddi4+0xa8>
 80a8dca:	e9c6 4800 	strd	r4, r8, [r6]
 80a8dce:	e7df      	b.n	80a8d90 <__udivmoddi4+0xa8>
 80a8dd0:	b902      	cbnz	r2, 80a8dd4 <__udivmoddi4+0xec>
 80a8dd2:	deff      	udf	#255	; 0xff
 80a8dd4:	fab2 f282 	clz	r2, r2
 80a8dd8:	2a00      	cmp	r2, #0
 80a8dda:	f040 8091 	bne.w	80a8f00 <__udivmoddi4+0x218>
 80a8dde:	eba1 000c 	sub.w	r0, r1, ip
 80a8de2:	2101      	movs	r1, #1
 80a8de4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80a8de8:	fa1f fe8c 	uxth.w	lr, ip
 80a8dec:	fbb0 f3f7 	udiv	r3, r0, r7
 80a8df0:	fb07 0013 	mls	r0, r7, r3, r0
 80a8df4:	0c25      	lsrs	r5, r4, #16
 80a8df6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80a8dfa:	fb0e f003 	mul.w	r0, lr, r3
 80a8dfe:	42a8      	cmp	r0, r5
 80a8e00:	d908      	bls.n	80a8e14 <__udivmoddi4+0x12c>
 80a8e02:	eb1c 0505 	adds.w	r5, ip, r5
 80a8e06:	f103 38ff 	add.w	r8, r3, #4294967295
 80a8e0a:	d202      	bcs.n	80a8e12 <__udivmoddi4+0x12a>
 80a8e0c:	42a8      	cmp	r0, r5
 80a8e0e:	f200 80ce 	bhi.w	80a8fae <__udivmoddi4+0x2c6>
 80a8e12:	4643      	mov	r3, r8
 80a8e14:	1a2d      	subs	r5, r5, r0
 80a8e16:	fbb5 f0f7 	udiv	r0, r5, r7
 80a8e1a:	fb07 5510 	mls	r5, r7, r0, r5
 80a8e1e:	fb0e fe00 	mul.w	lr, lr, r0
 80a8e22:	b2a4      	uxth	r4, r4
 80a8e24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a8e28:	45a6      	cmp	lr, r4
 80a8e2a:	d908      	bls.n	80a8e3e <__udivmoddi4+0x156>
 80a8e2c:	eb1c 0404 	adds.w	r4, ip, r4
 80a8e30:	f100 35ff 	add.w	r5, r0, #4294967295
 80a8e34:	d202      	bcs.n	80a8e3c <__udivmoddi4+0x154>
 80a8e36:	45a6      	cmp	lr, r4
 80a8e38:	f200 80b6 	bhi.w	80a8fa8 <__udivmoddi4+0x2c0>
 80a8e3c:	4628      	mov	r0, r5
 80a8e3e:	eba4 040e 	sub.w	r4, r4, lr
 80a8e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a8e46:	e79e      	b.n	80a8d86 <__udivmoddi4+0x9e>
 80a8e48:	f1c1 0720 	rsb	r7, r1, #32
 80a8e4c:	408b      	lsls	r3, r1
 80a8e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 80a8e52:	ea4c 0c03 	orr.w	ip, ip, r3
 80a8e56:	fa25 fa07 	lsr.w	sl, r5, r7
 80a8e5a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a8e5e:	fbba f8f9 	udiv	r8, sl, r9
 80a8e62:	fa20 f307 	lsr.w	r3, r0, r7
 80a8e66:	fb09 aa18 	mls	sl, r9, r8, sl
 80a8e6a:	408d      	lsls	r5, r1
 80a8e6c:	fa1f fe8c 	uxth.w	lr, ip
 80a8e70:	431d      	orrs	r5, r3
 80a8e72:	fa00 f301 	lsl.w	r3, r0, r1
 80a8e76:	fb08 f00e 	mul.w	r0, r8, lr
 80a8e7a:	0c2c      	lsrs	r4, r5, #16
 80a8e7c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80a8e80:	42a0      	cmp	r0, r4
 80a8e82:	fa02 f201 	lsl.w	r2, r2, r1
 80a8e86:	d90b      	bls.n	80a8ea0 <__udivmoddi4+0x1b8>
 80a8e88:	eb1c 0404 	adds.w	r4, ip, r4
 80a8e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 80a8e90:	f080 8088 	bcs.w	80a8fa4 <__udivmoddi4+0x2bc>
 80a8e94:	42a0      	cmp	r0, r4
 80a8e96:	f240 8085 	bls.w	80a8fa4 <__udivmoddi4+0x2bc>
 80a8e9a:	f1a8 0802 	sub.w	r8, r8, #2
 80a8e9e:	4464      	add	r4, ip
 80a8ea0:	1a24      	subs	r4, r4, r0
 80a8ea2:	fbb4 f0f9 	udiv	r0, r4, r9
 80a8ea6:	fb09 4410 	mls	r4, r9, r0, r4
 80a8eaa:	fb00 fe0e 	mul.w	lr, r0, lr
 80a8eae:	b2ad      	uxth	r5, r5
 80a8eb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a8eb4:	45a6      	cmp	lr, r4
 80a8eb6:	d908      	bls.n	80a8eca <__udivmoddi4+0x1e2>
 80a8eb8:	eb1c 0404 	adds.w	r4, ip, r4
 80a8ebc:	f100 35ff 	add.w	r5, r0, #4294967295
 80a8ec0:	d26c      	bcs.n	80a8f9c <__udivmoddi4+0x2b4>
 80a8ec2:	45a6      	cmp	lr, r4
 80a8ec4:	d96a      	bls.n	80a8f9c <__udivmoddi4+0x2b4>
 80a8ec6:	3802      	subs	r0, #2
 80a8ec8:	4464      	add	r4, ip
 80a8eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80a8ece:	fba0 9502 	umull	r9, r5, r0, r2
 80a8ed2:	eba4 040e 	sub.w	r4, r4, lr
 80a8ed6:	42ac      	cmp	r4, r5
 80a8ed8:	46c8      	mov	r8, r9
 80a8eda:	46ae      	mov	lr, r5
 80a8edc:	d356      	bcc.n	80a8f8c <__udivmoddi4+0x2a4>
 80a8ede:	d053      	beq.n	80a8f88 <__udivmoddi4+0x2a0>
 80a8ee0:	2e00      	cmp	r6, #0
 80a8ee2:	d069      	beq.n	80a8fb8 <__udivmoddi4+0x2d0>
 80a8ee4:	ebb3 0208 	subs.w	r2, r3, r8
 80a8ee8:	eb64 040e 	sbc.w	r4, r4, lr
 80a8eec:	fa22 f301 	lsr.w	r3, r2, r1
 80a8ef0:	fa04 f707 	lsl.w	r7, r4, r7
 80a8ef4:	431f      	orrs	r7, r3
 80a8ef6:	40cc      	lsrs	r4, r1
 80a8ef8:	e9c6 7400 	strd	r7, r4, [r6]
 80a8efc:	2100      	movs	r1, #0
 80a8efe:	e747      	b.n	80a8d90 <__udivmoddi4+0xa8>
 80a8f00:	fa0c fc02 	lsl.w	ip, ip, r2
 80a8f04:	f1c2 0120 	rsb	r1, r2, #32
 80a8f08:	fa25 f301 	lsr.w	r3, r5, r1
 80a8f0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80a8f10:	fa20 f101 	lsr.w	r1, r0, r1
 80a8f14:	4095      	lsls	r5, r2
 80a8f16:	430d      	orrs	r5, r1
 80a8f18:	fbb3 f1f7 	udiv	r1, r3, r7
 80a8f1c:	fb07 3311 	mls	r3, r7, r1, r3
 80a8f20:	fa1f fe8c 	uxth.w	lr, ip
 80a8f24:	0c28      	lsrs	r0, r5, #16
 80a8f26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a8f2a:	fb01 f30e 	mul.w	r3, r1, lr
 80a8f2e:	4283      	cmp	r3, r0
 80a8f30:	fa04 f402 	lsl.w	r4, r4, r2
 80a8f34:	d908      	bls.n	80a8f48 <__udivmoddi4+0x260>
 80a8f36:	eb1c 0000 	adds.w	r0, ip, r0
 80a8f3a:	f101 38ff 	add.w	r8, r1, #4294967295
 80a8f3e:	d22f      	bcs.n	80a8fa0 <__udivmoddi4+0x2b8>
 80a8f40:	4283      	cmp	r3, r0
 80a8f42:	d92d      	bls.n	80a8fa0 <__udivmoddi4+0x2b8>
 80a8f44:	3902      	subs	r1, #2
 80a8f46:	4460      	add	r0, ip
 80a8f48:	1ac0      	subs	r0, r0, r3
 80a8f4a:	fbb0 f3f7 	udiv	r3, r0, r7
 80a8f4e:	fb07 0013 	mls	r0, r7, r3, r0
 80a8f52:	b2ad      	uxth	r5, r5
 80a8f54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80a8f58:	fb03 f00e 	mul.w	r0, r3, lr
 80a8f5c:	42a8      	cmp	r0, r5
 80a8f5e:	d908      	bls.n	80a8f72 <__udivmoddi4+0x28a>
 80a8f60:	eb1c 0505 	adds.w	r5, ip, r5
 80a8f64:	f103 38ff 	add.w	r8, r3, #4294967295
 80a8f68:	d216      	bcs.n	80a8f98 <__udivmoddi4+0x2b0>
 80a8f6a:	42a8      	cmp	r0, r5
 80a8f6c:	d914      	bls.n	80a8f98 <__udivmoddi4+0x2b0>
 80a8f6e:	3b02      	subs	r3, #2
 80a8f70:	4465      	add	r5, ip
 80a8f72:	1a28      	subs	r0, r5, r0
 80a8f74:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80a8f78:	e738      	b.n	80a8dec <__udivmoddi4+0x104>
 80a8f7a:	4631      	mov	r1, r6
 80a8f7c:	4630      	mov	r0, r6
 80a8f7e:	e707      	b.n	80a8d90 <__udivmoddi4+0xa8>
 80a8f80:	462f      	mov	r7, r5
 80a8f82:	e6e4      	b.n	80a8d4e <__udivmoddi4+0x66>
 80a8f84:	4618      	mov	r0, r3
 80a8f86:	e6f9      	b.n	80a8d7c <__udivmoddi4+0x94>
 80a8f88:	454b      	cmp	r3, r9
 80a8f8a:	d2a9      	bcs.n	80a8ee0 <__udivmoddi4+0x1f8>
 80a8f8c:	ebb9 0802 	subs.w	r8, r9, r2
 80a8f90:	eb65 0e0c 	sbc.w	lr, r5, ip
 80a8f94:	3801      	subs	r0, #1
 80a8f96:	e7a3      	b.n	80a8ee0 <__udivmoddi4+0x1f8>
 80a8f98:	4643      	mov	r3, r8
 80a8f9a:	e7ea      	b.n	80a8f72 <__udivmoddi4+0x28a>
 80a8f9c:	4628      	mov	r0, r5
 80a8f9e:	e794      	b.n	80a8eca <__udivmoddi4+0x1e2>
 80a8fa0:	4641      	mov	r1, r8
 80a8fa2:	e7d1      	b.n	80a8f48 <__udivmoddi4+0x260>
 80a8fa4:	46d0      	mov	r8, sl
 80a8fa6:	e77b      	b.n	80a8ea0 <__udivmoddi4+0x1b8>
 80a8fa8:	4464      	add	r4, ip
 80a8faa:	3802      	subs	r0, #2
 80a8fac:	e747      	b.n	80a8e3e <__udivmoddi4+0x156>
 80a8fae:	3b02      	subs	r3, #2
 80a8fb0:	4465      	add	r5, ip
 80a8fb2:	e72f      	b.n	80a8e14 <__udivmoddi4+0x12c>
 80a8fb4:	4608      	mov	r0, r1
 80a8fb6:	e706      	b.n	80a8dc6 <__udivmoddi4+0xde>
 80a8fb8:	4631      	mov	r1, r6
 80a8fba:	e6e9      	b.n	80a8d90 <__udivmoddi4+0xa8>

080a8fbc <__aeabi_idiv0>:
 80a8fbc:	4770      	bx	lr
 80a8fbe:	bf00      	nop

080a8fc0 <atexit>:
 80a8fc0:	2300      	movs	r3, #0
 80a8fc2:	4601      	mov	r1, r0
 80a8fc4:	461a      	mov	r2, r3
 80a8fc6:	4618      	mov	r0, r3
 80a8fc8:	f000 b868 	b.w	80a909c <__register_exitproc>

080a8fcc <memcpy>:
 80a8fcc:	440a      	add	r2, r1
 80a8fce:	4291      	cmp	r1, r2
 80a8fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 80a8fd4:	d100      	bne.n	80a8fd8 <memcpy+0xc>
 80a8fd6:	4770      	bx	lr
 80a8fd8:	b510      	push	{r4, lr}
 80a8fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a8fde:	4291      	cmp	r1, r2
 80a8fe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a8fe4:	d1f9      	bne.n	80a8fda <memcpy+0xe>
 80a8fe6:	bd10      	pop	{r4, pc}

080a8fe8 <memset>:
 80a8fe8:	4603      	mov	r3, r0
 80a8fea:	4402      	add	r2, r0
 80a8fec:	4293      	cmp	r3, r2
 80a8fee:	d100      	bne.n	80a8ff2 <memset+0xa>
 80a8ff0:	4770      	bx	lr
 80a8ff2:	f803 1b01 	strb.w	r1, [r3], #1
 80a8ff6:	e7f9      	b.n	80a8fec <memset+0x4>

080a8ff8 <srand>:
 80a8ff8:	b538      	push	{r3, r4, r5, lr}
 80a8ffa:	4b10      	ldr	r3, [pc, #64]	; (80a903c <srand+0x44>)
 80a8ffc:	4604      	mov	r4, r0
 80a8ffe:	681d      	ldr	r5, [r3, #0]
 80a9000:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a9002:	b9b3      	cbnz	r3, 80a9032 <srand+0x3a>
 80a9004:	2018      	movs	r0, #24
 80a9006:	f7fb fa4f 	bl	80a44a8 <malloc>
 80a900a:	4602      	mov	r2, r0
 80a900c:	63a8      	str	r0, [r5, #56]	; 0x38
 80a900e:	b920      	cbnz	r0, 80a901a <srand+0x22>
 80a9010:	2142      	movs	r1, #66	; 0x42
 80a9012:	4b0b      	ldr	r3, [pc, #44]	; (80a9040 <srand+0x48>)
 80a9014:	480b      	ldr	r0, [pc, #44]	; (80a9044 <srand+0x4c>)
 80a9016:	f7fb fa6f 	bl	80a44f8 <__assert_func>
 80a901a:	490b      	ldr	r1, [pc, #44]	; (80a9048 <srand+0x50>)
 80a901c:	4b0b      	ldr	r3, [pc, #44]	; (80a904c <srand+0x54>)
 80a901e:	e9c0 1300 	strd	r1, r3, [r0]
 80a9022:	4b0b      	ldr	r3, [pc, #44]	; (80a9050 <srand+0x58>)
 80a9024:	2100      	movs	r1, #0
 80a9026:	6083      	str	r3, [r0, #8]
 80a9028:	230b      	movs	r3, #11
 80a902a:	8183      	strh	r3, [r0, #12]
 80a902c:	2001      	movs	r0, #1
 80a902e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a9032:	2200      	movs	r2, #0
 80a9034:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a9036:	611c      	str	r4, [r3, #16]
 80a9038:	615a      	str	r2, [r3, #20]
 80a903a:	bd38      	pop	{r3, r4, r5, pc}
 80a903c:	20000010 	.word	0x20000010
 80a9040:	080aa7b0 	.word	0x080aa7b0
 80a9044:	080aa7c7 	.word	0x080aa7c7
 80a9048:	abcd330e 	.word	0xabcd330e
 80a904c:	e66d1234 	.word	0xe66d1234
 80a9050:	0005deec 	.word	0x0005deec

080a9054 <strcpy>:
 80a9054:	4603      	mov	r3, r0
 80a9056:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a905a:	f803 2b01 	strb.w	r2, [r3], #1
 80a905e:	2a00      	cmp	r2, #0
 80a9060:	d1f9      	bne.n	80a9056 <strcpy+0x2>
 80a9062:	4770      	bx	lr

080a9064 <strlen>:
 80a9064:	4603      	mov	r3, r0
 80a9066:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a906a:	2a00      	cmp	r2, #0
 80a906c:	d1fb      	bne.n	80a9066 <strlen+0x2>
 80a906e:	1a18      	subs	r0, r3, r0
 80a9070:	3801      	subs	r0, #1
 80a9072:	4770      	bx	lr

080a9074 <strncpy>:
 80a9074:	4603      	mov	r3, r0
 80a9076:	b510      	push	{r4, lr}
 80a9078:	3901      	subs	r1, #1
 80a907a:	b132      	cbz	r2, 80a908a <strncpy+0x16>
 80a907c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a9080:	3a01      	subs	r2, #1
 80a9082:	f803 4b01 	strb.w	r4, [r3], #1
 80a9086:	2c00      	cmp	r4, #0
 80a9088:	d1f7      	bne.n	80a907a <strncpy+0x6>
 80a908a:	2100      	movs	r1, #0
 80a908c:	441a      	add	r2, r3
 80a908e:	4293      	cmp	r3, r2
 80a9090:	d100      	bne.n	80a9094 <strncpy+0x20>
 80a9092:	bd10      	pop	{r4, pc}
 80a9094:	f803 1b01 	strb.w	r1, [r3], #1
 80a9098:	e7f9      	b.n	80a908e <strncpy+0x1a>
	...

080a909c <__register_exitproc>:
 80a909c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a90a0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a9150 <__register_exitproc+0xb4>
 80a90a4:	4606      	mov	r6, r0
 80a90a6:	f8d8 0000 	ldr.w	r0, [r8]
 80a90aa:	461f      	mov	r7, r3
 80a90ac:	460d      	mov	r5, r1
 80a90ae:	4691      	mov	r9, r2
 80a90b0:	f000 f858 	bl	80a9164 <__retarget_lock_acquire_recursive>
 80a90b4:	4b27      	ldr	r3, [pc, #156]	; (80a9154 <__register_exitproc+0xb8>)
 80a90b6:	681c      	ldr	r4, [r3, #0]
 80a90b8:	b934      	cbnz	r4, 80a90c8 <__register_exitproc+0x2c>
 80a90ba:	4c27      	ldr	r4, [pc, #156]	; (80a9158 <__register_exitproc+0xbc>)
 80a90bc:	601c      	str	r4, [r3, #0]
 80a90be:	4b27      	ldr	r3, [pc, #156]	; (80a915c <__register_exitproc+0xc0>)
 80a90c0:	b113      	cbz	r3, 80a90c8 <__register_exitproc+0x2c>
 80a90c2:	681b      	ldr	r3, [r3, #0]
 80a90c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a90c8:	6863      	ldr	r3, [r4, #4]
 80a90ca:	2b1f      	cmp	r3, #31
 80a90cc:	dd07      	ble.n	80a90de <__register_exitproc+0x42>
 80a90ce:	f8d8 0000 	ldr.w	r0, [r8]
 80a90d2:	f000 f849 	bl	80a9168 <__retarget_lock_release_recursive>
 80a90d6:	f04f 30ff 	mov.w	r0, #4294967295
 80a90da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a90de:	b35e      	cbz	r6, 80a9138 <__register_exitproc+0x9c>
 80a90e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a90e4:	b988      	cbnz	r0, 80a910a <__register_exitproc+0x6e>
 80a90e6:	4b1e      	ldr	r3, [pc, #120]	; (80a9160 <__register_exitproc+0xc4>)
 80a90e8:	b923      	cbnz	r3, 80a90f4 <__register_exitproc+0x58>
 80a90ea:	f8d8 0000 	ldr.w	r0, [r8]
 80a90ee:	f000 f83a 	bl	80a9166 <__retarget_lock_release>
 80a90f2:	e7f0      	b.n	80a90d6 <__register_exitproc+0x3a>
 80a90f4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a90f8:	f7fb f9d6 	bl	80a44a8 <malloc>
 80a90fc:	2800      	cmp	r0, #0
 80a90fe:	d0f4      	beq.n	80a90ea <__register_exitproc+0x4e>
 80a9100:	2300      	movs	r3, #0
 80a9102:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a9106:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a910a:	2201      	movs	r2, #1
 80a910c:	6863      	ldr	r3, [r4, #4]
 80a910e:	2e02      	cmp	r6, #2
 80a9110:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a9114:	fa02 f203 	lsl.w	r2, r2, r3
 80a9118:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a911c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a9120:	ea43 0302 	orr.w	r3, r3, r2
 80a9124:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a9128:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a912c:	bf02      	ittt	eq
 80a912e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a9132:	4313      	orreq	r3, r2
 80a9134:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a9138:	6863      	ldr	r3, [r4, #4]
 80a913a:	f8d8 0000 	ldr.w	r0, [r8]
 80a913e:	1c5a      	adds	r2, r3, #1
 80a9140:	3302      	adds	r3, #2
 80a9142:	6062      	str	r2, [r4, #4]
 80a9144:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a9148:	f000 f80e 	bl	80a9168 <__retarget_lock_release_recursive>
 80a914c:	2000      	movs	r0, #0
 80a914e:	e7c4      	b.n	80a90da <__register_exitproc+0x3e>
 80a9150:	20000074 	.word	0x20000074
 80a9154:	200006a4 	.word	0x200006a4
 80a9158:	20000618 	.word	0x20000618
 80a915c:	00000000 	.word	0x00000000
 80a9160:	080a44a9 	.word	0x080a44a9

080a9164 <__retarget_lock_acquire_recursive>:
 80a9164:	4770      	bx	lr

080a9166 <__retarget_lock_release>:
 80a9166:	4770      	bx	lr

080a9168 <__retarget_lock_release_recursive>:
 80a9168:	4770      	bx	lr

080a916a <link_code_end>:
	...

080a916c <dynalib_user>:
 80a916c:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a917c:	0000 0000 7953 7473 6d65 5320 6174 7574     ....System Statu
 80a918c:	3a73 3020 0078 6553 666c 5420 7365 3a74     s: 0x.Self Test:
 80a919c:	2020 2020 3020 0078 7953 7473 6d65 4520          0x.System E
 80a91ac:	7272 726f 203a 3020 0078 0a0a 6554 706d     rror:  0x...Temp
 80a91bc:	7265 7461 7275 2065 203d 2000 0046 7250     erature = . F.Pr
 80a91cc:	7365 7573 6572 3d20 0020 6d20 486d 0067     essure = . mmHg.
 80a91dc:	7041 7270 786f 202e 6c41 6974 7574 6564     Approx. Altitude
 80a91ec:	3d20 0020 6d20 4800 6d75 6469 7469 2079      = . m.Humidity 
 80a91fc:	203d 2000 0025 2d2d 2d2d 2d2d 2d2d 2d2d     = . %.----------
 80a920c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a921c:	2d2d 2d2d 2d2d 2d2d 2d2d 5300 6e65 6f73     ----------.Senso
 80a922c:	3a72 2020 2020 2020 0020 7244 7669 7265     r:       .Driver
 80a923c:	5620 7265 203a 2020 5500 696e 7571 2065      Ver:   .Unique 
 80a924c:	4449 203a 2020 0020 614d 2078 6156 756c     ID:    .Max Valu
 80a925c:	3a65 2020 2020 2000 7878 0078 694d 206e     e:    . xxx.Min 
 80a926c:	6156 756c 3a65 2020 2020 5200 7365 6c6f     Value:    .Resol
 80a927c:	7475 6f69 3a6e 2020 0020 430a 6c61 6269     ution:   ..Calib
 80a928c:	6172 6974 6e6f 6f20 6666 6573 7374 0a20     ration offsets .
 80a929c:	4100 6363 6c65 7265 6d6f 7465 7265 203a     .Accelerometer: 
 80a92ac:	0a00 7947 6f72 203a 0a00 614d 3a67 0020     ..Gyro: ..Mag: .
 80a92bc:	410a 6363 6c65 5220 6461 7569 3a73 0020     .Accel Radius: .
 80a92cc:	4d0a 6761 5220 6461 7569 3a73 0020 6554     .Mag Radius: .Te
 80a92dc:	7473 6e69 2067 6973 657a 0021 6146 6c69     sting size!.Fail
 80a92ec:	6465 7420 206f 7277 7469 2065 6461 7264     ed to write addr
 80a92fc:	7365 2073 7830 4600 6961 656c 2064 6f74     ess 0x.Failed to
 80a930c:	7220 2d65 7277 7469 2065 6461 7264 7365      re-write addres
 80a931c:	2073 7830 4600 756f 646e 6d20 7861 6120     s 0x.Found max a
 80a932c:	6464 6572 7373 5400 6968 2073 4545 5250     ddress.This EEPR
 80a933c:	4d4f 6320 6e61 7320 6f74 6572 0020 6220     OM can store . b
 80a934c:	7479 7365 4e00 4e00 0045 4553 5300 5300     ytes.N.NE.SE.S.S
 80a935c:	0057 574e 4200 7375 5620 6c6f 6174 6567     W.NW.Bus Voltage
 80a936c:	203a 2020 2000 0056 6853 6e75 2074 6f56     :   . V.Shunt Vo
 80a937c:	746c 6761 3a65 0020 6d20 0056 6f4c 6461     ltage: . mV.Load
 80a938c:	5620 6c6f 6174 6567 203a 0020 7543 7272      Voltage:  .Curr
 80a939c:	6e65 3a74 2020 2020 2020 0020 6d20 0041     ent:       . mA.
 80a93ac:	6f50 6577 3a72 2020 2020 2020 2020 0020     Power:         .
 80a93bc:	6d20 0057 3a58 0020 5909 203a 0900 3a5a      mW.X: ..Y: ..Z:
 80a93cc:	0020 0a0a 6300 6d6f 6170 7373 6820 6165      ....compass hea
 80a93dc:	6964 676e 203a 0020 0009 2021 5300 7379     ding:  ...! .Sys
 80a93ec:	003a 4720 003a 4120 003a 4d20 003a 6554     :. G:. A:. M:.Te
 80a93fc:	706d 202e 203d 5000 6572 7373 202e 203d     mp. = .Press. = 
 80a940c:	4200 7375 7620 6c6f 6174 6567 3d20 0020     .Bus voltage = .
 80a941c:	7563 7272 6e65 2074 203d 7000 776f 7265     current = .power
 80a942c:	3d20 0020 6176 656e 6420 7269 202e 203d      = .vane dir. = 
 80a943c:	2000 0064 6568 6461 6e69 2067 203d 5700     . d.heading = .W
 80a944c:	6e69 5364 6570 6465 3d20 0020 6d20 6870     indSpeed = . mph
 80a945c:	7200 746f 7461 6f69 736e 3d20 0020 420a     .rotations = ..B
 80a946c:	454d 6120 746c 7469 6475 2065 6f74 6174     ME altitude tota
 80a947c:	206c 203d 0a00 4d42 2045 6574 706d 7420     l = ..BME temp t
 80a948c:	746f 6c61 3d20 0020 6f6c 706f 6320 756f     otal = .loop cou
 80a949c:	746e 7265 3d20 0020 420a 454d 7420 6d65     nter = ..BME tem
 80a94ac:	2070 7661 7265 6761 2065 203d 0a00 4d42     p average = ..BM
 80a94bc:	2045 6574 706d 6120 6576 6172 6567 6120     E temp average a
 80a94cc:	2073 2038 6962 2074 203d 4800 6c65 6f6c     s 8 bit = .Hello
 80a94dc:	0021 6974 656d 6220 7361 2065 6176 756c     !.time base valu
 80a94ec:	2065 003d 6156 656e 5620 6c61 6575 4409     e =.Vane Value.D
 80a94fc:	7269 6365 6974 6e6f 4809 6165 6964 676e     irection.Heading
 80a950c:	4400 7661 7369 5720 6e69 2064 7053 6565     .Davis Wind Spee
 80a951c:	2064 6554 7473 5200 746f 7461 6f69 736e     d Test.Rotations
 80a952c:	4d09 4850 4200 454d 3832 2030 6574 7473     .MPH.BME280 test
 80a953c:	3100 3832 3678 2034 4c4f 4445 4620 6165     .128x64 OLED Fea
 80a954c:	6874 7265 6957 676e 7420 7365 0074 4c4f     therWing test.OL
 80a955c:	4445 6220 6765 6e75 4200 7475 6f74 206e     ED begun.Button 
 80a956c:	6574 7473 4200 6769 6164 6464 4179 6464     test.BigdaddyAdd
 80a957c:	6569 7720 6165 6874 7265 7320 6174 6974     ie weather stati
 80a958c:	6e6f 0a21 6300 6e6f 656e 7463 6465 0a21     on!..connected!.
 80a959c:	4300 756f 646c 6e20 746f 6620 6e69 2064     .Could not find 
 80a95ac:	2061 6176 696c 2064 4d42 3245 3038 7320     a valid BME280 s
 80a95bc:	6e65 6f73 2c72 6320 6568 6b63 7720 7269     ensor, check wir
 80a95cc:	6e69 2c67 6120 6464 6572 7373 202c 6573     ing, address, se
 80a95dc:	736e 726f 4920 2144 5300 6e65 6f73 4972     nsor ID!.SensorI
 80a95ec:	2044 6177 3a73 3020 0078 2020 2020 2020     D was: 0x.      
 80a95fc:	2020 4449 6f20 2066 7830 4646 7020 6f72       ID of 0xFF pro
 80a960c:	6162 6c62 2079 656d 6e61 2073 2061 6162     bably means a ba
 80a961c:	2064 6461 7264 7365 2c73 6120 4220 504d     d address, a BMP
 80a962c:	3120 3038 6f20 2072 4d42 2050 3830 0a35      180 or BMP 085.
 80a963c:	2000 2020 4449 6f20 2066 7830 3635 302d     .   ID of 0x56-0
 80a964c:	3578 2038 6572 7270 7365 6e65 7374 6120     x58 represents a
 80a965c:	4220 504d 3220 3038 0a2c 2000 2020 2020      BMP 280,..     
 80a966c:	2020 4920 2044 666f 3020 3678 2030 6572        ID of 0x60 re
 80a967c:	7270 7365 6e65 7374 6120 4220 454d 3220     presents a BME 2
 80a968c:	3038 0a2e 2000 2020 2020 2020 4920 2044     80...        ID 
 80a969c:	666f 3020 3678 2031 6572 7270 7365 6e65     of 0x61 represen
 80a96ac:	7374 6120 4220 454d 3620 3038 0a2e 4600     ts a BME 680...F
 80a96bc:	756f 646e 4920 4332 4520 5045 4f52 004d     ound I2C EEPROM.
 80a96cc:	6f46 6e75 2064 3249 2043 5246 4d41 4900     Found I2C FRAM.I
 80a96dc:	4332 4520 5045 4f52 204d 6f6e 2074 6469     2C EEPROM not id
 80a96ec:	6e65 6974 6966 6465 2e20 2e2e 6320 6568     entified ... che
 80a96fc:	6b63 7920 756f 2072 6f63 6e6e 6365 6974     ck your connecti
 80a970c:	6e6f 3f73 0a0d 4f00 6f6f 7370 202c 6f6e     ons?...Ooops, no
 80a971c:	4220 4f4e 3530 2035 6564 6574 7463 6465      BNO055 detected
 80a972c:	2e20 2e2e 4320 6568 6b63 7920 756f 2072      ... Check your 
 80a973c:	6977 6972 676e 6f20 2072 3249 2043 4441     wiring or I2C AD
 80a974c:	5244 0021 4e0a 206f 6143 696c 7262 7461     DR!..No Calibrat
 80a975c:	6f69 206e 6144 6174 6620 726f 7420 6968     ion Data for thi
 80a976c:	2073 6573 736e 726f 6520 6978 7473 2073     s sensor exists 
 80a977c:	6e69 4520 5045 4f52 004d 460a 756f 646e     in EEPROM..Found
 80a978c:	4320 6c61 6269 6172 6974 6e6f 6620 726f      Calibration for
 80a979c:	7420 6968 2073 6573 736e 726f 6920 206e      this sensor in 
 80a97ac:	4545 5250 4d4f 002e 0a0a 6552 7473 726f     EEPROM....Restor
 80a97bc:	6e69 2067 6143 696c 7262 7461 6f69 206e     ing Calibration 
 80a97cc:	6164 6174 7420 206f 6874 2065 4e42 304f     data to the BNO0
 80a97dc:	3535 2e2e 002e 0a0a 6143 696c 7262 7461     55......Calibrat
 80a97ec:	6f69 206e 6164 6174 6c20 616f 6564 2064     ion data loaded 
 80a97fc:	6e69 6f74 4220 4f4e 3530 0035 6f4d 6576     into BNO055.Move
 80a980c:	7320 6e65 6f73 2072 6c73 6769 7468 796c      sensor slightly
 80a981c:	7420 206f 6163 696c 7262 7461 2065 616d      to calibrate ma
 80a982c:	6e67 7465 6d6f 7465 7265 0073 6f4d 6576     gnetometers.Move
 80a983c:	7320 6e65 6f73 2072 6c73 6769 7468 796c      sensor slightly
 80a984c:	5000 656c 7361 2065 6143 696c 7262 7461     .Please Calibrat
 80a985c:	2065 6553 736e 726f 203a 0a00 7546 6c6c     e Sensor: ..Full
 80a986c:	2079 6163 696c 7262 7461 6465 0021 6143     y calibrated!.Ca
 80a987c:	696c 7262 7461 6f69 206e 6552 7573 746c     libration Result
 80a988c:	3a73 0020 0a0a 7453 726f 6e69 2067 6163     s: ...Storing ca
 80a989c:	696c 7262 7461 6f69 206e 6164 6174 7420     libration data t
 80a98ac:	206f 4545 5250 4d4f 2e2e 002e 6144 6174     o EEPROM....Data
 80a98bc:	7320 6f74 6572 2064 6f74 4520 5045 4f52      stored to EEPRO
 80a98cc:	2e4d 0a00 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     M...------------
 80a98dc:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a98ec:	2d2d 2d2d 000a 6564 6166 6c75 2074 4d00     ----..default .M
 80a98fc:	4253 4c00 4253 3c00 5053 5349 7465 6974     SB.LSB.<SPISetti
 80a990c:	676e 2073 6564 6166 6c75 3e74 3c00 5053     ngs default>.<SP
 80a991c:	5349 7465 6974 676e 2073 7325 7525 2520     ISettings %s%u %
 80a992c:	2073 4f4d 4544 7525 003e 0000               s MODE%u>...

080a9938 <_ZTVN8particle11SPISettingsE>:
	...
 80a9940:	1a09 080a 19c9 080a 19dd 080a               ............

080a994c <_ZTV15Adafruit_BNO055>:
	...
 80a9954:	2af1 080a 2b2d 080a 2aef 080a 30bd 080a     .*..-+...*...0..
 80a9964:	2af5 080a                                   .*..

080a9968 <_ZTV17Adafruit_GrayOLED>:
	...
 80a9978:	3b05 080a 47e7 080a 310f 080a 3547 080a     .;...G...1..G5..
 80a9988:	3549 080a 3579 080a 3555 080a 3567 080a     I5..y5..U5..g5..
 80a9998:	3489 080a 3547 080a 376f 080a 3317 080a     .4..G5..o7...3..
 80a99a8:	3591 080a 35cf 080a 3609 080a 364f 080a     .5...5...6..O6..
 80a99b8:	366b 080a 36ed 080a 00a9 080a               k6...6......

080a99c4 <_ZL4font>:
 80a99c4:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a99d4:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a99e4:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a99f4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a9a04:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a9a14:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a9a24:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a9a34:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a9a44:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a9a54:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a9a64:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a9a74:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a9a84:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a9a94:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a9aa4:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a9ab4:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a9ac4:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a9ad4:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a9ae4:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a9af4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a9b04:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a9b14:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a9b24:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a9b34:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a9b44:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a9b54:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a9b64:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a9b74:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a9b84:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a9b94:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a9ba4:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a9bb4:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a9bc4:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a9bd4:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a9be4:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a9bf4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a9c04:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a9c14:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a9c24:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a9c34:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a9c44:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a9c54:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 80a9c64:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a9c74:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a9c84:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 80a9c94:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a9ca4:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 80a9cb4:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 80a9cc4:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 80a9cd4:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a9ce4:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a9cf4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a9d04:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a9d14:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a9d24:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a9d34:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 80a9d44:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 80a9d54:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 80a9d64:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 80a9d74:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 80a9d84:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 80a9d94:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 80a9da4:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 80a9db4:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 80a9dc4:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 80a9dd4:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 80a9de4:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 80a9df4:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 80a9e04:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 80a9e14:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 80a9e24:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 80a9e34:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 80a9e44:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 80a9e54:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 80a9e64:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 80a9e74:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 80a9e84:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 80a9e94:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 80a9ea4:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 80a9eb4:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

080a9ec4 <_ZTV12Adafruit_GFX>:
	...
 80a9ed4:	3b05 080a 47e7 080a 00a9 080a 3547 080a     .;...G......G5..
 80a9ee4:	3549 080a 3579 080a 3555 080a 3567 080a     I5..y5..U5..g5..
 80a9ef4:	3489 080a 3547 080a 376f 080a 376d 080a     .4..G5..o7..m7..
 80a9f04:	3591 080a 35cf 080a 3609 080a 364f 080a     .5...5...6..O6..
 80a9f14:	366b 080a 36ed 080a                         k6...6..

080a9f1c <_ZTV15Adafruit_SH110X>:
	...
 80a9f24:	00a9 080a 00a9 080a 3b05 080a 47e7 080a     .........;...G..
 80a9f34:	310f 080a 3547 080a 3549 080a 3579 080a     .1..G5..I5..y5..
 80a9f44:	3555 080a 3567 080a 3489 080a 3547 080a     U5..g5...4..G5..
 80a9f54:	376f 080a 3317 080a 3591 080a 35cf 080a     o7...3...5...5..
 80a9f64:	3609 080a 364f 080a 366b 080a 36ed 080a     .6..O6..k6...6..
 80a9f74:	3c13 080a                                   .<..

080a9f78 <_ZL12splash2_data>:
 80a9f78:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
 80a9f88:	e000 0000 0000 0000 0000 0000 0000 0100     ................
 80a9f98:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
 80a9fb4:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
 80a9fc4:	f007 0000 0000 0000 0000 0000 0000 0700     ................
 80a9fd4:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
 80a9fe4:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
 80a9ff4:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
 80aa004:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
 80aa014:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
 80aa024:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
 80aa034:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
 80aa044:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
 80aa054:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
 80aa064:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
 80aa074:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
 80aa084:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
 80aa094:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
 80aa0a4:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
 80aa0b4:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
 80aa0c4:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
 80aa0d4:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
 80aa0e4:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
 80aa0f4:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
 80aa10c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
 80aa11c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
 80aa12c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
 80aa13c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
 80aa14c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

080aa158 <_ZTV15Adafruit_SH1107>:
	...
 80aa160:	3dad 080a 3dc1 080a 3b05 080a 47e7 080a     .=...=...;...G..
 80aa170:	310f 080a 3547 080a 3549 080a 3579 080a     .1..G5..I5..y5..
 80aa180:	3555 080a 3567 080a 3489 080a 3547 080a     U5..g5...4..G5..
 80aa190:	376f 080a 3317 080a 3591 080a 35cf 080a     o7...3...5...5..
 80aa1a0:	3609 080a 364f 080a 366b 080a 36ed 080a     .6..O6..k6...6..
 80aa1b0:	3c13 080a                                   .<..

080aa1b4 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
 80aa1b4:	00d3 7fa8                                   ....

080aa1b8 <_ZZN15Adafruit_SH11075beginEhbE4init>:
 80aa1b8:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
 80aa1c8:	35db 3fa8 a6a4                              .5.?..

080aa1ce <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80aa1ce:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
 80aa1de:	766f 0066 7061 0070 5925 252d 2d6d 6425     ovf.app.%Y-%m-%d
 80aa1ee:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80aa1fe:	6d69 0065 0000                              ime...

080aa204 <_ZTV9IPAddress>:
	...
 80aa20c:	4d3f 080a 4d3d 080a 4d71 080a               ?M..=M..qM..

080aa218 <_ZTV9USBSerial>:
	...
 80aa220:	4e0b 080a 4e71 080a 4e49 080a 47e7 080a     .N..qN..IN...G..
 80aa230:	4e3b 080a 4e0d 080a 4e1d 080a 4e6b 080a     ;N...N...N..kN..
 80aa240:	4e2d 080a 4e05 080a                         -N...N..

080aa248 <_ZTV11USARTSerial>:
	...
 80aa250:	4ffd 080a 5065 080a 5041 080a 47e7 080a     .O..eP..AP...G..
 80aa260:	5011 080a 502d 080a 501f 080a 503b 080a     .P..-P...P..;P..
 80aa270:	4fff 080a 5003 080a                         .O...P..

080aa278 <_ZTV7TwoWire>:
	...
 80aa280:	509d 080a 50e7 080a 50bf 080a 509f 080a     .P...P...P...P..
 80aa290:	50c7 080a 50cf 080a 50d7 080a 50df 080a     .P...P...P...P..

080aa2a0 <_ZTVN5spark9WiFiClassE>:
	...
 80aa2a8:	5231 080a 5227 080a 521d 080a 519b 080a     1R..'R...R...Q..
 80aa2b8:	4b0d 080a 5211 080a 5291 080a 5299 080a     .K...R...R...R..
 80aa2c8:	5205 080a 51fd 080a 51f3 080a 51e9 080a     .R...Q...Q...Q..
 80aa2d8:	51a5 080a                                   .Q..

080aa2dc <_ZTVN5spark12NetworkClassE>:
	...
 80aa2e4:	5251 080a 525b 080a 5265 080a 526f 080a     QR..[R..eR..oR..
 80aa2f4:	5279 080a 5285 080a 5291 080a 5299 080a     yR...R...R...R..
 80aa304:	52a1 080a 52ad 080a 52b5 080a 52bf 080a     .R...R...R...R..
 80aa314:	52c9 080a                                   .R..

080aa318 <_ZSt7nothrow>:
	...

080aa320 <CSWTCH.8>:
 80aa320:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
 80aa330:	21d2 7f33 d97c c002                         .!3.|...

080aa338 <CSWTCH.9>:
 80aa338:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
 80aa348:	2d18 5444 21fb c009 0000 0000               .-DT.!......

080aa354 <CSWTCH.8>:
 80aa354:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

080aa360 <CSWTCH.9>:
 80aa360:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

080aa36c <npio2_hw>:
 80aa36c:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
 80aa37c:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
 80aa38c:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
 80aa39c:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
 80aa3ac:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
 80aa3bc:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
 80aa3cc:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
 80aa3dc:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

080aa3ec <two_over_pi>:
 80aa3ec:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
 80aa3fc:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
 80aa40c:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
 80aa41c:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
 80aa42c:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
 80aa43c:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
 80aa44c:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
 80aa45c:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
 80aa46c:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
 80aa47c:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
 80aa48c:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
 80aa49c:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
 80aa4ac:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
 80aa4bc:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
 80aa4cc:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
 80aa4dc:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
 80aa4ec:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
 80aa4fc:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
 80aa50c:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
 80aa51c:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
 80aa52c:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
 80aa53c:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
 80aa54c:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
 80aa55c:	00de 0000 0005 0000 0098 0000 000f 0000     ................
 80aa56c:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
 80aa57c:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
 80aa58c:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
 80aa59c:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
 80aa5ac:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
 80aa5bc:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
 80aa5cc:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
 80aa5dc:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
 80aa5ec:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
 80aa5fc:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
 80aa60c:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
 80aa61c:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
 80aa62c:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
 80aa63c:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
 80aa64c:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
 80aa65c:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
 80aa66c:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
 80aa67c:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
 80aa68c:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
 80aa69c:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
 80aa6ac:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
 80aa6bc:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
 80aa6cc:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
 80aa6dc:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
 80aa6ec:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
 80aa6fc:	008c 0000 006b 0000                         ....k...

080aa704 <PIo2>:
 80aa704:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
 80aa714:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
 80aa724:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

080aa730 <init_jk>:
 80aa730:	0004 0000 0007 0000 0009 0000 0000 0000     ................

080aa740 <atanhi>:
 80aa740:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
 80aa750:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

080aa760 <atanlo>:
 80aa760:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
 80aa770:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

080aa780 <TWO52>:
 80aa780:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080aa790 <atanhi>:
 80aa790:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

080aa7a0 <atanlo>:
 80aa7a0:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
 80aa7b0:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
 80aa7c0:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
 80aa7d0:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
 80aa7e0:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
 80aa7f0:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
 80aa800:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
 80aa810:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
 80aa820:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
 80aa830:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
 80aa840:	2e64 0063                                   d.c.

080aa844 <link_const_variable_data_end>:
 80aa844:	080a0ce5 	.word	0x080a0ce5
 80aa848:	080a469d 	.word	0x080a469d
 80aa84c:	080a4b19 	.word	0x080a4b19
 80aa850:	080a4b9d 	.word	0x080a4b9d
 80aa854:	080a4bd1 	.word	0x080a4bd1
 80aa858:	080a523d 	.word	0x080a523d
 80aa85c:	080a5319 	.word	0x080a5319
 80aa860:	080a5515 	.word	0x080a5515

080aa864 <link_constructors_end>:
	...
