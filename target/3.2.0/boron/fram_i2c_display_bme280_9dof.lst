
z:/Personal/Electronics/particle/fram_i2c_display_bme280_9dof/target/3.2.0/boron/fram_i2c_display_bme280_9dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a870  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000be890  000be890  0000e890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000be898  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003e438  000be89c  0001e438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000340  2003e4b0  2003e4b0  0002e4b0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000be914  000be914  0001e914  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000be93c  000be93c  0001e93c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0016024f  00000000  00000000  0001e940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019f1e  00000000  00000000  0017eb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00045c14  00000000  00000000  00198aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003398  00000000  00000000  001de6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000ab88  00000000  00000000  001e1a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046c8a  00000000  00000000  001ec5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005ab78  00000000  00000000  0023326b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00130d8f  00000000  00000000  0028dde3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009f90  00000000  00000000  003beb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f008 ffaf 	bl	bcf94 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f008 ffb7 	bl	bcfb0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e438 	.word	0x2003e438
   b404c:	000be89c 	.word	0x000be89c
   b4050:	2003e4b0 	.word	0x2003e4b0
   b4054:	2003e4b0 	.word	0x2003e4b0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 f86b 	bl	b913c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000be86c 	.word	0x000be86c
   b4080:	000be890 	.word	0x000be890

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bb86 	b.w	b5794 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f88d 	bl	b51a8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 b80b 	b.w	b90ac <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bbfd 	b.w	b8894 <malloc>

000b409a <_Znaj>:
   b409a:	f004 bbfb 	b.w	b8894 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f004 bc01 	b.w	b88a4 <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	2100      	movs	r1, #0
   b40aa:	200c      	movs	r0, #12
   b40ac:	f004 fb36 	bl	b871c <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b841d 	.word	0x000b841d

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_Z12isr_rotationv>:
    Serial.print(calibData.mag_radius);
}


// This is the function that the interrupt calls to increment the rotation count
void isr_rotation () {
   b40c8:	b510      	push	{r4, lr}
//a debounce time of 22 ms is equivalent to wind of 100 mph.
if ((millis() - ContactBounceTime) > 22 ) { // debounce the switch contact.
   b40ca:	4c07      	ldr	r4, [pc, #28]	; (b40e8 <_Z12isr_rotationv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40cc:	f004 f9ae 	bl	b842c <HAL_Timer_Get_Milli_Seconds>
   b40d0:	6823      	ldr	r3, [r4, #0]
   b40d2:	1ac0      	subs	r0, r0, r3
   b40d4:	2816      	cmp	r0, #22
   b40d6:	d906      	bls.n	b40e6 <_Z12isr_rotationv+0x1e>
Rotations++;
   b40d8:	4a04      	ldr	r2, [pc, #16]	; (b40ec <_Z12isr_rotationv+0x24>)
   b40da:	6813      	ldr	r3, [r2, #0]
   b40dc:	3301      	adds	r3, #1
   b40de:	6013      	str	r3, [r2, #0]
   b40e0:	f004 f9a4 	bl	b842c <HAL_Timer_Get_Milli_Seconds>
ContactBounceTime = millis();
   b40e4:	6020      	str	r0, [r4, #0]
}

}
   b40e6:	bd10      	pop	{r4, pc}
   b40e8:	2003e4b0 	.word	0x2003e4b0
   b40ec:	2003e4b4 	.word	0x2003e4b4

000b40f0 <_ZN5Print5printIsLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40f0:	b570      	push	{r4, r5, r6, lr}
   b40f2:	4606      	mov	r6, r0
   b40f4:	460c      	mov	r4, r1
{
    if (base == 0) {
   b40f6:	4615      	mov	r5, r2
   b40f8:	b92a      	cbnz	r2, b4106 <_ZN5Print5printIsLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b40fa:	6803      	ldr	r3, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b40fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
   b4100:	689b      	ldr	r3, [r3, #8]
   b4102:	b2c9      	uxtb	r1, r1
   b4104:	4718      	bx	r3
        if (n < 0 && base == 10) {
   b4106:	2900      	cmp	r1, #0
   b4108:	da0b      	bge.n	b4122 <_ZN5Print5printIsLi0EEEjT_i.isra.0+0x32>
   b410a:	2a0a      	cmp	r2, #10
   b410c:	d109      	bne.n	b4122 <_ZN5Print5printIsLi0EEEjT_i.isra.0+0x32>
            t = print('-');
   b410e:	212d      	movs	r1, #45	; 0x2d
   b4110:	f004 fdd8 	bl	b8cc4 <_ZN5Print5printEc>
            val = -n;
   b4114:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4116:	b2ea      	uxtb	r2, r5
   b4118:	4630      	mov	r0, r6
}
   b411a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b411e:	f004 bdec 	b.w	b8cfa <_ZN5Print11printNumberEmh>
            val = n;
   b4122:	4621      	mov	r1, r4
   b4124:	e7f7      	b.n	b4116 <_ZN5Print5printIsLi0EEEjT_i.isra.0+0x26>

000b4126 <_ZN5Print5printIlLi0EEEjT_i.isra.0>:
size_t Print::print(T n, int base)
   b4126:	b570      	push	{r4, r5, r6, lr}
   b4128:	4606      	mov	r6, r0
   b412a:	460c      	mov	r4, r1
    if (base == 0) {
   b412c:	4615      	mov	r5, r2
   b412e:	b92a      	cbnz	r2, b413c <_ZN5Print5printIlLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b4130:	6803      	ldr	r3, [r0, #0]
}
   b4132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
   b4136:	689b      	ldr	r3, [r3, #8]
   b4138:	b2c9      	uxtb	r1, r1
   b413a:	4718      	bx	r3
        if (n < 0 && base == 10) {
   b413c:	2900      	cmp	r1, #0
   b413e:	da0b      	bge.n	b4158 <_ZN5Print5printIlLi0EEEjT_i.isra.0+0x32>
   b4140:	2a0a      	cmp	r2, #10
   b4142:	d109      	bne.n	b4158 <_ZN5Print5printIlLi0EEEjT_i.isra.0+0x32>
            t = print('-');
   b4144:	212d      	movs	r1, #45	; 0x2d
   b4146:	f004 fdbd 	bl	b8cc4 <_ZN5Print5printEc>
            val = -n;
   b414a:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b414c:	b2ea      	uxtb	r2, r5
   b414e:	4630      	mov	r0, r6
}
   b4150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4154:	f004 bdd1 	b.w	b8cfa <_ZN5Print11printNumberEmh>
            val = n;
   b4158:	4621      	mov	r1, r4
   b415a:	e7f7      	b.n	b414c <_ZN5Print5printIlLi0EEEjT_i.isra.0+0x26>

000b415c <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b415c:	b912      	cbnz	r2, b4164 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b415e:	6803      	ldr	r3, [r0, #0]
   b4160:	689b      	ldr	r3, [r3, #8]
   b4162:	4718      	bx	r3
        return printNumber(val, base) + t;
   b4164:	b2d2      	uxtb	r2, r2
   b4166:	f004 bdc8 	b.w	b8cfa <_ZN5Print11printNumberEmh>

000b416a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b416a:	b510      	push	{r4, lr}
   b416c:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b416e:	f7ff fff5 	bl	b415c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b4172:	4620      	mov	r0, r4
    }
   b4174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4178:	f004 bda7 	b.w	b8cca <_ZN5Print7printlnEv>

000b417c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b417c:	b510      	push	{r4, lr}
   b417e:	4604      	mov	r4, r0
    if (base == 0) {
   b4180:	b942      	cbnz	r2, b4194 <_ZN5Print7printlnImLi0EEEjT_i.isra.0+0x18>
        return write(n);
   b4182:	6802      	ldr	r2, [r0, #0]
   b4184:	b2c9      	uxtb	r1, r1
   b4186:	6892      	ldr	r2, [r2, #8]
   b4188:	4790      	blx	r2
        n += println();
   b418a:	4620      	mov	r0, r4
    }
   b418c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4190:	f004 bd9b 	b.w	b8cca <_ZN5Print7printlnEv>
        return printNumber(val, base) + t;
   b4194:	b2d2      	uxtb	r2, r2
   b4196:	f004 fdb0 	bl	b8cfa <_ZN5Print11printNumberEmh>
   b419a:	e7f6      	b.n	b418a <_ZN5Print7printlnImLi0EEEjT_i.isra.0+0xe>

000b419c <_Z19displaySensorStatusv>:
{
   b419c:	b513      	push	{r0, r1, r4, lr}
    system_status = self_test_results = system_error = 0;
   b419e:	2300      	movs	r3, #0
    Serial.println("");
   b41a0:	4c21      	ldr	r4, [pc, #132]	; (b4228 <_Z19displaySensorStatusv+0x8c>)
    system_status = self_test_results = system_error = 0;
   b41a2:	f88d 3007 	strb.w	r3, [sp, #7]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   b41a6:	f10d 0206 	add.w	r2, sp, #6
   b41aa:	f10d 0105 	add.w	r1, sp, #5
    system_status = self_test_results = system_error = 0;
   b41ae:	f88d 3006 	strb.w	r3, [sp, #6]
   b41b2:	f88d 3005 	strb.w	r3, [sp, #5]
    bno.getSystemStatus(&system_status, &self_test_results, &system_error);
   b41b6:	481d      	ldr	r0, [pc, #116]	; (b422c <_Z19displaySensorStatusv+0x90>)
   b41b8:	f10d 0307 	add.w	r3, sp, #7
   b41bc:	f002 ffd8 	bl	b7170 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>
    Serial.println("");
   b41c0:	f005 f8ca 	bl	b9358 <_Z16_fetch_usbserialv>
   b41c4:	4621      	mov	r1, r4
   b41c6:	f004 fd8c 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    Serial.print("System Status: 0x");
   b41ca:	f005 f8c5 	bl	b9358 <_Z16_fetch_usbserialv>
   b41ce:	4918      	ldr	r1, [pc, #96]	; (b4230 <_Z19displaySensorStatusv+0x94>)
   b41d0:	f004 fd74 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.println(system_status, HEX);
   b41d4:	f005 f8c0 	bl	b9358 <_Z16_fetch_usbserialv>
   b41d8:	2210      	movs	r2, #16
   b41da:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b41de:	f7ff ffc4 	bl	b416a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("Self Test:     0x");
   b41e2:	f005 f8b9 	bl	b9358 <_Z16_fetch_usbserialv>
   b41e6:	4913      	ldr	r1, [pc, #76]	; (b4234 <_Z19displaySensorStatusv+0x98>)
   b41e8:	f004 fd68 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.println(self_test_results, HEX);
   b41ec:	f005 f8b4 	bl	b9358 <_Z16_fetch_usbserialv>
   b41f0:	2210      	movs	r2, #16
   b41f2:	f89d 1006 	ldrb.w	r1, [sp, #6]
   b41f6:	f7ff ffb8 	bl	b416a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("System Error:  0x");
   b41fa:	f005 f8ad 	bl	b9358 <_Z16_fetch_usbserialv>
   b41fe:	490e      	ldr	r1, [pc, #56]	; (b4238 <_Z19displaySensorStatusv+0x9c>)
   b4200:	f004 fd5c 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.println(system_error, HEX);
   b4204:	f005 f8a8 	bl	b9358 <_Z16_fetch_usbserialv>
   b4208:	2210      	movs	r2, #16
   b420a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b420e:	f7ff ffac 	bl	b416a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.println("");
   b4212:	f005 f8a1 	bl	b9358 <_Z16_fetch_usbserialv>
   b4216:	4621      	mov	r1, r4
   b4218:	f004 fd63 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    delay(500);
   b421c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4220:	f004 ff18 	bl	b9054 <delay>
}
   b4224:	b002      	add	sp, #8
   b4226:	bd10      	pop	{r4, pc}
   b4228:	000bd3a9 	.word	0x000bd3a9
   b422c:	2003e538 	.word	0x2003e538
   b4230:	000bd144 	.word	0x000bd144
   b4234:	000bd156 	.word	0x000bd156
   b4238:	000bd168 	.word	0x000bd168

000b423c <_Z15read_bme_valuesRfS_S_S_>:
void read_bme_values(float& bme_temperature, float& bme_pressure, float& bme_humidity, float& bme_altitude){
   b423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b423e:	4607      	mov	r7, r0
bme_temperature = bme.readTemperature()*1.8F + 32.;
   b4240:	4813      	ldr	r0, [pc, #76]	; (b4290 <_Z15read_bme_valuesRfS_S_S_+0x54>)
void read_bme_values(float& bme_temperature, float& bme_pressure, float& bme_humidity, float& bme_altitude){
   b4242:	460e      	mov	r6, r1
   b4244:	4615      	mov	r5, r2
   b4246:	461c      	mov	r4, r3
bme_temperature = bme.readTemperature()*1.8F + 32.;
   b4248:	f002 f824 	bl	b6294 <_ZN15Adafruit_BME28015readTemperatureEv>
   b424c:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4294 <_Z15read_bme_valuesRfS_S_S_+0x58>
   b4250:	eddf 7a11 	vldr	s15, [pc, #68]	; b4298 <_Z15read_bme_valuesRfS_S_S_+0x5c>
bme_pressure = bme.readPressure() / 101325.0F * 760.0F;
   b4254:	480e      	ldr	r0, [pc, #56]	; (b4290 <_Z15read_bme_valuesRfS_S_S_+0x54>)
   b4256:	eee0 7a07 	vfma.f32	s15, s0, s14
bme_temperature = bme.readTemperature()*1.8F + 32.;
   b425a:	edc7 7a00 	vstr	s15, [r7]
bme_pressure = bme.readPressure() / 101325.0F * 760.0F;
   b425e:	f002 f893 	bl	b6388 <_ZN15Adafruit_BME28012readPressureEv>
   b4262:	ed9f 7a0e 	vldr	s14, [pc, #56]	; b429c <_Z15read_bme_valuesRfS_S_S_+0x60>
bme_humidity = bme.readHumidity();
   b4266:	480a      	ldr	r0, [pc, #40]	; (b4290 <_Z15read_bme_valuesRfS_S_S_+0x54>)
bme_pressure = bme.readPressure() / 101325.0F * 760.0F;
   b4268:	eec0 7a07 	vdiv.f32	s15, s0, s14
   b426c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; b42a0 <_Z15read_bme_valuesRfS_S_S_+0x64>
   b4270:	ee67 7a87 	vmul.f32	s15, s15, s14
   b4274:	edc6 7a00 	vstr	s15, [r6]
bme_humidity = bme.readHumidity();
   b4278:	f002 f83c 	bl	b62f4 <_ZN15Adafruit_BME28012readHumidityEv>
bme_altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
   b427c:	4804      	ldr	r0, [pc, #16]	; (b4290 <_Z15read_bme_valuesRfS_S_S_+0x54>)
bme_humidity = bme.readHumidity();
   b427e:	ed85 0a00 	vstr	s0, [r5]
bme_altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
   b4282:	ed9f 0a08 	vldr	s0, [pc, #32]	; b42a4 <_Z15read_bme_valuesRfS_S_S_+0x68>
   b4286:	f002 f94f 	bl	b6528 <_ZN15Adafruit_BME28012readAltitudeEf>
   b428a:	ed84 0a00 	vstr	s0, [r4]
}
   b428e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4290:	2003e4c4 	.word	0x2003e4c4
   b4294:	3fe66666 	.word	0x3fe66666
   b4298:	42000000 	.word	0x42000000
   b429c:	47c5e680 	.word	0x47c5e680
   b42a0:	443e0000 	.word	0x443e0000
   b42a4:	447d5000 	.word	0x447d5000

000b42a8 <_Z11printValuesRfS_S_S_>:
void printValues(float& bme_temperature, float& bme_pressure, float& bme_humidity, float& bme_altitude) {
   b42a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b42aa:	4614      	mov	r4, r2
   b42ac:	461d      	mov	r5, r3
   b42ae:	460e      	mov	r6, r1
   b42b0:	4607      	mov	r7, r0
    Serial.print("\n\nTemperature = ");
   b42b2:	f005 f851 	bl	b9358 <_Z16_fetch_usbserialv>
   b42b6:	4924      	ldr	r1, [pc, #144]	; (b4348 <_Z11printValuesRfS_S_S_+0xa0>)
   b42b8:	f004 fd00 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(bme_temperature);
   b42bc:	f005 f84c 	bl	b9358 <_Z16_fetch_usbserialv>
   b42c0:	ed97 0a00 	vldr	s0, [r7]
   b42c4:	2102      	movs	r1, #2
   b42c6:	f004 fe2d 	bl	b8f24 <_ZN5Print5printEfi>
    Serial.println(" F");
   b42ca:	f005 f845 	bl	b9358 <_Z16_fetch_usbserialv>
   b42ce:	491f      	ldr	r1, [pc, #124]	; (b434c <_Z11printValuesRfS_S_S_+0xa4>)
   b42d0:	f004 fd07 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    Serial.print("Pressure = ");
   b42d4:	f005 f840 	bl	b9358 <_Z16_fetch_usbserialv>
   b42d8:	491d      	ldr	r1, [pc, #116]	; (b4350 <_Z11printValuesRfS_S_S_+0xa8>)
   b42da:	f004 fcef 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(bme_pressure);
   b42de:	f005 f83b 	bl	b9358 <_Z16_fetch_usbserialv>
   b42e2:	ed96 0a00 	vldr	s0, [r6]
   b42e6:	2102      	movs	r1, #2
   b42e8:	f004 fe1c 	bl	b8f24 <_ZN5Print5printEfi>
    Serial.println(" mmHg");
   b42ec:	f005 f834 	bl	b9358 <_Z16_fetch_usbserialv>
   b42f0:	4918      	ldr	r1, [pc, #96]	; (b4354 <_Z11printValuesRfS_S_S_+0xac>)
   b42f2:	f004 fcf6 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    Serial.print("Approx. Altitude = ");
   b42f6:	f005 f82f 	bl	b9358 <_Z16_fetch_usbserialv>
   b42fa:	4917      	ldr	r1, [pc, #92]	; (b4358 <_Z11printValuesRfS_S_S_+0xb0>)
   b42fc:	f004 fcde 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(bme_altitude);
   b4300:	f005 f82a 	bl	b9358 <_Z16_fetch_usbserialv>
   b4304:	ed95 0a00 	vldr	s0, [r5]
   b4308:	2102      	movs	r1, #2
   b430a:	f004 fe0b 	bl	b8f24 <_ZN5Print5printEfi>
    Serial.println(" m");
   b430e:	f005 f823 	bl	b9358 <_Z16_fetch_usbserialv>
   b4312:	4912      	ldr	r1, [pc, #72]	; (b435c <_Z11printValuesRfS_S_S_+0xb4>)
   b4314:	f004 fce5 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    Serial.print("Humidity = ");
   b4318:	f005 f81e 	bl	b9358 <_Z16_fetch_usbserialv>
   b431c:	4910      	ldr	r1, [pc, #64]	; (b4360 <_Z11printValuesRfS_S_S_+0xb8>)
   b431e:	f004 fccd 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(bme_humidity);
   b4322:	f005 f819 	bl	b9358 <_Z16_fetch_usbserialv>
   b4326:	ed94 0a00 	vldr	s0, [r4]
   b432a:	2102      	movs	r1, #2
   b432c:	f004 fdfa 	bl	b8f24 <_ZN5Print5printEfi>
    Serial.println(" %");
   b4330:	f005 f812 	bl	b9358 <_Z16_fetch_usbserialv>
   b4334:	490b      	ldr	r1, [pc, #44]	; (b4364 <_Z11printValuesRfS_S_S_+0xbc>)
   b4336:	f004 fcd4 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    Serial.println();
   b433a:	f005 f80d 	bl	b9358 <_Z16_fetch_usbserialv>
}
   b433e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println();
   b4342:	f004 bcc2 	b.w	b8cca <_ZN5Print7printlnEv>
   b4346:	bf00      	nop
   b4348:	000bd17a 	.word	0x000bd17a
   b434c:	000bd18b 	.word	0x000bd18b
   b4350:	000bd18e 	.word	0x000bd18e
   b4354:	000bd19a 	.word	0x000bd19a
   b4358:	000bd1a0 	.word	0x000bd1a0
   b435c:	000bd1b4 	.word	0x000bd1b4
   b4360:	000bd1b7 	.word	0x000bd1b7
   b4364:	000bd1c3 	.word	0x000bd1c3

000b4368 <_Z20displaySensorDetailsv>:
{
   b4368:	b530      	push	{r4, r5, lr}
  Serial.println("------------------------------------");
   b436a:	4d3b      	ldr	r5, [pc, #236]	; (b4458 <_Z20displaySensorDetailsv+0xf0>)
  bno.getSensor(&sensor);
   b436c:	483b      	ldr	r0, [pc, #236]	; (b445c <_Z20displaySensorDetailsv+0xf4>)
{
   b436e:	b08b      	sub	sp, #44	; 0x2c
  bno.getSensor(&sensor);
   b4370:	4669      	mov	r1, sp
   b4372:	f002 fd97 	bl	b6ea4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
  Serial.println("------------------------------------");
   b4376:	f004 ffef 	bl	b9358 <_Z16_fetch_usbserialv>
   b437a:	4629      	mov	r1, r5
   b437c:	f004 fcb1 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
   b4380:	f004 ffea 	bl	b9358 <_Z16_fetch_usbserialv>
   b4384:	4936      	ldr	r1, [pc, #216]	; (b4460 <_Z20displaySensorDetailsv+0xf8>)
   b4386:	f004 fc99 	bl	b8cbc <_ZN5Print5printEPKc>
   b438a:	f004 ffe5 	bl	b9358 <_Z16_fetch_usbserialv>
   b438e:	4669      	mov	r1, sp
   b4390:	f004 fca7 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
   b4394:	f004 ffe0 	bl	b9358 <_Z16_fetch_usbserialv>
   b4398:	4932      	ldr	r1, [pc, #200]	; (b4464 <_Z20displaySensorDetailsv+0xfc>)
   b439a:	f004 fc8f 	bl	b8cbc <_ZN5Print5printEPKc>
   b439e:	f004 ffdb 	bl	b9358 <_Z16_fetch_usbserialv>
        size_t n = print(b, base);
   b43a2:	220a      	movs	r2, #10
   b43a4:	9903      	ldr	r1, [sp, #12]
   b43a6:	4604      	mov	r4, r0
   b43a8:	f7ff febd 	bl	b4126 <_ZN5Print5printIlLi0EEEjT_i.isra.0>
        n += println();
   b43ac:	4620      	mov	r0, r4
   b43ae:	f004 fc8c 	bl	b8cca <_ZN5Print7printlnEv>
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
   b43b2:	f004 ffd1 	bl	b9358 <_Z16_fetch_usbserialv>
   b43b6:	492c      	ldr	r1, [pc, #176]	; (b4468 <_Z20displaySensorDetailsv+0x100>)
   b43b8:	f004 fc80 	bl	b8cbc <_ZN5Print5printEPKc>
   b43bc:	f004 ffcc 	bl	b9358 <_Z16_fetch_usbserialv>
        size_t n = print(b, base);
   b43c0:	220a      	movs	r2, #10
   b43c2:	9904      	ldr	r1, [sp, #16]
   b43c4:	4604      	mov	r4, r0
   b43c6:	f7ff feae 	bl	b4126 <_ZN5Print5printIlLi0EEEjT_i.isra.0>
        n += println();
   b43ca:	4620      	mov	r0, r4
   b43cc:	f004 fc7d 	bl	b8cca <_ZN5Print7printlnEv>
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" xxx");
   b43d0:	4c26      	ldr	r4, [pc, #152]	; (b446c <_Z20displaySensorDetailsv+0x104>)
   b43d2:	f004 ffc1 	bl	b9358 <_Z16_fetch_usbserialv>
   b43d6:	4926      	ldr	r1, [pc, #152]	; (b4470 <_Z20displaySensorDetailsv+0x108>)
   b43d8:	f004 fc70 	bl	b8cbc <_ZN5Print5printEPKc>
   b43dc:	f004 ffbc 	bl	b9358 <_Z16_fetch_usbserialv>
   b43e0:	ed9d 0a06 	vldr	s0, [sp, #24]
   b43e4:	2102      	movs	r1, #2
   b43e6:	f004 fd9d 	bl	b8f24 <_ZN5Print5printEfi>
   b43ea:	f004 ffb5 	bl	b9358 <_Z16_fetch_usbserialv>
   b43ee:	4621      	mov	r1, r4
   b43f0:	f004 fc77 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" xxx");
   b43f4:	f004 ffb0 	bl	b9358 <_Z16_fetch_usbserialv>
   b43f8:	491e      	ldr	r1, [pc, #120]	; (b4474 <_Z20displaySensorDetailsv+0x10c>)
   b43fa:	f004 fc5f 	bl	b8cbc <_ZN5Print5printEPKc>
   b43fe:	f004 ffab 	bl	b9358 <_Z16_fetch_usbserialv>
   b4402:	ed9d 0a07 	vldr	s0, [sp, #28]
   b4406:	2102      	movs	r1, #2
   b4408:	f004 fd8c 	bl	b8f24 <_ZN5Print5printEfi>
   b440c:	f004 ffa4 	bl	b9358 <_Z16_fetch_usbserialv>
   b4410:	4621      	mov	r1, r4
   b4412:	f004 fc66 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" xxx");
   b4416:	f004 ff9f 	bl	b9358 <_Z16_fetch_usbserialv>
   b441a:	4917      	ldr	r1, [pc, #92]	; (b4478 <_Z20displaySensorDetailsv+0x110>)
   b441c:	f004 fc4e 	bl	b8cbc <_ZN5Print5printEPKc>
   b4420:	f004 ff9a 	bl	b9358 <_Z16_fetch_usbserialv>
   b4424:	ed9d 0a08 	vldr	s0, [sp, #32]
   b4428:	2102      	movs	r1, #2
   b442a:	f004 fd7b 	bl	b8f24 <_ZN5Print5printEfi>
   b442e:	f004 ff93 	bl	b9358 <_Z16_fetch_usbserialv>
   b4432:	4621      	mov	r1, r4
   b4434:	f004 fc55 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  Serial.println("------------------------------------");
   b4438:	f004 ff8e 	bl	b9358 <_Z16_fetch_usbserialv>
   b443c:	4629      	mov	r1, r5
   b443e:	f004 fc50 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  Serial.println("");
   b4442:	f004 ff89 	bl	b9358 <_Z16_fetch_usbserialv>
   b4446:	490d      	ldr	r1, [pc, #52]	; (b447c <_Z20displaySensorDetailsv+0x114>)
   b4448:	f004 fc4b 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  delay(500);
   b444c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4450:	f004 fe00 	bl	b9054 <delay>
}
   b4454:	b00b      	add	sp, #44	; 0x2c
   b4456:	bd30      	pop	{r4, r5, pc}
   b4458:	000bd1c6 	.word	0x000bd1c6
   b445c:	2003e538 	.word	0x2003e538
   b4460:	000bd1eb 	.word	0x000bd1eb
   b4464:	000bd1fa 	.word	0x000bd1fa
   b4468:	000bd209 	.word	0x000bd209
   b446c:	000bd227 	.word	0x000bd227
   b4470:	000bd218 	.word	0x000bd218
   b4474:	000bd22c 	.word	0x000bd22c
   b4478:	000bd23b 	.word	0x000bd23b
   b447c:	000bd3a9 	.word	0x000bd3a9

000b4480 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>:
{
   b4480:	b538      	push	{r3, r4, r5, lr}
   b4482:	4604      	mov	r4, r0
    Serial.println("\nCalibration offsets \n");
   b4484:	f004 ff68 	bl	b9358 <_Z16_fetch_usbserialv>
   b4488:	494c      	ldr	r1, [pc, #304]	; (b45bc <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x13c>)
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   b448a:	4d4d      	ldr	r5, [pc, #308]	; (b45c0 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x140>)
    Serial.println("\nCalibration offsets \n");
   b448c:	f004 fc29 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    Serial.print("Accelerometer: ");
   b4490:	f004 ff62 	bl	b9358 <_Z16_fetch_usbserialv>
   b4494:	494b      	ldr	r1, [pc, #300]	; (b45c4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x144>)
   b4496:	f004 fc11 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_x); Serial.print(" ");
   b449a:	f004 ff5d 	bl	b9358 <_Z16_fetch_usbserialv>
   b449e:	220a      	movs	r2, #10
   b44a0:	f9b4 1000 	ldrsh.w	r1, [r4]
   b44a4:	f7ff fe24 	bl	b40f0 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
   b44a8:	f004 ff56 	bl	b9358 <_Z16_fetch_usbserialv>
   b44ac:	4629      	mov	r1, r5
   b44ae:	f004 fc05 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_y); Serial.print(" ");
   b44b2:	f004 ff51 	bl	b9358 <_Z16_fetch_usbserialv>
   b44b6:	220a      	movs	r2, #10
   b44b8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   b44bc:	f7ff fe18 	bl	b40f0 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
   b44c0:	f004 ff4a 	bl	b9358 <_Z16_fetch_usbserialv>
   b44c4:	4629      	mov	r1, r5
   b44c6:	f004 fbf9 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_offset_z); Serial.print(" ");
   b44ca:	f004 ff45 	bl	b9358 <_Z16_fetch_usbserialv>
   b44ce:	220a      	movs	r2, #10
   b44d0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   b44d4:	f7ff fe0c 	bl	b40f0 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
   b44d8:	f004 ff3e 	bl	b9358 <_Z16_fetch_usbserialv>
   b44dc:	4629      	mov	r1, r5
   b44de:	f004 fbed 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print("\nGyro: ");
   b44e2:	f004 ff39 	bl	b9358 <_Z16_fetch_usbserialv>
   b44e6:	4938      	ldr	r1, [pc, #224]	; (b45c8 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x148>)
   b44e8:	f004 fbe8 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_x); Serial.print(" ");
   b44ec:	f004 ff34 	bl	b9358 <_Z16_fetch_usbserialv>
   b44f0:	220a      	movs	r2, #10
   b44f2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b44f6:	f7ff fdfb 	bl	b40f0 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
   b44fa:	f004 ff2d 	bl	b9358 <_Z16_fetch_usbserialv>
   b44fe:	4629      	mov	r1, r5
   b4500:	f004 fbdc 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_y); Serial.print(" ");
   b4504:	f004 ff28 	bl	b9358 <_Z16_fetch_usbserialv>
   b4508:	220a      	movs	r2, #10
   b450a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   b450e:	f7ff fdef 	bl	b40f0 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
   b4512:	f004 ff21 	bl	b9358 <_Z16_fetch_usbserialv>
   b4516:	4629      	mov	r1, r5
   b4518:	f004 fbd0 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(calibData.gyro_offset_z); Serial.print(" ");
   b451c:	f004 ff1c 	bl	b9358 <_Z16_fetch_usbserialv>
   b4520:	220a      	movs	r2, #10
   b4522:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4526:	f7ff fde3 	bl	b40f0 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
   b452a:	f004 ff15 	bl	b9358 <_Z16_fetch_usbserialv>
   b452e:	4629      	mov	r1, r5
   b4530:	f004 fbc4 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print("\nMag: ");
   b4534:	f004 ff10 	bl	b9358 <_Z16_fetch_usbserialv>
   b4538:	4924      	ldr	r1, [pc, #144]	; (b45cc <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x14c>)
   b453a:	f004 fbbf 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_x); Serial.print(" ");
   b453e:	f004 ff0b 	bl	b9358 <_Z16_fetch_usbserialv>
   b4542:	220a      	movs	r2, #10
   b4544:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   b4548:	f7ff fdd2 	bl	b40f0 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
   b454c:	f004 ff04 	bl	b9358 <_Z16_fetch_usbserialv>
   b4550:	4629      	mov	r1, r5
   b4552:	f004 fbb3 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_y); Serial.print(" ");
   b4556:	f004 feff 	bl	b9358 <_Z16_fetch_usbserialv>
   b455a:	220a      	movs	r2, #10
   b455c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b4560:	f7ff fdc6 	bl	b40f0 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
   b4564:	f004 fef8 	bl	b9358 <_Z16_fetch_usbserialv>
   b4568:	4629      	mov	r1, r5
   b456a:	f004 fba7 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_offset_z); Serial.print(" ");
   b456e:	f004 fef3 	bl	b9358 <_Z16_fetch_usbserialv>
   b4572:	220a      	movs	r2, #10
   b4574:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   b4578:	f7ff fdba 	bl	b40f0 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
   b457c:	f004 feec 	bl	b9358 <_Z16_fetch_usbserialv>
   b4580:	4629      	mov	r1, r5
   b4582:	f004 fb9b 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print("\nAccel Radius: ");
   b4586:	f004 fee7 	bl	b9358 <_Z16_fetch_usbserialv>
   b458a:	4911      	ldr	r1, [pc, #68]	; (b45d0 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x150>)
   b458c:	f004 fb96 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(calibData.accel_radius);
   b4590:	f004 fee2 	bl	b9358 <_Z16_fetch_usbserialv>
   b4594:	220a      	movs	r2, #10
   b4596:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
   b459a:	f7ff fda9 	bl	b40f0 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
    Serial.print("\nMag Radius: ");
   b459e:	f004 fedb 	bl	b9358 <_Z16_fetch_usbserialv>
   b45a2:	490c      	ldr	r1, [pc, #48]	; (b45d4 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t+0x154>)
   b45a4:	f004 fb8a 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(calibData.mag_radius);
   b45a8:	f004 fed6 	bl	b9358 <_Z16_fetch_usbserialv>
   b45ac:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
   b45b0:	220a      	movs	r2, #10
}
   b45b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.print(calibData.mag_radius);
   b45b6:	f7ff bd9b 	b.w	b40f0 <_ZN5Print5printIsLi0EEEjT_i.isra.0>
   b45ba:	bf00      	nop
   b45bc:	000bd24a 	.word	0x000bd24a
   b45c0:	000bd37e 	.word	0x000bd37e
   b45c4:	000bd261 	.word	0x000bd261
   b45c8:	000bd271 	.word	0x000bd271
   b45cc:	000bd279 	.word	0x000bd279
   b45d0:	000bd280 	.word	0x000bd280
   b45d4:	000bd290 	.word	0x000bd290

000b45d8 <_Z19get_compass_headingv>:

float get_compass_heading() {
   b45d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b45dc:	ed2d 8b08 	vpush	{d8-d11}
   b45e0:	b097      	sub	sp, #92	; 0x5c
  // put your main code here, to run repeatedly:
uint8_t system, gyro, accel, mg = 0;
   b45e2:	2300      	movs	r3, #0
   b45e4:	f88d 300f 	strb.w	r3, [sp, #15]
bno.getCalibration(&system, &gyro, &accel, &mg);
   b45e8:	f10d 030f 	add.w	r3, sp, #15
   b45ec:	9300      	str	r3, [sp, #0]
   b45ee:	f10d 020d 	add.w	r2, sp, #13
   b45f2:	f10d 030e 	add.w	r3, sp, #14
   b45f6:	a903      	add	r1, sp, #12
   b45f8:	48db      	ldr	r0, [pc, #876]	; (b4968 <_Z19get_compass_headingv+0x390>)
imu::Vector<3> acc =bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
imu::Vector<3> gyr =bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
imu::Vector<3> mag =bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
//measured value of tilt in x
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   b45fa:	f8df 83a4 	ldr.w	r8, [pc, #932]	; b49a0 <_Z19get_compass_headingv+0x3c8>
//measured value of tilt in y
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   b45fe:	f8df a3a4 	ldr.w	sl, [pc, #932]	; b49a4 <_Z19get_compass_headingv+0x3cc>
 //this is the time through one loop of program
dt=(millis()-millisOld)/1000.;
millisOld=millis();
//measures tilt in x with filter to remove vibration but still quick to respond.  lesson 9
//complimentary filter
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   b4602:	f8df 93a4 	ldr.w	r9, [pc, #932]	; b49a8 <_Z19get_compass_headingv+0x3d0>
//measures tilt in y with filter to remove vibration but still quick to respond.  lesson 9
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   b4606:	f8df b3a4 	ldr.w	fp, [pc, #932]	; b49ac <_Z19get_compass_headingv+0x3d4>

thetaG=thetaG+gyr.y()*dt;
phiG=phiG-gyr.x()*dt;
 
phiRad=phi/360*(2*3.14);
   b460a:	ed9f 9ad8 	vldr	s18, [pc, #864]	; b496c <_Z19get_compass_headingv+0x394>
bno.getCalibration(&system, &gyro, &accel, &mg);
   b460e:	f002 fdcf 	bl	b71b0 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
imu::Vector<3> acc =bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
   b4612:	a804      	add	r0, sp, #16
   b4614:	49d4      	ldr	r1, [pc, #848]	; (b4968 <_Z19get_compass_headingv+0x390>)
   b4616:	2208      	movs	r2, #8
   b4618:	f002 fec8 	bl	b73ac <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> gyr =bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
   b461c:	a80a      	add	r0, sp, #40	; 0x28
   b461e:	49d2      	ldr	r1, [pc, #840]	; (b4968 <_Z19get_compass_headingv+0x390>)
   b4620:	2214      	movs	r2, #20
   b4622:	f002 fec3 	bl	b73ac <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
imu::Vector<3> mag =bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
   b4626:	a810      	add	r0, sp, #64	; 0x40
   b4628:	49cf      	ldr	r1, [pc, #828]	; (b4968 <_Z19get_compass_headingv+0x390>)
   b462a:	220e      	movs	r2, #14
   b462c:	f002 febe 	bl	b73ac <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   b4630:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b4634:	a3c2      	add	r3, pc, #776	; (adr r3, b4940 <_Z19get_compass_headingv+0x368>)
   b4636:	e9d3 2300 	ldrd	r2, r3, [r3]
   b463a:	f007 ffa7 	bl	bc58c <__aeabi_ddiv>
   b463e:	a3c0      	add	r3, pc, #768	; (adr r3, b4940 <_Z19get_compass_headingv+0x368>)
   b4640:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4644:	ec41 0b18 	vmov	d8, r0, r1
   b4648:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b464c:	f007 ff9e 	bl	bc58c <__aeabi_ddiv>
   b4650:	eeb0 1a48 	vmov.f32	s2, s16
   b4654:	eef0 1a68 	vmov.f32	s3, s17
   b4658:	ec41 0b10 	vmov	d0, r0, r1
   b465c:	f005 fa36 	bl	b9acc <atan2>
   b4660:	ec53 2b10 	vmov	r2, r3, d0
   b4664:	ee10 0a10 	vmov	r0, s0
   b4668:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   b466c:	2200      	movs	r2, #0
   b466e:	4bc0      	ldr	r3, [pc, #768]	; (b4970 <_Z19get_compass_headingv+0x398>)
   b4670:	f007 fe62 	bl	bc338 <__aeabi_dmul>
   b4674:	a3b4      	add	r3, pc, #720	; (adr r3, b4948 <_Z19get_compass_headingv+0x370>)
   b4676:	e9d3 2300 	ldrd	r2, r3, [r3]
   b467a:	f007 ff87 	bl	bc58c <__aeabi_ddiv>
   b467e:	4bbd      	ldr	r3, [pc, #756]	; (b4974 <_Z19get_compass_headingv+0x39c>)
   b4680:	2200      	movs	r2, #0
   b4682:	f007 fe59 	bl	bc338 <__aeabi_dmul>
   b4686:	f008 f94f 	bl	bc928 <__aeabi_d2f>
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   b468a:	a3ad      	add	r3, pc, #692	; (adr r3, b4940 <_Z19get_compass_headingv+0x368>)
   b468c:	e9d3 2300 	ldrd	r2, r3, [r3]
thetaM=-atan2(acc.x()/9.8,acc.z()/9.8)/2/3.141592654*360;
   b4690:	f8c8 0000 	str.w	r0, [r8]
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   b4694:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b4698:	f007 ff78 	bl	bc58c <__aeabi_ddiv>
   b469c:	a3a8      	add	r3, pc, #672	; (adr r3, b4940 <_Z19get_compass_headingv+0x368>)
   b469e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b46a2:	ec41 0b18 	vmov	d8, r0, r1
   b46a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   b46aa:	f007 ff6f 	bl	bc58c <__aeabi_ddiv>
   b46ae:	eeb0 1a48 	vmov.f32	s2, s16
   b46b2:	eef0 1a68 	vmov.f32	s3, s17
   b46b6:	ec41 0b10 	vmov	d0, r0, r1
   b46ba:	f005 fa07 	bl	b9acc <atan2>
   b46be:	ec53 2b10 	vmov	r2, r3, d0
   b46c2:	ee10 0a10 	vmov	r0, s0
   b46c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   b46ca:	2200      	movs	r2, #0
   b46cc:	4ba8      	ldr	r3, [pc, #672]	; (b4970 <_Z19get_compass_headingv+0x398>)
   b46ce:	f007 fe33 	bl	bc338 <__aeabi_dmul>
   b46d2:	a39d      	add	r3, pc, #628	; (adr r3, b4948 <_Z19get_compass_headingv+0x370>)
   b46d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b46d8:	f007 ff58 	bl	bc58c <__aeabi_ddiv>
   b46dc:	2200      	movs	r2, #0
   b46de:	4ba5      	ldr	r3, [pc, #660]	; (b4974 <_Z19get_compass_headingv+0x39c>)
   b46e0:	f007 fe2a 	bl	bc338 <__aeabi_dmul>
   b46e4:	f008 f920 	bl	bc928 <__aeabi_d2f>
phiFnew=.95*phiFold+.05*phiM;
   b46e8:	4ba3      	ldr	r3, [pc, #652]	; (b4978 <_Z19get_compass_headingv+0x3a0>)
phiM=-atan2(acc.y()/9.8,acc.z()/9.8)/2/3.141592654*360;
   b46ea:	f8ca 0000 	str.w	r0, [sl]
   b46ee:	4606      	mov	r6, r0
phiFnew=.95*phiFold+.05*phiM;
   b46f0:	6818      	ldr	r0, [r3, #0]
   b46f2:	f007 fdc9 	bl	bc288 <__aeabi_f2d>
   b46f6:	a396      	add	r3, pc, #600	; (adr r3, b4950 <_Z19get_compass_headingv+0x378>)
   b46f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b46fc:	f007 fe1c 	bl	bc338 <__aeabi_dmul>
   b4700:	4604      	mov	r4, r0
   b4702:	4630      	mov	r0, r6
   b4704:	460d      	mov	r5, r1
   b4706:	f007 fdbf 	bl	bc288 <__aeabi_f2d>
   b470a:	a393      	add	r3, pc, #588	; (adr r3, b4958 <_Z19get_compass_headingv+0x380>)
   b470c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4710:	f007 fe12 	bl	bc338 <__aeabi_dmul>
   b4714:	4602      	mov	r2, r0
   b4716:	460b      	mov	r3, r1
   b4718:	4620      	mov	r0, r4
   b471a:	4629      	mov	r1, r5
   b471c:	f007 fc56 	bl	bbfcc <__adddf3>
   b4720:	f008 f902 	bl	bc928 <__aeabi_d2f>
   b4724:	4995      	ldr	r1, [pc, #596]	; (b497c <_Z19get_compass_headingv+0x3a4>)
   b4726:	6008      	str	r0, [r1, #0]
thetaFnew=.95*thetaFold+.05*thetaM;
   b4728:	4895      	ldr	r0, [pc, #596]	; (b4980 <_Z19get_compass_headingv+0x3a8>)
   b472a:	6800      	ldr	r0, [r0, #0]
   b472c:	f007 fdac 	bl	bc288 <__aeabi_f2d>
   b4730:	a387      	add	r3, pc, #540	; (adr r3, b4950 <_Z19get_compass_headingv+0x378>)
   b4732:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4736:	f007 fdff 	bl	bc338 <__aeabi_dmul>
   b473a:	4604      	mov	r4, r0
   b473c:	f8d8 0000 	ldr.w	r0, [r8]
   b4740:	460d      	mov	r5, r1
   b4742:	f007 fda1 	bl	bc288 <__aeabi_f2d>
   b4746:	a384      	add	r3, pc, #528	; (adr r3, b4958 <_Z19get_compass_headingv+0x380>)
   b4748:	e9d3 2300 	ldrd	r2, r3, [r3]
   b474c:	f007 fdf4 	bl	bc338 <__aeabi_dmul>
   b4750:	4602      	mov	r2, r0
   b4752:	460b      	mov	r3, r1
   b4754:	4620      	mov	r0, r4
   b4756:	4629      	mov	r1, r5
   b4758:	f007 fc38 	bl	bbfcc <__adddf3>
   b475c:	f008 f8e4 	bl	bc928 <__aeabi_d2f>
   b4760:	4c88      	ldr	r4, [pc, #544]	; (b4984 <_Z19get_compass_headingv+0x3ac>)
dt=(millis()-millisOld)/1000.;
   b4762:	4d89      	ldr	r5, [pc, #548]	; (b4988 <_Z19get_compass_headingv+0x3b0>)
thetaFnew=.95*thetaFold+.05*thetaM;
   b4764:	6020      	str	r0, [r4, #0]
   b4766:	f003 fe61 	bl	b842c <HAL_Timer_Get_Milli_Seconds>
dt=(millis()-millisOld)/1000.;
   b476a:	682b      	ldr	r3, [r5, #0]
   b476c:	4c87      	ldr	r4, [pc, #540]	; (b498c <_Z19get_compass_headingv+0x3b4>)
   b476e:	1ac0      	subs	r0, r0, r3
   b4770:	f007 fd68 	bl	bc244 <__aeabi_ui2d>
   b4774:	4b86      	ldr	r3, [pc, #536]	; (b4990 <_Z19get_compass_headingv+0x3b8>)
   b4776:	2200      	movs	r2, #0
   b4778:	f007 ff08 	bl	bc58c <__aeabi_ddiv>
   b477c:	f008 f8d4 	bl	bc928 <__aeabi_d2f>
   b4780:	6020      	str	r0, [r4, #0]
   b4782:	f003 fe53 	bl	b842c <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
   b4786:	6028      	str	r0, [r5, #0]
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   b4788:	6820      	ldr	r0, [r4, #0]
   b478a:	f007 fd7d 	bl	bc288 <__aeabi_f2d>
   b478e:	4602      	mov	r2, r0
   b4790:	460b      	mov	r3, r1
   b4792:	ec43 2b1a 	vmov	d10, r2, r3
   b4796:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   b479a:	f007 fdcd 	bl	bc338 <__aeabi_dmul>
   b479e:	4606      	mov	r6, r0
   b47a0:	460f      	mov	r7, r1
   b47a2:	f8d9 0000 	ldr.w	r0, [r9]
   b47a6:	f007 fd6f 	bl	bc288 <__aeabi_f2d>
   b47aa:	4632      	mov	r2, r6
   b47ac:	463b      	mov	r3, r7
   b47ae:	f007 fc0d 	bl	bbfcc <__adddf3>
   b47b2:	a367      	add	r3, pc, #412	; (adr r3, b4950 <_Z19get_compass_headingv+0x378>)
   b47b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b47b8:	f007 fdbe 	bl	bc338 <__aeabi_dmul>
   b47bc:	4604      	mov	r4, r0
   b47be:	f8d8 0000 	ldr.w	r0, [r8]
   b47c2:	460d      	mov	r5, r1
   b47c4:	f007 fd60 	bl	bc288 <__aeabi_f2d>
   b47c8:	a363      	add	r3, pc, #396	; (adr r3, b4958 <_Z19get_compass_headingv+0x380>)
   b47ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   b47ce:	f007 fdb3 	bl	bc338 <__aeabi_dmul>
   b47d2:	4602      	mov	r2, r0
   b47d4:	460b      	mov	r3, r1
   b47d6:	4620      	mov	r0, r4
   b47d8:	4629      	mov	r1, r5
   b47da:	f007 fbf7 	bl	bbfcc <__adddf3>
   b47de:	f008 f8a3 	bl	bc928 <__aeabi_d2f>
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   b47e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
theta=(theta+gyr.y()*dt)*.95+thetaM*.05;
   b47e6:	ee08 0a90 	vmov	s17, r0
   b47ea:	f8c9 0000 	str.w	r0, [r9]
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   b47ee:	ec51 0b1a 	vmov	r0, r1, d10
   b47f2:	f007 fda1 	bl	bc338 <__aeabi_dmul>
   b47f6:	4604      	mov	r4, r0
   b47f8:	460d      	mov	r5, r1
   b47fa:	f8db 0000 	ldr.w	r0, [fp]
   b47fe:	f007 fd43 	bl	bc288 <__aeabi_f2d>
   b4802:	4622      	mov	r2, r4
   b4804:	462b      	mov	r3, r5
   b4806:	f007 fbdf 	bl	bbfc8 <__aeabi_dsub>
   b480a:	a351      	add	r3, pc, #324	; (adr r3, b4950 <_Z19get_compass_headingv+0x378>)
   b480c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4810:	f007 fd92 	bl	bc338 <__aeabi_dmul>
   b4814:	4680      	mov	r8, r0
   b4816:	f8da 0000 	ldr.w	r0, [sl]
   b481a:	4689      	mov	r9, r1
   b481c:	f007 fd34 	bl	bc288 <__aeabi_f2d>
   b4820:	a34d      	add	r3, pc, #308	; (adr r3, b4958 <_Z19get_compass_headingv+0x380>)
   b4822:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4826:	f007 fd87 	bl	bc338 <__aeabi_dmul>
   b482a:	4602      	mov	r2, r0
   b482c:	460b      	mov	r3, r1
   b482e:	4640      	mov	r0, r8
   b4830:	4649      	mov	r1, r9
   b4832:	f007 fbcb 	bl	bbfcc <__adddf3>
   b4836:	f008 f877 	bl	bc928 <__aeabi_d2f>
thetaG=thetaG+gyr.y()*dt;
   b483a:	f8df 8174 	ldr.w	r8, [pc, #372]	; b49b0 <_Z19get_compass_headingv+0x3d8>
phi=(phi-gyr.x()*dt)*.95+ phiM*.05;
   b483e:	f8cb 0000 	str.w	r0, [fp]
   b4842:	ee08 0a10 	vmov	s16, r0
thetaG=thetaG+gyr.y()*dt;
   b4846:	f8d8 0000 	ldr.w	r0, [r8]
   b484a:	f007 fd1d 	bl	bc288 <__aeabi_f2d>
   b484e:	4632      	mov	r2, r6
   b4850:	463b      	mov	r3, r7
   b4852:	f007 fbbb 	bl	bbfcc <__adddf3>
   b4856:	f008 f867 	bl	bc928 <__aeabi_d2f>
phiG=phiG-gyr.x()*dt;
   b485a:	4e4e      	ldr	r6, [pc, #312]	; (b4994 <_Z19get_compass_headingv+0x3bc>)
thetaG=thetaG+gyr.y()*dt;
   b485c:	f8c8 0000 	str.w	r0, [r8]
phiG=phiG-gyr.x()*dt;
   b4860:	6830      	ldr	r0, [r6, #0]
   b4862:	f007 fd11 	bl	bc288 <__aeabi_f2d>
   b4866:	4622      	mov	r2, r4
   b4868:	462b      	mov	r3, r5
   b486a:	f007 fbad 	bl	bbfc8 <__aeabi_dsub>
   b486e:	f008 f85b 	bl	bc928 <__aeabi_d2f>
phiRad=phi/360*(2*3.14);
   b4872:	eec8 7a09 	vdiv.f32	s15, s16, s18
phiG=phiG-gyr.x()*dt;
   b4876:	6030      	str	r0, [r6, #0]
phiRad=phi/360*(2*3.14);
   b4878:	ee17 0a90 	vmov	r0, s15
   b487c:	f007 fd04 	bl	bc288 <__aeabi_f2d>
   b4880:	a337      	add	r3, pc, #220	; (adr r3, b4960 <_Z19get_compass_headingv+0x388>)
   b4882:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4886:	f007 fd57 	bl	bc338 <__aeabi_dmul>
   b488a:	f008 f84d 	bl	bc928 <__aeabi_d2f>
thetaRad=theta/360*(2*3.14);
   b488e:	eec8 7a89 	vdiv.f32	s15, s17, s18
phiRad=phi/360*(2*3.14);
   b4892:	4b41      	ldr	r3, [pc, #260]	; (b4998 <_Z19get_compass_headingv+0x3c0>)
   b4894:	6018      	str	r0, [r3, #0]
   b4896:	ee08 0a10 	vmov	s16, r0
thetaRad=theta/360*(2*3.14);
   b489a:	ee17 0a90 	vmov	r0, s15
   b489e:	f007 fcf3 	bl	bc288 <__aeabi_f2d>
   b48a2:	a32f      	add	r3, pc, #188	; (adr r3, b4960 <_Z19get_compass_headingv+0x388>)
   b48a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b48a8:	f007 fd46 	bl	bc338 <__aeabi_dmul>
   b48ac:	f008 f83c 	bl	bc928 <__aeabi_d2f>
   b48b0:	4b3a      	ldr	r3, [pc, #232]	; (b499c <_Z19get_compass_headingv+0x3c4>)
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
   b48b2:	ee00 0a10 	vmov	s0, r0
   b48b6:	6018      	str	r0, [r3, #0]
   b48b8:	ee08 0a90 	vmov	s17, r0
   b48bc:	f005 f894 	bl	b99e8 <cosf>
   b48c0:	ee10 4a10 	vmov	r4, s0
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
   b48c4:	eeb0 0a48 	vmov.f32	s0, s16
   b48c8:	f005 f8c6 	bl	b9a58 <sinf>
   b48cc:	ee10 0a10 	vmov	r0, s0
 
 //tilt compensated x
Xm=mag.x()*cos(thetaRad)-mag.y()*sin(phiRad)*sin(thetaRad)+mag.z()*cos(phiRad)*sin(thetaRad);
   b48d0:	f007 fcda 	bl	bc288 <__aeabi_f2d>
   b48d4:	eeb0 0a68 	vmov.f32	s0, s17
   b48d8:	ec41 0b1a 	vmov	d10, r0, r1
   b48dc:	f005 f8bc 	bl	b9a58 <sinf>
   b48e0:	ee10 0a10 	vmov	r0, s0
   b48e4:	f007 fcd0 	bl	bc288 <__aeabi_f2d>
   b48e8:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
  { return __builtin_cosf(__x); }
   b48ec:	eeb0 0a48 	vmov.f32	s0, s16
   b48f0:	eeb0 ba47 	vmov.f32	s22, s14
   b48f4:	eef0 ba67 	vmov.f32	s23, s15
   b48f8:	4606      	mov	r6, r0
   b48fa:	460f      	mov	r7, r1
   b48fc:	f005 f874 	bl	b99e8 <cosf>
   b4900:	ee10 0a10 	vmov	r0, s0
   b4904:	f007 fcc0 	bl	bc288 <__aeabi_f2d>
   b4908:	4680      	mov	r8, r0
   b490a:	4620      	mov	r0, r4
   b490c:	4689      	mov	r9, r1
   b490e:	f007 fcbb 	bl	bc288 <__aeabi_f2d>
   b4912:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b4916:	f007 fd0f 	bl	bc338 <__aeabi_dmul>
   b491a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   b491e:	ec53 2b1a 	vmov	r2, r3, d10
   b4922:	4604      	mov	r4, r0
   b4924:	460d      	mov	r5, r1
   b4926:	4650      	mov	r0, sl
   b4928:	4659      	mov	r1, fp
   b492a:	f007 fd05 	bl	bc338 <__aeabi_dmul>
   b492e:	4632      	mov	r2, r6
   b4930:	463b      	mov	r3, r7
   b4932:	f007 fd01 	bl	bc338 <__aeabi_dmul>
   b4936:	4602      	mov	r2, r0
   b4938:	460b      	mov	r3, r1
   b493a:	4620      	mov	r0, r4
   b493c:	e03a      	b.n	b49b4 <_Z19get_compass_headingv+0x3dc>
   b493e:	bf00      	nop
   b4940:	9999999a 	.word	0x9999999a
   b4944:	40239999 	.word	0x40239999
   b4948:	54524550 	.word	0x54524550
   b494c:	400921fb 	.word	0x400921fb
   b4950:	66666666 	.word	0x66666666
   b4954:	3fee6666 	.word	0x3fee6666
   b4958:	9999999a 	.word	0x9999999a
   b495c:	3fa99999 	.word	0x3fa99999
   b4960:	51eb851f 	.word	0x51eb851f
   b4964:	40191eb8 	.word	0x40191eb8
   b4968:	2003e538 	.word	0x2003e538
   b496c:	43b40000 	.word	0x43b40000
   b4970:	3fe00000 	.word	0x3fe00000
   b4974:	40768000 	.word	0x40768000
   b4978:	2003e624 	.word	0x2003e624
   b497c:	2003e620 	.word	0x2003e620
   b4980:	2003e658 	.word	0x2003e658
   b4984:	2003e654 	.word	0x2003e654
   b4988:	2003e618 	.word	0x2003e618
   b498c:	2003e5cc 	.word	0x2003e5cc
   b4990:	408f4000 	.word	0x408f4000
   b4994:	2003e628 	.word	0x2003e628
   b4998:	2003e630 	.word	0x2003e630
   b499c:	2003e664 	.word	0x2003e664
   b49a0:	2003e660 	.word	0x2003e660
   b49a4:	2003e62c 	.word	0x2003e62c
   b49a8:	2003e650 	.word	0x2003e650
   b49ac:	2003e61c 	.word	0x2003e61c
   b49b0:	2003e65c 	.word	0x2003e65c
   b49b4:	4629      	mov	r1, r5
   b49b6:	f007 fb07 	bl	bbfc8 <__aeabi_dsub>
   b49ba:	4642      	mov	r2, r8
   b49bc:	4604      	mov	r4, r0
   b49be:	460d      	mov	r5, r1
   b49c0:	464b      	mov	r3, r9
   b49c2:	ec51 0b1b 	vmov	r0, r1, d11
   b49c6:	f007 fcb7 	bl	bc338 <__aeabi_dmul>
   b49ca:	4632      	mov	r2, r6
   b49cc:	463b      	mov	r3, r7
   b49ce:	f007 fcb3 	bl	bc338 <__aeabi_dmul>
   b49d2:	4602      	mov	r2, r0
   b49d4:	460b      	mov	r3, r1
   b49d6:	4620      	mov	r0, r4
   b49d8:	4629      	mov	r1, r5
   b49da:	f007 faf7 	bl	bbfcc <__adddf3>
   b49de:	f007 ffa3 	bl	bc928 <__aeabi_d2f>
   b49e2:	4b2b      	ldr	r3, [pc, #172]	; (b4a90 <_Z19get_compass_headingv+0x4b8>)
   b49e4:	ee08 0a10 	vmov	s16, r0
   b49e8:	6018      	str	r0, [r3, #0]
//tilt compensated y
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
   b49ea:	4642      	mov	r2, r8
   b49ec:	464b      	mov	r3, r9
   b49ee:	4650      	mov	r0, sl
   b49f0:	4659      	mov	r1, fp
   b49f2:	f007 fca1 	bl	bc338 <__aeabi_dmul>
   b49f6:	ec53 2b1b 	vmov	r2, r3, d11
   b49fa:	4604      	mov	r4, r0
   b49fc:	460d      	mov	r5, r1
   b49fe:	ec51 0b1a 	vmov	r0, r1, d10
   b4a02:	f007 fc99 	bl	bc338 <__aeabi_dmul>
   b4a06:	4602      	mov	r2, r0
   b4a08:	460b      	mov	r3, r1
   b4a0a:	4620      	mov	r0, r4
   b4a0c:	4629      	mov	r1, r5
   b4a0e:	f007 fadd 	bl	bbfcc <__adddf3>
   b4a12:	f007 ff89 	bl	bc928 <__aeabi_d2f>
   b4a16:	4b1f      	ldr	r3, [pc, #124]	; (b4a94 <_Z19get_compass_headingv+0x4bc>)
// Serial.print(phi);
// Serial.print(",");
// Serial.println(psi);
 
phiFold=phiFnew;
thetaFold=thetaFnew;
   b4a18:	4c1f      	ldr	r4, [pc, #124]	; (b4a98 <_Z19get_compass_headingv+0x4c0>)
Ym=mag.y()*cos(phiRad)+mag.z()*sin(phiRad);
   b4a1a:	6018      	str	r0, [r3, #0]
  { return __builtin_atan2f(__y, __x); }
   b4a1c:	eef0 0a48 	vmov.f32	s1, s16
   b4a20:	ee00 0a10 	vmov	s0, r0
   b4a24:	f005 f926 	bl	b9c74 <atan2f>
phiFold=phiFnew;
   b4a28:	491c      	ldr	r1, [pc, #112]	; (b4a9c <_Z19get_compass_headingv+0x4c4>)
   b4a2a:	4a1d      	ldr	r2, [pc, #116]	; (b4aa0 <_Z19get_compass_headingv+0x4c8>)
   b4a2c:	680b      	ldr	r3, [r1, #0]
   b4a2e:	6013      	str	r3, [r2, #0]
thetaFold=thetaFnew;
   b4a30:	4a1c      	ldr	r2, [pc, #112]	; (b4aa4 <_Z19get_compass_headingv+0x4cc>)
   b4a32:	6823      	ldr	r3, [r4, #0]
   b4a34:	6013      	str	r3, [r2, #0]
   b4a36:	ee10 0a10 	vmov	r0, s0
psi=atan2(Ym,Xm)/(2*3.14)*360;
   b4a3a:	f007 fc25 	bl	bc288 <__aeabi_f2d>
   b4a3e:	a312      	add	r3, pc, #72	; (adr r3, b4a88 <_Z19get_compass_headingv+0x4b0>)
   b4a40:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4a44:	f007 fda2 	bl	bc58c <__aeabi_ddiv>
   b4a48:	4b17      	ldr	r3, [pc, #92]	; (b4aa8 <_Z19get_compass_headingv+0x4d0>)
   b4a4a:	2200      	movs	r2, #0
   b4a4c:	f007 fc74 	bl	bc338 <__aeabi_dmul>
   b4a50:	f007 ff6a 	bl	bc928 <__aeabi_d2f>
 psi = psi + 180;
   b4a54:	eddf 7a15 	vldr	s15, [pc, #84]	; b4aac <_Z19get_compass_headingv+0x4d4>
   b4a58:	4b15      	ldr	r3, [pc, #84]	; (b4ab0 <_Z19get_compass_headingv+0x4d8>)
   b4a5a:	ee07 0a10 	vmov	s14, r0
   b4a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 if(psi >= 360) {
   b4a62:	eef4 7ac9 	vcmpe.f32	s15, s18
   b4a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   psi = psi -360;
   b4a6a:	bfa8      	it	ge
   b4a6c:	ee77 7ac9 	vsubge.f32	s15, s15, s18
   b4a70:	edc3 7a00 	vstr	s15, [r3]
 }
 return(psi);
//delay(BNO055_SAMPLERATE_DELAY_MS);
}
   b4a74:	ed93 0a00 	vldr	s0, [r3]
   b4a78:	b017      	add	sp, #92	; 0x5c
   b4a7a:	ecbd 8b08 	vpop	{d8-d11}
   b4a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4a82:	bf00      	nop
   b4a84:	f3af 8000 	nop.w
   b4a88:	51eb851f 	.word	0x51eb851f
   b4a8c:	40191eb8 	.word	0x40191eb8
   b4a90:	2003e4bc 	.word	0x2003e4bc
   b4a94:	2003e4c0 	.word	0x2003e4c0
   b4a98:	2003e654 	.word	0x2003e654
   b4a9c:	2003e620 	.word	0x2003e620
   b4aa0:	2003e624 	.word	0x2003e624
   b4aa4:	2003e658 	.word	0x2003e658
   b4aa8:	40768000 	.word	0x40768000
   b4aac:	43340000 	.word	0x43340000
   b4ab0:	2003e640 	.word	0x2003e640

000b4ab4 <_Z11eeprom_testv>:

void eeprom_test(){
   b4ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t max_addr;
  //variables for calibration read from memory
int test = 55;
      // Try to determine the size by writing a value and seeing if it changes the first byte
  Serial.println("Testing size!");
   b4ab8:	f004 fc4e 	bl	b9358 <_Z16_fetch_usbserialv>
   b4abc:	492a      	ldr	r1, [pc, #168]	; (b4b68 <_Z11eeprom_testv+0xb4>)
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
    if (i2ceeprom.read(max_addr) != test)
   b4abe:	4d2b      	ldr	r5, [pc, #172]	; (b4b6c <_Z11eeprom_testv+0xb8>)
    // read address 0x0 again
    uint8_t val0 = i2ceeprom.read(0);

    // re-write the old value
    if (! i2ceeprom.write(max_addr, test)) {
        Serial.print("Failed to re-write address 0x");
   b4ac0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b4b7c <_Z11eeprom_testv+0xc8>
        Serial.print("Failed to write address 0x");
   b4ac4:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b4b80 <_Z11eeprom_testv+0xcc>
  Serial.println("Testing size!");
   b4ac8:	f004 f90b 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
   b4acc:	2401      	movs	r4, #1
    if (i2ceeprom.read(max_addr) != test)
   b4ace:	b2a7      	uxth	r7, r4
   b4ad0:	4826      	ldr	r0, [pc, #152]	; (b4b6c <_Z11eeprom_testv+0xb8>)
   b4ad2:	4639      	mov	r1, r7
   b4ad4:	f003 fc34 	bl	b8340 <_ZN19Adafruit_EEPROM_I2C4readEt>
   b4ad8:	2837      	cmp	r0, #55	; 0x37
   b4ada:	d13f      	bne.n	b4b5c <_Z11eeprom_testv+0xa8>
    if (! i2ceeprom.write(max_addr, (byte)~test)) {
   b4adc:	22c8      	movs	r2, #200	; 0xc8
   b4ade:	4639      	mov	r1, r7
   b4ae0:	4628      	mov	r0, r5
   b4ae2:	f003 fc09 	bl	b82f8 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   b4ae6:	b950      	cbnz	r0, b4afe <_Z11eeprom_testv+0x4a>
        Serial.print("Failed to write address 0x");
   b4ae8:	f004 fc36 	bl	b9358 <_Z16_fetch_usbserialv>
   b4aec:	4649      	mov	r1, r9
   b4aee:	f004 f8e5 	bl	b8cbc <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   b4af2:	f004 fc31 	bl	b9358 <_Z16_fetch_usbserialv>
   b4af6:	2210      	movs	r2, #16
   b4af8:	4621      	mov	r1, r4
   b4afa:	f7ff fb3f 	bl	b417c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    uint8_t val0 = i2ceeprom.read(0);
   b4afe:	2100      	movs	r1, #0
   b4b00:	4628      	mov	r0, r5
   b4b02:	f003 fc1d 	bl	b8340 <_ZN19Adafruit_EEPROM_I2C4readEt>
    if (! i2ceeprom.write(max_addr, test)) {
   b4b06:	2237      	movs	r2, #55	; 0x37
    uint8_t val0 = i2ceeprom.read(0);
   b4b08:	4606      	mov	r6, r0
    if (! i2ceeprom.write(max_addr, test)) {
   b4b0a:	4639      	mov	r1, r7
   b4b0c:	4628      	mov	r0, r5
   b4b0e:	f003 fbf3 	bl	b82f8 <_ZN19Adafruit_EEPROM_I2C5writeEth>
   b4b12:	b950      	cbnz	r0, b4b2a <_Z11eeprom_testv+0x76>
        Serial.print("Failed to re-write address 0x");
   b4b14:	f004 fc20 	bl	b9358 <_Z16_fetch_usbserialv>
   b4b18:	4641      	mov	r1, r8
   b4b1a:	f004 f8cf 	bl	b8cbc <_ZN5Print5printEPKc>
        Serial.println(max_addr, HEX);
   b4b1e:	f004 fc1b 	bl	b9358 <_Z16_fetch_usbserialv>
   b4b22:	2210      	movs	r2, #16
   b4b24:	4621      	mov	r1, r4
   b4b26:	f7ff fb29 	bl	b417c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    }    

    // check if addr 0 was changed
    if (val0 == (byte)~test) {
   b4b2a:	2ec8      	cmp	r6, #200	; 0xc8
   b4b2c:	d116      	bne.n	b4b5c <_Z11eeprom_testv+0xa8>
      Serial.println("Found max address");
   b4b2e:	f004 fc13 	bl	b9358 <_Z16_fetch_usbserialv>
   b4b32:	490f      	ldr	r1, [pc, #60]	; (b4b70 <_Z11eeprom_testv+0xbc>)
   b4b34:	f004 f8d5 	bl	b8ce2 <_ZN5Print7printlnEPKc>
      break;
    }
  }
  Serial.print("This EEPROM can store ");
   b4b38:	f004 fc0e 	bl	b9358 <_Z16_fetch_usbserialv>
   b4b3c:	490d      	ldr	r1, [pc, #52]	; (b4b74 <_Z11eeprom_testv+0xc0>)
   b4b3e:	f004 f8bd 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print(max_addr);
   b4b42:	f004 fc09 	bl	b9358 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4b46:	4621      	mov	r1, r4
   b4b48:	220a      	movs	r2, #10
   b4b4a:	f004 f8d6 	bl	b8cfa <_ZN5Print11printNumberEmh>
  Serial.println(" bytes");
   b4b4e:	f004 fc03 	bl	b9358 <_Z16_fetch_usbserialv>
}
   b4b52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.println(" bytes");
   b4b56:	4908      	ldr	r1, [pc, #32]	; (b4b78 <_Z11eeprom_testv+0xc4>)
   b4b58:	f004 b8c3 	b.w	b8ce2 <_ZN5Print7printlnEPKc>
  for (max_addr = 1; max_addr < 0x7FFF; max_addr++) {
   b4b5c:	3401      	adds	r4, #1
   b4b5e:	f647 73ff 	movw	r3, #32767	; 0x7fff
   b4b62:	429c      	cmp	r4, r3
   b4b64:	d1b3      	bne.n	b4ace <_Z11eeprom_testv+0x1a>
   b4b66:	e7e7      	b.n	b4b38 <_Z11eeprom_testv+0x84>
   b4b68:	000bd29e 	.word	0x000bd29e
   b4b6c:	2003e5ec 	.word	0x2003e5ec
   b4b70:	000bd2e5 	.word	0x000bd2e5
   b4b74:	000bd2f7 	.word	0x000bd2f7
   b4b78:	000bd30e 	.word	0x000bd30e
   b4b7c:	000bd2c7 	.word	0x000bd2c7
   b4b80:	000bd2ac 	.word	0x000bd2ac

000b4b84 <_Z22measure_wind_directionv>:
// // V = P(2.25/3) = P * 0.75
// }
// return WindSpeed;
// }

int measure_wind_direction(){
   b4b84:	b507      	push	{r0, r1, r2, lr}
int VaneValue;// raw analog value from wind vane
int Direction;// translated 0 - 360 direction
int CalDirection;// converted value with offset applied
//int LastValue = 0;
VaneValue = analogRead(vane_pin);
   b4b86:	4b0d      	ldr	r3, [pc, #52]	; (b4bbc <_Z22measure_wind_directionv+0x38>)
   b4b88:	7818      	ldrb	r0, [r3, #0]
   b4b8a:	f004 fe82 	bl	b9892 <analogRead>
//digitalWrite(vane_switch, LOW);
//Serial.println("analog read value = ");
//Serial.print(VaneValue);
Direction = map(VaneValue, 0, 4095, 0, 360);
   b4b8e:	f44f 73b4 	mov.w	r3, #360	; 0x168
   b4b92:	9300      	str	r3, [sp, #0]
   b4b94:	2300      	movs	r3, #0
   b4b96:	f640 72ff 	movw	r2, #4095	; 0xfff
   b4b9a:	4619      	mov	r1, r3
   b4b9c:	f004 fa4e 	bl	b903c <_Z3mapiiiii>
CalDirection = Direction + Offset;

if(CalDirection > 360)
   b4ba0:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
   b4ba4:	dd04      	ble.n	b4bb0 <_Z22measure_wind_directionv+0x2c>
CalDirection = CalDirection - 360;
   b4ba6:	f5a0 70b4 	sub.w	r0, r0, #360	; 0x168
  // getHeading(CalDirection);
  // LastValue = CalDirection;
  // }

return CalDirection;
}
   b4baa:	b003      	add	sp, #12
   b4bac:	f85d fb04 	ldr.w	pc, [sp], #4
if(CalDirection < 0)
   b4bb0:	2800      	cmp	r0, #0
CalDirection = CalDirection + 360;
   b4bb2:	bfb8      	it	lt
   b4bb4:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
return CalDirection;
   b4bb8:	e7f7      	b.n	b4baa <_Z22measure_wind_directionv+0x26>
   b4bba:	bf00      	nop
   b4bbc:	2003e43d 	.word	0x2003e43d

000b4bc0 <_Z16calculateHeadingi>:
Serial.println("NW");
else
Serial.println("N");
} 

String calculateHeading(int direction) {
   b4bc0:	b538      	push	{r3, r4, r5, lr}
   b4bc2:	460d      	mov	r5, r1
  String heading = "xx";
   b4bc4:	4914      	ldr	r1, [pc, #80]	; (b4c18 <_Z16calculateHeadingi+0x58>)
String calculateHeading(int direction) {
   b4bc6:	4604      	mov	r4, r0
  String heading = "xx";
   b4bc8:	f003 fffd 	bl	b8bc6 <_ZN6StringC1EPK19__FlashStringHelper>
if(direction < 22)
   b4bcc:	2d15      	cmp	r5, #21
   b4bce:	dc05      	bgt.n	b4bdc <_Z16calculateHeadingi+0x1c>
heading = "N";
   b4bd0:	4912      	ldr	r1, [pc, #72]	; (b4c1c <_Z16calculateHeadingi+0x5c>)
else if (direction < 247)
heading = "SW";
else if (direction < 292)
heading = "W";
else if (direction < 337)
heading = "NW";
   b4bd2:	4620      	mov	r0, r4
   b4bd4:	f004 f830 	bl	b8c38 <_ZN6StringaSEPKc>
else
heading = "N";

return heading;
} 
   b4bd8:	4620      	mov	r0, r4
   b4bda:	bd38      	pop	{r3, r4, r5, pc}
else if (direction < 67)
   b4bdc:	2d42      	cmp	r5, #66	; 0x42
   b4bde:	dc01      	bgt.n	b4be4 <_Z16calculateHeadingi+0x24>
heading = "NE";
   b4be0:	490f      	ldr	r1, [pc, #60]	; (b4c20 <_Z16calculateHeadingi+0x60>)
   b4be2:	e7f6      	b.n	b4bd2 <_Z16calculateHeadingi+0x12>
else if (direction < 112)
   b4be4:	2d6f      	cmp	r5, #111	; 0x6f
   b4be6:	dc01      	bgt.n	b4bec <_Z16calculateHeadingi+0x2c>
heading = "E";
   b4be8:	490e      	ldr	r1, [pc, #56]	; (b4c24 <_Z16calculateHeadingi+0x64>)
   b4bea:	e7f2      	b.n	b4bd2 <_Z16calculateHeadingi+0x12>
else if (direction < 157)
   b4bec:	2d9c      	cmp	r5, #156	; 0x9c
   b4bee:	dc01      	bgt.n	b4bf4 <_Z16calculateHeadingi+0x34>
heading = "SE";
   b4bf0:	490d      	ldr	r1, [pc, #52]	; (b4c28 <_Z16calculateHeadingi+0x68>)
   b4bf2:	e7ee      	b.n	b4bd2 <_Z16calculateHeadingi+0x12>
else if (direction < 212)
   b4bf4:	2dd3      	cmp	r5, #211	; 0xd3
   b4bf6:	dc01      	bgt.n	b4bfc <_Z16calculateHeadingi+0x3c>
heading = "S";
   b4bf8:	490c      	ldr	r1, [pc, #48]	; (b4c2c <_Z16calculateHeadingi+0x6c>)
   b4bfa:	e7ea      	b.n	b4bd2 <_Z16calculateHeadingi+0x12>
else if (direction < 247)
   b4bfc:	2df6      	cmp	r5, #246	; 0xf6
   b4bfe:	dc01      	bgt.n	b4c04 <_Z16calculateHeadingi+0x44>
heading = "SW";
   b4c00:	490b      	ldr	r1, [pc, #44]	; (b4c30 <_Z16calculateHeadingi+0x70>)
   b4c02:	e7e6      	b.n	b4bd2 <_Z16calculateHeadingi+0x12>
else if (direction < 292)
   b4c04:	f5b5 7f92 	cmp.w	r5, #292	; 0x124
   b4c08:	da01      	bge.n	b4c0e <_Z16calculateHeadingi+0x4e>
heading = "W";
   b4c0a:	490a      	ldr	r1, [pc, #40]	; (b4c34 <_Z16calculateHeadingi+0x74>)
   b4c0c:	e7e1      	b.n	b4bd2 <_Z16calculateHeadingi+0x12>
else if (direction < 337)
   b4c0e:	f5b5 7fa8 	cmp.w	r5, #336	; 0x150
   b4c12:	dcdd      	bgt.n	b4bd0 <_Z16calculateHeadingi+0x10>
heading = "NW";
   b4c14:	4908      	ldr	r1, [pc, #32]	; (b4c38 <_Z16calculateHeadingi+0x78>)
   b4c16:	e7dc      	b.n	b4bd2 <_Z16calculateHeadingi+0x12>
   b4c18:	000bd229 	.word	0x000bd229
   b4c1c:	000bd315 	.word	0x000bd315
   b4c20:	000bd317 	.word	0x000bd317
   b4c24:	000bd318 	.word	0x000bd318
   b4c28:	000bd31a 	.word	0x000bd31a
   b4c2c:	000bd31d 	.word	0x000bd31d
   b4c30:	000bd31f 	.word	0x000bd31f
   b4c34:	000bd323 	.word	0x000bd323
   b4c38:	000bd322 	.word	0x000bd322

000b4c3c <_Z29measure_current_voltage_powerRfS_S_S_S_>:
  Serial.print(F(", "));
  Serial.print((float)event.orientation.z);
  Serial.println(F(""));
}

void measure_current_voltage_power(float& shuntvoltage, float& busvoltage, float& current_mA, float& loadvoltage, float& power_mW){
   b4c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c3e:	4605      	mov	r5, r0


  shuntvoltage = ina219.getShuntVoltage_mV();
   b4c40:	4812      	ldr	r0, [pc, #72]	; (b4c8c <_Z29measure_current_voltage_powerRfS_S_S_S_+0x50>)
void measure_current_voltage_power(float& shuntvoltage, float& busvoltage, float& current_mA, float& loadvoltage, float& power_mW){
   b4c42:	460c      	mov	r4, r1
   b4c44:	461e      	mov	r6, r3
   b4c46:	4617      	mov	r7, r2
  shuntvoltage = ina219.getShuntVoltage_mV();
   b4c48:	f002 f876 	bl	b6d38 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv>
  busvoltage = ina219.getBusVoltage_V();
   b4c4c:	480f      	ldr	r0, [pc, #60]	; (b4c8c <_Z29measure_current_voltage_powerRfS_S_S_S_+0x50>)
  shuntvoltage = ina219.getShuntVoltage_mV();
   b4c4e:	ed85 0a00 	vstr	s0, [r5]
  busvoltage = ina219.getBusVoltage_V();
   b4c52:	f002 f885 	bl	b6d60 <_ZN15Adafruit_INA21915getBusVoltage_VEv>
  current_mA = ina219.getCurrent_mA();
   b4c56:	480d      	ldr	r0, [pc, #52]	; (b4c8c <_Z29measure_current_voltage_powerRfS_S_S_S_+0x50>)
  busvoltage = ina219.getBusVoltage_V();
   b4c58:	ed84 0a00 	vstr	s0, [r4]
  current_mA = ina219.getCurrent_mA();
   b4c5c:	f002 f894 	bl	b6d88 <_ZN15Adafruit_INA21913getCurrent_mAEv>
  power_mW = ina219.getPower_mW();
   b4c60:	480a      	ldr	r0, [pc, #40]	; (b4c8c <_Z29measure_current_voltage_powerRfS_S_S_S_+0x50>)
  current_mA = ina219.getCurrent_mA();
   b4c62:	ed87 0a00 	vstr	s0, [r7]
  power_mW = ina219.getPower_mW();
   b4c66:	f002 f89e 	bl	b6da6 <_ZN15Adafruit_INA21911getPower_mWEv>
   b4c6a:	9b06      	ldr	r3, [sp, #24]
  loadvoltage = busvoltage + (shuntvoltage / 1000);
   b4c6c:	ed9f 7a08 	vldr	s14, [pc, #32]	; b4c90 <_Z29measure_current_voltage_powerRfS_S_S_S_+0x54>
  power_mW = ina219.getPower_mW();
   b4c70:	ed83 0a00 	vstr	s0, [r3]
  loadvoltage = busvoltage + (shuntvoltage / 1000);
   b4c74:	edd5 6a00 	vldr	s13, [r5]
   b4c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
   b4c7c:	ed94 7a00 	vldr	s14, [r4]
   b4c80:	ee77 7a87 	vadd.f32	s15, s15, s14
   b4c84:	edc6 7a00 	vstr	s15, [r6]

}
   b4c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4c8a:	bf00      	nop
   b4c8c:	2003e5f4 	.word	0x2003e5f4
   b4c90:	447a0000 	.word	0x447a0000

000b4c94 <_Z27print_current_voltage_powerRfS_S_S_S_>:

void print_current_voltage_power(float& busvoltage, float& shuntvoltage, float& current_mA, float& loadvoltage, float& power_mW){
   b4c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4c98:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b4c9c:	4614      	mov	r4, r2
   b4c9e:	461d      	mov	r5, r3
   b4ca0:	460e      	mov	r6, r1
   b4ca2:	4607      	mov	r7, r0

  
  Serial.print("Bus Voltage:   "); Serial.print(busvoltage); Serial.println(" V");
   b4ca4:	f004 fb58 	bl	b9358 <_Z16_fetch_usbserialv>
   b4ca8:	492d      	ldr	r1, [pc, #180]	; (b4d60 <_Z27print_current_voltage_powerRfS_S_S_S_+0xcc>)
   b4caa:	f004 f807 	bl	b8cbc <_ZN5Print5printEPKc>
   b4cae:	f004 fb53 	bl	b9358 <_Z16_fetch_usbserialv>
   b4cb2:	ed97 0a00 	vldr	s0, [r7]
   b4cb6:	4f2b      	ldr	r7, [pc, #172]	; (b4d64 <_Z27print_current_voltage_powerRfS_S_S_S_+0xd0>)
   b4cb8:	2102      	movs	r1, #2
   b4cba:	f004 f933 	bl	b8f24 <_ZN5Print5printEfi>
   b4cbe:	f004 fb4b 	bl	b9358 <_Z16_fetch_usbserialv>
   b4cc2:	4639      	mov	r1, r7
   b4cc4:	f004 f80d 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  Serial.print("Shunt Voltage: "); Serial.print(shuntvoltage); Serial.println(" mV");
   b4cc8:	f004 fb46 	bl	b9358 <_Z16_fetch_usbserialv>
   b4ccc:	4926      	ldr	r1, [pc, #152]	; (b4d68 <_Z27print_current_voltage_powerRfS_S_S_S_+0xd4>)
   b4cce:	f003 fff5 	bl	b8cbc <_ZN5Print5printEPKc>
   b4cd2:	f004 fb41 	bl	b9358 <_Z16_fetch_usbserialv>
   b4cd6:	ed96 0a00 	vldr	s0, [r6]
   b4cda:	2102      	movs	r1, #2
   b4cdc:	f004 f922 	bl	b8f24 <_ZN5Print5printEfi>
   b4ce0:	f004 fb3a 	bl	b9358 <_Z16_fetch_usbserialv>
   b4ce4:	4921      	ldr	r1, [pc, #132]	; (b4d6c <_Z27print_current_voltage_powerRfS_S_S_S_+0xd8>)
   b4ce6:	f003 fffc 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  Serial.print("Load Voltage:  "); Serial.print(loadvoltage); Serial.println(" V");
   b4cea:	f004 fb35 	bl	b9358 <_Z16_fetch_usbserialv>
   b4cee:	4920      	ldr	r1, [pc, #128]	; (b4d70 <_Z27print_current_voltage_powerRfS_S_S_S_+0xdc>)
   b4cf0:	f003 ffe4 	bl	b8cbc <_ZN5Print5printEPKc>
   b4cf4:	f004 fb30 	bl	b9358 <_Z16_fetch_usbserialv>
   b4cf8:	ed95 0a00 	vldr	s0, [r5]
   b4cfc:	2102      	movs	r1, #2
   b4cfe:	f004 f911 	bl	b8f24 <_ZN5Print5printEfi>
   b4d02:	f004 fb29 	bl	b9358 <_Z16_fetch_usbserialv>
   b4d06:	4639      	mov	r1, r7
   b4d08:	f003 ffeb 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  Serial.print("Current:       "); Serial.print(current_mA); Serial.println(" mA");
   b4d0c:	f004 fb24 	bl	b9358 <_Z16_fetch_usbserialv>
   b4d10:	4918      	ldr	r1, [pc, #96]	; (b4d74 <_Z27print_current_voltage_powerRfS_S_S_S_+0xe0>)
   b4d12:	f003 ffd3 	bl	b8cbc <_ZN5Print5printEPKc>
   b4d16:	f004 fb1f 	bl	b9358 <_Z16_fetch_usbserialv>
   b4d1a:	ed94 0a00 	vldr	s0, [r4]
   b4d1e:	2102      	movs	r1, #2
   b4d20:	f004 f900 	bl	b8f24 <_ZN5Print5printEfi>
   b4d24:	f004 fb18 	bl	b9358 <_Z16_fetch_usbserialv>
   b4d28:	4913      	ldr	r1, [pc, #76]	; (b4d78 <_Z27print_current_voltage_powerRfS_S_S_S_+0xe4>)
   b4d2a:	f003 ffda 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  Serial.print("Power:         "); Serial.print(power_mW); Serial.println(" mW");
   b4d2e:	f004 fb13 	bl	b9358 <_Z16_fetch_usbserialv>
   b4d32:	4912      	ldr	r1, [pc, #72]	; (b4d7c <_Z27print_current_voltage_powerRfS_S_S_S_+0xe8>)
   b4d34:	f003 ffc2 	bl	b8cbc <_ZN5Print5printEPKc>
   b4d38:	f004 fb0e 	bl	b9358 <_Z16_fetch_usbserialv>
   b4d3c:	ed98 0a00 	vldr	s0, [r8]
   b4d40:	2102      	movs	r1, #2
   b4d42:	f004 f8ef 	bl	b8f24 <_ZN5Print5printEfi>
   b4d46:	f004 fb07 	bl	b9358 <_Z16_fetch_usbserialv>
   b4d4a:	490d      	ldr	r1, [pc, #52]	; (b4d80 <_Z27print_current_voltage_powerRfS_S_S_S_+0xec>)
   b4d4c:	f003 ffc9 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  Serial.println("");
   b4d50:	f004 fb02 	bl	b9358 <_Z16_fetch_usbserialv>
}
   b4d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  Serial.println("");
   b4d58:	490a      	ldr	r1, [pc, #40]	; (b4d84 <_Z27print_current_voltage_powerRfS_S_S_S_+0xf0>)
   b4d5a:	f003 bfc2 	b.w	b8ce2 <_ZN5Print7printlnEPKc>
   b4d5e:	bf00      	nop
   b4d60:	000bd325 	.word	0x000bd325
   b4d64:	000bd335 	.word	0x000bd335
   b4d68:	000bd338 	.word	0x000bd338
   b4d6c:	000bd348 	.word	0x000bd348
   b4d70:	000bd34c 	.word	0x000bd34c
   b4d74:	000bd35c 	.word	0x000bd35c
   b4d78:	000bd36c 	.word	0x000bd36c
   b4d7c:	000bd370 	.word	0x000bd370
   b4d80:	000bd380 	.word	0x000bd380
   b4d84:	000bd3a9 	.word	0x000bd3a9

000b4d88 <_Z25get_event_compass_headingv>:


float get_event_compass_heading(){
   b4d88:	b510      	push	{r4, lr}
   b4d8a:	b08a      	sub	sp, #40	; 0x28
sensors_event_t event;
  bno.getEvent(&event);
   b4d8c:	a901      	add	r1, sp, #4
   b4d8e:	4829      	ldr	r0, [pc, #164]	; (b4e34 <_Z25get_event_compass_headingv+0xac>)
   b4d90:	4c29      	ldr	r4, [pc, #164]	; (b4e38 <_Z25get_event_compass_headingv+0xb0>)
   b4d92:	f002 fb6b 	bl	b746c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  
  /* Display the floating point data */
  Serial.print("X: ");
   b4d96:	f004 fadf 	bl	b9358 <_Z16_fetch_usbserialv>
   b4d9a:	4928      	ldr	r1, [pc, #160]	; (b4e3c <_Z25get_event_compass_headingv+0xb4>)
   b4d9c:	f003 ff8e 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print(event.orientation.x, 4);
   b4da0:	f004 fada 	bl	b9358 <_Z16_fetch_usbserialv>
   b4da4:	ed9d 0a06 	vldr	s0, [sp, #24]
   b4da8:	2104      	movs	r1, #4
   b4daa:	f004 f8bb 	bl	b8f24 <_ZN5Print5printEfi>
  Serial.print("\tY: ");
   b4dae:	f004 fad3 	bl	b9358 <_Z16_fetch_usbserialv>
   b4db2:	4923      	ldr	r1, [pc, #140]	; (b4e40 <_Z25get_event_compass_headingv+0xb8>)
   b4db4:	f003 ff82 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print(event.orientation.y, 4);
   b4db8:	f004 face 	bl	b9358 <_Z16_fetch_usbserialv>
   b4dbc:	ed9d 0a07 	vldr	s0, [sp, #28]
   b4dc0:	2104      	movs	r1, #4
   b4dc2:	f004 f8af 	bl	b8f24 <_ZN5Print5printEfi>
  Serial.print("\tZ: ");
   b4dc6:	f004 fac7 	bl	b9358 <_Z16_fetch_usbserialv>
   b4dca:	491e      	ldr	r1, [pc, #120]	; (b4e44 <_Z25get_event_compass_headingv+0xbc>)
   b4dcc:	f003 ff76 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print(event.orientation.z, 4);
   b4dd0:	f004 fac2 	bl	b9358 <_Z16_fetch_usbserialv>
   b4dd4:	ed9d 0a08 	vldr	s0, [sp, #32]
   b4dd8:	2104      	movs	r1, #4
   b4dda:	f004 f8a3 	bl	b8f24 <_ZN5Print5printEfi>
  Serial.println("");
   b4dde:	f004 fabb 	bl	b9358 <_Z16_fetch_usbserialv>
   b4de2:	4919      	ldr	r1, [pc, #100]	; (b4e48 <_Z25get_event_compass_headingv+0xc0>)
   b4de4:	f003 ff7d 	bl	b8ce2 <_ZN5Print7printlnEPKc>

  Serial.println("\n\n");
   b4de8:	f004 fab6 	bl	b9358 <_Z16_fetch_usbserialv>
   b4dec:	4917      	ldr	r1, [pc, #92]	; (b4e4c <_Z25get_event_compass_headingv+0xc4>)
   b4dee:	f003 ff78 	bl	b8ce2 <_ZN5Print7printlnEPKc>

  compass_heading = event.orientation.x + 104;
   b4df2:	eddd 7a06 	vldr	s15, [sp, #24]
   b4df6:	ed9f 7a16 	vldr	s14, [pc, #88]	; b4e50 <_Z25get_event_compass_headingv+0xc8>
   b4dfa:	ee77 7a87 	vadd.f32	s15, s15, s14

  if(compass_heading > 360) {
   b4dfe:	ed9f 7a15 	vldr	s14, [pc, #84]	; b4e54 <_Z25get_event_compass_headingv+0xcc>
   b4e02:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    compass_heading = compass_heading - 360;
   b4e0a:	bfc8      	it	gt
   b4e0c:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
   b4e10:	edc4 7a00 	vstr	s15, [r4]
  }
  
  Serial.print("compass heading:  ");
   b4e14:	f004 faa0 	bl	b9358 <_Z16_fetch_usbserialv>
   b4e18:	490f      	ldr	r1, [pc, #60]	; (b4e58 <_Z25get_event_compass_headingv+0xd0>)
   b4e1a:	f003 ff4f 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print(compass_heading, 4);
   b4e1e:	f004 fa9b 	bl	b9358 <_Z16_fetch_usbserialv>
   b4e22:	ed94 0a00 	vldr	s0, [r4]
   b4e26:	2104      	movs	r1, #4
   b4e28:	f004 f87c 	bl	b8f24 <_ZN5Print5printEfi>
  return compass_heading;
}
   b4e2c:	ed94 0a00 	vldr	s0, [r4]
   b4e30:	b00a      	add	sp, #40	; 0x28
   b4e32:	bd10      	pop	{r4, pc}
   b4e34:	2003e538 	.word	0x2003e538
   b4e38:	2003e564 	.word	0x2003e564
   b4e3c:	000bd384 	.word	0x000bd384
   b4e40:	000bd388 	.word	0x000bd388
   b4e44:	000bd38d 	.word	0x000bd38d
   b4e48:	000bd3a9 	.word	0x000bd3a9
   b4e4c:	000bd392 	.word	0x000bd392
   b4e50:	42d00000 	.word	0x42d00000
   b4e54:	43b40000 	.word	0x43b40000
   b4e58:	000bd395 	.word	0x000bd395

000b4e5c <_GLOBAL__sub_I_i2ceeprom>:
   b4e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
Adafruit_EEPROM_I2C i2ceeprom;
   b4e5e:	4814      	ldr	r0, [pc, #80]	; (b4eb0 <_GLOBAL__sub_I_i2ceeprom+0x54>)
   b4e60:	f003 fa30 	bl	b82c4 <_ZN19Adafruit_EEPROM_I2CC1Ev>
Adafruit_INA219 ina219;
   b4e64:	2140      	movs	r1, #64	; 0x40
   b4e66:	4813      	ldr	r0, [pc, #76]	; (b4eb4 <_GLOBAL__sub_I_i2ceeprom+0x58>)
   b4e68:	f001 feeb 	bl	b6c42 <_ZN15Adafruit_INA219C1Eh>
Adafruit_BME280 bme; // I2C
   b4e6c:	4812      	ldr	r0, [pc, #72]	; (b4eb8 <_GLOBAL__sub_I_i2ceeprom+0x5c>)
   b4e6e:	f000 ff6b 	bl	b5d48 <_ZN15Adafruit_BME280C1Ev>
Adafruit_SH1107 display = Adafruit_SH1107(64, 128, &Wire);
   b4e72:	f004 fd93 	bl	b999c <_Z19__fetch_global_Wirev>
   b4e76:	4a11      	ldr	r2, [pc, #68]	; (b4ebc <_GLOBAL__sub_I_i2ceeprom+0x60>)
   b4e78:	4911      	ldr	r1, [pc, #68]	; (b4ec0 <_GLOBAL__sub_I_i2ceeprom+0x64>)
   b4e7a:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b4e7e:	f04f 32ff 	mov.w	r2, #4294967295
   b4e82:	4603      	mov	r3, r0
   b4e84:	9200      	str	r2, [sp, #0]
   b4e86:	2140      	movs	r1, #64	; 0x40
   b4e88:	2280      	movs	r2, #128	; 0x80
   b4e8a:	480e      	ldr	r0, [pc, #56]	; (b4ec4 <_GLOBAL__sub_I_i2ceeprom+0x68>)
   b4e8c:	f003 f994 	bl	b81b8 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
   b4e90:	f004 fd84 	bl	b999c <_Z19__fetch_global_Wirev>
   b4e94:	2228      	movs	r2, #40	; 0x28
   b4e96:	4603      	mov	r3, r0
   b4e98:	2137      	movs	r1, #55	; 0x37
   b4e9a:	480b      	ldr	r0, [pc, #44]	; (b4ec8 <_GLOBAL__sub_I_i2ceeprom+0x6c>)
   b4e9c:	f002 f826 	bl	b6eec <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
String heading;
   b4ea0:	490a      	ldr	r1, [pc, #40]	; (b4ecc <_GLOBAL__sub_I_i2ceeprom+0x70>)
   b4ea2:	480b      	ldr	r0, [pc, #44]	; (b4ed0 <_GLOBAL__sub_I_i2ceeprom+0x74>)
}
   b4ea4:	b005      	add	sp, #20
   b4ea6:	f85d eb04 	ldr.w	lr, [sp], #4
String heading;
   b4eaa:	f003 be8c 	b.w	b8bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4eae:	bf00      	nop
   b4eb0:	2003e5ec 	.word	0x2003e5ec
   b4eb4:	2003e5f4 	.word	0x2003e5f4
   b4eb8:	2003e4c4 	.word	0x2003e4c4
   b4ebc:	00061a80 	.word	0x00061a80
   b4ec0:	000186a0 	.word	0x000186a0
   b4ec4:	2003e574 	.word	0x2003e574
   b4ec8:	2003e538 	.word	0x2003e538
   b4ecc:	000bd3a9 	.word	0x000bd3a9
   b4ed0:	2003e5dc 	.word	0x2003e5dc

000b4ed4 <_Z16displayCalStatusv>:
{
   b4ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    system = gyro = accel = mag = 0;
   b4ed6:	2300      	movs	r3, #0
   b4ed8:	f88d 300f 	strb.w	r3, [sp, #15]
   b4edc:	f88d 300e 	strb.w	r3, [sp, #14]
   b4ee0:	f88d 300d 	strb.w	r3, [sp, #13]
   b4ee4:	f88d 300c 	strb.w	r3, [sp, #12]
    bno.getCalibration(&system, &gyro, &accel, &mag);
   b4ee8:	f10d 030f 	add.w	r3, sp, #15
   b4eec:	f10d 020d 	add.w	r2, sp, #13
   b4ef0:	a903      	add	r1, sp, #12
   b4ef2:	483b      	ldr	r0, [pc, #236]	; (b4fe0 <_Z16displayCalStatusv+0x10c>)
   b4ef4:	9300      	str	r3, [sp, #0]
   b4ef6:	f10d 030e 	add.w	r3, sp, #14
   b4efa:	f002 f959 	bl	b71b0 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
    Serial.print("\t");
   b4efe:	f004 fa2b 	bl	b9358 <_Z16_fetch_usbserialv>
   b4f02:	4938      	ldr	r1, [pc, #224]	; (b4fe4 <_Z16displayCalStatusv+0x110>)
   b4f04:	f003 feda 	bl	b8cbc <_ZN5Print5printEPKc>
    if (!system)
   b4f08:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b4f0c:	b923      	cbnz	r3, b4f18 <_Z16displayCalStatusv+0x44>
        Serial.print("! ");
   b4f0e:	f004 fa23 	bl	b9358 <_Z16_fetch_usbserialv>
   b4f12:	4935      	ldr	r1, [pc, #212]	; (b4fe8 <_Z16displayCalStatusv+0x114>)
   b4f14:	f003 fed2 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print("Sys:");
   b4f18:	f004 fa1e 	bl	b9358 <_Z16_fetch_usbserialv>
   b4f1c:	4933      	ldr	r1, [pc, #204]	; (b4fec <_Z16displayCalStatusv+0x118>)
    display.clearDisplay();
   b4f1e:	4c34      	ldr	r4, [pc, #208]	; (b4ff0 <_Z16displayCalStatusv+0x11c>)
    Serial.print("Sys:");
   b4f20:	f003 fecc 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(system, DEC);
   b4f24:	f004 fa18 	bl	b9358 <_Z16_fetch_usbserialv>
   b4f28:	220a      	movs	r2, #10
   b4f2a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b4f2e:	f7ff f915 	bl	b415c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    Serial.print(" G:");
   b4f32:	f004 fa11 	bl	b9358 <_Z16_fetch_usbserialv>
   b4f36:	492f      	ldr	r1, [pc, #188]	; (b4ff4 <_Z16displayCalStatusv+0x120>)
   b4f38:	f003 fec0 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(gyro, DEC);
   b4f3c:	f004 fa0c 	bl	b9358 <_Z16_fetch_usbserialv>
   b4f40:	220a      	movs	r2, #10
   b4f42:	f89d 100d 	ldrb.w	r1, [sp, #13]
   b4f46:	f7ff f909 	bl	b415c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    Serial.print(" A:");
   b4f4a:	f004 fa05 	bl	b9358 <_Z16_fetch_usbserialv>
   b4f4e:	492a      	ldr	r1, [pc, #168]	; (b4ff8 <_Z16displayCalStatusv+0x124>)
   b4f50:	f003 feb4 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(accel, DEC);
   b4f54:	f004 fa00 	bl	b9358 <_Z16_fetch_usbserialv>
   b4f58:	220a      	movs	r2, #10
   b4f5a:	f89d 100e 	ldrb.w	r1, [sp, #14]
   b4f5e:	f7ff f8fd 	bl	b415c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    Serial.print(" M:");
   b4f62:	f004 f9f9 	bl	b9358 <_Z16_fetch_usbserialv>
   b4f66:	4925      	ldr	r1, [pc, #148]	; (b4ffc <_Z16displayCalStatusv+0x128>)
   b4f68:	f003 fea8 	bl	b8cbc <_ZN5Print5printEPKc>
    Serial.print(mag, DEC);
   b4f6c:	f004 f9f4 	bl	b9358 <_Z16_fetch_usbserialv>
   b4f70:	f89d 100f 	ldrb.w	r1, [sp, #15]
   b4f74:	220a      	movs	r2, #10
   b4f76:	f7ff f8f1 	bl	b415c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    display.clearDisplay();
   b4f7a:	4620      	mov	r0, r4
   b4f7c:	f002 fbc4 	bl	b7708 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
   b4f80:	2300      	movs	r3, #0
    display.print("Sys:");
   b4f82:	491a      	ldr	r1, [pc, #104]	; (b4fec <_Z16displayCalStatusv+0x118>)
   b4f84:	6123      	str	r3, [r4, #16]
   b4f86:	4620      	mov	r0, r4
   b4f88:	f003 fe98 	bl	b8cbc <_ZN5Print5printEPKc>
    display.print(system, DEC);
   b4f8c:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b4f90:	220a      	movs	r2, #10
   b4f92:	4620      	mov	r0, r4
   b4f94:	f7ff f8e2 	bl	b415c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    display.print(" G:");
   b4f98:	4916      	ldr	r1, [pc, #88]	; (b4ff4 <_Z16displayCalStatusv+0x120>)
   b4f9a:	4620      	mov	r0, r4
   b4f9c:	f003 fe8e 	bl	b8cbc <_ZN5Print5printEPKc>
    display.print(gyro, DEC);
   b4fa0:	f89d 100d 	ldrb.w	r1, [sp, #13]
   b4fa4:	220a      	movs	r2, #10
   b4fa6:	4620      	mov	r0, r4
   b4fa8:	f7ff f8d8 	bl	b415c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    display.print(" A:");
   b4fac:	4912      	ldr	r1, [pc, #72]	; (b4ff8 <_Z16displayCalStatusv+0x124>)
   b4fae:	4620      	mov	r0, r4
   b4fb0:	f003 fe84 	bl	b8cbc <_ZN5Print5printEPKc>
    display.print(accel, DEC);
   b4fb4:	f89d 100e 	ldrb.w	r1, [sp, #14]
   b4fb8:	220a      	movs	r2, #10
   b4fba:	4620      	mov	r0, r4
   b4fbc:	f7ff f8ce 	bl	b415c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    display.print(" M:");
   b4fc0:	490e      	ldr	r1, [pc, #56]	; (b4ffc <_Z16displayCalStatusv+0x128>)
   b4fc2:	4620      	mov	r0, r4
   b4fc4:	f003 fe7a 	bl	b8cbc <_ZN5Print5printEPKc>
    display.print(mag, DEC);
   b4fc8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   b4fcc:	220a      	movs	r2, #10
   b4fce:	4620      	mov	r0, r4
   b4fd0:	f7ff f8c4 	bl	b415c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    display.display();
   b4fd4:	4620      	mov	r0, r4
   b4fd6:	f003 f80c 	bl	b7ff2 <_ZN15Adafruit_SH110X7displayEv>
}
   b4fda:	b004      	add	sp, #16
   b4fdc:	bd10      	pop	{r4, pc}
   b4fde:	bf00      	nop
   b4fe0:	2003e538 	.word	0x2003e538
   b4fe4:	000bd3a8 	.word	0x000bd3a8
   b4fe8:	000bd3aa 	.word	0x000bd3aa
   b4fec:	000bd3ad 	.word	0x000bd3ad
   b4ff0:	2003e574 	.word	0x2003e574
   b4ff4:	000bd3b2 	.word	0x000bd3b2
   b4ff8:	000bd3b6 	.word	0x000bd3b6
   b4ffc:	000bd3ba 	.word	0x000bd3ba

000b5000 <_Z14displayValues1lllllll>:
void displayValues1(int32_t bme_temperature_average, int32_t bme_pressure_average, int32_t bme_humidity_average, int32_t bme_altitude_average, int32_t busvoltage_average, int32_t current_mA_average, int32_t power_mW_average) {
   b5000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    display.clearDisplay();
   b5004:	4c38      	ldr	r4, [pc, #224]	; (b50e8 <_Z14displayValues1lllllll+0xe8>)
void displayValues1(int32_t bme_temperature_average, int32_t bme_pressure_average, int32_t bme_humidity_average, int32_t bme_altitude_average, int32_t busvoltage_average, int32_t current_mA_average, int32_t power_mW_average) {
   b5006:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   b500a:	4680      	mov	r8, r0
    display.clearDisplay();
   b500c:	4620      	mov	r0, r4
void displayValues1(int32_t bme_temperature_average, int32_t bme_pressure_average, int32_t bme_humidity_average, int32_t bme_altitude_average, int32_t busvoltage_average, int32_t current_mA_average, int32_t power_mW_average) {
   b500e:	4616      	mov	r6, r2
   b5010:	460f      	mov	r7, r1
   b5012:	461d      	mov	r5, r3
   b5014:	e9dd ba0a 	ldrd	fp, sl, [sp, #40]	; 0x28
    display.clearDisplay();
   b5018:	f002 fb76 	bl	b7708 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   b501c:	4620      	mov	r0, r4
   b501e:	f002 ffe8 	bl	b7ff2 <_ZN15Adafruit_SH110X7displayEv>
   b5022:	2300      	movs	r3, #0
    display.print("Temp. = ");
   b5024:	4931      	ldr	r1, [pc, #196]	; (b50ec <_Z14displayValues1lllllll+0xec>)
   b5026:	6123      	str	r3, [r4, #16]
   b5028:	4620      	mov	r0, r4
   b502a:	f003 fe47 	bl	b8cbc <_ZN5Print5printEPKc>
    display.print(bme_temperature_average);
   b502e:	220a      	movs	r2, #10
   b5030:	4641      	mov	r1, r8
   b5032:	4620      	mov	r0, r4
   b5034:	f7ff f877 	bl	b4126 <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" F");
   b5038:	492d      	ldr	r1, [pc, #180]	; (b50f0 <_Z14displayValues1lllllll+0xf0>)
   b503a:	4620      	mov	r0, r4
   b503c:	f003 fe51 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    display.print("Press. = ");
   b5040:	492c      	ldr	r1, [pc, #176]	; (b50f4 <_Z14displayValues1lllllll+0xf4>)
   b5042:	4620      	mov	r0, r4
   b5044:	f003 fe3a 	bl	b8cbc <_ZN5Print5printEPKc>
    display.print(bme_pressure_average);
   b5048:	220a      	movs	r2, #10
   b504a:	4639      	mov	r1, r7
   b504c:	4620      	mov	r0, r4
   b504e:	f7ff f86a 	bl	b4126 <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" mmHg");
   b5052:	4929      	ldr	r1, [pc, #164]	; (b50f8 <_Z14displayValues1lllllll+0xf8>)
   b5054:	4620      	mov	r0, r4
   b5056:	f003 fe44 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    display.print("Humidity = ");
   b505a:	4928      	ldr	r1, [pc, #160]	; (b50fc <_Z14displayValues1lllllll+0xfc>)
   b505c:	4620      	mov	r0, r4
   b505e:	f003 fe2d 	bl	b8cbc <_ZN5Print5printEPKc>
    display.print(bme_humidity_average);
   b5062:	220a      	movs	r2, #10
   b5064:	4631      	mov	r1, r6
   b5066:	4620      	mov	r0, r4
   b5068:	f7ff f85d 	bl	b4126 <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" %");
   b506c:	4924      	ldr	r1, [pc, #144]	; (b5100 <_Z14displayValues1lllllll+0x100>)
   b506e:	4620      	mov	r0, r4
   b5070:	f003 fe37 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    display.print("Altitude = ");
   b5074:	4923      	ldr	r1, [pc, #140]	; (b5104 <_Z14displayValues1lllllll+0x104>)
   b5076:	4620      	mov	r0, r4
   b5078:	f003 fe20 	bl	b8cbc <_ZN5Print5printEPKc>
    display.print(bme_altitude_average);
   b507c:	220a      	movs	r2, #10
   b507e:	4629      	mov	r1, r5
   b5080:	4620      	mov	r0, r4
   b5082:	f7ff f850 	bl	b4126 <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" m");
   b5086:	4920      	ldr	r1, [pc, #128]	; (b5108 <_Z14displayValues1lllllll+0x108>)
   b5088:	4620      	mov	r0, r4
   b508a:	f003 fe2a 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    display.print("Bus voltage = ");
   b508e:	491f      	ldr	r1, [pc, #124]	; (b510c <_Z14displayValues1lllllll+0x10c>)
   b5090:	4620      	mov	r0, r4
   b5092:	f003 fe13 	bl	b8cbc <_ZN5Print5printEPKc>
    display.print(busvoltage_average);
   b5096:	220a      	movs	r2, #10
   b5098:	4659      	mov	r1, fp
   b509a:	4620      	mov	r0, r4
   b509c:	f7ff f843 	bl	b4126 <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" V");
   b50a0:	491b      	ldr	r1, [pc, #108]	; (b5110 <_Z14displayValues1lllllll+0x110>)
   b50a2:	4620      	mov	r0, r4
   b50a4:	f003 fe1d 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    display.print("current = ");
   b50a8:	491a      	ldr	r1, [pc, #104]	; (b5114 <_Z14displayValues1lllllll+0x114>)
   b50aa:	4620      	mov	r0, r4
   b50ac:	f003 fe06 	bl	b8cbc <_ZN5Print5printEPKc>
    display.print(current_mA_average);
   b50b0:	220a      	movs	r2, #10
   b50b2:	4651      	mov	r1, sl
   b50b4:	4620      	mov	r0, r4
   b50b6:	f7ff f836 	bl	b4126 <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" mA");
   b50ba:	4917      	ldr	r1, [pc, #92]	; (b5118 <_Z14displayValues1lllllll+0x118>)
   b50bc:	4620      	mov	r0, r4
   b50be:	f003 fe10 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    display.print("power = ");
   b50c2:	4916      	ldr	r1, [pc, #88]	; (b511c <_Z14displayValues1lllllll+0x11c>)
   b50c4:	4620      	mov	r0, r4
   b50c6:	f003 fdf9 	bl	b8cbc <_ZN5Print5printEPKc>
    display.print(power_mW_average);
   b50ca:	4649      	mov	r1, r9
   b50cc:	4620      	mov	r0, r4
   b50ce:	220a      	movs	r2, #10
   b50d0:	f7ff f829 	bl	b4126 <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" mW");
   b50d4:	4620      	mov	r0, r4
   b50d6:	4912      	ldr	r1, [pc, #72]	; (b5120 <_Z14displayValues1lllllll+0x120>)
   b50d8:	f003 fe03 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    display.display(); // actually display all of the above
   b50dc:	4620      	mov	r0, r4
  }
   b50de:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    display.display(); // actually display all of the above
   b50e2:	f002 bf86 	b.w	b7ff2 <_ZN15Adafruit_SH110X7displayEv>
   b50e6:	bf00      	nop
   b50e8:	2003e574 	.word	0x2003e574
   b50ec:	000bd3be 	.word	0x000bd3be
   b50f0:	000bd18b 	.word	0x000bd18b
   b50f4:	000bd3c7 	.word	0x000bd3c7
   b50f8:	000bd19a 	.word	0x000bd19a
   b50fc:	000bd1b7 	.word	0x000bd1b7
   b5100:	000bd1c3 	.word	0x000bd1c3
   b5104:	000bd1a8 	.word	0x000bd1a8
   b5108:	000bd1b4 	.word	0x000bd1b4
   b510c:	000bd3d1 	.word	0x000bd3d1
   b5110:	000bd335 	.word	0x000bd335
   b5114:	000bd3e0 	.word	0x000bd3e0
   b5118:	000bd36c 	.word	0x000bd36c
   b511c:	000bd3eb 	.word	0x000bd3eb
   b5120:	000bd380 	.word	0x000bd380

000b5124 <_Z14displayValues2lR6StringRf>:
void displayValues2(int32_t vane_wind_direction_average, String& heading  , float& WindSpeed) {
   b5124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    display.clearDisplay();
   b5126:	4c1a      	ldr	r4, [pc, #104]	; (b5190 <_Z14displayValues2lR6StringRf+0x6c>)
void displayValues2(int32_t vane_wind_direction_average, String& heading  , float& WindSpeed) {
   b5128:	4607      	mov	r7, r0
    display.clearDisplay();
   b512a:	4620      	mov	r0, r4
void displayValues2(int32_t vane_wind_direction_average, String& heading  , float& WindSpeed) {
   b512c:	4615      	mov	r5, r2
   b512e:	460e      	mov	r6, r1
    display.clearDisplay();
   b5130:	f002 faea 	bl	b7708 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   b5134:	4620      	mov	r0, r4
   b5136:	f002 ff5c 	bl	b7ff2 <_ZN15Adafruit_SH110X7displayEv>
   b513a:	2300      	movs	r3, #0
    display.print("vane dir. = ");
   b513c:	4915      	ldr	r1, [pc, #84]	; (b5194 <_Z14displayValues2lR6StringRf+0x70>)
   b513e:	6123      	str	r3, [r4, #16]
   b5140:	4620      	mov	r0, r4
   b5142:	f003 fdbb 	bl	b8cbc <_ZN5Print5printEPKc>
    display.print(vane_wind_direction_average);
   b5146:	220a      	movs	r2, #10
   b5148:	4639      	mov	r1, r7
   b514a:	4620      	mov	r0, r4
   b514c:	f7fe ffeb 	bl	b4126 <_ZN5Print5printIlLi0EEEjT_i.isra.0>
    display.println(" d");
   b5150:	4911      	ldr	r1, [pc, #68]	; (b5198 <_Z14displayValues2lR6StringRf+0x74>)
   b5152:	4620      	mov	r0, r4
   b5154:	f003 fdc5 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    display.print("heading = ");
   b5158:	4910      	ldr	r1, [pc, #64]	; (b519c <_Z14displayValues2lR6StringRf+0x78>)
   b515a:	4620      	mov	r0, r4
   b515c:	f003 fdae 	bl	b8cbc <_ZN5Print5printEPKc>
    display.println(heading);
   b5160:	6831      	ldr	r1, [r6, #0]
   b5162:	4620      	mov	r0, r4
   b5164:	f003 fdbd 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    display.print("WindSpeed = ");
   b5168:	490d      	ldr	r1, [pc, #52]	; (b51a0 <_Z14displayValues2lR6StringRf+0x7c>)
   b516a:	4620      	mov	r0, r4
   b516c:	f003 fda6 	bl	b8cbc <_ZN5Print5printEPKc>
    display.print(WindSpeed);
   b5170:	ed95 0a00 	vldr	s0, [r5]
   b5174:	2102      	movs	r1, #2
   b5176:	4620      	mov	r0, r4
   b5178:	f003 fed4 	bl	b8f24 <_ZN5Print5printEfi>
    display.println(" mph");
   b517c:	4620      	mov	r0, r4
   b517e:	4909      	ldr	r1, [pc, #36]	; (b51a4 <_Z14displayValues2lR6StringRf+0x80>)
   b5180:	f003 fdaf 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  display.display(); // actually display all of the above
   b5184:	4620      	mov	r0, r4
  }
   b5186:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  display.display(); // actually display all of the above
   b518a:	f002 bf32 	b.w	b7ff2 <_ZN15Adafruit_SH110X7displayEv>
   b518e:	bf00      	nop
   b5190:	2003e574 	.word	0x2003e574
   b5194:	000bd3f4 	.word	0x000bd3f4
   b5198:	000bd401 	.word	0x000bd401
   b519c:	000bd404 	.word	0x000bd404
   b51a0:	000bd40f 	.word	0x000bd40f
   b51a4:	000bd41c 	.word	0x000bd41c

000b51a8 <loop>:
void loop(void) {
   b51a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b51ac:	ed2d 8b02 	vpush	{d8}
digitalWrite(vane_switch, HIGH);
   b51b0:	4bcf      	ldr	r3, [pc, #828]	; (b54f0 <loop+0x348>)
read_bme_values(bme_temperature, bme_pressure, bme_humidity, bme_altitude);
   b51b2:	4ed0      	ldr	r6, [pc, #832]	; (b54f4 <loop+0x34c>)
digitalWrite(vane_switch, HIGH);
   b51b4:	7818      	ldrb	r0, [r3, #0]
read_bme_values(bme_temperature, bme_pressure, bme_humidity, bme_altitude);
   b51b6:	4fd0      	ldr	r7, [pc, #832]	; (b54f8 <loop+0x350>)
   b51b8:	f8df 83dc 	ldr.w	r8, [pc, #988]	; b5598 <loop+0x3f0>
   b51bc:	f8df 93dc 	ldr.w	r9, [pc, #988]	; b559c <loop+0x3f4>
vane_wind_direction = measure_wind_direction();
   b51c0:	f8df b3dc 	ldr.w	fp, [pc, #988]	; b55a0 <loop+0x3f8>
  measure_current_voltage_power(shuntvoltage, busvoltage,current_mA, loadvoltage, power_mW );
   b51c4:	f8df a3dc 	ldr.w	sl, [pc, #988]	; b55a4 <loop+0x3fc>
   b51c8:	4dcc      	ldr	r5, [pc, #816]	; (b54fc <loop+0x354>)
   b51ca:	4ccd      	ldr	r4, [pc, #820]	; (b5500 <loop+0x358>)
void loop(void) {
   b51cc:	b089      	sub	sp, #36	; 0x24
digitalWrite(vane_switch, HIGH);
   b51ce:	2101      	movs	r1, #1
   b51d0:	f004 fb33 	bl	b983a <digitalWrite>
vane_wind_direction = measure_wind_direction();
   b51d4:	f7ff fcd6 	bl	b4b84 <_Z22measure_wind_directionv>
read_bme_values(bme_temperature, bme_pressure, bme_humidity, bme_altitude);
   b51d8:	4633      	mov	r3, r6
vane_wind_direction = measure_wind_direction();
   b51da:	f8cb 0000 	str.w	r0, [fp]
read_bme_values(bme_temperature, bme_pressure, bme_humidity, bme_altitude);
   b51de:	463a      	mov	r2, r7
   b51e0:	4641      	mov	r1, r8
   b51e2:	4648      	mov	r0, r9
   b51e4:	f7ff f82a 	bl	b423c <_Z15read_bme_valuesRfS_S_S_>
printValues(bme_temperature, bme_pressure, bme_humidity, bme_altitude);
   b51e8:	463a      	mov	r2, r7
   b51ea:	4641      	mov	r1, r8
   b51ec:	4648      	mov	r0, r9
   b51ee:	4633      	mov	r3, r6
   b51f0:	f7ff f85a 	bl	b42a8 <_Z11printValuesRfS_S_S_>
event_compass_heading = get_event_compass_heading();
   b51f4:	f7ff fdc8 	bl	b4d88 <_Z25get_event_compass_headingv>
   b51f8:	4bc2      	ldr	r3, [pc, #776]	; (b5504 <loop+0x35c>)
   b51fa:	ed83 0a00 	vstr	s0, [r3]
  bno_compass_heading = get_compass_heading();
   b51fe:	f7ff f9eb 	bl	b45d8 <_Z19get_compass_headingv>
   b5202:	4ac1      	ldr	r2, [pc, #772]	; (b5508 <loop+0x360>)
  measure_current_voltage_power(shuntvoltage, busvoltage,current_mA, loadvoltage, power_mW );
   b5204:	4bc1      	ldr	r3, [pc, #772]	; (b550c <loop+0x364>)
  bno_compass_heading = get_compass_heading();
   b5206:	ed82 0a00 	vstr	s0, [r2]
  measure_current_voltage_power(shuntvoltage, busvoltage,current_mA, loadvoltage, power_mW );
   b520a:	4629      	mov	r1, r5
   b520c:	4652      	mov	r2, sl
   b520e:	48c0      	ldr	r0, [pc, #768]	; (b5510 <loop+0x368>)
   b5210:	9400      	str	r4, [sp, #0]
   b5212:	f7ff fd13 	bl	b4c3c <_Z29measure_current_voltage_powerRfS_S_S_S_>
  Serial.print("\ncurrent_mA = ");
   b5216:	f004 f89f 	bl	b9358 <_Z16_fetch_usbserialv>
   b521a:	49be      	ldr	r1, [pc, #760]	; (b5514 <loop+0x36c>)
   b521c:	f003 fd4e 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print( current_mA);
   b5220:	f004 f89a 	bl	b9358 <_Z16_fetch_usbserialv>
   b5224:	ed9a 0a00 	vldr	s0, [sl]
   b5228:	2102      	movs	r1, #2
   b522a:	f003 fe7b 	bl	b8f24 <_ZN5Print5printEfi>
  Serial.print("\n");
   b522e:	f004 f893 	bl	b9358 <_Z16_fetch_usbserialv>
   b5232:	49b9      	ldr	r1, [pc, #740]	; (b5518 <loop+0x370>)
   b5234:	f003 fd42 	bl	b8cbc <_ZN5Print5printEPKc>
  print_current_voltage_power(busvoltage, shuntvoltage, current_mA, loadvoltage, power_mW);
   b5238:	4652      	mov	r2, sl
   b523a:	4628      	mov	r0, r5
   b523c:	4bb3      	ldr	r3, [pc, #716]	; (b550c <loop+0x364>)
   b523e:	49b4      	ldr	r1, [pc, #720]	; (b5510 <loop+0x368>)
   b5240:	9400      	str	r4, [sp, #0]
   b5242:	f7ff fd27 	bl	b4c94 <_Z27print_current_voltage_powerRfS_S_S_S_>
bme_temperature_total = bme_temperature_total + (int) bme_temperature;
   b5246:	edd9 7a00 	vldr	s15, [r9]
   b524a:	48b4      	ldr	r0, [pc, #720]	; (b551c <loop+0x374>)
busvoltage_total = busvoltage_total + (int) busvoltage;
   b524c:	ed95 7a00 	vldr	s14, [r5]
bme_temperature_total = bme_temperature_total + (int) bme_temperature;
   b5250:	6801      	ldr	r1, [r0, #0]
load_voltage_total = load_voltage_total + (int) loadvoltage;
   b5252:	4bae      	ldr	r3, [pc, #696]	; (b550c <loop+0x364>)
shunt_voltage_total = shunt_voltage_total + (int) busvoltage;
   b5254:	4db2      	ldr	r5, [pc, #712]	; (b5520 <loop+0x378>)
vane_wind_direction_total = vane_wind_direction_total + (int) vane_wind_direction;
   b5256:	f8df 9350 	ldr.w	r9, [pc, #848]	; b55a8 <loop+0x400>
   b525a:	f8db 2000 	ldr.w	r2, [fp]
event_compass_heading_total = event_compass_heading_total + (int) event_compass_heading;
   b525e:	f8df b34c 	ldr.w	fp, [pc, #844]	; b55ac <loop+0x404>
bme_temperature_total = bme_temperature_total + (int) bme_temperature;
   b5262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
busvoltage_total = busvoltage_total + (int) busvoltage;
   b5266:	eebd 7ac7 	vcvt.s32.f32	s14, s14
bme_temperature_total = bme_temperature_total + (int) bme_temperature;
   b526a:	ee17 ca90 	vmov	ip, s15
bme_pressure_total = bme_pressure_total + (int) bme_pressure;
   b526e:	edd8 7a00 	vldr	s15, [r8]
power_mW_total = power_mW_total + (int) power_mW;
   b5272:	f8df 833c 	ldr.w	r8, [pc, #828]	; b55b0 <loop+0x408>
bme_temperature_total = bme_temperature_total + (int) bme_temperature;
   b5276:	448c      	add	ip, r1
   b5278:	f8c0 c000 	str.w	ip, [r0]
bme_pressure_total = bme_pressure_total + (int) bme_pressure;
   b527c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5280:	48a8      	ldr	r0, [pc, #672]	; (b5524 <loop+0x37c>)
   b5282:	ee17 ca90 	vmov	ip, s15
   b5286:	6801      	ldr	r1, [r0, #0]
bme_humidity_total = bme_humidity_total + (int) bme_humidity;
   b5288:	edd7 7a00 	vldr	s15, [r7]
bme_pressure_total = bme_pressure_total + (int) bme_pressure;
   b528c:	448c      	add	ip, r1
   b528e:	f8c0 c000 	str.w	ip, [r0]
bme_humidity_total = bme_humidity_total + (int) bme_humidity;
   b5292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5296:	48a4      	ldr	r0, [pc, #656]	; (b5528 <loop+0x380>)
   b5298:	ee17 7a90 	vmov	r7, s15
   b529c:	6801      	ldr	r1, [r0, #0]
bme_altitude_total = bme_altitude_total + (int) bme_altitude;
   b529e:	edd6 7a00 	vldr	s15, [r6]
load_voltage_total = load_voltage_total + (int) loadvoltage;
   b52a2:	4ea2      	ldr	r6, [pc, #648]	; (b552c <loop+0x384>)
bme_humidity_total = bme_humidity_total + (int) bme_humidity;
   b52a4:	440f      	add	r7, r1
   b52a6:	6007      	str	r7, [r0, #0]
bme_altitude_total = bme_altitude_total + (int) bme_altitude;
   b52a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b52ac:	4fa0      	ldr	r7, [pc, #640]	; (b5530 <loop+0x388>)
load_voltage_total = load_voltage_total + (int) loadvoltage;
   b52ae:	edd6 6a00 	vldr	s13, [r6]
bme_altitude_total = bme_altitude_total + (int) bme_altitude;
   b52b2:	6839      	ldr	r1, [r7, #0]
   b52b4:	ee17 0a90 	vmov	r0, s15
   b52b8:	4408      	add	r0, r1
busvoltage_total = busvoltage_total + (int) busvoltage;
   b52ba:	499e      	ldr	r1, [pc, #632]	; (b5534 <loop+0x38c>)
bme_altitude_total = bme_altitude_total + (int) bme_altitude;
   b52bc:	6038      	str	r0, [r7, #0]
busvoltage_total = busvoltage_total + (int) busvoltage;
   b52be:	edd1 7a00 	vldr	s15, [r1]
   b52c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   b52c6:	ee77 7a87 	vadd.f32	s15, s15, s14
   b52ca:	edc1 7a00 	vstr	s15, [r1]
load_voltage_total = load_voltage_total + (int) loadvoltage;
   b52ce:	edd3 7a00 	vldr	s15, [r3]
current_mA_total = current_mA_total + (int) current_mA;
   b52d2:	4999      	ldr	r1, [pc, #612]	; (b5538 <loop+0x390>)
vane_wind_direction_total = vane_wind_direction_total + (int) vane_wind_direction;
   b52d4:	f8d9 3000 	ldr.w	r3, [r9]
load_voltage_total = load_voltage_total + (int) loadvoltage;
   b52d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
vane_wind_direction_total = vane_wind_direction_total + (int) vane_wind_direction;
   b52dc:	4413      	add	r3, r2
load_voltage_total = load_voltage_total + (int) loadvoltage;
   b52de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
vane_wind_direction_total = vane_wind_direction_total + (int) vane_wind_direction;
   b52e2:	f8c9 3000 	str.w	r3, [r9]
load_voltage_total = load_voltage_total + (int) loadvoltage;
   b52e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
event_compass_heading_total = event_compass_heading_total + (int) event_compass_heading;
   b52ea:	4b86      	ldr	r3, [pc, #536]	; (b5504 <loop+0x35c>)
load_voltage_total = load_voltage_total + (int) loadvoltage;
   b52ec:	edc6 7a00 	vstr	s15, [r6]
shunt_voltage_total = shunt_voltage_total + (int) busvoltage;
   b52f0:	edd5 7a00 	vldr	s15, [r5]
bno_compass_heading_total = bno_compass_heading_total + (int) bno_compass_heading;
   b52f4:	4a84      	ldr	r2, [pc, #528]	; (b5508 <loop+0x360>)
shunt_voltage_total = shunt_voltage_total + (int) busvoltage;
   b52f6:	ee37 7a87 	vadd.f32	s14, s15, s14
current_mA_total = current_mA_total + (int) current_mA;
   b52fa:	edda 7a00 	vldr	s15, [sl]
shunt_voltage_total = shunt_voltage_total + (int) busvoltage;
   b52fe:	ed85 7a00 	vstr	s14, [r5]
current_mA_total = current_mA_total + (int) current_mA;
   b5302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5306:	ed91 7a00 	vldr	s14, [r1]
bno_compass_heading_total = bno_compass_heading_total + (int) bno_compass_heading;
   b530a:	f8df a2a8 	ldr.w	sl, [pc, #680]	; b55b4 <loop+0x40c>
current_mA_total = current_mA_total + (int) current_mA;
   b530e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5312:	ee77 7a87 	vadd.f32	s15, s15, s14
power_mW_total = power_mW_total + (int) power_mW;
   b5316:	ed98 7a00 	vldr	s14, [r8]
current_mA_total = current_mA_total + (int) current_mA;
   b531a:	edc1 7a00 	vstr	s15, [r1]
power_mW_total = power_mW_total + (int) power_mW;
   b531e:	edd4 7a00 	vldr	s15, [r4]
   b5322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b532a:	ee77 7a87 	vadd.f32	s15, s15, s14
   b532e:	edc8 7a00 	vstr	s15, [r8]
event_compass_heading_total = event_compass_heading_total + (int) event_compass_heading;
   b5332:	edd3 7a00 	vldr	s15, [r3]
   b5336:	f8db 3000 	ldr.w	r3, [fp]
   b533a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b533e:	ee17 1a90 	vmov	r1, s15
   b5342:	4419      	add	r1, r3
   b5344:	f8cb 1000 	str.w	r1, [fp]
bno_compass_heading_total = bno_compass_heading_total + (int) bno_compass_heading;
   b5348:	edd2 7a00 	vldr	s15, [r2]
   b534c:	f8da 3000 	ldr.w	r3, [sl]
   b5350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5354:	ee17 2a90 	vmov	r2, s15
   b5358:	441a      	add	r2, r3
   b535a:	f8ca 2000 	str.w	r2, [sl]
   b535e:	f003 f865 	bl	b842c <HAL_Timer_Get_Milli_Seconds>
if ((millis() - timeFromLastReading) > average_time_interval) {
   b5362:	4b76      	ldr	r3, [pc, #472]	; (b553c <loop+0x394>)
   b5364:	681b      	ldr	r3, [r3, #0]
   b5366:	1ac0      	subs	r0, r0, r3
   b5368:	4b75      	ldr	r3, [pc, #468]	; (b5540 <loop+0x398>)
   b536a:	881b      	ldrh	r3, [r3, #0]
   b536c:	4298      	cmp	r0, r3
   b536e:	f240 8199 	bls.w	b56a4 <loop+0x4fc>
  WindSpeed = (float) Rotations * 2.25 / (float) (millis() - timeFromLastReading) * 1000.;
   b5372:	4b74      	ldr	r3, [pc, #464]	; (b5544 <loop+0x39c>)
   b5374:	ed93 8a00 	vldr	s16, [r3]
   b5378:	f003 f858 	bl	b842c <HAL_Timer_Get_Milli_Seconds>
   b537c:	eef8 7a48 	vcvt.f32.u32	s15, s16
   b5380:	4604      	mov	r4, r0
   b5382:	ee17 0a90 	vmov	r0, s15
   b5386:	f006 ff7f 	bl	bc288 <__aeabi_f2d>
   b538a:	4b6f      	ldr	r3, [pc, #444]	; (b5548 <loop+0x3a0>)
   b538c:	2200      	movs	r2, #0
   b538e:	f006 ffd3 	bl	bc338 <__aeabi_dmul>
   b5392:	ec41 0b18 	vmov	d8, r0, r1
   b5396:	4969      	ldr	r1, [pc, #420]	; (b553c <loop+0x394>)
   b5398:	6808      	ldr	r0, [r1, #0]
   b539a:	1a20      	subs	r0, r4, r0
   b539c:	ee07 0a90 	vmov	s15, r0
   b53a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
  bme_temperature_average = bme_temperature_total / loop_counter;
   b53a4:	4c69      	ldr	r4, [pc, #420]	; (b554c <loop+0x3a4>)
  WindSpeed = (float) Rotations * 2.25 / (float) (millis() - timeFromLastReading) * 1000.;
   b53a6:	ee17 0a90 	vmov	r0, s15
   b53aa:	f006 ff6d 	bl	bc288 <__aeabi_f2d>
   b53ae:	4602      	mov	r2, r0
   b53b0:	460b      	mov	r3, r1
   b53b2:	ec51 0b18 	vmov	r0, r1, d8
   b53b6:	f007 f8e9 	bl	bc58c <__aeabi_ddiv>
   b53ba:	4b65      	ldr	r3, [pc, #404]	; (b5550 <loop+0x3a8>)
   b53bc:	2200      	movs	r2, #0
   b53be:	f006 ffbb 	bl	bc338 <__aeabi_dmul>
   b53c2:	f007 fab1 	bl	bc928 <__aeabi_d2f>
   b53c6:	4b63      	ldr	r3, [pc, #396]	; (b5554 <loop+0x3ac>)
  bme_temperature_average = bme_temperature_total / loop_counter;
   b53c8:	4954      	ldr	r1, [pc, #336]	; (b551c <loop+0x374>)
  WindSpeed = (float) Rotations * 2.25 / (float) (millis() - timeFromLastReading) * 1000.;
   b53ca:	6018      	str	r0, [r3, #0]
  bme_temperature_average = bme_temperature_total / loop_counter;
   b53cc:	4b62      	ldr	r3, [pc, #392]	; (b5558 <loop+0x3b0>)
  bme_pressure_average = bme_pressure_total / loop_counter;
   b53ce:	4855      	ldr	r0, [pc, #340]	; (b5524 <loop+0x37c>)
  bme_temperature_average = bme_temperature_total / loop_counter;
   b53d0:	f8b3 c000 	ldrh.w	ip, [r3]
   b53d4:	680b      	ldr	r3, [r1, #0]
   b53d6:	fbb3 f3fc 	udiv	r3, r3, ip
  busvoltage_average = busvoltage_total / loop_counter;
   b53da:	ee07 ca90 	vmov	s15, ip
  bme_temperature_average = bme_temperature_total / loop_counter;
   b53de:	6023      	str	r3, [r4, #0]
  bme_pressure_average = bme_pressure_total / loop_counter;
   b53e0:	6803      	ldr	r3, [r0, #0]
  busvoltage_average = busvoltage_total / loop_counter;
   b53e2:	4854      	ldr	r0, [pc, #336]	; (b5534 <loop+0x38c>)
  bme_pressure_average = bme_pressure_total / loop_counter;
   b53e4:	4a5d      	ldr	r2, [pc, #372]	; (b555c <loop+0x3b4>)
  busvoltage_average = busvoltage_total / loop_counter;
   b53e6:	edd0 6a00 	vldr	s13, [r0]
  bme_pressure_average = bme_pressure_total / loop_counter;
   b53ea:	fbb3 f3fc 	udiv	r3, r3, ip
  busvoltage_average = busvoltage_total / loop_counter;
   b53ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  bme_pressure_average = bme_pressure_total / loop_counter;
   b53f2:	6013      	str	r3, [r2, #0]
  busvoltage_average = busvoltage_total / loop_counter;
   b53f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  bme_humidity_average = bme_humidity_total / loop_counter;
   b53f8:	4a4b      	ldr	r2, [pc, #300]	; (b5528 <loop+0x380>)
  shunt_voltage_average = shunt_voltage_total / loop_counter;
   b53fa:	4959      	ldr	r1, [pc, #356]	; (b5560 <loop+0x3b8>)
  bme_humidity_average = bme_humidity_total / loop_counter;
   b53fc:	6813      	ldr	r3, [r2, #0]
   b53fe:	4a59      	ldr	r2, [pc, #356]	; (b5564 <loop+0x3bc>)
   b5400:	fbb3 f3fc 	udiv	r3, r3, ip
   b5404:	6013      	str	r3, [r2, #0]
  bme_altitude_average = bme_altitude_total / loop_counter;
   b5406:	4a58      	ldr	r2, [pc, #352]	; (b5568 <loop+0x3c0>)
   b5408:	683b      	ldr	r3, [r7, #0]
   b540a:	fbb3 f3fc 	udiv	r3, r3, ip
   b540e:	6013      	str	r3, [r2, #0]
  busvoltage_average = busvoltage_total / loop_counter;
   b5410:	4b56      	ldr	r3, [pc, #344]	; (b556c <loop+0x3c4>)
  vane_wind_direction_average = vane_wind_direction_total / loop_counter;
   b5412:	4857      	ldr	r0, [pc, #348]	; (b5570 <loop+0x3c8>)
  power_mW_average = power_mW_total / loop_counter;
   b5414:	4a57      	ldr	r2, [pc, #348]	; (b5574 <loop+0x3cc>)
  load_voltage_average = load_voltage_total / loop_counter;
   b5416:	edd6 6a00 	vldr	s13, [r6]
  busvoltage_average = busvoltage_total / loop_counter;
   b541a:	ed83 7a00 	vstr	s14, [r3]
  load_voltage_average = load_voltage_total / loop_counter;
   b541e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   b5422:	4b55      	ldr	r3, [pc, #340]	; (b5578 <loop+0x3d0>)
  current_mA_average = current_mA_total / loop_counter;
   b5424:	4e44      	ldr	r6, [pc, #272]	; (b5538 <loop+0x390>)
  shunt_voltage_average = shunt_voltage_total / loop_counter;
   b5426:	edd5 6a00 	vldr	s13, [r5]
  load_voltage_average = load_voltage_total / loop_counter;
   b542a:	ed83 7a00 	vstr	s14, [r3]
  shunt_voltage_average = shunt_voltage_total / loop_counter;
   b542e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  current_mA_average = current_mA_total / loop_counter;
   b5432:	4d52      	ldr	r5, [pc, #328]	; (b557c <loop+0x3d4>)
  event_compass_heading_average = event_compass_heading_total / loop_counter;
   b5434:	4b52      	ldr	r3, [pc, #328]	; (b5580 <loop+0x3d8>)
  current_mA_average = current_mA_total / loop_counter;
   b5436:	edd6 6a00 	vldr	s13, [r6]
  shunt_voltage_average = shunt_voltage_total / loop_counter;
   b543a:	ed81 7a00 	vstr	s14, [r1]
  current_mA_average = current_mA_total / loop_counter;
   b543e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  vane_wind_direction_average = vane_wind_direction_total / loop_counter;
   b5442:	f8d9 6000 	ldr.w	r6, [r9]
   b5446:	fbb6 f6fc 	udiv	r6, r6, ip
   b544a:	6006      	str	r6, [r0, #0]
  event_compass_heading_average = event_compass_heading_total / loop_counter;
   b544c:	f8db 6000 	ldr.w	r6, [fp]
   b5450:	fbb6 f6fc 	udiv	r6, r6, ip
   b5454:	601e      	str	r6, [r3, #0]
  bno_compass_heading_average = bno_compass_heading_total / loop_counter;
   b5456:	4e4b      	ldr	r6, [pc, #300]	; (b5584 <loop+0x3dc>)
   b5458:	f8da 0000 	ldr.w	r0, [sl]
   b545c:	fbb0 f0fc 	udiv	r0, r0, ip
  power_mW_average = power_mW_total / loop_counter;
   b5460:	edd8 6a00 	vldr	s13, [r8]
  current_mA_average = current_mA_total / loop_counter;
   b5464:	ed85 7a00 	vstr	s14, [r5]
  power_mW_average = power_mW_total / loop_counter;
   b5468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   b546c:	ed82 7a00 	vstr	s14, [r2]
  bno_compass_heading_average = bno_compass_heading_total / loop_counter;
   b5470:	6030      	str	r0, [r6, #0]
   b5472:	f002 ffdb 	bl	b842c <HAL_Timer_Get_Milli_Seconds>
  timeFromLastReading = millis();
   b5476:	4a31      	ldr	r2, [pc, #196]	; (b553c <loop+0x394>)
  print_current_voltage_power(busvoltage_average, shunt_voltage_average, current_mA_average, load_voltage_average, power_mW_average);
   b5478:	4b3f      	ldr	r3, [pc, #252]	; (b5578 <loop+0x3d0>)
  timeFromLastReading = millis();
   b547a:	6010      	str	r0, [r2, #0]
  print_current_voltage_power(busvoltage_average, shunt_voltage_average, current_mA_average, load_voltage_average, power_mW_average);
   b547c:	4a3d      	ldr	r2, [pc, #244]	; (b5574 <loop+0x3cc>)
   b547e:	4938      	ldr	r1, [pc, #224]	; (b5560 <loop+0x3b8>)
   b5480:	483a      	ldr	r0, [pc, #232]	; (b556c <loop+0x3c4>)
   b5482:	9200      	str	r2, [sp, #0]
   b5484:	462a      	mov	r2, r5
   b5486:	f7ff fc05 	bl	b4c94 <_Z27print_current_voltage_powerRfS_S_S_S_>
  Serial.print("rotations = ");
   b548a:	f003 ff65 	bl	b9358 <_Z16_fetch_usbserialv>
   b548e:	493e      	ldr	r1, [pc, #248]	; (b5588 <loop+0x3e0>)
   b5490:	f003 fc14 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print(Rotations);
   b5494:	f003 ff60 	bl	b9358 <_Z16_fetch_usbserialv>
   b5498:	4a2a      	ldr	r2, [pc, #168]	; (b5544 <loop+0x39c>)
   b549a:	6811      	ldr	r1, [r2, #0]
   b549c:	220a      	movs	r2, #10
   b549e:	f003 fc2c 	bl	b8cfa <_ZN5Print11printNumberEmh>
  Serial.print("\n");
   b54a2:	f003 ff59 	bl	b9358 <_Z16_fetch_usbserialv>
   b54a6:	491c      	ldr	r1, [pc, #112]	; (b5518 <loop+0x370>)
   b54a8:	f003 fc08 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print("\nBME altitude total = ");
   b54ac:	f003 ff54 	bl	b9358 <_Z16_fetch_usbserialv>
   b54b0:	4936      	ldr	r1, [pc, #216]	; (b558c <loop+0x3e4>)
   b54b2:	f003 fc03 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print(bme_altitude_total);
   b54b6:	f003 ff4f 	bl	b9358 <_Z16_fetch_usbserialv>
   b54ba:	220a      	movs	r2, #10
   b54bc:	6839      	ldr	r1, [r7, #0]
   b54be:	f003 fc1c 	bl	b8cfa <_ZN5Print11printNumberEmh>
  Serial.print("\t");
   b54c2:	f003 ff49 	bl	b9358 <_Z16_fetch_usbserialv>
   b54c6:	4932      	ldr	r1, [pc, #200]	; (b5590 <loop+0x3e8>)
   b54c8:	f003 fbf8 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print("\nBME temp total = ");
   b54cc:	f003 ff44 	bl	b9358 <_Z16_fetch_usbserialv>
   b54d0:	4930      	ldr	r1, [pc, #192]	; (b5594 <loop+0x3ec>)
   b54d2:	f003 fbf3 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print(bme_temperature_total);
   b54d6:	f003 ff3f 	bl	b9358 <_Z16_fetch_usbserialv>
   b54da:	4910      	ldr	r1, [pc, #64]	; (b551c <loop+0x374>)
   b54dc:	220a      	movs	r2, #10
   b54de:	6809      	ldr	r1, [r1, #0]
   b54e0:	f003 fc0b 	bl	b8cfa <_ZN5Print11printNumberEmh>
  Serial.print("\t");
   b54e4:	f003 ff38 	bl	b9358 <_Z16_fetch_usbserialv>
   b54e8:	4929      	ldr	r1, [pc, #164]	; (b5590 <loop+0x3e8>)
   b54ea:	f003 fbe7 	bl	b8cbc <_ZN5Print5printEPKc>
   b54ee:	e063      	b.n	b55b8 <loop+0x410>
   b54f0:	2003e43e 	.word	0x2003e43e
   b54f4:	2003e508 	.word	0x2003e508
   b54f8:	2003e514 	.word	0x2003e514
   b54fc:	2003e558 	.word	0x2003e558
   b5500:	2003e634 	.word	0x2003e634
   b5504:	2003e5d0 	.word	0x2003e5d0
   b5508:	2003e54c 	.word	0x2003e54c
   b550c:	2003e610 	.word	0x2003e610
   b5510:	2003e64c 	.word	0x2003e64c
   b5514:	000bd421 	.word	0x000bd421
   b5518:	000bd393 	.word	0x000bd393
   b551c:	2003e534 	.word	0x2003e534
   b5520:	2003e648 	.word	0x2003e648
   b5524:	2003e528 	.word	0x2003e528
   b5528:	2003e51c 	.word	0x2003e51c
   b552c:	2003e60c 	.word	0x2003e60c
   b5530:	2003e510 	.word	0x2003e510
   b5534:	2003e560 	.word	0x2003e560
   b5538:	2003e570 	.word	0x2003e570
   b553c:	2003e668 	.word	0x2003e668
   b5540:	2003e438 	.word	0x2003e438
   b5544:	2003e4b4 	.word	0x2003e4b4
   b5548:	40020000 	.word	0x40020000
   b554c:	2003e530 	.word	0x2003e530
   b5550:	408f4000 	.word	0x408f4000
   b5554:	2003e4b8 	.word	0x2003e4b8
   b5558:	2003e614 	.word	0x2003e614
   b555c:	2003e524 	.word	0x2003e524
   b5560:	2003e644 	.word	0x2003e644
   b5564:	2003e518 	.word	0x2003e518
   b5568:	2003e50c 	.word	0x2003e50c
   b556c:	2003e55c 	.word	0x2003e55c
   b5570:	2003e680 	.word	0x2003e680
   b5574:	2003e638 	.word	0x2003e638
   b5578:	2003e608 	.word	0x2003e608
   b557c:	2003e56c 	.word	0x2003e56c
   b5580:	2003e5d4 	.word	0x2003e5d4
   b5584:	2003e550 	.word	0x2003e550
   b5588:	000bd430 	.word	0x000bd430
   b558c:	000bd43d 	.word	0x000bd43d
   b5590:	000bd3a8 	.word	0x000bd3a8
   b5594:	000bd454 	.word	0x000bd454
   b5598:	2003e520 	.word	0x2003e520
   b559c:	2003e52c 	.word	0x2003e52c
   b55a0:	2003e67c 	.word	0x2003e67c
   b55a4:	2003e568 	.word	0x2003e568
   b55a8:	2003e684 	.word	0x2003e684
   b55ac:	2003e5d8 	.word	0x2003e5d8
   b55b0:	2003e63c 	.word	0x2003e63c
   b55b4:	2003e554 	.word	0x2003e554
  Serial.print("loop counter = ");
   b55b8:	f003 fece 	bl	b9358 <_Z16_fetch_usbserialv>
   b55bc:	495b      	ldr	r1, [pc, #364]	; (b572c <loop+0x584>)
   b55be:	f003 fb7d 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print(loop_counter);
   b55c2:	f003 fec9 	bl	b9358 <_Z16_fetch_usbserialv>
   b55c6:	4b5a      	ldr	r3, [pc, #360]	; (b5730 <loop+0x588>)
   b55c8:	220a      	movs	r2, #10
   b55ca:	8819      	ldrh	r1, [r3, #0]
   b55cc:	f003 fb95 	bl	b8cfa <_ZN5Print11printNumberEmh>
  Serial.print("\n");
   b55d0:	f003 fec2 	bl	b9358 <_Z16_fetch_usbserialv>
   b55d4:	4957      	ldr	r1, [pc, #348]	; (b5734 <loop+0x58c>)
   b55d6:	f003 fb71 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print("\nBME temp average = ");
   b55da:	f003 febd 	bl	b9358 <_Z16_fetch_usbserialv>
   b55de:	4956      	ldr	r1, [pc, #344]	; (b5738 <loop+0x590>)
   b55e0:	f003 fb6c 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print(bme_temperature_average);
   b55e4:	f003 feb8 	bl	b9358 <_Z16_fetch_usbserialv>
   b55e8:	220a      	movs	r2, #10
   b55ea:	6821      	ldr	r1, [r4, #0]
   b55ec:	f003 fb85 	bl	b8cfa <_ZN5Print11printNumberEmh>
  Serial.print("\n");
   b55f0:	f003 feb2 	bl	b9358 <_Z16_fetch_usbserialv>
   b55f4:	494f      	ldr	r1, [pc, #316]	; (b5734 <loop+0x58c>)
   b55f6:	f003 fb61 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print("\nBME temp average as 8 bit = ");
   b55fa:	f003 fead 	bl	b9358 <_Z16_fetch_usbserialv>
   b55fe:	494f      	ldr	r1, [pc, #316]	; (b573c <loop+0x594>)
   b5600:	f003 fb5c 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print((uint8_t) bme_temperature_average);
   b5604:	f003 fea8 	bl	b9358 <_Z16_fetch_usbserialv>
   b5608:	220a      	movs	r2, #10
   b560a:	7821      	ldrb	r1, [r4, #0]
   b560c:	f7fe fda6 	bl	b415c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  Serial.print("\n");
   b5610:	f003 fea2 	bl	b9358 <_Z16_fetch_usbserialv>
   b5614:	4947      	ldr	r1, [pc, #284]	; (b5734 <loop+0x58c>)
   b5616:	f003 fb51 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print("\ncurrent_mA = ");
   b561a:	f003 fe9d 	bl	b9358 <_Z16_fetch_usbserialv>
   b561e:	4948      	ldr	r1, [pc, #288]	; (b5740 <loop+0x598>)
   b5620:	f003 fb4c 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print( current_mA_average);
   b5624:	f003 fe98 	bl	b9358 <_Z16_fetch_usbserialv>
   b5628:	ed95 0a00 	vldr	s0, [r5]
   b562c:	2102      	movs	r1, #2
   b562e:	f003 fc79 	bl	b8f24 <_ZN5Print5printEfi>
  Serial.print("\n");
   b5632:	f003 fe91 	bl	b9358 <_Z16_fetch_usbserialv>
   b5636:	493f      	ldr	r1, [pc, #252]	; (b5734 <loop+0x58c>)
   b5638:	f003 fb40 	bl	b8cbc <_ZN5Print5printEPKc>
  bme_temperature_total = 0;
   b563c:	4941      	ldr	r1, [pc, #260]	; (b5744 <loop+0x59c>)
  bme_pressure_total = 0;
   b563e:	4842      	ldr	r0, [pc, #264]	; (b5748 <loop+0x5a0>)
  Rotations = 0;  // Set Rotations count to 0 ready for calculations
   b5640:	4a42      	ldr	r2, [pc, #264]	; (b574c <loop+0x5a4>)
  bme_temperature_total = 0;
   b5642:	2400      	movs	r4, #0
   b5644:	600c      	str	r4, [r1, #0]
  bme_humidity_total = 0;
   b5646:	4942      	ldr	r1, [pc, #264]	; (b5750 <loop+0x5a8>)
  bme_pressure_total = 0;
   b5648:	6004      	str	r4, [r0, #0]
  bme_humidity_total = 0;
   b564a:	600c      	str	r4, [r1, #0]
  busvoltage_total = 0;
   b564c:	4841      	ldr	r0, [pc, #260]	; (b5754 <loop+0x5ac>)
  current_mA_total = 0;
   b564e:	4942      	ldr	r1, [pc, #264]	; (b5758 <loop+0x5b0>)
  Rotations = 0;  // Set Rotations count to 0 ready for calculations
   b5650:	6014      	str	r4, [r2, #0]
  busvoltage_total = 0;
   b5652:	2300      	movs	r3, #0
  current_mA_total = 0;
   b5654:	600b      	str	r3, [r1, #0]
  busvoltage_total = 0;
   b5656:	6003      	str	r3, [r0, #0]
  power_mW_total = 0;
   b5658:	f8c8 3000 	str.w	r3, [r8]
  bme_altitude_total = 0;
   b565c:	603c      	str	r4, [r7, #0]
  vane_wind_direction_total = 0;
   b565e:	f8c9 4000 	str.w	r4, [r9]
  event_compass_heading_total = 0;
   b5662:	f8cb 4000 	str.w	r4, [fp]
  bno_compass_heading_total = 0;
   b5666:	f8ca 4000 	str.w	r4, [sl]
  Serial.print("loop counter = ");
   b566a:	f003 fe75 	bl	b9358 <_Z16_fetch_usbserialv>
   b566e:	492f      	ldr	r1, [pc, #188]	; (b572c <loop+0x584>)
   b5670:	f003 fb24 	bl	b8cbc <_ZN5Print5printEPKc>
  Serial.print(loop_counter);
   b5674:	f003 fe70 	bl	b9358 <_Z16_fetch_usbserialv>
   b5678:	4b2d      	ldr	r3, [pc, #180]	; (b5730 <loop+0x588>)
   b567a:	220a      	movs	r2, #10
   b567c:	8819      	ldrh	r1, [r3, #0]
   b567e:	461d      	mov	r5, r3
   b5680:	f003 fb3b 	bl	b8cfa <_ZN5Print11printNumberEmh>
  heading = calculateHeading(int((event_compass_heading_average + bno_compass_heading_average) / 2));
   b5684:	4b35      	ldr	r3, [pc, #212]	; (b575c <loop+0x5b4>)
  loop_counter = 0;
   b5686:	802c      	strh	r4, [r5, #0]
  heading = calculateHeading(int((event_compass_heading_average + bno_compass_heading_average) / 2));
   b5688:	6819      	ldr	r1, [r3, #0]
   b568a:	6833      	ldr	r3, [r6, #0]
   b568c:	4419      	add	r1, r3
   b568e:	0849      	lsrs	r1, r1, #1
   b5690:	a804      	add	r0, sp, #16
   b5692:	f7ff fa95 	bl	b4bc0 <_Z16calculateHeadingi>
   b5696:	4832      	ldr	r0, [pc, #200]	; (b5760 <loop+0x5b8>)
   b5698:	a904      	add	r1, sp, #16
   b569a:	f003 fac5 	bl	b8c28 <_ZN6StringaSEOS_>
   b569e:	a804      	add	r0, sp, #16
   b56a0:	f003 fa46 	bl	b8b30 <_ZN6StringD1Ev>
if ((millis() - time_from_last_display) > change_display_time_interval) {
   b56a4:	4c2f      	ldr	r4, [pc, #188]	; (b5764 <loop+0x5bc>)
   b56a6:	f002 fec1 	bl	b842c <HAL_Timer_Get_Milli_Seconds>
   b56aa:	6823      	ldr	r3, [r4, #0]
   b56ac:	1ac0      	subs	r0, r0, r3
   b56ae:	4b2e      	ldr	r3, [pc, #184]	; (b5768 <loop+0x5c0>)
   b56b0:	881b      	ldrh	r3, [r3, #0]
   b56b2:	4298      	cmp	r0, r3
   b56b4:	d926      	bls.n	b5704 <loop+0x55c>
   b56b6:	f002 feb9 	bl	b842c <HAL_Timer_Get_Milli_Seconds>
  time_from_last_display = millis();    
   b56ba:	6020      	str	r0, [r4, #0]
  if (page1){
   b56bc:	4c2b      	ldr	r4, [pc, #172]	; (b576c <loop+0x5c4>)
   b56be:	7823      	ldrb	r3, [r4, #0]
   b56c0:	b363      	cbz	r3, b571c <loop+0x574>
    displayValues1(bme_temperature_average, bme_pressure_average, bme_humidity_average, bme_altitude_average, busvoltage_average, current_mA_average, power_mW_average);
   b56c2:	4b2b      	ldr	r3, [pc, #172]	; (b5770 <loop+0x5c8>)
   b56c4:	4a2b      	ldr	r2, [pc, #172]	; (b5774 <loop+0x5cc>)
   b56c6:	edd3 7a00 	vldr	s15, [r3]
   b56ca:	4b2b      	ldr	r3, [pc, #172]	; (b5778 <loop+0x5d0>)
   b56cc:	492b      	ldr	r1, [pc, #172]	; (b577c <loop+0x5d4>)
   b56ce:	482c      	ldr	r0, [pc, #176]	; (b5780 <loop+0x5d8>)
   b56d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b56d4:	edcd 7a02 	vstr	s15, [sp, #8]
   b56d8:	edd3 7a00 	vldr	s15, [r3]
   b56dc:	4b29      	ldr	r3, [pc, #164]	; (b5784 <loop+0x5dc>)
   b56de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b56e2:	edcd 7a01 	vstr	s15, [sp, #4]
   b56e6:	edd3 7a00 	vldr	s15, [r3]
   b56ea:	4b27      	ldr	r3, [pc, #156]	; (b5788 <loop+0x5e0>)
   b56ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b56f0:	edcd 7a00 	vstr	s15, [sp]
   b56f4:	681b      	ldr	r3, [r3, #0]
   b56f6:	6812      	ldr	r2, [r2, #0]
   b56f8:	6809      	ldr	r1, [r1, #0]
   b56fa:	6800      	ldr	r0, [r0, #0]
   b56fc:	f7ff fc80 	bl	b5000 <_Z14displayValues1lllllll>
    page1 = false;
   b5700:	2300      	movs	r3, #0
    page1 = true;
   b5702:	7023      	strb	r3, [r4, #0]
loop_counter += 1;
   b5704:	4a0a      	ldr	r2, [pc, #40]	; (b5730 <loop+0x588>)
   b5706:	8813      	ldrh	r3, [r2, #0]
      delay(BNO055_SAMPLERATE_DELAY_MS);
   b5708:	20c8      	movs	r0, #200	; 0xc8
loop_counter += 1;
   b570a:	3301      	adds	r3, #1
   b570c:	8013      	strh	r3, [r2, #0]
}
   b570e:	b009      	add	sp, #36	; 0x24
   b5710:	ecbd 8b02 	vpop	{d8}
   b5714:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      delay(BNO055_SAMPLERATE_DELAY_MS);
   b5718:	f003 bc9c 	b.w	b9054 <delay>
    displayValues2(vane_wind_direction_average, heading, WindSpeed);
   b571c:	4b1b      	ldr	r3, [pc, #108]	; (b578c <loop+0x5e4>)
   b571e:	4a1c      	ldr	r2, [pc, #112]	; (b5790 <loop+0x5e8>)
   b5720:	6818      	ldr	r0, [r3, #0]
   b5722:	490f      	ldr	r1, [pc, #60]	; (b5760 <loop+0x5b8>)
   b5724:	f7ff fcfe 	bl	b5124 <_Z14displayValues2lR6StringRf>
    page1 = true;
   b5728:	2301      	movs	r3, #1
   b572a:	e7ea      	b.n	b5702 <loop+0x55a>
   b572c:	000bd467 	.word	0x000bd467
   b5730:	2003e614 	.word	0x2003e614
   b5734:	000bd393 	.word	0x000bd393
   b5738:	000bd477 	.word	0x000bd477
   b573c:	000bd48c 	.word	0x000bd48c
   b5740:	000bd421 	.word	0x000bd421
   b5744:	2003e534 	.word	0x2003e534
   b5748:	2003e528 	.word	0x2003e528
   b574c:	2003e4b4 	.word	0x2003e4b4
   b5750:	2003e51c 	.word	0x2003e51c
   b5754:	2003e560 	.word	0x2003e560
   b5758:	2003e570 	.word	0x2003e570
   b575c:	2003e5d4 	.word	0x2003e5d4
   b5760:	2003e5dc 	.word	0x2003e5dc
   b5764:	2003e678 	.word	0x2003e678
   b5768:	2003e43a 	.word	0x2003e43a
   b576c:	2003e43c 	.word	0x2003e43c
   b5770:	2003e638 	.word	0x2003e638
   b5774:	2003e518 	.word	0x2003e518
   b5778:	2003e56c 	.word	0x2003e56c
   b577c:	2003e524 	.word	0x2003e524
   b5780:	2003e530 	.word	0x2003e530
   b5784:	2003e55c 	.word	0x2003e55c
   b5788:	2003e50c 	.word	0x2003e50c
   b578c:	2003e680 	.word	0x2003e680
   b5790:	2003e4b8 	.word	0x2003e4b8

000b5794 <setup>:
void setup(void) {
   b5794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5798:	b0a2      	sub	sp, #136	; 0x88
  Serial.println("Hello!");
   b579a:	f003 fddd 	bl	b9358 <_Z16_fetch_usbserialv>
   b579e:	49c7      	ldr	r1, [pc, #796]	; (b5abc <setup+0x328>)
   b57a0:	f003 fa9f 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  if (! ina219.begin()) {
   b57a4:	f004 f8fa 	bl	b999c <_Z19__fetch_global_Wirev>
   b57a8:	4601      	mov	r1, r0
   b57aa:	48c5      	ldr	r0, [pc, #788]	; (b5ac0 <setup+0x32c>)
   b57ac:	f001 fb32 	bl	b6e14 <_ZN15Adafruit_INA2195beginEP7TwoWire>
   b57b0:	b940      	cbnz	r0, b57c4 <setup+0x30>
    Serial.println("Failed to find INA219 chip");
   b57b2:	f003 fdd1 	bl	b9358 <_Z16_fetch_usbserialv>
   b57b6:	49c3      	ldr	r1, [pc, #780]	; (b5ac4 <setup+0x330>)
   b57b8:	f003 fa93 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    while (1) { delay(10); }
   b57bc:	200a      	movs	r0, #10
   b57be:	f003 fc49 	bl	b9054 <delay>
   b57c2:	e7fb      	b.n	b57bc <setup+0x28>
  ina219.setCalibration_16V_400mA();
   b57c4:	48be      	ldr	r0, [pc, #760]	; (b5ac0 <setup+0x32c>)
time_base = Time.now();
   b57c6:	4ec0      	ldr	r6, [pc, #768]	; (b5ac8 <setup+0x334>)
  ina219.setCalibration_16V_400mA();
   b57c8:	f001 fb3f 	bl	b6e4a <_ZN15Adafruit_INA21924setCalibration_16V_400mAEv>
time_base = Time.now();
   b57cc:	f003 fc1c 	bl	b9008 <_ZN9TimeClass3nowEv>
   b57d0:	17c3      	asrs	r3, r0, #31
   b57d2:	e9c6 0300 	strd	r0, r3, [r6]
Serial.print("time base value =");
   b57d6:	f003 fdbf 	bl	b9358 <_Z16_fetch_usbserialv>
   b57da:	49bc      	ldr	r1, [pc, #752]	; (b5acc <setup+0x338>)
   b57dc:	f003 fa6e 	bl	b8cbc <_ZN5Print5printEPKc>
Serial.print(time_base);
   b57e0:	f003 fdba 	bl	b9358 <_Z16_fetch_usbserialv>
   b57e4:	e9d6 5400 	ldrd	r5, r4, [r6]
        if (n < 0 && base == 10) {
   b57e8:	2c00      	cmp	r4, #0
   b57ea:	4607      	mov	r7, r0
   b57ec:	f280 80bf 	bge.w	b596e <setup+0x1da>
            t = print('-');
   b57f0:	212d      	movs	r1, #45	; 0x2d
   b57f2:	f003 fa67 	bl	b8cc4 <_ZN5Print5printEc>
            val = -n;
   b57f6:	426a      	negs	r2, r5
   b57f8:	eb64 0344 	sbc.w	r3, r4, r4, lsl #1
        return printNumber(val, base) + t;
   b57fc:	210a      	movs	r1, #10
   b57fe:	9100      	str	r1, [sp, #0]
   b5800:	4638      	mov	r0, r7
   b5802:	f003 fa98 	bl	b8d36 <_ZN5Print11printNumberEyh>
Serial.print("\n");
   b5806:	f003 fda7 	bl	b9358 <_Z16_fetch_usbserialv>
   b580a:	49b1      	ldr	r1, [pc, #708]	; (b5ad0 <setup+0x33c>)
pinMode(wind_pin, INPUT);
   b580c:	4cb1      	ldr	r4, [pc, #708]	; (b5ad4 <setup+0x340>)
Serial.print("\n");
   b580e:	f003 fa55 	bl	b8cbc <_ZN5Print5printEPKc>
pinMode(vane_pin, INPUT);
   b5812:	4bb1      	ldr	r3, [pc, #708]	; (b5ad8 <setup+0x344>)
   b5814:	2100      	movs	r1, #0
   b5816:	7818      	ldrb	r0, [r3, #0]
   b5818:	f003 fffe 	bl	b9818 <pinMode>
pinMode(vane_switch, OUTPUT);
   b581c:	4baf      	ldr	r3, [pc, #700]	; (b5adc <setup+0x348>)
   b581e:	2101      	movs	r1, #1
   b5820:	7818      	ldrb	r0, [r3, #0]
   b5822:	f003 fff9 	bl	b9818 <pinMode>
Serial.println("Vane Value\tDirection\tHeading");
   b5826:	f003 fd97 	bl	b9358 <_Z16_fetch_usbserialv>
   b582a:	49ad      	ldr	r1, [pc, #692]	; (b5ae0 <setup+0x34c>)
   b582c:	f003 fa59 	bl	b8ce2 <_ZN5Print7printlnEPKc>
pinMode(wind_pin, INPUT);
   b5830:	7820      	ldrb	r0, [r4, #0]
   b5832:	2100      	movs	r1, #0
   b5834:	f003 fff0 	bl	b9818 <pinMode>
attachInterrupt(wind_pin, isr_rotation, FALLING);
   b5838:	2300      	movs	r3, #0
   b583a:	9300      	str	r3, [sp, #0]
   b583c:	2202      	movs	r2, #2
   b583e:	f04f 33ff 	mov.w	r3, #4294967295
   b5842:	49a8      	ldr	r1, [pc, #672]	; (b5ae4 <setup+0x350>)
   b5844:	7820      	ldrb	r0, [r4, #0]
   b5846:	f003 fdaf 	bl	b93a8 <_Z15attachInterrupttPFvvE13InterruptModeah>
Serial.println("Davis Wind Speed Test");
   b584a:	f003 fd85 	bl	b9358 <_Z16_fetch_usbserialv>
   b584e:	49a6      	ldr	r1, [pc, #664]	; (b5ae8 <setup+0x354>)
   b5850:	f003 fa47 	bl	b8ce2 <_ZN5Print7printlnEPKc>
Serial.println("Rotations\tMPH");
   b5854:	f003 fd80 	bl	b9358 <_Z16_fetch_usbserialv>
   b5858:	49a4      	ldr	r1, [pc, #656]	; (b5aec <setup+0x358>)
   b585a:	f003 fa42 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  Serial.begin(115200);
   b585e:	f003 fd7b 	bl	b9358 <_Z16_fetch_usbserialv>
   b5862:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b5866:	f003 fd65 	bl	b9334 <_ZN9USBSerial5beginEl>
    while(!Serial);    // time to get serial running
   b586a:	f003 fd75 	bl	b9358 <_Z16_fetch_usbserialv>
   b586e:	f003 fd68 	bl	b9342 <_ZN9USBSerialcvbEv>
   b5872:	2800      	cmp	r0, #0
   b5874:	d0f9      	beq.n	b586a <setup+0xd6>
  display.begin(0x3C, true); // Address 0x3C default
   b5876:	4c9e      	ldr	r4, [pc, #632]	; (b5af0 <setup+0x35c>)
    Serial.println(F("BME280 test"));
   b5878:	f003 fd6e 	bl	b9358 <_Z16_fetch_usbserialv>
   b587c:	499d      	ldr	r1, [pc, #628]	; (b5af4 <setup+0x360>)
   b587e:	f003 fa3a 	bl	b8cf6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("128x64 OLED FeatherWing test");
   b5882:	f003 fd69 	bl	b9358 <_Z16_fetch_usbserialv>
   b5886:	499c      	ldr	r1, [pc, #624]	; (b5af8 <setup+0x364>)
   b5888:	f003 fa2b 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  display.begin(0x3C, true); // Address 0x3C default
   b588c:	2201      	movs	r2, #1
   b588e:	213c      	movs	r1, #60	; 0x3c
   b5890:	4620      	mov	r0, r4
   b5892:	f002 fca5 	bl	b81e0 <_ZN15Adafruit_SH11075beginEhb>
  Serial.println("OLED begun");
   b5896:	f003 fd5f 	bl	b9358 <_Z16_fetch_usbserialv>
   b589a:	4998      	ldr	r1, [pc, #608]	; (b5afc <setup+0x368>)
   b589c:	f003 fa21 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  display.display();
   b58a0:	4620      	mov	r0, r4
   b58a2:	f002 fba6 	bl	b7ff2 <_ZN15Adafruit_SH110X7displayEv>
  delay(1000);
   b58a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b58aa:	f003 fbd3 	bl	b9054 <delay>
  display.clearDisplay();
   b58ae:	4620      	mov	r0, r4
   b58b0:	f001 ff2a 	bl	b7708 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
   b58b4:	4620      	mov	r0, r4
   b58b6:	f002 fb9c 	bl	b7ff2 <_ZN15Adafruit_SH110X7displayEv>
  display.setRotation(1);
   b58ba:	2101      	movs	r1, #1
   b58bc:	4620      	mov	r0, r4
   b58be:	f002 f92a 	bl	b7b16 <_ZN12Adafruit_GFX11setRotationEh>
  Serial.println("Button test");
   b58c2:	f003 fd49 	bl	b9358 <_Z16_fetch_usbserialv>
   b58c6:	498e      	ldr	r1, [pc, #568]	; (b5b00 <setup+0x36c>)
   b58c8:	f003 fa0b 	bl	b8ce2 <_ZN5Print7printlnEPKc>
  pinMode(BUTTON_A, INPUT_PULLUP);
   b58cc:	2102      	movs	r1, #2
   b58ce:	2004      	movs	r0, #4
   b58d0:	f003 ffa2 	bl	b9818 <pinMode>
  pinMode(BUTTON_B, INPUT_PULLUP);
   b58d4:	2102      	movs	r1, #2
   b58d6:	2003      	movs	r0, #3
   b58d8:	f003 ff9e 	bl	b9818 <pinMode>
  pinMode(BUTTON_C, INPUT_PULLUP);
   b58dc:	2102      	movs	r1, #2
   b58de:	4608      	mov	r0, r1
   b58e0:	f003 ff9a 	bl	b9818 <pinMode>
  display.setTextSize(1);
   b58e4:	2101      	movs	r1, #1
   b58e6:	4620      	mov	r0, r4
   b58e8:	f002 fb7d 	bl	b7fe6 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b58ec:	2200      	movs	r2, #0
   b58ee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b58f2:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.print("BigdaddyAddie weather station!\n");
   b58f6:	4983      	ldr	r1, [pc, #524]	; (b5b04 <setup+0x370>)
   b58f8:	4620      	mov	r0, r4
   b58fa:	f003 f9df 	bl	b8cbc <_ZN5Print5printEPKc>
  display.print("connected!\n");
   b58fe:	4982      	ldr	r1, [pc, #520]	; (b5b08 <setup+0x374>)
   b5900:	4620      	mov	r0, r4
   b5902:	f003 f9db 	bl	b8cbc <_ZN5Print5printEPKc>
  display.display(); // actually display all of the above
   b5906:	4620      	mov	r0, r4
   b5908:	f002 fb73 	bl	b7ff2 <_ZN15Adafruit_SH110X7displayEv>
    status = bme.begin();  
   b590c:	487f      	ldr	r0, [pc, #508]	; (b5b0c <setup+0x378>)
   b590e:	f000 fe9c 	bl	b664a <_ZN15Adafruit_BME2805beginEv>
    if (!status) {
   b5912:	bb78      	cbnz	r0, b5974 <setup+0x1e0>
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   b5914:	f003 fd20 	bl	b9358 <_Z16_fetch_usbserialv>
   b5918:	497d      	ldr	r1, [pc, #500]	; (b5b10 <setup+0x37c>)
   b591a:	f003 f9e2 	bl	b8ce2 <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),16);
   b591e:	f003 fd1b 	bl	b9358 <_Z16_fetch_usbserialv>
   b5922:	497c      	ldr	r1, [pc, #496]	; (b5b14 <setup+0x380>)
   b5924:	f003 f9ca 	bl	b8cbc <_ZN5Print5printEPKc>
   b5928:	f003 fd16 	bl	b9358 <_Z16_fetch_usbserialv>
   b592c:	4604      	mov	r4, r0
   b592e:	4877      	ldr	r0, [pc, #476]	; (b5b0c <setup+0x378>)
   b5930:	f000 fa0e 	bl	b5d50 <_ZN15Adafruit_BME2808sensorIDEv>
   b5934:	2210      	movs	r2, #16
   b5936:	4601      	mov	r1, r0
   b5938:	4620      	mov	r0, r4
   b593a:	f7fe fc1f 	bl	b417c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   b593e:	f003 fd0b 	bl	b9358 <_Z16_fetch_usbserialv>
   b5942:	4975      	ldr	r1, [pc, #468]	; (b5b18 <setup+0x384>)
   b5944:	f003 f9ba 	bl	b8cbc <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   b5948:	f003 fd06 	bl	b9358 <_Z16_fetch_usbserialv>
   b594c:	4973      	ldr	r1, [pc, #460]	; (b5b1c <setup+0x388>)
   b594e:	f003 f9b5 	bl	b8cbc <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   b5952:	f003 fd01 	bl	b9358 <_Z16_fetch_usbserialv>
   b5956:	4972      	ldr	r1, [pc, #456]	; (b5b20 <setup+0x38c>)
   b5958:	f003 f9b0 	bl	b8cbc <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   b595c:	f003 fcfc 	bl	b9358 <_Z16_fetch_usbserialv>
   b5960:	4970      	ldr	r1, [pc, #448]	; (b5b24 <setup+0x390>)
   b5962:	f003 f9ab 	bl	b8cbc <_ZN5Print5printEPKc>
        while (1) delay(10);
   b5966:	200a      	movs	r0, #10
   b5968:	f003 fb74 	bl	b9054 <delay>
   b596c:	e7fb      	b.n	b5966 <setup+0x1d2>
            val = n;
   b596e:	462a      	mov	r2, r5
   b5970:	4623      	mov	r3, r4
   b5972:	e743      	b.n	b57fc <setup+0x68>
if (i2ceeprom.begin(0x50)) {  // you can stick the new i2c addr in here, e.g. begin(0x51);
   b5974:	f004 f812 	bl	b999c <_Z19__fetch_global_Wirev>
   b5978:	2150      	movs	r1, #80	; 0x50
   b597a:	4602      	mov	r2, r0
   b597c:	486a      	ldr	r0, [pc, #424]	; (b5b28 <setup+0x394>)
   b597e:	f002 fca5 	bl	b82cc <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>
   b5982:	b1e0      	cbz	r0, b59be <setup+0x22a>
    Serial.println("Found I2C EEPROM");
   b5984:	f003 fce8 	bl	b9358 <_Z16_fetch_usbserialv>
   b5988:	4968      	ldr	r1, [pc, #416]	; (b5b2c <setup+0x398>)
   b598a:	f003 f9aa 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    display.clearDisplay();
   b598e:	4620      	mov	r0, r4
   b5990:	f001 feba 	bl	b7708 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
    display.println("Found I2C FRAM");
   b5994:	4966      	ldr	r1, [pc, #408]	; (b5b30 <setup+0x39c>)
   b5996:	4620      	mov	r0, r4
   b5998:	f003 f9a3 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    display.display();
   b599c:	4620      	mov	r0, r4
   b599e:	f002 fb28 	bl	b7ff2 <_ZN15Adafruit_SH110X7displayEv>
eeprom_test();
   b59a2:	f7ff f887 	bl	b4ab4 <_Z11eeprom_testv>
  if(!bno.begin())
   b59a6:	4863      	ldr	r0, [pc, #396]	; (b5b34 <setup+0x3a0>)
   b59a8:	210c      	movs	r1, #12
   b59aa:	f001 fb90 	bl	b70ce <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
   b59ae:	4607      	mov	r7, r0
   b59b0:	b970      	cbnz	r0, b59d0 <setup+0x23c>
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
   b59b2:	f003 fcd1 	bl	b9358 <_Z16_fetch_usbserialv>
   b59b6:	4960      	ldr	r1, [pc, #384]	; (b5b38 <setup+0x3a4>)
   b59b8:	f003 f980 	bl	b8cbc <_ZN5Print5printEPKc>
    while(1);
   b59bc:	e7fe      	b.n	b59bc <setup+0x228>
    Serial.println("I2C EEPROM not identified ... check your connections?\r\n");
   b59be:	f003 fccb 	bl	b9358 <_Z16_fetch_usbserialv>
   b59c2:	495e      	ldr	r1, [pc, #376]	; (b5b3c <setup+0x3a8>)
   b59c4:	f003 f98d 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    while (1) delay(10);
   b59c8:	200a      	movs	r0, #10
   b59ca:	f003 fb43 	bl	b9054 <delay>
   b59ce:	e7fb      	b.n	b59c8 <setup+0x234>
   Serial.print("time base value =");
   b59d0:	f003 fcc2 	bl	b9358 <_Z16_fetch_usbserialv>
   b59d4:	493d      	ldr	r1, [pc, #244]	; (b5acc <setup+0x338>)
   b59d6:	f003 f971 	bl	b8cbc <_ZN5Print5printEPKc>
Serial.print(time_base);
   b59da:	f003 fcbd 	bl	b9358 <_Z16_fetch_usbserialv>
   b59de:	e9d6 5400 	ldrd	r5, r4, [r6]
        if (n < 0 && base == 10) {
   b59e2:	2c00      	cmp	r4, #0
   b59e4:	4680      	mov	r8, r0
   b59e6:	da66      	bge.n	b5ab6 <setup+0x322>
            t = print('-');
   b59e8:	212d      	movs	r1, #45	; 0x2d
   b59ea:	f003 f96b 	bl	b8cc4 <_ZN5Print5printEc>
            val = -n;
   b59ee:	426a      	negs	r2, r5
   b59f0:	eb64 0344 	sbc.w	r3, r4, r4, lsl #1
        return printNumber(val, base) + t;
   b59f4:	210a      	movs	r1, #10
   b59f6:	9100      	str	r1, [sp, #0]
   b59f8:	4640      	mov	r0, r8
   b59fa:	f003 f99c 	bl	b8d36 <_ZN5Print11printNumberEyh>
Serial.print("\n");
   b59fe:	f003 fcab 	bl	b9358 <_Z16_fetch_usbserialv>
   b5a02:	4933      	ldr	r1, [pc, #204]	; (b5ad0 <setup+0x33c>)
   b5a04:	f003 f95a 	bl	b8cbc <_ZN5Print5printEPKc>
  delay(1000);
   b5a08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5a0c:	f003 fb22 	bl	b9054 <delay>
  displaySensorDetails();
   b5a10:	f7fe fcaa 	bl	b4368 <_Z20displaySensorDetailsv>
    EEPROM.get(eeAddress, bnoID);
   b5a14:	f003 ff94 	bl	b9940 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b5a18:	2204      	movs	r2, #4
   b5a1a:	a902      	add	r1, sp, #8
   b5a1c:	2000      	movs	r0, #0
   b5a1e:	f002 fd15 	bl	b844c <HAL_EEPROM_Get>
    bno.getSensor(&sensor);
   b5a22:	4844      	ldr	r0, [pc, #272]	; (b5b34 <setup+0x3a0>)
   b5a24:	a918      	add	r1, sp, #96	; 0x60
   b5a26:	f001 fa3d 	bl	b6ea4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    if (bnoID != sensor.sensor_id)
   b5a2a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   b5a2c:	9b02      	ldr	r3, [sp, #8]
   b5a2e:	429a      	cmp	r2, r3
   b5a30:	f000 808e 	beq.w	b5b50 <setup+0x3bc>
        Serial.println("\nNo Calibration Data for this sensor exists in EEPROM");
   b5a34:	f003 fc90 	bl	b9358 <_Z16_fetch_usbserialv>
   b5a38:	4941      	ldr	r1, [pc, #260]	; (b5b40 <setup+0x3ac>)
   b5a3a:	f003 f952 	bl	b8ce2 <_ZN5Print7printlnEPKc>
        delay(500);
   b5a3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5a42:	f003 fb07 	bl	b9054 <delay>
    bool foundCalib = false;
   b5a46:	2700      	movs	r7, #0
    delay(1000);
   b5a48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5a4c:	f003 fb02 	bl	b9054 <delay>
    displaySensorDetails();
   b5a50:	f7fe fc8a 	bl	b4368 <_Z20displaySensorDetailsv>
    displaySensorStatus();
   b5a54:	f7fe fba2 	bl	b419c <_Z19displaySensorStatusv>
    bno.setExtCrystalUse(true);
   b5a58:	2101      	movs	r1, #1
   b5a5a:	4836      	ldr	r0, [pc, #216]	; (b5b34 <setup+0x3a0>)
   b5a5c:	f001 fa7a 	bl	b6f54 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
   b5a60:	f002 fce4 	bl	b842c <HAL_Timer_Get_Milli_Seconds>
millisOld=millis();
   b5a64:	4b37      	ldr	r3, [pc, #220]	; (b5b44 <setup+0x3b0>)
    bno.getEvent(&event);
   b5a66:	a90f      	add	r1, sp, #60	; 0x3c
millisOld=millis();
   b5a68:	6018      	str	r0, [r3, #0]
    bno.getEvent(&event);
   b5a6a:	4832      	ldr	r0, [pc, #200]	; (b5b34 <setup+0x3a0>)
   b5a6c:	f001 fcfe 	bl	b746c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
    if (foundCalib){
   b5a70:	2f00      	cmp	r7, #0
   b5a72:	f000 808b 	beq.w	b5b8c <setup+0x3f8>
        Serial.println("Move sensor slightly to calibrate magnetometers");
   b5a76:	f003 fc6f 	bl	b9358 <_Z16_fetch_usbserialv>
   b5a7a:	4933      	ldr	r1, [pc, #204]	; (b5b48 <setup+0x3b4>)
        while (!bno.isFullyCalibrated())
   b5a7c:	4c2d      	ldr	r4, [pc, #180]	; (b5b34 <setup+0x3a0>)
        Serial.println("Move sensor slightly to calibrate magnetometers");
   b5a7e:	f003 f930 	bl	b8ce2 <_ZN5Print7printlnEPKc>
        display.clearDisplay();
   b5a82:	481b      	ldr	r0, [pc, #108]	; (b5af0 <setup+0x35c>)
   b5a84:	f001 fe40 	bl	b7708 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
        display.println("Move sensor slightly");
   b5a88:	4930      	ldr	r1, [pc, #192]	; (b5b4c <setup+0x3b8>)
   b5a8a:	4819      	ldr	r0, [pc, #100]	; (b5af0 <setup+0x35c>)
   b5a8c:	f003 f929 	bl	b8ce2 <_ZN5Print7printlnEPKc>
        display.display();
   b5a90:	4817      	ldr	r0, [pc, #92]	; (b5af0 <setup+0x35c>)
   b5a92:	f002 faae 	bl	b7ff2 <_ZN15Adafruit_SH110X7displayEv>
        while (!bno.isFullyCalibrated())
   b5a96:	4620      	mov	r0, r4
   b5a98:	f001 fba2 	bl	b71e0 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   b5a9c:	2800      	cmp	r0, #0
   b5a9e:	f040 80b4 	bne.w	b5c0a <setup+0x476>
            bno.getEvent(&event);
   b5aa2:	a90f      	add	r1, sp, #60	; 0x3c
   b5aa4:	4620      	mov	r0, r4
   b5aa6:	f001 fce1 	bl	b746c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            displayCalStatus();
   b5aaa:	f7ff fa13 	bl	b4ed4 <_Z16displayCalStatusv>
            delay(BNO055_STARTUP_SAMPLE_DELAY_MS);
   b5aae:	2064      	movs	r0, #100	; 0x64
   b5ab0:	f003 fad0 	bl	b9054 <delay>
        while (!bno.isFullyCalibrated())
   b5ab4:	e7ef      	b.n	b5a96 <setup+0x302>
            val = n;
   b5ab6:	462a      	mov	r2, r5
   b5ab8:	4623      	mov	r3, r4
   b5aba:	e79b      	b.n	b59f4 <setup+0x260>
   b5abc:	000bd4aa 	.word	0x000bd4aa
   b5ac0:	2003e5f4 	.word	0x2003e5f4
   b5ac4:	000bd4b1 	.word	0x000bd4b1
   b5ac8:	2003e670 	.word	0x2003e670
   b5acc:	000bd4cc 	.word	0x000bd4cc
   b5ad0:	000bd393 	.word	0x000bd393
   b5ad4:	2003e43f 	.word	0x2003e43f
   b5ad8:	2003e43d 	.word	0x2003e43d
   b5adc:	2003e43e 	.word	0x2003e43e
   b5ae0:	000bd4de 	.word	0x000bd4de
   b5ae4:	000b40c9 	.word	0x000b40c9
   b5ae8:	000bd4fb 	.word	0x000bd4fb
   b5aec:	000bd511 	.word	0x000bd511
   b5af0:	2003e574 	.word	0x2003e574
   b5af4:	000bd51f 	.word	0x000bd51f
   b5af8:	000bd52b 	.word	0x000bd52b
   b5afc:	000bd548 	.word	0x000bd548
   b5b00:	000bd553 	.word	0x000bd553
   b5b04:	000bd55f 	.word	0x000bd55f
   b5b08:	000bd57f 	.word	0x000bd57f
   b5b0c:	2003e4c4 	.word	0x2003e4c4
   b5b10:	000bd58b 	.word	0x000bd58b
   b5b14:	000bd5d3 	.word	0x000bd5d3
   b5b18:	000bd5e4 	.word	0x000bd5e4
   b5b1c:	000bd62b 	.word	0x000bd62b
   b5b20:	000bd655 	.word	0x000bd655
   b5b24:	000bd67f 	.word	0x000bd67f
   b5b28:	2003e5ec 	.word	0x2003e5ec
   b5b2c:	000bd6a9 	.word	0x000bd6a9
   b5b30:	000bd6ba 	.word	0x000bd6ba
   b5b34:	2003e538 	.word	0x2003e538
   b5b38:	000bd701 	.word	0x000bd701
   b5b3c:	000bd6c9 	.word	0x000bd6c9
   b5b40:	000bd73e 	.word	0x000bd73e
   b5b44:	2003e618 	.word	0x2003e618
   b5b48:	000bd7f6 	.word	0x000bd7f6
   b5b4c:	000bd826 	.word	0x000bd826
        Serial.println("\nFound Calibration for this sensor in EEPROM.");
   b5b50:	f003 fc02 	bl	b9358 <_Z16_fetch_usbserialv>
   b5b54:	494d      	ldr	r1, [pc, #308]	; (b5c8c <setup+0x4f8>)
   b5b56:	f003 f8c4 	bl	b8ce2 <_ZN5Print7printlnEPKc>
        EEPROM.get(eeAddress, calibrationData);
   b5b5a:	f003 fef1 	bl	b9940 <_Z21__fetch_global_EEPROMv>
   b5b5e:	2216      	movs	r2, #22
   b5b60:	a903      	add	r1, sp, #12
   b5b62:	2004      	movs	r0, #4
   b5b64:	f002 fc72 	bl	b844c <HAL_EEPROM_Get>
        displaySensorOffsets(calibrationData);
   b5b68:	a803      	add	r0, sp, #12
   b5b6a:	f7fe fc89 	bl	b4480 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
        Serial.println("\n\nRestoring Calibration data to the BNO055...");
   b5b6e:	f003 fbf3 	bl	b9358 <_Z16_fetch_usbserialv>
   b5b72:	4947      	ldr	r1, [pc, #284]	; (b5c90 <setup+0x4fc>)
   b5b74:	f003 f8b5 	bl	b8ce2 <_ZN5Print7printlnEPKc>
        bno.setSensorOffsets(calibrationData);
   b5b78:	a903      	add	r1, sp, #12
   b5b7a:	4846      	ldr	r0, [pc, #280]	; (b5c94 <setup+0x500>)
   b5b7c:	f001 fa0d 	bl	b6f9a <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>
        Serial.println("\n\nCalibration data loaded into BNO055");
   b5b80:	f003 fbea 	bl	b9358 <_Z16_fetch_usbserialv>
   b5b84:	4944      	ldr	r1, [pc, #272]	; (b5c98 <setup+0x504>)
   b5b86:	f003 f8ac 	bl	b8ce2 <_ZN5Print7printlnEPKc>
        foundCalib = true;
   b5b8a:	e75d      	b.n	b5a48 <setup+0x2b4>
        Serial.println("Please Calibrate Sensor: ");
   b5b8c:	f003 fbe4 	bl	b9358 <_Z16_fetch_usbserialv>
   b5b90:	4942      	ldr	r1, [pc, #264]	; (b5c9c <setup+0x508>)
        while (!bno.isFullyCalibrated())
   b5b92:	4c40      	ldr	r4, [pc, #256]	; (b5c94 <setup+0x500>)
            Serial.print("X: ");
   b5b94:	4e42      	ldr	r6, [pc, #264]	; (b5ca0 <setup+0x50c>)
            Serial.print("\tY: ");
   b5b96:	4d43      	ldr	r5, [pc, #268]	; (b5ca4 <setup+0x510>)
        Serial.println("Please Calibrate Sensor: ");
   b5b98:	f003 f8a3 	bl	b8ce2 <_ZN5Print7printlnEPKc>
        while (!bno.isFullyCalibrated())
   b5b9c:	4620      	mov	r0, r4
   b5b9e:	f001 fb1f 	bl	b71e0 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   b5ba2:	bb90      	cbnz	r0, b5c0a <setup+0x476>
            bno.getEvent(&event);
   b5ba4:	a90f      	add	r1, sp, #60	; 0x3c
   b5ba6:	4620      	mov	r0, r4
   b5ba8:	f001 fc60 	bl	b746c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
            Serial.print("X: ");
   b5bac:	f003 fbd4 	bl	b9358 <_Z16_fetch_usbserialv>
   b5bb0:	4631      	mov	r1, r6
   b5bb2:	f003 f883 	bl	b8cbc <_ZN5Print5printEPKc>
            Serial.print(event.orientation.x, 4);
   b5bb6:	f003 fbcf 	bl	b9358 <_Z16_fetch_usbserialv>
   b5bba:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   b5bbe:	2104      	movs	r1, #4
   b5bc0:	f003 f9b0 	bl	b8f24 <_ZN5Print5printEfi>
            Serial.print("\tY: ");
   b5bc4:	f003 fbc8 	bl	b9358 <_Z16_fetch_usbserialv>
   b5bc8:	4629      	mov	r1, r5
   b5bca:	f003 f877 	bl	b8cbc <_ZN5Print5printEPKc>
            Serial.print(event.orientation.y, 4);
   b5bce:	f003 fbc3 	bl	b9358 <_Z16_fetch_usbserialv>
   b5bd2:	ed9d 0a15 	vldr	s0, [sp, #84]	; 0x54
   b5bd6:	2104      	movs	r1, #4
   b5bd8:	f003 f9a4 	bl	b8f24 <_ZN5Print5printEfi>
            Serial.print("\tZ: ");
   b5bdc:	f003 fbbc 	bl	b9358 <_Z16_fetch_usbserialv>
   b5be0:	4931      	ldr	r1, [pc, #196]	; (b5ca8 <setup+0x514>)
   b5be2:	f003 f86b 	bl	b8cbc <_ZN5Print5printEPKc>
            Serial.print(event.orientation.z, 4);
   b5be6:	f003 fbb7 	bl	b9358 <_Z16_fetch_usbserialv>
   b5bea:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   b5bee:	2104      	movs	r1, #4
   b5bf0:	f003 f998 	bl	b8f24 <_ZN5Print5printEfi>
            displayCalStatus();
   b5bf4:	f7ff f96e 	bl	b4ed4 <_Z16displayCalStatusv>
            Serial.println("");
   b5bf8:	f003 fbae 	bl	b9358 <_Z16_fetch_usbserialv>
   b5bfc:	492b      	ldr	r1, [pc, #172]	; (b5cac <setup+0x518>)
   b5bfe:	f003 f870 	bl	b8ce2 <_ZN5Print7printlnEPKc>
            delay(BNO055_STARTUP_SAMPLE_DELAY_MS);
   b5c02:	2064      	movs	r0, #100	; 0x64
   b5c04:	f003 fa26 	bl	b9054 <delay>
        while (!bno.isFullyCalibrated())
   b5c08:	e7c8      	b.n	b5b9c <setup+0x408>
    Serial.println("\nFully calibrated!");
   b5c0a:	f003 fba5 	bl	b9358 <_Z16_fetch_usbserialv>
   b5c0e:	4928      	ldr	r1, [pc, #160]	; (b5cb0 <setup+0x51c>)
   b5c10:	f003 f867 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    Serial.println("--------------------------------");
   b5c14:	f003 fba0 	bl	b9358 <_Z16_fetch_usbserialv>
   b5c18:	4926      	ldr	r1, [pc, #152]	; (b5cb4 <setup+0x520>)
   b5c1a:	f003 f862 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    Serial.println("Calibration Results: ");
   b5c1e:	f003 fb9b 	bl	b9358 <_Z16_fetch_usbserialv>
   b5c22:	4925      	ldr	r1, [pc, #148]	; (b5cb8 <setup+0x524>)
   b5c24:	f003 f85d 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    bno.getSensorOffsets(newCalib);
   b5c28:	a909      	add	r1, sp, #36	; 0x24
   b5c2a:	481a      	ldr	r0, [pc, #104]	; (b5c94 <setup+0x500>)
   b5c2c:	f001 fb11 	bl	b7252 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>
    displaySensorOffsets(newCalib);
   b5c30:	a809      	add	r0, sp, #36	; 0x24
   b5c32:	f7fe fc25 	bl	b4480 <_Z20displaySensorOffsetsRK25adafruit_bno055_offsets_t>
    Serial.println("\n\nStoring calibration data to EEPROM...");
   b5c36:	f003 fb8f 	bl	b9358 <_Z16_fetch_usbserialv>
   b5c3a:	4920      	ldr	r1, [pc, #128]	; (b5cbc <setup+0x528>)
   b5c3c:	f003 f851 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    bno.getSensor(&sensor);
   b5c40:	a918      	add	r1, sp, #96	; 0x60
   b5c42:	4814      	ldr	r0, [pc, #80]	; (b5c94 <setup+0x500>)
   b5c44:	f001 f92e 	bl	b6ea4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
    bnoID = sensor.sensor_id;
   b5c48:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   b5c4a:	9302      	str	r3, [sp, #8]
    EEPROM.put(eeAddress, bnoID);
   b5c4c:	f003 fe78 	bl	b9940 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5c50:	a902      	add	r1, sp, #8
   b5c52:	2204      	movs	r2, #4
   b5c54:	2000      	movs	r0, #0
   b5c56:	f002 fc01 	bl	b845c <HAL_EEPROM_Put>
    EEPROM.put(eeAddress, newCalib);
   b5c5a:	f003 fe71 	bl	b9940 <_Z21__fetch_global_EEPROMv>
   b5c5e:	2216      	movs	r2, #22
   b5c60:	a909      	add	r1, sp, #36	; 0x24
   b5c62:	2004      	movs	r0, #4
   b5c64:	f002 fbfa 	bl	b845c <HAL_EEPROM_Put>
    Serial.println("Data stored to EEPROM.");
   b5c68:	f003 fb76 	bl	b9358 <_Z16_fetch_usbserialv>
   b5c6c:	4914      	ldr	r1, [pc, #80]	; (b5cc0 <setup+0x52c>)
   b5c6e:	f003 f838 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    Serial.println("\n--------------------------------\n");
   b5c72:	f003 fb71 	bl	b9358 <_Z16_fetch_usbserialv>
   b5c76:	4913      	ldr	r1, [pc, #76]	; (b5cc4 <setup+0x530>)
   b5c78:	f003 f833 	bl	b8ce2 <_ZN5Print7printlnEPKc>
    delay(500);
   b5c7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5c80:	f003 f9e8 	bl	b9054 <delay>
}
   b5c84:	b022      	add	sp, #136	; 0x88
   b5c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5c8a:	bf00      	nop
   b5c8c:	000bd774 	.word	0x000bd774
   b5c90:	000bd7a2 	.word	0x000bd7a2
   b5c94:	2003e538 	.word	0x2003e538
   b5c98:	000bd7d0 	.word	0x000bd7d0
   b5c9c:	000bd83b 	.word	0x000bd83b
   b5ca0:	000bd384 	.word	0x000bd384
   b5ca4:	000bd388 	.word	0x000bd388
   b5ca8:	000bd38d 	.word	0x000bd38d
   b5cac:	000bd3a9 	.word	0x000bd3a9
   b5cb0:	000bd855 	.word	0x000bd855
   b5cb4:	000bd1ca 	.word	0x000bd1ca
   b5cb8:	000bd868 	.word	0x000bd868
   b5cbc:	000bd87e 	.word	0x000bd87e
   b5cc0:	000bd8a6 	.word	0x000bd8a6
   b5cc4:	000bd8bd 	.word	0x000bd8bd

000b5cc8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5cc8:	4770      	bx	lr

000b5cca <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5cca:	b510      	push	{r4, lr}
  }
   b5ccc:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5cce:	4604      	mov	r4, r0
  }
   b5cd0:	f7fe f9e5 	bl	b409e <_ZdlPvj>
   b5cd4:	4620      	mov	r0, r4
   b5cd6:	bd10      	pop	{r4, pc}

000b5cd8 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5cd8:	b40e      	push	{r1, r2, r3}
   b5cda:	b503      	push	{r0, r1, lr}
   b5cdc:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b5cde:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5ce0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5ce4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b5ce6:	f003 f92c 	bl	b8f42 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b5cea:	b002      	add	sp, #8
   b5cec:	f85d eb04 	ldr.w	lr, [sp], #4
   b5cf0:	b003      	add	sp, #12
   b5cf2:	4770      	bx	lr

000b5cf4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5cf6:	4604      	mov	r4, r0
   b5cf8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5cfa:	7922      	ldrb	r2, [r4, #4]
   b5cfc:	68a3      	ldr	r3, [r4, #8]
   b5cfe:	b132      	cbz	r2, b5d0e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5d00:	b9a3      	cbnz	r3, b5d2c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5d02:	490b      	ldr	r1, [pc, #44]	; (b5d30 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5d04:	b002      	add	sp, #8
   b5d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5d0a:	f002 bfd7 	b.w	b8cbc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5d0e:	4a09      	ldr	r2, [pc, #36]	; (b5d34 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5d10:	7b26      	ldrb	r6, [r4, #12]
   b5d12:	4d09      	ldr	r5, [pc, #36]	; (b5d38 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5d14:	4909      	ldr	r1, [pc, #36]	; (b5d3c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b5d16:	7b64      	ldrb	r4, [r4, #13]
   b5d18:	2e01      	cmp	r6, #1
   b5d1a:	bf18      	it	ne
   b5d1c:	4629      	movne	r1, r5
   b5d1e:	e9cd 1400 	strd	r1, r4, [sp]
   b5d22:	4907      	ldr	r1, [pc, #28]	; (b5d40 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5d24:	f7ff ffd8 	bl	b5cd8 <_ZN5Print6printfEPKcz>
  }
   b5d28:	b002      	add	sp, #8
   b5d2a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5d2c:	4a05      	ldr	r2, [pc, #20]	; (b5d44 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5d2e:	e7ef      	b.n	b5d10 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5d30:	000bd8f1 	.word	0x000bd8f1
   b5d34:	000bd3a9 	.word	0x000bd3a9
   b5d38:	000bd8ed 	.word	0x000bd8ed
   b5d3c:	000bd8e9 	.word	0x000bd8e9
   b5d40:	000bd907 	.word	0x000bd907
   b5d44:	000bd8e0 	.word	0x000bd8e0

000b5d48 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b5d48:	f04f 33ff 	mov.w	r3, #4294967295
   b5d4c:	6103      	str	r3, [r0, #16]
{ }
   b5d4e:	4770      	bx	lr

000b5d50 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   b5d50:	6880      	ldr	r0, [r0, #8]
   b5d52:	4770      	bx	lr

000b5d54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5d54:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5d56:	4c0b      	ldr	r4, [pc, #44]	; (b5d84 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5d58:	7821      	ldrb	r1, [r4, #0]
   b5d5a:	f3bf 8f5b 	dmb	ish
   b5d5e:	f011 0101 	ands.w	r1, r1, #1
   b5d62:	d10b      	bne.n	b5d7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5d64:	4620      	mov	r0, r4
   b5d66:	9101      	str	r1, [sp, #4]
   b5d68:	f7fe f9a6 	bl	b40b8 <__cxa_guard_acquire>
   b5d6c:	9901      	ldr	r1, [sp, #4]
   b5d6e:	b128      	cbz	r0, b5d7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5d70:	4805      	ldr	r0, [pc, #20]	; (b5d88 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5d72:	f002 fe0b 	bl	b898c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5d76:	4620      	mov	r0, r4
   b5d78:	f7fe f9a3 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b5d7c:	4802      	ldr	r0, [pc, #8]	; (b5d88 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5d7e:	b002      	add	sp, #8
   b5d80:	bd10      	pop	{r4, pc}
   b5d82:	bf00      	nop
   b5d84:	2003e688 	.word	0x2003e688
   b5d88:	2003e68c 	.word	0x2003e68c

000b5d8c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b5d8c:	b508      	push	{r3, lr}
        instance().endTransaction();
   b5d8e:	f7ff ffe1 	bl	b5d54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b5d92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b5d96:	f002 be17 	b.w	b89c8 <_ZN8SPIClass14endTransactionEv>

000b5d9a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b5d9a:	b507      	push	{r0, r1, r2, lr}
   b5d9c:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b5d9e:	f7ff ffd9 	bl	b5d54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5da2:	9901      	ldr	r1, [sp, #4]
    }
   b5da4:	b003      	add	sp, #12
   b5da6:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b5daa:	f002 be27 	b.w	b89fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b5dae <_ZN15Adafruit_BME2807spixferEh>:
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b5dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sck == -1)
   b5db2:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5db6:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b5db8:	4605      	mov	r5, r0
   b5dba:	460f      	mov	r7, r1
    if (_sck == -1)
   b5dbc:	d106      	bne.n	b5dcc <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b5dbe:	f7ff ffc9 	bl	b5d54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5dc2:	4639      	mov	r1, r7
}
   b5dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5dc8:	f002 be86 	b.w	b8ad8 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b5dcc:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b5dce:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b5dd0:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b5dd4:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b5dd8:	2100      	movs	r1, #0
   b5dda:	b280      	uxth	r0, r0
   b5ddc:	f003 fd2d 	bl	b983a <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b5de0:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b5de4:	fa08 f106 	lsl.w	r1, r8, r6
   b5de8:	4039      	ands	r1, r7
   b5dea:	b280      	uxth	r0, r0
   b5dec:	f003 fd25 	bl	b983a <digitalWrite>
        digitalWrite(_sck, HIGH);
   b5df0:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b5df4:	2101      	movs	r1, #1
   b5df6:	b280      	uxth	r0, r0
   b5df8:	f003 fd1f 	bl	b983a <digitalWrite>
        if (digitalRead(_miso))
   b5dfc:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b5e00:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b5e02:	b280      	uxth	r0, r0
        reply <<= 1;
   b5e04:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b5e06:	f003 fd31 	bl	b986c <digitalRead>
   b5e0a:	b108      	cbz	r0, b5e10 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b5e0c:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b5e10:	3e01      	subs	r6, #1
   b5e12:	d2df      	bcs.n	b5dd4 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b5e14:	4620      	mov	r0, r4
   b5e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b5e1c <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   b5e1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b5e1e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b5e22:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b5e24:	4604      	mov	r4, r0
   b5e26:	460e      	mov	r6, r1
   b5e28:	4615      	mov	r5, r2
    if (_cs == -1) {
   b5e2a:	d113      	bne.n	b5e54 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5e2c:	7901      	ldrb	r1, [r0, #4]
   b5e2e:	6800      	ldr	r0, [r0, #0]
   b5e30:	f003 fbf6 	bl	b9620 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5e34:	6820      	ldr	r0, [r4, #0]
   b5e36:	6803      	ldr	r3, [r0, #0]
   b5e38:	4631      	mov	r1, r6
   b5e3a:	689b      	ldr	r3, [r3, #8]
   b5e3c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b5e3e:	6820      	ldr	r0, [r4, #0]
   b5e40:	6803      	ldr	r3, [r0, #0]
   b5e42:	4629      	mov	r1, r5
   b5e44:	689b      	ldr	r3, [r3, #8]
   b5e46:	4798      	blx	r3
        _wire -> endTransmission();
   b5e48:	6820      	ldr	r0, [r4, #0]
}
   b5e4a:	b004      	add	sp, #16
   b5e4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b5e50:	f003 bbee 	b.w	b9630 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b5e54:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5e58:	3301      	adds	r3, #1
   b5e5a:	d10c      	bne.n	b5e76 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b5e5c:	4b16      	ldr	r3, [pc, #88]	; (b5eb8 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b5e5e:	9300      	str	r3, [sp, #0]
   b5e60:	2300      	movs	r3, #0
   b5e62:	f88d 3004 	strb.w	r3, [sp, #4]
   b5e66:	4b15      	ldr	r3, [pc, #84]	; (b5ebc <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b5e68:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b5e6a:	4668      	mov	r0, sp
   b5e6c:	2301      	movs	r3, #1
   b5e6e:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5e72:	f7ff ff92 	bl	b5d9a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5e76:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5e7a:	2100      	movs	r1, #0
   b5e7c:	b280      	uxth	r0, r0
   b5e7e:	f003 fcdc 	bl	b983a <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b5e82:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b5e86:	4620      	mov	r0, r4
   b5e88:	f7ff ff91 	bl	b5dae <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b5e8c:	4629      	mov	r1, r5
   b5e8e:	4620      	mov	r0, r4
   b5e90:	f7ff ff8d 	bl	b5dae <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b5e94:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5e98:	2101      	movs	r1, #1
   b5e9a:	b280      	uxth	r0, r0
   b5e9c:	f003 fccd 	bl	b983a <digitalWrite>
    if (_sck == -1)
   b5ea0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5ea4:	3301      	adds	r3, #1
   b5ea6:	d104      	bne.n	b5eb2 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b5ea8:	b004      	add	sp, #16
   b5eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b5eae:	f7ff bf6d 	b.w	b5d8c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b5eb2:	b004      	add	sp, #16
   b5eb4:	bd70      	pop	{r4, r5, r6, pc}
   b5eb6:	bf00      	nop
   b5eb8:	000bd92c 	.word	0x000bd92c
   b5ebc:	0007a120 	.word	0x0007a120

000b5ec0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b5ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b5ec2:	00db      	lsls	r3, r3, #3
   b5ec4:	f002 0207 	and.w	r2, r2, #7
   b5ec8:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b5ecc:	4313      	orrs	r3, r2
   b5ece:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b5ed2:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b5ed6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b5eda:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b5ede:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b5ee2:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b5ee6:	f366 1347 	bfi	r3, r6, #5, #3
   b5eea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b5eee:	00ed      	lsls	r5, r5, #3
   b5ef0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b5ef4:	f007 0707 	and.w	r7, r7, #7
   b5ef8:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b5efc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b5f00:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b5f02:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b5f04:	431d      	orrs	r5, r3
   b5f06:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b5f0a:	f006 0207 	and.w	r2, r6, #7
   b5f0e:	21f2      	movs	r1, #242	; 0xf2
   b5f10:	f7ff ff84 	bl	b5e1c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b5f14:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b5f18:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b5f1c:	f002 0107 	and.w	r1, r2, #7
   b5f20:	009b      	lsls	r3, r3, #2
   b5f22:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b5f26:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b5f2a:	4620      	mov	r0, r4
   b5f2c:	21f5      	movs	r1, #245	; 0xf5
   b5f2e:	f7ff ff75 	bl	b5e1c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b5f32:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b5f36:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b5f3a:	f002 0107 	and.w	r1, r2, #7
   b5f3e:	009b      	lsls	r3, r3, #2
   b5f40:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b5f44:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b5f48:	4620      	mov	r0, r4
   b5f4a:	21f4      	movs	r1, #244	; 0xf4
}
   b5f4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b5f50:	f7ff bf64 	b.w	b5e1c <_ZN15Adafruit_BME2806write8Ehh>

000b5f54 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   b5f54:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b5f56:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b5f5a:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b5f5c:	b085      	sub	sp, #20
   b5f5e:	4604      	mov	r4, r0
   b5f60:	460d      	mov	r5, r1
    if (_cs == -1) {
   b5f62:	d118      	bne.n	b5f96 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5f64:	7901      	ldrb	r1, [r0, #4]
   b5f66:	6800      	ldr	r0, [r0, #0]
   b5f68:	f003 fb5a 	bl	b9620 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5f6c:	6820      	ldr	r0, [r4, #0]
   b5f6e:	6803      	ldr	r3, [r0, #0]
   b5f70:	4629      	mov	r1, r5
   b5f72:	689b      	ldr	r3, [r3, #8]
   b5f74:	4798      	blx	r3
        _wire -> endTransmission();
   b5f76:	6820      	ldr	r0, [r4, #0]
   b5f78:	f003 fb5a 	bl	b9630 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b5f7c:	7921      	ldrb	r1, [r4, #4]
   b5f7e:	6820      	ldr	r0, [r4, #0]
   b5f80:	2201      	movs	r2, #1
   b5f82:	f003 fb4a 	bl	b961a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b5f86:	6820      	ldr	r0, [r4, #0]
   b5f88:	6803      	ldr	r3, [r0, #0]
   b5f8a:	695b      	ldr	r3, [r3, #20]
   b5f8c:	4798      	blx	r3
   b5f8e:	b2c5      	uxtb	r5, r0
}
   b5f90:	4628      	mov	r0, r5
   b5f92:	b005      	add	sp, #20
   b5f94:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b5f96:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5f9a:	3301      	adds	r3, #1
   b5f9c:	d10c      	bne.n	b5fb8 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b5f9e:	4b15      	ldr	r3, [pc, #84]	; (b5ff4 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b5fa0:	9300      	str	r3, [sp, #0]
   b5fa2:	2300      	movs	r3, #0
   b5fa4:	f88d 3004 	strb.w	r3, [sp, #4]
   b5fa8:	4b13      	ldr	r3, [pc, #76]	; (b5ff8 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b5faa:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b5fac:	4668      	mov	r0, sp
   b5fae:	2301      	movs	r3, #1
   b5fb0:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5fb4:	f7ff fef1 	bl	b5d9a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5fb8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5fbc:	2100      	movs	r1, #0
   b5fbe:	b280      	uxth	r0, r0
   b5fc0:	f003 fc3b 	bl	b983a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b5fc4:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5fc8:	4620      	mov	r0, r4
   b5fca:	f7ff fef0 	bl	b5dae <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b5fce:	2100      	movs	r1, #0
   b5fd0:	4620      	mov	r0, r4
   b5fd2:	f7ff feec 	bl	b5dae <_ZN15Adafruit_BME2807spixferEh>
   b5fd6:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b5fd8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5fdc:	2101      	movs	r1, #1
   b5fde:	b280      	uxth	r0, r0
   b5fe0:	f003 fc2b 	bl	b983a <digitalWrite>
        if (_sck == -1)
   b5fe4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5fe8:	3301      	adds	r3, #1
   b5fea:	d1d1      	bne.n	b5f90 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b5fec:	f7ff fece 	bl	b5d8c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b5ff0:	e7ce      	b.n	b5f90 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b5ff2:	bf00      	nop
   b5ff4:	000bd92c 	.word	0x000bd92c
   b5ff8:	0007a120 	.word	0x0007a120

000b5ffc <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   b5ffc:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b5ffe:	21f3      	movs	r1, #243	; 0xf3
   b6000:	f7ff ffa8 	bl	b5f54 <_ZN15Adafruit_BME2805read8Eh>
}
   b6004:	f000 0001 	and.w	r0, r0, #1
   b6008:	bd08      	pop	{r3, pc}
	...

000b600c <_ZN15Adafruit_BME2806read16Eh>:
{
   b600c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b600e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b6012:	3301      	adds	r3, #1
{
   b6014:	b085      	sub	sp, #20
   b6016:	4604      	mov	r4, r0
   b6018:	460d      	mov	r5, r1
    if (_cs == -1) {
   b601a:	d11f      	bne.n	b605c <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b601c:	7901      	ldrb	r1, [r0, #4]
   b601e:	6800      	ldr	r0, [r0, #0]
   b6020:	f003 fafe 	bl	b9620 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b6024:	6820      	ldr	r0, [r4, #0]
   b6026:	6803      	ldr	r3, [r0, #0]
   b6028:	4629      	mov	r1, r5
   b602a:	689b      	ldr	r3, [r3, #8]
   b602c:	4798      	blx	r3
        _wire -> endTransmission();
   b602e:	6820      	ldr	r0, [r4, #0]
   b6030:	f003 fafe 	bl	b9630 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b6034:	7921      	ldrb	r1, [r4, #4]
   b6036:	6820      	ldr	r0, [r4, #0]
   b6038:	2202      	movs	r2, #2
   b603a:	f003 faee 	bl	b961a <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b603e:	6820      	ldr	r0, [r4, #0]
   b6040:	6803      	ldr	r3, [r0, #0]
   b6042:	695b      	ldr	r3, [r3, #20]
   b6044:	4798      	blx	r3
   b6046:	4605      	mov	r5, r0
   b6048:	6820      	ldr	r0, [r4, #0]
   b604a:	6803      	ldr	r3, [r0, #0]
   b604c:	695b      	ldr	r3, [r3, #20]
   b604e:	4798      	blx	r3
   b6050:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b6054:	b285      	uxth	r5, r0
}
   b6056:	4628      	mov	r0, r5
   b6058:	b005      	add	sp, #20
   b605a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b605c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b6060:	3301      	adds	r3, #1
   b6062:	d10c      	bne.n	b607e <_ZN15Adafruit_BME2806read16Eh+0x72>
   b6064:	4b18      	ldr	r3, [pc, #96]	; (b60c8 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b6066:	9300      	str	r3, [sp, #0]
   b6068:	2300      	movs	r3, #0
   b606a:	f88d 3004 	strb.w	r3, [sp, #4]
   b606e:	4b17      	ldr	r3, [pc, #92]	; (b60cc <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b6070:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b6072:	4668      	mov	r0, sp
   b6074:	2301      	movs	r3, #1
   b6076:	f8ad 300c 	strh.w	r3, [sp, #12]
   b607a:	f7ff fe8e 	bl	b5d9a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b607e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b6082:	2100      	movs	r1, #0
   b6084:	b280      	uxth	r0, r0
   b6086:	f003 fbd8 	bl	b983a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b608a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b608e:	4620      	mov	r0, r4
   b6090:	f7ff fe8d 	bl	b5dae <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b6094:	2100      	movs	r1, #0
   b6096:	4620      	mov	r0, r4
   b6098:	f7ff fe89 	bl	b5dae <_ZN15Adafruit_BME2807spixferEh>
   b609c:	2100      	movs	r1, #0
   b609e:	4605      	mov	r5, r0
   b60a0:	4620      	mov	r0, r4
   b60a2:	f7ff fe84 	bl	b5dae <_ZN15Adafruit_BME2807spixferEh>
   b60a6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b60aa:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b60ac:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b60b0:	2101      	movs	r1, #1
   b60b2:	b280      	uxth	r0, r0
   b60b4:	f003 fbc1 	bl	b983a <digitalWrite>
        if (_sck == -1)
   b60b8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b60bc:	3301      	adds	r3, #1
   b60be:	d1ca      	bne.n	b6056 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b60c0:	f7ff fe64 	bl	b5d8c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b60c4:	e7c7      	b.n	b6056 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b60c6:	bf00      	nop
   b60c8:	000bd92c 	.word	0x000bd92c
   b60cc:	0007a120 	.word	0x0007a120

000b60d0 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b60d0:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b60d2:	f7ff ff9b 	bl	b600c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b60d6:	ba40      	rev16	r0, r0
}
   b60d8:	b280      	uxth	r0, r0
   b60da:	bd08      	pop	{r3, pc}

000b60dc <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b60dc:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b60de:	2188      	movs	r1, #136	; 0x88
{
   b60e0:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b60e2:	f7ff fff5 	bl	b60d0 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b60e6:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b60e8:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b60ea:	4620      	mov	r0, r4
   b60ec:	f7ff fff0 	bl	b60d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b60f0:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b60f2:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b60f4:	4620      	mov	r0, r4
   b60f6:	f7ff ffeb 	bl	b60d0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b60fa:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b60fc:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b60fe:	4620      	mov	r0, r4
   b6100:	f7ff ffe6 	bl	b60d0 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b6104:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b6106:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b6108:	4620      	mov	r0, r4
   b610a:	f7ff ffe1 	bl	b60d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b610e:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b6110:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b6112:	4620      	mov	r0, r4
   b6114:	f7ff ffdc 	bl	b60d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b6118:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b611a:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b611c:	4620      	mov	r0, r4
   b611e:	f7ff ffd7 	bl	b60d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b6122:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b6124:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b6126:	4620      	mov	r0, r4
   b6128:	f7ff ffd2 	bl	b60d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b612c:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b612e:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b6130:	4620      	mov	r0, r4
   b6132:	f7ff ffcd 	bl	b60d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b6136:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b6138:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b613a:	4620      	mov	r0, r4
   b613c:	f7ff ffc8 	bl	b60d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b6140:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b6142:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b6144:	4620      	mov	r0, r4
   b6146:	f7ff ffc3 	bl	b60d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b614a:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b614c:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b614e:	4620      	mov	r0, r4
   b6150:	f7ff ffbe 	bl	b60d0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b6154:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b6156:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b6158:	4620      	mov	r0, r4
   b615a:	f7ff fefb 	bl	b5f54 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b615e:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b6160:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b6164:	4620      	mov	r0, r4
   b6166:	f7ff ffb3 	bl	b60d0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b616a:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b616c:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b616e:	4620      	mov	r0, r4
   b6170:	f7ff fef0 	bl	b5f54 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b6174:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b6176:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b617a:	4620      	mov	r0, r4
   b617c:	f7ff feea 	bl	b5f54 <_ZN15Adafruit_BME2805read8Eh>
   b6180:	21e5      	movs	r1, #229	; 0xe5
   b6182:	4605      	mov	r5, r0
   b6184:	4620      	mov	r0, r4
   b6186:	f7ff fee5 	bl	b5f54 <_ZN15Adafruit_BME2805read8Eh>
   b618a:	f000 030f 	and.w	r3, r0, #15
   b618e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b6192:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b6194:	21e6      	movs	r1, #230	; 0xe6
   b6196:	4620      	mov	r0, r4
   b6198:	f7ff fedc 	bl	b5f54 <_ZN15Adafruit_BME2805read8Eh>
   b619c:	21e5      	movs	r1, #229	; 0xe5
   b619e:	4605      	mov	r5, r0
   b61a0:	4620      	mov	r0, r4
   b61a2:	f7ff fed7 	bl	b5f54 <_ZN15Adafruit_BME2805read8Eh>
   b61a6:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b61aa:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b61ae:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b61b0:	21e7      	movs	r1, #231	; 0xe7
   b61b2:	4620      	mov	r0, r4
   b61b4:	f7ff fece 	bl	b5f54 <_ZN15Adafruit_BME2805read8Eh>
   b61b8:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b61bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b61c0 <_ZN15Adafruit_BME2806read24Eh>:
{
   b61c0:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b61c2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b61c6:	3301      	adds	r3, #1
{
   b61c8:	b085      	sub	sp, #20
   b61ca:	4604      	mov	r4, r0
   b61cc:	460d      	mov	r5, r1
    if (_cs == -1) {
   b61ce:	d123      	bne.n	b6218 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b61d0:	7901      	ldrb	r1, [r0, #4]
   b61d2:	6800      	ldr	r0, [r0, #0]
   b61d4:	f003 fa24 	bl	b9620 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b61d8:	6820      	ldr	r0, [r4, #0]
   b61da:	6803      	ldr	r3, [r0, #0]
   b61dc:	4629      	mov	r1, r5
   b61de:	689b      	ldr	r3, [r3, #8]
   b61e0:	4798      	blx	r3
        _wire -> endTransmission();
   b61e2:	6820      	ldr	r0, [r4, #0]
   b61e4:	f003 fa24 	bl	b9630 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b61e8:	7921      	ldrb	r1, [r4, #4]
   b61ea:	6820      	ldr	r0, [r4, #0]
   b61ec:	2203      	movs	r2, #3
   b61ee:	f003 fa14 	bl	b961a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b61f2:	6820      	ldr	r0, [r4, #0]
   b61f4:	6803      	ldr	r3, [r0, #0]
   b61f6:	695b      	ldr	r3, [r3, #20]
   b61f8:	4798      	blx	r3
        value <<= 8;
   b61fa:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b61fc:	6820      	ldr	r0, [r4, #0]
   b61fe:	6803      	ldr	r3, [r0, #0]
   b6200:	695b      	ldr	r3, [r3, #20]
   b6202:	4798      	blx	r3
   b6204:	4328      	orrs	r0, r5
        value <<= 8;
   b6206:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b6208:	6820      	ldr	r0, [r4, #0]
   b620a:	6803      	ldr	r3, [r0, #0]
   b620c:	695b      	ldr	r3, [r3, #20]
   b620e:	4798      	blx	r3
   b6210:	4305      	orrs	r5, r0
}
   b6212:	4628      	mov	r0, r5
   b6214:	b005      	add	sp, #20
   b6216:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b6218:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b621c:	3301      	adds	r3, #1
   b621e:	d10c      	bne.n	b623a <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b6220:	4b1a      	ldr	r3, [pc, #104]	; (b628c <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b6222:	9300      	str	r3, [sp, #0]
   b6224:	2300      	movs	r3, #0
   b6226:	f88d 3004 	strb.w	r3, [sp, #4]
   b622a:	4b19      	ldr	r3, [pc, #100]	; (b6290 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b622c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b622e:	4668      	mov	r0, sp
   b6230:	2301      	movs	r3, #1
   b6232:	f8ad 300c 	strh.w	r3, [sp, #12]
   b6236:	f7ff fdb0 	bl	b5d9a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b623a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b623e:	2100      	movs	r1, #0
   b6240:	b280      	uxth	r0, r0
   b6242:	f003 fafa 	bl	b983a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b6246:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b624a:	4620      	mov	r0, r4
   b624c:	f7ff fdaf 	bl	b5dae <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b6250:	2100      	movs	r1, #0
   b6252:	4620      	mov	r0, r4
   b6254:	f7ff fdab 	bl	b5dae <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b6258:	2100      	movs	r1, #0
        value <<= 8;
   b625a:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b625c:	4620      	mov	r0, r4
   b625e:	f7ff fda6 	bl	b5dae <_ZN15Adafruit_BME2807spixferEh>
   b6262:	4328      	orrs	r0, r5
        value <<= 8;
   b6264:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b6266:	2100      	movs	r1, #0
   b6268:	4620      	mov	r0, r4
   b626a:	f7ff fda0 	bl	b5dae <_ZN15Adafruit_BME2807spixferEh>
   b626e:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b6270:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b6274:	2101      	movs	r1, #1
   b6276:	b280      	uxth	r0, r0
   b6278:	f003 fadf 	bl	b983a <digitalWrite>
        if (_sck == -1)
   b627c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b6280:	3301      	adds	r3, #1
   b6282:	d1c6      	bne.n	b6212 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b6284:	f7ff fd82 	bl	b5d8c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b6288:	e7c3      	b.n	b6212 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b628a:	bf00      	nop
   b628c:	000bd92c 	.word	0x000bd92c
   b6290:	0007a120 	.word	0x0007a120

000b6294 <_ZN15Adafruit_BME28015readTemperatureEv>:
{
   b6294:	b510      	push	{r4, lr}
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b6296:	21fa      	movs	r1, #250	; 0xfa
{
   b6298:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b629a:	f7ff ff91 	bl	b61c0 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b629e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b62a2:	d01f      	beq.n	b62e4 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b62a4:	8aa1      	ldrh	r1, [r4, #20]
    return T/100;
   b62a6:	ed9f 7a11 	vldr	s14, [pc, #68]	; b62ec <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b62aa:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b62ac:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b62b0:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b62b4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b62b8:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b62ba:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b62be:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b62c2:	131b      	asrs	r3, r3, #12
   b62c4:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b62c6:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b62c8:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b62cc:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b62ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b62d2:	3380      	adds	r3, #128	; 0x80
   b62d4:	121b      	asrs	r3, r3, #8
   b62d6:	ee07 3a90 	vmov	s15, r3
   b62da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b62de:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b62e2:	bd10      	pop	{r4, pc}
        return NAN;
   b62e4:	ed9f 0a02 	vldr	s0, [pc, #8]	; b62f0 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b62e8:	e7fb      	b.n	b62e2 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b62ea:	bf00      	nop
   b62ec:	42c80000 	.word	0x42c80000
   b62f0:	7fc00000 	.word	0x7fc00000

000b62f4 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
   b62f4:	b538      	push	{r3, r4, r5, lr}
   b62f6:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b62f8:	f7ff ffcc 	bl	b6294 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b62fc:	21fd      	movs	r1, #253	; 0xfd
   b62fe:	4620      	mov	r0, r4
   b6300:	f7ff fe84 	bl	b600c <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b6304:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b6308:	d038      	beq.n	b637c <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b630a:	68e1      	ldr	r1, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b630c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b6310:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b6314:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b6318:	0509      	lsls	r1, r1, #20
   b631a:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b631e:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b6322:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b6326:	13da      	asrs	r2, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b6328:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b632c:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b6330:	436b      	muls	r3, r5
   b6332:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b6334:	4369      	muls	r1, r5
   b6336:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b6338:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b633c:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b633e:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b6340:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b6344:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b6348:	434b      	muls	r3, r1
   b634a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b634e:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b6350:	4353      	muls	r3, r2
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b6352:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b6354:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b6358:	4352      	muls	r2, r2
   b635a:	11d2      	asrs	r2, r2, #7
   b635c:	434a      	muls	r2, r1
   b635e:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b6362:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b6366:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b636a:	bfa8      	it	ge
   b636c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b6370:	131b      	asrs	r3, r3, #12
   b6372:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b6376:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b637a:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b637c:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6384 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b6380:	e7fb      	b.n	b637a <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b6382:	bf00      	nop
   b6384:	7fc00000 	.word	0x7fc00000

000b6388 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b6388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b638c:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b638e:	f7ff ff81 	bl	b6294 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b6392:	21f7      	movs	r1, #247	; 0xf7
   b6394:	4628      	mov	r0, r5
   b6396:	f7ff ff13 	bl	b61c0 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b639a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b639e:	f000 80b6 	beq.w	b650e <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b63a2:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b63a4:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b63a8:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b63ac:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b63b0:	f14e 3eff 	adc.w	lr, lr, #4294967295
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b63b4:	17dc      	asrs	r4, r3, #31
   b63b6:	fb03 f20e 	mul.w	r2, r3, lr
   b63ba:	fb01 2204 	mla	r2, r1, r4, r2
   b63be:	fba3 3401 	umull	r3, r4, r3, r1
   b63c2:	4422      	add	r2, r4
   b63c4:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b63c6:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b63ca:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b63cc:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b63d0:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b63d4:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b63d8:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b63dc:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b63e0:	fb03 f608 	mul.w	r6, r3, r8
   b63e4:	fb07 660c 	mla	r6, r7, ip, r6
   b63e8:	fba3 3c07 	umull	r3, ip, r3, r7
   b63ec:	4466      	add	r6, ip
   b63ee:	0a1b      	lsrs	r3, r3, #8
   b63f0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b63f4:	191b      	adds	r3, r3, r4
   b63f6:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b63fa:	8b6e      	ldrh	r6, [r5, #26]
   b63fc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b6400:	fba3 3406 	umull	r3, r4, r3, r6
   b6404:	fb06 4402 	mla	r4, r6, r2, r4
   b6408:	17e3      	asrs	r3, r4, #31
   b640a:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b640c:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b6410:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b6414:	d07e      	beq.n	b6514 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b6416:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b641a:	fb04 f608 	mul.w	r6, r4, r8
   b641e:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b6422:	fb07 6609 	mla	r6, r7, r9, r6
   b6426:	fba4 4707 	umull	r4, r7, r4, r7
   b642a:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b642c:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b6430:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b6434:	fb07 fe0e 	mul.w	lr, r7, lr
   b6438:	fb01 ee08 	mla	lr, r1, r8, lr
   b643c:	fba7 7101 	umull	r7, r1, r7, r1
   b6440:	4471      	add	r1, lr
   b6442:	0449      	lsls	r1, r1, #17
   b6444:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b6448:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b644a:	047f      	lsls	r7, r7, #17
   b644c:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b644e:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b6452:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b6456:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b645a:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b645e:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b6462:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b6466:	07e4      	lsls	r4, r4, #31
   b6468:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b646a:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b646e:	f640 4135 	movw	r1, #3125	; 0xc35
   b6472:	eb60 0606 	sbc.w	r6, r0, r6
   b6476:	fba4 0401 	umull	r0, r4, r4, r1
   b647a:	fb01 4106 	mla	r1, r1, r6, r4
   b647e:	f006 fbb1 	bl	bcbe4 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b6482:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b6486:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b648a:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b648e:	0b43      	lsrs	r3, r0, #13
   b6490:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b6494:	fb02 f70c 	mul.w	r7, r2, ip
   b6498:	17d4      	asrs	r4, r2, #31
   b649a:	fb03 7704 	mla	r7, r3, r4, r7
   b649e:	fba2 2403 	umull	r2, r4, r2, r3
   b64a2:	443c      	add	r4, r7
   b64a4:	fb02 f70c 	mul.w	r7, r2, ip
   b64a8:	fb03 7704 	mla	r7, r3, r4, r7
   b64ac:	fba2 2303 	umull	r2, r3, r2, r3
   b64b0:	441f      	add	r7, r3
   b64b2:	0e53      	lsrs	r3, r2, #25
   b64b4:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b64b8:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b64ba:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b64be:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b64c2:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b64c4:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b64c8:	fb02 4100 	mla	r1, r2, r0, r4
   b64cc:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b64d0:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b64d4:	4431      	add	r1, r6
   b64d6:	0cc0      	lsrs	r0, r0, #19
   b64d8:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b64dc:	1818      	adds	r0, r3, r0
   b64de:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b64e2:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b64e6:	0a00      	lsrs	r0, r0, #8
   b64e8:	012d      	lsls	r5, r5, #4
   b64ea:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b64ee:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b64f2:	0124      	lsls	r4, r4, #4
   b64f4:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b64f6:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b64fa:	f006 fb35 	bl	bcb68 <__aeabi_l2f>
   b64fe:	ed9f 0a07 	vldr	s0, [pc, #28]	; b651c <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b6502:	ee07 0a90 	vmov	s15, r0
   b6506:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b650a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b650e:	ed9f 0a04 	vldr	s0, [pc, #16]	; b6520 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b6512:	e7fa      	b.n	b650a <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b6514:	ed9f 0a03 	vldr	s0, [pc, #12]	; b6524 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b6518:	e7f7      	b.n	b650a <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b651a:	bf00      	nop
   b651c:	3b800000 	.word	0x3b800000
   b6520:	7fc00000 	.word	0x7fc00000
   b6524:	00000000 	.word	0x00000000

000b6528 <_ZN15Adafruit_BME28012readAltitudeEf>:
{
   b6528:	b508      	push	{r3, lr}
   b652a:	ed2d 8b02 	vpush	{d8}
   b652e:	eeb0 8a40 	vmov.f32	s16, s0
    float atmospheric = readPressure() / 100.0F;
   b6532:	f7ff ff29 	bl	b6388 <_ZN15Adafruit_BME28012readPressureEv>
   b6536:	ed9f 7a16 	vldr	s14, [pc, #88]	; b6590 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   b653a:	eec0 7a07 	vdiv.f32	s15, s0, s14
      return pow(__type(__x), __type(__y));
   b653e:	eec7 7a88 	vdiv.f32	s15, s15, s16
   b6542:	ee17 0a90 	vmov	r0, s15
   b6546:	f005 fe9f 	bl	bc288 <__aeabi_f2d>
   b654a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; b6580 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   b654e:	ec41 0b10 	vmov	d0, r0, r1
   b6552:	f003 fabd 	bl	b9ad0 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   b6556:	490f      	ldr	r1, [pc, #60]	; (b6594 <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   b6558:	ec53 2b10 	vmov	r2, r3, d0
   b655c:	2000      	movs	r0, #0
   b655e:	f005 fd33 	bl	bbfc8 <__aeabi_dsub>
   b6562:	a309      	add	r3, pc, #36	; (adr r3, b6588 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   b6564:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6568:	f005 fee6 	bl	bc338 <__aeabi_dmul>
   b656c:	f006 f9dc 	bl	bc928 <__aeabi_d2f>
}
   b6570:	ecbd 8b02 	vpop	{d8}
   b6574:	ee00 0a10 	vmov	s0, r0
   b6578:	bd08      	pop	{r3, pc}
   b657a:	bf00      	nop
   b657c:	f3af 8000 	nop.w
   b6580:	1a36e2eb 	.word	0x1a36e2eb
   b6584:	3fc85bc0 	.word	0x3fc85bc0
   b6588:	00000000 	.word	0x00000000
   b658c:	40e5a540 	.word	0x40e5a540
   b6590:	42c80000 	.word	0x42c80000
   b6594:	3ff00000 	.word	0x3ff00000

000b6598 <_ZN15Adafruit_BME2804initEv>:
{
   b6598:	b530      	push	{r4, r5, lr}
   b659a:	4604      	mov	r4, r0
    if (_cs == -1) {
   b659c:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b65a0:	1c42      	adds	r2, r0, #1
{
   b65a2:	b085      	sub	sp, #20
    if (_cs == -1) {
   b65a4:	d119      	bne.n	b65da <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b65a6:	6820      	ldr	r0, [r4, #0]
   b65a8:	f003 f808 	bl	b95bc <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b65ac:	21d0      	movs	r1, #208	; 0xd0
   b65ae:	4620      	mov	r0, r4
   b65b0:	f7ff fcd0 	bl	b5f54 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b65b4:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b65b6:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b65b8:	d145      	bne.n	b6646 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b65ba:	4620      	mov	r0, r4
   b65bc:	22b6      	movs	r2, #182	; 0xb6
   b65be:	21e0      	movs	r1, #224	; 0xe0
   b65c0:	f7ff fc2c 	bl	b5e1c <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b65c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b65c8:	f002 fd44 	bl	b9054 <delay>
    while (isReadingCalibration())
   b65cc:	4620      	mov	r0, r4
   b65ce:	f7ff fd15 	bl	b5ffc <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b65d2:	4605      	mov	r5, r0
   b65d4:	b328      	cbz	r0, b6622 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b65d6:	2064      	movs	r0, #100	; 0x64
   b65d8:	e7f6      	b.n	b65c8 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b65da:	2101      	movs	r1, #1
   b65dc:	b280      	uxth	r0, r0
   b65de:	f003 f92c 	bl	b983a <digitalWrite>
        pinMode(_cs, OUTPUT);
   b65e2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b65e6:	2101      	movs	r1, #1
   b65e8:	b280      	uxth	r0, r0
   b65ea:	f003 f915 	bl	b9818 <pinMode>
        if (_sck == -1) {
   b65ee:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b65f2:	1c43      	adds	r3, r0, #1
   b65f4:	d104      	bne.n	b6600 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b65f6:	f7ff fbad 	bl	b5d54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b65fa:	f002 f9d1 	bl	b89a0 <_ZN8SPIClass5beginEv>
    }
   b65fe:	e7d5      	b.n	b65ac <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b6600:	2101      	movs	r1, #1
   b6602:	b280      	uxth	r0, r0
   b6604:	f003 f908 	bl	b9818 <pinMode>
            pinMode(_mosi, OUTPUT);
   b6608:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b660c:	2101      	movs	r1, #1
   b660e:	b280      	uxth	r0, r0
   b6610:	f003 f902 	bl	b9818 <pinMode>
            pinMode(_miso, INPUT);
   b6614:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b6618:	2100      	movs	r1, #0
   b661a:	b280      	uxth	r0, r0
   b661c:	f003 f8fc 	bl	b9818 <pinMode>
   b6620:	e7c4      	b.n	b65ac <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b6622:	4620      	mov	r0, r4
   b6624:	f7ff fd5a 	bl	b60dc <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b6628:	2305      	movs	r3, #5
   b662a:	9300      	str	r3, [sp, #0]
   b662c:	461a      	mov	r2, r3
   b662e:	2103      	movs	r1, #3
   b6630:	4620      	mov	r0, r4
   b6632:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b6636:	f7ff fc43 	bl	b5ec0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b663a:	2064      	movs	r0, #100	; 0x64
   b663c:	f002 fd0a 	bl	b9054 <delay>
    return true;
   b6640:	2001      	movs	r0, #1
}
   b6642:	b005      	add	sp, #20
   b6644:	bd30      	pop	{r4, r5, pc}
        return false;
   b6646:	2000      	movs	r0, #0
   b6648:	e7fb      	b.n	b6642 <_ZN15Adafruit_BME2804initEv+0xaa>

000b664a <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b664a:	2377      	movs	r3, #119	; 0x77
{
   b664c:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b664e:	7103      	strb	r3, [r0, #4]
{
   b6650:	4604      	mov	r4, r0
	_wire = &Wire;
   b6652:	f003 f9a3 	bl	b999c <_Z19__fetch_global_Wirev>
   b6656:	6020      	str	r0, [r4, #0]
	status = init();
   b6658:	4620      	mov	r0, r4
   b665a:	f7ff ff9d 	bl	b6598 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b665e:	b930      	cbnz	r0, b666e <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b6660:	2376      	movs	r3, #118	; 0x76
   b6662:	7123      	strb	r3, [r4, #4]
 		status = init();
   b6664:	4620      	mov	r0, r4
}
   b6666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b666a:	f7ff bf95 	b.w	b6598 <_ZN15Adafruit_BME2804initEv>
}
   b666e:	bd10      	pop	{r4, pc}

000b6670 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   b6670:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   b6672:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
   b6674:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   b6678:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   b667a:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   b667e:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   b6682:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   b6684:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   b6686:	7382      	strb	r2, [r0, #14]
  _width = width;
   b6688:	7303      	strb	r3, [r0, #12]
}
   b668a:	bd30      	pop	{r4, r5, pc}

000b668c <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b668c:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b668e:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b6690:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b6692:	b085      	sub	sp, #20
   b6694:	4603      	mov	r3, r0

  if (_i2cdevice) {
   b6696:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b6698:	f88d 400c 	strb.w	r4, [sp, #12]
   b669c:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b669e:	460e      	mov	r6, r1
   b66a0:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   b66a2:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   b66a6:	b140      	cbz	r0, b66ba <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b66a8:	7b5b      	ldrb	r3, [r3, #13]
   b66aa:	9301      	str	r3, [sp, #4]
   b66ac:	ab03      	add	r3, sp, #12
   b66ae:	9300      	str	r3, [sp, #0]
   b66b0:	2301      	movs	r3, #1
   b66b2:	f000 fa3b 	bl	b6b2c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   b66b6:	b005      	add	sp, #20
   b66b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   b66ba:	6858      	ldr	r0, [r3, #4]
   b66bc:	2800      	cmp	r0, #0
   b66be:	d0fa      	beq.n	b66b6 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b66c0:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b66c4:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b66c8:	f1be 0f03 	cmp.w	lr, #3
   b66cc:	d10c      	bne.n	b66e8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b66ce:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   b66d2:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b66d6:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   b66d8:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   b66dc:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b66e0:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b66e2:	f000 f992 	bl	b6a0a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b66e6:	e7e6      	b.n	b66b6 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b66e8:	f1be 0f00 	cmp.w	lr, #0
   b66ec:	d109      	bne.n	b6702 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   b66ee:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   b66f2:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b66f6:	f8cd c000 	str.w	ip, [sp]
   b66fa:	ab03      	add	r3, sp, #12
   b66fc:	463a      	mov	r2, r7
   b66fe:	4631      	mov	r1, r6
   b6700:	e7ef      	b.n	b66e2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b6702:	f1be 0f02 	cmp.w	lr, #2
   b6706:	d102      	bne.n	b670e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   b6708:	f064 047f 	orn	r4, r4, #127	; 0x7f
   b670c:	e7f1      	b.n	b66f2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b670e:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   b6712:	bf01      	itttt	eq
   b6714:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   b6718:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   b671c:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   b6720:	f88d 300c 	strbeq.w	r3, [sp, #12]
   b6724:	e7e7      	b.n	b66f6 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000b6726 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   b6726:	b4f0      	push	{r4, r5, r6, r7}
   b6728:	460b      	mov	r3, r1
  if (numbytes == 0) {
   b672a:	b902      	cbnz	r2, b672e <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   b672c:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   b672e:	2a04      	cmp	r2, #4
   b6730:	d814      	bhi.n	b675c <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   b6732:	f100 050f 	add.w	r5, r0, #15
   b6736:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   b6738:	1884      	adds	r4, r0, r2
   b673a:	4629      	mov	r1, r5
   b673c:	4284      	cmp	r4, r0
   b673e:	d009      	beq.n	b6754 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   b6740:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   b6742:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   b6744:	b927      	cbnz	r7, b6750 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   b6746:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   b6748:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   b674a:	3501      	adds	r5, #1
   b674c:	3c01      	subs	r4, #1
   b674e:	e7f5      	b.n	b673c <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   b6750:	73a6      	strb	r6, [r4, #14]
   b6752:	e7f9      	b.n	b6748 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   b6754:	4620      	mov	r0, r4
}
   b6756:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   b6758:	f7ff bf98 	b.w	b668c <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   b675c:	2000      	movs	r0, #0
   b675e:	bcf0      	pop	{r4, r5, r6, r7}
   b6760:	4770      	bx	lr

000b6762 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b6762:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b6764:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b6766:	7a85      	ldrb	r5, [r0, #10]
   b6768:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b676c:	4604      	mov	r4, r0

  if (_i2cdevice) {
   b676e:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b6770:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b6772:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   b6774:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   b6778:	b140      	cbz	r0, b678c <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b677a:	2100      	movs	r1, #0
   b677c:	e9cd 2100 	strd	r2, r1, [sp]
   b6780:	a903      	add	r1, sp, #12
   b6782:	7b62      	ldrb	r2, [r4, #13]
   b6784:	f000 fa40 	bl	b6c08 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   b6788:	b004      	add	sp, #16
   b678a:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   b678c:	6860      	ldr	r0, [r4, #4]
   b678e:	2800      	cmp	r0, #0
   b6790:	d0fa      	beq.n	b6788 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b6792:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b6794:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b6796:	2903      	cmp	r1, #3
   b6798:	d10d      	bne.n	b67b6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   b679a:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   b679e:	21ff      	movs	r1, #255	; 0xff
   b67a0:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   b67a4:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   b67a8:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   b67ac:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b67ae:	a903      	add	r1, sp, #12
   b67b0:	f000 f95d 	bl	b6a6e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   b67b4:	e7e8      	b.n	b6788 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b67b6:	b941      	cbnz	r1, b67ca <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   b67b8:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   b67bc:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b67c0:	21ff      	movs	r1, #255	; 0xff
   b67c2:	e9cd 2100 	strd	r2, r1, [sp]
   b67c6:	4622      	mov	r2, r4
   b67c8:	e7f1      	b.n	b67ae <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b67ca:	2902      	cmp	r1, #2
   b67cc:	d102      	bne.n	b67d4 <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   b67ce:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   b67d2:	e7f3      	b.n	b67bc <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b67d4:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   b67d6:	bf02      	ittt	eq
   b67d8:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   b67dc:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   b67e0:	f88d 100c 	strbeq.w	r1, [sp, #12]
   b67e4:	e7ec      	b.n	b67c0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000b67e6 <_ZN23Adafruit_BusIO_Register4readEPt>:
 *    @brief  Read 2 bytes of data from the register location
 *    @param  value Pointer to uint16_t variable to read into
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint16_t *value) {
   b67e6:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, 2)) {
   b67e8:	2202      	movs	r2, #2
bool Adafruit_BusIO_Register::read(uint16_t *value) {
   b67ea:	460d      	mov	r5, r1
  if (!read(_buffer, 2)) {
   b67ec:	f100 010f 	add.w	r1, r0, #15
bool Adafruit_BusIO_Register::read(uint16_t *value) {
   b67f0:	4604      	mov	r4, r0
  if (!read(_buffer, 2)) {
   b67f2:	f7ff ffb6 	bl	b6762 <_ZN23Adafruit_BusIO_Register4readEPhh>
   b67f6:	b138      	cbz	r0, b6808 <_ZN23Adafruit_BusIO_Register4readEPt+0x22>
    return false;
  }

  if (_byteorder == LSBFIRST) {
   b67f8:	7ba3      	ldrb	r3, [r4, #14]
   b67fa:	b933      	cbnz	r3, b680a <_ZN23Adafruit_BusIO_Register4readEPt+0x24>
    *value = _buffer[1];
   b67fc:	7c23      	ldrb	r3, [r4, #16]
    *value <<= 8;
   b67fe:	021b      	lsls	r3, r3, #8
   b6800:	802b      	strh	r3, [r5, #0]
    *value |= _buffer[0];
   b6802:	7be2      	ldrb	r2, [r4, #15]
  } else {
    *value = _buffer[0];
    *value <<= 8;
    *value |= _buffer[1];
   b6804:	4313      	orrs	r3, r2
   b6806:	802b      	strh	r3, [r5, #0]
  }
  return true;
}
   b6808:	bd38      	pop	{r3, r4, r5, pc}
    *value = _buffer[0];
   b680a:	7be3      	ldrb	r3, [r4, #15]
    *value <<= 8;
   b680c:	021b      	lsls	r3, r3, #8
   b680e:	802b      	strh	r3, [r5, #0]
    *value |= _buffer[1];
   b6810:	7c22      	ldrb	r2, [r4, #16]
   b6812:	e7f7      	b.n	b6804 <_ZN23Adafruit_BusIO_Register4readEPt+0x1e>

000b6814 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   b6814:	b510      	push	{r4, lr}
   b6816:	4604      	mov	r4, r0
  if (_spiSetting) {
   b6818:	6840      	ldr	r0, [r0, #4]
   b681a:	b110      	cbz	r0, b6822 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   b681c:	6803      	ldr	r3, [r0, #0]
   b681e:	689b      	ldr	r3, [r3, #8]
   b6820:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   b6822:	4620      	mov	r0, r4
   b6824:	bd10      	pop	{r4, pc}

000b6826 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   b6826:	b538      	push	{r3, r4, r5, lr}
   b6828:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   b682a:	f990 000e 	ldrsb.w	r0, [r0, #14]
   b682e:	2101      	movs	r1, #1
   b6830:	b280      	uxth	r0, r0
   b6832:	f002 fff1 	bl	b9818 <pinMode>
  digitalWrite(_cs, HIGH);
   b6836:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b683a:	2101      	movs	r1, #1
   b683c:	b280      	uxth	r0, r0
   b683e:	f002 fffc 	bl	b983a <digitalWrite>

  if (_spi) { // hardware SPI
   b6842:	6825      	ldr	r5, [r4, #0]
   b6844:	b135      	cbz	r5, b6854 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   b6846:	4628      	mov	r0, r5
   b6848:	f002 f8aa 	bl	b89a0 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   b684c:	2001      	movs	r0, #1
   b684e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   b6852:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   b6854:	f994 000f 	ldrsb.w	r0, [r4, #15]
   b6858:	2101      	movs	r1, #1
   b685a:	b280      	uxth	r0, r0
   b685c:	f002 ffdc 	bl	b9818 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   b6860:	7b63      	ldrb	r3, [r4, #13]
   b6862:	f994 000f 	ldrsb.w	r0, [r4, #15]
   b6866:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   b6868:	bf94      	ite	ls
   b686a:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   b686c:	2101      	movhi	r1, #1
   b686e:	b280      	uxth	r0, r0
   b6870:	f002 ffe3 	bl	b983a <digitalWrite>
    if (_mosi != -1) {
   b6874:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b6878:	1c42      	adds	r2, r0, #1
   b687a:	d009      	beq.n	b6890 <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   b687c:	2101      	movs	r1, #1
   b687e:	b280      	uxth	r0, r0
   b6880:	f002 ffca 	bl	b9818 <pinMode>
      digitalWrite(_mosi, HIGH);
   b6884:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b6888:	2101      	movs	r1, #1
   b688a:	b280      	uxth	r0, r0
   b688c:	f002 ffd5 	bl	b983a <digitalWrite>
    if (_miso != -1) {
   b6890:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b6894:	1c43      	adds	r3, r0, #1
   b6896:	d0d9      	beq.n	b684c <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   b6898:	2100      	movs	r1, #0
   b689a:	b280      	uxth	r0, r0
   b689c:	f002 ffbc 	bl	b9818 <pinMode>
   b68a0:	e7d4      	b.n	b684c <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000b68a4 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b68a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b68a8:	4604      	mov	r4, r0
  if (_spi) {
   b68aa:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b68ac:	b085      	sub	sp, #20
   b68ae:	460d      	mov	r5, r1
  if (_spi) {
   b68b0:	b140      	cbz	r0, b68c4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   b68b2:	2300      	movs	r3, #0
   b68b4:	9300      	str	r3, [sp, #0]
   b68b6:	4613      	mov	r3, r2
   b68b8:	460a      	mov	r2, r1
   b68ba:	f002 f913 	bl	b8ae4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   b68be:	b005      	add	sp, #20
   b68c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   b68c4:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b68c6:	68a0      	ldr	r0, [r4, #8]
   b68c8:	4f48      	ldr	r7, [pc, #288]	; (b69ec <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   b68ca:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   b68ce:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b68d0:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   b68d2:	bf0c      	ite	eq
   b68d4:	f04f 0b01 	moveq.w	fp, #1
   b68d8:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b68dc:	ea1b 0f03 	tst.w	fp, r3
   b68e0:	eb01 0302 	add.w	r3, r1, r2
   b68e4:	bf0c      	ite	eq
   b68e6:	f04f 0901 	moveq.w	r9, #1
   b68ea:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b68ee:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   b68f0:	9303      	str	r3, [sp, #12]
   b68f2:	9b03      	ldr	r3, [sp, #12]
   b68f4:	42ab      	cmp	r3, r5
   b68f6:	d0e2      	beq.n	b68be <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   b68f8:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   b68fc:	465e      	mov	r6, fp
    uint8_t reply = 0;
   b68fe:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   b6902:	b117      	cbz	r7, b690a <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b6904:	4638      	mov	r0, r7
   b6906:	f001 fd89 	bl	b841c <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   b690a:	7b63      	ldrb	r3, [r4, #13]
   b690c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   b6910:	d141      	bne.n	b6996 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b6912:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b6916:	1c5a      	adds	r2, r3, #1
   b6918:	d00f      	beq.n	b693a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   b691a:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b691e:	bf14      	ite	ne
   b6920:	2301      	movne	r3, #1
   b6922:	2300      	moveq	r3, #0
   b6924:	454b      	cmp	r3, r9
   b6926:	d008      	beq.n	b693a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   b6928:	6963      	ldr	r3, [r4, #20]
   b692a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b692c:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   b692e:	2900      	cmp	r1, #0
   b6930:	d02c      	beq.n	b698c <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   b6932:	4302      	orrs	r2, r0
   b6934:	601a      	str	r2, [r3, #0]
   b6936:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   b693a:	69a1      	ldr	r1, [r4, #24]
   b693c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b693e:	680a      	ldr	r2, [r1, #0]
   b6940:	4313      	orrs	r3, r2
   b6942:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b6944:	b117      	cbz	r7, b694c <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   b6946:	4638      	mov	r0, r7
   b6948:	f001 fd68 	bl	b841c <HAL_Delay_Microseconds>
        if (_miso != -1) {
   b694c:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b6950:	3301      	adds	r3, #1
   b6952:	d006      	beq.n	b6962 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   b6954:	69e3      	ldr	r3, [r4, #28]
   b6956:	681a      	ldr	r2, [r3, #0]
   b6958:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b695a:	421a      	tst	r2, r3
            reply |= b;
   b695c:	bf18      	it	ne
   b695e:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   b6962:	69a1      	ldr	r1, [r4, #24]
   b6964:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6966:	680a      	ldr	r2, [r1, #0]
   b6968:	ea22 0303 	bic.w	r3, r2, r3
   b696c:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   b696e:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b6972:	3301      	adds	r3, #1
        buffer[i] = reply;
   b6974:	bf18      	it	ne
   b6976:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   b697a:	7b23      	ldrb	r3, [r4, #12]
   b697c:	2b00      	cmp	r3, #0
   b697e:	d132      	bne.n	b69e6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   b6980:	0076      	lsls	r6, r6, #1
   b6982:	b2f6      	uxtb	r6, r6
   b6984:	2e00      	cmp	r6, #0
   b6986:	d1bc      	bne.n	b6902 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   b6988:	3501      	adds	r5, #1
   b698a:	e7b2      	b.n	b68f2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   b698c:	ea22 0200 	bic.w	r2, r2, r0
   b6990:	601a      	str	r2, [r3, #0]
   b6992:	4689      	mov	r9, r1
   b6994:	e7d1      	b.n	b693a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   b6996:	69a1      	ldr	r1, [r4, #24]
   b6998:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b699a:	680a      	ldr	r2, [r1, #0]
   b699c:	4313      	orrs	r3, r2
   b699e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b69a0:	b117      	cbz	r7, b69a8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   b69a2:	4638      	mov	r0, r7
   b69a4:	f001 fd3a 	bl	b841c <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   b69a8:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b69ac:	3301      	adds	r3, #1
   b69ae:	d008      	beq.n	b69c2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   b69b0:	6963      	ldr	r3, [r4, #20]
   b69b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b69b4:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   b69b6:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   b69ba:	bf14      	ite	ne
   b69bc:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   b69be:	438a      	biceq	r2, r1
   b69c0:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   b69c2:	69a1      	ldr	r1, [r4, #24]
   b69c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b69c6:	680a      	ldr	r2, [r1, #0]
   b69c8:	ea22 0303 	bic.w	r3, r2, r3
   b69cc:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   b69ce:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b69d2:	3301      	adds	r3, #1
   b69d4:	d0cb      	beq.n	b696e <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   b69d6:	69e3      	ldr	r3, [r4, #28]
   b69d8:	681a      	ldr	r2, [r3, #0]
   b69da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b69dc:	421a      	tst	r2, r3
            reply |= b;
   b69de:	bf18      	it	ne
   b69e0:	ea46 0808 	orrne.w	r8, r6, r8
   b69e4:	e7c3      	b.n	b696e <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   b69e6:	0876      	lsrs	r6, r6, #1
   b69e8:	e7cc      	b.n	b6984 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   b69ea:	bf00      	nop
   b69ec:	0007a120 	.word	0x0007a120

000b69f0 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   b69f0:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   b69f2:	2201      	movs	r2, #1
  uint8_t data = send;
   b69f4:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   b69f8:	f10d 0107 	add.w	r1, sp, #7
   b69fc:	f7ff ff52 	bl	b68a4 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   b6a00:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b6a04:	b003      	add	sp, #12
   b6a06:	f85d fb04 	ldr.w	pc, [sp], #4

000b6a0a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b6a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6a0e:	4604      	mov	r4, r0
  if (_spi) {
   b6a10:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b6a12:	460e      	mov	r6, r1
   b6a14:	4617      	mov	r7, r2
   b6a16:	461d      	mov	r5, r3
  if (_spi) {
   b6a18:	b110      	cbz	r0, b6a20 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   b6a1a:	6861      	ldr	r1, [r4, #4]
   b6a1c:	f001 ffee 	bl	b89fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   b6a20:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b6a24:	2100      	movs	r1, #0
   b6a26:	b280      	uxth	r0, r0
   b6a28:	f002 ff07 	bl	b983a <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   b6a2c:	9b06      	ldr	r3, [sp, #24]
   b6a2e:	eb05 0803 	add.w	r8, r5, r3
   b6a32:	4545      	cmp	r5, r8
   b6a34:	d108      	bne.n	b6a48 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   b6a36:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   b6a38:	42b7      	cmp	r7, r6
   b6a3a:	d00b      	beq.n	b6a54 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   b6a3c:	f816 1b01 	ldrb.w	r1, [r6], #1
   b6a40:	4620      	mov	r0, r4
   b6a42:	f7ff ffd5 	bl	b69f0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   b6a46:	e7f7      	b.n	b6a38 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   b6a48:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6a4c:	4620      	mov	r0, r4
   b6a4e:	f7ff ffcf 	bl	b69f0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   b6a52:	e7ee      	b.n	b6a32 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   b6a54:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b6a58:	2101      	movs	r1, #1
   b6a5a:	b280      	uxth	r0, r0
   b6a5c:	f002 feed 	bl	b983a <digitalWrite>

  if (_spi) {
   b6a60:	6820      	ldr	r0, [r4, #0]
   b6a62:	b108      	cbz	r0, b6a68 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   b6a64:	f001 ffb0 	bl	b89c8 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b6a68:	2001      	movs	r0, #1
   b6a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6a6e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   b6a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6a72:	4604      	mov	r4, r0
  if (_spi) {
   b6a74:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   b6a76:	f89d 801c 	ldrb.w	r8, [sp, #28]
   b6a7a:	460e      	mov	r6, r1
   b6a7c:	4617      	mov	r7, r2
   b6a7e:	461d      	mov	r5, r3
  if (_spi) {
   b6a80:	b110      	cbz	r0, b6a88 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   b6a82:	6861      	ldr	r1, [r4, #4]
   b6a84:	f001 ffba 	bl	b89fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   b6a88:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b6a8c:	2100      	movs	r1, #0
   b6a8e:	b280      	uxth	r0, r0
   b6a90:	f002 fed3 	bl	b983a <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   b6a94:	4437      	add	r7, r6
   b6a96:	42be      	cmp	r6, r7
   b6a98:	d10a      	bne.n	b6ab0 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   b6a9a:	9b06      	ldr	r3, [sp, #24]
   b6a9c:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   b6a9e:	42ae      	cmp	r6, r5
   b6aa0:	d00c      	beq.n	b6abc <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   b6aa2:	4641      	mov	r1, r8
   b6aa4:	4620      	mov	r0, r4
   b6aa6:	f7ff ffa3 	bl	b69f0 <_ZN18Adafruit_SPIDevice8transferEh>
   b6aaa:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   b6aae:	e7f6      	b.n	b6a9e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   b6ab0:	f816 1b01 	ldrb.w	r1, [r6], #1
   b6ab4:	4620      	mov	r0, r4
   b6ab6:	f7ff ff9b 	bl	b69f0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   b6aba:	e7ec      	b.n	b6a96 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   b6abc:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b6ac0:	2101      	movs	r1, #1
   b6ac2:	b280      	uxth	r0, r0
   b6ac4:	f002 feb9 	bl	b983a <digitalWrite>

  if (_spi) {
   b6ac8:	6820      	ldr	r0, [r4, #0]
   b6aca:	b108      	cbz	r0, b6ad0 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   b6acc:	f001 ff7c 	bl	b89c8 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   b6ad0:	2001      	movs	r0, #1
   b6ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6ad6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b6ad6:	6042      	str	r2, [r0, #4]
  _begun = false;
   b6ad8:	2200      	movs	r2, #0
   b6ada:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b6adc:	2220      	movs	r2, #32
  _addr = addr;
   b6ade:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b6ae0:	60c2      	str	r2, [r0, #12]
#endif
}
   b6ae2:	4770      	bx	lr

000b6ae4 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b6ae4:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b6ae6:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b6ae8:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b6aea:	b153      	cbz	r3, b6b02 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b6aec:	7821      	ldrb	r1, [r4, #0]
   b6aee:	6860      	ldr	r0, [r4, #4]
   b6af0:	f002 fd96 	bl	b9620 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b6af4:	6860      	ldr	r0, [r4, #4]
   b6af6:	f002 fd9b 	bl	b9630 <_ZN7TwoWire15endTransmissionEv>
   b6afa:	fab0 f080 	clz	r0, r0
   b6afe:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   b6b00:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b6b02:	2101      	movs	r1, #1
   b6b04:	f000 f803 	bl	b6b0e <_ZN18Adafruit_I2CDevice5beginEb>
   b6b08:	2800      	cmp	r0, #0
   b6b0a:	d1ef      	bne.n	b6aec <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b6b0c:	e7f8      	b.n	b6b00 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b6b0e <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b6b0e:	b538      	push	{r3, r4, r5, lr}
   b6b10:	4604      	mov	r4, r0
  _wire->begin();
   b6b12:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b6b14:	460d      	mov	r5, r1
  _wire->begin();
   b6b16:	f002 fd51 	bl	b95bc <_ZN7TwoWire5beginEv>
  _begun = true;
   b6b1a:	2001      	movs	r0, #1
   b6b1c:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b6b1e:	b125      	cbz	r5, b6b2a <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b6b20:	4620      	mov	r0, r4
}
   b6b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b6b26:	f7ff bfdd 	b.w	b6ae4 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b6b2a:	bd38      	pop	{r3, r4, r5, pc}

000b6b2c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b6b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6b30:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b6b34:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   b6b36:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   b6b38:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   b6b3a:	4432      	add	r2, r6
   b6b3c:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   b6b3e:	4604      	mov	r4, r0
   b6b40:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   b6b42:	d902      	bls.n	b6b4a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b6b44:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   b6b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b6b4a:	7801      	ldrb	r1, [r0, #0]
   b6b4c:	6840      	ldr	r0, [r0, #4]
   b6b4e:	f002 fd67 	bl	b9620 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b6b52:	b97e      	cbnz	r6, b6b74 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   b6b54:	6860      	ldr	r0, [r4, #4]
   b6b56:	6803      	ldr	r3, [r0, #0]
   b6b58:	462a      	mov	r2, r5
   b6b5a:	68db      	ldr	r3, [r3, #12]
   b6b5c:	4641      	mov	r1, r8
   b6b5e:	4798      	blx	r3
   b6b60:	4285      	cmp	r5, r0
   b6b62:	d1ef      	bne.n	b6b44 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   b6b64:	6860      	ldr	r0, [r4, #4]
   b6b66:	4639      	mov	r1, r7
   b6b68:	f002 fd5e 	bl	b9628 <_ZN7TwoWire15endTransmissionEh>
   b6b6c:	fab0 f080 	clz	r0, r0
   b6b70:	0940      	lsrs	r0, r0, #5
   b6b72:	e7e8      	b.n	b6b46 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b6b74:	f1b9 0f00 	cmp.w	r9, #0
   b6b78:	d0ec      	beq.n	b6b54 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b6b7a:	6860      	ldr	r0, [r4, #4]
   b6b7c:	6803      	ldr	r3, [r0, #0]
   b6b7e:	4632      	mov	r2, r6
   b6b80:	68db      	ldr	r3, [r3, #12]
   b6b82:	4649      	mov	r1, r9
   b6b84:	4798      	blx	r3
   b6b86:	4286      	cmp	r6, r0
   b6b88:	d1dc      	bne.n	b6b44 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   b6b8a:	e7e3      	b.n	b6b54 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000b6b8c <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   b6b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6b90:	4615      	mov	r5, r2
   b6b92:	4604      	mov	r4, r0
   b6b94:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   b6b96:	b2d2      	uxtb	r2, r2
   b6b98:	7801      	ldrb	r1, [r0, #0]
   b6b9a:	6840      	ldr	r0, [r0, #4]
   b6b9c:	f002 fd2b 	bl	b95f6 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   b6ba0:	4285      	cmp	r5, r0
   b6ba2:	d10d      	bne.n	b6bc0 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   b6ba4:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   b6ba6:	fa1f f887 	uxth.w	r8, r7
   b6baa:	45a8      	cmp	r8, r5
   b6bac:	f107 0701 	add.w	r7, r7, #1
   b6bb0:	d209      	bcs.n	b6bc6 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   b6bb2:	6860      	ldr	r0, [r4, #4]
   b6bb4:	6803      	ldr	r3, [r0, #0]
   b6bb6:	695b      	ldr	r3, [r3, #20]
   b6bb8:	4798      	blx	r3
   b6bba:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   b6bbe:	e7f2      	b.n	b6ba6 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   b6bc0:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b6bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6bc6:	2001      	movs	r0, #1
   b6bc8:	e7fb      	b.n	b6bc2 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000b6bca <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b6bca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6bce:	4607      	mov	r7, r0
   b6bd0:	4688      	mov	r8, r1
   b6bd2:	4616      	mov	r6, r2
   b6bd4:	4699      	mov	r9, r3
  size_t pos = 0;
   b6bd6:	2500      	movs	r5, #0
  while (pos < len) {
   b6bd8:	42b5      	cmp	r5, r6
   b6bda:	d212      	bcs.n	b6c02 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   b6bdc:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   b6bde:	1b74      	subs	r4, r6, r5
   b6be0:	4294      	cmp	r4, r2
   b6be2:	bf28      	it	cs
   b6be4:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   b6be6:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   b6be8:	42ab      	cmp	r3, r5
   b6bea:	bf94      	ite	ls
   b6bec:	464b      	movls	r3, r9
   b6bee:	2300      	movhi	r3, #0
   b6bf0:	4622      	mov	r2, r4
   b6bf2:	eb08 0105 	add.w	r1, r8, r5
   b6bf6:	4638      	mov	r0, r7
   b6bf8:	f7ff ffc8 	bl	b6b8c <_ZN18Adafruit_I2CDevice5_readEPhjb>
   b6bfc:	b110      	cbz	r0, b6c04 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   b6bfe:	4425      	add	r5, r4
  while (pos < len) {
   b6c00:	e7ea      	b.n	b6bd8 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   b6c02:	2001      	movs	r0, #1
}
   b6c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6c08 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   b6c08:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6c0a:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   b6c0c:	2300      	movs	r3, #0
   b6c0e:	e9cd 3300 	strd	r3, r3, [sp]
   b6c12:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   b6c16:	9e06      	ldr	r6, [sp, #24]
   b6c18:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   b6c1a:	f7ff ff87 	bl	b6b2c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   b6c1e:	b140      	cbz	r0, b6c32 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   b6c20:	2301      	movs	r3, #1
   b6c22:	4632      	mov	r2, r6
   b6c24:	4629      	mov	r1, r5
   b6c26:	4620      	mov	r0, r4
}
   b6c28:	b002      	add	sp, #8
   b6c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   b6c2e:	f7ff bfcc 	b.w	b6bca <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   b6c32:	b002      	add	sp, #8
   b6c34:	bd70      	pop	{r4, r5, r6, pc}

000b6c36 <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   b6c36:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b6c38:	6840      	ldr	r0, [r0, #4]
   b6c3a:	f002 fcbb 	bl	b95b4 <_ZN7TwoWire8setSpeedEm>
  return true;
#else
  (void)desiredclk;
  return false;
#endif
}
   b6c3e:	2001      	movs	r0, #1
   b6c40:	bd08      	pop	{r3, pc}

000b6c42 <_ZN15Adafruit_INA219C1Eh>:

/*!
 *  @brief  Instantiates a new INA219 class
 *  @param addr the I2C address the device can be found on. Default is 0x40
 */
Adafruit_INA219::Adafruit_INA219(uint8_t addr) {
   b6c42:	2200      	movs	r2, #0
   b6c44:	6002      	str	r2, [r0, #0]
  ina219_i2caddr = addr;
  ina219_currentDivider_mA = 0;
   b6c46:	60c2      	str	r2, [r0, #12]
  ina219_powerMultiplier_mW = 0.0f;
   b6c48:	2200      	movs	r2, #0
  ina219_i2caddr = addr;
   b6c4a:	7141      	strb	r1, [r0, #5]
  ina219_powerMultiplier_mW = 0.0f;
   b6c4c:	6102      	str	r2, [r0, #16]
}
   b6c4e:	4770      	bx	lr

000b6c50 <_ZN15Adafruit_INA21917getBusVoltage_rawEv>:

/*!
 *  @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
 *  @return the raw bus voltage reading
 */
int16_t Adafruit_INA219::getBusVoltage_raw() {
   b6c50:	b510      	push	{r4, lr}
  uint16_t value;

  Adafruit_BusIO_Register bus_voltage_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
   b6c52:	2301      	movs	r3, #1
int16_t Adafruit_INA219::getBusVoltage_raw() {
   b6c54:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
   b6c56:	e9cd 3300 	strd	r3, r3, [sp]
   b6c5a:	2302      	movs	r3, #2
   b6c5c:	6801      	ldr	r1, [r0, #0]
int16_t Adafruit_INA219::getBusVoltage_raw() {
   b6c5e:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_BUSVOLTAGE, 2, MSBFIRST);
   b6c60:	461a      	mov	r2, r3
   b6c62:	a804      	add	r0, sp, #16
   b6c64:	f7ff fd04 	bl	b6670 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = bus_voltage_reg.read(&value);
   b6c68:	f10d 010e 	add.w	r1, sp, #14
   b6c6c:	a804      	add	r0, sp, #16
   b6c6e:	f7ff fdba 	bl	b67e6 <_ZN23Adafruit_BusIO_Register4readEPt>
   b6c72:	7120      	strb	r0, [r4, #4]

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
   b6c74:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   b6c78:	08c0      	lsrs	r0, r0, #3
}
   b6c7a:	0080      	lsls	r0, r0, #2
   b6c7c:	b00a      	add	sp, #40	; 0x28
   b6c7e:	bd10      	pop	{r4, pc}

000b6c80 <_ZN15Adafruit_INA21919getShuntVoltage_rawEv>:

/*!
 *  @brief  Gets the raw shunt voltage (16-bit signed integer, so +-32767)
 *  @return the raw shunt voltage reading
 */
int16_t Adafruit_INA219::getShuntVoltage_raw() {
   b6c80:	b510      	push	{r4, lr}
  uint16_t value;
  Adafruit_BusIO_Register shunt_voltage_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
   b6c82:	2201      	movs	r2, #1
int16_t Adafruit_INA219::getShuntVoltage_raw() {
   b6c84:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
   b6c86:	e9cd 2200 	strd	r2, r2, [sp]
int16_t Adafruit_INA219::getShuntVoltage_raw() {
   b6c8a:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_SHUNTVOLTAGE, 2, MSBFIRST);
   b6c8c:	6801      	ldr	r1, [r0, #0]
   b6c8e:	2302      	movs	r3, #2
   b6c90:	a804      	add	r0, sp, #16
   b6c92:	f7ff fced 	bl	b6670 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = shunt_voltage_reg.read(&value);
   b6c96:	f10d 010e 	add.w	r1, sp, #14
   b6c9a:	a804      	add	r0, sp, #16
   b6c9c:	f7ff fda3 	bl	b67e6 <_ZN23Adafruit_BusIO_Register4readEPt>
   b6ca0:	7120      	strb	r0, [r4, #4]
  return value;
}
   b6ca2:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
   b6ca6:	b00a      	add	sp, #40	; 0x28
   b6ca8:	bd10      	pop	{r4, pc}

000b6caa <_ZN15Adafruit_INA21914getCurrent_rawEv>:

/*!
 *  @brief  Gets the raw current value (16-bit signed integer, so +-32767)
 *  @return the raw current reading
 */
int16_t Adafruit_INA219::getCurrent_raw() {
   b6caa:	b530      	push	{r4, r5, lr}
  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   b6cac:	2501      	movs	r5, #1
int16_t Adafruit_INA219::getCurrent_raw() {
   b6cae:	b091      	sub	sp, #68	; 0x44
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   b6cb0:	e9cd 5500 	strd	r5, r5, [sp]
int16_t Adafruit_INA219::getCurrent_raw() {
   b6cb4:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   b6cb6:	6801      	ldr	r1, [r0, #0]
   b6cb8:	2302      	movs	r3, #2
   b6cba:	2205      	movs	r2, #5
   b6cbc:	a804      	add	r0, sp, #16
   b6cbe:	f7ff fcd7 	bl	b6670 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   b6cc2:	68a1      	ldr	r1, [r4, #8]
   b6cc4:	2202      	movs	r2, #2
   b6cc6:	a804      	add	r0, sp, #16
   b6cc8:	f7ff fd2d 	bl	b6726 <_ZN23Adafruit_BusIO_Register5writeEmh>

  // Now we can safely read the CURRENT register!
  Adafruit_BusIO_Register current_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CURRENT, 2, MSBFIRST);
   b6ccc:	6821      	ldr	r1, [r4, #0]
   b6cce:	2302      	movs	r3, #2
   b6cd0:	2204      	movs	r2, #4
   b6cd2:	e9cd 5500 	strd	r5, r5, [sp]
   b6cd6:	a80a      	add	r0, sp, #40	; 0x28
   b6cd8:	f7ff fcca 	bl	b6670 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = current_reg.read(&value);
   b6cdc:	f10d 010e 	add.w	r1, sp, #14
   b6ce0:	a80a      	add	r0, sp, #40	; 0x28
   b6ce2:	f7ff fd80 	bl	b67e6 <_ZN23Adafruit_BusIO_Register4readEPt>
   b6ce6:	7120      	strb	r0, [r4, #4]
  return value;
}
   b6ce8:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
   b6cec:	b011      	add	sp, #68	; 0x44
   b6cee:	bd30      	pop	{r4, r5, pc}

000b6cf0 <_ZN15Adafruit_INA21912getPower_rawEv>:

/*!
 *  @brief  Gets the raw power value (16-bit signed integer, so +-32767)
 *  @return raw power reading
 */
int16_t Adafruit_INA219::getPower_raw() {
   b6cf0:	b530      	push	{r4, r5, lr}
  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   b6cf2:	2501      	movs	r5, #1
int16_t Adafruit_INA219::getPower_raw() {
   b6cf4:	b091      	sub	sp, #68	; 0x44
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   b6cf6:	e9cd 5500 	strd	r5, r5, [sp]
int16_t Adafruit_INA219::getPower_raw() {
   b6cfa:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   b6cfc:	6801      	ldr	r1, [r0, #0]
   b6cfe:	2302      	movs	r3, #2
   b6d00:	2205      	movs	r2, #5
   b6d02:	a804      	add	r0, sp, #16
   b6d04:	f7ff fcb4 	bl	b6670 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   b6d08:	68a1      	ldr	r1, [r4, #8]
   b6d0a:	2202      	movs	r2, #2
   b6d0c:	a804      	add	r0, sp, #16
   b6d0e:	f7ff fd0a 	bl	b6726 <_ZN23Adafruit_BusIO_Register5writeEmh>

  // Now we can safely read the POWER register!
  Adafruit_BusIO_Register power_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_POWER, 2, MSBFIRST);
   b6d12:	6821      	ldr	r1, [r4, #0]
   b6d14:	2302      	movs	r3, #2
   b6d16:	2203      	movs	r2, #3
   b6d18:	e9cd 5500 	strd	r5, r5, [sp]
   b6d1c:	a80a      	add	r0, sp, #40	; 0x28
   b6d1e:	f7ff fca7 	bl	b6670 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = power_reg.read(&value);
   b6d22:	f10d 010e 	add.w	r1, sp, #14
   b6d26:	a80a      	add	r0, sp, #40	; 0x28
   b6d28:	f7ff fd5d 	bl	b67e6 <_ZN23Adafruit_BusIO_Register4readEPt>
   b6d2c:	7120      	strb	r0, [r4, #4]
  return value;
}
   b6d2e:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
   b6d32:	b011      	add	sp, #68	; 0x44
   b6d34:	bd30      	pop	{r4, r5, pc}
	...

000b6d38 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv>:

/*!
 *  @brief  Gets the shunt voltage in mV (so +-327mV)
 *  @return the shunt voltage converted to millivolts
 */
float Adafruit_INA219::getShuntVoltage_mV() {
   b6d38:	b508      	push	{r3, lr}
  int16_t value;
  value = getShuntVoltage_raw();
   b6d3a:	f7ff ffa1 	bl	b6c80 <_ZN15Adafruit_INA21919getShuntVoltage_rawEv>
  return value * 0.01;
   b6d3e:	f005 fa91 	bl	bc264 <__aeabi_i2d>
   b6d42:	a305      	add	r3, pc, #20	; (adr r3, b6d58 <_ZN15Adafruit_INA21918getShuntVoltage_mVEv+0x20>)
   b6d44:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d48:	f005 faf6 	bl	bc338 <__aeabi_dmul>
   b6d4c:	f005 fdec 	bl	bc928 <__aeabi_d2f>
}
   b6d50:	ee00 0a10 	vmov	s0, r0
   b6d54:	bd08      	pop	{r3, pc}
   b6d56:	bf00      	nop
   b6d58:	47ae147b 	.word	0x47ae147b
   b6d5c:	3f847ae1 	.word	0x3f847ae1

000b6d60 <_ZN15Adafruit_INA21915getBusVoltage_VEv>:

/*!
 *  @brief  Gets the bus voltage in volts
 *  @return the bus voltage converted to volts
 */
float Adafruit_INA219::getBusVoltage_V() {
   b6d60:	b508      	push	{r3, lr}
  int16_t value = getBusVoltage_raw();
   b6d62:	f7ff ff75 	bl	b6c50 <_ZN15Adafruit_INA21917getBusVoltage_rawEv>
  return value * 0.001;
   b6d66:	f005 fa7d 	bl	bc264 <__aeabi_i2d>
   b6d6a:	a305      	add	r3, pc, #20	; (adr r3, b6d80 <_ZN15Adafruit_INA21915getBusVoltage_VEv+0x20>)
   b6d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d70:	f005 fae2 	bl	bc338 <__aeabi_dmul>
   b6d74:	f005 fdd8 	bl	bc928 <__aeabi_d2f>
}
   b6d78:	ee00 0a10 	vmov	s0, r0
   b6d7c:	bd08      	pop	{r3, pc}
   b6d7e:	bf00      	nop
   b6d80:	d2f1a9fc 	.word	0xd2f1a9fc
   b6d84:	3f50624d 	.word	0x3f50624d

000b6d88 <_ZN15Adafruit_INA21913getCurrent_mAEv>:
/*!
 *  @brief  Gets the current value in mA, taking into account the
 *          config settings and current LSB
 *  @return the current reading convereted to milliamps
 */
float Adafruit_INA219::getCurrent_mA() {
   b6d88:	b510      	push	{r4, lr}
   b6d8a:	4604      	mov	r4, r0
  float valueDec = getCurrent_raw();
   b6d8c:	f7ff ff8d 	bl	b6caa <_ZN15Adafruit_INA21914getCurrent_rawEv>
   b6d90:	ee07 0a90 	vmov	s15, r0
   b6d94:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  valueDec /= ina219_currentDivider_mA;
   b6d98:	edd4 7a03 	vldr	s15, [r4, #12]
   b6d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
  return valueDec;
}
   b6da0:	ee80 0a27 	vdiv.f32	s0, s0, s15
   b6da4:	bd10      	pop	{r4, pc}

000b6da6 <_ZN15Adafruit_INA21911getPower_mWEv>:
/*!
 *  @brief  Gets the power value in mW, taking into account the
 *          config settings and current LSB
 *  @return power reading converted to milliwatts
 */
float Adafruit_INA219::getPower_mW() {
   b6da6:	b510      	push	{r4, lr}
   b6da8:	4604      	mov	r4, r0
  float valueDec = getPower_raw();
   b6daa:	f7ff ffa1 	bl	b6cf0 <_ZN15Adafruit_INA21912getPower_rawEv>
   b6dae:	ee07 0a90 	vmov	s15, r0
  valueDec *= ina219_powerMultiplier_mW;
   b6db2:	ed94 0a04 	vldr	s0, [r4, #16]
  float valueDec = getPower_raw();
   b6db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return valueDec;
}
   b6dba:	ee27 0a80 	vmul.f32	s0, s15, s0
   b6dbe:	bd10      	pop	{r4, pc}

000b6dc0 <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>:
 *          of current.  Each unit of current corresponds to 100uA, and
 *          each unit of power corresponds to 2mW. Counter overflow
 *          occurs at 3.2A.
 *  @note   These calculations assume a 0.1 ohm resistor is present
 */
void Adafruit_INA219::setCalibration_32V_2A() {
   b6dc0:	b530      	push	{r4, r5, lr}
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 3.2 * 32V
  // MaximumPower = 102.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
   b6dc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   b6dc6:	230a      	movs	r3, #10
void Adafruit_INA219::setCalibration_32V_2A() {
   b6dc8:	b08f      	sub	sp, #60	; 0x3c
  ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
   b6dca:	e9c0 2302 	strd	r2, r3, [r0, #8]
  ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)

  // Set Calibration register to 'Cal' calculated above
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   b6dce:	2501      	movs	r5, #1
  ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
   b6dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b6dd4:	6103      	str	r3, [r0, #16]
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   b6dd6:	e9cd 5500 	strd	r5, r5, [sp]
void Adafruit_INA219::setCalibration_32V_2A() {
   b6dda:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   b6ddc:	6801      	ldr	r1, [r0, #0]
   b6dde:	2302      	movs	r3, #2
   b6de0:	2205      	movs	r2, #5
   b6de2:	a802      	add	r0, sp, #8
   b6de4:	f7ff fc44 	bl	b6670 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   b6de8:	68a1      	ldr	r1, [r4, #8]
   b6dea:	2202      	movs	r2, #2
   b6dec:	a802      	add	r0, sp, #8
   b6dee:	f7ff fc9a 	bl	b6726 <_ZN23Adafruit_BusIO_Register5writeEmh>
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
                    INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  Adafruit_BusIO_Register config_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CONFIG, 2, MSBFIRST);
   b6df2:	6821      	ldr	r1, [r4, #0]
   b6df4:	2302      	movs	r3, #2
   b6df6:	e9cd 5500 	strd	r5, r5, [sp]
   b6dfa:	2200      	movs	r2, #0
   b6dfc:	a808      	add	r0, sp, #32
   b6dfe:	f7ff fc37 	bl	b6670 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = config_reg.write(config, 2);
   b6e02:	2202      	movs	r2, #2
   b6e04:	f643 119f 	movw	r1, #14751	; 0x399f
   b6e08:	a808      	add	r0, sp, #32
   b6e0a:	f7ff fc8c 	bl	b6726 <_ZN23Adafruit_BusIO_Register5writeEmh>
   b6e0e:	7120      	strb	r0, [r4, #4]
}
   b6e10:	b00f      	add	sp, #60	; 0x3c
   b6e12:	bd30      	pop	{r4, r5, pc}

000b6e14 <_ZN15Adafruit_INA2195beginEP7TwoWire>:
bool Adafruit_INA219::begin(TwoWire *theWire) {
   b6e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b6e16:	6803      	ldr	r3, [r0, #0]
bool Adafruit_INA219::begin(TwoWire *theWire) {
   b6e18:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b6e1a:	b953      	cbnz	r3, b6e32 <_ZN15Adafruit_INA2195beginEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(ina219_i2caddr, theWire);
   b6e1c:	2010      	movs	r0, #16
   b6e1e:	9101      	str	r1, [sp, #4]
   b6e20:	f7fd f939 	bl	b4096 <_Znwj>
   b6e24:	4605      	mov	r5, r0
   b6e26:	b118      	cbz	r0, b6e30 <_ZN15Adafruit_INA2195beginEP7TwoWire+0x1c>
   b6e28:	9a01      	ldr	r2, [sp, #4]
   b6e2a:	7961      	ldrb	r1, [r4, #5]
   b6e2c:	f7ff fe53 	bl	b6ad6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b6e30:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
   b6e32:	6820      	ldr	r0, [r4, #0]
   b6e34:	2101      	movs	r1, #1
   b6e36:	f7ff fe6a 	bl	b6b0e <_ZN18Adafruit_I2CDevice5beginEb>
   b6e3a:	4605      	mov	r5, r0
   b6e3c:	b110      	cbz	r0, b6e44 <_ZN15Adafruit_INA2195beginEP7TwoWire+0x30>
  setCalibration_32V_2A();
   b6e3e:	4620      	mov	r0, r4
   b6e40:	f7ff ffbe 	bl	b6dc0 <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>
}
   b6e44:	4628      	mov	r0, r5
   b6e46:	b003      	add	sp, #12
   b6e48:	bd30      	pop	{r4, r5, pc}

000b6e4a <_ZN15Adafruit_INA21924setCalibration_16V_400mAEv>:
/*!
 *  @brief set device to alibration which uses the highest precision for
 *     current measurement (0.1mA), at the expense of
 *     only supporting 16V at 400mA max.
 */
void Adafruit_INA219::setCalibration_16V_400mA() {
   b6e4a:	b530      	push	{r4, r5, lr}
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 0.4 * 16V
  // MaximumPower = 6.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
   b6e4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b6e50:	2314      	movs	r3, #20
void Adafruit_INA219::setCalibration_16V_400mA() {
   b6e52:	b08f      	sub	sp, #60	; 0x3c
  ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
   b6e54:	e9c0 2302 	strd	r2, r3, [r0, #8]
  ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit

  // Set Calibration register to 'Cal' calculated above
  Adafruit_BusIO_Register calibration_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   b6e58:	2501      	movs	r5, #1
  ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit
   b6e5a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   b6e5e:	6103      	str	r3, [r0, #16]
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   b6e60:	e9cd 5500 	strd	r5, r5, [sp]
void Adafruit_INA219::setCalibration_16V_400mA() {
   b6e64:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CALIBRATION, 2, MSBFIRST);
   b6e66:	6801      	ldr	r1, [r0, #0]
   b6e68:	2302      	movs	r3, #2
   b6e6a:	2205      	movs	r2, #5
   b6e6c:	a802      	add	r0, sp, #8
   b6e6e:	f7ff fbff 	bl	b6670 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  calibration_reg.write(ina219_calValue, 2);
   b6e72:	68a1      	ldr	r1, [r4, #8]
   b6e74:	2202      	movs	r2, #2
   b6e76:	a802      	add	r0, sp, #8
   b6e78:	f7ff fc55 	bl	b6726 <_ZN23Adafruit_BusIO_Register5writeEmh>
                    INA219_CONFIG_GAIN_1_40MV | INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

  Adafruit_BusIO_Register config_reg =
      Adafruit_BusIO_Register(i2c_dev, INA219_REG_CONFIG, 2, MSBFIRST);
   b6e7c:	6821      	ldr	r1, [r4, #0]
   b6e7e:	2302      	movs	r3, #2
   b6e80:	e9cd 5500 	strd	r5, r5, [sp]
   b6e84:	2200      	movs	r2, #0
   b6e86:	a808      	add	r0, sp, #32
   b6e88:	f7ff fbf2 	bl	b6670 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _success = config_reg.write(config, 2);
   b6e8c:	2202      	movs	r2, #2
   b6e8e:	f240 119f 	movw	r1, #415	; 0x19f
   b6e92:	a808      	add	r0, sp, #32
   b6e94:	f7ff fc47 	bl	b6726 <_ZN23Adafruit_BusIO_Register5writeEmh>
   b6e98:	7120      	strb	r0, [r4, #4]
}
   b6e9a:	b00f      	add	sp, #60	; 0x3c
   b6e9c:	bd30      	pop	{r4, r5, pc}

000b6e9e <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b6e9e:	4770      	bx	lr

000b6ea0 <_ZN15Adafruit_BNO055D1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
   b6ea0:	4770      	bx	lr
	...

000b6ea4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 *          Sensor description
 */
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   b6ea4:	b538      	push	{r3, r4, r5, lr}
   b6ea6:	460c      	mov	r4, r1
   b6ea8:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b6eaa:	2220      	movs	r2, #32
   b6eac:	2100      	movs	r1, #0
   b6eae:	f104 0008 	add.w	r0, r4, #8
   b6eb2:	f006 f87d 	bl	bcfb0 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
   b6eb6:	4907      	ldr	r1, [pc, #28]	; (b6ed4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x30>)
   b6eb8:	220b      	movs	r2, #11
   b6eba:	4620      	mov	r0, r4
   b6ebc:	f006 f8be 	bl	bd03c <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   b6ec0:	2301      	movs	r3, #1
   b6ec2:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   b6ec4:	68eb      	ldr	r3, [r5, #12]
   b6ec6:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_ORIENTATION;
   b6ec8:	2303      	movs	r3, #3
   b6eca:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->max_value = 0.0F;
  sensor->min_value = 0.0F;
  sensor->resolution = 0.01F;
   b6ecc:	4b02      	ldr	r3, [pc, #8]	; (b6ed8 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x34>)
   b6ece:	6223      	str	r3, [r4, #32]
}
   b6ed0:	bd38      	pop	{r3, r4, r5, pc}
   b6ed2:	bf00      	nop
   b6ed4:	000bd7ef 	.word	0x000bd7ef
   b6ed8:	3c23d70a 	.word	0x3c23d70a

000b6edc <_ZN15Adafruit_BNO055D0Ev>:
   b6edc:	b510      	push	{r4, lr}
   b6ede:	2114      	movs	r1, #20
   b6ee0:	4604      	mov	r4, r0
   b6ee2:	f7fd f8dc 	bl	b409e <_ZdlPvj>
   b6ee6:	4620      	mov	r0, r4
   b6ee8:	bd10      	pop	{r4, pc}
	...

000b6eec <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   b6eec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6eee:	9301      	str	r3, [sp, #4]
                                 TwoWire *theWire) {
   b6ef0:	4b09      	ldr	r3, [pc, #36]	; (b6f18 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x2c>)
   b6ef2:	6003      	str	r3, [r0, #0]
   b6ef4:	2300      	movs	r3, #0
  _sensorID = sensorID;
   b6ef6:	e9c0 3102 	strd	r3, r1, [r0, #8]
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   b6efa:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   b6efc:	2010      	movs	r0, #16
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   b6efe:	4616      	mov	r6, r2
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   b6f00:	f7fd f8c9 	bl	b4096 <_Znwj>
   b6f04:	4605      	mov	r5, r0
   b6f06:	b118      	cbz	r0, b6f10 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x24>
   b6f08:	9a01      	ldr	r2, [sp, #4]
   b6f0a:	4631      	mov	r1, r6
   b6f0c:	f7ff fde3 	bl	b6ad6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
}
   b6f10:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
   b6f12:	60a5      	str	r5, [r4, #8]
}
   b6f14:	b002      	add	sp, #8
   b6f16:	bd70      	pop	{r4, r5, r6, pc}
   b6f18:	000bd940 	.word	0x000bd940

000b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value) {
   b6f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
  return i2c_dev->write(buffer, 2);
   b6f1e:	2300      	movs	r3, #0
   b6f20:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
   b6f24:	f88d 100c 	strb.w	r1, [sp, #12]
   b6f28:	f88d 200d 	strb.w	r2, [sp, #13]
  return i2c_dev->write(buffer, 2);
   b6f2c:	2301      	movs	r3, #1
   b6f2e:	2202      	movs	r2, #2
   b6f30:	a903      	add	r1, sp, #12
   b6f32:	6880      	ldr	r0, [r0, #8]
   b6f34:	f7ff fdfa 	bl	b6b2c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   b6f38:	b005      	add	sp, #20
   b6f3a:	f85d fb04 	ldr.w	pc, [sp], #4

000b6f3e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
   b6f3e:	b508      	push	{r3, lr}
   b6f40:	460a      	mov	r2, r1
  _mode = mode;
   b6f42:	7401      	strb	r1, [r0, #16]
  write8(BNO055_OPR_MODE_ADDR, _mode);
   b6f44:	213d      	movs	r1, #61	; 0x3d
   b6f46:	f7ff ffe9 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
}
   b6f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(30);
   b6f4e:	201e      	movs	r0, #30
   b6f50:	f002 b880 	b.w	b9054 <delay>

000b6f54 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>:
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   b6f54:	b570      	push	{r4, r5, r6, lr}
   b6f56:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   b6f58:	2100      	movs	r1, #0
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   b6f5a:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t modeback = _mode;
   b6f5c:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   b6f5e:	f7ff ffee 	bl	b6f3e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   b6f62:	2019      	movs	r0, #25
   b6f64:	f002 f876 	bl	b9054 <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   b6f68:	2200      	movs	r2, #0
   b6f6a:	2107      	movs	r1, #7
   b6f6c:	4620      	mov	r0, r4
   b6f6e:	f7ff ffd5 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (usextal) {
   b6f72:	b185      	cbz	r5, b6f96 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x42>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x80);
   b6f74:	2280      	movs	r2, #128	; 0x80
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   b6f76:	213f      	movs	r1, #63	; 0x3f
   b6f78:	4620      	mov	r0, r4
   b6f7a:	f7ff ffcf 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   b6f7e:	200a      	movs	r0, #10
   b6f80:	f002 f868 	bl	b9054 <delay>
  setMode(modeback);
   b6f84:	4620      	mov	r0, r4
   b6f86:	4631      	mov	r1, r6
   b6f88:	f7ff ffd9 	bl	b6f3e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   b6f8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(20);
   b6f90:	2014      	movs	r0, #20
   b6f92:	f002 b85f 	b.w	b9054 <delay>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   b6f96:	462a      	mov	r2, r5
   b6f98:	e7ed      	b.n	b6f76 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x22>

000b6f9a <_ZN15Adafruit_BNO05516setSensorOffsetsERK25adafruit_bno055_offsets_t>:
    const adafruit_bno055_offsets_t &offsets_type) {
   b6f9a:	b570      	push	{r4, r5, r6, lr}
   b6f9c:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
   b6f9e:	2100      	movs	r1, #0
    const adafruit_bno055_offsets_t &offsets_type) {
   b6fa0:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t lastMode = _mode;
   b6fa2:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
   b6fa4:	f7ff ffcb 	bl	b6f3e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   b6fa8:	2019      	movs	r0, #25
   b6faa:	f002 f853 	bl	b9054 <delay>
  write8(ACCEL_OFFSET_X_LSB_ADDR, (offsets_type.accel_offset_x) & 0x0FF);
   b6fae:	782a      	ldrb	r2, [r5, #0]
   b6fb0:	2155      	movs	r1, #85	; 0x55
   b6fb2:	4620      	mov	r0, r4
   b6fb4:	f7ff ffb2 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_X_MSB_ADDR, (offsets_type.accel_offset_x >> 8) & 0x0FF);
   b6fb8:	882a      	ldrh	r2, [r5, #0]
   b6fba:	2156      	movs	r1, #86	; 0x56
   b6fbc:	0a12      	lsrs	r2, r2, #8
   b6fbe:	4620      	mov	r0, r4
   b6fc0:	f7ff ffac 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_LSB_ADDR, (offsets_type.accel_offset_y) & 0x0FF);
   b6fc4:	78aa      	ldrb	r2, [r5, #2]
   b6fc6:	2157      	movs	r1, #87	; 0x57
   b6fc8:	4620      	mov	r0, r4
   b6fca:	f7ff ffa7 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Y_MSB_ADDR, (offsets_type.accel_offset_y >> 8) & 0x0FF);
   b6fce:	886a      	ldrh	r2, [r5, #2]
   b6fd0:	2158      	movs	r1, #88	; 0x58
   b6fd2:	0a12      	lsrs	r2, r2, #8
   b6fd4:	4620      	mov	r0, r4
   b6fd6:	f7ff ffa1 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_LSB_ADDR, (offsets_type.accel_offset_z) & 0x0FF);
   b6fda:	792a      	ldrb	r2, [r5, #4]
   b6fdc:	2159      	movs	r1, #89	; 0x59
   b6fde:	4620      	mov	r0, r4
   b6fe0:	f7ff ff9c 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_OFFSET_Z_MSB_ADDR, (offsets_type.accel_offset_z >> 8) & 0x0FF);
   b6fe4:	88aa      	ldrh	r2, [r5, #4]
   b6fe6:	215a      	movs	r1, #90	; 0x5a
   b6fe8:	0a12      	lsrs	r2, r2, #8
   b6fea:	4620      	mov	r0, r4
   b6fec:	f7ff ff96 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_LSB_ADDR, (offsets_type.mag_offset_x) & 0x0FF);
   b6ff0:	79aa      	ldrb	r2, [r5, #6]
   b6ff2:	215b      	movs	r1, #91	; 0x5b
   b6ff4:	4620      	mov	r0, r4
   b6ff6:	f7ff ff91 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_X_MSB_ADDR, (offsets_type.mag_offset_x >> 8) & 0x0FF);
   b6ffa:	88ea      	ldrh	r2, [r5, #6]
   b6ffc:	215c      	movs	r1, #92	; 0x5c
   b6ffe:	0a12      	lsrs	r2, r2, #8
   b7000:	4620      	mov	r0, r4
   b7002:	f7ff ff8b 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_LSB_ADDR, (offsets_type.mag_offset_y) & 0x0FF);
   b7006:	7a2a      	ldrb	r2, [r5, #8]
   b7008:	215d      	movs	r1, #93	; 0x5d
   b700a:	4620      	mov	r0, r4
   b700c:	f7ff ff86 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Y_MSB_ADDR, (offsets_type.mag_offset_y >> 8) & 0x0FF);
   b7010:	892a      	ldrh	r2, [r5, #8]
   b7012:	215e      	movs	r1, #94	; 0x5e
   b7014:	0a12      	lsrs	r2, r2, #8
   b7016:	4620      	mov	r0, r4
   b7018:	f7ff ff80 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_LSB_ADDR, (offsets_type.mag_offset_z) & 0x0FF);
   b701c:	7aaa      	ldrb	r2, [r5, #10]
   b701e:	215f      	movs	r1, #95	; 0x5f
   b7020:	4620      	mov	r0, r4
   b7022:	f7ff ff7b 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_OFFSET_Z_MSB_ADDR, (offsets_type.mag_offset_z >> 8) & 0x0FF);
   b7026:	896a      	ldrh	r2, [r5, #10]
   b7028:	2160      	movs	r1, #96	; 0x60
   b702a:	0a12      	lsrs	r2, r2, #8
   b702c:	4620      	mov	r0, r4
   b702e:	f7ff ff75 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_LSB_ADDR, (offsets_type.gyro_offset_x) & 0x0FF);
   b7032:	7b2a      	ldrb	r2, [r5, #12]
   b7034:	2161      	movs	r1, #97	; 0x61
   b7036:	4620      	mov	r0, r4
   b7038:	f7ff ff70 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_X_MSB_ADDR, (offsets_type.gyro_offset_x >> 8) & 0x0FF);
   b703c:	89aa      	ldrh	r2, [r5, #12]
   b703e:	2162      	movs	r1, #98	; 0x62
   b7040:	0a12      	lsrs	r2, r2, #8
   b7042:	4620      	mov	r0, r4
   b7044:	f7ff ff6a 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_LSB_ADDR, (offsets_type.gyro_offset_y) & 0x0FF);
   b7048:	7baa      	ldrb	r2, [r5, #14]
   b704a:	2163      	movs	r1, #99	; 0x63
   b704c:	4620      	mov	r0, r4
   b704e:	f7ff ff65 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Y_MSB_ADDR, (offsets_type.gyro_offset_y >> 8) & 0x0FF);
   b7052:	89ea      	ldrh	r2, [r5, #14]
   b7054:	2164      	movs	r1, #100	; 0x64
   b7056:	0a12      	lsrs	r2, r2, #8
   b7058:	4620      	mov	r0, r4
   b705a:	f7ff ff5f 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_LSB_ADDR, (offsets_type.gyro_offset_z) & 0x0FF);
   b705e:	7c2a      	ldrb	r2, [r5, #16]
   b7060:	2165      	movs	r1, #101	; 0x65
   b7062:	4620      	mov	r0, r4
   b7064:	f7ff ff5a 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(GYRO_OFFSET_Z_MSB_ADDR, (offsets_type.gyro_offset_z >> 8) & 0x0FF);
   b7068:	8a2a      	ldrh	r2, [r5, #16]
   b706a:	2166      	movs	r1, #102	; 0x66
   b706c:	0a12      	lsrs	r2, r2, #8
   b706e:	4620      	mov	r0, r4
   b7070:	f7ff ff54 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_LSB_ADDR, (offsets_type.accel_radius) & 0x0FF);
   b7074:	7caa      	ldrb	r2, [r5, #18]
   b7076:	2167      	movs	r1, #103	; 0x67
   b7078:	4620      	mov	r0, r4
   b707a:	f7ff ff4f 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(ACCEL_RADIUS_MSB_ADDR, (offsets_type.accel_radius >> 8) & 0x0FF);
   b707e:	8a6a      	ldrh	r2, [r5, #18]
   b7080:	2168      	movs	r1, #104	; 0x68
   b7082:	0a12      	lsrs	r2, r2, #8
   b7084:	4620      	mov	r0, r4
   b7086:	f7ff ff49 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_LSB_ADDR, (offsets_type.mag_radius) & 0x0FF);
   b708a:	7d2a      	ldrb	r2, [r5, #20]
   b708c:	2169      	movs	r1, #105	; 0x69
   b708e:	4620      	mov	r0, r4
   b7090:	f7ff ff44 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(MAG_RADIUS_MSB_ADDR, (offsets_type.mag_radius >> 8) & 0x0FF);
   b7094:	8aaa      	ldrh	r2, [r5, #20]
   b7096:	216a      	movs	r1, #106	; 0x6a
   b7098:	4620      	mov	r0, r4
   b709a:	0a12      	lsrs	r2, r2, #8
   b709c:	f7ff ff3e 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  setMode(lastMode);
   b70a0:	4631      	mov	r1, r6
   b70a2:	4620      	mov	r0, r4
}
   b70a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setMode(lastMode);
   b70a8:	f7ff bf49 	b.w	b6f3e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

000b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
   b70ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[1] = {reg};
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   b70ae:	2201      	movs	r2, #1
   b70b0:	2300      	movs	r3, #0
   b70b2:	e9cd 2300 	strd	r2, r3, [sp]
   b70b6:	ab03      	add	r3, sp, #12
  uint8_t buffer[1] = {reg};
   b70b8:	f88d 100c 	strb.w	r1, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
   b70bc:	6880      	ldr	r0, [r0, #8]
   b70be:	4619      	mov	r1, r3
   b70c0:	f7ff fda2 	bl	b6c08 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
  return (byte)buffer[0];
}
   b70c4:	f89d 000c 	ldrb.w	r0, [sp, #12]
   b70c8:	b005      	add	sp, #20
   b70ca:	f85d fb04 	ldr.w	pc, [sp], #4

000b70ce <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
   b70ce:	b570      	push	{r4, r5, r6, lr}
   b70d0:	4604      	mov	r4, r0
   b70d2:	460e      	mov	r6, r1
  if (!i2c_dev->begin()) {
   b70d4:	6880      	ldr	r0, [r0, #8]
   b70d6:	2101      	movs	r1, #1
   b70d8:	f7ff fd19 	bl	b6b0e <_ZN18Adafruit_I2CDevice5beginEb>
   b70dc:	4605      	mov	r5, r0
   b70de:	b910      	cbnz	r0, b70e6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x18>
    return false;
   b70e0:	2500      	movs	r5, #0
}
   b70e2:	4628      	mov	r0, r5
   b70e4:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
   b70e6:	2100      	movs	r1, #0
   b70e8:	4620      	mov	r0, r4
   b70ea:	f7ff ffdf 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (id != BNO055_ID) {
   b70ee:	28a0      	cmp	r0, #160	; 0xa0
   b70f0:	d113      	bne.n	b711a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4c>
  setMode(OPERATION_MODE_CONFIG);
   b70f2:	2100      	movs	r1, #0
   b70f4:	4620      	mov	r0, r4
   b70f6:	f7ff ff22 	bl	b6f3e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
   b70fa:	2220      	movs	r2, #32
   b70fc:	213f      	movs	r1, #63	; 0x3f
   b70fe:	4620      	mov	r0, r4
   b7100:	f7ff ff0c 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
   b7104:	201e      	movs	r0, #30
    delay(10);
   b7106:	f001 ffa5 	bl	b9054 <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
   b710a:	2100      	movs	r1, #0
   b710c:	4620      	mov	r0, r4
   b710e:	f7ff ffcd 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b7112:	28a0      	cmp	r0, #160	; 0xa0
   b7114:	d00c      	beq.n	b7130 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x62>
    delay(10);
   b7116:	200a      	movs	r0, #10
   b7118:	e7f5      	b.n	b7106 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x38>
    delay(1000); // hold on for boot
   b711a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b711e:	f001 ff99 	bl	b9054 <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
   b7122:	2100      	movs	r1, #0
   b7124:	4620      	mov	r0, r4
   b7126:	f7ff ffc1 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if (id != BNO055_ID) {
   b712a:	28a0      	cmp	r0, #160	; 0xa0
   b712c:	d1d8      	bne.n	b70e0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x12>
   b712e:	e7e0      	b.n	b70f2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x24>
  delay(50);
   b7130:	2032      	movs	r0, #50	; 0x32
   b7132:	f001 ff8f 	bl	b9054 <delay>
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
   b7136:	2200      	movs	r2, #0
   b7138:	213e      	movs	r1, #62	; 0x3e
   b713a:	4620      	mov	r0, r4
   b713c:	f7ff feee 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   b7140:	200a      	movs	r0, #10
   b7142:	f001 ff87 	bl	b9054 <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   b7146:	2200      	movs	r2, #0
   b7148:	2107      	movs	r1, #7
   b714a:	4620      	mov	r0, r4
   b714c:	f7ff fee6 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
   b7150:	2200      	movs	r2, #0
   b7152:	213f      	movs	r1, #63	; 0x3f
   b7154:	4620      	mov	r0, r4
   b7156:	f7ff fee1 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   b715a:	200a      	movs	r0, #10
   b715c:	f001 ff7a 	bl	b9054 <delay>
  setMode(mode);
   b7160:	4620      	mov	r0, r4
   b7162:	4631      	mov	r1, r6
   b7164:	f7ff feeb 	bl	b6f3e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   b7168:	2014      	movs	r0, #20
   b716a:	f001 ff73 	bl	b9054 <delay>
  return true;
   b716e:	e7b8      	b.n	b70e2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x14>

000b7170 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_>:
                                      uint8_t *system_error) {
   b7170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7172:	460f      	mov	r7, r1
   b7174:	4616      	mov	r6, r2
  write8(BNO055_PAGE_ID_ADDR, 0);
   b7176:	2107      	movs	r1, #7
   b7178:	2200      	movs	r2, #0
                                      uint8_t *system_error) {
   b717a:	4604      	mov	r4, r0
   b717c:	461d      	mov	r5, r3
  write8(BNO055_PAGE_ID_ADDR, 0);
   b717e:	f7ff fecd 	bl	b6f1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (system_status != 0)
   b7182:	b127      	cbz	r7, b718e <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x1e>
    *system_status = read8(BNO055_SYS_STAT_ADDR);
   b7184:	2139      	movs	r1, #57	; 0x39
   b7186:	4620      	mov	r0, r4
   b7188:	f7ff ff90 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b718c:	7038      	strb	r0, [r7, #0]
  if (self_test_result != 0)
   b718e:	b126      	cbz	r6, b719a <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x2a>
    *self_test_result = read8(BNO055_SELFTEST_RESULT_ADDR);
   b7190:	2136      	movs	r1, #54	; 0x36
   b7192:	4620      	mov	r0, r4
   b7194:	f7ff ff8a 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b7198:	7030      	strb	r0, [r6, #0]
  if (system_error != 0)
   b719a:	b125      	cbz	r5, b71a6 <_ZN15Adafruit_BNO05515getSystemStatusEPhS0_S0_+0x36>
    *system_error = read8(BNO055_SYS_ERR_ADDR);
   b719c:	213a      	movs	r1, #58	; 0x3a
   b719e:	4620      	mov	r0, r4
   b71a0:	f7ff ff84 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b71a4:	7028      	strb	r0, [r5, #0]
}
   b71a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(200);
   b71aa:	20c8      	movs	r0, #200	; 0xc8
   b71ac:	f001 bf52 	b.w	b9054 <delay>

000b71b0 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>:
                                     uint8_t *accel, uint8_t *mag) {
   b71b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b71b2:	460e      	mov	r6, r1
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   b71b4:	2135      	movs	r1, #53	; 0x35
                                     uint8_t *accel, uint8_t *mag) {
   b71b6:	9f06      	ldr	r7, [sp, #24]
   b71b8:	4615      	mov	r5, r2
   b71ba:	461c      	mov	r4, r3
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
   b71bc:	f7ff ff76 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (sys != NULL) {
   b71c0:	b10e      	cbz	r6, b71c6 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x16>
    *sys = (calData >> 6) & 0x03;
   b71c2:	0983      	lsrs	r3, r0, #6
   b71c4:	7033      	strb	r3, [r6, #0]
  if (gyro != NULL) {
   b71c6:	b115      	cbz	r5, b71ce <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x1e>
    *gyro = (calData >> 4) & 0x03;
   b71c8:	f3c0 1301 	ubfx	r3, r0, #4, #2
   b71cc:	702b      	strb	r3, [r5, #0]
  if (accel != NULL) {
   b71ce:	b114      	cbz	r4, b71d6 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x26>
    *accel = (calData >> 2) & 0x03;
   b71d0:	f3c0 0381 	ubfx	r3, r0, #2, #2
   b71d4:	7023      	strb	r3, [r4, #0]
  if (mag != NULL) {
   b71d6:	b117      	cbz	r7, b71de <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x2e>
    *mag = calData & 0x03;
   b71d8:	f000 0003 	and.w	r0, r0, #3
   b71dc:	7038      	strb	r0, [r7, #0]
}
   b71de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b71e0 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>:
bool Adafruit_BNO055::isFullyCalibrated() {
   b71e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b71e2:	4604      	mov	r4, r0
  getCalibration(&system, &gyro, &accel, &mag);
   b71e4:	f10d 030f 	add.w	r3, sp, #15
   b71e8:	9300      	str	r3, [sp, #0]
   b71ea:	f10d 020d 	add.w	r2, sp, #13
   b71ee:	f10d 030e 	add.w	r3, sp, #14
   b71f2:	a903      	add	r1, sp, #12
   b71f4:	f7ff ffdc 	bl	b71b0 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
  switch (_mode) {
   b71f8:	7c23      	ldrb	r3, [r4, #16]
   b71fa:	3b01      	subs	r3, #1
   b71fc:	2b09      	cmp	r3, #9
   b71fe:	d817      	bhi.n	b7230 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x50>
   b7200:	e8df f003 	tbb	[pc, r3]
   b7204:	1e102205 	.word	0x1e102205
   b7208:	0c16130c 	.word	0x0c16130c
   b720c:	101e      	.short	0x101e
    return (accel == 3);
   b720e:	f89d 000e 	ldrb.w	r0, [sp, #14]
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   b7212:	1ec3      	subs	r3, r0, #3
   b7214:	4258      	negs	r0, r3
   b7216:	4158      	adcs	r0, r3
}
   b7218:	b004      	add	sp, #16
   b721a:	bd10      	pop	{r4, pc}
    return (accel == 3 && gyro == 3);
   b721c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    return (mag == 3 && gyro == 3);
   b7220:	2b03      	cmp	r3, #3
   b7222:	d114      	bne.n	b724e <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   b7224:	f89d 000d 	ldrb.w	r0, [sp, #13]
   b7228:	e7f3      	b.n	b7212 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
   b722a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b722e:	e7f7      	b.n	b7220 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x40>
    return (system == 3 && gyro == 3 && accel == 3 && mag == 3);
   b7230:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b7234:	2b03      	cmp	r3, #3
   b7236:	d10a      	bne.n	b724e <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   b7238:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b723c:	2b03      	cmp	r3, #3
   b723e:	d106      	bne.n	b724e <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   b7240:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b7244:	2b03      	cmp	r3, #3
   b7246:	d102      	bne.n	b724e <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x6e>
   b7248:	f89d 000f 	ldrb.w	r0, [sp, #15]
   b724c:	e7e1      	b.n	b7212 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x32>
    return (accel == 3 && mag == 3);
   b724e:	2000      	movs	r0, #0
   b7250:	e7e2      	b.n	b7218 <_ZN15Adafruit_BNO05517isFullyCalibratedEv+0x38>

000b7252 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t>:
    adafruit_bno055_offsets_t &offsets_type) {
   b7252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7256:	4604      	mov	r4, r0
   b7258:	460d      	mov	r5, r1
  if (isFullyCalibrated()) {
   b725a:	f7ff ffc1 	bl	b71e0 <_ZN15Adafruit_BNO05517isFullyCalibratedEv>
   b725e:	4606      	mov	r6, r0
   b7260:	2800      	cmp	r0, #0
   b7262:	f000 8091 	beq.w	b7388 <_ZN15Adafruit_BNO05516getSensorOffsetsER25adafruit_bno055_offsets_t+0x136>
    setMode(OPERATION_MODE_CONFIG);
   b7266:	2100      	movs	r1, #0
   b7268:	4620      	mov	r0, r4
    adafruit_bno055_opmode_t lastMode = _mode;
   b726a:	f894 8010 	ldrb.w	r8, [r4, #16]
    setMode(OPERATION_MODE_CONFIG);
   b726e:	f7ff fe66 	bl	b6f3e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
    delay(25);
   b7272:	2019      	movs	r0, #25
   b7274:	f001 feee 	bl	b9054 <delay>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   b7278:	2156      	movs	r1, #86	; 0x56
   b727a:	4620      	mov	r0, r4
   b727c:	f7ff ff16 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   b7280:	2155      	movs	r1, #85	; 0x55
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   b7282:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_X_LSB_ADDR));
   b7284:	4620      	mov	r0, r4
   b7286:	f7ff ff11 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_x = (read8(ACCEL_OFFSET_X_MSB_ADDR) << 8) |
   b728a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   b728e:	8028      	strh	r0, [r5, #0]
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   b7290:	2158      	movs	r1, #88	; 0x58
   b7292:	4620      	mov	r0, r4
   b7294:	f7ff ff0a 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   b7298:	2157      	movs	r1, #87	; 0x57
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   b729a:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Y_LSB_ADDR));
   b729c:	4620      	mov	r0, r4
   b729e:	f7ff ff05 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_y = (read8(ACCEL_OFFSET_Y_MSB_ADDR) << 8) |
   b72a2:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   b72a6:	8068      	strh	r0, [r5, #2]
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   b72a8:	215a      	movs	r1, #90	; 0x5a
   b72aa:	4620      	mov	r0, r4
   b72ac:	f7ff fefe 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   b72b0:	2159      	movs	r1, #89	; 0x59
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   b72b2:	4607      	mov	r7, r0
                                  (read8(ACCEL_OFFSET_Z_LSB_ADDR));
   b72b4:	4620      	mov	r0, r4
   b72b6:	f7ff fef9 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    offsets_type.accel_offset_z = (read8(ACCEL_OFFSET_Z_MSB_ADDR) << 8) |
   b72ba:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   b72be:	80a8      	strh	r0, [r5, #4]
        (read8(MAG_OFFSET_X_MSB_ADDR) << 8) | (read8(MAG_OFFSET_X_LSB_ADDR));
   b72c0:	215c      	movs	r1, #92	; 0x5c
   b72c2:	4620      	mov	r0, r4
   b72c4:	f7ff fef2 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b72c8:	215b      	movs	r1, #91	; 0x5b
   b72ca:	4607      	mov	r7, r0
   b72cc:	4620      	mov	r0, r4
   b72ce:	f7ff feed 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b72d2:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_x =
   b72d6:	80e8      	strh	r0, [r5, #6]
        (read8(MAG_OFFSET_Y_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Y_LSB_ADDR));
   b72d8:	215e      	movs	r1, #94	; 0x5e
   b72da:	4620      	mov	r0, r4
   b72dc:	f7ff fee6 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b72e0:	215d      	movs	r1, #93	; 0x5d
   b72e2:	4607      	mov	r7, r0
   b72e4:	4620      	mov	r0, r4
   b72e6:	f7ff fee1 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b72ea:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_y =
   b72ee:	8128      	strh	r0, [r5, #8]
        (read8(MAG_OFFSET_Z_MSB_ADDR) << 8) | (read8(MAG_OFFSET_Z_LSB_ADDR));
   b72f0:	2160      	movs	r1, #96	; 0x60
   b72f2:	4620      	mov	r0, r4
   b72f4:	f7ff feda 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b72f8:	215f      	movs	r1, #95	; 0x5f
   b72fa:	4607      	mov	r7, r0
   b72fc:	4620      	mov	r0, r4
   b72fe:	f7ff fed5 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b7302:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_offset_z =
   b7306:	8168      	strh	r0, [r5, #10]
        (read8(GYRO_OFFSET_X_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_X_LSB_ADDR));
   b7308:	2162      	movs	r1, #98	; 0x62
   b730a:	4620      	mov	r0, r4
   b730c:	f7ff fece 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b7310:	2161      	movs	r1, #97	; 0x61
   b7312:	4607      	mov	r7, r0
   b7314:	4620      	mov	r0, r4
   b7316:	f7ff fec9 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b731a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_x =
   b731e:	81a8      	strh	r0, [r5, #12]
        (read8(GYRO_OFFSET_Y_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Y_LSB_ADDR));
   b7320:	2164      	movs	r1, #100	; 0x64
   b7322:	4620      	mov	r0, r4
   b7324:	f7ff fec2 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b7328:	2163      	movs	r1, #99	; 0x63
   b732a:	4607      	mov	r7, r0
   b732c:	4620      	mov	r0, r4
   b732e:	f7ff febd 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b7332:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_y =
   b7336:	81e8      	strh	r0, [r5, #14]
        (read8(GYRO_OFFSET_Z_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Z_LSB_ADDR));
   b7338:	2166      	movs	r1, #102	; 0x66
   b733a:	4620      	mov	r0, r4
   b733c:	f7ff feb6 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b7340:	2165      	movs	r1, #101	; 0x65
   b7342:	4607      	mov	r7, r0
   b7344:	4620      	mov	r0, r4
   b7346:	f7ff feb1 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b734a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.gyro_offset_z =
   b734e:	8228      	strh	r0, [r5, #16]
        (read8(ACCEL_RADIUS_MSB_ADDR) << 8) | (read8(ACCEL_RADIUS_LSB_ADDR));
   b7350:	2168      	movs	r1, #104	; 0x68
   b7352:	4620      	mov	r0, r4
   b7354:	f7ff feaa 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b7358:	2167      	movs	r1, #103	; 0x67
   b735a:	4607      	mov	r7, r0
   b735c:	4620      	mov	r0, r4
   b735e:	f7ff fea5 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b7362:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.accel_radius =
   b7366:	8268      	strh	r0, [r5, #18]
        (read8(MAG_RADIUS_MSB_ADDR) << 8) | (read8(MAG_RADIUS_LSB_ADDR));
   b7368:	216a      	movs	r1, #106	; 0x6a
   b736a:	4620      	mov	r0, r4
   b736c:	f7ff fe9e 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b7370:	2169      	movs	r1, #105	; 0x69
   b7372:	4607      	mov	r7, r0
   b7374:	4620      	mov	r0, r4
   b7376:	f7ff fe99 	bl	b70ac <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   b737a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    offsets_type.mag_radius =
   b737e:	82a8      	strh	r0, [r5, #20]
    setMode(lastMode);
   b7380:	4641      	mov	r1, r8
   b7382:	4620      	mov	r0, r4
   b7384:	f7ff fddb 	bl	b6f3e <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
   b7388:	4630      	mov	r0, r6
   b738a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b738e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte *buffer,
                              uint8_t len) {
   b738e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t reg_buf[1] = {(uint8_t)reg};
   b7390:	f88d 100c 	strb.w	r1, [sp, #12]
  return i2c_dev->write_then_read(reg_buf, 1, buffer, len);
   b7394:	2100      	movs	r1, #0
   b7396:	e9cd 3100 	strd	r3, r1, [sp]
   b739a:	4613      	mov	r3, r2
   b739c:	a903      	add	r1, sp, #12
   b739e:	2201      	movs	r2, #1
   b73a0:	6880      	ldr	r0, [r0, #8]
   b73a2:	f7ff fc31 	bl	b6c08 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
}
   b73a6:	b005      	add	sp, #20
   b73a8:	f85d fb04 	ldr.w	pc, [sp], #4

000b73ac <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
   b73ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b73ae:	460e      	mov	r6, r1
   b73b0:	4615      	mov	r5, r2

namespace imu {

template <uint8_t N> class Vector {
public:
  Vector() { memset(p_vec, 0, sizeof(double) * N); }
   b73b2:	2100      	movs	r1, #0
   b73b4:	2218      	movs	r2, #24
   b73b6:	4604      	mov	r4, r0
   b73b8:	f005 fdfa 	bl	bcfb0 <memset>
  memset(buffer, 0, 6);
   b73bc:	2300      	movs	r3, #0
   b73be:	9300      	str	r3, [sp, #0]
   b73c0:	f8ad 3004 	strh.w	r3, [sp, #4]
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
   b73c4:	4630      	mov	r0, r6
   b73c6:	2306      	movs	r3, #6
   b73c8:	466a      	mov	r2, sp
   b73ca:	4629      	mov	r1, r5
   b73cc:	f7ff ffdf 	bl	b738e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  switch (vector_type) {
   b73d0:	2d1a      	cmp	r5, #26
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   b73d2:	f9bd 0000 	ldrsh.w	r0, [sp]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   b73d6:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   b73da:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
  switch (vector_type) {
   b73de:	d00d      	beq.n	b73fc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x50>
   b73e0:	d808      	bhi.n	b73f4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x48>
   b73e2:	2d0e      	cmp	r5, #14
   b73e4:	d00a      	beq.n	b73fc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x50>
   b73e6:	2d14      	cmp	r5, #20
   b73e8:	d008      	beq.n	b73fc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x50>
   b73ea:	2d08      	cmp	r5, #8
   b73ec:	d021      	beq.n	b7432 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x86>
}
   b73ee:	4620      	mov	r0, r4
   b73f0:	b003      	add	sp, #12
   b73f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (vector_type) {
   b73f4:	2d28      	cmp	r5, #40	; 0x28
   b73f6:	d01c      	beq.n	b7432 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x86>
   b73f8:	2d2e      	cmp	r5, #46	; 0x2e
   b73fa:	e7f7      	b.n	b73ec <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x40>
    xyz[0] = ((double)x) / 16.0;
   b73fc:	f004 ff32 	bl	bc264 <__aeabi_i2d>
   b7400:	4b18      	ldr	r3, [pc, #96]	; (b7464 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xb8>)
   b7402:	2200      	movs	r2, #0
   b7404:	f004 ff98 	bl	bc338 <__aeabi_dmul>
   b7408:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 16.0;
   b740c:	4638      	mov	r0, r7
   b740e:	f004 ff29 	bl	bc264 <__aeabi_i2d>
   b7412:	4b14      	ldr	r3, [pc, #80]	; (b7464 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xb8>)
   b7414:	2200      	movs	r2, #0
   b7416:	f004 ff8f 	bl	bc338 <__aeabi_dmul>
   b741a:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 16.0;
   b741e:	4630      	mov	r0, r6
   b7420:	f004 ff20 	bl	bc264 <__aeabi_i2d>
   b7424:	4b0f      	ldr	r3, [pc, #60]	; (b7464 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xb8>)
   b7426:	2200      	movs	r2, #0
   b7428:	f004 ff86 	bl	bc338 <__aeabi_dmul>
    xyz[2] = ((double)z) / 100.0;
   b742c:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return xyz;
   b7430:	e7dd      	b.n	b73ee <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x42>
    xyz[0] = ((double)x) / 100.0;
   b7432:	f004 ff17 	bl	bc264 <__aeabi_i2d>
   b7436:	4b0c      	ldr	r3, [pc, #48]	; (b7468 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xbc>)
   b7438:	2200      	movs	r2, #0
   b743a:	f005 f8a7 	bl	bc58c <__aeabi_ddiv>
   b743e:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 100.0;
   b7442:	4638      	mov	r0, r7
   b7444:	f004 ff0e 	bl	bc264 <__aeabi_i2d>
   b7448:	4b07      	ldr	r3, [pc, #28]	; (b7468 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xbc>)
   b744a:	2200      	movs	r2, #0
   b744c:	f005 f89e 	bl	bc58c <__aeabi_ddiv>
   b7450:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 100.0;
   b7454:	4630      	mov	r0, r6
   b7456:	f004 ff05 	bl	bc264 <__aeabi_i2d>
   b745a:	4b03      	ldr	r3, [pc, #12]	; (b7468 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xbc>)
   b745c:	2200      	movs	r2, #0
   b745e:	f005 f895 	bl	bc58c <__aeabi_ddiv>
   b7462:	e7e3      	b.n	b742c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x80>
   b7464:	3fb00000 	.word	0x3fb00000
   b7468:	40590000 	.word	0x40590000

000b746c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
   b746c:	b530      	push	{r4, r5, lr}
   b746e:	460c      	mov	r4, r1
   b7470:	b087      	sub	sp, #28
   b7472:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b7474:	2220      	movs	r2, #32
   b7476:	2100      	movs	r1, #0
   b7478:	1d20      	adds	r0, r4, #4
   b747a:	f005 fd99 	bl	bcfb0 <memset>
  event->version = sizeof(sensors_event_t);
   b747e:	2324      	movs	r3, #36	; 0x24
   b7480:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b7482:	68eb      	ldr	r3, [r5, #12]
   b7484:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_ORIENTATION;
   b7486:	2303      	movs	r3, #3
   b7488:	60a3      	str	r3, [r4, #8]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b748a:	f000 ffcf 	bl	b842c <HAL_Timer_Get_Milli_Seconds>
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   b748e:	221a      	movs	r2, #26
  event->timestamp = millis();
   b7490:	6120      	str	r0, [r4, #16]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   b7492:	4629      	mov	r1, r5
   b7494:	4668      	mov	r0, sp
   b7496:	f7ff ff89 	bl	b73ac <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
   b749a:	e9dd 0100 	ldrd	r0, r1, [sp]
   b749e:	f005 fa43 	bl	bc928 <__aeabi_d2f>
   b74a2:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
   b74a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b74a8:	f005 fa3e 	bl	bc928 <__aeabi_d2f>
   b74ac:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
   b74ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b74b2:	f005 fa39 	bl	bc928 <__aeabi_d2f>
   b74b6:	61e0      	str	r0, [r4, #28]
}
   b74b8:	2001      	movs	r0, #1
   b74ba:	b007      	add	sp, #28
   b74bc:	bd30      	pop	{r4, r5, pc}

000b74be <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b74be:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b74c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b74c2:	db66      	blt.n	b7592 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b74c4:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b74c8:	428c      	cmp	r4, r1
   b74ca:	dd62      	ble.n	b7592 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b74cc:	2a00      	cmp	r2, #0
   b74ce:	db60      	blt.n	b7592 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b74d0:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b74d4:	4294      	cmp	r4, r2
   b74d6:	dd5c      	ble.n	b7592 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b74d8:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   b74da:	2c02      	cmp	r4, #2
   b74dc:	d05a      	beq.n	b7594 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   b74de:	2c03      	cmp	r4, #3
   b74e0:	d061      	beq.n	b75a6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   b74e2:	2c01      	cmp	r4, #1
   b74e4:	d104      	bne.n	b74f0 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   b74e6:	8904      	ldrh	r4, [r0, #8]
   b74e8:	43d2      	mvns	r2, r2
   b74ea:	4414      	add	r4, r2
      break;
   b74ec:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b74ee:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   b74f0:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   b74f4:	428c      	cmp	r4, r1
   b74f6:	bfa8      	it	ge
   b74f8:	460c      	movge	r4, r1
   b74fa:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   b74fc:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   b7500:	4294      	cmp	r4, r2
   b7502:	bfa8      	it	ge
   b7504:	4614      	movge	r4, r2
   b7506:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   b7508:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   b750c:	428c      	cmp	r4, r1
   b750e:	bfb8      	it	lt
   b7510:	460c      	movlt	r4, r1
   b7512:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   b7514:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   b7518:	4294      	cmp	r4, r2
   b751a:	bfb8      	it	lt
   b751c:	4614      	movlt	r4, r2
   b751e:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   b7520:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   b7524:	2c01      	cmp	r4, #1
   b7526:	d116      	bne.n	b7556 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   b7528:	2b01      	cmp	r3, #1
   b752a:	d042      	beq.n	b75b2 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   b752c:	2b02      	cmp	r3, #2
   b752e:	d051      	beq.n	b75d4 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   b7530:	b98b      	cbnz	r3, b7556 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   b7532:	2a00      	cmp	r2, #0
   b7534:	8905      	ldrh	r5, [r0, #8]
   b7536:	6b47      	ldr	r7, [r0, #52]	; 0x34
   b7538:	4614      	mov	r4, r2
   b753a:	bfb8      	it	lt
   b753c:	1dd4      	addlt	r4, r2, #7
   b753e:	10e4      	asrs	r4, r4, #3
   b7540:	fb14 1405 	smlabb	r4, r4, r5, r1
   b7544:	f002 0607 	and.w	r6, r2, #7
   b7548:	2501      	movs	r5, #1
   b754a:	fa05 f606 	lsl.w	r6, r5, r6
   b754e:	5d3d      	ldrb	r5, [r7, r4]
   b7550:	ea25 0506 	bic.w	r5, r5, r6
   b7554:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   b7556:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   b755a:	2c04      	cmp	r4, #4
   b755c:	d119      	bne.n	b7592 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   b755e:	8904      	ldrh	r4, [r0, #8]
   b7560:	fb14 f202 	smulbb	r2, r4, r2
   b7564:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   b7568:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   b756c:	f342 024f 	sbfx	r2, r2, #1, #16
   b7570:	eb02 0264 	add.w	r2, r2, r4, asr #1
   b7574:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
        uint8_t t = pixelptr[0] & 0x0F;
   b7576:	5ca0      	ldrb	r0, [r4, r2]
      if (x % 2 == 0) { // even, left nibble
   b7578:	07c9      	lsls	r1, r1, #31
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   b757a:	bf4b      	itete	mi
   b757c:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   b7580:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   b7584:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   b7588:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   b758c:	bf48      	it	mi
   b758e:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   b7590:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   b7592:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   b7594:	8904      	ldrh	r4, [r0, #8]
   b7596:	3c01      	subs	r4, #1
   b7598:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b759a:	8944      	ldrh	r4, [r0, #10]
   b759c:	43d2      	mvns	r2, r2
   b759e:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   b75a0:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b75a2:	b212      	sxth	r2, r2
      break;
   b75a4:	e7a4      	b.n	b74f0 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b75a6:	8944      	ldrh	r4, [r0, #10]
   b75a8:	3c01      	subs	r4, #1
   b75aa:	1a64      	subs	r4, r4, r1
      break;
   b75ac:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b75ae:	b222      	sxth	r2, r4
      break;
   b75b0:	e79e      	b.n	b74f0 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   b75b2:	2a00      	cmp	r2, #0
   b75b4:	8905      	ldrh	r5, [r0, #8]
   b75b6:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b75b8:	4614      	mov	r4, r2
   b75ba:	bfb8      	it	lt
   b75bc:	1dd4      	addlt	r4, r2, #7
   b75be:	10e4      	asrs	r4, r4, #3
   b75c0:	fb14 1405 	smlabb	r4, r4, r5, r1
   b75c4:	f002 0707 	and.w	r7, r2, #7
   b75c8:	2501      	movs	r5, #1
   b75ca:	40bd      	lsls	r5, r7
   b75cc:	5d37      	ldrb	r7, [r6, r4]
   b75ce:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b75d0:	5535      	strb	r5, [r6, r4]
        break;
   b75d2:	e7c0      	b.n	b7556 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b75d4:	2a00      	cmp	r2, #0
   b75d6:	8905      	ldrh	r5, [r0, #8]
   b75d8:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b75da:	4614      	mov	r4, r2
   b75dc:	bfb8      	it	lt
   b75de:	1dd4      	addlt	r4, r2, #7
   b75e0:	10e4      	asrs	r4, r4, #3
   b75e2:	fb14 1405 	smlabb	r4, r4, r5, r1
   b75e6:	f002 0707 	and.w	r7, r2, #7
   b75ea:	2501      	movs	r5, #1
   b75ec:	40bd      	lsls	r5, r7
   b75ee:	5d37      	ldrb	r7, [r6, r4]
   b75f0:	407d      	eors	r5, r7
   b75f2:	e7ed      	b.n	b75d0 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

000b75f4 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   b75f4:	b538      	push	{r3, r4, r5, lr}
   b75f6:	460d      	mov	r5, r1
   b75f8:	4611      	mov	r1, r2
   b75fa:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   b75fc:	b21a      	sxth	r2, r3
   b75fe:	b209      	sxth	r1, r1
   b7600:	f000 fa98 	bl	b7b34 <_ZN12Adafruit_GFXC1Ess>
   b7604:	9a06      	ldr	r2, [sp, #24]
   b7606:	4b0b      	ldr	r3, [pc, #44]	; (b7634 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   b7608:	62e2      	str	r2, [r4, #44]	; 0x2c
   b760a:	9a07      	ldr	r2, [sp, #28]
   b760c:	6023      	str	r3, [r4, #0]
   b760e:	2300      	movs	r3, #0
   b7610:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   b7614:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   b7618:	f04f 33ff 	mov.w	r3, #4294967295
   b761c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   b7620:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   b7624:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   b7626:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   b7628:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   b762c:	6523      	str	r3, [r4, #80]	; 0x50
}
   b762e:	4620      	mov	r0, r4
   b7630:	bd38      	pop	{r3, r4, r5, pc}
   b7632:	bf00      	nop
   b7634:	000bd95c 	.word	0x000bd95c

000b7638 <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   b7638:	b538      	push	{r3, r4, r5, lr}
   b763a:	4b0c      	ldr	r3, [pc, #48]	; (b766c <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   b763c:	6003      	str	r3, [r0, #0]
   b763e:	4604      	mov	r4, r0
  if (buffer) {
   b7640:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b7642:	b118      	cbz	r0, b764c <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   b7644:	f001 f92e 	bl	b88a4 <free>
    buffer = NULL;
   b7648:	2300      	movs	r3, #0
   b764a:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   b764c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b764e:	b135      	cbz	r5, b765e <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   b7650:	4628      	mov	r0, r5
   b7652:	f7ff f8df 	bl	b6814 <_ZN18Adafruit_SPIDeviceD1Ev>
   b7656:	2138      	movs	r1, #56	; 0x38
   b7658:	4628      	mov	r0, r5
   b765a:	f7fc fd20 	bl	b409e <_ZdlPvj>
  if (i2c_dev)
   b765e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7660:	b110      	cbz	r0, b7668 <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   b7662:	2110      	movs	r1, #16
   b7664:	f7fc fd1b 	bl	b409e <_ZdlPvj>
}
   b7668:	4620      	mov	r0, r4
   b766a:	bd38      	pop	{r3, r4, r5, pc}
   b766c:	000bd95c 	.word	0x000bd95c

000b7670 <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   b7670:	b530      	push	{r4, r5, lr}
   b7672:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   b7674:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   b7676:	f88d 100f 	strb.w	r1, [sp, #15]
   b767a:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   b767c:	b17d      	cbz	r5, b769e <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   b767e:	2300      	movs	r3, #0
   b7680:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   b7682:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   b7686:	f88d 3014 	strb.w	r3, [sp, #20]
   b768a:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   b768e:	2301      	movs	r3, #1
   b7690:	2202      	movs	r2, #2
   b7692:	a905      	add	r1, sp, #20
   b7694:	4628      	mov	r0, r5
   b7696:	f7ff fa49 	bl	b6b2c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   b769a:	b007      	add	sp, #28
   b769c:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   b769e:	4629      	mov	r1, r5
   b76a0:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   b76a4:	f002 f8c9 	bl	b983a <digitalWrite>
    spi_dev->write(&c, 1);
   b76a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b76aa:	9500      	str	r5, [sp, #0]
   b76ac:	462b      	mov	r3, r5
   b76ae:	2201      	movs	r2, #1
   b76b0:	f10d 010f 	add.w	r1, sp, #15
   b76b4:	f7ff f9a9 	bl	b6a0a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   b76b8:	e7ef      	b.n	b769a <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000b76ba <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   b76ba:	2900      	cmp	r1, #0
   b76bc:	bf14      	ite	ne
   b76be:	21a7      	movne	r1, #167	; 0xa7
   b76c0:	21a6      	moveq	r1, #166	; 0xa6
   b76c2:	f7ff bfd5 	b.w	b7670 <_ZN17Adafruit_GrayOLED12oled_commandEh>

000b76c6 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   b76c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   b76c8:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   b76ca:	b085      	sub	sp, #20
   b76cc:	4604      	mov	r4, r0
   b76ce:	460e      	mov	r6, r1
   b76d0:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   b76d2:	b165      	cbz	r5, b76ee <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   b76d4:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   b76d6:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   b76da:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   b76de:	2301      	movs	r3, #1
   b76e0:	9000      	str	r0, [sp, #0]
   b76e2:	9301      	str	r3, [sp, #4]
   b76e4:	4628      	mov	r0, r5
   b76e6:	f7ff fa21 	bl	b6b2c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   b76ea:	b005      	add	sp, #20
   b76ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   b76ee:	4629      	mov	r1, r5
   b76f0:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   b76f4:	f002 f8a1 	bl	b983a <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   b76f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b76fa:	9500      	str	r5, [sp, #0]
   b76fc:	462b      	mov	r3, r5
   b76fe:	463a      	mov	r2, r7
   b7700:	4631      	mov	r1, r6
   b7702:	f7ff f982 	bl	b6a0a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b7706:	e7f0      	b.n	b76ea <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000b7708 <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   b7708:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   b770a:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   b770e:	8903      	ldrh	r3, [r0, #8]
   b7710:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   b7714:	fb12 f203 	smulbb	r2, r2, r3
   b7718:	1dcb      	adds	r3, r1, #7
   b771a:	bf48      	it	mi
   b771c:	f101 030e 	addmi.w	r3, r1, #14
   b7720:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   b7722:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   b7724:	435a      	muls	r2, r3
   b7726:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b7728:	2100      	movs	r1, #0
   b772a:	f005 fc41 	bl	bcfb0 <memset>
  window_x1 = 0;
   b772e:	2300      	movs	r3, #0
   b7730:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   b7732:	8923      	ldrh	r3, [r4, #8]
   b7734:	3b01      	subs	r3, #1
   b7736:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   b7738:	8963      	ldrh	r3, [r4, #10]
   b773a:	3b01      	subs	r3, #1
   b773c:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   b773e:	bd10      	pop	{r4, pc}

000b7740 <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   b7740:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   b7742:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   b7744:	4604      	mov	r4, r0
   b7746:	460e      	mov	r6, r1
   b7748:	4615      	mov	r5, r2
  if ((!buffer) &&
   b774a:	b30b      	cbz	r3, b7790 <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   b774c:	2d00      	cmp	r5, #0
   b774e:	d133      	bne.n	b77b8 <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   b7750:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7752:	2b00      	cmp	r3, #0
   b7754:	d050      	beq.n	b77f8 <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   b7756:	2010      	movs	r0, #16
   b7758:	f7fc fc9d 	bl	b4096 <_Znwj>
   b775c:	4605      	mov	r5, r0
   b775e:	b118      	cbz	r0, b7768 <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   b7760:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b7762:	4631      	mov	r1, r6
   b7764:	f7ff f9b7 	bl	b6ad6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b7768:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   b776a:	b31d      	cbz	r5, b77b4 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   b776c:	2101      	movs	r1, #1
   b776e:	4628      	mov	r0, r5
   b7770:	f7ff f9cd 	bl	b6b0e <_ZN18Adafruit_I2CDevice5beginEb>
   b7774:	b1f0      	cbz	r0, b77b4 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   b7776:	4620      	mov	r0, r4
   b7778:	f7ff ffc6 	bl	b7708 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   b777c:	2300      	movs	r3, #0
   b777e:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   b7780:	8923      	ldrh	r3, [r4, #8]
   b7782:	3b01      	subs	r3, #1
   b7784:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   b7786:	8963      	ldrh	r3, [r4, #10]
   b7788:	3b01      	subs	r3, #1
   b778a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   b778c:	2001      	movs	r0, #1
   b778e:	e012      	b.n	b77b6 <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   b7790:	8923      	ldrh	r3, [r4, #8]
   b7792:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b7796:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   b779a:	fb10 f003 	smulbb	r0, r0, r3
   b779e:	1dd3      	adds	r3, r2, #7
   b77a0:	bf48      	it	mi
   b77a2:	f102 030e 	addmi.w	r3, r2, #14
   b77a6:	10db      	asrs	r3, r3, #3
   b77a8:	4358      	muls	r0, r3
   b77aa:	f001 f873 	bl	b8894 <malloc>
   b77ae:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   b77b0:	2800      	cmp	r0, #0
   b77b2:	d1cb      	bne.n	b774c <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   b77b4:	2000      	movs	r0, #0
}
   b77b6:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   b77b8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   b77ba:	2800      	cmp	r0, #0
   b77bc:	dbc8      	blt.n	b7750 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   b77be:	2101      	movs	r1, #1
   b77c0:	b280      	uxth	r0, r0
   b77c2:	f002 f829 	bl	b9818 <pinMode>
    digitalWrite(rstPin, HIGH);
   b77c6:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b77ca:	2101      	movs	r1, #1
   b77cc:	f002 f835 	bl	b983a <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   b77d0:	200a      	movs	r0, #10
   b77d2:	f001 fc3f 	bl	b9054 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b77d6:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b77da:	2100      	movs	r1, #0
   b77dc:	f002 f82d 	bl	b983a <digitalWrite>
    delay(10);                  // Wait 10 ms
   b77e0:	200a      	movs	r0, #10
   b77e2:	f001 fc37 	bl	b9054 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b77e6:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b77ea:	2101      	movs	r1, #1
   b77ec:	f002 f825 	bl	b983a <digitalWrite>
    delay(10);
   b77f0:	200a      	movs	r0, #10
   b77f2:	f001 fc2f 	bl	b9054 <delay>
   b77f6:	e7ab      	b.n	b7750 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   b77f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b77fa:	2800      	cmp	r0, #0
   b77fc:	d0da      	beq.n	b77b4 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   b77fe:	f7ff f812 	bl	b6826 <_ZN18Adafruit_SPIDevice5beginEv>
   b7802:	2800      	cmp	r0, #0
   b7804:	d0d6      	beq.n	b77b4 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b7806:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   b780a:	2101      	movs	r1, #1
   b780c:	f002 f804 	bl	b9818 <pinMode>
   b7810:	e7b1      	b.n	b7776 <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000b7812 <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   b7812:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   b7814:	2381      	movs	r3, #129	; 0x81
   b7816:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   b781a:	2202      	movs	r2, #2
   b781c:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   b781e:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   b7822:	f7ff ff50 	bl	b76c6 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   b7826:	b003      	add	sp, #12
   b7828:	f85d fb04 	ldr.w	pc, [sp], #4

000b782c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
   b782c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7830:	b085      	sub	sp, #20
   b7832:	461f      	mov	r7, r3
   b7834:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b7838:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b783c:	eba8 0902 	sub.w	r9, r8, r2
   b7840:	eba7 0a01 	sub.w	sl, r7, r1
   b7844:	f1b9 0f00 	cmp.w	r9, #0
   b7848:	bfb8      	it	lt
   b784a:	f1c9 0900 	rsblt	r9, r9, #0
   b784e:	f1ba 0f00 	cmp.w	sl, #0
   b7852:	bfb8      	it	lt
   b7854:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b7858:	45d1      	cmp	r9, sl
                             uint16_t color) {
   b785a:	4683      	mov	fp, r0
   b785c:	460c      	mov	r4, r1
   b785e:	4615      	mov	r5, r2
  if (steep) {
   b7860:	dd04      	ble.n	b786c <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b7862:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
   b7864:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
   b7866:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
   b7868:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
   b786a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b786c:	42bc      	cmp	r4, r7
   b786e:	dd05      	ble.n	b787c <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b7870:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
   b7872:	4645      	mov	r5, r8
   b7874:	4690      	mov	r8, r2
  if (x0 > x1) {
   b7876:	4622      	mov	r2, r4
   b7878:	463c      	mov	r4, r7
   b787a:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b787c:	1b3e      	subs	r6, r7, r4
   b787e:	b2b2      	uxth	r2, r6
   b7880:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b7882:	eba8 0205 	sub.w	r2, r8, r5
   b7886:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b788a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b788e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b7892:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b7896:	4545      	cmp	r5, r8
   b7898:	bfb4      	ite	lt
   b789a:	2201      	movlt	r2, #1
   b789c:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b78a0:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b78a2:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b78a4:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
   b78a6:	42bc      	cmp	r4, r7
   b78a8:	dc1c      	bgt.n	b78e4 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
    if (steep) {
      writePixel(y0, x0, color);
   b78aa:	f8db 2000 	ldr.w	r2, [fp]
   b78ae:	9303      	str	r3, [sp, #12]
    if (steep) {
   b78b0:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
   b78b2:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b78b6:	bfc7      	ittee	gt
   b78b8:	4629      	movgt	r1, r5
   b78ba:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
   b78bc:	462a      	movle	r2, r5
   b78be:	4621      	movle	r1, r4
   b78c0:	4658      	mov	r0, fp
   b78c2:	47c0      	blx	r8
    }
    err -= dy;
   b78c4:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
   b78c6:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b78c8:	1ab6      	subs	r6, r6, r2
   b78ca:	b2b1      	uxth	r1, r6
   b78cc:	b236      	sxth	r6, r6
    if (err < 0) {
   b78ce:	2e00      	cmp	r6, #0
   b78d0:	da05      	bge.n	b78de <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
      y0 += ystep;
   b78d2:	9a02      	ldr	r2, [sp, #8]
   b78d4:	4415      	add	r5, r2
      err += dx;
   b78d6:	9a00      	ldr	r2, [sp, #0]
   b78d8:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b78da:	b22d      	sxth	r5, r5
      err += dx;
   b78dc:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
   b78de:	3401      	adds	r4, #1
   b78e0:	b224      	sxth	r4, r4
   b78e2:	e7e0      	b.n	b78a6 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
    }
  }
}
   b78e4:	b005      	add	sp, #20
   b78e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b78ea <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
   b78ea:	4770      	bx	lr

000b78ec <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
   b78ec:	b410      	push	{r4}
  drawPixel(x, y, color);
   b78ee:	6804      	ldr	r4, [r0, #0]
   b78f0:	6924      	ldr	r4, [r4, #16]
   b78f2:	46a4      	mov	ip, r4
}
   b78f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
   b78f8:	4760      	bx	ip

000b78fa <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
   b78fa:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
   b78fc:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   b78fe:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
   b7902:	9502      	str	r5, [sp, #8]
   b7904:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b7906:	46a4      	mov	ip, r4
}
   b7908:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
   b790a:	4760      	bx	ip

000b790c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
   b790c:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
   b790e:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   b7910:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
   b7914:	9502      	str	r5, [sp, #8]
   b7916:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b7918:	46a4      	mov	ip, r4
}
   b791a:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
   b791c:	4760      	bx	ip

000b791e <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
   b791e:	b470      	push	{r4, r5, r6}
   b7920:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b7924:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
   b7928:	6804      	ldr	r4, [r0, #0]
   b792a:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b792e:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b7930:	46a4      	mov	ip, r4
}
   b7932:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
   b7934:	4760      	bx	ip

000b7936 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
   b7936:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b793a:	461c      	mov	r4, r3
  startWrite();
   b793c:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   b793e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   b7942:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   b7944:	4605      	mov	r5, r0
   b7946:	4616      	mov	r6, r2
  writeLine(x, y, x, y + h - 1, color);
   b7948:	3c01      	subs	r4, #1
   b794a:	4434      	add	r4, r6
                                 uint16_t color) {
   b794c:	460f      	mov	r7, r1
  writeLine(x, y, x, y + h - 1, color);
   b794e:	b224      	sxth	r4, r4
  startWrite();
   b7950:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
   b7952:	682b      	ldr	r3, [r5, #0]
   b7954:	f8cd 8004 	str.w	r8, [sp, #4]
   b7958:	9400      	str	r4, [sp, #0]
   b795a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b795c:	4628      	mov	r0, r5
   b795e:	463b      	mov	r3, r7
   b7960:	4632      	mov	r2, r6
   b7962:	4639      	mov	r1, r7
   b7964:	47a0      	blx	r4
  endWrite();
   b7966:	682b      	ldr	r3, [r5, #0]
   b7968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b796a:	4628      	mov	r0, r5
}
   b796c:	b002      	add	sp, #8
   b796e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   b7972:	4718      	bx	r3

000b7974 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
   b7974:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7978:	461d      	mov	r5, r3
  startWrite();
   b797a:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   b797c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   b7980:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   b7982:	4604      	mov	r4, r0
   b7984:	4617      	mov	r7, r2
   b7986:	460e      	mov	r6, r1
  startWrite();
   b7988:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
   b798a:	e9cd 7800 	strd	r7, r8, [sp]
   b798e:	6822      	ldr	r2, [r4, #0]
   b7990:	1e6b      	subs	r3, r5, #1
   b7992:	4433      	add	r3, r6
   b7994:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b7996:	4620      	mov	r0, r4
   b7998:	b21b      	sxth	r3, r3
   b799a:	463a      	mov	r2, r7
   b799c:	4631      	mov	r1, r6
   b799e:	47a8      	blx	r5
  endWrite();
   b79a0:	6823      	ldr	r3, [r4, #0]
   b79a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b79a4:	4620      	mov	r0, r4
}
   b79a6:	b002      	add	sp, #8
   b79a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   b79ac:	4718      	bx	r3

000b79ae <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   b79ae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b79b2:	461e      	mov	r6, r3
  startWrite();
   b79b4:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   b79b6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
   b79ba:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   b79bc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b79c0:	460c      	mov	r4, r1
   b79c2:	4605      	mov	r5, r0
   b79c4:	4617      	mov	r7, r2
  startWrite();
   b79c6:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
   b79c8:	4426      	add	r6, r4
   b79ca:	42b4      	cmp	r4, r6
    writeFastVLine(i, y, h, color);
   b79cc:	682b      	ldr	r3, [r5, #0]
  for (int16_t i = x; i < x + w; i++) {
   b79ce:	da0b      	bge.n	b79e8 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
   b79d0:	f8cd 8000 	str.w	r8, [sp]
   b79d4:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b79d8:	4621      	mov	r1, r4
   b79da:	464b      	mov	r3, r9
   b79dc:	463a      	mov	r2, r7
   b79de:	4628      	mov	r0, r5
   b79e0:	3401      	adds	r4, #1
   b79e2:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
   b79e4:	b224      	sxth	r4, r4
   b79e6:	e7f0      	b.n	b79ca <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
   b79e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b79ea:	4628      	mov	r0, r5
}
   b79ec:	b002      	add	sp, #8
   b79ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   b79f2:	4718      	bx	r3

000b79f4 <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b79f4:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b79f6:	6802      	ldr	r2, [r0, #0]
   b79f8:	9101      	str	r1, [sp, #4]
   b79fa:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b79fe:	9100      	str	r1, [sp, #0]
   b7a00:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b7a02:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b7a06:	2200      	movs	r2, #0
   b7a08:	4611      	mov	r1, r2
   b7a0a:	47a0      	blx	r4
}
   b7a0c:	b002      	add	sp, #8
   b7a0e:	bd10      	pop	{r4, pc}

000b7a10 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
   b7a10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  // Update in subclasses if desired!
  if (x0 == x1) {
   b7a14:	4299      	cmp	r1, r3
                            uint16_t color) {
   b7a16:	4616      	mov	r6, r2
   b7a18:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b7a1c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if (y0 > y1)
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b7a20:	6802      	ldr	r2, [r0, #0]
                            uint16_t color) {
   b7a22:	4680      	mov	r8, r0
   b7a24:	460d      	mov	r5, r1
   b7a26:	461c      	mov	r4, r3
  if (x0 == x1) {
   b7a28:	d113      	bne.n	b7a52 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
    if (y0 > y1)
   b7a2a:	42be      	cmp	r6, r7
   b7a2c:	bfc8      	it	gt
   b7a2e:	4633      	movgt	r3, r6
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b7a30:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    if (y0 > y1)
   b7a34:	bfc4      	itt	gt
   b7a36:	463e      	movgt	r6, r7
   b7a38:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b7a3a:	1c7b      	adds	r3, r7, #1
   b7a3c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b7a3e:	1b9b      	subs	r3, r3, r6
  } else if (y0 == y1) {
    if (x0 > x1)
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7a40:	b21b      	sxth	r3, r3
   b7a42:	4632      	mov	r2, r6
   b7a44:	4629      	mov	r1, r5
   b7a46:	4640      	mov	r0, r8
   b7a48:	46a4      	mov	ip, r4
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
   b7a4a:	b003      	add	sp, #12
   b7a4c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7a50:	4760      	bx	ip
  } else if (y0 == y1) {
   b7a52:	42be      	cmp	r6, r7
   b7a54:	d10a      	bne.n	b7a6c <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
    if (x0 > x1)
   b7a56:	4299      	cmp	r1, r3
   b7a58:	bfc2      	ittt	gt
   b7a5a:	460b      	movgt	r3, r1
   b7a5c:	4625      	movgt	r5, r4
   b7a5e:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7a60:	1c63      	adds	r3, r4, #1
   b7a62:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b7a66:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7a68:	1b5b      	subs	r3, r3, r5
   b7a6a:	e7e9      	b.n	b7a40 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
    startWrite();
   b7a6c:	6953      	ldr	r3, [r2, #20]
   b7a6e:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
   b7a70:	e9cd 7900 	strd	r7, r9, [sp]
   b7a74:	f8d8 3000 	ldr.w	r3, [r8]
   b7a78:	4640      	mov	r0, r8
   b7a7a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b7a7c:	4632      	mov	r2, r6
   b7a7e:	4623      	mov	r3, r4
   b7a80:	4629      	mov	r1, r5
   b7a82:	47b8      	blx	r7
    endWrite();
   b7a84:	f8d8 3000 	ldr.w	r3, [r8]
   b7a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7a8a:	4640      	mov	r0, r8
}
   b7a8c:	b003      	add	sp, #12
   b7a8e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
   b7a92:	4718      	bx	r3

000b7a94 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   b7a94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7a98:	461d      	mov	r5, r3
  startWrite();
   b7a9a:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   b7a9c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
   b7aa0:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   b7aa2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b7aa6:	4604      	mov	r4, r0
   b7aa8:	460f      	mov	r7, r1
   b7aaa:	4616      	mov	r6, r2
  startWrite();
   b7aac:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
   b7aae:	6823      	ldr	r3, [r4, #0]
   b7ab0:	f8cd 8000 	str.w	r8, [sp]
   b7ab4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b7ab8:	4632      	mov	r2, r6
   b7aba:	462b      	mov	r3, r5
   b7abc:	4639      	mov	r1, r7
   b7abe:	4620      	mov	r0, r4
   b7ac0:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
   b7ac2:	6823      	ldr	r3, [r4, #0]
   b7ac4:	f8cd 8000 	str.w	r8, [sp]
   b7ac8:	f109 32ff 	add.w	r2, r9, #4294967295
   b7acc:	4432      	add	r2, r6
   b7ace:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b7ad2:	4639      	mov	r1, r7
   b7ad4:	462b      	mov	r3, r5
   b7ad6:	4620      	mov	r0, r4
   b7ad8:	b212      	sxth	r2, r2
   b7ada:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
   b7adc:	6823      	ldr	r3, [r4, #0]
   b7ade:	f8cd 8000 	str.w	r8, [sp]
   b7ae2:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b7ae6:	4632      	mov	r2, r6
   b7ae8:	464b      	mov	r3, r9
   b7aea:	4639      	mov	r1, r7
   b7aec:	4620      	mov	r0, r4
   b7aee:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
   b7af0:	1e6b      	subs	r3, r5, #1
   b7af2:	19d9      	adds	r1, r3, r7
   b7af4:	6823      	ldr	r3, [r4, #0]
   b7af6:	f8cd 8000 	str.w	r8, [sp]
   b7afa:	6a1d      	ldr	r5, [r3, #32]
   b7afc:	4620      	mov	r0, r4
   b7afe:	464b      	mov	r3, r9
   b7b00:	4632      	mov	r2, r6
   b7b02:	b209      	sxth	r1, r1
   b7b04:	47a8      	blx	r5
  endWrite();
   b7b06:	6823      	ldr	r3, [r4, #0]
   b7b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7b0a:	4620      	mov	r0, r4
}
   b7b0c:	b002      	add	sp, #8
   b7b0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   b7b12:	4718      	bx	r3

000b7b14 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
   b7b14:	4770      	bx	lr

000b7b16 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b7b16:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b7b1a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b7b1e:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
   b7b20:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
   b7b22:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b7b26:	bf59      	ittee	pl
   b7b28:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b7b2a:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
   b7b2c:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b7b2e:	81c3      	strhmi	r3, [r0, #14]
}
   b7b30:	4770      	bx	lr
	...

000b7b34 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   b7b34:	b530      	push	{r4, r5, lr}
   b7b36:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
   b7b38:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
   b7b3a:	4a07      	ldr	r2, [pc, #28]	; (b7b58 <_ZN12Adafruit_GFXC1Ess+0x24>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   b7b3c:	4d07      	ldr	r5, [pc, #28]	; (b7b5c <_ZN12Adafruit_GFXC1Ess+0x28>)
   b7b3e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b7b40:	2400      	movs	r4, #0
  _width = WIDTH;
   b7b42:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
   b7b44:	f04f 31ff 	mov.w	r1, #4294967295
   b7b48:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b7b4c:	6044      	str	r4, [r0, #4]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   b7b4e:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
   b7b50:	6104      	str	r4, [r0, #16]
  _cp437 = false;
   b7b52:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
   b7b54:	6204      	str	r4, [r0, #32]
}
   b7b56:	bd30      	pop	{r4, r5, pc}
   b7b58:	01000101 	.word	0x01000101
   b7b5c:	000bdeb8 	.word	0x000bdeb8

000b7b60 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
   b7b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b64:	b089      	sub	sp, #36	; 0x24
   b7b66:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
   b7b6a:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
   b7b6c:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b7b70:	9304      	str	r3, [sp, #16]
   b7b72:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  startWrite();
   b7b76:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
   b7b78:	9305      	str	r3, [sp, #20]
   b7b7a:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b7b7e:	4604      	mov	r4, r0
  startWrite();
   b7b80:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b7b82:	f118 0207 	adds.w	r2, r8, #7
  startWrite();
   b7b86:	f04f 0600 	mov.w	r6, #0
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b7b8a:	bf48      	it	mi
   b7b8c:	f108 020e 	addmi.w	r2, r8, #14
   b7b90:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
   b7b94:	9601      	str	r6, [sp, #4]
  uint8_t byte = 0;
   b7b96:	4635      	mov	r5, r6
   b7b98:	9b03      	ldr	r3, [sp, #12]
   b7b9a:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
   b7b9c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b7ba0:	189a      	adds	r2, r3, r2
   b7ba2:	9b05      	ldr	r3, [sp, #20]
   b7ba4:	428b      	cmp	r3, r1
   b7ba6:	b212      	sxth	r2, r2
   b7ba8:	dd27      	ble.n	b7bfa <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b7baa:	9b04      	ldr	r3, [sp, #16]
   b7bac:	4433      	add	r3, r6
  for (int16_t j = 0; j < h; j++, y++) {
   b7bae:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b7bb2:	9306      	str	r3, [sp, #24]
   b7bb4:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
   b7bb8:	4580      	cmp	r8, r0
   b7bba:	fa1f f189 	uxth.w	r1, r9
   b7bbe:	dd17      	ble.n	b7bf0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
      if (i & 7)
   b7bc0:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b7bc2:	bf05      	ittet	eq
   b7bc4:	9b06      	ldreq	r3, [sp, #24]
   b7bc6:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
   b7bc8:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b7bca:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
   b7bcc:	bf18      	it	ne
   b7bce:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
   b7bd0:	062b      	lsls	r3, r5, #24
   b7bd2:	d50a      	bpl.n	b7bea <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
        writePixel(x + i, y, color);
   b7bd4:	9b02      	ldr	r3, [sp, #8]
   b7bd6:	6820      	ldr	r0, [r4, #0]
   b7bd8:	9207      	str	r2, [sp, #28]
   b7bda:	4419      	add	r1, r3
   b7bdc:	6983      	ldr	r3, [r0, #24]
   b7bde:	b209      	sxth	r1, r1
   b7be0:	461f      	mov	r7, r3
   b7be2:	4620      	mov	r0, r4
   b7be4:	4653      	mov	r3, sl
   b7be6:	47b8      	blx	r7
   b7be8:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
   b7bea:	f109 0901 	add.w	r9, r9, #1
   b7bee:	e7e1      	b.n	b7bb4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
  for (int16_t j = 0; j < h; j++, y++) {
   b7bf0:	9b01      	ldr	r3, [sp, #4]
   b7bf2:	3301      	adds	r3, #1
   b7bf4:	9301      	str	r3, [sp, #4]
   b7bf6:	445e      	add	r6, fp
   b7bf8:	e7ce      	b.n	b7b98 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
  endWrite();
   b7bfa:	6823      	ldr	r3, [r4, #0]
   b7bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7bfe:	4620      	mov	r0, r4
}
   b7c00:	b009      	add	sp, #36	; 0x24
   b7c02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
   b7c06:	4718      	bx	r3

000b7c08 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
   b7c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c0c:	ed2d 8b02 	vpush	{d8}
   b7c10:	b091      	sub	sp, #68	; 0x44
   b7c12:	4616      	mov	r6, r2
  if (!gfxFont) { // 'Classic' built-in font
   b7c14:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
   b7c16:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b7c1a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b7c1e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b7c22:	9103      	str	r1, [sp, #12]
   b7c24:	461f      	mov	r7, r3
   b7c26:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b7c2a:	9304      	str	r3, [sp, #16]
   b7c2c:	4683      	mov	fp, r0
  if (!gfxFont) { // 'Classic' built-in font
   b7c2e:	2a00      	cmp	r2, #0
   b7c30:	f040 80c5 	bne.w	b7dbe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
   b7c34:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b7c38:	428b      	cmp	r3, r1
   b7c3a:	f340 814c 	ble.w	b7ed6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b7c3e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b7c42:	42b3      	cmp	r3, r6
   b7c44:	f340 8147 	ble.w	b7ed6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
   b7c48:	2306      	movs	r3, #6
   b7c4a:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
   b7c4e:	2b00      	cmp	r3, #0
   b7c50:	f340 8141 	ble.w	b7ed6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
   b7c54:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
   b7c58:	2b00      	cmp	r3, #0
   b7c5a:	f340 813c 	ble.w	b7ed6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
   b7c5e:	7f03      	ldrb	r3, [r0, #28]
   b7c60:	b91b      	cbnz	r3, b7c6a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b7c62:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
   b7c64:	bf84      	itt	hi
   b7c66:	3701      	addhi	r7, #1
   b7c68:	b2ff      	uxtbhi	r7, r7
    startWrite();
   b7c6a:	f8db 3000 	ldr.w	r3, [fp]
   b7c6e:	4658      	mov	r0, fp
   b7c70:	695b      	ldr	r3, [r3, #20]
   b7c72:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b7c74:	2205      	movs	r2, #5
   b7c76:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   b7c78:	2200      	movs	r2, #0
   b7c7a:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b7c7c:	4a98      	ldr	r2, [pc, #608]	; (b7ee0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b7c7e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b7c82:	18d3      	adds	r3, r2, r3
   b7c84:	930c      	str	r3, [sp, #48]	; 0x30
            writePixel(x + i, y + j, color);
   b7c86:	b2b3      	uxth	r3, r6
   b7c88:	9306      	str	r3, [sp, #24]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b7c8a:	9a05      	ldr	r2, [sp, #20]
   b7c8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b7c8e:	5c9b      	ldrb	r3, [r3, r2]
   b7c90:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   b7c92:	b2ab      	uxth	r3, r5
   b7c94:	930b      	str	r3, [sp, #44]	; 0x2c
   b7c96:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b7c9a:	9308      	str	r3, [sp, #32]
   b7c9c:	9b03      	ldr	r3, [sp, #12]
   b7c9e:	fb02 f905 	mul.w	r9, r2, r5
   b7ca2:	fa19 f983 	uxtah	r9, r9, r3
   b7ca6:	fa0f f389 	sxth.w	r3, r9
   b7caa:	ee08 3a10 	vmov	s16, r3
   b7cae:	2308      	movs	r3, #8
   b7cb0:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
   b7cb2:	9b03      	ldr	r3, [sp, #12]
   b7cb4:	eb02 0a03 	add.w	sl, r2, r3
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   b7cb8:	f04f 0900 	mov.w	r9, #0
            writePixel(x + i, y + j, bg);
   b7cbc:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
   b7cc0:	9a07      	ldr	r2, [sp, #28]
            writePixel(x + i, y + j, color);
   b7cc2:	f8db 3000 	ldr.w	r3, [fp]
        if (line & 1) {
   b7cc6:	07d2      	lsls	r2, r2, #31
   b7cc8:	d552      	bpl.n	b7d70 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
   b7cca:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
   b7ccc:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
   b7cd0:	d13e      	bne.n	b7d50 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b7cd2:	2c01      	cmp	r4, #1
   b7cd4:	d13c      	bne.n	b7d50 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
   b7cd6:	699b      	ldr	r3, [r3, #24]
   b7cd8:	9906      	ldr	r1, [sp, #24]
   b7cda:	461f      	mov	r7, r3
   b7cdc:	9b04      	ldr	r3, [sp, #16]
   b7cde:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
   b7ce0:	b212      	sxth	r2, r2
   b7ce2:	4651      	mov	r1, sl
   b7ce4:	4658      	mov	r0, fp
   b7ce6:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   b7ce8:	f109 0301 	add.w	r3, r9, #1
   b7cec:	fa4f f983 	sxtb.w	r9, r3
   b7cf0:	9b07      	ldr	r3, [sp, #28]
   b7cf2:	085b      	lsrs	r3, r3, #1
   b7cf4:	9307      	str	r3, [sp, #28]
   b7cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7cf8:	3b01      	subs	r3, #1
   b7cfa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b7cfe:	930a      	str	r3, [sp, #40]	; 0x28
   b7d00:	d1de      	bne.n	b7cc0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   b7d02:	9f05      	ldr	r7, [sp, #20]
   b7d04:	3701      	adds	r7, #1
   b7d06:	b27b      	sxtb	r3, r7
   b7d08:	9305      	str	r3, [sp, #20]
   b7d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7d0c:	3b01      	subs	r3, #1
   b7d0e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b7d12:	9309      	str	r3, [sp, #36]	; 0x24
   b7d14:	d1b9      	bne.n	b7c8a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
   b7d16:	9b04      	ldr	r3, [sp, #16]
   b7d18:	4543      	cmp	r3, r8
   b7d1a:	d00f      	beq.n	b7d3c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
   b7d1c:	2d01      	cmp	r5, #1
        writeFastVLine(x + 5, y, 8, bg);
   b7d1e:	f8db 3000 	ldr.w	r3, [fp]
      if (size_x == 1 && size_y == 1)
   b7d22:	d13b      	bne.n	b7d9c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b7d24:	2c01      	cmp	r4, #1
   b7d26:	d139      	bne.n	b7d9c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
   b7d28:	9908      	ldr	r1, [sp, #32]
   b7d2a:	f8cd 8000 	str.w	r8, [sp]
   b7d2e:	3105      	adds	r1, #5
   b7d30:	6a1c      	ldr	r4, [r3, #32]
   b7d32:	4632      	mov	r2, r6
   b7d34:	2308      	movs	r3, #8
   b7d36:	b209      	sxth	r1, r1
   b7d38:	4658      	mov	r0, fp
   b7d3a:	47a0      	blx	r4
    endWrite();
   b7d3c:	f8db 3000 	ldr.w	r3, [fp]
   b7d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7d42:	4658      	mov	r0, fp
}
   b7d44:	b011      	add	sp, #68	; 0x44
   b7d46:	ecbd 8b02 	vpop	{d8}
   b7d4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b7d4e:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
   b7d50:	9906      	ldr	r1, [sp, #24]
   b7d52:	fb14 f202 	smulbb	r2, r4, r2
   b7d56:	440a      	add	r2, r1
   b7d58:	9904      	ldr	r1, [sp, #16]
   b7d5a:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   b7d5c:	9400      	str	r4, [sp, #0]
   b7d5e:	69db      	ldr	r3, [r3, #28]
   b7d60:	ee18 1a10 	vmov	r1, s16
   b7d64:	461f      	mov	r7, r3
   b7d66:	b212      	sxth	r2, r2
   b7d68:	462b      	mov	r3, r5
   b7d6a:	4658      	mov	r0, fp
   b7d6c:	47b8      	blx	r7
   b7d6e:	e7bb      	b.n	b7ce8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
   b7d70:	9a04      	ldr	r2, [sp, #16]
   b7d72:	4542      	cmp	r2, r8
   b7d74:	d0b8      	beq.n	b7ce8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
   b7d76:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
   b7d78:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
   b7d7c:	d107      	bne.n	b7d8e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b7d7e:	2c01      	cmp	r4, #1
   b7d80:	d105      	bne.n	b7d8e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
   b7d82:	699b      	ldr	r3, [r3, #24]
   b7d84:	9906      	ldr	r1, [sp, #24]
   b7d86:	461f      	mov	r7, r3
   b7d88:	440a      	add	r2, r1
   b7d8a:	4643      	mov	r3, r8
   b7d8c:	e7a8      	b.n	b7ce0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   b7d8e:	9906      	ldr	r1, [sp, #24]
   b7d90:	f8cd 8004 	str.w	r8, [sp, #4]
   b7d94:	fb14 f202 	smulbb	r2, r4, r2
   b7d98:	440a      	add	r2, r1
   b7d9a:	e7df      	b.n	b7d5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
   b7d9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7d9e:	f8cd 8004 	str.w	r8, [sp, #4]
   b7da2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b7da6:	9a08      	ldr	r2, [sp, #32]
   b7da8:	00e4      	lsls	r4, r4, #3
   b7daa:	440a      	add	r2, r1
   b7dac:	4611      	mov	r1, r2
   b7dae:	9400      	str	r4, [sp, #0]
   b7db0:	69dc      	ldr	r4, [r3, #28]
   b7db2:	4632      	mov	r2, r6
   b7db4:	462b      	mov	r3, r5
   b7db6:	b209      	sxth	r1, r1
   b7db8:	4658      	mov	r0, fp
   b7dba:	47a0      	blx	r4
    endWrite();
   b7dbc:	e7be      	b.n	b7d3c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b7dbe:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
   b7dc0:	6851      	ldr	r1, [r2, #4]
  return gfxFont->bitmap;
   b7dc2:	6812      	ldr	r2, [r2, #0]
   b7dc4:	920b      	str	r2, [sp, #44]	; 0x2c
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b7dc6:	1aff      	subs	r7, r7, r3
  return gfxFont->glyph + c;
   b7dc8:	b2ff      	uxtb	r7, r7
   b7dca:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b7dce:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b7dd2:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
   b7dd4:	789a      	ldrb	r2, [r3, #2]
   b7dd6:	9209      	str	r2, [sp, #36]	; 0x24
   b7dd8:	78da      	ldrb	r2, [r3, #3]
   b7dda:	920c      	str	r2, [sp, #48]	; 0x30
    if (size_x > 1 || size_y > 1) {
   b7ddc:	2d01      	cmp	r5, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   b7dde:	f993 2005 	ldrsb.w	r2, [r3, #5]
           yo = pgm_read_byte(&glyph->yOffset);
   b7de2:	f993 a006 	ldrsb.w	sl, [r3, #6]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   b7de6:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
   b7de8:	d801      	bhi.n	b7dee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b7dea:	2c01      	cmp	r4, #1
   b7dec:	d957      	bls.n	b7e9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
   b7dee:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b7df2:	9308      	str	r3, [sp, #32]
      yo16 = yo;
   b7df4:	fa0f f38a 	sxth.w	r3, sl
   b7df8:	9307      	str	r3, [sp, #28]
    startWrite();
   b7dfa:	f8db 3000 	ldr.w	r3, [fp]
   b7dfe:	4658      	mov	r0, fp
   b7e00:	695b      	ldr	r3, [r3, #20]
   b7e02:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   b7e04:	b2b3      	uxth	r3, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   b7e06:	f04f 0800 	mov.w	r8, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   b7e0a:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
   b7e0c:	fa1a f386 	uxtah	r3, sl, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   b7e10:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
   b7e12:	4647      	mov	r7, r8
            writePixel(x + xo + xx, y + yo + yy, color);
   b7e14:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
   b7e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b7e18:	429f      	cmp	r7, r3
   b7e1a:	d28f      	bcs.n	b7d3c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   b7e1c:	9b07      	ldr	r3, [sp, #28]
   b7e1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b7e20:	443b      	add	r3, r7
   b7e22:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
   b7e26:	2200      	movs	r2, #0
   b7e28:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
   b7e2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   b7e2c:	b21b      	sxth	r3, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   b7e2e:	eb02 0a07 	add.w	sl, r2, r7
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   b7e32:	ee08 3a10 	vmov	s16, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   b7e36:	fa0f fa8a 	sxth.w	sl, sl
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   b7e3a:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
   b7e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b7e3e:	9905      	ldr	r1, [sp, #20]
   b7e40:	4291      	cmp	r1, r2
   b7e42:	d241      	bcs.n	b7ec8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
   b7e44:	1c5a      	adds	r2, r3, #1
   b7e46:	b2d2      	uxtb	r2, r2
   b7e48:	075b      	lsls	r3, r3, #29
   b7e4a:	920d      	str	r2, [sp, #52]	; 0x34
   b7e4c:	d107      	bne.n	b7e5e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
   b7e4e:	9b06      	ldr	r3, [sp, #24]
   b7e50:	9906      	ldr	r1, [sp, #24]
   b7e52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7e54:	3301      	adds	r3, #1
   b7e56:	b29b      	uxth	r3, r3
   b7e58:	f812 9001 	ldrb.w	r9, [r2, r1]
   b7e5c:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
   b7e5e:	f019 0f80 	tst.w	r9, #128	; 0x80
   b7e62:	d012      	beq.n	b7e8a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
   b7e64:	2d01      	cmp	r5, #1
            writePixel(x + xo + xx, y + yo + yy, color);
   b7e66:	f8db 3000 	ldr.w	r3, [fp]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   b7e6a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
          if (size_x == 1 && size_y == 1) {
   b7e6e:	d11a      	bne.n	b7ea6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b7e70:	2c01      	cmp	r4, #1
   b7e72:	d118      	bne.n	b7ea6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
   b7e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b7e76:	699b      	ldr	r3, [r3, #24]
   b7e78:	4411      	add	r1, r2
   b7e7a:	9a05      	ldr	r2, [sp, #20]
   b7e7c:	4411      	add	r1, r2
   b7e7e:	461e      	mov	r6, r3
   b7e80:	4652      	mov	r2, sl
   b7e82:	9b04      	ldr	r3, [sp, #16]
   b7e84:	b209      	sxth	r1, r1
   b7e86:	4658      	mov	r0, fp
   b7e88:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
   b7e8a:	9e05      	ldr	r6, [sp, #20]
   b7e8c:	3601      	adds	r6, #1
   b7e8e:	b2f3      	uxtb	r3, r6
        bits <<= 1;
   b7e90:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
   b7e94:	9305      	str	r3, [sp, #20]
        bits <<= 1;
   b7e96:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
   b7e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      for (xx = 0; xx < w; xx++) {
   b7e9c:	e7ce      	b.n	b7e3c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
   b7e9e:	2300      	movs	r3, #0
   b7ea0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b7ea4:	e7a9      	b.n	b7dfa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   b7ea6:	9805      	ldr	r0, [sp, #20]
   b7ea8:	9a08      	ldr	r2, [sp, #32]
   b7eaa:	4402      	add	r2, r0
   b7eac:	fb02 1105 	mla	r1, r2, r5, r1
   b7eb0:	9a04      	ldr	r2, [sp, #16]
   b7eb2:	e9cd 4200 	strd	r4, r2, [sp]
   b7eb6:	69db      	ldr	r3, [r3, #28]
   b7eb8:	ee18 2a10 	vmov	r2, s16
   b7ebc:	461e      	mov	r6, r3
   b7ebe:	b209      	sxth	r1, r1
   b7ec0:	462b      	mov	r3, r5
   b7ec2:	4658      	mov	r0, fp
   b7ec4:	47b0      	blx	r6
   b7ec6:	e7e0      	b.n	b7e8a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b7ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
   b7eca:	3701      	adds	r7, #1
   b7ecc:	4498      	add	r8, r3
   b7ece:	fa5f f888 	uxtb.w	r8, r8
   b7ed2:	b2ff      	uxtb	r7, r7
   b7ed4:	e79f      	b.n	b7e16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b7ed6:	b011      	add	sp, #68	; 0x44
   b7ed8:	ecbd 8b02 	vpop	{d8}
   b7edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7ee0:	000bd9b0 	.word	0x000bd9b0

000b7ee4 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b7ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
   b7ee6:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b7ee8:	b085      	sub	sp, #20
   b7eea:	4604      	mov	r4, r0
   b7eec:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
   b7eee:	2a00      	cmp	r2, #0
   b7ef0:	d134      	bne.n	b7f5c <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
   b7ef2:	290a      	cmp	r1, #10
   b7ef4:	d108      	bne.n	b7f08 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
   b7ef6:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
   b7ef8:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
   b7efa:	7e42      	ldrb	r2, [r0, #25]
   b7efc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
   b7f00:	8263      	strh	r3, [r4, #18]
}
   b7f02:	2001      	movs	r0, #1
   b7f04:	b005      	add	sp, #20
   b7f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
   b7f08:	290d      	cmp	r1, #13
   b7f0a:	d0fa      	beq.n	b7f02 <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b7f0c:	7ee1      	ldrb	r1, [r4, #27]
   b7f0e:	7e00      	ldrb	r0, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
   b7f10:	7e65      	ldrb	r5, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b7f12:	b171      	cbz	r1, b7f32 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b7f14:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b7f18:	2106      	movs	r1, #6
   b7f1a:	fb11 6100 	smlabb	r1, r1, r0, r6
   b7f1e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b7f22:	42b1      	cmp	r1, r6
      cursor_y += textsize_y * 8; // advance y one line
   b7f24:	bfc1      	itttt	gt
   b7f26:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
   b7f2a:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
   b7f2c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b7f30:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   b7f32:	8ae2      	ldrh	r2, [r4, #22]
   b7f34:	9201      	str	r2, [sp, #4]
   b7f36:	8aa2      	ldrh	r2, [r4, #20]
   b7f38:	9200      	str	r2, [sp, #0]
   b7f3a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b7f3e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b7f42:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b7f46:	4620      	mov	r0, r4
   b7f48:	f7ff fe5e 	bl	b7c08 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
   b7f4c:	7e23      	ldrb	r3, [r4, #24]
   b7f4e:	8a22      	ldrh	r2, [r4, #16]
   b7f50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7f54:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
   b7f58:	8223      	strh	r3, [r4, #16]
   b7f5a:	e7d2      	b.n	b7f02 <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
   b7f5c:	290a      	cmp	r1, #10
   b7f5e:	d107      	bne.n	b7f70 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
   b7f60:	2300      	movs	r3, #0
   b7f62:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b7f64:	7e41      	ldrb	r1, [r0, #25]
   b7f66:	7b12      	ldrb	r2, [r2, #12]
      cursor_y +=
   b7f68:	8a43      	ldrh	r3, [r0, #18]
   b7f6a:	fb01 3302 	mla	r3, r1, r2, r3
   b7f6e:	e7c7      	b.n	b7f00 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
   b7f70:	290d      	cmp	r1, #13
   b7f72:	d0c6      	beq.n	b7f02 <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
   b7f74:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b7f76:	42a9      	cmp	r1, r5
   b7f78:	d3c3      	bcc.n	b7f02 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b7f7a:	7a91      	ldrb	r1, [r2, #10]
   b7f7c:	4299      	cmp	r1, r3
   b7f7e:	d3c0      	bcc.n	b7f02 <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
   b7f80:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
   b7f82:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
   b7f84:	b2ed      	uxtb	r5, r5
   b7f86:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
   b7f8a:	78a8      	ldrb	r0, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b7f8c:	b328      	cbz	r0, b7fda <_ZN12Adafruit_GFX5writeEh+0xf6>
   b7f8e:	78e9      	ldrb	r1, [r5, #3]
   b7f90:	b319      	cbz	r1, b7fda <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b7f92:	7ee1      	ldrb	r1, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b7f94:	7e26      	ldrb	r6, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
   b7f96:	7e67      	ldrb	r7, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b7f98:	b191      	cbz	r1, b7fc0 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b7f9a:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b7f9e:	4408      	add	r0, r1
   b7fa0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b7fa4:	fb06 1100 	mla	r1, r6, r0, r1
   b7fa8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b7fac:	4281      	cmp	r1, r0
   b7fae:	dd07      	ble.n	b7fc0 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
   b7fb0:	2000      	movs	r0, #0
   b7fb2:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
   b7fb4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b7fb8:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
   b7fba:	fb02 1207 	mla	r2, r2, r7, r1
   b7fbe:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   b7fc0:	8ae2      	ldrh	r2, [r4, #22]
   b7fc2:	9201      	str	r2, [sp, #4]
   b7fc4:	8aa2      	ldrh	r2, [r4, #20]
   b7fc6:	9200      	str	r2, [sp, #0]
   b7fc8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b7fcc:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b7fd0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b7fd4:	4620      	mov	r0, r4
   b7fd6:	f7ff fe17 	bl	b7c08 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b7fda:	7929      	ldrb	r1, [r5, #4]
   b7fdc:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
   b7fde:	8a23      	ldrh	r3, [r4, #16]
   b7fe0:	fb01 3302 	mla	r3, r1, r2, r3
   b7fe4:	e7b8      	b.n	b7f58 <_ZN12Adafruit_GFX5writeEh+0x74>

000b7fe6 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
   b7fe6:	2901      	cmp	r1, #1
   b7fe8:	bf38      	it	cc
   b7fea:	2101      	movcc	r1, #1
   b7fec:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
   b7fee:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
   b7ff0:	4770      	bx	lr

000b7ff2 <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   b7ff2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7ff6:	4604      	mov	r4, r0
   b7ff8:	b08b      	sub	sp, #44	; 0x2c
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   b7ffa:	f000 fa47 	bl	b848c <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b7ffe:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   b8002:	f9b4 503a 	ldrsh.w	r5, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8006:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   b800a:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b800e:	1dda      	adds	r2, r3, #7
   b8010:	bf48      	it	mi
   b8012:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   b8016:	2340      	movs	r3, #64	; 0x40
   b8018:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   b801c:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   b8020:	9303      	str	r3, [sp, #12]
   b8022:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b8024:	68db      	ldr	r3, [r3, #12]
   b8026:	3b01      	subs	r3, #1
   b8028:	b29b      	uxth	r3, r3
   b802a:	9304      	str	r3, [sp, #16]
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b802c:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
  uint8_t bytes_per_page = WIDTH;
   b8030:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   b8032:	2d00      	cmp	r5, #0
   b8034:	bfb8      	it	lt
   b8036:	3507      	addlt	r5, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b8038:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   b803c:	45b9      	cmp	r9, r7
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   b803e:	f107 0201 	add.w	r2, r7, #1
  uint8_t first_page = window_y1 / 8;
   b8042:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   b8046:	bf28      	it	cs
   b8048:	46b9      	movcs	r9, r7
    bytes_remaining -= (WIDTH - 1) - page_end;
   b804a:	fa52 f383 	uxtab	r3, r2, r3
   b804e:	fb05 9a07 	mla	sl, r5, r7, r9
   b8052:	9306      	str	r3, [sp, #24]
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};

      digitalWrite(dcPin, LOW);
   b8054:	f04f 0b00 	mov.w	fp, #0
  for (uint8_t p = first_page; p < pages; p++) {
   b8058:	9b03      	ldr	r3, [sp, #12]
   b805a:	429d      	cmp	r5, r3
   b805c:	d26b      	bcs.n	b8136 <_ZN15Adafruit_SH110X7displayEv+0x144>
    ptr += page_start;
   b805e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   b8060:	8926      	ldrh	r6, [r4, #8]
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b8062:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   b8066:	eb03 080a 	add.w	r8, r3, sl
    bytes_remaining -= (WIDTH - 1) - page_end;
   b806a:	9b06      	ldr	r3, [sp, #24]
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b806c:	444a      	add	r2, r9
    bytes_remaining -= (WIDTH - 1) - page_end;
   b806e:	1b9e      	subs	r6, r3, r6
    if (i2c_dev) { // I2C
   b8070:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b8072:	1111      	asrs	r1, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   b8074:	eba6 0609 	sub.w	r6, r6, r9
   b8078:	f1a5 0050 	sub.w	r0, r5, #80	; 0x50
   b807c:	b2f6      	uxtb	r6, r6
    if (i2c_dev) { // I2C
   b807e:	b2c0      	uxtb	r0, r0
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b8080:	3110      	adds	r1, #16
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b8082:	f002 020f 	and.w	r2, r2, #15
    if (i2c_dev) { // I2C
   b8086:	2b00      	cmp	r3, #0
   b8088:	d035      	beq.n	b80f6 <_ZN15Adafruit_SH110X7displayEv+0x104>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b808a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   b808e:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
      i2c_dev->setSpeed(i2c_preclk);
   b8092:	4618      	mov	r0, r3
   b8094:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b8096:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      uint8_t cmd[] = {
   b809a:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   b809e:	f7fe fdca 	bl	b6c36 <_ZN18Adafruit_I2CDevice8setSpeedEm>
      i2c_dev->write(cmd, 4);
   b80a2:	2301      	movs	r3, #1
   b80a4:	e9cd bb00 	strd	fp, fp, [sp]
   b80a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b80aa:	2204      	movs	r2, #4
   b80ac:	a909      	add	r1, sp, #36	; 0x24
   b80ae:	f7fe fd3d 	bl	b6b2c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   b80b2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   b80b6:	9305      	str	r3, [sp, #20]
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   b80b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      while (bytes_remaining) {
   b80ba:	b1ae      	cbz	r6, b80e8 <_ZN15Adafruit_SH110X7displayEv+0xf6>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   b80bc:	9b05      	ldr	r3, [sp, #20]
   b80be:	42b3      	cmp	r3, r6
   b80c0:	bf28      	it	cs
   b80c2:	4633      	movcs	r3, r6
   b80c4:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   b80c6:	2301      	movs	r3, #1
   b80c8:	9301      	str	r3, [sp, #4]
   b80ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b80ce:	9300      	str	r3, [sp, #0]
   b80d0:	4641      	mov	r1, r8
   b80d2:	2301      	movs	r3, #1
   b80d4:	9207      	str	r2, [sp, #28]
   b80d6:	f7fe fd29 	bl	b6b2c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   b80da:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   b80dc:	1ab6      	subs	r6, r6, r2
        ptr += to_write;
   b80de:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   b80e0:	b2f6      	uxtb	r6, r6
   b80e2:	f000 f9d3 	bl	b848c <os_thread_yield>
#endif // PLATFORM_THREADING
}
   b80e6:	e7e7      	b.n	b80b8 <_ZN15Adafruit_SH110X7displayEv+0xc6>
      i2c_dev->setSpeed(i2c_postclk);
   b80e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   b80ea:	f7fe fda4 	bl	b6c36 <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   b80ee:	3501      	adds	r5, #1
   b80f0:	b2ed      	uxtb	r5, r5
   b80f2:	44ba      	add	sl, r7
   b80f4:	e7b0      	b.n	b8058 <_ZN15Adafruit_SH110X7displayEv+0x66>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b80f6:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   b80fa:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
      digitalWrite(dcPin, LOW);
   b80fe:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b8102:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   b8106:	4619      	mov	r1, r3
   b8108:	9305      	str	r3, [sp, #20]
   b810a:	f001 fb96 	bl	b983a <digitalWrite>
      spi_dev->write(cmd, 3);
   b810e:	9b05      	ldr	r3, [sp, #20]
   b8110:	9300      	str	r3, [sp, #0]
   b8112:	2203      	movs	r2, #3
   b8114:	a909      	add	r1, sp, #36	; 0x24
   b8116:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8118:	f7fe fc77 	bl	b6a0a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   b811c:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   b8120:	2101      	movs	r1, #1
   b8122:	f001 fb8a 	bl	b983a <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   b8126:	9b05      	ldr	r3, [sp, #20]
   b8128:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b812a:	9300      	str	r3, [sp, #0]
   b812c:	4632      	mov	r2, r6
   b812e:	4641      	mov	r1, r8
   b8130:	f7fe fc6b 	bl	b6a0a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b8134:	e7db      	b.n	b80ee <_ZN15Adafruit_SH110X7displayEv+0xfc>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   b8136:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   b813a:	f04f 33ff 	mov.w	r3, #4294967295
   b813e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   b8142:	b00b      	add	sp, #44	; 0x2c
   b8144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8148 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   b8148:	b530      	push	{r4, r5, lr}
   b814a:	b085      	sub	sp, #20
   b814c:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   b814e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b8150:	9503      	str	r5, [sp, #12]
   b8152:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b8154:	9502      	str	r5, [sp, #8]
   b8156:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   b815a:	e9cd 3500 	strd	r3, r5, [sp]
   b815e:	4613      	mov	r3, r2
   b8160:	460a      	mov	r2, r1
   b8162:	2101      	movs	r1, #1
   b8164:	f7ff fa46 	bl	b75f4 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   b8168:	4b03      	ldr	r3, [pc, #12]	; (b8178 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   b816a:	6023      	str	r3, [r4, #0]
   b816c:	4620      	mov	r0, r4
   b816e:	2300      	movs	r3, #0
   b8170:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b8174:	b005      	add	sp, #20
   b8176:	bd30      	pop	{r4, r5, pc}
   b8178:	000bdf10 	.word	0x000bdf10

000b817c <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   b817c:	b510      	push	{r4, lr}
   b817e:	4b03      	ldr	r3, [pc, #12]	; (b818c <_ZN15Adafruit_SH110XD1Ev+0x10>)
   b8180:	6003      	str	r3, [r0, #0]
   b8182:	4604      	mov	r4, r0
   b8184:	f7ff fa58 	bl	b7638 <_ZN17Adafruit_GrayOLEDD1Ev>
   b8188:	4620      	mov	r0, r4
   b818a:	bd10      	pop	{r4, pc}
   b818c:	000bdf10 	.word	0x000bdf10

000b8190 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   b8190:	b510      	push	{r4, lr}
   b8192:	4b03      	ldr	r3, [pc, #12]	; (b81a0 <_ZN15Adafruit_SH1107D1Ev+0x10>)
   b8194:	6003      	str	r3, [r0, #0]
   b8196:	4604      	mov	r4, r0
   b8198:	f7ff fff0 	bl	b817c <_ZN15Adafruit_SH110XD1Ev>
   b819c:	4620      	mov	r0, r4
   b819e:	bd10      	pop	{r4, pc}
   b81a0:	000be14c 	.word	0x000be14c

000b81a4 <_ZN15Adafruit_SH1107D0Ev>:
   b81a4:	b510      	push	{r4, lr}
   b81a6:	4604      	mov	r4, r0
   b81a8:	f7ff fff2 	bl	b8190 <_ZN15Adafruit_SH1107D1Ev>
   b81ac:	4620      	mov	r0, r4
   b81ae:	2158      	movs	r1, #88	; 0x58
   b81b0:	f7fb ff75 	bl	b409e <_ZdlPvj>
   b81b4:	4620      	mov	r0, r4
   b81b6:	bd10      	pop	{r4, pc}

000b81b8 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   b81b8:	b530      	push	{r4, r5, lr}
   b81ba:	b085      	sub	sp, #20
   b81bc:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   b81be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b81c0:	9502      	str	r5, [sp, #8]
   b81c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b81c4:	9501      	str	r5, [sp, #4]
   b81c6:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   b81ca:	9500      	str	r5, [sp, #0]
   b81cc:	f7ff ffbc 	bl	b8148 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   b81d0:	4b02      	ldr	r3, [pc, #8]	; (b81dc <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   b81d2:	6023      	str	r3, [r4, #0]
   b81d4:	4620      	mov	r0, r4
   b81d6:	b005      	add	sp, #20
   b81d8:	bd30      	pop	{r4, r5, pc}
   b81da:	bf00      	nop
   b81dc:	000be14c 	.word	0x000be14c

000b81e0 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   b81e0:	b530      	push	{r4, r5, lr}
   b81e2:	4604      	mov	r4, r0
   b81e4:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   b81e6:	f7ff faab 	bl	b7740 <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   b81ea:	212f      	movs	r1, #47	; 0x2f
   b81ec:	4620      	mov	r0, r4
   b81ee:	f7ff fb10 	bl	b7812 <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   b81f2:	68a2      	ldr	r2, [r4, #8]
   b81f4:	4b2f      	ldr	r3, [pc, #188]	; (b82b4 <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   b81f6:	429a      	cmp	r2, r3
   b81f8:	d121      	bne.n	b823e <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   b81fa:	6823      	ldr	r3, [r4, #0]
   b81fc:	2101      	movs	r1, #1
   b81fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8200:	4620      	mov	r0, r4
   b8202:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   b8204:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b8208:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   b820c:	2320      	movs	r3, #32
   b820e:	3a20      	subs	r2, #32
   b8210:	3973      	subs	r1, #115	; 0x73
   b8212:	2501      	movs	r5, #1
   b8214:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b8218:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b821c:	2373      	movs	r3, #115	; 0x73
   b821e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b8222:	9300      	str	r3, [sp, #0]
   b8224:	f341 014f 	sbfx	r1, r1, #1, #16
   b8228:	4b23      	ldr	r3, [pc, #140]	; (b82b8 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   b822a:	4620      	mov	r0, r4
   b822c:	f342 024f 	sbfx	r2, r2, #1, #16
   b8230:	f7ff fc96 	bl	b7b60 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   b8234:	6823      	ldr	r3, [r4, #0]
   b8236:	2100      	movs	r1, #0
   b8238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b823a:	4620      	mov	r0, r4
   b823c:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   b823e:	68a3      	ldr	r3, [r4, #8]
   b8240:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   b8244:	d117      	bne.n	b8276 <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   b8246:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b824a:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   b824e:	2320      	movs	r3, #32
   b8250:	2001      	movs	r0, #1
   b8252:	3a20      	subs	r2, #32
   b8254:	3973      	subs	r1, #115	; 0x73
   b8256:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b825a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b825e:	2373      	movs	r3, #115	; 0x73
   b8260:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b8264:	9300      	str	r3, [sp, #0]
   b8266:	f342 024f 	sbfx	r2, r2, #1, #16
   b826a:	4b13      	ldr	r3, [pc, #76]	; (b82b8 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   b826c:	f341 014f 	sbfx	r1, r1, #1, #16
   b8270:	4620      	mov	r0, r4
   b8272:	f7ff fc75 	bl	b7b60 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   b8276:	4911      	ldr	r1, [pc, #68]	; (b82bc <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   b8278:	2216      	movs	r2, #22
   b827a:	4620      	mov	r0, r4
   b827c:	f7ff fa23 	bl	b76c6 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   b8280:	4605      	mov	r5, r0
   b8282:	b918      	cbnz	r0, b828c <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   b8284:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   b8286:	4628      	mov	r0, r5
   b8288:	b005      	add	sp, #20
   b828a:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   b828c:	68a3      	ldr	r3, [r4, #8]
   b828e:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   b8292:	d007      	beq.n	b82a4 <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   b8294:	2064      	movs	r0, #100	; 0x64
   b8296:	f000 fedd 	bl	b9054 <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   b829a:	21af      	movs	r1, #175	; 0xaf
   b829c:	4620      	mov	r0, r4
   b829e:	f7ff f9e7 	bl	b7670 <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   b82a2:	e7f0      	b.n	b8286 <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   b82a4:	4906      	ldr	r1, [pc, #24]	; (b82c0 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   b82a6:	2204      	movs	r2, #4
   b82a8:	4620      	mov	r0, r4
   b82aa:	f7ff fa0c 	bl	b76c6 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   b82ae:	2800      	cmp	r0, #0
   b82b0:	d1f0      	bne.n	b8294 <_ZN15Adafruit_SH11075beginEhb+0xb4>
   b82b2:	e7e7      	b.n	b8284 <_ZN15Adafruit_SH11075beginEhb+0xa4>
   b82b4:	00800040 	.word	0x00800040
   b82b8:	000bdf64 	.word	0x000bdf64
   b82bc:	000be1a4 	.word	0x000be1a4
   b82c0:	000be1a0 	.word	0x000be1a0

000b82c4 <_ZN19Adafruit_EEPROM_I2CC1Ev>:
/**************************************************************************/
/*!
    Constructor
*/
/**************************************************************************/
Adafruit_EEPROM_I2C::Adafruit_EEPROM_I2C(void) {}
   b82c4:	2200      	movs	r2, #0
   b82c6:	6002      	str	r2, [r0, #0]
   b82c8:	7102      	strb	r2, [r0, #4]
   b82ca:	4770      	bx	lr

000b82cc <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>:
 *            The I2C address to be used.
 *    @param  theWire
 *            The Wire object to be used for I2C connections.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   b82cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b82ce:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   b82d0:	2010      	movs	r0, #16
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
   b82d2:	460e      	mov	r6, r1
   b82d4:	9201      	str	r2, [sp, #4]
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   b82d6:	f7fb fede 	bl	b4096 <_Znwj>
   b82da:	4604      	mov	r4, r0
   b82dc:	b118      	cbz	r0, b82e6 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire+0x1a>
   b82de:	9a01      	ldr	r2, [sp, #4]
   b82e0:	4631      	mov	r1, r6
   b82e2:	f7fe fbf8 	bl	b6ad6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  _addr = addr;

  return i2c_dev->begin();
   b82e6:	2101      	movs	r1, #1
   b82e8:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   b82ea:	602c      	str	r4, [r5, #0]
  _addr = addr;
   b82ec:	712e      	strb	r6, [r5, #4]
}
   b82ee:	b002      	add	sp, #8
   b82f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return i2c_dev->begin();
   b82f4:	f7fe bc0b 	b.w	b6b0e <_ZN18Adafruit_I2CDevice5beginEb>

000b82f8 <_ZN19Adafruit_EEPROM_I2C5writeEth>:
    @param[in] value
                The 8-bit value to write at addr
    @returns True on I2C command success, false on timeout or I2C failure
*/
/**************************************************************************/
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   b82f8:	b530      	push	{r4, r5, lr}
   b82fa:	b085      	sub	sp, #20
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   b82fc:	0a0b      	lsrs	r3, r1, #8
   b82fe:	f88d 300c 	strb.w	r3, [sp, #12]

  if (!i2c_dev->write(buff, 3))
   b8302:	2300      	movs	r3, #0
   b8304:	e9cd 3300 	strd	r3, r3, [sp]
bool Adafruit_EEPROM_I2C::write(uint16_t addr, uint8_t value) {
   b8308:	4605      	mov	r5, r0
  uint8_t buff[3] = {(uint8_t)(addr >> 8), (uint8_t)addr, value};
   b830a:	f88d 100d 	strb.w	r1, [sp, #13]
   b830e:	f88d 200e 	strb.w	r2, [sp, #14]
  if (!i2c_dev->write(buff, 3))
   b8312:	6800      	ldr	r0, [r0, #0]
   b8314:	2301      	movs	r3, #1
   b8316:	2203      	movs	r2, #3
   b8318:	a903      	add	r1, sp, #12
   b831a:	f7fe fc07 	bl	b6b2c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   b831e:	b160      	cbz	r0, b833a <_ZN19Adafruit_EEPROM_I2C5writeEth+0x42>
   b8320:	2465      	movs	r4, #101	; 0x65
    return false;

  // Wait until it acks!
  uint8_t timeout = 100;
  while (timeout--) {
   b8322:	3c01      	subs	r4, #1
   b8324:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   b8328:	d007      	beq.n	b833a <_ZN19Adafruit_EEPROM_I2C5writeEth+0x42>
    if (i2c_dev->detected())
   b832a:	6828      	ldr	r0, [r5, #0]
   b832c:	f7fe fbda 	bl	b6ae4 <_ZN18Adafruit_I2CDevice8detectedEv>
   b8330:	b920      	cbnz	r0, b833c <_ZN19Adafruit_EEPROM_I2C5writeEth+0x44>
      return true;
    delay(1);
   b8332:	2001      	movs	r0, #1
   b8334:	f000 fe8e 	bl	b9054 <delay>
  while (timeout--) {
   b8338:	e7f3      	b.n	b8322 <_ZN19Adafruit_EEPROM_I2C5writeEth+0x2a>
    return false;
   b833a:	2000      	movs	r0, #0
  }

  // timed out :(
  return false;
}
   b833c:	b005      	add	sp, #20
   b833e:	bd30      	pop	{r4, r5, pc}

000b8340 <_ZN19Adafruit_EEPROM_I2C4readEt>:
    @param addr
                The 16-bit address to read from in EEPROM memory
    @returns    The 8-bit value retrieved at addr
*/
/**************************************************************************/
uint8_t Adafruit_EEPROM_I2C::read(uint16_t addr) {
   b8340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   b8342:	0a0b      	lsrs	r3, r1, #8

  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   b8344:	2200      	movs	r2, #0
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   b8346:	f88d 300c 	strb.w	r3, [sp, #12]
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   b834a:	2301      	movs	r3, #1
   b834c:	e9cd 3200 	strd	r3, r2, [sp]
   b8350:	ab03      	add	r3, sp, #12
  uint8_t buff[2] = {(uint8_t)(addr >> 8), (uint8_t)addr};
   b8352:	f88d 100d 	strb.w	r1, [sp, #13]
  if (!i2c_dev->write_then_read(buff, 2, buff, 1))
   b8356:	6800      	ldr	r0, [r0, #0]
   b8358:	2202      	movs	r2, #2
   b835a:	4619      	mov	r1, r3
   b835c:	f7fe fc54 	bl	b6c08 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
   b8360:	b108      	cbz	r0, b8366 <_ZN19Adafruit_EEPROM_I2C4readEt+0x26>
    return 0x0;

  return buff[0];
   b8362:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   b8366:	b005      	add	sp, #20
   b8368:	f85d fb04 	ldr.w	pc, [sp], #4

000b836c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b836c:	b508      	push	{r3, lr}
   b836e:	4b02      	ldr	r3, [pc, #8]	; (b8378 <netdb_freeaddrinfo+0xc>)
   b8370:	681b      	ldr	r3, [r3, #0]
   b8372:	689b      	ldr	r3, [r3, #8]
   b8374:	9301      	str	r3, [sp, #4]
   b8376:	bd08      	pop	{r3, pc}
   b8378:	00030268 	.word	0x00030268

000b837c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b837c:	b508      	push	{r3, lr}
   b837e:	4b02      	ldr	r3, [pc, #8]	; (b8388 <netdb_getaddrinfo+0xc>)
   b8380:	681b      	ldr	r3, [r3, #0]
   b8382:	68db      	ldr	r3, [r3, #12]
   b8384:	9301      	str	r3, [sp, #4]
   b8386:	bd08      	pop	{r3, pc}
   b8388:	00030268 	.word	0x00030268

000b838c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b838c:	b508      	push	{r3, lr}
   b838e:	4b02      	ldr	r3, [pc, #8]	; (b8398 <HAL_Validate_Pin_Function+0xc>)
   b8390:	681b      	ldr	r3, [r3, #0]
   b8392:	685b      	ldr	r3, [r3, #4]
   b8394:	9301      	str	r3, [sp, #4]
   b8396:	bd08      	pop	{r3, pc}
   b8398:	0003022c 	.word	0x0003022c

000b839c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b839c:	b508      	push	{r3, lr}
   b839e:	4b02      	ldr	r3, [pc, #8]	; (b83a8 <HAL_Pin_Mode+0xc>)
   b83a0:	681b      	ldr	r3, [r3, #0]
   b83a2:	689b      	ldr	r3, [r3, #8]
   b83a4:	9301      	str	r3, [sp, #4]
   b83a6:	bd08      	pop	{r3, pc}
   b83a8:	0003022c 	.word	0x0003022c

000b83ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b83ac:	b508      	push	{r3, lr}
   b83ae:	4b02      	ldr	r3, [pc, #8]	; (b83b8 <HAL_Get_Pin_Mode+0xc>)
   b83b0:	681b      	ldr	r3, [r3, #0]
   b83b2:	68db      	ldr	r3, [r3, #12]
   b83b4:	9301      	str	r3, [sp, #4]
   b83b6:	bd08      	pop	{r3, pc}
   b83b8:	0003022c 	.word	0x0003022c

000b83bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b83bc:	b508      	push	{r3, lr}
   b83be:	4b02      	ldr	r3, [pc, #8]	; (b83c8 <HAL_GPIO_Write+0xc>)
   b83c0:	681b      	ldr	r3, [r3, #0]
   b83c2:	691b      	ldr	r3, [r3, #16]
   b83c4:	9301      	str	r3, [sp, #4]
   b83c6:	bd08      	pop	{r3, pc}
   b83c8:	0003022c 	.word	0x0003022c

000b83cc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b83cc:	b508      	push	{r3, lr}
   b83ce:	4b02      	ldr	r3, [pc, #8]	; (b83d8 <HAL_GPIO_Read+0xc>)
   b83d0:	681b      	ldr	r3, [r3, #0]
   b83d2:	695b      	ldr	r3, [r3, #20]
   b83d4:	9301      	str	r3, [sp, #4]
   b83d6:	bd08      	pop	{r3, pc}
   b83d8:	0003022c 	.word	0x0003022c

000b83dc <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b83dc:	b508      	push	{r3, lr}
   b83de:	4b02      	ldr	r3, [pc, #8]	; (b83e8 <HAL_Interrupts_Attach+0xc>)
   b83e0:	681b      	ldr	r3, [r3, #0]
   b83e2:	699b      	ldr	r3, [r3, #24]
   b83e4:	9301      	str	r3, [sp, #4]
   b83e6:	bd08      	pop	{r3, pc}
   b83e8:	0003022c 	.word	0x0003022c

000b83ec <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b83ec:	b508      	push	{r3, lr}
   b83ee:	4b02      	ldr	r3, [pc, #8]	; (b83f8 <HAL_Interrupts_Detach+0xc>)
   b83f0:	681b      	ldr	r3, [r3, #0]
   b83f2:	69db      	ldr	r3, [r3, #28]
   b83f4:	9301      	str	r3, [sp, #4]
   b83f6:	bd08      	pop	{r3, pc}
   b83f8:	0003022c 	.word	0x0003022c

000b83fc <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b83fc:	b508      	push	{r3, lr}
   b83fe:	4b02      	ldr	r3, [pc, #8]	; (b8408 <hal_adc_read+0xc>)
   b8400:	681b      	ldr	r3, [r3, #0]
   b8402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8404:	9301      	str	r3, [sp, #4]
   b8406:	bd08      	pop	{r3, pc}
   b8408:	0003022c 	.word	0x0003022c

000b840c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b840c:	b508      	push	{r3, lr}
   b840e:	4b02      	ldr	r3, [pc, #8]	; (b8418 <HAL_RNG_GetRandomNumber+0xc>)
   b8410:	681b      	ldr	r3, [r3, #0]
   b8412:	685b      	ldr	r3, [r3, #4]
   b8414:	9301      	str	r3, [sp, #4]
   b8416:	bd08      	pop	{r3, pc}
   b8418:	00030218 	.word	0x00030218

000b841c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b841c:	b508      	push	{r3, lr}
   b841e:	4b02      	ldr	r3, [pc, #8]	; (b8428 <HAL_Delay_Microseconds+0xc>)
   b8420:	681b      	ldr	r3, [r3, #0]
   b8422:	68db      	ldr	r3, [r3, #12]
   b8424:	9301      	str	r3, [sp, #4]
   b8426:	bd08      	pop	{r3, pc}
   b8428:	00030218 	.word	0x00030218

000b842c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b842c:	b508      	push	{r3, lr}
   b842e:	4b02      	ldr	r3, [pc, #8]	; (b8438 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8430:	681b      	ldr	r3, [r3, #0]
   b8432:	695b      	ldr	r3, [r3, #20]
   b8434:	9301      	str	r3, [sp, #4]
   b8436:	bd08      	pop	{r3, pc}
   b8438:	00030218 	.word	0x00030218

000b843c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b843c:	b508      	push	{r3, lr}
   b843e:	4b02      	ldr	r3, [pc, #8]	; (b8448 <HAL_EEPROM_Init+0xc>)
   b8440:	681b      	ldr	r3, [r3, #0]
   b8442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8444:	9301      	str	r3, [sp, #4]
   b8446:	bd08      	pop	{r3, pc}
   b8448:	00030218 	.word	0x00030218

000b844c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   b844c:	b508      	push	{r3, lr}
   b844e:	4b02      	ldr	r3, [pc, #8]	; (b8458 <HAL_EEPROM_Get+0xc>)
   b8450:	681b      	ldr	r3, [r3, #0]
   b8452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8454:	9301      	str	r3, [sp, #4]
   b8456:	bd08      	pop	{r3, pc}
   b8458:	00030218 	.word	0x00030218

000b845c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b845c:	b508      	push	{r3, lr}
   b845e:	4b02      	ldr	r3, [pc, #8]	; (b8468 <HAL_EEPROM_Put+0xc>)
   b8460:	681b      	ldr	r3, [r3, #0]
   b8462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8464:	9301      	str	r3, [sp, #4]
   b8466:	bd08      	pop	{r3, pc}
   b8468:	00030218 	.word	0x00030218

000b846c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b846c:	b508      	push	{r3, lr}
   b846e:	4b02      	ldr	r3, [pc, #8]	; (b8478 <hal_rtc_time_is_valid+0xc>)
   b8470:	681b      	ldr	r3, [r3, #0]
   b8472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8474:	9301      	str	r3, [sp, #4]
   b8476:	bd08      	pop	{r3, pc}
   b8478:	00030218 	.word	0x00030218

000b847c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b847c:	b508      	push	{r3, lr}
   b847e:	4b02      	ldr	r3, [pc, #8]	; (b8488 <hal_rtc_get_time+0xc>)
   b8480:	681b      	ldr	r3, [r3, #0]
   b8482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8484:	9301      	str	r3, [sp, #4]
   b8486:	bd08      	pop	{r3, pc}
   b8488:	00030218 	.word	0x00030218

000b848c <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b848c:	b508      	push	{r3, lr}
   b848e:	4b02      	ldr	r3, [pc, #8]	; (b8498 <os_thread_yield+0xc>)
   b8490:	681b      	ldr	r3, [r3, #0]
   b8492:	68db      	ldr	r3, [r3, #12]
   b8494:	9301      	str	r3, [sp, #4]
   b8496:	bd08      	pop	{r3, pc}
   b8498:	00030248 	.word	0x00030248

000b849c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b849c:	b508      	push	{r3, lr}
   b849e:	4b02      	ldr	r3, [pc, #8]	; (b84a8 <os_mutex_recursive_create+0xc>)
   b84a0:	681b      	ldr	r3, [r3, #0]
   b84a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b84a4:	9301      	str	r3, [sp, #4]
   b84a6:	bd08      	pop	{r3, pc}
   b84a8:	00030248 	.word	0x00030248

000b84ac <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b84ac:	b508      	push	{r3, lr}
   b84ae:	4b02      	ldr	r3, [pc, #8]	; (b84b8 <inet_inet_ntop+0xc>)
   b84b0:	681b      	ldr	r3, [r3, #0]
   b84b2:	695b      	ldr	r3, [r3, #20]
   b84b4:	9301      	str	r3, [sp, #4]
   b84b6:	bd08      	pop	{r3, pc}
   b84b8:	00030264 	.word	0x00030264

000b84bc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b84bc:	b508      	push	{r3, lr}
   b84be:	4b02      	ldr	r3, [pc, #8]	; (b84c8 <hal_usart_write+0xc>)
   b84c0:	681b      	ldr	r3, [r3, #0]
   b84c2:	68db      	ldr	r3, [r3, #12]
   b84c4:	9301      	str	r3, [sp, #4]
   b84c6:	bd08      	pop	{r3, pc}
   b84c8:	0003023c 	.word	0x0003023c

000b84cc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b84cc:	b508      	push	{r3, lr}
   b84ce:	4b02      	ldr	r3, [pc, #8]	; (b84d8 <hal_usart_available+0xc>)
   b84d0:	681b      	ldr	r3, [r3, #0]
   b84d2:	691b      	ldr	r3, [r3, #16]
   b84d4:	9301      	str	r3, [sp, #4]
   b84d6:	bd08      	pop	{r3, pc}
   b84d8:	0003023c 	.word	0x0003023c

000b84dc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b84dc:	b508      	push	{r3, lr}
   b84de:	4b02      	ldr	r3, [pc, #8]	; (b84e8 <hal_usart_read+0xc>)
   b84e0:	681b      	ldr	r3, [r3, #0]
   b84e2:	695b      	ldr	r3, [r3, #20]
   b84e4:	9301      	str	r3, [sp, #4]
   b84e6:	bd08      	pop	{r3, pc}
   b84e8:	0003023c 	.word	0x0003023c

000b84ec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b84ec:	b508      	push	{r3, lr}
   b84ee:	4b02      	ldr	r3, [pc, #8]	; (b84f8 <hal_usart_peek+0xc>)
   b84f0:	681b      	ldr	r3, [r3, #0]
   b84f2:	699b      	ldr	r3, [r3, #24]
   b84f4:	9301      	str	r3, [sp, #4]
   b84f6:	bd08      	pop	{r3, pc}
   b84f8:	0003023c 	.word	0x0003023c

000b84fc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b84fc:	b508      	push	{r3, lr}
   b84fe:	4b02      	ldr	r3, [pc, #8]	; (b8508 <hal_usart_flush+0xc>)
   b8500:	681b      	ldr	r3, [r3, #0]
   b8502:	69db      	ldr	r3, [r3, #28]
   b8504:	9301      	str	r3, [sp, #4]
   b8506:	bd08      	pop	{r3, pc}
   b8508:	0003023c 	.word	0x0003023c

000b850c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b850c:	b508      	push	{r3, lr}
   b850e:	4b02      	ldr	r3, [pc, #8]	; (b8518 <hal_usart_is_enabled+0xc>)
   b8510:	681b      	ldr	r3, [r3, #0]
   b8512:	6a1b      	ldr	r3, [r3, #32]
   b8514:	9301      	str	r3, [sp, #4]
   b8516:	bd08      	pop	{r3, pc}
   b8518:	0003023c 	.word	0x0003023c

000b851c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b851c:	b508      	push	{r3, lr}
   b851e:	4b02      	ldr	r3, [pc, #8]	; (b8528 <hal_usart_available_data_for_write+0xc>)
   b8520:	681b      	ldr	r3, [r3, #0]
   b8522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8524:	9301      	str	r3, [sp, #4]
   b8526:	bd08      	pop	{r3, pc}
   b8528:	0003023c 	.word	0x0003023c

000b852c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b852c:	b508      	push	{r3, lr}
   b852e:	4b02      	ldr	r3, [pc, #8]	; (b8538 <hal_usart_init_ex+0xc>)
   b8530:	681b      	ldr	r3, [r3, #0]
   b8532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8534:	9301      	str	r3, [sp, #4]
   b8536:	bd08      	pop	{r3, pc}
   b8538:	0003023c 	.word	0x0003023c

000b853c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b853c:	b508      	push	{r3, lr}
   b853e:	4b02      	ldr	r3, [pc, #8]	; (b8548 <hal_i2c_set_speed+0xc>)
   b8540:	681b      	ldr	r3, [r3, #0]
   b8542:	681b      	ldr	r3, [r3, #0]
   b8544:	9301      	str	r3, [sp, #4]
   b8546:	bd08      	pop	{r3, pc}
   b8548:	00030228 	.word	0x00030228

000b854c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b854c:	b508      	push	{r3, lr}
   b854e:	4b02      	ldr	r3, [pc, #8]	; (b8558 <hal_i2c_begin+0xc>)
   b8550:	681b      	ldr	r3, [r3, #0]
   b8552:	68db      	ldr	r3, [r3, #12]
   b8554:	9301      	str	r3, [sp, #4]
   b8556:	bd08      	pop	{r3, pc}
   b8558:	00030228 	.word	0x00030228

000b855c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b855c:	b508      	push	{r3, lr}
   b855e:	4b02      	ldr	r3, [pc, #8]	; (b8568 <hal_i2c_begin_transmission+0xc>)
   b8560:	681b      	ldr	r3, [r3, #0]
   b8562:	699b      	ldr	r3, [r3, #24]
   b8564:	9301      	str	r3, [sp, #4]
   b8566:	bd08      	pop	{r3, pc}
   b8568:	00030228 	.word	0x00030228

000b856c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b856c:	b508      	push	{r3, lr}
   b856e:	4b02      	ldr	r3, [pc, #8]	; (b8578 <hal_i2c_end_transmission+0xc>)
   b8570:	681b      	ldr	r3, [r3, #0]
   b8572:	69db      	ldr	r3, [r3, #28]
   b8574:	9301      	str	r3, [sp, #4]
   b8576:	bd08      	pop	{r3, pc}
   b8578:	00030228 	.word	0x00030228

000b857c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b857c:	b508      	push	{r3, lr}
   b857e:	4b02      	ldr	r3, [pc, #8]	; (b8588 <hal_i2c_write+0xc>)
   b8580:	681b      	ldr	r3, [r3, #0]
   b8582:	6a1b      	ldr	r3, [r3, #32]
   b8584:	9301      	str	r3, [sp, #4]
   b8586:	bd08      	pop	{r3, pc}
   b8588:	00030228 	.word	0x00030228

000b858c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b858c:	b508      	push	{r3, lr}
   b858e:	4b02      	ldr	r3, [pc, #8]	; (b8598 <hal_i2c_available+0xc>)
   b8590:	681b      	ldr	r3, [r3, #0]
   b8592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8594:	9301      	str	r3, [sp, #4]
   b8596:	bd08      	pop	{r3, pc}
   b8598:	00030228 	.word	0x00030228

000b859c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b859c:	b508      	push	{r3, lr}
   b859e:	4b02      	ldr	r3, [pc, #8]	; (b85a8 <hal_i2c_read+0xc>)
   b85a0:	681b      	ldr	r3, [r3, #0]
   b85a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b85a4:	9301      	str	r3, [sp, #4]
   b85a6:	bd08      	pop	{r3, pc}
   b85a8:	00030228 	.word	0x00030228

000b85ac <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b85ac:	b508      	push	{r3, lr}
   b85ae:	4b02      	ldr	r3, [pc, #8]	; (b85b8 <hal_i2c_peek+0xc>)
   b85b0:	681b      	ldr	r3, [r3, #0]
   b85b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b85b4:	9301      	str	r3, [sp, #4]
   b85b6:	bd08      	pop	{r3, pc}
   b85b8:	00030228 	.word	0x00030228

000b85bc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b85bc:	b508      	push	{r3, lr}
   b85be:	4b02      	ldr	r3, [pc, #8]	; (b85c8 <hal_i2c_flush+0xc>)
   b85c0:	681b      	ldr	r3, [r3, #0]
   b85c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b85c4:	9301      	str	r3, [sp, #4]
   b85c6:	bd08      	pop	{r3, pc}
   b85c8:	00030228 	.word	0x00030228

000b85cc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b85cc:	b508      	push	{r3, lr}
   b85ce:	4b02      	ldr	r3, [pc, #8]	; (b85d8 <hal_i2c_is_enabled+0xc>)
   b85d0:	681b      	ldr	r3, [r3, #0]
   b85d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b85d4:	9301      	str	r3, [sp, #4]
   b85d6:	bd08      	pop	{r3, pc}
   b85d8:	00030228 	.word	0x00030228

000b85dc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b85dc:	b508      	push	{r3, lr}
   b85de:	4b02      	ldr	r3, [pc, #8]	; (b85e8 <hal_i2c_init+0xc>)
   b85e0:	681b      	ldr	r3, [r3, #0]
   b85e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b85e4:	9301      	str	r3, [sp, #4]
   b85e6:	bd08      	pop	{r3, pc}
   b85e8:	00030228 	.word	0x00030228

000b85ec <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b85ec:	b508      	push	{r3, lr}
   b85ee:	4b02      	ldr	r3, [pc, #8]	; (b85f8 <hal_i2c_request_ex+0xc>)
   b85f0:	681b      	ldr	r3, [r3, #0]
   b85f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b85f4:	9301      	str	r3, [sp, #4]
   b85f6:	bd08      	pop	{r3, pc}
   b85f8:	00030228 	.word	0x00030228

000b85fc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b85fc:	b508      	push	{r3, lr}
   b85fe:	4b02      	ldr	r3, [pc, #8]	; (b8608 <hal_spi_begin+0xc>)
   b8600:	681b      	ldr	r3, [r3, #0]
   b8602:	681b      	ldr	r3, [r3, #0]
   b8604:	9301      	str	r3, [sp, #4]
   b8606:	bd08      	pop	{r3, pc}
   b8608:	00030230 	.word	0x00030230

000b860c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b860c:	b508      	push	{r3, lr}
   b860e:	4b02      	ldr	r3, [pc, #8]	; (b8618 <hal_spi_transfer+0xc>)
   b8610:	681b      	ldr	r3, [r3, #0]
   b8612:	695b      	ldr	r3, [r3, #20]
   b8614:	9301      	str	r3, [sp, #4]
   b8616:	bd08      	pop	{r3, pc}
   b8618:	00030230 	.word	0x00030230

000b861c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b861c:	b508      	push	{r3, lr}
   b861e:	4b02      	ldr	r3, [pc, #8]	; (b8628 <hal_spi_init+0xc>)
   b8620:	681b      	ldr	r3, [r3, #0]
   b8622:	69db      	ldr	r3, [r3, #28]
   b8624:	9301      	str	r3, [sp, #4]
   b8626:	bd08      	pop	{r3, pc}
   b8628:	00030230 	.word	0x00030230

000b862c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b862c:	b508      	push	{r3, lr}
   b862e:	4b02      	ldr	r3, [pc, #8]	; (b8638 <hal_spi_is_enabled+0xc>)
   b8630:	681b      	ldr	r3, [r3, #0]
   b8632:	6a1b      	ldr	r3, [r3, #32]
   b8634:	9301      	str	r3, [sp, #4]
   b8636:	bd08      	pop	{r3, pc}
   b8638:	00030230 	.word	0x00030230

000b863c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b863c:	b508      	push	{r3, lr}
   b863e:	4b02      	ldr	r3, [pc, #8]	; (b8648 <hal_spi_info+0xc>)
   b8640:	681b      	ldr	r3, [r3, #0]
   b8642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8644:	9301      	str	r3, [sp, #4]
   b8646:	bd08      	pop	{r3, pc}
   b8648:	00030230 	.word	0x00030230

000b864c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b864c:	b508      	push	{r3, lr}
   b864e:	4b02      	ldr	r3, [pc, #8]	; (b8658 <hal_spi_transfer_dma+0xc>)
   b8650:	681b      	ldr	r3, [r3, #0]
   b8652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8654:	9301      	str	r3, [sp, #4]
   b8656:	bd08      	pop	{r3, pc}
   b8658:	00030230 	.word	0x00030230

000b865c <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b865c:	b508      	push	{r3, lr}
   b865e:	4b02      	ldr	r3, [pc, #8]	; (b8668 <hal_spi_transfer_dma_status+0xc>)
   b8660:	681b      	ldr	r3, [r3, #0]
   b8662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8664:	9301      	str	r3, [sp, #4]
   b8666:	bd08      	pop	{r3, pc}
   b8668:	00030230 	.word	0x00030230

000b866c <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b866c:	b508      	push	{r3, lr}
   b866e:	4b02      	ldr	r3, [pc, #8]	; (b8678 <hal_spi_set_settings+0xc>)
   b8670:	681b      	ldr	r3, [r3, #0]
   b8672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8674:	9301      	str	r3, [sp, #4]
   b8676:	bd08      	pop	{r3, pc}
   b8678:	00030230 	.word	0x00030230

000b867c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b867c:	b508      	push	{r3, lr}
   b867e:	4b02      	ldr	r3, [pc, #8]	; (b8688 <hal_spi_acquire+0xc>)
   b8680:	681b      	ldr	r3, [r3, #0]
   b8682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8684:	9301      	str	r3, [sp, #4]
   b8686:	bd08      	pop	{r3, pc}
   b8688:	00030230 	.word	0x00030230

000b868c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b868c:	b508      	push	{r3, lr}
   b868e:	4b02      	ldr	r3, [pc, #8]	; (b8698 <hal_spi_release+0xc>)
   b8690:	681b      	ldr	r3, [r3, #0]
   b8692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8694:	9301      	str	r3, [sp, #4]
   b8696:	bd08      	pop	{r3, pc}
   b8698:	00030230 	.word	0x00030230

000b869c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b869c:	b508      	push	{r3, lr}
   b869e:	4b02      	ldr	r3, [pc, #8]	; (b86a8 <HAL_USB_USART_Init+0xc>)
   b86a0:	681b      	ldr	r3, [r3, #0]
   b86a2:	681b      	ldr	r3, [r3, #0]
   b86a4:	9301      	str	r3, [sp, #4]
   b86a6:	bd08      	pop	{r3, pc}
   b86a8:	0003024c 	.word	0x0003024c

000b86ac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b86ac:	b508      	push	{r3, lr}
   b86ae:	4b02      	ldr	r3, [pc, #8]	; (b86b8 <HAL_USB_USART_Begin+0xc>)
   b86b0:	681b      	ldr	r3, [r3, #0]
   b86b2:	685b      	ldr	r3, [r3, #4]
   b86b4:	9301      	str	r3, [sp, #4]
   b86b6:	bd08      	pop	{r3, pc}
   b86b8:	0003024c 	.word	0x0003024c

000b86bc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b86bc:	b508      	push	{r3, lr}
   b86be:	4b02      	ldr	r3, [pc, #8]	; (b86c8 <HAL_USB_USART_Available_Data+0xc>)
   b86c0:	681b      	ldr	r3, [r3, #0]
   b86c2:	691b      	ldr	r3, [r3, #16]
   b86c4:	9301      	str	r3, [sp, #4]
   b86c6:	bd08      	pop	{r3, pc}
   b86c8:	0003024c 	.word	0x0003024c

000b86cc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b86cc:	b508      	push	{r3, lr}
   b86ce:	4b02      	ldr	r3, [pc, #8]	; (b86d8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b86d0:	681b      	ldr	r3, [r3, #0]
   b86d2:	695b      	ldr	r3, [r3, #20]
   b86d4:	9301      	str	r3, [sp, #4]
   b86d6:	bd08      	pop	{r3, pc}
   b86d8:	0003024c 	.word	0x0003024c

000b86dc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b86dc:	b508      	push	{r3, lr}
   b86de:	4b02      	ldr	r3, [pc, #8]	; (b86e8 <HAL_USB_USART_Receive_Data+0xc>)
   b86e0:	681b      	ldr	r3, [r3, #0]
   b86e2:	699b      	ldr	r3, [r3, #24]
   b86e4:	9301      	str	r3, [sp, #4]
   b86e6:	bd08      	pop	{r3, pc}
   b86e8:	0003024c 	.word	0x0003024c

000b86ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b86ec:	b508      	push	{r3, lr}
   b86ee:	4b02      	ldr	r3, [pc, #8]	; (b86f8 <HAL_USB_USART_Send_Data+0xc>)
   b86f0:	681b      	ldr	r3, [r3, #0]
   b86f2:	69db      	ldr	r3, [r3, #28]
   b86f4:	9301      	str	r3, [sp, #4]
   b86f6:	bd08      	pop	{r3, pc}
   b86f8:	0003024c 	.word	0x0003024c

000b86fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b86fc:	b508      	push	{r3, lr}
   b86fe:	4b02      	ldr	r3, [pc, #8]	; (b8708 <HAL_USB_USART_Flush_Data+0xc>)
   b8700:	681b      	ldr	r3, [r3, #0]
   b8702:	6a1b      	ldr	r3, [r3, #32]
   b8704:	9301      	str	r3, [sp, #4]
   b8706:	bd08      	pop	{r3, pc}
   b8708:	0003024c 	.word	0x0003024c

000b870c <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   b870c:	b508      	push	{r3, lr}
   b870e:	4b02      	ldr	r3, [pc, #8]	; (b8718 <HAL_USB_USART_Is_Enabled+0xc>)
   b8710:	681b      	ldr	r3, [r3, #0]
   b8712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8714:	9301      	str	r3, [sp, #4]
   b8716:	bd08      	pop	{r3, pc}
   b8718:	0003024c 	.word	0x0003024c

000b871c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b871c:	b508      	push	{r3, lr}
   b871e:	4b02      	ldr	r3, [pc, #8]	; (b8728 <panic_+0xc>)
   b8720:	681b      	ldr	r3, [r3, #0]
   b8722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8724:	9301      	str	r3, [sp, #4]
   b8726:	bd08      	pop	{r3, pc}
   b8728:	00030260 	.word	0x00030260

000b872c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b872c:	b508      	push	{r3, lr}
   b872e:	4b02      	ldr	r3, [pc, #8]	; (b8738 <system_mode+0xc>)
   b8730:	681b      	ldr	r3, [r3, #0]
   b8732:	681b      	ldr	r3, [r3, #0]
   b8734:	9301      	str	r3, [sp, #4]
   b8736:	bd08      	pop	{r3, pc}
   b8738:	00030220 	.word	0x00030220

000b873c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b873c:	b508      	push	{r3, lr}
   b873e:	4b02      	ldr	r3, [pc, #8]	; (b8748 <set_system_mode+0xc>)
   b8740:	681b      	ldr	r3, [r3, #0]
   b8742:	685b      	ldr	r3, [r3, #4]
   b8744:	9301      	str	r3, [sp, #4]
   b8746:	bd08      	pop	{r3, pc}
   b8748:	00030220 	.word	0x00030220

000b874c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b874c:	b508      	push	{r3, lr}
   b874e:	4b02      	ldr	r3, [pc, #8]	; (b8758 <system_delay_ms+0xc>)
   b8750:	681b      	ldr	r3, [r3, #0]
   b8752:	695b      	ldr	r3, [r3, #20]
   b8754:	9301      	str	r3, [sp, #4]
   b8756:	bd08      	pop	{r3, pc}
   b8758:	00030220 	.word	0x00030220

000b875c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b875c:	b508      	push	{r3, lr}
   b875e:	4b02      	ldr	r3, [pc, #8]	; (b8768 <system_thread_get_state+0xc>)
   b8760:	681b      	ldr	r3, [r3, #0]
   b8762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8764:	9301      	str	r3, [sp, #4]
   b8766:	bd08      	pop	{r3, pc}
   b8768:	00030220 	.word	0x00030220

000b876c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b876c:	b508      	push	{r3, lr}
   b876e:	4b03      	ldr	r3, [pc, #12]	; (b877c <system_ctrl_set_app_request_handler+0x10>)
   b8770:	681b      	ldr	r3, [r3, #0]
   b8772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8776:	9301      	str	r3, [sp, #4]
   b8778:	bd08      	pop	{r3, pc}
   b877a:	0000      	.short	0x0000
   b877c:	00030220 	.word	0x00030220

000b8780 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8780:	b508      	push	{r3, lr}
   b8782:	4b03      	ldr	r3, [pc, #12]	; (b8790 <system_ctrl_set_result+0x10>)
   b8784:	681b      	ldr	r3, [r3, #0]
   b8786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b878a:	9301      	str	r3, [sp, #4]
   b878c:	bd08      	pop	{r3, pc}
   b878e:	0000      	.short	0x0000
   b8790:	00030220 	.word	0x00030220

000b8794 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8794:	b508      	push	{r3, lr}
   b8796:	4b02      	ldr	r3, [pc, #8]	; (b87a0 <network_connect+0xc>)
   b8798:	681b      	ldr	r3, [r3, #0]
   b879a:	685b      	ldr	r3, [r3, #4]
   b879c:	9301      	str	r3, [sp, #4]
   b879e:	bd08      	pop	{r3, pc}
   b87a0:	00030240 	.word	0x00030240

000b87a4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b87a4:	b508      	push	{r3, lr}
   b87a6:	4b02      	ldr	r3, [pc, #8]	; (b87b0 <network_connecting+0xc>)
   b87a8:	681b      	ldr	r3, [r3, #0]
   b87aa:	689b      	ldr	r3, [r3, #8]
   b87ac:	9301      	str	r3, [sp, #4]
   b87ae:	bd08      	pop	{r3, pc}
   b87b0:	00030240 	.word	0x00030240

000b87b4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b87b4:	b508      	push	{r3, lr}
   b87b6:	4b02      	ldr	r3, [pc, #8]	; (b87c0 <network_disconnect+0xc>)
   b87b8:	681b      	ldr	r3, [r3, #0]
   b87ba:	68db      	ldr	r3, [r3, #12]
   b87bc:	9301      	str	r3, [sp, #4]
   b87be:	bd08      	pop	{r3, pc}
   b87c0:	00030240 	.word	0x00030240

000b87c4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b87c4:	b508      	push	{r3, lr}
   b87c6:	4b02      	ldr	r3, [pc, #8]	; (b87d0 <network_ready+0xc>)
   b87c8:	681b      	ldr	r3, [r3, #0]
   b87ca:	691b      	ldr	r3, [r3, #16]
   b87cc:	9301      	str	r3, [sp, #4]
   b87ce:	bd08      	pop	{r3, pc}
   b87d0:	00030240 	.word	0x00030240

000b87d4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b87d4:	b508      	push	{r3, lr}
   b87d6:	4b02      	ldr	r3, [pc, #8]	; (b87e0 <network_on+0xc>)
   b87d8:	681b      	ldr	r3, [r3, #0]
   b87da:	695b      	ldr	r3, [r3, #20]
   b87dc:	9301      	str	r3, [sp, #4]
   b87de:	bd08      	pop	{r3, pc}
   b87e0:	00030240 	.word	0x00030240

000b87e4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b87e4:	b508      	push	{r3, lr}
   b87e6:	4b02      	ldr	r3, [pc, #8]	; (b87f0 <network_off+0xc>)
   b87e8:	681b      	ldr	r3, [r3, #0]
   b87ea:	699b      	ldr	r3, [r3, #24]
   b87ec:	9301      	str	r3, [sp, #4]
   b87ee:	bd08      	pop	{r3, pc}
   b87f0:	00030240 	.word	0x00030240

000b87f4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b87f4:	b508      	push	{r3, lr}
   b87f6:	4b02      	ldr	r3, [pc, #8]	; (b8800 <network_listen+0xc>)
   b87f8:	681b      	ldr	r3, [r3, #0]
   b87fa:	69db      	ldr	r3, [r3, #28]
   b87fc:	9301      	str	r3, [sp, #4]
   b87fe:	bd08      	pop	{r3, pc}
   b8800:	00030240 	.word	0x00030240

000b8804 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8804:	b508      	push	{r3, lr}
   b8806:	4b02      	ldr	r3, [pc, #8]	; (b8810 <network_listening+0xc>)
   b8808:	681b      	ldr	r3, [r3, #0]
   b880a:	6a1b      	ldr	r3, [r3, #32]
   b880c:	9301      	str	r3, [sp, #4]
   b880e:	bd08      	pop	{r3, pc}
   b8810:	00030240 	.word	0x00030240

000b8814 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8814:	b508      	push	{r3, lr}
   b8816:	4b02      	ldr	r3, [pc, #8]	; (b8820 <network_set_listen_timeout+0xc>)
   b8818:	681b      	ldr	r3, [r3, #0]
   b881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b881c:	9301      	str	r3, [sp, #4]
   b881e:	bd08      	pop	{r3, pc}
   b8820:	00030240 	.word	0x00030240

000b8824 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8824:	b508      	push	{r3, lr}
   b8826:	4b02      	ldr	r3, [pc, #8]	; (b8830 <network_get_listen_timeout+0xc>)
   b8828:	681b      	ldr	r3, [r3, #0]
   b882a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b882c:	9301      	str	r3, [sp, #4]
   b882e:	bd08      	pop	{r3, pc}
   b8830:	00030240 	.word	0x00030240

000b8834 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8834:	b508      	push	{r3, lr}
   b8836:	4b02      	ldr	r3, [pc, #8]	; (b8840 <network_is_on+0xc>)
   b8838:	681b      	ldr	r3, [r3, #0]
   b883a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b883c:	9301      	str	r3, [sp, #4]
   b883e:	bd08      	pop	{r3, pc}
   b8840:	00030240 	.word	0x00030240

000b8844 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8844:	b508      	push	{r3, lr}
   b8846:	4b02      	ldr	r3, [pc, #8]	; (b8850 <network_is_off+0xc>)
   b8848:	681b      	ldr	r3, [r3, #0]
   b884a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b884c:	9301      	str	r3, [sp, #4]
   b884e:	bd08      	pop	{r3, pc}
   b8850:	00030240 	.word	0x00030240

000b8854 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8854:	b508      	push	{r3, lr}
   b8856:	4b02      	ldr	r3, [pc, #8]	; (b8860 <spark_process+0xc>)
   b8858:	681b      	ldr	r3, [r3, #0]
   b885a:	689b      	ldr	r3, [r3, #8]
   b885c:	9301      	str	r3, [sp, #4]
   b885e:	bd08      	pop	{r3, pc}
   b8860:	00030244 	.word	0x00030244

000b8864 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b8864:	b508      	push	{r3, lr}
   b8866:	4b02      	ldr	r3, [pc, #8]	; (b8870 <spark_cloud_flag_connected+0xc>)
   b8868:	681b      	ldr	r3, [r3, #0]
   b886a:	695b      	ldr	r3, [r3, #20]
   b886c:	9301      	str	r3, [sp, #4]
   b886e:	bd08      	pop	{r3, pc}
   b8870:	00030244 	.word	0x00030244

000b8874 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b8874:	b508      	push	{r3, lr}
   b8876:	4b02      	ldr	r3, [pc, #8]	; (b8880 <spark_sync_time_pending+0xc>)
   b8878:	681b      	ldr	r3, [r3, #0]
   b887a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b887c:	9301      	str	r3, [sp, #4]
   b887e:	bd08      	pop	{r3, pc}
   b8880:	00030244 	.word	0x00030244

000b8884 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8884:	b508      	push	{r3, lr}
   b8886:	4b02      	ldr	r3, [pc, #8]	; (b8890 <spark_set_random_seed_from_cloud_handler+0xc>)
   b8888:	681b      	ldr	r3, [r3, #0]
   b888a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b888c:	9301      	str	r3, [sp, #4]
   b888e:	bd08      	pop	{r3, pc}
   b8890:	00030244 	.word	0x00030244

000b8894 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8894:	b508      	push	{r3, lr}
   b8896:	4b02      	ldr	r3, [pc, #8]	; (b88a0 <malloc+0xc>)
   b8898:	681b      	ldr	r3, [r3, #0]
   b889a:	681b      	ldr	r3, [r3, #0]
   b889c:	9301      	str	r3, [sp, #4]
   b889e:	bd08      	pop	{r3, pc}
   b88a0:	0003021c 	.word	0x0003021c

000b88a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b88a4:	b508      	push	{r3, lr}
   b88a6:	4b02      	ldr	r3, [pc, #8]	; (b88b0 <free+0xc>)
   b88a8:	681b      	ldr	r3, [r3, #0]
   b88aa:	685b      	ldr	r3, [r3, #4]
   b88ac:	9301      	str	r3, [sp, #4]
   b88ae:	bd08      	pop	{r3, pc}
   b88b0:	0003021c 	.word	0x0003021c

000b88b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b88b4:	b508      	push	{r3, lr}
   b88b6:	4b02      	ldr	r3, [pc, #8]	; (b88c0 <realloc+0xc>)
   b88b8:	681b      	ldr	r3, [r3, #0]
   b88ba:	689b      	ldr	r3, [r3, #8]
   b88bc:	9301      	str	r3, [sp, #4]
   b88be:	bd08      	pop	{r3, pc}
   b88c0:	0003021c 	.word	0x0003021c

000b88c4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b88c4:	b508      	push	{r3, lr}
   b88c6:	4b02      	ldr	r3, [pc, #8]	; (b88d0 <vsnprintf+0xc>)
   b88c8:	681b      	ldr	r3, [r3, #0]
   b88ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b88cc:	9301      	str	r3, [sp, #4]
   b88ce:	bd08      	pop	{r3, pc}
   b88d0:	0003021c 	.word	0x0003021c

000b88d4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b88d4:	b508      	push	{r3, lr}
   b88d6:	4b02      	ldr	r3, [pc, #8]	; (b88e0 <__errno+0xc>)
   b88d8:	681b      	ldr	r3, [r3, #0]
   b88da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b88dc:	9301      	str	r3, [sp, #4]
   b88de:	bd08      	pop	{r3, pc}
   b88e0:	0003021c 	.word	0x0003021c

000b88e4 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b88e4:	b508      	push	{r3, lr}
   b88e6:	4b02      	ldr	r3, [pc, #8]	; (b88f0 <__assert_func+0xc>)
   b88e8:	681b      	ldr	r3, [r3, #0]
   b88ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b88ec:	9301      	str	r3, [sp, #4]
   b88ee:	bd08      	pop	{r3, pc}
   b88f0:	0003021c 	.word	0x0003021c

000b88f4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b88f4:	b508      	push	{r3, lr}
   b88f6:	4b02      	ldr	r3, [pc, #8]	; (b8900 <newlib_impure_ptr_callback+0xc>)
   b88f8:	681b      	ldr	r3, [r3, #0]
   b88fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b88fc:	9301      	str	r3, [sp, #4]
   b88fe:	bd08      	pop	{r3, pc}
   b8900:	0003021c 	.word	0x0003021c

000b8904 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8904:	2200      	movs	r2, #0
   b8906:	6840      	ldr	r0, [r0, #4]
   b8908:	4611      	mov	r1, r2
   b890a:	f7ff bf7b 	b.w	b8804 <network_listening>

000b890e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b890e:	2200      	movs	r2, #0
   b8910:	6840      	ldr	r0, [r0, #4]
   b8912:	4611      	mov	r1, r2
   b8914:	f7ff bf86 	b.w	b8824 <network_get_listen_timeout>

000b8918 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8918:	6840      	ldr	r0, [r0, #4]
   b891a:	2200      	movs	r2, #0
   b891c:	f7ff bf7a 	b.w	b8814 <network_set_listen_timeout>

000b8920 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8920:	6840      	ldr	r0, [r0, #4]
   b8922:	2200      	movs	r2, #0
   b8924:	f081 0101 	eor.w	r1, r1, #1
   b8928:	f7ff bf64 	b.w	b87f4 <network_listen>

000b892c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b892c:	2300      	movs	r3, #0
   b892e:	6840      	ldr	r0, [r0, #4]
   b8930:	461a      	mov	r2, r3
   b8932:	4619      	mov	r1, r3
   b8934:	f7ff bf56 	b.w	b87e4 <network_off>

000b8938 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8938:	2300      	movs	r3, #0
   b893a:	6840      	ldr	r0, [r0, #4]
   b893c:	461a      	mov	r2, r3
   b893e:	4619      	mov	r1, r3
   b8940:	f7ff bf48 	b.w	b87d4 <network_on>

000b8944 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8944:	2200      	movs	r2, #0
   b8946:	6840      	ldr	r0, [r0, #4]
   b8948:	4611      	mov	r1, r2
   b894a:	f7ff bf3b 	b.w	b87c4 <network_ready>

000b894e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b894e:	2200      	movs	r2, #0
   b8950:	6840      	ldr	r0, [r0, #4]
   b8952:	4611      	mov	r1, r2
   b8954:	f7ff bf26 	b.w	b87a4 <network_connecting>

000b8958 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8958:	6840      	ldr	r0, [r0, #4]
   b895a:	2200      	movs	r2, #0
   b895c:	2102      	movs	r1, #2
   b895e:	f7ff bf29 	b.w	b87b4 <network_disconnect>

000b8962 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8962:	2300      	movs	r3, #0
   b8964:	6840      	ldr	r0, [r0, #4]
   b8966:	461a      	mov	r2, r3
   b8968:	f7ff bf14 	b.w	b8794 <network_connect>

000b896c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b896c:	4b02      	ldr	r3, [pc, #8]	; (b8978 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b896e:	2203      	movs	r2, #3
   b8970:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8972:	4a02      	ldr	r2, [pc, #8]	; (b897c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8974:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8976:	4770      	bx	lr
   b8978:	2003e694 	.word	0x2003e694
   b897c:	000be1c4 	.word	0x000be1c4

000b8980 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b8980:	2100      	movs	r1, #0
   b8982:	f7ff be83 	b.w	b868c <hal_spi_release>

000b8986 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b8986:	2100      	movs	r1, #0
   b8988:	f7ff be78 	b.w	b867c <hal_spi_acquire>

000b898c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b898c:	b510      	push	{r4, lr}
   b898e:	4604      	mov	r4, r0
   b8990:	4608      	mov	r0, r1
{
    _spi = spi;
   b8992:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8994:	f7ff fe42 	bl	b861c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8998:	2300      	movs	r3, #0
   b899a:	6063      	str	r3, [r4, #4]
}
   b899c:	4620      	mov	r0, r4
   b899e:	bd10      	pop	{r4, pc}

000b89a0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b89a0:	b513      	push	{r0, r1, r4, lr}
   b89a2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b89a4:	7800      	ldrb	r0, [r0, #0]
   b89a6:	f7ff ffee 	bl	b8986 <_ZN8SPIClass4lockEv.isra.0>
   b89aa:	b958      	cbnz	r0, b89c4 <_ZN8SPIClass5beginEv+0x24>
   b89ac:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b89ae:	9001      	str	r0, [sp, #4]
   b89b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b89b4:	f7ff fe22 	bl	b85fc <hal_spi_begin>
        unlock();
   b89b8:	9801      	ldr	r0, [sp, #4]
    }
}
   b89ba:	b002      	add	sp, #8
   b89bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b89c0:	f7ff bfde 	b.w	b8980 <_ZN8SPIClass6unlockEv.isra.0>
   b89c4:	b002      	add	sp, #8
   b89c6:	bd10      	pop	{r4, pc}

000b89c8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b89c8:	7800      	ldrb	r0, [r0, #0]
   b89ca:	f7ff bfd9 	b.w	b8980 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b89d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b89d0:	0840      	lsrs	r0, r0, #1
{
   b89d2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b89d4:	6018      	str	r0, [r3, #0]
   b89d6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b89d8:	6818      	ldr	r0, [r3, #0]
   b89da:	4288      	cmp	r0, r1
   b89dc:	b2e5      	uxtb	r5, r4
   b89de:	d906      	bls.n	b89ee <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b89e0:	3401      	adds	r4, #1
   b89e2:	2c08      	cmp	r4, #8
   b89e4:	d002      	beq.n	b89ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b89e6:	0840      	lsrs	r0, r0, #1
   b89e8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b89ea:	e7f5      	b.n	b89d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b89ec:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b89ee:	4b02      	ldr	r3, [pc, #8]	; (b89f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b89f0:	5d5b      	ldrb	r3, [r3, r5]
   b89f2:	7013      	strb	r3, [r2, #0]
}
   b89f4:	bd30      	pop	{r4, r5, pc}
   b89f6:	bf00      	nop
   b89f8:	000be1f8 	.word	0x000be1f8

000b89fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b89fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8a00:	4606      	mov	r6, r0
   b8a02:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b8a04:	7800      	ldrb	r0, [r0, #0]
{
   b8a06:	460c      	mov	r4, r1
    CHECK(lock());
   b8a08:	f7ff ffbd 	bl	b8986 <_ZN8SPIClass4lockEv.isra.0>
   b8a0c:	2800      	cmp	r0, #0
   b8a0e:	db1b      	blt.n	b8a48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b8a10:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b8a12:	2214      	movs	r2, #20
   b8a14:	2100      	movs	r1, #0
   b8a16:	a809      	add	r0, sp, #36	; 0x24
   b8a18:	f004 faca 	bl	bcfb0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b8a1c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b8a1e:	2200      	movs	r2, #0
   b8a20:	a909      	add	r1, sp, #36	; 0x24
   b8a22:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b8a24:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b8a28:	f7ff fe08 	bl	b863c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b8a2c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b8a30:	b113      	cbz	r3, b8a38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b8a32:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b8a36:	b155      	cbz	r5, b8a4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b8a38:	2700      	movs	r7, #0
   b8a3a:	46b9      	mov	r9, r7
   b8a3c:	46b8      	mov	r8, r7
   b8a3e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b8a40:	7923      	ldrb	r3, [r4, #4]
   b8a42:	b15d      	cbz	r5, b8a5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b8a44:	b1c3      	cbz	r3, b8a78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b8a46:	2000      	movs	r0, #0
}
   b8a48:	b00f      	add	sp, #60	; 0x3c
   b8a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b8a4e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b8a52:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b8a56:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b8a5a:	e7f1      	b.n	b8a40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b8a5c:	2b00      	cmp	r3, #0
   b8a5e:	d135      	bne.n	b8acc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b8a60:	68a3      	ldr	r3, [r4, #8]
   b8a62:	4543      	cmp	r3, r8
   b8a64:	d108      	bne.n	b8a78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b8a66:	f88d 9020 	strb.w	r9, [sp, #32]
   b8a6a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8a6e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8a72:	89a3      	ldrh	r3, [r4, #12]
   b8a74:	429a      	cmp	r2, r3
   b8a76:	d0e6      	beq.n	b8a46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b8a78:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8a7a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b8a7c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8a80:	980a      	ldr	r0, [sp, #40]	; 0x28
   b8a82:	ab04      	add	r3, sp, #16
   b8a84:	f10d 020f 	add.w	r2, sp, #15
   b8a88:	f7ff ffa2 	bl	b89d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b8a8c:	7921      	ldrb	r1, [r4, #4]
   b8a8e:	b985      	cbnz	r5, b8ab2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b8a90:	b989      	cbnz	r1, b8ab6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8a92:	68a3      	ldr	r3, [r4, #8]
   b8a94:	4543      	cmp	r3, r8
   b8a96:	d30e      	bcc.n	b8ab6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b8a98:	f88d 9020 	strb.w	r9, [sp, #32]
   b8a9c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8aa0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8aa4:	89a3      	ldrh	r3, [r4, #12]
   b8aa6:	429a      	cmp	r2, r3
   b8aa8:	d105      	bne.n	b8ab6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b8aaa:	9b04      	ldr	r3, [sp, #16]
   b8aac:	4543      	cmp	r3, r8
   b8aae:	d102      	bne.n	b8ab6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8ab0:	e7c9      	b.n	b8a46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b8ab2:	2900      	cmp	r1, #0
   b8ab4:	d1f9      	bne.n	b8aaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b8ab6:	2300      	movs	r3, #0
   b8ab8:	9301      	str	r3, [sp, #4]
   b8aba:	7b63      	ldrb	r3, [r4, #13]
   b8abc:	9300      	str	r3, [sp, #0]
   b8abe:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b8ac2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b8ac4:	7830      	ldrb	r0, [r6, #0]
   b8ac6:	f7ff fdd1 	bl	b866c <hal_spi_set_settings>
   b8aca:	e7bc      	b.n	b8a46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b8acc:	e9cd 5500 	strd	r5, r5, [sp]
   b8ad0:	462b      	mov	r3, r5
   b8ad2:	462a      	mov	r2, r5
   b8ad4:	2101      	movs	r1, #1
   b8ad6:	e7f5      	b.n	b8ac4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b8ad8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b8ad8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b8ada:	7800      	ldrb	r0, [r0, #0]
   b8adc:	f7ff fd96 	bl	b860c <hal_spi_transfer>
}
   b8ae0:	b2c0      	uxtb	r0, r0
   b8ae2:	bd08      	pop	{r3, pc}

000b8ae4 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b8ae4:	b530      	push	{r4, r5, lr}
   b8ae6:	b087      	sub	sp, #28
   b8ae8:	4604      	mov	r4, r0
   b8aea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b8aec:	9500      	str	r5, [sp, #0]
   b8aee:	7800      	ldrb	r0, [r0, #0]
   b8af0:	f7ff fdac 	bl	b864c <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b8af4:	b93d      	cbnz	r5, b8b06 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b8af6:	7820      	ldrb	r0, [r4, #0]
   b8af8:	a902      	add	r1, sp, #8
   b8afa:	f7ff fdaf 	bl	b865c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b8afe:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b8b02:	07db      	lsls	r3, r3, #31
   b8b04:	d4f7      	bmi.n	b8af6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b8b06:	b007      	add	sp, #28
   b8b08:	bd30      	pop	{r4, r5, pc}
	...

000b8b0c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8b0c:	4b05      	ldr	r3, [pc, #20]	; (b8b24 <_GLOBAL__sub_I_System+0x18>)
   b8b0e:	2202      	movs	r2, #2
   b8b10:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8b12:	4b05      	ldr	r3, [pc, #20]	; (b8b28 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8b14:	4a05      	ldr	r2, [pc, #20]	; (b8b2c <_GLOBAL__sub_I_System+0x20>)
   b8b16:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8b18:	2000      	movs	r0, #0
   b8b1a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8b1e:	f7ff be0d 	b.w	b873c <set_system_mode>
   b8b22:	bf00      	nop
   b8b24:	2003e6a8 	.word	0x2003e6a8
   b8b28:	2003e69c 	.word	0x2003e69c
   b8b2c:	ffff0000 	.word	0xffff0000

000b8b30 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8b30:	b510      	push	{r4, lr}
   b8b32:	4604      	mov	r4, r0
{
	free(buffer);
   b8b34:	6800      	ldr	r0, [r0, #0]
   b8b36:	f7ff feb5 	bl	b88a4 <free>
}
   b8b3a:	4620      	mov	r0, r4
   b8b3c:	bd10      	pop	{r4, pc}

000b8b3e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8b3e:	b510      	push	{r4, lr}
   b8b40:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8b42:	6800      	ldr	r0, [r0, #0]
   b8b44:	b108      	cbz	r0, b8b4a <_ZN6String10invalidateEv+0xc>
   b8b46:	f7ff fead 	bl	b88a4 <free>
	buffer = NULL;
   b8b4a:	2300      	movs	r3, #0
	capacity = len = 0;
   b8b4c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8b50:	6023      	str	r3, [r4, #0]
}
   b8b52:	bd10      	pop	{r4, pc}

000b8b54 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8b54:	b538      	push	{r3, r4, r5, lr}
   b8b56:	4604      	mov	r4, r0
   b8b58:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8b5a:	6800      	ldr	r0, [r0, #0]
   b8b5c:	3101      	adds	r1, #1
   b8b5e:	f7ff fea9 	bl	b88b4 <realloc>
	if (newbuffer) {
   b8b62:	b110      	cbz	r0, b8b6a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8b64:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8b68:	2001      	movs	r0, #1
	}
	return 0;
}
   b8b6a:	bd38      	pop	{r3, r4, r5, pc}

000b8b6c <_ZN6String7reserveEj>:
{
   b8b6c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8b6e:	6803      	ldr	r3, [r0, #0]
{
   b8b70:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8b72:	b123      	cbz	r3, b8b7e <_ZN6String7reserveEj+0x12>
   b8b74:	6843      	ldr	r3, [r0, #4]
   b8b76:	428b      	cmp	r3, r1
   b8b78:	d301      	bcc.n	b8b7e <_ZN6String7reserveEj+0x12>
   b8b7a:	2001      	movs	r0, #1
}
   b8b7c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8b7e:	4620      	mov	r0, r4
   b8b80:	f7ff ffe8 	bl	b8b54 <_ZN6String12changeBufferEj>
   b8b84:	2800      	cmp	r0, #0
   b8b86:	d0f9      	beq.n	b8b7c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8b88:	68a3      	ldr	r3, [r4, #8]
   b8b8a:	2b00      	cmp	r3, #0
   b8b8c:	d1f5      	bne.n	b8b7a <_ZN6String7reserveEj+0xe>
   b8b8e:	6822      	ldr	r2, [r4, #0]
   b8b90:	7013      	strb	r3, [r2, #0]
   b8b92:	e7f2      	b.n	b8b7a <_ZN6String7reserveEj+0xe>

000b8b94 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8b96:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8b98:	4611      	mov	r1, r2
   b8b9a:	9201      	str	r2, [sp, #4]
{
   b8b9c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8b9e:	f7ff ffe5 	bl	b8b6c <_ZN6String7reserveEj>
   b8ba2:	9a01      	ldr	r2, [sp, #4]
   b8ba4:	b928      	cbnz	r0, b8bb2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8ba6:	4620      	mov	r0, r4
   b8ba8:	f7ff ffc9 	bl	b8b3e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8bac:	4620      	mov	r0, r4
   b8bae:	b003      	add	sp, #12
   b8bb0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8bb2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8bb4:	4629      	mov	r1, r5
   b8bb6:	6820      	ldr	r0, [r4, #0]
   b8bb8:	f004 f9ec 	bl	bcf94 <memcpy>
	buffer[len] = 0;
   b8bbc:	6822      	ldr	r2, [r4, #0]
   b8bbe:	68a3      	ldr	r3, [r4, #8]
   b8bc0:	2100      	movs	r1, #0
   b8bc2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8bc4:	e7f2      	b.n	b8bac <_ZN6String4copyEPKcj+0x18>

000b8bc6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8bc6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8bc8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8bca:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8bce:	4604      	mov	r4, r0
	len = 0;
   b8bd0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8bd2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8bd4:	b141      	cbz	r1, b8be8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8bd6:	4608      	mov	r0, r1
   b8bd8:	9101      	str	r1, [sp, #4]
   b8bda:	f004 fa27 	bl	bd02c <strlen>
   b8bde:	9901      	ldr	r1, [sp, #4]
   b8be0:	4602      	mov	r2, r0
   b8be2:	4620      	mov	r0, r4
   b8be4:	f7ff ffd6 	bl	b8b94 <_ZN6String4copyEPKcj>
}
   b8be8:	4620      	mov	r0, r4
   b8bea:	b002      	add	sp, #8
   b8bec:	bd10      	pop	{r4, pc}

000b8bee <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b8bee:	b538      	push	{r3, r4, r5, lr}
   b8bf0:	4605      	mov	r5, r0
	if (buffer) {
   b8bf2:	6800      	ldr	r0, [r0, #0]
{
   b8bf4:	460c      	mov	r4, r1
	if (buffer) {
   b8bf6:	b168      	cbz	r0, b8c14 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b8bf8:	686a      	ldr	r2, [r5, #4]
   b8bfa:	688b      	ldr	r3, [r1, #8]
   b8bfc:	429a      	cmp	r2, r3
   b8bfe:	d307      	bcc.n	b8c10 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b8c00:	6809      	ldr	r1, [r1, #0]
   b8c02:	f004 fa0b 	bl	bd01c <strcpy>
			len = rhs.len;
   b8c06:	68a3      	ldr	r3, [r4, #8]
   b8c08:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b8c0a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b8c0c:	60a3      	str	r3, [r4, #8]
}
   b8c0e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b8c10:	f7ff fe48 	bl	b88a4 <free>
	buffer = rhs.buffer;
   b8c14:	6823      	ldr	r3, [r4, #0]
   b8c16:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b8c18:	6863      	ldr	r3, [r4, #4]
   b8c1a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8c1c:	68a3      	ldr	r3, [r4, #8]
   b8c1e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b8c20:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b8c22:	e9c4 3300 	strd	r3, r3, [r4]
   b8c26:	e7f1      	b.n	b8c0c <_ZN6String4moveERS_+0x1e>

000b8c28 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b8c28:	4288      	cmp	r0, r1
{
   b8c2a:	b510      	push	{r4, lr}
   b8c2c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b8c2e:	d001      	beq.n	b8c34 <_ZN6StringaSEOS_+0xc>
   b8c30:	f7ff ffdd 	bl	b8bee <_ZN6String4moveERS_>
	return *this;
}
   b8c34:	4620      	mov	r0, r4
   b8c36:	bd10      	pop	{r4, pc}

000b8c38 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8c38:	b513      	push	{r0, r1, r4, lr}
   b8c3a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8c3c:	b159      	cbz	r1, b8c56 <_ZN6StringaSEPKc+0x1e>
   b8c3e:	4608      	mov	r0, r1
   b8c40:	9101      	str	r1, [sp, #4]
   b8c42:	f004 f9f3 	bl	bd02c <strlen>
   b8c46:	9901      	ldr	r1, [sp, #4]
   b8c48:	4602      	mov	r2, r0
   b8c4a:	4620      	mov	r0, r4
   b8c4c:	f7ff ffa2 	bl	b8b94 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8c50:	4620      	mov	r0, r4
   b8c52:	b002      	add	sp, #8
   b8c54:	bd10      	pop	{r4, pc}
	else invalidate();
   b8c56:	f7ff ff72 	bl	b8b3e <_ZN6String10invalidateEv>
   b8c5a:	e7f9      	b.n	b8c50 <_ZN6StringaSEPKc+0x18>

000b8c5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b8c5c:	4802      	ldr	r0, [pc, #8]	; (b8c68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8c5e:	2300      	movs	r3, #0
   b8c60:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b8c62:	f7ff bc1b 	b.w	b849c <os_mutex_recursive_create>
   b8c66:	bf00      	nop
   b8c68:	2003e6ac 	.word	0x2003e6ac

000b8c6c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8c6e:	4606      	mov	r6, r0
   b8c70:	460d      	mov	r5, r1
  size_t n = 0;
   b8c72:	188f      	adds	r7, r1, r2
   b8c74:	2400      	movs	r4, #0
  while (size--) {
   b8c76:	42bd      	cmp	r5, r7
   b8c78:	d00c      	beq.n	b8c94 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8c7a:	6833      	ldr	r3, [r6, #0]
   b8c7c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8c80:	689b      	ldr	r3, [r3, #8]
   b8c82:	4630      	mov	r0, r6
   b8c84:	4798      	blx	r3
     if (chunk>=0)
   b8c86:	1e03      	subs	r3, r0, #0
   b8c88:	db01      	blt.n	b8c8e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8c8a:	441c      	add	r4, r3
  while (size--) {
   b8c8c:	e7f3      	b.n	b8c76 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8c8e:	2c00      	cmp	r4, #0
   b8c90:	bf08      	it	eq
   b8c92:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8c94:	4620      	mov	r0, r4
   b8c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8c98 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b8c98:	b513      	push	{r0, r1, r4, lr}
   b8c9a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b8c9c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8c9e:	b159      	cbz	r1, b8cb8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8ca0:	9101      	str	r1, [sp, #4]
   b8ca2:	f004 f9c3 	bl	bd02c <strlen>
   b8ca6:	6823      	ldr	r3, [r4, #0]
   b8ca8:	9901      	ldr	r1, [sp, #4]
   b8caa:	68db      	ldr	r3, [r3, #12]
   b8cac:	4602      	mov	r2, r0
   b8cae:	4620      	mov	r0, r4
    }
   b8cb0:	b002      	add	sp, #8
   b8cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8cb6:	4718      	bx	r3
    }
   b8cb8:	b002      	add	sp, #8
   b8cba:	bd10      	pop	{r4, pc}

000b8cbc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8cbc:	b508      	push	{r3, lr}
  return write(str);
   b8cbe:	f7ff ffeb 	bl	b8c98 <_ZN5Print5writeEPKc>
}
   b8cc2:	bd08      	pop	{r3, pc}

000b8cc4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8cc4:	6803      	ldr	r3, [r0, #0]
   b8cc6:	689b      	ldr	r3, [r3, #8]
   b8cc8:	4718      	bx	r3

000b8cca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8cca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8ccc:	210d      	movs	r1, #13
{
   b8cce:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8cd0:	f7ff fff8 	bl	b8cc4 <_ZN5Print5printEc>
  n += print('\n');
   b8cd4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8cd6:	4604      	mov	r4, r0
  n += print('\n');
   b8cd8:	4628      	mov	r0, r5
   b8cda:	f7ff fff3 	bl	b8cc4 <_ZN5Print5printEc>
  return n;
}
   b8cde:	4420      	add	r0, r4
   b8ce0:	bd38      	pop	{r3, r4, r5, pc}

000b8ce2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8ce2:	b538      	push	{r3, r4, r5, lr}
   b8ce4:	4605      	mov	r5, r0
  return write(str);
   b8ce6:	f7ff ffd7 	bl	b8c98 <_ZN5Print5writeEPKc>
   b8cea:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8cec:	4628      	mov	r0, r5
   b8cee:	f7ff ffec 	bl	b8cca <_ZN5Print7printlnEv>
  return n;
}
   b8cf2:	4420      	add	r0, r4
   b8cf4:	bd38      	pop	{r3, r4, r5, pc}

000b8cf6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   b8cf6:	f7ff bff4 	b.w	b8ce2 <_ZN5Print7printlnEPKc>

000b8cfa <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8cfa:	b530      	push	{r4, r5, lr}
   b8cfc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8cfe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8d00:	2a01      	cmp	r2, #1
  *str = '\0';
   b8d02:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8d06:	bf98      	it	ls
   b8d08:	220a      	movls	r2, #10
   b8d0a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8d0c:	460d      	mov	r5, r1
   b8d0e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8d12:	fb01 5312 	mls	r3, r1, r2, r5
   b8d16:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8d1a:	2b09      	cmp	r3, #9
   b8d1c:	bf94      	ite	ls
   b8d1e:	3330      	addls	r3, #48	; 0x30
   b8d20:	3337      	addhi	r3, #55	; 0x37
   b8d22:	b2db      	uxtb	r3, r3
  } while(n);
   b8d24:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8d26:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8d2a:	d9ef      	bls.n	b8d0c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8d2c:	4621      	mov	r1, r4
   b8d2e:	f7ff ffb3 	bl	b8c98 <_ZN5Print5writeEPKc>
}
   b8d32:	b00b      	add	sp, #44	; 0x2c
   b8d34:	bd30      	pop	{r4, r5, pc}

000b8d36 <_ZN5Print11printNumberEyh>:
 
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   b8d36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8d3a:	b093      	sub	sp, #76	; 0x4c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.

  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8d3c:	2100      	movs	r1, #0
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   b8d3e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
  *str = '\0';
   b8d42:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8d46:	f1b9 0f01 	cmp.w	r9, #1
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   b8d4a:	4605      	mov	r5, r0
  if (base < 2) base = 10;
   b8d4c:	bf98      	it	ls
   b8d4e:	f04f 090a 	movls.w	r9, #10
   b8d52:	ae11      	add	r6, sp, #68	; 0x44

  do {
    decltype(n) m = n;
    n /= base;
   b8d54:	4617      	mov	r7, r2
   b8d56:	4698      	mov	r8, r3
   b8d58:	464a      	mov	r2, r9
   b8d5a:	2300      	movs	r3, #0
   b8d5c:	4638      	mov	r0, r7
   b8d5e:	4641      	mov	r1, r8
   b8d60:	f003 ff90 	bl	bcc84 <__aeabi_uldivmod>
   b8d64:	460b      	mov	r3, r1
    char c = m - base * n;
   b8d66:	fb09 7110 	mls	r1, r9, r0, r7
   b8d6a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8d6e:	2909      	cmp	r1, #9
   b8d70:	bf94      	ite	ls
   b8d72:	3130      	addls	r1, #48	; 0x30
   b8d74:	3137      	addhi	r1, #55	; 0x37
   b8d76:	b2c9      	uxtb	r1, r1
  } while(n);
   b8d78:	454f      	cmp	r7, r9
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8d7a:	f806 1d01 	strb.w	r1, [r6, #-1]!
  } while(n);
   b8d7e:	f178 0100 	sbcs.w	r1, r8, #0
    n /= base;
   b8d82:	4602      	mov	r2, r0
  } while(n);
   b8d84:	d2e6      	bcs.n	b8d54 <_ZN5Print11printNumberEyh+0x1e>

  return write(str);
   b8d86:	4631      	mov	r1, r6
   b8d88:	4628      	mov	r0, r5
   b8d8a:	f7ff ff85 	bl	b8c98 <_ZN5Print5writeEPKc>
}
   b8d8e:	b013      	add	sp, #76	; 0x4c
   b8d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8d94 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
   b8d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8d98:	ec55 4b10 	vmov	r4, r5, d0
   b8d9c:	4606      	mov	r6, r0
   b8d9e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b8da0:	ee10 2a10 	vmov	r2, s0
   b8da4:	ee10 0a10 	vmov	r0, s0
   b8da8:	462b      	mov	r3, r5
   b8daa:	4629      	mov	r1, r5
   b8dac:	f003 fd5e 	bl	bc86c <__aeabi_dcmpun>
   b8db0:	b140      	cbz	r0, b8dc4 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b8db2:	4953      	ldr	r1, [pc, #332]	; (b8f00 <_ZN5Print10printFloatEdh+0x16c>)
   b8db4:	4630      	mov	r0, r6
   b8db6:	f7ff ff6f 	bl	b8c98 <_ZN5Print5writeEPKc>
   b8dba:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b8dbc:	4650      	mov	r0, sl
   b8dbe:	b003      	add	sp, #12
   b8dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b8dc4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b8dc8:	4b4e      	ldr	r3, [pc, #312]	; (b8f04 <_ZN5Print10printFloatEdh+0x170>)
   b8dca:	f04f 32ff 	mov.w	r2, #4294967295
   b8dce:	4620      	mov	r0, r4
   b8dd0:	4649      	mov	r1, r9
   b8dd2:	f003 fd4b 	bl	bc86c <__aeabi_dcmpun>
   b8dd6:	b948      	cbnz	r0, b8dec <_ZN5Print10printFloatEdh+0x58>
   b8dd8:	4b4a      	ldr	r3, [pc, #296]	; (b8f04 <_ZN5Print10printFloatEdh+0x170>)
   b8dda:	f04f 32ff 	mov.w	r2, #4294967295
   b8dde:	4620      	mov	r0, r4
   b8de0:	4649      	mov	r1, r9
   b8de2:	f003 fd25 	bl	bc830 <__aeabi_dcmple>
   b8de6:	b908      	cbnz	r0, b8dec <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b8de8:	4947      	ldr	r1, [pc, #284]	; (b8f08 <_ZN5Print10printFloatEdh+0x174>)
   b8dea:	e7e3      	b.n	b8db4 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b8dec:	4b47      	ldr	r3, [pc, #284]	; (b8f0c <_ZN5Print10printFloatEdh+0x178>)
   b8dee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b8df2:	4620      	mov	r0, r4
   b8df4:	4629      	mov	r1, r5
   b8df6:	f003 fd2f 	bl	bc858 <__aeabi_dcmpgt>
   b8dfa:	b108      	cbz	r0, b8e00 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b8dfc:	4944      	ldr	r1, [pc, #272]	; (b8f10 <_ZN5Print10printFloatEdh+0x17c>)
   b8dfe:	e7d9      	b.n	b8db4 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b8e00:	4b44      	ldr	r3, [pc, #272]	; (b8f14 <_ZN5Print10printFloatEdh+0x180>)
   b8e02:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b8e06:	4620      	mov	r0, r4
   b8e08:	4629      	mov	r1, r5
   b8e0a:	f003 fd07 	bl	bc81c <__aeabi_dcmplt>
   b8e0e:	2800      	cmp	r0, #0
   b8e10:	d1f4      	bne.n	b8dfc <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b8e12:	2200      	movs	r2, #0
   b8e14:	2300      	movs	r3, #0
   b8e16:	4620      	mov	r0, r4
   b8e18:	4629      	mov	r1, r5
   b8e1a:	f003 fcff 	bl	bc81c <__aeabi_dcmplt>
   b8e1e:	b1d0      	cbz	r0, b8e56 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b8e20:	212d      	movs	r1, #45	; 0x2d
   b8e22:	4630      	mov	r0, r6
   b8e24:	f7ff ff4e 	bl	b8cc4 <_ZN5Print5printEc>
     number = -number;
   b8e28:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b8e2c:	4682      	mov	sl, r0
     number = -number;
   b8e2e:	461d      	mov	r5, r3
  double rounding = 0.5;
   b8e30:	4939      	ldr	r1, [pc, #228]	; (b8f18 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b8e32:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b8f20 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b8e36:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b8e3a:	2000      	movs	r0, #0
    rounding /= 10.0;
   b8e3c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b8e40:	fa5f f38b 	uxtb.w	r3, fp
   b8e44:	429f      	cmp	r7, r3
   b8e46:	d908      	bls.n	b8e5a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b8e48:	4642      	mov	r2, r8
   b8e4a:	464b      	mov	r3, r9
   b8e4c:	f003 fb9e 	bl	bc58c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b8e50:	f10b 0b01 	add.w	fp, fp, #1
   b8e54:	e7f4      	b.n	b8e40 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b8e56:	4682      	mov	sl, r0
   b8e58:	e7ea      	b.n	b8e30 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b8e5a:	4622      	mov	r2, r4
   b8e5c:	462b      	mov	r3, r5
   b8e5e:	f003 f8b5 	bl	bbfcc <__adddf3>
   b8e62:	460d      	mov	r5, r1
   b8e64:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b8e66:	f003 fd3f 	bl	bc8e8 <__aeabi_d2uiz>
   b8e6a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b8e6c:	f003 f9ea 	bl	bc244 <__aeabi_ui2d>
   b8e70:	4602      	mov	r2, r0
   b8e72:	460b      	mov	r3, r1
   b8e74:	4620      	mov	r0, r4
   b8e76:	4629      	mov	r1, r5
   b8e78:	f003 f8a6 	bl	bbfc8 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8e7c:	220a      	movs	r2, #10
   b8e7e:	4604      	mov	r4, r0
   b8e80:	460d      	mov	r5, r1
   b8e82:	4630      	mov	r0, r6
   b8e84:	4641      	mov	r1, r8
   b8e86:	f7ff ff38 	bl	b8cfa <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b8e8a:	4482      	add	sl, r0
  if (digits > 0) {
   b8e8c:	2f00      	cmp	r7, #0
   b8e8e:	d095      	beq.n	b8dbc <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b8e90:	4922      	ldr	r1, [pc, #136]	; (b8f1c <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b8e92:	f8df 908c 	ldr.w	r9, [pc, #140]	; b8f20 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b8e96:	4630      	mov	r0, r6
   b8e98:	f7ff fefe 	bl	b8c98 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b8e9c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b8ea0:	4482      	add	sl, r0
  while (digits-- > 0)
   b8ea2:	2f00      	cmp	r7, #0
   b8ea4:	d08a      	beq.n	b8dbc <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b8ea6:	4642      	mov	r2, r8
   b8ea8:	464b      	mov	r3, r9
   b8eaa:	4620      	mov	r0, r4
   b8eac:	4629      	mov	r1, r5
   b8eae:	f003 fa43 	bl	bc338 <__aeabi_dmul>
   b8eb2:	4604      	mov	r4, r0
   b8eb4:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b8eb6:	f003 fcef 	bl	bc898 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b8eba:	f1b0 0b00 	subs.w	fp, r0, #0
   b8ebe:	da1c      	bge.n	b8efa <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b8ec0:	212d      	movs	r1, #45	; 0x2d
   b8ec2:	4630      	mov	r0, r6
   b8ec4:	f7ff fefe 	bl	b8cc4 <_ZN5Print5printEc>
            val = -n;
   b8ec8:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b8ecc:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b8ece:	220a      	movs	r2, #10
   b8ed0:	4630      	mov	r0, r6
   b8ed2:	9301      	str	r3, [sp, #4]
   b8ed4:	f7ff ff11 	bl	b8cfa <_ZN5Print11printNumberEmh>
   b8ed8:	9b01      	ldr	r3, [sp, #4]
   b8eda:	4418      	add	r0, r3
    n += print(toPrint);
   b8edc:	4482      	add	sl, r0
    remainder -= toPrint;
   b8ede:	4658      	mov	r0, fp
   b8ee0:	f003 f9c0 	bl	bc264 <__aeabi_i2d>
   b8ee4:	4602      	mov	r2, r0
   b8ee6:	460b      	mov	r3, r1
   b8ee8:	4620      	mov	r0, r4
   b8eea:	4629      	mov	r1, r5
   b8eec:	f003 f86c 	bl	bbfc8 <__aeabi_dsub>
   b8ef0:	3f01      	subs	r7, #1
   b8ef2:	4604      	mov	r4, r0
   b8ef4:	460d      	mov	r5, r1
   b8ef6:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b8ef8:	e7d3      	b.n	b8ea2 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b8efa:	4659      	mov	r1, fp
        size_t t = 0;
   b8efc:	2300      	movs	r3, #0
   b8efe:	e7e6      	b.n	b8ece <_ZN5Print10printFloatEdh+0x13a>
   b8f00:	000be200 	.word	0x000be200
   b8f04:	7fefffff 	.word	0x7fefffff
   b8f08:	000be204 	.word	0x000be204
   b8f0c:	41efffff 	.word	0x41efffff
   b8f10:	000be208 	.word	0x000be208
   b8f14:	c1efffff 	.word	0xc1efffff
   b8f18:	3fe00000 	.word	0x3fe00000
   b8f1c:	000bd7ce 	.word	0x000bd7ce
   b8f20:	40240000 	.word	0x40240000

000b8f24 <_ZN5Print5printEfi>:
{
   b8f24:	b538      	push	{r3, r4, r5, lr}
   b8f26:	4604      	mov	r4, r0
   b8f28:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b8f2c:	b2cd      	uxtb	r5, r1
   b8f2e:	f003 f9ab 	bl	bc288 <__aeabi_f2d>
   b8f32:	ec41 0b10 	vmov	d0, r0, r1
   b8f36:	4629      	mov	r1, r5
   b8f38:	4620      	mov	r0, r4
}
   b8f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b8f3e:	f7ff bf29 	b.w	b8d94 <_ZN5Print10printFloatEdh>

000b8f42 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8f46:	b086      	sub	sp, #24
   b8f48:	af00      	add	r7, sp, #0
   b8f4a:	4605      	mov	r5, r0
   b8f4c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8f4e:	1d38      	adds	r0, r7, #4
   b8f50:	2114      	movs	r1, #20
{
   b8f52:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8f54:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8f56:	f7ff fcb5 	bl	b88c4 <vsnprintf>

    if (n<bufsize)
   b8f5a:	2813      	cmp	r0, #19
   b8f5c:	d80e      	bhi.n	b8f7c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8f5e:	1d39      	adds	r1, r7, #4
   b8f60:	4628      	mov	r0, r5
   b8f62:	f7ff fe99 	bl	b8c98 <_ZN5Print5writeEPKc>
   b8f66:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8f68:	b11e      	cbz	r6, b8f72 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8f6a:	4628      	mov	r0, r5
   b8f6c:	f7ff fead 	bl	b8cca <_ZN5Print7printlnEv>
   b8f70:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8f72:	4620      	mov	r0, r4
   b8f74:	3718      	adds	r7, #24
   b8f76:	46bd      	mov	sp, r7
   b8f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8f7c:	f100 0308 	add.w	r3, r0, #8
   b8f80:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8f84:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8f86:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8f8a:	4622      	mov	r2, r4
   b8f8c:	1c41      	adds	r1, r0, #1
   b8f8e:	683b      	ldr	r3, [r7, #0]
   b8f90:	4668      	mov	r0, sp
   b8f92:	f7ff fc97 	bl	b88c4 <vsnprintf>
  return write(str);
   b8f96:	4669      	mov	r1, sp
   b8f98:	4628      	mov	r0, r5
   b8f9a:	f7ff fe7d 	bl	b8c98 <_ZN5Print5writeEPKc>
   b8f9e:	4604      	mov	r4, r0
   b8fa0:	46c5      	mov	sp, r8
   b8fa2:	e7e1      	b.n	b8f68 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8fa4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8fa4:	4b01      	ldr	r3, [pc, #4]	; (b8fac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8fa6:	4a02      	ldr	r2, [pc, #8]	; (b8fb0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8fa8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8faa:	4770      	bx	lr
   b8fac:	2003e6b0 	.word	0x2003e6b0
   b8fb0:	000be20c 	.word	0x000be20c

000b8fb4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b8fb4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8fb6:	2000      	movs	r0, #0
   b8fb8:	f7ff fc5c 	bl	b8874 <spark_sync_time_pending>
   b8fbc:	b128      	cbz	r0, b8fca <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8fbe:	f7ff fc51 	bl	b8864 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8fc2:	f080 0001 	eor.w	r0, r0, #1
   b8fc6:	b2c0      	uxtb	r0, r0
    }
   b8fc8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8fca:	2001      	movs	r0, #1
   b8fcc:	e7fc      	b.n	b8fc8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b8fce <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b8fce:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b8fd0:	2000      	movs	r0, #0
   b8fd2:	f7ff fa4b 	bl	b846c <hal_rtc_time_is_valid>
    if (rtcstate)
   b8fd6:	4604      	mov	r4, r0
   b8fd8:	b9a0      	cbnz	r0, b9004 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b8fda:	f7ff fba7 	bl	b872c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b8fde:	2801      	cmp	r0, #1
   b8fe0:	d110      	bne.n	b9004 <_ZN9TimeClass7isValidEv+0x36>
   b8fe2:	4620      	mov	r0, r4
   b8fe4:	f7ff fbba 	bl	b875c <system_thread_get_state>
   b8fe8:	b960      	cbnz	r0, b9004 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b8fea:	f7ff ffe3 	bl	b8fb4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8fee:	b910      	cbnz	r0, b8ff6 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8ff0:	f7ff fc30 	bl	b8854 <spark_process>
        while (_while() && !_condition()) {
   b8ff4:	e7f9      	b.n	b8fea <_ZN9TimeClass7isValidEv+0x1c>
   b8ff6:	f7ff ffdd 	bl	b8fb4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b8ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8ffe:	2000      	movs	r0, #0
   b9000:	f7ff ba34 	b.w	b846c <hal_rtc_time_is_valid>
}
   b9004:	4620      	mov	r0, r4
   b9006:	bd10      	pop	{r4, pc}

000b9008 <_ZN9TimeClass3nowEv>:
{
   b9008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b900a:	f7ff ffe0 	bl	b8fce <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b900e:	2210      	movs	r2, #16
   b9010:	2100      	movs	r1, #0
   b9012:	4668      	mov	r0, sp
   b9014:	f003 ffcc 	bl	bcfb0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b9018:	2100      	movs	r1, #0
   b901a:	4668      	mov	r0, sp
   b901c:	f7ff fa2e 	bl	b847c <hal_rtc_get_time>
}
   b9020:	9800      	ldr	r0, [sp, #0]
   b9022:	b005      	add	sp, #20
   b9024:	f85d fb04 	ldr.w	pc, [sp], #4

000b9028 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9028:	4b02      	ldr	r3, [pc, #8]	; (b9034 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b902a:	681a      	ldr	r2, [r3, #0]
   b902c:	4b02      	ldr	r3, [pc, #8]	; (b9038 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b902e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9030:	4770      	bx	lr
   b9032:	bf00      	nop
   b9034:	2003e440 	.word	0x2003e440
   b9038:	2003e6b4 	.word	0x2003e6b4

000b903c <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b903c:	428a      	cmp	r2, r1
{
   b903e:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b9040:	d007      	beq.n	b9052 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b9042:	1a44      	subs	r4, r0, r1
   b9044:	9802      	ldr	r0, [sp, #8]
   b9046:	1ac0      	subs	r0, r0, r3
   b9048:	4344      	muls	r4, r0
   b904a:	1a50      	subs	r0, r2, r1
   b904c:	fb94 f0f0 	sdiv	r0, r4, r0
   b9050:	4418      	add	r0, r3
}
   b9052:	bd10      	pop	{r4, pc}

000b9054 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9054:	2100      	movs	r1, #0
   b9056:	f7ff bb79 	b.w	b874c <system_delay_ms>
	...

000b905c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b905c:	4b01      	ldr	r3, [pc, #4]	; (b9064 <_GLOBAL__sub_I_RGB+0x8>)
   b905e:	2200      	movs	r2, #0
   b9060:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b9062:	4770      	bx	lr
   b9064:	2003e6b8 	.word	0x2003e6b8

000b9068 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9068:	4b01      	ldr	r3, [pc, #4]	; (b9070 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b906a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b906c:	4770      	bx	lr
   b906e:	bf00      	nop
   b9070:	2003e448 	.word	0x2003e448

000b9074 <serialEventRun>:
{
   b9074:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9076:	4b0b      	ldr	r3, [pc, #44]	; (b90a4 <serialEventRun+0x30>)
   b9078:	b143      	cbz	r3, b908c <serialEventRun+0x18>
   b907a:	f000 f96d 	bl	b9358 <_Z16_fetch_usbserialv>
   b907e:	6803      	ldr	r3, [r0, #0]
   b9080:	691b      	ldr	r3, [r3, #16]
   b9082:	4798      	blx	r3
   b9084:	2800      	cmp	r0, #0
   b9086:	dd01      	ble.n	b908c <serialEventRun+0x18>
        serialEvent();
   b9088:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b908c:	4b06      	ldr	r3, [pc, #24]	; (b90a8 <serialEventRun+0x34>)
   b908e:	b143      	cbz	r3, b90a2 <serialEventRun+0x2e>
   b9090:	f000 fc32 	bl	b98f8 <_Z22__fetch_global_Serial1v>
   b9094:	6803      	ldr	r3, [r0, #0]
   b9096:	691b      	ldr	r3, [r3, #16]
   b9098:	4798      	blx	r3
   b909a:	2800      	cmp	r0, #0
   b909c:	dd01      	ble.n	b90a2 <serialEventRun+0x2e>
        serialEvent1();
   b909e:	f3af 8000 	nop.w
}
   b90a2:	bd08      	pop	{r3, pc}
	...

000b90ac <_post_loop>:
{
   b90ac:	b508      	push	{r3, lr}
	serialEventRun();
   b90ae:	f7ff ffe1 	bl	b9074 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b90b2:	f7ff f9bb 	bl	b842c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b90b6:	4b01      	ldr	r3, [pc, #4]	; (b90bc <_post_loop+0x10>)
   b90b8:	6018      	str	r0, [r3, #0]
}
   b90ba:	bd08      	pop	{r3, pc}
   b90bc:	2003e738 	.word	0x2003e738

000b90c0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b90c0:	4805      	ldr	r0, [pc, #20]	; (b90d8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b90c2:	4a06      	ldr	r2, [pc, #24]	; (b90dc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b90c4:	4906      	ldr	r1, [pc, #24]	; (b90e0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b90c6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b90c8:	1a12      	subs	r2, r2, r0
   b90ca:	f003 ff63 	bl	bcf94 <memcpy>
    __backup_sram_signature = signature;
   b90ce:	4b05      	ldr	r3, [pc, #20]	; (b90e4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b90d0:	4a05      	ldr	r2, [pc, #20]	; (b90e8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b90d2:	601a      	str	r2, [r3, #0]
}
   b90d4:	bd08      	pop	{r3, pc}
   b90d6:	bf00      	nop
   b90d8:	2003f400 	.word	0x2003f400
   b90dc:	2003f404 	.word	0x2003f404
   b90e0:	000be898 	.word	0x000be898
   b90e4:	2003f400 	.word	0x2003f400
   b90e8:	9a271c1e 	.word	0x9a271c1e

000b90ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b90ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b90ee:	2300      	movs	r3, #0
   b90f0:	9300      	str	r3, [sp, #0]
   b90f2:	461a      	mov	r2, r3
   b90f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b90f8:	f7ff fb42 	bl	b8780 <system_ctrl_set_result>
}
   b90fc:	b003      	add	sp, #12
   b90fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9104 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9104:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9106:	8843      	ldrh	r3, [r0, #2]
   b9108:	2b0a      	cmp	r3, #10
   b910a:	d008      	beq.n	b911e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b910c:	2b50      	cmp	r3, #80	; 0x50
   b910e:	d10b      	bne.n	b9128 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9110:	4b09      	ldr	r3, [pc, #36]	; (b9138 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9112:	681b      	ldr	r3, [r3, #0]
   b9114:	b14b      	cbz	r3, b912a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9116:	b003      	add	sp, #12
   b9118:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b911c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b911e:	f7ff ffe5 	bl	b90ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9122:	b003      	add	sp, #12
   b9124:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9128:	2300      	movs	r3, #0
   b912a:	9300      	str	r3, [sp, #0]
   b912c:	461a      	mov	r2, r3
   b912e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9132:	f7ff fb25 	bl	b8780 <system_ctrl_set_result>
}
   b9136:	e7f4      	b.n	b9122 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9138:	2003e6cc 	.word	0x2003e6cc

000b913c <module_user_init_hook>:
{
   b913c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b913e:	4812      	ldr	r0, [pc, #72]	; (b9188 <module_user_init_hook+0x4c>)
   b9140:	2100      	movs	r1, #0
   b9142:	f7ff fbd7 	bl	b88f4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9146:	4b11      	ldr	r3, [pc, #68]	; (b918c <module_user_init_hook+0x50>)
   b9148:	681a      	ldr	r2, [r3, #0]
   b914a:	4b11      	ldr	r3, [pc, #68]	; (b9190 <module_user_init_hook+0x54>)
   b914c:	429a      	cmp	r2, r3
   b914e:	4b11      	ldr	r3, [pc, #68]	; (b9194 <module_user_init_hook+0x58>)
   b9150:	bf0c      	ite	eq
   b9152:	2201      	moveq	r2, #1
   b9154:	2200      	movne	r2, #0
   b9156:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9158:	d001      	beq.n	b915e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b915a:	f7ff ffb1 	bl	b90c0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b915e:	f7ff f955 	bl	b840c <HAL_RNG_GetRandomNumber>
   b9162:	4604      	mov	r4, r0
    srand(seed);
   b9164:	f003 ff2c 	bl	bcfc0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9168:	4b0b      	ldr	r3, [pc, #44]	; (b9198 <module_user_init_hook+0x5c>)
   b916a:	b113      	cbz	r3, b9172 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b916c:	4620      	mov	r0, r4
   b916e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9172:	2100      	movs	r1, #0
   b9174:	4808      	ldr	r0, [pc, #32]	; (b9198 <module_user_init_hook+0x5c>)
   b9176:	f7ff fb85 	bl	b8884 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b917a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b917e:	4807      	ldr	r0, [pc, #28]	; (b919c <module_user_init_hook+0x60>)
   b9180:	2100      	movs	r1, #0
   b9182:	f7ff baf3 	b.w	b876c <system_ctrl_set_app_request_handler>
   b9186:	bf00      	nop
   b9188:	000b9069 	.word	0x000b9069
   b918c:	2003f400 	.word	0x2003f400
   b9190:	9a271c1e 	.word	0x9a271c1e
   b9194:	2003e6c8 	.word	0x2003e6c8
   b9198:	00000000 	.word	0x00000000
   b919c:	000b9105 	.word	0x000b9105

000b91a0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b91a0:	4770      	bx	lr

000b91a2 <_ZN9IPAddressD0Ev>:
   b91a2:	b510      	push	{r4, lr}
   b91a4:	2118      	movs	r1, #24
   b91a6:	4604      	mov	r4, r0
   b91a8:	f7fa ff79 	bl	b409e <_ZdlPvj>
   b91ac:	4620      	mov	r0, r4
   b91ae:	bd10      	pop	{r4, pc}

000b91b0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b91b0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b91b2:	7d03      	ldrb	r3, [r0, #20]
   b91b4:	2b06      	cmp	r3, #6
{
   b91b6:	b08d      	sub	sp, #52	; 0x34
   b91b8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b91ba:	f100 0704 	add.w	r7, r0, #4
   b91be:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b91c2:	d012      	beq.n	b91ea <_ZNK9IPAddress7printToER5Print+0x3a>
   b91c4:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b91c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b91cc:	220a      	movs	r2, #10
   b91ce:	4630      	mov	r0, r6
   b91d0:	f7ff fd93 	bl	b8cfa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b91d4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b91d6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b91d8:	d019      	beq.n	b920e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b91da:	2c00      	cmp	r4, #0
   b91dc:	d0f4      	beq.n	b91c8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b91de:	212e      	movs	r1, #46	; 0x2e
   b91e0:	4630      	mov	r0, r6
   b91e2:	f7ff fd6f 	bl	b8cc4 <_ZN5Print5printEc>
   b91e6:	4404      	add	r4, r0
   b91e8:	e7ee      	b.n	b91c8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b91ea:	232f      	movs	r3, #47	; 0x2f
   b91ec:	466a      	mov	r2, sp
   b91ee:	4639      	mov	r1, r7
   b91f0:	200a      	movs	r0, #10
		buf[0] = 0;
   b91f2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b91f6:	f7ff f959 	bl	b84ac <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b91fa:	4668      	mov	r0, sp
   b91fc:	f003 ff16 	bl	bd02c <strlen>
   b9200:	6833      	ldr	r3, [r6, #0]
   b9202:	4602      	mov	r2, r0
   b9204:	68db      	ldr	r3, [r3, #12]
   b9206:	4669      	mov	r1, sp
   b9208:	4630      	mov	r0, r6
   b920a:	4798      	blx	r3
   b920c:	4604      	mov	r4, r0
    }
    return n;
}
   b920e:	4620      	mov	r0, r4
   b9210:	b00d      	add	sp, #52	; 0x34
   b9212:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9214 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9214:	b510      	push	{r4, lr}
   b9216:	4b05      	ldr	r3, [pc, #20]	; (b922c <_ZN9IPAddressC1Ev+0x18>)
   b9218:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b921a:	2211      	movs	r2, #17
   b921c:	f840 3b04 	str.w	r3, [r0], #4
   b9220:	2100      	movs	r1, #0
   b9222:	f003 fec5 	bl	bcfb0 <memset>
}
   b9226:	4620      	mov	r0, r4
   b9228:	bd10      	pop	{r4, pc}
   b922a:	bf00      	nop
   b922c:	000be234 	.word	0x000be234

000b9230 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9230:	4603      	mov	r3, r0
   b9232:	4a07      	ldr	r2, [pc, #28]	; (b9250 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9234:	b510      	push	{r4, lr}
   b9236:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b923a:	f101 0210 	add.w	r2, r1, #16
   b923e:	f851 4b04 	ldr.w	r4, [r1], #4
   b9242:	f843 4b04 	str.w	r4, [r3], #4
   b9246:	4291      	cmp	r1, r2
   b9248:	d1f9      	bne.n	b923e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b924a:	780a      	ldrb	r2, [r1, #0]
   b924c:	701a      	strb	r2, [r3, #0]
}
   b924e:	bd10      	pop	{r4, pc}
   b9250:	000be234 	.word	0x000be234

000b9254 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9254:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b9256:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b925a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b925e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b9262:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b9266:	2304      	movs	r3, #4
   b9268:	6041      	str	r1, [r0, #4]
   b926a:	7503      	strb	r3, [r0, #20]
}
   b926c:	bd10      	pop	{r4, pc}
	...

000b9270 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b9270:	b507      	push	{r0, r1, r2, lr}
   b9272:	4b06      	ldr	r3, [pc, #24]	; (b928c <_ZN9IPAddressC1EPKh+0x1c>)
   b9274:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9276:	78cb      	ldrb	r3, [r1, #3]
   b9278:	9300      	str	r3, [sp, #0]
   b927a:	788b      	ldrb	r3, [r1, #2]
   b927c:	784a      	ldrb	r2, [r1, #1]
   b927e:	7809      	ldrb	r1, [r1, #0]
   b9280:	f7ff ffe8 	bl	b9254 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9284:	b003      	add	sp, #12
   b9286:	f85d fb04 	ldr.w	pc, [sp], #4
   b928a:	bf00      	nop
   b928c:	000be234 	.word	0x000be234

000b9290 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9290:	7441      	strb	r1, [r0, #17]
}
   b9292:	4770      	bx	lr

000b9294 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9294:	4770      	bx	lr

000b9296 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9296:	4770      	bx	lr

000b9298 <_ZN9USBSerial4readEv>:
{
   b9298:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b929a:	2100      	movs	r1, #0
   b929c:	7c00      	ldrb	r0, [r0, #16]
   b929e:	f7ff fa1d 	bl	b86dc <HAL_USB_USART_Receive_Data>
}
   b92a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b92a6:	bd08      	pop	{r3, pc}

000b92a8 <_ZN9USBSerial4peekEv>:
{
   b92a8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b92aa:	2101      	movs	r1, #1
   b92ac:	7c00      	ldrb	r0, [r0, #16]
   b92ae:	f7ff fa15 	bl	b86dc <HAL_USB_USART_Receive_Data>
}
   b92b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b92b6:	bd08      	pop	{r3, pc}

000b92b8 <_ZN9USBSerial17availableForWriteEv>:
{
   b92b8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b92ba:	7c00      	ldrb	r0, [r0, #16]
   b92bc:	f7ff fa06 	bl	b86cc <HAL_USB_USART_Available_Data_For_Write>
}
   b92c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b92c4:	bd08      	pop	{r3, pc}

000b92c6 <_ZN9USBSerial9availableEv>:
{
   b92c6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b92c8:	7c00      	ldrb	r0, [r0, #16]
   b92ca:	f7ff f9f7 	bl	b86bc <HAL_USB_USART_Available_Data>
}
   b92ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b92d2:	bd08      	pop	{r3, pc}

000b92d4 <_ZN9USBSerial5writeEh>:
{
   b92d4:	b513      	push	{r0, r1, r4, lr}
   b92d6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b92d8:	7c00      	ldrb	r0, [r0, #16]
{
   b92da:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b92dc:	f7ff f9f6 	bl	b86cc <HAL_USB_USART_Available_Data_For_Write>
   b92e0:	2800      	cmp	r0, #0
   b92e2:	9901      	ldr	r1, [sp, #4]
   b92e4:	dc01      	bgt.n	b92ea <_ZN9USBSerial5writeEh+0x16>
   b92e6:	7c60      	ldrb	r0, [r4, #17]
   b92e8:	b120      	cbz	r0, b92f4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b92ea:	7c20      	ldrb	r0, [r4, #16]
   b92ec:	f7ff f9fe 	bl	b86ec <HAL_USB_USART_Send_Data>
   b92f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b92f4:	b002      	add	sp, #8
   b92f6:	bd10      	pop	{r4, pc}

000b92f8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b92f8:	7c00      	ldrb	r0, [r0, #16]
   b92fa:	f7ff b9ff 	b.w	b86fc <HAL_USB_USART_Flush_Data>

000b92fe <_ZN9USBSerialD0Ev>:
   b92fe:	b510      	push	{r4, lr}
   b9300:	2114      	movs	r1, #20
   b9302:	4604      	mov	r4, r0
   b9304:	f7fa fecb 	bl	b409e <_ZdlPvj>
   b9308:	4620      	mov	r0, r4
   b930a:	bd10      	pop	{r4, pc}

000b930c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b930c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b930e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9312:	4604      	mov	r4, r0
   b9314:	4608      	mov	r0, r1
   b9316:	2100      	movs	r1, #0
   b9318:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b931c:	4b04      	ldr	r3, [pc, #16]	; (b9330 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b931e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9320:	2301      	movs	r3, #1
  _serial = serial;
   b9322:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9324:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9326:	4611      	mov	r1, r2
   b9328:	f7ff f9b8 	bl	b869c <HAL_USB_USART_Init>
}
   b932c:	4620      	mov	r0, r4
   b932e:	bd10      	pop	{r4, pc}
   b9330:	000be248 	.word	0x000be248

000b9334 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9334:	7c00      	ldrb	r0, [r0, #16]
   b9336:	2200      	movs	r2, #0
   b9338:	f7ff b9b8 	b.w	b86ac <HAL_USB_USART_Begin>

000b933c <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   b933c:	7c00      	ldrb	r0, [r0, #16]
   b933e:	f7ff b9e5 	b.w	b870c <HAL_USB_USART_Is_Enabled>

000b9342 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   b9342:	f7ff bffb 	b.w	b933c <_ZN9USBSerial9isEnabledEv>

000b9346 <_Z19acquireSerialBufferv>:
{
   b9346:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9348:	2214      	movs	r2, #20
{
   b934a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b934c:	2100      	movs	r1, #0
   b934e:	f003 fe2f 	bl	bcfb0 <memset>
}
   b9352:	4620      	mov	r0, r4
   b9354:	bd10      	pop	{r4, pc}
	...

000b9358 <_Z16_fetch_usbserialv>:
{
   b9358:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b935a:	4c0f      	ldr	r4, [pc, #60]	; (b9398 <_Z16_fetch_usbserialv+0x40>)
{
   b935c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b935e:	a803      	add	r0, sp, #12
   b9360:	f7ff fff1 	bl	b9346 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9364:	7821      	ldrb	r1, [r4, #0]
   b9366:	f3bf 8f5b 	dmb	ish
   b936a:	f011 0101 	ands.w	r1, r1, #1
   b936e:	d10f      	bne.n	b9390 <_Z16_fetch_usbserialv+0x38>
   b9370:	4620      	mov	r0, r4
   b9372:	9101      	str	r1, [sp, #4]
   b9374:	f7fa fea0 	bl	b40b8 <__cxa_guard_acquire>
   b9378:	9901      	ldr	r1, [sp, #4]
   b937a:	b148      	cbz	r0, b9390 <_Z16_fetch_usbserialv+0x38>
   b937c:	aa03      	add	r2, sp, #12
   b937e:	4807      	ldr	r0, [pc, #28]	; (b939c <_Z16_fetch_usbserialv+0x44>)
   b9380:	f7ff ffc4 	bl	b930c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9384:	4620      	mov	r0, r4
   b9386:	f7fa fe9c 	bl	b40c2 <__cxa_guard_release>
   b938a:	4805      	ldr	r0, [pc, #20]	; (b93a0 <_Z16_fetch_usbserialv+0x48>)
   b938c:	f003 fdfc 	bl	bcf88 <atexit>
	return _usbserial;
}
   b9390:	4802      	ldr	r0, [pc, #8]	; (b939c <_Z16_fetch_usbserialv+0x44>)
   b9392:	b008      	add	sp, #32
   b9394:	bd10      	pop	{r4, pc}
   b9396:	bf00      	nop
   b9398:	2003e6d0 	.word	0x2003e6d0
   b939c:	2003e6d4 	.word	0x2003e6d4
   b93a0:	000b9295 	.word	0x000b9295

000b93a4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b93a4:	4700      	bx	r0
	...

000b93a8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b93a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b93ac:	2400      	movs	r4, #0
{
   b93ae:	461d      	mov	r5, r3
   b93b0:	460f      	mov	r7, r1
   b93b2:	4690      	mov	r8, r2
   b93b4:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b93b6:	f7ff f819 	bl	b83ec <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b93ba:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b93bc:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b93c0:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b93c4:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b93c8:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b93cc:	bfa2      	ittt	ge
   b93ce:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b93d2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b93d6:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b93d8:	4907      	ldr	r1, [pc, #28]	; (b93f8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b93da:	9400      	str	r4, [sp, #0]
   b93dc:	4643      	mov	r3, r8
   b93de:	463a      	mov	r2, r7
   b93e0:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b93e2:	bfa8      	it	ge
   b93e4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b93e8:	f7fe fff8 	bl	b83dc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b93ec:	fab0 f080 	clz	r0, r0
   b93f0:	0940      	lsrs	r0, r0, #5
   b93f2:	b004      	add	sp, #16
   b93f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b93f8:	000b93a5 	.word	0x000b93a5

000b93fc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b93fc:	2200      	movs	r2, #0
   b93fe:	6840      	ldr	r0, [r0, #4]
   b9400:	4611      	mov	r1, r2
   b9402:	f7ff b9df 	b.w	b87c4 <network_ready>

000b9406 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b9406:	2200      	movs	r2, #0
   b9408:	6840      	ldr	r0, [r0, #4]
   b940a:	4611      	mov	r1, r2
   b940c:	f7ff b9fa 	b.w	b8804 <network_listening>

000b9410 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9410:	2200      	movs	r2, #0
   b9412:	6840      	ldr	r0, [r0, #4]
   b9414:	4611      	mov	r1, r2
   b9416:	f7ff ba05 	b.w	b8824 <network_get_listen_timeout>

000b941a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b941a:	6840      	ldr	r0, [r0, #4]
   b941c:	2200      	movs	r2, #0
   b941e:	f7ff b9f9 	b.w	b8814 <network_set_listen_timeout>

000b9422 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9422:	6840      	ldr	r0, [r0, #4]
   b9424:	2200      	movs	r2, #0
   b9426:	f081 0101 	eor.w	r1, r1, #1
   b942a:	f7ff b9e3 	b.w	b87f4 <network_listen>

000b942e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b942e:	2300      	movs	r3, #0
   b9430:	6840      	ldr	r0, [r0, #4]
   b9432:	461a      	mov	r2, r3
   b9434:	4619      	mov	r1, r3
   b9436:	f7ff b9d5 	b.w	b87e4 <network_off>

000b943a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b943a:	2300      	movs	r3, #0
   b943c:	6840      	ldr	r0, [r0, #4]
   b943e:	461a      	mov	r2, r3
   b9440:	4619      	mov	r1, r3
   b9442:	f7ff b9c7 	b.w	b87d4 <network_on>

000b9446 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9446:	2200      	movs	r2, #0
   b9448:	6840      	ldr	r0, [r0, #4]
   b944a:	4611      	mov	r1, r2
   b944c:	f7ff b9aa 	b.w	b87a4 <network_connecting>

000b9450 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9450:	6840      	ldr	r0, [r0, #4]
   b9452:	2200      	movs	r2, #0
   b9454:	2102      	movs	r1, #2
   b9456:	f7ff b9ad 	b.w	b87b4 <network_disconnect>

000b945a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b945a:	2300      	movs	r3, #0
   b945c:	6840      	ldr	r0, [r0, #4]
   b945e:	461a      	mov	r2, r3
   b9460:	f7ff b998 	b.w	b8794 <network_connect>

000b9464 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b9464:	4b08      	ldr	r3, [pc, #32]	; (b9488 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b9466:	b510      	push	{r4, lr}
   b9468:	2428      	movs	r4, #40	; 0x28
   b946a:	4622      	mov	r2, r4
   b946c:	4618      	mov	r0, r3
   b946e:	2100      	movs	r1, #0
   b9470:	f003 fd9e 	bl	bcfb0 <memset>
   b9474:	4b05      	ldr	r3, [pc, #20]	; (b948c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b9476:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b9478:	f04f 32ff 	mov.w	r2, #4294967295
   b947c:	6042      	str	r2, [r0, #4]
   b947e:	2204      	movs	r2, #4
   b9480:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b9482:	4a03      	ldr	r2, [pc, #12]	; (b9490 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b9484:	601a      	str	r2, [r3, #0]
   b9486:	bd10      	pop	{r4, pc}
   b9488:	2003e6f0 	.word	0x2003e6f0
   b948c:	2003e6e8 	.word	0x2003e6e8
   b9490:	000be278 	.word	0x000be278

000b9494 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9494:	4770      	bx	lr

000b9496 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9496:	7441      	strb	r1, [r0, #17]
}
   b9498:	4770      	bx	lr

000b949a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b949a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b949c:	7c00      	ldrb	r0, [r0, #16]
   b949e:	f7ff f83d 	bl	b851c <hal_usart_available_data_for_write>
}
   b94a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b94a6:	bd08      	pop	{r3, pc}

000b94a8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b94a8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b94aa:	7c00      	ldrb	r0, [r0, #16]
   b94ac:	f7ff f80e 	bl	b84cc <hal_usart_available>
}
   b94b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b94b4:	bd08      	pop	{r3, pc}

000b94b6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b94b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b94b8:	7c00      	ldrb	r0, [r0, #16]
   b94ba:	f7ff f817 	bl	b84ec <hal_usart_peek>
}
   b94be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b94c2:	bd08      	pop	{r3, pc}

000b94c4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b94c4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b94c6:	7c00      	ldrb	r0, [r0, #16]
   b94c8:	f7ff f808 	bl	b84dc <hal_usart_read>
}
   b94cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b94d0:	bd08      	pop	{r3, pc}

000b94d2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b94d2:	7c00      	ldrb	r0, [r0, #16]
   b94d4:	f7ff b812 	b.w	b84fc <hal_usart_flush>

000b94d8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b94d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b94da:	7c45      	ldrb	r5, [r0, #17]
{
   b94dc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b94de:	b12d      	cbz	r5, b94ec <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b94e0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b94e2:	b003      	add	sp, #12
   b94e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b94e8:	f7fe bfe8 	b.w	b84bc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b94ec:	7c00      	ldrb	r0, [r0, #16]
   b94ee:	9101      	str	r1, [sp, #4]
   b94f0:	f7ff f814 	bl	b851c <hal_usart_available_data_for_write>
   b94f4:	2800      	cmp	r0, #0
   b94f6:	9901      	ldr	r1, [sp, #4]
   b94f8:	dcf2      	bgt.n	b94e0 <_ZN11USARTSerial5writeEh+0x8>
}
   b94fa:	4628      	mov	r0, r5
   b94fc:	b003      	add	sp, #12
   b94fe:	bd30      	pop	{r4, r5, pc}

000b9500 <_ZN11USARTSerialD0Ev>:
   b9500:	b510      	push	{r4, lr}
   b9502:	2114      	movs	r1, #20
   b9504:	4604      	mov	r4, r0
   b9506:	f7fa fdca 	bl	b409e <_ZdlPvj>
   b950a:	4620      	mov	r0, r4
   b950c:	bd10      	pop	{r4, pc}
	...

000b9510 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9510:	b510      	push	{r4, lr}
   b9512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9516:	4604      	mov	r4, r0
   b9518:	4608      	mov	r0, r1
   b951a:	4611      	mov	r1, r2
   b951c:	2200      	movs	r2, #0
   b951e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9522:	4b04      	ldr	r3, [pc, #16]	; (b9534 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9524:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9526:	2301      	movs	r3, #1
  _serial = serial;
   b9528:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b952a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b952c:	f7fe fffe 	bl	b852c <hal_usart_init_ex>
}
   b9530:	4620      	mov	r0, r4
   b9532:	bd10      	pop	{r4, pc}
   b9534:	000be2b4 	.word	0x000be2b4

000b9538 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9538:	4770      	bx	lr

000b953a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b953a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b953c:	4606      	mov	r6, r0
   b953e:	4615      	mov	r5, r2
   b9540:	460c      	mov	r4, r1
   b9542:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9544:	42bc      	cmp	r4, r7
   b9546:	d006      	beq.n	b9556 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9548:	6833      	ldr	r3, [r6, #0]
   b954a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b954e:	689b      	ldr	r3, [r3, #8]
   b9550:	4630      	mov	r0, r6
   b9552:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9554:	e7f6      	b.n	b9544 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9556:	4628      	mov	r0, r5
   b9558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b955a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b955a:	7c00      	ldrb	r0, [r0, #16]
   b955c:	2200      	movs	r2, #0
   b955e:	f7ff b80d 	b.w	b857c <hal_i2c_write>

000b9562 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9562:	7c00      	ldrb	r0, [r0, #16]
   b9564:	2100      	movs	r1, #0
   b9566:	f7ff b811 	b.w	b858c <hal_i2c_available>

000b956a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b956a:	7c00      	ldrb	r0, [r0, #16]
   b956c:	2100      	movs	r1, #0
   b956e:	f7ff b815 	b.w	b859c <hal_i2c_read>

000b9572 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9572:	7c00      	ldrb	r0, [r0, #16]
   b9574:	2100      	movs	r1, #0
   b9576:	f7ff b819 	b.w	b85ac <hal_i2c_peek>

000b957a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b957a:	7c00      	ldrb	r0, [r0, #16]
   b957c:	2100      	movs	r1, #0
   b957e:	f7ff b81d 	b.w	b85bc <hal_i2c_flush>

000b9582 <_ZN7TwoWireD0Ev>:
   b9582:	b510      	push	{r4, lr}
   b9584:	2114      	movs	r1, #20
   b9586:	4604      	mov	r4, r0
   b9588:	f7fa fd89 	bl	b409e <_ZdlPvj>
   b958c:	4620      	mov	r0, r4
   b958e:	bd10      	pop	{r4, pc}

000b9590 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9590:	b510      	push	{r4, lr}
   b9592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9596:	4604      	mov	r4, r0
   b9598:	4608      	mov	r0, r1
   b959a:	2100      	movs	r1, #0
   b959c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b95a0:	4b03      	ldr	r3, [pc, #12]	; (b95b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b95a2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b95a4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b95a6:	4611      	mov	r1, r2
   b95a8:	f7ff f818 	bl	b85dc <hal_i2c_init>
}
   b95ac:	4620      	mov	r0, r4
   b95ae:	bd10      	pop	{r4, pc}
   b95b0:	000be2e4 	.word	0x000be2e4

000b95b4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b95b4:	7c00      	ldrb	r0, [r0, #16]
   b95b6:	2200      	movs	r2, #0
   b95b8:	f7fe bfc0 	b.w	b853c <hal_i2c_set_speed>

000b95bc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b95bc:	2300      	movs	r3, #0
   b95be:	7c00      	ldrb	r0, [r0, #16]
   b95c0:	461a      	mov	r2, r3
   b95c2:	4619      	mov	r1, r3
   b95c4:	f7fe bfc2 	b.w	b854c <hal_i2c_begin>

000b95c8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b95c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b95ca:	2200      	movs	r2, #0
   b95cc:	2314      	movs	r3, #20
   b95ce:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b95d2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b95d6:	780b      	ldrb	r3, [r1, #0]
   b95d8:	f88d 3008 	strb.w	r3, [sp, #8]
   b95dc:	684b      	ldr	r3, [r1, #4]
   b95de:	9303      	str	r3, [sp, #12]
   b95e0:	68cb      	ldr	r3, [r1, #12]
   b95e2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b95e4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b95e6:	7a0b      	ldrb	r3, [r1, #8]
   b95e8:	9305      	str	r3, [sp, #20]
   b95ea:	a901      	add	r1, sp, #4
   b95ec:	f7fe fffe 	bl	b85ec <hal_i2c_request_ex>
}
   b95f0:	b007      	add	sp, #28
   b95f2:	f85d fb04 	ldr.w	pc, [sp], #4

000b95f6 <_ZN7TwoWire11requestFromEhjh>:
{
   b95f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b95f8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b95fa:	f88d 1000 	strb.w	r1, [sp]
   b95fe:	f04f 0164 	mov.w	r1, #100	; 0x64
   b9602:	9103      	str	r1, [sp, #12]
   b9604:	bf18      	it	ne
   b9606:	2301      	movne	r3, #1
   b9608:	4669      	mov	r1, sp
    size_ = size;
   b960a:	9201      	str	r2, [sp, #4]
   b960c:	f88d 3008 	strb.w	r3, [sp, #8]
   b9610:	f7ff ffda 	bl	b95c8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b9614:	b005      	add	sp, #20
   b9616:	f85d fb04 	ldr.w	pc, [sp], #4

000b961a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b961a:	2301      	movs	r3, #1
   b961c:	f7ff bfeb 	b.w	b95f6 <_ZN7TwoWire11requestFromEhjh>

000b9620 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9620:	7c00      	ldrb	r0, [r0, #16]
   b9622:	2200      	movs	r2, #0
   b9624:	f7fe bf9a 	b.w	b855c <hal_i2c_begin_transmission>

000b9628 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9628:	7c00      	ldrb	r0, [r0, #16]
   b962a:	2200      	movs	r2, #0
   b962c:	f7fe bf9e 	b.w	b856c <hal_i2c_end_transmission>

000b9630 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b9630:	2101      	movs	r1, #1
   b9632:	f7ff bff9 	b.w	b9628 <_ZN7TwoWire15endTransmissionEh>

000b9636 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9636:	2300      	movs	r3, #0
   b9638:	6840      	ldr	r0, [r0, #4]
   b963a:	461a      	mov	r2, r3
   b963c:	f7ff b8aa 	b.w	b8794 <network_connect>

000b9640 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9640:	6840      	ldr	r0, [r0, #4]
   b9642:	2200      	movs	r2, #0
   b9644:	2102      	movs	r1, #2
   b9646:	f7ff b8b5 	b.w	b87b4 <network_disconnect>

000b964a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b964a:	2200      	movs	r2, #0
   b964c:	6840      	ldr	r0, [r0, #4]
   b964e:	4611      	mov	r1, r2
   b9650:	f7ff b8a8 	b.w	b87a4 <network_connecting>

000b9654 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9654:	2200      	movs	r2, #0
   b9656:	6840      	ldr	r0, [r0, #4]
   b9658:	4611      	mov	r1, r2
   b965a:	f7ff b8b3 	b.w	b87c4 <network_ready>

000b965e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b965e:	2300      	movs	r3, #0
   b9660:	6840      	ldr	r0, [r0, #4]
   b9662:	461a      	mov	r2, r3
   b9664:	4619      	mov	r1, r3
   b9666:	f7ff b8b5 	b.w	b87d4 <network_on>

000b966a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b966a:	2300      	movs	r3, #0
   b966c:	6840      	ldr	r0, [r0, #4]
   b966e:	461a      	mov	r2, r3
   b9670:	4619      	mov	r1, r3
   b9672:	f7ff b8b7 	b.w	b87e4 <network_off>

000b9676 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9676:	6840      	ldr	r0, [r0, #4]
   b9678:	2100      	movs	r1, #0
   b967a:	f7ff b8db 	b.w	b8834 <network_is_on>

000b967e <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b967e:	6840      	ldr	r0, [r0, #4]
   b9680:	2100      	movs	r1, #0
   b9682:	f7ff b8df 	b.w	b8844 <network_is_off>

000b9686 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9686:	6840      	ldr	r0, [r0, #4]
   b9688:	2200      	movs	r2, #0
   b968a:	f081 0101 	eor.w	r1, r1, #1
   b968e:	f7ff b8b1 	b.w	b87f4 <network_listen>

000b9692 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9692:	6840      	ldr	r0, [r0, #4]
   b9694:	2200      	movs	r2, #0
   b9696:	f7ff b8bd 	b.w	b8814 <network_set_listen_timeout>

000b969a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b969a:	2200      	movs	r2, #0
   b969c:	6840      	ldr	r0, [r0, #4]
   b969e:	4611      	mov	r1, r2
   b96a0:	f7ff b8c0 	b.w	b8824 <network_get_listen_timeout>

000b96a4 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b96a4:	2200      	movs	r2, #0
   b96a6:	6840      	ldr	r0, [r0, #4]
   b96a8:	4611      	mov	r1, r2
   b96aa:	f7ff b8ab 	b.w	b8804 <network_listening>

000b96ae <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b96ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b96b2:	b095      	sub	sp, #84	; 0x54
   b96b4:	4614      	mov	r4, r2
   b96b6:	460d      	mov	r5, r1
   b96b8:	4607      	mov	r7, r0
    IPAddress addr;
   b96ba:	f7ff fdab 	bl	b9214 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b96be:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b96c0:	221c      	movs	r2, #28
   b96c2:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b96c4:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b96c6:	f003 fc73 	bl	bcfb0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b96ca:	2340      	movs	r3, #64	; 0x40
   b96cc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b96ce:	4620      	mov	r0, r4
   b96d0:	466b      	mov	r3, sp
   b96d2:	aa0c      	add	r2, sp, #48	; 0x30
   b96d4:	2100      	movs	r1, #0
   b96d6:	f7fe fe51 	bl	b837c <netdb_getaddrinfo>
    if (!r) {
   b96da:	4604      	mov	r4, r0
   b96dc:	2800      	cmp	r0, #0
   b96de:	d14b      	bne.n	b9778 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b96e0:	4602      	mov	r2, r0
   b96e2:	2101      	movs	r1, #1
   b96e4:	6868      	ldr	r0, [r5, #4]
   b96e6:	f7ff f86d 	bl	b87c4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b96ea:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b96ec:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b96ee:	4622      	mov	r2, r4
   b96f0:	6868      	ldr	r0, [r5, #4]
   b96f2:	f7ff f867 	bl	b87c4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b96f6:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b96f8:	4681      	mov	r9, r0
        bool ok = false;
   b96fa:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b96fc:	2e00      	cmp	r6, #0
   b96fe:	d03b      	beq.n	b9778 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9700:	2900      	cmp	r1, #0
   b9702:	d139      	bne.n	b9778 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9704:	6873      	ldr	r3, [r6, #4]
   b9706:	2b02      	cmp	r3, #2
   b9708:	d003      	beq.n	b9712 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b970a:	2b0a      	cmp	r3, #10
   b970c:	d011      	beq.n	b9732 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b970e:	69f6      	ldr	r6, [r6, #28]
   b9710:	e7f4      	b.n	b96fc <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9712:	f1b8 0f00 	cmp.w	r8, #0
   b9716:	d0fa      	beq.n	b970e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b9718:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b971a:	a806      	add	r0, sp, #24
   b971c:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b971e:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9720:	f7ff fda6 	bl	b9270 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9726:	1d3c      	adds	r4, r7, #4
   b9728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b972a:	682b      	ldr	r3, [r5, #0]
   b972c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b972e:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9730:	e7ed      	b.n	b970e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9732:	f1b9 0f00 	cmp.w	r9, #0
   b9736:	d0ea      	beq.n	b970e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9738:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b973a:	2210      	movs	r2, #16
   b973c:	a801      	add	r0, sp, #4
   b973e:	f003 fc37 	bl	bcfb0 <memset>
                    a.v = 6;
   b9742:	2306      	movs	r3, #6
   b9744:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9748:	ad01      	add	r5, sp, #4
   b974a:	f104 0308 	add.w	r3, r4, #8
   b974e:	3418      	adds	r4, #24
   b9750:	6818      	ldr	r0, [r3, #0]
   b9752:	6859      	ldr	r1, [r3, #4]
   b9754:	462a      	mov	r2, r5
   b9756:	c203      	stmia	r2!, {r0, r1}
   b9758:	3308      	adds	r3, #8
   b975a:	42a3      	cmp	r3, r4
   b975c:	4615      	mov	r5, r2
   b975e:	d1f7      	bne.n	b9750 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9760:	a901      	add	r1, sp, #4
   b9762:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9764:	ad07      	add	r5, sp, #28
   b9766:	f7ff fd63 	bl	b9230 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b976a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b976c:	1d3c      	adds	r4, r7, #4
   b976e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9770:	682b      	ldr	r3, [r5, #0]
   b9772:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9774:	4649      	mov	r1, r9
   b9776:	e7ca      	b.n	b970e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9778:	9800      	ldr	r0, [sp, #0]
   b977a:	f7fe fdf7 	bl	b836c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b977e:	4638      	mov	r0, r7
   b9780:	b015      	add	sp, #84	; 0x54
   b9782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000b9788 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9788:	4b02      	ldr	r3, [pc, #8]	; (b9794 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b978a:	4a03      	ldr	r2, [pc, #12]	; (b9798 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b978c:	601a      	str	r2, [r3, #0]
   b978e:	2200      	movs	r2, #0
   b9790:	605a      	str	r2, [r3, #4]

} // spark
   b9792:	4770      	bx	lr
   b9794:	2003e718 	.word	0x2003e718
   b9798:	000be30c 	.word	0x000be30c

000b979c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b979c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b979e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b97a0:	d902      	bls.n	b97a8 <pinAvailable+0xc>
    return false;
   b97a2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b97a4:	b002      	add	sp, #8
   b97a6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b97a8:	f1a0 030b 	sub.w	r3, r0, #11
   b97ac:	2b02      	cmp	r3, #2
   b97ae:	d81a      	bhi.n	b97e6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b97b0:	4c17      	ldr	r4, [pc, #92]	; (b9810 <pinAvailable+0x74>)
   b97b2:	7821      	ldrb	r1, [r4, #0]
   b97b4:	f3bf 8f5b 	dmb	ish
   b97b8:	f011 0101 	ands.w	r1, r1, #1
   b97bc:	d10b      	bne.n	b97d6 <pinAvailable+0x3a>
   b97be:	4620      	mov	r0, r4
   b97c0:	9101      	str	r1, [sp, #4]
   b97c2:	f7fa fc79 	bl	b40b8 <__cxa_guard_acquire>
   b97c6:	9901      	ldr	r1, [sp, #4]
   b97c8:	b128      	cbz	r0, b97d6 <pinAvailable+0x3a>
   b97ca:	4812      	ldr	r0, [pc, #72]	; (b9814 <pinAvailable+0x78>)
   b97cc:	f7ff f8de 	bl	b898c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b97d0:	4620      	mov	r0, r4
   b97d2:	f7fa fc76 	bl	b40c2 <__cxa_guard_release>
   b97d6:	4b0f      	ldr	r3, [pc, #60]	; (b9814 <pinAvailable+0x78>)
   b97d8:	7818      	ldrb	r0, [r3, #0]
   b97da:	f7fe ff27 	bl	b862c <hal_spi_is_enabled>
   b97de:	2800      	cmp	r0, #0
   b97e0:	d1df      	bne.n	b97a2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b97e2:	2001      	movs	r0, #1
   b97e4:	e7de      	b.n	b97a4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b97e6:	2801      	cmp	r0, #1
   b97e8:	d809      	bhi.n	b97fe <pinAvailable+0x62>
   b97ea:	f000 f8d7 	bl	b999c <_Z19__fetch_global_Wirev>
   b97ee:	2100      	movs	r1, #0
   b97f0:	7c00      	ldrb	r0, [r0, #16]
   b97f2:	f7fe feeb 	bl	b85cc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b97f6:	f080 0001 	eor.w	r0, r0, #1
   b97fa:	b2c0      	uxtb	r0, r0
   b97fc:	e7d2      	b.n	b97a4 <pinAvailable+0x8>
   b97fe:	3809      	subs	r0, #9
   b9800:	2801      	cmp	r0, #1
   b9802:	d8ee      	bhi.n	b97e2 <pinAvailable+0x46>
   b9804:	f000 f878 	bl	b98f8 <_Z22__fetch_global_Serial1v>
   b9808:	7c00      	ldrb	r0, [r0, #16]
   b980a:	f7fe fe7f 	bl	b850c <hal_usart_is_enabled>
   b980e:	e7f2      	b.n	b97f6 <pinAvailable+0x5a>
   b9810:	2003e688 	.word	0x2003e688
   b9814:	2003e68c 	.word	0x2003e68c

000b9818 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9818:	2823      	cmp	r0, #35	; 0x23
{
   b981a:	b538      	push	{r3, r4, r5, lr}
   b981c:	4604      	mov	r4, r0
   b981e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9820:	d80a      	bhi.n	b9838 <pinMode+0x20>
   b9822:	29ff      	cmp	r1, #255	; 0xff
   b9824:	d008      	beq.n	b9838 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b9826:	f7ff ffb9 	bl	b979c <pinAvailable>
   b982a:	b128      	cbz	r0, b9838 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b982c:	4629      	mov	r1, r5
   b982e:	4620      	mov	r0, r4
}
   b9830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9834:	f7fe bdb2 	b.w	b839c <HAL_Pin_Mode>
}
   b9838:	bd38      	pop	{r3, r4, r5, pc}

000b983a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b983a:	b538      	push	{r3, r4, r5, lr}
   b983c:	4604      	mov	r4, r0
   b983e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9840:	f7fe fdb4 	bl	b83ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b9844:	28ff      	cmp	r0, #255	; 0xff
   b9846:	d010      	beq.n	b986a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9848:	2806      	cmp	r0, #6
   b984a:	d804      	bhi.n	b9856 <digitalWrite+0x1c>
   b984c:	234d      	movs	r3, #77	; 0x4d
   b984e:	fa23 f000 	lsr.w	r0, r3, r0
   b9852:	07c3      	lsls	r3, r0, #31
   b9854:	d409      	bmi.n	b986a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b9856:	4620      	mov	r0, r4
   b9858:	f7ff ffa0 	bl	b979c <pinAvailable>
   b985c:	b128      	cbz	r0, b986a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b985e:	4629      	mov	r1, r5
   b9860:	4620      	mov	r0, r4
}
   b9862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b9866:	f7fe bda9 	b.w	b83bc <HAL_GPIO_Write>
}
   b986a:	bd38      	pop	{r3, r4, r5, pc}

000b986c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b986c:	b510      	push	{r4, lr}
   b986e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9870:	f7fe fd9c 	bl	b83ac <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b9874:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b9876:	b2db      	uxtb	r3, r3
   b9878:	2b01      	cmp	r3, #1
   b987a:	d908      	bls.n	b988e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b987c:	4620      	mov	r0, r4
   b987e:	f7ff ff8d 	bl	b979c <pinAvailable>
   b9882:	b120      	cbz	r0, b988e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b9884:	4620      	mov	r0, r4
}
   b9886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b988a:	f7fe bd9f 	b.w	b83cc <HAL_GPIO_Read>
}
   b988e:	2000      	movs	r0, #0
   b9890:	bd10      	pop	{r4, pc}

000b9892 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b9892:	280d      	cmp	r0, #13
{
   b9894:	b510      	push	{r4, lr}
   b9896:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b9898:	bf9c      	itt	ls
   b989a:	340e      	addls	r4, #14
   b989c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b989e:	4620      	mov	r0, r4
   b98a0:	f7ff ff7c 	bl	b979c <pinAvailable>
   b98a4:	b150      	cbz	r0, b98bc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b98a6:	2103      	movs	r1, #3
   b98a8:	4620      	mov	r0, r4
   b98aa:	f7fe fd6f 	bl	b838c <HAL_Validate_Pin_Function>
   b98ae:	2803      	cmp	r0, #3
   b98b0:	d104      	bne.n	b98bc <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b98b2:	4620      	mov	r0, r4
}
   b98b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b98b8:	f7fe bda0 	b.w	b83fc <hal_adc_read>
}
   b98bc:	2000      	movs	r0, #0
   b98be:	bd10      	pop	{r4, pc}

000b98c0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b98c0:	4770      	bx	lr
	...

000b98c4 <_Z20acquireSerial1Bufferv>:
{
   b98c4:	b538      	push	{r3, r4, r5, lr}
   b98c6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b98c8:	2514      	movs	r5, #20
   b98ca:	462a      	mov	r2, r5
   b98cc:	2100      	movs	r1, #0
   b98ce:	f003 fb6f 	bl	bcfb0 <memset>
   b98d2:	8025      	strh	r5, [r4, #0]
   b98d4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b98d6:	4907      	ldr	r1, [pc, #28]	; (b98f4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b98d8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b98da:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b98dc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b98de:	f000 f881 	bl	b99e4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b98e2:	4904      	ldr	r1, [pc, #16]	; (b98f4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b98e4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b98e6:	4628      	mov	r0, r5
   b98e8:	f000 f87c 	bl	b99e4 <_ZnajRKSt9nothrow_t>
    };
   b98ec:	60e0      	str	r0, [r4, #12]
}
   b98ee:	4620      	mov	r0, r4
   b98f0:	bd38      	pop	{r3, r4, r5, pc}
   b98f2:	bf00      	nop
   b98f4:	000be340 	.word	0x000be340

000b98f8 <_Z22__fetch_global_Serial1v>:
{
   b98f8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b98fa:	4d0e      	ldr	r5, [pc, #56]	; (b9934 <_Z22__fetch_global_Serial1v+0x3c>)
   b98fc:	7829      	ldrb	r1, [r5, #0]
   b98fe:	f3bf 8f5b 	dmb	ish
   b9902:	f011 0401 	ands.w	r4, r1, #1
{
   b9906:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9908:	d111      	bne.n	b992e <_Z22__fetch_global_Serial1v+0x36>
   b990a:	4628      	mov	r0, r5
   b990c:	f7fa fbd4 	bl	b40b8 <__cxa_guard_acquire>
   b9910:	b168      	cbz	r0, b992e <_Z22__fetch_global_Serial1v+0x36>
   b9912:	a801      	add	r0, sp, #4
   b9914:	f7ff ffd6 	bl	b98c4 <_Z20acquireSerial1Bufferv>
   b9918:	aa01      	add	r2, sp, #4
   b991a:	4621      	mov	r1, r4
   b991c:	4806      	ldr	r0, [pc, #24]	; (b9938 <_Z22__fetch_global_Serial1v+0x40>)
   b991e:	f7ff fdf7 	bl	b9510 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9922:	4628      	mov	r0, r5
   b9924:	f7fa fbcd 	bl	b40c2 <__cxa_guard_release>
   b9928:	4804      	ldr	r0, [pc, #16]	; (b993c <_Z22__fetch_global_Serial1v+0x44>)
   b992a:	f003 fb2d 	bl	bcf88 <atexit>
    return serial1;
}
   b992e:	4802      	ldr	r0, [pc, #8]	; (b9938 <_Z22__fetch_global_Serial1v+0x40>)
   b9930:	b007      	add	sp, #28
   b9932:	bd30      	pop	{r4, r5, pc}
   b9934:	2003e720 	.word	0x2003e720
   b9938:	2003e724 	.word	0x2003e724
   b993c:	000b98c1 	.word	0x000b98c1

000b9940 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b9940:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b9942:	4c08      	ldr	r4, [pc, #32]	; (b9964 <_Z21__fetch_global_EEPROMv+0x24>)
   b9944:	7823      	ldrb	r3, [r4, #0]
   b9946:	f3bf 8f5b 	dmb	ish
   b994a:	07db      	lsls	r3, r3, #31
   b994c:	d408      	bmi.n	b9960 <_Z21__fetch_global_EEPROMv+0x20>
   b994e:	4620      	mov	r0, r4
   b9950:	f7fa fbb2 	bl	b40b8 <__cxa_guard_acquire>
   b9954:	b120      	cbz	r0, b9960 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b9956:	f7fe fd71 	bl	b843c <HAL_EEPROM_Init>
   b995a:	4620      	mov	r0, r4
   b995c:	f7fa fbb1 	bl	b40c2 <__cxa_guard_release>
	return eeprom;
}
   b9960:	4801      	ldr	r0, [pc, #4]	; (b9968 <_Z21__fetch_global_EEPROMv+0x28>)
   b9962:	bd10      	pop	{r4, pc}
   b9964:	2003e73c 	.word	0x2003e73c
   b9968:	2003e740 	.word	0x2003e740

000b996c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b996c:	4770      	bx	lr
	...

000b9970 <_Z17acquireWireBufferv>:
{
   b9970:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9972:	2520      	movs	r5, #32
   b9974:	2314      	movs	r3, #20
{
   b9976:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9978:	6003      	str	r3, [r0, #0]
   b997a:	6085      	str	r5, [r0, #8]
   b997c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b997e:	4906      	ldr	r1, [pc, #24]	; (b9998 <_Z17acquireWireBufferv+0x28>)
   b9980:	4628      	mov	r0, r5
   b9982:	f000 f82f 	bl	b99e4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9986:	4904      	ldr	r1, [pc, #16]	; (b9998 <_Z17acquireWireBufferv+0x28>)
	};
   b9988:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b998a:	4628      	mov	r0, r5
   b998c:	f000 f82a 	bl	b99e4 <_ZnajRKSt9nothrow_t>
	};
   b9990:	60e0      	str	r0, [r4, #12]
}
   b9992:	4620      	mov	r0, r4
   b9994:	bd38      	pop	{r3, r4, r5, pc}
   b9996:	bf00      	nop
   b9998:	000be340 	.word	0x000be340

000b999c <_Z19__fetch_global_Wirev>:
{
   b999c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b999e:	4d0e      	ldr	r5, [pc, #56]	; (b99d8 <_Z19__fetch_global_Wirev+0x3c>)
   b99a0:	7829      	ldrb	r1, [r5, #0]
   b99a2:	f3bf 8f5b 	dmb	ish
   b99a6:	f011 0401 	ands.w	r4, r1, #1
{
   b99aa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b99ac:	d111      	bne.n	b99d2 <_Z19__fetch_global_Wirev+0x36>
   b99ae:	4628      	mov	r0, r5
   b99b0:	f7fa fb82 	bl	b40b8 <__cxa_guard_acquire>
   b99b4:	b168      	cbz	r0, b99d2 <_Z19__fetch_global_Wirev+0x36>
   b99b6:	a801      	add	r0, sp, #4
   b99b8:	f7ff ffda 	bl	b9970 <_Z17acquireWireBufferv>
   b99bc:	aa01      	add	r2, sp, #4
   b99be:	4621      	mov	r1, r4
   b99c0:	4806      	ldr	r0, [pc, #24]	; (b99dc <_Z19__fetch_global_Wirev+0x40>)
   b99c2:	f7ff fde5 	bl	b9590 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b99c6:	4628      	mov	r0, r5
   b99c8:	f7fa fb7b 	bl	b40c2 <__cxa_guard_release>
   b99cc:	4804      	ldr	r0, [pc, #16]	; (b99e0 <_Z19__fetch_global_Wirev+0x44>)
   b99ce:	f003 fadb 	bl	bcf88 <atexit>
	return wire;
}
   b99d2:	4802      	ldr	r0, [pc, #8]	; (b99dc <_Z19__fetch_global_Wirev+0x40>)
   b99d4:	b007      	add	sp, #28
   b99d6:	bd30      	pop	{r4, r5, pc}
   b99d8:	2003e744 	.word	0x2003e744
   b99dc:	2003e748 	.word	0x2003e748
   b99e0:	000b996d 	.word	0x000b996d

000b99e4 <_ZnajRKSt9nothrow_t>:
   b99e4:	f7fa bb59 	b.w	b409a <_Znaj>

000b99e8 <cosf>:
   b99e8:	ee10 3a10 	vmov	r3, s0
   b99ec:	4a18      	ldr	r2, [pc, #96]	; (b9a50 <cosf+0x68>)
   b99ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   b99f2:	4293      	cmp	r3, r2
   b99f4:	dd1b      	ble.n	b9a2e <cosf+0x46>
   b99f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   b99fa:	db02      	blt.n	b9a02 <cosf+0x1a>
   b99fc:	ee30 0a40 	vsub.f32	s0, s0, s0
   b9a00:	4770      	bx	lr
   b9a02:	b500      	push	{lr}
   b9a04:	b083      	sub	sp, #12
   b9a06:	4668      	mov	r0, sp
   b9a08:	f001 f91c 	bl	bac44 <__ieee754_rem_pio2f>
   b9a0c:	f000 0003 	and.w	r0, r0, #3
   b9a10:	2801      	cmp	r0, #1
   b9a12:	eddd 0a01 	vldr	s1, [sp, #4]
   b9a16:	ed9d 0a00 	vldr	s0, [sp]
   b9a1a:	d00c      	beq.n	b9a36 <cosf+0x4e>
   b9a1c:	2802      	cmp	r0, #2
   b9a1e:	d012      	beq.n	b9a46 <cosf+0x5e>
   b9a20:	b170      	cbz	r0, b9a40 <cosf+0x58>
   b9a22:	2001      	movs	r0, #1
   b9a24:	f001 fdfc 	bl	bb620 <__kernel_sinf>
   b9a28:	b003      	add	sp, #12
   b9a2a:	f85d fb04 	ldr.w	pc, [sp], #4
   b9a2e:	eddf 0a09 	vldr	s1, [pc, #36]	; b9a54 <cosf+0x6c>
   b9a32:	f001 ba39 	b.w	baea8 <__kernel_cosf>
   b9a36:	f001 fdf3 	bl	bb620 <__kernel_sinf>
   b9a3a:	eeb1 0a40 	vneg.f32	s0, s0
   b9a3e:	e7f3      	b.n	b9a28 <cosf+0x40>
   b9a40:	f001 fa32 	bl	baea8 <__kernel_cosf>
   b9a44:	e7f0      	b.n	b9a28 <cosf+0x40>
   b9a46:	f001 fa2f 	bl	baea8 <__kernel_cosf>
   b9a4a:	eeb1 0a40 	vneg.f32	s0, s0
   b9a4e:	e7eb      	b.n	b9a28 <cosf+0x40>
   b9a50:	3f490fd8 	.word	0x3f490fd8
   b9a54:	00000000 	.word	0x00000000

000b9a58 <sinf>:
   b9a58:	ee10 3a10 	vmov	r3, s0
   b9a5c:	4a19      	ldr	r2, [pc, #100]	; (b9ac4 <sinf+0x6c>)
   b9a5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   b9a62:	4293      	cmp	r3, r2
   b9a64:	dd1c      	ble.n	b9aa0 <sinf+0x48>
   b9a66:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   b9a6a:	db02      	blt.n	b9a72 <sinf+0x1a>
   b9a6c:	ee30 0a40 	vsub.f32	s0, s0, s0
   b9a70:	4770      	bx	lr
   b9a72:	b500      	push	{lr}
   b9a74:	b083      	sub	sp, #12
   b9a76:	4668      	mov	r0, sp
   b9a78:	f001 f8e4 	bl	bac44 <__ieee754_rem_pio2f>
   b9a7c:	f000 0003 	and.w	r0, r0, #3
   b9a80:	2801      	cmp	r0, #1
   b9a82:	eddd 0a01 	vldr	s1, [sp, #4]
   b9a86:	ed9d 0a00 	vldr	s0, [sp]
   b9a8a:	d00e      	beq.n	b9aaa <sinf+0x52>
   b9a8c:	2802      	cmp	r0, #2
   b9a8e:	d013      	beq.n	b9ab8 <sinf+0x60>
   b9a90:	b170      	cbz	r0, b9ab0 <sinf+0x58>
   b9a92:	f001 fa09 	bl	baea8 <__kernel_cosf>
   b9a96:	eeb1 0a40 	vneg.f32	s0, s0
   b9a9a:	b003      	add	sp, #12
   b9a9c:	f85d fb04 	ldr.w	pc, [sp], #4
   b9aa0:	eddf 0a09 	vldr	s1, [pc, #36]	; b9ac8 <sinf+0x70>
   b9aa4:	2000      	movs	r0, #0
   b9aa6:	f001 bdbb 	b.w	bb620 <__kernel_sinf>
   b9aaa:	f001 f9fd 	bl	baea8 <__kernel_cosf>
   b9aae:	e7f4      	b.n	b9a9a <sinf+0x42>
   b9ab0:	2001      	movs	r0, #1
   b9ab2:	f001 fdb5 	bl	bb620 <__kernel_sinf>
   b9ab6:	e7f0      	b.n	b9a9a <sinf+0x42>
   b9ab8:	2001      	movs	r0, #1
   b9aba:	f001 fdb1 	bl	bb620 <__kernel_sinf>
   b9abe:	eeb1 0a40 	vneg.f32	s0, s0
   b9ac2:	e7ea      	b.n	b9a9a <sinf+0x42>
   b9ac4:	3f490fd8 	.word	0x3f490fd8
   b9ac8:	00000000 	.word	0x00000000

000b9acc <atan2>:
   b9acc:	f000 b8d4 	b.w	b9c78 <__ieee754_atan2>

000b9ad0 <pow>:
   b9ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9ad2:	ed2d 8b02 	vpush	{d8}
   b9ad6:	ec57 6b10 	vmov	r6, r7, d0
   b9ada:	ec55 4b11 	vmov	r4, r5, d1
   b9ade:	f000 f9a3 	bl	b9e28 <__ieee754_pow>
   b9ae2:	4b63      	ldr	r3, [pc, #396]	; (b9c70 <pow+0x1a0>)
   b9ae4:	eeb0 8a40 	vmov.f32	s16, s0
   b9ae8:	eef0 8a60 	vmov.f32	s17, s1
   b9aec:	f993 3000 	ldrsb.w	r3, [r3]
   b9af0:	3301      	adds	r3, #1
   b9af2:	d02a      	beq.n	b9b4a <pow+0x7a>
   b9af4:	4622      	mov	r2, r4
   b9af6:	462b      	mov	r3, r5
   b9af8:	4620      	mov	r0, r4
   b9afa:	4629      	mov	r1, r5
   b9afc:	f002 feb6 	bl	bc86c <__aeabi_dcmpun>
   b9b00:	bb18      	cbnz	r0, b9b4a <pow+0x7a>
   b9b02:	4632      	mov	r2, r6
   b9b04:	463b      	mov	r3, r7
   b9b06:	4630      	mov	r0, r6
   b9b08:	4639      	mov	r1, r7
   b9b0a:	f002 feaf 	bl	bc86c <__aeabi_dcmpun>
   b9b0e:	2800      	cmp	r0, #0
   b9b10:	d144      	bne.n	b9b9c <pow+0xcc>
   b9b12:	2200      	movs	r2, #0
   b9b14:	2300      	movs	r3, #0
   b9b16:	4630      	mov	r0, r6
   b9b18:	4639      	mov	r1, r7
   b9b1a:	f002 fe75 	bl	bc808 <__aeabi_dcmpeq>
   b9b1e:	b1d8      	cbz	r0, b9b58 <pow+0x88>
   b9b20:	2200      	movs	r2, #0
   b9b22:	2300      	movs	r3, #0
   b9b24:	4620      	mov	r0, r4
   b9b26:	4629      	mov	r1, r5
   b9b28:	f002 fe6e 	bl	bc808 <__aeabi_dcmpeq>
   b9b2c:	2800      	cmp	r0, #0
   b9b2e:	d13d      	bne.n	b9bac <pow+0xdc>
   b9b30:	ec45 4b10 	vmov	d0, r4, r5
   b9b34:	f001 ff66 	bl	bba04 <finite>
   b9b38:	b138      	cbz	r0, b9b4a <pow+0x7a>
   b9b3a:	4620      	mov	r0, r4
   b9b3c:	4629      	mov	r1, r5
   b9b3e:	2200      	movs	r2, #0
   b9b40:	2300      	movs	r3, #0
   b9b42:	f002 fe6b 	bl	bc81c <__aeabi_dcmplt>
   b9b46:	2800      	cmp	r0, #0
   b9b48:	d15c      	bne.n	b9c04 <pow+0x134>
   b9b4a:	eeb0 0a48 	vmov.f32	s0, s16
   b9b4e:	eef0 0a68 	vmov.f32	s1, s17
   b9b52:	ecbd 8b02 	vpop	{d8}
   b9b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9b58:	eeb0 0a48 	vmov.f32	s0, s16
   b9b5c:	eef0 0a68 	vmov.f32	s1, s17
   b9b60:	f001 ff50 	bl	bba04 <finite>
   b9b64:	b358      	cbz	r0, b9bbe <pow+0xee>
   b9b66:	ec51 0b18 	vmov	r0, r1, d8
   b9b6a:	2200      	movs	r2, #0
   b9b6c:	2300      	movs	r3, #0
   b9b6e:	f002 fe4b 	bl	bc808 <__aeabi_dcmpeq>
   b9b72:	2800      	cmp	r0, #0
   b9b74:	d0e9      	beq.n	b9b4a <pow+0x7a>
   b9b76:	ec47 6b10 	vmov	d0, r6, r7
   b9b7a:	f001 ff43 	bl	bba04 <finite>
   b9b7e:	2800      	cmp	r0, #0
   b9b80:	d0e3      	beq.n	b9b4a <pow+0x7a>
   b9b82:	ec45 4b10 	vmov	d0, r4, r5
   b9b86:	f001 ff3d 	bl	bba04 <finite>
   b9b8a:	2800      	cmp	r0, #0
   b9b8c:	d0dd      	beq.n	b9b4a <pow+0x7a>
   b9b8e:	f7fe fea1 	bl	b88d4 <__errno>
   b9b92:	2322      	movs	r3, #34	; 0x22
   b9b94:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b9c50 <pow+0x180>
   b9b98:	6003      	str	r3, [r0, #0]
   b9b9a:	e7d6      	b.n	b9b4a <pow+0x7a>
   b9b9c:	4620      	mov	r0, r4
   b9b9e:	4629      	mov	r1, r5
   b9ba0:	2200      	movs	r2, #0
   b9ba2:	2300      	movs	r3, #0
   b9ba4:	f002 fe30 	bl	bc808 <__aeabi_dcmpeq>
   b9ba8:	2800      	cmp	r0, #0
   b9baa:	d0ce      	beq.n	b9b4a <pow+0x7a>
   b9bac:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b9c58 <pow+0x188>
   b9bb0:	eeb0 0a48 	vmov.f32	s0, s16
   b9bb4:	eef0 0a68 	vmov.f32	s1, s17
   b9bb8:	ecbd 8b02 	vpop	{d8}
   b9bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9bbe:	ec47 6b10 	vmov	d0, r6, r7
   b9bc2:	f001 ff1f 	bl	bba04 <finite>
   b9bc6:	2800      	cmp	r0, #0
   b9bc8:	d0cd      	beq.n	b9b66 <pow+0x96>
   b9bca:	ec45 4b10 	vmov	d0, r4, r5
   b9bce:	f001 ff19 	bl	bba04 <finite>
   b9bd2:	2800      	cmp	r0, #0
   b9bd4:	d0c7      	beq.n	b9b66 <pow+0x96>
   b9bd6:	ec53 2b18 	vmov	r2, r3, d8
   b9bda:	ee18 0a10 	vmov	r0, s16
   b9bde:	4619      	mov	r1, r3
   b9be0:	f002 fe44 	bl	bc86c <__aeabi_dcmpun>
   b9be4:	bb20      	cbnz	r0, b9c30 <pow+0x160>
   b9be6:	f7fe fe75 	bl	b88d4 <__errno>
   b9bea:	4603      	mov	r3, r0
   b9bec:	2222      	movs	r2, #34	; 0x22
   b9bee:	601a      	str	r2, [r3, #0]
   b9bf0:	4630      	mov	r0, r6
   b9bf2:	4639      	mov	r1, r7
   b9bf4:	2200      	movs	r2, #0
   b9bf6:	2300      	movs	r3, #0
   b9bf8:	f002 fe10 	bl	bc81c <__aeabi_dcmplt>
   b9bfc:	b948      	cbnz	r0, b9c12 <pow+0x142>
   b9bfe:	ed9f 8b18 	vldr	d8, [pc, #96]	; b9c60 <pow+0x190>
   b9c02:	e7a2      	b.n	b9b4a <pow+0x7a>
   b9c04:	f7fe fe66 	bl	b88d4 <__errno>
   b9c08:	2321      	movs	r3, #33	; 0x21
   b9c0a:	ed9f 8b17 	vldr	d8, [pc, #92]	; b9c68 <pow+0x198>
   b9c0e:	6003      	str	r3, [r0, #0]
   b9c10:	e79b      	b.n	b9b4a <pow+0x7a>
   b9c12:	ec45 4b10 	vmov	d0, r4, r5
   b9c16:	f001 ff0b 	bl	bba30 <rint>
   b9c1a:	4622      	mov	r2, r4
   b9c1c:	ec51 0b10 	vmov	r0, r1, d0
   b9c20:	462b      	mov	r3, r5
   b9c22:	f002 fdf1 	bl	bc808 <__aeabi_dcmpeq>
   b9c26:	2800      	cmp	r0, #0
   b9c28:	d1e9      	bne.n	b9bfe <pow+0x12e>
   b9c2a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b9c68 <pow+0x198>
   b9c2e:	e78c      	b.n	b9b4a <pow+0x7a>
   b9c30:	f7fe fe50 	bl	b88d4 <__errno>
   b9c34:	2200      	movs	r2, #0
   b9c36:	2300      	movs	r3, #0
   b9c38:	2121      	movs	r1, #33	; 0x21
   b9c3a:	6001      	str	r1, [r0, #0]
   b9c3c:	4610      	mov	r0, r2
   b9c3e:	4619      	mov	r1, r3
   b9c40:	f002 fca4 	bl	bc58c <__aeabi_ddiv>
   b9c44:	ec41 0b18 	vmov	d8, r0, r1
   b9c48:	e77f      	b.n	b9b4a <pow+0x7a>
   b9c4a:	bf00      	nop
   b9c4c:	f3af 8000 	nop.w
	...
   b9c5c:	3ff00000 	.word	0x3ff00000
   b9c60:	00000000 	.word	0x00000000
   b9c64:	7ff00000 	.word	0x7ff00000
   b9c68:	00000000 	.word	0x00000000
   b9c6c:	fff00000 	.word	0xfff00000
   b9c70:	2003e444 	.word	0x2003e444

000b9c74 <atan2f>:
   b9c74:	f000 bf3e 	b.w	baaf4 <__ieee754_atan2f>

000b9c78 <__ieee754_atan2>:
   b9c78:	ec51 0b11 	vmov	r0, r1, d1
   b9c7c:	4243      	negs	r3, r0
   b9c7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9c82:	4303      	orrs	r3, r0
   b9c84:	4e64      	ldr	r6, [pc, #400]	; (b9e18 <__ieee754_atan2+0x1a0>)
   b9c86:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
   b9c8a:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
   b9c8e:	42b3      	cmp	r3, r6
   b9c90:	ec55 4b10 	vmov	r4, r5, d0
   b9c94:	d83e      	bhi.n	b9d14 <__ieee754_atan2+0x9c>
   b9c96:	4263      	negs	r3, r4
   b9c98:	4323      	orrs	r3, r4
   b9c9a:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   b9c9e:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   b9ca2:	42b3      	cmp	r3, r6
   b9ca4:	46a9      	mov	r9, r5
   b9ca6:	d835      	bhi.n	b9d14 <__ieee754_atan2+0x9c>
   b9ca8:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   b9cac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b9cb0:	4303      	orrs	r3, r0
   b9cb2:	d03e      	beq.n	b9d32 <__ieee754_atan2+0xba>
   b9cb4:	178f      	asrs	r7, r1, #30
   b9cb6:	f007 0702 	and.w	r7, r7, #2
   b9cba:	ea5a 0304 	orrs.w	r3, sl, r4
   b9cbe:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
   b9cc2:	d02f      	beq.n	b9d24 <__ieee754_atan2+0xac>
   b9cc4:	ea5e 0300 	orrs.w	r3, lr, r0
   b9cc8:	d037      	beq.n	b9d3a <__ieee754_atan2+0xc2>
   b9cca:	45b6      	cmp	lr, r6
   b9ccc:	d044      	beq.n	b9d58 <__ieee754_atan2+0xe0>
   b9cce:	45b2      	cmp	sl, r6
   b9cd0:	d033      	beq.n	b9d3a <__ieee754_atan2+0xc2>
   b9cd2:	ebaa 0e0e 	sub.w	lr, sl, lr
   b9cd6:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
   b9cda:	ea4f 532e 	mov.w	r3, lr, asr #20
   b9cde:	da38      	bge.n	b9d52 <__ieee754_atan2+0xda>
   b9ce0:	2900      	cmp	r1, #0
   b9ce2:	da45      	bge.n	b9d70 <__ieee754_atan2+0xf8>
   b9ce4:	333c      	adds	r3, #60	; 0x3c
   b9ce6:	da43      	bge.n	b9d70 <__ieee754_atan2+0xf8>
   b9ce8:	ed9f 0b3d 	vldr	d0, [pc, #244]	; b9de0 <__ieee754_atan2+0x168>
   b9cec:	2f01      	cmp	r7, #1
   b9cee:	d05d      	beq.n	b9dac <__ieee754_atan2+0x134>
   b9cf0:	2f02      	cmp	r7, #2
   b9cf2:	d04a      	beq.n	b9d8a <__ieee754_atan2+0x112>
   b9cf4:	b1a7      	cbz	r7, b9d20 <__ieee754_atan2+0xa8>
   b9cf6:	ec51 0b10 	vmov	r0, r1, d0
   b9cfa:	a33b      	add	r3, pc, #236	; (adr r3, b9de8 <__ieee754_atan2+0x170>)
   b9cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9d00:	f002 f962 	bl	bbfc8 <__aeabi_dsub>
   b9d04:	a33a      	add	r3, pc, #232	; (adr r3, b9df0 <__ieee754_atan2+0x178>)
   b9d06:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9d0a:	f002 f95d 	bl	bbfc8 <__aeabi_dsub>
   b9d0e:	ec41 0b10 	vmov	d0, r0, r1
   b9d12:	e005      	b.n	b9d20 <__ieee754_atan2+0xa8>
   b9d14:	4622      	mov	r2, r4
   b9d16:	462b      	mov	r3, r5
   b9d18:	f002 f958 	bl	bbfcc <__adddf3>
   b9d1c:	ec41 0b10 	vmov	d0, r0, r1
   b9d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9d24:	2f02      	cmp	r7, #2
   b9d26:	d00e      	beq.n	b9d46 <__ieee754_atan2+0xce>
   b9d28:	2f03      	cmp	r7, #3
   b9d2a:	d1f9      	bne.n	b9d20 <__ieee754_atan2+0xa8>
   b9d2c:	ed9f 0b32 	vldr	d0, [pc, #200]	; b9df8 <__ieee754_atan2+0x180>
   b9d30:	e7f6      	b.n	b9d20 <__ieee754_atan2+0xa8>
   b9d32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9d36:	f001 bcbb 	b.w	bb6b0 <atan>
   b9d3a:	f1b9 0f00 	cmp.w	r9, #0
   b9d3e:	db05      	blt.n	b9d4c <__ieee754_atan2+0xd4>
   b9d40:	ed9f 0b2f 	vldr	d0, [pc, #188]	; b9e00 <__ieee754_atan2+0x188>
   b9d44:	e7ec      	b.n	b9d20 <__ieee754_atan2+0xa8>
   b9d46:	ed9f 0b2a 	vldr	d0, [pc, #168]	; b9df0 <__ieee754_atan2+0x178>
   b9d4a:	e7e9      	b.n	b9d20 <__ieee754_atan2+0xa8>
   b9d4c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b9e08 <__ieee754_atan2+0x190>
   b9d50:	e7e6      	b.n	b9d20 <__ieee754_atan2+0xa8>
   b9d52:	ed9f 0b2b 	vldr	d0, [pc, #172]	; b9e00 <__ieee754_atan2+0x188>
   b9d56:	e7c9      	b.n	b9cec <__ieee754_atan2+0x74>
   b9d58:	45f2      	cmp	sl, lr
   b9d5a:	f107 37ff 	add.w	r7, r7, #4294967295
   b9d5e:	d02e      	beq.n	b9dbe <__ieee754_atan2+0x146>
   b9d60:	2f02      	cmp	r7, #2
   b9d62:	d834      	bhi.n	b9dce <__ieee754_atan2+0x156>
   b9d64:	4b2d      	ldr	r3, [pc, #180]	; (b9e1c <__ieee754_atan2+0x1a4>)
   b9d66:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   b9d6a:	ed97 0b00 	vldr	d0, [r7]
   b9d6e:	e7d7      	b.n	b9d20 <__ieee754_atan2+0xa8>
   b9d70:	4602      	mov	r2, r0
   b9d72:	460b      	mov	r3, r1
   b9d74:	4620      	mov	r0, r4
   b9d76:	4629      	mov	r1, r5
   b9d78:	f002 fc08 	bl	bc58c <__aeabi_ddiv>
   b9d7c:	ec41 0b10 	vmov	d0, r0, r1
   b9d80:	f001 fe36 	bl	bb9f0 <fabs>
   b9d84:	f001 fc94 	bl	bb6b0 <atan>
   b9d88:	e7b0      	b.n	b9cec <__ieee754_atan2+0x74>
   b9d8a:	a317      	add	r3, pc, #92	; (adr r3, b9de8 <__ieee754_atan2+0x170>)
   b9d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9d90:	ec51 0b10 	vmov	r0, r1, d0
   b9d94:	f002 f918 	bl	bbfc8 <__aeabi_dsub>
   b9d98:	4602      	mov	r2, r0
   b9d9a:	460b      	mov	r3, r1
   b9d9c:	a114      	add	r1, pc, #80	; (adr r1, b9df0 <__ieee754_atan2+0x178>)
   b9d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9da2:	f002 f911 	bl	bbfc8 <__aeabi_dsub>
   b9da6:	ec41 0b10 	vmov	d0, r0, r1
   b9daa:	e7b9      	b.n	b9d20 <__ieee754_atan2+0xa8>
   b9dac:	ee10 1a90 	vmov	r1, s1
   b9db0:	ec53 2b10 	vmov	r2, r3, d0
   b9db4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9db8:	ec43 2b10 	vmov	d0, r2, r3
   b9dbc:	e7b0      	b.n	b9d20 <__ieee754_atan2+0xa8>
   b9dbe:	2f02      	cmp	r7, #2
   b9dc0:	d808      	bhi.n	b9dd4 <__ieee754_atan2+0x15c>
   b9dc2:	4b17      	ldr	r3, [pc, #92]	; (b9e20 <__ieee754_atan2+0x1a8>)
   b9dc4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   b9dc8:	ed97 0b00 	vldr	d0, [r7]
   b9dcc:	e7a8      	b.n	b9d20 <__ieee754_atan2+0xa8>
   b9dce:	ed9f 0b04 	vldr	d0, [pc, #16]	; b9de0 <__ieee754_atan2+0x168>
   b9dd2:	e7a5      	b.n	b9d20 <__ieee754_atan2+0xa8>
   b9dd4:	ed9f 0b0e 	vldr	d0, [pc, #56]	; b9e10 <__ieee754_atan2+0x198>
   b9dd8:	e7a2      	b.n	b9d20 <__ieee754_atan2+0xa8>
   b9dda:	bf00      	nop
   b9ddc:	f3af 8000 	nop.w
	...
   b9de8:	33145c07 	.word	0x33145c07
   b9dec:	3ca1a626 	.word	0x3ca1a626
   b9df0:	54442d18 	.word	0x54442d18
   b9df4:	400921fb 	.word	0x400921fb
   b9df8:	54442d18 	.word	0x54442d18
   b9dfc:	c00921fb 	.word	0xc00921fb
   b9e00:	54442d18 	.word	0x54442d18
   b9e04:	3ff921fb 	.word	0x3ff921fb
   b9e08:	54442d18 	.word	0x54442d18
   b9e0c:	bff921fb 	.word	0xbff921fb
   b9e10:	54442d18 	.word	0x54442d18
   b9e14:	3fe921fb 	.word	0x3fe921fb
   b9e18:	7ff00000 	.word	0x7ff00000
   b9e1c:	000be360 	.word	0x000be360
   b9e20:	000be348 	.word	0x000be348
   b9e24:	00000000 	.word	0x00000000

000b9e28 <__ieee754_pow>:
   b9e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9e2c:	ec57 6b11 	vmov	r6, r7, d1
   b9e30:	ed2d 8b0c 	vpush	{d8-d13}
   b9e34:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b9e38:	ea5a 0206 	orrs.w	r2, sl, r6
   b9e3c:	b087      	sub	sp, #28
   b9e3e:	d03d      	beq.n	b9ebc <__ieee754_pow+0x94>
   b9e40:	ec55 4b10 	vmov	r4, r5, d0
   b9e44:	4972      	ldr	r1, [pc, #456]	; (ba010 <__ieee754_pow+0x1e8>)
   b9e46:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b9e4a:	4588      	cmp	r8, r1
   b9e4c:	ee10 2a10 	vmov	r2, s0
   b9e50:	46a9      	mov	r9, r5
   b9e52:	dc2c      	bgt.n	b9eae <__ieee754_pow+0x86>
   b9e54:	ee11 3a10 	vmov	r3, s2
   b9e58:	46bb      	mov	fp, r7
   b9e5a:	d036      	beq.n	b9eca <__ieee754_pow+0xa2>
   b9e5c:	458a      	cmp	sl, r1
   b9e5e:	dc26      	bgt.n	b9eae <__ieee754_pow+0x86>
   b9e60:	496b      	ldr	r1, [pc, #428]	; (ba010 <__ieee754_pow+0x1e8>)
   b9e62:	458a      	cmp	sl, r1
   b9e64:	d021      	beq.n	b9eaa <__ieee754_pow+0x82>
   b9e66:	f1b9 0f00 	cmp.w	r9, #0
   b9e6a:	db39      	blt.n	b9ee0 <__ieee754_pow+0xb8>
   b9e6c:	2100      	movs	r1, #0
   b9e6e:	9100      	str	r1, [sp, #0]
   b9e70:	2b00      	cmp	r3, #0
   b9e72:	d151      	bne.n	b9f18 <__ieee754_pow+0xf0>
   b9e74:	4b66      	ldr	r3, [pc, #408]	; (ba010 <__ieee754_pow+0x1e8>)
   b9e76:	459a      	cmp	sl, r3
   b9e78:	f000 80a2 	beq.w	b9fc0 <__ieee754_pow+0x198>
   b9e7c:	4b65      	ldr	r3, [pc, #404]	; (ba014 <__ieee754_pow+0x1ec>)
   b9e7e:	459a      	cmp	sl, r3
   b9e80:	f000 80b0 	beq.w	b9fe4 <__ieee754_pow+0x1bc>
   b9e84:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b9e88:	f000 84c0 	beq.w	ba80c <__ieee754_pow+0x9e4>
   b9e8c:	4b62      	ldr	r3, [pc, #392]	; (ba018 <__ieee754_pow+0x1f0>)
   b9e8e:	459b      	cmp	fp, r3
   b9e90:	d142      	bne.n	b9f18 <__ieee754_pow+0xf0>
   b9e92:	f1b9 0f00 	cmp.w	r9, #0
   b9e96:	db3f      	blt.n	b9f18 <__ieee754_pow+0xf0>
   b9e98:	ec45 4b10 	vmov	d0, r4, r5
   b9e9c:	b007      	add	sp, #28
   b9e9e:	ecbd 8b0c 	vpop	{d8-d13}
   b9ea2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9ea6:	f000 bd59 	b.w	ba95c <__ieee754_sqrt>
   b9eaa:	2b00      	cmp	r3, #0
   b9eac:	d0db      	beq.n	b9e66 <__ieee754_pow+0x3e>
   b9eae:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b9eb2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b9eb6:	ea58 0302 	orrs.w	r3, r8, r2
   b9eba:	d109      	bne.n	b9ed0 <__ieee754_pow+0xa8>
   b9ebc:	ed9f 0b50 	vldr	d0, [pc, #320]	; ba000 <__ieee754_pow+0x1d8>
   b9ec0:	b007      	add	sp, #28
   b9ec2:	ecbd 8b0c 	vpop	{d8-d13}
   b9ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9eca:	b90c      	cbnz	r4, b9ed0 <__ieee754_pow+0xa8>
   b9ecc:	45c2      	cmp	sl, r8
   b9ece:	ddc7      	ble.n	b9e60 <__ieee754_pow+0x38>
   b9ed0:	4852      	ldr	r0, [pc, #328]	; (ba01c <__ieee754_pow+0x1f4>)
   b9ed2:	b007      	add	sp, #28
   b9ed4:	ecbd 8b0c 	vpop	{d8-d13}
   b9ed8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9edc:	f001 bda0 	b.w	bba20 <nan>
   b9ee0:	494f      	ldr	r1, [pc, #316]	; (ba020 <__ieee754_pow+0x1f8>)
   b9ee2:	458a      	cmp	sl, r1
   b9ee4:	f300 8085 	bgt.w	b9ff2 <__ieee754_pow+0x1ca>
   b9ee8:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b9eec:	458a      	cmp	sl, r1
   b9eee:	dd0f      	ble.n	b9f10 <__ieee754_pow+0xe8>
   b9ef0:	ea4f 512a 	mov.w	r1, sl, asr #20
   b9ef4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b9ef8:	2914      	cmp	r1, #20
   b9efa:	f340 849b 	ble.w	ba834 <__ieee754_pow+0xa0c>
   b9efe:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b9f02:	fa23 f001 	lsr.w	r0, r3, r1
   b9f06:	fa00 f101 	lsl.w	r1, r0, r1
   b9f0a:	4299      	cmp	r1, r3
   b9f0c:	f000 84ed 	beq.w	ba8ea <__ieee754_pow+0xac2>
   b9f10:	2100      	movs	r1, #0
   b9f12:	9100      	str	r1, [sp, #0]
   b9f14:	2b00      	cmp	r3, #0
   b9f16:	d0b1      	beq.n	b9e7c <__ieee754_pow+0x54>
   b9f18:	ec45 4b10 	vmov	d0, r4, r5
   b9f1c:	9202      	str	r2, [sp, #8]
   b9f1e:	f001 fd67 	bl	bb9f0 <fabs>
   b9f22:	9a02      	ldr	r2, [sp, #8]
   b9f24:	bb5a      	cbnz	r2, b9f7e <__ieee754_pow+0x156>
   b9f26:	f1b8 0f00 	cmp.w	r8, #0
   b9f2a:	d004      	beq.n	b9f36 <__ieee754_pow+0x10e>
   b9f2c:	4b39      	ldr	r3, [pc, #228]	; (ba014 <__ieee754_pow+0x1ec>)
   b9f2e:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b9f32:	429a      	cmp	r2, r3
   b9f34:	d123      	bne.n	b9f7e <__ieee754_pow+0x156>
   b9f36:	f1bb 0f00 	cmp.w	fp, #0
   b9f3a:	da07      	bge.n	b9f4c <__ieee754_pow+0x124>
   b9f3c:	ec53 2b10 	vmov	r2, r3, d0
   b9f40:	4934      	ldr	r1, [pc, #208]	; (ba014 <__ieee754_pow+0x1ec>)
   b9f42:	2000      	movs	r0, #0
   b9f44:	f002 fb22 	bl	bc58c <__aeabi_ddiv>
   b9f48:	ec41 0b10 	vmov	d0, r0, r1
   b9f4c:	f1b9 0f00 	cmp.w	r9, #0
   b9f50:	dab6      	bge.n	b9ec0 <__ieee754_pow+0x98>
   b9f52:	9b00      	ldr	r3, [sp, #0]
   b9f54:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b9f58:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b9f5c:	ea58 0303 	orrs.w	r3, r8, r3
   b9f60:	f040 848d 	bne.w	ba87e <__ieee754_pow+0xa56>
   b9f64:	ec53 2b10 	vmov	r2, r3, d0
   b9f68:	4610      	mov	r0, r2
   b9f6a:	4619      	mov	r1, r3
   b9f6c:	f002 f82c 	bl	bbfc8 <__aeabi_dsub>
   b9f70:	4602      	mov	r2, r0
   b9f72:	460b      	mov	r3, r1
   b9f74:	f002 fb0a 	bl	bc58c <__aeabi_ddiv>
   b9f78:	ec41 0b10 	vmov	d0, r0, r1
   b9f7c:	e7a0      	b.n	b9ec0 <__ieee754_pow+0x98>
   b9f7e:	9a00      	ldr	r2, [sp, #0]
   b9f80:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b9f84:	3b01      	subs	r3, #1
   b9f86:	9304      	str	r3, [sp, #16]
   b9f88:	4313      	orrs	r3, r2
   b9f8a:	d035      	beq.n	b9ff8 <__ieee754_pow+0x1d0>
   b9f8c:	4b25      	ldr	r3, [pc, #148]	; (ba024 <__ieee754_pow+0x1fc>)
   b9f8e:	459a      	cmp	sl, r3
   b9f90:	dd4c      	ble.n	ba02c <__ieee754_pow+0x204>
   b9f92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b9f96:	459a      	cmp	sl, r3
   b9f98:	4b23      	ldr	r3, [pc, #140]	; (ba028 <__ieee754_pow+0x200>)
   b9f9a:	f340 83db 	ble.w	ba754 <__ieee754_pow+0x92c>
   b9f9e:	4598      	cmp	r8, r3
   b9fa0:	f340 8360 	ble.w	ba664 <__ieee754_pow+0x83c>
   b9fa4:	f1bb 0f00 	cmp.w	fp, #0
   b9fa8:	f340 8360 	ble.w	ba66c <__ieee754_pow+0x844>
   b9fac:	a316      	add	r3, pc, #88	; (adr r3, ba008 <__ieee754_pow+0x1e0>)
   b9fae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9fb2:	4610      	mov	r0, r2
   b9fb4:	4619      	mov	r1, r3
   b9fb6:	f002 f9bf 	bl	bc338 <__aeabi_dmul>
   b9fba:	ec41 0b10 	vmov	d0, r0, r1
   b9fbe:	e77f      	b.n	b9ec0 <__ieee754_pow+0x98>
   b9fc0:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b9fc4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b9fc8:	4313      	orrs	r3, r2
   b9fca:	f43f af77 	beq.w	b9ebc <__ieee754_pow+0x94>
   b9fce:	4b16      	ldr	r3, [pc, #88]	; (ba028 <__ieee754_pow+0x200>)
   b9fd0:	4598      	cmp	r8, r3
   b9fd2:	f340 837a 	ble.w	ba6ca <__ieee754_pow+0x8a2>
   b9fd6:	f1bb 0f00 	cmp.w	fp, #0
   b9fda:	f2c0 8347 	blt.w	ba66c <__ieee754_pow+0x844>
   b9fde:	ec47 6b10 	vmov	d0, r6, r7
   b9fe2:	e76d      	b.n	b9ec0 <__ieee754_pow+0x98>
   b9fe4:	f1bb 0f00 	cmp.w	fp, #0
   b9fe8:	f2c0 841a 	blt.w	ba820 <__ieee754_pow+0x9f8>
   b9fec:	ec45 4b10 	vmov	d0, r4, r5
   b9ff0:	e766      	b.n	b9ec0 <__ieee754_pow+0x98>
   b9ff2:	2102      	movs	r1, #2
   b9ff4:	9100      	str	r1, [sp, #0]
   b9ff6:	e73b      	b.n	b9e70 <__ieee754_pow+0x48>
   b9ff8:	4622      	mov	r2, r4
   b9ffa:	462b      	mov	r3, r5
   b9ffc:	e7b4      	b.n	b9f68 <__ieee754_pow+0x140>
   b9ffe:	bf00      	nop
   ba000:	00000000 	.word	0x00000000
   ba004:	3ff00000 	.word	0x3ff00000
   ba008:	8800759c 	.word	0x8800759c
   ba00c:	7e37e43c 	.word	0x7e37e43c
   ba010:	7ff00000 	.word	0x7ff00000
   ba014:	3ff00000 	.word	0x3ff00000
   ba018:	3fe00000 	.word	0x3fe00000
   ba01c:	000be378 	.word	0x000be378
   ba020:	433fffff 	.word	0x433fffff
   ba024:	41e00000 	.word	0x41e00000
   ba028:	3fefffff 	.word	0x3fefffff
   ba02c:	4be4      	ldr	r3, [pc, #912]	; (ba3c0 <__ieee754_pow+0x598>)
   ba02e:	ea09 0303 	and.w	r3, r9, r3
   ba032:	2200      	movs	r2, #0
   ba034:	b953      	cbnz	r3, ba04c <__ieee754_pow+0x224>
   ba036:	ec51 0b10 	vmov	r0, r1, d0
   ba03a:	4be2      	ldr	r3, [pc, #904]	; (ba3c4 <__ieee754_pow+0x59c>)
   ba03c:	f002 f97c 	bl	bc338 <__aeabi_dmul>
   ba040:	ec41 0b10 	vmov	d0, r0, r1
   ba044:	ee10 8a90 	vmov	r8, s1
   ba048:	f06f 0234 	mvn.w	r2, #52	; 0x34
   ba04c:	ea4f 5328 	mov.w	r3, r8, asr #20
   ba050:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   ba054:	189a      	adds	r2, r3, r2
   ba056:	4bdc      	ldr	r3, [pc, #880]	; (ba3c8 <__ieee754_pow+0x5a0>)
   ba058:	9205      	str	r2, [sp, #20]
   ba05a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   ba05e:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   ba062:	4598      	cmp	r8, r3
   ba064:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   ba068:	dd07      	ble.n	ba07a <__ieee754_pow+0x252>
   ba06a:	4bd8      	ldr	r3, [pc, #864]	; (ba3cc <__ieee754_pow+0x5a4>)
   ba06c:	4598      	cmp	r8, r3
   ba06e:	f340 8414 	ble.w	ba89a <__ieee754_pow+0xa72>
   ba072:	3201      	adds	r2, #1
   ba074:	9205      	str	r2, [sp, #20]
   ba076:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   ba07a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; ba360 <__ieee754_pow+0x538>
   ba07e:	ed9f 7bba 	vldr	d7, [pc, #744]	; ba368 <__ieee754_pow+0x540>
   ba082:	ec53 2b16 	vmov	r2, r3, d6
   ba086:	eeb0 ca47 	vmov.f32	s24, s14
   ba08a:	eef0 ca67 	vmov.f32	s25, s15
   ba08e:	2500      	movs	r5, #0
   ba090:	eeb0 da47 	vmov.f32	s26, s14
   ba094:	eef0 da67 	vmov.f32	s27, s15
   ba098:	ec5b ab10 	vmov	sl, fp, d0
   ba09c:	46a3      	mov	fp, r4
   ba09e:	4650      	mov	r0, sl
   ba0a0:	4659      	mov	r1, fp
   ba0a2:	ec43 2b1a 	vmov	d10, r2, r3
   ba0a6:	f001 ff8f 	bl	bbfc8 <__aeabi_dsub>
   ba0aa:	ec53 2b1a 	vmov	r2, r3, d10
   ba0ae:	4680      	mov	r8, r0
   ba0b0:	4689      	mov	r9, r1
   ba0b2:	4650      	mov	r0, sl
   ba0b4:	4659      	mov	r1, fp
   ba0b6:	f001 ff89 	bl	bbfcc <__adddf3>
   ba0ba:	4602      	mov	r2, r0
   ba0bc:	460b      	mov	r3, r1
   ba0be:	2000      	movs	r0, #0
   ba0c0:	49c3      	ldr	r1, [pc, #780]	; (ba3d0 <__ieee754_pow+0x5a8>)
   ba0c2:	f002 fa63 	bl	bc58c <__aeabi_ddiv>
   ba0c6:	ec41 0b1b 	vmov	d11, r0, r1
   ba0ca:	4640      	mov	r0, r8
   ba0cc:	ec53 2b1b 	vmov	r2, r3, d11
   ba0d0:	4649      	mov	r1, r9
   ba0d2:	f002 f931 	bl	bc338 <__aeabi_dmul>
   ba0d6:	ec41 0b18 	vmov	d8, r0, r1
   ba0da:	460a      	mov	r2, r1
   ba0dc:	4601      	mov	r1, r0
   ba0de:	e9cd 1202 	strd	r1, r2, [sp, #8]
   ba0e2:	2100      	movs	r1, #0
   ba0e4:	9102      	str	r1, [sp, #8]
   ba0e6:	1064      	asrs	r4, r4, #1
   ba0e8:	ec4b ab19 	vmov	d9, sl, fp
   ba0ec:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   ba0f0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   ba0f4:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   ba0f8:	2000      	movs	r0, #0
   ba0fa:	1959      	adds	r1, r3, r5
   ba0fc:	4604      	mov	r4, r0
   ba0fe:	460d      	mov	r5, r1
   ba100:	4602      	mov	r2, r0
   ba102:	460b      	mov	r3, r1
   ba104:	4650      	mov	r0, sl
   ba106:	4659      	mov	r1, fp
   ba108:	f002 f916 	bl	bc338 <__aeabi_dmul>
   ba10c:	4602      	mov	r2, r0
   ba10e:	460b      	mov	r3, r1
   ba110:	4640      	mov	r0, r8
   ba112:	4649      	mov	r1, r9
   ba114:	f001 ff58 	bl	bbfc8 <__aeabi_dsub>
   ba118:	ec53 2b1a 	vmov	r2, r3, d10
   ba11c:	4680      	mov	r8, r0
   ba11e:	4689      	mov	r9, r1
   ba120:	4620      	mov	r0, r4
   ba122:	4629      	mov	r1, r5
   ba124:	f001 ff50 	bl	bbfc8 <__aeabi_dsub>
   ba128:	4602      	mov	r2, r0
   ba12a:	460b      	mov	r3, r1
   ba12c:	ec51 0b19 	vmov	r0, r1, d9
   ba130:	f001 ff4a 	bl	bbfc8 <__aeabi_dsub>
   ba134:	4652      	mov	r2, sl
   ba136:	465b      	mov	r3, fp
   ba138:	f002 f8fe 	bl	bc338 <__aeabi_dmul>
   ba13c:	4602      	mov	r2, r0
   ba13e:	460b      	mov	r3, r1
   ba140:	4640      	mov	r0, r8
   ba142:	4649      	mov	r1, r9
   ba144:	f001 ff40 	bl	bbfc8 <__aeabi_dsub>
   ba148:	ec53 2b1b 	vmov	r2, r3, d11
   ba14c:	f002 f8f4 	bl	bc338 <__aeabi_dmul>
   ba150:	ec53 2b18 	vmov	r2, r3, d8
   ba154:	ec41 0b19 	vmov	d9, r0, r1
   ba158:	ec51 0b18 	vmov	r0, r1, d8
   ba15c:	f002 f8ec 	bl	bc338 <__aeabi_dmul>
   ba160:	a383      	add	r3, pc, #524	; (adr r3, ba370 <__ieee754_pow+0x548>)
   ba162:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba166:	4604      	mov	r4, r0
   ba168:	460d      	mov	r5, r1
   ba16a:	f002 f8e5 	bl	bc338 <__aeabi_dmul>
   ba16e:	a382      	add	r3, pc, #520	; (adr r3, ba378 <__ieee754_pow+0x550>)
   ba170:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba174:	f001 ff2a 	bl	bbfcc <__adddf3>
   ba178:	4622      	mov	r2, r4
   ba17a:	462b      	mov	r3, r5
   ba17c:	f002 f8dc 	bl	bc338 <__aeabi_dmul>
   ba180:	a37f      	add	r3, pc, #508	; (adr r3, ba380 <__ieee754_pow+0x558>)
   ba182:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba186:	f001 ff21 	bl	bbfcc <__adddf3>
   ba18a:	4622      	mov	r2, r4
   ba18c:	462b      	mov	r3, r5
   ba18e:	f002 f8d3 	bl	bc338 <__aeabi_dmul>
   ba192:	a37d      	add	r3, pc, #500	; (adr r3, ba388 <__ieee754_pow+0x560>)
   ba194:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba198:	f001 ff18 	bl	bbfcc <__adddf3>
   ba19c:	4622      	mov	r2, r4
   ba19e:	462b      	mov	r3, r5
   ba1a0:	f002 f8ca 	bl	bc338 <__aeabi_dmul>
   ba1a4:	a37a      	add	r3, pc, #488	; (adr r3, ba390 <__ieee754_pow+0x568>)
   ba1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba1aa:	f001 ff0f 	bl	bbfcc <__adddf3>
   ba1ae:	4622      	mov	r2, r4
   ba1b0:	462b      	mov	r3, r5
   ba1b2:	f002 f8c1 	bl	bc338 <__aeabi_dmul>
   ba1b6:	a378      	add	r3, pc, #480	; (adr r3, ba398 <__ieee754_pow+0x570>)
   ba1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba1bc:	f001 ff06 	bl	bbfcc <__adddf3>
   ba1c0:	4622      	mov	r2, r4
   ba1c2:	4680      	mov	r8, r0
   ba1c4:	4689      	mov	r9, r1
   ba1c6:	462b      	mov	r3, r5
   ba1c8:	4620      	mov	r0, r4
   ba1ca:	4629      	mov	r1, r5
   ba1cc:	f002 f8b4 	bl	bc338 <__aeabi_dmul>
   ba1d0:	4602      	mov	r2, r0
   ba1d2:	460b      	mov	r3, r1
   ba1d4:	4640      	mov	r0, r8
   ba1d6:	4649      	mov	r1, r9
   ba1d8:	f002 f8ae 	bl	bc338 <__aeabi_dmul>
   ba1dc:	4652      	mov	r2, sl
   ba1de:	4604      	mov	r4, r0
   ba1e0:	460d      	mov	r5, r1
   ba1e2:	465b      	mov	r3, fp
   ba1e4:	ec51 0b18 	vmov	r0, r1, d8
   ba1e8:	f001 fef0 	bl	bbfcc <__adddf3>
   ba1ec:	ec53 2b19 	vmov	r2, r3, d9
   ba1f0:	f002 f8a2 	bl	bc338 <__aeabi_dmul>
   ba1f4:	4622      	mov	r2, r4
   ba1f6:	462b      	mov	r3, r5
   ba1f8:	f001 fee8 	bl	bbfcc <__adddf3>
   ba1fc:	4652      	mov	r2, sl
   ba1fe:	4680      	mov	r8, r0
   ba200:	4689      	mov	r9, r1
   ba202:	465b      	mov	r3, fp
   ba204:	4650      	mov	r0, sl
   ba206:	4659      	mov	r1, fp
   ba208:	f002 f896 	bl	bc338 <__aeabi_dmul>
   ba20c:	4602      	mov	r2, r0
   ba20e:	460b      	mov	r3, r1
   ba210:	ec43 2b1a 	vmov	d10, r2, r3
   ba214:	4b6f      	ldr	r3, [pc, #444]	; (ba3d4 <__ieee754_pow+0x5ac>)
   ba216:	2200      	movs	r2, #0
   ba218:	f001 fed8 	bl	bbfcc <__adddf3>
   ba21c:	4642      	mov	r2, r8
   ba21e:	464b      	mov	r3, r9
   ba220:	f001 fed4 	bl	bbfcc <__adddf3>
   ba224:	2400      	movs	r4, #0
   ba226:	460d      	mov	r5, r1
   ba228:	4622      	mov	r2, r4
   ba22a:	462b      	mov	r3, r5
   ba22c:	4650      	mov	r0, sl
   ba22e:	4659      	mov	r1, fp
   ba230:	f002 f882 	bl	bc338 <__aeabi_dmul>
   ba234:	4b67      	ldr	r3, [pc, #412]	; (ba3d4 <__ieee754_pow+0x5ac>)
   ba236:	4682      	mov	sl, r0
   ba238:	468b      	mov	fp, r1
   ba23a:	2200      	movs	r2, #0
   ba23c:	4620      	mov	r0, r4
   ba23e:	4629      	mov	r1, r5
   ba240:	f001 fec2 	bl	bbfc8 <__aeabi_dsub>
   ba244:	ec53 2b1a 	vmov	r2, r3, d10
   ba248:	f001 febe 	bl	bbfc8 <__aeabi_dsub>
   ba24c:	4602      	mov	r2, r0
   ba24e:	460b      	mov	r3, r1
   ba250:	4640      	mov	r0, r8
   ba252:	4649      	mov	r1, r9
   ba254:	f001 feb8 	bl	bbfc8 <__aeabi_dsub>
   ba258:	ec53 2b18 	vmov	r2, r3, d8
   ba25c:	f002 f86c 	bl	bc338 <__aeabi_dmul>
   ba260:	4622      	mov	r2, r4
   ba262:	462b      	mov	r3, r5
   ba264:	4604      	mov	r4, r0
   ba266:	460d      	mov	r5, r1
   ba268:	ec51 0b19 	vmov	r0, r1, d9
   ba26c:	f002 f864 	bl	bc338 <__aeabi_dmul>
   ba270:	4602      	mov	r2, r0
   ba272:	460b      	mov	r3, r1
   ba274:	4620      	mov	r0, r4
   ba276:	4629      	mov	r1, r5
   ba278:	f001 fea8 	bl	bbfcc <__adddf3>
   ba27c:	4680      	mov	r8, r0
   ba27e:	4689      	mov	r9, r1
   ba280:	4642      	mov	r2, r8
   ba282:	464b      	mov	r3, r9
   ba284:	4650      	mov	r0, sl
   ba286:	4659      	mov	r1, fp
   ba288:	f001 fea0 	bl	bbfcc <__adddf3>
   ba28c:	a344      	add	r3, pc, #272	; (adr r3, ba3a0 <__ieee754_pow+0x578>)
   ba28e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba292:	2000      	movs	r0, #0
   ba294:	4604      	mov	r4, r0
   ba296:	460d      	mov	r5, r1
   ba298:	f002 f84e 	bl	bc338 <__aeabi_dmul>
   ba29c:	4652      	mov	r2, sl
   ba29e:	ec41 0b19 	vmov	d9, r0, r1
   ba2a2:	465b      	mov	r3, fp
   ba2a4:	4620      	mov	r0, r4
   ba2a6:	4629      	mov	r1, r5
   ba2a8:	f001 fe8e 	bl	bbfc8 <__aeabi_dsub>
   ba2ac:	4602      	mov	r2, r0
   ba2ae:	460b      	mov	r3, r1
   ba2b0:	4640      	mov	r0, r8
   ba2b2:	4649      	mov	r1, r9
   ba2b4:	f001 fe88 	bl	bbfc8 <__aeabi_dsub>
   ba2b8:	a33b      	add	r3, pc, #236	; (adr r3, ba3a8 <__ieee754_pow+0x580>)
   ba2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba2be:	f002 f83b 	bl	bc338 <__aeabi_dmul>
   ba2c2:	4602      	mov	r2, r0
   ba2c4:	460b      	mov	r3, r1
   ba2c6:	4620      	mov	r0, r4
   ba2c8:	4629      	mov	r1, r5
   ba2ca:	4614      	mov	r4, r2
   ba2cc:	461d      	mov	r5, r3
   ba2ce:	a338      	add	r3, pc, #224	; (adr r3, ba3b0 <__ieee754_pow+0x588>)
   ba2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba2d4:	f002 f830 	bl	bc338 <__aeabi_dmul>
   ba2d8:	4602      	mov	r2, r0
   ba2da:	460b      	mov	r3, r1
   ba2dc:	4620      	mov	r0, r4
   ba2de:	4629      	mov	r1, r5
   ba2e0:	f001 fe74 	bl	bbfcc <__adddf3>
   ba2e4:	ec53 2b1d 	vmov	r2, r3, d13
   ba2e8:	f001 fe70 	bl	bbfcc <__adddf3>
   ba2ec:	4680      	mov	r8, r0
   ba2ee:	9805      	ldr	r0, [sp, #20]
   ba2f0:	4689      	mov	r9, r1
   ba2f2:	f001 ffb7 	bl	bc264 <__aeabi_i2d>
   ba2f6:	4642      	mov	r2, r8
   ba2f8:	4682      	mov	sl, r0
   ba2fa:	468b      	mov	fp, r1
   ba2fc:	464b      	mov	r3, r9
   ba2fe:	ec51 0b19 	vmov	r0, r1, d9
   ba302:	f001 fe63 	bl	bbfcc <__adddf3>
   ba306:	ec53 2b1c 	vmov	r2, r3, d12
   ba30a:	f001 fe5f 	bl	bbfcc <__adddf3>
   ba30e:	4652      	mov	r2, sl
   ba310:	465b      	mov	r3, fp
   ba312:	f001 fe5b 	bl	bbfcc <__adddf3>
   ba316:	4652      	mov	r2, sl
   ba318:	465b      	mov	r3, fp
   ba31a:	2000      	movs	r0, #0
   ba31c:	4604      	mov	r4, r0
   ba31e:	460d      	mov	r5, r1
   ba320:	f001 fe52 	bl	bbfc8 <__aeabi_dsub>
   ba324:	ec53 2b1c 	vmov	r2, r3, d12
   ba328:	f001 fe4e 	bl	bbfc8 <__aeabi_dsub>
   ba32c:	ec53 2b19 	vmov	r2, r3, d9
   ba330:	f001 fe4a 	bl	bbfc8 <__aeabi_dsub>
   ba334:	4602      	mov	r2, r0
   ba336:	460b      	mov	r3, r1
   ba338:	4640      	mov	r0, r8
   ba33a:	4649      	mov	r1, r9
   ba33c:	f001 fe44 	bl	bbfc8 <__aeabi_dsub>
   ba340:	9b00      	ldr	r3, [sp, #0]
   ba342:	9a04      	ldr	r2, [sp, #16]
   ba344:	3b01      	subs	r3, #1
   ba346:	4313      	orrs	r3, r2
   ba348:	4682      	mov	sl, r0
   ba34a:	468b      	mov	fp, r1
   ba34c:	f040 81b6 	bne.w	ba6bc <__ieee754_pow+0x894>
   ba350:	ed9f 7b19 	vldr	d7, [pc, #100]	; ba3b8 <__ieee754_pow+0x590>
   ba354:	eeb0 8a47 	vmov.f32	s16, s14
   ba358:	eef0 8a67 	vmov.f32	s17, s15
   ba35c:	e03c      	b.n	ba3d8 <__ieee754_pow+0x5b0>
   ba35e:	bf00      	nop
   ba360:	00000000 	.word	0x00000000
   ba364:	3ff00000 	.word	0x3ff00000
	...
   ba370:	4a454eef 	.word	0x4a454eef
   ba374:	3fca7e28 	.word	0x3fca7e28
   ba378:	93c9db65 	.word	0x93c9db65
   ba37c:	3fcd864a 	.word	0x3fcd864a
   ba380:	a91d4101 	.word	0xa91d4101
   ba384:	3fd17460 	.word	0x3fd17460
   ba388:	518f264d 	.word	0x518f264d
   ba38c:	3fd55555 	.word	0x3fd55555
   ba390:	db6fabff 	.word	0xdb6fabff
   ba394:	3fdb6db6 	.word	0x3fdb6db6
   ba398:	33333303 	.word	0x33333303
   ba39c:	3fe33333 	.word	0x3fe33333
   ba3a0:	e0000000 	.word	0xe0000000
   ba3a4:	3feec709 	.word	0x3feec709
   ba3a8:	dc3a03fd 	.word	0xdc3a03fd
   ba3ac:	3feec709 	.word	0x3feec709
   ba3b0:	145b01f5 	.word	0x145b01f5
   ba3b4:	be3e2fe0 	.word	0xbe3e2fe0
   ba3b8:	00000000 	.word	0x00000000
   ba3bc:	bff00000 	.word	0xbff00000
   ba3c0:	7ff00000 	.word	0x7ff00000
   ba3c4:	43400000 	.word	0x43400000
   ba3c8:	0003988e 	.word	0x0003988e
   ba3cc:	000bb679 	.word	0x000bb679
   ba3d0:	3ff00000 	.word	0x3ff00000
   ba3d4:	40080000 	.word	0x40080000
   ba3d8:	2300      	movs	r3, #0
   ba3da:	e9cd 6700 	strd	r6, r7, [sp]
   ba3de:	9300      	str	r3, [sp, #0]
   ba3e0:	e9dd 8900 	ldrd	r8, r9, [sp]
   ba3e4:	4630      	mov	r0, r6
   ba3e6:	4642      	mov	r2, r8
   ba3e8:	464b      	mov	r3, r9
   ba3ea:	4639      	mov	r1, r7
   ba3ec:	f001 fdec 	bl	bbfc8 <__aeabi_dsub>
   ba3f0:	4622      	mov	r2, r4
   ba3f2:	462b      	mov	r3, r5
   ba3f4:	f001 ffa0 	bl	bc338 <__aeabi_dmul>
   ba3f8:	4632      	mov	r2, r6
   ba3fa:	463b      	mov	r3, r7
   ba3fc:	4606      	mov	r6, r0
   ba3fe:	460f      	mov	r7, r1
   ba400:	4650      	mov	r0, sl
   ba402:	4659      	mov	r1, fp
   ba404:	f001 ff98 	bl	bc338 <__aeabi_dmul>
   ba408:	4602      	mov	r2, r0
   ba40a:	460b      	mov	r3, r1
   ba40c:	4630      	mov	r0, r6
   ba40e:	4639      	mov	r1, r7
   ba410:	f001 fddc 	bl	bbfcc <__adddf3>
   ba414:	4642      	mov	r2, r8
   ba416:	464b      	mov	r3, r9
   ba418:	4606      	mov	r6, r0
   ba41a:	460f      	mov	r7, r1
   ba41c:	4620      	mov	r0, r4
   ba41e:	4629      	mov	r1, r5
   ba420:	f001 ff8a 	bl	bc338 <__aeabi_dmul>
   ba424:	4604      	mov	r4, r0
   ba426:	460d      	mov	r5, r1
   ba428:	462b      	mov	r3, r5
   ba42a:	4630      	mov	r0, r6
   ba42c:	4639      	mov	r1, r7
   ba42e:	4622      	mov	r2, r4
   ba430:	f001 fdcc 	bl	bbfcc <__adddf3>
   ba434:	4bc2      	ldr	r3, [pc, #776]	; (ba740 <__ieee754_pow+0x918>)
   ba436:	4299      	cmp	r1, r3
   ba438:	4680      	mov	r8, r0
   ba43a:	4689      	mov	r9, r1
   ba43c:	468a      	mov	sl, r1
   ba43e:	f340 8118 	ble.w	ba672 <__ieee754_pow+0x84a>
   ba442:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   ba446:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   ba44a:	4303      	orrs	r3, r0
   ba44c:	f040 8207 	bne.w	ba85e <__ieee754_pow+0xa36>
   ba450:	a3a3      	add	r3, pc, #652	; (adr r3, ba6e0 <__ieee754_pow+0x8b8>)
   ba452:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba456:	4630      	mov	r0, r6
   ba458:	4639      	mov	r1, r7
   ba45a:	f001 fdb7 	bl	bbfcc <__adddf3>
   ba45e:	4602      	mov	r2, r0
   ba460:	460b      	mov	r3, r1
   ba462:	4640      	mov	r0, r8
   ba464:	4649      	mov	r1, r9
   ba466:	4690      	mov	r8, r2
   ba468:	4699      	mov	r9, r3
   ba46a:	4622      	mov	r2, r4
   ba46c:	462b      	mov	r3, r5
   ba46e:	f001 fdab 	bl	bbfc8 <__aeabi_dsub>
   ba472:	4602      	mov	r2, r0
   ba474:	460b      	mov	r3, r1
   ba476:	4640      	mov	r0, r8
   ba478:	4649      	mov	r1, r9
   ba47a:	f002 f9ed 	bl	bc858 <__aeabi_dcmpgt>
   ba47e:	2800      	cmp	r0, #0
   ba480:	f040 81ed 	bne.w	ba85e <__ieee754_pow+0xa36>
   ba484:	f3ca 530a 	ubfx	r3, sl, #20, #11
   ba488:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   ba48c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   ba490:	fa42 f303 	asr.w	r3, r2, r3
   ba494:	4453      	add	r3, sl
   ba496:	49ab      	ldr	r1, [pc, #684]	; (ba744 <__ieee754_pow+0x91c>)
   ba498:	f3c3 520a 	ubfx	r2, r3, #20, #11
   ba49c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   ba4a0:	fa41 fc02 	asr.w	ip, r1, r2
   ba4a4:	f3c3 0113 	ubfx	r1, r3, #0, #20
   ba4a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba4ac:	f1c2 0214 	rsb	r2, r2, #20
   ba4b0:	fa41 f202 	asr.w	r2, r1, r2
   ba4b4:	2000      	movs	r0, #0
   ba4b6:	ea23 010c 	bic.w	r1, r3, ip
   ba4ba:	f1ba 0f00 	cmp.w	sl, #0
   ba4be:	9200      	str	r2, [sp, #0]
   ba4c0:	460b      	mov	r3, r1
   ba4c2:	4602      	mov	r2, r0
   ba4c4:	da02      	bge.n	ba4cc <__ieee754_pow+0x6a4>
   ba4c6:	9900      	ldr	r1, [sp, #0]
   ba4c8:	4249      	negs	r1, r1
   ba4ca:	9100      	str	r1, [sp, #0]
   ba4cc:	4620      	mov	r0, r4
   ba4ce:	4629      	mov	r1, r5
   ba4d0:	f001 fd7a 	bl	bbfc8 <__aeabi_dsub>
   ba4d4:	9b00      	ldr	r3, [sp, #0]
   ba4d6:	051b      	lsls	r3, r3, #20
   ba4d8:	9302      	str	r3, [sp, #8]
   ba4da:	4602      	mov	r2, r0
   ba4dc:	460b      	mov	r3, r1
   ba4de:	4604      	mov	r4, r0
   ba4e0:	460d      	mov	r5, r1
   ba4e2:	4630      	mov	r0, r6
   ba4e4:	4639      	mov	r1, r7
   ba4e6:	f001 fd71 	bl	bbfcc <__adddf3>
   ba4ea:	4689      	mov	r9, r1
   ba4ec:	f04f 0800 	mov.w	r8, #0
   ba4f0:	a37d      	add	r3, pc, #500	; (adr r3, ba6e8 <__ieee754_pow+0x8c0>)
   ba4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba4f6:	4640      	mov	r0, r8
   ba4f8:	4649      	mov	r1, r9
   ba4fa:	f001 ff1d 	bl	bc338 <__aeabi_dmul>
   ba4fe:	4622      	mov	r2, r4
   ba500:	462b      	mov	r3, r5
   ba502:	4682      	mov	sl, r0
   ba504:	468b      	mov	fp, r1
   ba506:	4640      	mov	r0, r8
   ba508:	4649      	mov	r1, r9
   ba50a:	f001 fd5d 	bl	bbfc8 <__aeabi_dsub>
   ba50e:	4602      	mov	r2, r0
   ba510:	460b      	mov	r3, r1
   ba512:	4630      	mov	r0, r6
   ba514:	4639      	mov	r1, r7
   ba516:	f001 fd57 	bl	bbfc8 <__aeabi_dsub>
   ba51a:	a375      	add	r3, pc, #468	; (adr r3, ba6f0 <__ieee754_pow+0x8c8>)
   ba51c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba520:	f001 ff0a 	bl	bc338 <__aeabi_dmul>
   ba524:	a374      	add	r3, pc, #464	; (adr r3, ba6f8 <__ieee754_pow+0x8d0>)
   ba526:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba52a:	4604      	mov	r4, r0
   ba52c:	460d      	mov	r5, r1
   ba52e:	4640      	mov	r0, r8
   ba530:	4649      	mov	r1, r9
   ba532:	f001 ff01 	bl	bc338 <__aeabi_dmul>
   ba536:	4602      	mov	r2, r0
   ba538:	460b      	mov	r3, r1
   ba53a:	4620      	mov	r0, r4
   ba53c:	4629      	mov	r1, r5
   ba53e:	f001 fd45 	bl	bbfcc <__adddf3>
   ba542:	4606      	mov	r6, r0
   ba544:	460f      	mov	r7, r1
   ba546:	4632      	mov	r2, r6
   ba548:	463b      	mov	r3, r7
   ba54a:	4650      	mov	r0, sl
   ba54c:	4659      	mov	r1, fp
   ba54e:	f001 fd3d 	bl	bbfcc <__adddf3>
   ba552:	4652      	mov	r2, sl
   ba554:	465b      	mov	r3, fp
   ba556:	4604      	mov	r4, r0
   ba558:	460d      	mov	r5, r1
   ba55a:	f001 fd35 	bl	bbfc8 <__aeabi_dsub>
   ba55e:	4602      	mov	r2, r0
   ba560:	460b      	mov	r3, r1
   ba562:	4630      	mov	r0, r6
   ba564:	4639      	mov	r1, r7
   ba566:	f001 fd2f 	bl	bbfc8 <__aeabi_dsub>
   ba56a:	4622      	mov	r2, r4
   ba56c:	4680      	mov	r8, r0
   ba56e:	4689      	mov	r9, r1
   ba570:	462b      	mov	r3, r5
   ba572:	4620      	mov	r0, r4
   ba574:	4629      	mov	r1, r5
   ba576:	f001 fedf 	bl	bc338 <__aeabi_dmul>
   ba57a:	a361      	add	r3, pc, #388	; (adr r3, ba700 <__ieee754_pow+0x8d8>)
   ba57c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba580:	4606      	mov	r6, r0
   ba582:	460f      	mov	r7, r1
   ba584:	f001 fed8 	bl	bc338 <__aeabi_dmul>
   ba588:	a35f      	add	r3, pc, #380	; (adr r3, ba708 <__ieee754_pow+0x8e0>)
   ba58a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba58e:	f001 fd1b 	bl	bbfc8 <__aeabi_dsub>
   ba592:	4632      	mov	r2, r6
   ba594:	463b      	mov	r3, r7
   ba596:	f001 fecf 	bl	bc338 <__aeabi_dmul>
   ba59a:	a35d      	add	r3, pc, #372	; (adr r3, ba710 <__ieee754_pow+0x8e8>)
   ba59c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba5a0:	f001 fd14 	bl	bbfcc <__adddf3>
   ba5a4:	4632      	mov	r2, r6
   ba5a6:	463b      	mov	r3, r7
   ba5a8:	f001 fec6 	bl	bc338 <__aeabi_dmul>
   ba5ac:	a35a      	add	r3, pc, #360	; (adr r3, ba718 <__ieee754_pow+0x8f0>)
   ba5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba5b2:	f001 fd09 	bl	bbfc8 <__aeabi_dsub>
   ba5b6:	4632      	mov	r2, r6
   ba5b8:	463b      	mov	r3, r7
   ba5ba:	f001 febd 	bl	bc338 <__aeabi_dmul>
   ba5be:	a358      	add	r3, pc, #352	; (adr r3, ba720 <__ieee754_pow+0x8f8>)
   ba5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba5c4:	f001 fd02 	bl	bbfcc <__adddf3>
   ba5c8:	4632      	mov	r2, r6
   ba5ca:	463b      	mov	r3, r7
   ba5cc:	f001 feb4 	bl	bc338 <__aeabi_dmul>
   ba5d0:	4602      	mov	r2, r0
   ba5d2:	460b      	mov	r3, r1
   ba5d4:	4620      	mov	r0, r4
   ba5d6:	4629      	mov	r1, r5
   ba5d8:	f001 fcf6 	bl	bbfc8 <__aeabi_dsub>
   ba5dc:	4606      	mov	r6, r0
   ba5de:	460f      	mov	r7, r1
   ba5e0:	4632      	mov	r2, r6
   ba5e2:	463b      	mov	r3, r7
   ba5e4:	4620      	mov	r0, r4
   ba5e6:	4629      	mov	r1, r5
   ba5e8:	f001 fea6 	bl	bc338 <__aeabi_dmul>
   ba5ec:	4602      	mov	r2, r0
   ba5ee:	460b      	mov	r3, r1
   ba5f0:	4630      	mov	r0, r6
   ba5f2:	4639      	mov	r1, r7
   ba5f4:	4616      	mov	r6, r2
   ba5f6:	461f      	mov	r7, r3
   ba5f8:	2200      	movs	r2, #0
   ba5fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ba5fe:	f001 fce3 	bl	bbfc8 <__aeabi_dsub>
   ba602:	4602      	mov	r2, r0
   ba604:	460b      	mov	r3, r1
   ba606:	4630      	mov	r0, r6
   ba608:	4639      	mov	r1, r7
   ba60a:	f001 ffbf 	bl	bc58c <__aeabi_ddiv>
   ba60e:	4642      	mov	r2, r8
   ba610:	4606      	mov	r6, r0
   ba612:	460f      	mov	r7, r1
   ba614:	464b      	mov	r3, r9
   ba616:	4620      	mov	r0, r4
   ba618:	4629      	mov	r1, r5
   ba61a:	f001 fe8d 	bl	bc338 <__aeabi_dmul>
   ba61e:	4642      	mov	r2, r8
   ba620:	464b      	mov	r3, r9
   ba622:	f001 fcd3 	bl	bbfcc <__adddf3>
   ba626:	4602      	mov	r2, r0
   ba628:	460b      	mov	r3, r1
   ba62a:	4630      	mov	r0, r6
   ba62c:	4639      	mov	r1, r7
   ba62e:	f001 fccb 	bl	bbfc8 <__aeabi_dsub>
   ba632:	4622      	mov	r2, r4
   ba634:	462b      	mov	r3, r5
   ba636:	f001 fcc7 	bl	bbfc8 <__aeabi_dsub>
   ba63a:	4602      	mov	r2, r0
   ba63c:	460b      	mov	r3, r1
   ba63e:	2000      	movs	r0, #0
   ba640:	4941      	ldr	r1, [pc, #260]	; (ba748 <__ieee754_pow+0x920>)
   ba642:	f001 fcc1 	bl	bbfc8 <__aeabi_dsub>
   ba646:	9a02      	ldr	r2, [sp, #8]
   ba648:	460b      	mov	r3, r1
   ba64a:	4413      	add	r3, r2
   ba64c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   ba650:	f2c0 8143 	blt.w	ba8da <__ieee754_pow+0xab2>
   ba654:	4619      	mov	r1, r3
   ba656:	ec53 2b18 	vmov	r2, r3, d8
   ba65a:	f001 fe6d 	bl	bc338 <__aeabi_dmul>
   ba65e:	ec41 0b10 	vmov	d0, r0, r1
   ba662:	e42d      	b.n	b9ec0 <__ieee754_pow+0x98>
   ba664:	f1bb 0f00 	cmp.w	fp, #0
   ba668:	f6ff aca0 	blt.w	b9fac <__ieee754_pow+0x184>
   ba66c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; ba728 <__ieee754_pow+0x900>
   ba670:	e426      	b.n	b9ec0 <__ieee754_pow+0x98>
   ba672:	f8df c0dc 	ldr.w	ip, [pc, #220]	; ba750 <__ieee754_pow+0x928>
   ba676:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   ba67a:	4563      	cmp	r3, ip
   ba67c:	f340 80e7 	ble.w	ba84e <__ieee754_pow+0xa26>
   ba680:	4b32      	ldr	r3, [pc, #200]	; (ba74c <__ieee754_pow+0x924>)
   ba682:	440b      	add	r3, r1
   ba684:	4303      	orrs	r3, r0
   ba686:	d10a      	bne.n	ba69e <__ieee754_pow+0x876>
   ba688:	4622      	mov	r2, r4
   ba68a:	462b      	mov	r3, r5
   ba68c:	f001 fc9c 	bl	bbfc8 <__aeabi_dsub>
   ba690:	4632      	mov	r2, r6
   ba692:	463b      	mov	r3, r7
   ba694:	f002 f8d6 	bl	bc844 <__aeabi_dcmpge>
   ba698:	2800      	cmp	r0, #0
   ba69a:	f43f aef3 	beq.w	ba484 <__ieee754_pow+0x65c>
   ba69e:	a324      	add	r3, pc, #144	; (adr r3, ba730 <__ieee754_pow+0x908>)
   ba6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba6a4:	ec51 0b18 	vmov	r0, r1, d8
   ba6a8:	f001 fe46 	bl	bc338 <__aeabi_dmul>
   ba6ac:	a320      	add	r3, pc, #128	; (adr r3, ba730 <__ieee754_pow+0x908>)
   ba6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba6b2:	f001 fe41 	bl	bc338 <__aeabi_dmul>
   ba6b6:	ec41 0b10 	vmov	d0, r0, r1
   ba6ba:	e401      	b.n	b9ec0 <__ieee754_pow+0x98>
   ba6bc:	ed9f 7b1e 	vldr	d7, [pc, #120]	; ba738 <__ieee754_pow+0x910>
   ba6c0:	eeb0 8a47 	vmov.f32	s16, s14
   ba6c4:	eef0 8a67 	vmov.f32	s17, s15
   ba6c8:	e686      	b.n	ba3d8 <__ieee754_pow+0x5b0>
   ba6ca:	f1bb 0f00 	cmp.w	fp, #0
   ba6ce:	dacd      	bge.n	ba66c <__ieee754_pow+0x844>
   ba6d0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   ba6d4:	ee00 6a10 	vmov	s0, r6
   ba6d8:	ee00 3a90 	vmov	s1, r3
   ba6dc:	f7ff bbf0 	b.w	b9ec0 <__ieee754_pow+0x98>
   ba6e0:	652b82fe 	.word	0x652b82fe
   ba6e4:	3c971547 	.word	0x3c971547
   ba6e8:	00000000 	.word	0x00000000
   ba6ec:	3fe62e43 	.word	0x3fe62e43
   ba6f0:	fefa39ef 	.word	0xfefa39ef
   ba6f4:	3fe62e42 	.word	0x3fe62e42
   ba6f8:	0ca86c39 	.word	0x0ca86c39
   ba6fc:	be205c61 	.word	0xbe205c61
   ba700:	72bea4d0 	.word	0x72bea4d0
   ba704:	3e663769 	.word	0x3e663769
   ba708:	c5d26bf1 	.word	0xc5d26bf1
   ba70c:	3ebbbd41 	.word	0x3ebbbd41
   ba710:	af25de2c 	.word	0xaf25de2c
   ba714:	3f11566a 	.word	0x3f11566a
   ba718:	16bebd93 	.word	0x16bebd93
   ba71c:	3f66c16c 	.word	0x3f66c16c
   ba720:	5555553e 	.word	0x5555553e
   ba724:	3fc55555 	.word	0x3fc55555
	...
   ba730:	c2f8f359 	.word	0xc2f8f359
   ba734:	01a56e1f 	.word	0x01a56e1f
   ba738:	00000000 	.word	0x00000000
   ba73c:	3ff00000 	.word	0x3ff00000
   ba740:	408fffff 	.word	0x408fffff
   ba744:	000fffff 	.word	0x000fffff
   ba748:	3ff00000 	.word	0x3ff00000
   ba74c:	3f6f3400 	.word	0x3f6f3400
   ba750:	4090cbff 	.word	0x4090cbff
   ba754:	4598      	cmp	r8, r3
   ba756:	db85      	blt.n	ba664 <__ieee754_pow+0x83c>
   ba758:	4b7d      	ldr	r3, [pc, #500]	; (ba950 <__ieee754_pow+0xb28>)
   ba75a:	4598      	cmp	r8, r3
   ba75c:	f73f ac22 	bgt.w	b9fa4 <__ieee754_pow+0x17c>
   ba760:	ec51 0b10 	vmov	r0, r1, d0
   ba764:	4b7a      	ldr	r3, [pc, #488]	; (ba950 <__ieee754_pow+0xb28>)
   ba766:	2200      	movs	r2, #0
   ba768:	f001 fc2e 	bl	bbfc8 <__aeabi_dsub>
   ba76c:	a368      	add	r3, pc, #416	; (adr r3, ba910 <__ieee754_pow+0xae8>)
   ba76e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba772:	4604      	mov	r4, r0
   ba774:	460d      	mov	r5, r1
   ba776:	f001 fddf 	bl	bc338 <__aeabi_dmul>
   ba77a:	a367      	add	r3, pc, #412	; (adr r3, ba918 <__ieee754_pow+0xaf0>)
   ba77c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba780:	4682      	mov	sl, r0
   ba782:	468b      	mov	fp, r1
   ba784:	4620      	mov	r0, r4
   ba786:	4629      	mov	r1, r5
   ba788:	f001 fdd6 	bl	bc338 <__aeabi_dmul>
   ba78c:	4b71      	ldr	r3, [pc, #452]	; (ba954 <__ieee754_pow+0xb2c>)
   ba78e:	ec41 0b18 	vmov	d8, r0, r1
   ba792:	2200      	movs	r2, #0
   ba794:	4620      	mov	r0, r4
   ba796:	4629      	mov	r1, r5
   ba798:	f001 fdce 	bl	bc338 <__aeabi_dmul>
   ba79c:	4602      	mov	r2, r0
   ba79e:	460b      	mov	r3, r1
   ba7a0:	a15f      	add	r1, pc, #380	; (adr r1, ba920 <__ieee754_pow+0xaf8>)
   ba7a2:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba7a6:	f001 fc0f 	bl	bbfc8 <__aeabi_dsub>
   ba7aa:	4622      	mov	r2, r4
   ba7ac:	462b      	mov	r3, r5
   ba7ae:	f001 fdc3 	bl	bc338 <__aeabi_dmul>
   ba7b2:	4602      	mov	r2, r0
   ba7b4:	460b      	mov	r3, r1
   ba7b6:	2000      	movs	r0, #0
   ba7b8:	4967      	ldr	r1, [pc, #412]	; (ba958 <__ieee754_pow+0xb30>)
   ba7ba:	f001 fc05 	bl	bbfc8 <__aeabi_dsub>
   ba7be:	4622      	mov	r2, r4
   ba7c0:	4680      	mov	r8, r0
   ba7c2:	4689      	mov	r9, r1
   ba7c4:	462b      	mov	r3, r5
   ba7c6:	4620      	mov	r0, r4
   ba7c8:	4629      	mov	r1, r5
   ba7ca:	f001 fdb5 	bl	bc338 <__aeabi_dmul>
   ba7ce:	4602      	mov	r2, r0
   ba7d0:	460b      	mov	r3, r1
   ba7d2:	4640      	mov	r0, r8
   ba7d4:	4649      	mov	r1, r9
   ba7d6:	f001 fdaf 	bl	bc338 <__aeabi_dmul>
   ba7da:	a353      	add	r3, pc, #332	; (adr r3, ba928 <__ieee754_pow+0xb00>)
   ba7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba7e0:	f001 fdaa 	bl	bc338 <__aeabi_dmul>
   ba7e4:	4602      	mov	r2, r0
   ba7e6:	460b      	mov	r3, r1
   ba7e8:	ec51 0b18 	vmov	r0, r1, d8
   ba7ec:	f001 fbec 	bl	bbfc8 <__aeabi_dsub>
   ba7f0:	4680      	mov	r8, r0
   ba7f2:	4689      	mov	r9, r1
   ba7f4:	4642      	mov	r2, r8
   ba7f6:	464b      	mov	r3, r9
   ba7f8:	4650      	mov	r0, sl
   ba7fa:	4659      	mov	r1, fp
   ba7fc:	f001 fbe6 	bl	bbfcc <__adddf3>
   ba800:	2000      	movs	r0, #0
   ba802:	4652      	mov	r2, sl
   ba804:	465b      	mov	r3, fp
   ba806:	4604      	mov	r4, r0
   ba808:	460d      	mov	r5, r1
   ba80a:	e591      	b.n	ba330 <__ieee754_pow+0x508>
   ba80c:	4622      	mov	r2, r4
   ba80e:	462b      	mov	r3, r5
   ba810:	4620      	mov	r0, r4
   ba812:	4629      	mov	r1, r5
   ba814:	f001 fd90 	bl	bc338 <__aeabi_dmul>
   ba818:	ec41 0b10 	vmov	d0, r0, r1
   ba81c:	f7ff bb50 	b.w	b9ec0 <__ieee754_pow+0x98>
   ba820:	494b      	ldr	r1, [pc, #300]	; (ba950 <__ieee754_pow+0xb28>)
   ba822:	2000      	movs	r0, #0
   ba824:	4622      	mov	r2, r4
   ba826:	462b      	mov	r3, r5
   ba828:	f001 feb0 	bl	bc58c <__aeabi_ddiv>
   ba82c:	ec41 0b10 	vmov	d0, r0, r1
   ba830:	f7ff bb46 	b.w	b9ec0 <__ieee754_pow+0x98>
   ba834:	2b00      	cmp	r3, #0
   ba836:	d144      	bne.n	ba8c2 <__ieee754_pow+0xa9a>
   ba838:	f1c1 0114 	rsb	r1, r1, #20
   ba83c:	fa4a f001 	asr.w	r0, sl, r1
   ba840:	fa00 f101 	lsl.w	r1, r0, r1
   ba844:	4551      	cmp	r1, sl
   ba846:	d05a      	beq.n	ba8fe <__ieee754_pow+0xad6>
   ba848:	9300      	str	r3, [sp, #0]
   ba84a:	f7ff bb17 	b.w	b9e7c <__ieee754_pow+0x54>
   ba84e:	4a42      	ldr	r2, [pc, #264]	; (ba958 <__ieee754_pow+0xb30>)
   ba850:	4293      	cmp	r3, r2
   ba852:	dc5b      	bgt.n	ba90c <__ieee754_pow+0xae4>
   ba854:	e9dd 1200 	ldrd	r1, r2, [sp]
   ba858:	9102      	str	r1, [sp, #8]
   ba85a:	9100      	str	r1, [sp, #0]
   ba85c:	e646      	b.n	ba4ec <__ieee754_pow+0x6c4>
   ba85e:	a334      	add	r3, pc, #208	; (adr r3, ba930 <__ieee754_pow+0xb08>)
   ba860:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba864:	ec51 0b18 	vmov	r0, r1, d8
   ba868:	f001 fd66 	bl	bc338 <__aeabi_dmul>
   ba86c:	a330      	add	r3, pc, #192	; (adr r3, ba930 <__ieee754_pow+0xb08>)
   ba86e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba872:	f001 fd61 	bl	bc338 <__aeabi_dmul>
   ba876:	ec41 0b10 	vmov	d0, r0, r1
   ba87a:	f7ff bb21 	b.w	b9ec0 <__ieee754_pow+0x98>
   ba87e:	9b00      	ldr	r3, [sp, #0]
   ba880:	2b01      	cmp	r3, #1
   ba882:	f47f ab1d 	bne.w	b9ec0 <__ieee754_pow+0x98>
   ba886:	ee10 1a90 	vmov	r1, s1
   ba88a:	ee10 2a10 	vmov	r2, s0
   ba88e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba892:	ec43 2b10 	vmov	d0, r2, r3
   ba896:	f7ff bb13 	b.w	b9ec0 <__ieee754_pow+0x98>
   ba89a:	ed9f 7b27 	vldr	d7, [pc, #156]	; ba938 <__ieee754_pow+0xb10>
   ba89e:	eeb0 ca47 	vmov.f32	s24, s14
   ba8a2:	eef0 ca67 	vmov.f32	s25, s15
   ba8a6:	ed9f 7b26 	vldr	d7, [pc, #152]	; ba940 <__ieee754_pow+0xb18>
   ba8aa:	eeb0 da47 	vmov.f32	s26, s14
   ba8ae:	eef0 da67 	vmov.f32	s27, s15
   ba8b2:	ed9f 7b25 	vldr	d7, [pc, #148]	; ba948 <__ieee754_pow+0xb20>
   ba8b6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   ba8ba:	ec53 2b17 	vmov	r2, r3, d7
   ba8be:	f7ff bbeb 	b.w	ba098 <__ieee754_pow+0x270>
   ba8c2:	ec45 4b10 	vmov	d0, r4, r5
   ba8c6:	9200      	str	r2, [sp, #0]
   ba8c8:	f001 f892 	bl	bb9f0 <fabs>
   ba8cc:	9a00      	ldr	r2, [sp, #0]
   ba8ce:	2a00      	cmp	r2, #0
   ba8d0:	f47f ab92 	bne.w	b9ff8 <__ieee754_pow+0x1d0>
   ba8d4:	9200      	str	r2, [sp, #0]
   ba8d6:	f7ff bb26 	b.w	b9f26 <__ieee754_pow+0xfe>
   ba8da:	ec41 0b10 	vmov	d0, r0, r1
   ba8de:	9800      	ldr	r0, [sp, #0]
   ba8e0:	f001 f942 	bl	bbb68 <scalbn>
   ba8e4:	ec51 0b10 	vmov	r0, r1, d0
   ba8e8:	e6b5      	b.n	ba656 <__ieee754_pow+0x82e>
   ba8ea:	f000 0001 	and.w	r0, r0, #1
   ba8ee:	f1c0 0102 	rsb	r1, r0, #2
   ba8f2:	9100      	str	r1, [sp, #0]
   ba8f4:	2b00      	cmp	r3, #0
   ba8f6:	f43f aac1 	beq.w	b9e7c <__ieee754_pow+0x54>
   ba8fa:	f7ff bb0d 	b.w	b9f18 <__ieee754_pow+0xf0>
   ba8fe:	f000 0001 	and.w	r0, r0, #1
   ba902:	f1c0 0302 	rsb	r3, r0, #2
   ba906:	9300      	str	r3, [sp, #0]
   ba908:	f7ff bab8 	b.w	b9e7c <__ieee754_pow+0x54>
   ba90c:	151b      	asrs	r3, r3, #20
   ba90e:	e5bb      	b.n	ba488 <__ieee754_pow+0x660>
   ba910:	60000000 	.word	0x60000000
   ba914:	3ff71547 	.word	0x3ff71547
   ba918:	f85ddf44 	.word	0xf85ddf44
   ba91c:	3e54ae0b 	.word	0x3e54ae0b
   ba920:	55555555 	.word	0x55555555
   ba924:	3fd55555 	.word	0x3fd55555
   ba928:	652b82fe 	.word	0x652b82fe
   ba92c:	3ff71547 	.word	0x3ff71547
   ba930:	8800759c 	.word	0x8800759c
   ba934:	7e37e43c 	.word	0x7e37e43c
   ba938:	40000000 	.word	0x40000000
   ba93c:	3fe2b803 	.word	0x3fe2b803
   ba940:	43cfd006 	.word	0x43cfd006
   ba944:	3e4cfdeb 	.word	0x3e4cfdeb
   ba948:	00000000 	.word	0x00000000
   ba94c:	3ff80000 	.word	0x3ff80000
   ba950:	3ff00000 	.word	0x3ff00000
   ba954:	3fd00000 	.word	0x3fd00000
   ba958:	3fe00000 	.word	0x3fe00000

000ba95c <__ieee754_sqrt>:
   ba95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba960:	4a63      	ldr	r2, [pc, #396]	; (baaf0 <__ieee754_sqrt+0x194>)
   ba962:	ec55 4b10 	vmov	r4, r5, d0
   ba966:	43aa      	bics	r2, r5
   ba968:	f000 809f 	beq.w	baaaa <__ieee754_sqrt+0x14e>
   ba96c:	2d00      	cmp	r5, #0
   ba96e:	ee10 ca10 	vmov	ip, s0
   ba972:	462b      	mov	r3, r5
   ba974:	dd54      	ble.n	baa20 <__ieee754_sqrt+0xc4>
   ba976:	1529      	asrs	r1, r5, #20
   ba978:	d063      	beq.n	baa42 <__ieee754_sqrt+0xe6>
   ba97a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   ba97e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   ba982:	07c9      	lsls	r1, r1, #31
   ba984:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba988:	d404      	bmi.n	ba994 <__ieee754_sqrt+0x38>
   ba98a:	005b      	lsls	r3, r3, #1
   ba98c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba990:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba994:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   ba998:	2600      	movs	r6, #0
   ba99a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   ba99e:	107f      	asrs	r7, r7, #1
   ba9a0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba9a4:	f04f 0e16 	mov.w	lr, #22
   ba9a8:	4634      	mov	r4, r6
   ba9aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   ba9ae:	18a1      	adds	r1, r4, r2
   ba9b0:	4299      	cmp	r1, r3
   ba9b2:	dc02      	bgt.n	ba9ba <__ieee754_sqrt+0x5e>
   ba9b4:	1a5b      	subs	r3, r3, r1
   ba9b6:	188c      	adds	r4, r1, r2
   ba9b8:	4416      	add	r6, r2
   ba9ba:	005b      	lsls	r3, r3, #1
   ba9bc:	f1be 0e01 	subs.w	lr, lr, #1
   ba9c0:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba9c4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba9c8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba9cc:	d1ef      	bne.n	ba9ae <__ieee754_sqrt+0x52>
   ba9ce:	4675      	mov	r5, lr
   ba9d0:	2020      	movs	r0, #32
   ba9d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   ba9d6:	e00a      	b.n	ba9ee <__ieee754_sqrt+0x92>
   ba9d8:	d044      	beq.n	baa64 <__ieee754_sqrt+0x108>
   ba9da:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   ba9de:	3801      	subs	r0, #1
   ba9e0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   ba9e4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba9e8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba9ec:	d043      	beq.n	baa76 <__ieee754_sqrt+0x11a>
   ba9ee:	42a3      	cmp	r3, r4
   ba9f0:	eb02 010e 	add.w	r1, r2, lr
   ba9f4:	ddf0      	ble.n	ba9d8 <__ieee754_sqrt+0x7c>
   ba9f6:	2900      	cmp	r1, #0
   ba9f8:	eb01 0e02 	add.w	lr, r1, r2
   ba9fc:	db0a      	blt.n	baa14 <__ieee754_sqrt+0xb8>
   ba9fe:	46a0      	mov	r8, r4
   baa00:	1b1b      	subs	r3, r3, r4
   baa02:	4561      	cmp	r1, ip
   baa04:	bf88      	it	hi
   baa06:	f103 33ff 	addhi.w	r3, r3, #4294967295
   baa0a:	ebac 0c01 	sub.w	ip, ip, r1
   baa0e:	4415      	add	r5, r2
   baa10:	4644      	mov	r4, r8
   baa12:	e7e2      	b.n	ba9da <__ieee754_sqrt+0x7e>
   baa14:	f1be 0f00 	cmp.w	lr, #0
   baa18:	dbf1      	blt.n	ba9fe <__ieee754_sqrt+0xa2>
   baa1a:	f104 0801 	add.w	r8, r4, #1
   baa1e:	e7ef      	b.n	baa00 <__ieee754_sqrt+0xa4>
   baa20:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   baa24:	4322      	orrs	r2, r4
   baa26:	d038      	beq.n	baa9a <__ieee754_sqrt+0x13e>
   baa28:	2d00      	cmp	r5, #0
   baa2a:	d14e      	bne.n	baaca <__ieee754_sqrt+0x16e>
   baa2c:	4629      	mov	r1, r5
   baa2e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   baa32:	3915      	subs	r1, #21
   baa34:	4613      	mov	r3, r2
   baa36:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   baa3a:	2a00      	cmp	r2, #0
   baa3c:	d0f7      	beq.n	baa2e <__ieee754_sqrt+0xd2>
   baa3e:	02d6      	lsls	r6, r2, #11
   baa40:	d450      	bmi.n	baae4 <__ieee754_sqrt+0x188>
   baa42:	2000      	movs	r0, #0
   baa44:	005b      	lsls	r3, r3, #1
   baa46:	02dd      	lsls	r5, r3, #11
   baa48:	4604      	mov	r4, r0
   baa4a:	f100 0001 	add.w	r0, r0, #1
   baa4e:	d5f9      	bpl.n	baa44 <__ieee754_sqrt+0xe8>
   baa50:	461a      	mov	r2, r3
   baa52:	4663      	mov	r3, ip
   baa54:	fa0c fc00 	lsl.w	ip, ip, r0
   baa58:	f1c0 0020 	rsb	r0, r0, #32
   baa5c:	40c3      	lsrs	r3, r0
   baa5e:	1b09      	subs	r1, r1, r4
   baa60:	4313      	orrs	r3, r2
   baa62:	e78a      	b.n	ba97a <__ieee754_sqrt+0x1e>
   baa64:	4561      	cmp	r1, ip
   baa66:	d8b8      	bhi.n	ba9da <__ieee754_sqrt+0x7e>
   baa68:	2900      	cmp	r1, #0
   baa6a:	eb01 0e02 	add.w	lr, r1, r2
   baa6e:	dbd1      	blt.n	baa14 <__ieee754_sqrt+0xb8>
   baa70:	4698      	mov	r8, r3
   baa72:	2300      	movs	r3, #0
   baa74:	e7c9      	b.n	baa0a <__ieee754_sqrt+0xae>
   baa76:	ea53 030c 	orrs.w	r3, r3, ip
   baa7a:	d110      	bne.n	baa9e <__ieee754_sqrt+0x142>
   baa7c:	0868      	lsrs	r0, r5, #1
   baa7e:	1071      	asrs	r1, r6, #1
   baa80:	07f3      	lsls	r3, r6, #31
   baa82:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   baa86:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   baa8a:	bf48      	it	mi
   baa8c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   baa90:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   baa94:	4602      	mov	r2, r0
   baa96:	ec43 2b10 	vmov	d0, r2, r3
   baa9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   baa9e:	1c6a      	adds	r2, r5, #1
   baaa0:	bf16      	itet	ne
   baaa2:	1c68      	addne	r0, r5, #1
   baaa4:	3601      	addeq	r6, #1
   baaa6:	0840      	lsrne	r0, r0, #1
   baaa8:	e7e9      	b.n	baa7e <__ieee754_sqrt+0x122>
   baaaa:	ee10 2a10 	vmov	r2, s0
   baaae:	ee10 0a10 	vmov	r0, s0
   baab2:	462b      	mov	r3, r5
   baab4:	4629      	mov	r1, r5
   baab6:	f001 fc3f 	bl	bc338 <__aeabi_dmul>
   baaba:	4622      	mov	r2, r4
   baabc:	462b      	mov	r3, r5
   baabe:	f001 fa85 	bl	bbfcc <__adddf3>
   baac2:	ec41 0b10 	vmov	d0, r0, r1
   baac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   baaca:	ee10 2a10 	vmov	r2, s0
   baace:	4620      	mov	r0, r4
   baad0:	4629      	mov	r1, r5
   baad2:	f001 fa79 	bl	bbfc8 <__aeabi_dsub>
   baad6:	4602      	mov	r2, r0
   baad8:	460b      	mov	r3, r1
   baada:	f001 fd57 	bl	bc58c <__aeabi_ddiv>
   baade:	ec41 0b10 	vmov	d0, r0, r1
   baae2:	e7da      	b.n	baa9a <__ieee754_sqrt+0x13e>
   baae4:	4663      	mov	r3, ip
   baae6:	2020      	movs	r0, #32
   baae8:	f04f 34ff 	mov.w	r4, #4294967295
   baaec:	e7b6      	b.n	baa5c <__ieee754_sqrt+0x100>
   baaee:	bf00      	nop
   baaf0:	7ff00000 	.word	0x7ff00000

000baaf4 <__ieee754_atan2f>:
   baaf4:	b510      	push	{r4, lr}
   baaf6:	b082      	sub	sp, #8
   baaf8:	edcd 0a01 	vstr	s1, [sp, #4]
   baafc:	9b01      	ldr	r3, [sp, #4]
   baafe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   bab02:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   bab06:	eef0 7a40 	vmov.f32	s15, s0
   bab0a:	dc30      	bgt.n	bab6e <__ieee754_atan2f+0x7a>
   bab0c:	ee10 0a10 	vmov	r0, s0
   bab10:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   bab14:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   bab18:	dc29      	bgt.n	bab6e <__ieee754_atan2f+0x7a>
   bab1a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   bab1e:	d042      	beq.n	baba6 <__ieee754_atan2f+0xb2>
   bab20:	179c      	asrs	r4, r3, #30
   bab22:	f004 0402 	and.w	r4, r4, #2
   bab26:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   bab2a:	b331      	cbz	r1, bab7a <__ieee754_atan2f+0x86>
   bab2c:	b37a      	cbz	r2, bab8e <__ieee754_atan2f+0x9a>
   bab2e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   bab32:	d040      	beq.n	babb6 <__ieee754_atan2f+0xc2>
   bab34:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   bab38:	d029      	beq.n	bab8e <__ieee754_atan2f+0x9a>
   bab3a:	1a8a      	subs	r2, r1, r2
   bab3c:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   bab40:	ea4f 51e2 	mov.w	r1, r2, asr #23
   bab44:	da34      	bge.n	babb0 <__ieee754_atan2f+0xbc>
   bab46:	2b00      	cmp	r3, #0
   bab48:	da42      	bge.n	babd0 <__ieee754_atan2f+0xdc>
   bab4a:	313c      	adds	r1, #60	; 0x3c
   bab4c:	da40      	bge.n	babd0 <__ieee754_atan2f+0xdc>
   bab4e:	ed9f 0a34 	vldr	s0, [pc, #208]	; bac20 <__ieee754_atan2f+0x12c>
   bab52:	2c01      	cmp	r4, #1
   bab54:	d04e      	beq.n	babf4 <__ieee754_atan2f+0x100>
   bab56:	2c02      	cmp	r4, #2
   bab58:	d043      	beq.n	babe2 <__ieee754_atan2f+0xee>
   bab5a:	b164      	cbz	r4, bab76 <__ieee754_atan2f+0x82>
   bab5c:	ed9f 7a31 	vldr	s14, [pc, #196]	; bac24 <__ieee754_atan2f+0x130>
   bab60:	eddf 7a31 	vldr	s15, [pc, #196]	; bac28 <__ieee754_atan2f+0x134>
   bab64:	ee30 0a07 	vadd.f32	s0, s0, s14
   bab68:	ee30 0a67 	vsub.f32	s0, s0, s15
   bab6c:	e003      	b.n	bab76 <__ieee754_atan2f+0x82>
   bab6e:	ed9d 7a01 	vldr	s14, [sp, #4]
   bab72:	ee37 0a27 	vadd.f32	s0, s14, s15
   bab76:	b002      	add	sp, #8
   bab78:	bd10      	pop	{r4, pc}
   bab7a:	2c02      	cmp	r4, #2
   bab7c:	d010      	beq.n	baba0 <__ieee754_atan2f+0xac>
   bab7e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; bac2c <__ieee754_atan2f+0x138>
   bab82:	2c03      	cmp	r4, #3
   bab84:	bf18      	it	ne
   bab86:	eeb0 0a67 	vmovne.f32	s0, s15
   bab8a:	b002      	add	sp, #8
   bab8c:	bd10      	pop	{r4, pc}
   bab8e:	ed9f 0a28 	vldr	s0, [pc, #160]	; bac30 <__ieee754_atan2f+0x13c>
   bab92:	eddf 7a28 	vldr	s15, [pc, #160]	; bac34 <__ieee754_atan2f+0x140>
   bab96:	2800      	cmp	r0, #0
   bab98:	bfb8      	it	lt
   bab9a:	eeb0 0a67 	vmovlt.f32	s0, s15
   bab9e:	e7ea      	b.n	bab76 <__ieee754_atan2f+0x82>
   baba0:	ed9f 0a21 	vldr	s0, [pc, #132]	; bac28 <__ieee754_atan2f+0x134>
   baba4:	e7e7      	b.n	bab76 <__ieee754_atan2f+0x82>
   baba6:	b002      	add	sp, #8
   baba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   babac:	f001 b86e 	b.w	bbc8c <atanf>
   babb0:	ed9f 0a1f 	vldr	s0, [pc, #124]	; bac30 <__ieee754_atan2f+0x13c>
   babb4:	e7cd      	b.n	bab52 <__ieee754_atan2f+0x5e>
   babb6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   babba:	f104 34ff 	add.w	r4, r4, #4294967295
   babbe:	d020      	beq.n	bac02 <__ieee754_atan2f+0x10e>
   babc0:	2c02      	cmp	r4, #2
   babc2:	d826      	bhi.n	bac12 <__ieee754_atan2f+0x11e>
   babc4:	4b1c      	ldr	r3, [pc, #112]	; (bac38 <__ieee754_atan2f+0x144>)
   babc6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   babca:	ed94 0a00 	vldr	s0, [r4]
   babce:	e7d2      	b.n	bab76 <__ieee754_atan2f+0x82>
   babd0:	ed9d 7a01 	vldr	s14, [sp, #4]
   babd4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   babd8:	f001 f932 	bl	bbe40 <fabsf>
   babdc:	f001 f856 	bl	bbc8c <atanf>
   babe0:	e7b7      	b.n	bab52 <__ieee754_atan2f+0x5e>
   babe2:	ed9f 7a10 	vldr	s14, [pc, #64]	; bac24 <__ieee754_atan2f+0x130>
   babe6:	eddf 7a10 	vldr	s15, [pc, #64]	; bac28 <__ieee754_atan2f+0x134>
   babea:	ee30 0a07 	vadd.f32	s0, s0, s14
   babee:	ee37 0ac0 	vsub.f32	s0, s15, s0
   babf2:	e7c0      	b.n	bab76 <__ieee754_atan2f+0x82>
   babf4:	ee10 3a10 	vmov	r3, s0
   babf8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   babfc:	ee00 3a10 	vmov	s0, r3
   bac00:	e7b9      	b.n	bab76 <__ieee754_atan2f+0x82>
   bac02:	2c02      	cmp	r4, #2
   bac04:	d808      	bhi.n	bac18 <__ieee754_atan2f+0x124>
   bac06:	4b0d      	ldr	r3, [pc, #52]	; (bac3c <__ieee754_atan2f+0x148>)
   bac08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bac0c:	ed94 0a00 	vldr	s0, [r4]
   bac10:	e7b1      	b.n	bab76 <__ieee754_atan2f+0x82>
   bac12:	ed9f 0a03 	vldr	s0, [pc, #12]	; bac20 <__ieee754_atan2f+0x12c>
   bac16:	e7ae      	b.n	bab76 <__ieee754_atan2f+0x82>
   bac18:	ed9f 0a09 	vldr	s0, [pc, #36]	; bac40 <__ieee754_atan2f+0x14c>
   bac1c:	e7ab      	b.n	bab76 <__ieee754_atan2f+0x82>
   bac1e:	bf00      	nop
   bac20:	00000000 	.word	0x00000000
   bac24:	33bbbd2e 	.word	0x33bbbd2e
   bac28:	40490fdb 	.word	0x40490fdb
   bac2c:	c0490fdb 	.word	0xc0490fdb
   bac30:	3fc90fdb 	.word	0x3fc90fdb
   bac34:	bfc90fdb 	.word	0xbfc90fdb
   bac38:	000be388 	.word	0x000be388
   bac3c:	000be37c 	.word	0x000be37c
   bac40:	3f490fdb 	.word	0x3f490fdb

000bac44 <__ieee754_rem_pio2f>:
   bac44:	b570      	push	{r4, r5, r6, lr}
   bac46:	ee10 3a10 	vmov	r3, s0
   bac4a:	4a89      	ldr	r2, [pc, #548]	; (bae70 <__ieee754_rem_pio2f+0x22c>)
   bac4c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   bac50:	4294      	cmp	r4, r2
   bac52:	b086      	sub	sp, #24
   bac54:	4605      	mov	r5, r0
   bac56:	dd70      	ble.n	bad3a <__ieee754_rem_pio2f+0xf6>
   bac58:	4a86      	ldr	r2, [pc, #536]	; (bae74 <__ieee754_rem_pio2f+0x230>)
   bac5a:	4294      	cmp	r4, r2
   bac5c:	ee10 6a10 	vmov	r6, s0
   bac60:	dc22      	bgt.n	baca8 <__ieee754_rem_pio2f+0x64>
   bac62:	2b00      	cmp	r3, #0
   bac64:	eddf 7a84 	vldr	s15, [pc, #528]	; bae78 <__ieee754_rem_pio2f+0x234>
   bac68:	4a84      	ldr	r2, [pc, #528]	; (bae7c <__ieee754_rem_pio2f+0x238>)
   bac6a:	f024 040f 	bic.w	r4, r4, #15
   bac6e:	eeb0 7a40 	vmov.f32	s14, s0
   bac72:	f340 80e4 	ble.w	bae3e <__ieee754_rem_pio2f+0x1fa>
   bac76:	4294      	cmp	r4, r2
   bac78:	ee70 7a67 	vsub.f32	s15, s0, s15
   bac7c:	bf09      	itett	eq
   bac7e:	eddf 6a80 	vldreq	s13, [pc, #512]	; bae80 <__ieee754_rem_pio2f+0x23c>
   bac82:	ed9f 7a80 	vldrne	s14, [pc, #512]	; bae84 <__ieee754_rem_pio2f+0x240>
   bac86:	ed9f 7a80 	vldreq	s14, [pc, #512]	; bae88 <__ieee754_rem_pio2f+0x244>
   bac8a:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   bac8e:	2001      	movs	r0, #1
   bac90:	ee77 6ac7 	vsub.f32	s13, s15, s14
   bac94:	ee77 7ae6 	vsub.f32	s15, s15, s13
   bac98:	edc5 6a00 	vstr	s13, [r5]
   bac9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   baca0:	edc5 7a01 	vstr	s15, [r5, #4]
   baca4:	b006      	add	sp, #24
   baca6:	bd70      	pop	{r4, r5, r6, pc}
   baca8:	4a78      	ldr	r2, [pc, #480]	; (bae8c <__ieee754_rem_pio2f+0x248>)
   bacaa:	4294      	cmp	r4, r2
   bacac:	dd54      	ble.n	bad58 <__ieee754_rem_pio2f+0x114>
   bacae:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   bacb2:	da49      	bge.n	bad48 <__ieee754_rem_pio2f+0x104>
   bacb4:	15e2      	asrs	r2, r4, #23
   bacb6:	3a86      	subs	r2, #134	; 0x86
   bacb8:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   bacbc:	ee07 3a90 	vmov	s15, r3
   bacc0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   bacc4:	eddf 6a72 	vldr	s13, [pc, #456]	; bae90 <__ieee754_rem_pio2f+0x24c>
   bacc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   baccc:	ee77 7ac7 	vsub.f32	s15, s15, s14
   bacd0:	ed8d 7a03 	vstr	s14, [sp, #12]
   bacd4:	ee67 7aa6 	vmul.f32	s15, s15, s13
   bacd8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   bacdc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   bace0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   bace4:	ed8d 7a04 	vstr	s14, [sp, #16]
   bace8:	ee67 7aa6 	vmul.f32	s15, s15, s13
   bacec:	eef5 7a40 	vcmp.f32	s15, #0.0
   bacf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bacf4:	edcd 7a05 	vstr	s15, [sp, #20]
   bacf8:	f040 8090 	bne.w	bae1c <__ieee754_rem_pio2f+0x1d8>
   bacfc:	eeb5 7a40 	vcmp.f32	s14, #0.0
   bad00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bad04:	bf14      	ite	ne
   bad06:	2302      	movne	r3, #2
   bad08:	2301      	moveq	r3, #1
   bad0a:	4962      	ldr	r1, [pc, #392]	; (bae94 <__ieee754_rem_pio2f+0x250>)
   bad0c:	9101      	str	r1, [sp, #4]
   bad0e:	2102      	movs	r1, #2
   bad10:	9100      	str	r1, [sp, #0]
   bad12:	a803      	add	r0, sp, #12
   bad14:	4629      	mov	r1, r5
   bad16:	f000 f949 	bl	bafac <__kernel_rem_pio2f>
   bad1a:	2e00      	cmp	r6, #0
   bad1c:	dac2      	bge.n	baca4 <__ieee754_rem_pio2f+0x60>
   bad1e:	ed95 7a00 	vldr	s14, [r5]
   bad22:	edd5 7a01 	vldr	s15, [r5, #4]
   bad26:	eeb1 7a47 	vneg.f32	s14, s14
   bad2a:	eef1 7a67 	vneg.f32	s15, s15
   bad2e:	ed85 7a00 	vstr	s14, [r5]
   bad32:	edc5 7a01 	vstr	s15, [r5, #4]
   bad36:	4240      	negs	r0, r0
   bad38:	e7b4      	b.n	baca4 <__ieee754_rem_pio2f+0x60>
   bad3a:	2200      	movs	r2, #0
   bad3c:	ed85 0a00 	vstr	s0, [r5]
   bad40:	6042      	str	r2, [r0, #4]
   bad42:	2000      	movs	r0, #0
   bad44:	b006      	add	sp, #24
   bad46:	bd70      	pop	{r4, r5, r6, pc}
   bad48:	ee70 7a40 	vsub.f32	s15, s0, s0
   bad4c:	2000      	movs	r0, #0
   bad4e:	edc5 7a01 	vstr	s15, [r5, #4]
   bad52:	edc5 7a00 	vstr	s15, [r5]
   bad56:	e7a5      	b.n	baca4 <__ieee754_rem_pio2f+0x60>
   bad58:	f001 f872 	bl	bbe40 <fabsf>
   bad5c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; bae98 <__ieee754_rem_pio2f+0x254>
   bad60:	ed9f 6a45 	vldr	s12, [pc, #276]	; bae78 <__ieee754_rem_pio2f+0x234>
   bad64:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   bad68:	eee0 7a07 	vfma.f32	s15, s0, s14
   bad6c:	ed9f 7a45 	vldr	s14, [pc, #276]	; bae84 <__ieee754_rem_pio2f+0x240>
   bad70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   bad74:	ee17 0a90 	vmov	r0, s15
   bad78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   bad7c:	281f      	cmp	r0, #31
   bad7e:	eea6 0ac6 	vfms.f32	s0, s13, s12
   bad82:	ee66 7a87 	vmul.f32	s15, s13, s14
   bad86:	eeb1 6a66 	vneg.f32	s12, s13
   bad8a:	dc1e      	bgt.n	badca <__ieee754_rem_pio2f+0x186>
   bad8c:	4a43      	ldr	r2, [pc, #268]	; (bae9c <__ieee754_rem_pio2f+0x258>)
   bad8e:	1e41      	subs	r1, r0, #1
   bad90:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   bad94:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   bad98:	4293      	cmp	r3, r2
   bad9a:	d016      	beq.n	badca <__ieee754_rem_pio2f+0x186>
   bad9c:	ee30 7a67 	vsub.f32	s14, s0, s15
   bada0:	ed85 7a00 	vstr	s14, [r5]
   bada4:	ee30 0a47 	vsub.f32	s0, s0, s14
   bada8:	2e00      	cmp	r6, #0
   badaa:	ee30 0a67 	vsub.f32	s0, s0, s15
   badae:	ed85 0a01 	vstr	s0, [r5, #4]
   badb2:	f6bf af77 	bge.w	baca4 <__ieee754_rem_pio2f+0x60>
   badb6:	eeb1 7a47 	vneg.f32	s14, s14
   badba:	eeb1 0a40 	vneg.f32	s0, s0
   badbe:	ed85 7a00 	vstr	s14, [r5]
   badc2:	ed85 0a01 	vstr	s0, [r5, #4]
   badc6:	4240      	negs	r0, r0
   badc8:	e76c      	b.n	baca4 <__ieee754_rem_pio2f+0x60>
   badca:	ee30 7a67 	vsub.f32	s14, s0, s15
   badce:	15e2      	asrs	r2, r4, #23
   badd0:	ee17 3a10 	vmov	r3, s14
   badd4:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   badd8:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   baddc:	2c08      	cmp	r4, #8
   badde:	dddf      	ble.n	bada0 <__ieee754_rem_pio2f+0x15c>
   bade0:	eddf 7a27 	vldr	s15, [pc, #156]	; bae80 <__ieee754_rem_pio2f+0x23c>
   bade4:	ed9f 7a28 	vldr	s14, [pc, #160]	; bae88 <__ieee754_rem_pio2f+0x244>
   bade8:	eef0 5a40 	vmov.f32	s11, s0
   badec:	eee6 5a27 	vfma.f32	s11, s12, s15
   badf0:	ee30 0a65 	vsub.f32	s0, s0, s11
   badf4:	eea6 0a27 	vfma.f32	s0, s12, s15
   badf8:	eef0 7a40 	vmov.f32	s15, s0
   badfc:	eed6 7a87 	vfnms.f32	s15, s13, s14
   bae00:	ee35 7ae7 	vsub.f32	s14, s11, s15
   bae04:	ee17 3a10 	vmov	r3, s14
   bae08:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   bae0c:	1ad2      	subs	r2, r2, r3
   bae0e:	2a19      	cmp	r2, #25
   bae10:	dc06      	bgt.n	bae20 <__ieee754_rem_pio2f+0x1dc>
   bae12:	eeb0 0a65 	vmov.f32	s0, s11
   bae16:	ed85 7a00 	vstr	s14, [r5]
   bae1a:	e7c3      	b.n	bada4 <__ieee754_rem_pio2f+0x160>
   bae1c:	2303      	movs	r3, #3
   bae1e:	e774      	b.n	bad0a <__ieee754_rem_pio2f+0xc6>
   bae20:	ed9f 7a1f 	vldr	s14, [pc, #124]	; baea0 <__ieee754_rem_pio2f+0x25c>
   bae24:	ed9f 5a1f 	vldr	s10, [pc, #124]	; baea4 <__ieee754_rem_pio2f+0x260>
   bae28:	eeb0 0a65 	vmov.f32	s0, s11
   bae2c:	eea6 0a07 	vfma.f32	s0, s12, s14
   bae30:	ee75 7ac0 	vsub.f32	s15, s11, s0
   bae34:	eee6 7a07 	vfma.f32	s15, s12, s14
   bae38:	eed6 7a85 	vfnms.f32	s15, s13, s10
   bae3c:	e7ae      	b.n	bad9c <__ieee754_rem_pio2f+0x158>
   bae3e:	4294      	cmp	r4, r2
   bae40:	ee70 7a27 	vadd.f32	s15, s0, s15
   bae44:	bf09      	itett	eq
   bae46:	eddf 6a0e 	vldreq	s13, [pc, #56]	; bae80 <__ieee754_rem_pio2f+0x23c>
   bae4a:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; bae84 <__ieee754_rem_pio2f+0x240>
   bae4e:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; bae88 <__ieee754_rem_pio2f+0x244>
   bae52:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   bae56:	f04f 30ff 	mov.w	r0, #4294967295
   bae5a:	ee77 6a87 	vadd.f32	s13, s15, s14
   bae5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
   bae62:	edc5 6a00 	vstr	s13, [r5]
   bae66:	ee77 7a87 	vadd.f32	s15, s15, s14
   bae6a:	edc5 7a01 	vstr	s15, [r5, #4]
   bae6e:	e719      	b.n	baca4 <__ieee754_rem_pio2f+0x60>
   bae70:	3f490fd8 	.word	0x3f490fd8
   bae74:	4016cbe3 	.word	0x4016cbe3
   bae78:	3fc90f80 	.word	0x3fc90f80
   bae7c:	3fc90fd0 	.word	0x3fc90fd0
   bae80:	37354400 	.word	0x37354400
   bae84:	37354443 	.word	0x37354443
   bae88:	2e85a308 	.word	0x2e85a308
   bae8c:	43490f80 	.word	0x43490f80
   bae90:	43800000 	.word	0x43800000
   bae94:	000be414 	.word	0x000be414
   bae98:	3f22f984 	.word	0x3f22f984
   bae9c:	000be394 	.word	0x000be394
   baea0:	2e85a300 	.word	0x2e85a300
   baea4:	248d3132 	.word	0x248d3132

000baea8 <__kernel_cosf>:
   baea8:	ee10 3a10 	vmov	r3, s0
   baeac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   baeb0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   baeb4:	da2c      	bge.n	baf10 <__kernel_cosf+0x68>
   baeb6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   baeba:	ee17 3a90 	vmov	r3, s15
   baebe:	2b00      	cmp	r3, #0
   baec0:	d060      	beq.n	baf84 <__kernel_cosf+0xdc>
   baec2:	ee20 7a00 	vmul.f32	s14, s0, s0
   baec6:	eddf 7a31 	vldr	s15, [pc, #196]	; baf8c <__kernel_cosf+0xe4>
   baeca:	ed9f 5a31 	vldr	s10, [pc, #196]	; baf90 <__kernel_cosf+0xe8>
   baece:	eddf 5a31 	vldr	s11, [pc, #196]	; baf94 <__kernel_cosf+0xec>
   baed2:	ed9f 6a31 	vldr	s12, [pc, #196]	; baf98 <__kernel_cosf+0xf0>
   baed6:	eddf 6a31 	vldr	s13, [pc, #196]	; baf9c <__kernel_cosf+0xf4>
   baeda:	eea7 5a27 	vfma.f32	s10, s14, s15
   baede:	eddf 7a30 	vldr	s15, [pc, #192]	; bafa0 <__kernel_cosf+0xf8>
   baee2:	eee7 5a05 	vfma.f32	s11, s14, s10
   baee6:	eea7 6a25 	vfma.f32	s12, s14, s11
   baeea:	eee7 7a06 	vfma.f32	s15, s14, s12
   baeee:	eee7 6a27 	vfma.f32	s13, s14, s15
   baef2:	ee67 6a26 	vmul.f32	s13, s14, s13
   baef6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   baefa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   baefe:	eee7 0a26 	vfma.f32	s1, s14, s13
   baf02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   baf06:	eed7 0a27 	vfnms.f32	s1, s14, s15
   baf0a:	ee30 0a60 	vsub.f32	s0, s0, s1
   baf0e:	4770      	bx	lr
   baf10:	ee20 7a00 	vmul.f32	s14, s0, s0
   baf14:	eddf 7a1d 	vldr	s15, [pc, #116]	; baf8c <__kernel_cosf+0xe4>
   baf18:	ed9f 5a1d 	vldr	s10, [pc, #116]	; baf90 <__kernel_cosf+0xe8>
   baf1c:	eddf 5a1d 	vldr	s11, [pc, #116]	; baf94 <__kernel_cosf+0xec>
   baf20:	ed9f 6a1d 	vldr	s12, [pc, #116]	; baf98 <__kernel_cosf+0xf0>
   baf24:	eddf 6a1d 	vldr	s13, [pc, #116]	; baf9c <__kernel_cosf+0xf4>
   baf28:	4a1e      	ldr	r2, [pc, #120]	; (bafa4 <__kernel_cosf+0xfc>)
   baf2a:	eea7 5a27 	vfma.f32	s10, s14, s15
   baf2e:	4293      	cmp	r3, r2
   baf30:	eddf 7a1b 	vldr	s15, [pc, #108]	; bafa0 <__kernel_cosf+0xf8>
   baf34:	eee5 5a07 	vfma.f32	s11, s10, s14
   baf38:	eea5 6a87 	vfma.f32	s12, s11, s14
   baf3c:	eee6 7a07 	vfma.f32	s15, s12, s14
   baf40:	eee7 6a87 	vfma.f32	s13, s15, s14
   baf44:	ee66 6a87 	vmul.f32	s13, s13, s14
   baf48:	ddd5      	ble.n	baef6 <__kernel_cosf+0x4e>
   baf4a:	4a17      	ldr	r2, [pc, #92]	; (bafa8 <__kernel_cosf+0x100>)
   baf4c:	4293      	cmp	r3, r2
   baf4e:	dc14      	bgt.n	baf7a <__kernel_cosf+0xd2>
   baf50:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   baf54:	ee07 3a90 	vmov	s15, r3
   baf58:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   baf5c:	ee36 6a67 	vsub.f32	s12, s12, s15
   baf60:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   baf64:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   baf68:	eed7 7a25 	vfnms.f32	s15, s14, s11
   baf6c:	eee7 0a26 	vfma.f32	s1, s14, s13
   baf70:	ee77 0ae0 	vsub.f32	s1, s15, s1
   baf74:	ee36 0a60 	vsub.f32	s0, s12, s1
   baf78:	4770      	bx	lr
   baf7a:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   baf7e:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   baf82:	e7ed      	b.n	baf60 <__kernel_cosf+0xb8>
   baf84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   baf88:	4770      	bx	lr
   baf8a:	bf00      	nop
   baf8c:	ad47d74e 	.word	0xad47d74e
   baf90:	310f74f6 	.word	0x310f74f6
   baf94:	b493f27c 	.word	0xb493f27c
   baf98:	37d00d01 	.word	0x37d00d01
   baf9c:	3d2aaaab 	.word	0x3d2aaaab
   bafa0:	bab60b61 	.word	0xbab60b61
   bafa4:	3e999999 	.word	0x3e999999
   bafa8:	3f480000 	.word	0x3f480000

000bafac <__kernel_rem_pio2f>:
   bafac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bafb0:	ed2d 8b04 	vpush	{d8-d9}
   bafb4:	b0db      	sub	sp, #364	; 0x16c
   bafb6:	461c      	mov	r4, r3
   bafb8:	9303      	str	r3, [sp, #12]
   bafba:	9106      	str	r1, [sp, #24]
   bafbc:	4ba3      	ldr	r3, [pc, #652]	; (bb24c <__kernel_rem_pio2f+0x2a0>)
   bafbe:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   bafc0:	9208      	str	r2, [sp, #32]
   bafc2:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   bafc6:	1d11      	adds	r1, r2, #4
   bafc8:	4682      	mov	sl, r0
   bafca:	f104 38ff 	add.w	r8, r4, #4294967295
   bafce:	f2c0 82a2 	blt.w	bb516 <__kernel_rem_pio2f+0x56a>
   bafd2:	1ed3      	subs	r3, r2, #3
   bafd4:	bf44      	itt	mi
   bafd6:	4613      	movmi	r3, r2
   bafd8:	3304      	addmi	r3, #4
   bafda:	10db      	asrs	r3, r3, #3
   bafdc:	9302      	str	r3, [sp, #8]
   bafde:	3301      	adds	r3, #1
   bafe0:	00db      	lsls	r3, r3, #3
   bafe2:	9307      	str	r3, [sp, #28]
   bafe4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   bafe8:	1a9b      	subs	r3, r3, r2
   bafea:	9305      	str	r3, [sp, #20]
   bafec:	9b02      	ldr	r3, [sp, #8]
   bafee:	eb15 0108 	adds.w	r1, r5, r8
   baff2:	eba3 0308 	sub.w	r3, r3, r8
   baff6:	d416      	bmi.n	bb026 <__kernel_rem_pio2f+0x7a>
   baff8:	3101      	adds	r1, #1
   baffa:	ed9f 7a95 	vldr	s14, [pc, #596]	; bb250 <__kernel_rem_pio2f+0x2a4>
   baffe:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   bb000:	4419      	add	r1, r3
   bb002:	aa1e      	add	r2, sp, #120	; 0x78
   bb004:	2b00      	cmp	r3, #0
   bb006:	bfa4      	itt	ge
   bb008:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   bb00c:	ee07 4a90 	vmovge	s15, r4
   bb010:	f103 0301 	add.w	r3, r3, #1
   bb014:	bfac      	ite	ge
   bb016:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   bb01a:	eef0 7a47 	vmovlt.f32	s15, s14
   bb01e:	428b      	cmp	r3, r1
   bb020:	ece2 7a01 	vstmia	r2!, {s15}
   bb024:	d1ee      	bne.n	bb004 <__kernel_rem_pio2f+0x58>
   bb026:	2d00      	cmp	r5, #0
   bb028:	f2c0 82e5 	blt.w	bb5f6 <__kernel_rem_pio2f+0x64a>
   bb02c:	9b03      	ldr	r3, [sp, #12]
   bb02e:	a91e      	add	r1, sp, #120	; 0x78
   bb030:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   bb034:	ae46      	add	r6, sp, #280	; 0x118
   bb036:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   bb03a:	4640      	mov	r0, r8
   bb03c:	18ef      	adds	r7, r5, r3
   bb03e:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   bb042:	f1b8 0f00 	cmp.w	r8, #0
   bb046:	eddf 7a82 	vldr	s15, [pc, #520]	; bb250 <__kernel_rem_pio2f+0x2a4>
   bb04a:	db09      	blt.n	bb060 <__kernel_rem_pio2f+0xb4>
   bb04c:	4622      	mov	r2, r4
   bb04e:	4653      	mov	r3, sl
   bb050:	ecf3 6a01 	vldmia	r3!, {s13}
   bb054:	ed32 7a01 	vldmdb	r2!, {s14}
   bb058:	428b      	cmp	r3, r1
   bb05a:	eee6 7a87 	vfma.f32	s15, s13, s14
   bb05e:	d1f7      	bne.n	bb050 <__kernel_rem_pio2f+0xa4>
   bb060:	3001      	adds	r0, #1
   bb062:	42b8      	cmp	r0, r7
   bb064:	ece6 7a01 	vstmia	r6!, {s15}
   bb068:	f104 0404 	add.w	r4, r4, #4
   bb06c:	d1e9      	bne.n	bb042 <__kernel_rem_pio2f+0x96>
   bb06e:	ab09      	add	r3, sp, #36	; 0x24
   bb070:	af0a      	add	r7, sp, #40	; 0x28
   bb072:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   bb076:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   bb07a:	3b08      	subs	r3, #8
   bb07c:	ed9f 9a76 	vldr	s18, [pc, #472]	; bb258 <__kernel_rem_pio2f+0x2ac>
   bb080:	eddf 8a74 	vldr	s17, [pc, #464]	; bb254 <__kernel_rem_pio2f+0x2a8>
   bb084:	9805      	ldr	r0, [sp, #20]
   bb086:	9304      	str	r3, [sp, #16]
   bb088:	eb0a 040c 	add.w	r4, sl, ip
   bb08c:	ae46      	add	r6, sp, #280	; 0x118
   bb08e:	9500      	str	r5, [sp, #0]
   bb090:	ab5a      	add	r3, sp, #360	; 0x168
   bb092:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   bb096:	2d00      	cmp	r5, #0
   bb098:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   bb09c:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   bb0a0:	dd16      	ble.n	bb0d0 <__kernel_rem_pio2f+0x124>
   bb0a2:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   bb0a6:	463a      	mov	r2, r7
   bb0a8:	ee60 7a09 	vmul.f32	s15, s0, s18
   bb0ac:	eeb0 7a40 	vmov.f32	s14, s0
   bb0b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   bb0b4:	ed73 6a01 	vldmdb	r3!, {s13}
   bb0b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb0bc:	42b3      	cmp	r3, r6
   bb0be:	eea7 7ae8 	vfms.f32	s14, s15, s17
   bb0c2:	ee37 0aa6 	vadd.f32	s0, s15, s13
   bb0c6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   bb0ca:	eca2 7a01 	vstmia	r2!, {s14}
   bb0ce:	d1eb      	bne.n	bb0a8 <__kernel_rem_pio2f+0xfc>
   bb0d0:	9001      	str	r0, [sp, #4]
   bb0d2:	f000 ff03 	bl	bbedc <scalbnf>
   bb0d6:	eeb0 8a40 	vmov.f32	s16, s0
   bb0da:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   bb0de:	ee28 0a00 	vmul.f32	s0, s16, s0
   bb0e2:	f000 feb5 	bl	bbe50 <floorf>
   bb0e6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   bb0ea:	eea0 8a67 	vfms.f32	s16, s0, s15
   bb0ee:	9801      	ldr	r0, [sp, #4]
   bb0f0:	2800      	cmp	r0, #0
   bb0f2:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   bb0f6:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   bb0fa:	ee38 8a67 	vsub.f32	s16, s16, s15
   bb0fe:	dd79      	ble.n	bb1f4 <__kernel_rem_pio2f+0x248>
   bb100:	f105 3eff 	add.w	lr, r5, #4294967295
   bb104:	f1c0 0308 	rsb	r3, r0, #8
   bb108:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   bb10c:	fa41 fc03 	asr.w	ip, r1, r3
   bb110:	fa0c f303 	lsl.w	r3, ip, r3
   bb114:	1acb      	subs	r3, r1, r3
   bb116:	f1c0 0207 	rsb	r2, r0, #7
   bb11a:	ee19 1a90 	vmov	r1, s19
   bb11e:	fa43 f202 	asr.w	r2, r3, r2
   bb122:	4461      	add	r1, ip
   bb124:	2a00      	cmp	r2, #0
   bb126:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   bb12a:	ee09 1a90 	vmov	s19, r1
   bb12e:	dc69      	bgt.n	bb204 <__kernel_rem_pio2f+0x258>
   bb130:	eeb5 8a40 	vcmp.f32	s16, #0.0
   bb134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb138:	f040 80c1 	bne.w	bb2be <__kernel_rem_pio2f+0x312>
   bb13c:	9b00      	ldr	r3, [sp, #0]
   bb13e:	f105 3bff 	add.w	fp, r5, #4294967295
   bb142:	455b      	cmp	r3, fp
   bb144:	dc10      	bgt.n	bb168 <__kernel_rem_pio2f+0x1bc>
   bb146:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   bb14a:	3b01      	subs	r3, #1
   bb14c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   bb150:	2100      	movs	r1, #0
   bb152:	4694      	mov	ip, r2
   bb154:	f853 2904 	ldr.w	r2, [r3], #-4
   bb158:	454b      	cmp	r3, r9
   bb15a:	ea41 0102 	orr.w	r1, r1, r2
   bb15e:	d1f9      	bne.n	bb154 <__kernel_rem_pio2f+0x1a8>
   bb160:	4662      	mov	r2, ip
   bb162:	2900      	cmp	r1, #0
   bb164:	f040 80f3 	bne.w	bb34e <__kernel_rem_pio2f+0x3a2>
   bb168:	9b00      	ldr	r3, [sp, #0]
   bb16a:	3b01      	subs	r3, #1
   bb16c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   bb170:	2b00      	cmp	r3, #0
   bb172:	f040 80e8 	bne.w	bb346 <__kernel_rem_pio2f+0x39a>
   bb176:	9b04      	ldr	r3, [sp, #16]
   bb178:	f04f 0c01 	mov.w	ip, #1
   bb17c:	f853 2904 	ldr.w	r2, [r3], #-4
   bb180:	f10c 0c01 	add.w	ip, ip, #1
   bb184:	2a00      	cmp	r2, #0
   bb186:	d0f9      	beq.n	bb17c <__kernel_rem_pio2f+0x1d0>
   bb188:	1c6b      	adds	r3, r5, #1
   bb18a:	44ac      	add	ip, r5
   bb18c:	469e      	mov	lr, r3
   bb18e:	9a03      	ldr	r2, [sp, #12]
   bb190:	1951      	adds	r1, r2, r5
   bb192:	9a02      	ldr	r2, [sp, #8]
   bb194:	eb02 0b03 	add.w	fp, r2, r3
   bb198:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   bb19c:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   bb19e:	f10b 3bff 	add.w	fp, fp, #4294967295
   bb1a2:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   bb1a6:	ab1e      	add	r3, sp, #120	; 0x78
   bb1a8:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   bb1ac:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   bb1b0:	eddb 7a01 	vldr	s15, [fp, #4]
   bb1b4:	ed9f 7a26 	vldr	s14, [pc, #152]	; bb250 <__kernel_rem_pio2f+0x2a4>
   bb1b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb1bc:	f1b8 0f00 	cmp.w	r8, #0
   bb1c0:	f10b 0b04 	add.w	fp, fp, #4
   bb1c4:	edc1 7a00 	vstr	s15, [r1]
   bb1c8:	460a      	mov	r2, r1
   bb1ca:	f101 0104 	add.w	r1, r1, #4
   bb1ce:	db09      	blt.n	bb1e4 <__kernel_rem_pio2f+0x238>
   bb1d0:	4653      	mov	r3, sl
   bb1d2:	e001      	b.n	bb1d8 <__kernel_rem_pio2f+0x22c>
   bb1d4:	ed72 7a01 	vldmdb	r2!, {s15}
   bb1d8:	ecf3 6a01 	vldmia	r3!, {s13}
   bb1dc:	42a3      	cmp	r3, r4
   bb1de:	eea6 7aa7 	vfma.f32	s14, s13, s15
   bb1e2:	d1f7      	bne.n	bb1d4 <__kernel_rem_pio2f+0x228>
   bb1e4:	f10e 0e01 	add.w	lr, lr, #1
   bb1e8:	45e6      	cmp	lr, ip
   bb1ea:	eca5 7a01 	vstmia	r5!, {s14}
   bb1ee:	dddf      	ble.n	bb1b0 <__kernel_rem_pio2f+0x204>
   bb1f0:	4665      	mov	r5, ip
   bb1f2:	e74d      	b.n	bb090 <__kernel_rem_pio2f+0xe4>
   bb1f4:	f040 809d 	bne.w	bb332 <__kernel_rem_pio2f+0x386>
   bb1f8:	1e6b      	subs	r3, r5, #1
   bb1fa:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   bb1fe:	1212      	asrs	r2, r2, #8
   bb200:	2a00      	cmp	r2, #0
   bb202:	dd95      	ble.n	bb130 <__kernel_rem_pio2f+0x184>
   bb204:	ee19 3a90 	vmov	r3, s19
   bb208:	2d00      	cmp	r5, #0
   bb20a:	f103 0301 	add.w	r3, r3, #1
   bb20e:	ee09 3a90 	vmov	s19, r3
   bb212:	f340 8196 	ble.w	bb542 <__kernel_rem_pio2f+0x596>
   bb216:	6839      	ldr	r1, [r7, #0]
   bb218:	2900      	cmp	r1, #0
   bb21a:	f040 8080 	bne.w	bb31e <__kernel_rem_pio2f+0x372>
   bb21e:	2d01      	cmp	r5, #1
   bb220:	d026      	beq.n	bb270 <__kernel_rem_pio2f+0x2c4>
   bb222:	463b      	mov	r3, r7
   bb224:	f04f 0c01 	mov.w	ip, #1
   bb228:	f853 1f04 	ldr.w	r1, [r3, #4]!
   bb22c:	2900      	cmp	r1, #0
   bb22e:	d07a      	beq.n	bb326 <__kernel_rem_pio2f+0x37a>
   bb230:	f10c 0301 	add.w	r3, ip, #1
   bb234:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   bb238:	429d      	cmp	r5, r3
   bb23a:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   bb23e:	dd16      	ble.n	bb26e <__kernel_rem_pio2f+0x2c2>
   bb240:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   bb244:	44bb      	add	fp, r7
   bb246:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   bb24a:	e00a      	b.n	bb262 <__kernel_rem_pio2f+0x2b6>
   bb24c:	000be758 	.word	0x000be758
   bb250:	00000000 	.word	0x00000000
   bb254:	43800000 	.word	0x43800000
   bb258:	3b800000 	.word	0x3b800000
   bb25c:	3fc90000 	.word	0x3fc90000
   bb260:	6819      	ldr	r1, [r3, #0]
   bb262:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   bb266:	f843 1b04 	str.w	r1, [r3], #4
   bb26a:	455b      	cmp	r3, fp
   bb26c:	d1f8      	bne.n	bb260 <__kernel_rem_pio2f+0x2b4>
   bb26e:	2101      	movs	r1, #1
   bb270:	2800      	cmp	r0, #0
   bb272:	dd0c      	ble.n	bb28e <__kernel_rem_pio2f+0x2e2>
   bb274:	2801      	cmp	r0, #1
   bb276:	f000 8145 	beq.w	bb504 <__kernel_rem_pio2f+0x558>
   bb27a:	2802      	cmp	r0, #2
   bb27c:	d107      	bne.n	bb28e <__kernel_rem_pio2f+0x2e2>
   bb27e:	f105 3cff 	add.w	ip, r5, #4294967295
   bb282:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   bb286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   bb28a:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   bb28e:	2a02      	cmp	r2, #2
   bb290:	f47f af4e 	bne.w	bb130 <__kernel_rem_pio2f+0x184>
   bb294:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   bb298:	ee30 8a48 	vsub.f32	s16, s0, s16
   bb29c:	2900      	cmp	r1, #0
   bb29e:	f43f af47 	beq.w	bb130 <__kernel_rem_pio2f+0x184>
   bb2a2:	9209      	str	r2, [sp, #36]	; 0x24
   bb2a4:	9001      	str	r0, [sp, #4]
   bb2a6:	f000 fe19 	bl	bbedc <scalbnf>
   bb2aa:	ee38 8a40 	vsub.f32	s16, s16, s0
   bb2ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   bb2b0:	9801      	ldr	r0, [sp, #4]
   bb2b2:	eeb5 8a40 	vcmp.f32	s16, #0.0
   bb2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb2ba:	f43f af3f 	beq.w	bb13c <__kernel_rem_pio2f+0x190>
   bb2be:	9202      	str	r2, [sp, #8]
   bb2c0:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   bb2c4:	eeb0 0a48 	vmov.f32	s0, s16
   bb2c8:	1a98      	subs	r0, r3, r2
   bb2ca:	9501      	str	r5, [sp, #4]
   bb2cc:	9d00      	ldr	r5, [sp, #0]
   bb2ce:	f000 fe05 	bl	bbedc <scalbnf>
   bb2d2:	ed1f 7a20 	vldr	s14, [pc, #-128]	; bb254 <__kernel_rem_pio2f+0x2a8>
   bb2d6:	eeb4 0ac7 	vcmpe.f32	s0, s14
   bb2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb2de:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   bb2e2:	f2c0 8156 	blt.w	bb592 <__kernel_rem_pio2f+0x5e6>
   bb2e6:	ed5f 7a24 	vldr	s15, [pc, #-144]	; bb258 <__kernel_rem_pio2f+0x2ac>
   bb2ea:	9905      	ldr	r1, [sp, #20]
   bb2ec:	ee60 7a27 	vmul.f32	s15, s0, s15
   bb2f0:	3108      	adds	r1, #8
   bb2f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   bb2f6:	9105      	str	r1, [sp, #20]
   bb2f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb2fc:	f103 0b01 	add.w	fp, r3, #1
   bb300:	eea7 0ac7 	vfms.f32	s0, s15, s14
   bb304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   bb308:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   bb30c:	ee10 1a10 	vmov	r1, s0
   bb310:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   bb314:	ee17 3a90 	vmov	r3, s15
   bb318:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   bb31c:	e02e      	b.n	bb37c <__kernel_rem_pio2f+0x3d0>
   bb31e:	2301      	movs	r3, #1
   bb320:	f04f 0c00 	mov.w	ip, #0
   bb324:	e786      	b.n	bb234 <__kernel_rem_pio2f+0x288>
   bb326:	f10c 0c01 	add.w	ip, ip, #1
   bb32a:	45ac      	cmp	ip, r5
   bb32c:	f47f af7c 	bne.w	bb228 <__kernel_rem_pio2f+0x27c>
   bb330:	e79e      	b.n	bb270 <__kernel_rem_pio2f+0x2c4>
   bb332:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   bb336:	eeb4 8ae7 	vcmpe.f32	s16, s15
   bb33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb33e:	f280 80ef 	bge.w	bb520 <__kernel_rem_pio2f+0x574>
   bb342:	2200      	movs	r2, #0
   bb344:	e6f4      	b.n	bb130 <__kernel_rem_pio2f+0x184>
   bb346:	1c6b      	adds	r3, r5, #1
   bb348:	469e      	mov	lr, r3
   bb34a:	469c      	mov	ip, r3
   bb34c:	e71f      	b.n	bb18e <__kernel_rem_pio2f+0x1e2>
   bb34e:	9905      	ldr	r1, [sp, #20]
   bb350:	f1a1 0008 	sub.w	r0, r1, #8
   bb354:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   bb358:	9005      	str	r0, [sp, #20]
   bb35a:	462b      	mov	r3, r5
   bb35c:	9d00      	ldr	r5, [sp, #0]
   bb35e:	b969      	cbnz	r1, bb37c <__kernel_rem_pio2f+0x3d0>
   bb360:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   bb364:	3b02      	subs	r3, #2
   bb366:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   bb36a:	4601      	mov	r1, r0
   bb36c:	f853 0904 	ldr.w	r0, [r3], #-4
   bb370:	f10b 3bff 	add.w	fp, fp, #4294967295
   bb374:	3908      	subs	r1, #8
   bb376:	2800      	cmp	r0, #0
   bb378:	d0f8      	beq.n	bb36c <__kernel_rem_pio2f+0x3c0>
   bb37a:	9105      	str	r1, [sp, #20]
   bb37c:	9805      	ldr	r0, [sp, #20]
   bb37e:	9200      	str	r2, [sp, #0]
   bb380:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   bb384:	f000 fdaa 	bl	bbedc <scalbnf>
   bb388:	f1bb 0f00 	cmp.w	fp, #0
   bb38c:	9a00      	ldr	r2, [sp, #0]
   bb38e:	f2c0 8125 	blt.w	bb5dc <__kernel_rem_pio2f+0x630>
   bb392:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   bb396:	ab46      	add	r3, sp, #280	; 0x118
   bb398:	eb03 060e 	add.w	r6, r3, lr
   bb39c:	f10e 0c04 	add.w	ip, lr, #4
   bb3a0:	ed1f 7a53 	vldr	s14, [pc, #-332]	; bb258 <__kernel_rem_pio2f+0x2ac>
   bb3a4:	eb07 030c 	add.w	r3, r7, ip
   bb3a8:	1d31      	adds	r1, r6, #4
   bb3aa:	ed73 7a01 	vldmdb	r3!, {s15}
   bb3ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb3b2:	42bb      	cmp	r3, r7
   bb3b4:	ee67 7a80 	vmul.f32	s15, s15, s0
   bb3b8:	ee20 0a07 	vmul.f32	s0, s0, s14
   bb3bc:	ed61 7a01 	vstmdb	r1!, {s15}
   bb3c0:	d1f3      	bne.n	bb3aa <__kernel_rem_pio2f+0x3fe>
   bb3c2:	2d00      	cmp	r5, #0
   bb3c4:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; bb25c <__kernel_rem_pio2f+0x2b0>
   bb3c8:	f04f 0400 	mov.w	r4, #0
   bb3cc:	db20      	blt.n	bb410 <__kernel_rem_pio2f+0x464>
   bb3ce:	4892      	ldr	r0, [pc, #584]	; (bb618 <__kernel_rem_pio2f+0x66c>)
   bb3d0:	eddf 7a92 	vldr	s15, [pc, #584]	; bb61c <__kernel_rem_pio2f+0x670>
   bb3d4:	eeb0 7a46 	vmov.f32	s14, s12
   bb3d8:	4631      	mov	r1, r6
   bb3da:	2300      	movs	r3, #0
   bb3dc:	e003      	b.n	bb3e6 <__kernel_rem_pio2f+0x43a>
   bb3de:	429c      	cmp	r4, r3
   bb3e0:	db08      	blt.n	bb3f4 <__kernel_rem_pio2f+0x448>
   bb3e2:	ecb0 7a01 	vldmia	r0!, {s14}
   bb3e6:	ecf1 6a01 	vldmia	r1!, {s13}
   bb3ea:	3301      	adds	r3, #1
   bb3ec:	429d      	cmp	r5, r3
   bb3ee:	eee6 7a87 	vfma.f32	s15, s13, s14
   bb3f2:	daf4      	bge.n	bb3de <__kernel_rem_pio2f+0x432>
   bb3f4:	ab5a      	add	r3, sp, #360	; 0x168
   bb3f6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   bb3fa:	45a3      	cmp	fp, r4
   bb3fc:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   bb400:	f1a6 0604 	sub.w	r6, r6, #4
   bb404:	f104 0301 	add.w	r3, r4, #1
   bb408:	d005      	beq.n	bb416 <__kernel_rem_pio2f+0x46a>
   bb40a:	2d00      	cmp	r5, #0
   bb40c:	461c      	mov	r4, r3
   bb40e:	dade      	bge.n	bb3ce <__kernel_rem_pio2f+0x422>
   bb410:	eddf 7a82 	vldr	s15, [pc, #520]	; bb61c <__kernel_rem_pio2f+0x670>
   bb414:	e7ee      	b.n	bb3f4 <__kernel_rem_pio2f+0x448>
   bb416:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   bb418:	2902      	cmp	r1, #2
   bb41a:	dc1c      	bgt.n	bb456 <__kernel_rem_pio2f+0x4aa>
   bb41c:	2900      	cmp	r1, #0
   bb41e:	f300 8092 	bgt.w	bb546 <__kernel_rem_pio2f+0x59a>
   bb422:	d10f      	bne.n	bb444 <__kernel_rem_pio2f+0x498>
   bb424:	ab32      	add	r3, sp, #200	; 0xc8
   bb426:	eddf 7a7d 	vldr	s15, [pc, #500]	; bb61c <__kernel_rem_pio2f+0x670>
   bb42a:	449c      	add	ip, r3
   bb42c:	ed3c 7a01 	vldmdb	ip!, {s14}
   bb430:	4563      	cmp	r3, ip
   bb432:	ee77 7a87 	vadd.f32	s15, s15, s14
   bb436:	d1f9      	bne.n	bb42c <__kernel_rem_pio2f+0x480>
   bb438:	b10a      	cbz	r2, bb43e <__kernel_rem_pio2f+0x492>
   bb43a:	eef1 7a67 	vneg.f32	s15, s15
   bb43e:	9b06      	ldr	r3, [sp, #24]
   bb440:	edc3 7a00 	vstr	s15, [r3]
   bb444:	ee19 3a90 	vmov	r3, s19
   bb448:	f003 0007 	and.w	r0, r3, #7
   bb44c:	b05b      	add	sp, #364	; 0x16c
   bb44e:	ecbd 8b04 	vpop	{d8-d9}
   bb452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb456:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   bb458:	2b03      	cmp	r3, #3
   bb45a:	d1f3      	bne.n	bb444 <__kernel_rem_pio2f+0x498>
   bb45c:	f1bb 0f00 	cmp.w	fp, #0
   bb460:	f000 80d1 	beq.w	bb606 <__kernel_rem_pio2f+0x65a>
   bb464:	ab5a      	add	r3, sp, #360	; 0x168
   bb466:	4473      	add	r3, lr
   bb468:	a932      	add	r1, sp, #200	; 0xc8
   bb46a:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   bb46e:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   bb472:	ed73 7a01 	vldmdb	r3!, {s15}
   bb476:	eef0 6a47 	vmov.f32	s13, s14
   bb47a:	ee37 7a27 	vadd.f32	s14, s14, s15
   bb47e:	4299      	cmp	r1, r3
   bb480:	ee77 7ac7 	vsub.f32	s15, s15, s14
   bb484:	ed83 7a00 	vstr	s14, [r3]
   bb488:	ee77 7aa6 	vadd.f32	s15, s15, s13
   bb48c:	edc3 7a01 	vstr	s15, [r3, #4]
   bb490:	d1ef      	bne.n	bb472 <__kernel_rem_pio2f+0x4c6>
   bb492:	f1bb 0f01 	cmp.w	fp, #1
   bb496:	f340 80b6 	ble.w	bb606 <__kernel_rem_pio2f+0x65a>
   bb49a:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   bb49e:	ab5a      	add	r3, sp, #360	; 0x168
   bb4a0:	f10b 3bff 	add.w	fp, fp, #4294967295
   bb4a4:	449e      	add	lr, r3
   bb4a6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   bb4aa:	f10b 0304 	add.w	r3, fp, #4
   bb4ae:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   bb4b2:	440b      	add	r3, r1
   bb4b4:	a833      	add	r0, sp, #204	; 0xcc
   bb4b6:	ed73 7a01 	vldmdb	r3!, {s15}
   bb4ba:	eef0 6a47 	vmov.f32	s13, s14
   bb4be:	ee37 7a27 	vadd.f32	s14, s14, s15
   bb4c2:	4298      	cmp	r0, r3
   bb4c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   bb4c8:	ed83 7a00 	vstr	s14, [r3]
   bb4cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
   bb4d0:	edc3 7a01 	vstr	s15, [r3, #4]
   bb4d4:	d1ef      	bne.n	bb4b6 <__kernel_rem_pio2f+0x50a>
   bb4d6:	f10b 0b08 	add.w	fp, fp, #8
   bb4da:	eddf 7a50 	vldr	s15, [pc, #320]	; bb61c <__kernel_rem_pio2f+0x670>
   bb4de:	eb01 030b 	add.w	r3, r1, fp
   bb4e2:	3108      	adds	r1, #8
   bb4e4:	ed33 7a01 	vldmdb	r3!, {s14}
   bb4e8:	4299      	cmp	r1, r3
   bb4ea:	ee77 7a87 	vadd.f32	s15, s15, s14
   bb4ee:	d1f9      	bne.n	bb4e4 <__kernel_rem_pio2f+0x538>
   bb4f0:	2a00      	cmp	r2, #0
   bb4f2:	d156      	bne.n	bb5a2 <__kernel_rem_pio2f+0x5f6>
   bb4f4:	9906      	ldr	r1, [sp, #24]
   bb4f6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   bb4f8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   bb4fa:	600a      	str	r2, [r1, #0]
   bb4fc:	604b      	str	r3, [r1, #4]
   bb4fe:	edc1 7a02 	vstr	s15, [r1, #8]
   bb502:	e79f      	b.n	bb444 <__kernel_rem_pio2f+0x498>
   bb504:	f105 3cff 	add.w	ip, r5, #4294967295
   bb508:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   bb50c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   bb510:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   bb514:	e6bb      	b.n	bb28e <__kernel_rem_pio2f+0x2e2>
   bb516:	2308      	movs	r3, #8
   bb518:	9307      	str	r3, [sp, #28]
   bb51a:	2300      	movs	r3, #0
   bb51c:	9302      	str	r3, [sp, #8]
   bb51e:	e561      	b.n	bafe4 <__kernel_rem_pio2f+0x38>
   bb520:	ee19 3a90 	vmov	r3, s19
   bb524:	2d00      	cmp	r5, #0
   bb526:	f103 0301 	add.w	r3, r3, #1
   bb52a:	ee09 3a90 	vmov	s19, r3
   bb52e:	bfc8      	it	gt
   bb530:	2202      	movgt	r2, #2
   bb532:	f73f ae70 	bgt.w	bb216 <__kernel_rem_pio2f+0x26a>
   bb536:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   bb53a:	ee37 8ac8 	vsub.f32	s16, s15, s16
   bb53e:	2202      	movs	r2, #2
   bb540:	e5f6      	b.n	bb130 <__kernel_rem_pio2f+0x184>
   bb542:	2100      	movs	r1, #0
   bb544:	e694      	b.n	bb270 <__kernel_rem_pio2f+0x2c4>
   bb546:	a932      	add	r1, sp, #200	; 0xc8
   bb548:	eddf 7a34 	vldr	s15, [pc, #208]	; bb61c <__kernel_rem_pio2f+0x670>
   bb54c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   bb550:	ed33 7a01 	vldmdb	r3!, {s14}
   bb554:	4299      	cmp	r1, r3
   bb556:	ee77 7a87 	vadd.f32	s15, s15, s14
   bb55a:	d1f9      	bne.n	bb550 <__kernel_rem_pio2f+0x5a4>
   bb55c:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   bb560:	bb8a      	cbnz	r2, bb5c6 <__kernel_rem_pio2f+0x61a>
   bb562:	9b06      	ldr	r3, [sp, #24]
   bb564:	f1bb 0f00 	cmp.w	fp, #0
   bb568:	edc3 7a00 	vstr	s15, [r3]
   bb56c:	ee77 7a67 	vsub.f32	s15, s14, s15
   bb570:	dd0b      	ble.n	bb58a <__kernel_rem_pio2f+0x5de>
   bb572:	a933      	add	r1, sp, #204	; 0xcc
   bb574:	2301      	movs	r3, #1
   bb576:	ecb1 7a01 	vldmia	r1!, {s14}
   bb57a:	3301      	adds	r3, #1
   bb57c:	459b      	cmp	fp, r3
   bb57e:	ee77 7a87 	vadd.f32	s15, s15, s14
   bb582:	daf8      	bge.n	bb576 <__kernel_rem_pio2f+0x5ca>
   bb584:	b10a      	cbz	r2, bb58a <__kernel_rem_pio2f+0x5de>
   bb586:	eef1 7a67 	vneg.f32	s15, s15
   bb58a:	9b06      	ldr	r3, [sp, #24]
   bb58c:	edc3 7a01 	vstr	s15, [r3, #4]
   bb590:	e758      	b.n	bb444 <__kernel_rem_pio2f+0x498>
   bb592:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   bb596:	469b      	mov	fp, r3
   bb598:	ee10 1a10 	vmov	r1, s0
   bb59c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   bb5a0:	e6ec      	b.n	bb37c <__kernel_rem_pio2f+0x3d0>
   bb5a2:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   bb5a6:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   bb5aa:	9b06      	ldr	r3, [sp, #24]
   bb5ac:	eef1 6a66 	vneg.f32	s13, s13
   bb5b0:	eeb1 7a47 	vneg.f32	s14, s14
   bb5b4:	eef1 7a67 	vneg.f32	s15, s15
   bb5b8:	edc3 6a00 	vstr	s13, [r3]
   bb5bc:	ed83 7a01 	vstr	s14, [r3, #4]
   bb5c0:	edc3 7a02 	vstr	s15, [r3, #8]
   bb5c4:	e73e      	b.n	bb444 <__kernel_rem_pio2f+0x498>
   bb5c6:	9b06      	ldr	r3, [sp, #24]
   bb5c8:	eef1 6a67 	vneg.f32	s13, s15
   bb5cc:	f1bb 0f00 	cmp.w	fp, #0
   bb5d0:	ee77 7a67 	vsub.f32	s15, s14, s15
   bb5d4:	edc3 6a00 	vstr	s13, [r3]
   bb5d8:	dccb      	bgt.n	bb572 <__kernel_rem_pio2f+0x5c6>
   bb5da:	e7d4      	b.n	bb586 <__kernel_rem_pio2f+0x5da>
   bb5dc:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   bb5de:	2b02      	cmp	r3, #2
   bb5e0:	dc0d      	bgt.n	bb5fe <__kernel_rem_pio2f+0x652>
   bb5e2:	2b00      	cmp	r3, #0
   bb5e4:	dc14      	bgt.n	bb610 <__kernel_rem_pio2f+0x664>
   bb5e6:	f47f af2d 	bne.w	bb444 <__kernel_rem_pio2f+0x498>
   bb5ea:	eddf 7a0c 	vldr	s15, [pc, #48]	; bb61c <__kernel_rem_pio2f+0x670>
   bb5ee:	2a00      	cmp	r2, #0
   bb5f0:	f43f af25 	beq.w	bb43e <__kernel_rem_pio2f+0x492>
   bb5f4:	e721      	b.n	bb43a <__kernel_rem_pio2f+0x48e>
   bb5f6:	9b03      	ldr	r3, [sp, #12]
   bb5f8:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   bb5fc:	e537      	b.n	bb06e <__kernel_rem_pio2f+0xc2>
   bb5fe:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   bb600:	2b03      	cmp	r3, #3
   bb602:	f47f af1f 	bne.w	bb444 <__kernel_rem_pio2f+0x498>
   bb606:	eddf 7a05 	vldr	s15, [pc, #20]	; bb61c <__kernel_rem_pio2f+0x670>
   bb60a:	2a00      	cmp	r2, #0
   bb60c:	d1c9      	bne.n	bb5a2 <__kernel_rem_pio2f+0x5f6>
   bb60e:	e771      	b.n	bb4f4 <__kernel_rem_pio2f+0x548>
   bb610:	eddf 7a02 	vldr	s15, [pc, #8]	; bb61c <__kernel_rem_pio2f+0x670>
   bb614:	e7a2      	b.n	bb55c <__kernel_rem_pio2f+0x5b0>
   bb616:	bf00      	nop
   bb618:	000be730 	.word	0x000be730
   bb61c:	00000000 	.word	0x00000000

000bb620 <__kernel_sinf>:
   bb620:	ee10 3a10 	vmov	r3, s0
   bb624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   bb628:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   bb62c:	da04      	bge.n	bb638 <__kernel_sinf+0x18>
   bb62e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   bb632:	ee17 3a90 	vmov	r3, s15
   bb636:	b35b      	cbz	r3, bb690 <__kernel_sinf+0x70>
   bb638:	ee60 7a00 	vmul.f32	s15, s0, s0
   bb63c:	ed9f 7a15 	vldr	s14, [pc, #84]	; bb694 <__kernel_sinf+0x74>
   bb640:	eddf 5a15 	vldr	s11, [pc, #84]	; bb698 <__kernel_sinf+0x78>
   bb644:	ed9f 6a15 	vldr	s12, [pc, #84]	; bb69c <__kernel_sinf+0x7c>
   bb648:	eddf 6a15 	vldr	s13, [pc, #84]	; bb6a0 <__kernel_sinf+0x80>
   bb64c:	eee7 5a87 	vfma.f32	s11, s15, s14
   bb650:	ed9f 7a14 	vldr	s14, [pc, #80]	; bb6a4 <__kernel_sinf+0x84>
   bb654:	eea5 6aa7 	vfma.f32	s12, s11, s15
   bb658:	ee20 5a27 	vmul.f32	s10, s0, s15
   bb65c:	eee6 6a27 	vfma.f32	s13, s12, s15
   bb660:	eea6 7aa7 	vfma.f32	s14, s13, s15
   bb664:	b930      	cbnz	r0, bb674 <__kernel_sinf+0x54>
   bb666:	eddf 6a10 	vldr	s13, [pc, #64]	; bb6a8 <__kernel_sinf+0x88>
   bb66a:	eee7 6a87 	vfma.f32	s13, s15, s14
   bb66e:	eea6 0a85 	vfma.f32	s0, s13, s10
   bb672:	4770      	bx	lr
   bb674:	ee27 7a45 	vnmul.f32	s14, s14, s10
   bb678:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   bb67c:	eea0 7aa6 	vfma.f32	s14, s1, s13
   bb680:	eddf 6a0a 	vldr	s13, [pc, #40]	; bb6ac <__kernel_sinf+0x8c>
   bb684:	eed7 0a27 	vfnms.f32	s1, s14, s15
   bb688:	eee5 0a26 	vfma.f32	s1, s10, s13
   bb68c:	ee30 0a60 	vsub.f32	s0, s0, s1
   bb690:	4770      	bx	lr
   bb692:	bf00      	nop
   bb694:	2f2ec9d3 	.word	0x2f2ec9d3
   bb698:	b2d72f34 	.word	0xb2d72f34
   bb69c:	3638ef1b 	.word	0x3638ef1b
   bb6a0:	b9500d01 	.word	0xb9500d01
   bb6a4:	3c088889 	.word	0x3c088889
   bb6a8:	be2aaaab 	.word	0xbe2aaaab
   bb6ac:	3e2aaaab 	.word	0x3e2aaaab

000bb6b0 <atan>:
   bb6b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb6b4:	ec55 4b10 	vmov	r4, r5, d0
   bb6b8:	4bc3      	ldr	r3, [pc, #780]	; (bb9c8 <atan+0x318>)
   bb6ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   bb6be:	429e      	cmp	r6, r3
   bb6c0:	46aa      	mov	sl, r5
   bb6c2:	dd17      	ble.n	bb6f4 <atan+0x44>
   bb6c4:	4bc1      	ldr	r3, [pc, #772]	; (bb9cc <atan+0x31c>)
   bb6c6:	429e      	cmp	r6, r3
   bb6c8:	dc0a      	bgt.n	bb6e0 <atan+0x30>
   bb6ca:	d007      	beq.n	bb6dc <atan+0x2c>
   bb6cc:	f1ba 0f00 	cmp.w	sl, #0
   bb6d0:	f340 80cb 	ble.w	bb86a <atan+0x1ba>
   bb6d4:	ed9f 0ba0 	vldr	d0, [pc, #640]	; bb958 <atan+0x2a8>
   bb6d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb6dc:	2c00      	cmp	r4, #0
   bb6de:	d0f5      	beq.n	bb6cc <atan+0x1c>
   bb6e0:	4622      	mov	r2, r4
   bb6e2:	462b      	mov	r3, r5
   bb6e4:	4620      	mov	r0, r4
   bb6e6:	4629      	mov	r1, r5
   bb6e8:	f000 fc70 	bl	bbfcc <__adddf3>
   bb6ec:	ec41 0b10 	vmov	d0, r0, r1
   bb6f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb6f4:	4bb6      	ldr	r3, [pc, #728]	; (bb9d0 <atan+0x320>)
   bb6f6:	429e      	cmp	r6, r3
   bb6f8:	f300 80bb 	bgt.w	bb872 <atan+0x1c2>
   bb6fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   bb700:	429e      	cmp	r6, r3
   bb702:	f340 80a0 	ble.w	bb846 <atan+0x196>
   bb706:	f04f 3bff 	mov.w	fp, #4294967295
   bb70a:	4622      	mov	r2, r4
   bb70c:	462b      	mov	r3, r5
   bb70e:	4620      	mov	r0, r4
   bb710:	4629      	mov	r1, r5
   bb712:	f000 fe11 	bl	bc338 <__aeabi_dmul>
   bb716:	4602      	mov	r2, r0
   bb718:	460b      	mov	r3, r1
   bb71a:	4680      	mov	r8, r0
   bb71c:	4689      	mov	r9, r1
   bb71e:	f000 fe0b 	bl	bc338 <__aeabi_dmul>
   bb722:	a38f      	add	r3, pc, #572	; (adr r3, bb960 <atan+0x2b0>)
   bb724:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb728:	4606      	mov	r6, r0
   bb72a:	460f      	mov	r7, r1
   bb72c:	f000 fe04 	bl	bc338 <__aeabi_dmul>
   bb730:	a38d      	add	r3, pc, #564	; (adr r3, bb968 <atan+0x2b8>)
   bb732:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb736:	f000 fc49 	bl	bbfcc <__adddf3>
   bb73a:	4632      	mov	r2, r6
   bb73c:	463b      	mov	r3, r7
   bb73e:	f000 fdfb 	bl	bc338 <__aeabi_dmul>
   bb742:	a38b      	add	r3, pc, #556	; (adr r3, bb970 <atan+0x2c0>)
   bb744:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb748:	f000 fc40 	bl	bbfcc <__adddf3>
   bb74c:	4632      	mov	r2, r6
   bb74e:	463b      	mov	r3, r7
   bb750:	f000 fdf2 	bl	bc338 <__aeabi_dmul>
   bb754:	a388      	add	r3, pc, #544	; (adr r3, bb978 <atan+0x2c8>)
   bb756:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb75a:	f000 fc37 	bl	bbfcc <__adddf3>
   bb75e:	4632      	mov	r2, r6
   bb760:	463b      	mov	r3, r7
   bb762:	f000 fde9 	bl	bc338 <__aeabi_dmul>
   bb766:	a386      	add	r3, pc, #536	; (adr r3, bb980 <atan+0x2d0>)
   bb768:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb76c:	f000 fc2e 	bl	bbfcc <__adddf3>
   bb770:	4632      	mov	r2, r6
   bb772:	463b      	mov	r3, r7
   bb774:	f000 fde0 	bl	bc338 <__aeabi_dmul>
   bb778:	a383      	add	r3, pc, #524	; (adr r3, bb988 <atan+0x2d8>)
   bb77a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb77e:	f000 fc25 	bl	bbfcc <__adddf3>
   bb782:	4642      	mov	r2, r8
   bb784:	464b      	mov	r3, r9
   bb786:	f000 fdd7 	bl	bc338 <__aeabi_dmul>
   bb78a:	a381      	add	r3, pc, #516	; (adr r3, bb990 <atan+0x2e0>)
   bb78c:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb790:	4680      	mov	r8, r0
   bb792:	4689      	mov	r9, r1
   bb794:	4630      	mov	r0, r6
   bb796:	4639      	mov	r1, r7
   bb798:	f000 fdce 	bl	bc338 <__aeabi_dmul>
   bb79c:	a37e      	add	r3, pc, #504	; (adr r3, bb998 <atan+0x2e8>)
   bb79e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb7a2:	f000 fc11 	bl	bbfc8 <__aeabi_dsub>
   bb7a6:	4632      	mov	r2, r6
   bb7a8:	463b      	mov	r3, r7
   bb7aa:	f000 fdc5 	bl	bc338 <__aeabi_dmul>
   bb7ae:	a37c      	add	r3, pc, #496	; (adr r3, bb9a0 <atan+0x2f0>)
   bb7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb7b4:	f000 fc08 	bl	bbfc8 <__aeabi_dsub>
   bb7b8:	4632      	mov	r2, r6
   bb7ba:	463b      	mov	r3, r7
   bb7bc:	f000 fdbc 	bl	bc338 <__aeabi_dmul>
   bb7c0:	a379      	add	r3, pc, #484	; (adr r3, bb9a8 <atan+0x2f8>)
   bb7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb7c6:	f000 fbff 	bl	bbfc8 <__aeabi_dsub>
   bb7ca:	4632      	mov	r2, r6
   bb7cc:	463b      	mov	r3, r7
   bb7ce:	f000 fdb3 	bl	bc338 <__aeabi_dmul>
   bb7d2:	a377      	add	r3, pc, #476	; (adr r3, bb9b0 <atan+0x300>)
   bb7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb7d8:	f000 fbf6 	bl	bbfc8 <__aeabi_dsub>
   bb7dc:	4632      	mov	r2, r6
   bb7de:	463b      	mov	r3, r7
   bb7e0:	f000 fdaa 	bl	bc338 <__aeabi_dmul>
   bb7e4:	f1bb 3fff 	cmp.w	fp, #4294967295
   bb7e8:	4602      	mov	r2, r0
   bb7ea:	460b      	mov	r3, r1
   bb7ec:	4640      	mov	r0, r8
   bb7ee:	4649      	mov	r1, r9
   bb7f0:	d062      	beq.n	bb8b8 <atan+0x208>
   bb7f2:	f000 fbeb 	bl	bbfcc <__adddf3>
   bb7f6:	4e77      	ldr	r6, [pc, #476]	; (bb9d4 <atan+0x324>)
   bb7f8:	4622      	mov	r2, r4
   bb7fa:	462b      	mov	r3, r5
   bb7fc:	f000 fd9c 	bl	bc338 <__aeabi_dmul>
   bb800:	4b75      	ldr	r3, [pc, #468]	; (bb9d8 <atan+0x328>)
   bb802:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   bb806:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   bb80a:	449b      	add	fp, r3
   bb80c:	e9db 2300 	ldrd	r2, r3, [fp]
   bb810:	f000 fbda 	bl	bbfc8 <__aeabi_dsub>
   bb814:	4622      	mov	r2, r4
   bb816:	462b      	mov	r3, r5
   bb818:	f000 fbd6 	bl	bbfc8 <__aeabi_dsub>
   bb81c:	4602      	mov	r2, r0
   bb81e:	460b      	mov	r3, r1
   bb820:	e9d6 0100 	ldrd	r0, r1, [r6]
   bb824:	f000 fbd0 	bl	bbfc8 <__aeabi_dsub>
   bb828:	f1ba 0f00 	cmp.w	sl, #0
   bb82c:	ec41 0b10 	vmov	d0, r0, r1
   bb830:	f6bf af5e 	bge.w	bb6f0 <atan+0x40>
   bb834:	ee10 1a90 	vmov	r1, s1
   bb838:	4602      	mov	r2, r0
   bb83a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb83e:	ec43 2b10 	vmov	d0, r2, r3
   bb842:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb846:	a35c      	add	r3, pc, #368	; (adr r3, bb9b8 <atan+0x308>)
   bb848:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb84c:	ee10 0a10 	vmov	r0, s0
   bb850:	4629      	mov	r1, r5
   bb852:	f000 fbbb 	bl	bbfcc <__adddf3>
   bb856:	4b61      	ldr	r3, [pc, #388]	; (bb9dc <atan+0x32c>)
   bb858:	2200      	movs	r2, #0
   bb85a:	f000 fffd 	bl	bc858 <__aeabi_dcmpgt>
   bb85e:	2800      	cmp	r0, #0
   bb860:	f43f af51 	beq.w	bb706 <atan+0x56>
   bb864:	ec45 4b10 	vmov	d0, r4, r5
   bb868:	e742      	b.n	bb6f0 <atan+0x40>
   bb86a:	ed9f 0b55 	vldr	d0, [pc, #340]	; bb9c0 <atan+0x310>
   bb86e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb872:	f000 f8bd 	bl	bb9f0 <fabs>
   bb876:	4b5a      	ldr	r3, [pc, #360]	; (bb9e0 <atan+0x330>)
   bb878:	429e      	cmp	r6, r3
   bb87a:	ec55 4b10 	vmov	r4, r5, d0
   bb87e:	dc2b      	bgt.n	bb8d8 <atan+0x228>
   bb880:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   bb884:	429e      	cmp	r6, r3
   bb886:	dc56      	bgt.n	bb936 <atan+0x286>
   bb888:	ee10 2a10 	vmov	r2, s0
   bb88c:	462b      	mov	r3, r5
   bb88e:	ee10 0a10 	vmov	r0, s0
   bb892:	4629      	mov	r1, r5
   bb894:	f000 fb9a 	bl	bbfcc <__adddf3>
   bb898:	4b50      	ldr	r3, [pc, #320]	; (bb9dc <atan+0x32c>)
   bb89a:	2200      	movs	r2, #0
   bb89c:	f000 fb94 	bl	bbfc8 <__aeabi_dsub>
   bb8a0:	4602      	mov	r2, r0
   bb8a2:	460b      	mov	r3, r1
   bb8a4:	4620      	mov	r0, r4
   bb8a6:	4629      	mov	r1, r5
   bb8a8:	4614      	mov	r4, r2
   bb8aa:	461d      	mov	r5, r3
   bb8ac:	f04f 0b00 	mov.w	fp, #0
   bb8b0:	2200      	movs	r2, #0
   bb8b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bb8b6:	e027      	b.n	bb908 <atan+0x258>
   bb8b8:	f000 fb88 	bl	bbfcc <__adddf3>
   bb8bc:	4622      	mov	r2, r4
   bb8be:	462b      	mov	r3, r5
   bb8c0:	f000 fd3a 	bl	bc338 <__aeabi_dmul>
   bb8c4:	4602      	mov	r2, r0
   bb8c6:	460b      	mov	r3, r1
   bb8c8:	4620      	mov	r0, r4
   bb8ca:	4629      	mov	r1, r5
   bb8cc:	f000 fb7c 	bl	bbfc8 <__aeabi_dsub>
   bb8d0:	ec41 0b10 	vmov	d0, r0, r1
   bb8d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb8d8:	4b42      	ldr	r3, [pc, #264]	; (bb9e4 <atan+0x334>)
   bb8da:	429e      	cmp	r6, r3
   bb8dc:	da1f      	bge.n	bb91e <atan+0x26e>
   bb8de:	4b42      	ldr	r3, [pc, #264]	; (bb9e8 <atan+0x338>)
   bb8e0:	2200      	movs	r2, #0
   bb8e2:	4629      	mov	r1, r5
   bb8e4:	ee10 0a10 	vmov	r0, s0
   bb8e8:	f000 fb6e 	bl	bbfc8 <__aeabi_dsub>
   bb8ec:	4602      	mov	r2, r0
   bb8ee:	460b      	mov	r3, r1
   bb8f0:	4620      	mov	r0, r4
   bb8f2:	4629      	mov	r1, r5
   bb8f4:	4614      	mov	r4, r2
   bb8f6:	461d      	mov	r5, r3
   bb8f8:	2200      	movs	r2, #0
   bb8fa:	4b3b      	ldr	r3, [pc, #236]	; (bb9e8 <atan+0x338>)
   bb8fc:	f04f 0b02 	mov.w	fp, #2
   bb900:	f000 fd1a 	bl	bc338 <__aeabi_dmul>
   bb904:	4b35      	ldr	r3, [pc, #212]	; (bb9dc <atan+0x32c>)
   bb906:	2200      	movs	r2, #0
   bb908:	f000 fb60 	bl	bbfcc <__adddf3>
   bb90c:	4602      	mov	r2, r0
   bb90e:	460b      	mov	r3, r1
   bb910:	4620      	mov	r0, r4
   bb912:	4629      	mov	r1, r5
   bb914:	f000 fe3a 	bl	bc58c <__aeabi_ddiv>
   bb918:	4604      	mov	r4, r0
   bb91a:	460d      	mov	r5, r1
   bb91c:	e6f5      	b.n	bb70a <atan+0x5a>
   bb91e:	462b      	mov	r3, r5
   bb920:	4932      	ldr	r1, [pc, #200]	; (bb9ec <atan+0x33c>)
   bb922:	ee10 2a10 	vmov	r2, s0
   bb926:	2000      	movs	r0, #0
   bb928:	f000 fe30 	bl	bc58c <__aeabi_ddiv>
   bb92c:	f04f 0b03 	mov.w	fp, #3
   bb930:	4604      	mov	r4, r0
   bb932:	460d      	mov	r5, r1
   bb934:	e6e9      	b.n	bb70a <atan+0x5a>
   bb936:	4b29      	ldr	r3, [pc, #164]	; (bb9dc <atan+0x32c>)
   bb938:	2200      	movs	r2, #0
   bb93a:	4629      	mov	r1, r5
   bb93c:	ee10 0a10 	vmov	r0, s0
   bb940:	f000 fb42 	bl	bbfc8 <__aeabi_dsub>
   bb944:	4602      	mov	r2, r0
   bb946:	460b      	mov	r3, r1
   bb948:	4620      	mov	r0, r4
   bb94a:	4629      	mov	r1, r5
   bb94c:	f04f 0b01 	mov.w	fp, #1
   bb950:	4614      	mov	r4, r2
   bb952:	461d      	mov	r5, r3
   bb954:	e7d6      	b.n	bb904 <atan+0x254>
   bb956:	bf00      	nop
   bb958:	54442d18 	.word	0x54442d18
   bb95c:	3ff921fb 	.word	0x3ff921fb
   bb960:	e322da11 	.word	0xe322da11
   bb964:	3f90ad3a 	.word	0x3f90ad3a
   bb968:	24760deb 	.word	0x24760deb
   bb96c:	3fa97b4b 	.word	0x3fa97b4b
   bb970:	a0d03d51 	.word	0xa0d03d51
   bb974:	3fb10d66 	.word	0x3fb10d66
   bb978:	c54c206e 	.word	0xc54c206e
   bb97c:	3fb745cd 	.word	0x3fb745cd
   bb980:	920083ff 	.word	0x920083ff
   bb984:	3fc24924 	.word	0x3fc24924
   bb988:	5555550d 	.word	0x5555550d
   bb98c:	3fd55555 	.word	0x3fd55555
   bb990:	2c6a6c2f 	.word	0x2c6a6c2f
   bb994:	bfa2b444 	.word	0xbfa2b444
   bb998:	52defd9a 	.word	0x52defd9a
   bb99c:	3fadde2d 	.word	0x3fadde2d
   bb9a0:	af749a6d 	.word	0xaf749a6d
   bb9a4:	3fb3b0f2 	.word	0x3fb3b0f2
   bb9a8:	fe231671 	.word	0xfe231671
   bb9ac:	3fbc71c6 	.word	0x3fbc71c6
   bb9b0:	9998ebc4 	.word	0x9998ebc4
   bb9b4:	3fc99999 	.word	0x3fc99999
   bb9b8:	8800759c 	.word	0x8800759c
   bb9bc:	7e37e43c 	.word	0x7e37e43c
   bb9c0:	54442d18 	.word	0x54442d18
   bb9c4:	bff921fb 	.word	0xbff921fb
   bb9c8:	440fffff 	.word	0x440fffff
   bb9cc:	7ff00000 	.word	0x7ff00000
   bb9d0:	3fdbffff 	.word	0x3fdbffff
   bb9d4:	000be768 	.word	0x000be768
   bb9d8:	000be788 	.word	0x000be788
   bb9dc:	3ff00000 	.word	0x3ff00000
   bb9e0:	3ff2ffff 	.word	0x3ff2ffff
   bb9e4:	40038000 	.word	0x40038000
   bb9e8:	3ff80000 	.word	0x3ff80000
   bb9ec:	bff00000 	.word	0xbff00000

000bb9f0 <fabs>:
   bb9f0:	ec51 0b10 	vmov	r0, r1, d0
   bb9f4:	ee10 2a10 	vmov	r2, s0
   bb9f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   bb9fc:	ec43 2b10 	vmov	d0, r2, r3
   bba00:	4770      	bx	lr
   bba02:	bf00      	nop

000bba04 <finite>:
   bba04:	b082      	sub	sp, #8
   bba06:	ed8d 0b00 	vstr	d0, [sp]
   bba0a:	9801      	ldr	r0, [sp, #4]
   bba0c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   bba10:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   bba14:	0fc0      	lsrs	r0, r0, #31
   bba16:	b002      	add	sp, #8
   bba18:	4770      	bx	lr
   bba1a:	bf00      	nop
   bba1c:	0000      	movs	r0, r0
	...

000bba20 <nan>:
   bba20:	ed9f 0b01 	vldr	d0, [pc, #4]	; bba28 <nan+0x8>
   bba24:	4770      	bx	lr
   bba26:	bf00      	nop
   bba28:	00000000 	.word	0x00000000
   bba2c:	7ff80000 	.word	0x7ff80000

000bba30 <rint>:
   bba30:	b5f0      	push	{r4, r5, r6, r7, lr}
   bba32:	ec53 2b10 	vmov	r2, r3, d0
   bba36:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   bba3a:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   bba3e:	2913      	cmp	r1, #19
   bba40:	ee10 0a10 	vmov	r0, s0
   bba44:	b083      	sub	sp, #12
   bba46:	461c      	mov	r4, r3
   bba48:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   bba4c:	dc3a      	bgt.n	bbac4 <rint+0x94>
   bba4e:	2900      	cmp	r1, #0
   bba50:	db30      	blt.n	bbab4 <rint+0x84>
   bba52:	4d42      	ldr	r5, [pc, #264]	; (bbb5c <rint+0x12c>)
   bba54:	fa45 fc01 	asr.w	ip, r5, r1
   bba58:	ea03 050c 	and.w	r5, r3, ip
   bba5c:	4315      	orrs	r5, r2
   bba5e:	d02d      	beq.n	bbabc <rint+0x8c>
   bba60:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   bba64:	4318      	orrs	r0, r3
   bba66:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   bba6a:	d00c      	beq.n	bba86 <rint+0x56>
   bba6c:	ea24 0c0c 	bic.w	ip, r4, ip
   bba70:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   bba74:	2913      	cmp	r1, #19
   bba76:	fa44 f101 	asr.w	r1, r4, r1
   bba7a:	bf0c      	ite	eq
   bba7c:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   bba80:	2000      	movne	r0, #0
   bba82:	ea4c 0401 	orr.w	r4, ip, r1
   bba86:	4936      	ldr	r1, [pc, #216]	; (bbb60 <rint+0x130>)
   bba88:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   bba8c:	4623      	mov	r3, r4
   bba8e:	e9de 4500 	ldrd	r4, r5, [lr]
   bba92:	4602      	mov	r2, r0
   bba94:	4629      	mov	r1, r5
   bba96:	4620      	mov	r0, r4
   bba98:	f000 fa98 	bl	bbfcc <__adddf3>
   bba9c:	e9cd 0100 	strd	r0, r1, [sp]
   bbaa0:	e9dd 0100 	ldrd	r0, r1, [sp]
   bbaa4:	4622      	mov	r2, r4
   bbaa6:	462b      	mov	r3, r5
   bbaa8:	f000 fa8e 	bl	bbfc8 <__aeabi_dsub>
   bbaac:	ec41 0b10 	vmov	d0, r0, r1
   bbab0:	b003      	add	sp, #12
   bbab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bbab4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   bbab8:	4311      	orrs	r1, r2
   bbaba:	d124      	bne.n	bbb06 <rint+0xd6>
   bbabc:	ec43 2b10 	vmov	d0, r2, r3
   bbac0:	b003      	add	sp, #12
   bbac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bbac4:	2933      	cmp	r1, #51	; 0x33
   bbac6:	dd08      	ble.n	bbada <rint+0xaa>
   bbac8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   bbacc:	d1f6      	bne.n	bbabc <rint+0x8c>
   bbace:	4619      	mov	r1, r3
   bbad0:	f000 fa7c 	bl	bbfcc <__adddf3>
   bbad4:	ec41 0b10 	vmov	d0, r0, r1
   bbad8:	e7f2      	b.n	bbac0 <rint+0x90>
   bbada:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   bbade:	f04f 31ff 	mov.w	r1, #4294967295
   bbae2:	fa21 f10c 	lsr.w	r1, r1, ip
   bbae6:	420a      	tst	r2, r1
   bbae8:	d0e8      	beq.n	bbabc <rint+0x8c>
   bbaea:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   bbaee:	ea4f 0351 	mov.w	r3, r1, lsr #1
   bbaf2:	d0c8      	beq.n	bba86 <rint+0x56>
   bbaf4:	ea20 0303 	bic.w	r3, r0, r3
   bbaf8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   bbafc:	fa40 fc0c 	asr.w	ip, r0, ip
   bbb00:	ea43 000c 	orr.w	r0, r3, ip
   bbb04:	e7bf      	b.n	bba86 <rint+0x56>
   bbb06:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bbb0a:	4318      	orrs	r0, r3
   bbb0c:	4a14      	ldr	r2, [pc, #80]	; (bbb60 <rint+0x130>)
   bbb0e:	4243      	negs	r3, r0
   bbb10:	4303      	orrs	r3, r0
   bbb12:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   bbb16:	0b1b      	lsrs	r3, r3, #12
   bbb18:	0c62      	lsrs	r2, r4, #17
   bbb1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   bbb1e:	0452      	lsls	r2, r2, #17
   bbb20:	ea43 0702 	orr.w	r7, r3, r2
   bbb24:	463b      	mov	r3, r7
   bbb26:	e9de 6700 	ldrd	r6, r7, [lr]
   bbb2a:	ee10 2a10 	vmov	r2, s0
   bbb2e:	4630      	mov	r0, r6
   bbb30:	4639      	mov	r1, r7
   bbb32:	f000 fa4b 	bl	bbfcc <__adddf3>
   bbb36:	e9cd 0100 	strd	r0, r1, [sp]
   bbb3a:	4632      	mov	r2, r6
   bbb3c:	463b      	mov	r3, r7
   bbb3e:	e9dd 0100 	ldrd	r0, r1, [sp]
   bbb42:	f000 fa41 	bl	bbfc8 <__aeabi_dsub>
   bbb46:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   bbb4a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bbb4e:	4602      	mov	r2, r0
   bbb50:	ea41 0304 	orr.w	r3, r1, r4
   bbb54:	ec43 2b10 	vmov	d0, r2, r3
   bbb58:	b003      	add	sp, #12
   bbb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bbb5c:	000fffff 	.word	0x000fffff
   bbb60:	000be7a8 	.word	0x000be7a8
   bbb64:	00000000 	.word	0x00000000

000bbb68 <scalbn>:
   bbb68:	b538      	push	{r3, r4, r5, lr}
   bbb6a:	ec53 2b10 	vmov	r2, r3, d0
   bbb6e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   bbb72:	4604      	mov	r4, r0
   bbb74:	469c      	mov	ip, r3
   bbb76:	bb89      	cbnz	r1, bbbdc <scalbn+0x74>
   bbb78:	ee10 1a10 	vmov	r1, s0
   bbb7c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   bbb80:	ea5c 0101 	orrs.w	r1, ip, r1
   bbb84:	d029      	beq.n	bbbda <scalbn+0x72>
   bbb86:	4619      	mov	r1, r3
   bbb88:	2200      	movs	r2, #0
   bbb8a:	4b3d      	ldr	r3, [pc, #244]	; (bbc80 <scalbn+0x118>)
   bbb8c:	4d3d      	ldr	r5, [pc, #244]	; (bbc84 <scalbn+0x11c>)
   bbb8e:	ee10 0a10 	vmov	r0, s0
   bbb92:	f000 fbd1 	bl	bc338 <__aeabi_dmul>
   bbb96:	42ac      	cmp	r4, r5
   bbb98:	4602      	mov	r2, r0
   bbb9a:	460b      	mov	r3, r1
   bbb9c:	db16      	blt.n	bbbcc <scalbn+0x64>
   bbb9e:	468c      	mov	ip, r1
   bbba0:	f3c1 510a 	ubfx	r1, r1, #20, #11
   bbba4:	3936      	subs	r1, #54	; 0x36
   bbba6:	4421      	add	r1, r4
   bbba8:	f240 70fe 	movw	r0, #2046	; 0x7fe
   bbbac:	4281      	cmp	r1, r0
   bbbae:	dc21      	bgt.n	bbbf4 <scalbn+0x8c>
   bbbb0:	2900      	cmp	r1, #0
   bbbb2:	dc47      	bgt.n	bbc44 <scalbn+0xdc>
   bbbb4:	f111 0f35 	cmn.w	r1, #53	; 0x35
   bbbb8:	da34      	bge.n	bbc24 <scalbn+0xbc>
   bbbba:	f24c 3150 	movw	r1, #50000	; 0xc350
   bbbbe:	428c      	cmp	r4, r1
   bbbc0:	dc18      	bgt.n	bbbf4 <scalbn+0x8c>
   bbbc2:	2b00      	cmp	r3, #0
   bbbc4:	a126      	add	r1, pc, #152	; (adr r1, bbc60 <scalbn+0xf8>)
   bbbc6:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbbca:	db44      	blt.n	bbc56 <scalbn+0xee>
   bbbcc:	a324      	add	r3, pc, #144	; (adr r3, bbc60 <scalbn+0xf8>)
   bbbce:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbbd2:	f000 fbb1 	bl	bc338 <__aeabi_dmul>
   bbbd6:	ec41 0b10 	vmov	d0, r0, r1
   bbbda:	bd38      	pop	{r3, r4, r5, pc}
   bbbdc:	f240 70ff 	movw	r0, #2047	; 0x7ff
   bbbe0:	4281      	cmp	r1, r0
   bbbe2:	d1e0      	bne.n	bbba6 <scalbn+0x3e>
   bbbe4:	ee10 0a10 	vmov	r0, s0
   bbbe8:	4619      	mov	r1, r3
   bbbea:	f000 f9ef 	bl	bbfcc <__adddf3>
   bbbee:	ec41 0b10 	vmov	d0, r0, r1
   bbbf2:	bd38      	pop	{r3, r4, r5, pc}
   bbbf4:	2b00      	cmp	r3, #0
   bbbf6:	a11c      	add	r1, pc, #112	; (adr r1, bbc68 <scalbn+0x100>)
   bbbf8:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbbfc:	db07      	blt.n	bbc0e <scalbn+0xa6>
   bbbfe:	a31a      	add	r3, pc, #104	; (adr r3, bbc68 <scalbn+0x100>)
   bbc00:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbc04:	f000 fb98 	bl	bc338 <__aeabi_dmul>
   bbc08:	ec41 0b10 	vmov	d0, r0, r1
   bbc0c:	bd38      	pop	{r3, r4, r5, pc}
   bbc0e:	a118      	add	r1, pc, #96	; (adr r1, bbc70 <scalbn+0x108>)
   bbc10:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbc14:	a314      	add	r3, pc, #80	; (adr r3, bbc68 <scalbn+0x100>)
   bbc16:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbc1a:	f000 fb8d 	bl	bc338 <__aeabi_dmul>
   bbc1e:	ec41 0b10 	vmov	d0, r0, r1
   bbc22:	e7f3      	b.n	bbc0c <scalbn+0xa4>
   bbc24:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bbc28:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bbc2c:	3136      	adds	r1, #54	; 0x36
   bbc2e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bbc32:	4610      	mov	r0, r2
   bbc34:	4619      	mov	r1, r3
   bbc36:	2200      	movs	r2, #0
   bbc38:	4b13      	ldr	r3, [pc, #76]	; (bbc88 <scalbn+0x120>)
   bbc3a:	f000 fb7d 	bl	bc338 <__aeabi_dmul>
   bbc3e:	ec41 0b10 	vmov	d0, r0, r1
   bbc42:	bd38      	pop	{r3, r4, r5, pc}
   bbc44:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bbc48:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bbc4c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bbc50:	ec43 2b10 	vmov	d0, r2, r3
   bbc54:	bd38      	pop	{r3, r4, r5, pc}
   bbc56:	a108      	add	r1, pc, #32	; (adr r1, bbc78 <scalbn+0x110>)
   bbc58:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbc5c:	e7b6      	b.n	bbbcc <scalbn+0x64>
   bbc5e:	bf00      	nop
   bbc60:	c2f8f359 	.word	0xc2f8f359
   bbc64:	01a56e1f 	.word	0x01a56e1f
   bbc68:	8800759c 	.word	0x8800759c
   bbc6c:	7e37e43c 	.word	0x7e37e43c
   bbc70:	8800759c 	.word	0x8800759c
   bbc74:	fe37e43c 	.word	0xfe37e43c
   bbc78:	c2f8f359 	.word	0xc2f8f359
   bbc7c:	81a56e1f 	.word	0x81a56e1f
   bbc80:	43500000 	.word	0x43500000
   bbc84:	ffff3cb0 	.word	0xffff3cb0
   bbc88:	3c900000 	.word	0x3c900000

000bbc8c <atanf>:
   bbc8c:	b538      	push	{r3, r4, r5, lr}
   bbc8e:	ee10 5a10 	vmov	r5, s0
   bbc92:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   bbc96:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   bbc9a:	eef0 7a40 	vmov.f32	s15, s0
   bbc9e:	db0b      	blt.n	bbcb8 <atanf+0x2c>
   bbca0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   bbca4:	dc5b      	bgt.n	bbd5e <atanf+0xd2>
   bbca6:	eddf 7a53 	vldr	s15, [pc, #332]	; bbdf4 <atanf+0x168>
   bbcaa:	ed9f 0a53 	vldr	s0, [pc, #332]	; bbdf8 <atanf+0x16c>
   bbcae:	2d00      	cmp	r5, #0
   bbcb0:	bfc8      	it	gt
   bbcb2:	eeb0 0a67 	vmovgt.f32	s0, s15
   bbcb6:	bd38      	pop	{r3, r4, r5, pc}
   bbcb8:	4b50      	ldr	r3, [pc, #320]	; (bbdfc <atanf+0x170>)
   bbcba:	429c      	cmp	r4, r3
   bbcbc:	dc5e      	bgt.n	bbd7c <atanf+0xf0>
   bbcbe:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   bbcc2:	db4f      	blt.n	bbd64 <atanf+0xd8>
   bbcc4:	f04f 33ff 	mov.w	r3, #4294967295
   bbcc8:	ee67 6aa7 	vmul.f32	s13, s15, s15
   bbccc:	eddf 4a4c 	vldr	s9, [pc, #304]	; bbe00 <atanf+0x174>
   bbcd0:	eddf 5a4c 	vldr	s11, [pc, #304]	; bbe04 <atanf+0x178>
   bbcd4:	ed9f 5a4c 	vldr	s10, [pc, #304]	; bbe08 <atanf+0x17c>
   bbcd8:	ed9f 4a4c 	vldr	s8, [pc, #304]	; bbe0c <atanf+0x180>
   bbcdc:	ee26 7aa6 	vmul.f32	s14, s13, s13
   bbce0:	eeb0 6a66 	vmov.f32	s12, s13
   bbce4:	eee7 5a24 	vfma.f32	s11, s14, s9
   bbce8:	1c5a      	adds	r2, r3, #1
   bbcea:	eddf 4a49 	vldr	s9, [pc, #292]	; bbe10 <atanf+0x184>
   bbcee:	eddf 6a49 	vldr	s13, [pc, #292]	; bbe14 <atanf+0x188>
   bbcf2:	eea5 5a87 	vfma.f32	s10, s11, s14
   bbcf6:	eee7 6a24 	vfma.f32	s13, s14, s9
   bbcfa:	eddf 5a47 	vldr	s11, [pc, #284]	; bbe18 <atanf+0x18c>
   bbcfe:	eddf 4a47 	vldr	s9, [pc, #284]	; bbe1c <atanf+0x190>
   bbd02:	eee6 5a87 	vfma.f32	s11, s13, s14
   bbd06:	eea5 4a07 	vfma.f32	s8, s10, s14
   bbd0a:	ed9f 5a45 	vldr	s10, [pc, #276]	; bbe20 <atanf+0x194>
   bbd0e:	eddf 6a45 	vldr	s13, [pc, #276]	; bbe24 <atanf+0x198>
   bbd12:	eea5 5a87 	vfma.f32	s10, s11, s14
   bbd16:	eee4 4a07 	vfma.f32	s9, s8, s14
   bbd1a:	eddf 5a43 	vldr	s11, [pc, #268]	; bbe28 <atanf+0x19c>
   bbd1e:	eee4 6a87 	vfma.f32	s13, s9, s14
   bbd22:	eee5 5a07 	vfma.f32	s11, s10, s14
   bbd26:	ee66 6a86 	vmul.f32	s13, s13, s12
   bbd2a:	ee25 7a87 	vmul.f32	s14, s11, s14
   bbd2e:	d03a      	beq.n	bbda6 <atanf+0x11a>
   bbd30:	4a3e      	ldr	r2, [pc, #248]	; (bbe2c <atanf+0x1a0>)
   bbd32:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   bbd36:	ee76 6a87 	vadd.f32	s13, s13, s14
   bbd3a:	ed92 0a00 	vldr	s0, [r2]
   bbd3e:	4a3c      	ldr	r2, [pc, #240]	; (bbe30 <atanf+0x1a4>)
   bbd40:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   bbd44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bbd48:	2d00      	cmp	r5, #0
   bbd4a:	ed93 7a00 	vldr	s14, [r3]
   bbd4e:	ee70 7a67 	vsub.f32	s15, s0, s15
   bbd52:	ee37 0a67 	vsub.f32	s0, s14, s15
   bbd56:	daae      	bge.n	bbcb6 <atanf+0x2a>
   bbd58:	eeb1 0a40 	vneg.f32	s0, s0
   bbd5c:	bd38      	pop	{r3, r4, r5, pc}
   bbd5e:	ee30 0a00 	vadd.f32	s0, s0, s0
   bbd62:	bd38      	pop	{r3, r4, r5, pc}
   bbd64:	ed9f 7a33 	vldr	s14, [pc, #204]	; bbe34 <atanf+0x1a8>
   bbd68:	ee30 7a07 	vadd.f32	s14, s0, s14
   bbd6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   bbd70:	eeb4 7ae6 	vcmpe.f32	s14, s13
   bbd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbd78:	dda4      	ble.n	bbcc4 <atanf+0x38>
   bbd7a:	bd38      	pop	{r3, r4, r5, pc}
   bbd7c:	f000 f860 	bl	bbe40 <fabsf>
   bbd80:	4b2d      	ldr	r3, [pc, #180]	; (bbe38 <atanf+0x1ac>)
   bbd82:	429c      	cmp	r4, r3
   bbd84:	dc16      	bgt.n	bbdb4 <atanf+0x128>
   bbd86:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   bbd8a:	429c      	cmp	r4, r3
   bbd8c:	dc27      	bgt.n	bbdde <atanf+0x152>
   bbd8e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   bbd92:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   bbd96:	eea0 7a27 	vfma.f32	s14, s0, s15
   bbd9a:	2300      	movs	r3, #0
   bbd9c:	ee30 0a27 	vadd.f32	s0, s0, s15
   bbda0:	eec7 7a00 	vdiv.f32	s15, s14, s0
   bbda4:	e790      	b.n	bbcc8 <atanf+0x3c>
   bbda6:	ee76 6a87 	vadd.f32	s13, s13, s14
   bbdaa:	eee6 7ae7 	vfms.f32	s15, s13, s15
   bbdae:	eeb0 0a67 	vmov.f32	s0, s15
   bbdb2:	bd38      	pop	{r3, r4, r5, pc}
   bbdb4:	4b21      	ldr	r3, [pc, #132]	; (bbe3c <atanf+0x1b0>)
   bbdb6:	429c      	cmp	r4, r3
   bbdb8:	dc0b      	bgt.n	bbdd2 <atanf+0x146>
   bbdba:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   bbdbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   bbdc2:	eea0 7a27 	vfma.f32	s14, s0, s15
   bbdc6:	2302      	movs	r3, #2
   bbdc8:	ee30 0a67 	vsub.f32	s0, s0, s15
   bbdcc:	eec0 7a07 	vdiv.f32	s15, s0, s14
   bbdd0:	e77a      	b.n	bbcc8 <atanf+0x3c>
   bbdd2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   bbdd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
   bbdda:	2303      	movs	r3, #3
   bbddc:	e774      	b.n	bbcc8 <atanf+0x3c>
   bbdde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   bbde2:	ee30 7a67 	vsub.f32	s14, s0, s15
   bbde6:	ee30 0a27 	vadd.f32	s0, s0, s15
   bbdea:	2301      	movs	r3, #1
   bbdec:	eec7 7a00 	vdiv.f32	s15, s14, s0
   bbdf0:	e76a      	b.n	bbcc8 <atanf+0x3c>
   bbdf2:	bf00      	nop
   bbdf4:	3fc90fdb 	.word	0x3fc90fdb
   bbdf8:	bfc90fdb 	.word	0xbfc90fdb
   bbdfc:	3edfffff 	.word	0x3edfffff
   bbe00:	3c8569d7 	.word	0x3c8569d7
   bbe04:	3d4bda59 	.word	0x3d4bda59
   bbe08:	3d886b35 	.word	0x3d886b35
   bbe0c:	3dba2e6e 	.word	0x3dba2e6e
   bbe10:	bd15a221 	.word	0xbd15a221
   bbe14:	bd6ef16b 	.word	0xbd6ef16b
   bbe18:	bd9d8795 	.word	0xbd9d8795
   bbe1c:	3e124925 	.word	0x3e124925
   bbe20:	bde38e38 	.word	0xbde38e38
   bbe24:	3eaaaaab 	.word	0x3eaaaaab
   bbe28:	be4ccccd 	.word	0xbe4ccccd
   bbe2c:	000be7c8 	.word	0x000be7c8
   bbe30:	000be7b8 	.word	0x000be7b8
   bbe34:	7149f2ca 	.word	0x7149f2ca
   bbe38:	3f97ffff 	.word	0x3f97ffff
   bbe3c:	401bffff 	.word	0x401bffff

000bbe40 <fabsf>:
   bbe40:	ee10 3a10 	vmov	r3, s0
   bbe44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   bbe48:	ee00 3a10 	vmov	s0, r3
   bbe4c:	4770      	bx	lr
   bbe4e:	bf00      	nop

000bbe50 <floorf>:
   bbe50:	ee10 2a10 	vmov	r2, s0
   bbe54:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   bbe58:	3b7f      	subs	r3, #127	; 0x7f
   bbe5a:	2b16      	cmp	r3, #22
   bbe5c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   bbe60:	dc28      	bgt.n	bbeb4 <floorf+0x64>
   bbe62:	2b00      	cmp	r3, #0
   bbe64:	db18      	blt.n	bbe98 <floorf+0x48>
   bbe66:	491a      	ldr	r1, [pc, #104]	; (bbed0 <floorf+0x80>)
   bbe68:	4119      	asrs	r1, r3
   bbe6a:	420a      	tst	r2, r1
   bbe6c:	d021      	beq.n	bbeb2 <floorf+0x62>
   bbe6e:	eddf 7a19 	vldr	s15, [pc, #100]	; bbed4 <floorf+0x84>
   bbe72:	ee70 7a27 	vadd.f32	s15, s0, s15
   bbe76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bbe7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbe7e:	dd18      	ble.n	bbeb2 <floorf+0x62>
   bbe80:	2a00      	cmp	r2, #0
   bbe82:	da04      	bge.n	bbe8e <floorf+0x3e>
   bbe84:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   bbe88:	fa40 f303 	asr.w	r3, r0, r3
   bbe8c:	441a      	add	r2, r3
   bbe8e:	ea22 0301 	bic.w	r3, r2, r1
   bbe92:	ee00 3a10 	vmov	s0, r3
   bbe96:	4770      	bx	lr
   bbe98:	eddf 7a0e 	vldr	s15, [pc, #56]	; bbed4 <floorf+0x84>
   bbe9c:	ee70 7a27 	vadd.f32	s15, s0, s15
   bbea0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bbea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbea8:	dd03      	ble.n	bbeb2 <floorf+0x62>
   bbeaa:	2a00      	cmp	r2, #0
   bbeac:	db08      	blt.n	bbec0 <floorf+0x70>
   bbeae:	ed9f 0a0a 	vldr	s0, [pc, #40]	; bbed8 <floorf+0x88>
   bbeb2:	4770      	bx	lr
   bbeb4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   bbeb8:	d3fb      	bcc.n	bbeb2 <floorf+0x62>
   bbeba:	ee30 0a00 	vadd.f32	s0, s0, s0
   bbebe:	4770      	bx	lr
   bbec0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   bbec4:	2900      	cmp	r1, #0
   bbec6:	bf18      	it	ne
   bbec8:	eeb0 0a67 	vmovne.f32	s0, s15
   bbecc:	4770      	bx	lr
   bbece:	bf00      	nop
   bbed0:	007fffff 	.word	0x007fffff
   bbed4:	7149f2ca 	.word	0x7149f2ca
   bbed8:	00000000 	.word	0x00000000

000bbedc <scalbnf>:
   bbedc:	b082      	sub	sp, #8
   bbede:	ed8d 0a01 	vstr	s0, [sp, #4]
   bbee2:	9b01      	ldr	r3, [sp, #4]
   bbee4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   bbee8:	d02a      	beq.n	bbf40 <scalbnf+0x64>
   bbeea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   bbeee:	d223      	bcs.n	bbf38 <scalbnf+0x5c>
   bbef0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   bbef4:	d128      	bne.n	bbf48 <scalbnf+0x6c>
   bbef6:	ed9d 7a01 	vldr	s14, [sp, #4]
   bbefa:	eddf 7a2a 	vldr	s15, [pc, #168]	; bbfa4 <scalbnf+0xc8>
   bbefe:	4b2a      	ldr	r3, [pc, #168]	; (bbfa8 <scalbnf+0xcc>)
   bbf00:	ee67 7a27 	vmul.f32	s15, s14, s15
   bbf04:	4298      	cmp	r0, r3
   bbf06:	edcd 7a01 	vstr	s15, [sp, #4]
   bbf0a:	db37      	blt.n	bbf7c <scalbnf+0xa0>
   bbf0c:	9b01      	ldr	r3, [sp, #4]
   bbf0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   bbf12:	3a19      	subs	r2, #25
   bbf14:	4402      	add	r2, r0
   bbf16:	2afe      	cmp	r2, #254	; 0xfe
   bbf18:	dd1a      	ble.n	bbf50 <scalbnf+0x74>
   bbf1a:	ed9f 0a24 	vldr	s0, [pc, #144]	; bbfac <scalbnf+0xd0>
   bbf1e:	ed9f 7a24 	vldr	s14, [pc, #144]	; bbfb0 <scalbnf+0xd4>
   bbf22:	9b01      	ldr	r3, [sp, #4]
   bbf24:	2b00      	cmp	r3, #0
   bbf26:	eef0 7a40 	vmov.f32	s15, s0
   bbf2a:	bfb8      	it	lt
   bbf2c:	eeb0 0a47 	vmovlt.f32	s0, s14
   bbf30:	ee20 0a27 	vmul.f32	s0, s0, s15
   bbf34:	b002      	add	sp, #8
   bbf36:	4770      	bx	lr
   bbf38:	ee30 0a00 	vadd.f32	s0, s0, s0
   bbf3c:	b002      	add	sp, #8
   bbf3e:	4770      	bx	lr
   bbf40:	ed9d 0a01 	vldr	s0, [sp, #4]
   bbf44:	b002      	add	sp, #8
   bbf46:	4770      	bx	lr
   bbf48:	0dd2      	lsrs	r2, r2, #23
   bbf4a:	4402      	add	r2, r0
   bbf4c:	2afe      	cmp	r2, #254	; 0xfe
   bbf4e:	dce4      	bgt.n	bbf1a <scalbnf+0x3e>
   bbf50:	2a00      	cmp	r2, #0
   bbf52:	dc0b      	bgt.n	bbf6c <scalbnf+0x90>
   bbf54:	f112 0f16 	cmn.w	r2, #22
   bbf58:	da17      	bge.n	bbf8a <scalbnf+0xae>
   bbf5a:	f24c 3350 	movw	r3, #50000	; 0xc350
   bbf5e:	4298      	cmp	r0, r3
   bbf60:	dcdb      	bgt.n	bbf1a <scalbnf+0x3e>
   bbf62:	ed9f 0a14 	vldr	s0, [pc, #80]	; bbfb4 <scalbnf+0xd8>
   bbf66:	ed9f 7a14 	vldr	s14, [pc, #80]	; bbfb8 <scalbnf+0xdc>
   bbf6a:	e7da      	b.n	bbf22 <scalbnf+0x46>
   bbf6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   bbf70:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   bbf74:	ee00 3a10 	vmov	s0, r3
   bbf78:	b002      	add	sp, #8
   bbf7a:	4770      	bx	lr
   bbf7c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; bbfb4 <scalbnf+0xd8>
   bbf80:	eddd 7a01 	vldr	s15, [sp, #4]
   bbf84:	ee27 0a80 	vmul.f32	s0, s15, s0
   bbf88:	e7d8      	b.n	bbf3c <scalbnf+0x60>
   bbf8a:	3219      	adds	r2, #25
   bbf8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   bbf90:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   bbf94:	eddf 7a09 	vldr	s15, [pc, #36]	; bbfbc <scalbnf+0xe0>
   bbf98:	ee07 3a10 	vmov	s14, r3
   bbf9c:	ee27 0a27 	vmul.f32	s0, s14, s15
   bbfa0:	e7cc      	b.n	bbf3c <scalbnf+0x60>
   bbfa2:	bf00      	nop
   bbfa4:	4c000000 	.word	0x4c000000
   bbfa8:	ffff3cb0 	.word	0xffff3cb0
   bbfac:	7149f2ca 	.word	0x7149f2ca
   bbfb0:	f149f2ca 	.word	0xf149f2ca
   bbfb4:	0da24260 	.word	0x0da24260
   bbfb8:	8da24260 	.word	0x8da24260
   bbfbc:	33000000 	.word	0x33000000

000bbfc0 <__aeabi_drsub>:
   bbfc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bbfc4:	e002      	b.n	bbfcc <__adddf3>
   bbfc6:	bf00      	nop

000bbfc8 <__aeabi_dsub>:
   bbfc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bbfcc <__adddf3>:
   bbfcc:	b530      	push	{r4, r5, lr}
   bbfce:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bbfd2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bbfd6:	ea94 0f05 	teq	r4, r5
   bbfda:	bf08      	it	eq
   bbfdc:	ea90 0f02 	teqeq	r0, r2
   bbfe0:	bf1f      	itttt	ne
   bbfe2:	ea54 0c00 	orrsne.w	ip, r4, r0
   bbfe6:	ea55 0c02 	orrsne.w	ip, r5, r2
   bbfea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bbfee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bbff2:	f000 80e2 	beq.w	bc1ba <__adddf3+0x1ee>
   bbff6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bbffa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bbffe:	bfb8      	it	lt
   bc000:	426d      	neglt	r5, r5
   bc002:	dd0c      	ble.n	bc01e <__adddf3+0x52>
   bc004:	442c      	add	r4, r5
   bc006:	ea80 0202 	eor.w	r2, r0, r2
   bc00a:	ea81 0303 	eor.w	r3, r1, r3
   bc00e:	ea82 0000 	eor.w	r0, r2, r0
   bc012:	ea83 0101 	eor.w	r1, r3, r1
   bc016:	ea80 0202 	eor.w	r2, r0, r2
   bc01a:	ea81 0303 	eor.w	r3, r1, r3
   bc01e:	2d36      	cmp	r5, #54	; 0x36
   bc020:	bf88      	it	hi
   bc022:	bd30      	pophi	{r4, r5, pc}
   bc024:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bc028:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bc02c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bc030:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bc034:	d002      	beq.n	bc03c <__adddf3+0x70>
   bc036:	4240      	negs	r0, r0
   bc038:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc03c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bc040:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bc044:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bc048:	d002      	beq.n	bc050 <__adddf3+0x84>
   bc04a:	4252      	negs	r2, r2
   bc04c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bc050:	ea94 0f05 	teq	r4, r5
   bc054:	f000 80a7 	beq.w	bc1a6 <__adddf3+0x1da>
   bc058:	f1a4 0401 	sub.w	r4, r4, #1
   bc05c:	f1d5 0e20 	rsbs	lr, r5, #32
   bc060:	db0d      	blt.n	bc07e <__adddf3+0xb2>
   bc062:	fa02 fc0e 	lsl.w	ip, r2, lr
   bc066:	fa22 f205 	lsr.w	r2, r2, r5
   bc06a:	1880      	adds	r0, r0, r2
   bc06c:	f141 0100 	adc.w	r1, r1, #0
   bc070:	fa03 f20e 	lsl.w	r2, r3, lr
   bc074:	1880      	adds	r0, r0, r2
   bc076:	fa43 f305 	asr.w	r3, r3, r5
   bc07a:	4159      	adcs	r1, r3
   bc07c:	e00e      	b.n	bc09c <__adddf3+0xd0>
   bc07e:	f1a5 0520 	sub.w	r5, r5, #32
   bc082:	f10e 0e20 	add.w	lr, lr, #32
   bc086:	2a01      	cmp	r2, #1
   bc088:	fa03 fc0e 	lsl.w	ip, r3, lr
   bc08c:	bf28      	it	cs
   bc08e:	f04c 0c02 	orrcs.w	ip, ip, #2
   bc092:	fa43 f305 	asr.w	r3, r3, r5
   bc096:	18c0      	adds	r0, r0, r3
   bc098:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bc09c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bc0a0:	d507      	bpl.n	bc0b2 <__adddf3+0xe6>
   bc0a2:	f04f 0e00 	mov.w	lr, #0
   bc0a6:	f1dc 0c00 	rsbs	ip, ip, #0
   bc0aa:	eb7e 0000 	sbcs.w	r0, lr, r0
   bc0ae:	eb6e 0101 	sbc.w	r1, lr, r1
   bc0b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bc0b6:	d31b      	bcc.n	bc0f0 <__adddf3+0x124>
   bc0b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bc0bc:	d30c      	bcc.n	bc0d8 <__adddf3+0x10c>
   bc0be:	0849      	lsrs	r1, r1, #1
   bc0c0:	ea5f 0030 	movs.w	r0, r0, rrx
   bc0c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bc0c8:	f104 0401 	add.w	r4, r4, #1
   bc0cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bc0d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bc0d4:	f080 809a 	bcs.w	bc20c <__adddf3+0x240>
   bc0d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bc0dc:	bf08      	it	eq
   bc0de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bc0e2:	f150 0000 	adcs.w	r0, r0, #0
   bc0e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bc0ea:	ea41 0105 	orr.w	r1, r1, r5
   bc0ee:	bd30      	pop	{r4, r5, pc}
   bc0f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bc0f4:	4140      	adcs	r0, r0
   bc0f6:	eb41 0101 	adc.w	r1, r1, r1
   bc0fa:	3c01      	subs	r4, #1
   bc0fc:	bf28      	it	cs
   bc0fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bc102:	d2e9      	bcs.n	bc0d8 <__adddf3+0x10c>
   bc104:	f091 0f00 	teq	r1, #0
   bc108:	bf04      	itt	eq
   bc10a:	4601      	moveq	r1, r0
   bc10c:	2000      	moveq	r0, #0
   bc10e:	fab1 f381 	clz	r3, r1
   bc112:	bf08      	it	eq
   bc114:	3320      	addeq	r3, #32
   bc116:	f1a3 030b 	sub.w	r3, r3, #11
   bc11a:	f1b3 0220 	subs.w	r2, r3, #32
   bc11e:	da0c      	bge.n	bc13a <__adddf3+0x16e>
   bc120:	320c      	adds	r2, #12
   bc122:	dd08      	ble.n	bc136 <__adddf3+0x16a>
   bc124:	f102 0c14 	add.w	ip, r2, #20
   bc128:	f1c2 020c 	rsb	r2, r2, #12
   bc12c:	fa01 f00c 	lsl.w	r0, r1, ip
   bc130:	fa21 f102 	lsr.w	r1, r1, r2
   bc134:	e00c      	b.n	bc150 <__adddf3+0x184>
   bc136:	f102 0214 	add.w	r2, r2, #20
   bc13a:	bfd8      	it	le
   bc13c:	f1c2 0c20 	rsble	ip, r2, #32
   bc140:	fa01 f102 	lsl.w	r1, r1, r2
   bc144:	fa20 fc0c 	lsr.w	ip, r0, ip
   bc148:	bfdc      	itt	le
   bc14a:	ea41 010c 	orrle.w	r1, r1, ip
   bc14e:	4090      	lslle	r0, r2
   bc150:	1ae4      	subs	r4, r4, r3
   bc152:	bfa2      	ittt	ge
   bc154:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bc158:	4329      	orrge	r1, r5
   bc15a:	bd30      	popge	{r4, r5, pc}
   bc15c:	ea6f 0404 	mvn.w	r4, r4
   bc160:	3c1f      	subs	r4, #31
   bc162:	da1c      	bge.n	bc19e <__adddf3+0x1d2>
   bc164:	340c      	adds	r4, #12
   bc166:	dc0e      	bgt.n	bc186 <__adddf3+0x1ba>
   bc168:	f104 0414 	add.w	r4, r4, #20
   bc16c:	f1c4 0220 	rsb	r2, r4, #32
   bc170:	fa20 f004 	lsr.w	r0, r0, r4
   bc174:	fa01 f302 	lsl.w	r3, r1, r2
   bc178:	ea40 0003 	orr.w	r0, r0, r3
   bc17c:	fa21 f304 	lsr.w	r3, r1, r4
   bc180:	ea45 0103 	orr.w	r1, r5, r3
   bc184:	bd30      	pop	{r4, r5, pc}
   bc186:	f1c4 040c 	rsb	r4, r4, #12
   bc18a:	f1c4 0220 	rsb	r2, r4, #32
   bc18e:	fa20 f002 	lsr.w	r0, r0, r2
   bc192:	fa01 f304 	lsl.w	r3, r1, r4
   bc196:	ea40 0003 	orr.w	r0, r0, r3
   bc19a:	4629      	mov	r1, r5
   bc19c:	bd30      	pop	{r4, r5, pc}
   bc19e:	fa21 f004 	lsr.w	r0, r1, r4
   bc1a2:	4629      	mov	r1, r5
   bc1a4:	bd30      	pop	{r4, r5, pc}
   bc1a6:	f094 0f00 	teq	r4, #0
   bc1aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bc1ae:	bf06      	itte	eq
   bc1b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bc1b4:	3401      	addeq	r4, #1
   bc1b6:	3d01      	subne	r5, #1
   bc1b8:	e74e      	b.n	bc058 <__adddf3+0x8c>
   bc1ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bc1be:	bf18      	it	ne
   bc1c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bc1c4:	d029      	beq.n	bc21a <__adddf3+0x24e>
   bc1c6:	ea94 0f05 	teq	r4, r5
   bc1ca:	bf08      	it	eq
   bc1cc:	ea90 0f02 	teqeq	r0, r2
   bc1d0:	d005      	beq.n	bc1de <__adddf3+0x212>
   bc1d2:	ea54 0c00 	orrs.w	ip, r4, r0
   bc1d6:	bf04      	itt	eq
   bc1d8:	4619      	moveq	r1, r3
   bc1da:	4610      	moveq	r0, r2
   bc1dc:	bd30      	pop	{r4, r5, pc}
   bc1de:	ea91 0f03 	teq	r1, r3
   bc1e2:	bf1e      	ittt	ne
   bc1e4:	2100      	movne	r1, #0
   bc1e6:	2000      	movne	r0, #0
   bc1e8:	bd30      	popne	{r4, r5, pc}
   bc1ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bc1ee:	d105      	bne.n	bc1fc <__adddf3+0x230>
   bc1f0:	0040      	lsls	r0, r0, #1
   bc1f2:	4149      	adcs	r1, r1
   bc1f4:	bf28      	it	cs
   bc1f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bc1fa:	bd30      	pop	{r4, r5, pc}
   bc1fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bc200:	bf3c      	itt	cc
   bc202:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bc206:	bd30      	popcc	{r4, r5, pc}
   bc208:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bc20c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bc210:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bc214:	f04f 0000 	mov.w	r0, #0
   bc218:	bd30      	pop	{r4, r5, pc}
   bc21a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bc21e:	bf1a      	itte	ne
   bc220:	4619      	movne	r1, r3
   bc222:	4610      	movne	r0, r2
   bc224:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bc228:	bf1c      	itt	ne
   bc22a:	460b      	movne	r3, r1
   bc22c:	4602      	movne	r2, r0
   bc22e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bc232:	bf06      	itte	eq
   bc234:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bc238:	ea91 0f03 	teqeq	r1, r3
   bc23c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bc240:	bd30      	pop	{r4, r5, pc}
   bc242:	bf00      	nop

000bc244 <__aeabi_ui2d>:
   bc244:	f090 0f00 	teq	r0, #0
   bc248:	bf04      	itt	eq
   bc24a:	2100      	moveq	r1, #0
   bc24c:	4770      	bxeq	lr
   bc24e:	b530      	push	{r4, r5, lr}
   bc250:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bc254:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bc258:	f04f 0500 	mov.w	r5, #0
   bc25c:	f04f 0100 	mov.w	r1, #0
   bc260:	e750      	b.n	bc104 <__adddf3+0x138>
   bc262:	bf00      	nop

000bc264 <__aeabi_i2d>:
   bc264:	f090 0f00 	teq	r0, #0
   bc268:	bf04      	itt	eq
   bc26a:	2100      	moveq	r1, #0
   bc26c:	4770      	bxeq	lr
   bc26e:	b530      	push	{r4, r5, lr}
   bc270:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bc274:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bc278:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bc27c:	bf48      	it	mi
   bc27e:	4240      	negmi	r0, r0
   bc280:	f04f 0100 	mov.w	r1, #0
   bc284:	e73e      	b.n	bc104 <__adddf3+0x138>
   bc286:	bf00      	nop

000bc288 <__aeabi_f2d>:
   bc288:	0042      	lsls	r2, r0, #1
   bc28a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bc28e:	ea4f 0131 	mov.w	r1, r1, rrx
   bc292:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bc296:	bf1f      	itttt	ne
   bc298:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bc29c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bc2a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bc2a4:	4770      	bxne	lr
   bc2a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bc2aa:	bf08      	it	eq
   bc2ac:	4770      	bxeq	lr
   bc2ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bc2b2:	bf04      	itt	eq
   bc2b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bc2b8:	4770      	bxeq	lr
   bc2ba:	b530      	push	{r4, r5, lr}
   bc2bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   bc2c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bc2c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bc2c8:	e71c      	b.n	bc104 <__adddf3+0x138>
   bc2ca:	bf00      	nop

000bc2cc <__aeabi_ul2d>:
   bc2cc:	ea50 0201 	orrs.w	r2, r0, r1
   bc2d0:	bf08      	it	eq
   bc2d2:	4770      	bxeq	lr
   bc2d4:	b530      	push	{r4, r5, lr}
   bc2d6:	f04f 0500 	mov.w	r5, #0
   bc2da:	e00a      	b.n	bc2f2 <__aeabi_l2d+0x16>

000bc2dc <__aeabi_l2d>:
   bc2dc:	ea50 0201 	orrs.w	r2, r0, r1
   bc2e0:	bf08      	it	eq
   bc2e2:	4770      	bxeq	lr
   bc2e4:	b530      	push	{r4, r5, lr}
   bc2e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bc2ea:	d502      	bpl.n	bc2f2 <__aeabi_l2d+0x16>
   bc2ec:	4240      	negs	r0, r0
   bc2ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc2f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bc2f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bc2fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bc2fe:	f43f aed8 	beq.w	bc0b2 <__adddf3+0xe6>
   bc302:	f04f 0203 	mov.w	r2, #3
   bc306:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bc30a:	bf18      	it	ne
   bc30c:	3203      	addne	r2, #3
   bc30e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bc312:	bf18      	it	ne
   bc314:	3203      	addne	r2, #3
   bc316:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bc31a:	f1c2 0320 	rsb	r3, r2, #32
   bc31e:	fa00 fc03 	lsl.w	ip, r0, r3
   bc322:	fa20 f002 	lsr.w	r0, r0, r2
   bc326:	fa01 fe03 	lsl.w	lr, r1, r3
   bc32a:	ea40 000e 	orr.w	r0, r0, lr
   bc32e:	fa21 f102 	lsr.w	r1, r1, r2
   bc332:	4414      	add	r4, r2
   bc334:	e6bd      	b.n	bc0b2 <__adddf3+0xe6>
   bc336:	bf00      	nop

000bc338 <__aeabi_dmul>:
   bc338:	b570      	push	{r4, r5, r6, lr}
   bc33a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bc33e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bc342:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bc346:	bf1d      	ittte	ne
   bc348:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bc34c:	ea94 0f0c 	teqne	r4, ip
   bc350:	ea95 0f0c 	teqne	r5, ip
   bc354:	f000 f8de 	bleq	bc514 <__aeabi_dmul+0x1dc>
   bc358:	442c      	add	r4, r5
   bc35a:	ea81 0603 	eor.w	r6, r1, r3
   bc35e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bc362:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bc366:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bc36a:	bf18      	it	ne
   bc36c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bc370:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc378:	d038      	beq.n	bc3ec <__aeabi_dmul+0xb4>
   bc37a:	fba0 ce02 	umull	ip, lr, r0, r2
   bc37e:	f04f 0500 	mov.w	r5, #0
   bc382:	fbe1 e502 	umlal	lr, r5, r1, r2
   bc386:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bc38a:	fbe0 e503 	umlal	lr, r5, r0, r3
   bc38e:	f04f 0600 	mov.w	r6, #0
   bc392:	fbe1 5603 	umlal	r5, r6, r1, r3
   bc396:	f09c 0f00 	teq	ip, #0
   bc39a:	bf18      	it	ne
   bc39c:	f04e 0e01 	orrne.w	lr, lr, #1
   bc3a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bc3a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bc3a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bc3ac:	d204      	bcs.n	bc3b8 <__aeabi_dmul+0x80>
   bc3ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bc3b2:	416d      	adcs	r5, r5
   bc3b4:	eb46 0606 	adc.w	r6, r6, r6
   bc3b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bc3bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bc3c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bc3c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bc3c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bc3cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bc3d0:	bf88      	it	hi
   bc3d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bc3d6:	d81e      	bhi.n	bc416 <__aeabi_dmul+0xde>
   bc3d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bc3dc:	bf08      	it	eq
   bc3de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bc3e2:	f150 0000 	adcs.w	r0, r0, #0
   bc3e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bc3ea:	bd70      	pop	{r4, r5, r6, pc}
   bc3ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bc3f0:	ea46 0101 	orr.w	r1, r6, r1
   bc3f4:	ea40 0002 	orr.w	r0, r0, r2
   bc3f8:	ea81 0103 	eor.w	r1, r1, r3
   bc3fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bc400:	bfc2      	ittt	gt
   bc402:	ebd4 050c 	rsbsgt	r5, r4, ip
   bc406:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bc40a:	bd70      	popgt	{r4, r5, r6, pc}
   bc40c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc410:	f04f 0e00 	mov.w	lr, #0
   bc414:	3c01      	subs	r4, #1
   bc416:	f300 80ab 	bgt.w	bc570 <__aeabi_dmul+0x238>
   bc41a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bc41e:	bfde      	ittt	le
   bc420:	2000      	movle	r0, #0
   bc422:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bc426:	bd70      	pople	{r4, r5, r6, pc}
   bc428:	f1c4 0400 	rsb	r4, r4, #0
   bc42c:	3c20      	subs	r4, #32
   bc42e:	da35      	bge.n	bc49c <__aeabi_dmul+0x164>
   bc430:	340c      	adds	r4, #12
   bc432:	dc1b      	bgt.n	bc46c <__aeabi_dmul+0x134>
   bc434:	f104 0414 	add.w	r4, r4, #20
   bc438:	f1c4 0520 	rsb	r5, r4, #32
   bc43c:	fa00 f305 	lsl.w	r3, r0, r5
   bc440:	fa20 f004 	lsr.w	r0, r0, r4
   bc444:	fa01 f205 	lsl.w	r2, r1, r5
   bc448:	ea40 0002 	orr.w	r0, r0, r2
   bc44c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bc450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bc454:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bc458:	fa21 f604 	lsr.w	r6, r1, r4
   bc45c:	eb42 0106 	adc.w	r1, r2, r6
   bc460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc464:	bf08      	it	eq
   bc466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc46a:	bd70      	pop	{r4, r5, r6, pc}
   bc46c:	f1c4 040c 	rsb	r4, r4, #12
   bc470:	f1c4 0520 	rsb	r5, r4, #32
   bc474:	fa00 f304 	lsl.w	r3, r0, r4
   bc478:	fa20 f005 	lsr.w	r0, r0, r5
   bc47c:	fa01 f204 	lsl.w	r2, r1, r4
   bc480:	ea40 0002 	orr.w	r0, r0, r2
   bc484:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc488:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bc48c:	f141 0100 	adc.w	r1, r1, #0
   bc490:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc494:	bf08      	it	eq
   bc496:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc49a:	bd70      	pop	{r4, r5, r6, pc}
   bc49c:	f1c4 0520 	rsb	r5, r4, #32
   bc4a0:	fa00 f205 	lsl.w	r2, r0, r5
   bc4a4:	ea4e 0e02 	orr.w	lr, lr, r2
   bc4a8:	fa20 f304 	lsr.w	r3, r0, r4
   bc4ac:	fa01 f205 	lsl.w	r2, r1, r5
   bc4b0:	ea43 0302 	orr.w	r3, r3, r2
   bc4b4:	fa21 f004 	lsr.w	r0, r1, r4
   bc4b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc4bc:	fa21 f204 	lsr.w	r2, r1, r4
   bc4c0:	ea20 0002 	bic.w	r0, r0, r2
   bc4c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bc4c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc4cc:	bf08      	it	eq
   bc4ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc4d2:	bd70      	pop	{r4, r5, r6, pc}
   bc4d4:	f094 0f00 	teq	r4, #0
   bc4d8:	d10f      	bne.n	bc4fa <__aeabi_dmul+0x1c2>
   bc4da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bc4de:	0040      	lsls	r0, r0, #1
   bc4e0:	eb41 0101 	adc.w	r1, r1, r1
   bc4e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc4e8:	bf08      	it	eq
   bc4ea:	3c01      	subeq	r4, #1
   bc4ec:	d0f7      	beq.n	bc4de <__aeabi_dmul+0x1a6>
   bc4ee:	ea41 0106 	orr.w	r1, r1, r6
   bc4f2:	f095 0f00 	teq	r5, #0
   bc4f6:	bf18      	it	ne
   bc4f8:	4770      	bxne	lr
   bc4fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bc4fe:	0052      	lsls	r2, r2, #1
   bc500:	eb43 0303 	adc.w	r3, r3, r3
   bc504:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bc508:	bf08      	it	eq
   bc50a:	3d01      	subeq	r5, #1
   bc50c:	d0f7      	beq.n	bc4fe <__aeabi_dmul+0x1c6>
   bc50e:	ea43 0306 	orr.w	r3, r3, r6
   bc512:	4770      	bx	lr
   bc514:	ea94 0f0c 	teq	r4, ip
   bc518:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bc51c:	bf18      	it	ne
   bc51e:	ea95 0f0c 	teqne	r5, ip
   bc522:	d00c      	beq.n	bc53e <__aeabi_dmul+0x206>
   bc524:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc528:	bf18      	it	ne
   bc52a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc52e:	d1d1      	bne.n	bc4d4 <__aeabi_dmul+0x19c>
   bc530:	ea81 0103 	eor.w	r1, r1, r3
   bc534:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc538:	f04f 0000 	mov.w	r0, #0
   bc53c:	bd70      	pop	{r4, r5, r6, pc}
   bc53e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc542:	bf06      	itte	eq
   bc544:	4610      	moveq	r0, r2
   bc546:	4619      	moveq	r1, r3
   bc548:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc54c:	d019      	beq.n	bc582 <__aeabi_dmul+0x24a>
   bc54e:	ea94 0f0c 	teq	r4, ip
   bc552:	d102      	bne.n	bc55a <__aeabi_dmul+0x222>
   bc554:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bc558:	d113      	bne.n	bc582 <__aeabi_dmul+0x24a>
   bc55a:	ea95 0f0c 	teq	r5, ip
   bc55e:	d105      	bne.n	bc56c <__aeabi_dmul+0x234>
   bc560:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bc564:	bf1c      	itt	ne
   bc566:	4610      	movne	r0, r2
   bc568:	4619      	movne	r1, r3
   bc56a:	d10a      	bne.n	bc582 <__aeabi_dmul+0x24a>
   bc56c:	ea81 0103 	eor.w	r1, r1, r3
   bc570:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc574:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bc578:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bc57c:	f04f 0000 	mov.w	r0, #0
   bc580:	bd70      	pop	{r4, r5, r6, pc}
   bc582:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bc586:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bc58a:	bd70      	pop	{r4, r5, r6, pc}

000bc58c <__aeabi_ddiv>:
   bc58c:	b570      	push	{r4, r5, r6, lr}
   bc58e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bc592:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bc596:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bc59a:	bf1d      	ittte	ne
   bc59c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bc5a0:	ea94 0f0c 	teqne	r4, ip
   bc5a4:	ea95 0f0c 	teqne	r5, ip
   bc5a8:	f000 f8a7 	bleq	bc6fa <__aeabi_ddiv+0x16e>
   bc5ac:	eba4 0405 	sub.w	r4, r4, r5
   bc5b0:	ea81 0e03 	eor.w	lr, r1, r3
   bc5b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bc5b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bc5bc:	f000 8088 	beq.w	bc6d0 <__aeabi_ddiv+0x144>
   bc5c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bc5c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bc5c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bc5cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bc5d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bc5d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bc5d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bc5dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bc5e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bc5e4:	429d      	cmp	r5, r3
   bc5e6:	bf08      	it	eq
   bc5e8:	4296      	cmpeq	r6, r2
   bc5ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bc5ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bc5f2:	d202      	bcs.n	bc5fa <__aeabi_ddiv+0x6e>
   bc5f4:	085b      	lsrs	r3, r3, #1
   bc5f6:	ea4f 0232 	mov.w	r2, r2, rrx
   bc5fa:	1ab6      	subs	r6, r6, r2
   bc5fc:	eb65 0503 	sbc.w	r5, r5, r3
   bc600:	085b      	lsrs	r3, r3, #1
   bc602:	ea4f 0232 	mov.w	r2, r2, rrx
   bc606:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bc60a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bc60e:	ebb6 0e02 	subs.w	lr, r6, r2
   bc612:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc616:	bf22      	ittt	cs
   bc618:	1ab6      	subcs	r6, r6, r2
   bc61a:	4675      	movcs	r5, lr
   bc61c:	ea40 000c 	orrcs.w	r0, r0, ip
   bc620:	085b      	lsrs	r3, r3, #1
   bc622:	ea4f 0232 	mov.w	r2, r2, rrx
   bc626:	ebb6 0e02 	subs.w	lr, r6, r2
   bc62a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc62e:	bf22      	ittt	cs
   bc630:	1ab6      	subcs	r6, r6, r2
   bc632:	4675      	movcs	r5, lr
   bc634:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bc638:	085b      	lsrs	r3, r3, #1
   bc63a:	ea4f 0232 	mov.w	r2, r2, rrx
   bc63e:	ebb6 0e02 	subs.w	lr, r6, r2
   bc642:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc646:	bf22      	ittt	cs
   bc648:	1ab6      	subcs	r6, r6, r2
   bc64a:	4675      	movcs	r5, lr
   bc64c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bc650:	085b      	lsrs	r3, r3, #1
   bc652:	ea4f 0232 	mov.w	r2, r2, rrx
   bc656:	ebb6 0e02 	subs.w	lr, r6, r2
   bc65a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc65e:	bf22      	ittt	cs
   bc660:	1ab6      	subcs	r6, r6, r2
   bc662:	4675      	movcs	r5, lr
   bc664:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bc668:	ea55 0e06 	orrs.w	lr, r5, r6
   bc66c:	d018      	beq.n	bc6a0 <__aeabi_ddiv+0x114>
   bc66e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bc672:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bc676:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bc67a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bc67e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bc682:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bc686:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bc68a:	d1c0      	bne.n	bc60e <__aeabi_ddiv+0x82>
   bc68c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc690:	d10b      	bne.n	bc6aa <__aeabi_ddiv+0x11e>
   bc692:	ea41 0100 	orr.w	r1, r1, r0
   bc696:	f04f 0000 	mov.w	r0, #0
   bc69a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bc69e:	e7b6      	b.n	bc60e <__aeabi_ddiv+0x82>
   bc6a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc6a4:	bf04      	itt	eq
   bc6a6:	4301      	orreq	r1, r0
   bc6a8:	2000      	moveq	r0, #0
   bc6aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bc6ae:	bf88      	it	hi
   bc6b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bc6b4:	f63f aeaf 	bhi.w	bc416 <__aeabi_dmul+0xde>
   bc6b8:	ebb5 0c03 	subs.w	ip, r5, r3
   bc6bc:	bf04      	itt	eq
   bc6be:	ebb6 0c02 	subseq.w	ip, r6, r2
   bc6c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bc6c6:	f150 0000 	adcs.w	r0, r0, #0
   bc6ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bc6ce:	bd70      	pop	{r4, r5, r6, pc}
   bc6d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bc6d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bc6d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bc6dc:	bfc2      	ittt	gt
   bc6de:	ebd4 050c 	rsbsgt	r5, r4, ip
   bc6e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bc6e6:	bd70      	popgt	{r4, r5, r6, pc}
   bc6e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc6ec:	f04f 0e00 	mov.w	lr, #0
   bc6f0:	3c01      	subs	r4, #1
   bc6f2:	e690      	b.n	bc416 <__aeabi_dmul+0xde>
   bc6f4:	ea45 0e06 	orr.w	lr, r5, r6
   bc6f8:	e68d      	b.n	bc416 <__aeabi_dmul+0xde>
   bc6fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bc6fe:	ea94 0f0c 	teq	r4, ip
   bc702:	bf08      	it	eq
   bc704:	ea95 0f0c 	teqeq	r5, ip
   bc708:	f43f af3b 	beq.w	bc582 <__aeabi_dmul+0x24a>
   bc70c:	ea94 0f0c 	teq	r4, ip
   bc710:	d10a      	bne.n	bc728 <__aeabi_ddiv+0x19c>
   bc712:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bc716:	f47f af34 	bne.w	bc582 <__aeabi_dmul+0x24a>
   bc71a:	ea95 0f0c 	teq	r5, ip
   bc71e:	f47f af25 	bne.w	bc56c <__aeabi_dmul+0x234>
   bc722:	4610      	mov	r0, r2
   bc724:	4619      	mov	r1, r3
   bc726:	e72c      	b.n	bc582 <__aeabi_dmul+0x24a>
   bc728:	ea95 0f0c 	teq	r5, ip
   bc72c:	d106      	bne.n	bc73c <__aeabi_ddiv+0x1b0>
   bc72e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bc732:	f43f aefd 	beq.w	bc530 <__aeabi_dmul+0x1f8>
   bc736:	4610      	mov	r0, r2
   bc738:	4619      	mov	r1, r3
   bc73a:	e722      	b.n	bc582 <__aeabi_dmul+0x24a>
   bc73c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc740:	bf18      	it	ne
   bc742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc746:	f47f aec5 	bne.w	bc4d4 <__aeabi_dmul+0x19c>
   bc74a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bc74e:	f47f af0d 	bne.w	bc56c <__aeabi_dmul+0x234>
   bc752:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bc756:	f47f aeeb 	bne.w	bc530 <__aeabi_dmul+0x1f8>
   bc75a:	e712      	b.n	bc582 <__aeabi_dmul+0x24a>

000bc75c <__gedf2>:
   bc75c:	f04f 3cff 	mov.w	ip, #4294967295
   bc760:	e006      	b.n	bc770 <__cmpdf2+0x4>
   bc762:	bf00      	nop

000bc764 <__ledf2>:
   bc764:	f04f 0c01 	mov.w	ip, #1
   bc768:	e002      	b.n	bc770 <__cmpdf2+0x4>
   bc76a:	bf00      	nop

000bc76c <__cmpdf2>:
   bc76c:	f04f 0c01 	mov.w	ip, #1
   bc770:	f84d cd04 	str.w	ip, [sp, #-4]!
   bc774:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc778:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc77c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc780:	bf18      	it	ne
   bc782:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bc786:	d01b      	beq.n	bc7c0 <__cmpdf2+0x54>
   bc788:	b001      	add	sp, #4
   bc78a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bc78e:	bf0c      	ite	eq
   bc790:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bc794:	ea91 0f03 	teqne	r1, r3
   bc798:	bf02      	ittt	eq
   bc79a:	ea90 0f02 	teqeq	r0, r2
   bc79e:	2000      	moveq	r0, #0
   bc7a0:	4770      	bxeq	lr
   bc7a2:	f110 0f00 	cmn.w	r0, #0
   bc7a6:	ea91 0f03 	teq	r1, r3
   bc7aa:	bf58      	it	pl
   bc7ac:	4299      	cmppl	r1, r3
   bc7ae:	bf08      	it	eq
   bc7b0:	4290      	cmpeq	r0, r2
   bc7b2:	bf2c      	ite	cs
   bc7b4:	17d8      	asrcs	r0, r3, #31
   bc7b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bc7ba:	f040 0001 	orr.w	r0, r0, #1
   bc7be:	4770      	bx	lr
   bc7c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc7c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc7c8:	d102      	bne.n	bc7d0 <__cmpdf2+0x64>
   bc7ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bc7ce:	d107      	bne.n	bc7e0 <__cmpdf2+0x74>
   bc7d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc7d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc7d8:	d1d6      	bne.n	bc788 <__cmpdf2+0x1c>
   bc7da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bc7de:	d0d3      	beq.n	bc788 <__cmpdf2+0x1c>
   bc7e0:	f85d 0b04 	ldr.w	r0, [sp], #4
   bc7e4:	4770      	bx	lr
   bc7e6:	bf00      	nop

000bc7e8 <__aeabi_cdrcmple>:
   bc7e8:	4684      	mov	ip, r0
   bc7ea:	4610      	mov	r0, r2
   bc7ec:	4662      	mov	r2, ip
   bc7ee:	468c      	mov	ip, r1
   bc7f0:	4619      	mov	r1, r3
   bc7f2:	4663      	mov	r3, ip
   bc7f4:	e000      	b.n	bc7f8 <__aeabi_cdcmpeq>
   bc7f6:	bf00      	nop

000bc7f8 <__aeabi_cdcmpeq>:
   bc7f8:	b501      	push	{r0, lr}
   bc7fa:	f7ff ffb7 	bl	bc76c <__cmpdf2>
   bc7fe:	2800      	cmp	r0, #0
   bc800:	bf48      	it	mi
   bc802:	f110 0f00 	cmnmi.w	r0, #0
   bc806:	bd01      	pop	{r0, pc}

000bc808 <__aeabi_dcmpeq>:
   bc808:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc80c:	f7ff fff4 	bl	bc7f8 <__aeabi_cdcmpeq>
   bc810:	bf0c      	ite	eq
   bc812:	2001      	moveq	r0, #1
   bc814:	2000      	movne	r0, #0
   bc816:	f85d fb08 	ldr.w	pc, [sp], #8
   bc81a:	bf00      	nop

000bc81c <__aeabi_dcmplt>:
   bc81c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc820:	f7ff ffea 	bl	bc7f8 <__aeabi_cdcmpeq>
   bc824:	bf34      	ite	cc
   bc826:	2001      	movcc	r0, #1
   bc828:	2000      	movcs	r0, #0
   bc82a:	f85d fb08 	ldr.w	pc, [sp], #8
   bc82e:	bf00      	nop

000bc830 <__aeabi_dcmple>:
   bc830:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc834:	f7ff ffe0 	bl	bc7f8 <__aeabi_cdcmpeq>
   bc838:	bf94      	ite	ls
   bc83a:	2001      	movls	r0, #1
   bc83c:	2000      	movhi	r0, #0
   bc83e:	f85d fb08 	ldr.w	pc, [sp], #8
   bc842:	bf00      	nop

000bc844 <__aeabi_dcmpge>:
   bc844:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc848:	f7ff ffce 	bl	bc7e8 <__aeabi_cdrcmple>
   bc84c:	bf94      	ite	ls
   bc84e:	2001      	movls	r0, #1
   bc850:	2000      	movhi	r0, #0
   bc852:	f85d fb08 	ldr.w	pc, [sp], #8
   bc856:	bf00      	nop

000bc858 <__aeabi_dcmpgt>:
   bc858:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc85c:	f7ff ffc4 	bl	bc7e8 <__aeabi_cdrcmple>
   bc860:	bf34      	ite	cc
   bc862:	2001      	movcc	r0, #1
   bc864:	2000      	movcs	r0, #0
   bc866:	f85d fb08 	ldr.w	pc, [sp], #8
   bc86a:	bf00      	nop

000bc86c <__aeabi_dcmpun>:
   bc86c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc870:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc874:	d102      	bne.n	bc87c <__aeabi_dcmpun+0x10>
   bc876:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bc87a:	d10a      	bne.n	bc892 <__aeabi_dcmpun+0x26>
   bc87c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc880:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc884:	d102      	bne.n	bc88c <__aeabi_dcmpun+0x20>
   bc886:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bc88a:	d102      	bne.n	bc892 <__aeabi_dcmpun+0x26>
   bc88c:	f04f 0000 	mov.w	r0, #0
   bc890:	4770      	bx	lr
   bc892:	f04f 0001 	mov.w	r0, #1
   bc896:	4770      	bx	lr

000bc898 <__aeabi_d2iz>:
   bc898:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bc89c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bc8a0:	d215      	bcs.n	bc8ce <__aeabi_d2iz+0x36>
   bc8a2:	d511      	bpl.n	bc8c8 <__aeabi_d2iz+0x30>
   bc8a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bc8a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bc8ac:	d912      	bls.n	bc8d4 <__aeabi_d2iz+0x3c>
   bc8ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc8b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bc8b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bc8ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bc8be:	fa23 f002 	lsr.w	r0, r3, r2
   bc8c2:	bf18      	it	ne
   bc8c4:	4240      	negne	r0, r0
   bc8c6:	4770      	bx	lr
   bc8c8:	f04f 0000 	mov.w	r0, #0
   bc8cc:	4770      	bx	lr
   bc8ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bc8d2:	d105      	bne.n	bc8e0 <__aeabi_d2iz+0x48>
   bc8d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bc8d8:	bf08      	it	eq
   bc8da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bc8de:	4770      	bx	lr
   bc8e0:	f04f 0000 	mov.w	r0, #0
   bc8e4:	4770      	bx	lr
   bc8e6:	bf00      	nop

000bc8e8 <__aeabi_d2uiz>:
   bc8e8:	004a      	lsls	r2, r1, #1
   bc8ea:	d211      	bcs.n	bc910 <__aeabi_d2uiz+0x28>
   bc8ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bc8f0:	d211      	bcs.n	bc916 <__aeabi_d2uiz+0x2e>
   bc8f2:	d50d      	bpl.n	bc910 <__aeabi_d2uiz+0x28>
   bc8f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bc8f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bc8fc:	d40e      	bmi.n	bc91c <__aeabi_d2uiz+0x34>
   bc8fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bc906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bc90a:	fa23 f002 	lsr.w	r0, r3, r2
   bc90e:	4770      	bx	lr
   bc910:	f04f 0000 	mov.w	r0, #0
   bc914:	4770      	bx	lr
   bc916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bc91a:	d102      	bne.n	bc922 <__aeabi_d2uiz+0x3a>
   bc91c:	f04f 30ff 	mov.w	r0, #4294967295
   bc920:	4770      	bx	lr
   bc922:	f04f 0000 	mov.w	r0, #0
   bc926:	4770      	bx	lr

000bc928 <__aeabi_d2f>:
   bc928:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bc92c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bc930:	bf24      	itt	cs
   bc932:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bc936:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bc93a:	d90d      	bls.n	bc958 <__aeabi_d2f+0x30>
   bc93c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bc940:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bc944:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bc948:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bc94c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bc950:	bf08      	it	eq
   bc952:	f020 0001 	biceq.w	r0, r0, #1
   bc956:	4770      	bx	lr
   bc958:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bc95c:	d121      	bne.n	bc9a2 <__aeabi_d2f+0x7a>
   bc95e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bc962:	bfbc      	itt	lt
   bc964:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bc968:	4770      	bxlt	lr
   bc96a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc96e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bc972:	f1c2 0218 	rsb	r2, r2, #24
   bc976:	f1c2 0c20 	rsb	ip, r2, #32
   bc97a:	fa10 f30c 	lsls.w	r3, r0, ip
   bc97e:	fa20 f002 	lsr.w	r0, r0, r2
   bc982:	bf18      	it	ne
   bc984:	f040 0001 	orrne.w	r0, r0, #1
   bc988:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc98c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bc990:	fa03 fc0c 	lsl.w	ip, r3, ip
   bc994:	ea40 000c 	orr.w	r0, r0, ip
   bc998:	fa23 f302 	lsr.w	r3, r3, r2
   bc99c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bc9a0:	e7cc      	b.n	bc93c <__aeabi_d2f+0x14>
   bc9a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bc9a6:	d107      	bne.n	bc9b8 <__aeabi_d2f+0x90>
   bc9a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bc9ac:	bf1e      	ittt	ne
   bc9ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bc9b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bc9b6:	4770      	bxne	lr
   bc9b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bc9bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bc9c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bc9c4:	4770      	bx	lr
   bc9c6:	bf00      	nop

000bc9c8 <__aeabi_frsub>:
   bc9c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   bc9cc:	e002      	b.n	bc9d4 <__addsf3>
   bc9ce:	bf00      	nop

000bc9d0 <__aeabi_fsub>:
   bc9d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000bc9d4 <__addsf3>:
   bc9d4:	0042      	lsls	r2, r0, #1
   bc9d6:	bf1f      	itttt	ne
   bc9d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   bc9dc:	ea92 0f03 	teqne	r2, r3
   bc9e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   bc9e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   bc9e8:	d06a      	beq.n	bcac0 <__addsf3+0xec>
   bc9ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
   bc9ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   bc9f2:	bfc1      	itttt	gt
   bc9f4:	18d2      	addgt	r2, r2, r3
   bc9f6:	4041      	eorgt	r1, r0
   bc9f8:	4048      	eorgt	r0, r1
   bc9fa:	4041      	eorgt	r1, r0
   bc9fc:	bfb8      	it	lt
   bc9fe:	425b      	neglt	r3, r3
   bca00:	2b19      	cmp	r3, #25
   bca02:	bf88      	it	hi
   bca04:	4770      	bxhi	lr
   bca06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   bca0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bca0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   bca12:	bf18      	it	ne
   bca14:	4240      	negne	r0, r0
   bca16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bca1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   bca1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   bca22:	bf18      	it	ne
   bca24:	4249      	negne	r1, r1
   bca26:	ea92 0f03 	teq	r2, r3
   bca2a:	d03f      	beq.n	bcaac <__addsf3+0xd8>
   bca2c:	f1a2 0201 	sub.w	r2, r2, #1
   bca30:	fa41 fc03 	asr.w	ip, r1, r3
   bca34:	eb10 000c 	adds.w	r0, r0, ip
   bca38:	f1c3 0320 	rsb	r3, r3, #32
   bca3c:	fa01 f103 	lsl.w	r1, r1, r3
   bca40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   bca44:	d502      	bpl.n	bca4c <__addsf3+0x78>
   bca46:	4249      	negs	r1, r1
   bca48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   bca4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   bca50:	d313      	bcc.n	bca7a <__addsf3+0xa6>
   bca52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   bca56:	d306      	bcc.n	bca66 <__addsf3+0x92>
   bca58:	0840      	lsrs	r0, r0, #1
   bca5a:	ea4f 0131 	mov.w	r1, r1, rrx
   bca5e:	f102 0201 	add.w	r2, r2, #1
   bca62:	2afe      	cmp	r2, #254	; 0xfe
   bca64:	d251      	bcs.n	bcb0a <__addsf3+0x136>
   bca66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   bca6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   bca6e:	bf08      	it	eq
   bca70:	f020 0001 	biceq.w	r0, r0, #1
   bca74:	ea40 0003 	orr.w	r0, r0, r3
   bca78:	4770      	bx	lr
   bca7a:	0049      	lsls	r1, r1, #1
   bca7c:	eb40 0000 	adc.w	r0, r0, r0
   bca80:	3a01      	subs	r2, #1
   bca82:	bf28      	it	cs
   bca84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   bca88:	d2ed      	bcs.n	bca66 <__addsf3+0x92>
   bca8a:	fab0 fc80 	clz	ip, r0
   bca8e:	f1ac 0c08 	sub.w	ip, ip, #8
   bca92:	ebb2 020c 	subs.w	r2, r2, ip
   bca96:	fa00 f00c 	lsl.w	r0, r0, ip
   bca9a:	bfaa      	itet	ge
   bca9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   bcaa0:	4252      	neglt	r2, r2
   bcaa2:	4318      	orrge	r0, r3
   bcaa4:	bfbc      	itt	lt
   bcaa6:	40d0      	lsrlt	r0, r2
   bcaa8:	4318      	orrlt	r0, r3
   bcaaa:	4770      	bx	lr
   bcaac:	f092 0f00 	teq	r2, #0
   bcab0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   bcab4:	bf06      	itte	eq
   bcab6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   bcaba:	3201      	addeq	r2, #1
   bcabc:	3b01      	subne	r3, #1
   bcabe:	e7b5      	b.n	bca2c <__addsf3+0x58>
   bcac0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   bcac4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   bcac8:	bf18      	it	ne
   bcaca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   bcace:	d021      	beq.n	bcb14 <__addsf3+0x140>
   bcad0:	ea92 0f03 	teq	r2, r3
   bcad4:	d004      	beq.n	bcae0 <__addsf3+0x10c>
   bcad6:	f092 0f00 	teq	r2, #0
   bcada:	bf08      	it	eq
   bcadc:	4608      	moveq	r0, r1
   bcade:	4770      	bx	lr
   bcae0:	ea90 0f01 	teq	r0, r1
   bcae4:	bf1c      	itt	ne
   bcae6:	2000      	movne	r0, #0
   bcae8:	4770      	bxne	lr
   bcaea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   bcaee:	d104      	bne.n	bcafa <__addsf3+0x126>
   bcaf0:	0040      	lsls	r0, r0, #1
   bcaf2:	bf28      	it	cs
   bcaf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   bcaf8:	4770      	bx	lr
   bcafa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   bcafe:	bf3c      	itt	cc
   bcb00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   bcb04:	4770      	bxcc	lr
   bcb06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   bcb0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   bcb0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bcb12:	4770      	bx	lr
   bcb14:	ea7f 6222 	mvns.w	r2, r2, asr #24
   bcb18:	bf16      	itet	ne
   bcb1a:	4608      	movne	r0, r1
   bcb1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   bcb20:	4601      	movne	r1, r0
   bcb22:	0242      	lsls	r2, r0, #9
   bcb24:	bf06      	itte	eq
   bcb26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   bcb2a:	ea90 0f01 	teqeq	r0, r1
   bcb2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   bcb32:	4770      	bx	lr

000bcb34 <__aeabi_ui2f>:
   bcb34:	f04f 0300 	mov.w	r3, #0
   bcb38:	e004      	b.n	bcb44 <__aeabi_i2f+0x8>
   bcb3a:	bf00      	nop

000bcb3c <__aeabi_i2f>:
   bcb3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   bcb40:	bf48      	it	mi
   bcb42:	4240      	negmi	r0, r0
   bcb44:	ea5f 0c00 	movs.w	ip, r0
   bcb48:	bf08      	it	eq
   bcb4a:	4770      	bxeq	lr
   bcb4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   bcb50:	4601      	mov	r1, r0
   bcb52:	f04f 0000 	mov.w	r0, #0
   bcb56:	e01c      	b.n	bcb92 <__aeabi_l2f+0x2a>

000bcb58 <__aeabi_ul2f>:
   bcb58:	ea50 0201 	orrs.w	r2, r0, r1
   bcb5c:	bf08      	it	eq
   bcb5e:	4770      	bxeq	lr
   bcb60:	f04f 0300 	mov.w	r3, #0
   bcb64:	e00a      	b.n	bcb7c <__aeabi_l2f+0x14>
   bcb66:	bf00      	nop

000bcb68 <__aeabi_l2f>:
   bcb68:	ea50 0201 	orrs.w	r2, r0, r1
   bcb6c:	bf08      	it	eq
   bcb6e:	4770      	bxeq	lr
   bcb70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   bcb74:	d502      	bpl.n	bcb7c <__aeabi_l2f+0x14>
   bcb76:	4240      	negs	r0, r0
   bcb78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bcb7c:	ea5f 0c01 	movs.w	ip, r1
   bcb80:	bf02      	ittt	eq
   bcb82:	4684      	moveq	ip, r0
   bcb84:	4601      	moveq	r1, r0
   bcb86:	2000      	moveq	r0, #0
   bcb88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   bcb8c:	bf08      	it	eq
   bcb8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   bcb92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   bcb96:	fabc f28c 	clz	r2, ip
   bcb9a:	3a08      	subs	r2, #8
   bcb9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   bcba0:	db10      	blt.n	bcbc4 <__aeabi_l2f+0x5c>
   bcba2:	fa01 fc02 	lsl.w	ip, r1, r2
   bcba6:	4463      	add	r3, ip
   bcba8:	fa00 fc02 	lsl.w	ip, r0, r2
   bcbac:	f1c2 0220 	rsb	r2, r2, #32
   bcbb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bcbb4:	fa20 f202 	lsr.w	r2, r0, r2
   bcbb8:	eb43 0002 	adc.w	r0, r3, r2
   bcbbc:	bf08      	it	eq
   bcbbe:	f020 0001 	biceq.w	r0, r0, #1
   bcbc2:	4770      	bx	lr
   bcbc4:	f102 0220 	add.w	r2, r2, #32
   bcbc8:	fa01 fc02 	lsl.w	ip, r1, r2
   bcbcc:	f1c2 0220 	rsb	r2, r2, #32
   bcbd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   bcbd4:	fa21 f202 	lsr.w	r2, r1, r2
   bcbd8:	eb43 0002 	adc.w	r0, r3, r2
   bcbdc:	bf08      	it	eq
   bcbde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   bcbe2:	4770      	bx	lr

000bcbe4 <__aeabi_ldivmod>:
   bcbe4:	b97b      	cbnz	r3, bcc06 <__aeabi_ldivmod+0x22>
   bcbe6:	b972      	cbnz	r2, bcc06 <__aeabi_ldivmod+0x22>
   bcbe8:	2900      	cmp	r1, #0
   bcbea:	bfbe      	ittt	lt
   bcbec:	2000      	movlt	r0, #0
   bcbee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   bcbf2:	e006      	blt.n	bcc02 <__aeabi_ldivmod+0x1e>
   bcbf4:	bf08      	it	eq
   bcbf6:	2800      	cmpeq	r0, #0
   bcbf8:	bf1c      	itt	ne
   bcbfa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   bcbfe:	f04f 30ff 	movne.w	r0, #4294967295
   bcc02:	f000 b9bf 	b.w	bcf84 <__aeabi_idiv0>
   bcc06:	f1ad 0c08 	sub.w	ip, sp, #8
   bcc0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   bcc0e:	2900      	cmp	r1, #0
   bcc10:	db09      	blt.n	bcc26 <__aeabi_ldivmod+0x42>
   bcc12:	2b00      	cmp	r3, #0
   bcc14:	db1a      	blt.n	bcc4c <__aeabi_ldivmod+0x68>
   bcc16:	f000 f84d 	bl	bccb4 <__udivmoddi4>
   bcc1a:	f8dd e004 	ldr.w	lr, [sp, #4]
   bcc1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   bcc22:	b004      	add	sp, #16
   bcc24:	4770      	bx	lr
   bcc26:	4240      	negs	r0, r0
   bcc28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bcc2c:	2b00      	cmp	r3, #0
   bcc2e:	db1b      	blt.n	bcc68 <__aeabi_ldivmod+0x84>
   bcc30:	f000 f840 	bl	bccb4 <__udivmoddi4>
   bcc34:	f8dd e004 	ldr.w	lr, [sp, #4]
   bcc38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   bcc3c:	b004      	add	sp, #16
   bcc3e:	4240      	negs	r0, r0
   bcc40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bcc44:	4252      	negs	r2, r2
   bcc46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bcc4a:	4770      	bx	lr
   bcc4c:	4252      	negs	r2, r2
   bcc4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bcc52:	f000 f82f 	bl	bccb4 <__udivmoddi4>
   bcc56:	f8dd e004 	ldr.w	lr, [sp, #4]
   bcc5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   bcc5e:	b004      	add	sp, #16
   bcc60:	4240      	negs	r0, r0
   bcc62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bcc66:	4770      	bx	lr
   bcc68:	4252      	negs	r2, r2
   bcc6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bcc6e:	f000 f821 	bl	bccb4 <__udivmoddi4>
   bcc72:	f8dd e004 	ldr.w	lr, [sp, #4]
   bcc76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   bcc7a:	b004      	add	sp, #16
   bcc7c:	4252      	negs	r2, r2
   bcc7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bcc82:	4770      	bx	lr

000bcc84 <__aeabi_uldivmod>:
   bcc84:	b953      	cbnz	r3, bcc9c <__aeabi_uldivmod+0x18>
   bcc86:	b94a      	cbnz	r2, bcc9c <__aeabi_uldivmod+0x18>
   bcc88:	2900      	cmp	r1, #0
   bcc8a:	bf08      	it	eq
   bcc8c:	2800      	cmpeq	r0, #0
   bcc8e:	bf1c      	itt	ne
   bcc90:	f04f 31ff 	movne.w	r1, #4294967295
   bcc94:	f04f 30ff 	movne.w	r0, #4294967295
   bcc98:	f000 b974 	b.w	bcf84 <__aeabi_idiv0>
   bcc9c:	f1ad 0c08 	sub.w	ip, sp, #8
   bcca0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   bcca4:	f000 f806 	bl	bccb4 <__udivmoddi4>
   bcca8:	f8dd e004 	ldr.w	lr, [sp, #4]
   bccac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   bccb0:	b004      	add	sp, #16
   bccb2:	4770      	bx	lr

000bccb4 <__udivmoddi4>:
   bccb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bccb8:	9d08      	ldr	r5, [sp, #32]
   bccba:	4604      	mov	r4, r0
   bccbc:	468e      	mov	lr, r1
   bccbe:	2b00      	cmp	r3, #0
   bccc0:	d14d      	bne.n	bcd5e <__udivmoddi4+0xaa>
   bccc2:	428a      	cmp	r2, r1
   bccc4:	4694      	mov	ip, r2
   bccc6:	d969      	bls.n	bcd9c <__udivmoddi4+0xe8>
   bccc8:	fab2 f282 	clz	r2, r2
   bcccc:	b152      	cbz	r2, bcce4 <__udivmoddi4+0x30>
   bccce:	fa01 f302 	lsl.w	r3, r1, r2
   bccd2:	f1c2 0120 	rsb	r1, r2, #32
   bccd6:	fa20 f101 	lsr.w	r1, r0, r1
   bccda:	fa0c fc02 	lsl.w	ip, ip, r2
   bccde:	ea41 0e03 	orr.w	lr, r1, r3
   bcce2:	4094      	lsls	r4, r2
   bcce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
   bcce8:	0c21      	lsrs	r1, r4, #16
   bccea:	fbbe f6f8 	udiv	r6, lr, r8
   bccee:	fa1f f78c 	uxth.w	r7, ip
   bccf2:	fb08 e316 	mls	r3, r8, r6, lr
   bccf6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   bccfa:	fb06 f107 	mul.w	r1, r6, r7
   bccfe:	4299      	cmp	r1, r3
   bcd00:	d90a      	bls.n	bcd18 <__udivmoddi4+0x64>
   bcd02:	eb1c 0303 	adds.w	r3, ip, r3
   bcd06:	f106 30ff 	add.w	r0, r6, #4294967295
   bcd0a:	f080 811f 	bcs.w	bcf4c <__udivmoddi4+0x298>
   bcd0e:	4299      	cmp	r1, r3
   bcd10:	f240 811c 	bls.w	bcf4c <__udivmoddi4+0x298>
   bcd14:	3e02      	subs	r6, #2
   bcd16:	4463      	add	r3, ip
   bcd18:	1a5b      	subs	r3, r3, r1
   bcd1a:	b2a4      	uxth	r4, r4
   bcd1c:	fbb3 f0f8 	udiv	r0, r3, r8
   bcd20:	fb08 3310 	mls	r3, r8, r0, r3
   bcd24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   bcd28:	fb00 f707 	mul.w	r7, r0, r7
   bcd2c:	42a7      	cmp	r7, r4
   bcd2e:	d90a      	bls.n	bcd46 <__udivmoddi4+0x92>
   bcd30:	eb1c 0404 	adds.w	r4, ip, r4
   bcd34:	f100 33ff 	add.w	r3, r0, #4294967295
   bcd38:	f080 810a 	bcs.w	bcf50 <__udivmoddi4+0x29c>
   bcd3c:	42a7      	cmp	r7, r4
   bcd3e:	f240 8107 	bls.w	bcf50 <__udivmoddi4+0x29c>
   bcd42:	4464      	add	r4, ip
   bcd44:	3802      	subs	r0, #2
   bcd46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   bcd4a:	1be4      	subs	r4, r4, r7
   bcd4c:	2600      	movs	r6, #0
   bcd4e:	b11d      	cbz	r5, bcd58 <__udivmoddi4+0xa4>
   bcd50:	40d4      	lsrs	r4, r2
   bcd52:	2300      	movs	r3, #0
   bcd54:	e9c5 4300 	strd	r4, r3, [r5]
   bcd58:	4631      	mov	r1, r6
   bcd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bcd5e:	428b      	cmp	r3, r1
   bcd60:	d909      	bls.n	bcd76 <__udivmoddi4+0xc2>
   bcd62:	2d00      	cmp	r5, #0
   bcd64:	f000 80ef 	beq.w	bcf46 <__udivmoddi4+0x292>
   bcd68:	2600      	movs	r6, #0
   bcd6a:	e9c5 0100 	strd	r0, r1, [r5]
   bcd6e:	4630      	mov	r0, r6
   bcd70:	4631      	mov	r1, r6
   bcd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bcd76:	fab3 f683 	clz	r6, r3
   bcd7a:	2e00      	cmp	r6, #0
   bcd7c:	d14a      	bne.n	bce14 <__udivmoddi4+0x160>
   bcd7e:	428b      	cmp	r3, r1
   bcd80:	d302      	bcc.n	bcd88 <__udivmoddi4+0xd4>
   bcd82:	4282      	cmp	r2, r0
   bcd84:	f200 80f9 	bhi.w	bcf7a <__udivmoddi4+0x2c6>
   bcd88:	1a84      	subs	r4, r0, r2
   bcd8a:	eb61 0303 	sbc.w	r3, r1, r3
   bcd8e:	2001      	movs	r0, #1
   bcd90:	469e      	mov	lr, r3
   bcd92:	2d00      	cmp	r5, #0
   bcd94:	d0e0      	beq.n	bcd58 <__udivmoddi4+0xa4>
   bcd96:	e9c5 4e00 	strd	r4, lr, [r5]
   bcd9a:	e7dd      	b.n	bcd58 <__udivmoddi4+0xa4>
   bcd9c:	b902      	cbnz	r2, bcda0 <__udivmoddi4+0xec>
   bcd9e:	deff      	udf	#255	; 0xff
   bcda0:	fab2 f282 	clz	r2, r2
   bcda4:	2a00      	cmp	r2, #0
   bcda6:	f040 8092 	bne.w	bcece <__udivmoddi4+0x21a>
   bcdaa:	eba1 010c 	sub.w	r1, r1, ip
   bcdae:	ea4f 471c 	mov.w	r7, ip, lsr #16
   bcdb2:	fa1f fe8c 	uxth.w	lr, ip
   bcdb6:	2601      	movs	r6, #1
   bcdb8:	0c20      	lsrs	r0, r4, #16
   bcdba:	fbb1 f3f7 	udiv	r3, r1, r7
   bcdbe:	fb07 1113 	mls	r1, r7, r3, r1
   bcdc2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   bcdc6:	fb0e f003 	mul.w	r0, lr, r3
   bcdca:	4288      	cmp	r0, r1
   bcdcc:	d908      	bls.n	bcde0 <__udivmoddi4+0x12c>
   bcdce:	eb1c 0101 	adds.w	r1, ip, r1
   bcdd2:	f103 38ff 	add.w	r8, r3, #4294967295
   bcdd6:	d202      	bcs.n	bcdde <__udivmoddi4+0x12a>
   bcdd8:	4288      	cmp	r0, r1
   bcdda:	f200 80cb 	bhi.w	bcf74 <__udivmoddi4+0x2c0>
   bcdde:	4643      	mov	r3, r8
   bcde0:	1a09      	subs	r1, r1, r0
   bcde2:	b2a4      	uxth	r4, r4
   bcde4:	fbb1 f0f7 	udiv	r0, r1, r7
   bcde8:	fb07 1110 	mls	r1, r7, r0, r1
   bcdec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   bcdf0:	fb0e fe00 	mul.w	lr, lr, r0
   bcdf4:	45a6      	cmp	lr, r4
   bcdf6:	d908      	bls.n	bce0a <__udivmoddi4+0x156>
   bcdf8:	eb1c 0404 	adds.w	r4, ip, r4
   bcdfc:	f100 31ff 	add.w	r1, r0, #4294967295
   bce00:	d202      	bcs.n	bce08 <__udivmoddi4+0x154>
   bce02:	45a6      	cmp	lr, r4
   bce04:	f200 80bb 	bhi.w	bcf7e <__udivmoddi4+0x2ca>
   bce08:	4608      	mov	r0, r1
   bce0a:	eba4 040e 	sub.w	r4, r4, lr
   bce0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   bce12:	e79c      	b.n	bcd4e <__udivmoddi4+0x9a>
   bce14:	f1c6 0720 	rsb	r7, r6, #32
   bce18:	40b3      	lsls	r3, r6
   bce1a:	fa22 fc07 	lsr.w	ip, r2, r7
   bce1e:	ea4c 0c03 	orr.w	ip, ip, r3
   bce22:	fa20 f407 	lsr.w	r4, r0, r7
   bce26:	fa01 f306 	lsl.w	r3, r1, r6
   bce2a:	431c      	orrs	r4, r3
   bce2c:	40f9      	lsrs	r1, r7
   bce2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   bce32:	fa00 f306 	lsl.w	r3, r0, r6
   bce36:	fbb1 f8f9 	udiv	r8, r1, r9
   bce3a:	0c20      	lsrs	r0, r4, #16
   bce3c:	fa1f fe8c 	uxth.w	lr, ip
   bce40:	fb09 1118 	mls	r1, r9, r8, r1
   bce44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   bce48:	fb08 f00e 	mul.w	r0, r8, lr
   bce4c:	4288      	cmp	r0, r1
   bce4e:	fa02 f206 	lsl.w	r2, r2, r6
   bce52:	d90b      	bls.n	bce6c <__udivmoddi4+0x1b8>
   bce54:	eb1c 0101 	adds.w	r1, ip, r1
   bce58:	f108 3aff 	add.w	sl, r8, #4294967295
   bce5c:	f080 8088 	bcs.w	bcf70 <__udivmoddi4+0x2bc>
   bce60:	4288      	cmp	r0, r1
   bce62:	f240 8085 	bls.w	bcf70 <__udivmoddi4+0x2bc>
   bce66:	f1a8 0802 	sub.w	r8, r8, #2
   bce6a:	4461      	add	r1, ip
   bce6c:	1a09      	subs	r1, r1, r0
   bce6e:	b2a4      	uxth	r4, r4
   bce70:	fbb1 f0f9 	udiv	r0, r1, r9
   bce74:	fb09 1110 	mls	r1, r9, r0, r1
   bce78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   bce7c:	fb00 fe0e 	mul.w	lr, r0, lr
   bce80:	458e      	cmp	lr, r1
   bce82:	d908      	bls.n	bce96 <__udivmoddi4+0x1e2>
   bce84:	eb1c 0101 	adds.w	r1, ip, r1
   bce88:	f100 34ff 	add.w	r4, r0, #4294967295
   bce8c:	d26c      	bcs.n	bcf68 <__udivmoddi4+0x2b4>
   bce8e:	458e      	cmp	lr, r1
   bce90:	d96a      	bls.n	bcf68 <__udivmoddi4+0x2b4>
   bce92:	3802      	subs	r0, #2
   bce94:	4461      	add	r1, ip
   bce96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   bce9a:	fba0 9402 	umull	r9, r4, r0, r2
   bce9e:	eba1 010e 	sub.w	r1, r1, lr
   bcea2:	42a1      	cmp	r1, r4
   bcea4:	46c8      	mov	r8, r9
   bcea6:	46a6      	mov	lr, r4
   bcea8:	d356      	bcc.n	bcf58 <__udivmoddi4+0x2a4>
   bceaa:	d053      	beq.n	bcf54 <__udivmoddi4+0x2a0>
   bceac:	b15d      	cbz	r5, bcec6 <__udivmoddi4+0x212>
   bceae:	ebb3 0208 	subs.w	r2, r3, r8
   bceb2:	eb61 010e 	sbc.w	r1, r1, lr
   bceb6:	fa01 f707 	lsl.w	r7, r1, r7
   bceba:	fa22 f306 	lsr.w	r3, r2, r6
   bcebe:	40f1      	lsrs	r1, r6
   bcec0:	431f      	orrs	r7, r3
   bcec2:	e9c5 7100 	strd	r7, r1, [r5]
   bcec6:	2600      	movs	r6, #0
   bcec8:	4631      	mov	r1, r6
   bceca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bcece:	f1c2 0320 	rsb	r3, r2, #32
   bced2:	40d8      	lsrs	r0, r3
   bced4:	fa0c fc02 	lsl.w	ip, ip, r2
   bced8:	fa21 f303 	lsr.w	r3, r1, r3
   bcedc:	4091      	lsls	r1, r2
   bcede:	4301      	orrs	r1, r0
   bcee0:	ea4f 471c 	mov.w	r7, ip, lsr #16
   bcee4:	fa1f fe8c 	uxth.w	lr, ip
   bcee8:	fbb3 f0f7 	udiv	r0, r3, r7
   bceec:	fb07 3610 	mls	r6, r7, r0, r3
   bcef0:	0c0b      	lsrs	r3, r1, #16
   bcef2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   bcef6:	fb00 f60e 	mul.w	r6, r0, lr
   bcefa:	429e      	cmp	r6, r3
   bcefc:	fa04 f402 	lsl.w	r4, r4, r2
   bcf00:	d908      	bls.n	bcf14 <__udivmoddi4+0x260>
   bcf02:	eb1c 0303 	adds.w	r3, ip, r3
   bcf06:	f100 38ff 	add.w	r8, r0, #4294967295
   bcf0a:	d22f      	bcs.n	bcf6c <__udivmoddi4+0x2b8>
   bcf0c:	429e      	cmp	r6, r3
   bcf0e:	d92d      	bls.n	bcf6c <__udivmoddi4+0x2b8>
   bcf10:	3802      	subs	r0, #2
   bcf12:	4463      	add	r3, ip
   bcf14:	1b9b      	subs	r3, r3, r6
   bcf16:	b289      	uxth	r1, r1
   bcf18:	fbb3 f6f7 	udiv	r6, r3, r7
   bcf1c:	fb07 3316 	mls	r3, r7, r6, r3
   bcf20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   bcf24:	fb06 f30e 	mul.w	r3, r6, lr
   bcf28:	428b      	cmp	r3, r1
   bcf2a:	d908      	bls.n	bcf3e <__udivmoddi4+0x28a>
   bcf2c:	eb1c 0101 	adds.w	r1, ip, r1
   bcf30:	f106 38ff 	add.w	r8, r6, #4294967295
   bcf34:	d216      	bcs.n	bcf64 <__udivmoddi4+0x2b0>
   bcf36:	428b      	cmp	r3, r1
   bcf38:	d914      	bls.n	bcf64 <__udivmoddi4+0x2b0>
   bcf3a:	3e02      	subs	r6, #2
   bcf3c:	4461      	add	r1, ip
   bcf3e:	1ac9      	subs	r1, r1, r3
   bcf40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   bcf44:	e738      	b.n	bcdb8 <__udivmoddi4+0x104>
   bcf46:	462e      	mov	r6, r5
   bcf48:	4628      	mov	r0, r5
   bcf4a:	e705      	b.n	bcd58 <__udivmoddi4+0xa4>
   bcf4c:	4606      	mov	r6, r0
   bcf4e:	e6e3      	b.n	bcd18 <__udivmoddi4+0x64>
   bcf50:	4618      	mov	r0, r3
   bcf52:	e6f8      	b.n	bcd46 <__udivmoddi4+0x92>
   bcf54:	454b      	cmp	r3, r9
   bcf56:	d2a9      	bcs.n	bceac <__udivmoddi4+0x1f8>
   bcf58:	ebb9 0802 	subs.w	r8, r9, r2
   bcf5c:	eb64 0e0c 	sbc.w	lr, r4, ip
   bcf60:	3801      	subs	r0, #1
   bcf62:	e7a3      	b.n	bceac <__udivmoddi4+0x1f8>
   bcf64:	4646      	mov	r6, r8
   bcf66:	e7ea      	b.n	bcf3e <__udivmoddi4+0x28a>
   bcf68:	4620      	mov	r0, r4
   bcf6a:	e794      	b.n	bce96 <__udivmoddi4+0x1e2>
   bcf6c:	4640      	mov	r0, r8
   bcf6e:	e7d1      	b.n	bcf14 <__udivmoddi4+0x260>
   bcf70:	46d0      	mov	r8, sl
   bcf72:	e77b      	b.n	bce6c <__udivmoddi4+0x1b8>
   bcf74:	3b02      	subs	r3, #2
   bcf76:	4461      	add	r1, ip
   bcf78:	e732      	b.n	bcde0 <__udivmoddi4+0x12c>
   bcf7a:	4630      	mov	r0, r6
   bcf7c:	e709      	b.n	bcd92 <__udivmoddi4+0xde>
   bcf7e:	4464      	add	r4, ip
   bcf80:	3802      	subs	r0, #2
   bcf82:	e742      	b.n	bce0a <__udivmoddi4+0x156>

000bcf84 <__aeabi_idiv0>:
   bcf84:	4770      	bx	lr
   bcf86:	bf00      	nop

000bcf88 <atexit>:
   bcf88:	2300      	movs	r3, #0
   bcf8a:	4601      	mov	r1, r0
   bcf8c:	461a      	mov	r2, r3
   bcf8e:	4618      	mov	r0, r3
   bcf90:	f000 b868 	b.w	bd064 <__register_exitproc>

000bcf94 <memcpy>:
   bcf94:	440a      	add	r2, r1
   bcf96:	4291      	cmp	r1, r2
   bcf98:	f100 33ff 	add.w	r3, r0, #4294967295
   bcf9c:	d100      	bne.n	bcfa0 <memcpy+0xc>
   bcf9e:	4770      	bx	lr
   bcfa0:	b510      	push	{r4, lr}
   bcfa2:	f811 4b01 	ldrb.w	r4, [r1], #1
   bcfa6:	f803 4f01 	strb.w	r4, [r3, #1]!
   bcfaa:	4291      	cmp	r1, r2
   bcfac:	d1f9      	bne.n	bcfa2 <memcpy+0xe>
   bcfae:	bd10      	pop	{r4, pc}

000bcfb0 <memset>:
   bcfb0:	4402      	add	r2, r0
   bcfb2:	4603      	mov	r3, r0
   bcfb4:	4293      	cmp	r3, r2
   bcfb6:	d100      	bne.n	bcfba <memset+0xa>
   bcfb8:	4770      	bx	lr
   bcfba:	f803 1b01 	strb.w	r1, [r3], #1
   bcfbe:	e7f9      	b.n	bcfb4 <memset+0x4>

000bcfc0 <srand>:
   bcfc0:	b538      	push	{r3, r4, r5, lr}
   bcfc2:	4b10      	ldr	r3, [pc, #64]	; (bd004 <srand+0x44>)
   bcfc4:	681d      	ldr	r5, [r3, #0]
   bcfc6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bcfc8:	4604      	mov	r4, r0
   bcfca:	b9b3      	cbnz	r3, bcffa <srand+0x3a>
   bcfcc:	2018      	movs	r0, #24
   bcfce:	f7fb fc61 	bl	b8894 <malloc>
   bcfd2:	4602      	mov	r2, r0
   bcfd4:	63a8      	str	r0, [r5, #56]	; 0x38
   bcfd6:	b920      	cbnz	r0, bcfe2 <srand+0x22>
   bcfd8:	4b0b      	ldr	r3, [pc, #44]	; (bd008 <srand+0x48>)
   bcfda:	480c      	ldr	r0, [pc, #48]	; (bd00c <srand+0x4c>)
   bcfdc:	2142      	movs	r1, #66	; 0x42
   bcfde:	f7fb fc81 	bl	b88e4 <__assert_func>
   bcfe2:	490b      	ldr	r1, [pc, #44]	; (bd010 <srand+0x50>)
   bcfe4:	4b0b      	ldr	r3, [pc, #44]	; (bd014 <srand+0x54>)
   bcfe6:	e9c0 1300 	strd	r1, r3, [r0]
   bcfea:	4b0b      	ldr	r3, [pc, #44]	; (bd018 <srand+0x58>)
   bcfec:	6083      	str	r3, [r0, #8]
   bcfee:	230b      	movs	r3, #11
   bcff0:	8183      	strh	r3, [r0, #12]
   bcff2:	2100      	movs	r1, #0
   bcff4:	2001      	movs	r0, #1
   bcff6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bcffa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bcffc:	2200      	movs	r2, #0
   bcffe:	611c      	str	r4, [r3, #16]
   bd000:	615a      	str	r2, [r3, #20]
   bd002:	bd38      	pop	{r3, r4, r5, pc}
   bd004:	2003e448 	.word	0x2003e448
   bd008:	000be7d8 	.word	0x000be7d8
   bd00c:	000be7ef 	.word	0x000be7ef
   bd010:	abcd330e 	.word	0xabcd330e
   bd014:	e66d1234 	.word	0xe66d1234
   bd018:	0005deec 	.word	0x0005deec

000bd01c <strcpy>:
   bd01c:	4603      	mov	r3, r0
   bd01e:	f811 2b01 	ldrb.w	r2, [r1], #1
   bd022:	f803 2b01 	strb.w	r2, [r3], #1
   bd026:	2a00      	cmp	r2, #0
   bd028:	d1f9      	bne.n	bd01e <strcpy+0x2>
   bd02a:	4770      	bx	lr

000bd02c <strlen>:
   bd02c:	4603      	mov	r3, r0
   bd02e:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd032:	2a00      	cmp	r2, #0
   bd034:	d1fb      	bne.n	bd02e <strlen+0x2>
   bd036:	1a18      	subs	r0, r3, r0
   bd038:	3801      	subs	r0, #1
   bd03a:	4770      	bx	lr

000bd03c <strncpy>:
   bd03c:	b510      	push	{r4, lr}
   bd03e:	3901      	subs	r1, #1
   bd040:	4603      	mov	r3, r0
   bd042:	b132      	cbz	r2, bd052 <strncpy+0x16>
   bd044:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bd048:	f803 4b01 	strb.w	r4, [r3], #1
   bd04c:	3a01      	subs	r2, #1
   bd04e:	2c00      	cmp	r4, #0
   bd050:	d1f7      	bne.n	bd042 <strncpy+0x6>
   bd052:	441a      	add	r2, r3
   bd054:	2100      	movs	r1, #0
   bd056:	4293      	cmp	r3, r2
   bd058:	d100      	bne.n	bd05c <strncpy+0x20>
   bd05a:	bd10      	pop	{r4, pc}
   bd05c:	f803 1b01 	strb.w	r1, [r3], #1
   bd060:	e7f9      	b.n	bd056 <strncpy+0x1a>
	...

000bd064 <__register_exitproc>:
   bd064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd068:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bd124 <__register_exitproc+0xc0>
   bd06c:	4606      	mov	r6, r0
   bd06e:	f8d8 0000 	ldr.w	r0, [r8]
   bd072:	461f      	mov	r7, r3
   bd074:	460d      	mov	r5, r1
   bd076:	4691      	mov	r9, r2
   bd078:	f000 f856 	bl	bd128 <__retarget_lock_acquire_recursive>
   bd07c:	4b25      	ldr	r3, [pc, #148]	; (bd114 <__register_exitproc+0xb0>)
   bd07e:	681c      	ldr	r4, [r3, #0]
   bd080:	b934      	cbnz	r4, bd090 <__register_exitproc+0x2c>
   bd082:	4c25      	ldr	r4, [pc, #148]	; (bd118 <__register_exitproc+0xb4>)
   bd084:	601c      	str	r4, [r3, #0]
   bd086:	4b25      	ldr	r3, [pc, #148]	; (bd11c <__register_exitproc+0xb8>)
   bd088:	b113      	cbz	r3, bd090 <__register_exitproc+0x2c>
   bd08a:	681b      	ldr	r3, [r3, #0]
   bd08c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bd090:	6863      	ldr	r3, [r4, #4]
   bd092:	2b1f      	cmp	r3, #31
   bd094:	dd07      	ble.n	bd0a6 <__register_exitproc+0x42>
   bd096:	f8d8 0000 	ldr.w	r0, [r8]
   bd09a:	f000 f847 	bl	bd12c <__retarget_lock_release_recursive>
   bd09e:	f04f 30ff 	mov.w	r0, #4294967295
   bd0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd0a6:	b34e      	cbz	r6, bd0fc <__register_exitproc+0x98>
   bd0a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bd0ac:	b988      	cbnz	r0, bd0d2 <__register_exitproc+0x6e>
   bd0ae:	4b1c      	ldr	r3, [pc, #112]	; (bd120 <__register_exitproc+0xbc>)
   bd0b0:	b923      	cbnz	r3, bd0bc <__register_exitproc+0x58>
   bd0b2:	f8d8 0000 	ldr.w	r0, [r8]
   bd0b6:	f000 f838 	bl	bd12a <__retarget_lock_release>
   bd0ba:	e7f0      	b.n	bd09e <__register_exitproc+0x3a>
   bd0bc:	f44f 7084 	mov.w	r0, #264	; 0x108
   bd0c0:	f7fb fbe8 	bl	b8894 <malloc>
   bd0c4:	2800      	cmp	r0, #0
   bd0c6:	d0f4      	beq.n	bd0b2 <__register_exitproc+0x4e>
   bd0c8:	2300      	movs	r3, #0
   bd0ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bd0ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bd0d2:	6863      	ldr	r3, [r4, #4]
   bd0d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bd0d8:	2201      	movs	r2, #1
   bd0da:	409a      	lsls	r2, r3
   bd0dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bd0e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bd0e4:	4313      	orrs	r3, r2
   bd0e6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bd0ea:	2e02      	cmp	r6, #2
   bd0ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bd0f0:	bf02      	ittt	eq
   bd0f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bd0f6:	4313      	orreq	r3, r2
   bd0f8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bd0fc:	6863      	ldr	r3, [r4, #4]
   bd0fe:	f8d8 0000 	ldr.w	r0, [r8]
   bd102:	1c5a      	adds	r2, r3, #1
   bd104:	3302      	adds	r3, #2
   bd106:	6062      	str	r2, [r4, #4]
   bd108:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bd10c:	f000 f80e 	bl	bd12c <__retarget_lock_release_recursive>
   bd110:	2000      	movs	r0, #0
   bd112:	e7c6      	b.n	bd0a2 <__register_exitproc+0x3e>
   bd114:	2003e7e8 	.word	0x2003e7e8
   bd118:	2003e75c 	.word	0x2003e75c
   bd11c:	00000000 	.word	0x00000000
   bd120:	000b8895 	.word	0x000b8895
   bd124:	2003e4ac 	.word	0x2003e4ac

000bd128 <__retarget_lock_acquire_recursive>:
   bd128:	4770      	bx	lr

000bd12a <__retarget_lock_release>:
   bd12a:	4770      	bx	lr

000bd12c <__retarget_lock_release_recursive>:
   bd12c:	4770      	bx	lr

000bd12e <link_code_end>:
	...

000bd130 <dynalib_user>:
   bd130:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bd140:	0000 0000 7953 7473 6d65 5320 6174 7574     ....System Statu
   bd150:	3a73 3020 0078 6553 666c 5420 7365 3a74     s: 0x.Self Test:
   bd160:	2020 2020 3020 0078 7953 7473 6d65 4520          0x.System E
   bd170:	7272 726f 203a 3020 0078 0a0a 6554 706d     rror:  0x...Temp
   bd180:	7265 7461 7275 2065 203d 2000 0046 7250     erature = . F.Pr
   bd190:	7365 7573 6572 3d20 0020 6d20 486d 0067     essure = . mmHg.
   bd1a0:	7041 7270 786f 202e 6c41 6974 7574 6564     Approx. Altitude
   bd1b0:	3d20 0020 6d20 4800 6d75 6469 7469 2079      = . m.Humidity 
   bd1c0:	203d 2000 0025 2d2d 2d2d 2d2d 2d2d 2d2d     = . %.----------
   bd1d0:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   bd1e0:	2d2d 2d2d 2d2d 2d2d 2d2d 5300 6e65 6f73     ----------.Senso
   bd1f0:	3a72 2020 2020 2020 0020 7244 7669 7265     r:       .Driver
   bd200:	5620 7265 203a 2020 5500 696e 7571 2065      Ver:   .Unique 
   bd210:	4449 203a 2020 0020 614d 2078 6156 756c     ID:    .Max Valu
   bd220:	3a65 2020 2020 2000 7878 0078 694d 206e     e:    . xxx.Min 
   bd230:	6156 756c 3a65 2020 2020 5200 7365 6c6f     Value:    .Resol
   bd240:	7475 6f69 3a6e 2020 0020 430a 6c61 6269     ution:   ..Calib
   bd250:	6172 6974 6e6f 6f20 6666 6573 7374 0a20     ration offsets .
   bd260:	4100 6363 6c65 7265 6d6f 7465 7265 203a     .Accelerometer: 
   bd270:	0a00 7947 6f72 203a 0a00 614d 3a67 0020     ..Gyro: ..Mag: .
   bd280:	410a 6363 6c65 5220 6461 7569 3a73 0020     .Accel Radius: .
   bd290:	4d0a 6761 5220 6461 7569 3a73 0020 6554     .Mag Radius: .Te
   bd2a0:	7473 6e69 2067 6973 657a 0021 6146 6c69     sting size!.Fail
   bd2b0:	6465 7420 206f 7277 7469 2065 6461 7264     ed to write addr
   bd2c0:	7365 2073 7830 4600 6961 656c 2064 6f74     ess 0x.Failed to
   bd2d0:	7220 2d65 7277 7469 2065 6461 7264 7365      re-write addres
   bd2e0:	2073 7830 4600 756f 646e 6d20 7861 6120     s 0x.Found max a
   bd2f0:	6464 6572 7373 5400 6968 2073 4545 5250     ddress.This EEPR
   bd300:	4d4f 6320 6e61 7320 6f74 6572 0020 6220     OM can store . b
   bd310:	7479 7365 4e00 4e00 0045 4553 5300 5300     ytes.N.NE.SE.S.S
   bd320:	0057 574e 4200 7375 5620 6c6f 6174 6567     W.NW.Bus Voltage
   bd330:	203a 2020 2000 0056 6853 6e75 2074 6f56     :   . V.Shunt Vo
   bd340:	746c 6761 3a65 0020 6d20 0056 6f4c 6461     ltage: . mV.Load
   bd350:	5620 6c6f 6174 6567 203a 0020 7543 7272      Voltage:  .Curr
   bd360:	6e65 3a74 2020 2020 2020 0020 6d20 0041     ent:       . mA.
   bd370:	6f50 6577 3a72 2020 2020 2020 2020 0020     Power:         .
   bd380:	6d20 0057 3a58 0020 5909 203a 0900 3a5a      mW.X: ..Y: ..Z:
   bd390:	0020 0a0a 6300 6d6f 6170 7373 6820 6165      ....compass hea
   bd3a0:	6964 676e 203a 0020 0009 2021 5300 7379     ding:  ...! .Sys
   bd3b0:	003a 4720 003a 4120 003a 4d20 003a 6554     :. G:. A:. M:.Te
   bd3c0:	706d 202e 203d 5000 6572 7373 202e 203d     mp. = .Press. = 
   bd3d0:	4200 7375 7620 6c6f 6174 6567 3d20 0020     .Bus voltage = .
   bd3e0:	7563 7272 6e65 2074 203d 7000 776f 7265     current = .power
   bd3f0:	3d20 0020 6176 656e 6420 7269 202e 203d      = .vane dir. = 
   bd400:	2000 0064 6568 6461 6e69 2067 203d 5700     . d.heading = .W
   bd410:	6e69 5364 6570 6465 3d20 0020 6d20 6870     indSpeed = . mph
   bd420:	0a00 7563 7272 6e65 5f74 416d 3d20 0020     ..current_mA = .
   bd430:	6f72 6174 6974 6e6f 2073 203d 0a00 4d42     rotations = ..BM
   bd440:	2045 6c61 6974 7574 6564 7420 746f 6c61     E altitude total
   bd450:	3d20 0020 420a 454d 7420 6d65 2070 6f74      = ..BME temp to
   bd460:	6174 206c 203d 6c00 6f6f 2070 6f63 6e75     tal = .loop coun
   bd470:	6574 2072 203d 0a00 4d42 2045 6574 706d     ter = ..BME temp
   bd480:	6120 6576 6172 6567 3d20 0020 420a 454d      average = ..BME
   bd490:	7420 6d65 2070 7661 7265 6761 2065 7361      temp average as
   bd4a0:	3820 6220 7469 3d20 0020 6548 6c6c 216f      8 bit = .Hello!
   bd4b0:	4600 6961 656c 2064 6f74 6620 6e69 2064     .Failed to find 
   bd4c0:	4e49 3241 3931 6320 6968 0070 6974 656d     INA219 chip.time
   bd4d0:	6220 7361 2065 6176 756c 2065 003d 6156      base value =.Va
   bd4e0:	656e 5620 6c61 6575 4409 7269 6365 6974     ne Value.Directi
   bd4f0:	6e6f 4809 6165 6964 676e 4400 7661 7369     on.Heading.Davis
   bd500:	5720 6e69 2064 7053 6565 2064 6554 7473      Wind Speed Test
   bd510:	5200 746f 7461 6f69 736e 4d09 4850 4200     .Rotations.MPH.B
   bd520:	454d 3832 2030 6574 7473 3100 3832 3678     ME280 test.128x6
   bd530:	2034 4c4f 4445 4620 6165 6874 7265 6957     4 OLED FeatherWi
   bd540:	676e 7420 7365 0074 4c4f 4445 6220 6765     ng test.OLED beg
   bd550:	6e75 4200 7475 6f74 206e 6574 7473 4200     un.Button test.B
   bd560:	6769 6164 6464 4179 6464 6569 7720 6165     igdaddyAddie wea
   bd570:	6874 7265 7320 6174 6974 6e6f 0a21 6300     ther station!..c
   bd580:	6e6f 656e 7463 6465 0a21 4300 756f 646c     onnected!..Could
   bd590:	6e20 746f 6620 6e69 2064 2061 6176 696c      not find a vali
   bd5a0:	2064 4d42 3245 3038 7320 6e65 6f73 2c72     d BME280 sensor,
   bd5b0:	6320 6568 6b63 7720 7269 6e69 2c67 6120      check wiring, a
   bd5c0:	6464 6572 7373 202c 6573 736e 726f 4920     ddress, sensor I
   bd5d0:	2144 5300 6e65 6f73 4972 2044 6177 3a73     D!.SensorID was:
   bd5e0:	3020 0078 2020 2020 2020 2020 4449 6f20      0x.        ID o
   bd5f0:	2066 7830 4646 7020 6f72 6162 6c62 2079     f 0xFF probably 
   bd600:	656d 6e61 2073 2061 6162 2064 6461 7264     means a bad addr
   bd610:	7365 2c73 6120 4220 504d 3120 3038 6f20     ess, a BMP 180 o
   bd620:	2072 4d42 2050 3830 0a35 2000 2020 4449     r BMP 085..   ID
   bd630:	6f20 2066 7830 3635 302d 3578 2038 6572      of 0x56-0x58 re
   bd640:	7270 7365 6e65 7374 6120 4220 504d 3220     presents a BMP 2
   bd650:	3038 0a2c 2000 2020 2020 2020 4920 2044     80,..        ID 
   bd660:	666f 3020 3678 2030 6572 7270 7365 6e65     of 0x60 represen
   bd670:	7374 6120 4220 454d 3220 3038 0a2e 2000     ts a BME 280... 
   bd680:	2020 2020 2020 4920 2044 666f 3020 3678            ID of 0x6
   bd690:	2031 6572 7270 7365 6e65 7374 6120 4220     1 represents a B
   bd6a0:	454d 3620 3038 0a2e 4600 756f 646e 4920     ME 680...Found I
   bd6b0:	4332 4520 5045 4f52 004d 6f46 6e75 2064     2C EEPROM.Found 
   bd6c0:	3249 2043 5246 4d41 4900 4332 4520 5045     I2C FRAM.I2C EEP
   bd6d0:	4f52 204d 6f6e 2074 6469 6e65 6974 6966     ROM not identifi
   bd6e0:	6465 2e20 2e2e 6320 6568 6b63 7920 756f     ed ... check you
   bd6f0:	2072 6f63 6e6e 6365 6974 6e6f 3f73 0a0d     r connections?..
   bd700:	4f00 6f6f 7370 202c 6f6e 4220 4f4e 3530     .Ooops, no BNO05
   bd710:	2035 6564 6574 7463 6465 2e20 2e2e 4320     5 detected ... C
   bd720:	6568 6b63 7920 756f 2072 6977 6972 676e     heck your wiring
   bd730:	6f20 2072 3249 2043 4441 5244 0021 4e0a      or I2C ADDR!..N
   bd740:	206f 6143 696c 7262 7461 6f69 206e 6144     o Calibration Da
   bd750:	6174 6620 726f 7420 6968 2073 6573 736e     ta for this sens
   bd760:	726f 6520 6978 7473 2073 6e69 4520 5045     or exists in EEP
   bd770:	4f52 004d 460a 756f 646e 4320 6c61 6269     ROM..Found Calib
   bd780:	6172 6974 6e6f 6620 726f 7420 6968 2073     ration for this 
   bd790:	6573 736e 726f 6920 206e 4545 5250 4d4f     sensor in EEPROM
   bd7a0:	002e 0a0a 6552 7473 726f 6e69 2067 6143     ....Restoring Ca
   bd7b0:	696c 7262 7461 6f69 206e 6164 6174 7420     libration data t
   bd7c0:	206f 6874 2065 4e42 304f 3535 2e2e 002e     o the BNO055....
   bd7d0:	0a0a 6143 696c 7262 7461 6f69 206e 6164     ..Calibration da
   bd7e0:	6174 6c20 616f 6564 2064 6e69 6f74 4220     ta loaded into B
   bd7f0:	4f4e 3530 0035 6f4d 6576 7320 6e65 6f73     NO055.Move senso
   bd800:	2072 6c73 6769 7468 796c 7420 206f 6163     r slightly to ca
   bd810:	696c 7262 7461 2065 616d 6e67 7465 6d6f     librate magnetom
   bd820:	7465 7265 0073 6f4d 6576 7320 6e65 6f73     eters.Move senso
   bd830:	2072 6c73 6769 7468 796c 5000 656c 7361     r slightly.Pleas
   bd840:	2065 6143 696c 7262 7461 2065 6553 736e     e Calibrate Sens
   bd850:	726f 203a 0a00 7546 6c6c 2079 6163 696c     or: ..Fully cali
   bd860:	7262 7461 6465 0021 6143 696c 7262 7461     brated!.Calibrat
   bd870:	6f69 206e 6552 7573 746c 3a73 0020 0a0a     ion Results: ...
   bd880:	7453 726f 6e69 2067 6163 696c 7262 7461     Storing calibrat
   bd890:	6f69 206e 6164 6174 7420 206f 4545 5250     ion data to EEPR
   bd8a0:	4d4f 2e2e 002e 6144 6174 7320 6f74 6572     OM....Data store
   bd8b0:	2064 6f74 4520 5045 4f52 2e4d 0a00 2d2d     d to EEPROM...--
   bd8c0:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   bd8d0:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 000a     --------------..
   bd8e0:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   bd8f0:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   bd900:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   bd910:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   bd920:	7525 003e                                   %u>.

000bd924 <_ZTVN8particle11SPISettingsE>:
	...
   bd92c:	5cf5 000b 5cc9 000b 5ccb 000b               .\...\...\..

000bd938 <_ZTV15Adafruit_BNO055>:
	...
   bd940:	6ea1 000b 6edd 000b 6e9f 000b 746d 000b     .n...n...n..mt..
   bd950:	6ea5 000b                                   .n..

000bd954 <_ZTV17Adafruit_GrayOLED>:
	...
   bd964:	7ee5 000b 8c6d 000b 74bf 000b 78eb 000b     .~..m....t...x..
   bd974:	78ed 000b 791f 000b 78fb 000b 790d 000b     .x...y...x...y..
   bd984:	782d 000b 78eb 000b 7b17 000b 76bb 000b     -x...x...{...v..
   bd994:	7937 000b 7975 000b 79af 000b 79f5 000b     7y..uy...y...y..
   bd9a4:	7a11 000b 7a95 000b 40a5 000b               .z...z...@..

000bd9b0 <_ZL4font>:
   bd9b0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bd9c0:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bd9d0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bd9e0:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bd9f0:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bda00:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bda10:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bda20:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bda30:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bda40:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bda50:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bda60:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bda70:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bda80:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bda90:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bdaa0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bdab0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bdac0:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bdad0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bdae0:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bdaf0:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bdb00:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bdb10:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bdb20:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bdb30:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bdb40:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bdb50:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bdb60:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bdb70:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bdb80:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bdb90:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bdba0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bdbb0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bdbc0:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bdbd0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bdbe0:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bdbf0:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bdc00:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bdc10:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bdc20:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bdc30:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bdc40:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   bdc50:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bdc60:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bdc70:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   bdc80:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bdc90:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   bdca0:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   bdcb0:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   bdcc0:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bdcd0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bdce0:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bdcf0:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bdd00:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bdd10:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bdd20:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   bdd30:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   bdd40:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   bdd50:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   bdd60:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   bdd70:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   bdd80:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   bdd90:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   bdda0:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   bddb0:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   bddc0:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   bddd0:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   bdde0:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   bddf0:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   bde00:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   bde10:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   bde20:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   bde30:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   bde40:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   bde50:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   bde60:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   bde70:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   bde80:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   bde90:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   bdea0:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000bdeb0 <_ZTV12Adafruit_GFX>:
	...
   bdec0:	7ee5 000b 8c6d 000b 40a5 000b 78eb 000b     .~..m....@...x..
   bded0:	78ed 000b 791f 000b 78fb 000b 790d 000b     .x...y...x...y..
   bdee0:	782d 000b 78eb 000b 7b17 000b 7b15 000b     -x...x...{...{..
   bdef0:	7937 000b 7975 000b 79af 000b 79f5 000b     7y..uy...y...y..
   bdf00:	7a11 000b 7a95 000b                         .z...z..

000bdf08 <_ZTV15Adafruit_SH110X>:
	...
   bdf10:	40a5 000b 40a5 000b 7ee5 000b 8c6d 000b     .@...@...~..m...
   bdf20:	74bf 000b 78eb 000b 78ed 000b 791f 000b     .t...x...x...y..
   bdf30:	78fb 000b 790d 000b 782d 000b 78eb 000b     .x...y..-x...x..
   bdf40:	7b17 000b 76bb 000b 7937 000b 7975 000b     .{...v..7y..uy..
   bdf50:	79af 000b 79f5 000b 7a11 000b 7a95 000b     .y...y...z...z..
   bdf60:	7ff3 000b                                   ....

000bdf64 <_ZL12splash2_data>:
   bdf64:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bdf74:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bdf84:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bdfa0:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bdfb0:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   bdfc0:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bdfd0:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   bdfe0:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   bdff0:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   be000:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   be010:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   be020:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   be030:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   be040:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   be050:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   be060:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   be070:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   be080:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   be090:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   be0a0:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   be0b0:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   be0c0:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   be0d0:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   be0e0:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   be0f8:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   be108:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   be118:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   be128:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   be138:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000be144 <_ZTV15Adafruit_SH1107>:
	...
   be14c:	8191 000b 81a5 000b 7ee5 000b 8c6d 000b     .........~..m...
   be15c:	74bf 000b 78eb 000b 78ed 000b 791f 000b     .t...x...x...y..
   be16c:	78fb 000b 790d 000b 782d 000b 78eb 000b     .x...y..-x...x..
   be17c:	7b17 000b 76bb 000b 7937 000b 7975 000b     .{...v..7y..uy..
   be18c:	79af 000b 79f5 000b 7a11 000b 7a95 000b     .y...y...z...z..
   be19c:	7ff3 000b                                   ....

000be1a0 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   be1a0:	00d3 7fa8                                   ....

000be1a4 <_ZZN15Adafruit_SH11075beginEhbE4init>:
   be1a4:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
   be1b4:	35db 3fa8 a6a4 0000                         .5.?....

000be1bc <_ZTVN5spark13EthernetClassE>:
	...
   be1c4:	8963 000b 8959 000b 894f 000b 8945 000b     c...Y...O...E...
   be1d4:	8939 000b 892d 000b 9677 000b 967f 000b     9...-...w.......
   be1e4:	8921 000b 8919 000b 890f 000b 8905 000b     !...............
   be1f4:	96af 000b                                   ....

000be1f8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   be1f8:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   be208:	766f 0066 7061 0070 5925 252d 2d6d 6425     ovf.app.%Y-%m-%d
   be218:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   be228:	6d69 0065                                   ime.

000be22c <_ZTV9IPAddress>:
	...
   be234:	91b1 000b 91a1 000b 91a3 000b               ............

000be240 <_ZTV9USBSerial>:
	...
   be248:	9297 000b 92ff 000b 92d5 000b 8c6d 000b     ............m...
   be258:	92c7 000b 9299 000b 92a9 000b 92f9 000b     ................
   be268:	92b9 000b 9291 000b                         ........

000be270 <_ZTVN5spark13CellularClassE>:
	...
   be278:	945b 000b 9451 000b 9447 000b 93fd 000b     [...Q...G.......
   be288:	943b 000b 942f 000b 9677 000b 967f 000b     ;.../...w.......
   be298:	9423 000b 941b 000b 9411 000b 9407 000b     #...............
   be2a8:	96af 000b                                   ....

000be2ac <_ZTV11USARTSerial>:
	...
   be2b4:	9495 000b 9501 000b 94d9 000b 8c6d 000b     ............m...
   be2c4:	94a9 000b 94c5 000b 94b7 000b 94d3 000b     ................
   be2d4:	9497 000b 949b 000b                         ........

000be2dc <_ZTV7TwoWire>:
	...
   be2e4:	9539 000b 9583 000b 955b 000b 953b 000b     9.......[...;...
   be2f4:	9563 000b 956b 000b 9573 000b 957b 000b     c...k...s...{...

000be304 <_ZTVN5spark12NetworkClassE>:
	...
   be30c:	9637 000b 9641 000b 964b 000b 9655 000b     7...A...K...U...
   be31c:	965f 000b 966b 000b 9677 000b 967f 000b     _...k...w.......
   be32c:	9687 000b 9693 000b 969b 000b 96a5 000b     ................
   be33c:	96af 000b                                   ....

000be340 <_ZSt7nothrow>:
	...

000be348 <CSWTCH.8>:
   be348:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   be358:	21d2 7f33 d97c c002                         .!3.|...

000be360 <CSWTCH.9>:
   be360:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   be370:	2d18 5444 21fb c009 0000 0000               .-DT.!......

000be37c <CSWTCH.8>:
   be37c:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000be388 <CSWTCH.9>:
   be388:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000be394 <npio2_hw>:
   be394:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   be3a4:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   be3b4:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   be3c4:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   be3d4:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   be3e4:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   be3f4:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   be404:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000be414 <two_over_pi>:
   be414:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   be424:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   be434:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   be444:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   be454:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   be464:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   be474:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   be484:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   be494:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   be4a4:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   be4b4:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   be4c4:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   be4d4:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   be4e4:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   be4f4:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   be504:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   be514:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   be524:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   be534:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   be544:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   be554:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   be564:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   be574:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   be584:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   be594:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   be5a4:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   be5b4:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   be5c4:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   be5d4:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   be5e4:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   be5f4:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   be604:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   be614:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   be624:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   be634:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   be644:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   be654:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   be664:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   be674:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   be684:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   be694:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   be6a4:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   be6b4:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   be6c4:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   be6d4:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   be6e4:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   be6f4:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   be704:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   be714:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   be724:	008c 0000 006b 0000                         ....k...

000be72c <PIo2>:
   be72c:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   be73c:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   be74c:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000be758 <init_jk>:
   be758:	0004 0000 0007 0000 0009 0000 0000 0000     ................

000be768 <atanhi>:
   be768:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   be778:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000be788 <atanlo>:
   be788:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   be798:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000be7a8 <TWO52>:
   be7a8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000be7b8 <atanhi>:
   be7b8:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000be7c8 <atanlo>:
   be7c8:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
   be7d8:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   be7e8:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   be7f8:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   be808:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   be818:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   be828:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   be838:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   be848:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   be858:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   be868:	2e64 0063                                   d.c.

000be86c <link_const_variable_data_end>:
   be86c:	000b4e5d 	.word	0x000b4e5d
   be870:	000b896d 	.word	0x000b896d
   be874:	000b8b0d 	.word	0x000b8b0d
   be878:	000b8c5d 	.word	0x000b8c5d
   be87c:	000b8fa5 	.word	0x000b8fa5
   be880:	000b9029 	.word	0x000b9029
   be884:	000b905d 	.word	0x000b905d
   be888:	000b9465 	.word	0x000b9465
   be88c:	000b9789 	.word	0x000b9789
